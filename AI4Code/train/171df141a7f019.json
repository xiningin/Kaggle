{"cell_type":{"637c3147":"code","a03c6d32":"code","0335d9ea":"code","7ad2f5fe":"code","02618546":"code","7452c360":"code","6769c0e2":"code","c000bf38":"code","64ca2948":"code","b1518229":"code","7d5f74a8":"code","7cc57ba6":"code","e9b06750":"code","93c9cfc2":"code","dc6f7d6a":"code","46f1b0aa":"code","6f29a08d":"code","30422b45":"code","a03de9c6":"code","ede57100":"code","c9a7d660":"code","1b2d0163":"code","1d01021b":"code","28faffd8":"code","55273ae9":"code","65ace721":"code","2c1c1d11":"code","52fc4315":"code","a86c921a":"code","04c2e40f":"code","ee5664a6":"code","cc909479":"code","4f27295a":"code","11ff7ca5":"code","38329ed4":"code","2b21a433":"code","2206ad31":"code","65875752":"code","52158d02":"code","ca7387b2":"code","868e0583":"code","1f49b033":"code","1137b461":"code","2cd9ca83":"code","583117d5":"code","500a3f2f":"code","e34b6a49":"code","8db33fdd":"code","d3279311":"code","851cc5d4":"code","d3f8cb26":"code","4024b565":"code","f8d79a8f":"code","e6833ef5":"code","720ac2db":"code","fca538ed":"code","5fc365dd":"code","edf43651":"code","92862dd5":"code","db54787a":"code","a1ccaef2":"code","7ac8a229":"code","16fd4f05":"code","bfe8d619":"code","3deb4ed4":"code","4214670e":"code","6c5b3c4b":"code","e3364e23":"code","02a48175":"code","1ec3a231":"code","fce99000":"code","0a48018f":"code","2e1f5811":"code","a0a54ad1":"code","8bbb14d0":"code","1a9df178":"code","60d15dda":"code","b4f81954":"code","e5e331c8":"code","6cf87c01":"code","8273b147":"code","ff4caf18":"code","e6dc3e17":"code","b6e7941e":"code","66252936":"code","7777722d":"code","bb9d53a4":"code","68a3fc21":"code","378694c1":"markdown","695d1b78":"markdown","6169c77f":"markdown","169d67ba":"markdown","6a457ddc":"markdown","8922ce9b":"markdown","d3a0d57e":"markdown","66ebc7ed":"markdown","56bca796":"markdown","308428e8":"markdown","22a32f54":"markdown","93ef5fe3":"markdown","db369737":"markdown","7798d31f":"markdown","347e1340":"markdown","8a1f187e":"markdown","29404229":"markdown","df7efe25":"markdown","c018c4b0":"markdown","bfd120d1":"markdown","7f5abb13":"markdown","b9324e59":"markdown","d3bfcdb4":"markdown","df822f7d":"markdown","4776de97":"markdown","6176117d":"markdown","77748170":"markdown","e3a62fa2":"markdown","d93fb43a":"markdown","17449835":"markdown","927f6af7":"markdown","69e1e48e":"markdown","018fd299":"markdown","b5d09a6f":"markdown","5636b015":"markdown","799dfc0a":"markdown","c5ebd837":"markdown","95f8f9a2":"markdown","b41e993f":"markdown","b43cde17":"markdown","0e87da21":"markdown","2786ad50":"markdown","108a01c3":"markdown","fea7f949":"markdown","3eef2ff5":"markdown","1fc660fe":"markdown","87bee2dc":"markdown","a597b782":"markdown","7298b9b0":"markdown","2b22ea29":"markdown","e388adb9":"markdown","727d4a63":"markdown","f0914bb9":"markdown","68313857":"markdown","d000cba3":"markdown","8cb125e5":"markdown","5000247f":"markdown","55f6b92e":"markdown","b4ad4a1c":"markdown","c41d81c2":"markdown","2a290a5e":"markdown","fa1da88e":"markdown","28257c01":"markdown","5de763fe":"markdown","4bc4d143":"markdown","b5648749":"markdown","8d961c76":"markdown","47ad7a32":"markdown","6654ac97":"markdown","6ff08a89":"markdown","708c2b88":"markdown","bf2e10dd":"markdown","fec9fa3d":"markdown","b0b5fa64":"markdown","4ad53e52":"markdown","d68f6c3f":"markdown","eb077691":"markdown","2a756ee3":"markdown","5291fdf0":"markdown"},"source":{"637c3147":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set()\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nprint(os.listdir(\"..\/input\"))","a03c6d32":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nanswer = pd.read_csv(\"..\/input\/how-top-lb-got-their-score-use-titanic-to-learn\/submission.csv\")","0335d9ea":"df_train.head(10)","7ad2f5fe":"df_train.info()","02618546":"sns.countplot(x='Survived',data=df_train);","7452c360":"print ('Baseline Survivability = {0:.3f}'.format(1-(df_train.Survived.sum()\/df_train.shape[0])))","6769c0e2":"def print_percentage(df,col_name,col_values):\n    for x in col_values:\n        group = df.loc[df[col_name]==x]\n        print ('{0} survival rate: {1:.3f}'.format(x, (group['Survived'].sum()\/group.shape[0])))","c000bf38":"# Data jittering\ndef rand_jitter(arr,factor,limit):\n    r = arr.max()-arr.min()\n    stdev = factor*r\n    arr = arr + np.random.randn(arr.shape[0]) * stdev\n    arr = arr.clip(arr.min()-limit,arr.max()+limit)\n    return arr","64ca2948":"sns.catplot(x='Sex', col='Survived', kind='count', data=df_train)\nprint_percentage(df_train,'Sex',['male','female'])","b1518229":"sns.catplot('Pclass', 'Survived', kind='point', data=df_train)\nprint_percentage(df_train,'Pclass',[1,2,3])","7d5f74a8":"sns.catplot('Pclass', 'Survived', hue='Sex', kind='point', data=df_train)","7cc57ba6":"df_train['Sex'] = df_train['Sex'].astype('category')\ndf_train['sex'] = rand_jitter(df_train['Sex'].cat.codes,0.07,0.4)\ndf_train['pclass'] = rand_jitter(df_train['Pclass'],0.07,0.4)\nplt.figure(figsize=(16, 6))\nsns.scatterplot(x=\"sex\",y=\"pclass\",hue=\"Survived\",data=df_train)","e9b06750":"sns.catplot(x='Survived', col='Embarked', kind='count', data=df_train)\nprint_percentage(df_train,'Embarked',['S','C','Q'])","93c9cfc2":"# Embarked vs Sex\nsns.catplot(x='Sex', col='Embarked', kind='count', data=df_train)","dc6f7d6a":"# Embarked vs Pclass\nsns.catplot(x='Pclass', col='Embarked', kind='count', data=df_train)","46f1b0aa":"df_train[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()\nfacet = sns.FacetGrid(data = df_train,hue=\"Survived\",legend_out=True,size = 4.5,height=6,aspect=2)\nfacet = facet.map(sns.kdeplot, \"Age\")\nfacet.add_legend();","6f29a08d":"df_train[['Age', 'Survived']].groupby(['Age'], as_index=False).mean()\nfacet = sns.FacetGrid(data = df_train,hue=\"Survived\",col='Sex',legend_out=True,size = 4.5,height=6,aspect=2)\nfacet = facet.map(sns.kdeplot, \"Age\")\nfacet.add_legend();","30422b45":"# Merge dataframes for easier data processing\ndf_all = pd.concat([df_train,df_test])","a03de9c6":"df_all['FamilySize'] = df_all['SibSp']+df_all['Parch']+1\nplt.subplots(figsize=(10,6))\nsns.barplot(x='FamilySize', y='Survived', data=df_all)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of FamilySize\")\nplt.show()","ede57100":"plt.subplots(figsize=(18,6))\nsns.barplot(x='Sex', y='Survived', hue='FamilySize', data=df_all)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of FamilySize & Sex\")\nplt.show()","c9a7d660":"plt.subplots(figsize=(18,6))\nsns.barplot(x='Pclass', y='Survived', hue='FamilySize', data=df_all)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of FamilySize & Pclass\")\nplt.show()","1b2d0163":"df_all['Alone'] = 0\ndf_all.loc[(df_all.FamilySize==1),'Alone'] = 1\ndf_all['SmallFamily'] = 0\ndf_all.loc[(df_all.FamilySize>1)&(df_all.FamilySize<=4),'SmallFamily'] = 1\ndf_all['BigFamily'] = 0\ndf_all.loc[(df_all.FamilySize>4),'BigFamily'] = 1\ndf_all['FamilyType'] = 1\ndf_all.loc[(df_all.FamilySize==1),'FamilyType'] = 2\ndf_all.loc[(df_all.FamilySize>1)&(df_all.FamilySize<=4),'FamilyType'] = 3\ndf_all.loc[(df_all.FamilySize>4),'FamilyType'] = 1","1d01021b":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='Alone', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='Alone', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='Alone', data=df_all, ax=axes[2])","28faffd8":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='SmallFamily', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='SmallFamily', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='SmallFamily', data=df_all, ax=axes[2])","55273ae9":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='BigFamily', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='BigFamily', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='BigFamily', data=df_all, ax=axes[2])","65ace721":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='FamilyType', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='FamilyType', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='FamilyType', data=df_all, ax=axes[2])","2c1c1d11":"df_all[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean()\nfacet = sns.FacetGrid(df_all,hue=\"Survived\",legend_out=True,size = 4.5,height=6,aspect=2)\nfacet = facet.map(sns.kdeplot, \"Fare\")\nfacet.add_legend()","52fc4315":"df_all[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean()\nfacet = sns.FacetGrid(df_all,hue=\"Survived\",col='Pclass',legend_out=True,size = 4.5,height=6,aspect=1)\nfacet = facet.map(sns.kdeplot, \"Fare\")\nfacet.add_legend()","a86c921a":"# Bin per frequency, not value interval\ndf_all['FareBin'], FareBin = pd.qcut(df_all['Fare'], 5, retbins=True)\nf,axes = plt.subplots(1, 3,figsize=(24,6))\nsns.barplot(x='FareBin', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='FareBin', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='FareBin', data=df_all, ax=axes[2])","04c2e40f":"sns.catplot('FareBin','Survived',kind='point',data=df_all,height=6, aspect=4)","ee5664a6":"df_all['Cabin'].unique()","cc909479":"df_all['cabin'] = df_all['Cabin'].str[0]\ndf_all['cabin'].value_counts()","4f27295a":"f,axes = plt.subplots(1, 3,figsize=(24,6))\nsns.barplot(x='cabin', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='cabin', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='cabin', data=df_all, ax=axes[2])","11ff7ca5":"df_all['haveCabin'] = 1\ndf_all.loc[df_all['cabin'].isnull(),'haveCabin'] = 0","38329ed4":"print ('Have Cabin Record: %s' %(df_all.loc[df_all['haveCabin']==1,'haveCabin'].count()))\nprint ('No Cabin Record: %s' %(df_all.loc[df_all['haveCabin']==0,'haveCabin'].count()))\nsns.catplot(x='haveCabin', col='Pclass', kind='count', data=df_all)","2b21a433":"f,axes = plt.subplots(1, 3,figsize=(24,6))\nsns.barplot(x='haveCabin', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='haveCabin', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='haveCabin', data=df_all, ax=axes[2])","2206ad31":"# Getting Title from names\ndf_all['Title']=df_all['Name'].str.extract(r'([A-Za-z]+)\\.')\ndf_all['Title'].value_counts()","65875752":"plt.subplots(figsize=(16,6))\nsns.barplot(x='Title' , y='Survived' , data = df_all)\nplt.ylabel(\"Survived\")\nplt.title(\"Survived as function of Title\")\nplt.show()","52158d02":"# Convert rare titles to more common ones\ndf_all['Title'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don','Dona'],\n                    ['Miss','Mrs','Miss','RespectMale','RespectMale','Noble','Noble','RespectMale','RespectMale','RespectMale','RespectMale','Noble','Mr','Mrs'],inplace=True)\ndf_all['Title'].value_counts()","ca7387b2":"plt.subplots(figsize=(16,6))\nsns.barplot(x='Title' , y='Survived' , data = df_all)\nplt.ylabel(\"Survived\")\nplt.title(\"Survived as function of Title\")\nplt.show()","868e0583":"df_all[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()\nfacet = sns.FacetGrid(data = df_all,hue=\"Title\",legend_out=True,size = 4.5,height=6,aspect=2)\nfacet = facet.map(sns.kdeplot, \"Age\")\nfacet.add_legend()","1f49b033":"plt.subplots(figsize=(18,6))\nsns.barplot(x='Pclass', y='Survived', hue='Title', data=df_all)\nplt.ylabel(\"Survival Rate\")\nplt.title(\"Survival as function of Title & Pclass\")\nplt.show()","1137b461":"df_all['Child'] = 0\ndf_all.loc[(df_all.Age<16),'Child'] = 1","2cd9ca83":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='Child', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='Child', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='Child', data=df_all, ax=axes[2])","583117d5":"df_all['NameLen'] = df_all.Name.apply(lambda x : len(x)) \nplt.subplots(figsize=(16,6))\nsns.barplot(x='NameLen' , y='Survived' , data = df_all)\nplt.ylabel(\"Survived\")\nplt.title(\"Survived as function of NameLen\")\nplt.show()","500a3f2f":"# Bin per frequency, not value interval\nbin_num = 2\ndf_all['NameLenBin'] = pd.qcut(df_all['NameLen'], 2,labels=list(range(bin_num)))\nf,axes = plt.subplots(1, 3,figsize=(24,6))\nsns.barplot(x='NameLenBin', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='NameLenBin', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='NameLenBin', data=df_all, ax=axes[2])","e34b6a49":"df_all['Ticket'].describe()","8db33fdd":"duplicate_ticket = []\nfor tk in df_all.Ticket.unique():\n    tem = df_all.loc[df_all.Ticket == tk, 'Fare']\n    #print(tem.count())\n    if tem.count() > 1:\n        #print(df_data.loc[df_data.Ticket == tk,['Name','Ticket','Fare']])\n        duplicate_ticket.append(df_all.loc[df_all.Ticket == tk,['Name','Ticket','Fare','Cabin','FamilySize','Survived']])\nduplicate_ticket = pd.concat(duplicate_ticket)\nduplicate_ticket.head(20)","d3279311":"df_fri = duplicate_ticket.loc[(duplicate_ticket.FamilySize == 1) & (duplicate_ticket.Survived.notnull())].head(7)\ndf_fami = duplicate_ticket.loc[(duplicate_ticket.FamilySize > 1) & (duplicate_ticket.Survived.notnull())].head(7)\ndisplay(df_fri,df_fami)\nprint('people keep the same ticket: %.0f '%len(duplicate_ticket))\nprint('friends: %.0f '%len(duplicate_ticket[duplicate_ticket.FamilySize == 1]))\nprint('families: %.0f '%len(duplicate_ticket[duplicate_ticket.FamilySize > 1]))","851cc5d4":"# the same ticket family or friends\ndf_all['Connected_Survival'] = 0.5 # default \nfor _, df_grp in df_all.groupby('Ticket'):\n    if (len(df_grp) > 1):\n        for ind, row in df_grp.iterrows():\n            smax = df_grp.drop(ind)['Survived'].max()\n            smin = df_grp.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                df_all.loc[df_all['PassengerId'] == passID, 'Connected_Survival'] = 1\n            elif (smin==0.0):\n                df_all.loc[df_all['PassengerId'] == passID, 'Connected_Survival'] = 0\n\nprint('people keep the same ticket: %.0f '%len(duplicate_ticket))\nprint(\"people have connected information : %.0f\" \n      %(df_all[df_all['Connected_Survival']!=0.5].shape[0]))\ndf_all.groupby('Connected_Survival')[['Survived']].mean().round(3)","d3f8cb26":"f,axes = plt.subplots(1, 3,figsize=(18,6))\nsns.barplot(x='Connected_Survival', y='Survived', data=df_all, ax=axes[0])\nsns.barplot(x='Sex', y='Survived', hue='Connected_Survival', data=df_all, ax=axes[1])\nsns.barplot(x='Pclass', y='Survived', hue='Connected_Survival', data=df_all, ax=axes[2])","4024b565":"df_all.isnull().sum()","f8d79a8f":"def fillna_part(df,df_base,category,feature,integer):\n    for x in list(df_base[category].values):\n        fill_value = df_base.loc[df_base[category]==x][feature].values[0]\n        if integer:\n            fill_value = fill_value.round()\n        df.loc[(df[category]==x)&(df[feature].isnull()),feature] = fill_value\n    return df","e6833ef5":"# Fill missing age according to mean age of the title group\ndf_title = df_all.groupby(['Title'], as_index=False).mean()\ndf_all = fillna_part(df_all,df_title,'Title','Age',True)\n\n# Redo child feature again for the newly filled missing values\ndf_all['Child'] = 0\ndf_all.loc[(df_all.Age<16),'Child'] = 1","720ac2db":"df_all.loc[df_all['Embarked'].isnull()][['Pclass','Name','Ticket','Survived','Connected_Survival']]","fca538ed":"# Fill missing Embark with the most common\n#major_embark = df_all['Embarked'].value_counts().idxmax()\n#df_all['Embarked'].fillna(major_embark,inplace=True)\n\n# Since the 2 missing embarked in df_all are from Pclass=1, and the most likely port for 1st class people to embark is C, we will fill them with C.\ndf_all['Embarked'].fillna('C',inplace=True)","5fc365dd":"df_all.loc[df_all['Fare'].isnull()]","edf43651":"# Fill missing Fare with the median price of the same pclass and embark as the person\ndf_all.loc[(df_all.Fare.isnull()),'Fare'] = df_all[(df_all.Embarked=='S')&(df_all.Pclass==3)].Fare.median()","92862dd5":"# Rebin Fare now the missing values are filled\n# Bin per frequency, not value interval\nbin_num = 5\ndf_all['FareBin'] = pd.qcut(df_all['Fare'], bin_num, labels=list(range(bin_num)))","db54787a":"# Rebin NameLen per frequency, not value interval\nbin_num = 4\ndf_all['NameLenBin'] = pd.qcut(df_all['NameLen'], bin_num,labels=list(range(bin_num)))","a1ccaef2":"import pickle\ndf_train = df_all[:len(df_train)]\ndf_test = df_all[len(df_train):]\n\ndf_train.to_pickle('df_train.pkl')\ndf_test.to_pickle('df_test.pkl')","7ac8a229":"df_all.info()","16fd4f05":"encodings = {\n    'Sex':{'male':0,'female':1},\n    'Embarked':{'S':0,'C':1,'Q':0},\n    'FareBin':{'0':0,'1':1,'2':2,'3':3,'4':4},\n    'Title':{'Mr':0,'RespectMale':1,'Master':2,'Miss':3,'Mrs':4,'Noble':5},\n    'cabin':{'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'T':8,'N':0},\n    'NameLenBin':{'0':0,'1':1,'2':2,'3':3}\n}\n\ndf_all['FareBin'] = df_all['FareBin'].astype(str)\ndf_all['NameLenBin'] = df_all['NameLenBin'].astype(str)\ndf_all['cabin'].fillna('N',inplace=True)\n\nfor k,v in encodings.items():\n    df_all['%s_encode' %k] = df_all[k].map(v)    ","bfe8d619":"# Choose only the non object and unique features\nvalid_features = np.where(df_all.dtypes != 'object')[0]\nvalid_features = [list(df_all.columns.values)[i] for i in valid_features]\nvalid_features.remove('Survived')\nvalid_features.remove('sex')\nvalid_features.remove('pclass')","3deb4ed4":"import scipy.stats as ss\ndef correlation_ranking(df,features,target_name,plot=True,absolute=False):\n    label = df[target_name].as_matrix()\n    features2 = []\n    corrs = []\n    ps = []\n    for f in features:\n        if f != target_name:\n            feature = df[f].as_matrix()\n            corr,p = ss.pearsonr(label,feature)\n            features2.append(f)\n            corrs.append(corr)\n            ps.append(p)\n    p_corr = pd.DataFrame(np.array([features2,corrs,ps]).T,columns=['Feature','Correlation','P-value'])\n    p_corr['Correlation'] = p_corr['Correlation'].astype('float64') \n    p_corr['P-value'] = p_corr['P-value'].astype('float64') \n    p_corr['ABS Correlation'] = p_corr['Correlation'].abs()\n    p_corr['index'] = p_corr.index\n    p_corr = p_corr.sort_values(by='ABS Correlation',ascending=False)\n    ranking = list(range(1,len(features)+1))\n    p_corr['Ranking'] = ranking\n    \n    # Draw the graph\n    if plot:\n        if absolute:\n            ax = p_corr.plot.bar(y='ABS Correlation',title='ABS Feature Correlations',figsize=(20,5))\n        else:\n            ax = p_corr.plot.bar(y='Correlation',title='Feature Correlations',figsize=(20,5))\n        plt.show()\n    return p_corr","4214670e":"def correlation_heatmap(df,absolute):\n    _ , ax = plt.subplots(figsize =(16, 16))\n    \n    if absolute:\n        corr = df.corr().abs()\n        colormap = sns.color_palette(\"Reds\")\n    else:\n        corr = df.corr()\n        colormap = sns.diverging_palette(220, 10, as_cmap = True)\n        \n    _ = sns.heatmap(\n        corr, \n        cmap = colormap,\n        square=True, \n        cbar_kws={'shrink':.9 }, \n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':10 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=15)","6c5b3c4b":"df_train = df_all[:len(df_train)]\ndf_test = df_all[len(df_train):]","e3364e23":"corr_rank = correlation_ranking(df_train,valid_features,'Survived',plot=True,absolute=False)","02a48175":"corr_rank","1ec3a231":"correlation_heatmap(df_all[valid_features],True)","fce99000":"print (list(corr_rank['Feature'].values))","0a48018f":"chosen_features = ['Title_encode','Pclass','FareBin_encode','Connected_Survival','FamilyType']","2e1f5811":"train_x = df_train[chosen_features]\ntrain_y = df_train['Survived']\ntest_x = df_test[chosen_features]","a0a54ad1":"train_x.isnull().sum()","8bbb14d0":"test_x.isnull().sum()","1a9df178":"print (list(train_x.columns.values))\nprint (list(test_x.columns.values))","60d15dda":"train_x.info()","b4f81954":"train_x.head()","e5e331c8":"train_x.to_pickle('train_x.pkl')\ntrain_y.to_pickle('train_y.pkl')\ntest_x.to_pickle('test_x.pkl')\nanswer.to_pickle('test_y.pkl')\ndf_test['PassengerId'].to_pickle('test_id.pkl')","6cf87c01":"from sklearn.utils.testing import ignore_warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom scipy.stats import uniform\ncv_scores = {}","8273b147":"def get_best_score(model):\n    print(model.best_score_)    \n    print(model.best_params_)\n    print(model.best_estimator_)\n    return model.best_score_\n\ndef plot_feature_importances(model, columns):\n    nr_f = 10\n    imp = pd.Series(data = model.feature_importances_, \n                    index=columns).sort_values(ascending=False)\n    plt.figure(figsize=(7,5))\n    plt.title(\"Feature importance\")\n    ax = sns.barplot(y=imp.index[:nr_f], x=imp.values[:nr_f], orient='h')\n\ndef submission(test_set,df_test,model_name,model,best_score,cv_scores):\n    cv_scores[model_name] = best_score\n    pred = model.predict(test_set)\n    submission = pd.DataFrame()\n    submission['PassengerId'] = df_test['PassengerId']\n    submission['Survived'] =pred\n    submission['Survived'] = submission['Survived'].astype(np.int64)\n    submission.to_csv('%s.csv' %model_name,index=False)\n    return submission\n\ndef accuracy(submission,answer):\n    y_pred = submission['Survived'].values\n    y_true = answer['Survived'].values\n    return accuracy_score(y_true,y_pred)","ff4caf18":"# Make the x for train & validation\nx_train,x_test,y_train,y_test = train_test_split(train_x,train_y,train_size=0.75,random_state=1234)","e6dc3e17":"from sklearn.ensemble import RandomForestClassifier\n\nrfc = RandomForestClassifier()\nparam_grid = {'random_state': [2], \n              'min_samples_split': [20],\n              'n_estimators': [250],\n              'oob_score':[True]}\nrf_grid = GridSearchCV(rfc,param_grid,cv=10,refit=True,verbose=1)\nrf_grid.fit(x_train,y_train)\n#sc_rf = get_best_score(rf_grid)\n\nprint(\"Train sample size\uff1a\",x_train.shape[0])\nprint(\"Test sample size\uff1a\",x_test.shape[0])\nprint(\"Best CV Accuracy\uff1a\",rf_grid.best_score_)\nprint(\"Test Accuracy\uff1a\",rf_grid.score(x_test,y_test))\n\nplot_feature_importances(rf_grid.best_estimator_,train_x.columns)\nsub_rf = submission(test_x,df_test,'rf',rf_grid.best_estimator_,rf_grid.best_score_,cv_scores)\n\nprint(\"External True Accuracy\uff1a\",accuracy(sub_rf,answer))","b6e7941e":"from sklearn.ensemble import ExtraTreesClassifier\n\nextr = ExtraTreesClassifier()\nparam_grid = {'random_state': [2], \n              'min_samples_split': [20],\n              'n_estimators': [250]}\nextr_grid = GridSearchCV(extr, param_grid, cv=10, refit=True, verbose=1)\nextr_grid.fit(train_x,train_y)\nsc_extr = get_best_score(extr_grid)\n\nplot_feature_importances(extr_grid.best_estimator_,train_x.columns)\nsub_extr = submission(test_x,df_test,'extr',extr_grid.best_estimator_,sc_extr,cv_scores)\nprint(\"External True Accuracy\uff1a\",accuracy(sub_extr,answer))","66252936":"from xgboost import XGBClassifier\n\nxgc=XGBClassifier()\nxgc_param = {\n    'n_estimators': range(30, 50, 2),\n    'max_depth': range(2, 7, 1)\n}\n\n# Make the x for train & validation\nx_train,x_test,y_train,y_test = train_test_split(train_x,train_y,train_size=0.75,random_state=1234)\n\n# Use 5 to avoid overfitting\nxgb_grid = GridSearchCV(xgc,param_grid=xgc_param,cv=5)\nxgb_grid.fit(x_train,y_train)\nprint(\"Train sample size\uff1a\",x_train.shape[0])\nprint(\"Test sample size\uff1a\",x_test.shape[0])\nprint(\"Best CV Accuracy\uff1a\",xgb_grid.best_score_)\nprint(\"Test Accuracy\uff1a\",xgb_grid.score(x_test,y_test))\nprint(\"Best CV Model\uff1a\",xgb_grid.best_estimator_)\n\nplot_feature_importances(xgb_grid.best_estimator_,train_x.columns)\nsub_xgb = submission(test_x,df_test,'xgb',xgb_grid,xgb_grid.best_score_,cv_scores)\nprint(\"External True Accuracy\uff1a\",accuracy(sub_xgb,answer))","7777722d":"cv_scores_rank = reversed(sorted(cv_scores.items(), key=lambda kv:kv[1]))\nfor x in cv_scores_rank:\n    print ('{0}: {1:.3f}'.format(x[0],x[1]))","bb9d53a4":"#np.random.seed(12)\nfrom mlxtend.classifier import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# Initializing models\nclf1 = rf_grid.best_estimator_\nclf2 = extr_grid.best_estimator_\nclf3 = xgb_grid.best_estimator_\n\nlr = LogisticRegression()\nst_clf = StackingClassifier(classifiers=[clf1,clf2,clf3], meta_classifier=lr)\nparams = {'meta_classifier__C':[0.1,1.0,5.0,10.0],\n          \"meta_classifier__penalty\":[\"l1\",\"l2\"],\n          #'use_probas': [True],\n          #'average_probas': [True],\n          'use_features_in_secondary':[True,False]\n         }\nwith ignore_warnings(category=DeprecationWarning):\n    st_clf_grid = GridSearchCV(estimator=st_clf, param_grid=params, cv=5, refit=True)\n    st_clf_grid.fit(train_x,train_y)\n    sc_st_clf = get_best_score(st_clf_grid)\n\nsub_stack = submission(test_x,df_test,'stack',st_clf_grid,sc_st_clf,cv_scores)","68a3fc21":"print(\"External True Accuracy\uff1a\",accuracy(sub_stack,answer))","378694c1":"### Export whole data","695d1b78":"### Encode categorical\nThe order of the encoding is very important.<br>\nIt should follow ascending or descending order in terms of Survivability.<br>\nThis makes tree based algorithms much easier to split data.","6169c77f":"### Sex vs Survival","169d67ba":"**Title Definition**<br>\n\nTitle     | Definition\n -------- | ------------------ \nMr        | Male adult\nMiss      | Unmarried female including girls\nMrs       | Married female adults\nMaster    | Boys (Important because we found out in EDA Boys have much higher survival rate)\nDr        | Respected Professional title for male\nRev       | Reverend, Respected Professional title for male\nCol       | Military rank, Respected Professional title for male\nMs        | Same as Miss, unmarried female\nMlle      | Mademoiselle, unmarried female\nMajor     | Military rank, Respected Professional title for male\nDona      | Married female in Spanish\nMme       | Madame, same as Mrs, French for married female adults\nCountess  | Noble title, for female\nLady      | Noble title, for female\nDon       | Adult male in Spanish\nSir       | Noble title, for male\nJonkheer  | Noble title, for male, an honorific in the Low Countries (Netherlands & Belgium) denoting the lowest rank within the nobility\nCapt      | Respected Professional title for male","6a457ddc":"### Assumption 2: Name length indicates the social class of a person most of the time, higher social class, better survival rates","8922ce9b":"### ExtraTreeClassifier","d3a0d57e":"**Small Family**","66ebc7ed":"The age distribution between Survivors and victims are not very different.<br>\nWith the exception of children.","56bca796":"It is evident that this feature really stratifies the survival rate under different sub categories.","308428e8":"### Ticket","22a32f54":"A rather complicated pattern, maybe able to smooth it with bins to get simpler pattern.","93ef5fe3":"It seems that the Cabin names starts with a Letter. Could that be an indication of deck or Pclass?<br>\nGet the Initial letter of each Cabin and then plot the relationship to survival.","db369737":"Sex, Pclass are highly related to Survival rates.<br>\nFemale survival rate is much higher than male and 1st class much higher than 3rd class.<br>\nFemales from 1st and 2nd class almost entirely survived. Where as most male in 3rd class died.<br>\nThe sub groups which are hard to classify would be the female in 3rd class and male in 1st class.","7798d31f":"### Check feature correlations against each other","347e1340":"**Conclusion**\nIt is evident that people sharing 1 ticket paid the same fare and have the same cabin number.<br>\nIt is also evident that in most cases, people with the same ticket are 1 family.<br>\nThere are only very few exceptions. Maybe they are friends who travel together.<br>\nThe most interesting finding is that in most cases, people with the same ticket whether survived together or died together.<br>\n\n**Let's find who are friends and who are family from the same ticket**","8a1f187e":"### New Feature: NameLenBin","29404229":"Sex has a huge correlation with survival rate!","df7efe25":"Therefore, obviously the people who has cabin recorded will have much higher survival rate compare to people whoe doesn't have cabin recorded.<br>\nHow ever, it could be redundant because it basically means Pclass.<br>","c018c4b0":"The bette the class, the higher the survival rate.","bfd120d1":"** fillna Fare **<br>\nOnly test has Nan in Fare.","7f5abb13":"### Rank all classifiers","b9324e59":"# Part 4. Modelling & Training","d3bfcdb4":"# Part 1. EDA\n**Features Definition**<br>\n\nVariable    | Definition                | Key\n --------   |  ------------------       | ------------\nPassengerId | The passenger's Id number |\nSurvived    | Survival\t                | 0 = No, 1 = Yes\nPclass      | Ticket class\t            | 1 = 1st, 2 = 2nd, 3 = 3rd\nName        | Name of the passenger     |\nSex\t        | Sex                       |\t\nAge\t        | Age in years\t            |\nSibSp\t    | # of siblings \/ spouses aboard the Titanic |\t\nParch\t    | # of parents \/ children aboard the Titanic |\t\nTicket\t    | Ticket number             |\t\nFare\t    | Passenger fare            |\nCabin       | Cabin number\t            |\nEmbarked    | Port of Embarkation       | C = Cherbourg, Q = Queenstown, S = Southampton","df822f7d":"**Big Family**","4776de97":"### Pure survival rate","6176117d":"### Check Each feature against Target label","77748170":"Almost in every case, Alone means lower survival rate.<br>\nIn every case, Small Family means higher survival rate.<br>\nIn almost all cases, Big family means lower survival rate. But it is not evident for Pclass 1 and 2. <br>\nFamilyType condenses all the 3 features as 1.","e3a62fa2":"Embarked apparently affects survival rate, but is it really?","d93fb43a":"Nobles all survived.<br>\nMr has the lowest survival rate.<br>\nMasters (boys) has much higher survival rate.<br>\nRespectMale has slightly higher survival rate than Mr, but also low.","17449835":"Assessing Cabin did not seem to reveal any obvious pattern.<br>\n**Most people do not have Cabin information, so what kind of people have Cabin recorded?**","927f6af7":"### Stacking Classifier\nMake a meta model on top of the separate classifiers.<br>\nMeta model is usally something simple like Logistic Regression of Linear Regression.<br>\nThe meta model uses the outputs from base models as input features and try to learn a weighted function from the base model results to the final labels.","69e1e48e":"### Export data","018fd299":"### New Feature: haveCabin","b5d09a6f":"**Alone**","5636b015":"** fillna Age & Child **","799dfc0a":"### Pclass Vs Survival","c5ebd837":"**Initial assumpitons**<br>\n\n**PassengerId:** just the index of the table, don't think it has anything to do with survival rate.<br>\n**Survived:** Target variable, Dead or Alive<br>\n**Pclass:** Better class correlates with richer people or nobilities. The higher class cabins are also located at the upper decks. All of which should give the people higher chance of survival.<br>\n**Name:** Maybe there are additional information (title,etc) in the name which will provide information about social class?<br>\n**Sex:** Common ediquette, ladies first?<br>\n**Age:** Children first? It is hard for old people to survive?<br>\n**SibSp:** Don't know how could this relate to chance of survival.<br>\n**Parch:** If parents onboard, it means its a child, child has higher survival rate?<br>\n**Ticket:** Unable to understand the meaning of the ticket values.<br>\n**Fare:** The higher the price the richer the person,the better the class?<br>\n**Cabin:** May give the location and class level of the cabin? But there are a lot of NaNs.<br>\n**Embarked:** Not sure how could this relate to chance of survival.<br>","95f8f9a2":"# Part 2. Feature Engineering","b41e993f":"From a glance, it appears to be that the lower fare has lower survival rate.<br>\nBut when broke down to each Pclass, the pattern is no longer obvious.<br>\nTherefore Fare by it self is not really carryin much information about survival, the information is mostly contained within Pclass.<br>\nLet's assess it more properly with Bins.","b43cde17":"So it turns out, most of the people having Cabin recorded are from Pclass 1!","0e87da21":"### fillna","2786ad50":"As per Pclass, the pattern stands, except here the cut off is no longer always at 4.<br>\nThis pattern indicate that we should create at least 2 featrues from FamilySize, 1 to capture the steady increase when FamilySize <= 4.<br>\nAnother to capture the sudden drop when FamilySize > 4.","108a01c3":"### eXtreme Gradient Boosting - XGBoost","fea7f949":"People who are alone aboard have low survival rate.<br>\nMaybe family members help each other to survive.<br>\nIt seems that Family size does increase survival rate, but only until 4.<br>\nAbove 4 people, it actually decreases.<br>\nIt seems that alone is not helpful to survive, meanwhile too many family members is also not helpful.<br>\n","3eef2ff5":"### Assumption 1: Title correlates to Social class \/ Wealth and potentially Pclass","1fc660fe":"### Correlation Evaluation","87bee2dc":"### Cabin vs Survival","a597b782":"Evidence proves Master == Boy","7298b9b0":"In almost every case (Except total female), children has higher survival rates compare to adults.","2b22ea29":"C has the highest percentage of 1st class passengers, it explains why C has higher survival rate than the other 2 locations.<br>\nS has the highest percentage of male passengers, whucg explains why its survival rate is the lowest.","e388adb9":"So around 75% of people with the same tickets are families.","727d4a63":"**Confirm no missing data**","f0914bb9":"### New Features: FamilyType, Alone, Small family & Big family\nFrom the previoud EDA on FamilySize, the pattern can be divided into 3 parts: <br>\nFamilySize == 1: Alone (FamilyType==2)<br>\nSurvival rates are low for lonely passengers<br>\nFamilySize <= 4: Small Family (FamilyType==3)<br>\nSurvival rates increases as FamilySize increases<br>\nFamilySize > 4: Big Family (FamilyType==1)<br>\nSurvival rates drops in big family\n\n**The coding is important as it should follow the ascending or descending order of survivability**","68313857":"### Final data\nAfter assessing the 2 correlation graphs, the features have been chosen based on both correlation and redundancy.","d000cba3":"Noble and RespectMale only exist in First class, yet their survival rate is really different.<br>\nMr in 2nd and 3rd class almost all died.<br>\nWomen and children have much higher survival rate than men across all Pclass.<br>","8cb125e5":"### New Feature: NameLen","5000247f":"## Survival Correlations","55f6b92e":"For females, the age distribution between Victims and Survivors are almost the same.<br>\nFor males, boys under the age of 15 have a much higher chance of survival.<br>\nSo the difference of Survival is mainly in boys group.<br>","b4ad4a1c":"It is clear with female group, that FamilySize > 4 would result in a huge decrease in survival.<br>\nSame pattern in male.<br>\nOnly difference is that for male FamilySize < 5, survival rate steadily increases.","c41d81c2":"### Age VS Survival","2a290a5e":"### Load Data","fa1da88e":"### New Feature: Child\nUse 16 years old as the cut off ","28257c01":"There are less ticket number than amount of passengers.<br>\nIt means that there are people who share 1 ticket.<br>\nIt could be a sign that they are 1 family?\n\n**Create a dataframe with Name, Fare, Pcalss, FamilySize**","5de763fe":"### New Feature: FareBin","4bc4d143":"** fillna Embarked **","b5648749":"A lot of missing values in Cabin.<br>\nSome missing values in Age.","8d961c76":"# Part 3. Feature Selection","47ad7a32":"### Sex+Pclass VS Survival","6654ac97":"### New Feature: Title","6ff08a89":"2 bins is used because there is a severe cut off between the longnames and the rest.","708c2b88":"**FamilyType**","bf2e10dd":"**Confirm features of train & test are the same**","fec9fa3d":"### Embarked vs Survival","b0b5fa64":"### Random Forest (Best Performing on LB 0.82296)","4ad53e52":"### New Feature: Connected_Survival\n1. If anyone in the group survived: Connected_Survival==1\n2. If anyone in the group died: Connected_Survival==0\n3. If everyone in the group has Survived missing: Connected_Survival==0.5","d68f6c3f":"### Fare vs Survival","eb077691":"### NewFeature: FamilySize\nAfter assessing SibSp and Parch separately, the relationship between them & Survived is not obvious.<br>\nCombine them to see if there is any more findings.<br>\nFamilySize = SibSp + Parch + 1","2a756ee3":"In order to eliminate all the titles which have really low occurances, we should recategorise them:<br>\nMr, Don == Mr<br>\nMiss, Ms, Mlle == Miss<br>\nMrs, Mme, Dona == Mrs<br>\nDr, Rev, Col, Major, Capt, Jonkheer == RespectMale<br>\nCountess, Lady, Sir == Nobel<br>","5291fdf0":"After binning, it seems that the relationship between Fare and Survival became much more linear."}}