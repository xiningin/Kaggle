{"cell_type":{"fb29f31d":"code","5731f393":"code","48cd1b9b":"code","87f35b6e":"code","31a3522e":"markdown"},"source":{"fb29f31d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas import read_csv\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.constraints import maxnorm\nfrom keras.optimizers import SGD\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","5731f393":"# load dataset, split and encode\ndataset = read_csv(\"..\/input\/sonar-data-set\/sonar.all-data.csv\", header=None)\n\nX = dataset.iloc[:,0:60].values.astype(float)\nY = dataset.iloc[:,60].values\n\nencoder = LabelEncoder()\nencoder.fit(Y)\nencoded_Y = encoder.transform(Y)","48cd1b9b":"def create_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(60, input_dim=60, kernel_initializer='normal', activation='relu',\n    kernel_constraint=maxnorm(3)))\n    model.add(Dropout(0.2))\n    model.add(Dense(30, kernel_initializer='normal', activation='relu',\n    kernel_constraint=maxnorm(3)))\n    model.add(Dropout(0.2))\n    model.add(Dense(1, kernel_initializer='normal', activation='sigmoid'))\n    # Compile model\n    sgd = SGD(lr=0.1, momentum=0.9, decay=0.0, nesterov=False)\n    model.compile(loss='binary_crossentropy', optimizer=sgd, metrics=['accuracy'])\n    return model\n","87f35b6e":"seed = 7\nnp.random.seed(seed)\nestimators = []\nestimators.append(('standardize', StandardScaler()))\nestimators.append(('mlp', KerasClassifier(build_fn=create_model, epochs=300, batch_size=16,\nverbose=0)))\npipeline = Pipeline(estimators)\nkfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)\nresults = cross_val_score(pipeline, X, encoded_Y, cv=kfold)\nprint(\"Hidden: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))","31a3522e":"**Create Model in Function**"}}