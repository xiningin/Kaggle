{"cell_type":{"e11b6ec6":"code","43362538":"code","9016ca20":"code","2e84e2a5":"code","66e6bfbd":"code","a75b5d2a":"code","a97fb1b6":"code","9fb3c889":"code","b20f92ba":"code","b4a1d9c0":"code","f677a2d6":"code","52817a2c":"code","5572fcf5":"code","3e5d8354":"code","9c20f7c5":"code","6b6de0e1":"code","6f6889b8":"code","818372ea":"code","4d61b63b":"code","ceaf0f5f":"code","be652753":"code","54116cc8":"code","0688bde3":"code","b0e5a5a4":"code","277d21f3":"code","d90c460b":"code","a128542a":"code","5ff888af":"code","e5e99d54":"code","a136f882":"code","82835495":"code","0575d9fb":"code","1d2aee52":"code","ecf66d73":"code","221db699":"code","95f9f8d8":"code","797a1df2":"code","e41a7673":"code","168627cf":"code","0b949129":"code","f404f06c":"code","4158ca1e":"code","3aaebc7c":"code","6e57b6ee":"code","0e042467":"code","f428dbc1":"code","c987f068":"code","5e5060c0":"code","c1adcfad":"code","281779b2":"code","2e3c6f87":"code","6fd1e24a":"code","cbed4d91":"code","65dfa086":"code","4584de69":"code","794f4308":"code","5e69fce5":"code","f3b614bf":"code","99647e59":"code","15fadb3f":"code","5691d8e9":"code","e5697849":"code","597baf46":"code","fff14ade":"code","bf5ff6e9":"code","0e65c48a":"code","5d00fbf2":"code","ed173420":"code","5c1dc0ca":"markdown","2e620fc4":"markdown","bedc515d":"markdown","d0aee700":"markdown","5a7ff791":"markdown","b914da08":"markdown"},"source":{"e11b6ec6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","43362538":"#For Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns","9016ca20":"#Loading Dataset","2e84e2a5":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","66e6bfbd":"#Training Data","a75b5d2a":"train.head()","a97fb1b6":"train.shape","9fb3c889":"train.columns","b20f92ba":"train.describe()","b4a1d9c0":"train.info()\n\n","f677a2d6":"#Finding Null Values in dataset\ntrain.isnull().sum()","52817a2c":"#Test Data","5572fcf5":"test.shape","3e5d8354":"test.head()","9c20f7c5":"test.describe()","6b6de0e1":"test.info()","6f6889b8":"#Finding Null values in test data\ntest.isnull().sum()","818372ea":"train.Sex.value_counts()","4d61b63b":"train.groupby('Sex').Survived.value_counts()","ceaf0f5f":"sns.barplot(x='Sex', y='Survived', data = train);","be652753":"train['Died'] = 1 - train['Survived']","54116cc8":"train.groupby('Sex').agg('mean')[['Survived', 'Died']].plot(kind='bar', figsize=(10, 5),stacked=True);","0688bde3":"sns.histplot(train['Age'].dropna(), kde = False, bins=40);","b0e5a5a4":"sns.countplot(x = 'Embarked', data = train);","277d21f3":"# Survival based on passenger class and sex\nsns.pointplot(y = 'Pclass',x = 'Survived', hue='Sex', data = train);","d90c460b":"# Survival based on Embarked and sex\nsns.pointplot(y = 'Survived', x = 'Embarked', hue = 'Sex', data = train);","a128542a":"sns.barplot(x='Fare', y = 'Survived', data = train);","5ff888af":"sns.barplot(x='SibSp', y = 'Survived', data = train);","e5e99d54":"train['Fare'].hist(bins=40,figsize=(10,4))","a136f882":"# Extracting features for training our model","82835495":"title = set()\nfor name in train['Name']:\n    title.add(name.split(',')[1].split('.')[0].strip())\nprint(title)","0575d9fb":"title_dict={'Mrs':'Mrs','Major':'Other','Master':'Master','Lady':'Other','Mlle':'Miss','Dr':'Other','Col':'Other','Capt':'Other','Don':'Other','the Countess':'Other','Mme':'Mrs','Miss':'Miss','Jonkheer':'Other','Rev':'Other','Sir':'Other','Ms':'Miss','Mr':'Mr'}","1d2aee52":"train['Title'] = train['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ntrain['Title'] = train.Title.map(title_dict)\ntrain.head()","ecf66d73":"# Feature dropping for faster notebook execution\ntrainy = train.drop(['Name','Died','PassengerId', 'Ticket', 'Cabin'], axis = 1)  \n\ntrainy.head()\n","221db699":"trainy.Sex = trainy.Sex.map({'female':0, 'male':1})\ntrainy.Title = trainy.Title.map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5})\ntrainy.Embarked = trainy.Embarked.map({'S':0, 'C':1, 'Q':2,'NaN':'NAN'})\n\n","95f9f8d8":"mean_m = trainy[trainy['Sex']==1]['Age'].mean()\nmean_f = trainy[trainy['Sex']==0]['Age'].mean()","797a1df2":"trainy.loc[(trainy.Age.isnull())&(trainy['Sex']==0),'Age']=mean_f\ntrainy.loc[(trainy.Age.isnull())&(trainy['Sex']==1),'Age']=mean_m","e41a7673":"trainy['Age']=(trainy.Age-min(trainy.Age))\/(max(trainy.Age)-min(trainy.Age))","168627cf":"trainy.isnull().sum()","0b949129":"trainy['Embarked'] = trainy.Embarked.fillna(0)\n","f404f06c":"trainy.head()","4158ca1e":"#Cleaning the test dataset","3aaebc7c":"title = set()\nfor name in test['Name']:\n    title.add(name.split(',')[1].split('.')[0].strip())\nprint(title)","6e57b6ee":"title_dict={'Mrs':'Mrs','Major':'Other','Master':'Master','Lady':'Other','Mlle':'Miss','Dr':'Other','Col':'Other','Capt':'Other','Dona':'Other','the Countess':'Other','Mme':'Mrs','Miss':'Miss','Jonkheer':'Other','Rev':'Other','Sir':'Other','Ms':'Miss','Mr':'Mr'}","0e042467":"test['Title'] = test['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\ntest['Title'] = test.Title.map(title_dict)\ntest.head()","f428dbc1":"testy = test.drop(['Name','PassengerId', 'Ticket', 'Cabin'], axis = 1)","c987f068":"testy.Sex = testy.Sex.map({'female':0, 'male':1})\ntesty.Title = testy.Title.map({\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5})\ntesty.Embarked = testy.Embarked.map({'S':0, 'C':1, 'Q':2,'nan':'nan'})","5e5060c0":"mean_m = testy[testy['Sex']==1]['Age'].mean()\nmean_f = testy[testy['Sex']==0]['Age'].mean()","c1adcfad":"testy.loc[(testy.Age.isnull())&(testy['Sex']==0),'Age']=mean_f\ntesty.loc[(testy.Age.isnull())&(testy['Sex']==1),'Age']=mean_m","281779b2":"testy['Age']=(testy.Age-min(testy.Age))\/(max(testy.Age)-min(testy.Age))","2e3c6f87":"testy.isnull().sum()","6fd1e24a":"testy['Fare'] = testy['Fare'].fillna(testy['Fare'].mean())","cbed4d91":"testy.head()","65dfa086":"testy.isnull().sum()","4584de69":"#Importing train_test_split\nfrom sklearn.model_selection import train_test_split\n","794f4308":"X_train, X_test,y_train, y_test = train_test_split(trainy.drop(['Survived'],axis = 1),trainy.Survived,test_size=0.30, random_state=121, stratify = trainy.Survived)","5e69fce5":"#importing Decision Tree and metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\n","f3b614bf":"dt = DecisionTreeClassifier(random_state = 121, max_depth = 5)\ndt.fit(X_train,y_train)\nypred = dt.predict(X_test)\n","99647e59":"print(\"Accuracy Score = {}\".format(round(accuracy_score(y_test,ypred)*100,2)))\nprint(confusion_matrix(y_test,ypred))","15fadb3f":"sns.heatmap(confusion_matrix(y_test,ypred),annot = True);","5691d8e9":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 500,\n                             max_features = 'sqrt', \n                             min_samples_leaf = 10, \n                             random_state=121).fit(X_train,y_train)\nypred = rf.predict(X_test)\n","e5697849":"print(\"Accuracy Score = {}\".format(round(accuracy_score(y_test,ypred)*100,2)))\nprint(confusion_matrix(y_test,ypred))","597baf46":"sns.heatmap(confusion_matrix(y_test,ypred),annot = True);","fff14ade":"# Comparing two models that we implemented, Random Forest is more accurate","bf5ff6e9":"pred = rf.predict(testy)","0e65c48a":"pred","5d00fbf2":"sns.countplot(x=pred);","ed173420":"submit=pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':pred})\nsubmit.to_csv('.\/submission.csv',index=False)","5c1dc0ca":"# 2. RandomForrest Classifier","2e620fc4":"# Data Visualization\nBarplot, Countplot, Histogram, PointPlot\n","bedc515d":"# 1. Decision Tree ","d0aee700":"# Data Processing","5a7ff791":"# Feature extraction ","b914da08":"# Data Modelling"}}