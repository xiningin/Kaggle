{"cell_type":{"c0b552d3":"code","a1e9fe0d":"code","f88e28c3":"code","637a964b":"code","8faf0dca":"code","dd2caf7e":"code","61262349":"code","ef91cb21":"code","91eafa64":"code","b7a575ef":"code","2880aad9":"code","be065b8e":"code","7a87fa18":"code","a869498f":"code","25cb0cf0":"code","82ccba28":"code","5a80169d":"code","61537804":"code","1ba79b04":"code","dd486011":"code","7c3dd7fc":"code","88798efd":"code","cd45de50":"code","7fc01380":"code","5f355bd2":"code","17950687":"code","dac3912a":"code","131ffee0":"code","ef8bcc9e":"code","55e3d227":"code","1ebb1348":"code","fc6d6f79":"code","ccd8b241":"markdown","c2df70d0":"markdown","72fbddf0":"markdown","4d1ede07":"markdown","d579e916":"markdown","ecb2af37":"markdown","ee09e5a2":"markdown","aea97bf6":"markdown","68c950a0":"markdown","28b81d92":"markdown","1acbd19c":"markdown","d519c504":"markdown","e93223be":"markdown","54d90170":"markdown","a7f9e681":"markdown","fe850906":"markdown","81bc8672":"markdown"},"source":{"c0b552d3":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a1e9fe0d":"df = pd.read_excel('..\/input\/real-estate-valuation-by-uci\/UCI_Real_Estate_Valuation.xlsx', sheet_name = 'Sheet1', index_col = 'No')","f88e28c3":"df.head()","637a964b":"df.rename(\n    columns={\n        \"X1 transaction date\": \"Transaction_Date\", \n        \"X2 house age\": \"House_Age\", \n        \"X3 distance to the nearest MRT station\": \"Distance\",\n        \"X4 number of convenience stores\": \"Num_Stores_NearBy\",\n        \"X5 latitude\": \"Latitude\",\n        \"X6 longitude\": \"Longitude\",\n        \"Y house price of unit area\": \"Target\",\n    },\n    inplace = True\n)","8faf0dca":"df.shape","dd2caf7e":"df.describe()","61262349":"df.corr()","ef91cb21":"abs(df.corr())['Target'].sort_values(ascending=False)","91eafa64":"plt.figure(figsize=(15,10))\nplt.scatter(x=df['Distance'], y=df['Target'])\nplt.xlabel('The distance to the nearest MRT station (unit: meter)')\nplt.ylabel('House price of unit area')\nplt.title('Real Estate Valuation')\nplt.show()","b7a575ef":"from sklearn.model_selection import train_test_split","2880aad9":"X = np.array(df['Distance']).reshape(-1,1)\ny = np.array(df['Target']).reshape(-1,1)","be065b8e":"X[1]","7a87fa18":"y[1]","a869498f":"len(X), len(y)","25cb0cf0":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=99)\n\ny_train = y_train.reshape(len(y_train),)\ny_valid = y_valid.reshape(len(y_valid),)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","82ccba28":"X_train[1:3]","5a80169d":"y_train[1:3]","61537804":"from sklearn.preprocessing import StandardScaler\n# Standardisation replaces the values by their Z scores.\n\n# Initialise the Scaler \nscaler = StandardScaler() \n  \n# To scale data \nX_train_Scaled = scaler.fit_transform(X_train) \n# y_train_Scaled = scaler.fit_transform(y_train) \n\nX_valid_Scaled = scaler.transform(X_valid) \n# y_valid_Scaled = scaler.transform(y_valid) ","1ba79b04":"X_train_Scaled[1]","dd486011":"from sklearn.linear_model import LinearRegression","7c3dd7fc":"lr = LinearRegression()\nlr.fit(X_train, y_train)","88798efd":"from sklearn.metrics import mean_absolute_error \n\nprint(\"Intercept: {:,.3f}\".format(lr.intercept_))\nprint(\"Coefficient: {:,.3f}\".format(lr.coef_[0]))\n    \nmae = mean_absolute_error(y_valid, lr.predict(X_valid))\nprint(\"MAE = {:,.2f}\".format(1000*mae))\n\n# Plot outputs\nplt.figure(figsize=(10,7))\nplt.scatter(x=df['Distance'], y=df['Target'])\nplt.plot(X_valid, lr.predict(X_valid), color='red')\nplt.xlabel('The distance to the nearest MRT station (unit: meter)')\nplt.ylabel('House price of unit area')\nplt.title('Real Estate Valuation - Linear Regression Prediction')\n\nplt.show()","cd45de50":"def svr_results(X_valid, y_valid, model, title):\n    \n    print(\"C: {}\".format(model.C))\n    print(\"Epsilon: {}\".format(model.epsilon))\n    \n    print(\"Intercept: {:,.3f}\".format(model.intercept_[0]))\n    print(\"Coefficient: {:,.3f}\".format(model.coef_[0]))\n    \n    mae = mean_absolute_error(y_valid, model.predict(X_valid))\n    print(\"MAE = {:,.2f}\".format(1000*mae))\n    \n    perc_within_eps = 100*np.sum(y_valid - model.predict(X_valid) < eps) \/ len(y_valid)\n    print(\"Percentage within Epsilon = {:,.2f}%\".format(perc_within_eps))\n    \n    # Plot outputs\n    plt.figure(figsize=(10,7))\n    plt.scatter(x=df['Distance'], y=df['Target'])\n    plt.plot(X_valid, model.predict(X_valid), color='red')\n    plt.plot(X_valid, model.predict(X_valid)-eps, color='black')\n    plt.plot(X_valid, model.predict(X_valid)+eps, color='black')\n    plt.xlabel('The distance to the nearest MRT station (unit: meter)')\n    plt.ylabel('house price of unit area')\n    plt.title(title)\n    plt.show()","7fc01380":"from sklearn.svm import LinearSVR","5f355bd2":"eps = 5\nl_svr = LinearSVR(epsilon=eps, C=0.01, fit_intercept=True)","17950687":"l_svr.fit(X_train, y_train)\n\nsvr_results(X_valid, y_valid, l_svr, 'Real Estate Valuation - Simple Linear SVR Prediction')","dac3912a":"eps = 5\nlsvr_high_C = LinearSVR(epsilon=eps, C=1.0, fit_intercept=True)\n\nlsvr_high_C.fit(X_train, y_train)\n\nsvr_results(X_valid, y_valid, lsvr_high_C, 'Real Estate Valuation - Simple Linear SVR (High Penality) Prediction')\n","131ffee0":"from sklearn.model_selection import GridSearchCV","ef8bcc9e":"grid = {\n    'C': np.linspace(0.01, 10),\n    'epsilon': np.linspace(0.01, 10)\n}\n    \nsvr_gridsearch =  LinearSVR(fit_intercept=True, max_iter=10000)\n# svr_gridsearch =  LinearSVR(fit_intercept=True, max_iter=100000)\n\ngrid_svr = GridSearchCV(svr_gridsearch, grid, scoring='neg_mean_absolute_error', cv=5)\n\n","55e3d227":"grid_svr.fit(X_train, y_train)","1ebb1348":"best_grid_svr_mae = grid_svr.best_estimator_\nbest_grid_svr_mae.fit(X_train, y_train)","fc6d6f79":"svr_results(X_valid, y_valid, best_grid_svr_mae, 'Real Estate Valuation - Simple Linear SVR (Best MAE) Prediction')","ccd8b241":"Just sort the correlation of each feature w.r.t the target. Will select the top correlated feature which is `DIstance` with 67% correlated.\n\nAnd will use this single feature to work with SVR.","c2df70d0":"In-case if you have warning \"\"\nhttps:\/\/stackoverflow.com\/questions\/52670012\/convergencewarning-liblinear-failed-to-converge-increase-the-number-of-iterati ","72fbddf0":"## Simple LinearSVR with Larger Penalty (C = 1.0)","4d1ede07":"## Simple LinearSVR","d579e916":"## Use Grid Search ","ecb2af37":"Scatter plot with one predictor (feature) w.r.t target.","ee09e5a2":"# SVR\n","aea97bf6":"# Linear Regression","68c950a0":"So there are 414 data points and 7 columns (6 Features and 1 Target)","28b81d92":"# Import Library","1acbd19c":"# Load the dataset","d519c504":"# Scaling\nFrom the data description we know that the units for each feature is different, so lets scale it to one common unit.","e93223be":"# Real Estate Valuation\n\nHere I am using the dataset on Real estate valuation, which I have downloaded from UCI Machine Learning Reposiroty.\nAlternatively you could also use directly from Kaggle as I have upload here.\n\nLinks to Data Set : \n\nhttps:\/\/www.kaggle.com\/dskagglemt\/real-estate-valuation-by-uci\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Real+estate+valuation+data+set\n","54d90170":"Lets get the correlation of the features w.r.t the target.","a7f9e681":"This is a real estate valuation and is a regression problem. The market historical data set of real estate valuation are collected from Sindian Dist., New Taipei City, Taiwan.\n\n* Problem Type : Regression\n* Algorithm : SVR (Support Vector Regression)","fe850906":"# Split the data into Training and Validation set","81bc8672":"We could see that the feature names are too big, so lets make it short (rename them) to use it with ease."}}