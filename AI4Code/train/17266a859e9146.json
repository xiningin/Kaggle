{"cell_type":{"e28781a8":"code","db221407":"code","88d18ca8":"code","ac9e588a":"code","90d26e8e":"code","4c4add37":"code","174d1ca3":"code","652e95eb":"code","f2f3b888":"code","da2442da":"code","93cce73e":"code","3130af35":"code","6b01dc30":"code","ef86ffa0":"code","417e80ef":"code","2b3e4df9":"code","6dfa4cf2":"code","f47bf853":"code","c3a31a6e":"code","5ec59de6":"code","212e231a":"code","f55c5066":"code","b9a1cc55":"code","6129e125":"code","408473f9":"code","a18d295a":"code","a0b97dbc":"code","69014403":"code","84412b47":"code","d51b145d":"code","450ab10b":"code","c0fd91c6":"code","4058f853":"code","e2d487b5":"code","bfa0067e":"code","bc8edb1c":"code","2bbee395":"code","d4f7584a":"code","900d03e5":"code","6e3efaff":"code","bd18ab50":"code","b73b0a67":"code","61a40e5b":"code","37f18e48":"code","341777ad":"code","45ad609b":"code","0c676c20":"code","2f45b097":"markdown","22700b35":"markdown","a14d6af8":"markdown","fb8ae372":"markdown","e0ae0395":"markdown","6b98197d":"markdown","c9d76d5d":"markdown","32d0a18a":"markdown","6fbc0684":"markdown","dca92b8c":"markdown","a5e654e5":"markdown","a66940c8":"markdown","cba09b24":"markdown","a04fab0c":"markdown","cb822020":"markdown","38e8a7ee":"markdown","1ba3bc30":"markdown","0e12df6c":"markdown","956d4dd9":"markdown"},"source":{"e28781a8":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport warnings\nwarnings.filterwarnings(\"ignore\")","db221407":"df = pd.read_csv('train_s3TEQDk.csv')\ntest = pd.read_csv('test_mSzZ8RL.csv')\ndf.head(5)","88d18ca8":"test.columns","ac9e588a":"df.shape","90d26e8e":"df.columns","4c4add37":"df.isnull().sum()","174d1ca3":"df.describe()","652e95eb":"df['Occupation'].value_counts()","f2f3b888":"df.hist(figsize = (30,7));","da2442da":"sn.pairplot(df, hue = 'Is_Lead');","93cce73e":"df.corr()","3130af35":"sn.heatmap(df.corr());","6b01dc30":"sn.countplot(x='Is_Lead',data=df)\nplt.show();","ef86ffa0":"sn.distplot(df['Age']);","417e80ef":"sn.distplot(df['Avg_Account_Balance']);","2b3e4df9":"df['Credit_Product'][:7]","6dfa4cf2":"df1 = df.copy(deep = True)\ndf1[\"Credit_Product\"].fillna(2, inplace=True)\ndf1.isnull().sum()","f47bf853":"# Split into X & y \nX = df1.drop(\"ID\", axis=1)\ny = df1[\"Is_Lead\"]","c3a31a6e":"print(X.head())","5ec59de6":"dummies = pd.get_dummies(X[[\"Gender\",\"Region_Code\",\"Occupation\",\"Channel_Code\",\"Credit_Product\",\"Is_Active\"]])","212e231a":"dummies.columns","f55c5066":"X=X.drop([\"Gender\",\"Region_Code\",\"Occupation\",\"Channel_Code\",\"Credit_Product\",\"Is_Active\",\"Is_Lead\"],axis=1)\nX=pd.concat([X,dummies],axis=1)","b9a1cc55":"X.head(2)","6129e125":"y.head(2)","408473f9":"test[\"Credit_Product\"].fillna(2, inplace=True)\ntest.isnull().sum()","a18d295a":"dummy = pd.get_dummies(test[[\"Gender\",\"Region_Code\",\"Occupation\",\"Channel_Code\",\"Credit_Product\",\"Is_Active\"]])\ntest=test.drop([\"Gender\",\"Region_Code\",\"Occupation\",\"Channel_Code\",\"Credit_Product\",\"Is_Active\"],axis=1)\ntest=pd.concat([test,dummy],axis=1)","a0b97dbc":"test.head(2)","69014403":"test1 = test.drop(\"ID\", axis=1)","84412b47":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X,y)","d51b145d":"y_pred=dtc.predict_proba(test1)","450ab10b":"submission=pd.read_csv(\"sample_submission_eyYijxG.csv\")\nsubmission['Is_Lead']=y_pred\nsubmission['ID']=test['ID']\npd.DataFrame(submission, columns=['ID','Is_Lead']).to_csv('DT.csv')  ","c0fd91c6":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X,y)\npredictions = rfc.predict_proba(test1)[:,1]","4058f853":"submission=pd.read_csv(\"sample_submission_eyYijxG.csv\")\nsubmission['Is_Lead']=predictions\nsubmission['ID']=test['ID']\npd.DataFrame(submission, columns=['ID','Is_Lead']).to_csv('RF.csv')","e2d487b5":"from sklearn.naive_bayes import GaussianNB\nNB= GaussianNB()\nNB.fit(X,y)\npredictions = NB.predict_proba(test1)[:,1]","bfa0067e":"submission=pd.read_csv(\"sample_submission_eyYijxG.csv\")\nsubmission['Is_Lead']=predictions\nsubmission['ID']=test['ID']\npd.DataFrame(submission, columns=['ID','Is_Lead']).to_csv('NB.csv')","bc8edb1c":"grid = {\"n_estimators\": [10, 100, 200, 500, 1000, 1200],\n        \"max_depth\": [None, 5, 10, 20, 30],\n        \"max_features\": [\"auto\", \"sqrt\"],\n        \"min_samples_split\": [2, 4, 6],\n        \"min_samples_leaf\": [1, 2, 4]}","2bbee395":"from sklearn.model_selection import RandomizedSearchCV, train_test_split\n\nclf = RandomForestClassifier(n_jobs=-1)\n\n# Setup RandomizedSearchCV\nrs_clf = RandomizedSearchCV(estimator=clf,\n                            param_distributions=grid,\n                            n_iter=20, # try 20 models total\n                            cv=5, # 5-fold cross-validation\n                            verbose=2) # print out results\n\n# Fit the RandomizedSearchCV version of clf\nrs_clf.fit(X, y);","d4f7584a":"rs_clf.best_params_","900d03e5":"predictions = rs_clf.predict_proba(test1)[:,1]","6e3efaff":"submission=pd.read_csv(\"sample_submission_eyYijxG.csv\")\nsubmission['Is_Lead']=predictions\nsubmission['ID']=test['ID']\npd.DataFrame(submission, columns=['ID','Is_Lead']).to_csv('RF(RandSearchCV).csv')","bd18ab50":"# A parameter grid for XGBoost\nfrom datetime import datetime\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nparams = {\n        'min_child_weight': [11],\n        'gamma': [1.15, 1.16, 1.17, 1.18],\n        'subsample': [0.9],\n        'colsample_bytree': [.86, .87],\n        'max_depth': [7]\n        }","b73b0a67":"xgb = XGBClassifier(learning_rate=0.02, n_estimators=600, objective='binary:logistic',\n                    silent=True, nthread=1)\ndef timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","61a40e5b":"folds = 3\nparam_comb = 5\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\nrandom_search = RandomizedSearchCV(xgb, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=-1, cv=skf.split(X,y), verbose=3, random_state=1001 )\n\n# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nrandom_search.fit(X, y)\ntimer(start_time) # timing ends here for \"start_time\" variable","37f18e48":"print('\\n Best hyperparameters:')\nprint(random_search.best_params_)","341777ad":"from xgboost import XGBClassifier\nxgb_clf = XGBClassifier(colsample_bytree=0.87, gamma=1.17, learning_rate=0.02, max_depth=7,\n              min_child_weight=10, n_estimators=600, nthread=1, silent=True,\n              subsample=0.9)\nxgb_clf.fit(X, y)","45ad609b":"pred=xgb_clf.predict_proba(test1)[:,1]\npred","0c676c20":"submission=pd.read_csv(\"sample_submission_eyYijxG.csv\")\nsubmission['Is_Lead']=pred\nsubmission['ID']=test['ID']\npd.DataFrame(submission, columns=['ID','Is_Lead']).to_csv('XGBoost_3.csv')","2f45b097":"### Data cleaning","22700b35":"### Import all the Important Libraries","a14d6af8":"#### 3 Naive Bayes","fb8ae372":"### Make sure it's all numerical","e0ae0395":"### Grid Search with XGBoost","6b98197d":"#### 1 DecisionTreeClassifier","c9d76d5d":"Final ROC Score : 0.8732487\nRANK            : 121","32d0a18a":"### Explore Data in Depth","6fbc0684":"#### 2 RandomForestClassifier","dca92b8c":"##### ROC score = 0.6645","a5e654e5":"##### ROC score = 0.6916","a66940c8":"#### Only Credit Product has got some Null values ","cba09b24":"#### Random Forest GRID SEARCH","a04fab0c":"# Credit Card Lead Prediction","cb822020":"#### Only 23.7% Customers are interested","38e8a7ee":"#### Thank you","1ba3bc30":"##### This Feature Engineering was the key factor that helped me in increasing  AUC score from 0.8 to 0.87\n###### I changed the 'NA' values of  Credit_Product  to '2'.  such that we have '0':yes , ' 1':no, '2':NA\n###### Reson: corresponding to Credit_Product = NA, we have 90% of time Is_Lead = 1, that is why it was a very important feature","0e12df6c":"### Get the data ready","956d4dd9":"##### ROC score = 0.81599\n##### At this moment I discovered the new feature engineering idea and I implemented it on XGBoost\n##### Initially I got score of 0.8704 then I tried Grid Search  and my score further improved to 0.8732487"}}