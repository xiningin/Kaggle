{"cell_type":{"89105e0c":"code","d5937329":"code","7d8c809e":"code","d7890dcb":"code","3f8cad30":"code","e9f46dd9":"code","828f7f3b":"code","bc05aa25":"code","ccde35e2":"code","bdd31b5a":"code","b259cd00":"code","7c5a7e50":"code","cf3a94bd":"code","0024316f":"code","e37a82ff":"code","a85baec9":"code","cd84b2b5":"code","d3ebc0c3":"code","6af40092":"code","5422a42e":"code","7ff63585":"code","f9fd840a":"code","9ff89c7d":"code","3385b152":"code","d3af1a6f":"code","6a2dfe50":"code","eb242268":"code","ec787b41":"code","41bcb6d8":"code","618a2983":"code","98232077":"code","d05be6e9":"code","4065116b":"code","04c09c16":"code","2efefcb6":"code","e8c35891":"code","815d20a3":"code","c18f5acc":"code","faba096a":"code","c96b13ae":"code","fbe1d54f":"code","ec10d547":"code","1cdc13a5":"code","f9a2317c":"code","fd88ec57":"code","506b4458":"code","f6e7f150":"code","8309ce14":"code","1f685c78":"code","23f6e215":"code","b7b21693":"code","50a7b024":"code","aab1d118":"code","3cc3a63d":"code","70e0d872":"code","be697cc4":"code","7aab694a":"code","8c7e8c10":"code","4271bab2":"code","8cc8ff70":"code","8cc6b841":"code","59a493f2":"code","99e48bbf":"code","d77445a4":"code","ac6fb5db":"code","feb7556c":"code","f2489271":"code","9a9ad54d":"code","fd76863b":"code","d85b0bd8":"code","638158fa":"code","1bda95b6":"code","a0342df7":"code","034f264e":"code","9882c07b":"code","2193d22f":"code","2efa17ed":"code","0aaea181":"code","3505a2d2":"code","db06d40c":"code","1a4688fd":"code","3d43b4ea":"code","abd26b2e":"code","879adc0a":"code","dceff66a":"code","67ae497b":"code","4445a3bc":"code","f9511d46":"code","76919c18":"code","3f3477ee":"code","947a3c13":"code","bffc2aef":"code","574762a9":"code","19576d79":"code","f4e7f8d7":"code","ebad678f":"code","1a2e48d1":"code","45ac05af":"code","fba1f110":"markdown","de0d71a8":"markdown","15871533":"markdown","2d33959f":"markdown","d545a543":"markdown","dea7cef3":"markdown","83af45ba":"markdown","0afdb101":"markdown","cafffa0d":"markdown","87f107ea":"markdown","bcbf693e":"markdown","0df44122":"markdown","c3ec3846":"markdown","022fd1b4":"markdown","27fc9f74":"markdown","9a2e4b03":"markdown","611211c6":"markdown","0aff34bd":"markdown","2d1dbcd5":"markdown","bc60cbe2":"markdown"},"source":{"89105e0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d5937329":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport pickle\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\nfrom sklearn.ensemble import RandomForestRegressor\nimport time\nfrom xgboost import XGBRegressor\nimport string\nfrom itertools import product\nimport gc","7d8c809e":"test = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","d7890dcb":"import pandas as pd\nitem_categories = pd.read_csv(\"..\/input\/future-sales-translated\/item_categories-translated.csv\")\nitems = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nsales_train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nsample_submission = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops = pd.read_csv(\"..\/input\/future-sales-translated\/shops-translated.csv\")\ntest = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","3f8cad30":"##Cleaning object data into dat_time and parsing\nsales_train['date']=pd.to_datetime(sales_train['date'],format='%d.%m.%Y')\n\nsales_train=sales_train.assign(day=sales_train['date'].dt.day,\n                  month=sales_train['date'].dt.month,\n                  year=sales_train['date'].dt.year)\n","e9f46dd9":"plt.figure(figsize=(10,5))\nplt.xlim(-100,3000)\nsns.boxplot(sales_train['item_cnt_day'])\n\nplt.figure(figsize=(10,5))\nplt.xlim(-100,45000)\nsns.boxplot(sales_train['item_price'])","828f7f3b":"sales_train=sales_train[sales_train['item_price']<40000]\nsales_train=sales_train[sales_train['item_cnt_day']<1000]","bc05aa25":"## one negative value, so we will drop it\nprint(sales_train['item_price'].sort_values())\nsales_train=sales_train[(sales_train['item_price']<0)==False]","ccde35e2":"for i in range(0,shops.shape[0]):\n    temp=[x for x in shops['shop_name_translated'][i] if x not in string.punctuation]\n    shops['shop_name_translated'][i]=''.join(temp)\n\nshops['shop_city']=shops['shop_name_translated'].map(lambda x: str.split(x)[0])\nshops['shop_type']=shops['shop_name_translated'].map(lambda x: str.split(x)[1] if len(str.split(x))>1 else str.split(x)[0])\n\nshops['shop_city']=shops['shop_city'].apply(lambda x: x.strip())\nshops['shop_type']=shops['shop_type'].apply(lambda x: x.strip())\n\nshops['shop_city']=shops['shop_city'].apply(lambda x: x.lower())\nshops['shop_type']=shops['shop_type'].apply(lambda x: x.lower())","bdd31b5a":"shops.loc[shops['shop_type'].isin(['tc','\u0442\u0446','shopping','tk']), 'shop_type']='tc'\nshops.loc[shops['shop_type'].isin(['trc','trk']), 'shop_type']='trc'\nshops.loc[shops['shop_type'].isin(['novgorod']), 'shop_type']='tc'  ## shopping which finally becomes TC\nshops.loc[shops['shop_type'].isin(['posad']), 'shop_type']='tc'","b259cd00":"my_encoder=LabelEncoder()\nshops['shop_city']=my_encoder.fit_transform(shops['shop_city'])\nshops['shop_type']=my_encoder.fit_transform(shops['shop_type'])\n\nshops=shops[['shop_id','shop_city','shop_type']]","7c5a7e50":"for i in range(0,item_categories.shape[0]):\n    temp=[c for c in  item_categories['item_category_name_translated'][i] if c not in string.punctuation]\n    item_categories['item_category_name_translated'][i]=''.join(temp)","cf3a94bd":"item_categories['cat1']=item_categories['item_category_name_translated'].map(lambda x: str.split(x)[0])\nitem_categories['cat2']=item_categories['item_category_name_translated'].map(lambda x:  str.split(x)[1] if len(str.split(x))>1 \n                                                                            else str.split(x)[0])\n\nitem_categories['cat1']=item_categories['cat1'].map(lambda x: x.lower())\nitem_categories['cat2']=item_categories['cat2'].map(lambda x:  x.lower())","0024316f":"my_encoder=LabelEncoder()\nitem_categories['cat1']=my_encoder.fit_transform(item_categories['cat1'])\nitem_categories['cat2']=my_encoder.fit_transform(item_categories['cat2'])\n\nitem_categories=item_categories[['item_category_id','cat1','cat2']]","e37a82ff":"items.drop('item_name',axis=1,inplace=True)","a85baec9":"sales_train['revenue']=sales_train['item_price']*sales_train['item_cnt_day']","cd84b2b5":"sales_train[\"max_item_price\"]=sales_train.groupby(\"item_id\")[\"item_price\"].transform('max')","d3ebc0c3":"## not really a mean, all fields have only one count. Done only to groupby for item_ids\nmax_price=sales_train.groupby(\"item_id\")['max_item_price'].mean()","6af40092":"print(test.item_id.nunique())\nprint(test.shop_id.nunique())\nprint(test.shape)","5422a42e":"group=sales_train.query(\"date_block_num<34\").groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day':['sum']})\ngroup.columns=['item_cnt_month']\ngroup.reset_index(inplace=True)\ngroup['item_cnt_month']=(group['item_cnt_month'].clip(0,20).astype(np.float16))","7ff63585":"matrix=[]\n\nfor i in range(0,34):\n    shops_month=sales_train.loc[sales_train['date_block_num']==i,'shop_id'].unique()\n    items_month=sales_train.loc[sales_train['date_block_num']==i,'item_id'].unique()\n    matrix.append(np.array(list(product([i],shops_month,items_month))))\n    \nmatrix=np.vstack(matrix)\nmatrix=pd.DataFrame(matrix,columns=['date_block_num','shop_id','item_id'])\ntest.drop('ID',axis=1,inplace=True)\ntest['date_block_num']=34\ntest=test[['date_block_num','shop_id','item_id']]\nmatrix=pd.concat([matrix,test],axis=0)","f9fd840a":"matrix=pd.merge(matrix,group,how='left',on=['date_block_num','shop_id','item_id'])\nmatrix=pd.merge(matrix,items,how='left',on=['item_id'])\nmatrix=pd.merge(matrix,shops,how='left',on=['shop_id'])\nmatrix=pd.merge(matrix,item_categories,how='left',on=['item_category_id'])","9ff89c7d":"matrix[\"item_cnt_month\"].fillna(0,inplace=True)","3385b152":"a=matrix.groupby(\"date_block_num\")[\"item_cnt_month\"].mean()*matrix.groupby(\"date_block_num\")[\"item_cnt_month\"].count()\nplt.plot(a.index,a.values)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")","d3af1a6f":"a=matrix.groupby([\"date_block_num\",\"shop_id\"])[\"item_cnt_month\"].sum().reset_index().query(\"shop_id<15\")\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.shop_id)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")","6a2dfe50":"criteria=\"shop_id>=15 and shop_id<30\"\na=matrix.groupby([\"date_block_num\",\"shop_id\"])[\"item_cnt_month\"].sum().reset_index().query(criteria)\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.shop_id)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")","eb242268":"criteria=\"shop_id>=30 and shop_id<45\"\na=matrix.groupby([\"date_block_num\",\"shop_id\"])[\"item_cnt_month\"].sum().reset_index().query(criteria)\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.shop_id)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")","ec787b41":"criteria=\"shop_id>=45 and shop_id<60\"\na=matrix.groupby([\"date_block_num\",\"shop_id\"])[\"item_cnt_month\"].sum().reset_index().query(criteria)\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.shop_id)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")","41bcb6d8":"a=matrix.groupby([\"date_block_num\",\"cat1\"])[\"item_cnt_month\"].sum().reset_index()\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.cat1)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")\nplt.title(\"cat1\")","618a2983":"a=matrix.groupby([\"date_block_num\",\"cat2\"])[\"item_cnt_month\"].sum().reset_index()\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.cat2)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")\nplt.title(\"cat2\")","98232077":"a=matrix.groupby([\"date_block_num\",\"item_category_id\"])[\"item_cnt_month\"].sum().reset_index()\nsns.lineplot(x=\"date_block_num\",y=\"item_cnt_month\",data=a,hue=a.item_category_id)\nplt.xlabel(\"date_block_num\")\nplt.ylabel(\"item_cnt_month\")\nplt.title(\"item_category_id\")","d05be6e9":"matrix[\"month\"]=matrix.date_block_num%12\nmatrix[\"year\"]=(matrix.date_block_num\/12).apply(lambda x: int(x))","4065116b":"## functoin for p,t ,F values\nfrom scipy.special import ndtr\nfrom sklearn.feature_selection import SelectKBest, f_classif\ndef tpf_of(matrix):\n    selector = SelectKBest(f_classif, k=5)\n    X_train=matrix.query(\"date_block_num<33\").drop(\"item_cnt_month\",axis=1)\n    y_train=matrix.query(\"date_block_num<33\")[\"item_cnt_month\"]\n    selector.fit(X_train, y_train)\n    F=selector.scores_\n    t=np.sqrt(selector.scores_)\n    p=1-ndtr(t)\n    return(pd.DataFrame(data=np.vstack((F,t,p)).transpose(),columns=[\"F\",\"t\",\"p\"],index=X_train.columns))","04c09c16":"#shop count\na=matrix.query(\"date_block_num<34\").groupby(\"shop_id\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"shop_id_avg\"]\nmatrix['shop_id_avg']=matrix[\"shop_id\"].map(a['shop_id_avg'])","2efefcb6":"# item count MOST USEFUL\na=matrix.query(\"date_block_num<34\").groupby(\"item_id\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"item_id_avg\"]\nmatrix['item_id_avg']=matrix[\"item_id\"].map(a['item_id_avg'])\n\n# item category\na=matrix.query(\"date_block_num<34\").groupby(\"item_category_id\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"item_category_id_avg\"]\nmatrix['item_category_id_avg']=matrix[\"item_category_id\"].map(a['item_category_id_avg'])","e8c35891":"## date item count\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"item_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_item_id_num_avg\"]\n\nmatrix[\"date_block_item_id_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"item_id\"],\n                                              how=\"left\")[\"date_block_item_id_num_avg\"]\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_id_num_avg\":\"date_block_item_id_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_id_num_avg\":\"date_block_item_id_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_id_num_avg\":\"date_block_item_id_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+3\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_id_num_avg\":\"date_block_item_id_num_avg_lag_\"+str(6)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+6\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_id_num_avg\":\"date_block_item_id_num_avg_lag_\"+str(12)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\"],how=\"left\")","815d20a3":"## date shop count\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"shop_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_shop_id_num_avg\"]\n\nmatrix[\"date_block_shop_id_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_shop_id_num_avg\"]\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_num_avg\":\"date_block_shop_id_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"shop_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_num_avg\":\"date_block_shop_id_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"shop_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_num_avg\":\"date_block_shop_id_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"shop_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+3\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_num_avg\":\"date_block_shop_id_num_avg_lag_\"+str(6)},inplace=False)\n         ,on=[\"date_block_num\",\"shop_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+6\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_num_avg\":\"date_block_shop_id_num_avg_lag_\"+str(12)},inplace=False)\n         ,on=[\"date_block_num\",\"shop_id\"],how=\"left\")","c18f5acc":"## item price\na=sales_train.query(\"date_block_num<34\").groupby(\"item_id\").agg({\"item_price\":[\"mean\"]})\na.columns=[\"mean_item_price\"]\nmatrix[\"item_price\"]=matrix[\"item_id\"].map(a[\"mean_item_price\"])","faba096a":"## date shop revenue\na=sales_train.query(\"date_block_num<34\").groupby([\"date_block_num\",\"shop_id\"]).agg({\"revenue\":[\"sum\"]})\na.columns=[\"date_block_shop_id_revenue_avg\"]\na.reset_index(inplace=True)\n\nmatrix[\"date_block_shop_id_revenue_avg\"]=pd.merge(matrix,a,\n                                              on=[\"date_block_num\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_shop_id_revenue_avg\"]\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\n\nmatrix[\"date_block_shop_id_revenue_avg_lag_\"+str(1)]=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_revenue_avg\":\"date_block_shop_id_revenue_avg_lag_\"+str(1)}),\n                                              on=[\"date_block_num\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_shop_id_revenue_avg_lag_\"+str(1)]\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\n\nmatrix[\"date_block_shop_id_revenue_avg_lag_\"+str(2)]=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_revenue_avg\":\"date_block_shop_id_revenue_avg_lag_\"+str(2)}),\n                                              on=[\"date_block_num\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_shop_id_revenue_avg_lag_\"+str(2)]\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\n\nmatrix[\"date_block_shop_id_revenue_avg_lag_\"+str(3)]=pd.merge(matrix,a.rename(columns={\"date_block_shop_id_revenue_avg\":\"date_block_shop_id_revenue_avg_lag_\"+str(3)}),\n                                              on=[\"date_block_num\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_shop_id_revenue_avg_lag_\"+str(3)]","c96b13ae":"## date item count\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"item_category_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_item_category_id_num_avg\"]\n\nmatrix[\"date_block_item_category_id_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"item_category_id\"],\n                                              how=\"left\")[\"date_block_item_category_id_num_avg\"]\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_id_num_avg\":\"date_block_item_category_id_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_id_num_avg\":\"date_block_item_category_id_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_id_num_avg\":\"date_block_item_category_id_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+3\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_id_num_avg\":\"date_block_item_category_id_num_avg_lag_\"+str(6)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\"],how=\"left\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+6\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_id_num_avg\":\"date_block_item_category_id_num_avg_lag_\"+str(12)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\"],how=\"left\")","fbe1d54f":"del sales_train, shops,items, item_categories,a\ngc.collect()","ec10d547":"matrix[\"date_block_num\"]=matrix[\"date_block_num\"].astype(\"int8\")\nmatrix[\"shop_id\"]=matrix[\"shop_id\"].astype(\"int8\")\nmatrix[\"item_id\"]=matrix[\"item_id\"].astype(\"int16\")\nmatrix[\"item_cnt_month\"]=matrix[\"item_cnt_month\"].astype(\"int8\")\nmatrix[\"item_category_id\"]=matrix[\"item_category_id\"].astype(\"int8\")\nmatrix[\"shop_city\"]=matrix[\"shop_city\"].astype(\"int8\")\nmatrix[\"shop_type\"]=matrix[\"shop_type\"].astype(\"int8\")\nmatrix[\"cat1\"]=matrix[\"cat1\"].astype(\"int8\")\nmatrix[\"cat2\"]=matrix[\"cat2\"].astype(\"int8\")\nmatrix[\"month\"]=matrix[\"month\"].astype(\"int8\")\nmatrix[\"year\"]=matrix[\"year\"].astype(\"int8\")\nmatrix[\"item_price\"]=matrix[\"item_price\"].astype(\"float16\")\nmatrix[\"date_block_shop_id_revenue_avg\"]=matrix[\"date_block_shop_id_revenue_avg\"].astype(\"float32\")\nmatrix[\"date_block_shop_id_revenue_avg_lag_1\"]=matrix[\"date_block_shop_id_revenue_avg_lag_1\"].astype(\"float32\")\nmatrix[\"date_block_shop_id_revenue_avg_lag_2\"]=matrix[\"date_block_shop_id_revenue_avg_lag_2\"].astype(\"float32\")\nmatrix[\"date_block_shop_id_revenue_avg_lag_3\"]=matrix[\"date_block_shop_id_revenue_avg_lag_3\"].astype(\"float32\")","1cdc13a5":"a=matrix.query(\"date_block_num<34\").groupby(\"cat1\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"cat1_avg\"]\nmatrix['cat1_avg']=matrix[\"cat1\"].map(a['cat1_avg'])\nmatrix['cat1_avg']=matrix['cat1_avg'].astype(\"float16\")\nprint(\"done\")\n\na=matrix.query(\"date_block_num<34\").groupby(\"cat2\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"cat2_avg\"]\nmatrix['cat2_avg']=matrix[\"cat2\"].map(a['cat2_avg'])\nmatrix['cat2_avg']=matrix['cat2_avg'].astype(\"float16\")\nprint(\"done\")\n\n\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"cat1\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_cat1_num_avg\"]\n\nmatrix[\"date_block_cat1_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"cat1\"],\n                                              how=\"left\")[\"date_block_cat1_num_avg\"]\nmatrix['date_block_cat1_num_avg']=matrix['date_block_cat1_num_avg'].astype(\"float16\")\n\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat1_num_avg\":\"date_block_cat1_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"cat1\"],how=\"left\")\nmatrix['date_block_cat1_num_avg_lag_1']=matrix['date_block_cat1_num_avg_lag_1'].astype(\"float16\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat1_num_avg\":\"date_block_cat1_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"cat1\"],how=\"left\")\nmatrix['date_block_cat1_num_avg_lag_2']=matrix['date_block_cat1_num_avg_lag_2'].astype(\"float16\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat1_num_avg\":\"date_block_cat1_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"cat1\"],how=\"left\")\nmatrix['date_block_cat1_num_avg_lag_3']=matrix['date_block_cat1_num_avg_lag_3'].astype(\"float16\")\n\nprint(\"done\")\n\n\n\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"cat2\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_cat2_num_avg\"]\n\nmatrix[\"date_block_cat2_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"cat2\"],\n                                              how=\"left\")[\"date_block_cat2_num_avg\"]\nmatrix['date_block_cat2_num_avg']=matrix['date_block_cat2_num_avg'].astype(\"float16\")\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat2_num_avg\":\"date_block_cat2_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"cat2\"],how=\"left\")\nmatrix['date_block_cat2_num_avg_lag_1']=matrix['date_block_cat2_num_avg_lag_1'].astype(\"float16\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat2_num_avg\":\"date_block_cat2_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"cat2\"],how=\"left\")\nmatrix['date_block_cat2_num_avg_lag_1']=matrix['date_block_cat2_num_avg_lag_2'].astype(\"float16\")\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_cat2_num_avg\":\"date_block_cat2_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"cat2\"],how=\"left\")\nmatrix['date_block_cat2_num_avg_lag_1']=matrix['date_block_cat2_num_avg_lag_3'].astype(\"float16\")\n\nprint(\"done\")","f9a2317c":"a=matrix.query(\"date_block_num<34\").groupby(\"shop_type\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"shop_type_avg\"]\nmatrix['shop_type_avg']=matrix[\"shop_type\"].map(a['shop_type_avg'])\nmatrix['shop_type_avg']=matrix['shop_type_avg'].astype(\"float16\")\nprint(\"done\")\n\na=matrix.query(\"date_block_num<34\").groupby(\"shop_city\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"shop_city_avg\"]\nmatrix['shop_city_avg']=matrix[\"shop_city\"].map(a['shop_city_avg'])\nmatrix['shop_city_avg']=matrix['shop_city_avg'].astype(\"float16\")\nprint(\"done\")\n\n\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"shop_type\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_shop_type_num_avg\"]\n\nmatrix[\"date_block_shop_type_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"shop_type\"],\n                                              how=\"left\")[\"date_block_shop_type_num_avg\"]\nmatrix['date_block_shop_type_num_avg']=matrix['date_block_shop_type_num_avg'].astype(\"float16\")\nprint(\"done\")\n\n\n\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"shop_city\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_shop_city_num_avg\"]\n\nmatrix[\"date_block_shop_city_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"shop_city\"],\n                                              how=\"left\")[\"date_block_shop_city_num_avg\"]\nmatrix['date_block_shop_city_num_avg']=matrix['date_block_shop_city_num_avg'].astype(\"float16\")\nprint(\"done\")","fd88ec57":"a=matrix.query(\"date_block_num<34\").groupby([\"item_id\",\"shop_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"item_shop_id_num_avg\"]\n\nmatrix[\"item_shop_id_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"item_id\",\"shop_id\"],\n                                              how=\"left\")[\"item_shop_id_num_avg\"]\n\na=matrix.query(\"date_block_num<34\").groupby([\"item_category_id\",\"shop_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"item_category_shop_id_num_avg\"]\n\nmatrix[\"item_category_shop_id_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"item_category_id\",\"shop_id\"],\n                                              how=\"left\")[\"item_category_shop_id_num_avg\"]\n","506b4458":"a=matrix.groupby([\"date_block_num\",\"shop_id\",\"item_id\"])[\"item_price\"].mean().reset_index()\na_lag1=a.copy()\na_lag1[\"date_block_num\"]=a[\"date_block_num\"]+1\na=pd.merge(a,a_lag1,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_lag1'))\n\na_lag2=a_lag1.copy()\na_lag2[\"date_block_num\"]=a_lag1[\"date_block_num\"]+1\na=pd.merge(a,a_lag2,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_lag2'))\n\na_lag3=a_lag2.copy()\na_lag3[\"date_block_num\"]=a_lag2[\"date_block_num\"]+1\na=pd.merge(a,a_lag3,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_lag3'))\n\na_lag6=a_lag3.copy()\na_lag6[\"date_block_num\"]=a_lag3[\"date_block_num\"]+3\na=pd.merge(a,a_lag6,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_lag6'))\n\na_lag12=a_lag6.copy()\na_lag12[\"date_block_num\"]=a_lag6[\"date_block_num\"]+6\na=pd.merge(a,a_lag12,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_lag12'))\n\n\na_mean=matrix.groupby([\"shop_id\",\"item_id\"])[\"item_price\"].mean().reset_index()\na=pd.merge(a,a_mean,on=[\"shop_id\",\"item_id\"],how=\"left\",suffixes=('','_mean'))\n\na[\"price_delta1\"]=(a.item_price-a.item_price_lag1)\/a.item_price_mean\na[\"price_delta2\"]=(a.item_price-a.item_price_lag2)\/a.item_price_mean\na[\"price_delta3\"]=(a.item_price-a.item_price_lag3)\/a.item_price_mean\na[\"price_delta6\"]=(a.item_price-a.item_price_lag6)\/a.item_price_mean\na[\"price_delta12\"]=(a.item_price-a.item_price_lag12)\/a.item_price_mean\n\na.drop([\"item_price\",\"item_price_lag1\",\"item_price_lag2\",\"item_price_lag3\",\"item_price_lag6\",\"item_price_lag12\",\"item_price_mean\"],axis=1,inplace=True)\na.date_block_num=a.date_block_num.astype(\"int8\")\na.shop_id=a.shop_id.astype(\"int8\")\na.item_id=a.item_id.astype(\"int16\")\na.price_delta1=a.price_delta1.astype(\"float16\")\na.price_delta2=a.price_delta2.astype(\"float16\")\na.price_delta3=a.price_delta3.astype(\"float16\")\na.price_delta6=a.price_delta6.astype(\"float16\")\na.price_delta12=a.price_delta12.astype(\"float16\")\n\nprice_trend=a\n\ndel a,a_lag1,a_lag2,a_lag3,a_lag6,a_lag12,a_mean\ngc.collect()","f6e7f150":"matrix[\"item_max_price\"]=matrix[\"item_id\"].map(max_price)\n\nmatrix[\"discount\"]=(matrix[\"item_max_price\"]-matrix[\"item_price\"])*100\/matrix[\"item_max_price\"]\nmatrix[\"discount\"]=matrix[\"discount\"].apply(\"int8\")\n\n## for price delta\nmatrix=pd.merge(matrix,price_trend,on=[\"date_block_num\",\"shop_id\",\"item_id\"],how=\"left\")","8309ce14":"pd.set_option(\"max_columns\",500)","1f685c78":"matrix.query('date_block_num==34')","23f6e215":"ts=time.time()\ncache = {}\nmatrix['item_shop_last_sale'] = -1\nmatrix['item_shop_last_sale'] = matrix['item_shop_last_sale'].astype(np.int8)\nfor idx, row in matrix.iterrows():    \n    key = str(row.item_id)+' '+str(row.shop_id)\n    if key not in cache:\n        if row.item_cnt_month!=0:\n            cache[key] = row.date_block_num\n    else:\n        last_date_block_num = cache[key]\n        matrix.at[idx, 'item_shop_last_sale'] = row.date_block_num - last_date_block_num\n        cache[key] = row.date_block_num\n        \nprint(\"time taken\", time.time()-ts)\ndel cache\ngc.collect()","b7b21693":"ts=time.time()\nmatrix[\"item_last_sale\"]=-1\nmatrix[\"item_last_sale\"]=matrix[\"item_last_sale\"].apply(\"int8\")\n\ncache={}\n\nfor idx,row in matrix.iterrows():\n    key=str(row.item_id)\n    if key not in cache.keys():\n        if row.item_cnt_month!=0:\n            cache[key]=row.date_block_num\n    else:\n        last_date_block_num=cache[key]\n        if row.date_block_num>last_date_block_num:\n            matrix.at[idx,'item_last_sale']=row.date_block_num-last_date_block_num\n            cache[key]=row.date_block_num\n\nmatrix[\"item_last_sale\"]=matrix[\"item_last_sale\"].apply(\"int8\")\nprint(\"time taken=\",time.time()-ts)","50a7b024":"matrix[\"item_shop_first_sale\"]=matrix['date_block_num']-matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\nmatrix[\"item_shop_first_sale\"]=matrix[\"item_shop_first_sale\"].apply('int8')\n\nmatrix['item_first_sale']=matrix['date_block_num']-matrix.groupby('item_id')['date_block_num'].transform('min')\nmatrix['item_first_sale']=matrix['item_first_sale'].apply('int8')","aab1d118":"matrix.drop([\"date_block_item_id_num_avg\",\"date_block_shop_id_num_avg\",\"date_block_shop_id_revenue_avg\",\n            \"date_block_item_category_id_num_avg\",\"date_block_cat1_num_avg\",\"date_block_cat2_num_avg\",\n             \"date_block_shop_type_num_avg\",\"date_block_shop_city_num_avg\"],axis=1,inplace=True)","3cc3a63d":"matrix.to_pickle(\"matrix.pkl\")","70e0d872":"matrix=pd.read_pickle(\"..\/input\/sales-train\/matrix.pkl\")","be697cc4":"%%time\n# date count\na=matrix.query(\"date_block_num<34\").groupby(\"date_block_num\").agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_num_avg\"]\n\nmatrix[\"date_block_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=\"date_block_num\",\n                                              how=\"left\")[\"date_block_num_avg\"]\nmatrix[\"date_block_num_avg\"]=matrix[\"date_block_num_avg\"].astype(\"float16\")\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_num_avg\":\"date_block_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=\"date_block_num\",how=\"left\")\nmatrix[\"date_block_num_avg_lag_1\"]=matrix[\"date_block_num_avg_lag_1\"].astype(\"float16\")\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_num_avg\":\"date_block_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=\"date_block_num\",how=\"left\")\nmatrix[\"date_block_num_avg_lag_2\"]=matrix[\"date_block_num_avg_lag_2\"].astype(\"float16\")\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_num_avg\":\"date_block_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=\"date_block_num\",how=\"left\")\nmatrix[\"date_block_num_avg_lag_3\"]=matrix[\"date_block_num_avg_lag_3\"].astype(\"float16\")","7aab694a":"%%time\n## date item shop count\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"item_id\",\"shop_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_item_shop_num_avg\"]\n\nmatrix[\"date_block_item_shop_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"item_id\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_item_shop_num_avg\"]\nmatrix[\"date_block_item_shop_num_avg\"]=matrix[\"date_block_item_shop_num_avg\"].astype('float16')\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_shop_num_avg\":\"date_block_item_shop_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_shop_num_avg_lag_\"+str(1)]=matrix[\"date_block_item_shop_num_avg_lag_\"+str(1)].astype('float16')\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_shop_num_avg\":\"date_block_item_shop_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_shop_num_avg_lag_\"+str(2)]=matrix[\"date_block_item_shop_num_avg_lag_\"+str(2)].astype('float16')\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_shop_num_avg\":\"date_block_item_shop_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"item_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_shop_num_avg_lag_\"+str(3)]=matrix[\"date_block_item_shop_num_avg_lag_\"+str(3)].astype('float16')\n\n\nmatrix.drop(\"date_block_item_shop_num_avg\",axis=1,inplace=True)","8c7e8c10":"%%time\n## date item category shop count\na=matrix.query(\"date_block_num<34\").groupby([\"date_block_num\",\"item_category_id\",\"shop_id\"]).agg({\"item_cnt_month\":[\"mean\"]})\na.columns=[\"date_block_item_category_shop_num_avg\"]\n\nmatrix[\"date_block_item_category_shop_num_avg\"]=pd.merge(matrix,a.reset_index(),\n                                              on=[\"date_block_num\",\"item_category_id\",\"shop_id\"],\n                                              how=\"left\")[\"date_block_item_category_shop_num_avg\"]\nmatrix[\"date_block_item_category_shop_num_avg\"]=matrix[\"date_block_item_category_shop_num_avg\"].astype('float16')\n\n\na.reset_index(inplace=True)\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_shop_num_avg\":\"date_block_item_category_shop_num_avg_lag_\"+str(1)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_category_shop_num_avg_lag_\"+str(1)]=matrix[\"date_block_item_category_shop_num_avg_lag_\"+str(1)].astype('float16')\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_shop_num_avg\":\"date_block_item_category_shop_num_avg_lag_\"+str(2)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_category_shop_num_avg_lag_\"+str(2)]=matrix[\"date_block_item_category_shop_num_avg_lag_\"+str(2)].astype('float16')\n\n\na[\"date_block_num\"]=a[\"date_block_num\"]+1\nmatrix=pd.merge(matrix,a.rename(columns={\"date_block_item_category_shop_num_avg\":\"date_block_item_category_shop_num_avg_lag_\"+str(3)},inplace=False)\n         ,on=[\"date_block_num\",\"item_category_id\",\"shop_id\"],how=\"left\")\nmatrix[\"date_block_item_category_shop_num_avg_lag_\"+str(3)]=matrix[\"date_block_item_category_shop_num_avg_lag_\"+str(3)].astype('float16')\n\n\nmatrix.drop(\"date_block_item_category_shop_num_avg\",axis=1,inplace=True)","4271bab2":"matrix=matrix.query(\"date_block_num>11\")\nmatrix.fillna(0,inplace=True)","8cc8ff70":"matrix.info()","8cc6b841":"X_train=matrix.drop(\"item_cnt_month\",axis=1).query(\"date_block_num<33\")\ny_train=matrix.query(\"date_block_num<33\")[\"item_cnt_month\"]\nX_val=matrix.drop(\"item_cnt_month\",axis=1).query(\"date_block_num==33\")\ny_val=matrix.query(\"date_block_num==33\")[\"item_cnt_month\"]\nX_test=matrix.drop(\"item_cnt_month\",axis=1).query(\"date_block_num==34\")\n\ndel matrix\ngc.collect()","59a493f2":"from sklearn.ensemble import RandomForestClassifier","99e48bbf":"## ENSEMBLEE\nts=time.time()\nclf=RandomForestRegressor(max_features=\"sqrt\",n_estimators=500,criterion=\"mse\",max_samples=0.6,\n                               random_state=0,max_depth=11,n_jobs=-1,verbose=True)\nclf.fit(X_train,y_train)\n\nprint(\"time taken= \", time.time()-ts)","d77445a4":"y_pred_RF=clf.predict(X_val)\ntest_preds_rf=clf.predict(X_test.fillna(0))\nmse=mean_squared_error(y_pred_RF,y_val)\nprint(\"MSE=\",mse)","ac6fb5db":"test_preds=clf.predict(X_test.fillna(0))\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":test_preds})\nsubmission.to_csv(\"submission_RF.csv\",index=False)","feb7556c":"y_pred_RF=pd.DataFrame({\"y_pred_RF\":y_pred_RF})\ntest_preds_rf=pd.DataFrame({\"test_preds_rf\":test_preds_rf})\n\ny_pred_RF.to_csv(\"y_pred_RF.csv\")\ntest_preds_rf.to_csv(\"test_preds_rf.csv\")","f2489271":"ts = time.time()\n\nmodel = XGBRegressor(\n    max_depth=9,\n    n_estimators=5000,\n    colsample_bytree=0.12403473458920847, \n    subsample=0.6,\n    min_child_weight=300,\n    eta=0.01,\n    seed=0)\n\nmodel.fit(\n    X_train, \n    y_train, \n    eval_metric=\"rmse\", \n    eval_set=[(X_train, y_train), (X_val, y_val)], \n    verbose=True, \n    early_stopping_rounds = 10)\n\ntime.time() - ts","9a9ad54d":"test_preds=model.predict(X_test.fillna(0))\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":test_preds})\nsubmission.to_csv(\"submission.csv\",index=False)","fd76863b":"from xgboost import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nplot_features(model,(10,14))","d85b0bd8":"y_pred_XGB=model.predict(X_val)\ntest_preds_xgb = model.predict(X_test.fillna(0))","638158fa":"test_preds = model.predict(X_test.fillna(0))\ntest_preds[test_preds<0]=0\ntest_preds[test_preds>20]=20\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":test_preds})\nsubmission.to_csv(\"submission_XGBM.csv\",index=False)\nsubmission_XGBM=submission","1bda95b6":"import lightgbm as lgb","a0342df7":"ts=time.time()\ndtrain = lgb.Dataset(X_train, label=y_train)\ndvalid = lgb.Dataset(X_val, label=y_val)\n\nparam = {'objective': 'regression',\"eta\":0.01,\"random_state\":0,\"max_depth\":2,\"subsample\":0.67,\n         \"feature_fraction_bynode\":0.12403473458920847,\"min_child_weight\":300}\nparam['metric'] = 'mse'\nnum_round = 10000\nbst = lgb.train(param, dtrain, num_round, valid_sets=[dvalid], early_stopping_rounds=10, \n                verbose_eval=True)\nprint(\"time taken:\",time.time()-ts)","034f264e":"y_pred_LGB=bst.predict(X_val)\ntest_preds_lgb = bst.predict(X_test.fillna(0))","9882c07b":"test_preds = bst.predict(X_test.fillna(0))\ntest_preds[test_preds<0]=0\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":test_preds.round()})\nsubmission.to_csv(\"submission_LGBM.csv\",index=False)\nsubmission_LGBM=submission","2193d22f":"1\/np.sqrt(X_train.shape[1])","2efa17ed":"y_train.mean()","0aaea181":"test_preds.mean()","3505a2d2":"from lightgbm import plot_importance\n\ndef plot_features(booster, figsize):    \n    fig, ax = plt.subplots(1,1,figsize=figsize)\n    return plot_importance(booster=booster, ax=ax)\n\nplot_features(bst,(10,14))","db06d40c":"cols_to_drop=[\"item_max_price\",\"item_price\",\"shop_type_avg\",'shop_type',\"item_category_id\",\n             \"discount\",'date_block_shop_id_revenue_avg_lag_2',\"date_block_shop_id_revenue_avg_lag_1\",\n              'date_block_shop_id_revenue_avg_lag_3',\"cat1\",\"cat2\",\"cat1_avg\",\n              \"date_block_cat1_num_avg_lag_1\",\"date_block_cat1_num_avg_lag_2\",\"date_block_cat1_num_avg_lag_3\",\n              \"date_block_cat2_num_avg_lag_2\",\"date_block_cat2_num_avg_lag_1\",'date_block_cat2_num_avg_lag_3',\n              \"item_id\",'shop_city','shop_city_avg','shop_id']","1a4688fd":"plt.scatter(np.arange(len(test_preds)),test_preds)","3d43b4ea":"sns.boxplot(y=test_preds)","abd26b2e":"plt.scatter(test_preds_rf,test_preds_xgb)","879adc0a":"submission[\"item_cnt_month\"].max()","dceff66a":"y_pred_RF[\"y_pred_RF\"]","67ae497b":"y_pred_df=pd.DataFrame({\"y_pred_RF\":y_pred_RF,\"y_pred_XGB\":y_pred_XGB,\"y_val\":y_val})\ny_test_df=pd.DataFrame({\"test_preds_rf\":test_preds_rf,\"test_preds_xgb\":test_preds_xgb})","4445a3bc":"y_pred_df.to_pickle(\"y_preds.pkl\")\ny_test_df.to_pickle(\"y_test.pkl\")","f9511d46":"print(\"MSE for mean \",mean_squared_error(y_pred_df[[\"y_pred_RF\",\"y_pred_XGB\"]].mean(axis=1),y_pred_df[\"y_val\"]))","76919c18":"lm=LinearRegression()\nlm.fit(y_pred_df[[\"y_pred_RF\",\"y_pred_XGB\"]],y_pred_df[\"y_val\"])\ntest_preds_lvl2=lm.predict(y_test_df)\ntest_preds_lvl2[test_preds_lvl2<0]=0\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":test_preds_lvl2})\nsubmission.to_csv(\"submission.csv\",index=False)","3f3477ee":"r2_score(y_pred_df[\"y_val\"],lm.predict(y_pred_df[[\"y_pred_RF\",\"y_pred_XGB\"]]))","947a3c13":"r2_score(y_pred_df[\"y_val\"],(y_pred_df[\"y_pred_RF\"]+y_pred_df[\"y_pred_XGB\"])\/2)","bffc2aef":"test_preds_lgb[test_preds_lgb<0]=0\ntest_preds_xgb[test_preds_xgb<0]=0\ntest_preds_rf[test_preds_rf<0]=0\n\nsubmission=pd.DataFrame({\"ID\":test.index,\"item_cnt_month\":(test_preds_xgb+test_preds_lgb)\/3})\nsubmission.to_csv(\"submission.csv\",index=False)","574762a9":"sns.scatterplot(np.arange(len(test_preds_xgb)),test_preds_xgb)\nsns.scatterplot(np.arange(len(test_preds_lgb)),test_preds_lgb)","19576d79":"from sklearn.metrics import r2_score","f4e7f8d7":"print(\"R2 score for DT\",r2_score(y_val,y_pred_DT))\nprint(\"R2 score for DT\",r2_score(y_val,y_pred_RF))\nprint(\"R2 score for DT\",r2_score(y_val,y_pred_LGB))","ebad678f":"selector = SelectKBest(f_classif,k=3)\nselector.fit(y_pred_df[[\"y_pred_DT\",\"y_pred_RF\",\"y_pred_LGB\"]],y_pred_df[\"y_val\"])\nF=selector.scores_\nt=np.sqrt(selector.scores_)\np=1-ndtr(t)\npd.DataFrame(data=np.vstack((F,t,p)).transpose(),columns=[\"F\",\"t\",\"p\"],index=y_pred_df[[\"y_pred_DT\",\"y_pred_RF\",\"y_pred_LGB\"]].columns)","1a2e48d1":"y_pred_df[[\"y_pred_DT\",\"y_pred_RF\",\"y_pred_LGB\"]]","45ac05af":"y_pred_df","fba1f110":"# CREDITS FOR DATA CLEANING AND TEST SET PREPARATION GO TO DENIS LARIONOV's Kernel. I have simply modified them for the translated dataset.\n\n#### This Kernel has produced a score of 1.14 with DecisionTreeRegressor,max_depth=11, no pruning.","de0d71a8":"# More Features","15871533":"# ENSEMBLING","2d33959f":"#### Item categories","d545a543":"# MODELING","dea7cef3":"#### Items formatting","83af45ba":"ENSEMBLING","0afdb101":"label encoding the data","cafffa0d":"#### Shop name formatting","87f107ea":"Healing the data","bcbf693e":"encoding","0df44122":"eta=0.1, trees=654","c3ec3846":"#### Homogenizing train and test data","022fd1b4":"we can see that the test set is a cross product of all the shops and items sold in the particular month.\nWe shall now do this to entire train data and merge them together","27fc9f74":"# XGB","9a2e4b03":"CAT1 and CAT2","611211c6":"matrix.drop(cols_to_drop,axis=1,inplace=True)","0aff34bd":"cleaning","2d1dbcd5":"# RandomForest","bc60cbe2":"# LIGHT GBM"}}