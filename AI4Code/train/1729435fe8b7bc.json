{"cell_type":{"80513e19":"code","18934f23":"code","b0f7620e":"code","4401fd35":"code","24024c4a":"code","0417d273":"code","9773ec66":"code","85b5e78c":"code","01213bb9":"code","1a12eae9":"markdown"},"source":{"80513e19":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom tqdm.auto import tqdm\nimport shutil as sh","18934f23":"fold = 1\nindex = pd.read_csv(\"..\/input\/..\/input\/wheat-image-id\/image_id.csv\")[\"image_id\"]\nindex = list(index)\nindex[:5]","b0f7620e":"!cp -r ..\/input\/yolov5train\/* .","4401fd35":"!ls","24024c4a":"def convertTrainLabel(fold):\n    df = pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\n    bboxs = np.stack(df['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\n    for i, column in enumerate(['x', 'y', 'w', 'h']):\n        df[column] = bboxs[:,i]\n    df.drop(columns=['bbox'], inplace=True)\n    df['x_center'] = df['x'] + df['w']\/2\n    df['y_center'] = df['y'] + df['h']\/2\n    df['classes'] = 0\n    from tqdm.auto import tqdm\n    import shutil as sh\n    df = df[['image_id','x', 'y', 'w', 'h','x_center','y_center','classes']]\n    \n#     index = list(set(df.image_id))\n    \n    source = 'train'\n    if True:\n#         for fold in [0]:\n        val_index = index[len(index)*fold\/\/5:len(index)*(fold+1)\/\/5]\n        for name,mini in tqdm(df.groupby('image_id')):\n            if name in val_index:\n                path2save = 'val\/'\n            else:\n                path2save = 'train\/'\n            if not os.path.exists('convertor\/fold{}\/labels\/'.format(fold)+path2save):\n                os.makedirs('convertor\/fold{}\/labels\/'.format(fold)+path2save)\n            with open('convertor\/fold{}\/labels\/'.format(fold)+path2save+name+\".txt\", 'w+') as f:\n                row = mini[['classes','x_center','y_center','w','h']].astype(float).values\n                row = row\/1024\n                row = row.astype(str)\n                for j in range(len(row)):\n                    text = ' '.join(row[j])\n                    f.write(text)\n                    f.write(\"\\n\")\n            if not os.path.exists('convertor\/fold{}\/images\/{}'.format(fold,path2save)):\n                os.makedirs('convertor\/fold{}\/images\/{}'.format(fold,path2save))\n            sh.copy(\"..\/input\/global-wheat-detection\/{}\/{}.jpg\".format(source,name),'convertor\/fold{}\/images\/{}\/{}.jpg'.format(fold,path2save,name))","0417d273":"convertTrainLabel(fold)","9773ec66":"!ls","85b5e78c":"!python train.py --img 1024 --batch 2 --epochs 1 --data ..\/input\/yolov5-for-wheat\/wheat_fold1.yaml \\\n--cfg ..\/input\/yolov5-for-wheat\/yolov5s.yaml --weights ..\/input\/yolov5-for-wheat\/yolov5s.pt --name yolov5s_fold1","01213bb9":"!rm -rf convertor","1a12eae9":"YOLOv5 Pseudo Labeling\nAccording to the results of this notebook FaterRCNN seems to work well with Pseudo Labeling. In this notebook I am going to test Pseudo labeling technique on Yolov5."}}