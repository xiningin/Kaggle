{"cell_type":{"3b267bef":"code","8fb910c4":"code","e30f194a":"code","2182aab3":"code","806b7fa8":"code","6c0a56e1":"code","eff3eefe":"code","462a4496":"code","417bb812":"code","3a632b0b":"code","837ce239":"code","c7191040":"code","ab16e2db":"code","6b25147e":"code","37ba4b68":"code","84eb460d":"code","28541fcf":"code","cb5eba5d":"code","f3b8ff70":"code","709d6f7a":"code","8c815e39":"code","ecaee364":"code","3d9239b6":"code","4bc95a4f":"code","7b65068f":"markdown","98239469":"markdown","ad1145db":"markdown","9c638220":"markdown","3235463e":"markdown","aad0d3a7":"markdown","8f1f9d52":"markdown","2d7d4445":"markdown"},"source":{"3b267bef":"import fastai\nfrom fastai.vision import *\nfastai.__version__","8fb910c4":"BATCH  = 250\nSIZE   = 150\npath = Path('..\/input\/imet-2019-fgvc6\/') # iMet data path","e30f194a":"!ls ..\/input\/resnet50\/","2182aab3":"# Making pretrained weights work without needing to find the default filename\nfrom torch.utils import model_zoo\nPath('models').mkdir(exist_ok=True)\n!cp '..\/input\/resnet50\/resnet50.pth' 'models\/'\ndef load_url(*args, **kwargs):\n    model_dir = Path('models')\n    filename  = 'resnet50.pth'\n    if not (model_dir\/filename).is_file(): raise FileNotFoundError\n    return torch.load(model_dir\/filename)\nmodel_zoo.load_url = load_url","806b7fa8":"# Load train dataframe\ntrain_df = pd.read_csv(path\/'train.csv')\ntrain_df.head()","6c0a56e1":"# Load labels dataframe\nlabels_df = pd.read_csv(path\/'labels.csv')\nlabels_df.head()","eff3eefe":"# Load sample submission\ntest_df = pd.read_csv(path\/'sample_submission.csv')\ntest_df.head()","462a4496":"tfms = get_transforms(do_flip=True, flip_vert=False, max_rotate=0.10, max_zoom=1.5, max_warp=0.2, max_lighting=0.2,\n                     xtra_tfms=[(symmetric_warp(magnitude=(-0,0), p=0)),])","417bb812":"train, test = [ImageList.from_df(df, path=path, cols='id', folder=folder, suffix='.png') \n               for df, folder in zip([train_df, test_df], ['train', 'test'])]\ndata = (train.split_by_rand_pct(0.05, seed=42)\n        .label_from_df(cols='attribute_ids', label_delim=' ')\n        .add_test(test)\n        .transform(tfms, size=SIZE, resize_method=ResizeMethod.PAD, padding_mode='border',)\n        .databunch(path=Path('.'), bs=BATCH).normalize(imagenet_stats))","3a632b0b":"data","837ce239":"data.show_batch()","c7191040":"# Source: https:\/\/www.kaggle.com\/c\/human-protein-atlas-image-classification\/discussion\/78109\nclass FocalLoss(nn.Module):\n    def __init__(self, gamma=2):\n        super().__init__()\n        self.gamma = gamma\n\n    def forward(self, logit, target):\n        target = target.float()\n        max_val = (-logit).clamp(min=0)\n        loss = logit - logit * target + max_val + \\\n               ((-max_val).exp() + (-logit - max_val).exp()).log()\n\n        invprobs = F.logsigmoid(-logit * (target * 2.0 - 1.0))\n        loss = (invprobs * self.gamma).exp() * loss\n        if len(loss.size())==2:\n            loss = loss.sum(dim=1)\n        return loss.mean()","ab16e2db":"learn = cnn_learner(data, base_arch=models.resnet50, loss_func=FocalLoss(), metrics=fbeta,ps=0.5)","6b25147e":"# Find a good learning rate\n#learn.lr_find()\n#learn.recorder.plot()","37ba4b68":"learn.fit_one_cycle(3)\nlearn.save('stage-1', return_path=True)\nlearn.unfreeze()\nlearn.lr_find()\nlearn.recorder.plot()\nlearn.fit_one_cycle(4, slice(1e-5,1e-2))\n#learn.freeze()\nlearn.save('stage-2', return_path=True)\n","84eb460d":"learn.recorder.plot()\nlearn.recorder.plot_losses()\nlearn.recorder.plot_metrics()","28541fcf":"learn.export()","cb5eba5d":"def find_best_fixed_threshold(preds, targs, do_plot=True):\n    score = []\n    thrs = np.arange(0, 0.5, 0.01)\n    for thr in progress_bar(thrs):\n        score.append(fbeta(valid_preds[0],valid_preds[1], thresh=thr))\n    score = np.array(score)\n    pm = score.argmax()\n    best_thr, best_score = thrs[pm], score[pm].item()\n    print(f'thr={best_thr:.3f}', f'F2={best_score:.3f}')\n    if do_plot:\n        plt.plot(thrs, score)\n        plt.vlines(x=best_thr, ymin=score.min(), ymax=score.max())\n        plt.text(best_thr+0.03, best_score-0.01, f'$F_{2}=${best_score:.3f}', fontsize=14);\n        plt.show()\n    return best_thr\n\ni2c = np.array([[i, c] for c, i in learn.data.train_ds.y.c2i.items()]).astype(int) # indices to class number correspondence\n\ndef join_preds(preds, thr):\n    return [' '.join(i2c[np.where(t==1)[0],1].astype(str)) for t in (preds[0].sigmoid()>thr).long()]","f3b8ff70":"# Validation predictions\nvalid_preds = learn.get_preds(DatasetType.Valid)\nbest_thr = find_best_fixed_threshold(*valid_preds)","709d6f7a":"# Test predictions\n#test_preds = learn.get_preds(DatasetType.Test)\n#test_df.attribute_ids = join_preds(test_preds, best_thr)\n#test_df.head()","8c815e39":"#test_df.to_csv('submission.csv', index=False)","ecaee364":"# Validation predictions with TTA\n#valid_preds = learn.TTA(ds_type=DatasetType.Valid)\n#best_thr = find_best_fixed_threshold(*valid_preds)","3d9239b6":"# Test predictions with TTA\ntest_preds = learn.TTA(ds_type=DatasetType.Test)\ntest_df.attribute_ids = join_preds(test_preds, best_thr)\ntest_df.head()","4bc95a4f":"test_df.to_csv('submission.csv', index=False) ","7b65068f":"# Data","98239469":"# Get predictions","ad1145db":"# Train the model","9c638220":"# Create learner with pretrenet model and FocalLoss\nFor problems with high class imbalance Focal Loss is usually a better choice than the usual Cross Entropy Loss.","3235463e":"# Create data object using datablock API","aad0d3a7":"# iMet Collection 2019 - FGVC6\n**Simple baseline for iMet Collection 2019 competition using fastai v1**","8f1f9d52":"# Setup","2d7d4445":"## TTA"}}