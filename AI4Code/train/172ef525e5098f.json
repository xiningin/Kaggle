{"cell_type":{"66419ffe":"code","4685a019":"code","cf805058":"code","2f057c2e":"code","181d0b0c":"code","03c04dbf":"code","934d8c0b":"code","bac661e9":"code","6b18c425":"markdown","cd1d6b0c":"markdown","b2e29353":"markdown","7d484b9f":"markdown","b94a2325":"markdown","5d059749":"markdown","86c7c997":"markdown"},"source":{"66419ffe":"\nimport numpy as np \nimport pandas as pd \nimport glob #library for navigating file structure\nimport re #regular expressions\n\n#path to submission files\nfps = \"..\/input\/kaggle-days-top-ten-submission-files\/multiplesubmissions\/multiplesubmissions\/**\/*.csv\"\n#path to solution file\nfs = \"..\/input\/hackathon-solution\/derived.csv\"\n","4685a019":"\n#iterate through submission files and add to dataframe\nneed_to_setup_dataframe = True\nfor filename in glob.iglob(fps, recursive=True):\n\n    df_tmp = pd.read_csv(filename,index_col='id' )\n        \n    if need_to_setup_dataframe == True:\n        df_submission_files = df_tmp\n        need_to_setup_dataframe = False\n        \n    else:\n        df_submission_files = df_submission_files.join(df_tmp)   \n    \n    df_submission_files[re.search('000[0-9].*\\\/',filename)[0][5:-1]] = df_submission_files['target']\n    del(df_submission_files['target'])\n    \n\n","cf805058":"#Read in solution file and \ndf_solution = pd.read_csv(fs,index_col='id')\n\n","2f057c2e":"df_submission_files = df_submission_files.reindex(sorted(df_submission_files.columns), axis=1)\ndf_submission_files= df_submission_files.join(df_solution['Usage'])\n\ndf_submission_files = df_submission_files[df_submission_files['Usage'] == 'Private']\ndf_solution = df_solution[df_solution['Usage'] == 'Private']\n\ndel(df_submission_files['Usage'])\n","181d0b0c":"df_submission_files.columns = ['9hr Overfitness','ALDAPOP','Arno Candel @ H2O.ai','Erin (H2O AutoML 100 mins)','Erkut & Mark','Google AutoML','Shlandryn','Sweet Deal']","03c04dbf":"#calculate AUC to replicate leaderboard and try a few ensembles\nfrom sklearn import metrics\n\ndf_ensemble_results = pd.DataFrame(columns=['team','score'])\n\nfor team in df_submission_files.columns:\n    fpr, tpr, thresholds = metrics.roc_curve(df_solution['target'],df_submission_files[team])\n    df_ensemble_results = df_ensemble_results.append({'team':team,\"score\":metrics.auc(fpr,tpr)},ignore_index=True)\n\n","934d8c0b":"fpr, tpr, thresholds = metrics.roc_curve(df_solution['target'],df_submission_files[['Erkut & Mark','Google AutoML','Sweet Deal']].mean(axis=1)\n)\ndf_ensemble_results = df_ensemble_results.append({'team':'Erkut & Mark,Google AutoML,Sweet Deal',\"score\":metrics.auc(fpr,tpr)},ignore_index=True)\n\nfpr, tpr, thresholds = metrics.roc_curve(df_solution['target'],df_submission_files[['Erkut & Mark','Google AutoML']].mean(axis=1)\n)\ndf_ensemble_results = df_ensemble_results.append({'team':'Erkut & Mark,Google AutoML',\"score\":metrics.auc(fpr,tpr)},ignore_index=True)\n","bac661e9":"#Display leaderboard\ndf_ensemble_results.index = df_ensemble_results['team'] \ndel(df_ensemble_results['team'] )\ndf_ensemble_results.sort_values(by='score',ascending=False)","6b18c425":"### Create a few ensembles by average the submission files for the top two teams and top three teams\n","cd1d6b0c":"### Load the solution file into a dataframe","b2e29353":"### Select the private leaderboard rows ","7d484b9f":"### Display the leaderboard adding in the scores for the ensembles","b94a2325":"### Calculate AUC for the top eight teams\nDoing this as a sanity check to make sure I match the private leaderboard scores","5d059749":"### Load the top performing submission files into a Dataframe","86c7c997":"### Name teams so they match the team names on the leaderboard"}}