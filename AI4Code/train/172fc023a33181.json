{"cell_type":{"96fda2f5":"code","4093dc24":"code","0922b025":"code","568b0383":"code","d1d0903e":"code","84947acf":"code","393483c1":"code","426ff312":"code","e541984b":"code","d54a0c56":"code","34c32a33":"code","3aa76f7c":"code","80c29db4":"code","a32502ba":"code","1dc318fe":"code","d14f7d41":"code","f3aee128":"code","be290b67":"code","3fa78bcb":"code","5a3f751f":"code","c365af5d":"code","a1ccf553":"code","c1f30c15":"code","386c5649":"code","2734f8ea":"markdown","92fb4820":"markdown","21d7c160":"markdown","ec7931f1":"markdown","e4942bdd":"markdown","a37a3b82":"markdown","9eb24080":"markdown","3f07bcff":"markdown","c46729da":"markdown","a626282f":"markdown","39c011e3":"markdown"},"source":{"96fda2f5":"import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import OneHotEncoder\nimport tensorflow as tf\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score, accuracy_score, confusion_matrix, classification_report, precision_recall_curve\n\nsns.set()","4093dc24":"TRAIN_PATH = '..\/input\/exercise3-dataset\/utensils\/utensils_train.csv'\nTEST_PATH = '..\/input\/exercise3-dataset\/utensils\/utensils_test.csv'\nCKPT_DIR='checkpoints\/vgg_16_ckpts_{epoch:03d}.ckpt'\nBEST_DIR='checkpoints\/vgg_16_best.ckpt'","0922b025":"df_train = pd.read_csv(TRAIN_PATH)\ndf_test = pd.read_csv(TEST_PATH)\ndf_train.head()","568b0383":"df_test.head()","d1d0903e":"train_y = df_train['Label'].values\ntest_y = df_test['Label'].values\ntrain_y[:5]","84947acf":"test_y[:5]","393483c1":"train_y_encoder = OneHotEncoder(sparse=False)\ntrain_y_encoded = train_y_encoder.fit_transform(train_y.reshape(-1, 1))\ntest_y_encoded = train_y_encoder.transform(test_y.reshape(-1, 1))\ntrain_y_encoded[:5]","426ff312":"test_y_encoded[:5]","e541984b":"train_X = df_train.drop('Label', axis=1).values\ntest_X = df_test.drop('Label', axis=1).values\ntrain_X = train_X.reshape(-1, 28, 28, 1)\ntest_X = test_X.reshape(-1, 28, 28, 1)","d54a0c56":"for i in range(10):\n    plt.imshow(train_X[i].reshape(28, 28))\n    plt.show()\n    print('Label:', train_y[i])","34c32a33":"input_ = tf.keras.Input((28, 28, 1))\nconv1 = tf.keras.layers.Conv2D(8, (4, 4), activation='relu')(input_)\nconv2 = tf.keras.layers.Conv2D(8, (4, 4), activation='relu')(conv1)\nmp1 = tf.keras.layers.MaxPool2D((2,2))(conv2)\nconv3 = tf.keras.layers.Conv2D(8, (4, 4), activation='relu')(mp1)\nconv4 = tf.keras.layers.Conv2D(8, (4, 4), activation='relu')(conv3)\nconv5 = tf.keras.layers.Conv2D(8, (4, 4), activation='relu')(conv4)\nmp2 = tf.keras.layers.MaxPool2D((2,2))(conv5)\nfl = tf.keras.layers.Flatten()(mp2)\ndense1 = tf.keras.layers.Dense(8, activation='relu')(fl)\ndense2 = tf.keras.layers.Dense(8, activation='relu')(dense1)\noutput = tf.keras.layers.Dense(3, activation='softmax')(dense2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","3aa76f7c":"model.compile('adam', 'categorical_crossentropy')","80c29db4":"tf.keras.utils.plot_model(model)","a32502ba":"es = tf.keras.callbacks.EarlyStopping(patience=20)\nos.makedirs(os.path.dirname(CKPT_DIR), exist_ok=True)\nos.makedirs(os.path.dirname(BEST_DIR), exist_ok=True)\nmc = tf.keras.callbacks.ModelCheckpoint(CKPT_DIR)\nbm = tf.keras.callbacks.ModelCheckpoint(BEST_DIR, save_best_only=True)\nhst = model.fit(\n    train_X,\n    train_y_encoded,\n    steps_per_epoch=5,\n    epochs=20,\n    callbacks=[es, mc, bm],\n    validation_steps=1,\n    max_queue_size=1\n)","1dc318fe":"!ls checkpoints\/","d14f7d41":"model.save(BEST_DIR)","f3aee128":"best_model = tf.keras.models.load_model(BEST_DIR)\ntest_y_pred = best_model.predict(test_X)","be290b67":"pr, r, thr = precision_recall_curve(test_y_encoded.argmax(axis=1), test_y_pred.argmax(axis=1), pos_label=0)","3fa78bcb":"thr, pr, r","5a3f751f":"plt.plot(thr, pr[:-1])\nplt.plot(thr, r[:-1])\nplt.show()","c365af5d":"threshold = 0.34","a1ccf553":"accuracy_score(test_y_encoded > threshold, test_y_pred > threshold)","c1f30c15":"print(classification_report(test_y_encoded > threshold, test_y_pred > threshold, zero_division=1))","386c5649":"sns.heatmap(confusion_matrix(test_y_encoded.argmax(axis=1) > threshold, test_y_pred.argmax(axis=1) > threshold), annot=True)\nplt.ylabel('True')\nplt.xlabel('Pred')\nplt.show()","2734f8ea":"### Import all the needed modules","92fb4820":"# **Exercise 3**","21d7c160":"### Convert the labels to one-hot encoding","ec7931f1":"### Load the training dataset and view the first few rows","e4942bdd":"### Fit the model using the training data","a37a3b82":"### Verify the images","9eb24080":"### Define paths for the data location and the place to save the model","3f07bcff":"### Remove the labels in the set of our input features","c46729da":"### Create a Keras model for training","a626282f":"### Save best model","39c011e3":"### Predict the result using the best model"}}