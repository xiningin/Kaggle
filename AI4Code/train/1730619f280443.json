{"cell_type":{"9f62a582":"code","8c5f2505":"code","9af42f8e":"code","babb1568":"code","31d6b890":"code","0b67520e":"code","3b6705b3":"code","3ef430e3":"markdown","dcc22947":"markdown","6736ab66":"markdown","a5d6e809":"markdown","fe254267":"markdown","2a9c8391":"markdown","f744e804":"markdown"},"source":{"9f62a582":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nplt.style.use('fivethirtyeight')\n\ndf = pd.read_csv('..\/input\/indian-food-101\/indian_food.csv')\nprint(list(df.columns))","8c5f2505":"def states_in_stacked_bar():\n    dt = df[['course', 'state']]\n    fr = pd.DataFrame()\n    for st in dt.state.unique():\n        st_df = dt[dt.state == st]\n        for cr in dt.course.unique():\n            fr.loc[st,cr] = len(st_df[st_df['course'] == cr])\n    fr['total'] = fr.sum(axis=1)\n    fr.sort_values('total', ascending=False, inplace=True)\n    fr.drop('-1', inplace=True)\n    fr = fr.iloc[:15,:]\n    #print(fr)\n    ax, fig = plt.subplots(figsize=(10,6))\n    plt.barh(fr.index, fr.dessert, label='Desserts({})'.format(int(fr.dessert.sum())))\n    plt.barh(fr.index, fr['main course'], left=fr.dessert, label='Main Course({})'.format(int(fr['main course'].sum())))\n    plt.barh(fr.index, fr.starter, left=fr.dessert+fr['main course'], label='Starters({})'.format(int(fr['starter'].sum())))\n    plt.barh(fr.index, fr.snack, left=fr.dessert+fr['main course']+fr.starter, label='Snacks({})'.format(int(fr['snack'].sum())))\n    plt.title('Most number of dishes (Top 15 states)\\n')\n    plt.grid(b=None, axis='y')\n    plt.gca().invert_yaxis()\n    plt.gca().xaxis.tick_top()\n    plt.subplots_adjust(left=0.174, bottom=0.015, right=0.97, top=0.774, wspace=0.2, hspace=0.2)\n    plt.legend()\n    plt.show()\n\nstates_in_stacked_bar()","9af42f8e":"def course_time_bar():\n    fr = df[['prep_time', 'cook_time', 'course']]\n    fr = fr.replace(to_replace='-1', value=pd.NaT)\n    fr.dropna(inplace=True)\n    dsrt = fr[fr['course'] == 'dessert']\n    mncr = fr[fr['course'] == 'main course']\n    strt = fr[fr['course'] == 'starter']\n    snck = fr[fr['course'] == 'snack']\n\n    ptime, ctime = [], []\n    for series in [dsrt, mncr, strt, snck]:\n        ptime.append(series.prep_time.sum()\/len(series))\n        ctime.append((series.cook_time.sum())\/len(series))\n    #print(dsrt, mncr, strt, snck)\n   \n    fig, axes = plt.subplots(figsize=(6,6))\n    ax1 = plt.subplot2grid((1,1),(0,0), rowspan=1, colspan=1)\n    plt.title('Average time (in minutes)')\n\n    ax1.bar(['Dessert', 'Main course', 'Starter', 'Snack'], ptime, label='Preparation time')\n    ax1.bar(['Dessert', 'Main course', 'Starter', 'Snack'], ctime, bottom=ptime, label='Cook time')\n    for p in ax1.patches:\n        width = p.get_width()\n        height = p.get_height()\n        x, y = p.get_xy() \n        ax1.annotate(f'{int(height)}', (x + width\/2, y + height\/2), ha='center')\n    ax1.set(yticklabels=[])\n    plt.subplots_adjust(left=0.08, bottom=0.1, right=0.95, top=0.92, wspace=0.2, hspace=0.1)\n    plt.grid(False)\n    plt.legend()\n    plt.show()\n\ncourse_time_bar()","babb1568":"def region_pie():\n    fr = df[['diet', 'flavor_profile', 'region']]\n    fr = fr.replace(to_replace='-1', value=pd.NaT)\n    fr.dropna(inplace=True)\n    \n    sweet = fr[fr['flavor_profile'] == 'sweet']\n    spicy = fr[fr['flavor_profile'] == 'spicy']\n    vdiet = fr[fr['diet'] == 'vegetarian']\n    ndiet = fr[fr['diet'] == 'non vegetarian']\n\n    regions = ['North', 'East', 'West', 'South']\n    sprofile, cprofile, veg, nveg = [], [], [], []\n\n    for rgn in regions:\n        sprofile.append(len(sweet[sweet['region'] == rgn]))\n        cprofile.append(len(spicy[spicy['region'] == rgn]))\n        veg.append(len(vdiet[vdiet['region'] == rgn]))\n        nveg.append(len(ndiet[ndiet['region'] == rgn]))\n\n    fig, axes = plt.subplots(figsize=(8,8))\n    ax1 = plt.subplot2grid((2,2), (0,0), rowspan=1, colspan=1)\n    plt.title('Sweet dishes by region')\n    ax2 = plt.subplot2grid((2,2), (0,1), rowspan=1, colspan=1)\n    plt.title('Spicy dishes by region')\n    ax3 = plt.subplot2grid((2,2), (1,0), rowspan=1, colspan=1)\n    plt.title('Veg dishes by region')\n    ax4 = plt.subplot2grid((2,2), (1,1), rowspan=1, colspan=1)\n    plt.title('Non-veg dishes by region')\n\n    ax1.pie(sprofile, labels=regions, autopct='%1.1f%%', startangle=15, shadow = True)\n    ax2.pie(cprofile, labels=regions, autopct='%1.1f%%', startangle=15, shadow = True)\n    ax3.pie(veg, labels=regions, autopct='%1.1f%%', startangle=15, shadow = True)\n    ax4.pie(nveg, labels=regions, autopct='%1.1f%%', startangle=15, shadow = True)\n\n    plt.subplots_adjust(left=0.08, bottom=0, right=0.945, top=0.962, wspace=0.312, hspace=0.0)\n    plt.show()\n\nregion_pie()","31d6b890":"def ingredients_cloud():\n    #ingr_hist = {}\n    all_ingrs = ''\n\n    for row in df['ingredients'].iteritems():\n        ingrs = row[1].split(',')\n        for ingr in ingrs:\n            all_ingrs = all_ingrs + ' ' + ingr\n\n    wordcloud = WordCloud(width=720, height=720, max_words=50, background_color='white').generate(all_ingrs)\n    plt.figure(figsize=(8,8)) \n    plt.imshow(wordcloud, interpolation=\"bilinear\") \n    plt.axis(\"off\") \n    plt.margins(x=0, y=0) \n    plt.show()\n\ningredients_cloud()","0b67520e":"def fastest_dish():\n    fr = df[['name', 'prep_time', 'cook_time', 'course']]\n    fr = fr.replace(to_replace=-1, value=pd.NaT)\n    fr.dropna(inplace=True)\n    fr['total'] = fr.sum(1)\n    fr.sort_values('total', ascending=True, inplace=True)\n    top5snack = fr[fr['course'] == 'snack'][:5]\n    top5dessert = fr[fr['course'] == 'dessert'][:5]\n    top5main = fr[fr['course'] == 'main course'][:5]\n\n    fast_dish = top5snack.append(top5dessert)\n    fast_dish = fast_dish.append(top5main)\n    fast_dish.sort_values('total', inplace=True)\n    # print(fast_dish)\n\n    fig, axes = plt.subplots(figsize=(10,6))\n    plt.barh(fast_dish.name, fast_dish.prep_time, label='Preparing (min)')\n    plt.barh(fast_dish.name, fast_dish.cook_time, left=fast_dish.prep_time, label='Cooking (min)')\n    plt.grid(b=None, axis='y')\n    plt.gca().invert_yaxis()\n    plt.gca().xaxis.tick_top()\n    plt.subplots_adjust(left=0.174, bottom=0.015, right=0.97, top=0.774, wspace=0.2, hspace=0.2)\n    plt.title('Quickest dishes to make (5 from each course)\\n')\n    plt.legend()\n    plt.show()\n\nfastest_dish()","3b6705b3":"def common_dishes():\n    fr = df[['name', 'ingredients']]\n    similar, dish_1, dish_2, common_ingredients = [], [], [], []\n    x = 0.7\n\n    for dish1 in fr.itertuples():\n        ingr1 = []\n        ingr1 = dish1[2].split(', ')\n        for dish2 in fr.itertuples():\n            ingr2, common_ingr = [], []\n            if dish1[1] == dish2[1]:\n                #print('skipped {}'.format(dish2[1]))\n                continue\n            else:\n                ingr2 = dish2[2].split(', ')\n                if len(ingr1) > len(ingr2):\n                    for i in ingr1:\n                        if i in ingr2:\n                            common_ingr.append(i)\n                    if len(common_ingr) > 0:\n                        if (len(common_ingr)\/len(ingr1)) > x and (len(common_ingr)\/len(ingr2)) > x:\n                            if ([dish1[1], dish2[1]] and [dish2[1], dish1[1]]) not in similar:\n                                similar.append([dish1[1], dish2[1]])\n                                dish_1.append(dish1[1])\n                                dish_2.append(dish2[1])\n                                common_ingredients.append(common_ingr)\n                                #print('{}--{}--> COMMON INGREDIENTS: {}'.format(dish1[1], dish2[1], common_ingr))\n                                #print('common ingr: {}, total: {},{}'.format(len(common_ingr), len(ingr1), len(ingr2)))\n                else:\n                    for i in ingr2:\n                        if i in ingr1:\n                            common_ingr.append(i)\n                    if len(common_ingr) > 0:\n                        if (len(common_ingr)\/len(ingr2)) > x and (len(common_ingr)\/len(ingr1)) > x:\n                            if ([dish1[1], dish2[1]] and [dish2[1], dish1[1]]) not in similar:\n                                similar.append([dish1[1], dish2[1]])\n                                dish_1.append(dish1[1])\n                                dish_2.append(dish2[1])\n                                common_ingredients.append(common_ingr)\n                                #print('{}--{}--> COMMON INGREDIENTS: {}'.format(dish1[1], dish2[1], common_ingr))\n                                #print('common ingr: {}, total: {},{}'.format(len(common_ingr), len(ingr2), len(ingr1)))\n    \n    same_dishes = pd.DataFrame(data={'dish_1': dish_1, 'dish_2': dish_2,\n                                     'common_ingredients': common_ingredients})\n    print(same_dishes)\n    #print(similar)\n\ncommon_dishes()","3ef430e3":"## Getting to know data:\nIt is important to know the data before processing it. Here is the all column names available in the dataset. I will try in the following cells to extract useful information as much as I can.","dcc22947":"## Ingredients wordcloud:\nMost used ingredients in Indina dishes are 'sugar, milk, garam masala, rice, urad dal, ginger, coconut'.","6736ab66":"## Regional breakdown:\nFollowing pie charts shows:\n* Northern region has least sweet dishes.\n* Western region is leading in both sweet and spicy dishes. (This might be because of data has more dishes from western states.)\n* East Indians eat very few spicy dishes.\n* Most vegetarian dishes are from west and Non-vegetarian dishes are from north.\n* Southern region has more or less even distribution of all four kinds of dishes.","a5d6e809":"Here I have made a stacked bar chart of number of dishes and from a state.\nStacking different *course* type of dishes helps to understand the dataset in more detail.","fe254267":"## Relation of average preparation time, cook time with course:\nFrom the bar chart shown below, it is evident that on an average starter takes highest time to prepare.\nDessert takes more time to cook than to prepare on the contrary, average snack takes longer to prepare than to cook.\nOn an average main course is quickest to prepare.\n","2a9c8391":"## Dishes with similar ingredients:\nI processed the data and filtered out the dishes that has highest common ingredients. It is fasinating to see dishes (i.e., Kheer-Doodhpak, Sandesh-Shrikhand, Pattor-Patra) from distant states has almost same ingredients but different name.","f744e804":"## Quickest dishes:\nI have sorted out the dishes on the basis of total making time. Stacked bar chart shows the 15 quickest dishes (5 from each course except snack) to make."}}