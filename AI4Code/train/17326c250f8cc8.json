{"cell_type":{"b5d8f1e2":"code","acccaf3e":"code","e2613ac3":"code","0ca18f7b":"code","4962e84e":"code","19b9f62f":"code","df04299a":"code","190a5d26":"code","d99ea970":"code","a61ebf74":"code","cc173d00":"code","4c9a6586":"code","b026a7cf":"code","71eb858d":"code","774d2145":"code","183195b3":"code","eb191aa7":"code","64859168":"code","4e541393":"code","7c361806":"code","28688a3c":"code","551ebea3":"code","9c7dd2be":"code","e8fe4896":"code","c4557efc":"code","0743377d":"code","84fe7d89":"code","95f11d21":"code","eac54874":"code","8d30bcc7":"code","c622ff08":"code","f17ee624":"code","4b1ccb26":"code","e5829aad":"code","7577010b":"code","a436b5ff":"code","8ad94fd1":"code","31bcff08":"code","a44d44dd":"code","60ce90e5":"code","1d5f5197":"code","3e595809":"code","63c3bd8f":"code","1c697399":"code","6ece86b1":"code","02365962":"code","990f436b":"code","7bdb576d":"code","6ea584cf":"code","b736be0e":"code","38ff8faf":"code","324df35b":"code","a2560ffe":"code","87f376d0":"markdown","aac790cb":"markdown","e8b0d67b":"markdown","17d685d0":"markdown","c5cfe3f8":"markdown","47d8b313":"markdown","edf97c79":"markdown","d1fe9190":"markdown","43405e4a":"markdown","253e8da1":"markdown","9931f13e":"markdown","63adf116":"markdown","35c10f74":"markdown","a8e5d517":"markdown","ca91c39c":"markdown","7bfb9dd8":"markdown","cef58b9d":"markdown","f7183337":"markdown","5e349444":"markdown","005fab46":"markdown","3893551c":"markdown","fbd96be0":"markdown","f5bca684":"markdown","4ebfbb14":"markdown","ce40fd69":"markdown"},"source":{"b5d8f1e2":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score","acccaf3e":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e2613ac3":"df_train.columns","0ca18f7b":"df_train.dtypes.array","4962e84e":"sns.distplot(df_train['SalePrice'] , fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","19b9f62f":"df_train[\"SalePrice\"] = np.log1p(df_train[\"SalePrice\"])","df04299a":"sns.distplot(df_train['SalePrice'] , fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)\nplt.show()","190a5d26":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","d99ea970":"sns.pairplot(df_train[[\"SalePrice\", 'GrLivArea']])","a61ebf74":"df_train.drop(df_train[(df_train['GrLivArea']>4000) & (df_train['SalePrice']<300000)].index, inplace=True)","cc173d00":"corrmat = df_train.corr()","4c9a6586":"k = 10\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, \n                 square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","b026a7cf":"target = df_train.SalePrice.copy()","71eb858d":"df = pd.concat((df_train, df_test)).reset_index(drop=True)\ndf.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(df.shape))","774d2145":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","183195b3":"for col in [\"PoolQC\", \"MiscFeature\", \"Alley\", \"Fence\", \"FireplaceQu\"] :\n    df[col] = df[col].fillna(\"No\")","eb191aa7":"for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    df[col] = df[col].fillna('No')","64859168":"for col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    df[col] = df[col].fillna(0)","4e541393":"for col in ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath']:\n    df[col] = df[col].fillna(0)","7c361806":"for col in ['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2']:\n    df[col] = df[col].fillna('No')","28688a3c":"df[\"MasVnrType\"] = df[\"MasVnrType\"].fillna(\"None\")\ndf[\"MasVnrArea\"] = df[\"MasVnrArea\"].fillna(0)","551ebea3":"df.MSZoning.hist()","9c7dd2be":"df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])","e8fe4896":"df[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")","c4557efc":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","0743377d":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum() \/ df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","84fe7d89":"df['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])","95f11d21":"df['MSSubClass'] = df['MSSubClass'].fillna(\"No\")\ndf['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\ndf['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])","eac54874":"df.drop([\"Utilities\"], axis=1, inplace=True)","8d30bcc7":"for col in [\"MSSubClass\", \"OverallCond\", \"YrSold\", \"MoSold\"]:\n    df[col] = df[col].apply(str)","c622ff08":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))","f17ee624":"numeric_feats = df.dtypes[df.dtypes != \"object\"].index\nskewed_feats = df[numeric_feats].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' : skewed_feats})\nskewness.head(10)","4b1ccb26":"skewed_features = skewness.index\nlam = 0.15\nfor col in skewed_features:\n    df[col] = boxcox1p(df[col], lam)","e5829aad":"df.drop([\"Id\"], axis=1, inplace=True)","7577010b":"df = pd.get_dummies(df)","a436b5ff":"train = df[:df_train.shape[0]]\ntest = df[df_train.shape[0]:]","8ad94fd1":"num_vars = train.select_dtypes(include=['int64','float64']).columns","31bcff08":"scaler = StandardScaler()\ntrain[num_vars] = scaler.fit_transform(train[num_vars])\ntest[num_vars] = scaler.transform(test[num_vars])","a44d44dd":"X_train, X_test, y_train, y_test = train_test_split(train, target, test_size=0.2, random_state=42)","60ce90e5":"params = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n                 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n                 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100]\n         }\n\n\nridge = Ridge()\n\nfolds = 5\nmodel_cv = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)    \n\nmodel_cv.fit(X_train, y_train) ","1d5f5197":"ridge = model_cv.best_estimator_","3e595809":"y_train_pred_ridge = ridge.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_ridge))","63c3bd8f":"y_test_pred_ridge = ridge.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_ridge))","1c697399":"print ('RMSE Validation is: \\n', mean_squared_error(y_test, y_test_pred_ridge))","6ece86b1":"params = {'alpha': [0.00005, 0.0001, 0.001, 0.008, 0.01]}\nlasso = Lasso()\n\nmodel_cv_l = GridSearchCV(estimator = lasso, \n                        param_grid = params, \n                        scoring= 'neg_mean_squared_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \n\nmodel_cv_l.fit(X_train, y_train)","02365962":"lasso = model_cv_l.best_estimator_","990f436b":"y_train_pred_lasso = lasso.predict(X_train)\nprint(r2_score(y_true=y_train, y_pred=y_train_pred_lasso))","7bdb576d":"y_test_pred_lasso = lasso.predict(X_test)\nprint(r2_score(y_true=y_test, y_pred=y_test_pred_lasso))","6ea584cf":"print ('RMSE Validation is: \\n', mean_squared_error(y_test, y_test_pred_lasso))","b736be0e":"preds = np.exp(ridge.predict(test))","38ff8faf":"predictions = pd.DataFrame({'Id': df_test['Id'] ,'SalePrice': preds })","324df35b":"predictions.to_csv(\"preds.csv\",index=False)","a2560ffe":"predictions.SalePrice","87f376d0":"### Preparing submission:","aac790cb":"- Applying one of the most powerfull transformation methods `Box-Cox transformation`","e8b0d67b":"---\n##### Data Wrangling, Exploration and EDA","17d685d0":"### Trying Lasso Regression","c5cfe3f8":"- the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , i can fill the missing values by the median LotFrontage of the neighborhood.","47d8b313":"- The Target Variable is'nt normally distributed. It needs to be transformed using logarithmic transform","edf97c79":"- I'm going to fill the `MSZoning` with `RL` the most frequent value.","d1fe9190":"---\n\n### Training Models:","43405e4a":"- #### The Paireplot helps me to distinguish the distribution of variable itself, and the relationships among variables.\n---","253e8da1":"- Ordinal Encoding for those variables:","9931f13e":"- The Remaining features has only 1 or 2 Na values, so i dropped them.","63adf116":"- it appeares that the missing value in `Functional` has the value Typical","35c10f74":"- Removing OutLiers","a8e5d517":"---\nApplying One-Hot Encoding:","ca91c39c":"---\n##### Changing the dtypes & encoding","7bfb9dd8":"---\n\n<center> <h1> House Prices - Advanced Regression Techniques <\/h1> <\/center>\n<br>\n\n---\n","cef58b9d":"---\n\n##### Missing Data:\n\n- I need to inspect each variable and read its description in order to determine the Imputing type.","f7183337":"---\n### Trying  Ridge Regression:","5e349444":"- Check Skewness:","005fab46":"##### Imputing Missing data:","3893551c":"---\n\n### Exploring the target variable:","fbd96be0":"- for those columns, it appeares in the description that it has the `No` value, which means as an examble the house doesn't have a Pool or Alley.\n\n- for the numerical variables, specifically when it comes to the `garage`, if the house has no garage i will impute it relevent variables with 0. Same for `Basement`.\n\n- `MasVnrArea` and `MasVnrType` : NA most likely means no masonry veneer for these houses. ","f5bca684":"---\nI'm going to inspect the meaning of every feature Philosophically, In order to get an intuition about the importance of every feature related to this problem.\n- OverallQual.\n- YearBuilt.\n- TotalBsmtSF.\n- GrLivArea.\n- GarageCars.\n- FullBath\nI think this Variables are going to be Important, ","4ebfbb14":"----","ce40fd69":"---"}}