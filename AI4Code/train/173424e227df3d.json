{"cell_type":{"d2dfb6e0":"code","7d9b2f43":"code","807036b5":"code","27286b82":"code","00bb3e7d":"code","33094f20":"code","fd0877ce":"code","f4f981b8":"code","721490de":"code","5908e52f":"markdown","d075e4b4":"markdown","99344f09":"markdown","92c800cd":"markdown","77c743e7":"markdown","d8c29b77":"markdown","5bb3a4f5":"markdown"},"source":{"d2dfb6e0":"import pickle\nimport string\nimport pandas as pd\n\n# API client library\nimport googleapiclient.discovery","7d9b2f43":"def save_data(data, filename):\n    \"\"\" Save data to file using pickle \"\"\"\n\n    pickle.dump(data, open(filename, \"wb\"))","807036b5":"def get_video_info_by_id(video_id, youtube, return_list=False):\n    \"\"\" \n    Get information about a video using YouTube Data API v3. \n    Parse the following information:\n        video_id (str) - video id\n        title (str) - video title\n        description (str) - video description\n        channelId (str) - channel id\n        channelTitle (str) - channel title\n        publishedAt (str) - video publication date\n        tags (str) - tags if author specified, else \" \" or empty list\n        viewCount (int) - number of views\n        likeCount (int) - number of likes\n        dislikeCount (int) - number of dislikes\n        commentCount (int) - number of comments\n        comments (str) - 20 video comments\n\n    Parameters:\n        video_id (str): YouTube video id\n        youtube: googleapiclient.discovery.build object\n        return_list (bool): If True, tags and comments are returned as lists of string\n                            If False - as one concatenated string\n\n    Returns:\n        list, containing all items in the same order OR None in cases:\n            if video_id is invalid or if comments are turned off\n    \"\"\"\n\n    # youtube request for information about video\n    request = youtube.videos().list(\n        part=\"snippet, statistics\",\n        id=video_id)\n    response = request.execute()\n\n    if not response['items']:\n        # empty list - video isn't available anymore\n        return None\n\n    # public fields that are 100% availible\n    publishedAt = response['items'][0]['snippet']['publishedAt']\n    channelId = response['items'][0]['snippet']['channelId']\n    title = response['items'][0]['snippet']['title']\n    description = response['items'][0]['snippet']['description']\n    channelTitle = response['items'][0]['snippet']['channelTitle']\n\n    # next fields can be hidden\n    try:\n        viewCount = int(response['items'][0]['statistics']['viewCount'])\n    except KeyError:\n        viewCount = None\n\n    try:\n        likeCount = int(response['items'][0]['statistics']['likeCount'])\n    except KeyError:\n        likeCount = None\n\n    # is private from 13 December 2021\n    try:\n        dislikeCount = int(response['items'][0]['statistics']['dislikeCount'])\n    except KeyError:\n        dislikeCount = None\n\n    # tags are unavailable if author didn't specify them\n    try:\n        tags_list = response['items'][0]['snippet']['tags']\n        if return_list:\n            tags = tags_list\n        else:\n            # list to string\n            tags = ' '.join([tag for tag in tags_list])\n    except KeyError:\n        tags = None\n\n    # if commentCount is unavailible, comments are turned off\n    try:\n        commentCount = int(response['items'][0]['statistics']['commentCount'])\n    except KeyError:\n        return None\n\n    if commentCount == 0:\n        comments = []\n    else:\n        # youtube request for comments information\n        try:\n            request = youtube.commentThreads().list(\n                part=\"snippet\",\n                maxResults=20,\n                order=\"relevance\",\n                textFormat=\"plainText\",\n                videoId=video_id)\n            response = request.execute()\n        except Exception:\n            # comments are unavailable\n            return None\n\n        if return_list:\n            comments = [obj['snippet']['topLevelComment']['snippet']['textDisplay']\n                        for obj in response['items']]\n        else:\n            # list to string\n            comments = ' '.join([obj['snippet']['topLevelComment']['snippet']['textDisplay']\n                                 for obj in response['items']])\n\n    return [video_id, title, description, channelId, channelTitle,\n            publishedAt, tags, viewCount, likeCount, dislikeCount,\n            commentCount, comments]","27286b82":"def request_loop(video_ids, filename, youtube, save_iter=False):\n    \"\"\" \n    Iterate over video_ids and execute `get_video_info_by_id()` function\n    Save data to filename_{}.p file using pickle.\n\n    Parameters:\n        video_ids (list of strings): list of YouTube video ids\n        filename (str): path to file to save data using pickle\n        youtube: googleapiclient.discovery.build object \n        save_iter (bool\/int): If an integer, save data every save_iter iterations\n\n    Returns:\n        number of successful iterations (int)\n    \"\"\"\n\n    youtube_data = []\n    total = len(video_ids)\n    if not video_ids:\n        # empty list\n        return 0\n\n    for counter, video_id in enumerate(video_ids):\n        try:\n            curr = get_video_info_by_id(video_id, youtube)\n        except Exception as e:\n            print(str(e) + '\\n')\n            print(\"This is most likely Http Error 403 due to exceeded quota\")\n            print(\"To know more visit:\" +\n                  \" https:\/\/developers.google.com\/youtube\/v3\/getting-started#quota\")\n            break\n\n        # append all data in the list\n        youtube_data.append(curr)\n\n        # save data every save_iter iterations\n        if save_iter and counter != 0 and counter % save_iter == 0:\n            save_data(youtube_data, f\"{filename}_{counter+1}.p\")\n            print(f'\\tSaved in \"{filename}_{counter+1}.p\"')\n\n        print(f\"{counter+1}\/{total}: collect information about {video_id}\")\n\n    if youtube_data:\n        # if list is not empty\n        # save data in the end of the loop or if exception occurs\n        save_data(youtube_data, f\"{filename}_{counter+1}_final.p\")\n        print(f'\\tSaved in f\"{filename}_{counter+1}_final.p\"')\n\n    return counter","00bb3e7d":"def process_one_list(filename):\n    \"\"\" Read 'filename' using pickle and convert list of lists to a pd.Dataframe \"\"\"\n\n    data = pickle.load(open(filename, 'rb'))\n    data = list(filter(None, data))  # delete empty list elements\n\n    df = pd.DataFrame(data, columns=['video_id', 'title', 'description', 'channelId', 'channelTitle',\n                                     'publishedAt', 'tags',  'viewCount', 'likeCount', 'dislikeCount',\n                                     'commentCount', 'comments'])\n\n    return df","33094f20":"# API information\nAPI_SERVICE_NAME = \"youtube\"\nAPI_VERSION = \"v3\"\nDEVELOPER_KEY = 'YOUR_API_KEY' # something like 'aAAsaah3yf4fgsg5htfj3hb_fdudfd8ew0f-d0d'\n    \n# API client\nyoutube = googleapiclient.discovery.build(API_SERVICE_NAME,\n                                          API_VERSION,\n                                          developerKey=DEVELOPER_KEY)","fd0877ce":"# for the simplicity of the example, set the ID explicitly\nvideo_ids = ['s9FH4rDMvds',\n             'jbGRowa5tIk',\n             '3EfkCrXKZNs',\n             'gBjox7vn3-g',\n             'npoUGx7UW7o']","f4f981b8":"# this will create pickle .p file containing a list of 5 elements\n# each of which contains information about one video ID\nrequest_loop(video_ids, \n             \"youtube_data\",\n             youtube)","721490de":"raw_data = process_one_list(\"youtube_data_5_final.p\")\nraw_data","5908e52f":"# Imports","d075e4b4":"# Convert list of lists to dataframe","99344f09":"# Main request loop","92c800cd":"# Setting API","77c743e7":"# YouTube Dislikes Dataset Collection\n\nThis notebook contains a rough code to collect YouTube dislikes dataset using YouTube Data API v3.\n\nFirstly it is accumulated in the form list of lists using pickle, secondly - read and combined into a pandas dataframe.\n\nTo know more visit [this GitLab repo](https:\/\/gitlab.com\/Winston-90\/youtube_dislikes).","d8c29b77":"# Specify video IDs","5bb3a4f5":"# Helper functions"}}