{"cell_type":{"46a64db8":"code","4cc72af1":"code","2239b26e":"code","76ce8e98":"code","d296afa1":"code","90de189f":"code","9d1897f1":"code","dcab1de7":"code","70e9ceb2":"code","82fb86f0":"code","635e8caf":"code","9580bb9f":"code","69715959":"code","c20dc2a7":"code","36556dd0":"code","83c63ae4":"code","5868b4c0":"code","e96590ee":"code","de53ad07":"code","3992a133":"markdown"},"source":{"46a64db8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sklearn as sk\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import RandomOverSampler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cc72af1":"train = pd.read_csv('\/kaggle\/input\/it-405-dm-and-bi-2020\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/it-405-dm-and-bi-2020\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/it-405-dm-and-bi-2020\/sample_submission.csv')\n\ntarget = train[\"Target\"]\ntrain.drop([\"Id\", \"Target\"], axis=1, inplace=True)\ntest.drop([\"Id\"], axis=1, inplace=True)\n\ntrain.head()","2239b26e":"train_description = train.describe()\nprint(train_description)\n\nprint(\"\\n\")\n\ntrain_info = train.info()\nprint(train_info)\n\nprint(\"\/n\")\n\ntrain.tail()","76ce8e98":"# handling missing values\nprint(train.tail(17))\n\ntrain = train.replace('?', np.nan)\ntest = test.replace('?', np.nan)\n\ntrain.tail(17)","d296afa1":"missing_vals = train.isna().sum() \/ len(train) # get the percentage of missing values\n\nprint(missing_vals)","90de189f":"train = train.loc[:, missing_vals < 0.65]\ntest = test.loc[:, missing_vals < 0.65]","9d1897f1":"train.head()","dcab1de7":"# change missing values with mean\ntrain.fillna(train.mean(), inplace=True)\ntest.fillna(test.mean(), inplace=True)\n# Count the number of nans and print to verify\nprint(train.isnull().sum())","70e9ceb2":"for col in train.columns:\n    if train[col].dtypes == 'object':\n        train = train.fillna(train[col].value_counts().index[0])\n        \n\n        \nprint(train.isnull().sum())","82fb86f0":"# Data Preprocessing\n# import LabelEncoder\n# loop over all the vals and extract their data types\nle=LabelEncoder()\n\nfor col in train.columns.values:\n    if train[col].dtypes == \"object\":\n        train[col] = le.fit_transform(train[col])\n        \nscaler = sk.preprocessing.StandardScaler()\ntrain = scaler.fit_transform(train)","635e8caf":"randOvSamp = RandomOverSampler(random_state=0)\nx_resamp, y_resamp = randOvSamp.fit_resample(train, target)","9580bb9f":"# Split data train and test \nx_train, x_test, y_train, y_test = sk.model_selection.train_test_split(x_resamp, y_resamp, test_size=0.30, random_state=42)","69715959":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(solver='lbfgs',max_iter=1000)\n\nmodel1 = logreg.fit(x_train,y_train)\n","c20dc2a7":"from sklearn.metrics import confusion_matrix\n# Use logreg to predict instances from the test set and store it\ny_pred = model1.predict(x_test)\n# Get the accuracy score of logreg model and print it\nprint(\"Accuracy of logistic regression classifier: \", model1.score(x_test,y_test))","36556dd0":"print(\"Confusion matrix for Logistic regression\")\nconfusion_matrix(y_test,y_pred)","83c63ae4":"for col in test.columns:\n    if test[col].dtypes == 'object':\n        test = test.fillna(test[col].value_counts().index[0])\n        \n\n        \nprint(test.isnull().sum())","5868b4c0":"le=LabelEncoder()\n\nfor col in test.columns.values:\n    if test[col].dtypes == \"object\":\n        test[col] = le.fit_transform(test[col])\n        \nscaler = sk.preprocessing.StandardScaler()\ntest = scaler.fit_transform(test)","e96590ee":"sample_submission['Target'] = model1.predict_proba(test)[:,1]\nsample_submission['Target'].head(10)","de53ad07":"sample_submission.to_csv('abdullahmahmoodqureshi_final_submission_results).csv',index=False)","3992a133":"#Abdullah Mahmood Qureshi\n##20161708056"}}