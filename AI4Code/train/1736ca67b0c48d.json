{"cell_type":{"18a87cd2":"code","28f3dabb":"code","586af481":"code","73857d44":"code","2346e86f":"code","0e82720d":"code","cdc8b5e6":"code","1307043c":"code","219835ba":"code","6a1f0a2a":"code","0ea0b99f":"code","c7dc4c86":"code","2380ab65":"code","8441ea7f":"code","4d7107cd":"code","e7f9901f":"code","cf3ee829":"code","5962930e":"code","a45bebe9":"markdown","662068d7":"markdown","b841d98c":"markdown","d8b7739f":"markdown"},"source":{"18a87cd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28f3dabb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set_style(\"whitegrid\")","586af481":"filename = '..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv'\ndataset = pd.read_csv(filename)","73857d44":"dataset.info()","2346e86f":"dataset.describe()","0e82720d":"dataset[dataset['fraudulent'] == 1]","cdc8b5e6":"dataset = dataset[dataset['description'].notna()]","1307043c":"import re\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import LancasterStemmer \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import model_selection, naive_bayes\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import classification_report","219835ba":"# preprocess the text\nlancaster=LancasterStemmer() \nstop_words = stopwords.words('english')\n\ndef preprocess(text):\n    # tokenize \n    text = re.sub('[^a-zA-Z\\s]', '', text)\n    # lowercase \n    text = text.lower()\n    # removing stop word and stemming using Lancaster\n    split = text.split()\n    for word in split :\n      if word in stop_words :\n        word = ''\n      else :\n        lancaster.stem(word)\n    return ' '.join([word for word in split])\n\ndataset['description'] = dataset['description'].apply(preprocess)","6a1f0a2a":"dataset['description'].sample(10)","0ea0b99f":"# prepare train & data sets \ntrain_x, test_x, train_y, test_y = model_selection.train_test_split(dataset['description'], dataset['fraudulent'],test_size=0.2)","c7dc4c86":"# encode categories so machine can understand\nencoder = LabelEncoder()\ntrain_y = encoder.fit_transform(train_y)\ntest_y = encoder.fit_transform(test_y)","2380ab65":"# transform data to count matrix\nMAX = 3000 # after many trials, we landed on this number. also, because we love th\u1ea7y Minh 3000 <3\nvectorizer = TfidfVectorizer(max_features = MAX)\nvectorizer.fit(train_x)\n\n# vectorize train and test sets\ntrain_x_vec = vectorizer.transform(train_x)\ntest_x_vec = vectorizer.transform(test_x)","8441ea7f":"from sklearn.linear_model import LogisticRegression\n\n# fit data using logistic regression\nlog_regress = LogisticRegression()\nlog_regress.fit(train_x_vec, train_y)\n\n# predict output of the test data set\npredicted = log_regress.predict(test_x_vec)\n\n# get accuracy\nprint(\"accuracy score of Logistic Regression:\", accuracy_score(predicted, test_y), \"\\n\")\n\n# creating a confusion matrix \ncm = confusion_matrix(test_y, predicted)\nprint(\"confusion matrix of Logistic Regression:\\n\", cm, \"\\n\")\n\n# create a classifcation report\nprint(\"classification report:\\n\", classification_report(test_y, predicted), \"\\n\")","4d7107cd":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\n# cross validation to find best n_neighbors\n\nval_error_rate = []\nneighbors_range = range(1,100,2)\n\nfor i in neighbors_range:\n    knn = KNeighborsClassifier(n_neighbors=i, weights='distance')\n    val_error = 1 - cross_val_score(knn, train_x_vec, train_y, cv=5).mean()\n    val_error_rate.append(val_error)\n    \nplt.figure(figsize=(15,7))\nplt.plot(neighbors_range, val_error_rate, color='orange', linestyle='dashed', marker='o',\n         markerfacecolor='black', markersize=5, label='Validation Error')\n\nplt.xticks(np.arange(neighbors_range.start, neighbors_range.stop, neighbors_range.step), rotation=45)\nplt.grid()\nplt.legend()\nplt.title('Validation Error vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Validation Error')\nplt.show()\n","e7f9901f":"N_NEIGHBORS = 37\n\n# fit data using KNN\nknn = KNeighborsClassifier(n_neighbors = N_NEIGHBORS, weights='distance')\nknn.fit(train_x_vec, train_y)\n\n# predict output of the test data set\npredicted = knn.predict(test_x_vec)\n\n# get accuracy\nprint(\"accuracy score of KNN, k = {k}: {asc}\".format(k = N_NEIGHBORS, asc = accuracy_score(predicted, test_y)), \"\\n\")\n\n# creating a confusion matrix \ncm = confusion_matrix(test_y, predicted)\nprint(\"confusion matrix of KNN:\\n\", cm, \"\\n\")\n\n# create a classifcation report\nprint(\"classification report:\\n\", classification_report(test_y, predicted), \"\\n\")","cf3ee829":"from sklearn.svm import SVC\n\n# fit data using SVC\nsvc = SVC(kernel='rbf')\nsvc.fit(train_x_vec, train_y)\n\n# predict output of the test data set\npredicted = svc.predict(test_x_vec)\n\n# get accuracy\nprint(\"accuracy score of Support Vector Machine:\", accuracy_score(predicted, test_y), \"\\n\")\n\n# creating a confusion matrix \ncm = confusion_matrix(test_y, predicted)\nprint(\"confusion matrix of SVM:\\n\", cm, \"\\n\")\n\n# create a classifcation report\nprint(\"classification report:\\n\", classification_report(test_y, predicted), \"\\n\")","5962930e":"models = [\n  LogisticRegression(),\n  KNeighborsClassifier(n_neighbors = N_NEIGHBORS, weights='distance'),\n  SVC(kernel='rbf')\n]\n\nfor model in models:\n  accuracy = cross_val_score(model, train_x_vec, train_y, scoring='accuracy', cv=5).mean()\n  print(model.__class__.__name__, ':', accuracy)","a45bebe9":"**TEXT CLASSIFICATION WITH KNN**","662068d7":"**TEXT CLASSIFICATION WITH RBF-KERNEL SUPPORT VECTOR MACHINE**","b841d98c":"**COMPARING MODELS BY CROSS VALIDATION**","d8b7739f":"**Preprocess data**"}}