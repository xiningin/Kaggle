{"cell_type":{"2bc3f8ff":"code","b77916a9":"code","60fdfd8e":"code","0a6a5570":"code","d9189a3d":"code","14cd09d5":"code","2bfd9f29":"code","9e4a8159":"code","516d384a":"code","5596a752":"code","b61c1a33":"markdown","1f86aa32":"markdown","a8eb57c6":"markdown","c4590ae1":"markdown","df385b26":"markdown","3fcecd9b":"markdown","326d3b4f":"markdown","00870638":"markdown","d4a1b0d5":"markdown"},"source":{"2bc3f8ff":"from urllib.request import urlretrieve\nimport pandas as pd\nimport numpy as np\nimport json\nimport time\nfrom datetime import datetime, timezone\nfrom IPython.display import HTML, Video\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning) ","b77916a9":"leaderboard_df = pd.read_csv(\"..\/input\/rpssanta20-leaderboard\/santa_leaderboard.csv\")\nleaderboard_temp = leaderboard_df[leaderboard_df['time']== leaderboard_df['time'].max()].reset_index(drop=True)","60fdfd8e":"leaderboard_df.head()","0a6a5570":"### Reshape dataset\ndf = pd.DataFrame(columns=leaderboard_df['team_id'].sort_values().unique(), index=leaderboard_df['time'].sort_values().unique())\nfor t in leaderboard_df['time'].unique():\n    df.loc[t] = leaderboard_df[leaderboard_df['time'] == t].sort_values('team_id')['score'].tolist()\ndf = df.astype('float')\ndf = df.reset_index().rename(columns = {'index':'date'})","d9189a3d":"top = 200\ndf = df[['date'] + leaderboard_temp['team_id'][:top].tolist()]","14cd09d5":"def prepare_data(df, steps=10):\n    ### clean data\n    df['date'] = df['date'].apply(lambda x: datetime.fromtimestamp(x, tz=timezone.utc).strftime(\"%B %d, %Y %H:%M\"))\n    df = df.rename(columns = dict(zip(leaderboard_temp['team_id'], leaderboard_temp['team_name'])))\n    df = df.reset_index(drop = True)\n    \n    ### prepare for smooth animation\n    df.index = df.index * steps\n    last_idx = df.index[-1] + 1\n    df_expanded = df.reindex(range(last_idx))\n    df_expanded['date'] = df_expanded['date'].fillna(method = 'ffill')\n    df_expanded = df_expanded.set_index('date')\n    df_rank_expanded = df_expanded.rank(axis = 1, method = 'first')\n    df_expanded = df_expanded.interpolate()\n    df_rank_expanded = df_rank_expanded.interpolate()\n    return df_expanded, df_rank_expanded\n\ndf_expanded, df_rank_expanded = prepare_data(df)\ndf_expanded.head()","2bfd9f29":"import matplotlib.pyplot as plt\nfrom matplotlib.animation import FuncAnimation\n\n# plt.rcParams[\"mathtext.fontset\"] = \"cm\"\n\ncolors = plt.cm.tab20(range(20))","9e4a8159":"def nice_axes(ax):\n    ax.set_facecolor('.92')\n    ax.tick_params(labelsize=8, length=0)\n    # ax.grid(True, axis='x', color='white')\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]\n    \ndef init():\n    ax.clear()\n    nice_axes(ax)\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][30] - 50, max(leaderboard_df['score']) + 50) \n    ax.set_ylim(top - 30.5, top + 0.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 11:\n        ax.axhline(top - 10.5, color=\"gold\")\n        ax.text(max(leaderboard_df['score']) - 10, top - 10.3, 'gold line', color = 'gold')\n    if top > 50:\n        ax.axhline(top - 49.5, color=\"silver\")\n        ax.text(1100, top - 49.3, 'silver line', color = 'silver')\n    if top > 100:\n        ax.axhline(top - 99.5, color=\"#a97142\")\n        ax.text(1100, top - 99.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_rank_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\n# HTML(anim.to_jshtml())\nanim.save('gold.mp4')\nVideo(\".\/gold.mp4\", embed=True)","516d384a":"def update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][70] - 50, leaderboard_df['score'][30] + 50)\n    ax.set_ylim(top - 69.5, top - 29.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 11:\n        ax.axhline(top - 10.5, color=\"gold\")\n        ax.text(1500, top - 10.3, 'gold line', color = 'gold')\n    if top > 50:\n        ax.axhline(top - 49.5, color=\"silver\")\n        ax.text(leaderboard_df['score'][30] - 10, top - 49.3, 'silver line', color = 'silver')\n    if top > 100:\n        ax.axhline(top - 99.5, color=\"#a97142\")\n        ax.text(1100, top - 99.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_rank_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\n# HTML(anim.to_jshtml())\nanim.save('silver.mp4')\nVideo(\".\/silver.mp4\", embed=True)","5596a752":"def nice_axes(ax):\n    ax.set_facecolor('.92')\n    ax.tick_params(labelsize=8, length=0)\n    # ax.grid(True, axis='x', color='white')\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]\n    \ndef init():\n    ax.clear()\n    nice_axes(ax)\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    for t in ax.texts:\n        t.set_visible(False)\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    labels = df_expanded.columns\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i] + ' UTC'\n    ax.set_title(date_str, fontsize=12)\n    ax.set_xlim(leaderboard_df['score'][120] - 50, leaderboard_df['score'][70] + 50)\n    ax.set_ylim(top - 120.5, top - 70.5)\n    for i, v in enumerate(width):\n        ax.text(v + 3, y[i] - 0.2, str(round(v,1)), fontsize = 6, clip_on=True)\n    if top > 11:\n        ax.axhline(top - 10.5, color=\"gold\")\n        ax.text(1500, top - 10.3, 'gold line', color = 'gold')\n    if top > 50:\n        ax.axhline(top - 49.5, color=\"silver\")\n        ax.text(1100, top - 49.3, 'silver line', color = 'silver')\n    if top > 100:\n        ax.axhline(top - 99.5, color=\"#a97142\")\n        ax.text(leaderboard_df['score'][70] - 10, top - 99.3, 'bronze line', color = '#a97142') \n        \nfig = plt.Figure(figsize=(8, 12), dpi = 111)\nax = fig.add_subplot()\n\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_rank_expanded), \n                     interval=75, repeat=False, cache_frame_data = False)\n\n# HTML(anim.to_jshtml())\nanim.save('bronze.mp4')\nVideo(\".\/bronze.mp4\", embed=True)","b61c1a33":"The purpose of this notebook is just for fun :D\n\nThe coding is inspired by this [article](https:\/\/www.dunderdata.com\/blog\/create-a-bar-chart-race-animation-in-python-with-matplotlib).\n\nThe data is collected from Feb 4th, 2021 and is updating by every 2 hours. I'll keep updating this notebook.","1f86aa32":"<h2 style=\"color:gold\">GOLD ZONE BATTLEGROUNDS<\/h2>.","a8eb57c6":"## Updates","c4590ae1":"<h2 style=\"color:silver\">SILVER ZONE BATTLEGROUNDS<\/h2>.","df385b26":"<h2><center> <img src=\"https:\/\/media.giphy.com\/media\/6Z3D5t31ZdoNW\/giphy.gif\" alt=\"Run img\"><\/center><\/h2>\n","3fcecd9b":"**Version 8**: animation to jshtml has duration limitation so I switched to .mp4 video\n\n**Version 22**: improved the runtime by sacrificing animation smoothness ","326d3b4f":"<h2><center> Santa 2020 - Leaderboard Race Animation <\/center><\/h2>","00870638":"## About this Notebook","d4a1b0d5":"<h2 style=\"color:#a97142\">BRONZE ZONE BATTLEGROUNDS<\/h2>."}}