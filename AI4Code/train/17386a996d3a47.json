{"cell_type":{"a146dcf8":"code","6ac2069d":"code","383bf153":"code","54070cb6":"code","060e921b":"code","8f53ede9":"code","e7954f56":"code","d9e6816d":"code","f077cf9f":"code","5531715a":"code","45df69ac":"code","d0aa8e15":"code","10263ec2":"code","ec4f09af":"markdown","798c4b7e":"markdown","a170822f":"markdown","5f7d172f":"markdown","72ac3709":"markdown","d381fc73":"markdown","79b90243":"markdown"},"source":{"a146dcf8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ac2069d":"class SimpleLinearRegression:\n    def __init__(self):\n        pass\n       \n    def fit(self, x, y):\n        self.independent = x\n        self.dependent = y\n        \n        self.Mx = np.mean(x)\n        self.My = np.mean(y)\n\n        self.SSx = sum((x-self.Mx)**2)\n        self.SSy = sum((y-self.My)**2)\n        self.SP = sum((x-self.Mx)*(y-self.My))\n\n        self.a = self.SP\/self.SSx\n        self.b = self.My - (self.a*self.Mx)\n        self.r = round(self.SP \/ np.sqrt(self.SSx * self.SSy), 3)\n        self.xi = (self.b*-1) \/ self.a\n       \n    def predict(self, x, dplaces=3):\n        try:\n            return round(self.a*x+self.b, dplaces)\n        except:\n            return np.around(self.a*x+self.b, dplaces)\n   \n    def geteq(self):\n        return 'y = {0}x + {1}'.format(self.a,self.b)","383bf153":"model = SimpleLinearRegression()","54070cb6":"import matplotlib.pyplot as plt\nimport seaborn as sns","060e921b":"data = pd.read_csv('..\/input\/linear-regression-dataset\/Linear Regression - Sheet1.csv')","8f53ede9":"data.tail()","e7954f56":"data.drop([298,299], axis=0, inplace=True)\n\ndata.tail()","d9e6816d":"X = np.array(data['X'])\ny = np.array(data['Y'])","f077cf9f":"model.fit(X, y)","5531715a":"model.r","45df69ac":"model.geteq(), model.xi","d0aa8e15":"xr = np.arange(301)\nyeq = 0.6666666667167804*xr + 3.222222220941987","10263ec2":"sns.set_theme(style='whitegrid')\nplt.figure(figsize=(32,18))\nplt.plot(xr, yeq, color='r')\nplt.scatter(X,y, color='b', marker='+')\nplt.title('Regression Line with Scatter')\nplt.ylabel('Dependent')\nplt.xlabel('Independent')\nplt.axis('scaled')\nplt.show()","ec4f09af":"# Defining the Linear Regressor","798c4b7e":"# Plotting and calculating the equation","a170822f":"The equation (rounded to two decimal places) is y = 0.67x + 3.22. The y-intercept of this line is 3.222222220941987 and the x-intercept is -4.833333331049656. A scatter plot with a regression line can be used to check our equation.","5f7d172f":"The product moment correlation coefficient is 1  which suggests that we have a perfect positive correlation between x and y.","72ac3709":"Removing the outliers...","d381fc73":"Define bivariate linear regression class. The code for this can be seen at [https:\/\/github.com\/manmadetomcat\/Simple-Linear-Regression](http:\/\/)","79b90243":"# Checking the least squares regression line"}}