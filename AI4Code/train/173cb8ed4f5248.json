{"cell_type":{"5cc1f2e9":"code","f4b88e9f":"code","38505d94":"code","e031333e":"code","89d64115":"code","630dadb0":"code","a1a2078f":"code","4985f48b":"code","9d31fef3":"code","3bba1bf3":"code","6ffa35a0":"code","831cb1c3":"code","bd897f68":"code","82281bda":"code","97c8e547":"code","e9ebbfd5":"code","ab51d26e":"code","9b096116":"code","8cc0b830":"code","e3ac9d41":"code","04874aa5":"code","2951dcc8":"code","fdfe1708":"code","056d8ff3":"code","135fe971":"code","7e0977ff":"code","92aa1802":"code","f9432ecb":"code","2e99819c":"code","1e1d14a1":"code","2b1332f4":"code","53944c33":"code","7dec7f4c":"code","7dd2c341":"code","b00c0cef":"code","9994ed5a":"code","1a440e37":"code","dc25ac85":"code","f3fde691":"markdown","e78fc1aa":"markdown","1a6183a4":"markdown","373dcdf5":"markdown","66b361ee":"markdown","cc326842":"markdown","78b6ac65":"markdown","917c63b2":"markdown","8cbd24c2":"markdown","c3a2f2d5":"markdown","8df2ef4e":"markdown","b49ba954":"markdown","55e97d12":"markdown","7683196e":"markdown","be10d85b":"markdown","732eb610":"markdown","9a8f78cd":"markdown","266fd48f":"markdown","9eafd446":"markdown","14744a29":"markdown","3e4368d6":"markdown","e4e14f17":"markdown","90436115":"markdown","492605b4":"markdown","022c2032":"markdown","a004c269":"markdown","4e56a912":"markdown","63aa8a50":"markdown","75fb3d2e":"markdown","fd8126f3":"markdown","ef421d50":"markdown","35edd5eb":"markdown","b3ec9cd5":"markdown","b7fd6434":"markdown","ed384a65":"markdown","fed59ef8":"markdown","3f8c3503":"markdown","fa3fe004":"markdown","ba4c4344":"markdown","ebfcdfbc":"markdown","ecf53f18":"markdown"},"source":{"5cc1f2e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4b88e9f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport warnings\n#\u30ef\u30fc\u30cb\u30f3\u30b0\u3092\u6291\u6b62\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n# \u5c0f\u6570\u70b92\u6841\u3067\u8868\u793a(\u6307\u6570\u8868\u8a18\u3057\u306a\u3044\u3088\u3046\u306b)\npd.options.display.float_format = '{:.2f}'.format\n","38505d94":"# \u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\n","e031333e":"#\u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u8868\u793a\nsales_train.head()","89d64115":"sales_train.shape","630dadb0":"fig = plt.figure(figsize=(18,9))\nplt.subplots_adjust(hspace=.5)\nsales_train['shop_id'].value_counts(normalize=True).plot(kind='bar')\nplt.title('Shop ID Values in the Training Set (Normalized)')\n","a1a2078f":"#sales_train\u306e\u6708\u5225\u4ef6\u6570\u3092\u8868\u793a\nfig = plt.figure(figsize=(18,9))\nplt.subplots_adjust(hspace=.5)\nitm_cnt = sales_train['date_block_num'].value_counts(normalize=True).plot.bar()\nplt.title('Month (date_block_num) Values in the Training Set (Normalized)')\n","4985f48b":"#\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30de\u30b9\u30bf\u306e\u8868\u793a\nitem_categories.head()","9d31fef3":"# ' - '\u3067\u6587\u5b57\u5217\u5206\u5272\u3057\u3001big_category_name\u3068item_category_name\u306b\u5206\u3051\u308b\u3002\nitem_categories['big_category_name'] = item_categories['item_category_name'].map(lambda x: x.split(' - ')[0])\n# \u96c6\u7d04\u5177\u5408\u3092\u78ba\u8a8d\nitem_categories['big_category_name'].value_counts()\n","3bba1bf3":"# \u8868\u8a18\u63fa\u308c\u304c\u3042\u308b\u306e\u3067\u7d71\u4e00\n# \u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u0442\u0443\u0447\u043d\u044b\u0435) \u3068\n# \u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u043f\u0438\u043b\u044c)\u3092\u540c\u4e00\u3068\u3059\u308b\nitem_categories.loc[\n    item_categories['big_category_name']=='\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u0442\u0443\u0447\u043d\u044b\u0435)'\n] = '\u0427\u0438\u0441\u0442\u044b\u0435 \u043d\u043e\u0441\u0438\u0442\u0435\u043b\u0438 (\u0448\u043f\u0438\u043b\u044c)'\n\n# \u518d\u5ea6\u96c6\u7d04\u5177\u5408\u3092\u78ba\u8a8d\nitem_categories['big_category_name'].value_counts()\n","6ffa35a0":"item_categories.head()","831cb1c3":"#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8868\u793a\ntest.head()","bd897f68":"shops.head()\n","82281bda":"# ' '\u3067\u6587\u5b57\u5217\u5206\u5272\u3057\u3001city_name\u3068shop_name\u306b\u5206\u3051\u308b\nshops['city_name'] = shops['shop_name'].map(lambda x: x.split(' ')[0])\n# \u96c6\u7d04\u5177\u5408\u3092\u78ba\u8a8d\nshops['city_name'].value_counts()\n","97c8e547":"# \u8868\u8a18\u63fa\u308c\u304c\u3042\u308b\u306e\u3067\u7d71\u4e00\n# !\u042f\u043a\u0443\u0442\u0441\u043a \u3068\n# \u042f\u043a\u0443\u0442\u0441\u043a\u3092\u540c\u4e00\u3068\u3059\u308b\nshops.loc[shops['city_name']=='!\u042f\u043a\u0443\u0442\u0441\u043a','city_name'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\n# \u518d\u5ea6\u96c6\u7d04\u5177\u5408\u3092\u78ba\u8a8d\nshops['city_name'].value_counts()\n","e9ebbfd5":"shops.head()\n","ab51d26e":"#\u5546\u54c1\u6570\u3068\u5546\u54c1\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\nplt.figure(figsize=(20, 10))\nplt.scatter(sales_train[\"item_cnt_day\"],sales_train[\"item_price\"])\nplt.xlabel(\"sales_train.item_cnt_day\")\nplt.ylabel(\"sales_train.item_price\")\n","9b096116":"# \u5916\u308c\u5024\u306e\u9664\u5916\n# \u5546\u54c1\u4fa1\u683c>100000 \u304a\u3088\u3073 \u5546\u54c1\u6570>1001 \u306e\u5916\u308c\u5024\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u524a\u9664\nsales_train = sales_train[sales_train.item_price<100000]\nsales_train = sales_train[sales_train.item_cnt_day<1001]\n\n#\u5546\u54c1\u6570\u3068\u5546\u54c1\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\nplt.figure(figsize=(20, 10))\nplt.scatter(sales_train[\"item_cnt_day\"],sales_train[\"item_price\"])\nplt.xlabel(\"sales_train.item_cnt_day\")\nplt.ylabel(\"sales_train.item_price\")\n","8cc0b830":"# \u65e5\u6b21\u58f2\u4e0a\u984d\u3092\u4f5c\u6210(\u5546\u54c1\u6570\u00d7\u5546\u54c1\u4fa1\u683c)\nsales_train['date_sales'] = sales_train['item_cnt_day'] * sales_train['item_price']\nsales_train.head()\n","e3ac9d41":"# \u6708\u6b21\u5e97\u5225\u5546\u54c1\u5225\u58f2\u4e0a\u70b9\u6570\nmon_shop_item_cnt = sales_train[\n    ['date_block_num','shop_id','item_id','item_cnt_day']\n].groupby(\n    ['date_block_num','shop_id','item_id'],\n    as_index=False\n).sum().rename(columns={'item_cnt_day':'mon_shop_item_cnt'})\nmon_shop_item_cnt.head()\n","04874aa5":"# \u6708\u6b21\u5e97\u5225\u5546\u54c1\u5225\u58f2\u4e0a\u91d1\u984d\nmon_shop_item_sales = sales_train[\n    ['date_block_num','shop_id','item_id','date_sales']\n].groupby(\n    ['date_block_num','shop_id','item_id'],\n    as_index=False\n).sum().rename(columns={'date_sales':'mon_shop_item_sales'})\nmon_shop_item_sales.head()\n","2951dcc8":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5408\u308f\u305b\u62e1\u5f35\u3059\u308b\n# 34\u6708*shop_id*item_id\ntrain_full_comb = pd.DataFrame()\nfor i in range(35):\n    mid = test[['shop_id','item_id']]\n    mid['date_block_num'] = i\n    train_full_comb = pd.concat([train_full_comb,mid],axis=0)\ntrain_full_comb.head()\n","fdfe1708":"#  \u6708\u6b21\u58f2\u4e0a\u5546\u54c1\u6570\u3092\u30ec\u30d5\u30c8\u30a2\u30a6\u30bf\u30fc\u30b8\u30e7\u30a4\u30f3\ntrain = pd.merge(\n    train_full_comb,\n    mon_shop_item_cnt,\n    on=['date_block_num','shop_id','item_id'],\n    how='left'\n)\n\n# \u6708\u6b21\u58f2\u4e0a\u91d1\u984d\u3092\u30ec\u30d5\u30c8\u30a2\u30a6\u30bf\u30fc\u30b8\u30e7\u30a4\u30f3\ntrain = pd.merge(\n    train,\n    mon_shop_item_sales,\n    on=['date_block_num','shop_id','item_id'],\n    how='left'\n)\n","056d8ff3":"# \u5546\u54c1\u30de\u30b9\u30bf\u3092\u30ec\u30d5\u30c8\u30a2\u30a6\u30bf\u30fc\u30b8\u30e7\u30a4\u30f3\ntrain = pd.merge(\n    train,\n    items[['item_id','item_category_id']],\n    on='item_id',\n    how='left'\n)\n# \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30de\u30b9\u30bf\u3092\u30ec\u30d5\u30c8\u30a2\u30a6\u30bf\u30fc\u30b8\u30e7\u30a4\u30f3\ntrain = pd.merge(\n    train,\n    item_categories[['item_category_id','big_category_name']],\n    on='item_category_id',\n    how='left'\n)\n# \u5e97\u30de\u30b9\u30bf\u3092\u30ec\u30d5\u30c8\u30a2\u30a6\u30bf\u30fc\u30b8\u30e7\u30a4\u30f3\ntrain = pd.merge(\n    train,\n    shops[['shop_id','city_name']],\n    on='shop_id',\n    how='left'\n)\n","135fe971":"train.head()\n","7e0977ff":"plt_df = train.groupby('date_block_num',as_index=False)['mon_shop_item_cnt'].sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df)\nplt.title('Montly item counts')\n","92aa1802":"plt_df = train.groupby('date_block_num',as_index=False)['mon_shop_item_cnt'].sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df)\nplt.title('Montly item counts')\n","f9432ecb":"plt_df = train.groupby(\n    ['date_block_num','big_category_name'],\n    as_index=False\n).sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df,hue='big_category_name')\nplt.title('Montly item counts by big category')\n","2e99819c":"plt_df = train.groupby(\n    ['date_block_num','big_category_name'],\n    as_index=False\n).sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df,hue='big_category_name')\nplt.title('Montly item counts by big category')\n","1e1d14a1":"plt_df = train.groupby(\n    ['date_block_num','big_category_name'],\n    as_index=False\n).sum()\nplt.figure(figsize=(20, 10))\nsns.lineplot(x='date_block_num',y='mon_shop_item_cnt',data=plt_df,hue='big_category_name')\nplt.title('Montly item counts by big category')\n","2b1332f4":"# \u30e9\u30b0\u751f\u6210\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0\nlag_col_list = ['mon_shop_item_cnt','mon_shop_item_sales']\n# \u30e9\u30b0\u30ea\u30b9\u30c8(1\u30f6\u6708\u524d\u30012\u30f6\u6708\u524d\u30013\u30f6\u6708\u524d)\nlag_num_list = [1,2,3]\n\n# shop_id*item_id*date_block_num\u3067\u30bd\u30fc\u30c8\ntrain = train.sort_values(\n    ['shop_id', 'item_id','date_block_num'],\n    ascending=[True, True,True]\n).reset_index(drop=True)\n\n# \u30e9\u30b0\u7279\u5fb4\u91cf\u306e\u751f\u6210\nfor lag_col in lag_col_list:\n    for lag in lag_num_list:\n        set_col_name =  lag_col + '_' +  str(lag)\n        df_lag = train[['shop_id', 'item_id','date_block_num',lag_col]].sort_values(\n            ['shop_id', 'item_id','date_block_num'],\n            ascending=[True, True,True]\n        ).reset_index(drop=True).shift(lag).rename(columns={lag_col: set_col_name})\n        train = pd.concat([train, df_lag[set_col_name]], axis=1)\ntrain.head() \n","53944c33":"# \u6b20\u640d\u30920\u57cb\u3081\ntrain = train.fillna(0)\ntrain.isnull().sum()\n","7dec7f4c":"from sklearn.preprocessing import LabelEncoder\n\nobj_col_list = ['big_category_name','city_name']\nfor obj_col in obj_col_list:\n    le = LabelEncoder()\n    train[obj_col] = pd.DataFrame({obj_col:le.fit_transform(train[obj_col])})\ntrain.head()\n","7dd2c341":"# \u30e9\u30b0\u3067\u6700\u59273\u30f6\u6708\u524d\u306e\u58f2\u4e0a\u6570\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\ntrain_ = train[(train['date_block_num']<=32) & (train['date_block_num']>=3)].reset_index(drop=True)\ntest_ = train[train['date_block_num']==33].reset_index(drop=True)\n\n# \u30e2\u30c7\u30eb\u306b\u5165\u529b\u3059\u308b\u7279\u5fb4\u91cf\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\u5909\u6570\u306b\u5206\u5272\ny_train = train_['mon_shop_item_cnt']\nX_train = train_.drop(columns=['date_block_num','mon_shop_item_cnt', 'mon_shop_item_sales'])\ny_test = test_['mon_shop_item_cnt']\nX_test = test_.drop(columns=['date_block_num','mon_shop_item_cnt', 'mon_shop_item_sales'])\n","b00c0cef":"#\u4ef6\u6570\u3001\u9805\u76ee\u6570\u3092\u8868\u793a\nprint(y_train.shape)\nprint(X_train.shape)\nprint(y_test.shape)\nprint(X_test.shape)\n","9994ed5a":"#LightGBM\u30e9\u30a4\u30d6\u30e9\u30ea\nimport lightgbm as lgb\n\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test)\n\n#\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\nparams = {'metric': {'rmse'},\n          'max_depth' : 9}\n\n#LightGBM\u306e\u5b9f\u884c\ngbm = lgb.train(params,\n                lgb_train,\n                valid_sets=(lgb_train, lgb_eval),\n                num_boost_round=10000,\n                early_stopping_rounds=100,\n                verbose_eval=50)\ny_pred = gbm.predict(X_test)\n","1a440e37":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\n\n#RMSE(\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee)\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))\n#MAE(\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\nprint(mean_absolute_error(y_test, y_pred))\n# \u6c7a\u5b9a\u4fc2\u6570\nprint(r2_score(y_test, y_pred))\n","dc25ac85":"#\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\nlgb.plot_importance(gbm, height=0.5, figsize=(8,16))\n","f3fde691":"* \u52a0\u5de5\u5f8c\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30de\u30b9\u30bf\u306e\u8868\u793a","e78fc1aa":"* \u5e97\u30de\u30b9\u30bf\u306e\u8868\u793a","1a6183a4":"* \u90fd\u5e02\u540d\u306e\u8868\u8a18\u63fa\u308c\u3092\u7d71\u4e00","373dcdf5":"* \u90fd\u5e02\u540d\u5225\u306e\u6708\u6b21\u58f2\u4e0a\u70b9\u6570\u3092\u53ef\u8996\u5316","66b361ee":"* \u6708\u6b21\u58f2\u4e0a\u70b9\u6570\u3092\u53ef\u8996\u5316","cc326842":"* \u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080","78b6ac65":"* \u5e97\u30de\u30b9\u30bf\u306e\u300c\u5e97\u540d\u300d\u304b\u3089\u300c\u90fd\u5e02\u540d\u300d\u3092\u4f5c\u6210","917c63b2":"# \u3010\u6f14\u7fd2\u3011\u30c7\u30fc\u30bf\u306e\u63a2\u7d22\u3068\u524d\u51e6\u7406","8cbd24c2":"* \u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30de\u30b9\u30bf\u306e\u8868\u793a","c3a2f2d5":"* \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u8868\u793a","8df2ef4e":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u8a55\u4fa1","b49ba954":"\n* \u6708\u6b21\u5e97\u5225\u5546\u54c1\u5225\u58f2\u4e0a\u70b9\u6570","55e97d12":"\n* \u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u8868\u793a","7683196e":"* \u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u306e\u8868\u793a","be10d85b":"* \u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306e\u7279\u5fb4\u91cf\u3092Label Encoding\u3059\u308b","732eb610":"* \u5927\u30ab\u30c6\u30b4\u30ea\u540d\u5225\u306e\u6708\u6b21\u58f2\u4e0a\u70b9\u6570\u3092\u53ef\u8996\u5316","9a8f78cd":"# \u3010\u6f14\u7fd2\u3011\u91cd\u8981\u5ea6\u306e\u8868\u793a","266fd48f":"* \u6708\u6b21\u5e97\u5225\u5546\u54c1\u5225\u58f2\u4e0a\u91d1\u984d","9eafd446":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u4f5c\u6210\u3057\u305f\u6708\u6b21\u9805\u76ee\u3092\u7d50\u5408\u3057\u3066\u3044\u304f","14744a29":"* \u6b20\u640d\u5024\u30920\u306b\u7f6e\u63db","3e4368d6":"# \u3010\u6f14\u7fd2\u3011\u5916\u308c\u5024\u306e\u51e6\u7406","e4e14f17":"* \u6708\u6b21\u58f2\u4e0a\u91d1\u984d\u3092\u53ef\u8996\u5316","90436115":"* light GBM\u306b\u3066\u30e2\u30c7\u30eb\u5b66\u7fd2\u3057\u3001\u4e88\u6e2c\u5024\u7b97\u51fa","492605b4":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u7d50\u5408\u7d50\u679c","022c2032":"* \u5927\u30ab\u30c6\u30b4\u30ea\u540d\u306e\u8868\u8a18\u63fa\u308c\u3092\u7d71\u4e00","a004c269":"* \u65e5\u6b21\u58f2\u4e0a\u984d\u3092\u4f5c\u6210(\u5546\u54c1\u6570\u00d7\u5546\u54c1\u4fa1\u683c)","4e56a912":"\n# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u5b66\u7fd2(light GBM)","63aa8a50":"# \u3010\u6f14\u7fd2\u3011\u6642\u7cfb\u5217\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u5272","75fb3d2e":"* \u5546\u54c1\u58f2\u4e0a\u6570\u3001\u5546\u54c1\u58f2\u4e0a\u91d1\u984d\u306b\u3064\u3044\u3066\u30e9\u30b0\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","fd8126f3":"\n* \u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u5e97\u5225\u4ef6\u6570\u3092\u53ef\u8996\u5316","ef421d50":"* \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8","35edd5eb":"* \u5916\u308c\u5024\u3092\u524a\u9664\u3057\u3001\u518d\u5ea6\u6563\u5e03\u56f3\u3092\u8868\u793a","b3ec9cd5":"\n* \u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3068\u30ab\u30e9\u30e0\u6570\u3092\u78ba\u8a8d","b7fd6434":"* *\u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u6708\u5225\u4ef6\u6570\u3092\u53ef\u8996\u5316","ed384a65":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272","fed59ef8":"* \u65e5\u6b21\u58f2\u4e0a\u30c7\u30fc\u30bf\u306e\u5546\u54c1\u6570\u3068\u5546\u54c1\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\u3057\u3001\u5916\u308c\u5024\u3092\u78ba\u8a8d","3f8c3503":"\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u30de\u30b9\u30bf\u306e\u300c\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u540d\u300d\u3092\u5206\u5272\u3057\u3001\u300c\u5927\u30ab\u30c6\u30b4\u30ea\u540d\u300d\u3092\u4f5c\u6210\n* ","fa3fe004":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u30de\u30b9\u30bf\u3092\u7d50\u5408\u3057\u3066\u3044\u304f","ba4c4344":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210","ebfcdfbc":"* \u52a0\u5de5\u5f8c\u306e\u5e97\u30de\u30b9\u30bf\u306e\u8868\u793a","ecf53f18":"* RMSE (\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee) \u3001MAE (\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\u3001\u6c7a\u5b9a\u4fc2\u6570\u3092\u8868\u793a"}}