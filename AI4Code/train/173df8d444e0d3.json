{"cell_type":{"98107e8a":"code","fcd0870b":"code","1eada7d6":"code","de9399c2":"code","11d355df":"code","f6eef72c":"code","67a0078c":"code","5e4ec0dc":"code","2d0ef58d":"code","fc36b045":"code","459e87d3":"code","98e2c703":"code","e2563d7d":"code","ce2c10f5":"code","6760c722":"code","52817ad7":"code","e004b454":"code","8eff69b2":"code","8ab34ff3":"code","57a79869":"code","80f10b1c":"code","c8a927d5":"code","9bb9499b":"code","416370a3":"code","dcd2dec3":"code","13254489":"code","67323e99":"code","32139820":"markdown","5d512edf":"markdown","b5bfc87c":"markdown","a3c0377e":"markdown","3e67ffc5":"markdown","d702d493":"markdown","b5e2476c":"markdown","e28bd499":"markdown","b3c86869":"markdown","ecf90314":"markdown"},"source":{"98107e8a":"import os\nimport cv2\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport json\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Activation, Dropout, Conv2D,MaxPooling2D\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import MobileNet\nfrom keras import optimizers","fcd0870b":"ann_file = '..\/input\/train2019.json'\nwith open(ann_file) as data_file:\n        train_anns = json.load(data_file)","1eada7d6":"train_anns_df = pd.DataFrame(train_anns['annotations'])[['image_id','category_id']]\ntrain_img_df = pd.DataFrame(train_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ndf_train_file_cat = pd.merge(train_img_df, train_anns_df, on='image_id')\ndf_train_file_cat['category_id']=df_train_file_cat['category_id'].astype(str)\ndf_train_file_cat.head()","de9399c2":"len(df_train_file_cat['category_id'].unique())","11d355df":"# Example of images for category_id = 400\nimg_names = df_train_file_cat[df_train_file_cat['category_id']=='400']['file_name'][:30]\n\nplt.figure(figsize=[15,15])\ni = 1\nfor img_name in img_names:\n    img = cv2.imread(\"..\/input\/train_val2019\/%s\" % img_name)[...,[2, 1, 0]]\n    plt.subplot(6, 5, i)\n    plt.imshow(img)\n    i += 1\nplt.show()","f6eef72c":"valid_ann_file = '..\/input\/val2019.json'\nwith open(valid_ann_file) as data_file:\n        valid_anns = json.load(data_file)","67a0078c":"valid_anns_df = pd.DataFrame(valid_anns['annotations'])[['image_id','category_id']]\nvalid_anns_df.head()","5e4ec0dc":"valid_img_df = pd.DataFrame(valid_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\nvalid_img_df.head()","2d0ef58d":"df_valid_file_cat = pd.merge(valid_img_df, valid_anns_df, on='image_id')\ndf_valid_file_cat['category_id']=df_valid_file_cat['category_id'].astype(str)\ndf_valid_file_cat.head()","fc36b045":"nb_classes = 1010\nbatch_size = 128\nimg_size = 128\nnb_epochs = 10","459e87d3":"%%time\ntrain_datagen=ImageDataGenerator(rescale=1.\/255, rotation_range=45, \n                    width_shift_range=.15, \n                    height_shift_range=.15, \n                    horizontal_flip=True, \n                    zoom_range=0.5)\n\ntrain_generator=train_datagen.flow_from_dataframe(\n    dataframe=df_train_file_cat,\n    directory=\"..\/input\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    shuffle=True,\n    class_mode=\"sparse\",    \n    target_size=(img_size,img_size))","98e2c703":"# udacity_intro_to_tensorflow_for_deep_learning\/l05c04_exercise_flowers_with_data_augmentation_solution.ipynb#scrollTo=jqb9OGoVKIOi\n# This function will plot images in the form of a grid with 1 row and 5 columns where images are placed in each column.\ndef plotImages(images_arr):\n    fig, axes = plt.subplots(1, 5, figsize=(20,20))\n    axes = axes.flatten()\n    for img, ax in zip( images_arr, axes):\n        ax.imshow(img)\n    plt.tight_layout()\n    plt.show()\n    \n    \naugmented_images = [train_generator[0][0][0] for i in range(5)]\nplotImages(augmented_images)","e2563d7d":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator=test_datagen.flow_from_dataframe(\n    dataframe=df_valid_file_cat,\n    directory=\"..\/input\/train_val2019\",\n    x_col=\"file_name\",\n    y_col=\"category_id\",\n    batch_size=batch_size,\n    class_mode=\"sparse\",    \n    target_size=(img_size,img_size))","ce2c10f5":"model = MobileNet(input_shape=(img_size, img_size, 3), alpha=1., weights=None, classes=nb_classes)\n\nmodel.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\nprint(model.summary())","6760c722":"%%time\nhistory = model.fit_generator(generator=train_generator, \n                              \n                    steps_per_epoch=500,\n                              \n                    validation_data=valid_generator, \n                              \n                    validation_steps=100,\n                              \n                    epochs=nb_epochs,\n                    verbose=0)","52817ad7":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","e004b454":"acc = history.history['acc']\nval_acc = history.history['val_acc']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(nb_epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","8eff69b2":"test_ann_file = '..\/input\/test2019.json'\nwith open(test_ann_file) as data_file:\n        test_anns = json.load(data_file)","8ab34ff3":"test_img_df = pd.DataFrame(test_anns['images'])[['id', 'file_name']].rename(columns={'id':'image_id'})\ntest_img_df.head()","57a79869":"%%time\ntest_datagen = ImageDataGenerator(rescale=1.\/255.)\ntest_generator = test_datagen.flow_from_dataframe(      \n    \n        dataframe=test_img_df,    \n    \n        directory = \"..\/input\/test2019\",    \n        x_col=\"file_name\",\n        target_size = (img_size,img_size),\n        batch_size = 1,\n        shuffle=False,\n        class_mode = None\n        )","80f10b1c":"%%time\ntest_generator.reset()\npredict=model.predict_generator(test_generator, steps = len(test_generator.filenames),verbose=1)","c8a927d5":"len(predict)","9bb9499b":"predicted_class_indices=np.argmax(predict,axis=1)","416370a3":"labels = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","dcd2dec3":"sam_sub_df = pd.read_csv('..\/input\/kaggle_sample_submission.csv')\nsam_sub_df.head()","13254489":"filenames=test_generator.filenames\nresults=pd.DataFrame({\"file_name\":filenames,\n                      \"predicted\":predictions})\ndf_res = pd.merge(test_img_df, results, on='file_name')[['image_id','predicted']]\\\n    .rename(columns={'image_id':'id'})\n\ndf_res.head()","67323e99":"df_res.to_csv(\"submission.csv\",index=False)","32139820":"### In the cell below, use ImageDataGenerator to create a transformation that rescales the images by 255 here I applied Data Augmentation as following:\n* random 45 degree rotation\n* random zoom of up to 50%\n* random horizontal flip\n* width shift of 0.15\n* height shfit of 0.15","5d512edf":"### This kernel is base on [Alexander Teplyuk](https:\/\/www.kaggle.com\/ateplyuk\/inat2019-starter-keras\/output) here I applied Data Augmentation technic from [Udacity](https:\/\/colab.research.google.com\/github\/tensorflow\/examples\/blob\/master\/courses\/udacity_intro_to_tensorflow_for_deep_learning\/l05c04_exercise_flowers_with_data_augmentation_solution.ipynb#scrollTo=UOoVpxFwVrWy) as following:\n* random 45 degree rotation\n* random zoom of up to 50%\n* random horizontal flip\n* width shift of 0.15\n* height shfit of 0.15","b5bfc87c":"#### Hope you like it and finds this kernel helpful :)!","a3c0377e":"<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/5408\/media\/bigleaves.jpg\" width=\"600\"><\/img>","3e67ffc5":"### Test data","d702d493":"> > * Model: MobileNet  \n Apply transfer learning skill from pretrained model using Keras.\n> Using MobileNet.","b5e2476c":"### Prediction","e28bd499":"### Validation data","b3c86869":"### Train data","ecf90314":"# Reference\n[Alexander Teplyuk](https:\/\/www.kaggle.com\/ateplyuk\/inat2019-starter-keras\/output)  \n[Udacity](https:\/\/colab.research.google.com\/github\/tensorflow\/examples\/blob\/master\/courses\/udacity_intro_to_tensorflow_for_deep_learning\/l05c04_exercise_flowers_with_data_augmentation_solution.ipynb#scrollTo=08rRJ0sn3Tb1)  \nhttps:\/\/medium.com\/@vijayabhaskar96\/tutorial-on-keras-flow-from-dataframe-1fd4493d237c"}}