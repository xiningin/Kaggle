{"cell_type":{"60a1e780":"code","4fa69cc2":"code","fd6e7ddd":"code","1a96f8e1":"code","057139fd":"code","23cbde69":"code","34d3f86f":"code","8ed80330":"code","41c37999":"code","4393ac17":"code","5394fcc9":"code","460e6ff8":"code","3cd9c9fd":"code","5ba9b5ad":"code","7c662331":"code","bb5bbe49":"code","804fd5f3":"markdown","3190e675":"markdown","bf1bec27":"markdown","28d22792":"markdown"},"source":{"60a1e780":"import numpy as np\nnp.random.seed(123)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom tqdm import tqdm\n\nimport operator\nfrom functools import reduce\n\nplt.rcParams.update({'figure.max_open_warning': 0})","4fa69cc2":"size = 51\nsize_class_0 = size\/\/2+size%2\nsize_class_1 = size\/\/2\nnumber_of_intervals = 10\ndefault_forecast_value = 0\ncolor_map = {0: \"#ce5580\", 1:\"#4a8082\"}\nalpha_map = {True: 0.6, False: 0.25}\nremaining_class = {0:1, 1:0}","fd6e7ddd":"np_arr = np.random.rand(size,3)\nnp_arr","1a96f8e1":"t = np.array([0 for x in range(size_class_0)] + [1 for x in range(size_class_1)])\nt","057139fd":"def get_borders(x):\n    return x\/number_of_intervals, (x+1)\/number_of_intervals\n\ndef init_dict(default=default_forecast_value):\n    obj = {}\n    obj['samples'] = []\n    obj['idxs'] = []\n    obj['default'] = default\n    return obj\n\ndef group_data(obj, data_range, t=t, level=0):\n    for idx in data_range:\n        val = np_arr[:, level][idx]\n        if val >= low and val < high:\n            obj['samples'].append(t[idx])\n            obj['idxs'].append(idx)\n    return obj\n\ndef get_result(obj):\n    if obj['samples'].count(obj['default']) >= obj['samples'].count(remaining_class[obj['default']]):\n        return obj['default'] \n    else:\n        return remaining_class[obj['default']] \n    \ndef get_missing(obj):\n    return len([x for x in obj['samples'] if x != obj['result']])\n\ndef is_empty(obj):\n    return bool(obj['samples'])","23cbde69":"one_d_distribution = {}\nmissed_results = 0\nfor x in range(number_of_intervals):\n    \n    low, high = get_borders(x)\n    one_d_distribution[low] = init_dict()\n    one_d_distribution[low] = group_data(one_d_distribution[low], [x for x in range(len(np_arr[:, 0]))], level=0)\n    one_d_distribution[low]['result'] = get_result(one_d_distribution[low])\n    one_d_distribution[low]['missed'] = get_missing(one_d_distribution[low])\n    missed_results += one_d_distribution[low]['missed']\n\nempty_intervals = len([x for x in one_d_distribution if (not one_d_distribution[x]['samples'])])","34d3f86f":"fig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\n\nax.scatter(np_arr[:size_class_0,0], [0]*(size_class_0),\n    edgecolors = color_map[0],\n    c = \"None\",\n    s = 20,\n    marker = \"o\",\n    label = \"Class 0\",\n)\nax.scatter(np_arr[size_class_0:,0], [0.05]*(size_class_1),\n    edgecolors = color_map[1],\n    c = \"None\",\n    s = 20,\n    marker = \"X\",\n    label = \"Class 1\",\n)\n\nnumber_of_intervals = 10\nfor x in range(number_of_intervals):\n    low = x\/number_of_intervals\n    color = color_map[one_d_distribution[low]['result']]        \n    ax.fill_between([low, (x+1)\/number_of_intervals], [0.1, 0.1], [-0.05, -0.05],\n        alpha = alpha_map[is_empty(one_d_distribution[low])],\n        color = color,\n        zorder = 1\n    )\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(0.1))\n\nax.set_xlim(0,1)\nax.set_ylim(-1,1)\nax.get_yaxis().set_visible(False)\n\nax.spines[\"left\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"bottom\"].set_position((\"data\",-0.01295))\nax.spines[\"bottom\"].set_zorder(0)\nax.legend(frameon=False,loc=(0.01,0.55))\n\nplt.tight_layout()\nplt.show()","8ed80330":"missed_results, empty_intervals","41c37999":"two_d_distribution = {}\nmissed_results = 0\nfor k in one_d_distribution:\n    two_d_distribution[k] = {}\n    for y in range(number_of_intervals):\n        low, high = get_borders(y)\n        two_d_distribution[k][low] = init_dict(one_d_distribution[k]['result'])\n        two_d_distribution[k][low] = group_data(two_d_distribution[k][low], one_d_distribution[k]['idxs'], level=1)\n        \n        if not two_d_distribution[k][low]['samples']:\n            two_d_distribution[k][low]['result'] = one_d_distribution[k]['result']\n        else:        \n            two_d_distribution[k][low]['result'] = get_result(two_d_distribution[k][low])\n        two_d_distribution[k][low]['missed'] = get_missing(two_d_distribution[k][low])\n        missed_results += two_d_distribution[k][low]['missed']\n\nempty_intervals = len(sum([[two_d_distribution[i][j] \n                            for j in two_d_distribution[i] if (not two_d_distribution[i][j]['samples'])] \n                               for i in two_d_distribution], []))","4393ac17":"fig = plt.figure(figsize=(8, 8))\nax = fig.add_subplot(111)\n\nax.scatter(np_arr[:size_class_0,0], np_arr[:size_class_0,1],\n    edgecolors = color_map[0],\n    c = \"None\",\n    s = 20,\n    marker = \"o\",\n    label = \"Class 0\",\n)\nax.scatter(np_arr[size_class_0:,0], np_arr[size_class_0:,1],\n    edgecolors = color_map[1],\n    c = \"None\",\n    s = 20,\n    marker = \"X\",\n    label = \"Class 1\",\n)\n\nfor x in range(number_of_intervals):\n    for y in range(number_of_intervals):\n        low_x = x\/number_of_intervals\n        low_y = y\/number_of_intervals\n        \n        high_x = (x+1)\/number_of_intervals\n        high_y = (y+1)\/number_of_intervals\n        \n        color = color_map[two_d_distribution[low_x][low_y]['result']]        \n        ax.fill_between([low_x, high_x], [low_y, low_y], [high_y, high_y],\n            alpha = alpha_map[is_empty(two_d_distribution[low_x][low_y])],\n            color = color,\n            zorder = 1\n        )\n        \nax.set_xlim(0.0,1.0)\nax.set_ylim(0.0,1.0)\n\nax.xaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax.yaxis.set_major_locator(ticker.MultipleLocator(0.1))\nax.legend(frameon=False,loc=(0,-0.1))\n\nplt.tight_layout()\nplt.show()\n","5394fcc9":"missed_results, empty_intervals","460e6ff8":"#set to 720\nMAX_ANGLE = 1","3cd9c9fd":"three_d_distribution = {}\nmissed_results = 0\nfor k in two_d_distribution:\n    three_d_distribution[k] = {}\n    for l in two_d_distribution[k]:\n        three_d_distribution[k][l] = {}\n        for y in range(number_of_intervals):\n            low, high = get_borders(y)\n            three_d_distribution[k][l][low] = init_dict(two_d_distribution[k][l]['result'])\n            three_d_distribution[k][l][low] = group_data(three_d_distribution[k][l][low], two_d_distribution[k][l]['idxs'], level=2)\n\n            if not three_d_distribution[k][l][low]['samples']:\n                three_d_distribution[k][l][low]['result'] = two_d_distribution[k][l]['result']\n            else:        \n                three_d_distribution[k][l][low]['result'] = get_result(three_d_distribution[k][l][low])\n            three_d_distribution[k][l][low]['missed'] = get_missing(three_d_distribution[k][l][low])\n            missed_results += three_d_distribution[k][l][low]['missed']\n            \nempty_intervals_arr = [[[0 for k in three_d_distribution[i][j] if (not three_d_distribution[i][j][k]['samples'])] for j in three_d_distribution[i]] \n                               for i in three_d_distribution]\nempty_intervals = len(reduce(operator.concat, reduce(operator.concat, empty_intervals_arr)))","5ba9b5ad":" for angle in tqdm(range(0,MAX_ANGLE)):\n    fig = plt.figure(figsize=(6,6))\n    ax = fig.add_subplot(111, projection=\"3d\")\n\n    ax.scatter3D(np_arr[:size_class_0,0], np_arr[:size_class_0,1], np_arr[:size_class_0,2],\n        edgecolor = color_map[0],\n        facecolor=(0,0,0,0),\n        s = 20,\n        marker = \"o\",\n        label = \"Class 0\"\n    )\n    ax.scatter3D(np_arr[size_class_0:,0], np_arr[size_class_0:,1], np_arr[size_class_0:,2],\n        edgecolor = color_map[1],\n        facecolor=(0,0,0,0),\n        s = 20,\n        marker = \"X\",\n        label = \"Class 1\",\n    )\n\n    for x in range(number_of_intervals):\n        for y in range(number_of_intervals):\n            for z in range(number_of_intervals):\n                low_x = x\/number_of_intervals\n                low_y = y\/number_of_intervals\n                low_z = z\/number_of_intervals\n\n                high_x = (x+1)\/number_of_intervals\n                high_y = (y+1)\/number_of_intervals\n                high_z = (z+1)\/number_of_intervals\n                \n                arr = []\n                if three_d_distribution[low_x][low_y][low_z]['samples']:\n                    arr.append([[low_x, low_y, low_z], [high_x, low_y, low_z], [high_x, high_y, low_z], [low_x, high_y, low_z]])\n                    arr.append([[low_x, low_y, high_z], [high_x, low_y, high_z], [high_x, high_y, high_z], [low_x, high_y, high_z]])\n                    arr.append([[low_x, low_y, low_z], [high_x, low_y, low_z], [high_x, low_y, high_z], [low_x, low_y, high_z]])\n                    arr.append([[low_x, high_y, low_z], [high_x, high_y, low_z], [high_x, high_y, high_z], [low_x, high_y, high_z]])\n                    arr.append([[low_x, low_y, low_z], [low_x, high_y, low_z], [low_x, high_y, high_z], [low_x, low_y, high_z]])\n                    arr.append([[high_x, low_y, low_z], [high_x, high_y, low_z], [high_x, high_y, high_z], [high_x, low_y, high_z]])\n                color = color_map[three_d_distribution[low_x][low_y][low_z]['result']]\n                \n                ax.add_collection3d(Poly3DCollection(\n                    arr,\n                    facecolors=color,\n                    linewidths=0.5,\n                    edgecolors=\"k\",\n                    alpha=0.25)\n                )\n\n    ax.set_xlim(0,1)\n    ax.set_ylim(0,1)\n    ax.set_zlim(0,1)\n\n    plt.tight_layout()\n    \n    ##folder should exist\n    ##to check may consider using os.listdir, os.mkdir\n    ax.view_init(30,angle\/2)\n    if angle < 10:\n        angle_str = \"00\" + str(angle)\n    elif angle < 100:\n        angle_str = \"0\" + str(angle)\n    else:\n        angle_str = str(angle)\n    #plt.savefig(\"3d\/step\"+angle_str+\".png\")\n\nplt.show()","7c662331":"missed_results, empty_intervals","bb5bbe49":"#ffmpeg -i step%03d.png -r 36 .\/360animation.mp4","804fd5f3":"## 3D","3190e675":"## 1D","bf1bec27":"## 2D","28d22792":"### Functions"}}