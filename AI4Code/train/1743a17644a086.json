{"cell_type":{"4677a30f":"code","cb1a22d8":"code","8d4506cd":"code","5d69aebc":"code","aa7d7daa":"code","58c81e58":"code","82f40b30":"code","7d89862f":"code","bf2ee8f1":"code","b06dc54d":"code","2244c4e1":"code","ef377d43":"code","d6eb09a2":"code","3607e7e4":"code","50db227b":"code","6c69dafe":"code","86ad9aed":"markdown","bff333ea":"markdown"},"source":{"4677a30f":"# Importing modules\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O\nimport os\n# for Data Preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n# For Data Spliting\nfrom sklearn.model_selection import train_test_split\n# For Model Accuracy\nfrom sklearn.metrics import classification_report, accuracy_score\n# Machine Learning Algorithms\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cb1a22d8":"data = pd.read_csv(\"\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","8d4506cd":"data","5d69aebc":"data.info()","aa7d7daa":"#fill missing value\navg = data['bmi'].mean()\ndata.bmi=(data.bmi.fillna(avg))\ndata.isnull().sum()","58c81e58":"def preprocess_inputs(df):\n    df = df.copy()\n    le = LabelEncoder()\n    df['gender'] = le.fit_transform(df['gender'])\n    df['ever_married'] = le.fit_transform(df['ever_married'])\n    df['work_type'] = le.fit_transform(df['work_type'])\n    df['Residence_type'] = le.fit_transform(df['Residence_type'])\n    df['smoking_status'] = le.fit_transform(df['smoking_status'])\n    return df","82f40b30":"df = preprocess_inputs(data)","7d89862f":"#drop id \ndf=df.drop(columns='id')","bf2ee8f1":"df","b06dc54d":"# feature selection\nfeatures = ['age',\n 'hypertension',\n 'heart_disease',\n 'ever_married',\n 'Residence_type',\n 'avg_glucose_level',\n 'bmi',\n 'gender',\n 'work_type',\n 'smoking_status']\n\nlabel = ['stroke']\n\nX = df[features]\ny = df[label]","2244c4e1":"#Splitting tha data for train and test\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,test_size=0.2,random_state=100)","ef377d43":"#STANDARDIZATION OF THE DATA AS DATA ARE IN DIFFERENT SCALES\nsc=StandardScaler()\nX_std= sc.fit_transform(X)\ntrain_X_std = sc.fit_transform(train_X)\nval_X_std = sc.transform(val_X)","d6eb09a2":"model_accuracy = pd.DataFrame(columns=['Model','Accuracy'])\nmodels = {\"LR\": LogisticRegression(),\n          \"KNN\" : KNeighborsClassifier(),\n          \"DT\" : DecisionTreeClassifier(),\n          'RFC' : RandomForestClassifier(),\n          'BGC' : BaggingClassifier(),\n          'ABC' : AdaBoostClassifier(),\n          'DTC' : DecisionTreeClassifier(),\n          }\n\n\nfor model_name, model in models.items():\n    model.fit(train_X_std, train_y.values.ravel())\n    pred = model.predict(val_X_std)\n    ac = accuracy_score(val_y,pred)\n    print( model_name + ' Accuracy scores')\n    print(ac)\n    model_accuracy = model_accuracy.append({'Model': model_name, 'Accuracy': ac}, ignore_index=True)","3607e7e4":"# Sorting Models by there Accuracy Scores\nmodel_accuracy.sort_values('Accuracy', ascending=False)","50db227b":"#Training final Model with all data\nfinal_model=KNeighborsClassifier()\nfinal_model.fit(X_std,y.values.ravel())","6c69dafe":"p= final_model.predict(val_X_std)\nacc = accuracy_score(val_y,p)\nprint(' Accuracy scores')\nprint(acc)","86ad9aed":"# Training diffrent ML models for getting best model based on Accuracy Score ","bff333ea":"# KNN to go\nAs we can see KNeighborsClassifier, LogisticRegression, RandomForestClassifier\nhas a accuracy of score of 95%."}}