{"cell_type":{"f19e65b5":"code","c11c73f8":"code","147f9902":"code","c5ffbff9":"code","ff80b1b9":"code","5fdb99ef":"code","a41cf1a1":"code","002d5d32":"code","4724a2f8":"code","adab587f":"code","e2c77514":"code","c94a3de6":"code","ab61c957":"code","9475e7ef":"code","77937e08":"code","e7e483d8":"code","630c93e0":"code","46d0e49a":"code","d0db4cf0":"code","efe54009":"code","b82fcfbf":"code","60e16e0d":"code","88b0b892":"code","24c7750c":"code","6747f3fd":"code","71ee14fc":"code","7081175b":"code","40bba281":"code","820020e0":"code","9d99973d":"code","3cddef5e":"code","e4b90a4a":"code","bf43430c":"code","e02005dc":"code","ef3729b2":"code","b03b56df":"code","c2d48cb2":"code","18d36761":"code","acd439c3":"code","c0452f2b":"code","4fa24e04":"code","69eabb4b":"code","a63d8c4a":"code","41a4f840":"code","aabd988f":"markdown","af232a05":"markdown","67d6c41a":"markdown","65e7f616":"markdown","60934144":"markdown","26f87987":"markdown"},"source":{"f19e65b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c11c73f8":"data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","147f9902":"data.head()","c5ffbff9":"data.drop(['Name','Ticket','PassengerId','Cabin'],axis = 1,inplace = True)","ff80b1b9":"data.head()","5fdb99ef":"import seaborn as sns","a41cf1a1":"data.boxplot('Age')","002d5d32":"sns.distplot(data['Age'])","4724a2f8":"data['Age'] = data['Age'].fillna(data['Age'].median())\ndata['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])\nupper_boundary = data['Age'].mean() + 3*data['Age'].std()\nlower_boundary = data['Age'].mean() - 3*data['Age'].std()\nprint(upper_boundary)\nprint(lower_boundary)","adab587f":"data.loc[data['Age']>69,'Age']=73\ndata.loc[data['Fare']>100,'Fare']=100","e2c77514":"sns.distplot(data['SibSp'])","c94a3de6":"data.loc[data['SibSp']>4,'SibSp']=4\ndata.loc[data['Parch']>3,'Parch']=3","ab61c957":"data.loc[data['Age']<18,'New_Age_Cat']='young'\ndata.loc[(data['Age']>=18) & (data['Age']<50),'New_Age_Cat']='adult'\ndata.loc[(data['Age']>=50),'New_Age_Cat']='senior'","9475e7ef":"data.loc[(data['Age']<18) & (data['Sex']== 'male'),'cat_male']= 'young_male'\ndata.loc[((data['Age']>=18) & (data['Age']<50)) & (data['Sex']== 'male'),'cat_male']= 'adult_male'\ndata.loc[(data['Age']>=50) & (data['Sex']== 'male'),'cat_male']= 'senior_male'\n# same thing for female\ndata.loc[(data['Age']<18) & (data['Sex']== 'female'),'cat_male']= 'young_female'\ndata.loc[((data['Age']>=18) & (data['Age']<50)) & (data['Sex']== 'female'),'cat_male']= 'adult_female'\ndata.loc[(data['Age']>=50) & (data['Sex']== 'female'),'cat_male']= 'senior_female'\n","77937e08":"# Is alone\ndata.loc[(data['SibSp'] + data['Parch'] > 0),'is_alone'] ='not_alone'\ndata.loc[(data['SibSp'] + data['Parch'] == 0),'is_alone'] ='alone'\n\n#data.loc[(data['SibSp'] + data['Parch'] > 0) & (data['SibSp'] + data['Parch'] < 2),'is_alone'] ='small_f'\n#data.loc[(data['SibSp'] + data['Parch'] > 1) & (data['SibSp'] + data['Parch'] < 4),'is_alone'] ='medium_f'\n#data.loc[(data['SibSp'] + data['Parch'] >= 4) ,'is_alone'] ='large_f'\n","e7e483d8":"sns.barplot(x = 'is_alone', y = 'Survived', data = data)\n","630c93e0":"data.loc[(data['Fare']<20),'new_fare']='low'\ndata.loc[(data['Fare']>=20) & (data['Fare']<40),'new_fare']='medium'\ndata.loc[(data['Fare']>=40)& (data['Fare']<60),'new_fare']='high'\ndata.loc[(data['Fare']>=60),'new_fare']='ver_high'","46d0e49a":"data.loc[(data['Sex']=='male') & (data['new_fare']=='low'),'sex\/fare']='male_low'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='medium'),'sex\/fare']='male_medium'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='high'),'sex\/fare']='male_high'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='ver_high'),'sex\/fare']='male_ver_high'\n\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='low'),'sex\/fare']='female_low'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='medium'),'sex\/fare']='female_medium'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='high'),'sex\/fare']='female_high'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='ver_high'),'sex\/fare']='female_ver_high'\n\n","d0db4cf0":"Sex = pd.get_dummies(data['Sex'],drop_first=True)\nEmbarked = pd.get_dummies(data['Embarked'],drop_first=True)\nNew_Age_Cat = pd.get_dummies(data['New_Age_Cat'],drop_first=True)\ncat_male = pd.get_dummies(data['cat_male'],drop_first=True)\nis_alone = pd.get_dummies(data['is_alone'],drop_first=True)\nnew_fare = pd.get_dummies(data['new_fare'],drop_first=True)\nsex_fare = pd.get_dummies(data['sex\/fare'],drop_first=True)\n\n","efe54009":"data = pd.concat([data,Sex,Embarked,New_Age_Cat,cat_male,is_alone,new_fare,sex_fare],axis =1)","b82fcfbf":"data.head()","60e16e0d":"data.drop(['Sex','Age','Fare','Embarked','New_Age_Cat','cat_male','is_alone','new_fare','sex\/fare'],axis =1 ,inplace = True)","88b0b892":"data.head()","24c7750c":"from sklearn.model_selection import train_test_split\ntrain_set,test_set = train_test_split(data,test_size=.2,random_state=42)","6747f3fd":"x = train_set.drop(['Survived'],axis =1)\ny = train_set['Survived']\nxt = test_set.drop(['Survived'],axis =1)\nyt = test_set['Survived']","71ee14fc":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost\nfrom sklearn.tree import DecisionTreeClassifier\n#model = DecisionTreeClassifier()\n#model = xgboost.XGBClassifier()\n#model = LogisticRegression()\nmodel = RandomForestClassifier()\nmodel.fit(x,y)\ny_pred = model.predict(xt)","7081175b":"from sklearn.metrics import confusion_matrix,classification_report\nprint(confusion_matrix(yt,y_pred))\nprint(classification_report(yt,y_pred))","40bba281":"from sklearn.model_selection import RandomizedSearchCV\n# for randomforest\nn_estimators=[int(x) for x in np.linspace(start = 100,stop=2000,num=10)]\ncriterion=[\"gini\", \"entropy\"]\nmax_depth=[int(x) for x in np.linspace(100,1500,10)]\nmin_samples_split=[1,3,4,5,7]\nmin_samples_leaf=[1,2,3,7,5]","820020e0":"random_params = {\n    'n_estimators':n_estimators,\n    'criterion':criterion,\n    'max_depth':max_depth,\n    'min_samples_split':min_samples_split,\n    'min_samples_leaf':min_samples_leaf,\n}","9d99973d":"import warnings\nwarnings.simplefilter(\"ignore\")","3cddef5e":"rd_search = RandomizedSearchCV(model,param_distributions=random_params,n_iter=100,cv =5,verbose=2,n_jobs=-1,random_state=42)\nrd_search.fit(x,y)\nrd_pred = rd_search.predict(xt)\n","e4b90a4a":"print(confusion_matrix(yt,rd_pred))\nprint(classification_report(yt,rd_pred))","bf43430c":"data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","e02005dc":"data.head()","ef3729b2":"data.drop(['Name','Ticket','Cabin','PassengerId'],axis = 1,inplace = True)","b03b56df":"data.head()","c2d48cb2":"data.loc[data['Age']<18,'New_Age_Cat']='young'\ndata.loc[(data['Age']>=18) & (data['Age']<50),'New_Age_Cat']='adult'\ndata.loc[(data['Age']>=50),'New_Age_Cat']='senior'\ndata.loc[(data['Age']<18) & (data['Sex']== 'male'),'cat_male']= 'young_male'\ndata.loc[((data['Age']>=18) & (data['Age']<50)) & (data['Sex']== 'male'),'cat_male']= 'adult_male'\ndata.loc[(data['Age']>=50) & (data['Sex']== 'male'),'cat_male']= 'senior_male'\n# same thing for female\ndata.loc[(data['Age']<18) & (data['Sex']== 'female'),'cat_male']= 'young_female'\ndata.loc[((data['Age']>=18) & (data['Age']<50)) & (data['Sex']== 'female'),'cat_male']= 'adult_female'\ndata.loc[(data['Age']>=50) & (data['Sex']== 'female'),'cat_male']= 'senior_female'\n# Is alone\ndata.loc[(data['SibSp'] + data['Parch'] > 0),'is_alone'] ='not_alone'\ndata.loc[(data['SibSp'] + data['Parch'] == 0),'is_alone'] ='alone'\n\n#data.loc[(data['SibSp'] + data['Parch'] > 0) & (data['SibSp'] + data['Parch'] < 2),'is_alone'] ='small_f'\n#data.loc[(data['SibSp'] + data['Parch'] > 1) & (data['SibSp'] + data['Parch'] < 4),'is_alone'] ='medium_f'\n#data.loc[(data['SibSp'] + data['Parch'] >= 4) ,'is_alone'] ='large_f'\ndata.loc[(data['Fare']<20),'new_fare']='low'\ndata.loc[(data['Fare']>=20) & (data['Fare']<40),'new_fare']='medium'\ndata.loc[(data['Fare']>=40)& (data['Fare']<60),'new_fare']='high'\ndata.loc[(data['Fare']>=60),'new_fare']='ver_high'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='low'),'sex\/fare']='male_low'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='medium'),'sex\/fare']='male_medium'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='high'),'sex\/fare']='male_high'\ndata.loc[(data['Sex']=='male') & (data['new_fare']=='ver_high'),'sex\/fare']='male_ver_high'\n\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='low'),'sex\/fare']='female_low'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='medium'),'sex\/fare']='female_medium'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='high'),'sex\/fare']='female_high'\ndata.loc[(data['Sex']=='female') & (data['new_fare']=='ver_high'),'sex\/fare']='female_ver_high'\n\n","18d36761":"Sex = pd.get_dummies(data['Sex'],drop_first=True)\nEmbarked = pd.get_dummies(data['Embarked'],drop_first=True)\nNew_Age_Cat = pd.get_dummies(data['New_Age_Cat'],drop_first=True)\ncat_male = pd.get_dummies(data['cat_male'],drop_first=True)\nis_alone = pd.get_dummies(data['is_alone'],drop_first=True)\nnew_fare = pd.get_dummies(data['new_fare'],drop_first=True)\nsex_fare = pd.get_dummies(data['sex\/fare'],drop_first=True)\n\n","acd439c3":"data = pd.concat([data,Sex,Embarked,New_Age_Cat,cat_male,is_alone,new_fare,sex_fare],axis =1)\ndata.drop(['Sex','Age','Fare','Embarked','New_Age_Cat','cat_male','is_alone','new_fare','sex\/fare'],axis =1 ,inplace = True)","c0452f2b":"test_data = data","4fa24e04":"test_data.head()","69eabb4b":" rd_pred =rd_search.predict(test_data)","a63d8c4a":"sample_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ndataset = pd.DataFrame({'PassengerId':sample_sub['PassengerId'],'Survived': rd_pred})","41a4f840":"dataset.to_csv('submission.csv',index = False)","aabd988f":"# Data Analysis","af232a05":"# Model selection","67d6c41a":"# Calculating upper boundary for outliers","65e7f616":"handling outlier","60934144":"# feature engineering(creating new feature )","26f87987":"# hyperparameter tunnning"}}