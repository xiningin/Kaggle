{"cell_type":{"01935ab6":"code","86bdaeff":"code","6e5823c1":"code","6b846f98":"code","3b59c9fe":"code","28a9daf6":"code","5b9e3270":"code","2952a7e0":"code","868d481b":"code","1ea50a45":"code","22d77b4a":"code","09d6fb47":"code","92db1741":"code","e5e705e2":"code","cdf05dce":"code","beebdb74":"markdown"},"source":{"01935ab6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","86bdaeff":"train = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/train.csv')\ntest = pd.read_csv('..\/input\/standalone-train-and-test-preprocessing\/test.csv')","6e5823c1":"features = test.columns\nfeatures = set(features) - set(['TransactionID','TransactionDT','id_30','id_31'])","6b846f98":"train = train[features]\ntest = test[features]","3b59c9fe":"train['target'] = 0\ntest['target'] = 1","28a9daf6":"train_test = pd.concat([train, test], axis =0)\ndel train, test\ngc.collect()\n\ntarget = train_test['target'].values","5b9e3270":"object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","2952a7e0":"# Label Encoding\nfor f in object_columns:\n    if f in train_test.columns:\n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(train_test[f].values) )\n        train_test[f] = lbl.transform(list(train_test[f].values))\n","868d481b":"train, test = model_selection.train_test_split(train_test, test_size=0.33, random_state=42, shuffle=True)","1ea50a45":"del train_test\ngc.collect()","22d77b4a":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ngc.collect()","09d6fb47":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","92db1741":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.1,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","e5e705e2":"num_round = 500\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","cdf05dce":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","beebdb74":"Let's take a look how similar train and test sets are."}}