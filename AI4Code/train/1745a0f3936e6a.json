{"cell_type":{"0ef77575":"code","2a4514fd":"code","8bfc3f8e":"code","4755712f":"code","4479ce75":"code","791238b7":"code","74c7fa37":"code","c0ccd2ac":"markdown","e41906f2":"markdown","92d2a7e3":"markdown","128d2fa9":"markdown","cae1baf9":"markdown","065800f8":"markdown","4bb0fa71":"markdown","ab8241fc":"markdown","32ffb26c":"markdown"},"source":{"0ef77575":"from keras.datasets import mnist\n(train_X, train_y), (test_X, test_y) = mnist.load_data()\nprint('X_train: ' + str(train_X.shape))\nprint('Y_train: ' + str(train_y.shape))\nprint('X_test:  '  + str(test_X.shape))\nprint('Y_test:  '  + str(test_y.shape))","2a4514fd":"from matplotlib import pyplot\nfrom matplotlib import pyplot\nfor i in range(9):\t\n    pyplot.subplot(330 + 1 + i)\n    pyplot.imshow(train_X[i], cmap=pyplot.get_cmap('gray'))\n    pyplot.show()","8bfc3f8e":"train_X = train_X.reshape(train_X.shape[0], 28, 28, 1)\ntest_X = test_X.reshape(test_X.shape[0], 28, 28, 1)\ninput_shape = (28, 28, 1)\n# Making sure that the values are float so that we can get decimal points after division\ntrain_X = train_X.astype('float32')\ntest_X = test_X.astype('float32')\n# Normalizing the RGB codes by dividing it to the max RGB value.\ntrain_X \/= 255\ntest_X \/= 255\nprint('x_train shape:', train_X.shape)\nprint('Number of images in x_train', train_X.shape[0])\nprint('Number of images in x_test', test_X.shape[0])","4755712f":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D\nmodel = Sequential()\nmodel.add(Conv2D(28, kernel_size=(3,3), input_shape=input_shape))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten()) \nmodel.add(Dense(128, activation=tf.nn.relu))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10,activation=tf.nn.softmax))","4479ce75":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy', \n              metrics=['accuracy'])\nmodel.fit(x=train_X,y=train_y, epochs=10)","791238b7":"model.evaluate(test_X, test_y)","74c7fa37":"import matplotlib.pyplot as plt\nimage_index = 4443 # Vous pouvez n'importe quelle image a partir de 10000 exemples\nplt.imshow(test_X[image_index].reshape(28, 28),cmap='Greys')\npred = model.predict(test_X[image_index].reshape(1, 28, 28, 1))\nprint(\"Le Nombre est : \",pred.argmax())","c0ccd2ac":"> Nous pouvons exp\u00e9rimenter avec n'importe quel nombre pour la premi\u00e8re couche dense ; cependant, la couche dense finale doit avoir 10 neurones puisque nous avons 10 classes de nombres (0, 1, 2, \u2026, 9)","e41906f2":"# Construire le r\u00e9seau de neurones convolutifs","92d2a7e3":"# \u00c9valuation du mod\u00e8le","128d2fa9":"# normaliser les images","cae1baf9":"# Optimiser notre mod\u00e8le","065800f8":"# Congratulations !\n\n> ****Bien qu'il ne s'agisse pas vraiment d'une bonne \u00e9criture du chiffre 3, \nnotre mod\u00e8le a pu le classer en 3.","4bb0fa71":"# \u00c9valuation du mod\u00e8le avec une image de test","ab8241fc":"# Chargement de l'ensemble de donn\u00e9es MNIST en Python","32ffb26c":"# Tracer l'ensemble de donn\u00e9es MNIST"}}