{"cell_type":{"a52a79a5":"code","45e96cdb":"code","829ad85b":"code","4d2f9093":"code","6356aa51":"code","60e2e046":"code","74f1ed33":"code","c4166450":"code","60566ed8":"code","1da2918f":"code","f129c264":"code","c7ec7c62":"code","674375e3":"code","f56096f8":"code","2b48f049":"code","5a1a29d9":"code","1efdc0b1":"code","46120776":"code","b58b2911":"code","7f80fac6":"code","38335b5f":"code","1e9da38f":"code","66f6827c":"code","cf27c0d0":"code","895f7453":"code","05f7b2f3":"code","89a8aede":"code","8c925bcf":"code","e6b52aa7":"code","55fd4fd0":"code","1c33f06e":"code","de2402bd":"code","27649a6c":"code","cb3c74a3":"code","df8a167f":"code","17ad9ceb":"code","84725613":"code","3f57cd4c":"code","53121b54":"code","bc924fe9":"code","9abbe903":"code","038c2398":"code","10340c6c":"code","98d925ef":"code","0a4ddb89":"code","6be2c7f0":"code","6455a4ab":"code","31d83346":"code","c50cbd0e":"code","2ccb419f":"code","82c32c28":"code","09eed2c6":"code","d202c145":"code","20a713b9":"code","c806f903":"code","209b3f52":"markdown"},"source":{"a52a79a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45e96cdb":"data = pd.read_csv('\/kaggle\/input\/pump-sensor-data\/sensor.csv',parse_dates=[1],index_col = [1])\ndata.head()","829ad85b":"data.info()","4d2f9093":"data.index","6356aa51":"data.isnull().sum()","60e2e046":"data.duplicated().sum()","74f1ed33":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nsns.set_theme(style=\"whitegrid\")\n\nimport sys\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\n%matplotlib inline","c4166450":"fig,ax = plt.subplots(figsize = (15,15))\nnew_data = data.drop(['machine_status'],axis = 1)\nsns.heatmap(new_data.isnull(),cbar = False)","60566ed8":"new_data.columns","1da2918f":"data = data.drop(['sensor_15','Unnamed: 0'],axis = 1)","f129c264":"data.shape","c7ec7c62":"data.columns","674375e3":"data.describe().T","f56096f8":"new_data = data","2b48f049":"data.corr()","5a1a29d9":"data['machine_status'].nunique()","1efdc0b1":"data['machine_status'].unique()","46120776":"new_data['machine_status'].replace({'NORMAL' : 0,'BROKEN' : 1,'RECOVERING' : 2},inplace = True)","b58b2911":"new_data['machine_status']","7f80fac6":"corr = new_data.corr()['machine_status']","38335b5f":"val = corr.abs().sort_values(ascending=False)","1e9da38f":"val.to_dict()","66f6827c":"new_list = ['sensor_04','sensor_10','sensor_11','sensor_00','sensor_02','sensor_06','sensor_12','sensor_50','sensor_07','sensor_01','sensor_03','sensor_08','sensor_09','sensor_05','sensor_40','sensor_48','sensor_38','sensor_49','sensor_13','sensor_47','sensor_44']","cf27c0d0":"len(new_list)","895f7453":"new_data.var().sort_values(ascending = False)","05f7b2f3":"data.skew().sort_values(ascending = False)","89a8aede":"data.std().sort_values(ascending = False)","8c925bcf":"new_data = new_data[new_list]","e6b52aa7":"new_data.head(5)","55fd4fd0":"data = new_data","1c33f06e":"data.head(5)","de2402bd":"data.isnull().sum().sort_values(ascending = False)","27649a6c":"data['sensor_50'].describe().T","cb3c74a3":"data['sensor_50'].nunique()","df8a167f":"data['sensor_50'].median()","17ad9ceb":"fig,ax = plt.subplots(figsize = (15,15))\nsns.countplot(x = data['sensor_50'].head(20),data = data)","84725613":"sns.distplot(a = data['sensor_50'])","3f57cd4c":"data['sensor_50'].skew()","53121b54":"data['sensor_50'].fillna((data['sensor_50'].mean()),inplace = True)","bc924fe9":"data['sensor_50'].isnull().sum()","9abbe903":"sns.distplot(a = data['sensor_50'])","038c2398":"fig,ax = plt.subplots(figsize = (15,15))\nsns.boxplot(x = data['sensor_50'])","10340c6c":"def std_based(col_name,df):\n    mean = df[col_name].mean()\n    std = df[col_name].std()\n    cut_off = std * 3\n    lower, upper = mean - cut_off, mean + cut_off\n    new_df = df[(df[col_name] < upper) & (df[col_name] > lower)]\n    return new_df","98d925ef":"data = std_based('sensor_50',data)","0a4ddb89":"data.sensor_50.shape","6be2c7f0":"fig,ax = plt.subplots(figsize = (15,15))\nsns.boxplot(x = data['sensor_50'])","6455a4ab":"data = std_based('sensor_50',data)","31d83346":"data.sensor_50.shape","c50cbd0e":"fig,ax = plt.subplots(figsize = (15,15))\nsns.boxplot(x = data['sensor_50'])","2ccb419f":"data.sensor_50.std()","82c32c28":"count = 0\nfor i in data.sensor_50:\n  if i > (3 * data.sensor_50.std()): \n    count += 1\n\nprint(count)","09eed2c6":"data = std_based('sensor_50',data)","d202c145":"data.sensor_50.shape","20a713b9":"fig,ax = plt.subplots(figsize = (15,15))\nsns.boxplot(x = data['sensor_50'])","c806f903":"data.shape","209b3f52":"# The thumb rule is :\n\nIf the skewness is between -0.5 to +0.5 then we can say data is fairly symmetrical. If the skewness is between -1 to -0.5 or 0.5 to 1 then data is moderately skewed.\n\nAnd if the skewness is less than -1 and greater than +1 then our data is heavily skewed."}}