{"cell_type":{"7ba99633":"code","97e0ca67":"code","c895e765":"code","d913bb3c":"code","9e6480a6":"code","a0b4dcd0":"code","2f7b357b":"code","b3d3c11d":"code","a76300c8":"code","76b175cf":"code","d9dbc3bf":"code","afaa863d":"code","14173b57":"code","74c8cd9c":"code","d177b651":"code","377f8f37":"code","8d9be9bd":"code","ff36fbb8":"code","f45c958a":"code","86df0a76":"code","7e939096":"code","408d6a9e":"code","a00bc3aa":"code","9afa9f19":"code","cfd8697e":"code","0df37d6e":"code","276c611a":"code","d67f58f8":"code","9681e530":"code","b51afb68":"code","20ea5b33":"code","9e435f12":"code","fe00e514":"code","dda8d111":"code","75869b75":"code","83dd2be4":"code","9187b084":"code","fdac079b":"code","a9fae6e8":"code","c4f70ce9":"code","7b9c0bd1":"code","800ba955":"code","607cbb99":"code","2b535a75":"code","954e9b78":"code","4218db37":"code","1f9e3d4c":"markdown","fd5110e7":"markdown","c75671e6":"markdown","124f612d":"markdown","b45f9ae2":"markdown","6d306b45":"markdown","88f7854b":"markdown","883c2d5c":"markdown","950c1aa5":"markdown","6a1519d3":"markdown","d7d7c203":"markdown","2e3454ab":"markdown","9d1ca23d":"markdown","bbe51e0e":"markdown","c0ddb0a0":"markdown","42ed7ea5":"markdown","0c6c772f":"markdown","e03ef070":"markdown"},"source":{"7ba99633":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns \nsns.set_style('darkgrid')\nimport matplotlib.pyplot as plt \n\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","97e0ca67":"data=pd.read_csv('\/kaggle\/input\/body-performance-data\/bodyPerformance.csv')\ndata.sample(5)","c895e765":"data.info()","d913bb3c":"data.describe()","9e6480a6":"print(f'Number of rows in our Data :{data.shape[0]}')\nprint(f'Number of columns in our Data :{data.shape[1]}')","a0b4dcd0":"data.isnull().sum()","2f7b357b":"data.duplicated().sum()","b3d3c11d":"## making copy of our data \n\ndf=data.copy()","a76300c8":"df.columns","76b175cf":"df['height_m']=df['height_cm']\/100\ndf[\"BMI\"]=round(df['weight_kg']\/(df['height_m']**2),2)\ndf.drop(labels=['weight_kg','height_cm','height_m'],axis=1,inplace=True)\ndf.head()","d9dbc3bf":"num_col=[col for col in df.columns if df[col].dtype != 'O']\ncat_col=[col for col in df.columns if df[col].dtype == 'O']\nprint(f'Numerical Columns:{num_col}')\nprint(f'Categorical Columns:{cat_col}')","afaa863d":"def class_to_num(x):\n    if x=='A':\n        return 0\n    elif x=='B':\n        return 1\n    elif x=='C':\n        return 2\n    return 3","14173b57":"X=df.drop('class',axis=1)\ny=df['class'].apply(class_to_num)","74c8cd9c":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)","d177b651":"X.head()","377f8f37":"y.head()","8d9be9bd":"from sklearn.feature_selection import mutual_info_classif\n\nimportances=mutual_info_classif(X[num_col],df['class'])\nfeat_imp=pd.Series(importances,num_col)\nfeat_imp.plot(kind='barh')\nplt.show()","ff36fbb8":"from sklearn.feature_selection import SelectKBest\nselect=SelectKBest(k=5)\nselect.fit(X_train[num_col],y_train)","f45c958a":"select.get_support()","86df0a76":"print(\"The 5 Best Numerical Columns are:\")\nX_train[num_col].columns[select.get_support()]","7e939096":"Imp_feat=['body fat_%', 'sit and bend forward_cm', 'sit-ups counts','broad jump_cm', 'BMI','gender']\nprint(Imp_feat)","408d6a9e":"plt.figure(figsize=(10,6))\ndf.gender.value_counts().plot.pie(autopct='%.2f%%',explode=[0.08]*2)","a00bc3aa":"plt.figure(figsize=(10,6))\nsns.histplot(x=df.BMI,bins=50)","9afa9f19":"plt.figure(figsize=(10,6))\nsns.histplot(x=df['body fat_%'])","cfd8697e":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df['sit and bend forward_cm'])","0df37d6e":"plt.figure(figsize=(10,6))\nsns.histplot(x=df['sit-ups counts'])","276c611a":"plt.figure(figsize=(10,6))\nsns.histplot(x=df['broad jump_cm'])","d67f58f8":"plt.figure(figsize=(10,6))\nsns.countplot(x=df['class'])","9681e530":"plt.figure(figsize=(10,6))\nsns.boxplot(y=df['age'],x=df['class'])","b51afb68":"plt.figure(figsize=(10,6))\nsns.countplot(x=df['class'],hue=df['gender'])","20ea5b33":"plt.figure(figsize=(10,6))\nsns.boxplot(y=df['BMI'],x=df['class'])","9e435f12":"plt.figure(figsize=(10,6))\nsns.boxplot(y=df['BMI'],x=df['gender'])","fe00e514":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df['body fat_%'],y=df['class'])","dda8d111":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df['broad jump_cm'],y=df['class'])","75869b75":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df['sit-ups counts'],y=df['class'])","83dd2be4":"plt.figure(figsize=(10,6))\nsns.boxplot(x=df['sit and bend forward_cm'],y=df['class'])","9187b084":"def impute_outlier(x):\n    Q1,Q3=np.percentile(x,[25,75])\n    IQR=Q3-Q1\n    \n    low_lim=Q1-(IQR*1.5)\n    up_lim=Q3+(IQR*1.5)\n    return low_lim,up_lim","fdac079b":"l,u=impute_outlier(X_train['body fat_%'])\nl1,u1=impute_outlier(X_train['sit and bend forward_cm'])\nl2,u2=impute_outlier(X_train['broad jump_cm'])\nl3,u3=impute_outlier(X_train['sit-ups counts'])","a9fae6e8":"X_train['body fat_%'] = np.where(\n    X_train['body fat_%']>u,\n    u,\n    np.where(\n        X_train['body fat_%']<l,\n        l,\n        X_train['body fat_%']\n    )\n)\n\nX_train['sit and bend forward_cm'] = np.where(\n    X_train['sit and bend forward_cm']>u1,\n    u1,\n    np.where(\n        X_train['sit and bend forward_cm']<l1,\n        l1,\n        X_train['sit and bend forward_cm']\n    )\n)\n\n\nX_train['sit-ups counts'] = np.where(\n    X_train['sit-ups counts']>u3,\n    u3,\n    np.where(\n        X_train['sit-ups counts']<l3,\n        l3,\n        X_train['sit-ups counts']\n    )\n)\n\nX_train['broad jump_cm'] = np.where(\n    X_train['broad jump_cm']>u2,\n    u2,\n    np.where(\n        X_train['broad jump_cm']<l2,\n        l2,\n        X_train['broad jump_cm']\n    )\n)\n\n\n\n","c4f70ce9":"X_test['body fat_%'] = np.where(\n    X_test['body fat_%']>u,\n    u,\n    np.where(\n        X_test['body fat_%']<l,\n        l,\n        X_test['body fat_%']\n    )\n)\n\nX_test['sit and bend forward_cm'] = np.where(\n    X_test['sit and bend forward_cm']>u1,\n    u1,\n    np.where(\n        X_test['sit and bend forward_cm']<l1,\n        l1,\n        X_test['sit and bend forward_cm']\n    )\n)\n\n\nX_test['sit-ups counts'] = np.where(\n    X_test['sit-ups counts']>u3,\n    u3,\n    np.where(\n        X_test['sit-ups counts']<l3,\n        l3,\n        X_test['sit-ups counts']\n    )\n)\n\nX_test['broad jump_cm'] = np.where(\n    X_test['broad jump_cm']>u2,\n    u2,\n    np.where(\n        X_test['broad jump_cm']<l2,\n        l2,\n        X_test['broad jump_cm']\n    )\n)\n\n\n\n","7b9c0bd1":"sns.boxplot(x=X_train['broad jump_cm'])","800ba955":"def gender_num(x):\n    if x =='M':\n        return 1\n    else:\n        return 0","607cbb99":"X_train['gender_Male']=X['gender'].apply(gender_num)\nX_test['gender_Male']=X_test['gender'].apply(gender_num)","2b535a75":"X_train.head()","954e9b78":"X_train.drop(labels=['gender','diastolic','systolic','gripForce','age'],axis=1,inplace=True)\n\nX_test.drop(labels=['gender','diastolic','systolic','gripForce','age'],axis=1,inplace=True)\n","4218db37":"X_test.head()","1f9e3d4c":"### <u><strong>Key Points<\/strong><\/u> :","fd5110e7":"### <em>spliting data into target and Independent features ","c75671e6":"## <u><em> Feature Engineering <\/strong><\/u>","124f612d":"## <u>Traning and Testing Data<\/u> ","b45f9ae2":"## <u>Machine Learning Algorithms<\/u>","6d306b45":"### There is no `missing value` in our dataset","88f7854b":"### <em> Extracting Numerical and Categorical Cols<\/em>","883c2d5c":"### <em>Selecting Relevant features<em>  ","950c1aa5":"## <u><strong> Insights <\/u><\/strong>","6a1519d3":"### Adding `BMI` which can describe height and weight better","d7d7c203":"## <u><strong> Data Preprocessing <\/u><\/strong>","2e3454ab":"## <u><strong> Importing Data <\/strong><\/u>","9d1ca23d":"#### Dropping less relevant features ","bbe51e0e":"## <u><em> Univariate Analysis <\/em><\/u>","c0ddb0a0":"### <em> Outliers <\/em>","42ed7ea5":"## Handling Categorical data ","0c6c772f":"## <u><em> BI Variate Analysis <\/em><\/u>","e03ef070":"### <u>Selecting Top 5 Numerical Feature<\/u>"}}