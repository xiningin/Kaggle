{"cell_type":{"1b4d2684":"code","333358bb":"code","1e22733f":"code","46cd4e7d":"code","72c38c38":"code","f693c6d1":"code","772e90f2":"markdown","b6f82b33":"markdown","c8315988":"markdown","e554ba39":"markdown","403f83b7":"markdown"},"source":{"1b4d2684":"!pip install keras==2.3.1","333358bb":"import zipfile\nimport os\nimport cv2\nimport seaborn as sns\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib.pyplot as plt","1e22733f":"directory = '..\/input\/homerbart1\/homer_bart_1'  #path of extracted dataset (current location)\nfiles = [os.path.join(directory, f) for f in sorted(os.listdir(directory))] #contains paths of each images\n\nexport = 'mouth,pants,shoes,tshirt,shorts,sneakers,class\\n' #feature names (to make as heading in csv file later)\n\nshow_images = True #whether to show the images or not\nfeatures = [] #contains all features","46cd4e7d":"b_n = 1 #count of bart images\nh_n =1  #count of homer images\n\n#create directories to store feature detected images\nos.mkdir('.\/Images')\nos.mkdir('.\/Images\/Bart')\nos.mkdir('.\/Images\/Homer')\n\nfor image_path in files:  #go through each image one by one\n  try:  #try for DSstore file\n    original_image = cv2.imread(image_path) #read images\n    (H, W) = original_image.shape[:2]   #stores heigth, width of each image\n  except:\n    continue\n\n  image = original_image.copy() #copy of image\n  image_features = [] #features of each images\n\n#counting how many number of pixels having the features of holmer and bart based on colors\n  mouth = pants = shoes =0  #holmer's features\n  tshirt = shorts = sneakers =0   #bart's features\n  \n  image_name = os.path.basename(os.path.normpath(image_path)) #extract only name freom file path\n\n  if(image_name.startswith('b')): #encoding categorical data \n        class_name = 0  #bart - 0\n  else:\n        class_name = 1  #homer -1\n\n#go through each pixel one by one to extract colors of each pixel\n  for height in range(0,H): #each pixel in height\n    for width in range(0, W): #each pixel in width\n      blue = image.item(height, width, 0)     #extract value from height,width (location) and 0th channel in BGR which is blue channel\n      green = image.item(height, width, 1)     #extract value from height,width (location) and 1st channel in BGR which is green channel\n      red = image.item(height, width, 2)     #extract value from height,width (location) and 2nd channel in BGR which is red channel\n\n      #Homer - brown(mouth)\n      if(blue>=95 and blue<=140 and green >=160 and green <=185 and red >= 175 and red <= 200):\n        image[height,width] = [0,255,255]   #color the pixel with yellow color\n        mouth+=1  #incrementing that one pixel has the color of the feature\n\n      #Homer - blue (pants)\n      if(blue>=150 and blue<=180 and green >=98 and green <=120 and red >= 0 and red <= 90):\n        image[height,width] = [0,255,255]   #color the pixel with yellow color\n        pants+=1\n      \n      #Homer - gray(shoes)\n      if(height > (H\/2)):   #since shoes are present only at bottom only considering lower part of image \n        if(blue>=25 and blue<=45 and green >=25 and green <=45 and red >= 25 and red <= 45):\n          image[height,width] = [0,255,255]   #color the pixel with yellow color\n          shoes+=1\n\n      #Bart - orange (tshirt)\n      if(blue>=11 and blue<=22 and green >=85 and green <=105 and red >= 240 and red <= 255):\n        image[height,width] = [0,255,0]   #color the pixel with green color\n        tshirt+=1\n      \n      #Bart - blue (shorts)\n      if(blue>=125 and blue<=170 and green >=0 and green <=12 and red >= 0 and red <= 20):\n        image[height,width] = [0,255,0]   #color the pixel with green color\n        shorts+=1\n      \n      #Bart - blue (sneakers)\n      if(height > (H\/2)):   #since sneakers are present only at bottom only considering lower part of image \n        if(blue>=125 and blue<=170 and green >=0 and green <=12 and red >= 0 and red <= 20):\n          image[height,width] = [0,255,0]   #color the pixel with green color\n          sneakers+=1\n\n#normalise features with total number of pixels in the image\n#consider we have 100*200 pixels of an image 20000 and 2000 of the pixels are detected to have mouth feature\n# so (2000 \/ 20000) * 100 = 10 i.e,10% of image we have pixels to detect mouth feature\n  mouth = round((mouth \/ (H*W))*100,9)    \n  pants = round((pants \/ (H*W))*100,9)    \n  shoes = round((shoes \/ (H*W))*100,9)    \n  tshirt = round((tshirt \/ (H*W))*100,9)  \n  shorts = round((shorts \/ (H*W))*100,9)  \n  sneakers = round((sneakers \/ (H*W))*100,9)   \n\n#appending features in a image to image_features\n  image_features.append(mouth)\n  image_features.append(pants)\n  image_features.append(shoes)\n  image_features.append(tshirt)\n  image_features.append(shorts)\n  image_features.append(sneakers)\n#appending class names to image_features\n  image_features.append(class_name)\n\n#appending image_features to features (which contains all features of all images)\n  features.append(image_features)\n  print('Homer Mouth: %s - Homer Pants: %s - Homer Shoes: %s' % (image_features[0], image_features[1], image_features[2]))\n  print('Bart TShirt: %s - Bart Shorts: %s - Bart Sneakers: %s' % (image_features[3], image_features[4], image_features[5]))\n\n  f = (\",\".join([str(item) for item in image_features]))\n  export += f +'\\n' #adding all features to headings previously present to be saved as csv format later\n\n  if(show_images==True):  #displaying original and feature extraction indicated image side by side\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  #in opencv BGR is order of channel, to see we need to convert to RGB\n    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)\n    fig, im = plt.subplots(1,2) #creating subplots with one row and 2 columns (first column has original image and second column has feature detected image)\n    im[0].axis('off') #hide axis of this subplot\n    im[0].imshow(original_image)\n    im[1].axis('off')\n    im[1].imshow(image)\n    plt.show()\n\n  if(class_name==0):\n    fig.savefig('.\/Images\/Bart\/Bart ('+str(b_n)+').png')\n    b_n+=1\n  elif(class_name==1):\n    fig.savefig('.\/Images\/Homer\/Homer ('+str(h_n)+').png')\n    h_n+=1","72c38c38":"with open('features.csv', 'w') as file:\n  for l in export:\n    file.write(l)\nfile.closed","f693c6d1":"def get_all_file_paths(directory):\n  # initializing empty file paths list\n  file_paths = []\n  # crawling through directory and subdirectories\n  for root, directories, files in os.walk(directory):\n    for filename in files:\n      # join the two strings in order to form the full filepath.\n      filepath = os.path.join(root, filename)\n      file_paths.append(filepath)\n  # returning all file paths\n  return file_paths\n\ndirectory ='.\/Images'  # path to folder which needs to be zipped\nfile_paths = get_all_file_paths(directory)  # calling function to get all file paths in the directory\n\nwith zipfile.ZipFile('Images.zip','w') as zip:\n  # writing each file one by one\n  for file in file_paths:\n    zip.write(file)","772e90f2":"# Feature Extraction","b6f82b33":"# Exporting To CSV","c8315988":"# Importing Dataset","e554ba39":"# Creating Zip of Feature Detected Images","403f83b7":"# Import Libraries"}}