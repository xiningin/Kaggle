{"cell_type":{"de1fd36a":"code","b69f6d87":"code","5f9f72a0":"code","3c725918":"code","f9a04ce6":"code","a1798939":"code","08744837":"code","614dcdf7":"code","4cb2b52a":"code","5f347c3f":"code","d01a890a":"code","889075e6":"code","3f5739a6":"markdown"},"source":{"de1fd36a":"import numpy as np\nimport pandas as pd \nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom xgboost import XGBClassifier\n\nimport gc","b69f6d87":"TRAIN_PATH = \"..\/input\/tabular-playground-series-dec-2021\/train.csv\"\nTEST_PATH = \"..\/input\/tabular-playground-series-dec-2021\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nTARGET = \"Cover_Type\"\nID = \"Id\"\nSEED = 2021\nMAX_RUNTIME_SECS = 60 * 10\n\nTREE_METHOD = 'gpu_hist'\nN_COMPONENT = 2","5f9f72a0":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","3c725918":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","f9a04ce6":"lda = LDA(n_components=N_COMPONENT)\ntrain_lda = lda.fit_transform(train.drop(columns=TARGET),train[TARGET])\ntest_lda = lda.transform(test)","a1798939":"y = train[TARGET]\nX = train_lda\nX_test = test_lda","08744837":"model = XGBClassifier(tree_method=TREE_METHOD) \nmodel.fit(X, y)","614dcdf7":"model.get_params()","4cb2b52a":"model.get_num_boosting_rounds()","5f347c3f":"model.get_xgb_params()","d01a890a":"preds_y = model.predict(X_test)","889075e6":"TITLE = \"LDA2\"\nSUBMISSION_PATH = f\"submission_{TITLE}.csv\"\n\nsubmission = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsubmission[TARGET] = preds_y\nsubmission.to_csv(SUBMISSION_PATH, index=False)\nsubmission.head()","3f5739a6":"# Latent Dirichlet Allocation"}}