{"cell_type":{"68d69b4e":"code","62e0937d":"code","a1cd5246":"code","3725d95c":"code","829aee60":"code","6c2ddf7b":"code","d6e4955e":"code","b720ec89":"code","be8b1721":"code","e9c2fe53":"code","10d3c5b3":"code","9003bab9":"code","19f0834c":"code","ea00e0da":"code","31fd67d0":"code","f6562ad3":"code","3e19e930":"markdown","eecccdb9":"markdown","53c29442":"markdown","f23f3936":"markdown"},"source":{"68d69b4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","62e0937d":"import numpy as np\nimport pandas as pd\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport plotly.graph_objects as go\nfrom fbprophet import Prophet\nimport pycountry\nimport plotly.express as px","a1cd5246":"train = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntrain.head()\n","3725d95c":"train.info()","829aee60":"\ntrain.tail()","6c2ddf7b":"test.head()","d6e4955e":"#train = train[train['Date'] < \"2020-03-19\"]\n#train.sample(15)","b720ec89":"from sklearn import preprocessing\n#train['Lat'] = preprocessing.scale(train['Lat'])\n#train['Long'] = preprocessing.scale(train['Long'])\n#test['Lat'] = preprocessing.scale(test['Lat'])\n#test['Long'] = preprocessing.scale(test['Long'])","be8b1721":"# Format date\n#train[\"Date\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\n#train[\"Date\"]  = train[\"Date\"].astype(int)\n# drop nan's\n#train = train.drop(['Province\/State'],axis=1)\n#train = train.dropna()\ntrain.isnull().sum()","e9c2fe53":"# Do same to Test data\n#test[\"Date\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\n#test[\"Date\"]  = test[\"Date\"].astype(int)\n# deal with nan's for lat and lon\n#test[\"Lat\"]  = test[\"Lat\"].fillna(test['Lat'].mean())\n#test[\"Long\"]  = test[\"Long\"].fillna(test['Long'].mean())\ntest.isnull().sum()","10d3c5b3":"train['Country_Region'].unique()","9003bab9":"# Time Series for ConfirmedCases\ndf = train[train['Country_Region'] == 'Germany']\n#df = df[df['Date']]\n#df1 = df.drop(['Id','Country\/Region','Lat','Long'], axis=1)\nconfirmed=df.groupby('Date')['ConfirmedCases'].sum().to_frame().reset_index()\n\n#confirmed = df1.drop(['Fatalities'], axis=1)\nconfirmed['ConfirmedCases'] = np.log(1+confirmed['ConfirmedCases'])\nconfirmed.plot()\n#deaths = df.drop(['ConfirmedCases'], axis=1)","19f0834c":"\nconfirmed.columns = ['ds','y']\n#confirmed['ds'] = confirmed['ds'].dt.date\nconfirmed['ds'] = pd.to_datetime(confirmed['ds'])\nconfirmed.tail()","ea00e0da":"m = Prophet(interval_width=0.95)\nm.fit(confirmed)\nfuture = m.make_future_dataframe(periods=30)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\n#future = future[future['ds'].unique()]\nfuture\n","31fd67d0":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head()","f6562ad3":"confirmed_forecast_plot = m.plot(forecast)","3e19e930":"### Remove Leaks\nWe see that training data stops on March 27th and Test data starts on March 19th. This means, if we don't remove the overlapping dates then our model will likely overfit and will likely not generalize well in stage 2.","eecccdb9":"# Time Series Prophet Forecast for Germany\n\n## y = log(1+ConfirmedCases)\n","53c29442":"## Import Data","f23f3936":"# Global Covid-19 Forecasting Using Time Series Prophet\n\n### We will use prophet time series to predict log(1+ConfirmedCases).\n\nThis is a simple starter code meant as an illustration for Prophet."}}