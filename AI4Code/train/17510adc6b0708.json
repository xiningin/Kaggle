{"cell_type":{"273d1f35":"code","77d972fd":"code","656d5275":"code","d419ec38":"code","599d5837":"code","5bcc1c25":"code","3c3ae31a":"code","34466661":"code","5b806f3e":"code","105dee4e":"code","b1fc209b":"code","65ed6be9":"code","d811978d":"code","2339861c":"code","5b6ee4b8":"code","7cf54bc1":"code","ceb9d1ae":"code","42be4a3e":"code","3309c4b4":"code","82b17da1":"code","688a2f00":"code","02ff73b7":"code","37d5a1b3":"markdown","7f9245d4":"markdown","37750705":"markdown","6c7da0e7":"markdown","b73ac60c":"markdown","bd2426d2":"markdown","40bcc1b9":"markdown","64fcafbf":"markdown","67651eee":"markdown","2fa66e5b":"markdown","a322ce0b":"markdown"},"source":{"273d1f35":"import os\nimport zipfile\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import load_img","77d972fd":"for input_zip in ['..\/input\/dogs-vs-cats\/train.zip','..\/input\/dogs-vs-cats\/test1.zip']:\n    ex_zip = zipfile.ZipFile(input_zip, 'r')\n    ex_zip.extractall('.')\n    ex_zip.close()","656d5275":"print(os.listdir('.\/train'))","d419ec38":"filenames = os.listdir('.\/train')\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'cat':\n        categories.append('cat')\n    else:\n        categories.append('dog')\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","599d5837":"nrows = 5\nncols = 5\nimg_count = nrows+ncols\n\ndf_cats = df.loc[df['category'] == 'cat'].head(img_count)\ndf_dogs = df.loc[df['category'] == 'dog'].head(img_count)\n\nfig = plt.gcf()\nfig.set_size_inches(ncols*4, nrows*4)\n\nnext_cat_pix = [os.path.join('.\/train\/', fname) \n                for fname in df_cats.loc[:,'filename'] \n               ]\n\nnext_dog_pix = [os.path.join('.\/train\/', fname) \n                for fname in df_dogs.loc[:,'filename']\n               ]\n\nfor i, img_path in enumerate(next_cat_pix+next_dog_pix):\n    sp = plt.subplot(nrows, ncols, i + 1)\n    img = mpimg.imread(img_path)\n    plt.imshow(img)\n\nprint('First '+str(2*img_count)+' images of cats and dogs')\nplt.show()","5bcc1c25":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=50)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)\n\nprint('Train: '+str(train_df.shape[0]))\nprint('Validate: '+str(validate_df.shape[0]))","3c3ae31a":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    '.\/train\/', \n    x_col='filename',\n    y_col='category',\n    target_size=(150,150),\n    class_mode='categorical',\n    batch_size=20\n)","34466661":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    '.\/train\/', \n    x_col='filename',\n    y_col='category',\n    target_size=(150,150),\n    class_mode='categorical',\n    batch_size=20\n)","5b806f3e":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.MaxPooling2D(2,2),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Flatten(), \n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.BatchNormalization(),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(2, activation='softmax')  \n])","105dee4e":"model.summary()","b1fc209b":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')>0.99):\n            print(\"\\nReached 99% accuracy so cancelling training!\")\n            self.model.stop_training = True\n\ncallbacks = myCallback()","65ed6be9":"opt = RMSprop(lr=0.001)\n\nmodel.compile(optimizer=opt,\n              loss='binary_crossentropy',\n              metrics = ['accuracy'])","d811978d":"history = model.fit(train_generator,\n                    validation_data=validation_generator,\n                    steps_per_epoch=20000\/\/20,\n                    epochs=10,\n                    validation_steps=5000\/\/20,\n                    verbose=1,\n                    callbacks=[callbacks]\n                   )","2339861c":"model.save_weights(\"model.h5\")","5b6ee4b8":"acc      = history.history[     'accuracy' ]\nval_acc  = history.history[ 'val_accuracy' ]\nloss     = history.history[    'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc))\n\nplt.plot  ( epochs,     acc )\nplt.plot  ( epochs, val_acc )\nplt.title ('Training and validation accuracy')\nplt.figure()\n\nplt.plot  ( epochs,     loss )\nplt.plot  ( epochs, val_loss )\nplt.title ('Training and validation loss'   )","7cf54bc1":"test_filenames = os.listdir('.\/test1')\ntest_df = pd.DataFrame({'filename': test_filenames})","ceb9d1ae":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    '.\/test1', \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=(150,150),\n    batch_size=20,\n    shuffle=False\n)","42be4a3e":"predict = model.predict_generator(test_generator, steps=np.ceil(12500\/20))","3309c4b4":"test_df['category'] = np.argmax(predict, axis=-1)","82b17da1":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","688a2f00":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })\ntest_df","02ff73b7":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","37d5a1b3":"Validation GEN","7f9245d4":"See a few images of cats and dogs","37750705":"Categorize each file using 'CATEGORY.xxx.jpg' mask","6c7da0e7":"Training GEN","b73ac60c":"# Test data","bd2426d2":"# Training and validation generator","40bcc1b9":"See all files","64fcafbf":"# Categorize","67651eee":"Callback","2fa66e5b":"# Extract all .zip in folder '\/kaggle\/working'","a322ce0b":"# Billding a Model"}}