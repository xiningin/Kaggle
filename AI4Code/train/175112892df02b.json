{"cell_type":{"b278f625":"code","f785a079":"code","fa82dfda":"code","e52ef7de":"code","b152ce66":"code","1fe8171c":"code","e14b3c3d":"code","16850323":"code","6541c281":"code","6ae58116":"code","92eececc":"code","70eb0c57":"code","dd9b4fb4":"code","98de6cd9":"code","41c137a7":"code","1a315da0":"code","a1413ebe":"code","c9a464ce":"code","f796255c":"code","fdaeaee3":"code","8f2c7352":"code","8380d815":"code","f9c811d1":"code","595a1afe":"code","655b3a63":"code","0bcfe55a":"code","46185ce3":"code","78457d4e":"code","e21c0019":"code","023b9a45":"code","530a0083":"code","2b06ed25":"code","e5a27dd3":"code","d117bdae":"code","48eae0db":"code","7aa71d4a":"code","6bb89412":"code","da176bc7":"code","9a899be4":"code","7cedb597":"code","2d2a5e9f":"code","68770ce6":"code","bc6faede":"code","009635f6":"markdown","d77423c8":"markdown"},"source":{"b278f625":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport time\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the \"..\/input\/\" directory.\n# Have also incldued an external dataset that provides the stats of the TOP PUBG playes\n\n\nimport os\nprint(os.listdir(\"..\/input\/pubg-finish-placement-prediction\"))\nprint(os.listdir(\"..\/input\/pubgplayerstats\"))\n\n# Any results you write to the current directory are saved as output.","f785a079":"# def reload_df():\n#     train_df=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/train_V2.csv')\n#     test_df=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/test_V2.csv')\n#     top_player_stats_df=pd.read_csv('..\/input\/pubgplayerstats\/PUBG_Player_Statistics.csv')\n# return train_df,test_df,top_player_stats_df","fa82dfda":"train_df=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/train_V2.csv')\ntest_df=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/test_V2.csv')\ntop_player_stats_df=pd.read_csv('..\/input\/pubgplayerstats\/PUBG_Player_Statistics.csv')","e52ef7de":"# train_df.info()","b152ce66":"top_player_solo_stats_df=top_player_stats_df.filter(regex='solo')\ntop_player_duo_stats_df=top_player_stats_df.filter(regex='duo')\ntop_player_squad_stats_df=top_player_stats_df.filter(regex='squad')\n\nprint(len(top_player_stats_df)\n      ,len(top_player_solo_stats_df)\n      ,len(top_player_duo_stats_df)\n      ,len(top_player_squad_stats_df))\nprint(len(top_player_stats_df.columns)\n      ,len(top_player_solo_stats_df.columns)\n      ,len(top_player_duo_stats_df.columns)\n      ,len(top_player_squad_stats_df.columns))\n#player and tracker id are not included \n#but its not needed anyway as we are going to join this with every row anyway","1fe8171c":"top_player_stats_df.describe()","e14b3c3d":"corr = top_player_stats_df.corr()\n# print(\"Correlation Matrix\")\n# c1 = corr.abs().unstack()\n# d1=c1.sort_values(ascending = False).drop_duplicates()\n# print(d1.head(50))","16850323":"# corr.info(verbose=True)","6541c281":"print(train_df.matchType.unique())\nprint(test_df.matchType.unique())\n","6ae58116":"train_df[['matchType','Id']].groupby(['matchType']).count()","92eececc":"train_df[['matchType','groupId']].groupby(['matchType']).count()","70eb0c57":"train_df.nunique()","dd9b4fb4":"train_df.boosts.unique()","98de6cd9":"print(len(train_df))\ntrain_df=train_df[train_df.winPlacePerc.notnull()]\nprint(len(train_df))","41c137a7":"train_df.info()","1a315da0":"train_df[train_df.matchType.str.contains('normal')].groupby(['matchType']).count()","a1413ebe":"match_type_ls=[]\nfor i in train_df.matchType:\n    if 'solo' in i:\n        match_type_ls.append('solo')\n    elif 'duo' in i:\n        match_type_ls.append('duo')\n    else:\n        match_type_ls.append('squad')\n\nmatch_type_test_ls=[]\nfor i in test_df.matchType:\n    if 'solo' in i:\n        match_type_test_ls.append('solo')\n    elif 'duo' in i:\n        match_type_test_ls.append('duo')\n    else:\n        match_type_test_ls.append('squad')    ","c9a464ce":"train_df['matchTypeReduced']=match_type_ls\ntest_df['matchTypeReduced']=match_type_test_ls","f796255c":"train_df[['matchType','matchTypeReduced']].head(3)","fdaeaee3":"cols_to_drop = ['Id', 'groupId', 'matchId', 'matchType','matchTypeReduced']\ncols_to_fit = [col for col in train_df.columns if col not in cols_to_drop]\ncorr = train_df[cols_to_fit].corr()\n\nplt.figure(figsize=(9,7))\nsns.heatmap(\n    corr,\n    xticklabels=corr.columns.values,\n    yticklabels=corr.columns.values,\n    linecolor='white',\n    linewidths=0.1,\n    cmap=\"RdBu\"\n)\nplt.show()","8f2c7352":"groupid_train_df=train_df.groupby(['groupId']).size().to_frame('players_in_team')\ngroupid_test_df=test_df.groupby(['groupId']).size().to_frame('players_in_team')\ntrain_df = train_df.merge(groupid_train_df, how='left', on=['groupId'])\ntest_df = test_df.merge(groupid_test_df, how='left', on=['groupId'])","8380d815":"cols_to_ignore = ['Id', 'matchId','winPlacePerc']\ncols_to_check=[i for i in train_df.columns if i not in cols_to_ignore]\n","f9c811d1":"numeric_cols_train_list = [cname for cname in cols_to_check if \n                train_df[cname].dtype in ['int64', 'float64']]\nnumeric_cols_test_list = [cname for cname in cols_to_check if \n                test_df[cname].dtype in ['int64', 'float64']]\nlow_cardinality_train_cols_ls = [cname for cname in cols_to_check if \n                                train_df[cname].nunique() < 20 and\n                                train_df[cname].dtype == \"object\"]\nlow_cardinality_test_cols_ls = [cname for cname in cols_to_check if \n                                test_df[cname].nunique() < 20 and\n                                test_df[cname].dtype == \"object\"]","595a1afe":"\nscaler = MinMaxScaler()\ntrain_df[numeric_cols_train_list]=scaler.fit_transform(train_df[numeric_cols_train_list])\ntest_df[numeric_cols_test_list]=scaler.transform(test_df[numeric_cols_test_list])","655b3a63":"cols_with_missing_train_ls = [col for col in train_df.columns \n                    if train_df[col].isnull().any()]\ncols_with_missing_test_ls = [col for col in train_df.columns \n                    if train_df[col].isnull().any()]\nprint(\"No. of columns with Null values :\",len(cols_with_missing_train_ls))\nprint(\"No. of columns with Null values :\",len(cols_with_missing_test_ls))","0bcfe55a":"team_skill=['assists','revives','teamKills']\ntomb_raider=['boosts','heals','weaponsAcquired']\nterminator=['killPlace','killPoints','kills','killStreaks','longestKill','roadKills','damageDealt','DBNOs','headshotKills']\nrunner=['swimDistance','rideDistance','walkDistance']\neverythingelse=['vehicleDestroys','matchDuration','maxPlace']\n\n","46185ce3":"train_df['team_skill']=train_df['assists']+train_df['revives']+train_df['teamKills']\ntest_df['team_skill']=test_df['assists']+test_df['revives']+test_df['teamKills']\n\n# train_df[['team_skill']+team_skill]\ntrain_df['tomb_raider']=train_df['boosts']+train_df['heals']+train_df['weaponsAcquired']\ntest_df['tomb_raider']=test_df['boosts']+test_df['heals']+test_df['weaponsAcquired']\n\n# train_df[['tomb_raider']+tomb_raider]\ntrain_df['terminator']=train_df['killPlace']+train_df['killPoints']+train_df['kills']+train_df['killStreaks']+train_df['longestKill']+train_df['damageDealt']+train_df['DBNOs']+train_df['headshotKills']\ntest_df['terminator']=test_df['killPlace']+test_df['killPoints']+test_df['kills']+test_df['killStreaks']+test_df['longestKill']+test_df['damageDealt']+test_df['DBNOs']+test_df['headshotKills']\n\n# train_df[['terminator']+terminator]\ntrain_df['runner']=train_df['swimDistance']+train_df['rideDistance']+train_df['walkDistance']\ntest_df['runner']=test_df['swimDistance']+test_df['rideDistance']+test_df['walkDistance']\n\ntrain_df['everythingelse']=train_df['vehicleDestroys']+train_df['matchDuration']+train_df['maxPlace']\ntest_df['everythingelse']=test_df['vehicleDestroys']+test_df['matchDuration']+test_df['maxPlace']\n\ntrain_df['total_kickass_score']=train_df['team_skill']+train_df['tomb_raider']+train_df['terminator']+train_df['runner']+train_df['everythingelse']\ntest_df['total_kickass_score']=test_df['team_skill']+test_df['tomb_raider']+test_df['terminator']+test_df['runner']+test_df['everythingelse']\n","78457d4e":"# groupid_train_df=train_df.groupby(['groupId'])['total_kickass_score'].size().to_frame('players_in_team')\n# groupid_test_df=test_df.groupby(['groupId'])['total_kickass_score'].size().to_frame('players_in_team')\n# train_df = train_df.merge(groupid_train_df, how='left', on=['groupId'])\n# test_df = test_df.merge(groupid_test_df, how='left', on=['groupId'])","e21c0019":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\nlb_make_2 = LabelEncoder()\n#train_1_df = pd.get_dummies(train_df, columns=['matchTypeReduced','matchType'],prefix=['encoded'])\ntrain_df['matchTypeReduced_num'] = lb_make.fit_transform(train_df['matchTypeReduced'])\ntrain_df['matchType_num'] = lb_make_2.fit_transform(train_df['matchType'])\ntest_df['matchTypeReduced_num']=lb_make.transform(test_df['matchTypeReduced'])\ntest_df['matchType_num']= lb_make_2.transform(test_df['matchType'])\n","023b9a45":"columns_converted_to_int_ls=['matchTypeReduced_num','matchType_num']","530a0083":"my_train_cols = columns_converted_to_int_ls + numeric_cols_train_list+['winPlacePerc']\nmy_test_cols = columns_converted_to_int_ls + numeric_cols_test_list","2b06ed25":"train_x=train_df[my_train_cols]\ntrain_y=train_df['winPlacePerc']\ntest_x=test_df[my_test_cols]","e5a27dd3":"train_df_bkup=train_df\ntest_df_bkup=test_df","d117bdae":"# train_df.drop(['groupId'],axis=1,inplace=True)\n# test_df.drop(['groupId'],axis=1,inplace=True)","48eae0db":"# print (len(train_df[(train_df.matchTypeReduced=='squad')&(train_df.players_in_team>4)].Id))\n# print (len(train_df))","7aa71d4a":"corr = train_df[['walkDistance', 'players_in_team','total_kickass_score', 'winPlacePerc']].corr()\nsns.heatmap(\n    corr,\n    xticklabels=corr.columns.values,\n    yticklabels=corr.columns.values,\n    linecolor='white',\n    linewidths=0.1,\n    cmap=\"RdBu\"\n)\nplt.show()","6bb89412":"train_selected_df=train_df[['team_skill','terminator','runner','tomb_raider','everythingelse']+['players_in_team','winPlacePerc','matchTypeReduced_num','matchType_num','total_kickass_score']+terminator+runner+team_skill+tomb_raider+everythingelse]\ntest_selected_df=test_df[['team_skill','terminator','runner','tomb_raider','everythingelse']+['players_in_team','matchTypeReduced_num','matchType_num','total_kickass_score']+terminator+runner+team_skill+tomb_raider+everythingelse]","da176bc7":"train_selected_x_df=train_selected_df[['team_skill','terminator','runner','tomb_raider','everythingelse']+['players_in_team','matchTypeReduced_num','matchType_num','total_kickass_score']+terminator+runner+team_skill+tomb_raider+everythingelse]\ntrain_selected_y_df=train_selected_df[['winPlacePerc']]\ntest_selected_x_df=test_selected_df[['team_skill','terminator','runner','tomb_raider','everythingelse']+['players_in_team','matchTypeReduced_num','matchType_num','total_kickass_score']+terminator+runner+team_skill+tomb_raider+everythingelse]\nprint(\"The count of training dataset features are : \",len(train_selected_x_df))\nprint(\"The count of training dataset target variables are : \",len(train_selected_y_df))\nprint(\"The count of test dataset target features are : \",len(test_selected_x_df))","9a899be4":"# corr=train_selected_df.corr()\n# sns.heatmap(\n#     corr,\n#     xticklabels=corr.columns.values,\n#     yticklabels=corr.columns.values,\n#     linecolor='white',\n#     linewidths=0.1,\n#     cmap=\"RdBu\"\n# )\n# # plt.show()","7cedb597":"from xgboost import XGBRegressor\n\nmy_model = XGBRegressor(max_depth = 5 ,min_child_weight = 1,subsample=0.8,colsample_bytree = 0.8 ,scale_pos_weight = 1)\n# Add silent=True to avoid printing out updates with each cycle\nmy_model.fit(train_selected_x_df, train_selected_y_df, verbose=True)","2d2a5e9f":"# #Import libraries:\n# import pandas as pd\n# import numpy as np\n# import xgboost as xgb\n# from xgboost.sklearn import XGBClassifier\n# from sklearn import  metrics   #Additional scklearn functions\n# #from sklearn.grid_search import GridSearchCV   #Perforing grid search\n\n# def modelfit(alg, train_x,train_y,useTrainCV=True, cv_folds=5, early_stopping_rounds=50):\n    \n#     if useTrainCV:\n#         xgb_param = alg.get_xgb_params()\n#         xgtrain = xgb.DMatrix(train_x.values, label=train_y.values)\n#         cvresult = xgb.cv(xgb_param, xgtrain, num_boost_round=alg.get_params()['n_estimators'], nfold=cv_folds,\n#             metrics='mae', early_stopping_rounds=early_stopping_rounds, show_progress=False)\n#         alg.set_params(n_estimators=cvresult.shape[0])\n    \n#     #Fit the algorithm on the data\n#     alg.fit(train_x, train_y,eval_metric='mae')\n        \n#     #Predict training set:\n#     dtrain_predictions = alg.predict(train_x)\n#     dtrain_predprob = alg.predict_proba(train_x)[:,1]\n        \n#     #Print model report:\n#     print (\"\\nModel Report\")\n#     #print \"Accuracy : %.4g\" % metrics.accuracy_score(train_y.values, dtrain_predictions)\n#     print (\"AUC Score (Train): %f\") % metrics.mean_absolute_error(train_y, dtrain_predprob)\n                    \n#     feat_imp = pd.Series(alg.booster().get_fscore()).sort_values(ascending=False)\n#     feat_imp.plot(kind='bar', title='Feature Importances')\n#     plt.ylabel('Feature Importance Score')\n#     alg.predict(test_selected_x_df)\n#     predictions_final=[0 if i < 0  else i for i in predictions]\n#     my_3submission = pd.DataFrame({'Id': test_df.Id, 'winPlacePerc': predictions_final})\n#     my_3submission.head()\n#     os.chdir(\"\/kaggle\/working\/\")\n#     my_3submission.to_csv('third_submit.csv',header=True, index=False)","68770ce6":"# #Choose all predictors except target & IDcols\n# #predictors = [x for x in train.columns if x not in [target, IDcol]]\n# from xgboost import XGBRegressor\n# xgb1 = XGBRegressor(\n#  learning_rate =0.1,\n#  n_estimators=1000,\n#  max_depth=5,\n#  min_child_weight=1,\n#  gamma=0,\n#  subsample=0.8,\n#  colsample_bytree=0.8,\n#  nthread=4,\n#  scale_pos_weight=1,\n#  seed=27)\n# modelfit(xgb1, train_selected_x_df,train_selected_y_df)","bc6faede":"predictions = my_model.predict(test_selected_x_df)\npredictions_final=[0 if i < 0  else i for i in predictions]\nmy_3submission = pd.DataFrame({'Id': test_df.Id, 'winPlacePerc': predictions_final})\nmy_3submission.head()\nos.chdir(\"\/kaggle\/working\/\")\nmy_3submission.to_csv('third_submit.csv',header=True, index=False)","009635f6":"### Predict and make the submission","d77423c8":"## Modelling"}}