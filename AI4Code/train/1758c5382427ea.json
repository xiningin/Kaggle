{"cell_type":{"df80b627":"code","4d81e0ab":"code","c0aaa9a8":"code","698d6c44":"code","ee27c5f6":"code","5b75e327":"code","236ae313":"code","49d810f6":"code","9465227c":"code","c7862aae":"code","f6044f79":"code","e4bfe6dc":"code","78719270":"code","08d67f06":"code","73f4038c":"code","dbd64f47":"code","03413f19":"code","7e2497c6":"code","fa201aaf":"code","800ffb33":"code","bb52df99":"code","d7cfff33":"code","47b6e69b":"code","8d75544f":"code","824db40e":"code","f575b325":"code","7b4eb96e":"code","fad1d0a9":"code","b12936d5":"code","caa7592e":"code","16da8a7a":"code","b6eb34f4":"code","d10fd9d7":"code","49edf705":"code","ed6c6516":"code","1865454a":"code","d2ac0106":"code","c30573e5":"code","8b09f1a3":"code","f5dc6c7a":"code","93e8fd71":"code","001e84b1":"code","832da22e":"code","ab372e1e":"code","b8661016":"code","1eba3898":"code","9bf19203":"code","33d45051":"code","4a94117c":"code","e5cce9c0":"code","e29b1d17":"code","6c17e83e":"code","f366e413":"code","f3ceb13f":"code","152981fb":"code","7d4bbded":"code","893af605":"code","c1b57e64":"code","e894b0d6":"code","079d7907":"code","3183d55c":"code","0ed035c3":"code","157ad04e":"code","0ec9b4b8":"code","719367a1":"code","209e17ba":"code","709c046a":"code","9136b2ed":"code","a0e6cccf":"code","fdf24989":"code","0554a747":"code","a53be2f5":"code","a3ecc186":"code","97414f21":"code","1244f813":"code","65859d28":"code","3aca6510":"code","31f415b8":"code","fb5878bc":"code","d71dcb92":"code","e4078817":"code","e5fe98be":"code","efb79830":"code","32e94da5":"code","600c8799":"code","93f18d90":"code","e0c31469":"code","ba425ff3":"code","ed57dd05":"code","ccba638a":"code","8da05dd1":"code","8c155196":"code","710cce73":"code","c61cb2a9":"code","2d5b197a":"code","b50948b6":"code","c34c986f":"code","b7ccc781":"code","43e0f0a2":"code","da6876cf":"code","4b7d6d73":"code","b31c98af":"code","2ef27180":"code","a150eacc":"code","8a60383e":"code","39d7e97a":"code","22818b44":"code","162fc53e":"code","fe42b5d8":"code","1752d949":"code","ef661127":"code","b080a8da":"code","00ff54d4":"code","abc4f169":"code","96438ffa":"code","12eb1884":"code","d52b8f49":"code","c62358c3":"code","035062c0":"code","856e0f94":"code","4a3efd02":"markdown","6cbe0eb7":"markdown","59a75c66":"markdown","1293d171":"markdown","dd8e4a5c":"markdown","851cc246":"markdown","80a9fc50":"markdown","f5c58c60":"markdown","9103c10f":"markdown","7fe64823":"markdown","905c5447":"markdown","ab424c12":"markdown","5c40f61f":"markdown","1fa07a5e":"markdown","1b81cb46":"markdown","2d952094":"markdown","2e0f66ec":"markdown","c65869c8":"markdown","3eb03b9a":"markdown","735ade95":"markdown","bd0aa373":"markdown","5b187e2e":"markdown","25114b92":"markdown","327a767d":"markdown","f7f6f81b":"markdown"},"source":{"df80b627":"# Data Analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\nfrom scipy import stats\nfrom sklearn.preprocessing import LabelEncoder\n\n# Other Imports\nimport re\nimport warnings\n\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import style\n%matplotlib inline\n# Machine Learning\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn import metrics\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","4d81e0ab":"warnings.filterwarnings('ignore')","c0aaa9a8":"# Loading the datasets\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","698d6c44":"train_df.head()","ee27c5f6":"test_df.head()","5b75e327":"train_df.info()","236ae313":"# Null values train dataset\ntrain_df.isna().sum()","49d810f6":"# Null values test dataset\ntest_df.isna().sum()","9465227c":"train_df['source'] = 'train'\ntest_df['source'] = 'test'","c7862aae":"dataset = pd.concat([train_df, test_df], ignore_index=True)","f6044f79":"dataset.isnull().sum()","e4bfe6dc":"train_df.isnull().sum()","78719270":"plt.figure(figsize=(10,4))\nplt.subplot(121)\nsns.distplot(train_df['Age'].dropna())\nplt.title('Age Distribution')\n\nplt.subplot(122)\nsns.distplot(train_df['Fare'].dropna())\nplt.title('Fare Distribution')","08d67f06":"train_df['Survived'].value_counts()","73f4038c":"train_df.Parch.value_counts()","dbd64f47":"train_df.SibSp.value_counts()\/891*100","03413f19":"train_df.Pclass.value_counts()\/train_df.shape[0]*100","7e2497c6":"grid = sns.FacetGrid(train_df, col='Survived')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False, color='green')","fa201aaf":"grid_pivot1 = train_df.pivot_table(columns='Survived', values='Age', aggfunc='mean')","800ffb33":"grid_pivot1","bb52df99":"sns.pointplot(x=train_df['Survived'].dropna(), y=train_df['Age'].dropna())","d7cfff33":"grid = sns.FacetGrid(train_df, col='Survived', row='Sex')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False, color='green')","47b6e69b":"# sns.pointplot(x=train_df['Survived'].fillna(-1), y=train_df['Age'].fillna(-1), hue=train_df['Sex'].fillna(-1)) ","8d75544f":"grid_pivot2 = train_df.pivot_table(index='Sex', columns='Survived', values='Age', aggfunc='mean')\ngrid_pivot2","824db40e":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False,rug=True, color='red')","f575b325":"grid_pivot3 = train_df.pivot_table(index='Pclass',columns='Survived', values='Age')","7b4eb96e":"grid_pivot3","fad1d0a9":"grid = sns.FacetGrid(train_df, col='Survived', row='SibSp')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='pink')","b12936d5":"grid = sns.FacetGrid(train_df, col='Survived', row='Parch')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='green')","caa7592e":"grid = sns.FacetGrid(train_df, col='Survived', row='Embarked')\ngrid.map(sns.distplot,'Age', bins=20, kde=False,rug=True, color='black')","16da8a7a":"grid = sns.FacetGrid(train_df, row='Embarked')\ngrid.map(sns.pointplot, 'Pclass', 'Survived','Sex', palette='deep')\ngrid.add_legend()","b6eb34f4":"train_df.pivot_table(index=['Embarked','Pclass'], columns='Sex', values='Survived')","d10fd9d7":"grid = sns.FacetGrid(train_df, row='Embarked', col='Survived')\ngrid.map(sns.barplot, 'Sex', 'Fare', ci=None)","49edf705":"def extract_titles(name):\n    tit = re.findall(' ([A-Za-z]+)\\.', name)\n    return tit[0]","ed6c6516":"dataset['Title'] = dataset['Name'].apply(lambda x: extract_titles(x))","1865454a":"# train_df['Title'] = train_df['Name'].apply(lambda x: extract_titles(x))\n\n# test_df['Title'] = test_df['Name'].apply(lambda x: extract_titles(x))","d2ac0106":"dataset[dataset['source'] == 'train'].isnull().sum()","c30573e5":"dataset[dataset['source'] == 'test'].isnull().sum()","8b09f1a3":"dataset['Title'] = dataset['Title'].replace(['Don', 'Rev', 'Dr','Major', 'Lady', 'Sir','Col', 'Capt', 'Countess',\n       'Jonkheer', 'Dona'], 'Rare')\ndataset['Title'] = dataset['Title'].replace(['Ms', 'Mlle'], 'Miss')\ndataset['Title'] = dataset['Title'].replace('Mme','Mrs')","f5dc6c7a":"dataset[dataset['source'] == 'train'].Title.value_counts()","93e8fd71":"dataset[dataset['source'] == 'train'].pivot_table(index='Title', values='Survived')","001e84b1":"dataset[dataset['source'] == 'train'].pivot_table(index='Title', columns='Survived', values='Age')","832da22e":"# dataset[dataset['source'] == 'train'] = dataset[dataset['source'] == 'train'].drop(['Name','PassengerId'], axis=1)\n\n# dataset[dataset['source'] == 'train'].isnull().sum()\n\n# train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\n\n# test_df = test_df.drop(['Ticket', 'Cabin'], axis=1)","ab372e1e":"dataset[dataset['source'] == 'train'].head()","b8661016":"sex_dummy = pd.get_dummies(dataset['Sex'])","1eba3898":"sex_dummy.shape","9bf19203":"dataset.shape","33d45051":"# train_df = pd.concat([train_df, sex_dummy], sort=False)\ndataset = dataset.join(sex_dummy)","4a94117c":"dataset.head()","e5cce9c0":"grid = sns.FacetGrid(dataset[dataset['source'] == 'train'], row='Pclass', col='Sex')\ngrid.map(sns.distplot, 'Age', bins=20, kde=False)","e29b1d17":"# train_df['Sex'] = train_df['Sex'].astype(int)","6c17e83e":"grid_pivot = dataset[dataset['source'] == 'train'].pivot_table(index='Pclass',columns='Sex', values='Age', aggfunc='median')","f366e413":"grid_pivot","f3ceb13f":"# def fage(x):\n#     age_med = grid_pivot.loc[x['Pclass'], x['Sex']]\n#     return age_med","152981fb":"# dataset[dataset['source'] == 'train']['Age'].isna().sum()","7d4bbded":"# dataset.isna().sum()","893af605":"# dataset['Age'].fillna(dataset[dataset['Age'].isnull()].apply(fage, axis=1), inplace=True)","c1b57e64":"guess_ages = np.zeros((2,3))\nguess_ages\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        guess_df = dataset[(dataset['Sex'] == i) & \\\n                              (dataset['Pclass'] == j+1)]['Age'].dropna()\n        age_guess = guess_df.median()\n        \n        # Convert random age float to nearest .5 age\n        #guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n\nfor i in range(0, 2):\n    for j in range(0, 3):\n        dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                'Age'] = guess_ages[i,j]","e894b0d6":"dataset['AgeBand'] = pd.cut(dataset['Age'], 5)","079d7907":"dataset.AgeBand.value_counts()","3183d55c":"dataset['AgeBand'] = dataset['AgeBand'].astype(str)","0ed035c3":"dataset.loc[dataset['source'] == 'train'].pivot_table(index='AgeBand', values='Survived')","157ad04e":"# train_df.head()","0ec9b4b8":"# train_df.loc[train_df['Age'] <= 16, 'Age'] = 0\n# train_df.loc[(train_df['Age'] > 16) & (train_df['Age'] <= 32), 'Age'] = 1\n# train_df.loc[(train_df['Age'] > 32) & (train_df['Age'] <= 48), 'Age'] = 2\n# train_df.loc[(train_df['Age'] > 48) & (train_df['Age'] <= 64), 'Age'] = 3\n# train_df.loc[(train_df['Age'] > 64), 'Age'] = 4\n","719367a1":"# train_df.head()","209e17ba":"def ageclass(x):\n    if x <= 16:\n        return 0\n    elif x > 16 and x <= 32:\n        return 1\n    elif x > 32 and x <= 48:\n        return 2\n    elif x > 48 and x <= 64:\n        return 3\n    else:\n        x > 64\n        return 4","709c046a":"dataset['AgeClass'] = dataset['Age'].apply(ageclass)","9136b2ed":"dataset.head()","a0e6cccf":"dataset['Family_Size']  = dataset['Parch'] + dataset['SibSp'] + 1","fdf24989":"dataset.pivot_table(index='Family_Size', values='Survived').sort_values(by='Survived',ascending=False )","0554a747":"def isalone(x):\n    if x == 1:\n        return 1\n    else:\n        return 0","a53be2f5":"dataset['IsAlone'] = dataset['Family_Size'].apply(isalone)","a3ecc186":"dataset[dataset['source']=='train'].pivot_table(index='IsAlone', values='Survived')","97414f21":"dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)","1244f813":"dataset.isnull().sum()","65859d28":"embarked_dummy = pd.get_dummies(dataset['Embarked'])","3aca6510":"dataset = dataset.join(embarked_dummy)","31f415b8":"dataset.head()","fb5878bc":"dataset['Fare'].fillna(dataset['Fare'].median(), inplace=True)","d71dcb92":"le = LabelEncoder()","e4078817":"dataset['FareBand'] = pd.qcut(dataset['Fare'], 4)","e5fe98be":"dataset['FareClass'] = le.fit_transform(dataset['FareBand'])","efb79830":"dataset.pivot_table(index='FareClass', values='Survived').sort_values(by='Survived', ascending=False)","32e94da5":"# def fareclass(x):\n#     if x <= 7.896 :\n#         return 0\n#     elif x > 7.896 and x <= 14.454:\n#         return 1\n#     elif x > 14.454 and x <= 31.275 :\n#         return 2\n#     elif x > 31.275 and x <= 512.329:\n#         return 3","600c8799":"# dataset['FareClass'] = dataset['Fare'].apply(fareclass)","93f18d90":"# dataset['FareClass'] = dataset['Fare'].apply(fareclass)\n\n# dataset['FareClass'] = dataset['FareClass'].astype(int)\n\n# test_df['FareClass'] = test_df['Fare'].apply(fareclass).astype(int)","e0c31469":"dataset.keys()","ba425ff3":"dataset['Title'] = le.fit_transform(dataset['Title'])","ed57dd05":"dataset['Age*Class'] = dataset['AgeClass'] * dataset['Pclass']","ccba638a":"dataset.head()","8da05dd1":"drop_these = 'Age Cabin Embarked Fare Name Parch Ticket Sex SibSp AgeBand Family_Size FareBand'.split(' ')","8c155196":"drop_these","710cce73":"dataset = dataset.drop(drop_these, axis=1)","c61cb2a9":"dataset.head()","2d5b197a":"train_cleaned = dataset[dataset['source'] == 'train']\ntest_cleaned = dataset[dataset['source'] == 'test']","b50948b6":"train_cleaned['Survived'] = train_cleaned['Survived'].astype(int)","c34c986f":"train_cleaned.keys()","b7ccc781":"'Pclass', 'Survived', 'source', 'Title', 'female','male', 'AgeClass', 'IsAlone', 'C', 'Q', 'S', 'FareClass', 'Age*Class'","43e0f0a2":"def predict_model(dtrain, dtest, predictor, outcome, model):\n    model.fit(dtrain[predictor], dtrain[outcome])\n    dtrain_pred = model.predict(dtest[predictor])\n    score = model.score(dtrain[predictor], dtrain[outcome])*100\n    return score, dtrain_pred","da6876cf":"predictors_var = ['Pclass','Title', 'female','male', 'AgeClass', 'IsAlone', 'C', 'Q', 'S', 'FareClass', 'Age*Class']\noutcome_var = 'Survived'\n# model_name = logreg\ntraindf = train_cleaned\ntestdf = test_cleaned","4b7d6d73":"logreg = LogisticRegression()","b31c98af":"predict_model(traindf, testdf, predictors_var, outcome_var, logreg)","2ef27180":"coef1 = pd.Series(logreg.coef_[0], predictors_var).sort_values()","a150eacc":"coef1.sort_values(ascending=False)","8a60383e":"svc = SVC()","39d7e97a":"predict_model(traindf, testdf, predictors_var, outcome_var, svc)","22818b44":"coef2 = pd.Series(svc.coef_[0], predictors_var).sort_values()\n\ncoef2.sort_values(ascending=False)","162fc53e":"knn = KNeighborsClassifier(n_neighbors=3)","fe42b5d8":"predict_model(traindf, testdf, predictors_var, outcome_var, knn)","1752d949":"gaussian = GaussianNB()","ef661127":"predict_model(traindf, testdf, predictors_var, outcome_var, gaussian)","b080a8da":"decision_tree = DecisionTreeClassifier()","00ff54d4":"predict_model(traindf, testdf, predictors_var, outcome_var, decision_tree)","abc4f169":"coef4 = pd.Series(decision_tree.feature_importances_, predictors_var).sort_values()\n\ncoef4.sort_values(ascending=False)","96438ffa":"random_forest = RandomForestClassifier(n_estimators=100)","12eb1884":"predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)","d52b8f49":"predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)[1]","c62358c3":"results = predict_model(traindf, testdf, predictors_var, outcome_var, random_forest)[1]","035062c0":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": results\n    })","856e0f94":"submission.to_csv('submission_updated.csv', index=False)","4a3efd02":"**Types of features**\n* Categorical Features = Pclass, Sex, Sibsp, Parch, Cabin, Embarked\n* Numerical Features = Age, Fare\n* Others = Name, Ticket, PassengerID","6cbe0eb7":"# Model Predict","59a75c66":"__Data Wrangling__ <br>\nCorrecting, Completing and Creating Goals <br>\nHere we will start modifying out dataset","1293d171":"* Categorical Variables = Pclass, Sex, Sibsp, Parch, Cabin, Embarked\n* Numerical Variables = Age, Fare\n* Others = Name, Ticket, PassengerID","dd8e4a5c":"__K Neighbour Classifier__","851cc246":"__Random Forest__","80a9fc50":"__Dropping features__","f5c58c60":"__Decision Tree__","9103c10f":"# Univariate Analysis (Numerical Variables)","7fe64823":"__**Categorical and Numerical**__","905c5447":"__Logistic Regression__","ab424c12":"__Categorical and Numerical__","5c40f61f":"# Univariate Analysis (Categorical Variables)","1fa07a5e":"* Most people were travelling alone\n* Very less chance of survival if with family","1b81cb46":"* Pclass 1 has the highest survival rate\n* Pclass 3 has most passengers however majority of them didn't survive\n* Infants of Pclass 2 & 3 were mostly survived","2d952094":"# First Kernel\n# EDA and Predictive Modeling of the titanic dataset","2e0f66ec":"__Categorical Features__","c65869c8":"* survival:    Survival \n* PassengerId: Unique Id of a passenger. \n* pclass:    Ticket class     \n* sex:    Sex     \n* Age:    Age in years     \n* sibsp:    # of siblings \/ spouses aboard the Titanic     \n* parch:    # of parents \/ children aboard the Titanic     \n* ticket:    Ticket number     \n* fare:    Passenger fare     \n* cabin:    Cabin number     \n* embarked:    Port of Embarkation\n* Categorical: Survived, Sex, and Embarked. Ordinal: Pclass.\n* Continous: Age, Fare. Discrete: SibSp, Parch","3eb03b9a":"* Most people embarked from C\n","735ade95":"# Bivariate Analysis","bd0aa373":"__GaussianNB__","5b187e2e":"__Create new features by combining existing ones__","25114b92":"__Creating__ new features extracting from existing features","327a767d":"__Converting categorical features__","f7f6f81b":"__Support Vector Machine__"}}