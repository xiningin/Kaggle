{"cell_type":{"0b035666":"code","1dfff67f":"code","414d02ee":"code","7ea747d0":"code","75fa9d89":"code","2a1186aa":"code","7cfb834c":"code","4e6ff97d":"code","1661f068":"code","5f2e563d":"code","137a1e24":"code","fb8108a2":"code","2c823a4a":"code","ccb3c924":"code","687d4763":"code","4ca85d3b":"code","51d0fdcc":"code","6bed0bb3":"code","e000d12d":"code","7bdcdc39":"code","247f6f83":"code","9db0e48e":"code","15bd68db":"code","1fb72a11":"code","9c65bdf3":"code","6a59b007":"code","66b46bb0":"code","cfda9f2d":"code","f27580a9":"code","0e72bfa3":"code","1ee085cb":"code","f5673566":"code","d12c5847":"code","9256b488":"code","4000b3cf":"code","06e0e85b":"code","a0b31a17":"code","35a9e2e2":"code","311b1237":"code","21522bb9":"code","1b7a7531":"code","b1f89ef6":"code","99a40990":"code","77db8376":"code","f3051a48":"code","233e0d05":"code","d50d3241":"code","488c3d91":"code","23d820cf":"code","6661e60a":"code","e4625f60":"code","9e971c90":"code","6518d48a":"code","af5d7704":"code","1fe78a06":"code","f17b62d1":"code","28efd942":"code","ac911f1d":"code","21f04e1a":"markdown","9b7342b2":"markdown","5373c26a":"markdown","72c517cb":"markdown","cb9dbfe3":"markdown","eb5e3159":"markdown","ed6cff8a":"markdown","a580a829":"markdown","a7b6899a":"markdown","78b920c4":"markdown","3ff2c3b5":"markdown","2e312586":"markdown","f69cc038":"markdown","ffe1805e":"markdown","60d95047":"markdown","e66ab125":"markdown"},"source":{"0b035666":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport glob\nimport plotly as py\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport pydicom as dicom\nimport matplotlib.pylab as plt\nimport matplotlib\nimport cv2\nimport ast\nimport json\nimport os","1dfff67f":"train_study = pd.read_csv(\"..\/input\/siim-covid19-detection\/train_study_level.csv\")\ntrain_study.head(2)","414d02ee":"train_study.info()","7ea747d0":"columns = train_study.columns[1:] # ignore id\nx0 = [columns[0],columns[1],columns[2],columns[3]]\n# fetch all '0's\ny0 = [str(len(train_study[train_study[columns[0]] == 0])), str(len(train_study[train_study[columns[1]] == 0])), str(len(train_study[train_study[columns[2]] == 0])), str(len(train_study[train_study[columns[3]] == 0]))]\n\nx1 = [columns[0],columns[1],columns[2],columns[3]]\n# fetch all '1's\ny1 = [str(len(train_study[train_study[columns[0]] == 1])), str(len(train_study[train_study[columns[1]] == 1])), str(len(train_study[train_study[columns[2]] == 1])), str(len(train_study[train_study[columns[3]] == 1]))]\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y0, x=x0, name=\"0\"))\nfig.add_trace(go.Histogram(histfunc=\"sum\", y=y1, x=x1, name=\"1\"))\npy.offline.iplot(fig)","75fa9d89":"train_img = pd.read_csv(\"..\/input\/siim-covid19-detection\/train_image_level.csv\")\ntrain_img.head(2)","2a1186aa":"train_img['label'][0]","7cfb834c":"train_img['boxes'][0]","4e6ff97d":"train_img.info()","1661f068":"# count of missing values in each column\ntrain_img.isnull().sum()","5f2e563d":"sample_sub= pd.read_csv('..\/input\/siim-covid19-detection\/sample_submission.csv')\nsample_sub.head(2)","137a1e24":"train_path = '..\/input\/siim-covid19-detection\/train'\ntest_path = '..\/input\/siim-covid19-detection\/test'","fb8108a2":"train_imgs = glob.glob('\/kaggle\/input\/siim-covid19-detection\/train\/*\/*\/*.dcm')\ntest_imgs = glob.glob('\/kaggle\/input\/siim-covid19-detection\/test\/*\/*\/*.dcm')\n\nprint('Total train images',len(train_imgs) ,'\\nSample train image',train_imgs[0])\nprint('Total test images',len(test_imgs) ,'\\nSample test image',test_imgs [0])","2c823a4a":"def get_image_id(path):\n    image_name = path.split('\/')[-1].replace('.dcm', '_image')\n    return image_name","ccb3c924":"training_images_df = pd.DataFrame(train_imgs, columns =['training_images_path'])","687d4763":"training_images_df['image_id'] = training_images_df.apply(lambda rows: get_image_id(\n                                rows['training_images_path']), axis=1)\n\ntraining_images_df = pd.merge(training_images_df, train_img, left_on='image_id', right_on='id', \n                              how='left')\n\ntraining_images_df.head(3)","4ca85d3b":"training_images_df = training_images_df.drop(['id'],axis=1)\ntraining_images_df.head(2)","51d0fdcc":"training_images = pd.DataFrame(train_imgs, columns =['training_images_path'])","6bed0bb3":"training_images_df['StudyInstance'] = training_images_df.apply(lambda rows: get_image_id(rows['StudyInstanceUID']) + \"_study\", axis=1)\ntraining_images_df = pd.merge(training_images_df, train_study, left_on='StudyInstance', right_on='id', how='left').drop(['StudyInstance','id'], axis=1)\ntraining_images_df.info()","e000d12d":"training_images_df.head(3)","7bdcdc39":"training_images_df.to_csv('.\/merged_train_df.csv', index=False)","247f6f83":"training_images_df['training_images_path'][0]","9db0e48e":"#### Checking for duplicate ID","15bd68db":"# dup_ids= training_images_df.groupby(\"StudyInstanceUID\").count().reset_index()\n# dup_ids","1fb72a11":"# no_dup = dup_ids[dup_ids[\"image_id\"]==1] \n# no_dup","9c65bdf3":"#training_images_df[training_images_df.StudyInstanceUID == 'fa9ea207e240']","6a59b007":"training_images_df.head()","66b46bb0":"neg_pnemonia_no = training_images_df[training_images_df['Negative for Pneumonia']==0]\nneg_pnemonia_yes = training_images_df[training_images_df['Negative for Pneumonia']==1]","cfda9f2d":"neg_pnemonia_no.info()","f27580a9":"neg_pnemonia_yes.info()","0e72bfa3":"neg_pnemonia_no[neg_pnemonia_no['boxes'].isna()]","1ee085cb":"neg_pnemonia_yes[neg_pnemonia_yes['boxes'].isna()]","f5673566":"training_images_df.loc[1, 'boxes']","d12c5847":"boxes = ast.literal_eval(training_images_df.loc[1, 'boxes'])\nprint(boxes)","9256b488":"# Visualize single img with boxes\n\nimage_path = train_imgs[1]\nds = dicom.dcmread(image_path).pixel_array\nfig, ax = plt.subplots(1,1, figsize=(8,4))\nfor box in boxes:\n    print('box',box)\n    p = matplotlib.patches.Rectangle((box['x'], box['y']),\n                                      box['width'], box['height'],\n                                      ec='r', fc='none', lw=1.5)\n    ax.add_patch(p)\nax.imshow(ds, cmap='gray')\nplt.show()","4000b3cf":"training_images_df.head(2)","06e0e85b":"training_images_df.columns","a0b31a17":"def visualization(class_name,df,color):\n    df.dropna(inplace=True)\n    fig,axes = plt.subplots(3,3,figsize=(20,16))\n    fig.subplots_adjust(hspace=.1, wspace=.1)\n    axes = axes.ravel()\n    records = df[\n        df[class_name]==0].iloc[:9].reset_index(drop=True)\n    \n    for _, row in records.iterrows():\n        img = row['training_images_path']\n        img = dicom.dcmread(image_path).pixel_array\n\n        if (row['boxes'] == row['boxes']):\n            boxes = ast.literal_eval(row['boxes'])\n            for box in boxes:\n                p = matplotlib.patches.Rectangle((box['x'], box['y']),\n                                                  box['width'], box['height'],\n                                                  ec=color, fc='none', lw=2.\n                                                )\n                axes[_].add_patch(p)\n\n\n            axes[_].imshow(img, cmap='gray')\n            axes[_].set_title(row['StudyInstanceUID'].split(' ')[0])\n            axes[_].set_xticklabels([])\n            axes[_].set_yticklabels([])","35a9e2e2":"visualization('Indeterminate Appearance',training_images_df,'g')","311b1237":"visualization('Typical Appearance',training_images_df,'r')","21522bb9":"visualization('Atypical Appearance',training_images_df,'b')","1b7a7531":"df= pd.read_csv('.\/training_images_df.csv')","b1f89ef6":"df.head()","99a40990":"none_ = [{'x': 0, 'y': 0, 'width': 1, 'height': 1}]","77db8376":"df.boxes[0] = none_","f3051a48":"boxes = ast.literal_eval(json.dumps(df.loc[0, 'boxes']))\nprint(boxes)","233e0d05":"# Visualize single img with box coordinate - 0,0,1,1\n\nimage_path = train_imgs[0]\nds = dicom.dcmread(image_path).pixel_array\nfig, ax = plt.subplots(1,1, figsize=(8,4))\nfor box in boxes:\n    print('box',box)\n    p = matplotlib.patches.Rectangle((box['x'], box['y']),\n                                      box['width'], box['height'],\n                                      ec='r', fc='none')#, lw=1.5)\n    ax.add_patch(p)\nax.imshow(ds, cmap='gray')\nplt.show()","d50d3241":"df[\"one_hot\"] = df.apply(lambda x : np.array([x[\"Negative for Pneumonia\"],\n                                                        x[\"Typical Appearance\"],\n                                                        x[\"Indeterminate Appearance\"],\n                                                        x[\"Atypical Appearance\"]]),axis=1)","488c3d91":"df.head(2)","23d820cf":"classes_dict = {\n    0 : \"Negative for Pneumonia\",\n    1  : \"Typical Appearance\",\n    2  : \"Indeterminate Appearance\",\n    3  : \"Atypical Appearance\"\n}","6661e60a":"df[\"Class\"] = df[\"one_hot\"].map(lambda x : classes_dict[np.argmax(x)]) # argmax returns the index of max value\ndf[\"Class\"].value_counts()","e4625f60":"df = df.drop([\"Negative for Pneumonia\",\"Typical Appearance\",\"Indeterminate Appearance\",\"Atypical Appearance\",\"one_hot\"],axis=1)\ndf.head(1)","9e971c90":"# Replace nan boxes with one pixel coordinates\ndf[\"boxes\"].fillna(\"[{'x':0,'y':0,'width':1,'height':1}]\",inplace=True)","6518d48a":"df[\"boxes\"] = df[\"boxes\"].map(lambda x : (ast.literal_eval(json.dumps(x))))","af5d7704":"df.info()","1fe78a06":"df.to_csv('train_df_after_eda.csv')","f17b62d1":"df['training_images_path'][0]","28efd942":"df['training_images_path'][1]","ac911f1d":"pd.read_csv('.\/train_df_after_eda.csv')","21f04e1a":"### Atypical Appearance","9b7342b2":"In this competition, we are identifying and localizing COVID-19 abnormalities on chest radiographs. This is an object detection and classification problem.\n\nFor each test image, you will be predicting a bounding box and class for all findings. If you predict that there are no findings, you should create a prediction of \"none 1 0 0 1 1\" (\"none\" is the class ID for no finding, and this provides a one-pixel bounding box with a confidence of 1.0).\n\nFurther, for each test study, you should make a determination within the following labels:\n\n'Negative for Pneumonia' 'Typical Appearance' 'Indeterminate Appearance' 'Atypical Appearance'","5373c26a":"df","72c517cb":"#### Merge train img df with train study df","cb9dbfe3":"#### Replacing boxes with nan value to [{'x': 0, 'y': 0, 'width': 1, 'height': 1}]","eb5e3159":"#### ************ *** EDA DONE ***************** ** ####","ed6cff8a":"All images which are negative for pnemonia (means who do not have pnemonia is equiv to not having covid) has 'none' lables","a580a829":"**train_study_level.csv**\n\nid - unique study identifier\nNegative for Pneumonia - 1 if the study is negative for pneumonia, 0 otherwise\nTypical Appearance - 1 if the study has this appearance, 0 otherwise\nIndeterminate Appearance  - 1 if the study has this appearance, 0 otherwise\nAtypical Appearance  - 1 if the study has this appearance, 0 otherwise\n\n**train_image_level.csv**\n\nid - unique image identifier\nboxes - bounding boxes in easily-readable dictionary format\nlabel - the correct prediction label for the provided bounding boxes","a7b6899a":"### Data Preperation","78b920c4":"### Indeterminate Appearance ","3ff2c3b5":"Total 304 images which are NOT negative for pnemonia (means having pnemonia) has 'none'lables","2e312586":"### Typical Appearance","f69cc038":"#### Save Merged training data df in - output dir","ffe1805e":"#### Image Analysis","60d95047":"### Creating train_df with class lables and boxes","e66ab125":"## Merge train image and train study data based on UID , and append train image path with the merged dataframe"}}