{"cell_type":{"0d5cb45a":"code","1466be92":"code","3121c850":"code","d8062813":"code","426fcbd3":"code","095ebddc":"code","e6062524":"code","19432edc":"code","1276000e":"code","9d6e5ad4":"code","01f227c8":"code","c34d8d18":"markdown","17ab7238":"markdown","5479555d":"markdown","b51212e3":"markdown","5666cd94":"markdown","e49535f2":"markdown","4fc24c73":"markdown","2d69122f":"markdown","8136b84a":"markdown"},"source":{"0d5cb45a":"import numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n","1466be92":"\n#As bases de treino e de teste ser\u00e3o importadas\n\ntrain = pd.read_csv(\"..\/input\/adult-pmr3508\/train_data.csv\", index_col=['Id'], na_values=\"?\")\n\ntest = pd.read_csv(\"..\/input\/adult-pmr3508\/test_data.csv\", index_col=['Id'], na_values=\"?\")\n\n\n\ntrain","3121c850":"#Categoricas\ncategtreino = train[[\"workclass\", \"marital.status\", \"occupation\", \"relationship\", \"race\" , \"sex\" ,\"income\"]]\ncategtest = test[[\"workclass\", \"marital.status\", \"occupation\", \"relationship\", \"race\" , \"sex\"]]\n\n#Numericas\nnumtreino = train[[ \"age\", \"education.num\", \"capital.gain\", \"capital.loss\", \"hours.per.week\"]]\nnumtest = test[[\"age\", \"education.num\", \"capital.gain\", \"capital.loss\", \"hours.per.week\" ]]\n\n","d8062813":"categtreino = pd.get_dummies(categtreino)\ncategtest = pd.get_dummies(categtest)\n\ncategtreino.head()","426fcbd3":"#juntas as duas bases com todos os dados j\u00e1 discretizados \ntrain = pd.concat([numtreino, categtreino], axis = 1)\ntest = pd.concat([numtest, categtest], axis =1)\ntrain = train.drop(columns=[\"income_>50K\"])\ntrain = train.rename(columns={\"income_<=50K\":\"income\"})\ntrain.head()","095ebddc":"y_train = train[[\"income\"]]\nx_train = train.drop([\"income\"], axis = 1)\nx_test = test\n","e6062524":"#vamos buscar o k que tem o melhor score\n\nk_values = np.arange(5,31,5)\nscores = []\n\nfor k in k_values:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    score = cross_val_score(knn, np.array(x_train), np.array(y_train).ravel(), cv = 5, scoring=\"accuracy\").mean()\n    scores.append(score)\n    \nmax_score = max(scores)\nmax_index = np.where(scores == max_score)\nk = k_values[max_index][0]\nprint(\"Acur\u00e1cia com cross validation:\",max_score)\nprint(\"Melhor valor de k:\",k)","19432edc":"knn = KNeighborsClassifier(n_neighbors = k)\nknn.fit(x_train, np.array(y_train).ravel())\n    ","1276000e":"predicao = knn.predict(x_test)\npredicao\n","9d6e5ad4":"#arrumando as colunas de income\n\npredicao = np.array([\"<=50K\" if value == 1 else \">50K\" for value in predicao])\npredicao = pd.DataFrame(predicao,columns = [\"income\"])\npredicao","01f227c8":"predicao.to_csv(\"submission.csv\", index=True, index_label='Id')","c34d8d18":"**2. Tratar base de Dados**\n","17ab7238":"Com a predi\u00e7\u00e3o pronta vamos criar um arquivo csv para submeter as predi\u00e7\u00f5es.","5479555d":"Existem v\u00e1riaveis num\u00e9ricas e vari\u00e1veis categoricas, essas ser\u00e3o separadas em duas bases:\n\n* Categoricas: workclass; marital.status;occupation;relationship;race;sex\n* Num\u00e9ricas: age;education.num;capital.gain;capital.loss;hours.per.week","b51212e3":"**Criar uma array com as predi\u00e7\u00f5es por meio do classificador**","5666cd94":"# **3. Classificador**\n# \nAgora o classificar ser\u00e1 treinado utilizando K variando de 1 a 30 para encontrar o K que resulta em um melhor score. \n\n","e49535f2":"PMR3508 - Aprendizado de M\u00e1quina\n\nHash Code: 104","4fc24c73":"**Importar bibliotecas**\n\n","2d69122f":"Para melhor analisar a base catergorica, vamos discretizar,de modo que cada categoria receba uma coluna para ser marcada com 0 ou 1. ","8136b84a":"Separar as vari\u00e1veis em y (income) e x (features)"}}