{"cell_type":{"5ab7cf11":"code","73725c37":"code","ed60a0c1":"code","5504ee79":"code","39f92d06":"code","4ef81437":"code","204efa91":"code","1a7a6aea":"code","1cd93de7":"markdown"},"source":{"5ab7cf11":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nimport cv2\n\nimport torch\n\nfrom PIL import Image, ImageFile\n\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\nimport torch.nn as nn\nfrom tensorflow.keras.models import load_model\nimport cv2\nimport numpy as np","73725c37":"import pretrainedmodels\n\ndef get_model(pretrained):\n    if pretrained:\n        model = pretrainedmodels.__dict__[\"resnet18\"](\n                pretrained=\"imagenet\"\n        )\n        \n    else:\n        model = pretrainedmodels.__dict__[\"resnet18\"](\n                pretrined = None\n        )\n        \n    model.last_linear = nn.Sequential(\n                nn.BatchNorm1d(512),\n            nn.Dropout(p=0.25),\n            nn.Linear(in_features = 512, out_features = 100 ),\n            nn.ReLU(),\n                nn.BatchNorm1d(100 ,eps=1e-05, momentum=0.1),\n            nn.Dropout(p=0.5),\n            nn.Linear(in_features = 100, out_features = 1 ),\n       nn.Sigmoid()\n            )\n    return model","ed60a0c1":"model = get_model(pretrained=True)","5504ee79":"model.load_state_dict(torch.load('model_new', map_location=torch.device('cpu')))","39f92d06":"face_clsfr=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\n\nsource=cv2.VideoCapture(0)\n\nlabels_dict={0:'MASK',1:'NO MASK'}\ncolor_dict={0:(0,255,0),1:(0,0,255)}","4ef81437":"import torch\n\nfrom PIL import Image, ImageFile\n\nImageFile.LOAD_TRUNCATED_IMAGES = True\n\nclass dataset:\n    def __init__(self, image, resize = None, augmentation = None):\n        \n        self.image = image\n        \n        self.resize = resize\n        self.augmentation = augmentation\n        \n \n    def __getitem__(self):\n        \n        image = self.image\n        \n        image = cv2.resize(image,(100,100))\n        \n            \n        image = np.array(image)\n        \n        if self.augmentation is not None:\n            augmented = self.augmentation(image=image)\n            image = augmented[\"image\"]\n            \n            \n        image = np.transpose(image, (2,0,1)).astype(np.float32)\n            \n        return torch.tensor(image, dtype= torch.float)\n        ","204efa91":"\nimport albumentations\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n\n\nmean = (0.485, 0.456, 0.406)\nstd = (0.229, 0.224, 0.225)\n\naug = albumentations.Compose(\n[\n    albumentations.Normalize(\n    mean, std, max_pixel_value=255.0, always_apply= True\n    )\n]\n)","1a7a6aea":"while(True):\n    \n\n    \n    \n    \n    \n    ret,img=source.read()\n    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    faces=face_clsfr.detectMultiScale(gray,1.3,5)\n    \n   \n    \n    \n    \n    \n    for (x,y,w,h) in faces:\n    \n        face_img=gray[y:y+w,x:x+w]\n        face_img = cv2.cvtColor(face_img, cv2.COLOR_GRAY2BGR)\n\n\n        reshaped = dataset(image= face_img,  resize = (100,100), augmentation=aug)\n        image = reshaped.__getitem__()\n        \n\n        image = np.reshape(image,(1,3,100,100))\n\n        model.eval()\n        \n        result = model(image)\n        result = result.detach().numpy()\n        \n        if result>0.9:\n            label=0\n\n        elif result<0.9:\n            label=1\n        cv2.rectangle(img,(x,y),(x+w,y+h),color_dict[label],2)\n        cv2.rectangle(img,(x,y-40),(x+w,y),color_dict[label],-1)\n        cv2.putText(img, labels_dict[label], (x, y-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,(255,255,255),2)\n        \n        \n    cv2.imshow('LIVE',img)\n    key=cv2.waitKey(1)\n    \n    if(key==27):\n        break\n        \ncv2.destroyAllWindows()\nsource.release()","1cd93de7":"# **Train part is available here**\n\n**https:\/\/www.kaggle.com\/akashsingh00\/face-mask-detection**"}}