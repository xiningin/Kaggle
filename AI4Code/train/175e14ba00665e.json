{"cell_type":{"39d71149":"code","0f65c86b":"code","27825f5b":"code","7d9d8e97":"code","b5181593":"code","2ba08d46":"code","02845190":"code","7afda152":"code","35c8f1e4":"code","3f2cd690":"code","1caeb9e8":"code","5bd882eb":"code","1bc6ac85":"code","4d5822cc":"code","9b49ce48":"code","9b1eb78e":"code","5913af0b":"code","b489aeab":"markdown"},"source":{"39d71149":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nimport re\nimport collections\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split\nfrom nltk.corpus import stopwords\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras import models\nfrom keras import layers\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f65c86b":"import pandas as pd\nimport numpy as np\nimport re","27825f5b":"train_data = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest_data  =pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\ntrain_data.head(10)\ntrain_data.dtypes","7d9d8e97":"train_data['text'][11]","b5181593":"import re\ndef  clean_text(df, text_field, new_text_field_name):\n    df[new_text_field_name] = df[text_field].str.lower()\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\\/\\\/\\S+)|^rt|http.+?\", \"\", elem))  \n    # remove numbers\n    df[new_text_field_name] = df[new_text_field_name].apply(lambda elem: re.sub(r\"\\d+\", \"\", elem))\n    \n    return df\ndata_clean = clean_text(train_data, 'text', 'text_clean')\ndata_clean_tr = clean_text(train_data, 'text', 'text_clean')\ndata_clean_ts = clean_text(test_data, 'text', 'text_clean')\n","2ba08d46":"data_clean['target'] = data_clean['target'].astype(float)","02845190":"import nltk.corpus\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop = stopwords.words('english')\ndata_clean_tr['text_clean'] = data_clean_tr['text_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\ndata_clean_ts['text_clean'] = data_clean_ts['text_clean'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\n\ndata_clean.head()","7afda152":"import nltk \nnltk.download('punkt')\nfrom nltk.tokenize import sent_tokenize, word_tokenize\ndata_clean['text_tokens'] = data_clean['text_clean'].apply(lambda x: word_tokenize(x))\ndata_clean.head()","35c8f1e4":"from nltk.stem import PorterStemmer \nfrom nltk.tokenize import word_tokenize\ndef word_stemmer(text):\n    stem_text = [PorterStemmer().stem(i) for i in text]\n    return stem_text\ndata_clean['text_clean_tokens'] = data_clean['text_tokens'].apply(lambda x: word_stemmer(x))\ndata_clean.head()","3f2cd690":"nltk.download('wordnet')\nfrom nltk.stem import WordNetLemmatizer\ndef word_lemmatizer(text):\n    lem_text = [WordNetLemmatizer().lemmatize(i) for i in text]\n    return lem_text\ndata_clean['text_clean_tokens'] = data_clean['text_tokens'].apply(lambda x: word_lemmatizer(x))\ndata_clean['text_clean_tokens'] = data_clean['text_clean_tokens'].astype(str)\ndata_clean.head()","1caeb9e8":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(data_clean_tr['text_clean'],data_clean_tr['target'],random_state = 0)\n","5bd882eb":"import sklearn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport shap\n","1bc6ac85":"vectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)","4d5822cc":"model = sklearn.linear_model.LogisticRegression(C=0.1)\nmodel.fit(X_train, y_train)","9b49ce48":"explainer = shap.LinearExplainer(model, X_train, feature_dependence=\"independent\")\nshap_values = explainer.shap_values(X_test)\nX_test_array = X_test.toarray() # we need to pass a dense version for the plotting functions","9b1eb78e":"shap.summary_plot(shap_values, X_test_array, feature_names=vectorizer.get_feature_names())","5913af0b":"from sklearn.metrics import classification_report\ny_predict = model.predict(X_test)\nprint(classification_report(y_test, y_predict))","b489aeab":"The regular expression above is meant to find any four digits at the beginning of a string, which suffices for our case. The above is a raw string (meaning that a backslash is no longer an escape character), which is standard practice with regular expressions.\nregex = r'^(\\d{4})'\n"}}