{"cell_type":{"d77e1f7e":"code","88abef01":"code","195bb51d":"code","45c0e307":"code","6273e532":"code","61af3cda":"code","0c11c1ab":"code","5becba9c":"code","d65d7ac1":"code","c867b85d":"code","625fabbc":"code","d089c03a":"code","17a93dc3":"code","945dafae":"code","fef3df4e":"code","ee9bff78":"code","e32da112":"code","74ff9743":"code","e88e43aa":"code","1bb68092":"code","532d574c":"code","400fa2cf":"code","be177acc":"code","7a269749":"code","60eb00ad":"code","8815b407":"code","b3b4f2a7":"markdown","fb087574":"markdown"},"source":{"d77e1f7e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.ensemble import StackingClassifier","88abef01":"df=pd.read_csv('\/kaggle\/input\/machine-predictive-maintenance-classification\/predictive_maintenance.csv')\ndf.shape","195bb51d":"df","45c0e307":"df.info()","6273e532":"df['Target'].value_counts()","61af3cda":"df['Failure Type'].value_counts()","0c11c1ab":"plt.figure(figsize=(10,5))\nsns.countplot(data=df,x='Failure Type')","5becba9c":"df['Product ID'].value_counts()","d65d7ac1":"plt.figure(figsize=(10,5))\nsns.countplot(data=df,x='Type')","c867b85d":"cols_to_drop=['UDI','Product ID','Failure Type']\ndf.drop(columns=cols_to_drop,axis=1,inplace=True)","625fabbc":"df.info()","d089c03a":"type1=pd.get_dummies(df['Type'],drop_first=True)","17a93dc3":"df=pd.concat([df,type1],axis=1)\ndf.drop('Type',axis=1,inplace=True)","945dafae":"x=df.drop(['Target'],axis=1)\ny=df['Target']\n\nprint(x.shape,y.shape)","fef3df4e":"smote=SMOTE()\nx,y=smote.fit_resample(x,y)","ee9bff78":"print(y.value_counts())","e32da112":"def check_skewness(x):\n    \n    skew_limit=0.75\n    skew_value=df[x.columns].skew()\n    skew_cols=skew_value[abs(skew_value)>skew_limit]\n    #print(skew_cols)\n    cols=skew_cols.index\n    return cols\n    \nskewed_col=check_skewness(x)\nprint(skewed_col)\n\npt=PowerTransformer(standardize=False)\nx[skewed_col]=pt.fit_transform(x[skewed_col])","74ff9743":"from sklearn.model_selection import train_test_split\n\nxtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=1)\n\nprint(xtrain.shape)\nprint(ytrain.shape)\nprint(xtest.shape)\nprint(ytest.shape)","e88e43aa":"from sklearn.preprocessing import StandardScaler\n\nsc=StandardScaler()\nxtrain=sc.fit_transform(xtrain)\nxtest=sc.transform(xtest)","1bb68092":"def evaluate(model):\n    model.fit(xtrain,ytrain)\n    accuracy=model.score(xtest,ytest)\n    \n    print('model name ',model)\n    print('accuracy ',accuracy)","532d574c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nlr=LogisticRegression()\nsvm=SVC()\ndt=DecisionTreeClassifier(max_depth=6)\nrf=RandomForestClassifier(max_samples=0.9)\nknn=KNeighborsClassifier(n_neighbors=5)\n\nmodels=[lr,svm,dt,rf,knn]\n\nfor model in models:\n    evaluate(model)","400fa2cf":"base_models=[('RF',RandomForestClassifier(max_samples=0.9)),('knn',KNeighborsClassifier(n_neighbors=5))]\nmeta_model = SVC()\nstacking_model = StackingClassifier(estimators=base_models, final_estimator=meta_model, passthrough=True, cv=3)","be177acc":"stacking_model.fit(xtrain, ytrain)\nstacking_model.score(xtest,ytest)","7a269749":"from sklearn.metrics import confusion_matrix\ny_pred = stacking_model.predict(xtest)\nconf_matrix = confusion_matrix(ytest, y_pred)\nsns.heatmap(conf_matrix, annot = True, fmt='g')","60eb00ad":"from sklearn.metrics import classification_report\nprint(classification_report(ytest, y_pred))","8815b407":"Hyperparameter tuning will further improve the accuracy","b3b4f2a7":"### Imbalanced Target column requires Oversampling","fb087574":"### TYPE column is following a hierarchy but UDI and PRODUCT ID are irrelevant and Failure Type provides little to no relevant information.These columns will be dropped "}}