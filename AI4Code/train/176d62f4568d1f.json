{"cell_type":{"2c179047":"code","6af39d20":"code","dec89d38":"code","79b4024e":"code","2601b186":"code","fb4b3fe2":"code","e29080c8":"code","f4220e2c":"code","4bd88c3d":"code","7b972811":"code","c6680841":"code","5e4eb9bd":"code","b24f3a3b":"code","3a53a461":"code","a5985aa7":"code","95833755":"code","60d91e60":"code","424ee777":"code","f89bff27":"code","cabb85ae":"code","0a85393c":"code","4b6d55dd":"code","1a9e6cc0":"code","3ab6769b":"code","1eeaae57":"code","d88d4f8d":"code","d46a8885":"code","a4ec9b34":"code","c0450770":"code","e01697ef":"code","ec334d35":"code","70e78726":"code","d0b828da":"code","05c1fe22":"code","9913d25c":"code","f75480b3":"code","fa340e20":"code","a01ce677":"code","2b6feff4":"code","b83497b1":"code","73ceef70":"code","0e63f001":"code","fe0fe1c6":"code","0a788fcd":"code","fafe6032":"code","29c02113":"code","0a0bc385":"code","18c58468":"code","2f50b394":"code","790f1dcd":"code","b3aa9c17":"code","bd06a3af":"code","994b9a17":"code","4f419ef4":"code","599e19df":"code","31e348f5":"code","366cea93":"code","75eff617":"code","eba37ea7":"code","7aaac423":"code","6082c1c7":"code","28aebcd3":"code","2f26ba28":"code","07755d4b":"code","bc6a7e10":"code","f88b296a":"code","6cfd69f7":"code","3617670c":"code","fd284846":"code","d7e0a72a":"code","e7948a59":"code","72a329eb":"code","8a635d7b":"code","2c468eef":"code","7d581c2d":"code","2b874c6a":"code","6ee83a74":"code","6f58c9e7":"code","1bba0689":"code","7f5ad28f":"code","2f2bc348":"code","ecc658ec":"code","ef691d9a":"code","9534910e":"code","5eaa5b68":"code","3e5dbe64":"code","8176413e":"markdown","61b8fae2":"markdown","88a750b9":"markdown","222442e0":"markdown","60a35d4c":"markdown","b339f7ff":"markdown"},"source":{"2c179047":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6af39d20":"#We read data here\ndata = pd.read_csv(\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","dec89d38":"#We examine our data, example:\n#data.info()\n#data.columns\ndata.head()","79b4024e":"#I use filtre here beacuse id 10472 data rating is 19.0 and that is impossible\nfiltrete = data[\"Rating\"]<=5\ndata[filtrete].Rating.plot(kind=\"line\",color=\"blue\",grid=True,label=\"Rating\",linewidth=0.5,alpha=9,linestyle=\"-\")\nplt.xlabel(\"ID\")\nplt.ylabel(\"Rating\")\nplt.title(\"Rating Line Graph\")\nplt.show()","2601b186":"#I can't scatter graph because our data has 1 datatype is numberic","fb4b3fe2":"data[filtrete].Rating.plot(kind=\"hist\",bins=40,figsize=(13,13),grid=True,color=\"red\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Number\")\nplt.title(\"Rating Histogram Graph\")\nplt.legend(loc=\"best\")\nplt.show()","e29080c8":"y = data[np.logical_and(data[\"Category\"]==\"ART_AND_DESIGN\",data[\"Type\"]==\"Free\")]\nprint(len(y))","f4220e2c":"dictionary = {\"Azerbaycan\":\"Bak\u00fc\",\"T\u00fcrkiye\":\"Ankara\",\"Rusya\":\"Berlin\"}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nfor index,value in data[[\"Rating\"]][0:10].iterrows():\n    print(index,\" : \",value)","4bd88c3d":"#plt.clf()\ndata[filtrete].Rating.plot(kind=\"hist\",bins=40,figsize=(13,13),grid=True,color=\"red\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Number\")\nplt.legend(loc=\"best\")\nplt.clf()","7b972811":"#User defined function and scope\nx = 12\ny = 9            #Global scope\ndef list1():\n    x = 5        #Local scope\n    y = 7        #If we delete y in our function, then be y=9\n    return [x,y]\nprint([x,y])\nprint(list1())","c6680841":"#Nested Functions\ndef trigon():\n    def value():\n        edge = 10\n        high = 6\n        return edge*high\n    return value()\/2\ntrigon()","5e4eb9bd":"#Default arguments\ndef default(name=\"user\"):\n    return name\nprint(\"Hello\",default())\nprint(\"Hello \"+str(default(\"admin\")))","b24f3a3b":"#Flexible arguments\ntotal = 0\ndef flexible(*args):\n    global total\n    for i in args:\n        total = total + i\n    return total\nprint(flexible(1,2,3,4))","3a53a461":"#Flexible arguments continue\ndef func(**kwargs): #kwargs is dictionary\n    for key,value in kwargs.items():\n        print(key,\" = \",value)\nfunc(German =\"Berlin\",Russian=\"Moskova\")","a5985aa7":"#Lambda\ntrigon = lambda x,y: (x*y)\/2\nprint(trigon(2,2))\n#User function\ndef trigon2(x,y):\n    return (x*y)\/2\nprint(trigon2(2,2))\n#As you see both is same but one is than short","95833755":"#Anonymous\nnumbers = {1,2,3}\ny = list(map(lambda x:x*2,numbers))\nprint(y)","60d91e60":"#Iterable\nisim = \"ali\"\nourIter = iter(isim)\nprint(next(ourIter))\nprint(*ourIter)","424ee777":"#Zip\nlist1 = [0,1,2]\nlist2 = [\"x\",\"y\",\"z\"]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)\n#Unzip\nun_zip = zip(*z_list)\nun_list1,un_list2 = un_zip\nprint(un_list1,\"\\n\",un_list2)\n#un_list1 = list(un_list1)\n#print(un_list1)","f89bff27":"#List comprehension\nnumbers1 = \"1234\"\nnumbers2 = [int(i)**2 for i in numbers1]\nprint(numbers2)","cabb85ae":"numbers = [3,5,10]\nnums = [i-i if i<5 else i*2 if i == 5 else i**2 for i in numbers]\nprint(nums)","0a85393c":" #List comprehension in our data\nfiltrete = data[\"Rating\"]<=5\naverage = sum(data[filtrete].Rating)\/len(data[filtrete].Rating)#Some codes is faulty why I used filter\nprint(round(average,2))\nfor i in range(10841):\n    try:\n        data[\"RatingAverage\"]=[\"high\" if i>average else \"low\" for i in data.Rating]\n        #You can asking we why don't filter because if use filter we outrun the index\n    except:\n        data[\"RatingAverage\"]=[\"Not\"]\ndata.loc[:10,[\"RatingAverage\",\"Rating\"]]","4b6d55dd":"#We can again:\n#columns,head(),tail(),info(),shape etc.","1a9e6cc0":"print(data.RatingAverage.value_counts(dropna =False))","3ab6769b":"data[filtrete].describe()","1eeaae57":"values = [1,7,8,6,71,9,8]\nvalues.sort()# sort() function is sort to values\nprint(values)\n#count is 7\n#mean is 15,7\n#median is 8\n#Q1 or first quaile is 6,5\n#Q3 or third quaile is 8,5","d88d4f8d":"data.boxplot(column=\"Rating\",figsize=(16.5,16.5))\nplt.show()","d46a8885":"new_data= data.tail()\nnew_data","a4ec9b34":"melted = pd.melt(frame=new_data,id_vars=\"App\",value_vars=[\"Genres\",\"Size\"])\nmelted","c0450770":"melted.pivot(index = \"App\",columns=\"variable\",values=\"value\")","e01697ef":"#Row\n\ndata1 = data.head()\ndata2 = data.tail()\ndata3 = pd.concat([data1,data2],axis=0,ignore_index=True)\ndata3","ec334d35":"#Columns\n\napps = data[\"App\"].head()\nreviews = data[\"Reviews\"].head()\ncurrentVer = data[\"Current Ver\"].head()\ndata3 = pd.concat([apps,reviews,currentVer],axis=1)\ndata3","70e78726":"a = data.dtypes\na","d0b828da":"data[\"Rating\"] = data[\"Rating\"].astype(\"float\")# We can't use astype that data\ndata.dtypes","05c1fe22":"data.info()","9913d25c":"data.Rating.value_counts(dropna=False)","f75480b3":"data1 = data.copy()\ndata1.Rating.dropna(inplace=True)","fa340e20":"data.Rating.value_counts(dropna=False)","a01ce677":"assert 2**4==4**2 #We  use assert for test our operation","2b6feff4":"assert data1.Rating.notnull().all # returns nothing","b83497b1":"data1.Rating.fillna(\"Not\",inplace=True)","73ceef70":"assert data1.Rating.notnull().all","0e63f001":"assert data1.columns[0] == \"App\"\nassert data1.Reviews.dtype == \"object\"","fe0fe1c6":"#data frames from dictionary\nstudents = [\"Mansur\",\"Jale\"]\ngrades = [100,90]\nlabel = [\"Name\",\"Grade\"]\ncol = [students,grades]\nzipped = list(zip(label,col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","0a788fcd":"#Add new columns\ndf[\"Average\"] = [\"A+\",\"A\"]\ndf","fafe6032":"#Broadcast\ndf[\"Status\"] = \"Passed\"\ndf","29c02113":"data1 = data.loc[:,[\"Rating\",\"Rating\"]]# We have 1 numeric dataype :(\ndata1.plot()","0a0bc385":"data1.plot(subplots=True)\nplt.show()","18c58468":"data1.plot(kind=\"scatter\",x=\"Rating\",y=\"Rating\")","2f50b394":"data1.plot(kind=\"hist\",y=\"Rating\",bins=50,range=(4,5))#I can't use normed","790f1dcd":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind=\"hist\",y=\"Rating\",bins = 50,range= (0,5),ax=axes[0])\ndata1.plot(kind=\"hist\",y=\"Rating\",bins = 50,range= (0,5),ax=axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","b3aa9c17":"time_list = [\"2005\/03\/28\",\"2005\/01\/18\"]\ndatetime_object = pd.to_datetime(time_list)\ndatetime_object","bd06a3af":"import warnings\nwarnings.filterwarnings(\"ignore\") #Close warning\n\ndata2 = data.head()\ndate_list = [\"1923-10-23\",\"1923-10-24\",\"1923-11-23\",\"1923-11-24\",\"1925-01-18\"]\ndatetime_object = pd.to_datetime(date_list)#Our date_list' change datetime\ndata2[\"Date\"] = datetime_object\ndata2 = data2.set_index(datetime_object)#Set index to datetime\ndata2","994b9a17":"print(data2.loc[\"1925-01-18\"])\nprint(data2.loc[\"1923-11-23\":\"1925-01-18\"])","4f419ef4":"#Resampling\ndata2.resample(\"A\").mean()#Years","599e19df":"data2.resample(\"M\").mean()#Months","31e348f5":"data2.resample(\"M\").first().interpolate(\"linear\")","366cea93":"data2.resample(\"M\").mean().interpolate(\"linear\")","75eff617":"data = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")\ndata.head()","eba37ea7":"assert data[\"Size\"][0]==data.Size[0]\ndata[\"Size\"][0]# indexing using square brackets","7aaac423":"data.Size[0]# using column attribute and row label","6082c1c7":"data.loc[0,[\"Size\"]]# using loc accessor","28aebcd3":"data[[\"Category\",\"Type\"]]","2f26ba28":"print(type(data[\"Rating\"]))\nprint(type(data[[\"Rating\"]]))","07755d4b":"data.loc[0:10,\"Rating\":\"Size\"]","bc6a7e10":"#data.loc[1:10:-1,\"Rating\":\"Size\"] I do not why not reverse","f88b296a":"data.loc[0:,\"Genres\":]","6cfd69f7":"filt = data.Rating<2\ndata[filt]","3617670c":"first_filt = data.Rating<2\nother_filt = data.Category==\"FAMILY\"\ndata[first_filt & other_filt]","fd284846":"data.Reviews[data.Rating==1]","d7e0a72a":"def funt(h):\n    return h\/2\ndata[\"Rating\"].apply(funt)","e7948a59":"data.Rating.apply(lambda h: h\/2)","72a329eb":"data[\"Rating\/10\"] = data.Rating + data.Rating\ndata.head()","8a635d7b":"data.index.name = \"Index\"\ndata.head()","2c468eef":"data3 = data.copy()\ndata3.index = range(100,10941,1)\ndata3.tail()","7d581c2d":"data = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\") # We refresh our data","2b874c6a":"data1 = data.set_index([\"Category\",\"Genres\"])\ndata1.head()","6ee83a74":"dict1 = {\"City\":[\"A\",\"B\",\"A\",\"B\"],\"GradeType\":[\"L\",\"L\",\"U\",\"U\"],\"Population\":[25,75,60,90],\"Grade\":[50,75,100,45]}\ndf = pd.DataFrame(dict1)\ndf","6f58c9e7":"#Pivot\ndf.pivot(index=\"City\",columns=\"GradeType\",values=\"Grade\")","1bba0689":"df1 = df.set_index([\"City\",\"GradeType\"])\ndf1","7f5ad28f":"df1.unstack(level=0)","2f2bc348":"df1.unstack(level=1)","ecc658ec":"#df1\ndf2 = df1.swaplevel(0,1)\ndf2","ef691d9a":"pd.melt(df,id_vars=\"GradeType\",value_vars=[\"Grade\",\"Population\"])","9534910e":"df.groupby(\"GradeType\").mean()","5eaa5b68":"df.groupby(\"GradeType\").Population.mean()","3e5dbe64":"df.groupby(\"GradeType\")[[\"Population\",\"Grade\"]].mean()","8176413e":"Third step!","61b8fae2":"Last and fifth step!","88a750b9":"**My first assignment's second step!**","222442e0":"Actually this code is harded me beacuse I don't know cleaning data now but I improved that code. ","60a35d4c":"Fourth step!","b339f7ff":"Finished here our notebook,thanks for your examination!"}}