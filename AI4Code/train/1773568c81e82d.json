{"cell_type":{"414c93d5":"code","31d9ab98":"code","26b1e227":"code","d19d2eea":"code","b18cf4a7":"code","69aba82b":"code","5555bde9":"code","c0e614ae":"code","04aba5e9":"code","4c3d023b":"code","44e190c5":"code","98feec24":"code","f75d4e2b":"code","b37f2ddb":"code","3505fe02":"code","c0938199":"code","20527768":"code","16e583b4":"code","f9a7f75d":"code","1382c4df":"code","ba50b9af":"code","39820836":"code","3c043efc":"code","96213964":"markdown","2c835cf6":"markdown","b1b15c81":"markdown","1e144b9d":"markdown","aa682093":"markdown","4eddf665":"markdown"},"source":{"414c93d5":"#import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\n\nfrom PIL import Image, ImageDraw","31d9ab98":"!pip install https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/2.0.3\/imageai-2.0.3-py3-none-any.whl","26b1e227":"!wget https:\/\/github.com\/OlafenwaMoses\/ImageAI\/releases\/download\/1.0\/yolo.h5","d19d2eea":"!wget https:\/\/storage.googleapis.com\/openimages\/v5\/class-descriptions-boxable.csv","b18cf4a7":"s_sub = pd.read_csv('..\/input\/sample_submission.csv')\ns_sub.head()","69aba82b":"test_filename = os.listdir('..\/input\/test')\ntest_filename[:5]","5555bde9":"labelMap = pd.read_csv('class-descriptions-boxable.csv', header=None, names=['labelName', 'Label'])\nlabelMap.head()","c0e614ae":"# Show one image\ndef show_image_by_index(i):\n    sample_image = plt.imread(f'..\/input\/test\/{test_filename[i]}')\n    plt.imshow(sample_image)\n\ndef show_image_by_filename(filename):\n    sample_image = plt.imread(filename)\n    plt.imshow(sample_image)","04aba5e9":"show_image_by_index(22)","4c3d023b":"show_image_by_filename(f'..\/input\/test\/e7c0991d9a37bdef.jpg')","44e190c5":"from imageai.Detection import ObjectDetection","98feec24":"#Get the path to the working directory\nexecution_path = os.getcwd()","f75d4e2b":"%%time\n# load model\ndetector = ObjectDetection()\ndetector.setModelTypeAsYOLOv3()\ndetector.setModelPath(os.path.join(execution_path, \"yolo.h5\"))\ndetector.loadModel()","b37f2ddb":"%%time\n# test detection on one image\ndetections = detector.detectObjectsFromImage(input_image=os.path.join('..\/input\/test', 'e7c0991d9a37bdef.jpg'),\n                                                                      #test_filename[64]), \n                                             output_image_path=os.path.join(execution_path , \"result.jpg\"),\n#                                            output_type = 'array',\n                                             extract_detected_objects = False)\nfor eachObject in detections:\n    print(eachObject[\"name\"] , \" : \", eachObject[\"percentage_probability\"], \" : \", eachObject[\"box_points\"] )\n\n# show the result\nshow_image_by_filename('.\/result.jpg')","3505fe02":"#view detection variable\ndetections","c0938199":"def format_prediction_string(image_id, result, labelMap, xSize, ySize):\n    prediction_strings = []\n    #print(xSize, ySize)\n    for i in range(len(result)):\n        class_name = result[i]['name'].capitalize()\n        class_name = pd.DataFrame(labelMap.loc[labelMap['Label'].isin([class_name])]['labelName'])\n        #print(result[i]['box_points'])\n        xMin = result[i]['box_points'][0] \/ xSize\n        xMax = result[i]['box_points'][2] \/ xSize\n        yMin = result[i]['box_points'][1] \/ ySize\n        yMax = result[i]['box_points'][3] \/ ySize\n        \n        if len(class_name) > 0:\n            class_name = class_name.iloc[0]['labelName']\n            boxes = [xMin, yMin, xMax, yMax]#result[i]['box_points']\n            score = result[i]['percentage_probability']\n\n            prediction_strings.append(\n                f\"{class_name} {score} \" + \" \".join(map(str, boxes))\n            )\n        \n    prediction_string = \" \".join(prediction_strings)\n\n    return {\n            \"ImageID\": image_id,\n            \"PredictionString\": prediction_string\n            }","20527768":"%%time\n# Test prediction on input images\nres = []\nfor i in tqdm(os.listdir('..\/input\/test')[20:25]):\n    detections = detector.detectObjectsFromImage(input_image=os.path.join('..\/input\/test', i),\n                                                 output_image_path=os.path.join(execution_path , \"result.jpg\"),\n                                                 #output_type = 'array',\n                                                 extract_detected_objects = False)\n    currentImg = Image.open(os.path.join('..\/input\/test', i))\n    xSize = currentImg.size[0]\n    ySize = currentImg.size[1]\n    #print(xSize, ySize)\n    p = format_prediction_string(i, detections, labelMap, xSize, ySize)\n    res.append(p)","16e583b4":"res[1:2]","f9a7f75d":"# Convert res variable to DataFrame\npred_df = pd.DataFrame(res)\npred_df.head()","1382c4df":"# Get the file name without extension\npred_df['ImageID'] = pred_df['ImageID'].map(lambda x: x.split(\".\")[0])","ba50b9af":"pred_df.head()","39820836":"# Run detection on test images\nsample_submission_df = pd.read_csv('..\/input\/sample_submission.csv')\nimage_ids = sample_submission_df['ImageId']\npredictions = []\nres = []\nfor image_id in tqdm(image_ids):\n    detections = detector.detectObjectsFromImage(input_image=os.path.join('..\/input\/test', image_id + '.jpg'),\n                                                 output_image_path=os.path.join(execution_path , \"result.jpg\"),\n                                                 #output_type = 'array',\n                                                 extract_detected_objects = False)\n    currentImg = Image.open(os.path.join('..\/input\/test', image_id + '.jpg'))\n    xSize = currentImg.size[0]\n    ySize = currentImg.size[1]\n    p = format_prediction_string(image_id, detections, labelMap, xSize, ySize)\n    res.append(p)","3c043efc":"# Save submission file\npred_df = pd.DataFrame(res)\npred_df['ImageID'] = pred_df['ImageID'].map(lambda x: x.split(\".\")[0])\npred_df.to_csv('result.csv', index=False)","96213964":"Copy openimages class names","2c835cf6":"Test procedures","b1b15c81":"Copy pre-trained model (yolo.h5) for Image Recognition and Object Recognition tasks in ImageAI","1e144b9d":"View input files","aa682093":"Import additional modules","4eddf665":"Install ImageAI (A python library built to empower developers to build applications and systems with self-contained Computer Vision capabilities http:\/\/imageai.org)"}}