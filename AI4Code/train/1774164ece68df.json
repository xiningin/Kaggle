{"cell_type":{"911a32f2":"code","da8e4a35":"code","0d897527":"code","b7c71e6b":"code","a6930304":"code","fc19f7f9":"code","815d84f3":"code","bf37ef02":"code","87647ca9":"code","a169a35e":"code","1132ee4a":"code","377b69f1":"code","f0d48397":"code","4a957a81":"code","8ddc2449":"code","04804e51":"code","6d822ba3":"code","72cd1049":"code","ceaff76e":"markdown","78e036d1":"markdown","71c6128e":"markdown","d6cb49ac":"markdown","341c243e":"markdown","e9ac225f":"markdown","46018737":"markdown","da3ef99d":"markdown","a63c8de7":"markdown","50ac41e4":"markdown"},"source":{"911a32f2":"#Importing Relevant Libraries\nimport datetime\nimport pandas as pd\nimport math\nimport numpy as np","da8e4a35":"#Mounting Kaggle Drive\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'): \n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0d897527":"df_orders = pd.read_csv(\"\/kaggle\/input\/challenge04-dataset\/delivery_orders_march.csv\")\ndf_sla = pd.read_csv(\"\/kaggle\/input\/shopeechallenge04dataset\/SLA.csv\")","b7c71e6b":"df_orders.head()","a6930304":"#Converting the datetime \ndf_orders[\"pick\"] = df_orders[\"pick\"].apply(lambda x: datetime.datetime.fromtimestamp(x).strftime('%Y-%m-%d'))\ndf_orders[\"1st_deliver_attempt\"] = df_orders[\"1st_deliver_attempt\"].apply(lambda x: datetime.datetime.fromtimestamp(x).strftime('%Y-%m-%d'))\n\ndef datetime_converter(x):\n    if math.isnan(x):\n        return math.nan\n    else:\n        return datetime.datetime.fromtimestamp(x).strftime('%Y-%m-%d')\n\ndf_orders[\"2nd_deliver_attempt\"] = df_orders[\"2nd_deliver_attempt\"].apply(datetime_converter)","fc19f7f9":"#Getting Locations\ndef get_location(x):\n    x = x.lower()\n    if \"metro manila\" in x:\n        return \"Metro Manila\"\n    elif \"luzon\" in x:\n        return \"Luzon\"\n    elif \"visayas\" in x:\n        return \"Visayas\"\n    elif \"mindanao\" in x:\n        return \"Mindanao\"\n    else:\n        return math.nan\n    \ndf_orders[\"buyeraddress\"] = df_orders[\"buyeraddress\"].apply(get_location)\ndf_orders[\"selleraddress\"] = df_orders[\"selleraddress\"].apply(get_location)","815d84f3":"df_orders.columns","bf37ef02":"#For First Period\nholidays_list = [\"2020-03-25\", \"2020-03-30\", \"2020-03-31\"]\nweek_mask_str = \"1111110\"\n\ndef f(x):\n    return [x[\"pick\"], x[\"1st_deliver_attempt\"]]\n\ndf_orders['first_period_combine'] = df_orders.apply(f, axis=1)\n\ndf_orders[\"1st Attempt Period\"] = df_orders[\"first_period_combine\"].apply(lambda x: np.busday_count(x[0], x[1], weekmask=week_mask_str, holidays = holidays_list))\n#df_orders[\"1st Attempt Period\"] = df_orders[\"1st Attempt Period\"].apply(lambda x: x + 1)","87647ca9":"#For Second Period\ndef f(x):\n    return [x[\"1st_deliver_attempt\"], x[\"2nd_deliver_attempt\"]]\n\ndf_orders['second_period_combine'] = df_orders.apply(f, axis=1)\n\ndef period_calculator(x):\n    if math.nan in x:\n        return -1\n    else:\n        return np.busday_count(x[0], x[1], weekmask=week_mask_str, holidays = holidays_list)\n\ndf_orders[\"2nd Attempt Period\"] = df_orders[\"second_period_combine\"].apply(period_calculator)\n#df_orders[\"2nd Attempt Period\"] = df_orders[\"2nd Attempt Period\"].apply(lambda x: x + 1)","a169a35e":"df_orders","1132ee4a":"df_orders = df_orders.drop(columns=[\"first_period_combine\",\"second_period_combine\"])","377b69f1":"#Combining Address\ndef destination_combine(x):\n    return [x[\"buyeraddress\"], x[\"selleraddress\"]]\ndf_orders[\"Address Combined\"] = df_orders.apply(destination_combine, axis=1)\n\n\ndef destination_period(x):\n    buyeradd = x[0]\n    selleradd= x[1]\n    #Origin Metro Manila\n    if buyeradd == \"Metro Manila\" and selleradd == \"Metro Manila\":\n        return 3\n    elif buyeradd == \"Metro Manila\" and selleradd == \"Luzon\":\n        return 5\n    elif buyeradd == \"Metro Manila\" and selleradd == \"Visayas\":\n        return 7\n    elif buyeradd == \"Metro Manila\" and selleradd == \"Mindanao\":\n        return 7\n    #Origin Luzon\n    elif buyeradd == \"Luzon\" and selleradd == \"Metro Manila\":\n        return 5\n    elif buyeradd == \"Luzon\" and selleradd == \"Luzon\":\n        return 5\n    elif buyeradd == \"Luzon\" and selleradd == \"Visayas\":\n        return 7\n    elif buyeradd == \"Luzon\" and selleradd == \"Mindanao\":\n        return 7\n    #Origin Visayas\n    elif buyeradd == \"Visayas\" and selleradd == \"Metro Manila\":\n        return 7\n    elif buyeradd == \"Visayas\" and selleradd == \"Luzon\":\n        return 7\n    elif buyeradd == \"Visayas\" and selleradd == \"Visayas\":\n        return 7\n    elif buyeradd == \"Visayas\" and selleradd == \"Mindanao\":\n        return 7\n    #Origin Mindanao\n    elif buyeradd == \"Mindanao\" and selleradd == \"Metro Manila\":\n        return 7\n    elif buyeradd == \"Mindanao\" and selleradd == \"Luzon\":\n        return 7\n    elif buyeradd == \"Mindanao\" and selleradd == \"Visayas\":\n        return 7\n    elif buyeradd == \"Mindanao\" and selleradd == \"Mindanao\":\n        return 7\n\ndf_orders[\"SLA Working Days\"] = df_orders[\"Address Combined\"].apply(destination_period)\ndf_orders = df_orders.drop(columns=[\"Address Combined\"])","f0d48397":"def period_combine(x):\n    return [x[\"1st Attempt Period\"], x[\"2nd Attempt Period\"], x[\"SLA Working Days\"]]\n\ndf_orders[\"Period Combined\"] = df_orders.apply(period_combine, axis=1)","4a957a81":"df_orders","8ddc2449":"def punctuality_status(x):\n    first = x[0]\n    second = x[1]\n    period = x[2]\n    \n    #First attempt sucessful\n    if second == -1:\n        if first <= period:\n            return 0\n        else:\n            return 1\n    #Second Attempt\n    else:\n        if second <= 3:\n            return 0\n        else:\n            return 1\n    \ndf_orders[\"is_late\"] = df_orders[\"Period Combined\"].apply(punctuality_status)","04804e51":"#Removing all other columns excepts for orderid and is_late\ndf_orders.drop(df_orders.columns.difference(['orderid','is_late']), 1, inplace=True)","6d822ba3":"df_orders[df_orders[\"is_late\"]==1].count()","72cd1049":"df_orders.to_csv(\"potato_challenge_04_results.csv\", index=False)","ceaff76e":"## 1b. Getting Location\nFor both buyeraddress and selleraddress","78e036d1":"# 2. Feature Engineering for df_orders Dataset","71c6128e":"# Shopee Code League Challenge #04","d6cb49ac":"# 1. Importing Relevant Libaries and Mounting Drive","341c243e":"### 1b. Mounting Drive","e9ac225f":"### 1a. Importing","46018737":"### 1c. Reading in Dataset","da3ef99d":"# 2. SLA Dataset","a63c8de7":"## 2a. Converting DateTime Format","50ac41e4":"## 2c. Calculating Delivery Periods"}}