{"cell_type":{"e3e26b2b":"code","8681acf2":"code","708c0b79":"code","7b7bdd71":"code","bce54bb4":"code","8b3013c2":"code","7a51d597":"code","39159cd4":"code","fa2a7344":"code","943b6166":"code","ec4945a2":"code","41f4344f":"code","fa6a82d2":"code","e7634ae4":"code","c361f0aa":"code","7278b1cf":"code","6cce4f58":"code","90ca89f8":"code","b7fb3c57":"code","b21f71ca":"code","7ceabb4f":"code","19a18eb9":"code","c1185158":"code","8a3e0c3c":"code","58802945":"code","a8ff048b":"code","93d0567c":"code","6ff8b216":"code","91f7fa57":"code","8056a9b7":"code","19875e56":"code","8d0aa9be":"code","bdb167b4":"code","d39bbc65":"code","5948481a":"code","af1dab3b":"code","ab80c299":"code","e88596cb":"code","18cdb3dd":"code","8f6cfb67":"code","d308fa48":"code","a6df98a9":"code","3f096783":"code","02b69f47":"code","24d3dea9":"code","91e78e95":"code","32b40d2b":"code","2e7c4a87":"code","cdd1fd20":"code","25ed371b":"code","af99a90c":"code","2eea2bdc":"code","6929cd46":"code","74c96978":"code","c3cdd92b":"code","98d18ab3":"markdown","52966a97":"markdown","deb1f6b1":"markdown","cd4b47da":"markdown"},"source":{"e3e26b2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8681acf2":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \n%matplotlib inline \nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n","708c0b79":"train_data = pd.read_csv('..\/input\/loan-prediction-analytics-vidhya\/train_ctrUa4K.csv')\ntest_data = pd.read_csv('..\/input\/loan-prediction-analytics-vidhya\/test_lAUu6dG.csv')\ntrain = train_data.copy()\ntest = test_data.copy()","7b7bdd71":"train.head()","bce54bb4":"test.head()","8b3013c2":"train.isna().sum()","7a51d597":"test.isna().sum()","39159cd4":"train.info()","fa2a7344":"train.drop(columns='Loan_ID',inplace =True)\ntest.drop(columns='Loan_ID',inplace =True)","943b6166":"#train.drop('Loan_Status',axis=1,inplace=True)","ec4945a2":"train['Credit_History']=train['Credit_History'].astype(str)\ntest['Credit_History']=test['Credit_History'].astype(str)","41f4344f":"\ncat_cols=[]\nnum_cols=[]\n\nfor col in train.columns:\n    if train[col].dtypes=='object':\n        cat_cols.append(col)\n        \nfor col in train.columns:\n    if train[col].dtypes!='object':\n        num_cols.append(col)\n        \nprint(cat_cols)\nprint(num_cols)","fa6a82d2":"i=1\nplt.figure(figsize=(15,20))\nfor col in cat_cols:\n    plt.subplot(4,2,i)\n    sns.countplot(train[col])\n    i=i+1\nplt.show()","e7634ae4":"train['Loan_Status'].value_counts(normalize=True)","c361f0aa":"i=1\nplt.figure(figsize=(15,20))\nfor col in num_cols:\n    plt.subplot(2,2,i)\n    sns.distplot(train[col])\n    i=i+1\n    \nplt.show()\n   ","7278b1cf":"i=1\nplt.figure(figsize=(20,18))\nfor col in num_cols:\n    plt.subplot(4,2,i)\n    sns.boxplot(train[col])\n    i=i+1\n    \nplt.show()\n   ","6cce4f58":"def remove_outlier(col):\n    sorted(col)\n    Q1,Q3=np.percentile(col,[25,75])\n    IQR=Q3-Q1\n    lower_range= Q1-(1.5 * IQR)\n    upper_range= Q3+(1.5 * IQR)\n    return lower_range, upper_range","90ca89f8":"lr,ur=remove_outlier(train['ApplicantIncome'])\nprint('Lower Range :',lr,'\\nUpper Range :',ur)\ntrain['ApplicantIncome']=np.where(train['ApplicantIncome']>ur,ur,train['ApplicantIncome'])\ntrain['ApplicantIncome']=np.where(train['ApplicantIncome']<lr,lr,train['ApplicantIncome'])","b7fb3c57":"lr,ur=remove_outlier(train['LoanAmount'])\nprint('Lower Range :',lr,'\\nUpper Range :',ur)\ntrain['LoanAmount']=np.where(train['LoanAmount']>ur,ur,train['LoanAmount'])\ntrain['LoanAmount']=np.where(train['LoanAmount']<lr,lr,train['LoanAmount'])","b21f71ca":"lr,ur=remove_outlier(train['CoapplicantIncome'])\nprint('Lower Range :',lr,'\\nUpper Range :',ur)\ntrain['CoapplicantIncome']=np.where(train['CoapplicantIncome']>ur,ur,train['CoapplicantIncome'])\ntrain['CoapplicantIncome']=np.where(train['CoapplicantIncome']<lr,lr,train['CoapplicantIncome'])","7ceabb4f":"lr,ur=remove_outlier(train['Loan_Amount_Term'])\nprint('Lower Range :',lr,'\\nUpper Range :',ur)\ntrain['Loan_Amount_Term']=np.where(train['Loan_Amount_Term']>ur,ur,train['Loan_Amount_Term'])\ntrain['Loan_Amount_Term']=np.where(train['Loan_Amount_Term']<lr,lr,train['Loan_Amount_Term'])","19a18eb9":"train['Married'].fillna(train['Married'].mode()[0], inplace = True)\ntest['Married'].fillna(test['Married'].mode()[0], inplace = True)","c1185158":"train[\"Gender\"].fillna(train[\"Gender\"].mode()[0], inplace = True)\ntest[\"Gender\"].fillna(test[\"Gender\"].mode()[0], inplace = True)","8a3e0c3c":"train['Dependents'].fillna(train['Dependents'].mode()[0], inplace = True) \ntest['Dependents'].fillna(test['Dependents'].mode()[0], inplace = True)","58802945":"train['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace = True) \ntest['Self_Employed'].fillna(test['Self_Employed'].mode()[0], inplace = True)","a8ff048b":"train['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace = True) \ntest['Credit_History'].fillna(test['Credit_History'].mode()[0], inplace = True)","93d0567c":"train[\"LoanAmount\"].fillna(train[\"LoanAmount\"].median(), inplace = True) \ntest[\"LoanAmount\"].fillna(test[\"LoanAmount\"].median(), inplace = True)","6ff8b216":"train[\"Loan_Amount_Term\"].fillna(train[\"Loan_Amount_Term\"].median(), inplace = True) \ntest[\"Loan_Amount_Term\"].fillna(test[\"Loan_Amount_Term\"].median(), inplace = True)","91f7fa57":"# Checking for missing values after preprocessing","8056a9b7":"train.isna().sum()","19875e56":"test.isna().sum()","8d0aa9be":"i=1\nplt.figure(figsize=(20,18))\nfor col in num_cols:\n    plt.subplot(4,2,i)\n    sns.boxplot(train[col])\n    i=i+1\n    \nplt.show()","bdb167b4":"# Encoding Categorical Columns","d39bbc65":"from sklearn.preprocessing import LabelEncoder\n\nle= LabelEncoder()\n\nfor col in cat_cols:\n    train[col]= le.fit_transform(train[col])","5948481a":"train.head()","af1dab3b":"#Scaling Numerical Columns","ab80c299":"from sklearn.preprocessing import StandardScaler\n\nss= StandardScaler()\n\ntrain[num_cols]= ss.fit_transform(train[num_cols].values)","e88596cb":"y= train['Loan_Status']\nX= train.drop('Loan_Status', axis=1)","18cdb3dd":"from sklearn.model_selection import train_test_split,GridSearchCV\nX_train, X_test, y_train,y_test= train_test_split(X,y,test_size= 0.3, stratify=y, random_state=42)","8f6cfb67":"# Building our Model","d308fa48":"from sklearn import svm\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nimport xgboost as xgb\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import roc_auc_score,roc_curve,classification_report,confusion_matrix,plot_confusion_matrix","a6df98a9":"value= [LogisticRegression(), RandomForestClassifier(), AdaBoostClassifier(), KNeighborsClassifier(), XGBClassifier(),GradientBoostingClassifier()]\n\nkey= ['LogisticRegression', 'RandomForsetClassifier', 'AdaBoostClassifier',  'KNeighborsClassifier', 'XGBClassifier','GradientBoostingClassifier']\n\nmodels= dict(zip(key,value))\naccuracy_scores=[]\nfor key,value in models.items():\n    value.fit(X_train,y_train)\n    y_pred= value.predict(X_test)\n    accuracy= accuracy_score(y_test, y_pred)\n    accuracy_scores.append(accuracy)\n    print(key)\n    print(accuracy)","3f096783":"test.head()","02b69f47":"test=test.fillna(test.median())","24d3dea9":"cat_cols1=[]\nnum_cols1=[]\n\nfor col in test.columns:\n    if test[col].dtypes=='object':\n        cat_cols1.append(col)\n        \nfor col in test.columns:\n    if test[col].dtypes!='object':\n        num_cols1.append(col)\n        \nprint(cat_cols1)\nprint(num_cols1)","91e78e95":"from sklearn.preprocessing import LabelEncoder\n\nle= LabelEncoder()\n\nfor col in cat_cols1:\n    test[col]= le.fit_transform(test[col])","32b40d2b":"from sklearn.preprocessing import StandardScaler\n\nss= StandardScaler()\n\ntest[num_cols1]= ss.fit_transform(test[num_cols1].values)","2e7c4a87":"test.head()","cdd1fd20":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(X_train, y_train)","25ed371b":"y_pred=lr.predict(test)","af99a90c":"sample_submission=pd.read_csv(r'..\/input\/loan-prediction-analytics-vidhya\/sample_submission_49d68Cx.csv')","2eea2bdc":"sample_submission['Loan_Status']=y_pred","6929cd46":"status={1: 'Y', 0: 'N'}\nsample_submission['Loan_Status']=sample_submission['Loan_Status'].map(status)","74c96978":"sample_submission.head()","c3cdd92b":"sample_submission.to_csv(r'C:\\DATA file\\Hackathon data.csv')","98d18ab3":"# Load the data","52966a97":"Please share your comment and UPVOTE ME !!!\nHAVE A NICE DAY !!","deb1f6b1":"# Missing values ","cd4b47da":"# #The Logistic Regression algorithm is the most accurate: approximately 84.8%"}}