{"cell_type":{"bcb28809":"code","5417d2b3":"code","44cd304a":"code","50bc92d4":"code","71a8f03f":"code","beb7e4d7":"code","ffcea22e":"code","76c98eac":"code","ac6f3440":"code","2a03fde5":"code","94afc4bd":"code","a5fabf66":"code","075432ac":"code","b896cc55":"code","036f085d":"code","ff2e02c9":"code","42093a0a":"code","1068b255":"code","40cc9a0a":"code","7d625627":"code","d7c63730":"code","75ba92f0":"code","e1d1bc8b":"code","e8ea7e96":"code","21daf6e5":"code","bd2cf90c":"code","e246e14f":"code","fa21b6d7":"code","51b6d35e":"code","32491077":"code","27b33bdf":"markdown","53601b33":"markdown","7c32c725":"markdown","259e2d9f":"markdown","774efd3d":"markdown","5d332d20":"markdown","0621b5d2":"markdown","a0eb89c4":"markdown","57c59b0e":"markdown","70eeb23e":"markdown","f0df6b0c":"markdown","bd8703bf":"markdown","5b06ce03":"markdown","0d04420f":"markdown","b65f1b94":"markdown"},"source":{"bcb28809":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import precision_score\nfrom sklearn.tree import export_graphviz\nfrom sklearn.metrics import recall_score\nimport os\nprint(os.listdir(\"..\/input\"))\nsns.set()\n","5417d2b3":"df=pd.read_csv(\"..\/input\/HR_comma_sep.csv\")","44cd304a":"df.head(5)","50bc92d4":"df.info()","71a8f03f":"display(df.isnull().any())","beb7e4d7":"df.Department.unique()","ffcea22e":"df.salary.unique()","76c98eac":"\n\nfig,ax = plt.subplots(2,3, figsize=(10,10))               # 'ax' has references to all the four axes\nsns.distplot(df['satisfaction_level'], ax = ax[0,0]) \nsns.distplot(df['last_evaluation'], ax = ax[0,1]) \nsns.distplot(df['number_project'], ax = ax[0,2]) \nsns.distplot(df['average_montly_hours'], ax = ax[1,0]) \nsns.distplot(df['time_spend_company'], ax = ax[1,1]) \nsns.distplot(df['promotion_last_5years'], ax = ax[1,2])\n \nplt.show()","ac6f3440":"fig = plt.figure(figsize=(15,7))\nsns.countplot(x='left',data=df)\nplt.show()","2a03fde5":"fig = plt.figure(figsize=(15,7))\nsns.countplot(x='Department',data=df)\nplt.show()","94afc4bd":"fig = plt.figure(figsize=(15,7))\nsns.barplot(x='Department',y='left',data=df)\nplt.show()","a5fabf66":"fig = plt.figure(figsize=(15,7))\nsns.boxplot(x='left',y='salary',data=df)\nplt.show()","075432ac":"fig = plt.figure(figsize=(15,7))\nsns.countplot(x='salary',data=df)\nplt.show()","b896cc55":"fig = plt.figure(figsize=(15,7))\nsns.boxplot(x=\"left\", y= \"satisfaction_level\", data=df)\nplt.show()","036f085d":"fig = plt.figure(figsize=(15,7))\nsns.boxplot(x=\"left\", y= \"number_project\", data=df)\nplt.show()","ff2e02c9":"fig = plt.figure(figsize=(15,7))\nsns.violinplot(x=\"left\", y= \"last_evaluation\", data=df)\nplt.show()","42093a0a":"df.salary=df.salary.astype('category')\ndf.salary=df.salary.cat.reorder_categories(['low', 'medium', 'high'])\ndf.salary = df.salary.cat.codes\n","1068b255":"# Get dummies and save them inside a new DataFrame\ndepartments = pd.get_dummies(df.Department)\n# Take a quick look to the first 5 rows of the new DataFrame called departments\nprint(departments.head(5))","40cc9a0a":"departments = departments.drop(\"accounting\", axis=1)\ndf = df.drop(\"Department\", axis=1)\ndf = df.join(departments)\ndf.head(5)","7d625627":"n_employees = len(df)\n\n# Print the number of employees who left\/stayed\nprint(df.left.value_counts())\n\n# Print the percentage of employees who left\/stayed\nprint(df.left.value_counts()\/n_employees*100)","d7c63730":"fig = plt.figure(figsize=(15,7))\ncor_mat=df.corr()\nsns.heatmap(cor_mat)\nplt.show()","75ba92f0":"target=df.left\nfeatures=df.drop('left',axis=1)","e1d1bc8b":"target_train, target_test, features_train, features_test = train_test_split(target,features,test_size=0.25,random_state=42)","e8ea7e96":"model = DecisionTreeClassifier(random_state=42)\nmodel.fit(features_train, target_train)\nmodel.score(features_train,target_train)*100","21daf6e5":"#model.fit(features_test,target_test)\nmodel.score(features_test,target_test)*100","bd2cf90c":"from sklearn import tree\nfrom IPython.display import Image as PImage\nfrom subprocess import check_call\nfrom PIL import Image, ImageDraw, ImageFont\nimport re\nexport_graphviz(model,\"tree.dot\")\n\ncheck_call(['dot','-Tpng','tree.dot','-o','tree.png'])\n\n# Annotating chart with PIL\nimg = Image.open(\"tree.png\")\ndraw = ImageDraw.Draw(img)\nimg.save('sample-out.png')\nPImage(\"sample-out.png\", height=2000, width=1900)","e246e14f":"model_depth_5 = DecisionTreeClassifier(max_depth=5, random_state=42)\n\n# Fit the model\nmodel_depth_5.fit(features_train,target_train)\n\n# Print the accuracy of the prediction for the training set\nprint(model_depth_5.score(features_train,target_train)*100)\n\n# Print the accuracy of the prediction for the test set\nprint(model_depth_5.score(features_test,target_test)*100)","fa21b6d7":"model_sample_100 = DecisionTreeClassifier(min_samples_leaf=100, random_state=42)\n\n# Fit the model\nmodel_sample_100.fit(features_train,target_train)\n\n# Print the accuracy of the prediction (in percentage points) for the training set\nprint(model_sample_100.score(features_train,target_train)*100)\n\n# Print the accuracy of the prediction (in percentage points) for the test set\nprint(model_sample_100.score(features_test,target_test)*100)","51b6d35e":" #Predict whether employees will churn using the test set\nprediction = model.predict(features_test)\n\n# Calculate precision score by comparing target_test with the prediction\nprecision_score(target_test, prediction)\n","32491077":"# Calculate recall score by comparing target_test with the prediction\nrecall_score(target_test, prediction)","27b33bdf":"Evaluating the model\n","53601b33":"### Splitting the dataset\nwill split both target and features into train and test sets with 75%\/25% ratio, respectively","7c32c725":"Second option to overfitting is limiting the sample size in a leaf(node)","259e2d9f":"###  Seperating target and features\nlets seperate the dependent variable(target) and the independent variables(predictors) seperately","774efd3d":"## Employess count ","5d332d20":"## Percentage of Employee Churn","0621b5d2":"### Purning the tree\nAs we saw above the accuracy is 100% on training and test set, model is overfitting,\nSo fisrt check the option purne the tree, by setting the maximum depth","a0eb89c4":"## Deceision tree ","57c59b0e":"Dataset contains 14999 rows and 10 columns, each row has the details of an employee.  \n\n2 variables are categorical, remaining columns are of int and float\n\n## Checking for any missing values","70eeb23e":"hr Department employees has left the company most, next was accounting, technical, sales and support so on.","f0df6b0c":"11,428 employees stayed, which accounts for about 76% of the total employee count. Similarly, 3,571 employees left, which accounts for about 24% of them","bd8703bf":"## Correlation Matrix","5b06ce03":"## Employees in each Department","0d04420f":"Sales Department has got more employees, next comes technical and Support departments.\n\n## Which Department employess left the company most","b65f1b94":"## Data Preprocessing\nConvert the salary column to categorical"}}