{"cell_type":{"3d0fb2eb":"code","37ea8873":"code","6fa441e0":"code","cf23f225":"code","d68f1472":"code","9e39328a":"code","1a72363d":"code","75c6ef23":"markdown"},"source":{"3d0fb2eb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37ea8873":"%%writefile random_dir_straight_run.py\n\nfrom kaggle_environments.envs.hungry_geese.hungry_geese import Observation, Configuration, Action, row_col\nimport random\ndirs = [\"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"]\n\ndef agent(obs_dict, config_dict):\n    \"\"\"This agent always moves toward observation.food[0] but does not take advantage of board wrapping\"\"\"\n    observation = Observation(obs_dict)\n    configuration = Configuration(config_dict)\n    player_index = observation.index\n    player_goose = observation.geese[player_index]\n    player_head = player_goose[0]\n    player_row, player_column = row_col(player_head, configuration.columns)\n    food = observation.food[0]\n    food_row, food_column = row_col(food, configuration.columns)\n\n    if food_row > player_row and food_column == player_column:\n        return Action.SOUTH.name\n    if food_row < player_row and food_column == player_column:\n        return Action.NORTH.name\n    if food_column > player_column and food_row == player_row:\n        return Action.EAST.name\n    if food_column < player_column and food_row == player_row:\n        return Action.WEST.name\n    return random.choice(dirs)","6fa441e0":"# Agent Validation","cf23f225":"from kaggle_environments import *","d68f1472":"env = make(\"hungry_geese\", configuration={\"columns\": 11, \"rows\": 7, \"hunger_rate\": 40, \"min_food\": 2 }, debug=True)","9e39328a":"output = env.run(['random_dir_straight_run.py', 'random_dir_straight_run.py'])","1a72363d":"env.render(mode=\"ipython\", width=800, height=600)","75c6ef23":"First approach should be simple : \n\n* If there's food in the same row or column, take a step towards it.\n* Otherwise take a step in any random direction."}}