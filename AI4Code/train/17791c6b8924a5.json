{"cell_type":{"33400910":"code","d320ee8d":"code","0aa74d9c":"code","072f5f43":"code","3cf5d672":"code","021eddb9":"code","54095eff":"code","e68c3828":"code","d1fef6be":"markdown","1e810483":"markdown","62e8d499":"markdown","54701345":"markdown","cbd063ca":"markdown"},"source":{"33400910":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.game_ai.ex1 import *\nimport numpy as np\nimport random\nfrom tqdm.notebook import tqdm\nimport time\nfrom kaggle_environments import make, evaluate","d320ee8d":"# Gets board at next step if agent drops piece in selected column\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = piece\n    return next_grid\n\ndef score_move(grid, col, mark, config, func):\n    next_grid = drop_piece(grid, col, mark, config)\n    score = func(next_grid, mark, config)\n    return score\n\ndef get_heuristic(grid, mark, config):\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    num_twos = count_windows(grid, 2, mark, config)\n    num_twos_opp = count_windows(grid, 2, mark%2+1, config)\n    score =  1e2*num_twos - 2e2*num_twos_opp  + 1e4*num_threes - 1e5*num_threes_opp + 1e8*num_fours\n    return score\n\ndef check_window(window, num_discs, piece, config):\n    return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)\n    \n# Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions\ndef count_windows(grid, num_discs, piece, config):\n    num_windows = 0\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[row, col:col+config.inarow])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(grid[row:row+config.inarow, col])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if check_window(window, num_discs, piece, config):\n                num_windows += 1\n    return num_windows","0aa74d9c":"def get_fast_heuristic(grid, mark, config):\n\n#Convert the grid into a string (default + 90deg rotated + all possible diagonals)     \n    horizontal_str=str(grid)\n    vertical_str=str(grid.transpose())\n    diagonal_str=\"\"\n    for col in range(0,4):\n        for row in range(0,3):    \n            for i in range(4):\n                diagonal_str+=str(grid[row+i][col+i])+\" \"\n            diagonal_str+=\",\"\n        for row in range(3,6):    \n            for i in range(4):\n                diagonal_str+=str(grid[row-i][col+i])+\" \"\n            diagonal_str+=\",\"\n\n#Combine all strings into a single one         \n    combined_str= horizontal_str + vertical_str + diagonal_str\n    # print(combined_str)\n\n    str_piece=str(mark)\n    search_str4=str_piece+\" \"+str_piece+\" \"+str_piece+\" \"+str_piece    \n    num_fours=combined_str.count(search_str4)\n    # print(num_fours)\n\n#All possible three cases    \n    search_str3_1=str_piece+\" \"+str_piece+\" \"+str_piece+\" 0\"    \n    search_str3_2=str_piece+\" \"+str_piece+\" 0 \"+str_piece \n    search_str3_3=str_piece+\" 0 \"+str_piece+\" \"+str_piece \n    search_str3_4=\"0 \"+str_piece+\" \"+str_piece+\" \"+str_piece\n\n    num_threes = combined_str.count(search_str3_1)+combined_str.count(search_str3_2)+combined_str.count(search_str3_3)+combined_str.count(search_str3_4)\n    # print(num_threes)\n\n#All possible two cases   \n    search_str2_1=str_piece+\" \"+str_piece+\" 0 0\"    \n    search_str2_2=str_piece+\" 0 0 \"+str_piece \n    search_str2_3=\"0 0 \"+str_piece+\" \"+str_piece \n    search_str2_4=\"0 \"+str_piece+\" 0 \"+str_piece\n    search_str2_5=str_piece+\" 0 \"+str_piece+\" 0\"\n    search_str2_6=\"0 \"+str_piece+\" \"+str_piece+\" 0\"\n\n    num_twos = combined_str.count(search_str2_1)+combined_str.count(search_str2_2)+combined_str.count(search_str2_3)+combined_str.count(search_str2_4)+combined_str.count(search_str2_5)+combined_str.count(search_str2_6)\n    # print(num_twos)\n\n#All possible three cases  (opp)\n    str_piece=str(mark%2+1)\n    search_str3_1=str_piece+\" \"+str_piece+\" \"+str_piece+\" 0\"    \n    search_str3_2=str_piece+\" \"+str_piece+\" 0 \"+str_piece \n    search_str3_3=str_piece+\" 0 \"+str_piece+\" \"+str_piece \n    search_str3_4=\"0 \"+str_piece+\" \"+str_piece+\" \"+str_piece\n\n    num_threes_opp = combined_str.count(search_str3_1)+combined_str.count(search_str3_2)+combined_str.count(search_str3_3)+combined_str.count(search_str3_4)\n    # print(num_threes_opp)\n\n#All possible two cases  (opp)  \n    search_str2_1=str_piece+\" \"+str_piece+\" 0 0\"    \n    search_str2_2=str_piece+\" 0 0 \"+str_piece \n    search_str2_3=\"0 0 \"+str_piece+\" \"+str_piece \n    search_str2_4=\"0 \"+str_piece+\" 0 \"+str_piece\n    search_str2_5=str_piece+\" 0 \"+str_piece+\" 0\"\n    search_str2_6=\"0 \"+str_piece+\" \"+str_piece+\" 0\"\n\n    num_twos_opp = combined_str.count(search_str2_1)+combined_str.count(search_str2_2)+combined_str.count(search_str2_3)+combined_str.count(search_str2_4)+combined_str.count(search_str2_5)+combined_str.count(search_str2_6)\n    # print(num_twos_opp)\n\n#Calculate score \n    score =  1e2*num_twos - 2e2*num_twos_opp  + 1e4*num_threes - 1e5*num_threes_opp + 1e8*num_fours\n    return score","072f5f43":"def get_win_percentages(agent1, agent2, n_rounds=100):\n    # Use default Connect Four setup\n    config = {'rows': 6, 'columns': 7, 'inarow': 4}\n    # Agent 1 goes first (roughly) half the time          \n    outcomes = evaluate(\"connectx\", [agent1, agent2], config, [], n_rounds\/\/2)\n#     print(\"First half:\")\n#     print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2), \"Wins:\",outcomes.count([1,-1]) )\n#     print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2), \"Wins:\",outcomes.count([-1,1]))\n    # Agent 2 goes first (roughly) half the time      \n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\", [agent2, agent1], config, [], n_rounds-n_rounds\/\/2)]\n#     print(\"Full result:\")\n    print(\"Agent 1 Win Percentage:\", np.round(outcomes.count([1,-1])\/len(outcomes), 2), \"Wins:\",outcomes.count([1,-1]))\n    print(\"Agent 2 Win Percentage:\", np.round(outcomes.count([-1,1])\/len(outcomes), 2), \"Wins:\",outcomes.count([-1,1]))\n#     print(\"Number of Invalid Plays by Agent 1:\", outcomes.count([None, 0]))\n#     print(\"Number of Invalid Plays by Agent 2:\", outcomes.count([0, None]))","3cf5d672":"# The agent uses default heuristic given in the class examples\ndef agent(obs, config):\n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    # Use the heuristic to assign a score to each possible board in the next turn\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, get_heuristic) for col in valid_moves]))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    # Select at random from the maximizing columns\n    return random.choice(max_cols)","021eddb9":"# The agent uses fast heuristic implementation\ndef fast_agent(obs, config):\n    # Get list of valid moves\n    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    # Use the heuristic to assign a score to each possible board in the next turn\n    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config, get_fast_heuristic) for col in valid_moves]))\n    # Get a list of columns (moves) that maximize the heuristic\n    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]\n    # Select at random from the maximizing columns\n    return random.choice(max_cols)","54095eff":"start = time.time()\nget_win_percentages(agent1=agent, agent2=agent, n_rounds=100)\nend = time.time()\nprint(\"\\nTime for default Agent:\",(end - start),\"\\n\")\n\nstart = time.time()\nget_win_percentages(agent1=fast_agent, agent2=fast_agent, n_rounds=100)\nend = time.time()\nprint(\"\\nTime for fast Agent:\",(end - start))","e68c3828":"# Default Agent vs Fast Agent\nget_win_percentages(agent1=agent, agent2=fast_agent, n_rounds=100)","d1fef6be":"## Check the performances of two agent against each other (should be around 50%-50%)","1e810483":"## The heuristic given in \"Intro to Game AI and Reinforcement Learning\" course","62e8d499":"## The fast heuristic (string search)","54701345":"## Introduction:\n\nThis notebook contains a fast implementation of the scoring heuristic explained in \"Intro to Game AI and Reinforcement Learning\" course\n\nThe algorithm first **converts the grid into a string** (for rows, columns, and diagonals). Then search the number of occurance of the target cases like threes or twos.\n\nIt performs **5 times faste**r than the default heuristic.","cbd063ca":"## Compare the elapsed times for each agent while playing against itself"}}