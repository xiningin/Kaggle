{"cell_type":{"4310c205":"code","2f03a894":"code","305d807b":"code","caf3c09b":"code","45dac03b":"code","b87c10e2":"code","dfc081fa":"code","8657fe0e":"code","9d8f3055":"code","e6f39cdc":"code","a5ee31ae":"code","a8a32837":"code","eb05dcef":"code","bde2f9c5":"code","5a2ad298":"code","d59bf9a5":"code","27ea7d0f":"markdown","ed6b5486":"markdown","5459ed9b":"markdown","f010d016":"markdown","269c818e":"markdown","b9fd7bdc":"markdown","f906d0d1":"markdown"},"source":{"4310c205":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2f03a894":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n!pip install --upgrade plotly==4.7.1.\n","305d807b":"pip install mplcursors","caf3c09b":"import plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import plot","45dac03b":"df = pd.read_csv(\"..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\ndf.head(n=10)","b87c10e2":"df.drop(index=df.index[0], \n        axis=0, \n        inplace=True)\ndf.head()","dfc081fa":"gender_dict = {\"Nonbinary\": \"Others\", \"Prefer not to say\": \"Others\", \"Prefer to self-describe\": \"Others\"}\ndf[\"Q2\"] = df[\"Q2\"].replace(gender_dict)","8657fe0e":"fig = plt.figure(figsize=(10,5))\nseries = df[\"Q2\"].value_counts()\nax = series.plot.bar(xlabel='Gender',ylabel='Count',rot=0, color='lightblue')","9d8f3055":"gender_df = pd.DataFrame(df[\"Q2\"].value_counts())\ngender_df = gender_df.reset_index(drop=False)\ngender_df.columns = [\"Gender\",\"Count\"]\ngender_df","e6f39cdc":"fig = plt.figure(figsize=(10,5))\nmy_color = ['lightblue','lightsteelblue','silver']\nmy_explode = (0.1, 0.1, 0.1)\nplt.pie(x=gender_df[\"Count\"],autopct='%1.1f%%',colors=my_color,explode=my_explode,shadow=True)\nplt.legend(gender_df[\"Gender\"], loc=\"lower center\", bbox_to_anchor=(0, 0))\nplt.title('Gender Distribution',fontweight='bold',fontsize=20)\nplt.axis('equal')\nplt.show()","a5ee31ae":"age_df = pd.DataFrame(df[\"Q1\"].value_counts())\nage_df = age_df.reset_index(drop=False)\nage_df.columns = [\"Age\",\"Count\"]\nage_df = age_df.sort_values(by='Age')\nage_df","a8a32837":"fig = plt.figure(figsize=(20,8))\nplt.plot(age_df[\"Age\"],age_df[\"Count\"],color=\"lightblue\")\nplt.scatter(age_df[\"Age\"],age_df[\"Count\"], color=\"lightblue\",s = 100)\nplt.title(\"Age Distribution\",fontweight='bold',fontsize=20)","eb05dcef":"fig = px.treemap(df, path=['Q3'], color='Q3')\nfig.update_layout(margin = dict(t=60, l=15, r=15, b=15),\n                  title_text=\"<b>Countries Distribution<\/b>\",\n                  title_x=0.5,\n                  font=dict(family=\"serif\", size=20, color='rgb(5, 14, 48)'))\nfig.show()","bde2f9c5":"by_male = df[df[\"Q2\"]==\"Man\"]\ntmp_male = by_male.Q4.value_counts()\nmale_labels = (np.array(tmp_male.index))\nmale_sizes = (np.array((tmp_male \/ tmp_male.sum())*100))\n\nby_female = df[df[\"Q2\"]==\"Woman\"]\ntmp_female = by_female.Q4.value_counts()\nfemale_labels = (np.array(tmp_female.index))\nfemale_sizes = (np.array((tmp_female \/ tmp_female.sum())*100))\n\nfig = make_subplots(rows=1, cols=2,  specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}]])\n\n\nmale_data = go.Pie(labels=male_labels, values=male_sizes, hole=.8 , domain=dict(x=[0, 0.5]))\nfig.add_trace(male_data,row=1, col=1)\nfig.update_layout( title_text=\"Education Distribution\",\n    annotations=[dict(text='\ud83d\udc68\u200d\ud83c\udf93        \ud83d\udc69\u200d\ud83c\udf93', x=0.163, y=0.5, font_size=60, showarrow=False)])\n\nfemale_data = go.Pie(labels=female_labels, values=female_sizes, hole=.8 , domain=dict(x=[0.5, 1]))\nfig.add_trace(female_data,row=1, col=2)\nfig.show()","5a2ad298":"\nML = [\"Q16_Part_1\", \"Q16_Part_2\", \"Q16_Part_3\", \"Q16_Part_4\", \"Q16_Part_5\", \"Q16_Part_6\", \"Q16_Part_7\", \"Q16_Part_8\", \n             \"Q16_Part_9\", \"Q16_Part_10\", \"Q16_Part_11\", \"Q16_Part_12\", \"Q16_Part_13\", \"Q16_Part_14\", \"Q16_Part_15\", \"Q16_OTHER\"] \nmldf = df.groupby([\"Q2\"])[ML].count()\nmldf.columns = [\"Scikit-learn\", \"TensorFlow\", \"Keras\", \"PyTorch\", \"Fast.ai\", \"MXNet\", \"Xgboost\", \"LightGBM\", \"CatBoost\",\n                    \"Prophet\", \"H2O 3\", \"Caret\", \"Tidymodels\", \"JAX\", \"None\", \"Other\"]\nmldf = mldf.reset_index(drop=False)\nmldf = mldf.sort_values(by=\"TensorFlow\",ascending=False)\n\nfig = plt.figure(figsize=(20,11))\nplt.bar(mldf[\"Q2\"],height=mldf[\"Scikit-learn\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"TensorFlow\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Keras\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Fast.ai\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"PyTorch\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"MXNet\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Xgboost\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"LightGBM\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"CatBoost\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Prophet\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"H2O 3\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Caret\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Tidymodels\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"JAX\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"None\"],width=0.8)\nplt.bar(mldf[\"Q2\"],height=mldf[\"Other\"],width=0.8)\n\nimport mplcursors\nmplcursors.cursor(hover=True)\nplt.show()","d59bf9a5":"\ndf1 = mldf.set_index('Q2').transpose()\ndf1.plot(kind='bar',stacked = True)","27ea7d0f":"# Gender Distribution","ed6b5486":"# Countries Distribution","5459ed9b":"# Framework Distribution","f010d016":"# Importing Data","269c818e":"# Education Distribution\n\n(I used plotly here, documentation of plotly, its very good) \nSource : https:\/\/plotly.com\/python\/","b9fd7bdc":"**Droppping zeroth index **\n\n(indexs are very useful to learn )\n(Source : https:\/\/towardsdatascience.com\/pandas-index-explained-b131beaf6f7b)","f906d0d1":"# Age Distribution"}}