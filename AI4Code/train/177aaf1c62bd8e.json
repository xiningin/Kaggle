{"cell_type":{"1ab55039":"code","8402d19a":"code","8056ab9d":"code","5769dfbd":"code","cb56ebd4":"code","530d05cd":"code","bc0af13a":"code","6508abfd":"code","06d3859a":"code","3cc55ee8":"code","c56a911c":"code","affbe8c1":"code","36defc3d":"code","2b36c666":"code","a2490317":"code","9ae21580":"code","cad82c55":"code","a0ba0e08":"code","3f3ad096":"code","b2d052a9":"markdown","5c711b00":"markdown","0753a561":"markdown","c84b0588":"markdown","fac3f82e":"markdown","2570ef99":"markdown","a6dfdb5a":"markdown","ca31e8e4":"markdown","b7073a45":"markdown","509bd843":"markdown","6804b192":"markdown","0ae9befd":"markdown","c50e0f68":"markdown","f23ab025":"markdown","6106a7bf":"markdown"},"source":{"1ab55039":"\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","8402d19a":"pk = pd.read_csv(\"..\/input\/Pokemon.csv\")","8056ab9d":"pk.head()","5769dfbd":"pk.info()","cb56ebd4":"pk.describe()","530d05cd":"pk.corr()","bc0af13a":"pk[\"Type 1\"].unique()","6508abfd":"pk[\"Type 2\"].unique()","06d3859a":"# pkp = sns.countplot()\n# plt.show(pkp)\nplt.figure(figsize=(18,9))\nsns.countplot(pk['Type 1'])\nplt.xlabel('Types')\nplt.title('Pokemon types')","3cc55ee8":"plt.figure(figsize=(18,9))\nsns.countplot(pk['Type 2'])\nplt.xlabel('Types')\nplt.title('Pokemon types')","c56a911c":"labels = 'Water', 'Normal', 'Grass', 'Bug', 'Psychic', 'Fire', 'Electric', 'Rock', 'Other'\nsizes = [112, 98, 70, 69, 57, 52, 44, 44, 175]\ncolors = ['C', 'grey', 'g', 'burlywood', 'b', 'r', 'Y', 'k', 'M']\nplt.pie(sizes, labels=labels, colors=colors, startangle=90)\nplt.axis('equal')\nplt.title(\"Percentage of Different Types of Pokemon\")\nplt.plot()\nfig=plt.gcf()\nfig.set_size_inches(7,7)\nplt.show()","affbe8c1":"plt.figure(figsize=(15,5))\nsns.stripplot(x=\"Type 1\", y=\"HP\", data=pk, jitter=True, linewidth= 1)\nplt.xlabel('Types')\nplt.title('Pokemon types')\n","36defc3d":"LP = pk[pk['Legendary']==True]\nprint(LP)","2b36c666":"pk['Type 2'].fillna(pk['Type 1'], inplace=True) ","a2490317":"print(pk[pk['Type 2'] == np.nan])\n# As we can see the dataset has no NA values","9ae21580":"sns.jointplot(x='Attack', y='Speed', \n              data=pk, color ='red', kind ='reg', \n              size = 8.0)\nplt.show()","cad82c55":"sns.jointplot(x='Attack', y='Defense', \n              data=pk, color ='c', kind ='reg', \n              size = 8.0)\nplt.show()","a0ba0e08":"from plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \n\nx = pk[pk[\"Name\"] == \"Alakazam\"]\ndata = [go.Scatterpolar(\n  r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n  theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n  fill = 'toself',\n)]\n\nlayout = go.Layout(\n  polar = dict(\n    radialaxis = dict(\n      visible = True,\n      range = [0, 250]\n    )\n  ),\n  showlegend = False,\n  title = \"Performance of {} in terms of RAW power\".format(x.Name.values[0])\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename = \"Single Pokemon stats\")\n","3f3ad096":"iplot([go.Histogram2dContour(x=pk.head(100)['Sp. Atk'], \n                             y=pk.head(100)['Sp. Def'], \n                             contours=go.Contours(coloring='heatmap')),\n       go.Scatter(x=pk.head(100)['Sp. Atk'], y=pk.head(100)['Sp. Def'], mode='markers')])\n\n","b2d052a9":"Here we can see for each type how much HP variation takes place","5c711b00":"# Gotta catch em all\n**Author: Chinmay Upadhye**\n\nEnjoy the nostalgia !\n[https:\/\/www.youtube.com\/watch?v=JuYeHPFR3f0]\n\n![Friendship](http:\/\/images.nintendolife.com\/news\/2015\/11\/video_kids_react_to_the_original_pokemon_anime_television_series\/attachment\/0\/900x.jpg)\n### His journey began from Pallet town, mine continues from Kaggle\n","0753a561":"The special attack, special defence and speed seems to be powerful aspects of alakazam","c84b0588":"For given attack values the regression plot suggests that as the attack value increases, the defense value might increase. This is evident from positive slope of the line.","fac3f82e":"## **Checking characteristics of Alakazam**\n![](http:\/\/static.pokemonpets.com\/images\/monsters-images-300-300\/65-Alakazam.png)","2570ef99":"#### Looking at all of the legendary Pokemons in dataset","a6dfdb5a":"As we can see that number of water type Pokemons is highest which is true case even in real world (71% covered in water). As we know Normal type Pokemons appear very frequetly in wild. Hence unless you train them for special move, we need to look for type 2 abilities.","ca31e8e4":"### Finding your pokemon","b7073a45":" **Here we can see that speed abilities have a larger Gaussian spread compared to attack. This shows that instead of only some pokemons having extreme abilities, many pokemon with different attack levels have fair amount of speed**","509bd843":"#### The graph is interactive.\n [Learn more at] (https:\/\/www.youtube.com\/watch?v=-Lt7kpTM-v8) KDE plots are explained in good way.\n I woul also like to thank Siddharth Yadav for his Kernel","6804b192":"Now we will find unique types of pokemons to identify basic major class of pokemons","0ae9befd":"### Cleaning Dataset","c50e0f68":"### Finding out which abilities work with respect to each other. Whether one ability affects another's performance","f23ab025":"**Two dimesional Kernel density estimation of Special Attack vs Special defense. Here we can see their joint distribution**","6106a7bf":"Thank you for your time. Please ask if you have any questions or have any cool ideas you want me to add in this kernel. If this Kernel was helpful please upvote the given kernel. I'll be developing more machine learning models in future so also follow my profile."}}