{"cell_type":{"1e729244":"code","6775a7f8":"code","428e1ac7":"code","91459588":"code","0dff4818":"code","11fc2934":"code","0ce41d52":"code","8409e39b":"code","38e4b1be":"code","f2997542":"code","b8de8659":"code","051e9b49":"code","1da2bea8":"code","c8d264aa":"code","123baeea":"code","75ca158d":"code","3deca151":"code","eabef4dc":"code","09dfd985":"code","497ad299":"code","56332194":"code","0c0b0d2f":"code","75df99a9":"code","efc0d892":"code","3fdcc63d":"code","979ab503":"code","be2fc23c":"markdown","81b5e959":"markdown","d2064a49":"markdown","086de1bd":"markdown","4faf3b8b":"markdown","27c24054":"markdown","ed935b70":"markdown","3e690df2":"markdown","a14e5470":"markdown","52d904b4":"markdown","4a2c229a":"markdown","5026c8c2":"markdown","bbf636a8":"markdown","ae57dc6f":"markdown","2023d392":"markdown"},"source":{"1e729244":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n","6775a7f8":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/test.csv\")","428e1ac7":"df_train.columns","91459588":"print(f\"Shape of train dataset: {df_train.shape}\")\nprint(f\"Shape of test dataset: {df_test.shape}\")","0dff4818":"x = df_train.iloc[:, 1:15].values  \nprint(x) \ny = df_train.iloc[:, -1].values ","11fc2934":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=0)","0ce41d52":"from xgboost import XGBRegressor\nimport lightgbm as ltb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn import model_selection","8409e39b":"# XGB\nXGB = XGBRegressor(max_depth=3,learning_rate=0.1,n_estimators=1000,reg_alpha=0.001,reg_lambda=0.000001,n_jobs=-1,min_child_weight=3)\nXGB.fit(X_train,y_train)","38e4b1be":"y_pred_xgb = XGB.predict(X_test)","f2997542":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_xgb))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_xgb))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_xgb)))","b8de8659":"\nlgbm = ltb.LGBMRegressor()","051e9b49":"#Defining a dictionary containing all the releveant parameters\nparam_grid = {\n    \"boosting_type\": ['gbdt'],\n    \"num_leaves\": [9, 19],  #[ 19, 31, 37, 47],\n    \"max_depth\": [29], #[7, 15, 29, 37, 47, 53], \n    \"learning_rate\": [0.1, 0.15],\n    \"n_estimators\": [1000], #[500, 1000, 2000], \n    \"subsample_for_bin\": [200000], #[20000, 200000, 2000000], \n    \"objective\": [\"regression\"],\n    \"min_child_weight\": [0.01], #[0.001, 0.01], \n    \"min_child_samples\":[100, 200], #[20, 50, 100], \n    \"subsample\":[1.0], \n    \"subsample_freq\":[0], \n    \"colsample_bytree\":[1.0], \n    \"reg_alpha\":[0.0], \n    \"reg_lambda\":[0.0]\n}","1da2bea8":"model = model_selection.RandomizedSearchCV(\n    estimator=lgbm,\n    param_distributions=param_grid,\n    n_iter=100,\n    scoring=\"neg_root_mean_squared_error\",\n    verbose=10,\n    n_jobs=-1,\n    cv=5\n)","c8d264aa":"# fit the model and extract best score\nmodel.fit(X_train, y_train)","123baeea":"print(f\"Best score: {model.best_score_}\")\nprint(\"Best parameters from the RandomSearchCV:\")\nbest_parameters = model.best_estimator_.get_params()\nfor param_name in sorted(param_grid.keys()):\n    print(f\"\\t{param_name}: {best_parameters[param_name]}\")","75ca158d":"# Get best model\nbest_model = model.best_estimator_","3deca151":"y_pred_lgb = best_model.predict(X_test)","eabef4dc":"\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred_lgb))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred_lgb))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred_lgb)))","09dfd985":"preds_ensemble_avg = (y_pred_xgb + y_pred_lgb)\/2","497ad299":"print(\"Averaging Ensemble predictions KPI here:\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, preds_ensemble_avg))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, preds_ensemble_avg))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, preds_ensemble_avg)))","56332194":"preds_ensemble_avg = (y_pred_xgb*0.1 + y_pred_lgb *0.9)","0c0b0d2f":"print(\"Weighted average Ensemble predictions KPI here:\")\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, preds_ensemble_avg))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, preds_ensemble_avg))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, preds_ensemble_avg)))","75df99a9":"#make prediction using XGB regressor model\npreds_xgb = XGB.predict(df_test.iloc[:,1:].values)","efc0d892":"#Make prediction using LighGBM regressor model\npreds_lgb = best_model.predict(df_test.iloc[:,1:].values)","3fdcc63d":"sub=pd.read_csv(\"..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv\")","979ab503":"# Taking weighted average of predictions from XGB and LGB models for submission here\n#sub.target = (preds_xgb + preds_lgb)\/2 \nsub.target = (preds_xgb*0.1+ preds_lgb*0.9) \nsub.to_csv(\"submission.csv\", index=False)","be2fc23c":"2. Weighted Average","81b5e959":"## Lets ensemble test split predictions from XGB and LGB to see if rmse improved","d2064a49":"This notebook implemented following key features:\n    1. Implemented two models, `XGB` and `LightGBM` regressor model. \n    2. Next carried out `grid serach` for optimal `hyper-parameter`, and \n    3. Third, compared two ensemble methods i.e. `averaging` and `weighted average` to make final submission.","086de1bd":"Lets import the data.","4faf3b8b":"## Ensemble averaging & Submission file prepration here ","27c24054":"### <span style=\"color:blue\">Please up-vote if you find this notebook-content of use and help! <\/span>\n\nThis  is not black.","ed935b70":"LGBRegressor here:","3e690df2":"1. Averaging:\n\nHere, first we will train two models i.e. `XGBRegressor` and `LGBRegressor`. And later take average of predicted target and make submission file for this challenge.","a14e5470":"`Conclusion`: Results avobe shows, `weighted average` performs better than `simple average` ensemble model. Therefore, we will submit, weighted average prediction as submission.","52d904b4":"We know, this tabular data is clean and does not have any missing values; therefore, skipping data exporation and quality check. Now, lets jump to two important `Ensembling techiques`.\n\n1. Averaging, and \n2. Weighted Average","4a2c229a":"Data split here:","5026c8c2":"XGBRegressor training and prediction here:","bbf636a8":"1. Averageing ","ae57dc6f":"Conclusion: Results below shows, weighted average performs better than simple average ensemble model. Therefore, we will submit, weighted average prediction as submission.","2023d392":"## Introduction"}}