{"cell_type":{"3b6c98c3":"code","3b13e74e":"code","6ac81d8c":"code","a3c17a49":"code","8aec7daf":"code","b6a16bf0":"code","446ff0c9":"code","63d2dff2":"code","c4377706":"code","0486583b":"code","414b18f9":"code","1019f8d2":"code","b13ecc68":"code","3e36d4af":"code","1c9c82de":"code","8cc6cecc":"code","3b3be690":"code","8202ead1":"code","bc86779b":"code","8ec01467":"code","37a7f599":"code","ccb7d49a":"code","1b9499b6":"code","d06b775e":"code","fe2586ef":"code","ac344f7d":"code","7dcb5ff3":"code","0762495a":"code","1bd3df34":"code","4f3b4215":"code","b5a8cb96":"code","a77f8ac2":"code","fc730453":"code","d2a0cb5c":"code","36a81704":"code","628316c2":"markdown","0ece2963":"markdown","a2999a8a":"markdown","aaa82151":"markdown"},"source":{"3b6c98c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3b13e74e":"import matplotlib.pyplot as plt\nimport seaborn as sns","6ac81d8c":"random_state = 42\nnp.random.seed(random_state)\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","a3c17a49":"features = [\"var_{}\".format(i) for i in range(200)]","8aec7daf":"plt.figure(figsize=[16,9])\nsns.heatmap(df_train[features].corr())","b6a16bf0":"plt.figure(figsize=[16,9])\nsns.heatmap(df_test[features].corr())","446ff0c9":"plt.figure(figsize=[16,9])\ndf_train.boxplot()","63d2dff2":"plt.figure(figsize=[16,9])\ndf_test.boxplot()","c4377706":"df_train.drop_duplicates().shape","0486583b":"names = []\nfor i in range(30, 50):\n    names.append(\"var_{}\".format(i))","414b18f9":"plt.figure(figsize=[16,9])\nsns.heatmap(df_train[names].corr())","1019f8d2":"plt.figure(figsize=[16,9])\ndf_train[names].boxplot()","b13ecc68":"sns.boxplot(df_train[\"var_45\"])","3e36d4af":"sns.boxplot(df_test[\"var_45\"])","1c9c82de":"def plot_feature_scatter(df1, df2, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(4,4,figsize=(14,14))\n\n    for feature in features:\n        i += 1\n        plt.subplot(4,4,i)\n        plt.scatter(df1[feature], df2[feature], marker='+')\n        plt.xlabel(feature, fontsize=9)\n    plt.show();","8cc6cecc":"features = [\"var_{}\".format(i) for i in range(200)]","3b3be690":"c = 0\nfor j in range(16, 200, 16):\n    plot_feature_scatter(df_train,df_test, features[c:j])\n    c += 16","8202ead1":"print(df_train.target.value_counts())\nfrac = (df_train.target.value_counts()[1]\/df_train.target.value_counts()[0])*100\nprint(\"The fraction of 'True' is \" + str(frac) + \" %\")","bc86779b":"sns.boxplot(df_train[\"var_68\"])","8ec01467":"sns.boxplot(df_test[\"var_68\"])","37a7f599":"def plot_feature_boxplot(df, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(4,4,figsize=(14,14))\n\n    for feature in features:\n        i += 1\n        plt.subplot(4,4,i)\n        sns.boxplot(df[feature])\n        plt.xlabel(feature, fontsize=9)\n    plt.show();","ccb7d49a":"c = 0\nfor j in range(16, 200, 16):\n    plot_feature_boxplot(df_train, features[c:j])\n    c += 16","1b9499b6":"c = 0\nfor j in range(16, 200, 16):\n    plot_feature_boxplot(df_test, features[c:j])\n    c += 16","d06b775e":"even_vars = [\"var_{}\".format(i) for i in range(0,200,2)]\nodd_vars = [\"var_{}\".format(i) for i in range(1,200,2)]","fe2586ef":"plt.figure(figsize=[16,9])\nsns.heatmap(df_train[even_vars].corr())","ac344f7d":"plt.figure(figsize=[16,9])\nsns.heatmap(df_train[odd_vars].corr())","7dcb5ff3":"for j in range(0,191,10):\n    sns.heatmap(df_train[[\"var_{}\".format(i) for i in range(j,j+10)]])\n    plt.show()","0762495a":"df_train.var_125.nunique(), df_train.var_71.nunique(), df_train.var_103.nunique(), df_train.var_91.nunique(), df_train.var_68.nunique()","1bd3df34":"def plot_feature_distplot(df, features):\n    i = 0\n    sns.set_style('whitegrid')\n    plt.figure()\n    fig, ax = plt.subplots(4,4,figsize=(14,14))\n\n    for feature in features:\n        i += 1\n        plt.subplot(4,4,i)\n        sns.distplot(df[feature])\n        plt.xlabel(feature, fontsize=9)\n    plt.show();","4f3b4215":"c = 0\nfor j in range(16, 200, 16):\n    plot_feature_distplot(df_train, features[c:j])\n    c += 16\n\nplot_feature_distplot(df_train, features[c:])","b5a8cb96":"c = 0\nfor j in range(16, 200, 16):\n    plot_feature_distplot(df_test, features[c:j])\n    c += 16\n\nplot_feature_distplot(df_test, features[c:])","a77f8ac2":"s = df_train[features].shape","fc730453":"i = 0\nplt.figure(figsize=[16,16])\n\nfor feature in features:\n    plt.subplot(4,4,i+1)\n    plt.plot(list(range(s[0])), df_train[feature].values)\n    plt.xlabel(feature)\n    i += 1\n    if i == 16:\n        i = 0\n        plt.show();\n        plt.figure(figsize=[16,16])","d2a0cb5c":"plt.figure(figsize=[16,16])\nfor i in range(16):\n    plt.subplot(4,4,i+1)\n    plt.plot(list(range(s[1])), df_train[features].iloc[i].values, \"orange\")\n    plt.plot(list(range(s[1])), df_test[features].iloc[i].values, \"blue\")\n    plt.xlabel(\"line {}\".format(i))\nplt.show();","36a81704":"plt.figure(figsize=[16,16])\nfor i in range(16):\n    plt.subplot(4,4,i+1)\n    plt.plot(list(range(s[1])), sorted(df_train[features].iloc[i].values), \"orange\")\n    plt.plot(list(range(s[1])), sorted(df_test[features].iloc[i].values), \"blue\")\n    plt.legend([\"train\", \"test\"])\n    plt.xlabel(\"line {}\".format(i))\nplt.show();","628316c2":"**Well, let's try to sort lines**","0ece2963":"**Looks interesting. Each sorted line is similar to another.**","a2999a8a":"**Train Distribution**","aaa82151":"**Test Distribution**"}}