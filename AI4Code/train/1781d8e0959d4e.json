{"cell_type":{"7ed18d78":"code","e0f8a19b":"code","5dc3d7c7":"code","0a0b80f6":"code","63b21b4a":"code","4ca39bb3":"code","6e003830":"code","a4550306":"code","cc33f653":"code","f5b2a56c":"code","b6e43377":"code","44a1de63":"markdown","20807e8f":"markdown","54d9fc1a":"markdown","dada6d78":"markdown","0263e2db":"markdown","714a0043":"markdown","aacfb475":"markdown","98506c64":"markdown","86f39242":"markdown","655e25fb":"markdown","4c3bd4c5":"markdown","4bf8ab7a":"markdown","594b3e53":"markdown","343df93e":"markdown","5717ad0e":"markdown","749dffd1":"markdown","9295db2b":"markdown","9933c179":"markdown","8720a4ec":"markdown","a7223f0b":"markdown","7b967080":"markdown","a3b65a37":"markdown","a3eddbd0":"markdown","f24287cf":"markdown","3f704850":"markdown","9848c825":"markdown","a6c3bf72":"markdown","21c1ffe0":"markdown"},"source":{"7ed18d78":"#Importing the basic librarires\n\nimport math\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom datetime import datetime as dt\nfrom IPython.display import display\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = [15,8]\n\nimport warnings \nwarnings.filterwarnings('ignore')","e0f8a19b":"#Importing the dataset\n\ndf = pd.read_csv('..\/input\/air-passengers-forecast-dataset\/AirPassengers.csv')\ndf.Month = df.Month.apply(lambda x : dt(int(x[:4]),int(x[5:]),15))\ndf.set_index('Month', inplace=True)\noriginal_df = df.copy(deep=True)\ndisplay(df.head())\n\nprint('\\n\\033[1mInference:\\033[0m The Datset consists of {} features & {} samples.'.format(df.shape[1], df.shape[0]))","5dc3d7c7":"#Plotting the Timeseries\n\ndf.plot()\nplt.grid()\nplt.show()","0a0b80f6":"#Stationary Check\n\nfrom statsmodels.tsa.stattools import adfuller\n\ndef Staionarity_Check(ts):\n    plt.plot(ts, label='Original')\n    plt.plot(ts.rolling(window=52, center=False).mean(), label='Rolling Mean')\n    plt.plot(ts.rolling(window=52, center=False).std(), label='Rolling Std')\n    plt.grid()\n    plt.legend()\n    plt.show()\n    \n    adf = adfuller(ts, autolag='AIC')\n    padf = pd.Series(adf[:4], index=['T Statistic','P-Value','#Lags Used','#Observations Used'])\n    for k,v in adf[4].items():\n        padf['Critical value {}'.format(k)]=v\n    print(padf)\n    \nStaionarity_Check(df['#Passengers'])","63b21b4a":"#Decomposing using moving average\n\ntsl = np.log(df)\nma = tsl.rolling(window=12).mean()\nms = tsl.rolling(window=12).std()\n\nplt.plot(ma, c='r')#, center=False)\nplt.plot(ms, c='g')\nplt.plot(tsl)\nplt.grid()\nplt.show()","4ca39bb3":"# Stationarity Check for Decomposed Time Series\n\ntsl - np.log(df)\nma = tsl.rolling(window=12, center=False).mean()\n\ntslma = tsl - ma\ntslma = tslma.dropna()\nStaionarity_Check(tslma)","6e003830":"#Auto Correlation Fuction #q\n\nfrom statsmodels.tsa.stattools import acf, pacf\nplt.plot(np.arange(acf(tslma, nlags=10,fft=True).shape[0]),acf(tslma, nlags=10, fft=True))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Auto Correlation Fuction')\nplt.grid()\nplt.show()","a4550306":"#Partial Auto Correlation Fuction #p\n\nfrom statsmodels.tsa.stattools import acf, pacf\nplt.plot(np.arange(pacf(tslma, nlags=10).shape[0]),pacf(tslma, nlags=10))\nplt.axhline(y=0, linestyle='--', c='gray')\nplt.axhline(y=-7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\nplt.axhline(y=7.96\/np.sqrt(len(tslma)), linestyle='--',c='gray')\n\nplt.title('Partial Auto Correlation Fuction')\nplt.grid()\nplt.show()","cc33f653":"#Building ARIMA Model\n\nfrom statsmodels.tsa.arima.model import ARIMA\n\nArima = ARIMA(tslma, order=(1,1,1))\nAr = Arima.fit()\n# plt.plot(tslma, label=['Original'])\n# plt.plot(Ar.fittedvalues,c='r', label=['Forecast'])\n# plt.legend()\n# plt.grid()\n\nAr.summary()","f5b2a56c":"from pandas.tseries.offsets import DateOffset\nfuture_dates=[df.index[-1]+ DateOffset(months=x)for x in range(0,24)]\nfuture_datest_df=pd.DataFrame(index=future_dates[1:],columns=df.columns)\n\nfuture_datest_df.tail()\n\nfuture_df=pd.concat([df,future_datest_df])\n\nfuture_df['#Passengers'] = Ar.predict(start =102, end = 131, dynamic= False)\n\nplt.plot(df, label=['Original'])\nplt.plot(np.exp(future_df+ma), label=['Forecast'])\nplt.grid()\nplt.legend()\nplt.show()","b6e43377":"#<<<------------------------------------ THE END -------------------------------------------->>>","44a1de63":"---","20807e8f":"**Inference:** It's clear from the plot that there is an uptrend in the volumne of Passengers, with some seasonality. Let us perform stationarity check using visual (rolling mean & std) & statistical tests ( Dicky-Fooler's Test) to confirm the same.","54d9fc1a":"---","dada6d78":"## <center> Stractegic Plan of Action:","0263e2db":"**Inference:** The PACF Curve drops to 0 when the lag value is between 1 & 2, hence the optimal value of `p` can be either 1 or 2.","714a0043":"**Inference:** The Arima Model fits well on the time-series data with nearly perfect p-values. Let us now forcast the future data with the help of the trained ARIMA Model.","aacfb475":"### Here are some of the key outcomes of the project:\n- The Air-Passengers Time-Series Dataset was quiet small, with just 144 samples.\n- It was clear from the visuals that the time-series dataset had an upward trend & some seasonality.\n- The same was confirmed with help of visual (rolling mean & std) & statistical (Dicky-Fuller Test) stionarity checks.\n- The time-series was subject to Decomposition in order to stationarize the outputs.\n- Futher ACF & PACF curves were plotted to extract the values of p & q, as it is required for the ARIMA Model.\n- The Forecasting Model was then built with the time-series data, by feeding the optimal p,q,d values.\n- Finally, the model was used to forecast the time-series of the air-passengers, into the future.","98506c64":"# <center> \u2605 AI \/ ML Project - Forecasting Air Passengers \u2605\n#### <center> ***Domain: Aviation***","86f39242":"## <center> Project Outcomes & Conclusions","655e25fb":"**Inference:** Since the test statistic is higher than the critical value, & the rolling mean is not constant over time, therefore the null hypothesis cannot be rejected. This implies that the time-series is non-staionary!\nLet us fix this by decomposing using moving average...","4c3bd4c5":"**Inference**: Now the test staistic can be observed to be less that 5% critical value, hence the nullhypothsis can be rejected. Indicating that the time series is stationary & we can use it to create our ARIMA Model. But before that, let us find the parameters - `p` & `q` required by the model, by plotting Auto-Correlation Function & Partial Auto-Correlation Function.","4bf8ab7a":"### Description:\n\nA simple yet challenging project, to forecast the volume of air passengers, based on monthly totals of a US airline passengers from 1949 to 1960.\nCan you overcome these obstacles & Forecast the future occupancies of the Airlines?\n\nThis data frame contains the following columns:\n* Month : The month of observation\n* #Passengers : Total Passengers travelled in that particular month\n\n### Acknowledgment:\n\nThis dataset is referred from Kaggle\n\n### Objectives:\n- Understand the Dataset & cleanup (if required).\n- Perform the necessary checks like stationarity & DF on the Dataset.\n- Build a forcasting model to predict the future volumne of the air passengers.","594b3e53":"---","343df93e":"---","5717ad0e":"1. Visualize the time series - Check for trend, seasonality, or random patterns.\n2. Stationarize the series using decomposition or differencing techniques.\n3. Plot ACF\/PACF and find (p,d,q) parameters.\n4. Building the forecasting model - can be AR, MA, ARMA or ARIMA.\n5. Making Predictions using the Forecasting Model","749dffd1":"## <center>5. Forecasting","9295db2b":"## <center>4. Model Building","9933c179":"---","8720a4ec":"---","a7223f0b":"---","7b967080":"---","a3b65a37":"**Inference:**<br>\nThe model's forecast seems to be precise as it captures most of the sesonality & possible trends in the time-series data.\n","a3eddbd0":"**Inference:** The ACF Curve passes throught the upper confidence value when the lag value is between 0 & 1, hence the optimal value of `q` can be either 0 or 1.","f24287cf":"## <center>1. Visualizing the Time Series","3f704850":"---","9848c825":"<center> <img src=\"https:\/\/raw.githubusercontent.com\/Masterx-AI\/Project_Forecasting_Air_Passengers__\/main\/ap.jpg\" style=\"width: 700px;\"\/>","a6c3bf72":"## <center>3. Plotting ACF \/ PACF","21c1ffe0":"## <center>2. Stationarize the Series"}}