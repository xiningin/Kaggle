{"cell_type":{"41bd65e8":"code","a41b043f":"code","6846e074":"code","10f2c309":"code","63c52d79":"code","6e9a227c":"code","416a1bfa":"code","b250ad4c":"code","fe10a4c2":"code","5ec31769":"code","644b7ccb":"code","3067059e":"code","87d1229e":"code","8adb9835":"code","8604f2cd":"code","090dd8f7":"code","f989e881":"code","12d2eca8":"code","7657e332":"code","0e24dad7":"code","7c13dc69":"code","b3c3c723":"code","9ddb395d":"code","245ae05d":"code","dafee1b3":"markdown","4a97418f":"markdown","e8f3d535":"markdown","fb5ab607":"markdown","1173070b":"markdown","fdffd175":"markdown","5472e03a":"markdown","0bb26663":"markdown","aaa12aa1":"markdown","9097fefa":"markdown","98667648":"markdown","e551d92f":"markdown","7dc4d1ed":"markdown","8c421c25":"markdown","88770fe8":"markdown","5035c511":"markdown","0aa68099":"markdown","db1b6f43":"markdown","fe9c11bb":"markdown","3a4385e2":"markdown","f89a8fe3":"markdown","8d198af4":"markdown","be42bc66":"markdown","c8749d7d":"markdown","59948ee0":"markdown","4722c74c":"markdown","bc6121fd":"markdown","1424a88f":"markdown","0c043457":"markdown"},"source":{"41bd65e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a41b043f":"train_data = pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/mnist-in-csv\/mnist_test.csv\")","6846e074":"print(\"Train Shape --> \",train_data.shape)\nprint(\"Test Shape --> \",test_data.shape)","10f2c309":"train_data.head()","63c52d79":"# how many of which numbers are there?\nplt.figure(figsize=(15,7))\ng = sns.countplot(train_data[\"label\"], palette=\"cubehelix\")\nplt.title(\"Number of digit classes\")\nprint(\" \\t # Train Data value counts # \\n\",train_data[\"label\"].value_counts())","6e9a227c":"X_train = train_data.drop([\"label\"], axis = 1).values\ny_train = train_data.label.values\n\nX_test = test_data.drop([\"label\"], axis = 1).values\ny_test = test_data.label.values","416a1bfa":"print(\"X_train shape --> \",X_train.shape)\nprint(\"y_train shape --> \",y_train.shape)\nprint(\"X_test shape --> \",X_test.shape)\nprint(\"y_test shape --> \",y_test.shape)","b250ad4c":"plt.figure(figsize=(10,8))\nimg = X_train[244]\nimg = img.reshape((28,28))\nplt.subplot(1,2,1)\nplt.imshow(img,cmap='gray')\nplt.title(train_data.iloc[244,0])\nplt.grid()\n\nimg1 = X_train[25]\nimg1 = img1.reshape((28,28))\nplt.subplot(1,2,2)\nplt.imshow(img1,cmap='gray')\nplt.title(train_data.iloc[25,0])\nplt.grid()\nplt.show()","fe10a4c2":"X_train = (X_train.astype(np.float32)-127.5)\/127.5\nprint(\"X_train Shape --> \",X_train.shape)","5ec31769":"# in --> (60000, 28, 28)\n#X_train = X_train.reshape(X_train.shape[0],X_train.shape[1]*X_train.shape[2])\n# out --> (60000, 784)","644b7ccb":"from keras.layers import Dense, Dropout, Input, ReLU\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam","3067059e":"generator = Sequential()\ngenerator.add(Dense(units = 512, input_dim = 100))\ngenerator.add(ReLU())\n\ngenerator.add(Dense(units = 512))\ngenerator.add(ReLU())\n\ngenerator.add(Dense(units = 1024))\ngenerator.add(ReLU())","87d1229e":"generator.add(Dense(units = 784, activation = \"tanh\"))","8adb9835":"generator.compile(loss = \"binary_crossentropy\",\n                optimizer = Adam(lr = 0.0001, beta_1 = 0.5))","8604f2cd":"generator.summary()","090dd8f7":"discriminator = Sequential()\ndiscriminator.add(Dense(units = 1024, input_dim = 784))\ndiscriminator.add(ReLU())\ndiscriminator.add(Dropout(0.4))\n\ndiscriminator.add(Dense(units = 512))\ndiscriminator.add(ReLU())\ndiscriminator.add(Dropout(0.4))\n\ndiscriminator.add(Dense(units = 256))\ndiscriminator.add(ReLU())","f989e881":"discriminator.add(Dense(units = 1, activation = \"sigmoid\"))","12d2eca8":"discriminator.compile(loss = \"binary_crossentropy\",\n                      optimizer = Adam(lr = 0.0001, beta_1 = 0.5))","7657e332":"discriminator.summary()","0e24dad7":"discriminator.trainable = False\ngan_input = Input(shape = (100,))\nx = generator(gan_input)\ngan_output = discriminator(x)\ngan = Model(inputs = gan_input, outputs = gan_output)\ngan.compile(loss = \"binary_crossentropy\", optimizer = \"adam\")","7c13dc69":"gan.summary()","b3c3c723":"epochs = 50\nbatch_size = 256","9ddb395d":"for e in range(epochs):\n    for _ in range(batch_size):\n        \n        \"\"\"\n         Yes, we first generate noise to give it to the generator.\n         The generator will try to generate us a new image using it.\n        \"\"\"\n        noise = np.random.normal(0,1, [batch_size, 100])  \n        \n        \"\"\"\n         We give the noise we have produced above to my generator.\n         We have already produced this generator above. This will produce us an image as output\n        \"\"\"\n        generated_images = generator.predict(noise)\n        \n        \"\"\"\n        we produced our fake pictures above. It's time to choose our real pictures. We will do this here.\n        \"\"\"\n        image_batch = X_train[np.random.randint(low = 0, high = X_train.shape[0], size = batch_size)]\n        \n        \"\"\"\n        We combine our two data to send it to the discriminator.\n        \"\"\"\n        x = np.concatenate([image_batch, generated_images])\n        \n        \"\"\"\n        Yes, we got our pictures but they don't have tags. Here we add tags to your images.\n        Real Images --> 1\n        Generated Images --> 0\n        \"\"\"\n        y_dis = np.zeros(batch_size*2)\n        y_dis[:batch_size] = 1\n        \n        \"\"\"\n        Now we can train the discriminator.\n        We set it to True to train the discriminator. Because we closed it above.\n        inputs --> x (real image, fake image)\n        \"\"\"\n        discriminator.trainable = True\n        discriminator.train_on_batch(x,y_dis)\n        \n        \"\"\"\n        Yes, now we can move on to the generated training.\n        Generated Images --> 1\n        Here why we showed fake pictures as 1.\n        Because we want to deceive the discriminator. This will make him more successful.\n        \"\"\"\n        noise = np.random.normal(0,1, [batch_size,100]) \n        y_gen = np.ones(batch_size)\n        \n        discriminator.trainable = False\n        \n        gan.train_on_batch(noise, y_gen)\n    print(\"epochs: \",e)\n        ","245ae05d":"plt.figure(figsize=(25,16))\nnoise= np.random.normal(loc=0, scale=1, size=[100, 100])\ngenerated_images = generator.predict(noise)\ngenerated_images = generated_images.reshape(100,28,28)\n\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.imshow(generated_images[i], interpolation='nearest', cmap = \"gray\")\n    plt.axis('off')\n\nplt.suptitle(\"Pictures Produced Using the GANs Model\", fontsize = 20 , color = \"darkred\", fontweight = 'bold')\nplt.show()","dafee1b3":"<a id ='3' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nMore detailed GANs \u2049\ufe0f <\/h2>\n\n![pn.PNG](attachment:d5426892-88a8-411a-a2a8-c4d271cd9fcd.PNG)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > What is our purpose here? Isn't it generating new data? Yes, as we can see from the picture, we have real pictures and we also have a generator that will generate fake pictures. The picture produced by the generator and the real picture go to the detective and the detective decides which is real and which is fake. As a result of this, a loss occurs and the transaction is continued by back propagation. <\/p>\n\n<a id ='4' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > How is the Generator Trained? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Let me explain this a little bit more narratively. At first the generator will produce a picture that does not look like the real picture because the room does not know what it is producing and will label the picture it produces, so it will say that this is the real picture and send it to the detective. The detective will say you couldn't fool me it's not real and send it back. This pattern generator, experiment by experiment, will now produce a picture that is very similar to the real picture and will deceive the detective. In this way, a new data will be produced. <\/p>","4a97418f":"<a id ='17' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nGenerator Summary <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> We will look at our generator model that we created above. <\/p> <\/li>\n  <\/ul>","e8f3d535":"![Ads\u0131z.png](attachment:e3e40ce0-0aab-43fa-b29e-e2f74b72d830.png)\n\n<center><h1 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Introduction \ud83d\udcd6 <\/h1><\/center>\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\">The mnist_train.csv file contains the 60,000 training examples and labels. The mnist_test.csv contains 10,000 test examples and labels. Each row consists of 785 values: the first value is the label (a number from 0 to 9) and the remaining 784 values are the pixel values (a number from 0 to 255).<\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > What are we going to do in this notebook? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Yes, without going into too much detail in this notebook, what are GANs? We will talk about topics such as what are the usage areas. We will perform the steps below one by one. While doing these, we will use visuals so that they can be better visualized in our minds.<\/p>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > So, let's get started. <\/p>\n    \n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\">Content :<\/h2>\n\n<ul>\n    <li style = \"color:gray;font-size:16px\"> <a href = \"#1\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Generative Adversarial Networks \ud83d\udcda \u2753 <\/a>\n    <ul>\n        <li style = \"color:darkblue;font-size:16px\"> <a href = \"#2\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\"> How does this learn to create new data? <\/a> <\/li> \n    <\/ul>\n    <\/li> \n        <li style = \"color:gray;font-size:16px\"> <a href = \"#3\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> More detailed GANs \u2049\ufe0f <\/a>\n    <ul>\n        <li style = \"color:darkblue;font-size:16px\"> <a href = \"#4\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\"> How is the Generator Trained? <\/a> <\/li> \n    <\/ul>\n    <\/li> \n        <li style = \"color:gray;font-size:16px\"> <a href = \"#5\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> What are the uses of GANs \u2753 <\/a> <\/li>\n        <li style = \"color:gray;font-size:16px\"> <a href = \"#6\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Load and Check Data \ud83d\uddf8 <\/a> <\/li> \n    <li  style = \"color:gray;font-size:16px\" > <a href = \"#7\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Train - Test Split <\/a>  <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#8\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Normalization \u2049\ufe0f  <\/a> \n                <ul>\n                    <li style = \"color:gray;font-size:16px\" ><a href = \"#9\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" >   Why do we want to normalize the pictures? <\/a><\/li>\n                <\/ul>\n            <\/li>\n            <li style = \"color:gray;font-size:16px\" ><a href = \"#10\" style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Reshape \u2753 <\/a> \n                <ul>\n                    <li style = \"color:gray;font-size:16px\" ><a href = \"#11\" style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" >   Why do we need to reshape the pictures? <\/a><\/li> <\/ul><\/li>\n      <li style = \"color:black;font-size:16px\" ><a href = \"#12\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Implementing with Keras \u2754<\/a>\n          <ul>\n        <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#13\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Import Model Library  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#14\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Create Generator <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#15\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Generator Output  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#16\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Generator Compile  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#17\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Generator Summmary <\/a> <\/li> \n              <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#18\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Create Discriminator <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#19\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Discriminator Output  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#20\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Discriminator Compile  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#21\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Discriminator Summmary <\/a> <\/li> \n                                    <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#22\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Create GANs  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#23\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> GANs Summmary <\/a> <\/li> \n                                                  <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#24\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Epochs and Batch Size \u2753  <\/a> <\/li> \n                      <li style = \"color:darkgreen;font-size:16px\"> <a href = \"#25\" style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\"> Fit the Model <\/a> <\/li> \n    <\/ul> <\/li>\n<li style = \"color:gray;font-size:16px\"> <a href = \"#26\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Result <\/a> <\/li>\n    <li style = \"color:gray;font-size:16px\"> <a href = \"#27\" style = \"color:black;font-family:Segoe Print;font-weight:bold\"> CONCLUSION <\/a> <\/li>\n<\/ul>","fb5ab607":"<a id ='23' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nGANs Summary <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Yes, now that we've built our GANs model, we can take a look at it.<\/p> <\/li>\n  <\/ul>","1173070b":"<a id ='16' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nGenerator Compile <\/h4>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Yes, now we need to compile our model.<\/p>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\"> optimizer --> The optimizer does the process of updating our parameters for us here. some kind of healer I can say. There are methods used for multiple optimizers, and you should choose the most suitable one for the model.\n <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> loss --> It is a number that indicates how good or bad the model is to its prediction. As it approaches 0, the error starts to decrease.\n <\/p> <\/li>\n        <\/ul>","fdffd175":"<a id ='27' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nCONCLUSION <\/h3>\n\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >Would be glad to hear your nice comments or questions. <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  You can check out other tutorials here. <br> <br>\n    RNN Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/recurrent-neural-n-rnn-tutorial-for-beginners\" >https:\/\/www.kaggle.com\/rafetcan\/recurrent-neural-n-rnn-tutorial-for-beginners<\/a>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Seaborn Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/visualization-tutorial-with-seaborn\" >https:\/\/www.kaggle.com\/rafetcan\/visualization-tutorial-with-seaborn<\/a>\n<\/p>\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Plotly Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/plotly-tutorial-for-beginners\" >https:\/\/www.kaggle.com\/rafetcan\/plotly-tutorial-for-beginners<\/a><\/p>\n    <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  CNN Tutorial -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/convolutional-neural-network-cnn-tutorial\" >https:\/\/www.kaggle.com\/rafetcan\/convolutional-neural-network-cnn-tutorial<\/a>\n<\/p>\n    <p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >  Long Short-Term Memory N. (LSTM) for Beginners \ud83d\udcda -->  \n    <a href = \"https:\/\/www.kaggle.com\/rafetcan\/long-short-term-memory-n-lstm-for-beginners\" >https:\/\/www.kaggle.com\/rafetcan\/long-short-term-memory-n-lstm-for-beginners<\/a>\n<\/p>\n\n<p style = \"text-shadow: 12px 12px 2px #333;color:darkgreen;font-family:Segoe Print;font-weight:bold\" > I YES, WE HAVE COME TO AN END. THANK YOU<\/p>","5472e03a":"<a id ='21' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nDiscriminator Summary <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">We take a look at the discriminator model we created.<\/p> <\/li>\n  <\/ul>","0bb26663":"<a id ='14' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nCreate Generator <\/h3>\n\n![dddddd.PNG](attachment:93e31b3b-b267-453a-af31-d6681bef03f2.PNG)\n\n<ul>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> I wanted to show the generator model that we will create above by visualizing it so that it can be better understood and fit in the head.<\/p> <\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> In this section, we will create our manufacturer model. While doing this, we will do it step by step for better understanding.<\/p> <\/li>\n  <\/ul>","aaa12aa1":"<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> We create our generator model. Below we will add an output layer to our model. <\/p> <\/li>\n  <\/ul>","9097fefa":"<a id ='8' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nNormalization \u2049\ufe0f <\/h2>\n\n<a id ='9' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Why do we want to normalize the pictures? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >If we do not normalize, there may be errors due to certain colors. So, we first need to normalize. <\/p>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Images are represented by values \u200b\u200bbetween 0 and 255. Therefore <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> There are many ways to normalize. Here we prefer to subtract the average from the pixel value and divide by the average. In this way, we will bring all of our images to the [-1,1] range.<\/p> <\/li>\n <\/ul>\n","98667648":"<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print\" > As you can see, our data consists of pixel values \u200b\u200band label. Let's take a visual look at the distribution of numbers. <\/p> <\/li>\n<\/ul>","e551d92f":"<a id ='13' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nImport Model Library <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> We will import the libraries we will use for our GANs model.<\/p> <\/li>\n  <\/ul>","7dc4d1ed":"<a id ='19' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nDiscriminator Output <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">we created our detective model above. Here we will create the output part of it.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">We will have one output value. Either fake or real.<\/p> <\/li>\n  <\/ul>","8c421c25":"<a id ='22' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nCreate GANs <\/h3>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">We created our generator and discriminator models above.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Now we will combine these two to create your GANs model.<\/p> <\/li>\n  <\/ul>","88770fe8":"<a id ='26' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nResult <\/h3>\n\n<ul>\n     <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">In this section, we will take a look at the images we produced using the GANs model.<\/p> <\/li>\n  <\/ul>","5035c511":"<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nImport Libraries \ud83d\udd16 <\/h2>","0aa68099":"<ul>\n     <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">Yes, we took a look at the images we created using the GANs model.<\/p> <\/li>\n         <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">Even though it's a 50 epochs model, we produced pretty good pictures. There are pictures that are pretty close to the real thing.<\/p> <\/li>\n  <\/ul>","db1b6f43":"<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> We also looked at the distribution of numbers in our data. <\/p> <\/li>\n<ul>","fe9c11bb":"<a id ='7' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nTrain -Test Split <\/h2>","3a4385e2":"<a id ='15' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nGenerator Output <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Yes, we are creating the output layer of our generator module. Since our image size is 784 here, our output will be this shape. As a result, we produce an image.<\/p> <\/li>\n  <\/ul>","f89a8fe3":"<a id ='24' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nEpochs and Batch Size \u2753 <\/h3>\n\n<ul>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Epochs : the forward and backward processing of data one by one. In other words, we can simply call it a complete educational tour. Education is determined by the number of eras.<\/p> <\/li>\n        <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Batch Size : Basically, in the periods I mentioned above, it takes a long time for us to train the data one by one. During training how much of the data,indicates that it will be trained.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">To give an example of this, imagine we have 10 loaves of bread. If we select batch_size as 2, imagine that we eat these breads 2 times and 2 times.<\/p> <\/li>\n  <\/ul>","8d198af4":"<a id ='18' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nCreate Discriminator <\/h3>\n\n![dddddd.PNG](attachment:805dd1f0-aba0-4113-aacc-280e3ca4d12f.PNG)\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">In this section, we will create our discriminator layers.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">In other words, we are creating the detective department that will distinguish whether it is real or fake for us.<\/p> <\/li>\n  <\/ul>","be42bc66":"<a id ='20' ><\/a>\n<h4 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nDiscriminator Compile <\/h4>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Here we will compile our model. We described this above. So I'm just writing the code.<\/p> <\/li>\n  <\/ul>","c8749d7d":"<a id ='12' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nImplementing with Keras \u2754 <\/h2>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Our In this section we will create our GANs model using keras.<\/p>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Import Model Library \ud83d\udcd7<\/p> <\/li>\n     <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">Generator \u2757<\/p> \n         <ul> \n             <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\">Create Generator<\/p> <\/li>\n        <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\">Generator Output<\/p> <\/li>\n        <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\">Generator Compile<\/p> <\/li> \n                     <li style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkblue;font-family:Segoe Print;font-weight:bold\">Generator Summary<\/p> <\/li> \n         <\/ul> \n    <\/li>\n     <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">Discriminator \u2757<\/p> \n         <ul> \n             <li style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\">Create Discriminator<\/p> <\/li>\n        <li style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\">Discriminator Output<\/p> <\/li>\n        <li style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\">Discriminator Compile<\/p> <\/li> \n                     <li style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkgreen;font-family:Segoe Print;font-weight:bold\">Discriminator Summary<\/p> <\/li> \n         <\/ul> \n    <\/li>\n     <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">GANs \u2757\u2757<\/p> \n         <ul> \n             <li style = \"color:orange;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:orange;font-family:Segoe Print;font-weight:bold\">Create GANs<\/p> <\/li>\n                     <li style = \"color:orange;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:orange;font-family:Segoe Print;font-weight:bold\">GANs Summary<\/p> <\/li> \n         <\/ul> \n    <\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Epochs and Batch Size \u2753<\/p> <\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Fit the Model \u2753<\/p> <\/li>\n<\/ul>","59948ee0":"<a id ='6' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nLoad and Check Data \ud83d\uddf8 <\/h2>","4722c74c":"<a id ='5' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nWhat are the uses of GANs \u2753 <\/h2>\n\n![Ads\u0131z.png](attachment:c53272c4-8199-4f78-8fcc-dce03c3284fe.png)\n\n<ul>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >It can be used in the gaming industry. For example, to produce anime characters.<\/li>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >It can be used to increase the resolution of images.<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >can be used to complete the pictures.<\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" >It can be used to produce new pictures from different angles.<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Turning the information obtained from the text into a picture.<\/li>\n<\/ul>","bc6121fd":"<a id ='10' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nReshape \u2049\ufe0f <\/h2>\n\n<a id ='11' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > Why do we need to reshape the pictures? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Because that's how keras works. For example, the input value for CNN is (28,28,1). Different models may require different input shapes. <\/p>\n\n<ul>\n    <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Our input type for this model is (60000, 784). <\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\"> Our data has already been prepared in this way, but I will show it in the comment lines in case it comes across in a different way.\/p> <\/li>\n        <\/ul>\n","1424a88f":"<a id ='1' ><\/a>\n<h2 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nGenerative Adversarial Networks \ud83d\udcda \u2753 <\/h2>\n\n![Ads\u0131z.png](attachment:6c638db0-a8ef-48bf-aa21-dbde7048c2f9.png)\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Before moving on to the detailed explanation, let's talk briefly. GANs are structures that learn to generate new data that have the same statistics as the training set. <\/p>\n\n<a id ='2' ><\/a>\n<p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > How does this learn to create new data? <\/p>\n\n<p style = \"color:black;font-family:Segoe Print;font-weight:bold\" > Let us explain this in the most famous way of describing it. In the picture you see above, there is a real picture, a detective and a counterfeiter. <\/p>\n\n<ol>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >We have one real picture.<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >And we have a counterfeiter who paints fake pictures.<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >The real picture and the fake picture go to the detective.<\/li>\n        <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >and the detective realize which of them is fake and real.<\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Meanwhile, the counterfeiter begins to draw pictures that are very close to the real picture.<\/li>\n        <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" >Thus, it creates data with the same statistics as the real data.<\/li>\n<\/ol>","0c043457":"<a id ='25' ><\/a>\n<h3 style = \"background:#0C0C0C ;color:white;border:0;font-family:Segoe Print;font-weight:bold\"> \nFit the model \u2753 <\/h3>\n\n![Ads\u0131z.png](attachment:2f3dfa2f-b510-4fa8-b09e-24c7fc635069.png)\n\n<ul>\n     <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">In the picture above, I wanted to briefly summarize what we will do in this section.<\/p> <\/li>\n    <li style = \"color:black;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:black;font-family:Segoe Print;font-weight:bold\">Yes, it's time to train the gans model we've built so far.<\/p> <\/li>\n        <li style = \"color:darkred;font-family:Segoe Print;font-weight:bold\" > <p style = \"color:darkred;font-family:Segoe Print;font-weight:bold\">For a better understanding of the training code. I will explain by writing comments on the code.<\/p> <\/li>\n  <\/ul>"}}