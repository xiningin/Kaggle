{"cell_type":{"8f845b17":"code","697e67cf":"code","02786680":"code","4bd48773":"code","1cfb76a7":"code","d6d5f177":"code","73670558":"code","815939cf":"code","92ec0977":"code","fb7b0979":"code","c8d80fbc":"code","87524754":"code","cfb4b417":"code","556ff173":"code","909f0dc0":"markdown","2cf8b242":"markdown","8a8af733":"markdown","a833ea36":"markdown"},"source":{"8f845b17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","697e67cf":"import missingno as msno\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestClassifier as RFC\nfrom sklearn.metrics import roc_auc_score","02786680":"data = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf_data = pd.DataFrame(data)\ndf_data","4bd48773":"# Search for missing data\n\nmsno.matrix(df=df_data, figsize=(20,14), color=(0,.3,.3))","1cfb76a7":"# Fill the missing values with the median\ndf_data = df_data.fillna(df_data['bmi'].median())\ndf_data","d6d5f177":"# String label to categorical values\n\nfor i in range(df_data.shape[1]):\n    if df_data.iloc[:,i].dtypes == object:\n        lbl = LabelEncoder()\n        lbl.fit(list(df_data.iloc[:,i].values))\n        df_data.iloc[:,i] = lbl.transform(list(df_data.iloc[:,i].values))\n\ndf_data.info()","73670558":"df_data_corr = df_data.corr()\ndf_data_corr","815939cf":"f, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(df_data_corr, vmax=.8, square=False, annot=True, cmap='Blues', fmt='1.3f')","92ec0977":"df_data = df_data.drop('id', axis=1)\ndf_data","fb7b0979":"#sns.pairplot(df_data)\n#plt.show()","c8d80fbc":"x = df_data.drop('stroke', axis=1)\nt = df_data['stroke']\n\n# numpy\u306e\u914d\u5217\u306b\u5909\u63db\nx = np.array(x)\nt = np.array(t)\n\n# numpy\u3067\u578b\u3092\u5909\u63db\nt = t.ravel()\n\nx = x.astype('float32')\nt = t.astype('int32')\n# \u4e2d\u3092\u78ba\u8a8d\nprint('x shape:', x.shape)\nprint(x)\nprint('t shape:', t.shape)\nprint(t)","87524754":"clf = RFC(n_estimators=192,\n          criterion='gini',# 'gini' or 'entropy'\n          max_depth=19,\n          min_samples_split=2,\n          max_features='auto',# 'auto'(='sqrt') or 'log2'\n          n_jobs=-1,\n          random_state=2525,\n          verbose=1)# 0 or 1\nclf.fit(x, t)","cfb4b417":"predict = clf.predict_proba(x)[:, 1] # This grabs the positive class prediction\nscore = roc_auc_score(t, predict)\nprint('score : ', '{:.5f}'.format(score))","556ff173":"plt.figure(figsize=(8,4))\nplt.hist(predict[np.where(t == 0)], bins=100, alpha=0.75, label='neg class')\nplt.hist(predict[np.where(t == 1)], bins=100, alpha=0.75, label='pos class')\nplt.legend()\nplt.show()","909f0dc0":"# 1. Import Data","2cf8b242":"# 4.Modeling with sckit-learn","8a8af733":"# 2.Preprocessing","a833ea36":"# 3. Check the correlation for each item"}}