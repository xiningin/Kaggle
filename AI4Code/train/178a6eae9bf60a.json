{"cell_type":{"2b5167a8":"code","0b79cae2":"code","2d62c56d":"code","f05b9c0a":"code","6d8855ec":"code","3d3c2f3e":"code","f13c77d2":"code","f152909a":"code","65bde2d6":"code","daa22013":"code","5d127e48":"code","3e0ee03a":"code","dbe7ea31":"code","69ea952a":"code","c025e124":"code","2b8a9c0f":"code","7319b7c0":"code","5de75afc":"code","18423c10":"code","ff812a38":"code","bb0ae4a0":"code","29ceec25":"code","1c057c58":"code","3d3907bb":"code","281fe3e9":"code","4bb9c673":"code","d1d3dcc4":"code","93e17144":"code","1edcafc6":"code","3ddbca82":"code","250ea623":"code","062c8adb":"code","74f485b9":"code","e919811d":"code","0e8b100f":"code","b2577db1":"code","ef558081":"code","ac1c7cba":"code","a62052f4":"code","9d12fc0b":"code","74127584":"code","45c7761b":"code","7c0a021d":"code","bb12efc4":"code","ae8acc91":"code","c263e349":"code","6ca468ee":"code","37628e7f":"code","78104535":"code","ba510309":"code","76f6fcd4":"code","4f862088":"code","2496e1fe":"code","e79428ca":"code","922488d1":"code","f0aecad0":"code","345be115":"code","6ae1c85d":"code","4950bc88":"code","90616264":"code","730968f3":"code","c3281025":"code","3f120863":"code","1622e6ed":"code","16660a43":"code","1d1d94d6":"code","3f7b8025":"code","7a33ab99":"code","d91cc47b":"code","cc28b62a":"code","d26b9ab3":"code","7be73b12":"code","1a74e97d":"code","ac74f086":"code","3cd1994c":"code","5b38e665":"code","08101584":"code","4f6be7ba":"code","1a7a8552":"code","6c67ab14":"code","96ec64d8":"code","ae240b0d":"code","f1e8e9f6":"code","b6dad03f":"code","7c443c7b":"code","214e6978":"code","b004340f":"code","bb4042a0":"code","d158a751":"code","75fe950c":"code","ebe517a2":"code","89c7152d":"code","47ced994":"code","026291de":"code","f56e96ca":"code","41118dea":"code","4a3346f2":"code","c0aed032":"code","638596e4":"code","13155f64":"code","f4ade1f0":"code","fd56e7bd":"code","c3febbd9":"code","78f9ae8e":"code","cc40a400":"code","e2585cfe":"code","54da7946":"code","ace5de96":"code","bfb5c996":"code","7442475c":"code","6af36a37":"code","3682bd5f":"code","fe460151":"code","d48c97dc":"code","7ffba927":"code","603e326d":"code","4797a63d":"code","620f19fb":"code","8556080d":"code","bce29bf8":"code","be8f80e3":"code","ac663a72":"code","b36b658d":"code","6ba1ca3a":"code","031bc266":"code","ce8d41c5":"code","093d4fc6":"code","ebe3cc73":"code","529e6e4d":"code","c8bffabc":"code","d38a2ae0":"code","c099f633":"code","57b770d4":"code","16a7a743":"code","a8116b1a":"code","7980d7ae":"code","f0acc6e9":"code","bf93c5f1":"code","70414892":"code","e4f074ff":"code","5f08c51b":"code","0e01c2b1":"code","8e367cd0":"code","940280c9":"code","2b49b1cf":"code","11946058":"code","8508e093":"code","cb68ef76":"code","9827b266":"code","5867d31e":"code","685500ad":"code","3d2d2df9":"code","b80164d7":"code","d074f077":"code","6d481664":"code","4a056615":"code","5bf68b33":"code","5ef0fbf0":"code","1d851acc":"code","8397a6c8":"code","64a9adce":"code","4859973a":"code","80e3ec6e":"code","e0ed94e1":"code","e7a9c26d":"code","eb962bfd":"code","cfbaaccc":"code","37b383eb":"code","7392191d":"code","2880301a":"code","c395dc68":"code","398a81ef":"code","ea6db63f":"code","9e0c1cf6":"code","a99cafab":"code","b126096d":"code","b3cc1673":"code","687d17ff":"code","9353eac6":"code","71e2a15d":"code","bf5bdaaa":"code","0ed960a3":"code","8e399b77":"markdown","067a100e":"markdown","76b1e1b1":"markdown","20ad67dc":"markdown","f177d4d3":"markdown","7dc5d61f":"markdown","cf5d67c4":"markdown","57ddf008":"markdown","a8c0e45b":"markdown","e9173917":"markdown","f892728d":"markdown","3b699e6d":"markdown","ea6e6947":"markdown","11284e5f":"markdown","56a28c63":"markdown","4f3fa7fe":"markdown","8e18ed06":"markdown","2322800c":"markdown","cd318aca":"markdown","34ea6bc3":"markdown","daa6f789":"markdown","04a76a29":"markdown","5b9bbbd1":"markdown","41032f31":"markdown","9025590a":"markdown","cf98fcf0":"markdown","255587a1":"markdown","73330948":"markdown","7dd98e93":"markdown","74c0ea86":"markdown","8496ad53":"markdown","dad380ce":"markdown","9afe99c3":"markdown","559feb28":"markdown","ec5a8c1a":"markdown","5da5e41f":"markdown","0b8e28d6":"markdown","36ff1dc1":"markdown","00426702":"markdown","87413d4d":"markdown","cbf7c545":"markdown","26a867aa":"markdown","f73f81d0":"markdown","7c049669":"markdown","19496b07":"markdown","10447f64":"markdown","68264a35":"markdown","3ecf2084":"markdown","b524e5f7":"markdown","34c24a96":"markdown","9515893b":"markdown","fb8afe6d":"markdown","7c7f04e5":"markdown","2ca37b97":"markdown","1dbaddc2":"markdown","5feb6a2e":"markdown","ba994552":"markdown","e7c1ed09":"markdown","39a466e5":"markdown","f798111c":"markdown","04037648":"markdown","3f4b8539":"markdown","7004b2c6":"markdown","b1ee1b02":"markdown","c05c7964":"markdown","1e5e4dcd":"markdown","19cf0c3d":"markdown","d2b4e89f":"markdown","0af7bbcc":"markdown","92e784ad":"markdown","51502ba2":"markdown","b714c4c6":"markdown","e75bd25c":"markdown","6b5c4cde":"markdown","127c9713":"markdown","d48a9062":"markdown"},"source":{"2b5167a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b79cae2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\n# Plotly Libraris\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","2d62c56d":"heart=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndf=heart.copy()\ndf.head()","f05b9c0a":"df.info()","6d8855ec":"df.dtypes","3d3c2f3e":"df.shape","f13c77d2":"df.columns","f152909a":"df.describe().T","65bde2d6":"df.isnull().values.any()","daa22013":"df.isnull().sum()","5d127e48":"df[\"age\"].describe()","3e0ee03a":"print(\"Mean Age: \" + str(df[\"age\"].mean()))\nprint(\"Max Age Value: \" + str(df[\"age\"].max()))\nprint(\"Min Age Value: \" + str(df[\"age\"].min()))\nprint(\"Median Age: \" + str(df[\"age\"].median()))\n","dbe7ea31":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True,fmt='.1f')\nplt.show()","69ea952a":"# Bar Chart - Gradient & Text Position\n\ndf_age=df['age'].value_counts().reset_index().rename(columns={'index':'age','age':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_age['age'],y=df_age['Count'],\n    marker={'color': df_age['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_age['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Age Distribution',xaxis_title=\"Age\",yaxis_title=\"Age Count \",title_x=0.5)\nfig.show()","c025e124":"\ndf_agevi=df['age']\n\nfig = go.Figure(data=go.Violin(y=df_agevi, box_visible=True, line_color='black',\n                               meanline_visible=True, fillcolor='lightseagreen', opacity=0.6,\n                               x0='Age'))\n\nfig.update_layout(yaxis_zeroline=False,title=\"Distribution of Age\",title_x=0.5)\nfig.show()","2b8a9c0f":"# Age Distribution 2\n\n# Grouped Box Plot\n\nage_29_40=df[(df.age>=29)&(df.age<40)]\nage_41_50=df[(df.age>=40)&(df.age<50)]\nage_50=df[(df.age>50)]\n\ndf_age_29_40=age_29_40['age']\ndf_age_41_50=age_41_50['age']\ndf_age_50=age_50['age']\ndf_age=df['age']\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=df_age_29_40,\n                     marker_color=\"cyan\",\n                     name=\"Age 29 - 40\"))\nfig.add_trace(go.Box(y=df_age_41_50,\n                     marker_color=\"darkcyan\",\n                     name=\"Age 41- 50 \"))\nfig.add_trace(go.Box(y=df_age_50,\n                     marker_color=\"royalblue\",\n                     name=\"Age 50+ \" ))\nfig.add_trace(go.Box(y=df_age,\n                     marker_color=\"darkblue\",\n                     name=\"Age\" ))\n\nfig.update_layout(title=\"Distribution of Age With And Category \",title_x=0.5)\nfig.show()","7319b7c0":"f, ax = plt.subplots(figsize=(10,6))\nx = df['age']\nax = sns.distplot(x, bins=10)\nplt.xlabel('Age')\nplt.show()","5de75afc":"# Pie with custom colors\n\ndf['age_category']=np.where((df['age']>28)&(df['age']<=40),'29-40',np.where(df['age']>50,'50+',\nnp.where((df['age']>40)&(df['age']<=50),'41-50',\"Not Specified\")))\n\ndf_age_category=df['age_category'].value_counts().to_frame().reset_index().rename(columns={'index':'age_category','age_category':'Count'})\n\n\ncolors=['lightcyan','cyan',\"darkcyan\"]\n\nfig = go.Figure([go.Pie(labels=df_age_category['age_category'], values=df_age_category['Count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+value', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"Age Category\",title_x=0.5)\nfig.show()","18423c10":"\n# Bubble Plot with Color gradient\n\ndf['age_category']=np.where((df['age']>28)&(df['age']<=40),'29-40',np.where(df['age']>50,'50+',\nnp.where((df['age']>40)&(df['age']<=50),'41-50',\"Not Specified\")))\n\ndf_age_category=df['age_category'].value_counts().to_frame().reset_index().rename(columns={'index':'age_category','age_category':'Count'})\n\nfig = go.Figure(data=[go.Scatter(\n    x=df_age_category['age_category'], y=df_age_category['Count'],\n    mode='markers',\n    marker=dict(\n        color=df_age_category['Count'],\n        size=df_age_category['Count']*0.7,\n        showscale=True\n    ))])\n\nfig.update_layout(title='Age Frequency ',xaxis_title=\"Age Category\",yaxis_title=\"Age Count\",title_x=0.5)\nfig.show()","ff812a38":"(sns\n .FacetGrid(df,\n              hue = \"target\",\n              height = 5,\n              xlim = (0, 1000))\n .map(sns.kdeplot, \"chol\", shade= True)\n .add_legend()\n);","bb0ae4a0":"# Bar Chart - Gradient & Text Position\n\nmean_thalach=df.groupby('age_category')['thalach'].mean().to_frame().reset_index().rename(columns={'index':'age_category','thalach':'Mean'})\n\nfig = go.Figure(go.Bar(\n    x=mean_thalach['age_category'],y=mean_thalach['Mean'],\n    marker={'color': mean_thalach['Mean'], \n    'colorscale': 'Viridis'},  \n     text=mean_thalach['Mean'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Average Max Heart Measurement With Age Category',xaxis_title=\"Age Category\",yaxis_title=\" Max Heart Measurement\",title_x=0.5)\nfig.show()","29ceec25":"# Bar Chart - Gradient & Text Position\n\nmean_chol=df.groupby('age_category')['chol'].mean().to_frame().reset_index().rename(columns={'index':'age_category','chol':'Mean'})\n\nfig = go.Figure(go.Bar(\n    x=mean_chol['age_category'],y=mean_chol['Mean'],\n    marker={'color': mean_chol['Mean'], \n    'colorscale': 'Viridis'},  \n    text=mean_chol['Mean'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Average Cholesterol Measurement With Age Category',xaxis_title=\"Age Category\",yaxis_title=\"Cholesterol Measurement\",title_x=0.5)\nfig.show()","1c057c58":"# Bar Chart - Gradient & Text Position\n\nmean_trestbps=df.groupby('age_category')['trestbps'].mean().to_frame().reset_index().rename(columns={'index':'age_category','trestbps':'Mean'})\n\nfig = go.Figure(go.Bar(\n    x=mean_trestbps['age_category'],y=mean_trestbps['Mean'],\n    marker={'color': mean_trestbps['Mean'], \n    'colorscale': 'Viridis'},  \n     text=mean_trestbps['Mean'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Average Resting Blood Pressure Measurement With Age Category',xaxis_title=\"Age Category\",yaxis_title=\"Resting Blood Pressure Measurement\",title_x=0.5)\nfig.show()","3d3907bb":"# Bar Chart\n\nage_exang_values=df.groupby(by =['age_category','exang'])['age'].count().to_frame().reset_index().rename(columns={'index':'age_category','exang':'Exang','age':'Count'})\nage_exang_values['Exang']=age_exang_values['Exang'].astype('category')\nage_exang_values\n\nfig = px.bar(age_exang_values, x=\"age_category\", y=\"Count\",\n             color=\"Exang\",barmode=\"group\")\n             \nfig.update_layout(title_text='Exang With Age Category',xaxis_title=\"Age Category\",title_x=0.5)\nfig.show()","281fe3e9":"age_target_values=df.groupby(by =['age_category','target'])['age'].count().to_frame().reset_index().rename(columns={'index':'age_category','target':'Target','age':'Count'})\nage_target_values['Target']=age_target_values['Target'].astype('category')\n\n\nfig = px.bar(age_target_values, x=\"age_category\", y=\"Count\",\n             color=\"Target\",barmode=\"group\")\n               \nfig.update_layout(title_text='Target With Age Category',title_x=0.5)\nfig.show()","4bb9c673":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='thalach',\n                 color='exang') # Added color to basic scatter\nfig.update_layout(title='Age Vs Maximum Heart Measurement With Exang ',xaxis_title=\"Age\",yaxis_title=\"Maximum Heart Measurement\",title_x=0.5)\nfig.show()","d1d3dcc4":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='thalach',\n                 color='target',\n                 color_continuous_scale='Viridis') \nfig.update_layout(title='Age Vs Maximum Heart Measurement With Target ',xaxis_title=\"Age\",yaxis_title=\"Maximum Heart Measurement\",title_x=0.5)\nfig.show()","93e17144":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='chol',\n                 color='exang',\n                 color_continuous_scale='fall'\n                ) \nfig.update_layout(title='Age Vs Cholestoral Measurement  With Exang ',xaxis_title=\"Age\",yaxis_title=\"Cholestoral\",title_x=0.5)\nfig.show()","1edcafc6":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='chol',\n                 color='target',\n                 color_continuous_scale='earth'\n                ) \nfig.update_layout(title='Age Vs Cholestoral Measurement With Target',xaxis_title=\"Age\",yaxis_title=\"Cholestoral Measurement\",title_x=0.5)\nfig.show()","3ddbca82":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='trestbps',\n                 color='target',\n                 color_continuous_scale='tropic'\n                ) \nfig.update_layout(title='Age Vs Resting Blood Pressure Measurement With Target',\n                  xaxis_title=\"Age\",\n                  yaxis_title=\"Resting Blood Pressure Measurement\",\n                  title_x=0.5)\nfig.show()","250ea623":"# Scatter plot - Category\n\nfig = px.scatter(df, x='age', y='trestbps',\n                 color='exang',\n                 color_continuous_scale='rdylbu'\n                ) \nfig.update_layout(title='Age Vs Resting Blood Pressure Measurement With Target',\n                  xaxis_title=\"Age\",\n                  yaxis_title=\"Resting Blood Pressure Measurement\",\n                  title_x=0.5)\nfig.show()","062c8adb":"# Bar Chart\n\ndf_cp=df.groupby(by =['age_category','cp'])['age'].count().to_frame().reset_index().rename(columns={'age_category':'Age Category','cp':'Cp Class','age':'Count'})\ndf_cp['Cp Class']=df_cp['Cp Class'].astype('category')\ndf_cp\n\nfig = px.bar(df_cp, x=\"Age Category\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Chest Pain Type With Age Category',title_x=0.5)\nfig.show()","74f485b9":"# Bar Chart\n\ndf_age_sex=df.groupby(by =['age_category','sex'])['thalach'].count().to_frame().reset_index().rename(columns={'age_category':'Age Category','sex':'Sex','thalach':'Count'})\ndf_age_sex['Sex']=df_age_sex['Sex'].astype('category')\n\nfig = px.bar(df_age_sex, x=\"Age Category\", y=\"Count\",\n             color=\"Sex\",barmode=\"group\")\n               \nfig.update_layout(title_text='Sex With Age Class',title_x=0.5)\nfig.show()","e919811d":"# Bar Chart\n\n# Exang Counts\n\ndf_exang=df['exang'].value_counts().to_frame().reset_index().rename(columns={'index':'exang','exang':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_exang['exang'],y=df_exang['Count'],\n    marker={'color': df_exang['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_exang['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Exercise Induced Angina',xaxis_title=\"Exang Class\",yaxis_title=\"Count\",title_x=0.5)\nfig.show()","0e8b100f":"# Bar Chart\n\ndf_sex_exang=df.groupby(by =['sex','exang'])['age'].count().to_frame().reset_index().rename(columns={'sex':'Sex','exang':'exang','age':'Count'})\ndf_sex_exang['exang']=df_sex_exang['exang'].astype('category')\n\nfig = px.bar(df_sex_exang, x=\"Sex\", y=\"Count\",color=\"exang\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Sex With Exang',title_x=0.5)\nfig.show()","b2577db1":"# Bar Chart\n\ndf_target_exang=df.groupby(by =['target','exang'])['age'].count().to_frame().reset_index().rename(columns={'target':'target','exang':'exang','age':'Count'})\ndf_target_exang['exang']=df_target_exang['exang'].astype('category')\ndf_target_exang['target']=df_target_exang['target'].astype('category')\nfig = px.bar(df_target_exang, x=\"target\", y=\"Count\",color=\"exang\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Target With Exang',title_x=0.5)\nfig.show()","ef558081":"df_cp=df.groupby(by =['target','exang','sex'])['age'].count().to_frame().reset_index().rename(columns={'target':'Target','sex':'Sex','exang':'Exang','age':'Count'})\ndf_cp['Exang']=df_cp['Exang'].astype('category')\ndf_cp['Sex']=df_cp['Sex'].astype('category')\n\n# Bar Chart\n\nfig = px.bar(df_cp, x=\"Target\", y=\"Count\",color=\"Exang\",barmode=\"group\",\n             facet_row=\"Sex\"\n             )\nfig.update_layout(title_text='Exang With Target And Sex',title_x=0.5)\nfig.show()","ac1c7cba":"(sns\n .FacetGrid(df,\n              hue = \"target\",\n              height = 5,\n              xlim = (0,700))\n .map(sns.kdeplot, \"chol\", shade= True)\n .add_legend()\n);","a62052f4":"(sns\n .FacetGrid(df,\n              hue = \"target\",\n              height = 5,\n              xlim = (0, 400))\n .map(sns.kdeplot, \"thalach\", shade= True)\n .add_legend()\n);","9d12fc0b":"(sns\n .FacetGrid(df,\n              hue = \"target\",\n              height = 5,\n              xlim = (0, 300))\n .map(sns.kdeplot, \"trestbps\", shade= True)\n .add_legend()\n);","74127584":"# Bar Chart\ndf_target=df['target'].value_counts().to_frame().reset_index().rename(columns={'index':'target','target':'Count'})\n\nfig = go.Figure(go.Bar(\n    x=df_target['target'],y=df_target['Count'],\n    marker={'color': df_target['Count'], \n    'colorscale': 'Viridis'},  \n    text=df_target['Count'],\n    textposition = \"outside\",\n))\nfig.update_layout(title_text='Target',xaxis_title=\"Target Class\",yaxis_title=\"Count\",title_x=0.5)\nfig.show()","45c7761b":"# Bar Chart\n\ndf_sex_target=df.groupby(by =['sex','target'])['age'].count().to_frame().reset_index().rename(columns={'sex':'Sex','target':'Target','age':'Count'})\ndf_sex_target['Target']=df_sex_target['Target'].astype('category')\n\nfig = px.bar(df_sex_target, x=\"Sex\", y=\"Count\",color=\"Target\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Sex With Target',title_x=0.5)\nfig.show()","7c0a021d":"# Bar Chart\n\ndf_cp=df['cp'].value_counts().reset_index().rename(columns={'index':'Cp Class','cp':'Count'})\n\nfig = px.bar(df_cp, x=\"Cp Class\", y=\"Count\")\n                          \nfig.update_layout(title_text='Chest Pain',title_x=0.5)\nfig.show()","bb12efc4":"# Bar Chart\n\ndf_cp=df.groupby(by =['sex','cp'])['age'].count().to_frame().reset_index().rename(columns={'sex':'Sex','cp':'Cp Class','age':'Count'})\ndf_cp['Cp Class']=df_cp['Cp Class'].astype('category')\ndf_cp\n\nfig = px.bar(df_cp, x=\"Sex\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Chest Pain Type With Sex',title_x=0.5)\nfig.show()","ae8acc91":"# Bar Chart\n\ndf_target=df.groupby(by =['target','cp'])['age'].count().to_frame().reset_index().rename(columns={'target':'Target','cp':'Cp Class','age':'Count'})\ndf_target['Cp Class']=df_target['Cp Class'].astype('category')\n\n\nfig = px.bar(df_target, x=\"Target\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Chest Pain Type With Target',title_x=0.5)\nfig.show()","c263e349":"# Bar Chart\n\ndf_cp=df.groupby(by =['exang','cp'])['age'].count().to_frame().reset_index().rename(columns={'exang':'Exang','cp':'Cp Class','age':'Count'})\ndf_cp['Cp Class']=df_cp['Cp Class'].astype('category')\ndf_cp['Exang']=df_cp['Exang'].astype('category')\n\n\nfig = px.bar(df_cp, x=\"Exang\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             \n             )\nfig.update_layout(title_text='Chest Pain Type With Exang',title_x=0.5)\nfig.show()","6ca468ee":"df_cp=df.groupby(by =['target','cp','sex'])['age'].count().to_frame().reset_index().rename(columns={'target':'Target','sex':'Sex','cp':'Cp Class','age':'Count'})\ndf_cp['Cp Class']=df_cp['Cp Class'].astype('category')\ndf_cp['Sex']=df_cp['Sex'].astype('category')\n\n# Bar Chart\n\nfig = px.bar(df_cp, x=\"Target\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             facet_row=\"Sex\"\n             )\nfig.update_layout(title_text='Chest Pain Type With Target And Sex',title_x=0.5)\nfig.show()","37628e7f":"df_cp=df.groupby(by =['target','cp','sex','exang'])['age'].count().to_frame().reset_index().rename(columns={'target':'Target','sex':'Sex','exang':'Exang','cp':'Cp Class','age':'Count'})\ndf_cp['Cp Class']=df_cp['Cp Class'].astype('category')\ndf_cp['Sex']=df_cp['Sex'].astype('category')\ndf_cp['Exang']=df_cp['Exang'].astype('category')\n# Bar Chart\n\nfig = px.bar(df_cp, x=\"Target\", y=\"Count\",color=\"Cp Class\",barmode=\"group\",\n             facet_row=\"Sex\",facet_col=\"Exang\"\n             )\nfig.update_layout(title_text='Chest Pain Type With Target,Sex And Exang',title_x=0.5)\nfig.show()","78104535":"heart=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndf=heart.copy()\ndf.head()","ba510309":"df.info()","76f6fcd4":"df.dtypes","4f862088":"df.columns","2496e1fe":"df.describe().T","e79428ca":"#Conversion to categorical variables\n\ndf['cp']=df['cp'].astype('category')\ndf['slope']=df['slope'].astype('category')\ndf['restecg']=df['restecg'].astype('category')\ndf['thal']=df['thal'].astype('category')\ndf.dtypes","922488d1":"df.info()","f0aecad0":"df_num=df.select_dtypes(include = ['float64', 'int64']) \ndf_num","345be115":"from sklearn.neighbors import LocalOutlierFactor\nclf = LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df_num)","6ae1c85d":"df_scores = clf.negative_outlier_factor_\ndf_scores[0:15]","4950bc88":"np.sort(df_scores)[0:50]\n","90616264":"threshold_value= np.sort(df_scores)[5]\nthreshold_value","730968f3":"Outlier_tf = df_scores > threshold_value\nOutlier_tf","c3281025":"Outlier_df= df_num[df_scores < threshold_value]\nindexs=Outlier_df.index\nOutlier_df","3f120863":"# Kick Outliers\n#for i in indexs:\n#    df.drop(i, axis = 0,inplace = True)","1622e6ed":"df.head()","16660a43":"df.info()","1d1d94d6":"df.shape","3f7b8025":"df.describe().T","7a33ab99":"df=pd.get_dummies(df,drop_first=True)\ndf.head()","d91cc47b":"df.info()","cc28b62a":"y=df['target']","d26b9ab3":"X=df.drop('target',axis=1)\nX.head()","7be73b12":"X = (X - np.min(X)) \/ (np.max(X) - np.min(X)).values\nX.head()","1a74e97d":"X_train,X_test,y_train,y_test=train_test_split(X,y,\n                                               test_size=0.2,\n                                               random_state=42)","ac74f086":"print('X_train',X_train.shape)\nprint('X_test',X_test.shape)\nprint('y_train',y_train.shape)\nprint('y_test',y_test.shape)","3cd1994c":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X,y)\nloj_model","5b38e665":"loj_model.intercept_","08101584":"loj_model.coef_","4f6be7ba":"y_pred_loj = loj_model.predict(X_test)","1a7a8552":"confusion_matrix(y_test , y_pred_loj)","6c67ab14":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_loj)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","96ec64d8":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\n\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","ae240b0d":"print(classification_report(y_test, y_pred_loj))","f1e8e9f6":"cross_val_score(loj_model, X_test, y_test, cv = 10).mean()","b6dad03f":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","7c443c7b":"y_pred_nb = nb_model.predict(X_test)","214e6978":"accuracy_score(y_test, y_pred_nb)","b004340f":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_nb)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","bb4042a0":"cross_val_score(nb_model, X_test, y_test, cv = 10).mean()","d158a751":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","75fe950c":"y_pred_knn = knn_model.predict(X_test)","ebe517a2":"accuracy_score(y_test, y_pred_knn)","89c7152d":"print(classification_report(y_test, y_pred_knn))","47ced994":"knn_params = {\"n_neighbors\": np.arange(1,50)}","026291de":"knn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, knn_params, cv=10)\nknn_cv.fit(X_train, y_train)","f56e96ca":"print(\"Best Score_:\" + str(knn_cv.best_score_))\nprint(\"Best Params: \" + str(knn_cv.best_params_))","41118dea":"scoreList = []\nfor i in range(1,50):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(X_train, y_train)\n    scoreList.append(knn2.score(X_test, y_test))\n    \nplt.plot(range(1,50), scoreList)\nplt.xticks(np.arange(1,50,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","4a3346f2":"knn = KNeighborsClassifier(41)\nknn_tuned = knn.fit(X_train, y_train)","c0aed032":"y_pred_knn_tuned = knn_tuned.predict(X_test)","638596e4":"accuracy_score(y_test, y_pred_knn_tuned)","13155f64":"print(classification_report(y_test, y_pred_knn_tuned))","f4ade1f0":"from sklearn.svm import SVC\nsvm_model = SVC(kernel = \"linear\").fit(X_train, y_train)","fd56e7bd":"y_pred_svc = svm_model.predict(X_test)","c3febbd9":"accuracy_score(y_test, y_pred_svc)","78f9ae8e":"svc_params = {\"C\": np.arange(1,10)}\n\nsvc = SVC(kernel = \"linear\")\n\nsvc_cv_model = GridSearchCV(svc,svc_params, \n                            cv = 10, \n                            n_jobs = -1, \n                            verbose = 2 )\n\nsvc_cv_model.fit(X_train, y_train)","cc40a400":"print(\"Best Params: \" + str(svc_cv_model.best_params_))","e2585cfe":"svc_tuned_linear = SVC(kernel = \"linear\", C = 7).fit(X_train, y_train)","54da7946":"y_pred_svc_tuned = svc_tuned_linear.predict(X_test)\naccuracy_score(y_test, y_pred_svc_tuned)","ace5de96":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_svc_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","bfb5c996":"svc_model = SVC(kernel = \"rbf\").fit(X_train, y_train)","7442475c":"y_pred_svc_model_rbf = svc_model.predict(X_test)\naccuracy_score(y_test, y_pred_svc_model_rbf)","6af36a37":"svc_params = {\"C\": [0.0001, 0.001, 0.1, 1, 5, 10 ,50 ,100],\n             \"gamma\": [0.0001, 0.001, 0.1, 1, 5, 10 ,50 ,100]}","3682bd5f":"svc = SVC(kernel = \"rbf\")\nsvc_cv_model = GridSearchCV(svc, svc_params, \n                         cv = 10, \n                         n_jobs = -1,\n                         verbose = 2)\n\nsvc_cv_model.fit(X_train, y_train)","fe460151":"print(\"Best Params: \" + str(svc_cv_model.best_params_))","d48c97dc":"svc_tuned_rbf = SVC(kernel = \"rbf\",C = 50, gamma = 0.001).fit(X_train, y_train)","7ffba927":"y_pred_svc_tuned_rbf = svc_tuned_rbf.predict(X_test)\naccuracy_score(y_test, y_pred_svc_tuned_rbf)","603e326d":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_svc_tuned_rbf)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","4797a63d":"from sklearn.preprocessing import StandardScaler  \nscaler = StandardScaler()","620f19fb":"from sklearn.neural_network import MLPClassifier","8556080d":"mlpc = MLPClassifier().fit(X_train, y_train)","bce29bf8":"y_pred_mlpc = mlpc.predict(X_test)\naccuracy_score(y_test,y_pred_mlpc)","be8f80e3":"mlpc_params = {\"alpha\": [0.1, 0.01, 0.02, 0.005, 0.0001],\n              \"hidden_layer_sizes\": [(10,10,10),\n                                     (100,100,100),\n                                     (100,100)],\n              \"solver\" : [\"lbfgs\",\"adam\",\"sgd\"],\n              \"activation\": [\"relu\",\"logistic\"]}","ac663a72":"mlpc = MLPClassifier()\nmlpc_cv_model = GridSearchCV(mlpc, mlpc_params, \n                         cv = 10, \n                         n_jobs = -1,\n                         verbose = 2)\n\nmlpc_cv_model.fit(X_train, y_train)","b36b658d":"print(\"Best Params: \" + str(mlpc_cv_model.best_params_))","6ba1ca3a":"mlpc_tuned = MLPClassifier(activation = \"relu\", \n                           alpha = 0.1, \n                           hidden_layer_sizes = (10, 10,10),\n                          solver = \"adam\")","031bc266":"mlpc_tuned.fit(X_train, y_train)","ce8d41c5":"y_pred_mlpc_tuned = mlpc_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_mlpc_tuned)","093d4fc6":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_mlpc_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","ebe3cc73":"from sklearn.tree import DecisionTreeClassifier\n\ncart = DecisionTreeClassifier()\ncart_model = cart.fit(X_train, y_train)","529e6e4d":"y_pred_cart = cart_model.predict(X_test)\naccuracy_score(y_test, y_pred_cart)","c8bffabc":"cart_grid = {\"max_depth\": range(1,20),\n            \"min_samples_split\" : list(range(2,20)) }","d38a2ae0":"cart = tree.DecisionTreeClassifier()\ncart_cv = GridSearchCV(cart, cart_grid, cv = 10, n_jobs = -1, verbose = 2)\ncart_cv_model = cart_cv.fit(X_train, y_train)","c099f633":"print(\"Best Params: \" + str(cart_cv_model.best_params_))","57b770d4":"cart = tree.DecisionTreeClassifier(max_depth =6, min_samples_split = 14)\ncart_tuned = cart.fit(X_train, y_train)","16a7a743":"y_pred_cart_tuned = cart_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_cart_tuned)","a8116b1a":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_cart_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","7980d7ae":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier().fit(X_train, y_train)","f0acc6e9":"y_pred_rf = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred_rf)","bf93c5f1":"rf_params = {\"max_depth\": [2,5,8,10],\n            \"max_features\": [2,5,8],\n            \"n_estimators\": [10,50,100,250],\n            \"min_samples_split\": [2,5,10]}","70414892":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2)","e4f074ff":"rf_cv_model.fit(X_train, y_train)","5f08c51b":"print(\"Best Params: \" + str(rf_cv_model.best_params_))","0e01c2b1":"rf_tuned = RandomForestClassifier(max_depth = 8, \n                                  max_features = 8, \n                                  min_samples_split = 10,\n                                  n_estimators = 10)\n\nrf_tuned.fit(X_train, y_train)","8e367cd0":"y_pred_rf_tuned = rf_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_rf_tuned)","940280c9":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_rf_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","2b49b1cf":"Importance = pd.DataFrame({\"Importance\": rf_tuned.feature_importances_*100},\n                         index = X_train.columns)","11946058":"Importance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"Variable Significance Levels\")","8508e093":"from sklearn.ensemble import GradientBoostingClassifier","cb68ef76":"gbm_model = GradientBoostingClassifier().fit(X_train, y_train)","9827b266":"y_pred_gbm_model = gbm_model.predict(X_test)\naccuracy_score(y_test, y_pred_gbm_model)","5867d31e":"gbm_params = {\"learning_rate\" : [0.001, 0.01, 0.1, 0.05],\n             \"n_estimators\": [50,250,100],\n             \"max_depth\": [3,5,10],\n             \"min_samples_split\": [2,5,10]}","685500ad":"gbm = GradientBoostingClassifier()\n\ngbm_cv = GridSearchCV(gbm, gbm_params, cv = 10, n_jobs = -1, verbose = 2)","3d2d2df9":"gbm_cv.fit(X_train, y_train)","b80164d7":"print(\"Best Params: \" + str(gbm_cv.best_params_))","d074f077":"gbm = GradientBoostingClassifier(learning_rate = 0.1, \n                                 max_depth = 3,\n                                min_samples_split = 5,\n                                n_estimators = 100)","6d481664":"gbm_tuned =  gbm.fit(X_train,y_train)","4a056615":"y_pred_gbm_tuned = gbm_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_gbm_tuned)","5bf68b33":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_gbm_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","5ef0fbf0":"#!pip install xgboost","1d851acc":"from xgboost import XGBClassifier\nxgb_model = XGBClassifier().fit(X_train, y_train)","8397a6c8":"y_pred_xgb_model = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_model)","64a9adce":"xgb_params = {\n        'n_estimators': [100, 50, 200],\n        'subsample': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5,6,7,8],\n        'learning_rate': [0.1,0.01,0.02,0.05]\n        }","4859973a":"xgb = XGBClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)","80e3ec6e":"xgb_cv_model.fit(X_train, y_train)","e0ed94e1":"xgb_cv_model.best_params_","e7a9c26d":"xgb = XGBClassifier(learning_rate = 0.02, \n                    max_depth =3,\n                    n_estimators = 200,\n                    subsample = 0.6)","eb962bfd":"xgb_tuned =  xgb.fit(X_train,y_train)","cfbaaccc":"y_pred_xgb_tuned = xgb_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_tuned)","37b383eb":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_xgb_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","7392191d":"#!conda install -c conda-forge lightgbm\n","2880301a":"from lightgbm import LGBMClassifier","c395dc68":"lgbm_model = LGBMClassifier().fit(X_train, y_train)","398a81ef":"y_pred_lgbm_model = lgbm_model.predict(X_test)\naccuracy_score(y_test, y_pred_lgbm_model)","ea6db63f":"lgbm_params = {\n        'n_estimators': [100, 50, 250,],\n        'subsample': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5,6],\n        'learning_rate': [0.1,0.01,0.02,0.05],\n        \"min_child_samples\": [5,10,20]}","9e0c1cf6":"lgbm = LGBMClassifier()\n\nlgbm_cv_model = GridSearchCV(lgbm, lgbm_params, \n                             cv = 10, \n                             n_jobs = -1, \n                             verbose = 2)\n","a99cafab":"lgbm_cv_model.fit(X_train, y_train)","b126096d":"lgbm_cv_model.best_params_","b3cc1673":"lgbm = LGBMClassifier(learning_rate = 0.05, \n                       max_depth = 6,\n                       n_estimators = 100,\n                       min_child_samples = 10,\n                       subsample = 0.6)","687d17ff":"lgbm_tuned = lgbm.fit(X_train,y_train)","9353eac6":"y_pred_lgbm_tuned = lgbm_tuned.predict(X_test)\naccuracy_score(y_test, y_pred_lgbm_tuned)","71e2a15d":"# Cofusion Matrix\ncm = confusion_matrix(y_test, y_pred_lgbm_tuned)\nplt.rcParams['figure.figsize'] = (5, 5)\nsns.heatmap(cm, annot = True, annot_kws = {'size':15}, cmap = 'PuBu')","bf5bdaaa":"models = [\n    knn_tuned,\n    loj_model,\n    svc_tuned_linear,\n    svc_tuned_rbf,\n    nb_model,\n    mlpc_tuned,\n    cart_tuned,\n    rf_tuned,\n    gbm_tuned,\n    lgbm_tuned,\n    xgb_tuned\n    \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","0ed960a3":"result = []\n\nresults = pd.DataFrame(columns= [\"Models\",\"Accuracy\"])\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)    \n    result = pd.DataFrame([[names, accuracy*100]], columns= [\"Models\",\"Accuracy\"])\n    results = results.append(result)\n    \n    \nsns.barplot(x= 'Accuracy', y = 'Models', data=results, color=\"r\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy Ratios of Models');    ","8e399b77":"## Target Features\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease <br>\n* 0 = Absence of heart disease <br>","067a100e":"## Model Tuning","76b1e1b1":"# <a id='2'> 2.Data Analysis And  Visualization<\/a>\n\nThe goal here is to find out more about the data and become a subject matter export on the dataset you're working with","20ad67dc":"## Target With Age Category\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease <br>\n* 0 = Absence of heart disease <br>","f177d4d3":"### Corerelation","7dc5d61f":"## Average Resting Blood Pressure Measurement With Age Category","cf5d67c4":"## <a id='10'>   Random Forests <\/a>","57ddf008":"# RBF SVC Model Tuning & Predict\n","a8c0e45b":"## Sex With Exang\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n* Exercise induced angina 1 = yes 0 = no <br>\n\n* Sex variable also contains two integer values 1 and 0 <br>\n\n* 1= male     0= female <br>\n\n","e9173917":"## <a id='13'>  LightGBM <\/a>","f892728d":"## Predict ","3b699e6d":"## Age Vs Resting Blood Pressure  With Exang \n* Exang variable also contains two integer values 1 and 0 <br>\n* Exercise induced angina 1 = yes 0 = no <br>","ea6e6947":"## Model Tuning","11284e5f":"## Chest Pain Type With Target \n\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease <br>\n* 0 = Absence of heart disease) <br>","56a28c63":"## <a id='9'>  CART <\/a>","4f3fa7fe":" ## Resting Blood Pressure Measurement With Target ","8e18ed06":"## <a id='12'>  XGBoost <\/a>","2322800c":"## Chest Pain Type With Exang\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n* Exercise induced angina 1 = yes 0 = no <br>","cd318aca":"## Exang With Target And Sex\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n* Exercise induced angina 1 = yes 0 = no <br>\n\n* Target variable also contains two integer values 1 and 0 <br>\n\n* 1 = Presence of heart disease <br>\n\n* 0 = Absence of heart disease <br>\n\n* Sex variable also contains two integer values 1 and 0 <br>\n\n* 1= male     0= female <br>","34ea6bc3":"### Normalize","daa6f789":"I hope you enjoyed my kernel.If you like this notebook, an <font color=\"DARKCYAN\"><b>Upvote<\/b><\/font> would be great ! :)\n\nI am new with data science. Please <font color=\"GREEN\"><b>comments<\/b><\/font> me your <font color=\"GREEN\"><b>feedbacks<\/b><\/font> to help me improve myself. \n    \nThanks for your time\n    \n","04a76a29":"### Threshold value\n* I don't know how to choose but we have to choose","5b9bbbd1":"## Category Variable","41032f31":"## Chest Pain Type With Target And Sex\n\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease <br>\n* 0 = Absence of heart disease) <br>\n* Sex\n* 1 = male <br>\n* 0 = female <br>","9025590a":"## Target With Exang\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n* Exercise induced angina 1 = yes 0 = no <br>\n\n* Target variable also contains two integer values 1 and 0 <br>\n\n* 1 = Presence of heart disease <br>\n\n* 0 = Absence of heart disease <br>","cf98fcf0":"## <a id='15'>  Conclusion <\/a>\n","255587a1":"## Sex With Target\n* 1 = male <br>\n* 0 = female <br>\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease <br>\n* 0 = Absence of heart disease) <br>","73330948":"<font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>My Other Kernels<\/b><\/font><br>\n\n\n\n<a href=\"https:\/\/www.kaggle.com\/drfrank\/us-police-shootings-data-visualisation\" class=\"btn btn-primary\" style=\"color:white;\">Us Police Shootings Data Visualisation<\/a>","7dd98e93":"# Table of contents\n- <a href='#0'>  Dataset Introduction <\/a> \n- <a href='#1'>1. Importing Libraries and Dataset <\/a> \n- <a href='#2'>2. Data Analysis And  Visualization<\/a> \n- <a  href='#3'>3.Data Preprocessing <\/a> \n- <a href='#4'>4. Logistic Regression  <\/a> \n- <a href='#5'>5. Gaussian Naive Bayes <\/a>\n- <a href='#6'>6. KNN <\/a> \n- <a href='#7'>7. SVC <\/a> \n- <a href='#8'>8. Artificial neural networks <\/a>\n- <a href='#9'>9.  CART <\/a>\n- <a href='#10'>10.Random Forests <\/a>\n- <a href='#11'>11. Gradient Boosting Machines <\/a>\n- <a href='#12'>12. XGBoost <\/a>\n- <a href='#13'>13. LightGBM <\/a>\n- <a href='#14'>14. Comparison of All Models <\/a>\n- <a href='#15'>15. Conclusion  <\/a>\n- <a href='#16'>16. End <\/a> \n- <a href='#17'>16. Reference <\/a>","74c0ea86":" ## <a id='6'> KNN <\/a>","8496ad53":"## Local Outlier Factor\n\n![](http:\/\/upload.wikimedia.org\/wikipedia\/commons\/4\/4e\/LOF-idea.svg)\n*  The local outlier factor is based on a concept of a local density, where locality is given by k nearest neighbors, whose distance is used to estimate the density. By comparing the local density of an object to the local densities of its neighbors, one can identify regions of similar density, and points that have a substantially lower density than their neighbors. These are considered to be outliers.","dad380ce":"## Chest Pain Type With Target,Exang And Sex\n\n* Target variable also contains two integer values 1 and 0 <br>\n 1 = Presence of heart disease <br>\n 0 = Absence of heart disease) <br>\n\n* Sex <br>\n1 = male <br>\n0 = female <br>\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n Exercise induced angina 1 = yes 0 = no <br>","9afe99c3":"## Age Vs Maximum Heart Measurement With Target\n  \n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease  <br>\n* 0 = Absence of heart disease <br>","559feb28":"## <a id='16'> <font color=\"LIGHTSEAGREEN\" size=+2.5><b>End Note<\/b><\/font> <\/a>\n","ec5a8c1a":"## Frequency of Age Category With Pie ","5da5e41f":"## Age Vs Cholestoral Measurement  With Exang\n\n* Exang variable also contains two integer values 1 and 0 <br>\n* Exercise induced angina 1 = yes 0 = no <br>","0b8e28d6":"## Sex With Age Category\n* 1= male\n* 0= female","36ff1dc1":"## Cholesterol Measurement With Target ","00426702":"## Frequency of Age Category With Bubble Plot","87413d4d":" ## <a id='11'> Gradient Boosting Machines <\/a>\n","cbf7c545":"## <a id='3'> Data Preprocessing<\/a>","26a867aa":"## Age Vs Resting Blood Pressure  With Target\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease  0 = Absence of heart disease <br>","f73f81d0":"## Chest Pain type\n\ncp  variable also contains four integer values 0,1,2,3 and 4 <br>\n\n0: Typical angina: chest pain related decrease blood supply to the heart <br>\n1: Atypical angina: chest pain not related to heart <br>\n2: Non-anginal pain: typically esophageal spasms (non heart related) <br>\n3: Asymptomatic: chest pain not showing signs of disease<br>","7c049669":"* I did not remove outlier data from the data set because there was little data.\n* You can if you want.\n* It won't have a huge impact (my opinion :)","19496b07":"## Age Distribution With Distplot\n","10447f64":"### Predict ","68264a35":"\n ## <a id='4'> Logistic Regression<\/a>","3ecf2084":"## Exang Features\n\n* Exang variable also contains two integer values 1 and 0 <br>\n \n* Exercise induced angina 1 = yes 0 = no <br>\n\n","b524e5f7":"## Chest Pain Type With Age Category\n * Chest Pain Type\n \n* 0: Typical angina: Chest pain related decrease blood supply to the heart\n* 1: Atypical angina: Chest pain not related to heart\n* 2: Non-anginal pain: Typically esophageal spasms (non heart related)\n* 3: Asymptomatic: Chest pain not showing signs of disease","34c24a96":" ## <a id='5'> Gaussian Naive Bayes <\/a>","9515893b":"\n1. This dataset is old and small by today's standards. However, it's allowed us to create a simple model and then use various machine learning explainability tools and techniques to peek inside.\n2.  I do not know much about the data set.If you understand heart disease,it will be more useful in choosing variables.I am not very knowledgeable in parameter selection in model tuning.Some basic model worked better than  model tuning.I've tried the commonly used parameters.You can find better parameters and better result.I am new with data science :)\n\n \n\n","fb8afe6d":"## Age Distribution With Violin Boxplot\n","7c7f04e5":"## Age Distribution ","2ca37b97":"## Model Tuning","1dbaddc2":"## Model Tuning","5feb6a2e":"## <a id='14'>  Comparison of All Models <\/a>","ba994552":"## Cholesterol Measurement With Target ","e7c1ed09":"# <a id='0'> Dataset Introduction <\/a>","39a466e5":"## Age Vs Cholestoral Measurement  With Target\n* Target variable also contains two integer values 1 and 0 <br>\n* 1 = Presence of heart disease  0 = Absence of heart disease <br>","f798111c":"## Age Vs Maximum Heart Measurement With Exang \n\n* Exang variable also contains two integer values 1 and 0 <br>\n* Exercise induced angina <br>\n* 1 = yes <br> \n* 0 = no <br>","04037648":" ## <a id='7'> SVC <\/a>","3f4b8539":"## Exang With Age Category\n\n* Exang variable also contains two integer values 1 and 0 <br>\n* Exercise induced angina <br>\n* 1 = yes <br>\n* 0 = no <br>\n* Age_category variable also contains three categorical values 29-40,41-50 and 50+ <br>","7004b2c6":"## Model Tuning","b1ee1b02":" ## <a id='8'> Artificial neural networks <\/a>","c05c7964":"## Average Cholesterol Measurement With Age Category","1e5e4dcd":"## <a id='17'> <font size=\"+2\" color=\"LIGHTSEAGREEN\"><b>Reference<\/b><\/font><br>\n* https:\/\/seaborn.pydata.org\/examples\/index.html\n* https:\/\/plotly.com\/python\/\n* https:\/\/www.kaggle.com\/raenish\/cheatsheet-100-plotly-part-1-basic\n \n* https:\/\/stackoverflow.com (for coding problems)\n* Other kaggle nootbooks","19cf0c3d":"## Model Tuning","d2b4e89f":"# <a id='1'> 1. Importing Libraries and Dataset<\/a>","0af7bbcc":"## Distribution of Age And Age Category","92e784ad":"## Model Tuning","51502ba2":"It's a clean, easy to understand set of data. However, the meaning of some of the column headers are not obvious. Here's what they mean\n\n**Data**\n\n\n**Age**: The person's age in years<br>\n\n**Sex**: The person's sex (1 = male, 0 = female)<br>\n\n**CP**: The chest pain experienced <br>\n\n**Value** 1  : typical angina <br>\n**Value** 2  : atypical angina <br> \n**Value** 3  : non-anginal pain <br>\n**Value** 4 : asymptomatic <br>\n\n**Trestbps**: The person's resting blood pressure (mm Hg on admission to the hospital)<br>\n\n**Chol**: The person's cholesterol measurement in mg\/dl <br>\n\n**Fbs**: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)<br>\n\n**Restecg**: Resting electrocardiographic measurement <br>\n0 = normal<br>\n1 = having ST-T wave abnormality<br>\n2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)<br>\n\n**Thalach**: The person's maximum heart rate achieved <br>\n\n**Exang**: Exercise induced angina (1 = yes; 0 = no)<br>\n\n**Oldpeak**: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)<br>\n\n**Slope**: the slope of the peak exercise ST segment<br>\n**Value** 1: upsloping <br>\n**Value** 2: flat <br>\n**Value** 3: downsloping)<br>\n\n**Ca**: The number of major vessels (0-3) <br>\n\n**Thal**: A blood disorder called thalassemia <br>\n3 = normal <br>\n6 = fixed defect <br>\n7 = reversable defect <br>\n\n**Target**: Heart disease (0 = no, 1 = yes)\n","b714c4c6":"## Chest Pain Type With Sex \n* 1 = male <br>\n\n* 0 = female <br>\n","e75bd25c":"## Average Max Heart Measurement With Age Category","6b5c4cde":"## Maximum Heart Measurement With Target ","127c9713":"## Model Tuning","d48a9062":"# Age  Features & Age Category Features\n"}}