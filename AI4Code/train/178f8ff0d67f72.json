{"cell_type":{"9b83a2de":"code","8e5dec94":"code","8b1f2dd2":"code","7df84ae1":"code","2afa38cb":"code","f07ecdcc":"code","391dad1b":"code","dbfb90fc":"code","6f615a6d":"code","47fbb240":"code","596b1e0e":"code","5898ab19":"code","6996de9a":"code","cc29f692":"code","0cac5547":"code","b584cedb":"code","d21c30e2":"code","be47d43a":"markdown","77871b28":"markdown","45962c6a":"markdown","b9ce24f3":"markdown","f5499984":"markdown","31988db6":"markdown","17bb87f1":"markdown","62c3404f":"markdown","4ca5e68a":"markdown","7cfcb655":"markdown","e180affd":"markdown","d3894c3d":"markdown","fdb55259":"markdown","5af095ea":"markdown"},"source":{"9b83a2de":"import os, sys\nfrom collections import defaultdict\nfrom urllib.request import urlopen\nimport json\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom ipywidgets import widgets\n\n\n# For ipywidgets to work on kaggle\n# !pip install -q ipywidgets\n# !jupyter nbextension enable --py --sys-prefix widgetsnbextension\n\n\n# Included changes to make the kernel run as a jupyter notebook on windows without the need to make any changes\nkaggle_data_folder = os.path.join('kaggle', 'input') if sys.platform == 'win32' else os.path.join(os.path.sep, 'kaggle', 'input')\nfile_exts = (\".csv\", \".geojson\")\nall_files = defaultdict(list)\nfor dirname, _, files in os.walk(kaggle_data_folder):\n    for file in files:\n        name, ext = os.path.splitext(file)\n        if ext in file_exts:\n            all_files[ext].append(os.path.join(dirname, file))\n\nprint(all_files)","8e5dec94":"df = pd.read_csv(all_files['.csv'][0])\ndf.columns = ['Category', 'Name', 'LRate_Total_2001', 'LRate_Total_2011',\n              'LRate_Rural_2001', 'LRate_Rural_2011', 'LRate_Urban_2001', 'LRate_Urban_2011']\n\ndf.head(2)","8b1f2dd2":"stubnames1 = ['LRate_Total', 'LRate_Rural','LRate_Urban']\nstubnames2 = ['LRate']\ndf = pd.wide_to_long(df, stubnames1, i=\"Name\", j=\"Year\", sep='_')\n\n# Sort to get back 'INDIA' rows on the top\ndf.sort_values(by=['Category', 'Name'], inplace=True)\n\n# Reset index\ndf.reset_index(inplace=True)\n\n# Reorder Columns\ntemp = df['Category']\ndf.drop(labels=['Category'], axis=1, inplace = True)\ndf.insert(0, 'Category', temp)","7df84ae1":"df.head(4)","2afa38cb":"df['Rural_pop'] = round((df['LRate_Total'] - df['LRate_Urban']) \/ (df['LRate_Rural'] - df['LRate_Urban']) * 100, 1)\ndf['Urban_pop'] = 100 - df['Rural_pop']\n\ndf.head(3)","f07ecdcc":"## Read the polygon information of various Indian states from the GeoJSON file\nwith open(all_files['.geojson'][0], 'r') as fp:\n    india = json.load(fp)","391dad1b":"geo_df = pd.DataFrame(data=[st['properties']['NAME_1'] for st in india['features']], columns=['State Names in GeoJSON'])\ndata_df = pd.DataFrame(df.iloc[2:, 1].unique(), columns=['State Names in DATA'])\ngeo_df.merge(data_df,\n             how='outer',\n             left_on='State Names in GeoJSON',\n             right_on='State Names in DATA')","dbfb90fc":"mapper = {'Jammu & Kashmir': 'Jammu and Kashmir',\n          'Odisha': 'Orissa',\n          'Uttarakhand': 'Uttaranchal',\n          'A & N Islands': 'Andaman and Nicobar',\n          'D & N Haveli': 'Dadra and Nagar Haveli',\n          'Daman & Diu': 'Daman and Diu',\n          'NCT of Delhi':'Delhi'}\ndf.iloc[:, 1] = df.iloc[:, 1].apply(lambda s: mapper[s] if s in mapper.keys() else s)","6f615a6d":"# Check to confirm if the names are mapped properly\nprint(sorted([st['properties']['NAME_1'] for st in india['features']]) == sorted(list(df.iloc[2:, 1].unique())))\n\ndata_df = pd.DataFrame(df.iloc[2:, 1].unique(), columns=['State Names in DATA'])\ngeo_df.merge(data_df, how='outer',\n             left_on='State Names in GeoJSON',\n             right_on='State Names in DATA')","47fbb240":"df_grouped = df.groupby(by='Year')","596b1e0e":"df_curr = df_grouped.get_group(2001).reset_index(drop=True)\n\ntrace = go.Choroplethmapbox(geojson=india,\n                            featureidkey='properties.NAME_1',\n                            locations=df_curr.loc[1:, 'Name'],\n                            z=df_curr.loc[1:, 'LRate_Total'], \n                            zmin=40,\n                            zmax=100,\n                            colorscale='Viridis',\n                            colorbar=dict(title='Percent of State Population',\n                                          ticksuffix=' %',\n                                          len=0.8,\n                                          lenmode='fraction'))\n\nlyt = dict(title='Total Literacy Rate in 2001',\n           height=700,\n           mapbox_style='white-bg',\n           mapbox_zoom=3.4,\n           mapbox_center={'lat': 20.5937, 'lon': 78.9629})\n\nfig = go.FigureWidget(data=[trace], layout=lyt)","5898ab19":"# Add dropdowns\n## 'Total\/ Urban\/ Rural' dropdown\ncat_options = ['Total', 'Rural', 'Urban']\ncategory = widgets.Dropdown(options=cat_options,\n                            value='Total',\n                            description='Category')\n\n## 'Year' dropdown\nyear_options = [2001, 2011]\nyear = widgets.Dropdown(options=year_options,\n                        value=2001,\n                        description='Year')\n\n# Add Submit button\nsubmit = widgets.Button(description='Submit',\n                        disabled=False,\n                        button_style='info',\n                        icon='check')","6996de9a":"def submit_event_handler(args):\n    if category.value in ['Total', 'Rural', 'Urban'] and year.value in [2001, 2011]:\n        df_curr = df_grouped.get_group(year.value).reset_index(drop=True)\n        new_data = df_curr.loc[1:, 'LRate_' + str(category.value)]\n        with fig.batch_update():\n            fig.data[0].z = new_data\n            fig.layout.title = ' '.join([str(category.value), 'Literacy Rate in', str(year.value)])\n\n\nsubmit.on_click(submit_event_handler)","cc29f692":"container = widgets.HBox([category, year, submit])\nwidgets.VBox([container, fig])","0cac5547":"## Group and Aggregate\ndf_mean = df.groupby(by=['Year', 'Category']).mean()\ndf_mean","b584cedb":"trace = [go.Bar(name='2001',\n                x=['Union Territories', 'States'],\n                y=[df_mean.loc[(2001, 'Union Territory'), 'LRate_Total'], df_mean.loc[(2001, 'State'), 'LRate_Total']]),\n         go.Bar(name='2011',\n                x=['Union Territories', 'States'],\n                y=[df_mean.loc[(2011, 'Union Territory'), 'LRate_Total'], df_mean.loc[(2011, 'State'), 'LRate_Total']])]\n\nlyt = dict(barmode='group',\n           title='Average Total Literacy Rate (in % Total Population in State\/ UT)',\n           title_x=0.5, width=600)\n\nfig2 = go.Figure(data=trace, layout=lyt)\nfig2.show()","d21c30e2":"labels = ['Rural', 'Urban']\n\n# Create subplots: use 'domain' type for Pie subplot\nfig3 = make_subplots(rows=2, cols=2, specs=[[{'type':'domain'},] * 2, [{'type':'domain'},] * 2])\nfig3.add_trace(go.Pie(labels=labels,\n                      values=df_mean.loc[(2001, 'Union Territory'), ['Rural_pop', 'Urban_pop']],\n                      name=\"UT\"), 1, 1)\nfig3.add_trace(go.Pie(labels=labels,\n                      values=df_mean.loc[(2001, 'State'), ['Rural_pop', 'Urban_pop']],\n                      name=\"State\"), 2, 1)\nfig3.add_trace(go.Pie(labels=labels,\n                      values=df_mean.loc[(2011, 'Union Territory'), ['Rural_pop', 'Urban_pop']],\n                      name=\"UT\"), 1, 2)\nfig3.add_trace(go.Pie(labels=labels,\n                      values=df_mean.loc[(2011, 'State'), ['Rural_pop', 'Urban_pop']],\n                      name=\"State\"), 2, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig3.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig3.update_layout(\n    title_text=\"Average population in Rural and Urban areas in UTs and States\",\n    title_x=0.5,\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='2001', x=0.2, y=0.5, font_size=20, showarrow=False),\n                 dict(text='2011', x=0.82, y=0.5, font_size=20, showarrow=False)])\nfig3.show()","be47d43a":"## 2. Data Visualization","77871b28":"***The dataset description claims that each of the values in the dataset is interms of `Percentage of Total Population of the state`, but I think it applies only to Total Literacy Rate columns (Total - 2001 and Total - 2011) and NOT Rural and Urban columns. Because if the claim was true then `Total (%) = Rural (%) + Urban (%)` must hold.***\n\nFor example, in the state of Andhra Pradesh the Total Literacy Rate in 2001 is 60.5 which is NOT equal to Literacy Rate in Rural + Urban in 2001 (=130.6).\n\nI will assume that Total Literacy Rate columns (Total - 2001 and Total - 2011) are 'Percent of Total Population of the State', while Literacy Rate in Rural and Urban columns (Rural - 2001, Rural - 2011, Urban - 2001, Urban - 2011) are 'Percent of the Total State Population living in Rural (or Urban) areas'.\n\nSo, let's make 2 new columns `Rural_pop` and `Urban_pop` representing the Rural and Urban populations as a percentage of the Total State Population.\n\nWe can use the following equations to get the 2 columns,\n\n\\\\(Rural\\_pop = \\frac{LRate\\_Total - LRate\\_Urban}{LRate\\_Rural - LRate\\_Urban} \\times 100\\\\)\n<br\/><br\/>\n\\\\(Urban\\_pop = 100 - Rural\\_pop\\\\)","45962c6a":"## 1. Import, Transform, and Clean Data","b9ce24f3":"### 2.3 Average population in Rural and Urban areas","f5499984":"Renaming the following state names in the data:\n\n| From | To |\n| --- | --- |\n| Jammu & Kashmir | Jammu and Kashmir |\n| Odisha | Orissa |\n| Uttarakhand | Uttaranchal |\n| A & N Islands | Andaman and Nicobar |\n| D & N Haveli | Dadra and Nagar Haveli |\n| Daman & Diu | Daman and Diu |\n| NCT of Delhi | Delhi |","31988db6":"### 2.1 Statewise Literacy Rate","17bb87f1":"### 1.1 Converting wide-form data to long-form","62c3404f":"### 2.3 Percent of total literate people living in rural and urban areas. (To Do)","4ca5e68a":"### 1.1 Load GeoJSON file","7cfcb655":"The above plot shows that, from 2001 to 2011 the average urban population has increased in both UTs and States.","e180affd":"### 2.2 Average Total Literacy Rate in Union Territories and States","d3894c3d":"### 1.2 Modifying state names in the data to match those in GeoJSON","fdb55259":"# Visualizing Literacy Rate in India Using Plotly","5af095ea":"Thank You!!"}}