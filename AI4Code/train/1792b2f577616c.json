{"cell_type":{"68aba0dd":"code","161699f3":"code","15104949":"code","dfae36a6":"code","77bbe8ed":"code","9ddb4f7c":"code","ffe301ab":"code","14aee77b":"code","c46421f0":"code","c2c920c6":"code","19bfecb6":"code","ae3467cd":"code","4cf52bb6":"code","245b09f8":"code","77078710":"code","35a66ff7":"code","90853e5e":"code","24016f43":"code","230dc61f":"code","1e42b28d":"code","d58fd062":"code","f1bdf724":"code","1022f2b4":"code","fbf5fa1b":"code","b4dd3c02":"code","db4f2270":"code","ef48e319":"code","b4ea89c8":"code","710b1275":"code","fe5ad431":"markdown","503a5230":"markdown","f0e389ea":"markdown","cf012bf8":"markdown"},"source":{"68aba0dd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\n%matplotlib inline","161699f3":"dataset = pd.read_csv('vehicle.csv')","15104949":"dataset.head()","dfae36a6":"dataset.shape","77bbe8ed":"dataset.describe().transpose()","9ddb4f7c":"dataset.dtypes","ffe301ab":"dataset['class'].value_counts()","14aee77b":"dataset.groupby('class').size()","c46421f0":"dataset.plot(kind='box', figsize=(20,10))\nplt.show()","c2c920c6":"dataset.hist(figsize=(15,15))\nplt.show()","19bfecb6":"dataset.isnull().sum()","ae3467cd":"dataset.info()","4cf52bb6":"for i in dataset.columns[:-1]:\n    median_value = dataset[i].median()\n    dataset[i] = dataset[i].fillna(median_value)","245b09f8":"dataset.info()","77078710":"for col_name in dataset.columns[:-1]:\n    q1 = dataset[col_name].quantile(0.25)\n    q3 = dataset[col_name].quantile(0.75)\n    iqr = q3 - q1\n    \n    low = q1-1.5*iqr\n    high = q3+1.5*iqr\n    \n    dataset.loc[ (dataset[col_name] < low) | (dataset[col_name] > high), col_name] = dataset[col_name].median()\n    ","35a66ff7":"dataset.plot(kind='box', figsize=(20,10))","90853e5e":"sns.pairplot(dataset,diag_kind='kde')","24016f43":"dataset.corr()","230dc61f":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaled_df = scaler.fit_transform(dataset.drop(columns = 'class'))","1e42b28d":"X = scaled_df\ny = dataset['class']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X,y, random_state = 10)\n\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","d58fd062":"# Training an SVC using the actual attributes(scaled)\n\nmodel = SVC(gamma = 'auto')\n\nmodel.fit(X_train,Y_train)\n\nscore_using_actual_attributes = model.score(X_test, Y_test)\n\nprint(score_using_actual_attributes)","f1bdf724":"model = SVC()\n\nparams = {'C': [0.01, 0.1, 0.5, 1], 'kernel': ['linear', 'rbf'], 'gamma' : ['auto', 'scale' ]}\n\nmodel1 = GridSearchCV(model, param_grid=params, verbose=5)\n\nmodel1.fit(X_train, Y_train)\n\nprint(\"Best Hyper Parameters:\\n\", model1.best_params_)","1022f2b4":"model = SVC(C=1, kernel=\"rbf\", gamma='auto')\n\nscores = cross_val_score(model, X, y, cv=10)\n\nCV_score = scores.mean()\nprint(CV_score)","fbf5fa1b":"from sklearn.decomposition import PCA\n\npca = PCA().fit(scaled_df)\n\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nprint(np.cumsum(pca.explained_variance_ratio_))","b4dd3c02":"pca = PCA(n_components=8)\n\nX = pca.fit_transform(scaled_df)\nY = dataset['class']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=10)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","db4f2270":"# Training an SVC using the PCs instead of the actual attributes \nmodel = SVC(gamma= 'auto')\n\nmodel.fit(X_train,Y_train)\n\nscore_PCs = model.score(X_test, Y_test)\n\nprint(score_PCs)","ef48e319":"model = SVC(C=1, kernel=\"rbf\", gamma='auto')\n\nscores = cross_val_score(model, X, y, cv=10)\n\nCV_score_pca = scores.mean()\nprint(CV_score_pca)","b4ea89c8":"result = pd.DataFrame({'SVC' : ['All scaled attributes', '8 Principle components'],\n                      'Accuracy' : [score_using_actual_attributes,score_PCs],\n                      'Cross-validation score' : [CV_score,CV_score_pca]})","710b1275":"result","fe5ad431":"Let's pick 8 PCs as the first 8 capture more than 95% of the variance in the data","503a5230":"Let's create Principle Components out of the attributes","f0e389ea":"# Result","cf012bf8":"What was achieved using 18 attributes has been achieved using just 8 principle components. yay!"}}