{"cell_type":{"c5ccc4b2":"code","a763227e":"code","e337bda5":"code","602b6b88":"code","c75d0a57":"code","32663ea3":"code","86765ece":"code","6cd88d88":"code","2c154b60":"code","df305e8b":"code","04ebbd5e":"code","5b1333b0":"code","76ef0628":"code","55009348":"code","ed623067":"code","6c802cd6":"code","27c4a73c":"code","26104fad":"code","612f5d4e":"code","4b3c356a":"markdown","223d214d":"markdown"},"source":{"c5ccc4b2":"#Use this code to load Rapids!\nimport sys\n!cp ..\/input\/rapids\/rapids.0.18.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","a763227e":"#importing libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport networkx as nx\nimport xgboost\n!pip install pycomp\nimport cudf\nimport cuml\n\n\nfrom cuml.metrics import accuracy_score\nfrom cuml.preprocessing.model_selection import train_test_split\nfrom cuml.preprocessing.TargetEncoder import TargetEncoder\nfrom random import randint\nfrom pycomp.viz.insights import *\nfrom cuml.linear_model import Ridge\nfrom cuml.svm import SVR\nfrom cuml.neighbors import KNeighborsClassifier\n","e337bda5":"train_df = cudf.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv', index_col='PassengerId')\ntest_df = cudf.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv', index_col='PassengerId')\n","602b6b88":"train_df = train_df.fillna(0)","c75d0a57":"#encoding\nencoder = TargetEncoder(n_folds=5, smooth=0.001, split_method='interleaved')","32663ea3":"\nX = train_df.drop([\"Survived\"],axis=1)\ny = train_df[\"Survived\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, \n                                                    shuffle=False, stratify=y)\nfor col in train_df.columns:\n    if train_df[col].dtype=='object': \n        X_train[col] = encoder.fit_transform(X_train[col],y_train)\n        X_test[col] = encoder.transform(X_test[col])\n        test_df[col] = encoder.transform(test_df[col])","86765ece":"#model training\ndef train_model(model, X_train, y_train, X_test, y_test, model_name):\n    \n    model.fit(X_train, y_train)\n    predicts = model.predict(X_test)\n    acc = accuracy_score(y_test, predicts)\n    \n    \n    print(\"\\t\\t\\t--- Model:\", model_name,\"---\")\n    print(\"Accuracy: \", acc,\"\\t\\t\\t\",\"\\n\")","6cd88d88":"#creaing Ridge and SVR\nridge = Ridge(fit_intercept = True, normalize = False,solver = \"eig\")\n\nsvr = SVR(kernel='rbf', gamma='scale', C=1, epsilon=0.3)\n\n\nmodels = [ridge,svr]\nnames = [\"Ridge\",\"SVR\"]\n\nfor i in range(0,len(models)):\n    train_model(model=models[i], X_train=X_train, y_train=y_train, X_test=X_test,y_test=y_test, model_name=names[i])","2c154b60":"dtrain = xgboost.DMatrix(X_train,y_train)\ndval   = xgboost.DMatrix(X_test, y_test)\ndtest  = xgboost.DMatrix(test_df)\n\nparams1 = { 'objective': 'binary:logistic',\n    'booster': 'gbtree',\n    'tree_method': 'gpu_hist',\n    'eval_metric': 'auc',\n    'random_state': 42,\n    'max_depth': 15,\n    'learning_rate': 0.03,\n    'min_child_weight': 20,\n    'gamma': 0.1,\n    'alpha': 0.2,\n    'lambda': 9,\n    'colsample_bytree': 0.2,\n    'subsample': 0.8}\n\nevallist = [(dval, 'validation'), (dtrain, 'train')]\nnum_round=50","df305e8b":"xgb = xgboost.train(params1, dtrain,num_round,evallist)\n\npredicts = xgb.predict(xgboost.DMatrix(X_test))\nacc = accuracy_score(y_test, predicts)\nacc","04ebbd5e":"preds1 = xgb.predict(xgboost.DMatrix(test_df))\n\n\nids = cudf.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')[[\"PassengerId\"]].values","5b1333b0":"pred = []\nfor i in preds1:\n    if i >= 0.5:\n        pred.append(1)\n    else:\n        pred.append(0)","76ef0628":"df_sub = {'PassengerId': ids, 'Survived': pred}\ndf_predictions = cudf.DataFrame(df_sub).set_index(['PassengerId'])\ndf_predictions.head(10)","55009348":"import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (20,13)\n\nxgboost.plot_importance(xgb)\nplt.title(\"xgboost.plot_importance(model)\")\nplt.show()","ed623067":"xgboost.plot_importance(xgb, importance_type=\"cover\")\nplt.title('xgboost.plot_importance(model, importance_type=\"cover\")')\nplt.show()","6c802cd6":"xgboost.plot_importance(xgb, importance_type=\"gain\")\nplt.title('xgboost.plot_importance(model, importance_type=\"gain\")')\nplt.show()","27c4a73c":"import shap\n# this takes a minute or two since we are explaining over 30 thousand samples in a model with over a thousand trees\nexplainer = shap.TreeExplainer(xgb)\nshap_values = explainer.shap_values(X_train)","26104fad":"shap.summary_plot(shap_values, X_train, plot_type=\"bar\")\n","612f5d4e":"from eli5 import show_weights\nshow_weights(xgb)","4b3c356a":"![img](https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/rapids\/rapids-logo.png)","223d214d":"# Interpretability "}}