{"cell_type":{"d0c7f120":"code","7fe26fcb":"code","9c0f943e":"code","a0cd8e65":"code","3b18adbe":"code","610773fc":"code","676e5e64":"code","f84a5001":"code","90d4c518":"code","385889b4":"code","68a48537":"code","fe7f6c73":"code","6520ef40":"code","faecdae0":"code","427818ab":"code","23df6696":"code","e32d29fa":"code","b61a48eb":"code","4399e6e8":"code","1135772d":"code","f28e81e6":"code","43f4894a":"code","f85f097c":"code","f7a2b8f2":"code","43792318":"code","d3e60f99":"code","b6973709":"code","9b679374":"code","d0273505":"code","781001cd":"code","fe42514a":"code","7a830ffd":"code","867ee5d4":"code","9dc3eb9e":"code","11eea6f2":"code","15160c43":"markdown","49e4375a":"markdown","4de8191b":"markdown","8446144e":"markdown","e1b2f19c":"markdown","da507644":"markdown","4c1e98ab":"markdown","f266b759":"markdown","76e19746":"markdown","56988cd0":"markdown","f909be92":"markdown","25228a29":"markdown"},"source":{"d0c7f120":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# ML tools\nimport h2o\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator","7fe26fcb":"# import data \/ preview\ndf = pd.read_csv('..\/input\/breastcancerdataset\/BRCA.csv')\ndf.head()","9c0f943e":"# overview\ndf.info()","a0cd8e65":"# remove rows with missing Patient_Status\ndf = df.dropna(subset=['Patient_Status'], axis=0)","3b18adbe":"# gender\ndf.Gender.value_counts()","610773fc":"# use only FEMALE individuals\ndf = df[df.Gender=='FEMALE']","676e5e64":"# convert dates\ndf.Date_of_Surgery = pd.to_datetime(df.Date_of_Surgery)\ndf.Date_of_Last_Visit = pd.to_datetime(df.Date_of_Last_Visit)","f84a5001":"df.Date_of_Surgery.describe(datetime_is_numeric=True)","90d4c518":"df.Date_of_Last_Visit.describe(datetime_is_numeric=True)","385889b4":"df['Surgery_Year'] = df.Date_of_Surgery.dt.year\ndf.Surgery_Year.value_counts()","68a48537":"df['LastVisit_Year'] = df.Date_of_Last_Visit.dt.year\ndf.LastVisit_Year.value_counts()","fe7f6c73":"# adjust rows having years in the future\ndf.LastVisit_Year[df.LastVisit_Year>2021]=2021","6520ef40":"df.LastVisit_Year.value_counts()","faecdae0":"# basic stats\ntarget = 'Patient_Status'\nprint(df[target].value_counts())\ndf[target].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","427818ab":"features_num = ['Age', 'Protein1', 'Protein2', 'Protein3', 'Protein4',\n                'Surgery_Year']","23df6696":"# basic stats\ndf[features_num].describe()","e32d29fa":"# plot distribution of numerical features\nfor f in features_num:\n    df[f].plot(kind='hist', bins=30)\n    plt.title(f)\n    plt.grid()\n    plt.show()","b61a48eb":"corr_pearson = df[features_num].corr(method='pearson')\ncorr_spearman = df[features_num].corr(method='spearman')\n\nfig = plt.figure(figsize = (8,6))\nsns.heatmap(corr_pearson, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()\n\nfig = plt.figure(figsize = (8,6))\nsns.heatmap(corr_spearman, annot=True, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Spearman Correlation')\nplt.show()","4399e6e8":"# scatter plots\nsns.pairplot(df[features_num])\nplt.show()","1135772d":"features_cat = ['Tumour_Stage', 'Histology', 'ER status', \n                'PR status', 'HER2 status', 'Surgery_type']","f28e81e6":"# plot distribution of categorical features\nfor f in features_cat:\n    plt.figure(figsize=(14,4))\n    df[f].value_counts().plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","43f4894a":"features_cat = ['Tumour_Stage', 'Histology', 'HER2 status', 'Surgery_type']","f85f097c":"# plot target vs binned numerical features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_num:\n    \n    # add binned version of each numerical feature first\n    new_var = f + '_bin'\n    df[new_var] = pd.qcut(df[f], 10, duplicates='drop')\n    \n    # then create mosaic plot\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [new_var, target], title='Target vs ' + f + ' [binned]')\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","f7a2b8f2":"# plot target vs features using mosaic plot\nplt_para_save = plt.rcParams['figure.figsize'] # remember plot settings\n\nfor f in features_cat:\n    plt.rcParams['figure.figsize'] = (16,5) # increase plot size for mosaics\n    mosaic(df, [f, target], title='Target vs ' + f + ' [binned]',\n           label_rotation=90)\n    plt.show()\n    \n# reset plot size again\nplt.rcParams['figure.figsize'] = plt_para_save","43792318":"# start H2O\nh2o.init(max_mem_size='12G', nthreads=4) # Use maximum of 12 GB RAM and 4 cores","d3e60f99":"# select predictors\npredictors = features_num + features_cat\nprint('Number of predictors: ', len(predictors))\nprint(predictors)","b6973709":"# upload data frame in H2O environment\ndf_hex = h2o.H2OFrame(df[predictors+[target]])\n\n# force categorical target\ndf_hex[target] = df_hex[target].asfactor()\n\n# train \/ test split\ntrain_perc = 0.8\ntrain_hex, test_hex = df_hex.split_frame(ratios=[train_perc], seed=999)","9b679374":"# check target distribution in training data\ntrain_hex['Patient_Status'].as_data_frame().value_counts()","d0273505":"# check target distribution in test set\ntest_hex['Patient_Status'].as_data_frame().value_counts()","781001cd":"# define model\nn_cv = 4\nfit_1 = H2OGeneralizedLinearEstimator(family = 'binomial',\n                                      nfolds = n_cv,\n                                      standardize = True,\n                                      alpha = 0,\n                                      # 0: Ridge (L2), 1: LASSO (L1)                                          \n                                      lambda_search = True,\n                                      score_each_iteration = True,                                          \n                                      seed=12345)","fe42514a":"# train model\nt1 = time.time()\nfit_1.train(x=predictors,\n            y=target,\n            training_frame=train_hex)\nt2 = time.time()\nprint('Elapsed time [s]: ', np.round(t2-t1,2))","7a830ffd":"# show cross validation metrics\nfit_1.cross_validation_metrics_summary()","867ee5d4":"# basic version\nfit_1.varimp_plot(-1)","9dc3eb9e":"# training performance - AUC\nperf_train = fit_1.model_performance(train=True)\nperf_train.plot()","11eea6f2":"# calc performance on test test\nperf_test = fit_1.model_performance(test_hex)\n\n# ROC Curve - Test Set\nperf_test.plot()","15160c43":"<a id='5'><\/a>\n# Fit Model","49e4375a":"### Performance looks not really convincing here...","4de8191b":"<a id='2'><\/a>\n# Numerical Features","8446144e":"<a id='3'><\/a>\n# Categorical Features","e1b2f19c":"<a id='4'><\/a>\n# Target vs Features","da507644":"#### ER status and PR status have only one level => remove these two features.","4c1e98ab":"### Variable Importance","f266b759":"<a id='1'><\/a>\n# Target","76e19746":"### Categorical Features","56988cd0":"\n# Table of Contents\n* [Target](#1)\n* [Numerical Features](#2)\n* [Categorical Features](#3)\n* [Target vs Features](#4)\n* [Fit Model](#5)","f909be92":"### Numerical Features","25228a29":"#### We have a few rows with missing Patient_Status!"}}