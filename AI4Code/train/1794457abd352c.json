{"cell_type":{"1cb74363":"code","900f0efd":"code","30d3db77":"code","7a603a69":"code","f372c1ee":"code","cfb55221":"code","7968c6c1":"code","56c05dfc":"code","4cfeff05":"code","b145c557":"code","9c796b97":"code","37c2462b":"code","e8878a09":"code","e9d561dc":"code","adc1d391":"code","4799e9db":"code","053d612f":"code","563d249f":"code","9c75e426":"code","d7219c6a":"code","eafc21c4":"code","c0d1ed4a":"code","a013f83f":"code","380b7d48":"code","06f0f9ce":"code","90299ae4":"code","77ef4cdb":"code","06593ac1":"code","7ac3faf5":"code","8c55fca6":"code","cc727bc2":"code","e1b189c3":"code","30a2da10":"code","0d06adf8":"code","a080825a":"code","f612f574":"code","5b6993d4":"code","fb65fdd8":"code","04a3a393":"code","bac78365":"code","c6df2525":"code","0300948e":"code","46c7bf36":"code","58f1cf3e":"code","69be06b6":"code","0d42ad72":"code","7cf5635f":"code","c87e88ce":"code","e7894058":"code","b6b7f8c5":"code","fd12358a":"code","18ccfc98":"code","b9bcb79b":"code","4000b2a1":"code","4915df75":"code","775473ed":"code","d3459075":"code","53cb9aeb":"code","08c4eb23":"code","5c772fc3":"code","d990f0c1":"code","c36a241e":"code","a97375aa":"code","d6012e11":"code","88809943":"code","ac93f5bc":"code","a9cae527":"code","5d6b386c":"code","3428d005":"code","96ddad39":"code","c1fcc3ae":"code","6b67cb49":"code","47f1ad68":"code","c9e825e2":"code","99d7f2da":"code","62ffc55d":"code","0ef9ca63":"code","271dfcfc":"code","075c26a3":"code","b490a193":"code","36e5f962":"code","9b7c9406":"markdown","8f3a4600":"markdown","f81ffb8f":"markdown","ba0ffa77":"markdown","b440083a":"markdown","6cca2f3b":"markdown","32b50229":"markdown","99039d9f":"markdown","339f58c9":"markdown","bdbec1f4":"markdown","0d565b5f":"markdown","fc15a0c3":"markdown","d622fedf":"markdown","6effe63f":"markdown","8f273b80":"markdown","699fb56e":"markdown","3d9ca77b":"markdown","e42b1e47":"markdown","15e07a63":"markdown","ee98bad1":"markdown","7f22717b":"markdown","f2655e3b":"markdown","6336bd89":"markdown"},"source":{"1cb74363":"#importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","900f0efd":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","30d3db77":"df_train.head()","7a603a69":"df_train.info()","f372c1ee":"df_train.describe()","cfb55221":"df_train.shape","7968c6c1":"df_train.isnull().sum()","56c05dfc":"df_test.head()","4cfeff05":"df_test.shape","b145c557":"df_test.info()","9c796b97":"df_test.describe()","37c2462b":"df_test.isnull().sum()","e8878a09":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","e9d561dc":"sns.countplot(x='Survived',data=df_train,palette='Set3')","adc1d391":"plt.figure(figsize=(18,5))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nsns.countplot(x='Survived',hue='Sex',data=df_train,palette='dark')\nplt.subplot(142)\nsns.countplot(x='Survived',hue='Pclass',data=df_train,palette='RdBu_r')\nplt.subplot(143)\nsns.countplot(x='Survived',hue='Embarked',data=df_train,palette='Set3')","4799e9db":"\nsns.boxplot(x='Survived',y='Age',data=df_train)\n","053d612f":"plt.figure(figsize=(18,6))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(131)\nsns.countplot(x='SibSp',data=df_train)\n\nplt.subplot(132)\ndf_train['Age'].hist(bins=30,color='darkred',alpha=0.7,grid=False)\nplt.xlabel('Age')\n\nplt.subplot(133)\ndf_train['Fare'].hist(color='green',bins=40,grid=False)\nplt.xlabel('Fare')\n","563d249f":"sns.pairplot(df_train)","9c75e426":"sns.violinplot(y='Age',data=df_train,color='m',linewidth=2)","d7219c6a":"plt.figure(figsize=(20,5))\nplt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9,\n                      wspace=0.5, hspace=0.2)\nplt.subplot(141)\nsns.countplot(x='Survived',hue='Sex',data=df_train)\nplt.subplot(142)\nsns.countplot(x='Survived',hue='Pclass',data=df_train,palette='dark')\nplt.subplot(143)\nsns.countplot(x='Survived',hue='Embarked',data=df_train,palette='Set3')","eafc21c4":"plt.figure(figsize=(10,5))\nsns.countplot(x='Survived',hue='Parch',data=df_train)","c0d1ed4a":"df_train.isnull().sum()","a013f83f":"#dropping Cabin Column\ndf_train.drop('Cabin',axis=1,inplace=True)","380b7d48":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","06f0f9ce":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=df_train,palette='winter')","90299ae4":"print(\"mean of AGE for Pclass=1  \",df_train[df_train['Pclass']==1]['Age'].mean())\nprint(\"mean of AGE for Pclass=2  \",df_train[df_train['Pclass']==2]['Age'].mean())\nprint(\"mean of AGE for Pclass=3  \",df_train[df_train['Pclass']==3]['Age'].mean())","77ef4cdb":"#impute_age function impute mean_age with respect to corresponding Pclass\n\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 38\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","06593ac1":"df_train['Age'] = df_train[['Age','Pclass']].apply(impute_age,axis=1)","7ac3faf5":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8c55fca6":"df_train.fillna(method='ffill',inplace=True)","cc727bc2":"df_train.info()","e1b189c3":"df_test.isnull().sum()","30a2da10":"#dropping Cabin Column\ndf_test.drop('Cabin',axis=1,inplace=True)","0d06adf8":"sns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","a080825a":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=df_test,palette='winter')","f612f574":"print(\"mean of AGE for Pclass=1  \",df_test[df_test['Pclass']==1]['Age'].mean())\nprint(\"mean of AGE for Pclass=2  \",df_test[df_test['Pclass']==2]['Age'].mean())\nprint(\"mean of AGE for Pclass=3  \",df_test[df_test['Pclass']==3]['Age'].mean())","5b6993d4":"#impute_age function impute mean_age with respect to corresponding Pclass\n\ndef impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 40\n\n        elif Pclass == 2:\n            return 28\n\n        else:\n            return 24\n\n    else:\n        return Age","fb65fdd8":"df_test['Age'] = df_test[['Age','Pclass']].apply(impute_age,axis=1)","04a3a393":"sns.heatmap(df_test.isnull(),yticklabels=False,cbar=False,cmap='viridis')","bac78365":"df_test.fillna(method='ffill',inplace=True)","c6df2525":"df_test.info()","0300948e":"#converting sex col and embarked col using pd.get_dummies() method\nsex = pd.get_dummies(df_train['Sex'],prefix='Sex',prefix_sep='_',drop_first=True)\n\nembark = pd.get_dummies(df_train['Embarked'],prefix='Embark',prefix_sep='_',drop_first=True)\n","46c7bf36":"df_train = pd.concat([df_train,sex,embark],axis=1)","58f1cf3e":"df_train.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)","69be06b6":"df_train.head()","0d42ad72":"#converting sex col and embarked col using pd.get_dummies() method\nsex = pd.get_dummies(df_test['Sex'],prefix='Sex',prefix_sep='_',drop_first=True)\n\nembark = pd.get_dummies(df_test['Embarked'],prefix='Embark',prefix_sep='_',drop_first=True)\n","7cf5635f":"df_test = pd.concat([df_test,sex,embark],axis=1)","c87e88ce":"df_test.drop(['Name','Sex','Embarked','Ticket'],axis=1,inplace=True)","e7894058":"df_test.head()","b6b7f8c5":"X = df_train.drop('Survived',axis =1)\nY = df_train['Survived']","fd12358a":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size =0.3, random_state =101)","18ccfc98":"from sklearn.linear_model import LogisticRegression \n\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,Y_train)","b9bcb79b":"logpredictions = logmodel.predict(X_test)","4000b2a1":"logpredictions","4915df75":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(logpredictions,Y_test))\nprint(classification_report(logpredictions,Y_test))","775473ed":"from sklearn.tree import DecisionTreeClassifier","d3459075":"dtc = DecisionTreeClassifier()","53cb9aeb":"dtc.fit(X_train,Y_train)","08c4eb23":"dtc_predictions = dtc.predict(X_test)","5c772fc3":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(dtc_predictions,Y_test))\nprint(classification_report(dtc_predictions,Y_test))","d990f0c1":"from sklearn.ensemble import RandomForestClassifier","c36a241e":"rfc = RandomForestClassifier()","a97375aa":"rfc.fit(X_train,Y_train)","d6012e11":"rfc_predictions = rfc.predict(X_test)","88809943":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(rfc_predictions,Y_test))\nprint(classification_report(rfc_predictions,Y_test))","ac93f5bc":"from sklearn.svm import SVC\n\nsvc = SVC()\nsvc.fit(X_train,Y_train)","a9cae527":"svm_predictions = svc.predict(X_test)","5d6b386c":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(svm_predictions,Y_test))\nprint(classification_report(svm_predictions,Y_test))","3428d005":"param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']} ","96ddad39":"from sklearn.model_selection import GridSearchCV","c1fcc3ae":"grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=3)","6b67cb49":"grid.fit(X_train,Y_train)","47f1ad68":"grid.best_params_","c9e825e2":"grid.best_estimator_","99d7f2da":"grid_predictions = grid.predict(X_test)\n","62ffc55d":"from sklearn.metrics import classification_report, confusion_matrix\n\nprint(confusion_matrix(grid_predictions,Y_test))\nprint(classification_report(grid_predictions,Y_test))","0ef9ca63":"final_predictions = rfc.predict(df_test)","271dfcfc":"final_predictions","075c26a3":"df_test['Survived'] = final_predictions","b490a193":"df_submission = pd.DataFrame(df_test.drop(['Pclass','Age','SibSp','Parch','Fare','Sex_male','Embark_Q','Embark_S'],axis=1))","36e5f962":"df_submission.to_csv('Submission_file.csv',index=False)","9b7c9406":"**For Train Set**","8f3a4600":"# EXPLORATORY DATA ANALYSIS","f81ffb8f":"**For Test Set**","ba0ffa77":"**For Train Set**","b440083a":"# TITANIC DATASET","6cca2f3b":"Data is ready for modeling!!","32b50229":"# Random Forest","99039d9f":"**Null Value Imputation**\n\n- As we see Age column has null values, we can smartly impute the null values with the mean age corresponding to the \"Pclass\" of the person. So, first finding the means with respect to the Pclass and then impute the null values with the mean of Age of corresponding value of \"Pclass\".","339f58c9":"**Converting Categorical variables**","bdbec1f4":"# DATA CLEANING AND PREPROCESSING","0d565b5f":"**MODELS USED**\n\n- LOGISTIC REGRESSION\n- DECISION TREE CLASSIFIER\n- RANDOM FOREST CLASSIFIER \n- SUPPORT VECTOR MACHINES(SVM)","fc15a0c3":"we are predicting our final predictions using random forest classifier","d622fedf":"# Grid Search","6effe63f":"Splitting data","8f273b80":"**Evaluating svm**","699fb56e":"**Evaluating Decision Tree**","3d9ca77b":"**Evaluating Random forest**","e42b1e47":"converting into submission file","15e07a63":"**For Test Set**","ee98bad1":"# Support Vector Machines","7f22717b":"# Decision Tree","f2655e3b":"**Evaluating Logistic model**","6336bd89":"# Logistic model\n"}}