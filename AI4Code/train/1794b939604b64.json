{"cell_type":{"10b18ab4":"code","414cda81":"code","3f1c9d3e":"code","23120947":"code","d61ed55b":"code","19d49c73":"code","a8ea6cd9":"code","a5b94716":"code","1a844268":"code","6b680379":"code","faf87023":"code","0cd892a0":"code","80d581dd":"code","1c83512f":"code","2a6cc435":"code","d0dd6550":"code","0562cf2c":"code","cf541994":"code","e6de5853":"code","878a142f":"code","d51a3788":"code","83a4df7a":"code","20838e54":"code","b2e5efd5":"code","78ea73fa":"code","31236982":"code","3003dbe3":"code","0d49ffcb":"code","f9f560ee":"code","85961838":"code","b4b6ebb7":"code","1a4e6821":"code","bf1e4f57":"markdown","4b37455c":"markdown","f12b659a":"markdown","0a1287c5":"markdown","03069c72":"markdown","3f2da21d":"markdown","b273075b":"markdown"},"source":{"10b18ab4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","414cda81":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","3f1c9d3e":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","23120947":"train_data.info()","d61ed55b":"test_data.info()","19d49c73":"train_data.describe()","a8ea6cd9":"train_data.hist(bins=10, figsize=(20,15))","a5b94716":"train_data.plot(kind='scatter', x='Age', y='Survived')","1a844268":"corr_matrix = train_data.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","6b680379":"train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\ntest_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\n","faf87023":"train_data.info()","0cd892a0":"corr_matrix = train_data.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","80d581dd":"#train_data['Fare'] = train_data.loc[train_data['Fare'] < 100]['Fare']\ntrain_data['Fare'].fillna(train_data['Fare'].median(), inplace=True)\n#test_data['Fare'] = test_data.loc[test_data['Fare'] < 100]['Fare']\ntest_data['Fare'].fillna(test_data['Fare'].median(), inplace=True)\n","1c83512f":"train_data.describe()","2a6cc435":"train_data.Fare.hist(bins=10)\n","d0dd6550":"women = train_data.loc[train_data['Sex']=='female']['Survived']\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","0562cf2c":"men = train_data.loc[train_data['Sex']=='male']['Survived']\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","cf541994":"# One-Hot encode Ticket\ntrain_data.Sex = pd.get_dummies(train_data.Sex)\ntest_data.Sex = pd.get_dummies(test_data.Sex)","e6de5853":"train_data['Age'].fillna(train_data['Age'].median(), inplace=True)\ntest_data['Age'].fillna(test_data['Age'].median(), inplace=True)\n","878a142f":"train_data['IsAlone'] = 0\ntrain_data.loc[train_data['FamilySize'] == 1, 'IsAlone'] = 1\ntest_data['IsAlone'] = 0\ntest_data.loc[test_data['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_data['Age*Class'] = train_data.Age * train_data.Pclass\ntest_data['Age*Class'] = test_data.Age * test_data.Pclass","d51a3788":"old = train_data.loc[train_data['Age'] > 45]['Survived']\nrate_old = sum(old)\/len(old)\n\nprint(\"% of old people who survived:\", rate_old)","83a4df7a":"mid_age = train_data.loc[(train_data['Age'] <= 45) & (train_data['Age'] >= 15)]['Survived']\nrate_mid = sum(mid_age)\/len(mid_age)\n\nprint(\"% of middle aged people who survived:\", rate_mid)","20838e54":"young = train_data.loc[train_data['Age'] < 15]['Survived']\nrate_young = sum(young)\/len(young)\n\nprint(\"% of young people who survived:\", rate_young)","b2e5efd5":"train_data['Age'] = pd.cut(train_data['Age'], bins=[0., 10., 25., 50, 80, np.inf], labels=[0,1,2,3,4]).astype(int)\ntest_data['Age'] = pd.cut(test_data['Age'], bins=[0., 10., 25., 50, 80, np.inf], labels=[0,1,2,3,4]).astype(int)\n","78ea73fa":"train_data.Age","31236982":"# Missing Values \n\nprint(train_data.isnull().sum())\n\ntrain_data[train_data.Embarked.isnull()]","3003dbe3":"pd.options.mode.chained_assignment = None  # default='warn'\n# Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\n\n\n#label encoder can't handle missing values\ntrain_data.Embarked = train_data.Embarked.fillna('None')\ntest_data.Embarked = test_data.Embarked.fillna('None')\n\n# Label encode Embarked \nlabel_encoder = LabelEncoder()\ntrain_data.Embarked = label_encoder.fit_transform(train_data.Embarked)\ntest_data.Embarked = label_encoder.transform(test_data.Embarked)\n\n","0d49ffcb":"corr_matrix = train_data.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","f9f560ee":"y = train_data[\"Survived\"]\n\nfeatures = [\"Pclass\", \"Sex\", \"Fare\", \"SibSp\", \"Parch\",\"FamilySize\", \"Embarked\", \"IsAlone\"]\nX = train_data[features]\nX_test = test_data[features]\n\nprint(X)\n\nscoring_method = \"f1\"\n","85961838":"from sklearn.ensemble import RandomForestClassifier\nrf_model = RandomForestClassifier()\n\nrf_params ={\n    'bootstrap': [True, False],\n    'max_depth': [10, None],\n    'max_features': ['auto', 'sqrt'],\n    'min_samples_leaf': [1, 2, 4],\n    'min_samples_split': [2, 5, 10],\n    'n_estimators': [100]}\n\nrf_gs = GridSearchCV(rf_model, rf_params, scoring=scoring_method, cv=8, n_jobs=4)\n\nrf_gs.fit(X, y)\nprint(rf_gs.best_params_)\nprint(rf_gs.best_score_)","b4b6ebb7":"from sklearn.model_selection import cross_val_score\n\ncross_val_score(rf_gs, X, y, cv=5)","1a4e6821":"predictions = random_forest.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your pipeline submission was successfully saved!\")","bf1e4f57":"## Explore the Data","4b37455c":"### Age\n","f12b659a":"### Sex","0a1287c5":"### Looking for Correlations","03069c72":"# Titanic Predictions \n\n## Get the Data","3f2da21d":"# Modelling\n\n## Random Forest","b273075b":"### Fare\n"}}