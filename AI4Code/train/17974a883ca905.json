{"cell_type":{"fd21b226":"code","998ae0a2":"code","0fe2221a":"code","0d96c3d5":"code","7f6edf3a":"code","d3d34e23":"code","763f76a2":"code","0b0b74db":"code","1f5157bc":"code","23b5a7a5":"code","7b1c2642":"code","8aa1ba04":"code","e4228dcf":"code","72e6cd39":"code","2780b398":"code","f7d2865c":"code","3caabbd2":"code","f173cbff":"code","3cac7f93":"code","9e1f5b72":"code","395eeb4f":"code","d61901df":"code","52540102":"markdown","005f5aa3":"markdown","7fa9ef4b":"markdown","46d40990":"markdown","fc6f4a1e":"markdown","a2e60d34":"markdown","666bae85":"markdown","ffb7781a":"markdown","d1cc902a":"markdown","d95d5568":"markdown","9bb54b2d":"markdown","b0c16f77":"markdown","82bfe85d":"markdown","6c1d1bf1":"markdown","490cda23":"markdown","50ac9059":"markdown","bda6e66b":"markdown","0ecb8cce":"markdown"},"source":{"fd21b226":"import pandas as pd\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfrom statsmodels.graphics.factorplots import interaction_plot\nimport matplotlib.pyplot as plt\nfrom scipy import stats","998ae0a2":"datafile = \"..\/input\/toothgrowth\/ToothGrowth.csv\"\ndata = pd.read_csv(datafile)","0fe2221a":"fig = interaction_plot(data.dose, data.supp, data.len,\n             colors=['red','blue'], markers=['D','^'], ms=10)","0d96c3d5":"N = len(data.len)\ndf_a = len(data.supp.unique()) - 1\ndf_b = len(data.dose.unique()) - 1\ndf_axb = df_a*df_b \ndf_w = N - (len(data.supp.unique())*len(data.dose.unique()))","7f6edf3a":"grand_mean = data['len'].mean()","d3d34e23":"ssq_a = sum([(data[data.supp ==l].len.mean()-grand_mean)**2 for l in data.supp])","763f76a2":"ssq_b = sum([(data[data.dose ==l].len.mean()-grand_mean)**2 for l in data.dose])","0b0b74db":"ssq_t = sum((data.len - grand_mean)**2)","1f5157bc":"vc = data[data.supp == 'VC']\noj = data[data.supp == 'OJ']\nvc_dose_means = [vc[vc.dose == d].len.mean() for d in vc.dose]\noj_dose_means = [oj[oj.dose == d].len.mean() for d in oj.dose]","23b5a7a5":"ssq_w = sum(((oj.len - oj_dose_means)**2) + sum((vc.len - vc_dose_means)**2))","7b1c2642":"ssq_axb = ssq_t-ssq_a-ssq_b-ssq_w","8aa1ba04":"# Mean Square A\nms_a = ssq_a\/df_a\n\n# Mean Square B\nms_b = ssq_b\/df_b\n\n# Mean Square AxB\nms_axb = ssq_axb\/df_axb\n\n# Mean Square Within\/Error\/Residual\nms_w = ssq_w\/df_w","e4228dcf":"# F-ratio A\nf_a = ms_a\/ms_w\n# F-ratio B\nf_b = ms_b\/ms_w\n# F-ratio AxB\nf_axb = ms_axb\/ms_w","72e6cd39":"p_a = stats.f.sf(f_a, df_a, df_w)\np_b = stats.f.sf(f_b, df_b, df_w)\np_axb = stats.f.sf(f_axb, df_axb, df_w)","2780b398":"results = {'sum_sq':[ssq_a, ssq_b, ssq_axb, ssq_w],\n           'df':[df_a, df_b, df_axb, df_w],\n           'F':[f_a, f_b, f_axb, 'NaN'],\n            'PR(&gt;F)':[p_a, p_b, p_axb, 'NaN']}\ncolumns=['sum_sq', 'df', 'F', 'PR(&gt;F)']\naov_table1 = pd.DataFrame(results, columns=columns,\n                          index=['supp', 'dose', \n                          'supp:dose', 'Residual'])","f7d2865c":"def eta_squared(aov):\n    aov['eta_sq'] = 'NaN'\n    aov['eta_sq'] = aov[:-1]['sum_sq']\/sum(aov['sum_sq'])\n    return aov\ndef omega_squared(aov):\n    mse = aov['sum_sq'][-1]\/aov['df'][-1]\n    aov['omega_sq'] = 'NaN'\n    aov['omega_sq'] = (aov[:-1]['sum_sq']-(aov[:-1]['df']*mse))\/(sum(aov['sum_sq'])+mse)\n    return aov\neta_squared(aov_table1)\nomega_squared(aov_table1)\naov_table1","3caabbd2":"formula = 'len ~ C(supp) + C(dose) + C(supp):C(dose)'\nmodel = ols(formula, data).fit()\naov_table = anova_lm(model, typ=2)","f173cbff":"eta_squared(aov_table)\nomega_squared(aov_table)\naov_table.round(3)","3cac7f93":"res = model.resid \nfig = sm.qqplot(res, stats.t, fit=True, line=\"45\")\nplt.show()","9e1f5b72":"import pingouin as pg\ndata = pd.read_csv(datafile)\ndata.head()","395eeb4f":"aov = pg.anova(data, dv='len', between=['supp', 'dose'], detailed=True)\naov","d61901df":"# Thank you!","52540102":"# Obtaining p-values\nWe can use the scipy.stats method f.sf to check if our obtained F-ratios is above the critical value. Doing that we need to use our F-value for each effect and interaction as well as the degrees of freedom for them, and the degree of freedom within.","005f5aa3":"# a couple of ways to do two-way ANOVA with Python\nHere is my version of [this article](https:\/\/www.marsja.se\/three-ways-to-carry-out-2-way-anova-with-python\/)\nThere are a lot of errors, and so, I'd fixed it","7fa9ef4b":"# Degrees of Freedom","46d40990":"# Sum of Squares\nFor the calculation of the sum of squares A, B and Total we will need to have the grand mean. Using Pandas DataFrame method mean on the dependent variable only will give us the grand mean:","fc6f4a1e":"What is neat with using statsmodels is that we can also do some diagnostics. It is, for instance, very easy to take our model fit (the linear model fitted with the OLS method) and get a Quantile-Quantile (QQplot):","a2e60d34":"# Mean Squares\nWe continue with the calculation of the mean square for each factor, the interaction of the factors, and within.","666bae85":"# Two-Way ANOVA using Pingouin\nHere, Pingouin offers a very easy way to for ANOVA in Python.\nUnfortunatelly, it doesn't work on the Kaggle site (in reason of this library, which i use), but you can copy these few lines of code...","ffb7781a":"Statsmodels does not calculate effect sizes for us. My functions above can, again, be used and will add omega and eta squared effect sizes to the ANOVA table. Actually, I created these two functions to enable calculation of omega and eta squared effect sizes on the output of Statsmodels anova_lm method. Note, statsmodels can be installed with e.g. pip or conda.","d1cc902a":"# Sum of Squares Total","d95d5568":"# Sum of Squares B \u2013 dose\nCalculation of the second Sum of Square, B (dose), is pretty much the same but over the levels of that factor.","9bb54b2d":"# Calculation of Sum of Squares\nThe calculations of the sum of squares (the variance in the data) are quite simple using Python. \nFirst, we start with getting the sample size (N) and the degree of freedoms needed. \nWe will use them later to calculate the mean square. \nAfter we have the degree of freedom we continue with the calculation of the sum of squares.","b0c16f77":"So, common software, such as SPSS has eta squared as output. However, eta squared is an overestimation of the effect. To get a less biased effect size measure we can use omega squared. The following two functions add eta squared and omega squared to the above DataFrame that contains the ANOVA table.","82bfe85d":"# Sum of Squares A \u2013 supp\nWe start with calculation of Sum of Squares for the factor A (supp).","6c1d1bf1":"# Sum of Squares Within (error\/residual)\nNext, we need to calculate the Sum of Squares Within which is sometimes referred to as error or residual.","490cda23":"The results are, right now, stored in a lot of variables. To obtain a more readable result we can create a DataFrame that will contain our ANOVA table.","50ac9059":"# Sum of Squares interaction\nSince we have a two-way design we need to calculate the Sum of Squares for the interaction of A and B.","bda6e66b":"\n\n\n# Two-way ANOVA using Statsmodels\nThere is, of course, a much easier way to do Two-way ANOVA with Python. We can use Statsmodels which have a similar model notation as many R-packages (e.g., lm). We start with the formulation of the model:","0ecb8cce":"# F-ratio\nThe F-statistic is simply the mean square for each effect and the interaction \ndivided by the mean square for within (error\/residual)."}}