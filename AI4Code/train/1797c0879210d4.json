{"cell_type":{"9adab1a0":"code","a24699df":"code","ab1794fb":"code","9880236e":"code","35b15e4d":"code","a74fdbe7":"code","a7ca260f":"code","d2437708":"code","c4b9938d":"code","3c087891":"code","049ed472":"code","cc53bf00":"code","bbcbbcab":"markdown"},"source":{"9adab1a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.offline as py\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a24699df":"df=pd.read_csv(\"..\/input\/ejemplo-recomendador-davinci\/recursos.csv\")\ndf.head()","ab1794fb":"#https:\/\/www.kaggle.com\/olgabelitskaya\/parts-of-speech\nplt.figure(figsize=(10,5))\nsns.countplot(y=\"statistical-programming\",data=df,\n             facecolor=(0,0,0,0),linewidth=5,\n             edgecolor=sns.color_palette(\"winter\"))\nplt.title('DaVinci Recommender',\n         fontsize=15);","9880236e":"ax = df['University at Buffalo'].value_counts().plot.barh(figsize=(30, 20))\nax.set_title('University at Buffalo Courses', size=18)\nax.set_ylabel('University at Buffalo Courses', size=14)\nax.set_xlabel('Count', size=14)","35b15e4d":"fig = px.bar(df[['statistical-programming','4.7']].sort_values('4.7', ascending=False), \n                        y = \"4.7\", x= \"statistical-programming\", color='4.7', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Statistical Programming\")\n\nfig.show()","a74fdbe7":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf = df.groupby('ADHD: Everyday Strategies for Elementary Students').size()\/df['University at Buffalo'].count()*100\nlabels = lowerdf.index\nvalues = lowerdf.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values,marker_colors = px.colors.sequential.speed, hole=.6)])\nfig.show()","a7ca260f":"fig = px.bar(df, x= \"University at Buffalo\", y= \"ADHD: Everyday Strategies for Elementary Students\", color_discrete_sequence=['crimson'], title='University at Buffalo & Strategies')\nfig.show()","d2437708":"ax = sns.countplot(x = 'ADHD: Everyday Strategies for Elementary Students',data=df,order=['AI For Everyone', 'AI For Medical Treatment', 'AI for Medical Diagnosis', 'AI for Medical Prognosis'])\nfor p in ax.patches:\n        ax.annotate(format(p.get_height()), (p.get_x()+0.2, p.get_height()))\nplt.xticks(rotation=45) ","c4b9938d":"df = df.rename(columns={'ADHD: Everyday Strategies for Elementary Students':'strategies', 'University at Buffalo': 'buffalo'})","3c087891":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.strategies)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='GnBu', background_color=\"white\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","049ed472":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.buffalo)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set1', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","cc53bf00":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#a83a32','#a8324e','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Kaggle Notebook Runner: Mar\u00edlia Prata, not a DS. Shh! @mpwolke' )","bbcbbcab":"#Avoiding a clumsy chart, pick only 4\/3 from the feature you choose."}}