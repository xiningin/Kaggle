{"cell_type":{"67469b12":"code","5b6a3b5e":"code","726ddd25":"code","44c34564":"code","d19fd1ac":"code","30138c4c":"code","f090bf6a":"code","82424be4":"code","db8e147e":"code","c337d888":"code","66daafd2":"code","8361fdd6":"code","c7ea481c":"code","ee396e6b":"code","8c8e8609":"code","8cd0232c":"code","3a11a7df":"code","1e2cd14e":"code","e83111b1":"code","734af39e":"code","661d269d":"code","8e33d1cc":"code","f82d9b6c":"code","72ad3b1d":"code","579aa4b0":"code","61f68187":"code","6cf3379f":"code","c3506e62":"code","32c1a03b":"code","81376929":"code","66d66e3a":"code","ec08f4e1":"code","f05f9897":"code","8ce6203c":"code","f9bb74fe":"code","befb1f15":"markdown","1a66dadc":"markdown","3d1bcca8":"markdown","e645647e":"markdown","c04fcfc4":"markdown","c0b290ff":"markdown","4ef40855":"markdown","dcc3f232":"markdown","894076e7":"markdown","7d35d633":"markdown","295b1b9e":"markdown","1e3c59d4":"markdown","9bbdeed8":"markdown","0fee1db4":"markdown","a676d525":"markdown","bd8b123f":"markdown","b0fd92dd":"markdown","583005a1":"markdown","81d4e81b":"markdown","72d32c5f":"markdown","6f459b03":"markdown","fcd4217b":"markdown","25013f72":"markdown","116a4576":"markdown","740ebba4":"markdown","637e3955":"markdown","97b9cbc7":"markdown"},"source":{"67469b12":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\nsns.set()","5b6a3b5e":"df = pd.read_csv(\"\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv\", skipinitialspace=True)","726ddd25":"df.head(10)","44c34564":"df.shape","d19fd1ac":"df.info()","30138c4c":"df.count()","f090bf6a":"df.describe()","82424be4":"print(f'Any NaN values? {df.isna().values.any()}')","db8e147e":"sns.displot(df[\"price\"], bins=50, aspect=2, kde=True, color='#2196f3')","c337d888":"plt.figure(figsize=(6, 4), dpi=200)\nsns.heatmap(df.corr(), annot=True)\nplt.show()","66daafd2":"scatter = px.scatter(x=df.engineSize, y=df.price, title=\"Engine Size vs Price\")\nscatter.update_layout(xaxis_title=\"Engine Size\", yaxis_title=\"Price\")\nscatter.show()","8361fdd6":"scatter = px.scatter(x=df.year, y=df.price, title=\"Year vs Price\")\nscatter.update_layout(xaxis_title=\"Year\", yaxis_title=\"Price\")\nscatter.show()","c7ea481c":"outliers = []\ndef find_outliers(data):\n    threshold = 3\n    mean = np.mean(data)\n    std = np.std(data)\n    for x in data:\n        z_score = (x - mean) \/ std\n        if np.abs(z_score) > threshold:\n            outliers.append(x)\n    return outliers","ee396e6b":"price_outliers = find_outliers(df[\"price\"])\nprint(f'Price outliers from Z-score method: {sorted(price_outliers)}')","8c8e8609":"new_df = df.loc[(df[\"price\"] < price_outliers[0])]\nnew_df","8cd0232c":"new_df = new_df.reset_index(drop=True)\nnew_df","3a11a7df":"df_model_mod = new_df.copy()","1e2cd14e":"df_model_mod = pd.get_dummies(df_model_mod, columns=[\"model\", \"transmission\", \"fuelType\"], drop_first=True)\ndf_model_mod","e83111b1":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.preprocessing import StandardScaler\n\nclass CustomScaler(BaseEstimator, TransformerMixin):\n    \n    def __init__(self, columns):\n        self.scaler = StandardScaler()\n        self.columns = columns\n        self.mean_ = None\n        self.var_ = None\n    \n    def fit(self, X, y=None):\n        self.scaler.fit(X[self.columns], y)\n        self.mean_ = np.mean(X[self.columns])\n        self.var_ = np.var(X[self.columns])\n        return self\n    \n    def transform(self, X, y=None, copy=None):\n        init_col_order = X.columns\n        X_scaled = pd.DataFrame(self.scaler.transform(X[self.columns]), columns=self.columns)\n        X_not_scaled = X.loc[:, ~X.columns.isin(self.columns)]\n        return pd.concat([X_not_scaled, X_scaled], axis=1)[init_col_order]","734af39e":"unscaled_inputs = df_model_mod.drop([\"price\"], axis=1)\nunscaled_inputs","661d269d":"unscaled_inputs.columns.values","8e33d1cc":"columns_to_omit = ['model_ B Class',\n       'model_ C Class', 'model_ CL Class', 'model_ CLA Class',\n       'model_ CLC Class', 'model_ CLK', 'model_ CLS Class',\n       'model_ E Class', 'model_ G Class', 'model_ GL Class',\n       'model_ GLA Class', 'model_ GLB Class', 'model_ GLC Class',\n       'model_ GLE Class', 'model_ GLS Class', 'model_ M Class',\n       'model_ R Class', 'model_ S Class', 'model_ SL CLASS',\n       'model_ SLK', 'model_ V Class', 'model_ X-CLASS', 'model_180',\n       'model_200', 'model_220', 'model_230', 'transmission_Manual',\n       'transmission_Other', 'transmission_Semi-Auto', 'fuelType_Hybrid',\n       'fuelType_Other', 'fuelType_Petrol']","f82d9b6c":"columns_to_scale = [col for col in unscaled_inputs.columns.values if col not in columns_to_omit]","72ad3b1d":"scaler = CustomScaler(columns_to_scale)","579aa4b0":"scaler.fit(unscaled_inputs)","61f68187":"scaled_inputs = scaler.transform(unscaled_inputs)\nscaled_inputs","6cf3379f":"target = df_model_mod[\"price\"]\nX_train, X_test, y_train, y_test = train_test_split(scaled_inputs, target, train_size=0.8, random_state=20)","c3506e62":"reg = LinearRegression()","32c1a03b":"reg.fit(X_train, y_train)","81376929":"y_pred = reg.predict(X_test)","66d66e3a":"feature_names = unscaled_inputs.columns.values","ec08f4e1":"reg_summary = pd.DataFrame(columns=[\"Feature name\"], data=feature_names)\nreg_summary[\"Coefficient\"] = np.transpose(reg.coef_)\nreg_summary","f05f9897":"reg_summary.index = reg_summary.index + 1\nreg_summary.loc[0] = [\"Intercept\", reg.intercept_] # Intercept of the Model is at index 0\nreg_summary = reg_summary.sort_index()\nreg_summary","8ce6203c":"from sklearn.metrics import mean_squared_error, r2_score","f9bb74fe":"RMSE = mean_squared_error(y_test, y_pred, squared=False)\nR2 = r2_score(y_test, y_pred)\nmodel_accuracy = pd.DataFrame([RMSE, R2], index=[\"Root-Mean-Squared-Error\", \"R^2\"])\nmodel_accuracy","befb1f15":"## Year vs Price","1a66dadc":"## Descriptive Statistics","3d1bcca8":"## Load the Data","e645647e":"# Model Evaluation and Testing","c04fcfc4":"# Regression Summary","c0b290ff":"## Checking for missing values","4ef40855":"#### We can see from the scatter plot the higher the engine size the greater the price; nevertheless, there exists a bunch of outliers.","dcc3f232":"### A custom scaler is used to avoid scaling dummy variables (Categorical data) by sending the columns to be scaled. ","894076e7":"# Training the Model","7d35d633":"### Engine Size vs Price","295b1b9e":"#### As we can see the categorical features are model, transmission, and fuelType.","1e3c59d4":"# Relevant libraries","9bbdeed8":"### Z-score formula\n\n### $z=\\frac{x-\\mu}{\\sigma}$\n\n#### where x, $\\mu$, and $\\sigma$ are the data entry, mean, and standard deviation respectively.","0fee1db4":"# Data Cleaning and Manipulation","a676d525":"### Z-score method helps us identify outliers by calculating the z-score of each data entry and comparing it by a threshold. Here we will be taking a threshold of 3 standard deviations. If it is greater than 3 then it is a outlier thus removing it.","bd8b123f":"## Standardization","b0fd92dd":"###### There are indeed some outliers as shown from this distribution.","583005a1":"## Dealing with Categorical Data","81d4e81b":"### There is indeed room for improvement, but a R^2 of about 75% is not too bad in predicting the price of Mercedes cars in general.","72d32c5f":"# Split Training & Test Dataset","6f459b03":"## Correlation","fcd4217b":"#### As shown above naturally the newer the year of make the greater the price.","25013f72":"#### We can see a significant positive correlation between price and engineSize & between price and year.","116a4576":"## Dealing with outliers using Z-score method","740ebba4":"### Price KDE","637e3955":"# Preliminary Data Exploration","97b9cbc7":"###### One can see a huge disparity between the 3rd Quartile and the maximum value in the price column, which means there are potential outliers."}}