{"cell_type":{"f4ec56bc":"code","e29de24a":"code","c5d0a012":"code","9d649ba2":"code","50553acb":"code","6e4929bc":"code","78d3c29a":"code","f4fec94f":"code","9017aba7":"code","9341aae3":"code","3e78136a":"code","fd082d68":"code","f6971e1e":"code","19e93333":"code","865dd901":"code","649b0199":"markdown","040ee637":"markdown","bc5161be":"markdown","9a75ea59":"markdown"},"source":{"f4ec56bc":"# Getting a dataset file\n!wget https:\/\/storage.googleapis.com\/tensorflow\/tf-keras-datasets\/jena_climate_2009_2016.csv.zip\n#Unziping\n!unzip jena_climate_2009_2016.csv.zip","e29de24a":"import pandas as pd\n\n#Openning the dataset and setting date as index\ndf = pd.read_csv(\"jena_climate_2009_2016.csv\")\ndf = df.set_index('Date Time')\ndf.index = pd.to_datetime(df.index, format='%d.%m.%Y %H:%M:%S')\ndf.info()","c5d0a012":"# Dataset has data for every 10 minutes and they don't change so quickly\n# Grouping by month\ndf = df.groupby(pd.Grouper(freq='m')).mean()\ndf.head()","9d649ba2":"import matplotlib.pyplot as plt\n\n#Ploting temperature in Celsius degrees\nprint(\"Number of measurements: \"+str(len(df['T (degC)'])))\ndf.plot(y='T (degC)', rot=25);","50553acb":"dftm = df['T (degC)']","6e4929bc":"import numpy as np\n\n# Spliting the last 2 years for test\ntrain = dftm[:6*12].values\nplt.plot(np.arange(len(train)),train)\ntrain = train.reshape((len(train), 1))\ntest = dftm[6*12:].values\nplt.plot(np.arange(len(train), len(train)+len(test)),test)\ntest = test.reshape((len(test), 1))\n#plt.plot(np.arange(len(df3d)),df3d)","78d3c29a":"from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n\n# Using 2 years as features\nlength = 12\ngenerator = TimeseriesGenerator(train,train,length=length, batch_size=1)#, sampling_rate=6\n\nvalidation_generator = TimeseriesGenerator(test,test,length=length, batch_size=1)","f4fec94f":"#Sample of a train series\nprint(train[:length+1])","9017aba7":"# Looking some TimeSeriesGenerator results\ni=0\nfor x,y in generator:\n    print(x)\n    print(y)\n    i = i + 1\n    if i == 2:\n        break","9341aae3":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM, GRU\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel = Sequential()\nmodel.add(GRU(10, activation='relu', input_shape=(length,1)))\n#model.add(GRU(20, activation='relu', return_sequences=True, input_shape=(length,1)))\n#model.add(GRU(10, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer='adam', loss='mse')\nmodel.summary()","3e78136a":"# Trainning the model\nepochs = 20\nearly_stop = EarlyStopping(monitor='val_loss',patience=10)\nckpt = ModelCheckpoint('model.hdf5', save_best_only=True, monitor='val_loss', verbose=1)\nhistory = model.fit_generator(\n    generator,\n    steps_per_epoch=len(generator),\n    epochs=epochs,\n    validation_data=validation_generator,\n    callbacks=[early_stop, ckpt])","fd082d68":"history_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\n\nepochs_x = range(1, len(loss_values) + 1)\nplt.figure(figsize=(5,5))\n#plt.subplot(2,1,1)\nplt.plot(epochs_x, loss_values, 'bo', label='Training loss')\nplt.plot(epochs_x, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation Loss and Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\n#plt.legend()\nplt.xlabel('Epochs')\nplt.ylabel('Acc')\nplt.legend()\nplt.show()","f6971e1e":"# Load the best model\nmodel.load_weights(\"model.hdf5\")\n\n# Predicting some days ahead.\ntest_predictions = []\nfirst_eval_batch = train[-length:]\ncurrent_batch = first_eval_batch.reshape((1, length, 1))\nfor i in range(len(test)):\n    # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n    current_pred = model.predict(current_batch)[0]\n    # store prediction\n    test_predictions.append(current_pred)\n    # update batch to now include prediction and drop first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n#prediction = scaler.inverse_transform(test_predictions)","19e93333":"# Comparing test data and predictions\nplt.plot(np.arange(len(train)), train)\nplt.plot(np.arange(len(train),len(train)+len(test)),test)\nplt.plot(np.arange(len(train),len(train)+len(test)),test_predictions)","865dd901":"# Calculating the mean squared error\nloss = np.mean(np.square(test[:,0] - np.array(test_predictions)[:,0]), axis=-1)\nprint(\"mse: \"+str(loss))","649b0199":"Openning the dataset with pandas for exploratory analysis.","040ee637":"# Evaluating","bc5161be":"# Creating the model.","9a75ea59":"# Loading a dataset\n\nIn this example, we are using the Jena Climate dataset recorded by the Max Planck Institute for Biogeochemistry."}}