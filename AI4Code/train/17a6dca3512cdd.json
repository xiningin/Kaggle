{"cell_type":{"8bf0e679":"code","4b024a7e":"code","729c5ae8":"code","9d9d8e1b":"code","8feb7b32":"code","3cc79008":"code","0db7ecc4":"code","36637c78":"code","3bf52859":"code","7547abc0":"code","1ee8d797":"code","89471db1":"code","ae49bc46":"code","55fa4815":"code","c6b3125f":"code","aa743802":"code","cdedebf3":"code","8ec5568e":"code","3c18efbc":"code","dcd11e15":"markdown"},"source":{"8bf0e679":"import os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\n\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout,MaxPooling2D , Conv2D,Flatten\nfrom tensorflow.keras.models import Sequential\n\nfrom sklearn.metrics import classification_report\n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport cv2\nimport numpy as np # linear algebra\nimport pandas as pd\n# import glob\n","4b024a7e":"train_dir=\"..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/train\"\ntest_dir=\"..\/input\/covid19-xray-dataset-train-test-sets\/xray_dataset_covid19\/test\"","729c5ae8":"classes=os.listdir(train_dir)\nprint(classes)","9d9d8e1b":"data_num=[0,0]\nfor cl in classes:\n    data_num[0]+=len(os.listdir(os.path.join(train_dir,cl)))\n    data_num[1]+=len(os.listdir(os.path.join(test_dir,cl)))","8feb7b32":"plt.figure(figsize=(15, 10))\nplt.pie(x=np.array([x for x in data_num]), autopct=\"%.1f%%\", explode=[0.1, 0.1], labels=[\"Training Data\", \"Test Data\"], pctdistance=0.5)\nplt.title(\"Share of train and test images\", fontsize=14);","3cc79008":"count={}\nfor x in classes:\n    num=len(os.listdir(os.path.join(train_dir,x)))\n    count[x]=num","0db7ecc4":"plt.figure(figsize=(5,3))\nplt.bar(list(count.keys()), list(count.values()), width=0.4,align=\"center\" )\nplt.xticks(rotation=90)\n\nplt.xlabel(\"Type of Diagnosis\")\nplt.ylabel(\"Number of Diagnosed\")\nplt.show()","36637c78":"IMG_WIDTH=180\nIMG_HEIGHT=180\n\nIMG_SHAPE=(IMG_HEIGHT,IMG_WIDTH)\n\nBATCH_SIZE=16\n\nseed=69\n\nINPUT_SHAPE=(IMG_HEIGHT,IMG_WIDTH,3)","3bf52859":"train_set=image_dataset_from_directory(\n    train_dir,\n    label_mode=\"categorical\",\n    batch_size=BATCH_SIZE,\n    image_size=IMG_SHAPE,\n    shuffle=True,\n    seed=seed,\n    validation_split=0.2,\n    subset=\"training\",\n)\n\nval_set=image_dataset_from_directory(\n    train_dir,\n    label_mode=\"categorical\",\n    batch_size=BATCH_SIZE,\n    image_size=IMG_SHAPE,\n    shuffle=True,\n    seed=seed,\n    validation_split=0.2,\n    subset=\"validation\",\n)\n\ntest_set=image_dataset_from_directory(\n    test_dir,\n    label_mode=\"categorical\",\n    class_names=None,\n    batch_size=BATCH_SIZE,\n    image_size=IMG_SHAPE,\n    shuffle=False,\n    seed=seed,\n)","7547abc0":"def create_model():\n  model = Sequential()\n\n  model.add(Conv2D(32, (3, 3), activation=\"relu\",input_shape=INPUT_SHAPE))\n  model.add(MaxPooling2D(pool_size=(2, 2)))\n\n  model.add(Conv2D(64, (3, 3), activation=\"relu\"))\n  model.add(MaxPooling2D(pool_size=(2, 2)))\n  \n  model.add(Conv2D(128, (3, 3), activation=\"relu\"))\n  model.add(MaxPooling2D(pool_size=(2, 2)))  \n\n  model.add(GlobalAveragePooling2D())\n\n  model.add(Dense(64, activation = 'relu'))\n\n  model.add(Dense(2, activation='sigmoid'))\n\n  model.summary()\n  \n  return model","1ee8d797":"model=create_model()","89471db1":"EPOCH=50\nSTEPS=8\n\nmodel.compile(optimizer=\"adam\", loss='categorical_crossentropy', metrics=[\"accuracy\"])\n\ncallback = tf.keras.callbacks.EarlyStopping(monitor='accuracy', patience=8)\nhistory = model.fit(train_set, validation_data=val_set, steps_per_epoch = STEPS, epochs=EPOCH,callbacks=callback)\n","ae49bc46":"accuracy = history.history['accuracy']\nval_accuracy  = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']","55fa4815":"plt.figure(figsize=(15,10))\n\nplt.subplot(2, 2, 1)\nplt.plot(accuracy, label = \"Training accuracy\")\nplt.plot(val_accuracy, label=\"Validation accuracy\")\nplt.legend()\nplt.title(\"Training vs Validation accuracy\")\n\n\nplt.subplot(2,2,2)\nplt.plot(loss, label = \"Training loss\")\nplt.plot(val_loss, label=\"Validation loss\")\nplt.legend()\nplt.title(\"Training vs Validation loss\")\n\nplt.show()","c6b3125f":"y_pred = np.array([])\ny_true =  np.array([])\n\nfor x, y in test_set:\n  y_pred = np.concatenate([y_pred, np.argmax(model.predict(x), axis = -1)])\n  y_true = np.concatenate([y_true, np.argmax(y.numpy(), axis=-1)])","aa743802":"print(classification_report(y_true, y_pred))","cdedebf3":"results = model.evaluate(test_set)","8ec5568e":"def plot_confusion_matrix(mat, target_names, title='Confusion Matrix', cmap=None):\n    accuracy = np.trace(mat) \/ float(np.sum(mat))\n    misclass = 1 - accuracy\n    \n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(mat, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    \n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.grid('off')\n    plt.show()","3c18efbc":"from sklearn.metrics import confusion_matrix\n\nmat = confusion_matrix(y_true, y_pred)\n\nplot_confusion_matrix(mat, test_set.class_names)","dcd11e15":"**TEST ACCURACY = 100.00%**"}}