{"cell_type":{"43e15db6":"code","3d8e9fb1":"code","5bd4a1bd":"code","55ec161c":"code","7fdec769":"code","1bd7e438":"code","7d4f03f4":"code","3a8b243d":"code","b88815d7":"code","fb0df18f":"code","1cde568f":"code","cd38f9cd":"code","911e62e4":"code","88a6791f":"code","d448988b":"code","20b998c0":"code","ebd3fd4f":"code","10d2a15f":"code","2e7832cc":"code","692499cb":"code","9a9792fa":"code","e1ceee06":"code","6338d639":"code","e9f7916d":"code","66f18464":"code","05a484d8":"code","a1f80a24":"code","0d928e63":"code","949e4b32":"code","ec0ce981":"code","65a6e968":"code","9c2a0853":"code","0982a25d":"code","cae9eb3d":"code","6642075b":"code","7fdee6e3":"code","a23e9a37":"code","ed83ac0c":"code","65326bb3":"code","af7ca901":"code","572f03c1":"code","ac3a2f5a":"code","af47ef33":"code","ea278082":"code","f6699364":"code","1dea6a9a":"code","b7a917fd":"code","553fbf44":"code","014ca386":"code","1513a4bf":"code","f9ed8dee":"code","05295570":"code","d04656d8":"code","4535c085":"code","d3a1f1b1":"code","2e8db678":"code","4e92c6e1":"code","1af55ce1":"code","cdd5010d":"code","37862a4e":"code","c3d767b1":"code","d690d5cd":"code","9d19d2c8":"code","11249b2d":"code","194250cc":"code","8d33f043":"code","3fadc837":"code","e5df183e":"code","3f15ae99":"code","b372b91e":"code","45822a15":"code","6f5d794f":"markdown","d6aeb0dc":"markdown","dd113f76":"markdown","0e0f963e":"markdown","16b06649":"markdown","912b70d9":"markdown","fa1758c1":"markdown","60752284":"markdown","449a76ef":"markdown","6aa9e132":"markdown","8c72010f":"markdown","a556b11f":"markdown","0a4a217d":"markdown","1abebaa2":"markdown","9bc6b60e":"markdown","3d1f9e1a":"markdown","50e6d317":"markdown"},"source":{"43e15db6":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \n\nimport datetime\nimport calendar\nimport matplotlib.dates as mdates\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3d8e9fb1":"def load_data():\n    #Read data from locally stored CSV.  The CSV file is from Kaggle.\n    return pd.read_csv('\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv')","5bd4a1bd":"def create_date_month(df):\n    #Create a month numeric column to be used to create a DateTime\n    d = {'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6,\\\n         'July':7, 'August':8, 'September':9, 'October':10, 'November':11, 'December':12}\n    \n    #Create new column month with int value\n    df['month'] = df.arrival_date_month.map(d)\n    \n    return df","55ec161c":"def create_datetime(df):\n    #Rename arrival_date_year\/month columns to be able to concatenate \n    #them all for a DateTime column\n    df.rename(columns={'arrival_date_year': 'year', \\\n                       'arrival_date_day_of_month': 'day'}, inplace=True)\n\n    #Create datetime value\n    df['arrival_date'] = pd.to_datetime(df[['year', 'month' , 'day']])\n    \n    return df","7fdec769":"def create_day_of_week(df):\n    #Values assigned will be 0-6, with Monday = 0 and Sunday = 6.  \n    #With this logic, the code in the next cell can be used to \n    #create a weekend\/weekday column.\n    df['arrival_day_of_week'] = [x.dayofweek for x in df.arrival_date]\n    \n    return df","1bd7e438":"def is_weekend(df):\n    #Fridays are 5's and Saturdays are 6's.  Where 5 or 6, put a 1 to indicate the arrival\n    #date was on a weekend and put a 0 to indicate it wasn't a weekend.\n    df['arrival_day_is_weekend'] = np.where(df['arrival_day_of_week'] >= 5, 1, 0)\n    \n    return df","7d4f03f4":"def cancel_rate(df):\n    df['cancel_rate'] = df['previous_cancellations'] \/ \\\n    (df['previous_cancellations'] + df['previous_bookings_not_canceled'])\n\n    df['cancel_rate'].fillna(0, inplace=True)\n    \n    return df","3a8b243d":"def total_guests(df):\n    #Replacing 0's with 1's in the adult column on the assumption \n    #that an adult must check in and use the room.\n    df['adults'].replace({0:1}, inplace=True) \n    \n    df['children'].fillna(0, inplace=True)\n    \n    df['total_guests'] = df['adults'] + df['children'] + df['babies']\n    \n    return df","b88815d7":"def total_nights_stay(df):\n    df['total_nights_stay'] = df['stays_in_week_nights'] + df['stays_in_weekend_nights']\n    \n    #Find the rows where total_nights_stay = 0, and the arrival day is not a weekend.\n    #Place a 1 in the stays_in_week_nights column.\n    df.loc[((df['total_nights_stay'] == 0) & (df['arrival_day_is_weekend'] == 0)\\\n              ), 'stays_in_week_nights' ] = 1\n    \n    #Find the rows where total_nights_stay = 0, and the arrival day is a weekend.\n    #Place a 1 in the stays_in_weekend_nights column\n    df.loc[((df['total_nights_stay'] == 0) & (df['arrival_day_is_weekend'] == 1)\\\n              ), 'stays_in_weekend_nights' ] = 1\n    \n    df['total_nights_stay'] = df['stays_in_week_nights'] + df['stays_in_weekend_nights']\n    \n    return df","fb0df18f":"def total_dollar(df):\n    df['total_dollar'] = df['total_nights_stay'] * df['adr']\n    \n    return df","1cde568f":"def total_previous_bookings(df):\n    df['total_previous_bookings'] = \\\n        df['previous_cancellations'] + df['previous_bookings_not_canceled']\n    \n    return df","cd38f9cd":"def change_repeat_customer(df):\n    #Where the customer is listed as a repeated guest, but has no previous bookings\n    #they will be changed to 0.\n    df['is_repeated_guest'] = np.where(df['total_previous_bookings'] == 0\\\n                                , 0, df['is_repeated_guest'])\n    \n    #Where the customer is listed as a first time guest, but has previous bookings\n    #they will be changed to 1.\n    df['is_repeated_guest'] = np.where(df['total_previous_bookings'] > 0\\\n                                , 1, df['is_repeated_guest'])\n    \n    return df","911e62e4":"def no_negative_adr(df):\n    #Change min ADR to 0.  $0 a night is feasible based on a rewards program.\n    #I don't like the thought of a customer receving money for their stay.  \n    #I think that's a data issue.\n    df['adr'] = df['adr'].clip(lower=0.0)\n    \n    return df","88a6791f":"def handle_nulls_subject_to_change(df):\n    df['agent'].fillna(0.0, inplace=True)\n    df['country'].fillna('Unknown', inplace=True)\n    \n    #In the original data, 'company' as 94.3% nulls.\n    #If this is somehow corrected, a new approach \n    #may be needed.\n    df.drop(columns=['company'], inplace=True)\n    \n    return df","d448988b":"def lead_time_bins(df):\n    #Create two columns, bins for the lead time the reservation was made\n\n    #The lead_time_bin will have values with ranges like '10 - 20'\n    lead_time_bin = []\n    lead_time_bin_order_by = []\n\n    for index,row in df.iterrows():\n        #Lead time of 0, will remain 0\n        if row['lead_time'] == 0:\n            lead_time_bin.append(str(row['lead_time']))\n            lead_time_bin_order_by.append(0)\n        \n        #Lead times between 1 and 100 will be binned into 10's (1-10, 11-20, etc.)\n        elif row['lead_time'] <= 100:\n            max_bin = int(np.ceil(row['lead_time'] \/ 10) * 10)\n            min_bin = int(max_bin - 9)\n            lead_time_bin_range = '{} - {}'.format(min_bin, max_bin)\n            lead_time_bin.append(lead_time_bin_range)\n            lead_time_bin_order_by.append(max_bin)\n        \n        #To limit the number of bins, after 100 days lead time,\n        #bins will be grouped into 50 day ranges.\n        elif 100 < row['lead_time'] < 1000:\n            number = row['lead_time'] \/ 100\n            number_int = int(number)\n            number_dec = '.' + str(number - number_int).split('.')[1]\n\n            if float(number_dec) < .5:\n                min_bin = (number_int * 100) + 1\n                max_bin = (number_int * 100) + 50\n                lead_time_bin_range = '{} - {}'.format(min_bin, max_bin)\n                lead_time_bin.append(lead_time_bin_range)\n                lead_time_bin_order_by.append(max_bin)\n\n            elif float(number_dec) >= .5:\n                min_bin = (number_int * 100) + 51\n                max_bin = (number_int + 1) * 100\n                lead_time_bin_range = '{} - {}'.format(min_bin, max_bin)\n                lead_time_bin.append(lead_time_bin_range)\n                lead_time_bin_order_by.append(max_bin)\n\n        else:\n            lead_time_bin.append('?')\n            lead_time_bin_order_by.append(99999)\n\n    df['lead_time_bin'] = lead_time_bin\n    df['lead_time_bin_order_by'] = lead_time_bin_order_by\n    \n    return df","20b998c0":"def create_charge_nocharge(df):\n    #Make a more readable columns to indicate if a customer paid\n    #for the room or did not pay\n    df['charge_no_charge'] = \\\n        df['adr'].apply(lambda x: 'No Charge' if x == 0 else 'Charge')\n    \n    return df","ebd3fd4f":"df=(\n    load_data()\n    .pipe(create_date_month)\n    .pipe(create_datetime)\n    .pipe(create_day_of_week)\n    .pipe(is_weekend)\n    .pipe(cancel_rate)\n    .pipe(total_guests)\n    .pipe(total_nights_stay)\n    .pipe(total_dollar)\n    .pipe(total_previous_bookings)\n    .pipe(change_repeat_customer)\n    .pipe(no_negative_adr)\n    .pipe(handle_nulls_subject_to_change)\n    .pipe(lead_time_bins)\n    .pipe(create_charge_nocharge)\n)\ndf.head().T","10d2a15f":"#Create a new df to house only actual visits\nall_check_ins = df[['hotel', 'arrival_date']][df['reservation_status'] == 'Check-Out']\n\n#Create a column of 1's to use later to aggregate and sum\nall_check_ins['check_in_count'] = 1","2e7832cc":"#Create a year-month column\n#This df is still at transaction\/reservation level\nall_check_ins['year_month'] = \\\n    all_check_ins['arrival_date'].dt.strftime('%Y-%m')\n\nall_check_ins.head(3)","692499cb":"#Aggregate to day level.  There's a value that will be used\n#from this table that we will apply later, so we will not go\n#straight to year-month.\nall_check_ins_by_day = \\\n    all_check_ins[['hotel', 'year_month', 'arrival_date', 'check_in_count']]\\\n        .groupby(['hotel', 'year_month', 'arrival_date'], as_index=False).sum()\n\nall_check_ins_by_day.head(3)","9a9792fa":"#A new df to aggregate to year-month\n#With results spanning 26 consecutive months, \n#this is a good solution for visualizations.\nall_check_ins_by_year_month = \\\n    all_check_ins_by_day[['hotel', 'year_month', 'check_in_count']]\\\n        .groupby(['hotel', 'year_month',], as_index=False).sum()\n\nall_check_ins_by_year_month.head(3)","e1ceee06":"#Creating a new dataframe to house rows where the customer is listed\n#as 'Check-Out', indicating that they did occupy a room during their stay.\narrival_dates_customers_stayed = \\\n    df[['hotel', 'arrival_date', 'total_nights_stay', 'adr', 'total_guests']]\\\n    [df['reservation_status'] == 'Check-Out'].reset_index()\n\n#We will use the index as a customer\/reservation number since each row is a single\n#record of some customer's stay.  We don't have something to indicate\n#that a set of transactions belong to a single customer.\narrival_dates_customers_stayed.rename(columns={'index':'cust_num'}, inplace=True)\n\ndisplay(arrival_dates_customers_stayed.head())\n\ndisplay(arrival_dates_customers_stayed.tail())","6338d639":"#Empty dataframe to house new data that will contain a row\n#for each night a guest stayed during their reservation\nall_dates = pd.DataFrame(columns=['cust_num','room_filled_dates'])\n\n#In this code, we are taking each observation from the hotel check-in \n#data and creating a row for each night that the guest stayed in the hotel.\n#We are using a a timedelta function and taking a day off of that.\n#We are doing this so we do not count the check-out date as\n#a night that a room was occupied.  This approach is being used\n#because simply applying all nights stayed to the month containing\n#the arrival date could lead to nights stayed applied to the incorrect\n#month based on the fact that some guests will check-in during one month,\n#stay a few nights, and check-out the next month.\n\nfor index, row in arrival_dates_customers_stayed.iterrows():\n    #This creates a date range for a customer's stay where \n    date_range = pd.DataFrame(pd.date_range(row['arrival_date'],\n                                row['arrival_date'] + \\\n                                datetime.timedelta(days=row['total_nights_stay'] - 1)), \\\n                                  columns=['room_filled_dates'])\n\n    date_range.insert(loc=0, column='cust_num', value=row['cust_num'])\n    \n    all_dates = pd.concat([all_dates, date_range])","e9f7916d":"#Create a column that has only 1's in it.  These can be used\n#when grouping by time intervals by summing to get a count of\n#the number of rooms occupied for the night\/month\/etc.\nall_dates['room_occupied'] = 1\ndisplay(all_dates.head())","66f18464":"#cust_num is an object in all_dates, changing to int to help the join coming up\nall_dates['cust_num']= all_dates['cust_num'].astype(str).astype(int)","05a484d8":"#all_dates df now has a row for each night a customer stays.  We will left\n#join to bring in values like 'adr'.\nall_dates = all_dates.merge\\\n        (arrival_dates_customers_stayed[['cust_num', 'hotel', 'total_nights_stay', 'adr', 'total_guests']]\\\n        ,how='left' ,left_on='cust_num', right_on='cust_num', validate='many_to_one')","a1f80a24":"#These are the dates for check-ins.  We will adjust the date range\n#used in room occupancy with the thought that rooms may be occupied\n#by guests that arrived prior to 2015-07-01.  Additionally, guests\n#arriving near the end of our date range will show as occupying a\n#a room, but new guests will not be visible.\nprint(df.arrival_date.min())\nprint(df.arrival_date.max())","0d928e63":"mask = (all_dates['room_filled_dates'] > '2015-07-07') \\\n    & (all_dates['room_filled_dates'] <= '2017-08-31')","949e4b32":"all_dates = all_dates.loc[mask]\n\n#Verifying date range has changed:\nprint(all_dates.room_filled_dates.min())\nprint(all_dates.room_filled_dates.max())","ec0ce981":"#To verify, below are the first 5 rows for customers that show as 'Check-Out'\n#in the original dataframe, which we will compare to the new all_dates dataframe.\n#The index below is what is used as 'cust_num' in all_dates.  Notice that the first \n#4 rows (0-3 index) show a single night stay, while the fifth (index 4), shows 2 nights.\ndisplay(df[['arrival_date', 'total_nights_stay', 'adr', 'hotel']]\\\n    [df['reservation_status'] == 'Check-Out'].head())\n\ndisplay(df[['arrival_date', 'total_nights_stay', 'adr', 'hotel']]\\\n    [df['reservation_status'] == 'Check-Out'].tail(2))","65a6e968":"#As noted above, cust_num 4 now has 2 rows\n#Additionally, in the tail, we see the customer that stayed 9 nights.\ndisplay(all_dates.head(10))\ndisplay(all_dates.tail(10))","9c2a0853":"all_hotel_visits_by_day = \\\n    all_dates[['hotel', 'room_filled_dates', 'room_occupied', 'adr', 'total_guests']]\\\n    .groupby(['hotel', 'room_filled_dates'], as_index=False).sum()","0982a25d":"#Creating a year-month combo to use for visualizations\nall_hotel_visits_by_day['year_month'] = \\\n    all_hotel_visits_by_day['room_filled_dates'].dt.strftime('%Y-%m')","cae9eb3d":"#We are working with 2 different hotels, without details like the \n#amount of rooms available.  We are going to use our best estimate\n#for the number of available rooms.  We will aggregate the count\n#of rooms occupied for each night.  The day with the most rooms\n#being used will be used as our proxy for the max amount of rooms\n#in each hotel.\n\nresort_max_occ = all_hotel_visits_by_day['room_occupied']\\\n    [all_hotel_visits_by_day['hotel'] == 'Resort Hotel'].max()\n\ncity_max_occ = all_hotel_visits_by_day['room_occupied']\\\n    [all_hotel_visits_by_day['hotel'] == 'City Hotel'].max()\n\nprint('Max Resort Occ: {} -- Max City Occ: {}'.format(resort_max_occ, city_max_occ))","6642075b":"#We will now apply each max amount to each row by hotel.\n\nmax_occ_vals = []\n\nfor index,row in all_hotel_visits_by_day.iterrows():\n    if row['hotel'] == 'City Hotel':\n        max_occ_vals.append(city_max_occ)\n    else:\n        max_occ_vals.append(resort_max_occ)\n        \nall_hotel_visits_by_day['max_daily_occ'] = max_occ_vals\n    \nall_hotel_visits_by_day.head(2)","7fdee6e3":"#Grouping the sum of rooms occupied by year-month\nall_hotel_visits_by_month = \\\n    all_hotel_visits_by_day[['hotel', 'year_month', 'adr', 'room_occupied','max_daily_occ', 'total_guests']]\\\n    .groupby(['hotel', 'year_month'], as_index=False).sum()\ndisplay(all_hotel_visits_by_month.head(3))\ndisplay(all_hotel_visits_by_month.tail(3))","a23e9a37":"#You might have figured out where we're headed by now...\nall_hotel_visits_by_month['occ_rate'] = \\\n    all_hotel_visits_by_month['room_occupied'] \/ all_hotel_visits_by_month['max_daily_occ']\n\nall_hotel_visits_by_month.head(2)","ed83ac0c":"plt.figure(figsize=(35,8))\nplt.xticks(fontsize=20, rotation=60)\nplt.yticks(fontsize=30)\nplt.xlabel('Year-Month of Data Collection', fontsize=30)\nplt.ylabel('Number of Check-Ins', fontsize=30)\nplt.title('Check-Ins by Year-Month', fontsize=60)\n\nplt.plot('year_month', 'check_in_count', \\\n         data=all_check_ins_by_year_month[all_check_ins_by_year_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=4, linestyle='dashed', label='City: Check-In')\nplt.plot('year_month', 'check_in_count', \\\n         data=all_check_ins_by_year_month[all_check_ins_by_year_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=4, linestyle='dashed', label='Resort: Check-In')\n\nplt.legend(prop={'size':30})","65326bb3":"plt.figure(figsize=(35,14))\nplt.xticks(fontsize=20, rotation=60)\nplt.yticks(fontsize=30)\nplt.xlabel('Year-Month of Data Collection', fontsize=30)\nplt.ylabel('Number of Check-Ins\/Rooms Occupied', fontsize=30)\nplt.title('Check-Ins and Rooms Occupied by Year-Month', fontsize=60)\n\nplt.plot('year_month', 'room_occupied', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=6, marker='o', markersize=12, label='City: Room Occ')\nplt.plot('year_month', 'room_occupied', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=6, marker='o', markersize=12, label='Resort: Room Occ')\n\nplt.plot('year_month', 'check_in_count', \\\n         data=all_check_ins_by_year_month[all_check_ins_by_year_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=4, linestyle='dashed', label='City: Check-In')\nplt.plot('year_month', 'check_in_count', \\\n         data=all_check_ins_by_year_month[all_check_ins_by_year_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=4, linestyle='dashed', label='Resort: Check-In')\n\nplt.legend(prop={'size':30})","af7ca901":"plt.figure(figsize=(35,14))\nplt.xticks(fontsize=20, rotation=60)\nplt.yticks(fontsize=30)\nplt.title('Occupancy Rate by Year-Month', fontsize=60)\n\nplt.plot('year_month', 'occ_rate', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=6, marker='o', markersize=12, label='City')\nplt.plot('year_month', 'occ_rate', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=6, marker='o', markersize=12, label='Resort')\nplt.legend(loc='lower right', prop={'size':40})","572f03c1":"plt.figure(figsize=(35,14))\nplt.xticks(fontsize=20, rotation=60)\nplt.yticks(fontsize=30)\nplt.xlabel('Year-Month of Data Collection', fontsize=30)\nplt.ylabel('Revenue $ in Millions', fontsize=30)\nplt.title('Revenue $ by Year-Month', fontsize=60)\n\nplt.plot('year_month', 'adr', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=6, marker='o', markersize=12, label='City: Room $')\nplt.plot('year_month', 'adr', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=6, marker='o', markersize=12, label='Resort: Room $')\n\nplt.legend(prop={'size':30})","ac3a2f5a":"plt.figure(figsize=(35,14))\nplt.xticks(fontsize=20, rotation=60)\nplt.yticks(fontsize=30)\nplt.xlabel('Year-Month of Data Collection', fontsize=30)\nplt.ylabel('Number of Guests', fontsize=30)\nplt.title('Total Guests by Year-Month', fontsize=60)\n\nplt.plot('year_month', 'total_guests', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='City Hotel']\\\n         , color='skyblue', linewidth=6, marker='o', markersize=12, label='City: Room $')\nplt.plot('year_month', 'total_guests', \\\n         data=all_hotel_visits_by_month[all_hotel_visits_by_month['hotel']=='Resort Hotel']\\\n         , color='r', linewidth=6, marker='o', markersize=12, label='Resort: Room $')\n\nplt.legend(prop={'size':30})","af47ef33":"#Create a df to aggregate count of reservations by hotel, cancel\/stay, and bins\ndf_lead_time_bins = \\\n    df[['hotel', 'is_canceled', 'lead_time_bin', 'lead_time_bin_order_by', 'lead_time']]\\\n    .groupby(['hotel', 'is_canceled', 'lead_time_bin', 'lead_time_bin_order_by'])\\\n    .count().reset_index()\n\ndf_lead_time_bins.rename(columns={'lead_time':'res_count'}, inplace=True)\n\n#Change values from 0,1 to Stayed,Canceled\ndf_lead_time_bins['is_canceled'] = \\\n    df_lead_time_bins['is_canceled'].apply(lambda x: 'Canceled' if x == 1 else 'Stayed')\n\ndf_lead_time_bins.head()","ea278082":"#Create a df to house total reservation counts by hotel and bin,\n#used to left join to agg table above in order to get percentages\nlead_time_bin_counts = df_lead_time_bins[['hotel', 'lead_time_bin', 'res_count']]\\\n    .groupby(['hotel', 'lead_time_bin'], as_index=False).sum()\n\nlead_time_bin_counts.rename(columns={'res_count':'res_count_bin'}, inplace=True)\n\nlead_time_bin_counts.head(2)","f6699364":"df_lead_time_bins= df_lead_time_bins.merge(lead_time_bin_counts, \\\n        on=['hotel', 'lead_time_bin'], how='left', validate='many_to_one')","1dea6a9a":"df_lead_time_bins['count_perc'] = \\\n    df_lead_time_bins['res_count'] \/ df_lead_time_bins['res_count_bin']","b7a917fd":"df_lead_time_bins =\\\n    df_lead_time_bins.sort_values(by=['hotel', 'lead_time_bin_order_by', 'is_canceled'])\n\ndf_lead_time_bins.head(6)","553fbf44":"df_lead_time_bins_resort = df_lead_time_bins\\\n    [(df_lead_time_bins.lead_time_bin_order_by < 500) \\\n     & (df_lead_time_bins.hotel == 'Resort Hotel')]\ndf_lead_time_bins_resort.head(4)","014ca386":"df_lead_time_bins_city = df_lead_time_bins\\\n    [(df_lead_time_bins.lead_time_bin_order_by < 600) \\\n     & (df_lead_time_bins.hotel == 'City Hotel')]\n\ndf_lead_time_bins_city.head(4)","1513a4bf":"#Values for resort\n#Check-Out\nx_checkout_resort = [label_bin for label_bin, df in \\\n              df_lead_time_bins_resort\\\n              [df_lead_time_bins_resort.is_canceled == 'Stayed']\\\n             .groupby('lead_time_bin_order_by')]\n    \ncheckout_vals_resort = df_lead_time_bins_resort['count_perc']\\\n        [df_lead_time_bins_resort.is_canceled == 'Stayed']\n\n#Canc:\nx_canc_resort = [label_bin for label_bin, df in \\\n              df_lead_time_bins_resort\\\n                [df_lead_time_bins_resort.is_canceled == 'Canceled']\\\n             .groupby('lead_time_bin_order_by')]\n    \ncanc_vals_resort = df_lead_time_bins_resort['count_perc']\\\n        [df_lead_time_bins_resort.is_canceled == 'Canceled']","f9ed8dee":"#Values for City\n#Check-Out\nx_checkout_city = [label_bin for label_bin, df in \\\n              df_lead_time_bins_city\\\n              [df_lead_time_bins_city.is_canceled == 'Stayed']\\\n             .groupby('lead_time_bin_order_by')]\n    \ncheckout_vals_city = df_lead_time_bins_city['count_perc']\\\n        [df_lead_time_bins_city.is_canceled == 'Stayed']\n\n#Canc:\nx_canc_city = [label_bin for label_bin, df in \\\n              df_lead_time_bins_city\\\n                [df_lead_time_bins_city.is_canceled == 'Canceled']\\\n             .groupby('lead_time_bin_order_by')]\n    \ncanc_vals_city = df_lead_time_bins_city['count_perc']\\\n        [df_lead_time_bins_city.is_canceled == 'Canceled']","05295570":"line_perc_df_resort = \\\n    df_lead_time_bins_resort[['lead_time_bin_order_by', 'lead_time_bin', 'res_count']]\\\n    .groupby(['lead_time_bin_order_by', 'lead_time_bin']).sum().reset_index()\n\nline_perc_df_resort['total_res_count'] = line_perc_df_resort['res_count'].sum()\n\nline_perc_df_resort['bin_perc_of_res'] = \\\n    line_perc_df_resort['res_count'] \/ line_perc_df_resort['total_res_count']\n\nline_perc_df_resort.head(3)","d04656d8":"line_perc_df_city = \\\n    df_lead_time_bins_city[['lead_time_bin_order_by', 'lead_time_bin', 'res_count']]\\\n    .groupby(['lead_time_bin_order_by', 'lead_time_bin']).sum().reset_index()\n\nline_perc_df_city['total_res_count'] = line_perc_df_city['res_count'].sum()\n\nline_perc_df_city['bin_perc_of_res'] = \\\n    line_perc_df_city['res_count'] \/ line_perc_df_city['total_res_count']\n\nline_perc_df_city.head(3)","4535c085":"x_tick_labels_resort = line_perc_df_resort['lead_time_bin']","d3a1f1b1":"x_tick_labels_city = line_perc_df_city['lead_time_bin']","2e8db678":"width = 6\nplt.figure(figsize=(12, 4))\n\np1 = plt.bar(x_canc_resort, canc_vals_resort, width=width, bottom=checkout_vals_resort)\np2 = plt.bar(x_checkout_resort, checkout_vals_resort, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.xlabel('Number of Days Reservation is Made Prior to Check-In')\nplt.xticks(ticks=x_checkout_resort, labels=x_tick_labels_resort, rotation='vertical')\nplt.title('Resort Stay\/Cancel Ratios')\n\nx_resort = x_canc_resort\ny_resort = line_perc_df_resort['res_count']\naxes2 = plt.twinx()\naxes2.plot(x_resort, y_resort, color='k')\naxes2.set_ylabel('Number of Reservations')\n\nplt.legend((p1[0], p2[0]), ('Canceled', 'Check-Out'), loc=0)\n\nplt.show()","4e92c6e1":"width = 6\nplt.figure(figsize=(12, 4))\n\np1 = plt.bar(x_canc_city, canc_vals_city, width=width, bottom=checkout_vals_city)\np2 = plt.bar(x_checkout_city, checkout_vals_city, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.xlabel('Number of Days Reservation is Made Prior to Check-In')\nplt.xticks(ticks=x_checkout_city, labels=x_tick_labels_city, rotation='vertical')\nplt.title('City Stay\/Cancel Ratios')\n\nx_city = x_canc_city\ny_city = line_perc_df_city['res_count']\naxes2 = plt.twinx()\naxes2.plot(x_city, y_city, color='k')\naxes2.set_ylabel('Number of Reservations')\n\nplt.legend((p1[0], p2[0]), ('Canceled', 'Check-Out'), loc=0)\n\nplt.show()","1af55ce1":"low_adr_grouped = df[['hotel', 'charge_no_charge', 'is_canceled','lead_time']]\\\n    .groupby(['hotel', 'charge_no_charge', 'is_canceled']).count().reset_index()\n\nlow_adr_grouped.rename(columns={'lead_time':'res_count'}, inplace=True)\n\n#Change values from 0,1 to Stayed,Canceled\nlow_adr_grouped['is_canceled'] = \\\n    low_adr_grouped['is_canceled'].apply(lambda x: 'Did Not Stay' if x == 1 else 'Checked-In')\n\nlow_adr_grouped","cdd5010d":"totals_low_adr = low_adr_grouped[['hotel', 'charge_no_charge', 'res_count']]\\\n    .groupby(['hotel', 'charge_no_charge']).sum().reset_index()\n\ntotals_low_adr.rename(columns={'res_count':'group_res_count'}, inplace=True)\n\ntotals_low_adr","37862a4e":"low_adr_grouped = low_adr_grouped.merge(totals_low_adr, \\\n        on=['hotel', 'charge_no_charge'], how='left', validate='many_to_one')\n\nlow_adr_grouped['res_percent'] = \\\n    low_adr_grouped['res_count'] \/ low_adr_grouped['group_res_count']\n\nlow_adr_grouped","c3d767b1":"#Values for Resort\n#Checked-in\nx_checked_in_resort = [label_bin for label_bin, df in \\\n              low_adr_grouped\\\n              [(low_adr_grouped.is_canceled == 'Checked-In')\\\n              & (low_adr_grouped.hotel == 'Resort Hotel')]\\\n             .groupby('charge_no_charge')]\n    \nchecked_in_vals_resort = low_adr_grouped['res_percent']\\\n        [(low_adr_grouped.hotel == 'Resort Hotel')\\\n        & (low_adr_grouped.is_canceled == 'Checked-In')]\n\n#Did not Check-in\nx_not_checked_in_resort = [label_bin for label_bin, df in \\\n              low_adr_grouped\\\n              [(low_adr_grouped.is_canceled == 'Did Not Stay')\\\n              & (low_adr_grouped.hotel == 'Resort Hotel')]\\\n             .groupby('charge_no_charge')]\n    \nnot_checked_in_vals_resort = low_adr_grouped['res_percent']\\\n        [(low_adr_grouped.hotel == 'Resort Hotel')\\\n        & (low_adr_grouped.is_canceled == 'Did Not Stay')]","d690d5cd":"#Values for City\n#Checked-in\nx_checked_in_city = [label_bin for label_bin, df in \\\n              low_adr_grouped\\\n              [(low_adr_grouped.is_canceled == 'Checked-In')\\\n              & (low_adr_grouped.hotel == 'City Hotel')]\\\n             .groupby('charge_no_charge')]\n    \nchecked_in_vals_city = low_adr_grouped['res_percent']\\\n        [(low_adr_grouped.hotel == 'City Hotel')\\\n        & (low_adr_grouped.is_canceled == 'Checked-In')]\n\n#Did not Check-in\nx_not_checked_in_city = [label_bin for label_bin, df in \\\n              low_adr_grouped\\\n              [(low_adr_grouped.is_canceled == 'Did Not Stay')\\\n              & (low_adr_grouped.hotel == 'City Hotel')]\\\n             .groupby('charge_no_charge')]\n    \nnot_checked_in_vals_city = low_adr_grouped['res_percent']\\\n        [(low_adr_grouped.hotel == 'City Hotel')\\\n        & (low_adr_grouped.is_canceled == 'Did Not Stay')]","9d19d2c8":"width = .4\nplt.figure(figsize=(6, 4))\n\np1 = plt.bar(x_not_checked_in_resort, not_checked_in_vals_resort, \\\n             width=width, bottom=checked_in_vals_resort)\np2 = plt.bar(x_checked_in_resort, checked_in_vals_resort, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.title('Resort Stay\/No-Stay Ratio Based on Charges')\n\nplt.legend((p1[0], p2[0]), ('Did Not Stay', 'Stayed'), loc=9)\n\nplt.show()","11249b2d":"width = .4\nplt.figure(figsize=(6, 4))\n\np1 = plt.bar(x_not_checked_in_city, not_checked_in_vals_city, \\\n             width=width, bottom=checked_in_vals_city)\np2 = plt.bar(x_checked_in_city, checked_in_vals_city, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.title('City Stay\/No-Stay Ratio Based on Charges')\n\nplt.legend((p1[0], p2[0]), ('Did Not Stay', 'Stayed'), loc=9)\n\nplt.show()","194250cc":"deposit_df = df[['hotel', 'is_canceled', 'deposit_type', 'lead_time']]\\\n    [df['deposit_type'] != 'Refundable']\\\n    .groupby(['hotel', 'is_canceled', 'deposit_type']).count().reset_index()\n\ndeposit_df.rename(columns={'lead_time':'res_count'}, inplace=True)\n\ndeposit_df['is_canceled'] = \\\n    deposit_df['is_canceled'].apply(lambda x: 'Did Not Stay' if x == 1 else 'Checked-In')\n","8d33f043":"deposit_df_grouped = deposit_df[['hotel', 'deposit_type', 'res_count']]\\\n    .groupby(['hotel', 'deposit_type']).sum().reset_index()\n\ndeposit_df_grouped.rename(columns={'res_count':'group_res_count'}, inplace=True)\n\ndeposit_df_grouped","3fadc837":"deposit_df = deposit_df.merge(deposit_df_grouped, \\\n        on=['hotel', 'deposit_type'], how='left', validate='many_to_one')\n\ndeposit_df['res_percent'] = \\\n    deposit_df['res_count'] \/ deposit_df['group_res_count']\n\ndeposit_df","e5df183e":"#Values for Resort\n#Checked-in\nx_checked_in_resort = [label_bin for label_bin, df in \\\n              deposit_df\\\n              [(deposit_df.is_canceled == 'Checked-In')\\\n              & (deposit_df.hotel == 'Resort Hotel')]\\\n             .groupby('deposit_type')]\n    \nchecked_in_vals_resort = deposit_df['res_percent']\\\n        [(deposit_df.hotel == 'Resort Hotel')\\\n        & (deposit_df.is_canceled == 'Checked-In')]\n\n#Did not Check-in\nx_not_checked_in_resort = [label_bin for label_bin, df in \\\n              deposit_df\\\n              [(deposit_df.is_canceled == 'Did Not Stay')\\\n              & (deposit_df.hotel == 'Resort Hotel')]\\\n             .groupby('deposit_type')]\n    \nnot_checked_in_vals_resort = deposit_df['res_percent']\\\n        [(deposit_df.hotel == 'Resort Hotel')\\\n        & (deposit_df.is_canceled == 'Did Not Stay')]","3f15ae99":"#Values for City\n#Checked-in\nx_checked_in_city = [label_bin for label_bin, df in \\\n              deposit_df\\\n              [(deposit_df.is_canceled == 'Checked-In')\\\n              & (deposit_df.hotel == 'City Hotel')]\\\n             .groupby('deposit_type')]\n    \nchecked_in_vals_city = deposit_df['res_percent']\\\n        [(deposit_df.hotel == 'City Hotel')\\\n        & (deposit_df.is_canceled == 'Checked-In')]\n\n#Did not Check-in\nx_not_checked_in_city = [label_bin for label_bin, df in \\\n              deposit_df\\\n              [(deposit_df.is_canceled == 'Did Not Stay')\\\n              & (deposit_df.hotel == 'City Hotel')]\\\n             .groupby('deposit_type')]\n    \nnot_checked_in_vals_city = deposit_df['res_percent']\\\n        [(deposit_df.hotel == 'City Hotel')\\\n        & (deposit_df.is_canceled == 'Did Not Stay')]","b372b91e":"width = .4\nplt.figure(figsize=(6, 4))\n\np1 = plt.bar(x_not_checked_in_resort, not_checked_in_vals_resort, \\\n             width=width, bottom=checked_in_vals_resort)\np2 = plt.bar(x_checked_in_resort, checked_in_vals_resort, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.title('Resort Stay\/No-Stay Ratio Based on Deposit')\n\nplt.legend((p1[0], p2[0]), ('Did Not Stay', 'Stayed'), loc=9)\n\nplt.show()","45822a15":"width = .4\nplt.figure(figsize=(6, 4))\n\np1 = plt.bar(x_not_checked_in_city, not_checked_in_vals_city, \\\n             width=width, bottom=checked_in_vals_city)\np2 = plt.bar(x_checked_in_city, checked_in_vals_city, width=width)\n\nplt.ylabel('Stay\/Cancel Mix %')\nplt.title('City Stay\/No-Stay Ratio Based on Deposit')\n\nplt.legend((p1[0], p2[0]), ('Did Not Stay', 'Stayed'), loc=9)\n\nplt.show()","6f5d794f":"# H2 Viz. Long lead times will increase the possibility of a customer cancelling.","d6aeb0dc":"## Final H1\/H4 Thoughts:  Comparing the two hotels really depends on what the end user is wanting to look at.  The City hotel is pulling in more revenue. \n\n## When it comes to revenue, we do not know things like costs to help calculate margin.  The City hotel could be bringing in a lot of revenue, but spending more in costs, which could then make the Resort hotel more profitable.\n\n## In regards to summer months, we do see that warmer months tend to bring in more guests.","dd113f76":"# Additional Recommendations\/Thoughts:\n\n## Data Wants:\n\n### I would like to verify the accuracy of some of the data based on the discrepancies corrected in the cleaning process.\n\n### Having daily\/monthly costs would be great to add to further comparisons.\n\n### Having deposit amounts would be benficial as well.  We see a lot of reservations with non-refundable deposits not checking in.  What sort of impact is that making financially?\n\n### Seeing the number of guests makes me wonder about revenue from value added products like restaurants, spas, etc.  Does one hotel have a lot more to offer than the other, which could lead to better financial results?","0e0f963e":"### Looking at the image above, one can't help but notice that the City hotel is dominating!\n\n# Now, let's combine the number of rooms occupied.\n# It's the remix! (One of those few times in history where the remix is better than the original.)","16b06649":"### Looking at this new image above, the story starts to change.  We can clearly see the check-ins haven't changed, but we start to see some gaps closing with the Resort hotel gaining ground.\n\n## So, what might be a final KPI that can be used to compare these two hotels?  What would be something that a Regional VP of Operations might find useful?\n## What? There's a bonus hidden track on this album? (I'm not sure if that's still a thing or not.)","912b70d9":"## This notebook contains data cleaning as a result of finding row values with discrepancies based on logic.  To view those examples, please view my prep notebook. [Hotel Booking Prep by Joseph Burton](https:\/\/www.kaggle.com\/josephburton06\/hotel-booking-prep)","fa1758c1":"# H5 Viz. Customers with non-refundable deposits will cancel\/no-show less.","60752284":"## Final H2 Thoughts:\n\n## What stands out here?  Looking at the both hotels, we would expect a rise in our 'Number of Reservations' line at the 100 break as we are switching to groups of 10 days to 50 days.  The thing that stands out is the higher number of reservations at the City hotel and the increased percentage of cancelled reservations in this group.\n\n### Creating df's for H3:","449a76ef":"### Creating df's for H2:","6aa9e132":"## Final H3 Thoughts:\n\n## Looking at this, we can see that guests that are not paying for their rooms will actually stay, as expected.  This isn't some major breakthrough.  What this can mean though could be an e-mail blast targeting these groups of guests with a marketing strategy built around value added products, such as discounted amenities or meals.  \n\n## Here's the scenario: a guest stays 5 times and earns a free night's stay.  They stay the free night, but don't spend any money at the hotel because they go out to eat and enjoy the surrounding area.  The hotel can grow in customer satisfaction, but being able to make some revenue from the guest during this stay could be very beneficial in covering costs.\n\n### Creating df's for H5:","8c72010f":"# Data Cleaning\/Prep\/Feature Engineering Pipeline:","a556b11f":"# H3 Viz. With some visits listed as \/$0 ADR, these reservations will see fewer cancellations.","0a4a217d":"## Final H5 Thoughts:\n\n## This is a little shocking.  The percent of customers that are willing to forfeit their non-refundable deposit is rather high.  What can this mean to the business?  If these guests are reserving rooms during peak season, the hotel might see them cancel and keep the non-refundable deposit and still be able to book the room for someone else.  If these reservations are during slower months, these reservations might be identified to try and entice the guest to still visit, maybe with discounted amenties at the resort.","1abebaa2":"### Shazam!  The resort hotel just snagged the lead at the wire.  This visualization tells a vastly different story than what we started with. \n### 1. The Resort hotel seems to be performing closer to capacity than the City hotel.  Again, this is using a proxy for what is considered max occupancy for the night based on the data available.\n### 2.  There is clearly some seasonality where the warmer months (we're assuming hotels in the Northern Hemisphere based on countries like ESP, GRB, IRL in the Country column) attract more guests.  Colder months show a dip.  This will serve as our answer for H4.\n### 3. We can see a trend in both hotels moving up, showing growth in the businesses.\n### 4. Did the City hotel just open when the data collection began?  We're they finalizing an expansion to the building?  The max room value used is based on the highest day's room occupancy.  If there was some expansion, a different denominator might be needed for that time period.\n\n### Other items to consider for results to compare the Resort and City Hotel:","9bc6b60e":"# Creating df's for EDA:\n### Creating df's for H1 and H4:","3d1f9e1a":"# Hypotheses:\n\n## H1. The City hotel will have more check-ins than the Resort hotel.  The thought is that a Resort will see extended stay customers.  Is a KPI for count of check-ins per month\/week\/year the best KPI?\n\n## H2. Long lead times will increase the possibility of a customer cancelling.\n\n## H3. With some visits listed as \\$0 ADR, these reservations will see fewer cancellations.\n\n## H4. Summer months will see higher traffic.\n\n## H5. Customers with non-refundable deposits will cancel\/no-show less.","50e6d317":"# H1 Viz\n\n## Let's take a look at check-ins only. This is like buying a whole CD to get the single track that you like"}}