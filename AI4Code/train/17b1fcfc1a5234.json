{"cell_type":{"0ddc6317":"code","e8e12b2c":"code","1a5c0407":"code","b54f5533":"code","2591997a":"code","10514240":"code","edfd4932":"code","105cfc4e":"code","a21a3e79":"code","7e97e798":"code","7d8c8623":"code","a034a81b":"code","9762107d":"code","9ddf509d":"code","e1e3d3b0":"code","097b07eb":"code","ddcd16a5":"code","4350c491":"code","7268536e":"code","a8cdcbad":"code","7c045d75":"code","035ac7c3":"code","143eb91b":"code","891f4530":"code","f9fffccd":"code","f069355e":"code","b5489f0a":"code","53fd883b":"code","055a5e82":"code","de46a111":"code","9e3cccd6":"code","4798e80f":"markdown","5fcc1b7f":"markdown","1f5d0adb":"markdown","3e6eacd2":"markdown","bae2c366":"markdown","ef526f54":"markdown","b311b712":"markdown","af2175d2":"markdown","3a058f8f":"markdown","f6c61ecf":"markdown"},"source":{"0ddc6317":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e8e12b2c":"train = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")\nsubmission = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")","1a5c0407":"print(\"Shape of train: \", train.shape)\nprint(\"Shape of test: \", test.shape)\nprint(\"Shape of sample_submission: \", submission.shape)","b54f5533":"train.head()","2591997a":"test.info()","10514240":"train.info()","edfd4932":"train.drop(labels=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)\ntest.drop(labels=['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)","105cfc4e":"cols = ['Age', 'Fare']\nfor col in cols:\n    train[col] = train[col].fillna(train[col].sum()\/train[col].size)\n    test[col] = test[col].fillna(test[col].sum()\/test[col].size)","a21a3e79":"def embarked_max_value(dataset):\n    embarked_dict = {'C':0, 'Q':0, 'S':0}\n    for i in dataset['Embarked']:\n        if str(i) != \"nan\":\n            embarked_dict[i] += 1\n    return max(embarked_dict)","7e97e798":"train['Embarked'] = train['Embarked'].fillna(embarked_max_value(train))\ntest['Embarked'] = test['Embarked'].fillna(embarked_max_value(test))","7d8c8623":"def countplot(str): # fig, ax kullanarak dene\n    sns.countplot(test[str], color=\"#56ad74\", label='test')\n    sns.countplot(train[str],color=\"#345082\",  label='train')\n    plt.legend()\n    plt.show()","a034a81b":"countplot('Sex')","9762107d":"countplot('Pclass')","9ddf509d":"countplot('SibSp')","e1e3d3b0":"sns.countplot(train['Survived'])\nplt.show()","097b07eb":"fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(10,10))\nfor i, col in enumerate(train.iloc[:,[0,1,3,4,5,6]]):\n    x = i \/\/ 3\n    y = i % 3\n    sns.distplot(train[col], ax=ax[x, y], color=\"blue\")\nplt.tight_layout()\nplt.show()","ddcd16a5":"def encoder(train_dataset, test_dataset):\n    le = LabelEncoder()\n    train_dataset['Sex'] = le.fit_transform(train_dataset['Sex'])\n    test_dataset['Sex'] = le.transform(test_dataset['Sex'])\n    train_dataset['Embarked'] = le.fit_transform(train_dataset['Embarked'])\n    test_dataset['Embarked'] = le.transform(test_dataset['Embarked'])\n    return train_dataset, test_dataset","4350c491":"train, test = encoder(train, test)","7268536e":"train.describe()","a8cdcbad":"test.describe()","7c045d75":"corr_matrix = train.corr()\ncorr_matrix['Survived'].sort_values().plot(kind=\"bar\")\nprint(corr_matrix['Survived'].sort_values())\nplt.show()","035ac7c3":"sns.clustermap(corr_matrix, annot=True, fmt=\".3f\", figsize=(10,10))\nplt.title(\"Correlation Between Features\")\nplt.show()","143eb91b":"sns.pairplot(train, diag_kind=\"kde\", hue=\"Survived\")\nplt.show()","891f4530":"cols = ['Age', 'SibSp', 'Parch', 'Fare']\nfor col in cols:\n    sns.boxplot(x=col, data=train, orient=\"h\")\n    plt.title(col)\n    plt.show()","f9fffccd":"Y = train['Survived'].values\nX = train.drop(labels=['Survived'], axis=1)","f069355e":"x_train, x_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=58)","b5489f0a":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_val.shape)\nprint(y_val.shape)","53fd883b":"def create_ann_model():\n    model = Sequential()\n    model.add(Dense(8, activation=\"relu\", input_dim=7))\n    model.add(Dense(4, activation=\"relu\"))\n    model.add(Dense(2, activation=\"relu\"))\n    model.add(Dense(1, activation=\"sigmoid\"))\n    model.compile(loss=\"binary_crossentropy\", metrics=['accuracy'])\n    return model\n\nmodel = create_ann_model()\nmodel.summary()","055a5e82":"model.fit(x_train, y_train, epochs=5, batch_size=32) # ohe kullan","de46a111":"pred = model.predict(x_val)\npred = (pred > 0.5)\ny_true = np.int64(y_val)\ny_true = y_true.round()\npred = pred.round()\ncm = confusion_matrix(y_true, pred)\nscore = accuracy_score(y_true, pred)\nprint(\"Score: \", score)\nfig, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm, annot=True, linewidths=0.01, cmap=\"Blues\", linecolor=\"green\", fmt=\".2f\", ax=ax)\nplt.xlabel(\"Predict\")\nplt.ylabel(\"True\")\nplt.title(\"Confusion Matrix\")\nplt.show()","9e3cccd6":"pred = model.predict(test)\nsubmission['Survived'] = (pred[:, 0] > 0.5).astype(int)\nsubmission.to_csv('submission.csv', index=False)","4798e80f":"## Train test split","5fcc1b7f":"### Correlation Matrix","1f5d0adb":"### Countplot","3e6eacd2":"## EDA (Evaluation Data Analysis) \ud83d\udcca","bae2c366":"### Encoding","ef526f54":"### Pairplot","b311b712":"### Distplot","af2175d2":"## Editing datasets","3a058f8f":"### Boxplot","f6c61ecf":"<img src=\"https:\/\/miro.medium.com\/max\/2500\/1*Q59ONUgBl159KgMJvghShA.jpeg\" width=\"500\" height=\"500\">"}}