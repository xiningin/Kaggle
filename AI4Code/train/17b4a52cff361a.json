{"cell_type":{"44d6617a":"code","bb54ba19":"code","667c8967":"code","4120830c":"code","da763fdc":"code","ea027c51":"code","a5d2ed62":"code","3595c0d9":"code","ffa343c0":"code","0dec40d1":"code","6aaacbe5":"code","6819d1dc":"code","ce65ae11":"code","663a1af5":"code","5ba24e58":"markdown","6517079f":"markdown"},"source":{"44d6617a":"# \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u0440\u043e\u0436\u043d\u043e - \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0439 \n# \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \n# \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0430\u0445 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0441\u0448\u0435\u0441\u0442\u0432\u0438\u0439 \u043d\u0430 \u0434\u043e\u0440\u043e\u0433\u0430\u0445 \u0444\u0435\u0434\u0435\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e, \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043c\u0435\u0436\u043c\u0443\u043d\u0438\u0446\u0438\u043f\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0435\u0442\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442.\n\n# \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 csv \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u0442\u043f \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a gps \u0438 \u043c\u0435\u0442\u043a\u043e\u0439 \u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0430 \u0442\u0430\u043a\u0436\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u0447\u0438\u043d.#\n# https:\/\/xn--80abhddbmm5bieahtk5n.xn--p1ai\/opendata\n    \n# \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f:\n# \u0424\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 - \u0434\u0430\u0442\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043d\u044f\u0442\u043d\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430, \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0438\u043c\u0435\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445.\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 - \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438, \u0430 \u043a\u0430\u043a\u0438\u0435-\u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u044b\u043c\u0438 \u0438 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 \u0443\u0447\u0430\u0441\u0442\u0438\u044f \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435.\n#\u0415\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e, \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u044f\u0446\u0438\u044e, \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043f\u0440\u043e\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0443\u0447\u0435\u0431\u043d\u044b\u043c\n\n\n#\u0426\u0435\u043b\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430;\n\n#\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0435\u0437\u043e\u043d\u043d\u044b\u0445 \u0432\u0441\u043f\u043b\u0435\u0441\u043a\u043e\u0432 \u0434\u0442\u043f \u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044d\u0442\u0438 \u0432\u0441\u043f\u043b\u0435\u0441\u043a\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u044b (\u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445), \n#\u0441 \u0446\u0435\u043b\u044c\u044e \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043d\u0430 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044e \u0434\u043e\u0440\u043e\u0433 \u0432 \u0437\u0438\u043c\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f.\n\n#\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0414\u0422\u041f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043e\u0441\u0435\u043d\u043d\u0435-\u0437\u0438\u043c\u043d\u0438\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043d\u0430 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044e \u0434\u043e\u0440\u043e\u0433, \n#\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c.\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom threading import Thread, Event\nimport time\n\nsns.set()\n\nimport os\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#importing the dataset\ndataset = pd.read_csv('\/kaggle\/input\/crashes\/2018_2017 - 2018_2017.csv', parse_dates=['crash_date'])\ndataset.head()","bb54ba19":"byRoad = pd.pivot_table(dataset,  values='vehicles_amount', index='road_code', aggfunc='sum')#.plot(kind='bar')\nbyRoad.sort_values(by=\"vehicles_amount\",ascending=False)\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0442\u043f \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0434\u043e\u0440\u043e\u0433, \u0441\u0430\u043c\u044b\u0435 \u0430\u0434\u043e\u0432\u044b\u0435-\u0441\u0432\u0435\u0440\u0445\u0443\n","667c8967":"#\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0434\u0430\u0442\u044b \u043a \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u043c\u0443 \u043f\u0430\u043d\u0434\u0430\u0441\u0443 \u0432\u0438\u0434\u0443\n\ndataset['crash_date'] = pd.to_datetime(dataset['crash_date'])\ndataset['crash_date_Week'] = dataset['crash_date'].dt.week\n\ndataset['crash_date_Month'] = dataset['crash_date'].dt.month\ndataset = dataset.set_index(dataset['crash_date'])\ndataset = dataset.sort_index()\n#dataset['road_code']='01'","4120830c":"#\u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0434\u0432\u0430 -\u0437\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u0433\u043e\u0434\u044b\nsplit_date = pd.datetime(2017,12,31)\n\ndf_training = dataset.loc[dataset['crash_date'] <= split_date]\ndf_test = dataset.loc[dataset['crash_date'] > split_date]","da763fdc":"trainPivot = pd.pivot_table(df_training,  values='vehicles_amount', index='road_code', aggfunc='sum')#.plot(kind='bar')\ntrainPivot.sort_values(by='vehicles_amount', ascending=False)","ea027c51":"\n testPivot = pd.pivot_table(df_test,  values = 'vehicles_amount', index = 'road_code', aggfunc='sum')#.plot(kind='bar') \ntestPivot.sort_values(by='vehicles_amount', ascending=False)","a5d2ed62":"#\u041f\u0435\u0440\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438:\n\n#\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u044f\u0432\u0438\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0435\u0437\u043e\u043d\u043d\u044b\u0445 \u0432\u0441\u043f\u043b\u0435\u0441\u043a\u043e\u0432 \u0434\u0442\u043f \u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044d\u0442\u0438 \u0432\u0441\u043f\u043b\u0435\u0441\u043a\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u044b(\u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\u0445), \n#\u0441 \u0446\u0435\u043b\u044c\u044e \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043d\u0430 \u044d\u043a\u0441\u043f\u043b\u0443\u0430\u0442\u0430\u0446\u0438\u044e \u0434\u043e\u0440\u043e\u0433 \u0432 \u0437\u0438\u043c\u043d\u0435\u0435 \u0432\u0440\u0435\u043c\u044f.","3595c0d9":"#\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0442\u043f \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u043d\u0435\u0434\u0435\u043b\u044c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0434\u043e\u0440\u043e\u0433\u0435, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e-\u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u0434\u043e\u0432 \u0434\u043e\u0440\u043e\u0433\n\nroads = pd.DataFrame(data= dataset.road_code.unique())\nroads","ffa343c0":"q = \"road_code=='87\u041a-046'\" # \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438\ndataset.query(q) #\u0432 \u0442\u0430\u043a\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438-\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442","0dec40d1":"trainingPivot = pd.pivot_table(df_training,  values='vehicles_amount', index='crash_date_Month', aggfunc='sum')#.plot(c='blue')\ntrainingPivot\n    ","6aaacbe5":"pd.pivot_table(df_training,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum')","6819d1dc":"#\u0441\u043d\u0430\u0447\u0430\u043b\u0430-\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0438\u0445 \u043d\u0443\u043b\u044f\u043c\u0438\n\n#df_training = df_training.reindex(pd.date_range(\"2017-07-02\", \"2017-07-31\"), fill_value=\"NaN\")\nfrom datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n    for n in range(int((end_date - start_date).days)):\n        yield start_date + timedelta(n)\n        \n        \ndata = pd.pivot_table(df_training,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum')\nstart_date = date(2017, 7, 1)\nend_date = date(2017, 7, 30)\nDfObj=df_training\n\nfor single_date in daterange(start_date, end_date):\n    DfObj = DfObj.append({'crash_date':single_date} , ignore_index=True)\nDfObj.tail()\nDfObj['crash_date'] = pd.to_datetime(DfObj['crash_date'])\nDfObj['crash_date_Week'] = DfObj['crash_date'].dt.week\nDfObj['crash_date_Month'] = DfObj['crash_date'].dt.month\n#DfObj = DfObj.interpolate(method='linear').ffill().bfill()\nDfObj.tail(40)\n\n#pd.pivot_table(DfObj,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum')\n#pd.pivot_table(DfObj,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum')","ce65ae11":"                                                                                                                 \n#testPivot = pd.pivot_table(df_test,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum').interpolate(method='linear', axis=0).ffill().bfill().plot(c='green')\n#testPivot \n\n#pd.pivot_table(dataset,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum').interpolate(method='linear', axis=0).ffill().bfill().plot(c='red')","663a1af5":"for road in roads.itertuples(): #1000+ \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0438\u043b\u0438 \u0442\u0430\u0431\u043b\u0438\u0446-\u043f\u043b\u043e\u0445\u0430\u044f \u0438\u0434\u0435\u044f\n#\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u0440\u0439 \u0434\u043e\u0440\u043e\u0433\u0438-\u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0430\u043d\u0430\u043b\u0438\u0437. \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0442\u044c-\u043a\u0430\u043a\u043e\u0439 \u0438\u043c\u0435\u043d\u043d\u043e\n    query=\"road_code=='\" + str(road[1]) + \"'\"\n    \n    if(query==\"road_code=='nan'\"):\n        continue\n    #time.sleep(1) \u041d\u0430 \u0442\u044b\u0441\u044f\u0447\u0443 \u0434\u043e\u0440\u043e\u0433-\u043e\u0447 \u0442\u0443\u043f\u0430\u044f \u043c\u044b\u0441\u043b\u042c\n    print(query)\n   # df_test.query(query)\n    data = dataset.query(query)\n    pd.pivot_table(dataset,  values='vehicles_amount', index='crash_date_Week', aggfunc='sum')\n    #todo: \u0437\u0434\u0435\u0441\u044c-\u0440\u0430\u0437\u0440\u0435\u0437 \u043f\u043e \u043d\u0435\u0434\u0435\u043b\u044f\u043c\n    \n  #  pivot = pd.pivot_table(data,  values='vehicles_amount', index='road_code', aggfunc='sum')\n  #  print(len(data))\n    #pivot\nquery=''","5ba24e58":"\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435 \u043f\u043e\u043b\u043d\u044b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440-\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u0438\u044e\u043b\u044c 2017.\n\u0423\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0432 \u044d\u0442\u043e\u043c:","6517079f":"**\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 27,28,29,30 \u043d\u0435\u0434\u0435\u043b\u0438,\u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0438\u044e\u043b\u044e****\n\n\u0418\u043d\u0442\u0435\u0440\u043f\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u0438\u0445."}}