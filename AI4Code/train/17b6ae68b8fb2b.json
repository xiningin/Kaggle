{"cell_type":{"61522350":"code","ab34131f":"code","5d05dced":"code","e1063988":"code","cb54927e":"code","c9ee3a54":"code","1d406842":"code","476472d0":"code","253300b6":"code","3817fe6f":"code","ac40fb3d":"code","66c0e991":"code","22f5d6d1":"code","a097e563":"code","6ca4bbc6":"code","b3b70a08":"code","646f7ce9":"code","8ae86245":"code","6e35c8e1":"code","c2c3e218":"code","14787e36":"code","934228d5":"code","f95ea085":"code","bc150d98":"code","a9629877":"code","dc478a93":"code","98c1ffcc":"code","2171a18c":"code","f3a19a98":"code","e1db61ef":"code","a703743f":"code","09133c6d":"code","b73da337":"code","3703082f":"code","4bf6349e":"code","72ec737f":"code","68d1af73":"code","72470d9a":"code","c5a4c8df":"code","49f3f834":"code","5ded2573":"code","007035e8":"code","3417b329":"code","32de0e3d":"markdown","92234425":"markdown","856ad449":"markdown","2ef434c9":"markdown","c5133774":"markdown","2cad465d":"markdown","dc9bc17e":"markdown","817d8060":"markdown","f9753f95":"markdown","983eea61":"markdown"},"source":{"61522350":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab34131f":"#loading the two datasets\nb=pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_bcell.csv')\ns=pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_sars.csv')","5d05dced":"#combining the two datasets\nc=pd.concat([b,s])\nc.head()","e1063988":"c.info()","cb54927e":"c.describe()","c9ee3a54":"#for statistical analysis of object variables\nc.describe(include='all')","1d406842":"c['target'].value_counts()\/len(c)*100","476472d0":"#to calculate peptide length\nc['peptide_length']=c['end_position'] - c['start_position'] + 1","253300b6":"#function to convert characters into their lengths\ndef length(col):\n    for i in col:\n        return len(i)","3817fe6f":"#converting all the three object type features\nc['parent_protein_id']=length(c['parent_protein_id'])","ac40fb3d":"c['protein_seq']=length(c['protein_seq'])","66c0e991":"c['peptide_seq']=length(c['peptide_seq'])","22f5d6d1":"x=c.drop(columns='target')\ny=c['target']","a097e563":"#feature importance\nfrom sklearn.ensemble import ExtraTreesClassifier\nr = ExtraTreesClassifier(random_state=0)\nr.fit(x,y)\nfeature_importance = r.feature_importances_\nfeature_importance_normalized = np.std([tree.feature_importances_ for tree in \n                                        r.estimators_], \n                                        axis = 0) ","6ca4bbc6":"#importing libraries for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nplt.figure(figsize=(10,10))\nsns.barplot(feature_importance_normalized,x.columns) \nplt.xlabel('Feature Labels') \nplt.ylabel('Feature Importances') \nplt.title('Comparison of different Feature Importances') \nplt.show() ","b3b70a08":"#dropping unnecessary columns\nc.drop(columns=['parent_protein_id','protein_seq','peptide_seq'],inplace=True)","646f7ce9":"c.head()","8ae86245":"c['peptide_length'].value_counts()\/len(c)*100","6e35c8e1":"features=[\"chou_fasman\",\"emini\",\"kolaskar_tongaonkar\",\"parker\",\"peptide_length\",\"isoelectric_point\",\"aromaticity\",\n            \"hydrophobicity\",\"stability\"]\nplt.figure(figsize=(20,20))\nplt.subplots_adjust(hspace=2.0)\nj=1\nfor i in features:\n    plt.subplot(4,5,j)\n    sns.distplot(c[i])\n    j+=1","c2c3e218":"X=c.drop(columns='target')\nY=c['target']","14787e36":"#train and test\nfrom sklearn.model_selection import train_test_split, RandomizedSearchCV\nX_train,X_valid,Y_train,Y_valid=train_test_split(X,Y,stratify=Y,test_size=0.2,random_state=0)","934228d5":"from sklearn.preprocessing import MinMaxScaler\nd=MinMaxScaler()\nd.fit_transform(X_train,Y_train)","f95ea085":"d.transform(X_valid)","bc150d98":"#fitting the lightbgm model \nfrom lightgbm import LGBMClassifier\nfrom sklearn.metrics import roc_auc_score","a9629877":"from scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nparams ={'num_leaves': sp_randint(6, 50), \n             'min_child_samples': sp_randint(100, 500), \n             'min_child_weight': [1e-5, 1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4],\n             'subsample': sp_uniform(loc=0.2, scale=0.8), \n             'colsample_bytree': sp_uniform(loc=0.4, scale=0.6),\n             'reg_alpha': [0, 1e-1, 1, 2, 5, 7, 10, 50, 100],\n             'reg_lambda': [0, 1e-1, 1, 5, 10, 20, 50, 100]}","dc478a93":"l=LGBMClassifier()","98c1ffcc":"w=RandomizedSearchCV(l,param_distributions=params,n_jobs=-1,cv=5,scoring='roc_auc')\nw.fit(X_train,Y_train)","2171a18c":"lg_pred=w.predict(X_valid)\nlg_pred","f3a19a98":"roc_auc_score(lg_pred,Y_valid)","e1db61ef":"lg_train=w.predict(X_train)","a703743f":"roc_auc_score(lg_train,Y_train)","09133c6d":"#predictions of validation dataset\npredictions=pd.DataFrame(lg_pred,columns=['validation_pred'])\npredictions.head()","b73da337":"predictions.value_counts()\/len(c)*100","3703082f":"#predicting on covid dataset\nco=pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_covid.csv')\nco.head()","4bf6349e":"co.info()","72ec737f":"co.drop(columns=['parent_protein_id','protein_seq','peptide_seq'],inplace=True)","68d1af73":"co.head()","72470d9a":"co.isnull().sum()","c5a4c8df":"co['length']=co['end_position']-co['start_position'] + 1","49f3f834":"d.transform(co)","5ded2573":"y_pred=w.predict(co)\ny_pred","007035e8":"y_pred=pd.DataFrame(y_pred,columns=['test_pred'])\ny_pred.head()","3417b329":"y_pred.value_counts()\/len(co)*100","32de0e3d":"**If you like this notebook do upvote it.**\n\nDo provide your valuable feedback.\n\nDo checkout my other notebooks at https:\/\/www.kaggle.com\/tmchls","92234425":"According to the ExtraTreesClassifier,protein features **'hydorphobicity','aromaticity'** and **'isoelectric_point'** conveys most info about the target feature determining their importance in the dataset.","856ad449":"The test predicitons shows us that the antibody valence will be negative around 56.3% and positive around 43.6% which means that majority of antibodies will resist binding of virus like SARS-Cov2 which will reduce number of cases.\n\n**Task 1 prediction with only B-cell data was 55.6% negative cases and 44.3% positive cases.**\n\n**Task 2 with both B-cell and SARS data has predictions of 52.8% negative cases and 47.1% positive cases.**","2ef434c9":"**INSIGHTS-**\n* 'parent_protein_id' contains 761 unique values with 560 frequency.\n* 'protein_seq' contains 758 unique values with same frequency as of 'parent_protein_id'.\n* 'peptide_seq' contains the most number of unique values.\n*  We can say that 'parent_protein_id' and 'protein_seq' contains mostly same number of characteristics. ","c5133774":"## MODEL BUILDING","2cad465d":"Most of the peptides are of length 15(32.3%),10(25.1%) and 8(14.4%) respectively.","dc9bc17e":"**INSIGHTS-**\n\n* By looking at the huge difference between 75% quartile value and maximum value of 'start_position','emini' and 'end_position' features there can be a possibility of outliers in these features.\n* Minimum values in 'parker' and 'hydrophobicity' features are negative.\n* Negative mean,25th,50th and 75th quartiles in 'hydrophobicity' feature.","817d8060":"The ROC score of training data is 0.872 and of validation data is 0.834 which shows that the model has fitted very well in validation data. ","f9753f95":"**INSIGHTS**-\n* 'Emini' and 'peptide_length' feature shows right skewed distribution.\n* 'isoelectric_point','aromaticity','hydrophobicity','stability' are not perfectly normal and contains outliers.\n* 'chou_fasman','kolaskar_tongaonkar','parker' shows near-to-perfect normal distribution.","983eea61":"**INSIGHTS**-\n\n* 'parent_protein_id','protein_seq',and 'peptide_seq' are of object type as they contain characters not numbers.\n* Rest of the features are of float type.\n* No categorical feature is present in the dataset.\n* Target feature is binary i.e. containing only 0 and 1."}}