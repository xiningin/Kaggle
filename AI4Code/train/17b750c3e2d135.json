{"cell_type":{"ac578c87":"code","e4739cd7":"code","a4eec118":"code","65cb1511":"code","3018f697":"code","d64eb4a1":"code","18e3a9d4":"code","216d2561":"code","9981c29d":"code","582465f8":"code","2a64bf8e":"code","507bf637":"code","75e998cd":"code","d1335e2d":"code","45eeaf98":"code","471b0092":"code","f735d0e7":"code","646f8cba":"code","4154ed6d":"code","a2efe8ef":"code","aed6c7d0":"code","9d0cfa95":"markdown","deb9ad93":"markdown","d6ffc95f":"markdown"},"source":{"ac578c87":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4739cd7":"from matplotlib import pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n\n%matplotlib inline\n","a4eec118":"#Get data from online csv files on John Hopkins University repository\nconf_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv'\ndeaths_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv'\nrecovered_url = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv'","65cb1511":"#Load data\nraw_tot_confirmed = pd.read_csv(conf_url)\nraw_tot_deaths = pd.read_csv(deaths_url)\nraw_tot_recovered = pd.read_csv(recovered_url)\n\nprint(\"The Shape of Cornfirmed cases is: \", raw_tot_confirmed.shape)\nprint(\"The Shape of Cornfirmed deaths is: \", raw_tot_deaths.shape)\nprint(\"The Shape of Cornfirmed recoveries is: \", raw_tot_recovered.shape)\n\nraw_tot_confirmed.head()","3018f697":"# Un-Pivoting the data (reorganize with the dates as a culumn\/feature)\n\nraw_tot_confirmed2 = pd.melt(raw_tot_confirmed, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\nraw_tot_deaths2 = pd.melt(raw_tot_deaths, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\nraw_tot_recovered2 = pd.melt(raw_tot_recovered, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\n\n\nprint(\"Confirmed cases shape is: \", raw_tot_confirmed2.shape)\nprint(\"Confirmed deaths shape is: \", raw_tot_deaths2.shape)\nprint(\"Confirmed recoveries shape is: \", raw_tot_recovered2.shape)\n\n\nraw_tot_confirmed2.head()","d64eb4a1":"# Un-Pivoting the data (reorganize with the dates as a culumn\/feature)\n\nraw_tot_confirmed2 = pd.melt(raw_tot_confirmed, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\nraw_tot_deaths2 = pd.melt(raw_tot_deaths, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\nraw_tot_recovered2 = pd.melt(raw_tot_recovered, id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'], var_name=['Date'])\n\n\nprint(\"Confirmed cases shape is: \", raw_tot_confirmed2.shape)\nprint(\"Confirmed deaths shape is: \", raw_tot_deaths2.shape)\nprint(\"Confirmed recoveries shape is: \", raw_tot_recovered2.shape)\n\n\nraw_tot_confirmed2.head()","18e3a9d4":"#Converting the new column to dates\n\nraw_tot_confirmed2['Date'] = pd.to_datetime(raw_tot_confirmed2['Date'])\nraw_tot_deaths2['Date'] = pd.to_datetime(raw_tot_deaths2['Date'])\nraw_tot_recovered2['Date'] = pd.to_datetime(raw_tot_recovered2['Date'])","216d2561":"# Renaming the Values\nraw_tot_confirmed2.columns = raw_tot_confirmed2.columns.str.replace('value', 'Confirmed')\nraw_tot_deaths2.columns = raw_tot_deaths2.columns.str.replace('value', 'Deaths')\nraw_tot_recovered2.columns = raw_tot_recovered2.columns.str.replace('value', 'Recovered')","9981c29d":"# Investigating the NULL values\nraw_tot_recovered2.isnull().sum()","582465f8":"raw_tot_confirmed2['Province\/State'].fillna(raw_tot_confirmed2['Country\/Region'], inplace=True)\nraw_tot_deaths2['Province\/State'].fillna(raw_tot_deaths2['Country\/Region'], inplace=True)\nraw_tot_recovered2['Province\/State'].fillna(raw_tot_recovered2['Country\/Region'], inplace=True)\n\nraw_tot_confirmed2.isnull().sum()","2a64bf8e":"# Full Joins\n\n# Confirmed with Deaths\nfull_join = raw_tot_confirmed2.merge(raw_tot_deaths2[['Province\/State','Country\/Region','Date','Deaths']], \n                                      how = 'left', \n                                      left_on = ['Province\/State','Country\/Region','Date'], \n                                      right_on = ['Province\/State', 'Country\/Region','Date'])\n\nprint(\"Shape of first join: \", full_join.shape)\n\n# full join with Recovered\nfull_join = full_join.merge(raw_tot_recovered2[['Province\/State','Country\/Region','Date','Recovered']], \n                                      how = 'left', \n                                      left_on = ['Province\/State','Country\/Region','Date'], \n                                      right_on = ['Province\/State', 'Country\/Region','Date'])\n\nprint(\"Shape of second join: \", full_join.shape)\n\nfull_join.tail()","507bf637":"full_join['Date'] = pd.to_datetime(full_join['Date'])\n","75e998cd":"#Removing null values\nfull_join['Recovered'].fillna(0, inplace=True)\n#Calculate active cases\nfull_join['Active Cases'] = full_join['Confirmed'] - (full_join['Deaths'] + full_join['Recovered']) \n\n# Adding Month and Year as a new Column\nfull_join['Month-Year'] = full_join['Date'].dt.strftime('%b-%Y')\n\nfull_join.head()","d1335e2d":"# Braking the numbers by Day \n\n\n## Applying it on all dataset\n\n#creating a new df    \nfull_join2 = full_join.copy()\n\n#creating a new date columns - 1\nfull_join2['Date - 1'] = full_join2['Date'] + pd.Timedelta(days=1)\nfull_join2.rename(columns={'Confirmed': 'Confirmed - 1', 'Deaths': 'Deaths - 1', 'Recovered': 'Recovered - 1',\n                          'Date': 'Date Minus 1'}, inplace=True)\n\n#Joing on the 2 DFs\nfull_join3 = full_join.merge(full_join2[['Province\/State', 'Country\/Region','Confirmed - 1', 'Deaths - 1', \n                            'Recovered - 1', 'Date - 1', 'Date Minus 1']], how = 'left',\n                             left_on = ['Province\/State','Country\/Region','Date'], \n                             right_on = ['Province\/State', 'Country\/Region','Date - 1'])\n\n#minus_onedf.rename(columns={'Confirmed': 'Confirmed - 1', 'Deaths': 'Deaths - 1', 'Recovered': 'Recovered - 1'}, inplace=True)\n\nfull_join3.head()\n\n# Additional Calculations\nfull_join3['Confirmed Daily'] = full_join3['Confirmed'] - full_join3['Confirmed - 1']\nfull_join3['Deaths Daily'] = full_join3['Deaths'] - full_join3['Deaths - 1']\nfull_join3['Recovered Daily'] = full_join3['Recovered'] - full_join3['Recovered - 1']\n\nprint(full_join3.shape)","45eeaf98":"# Editing manually the numbers for first day\n\nfull_join3['Confirmed Daily'].loc[full_join3['Date'] == '2020-01-22'] = full_join3['Confirmed']\nfull_join3['Deaths Daily'].loc[full_join3['Date'] == '2020-01-22'] = full_join3['Deaths']\nfull_join3['Recovered Daily'].loc[full_join3['Date'] == '2020-01-22'] = full_join3['Recovered']\n\n# deleting columns\ndel full_join3['Confirmed - 1']\ndel full_join3['Deaths - 1']\ndel full_join3['Recovered - 1']\ndel full_join3['Date - 1']\ndel full_join3['Date Minus 1']","471b0092":"#Calculate daily active cases\nfull_join3['Active Cases Daily'] = full_join3['Confirmed Daily'] - (full_join3['Deaths Daily'] + full_join3['Recovered Daily']) \nfull_join3.shape","f735d0e7":"# removing all rows that have no useful data (dates that had no cases in countries)\nnew_join = full_join3.loc[full_join3['Confirmed'] * 1 != 0]\nprint(new_join.shape)","646f8cba":"my_join = new_join\n#Grouping the data by Continent\nAfrica = ['Kenya', 'Uganda','Tanzania', 'Rwanda', 'Burundi', 'Ethiopia', 'Mauritania', 'Sudan', 'Eritrea', 'South Sudan', 'Western Sahara', 'Somalia', 'Djibouti', 'Mozambique',  'Mauritius', 'Madagascar', 'Malawi', 'Zambia', 'Zimbabwe', 'Seychelles', 'Congo (Kinshasa)', 'Angola', 'Cameroon', 'Chad', 'Central African Republic', 'Congo (Brazzaville)', 'Gabon', 'Equatorial Guinea', 'Sao Tome and Principe', 'South Africa', 'Namibia', 'Botswana', 'Eswatini', 'Nigeria', 'Ghana', \"Cote d'Ivoire\", 'Niger', 'Burkina Faso', 'Mali', 'Cabo Verde', 'Togo', 'Sierra Leone', 'Liberia', 'Senegal', 'Guinea', 'Benin', 'Guinea-Bissau', 'Egypt', 'Algeria', 'Morocco', 'Tunisia', 'Libya', 'Gambia', 'Comoros', 'Lesotho']\nAsia = ['China', 'Nepal', 'India', 'Pakistan', 'Bangladesh', 'Iran', 'Afghanistan', 'Sri Lanka', 'Maldives', 'Sri Lanka', 'Maldives', 'Japan', 'Korea, South', 'Taiwan*', 'Mongolia', 'Indonesia', 'Philippines', 'Vietnam', 'Thailand', 'Burma', 'Malaysia', 'Cambodia', 'Laos', 'Singapore', 'Timor-Leste', 'Brunei', 'Uzbekistan', 'Kazakhstan', 'Kyrgyzstan', 'Turkey', 'Iraq', 'Saudi Arabia', 'Yemen', 'Syria', 'Azerbaijan', 'Iraq', 'Saudi Arabia', 'Yemen', 'Syria', 'Azerbaijan', 'United Arab Emirates', 'Israel', 'Jordan', 'Lebanon', 'State of Palestine', 'Oman', 'Kuwait', 'Georgia', 'Armenia', 'Qatar', 'Bahrain', 'Cyprus', 'West Bank and Gaza', 'Bhutan', 'Tajikistan']\nEurope = ['Germany', 'France', 'Netherlands', 'Belgium', 'Austria', 'Switzerland', 'Kosovo', 'Luxembourg', 'Monaco', 'Liechtenstein', 'Russia', 'Ukraine', 'Poland', 'Romania', 'Czechia', 'Belarus', 'Hungary', 'Bulgaria', 'Slovakia', 'Moldova', 'United Kingdom', 'Sweden', 'Denmark', 'Norway', 'Latvia', 'Estonia', 'Iceland', 'Finland', 'Lithuania', 'Italy', 'Spain', 'Greece', 'Portugal', 'Serbia', 'Croatia', 'Bosnia and Herzegovina', 'Albania', 'North Macedonia', 'Slovenia', 'Montenegro', 'Malta', 'Andorra', 'Gibraltar', 'San Marino', 'Holy See', 'Ireland']\nN_America = ['US', 'Canada']\nS_America = ['Brazil', 'Colombia', 'Argentina', 'Peru', 'Venezuela', 'Chile', 'Ecuador', 'Bolivia', 'Paraguay', 'Uruguay', 'Guyana', 'Suriname', 'Falkland Islands', 'Mexico', 'Guatemala', 'Honduras', 'Nicaragua', 'El Salvador', 'Costa Rica', 'Panama', 'Belize', 'Cuba', 'Haiti', 'Dominican Republic', 'Puerto Rico', 'Jamaica', 'Trinidad and Tobago', 'Guadeloupe', 'Martinique', 'Bahamas', 'Barbados', 'Saint Lucia', 'Cura\u00e7ao', 'Saint Vincent - Grenadines', 'Grenada', 'Aruba', 'Antigua and Barbuda', 'Dominica', 'Saint Kitts and Nevis', 'Anguilla', 'Montserrat', 'Saint-Barth\u00e9lemy', 'Saint Vincent and the Grenadines']\nAustralia = ['Australia', 'New Zealand', 'Papua New Guinea', 'Fiji', 'Solomon Islands', 'Vanuatu', 'Samoa', 'Tonga', 'Wallis and Futuna Islands', 'Tuvalu', 'Niue', 'Tokelau', 'Guam', 'Kiribati', 'Micronesia', 'Northern Mariana Islands', 'Marshall Islands', 'Palau', 'Nauru']\nOther = ['MS Zaandam', 'Diamond Princess']\n\n#Creating a condition to categorize countiries' rows into continents \nmy_cond=[my_join['Country\/Region'].isin(Africa),my_join['Country\/Region'].isin(Asia),my_join['Country\/Region'].isin(Europe),my_join['Country\/Region'].isin(N_America),my_join['Country\/Region'].isin(S_America),my_join['Country\/Region'].isin(Australia),my_join['Country\/Region'].isin(Other)]\ncontinents = ['Africa', 'Asia', 'Europe', 'N_America', 'S_America', 'Australia', 'Other']\n\n#Creating continents column based on the above condition\nmy_join['Continent'] = np.select(my_cond, continents)\n\n#check to see if there is any new country that has not been assigned a country\nmy_join[my_join['Continent'] == '0']","4154ed6d":"#reorder columns\nmy_join = my_join[['Continent', 'Country\/Region', 'Province\/State', 'Lat', 'Long','Month-Year', 'Date', 'Confirmed', 'Deaths', 'Recovered','Active Cases', 'Confirmed Daily', 'Deaths Daily', 'Recovered Daily', 'Active Cases Daily']]\nmy_join.head()","a2efe8ef":"#Organize data to continent summaries\ncov_cont = my_join.groupby(['Continent','Date'], as_index=False).sum()\ncov_cont.drop(columns=['Long', 'Lat'], inplace=True)\ncov_cont","aed6c7d0":"cov_cont['Death Rate']= cov_cont['Deaths']\/cov_cont['Confirmed']\ncov_cont['Recovery Rate'] = cov_cont['Recovered']\/cov_cont['Confirmed']\ncov_cont['A.Cases Proportion'] = cov_cont['Active Cases']\/cov_cont['Confirmed']\ncov_cont","9d0cfa95":"Dealing with NULL values","deb9ad93":"Joining datasets","d6ffc95f":"Calculate proportions"}}