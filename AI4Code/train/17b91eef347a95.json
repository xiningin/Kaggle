{"cell_type":{"f2deab65":"code","c491dd01":"code","75dab981":"code","e9acda6f":"code","20cccde6":"code","d5355f16":"code","482d655d":"code","bb7ec6d5":"code","7f7e5c58":"code","3e2d7f93":"code","24072d1d":"code","10e83e87":"code","34ef040b":"code","7a063164":"code","109f1003":"code","3996d016":"code","bc7fc3df":"code","4ae59252":"code","adaaa4bf":"code","0f2414d3":"code","757bebd0":"code","b35a0253":"code","b5c2038f":"code","512e095a":"code","e86f8c5e":"code","7f14aca1":"code","58fa21a8":"code","567e09c4":"code","050b33cf":"code","296ad1af":"code","1446b0be":"code","af5c3ba6":"code","63403765":"code","989c0a4d":"code","277b3720":"code","23a6423f":"code","e21fc9cd":"code","03f5f476":"code","a34951bb":"code","1c1d9923":"code","04ba26a2":"code","14ed5e46":"code","d2cb0d71":"code","64438098":"code","02ec231e":"code","8f32a2e3":"code","eb82e61b":"code","5ba077b7":"code","f9970170":"code","512d28c5":"code","ea7bb74e":"code","d7afe9aa":"code","e8b5f254":"code","c753ad43":"code","540216c1":"code","a6177ea8":"code","f9cb8b0b":"code","5586a7c7":"code","c259dee0":"code","8d7fafcc":"code","91aa52cc":"code","7a8f71c8":"markdown","1a2a1ced":"markdown","91fdd51b":"markdown","79d17158":"markdown","c600681c":"markdown","f16a5d83":"markdown","ece5b220":"markdown","39f5cfb7":"markdown","b20885f5":"markdown","1619a606":"markdown","93153d44":"markdown","a46ff5db":"markdown","7379197d":"markdown","26798f52":"markdown","1c031953":"markdown","de44c080":"markdown","0db7ef94":"markdown","343ef047":"markdown","a884ed12":"markdown","161b98ea":"markdown","1e9ee293":"markdown"},"source":{"f2deab65":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math","c491dd01":"df = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/train.csv',nrows=1000000)","75dab981":"df.shape","e9acda6f":"df.info()","20cccde6":"df.describe()","d5355f16":"df.isnull().sum()","482d655d":"df.dropna(inplace=True)\ndf.drop('key',axis=1, inplace=True)","bb7ec6d5":"df[(df.pickup_longitude == 0) | (df.pickup_latitude == 0) | (df.dropoff_longitude == 0) | (df.dropoff_latitude == 0)]","7f7e5c58":"drop_i = df[(df.pickup_longitude == 0) | (df.pickup_latitude == 0) | (df.dropoff_longitude == 0) | (df.dropoff_latitude == 0)].index\ndf = df.drop(drop_i)","3e2d7f93":"drop_i = df[df.fare_amount <= 0].index\ndf = df.drop(drop_i)","24072d1d":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.histplot(df.fare_amount)","10e83e87":"df.fare_amount.mean()","34ef040b":"df['fare_amount'].mean() + 5* df['fare_amount'].std()","7a063164":"df[df.fare_amount > 60]","109f1003":"drop_i = df[df.fare_amount > 60].index\ndf = df.drop(drop_i)","3996d016":"df.shape","bc7fc3df":"df.passenger_count.value_counts()","4ae59252":"df[(df.passenger_count == 0) | (df.passenger_count > 4)]","adaaa4bf":"drop_i = df[(df.passenger_count == 0) | (df.passenger_count > 4)].index\ndf = df.drop(drop_i)","0f2414d3":"df.shape","757bebd0":"def cal_dist(pickup_longitude,pickup_latitude,dropoff_longitude,dropoff_latitude):\n    dlon = np.deg2rad(dropoff_longitude) - np.deg2rad(pickup_longitude)\n    dlat = np.deg2rad(dropoff_latitude) - np.deg2rad(pickup_latitude)\n    pre_dist = np.sin(dlat \/ 2)**2 + np.cos(pickup_latitude) * np.cos(dropoff_latitude) * np.sin(dlon \/ 2)**2\n    c = 2 * np.arctan2(np.sqrt(pre_dist), np.sqrt(1 - pre_dist))\n    distance = 6373.0 * c\n    return distance","b35a0253":"df['distance'] = df.apply(lambda x: cal_dist(x.pickup_longitude,x.pickup_latitude,x.dropoff_longitude,x.dropoff_latitude),axis=1) ","b5c2038f":"df.head(3)","512e095a":"df.info()","e86f8c5e":"df['distance'] = np.int32(df['distance'])","7f14aca1":"df.distance.max(),df.distance.min(),df.distance.std()","58fa21a8":"df = df.drop(df[df.distance < 0].index)","567e09c4":"df = df.drop(df[df.distance > 783].index)","050b33cf":"# skipping the distance less than 1 km\nexcept_zero = df[df.distance != 0]\nsns.scatterplot(y = 'fare_amount',x = 'distance',data=except_zero,hue='distance')\nplt.show()","296ad1af":"def time_features(df,time_col):\n    df[time_col] = pd.to_datetime(df[time_col])\n    df['day'] = pd.to_datetime(df[time_col]).dt.day\n    df['dayofweek'] = pd.to_datetime(df[time_col]).dt.dayofweek\n    df['week']=pd.to_datetime(df[time_col]).dt.isocalendar().week\n    df['hour'] = pd.to_datetime(df[time_col]).dt.hour\n    df['minute'] = pd.to_datetime(df[time_col]).dt.minute\n    df['month'] = pd.to_datetime(df[time_col]).dt.month\n    return df","1446b0be":"df = time_features(df,'pickup_datetime')\ndf.head(5)","af5c3ba6":"df.info()","63403765":"df.week = np.int32(df.week)","989c0a4d":"def min_bin(min):\n    if min >= 46: return 3\n    elif min >= 31: return 2\n    elif min >= 16: return 1\n    elif min >= 0: return 0","277b3720":"df['min_bin'] = df.minute.apply(lambda x:min_bin(x))","23a6423f":"df.head(5)","e21fc9cd":"df.info()","03f5f476":"df.month = np.int32(df.month)","a34951bb":"df.month.value_counts().sort_index()","1c1d9923":"tp = df.groupby('month').sum().sort_values('fare_amount',ascending=False)\ntp.head(12)","04ba26a2":"tp = df.groupby('hour').sum().sort_values('fare_amount',ascending=False)\ntp.head(24)","14ed5e46":"tp = df.groupby('dayofweek').sum().sort_values('fare_amount',ascending=False)\ntp.head(7)","d2cb0d71":"tp = df.groupby(['pickup_longitude','pickup_latitude']).sum().sort_values('fare_amount',ascending=False)\ntp.head(5)","64438098":"tp = df.groupby(['dropoff_longitude','dropoff_latitude']).sum().sort_values('fare_amount',ascending=False)\ntp.head(5)","02ec231e":"fig, ax = plt.subplots()\nfig.set_size_inches(11.7, 8.27)\nsns.heatmap(df.drop(['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','minute'],axis=1).corr(),cmap='YlGnBu',linewidths=.5,annot=True)","8f32a2e3":"X = df.drop(['fare_amount', 'pickup_datetime', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude','minute'],axis=1)\ny = df.fare_amount","eb82e61b":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","5ba077b7":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","f9970170":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression().fit(X_train, y_train)\nreg.score(X_train, y_train)\ny_pred = reg.predict(X_test)\nprint('Linear regression, Root mean square is: ',np.sqrt(mean_squared_error(y_test,y_pred)))","512d28c5":"from sklearn.tree import DecisionTreeRegressor\nreg = DecisionTreeRegressor().fit(X_train, y_train)\nreg.score(X_train, y_train)\ny_pred = reg.predict(X_test)\nprint('DecisionTreeRegressor, Root mean square is: ',np.sqrt(mean_squared_error(y_test,y_pred)))","ea7bb74e":"import lightgbm as lgb\ngbm = lgb.LGBMRegressor().fit(X_train.values, y_train.values)\ngbm.score(X_train.values, y_train.values)\ny_pred = gbm.predict(X_test.values)\nprint('RandomForestRegressor, Root mean square is: ',np.sqrt(mean_squared_error(y_test,y_pred)))","d7afe9aa":"test = pd.read_csv('..\/input\/new-york-city-taxi-fare-prediction\/test.csv')","e8b5f254":"test.head(5)","c753ad43":"test['distance'] = test.apply(lambda x: cal_dist(x.pickup_longitude,x.pickup_latitude,x.dropoff_longitude,x.dropoff_latitude),axis=1) \ntest['distance'] = np.int32(test['distance'])\ntest = time_features(test,'pickup_datetime')\ntest['min_bin'] = test.minute.apply(lambda x:min_bin(x))","540216c1":"test.isnull().sum()","a6177ea8":"test.head(5)","f9cb8b0b":"X.columns","5586a7c7":"pred = test.drop(['key','pickup_datetime', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude','minute'],axis=1)","c259dee0":"fare_amount = gbm.predict(pred.values)","8d7fafcc":"submission = pd.DataFrame()\nsubmission['key'] = test['key']\nsubmission['fare_amount'] = fare_amount","91aa52cc":"submission.to_csv('submission.csv',index=False)","7a8f71c8":"# Submission","1a2a1ced":"* friday,saturday and sunday has minimum earning\n* wed,tue,thu has highest earning","91fdd51b":"* April, May, June are the highest grossing months\n* maybe because of tourist","79d17158":"###Null Island\nNull Island is the name used to refer to the point on the Earth's surface where the Prime Meridian and the Equator intersect, at zero degrees latitude and zero degrees longitude ( 0\u00b0N 0\u00b0E).","c600681c":"Negleting outliers using 5*standard deviation","f16a5d83":"creating bins for minute","ece5b220":"delete rows where longitude or latitude is equal to 0","39f5cfb7":"Creating new feature using pickupdatetime columns\n","b20885f5":"# Data Cleaning","1619a606":"If I want to earn as maximum as a uber owner then I only take out maximum taxis during peak hours between 6 pm to 22 pm","93153d44":"## Creating new features from timedate columns","a46ff5db":"The maximum amount of passengers allowed in a yellow taxicab by law is four (4) in a four (4) passenger taxicab or five (5) passengers in a five (5) passenger taxicab, except that an additional passenger must be accepted if such passenger is under the age of seven (7) and is held on the lap of an adult passenger seated\n\nhttps:\/\/www1.nyc.gov\/site\/tlc\/passengers\/passenger-frequently-asked-questions.page","7379197d":"Submit this file","26798f52":"## USE THE HAVERSINE FORMULA\n\nThe Haversine formula calculates the great-circle distance between two points. Start by calculating the change in latitude and longitude, in radians, and input the result into the Haversine formula (implemented below). Use the functions in the math library for trigonometry related calculations.","1c031953":"# Model","de44c080":"dropoff also showing same places","0db7ef94":"* highest earning and also passenger wise place is \"Keith Mitchell Forest, Squantuck Road, Seymour\"\n* second highest \"Maple Court, East 122nd Street\"\n\nhttps:\/\/www.gps-coordinates.net\/map\/state\/NY","343ef047":"Deleting rows where passenger_count == 0 or greate than 4","a884ed12":"delete rows that have fare price less or equal to 0","161b98ea":"New York\/Land area is 783.8 km\u00b2\n* so we can delete distance over 783","1e9ee293":"# I Hope this notebook helpful to you!!!"}}