{"cell_type":{"b8b44e05":"code","cd767d82":"code","27f01258":"code","232fc9b9":"code","d4bcec35":"code","b797cf99":"code","03fd57fa":"code","b3eeca9b":"code","c8a95057":"code","1b633037":"code","70e9ffb6":"code","2e686795":"code","ba42776b":"code","0e0b6ca4":"code","e6495bc9":"code","7a6c4ffb":"code","35cfd57f":"code","36bfda12":"code","7e3617bb":"code","a0779cc0":"code","2a6e9f12":"code","96449b8e":"code","d2e6062a":"code","ce0825bf":"code","e25f9f2b":"code","35e0f294":"markdown","e5457e46":"markdown","9069b6b9":"markdown","b86263e5":"markdown","cdc381ce":"markdown","92ebd330":"markdown","efdd929d":"markdown","ae87ad53":"markdown"},"source":{"b8b44e05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport gzip\n\ntest_file = '..\/input\/avazu-ctr-prediction\/test.gz'\nsamplesubmision_file = '..\/input\/avazu-ctr-prediction\/sampleSubmission.gz'","cd767d82":"chunksize = 10 ** 6\nnum_of_chunk = 0\ntrain = pd.DataFrame()\n    \nfor chunk in pd.read_csv('..\/input\/avazu-ctr-train\/train.csv', chunksize=chunksize):\n    num_of_chunk += 1\n    train = pd.concat([train, chunk.sample(frac=.05, replace=False, random_state=123)], axis=0)\n    print('Processing Chunk No. ' + str(num_of_chunk))     \n    \ntrain.reset_index(inplace=True)\n\n# \u5099\u4efdtrain \u8cc7\u6599\u9577\u5ea6\uff0c\u4ee5\u4fbf\u7a0d\u5f8cdf\u91cd\u65b0\u5206\u5272\u7d22\u5f15\u7528\u9014\ntrain_len = len(train)\ntrain_len","27f01258":"df = pd.concat([train, pd.read_csv(test_file, compression='gzip')]).drop(['index', 'id'], axis=1)","232fc9b9":"# \u5efa\u7acb\u4e00\u500b\u5c07hour\u8cc7\u6599\u8f49\u63db\u70ba\u65e5\u671f\u683c\u5f0f\u7684function\ndef get_date(hour):\n    y = '20'+str(hour)[:2]\n    m = str(hour)[2:4]\n    d = str(hour)[4:6]\n    return y+'-'+m+'-'+d\n\n# \u5efa\u7acbweekday\u6b04\u4f4d\uff0c\u5c07hour\u8f49\u63db\u5f8c\u586b\u5165\ndf['weekday'] = pd.to_datetime(df.hour.apply(get_date)).dt.dayofweek.astype(str)\n\n#\u00a0\u5efa\u7acb\u4e00\u500b\u5c07hour\u8cc7\u6599\u8f49\u63db\u70ba\u6642\u6bb5\u7684function\ndef tran_hour(x):\n    x = x % 100\n    while x in [23,0]:\n        return '23-01'\n    while x in [1,2]:\n        return '01-03'\n    while x in [3,4]:\n        return '03-05'\n    while x in [5,6]:\n        return '05-07'\n    while x in [7,8]:\n        return '07-09'\n    while x in [9,10]:\n        return '09-11'\n    while x in [11,12]:\n        return '11-13'\n    while x in [13,14]:\n        return '13-15'\n    while x in [15,16]:\n        return '15-17'\n    while x in [17,18]:\n        return '17-19'\n    while x in [19,20]:\n        return '19-21'\n    while x in [21,22]:\n        return '21-23'\n\n#\u00a0\u5c07hour\u8f49\u63db\u70ba\u6642\u6bb5\ndf['hour'] = df.hour.apply(tran_hour)","d4bcec35":"# \u78ba\u8a8d\u8cc7\u6599\u578b\u5225\ndf.info()","b797cf99":"len_of_feature_count = []\nfor i in df.columns[2:23].tolist():\n    print(i, ':', len(df[i].astype(str).value_counts()))\n    len_of_feature_count.append(len(df[i].astype(str).value_counts()))","03fd57fa":"# \u5efa\u7acb\u4e00\u500blist\uff0c\u5c07\u9700\u8981\u8f49\u63db\u884c\u5225\u7684\u7279\u5fb5\u540d\u7a31\u5b58\u5165\u8a72list\nneed_tran_feature = df.columns[2:4].tolist() + df.columns[13:23].tolist()\n\n# \u4f9d\u5e8f\u5c07\u8b8a\u6578\u8f49\u63db\u70baobject\u578b\u5225\nfor i in need_tran_feature:\n    df[i] = df[i].astype(str)","b3eeca9b":"obj_features = []\n\nfor i in range(len(len_of_feature_count)):\n    if len_of_feature_count[i] > 10:\n        obj_features.append(df.columns[2:23].tolist()[i])\nobj_features","c8a95057":"df_describe = df.describe()\ndf_describe","1b633037":"def obj_clean(X):\n    # \u5b9a\u7fa9\u4e00\u500b\u7e2e\u6e1b\u8cc7\u6599\u503c\u7684function\uff0c\u6bcf\u6b21\u8655\u7406\u4e00\u500b\u7279\u5fb5\u5411\u91cf\n\n    def get_click_rate(x):\n        # \u5b9a\u7fa9\u4e00\u500b\u53d6\u5f97\u9ede\u64ca\u7387\u7684function\n        temp = train[train[X.columns[0]] == x]\n        res = round((temp.click.sum() \/ temp.click.count()),3)\n        return res\n\n    def get_type(V, str):\n        # \u5b9a\u7fa9\u4e00\u500b\u53d6\u5f97\u65b0\u8cc7\u6599\u503c\u4e4b\u7d1a\u8ddd\u5224\u65b7\u7684function\n        very_high = df_describe.loc['mean','click'] + 0.04\n        higher = df_describe.loc['mean','click'] + 0.02\n        lower = df_describe.loc['mean','click'] - 0.02\n        very_low = df_describe.loc['mean','click'] - 0.04\n\n        vh_type = V[V[str] > very_high].index.tolist()\n        hr_type = V[(V[str] > higher) & (V[str] < very_high)].index.tolist()\n        vl_type = V[V[str] < very_low].index.tolist()\n        lr_type = V[(V[str] < lower) & (V[str] > very_low)].index.tolist()\n\n        return vh_type, hr_type, vl_type, lr_type\n\n    def clean_function(x):\n        # \u5b9a\u7fa9\u4e00\u500b\u4f9d\u64da\u7d1a\u8ddd\u8f49\u63db\u8cc7\u6599\u503c\u7684function\n        # \u5224\u65b7\u4e4b\u4f9d\u64da\u70ba\uff1a\u7e3d\u5e73\u5747\u9ede\u64ca\u7387\u7684\u6b63\u8ca0  4% \u70bavery_high(low), \u7e3d\u5e73\u5747\u9ede\u64ca\u7387\u7684\u6b63\u8ca0 2\uff05\u70bahigher (lower)\n        while x in type_[0]:\n            return 'very_high'\n        while x in type_[1]:\n            return 'higher'\n        while x in type_[2]:\n            return 'very_low'\n        while x in type_[3]:\n            return 'lower'\n        return 'mid'\n        \n    print('Run: ', X.columns[0])\n    fq = X[X.columns[0]].value_counts()\n    # \u5efa\u7acb\u4e00\u500b\u66ab\u5b58\u7684\u8cc7\u6599\u503c\u983b\u7387\u5217\u8868\n    # \u7406\u8ad6\u4e0a\uff0c\u5c07\u5168\u90e8\u7684\u8cc7\u6599\u503c\u90fd\u9032\u884c\u5206\u985e\u8f49\u63db\uff0c\u53ef\u5f97\u5230\u6700\u4f73\u6548\u679c\uff1b\u5be6\u52d9\u4e0a\u70ba\u4e86\u57f7\u884c\u6642\u9593\u6548\u80fd\uff0c\u5c07\u6368\u53bb\u983b\u7387\u4f4e\u65bc\u6392\u540d\u524d1000 row\u4ee5\u5f8c\u7684\u8cc7\u6599\u503c\u3002\n    if len(fq) > 1000:\n        fq = fq[:1000]\n\n    # \u5c07\u983b\u7387\u5217\u8868\u8f49\u63db\u70badataframe\uff0c\u4e26\u5c07index\u586b\u5165\u4e00\u500b\u65b0\u7684\u6b04\u4f4d\u3002\n    fq = pd.DataFrame(fq)\n    fq['new_column'] = fq.index    \n\n    # \u4f7f\u7528index\u53eb\u7528get_click_rate function\uff0c\u53d6\u5f97\u6bcf\u500b\u8cc7\u6599\u503c\u7684\u9ede\u64ca\u7387\n    fq['click_rate'] = fq.new_column.apply(get_click_rate)\n\n    # \u53eb\u7528 get_type function\u53d6\u5f97\u5206\u985e\u7d1a\u8ddd\uff0c\u4e26\u5132\u5b58\u70ba\u4e00\u500blist\uff0c\u4ee5\u4fbf\u63d0\u4f9b\u7d66\u4e0b\u4e00\u500bclean_function\u4f7f\u7528\n    type_ = get_type(fq, 'click_rate')\n\n    # \u53eb\u7528 clean_funtion funtion\uff0c\u56de\u50b3\u8f49\u63db\u5f8c\u7684\u7279\u5fb5\u5411\u91cf\n    return X[X.columns[0]].apply(clean_function)\n\n# \u4f7f\u7528for \u8ff4\u5708\u5c07\u9700\u8f49\u63db\u7684\u7279\u5fb5\u8f38\u5165\u5230 obj_clean function\nfor i in obj_features:    \n    df[[i]] = obj_clean(df[[i]])\n\ndf","70e9ffb6":"# \u78ba\u8a8d\u6240\u6709\u7279\u5fb5\u7684\u8cc7\u6599\u503c\u72c0\u6cc1\nfor i in df.columns:\n    sns.countplot(x = i, hue = \"click\", data = df)\n    plt.show()","2e686795":"df.drop(['device_id', 'C14', 'C17', 'C19', 'C20', 'C21'], axis=1, inplace=True)","ba42776b":"# \u5c0d\u6240\u6709\u8b8a\u6578\u9032\u884c one-hot \u7de8\u78bc\ndf = pd.get_dummies(df)\n\n# \u4f9d\u64da\u8655\u7406\u904e\u5f97df\u8cc7\u6599\u8868\uff0c\u91cd\u65b0\u5c07train, test\u5206\u5272\u51fa\u4f86\ntrain = df[:train_len]\ntest = df[train_len:]","0e0b6ca4":"# # \u5c07\u8655\u7406\u904e\u7684train, test \u8cc7\u6599\u96c6\u532f\u51fa\uff0c\u907f\u514d\u6bcf\u6b21\u91cd\u65b0\u7684\u5197\u9577\u8655\u7406\u6642\u9593\u3002\n\n# train.to_csv('new_train.csv', index=False)\n# test.to_csv('new_test.csv', index=False)","e6495bc9":"# # \u8b80\u53d6\u8655\u7406\u904e\u7684train, test \u8cc7\u6599\u96c6\uff0c\u8df3\u904e\u5197\u9577\u7684\u91cd\u65b0\u57f7\u884c\u8655\u7406\u6642\u9593\u3002\n# train = pd.read_csv('new_train.csv')\n# test = pd.read_csv('new_test.csv')","7a6c4ffb":"del df","35cfd57f":"# \u5f9etrain\u8cc7\u6599\u96c6\u4e2d\uff0c\u6a19\u7c64\u70ba0\u7684\u8cc7\u6599\u4e2d\uff0c\u96a8\u6a5f\u62bd\u6a23\u8207\u6a19\u7c64\u70ba1\u4e00\u6a23\u591a\u7684\u6578\u91cf\uff0c\u4e26\u5c07\u5176\u7d50\u5408\u6210\u6b63\u53cd\u6a19\u7c64\u4f54\u7b46\u5404\u4f5450\uff05\u7684\u8cc7\u6599\u96c6\npre_X = train[train['click'] == 0].sample(n=len(train[train['click'] == 1]), random_state=111)\npre_X = pd.concat([pre_X, train[train['click'] == 1]]).sample(frac=1)\npre_y = pre_X[['click']]\npre_X.drop(['click'], axis=1, inplace=True)\ntest.drop(['click'], axis=1, inplace=True)","36bfda12":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\n# \u5c07\u65b0\u7684\u8cc7\u6599\u96c6\u5206\u5272\u70ba\u8a13\u7df4\u96c6\u8207\u9a57\u8b49\u96c6\npre_X_train, pre_X_test, pre_y_train, pre_y_test = train_test_split(pre_X, pre_y, test_size=0.20, stratify=pre_y, random_state=1)","7e3617bb":"# \u57f7\u884cGrid Search\u8abf\u53c3\uff0c\u5efa\u7acb100\u68f5\u6a39\u4f86\u53d6\u5f97\u6700\u4f73\u53c3\u6578\nparams = {\"criterion\":[\"gini\", \"entropy\"], \"max_depth\":range(1,20)}\ngrid_search = GridSearchCV(DecisionTreeClassifier(), param_grid=params, scoring='roc_auc', cv=100, verbose=1, n_jobs=-1)\ngrid_search.fit(pre_X_train, pre_y_train)\ngrid_search.best_score_, grid_search.best_estimator_, grid_search.best_params_","a0779cc0":"# \u4f9d\u64daGrid Search\u7684\u7d50\u679c\u5efa\u7acb\u4e00\u500b\u6c7a\u7b56\u6a39\u6a21\u578b\uff0c\u4e26fit\u5b8c\u6574\u8cc7\u6599 (\u524d\u7f6e\u8cc7\u6599)\ntree = grid_search.best_estimator_\ntree.fit(pre_X,pre_y)\n\n# \u8f38\u51fa\u91cd\u8981\u7279\u5fb5\uff0c\u4e26\u4f9d\u7279\u5fb5\u4e4b\u91cd\u8981\u6027\u6392\u5e8f\nfeature_importances = pd.DataFrame(tree.feature_importances_)\nfeature_importances.index = pre_X_train.columns\nfeature_importances = feature_importances.sort_values(0,ascending=False)\nfeature_importances","2a6e9f12":"# \u8abf\u6574\u524d\u7f6e\u4f5c\u696d\u8a13\u7df4\u96c6\u8207\u9a57\u8b49\u96c6\uff0c\u5c07\u7279\u5fb5\u4f9d\u7279\u5fb5\u91cd\u8981\u6027\u7e2e\u6e1b\u70ba\u91cd\u8981\u6027\u6392\u540d\u4e4b1\/3\npre_X_train = pre_X_train[feature_importances.index[:int(len(feature_importances)\/3)]]\npre_X_test = pre_X_test[feature_importances.index[:int(len(feature_importances)\/3)]]","96449b8e":"# \u4f7f\u752833\uff05\u7684\u91cd\u8981\u7279\u5fb5\u91cd\u65b0\u9032\u884cGrid Search\u8abf\u53c3\nparams = {\"criterion\":[\"gini\", \"entropy\"], \"max_depth\":range(1,12)}\ngrid_search = GridSearchCV(DecisionTreeClassifier(), param_grid=params, scoring='roc_auc', cv=100, verbose=1, n_jobs=-1)\ngrid_search.fit(pre_X_train, pre_y_train)\ngrid_search.best_score_, grid_search.best_estimator_, grid_search.best_params_","d2e6062a":"#\u00a0\u8abf\u6574\u524d\u7f6e\u4f5c\u696d\u5b8c\u6574\u8cc7\u6599\u96c6\uff0c\u5c07\u7279\u5fb5\u4f9d\u7279\u5fb5\u91cd\u8981\u6027\u7e2e\u6e1b\u70ba\u91cd\u8981\u6027\u6392\u540d\u4e4b1\/3\npre_X = pre_X[feature_importances.index[:int(len(feature_importances)\/3)]]\n\n# \u4f9d\u64daGrid Search\u7684\u7d50\u679c\u5efa\u7acb\u4e00\u500b\u6c7a\u7b56\u6a39\u6a21\u578b\uff0c\u4e26fit\u5b8c\u6574\u8cc7\u6599 (\u524d\u7f6e\u8cc7\u6599)\ntree = grid_search.best_estimator_\ntree.fit(pre_X,pre_y)\n\n# \u8f38\u51fa\u91cd\u8981\u7279\u5fb5\uff0c\u4e26\u4f9d\u7279\u5fb5\u4e4b\u91cd\u8981\u6027\u6392\u5e8f\nfeature_importances = pd.DataFrame(tree.feature_importances_)\nfeature_importances.index = pre_X_train.columns\nfeature_importances = feature_importances.sort_values(0,ascending=False)\nfeature_importances","ce0825bf":"# \u6700\u7d42\u9810\u6e2c\u6a21\u578b\u4e4b\u7279\u5fb5\uff0c\u5c07\u63a1\u7528\u7279\u5fb5\u503c .005\u4ee5\u4e0a\u7684\u8b8a\u6578\nfeature_len = len(feature_importances[feature_importances[feature_importances.columns[0]] > 0.005])\n\n# \u8abf\u6574\u6700\u7d42\u5b8c\u6574Train Set \u8207 Test set\u4e4b\u7279\u5fb5\ny = train[['click']]\nX = train[feature_importances[:feature_len].index]\ntest = test[feature_importances[:feature_len].index]","e25f9f2b":"from xgboost import XGBClassifier\n\n# \u4f7f\u7528xgboost \u5efa\u6a21\uff0c\u4e26\u6307\u5b9a\u5148\u524d\u8abf\u53c3\u5f97\u5230\u7684\u7bc0\u9ede\u6df1\u5ea6\u9650\u5236\u4f7f\u7528xgboost \u5efa\u6a21\uff0c\u4e26\u6307\u5b9a\u5148\u524d\u8abf\u53c3\u5f97\u5230\u7684\u7bc0\u9ede\u6df1\u5ea6\u9650\u5236\nmodel = XGBClassifier(tree_method = 'gpu_hist', n_jobs=-1, n_estimators=500, max_depth=11)\nmodel.fit(X,y.values.ravel())\ny_pred = model.predict(X)\nprint(\"Roc_auc_score: \",roc_auc_score(y,y_pred)*100,\"%\")\n\n# \u7e6a\u51fa\u6df7\u6dc6\u77e9\u9663\uff0c\u67e5\u770b\u9810\u6e2c\u7d50\u679c\nconfmat = confusion_matrix(y_true=y, y_pred=y_pred, labels=[0, 1])\n\nfig, ax = plt.subplots(figsize=(2.5, 2.5))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(confmat.shape[0]):\n    for j in range(confmat.shape[1]):\n        ax.text(x=j, y=i, s=confmat[i, j], va='center', ha='center')\n\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\n\nplt.tight_layout()\nplt.show()\n\n# \u532f\u51fasubmission\u4e26\u9032\u884c\u63d0\u4ea4\nsubmission = pd.read_csv(samplesubmision_file, compression='gzip', index_col='id')\nsubmission[submission.columns[0]] = model.predict_proba(test)[:,1]\nsubmission.to_csv('submission.csv')","35e0f294":"\u4e00\u4e9b\u7279\u5fb5\u7684value count\u6975\u9ad8\uff0c\u751a\u81f3\u6709\u4e0a\u767e\u842c\u500b\u8cc7\u6599\u503c\uff0c\u9019\u7a2e\u60c5\u6cc1\u9032\u884c one-hot\u7de8\u78bc\uff0c\u7121\u7591\u6703\u9020\u6210\u7dad\u5ea6\u5d29\u6f70\u3002\u5728\u6b64\u5c07\u6bcf\u500b\u7279\u5fb5\u7684value count\u4ee510\u70ba\u965010\uff0c\u4e00\u65e6\u8d85\u904e10\u500b\u503c\uff0c\u5247\u5c07\u9032\u884c\u7e2e\u6e1b\u4f5c\u696d\u3002\n\n\u7e2e\u6e1b\u7684\u65b9\u5f0f\u70ba\uff0c\u8a08\u7b97\u67d0\u8b8a\u6578\u6240\u6709\u503c\u7684\u9ede\u64ca\u7387\uff0c\u4f9d\u9ede\u64ca\u7387\u5340\u5206\u70bavery_high, higher, mid, lower, very_low\uff0c\u7b495\u500b\u7d1a\u8ddd\u3002","e5457e46":"\u7531\u65bc\u8cc7\u6599\u96c6\u975e\u5e38\u7684\u9f90\u5927\uff0c\u540c\u6642\u6b63\u5411label\u7684\u4f54\u6bd4\u50c5\u4f54\u5168\u90e8\u8cc7\u659917\uff05\u5de6\u53f3\uff0c\u6bd4\u4f8b\u660e\u986f\u5931\u8861\uff0c\u9700\u8981\u5177\u6709\u5f37\u5316\u52a0\u6b0a\u529f\u80fd\u7684\u6f14\u7b97\u6cd5\u3002\u56e0\u6b64\u5728\u6b64\u6c7a\u5b9a\u4f7f\u7528xgboost\u6f14\u7b97\u6cd5\uff0c\u89e3\u6c7a\u5f37\u5316\u6b0a\u91cd\u554f\u984c\uff0c\u540c\u6642\u904b\u7528GPU\u6709\u6548\u7bc0\u7701\u904b\u7b97\u6642\u9593\u3002\n\n\u70ba\u7bc0\u7701\u8abf\u53c3\u6642\u9593\uff0c\u5be6\u4f5c\u9810\u6e2c\u6a21\u578b\u4e4b\u524d\uff0c\u5c07\u5148\u4ee5\u5efa\u7acb100\u682a\u6c7a\u7b56\u6a39\uff0c\u4ee5Grid Search\u5c0b\u627e\u6700\u4f73\u53c3\u6578\u8207\u91cd\u8981\u7279\u5fb5\uff0c\u6700\u5f8c\u518d\u4ee5xgboost\u6f14\u7b97\u6cd5\u5efa\u7acb\u6a21\u578b\u3002\u70ba\u4e86\u7e2e\u77ed\u6c7a\u7b56\u6a39\u7684\u5efa\u5236\u6642\u9593\uff0c\u5c07\u5f9e\u8ca0\u5411label\u7684\u8cc7\u6599\u4e2d\u62bd\u6a23\uff0c\u8207\u6240\u6709\u6b63\u5411label\u7684\u8cc7\u6599\u6574\u4f75\u6210\u4e00\u4efd\u5404\u4f5450\uff05\u7684\u8cc7\u6599\u96c6\uff0c\u4f86\u5e73\u8861\u6b0a\u91cd\u554f\u984c\u3002\u540c\u6642\u4e5f\u56e0\u70ba\u6b63\u53cdlabel\u6bd4\u4f8b\u5e73\u8861\uff0c\u5c07\u6703\u63a1\u7528ROC_AUC \u5206\u6578\u4f86\u9032\u884c\u8abf\u53c3\u3002","9069b6b9":"\u8003\u91cf\u672c\u6b21\u9810\u6e2c\u76ee\u7684\u70ba\u752810\u5929\u7684\u9ede\u64ca\u72c0\u6cc1\u8a13\u7df4\u6a21\u578b\uff0c\u7528\u4ee5\u9810\u6e2c\u573011\u5929\u7684\u72c0\u6cc1\uff0c\u56e0\u6b64\u5e74\u6708\u65e5\u671f\u7121\u610f\u7fa9\uff0c\u4f46weekday\u7406\u8ad6\u4e0a\u6709\u610f\u7fa9\u3002\u6240\u4ee5\u628a\u539f\u59cbhour\u7279\u5fb5\u4e2d\u7684\u65e5\u671f\uff0c\u8f49\u5316\u70baweekday\u3002\n\n\u53c8\uff0c\u6bcf\u5929\u7684\u6642\u6bb5\u4f9d\u64da\u6bcf\u500b\u4eba\u4e0d\u540c\u7684\u751f\u6d3b\u7fd2\u6163\uff0c\u7406\u8ad6\u4e0a\u6709\u610f\u7fa9\u3002\u672a\u907f\u514d\u592a\u591a\u8b8a\u6578\u9020\u6210\u7dad\u5ea6\u5d29\u6f7024\uff0c\u5c07\u5c0f\u6642\u7684\u6642\u9593\u5340\u5206\u70ba12\u500b\u6642\u6bb5\uff0c\u6bcf\u5169\u5c0f\u6642\u4e00\u500b\u6642\u6bb5\u3002","b86263e5":"\u518d\u5c07test\u8cc7\u6599\u96c6\u7684\u8cc7\u6599\u8b80\u51fa\uff0c\u4e26\u628atrain, test \u5408\u4f75\u6210\u4e00\u500bdf\uff0c\u4ee5\u4fbf\u540c\u6642\u9032\u884c\u8cc7\u6599\u9810\u8655\u7406\u3002","cdc381ce":"\u672c\u6b21\u63d0\u4ea4\u5206\u6578\u70ba .40560\uff1bLeader Board Top 1 \u5206\u6578\u70ba 0.37913","92ebd330":"\u6839\u64da\u4e0a\u9762\u6240\u5217\u51fa\u7684\u5716\u8868\u4f86\u770b\uff0c\u986f\u7136 ['device_id',\u00a0'C14',\u00a0'C17',\u00a0'C19',\u00a0'C20',\u00a0'C21'] \u9019\u4e9b\u7279\u5fb5\uff0c\u50c5\u6709\u4e00\u7a2evalue\uff0c\u5c0d\u65bc\u9810\u6e2c\u6a21\u578b\u4f86\u8aaa\u6c92\u6709\u610f\u7fa9\uff0c\u56e0\u6b64\u5c07\u9019\u4e9b\u7279\u5fb5\u79fb\u51fa\u8cc7\u6599\u96c6\u3002","efdd929d":"\u7531\u65bc\u6587\u4ef6\u7684Row\u6578\u91cf\u592a\u904e\u9f90\u5927 \uff08\u8d85\u904e4\u5343\u842c\u7b46\uff09 \uff0cPandas DataFrame\u7121\u6cd5\u8b80\u53d6\u9019\u9ebc\u5927\u7684\u8cc7\u6599\u91cf\uff0c\u56e0\u6b64\u8cc7\u6599\u4ee5\u6bcf100\u842c\u7b46\u70ba\u4e00\u6279\u6b21\u5206\u6279\u8b80\u53d6\uff0c\u4e26\u4e14\u5f9e\u6bcf\u500b\u6279\u6b21\u7684\u8cc7\u6599\u4e2d\uff0c\u96a8\u6a5f\u62bd\u6a235\uff05\u7684\u8cc7\u6599\uff0c\u96c6\u6210\u4e00\u500b\u65b0\u7684train set\u3002","ae87ad53":"\u78ba\u8a8d\u6bcf\u500b\u7279\u5fb5\u7684value count\uff0c\u767c\u73feint\u578b\u5225\u7684\u7279\u5fb5\uff0c\u6700\u591avalue\u7684\u7279\u5fb5\u50c54,333\u500bvalue count\uff0c\u518d\u4e00\u500b600\u842c\u7b46\u8cc7\u6599\u7684\u8cc7\u6599\u96c6\u4e2d\uff0c\u986f\u7136\u975e\u9023\u7e8c\u884c\u8b8a\u6578\u3002\u7531\u6b64\u53ef\u65b7\u5b9a\uff0c\u672c\u8cc7\u6599\u96c6\u7684\u6240\u6709\u7279\u5fb5\uff0c\u7686\u70baObject\u578b\u614b\u7684\u8b8a\u6578\u3002"}}