{"cell_type":{"2139efce":"code","fdb3b989":"code","70b1d066":"code","084c6202":"code","57c7f78d":"code","0d0b4641":"code","aa3aa0d5":"code","5ef06aa3":"code","c5b10630":"code","f6c3c52c":"code","82fb889e":"code","39a10eb0":"code","ea5ea481":"code","0b110298":"code","8a983905":"code","84048b5c":"code","78c955a2":"code","07e7f50c":"code","74489a3a":"code","9b4dcdcb":"code","2a6589aa":"code","16845735":"code","c8ad4355":"markdown","262fac9c":"markdown","324c1007":"markdown","8b38175c":"markdown","e7770d34":"markdown","7c1ef497":"markdown","a23d6b6e":"markdown","268a9473":"markdown","2826b6bf":"markdown","d54f48b9":"markdown","6dd83166":"markdown","e9393531":"markdown","eecdf48c":"markdown"},"source":{"2139efce":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom numpy import array\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Embedding\n","fdb3b989":"print(os.listdir('..\/input'))","70b1d066":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","084c6202":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","57c7f78d":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","0d0b4641":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# irishtimes-date-text.csv has 1425460 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('..\/input\/irishtimes-date-text.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'irishtimes-date-text.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","aa3aa0d5":"df1.head(5)","5ef06aa3":"plotPerColumnDistribution(df1, 10, 5)","c5b10630":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# w3-latnigrin-text.csv has 616037 rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('..\/input\/w3-latnigrin-text.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'w3-latnigrin-text.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f6c3c52c":"df2.head(5)","82fb889e":"plotPerColumnDistribution(df2, 10, 5)","39a10eb0":"print(df1.describe())\nprint(\"----------------------------\")\nprint(df1.groupby('headline_category').size())\nprint(\"----------------------------\")\ndf1_numpy=df1.to_numpy()\nprint(\"df1_numpy.shape= \",df1_numpy.shape)\n\n#Separate X & y\nX=df1_numpy[:,2]\ny=df1_numpy[:,1]\nprint (\"X.shape=\",X.shape)\nprint (\"y.shape=\",y.shape)\n\n# Check uniqueness y\nunique_elements_y, counts_elements_y= np.unique(y[:], return_counts=True)\nprint(\"y unique_elements:\")\nprint(unique_elements_y)\nprint(\"count y unique_elements:\")\nprint(counts_elements_y)\n\n#Apply One hot encoding to y\nimport category_encoders as ce\nfrom sklearn.preprocessing import OneHotEncoder\nohe =  ce.OneHotEncoder(handle_unknown='ignore')\ny_ohe=ohe.fit_transform(y)\nprint(\"y.shape (after OHE)= \",y_ohe.shape)\nprint(\"y= \")\nprint(y[540:546])\n\n","ea5ea481":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_ohe_train, y_ohe_test = train_test_split(X, y_ohe, test_size=0.2, random_state=0)\n\n#Check if the train and test data has the same dist\nunique_elements_y_train, counts_elements_y_train=np.unique(y_ohe_train, axis=0, return_counts=True)\nunique_elements_y_test, counts_elements_y_test=np.unique(y_ohe_test, axis=0, return_counts=True)\n\nprint(\"y_train distribution:\")\nprint(unique_elements_y_train)\nprint(counts_elements_y_train)\ncounts_elements_y_train_dist=[]\nfor i in range(counts_elements_y_train.shape[0]):\n    b=counts_elements_y_train[i]\/y_ohe.shape[0]*100.0\n    #counts_elements_y_train_dist.append(counts_elements_y_train[i]\/sum(counts_elements_y_train)*100.0)\n    counts_elements_y_train_dist.append(b)\nprint(counts_elements_y_train_dist)\nprint(\"sum= \",sum(counts_elements_y_train_dist))\n\nprint(\"y_test distribution:\")\nprint(unique_elements_y_test)\nprint(counts_elements_y_test)\ncounts_elements_y_test_dist=[]\nfor i in range(counts_elements_y_test.shape[0]):\n    b2=counts_elements_y_test[i]\/y_ohe.shape[0]*100.0\n    #counts_elements_y_test_dist.append(counts_elements_y_test[i]\/sum(counts_elements_y_test)*100.0)\n    counts_elements_y_test_dist.append(b2)\nprint(counts_elements_y_test_dist)\nprint(\"sum= \",sum(counts_elements_y_test_dist))\nprint(\"----------------------------\")\n","0b110298":"import category_encoders as ce\nfrom sklearn.preprocessing import LabelEncoder\n\nce_ord = ce.OrdinalEncoder(y)\ny_ce_ord=ce_ord.fit_transform(y)\ny_ce_ord=y_ce_ord.to_numpy()        # change from panda dataframe to numpy array\nprint(\"y_ce_ord_numpy.shape= \",y_ce_ord.shape)\nprint(\"y_ce_ord_numpy type= \",type(y_ce_ord))\n\nX_ce_ord_train, X_ce_ord_test, y_ce_ord_train, y_ce_ord_test = train_test_split(X, y_ce_ord, test_size=0.2, random_state=0)\n\n#Check if the train and test data has the same dist\nunique_elements_y_train, counts_elements_y_train=np.unique(y_ce_ord_train, axis=0, return_counts=True)\nunique_elements_y_test, counts_elements_y_test=np.unique(y_ce_ord_test, axis=0, return_counts=True)\n\nprint(\"y_ce_ord_train distribution:\")\nprint(unique_elements_y_train)\nprint(counts_elements_y_train)\ncounts_elements_y_train_dist=[]\nfor i in range(counts_elements_y_train.shape[0]):\n    b=counts_elements_y_train[i]\/y_ce_ord_train.shape[0]*100.0\n    #counts_elements_y_train_dist.append(counts_elements_y_train[i]\/sum(counts_elements_y_train)*100.0)\n    counts_elements_y_train_dist.append(b)\nprint(counts_elements_y_train_dist)\nprint(\"sum= \",sum(counts_elements_y_train_dist))\n\nprint(\"y_ce_ord_test distribution:\")\nprint(unique_elements_y_test)\nprint(counts_elements_y_test)\ncounts_elements_y_test_dist=[]\nfor i in range(counts_elements_y_test.shape[0]):\n    b2=counts_elements_y_test[i]\/y_ce_ord_test.shape[0]*100.0\n    #counts_elements_y_test_dist.append(counts_elements_y_test[i]\/sum(counts_elements_y_test)*100.0)\n    counts_elements_y_test_dist.append(b2)\nprint(counts_elements_y_test_dist)\nprint(\"sum= \",sum(counts_elements_y_test_dist))\nprint(\"----------------------------\")\n","8a983905":"#Apply pre-processing to text data\nimport nltk\nimport re\nfrom sklearn.datasets import load_files\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\n\nprint(\"X_train initial =\")\nprint(X_train[0:3])\n'''\nstemmer = WordNetLemmatizer()\ndocuments = []\n\nfor sen in range(0, len(X)):    #use Regex Expressions from Python re library to perform different preprocessing tasks\n    # Remove all the special characters\n    document = re.sub(r'\\W', ' ', str(X[sen]))\n\n    # remove all single characters\n    document = re.sub(r'\\s+[a-zA-Z]\\s+', ' ', document)\n    \n    # Remove single characters from the start\n    document = re.sub(r'\\^[a-zA-Z]\\s+', ' ', document) \n    \n    # Substituting multiple spaces with single space\n    document = re.sub(r'\\s+', ' ', document, flags=re.I)\n    \n    # Removing prefixed 'b'\n    document = re.sub(r'^b\\s+', '', document)\n    \n    # Converting to Lowercase\n    document = document.lower()\n    \n    # Lemmatization\n    document = document.split()\n\n    document = [stemmer.lemmatize(word) for word in document]\n    document = ' '.join(document)\n    \n    documents.append(document)\n\n# Bag of Words\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(max_features=1500, min_df=5, max_df=0.7, stop_words=stopwords.words('english'))\nX = vectorizer.fit_transform(documents).toarray()\nprint(\"X.shape after Bag of Words= \",X.shape)\nprint(X[0:3])\n#max_features only need 151 columns, but print out shows that the transformation failed\n'''\n\ncount_vect = CountVectorizer(analyzer='word', token_pattern=r'\\w{1,}')\ncount_vect.fit(X)\n\n# transform the training and validation data using count vectorizer object\nX_train_count =  count_vect.transform(X_train)\nX_test_count =  count_vect.transform(X_test)\nX_ce_ord_train_count =  count_vect.transform(X_ce_ord_train)\nX_ce_ord_test_count =  count_vect.transform(X_ce_ord_test)\n\nprint(\"X_train_count.shape after CountVectorizer= \",X_train_count.shape)\nprint(X_train_count)\nprint(\"X_test_count.shape after CountVectorizer= \",X_test_count.shape)\nprint(X_test_count)\n#max_features only need 151 columns #(1000, 2781)\nprint(\"----------------------------\")","84048b5c":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\n# word level tf-idf\ntfidf_vect = TfidfVectorizer(analyzer='word', token_pattern=r'\\w{1,}', max_features=5000)\ntfidf_vect.fit(X)\nX_train_tfidf =  tfidf_vect.transform(X_train)\nX_test_tfidf =  tfidf_vect.transform(X_test)\nX_ce_ord_train_tfidf =  tfidf_vect.transform(X_ce_ord_train)\nX_ce_ord_test_tfidf =  tfidf_vect.transform(X_ce_ord_test)\n\nprint(\"X_train_tfidf= \",X_train_tfidf.shape)     #(800, 2781)\nprint(\"X_test_tfidf= \",X_test_tfidf.shape)     #(200, 2781)\nprint(X_train_tfidf)\nprint(\"---------------------------\")\n\n# ngram level tf-idf \ntfidf_vect_ngram = TfidfVectorizer(analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(2,3), max_features=5000)\ntfidf_vect_ngram.fit(X)\nX_train_tfidf_ngram =  tfidf_vect_ngram.transform(X_train)\nX_test_tfidf_ngram =  tfidf_vect_ngram.transform(X_test)\nX_ce_ord_train_tfidf_ngram =  tfidf_vect_ngram.transform(X_ce_ord_train)\nX_ce_ord_test_tfidf_ngram =  tfidf_vect_ngram.transform(X_ce_ord_test)\n\nprint(\"X_train_tfidf_ngram= \",X_train_tfidf_ngram.shape)     #(800, 5000)\nprint(\"X_test_tfidf_ngram= \",X_test_tfidf_ngram.shape)     #(200, 5000)\nprint(X_train_tfidf_ngram)\nprint(\"---------------------------\")\n\n# characters level tf-idf\ntfidf_vect_ngram_chars = TfidfVectorizer(analyzer='char', token_pattern=r'\\w{1,}', ngram_range=(2,3), max_features=5000)\ntfidf_vect_ngram_chars.fit(X)\nX_train_tfidf_ngram_chars =  tfidf_vect_ngram_chars.transform(X_train) \nX_test_tfidf_ngram_chars =  tfidf_vect_ngram_chars.transform(X_test)\nX_ce_ord_train_tfidf_ngram_chars =  tfidf_vect_ngram_chars.transform(X_ce_ord_train) \nX_ce_ord_test_tfidf_ngram_chars =  tfidf_vect_ngram_chars.transform(X_ce_ord_test)\n\nprint(\"X_train_tfidf_ngram_chars= \",X_train_tfidf_ngram_chars.shape)     #(800, 4791)\nprint(\"X_test_tfidf_ngram_chars= \",X_test_tfidf_ngram_chars.shape)     #(200, 4791)\nprint(X_train_tfidf_ngram_chars)\nprint(\"---------------------------\")","78c955a2":"#Training & Evaluation-------------------------------------------------\n#Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n\nclassifier_RF01 = RandomForestClassifier(n_estimators=1000, random_state=0)\nclassifier_RF01.fit(X_train_count, y_ohe_train)\n\ny_pred = classifier_RF01.predict(X_test_count)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Vector count-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ohe_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ohe_test, y_pred))   #52 %\n\nclassifier_RF02 = RandomForestClassifier(n_estimators=1000, random_state=0)\nclassifier_RF02.fit(X_train_tfidf, y_ohe_train)\n\ny_pred = classifier_RF01.predict(X_test_tfidf)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Word-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ohe_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ohe_test, y_pred))   #52 %\n\nclassifier_RF03 = RandomForestClassifier(n_estimators=1000, random_state=0)\nclassifier_RF03.fit(X_train_tfidf_ngram, y_ohe_train)\n\ny_pred = classifier_RF03.predict(X_test_tfidf_ngram)\n\nprint(\"N gram-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ohe_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ohe_test, y_pred))     # 6.5%\n\nclassifier_RF04 = RandomForestClassifier(n_estimators=1000, random_state=0)\nclassifier_RF04.fit(X_train_tfidf_ngram_chars, y_ohe_train)\n\ny_pred = classifier_RF04.predict(X_test_tfidf_ngram_chars)\n\nprint(\"N gram chars-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ohe_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ohe_test, y_pred))    # 42%\n","07e7f50c":"# Naive Bayes (use X & y of ce_ordinal )\nfrom sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics, svm\n\nclassifier_NB01 = naive_bayes.MultinomialNB()\n#classifier_NB01 = naive_bayes.GaussianNB()\n\ny_ce_ord_train=y_ce_ord_train.ravel() #flatten from column wise to array wise\n\nclassifier_NB01.fit(X_train_count.toarray(), y_ce_ord_train)\n\ny_pred = classifier_NB01.predict(X_test_count.toarray())\nprint(\"Vector count-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))   #58 %\n\nclassifier_NB02 = naive_bayes.MultinomialNB()\n#classifier_NB02 = naive_bayes.GaussianNB()\nclassifier_NB02.fit(X_ce_ord_train_tfidf, y_ce_ord_train)\n\ny_pred = classifier_NB02.predict(X_ce_ord_test_tfidf.toarray())\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Word-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_NB03 = naive_bayes.MultinomialNB()\nclassifier_NB03.fit(X_train_tfidf_ngram, y_ce_ord_train)\n\ny_pred = classifier_NB03.predict(X_ce_ord_test_tfidf_ngram)\n\nprint(\"N gram-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))     # 52%\n\nclassifier_NB04 = naive_bayes.MultinomialNB()\nclassifier_NB04.fit(X_ce_ord_train_tfidf_ngram_chars, y_ce_ord_train)\n\ny_pred = classifier_NB04.predict(X_ce_ord_test_tfidf_ngram_chars)\n\nprint(\"N gram chars-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))    # 42%\n","74489a3a":"# Logistics Regression (use X & y of ce_ordinal)\n\nclassifier_LogR01 = linear_model.LogisticRegression()\nclassifier_LogR01.fit(X_ce_ord_train_count, y_ce_ord_train)\n\ny_pred = classifier_LogR01.predict(X_ce_ord_test_count)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Vector count--------------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))   #56 %\n\nclassifier_LogR02 = linear_model.LogisticRegression()\nclassifier_LogR02.fit(X_ce_ord_train_tfidf, y_ce_ord_train)\n\ny_pred = classifier_LogR02.predict(X_ce_ord_test_tfidf)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Word-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_LogR03 = linear_model.LogisticRegression()\nclassifier_LogR03.fit(X_ce_ord_train_tfidf_ngram, y_ce_ord_train)\n\ny_pred = classifier_LogR03.predict(X_ce_ord_test_tfidf_ngram)\n\nprint(\"N gram-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))     # 52%\n\nclassifier_LogR04 = linear_model.LogisticRegression()\nclassifier_LogR04.fit(X_ce_ord_train_tfidf_ngram_chars, y_ce_ord_train)\n\ny_pred = classifier_LogR04.predict(X_ce_ord_test_tfidf_ngram_chars)\n\nprint(\"N gram chars-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_ce_ord_test, y_pred))    # 52%\n","9b4dcdcb":"# SVM (use X & y of ce_ordinal)\n\nclassifier_SVM01 = svm.SVC()\nclassifier_SVM01.fit(X_ce_ord_train_count, y_ce_ord_train)\n\ny_pred = classifier_SVM01.predict(X_ce_ord_test_count)\ny_pred2 = classifier_SVM01.predict(X_ce_ord_train_count)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Vector count--------------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_SVM02 = svm.SVC()\nclassifier_SVM02.fit(X_ce_ord_train_tfidf, y_ce_ord_train)\n\ny_pred = classifier_SVM02.predict(X_ce_ord_test_tfidf)\ny_pred2 = classifier_SVM02.predict(X_ce_ord_train_tfidf)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Word-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_SVM03 = svm.SVC()\nclassifier_SVM03.fit(X_ce_ord_train_tfidf_ngram, y_ce_ord_train)\n\ny_pred = classifier_SVM03.predict(X_ce_ord_test_tfidf_ngram)\ny_pred2 = classifier_SVM03.predict(X_ce_ord_train_tfidf_ngram)\n\nprint(\"N gram-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_SVM04 = svm.SVC()\nclassifier_SVM04.fit(X_ce_ord_train_tfidf_ngram_chars, y_ce_ord_train)\n\ny_pred = classifier_SVM04.predict(X_ce_ord_test_tfidf_ngram_chars)\ny_pred2 = classifier_SVM04.predict(X_ce_ord_train_tfidf_ngram_chars)\n\nprint(\"N gram chars-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n","2a6589aa":"# Extreme Gradient Boosting (use X & y of ce_ordinal)\n\nimport xgboost\n\nclassifier_XGB01 = xgboost.XGBClassifier()\nclassifier_XGB01.fit(X_ce_ord_train_count, y_ce_ord_train)\n\ny_pred = classifier_XGB01.predict(X_ce_ord_test_count)\ny_pred2 = classifier_XGB01.predict(X_ce_ord_train_count)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Vector count--------------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\nclassifier_XGB02 = xgboost.XGBClassifier()\nclassifier_XGB02.fit(X_ce_ord_train_tfidf, y_ce_ord_train)\n\ny_pred = classifier_XGB02.predict(X_ce_ord_test_tfidf)\ny_pred2 = classifier_XGB02.predict(X_ce_ord_train_tfidf)\n\n#print(\"Confusion Matrix\")\n#print(confusion_matrix(y_test,y_pred)) #too many features to be viewed\nprint(\"Word-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))    #52 %\n\nclassifier_XGB03 = xgboost.XGBClassifier()\nclassifier_XGB03.fit(X_ce_ord_train_tfidf_ngram, y_ce_ord_train)\n\ny_pred = classifier_XGB03.predict(X_ce_ord_test_tfidf_ngram)\ny_pred2 = classifier_XGB03.predict(X_ce_ord_train_tfidf_ngram)\n\nprint(\"N gram-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))    #52 %\n\n\nclassifier_XGB04 = xgboost.XGBClassifier()\nclassifier_XGB04.fit(X_ce_ord_train_tfidf_ngram_chars, y_ce_ord_train)\n\ny_pred = classifier_XGB04.predict(X_ce_ord_test_tfidf_ngram_chars)\ny_pred2 = classifier_XGB04.predict(X_ce_ord_train_tfidf_ngram_chars)\n\nprint(\"N gram chars-tfidf-----------------------------\")\nprint(\"Classification report\")\nprint(classification_report(y_ce_ord_test,y_pred))\nprint(\"Accuracy Score (Ein vs Eout)\")\nprint(accuracy_score(y_ce_ord_train, y_pred2),\" vs \", accuracy_score(y_ce_ord_test, y_pred))   #52 %\n\n","16845735":"#Shallow NN\nfrom keras import layers, models, optimizers\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.metrics import categorical_accuracy\n\ninput_size=X_ce_ord_train_tfidf_ngram.shape[1]\n\nnet = Sequential()\nnet.add(Dense(100, activation='relu' , input_shape=(input_size,)))\nnet.add(Dense(1, activation='sigmoid' ))\nnet.compile(loss='binary_crossentropy' , optimizer=optimizers.Adam(), metrics=['accuracy'] )\nnet.summary()\nnet.fit(X_ce_ord_train_tfidf_ngram, y_ce_ord_train, epochs=10, verbose=0)\nprint(\"training error: \" + str(net.evaluate(X_ce_ord_train_tfidf_ngram, y_ce_ord_train, verbose=0)))\nprint(\"test error: \" + str(net.evaluate(X_ce_ord_test_tfidf_ngram, y_ce_ord_test, verbose=0)))\n","c8ad4355":"Distribution graphs (histogram\/bar graph) of sampled columns:","262fac9c":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","324c1007":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","8b38175c":"## Introduction\nGreetings from the Kaggle bot! This is an automatically-generated kernel with starter code demonstrating how to read in the data and begin exploring. If you're inspired to dig deeper, click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","e7770d34":"Let's take a quick look at what the data looks like:","7c1ef497":"List of variables :\nX_train\t\t\t\/\/One Hot Encoding\nX_test\t\t\t\/\/One Hot Encoding\nX_ce_ord_train\t\t\/\/Cardinal Encoding\nX_ce_ord_test\t\t\/\/Cardinal Encoding\n\n-------------------------------\nX_train_count\nX_test_count\nX_ce_ord_train_count\nX_ce_ord_test_count\n\n--------------------------------\nX_train_tfidf\nX_test_tfidf\nX_ce_ord_train_tfidf\nX_ce_ord_test_tfidf\n\n--------------------------------\nX_train_tfidf_ngram\nX_test_tfidf_ngram\nX_ce_ord_train_tfidf_ngram\nX_ce_ord_test_tfidf_ngram\n\n---------------------------------\nX_train_tfidf_ngram_chars\nX_test_tfidf_ngram_chars\nX_ce_ord_train_tfidf_ngram_chars\nX_ce_ord_test_tfidf_ngram_chars\n\n---------------------------------\ny_ohe_train\ny_ohe_test\n\ny_ce_ord_train\ny_ce_ord_test\n","a23d6b6e":"Let's take a quick look at what the data looks like:","268a9473":"### Let's check 1st file: ..\/input\/irishtimes-date-text.csv","2826b6bf":"Now you're ready to read in the data and use the plotting functions to visualize the data.","d54f48b9":"Distribution graphs (histogram\/bar graph) of sampled columns:","6dd83166":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","e9393531":"There are 2 csv files in the current version of the dataset:\n","eecdf48c":"### Let's check 2nd file: ..\/input\/w3-latnigrin-text.csv"}}