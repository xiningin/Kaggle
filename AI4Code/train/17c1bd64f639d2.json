{"cell_type":{"0562f76a":"code","5edb1426":"code","b7347751":"code","dac39b52":"code","baaf03f6":"code","62e28921":"code","cb29ac97":"code","cefe42f5":"code","1cd2bded":"code","986149c0":"code","87643ee0":"code","7ed1f834":"code","f4df811b":"code","c0e95011":"code","45df2f02":"code","fc126e7f":"code","7d656a95":"code","2a94dbea":"code","715b40b8":"code","35e057d7":"code","4bcd32cd":"code","386beaf4":"code","6f62939b":"code","29254133":"code","2a5bbfdb":"code","1923e680":"code","57174c9e":"code","80d3a29f":"code","b7b6d2ff":"code","d20a0cad":"code","25f01af7":"code","d03291fb":"code","ec3a6348":"code","665b5e2f":"code","e1e0c8ca":"code","82b0ca9d":"code","21e9189b":"code","538e7914":"code","5d47e24f":"code","19aa32c3":"code","e8b03672":"code","4182fa1a":"code","6492c591":"code","283f73f7":"code","7054b825":"code","c468dc2d":"code","ab200dec":"code","96a56911":"code","ed1fc94a":"code","d2e48b79":"code","8251da38":"code","9c833255":"code","e108ca7c":"markdown","7d5df898":"markdown","d330572f":"markdown","4b5d48ce":"markdown","7335f65d":"markdown","3f19b9ac":"markdown","c83c9605":"markdown","35776bdc":"markdown","2dbc9dfd":"markdown","822a1c10":"markdown","e4426d03":"markdown","423dcd99":"markdown","defdca2d":"markdown","d94c6cc8":"markdown","1de201e8":"markdown","0ef36997":"markdown","6dd91095":"markdown","253ba350":"markdown","66ec4a56":"markdown","802f238a":"markdown","edd40e66":"markdown","4354faa3":"markdown","8b13413d":"markdown","74f1fa75":"markdown","512ae904":"markdown","01684ae7":"markdown","de93e657":"markdown","a55925c7":"markdown","0fd09655":"markdown","6957a958":"markdown","2a16c459":"markdown","274e2524":"markdown","acc5c45e":"markdown","ec9f0e09":"markdown","b377a652":"markdown","471468e2":"markdown","fa0e6e9a":"markdown","d5544100":"markdown","d2927b3f":"markdown","5f9aeaca":"markdown","6377082d":"markdown","b740d961":"markdown","ac1902a8":"markdown","d2772134":"markdown","d4fb775e":"markdown","517618d8":"markdown","a81ce735":"markdown","56230421":"markdown","05e0d4b6":"markdown","d64405f4":"markdown","48144e9d":"markdown","5b5ec4a2":"markdown","ba1089a4":"markdown","bf517352":"markdown","55437c90":"markdown","2d8b608c":"markdown","bd52176a":"markdown","3e6b5bb4":"markdown","dff5b01b":"markdown","8dda0228":"markdown","81ffca92":"markdown","6dcbe68b":"markdown","96ff1736":"markdown","10745e9a":"markdown","ad2f6493":"markdown","38f68f31":"markdown","4a7db569":"markdown","b02b67f5":"markdown","08272679":"markdown","db0eb24c":"markdown","4b09db5a":"markdown","3a9e3c05":"markdown","408bfd30":"markdown","3240e093":"markdown","59e04640":"markdown","11cc0dfe":"markdown"},"source":{"0562f76a":"## importing various modules useful for this analysis\n\n#--------fundamental modules-----\nimport os\nimport pandas as pd\nimport tqdm as tqdm\nfrom scipy import stats\nimport numpy as np\nimport string\n\n#-------visulizaiton modules-----\n\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\nimport missingno as msno\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot,plot,init_notebook_mode\ninit_notebook_mode(connected= True)\n\nimport squarify\nimport geopandas as gpd\n\n!pip install country_converter --upgrade\nimport country_converter as coco\n\nfrom wordcloud import WordCloud, STOPWORDS\n\n\n#______warningfilter module____________\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n## setting pandas dataframe settings\n\npd.set_option('max_rows', 25)\npd.set_option('max_columns', 100)\npd.set_option('max_colwidth',2500)\nplt.rcParams['figure.dpi'] = 150\n\n### positioning all the plots\nfrom IPython.core.display import HTML\nHTML(\"\"\"\n<style>\n.output_png {\n             display: table-cell;\n             text-align: center;\n             vertical-align: middle;\n}\n\"\"\")","5edb1426":"# loading dataset\ndf = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\n\ndf.sample(10).head(3).T.style.set_properties(**{'background-color':'white',\n                                     'color': 'black'})\n","b7347751":"# basic information of the data\ndf.info(verbose = True);","dac39b52":"df.describe(include = [np.object]).T.style.set_properties(**{'background-color':'white',\n                                     'color': 'black',\n                                      'border-color':'black' })","baaf03f6":"df.describe(include = [np.number]).T.style.set_properties(**{'background-color':'white',\n                                     'color': 'black',\n                                      'border-color':'black'})","62e28921":"fig, ax = plt.subplots(dpi = 80)\nax.set_facecolor('#f5f6f6')\nfig.patch.set_facecolor('#f5f6f6')\n\ncolor = ['grey','grey','grey','grey','grey','grey','grey','grey','#E50914','#E50914','#E50914','#E50914']\nmsno.bar(df,fontsize =16, color = color, sort = 'descending', ax = ax, figsize = (12,6))\nlabels = ['Description','Listed','Duration', 'Release Year', 'Title', 'Type','Show Id','Rating', 'Date Added','Country', 'Cast','Director']\nax.set_xticklabels(labels,{'font':'serif', 'color':'black','weight':'bold','size':12}, alpha = 0.9,rotation = 90)\nax.text(-2,1.4,'Visualization of the Nullity of The Dataset' ,{'font':'serif', 'color':'black','weight':'bold','size':24})\nax.text(-2,1.25,'Clearly seen that most of the missing values \\nare in Director, Cast,Country, and Date \\nAdded in this order.')\nax.axvspan(7.5,12.5,0,7787, color = 'grey', alpha = 0.25)\nax.set_yticklabels('')\nax.spines['bottom'].set_visible(True)\nfig.show()","cb29ac97":"df_orig = df.copy() # copying original dataset \n\n# handling missing values\ndf['director'] = df['director'].fillna('NoDataAvailable')\ndf['country'] = df['country'].fillna(df['country'].mode()[0])\ndf['cast'] = df['cast'].fillna('NoDataAvailable')\ndf['date_added'] = df['date_added'].fillna(df['date_added'].mode()[0])\ndf['rating'] = df['rating'].fillna(df['rating'].mode()[0])\nprint('count of values')\nprint(df.isna().sum())","cefe42f5":"# Netflix brand colors\ncolors = ['#221f1f', '#b20710', '#e50914','grey']\n\n#custom color palette\n#customPalette = sns.set_palette(sns.color_palette(colors))\nsns.palplot(colors,size = 1)\nplt.title(\"Netflix brand palette \",loc='left',fontfamily= 'Serif',fontsize=16,y=1.05)\nplt.text(-0.5,-0.52, 'Well for visuals likely to make plots with same colors',{'font':'serif', 'color':'black','weight':'normal','size':8}, alpha = 0.8 )\nplt.axis('off')\nfig.show()","1cd2bded":"x = df['type'].value_counts()\n\n# plot\nfig, ax = plt.subplots(figsize = (6,6), dpi = 70)\nax.barh([1], x.values[1], height = 0.7, color = 'black', alpha = 0.7)\nplt.text(-1450,1, 'TV Shows', {'font': 'Serif','weight':'bold','Size': '16','style':'normal', 'color':'black'}, alpha = 0.7)\nplt.text(2500,1, '31%',{'font':'Serif', 'weight':'bold','size':'16','color':'black'}, alpha = 0.7)\n\n\nax.barh([0], x.values[0], height = 0.7, color = '#b20710', alpha = 0.8)\nplt.text(-1050,-0.08, 'Movies',{'font': 'Serif','weight':'bold','Size': '16','style':'normal', 'color':'#b20710'}, alpha = 0.8)\nplt.text(5450,-0.08, '69%',{'font':'Serif','weight':'bold' ,'size':'16','color':'#b20710'}, alpha = 0.8)\n\n\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nplt.text(-1150,1.77, 'How Content is Distributed? - Movie vs TV' ,{'font': 'Serif', 'Size': '25','weight':'bold', 'color':'black'}, alpha = 0.9)\nplt.text(6000,1.65, 'Movies ', {'font': 'Serif','weight':'bold','Size': '16', 'color':'#b20710'}, alpha = 0.8)\nplt.text(7200,1.65, '|', {'color':'black' , 'size':'16', 'weight': 'bold'}, alpha = 0.9)\nplt.text(7500,1.65, 'TV Shows', {'font': 'Serif','weight':'bold', 'Size': '16','color':'black'}, alpha = 0.7)\nplt.text(-1150,1.5, 'Looks like netflix mostly produce Movies over TV shows, maybe \\nthis is due to most people likly ot spend limited amount \\nof time rather bench watching.', \n        {'font':'Serif', 'size':'12.5','color': 'black'})\n\n\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\nax.spines['bottom'].set_visible(False)\nax.spines['left'].set_visible(True)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","986149c0":"rating = {  'TV-Y' : 'Kids',\n            'TV-Y7' : 'Kids' ,\n            'TV-G'  : 'Kids',\n            'PG'    : 'Kids',\n            'TV-PG' : 'Kids',\n            'PG-13' : 'Teens',\n            'TV-14' : 'Teens',\n            'R'     : 'Adults',\n            'TV-MA' : 'Adults',\n            'NC-17' : 'Adults',\n            'NR': 'Adults',\n            'UR': 'Adults',\n            'TV-Y7-FV':'Kids',\n            'G': 'Kids'} \n\n#creating a new column with age rating\ndf['age_rating'] = df['rating'].replace(to_replace = rating)\n\nage_ratings = df['age_rating'].value_counts()\n\nlabels = [ str(idx) + \"\\n (\" + str(val) + \")\" for idx, val in age_ratings.items()]\n\nfig, ax = plt.subplots(figsize = (12,6), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\n\nsquarify.plot(sizes= age_ratings.values, label = labels,\n              color = ['#e50914', '#b20710','#221f1f'],\n              ax = ax, text_kwargs = {'font':'serif', 'fontSize':'18', 'color': '#f6f5f5', 'weight':'bold'},\n              alpha = 0.9)\n\nax.text(0,114.8, 'Content for All the Age groups - who is the target?',{'font':'serif', 'fontSize':'20', 'color':'black','weight':'bold'}, alpha =0.9)\nax.text(0,104, 'Mostly primary audience of the netflix are adutls, \\nand they are producing most of the content \\nfor them followed by other two.', {'font':'serif', 'fontSize':'12', 'color':'black','weight':'normal'},alpha = 0.7)\n\nax.axis('off')\nfig.show()","87643ee0":"fig, ax = plt.subplots(figsize = (10,4), dpi = 90)\nax.set_facecolor('#f6f5f5')\nfig.patch.set_facecolor('#f6f5f5')\n\na = df['rating'].value_counts()\ncolors = ['#b20710','grey','grey','grey','grey','grey','grey','grey','grey','grey','grey','grey','grey','grey']\nax.bar(x = a.index, height = a.values, color = colors, alpha = 0.9)\n\n# Create labels\nlabel = a.values.tolist()\n \n# Text on the top of each bar\nfor i in range(len(label)):\n    x = i  - 0.35\n    y = (i+18)\/2 + label[i]\n    x = x-0.08\n    y = y + 52\n    ax.text(x,y, '{}'.format(a.values[i]),{'font': 'serif', 'weight': 'normal', 'color': 'black', 'fontsize': 10}, alpha = 0.8)\n\n#ax.set_xticks(a.values)\nax.text(-1.5,3540, 'Age ratings - Which rating mostly available?', {'font': 'serif', 'color': 'black', 'fontsize': 18, 'weight':'bold'},alpha = 0.9 )\nax.text(-1.5,3200, 'well it seems like mostly adult content is available \\non platform. While kids content is very very less compared to adults. ', {'font': 'serif', 'color': 'black', 'fontsize': 12,},alpha = 0.8)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\n    \nax.set_xticklabels(a.index, {'font': 'serif', 'color': 'black', 'fontsize': 8,'weight':'bold'}, alpha = 0.8)\nax.axes.get_yaxis().set_visible(False)\nfig.show()","7ed1f834":"# converting the pandas dataframe to datatime format\ndf['date_added'] = pd.to_datetime(df['date_added'])\ndf['added_year'] = df['date_added'].dt.year\ndf['added_month'] = df['date_added'].dt.month\ndf['added_month_name'] = df['date_added'].dt.month_name()\n\n\n# creating a series of time data\n\nadd_year = df['added_year'].value_counts()\nrelease = df['release_year'].value_counts()\n\n# creating a dataframe\n\nadd_df = pd.DataFrame({'year': add_year.index, 'added_year': add_year.values})\nrelease_df = pd.DataFrame({'year': release.index, 'release_year': release.values})\n\nyear_df = pd.merge(add_df, release_df, how = 'right', on = 'year')\nyear_df.fillna('0', inplace = True)\nyear_df['added_year'] = year_df.added_year.astype('int')\n\nyear_df = year_df.sort_values('year', ascending = False).reset_index(drop = True)\n","f4df811b":"## visulaization\n\nfig, ax = plt.subplots(figsize = (12,6), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nlabels = [ 'Released content', 'Added content ']\n\n# stackplot\nax.stackplot(year_df.year[0:15], year_df.release_year[0:15],year_df.added_year[0:15],labels =labels, \n              colors = ['#221f1f','#b20710',], baseline = 'zero', alpha = 0.9 )\n\n# Region of interest\n \nax.axvspan(2019,2021, color = 'grey',alpha = 0.2)\nax.text(2019.25, 3100, 'Covid-19', {'font':'serif', 'fontsize': '14', 'color': 'black', 'weight':'bold'},alpha = 0.8)\n\n# legend\nax.text(2017, 2000, '{}'.format(labels[1]), {'font':'serif', 'fontSize':'14', 'color':'#f6f5f5', 'weight':'bold'})\nax.text(2016, 500, '{}'.format(labels[0]),{'font':'serif', 'fontSize':'14', 'color':'#f6f5f5','weight':'bold'}) \n\n#title\n \nax.text(2006.5, 3600, 'Visualization of Yearwise Leadtimes - How quick content added?', \n                      {'font':'serif', 'fontSize':'16', 'weight': 'bold','color': 'black'})\nax.text(2006.5, 3390, 'Looks like as internet is booming gap between content official \\nrelease time and available time to platform is drastically reduced. ',\n                      {'font':'serif', 'fontSize':'12','color': 'black'})\n\nplt.box(on = None)\n\nax.axes.get_yaxis().set_visible(False)\nfig.show()","c0e95011":"TV = df[df['type'] == 'TV Show'].release_year.value_counts()\nMovie = df[df['type'] == 'Movie'].release_year.value_counts()\n\n# creating a dataframe\n\nTv_df = pd.DataFrame({'year': TV.index, 'Tv_count': TV.values})\nMovie_df = pd.DataFrame({'year': Movie.index, 'Movie_count': Movie.values})\n\nrel_data = pd.merge(Tv_df, Movie_df, how = 'right', on = 'year')\nrel_data.fillna('0', inplace = True)\nrel_data['Tv_count'] = rel_data.Tv_count.astype('int64')\nrel_data = rel_data.sort_values('year', ascending = False).reset_index(drop = True)\n","45df2f02":"## visulaization\n\nfig, ax = plt.subplots(figsize = (12,6), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nlabels = [ 'TV shows', 'Movies ']\n\n# stackplot\nax.stackplot(rel_data.year[0:25], rel_data.Tv_count[0:25],rel_data.Movie_count[0:25],labels =labels, \n              colors = ['#221f1f','#b20710',], baseline = 'zero', alpha = 0.9 )\n\n# Region of interest\n \nax.axvspan(2019,2021, color = 'grey',alpha = 0.2)\nax.text(2019, 1147, 'Covid-19', {'font':'serif', 'fontsize': '11', 'color': 'black', 'weight':'bold'},alpha = 0.8)\n\n# legend\nax.text(2017, 700, '{}'.format(labels[1]), {'font':'serif', 'fontSize':'14', 'color':'#f6f5f5', 'weight':'bold'})\nax.text(2016, 175, '{}'.format(labels[0]),{'font':'serif', 'fontSize':'14', 'color':'#f6f5f5','weight':'bold'}) \n\n#title\n \nax.text(1997.25,1200, 'Visualization of Release Year - Which year is most productive?',\n                      {'font':'serif', 'fontSize':'16', 'weight': 'bold','color': 'black'})\nax.text(1997.5,1000, 'In the earlier days of Tv shows were not that popular \\nit seems, with time gain popularity and rose to certain \\nlevel. Where as movies are in top \\nchoice of production. ',\n                      {'font':'serif', 'fontSize':'12','color': 'black'})\n\nplt.box(on = None)\n\nax.axes.get_yaxis().set_visible(False)\nfig.show()","fc126e7f":"TV = df[df['type'] == 'TV Show'].added_year.value_counts()\nMovie = df[df['type'] == 'Movie'].added_year.value_counts()\n\n# creating a dataframe\n\nTv_df = pd.DataFrame({'year': TV.index, 'Tv_count': TV.values})\nMovie_df = pd.DataFrame({'year': Movie.index, 'Movie_count': Movie.values})\n\nadd_data = pd.merge(Tv_df, Movie_df, how = 'right', on = 'year')\nadd_data.fillna('0', inplace = True)\nadd_data['Tv_count'] = add_data.Tv_count.astype('int64')\nadd_data = add_data.sort_values('year', ascending = False).reset_index(drop = True)","7d656a95":"## visulaization\n\nfig, ax = plt.subplots(figsize = (12,6), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nlabels = [ 'TV shows', 'Movies ']\n\n# stackplot\nax.stackplot(add_data.year[0:25], add_data.Tv_count[0:25],add_data.Movie_count[0:25],labels =labels, \n              colors = ['#221f1f','#b20710',], baseline = 'zero', alpha = 0.9 )\n\n# Region of interest\n \nax.axvspan(2019,2021, color = 'grey',alpha = 0.2)\nax.text(2019.5, 2200, 'Covid-19', {'font':'serif', 'fontsize': '11', 'color': 'black', 'weight':'bold'},alpha = 0.8)\n\n# legend\nax.text(2018, 800,'{}'.format(labels[1]), {'font':'serif', 'fontSize':'14', 'color':'#f6f5f5', 'weight':'bold'})\nax.text(2017, 200, '{}'.format(labels[0]),{'font':'serif', 'fontSize':'14', 'color':'#f6f5f5','weight':'bold'}) \n\n#title\n \nax.text(2007.5,2300, 'Visualization of Addition Year - Which year is best entertariment year?',\n                      {'font':'serif', 'fontSize':'16', 'weight': 'bold','color': 'black'})\nax.text(2007.5,1990, 'Since the inception of the netflix, most of \\nthe content was added recent times. After 2015 \\nrapid addition of the content can be seen from the visualization. ',\n                      {'font':'serif', 'fontSize':'12','color': 'black'})\n\nplt.box(on = None)\n\nax.axes.get_yaxis().set_visible(False)\nfig.show()\n\n","2a94dbea":"added_month = df['added_month'].value_counts()\n\n# initialize the figure\nfig = plt.figure(figsize=(14,7), dpi = 90)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\nax = plt.subplot(polar=True)\nplt.axis('off')\n\n\n## labels\nlabel_map = {1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June', 7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'}\nlab = added_month.index\nlabels = lab.map(label_map)\n\ncolors = ['#b20710', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey','grey']\n\n\n# Constants = parameters controling the plot layout:\nupperLimit = 1000\nlowerLimit = 50\nlabelPadding = 10\n\n# Compute max and min in the dataset\nmax = added_month.max()\n\nslope = (max - lowerLimit) \/ max\nheights = slope * added_month.values + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(added_month.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(added_month)+1))\nangles = [element * width for element in indexes]\n\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"#f6f5f5\",\n    color = colors,\n)\n\n# Add labels\nfor bar, angle, height, label in zip(bars,angles, heights, labels):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle,\n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\",**{'font':'serif', 'size':12, 'weight':'bold','color':'black'},alpha = 0.8) \n\nfig.text(0.25,1.05,'Monthly content addition - Best Bing Month!!',{'font':'serif', 'size':20, 'weight':'bold','color':'black'})\nfig.text(0.25,0.975,'Christmas is real holiday!! most of the content was \\nadding to platfrom at the end of the year ans \\nnewyear for holiday season.',{'font':'serif', 'size':12,'color':'black'}, alpha = 0.7)\nfig.show()","715b40b8":"country = df.country.value_counts()\n\ncoun = {}\nfor idx, val in country.items():\n    l = idx.split(',')\n    for i in l:\n        i = i.strip()\n        if i in coun.keys():\n            d = {}\n            d[i] = val + coun[i]\n            coun.update(d)\n        else:\n            d = {i:val}\n            coun.update(d)\n\nnation, count = [],[]\nfor idx, val in coun.items():\n    nation.append(idx)\n    count.append(val)\n\ntemp = (pd.DataFrame({'country':nation, 'count': count})\n        .sort_values('count', ascending = False))","35e057d7":"temp['color'] = temp['count'].apply(lambda x : '#b20710' if x > temp['count'].values[3] else 'grey')\n# visulaization\nfig, ax = plt.subplots(figsize = (18,8), dpi = 60)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nbar_kawrgs = {'edgecolor':'#f6f5f5'}\nsquarify.plot(sizes= temp['count'][0:24], label = temp['country'][0:24], ax = ax, color = temp['color'],  **bar_kawrgs,\n             text_kwargs = {'font':'serif', 'size':13, 'color':'black', 'weight':'bold', 'alpha':0.8},alpha = 0.9)\n\nax.text(0,115,'Best Country of The Netflix: TOP 25 Countries vs Total Content',{'font':'serif', 'size':24, 'color':'black', 'weight':'bold'}, alpha = 1)\nax.text(0,107, 'This visualization shows the countrywise contribution to content on the platform. \\nSeems like USA is winner in overall content, this includes TV and movies, followed by,India.',\n       {'font':'serif', 'size':16, 'color':'black'}, alpha = 0.8)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n\nfig.show()","4bcd32cd":"temp['color'] = temp['count'].apply(lambda x : '#b20710' if x > temp['count'].values[30] else 'grey')\n\n#loading geodataframe\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n#converting country names to iso codes\ntemp['iso_code'] = coco.convert(names=temp['country'], to ='ISO3')\ntemp = temp[temp['iso_code'] != 'not found']\n\n# merging geodataframe and pandas dataframe\ntemp_map = world.merge(temp,left_on = 'iso_a3', right_on = 'iso_code')\n\ntemp_map.drop(columns = ['continent', 'gdp_md_est','pop_est','name',], inplace = True)\ntemp_map = temp_map.sort_values(by = 'count', ascending = False)\n\n\n#viualization\ncolors = ['#b20710','grey','#f8f9f9',]\ncmap  = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors = colors)\n\nfig, ax  = plt.subplots(figsize = (15,7.5), dpi = 80)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\ntemp_map.dropna().plot(column = 'count', \n                       color = temp_map.dropna()['color'], \n                       cmap = cmap,\n                       scheme='quantiles', \n                       k=10, legend = False,\n                       ax = ax)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nax.text(-200,104,'Which Countries are Producting Most of the Content? - World vs Whole Content', {'font':'serif', 'size':16, 'weight':'bold'}, alpha = 0.9)\nax.text(-199,87,'World map show the contry wise production of content, seems like mostly contries \\nin africa are least contributing to the content. Where as most of the \\ndeveloped countries are being on top.', {'font':'serif', 'size':12}, alpha = 0.7)\nfig.show()","386beaf4":"## TV show countrywise distribution\n\nTV = df[df['type'] == 'TV Show']\n\n\nTV_country = TV.country.value_counts()\n\nTV_coun = {}\nfor idx, val in TV_country.items():\n    l = idx.split(',')\n    for i in l:\n        i = i.strip()\n        if i in TV_coun.keys():\n            d = {}\n            d[i] = val + TV_coun[i]\n            TV_coun.update(d)\n        else:\n            d = {i:val}\n            TV_coun.update(d)\n\nTV_nation, TV_count = [],[]\nfor idx, val in TV_coun.items():\n    TV_nation.append(idx)\n    TV_count.append(val)\n\nTV_temp = (pd.DataFrame({'country':TV_nation, 'count': TV_count})\n        .sort_values('count', ascending = False))\nTV_temp['color'] = TV_temp['count'].apply(lambda x : '#b20710' if x > TV_temp['count'].values[3] else 'grey')\n","6f62939b":"# visulaization\nfig, ax = plt.subplots(figsize = (18,8), dpi = 60)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nbar_kawrgs = {'edgecolor':'#f6f5f5'}\nsquarify.plot(sizes= TV_temp['count'][0:24], label = TV_temp['country'][0:24], ax = ax, color = TV_temp['color'],  **bar_kawrgs,\n             text_kwargs = {'font':'serif', 'size':13, 'color':'black', 'weight':'bold', 'alpha':0.8},alpha = 0.9)\n\nax.text(0,115,'Best Country for TV Shows: TOP 25 TV Show Prefered Countries ',{'font':'serif', 'size':24, 'color':'black', 'weight':'bold'}, alpha = 1)\nax.text(0,103, 'TV shows change whole game of entertaiment! TV shows are mostly prefered \\nasian countries like japan, korea. While USA still holds the \\ntop position where UK second in line.',\n       {'font':'serif', 'size':16, 'color':'black'}, alpha = 0.8)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n\nfig.show()","29254133":"TV_temp['color'] = TV_temp['count'].apply(lambda x : '#b20710' if x > TV_temp['count'].values[30] else 'grey')\n\n#loading geodataframe\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n#converting country names to iso codes\nTV_temp['iso_code'] = coco.convert(names=TV_temp['country'], to ='ISO3')\nTV_temp = TV_temp[TV_temp['iso_code'] != 'not found']\n\n# merging geodataframe and pandas dataframe\ntemp_map = world.merge(TV_temp,left_on = 'iso_a3', right_on = 'iso_code')\n\ntemp_map.drop(columns = ['continent', 'gdp_md_est','pop_est','name',], inplace = True)\ntemp_map = temp_map.sort_values(by = 'count', ascending = False)\n\n\n#viualization\ncolors = ['#b20710','grey','#f8f9f9',]\ncmap  = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors = colors)\n\nfig, ax  = plt.subplots(figsize = (15,7.5), dpi = 80)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\ntemp_map.dropna().plot(column = 'count', \n                       color = temp_map.dropna()['color'], \n                       cmap = cmap,\n                       scheme='quantiles', \n                       k=10, legend = False,\n                       ax = ax)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nax.text(-200,104,'Which Countries are Producting Most of the TV Shows? - World vs TV Shows', {'font':'serif', 'size':16, 'weight':'bold'}, alpha = 0.9)\nax.text(-199,87,'Sudden contrast can bee seen for TV shows, seems like mostly contries in europe, \\namerica and asia are producing most of the TV shows. Where as most of the african \\ncountries favored least.', {'font':'serif', 'size':12}, alpha = 0.7)\nfig.show()","2a5bbfdb":"## Movies countrywise distribution\n\nMovies = df[df['type'] == 'Movie']\n\n\nMovi_country = Movies.country.value_counts()\n\nMovi_coun = {}\nfor idx, val in Movi_country.items():\n    l = idx.split(',')\n    for i in l:\n        i = i.strip()\n        if i in Movi_coun.keys():\n            d = {}\n            d[i] = val + Movi_coun[i]\n            Movi_coun.update(d)\n        else:\n            d = {i:val}\n            Movi_coun.update(d)\n\nMovi_nation, Movi_count = [],[]\nfor idx, val in Movi_coun.items():\n    Movi_nation.append(idx)\n    Movi_count.append(val)\n\nMovi_temp = (pd.DataFrame({'country':Movi_nation, 'count': Movi_count})\n        .sort_values('count', ascending = False))\n\nMovi_temp['color'] = Movi_temp['count'].apply(lambda x : '#b20710' if x > Movi_temp['count'].values[3] else 'grey')","1923e680":"# visulaization\nfig, ax = plt.subplots(figsize = (18,8), dpi = 60)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nbar_kawrgs = {'edgecolor':'#f6f5f5'}\nsquarify.plot(sizes= Movi_temp['count'][0:24], label = Movi_temp['country'][0:24], ax = ax, color = Movi_temp['color'],  **bar_kawrgs,\n             text_kwargs = {'font':'serif', 'size':13, 'color':'black', 'weight':'bold', 'alpha':0.8},alpha = 0.9)\n\nax.text(0,115,'Best Country for Movies: TOP 25 Movies Prefered Countries ',{'font':'serif', 'size':24, 'color':'black', 'weight':'bold'}, alpha = 1)\nax.text(0,103, 'Seems like things are different when it comes to movies, India is a movie prefered \\ncountry and its contirbution is significant. As usual US and Uk \\nare on the top of the list.',\n       {'font':'serif', 'size':16, 'color':'black'}, alpha = 0.8)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n\nfig.show()","57174c9e":"temp = Movi_temp\ntemp['color'] = temp['count'].apply(lambda x : '#b20710' if x > temp['count'].values[30] else 'grey')\n\n#loading geodataframe\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n#converting country names to iso codes\ntemp['iso_code'] = coco.convert(names=temp['country'], to ='ISO3')\ntemp = temp[temp['iso_code'] != 'not found']\n\n# merging geodataframe and pandas dataframe\ntemp_map = world.merge(temp,left_on = 'iso_a3', right_on = 'iso_code')\n\ntemp_map.drop(columns = ['continent', 'gdp_md_est','pop_est','name',], inplace = True)\ntemp_map = temp_map.sort_values(by = 'count', ascending = False)\n\n\n#viualization\ncolors = ['#b20710','grey','#f8f9f9',]\ncmap  = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors = colors)\n\nfig, ax  = plt.subplots(figsize = (15,7.5), dpi = 80)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\ntemp_map.dropna().plot(column = 'count', \n                       color = temp_map.dropna()['color'], \n                       cmap = cmap,\n                       scheme='quantiles', \n                       k=10, legend = False,\n                       ax = ax)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nax.text(-200,104,'Which Countries Prefer Movies Production? - World vs Movies', {'font':'serif', 'size':16, 'weight':'bold'}, alpha = 0.9)\nax.text(-199,87,'World map show the contry wise production of Movies, seems like mostly contries \\nin africa are least contributing to the content. Where as most of the \\ndeveloped countries are being on top.', {'font':'serif', 'size':12}, alpha = 0.7)\nfig.show()","80d3a29f":"content = df[['type', 'country']]\ncontent['num_countries'] = content['country'].apply(lambda x: len(x.split(',')))\ncontent['International'] = content['num_countries'].apply(lambda x: 1 if x>1 else 0)\ndom = content[content['International'] == 0]['type'].value_counts()\ninter = content[content['International'] == 1]['type'].value_counts()\n\ninter = content[content['International'] == 1]\ndom = content[content['International'] == 0]\n\ninter_t = inter.groupby('type')['International'].count()\ndom_t = dom.groupby('type')['International'].count()","b7b6d2ff":"fig,ax = plt.subplots(figsize = (8,4), dpi = 90)\nfig.patch.set_facecolor('#f5f6f6')\nax.set_facecolor('#f5f6f6')\n\nax.barh(y = inter_t.index, width = inter_t.values, height = 0.05, color = ['grey'])\nax.scatter(y = inter_t.index,x=inter_t.values, s = 300,c = ['grey'])\nax.barh(y = dom_t.index, width = - dom_t.values, height = 0.05, color = ['#b20710'],alpha = 1)\nax.scatter(y = dom_t.index,x = - dom_t.values, s = 300,c = ['#b20710'], alpha =1)\n\nax.axvline(x = 0, ymin = -0.25,ymax=1, **{'color':'black', 'linewidth':0.5, 'linestyle':'--'},alpha = 0.8)\n\n\n\nax.text(-1800,1.05, 'TV Shows', {'font':'serif','weight':'bold', 'size':8}, alpha = 0.7)\nax.text(-2800,0.95, dom_t.values[1], {'font':'serif', 'size':8}, alpha = 0.9)\nax.text(-5000,-0.05, dom_t.values[0], {'font':'serif', 'size':8}, alpha = 0.9)\n\n\n\nax.text(-4000,0.05, 'Movies', {'font':'serif','weight':'bold', 'size':8}, alpha = 0.7)\nax.text(400,0.95, inter_t.values[1], {'font':'serif', 'size':8}, alpha = 0.9)\nax.text(1100,-0.05, inter_t.values[0], {'font':'serif', 'size':8}, alpha = 0.9)\n\nax.set_ylim([-1,2])\n\n\n\nax.text(-2600,1.8, 'Domestic Content', {'font':'serif','weight':'bold', 'color':'#b20710','size':12}, alpha = 1)\nax.text(100,1.8, 'International Content', {'font':'serif','weight':'bold', 'color':'grey','size':12}, alpha = 1)\n\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\n\n\nax.text(-6000, 2.4, 'How Much Content is Produced Across the Contries?',{'font':'serif','weight':'bold', 'color':'black','size':16}, alpha = 1)\nax.text(-6000, 2.05, 'Seems like most the content is domestic in production, \\ni.e, content was proudced in only one country, where as \\ninternational content means producing at different countres.',{'font':'serif', 'color':'black','size':8}, alpha = 0.8)\n    \nfig.show()","d20a0cad":"num_countries = content['num_countries'].value_counts()\n\nfig, ax = plt.subplots(figsize = (10,5),dpi = 90)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\n###bars left\ncolor = ['#b20710','grey','grey','grey','grey','grey','grey']\nax.barh(y =  num_countries[1:-2].index  , width =num_countries[1:-2].values,  height = 0.8,color =color )\nax.barh(y =  8  , width = 3,  height = 0.8,color = 'grey')\n#bars right\nax.barh(y =  num_countries[1:-2].index  , width = -num_countries[1:-2].values,  height = 0.8,color = color)\nax.barh(y =  8 , width = - 3,  height = 0.8,color = 'grey')\n\n\nfor i,j in num_countries.items():\n    if (i >1 and i < 8):\n        ax.text(j+10,i - 0.25, j, {'font':'serif', 'size':8, 'color':'black','weight':'bold'}, alpha = 0.85)\n        ax.text(- (j+200),i -0.25,'{} Countries'.format(i), {'font':'serif', 'size':8, 'color':'black','weight':'bold'}, alpha = 0.85)\n        \n    if i == 8:\n        ax.text(3 +10,i-0.25,3, {'font':'serif', 'size':8, 'color':'black','weight':'bold'}, alpha = 0.85)\n        ax.text(- (3 +300),i-0.25,'Above 8 Countries', {'font':'serif', 'size':8, 'color':'black','weight':'bold'}, alpha = 0.85)\n        \n\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top','bottom']:\n    ax.spines[loc].set_visible(False)\n\n#plt.title('Number of contries for international content count plot')\nax.set_xlim([-1000,1000])\nax.set_ylim([0,9])\n\nax.text(- 1000, 10, 'Content VS Number of Countries : Truely International?',{'font':'serif', 'size':14, 'color':'black','weight':'bold'}, alpha = 0.9)\nax.text(-1000,9, 'This visualization shows the count of countries where content was produced per film or show. \\nMost of the content was shot in two contries for international producation. \\nWhere as beyond 8 there are only three videos on platform.',\n       {'font':'serif', 'size':8.5, 'color':'black'}, alpha = 0.8)\nfig.show()","25f01af7":"## genere count \n\ndef genere(what):\n    if what == 'all':\n        genere = df.listed_in.value_counts()\n    else:\n        genere = df[df['type'] == what].listed_in.value_counts()\n    gener = {}\n    \n    for idx, val in genere.items():\n        l = idx.split(',')\n        for i in l:\n            i = i.strip()\n            if i in gener.keys():\n                d = {}\n                d[i] = val + gener[i]\n                gener.update(d)\n            else:\n                d = {i:val}\n                gener.update(d)\n    theme, count = [],[]\n    \n    for idx, val in gener.items():\n        theme.append(idx)\n        count.append(val)\n    \n    list_temp = (pd.DataFrame({'genere':theme, 'count': count})\n        .sort_values('count', ascending = True))\n    list_temp.reset_index(drop = True, inplace = True)\n    \n    return list_temp\ntv_genere = genere('TV Show')\nmov_genere = genere('Movie')","d03291fb":"fig, ax  = plt.subplots(figsize = (12,10), dpi =68)\n\ncolors = ['#b20710']\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nax.barh( y = tv_genere['genere'], width = tv_genere['count'], height = 0.15, color = ['#221f1f'])\nax.scatter( y = tv_genere['genere'], x =  tv_genere['count'], s = tv_genere['count'] * 0.2, c = '#221f1f')\n\nax.barh( y = mov_genere['genere'], width = - mov_genere['count'], height = 0.15, color = ['#b20710'])\nax.scatter( y = mov_genere['genere'], x =  -mov_genere['count'], s=mov_genere['count']*0.2 , c = '#b20710')\n\nax.axvline(x = 0, ymin = 0, ymax = 1, **{'linewidth':0.8, 'linestyle': '--', 'color' : 'black'}, alpha = 0.8)\n\ntv_index = tv_genere['genere']\nmov_index = mov_genere['genere']\n\ntv_count = tv_genere['count']\nmov_count = mov_genere['count']\n\nfor y_loc in range(0,22):\n        ax.text(-25, y_loc - 0.25 , tv_index[y_loc],horizontalalignment= 'right',**{'font':'serif', 'size':12, 'weight':'bold', 'color':'black'}, alpha = 0.9)\n        ax.text(tv_count[y_loc] + 85, y_loc - 0.25, tv_count[y_loc],horizontalalignment= 'left',**{'font':'serif', 'size':8, 'weight':'bold', 'color':'black'}, alpha = 0.8)\n        \n        \nfor y_loc in range(0,20):\n        ax.text(25, 22+y_loc - 0.25, mov_index[y_loc],horizontalalignment = 'left',**{'font':'serif', 'size':12, 'weight':'bold', 'color':'#b20710'}, alpha =1)\n        ax.text(-mov_count[y_loc] - 110,  22 + y_loc - 0.25 , mov_count[y_loc],horizontalalignment= 'right',**{'font':'serif', 'size':8, 'weight':'bold', 'color':'#b20710'}, alpha =1)\n    \nfor loc in ['left', 'right', 'top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n    \nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nax.set_xlim([-3000,2500])\n\nax.text(-3000, 46, 'What kind of Genre Available On Netflix?: Movies vs TV shows',{'font':'serif', 'size':16, 'weight':'bold', 'color':'black'}, alpha = 0.9)\nax.text(-3000, 44, 'Its known that Movies are far high compared to TV shows. \\nThis visualization shows genres of both TV shows and Movies.',{'font':'serif', 'size':11, 'color':'black'}, alpha = 0.8)\n\nax.text(1050, 43, 'Movies',{'font':'serif', 'size':13, 'color':'#b20710', 'weight':'bold'}, alpha = 1)\nax.text(1500, 43, '|',{'font':'serif', 'size':13, 'color':'grey','weight':'bold'}, alpha = 1)\nax.text(1550, 43, 'TV Shows',{'font':'serif', 'size':13, 'color':'black', 'weight':'bold'}, alpha = 1)\n\nfig.show()\n","ec3a6348":"list_temp = genere('all')\nlist_temp = list_temp.sort_values(by = 'count', ascending = False).reset_index(drop = True)\nlist_temp['color'] = list_temp['count'].apply(lambda x : '#b20710' if x > list_temp['count'].values[3] else 'grey')\n# visulaization\nfig, ax = plt.subplots(figsize = (18,9), dpi = 60)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nbar_kawrgs = {'edgecolor':'#f6f5f5'}\nsquarify.plot(sizes= list_temp['count'][0:24], label = list_temp['genere'][0:24], ax = ax, color = list_temp['color'],  **bar_kawrgs,\n             text_kwargs = {'font':'serif', 'size':12, 'color':'black', 'weight':'bold', 'alpha':0.8},alpha = 0.9)\n\nax.text(0,115,'Popular Genre of The Netflix: TOP 25 Countries vs Genere',{'font':'serif', 'size':24, 'color':'black', 'weight':'bold'}, alpha = 1)\nax.text(0,104, 'Due to international presence of the netflix,mostly content is international contents, \\nfollowed by Dramas and Comedies. Where are remaining all \\nother genere are in almost in same proprotiaons.',\n       {'font':'serif', 'size':16, 'color':'black'}, alpha = 0.8)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n\nfig.show()","665b5e2f":"listed_type = df[['type', 'listed_in']]\n\nlisted_type['num_genre'] = listed_type['listed_in'].apply(lambda x: len(x.split(',')))\nlisted_type['multi_genre'] = listed_type['num_genre'].apply(lambda x: 1 if x > 2 else 0)\n\nlisted_type.drop(columns = ['listed_in'], inplace = True)\n\ntv_multi = listed_type[listed_type['type'] == 'TV Show']['multi_genre'].value_counts()\nmv_multi = listed_type[listed_type['type'] == 'Movie']['multi_genre'].value_counts()","e1e0c8ca":"\nfig, ax = plt.subplots(figsize = (10,5), dpi = 80)\nfig.patch.set_facecolor('#f5f6f6')\nax.set_facecolor('#f5f6f6')\n\nax.barh( y = [2,2.25], width = tv_multi.values, height = 0.0055, color = 'grey' )\nax.barh(y = [2.05,2.3], width = mv_multi.values,height = 0.0052, color = colors )\nax.scatter(y = [2,2.25], x = tv_multi.values, s = 200, c = 'grey' )\nax.scatter(y = [2.05,2.3], x = mv_multi.values, s = 200, c = colors )\n\nax.axvline(ymin = 0.05, ymax = 0.85, x = 0, **{'linewidth':0.5},color = 'black',alpha = 1)\n\n\n\nax.text(-590,2.42, ' Genre of Movies & TV shows: Multi-genre vs Single-genre', {'font':'serif','weight':'bold','size':20})\nax.text(-570,2.38, 'Seems like most of the netflix content is multi-genre, \\nand mostly movies have range of genres.', {'font':'serif','size':12})\n\nax.text(-570,2.27, 'Multi-genre', {'font':'serif','size':13, 'weight':'bold'})\nax.text(-570,2.025, 'Single-genre', {'font':'serif','size':13, 'weight':'bold'})\n\n\n\nax.text(2150, 2.38, 'Movies',{'font':'serif', 'size':13, 'color':'#b20710', 'weight':'bold'}, alpha = 1)\nax.text(2500, 2.38, '|',{'font':'serif', 'size':13, 'color':'black','weight':'bold'}, alpha = 1)\nax.text(2550, 2.38, 'TV Shows',{'font':'serif', 'size':13, 'color':'grey', 'weight':'bold'}, alpha = 1)\n\nax.set_ylim([1.95,2.4])\n\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','bottom','top']:\n    ax.spines[loc].set_visible(False)\n\n\n\nfig.show()","82b0ca9d":"duration = df.duration.value_counts()\n\ndur_TV_coun = {}\ndur_Movi_coun = {}\n\nfor idx,val in duration.items():\n    l = idx.split(' ')\n    if l[1] == 'Season' or l[1] == 'Seasons':\n        d = {idx.split(' ')[0] : val}\n        dur_TV_coun.update(d)\n    else:\n        d = {idx.split(' ')[0] : val}\n        dur_Movi_coun.update(d)\n\n\n### tv duration count data\nTV_duration, TV_count = [],[]\nfor idx, val in dur_TV_coun.items():\n    TV_duration.append(idx)\n    TV_count.append(val)\n\nTV_duration_temp = (pd.DataFrame({'TV_duration': TV_duration, 'TV_count': TV_count})\n        .sort_values('TV_count', ascending = False))\n\nTV_duration_temp.reset_index(drop = True, inplace = True)\n   \n    \n### movies duration count data\n\nMovie_duration, Movie_count = [],[]\nfor idx, val in dur_Movi_coun.items():\n    Movie_duration.append(idx)\n    Movie_count.append(val)\n\nMovie_duration_temp = (pd.DataFrame({'Movie_duration': Movie_duration, 'Movie_count': Movie_count})\n        .sort_values('Movie_count', ascending = False))\n\nMovie_duration_temp.reset_index(drop = True, inplace = True)\n\n\n\nMovie_duration_temp['Movie_duration'] = Movie_duration_temp['Movie_duration'].astype('int64')\nMovie_duration_temp['Movie_category'] = pd.cut(Movie_duration_temp['Movie_duration'], \n                                               bins = [0,30,60,90,120,150,180,210,240, 2000],\n                                               labels = ['below 30 mins', 'between 30 and 60 mins',\n                                                         'between 60 and 90 mins' ,\n                                                         'between 90 and 120 mins',\n                                                         'between 120 and 150 mins',\n                                                         'between 150 and 180 mins',\n                                                         'between 210 and 240 mins',\n                                                         'between 240 and 1000 mins',\n                                                         'above 1000 mins'])","21e9189b":"# squarify\n\nTV_duration_temp['color'] = TV_duration_temp['TV_count'].apply(lambda x : '#b20710' if x > TV_duration_temp['TV_count'].sort_values()[3] else 'grey')\n# visulaization\nfig, ax = plt.subplots(figsize = (18,8), dpi = 60)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nbar_kawrgs = {'edgecolor':'#f6f5f5'}\nsquarify.plot(sizes= TV_duration_temp['TV_count'][0:24], label = TV_duration_temp['TV_duration'][0:10] + \"'S\", ax = ax, color = TV_duration_temp['color'],  **bar_kawrgs,\n             text_kwargs = {'font':'serif', 'size':13, 'color':'black', 'weight':'bold', 'alpha':0.8},alpha = 0.9)\n\nax.text(0,115,'How deep TV content goes on Netflix?: Number of Seasons Available. ',{'font':'serif', 'size':24, 'color':'black', 'weight':'bold'}, alpha = 1)\nax.text(0,110, 'Seems like most of the content having only one season, as the duration of show increasing its number went down.',\n       {'font':'serif', 'size':16, 'color':'black'}, alpha = 0.8)\nax.axes.get_xaxis().set_visible(False)\nax.axes.get_yaxis().set_visible(False)\n\nfor loc in ['left','right','top', 'bottom']:\n    ax.spines[loc].set_visible(False)\n\nfig.show()\n","538e7914":"fig = plt.figure(figsize = (10,8), dpi = 70)\n\nfig.patch.set_facecolor('#f5f6f6')\n\ngs = fig.add_gridspec(4,4)\ngs.update(wspace = 0., hspace = 0.2)\n\nax1 = fig.add_subplot(gs[0,0:3])\nax2 = fig.add_subplot(gs[1:4,0:3])\nax3 = fig.add_subplot(gs[1:4, 3:4])\n\n\naxes = [ax1, ax2, ax3]\n\nfor ax in axes:\n    ax.set_facecolor('#f5f6f6')\n    ax.axes.get_yaxis().set_visible(False)\n    ax.axes.get_xaxis().set_visible(False)\n    for loc in ['left', 'right', 'top','bottom']:\n        ax.spines[loc].set_visible(False)\n\nax2.axes.get_xaxis().set_visible(True)\nax2.axes.get_yaxis().set_visible(True)\nax1.axes.get_xaxis().set_visible(True)\nax1.spines['bottom'].set_visible(True)\nax3.axes.get_yaxis().set_visible(True)\nax1.spines['bottom'].set_visible(True)\nsns.kdeplot( x = 'Movie_duration',data = Movie_duration_temp, ax = ax1, shade = True, color = colors[0], alpha = 0.8)\nsns.kdeplot( y = 'Movie_count', data = Movie_duration_temp, ax = ax3, shade = True, color = 'grey', alpha = 0.8)\nsns.kdeplot(x = 'Movie_duration', y = 'Movie_count', data = Movie_duration_temp, ax =ax2, color = colors[0], shade  = True)\n\nax2.set_xlabel('Movie Duration',{'font':'serif', 'size':14, 'weight':'bold', })\nax2.set_ylabel('Movie Count',{'font':'serif', 'size':14, 'weight':'bold', })\nax3.set_ylabel('')\nax1.set_xlabel('')\nax2.set_xticks(ticks = [])\nax2.set_yticks(ticks = [])\n\nax1.set_xticks(ticks = np.arange(0, 350, 75))\nax1.set_xticklabels(np.arange(0, 350, 75),**{'font':'serif', 'size':10, 'weight':'bold', })\nax3.set_yticks(ticks = np.arange(-25, 150, 50))\nax3.set_yticklabels(np.arange(-25, 150, 50),**{'font':'serif', 'size':10, 'weight':'bold', })\n\nax1.text(-250, 0.0070,'How Movie Duration effects on Content?: Duration VS Availabilty',{'font':'serif', 'size':16, 'weight':'bold', })\nax1.text(-250,0.0058,'Seems like higher the duration of the movies,lower to find them on platform. \\nMost of the content available in the range of 25 mins to 200 mins.',\n        {'font':'serif', 'size':12, 'weight':'normal'},alpha = 0.8 )\nfig.show()","5d47e24f":"data  = Movie_duration_temp['Movie_category'].value_counts()\n\n\n# initialize the figure\nfig = plt.figure(figsize=(14,7), dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\nax = plt.subplot(polar=True)\nplt.axis('off')\n\n\nlabels = ['60 to 90 Mins', '90 to 120 Mins',\n         '120 to 150 Mins', '30 to 60 Mins',\n          '150 to 180 Mins', 'Below 30 mins',\n          '210 to 240 Mins', '240 to 1000 Mins',\n          'Above 1000 mins']\n\ncolors = ['#b20710', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey','grey']\n\n\n# Constants = parameters controling the plot layout:\nupperLimit = 200\nlowerLimit = 2\nlabelPadding = 2\n\n# Compute max and min in the dataset\nmax = data.max()\n\nslope = (max - lowerLimit) \/ max\nheights = slope * data.values + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(data.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(data)+1))\nangles = [element * width for element in indexes]\n\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"#f6f5f5\",\n    color = colors,\n)\n\n# Add labels\nfor bar, angle, height, label in zip(bars,angles, heights, labels):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle,\n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\",**{'font':'serif', 'size':9, 'weight':'bold','color':'black'},alpha = 0.9) \n\nfig.text(0.25,1.1,'Movie Duration and Count - Best Duration for films!!',{'font':'serif', 'size':20, 'weight':'bold','color':'black'})\nfig.text(0.25,1.05,'Medium length movies are mostly available on Netflix. \\nLengthy movies are quite rare and least available on Netflix.',{'font':'serif', 'size':12,'color':'black'}, alpha = 0.7)\nfig.show()","19aa32c3":"cast = df[['cast', 'type', 'title']]\ncast_names = cast['cast']\n\n\nnames_dict = {}\n\nfor names in cast_names:\n    names = names.split(',')\n    for name in names:\n        if name in names_dict.keys():\n            d = {}\n            d[name] = names_dict[name] + 1\n            names_dict.update(d)\n        else:\n            d = {}\n            d[name] = 1\n            names_dict.update(d)\n\nactor, roles = [], []\nfor key, value in names_dict.items():\n    actor.append(key)\n    roles.append(value)\n    \ncast_temp = (pd.DataFrame({'Actor':actor, 'Roles':roles})\n             .sort_values('Roles', ascending = False))\ncast_temp.reset_index(drop = True, inplace = True)","e8b03672":"cast_temp = cast_temp.sort_values(by = 'Roles', ascending = False).reset_index(drop = True)\nfig,ax = plt.subplots(figsize =(10,10),dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nax.barh(y = cast_temp.Actor[1:30], width =  cast_temp.Roles[1:30], height = 0.2, color = colors[0])\nax.scatter(y = cast_temp.Actor[1:30], x =  cast_temp.Roles[1:30], s = (cast_temp.Roles[1:30]) *2, c = colors[0] )\nax.axvline(x = 0, ymin = 0,ymax = 1, **{'linewidth':1, 'linestyle':'--', 'color':'black'}, alpha = 0.8)\n\nfor i, j in zip(cast_temp.Roles[1:30], cast_temp.Actor[1:30]):\n    ax.text(i+0.5,j,i,{'font':'serif', 'size':12,'weight':'bold'})\n\n\nax.set_yticklabels(cast_temp.Actor[1:30], {'font':'serif', 'size':12,'weight':'bold'})\nax.set_xticklabels(labels = [])\nax.set_xticks(ticks = [])\n\nax.text(-12, 31, 'Which Cast Appeared in Most in Netflix shows?: Number of roles',{'font':'serif', 'size':18,'weight':'bold'})\nplt.box(None)\n\nfig.show()\n","4182fa1a":"cast_single = cast.cast.value_counts()\nx = cast_single[1:50].index,\ny = cast_single[1:50].values\n\nfig,ax = plt.subplots(figsize =(10,10),dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nax.barh(y = range(1,50), width =  y, height = 0.2, color = colors[0])\nax.scatter(y = range(1,50), x =  y, s = (y) *2, c = colors[0] )\nax.axvline(x = 0, ymin = 0,ymax = 1, **{'linewidth':1, 'linestyle':'--', 'color':'black'}, alpha = 0.8)\n\nfor i, j in zip(y,range(1,50)):\n    ax.text(i+0.5,j,i,{'font':'serif', 'size':12,'weight':'bold'})\n\nax.set_yticks(ticks = range(1,50))\nax.set_yticklabels(x[0].tolist()[0:50], {'font':'serif', 'size':8.5,'weight':'bold'})\nax.set_xticklabels(labels = [])\nax.set_xticks(ticks = [])\n\nax.text(-10, 53, 'Cast Ranking as Whole Cast Team?: Movie Cast Description',{'font':'serif', 'size':18,'weight':'bold'})\nplt.box(None)\n\nfig.show()\n","6492c591":"x = df.director.value_counts()[1:31].index,\ny = df.director.value_counts()[1:31].values\n\nfig,ax = plt.subplots(figsize =(10,10),dpi = 70)\nfig.patch.set_facecolor('#f6f5f5')\nax.set_facecolor('#f6f5f5')\n\nax.barh(y = range(1,31), width =  y, height = 0.2, color = colors[0])\nax.scatter(y = range(1,31), x =  y, s = (y) *4, c = colors[0] )\nax.axvline(x = 0, ymin = 0,ymax = 1, **{'linewidth':1, 'linestyle':'--', 'color':'black'}, alpha = 0.8)\n\nfor i, j in zip(y,range(1,31)):\n    ax.text(i+0.5,j,i,{'font':'serif', 'size':12,'weight':'bold'})\n\nax.set_yticks(ticks = range(1,31))\nax.set_yticklabels(x[0].tolist()[0:31], {'font':'serif', 'size':9,'weight':'bold'})\nax.set_xticklabels(labels = [])\nax.set_xticks(ticks = [])\n\nax.text(-7, 32, 'Which Director Directed Most of the Content?: Contributing Director',{'font':'serif', 'size':18,'weight':'bold'})\nplt.box(None)\n\nfig.show()\n","283f73f7":"\n# importing all necessery modules a\nfrom wordcloud import WordCloud, STOPWORDS \n\ncomment_words = '' \nstopwords = set(STOPWORDS) \n\nfor word in df.title:\n    words = word.split(',')\n    for i in words:\n        token = i.lower()\n        comment_words += \"\".join(token) + ' '\n\ncolors = ['#221f1f', '#b20710', '#e50914','grey']\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors = colors)\nwordcloud = WordCloud(width = 500, height = 500, \n                background_color ='white', min_word_length = 4,\n                stopwords = stopwords, colormap = colormap,\n                min_font_size = 10).generate(comment_words) \n\nimport matplotlib as mpl\nmpl.rcParams['figure.dpi'] = 120\n\n# plot the WordCloud image\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() \n","7054b825":"comment_words = '' \nstopwords = set(STOPWORDS) \n\nfor word in df.description:\n    words = word.split(',')\n    for i in words:\n        token = i.lower()\n        comment_words += \"\".join(token) + ' '\n\nwordcloud = WordCloud(width = 500, height = 500, \n                background_color ='white', min_word_length = 4,\n                stopwords = stopwords, colormap = colormap,\n                min_font_size = 10).generate(comment_words) \n\n\n# plot the WordCloud image\nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \nplt.show() \n","c468dc2d":"engine_df = df.copy()\n\ncontent_cols = ['title','type','director','cast','country','listed_in','description','age_rating']\nengine_df = engine_df[content_cols]\n\nengine_df['text_content'] = (engine_df['title'] + \" \" +engine_df['type']+\" \" +engine_df['director']+ \" \"+engine_df['cast']+ \" \"+\n                      +engine_df['country']+ \" \" +engine_df['listed_in']+ \" \"+ engine_df['description']+\n                      \" \" +engine_df['age_rating'])\n\nengine_df['text_content'] = engine_df['text_content'].apply(lambda x: x.replace(',',\" \"))\nengine_df['text_content'] = engine_df['text_content'].apply(lambda x: x.replace('&',\" \"))\nengine_df['text_content'] = engine_df['text_content'].apply(lambda x: x.replace('-',\"\"))\nengine_df['text_content'] = engine_df['text_content'].apply(lambda x: x.replace('.',\" \"))\nengine_df['text_content'] = engine_df['text_content'].apply(lambda x: x.lower())","ab200dec":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncountvect = CountVectorizer()  ### helps in count in words reperated in the text \ncount_matrix = countvect.fit_transform(engine_df['text_content']) ## creates nxn count matrix for all the words in corpus\ncosine_sim = cosine_similarity(count_matrix)","96a56911":"class bcolors:\n    HEADER = '\\033[95m'\n    OKBLUE = '\\033[94m'\n    OKCYAN = '\\033[96m'\n    OKGREEN = '\\033[92m'\n    WARNING = '\\033[93m'\n    FAIL = '\\033[91m'\n    ENDC = '\\033[0m'\n    BOLD = '\\033[1m'\n    UNDERLINE = '\\033[4m'\n\n\n\ndef recommend_me(my_title, n = 10, verbose = True):\n    \"my_title: Name of the show \\\n     n: number of recommendations\"\n    \n    if n > 30:\n        n = 30\n    def get_title_from_index(index):\n        return engine_df[engine_df.index == index]['title'].values[0]\n    def get_index_from_title(title):\n        return engine_df[engine_df['title'] == title].index.values[0]\n    \n    try:\n        index_ = get_index_from_title(my_title)\n        similar_movies = list(enumerate(cosine_sim[index_]))\n        sorted_similar_movies = (sorted(similar_movies, key = lambda x: x[1], \n                                    reverse = True ))[1:] ## sorting based on second element of tuple and removing self\n        recommend = []\n        print(bcolors.BOLD + bcolors.WARNING +'Top {} Recommendations for you because you liked {}:'.format(n, my_title) + bcolors.ENDC)\n    \n        for count,val in enumerate(sorted_similar_movies):\n            if count >n:\n                break\n            recommended_ = get_title_from_index(val[0])\n            recommend.append(recommended_)\n            if verbose:\n                print(bcolors.BOLD + bcolors.OKBLUE + recommended_)\n            \n    except:\n        print(bcolors.BOLD + bcolors.WARNING +'There is no content is available as per your liking. May be give me title available on NETFLIX'+ bcolors.ENDC)\n    return None#recommend\n        ","ed1fc94a":"recommend_me('Altered Carbon',10)\n","d2e48b79":"recommend_me('Lucifer',10)","8251da38":"recommend_me('asdfasndnfasdf',10,)","9c833255":"recommend_me('The Umbrella Academy',10,)\n","e108ca7c":"\n\nData tells a better story, isn't it? looking at the above plots it is obvious that since last decade, content addition to netflix is far higher than released. This is may be because streaming platforms are adding old content as well in parallel to current production. This Trend is true since the boon of internet era as mosty of the content reach one or other steaming platform. From our plot, impact of recent covid-19 pandemic on content release and content addtion can be observed, which is from end 2019 to 2021. Highest number of movies and shows were added around 2020 and lowest of lowest could be seen at the tail section.\n    \n","7d5df898":"<a id ='introduction'> <\/a>","d330572f":"<h1 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 3. Nullity of The Date and Missing Value Handling<\/h1>","4b5d48ce":"<a id = 'section6'><\/a>","7335f65d":"\n\nNetflix started in 1997, but the content addition was very scarse and it is really internet that flipped the switch here. From 2015 most of the content was added to the platfrom and covid did effected this in a very bad way.\n    ","3f19b9ac":">                         Above plot show the cast appearence in number of netflix contet.","c83c9605":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 9. Netflix Title Analysis<\/h2>","35776bdc":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4.0.2. Movies Preferred Countries<\/h2>","2dbc9dfd":"<a id = 'section2'><\/a>","822a1c10":"\nFrom rating count bar chart, it is clear that most of the content is produced for adults and teens. Very less general content is available online on netflix.\n","e4426d03":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 10. Netflix Content Description Analysis<\/h2>","423dcd99":"<h1 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 2. Netflix Data Statistical Impressions<\/h1>\n\n\nIt's time to get hands dirty with mess of raw data. Typically, realworld data inherits huge randomness and incompleteness, which pose a problem in analysis and building model. So, begin with looking for randomness and incompleteness in out data. \n\nBut how can i do that? may be statistics could be helpful to tackle our situation.\n\n> These are some simple and powerful methods form pandas modules. \n* **.head()** - checking the head (default, 5values) rows of the dataframe\n* **.describe()** - detailed report of mean, median,mode, and top and least values in the dataframe\n* **.sample()** - select the sample of the data from dataframe\n* **.select_dtype()** - select the required datatypes for the dataframe\n* **.info()** - returns none dataframe with number of objects and dtypes\n* **.isna()** - rerutns boolean values for condition of null values and non-null values\n\n\nHiding the code of the notebook to have a give a better presentation of data. So, please check the hidden lines for code. lets load our dataset and sneak peak into the data.\n","defdca2d":"\n# Update:  Whats new?\n\n\n        1. Palette color changes were made.\n        2. Few new plots were added\n        3. Content Based Recommendation System is added.\n        \n# My other notebooks: \n   1. [data-stroytelling-auc-focus-on-strokes](https:\/\/www.kaggle.com\/bhuvanchennoju\/data-stroytelling-auc-focus-on-strokes)\n   2. [Diamonds and dollars: Story,Stats,Stacked,Sense](https:\/\/www.kaggle.com\/bhuvanchennoju\/s-s-datastory-r2-99-21-focus)\n        \n        ","d94c6cc8":"###  <a id = 'section5'> <\/a>\n\n<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 1. Netflix Content Analysis<\/h2>","1de201e8":"<a id = 'section8'><\/a>","0ef36997":"<a id = 'section17'><\/a>","6dd91095":"\nNeflix offer two kinds of streaming content, whicha are movies and Tv shows. Distribution of the content on platform is skewed towards to movies, which occupy nearly 70 percent of the content it offer. Our distribution pie shows the stats of content from the data. So, this feature is important while anlysis other features.\n","253ba350":">            Raul campos, jan suter are the top directors on the netflix content with nearly 17 shows directed.","66ec4a56":"\n<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 3. Netflix Time Series Analysis<\/h2>","802f238a":"\n\nThese visulizations show the countrywise count of origin of content, which include both Movies and TVs shows. US and India are on top of the list. few countries from africa has very low production of netflix content. Okay, lets analyze content seperately for TVshows and Movies to see which country favours to what type of content most.\n","edd40e66":"\nWhat is interantional content? It is content shooted or produced in may countries as a colloborative project. Many of the TV shows and movies are produced internationaly. So it is important to analyse this data well. \n\nInternational or not\n1. International - 1\n2. Domestic - 0\n","4354faa3":"\nIn our data, two features are chronological data, which are date_added, release_year. Why is this data important? okay, lets make an assumption that, analysing content added date could help us understand which month of the year done most of the content added to the platform and pace of adding content to platform with time. Release_year could help understanding the influence of the digital era over the content production in either direct or indirect way. So, lets start our analysis.\n\n\n> Always its better to convert dataframe to todatetime format when dealing with time series. \n   ","8b13413d":"<a id = 'section3'><\/a>","74f1fa75":"Successfully handled all the missing values!","512ae904":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 6. Netflix Content Duration Analysis<\/h2>","01684ae7":">              Most of the titles of netflix are about love,christams,world.","de93e657":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4. Netflix Content Country Analysis<\/h2>","a55925c7":"\nDuration is another intresting feature to analyze, because most of the tv content is follow season representation, were as movies follow time in minutes. This could help us understand user preference of content,whether user like beach watching or short time user.\n","0fd09655":"\nFrom info() method, it is clear that there is missing data and it is important to handle this missing data carefully, so lets understand the exising data to come up with some values for missing data. From above information, we have to handle object and integer data, So first see the statistics of these two categorise and later check those missing data.\n\n\nNext lets look at the statistics of both object and integer datatype. For that we will use \n\n> .describe() - this gives stats report of the dataframe.\n    \n  ","6957a958":"<a id = 'section11'><\/a>","2a16c459":"# Please upvote if you found my work useful\n\n# Update: \n\n\n        1. Palette color changes were made.\n        2. Few new plots were added\n        3. Content Based Recommendation System is added.","274e2524":"<a id = 'section21'><\/a>","acc5c45e":"<a id = 'section7'><\/a>","ec9f0e09":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4.0 Which Content Type is Preferred by Individual Countries?<\/h2>","b377a652":"\n<h1 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4. Explinaratory Data Analysis <\/h1>\n\n    \nThere are 12 featues in dataset, data is moslty included with categorical data. Expected outcome from this EDA is to analyse some trends, tops bottoms of the data. Data in hand available is mostly categorical and time dependent components, so, strategy is to visualize few time dependencies, popular, unpopular of all the features. Crutial part of this analysis chronological inputs, so it's better to convert some dataframe columns to datetime format to extract month, year data from given crude data. \n\nAlong with the categorical and numerical data, we do have plenty of text data from descriptions, so there is nothing harm in looking what kind of topics does netflix content mostly based upon. Idea is to use wordcloud module to visulaize that word data.\n\nThrough out the anlysise to keep things simpler, tried to stick with best ink to area rules and no interactive plots to avoid mess. In addition as we are handling netflix data it would be fun to stick with the netflix brand palette, which is blacks, reds and white.\nlets start with brand palette visualization and move a head.\n    \n","471468e2":"<a id = 'section14'><\/a>","fa0e6e9a":"\n\n<div class=\"image\">\n    <img style=\"float:center; border:5px solid black; width:40%; \" align=center src=\"https:\/\/wallpapercave.com\/download\/netflix-logo-wallpapers-wp5063337?nocache=1\">\n<\/div>\n\n\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Netflix is Awesome! Why? see here<\/h1>\n\n## <font style=\"font-family:'Garamond' ; font-size : 25px\"><center>- A sneak peak on world of entertainment<\/center><\/font>\n\n\n\n<div class = 'column'>\n    <img style = \"float:left; border: 5px solid black; width:33.33%; height:30%\" align = center\n         src = \"https:\/\/wallpapercave.com\/download\/netflix-logo-wallpapers-wp5063337?nocache=1\">\n<\/div>\n\n<div class = 'column'>\n    <img style = \"float:center; border: 5px solid black; width:33.33%; height:30%\" align = left\n         src = \"https:\/\/wallpapercave.com\/download\/netflix-logo-wallpapers-wp5063337?nocache=1\">\n<\/div>\n\n<div class = 'column'>\n    <img style = \"float:right; border: 5px solid black; width:33.33%; height:30%\" align = center\n         src = \"https:\/\/wallpapercave.com\/download\/netflix-logo-wallpapers-wp5063337?nocache=1\">\n<\/div>\n\n\n\n","d5544100":"\n\nIn given dataset, overall 14 categories of maturity ratings can be seen, which provide relevence of content to various age groups and in general for kids, teens, and adults. This rating help in reccomending appropriate content to appropriate age groups. It is not suggestable for kids to Withcher, right? like wise adults less likely to watch naruto. So, this is a very important parameter for a best reccomendation system, which is why little emphasis was provided over this column. \n\nTo make things simpler whole, 14 categories were split into three age groups:kids, Teens, Adults based on information from [netflix help](https:\/\/help.netflix.com\/en\/node\/2064\/ca.)\n\n> Maturity rating can be found at the above link\n* TV-Y : Kids\n* TV-Y7 : Kids \n* TV-G   : Kids\n* PG     : Kids\n* TV-PG  : Kids\n* PG-13  : Teens\n* TV-14  : Teens\n* R      : Adults\n* TV-MA  : Adults\n* NC-17  : Adults\n* NR : Adults\n* UR : Adults\n* TV-Y7-FV : Kids\n* G :  Kids\n\nThese are maturity wise classification\n\n","d2927b3f":"<a id = 'section16'><\/a>","5f9aeaca":"In general recommendation systems are three types \n\n1. Trend based recommendation systems - These are like counting clicks, views per video, upvotes in last few hours.\n2. Contet based recommendation systems - These are purely content dependent recommendations, like songs with similar genre, singer, director, location, and soon. we find similarity with in the products or articles here.\n3. User-User recommendation systems - These are adoptive systems, which collects huge users data and find correlation between users search trends, activities, watchlists and suggest similar content for simlar kind of users.\n\nTo get the completeness of this notebook, Attempting to implement a simple content based recommendation system. Idea is to concactinate the whole content data such as title,director,age-rating, description, country together to create a text corpus of each movie or show. \nlater, vectorize this corpus and pass it through a cosine_similairty method to get the angular distances between various content and\ncreate a similarity matrix. Similartity matrix will gives the extent of similarity between each content and sorting and extracting index can give the recommendations.","6377082d":"<a id = 'section19'><\/a>","b740d961":" <h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Data cleaning and Individual text corpus creation<\/h2>","ac1902a8":"<a id = 'section10'><\/a>","d2772134":"<a id = 'section18'><\/a>\n\n<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\">6.1 TV Shows Seasons Analysis<\/h2>","d4fb775e":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 3.1. Netflix Content Release Year Analysis<\/h2>","517618d8":">    from above visulaization it is clear most of the content on platform is comidies and intenational films ","a81ce735":"<a id = 'section20'><\/a>","56230421":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 3.3 In Which Month Does Most of The Content Added To Platform?<\/h2>","05e0d4b6":"<a id = 'section4'><\/a>","d64405f4":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 7. Netflix Content Cast Analysis<\/h2>","48144e9d":"\nWhy it is important to seperate country wise content preference? \n\nBecause not every region same kind of content, like indian prefer to watch movie over TV shows, on contrary south koreans perfer Tv shows over movies. We are interested in finding such perferential choices. Now lets analyse the data based on content and country data.\n\nTwo type of categories araise here\n\n1. TV shows prefered countries\n2. Movies shows prefered countries\n    \n","5b5ec4a2":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4.0.1. TV Shows Preferred Countries<\/h2>","ba1089a4":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 8. Netflix Content Director Analysis<\/h2>","bf517352":" <h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Content Recommendations Output <\/h2>","55437c90":"<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 1. Introducation <\/h1>\n\n\nNetflix is the worlds leading Internet television network with over 83 million members in over 190 countries enjoying more than 125 million hours of TV shows and movies per day, including original series, documentaries and feature films. Members can watch as much as they want, anytime, anywhere, on nearly any Internet-connected screen. Members can play, pause and resume watching, all without commercials or commitments. \n\nBut what is streaming and how it's changing industry of entertainment in our internet era? Well, this was explained by netflix in this video.\n\n<br>\n<br>\n\n<div align = 'center'>\n    <iframe  width=\"500\" height=\"250\" src=\"https:\/\/www.youtube.com\/embed\/lW9BLmjzi_4\" frameborder=\"5px Soid Black\"><\/iframe>\n<\/div>\n\n<br>\n<br>\n\n\nOkay now we got some intution of what our data is all about. It's basically the infromation of content available on Netflix and this data was gather with the help third party applications by some good kaggler. We got data, we know about streaming and online content by now. But, why do we care? I mean why putting all the efforts to analyse this big mess of the data? \n\nAnswer is simple, to put good use of this data to build applications such as custom cutomer reccommendations and selective content suggetions to hook customers for long time. Not convinced? okay here is another video why we need to care about data? See this video about how netflix gives best relevent reccommendations to subscribers\n\n<br>\n<br>\n\n<div align = 'center'>\n    <iframe width=\"500\" height=\"250\" src=\"https:\/\/www.youtube.com\/embed\/VvpoUh9gx58\" frameborder=\"5px Solid Black\" ><\/iframe>\n<\/div>\n\n<br>\n<br>\n\n\n\nDone? by now we got to know breifly about data were are handling,and know that there will be some details of some movies. Based on general sense, for any kind of movie or Tv show, all we care about is title, language, genre, director and may be about seasons or time of the movie. This kind of information will be our intereset. \n\n  \n## <font style = \"font-family: 'Garamond'; font-size: 35Px\"><center> Let's dive into the data...<\/center><\/font>\n\n","2d8b608c":"\n\nNetflix offer range of genre to subsribers, for comdeies to tragedy , documnetaries to talk shows, It would be fun to analyze this feature. One interesting thing to notice is that most of the content fells into to multiple genre so, we can visulaize single genre contet and multiple genre content as well.\n\nWith little data cleaing we find that there are total of only 42 genre on netflix, but all the content fell into multi genre,which makes a big mess to visulaize the data. \n","bd52176a":"\n From the plot above it is clear that in the month of january, december most of the content went online. It is good to observe that most of the content start available in holiday season, like march, just befro summer and like wise in december. \n","3e6b5bb4":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 6.2 Movies Duration Analysis<\/h2>","dff5b01b":" <h2 style = \"font-size:35px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Similarity matrix creation with CountVectorizer and cosine similarity<\/h2>","8dda0228":"\nFrom the data sample is it clear that, data have total of 11 features with lots of mixed alpha numeric data. Breif discriptions of the features are given later. We understood that there is randomness in the data but what about the incompleteness i.e missing information? lets check it out first.\n","81ffca92":"\n    \nFrom the treemap visulaization, it is clear that most of the netflix content is for adults followed by teens and kids. In general this making sense as well, so lets focus on rating distribution entirely this time, to see understand deeply which sub categories are on top of the list and which are at the bottom of the list.  \n> Trying to implement less ink to chart area ratio principal here\n    ","6dcbe68b":"<a id = 'section9'><\/a>\n\n\n<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 3.2 Netflix Content Added Year Analysis<\/h2>\n","96ff1736":"\n    \nRelease of content was happening from way back 1925, but here that data was truncated as it is out of scope of this anlayis. From the plot it is clear that entertainment industry mostly favoured movies till last decade, but things are changing and focus shifting towards shows as well. It is clear from the plot that covid did effected entertaiment industry significataly. Since past decade, both movies and tv shows gain popularity and most of the content is in the category of movies. \n","10745e9a":"\n    \n> This two tables gives some information about unique values, topvalues, frequencies of topvalues.\nNotably few features show some interesting stats\n* type - 2 categroies, most of the content on the platform are movies.\n* director - Raul Campos, Jan Suter are contirbuted and directed as many as 18 title, and they are by for on the top of the list. Sometimes people use this value to fill missing values, But we are not considering that option and stick with misisng values to director_data_unknown.\n* cast- David Attenborough is the only actor to act in many of the films and shows on netflix. For filling missing values, we will use actor_data_unknown.\n* country - USA is by far producing most of the content,so lets use this value to fillna values.\n* date_added - jan 1 2020 is the peak date in content went online on platform. So, lets consider this to handle missing values.\n* rating - 14 categories are present, so it make sense to analyise this data to see how are audience and what age group netflix targeting.\n* listed_in - there are nearly 500 unique entries in this column, but we can split the data in to somekind of sting to see if we find anything interesting in here.\n* release_year - this gives the chronoloical time line of produced content, here range of content is from 1925 to 2021, this could help us see how popular content from various years.\n* descriptions - this could be helpful in understanding what kind of topics does content based on.\n\n\nlets visualize the missing data now\n","ad2f6493":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 2. Netflix Rating Analysis<\/h2>","38f68f31":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 5. Netflix Content Genre Analysis<\/h2>","4a7db569":"\n Our missing number plots shows that total four columns have missing values which are director,rating, cast, country, date_added. Most of missing values canbe observed in director column, followed by cast column.\n\nStrategy to fill this null values is a crutial step in building better ml models. Generally ml practitioners use range of techniques to solve this issue few are given below. Here null values in **director, cast, country,rating, data_added**\n\n> Three techniques to handle null values\n* .dropna() - This is a technique to drop the null values from dataset. This is quite useful if missing values are either quite less or we have ample of data.\n* .fillna() - This is a technique used to fillna value with either custom value or values from data stats. Filling techinque involves in filling na with mode of the column, filling forward value, filling backward value, or any custom value.\n*  Third technique is quite advanced one, Where we make some assumption about missing values and use conditional statements to predict and fill the missing values from other feathers.\n\n\nfilling missing data with following datapoints\n\n1. director - NoDataAvailable\n2. cast - NoDataAvailable\n3. county - mode of the county series\n4. date_added - mode of the date_added\n5. rating - mode of the rating\n\n  ","b02b67f5":"<h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 4.1 Does Any Content Is International?<\/h2>","08272679":" <a id = 'section24'><\/a>\n <h2 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f6f6 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> 11. Content Based Recommendation System<\/h2>","db0eb24c":"<a id = 'section22'><\/a>","4b09db5a":"<a id = 'section12'><\/a>","3a9e3c05":"\n\n<h1 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Table of Contents<\/h1>\n\n####  <a href = '#introduction'>1. Introduction <\/a>\n####  <a href = '#section2'>2. Netflix Data Initial Impressions<\/a>\n####  <a href = '#section3'>3. Data Imcompleteness Visulaization and Handling <\/a>\n####  <a href = '#section4'>4. Exploratory Data Analysis of Netflix Data <\/a>\n####  <a href = '#section5'>.1. Netflix Content Analysis <\/a>\n####  <a href = '#section6'> .2. Netflix Rating Analysis <\/a>\n####  <a href = '#section7'>.3. Netflix Chronological Data Analysis <\/a>\n####  <a href = '#section8'>.3.1 Netflix Content Release Year Analysis <\/a>\n####  <a href = '#section9'>.3.2 Netflix Content Added Year Analysis <\/a>\n####  <a href = '#section10'>.3.3 Which month does most of the content added to platform? <\/a>\n####  <a href = '#section11'>.4. Netflix Content Country Analysis <\/a>\n####  <a href = '#section12'>.4.0. Which Content type is perference by Individual Countries? <\/a>\n####  <a href = '#section13'>.4.0.1. TV shows Prefered Countries <\/a>\n####  <a href = '#section14'>.4.0.2. Movies Prefered Countries <\/a>\n####  <a href = '#section15'>.4.1 Does Any Content Is International? <\/a>\n####  <a href = '#section16'>.5. Netflix Content Genre Analysis <\/a>\n####  <a href = '#section17'>.6. Netflix Content Duration Analysis <\/a>\n####  <a href = '#section18'>.6.1 TV show Seasons Analysis <\/a>\n####  <a href = '#section19'>.6.2 Movies Duration Analysis <\/a>\n####  <a href = '#section20'>.7. Netflix Content Cast Analysis <\/a>\n####  <a href = '#section21'>.8. Netflix Content Director Analysis <\/a>\n####  <a href = '#section22'>.9. Netflix Title Analysis <\/a>\n####  <a href = '#section23'>.10. Netflix Content Description Analysis <\/a> \n####  <a href = '#section24'>11. Content Based Recommendation System<\/a> \n\n","408bfd30":"<a id = 'section13'><\/a>","3240e093":"<a id = 'section15'><\/a>","59e04640":"<a id = 'section23'><\/a>","11cc0dfe":">        From word cloud we can see that most of the descriptions of the netflix content is about family,life, world. "}}