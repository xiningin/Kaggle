{"cell_type":{"73de9dde":"code","51adb294":"code","aa7aaff8":"code","cc775d81":"code","73e8d077":"code","2ddeb2bf":"code","818b7d90":"code","0bd6bb7d":"code","12c719a2":"code","24b638fd":"code","595669c3":"code","88b5b3bf":"code","1c7a2285":"code","27263ed3":"code","e1c94b71":"code","a96aac2b":"code","b75d41af":"code","77d0bedf":"code","4e0fa2ca":"code","d8f175a3":"code","838ffbf1":"code","896b587a":"code","1134af98":"code","4f9f2edf":"code","623da5db":"code","2897eab4":"code","61acd56b":"code","0721e20f":"code","6141a618":"code","3e62b7e6":"code","acdde95c":"code","05d52432":"code","298e4125":"code","ba8d6849":"code","52f5ab56":"code","549365f2":"code","0e2e5c3a":"code","f52c5970":"code","1ee7e8fa":"code","22d494ba":"code","7c715174":"code","76772dc6":"code","ded52901":"code","b9e114bb":"code","c5ff712d":"code","24a7a27c":"code","c736d2b2":"code","1a83cdd7":"code","df27e119":"code","020af51f":"code","7528b5fe":"code","07faec4a":"code","bdbb664a":"code","05b800f7":"code","b224213a":"code","e596a304":"code","b7158a4e":"code","d8201992":"code","63b3104f":"code","e5cb7abb":"markdown","23aa6f94":"markdown","e7640ac4":"markdown","1c220ba9":"markdown","9a5cdef0":"markdown","d00b81f2":"markdown","2d0324f7":"markdown","ed5a539e":"markdown","8fad3222":"markdown","455cefd9":"markdown","6fb7f5f4":"markdown","a9dbcee6":"markdown","0e2722da":"markdown","b7ef6939":"markdown","cf89c2e6":"markdown","f29a0799":"markdown","98cd5604":"markdown","9d2421e5":"markdown","9d0def75":"markdown","6b2d07be":"markdown","63fd0478":"markdown","1efa299d":"markdown","e8314dc2":"markdown","b6a040c3":"markdown","595909da":"markdown","7cea9f27":"markdown","7d11ce67":"markdown","e4652f7d":"markdown","74881358":"markdown","09ab1471":"markdown","67172e2e":"markdown","2e32155a":"markdown","529d3440":"markdown","ab50df6b":"markdown","b6b028fb":"markdown","d56c9be5":"markdown","67befbc0":"markdown","5aa21f4b":"markdown"},"source":{"73de9dde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","51adb294":"import matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv('\/kaggle\/input\/telecom-users-dataset\/telecom_users.csv')\ndf.head()","aa7aaff8":"df.info()","cc775d81":"df.nunique()","73e8d077":"tf = df[['Unnamed: 0', 'Churn']]\ntf = pd.get_dummies(tf, drop_first=True)\ntf.corr()","2ddeb2bf":"df = df.drop(['Unnamed: 0', 'customerID'], axis = 1)","818b7d90":"sns.countplot(data = df, x = 'gender', hue = 'Churn');","0bd6bb7d":"df_sen = df.copy()\ndf_sen['SeniorCitizen'] = df_sen['SeniorCitizen'].map({0:'Not Retired', 1:'Retired' })\nsns.countplot(data = df_sen, x = 'SeniorCitizen', hue = 'PhoneService');","12c719a2":"sns.countplot(data = df_sen, x = 'SeniorCitizen', hue = 'DeviceProtection', hue_order = ['Yes', 'No', 'No internet service']);","24b638fd":"tf = df.sort_values(by = 'StreamingTV', ascending=False)\ntf = tf[(tf['StreamingTV'] != 'No internet service') & (tf['StreamingMovies'] != 'No internet Service')]\ntf_1 = tf[(tf['Churn'] == 'Yes')]\ntf_2 = tf[tf['Churn'] == 'No']\nfig, axes = plt.subplots(ncols=2, figsize = (12,7), dpi = 100, sharey = True)\naxes[0].set_title(\"People who renewed their contract with Telecom\");\naxes[0].tick_params(labelleft = True)\nsns.countplot(data = tf_2, x = 'StreamingTV', hue = 'StreamingMovies', hue_order = ['Yes', 'No'], ax = axes[0])\nsns.countplot(data = tf_1, x = 'StreamingTV', hue = 'StreamingMovies', hue_order = ['Yes', 'No'],  ax = axes[1])\naxes[1].set_title(\"People who did not renew their contract with Telecom\");\naxes[1].legend(loc = 'upper center', title = 'StreamingMovies')\naxes[1].tick_params(labelleft = True)","595669c3":"secured = df[['OnlineSecurity', 'DeviceProtection', 'OnlineBackup', 'Churn']]\nsecured = secured[secured['OnlineBackup'] != 'No internet service'] #Going to get rid of No internet Service because they obviously would not have any of these protections\nsecured.head()","88b5b3bf":"secured_corr = secured.copy()\nfor i in secured_corr.columns[:-1]:\n    secured_corr[i] = secured_corr[i].map({'Yes':1, 'No':0, 'No internet service':0})\nmask = np.zeros_like(secured_corr.corr())\nmask[np.triu_indices_from(mask)] = True\n\nsns.heatmap(secured_corr.corr(), annot = True, cmap=\"YlGnBu\", mask = mask, vmin = 0, vmax = 1);","1c7a2285":"secured = secured.sort_values(by = 'OnlineSecurity', ascending=False)\nfig, axes = plt.subplots(ncols = 3, dpi = 130, figsize = (15, 7), sharey=True)\nj = 0\nfor i in secured.columns[:-1]:\n    sns.countplot(data = secured.sort_values(by = i, ascending=False), x = i, hue = 'Churn', ax = axes[j], palette='Dark2', hue_order = ['No', 'Yes'])\n    axes[j].legend(loc = 'upper left', title = 'Churn')\n    axes[j].tick_params(labelleft = True)\n    j+=1","27263ed3":"df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors = 'coerce')\ndf['TotalCharges'] = df['TotalCharges'].fillna(0)\ndf_t = df[['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']]\ndf_t.head()","e1c94b71":"df_tcorr = df_t.copy()\ndf_tcorr['Churn'] = df_tcorr['Churn'].map({'No':0, 'Yes':1})\nplt.figure(figsize=(9,8), dpi = 100)\nmask = np.zeros_like(df_tcorr.corr())\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(df_tcorr.corr(), annot=True, mask = mask );","a96aac2b":"#tenure - how many months a person has been a client of the company\n#MonthlyCharges - current monthly payment\n#TotalCharges - the total amount that the client paid for the services for the entire time","b75d41af":"sns.jointplot(data = df_t, x = 'tenure', y = 'MonthlyCharges', hue = 'Churn', hue_order = ['No', 'Yes'], palette = 'ocean_r', height = 10);\nsns.jointplot(data = df_t, x = 'tenure', y = 'TotalCharges', hue = 'Churn', hue_order = ['No', 'Yes'], palette = 'ocean_r', height = 10);\nsns.jointplot(data = df_t, x = 'TotalCharges', y = 'MonthlyCharges', hue = 'Churn', hue_order = ['No', 'Yes'], palette = 'ocean_r', height = 10);","77d0bedf":"df_part = df[['Contract', 'MonthlyCharges', 'TotalCharges', 'Churn']]\ndf_part.head()","4e0fa2ca":"plt.figure(figsize = (9,7), dpi = 150)\nsns.countplot(data = df_part, x = 'Contract', hue = 'Churn');","d8f175a3":"fig, ax = plt.subplots(figsize = (10, 8), dpi = 150, nrows = 2)\nsns.boxplot(data = df_part, x = 'Contract', y = 'MonthlyCharges', hue = 'Churn', ax = ax[0]);\nax[0].legend(loc = 'lower right', title = 'Churn');\nsns.boxplot(data = df_part, x = 'Contract', y = 'TotalCharges', hue = 'Churn', ax = ax[1]);\nax[1].legend(loc = 'lower right', title = 'Churn');","838ffbf1":"t = pd.get_dummies(df.drop('Contract', axis = 1), drop_first=True)\nt['Contract'] = df['Contract'].map({'Two year':2, 'Month-to-month':0, 'One year':1})\nprint(\"Features Correlated with 'Contract'\")\nt.corr()['Contract'][:-1]","896b587a":"plt.figure(figsize = (9, 6), dpi = 150)\nsns.boxplot(data = df, x = 'Contract', y = 'tenure', palette = 'winter_r');","1134af98":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler","4f9f2edf":"X_log = pd.get_dummies(df.drop('Churn', axis = 1), drop_first=True)\ny_log = df['Churn']\n\nX_train_l, X_test_l, y_train_l, y_test_l = train_test_split(X_log, y_log, test_size=0.25, random_state=42)\n\nscale = StandardScaler()\nX_train_l = scale.fit_transform(X_train_l)\nX_test_l = scale.transform(X_test_l)","623da5db":"from sklearn.linear_model import LogisticRegression\n#param_grid = {'penalty':['l1', 'l2', 'elasticnet'], 'C':[0.001, 0.1, 1, 10, 100], 'class_weight':['None', 'balanced'], 'solver':['saga'], 'l1_ratio':[0, 0.1, 0.5, 0.9, 1]}\nlg = LogisticRegression(max_iter=1000, penalty = 'elasticnet', C = 0.1, l1_ratio = 0.9, solver = 'saga')\n#grid_model_l = GridSearchCV(lg, param_grid)","2897eab4":"#grid_model_l.fit(X_train_l, y_train_l)\nlg.fit(X_train_l, y_train_l)\n#grid_model_l.best_params_","61acd56b":"#y_pred_l = grid_model_l.predict(X_test_l)\ny_pred_l = lg.predict(X_test_l)","0721e20f":"from sklearn.metrics import plot_confusion_matrix, classification_report\n#plot_confusion_matrix(grid_model_l, X_test_l, y_test_l)\nplot_confusion_matrix(lg, X_test_l, y_test_l);","6141a618":"print(classification_report(y_test_l, y_pred_l))","3e62b7e6":"from sklearn.svm import SVC\nX_train_s, X_test_s, y_train_s, y_test_s = train_test_split(X_log, y_log, test_size=0.25, random_state=42)\nscale_min = MinMaxScaler()\nX_train_s = scale_min.fit_transform(X_train_s)\nX_test_s = scale_min.transform(X_test_s)\n\n#param_grid = {'C':[0.01, 0.1, 0.5, 0.9, 1], 'kernel':['linear', 'poly', 'rbf', 'sigmoid'], 'degree':[2,3,4], 'gamma':['scale', 'auto'], 'class_weight':['None', 'balanced']}\nsv = SVC(max_iter = 10000, C = 0.9, class_weight = 'balanced', kernel = 'poly', degree = 4, gamma = 'scale')\n#grid_model_s = GridSearchCV(sv, param_grid)","acdde95c":"#grid_model_s.fit(X_train_s, y_train_s)\n#grid_model_s.best_params_\nsv.fit(X_train_s, y_train_s)","05d52432":"#y_pred_s = grid_model_s.predict(X_test_l)\ny_pred_s = sv.predict(X_test_l)","298e4125":"#plot_confusion_matrix(grid_model_s, X_test_s, y_test_s)\nplot_confusion_matrix(sv, X_test_s, y_test_s);","ba8d6849":"print(classification_report(y_test_s, y_pred_s ))","52f5ab56":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX_tree = df.drop('Churn', axis = 1)\nX_tree = X_tree.apply(le.fit_transform)\ny_tree = df['Churn']\nX_train_t, X_test_t, y_train_t, y_test_t = train_test_split(X_tree, y_tree, test_size=0.25, random_state=42)","549365f2":"#param_grid = {'n_estimators':[100, 300, 500], 'criterion':['gini', 'entropy'], 'max_features':['auto', 'sqrt', 'log2'], 'bootstrap':[True, False]}\nrfc = RandomForestClassifier(bootstrap = True, criterion = 'gini', max_features = 'sqrt', n_estimators = 500)\n#grid = GridSearchCV(rfc, param_grid)","0e2e5c3a":"#grid.fit(X_train_t, y_train_t)\n#grid.best_params_\nrfc.fit(X_train_t, y_train_t)","f52c5970":"#y_pred_t = grid.predict(X_test_t)\ny_pred_t = rfc.predict(X_test_t)","1ee7e8fa":"#plot_confusion_matrix(grid, X_test_t, y_test_t)\nplot_confusion_matrix(rfc, X_test_t, y_test_t);","22d494ba":"print(classification_report(y_test_t, y_pred_t))","7c715174":"from sklearn.ensemble import GradientBoostingClassifier\ngbc = GradientBoostingClassifier(learning_rate = 0.009, loss = 'exponential', max_depth = 5, max_features = 'sqrt', n_estimators = 500)\n#param_grid = {'loss':['deviance', 'exponential'], 'learning_rate':[0.01, 0.1, 0.5, 0.9], 'n_estimators':[100, 300, 500], 'max_features':['auto', 'sqrt', 'log2'], 'max_depth':[3,4,5,6]}\n#grid = GridSearchCV(gbc, param_grid)","76772dc6":"#grid.fit(X_train_t, y_train_t)\ngbc.fit(X_train_t, y_train_t)\n#grid.best_params_","ded52901":"#y_pred = grid.predict(X_test_t)\ny_pred = gbc.predict(X_test_t)","b9e114bb":"#plot_confusion_matrix(grid, X_test_t, y_test_t)\nplot_confusion_matrix(gbc, X_test_t, y_test_t);","c5ff712d":"print(classification_report(y_test_t, y_pred))","24a7a27c":"from sklearn.ensemble import AdaBoostClassifier\nadc = AdaBoostClassifier(algorithm = 'SAMME.R', learning_rate = 0.1, n_estimators = 300)\n#param_grid = {'n_estimators':[50, 150, 300, 500], 'learning_rate':[0.01, 0.05, 0.1, 0.5, 1], 'algorithm':['SAMME', 'SAMME.R'], }\n#grid = GridSearchCV(adc, param_grid)","c736d2b2":"#grid.fit(X_train_t, y_train_t)\nadc.fit(X_train_t, y_train_t)\n#grid.best_params_","1a83cdd7":"#y_pred = grid.predict(X_test_t)\ny_pred = adc.predict(X_test_t)","df27e119":"#plot_confusion_matrix(grid, X_test_t, y_test_t)\nplot_confusion_matrix(adc, X_test_t, y_test_t);","020af51f":"print(classification_report(y_test_t, y_pred_t))","7528b5fe":"import os\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"","07faec4a":"df_nn = df.copy()","bdbb664a":"df_nn['Churn'] = df_nn['Churn'].map({'No':1, 'Yes':0})\n\n\nX_log = pd.get_dummies(df_nn.drop('Churn', axis = 1), drop_first=True).values\ny_log = df_nn['Churn'].values\n\nscale = MinMaxScaler()\nX_train_n, X_test_n, y_train_n, y_test_n = train_test_split(X_log, y_log, test_size=0.25, random_state=42)\nX_train_n = scale.fit_transform(X_train_n)\nX_test_n = scale.transform(X_test_n)\n","05b800f7":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Dropout","b224213a":"model = Sequential()\n\nmodel.add(Dense(80, activation = 'relu'))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Dense(40, activation = 'relu'))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Dense(20, activation = 'relu'))\nmodel.add(Dropout(rate = 0.5))\n\nmodel.add(Dense(1, activation = 'sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam')","e596a304":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stop = EarlyStopping(monitor = 'val_loss', mode = 'min', patience = 25, verbose=1)","b7158a4e":"model.fit(x = X_train_n, y = y_train_n, epochs = 600, validation_data=(X_test_n, y_test_n), callbacks=[early_stop])","d8201992":"y_pred = model.predict_classes(X_test_n)","63b3104f":"print(classification_report(y_test_n, y_pred ))","e5cb7abb":"It seems most people do not have Device protection, but it has no correlation with whether someone is a senior citizen or not. ","23aa6f94":"**Does streaming TV's or Movies have a correlation with each other and does having one (or both) make it more likely that they would renew their telecom contract?**","e7640ac4":"**Lastly let's look at the contract that is signed and see if it is related to churn at all**","1c220ba9":"So there are some obvious correlations here. For example, if a person has a higher tenure (meaning they've been a client for longer), then they will have more total charges. Monthlym Charges is also clearly correlated with TotalCharges.\n\nWhat's interesting though is that none of these columns are really that good at determining the churn. One would expect that if someone has been a client for a long time (tenure), they would stay a client, but that doesn't seem to be the case with a -35% correlation. Flipping a coin would be a better determination of if someone is staying or not. Same thing with montly and total charges, there seems to be very little correlation between them and churn which is, again, surprising because how much someone is being charged would seem like a great predictor of whether or not they will renew their subscription but it doesn't seem so.\n\nPerhaps this correlation chart is not giving us the full picture, lets analyze the data a bit more.","9a5cdef0":"It seems males and females are just about as likely to choose to renew their telecom contract or not which means that gender is not going to be very correlated with Churn. There is also about an equal number of females and males in the dataset as well so this will help with the analysis.","d00b81f2":"When thinking about the 2 features, it makes sense why they're so highly correlated. If someone has a longer contract, they most likely are going to stay a client for a longer period of time. And as we've already seen, someone who has stayed as a client for awhile is more likely to renew their contract, so it makes sense why the contract is significantly correlated with Tenure and Churn.","2d0324f7":"**Are Senior Citizens less likely to have a phone service? How about Device Protection?**","ed5a539e":"Neural Net is also at a 79% accuracy rate and has that same problem of a high false positive rate. ","8fad3222":"**Do people who Protect their device have a higher chance of renewing the telecom contract?**","455cefd9":"Logistic Regression was able to get an accuracy of around 80%. However, it has a hard time dealing with False Positives.","6fb7f5f4":"No missing values, lets see if any of the data is duplicated","a9dbcee6":"Now lets try Adaboosting and see how it'll approach the problem","0e2722da":"SVM's are less accurate then Logistic Regression with a 65% accuracy. However, there are significantly less false positives in the data, at the cost of having significantly more false negatives.","b7ef6939":"First lets see the correlation between the security measures. If someone has one security feature, are they more likely to have the others as well?","cf89c2e6":"Well the type of Contract someone has with company seems to play a significant role in whether someone will renew their contract or not. Having a 2 year or 1 year contract means that people will most likely renew their contract while most people with a month to month contract tend to not renew their contracts.\n\nBut why is the contract so significant? Lets look at the total and monthly pay to see if they are perhaps paying more with a month to month contract.","f29a0799":"**Lets start analyzing how features like Tenure and Total charges affect whether someone will renew their subscription or not**","98cd5604":"# **Knowing when a client may choose to leave a service is important for a business as they might be able to convince the client to come back. Using the Telecom Dataset I'm going to be doing a Visualization of the features, along with creating a Machine Learning Model to best predict Churn.**","9d2421e5":"Seems that tenure is most related to contract with a 67.16% correlation, both of which are most closely related to Churn as well. Lets see why they are so correlated with each others.","9d0def75":"So it turns out that the pearson correlation does not do the features justice as we can clearly see a much clearer correlation with Churn now.\n\nA significant feature is definetely tenure, people do seem more likely to renew their contracts if they've already been using the service for awhile, no matter how much they are paying or have paid in total.\n\nIf Total Charges or Monthly Charges are small, people are also much more likely to keept their contract with telecom. \n\nAn interesting thing to note here is that even if monthly charges are higher, people with a high tenure (have stayed with telecom for awhile) will most likely still renew their contract.","6b2d07be":"Adaboosting gets a 79% accuracy rate which is about as good as most of the algorithms. It still has a high false positive however.","63fd0478":"**Okay that's enough data exploration for now. I'm going to move on to finding the best model to predict Churn. Note that for most of these models I used GridSearchCV to find the best models but didn't use it in my answer because it would take awhile to run.**","1efa299d":"All in all, the best model seems to be the Gradient Boosting Classifier with an 81% accuracy. Thank you for your time and have a great day!","e8314dc2":"No data seems to be duplicated either. I'm going to get rid of the customerID and Unnamed but I do want to see how correlated Unnamed is to Churn.","b6a040c3":"We can see an obvious correlation between StreamingTV and StreamingMovies, however it doesn't seem like a group is significantly more likely to renew their contract even if they stream TV and\/or Movies. ","595909da":"Lets move on to an SVM model","7cea9f27":"Random Forest is about as accurate as Logistic Regression but has the same problem of having a high amount of false positives.","7d11ce67":"I'm going to move on to tree based methods now. First lets start with Random Forest","e4652f7d":"It doesn't seem like any of the securities are correlated with each other meaning that having one type of security like OnlineSecurity has almost no effect on whether someone will have another type of security like DeviceProtection","74881358":"Lets do some Data Analysis to get a better understanding of the data and see if one feature is closely related to churn.\n\nI'm going to start by looking at if there is a relationship between gender and those who renew their telecom contract.","09ab1471":"Just something to point out, The 'TotalCharges' column is for some reason an object rather than an int and has 10 empty strings in it because tenure = 0 for those rows so make sure to get rid of empty strings and convert it to an int column before doing analysis","67172e2e":"Gradient Boosting seems to have done the best for now with an 81% accuracy. Its False Positive rate still seems to be a bit high but it's able to classify most data points correctly","2e32155a":"There seems to be no significant correlation between the security someone has and them renewing their contract with Telecom. Security is not that helpful of a predictor when analyzing the churn.","529d3440":"From this graph we can conclude that being a senior citizen has no significant impact on whether they have phone service or not","ab50df6b":"What's interesting to notice is that for two year and one year contracts, the median monthly payment can be fairly  high (about 100) before people start becoming less likely to renew their contract, however, the month to month charge does not need to be as high before people stop renewing their contracts. In fact the median total charges for people who did not renew their month to month contract is actually smaller than the median total charges for people who did renew their month to month contract.\n\nHowever, this still doesn't tell us why contract is such a good predictor of Churn. Lets do a correlation check with all the features and see which features are most related to 'Contract'.","b6b028fb":"Lastly lets try Neural Networks to see if we can get a better accuracy rate.","d56c9be5":"I'm going to start with Logistic Regression first","67befbc0":"Clearly this Unnamed: 0 column has no significant relation with Churn so we can just drop it along with CustomerID","5aa21f4b":"Does churn have a correlation with any of these security protections?"}}