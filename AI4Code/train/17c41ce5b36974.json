{"cell_type":{"973bca90":"code","ce419814":"code","f43e1e53":"code","e0afbd88":"code","45c91d0e":"code","499205fd":"code","a237528c":"code","d5505fb3":"code","38e14b5d":"code","15caec1d":"code","2368afe5":"code","1f6f6abe":"code","2ac6e718":"markdown","22b0e2b1":"markdown","61590b49":"markdown","62f847da":"markdown","7c52bb45":"markdown","ad4fa37a":"markdown","06bdcca6":"markdown","03f98ae4":"markdown","5c3f2c18":"markdown","77ec9c95":"markdown","129f0f19":"markdown"},"source":{"973bca90":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.rcParams[\"figure.figsize\"] = [10,8]","ce419814":"df=pd.read_csv('..\/input\/airbnb-dataset-for-internship-project-showcase\/newyork_airbnb.csv')","f43e1e53":"print(df.shape)","e0afbd88":"# features with missing values \nprint(df.isnull().sum()[df.isnull().sum() > 0])\n\nprint('----------------------------------------------------------------------------------')\n\n# features with no missing values\nprint(df.isnull().sum()[df.isnull().sum() == 0])","45c91d0e":"# We create an array with the features we want to keep.\nselected_features = ['name', 'neighbourhood_cleansed', 'room_type', 'guests_included', 'minimum_nights',\n                     'number_of_reviews', 'review_scores_rating', 'amenities', 'property_type',\n                     'accommodates', 'bathrooms', 'bedrooms', 'beds', 'bed_type', 'price']\nselected_df= df.copy()[selected_features]\nselected_df.rename(columns = {'neighbourhood_cleansed':'neighbourhood'}, inplace = True)\nselected_df[:2]","499205fd":"selected_df.isnull().sum()","a237528c":"selected_df.info()","d5505fb3":"# seeing some values in price first\nprint(selected_df['price'][:2])\nprint('\\n\\n\\n')\n# price values contain $ and , in it so we will replace them\n\nselected_df['price']=selected_df['price'].apply(lambda x: x.replace('$',''))\nselected_df['price']=selected_df['price'].apply(lambda x: float(x.replace(',','')))\n\n# seeing some statistics over price\nprint(selected_df['price'].describe())","38e14b5d":"# seeing distribution of price\nsns.swarmplot(y=selected_df['price'].sample(300))\nplt.show()","15caec1d":"# First, we get the median values of the price per neighbourhood and sort them descending \n# to use them as the graph index.\nprice_neighbourhood = selected_df.query('price <= 500')\\\n                    .groupby('neighbourhood')['price']\\\n                    .median()\\\n                    .sort_values(ascending=False)\\\n                    .index\n\n# Then we filter the data to use only the prices within a certain range to avoid outliers         \ndata = selected_df.query('price <= 500')\n\n# We use seaborn boxplot to generate the graph, passing as parameters the target variable and \n# the feature we want to associate, and an additonal parameter \"order\" to plot them in a descending\n# way.\nplt.figure(figsize=(15,10))\nsns.boxplot(y=data['price'], x=data['neighbourhood'], order=price_neighbourhood)\n\n# now will be giving title and get the plot axes and modify them to rotate the labels orientation\nplt.title('Price V\/S Neighbourhood',fontsize=12)\nax = plt.gca()\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right')\nplt.show()","2368afe5":"\n# First, we get the median values of the price per neighbourhood and sort them descending \n# to use them as the graph index.\nroom_price = selected_df.query('price <= 500')\\\n                    .groupby('room_type')['price']\\\n                    .median()\\\n                    .sort_values(ascending=False)\\\n                    .index\n                \n# Then we filter the data to use only the prices within a certain range to avoid outliers        \ndata = selected_df.query('price <= 500')\n\n# We use seaborn boxplot to generate the graph, passing as parameters the target variable and \n# the feature we want to associate, and an additonal parameter \"order\" to plot them descending.\nplt.figure(figsize=(15,10))\nsns.boxplot(y=data['price'], x=data['room_type'], order=room_price)\nplt.title('Price V\/S Room Type',fontsize=12)\nplt.show()","1f6f6abe":"# Then we filter the data to use only the prices within a certain range to avoid outliers        \ndata = selected_df.query('price <= 500')\n\n# We use seaborn boxplot to generate the graph, passing as parameters the target variable and \n# the feature we want to associate, and an additonal parameter \"order\" to plot them descending.\nplt.figure(figsize=(15,10))\nsns.boxplot(y=data['price'], x=data['bedrooms'])\nplt.title('Price V\/S Bedrooms',fontsize=12)\nplt.show()","2ac6e718":"# New-York Airbnb Dataset Exploration","22b0e2b1":"Firstly we will be looking at the data and try to gain some basic information about it.","61590b49":"Now same relationship ie. between price and no. of bedrooms","62f847da":"Above price is object but it should be float so we will be looking after it.","7c52bb45":"# Analysis Part-I\n\nIn this we are going to analyze the data set with respect to features for modelling.\nWe will start with importing all the necessary packages","ad4fa37a":"Above our columns are looking pretty good accept for review_scores_rating which have too much of Null values we will see how to manage null values through this.\n\nNow the next thing we are going to take a brief look over data types","06bdcca6":"# Feature Engineering \n\nNow we will be looking our data with the feeling to get some of the features for analysis and to look whether it will play a crucial role for our model or not.\nSo try to look at the features with less missing values and afterwards we will be going see how to take care of the missing values.","03f98ae4":"Now we will look the similar relation between price and room type so we can ensure the dependency of this feature to our model and naturally room type also a big factor in deciding the price of a property","5c3f2c18":"# Conclusion\n\nFrom the swarm plot, we can see that the prices are concentrated around the 0\\$ - 200\\$ dollars interval. \n\nThe beautiful boxplot between price and neighbourhood tells us which are the most affordable neighbourhoods and which are the most premium ones and also distribution is consistent so it could mean that this feature play some crucial rolew towards ouyr model.\n\nThe boxplot between room_type and price shows a very realisitic thing that the complete apartment or property will be expensive in compare to private and shared rooms also there is not much difference between the price for a private and a shared room so one can go for private room for most of the time.\n\nAnd last, from the bedrooms\/price box plot, the prices are split in a consistent way. That could be another interesting feature for the model because, for example, decision trees find the best feature splits to model the prices distribution according to the predictor features. This graph indicates that the price of the property increases as the number of bedrooms increases (A kind of obvious observation) but with some different behaviour around 7 to 10 bedrooms since there is probably a limited amount of listings with that number of bedrooms.\n","77ec9c95":"Now we will see what are the condition of our selected features in terms of missing values.","129f0f19":"# Exploration and Visualization\n\n\nNow we are going to explore and visualize some relations of prices with the predictors.\n\nfirstly we are going to see the relationship between price and neighbourhood because we can think of it in terms neighbourhood affects price in every aspect of a property."}}