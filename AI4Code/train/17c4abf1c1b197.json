{"cell_type":{"5711d62e":"code","c231b237":"code","89263e97":"code","f539e213":"code","820a6819":"code","19a84192":"code","2ac58c3d":"code","9f3723ee":"code","f123fe5f":"code","37e9451a":"code","20806407":"code","11d0a58a":"code","9cfc09b2":"code","96862d29":"code","f1441b94":"code","a0dc4b65":"markdown","2dd32410":"markdown","5c416b48":"markdown","10a9d8fc":"markdown","d803594d":"markdown"},"source":{"5711d62e":"import gc\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.metrics import mean_absolute_error\n\nimport tensorflow as tf\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.layers import BatchNormalization\nfrom tensorflow.keras.layers import Dense, Dropout, Input\nfrom tensorflow.keras.layers import Concatenate, LSTM, GRU\nfrom tensorflow.keras.layers import Bidirectional, Multiply","c231b237":"def auto_select_accelerator():\n    \"\"\"\n    Reference: \n        * https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n        * https:\/\/www.kaggle.com\/xhlulu\/ranzcr-efficientnet-tpu-training\n    \"\"\"\n    try:\n        tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n        tf.config.experimental_connect_to_cluster(tpu)\n        tf.tpu.experimental.initialize_tpu_system(tpu)\n        strategy = tf.distribute.experimental.TPUStrategy(tpu)\n        print(\"Running on TPU:\", tpu.master())\n    except ValueError:\n        strategy = tf.distribute.get_strategy()\n    print(f\"Running on {strategy.num_replicas_in_sync} replicas.\")\n    \n    return strategy\n\nstrategy = auto_select_accelerator()","89263e97":"DEBUG = False\nNB = 80\n\ndef read_data(debug=None, nrows=None):\n    if debug:\n        nrows = 2*1024*NB\n    \n    train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv', nrows=nrows)\n    test = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv', nrows=nrows)\n    submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv', nrows=nrows)\n    \n    print(f\"train: {train.shape}\")\n    print(f\"test: {test.shape}\")\n    return train, test, submission\n    \ntrain, test, submission = read_data(debug=DEBUG)","f539e213":"def add_features(df):\n    df['cross']= df['u_in'] * df['u_out']\n    df['cross2']= df['time_step'] * df['u_out']\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    df['time_step_cumsum'] = df.groupby(['breath_id'])['time_step'].cumsum()\n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    df['u_in2'] = df['u_in']**2.\n    df['u_in2_cumsum'] = (df['u_in2']).groupby(df['breath_id']).cumsum()\n    del df['u_in2']\n    print(\"Step-1...Completed\")\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    print(\"Step-2...Completed\")\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_in__mean'] = df.groupby(['breath_id'])['u_in'].transform('mean')\n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    print(\"Step-3...Completed\")\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    print(\"Step-4...Completed\")\n    \n    df['one'] = 1\n    df['count'] = (df['one']).groupby(df['breath_id']).cumsum()\n    df['u_in_cummean'] =df['u_in_cumsum'] \/df['count']\n    \n    df['breath_id_lag']=df['breath_id'].shift(1).fillna(0)\n    df['breath_id_lag2']=df['breath_id'].shift(2).fillna(0)\n    df['breath_id_lagsame']=np.select([df['breath_id_lag']==df['breath_id']],[1],0)\n    df['breath_id_lag2same']=np.select([df['breath_id_lag2']==df['breath_id']],[1],0)\n    df['breath_id__u_in_lag'] = df['u_in'].shift(1).fillna(0)\n    df['breath_id__u_in_lag'] = df['breath_id__u_in_lag'] * df['breath_id_lagsame']\n    df['breath_id__u_in_lag2'] = df['u_in'].shift(2).fillna(0)\n    df['breath_id__u_in_lag2'] = df['breath_id__u_in_lag2'] * df['breath_id_lag2same']\n    print(\"Step-5...Completed\")\n    \n    df['time_step_diff'] = df.groupby('breath_id')['time_step'].diff().fillna(0)\n    df['ewm_u_in_mean'] = (df\\\n                           .groupby('breath_id')['u_in']\\\n                           .ewm(halflife=9)\\\n                           .mean()\\\n                           .reset_index(level=0,drop=True))\n    df[[\"15_in_sum\",\"15_in_min\",\"15_in_max\",\"15_in_mean\"]] = (df\\\n                                                              .groupby('breath_id')['u_in']\\\n                                                              .rolling(window=15,min_periods=1)\\\n                                                              .agg({\"15_in_sum\":\"sum\",\n                                                                    \"15_in_min\":\"min\",\n                                                                    \"15_in_max\":\"max\",\n                                                                    \"15_in_mean\":\"mean\"})\\\n                                                               .reset_index(level=0,drop=True))\n    print(\"Step-6...Completed\")\n    \n    df['u_in_lagback_diff1'] = df['u_in'] - df['u_in_lag_back1']\n    df['u_out_lagback_diff1'] = df['u_out'] - df['u_out_lag_back1']\n    df['u_in_lagback_diff2'] = df['u_in'] - df['u_in_lag_back2']\n    df['u_out_lagback_diff2'] = df['u_out'] - df['u_out_lag_back2']\n    print(\"Step-7...Completed\")\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    print(\"Step-8...Completed\")\n    \n    return df\n\n\nprint(\"Train data...\\n\")\ntrain = add_features(train)\n\nprint(\"\\nTest data...\\n\")\ntest = add_features(test)","820a6819":"targets = train[['pressure']].to_numpy().reshape(-1, NB)\nu_outs = train[['u_out']].to_numpy().reshape(-1, NB)\n\ntrain.drop(['pressure','id', 'breath_id','one','count',\n            'breath_id_lag','breath_id_lag2','breath_id_lagsame',\n            'breath_id_lag2same'], axis=1, inplace=True)\n\ntest = test.drop(['id', 'breath_id','one','count','breath_id_lag',\n                  'breath_id_lag2','breath_id_lagsame',\n                  'breath_id_lag2same'], axis=1)\n\nprint(f\"train: {train.shape} \\ntest: {test.shape}\")","19a84192":"scaler = RobustScaler()\ntrain = scaler.fit_transform(train)\ntest = scaler.transform(test)\n\ntrain = train.reshape(-1, NB, train.shape[-1])\ntest = test.reshape(-1, NB, train.shape[-1])\n\nprint(f\"train: {train.shape} \\ntest: {test.shape} \\ntargets: {targets.shape}\")","2ac58c3d":"pressure = targets.squeeze().reshape(-1,1).astype('float32')\n\nP_MIN = np.min(pressure)\nP_MAX = np.max(pressure)\nP_STEP = (pressure[1] - pressure[0])[0]\nprint('Min pressure: {}'.format(P_MIN))\nprint('Max pressure: {}'.format(P_MAX))\nprint('Pressure step: {}'.format(P_STEP))\nprint('Unique values:  {}'.format(np.unique(pressure).shape[0]))\n\ndel pressure\ngc.collect()","9f3723ee":"def create_model():\n    x_input = Input(shape=(train.shape[-2:]))\n    \n    x1 = Bidirectional(LSTM(units=768, return_sequences=True))(x_input)\n    x2 = Bidirectional(LSTM(units=512, return_sequences=True))(x1)\n    x3 = Bidirectional(LSTM(units=384, return_sequences=True))(x2)\n    x4 = Bidirectional(LSTM(units=256, return_sequences=True))(x3)\n    x5 = Bidirectional(LSTM(units=128, return_sequences=True))(x4)\n    \n    z2 = Bidirectional(GRU(units=384, return_sequences=True))(x2)\n    \n    z31 = Multiply()([x3, z2])\n    z31 = BatchNormalization()(z31)\n    z3 = Bidirectional(GRU(units=256, return_sequences=True))(z31)\n    \n    z41 = Multiply()([x4, z3])\n    z41 = BatchNormalization()(z41)\n    z4 = Bidirectional(GRU(units=128, return_sequences=True))(z41)\n    \n    z51 = Multiply()([x5, z4])\n    z51 = BatchNormalization()(z51)\n    z5 = Bidirectional(GRU(units=64, return_sequences=True))(z51)\n    \n    x = Concatenate(axis=2)([x5, z2, z3, z4, z5])\n    \n    x = Dense(units=128, activation='selu')(x)\n    \n    x_output = Dense(units=1)(x)\n\n    model = Model(inputs=x_input, outputs=x_output, \n                  name='Model')\n    return model","f123fe5f":"model = create_model()\nmodel.summary()","37e9451a":"plot_model(\n    model, \n    to_file='Google_Brain_Keras_Model.png', \n    show_shapes=True,\n    show_layer_names=True\n)","20806407":"del model\ngc.collect()","11d0a58a":"def mae_inspphase(y_true, y_pred, cols=NB):\n    u_out = y_true[:, cols: ]\n    y = y_true[:, :cols ]\n    \n    w = 1 - u_out\n    mae = w * tf.abs(y - y_pred)\n    return tf.reduce_sum(mae, axis=1) \/ tf.reduce_sum(w, axis=1)\n\ndef mae_allphases(y_true, y_pred, cols=NB):\n    y = y_true[:, :cols ]\n    return tf.reduce_mean(tf.abs(y - y_pred), axis=-1)\n\n\ndef mae(ytrue, ypred, uout=None):\n    if isinstance(uout, pd.Series):\n        print('Only Inspiration Phases')\n        return np.mean(np.abs((ytrue - ypred)[uout == 0]))\n    else:\n        print('Inspiration and Expiration Phases')\n        return np.mean(np.abs((ytrue - ypred)))","9cfc09b2":"EPOCH = 200\nBATCH_SIZE = 512\nSEEDS = [27, 17, 2001, 2717]\n# SEEDS = [3, 11, 19, 59, 1000]\nVERBOSE = 1\n\ntest_preds = []\n\nfor seed in SEEDS:\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \n    with strategy.scope():\n        model = create_model()\n        model.compile(optimizer=tf.keras.optimizers.Adam(1e-3), loss=mae_allphases, metrics=[mae_inspphase])\n\n    lr = ReduceLROnPlateau(monitor=\"loss\", factor=0.5, \n                           patience=8, verbose=VERBOSE)\n    \n    es = EarlyStopping(monitor=\"mae_inspphase\", patience=20, \n                               verbose=VERBOSE, mode=\"min\", \n                               restore_best_weights=True)\n\n    chk_point = ModelCheckpoint(f'.\/Fold{seed}C.h5',\n                                monitor='loss', verbose=VERBOSE,\n                                save_best_only=True, mode='min')\n\n    model.fit(train, np.append(targets, u_outs, axis=1), \n              epochs=EPOCH,\n              verbose=VERBOSE,\n              batch_size=BATCH_SIZE, \n              callbacks=[lr, chk_point, es])\n\n    print('Predicting Test samples')\n    test_preds.append(model.predict(test, batch_size=BATCH_SIZE).squeeze().reshape(-1, 1).squeeze())\n\n    print(f\"Training {seed} done\")\n\n    del model\n    gc.collect()","96862d29":"#####@#d","f1441b94":"submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nsubmission[\"pressure\"] = sum(test_preds) \/ len(SEEDS)\nsubmission.to_csv('mean_submission.csv', index=False)\n\nsubmission[\"pressure\"] = np.median(np.vstack(test_preds), axis=0)\nsubmission[\"pressure\"] = np.round((submission.pressure - P_MIN)\/P_STEP) * P_STEP + P_MIN\nsubmission[\"pressure\"] = np.clip(submission.pressure, P_MIN, P_MAX)\nsubmission.to_csv('median_submission.csv', index=False)","a0dc4b65":"## Feature Engineering","2dd32410":"## Hardware Configuration","5c416b48":"## Load Datasets","10a9d8fc":"## Import libraries","d803594d":"## Keras DNN Model"}}