{"cell_type":{"0aac2e76":"code","299e6498":"code","b1c6b19d":"code","57c90077":"code","9e138178":"code","b61f8651":"code","66c048a7":"code","1f0d6fec":"code","3ce66cf0":"code","440302c1":"code","14cf5313":"code","6b5180ca":"code","e4a0a59d":"code","f89f2670":"code","8829d5ed":"code","72f15cf5":"code","fbc8a0a1":"code","8c1127c4":"code","97b9d00e":"code","3755c60c":"code","9fbff55a":"code","a3c7c38e":"code","201d110e":"code","1173ff5d":"markdown","9618fe83":"markdown","fa1c80a6":"markdown","731b1a75":"markdown","978c36b4":"markdown","3f6d4865":"markdown","e4e5f831":"markdown","0874ec3c":"markdown","d75fe3d2":"markdown","2e0c37d0":"markdown","334c3f06":"markdown"},"source":{"0aac2e76":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\npd.set_option('display.max_rows', None)\nimport datetime\nfrom plotly.subplots import make_subplots\nfrom scipy.optimize import curve_fit\nimport pylab\nfrom datetime import timedelta\nimport warnings\nwarnings.filterwarnings(\"ignore\")","299e6498":"## https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv\n# read data\nlatest = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/state_wise.csv')\n# save as a .csv file`\nlatest.to_csv('state_level_latest.csv', index=False)","b1c6b19d":"# read data\nstate_wise_daily = pd.read_csv('https:\/\/api.covid19india.org\/csv\/latest\/state_wise_daily.csv')\n# melt dataframe\nstate_wise_daily = state_wise_daily.melt(id_vars=['Date', 'Status'], \n                                         value_vars=state_wise_daily.columns[2:], \n                                         var_name='State', value_name='Count')\n# pivot table\nstate_wise_daily = state_wise_daily.pivot_table(index=['Date', 'State'], \n                                                columns=['Status'], \n                                                values='Count').reset_index()\n# map state names to state codes\nstate_codes = {code:state for code, state in zip(latest['State_code'], latest['State'])}\nstate_codes['DD'] = 'Daman and Diu'\nstate_wise_daily['State_Name'] = state_wise_daily['State'].map(state_codes)\nstate_wise_daily=state_wise_daily[state_wise_daily.State_Name!=\"Total\"]\nstate_wise_daily['Date'] = pd.to_datetime(state_wise_daily['Date'], dayfirst=True)\nstate_wise_daily.sort_values('Date', ascending=True,inplace=True)","57c90077":"state_wise=state_wise_daily.groupby(\"State_Name\").sum().reset_index()","9e138178":"state_wise[\"Mortality Rate Per 100\"] =np.round(100*state_wise[\"Deceased\"]\/state_wise[\"Confirmed\"],2)\nstate_wise['Mortality Rate Per 100'] = state_wise['Mortality Rate Per 100'].fillna(0)","b61f8651":"state_wise.sort_values(by='Mortality Rate Per 100',ascending=False).style.background_gradient(cmap='Blues',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deceased\"])\\\n                        .background_gradient(cmap='YlOrBr',subset=[\"Mortality Rate Per 100\"]).hide_index()","66c048a7":"def stanalysis(statename,typ):\n    definestate=state_wise_daily[state_wise_daily.State_Name==statename]\n    finalstate= definestate.groupby([\"Date\",\"State_Name\"])[[\"Confirmed\",\"Deceased\",\"Recovered\"]].sum().reset_index().reset_index(drop=True)\n    createfigure(finalstate,typ,statename)\n    \ndef createfigure(dataframe,typ,statename):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=dataframe[\"Date\"], y=dataframe[\"Confirmed\"],\n                    mode=\"lines+text\",\n                    name='Confirmed',\n                    marker_color='orange',\n                        ))\n    \n    fig.add_trace(go.Scatter(x=dataframe[\"Date\"], y=dataframe[\"Recovered\"],\n                    mode=\"lines+text\",\n                    name='Recovered',\n                    marker_color='Green',\n                        ))\n    fig.add_trace(go.Scatter(x=dataframe[\"Date\"], y=dataframe[\"Deceased\"],\n                    mode=\"lines+text\",\n                    name='Deceased',\n                    marker_color='Red',\n                        ))\n      \n    fig.add_shape(\n        # Line Vertical\n        dict(\n            type=\"line\",\n            x0=\"2020-03-24\",\n            y0=dataframe[typ].max(),\n            x1=\"2020-03-24\",\n    \n            line=dict(\n                color=\"red\",\n                width=5)))\n    fig.add_annotation(\n            x=\"2020-03-24\",\n            y=dataframe[typ].max(),\n            text=\"Lockdown Period\",\n             font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"red\"\n            ),)\n    fig.add_annotation(\n            x=\"2020-04-24\",\n            y=dataframe[typ].max(),\n            text=\"Month after lockdown\",\n             font=dict(\n            family=\"Courier New, monospace\",\n            size=14,\n            color=\"Green\"\n            ),)\n    fig.add_shape(\n        # Line Vertical\n        dict(\n            type=\"line\",\n            x0=\"2020-04-24\",\n            y0=dataframe[typ].max(),\n            x1=\"2020-04-24\",\n    \n            line=dict(\n                color=\"Green\",\n                width=5)))\n    fig\n    fig.update_layout(\n    title='Evolution of Confirmed-Recovered-Deceased cases over time in '+statename,\n        template='gridon')\n    fig.show()\n    \n    ","1f0d6fec":"stanalysis(\"Delhi\",'Recovered')","3ce66cf0":"stanalysis(\"Maharashtra\",'Recovered')","440302c1":"stanalysis(\"Madhya Pradesh\",'Recovered')","14cf5313":"stanalysis(\"West Bengal\",'Recovered')","6b5180ca":"# #Run this code for all states visualisation\nfor states in state_wise_daily.State_Name.unique().tolist():\n    if(states!='Daman and Diu'):\n        stanalysis(states,'Recovered')","e4a0a59d":"population=state_wise_daily.groupby([\"Date\"])[[\"Confirmed\",\"Deceased\",\"Recovered\"]].sum().reset_index()\npopulation[\"day_count\"]=list(range(1,len(population)+1))\nfig = px.bar(population, x='day_count', y='Confirmed',text='Confirmed')\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(\nxaxis_title=\"Day\",\nyaxis_title=\"Population Effected\",\ntitle='Evaluation of Confirmed Cases In India',template='gridon')\nfig.show()","f89f2670":"def sigmoid(x,c,a,b):\n    y = c*1 \/ (1 + np.exp(-a*(x-b)))\n    return y\nindiapopulation=1380004385","8829d5ed":"fmodel=population[population.Confirmed>=50]\nfmodel['day_count']=list(range(1,len(fmodel)+1))\nfmodel['increase'] = (fmodel.Confirmed-fmodel.Confirmed.shift(1)).fillna(0).astype(int)\nfmodel['increaserate']=(fmodel['increase']\/fmodel[\"Confirmed\"])\nfmodel['Active']=fmodel['Confirmed']-fmodel['Deceased']-fmodel['Recovered']","72f15cf5":"xdata = np.array(list(abs(fmodel.day_count)))\nydata = np.array(list(abs(fmodel.Active)))\ncof,cov = curve_fit(sigmoid, xdata, ydata, method='trf',bounds=([0.,0., 0.],[indiapopulation,1, 100.]))\n#\u2018trf\u2019 : Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds. Generally robust method.","fbc8a0a1":"x = np.linspace(-1, fmodel.day_count.max()+20, 20)\ny = sigmoid(x,cof[0],cof[1],cof[2])","8c1127c4":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=y,\n                    mode=\"lines+text\",\n                    name='Active Cases Approx',\n                    marker_color='orange',\n                        ))\n    \nfig.add_trace(go.Scatter(x=xdata, y=ydata,\n                    mode=\"markers\",\n                    name='Active Cases',\n                    marker_color='Green',\n                    marker_line_width=2, marker_size=10\n                        ))\nfig\nfig.update_layout(\ntitle='Daily Active Cases in India is approx '+ str(int(cof[0])) +', Active cases curve started flatten from day ' + str(int(cof[2])) +\" and will flatten by day \"+str(round(int(cof[2])*2.5)),\n        template='gridon', font=dict(\n        family=\"Courier New, monospace\",\n        size=10,\n        color=\"blue\"\n    ))\nfig.show()","97b9d00e":"round(fmodel.Active.sum()+((fmodel.day_count.max()+40-fmodel.day_count.max())*y[11:20].mean()))","3755c60c":"xdata = np.array(list(abs(fmodel.day_count)))\nydata = np.array(list(abs(fmodel.Confirmed)))\ncof,cov = curve_fit(sigmoid, xdata, ydata, method='trf',bounds=([0.,0., 0.],[indiapopulation,1, 100.]))\n#\u2018trf\u2019 : Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds. Generally robust method.","9fbff55a":"x = np.linspace(-1, fmodel.day_count.max()+40, 40)\ny = sigmoid(x,cof[0],cof[1],cof[2])","a3c7c38e":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=y,\n                    mode=\"lines+text\",\n                    name='Confirmed Cases Approx',\n                    marker_color='Orange',\n                        ))\n    \nfig.add_trace(go.Scatter(x=xdata, y=ydata,\n                    mode=\"markers\",\n                    name='Confirm Cases',\n                    marker_color='Red',\n                    marker_line_width=2, marker_size=10\n                        ))\nfig\nfig.update_layout(\ntitle='Daily Confirmed Cases in India is approx '+ str(int(cof[0])) +', Confirm case curve started flatten from day ' + str(int(cof[2])) +\" and will flatten by day \"+str(round(int(cof[2])*2)),\n        template='gridon',\n font=dict(\n        family=\"Courier New, monospace\",\n        size=7,\n        color=\"blue\"\n    ))\nfig.show()","201d110e":"round(fmodel.Confirmed.sum()+((fmodel.day_count.max()+40-fmodel.day_count.max())*y[15:40].mean()))","1173ff5d":"# India Covid 19 Analysis, Visualization and Forcasting\n\n![](https:\/\/www.fda.gov\/files\/styles\/featured_content_background_image\/public\/covid19-1600x900.jpg?itok=ZvOhgrde)\n\nsource: https:\/\/www.fda.gov\/food\/food-safety-during-emergencies\/food-safety-and-coronavirus-disease-2019-covid-19","9618fe83":"# Table of Contents\n* State Wise Mortality Rate in India\n* State wise analysis Before and after Lockdown\n* Population infected\n* Active Case Forecasting\n* Confirmed Case Forecasting","fa1c80a6":"# Active Cases Forecasting\n\n","731b1a75":"On 31 July 2020 , India have approx  1298440 confirmed cases of Covid-19","978c36b4":"                                                 State Wise Mortality Rate","3f6d4865":"# Population infected due to COVID-19 in India Daily Trend","e4e5f831":"# Confirmed Cases Forecasting\n","0874ec3c":"# Active Cases Forcasting\n\nFrom small beginnings that accelerates and approaches a climax over time, When a specific mathematical model is lacking, a sigmoid function is often used. So in our scenario i tried to use Sigmoid function \n1. c - Maximum value (Maximum Infected people from Virus)\n1. a - Sigmoidal shape (how the infection progress)\n1. b - Point where sigmoid start to flatten ","d75fe3d2":"State Wise Mortality Rate in India ","2e0c37d0":"COVID-19 India State wise analysis Before and after Lockdown","334c3f06":"On 31 July 2020 , India have approx  410717 Active cases of Covid-19"}}