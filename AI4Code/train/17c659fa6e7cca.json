{"cell_type":{"58c4908e":"code","1d6258c4":"code","67344f86":"code","388b4494":"code","411d1858":"code","0684bc02":"code","c136f185":"code","4a6cd262":"code","7d689a1f":"code","a54fc2ab":"code","42723069":"code","a0ca9442":"code","55e30d64":"code","903c4256":"code","d9617051":"code","dad532cc":"code","1ce09a64":"code","453e1d28":"code","3dbc2695":"code","2a16fbae":"code","db2393cc":"code","74fd2c1d":"code","71c47a1c":"code","f2466f23":"markdown","8300a08f":"markdown","6e75daf0":"markdown","03866a70":"markdown","7a48dfb2":"markdown","b9377049":"markdown","1984e65a":"markdown"},"source":{"58c4908e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1d6258c4":"# load data\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\", index_col = 'PassengerId')\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\nindex = test_df['PassengerId']     # for submission","67344f86":"train_df.describe()","388b4494":"test_df.describe()","411d1858":"train_df.head()","0684bc02":"test_df.Fare.fillna(train_df.Fare.mean(), inplace=True)","c136f185":"train_df['Age'].fillna(value = train_df['Age'].mean(), inplace = True)\ntest_df['Age'].fillna(value = test_df['Age'].mean(), inplace = True)","4a6cd262":"train_df.Embarked.fillna(train_df.Embarked.mode()[0], inplace=True)","7d689a1f":"embarked_dummies = pd.get_dummies(train_df['Embarked'], prefix='Embarked')\ntrain_df = pd.concat([train_df, embarked_dummies], axis=1)\ntrain_df.drop('Embarked', axis=1, inplace=True)\n# for test\nembarked_dummies = pd.get_dummies(test_df['Embarked'], prefix='Embarked')\ntest_df = pd.concat([test_df, embarked_dummies], axis=1)\ntest_df.drop('Embarked', axis=1, inplace=True)","a54fc2ab":"train_df.drop(columns = ['Ticket','Cabin'], inplace=True)\ntest_df.drop(columns = ['Ticket','Cabin'], inplace=True)","42723069":"train_df['Sex'] = train_df['Sex'].map({'male':1, 'female':0})\ntest_df['Sex'] = test_df['Sex'].map({'male':1, 'female':0})","a0ca9442":"pclass_dummies = pd.get_dummies(train_df['Pclass'], prefix=\"Pclass\")\ntrain_df = pd.concat([train_df, pclass_dummies],axis=1)\ntrain_df.drop('Pclass',axis=1,inplace=True)\n# for test\npclass_dummies = pd.get_dummies(test_df['Pclass'], prefix=\"Pclass\")\ntest_df = pd.concat([test_df, pclass_dummies],axis=1)\ntest_df.drop('Pclass',axis=1,inplace=True)","55e30d64":"train_df['FamilySize'] = train_df['Parch'] + train_df['SibSp'] + 1\ntrain_df['Singleton'] = train_df['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntrain_df['SmallFamily'] = train_df['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\ntrain_df['LargeFamily'] = train_df['FamilySize'].map(lambda s: 1 if 5 <= s else 0)\n# for test\ntest_df['FamilySize'] = test_df['Parch'] + test_df['SibSp'] + 1\ntest_df['Singleton'] = test_df['FamilySize'].map(lambda s: 1 if s == 1 else 0)\ntest_df['SmallFamily'] = test_df['FamilySize'].map(lambda s: 1 if 2 <= s <= 4 else 0)\ntest_df['LargeFamily'] = test_df['FamilySize'].map(lambda s: 1 if 5 <= s else 0)","903c4256":"import numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split","d9617051":"train_df.drop(columns = ['Name'], inplace=True)\ntest_df.drop(columns = ['Name'], inplace=True)","dad532cc":"y = train_df['Survived']\nx = train_df.drop(['Survived'], axis = 1)","1ce09a64":"# splitting\nx_train, x_test, y_train, y_test = train_test_split(x,y , test_size=0.2, random_state=0)","453e1d28":"final_model = RandomForestClassifier(n_estimators=100, max_leaf_nodes=105, max_depth = 6, random_state= 0)\nfinal_model.fit(x_train, y_train)","3dbc2695":"train_df.columns","2a16fbae":"del test_df['PassengerId']","db2393cc":"test_df.columns","74fd2c1d":"predictions = final_model.predict(test_df)","71c47a1c":"sub_df = pd.DataFrame(data={\n    'PassengerId': index,\n    'Survived': predictions\n})\nsub_df.to_csv('submission.csv', index=False)","f2466f23":"# Building Model","8300a08f":"**Pclass**","6e75daf0":"# Feature Enineering","03866a70":"Feature selection","7a48dfb2":"Feature selection by using random forest","b9377049":"**Sex**","1984e65a":"**Feature extraction -- Family**"}}