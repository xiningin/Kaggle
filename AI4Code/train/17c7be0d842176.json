{"cell_type":{"347d31bb":"code","d7dece41":"code","a21d5808":"code","e4257d55":"code","f9277455":"code","1a7fe650":"code","5eec0fe5":"code","d4b58143":"code","1f25ce5b":"code","ef99d7df":"code","64e641b6":"code","2bff6121":"code","af91336b":"code","b225898d":"code","1236cc7e":"code","875534f2":"code","dbd25e82":"code","81ee173a":"code","0c8a7fdb":"code","f808febd":"code","80e2e50f":"code","4d406bca":"code","6557cfcd":"code","a46c15f3":"code","c52b6c7f":"code","1b59f37f":"code","b7fdf7a6":"code","e6e4d399":"code","d24e5b3f":"code","aa723701":"markdown","5d3da2e1":"markdown","990f28ad":"markdown","d97e8670":"markdown","41363edc":"markdown","26460bff":"markdown"},"source":{"347d31bb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom nltk.corpus import stopwords\n\nfrom textblob import Word\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score","d7dece41":"train = pd.read_csv('..\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Train.csv')\ntest = pd.read_csv('..\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Test.csv')\nvalid = pd.read_csv('..\/input\/imdb-dataset-sentiment-analysis-in-csv-format\/Valid.csv')","a21d5808":"print(train.shape, test.shape, valid.shape)","e4257d55":"train=pd.concat([train, valid], axis=0, ignore_index=True)","f9277455":"data=pd.concat([train, test], keys=['train', 'test'], axis=0)","1a7fe650":"print(data.shape)","5eec0fe5":"data.head(10)","d4b58143":"data.label.value_counts()","1f25ce5b":"df=data.copy()","ef99d7df":"def clean_data(df):\n    # Lower all characters\n    df.text=df.text.apply(lambda sen: ' '.join(word.lower() for word in sen.split()))\n    # Remove symbols\n    df.text=df.text.apply(lambda sen: ''.join([word for word in sen if word.isalnum() or word==' ']))\n    # Remove digits\n    df.text=df.text.str.replace('\\d', '')\n    # Remove stop words\n    sw=stopwords.words('english')\n    df.text=df.text.apply(lambda sen: ' '.join([word for word in sen.split() if word not in sw]))\n    return df","64e641b6":"df=clean_data(df)","2bff6121":"# Low frequently used words\nall_words=pd.Series((' '.join(df.text.values)).split()).value_counts().tail(5000)","af91336b":"# Remove them\ndf.text=df.text.apply(lambda sen: ' '.join(word for word in sen.split() if word not in all_words))","b225898d":"# Lemmatize words\ndf.text=df.text.apply(lambda sen: ' '.join([Word(word).lemmatize() for word in sen.split()]))","1236cc7e":"df.head(10)","875534f2":"data=df.copy()\ndf","dbd25e82":"df.reset_index()","81ee173a":"X=df[['text']]\nY=df[['label']]","0c8a7fdb":"vectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X.text)","f808febd":"X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, random_state=12)","80e2e50f":"print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)","4d406bca":"stats = {}","6557cfcd":"rf=RandomForestClassifier().fit(X_train, Y_train)\nY_pred=rf.predict(X_test)\nacc_rf=round(accuracy_score(Y_pred, Y_test)*100, 2)\nstats['Random Forest']=acc_rf\nprint(f'Accuracy score: {acc_rf}%')","a46c15f3":"lg=LogisticRegression(solver='liblinear').fit(X_train, Y_train)\nY_pred=lg.predict(X_test)\nacc_lg=round(accuracy_score(Y_pred, Y_test)*100, 2)\nstats['Logistic Regression']=acc_lg\nprint(f'Accuracy score: {acc_lg}%')","c52b6c7f":"svc=LinearSVC().fit(X_train, Y_train)\nY_pred=svc.predict(X_test)\nacc_svc=round(accuracy_score(Y_pred, Y_test)*100, 2)\nstats['LinearSVC']=acc_svc\nprint(f'Accuracy score: {acc_svc}%')","1b59f37f":"knn=KNeighborsClassifier().fit(X_train, Y_train)\nY_pred=knn.predict(X_test)\nacc_knn=round(accuracy_score(Y_pred, Y_test)*100, 2)\nstats['KNeighbors']=acc_knn\nprint(f'Accuracy score: {acc_knn}%')","b7fdf7a6":"stats","e6e4d399":"results=pd.Series(stats)\nresults","d24e5b3f":"sns.barplot(results.index, results.values)\nplt.xticks(rotation=20)\nplt.show()","aa723701":"## RanfomForest Classifier","5d3da2e1":"## Preprocessing","990f28ad":"## LinearSVC","d97e8670":"## Import libraries","41363edc":"## KNeighbors Classifier","26460bff":"## Logistic Regression"}}