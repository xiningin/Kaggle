{"cell_type":{"172fe221":"code","40156cc1":"code","e099caa4":"code","14922d3d":"code","595ce041":"code","76458038":"code","a7ccc0c4":"code","45bad63e":"code","e0ec045a":"code","b949951c":"code","831651ac":"code","c71fa4dc":"code","ca728e38":"code","a4e84fc3":"code","896ef0f5":"code","7ff4c043":"code","13241e3e":"code","a2d133bb":"code","8e7269a8":"code","5644c6a2":"code","a18a8953":"code","00c0106b":"code","046d6f9d":"code","e17614ec":"code","64985dc5":"code","25e6c62a":"code","33b85ceb":"code","119065a3":"code","dfa71db7":"code","473bffcc":"code","f86f265b":"code","ba6e072c":"code","0afd4cb8":"code","ec4c00c9":"code","380d58c8":"code","300a26be":"code","dcad5a68":"code","0018a5df":"code","26d421cf":"code","83eae075":"markdown","ebbe5af7":"markdown","2aa2e388":"markdown"},"source":{"172fe221":"#\u3084\u3063\u3071\u308a\u8003\u3048\u65b9\u304c\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5168\u304f\u8a55\u4fa1\u3067\u304d\u306a\u304b\u3063\u305f\u2026\n\n#\u3057\u305f\u3053\u3068\n#\u90aa\u9053\u3060\u304c\u3001test\u3067\u30af\u30e9\u30b9\u30bf\u5206\u3051(12)\u3059\u308b\uff08\u4e00\u65e6\u3001\u6d45\u5b66\u306e\u70ba\u5206\u3051\u3066\u307f\u308b\uff09\n#\u305d\u308c\u306b\u5bfe\u3057\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u540d\u3092\u4ed8\u3051\u308b\n#\u63d0\u51fa\u3059\u308b\n\n#\u672c\u5f53\u306b\u3057\u305f\u3044\u3053\u3068\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6563\u5e03\u56f3\uff1f\u306e\u96c6\u5408\u4f53\u540c\u58eb\u3092\u6bd4\u8f03\u3057\u3001\n#\u8fd1\u4f3c\u5024\uff1f\u306a\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u304c\u305d\u308c\u3067\u30af\u30e9\u30b9\u5206\u3051\u3092\u3057\u305f\u304b\u3063\u305f\u2026\n#\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u306f\u307f\u51fa\u3057\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u4f53\u304cunseen label\u3068\u3057\u305f\u304b\u3063\u305f\u2026\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u542b\u3081\u3066\u307f\u308b\u3068\u304b\u2026\u3002\n\n#\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u8907\u6570\u306e\u30e2\u30c7\u30eb\u5b66\u7fd2\u3092\u3057\u3066\u4e00\u756a\u826f\u3044\u90e8\u5206\u3092\u53d6\u308a\u5165\u308c\u308b\u3068\u304b\n#\u8003\u3048\u307e\u3057\u305f\u3051\u3069\u307e\u3060\u57fa\u790e\u304c\u51fa\u6765\u3066\u3044\u306a\u3044\u306e\u3067\u624b\u51fa\u3057\u306f\u53b3\u3057\u3044\u304b\u2026\uff1f\n\n\n","40156cc1":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\nimport numpy as np\nimport pandas as pd\nfrom pandas import DataFrame\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\nfrom lightgbm import LGBMClassifier","e099caa4":"# \u4e00\u89a7\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\ndf_train = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/train.csv')\ndf_test = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/test.csv')\ndf_action = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/actions.csv')","14922d3d":"# \u3055\u3066\u3001\u7279\u5fb4\u91cf\u306e\u62bd\u51fa\u65b9\u6cd5\u3082\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3082\u69d8\u3005\u8003\u3048\u3089\u308c\u3001\u305d\u308c\u3089\u306f\u30b3\u30f3\u30da\u671f\u9593\u4e2d\u306b\u6bb5\u968e\u3092\u8ffd\u3063\u3066\u5c55\u958b\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n# \u307e\u305a\u306f\u5404\u30c1\u30e3\u30cd\u30eb\u306e\u5e73\u5747\u5024\u3092\u7279\u5fb4\u91cf\u3068\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\ndef add_mean_as_feature(df):\n    df_temp = DataFrame()\n    for path in df.file_path:\n        df_sensor = pd.read_csv('..\/input\/data-science-spring-osaka-2021'+path)\n        df_sensor = DataFrame(df_sensor.mean()).T # \u5e73\u5747\u5024\u3092\u96c6\u8a08\n        df_temp = pd.concat([df_temp, df_sensor])\n    df_temp.columns = [col+'_mean' for col in df_temp.columns] # \u30ab\u30e9\u30e0\u540d\u306b\u5e73\u5747\u3092\u3068\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u672b\u5c3e\u306b'_mean'\u3092\u4ed8\u8a18\n    df_temp.index = df.index\n    df = pd.concat([df, df_temp], axis=1)\n    return df","595ce041":"# \u4e0a\u8a18\u51e6\u7406\u3092\u9069\u7528\u3057\u307e\u3059\ndf_train = add_mean_as_feature(df_train)\ndf_test = add_mean_as_feature(df_test)","76458038":"# \u7279\u5fb4\u91cf\uff08=\u8aac\u660e\u5909\u6570\uff09\u3068\u30bf\u30fc\u30b2\u30c3\u30c8\uff08\u88ab\u8aac\u660e\u5909\u6570\uff09\u306b\u5206\u5272\u3057\u3066\u304a\u304d\u307e\u3059\ny_train = df_train.action_seq #\u8a13\u7df4\u30c7\u30fc\u30bf\u304b\u3089\u30a2\u30af\u30b7\u30e7\u30f3\u3060\u3051\u53d6\u308a\u51fa\u3059\nX_train = df_train.drop(['file_path', 'action_seq'], axis=1) #\u6587\u5b57\u30c7\u30fc\u30bf\u9664\u5916\nX_test = df_test.drop(['file_path'], axis=1) #\u6587\u5b57\u30c7\u30fc\u30bf\u9664\u5916","a7ccc0c4":"X_test.head(1)","45bad63e":"y_train.head(1)","e0ec045a":"X_train.head(1)","b949951c":"df_test['file_path']","831651ac":"# \u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u304a\u304d\u307e\u3059\nle = LabelEncoder()\ny_train = le.fit_transform(y_train)\ny_train #\u6587\u5b57\u5217\u304b\u3089\u6570\u5024(\u30b7\u30ea\u30fc\u30ba)","c71fa4dc":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\nX_train_, X_val, y_train_, y_val = train_test_split(X_train, y_train, test_size=0.33, random_state=71, stratify=y_train)","ca728e38":"# \u624b\u5143\u306e\u30c7\u30fc\u30bf\u3067\u7cbe\u5ea6\u3092\u898b\u7a4d\u3082\u308a\u307e\u3059\u3002\u6b63\u89e3\u738795%\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u306d\uff01\n# \u5e73\u5747\u5024\u3060\u3051\u3067\u3053\u306e\u7cbe\u5ea6\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u306f\u697d\u52dd\u3067\u3057\u3087\u3046\u304b\u3002\nmodel = LGBMClassifier(learning_rate=0.05, n_estimators=500)\nmodel.fit(X_train_, y_train_, eval_set=[(X_val, y_val)], eval_metric='logloss', early_stopping_rounds=50)\n\ny_pred = model.predict(X_val)\nprint(accuracy_score(y_val, y_pred))","a4e84fc3":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3066\u63d0\u51fa\u7528\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\nbest_iter = model.best_iteration_\nmodel = LGBMClassifier(learning_rate=0.05, n_estimators=best_iter)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","896ef0f5":"df_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/sample_submission.csv')","7ff4c043":"df_sub['action_seq'] = le.inverse_transform(y_pred)\ndf_sub","13241e3e":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_sub.to_csv('submission.csv', index=False)","a2d133bb":"# \u3042\u308c\u308c\u3001\u63d0\u51fa\u3057\u305f\u3068\u3053\u308d\u624b\u5143\u306e\u8a55\u4fa1\u7d50\u679c\u3068\u306e\u4e56\u96e2\u304c\u5927\u304d\u3044\u3088\u3046\u3067\u3059\u3002\u4f55\u304c\u884c\u3051\u306a\u304b\u3063\u305f\u306e\u3067\u3057\u3087\u3046\u304b\uff1f","8e7269a8":"# \u542b\u307e\u308c\u308b\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u306e\u4e00\u89a7\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\ndf_action = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/actions.csv')","5644c6a2":"# 12\u7a2e\u985e\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059\ndf_action.action_seq.value_counts()","a18a8953":"# \u306a\u3093\u3068\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u306f1\u7a2e\u985e\u8db3\u308a\u306a\u3044\u30af\u30e9\u30b9\u304c\u3042\u308b\u3088\u3046\u3067\u3059\uff01\u898b\u6bd4\u3079\u3066\u307f\u308b\u3068\"jab-jab-bodyhook\"\u304c\u8db3\u308a\u306a\u3044\u3088\u3046\u3067\u3059\u306d\u3002\n# \u3053\u306e\u3088\u3046\u306b\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u306a\u3044\u30e9\u30d9\u30eb\u3092unseen label\u3068\u8a00\u3044\u307e\u3059\u304c\u3001\u65e2\u77e5\u306e\u30e9\u30d9\u30eb\uff08seen label\uff09\u306e\u7cbe\u5ea6\u3092\u3088\u308a\u9ad8\u3081\u308b\u3068\u540c\u6642\u306b\u3053\u3061\u3089\u306e\u5bfe\u51e6\u3082\u5fc5\u8981\u305d\u3046\u3067\u3059\u306d\u3002\n# \u3053\u308c\u3089\u306f\u9806\u3092\u8ffd\u3063\u3066\u53d6\u308a\u7d44\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\ndf_train.action_seq.value_counts()","00c0106b":"#KMeans\u6cd5\u3092\u3057\u3066\u307f\u308b\n#\u305d\u306e\u305f\u3081\u306b\u6a19\u6e96\u5316\u306e\u5b9f\u65bd\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3092\u3055\u305b\u308b\u3002\uff08\u90aa\u9053\uff1f\uff09\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nimport seaborn as sns\n\n#sc = StandardScaler()\n#sc_df = sc.fit_transform(X_test)\n#sc_df = pd.DataFrame(sc_df, columns = X_test.columns)\ntest_kmeans = X_test","046d6f9d":"#sns.distplot(sc_df['Time_mean'])\ncust_array = np.array(test_kmeans, np.int32)","e17614ec":"#cust_array = cust_array.T\ncust_array","64985dc5":"pred_test = KMeans(n_clusters = 12, random_state = 0).fit_predict(cust_array)\n#model_test.fit(sc_df)","25e6c62a":"pred_test","33b85ceb":"pred_test = le.fit_transform(pred_test)\npred_test #\u6587\u5b57\u5217\u304b\u3089\u6570\u5024(\u30b7\u30ea\u30fc\u30ba)","119065a3":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u3092\u691c\u5b9a\uff08\u7cbe\u5ea6\u8a55\u4fa1\uff09\u7528\u306b\u5207\u308a\u51fa\u3057\u307e\u3059\n#X_test_, X_test_val, y_test_, y_test_val = train_test_split(test_kmeans, pred_test, test_size=0.33, random_state=72, stratify=pred_test)","dfa71db7":"y_pred2 = model.predict(X_test)\nprint(accuracy_score(pred_test, y_pred2))","473bffcc":"#best_iter = model.best_iteration_\n#model = LGBMClassifier(learning_rate=0.05, n_estimators=best_iter)\n#pred_test2 = KMeans(n_clusters = 12, random_state = 0).fit_predict(X_test_)\n#pred_test2.fit(test_kmeans, pred_test)\n#y_pred = pred_test2.predict(test_kmeans)","f86f265b":"# Pandas \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u30af\u30e9\u30b9\u30bf\u756a\u53f7\u3092\u8ffd\u52a0\ntest_kmeans['action_seq'] = pred_test\ntest_kmeans","ba6e072c":"df_sub_kmeans = test_kmeans[[\"action_seq\"]]\ndf_sub_kmeans","0afd4cb8":"df_test_sub = pd.read_csv('..\/input\/data-science-spring-osaka-2021\/test.csv')\ndf_test_sub","ec4c00c9":"df_concat = pd.concat([df_test_sub, df_sub_kmeans], axis = 1)\ndf_concat","380d58c8":"# \u51fa\u529b\u3057\u3066\u63d0\u51fa\u3057\u307e\u3059\ndf_concat.to_csv('submission_test.csv', index=False)","300a26be":"replaced_df=df_sub_kmeans.replace({0:'jab-straight-hook-upper',1:'jab-straight-jab-straight',2:'jab-hook-upper',3:'jab-jab-hook',4:'jab-jab-straight',5:'jab-sway-jab',6:'jab-jab-bodyhook',7:'jab-sway-jab-straight',8:'jab-straight-hook-sway',9:'jab-straight-jab',10:'jab-jab-bodyupper',11:'jab-jab-upper'})\nprint(replaced_df)","dcad5a68":"replaced_df['action_seq'].value_counts()","0018a5df":"#test_mean[test_mean['action_seq']==0].mean() # \u30af\u30e9\u30b9\u30bf\u756a\u53f7 = 0","26d421cf":"#\u7a4d\u307f\u4e0a\u3052\u68d2\u30b0\u30e9\u30d5\n#clusterinfo = pd.DataFrame()\n#for i in range(12):\n#    clusterinfo['cluster' + str(i)] = test_mean[test_mean['action_seq'] == i].mean()\n#clusterinfo = clusterinfo.drop('action_seq')\n \n#my_plot = clusterinfo.T.plot(kind='bar', stacked=True, title=\"Mean Value of 12 Clusters\")\n#my_plot.set_xticklabels(my_plot.xaxis.get_majorticklabels(), rotation=0)","83eae075":"**########################   \u3053\u308c\u4ee5\u964d\u3092\u8ffd\u52a0\u3000\u3000###################################**","ebbe5af7":"**########\u3053\u3053\u304b\u3089\u3000\u5c71\u672c\u3055\u3093\u306e\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306a\u306e\u3067\u7279\u5225\u306a\u306b\u3082\u3057\u3066\u3044\u306a\u3044#######################**","2aa2e388":"**#######################\u3053\u3053\u307e\u3067\u306f\u7279\u5225\u306a\u306b\u3082\u3057\u3066\u3044\u306a\u3044##################**"}}