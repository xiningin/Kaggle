{"cell_type":{"28ca4eb1":"code","85224bc3":"code","fe378411":"code","ec5282bf":"code","95b02fa2":"code","8f49f417":"code","dd579cae":"code","742f809d":"code","4a68466e":"code","ebcb8c50":"code","b9bf0611":"code","9ff84fb5":"code","c5ee1494":"code","f9cd51ab":"code","19893aec":"code","d7549d3a":"code","ab63b2b3":"code","af4305ed":"code","e24ef1dd":"code","848ac8d1":"code","2b813876":"code","1861bcfc":"code","504be47c":"code","c50c679f":"code","f3b34167":"code","f3899306":"markdown"},"source":{"28ca4eb1":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import AdaBoostClassifier\n","85224bc3":"X = pd.read_csv('..\/input\/titanic\/train.csv')\nX_test = pd.read_csv('..\/input\/titanic\/test.csv')\ngen = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndata = [X, X_test]","fe378411":"X.head()","ec5282bf":"X.Survived.isnull().sum()","95b02fa2":"print(X.columns)\nprint(X.Cabin.isnull().sum())","8f49f417":"X.drop(['PassengerId','Name','Ticket','Cabin'], axis = 1, inplace = True)\n","dd579cae":"y = X['Survived']\nX.drop('Survived',axis = 1, inplace = True)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)","742f809d":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (X_train.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","4a68466e":"# Remove rows with missing Embarked value\n#X_train.dropna(axis=0, subset=['Embarked'], inplace=True)","ebcb8c50":"# Preprocessing for numerical data\nnumerical_cols = [cname for cname in X_train.columns if X_train[cname].dtype in ['int64', 'float64']]\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_cols = [cname for cname in X_train.columns if X_train[cname].nunique() < 10 and X_train[cname].dtype == \"object\"]\ncategorical_transformer = Pipeline(steps=[ ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer( transformers=[('num', numerical_transformer, numerical_cols), ('cat', categorical_transformer, categorical_cols)])\n","b9bf0611":"y_train.shape","9ff84fb5":"def Predition(model):\n    my_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])\n    my_pipeline.fit(X_train,y_train)\n    pred = my_pipeline.predict(X_valid)\n    score = accuracy_score(pred,y_valid)\n    print(\"Accuracy of \", score)\n    return (score)","c5ee1494":"def TestModel(model):\n    my_pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])\n    my_pipeline.fit(X_train,y_train)\n    pred = my_pipeline.predict(X_test.drop(['PassengerId','Name','Ticket','Cabin'], axis = 1))\n    score = accuracy_score(pred,gen['Survived'])\n    print(\"Accuracy of \", score)\n    return (pred)","f9cd51ab":"Predition(LogisticRegression(penalty = 'l2',C=10,tol=0.0001))","19893aec":"Predition(LinearSVC(penalty = 'l2',loss = 'squared_hinge', C=1,max_iter=1000))","d7549d3a":"Predition(SVC(C=5,kernel = 'sigmoid',  max_iter=-1))","ab63b2b3":"Predition(SGDClassifier(penalty='l2',loss='hinge',alpha = 0.0001,  max_iter=5000))","af4305ed":"Predition(KNeighborsClassifier(n_neighbors = 13,leaf_size = 30))","e24ef1dd":"Predition(RandomForestClassifier(n_estimators=10))","848ac8d1":"Predition(GaussianNB())","2b813876":"Predition(DecisionTreeClassifier())","1861bcfc":"Predition(Perceptron(penalty='l2', alpha=0.0001))","504be47c":"Predition(AdaBoostClassifier(base_estimator=None, n_estimators=50))","c50c679f":"test_predictions = TestModel(AdaBoostClassifier(base_estimator=None, n_estimators=50))","f3b34167":"submission = pd.DataFrame({\n        \"PassengerId\": X_test.PassengerId,\n        \"Survived\": test_predictions\n    })\nsubmission.to_csv(\"titanic_submission.csv\", index=False)","f3899306":"Accuracy on Test data"}}