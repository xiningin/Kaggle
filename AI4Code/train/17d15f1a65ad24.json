{"cell_type":{"120fff6b":"code","5d69c934":"code","aae721f2":"code","1e4a7257":"code","e4342242":"code","30436fd4":"code","5e3ea855":"code","158240a4":"code","93238a7d":"code","3afd5c79":"code","7283fe4d":"code","77054dfa":"code","9248582e":"code","77b4af99":"code","45070169":"code","65040401":"code","9cde9e1c":"code","174c8272":"code","50f8d3db":"code","7d5dabf8":"code","3be37fdc":"code","a532eb56":"code","e42113ce":"code","6f63a87c":"markdown","4d3eb637":"markdown","445073a2":"markdown","45812df5":"markdown","1feba27a":"markdown","32aa0bfb":"markdown","01e18763":"markdown","970f3ded":"markdown","2bce142a":"markdown","45b97c1a":"markdown"},"source":{"120fff6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.layers import GlobalAveragePooling2D,Flatten,Dense,Dropout\nfrom keras import layers\n!pip install --quiet \/kaggle\/input\/efficientnet-git\nimport efficientnet.keras as efn\n\n\n\n#from tensorflow.keras.applications import EfficientNetB0\n\nfrom tensorflow.keras.applications import EfficientNetB3\n\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d69c934":"train_path='..\/input\/cassava-leaf-disease-classification\/train_images'\ndf=pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ndf.head()\nnew_df1=df\nnew_df=df\ndf.shape","aae721f2":"train,val=train_test_split(df,test_size=0.05,random_state=123)\nprint(train.shape)\nprint(val.shape)\nsns.countplot(df['label'])","1e4a7257":"sns.countplot(df['label'])","e4342242":"train['label']=train['label'].astype('string')\nval['label']=val['label'].astype('string')\n\n#converting to string because when class_mode=categorical we need strings or lists","30436fd4":"print(train.shape)\nprint(val.shape)","5e3ea855":"train_generator = ImageDataGenerator(preprocessing_function = tf.keras.applications.efficientnet.preprocess_input,\n                                     rotation_range = 0,\n                                     width_shift_range = 0.2,\n                                     height_shift_range = 0.2,\n                                     shear_range = 0.5,\n                                     zoom_range = 0.2,\n                                     horizontal_flip = True,\n                                     vertical_flip = True,\n                                     fill_mode = 'reflect').flow_from_dataframe(\n                            train,\n                            directory = train_path,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            #weight_col = None,\n                            target_size = (256, 256),\n                            #color_mode = \"rgb\",\n                            #classes = None,\n                            class_mode = \"categorical\",\n                            batch_size = 32,\n                            shuffle = True,\n                            #seed = 34,\n                            #save_to_dir = None,\n                            #save_prefix = \"\",\n                            #save_format = \"png\",\n                            \n                            interpolation = \"nearest\",\n                            #validate_filenames = True\n)\n","158240a4":"batch=next(train_generator)\nprint(batch[0].shape)\nimage=(batch[0][2])\/255\nplt.imshow(image)","93238a7d":"valid_generator = ImageDataGenerator(preprocessing_function = tf.keras.applications.efficientnet.preprocess_input,).flow_from_dataframe(\n                            val,\n                            directory = train_path,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            #weight_col = None,\n                            target_size = (256, 256),\n                            #color_mode = \"rgb\",\n                            #classes = None,\n                            class_mode = \"categorical\",\n                            batch_size = 32,\n                            shuffle = True,\n                            #seed = 34,\n                            #save_to_dir = None,\n                            #save_prefix = \"\",\n                            #save_format = \"png\",\n                            \n                            interpolation = \"nearest\",\n                            #validate_filenames = True\n)","3afd5c79":"batch1=next(valid_generator)","7283fe4d":"print(batch1[0].shape)\nplt.imshow((batch1[0][2])\/255)","77054dfa":"def modelEfficientNetB3():\n    model=keras.Sequential()\n    model.add(EfficientNetB3(include_top=False,\n                             weights='imagenet',\n                             input_shape=(256,256,3)\n                            \n                            ))\n    model.add(GlobalAveragePooling2D()),\n    model.add(Flatten())\n    \n    model.add(Dense(256, activation = 'relu', bias_regularizer=tf.keras.regularizers.L1L2(l1=0.01, l2=0.001)))\n    model.add(Dropout(0.5))\n    model.add(Dense(5,activation='softmax'))\n    \n    return model\n    ","9248582e":"model=modelEfficientNetB3()","77b4af99":"model.summary()","45070169":"from tensorflow.keras import utils","65040401":"utils.plot_model(model)","9cde9e1c":"opt=keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt,\n              loss='categorical_crossentropy',\n              metrics='accuracy')","174c8272":"history=model.fit_generator(train_generator,epochs=25,validation_data=valid_generator)","50f8d3db":"model.save('.\/EffNetB4_300_try8.h5')\n","7d5dabf8":"history_df_save8=pd.DataFrame(history.history)\nhistory_df_save8.to_csv('history_undersampling8.csv',index=False)","3be37fdc":"ss = pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/sample_submission.csv\")\npreds = []\n\nfor image_id in ss.image_id:\n    image = cv2.cvtColor(cv2.imread('..\/input\/cassava-leaf-disease-classification\/test_images\/'+image_id),cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image,(224,224))\n    image = np.expand_dims(image, axis = 0)\n    preds.append(np.argmax(model.predict_generator(image)))\n\nss['label'] = preds\nss.to_csv('submission.csv', index = False)","a532eb56":"sample=pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\nsample.head()","e42113ce":"\n\n\nss.head()","6f63a87c":"# Predictions","4d3eb637":"index=new_df1[new_df1['label']==3].index","445073a2":"new_df1['label'].value_counts()","45812df5":"shapes=[]\ndf_train_id=df['image_id']\nrange(len(df_train_id))\n\nfor i in range(len(df_train_id)):\n    img_id=df_train_id[i]\n    img_path = os.path.join(train_path, img_id)\n    shapes.append(cv2.imread(img_path).shape)\n    \n","1feba27a":"shapes_df=pd.DataFrame({'Shapes':shapes})\nshapes_df.to_csv('imageSizes.csv')\nshapes_df.value_counts()","32aa0bfb":"new_df1.drop(index,inplace=True)","01e18763":"#new_df1.append(new_df1,ignore_index=True)\n\nfinal_df=new_df1.append(sampled_df,ignore_index=True)\nfinal_df['label'].value_counts()","970f3ded":"# building the efficient net b3 model","2bce142a":"new_df['weights']=np.where(new_df['label']==3,1,0)\nnew_df=new_df.sample(n=2500,weights=new_df.weights,random_state=42)\nsampled_df=new_df.drop(['weights'],axis=1)\nsampled_df.count()\n","45b97c1a":"# using image data generator to read files "}}