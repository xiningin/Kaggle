{"cell_type":{"faee830d":"code","7de3a759":"code","ae79d653":"code","bd751405":"code","34603a5a":"code","a0a53b23":"code","dfcf6e5f":"code","48928d69":"code","f673891b":"code","0cc60600":"code","e8b457e3":"code","c9385a71":"code","d41aceca":"code","957ea369":"code","ad53e086":"code","a7aef4c3":"code","af4d9201":"code","4478ffec":"code","607104b5":"code","5f23e60a":"code","fa350320":"code","ccef3b80":"code","3c3d4e48":"code","c045520f":"code","6f92fcac":"code","e031410c":"code","65e0acc8":"code","ea64fc76":"code","88aac5a8":"code","fdb2d092":"code","84381ca2":"code","5641ccf8":"code","8640b3e3":"markdown","2ef3b76f":"markdown","9b479d57":"markdown","afe9149b":"markdown","65710dcf":"markdown","8d1d4aaf":"markdown","541334fa":"markdown","16202e1a":"markdown","9702192f":"markdown","758d4c0b":"markdown","09862382":"markdown","be6e4f64":"markdown","48d3edd3":"markdown"},"source":{"faee830d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7de3a759":"# Importing essential libraries\nimport cv2, glob, os\nfrom matplotlib import pyplot as plt\nfrom PIL import Image","ae79d653":"# Importing essential datasets\nBASE = '..\/input\/cusersmarildownloads13989jpeg\/'","bd751405":"# Reading and understanding a single image\nimg = cv2.imread(\"..\/input\/cusersmarildownloads13989jpeg\/13989.jpeg\")\nplt.figure(figsize=(10,10))\nplt.imshow(img, cmap = 'twilight'), plt.axis('off'), plt.title('WWII Veterans',fontsize=20),plt.show()","34603a5a":"# Loading a whole bunch of images in train and test datasets\n#image_train = [cv2.imread(file) for file in glob.glob(BASE+'*.jpg')]\n#image_test = [cv2.imread(file) for file in glob.glob(BASE+'*.png')]\nimage_01 = cv2.imread(BASE+'13989.jpeg')\n#image_02 = cv2.imread(BASE+'1 (3043).jpg')","a0a53b23":"# Visualizing the selected images\n#plt.figure(figsize=(20,10))\n#plt.subplot(121),plt.imshow(image_01, cmap = 'hsv'), plt.axis('off'), plt.title('Nice lady',fontsize=30)\n#plt.subplot(122),plt.imshow(image_02, cmap = 'cividis'), plt.axis('off'), plt.title('Simple girl',fontsize=30)\n#plt.show()","dfcf6e5f":"# Visualizing the image histogram for first image\ncounts,bins,_ = plt.hist(image_01.ravel(),density = False, alpha = 0.8, histtype = 'stepfilled', color = '#0303FF', edgecolor = '#44FF80')","48928d69":"# Visualizing the histogram for second image\n#counts,bins,_ = plt.hist(image_02.ravel(),density = True, alpha = 0.2, histtype = 'stepfilled', color = '#03DDFF', edgecolor = '#FF0000')","f673891b":"# Understanding multivariate normal for the first image\nx, y = np.random.multivariate_normal([0,200],[[1, 0], [0, 200]],10000).T\nplt.hist2d(x,y,bins=30,cmap=\"Blues\")\ncb = plt.colorbar()\ncb.set_label('Counts in Bin')\nplt.show()","0cc60600":"# Understanding multivariate normal for the second image\n#x, y = np.random.multivariate_normal([0,200],[[1, 0], [0, 200]],10000).T\n#plt.hist2d(x,y,bins=30,cmap=\"Greens\")\n#cb = plt.colorbar()\n#cb.set_label('Counts in Bin')\n#plt.show()","e8b457e3":"# Grayscale histogram\nplt.figure(figsize=(15,8))\nplt.subplot(241), plt.plot(cv2.calcHist([cv2.cvtColor(image_01, cv2.COLOR_BGR2GRAY)],[0],None,[256], [0,256]), color = 'k'), plt.title('WWII Veterans',fontsize=15)\nplt.subplot(242), plt.plot(cv2.calcHist([image_01],[0],None,[256],[0,256]),color = 'b'), plt.xlim([0,256])\nplt.subplot(243), plt.plot(cv2.calcHist([image_01],[0],None,[256],[0,256]),color = 'g'), plt.xlim([0,256])\nplt.subplot(244), plt.plot(cv2.calcHist([image_01],[0],None,[256],[0,256]),color = 'r'), plt.xlim([0,256])\n#plt.subplot(245), plt.plot(cv2.calcHist([cv2.cvtColor(image_02, cv2.COLOR_BGR2GRAY)],[0],None,[256], [0,256]), color = 'k'), plt.title('Cute Girl',fontsize=15)\n#plt.subplot(246), plt.plot(cv2.calcHist([image_02],[0],None,[256],[0,256]),color = 'b'), plt.xlim([0,256])\n#plt.subplot(247), plt.plot(cv2.calcHist([image_02],[0],None,[256],[0,256]),color = 'g'), plt.xlim([0,256])\n#plt.subplot(248), plt.plot(cv2.calcHist([image_02],[0],None,[256],[0,256]),color = 'r'), plt.xlim([0,256])\nplt.show()","c9385a71":"# Grayscale Histogram Equalization\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.cvtColor(image_01, cv2.COLOR_BGR2GRAY), cmap = 'gray'), plt.axis('off'), plt.title('WWII Veterans',fontsize=20)\nplt.subplot(122),plt.imshow(cv2.equalizeHist(cv2.cvtColor(image_01, cv2.COLOR_BGR2GRAY)), cmap = 'gray'), plt.axis('off'), plt.title('Equalized Histogram',fontsize=20)\nplt.show()","d41aceca":"# 3-channel Histogram Equalization\nchannels = cv2.split(image_01)\neq_channels = []\nfor ch, color in zip(channels, ['B', 'G', 'R']): \n    eq_channels.append(cv2.equalizeHist(ch))\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(image_01, cmap = 'gray'), plt.axis('off'), plt.title('WWII Veterans',fontsize=20)\nplt.subplot(122),plt.imshow(cv2.cvtColor(cv2.merge(eq_channels),cv2.COLOR_BGR2RGB), cmap = 'gray'), plt.axis('off'), plt.title('Equalized Histogram',fontsize=20)\nplt.show()","957ea369":"# Averaging the images\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.blur(image_01,(40,40)), cmap = 'hsv'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\n#plt.subplot(122),plt.imshow(cv2.blur(image_02,(20,20)), cmap = 'cividis'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\nplt.show()","ad53e086":"# Gaussian filtering the images\nplt.figure(figsize=(20,10))\nplt.subplot(121), plt.imshow(cv2.GaussianBlur(image_01,(5,5),0), cmap = 'hsv'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\n#plt.subplot(122), plt.imshow(cv2.GaussianBlur(image_02,(5,5),0), cmap = 'hsv'), plt.axis('off'), plt.title('Cute girl',fontsize=30)\nplt.show()","a7aef4c3":"# Median filtering the images\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.medianBlur(image_01,5), cmap = 'hsv'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\n#plt.subplot(122),plt.imshow(cv2.medianBlur(image_02,5), cmap = 'Blues'), plt.axis('off'), plt.title('Cute girl',fontsize=30)\nplt.show()","af4d9201":"# Bilateral filtering the images\nplt.figure(figsize=(20,10))\nplt.subplot(121),plt.imshow(cv2.bilateralFilter(image_01,9,7.5,7.5), cmap = 'hsv'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\n#plt.subplot(122),plt.imshow(cv2.bilateralFilter(image_02,9,7.5,7.5), cmap = 'Blues'), plt.axis('off'), plt.title('Cute girl',fontsize=30)\nplt.show()","4478ffec":"# ROI selection in image the images\n# image_01[300:600,170:400] where the first is from top to bottom and the second is from left to right\neye_01 = image_01[380:480,180:390]\n#eye_02 = image_02[420:500,190:310]\nplt.figure(figsize=(20,10))\nplt.subplot(121), plt.imshow(eye_01, cmap = 'hsv'), plt.axis('off'), plt.title('WWII Veterans',fontsize=30)\n#plt.subplot(122), plt.imshow(eye_02, cmap = 'Blues'), plt.axis('off'), plt.title('Cute Girl Eye',fontsize=30)\nplt.show()","607104b5":"# Randomly getting some image information\nprint(image_01.shape)\nprint(image_01.dtype)\nprint(eye_01.shape)\n#print(eye_02.shape)","5f23e60a":"# Making borders for the images\nplt.figure(figsize=(20,10))\nplt.subplot(231), plt.imshow(eye_01, cmap = 'gray'), plt.axis('off'), plt.title('Grey',fontsize=25)\nplt.subplot(232), plt.imshow(cv2.copyMakeBorder(eye_01,10,10,10,10,cv2.BORDER_REPLICATE), cmap = 'Blues'), plt.axis('off'), plt.title('Replicate',fontsize=25)\nplt.subplot(233), plt.imshow(cv2.copyMakeBorder(eye_01,10,10,10,10,cv2.BORDER_REFLECT), cmap = 'gray'), plt.axis('off'), plt.title('Reflect',fontsize=25)\nplt.subplot(234), plt.imshow(cv2.copyMakeBorder(eye_01,10,10,10,10,cv2.BORDER_REFLECT_101), cmap = 'Blues'), plt.axis('off'), plt.title('Reflect 101',fontsize=25)\nplt.subplot(235), plt.imshow(cv2.copyMakeBorder(eye_01,10,10,10,10,cv2.BORDER_WRAP), cmap = 'gray'), plt.axis('off'), plt.title('Wrap',fontsize=25)\nplt.subplot(236), plt.imshow(cv2.copyMakeBorder(eye_01,10,10,10,10,cv2.BORDER_CONSTANT,value=(120,80,250)), cmap = 'Blues'), plt.axis('off'), plt.title('Constant',fontsize=25)\nplt.subplots_adjust(wspace=0.05, hspace=-0.3)\nplt.show()","fa350320":"# Mask operations for the images\nkernel = cv2.getGaussianKernel(15, 2.0)\nkernel_2D = kernel @ kernel.transpose()\nblurred_eye = cv2.filter2D(eye_01, -1, kernel_2D)\nplt.imshow(blurred_eye, cmap = 'Blues'), plt.axis('off'), plt.title('Gaussian masking',fontsize=20), plt.show()","ccef3b80":"# Blending images\n#dst = cv2.addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]])\n#dst = src1 * alpha + src2 * beta + gamma\n#eye_02x = cv2.resize(eye_02,eye_01.shape[1::-1])\n#blended_image = cv2.addWeighted(eye_01, 0.5, eye_02x, 0.5, 0)\n#plt.imshow(blended_image, cmap = 'Blues'), plt.axis('off'), plt.title('Merging images using weights',fontsize=20), plt.show()","3c3d4e48":"# Masking images\n#plt.imshow(cv2.bitwise_and(eye_01, eye_02x), cmap = 'Blues'), plt.axis('off'), plt.title('Bitwise masking',fontsize=20), plt.show()","c045520f":"# Masking images\nplt.imshow((eye_01*0.2).astype(np.uint8), cmap = 'Blues'), plt.axis('off'), plt.title('Masking images',fontsize=20), plt.show()","6f92fcac":"# Masking images\n#plt.imshow((eye_01*0.2+eye_02x*0.8).astype(np.uint8), cmap = 'Blues'), plt.axis('off'), plt.title('Masking images',fontsize=20), plt.show()","e031410c":"# Uniform addition of pixel values to images\neye_01x = (eye_01 * 0.5 + (96, 128, 160)).clip(0,255)\nplt.imshow(eye_01x.astype(np.uint8), cmap = 'Blues'), plt.axis('off'), plt.title('Uniform addition',fontsize=20), plt.show()","65e0acc8":"# Uniform addition of pixel values to images\n#eye_01x = (eye_01 * 0.5 + eye_02x * 0.2 + (96, 128, 160)).clip(0,255)\n#plt.imshow(eye_01x.astype(np.uint8), cmap = 'Blues'), plt.axis('off'), plt.title('Uniform addition',fontsize=20), plt.show()","ea64fc76":"# Mask creation by drawing in image\nmask_01 = np.zeros_like(image_01[0:300,0:400])\ncv2.rectangle(mask_01, (50, 50), (100, 200), (255, 255, 255), thickness=-1)\ncv2.circle(mask_01, (200, 100), 50, (255, 255, 255), thickness=-1)\ncv2.fillConvexPoly(mask_01, np.array([[330, 50], [300, 200], [360, 150]]), (255, 255, 255))\nmask_01x = cv2.resize(mask_01,image_01.shape[1::-1])\nplt.imshow(mask_01), plt.axis('off'), plt.title('Sample Mask',fontsize=20), plt.show()","88aac5a8":"# Bitwise and with the mask created\nplt.figure(figsize=(10,10))\nplt.imshow(cv2.bitwise_and(image_01,mask_01x)), plt.axis('off'), plt.title('Bitwise masking',fontsize=20), plt.show()","fdb2d092":"# Reading a new image for working with image channels\nimage_01 = cv2.imread(BASE+'13989.jpeg')\nprint(image_01.shape)\n\n# Splitting the channels\nplt.figure(figsize=(15,15))\nb,g,r = cv2.split(image_01)\nmask_03 = np.zeros(image_01.shape[:2], dtype = \"uint8\")\nimage_01x = cv2.merge((mask_03,g,r))\nplt.subplot(221), plt.imshow(image_01[:,:,0], cmap= 'gray'), plt.axis('off'), plt.title('Red Channel',fontsize=20)\nplt.subplot(222), plt.imshow(image_01[:,:,1], cmap= 'gray'), plt.axis('off'), plt.title('Green Channel',fontsize=20) \nplt.subplot(223), plt.imshow(image_01[:,:,2], cmap= 'gray'), plt.axis('off'), plt.title('Blue Channel',fontsize=20) \nplt.subplot(224), plt.imshow(image_01x), plt.axis('off'), plt.title('Channels Merged',fontsize=20)\nplt.subplots_adjust(wspace=0, hspace=-0.25)\nplt.show()","84381ca2":"\n# Crop and Resize Images\nheight, width = image_01.shape[:2]\nquarter_height, quarter_width = height \/ 4, width \/ 4\nT = np.float32([[1, 0, quarter_width], [0, 1, quarter_height]]) \n\nplt.figure(figsize=(20,15))\nplt.subplot(231), plt.imshow(image_01), plt.axis('off'), plt.title('Original Image',fontsize=20)\nplt.subplot(232), plt.imshow(cv2.resize(image_01,(200,200))), plt.axis('off'), plt.title('Resized Image',fontsize=20)\nplt.subplot(233), plt.imshow(image_01[470:610,420:610]), plt.axis('off'), plt.title('Cropped Image',fontsize=20)\nplt.subplot(234), plt.imshow(cv2.warpAffine(image_01, T, (width,height)) ), plt.axis('off'), plt.title('Translated Image',fontsize=20)\nplt.subplot(235), plt.imshow(cv2.rotate(image_01, cv2.ROTATE_90_CLOCKWISE)), plt.axis('off'), plt.title('Rotated Image',fontsize=20)\nplt.subplot(236), plt.imshow(np.flip(image_01,(0, 1))), plt.axis('off'), plt.title('Flipped Image',fontsize=20)","5641ccf8":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Dedicated to those that served and protected us, home and abroad' )","8640b3e3":"#All Script by Shrushrita Sharma https:\/\/www.kaggle.com\/shrushritasharma\/understanding-basic-image-operations\/comments","2ef3b76f":"#The mask will make sense after the next snippet.","9b479d57":"#It was suppose to be like the snippet below with eye_02x*0.8","afe9149b":"![](https:\/\/images.unsplash.com\/photo-1579762689878-ce41dd75ad98?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=600&q=60)Boston Public Library","65710dcf":"#Saving for the Next Notebook with many files.","8d1d4aaf":"#That worked with only one. Below that is the original including eye_02x * 0.2  ","541334fa":"#Save that for when you have more images","16202e1a":"#There is no second image. Save the snippet for next work.","9702192f":"#Needs 2 images, saved for the next job.","758d4c0b":"#That's cool. Seems like we're peeking through a hole to observe the chart.","09862382":"#There is No Eyes. Let's see how the snippet can bring to us.","be6e4f64":"#Save for next time.","48d3edd3":"#Veterans Day\n\nVeterans Day (originally known as Armistice Day) is a federal holiday in the United States observed annually on November 11, for honoring military veterans, that is, persons who have served in the United States Armed Forces (and were discharged under conditions other than dishonorable). It coincides with other holidays including Armistice Day and Remembrance Day which are celebrated in other countries that mark the anniversary of the end of World War I. Major hostilities of World War I were formally ended at the 11th hour of the 11th day of the 11th month of 1918, when the Armistice with Germany went into effect. At the urging of major U.S. veteran organizations, Armistice Day was renamed Veterans Day in 1954.https:\/\/en.wikipedia.org\/wiki\/Veterans_Day"}}