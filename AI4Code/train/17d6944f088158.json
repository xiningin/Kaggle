{"cell_type":{"de942a67":"code","477fc31e":"code","0aead657":"code","affd1d6b":"code","d155f1be":"code","00de2c24":"code","9afe4cc6":"code","a3282d56":"code","ff93a787":"code","f347dbe1":"code","fdfe586e":"code","64bceed3":"code","6c2060f4":"code","857c0b8a":"code","f198c824":"code","ae8e62f9":"code","82d0440a":"code","4aa03885":"code","84a2b0f2":"code","90f82482":"code","8b16fb53":"code","c3a1455f":"code","c78364d4":"code","07c4528b":"code","6066a1b7":"code","106ab607":"code","03f4a79c":"code","46572a2f":"code","873119ce":"code","d363bbdb":"code","41ff24e7":"code","acbd1e8d":"code","141f75eb":"code","e6aaabfa":"code","072fa524":"code","775f1a91":"code","aff9dc9c":"code","2bd12fbe":"code","b255c5da":"markdown","ecfca238":"markdown","24fcb3ae":"markdown","14122cc4":"markdown","f7574ecf":"markdown","e6b747fa":"markdown"},"source":{"de942a67":"import re\nimport numpy as np\nimport pandas as pd\nfrom time import time\nfrom collections import defaultdict\nimport spacy\nfrom wordcloud import WordCloud\nfrom gensim.models.phrases import Phrases, Phraser\nfrom gensim.models import Word2Vec\nimport multiprocessing\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nimport spacy\nnlp = spacy.load('en_core_web_lg')","477fc31e":"import tensorflow as tf\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","0aead657":"data0 = pd.read_csv('..\/input\/spam-email\/spam.csv')\ndata0[0:5]","affd1d6b":"nlp=spacy.load('en_core_web_lg',disable=['ner','parser'])\n\ndef cleaning(doc):\n    txt=[token.lemma_ for token in doc if not token.is_stop]\n    if len(txt)>2:\n        return ' '.join(txt)","d155f1be":"brief_cleaning = (re.sub(\"[^A-Za-z']+\", ' ', str(row)).lower() for row in data0['Message'])","00de2c24":"txt = [cleaning(doc) for doc in nlp.pipe(brief_cleaning, batch_size=5000, n_threads=-1)]\nprint(txt[0:20])","9afe4cc6":"df_clean = pd.DataFrame({'clean': txt})\ndf_clean = df_clean.dropna().drop_duplicates()\nprint(df_clean.shape)\nprint(df_clean[0:20])","a3282d56":"sent = [row.split() for row in df_clean['clean']]\nphrases = Phrases(sent, min_count=30, progress_per=10000)\nbigram = Phraser(phrases)\nsentences = bigram[sent]","ff93a787":"word_freq = defaultdict(int)\nfor sent in sentences:\n    for i in sent:\n        word_freq[i]+=1\nprint(len(word_freq))","f347dbe1":"words=sorted(word_freq, key=word_freq.get, reverse=True)\nprint(words[0:200])","fdfe586e":"plt.figure(figsize=(15,10))\nwordcloud = WordCloud(background_color='white',width=750,height=500).generate(\" \".join(words))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('',fontsize=20)","64bceed3":"cores = multiprocessing.cpu_count()\nprint(cores)","6c2060f4":"data0[words[0:200]]=0\ndata1=data0\ndata1","857c0b8a":"target=['Category']\ndatay=data1['Category'].map({'ham':0,'spam':1}).astype(int)\ndatax=data1.drop(['Category'],axis=1)","f198c824":"datax.shape","ae8e62f9":"for i in range(5572):\n    for j in range(1,201):\n        if words[j-1] in datax.iloc[i,0]:\n            datax.iloc[i,j]=1\ndatax","82d0440a":"datax=datax.drop(['Message'],axis=1)","4aa03885":"n=len(datax)\nprint(n)","84a2b0f2":"dataxar=np.array(datax)\ndatayar=np.array(datay)\nprint(dataxar.shape)\nprint(datayar.shape)","90f82482":"df_columns = list(datax.columns)\nprint(df_columns)","8b16fb53":"train=dataxar[0:(n\/\/4)*3]\ntest=dataxar[(n\/\/4)*3:]\n\ntrainy=datayar[0:(n\/\/4)*3]\ntesty=datayar[(n\/\/4)*3:]","c3a1455f":"print(len(test))\nprint(len(testy))","c78364d4":"train_df=pd.DataFrame(train)\ntest_df=pd.DataFrame(test)","07c4528b":"train_df.columns=df_columns\ntest_df.columns=df_columns","6066a1b7":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","106ab607":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","03f4a79c":"from tqdm import tqdm\n\ndef to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","46572a2f":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","873119ce":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","d363bbdb":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","41ff24e7":"y = trainy\nprint(y.shape)","acbd1e8d":"ydf=pd.DataFrame(y)\nydf","141f75eb":"from sklearn.model_selection import KFold\n\nfor i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_xlabel('oof '+str(i),fontsize=12)\n    ax.set_ylabel('train_y '+str(i),fontsize=12)\n    ax.scatter(oof,y)","e6aaabfa":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","072fa524":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","775f1a91":"pred2=models[4].predict(test)\nprint(pred2[0:20])\n\nPRED=[]\nfor item in pred2: \n    value=np.where(item<0.5,0,1)\n    PRED+=[int(value)]\nprint(PRED[0:20])","aff9dc9c":"ANS=list(testy)\nANS[0:20]","2bd12fbe":"accuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","b255c5da":"# Model","ecfca238":"# Word processing","24fcb3ae":"could not convert string to float: 'Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...'","14122cc4":"# Target setting","f7574ecf":"#  Train and test setting","e6b747fa":"# Predict"}}