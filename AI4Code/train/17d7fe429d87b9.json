{"cell_type":{"9a5a78e0":"code","fa7854d1":"code","d37de4bc":"code","93639533":"code","8d7e1c4d":"code","94337b44":"code","188324c5":"code","afe3b3ee":"code","a944dffb":"code","a38b6434":"code","78b63308":"code","583ddb4d":"code","b2424f30":"code","87e0ef7f":"code","cf42165e":"code","84a340c0":"code","ec575d7d":"code","5dfd8dcb":"markdown","54d01830":"markdown","8517555b":"markdown","f4d4d79c":"markdown","17acb073":"markdown","0ba944e5":"markdown","29c7c679":"markdown","a307c148":"markdown","89718be4":"markdown","84de5a5c":"markdown","dacf132b":"markdown","ff72bb5d":"markdown","23bf6411":"markdown","53220eda":"markdown"},"source":{"9a5a78e0":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression as glm\nfrom sklearn.neighbors import KNeighborsClassifier as knn\nfrom sklearn.ensemble import RandomForestClassifier as forest\nfrom sklearn.tree import DecisionTreeClassifier as tree\nfrom sklearn.model_selection import cross_val_predict as cv\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport random\nfrom sklearn.preprocessing import LabelEncoder \nfrom sklearn.preprocessing import OneHotEncoder","fa7854d1":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain.head()","d37de4bc":"fig, ax = plt.subplots(1,2, figsize=(15, 5))\nsns.heatmap(test.isnull(),yticklabels=False,cbar=False, cmap=\"Blues\", ax=ax[0])\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False, cmap=\"Blues\", ax=ax[1])\nax[0].set_title('\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 test', size=20)\nax[1].set_title('\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 train', size=20)\nplt.show()","93639533":"print(\" Missing in train\",\"\\n\\n\", train.isnull().sum().loc[train.isnull().sum() > 0], \"\\n\\n\", \"Missing in test\",\"\\n\\n\", test.isnull().sum().loc[test.isnull().sum() > 0] )","8d7e1c4d":"fig, ax = plt.subplots(1,3, figsize=(15, 4))\nsns.countplot(x='Pclass',hue='Survived',data=train, ax=ax[0])\nsns.countplot(x='Sex',hue='Survived',data=train, ax=ax[1])\nsns.countplot(x='Embarked',hue='Survived',data=train, ax=ax[2])\nax[1].set_title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 Pclass, Sex, Embarked', size=20)\nplt.show()\n","94337b44":"fig, ax = plt.subplots(1,2, figsize=(17, 4))\nsns.countplot(y='SibSp',hue='Survived',data=train, ax=ax[0])\nsns.countplot(y='Parch',hue='Survived',data=train, ax=ax[1])\nax[0].set_title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 SibSp', size=20)\nax[1].set_title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 Parch', size=20)\nplt.show()","188324c5":"display(train[\"Name\"], train[\"Ticket\"])","afe3b3ee":"fig, ax = plt.subplots(2,1, figsize=(15, 8))\nplt.subplots_adjust(hspace=0.5)\nsns.distplot(train[~ (train['Survived'] == 1) ]['Age'], label='Survived', color=\"g\", ax=ax[0])\nsns.distplot(train[~ (train['Survived'] == 0) ]['Age'], label='Not survived', color=\"b\", ax=ax[0])\nsns.distplot(train[~ (train['Survived'] == 1) ]['Fare'], label='Survived', color=\"g\", ax=ax[1])\nsns.distplot(train[~ (train['Survived'] == 0) ]['Fare'], label='Not survived', color=\"b\", ax=ax[1])\nax[0].set_title('\u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f', size=20)\nax[1].set_title('\u0413\u0440\u0430\u0444\u0438\u043a \u043f\u043b\u043e\u0442\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u0440\u0438\u0444\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u044b\u0436\u0438\u0432\u0430\u043d\u0438\u044f', size=20)\nplt.show()","a944dffb":"train.info()","a38b6434":"# \u0443\u0434\u0430\u043b\u0438\u043c Cabin \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0438\u043d\u0434\u0438\u0432\u0438\u0434\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438\ntrain.drop(['PassengerId','Name','Cabin','Ticket'],axis=1, inplace=True)\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 Age \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c, \u0430 Embarked \u0441\u0430\u043c\u044b\u043c \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u043c\u0441\u044f\ntrain[\"Age\"].fillna(train[\"Age\"].median(skipna=True,),inplace=True)\nembarked = train.groupby('Embarked').count()\nembarked_max = embarked[embarked == embarked.max()].index[0]\ntrain.loc[train['Embarked'].isnull(), 'Embarked'] = embarked_max\n\n# \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u043c \u0434\u043b\u044f test\ntest.drop(['Name','Cabin','Ticket'],axis=1, inplace=True)\ntest[\"Age\"].fillna(test[\"Age\"].median(skipna=True,),inplace=True)\ntest[\"Fare\"].fillna(test[\"Fare\"].median(skipna=True,),inplace=True) # \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0435\u0435 Fare\n\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\nfeatures = ['Pclass','Sex','Embarked']\nfor feature in features:\n    le = LabelEncoder()\n    le = le.fit(train[feature])\n    train[feature] = le.transform(train[feature])\n    test[feature] = le.transform(test[feature])\n\nprint(train.info(), test.info()) # \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0435\u0442, \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","78b63308":"model_forest = forest(n_estimators=100, max_depth=4, random_state = 4)\nmodel_knn = knn(n_neighbors = 10) #\u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0441\u043e\u0441\u0435\u0434\u0435\u0439\nmodel_glm = glm(max_iter=2000) \nmodel_tree = tree()\n\ntarget = train.Survived\nkfold = 5\ntrain = train.drop(['Survived'], axis=1)","583ddb4d":"random.seed(1234)\n\nfig, ax = plt.subplots(2,2, figsize=(9, 9))\nplt.subplots_adjust(hspace=0.5)\n\npredictions = cv(model_forest, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[0][0])\nax[0][0].set_title('RandomForest \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_knn, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[0][1])\nax[0][1].set_title('KNeighbors \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_glm, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][0])\nax[1][0].set_title('LogisticRegression \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_tree, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][1])\nax[1][1].set_title('DecisionTree \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\nplt.show()\n","b2424f30":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e family\n# 0 - \u0435\u0441\u043b\u0438 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440 \u043e\u0434\u0438\u043d, 1 - \u0441 \u0447\u043b\u0435\u043d\u0430\u043c\u0438 \u0441\u0435\u043c\u044c\u0438\ntrain['Family'] = 0\ntrain.loc[train[\"Parch\"] + train[\"SibSp\"] > 0,'Family'] = 1\n\n# \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445\ntarget = target.astype('uint8')\ntrain['Family'] = train['Family'].astype('uint8') \n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445\ntrain = pd.get_dummies(train, columns = ['Pclass',\"Sex\",'Embarked','SibSp','Parch'], prefix_sep = \"_\")\n\n# \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u043c \u0434\u043b\u044f test\ntest['Family'] = 0\ntest.loc[(test[\"Parch\"] + test[\"SibSp\"]) > 0,'Family'] = 1\ntest['Family'] = test['Family'].astype('uint8')\ntest = pd.get_dummies(test, columns = ['Pclass',\"Sex\",'Embarked','SibSp','Parch'], prefix_sep = \"_\")\n\nprint(train.info(), test.info()) # \u0437\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e \u0432 train \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 Parch_9, \u0443\u0431\u0435\u0440\u0435\u043c \u0435\u0435 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\ntest.drop(['Parch_9'],axis=1, inplace=True)\n\n# \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u044b, \u0443\u0434\u0430\u043b\u0438\u043c \u043f\u043e 1\ntrain.drop(['Pclass_0','Sex_0','Embarked_0','SibSp_1','Parch_2'],axis=1, inplace=True)\ntest.drop(['Pclass_0','Sex_0','Embarked_0','SibSp_1','Parch_2'],axis=1, inplace=True)","87e0ef7f":"random.seed(1234)\n\nfig, ax = plt.subplots(2,2, figsize=(9, 9))\nplt.subplots_adjust(hspace=0.5)\n\npredictions = cv(model_forest, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[0][0])\nax[0][0].set_title('RandomForest \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_knn, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[0][1])\nax[0][1].set_title('KNeighbors \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_glm, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][0])\nax[1][0].set_title('LogisticRegression \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_tree, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][1])\nax[1][1].set_title('DecisionTree \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\nplt.show()","cf42165e":"# \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\nimport statsmodels.api as sm\nlogit_model=sm.Logit(target,train)\nresult=logit_model.fit()\nprint(result.summary2())\n\n# \u0443\u0431\u0435\u0440\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c p-value\ntrain.drop(['Embarked_1','Embarked_2','SibSp_2','SibSp_4','SibSp_5','SibSp_8','Parch_3','Parch_4','Parch_5','Parch_6'],axis=1, inplace=True)\ntest.drop(['Embarked_1','Embarked_2','SibSp_2','SibSp_4','SibSp_5','SibSp_8','Parch_3','Parch_4','Parch_5','Parch_6'],axis=1, inplace=True)","84a340c0":"random.seed(1234)\n\nfig, ax = plt.subplots(2,2, figsize=(9, 9))\nplt.subplots_adjust(hspace=0.5)\n\npredictions = cv(model_forest, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"summer\", ax=ax[0][0])\nax[0][0].set_title('RandomForest \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_knn, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[0][1])\nax[0][1].set_title('KNeighbors \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_glm, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][0])\nax[1][0].set_title('LogisticRegression \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\npredictions = cv(model_tree, train, target, cv = kfold)\nsns.heatmap(confusion_matrix(target,predictions),annot=True,fmt='3.0f',cmap=\"Blues\", ax=ax[1][1])\nax[1][1].set_title('DecisionTree \\nAccuracy = {m}%'.format(m = round(accuracy_score(predictions,target)*100, 2)), size=15)\n\nplt.show()","ec575d7d":"ID = test.PassengerId\ntest = test.drop(['PassengerId'], axis=1)\n\nmodel_forest.fit(train, target)\nPreds = model_forest.predict(test)\n\nsubmission = pd.DataFrame({\n        \"PassengerId\": ID,\n        \"Survived\": Preds\n    })\nsubmission.to_csv('titanic.csv', index=False)\nsubmission.tail()","5dfd8dcb":"### \u041d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","54d01830":"`Cabin` \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u044d\u0442\u0443 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c. \n\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 `Age` \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c.\n\n\u041f\u043e\u043c\u0438\u043c\u043e \u044d\u0442\u043e\u0433\u043e \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 2 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f `Embarked`, \u0430 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c - 1 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `Fare`.","8517555b":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 <a id='cell_4'><\/a>","f4d4d79c":"\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u043d\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u0442\u0430\u043a\u0436\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438.","17acb073":"## \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u0430 \u043d\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 <a id='cell_5'><\/a>","0ba944e5":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 <a id='cell_6'><\/a>","29c7c679":"# Titanic classification models\n\n\u0414\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0432 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438, \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u043b\u0435\u0441\u0430, \u0434\u0435\u0440\u0435\u0432\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u0439, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043c\u0435\u0442\u043e\u0434 k-\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439.\n\n## \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u044d\u0442\u0430\u043f\u044b \u0440\u0430\u0431\u043e\u0442\u044b:\n+ [\u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#cell_1)\n+ [\u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](#cell_2)\n+ [\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u043e\u0447\u0438\u0449\u0435\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435](#cell_3)\n+ [\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445](#cell_4)\n+ [\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\u0438](#cell_5)\n+ [\u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u043d\u0430 \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438](#cell_6)\n\n","a307c148":"RandomForest \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430, \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0435\u0433\u043e \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","89718be4":"\u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b","84de5a5c":"## \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <a id='cell_2'><\/a>","dacf132b":"## \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 <a id='cell_3'><\/a>","ff72bb5d":"### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","23bf6411":"## \u041e\u043f\u0438\u0441\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 <a id='cell_1'><\/a>","53220eda":"\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0442\u0435\u0445, \u043a\u0442\u043e \u0432\u044b\u0436\u0438\u043b \u0438 \u043d\u0435\u0442, \u0441\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f. \n\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 `PassangerId`, `Name` \u0438 `Ticket` \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u043d \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0438 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0431\u0438\u043b\u0435\u0442\u043e\u0432."}}