{"cell_type":{"ed01ab9d":"code","9a0d38a6":"code","0f00382c":"code","3990ac7c":"code","36bb8816":"code","5b55e65b":"code","d72e641f":"code","df9ff949":"code","bbb30558":"code","c376bba2":"code","708fba02":"code","4140e8a9":"code","f81e3177":"code","476ad5ba":"code","26e6372d":"code","eeb719b8":"code","527ff19c":"code","2b21efda":"code","b85433eb":"code","a5ac8818":"code","e4664fb2":"code","45848d5e":"code","b365b223":"code","5cb318d1":"code","d7db31a6":"code","b735ffa7":"code","22bf27d0":"code","4f653a4a":"code","4b0dce2e":"code","14be7362":"code","8c09890d":"code","9bec1bee":"code","c20ce53a":"code","c45cbb4d":"code","a47fb8f8":"code","a6771db0":"code","49d57302":"code","2535bfbd":"code","759eb901":"code","e44be3ee":"code","f51d0345":"code","88ce3866":"code","4bde999e":"code","fa33436e":"code","9716fbb5":"code","511b616c":"code","59276669":"code","646cdfc1":"code","27aaa140":"code","b4078012":"code","1629fd6a":"code","7075cc92":"code","e5b48794":"code","a480d18b":"code","1f909db6":"code","086a08ae":"code","28751d96":"code","35179f3f":"code","76f878b8":"code","0213b3e7":"code","765c01d4":"code","41ea8544":"code","c7345f67":"code","6c34f8cd":"code","bf61ab10":"code","e08448ea":"code","7ced9ba6":"code","7e013ea0":"code","85d4b95b":"code","6ee90412":"code","09e7a321":"code","3a0a6b74":"code","1e84f942":"code","cdc98fcb":"code","9fba800a":"code","b278d530":"code","0b281da7":"code","d5f44ac8":"code","88787913":"code","a415fcb5":"code","b16f6e3a":"code","1b66bfcd":"code","3ca2b406":"code","2ab5c2c4":"code","ca94dc84":"code","3c7cb918":"code","5720bce7":"code","995b094c":"code","3e256fec":"code","b00c23c3":"code","7b57f613":"code","0fa384ba":"code","9b7954f0":"code","2c578d0f":"code","ca945e76":"code","207dacfd":"code","21039618":"code","a9d1e473":"code","aa77c773":"code","6ec1797f":"code","ee39c64a":"code","c7295ac6":"code","f8d7529d":"code","5496dba5":"code","daa7914d":"code","beac913f":"code","078222ca":"code","adc21694":"code","cb0c7df3":"code","9275a4a0":"code","31ef976c":"code","95bf9801":"markdown","18388b5d":"markdown","2f1f3b75":"markdown","bf01529e":"markdown","c3f8f5da":"markdown","5df558fd":"markdown","41476802":"markdown","108288e9":"markdown","d8dbc1df":"markdown","13b26042":"markdown","c65e47b5":"markdown","1699fd39":"markdown","e5860a9f":"markdown","bed15843":"markdown","f29ceccc":"markdown","ead35a41":"markdown","9ba7db80":"markdown","3847055c":"markdown","30caeb93":"markdown","a4198b21":"markdown","2917222e":"markdown","c9cfcced":"markdown","a4f14978":"markdown","bb63692d":"markdown","59d511bc":"markdown","5ad2f36a":"markdown","ea9178ca":"markdown","f04d2b6c":"markdown","04559987":"markdown","10fac28c":"markdown","32e9d4a8":"markdown","c7e41d62":"markdown","585fc565":"markdown","00ebd561":"markdown","c85068e2":"markdown","44104e84":"markdown","da5e7899":"markdown","87992505":"markdown","d497e8b5":"markdown","01046828":"markdown","ec05188b":"markdown","ce09dc24":"markdown"},"source":{"ed01ab9d":"!pip install -q japanize_matplotlib fastprogress catboost swifter","9a0d38a6":"# \u30b7\u30b9\u30c6\u30e0\u51e6\u7406\u5411\u3051\nimport os\nimport glob\n\n# \u30c7\u30fc\u30bf\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u7528\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\nfrom fastprogress.fastprogress import  progress_bar\nimport pickle\nimport joblib\n\n\n# \u30b0\u30e9\u30d5\u95a2\u9023\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\n%matplotlib inline\nplt.style.use(\"ggplot\")\n# \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u53d6\u5f97\nimport datetime\nfrom pytz import timezone\nnow = datetime.datetime.now(timezone('UTC'))\nyyyymmdd_hhmm = \"{0:%Y%m%d_%H%M}\".format(now.astimezone(timezone('Asia\/Tokyo')))\n\n#\u6700\u5927\u8868\u793a\u5217\u6570\u306e\u6307\u5b9a\uff08\u3053\u3053\u3067\u306f50\u5217\u3092\u6307\u5b9a\uff09\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 200)\n\n# \u4e0d\u8981\u306a\u8b66\u544a\u6291\u6b62\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# pandas\u306e\u6841\u6570\u8868\u793a\u3092\u30ab\u30f3\u30de\u533a\u5207\u308a\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b2\u6841\u306b\u3002\npd.options.display.float_format = '{:,.2f}'.format\n\n# \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u6307\u5b9a\nINPUT_DIR = '..\/data\/input\/'\nWORK_DIR = '..\/data\/work\/'\nOUTPUT_DIR = '..\/data\/output\/'\nFEATURE_DIR = '..\/data\/feature\/'\nFIG_DIR = '..\/data\/fig\/'\n\ndef log_shape(df):\n    print(f'shape = {df.shape}')\n    return df","0f00382c":"from sklearn import preprocessing\n# from wandb.lightgbm import wandb_callback\nfrom scipy import stats\nimport swifter","3990ac7c":"from tqdm.auto import tqdm as tqdmp\nfrom tqdm.autonotebook import tqdm as tqdm\ntqdmp.pandas()\n","36bb8816":"from contextlib import contextmanager\nimport time\nimport psutil\nimport math\nimport sys\n\n## \u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3068\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\n@contextmanager\ndef timer(name:str, slack:bool=False):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    print(f'<< {name} >> Start')\n    yield\n    \n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    \n    print(f\"<< {name} >> {m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec\", file=sys.stderr)","5b55e65b":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)\n","d72e641f":"NOTE_ID = 'N038'","df9ff949":"glob.glob('..\/input\/*')","bbb30558":"df_type = pd.read_csv('..\/input\/shigglecup-2nd\/typetable.csv')\ndf_sub = pd.read_csv('..\/input\/shigglecup-2nd\/sample_submission.csv')\ndf_train = pd.read_csv('..\/input\/shigglecup-2nd\/train.csv')\ndf_test = pd.read_csv('..\/input\/shigglecup-2nd\/test.csv')\ndf_team = pd.read_csv('..\/input\/shigglecup-2nd\/team_id.csv')\ndf_pokemon = pd.read_csv('..\/input\/shigglecup-2nd\/pokemon.csv')\n\ndf_type.shape, df_sub.shape, df_train.shape, df_test.shape, df_team.shape, df_pokemon.shape","c376bba2":"df_test['target'] = -1\n\ndf_train['type'] = 'train'\ndf_test['type'] = 'test'\n\ncommon_cols = list(set(df_train.columns) & set(df_test.columns))\n\ndf_mart = pd.concat([df_train[common_cols], df_test[common_cols]], axis=0).reset_index(drop=True)\ndf_mart.shape","708fba02":"# \u4f1d\u8aac\u30d5\u30e9\u30b0\u3092\u4ed8\u4e0e\ndf_pokemon['Legendary'] = df_pokemon['Legendary'].apply(lambda x: 1 if x == True else 0)","4140e8a9":"df_pokemon.head(3)","f81e3177":"df_team.head(3)","476ad5ba":"df_team.columns","26e6372d":"pokemon_cols = ['pokemon_id_1', 'pokemon_id_2', 'pokemon_id_3',\n       'pokemon_id_4', 'pokemon_id_5', 'pokemon_id_6']\n\ndf_first = pd.merge(df_mart, df_team, left_on='first', right_on='team_id', how='left')\ndf_second = pd.merge(df_mart, df_team, left_on='second', right_on='team_id', how='left')\n\ndf_mart = pd.concat([\n                        df_mart,\n                        df_first[pokemon_cols].add_suffix('_first'),\n                        df_second[pokemon_cols].add_suffix('_second'),\n                    ], axis=1)\n","eeb719b8":"df_mart.shape","527ff19c":"pokemon_id_cols = [c + '_first' for c in pokemon_cols] + [c + '_second' for c in pokemon_cols]\npokemon_id_cols","2b21efda":"pokemon_id_cols[0][10:]","b85433eb":"pokemon_detail_cols = ['Type_1', 'Type_2', 'HP', 'Attack', 'Defense',\n       'Sp_Atk', 'Sp_Def', 'Speed', 'Generation', 'Legendary']\n\n\ndf_list = []\nfor col in pokemon_id_cols:\n    suffix = col[10:] # '_1_first'\u307f\u305f\u3044\u306a\n    \n    df_tmp = pd.merge(df_mart, df_pokemon, left_on=col, right_on='pokemon_id', how='left')\n    df_list.append(df_tmp[pokemon_detail_cols].add_suffix(suffix))\n    ","a5ac8818":"df_mart = pd.concat([df_mart] + df_list, axis=1)\ndf_mart.shape","e4664fb2":"df_mart.head(2)","45848d5e":"first_team_cols = []\nsecond_team_cols = []\nfor pokemon_type in ['Type_1', 'Type_2']:\n    for pokemon_num in range(1, 7):\n        first_team_cols.append(f\"{pokemon_type}_{pokemon_num}_first\")\n        second_team_cols.append(f\"{pokemon_type}_{pokemon_num}_second\")","b365b223":"first_team_cols[:3]","5cb318d1":"df_mart['first_type_nuniq'] = df_mart[first_team_cols].apply(lambda x: x.nunique(), axis=1)\ndf_mart['second_type_nuniq'] = df_mart[second_team_cols].apply(lambda x: x.nunique(), axis=1)\ndf_mart['type_nuniq_diff'] = df_mart['first_type_nuniq'] - df_mart['second_type_nuniq'] ","d7db31a6":"df_mart[['first_type_nuniq', 'second_type_nuniq', 'type_nuniq_diff']].head(3)","b735ffa7":"df_mart[['first_type_nuniq', 'second_type_nuniq', 'type_nuniq_diff']].hist();","22bf27d0":"first_team_cols = []\nsecond_team_cols = []\nfor pokemon_num in range(1, 7):\n    first_team_cols.append(f\"Legendary_{pokemon_num}_first\")\n    second_team_cols.append(f\"Legendary_{pokemon_num}_second\")","4f653a4a":"df_mart[first_team_cols].sum(axis=1).value_counts()","4b0dce2e":"df_mart[second_team_cols].sum(axis=1).value_counts()","14be7362":"df_mart['first_legend_num'] = df_mart[first_team_cols].sum(axis=1)\ndf_mart['second_legend_num'] = df_mart[second_team_cols].sum(axis=1)\ndf_mart['legend_num_diff'] = df_mart['first_legend_num'] - df_mart['second_legend_num'] ","8c09890d":"df_mart[['first_legend_num', 'second_legend_num', 'legend_num_diff']].sum()","9bec1bee":"df_mart[['first_legend_num', 'second_legend_num', 'legend_num_diff']].hist()","c20ce53a":"status_cols = ['HP', 'Attack', 'Defense',\n       'Sp_Atk', 'Sp_Def', 'Speed']\n\ndf_pokemon[status_cols].sum(axis=1).head(3)","c45cbb4d":"for pokemon_num in range(1, 7):\n    for team in ['first', 'second']:\n        cols = [f\"{c}_{pokemon_num}_{team}\" for c in status_cols]\n        \n        df_mart[f'status_{pokemon_num}_{team}'] = df_mart[cols].sum(axis=1)","a47fb8f8":"df_mart.head(3).T.tail().T","a6771db0":"cols = ['status_1_first', 'status_1_second', 'status_2_first',\n       'status_2_second', 'status_3_first', 'status_3_second',\n       'status_4_first', 'status_4_second', 'status_5_first',\n       'status_5_second', 'status_6_first', 'status_6_second']\n\ndf_mart[cols].hist();","49d57302":"first_team_cols = [f\"status_{c}_first\" for c in range(1, 7)]\nsecond_team_cols = [f\"status_{c}_second\" for c in range(1, 7)]","2535bfbd":"df_mart['first_status_total_min'] = df_mart[first_team_cols].min(axis=1)\ndf_mart['first_status_total_mean'] = df_mart[first_team_cols].mean(axis=1)\ndf_mart['first_status_total_max'] = df_mart[first_team_cols].max(axis=1)\n\ndf_mart['second_status_total_min'] = df_mart[second_team_cols].min(axis=1)\ndf_mart['second_status_total_mean'] = df_mart[second_team_cols].mean(axis=1)\ndf_mart['second_status_total_max'] = df_mart[second_team_cols].max(axis=1)\n","759eb901":"df_mart['status_total_min_diff'] = df_mart['first_status_total_min'] - df_mart['second_status_total_min']\ndf_mart['status_total_mean_diff'] = df_mart['first_status_total_mean'] - df_mart['second_status_total_mean']\ndf_mart['status_total_max_diff'] = df_mart['first_status_total_max'] - df_mart['second_status_total_max']","e44be3ee":"df_mart.head(3).T.tail().T","f51d0345":"cols = ['first_status_total_min', 'first_status_total_mean', 'first_status_total_max']\n\ndf_mart[cols].hist();","88ce3866":"status_total_list = [f\"status_{c}_first\" for c in range(1, 7)] + [f\"status_{c}_second\" for c in range(1, 7)]\nstatus_total_list[:3]","4bde999e":"df_tmp = df_mart[status_total_list].rank(axis=1).astype(int).add_suffix('_rank')\ndf_mart = pd.concat([df_mart, df_tmp], axis=1)\ndf_mart.shape","fa33436e":"cols = ['status_1_first_rank',\n       'status_2_first_rank', 'status_3_first_rank',\n       'status_4_first_rank', 'status_5_first_rank',\n       'status_6_first_rank', 'status_1_second_rank',\n       'status_2_second_rank', 'status_3_second_rank',\n       'status_4_second_rank', 'status_5_second_rank',\n       'status_6_second_rank']\n\ndf_mart[cols].head(3)","9716fbb5":"th_600 = 600\nth_130 = 130","511b616c":"first_team_cols = [f\"status_{c}_first\" for c in range(1, 7)]\nsecond_team_cols = [f\"status_{c}_second\" for c in range(1, 7)]\n\ndf_mart['first_over600_status_num'] = df_mart[first_team_cols].apply(lambda x: sum(x >= th_600), axis=1)\ndf_mart['second_over600_status_num'] = df_mart[second_team_cols].apply(lambda x: sum(x >= th_600), axis=1)\n\ndf_mart['over600_status_num_diff'] = df_mart['first_over600_status_num'] - df_mart['second_over600_status_num']","59276669":"df_mart['first_over600_status_num'].value_counts()","646cdfc1":"first_team_cols = [f\"Speed_{c}_first\" for c in range(1, 7)]\nsecond_team_cols = [f\"Speed_{c}_second\" for c in range(1, 7)]\n\ndf_mart['first_over130_speed_num'] = df_mart[first_team_cols].apply(lambda x: sum(x >= th_130), axis=1)\ndf_mart['second_over130_speed_num'] = df_mart[second_team_cols].apply(lambda x: sum(x >= th_130), axis=1)\n\ndf_mart['over130_speed_num_diff'] = df_mart['first_over130_speed_num'] - df_mart['second_over130_speed_num']","27aaa140":"df_mart['first_over130_speed_num'].value_counts()","b4078012":"first_team_cols = [f\"status_{c}_first\" for c in range(1, 7)]\nsecond_team_cols = [f\"status_{c}_second\" for c in range(1, 7)]","1629fd6a":"df_mart['first_status_total'] = df_mart[first_team_cols].sum(axis=1)\ndf_mart['second_status_total'] = df_mart[second_team_cols].sum(axis=1)\n\ndf_mart['status_total_diff'] = df_mart['first_status_total'] - df_mart['second_status_total']","7075cc92":"df_mart['first_status_total'].hist()","e5b48794":"# first team - second team \u3067pokemon\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u3064\u304f\u308b\n# 1-3 (first 1, second 3\u306epokemon\u3067first 1\u306espeed\u304c\u9ad8\u3044\u30681\u3001\u4f4e\u3044\u30680)\n\n# \u30b9\u30d4\u30fc\u30c9\u304c\u540c\u3058\u5834\u5408\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u5148\u884c\u304c\u304d\u307e\u308b\u3089\u3057\u3044\nfor first_pokemon in range(1, 7):\n    for second_pokemon in range(1, 7):\n        df_mart[f'speed_compare_f{first_pokemon}_s{second_pokemon}'] = df_mart.apply(lambda x: 1 if x[f'Speed_{first_pokemon}_first'] > x[f'Speed_{second_pokemon}_second'] else 0, axis=1)\n        df_mart[f'speed_compare_s{second_pokemon}_f{first_pokemon}'] = df_mart.apply(lambda x: 1 if x[f'Speed_{second_pokemon}_second'] > x[f'Speed_{first_pokemon}_first'] else 0, axis=1)","a480d18b":"df_mart.head(3).T.tail().T","1f909db6":"first_team_cols = []\nsecond_team_cols = []\nfor first_pokemon in range(1, 7):\n    for second_pokemon in range(1, 7):\n        first_team_cols.append(f'speed_compare_f{first_pokemon}_s{second_pokemon}')\n        second_team_cols.append(f'speed_compare_s{second_pokemon}_f{first_pokemon}')\n","086a08ae":"first_team_cols[:3]","28751d96":"df_mart['first_speed_win_num'] = df_mart[first_team_cols].sum(axis=1)\ndf_mart['second_speed_win_num'] = df_mart[second_team_cols].sum(axis=1)","35179f3f":"df_mart['first_speed_win_num'].hist()","76f878b8":"df_mart['speed_win_num_diff'] = df_mart['first_speed_win_num'] - df_mart['second_speed_win_num']","0213b3e7":"df_mart['card'] = df_mart[['first', 'second']].apply(lambda x: str(x['first']) + '_' + str(x['second']), axis=1)","765c01d4":"sr_tmp = df_mart.iloc[0]\n# sr_tmp.values","41ea8544":"pokemon = '3_first'\n\ntype_1 = sr_tmp[f'Type_1_{pokemon}']\ntype_2 = sr_tmp[f'Type_2_{pokemon}']\n\ntype_1, type_2","c7345f67":"# df_type.loc[df_type['atck'].isin([type_1, type_2])]\ndf_type_tmp = df_type.copy()\n\ndf_type_tmp['cmb'] = df_type_tmp[type_1] * df_type_tmp[type_2] if type_2 == type_2 else  df_type_tmp[type_1]\ndf_type_tmp[[type_1, 'cmb']].head(3)","6c34f8cd":"# \u9632\u5fa1\u671f\u5f85\u5024\ndf_type_tmp['cmb'].mean()","bf61ab10":"pokemon = '1_first'\n\ntype_1 = sr_tmp[f'Type_1_{pokemon}']\ntype_2 = sr_tmp[f'Type_2_{pokemon}']\n\ntype_1, type_2","e08448ea":"# df_type.loc[df_type['atck'].isin([type_1, type_2])]\ndf_type_tmp = df_type.copy()\n\natck_list = [c for c in [type_1, type_2] if c == c]\ntype_cols = ['Normal', 'Fighting', 'Flying', 'Poison', 'Ground', 'Rock',\n       'Bug', 'Ghost', 'Steel', 'Fire', 'Water', 'Grass', 'Electric',\n       'Psychic', 'Ice', 'Dragon', 'Dark', 'Fairy']\ndf_type_tmp.loc[df_type_tmp['atck'].isin(atck_list)][type_cols]\n","7ced9ba6":"df_type_tmp.loc[df_type_tmp['atck'].isin(atck_list)][type_cols].max(axis=0).mean()","7e013ea0":"def calc_type_expected_weight(row, df_type, turn_type, team, pokemon_num):\n    \"\"\"\u30dd\u30b1\u30e2\u30f3\u3054\u3068\u306e\u653b\u6483\/\u9632\u5fa1\u306e\u671f\u5f85\u4fc2\u6570\u3092\u8a08\u7b97\n    \n        turn_type: offense\/defense\n        team: first\/second\n        pokemon_num: 1-6\n    \"\"\"\n    \n    type_1 = row[f'Type_1_{pokemon_num}_{team}']\n    type_2 = row[f'Type_2_{pokemon_num}_{team}']\n    if turn_type == 'defense':\n        val = df_type[type_1] * df_type[type_2] if type_2 == type_2 else  df_type[type_1] # nan\u5bfe\u7b56\n        return val.mean()\n    elif  turn_type == 'offense':\n        # \u653b\u6483\u5074\u306f\u5e38\u306b\u5f37\u3044\u639b\u3051\u76ee\u3092\u63a1\u7528\u3059\u308c\u3070\u3088\u3044\n        atck_list = [c for c in [type_1, type_2] if c == c] # nan\u5bfe\u7b56\n        type_cols = ['Normal', 'Fighting', 'Flying', 'Poison', 'Ground', 'Rock',\n               'Bug', 'Ghost', 'Steel', 'Fire', 'Water', 'Grass', 'Electric',\n               'Psychic', 'Ice', 'Dragon', 'Dark', 'Fairy']\n        val = df_type.loc[df_type['atck'].isin(atck_list)][type_cols].max(axis=0)\n        return val.mean()\n    \n        ","85d4b95b":"%%time\nfor pokemon_num in progress_bar(range(1,7)):\n\n    df_mart[f'f{pokemon_num}_mean_defense_weight'] = df_mart.swifter.apply(calc_type_expected_weight, df_type=df_type, turn_type='defense', team='first', pokemon_num=pokemon_num, axis=1)\n    df_mart[f's{pokemon_num}_mean_defense_weight'] = df_mart.swifter.apply(calc_type_expected_weight, df_type=df_type, turn_type='defense', team='second', pokemon_num=pokemon_num, axis=1)\n    df_mart[f'f{pokemon_num}_mean_offense_weight'] = df_mart.swifter.apply(calc_type_expected_weight, df_type=df_type, turn_type='offense', team='first', pokemon_num=pokemon_num, axis=1)\n    df_mart[f's{pokemon_num}_mean_offense_weight'] = df_mart.swifter.apply(calc_type_expected_weight, df_type=df_type, turn_type='offense', team='second', pokemon_num=pokemon_num, axis=1)\n    ","6ee90412":"first_defense_list = [f\"f{c}_mean_defense_weight\" for c in range(1, 7)]\nsecond_defense_list = [f\"s{c}_mean_defense_weight\" for c in range(1, 7)]\nfirst_offense_list = [f\"f{c}_mean_offense_weight\" for c in range(1, 7)]\nsecond_offense_list = [f\"s{c}_mean_offense_weight\" for c in range(1, 7)]","09e7a321":"# \u30c1\u30fc\u30e0\u3054\u3068\u306b\u653b\u6483\u30fb\u9632\u5fa1\u671f\u5f85\u5024\u306e\u7d71\u8a08\u91cf\u3092\u8a08\u7b97\u3001\u5dee\u5206\u3082\u51fa\u3059\ndf_mart[f'first_mean_defense_weiht_max'] = df_mart[first_defense_list].max(axis=1)\ndf_mart[f'first_mean_defense_weiht_mean'] = df_mart[first_defense_list].mean(axis=1)\ndf_mart[f'first_mean_defense_weiht_min'] = df_mart[first_defense_list].min(axis=1)\n\ndf_mart[f'second_mean_defense_weiht_max'] = df_mart[second_defense_list].max(axis=1)\ndf_mart[f'second_mean_defense_weiht_mean'] = df_mart[second_defense_list].mean(axis=1)\ndf_mart[f'second_mean_defense_weiht_min'] = df_mart[second_defense_list].min(axis=1)\n\ndf_mart[f'first_mean_offense_weiht_max'] = df_mart[first_offense_list].max(axis=1)\ndf_mart[f'first_mean_offense_weiht_mean'] = df_mart[first_offense_list].mean(axis=1)\ndf_mart[f'first_mean_offense_weiht_min'] = df_mart[first_offense_list].min(axis=1)\n\ndf_mart[f'second_mean_offense_weiht_max'] = df_mart[second_offense_list].max(axis=1)\ndf_mart[f'second_mean_offense_weiht_mean'] = df_mart[second_offense_list].mean(axis=1)\ndf_mart[f'second_mean_offense_weiht_min'] = df_mart[second_offense_list].min(axis=1)\n\n# \u5dee\u5206\ndf_mart[f'mean_defense_weiht_mean_diff'] = df_mart[f'first_mean_defense_weiht_mean'] - df_mart[f'second_mean_defense_weiht_mean']\ndf_mart[f'mean_offense_weiht_mean_diff'] = df_mart[f'first_mean_offense_weiht_mean'] - df_mart[f'second_mean_offense_weiht_mean']","3a0a6b74":"df_mart.head().T.tail(20)","1e84f942":"def calc_max_atck_weight(row, first, second, offense):\n    if offense == 'first':\n        a_type_1 = row[f'Type_1_{second}_second']\n        a_type_2 = row[f'Type_2_{second}_second']\n\n        b_type_1 = row[f'Type_1_{first}_first']\n        b_type_2 = row[f'Type_2_{first}_first']\n    else:\n        a_type_1 = row[f'Type_1_{first}_first']\n        a_type_2 = row[f'Type_2_{first}_first']\n\n        b_type_1 = row[f'Type_1_{second}_second']\n        b_type_2 = row[f'Type_2_{second}_second']     \n\n    offense = [c for c in [b_type_1, b_type_2] if c == c]\n    deffense = [c for c in [a_type_1, a_type_2] if c == c]\n\n    max_atck = df_type.loc[df_type['atck'].isin(offense)][deffense].max().max()\n    \n    return max_atck\n    \n    \nwith timer(\"offense->deffense\u3078\u306e\u6700\u5927\u653b\u6483\u4fc2\u6570\"):\n    for first in progress_bar(range(1, 7)):\n        for second in progress_bar(range(1, 7)):\n            df_mart[f\"f{first}_s{second}_max_atck_weight\"] = df_mart.swifter.apply(calc_max_atck_weight, first=first, second=second, offense='first', axis=1)\n            df_mart[f\"s{second}_f{first}_max_atck_weight\"] = df_mart.swifter.apply(calc_max_atck_weight, first=first, second=second, offense='second', axis=1)\n        ","cdc98fcb":"f_s_cols = []\ns_f_cols = []\nfor first in progress_bar(range(1, 7)):\n    for second in progress_bar(range(1, 7)):\n        df_mart[f'speed_x_weight_f{first}_s{second}'] = df_mart[f'speed_compare_f{first}_s{second}'] * df_mart[f\"f{first}_s{second}_max_atck_weight\"]\n        df_mart[f'speed_x_weight_s{second}_f{first}'] = df_mart[f'speed_compare_s{second}_f{first}'] * df_mart[f\"s{second}_f{first}_max_atck_weight\"]\n        f_s_cols.append(f'speed_x_weight_f{first}_s{second}')\n        s_f_cols.append(f'speed_x_weight_s{second}_f{first}')\n        ","9fba800a":"df_mart['speed_x_weight_f_s'] = df_mart[f_s_cols].sum(axis=1)\ndf_mart['speed_x_weight_s_f'] = df_mart[s_f_cols].sum(axis=1)\n\ndf_mart['speed_x_weight_diff']  = df_mart['speed_x_weight_f_s']  - df_mart['speed_x_weight_s_f'] ","b278d530":"def calc_speed_x_weight_threshold(df_mart, threshold):\n    \"\"\"\n    \u30dd\u30b1\u30e2\u30f3\u540c\u58eb\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\n    \u30fb\u30b9\u30d4\u30fc\u30c9\u304c\u3088\u308a\u9ad8\u3044\u7d44\u307f\u5408\u308f\u305b\n    \u30fb\u30bf\u30a4\u30d7\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001\u3042\u308b\u95be\u5024\u4ee5\u4e0a\n    \u306e\uff12\u3064\u306e\u89b3\u70b9\u3092\u304b\u3051\u3042\u308f\u305b\u3066\u3001\u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u4ef6\u6570\u3092SUM\u3001\u30c1\u30fc\u30e0\u9593\u3067DIFF\u3092\u8a08\u7b97\n    \"\"\"\n    \n    # type_weight\u306e\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n    f_s_cols = []\n    s_f_cols = []\n    for first in range(1, 7):\n        for second in range(1, 7):\n            f_s_cols.append(f\"f{first}_s{second}_max_atck_weight\")\n            s_f_cols.append(f\"s{second}_f{first}_max_atck_weight\")\n\n    # \u30bf\u30a4\u30d7\u7d44\u307f\u5408\u308f\u305b\u306e\u3046\u3061\u3001\u3057\u304d\u3044\u5024\u4ee5\u4e0a\u304b\u3069\u3046\u304b\u306e\u30d0\u30a4\u30ca\u30ea\u5316\u3092\u884c\u3046\n    for col in f_s_cols + s_f_cols:\n        df_mart[f\"tmp_{col}\"] = df_mart[col].apply(lambda x: 1 if x >= threshold else 0)\n\n    # \u30dd\u30b1\u30e2\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306b\u901f\u5ea6\u304c\u52dd\u3064\u5834\u5408\uff58\u30bf\u30a4\u30d7\u306e\u3057\u304d\u3044\u5024\u4ee5\u4e0a\u306e\u30d5\u30e9\u30b0\u3092\u304b\u3051\u5408\u308f\u305b\n    f_s_cols = []\n    s_f_cols = []\n    for first in range(1, 7):\n        for second in range(1, 7):\n            df_mart[f'tmp_speed_x_weight_f{first}_s{second}_threshold'] = df_mart[f'speed_compare_f{first}_s{second}'] * df_mart[f\"tmp_f{first}_s{second}_max_atck_weight\"]\n            df_mart[f'tmp_speed_x_weight_s{second}_f{first}_threshold'] = df_mart[f'speed_compare_s{second}_f{first}'] * df_mart[f\"tmp_s{second}_f{first}_max_atck_weight\"]\n            f_s_cols.append(f'tmp_speed_x_weight_f{first}_s{second}_threshold')\n            s_f_cols.append(f'tmp_speed_x_weight_s{second}_f{first}_threshold')\n            \n    df_mart[f'first_speed_x_weight_threshold_{threshold}'] = df_mart[f_s_cols].sum(axis=1)\n    df_mart[f'second_speed_x_weight_threshold_{threshold}'] = df_mart[s_f_cols].sum(axis=1)\n    df_mart[f'speed_x_weight_threshold_diff_{threshold}'] = df_mart[f'first_speed_x_weight_threshold_{threshold}'] - df_mart[f'second_speed_x_weight_threshold_{threshold}']\n    \n    # tmp\u7cfb\u306e\u30ab\u30e9\u30e0\u3092\u524a\u9664\n    del_cols = [c for c in df_mart.columns if 'tmp' in c] \n    df_mart = df_mart.drop(columns=del_cols)\n    \n    return df_mart","0b281da7":"threshold_list = [0.5, 1, 1.5, 2]\nfor threshold in progress_bar(threshold_list):\n    df_mart = calc_speed_x_weight_threshold(df_mart, threshold)\n","d5f44ac8":"df_mart.shape","88787913":"f = 1\ns = 1\n\nrow = df_mart.iloc[0]\na_type_1 = row[f'Attack_{f}_first']\na_type_2 = row[f'Sp_Atk_{f}_first']\nb_type_1 = row[f'Attack_{s}_second']\nb_type_2 = row[f'Sp_Atk_{s}_second']\n\nphy_diff = row[f'Attack_{f}_first'] - row[f'Attack_{s}_second']\nsp_diff = row[f'Sp_Atk_{f}_first'] - row[f'Sp_Atk_{s}_second']\nphy_diff, sp_diff","a415fcb5":"def calc_max_atck_vol(row, f, s, offense):\n    if offense == 'first':\n        phy_diff = row[f'Attack_{f}_first'] - row[f'Defense_{s}_second']\n        sp_diff = row[f'Sp_Atk_{f}_first'] - row[f'Sp_Def_{s}_second']\n    else:\n        phy_diff = row[f'Attack_{s}_second'] - row[f'Defense_{f}_first']\n        sp_diff = row[f'Sp_Atk_{s}_second'] - row[f'Sp_Def_{f}_first']\n        \n    return phy_diff if phy_diff >= sp_diff else sp_diff\n    \n    \nwith timer(\"offense->deffense\u3078\u306e\u6700\u5927\u653b\u6483\u4fc2\u6570\"):\n    for first in progress_bar(range(1, 7)):\n        for second in progress_bar(range(1, 7)):\n            df_mart[f\"f{first}_s{second}_max_atck_vol\"] = df_mart.swifter.apply(calc_max_atck_vol, f=first, s=second, offense='first', axis=1)\n            df_mart[f\"s{second}_f{first}_max_atck_vol\"] = df_mart.swifter.apply(calc_max_atck_vol, f=first, s=second, offense='second', axis=1)\n        ","b16f6e3a":"df_mart.head().T.tail().T","1b66bfcd":"f_s_cols = []\ns_f_cols = []\nfor first in range(1, 7):\n    for second in range(1, 7):\n        f_s_cols.append(f\"f{first}_s{second}_max_atck_vol\")\n        s_f_cols.append(f\"s{second}_f{first}_max_atck_vol\")","3ca2b406":"df_mart['f_s_max_atck_vol_mean'] = df_mart[f_s_cols].mean(axis=1)\ndf_mart['s_f_max_atck_vol_mean'] = df_mart[s_f_cols].mean(axis=1)\n\ndf_mart['f_s_max_atck_vol_trim_mean'] = df_mart[f_s_cols].agg(lambda x: stats.trim_mean(x, 0.1), axis=1)\ndf_mart['s_f_max_atck_vol_trim_mean'] = df_mart[s_f_cols].agg(lambda x: stats.trim_mean(x, 0.1), axis=1)","2ab5c2c4":"df_mart['max_atck_vol_mean_diff'] = df_mart['f_s_max_atck_vol_mean'] - df_mart['s_f_max_atck_vol_mean']\ndf_mart['max_atck_vol_trim_mean_diff'] = df_mart['f_s_max_atck_vol_trim_mean'] - df_mart['s_f_max_atck_vol_trim_mean']\n","ca94dc84":"f_cols = [f'Attack_{c}_first' for c in range(1,7)]\ns_cols = [f'Attack_{c}_second' for c in range(1,7)]","3c7cb918":"for col in range(1, 7):\n    df_mart[f'tmp_f{col}_phy_attack_adv'] = df_mart.swifter.apply(lambda x: 1 if x[f'Attack_{col}_first'] >= x[f'Sp_Atk_{col}_first'] else 0, axis=1)\n    df_mart[f'tmp_s{col}_phy_attack_adv'] = df_mart.swifter.apply(lambda x: 1 if x[f'Attack_{col}_second'] >= x[f'Sp_Atk_{col}_second'] else 0, axis=1)\n    \n    df_mart[f'tmp_f{col}_phy_defense_adv'] = df_mart.swifter.apply(lambda x: 1 if x[f'Defense_{col}_first'] >= x[f'Sp_Def_{col}_first'] else 0, axis=1)\n    df_mart[f'tmp_s{col}_phy_defense_adv'] = df_mart.swifter.apply(lambda x: 1 if x[f'Defense_{col}_second'] >= x[f'Sp_Def_{col}_second'] else 0, axis=1)","5720bce7":"f_attack_cols = [f'tmp_f{c}_phy_attack_adv' for c in range(1, 7)]\ns_attack_cols = [f'tmp_s{c}_phy_attack_adv' for c in range(1, 7)]\nf_defense_cols = [f'tmp_f{c}_phy_defense_adv' for c in range(1, 7)]\ns_defense_cols = [f'tmp_s{c}_phy_defense_adv' for c in range(1, 7)]\n","995b094c":"df_mart['f_phy_attack_adv_num'] = df_mart[f_attack_cols].sum(axis=1)\ndf_mart['s_phy_attack_adv_num'] = df_mart[s_attack_cols].sum(axis=1)\ndf_mart['f_phy_defense_adv_num'] = df_mart[f_defense_cols].sum(axis=1)\ndf_mart['s_phy_defense_adv_num'] = df_mart[f_defense_cols].sum(axis=1)","3e256fec":"df_mart.head(20).T.tail(20)","b00c23c3":"df_mart['f_s_phy_diff'] = df_mart.apply(lambda x: abs(x['f_phy_attack_adv_num'] - x['s_phy_defense_adv_num']), axis=1)\ndf_mart['s_f_phy_diff'] = df_mart.apply(lambda x: abs(x['s_phy_attack_adv_num'] - x['f_phy_defense_adv_num']), axis=1)\n\ndf_mart['f_s_phy_diff_diff'] = df_mart['f_s_phy_diff'] - df_mart['s_f_phy_diff']","7b57f613":"df_mart.shape","0fa384ba":"drop_cols = f_attack_cols + s_attack_cols + f_defense_cols + s_defense_cols\ndf_mart = df_mart.drop(columns=drop_cols)\n\ndf_mart.shape","9b7954f0":"df_mart.columns.values","2c578d0f":"from sklearn.model_selection import GroupKFold","ca945e76":"df_train = df_mart.loc[df_mart['type'] == 'train']\ndf_test = df_mart.loc[df_mart['type'] == 'test']\n\nfold_num = 4\nkf = GroupKFold(n_splits=fold_num)\n\ntrain_te = np.zeros(len(df_train))\ntest_te = np.zeros(len(df_test))\nfor i, (train_idx, test_idx) in enumerate(kf.split(df_train, df_train['target'], groups=df_train[\"first\"])):\n    \n    df_train_tmp = df_train.iloc[train_idx]\n    df_grp = df_train_tmp.groupby('second')['target'].mean()\n    \n    train_te[test_idx] = df_train.iloc[test_idx]['second'].map(df_grp)\n \n\ndf_grp = df_train.groupby('second')['target'].mean()\ntest_te = df_test['second'].map(df_grp)\n\ndf_train['te_second'] = train_te\ndf_test['te_second'] = test_te\ndf_mart = pd.concat([df_train, df_test], axis=0)\n","207dacfd":"type_cols = [c for c in df_mart.columns if 'Type' in c]\ndf_mart[type_cols] = df_mart[type_cols].fillna('nan')\n# fit \u306f\u3001\uff12\u3064\u306e\u30ab\u30e9\u30e0\u306e\u5408\u8a08\u3067\u884c\u3046\nle = preprocessing.LabelEncoder()\n","21039618":"le.fit(df_mart[type_cols].values.flatten())\n\nfor col in type_cols:\n    df_mart[col] = le.transform(df_mart[col])\n","a9d1e473":"for col in ['card']:\n    df_mart[col] = le.fit_transform(df_mart[col])","aa77c773":"from sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold, StratifiedKFold, GroupKFold\n# from sklearn.model_selection import StratifiedGroupKFold\nimport lightgbm as lgb\nfrom catboost import CatBoostClassifier\n","6ec1797f":"\ndef save_feature_importance(importance: list, title=\"feature importance\", filename_suffix=None, note_id=NOTE_ID, top_n=50):\n    \"\"\"feature importance\u3092\u4fdd\u5b58\u3002\n    \u30c7\u30d5\u30a9\u30eb\u30c8\u4fdd\u5b58\u5834\u6240\u306f OUTPUT_DIR + \"{}_feature_importance.png\".format(note_id)\n    Args:\n        importance (list): [description] dataframe\u306e\u30ea\u30b9\u30c8\u3002DataFrame(columns=['feature', 'importance'])\u304c\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20(fold\u6570)\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b\u3002\n        title (str, optional): [description]. Defaults to \"feature importance\".\n        filename_suffix ([type], optional): \u4e00\u610f\u306b\u3059\u308b\u305f\u3081\u306b\u5229\u7528\u3002\u4f8b\u3048\u3070yyyymmdd_hhmm\u306a\u3069. Defaults to None.\n        note_id (str, optional): [description]. Defaults to ''.\n        top_n (int, optional): [description]. Defaults to 50.\n    \"\"\"\n\n    # DF\u3092\u7d50\u5408\u3059\u308b\n    df_importance = pd.DataFrame()\n    for df_tmp in importance:\n        if df_importance.empty:\n            df_importance = df_tmp\n        else:\n            df_importance = pd.concat([df_importance, df_tmp], axis=0)\n\n    # \u5404Fold\u306eimportance\u3092\u5e73\u5747\u5316\u30fb\u91cd\u8981\u5ea6\u9ad8\u3044\u9806\u306b\u3059\u308b\n    df_importance = (\n        df_importance.groupby(\"feature\")[\"importance\"]\n        .mean()\n        .reset_index()\n        .sort_values(by=\"importance\", ascending=False)\n    )\n\n    df_importance = df_importance.iloc[:top_n, :]\n\n    # filename \u306bsuffix\u6307\u5b9a\u304c\u3042\u308b\u5834\u5408\n    if filename_suffix is None:\n        filename = f\"{note_id}_feature_importance.png\"\n    else:\n        filename = f\"{note_id}_feature_importance_{filename_suffix}.png\"\n\n    plt.figure(figsize=(10, 16))\n    sns.barplot(data=df_importance, x=\"importance\", y=\"feature\")\n    plt.title(title)\n    plt.tight_layout()\n    plt.savefig(OUTPUT_DIR + filename)\n    plt.savefig(os.path.join(wandb.run.dir, filename))\n#     wandb.save(filename)\n\n    return None","ee39c64a":"from sklearn.metrics import log_loss\n","c7295ac6":"def modeling(df_mart, feature_cols, target_col):\n    df_train = df_mart.loc[df_mart['type'] == 'train']\n    df_test = df_mart.loc[df_mart['type'] == 'test']\n\n    \n    fold_num = 4\n    SEED = 42\n    kf = GroupKFold(n_splits=fold_num)\n\n#     wandb.config.update({'features': feature_cols})\n#     wandb.config.update({'features num': len(feature_cols)})\n\n    oof = np.zeros(len(df_train))\n    test_pred = np.zeros(len(df_test))\n    importance_list = []\n    for i, (train_idx, test_idx) in enumerate(kf.split(df_train[feature_cols], df_train[target_col], groups=df_train[\"first\"])):\n        X_train = df_train.iloc[train_idx][feature_cols]\n        y_train = df_train.iloc[train_idx][target_col]\n        X_test = df_train.iloc[test_idx][feature_cols]\n        y_test = df_train.iloc[test_idx][target_col]\n\n        \n        model = CatBoostClassifier(verbose=100, eval_metric='AUC')\n        model.fit(X_train, y_train,\n                  eval_set=(X_test, y_test))\n        \n        oof[test_idx] = model.predict(X_test, prediction_type='Probability')[:, 1]\n        test_pred += model.predict(df_test[feature_cols], prediction_type='Probability')[:, 1]\n\n        \n\n        # fold\u5225\u30b9\u30b3\u30a2\n        auc_val = roc_auc_score(y_test, oof[test_idx])\n#         wandb.log({f\"auc_fold_{i}\": auc_val})\n        print(f\"auc_fold_{i}: {auc_val}\")\n\n        # \u91cd\u8981\u5ea6\n        importance = pd.DataFrame({'importance': model.get_feature_importance(),\n                                   'feature': feature_cols})\n        importance_list.append(importance)\n        \n        # \u4fdd\u5b58\n#         filename = f\"{NOTE_ID}_model_fold{i}.pkl\"\n#         joblib.dump(model, f'..\/data\/output\/{filename}', compress=3)\n#         joblib.dump(model, os.path.join(wandb.run.dir, filename), compress=3)\n\n    # \u5168\u4f53\u306e\u30b9\u30b3\u30a2\n#     save_feature_importance(importance_list, title=target_col, filename_suffix=target_col)\n\n    df_train[f\"pred\"] = oof\n    auc_val = roc_auc_score(df_train[target_col], oof)\n#     wandb.log({f\"auc_oof\": auc_val})\n\n    # \u53c2\u8003\n    logloss = log_loss(df_train[target_col], oof)\n#     wandb.log({f\"logloss\": logloss})\n    \n    pred = test_pred \/ kf.n_splits\n    df_test[f\"pred\"] = pred\n\n    df_mart = pd.concat([df_train, df_test], axis=0)\n\n    return df_mart, importance_list\n","f8d7529d":"feature_cols = [c for c in df_mart.columns if c not in ['type', 'target']]\ntarget_col = 'target'","5496dba5":"len(feature_cols)","daa7914d":"assert df_mart[feature_cols].isnull().sum().sum() == 0","beac913f":"df_mart, importance_list = modeling(df_mart, feature_cols, target_col)","078222ca":"df_sub.head(3)","adc21694":"df_sub.shape","cb0c7df3":"df_test = df_mart.loc[df_mart['type'] == 'test']\ndf_submission = df_test['pred'].reset_index(drop=True).reset_index()\ndf_submission = df_submission.rename(columns={'pred': 'target'})\ndf_submission.head()","9275a4a0":"df_submission.shape","31ef976c":"df_submission.to_csv(f\".\/{NOTE_ID}_df_sub.csv\", index=None)","95bf9801":"# Label Encoding","18388b5d":"# Feature Engineering","2f1f3b75":"## pokemon\u3092\u7d50\u5408","bf01529e":"## \u30c1\u30fc\u30e0\u5358\u4f4d\u306e\u30e6\u30cb\u30fc\u30af\u30bf\u30a4\u30d7\u6570\u3068\u305d\u306e\u5dee","c3f8f5da":"## \u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u4f1d\u8aac\u30dd\u30b1\u30e2\u30f3\u306e\u6570\u3068\u305d\u306e\u5dee","5df558fd":"---","41476802":"## team\u3092\u7d50\u5408","108288e9":"\u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e12\u4f53\u4e2d\u306e\u30e9\u30f3\u30af\uff08\u5927\u304d\u3044\u30681\u3001\uff12\uff0c\uff13\uff09","d8dbc1df":"## \u653b\u6483\u30bf\u30a4\u30d7\u76f8\u6027\uff08\u7269\u7406\u30fb\u7279\u6b8a\uff09\u306e\u639b\u3051\u5408\u308f\u305b","13b26042":"## \u5404\u30c1\u30fc\u30e0\u611f\u3067\u306e\u30b9\u30d4\u30fc\u30c9\u5024\u306e\u52dd\u3061\u8ca0\u3051\u3092\u8a55\u4fa1\u3001\u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u7dcf\u6570\u3082\u6bd4\u8f03","c65e47b5":"# sub\u4f5c\u6210","1699fd39":"---","e5860a9f":"\u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024\u306e\u3001\u30c1\u30fc\u30e0\u5185\u5e73\u5747\u3001\u6700\u5927\u3001\u6700\u5c0f\u3001\u305d\u308c\u305e\u308c\u306e\u5dee","bed15843":"## train, test\u306e\u30c7\u30fc\u30bf\u7d50\u5408","f29ceccc":"### type_weight\u304c\u3042\u308b\u95be\u5024\u4ee5\u4e0a\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8(speed_win\u306e\u3082\u306e\u306e\u307f)","ead35a41":"# \u30c7\u30fc\u30bf\u30de\u30fc\u30c8\u4f5c\u6210","9ba7db80":"# \u521d\u671f\u8a2d\u5b9a","3847055c":" ---","30caeb93":"## \u5bfe\u6226\u30ab\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b","a4198b21":"\u95a2\u6570\u5316","2917222e":"# Modeling","c9cfcced":"\u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u96c6\u8a08","a4f14978":"\u30b5\u30f3\u30d7\u30eb(offense)","bb63692d":"---","59d511bc":"## \u30bf\u30a4\u30d7\u76f8\u6027\u306e\u639b\u3051\u5408\u308f\u305b","5ad2f36a":"---","ea9178ca":"\u30b5\u30f3\u30d7\u30eb","f04d2b6c":"- \u53b3\u5bc6\u306b\u306f2ndplace\u306e\u30b9\u30b3\u30a2\u306e\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3001\u7279\u5fb4\u91cf\u3092\u8ffd\u52a0\u3057\u305f\u7248\u3067\u3059\u3002\uff08\u30b9\u30b3\u30a2\u306f\u3061\u3087\u3063\u3068\u4e0b\u304c\u308b\u3051\u3069\uff09","04559987":"## \u30c1\u30fc\u30e0\u5185\u306e\u7269\u7406\u578b\u30fb\u7279\u6b8a\u578b\u306e\u6bd4\u7387","10fac28c":"- \u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024\n- \u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024\u306e\u3001\u30c1\u30fc\u30e0\u5185\u5e73\u5747\u3001\u6700\u5927\u3001\u6700\u5c0f\u3001\u305d\u308c\u305e\u308c\u306e\u5dee\n- \u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e12\u4f53\u4e2d\u306e\u30e9\u30f3\u30af\uff08\u5927\u304d\u3044\u30681\u3001\uff12\uff0c\uff13\uff09\n\n- \u30c1\u30fc\u30e0\u5358\u4f4d\u3067600\u65cf, 130\u65cf\u304c\u4f55\u4f53\u3044\u308b\u304b\u3002\u307e\u305f\u305d\u306e\u30c1\u30fc\u30e0\u5dee\n- \u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024\u3001\u30c1\u30fc\u30e0\u5dee","32e9d4a8":"## TE:second\u306e\u30c1\u30fc\u30e0\u306b\u3088\u308b\u52dd\u7387","c7e41d62":"----\n","585fc565":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","00ebd561":"\u30c1\u30fc\u30e0\u5358\u4f4d\u3067600\u65cf, 130\u65cf\u304c\u4f55\u4f53\u3044\u308b\u304b\u3002\u307e\u305f\u305d\u306e\u30c1\u30fc\u30e0\u5dee","c85068e2":"\u95a2\u6570\u5316","44104e84":"## \u7a2e\u65cf\u5024\u306e\u5408\u8a08\u6570\u3001\u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e\u7d71\u8a08\u91cf\u3001\u76f8\u624b\u30c1\u30fc\u30e0\u3068\u306e\u5dee","da5e7899":"\u30c1\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024\u3001\u30c1\u30fc\u30e0\u5dee","87992505":"\u30b5\u30f3\u30d7\u30eb\uff08deffense)","d497e8b5":"### offense -> deffense \u3078\u306e\u6700\u5927\u306e\u653b\u6483\u4fc2\u6570(first->second, second->first)\n","01046828":"## \u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u306e\u30bf\u30a4\u30d7\u5e73\u5747weight","ec05188b":"### offense -> deffense \u3078\u306e\u6700\u5927\u306e\u653b\u6483\u4fc2\u6570(first->second, second->first\u306e2\u30d1\u30bf\u30fc\u30f3)\n","ce09dc24":"\u30dd\u30b1\u30e2\u30f3\u5358\u4f4d\u3067\u306e\u5408\u8a08\u5024"}}