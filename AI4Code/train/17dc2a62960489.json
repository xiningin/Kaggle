{"cell_type":{"2baebafe":"code","22e0da9e":"code","17e5c7d6":"code","b4a5df53":"code","1342fc76":"code","7456cb76":"code","af215041":"code","a119c28f":"code","4590cbbb":"code","a43f38ca":"code","399beaa2":"code","fc03c7cc":"code","81f647bf":"code","42aeae79":"code","049ccce2":"code","5565b766":"code","821a9663":"code","4dd5b625":"code","96287d15":"code","00b18bc0":"code","26f1765a":"code","b11b69d6":"code","4f97916c":"code","7bc56172":"code","aaa27502":"code","e422b038":"code","adfeee28":"code","7bf826be":"code","c2eebacd":"code","4531e531":"code","1ed98e21":"code","29f102b7":"code","bcbb3233":"code","caf1dd22":"code","a8ce417c":"code","85068947":"code","a3d6b4c3":"code","22c6443a":"code","ffe8782d":"code","5e45fd1e":"code","4999f7dc":"code","8dbf7730":"code","58885789":"code","2b96c1ce":"code","5da020c7":"code","9380aa6f":"code","15ca2d3e":"code","59be83ed":"code","f8b1f683":"code","aa43c0b4":"code","e93821c0":"code","3ab9ad00":"code","4a7f893f":"code","14ad3ace":"code","fa75da7a":"code","eb4ead33":"code","1fb179e7":"code","57a9ddd6":"code","089c1161":"code","02dec5b1":"code","c2ceee0d":"code","9f782ca4":"code","9303fa84":"code","2323653d":"code","965dc06b":"code","c42c367a":"code","dc789610":"code","125ca24a":"code","cd485237":"code","7c72a654":"code","7966f921":"code","3414a8bb":"code","5ee84b28":"code","e4269e02":"code","00a72fa0":"code","708870ad":"code","32c5ae7d":"code","7b0947f4":"code","b506e8ee":"code","66f5a150":"markdown","110af1ac":"markdown","efed0f76":"markdown","df4f7747":"markdown","4592afe6":"markdown","a71fe007":"markdown","86f78586":"markdown","b7bcf8bd":"markdown","92de520c":"markdown","5849b433":"markdown","27e898df":"markdown","ec1d17ec":"markdown","7ba62252":"markdown","40ece2fb":"markdown"},"source":{"2baebafe":"import pandas as pd\nimport numpy as np \n\n#G\u00f6rselle\u015ftirme k\u00fct\u00fcphaneleri\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\nimport missingno as msno\n","22e0da9e":"print(\"pandas\",pd.__version__)\nprint(\"seaborn\",sns.__version__)\nprint(\"missingno\",msno.__version__)\nprint(\"numpy\",np.__version__)","17e5c7d6":"Data = pd.read_csv('..\/input\/INGDatathonData2018.csv',sep=(','))\n","b4a5df53":"print(Data.info(verbose=True))\n","1342fc76":"Data.shape","7456cb76":"Data.head()","af215041":"print(Data.describe())","a119c28f":"print(Data['DEFAULT_FLAG'].value_counts())\nplt.figure(1, figsize=(4,4))\nData['DEFAULT_FLAG'].value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.show()","4590cbbb":"Data=Data.drop(['SHARE_OF_TL_FACTORING_RISK','DT_MAX_TL_NON_CASH_LMT_UTIL3','DT_MAX_TL_NON_CASH_LMT_UTIL12','MAX_TTL_TL_CSH_LIMIT12','STDDEV_TTL_TL_CASH_RSK12','TTL_INDM_TL_NONCASH_LOAN','MAX_TTL_TL_CASH_RSK6','MAX_TTL_TL_CASH_RSK3','MAX_TTL_TL_CASH_RSK12','STDDEV_FACTORING_TL_RSK12','AVG_TTL_TL_NON_CASH_RSK6','MAX_TTL_TL_CSH_LIMIT6','MAX_TTL_TL_CSH_LIMIT3','TOTAL_TL_RSK','TOTAL_TL_CASH_RSK','TOTAL_TL_NON_CASH_RSK','TOTAL_TL_LIMIT','TOTAL_TL_CASH_LIMIT','TOTAL_TL_NON_CASH_LIMIT','CASH_LIMIT_TL_UTILIZATION','AVG_FACTORING_TL_RSK12','AVG_FACTORING_TL_RSK3','AVG_FACTORING_TL_RSK6','AVG_TTL_TL_CASH_RSK12','AVG_TTL_TL_CASH_RSK3','AVG_TTL_TL_CASH_RSK6','AVG_TTL_TL_CSH_LIMIT12','AVG_TTL_TL_CSH_LIMIT3','AVG_TTL_TL_CSH_LIMIT6','MAX_TTL_TL_LIMIT12','MAX_TTL_TL_LIMIT6','MAX_TTL_TL_LIMIT3','MAX_TTL_TL_NON_CSH_LIMIT12','MAX_TTL_TL_NON_CSH_LIMIT6','TL_NON_CASH_LIMIT_UTILIZATION','AVG_TTL_TL_LIMIT12','AVG_TTL_TL_LIMIT3','AVG_TTL_TL_LIMIT6','AVG_TTL_TL_NON_CASH_RSK12','AVG_TTL_TL_NON_CASH_RSK3','AVG_TTL_TL_NON_CSH_LIMIT12','AVG_TTL_TL_NON_CSH_LIMIT3','AVG_TTL_TL_NON_CSH_LIMIT6','AVG_TTL_TL_RSK12','AVG_TTL_TL_RSK6','AVG_TTL_TL_RSK3','MAX_FACTORING_TL_RSK12','MAX_FACTORING_TL_RSK6','MAX_FACTORING_TL_RSK3','MAX_INDM_TL_NON_CASH_LOANS12','MAX_INDM_TL_NON_CASH_LOANS6','MAX_INDM_TL_NON_CASH_LOANS3','MAX_TTL_TL_NON_CSH_LIMIT3','MAX_TTL_TL_RSK12','MAX_TTL_TL_RSK6','MAX_TTL_TL_RSK3','MIN_FACTORING_TL_RSK12','MIN_FACTORING_TL_RSK6','MIN_FACTORING_TL_RSK3','MIN_TTL_TL_CASH_RSK12','MIN_TTL_TL_CASH_RSK6','MIN_TTL_TL_CASH_RSK3','MIN_TTL_TL_CSH_LIMIT12','MIN_TTL_TL_CSH_LIMIT6','MIN_TTL_TL_CSH_LIMIT3','MIN_TTL_TL_LIMIT12','MIN_TTL_TL_LIMIT6','MIN_TTL_TL_LIMIT3','MIN_TTL_TL_NON_CSH_LIMIT12','MIN_TTL_TL_NON_CSH_LIMIT6','MIN_TTL_TL_NON_CSH_LIMIT6','MIN_TTL_TL_NON_CSH_LIMIT3','MIN_TTL_TL_RSK12','MIN_TTL_TL_RSK6','MIN_TTL_TL_RSK3','AVG_CASH_LIMIT_TL_UTIL12','AVG_CASH_LIMIT_TL_UTIL6','AVG_CASH_LIMIT_TL_UTIL3','AVG_TL_NON_CASH_LIMIT_UTIL12','AVG_TL_NON_CASH_LIMIT_UTIL6','AVG_TL_NON_CASH_LIMIT_UTIL3','CASH_LIMIT_TL_UTIL_GR12','CASH_LIMIT_TL_UTIL_GR6','CASH_LIMIT_TL_UTILIZATION','CASH_LIMIT_TL_UTLZTN_DNM_FRK6','CASH_LMT_TL_UTLZTN_DNM_FRK12','DT_MAX_FACTORING_TL_RSK12','DT_MAX_FACTORING_TL_RSK6','DT_MAX_FACTORING_TL_RSK12','DT_MAX_FACTORING_TL_RSK6','DT_MAX_FACTORING_TL_RSK3','DT_MAX_INDM_TL_NON_CSH_LOANS12','DT_MAX_INDM_TL_NON_CSH_LOANS6','DT_MAX_INDM_TL_NON_CSH_LOANS3','DT_MAX_TTL_TL_CASH_RSK12','DT_MAX_TTL_TL_CASH_RSK6','DT_MAX_TTL_TL_CASH_RSK3','DT_MAX_TTL_TL_CSH_LIMIT12','DT_MAX_TTL_TL_CSH_LIMIT6','DT_MAX_TTL_TL_CSH_LIMIT3','DT_MAX_TTL_TL_LIMIT12','DT_MAX_TTL_TL_LIMIT6','DT_MAX_TTL_TL_LIMIT3','DT_MAX_TTL_TL_NON_CASH_RSK12','DT_MAX_TTL_TL_NON_CASH_RSK6','DT_MAX_TTL_TL_NON_CASH_RSK3','DT_MAX_TTL_TL_NON_CSH_LMT12','DT_MAX_TTL_TL_NON_CSH_LMT6','DT_MAX_TTL_TL_NON_CSH_LMT3','DT_MAX_TTL_TL_RSK12','DT_MAX_TTL_TL_RSK6','DT_MAX_TTL_TL_RSK3','DT_MIN_FACTORING_TL_RSK12','DT_MIN_FACTORING_TL_RSK6','DT_MIN_FACTORING_TL_RSK3','DT_MIN_INDM_TL_NON_CSH_LOANS12','DT_MIN_INDM_TL_NON_CSH_LOANS12','DT_MIN_INDM_TL_NON_CSH_LOANS6','DT_MIN_INDM_TL_NON_CSH_LOANS3','DT_MIN_TL_NON_CASH_LMT_UTIL12','DT_MIN_TL_NON_CASH_LMT_UTIL6','DT_MIN_TL_NON_CASH_LMT_UTIL3','DT_MIN_TTL_TL_CASH_RSK12','DT_MIN_TTL_TL_CASH_RSK6','DT_MIN_TTL_TL_CASH_RSK3','DT_MIN_TTL_TL_CSH_LIMIT12','DT_MIN_TTL_TL_CSH_LIMIT6','DT_MIN_TTL_TL_CSH_LIMIT3','DT_MIN_TTL_TL_LIMIT12','DT_MIN_TTL_TL_LIMIT6','DT_MIN_TTL_TL_LIMIT3','DT_MIN_TTL_TL_NON_CASH_RSK12','DT_MIN_TTL_TL_NON_CASH_RSK6','DT_MIN_TTL_TL_NON_CASH_RSK3','DT_MIN_TTL_TL_NON_CSH_LMT12','DT_MIN_TTL_TL_NON_CSH_LMT6','DT_MIN_TTL_TL_NON_CSH_LMT3','DT_MIN_TTL_TL_RSK12','DT_MIN_TTL_TL_RSK6','DT_MIN_TTL_TL_RSK3','FACTORING_TL_RSK_GR6','MAX_CASH_LIMIT_TL_UTIL12','MAX_CASH_LIMIT_TL_UTIL6','MAX_CASH_LIMIT_TL_UTIL3','MAX_TL_NON_CASH_LIMIT_UTIL12','MAX_TL_NON_CASH_LIMIT_UTIL6','MAX_TL_NON_CASH_LIMIT_UTIL3','MAX_TTL_TL_NON_CASH_RSK12','MAX_TTL_TL_NON_CASH_RSK6','MAX_TTL_TL_NON_CASH_RSK3','MIN_CASH_LIMIT_TL_UTIL12','MIN_CASH_LIMIT_TL_UTIL6','MIN_CASH_LIMIT_TL_UTIL3','MIN_TL_NON_CASH_LIMIT_UTIL12','MIN_TL_NON_CASH_LIMIT_UTIL6','MIN_TL_NON_CASH_LIMIT_UTIL3','MIN_TTL_TL_NON_CASH_RSK12','MIN_TTL_TL_NON_CASH_RSK6','MIN_TTL_TL_NON_CASH_RSK3','STD_TL_NON_CASH_LIMIT_UTIL12','STDDEV_TTL_TL_CSH_LIMIT12','STDDEV_TTL_TL_LIMIT12','STDDEV_TTL_TL_NON_CASH_RSK12','STDDEV_TTL_TL_NON_CSH_LIMIT12','STDDEV_TTL_TL_RSK12','TL_NN_CSH_LMT_UTZTN_DNM_FRK12','TL_NON_CASH_LIMIT_UTIL_GR12','TL_NON_CASH_LIMIT_UTIL_GR6','TL_NON_CASH_LIMIT_UTILIZATION','TL_TOTAL_CASH_RSK_DNM_FRK12','TOTAL_TL_CASH_LIMIT','TOTAL_TL_CASH_RSK','TOTAL_TL_CASH_RSK_GR12','TOTAL_TL_CASH_RSK_GR6','TOTAL_TL_CSH_LIMIT_GR12','TOTAL_TL_CSH_LIMIT_GR6','TOTAL_TL_LIMIT','TOTAL_TL_LIMIT_GR12','TOTAL_TL_LIMIT_GR6','TOTAL_TL_LIMIT_UTILIZATION','TOTAL_TL_NON_CASH_LIMIT','TOTAL_TL_NON_CASH_RSK','TOTAL_TL_NON_CASH_RSK_GR12','TOTAL_TL_NON_CASH_RSK_GR6','TOTAL_TL_NON_CSH_LIMIT_GR12','TOTAL_TL_NON_CSH_LIMIT_GR6','TOTAL_TL_RSK','TOTAL_TL_RSK_GR12','TOTAL_TL_RSK_GR6','TTL_TL_LMT_UTLZTN_DNM_FRK12'],axis=1)\n","a43f38ca":"corres = Data.corr()\nprint(corres)","399beaa2":"msno.heatmap(Data, figsize=(20,20))#g\u00f6rsel olarak missing valuelar\nplt.show()\n","fc03c7cc":"msno.matrix(Data)\nmsno.bar(Data,fontsize=10,figsize=(50,50))","81f647bf":"data_credict=Data.loc[Data['DEFAULT_FLAG'] ==0] #.iloc[:20000,:]\nnon_credict=Data.loc[Data['DEFAULT_FLAG'] ==1]#.iloc[:1000,:]\n","42aeae79":"msno.matrix(data_credict)\nmsno.bar(data_credict,fontsize=10,figsize=(50,50))\n# yak\u015fla\u015f\u0131k 20000 den sonraki verilerde bo\u015f de\u011ferler olduk\u00e7a fazla","049ccce2":"msno.matrix(non_credict) #yakla\u015f\u0131k 1000 sonras\u0131 bo\u015f\nmsno.bar(non_credict,fontsize=10,figsize=(50,50))\nplt.show()\n","5565b766":"data_credict=Data.loc[Data['DEFAULT_FLAG'] ==0].iloc[:20000,:]\nnon_credict=Data.loc[Data['DEFAULT_FLAG'] ==1].iloc[:1200,:]","821a9663":"msno.matrix(data_credict)\nmsno.bar(data_credict,fontsize=10,figsize=(50,50))","4dd5b625":"msno.matrix(non_credict) #yakla\u015f\u0131k 1000 sonras\u0131 bo\u015f\nmsno.bar(non_credict,fontsize=10,figsize=(50,50))\nplt.show()\n","96287d15":"DataX=pd.concat([data_credict,non_credict],axis=0)\nDataX.DEFAULT_FLAG.value_counts()\n","00b18bc0":"null_data_sum =DataX.isnull().sum()*100\/(len(DataX))\nprint(null_data_sum)","26f1765a":"df_miss_val_count_unsort = pd.DataFrame(data=null_data_sum, columns=['rate'])\ndf_miss_val_count_unsort.head()","b11b69d6":"n_most_missing =((df_miss_val_count_unsort.rate.values >50)==True).sum()\nprint('%50 si bos olan kolon sayisi',n_most_missing)","4f97916c":"df_miss_val_count_unsort['rate'].value_counts()\ndf_miss_val_count = pd.DataFrame(data=null_data_sum, columns=['rate']).sort_values(by=['rate'],ascending=False)[:n_most_missing]\nprint(df_miss_val_count)","7bc56172":"Data2=DataX.drop(columns=df_miss_val_count.index.values)","aaa27502":"print(Data2.shape)\n","e422b038":"null_data_sum2 =Data2.isnull().sum()*100\/(len(Data2))\nprint(null_data_sum2)","adfeee28":"msno.matrix(Data2)\nmsno.bar(Data2,fontsize=10,figsize=(50,50))\nplt.show()\n","7bf826be":"from statsmodels.imputation import mice\n\nimp = mice.MICEData(Data2,perturbation_method='hot deck')\nData2=imp.data\nData3=Data2\nprint(Data2.isnull().sum())\n","c2eebacd":"msno.bar(Data2,fontsize=10,figsize=(50,50))\nmsno.matrix(Data2)\nplt.show()","4531e531":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nids=Data2.PRIMARY_KEY\nflag=Data2.DEFAULT_FLAG\nData2.drop(['PRIMARY_KEY','DEFAULT_FLAG'],inplace=True,axis=1)\n\ncolumns=Data2.columns.values\ndata_scaler=scaler.fit_transform(Data2)\n","1ed98e21":"Data2=pd.DataFrame(data_scaler,columns=columns)\nData2.head()","29f102b7":"Data2['PRIMARY_KEY']=ids\nData2['DEFAULT_FLAG']=flag","bcbb3233":"Data2['DEFAULT_FLAG'].value_counts()","caf1dd22":"Data2.head()","a8ce417c":"plt.figure(1, figsize=(4,4))\nData2['DEFAULT_FLAG'].value_counts().plot.pie(autopct=\"%1.1f%%\")\nplt.show()","85068947":"X=Data2.iloc[:,:-1]\ny=Data2.iloc[:,-1:]\n","a3d6b4c3":"y.head()\n#X.head()\nX.tail()\nX.shape","22c6443a":"X.head()\n#y.head()","ffe8782d":"colors = ['#ff6200' if v == 0 else '#f7f7f7' for v in Data2.DEFAULT_FLAG]\nkwarg_params = {'linewidth': 1, 'edgecolor': 'black'}\nfig = plt.Figure(figsize=(30,30))\nplt.scatter(Data2.AVG_TTL_ACCRD_INT_AMT12, Data2.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('unblance data AVG_TTL_ACCRD_INT_AMT12-TOTAL_RSK')\nplt.show()\nplt.scatter(Data2.PRIMARY_KEY, Data2.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('unbalance data TOTAL_RSK')\nplt.show()\nplt.scatter(Data2.AVG_TTL_CASH_RSK12, Data2.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('unbalance AVG_TTL_CASH_RSK12-TOTAL_RSK')\nplt.show()\n","5e45fd1e":"#from imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\n","4999f7dc":"rus = RandomUnderSampler(random_state=10)\ncolumns=X.columns.values\nX_resampled, y_resampled = rus.fit_resample(X, y)\nX_resampled=pd.DataFrame(X_resampled,columns=columns)\ny_resampled=pd.DataFrame(y_resampled,columns=['DEFAULT_FLAG'])\n","8dbf7730":"X_resampled.head()","58885789":"Data4=pd.concat([y_resampled,X_resampled],axis=1)\ntype(Data4)\nData4.shape","2b96c1ce":"Data4.head()","5da020c7":"Data4.tail()","9380aa6f":"Data4['DEFAULT_FLAG'].value_counts()","15ca2d3e":"colors = ['#ff6200' if v == 0 else '#f7f7f7' for v in Data4.DEFAULT_FLAG]\nkwarg_params = {'linewidth': 1, 'edgecolor': 'black'}\nfig = plt.Figure(figsize=(30,30))\nplt.scatter(Data4.AVG_TTL_ACCRD_INT_AMT12, Data4.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('balance data AVG_TTL_ACCRD_INT_AMT12-TOTAL_RSK')\nplt.show()\nplt.scatter(Data4.PRIMARY_KEY, Data4.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('balance data TOTAL_RSK')\nplt.show()\nplt.scatter(Data4.AVG_TTL_CASH_RSK12, Data4.TOTAL_RSK,c=colors, **kwarg_params)\nplt.title('balance AVG_TTL_CASH_RSK12-TOTAL_RSK')\nplt.show()\n","59be83ed":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X_resampled,y_resampled, test_size =0.3,random_state =10)\n","f8b1f683":"X_test\n#y_test.tail()","aa43c0b4":"X_train.tail()","e93821c0":"finaly=X_test.iloc[:,-1:]\nfinaly","3ab9ad00":"#idstest=X_test.PRIMARY_KEY.values\n#idstrain=X_train.PRIMARY_KEY\n\nX_train.drop(['PRIMARY_KEY'],inplace=True,axis=1)\nX_test.drop(['PRIMARY_KEY'],inplace=True,axis=1)\n","4a7f893f":"X_test.head()","14ad3ace":"#type(idstest)\n","fa75da7a":"#### XGBRegressor","eb4ead33":"#### LogisticRegression","1fb179e7":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression()\nlog_reg.fit(X_train,y_train)\n","57a9ddd6":"print(\"LogisticRegression score\",log_reg.score(X_test,y_test))","089c1161":"#from sklearn.model_selection import GridSearchCV\n#grid = {\"C\":np.logspace(-3,3,7),\"penalty\" :[\"l1\",\"l2\"]}\n#logreg_cv = GridSearchCV(log_reg,grid,cv=10)\n#logreg_cv.fit(X_train,y_train)\n#print(\"LogisticRegression en iyi hyperlar\",logreg_cv.best_params_) #l1 10.0 print(\"LogisticRegression en iyi score\",logreg_cv.best_score_) #0.67\n#log_reg2 = LogisticRegression(C=10,penalty =\"l1\") log_reg2.fit(X_train,y_train) print(\"LogisticRegression score\",log_reg2.score(X_test,y_test))","02dec5b1":"from sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\n\n\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = knn ,X=X_train, y=y_train, cv=10 )\nprint(\"dogruluk\",np.mean(accuracies)) #0.63\nprint(\"dogruluk\",np.std(accuracies))\ny_pred_knn = knn.predict_proba(X_test)[:, 1]\nfpr_knn, tpr_knn, _ = roc_curve(y_test, y_pred_knn)\n\n","c2ceee0d":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import cross_val_score\nclf = DecisionTreeClassifier(max_depth=None, min_samples_split=2,random_state=0)\nscores = cross_val_score(clf, X_train, y_train, cv=5)\nscores.mean()","9f782ca4":"from sklearn.ensemble import RandomForestClassifier\nc= RandomForestClassifier(n_estimators=10, max_depth=None,min_samples_split=2, random_state=0)\nscores = cross_val_score(c, X_train, y_train, cv=5)\nscores.mean()  ","9303fa84":"from sklearn.svm import SVC\nsvc = SVC(kernel='poly')\nsvc.fit(X_train,y_train)\n\ny_predq = svc.predict(X_test)\nprint(\"DecisionTreeClassifier accurc:\",svc.score(X_test,y_test))\n","2323653d":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=50, criterion = 'gini',random_state=40) #entropy\nrfc.fit(X_train,y_train)\n\ny_pred4 = rfc.predict(X_test)\nprint(\"DecisionTreeClassifier accurc:\",rfc.score(X_test,y_test))","965dc06b":"from sklearn.decomposition import PCA\n\npca =PCA(n_components=20,whiten=True)\npca_x=pca.fit_transform(X_resampled.values)\nprint(\"varyans\" ,sum(pca.explained_variance_ratio_))\n    \n\n","c42c367a":"x_pca=pd.DataFrame(pca_x,columns=[\n 'PC5','PC1','PC2','PC3','PC4','PC5','PC1','PC2','PC3','PC4','PC5'\n'PC5','PC1','PC2','PC3','PC4','PC5','PC1','PC2','PC3','PC4'])\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(x_pca,y_resampled, test_size =0.3,random_state =42)\nlog_reg2 = LogisticRegression()\nlog_reg2.fit(X_train,y_train)\ny_p = log_reg2.predict(X_test)\nprint(\"LogisticRegression score\",log_reg2.score(X_test,y_test))\n","dc789610":"from sklearn.decomposition import PCA\n\npca =PCA(n_components=1,whiten=True)\nxscore=pca.fit_transform(X_test.values)\nprint(\"varyans\" ,sum(pca.explained_variance_ratio_))\n    \n","125ca24a":"xscore\n\n","cd485237":"from sklearn.metrics import confusion_matrix\ncm1= confusion_matrix(y_test,y_p)\ncm1","7c72a654":"rfc = RandomForestClassifier(n_estimators=40, criterion = 'gini',random_state=40) #entropy\nrfc.fit(X_train,y_train)\npredrfc = log_reg2.predict(X_test)\nprint(\"random forestClassifier accurc:\",rfc.score(X_test,y_test))","7966f921":"from sklearn.metrics import roc_curve\ny_pred_rf = rfc.predict_proba(X_test)[:, 1]\nfpr_rf_lm, tpr_rf_lm, _ = roc_curve(y_test, y_pred_rf)","3414a8bb":"plt.figure(1)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr_rf_lm, tpr_rf_lm, label='random-f')\nplt.plot(fpr_knn, tpr_knn, label='knn')\n#plt.plot(fpr_rf, tpr_rf, label='RF')\n#plt.plot(fpr_rf_lm, tpr_rf_lm, label='RF + LR')\n#plt.plot(fpr_grd, tpr_grd, label='GBT')\n#lt.plot(fpr_grd_lm, tpr_grd_lm, label='GBT + LR')\nplt.xlabel('False positive rate')\nplt.ylabel('True positive rate')\nplt.title('ROC curve')\nplt.legend(loc='best')\nplt.show()","5ee84b28":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,predrfc)\ncm","e4269e02":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = rfc ,X=X_train, y=y_train, cv=10 )\nprint(\"dogruluk\",np.mean(accuracies)) \nprint(\"std\",np.std(accuracies))","00a72fa0":"\nfinaly['T']=xscore\nfinaly['Score']=predrfc\nfinaly['ff']=finaly['T']+finaly['Score']\nfinaly['ff']=finaly['ff']*-100\nfinaly.drop(['Score','T'],inplace=True,axis=1)\n","708870ad":"finaly","32c5ae7d":"dddd=finaly.values\nimport tableprint\n#import numpy as np\n\ndata = dddd\nheaders = ['PRIMARY_KEY', 'SCORE']\n\ntableprint.table(data, headers)","7b0947f4":"def credictscore( str ):\n    import pandas as pd\n    #k.append(str)\n    str2 = ''.join(str)\n    str2=str2 +'.csv'\n    Data = pd.read_csv(str2,sep=(';'))\n    Data=Data.drop(['SHARE_OF_TL_FACTORING_RISK','DT_MAX_TL_NON_CASH_LMT_UTIL3','DT_MAX_TL_NON_CASH_LMT_UTIL12','MAX_TTL_TL_CSH_LIMIT12','STDDEV_TTL_TL_CASH_RSK12','TTL_INDM_TL_NONCASH_LOAN','MAX_TTL_TL_CASH_RSK6','MAX_TTL_TL_CASH_RSK3','MAX_TTL_TL_CASH_RSK12','STDDEV_FACTORING_TL_RSK12','AVG_TTL_TL_NON_CASH_RSK6','MAX_TTL_TL_CSH_LIMIT6','MAX_TTL_TL_CSH_LIMIT3','TOTAL_TL_RSK','TOTAL_TL_CASH_RSK','TOTAL_TL_NON_CASH_RSK','TOTAL_TL_LIMIT','TOTAL_TL_CASH_LIMIT','TOTAL_TL_NON_CASH_LIMIT','CASH_LIMIT_TL_UTILIZATION','AVG_FACTORING_TL_RSK12','AVG_FACTORING_TL_RSK3','AVG_FACTORING_TL_RSK6','AVG_TTL_TL_CASH_RSK12','AVG_TTL_TL_CASH_RSK3','AVG_TTL_TL_CASH_RSK6','AVG_TTL_TL_CSH_LIMIT12','AVG_TTL_TL_CSH_LIMIT3','AVG_TTL_TL_CSH_LIMIT6','MAX_TTL_TL_LIMIT12','MAX_TTL_TL_LIMIT6','MAX_TTL_TL_LIMIT3','MAX_TTL_TL_NON_CSH_LIMIT12','MAX_TTL_TL_NON_CSH_LIMIT6','TL_NON_CASH_LIMIT_UTILIZATION','AVG_TTL_TL_LIMIT12','AVG_TTL_TL_LIMIT3','AVG_TTL_TL_LIMIT6','AVG_TTL_TL_NON_CASH_RSK12','AVG_TTL_TL_NON_CASH_RSK3','AVG_TTL_TL_NON_CSH_LIMIT12','AVG_TTL_TL_NON_CSH_LIMIT3','AVG_TTL_TL_NON_CSH_LIMIT6','AVG_TTL_TL_RSK12','AVG_TTL_TL_RSK6','AVG_TTL_TL_RSK3','MAX_FACTORING_TL_RSK12','MAX_FACTORING_TL_RSK6','MAX_FACTORING_TL_RSK3','MAX_INDM_TL_NON_CASH_LOANS12','MAX_INDM_TL_NON_CASH_LOANS6','MAX_INDM_TL_NON_CASH_LOANS3','MAX_TTL_TL_NON_CSH_LIMIT3','MAX_TTL_TL_RSK12','MAX_TTL_TL_RSK6','MAX_TTL_TL_RSK3','MIN_FACTORING_TL_RSK12','MIN_FACTORING_TL_RSK6','MIN_FACTORING_TL_RSK3','MIN_TTL_TL_CASH_RSK12','MIN_TTL_TL_CASH_RSK6','MIN_TTL_TL_CASH_RSK3','MIN_TTL_TL_CSH_LIMIT12','MIN_TTL_TL_CSH_LIMIT6','MIN_TTL_TL_CSH_LIMIT3','MIN_TTL_TL_LIMIT12','MIN_TTL_TL_LIMIT6','MIN_TTL_TL_LIMIT3','MIN_TTL_TL_NON_CSH_LIMIT12','MIN_TTL_TL_NON_CSH_LIMIT6','MIN_TTL_TL_NON_CSH_LIMIT6','MIN_TTL_TL_NON_CSH_LIMIT3','MIN_TTL_TL_RSK12','MIN_TTL_TL_RSK6','MIN_TTL_TL_RSK3','AVG_CASH_LIMIT_TL_UTIL12','AVG_CASH_LIMIT_TL_UTIL6','AVG_CASH_LIMIT_TL_UTIL3','AVG_TL_NON_CASH_LIMIT_UTIL12','AVG_TL_NON_CASH_LIMIT_UTIL6','AVG_TL_NON_CASH_LIMIT_UTIL3','CASH_LIMIT_TL_UTIL_GR12','CASH_LIMIT_TL_UTIL_GR6','CASH_LIMIT_TL_UTILIZATION','CASH_LIMIT_TL_UTLZTN_DNM_FRK6','CASH_LMT_TL_UTLZTN_DNM_FRK12','DT_MAX_FACTORING_TL_RSK12','DT_MAX_FACTORING_TL_RSK6','DT_MAX_FACTORING_TL_RSK12','DT_MAX_FACTORING_TL_RSK6','DT_MAX_FACTORING_TL_RSK3','DT_MAX_INDM_TL_NON_CSH_LOANS12','DT_MAX_INDM_TL_NON_CSH_LOANS6','DT_MAX_INDM_TL_NON_CSH_LOANS3','DT_MAX_TTL_TL_CASH_RSK12','DT_MAX_TTL_TL_CASH_RSK6','DT_MAX_TTL_TL_CASH_RSK3','DT_MAX_TTL_TL_CSH_LIMIT12','DT_MAX_TTL_TL_CSH_LIMIT6','DT_MAX_TTL_TL_CSH_LIMIT3','DT_MAX_TTL_TL_LIMIT12','DT_MAX_TTL_TL_LIMIT6','DT_MAX_TTL_TL_LIMIT3','DT_MAX_TTL_TL_NON_CASH_RSK12','DT_MAX_TTL_TL_NON_CASH_RSK6','DT_MAX_TTL_TL_NON_CASH_RSK3','DT_MAX_TTL_TL_NON_CSH_LMT12','DT_MAX_TTL_TL_NON_CSH_LMT6','DT_MAX_TTL_TL_NON_CSH_LMT3','DT_MAX_TTL_TL_RSK12','DT_MAX_TTL_TL_RSK6','DT_MAX_TTL_TL_RSK3','DT_MIN_FACTORING_TL_RSK12','DT_MIN_FACTORING_TL_RSK6','DT_MIN_FACTORING_TL_RSK3','DT_MIN_INDM_TL_NON_CSH_LOANS12','DT_MIN_INDM_TL_NON_CSH_LOANS12','DT_MIN_INDM_TL_NON_CSH_LOANS6','DT_MIN_INDM_TL_NON_CSH_LOANS3','DT_MIN_TL_NON_CASH_LMT_UTIL12','DT_MIN_TL_NON_CASH_LMT_UTIL6','DT_MIN_TL_NON_CASH_LMT_UTIL3','DT_MIN_TTL_TL_CASH_RSK12','DT_MIN_TTL_TL_CASH_RSK6','DT_MIN_TTL_TL_CASH_RSK3','DT_MIN_TTL_TL_CSH_LIMIT12','DT_MIN_TTL_TL_CSH_LIMIT6','DT_MIN_TTL_TL_CSH_LIMIT3','DT_MIN_TTL_TL_LIMIT12','DT_MIN_TTL_TL_LIMIT6','DT_MIN_TTL_TL_LIMIT3','DT_MIN_TTL_TL_NON_CASH_RSK12','DT_MIN_TTL_TL_NON_CASH_RSK6','DT_MIN_TTL_TL_NON_CASH_RSK3','DT_MIN_TTL_TL_NON_CSH_LMT12','DT_MIN_TTL_TL_NON_CSH_LMT6','DT_MIN_TTL_TL_NON_CSH_LMT3','DT_MIN_TTL_TL_RSK12','DT_MIN_TTL_TL_RSK6','DT_MIN_TTL_TL_RSK3','FACTORING_TL_RSK_GR6','MAX_CASH_LIMIT_TL_UTIL12','MAX_CASH_LIMIT_TL_UTIL6','MAX_CASH_LIMIT_TL_UTIL3','MAX_TL_NON_CASH_LIMIT_UTIL12','MAX_TL_NON_CASH_LIMIT_UTIL6','MAX_TL_NON_CASH_LIMIT_UTIL3','MAX_TTL_TL_NON_CASH_RSK12','MAX_TTL_TL_NON_CASH_RSK6','MAX_TTL_TL_NON_CASH_RSK3','MIN_CASH_LIMIT_TL_UTIL12','MIN_CASH_LIMIT_TL_UTIL6','MIN_CASH_LIMIT_TL_UTIL3','MIN_TL_NON_CASH_LIMIT_UTIL12','MIN_TL_NON_CASH_LIMIT_UTIL6','MIN_TL_NON_CASH_LIMIT_UTIL3','MIN_TTL_TL_NON_CASH_RSK12','MIN_TTL_TL_NON_CASH_RSK6','MIN_TTL_TL_NON_CASH_RSK3','STD_TL_NON_CASH_LIMIT_UTIL12','STDDEV_TTL_TL_CSH_LIMIT12','STDDEV_TTL_TL_LIMIT12','STDDEV_TTL_TL_NON_CASH_RSK12','STDDEV_TTL_TL_NON_CSH_LIMIT12','STDDEV_TTL_TL_RSK12','TL_NN_CSH_LMT_UTZTN_DNM_FRK12','TL_NON_CASH_LIMIT_UTIL_GR12','TL_NON_CASH_LIMIT_UTIL_GR6','TL_NON_CASH_LIMIT_UTILIZATION','TL_TOTAL_CASH_RSK_DNM_FRK12','TOTAL_TL_CASH_LIMIT','TOTAL_TL_CASH_RSK','TOTAL_TL_CASH_RSK_GR12','TOTAL_TL_CASH_RSK_GR6','TOTAL_TL_CSH_LIMIT_GR12','TOTAL_TL_CSH_LIMIT_GR6','TOTAL_TL_LIMIT','TOTAL_TL_LIMIT_GR12','TOTAL_TL_LIMIT_GR6','TOTAL_TL_LIMIT_UTILIZATION','TOTAL_TL_NON_CASH_LIMIT','TOTAL_TL_NON_CASH_RSK','TOTAL_TL_NON_CASH_RSK_GR12','TOTAL_TL_NON_CASH_RSK_GR6','TOTAL_TL_NON_CSH_LIMIT_GR12','TOTAL_TL_NON_CSH_LIMIT_GR6','TOTAL_TL_RSK','TOTAL_TL_RSK_GR12','TOTAL_TL_RSK_GR6','TTL_TL_LMT_UTLZTN_DNM_FRK12'],axis=1)\n    data_credict=Data.loc[Data['DEFAULT_FLAG'] ==0].iloc[:20000,:]\n    non_credict=Data.loc[Data['DEFAULT_FLAG'] ==1].iloc[:1200,:]\n    DataX=pd.concat([data_credict,non_credict],axis=0)\n    null_data_sum =DataX.isnull().sum()*100\/(len(DataX))\n    df_miss_val_count_unsort = pd.DataFrame(data=null_data_sum, columns=['rate'])\n    n_most_missing =((df_miss_val_count_unsort.rate.values >50)==True).sum()\n    df_miss_val_count_unsort['rate'].value_counts()\n    df_miss_val_count = pd.DataFrame(data=null_data_sum, columns=['rate']).sort_values(by=['rate'],ascending=False)[:n_most_missing]\n    Data2=DataX.drop(columns=df_miss_val_count.index.values)\n    from statsmodels.imputation import mice\n\n    imp = mice.MICEData(Data2,perturbation_method='hot deck')\n    Data2=imp.data\n    from sklearn.preprocessing import MinMaxScaler\n    scaler = MinMaxScaler()\n    ids=Data2.PRIMARY_KEY\n    flag=Data2.DEFAULT_FLAG\n    Data2.drop(['PRIMARY_KEY','DEFAULT_FLAG'],inplace=True,axis=1)\n\n    columns=Data2.columns.values\n    data_scaler=scaler.fit_transform(Data2)\n    Data2=pd.DataFrame(data_scaler,columns=columns)\n    \n    Data2['PRIMARY_KEY']=ids\n    Data2['DEFAULT_FLAG']=flag\n    \n    X=Data2.iloc[:,:-1]\n    y=Data2.iloc[:,-1:]\n    from imblearn.under_sampling import RandomUnderSampler\n    rus = RandomUnderSampler(random_state=10)\n    columns=X.columns.values\n    X_resampled, y_resampled = rus.fit_resample(X, y)\n    X_resampled=pd.DataFrame(X_resampled,columns=columns)\n    y_resampled=pd.DataFrame(y_resampled,columns=['DEFAULT_FLAG'])\n    Data4=pd.concat([y_resampled,X_resampled],axis=1)\n    from sklearn.model_selection import train_test_split\n    X_train,X_test,y_train,y_test = train_test_split(X_resampled,y_resampled, test_size =0.3,random_state =10)\n    finaly=X_test.iloc[:,-1:]\n    \n    X_train.drop(['PRIMARY_KEY'],inplace=True,axis=1)\n    X_test.drop(['PRIMARY_KEY'],inplace=True,axis=1)\n   \n    pca =PCA(n_components=1,whiten=True)\n    xscore=pca.fit_transform(X_test.values)\n    rfc = RandomForestClassifier(n_estimators=40, criterion = 'gini',random_state=40) #entropy\n    rfc.fit(X_train,y_train)\n    predrfc = rfc.predict(X_test)\n    \n    finaly['T']=xscore\n    finaly['Score']=predrfc\n    finaly['ff']=finaly['T']+finaly['Score']\n    finaly['ff']=finaly['ff']*-100\n    finaly.drop(['Score','T'],inplace=True,axis=1)\n    data1=finaly.values\n    import tableprint\n    #import numpy as np\n\n    data = data1\n    headers = ['PRIMARY_KEY', 'SCORE']\n\n    tableprint.table(data1, headers)\n    return  tableprint.table(data1, headers);","b506e8ee":"credictscore(\"INGDatathonData2018\")\n#\u00e7apraz skorlama","66f5a150":" ### Final ad\u0131m\u0131na kadar olan b\u00f6l\u00fcmler verinin incelenmesi,i\u015flenmesi ad\u0131m\u0131d\u0131r.Final b\u00f6l\u00fcm\u00fcndeki fonksiyon yar\u0131\u015fma sorusunun cevab\u0131d\u0131r\n","110af1ac":"%50 si bo\u015f olan kolonlar drop edilecek","efed0f76":"# Final","df4f7747":"### normalize i\u015flemi","4592afe6":"##### Kalan bo\u015f de\u011ferler doldurulacak","a71fe007":"### Missing values","86f78586":"%50 den fazlas\u0131 bo\u015f olan kolonlar drop edildi","b7bcf8bd":" ## preprocessing","92de520c":"### Train-Test Split","5849b433":"!pip install pandas==0.23.0\n!pip install numpy==1.14.3","27e898df":"# MODELLEME","ec1d17ec":"### F\u0130NAL FONKS\u0130YONU","7ba62252":"### unbalance data \u00e7\u00f6z\u00fcm\u00fc","40ece2fb":"####  missing valuelar"}}