{"cell_type":{"6e174eaf":"code","57891e65":"code","c293a989":"code","5f5c149c":"code","792b3e2c":"code","d1755ef7":"code","1e2d0cc1":"code","ce48ae9c":"code","f68f9bb2":"code","4050416a":"code","101ae86a":"code","127ffa1c":"markdown","c06dbfc7":"markdown","3edf14b2":"markdown","45e6ee52":"markdown","125fb08b":"markdown","0acd247f":"markdown","124fd4ac":"markdown","a0211795":"markdown","9c729a59":"markdown"},"source":{"6e174eaf":"import shutil\nshutil.unpack_archive('..\/input\/dicom-files-to-rgb-mag-edge1-edge2-512x512\/SIIM-FISABIO-RSNA-JPEG.zip', '.\/')","57891e65":"'''\nWe write this code with the help of PyTorch demo:\n    https:\/\/pytorch.org\/tutorials\/beginner\/transfer_learning_tutorial.html\n  \n'''\n\nfrom __future__ import print_function, division\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sn\nimport pandas as pd\n\nimport random\n\n\nRANDOM_SEED = 0\n\ntorch.manual_seed(RANDOM_SEED)\ntorch.cuda.manual_seed(RANDOM_SEED)\ntorch.cuda.manual_seed_all(RANDOM_SEED)\nnp.random.seed(RANDOM_SEED)\nrandom.seed(RANDOM_SEED)\n\n\nplt.ion()   # interactive mode\n\n# Data augmentation and normalization for training\n# Just normalization for validation\ndata_transforms = {\n    'train': transforms.Compose([\n        transforms.CenterCrop((470,470)),\n        transforms.RandomRotation(10,),\n        transforms.RandomPerspective(),\n        transforms.RandomHorizontalFlip(),\n        transforms.RandomGrayscale(),\n        transforms.CenterCrop((448,448)),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n    'val': transforms.Compose([\n        transforms.Resize(448),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n    'test': transforms.Compose([\n        transforms.Resize(448),\n        transforms.ToTensor(),\n        transforms.Normalize(mean=[0.507, 0.487, 0.441], std=[0.267, 0.256, 0.276])\n    ]),\n}\n\ndata_dir = '.\/'\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n                                          data_transforms[x])\n                  for x in ['train', 'val', 'test']}\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=16,\n                                             shuffle=True, num_workers=0)\n              for x in ['train', 'val', 'test']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val', 'test']}\nclass_names = image_datasets['train'].classes\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n#plt.rcParams['font.size'] = '12'\n#plt.rcParams['figure.dpi'] = 600\n\ndef imshow(inp, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt.imshow(inp)\n    plt.savefig('Augmented_data_train.pdf')\n    if title is not None:\n        plt.title(title)\n    plt.pause(0.001)  # pause a bit so that plots are updated\n\n\n# Get a batch of training data\ninputs, classes = next(iter(dataloaders['train']))\n\n\n# Make a grid from batch\nout = torchvision.utils.make_grid(inputs)\n\nimshow(out)#, title=[class_names[x] for x in classes])","c293a989":"class NullNet(nn.Module): \n    def __init__(self):\n        super(NullNet, self).__init__()\n    def forward(self, x):\n        return x\n    \n#model_ft = models.vgg11_bn(pretrained=True)\n#num_ftrs = model_ft.classifier[0].in_features\n\nmodel_ft = models.wide_resnet101_2(pretrained=True)\nnum_ftrs = model_ft.fc.in_features\n\nhalf_in_size = round(num_ftrs\/2)\nlayer_width = 20\nNum_class=2\n\n\n'''\nChanging the fully connected layer \n'''\nmodelFC = nn.Linear(num_ftrs, Num_class)\nmodel_ft.fc = NullNet()","5f5c149c":"def train_model_phase(model, model_conv, criterion, optimizer, scheduler, phase):\n    \n    if phase == 'train':\n        model.train()  # Set model to training mode\n    else:\n        model.eval()   # Set model to evaluate mode\n\n    running_loss = 0.0\n    running_corrects = 0\n\n    # Iterate over data.\n    for inputs, labels in dataloaders[phase]:\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward\n        # track history if only in train\n        with torch.set_grad_enabled(phase == 'train'):\n            Features = model_conv(inputs)\n            outputs = model(Features)\n            _, preds = torch.max(outputs, 1)\n            loss = criterion(outputs, labels)\n\n            # backward + optimize only if in training phase\n            if phase == 'train':\n                loss.backward()\n                optimizer.step()\n                \n\n        # statistics\n        running_loss += loss.item() * inputs.size(0)\n        running_corrects += torch.sum(preds == labels.data)\n        \n    if phase == 'train':\n        scheduler.step()\n\n    epoch_loss = running_loss \/ dataset_sizes[phase]\n    epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n\n    \n    \n    return model, epoch_loss, epoch_acc\n\ndef train_model(model, model_conv, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n    test_token = 0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch + 1, num_epochs))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val', 'test']: \n             \n            \n            '''\n            Test when a better validation result is found\n            '''\n            if test_token ==0 and phase == 'test':\n                continue\n            test_token = 0\n            \n            model, epoch_loss, epoch_acc = train_model_phase(model, model_conv, criterion, optimizer, scheduler, phase)\n            \n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc))\n\n\n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n                test_token = 1\n\n\n        print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model","792b3e2c":"model_ft = model_ft.to(device)\nmodelFC = modelFC.to(device)\n\ncriterion = nn.CrossEntropyLoss()\n\n# Observe that all parameters are being optimized\noptimizer_ft = optim.SGD(modelFC.parameters(), lr=0.01, momentum=0.9)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nmodelFC = train_model(modelFC, model_ft, criterion, optimizer_ft, exp_lr_scheduler,num_epochs=5)","d1755ef7":"optimizer_ft = optim.SGD(modelFC.parameters(), lr=0.001, momentum=0.9)\n\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)\n\nmodelFC = train_model(modelFC, model_ft, criterion, optimizer_ft, exp_lr_scheduler,num_epochs=5)\n\nmodel_ft.fc = modelFC","1e2d0cc1":"y_pred = []\ny_true = []\noutput_all =[]\n\n# iterate over test data\nfor inputs, labels in dataloaders['train']:\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n        \n        output = model_ft(inputs) # Feed Network\n        output_all.extend(output.data.cpu().numpy())\n\n        output = (torch.max(torch.exp(output), 1)[1]).data.cpu().numpy()\n        y_pred.extend(output) # Save Prediction\n        \n        labels = labels.data.cpu().numpy()\n        y_true.extend(labels) # Save Truth\n\n# constant for classes\nclasses = ('none', 'opacity')\n\n# Build confusion matrix\ncf_matrix = confusion_matrix(y_true, y_pred)\ndf_cm = pd.DataFrame(cf_matrix, index = [i for i in classes],\n                     columns = [i for i in classes])\n\n\n\nplt.figure(figsize = (4,1),dpi=150)\nplt.rcParams['font.size'] = '16'\nsn.heatmap(df_cm, annot=True, fmt=\".0f\")\n\nwith open('train.npy', 'wb') as f:\n    np.save(f, output_all)\n    np.save(f, y_true)\n#with open('test.npy', 'rb') as f:\n#    a = np.load(f)\n#    b = np.load(f)\n#print(a, b)","ce48ae9c":"y_pred = []\ny_true = []\noutput_all =[]\n\n# iterate over test data\nfor inputs, labels in dataloaders['val']:\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n        \n        output = model_ft(inputs) # Feed Network\n        output_all.extend(output.data.cpu().numpy())\n\n        output = (torch.max(torch.exp(output), 1)[1]).data.cpu().numpy()\n        y_pred.extend(output) # Save Prediction\n        \n        labels = labels.data.cpu().numpy()\n        y_true.extend(labels) # Save Truth\n\n# Build confusion matrix\ncf_matrix = confusion_matrix(y_true, y_pred)\ndf_cm = pd.DataFrame(cf_matrix, index = [i for i in classes],\n                     columns = [i for i in classes])\n\n\n\nplt.figure(figsize = (4,1),dpi=150)\nplt.rcParams['font.size'] = '16'\nsn.heatmap(df_cm, annot=True, fmt=\".0f\")\n\nwith open('val.npy', 'wb') as f:\n    np.save(f, output_all)\n    np.save(f, y_true)","f68f9bb2":"y_pred = []\ny_true = []\noutput_all =[]\n\n# iterate over test data\nfor inputs, labels in dataloaders['test']:\n        inputs = inputs.to(device)\n        labels = labels.to(device)\n        \n        output = model_ft(inputs) # Feed Network\n        output_all.extend(output.data.cpu().numpy())\n\n        output = (torch.max(torch.exp(output), 1)[1]).data.cpu().numpy()\n        y_pred.extend(output) # Save Prediction\n        \n        labels = labels.data.cpu().numpy()\n        y_true.extend(labels) # Save Truth\n        \n# Build confusion matrix\ncf_matrix = confusion_matrix(y_true, y_pred)\ndf_cm = pd.DataFrame(cf_matrix, index = [i for i in classes],\n                     columns = [i for i in classes])\n\n\n\nplt.figure(figsize = (4,1),dpi=150)\nplt.rcParams['font.size'] = '16'\nsn.heatmap(df_cm, annot=True, fmt=\".0f\")\n\nwith open('test.npy', 'wb') as f:\n    np.save(f, output_all)\n    np.save(f, y_true)","4050416a":"PATH = \".\/best_model_fc.pt\"\ntorch.save(modelFC.state_dict(), PATH)\n\n\n'''\n#Guideline for loading model in future \n\nmodel_ft2 = models.wide_resnet101_2(pretrained=True)\nmodel_fc = nn.Linear(num_ftrs, 2)\nmodel_fc = model_fc.to(device)\n\nmodel_fc.load_state_dict(torch.load(PATH, map_location=device))\n\nmodel_ft2.fc =  NullNet()\n\ninp = inp.to(device)\nFeature = model_ft2(inp)\nprint (\"Feature Values:\",Feature)\nPosterior = model_fc(Feature)\nprint(Posterior)\n\n'''","101ae86a":"shutil.rmtree('.\/train')\nshutil.rmtree('.\/val')\nshutil.rmtree('.\/test')","127ffa1c":"# Confusion Matrix","c06dbfc7":"# Training lr = 0.001","3edf14b2":"# Saving FC","45e6ee52":"# Extracting Files","125fb08b":"# Training lr = 0.01","0acd247f":"# Models","124fd4ac":"# Modules and DataLoader","a0211795":"# Training Function","9c729a59":"# Delete Extracted Images"}}