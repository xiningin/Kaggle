{"cell_type":{"5e744f41":"code","8edcd176":"code","59a68ac1":"code","60a7ee31":"code","76b34a20":"code","e2e19727":"code","7a91a40b":"code","9bb69b36":"code","8603b7bb":"code","50663fec":"code","6a23233f":"code","ecf64f4f":"code","911eb67c":"code","b21b96dd":"code","07f94a23":"code","65f69dff":"code","8bc873dd":"code","183ae4d4":"code","a7a1623c":"code","10a73d81":"code","ddf97542":"code","1efd839d":"code","a82fccf4":"code","54a4e895":"code","a259001f":"code","a637f6b6":"code","b527c406":"code","a44c13b6":"code","8ebabec1":"code","5a20b359":"code","bc134315":"code","ce12bffc":"code","906e55d2":"code","aca8b0c5":"code","798d23e9":"code","80ea34cd":"code","5df51e45":"code","a1388509":"code","1dfdc611":"code","dffcf397":"code","cc3a8b88":"code","294ff283":"code","7e57ba75":"code","56a8955d":"code","04e26ef3":"code","4907f4a1":"code","5deba91d":"code","415352ae":"code","cab6a56b":"markdown","cf7a4a32":"markdown","a425dc8e":"markdown","b427d606":"markdown","d1ec8670":"markdown","823aee03":"markdown","815c1174":"markdown","88aef154":"markdown","154f8bb0":"markdown","17dad639":"markdown","d502da4a":"markdown","c38d6688":"markdown","5c48b21d":"markdown","d89df830":"markdown","7ba27840":"markdown","3353bc96":"markdown","b3af870d":"markdown","8a8ae2e3":"markdown","dac2ff52":"markdown","af28f0b0":"markdown","14fb5401":"markdown","bf6d4ec9":"markdown","2089d0e4":"markdown","352495c6":"markdown","091bcd96":"markdown","9dbaf82d":"markdown"},"source":{"5e744f41":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8edcd176":"#Modules for EDA\nimport numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn')\n\n#Modules for Machine Learning\nfrom tensorflow import keras\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\n\nfrom imblearn.over_sampling import SMOTE\n%matplotlib inline","59a68ac1":"df = pd.read_csv('..\/input\/deep-learning-az-ann\/Churn_Modelling.csv')\ndf.shape","60a7ee31":"df.info()","76b34a20":"df.dtypes","e2e19727":"df.dtypes[df.dtypes == 'object']","7a91a40b":"df.head()","9bb69b36":"df.drop(['RowNumber','CustomerId','Surname'],axis=1,inplace=True)\ndf.head()","8603b7bb":"df['Exited'].value_counts().plot(kind='pie',autopct='%.2f')\nplt.title(\"Exited Ratio\")\nplt.xlabel(f\"Total: {df['Exited'].value_counts().sum()}\")\nplt.show()","50663fec":"category_data = ['NumOfProducts','HasCrCard','IsActiveMember']\nfor data in category_data:\n    d = df[[data, 'Exited']]\n    sns.countplot(data=d,x=d[data],hue='Exited')\n    plt.title(f\"{data} data with respect to Exited\")\n    plt.show()","6a23233f":"sns.histplot(data=df[['Age','Exited']],x='Age',hue='Exited',element='poly')\nplt.title(\"Age Group\")\nplt.show()","ecf64f4f":"sns.histplot(data=df[['CreditScore','Exited']],x='CreditScore',hue='Exited',element='poly')\nplt.title(\"CreditScore\")\nplt.show()","911eb67c":"sns.countplot(data=df[['Geography','Exited']],x='Geography')\nplt.title(\"Countries Frequency\")\nplt.show()","b21b96dd":"sns.countplot(data=df[['Geography','Exited']],x='Geography',hue='Exited')\nplt.title('Countries Exit Ratio')\nplt.show()","07f94a23":"sns.histplot(data=df[['Balance','Exited']],x='Balance',hue='Exited',element='poly')\nplt.show()","65f69dff":"sns.histplot(data=df[['EstimatedSalary','Exited']],x='EstimatedSalary',hue='Exited',element='poly')\nplt.show()","8bc873dd":"sns.relplot(data=df[['EstimatedSalary','Balance','Exited']],x='Balance',y='EstimatedSalary',hue='Exited',palette='rocket')\nplt.title(\"EstimatedSalary vs Balance\")\nplt.show()","183ae4d4":"sns.countplot(x=df['Gender'])\nplt.title('Gender Ratio')\nplt.show()","a7a1623c":"sns.histplot(data=df[['Gender','Balance']],x='Balance',hue='Gender',element='poly')\nplt.show()","10a73d81":"sns.countplot(data=df[['Gender','Exited']],x='Gender',hue='Exited')\nplt.show()","ddf97542":"sns.countplot(data=df[['Geography','Gender']],x='Geography',hue='Gender')\nplt.title(\"Gender Ratio in each country\")\nplt.show()","1efd839d":"category_data = ['NumOfProducts','HasCrCard','IsActiveMember']\nfor data in category_data:\n    d = df[[data, 'Gender']]\n    sns.countplot(data=d,x=d[data],hue='Gender')\n    plt.title(f\"{data} data with respect to Gender\")\n    plt.show()","a82fccf4":"cols_to_encode = ['Geography', 'Gender']\ndummies = pd.get_dummies(df[cols_to_encode],drop_first=True)\ndummies.sample(5)","54a4e895":"#Dropping encoded columns\ndf.drop(cols_to_encode,axis=1,inplace=True)\ndf.head()","a259001f":"cols_to_scale = ['CreditScore','Age','Tenure','Balance','NumOfProducts','EstimatedSalary']\nscale = MinMaxScaler()\nscale.fit(df[cols_to_scale])\nscalled = scale.transform(df[cols_to_scale])","a637f6b6":"i = 0\nfor col in cols_to_scale:\n    df[col] = scalled[:,i]\n    i += 1","b527c406":"df.head()","a44c13b6":"new_df = pd.concat([df,dummies],axis=1)\nnew_df.shape","8ebabec1":"new_df.head()","5a20b359":"x, y = new_df.drop('Exited',axis=1),new_df['Exited']\nx.shape,y.shape","bc134315":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","ce12bffc":"y_train.value_counts() #:( imbalanced","906e55d2":"model = keras.Sequential([\n    keras.layers.Dense(11, input_shape=(11,),activation='relu'),\n    keras.layers.Dense(1,activation='sigmoid')\n])\n\nmodel.compile(\n        optimizer='adam',\n        loss='binary_crossentropy',\n        metrics=['accuracy']\n    )","aca8b0c5":"model.fit(x_train, y_train, epochs=25)","798d23e9":"model.evaluate(x_test,y_test)","80ea34cd":"def predict(model,x):\n    pred = model.predict(x)\n    pred[pred >= 0.5] = 1\n    pred[pred < 0.5] = 0\n    return pred.flatten()\ndef report(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true,y_pred)\n    plt.figure(figsize=(7,7))\n    sns.heatmap(cm,annot=True,fmt='g')\n    plt.title(title)\n    plt.show()\n    print(\"Classification report\")\n    print(classification_report(y_true,y_pred))","5df51e45":"y_pred_test = predict(model,x_test)\ny_pred_train = predict(model,x_train)","a1388509":"report(y_test,y_pred_test,'Test Data')","1dfdc611":"report(y_train,y_pred_train,'Train Data')","dffcf397":"smote = SMOTE(sampling_strategy='minority')\nsmote_data,target = smote.fit_resample(x,y)\nsmote_data.shape","cc3a8b88":"target.shape","294ff283":"target.value_counts().plot(kind='pie',autopct=\"%.2f\")\nplt.show()","7e57ba75":"x_train2, x_test2, y_train2, y_test2 = train_test_split(smote_data, target, test_size=0.3)\nx_train2.shape, x_test2.shape, y_train2.shape, y_test2.shape","56a8955d":"def mymodel():\n    model = keras.Sequential([\n        keras.layers.Dense(11, input_shape=(11,),activation='relu'),\n        keras.layers.Dense(1,activation='sigmoid')\n    ])\n\n    model.compile(\n            optimizer=tf.optimizers.Adam(learning_rate=0.01),\n            loss='binary_crossentropy',\n            metrics=['accuracy']\n        )\n    return model","04e26ef3":"model2 = mymodel()\nmodel2.fit(x_train2,y_train2,epochs=100,batch_size=64)","4907f4a1":"model2.evaluate(x_test2,y_test2)","5deba91d":"report(y_test2,predict(model2,x_test2),'Test 2 Data')","415352ae":"report(y_train2,predict(model2,x_train2),'Train 2 Data')","cab6a56b":"### **One Hot Encoding**","cf7a4a32":"# **Country**","a425dc8e":"### **Feature Scaling**","b427d606":"### **Females are more likely to exit than male (Vice versa)**","d1ec8670":"**Data is imbalanced :(**","823aee03":"# **Overfitting :(**","815c1174":"# **Balance vs EstimatedSalary**","88aef154":"# **Training vs Testing**","154f8bb0":"**Dropping RowNumber, CustomerID and Surname Column**","17dad639":"# **Which Gender has more balance?**","d502da4a":"# **Overfitting problem solved but not Accuracy**","c38d6688":"**No NaN values**","5c48b21d":"# **Gender Ratio in each country**","d89df830":"# **EDA**","7ba27840":"# **Feature Scaling**","3353bc96":"# **Credit Score**","b3af870d":"# **Gender Exit Ratio**","8a8ae2e3":"# **Model Building and predicions**","dac2ff52":"## **Oversampling the data using SMOTE**","af28f0b0":"# **Countries Exit Ratio**","14fb5401":"# **Age and Exited**","bf6d4ec9":"**Scalled data**","2089d0e4":"# **Gender Analysis**","352495c6":"# **Splitting and Traing**","091bcd96":"# **NumOfProducts, HasCrCard and IsActiveMember**","9dbaf82d":"# **Exited Ratio**"}}