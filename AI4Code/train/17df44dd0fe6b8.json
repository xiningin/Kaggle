{"cell_type":{"11a27f6c":"code","26b7ebde":"code","e810faa4":"code","b79673b9":"code","828ff7d7":"code","1bd37542":"code","3664f466":"code","b0cfe522":"code","be684292":"code","3f84fedc":"code","79422cdb":"code","ea95a05e":"code","a06b21a3":"code","e25f94bb":"code","fa1c5a19":"code","71cbdfbc":"code","0a2b8cc3":"code","eb9b310f":"code","a9844b46":"code","ceb1edb1":"code","3d8888ba":"code","62d42718":"code","36e621ec":"code","f7ec2e38":"code","71a2293c":"code","87edd995":"code","a3241e0a":"code","6d454321":"code","e78e9255":"code","b48f1d0e":"code","abe9ed6d":"code","33663978":"code","b266ed7e":"code","0eba3886":"markdown"},"source":{"11a27f6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26b7ebde":"# IMPORTING LIBRARY\nimport numpy as np \nimport seaborn as sns \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","e810faa4":"# Getting dataset\n\ntrain_data=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data=pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n#This displays first 5 data from the training-dataset\ntrain_data.head()\n#observation: the dataset consists of categorical variable and a few numerical variables.","b79673b9":"train_data.tail()\n#displaying bottom 5 data from the training-dataset","828ff7d7":"# VISUALIZE DATASET\n\n#Finding dimensions\nprint(\"number of rows in traning set\",train_data.shape[0])\nprint(\"number of columns in training set\",train_data.shape[1])\nprint(\"number of rows in test set\",test_data.shape[0])\nprint(\"number of columns in test set\",test_data.shape[1])","1bd37542":"train_data.isna().sum()\n#Here Age,Cabin and Embarked have missing values","3664f466":"test_data.isna().sum()\n#here Age,Fare,Cabin have missing values","b0cfe522":"# Data preprocessing\nsns.heatmap(train_data.corr(),annot=True)\n#Age is correlated to PCLASS the most with correlation coff=-0.37.","be684292":"df=train_data.groupby('Pclass',as_index=False)['Age'].median()\ndf.head()","3f84fedc":"#Replacing missing vales in training set\n#AGE\nfor i,row in train_data.iterrows():\n    if(np.isnan(train_data['Age'][i])==True):\n        if(train_data['Pclass'][i]==1):\n            train_data['Age'][i]=37.0\n        elif(train_data['Pclass'][i]==2):\n            train_data['Age'][i]=29.0\n        else:\n            train_data['Age'][i]=24.0\n#CABIN (It has maximum number of missing values and hence it will NOT be worth a feature to work on. Still we will replace\n#the missing values with its mode)\ntrain_data['Cabin']=train_data['Cabin'].fillna(train_data['Cabin'].mode()[0])\n#EMBARKED\n#For this we have two missing values each having equivalent Fare of $80 and same PClass,same ticketnumber this\n#means that they had to board from the same station.And on google search, I got to know that she boarded from SouthHampton.\n#This means that Both of them boarded from SouthHampton.\ntrain_data['Embarked']=train_data['Embarked'].fillna('S')","79422cdb":"train_data.info()\n#no missing values in training set","ea95a05e":"df=test_data.groupby('Pclass',as_index=False)['Age'].median()\ndf.head()","a06b21a3":"#Replacing Missing Values in Test Set\n#AGE\nfor i,row in test_data.iterrows():\n    if(np.isnan(test_data['Age'][i])==True):\n        if(test_data['Pclass'][i]==1):\n            test_data['Age'][i]=42.0\n        elif(test_data['Pclass'][i]==2):\n            test_data['Age'][i]=26.0\n        else:\n            test_data['Age'][i]=24.0\n#CABIN\ntest_data['Cabin']=test_data['Cabin'].fillna(test_data['Cabin'].mode()[0])\n#FARE\n#We can see that Fare is most correlated to Pclass and hence it should be computed by median of fare grouped by pclass.\n#As the person belonged to class 3, we will take median of class 3.","e25f94bb":"df=test_data.groupby('Pclass',as_index=False)['Fare'].median()\ndf.head()","fa1c5a19":"test_data['Fare']=test_data['Fare'].fillna(7.89)\ntest_data.isna().sum()\n#NO MISSING VALUES","71cbdfbc":"# DATA VISUALIZATION\nplt.figure(figsize=(12,5))\nplt.subplot(121)\ntrain_data['Survived'].value_counts().plot.pie(autopct='%0.2f%%',colors=['red','green'])\nplt.subplot(122)\nplt.title('Survival distribution')\ntrain_data.Survived.value_counts().plot(kind='bar',color=['red','green'])","0a2b8cc3":"sns.pairplot(train_data)","eb9b310f":"plt.figure(figsize=(12,5))\nplt.subplot(121)\ntrain_data['Sex'].value_counts().plot.pie(autopct='%0.2f%%',colors=['blue','pink'])\nplt.subplot(122)\nsns.countplot(x = 'Survived',data = train_data,hue = 'Sex',palette=['blue','pink'])\nplt.xlabel('Survived')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Sex')\nplt.legend()","a9844b46":"plt.figure(figsize=(12,5))\nplt.subplot(121)\ntrain_data['Pclass'].value_counts().plot.pie(autopct='%0.2f%%',colors=['blue','orange','green'])\nplt.subplot(122)\nsns.countplot(x = 'Survived',data = train_data,hue = 'Pclass',palette=['orange','green','blue'])\nplt.xlabel('Survived')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Socio economic class of Passenger')\nplt.legend()","ceb1edb1":"plt.figure(figsize=(12,5))\nplt.subplot(121)\ntrain_data['Embarked'].value_counts().plot.pie(autopct='%0.2f%%',colors=['blue','orange','green'])\nplt.subplot(122)\nsns.countplot(x = 'Survived',data = train_data,hue = 'Embarked',palette=['blue','orange','green'])\nplt.xlabel('Survived')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Embarkment of Passenger')\nplt.legend()","3d8888ba":"plt.figure(figsize=(12,6))\nsns.countplot(x = 'SibSp',data = train_data,hue = 'Survived',palette=['red','green'])\nplt.xlabel('SibSp')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Number of Sibling\/spouse with Passenger')\nplt.legend()\n\nplt.figure(figsize=(12,6))\nsns.countplot(x = 'Parch',data = train_data,hue = 'Survived',palette=['red','green'])\nplt.xlabel('Parent\/Children')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Number of Parent\/Children with Passenger')\nplt.legend()","62d42718":"sns.countplot(x = 'Parch',data = train_data,hue = 'Survived',palette=['red','green'])\nplt.xlabel('Parent\/Children')\nplt.ylabel('Passenger Count')\nplt.title('Survival distribution based on Number of Parent\/Children with Passenger')\nplt.legend()","36e621ec":"plt.figure(figsize=(16,4))\nplt.title('Age vs survival')\nsns.distplot(train_data['Age'][train_data['Survived']==0],bins=20,kde=True,hist=False,kde_kws={\"color\": \"red\", \"label\": \"Not Survived\"})\nsns.distplot(train_data['Age'][train_data['Survived']==1],bins=20,kde=True,hist=False,kde_kws={\"color\": \"green\", \"label\": \"Survived\"})","f7ec2e38":"plt.figure(figsize=(16,4))\nplt.title('Fare vs survival')\nsns.distplot(train_data['Fare'][train_data['Survived']==0],bins=10,kde=True,hist=False,kde_kws={\"color\": \"red\", \"label\": \"Not Survived\"})\nsns.distplot(train_data['Fare'][train_data['Survived']==1],bins=10,kde=True,hist=False,kde_kws={\"color\": \"green\", \"label\": \"Survived\"})","71a2293c":"sns.scatterplot(data=train_data,x='Age',y='Survived',hue='Survived')","87edd995":"traindata=train_data.drop(['Name','Ticket','Cabin','PassengerId','Fare','SibSp','Age'],axis=1)\ntestdata=test_data.drop(['Name','Ticket','Cabin','PassengerId','Fare','SibSp','Age'],axis=1)\ntraindata.head()","a3241e0a":"X_train=traindata.iloc[:,1:]\ny_train=traindata.iloc[:,0]\nX_train=pd.get_dummies(X_train,['Sex','Embarked'])\nX_test=testdata.iloc[:,:]\nX_test=pd.get_dummies(X_test,['Sex','Embarked'])","6d454321":"from sklearn.svm import SVC\nclassifier=SVC(kernel='rbf')\nclassifier.fit(X_train,y_train)","e78e9255":"y_train_predict=classifier.predict(X_train)\ny_test=classifier.predict(X_test)","b48f1d0e":"from sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,classification_report\nprint('Accuracy for training set is: ',accuracy_score(y_train,y_train_predict))\nprint('AUC SCORE for training set: ',roc_auc_score(y_train,y_train_predict))\n","abe9ed6d":"cm=confusion_matrix(y_train,y_train_predict)\nsns.heatmap(cm,annot=True)","33663978":"print(classification_report(y_train,y_train_predict))","b266ed7e":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': y_test})\noutput.to_csv('svc-titanic.csv', index=False)\n","0eba3886":"Modelling using Support Vector Classifier "}}