{"cell_type":{"e6a0b77b":"code","861ba780":"code","11a4d9f0":"code","3e2bed5f":"code","fefcb706":"code","04b0bdd2":"code","8a0006c2":"code","816d2b8f":"code","5b130263":"code","e55fdd87":"code","26154564":"code","7e050e50":"code","521aa1f0":"code","a21788d0":"code","2cae2a67":"code","7a23e5f7":"code","f0d31ef2":"code","82e178bf":"code","63eb9092":"code","30e294b2":"code","44aa6a02":"code","307c79f8":"code","3b2ccae6":"code","5ad49f49":"markdown","a59c2138":"markdown","c221727c":"markdown","702c0f0b":"markdown","2f331861":"markdown","c64b8baa":"markdown","bf24eb8b":"markdown","07437aaf":"markdown","016f1c26":"markdown","2c8e566b":"markdown"},"source":{"e6a0b77b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.","861ba780":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pprint import pprint\nfrom sklearn import metrics\nimport shap\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","11a4d9f0":"df = pd.read_csv(\"..\/input\/train.csv\")\ndf.head()","3e2bed5f":"df = df.drop([\"PassengerId\", \"Ticket\",\"Cabin\", \"Name\"], axis=1)\ndf.head()","fefcb706":"sexdict = {\"male\":0, \"female\":1}\ndf.Sex = df.Sex.replace(sexdict)\n\n","04b0bdd2":"df=df.dropna()","8a0006c2":"df = df.query('Embarked == \"C\" |Embarked == \"S\"')","816d2b8f":"df=pd.get_dummies(df, [\"Embarked\"])\ndf.head()","5b130263":"sns.distplot(df.Age)\nplt.title(\"Distribution of Passenger's Age\")","e55fdd87":"sns.distplot(df.Fare)\nplt.title(\"Distribution of ticket price\")","26154564":"\nsns.heatmap(df.corr(),annot=True,cmap=\"YlGnBu\")","7e050e50":"pclass = df.groupby(\"Pclass\").mean()\nsns.barplot(pclass.index, pclass.Survived)\nplt.title(\"Survival vs Pclass\")","521aa1f0":"training_variables = df.columns.tolist() \nobjective_variable = training_variables[0]\ndel training_variables[0]  ","a21788d0":"X = df[training_variables]\ny = df[objective_variable]","2cae2a67":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.30)\nX_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size =0.5)\n\nprint(X_train.shape, y_train.shape)\nprint(X_val.shape, y_val.shape)\nprint(X_test.shape, y_test.shape)","7a23e5f7":"\nroc_auc_scoreDict1 = {}\nmax_depth = [1, 3, 5]\nlearning_rate= [0.5, 0.1, 0.01]\nsubsample = [0.1, 0.5, 1]\nfor d in max_depth:\n    \n    roc_auc_scoreDict1[d] = {}\n    for l in learning_rate:\n        roc_auc_scoreDict1[d][l] = {}\n        for s in subsample:\n            print(\"%d, %f, %f \" % (d, l, s))\n            clf2 = XGBClassifier(max_depth= d, learning_rate=l,n_estimators=5000, subsample=s, n_jobs=-1)\n            clf2.fit(X_train, y_train, verbose=100, early_stopping_rounds=50, eval_set=[(X_train,y_train),(X_val,y_val)])\n            y_pred = clf2.predict_proba(X_val[:])[:, 1]\n            \n            roc_auc_scoreDict1[d][l][s] = roc_auc_score(y_val, y_pred)\nprint(roc_auc_scoreDict1)\n    ","f0d31ef2":"from pprint import pprint\npprint(roc_auc_scoreDict1)","82e178bf":"reform = {(level1_key, level2_key, level3_key): values\n            for level1_key, level2_dict in roc_auc_scoreDict1.items()\n             for level2_key, level3_dict in level2_dict.items()\n              for level3_key, values      in level3_dict.items()}\nreform","63eb9092":"tipos = ['-', '-.', '--']\ncolors = ['r', 'b', 'g']\ni = 0\nj = 0\nfor d in max_depth:\n    tipo = tipos[i]\n    for l in learning_rate:\n        aucs = [reform[(d, l ,s)] for s in subsample]\n        plt.plot(subsample, aucs, linestyle=tipo, color = colors[j], label='d=%s, l=%s' % (d, l))\n        j += 1\n    i += 1\n    j = 0\n    \nplt.xlabel('subsample')\nplt.ylabel('auc')\nplt.legend()","30e294b2":"best_clf = XGBClassifier(max_depth=5, learning_rate=0.1, subsample=0.5, n_estimators=10000 ,n_jobs=-1)\nbest_clf.fit(X_train, y_train,verbose=100,early_stopping_rounds=100,eval_set=[(X_train,y_train),(X_val,y_val)])","44aa6a02":"ypred_test = best_clf.predict(X_test)\n\n\nscore = roc_auc_score(y_test, ypred_test)\nscore","307c79f8":"fpr, tpr,_= roc_curve(y_test, ypred_test)\nplt.figure()\nplt.plot(fpr, tpr, color='red',lw=2, label='ROC curve')\nplt.plot([0, 1], [0, 1], color='blue', lw=2, linestyle='--')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC curve')\nplt.show()","3b2ccae6":"explainer = shap.TreeExplainer(best_clf)\nshap_values = explainer.shap_values(X)\nshap.summary_plot(shap_values, X)","5ad49f49":"Biggest concentration of ticket prices are between 0 and 50 pounds","a59c2138":"# Best classifier training","c221727c":"# ML starts here","702c0f0b":"We can see that the higest correlations with our objective variable **Survived** are **Sex** and **Pclass**. We can also notice that **Pclass** and **Fare** have a high correlation relatively.","2f331861":"## Exploratory Data Analysis","c64b8baa":"## Dependencies","bf24eb8b":"# Reading Data","07437aaf":"Biggest concentration of Titanic's passenger's age is around 20 and 30 years old","016f1c26":"Note: Remember that higher class means class 3, which is the lowest. \n# Conclusion\n#### We can see that Females were prone to survive as well as younger passenger(children) and those who were in a 1st class.","2c8e566b":"Best Classifier is the one with max_depht=5, learning_rate= 0.1 and subsample=0.5 "}}