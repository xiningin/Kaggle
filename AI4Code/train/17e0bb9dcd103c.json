{"cell_type":{"78bcc9b3":"code","e9266bcb":"code","ed265125":"code","277d0740":"code","3cf0443c":"code","537589ce":"code","55736c60":"code","1273f429":"code","7718eb91":"code","36dd958c":"code","fb3879e4":"code","60660c1d":"code","a604bc6f":"code","4ce6f7fc":"code","5b8c611d":"code","c4c8f7ea":"code","7c850ad4":"code","c42e7e5c":"code","de850ef8":"code","e5511283":"code","f79e7134":"code","100a9104":"code","303d49e4":"code","d8540c8d":"code","9f4c8fa4":"code","dba98b55":"code","a27f196c":"code","1930bcc1":"code","47621274":"code","b2e1ffa7":"code","dc718635":"code","481e1437":"code","d65ed77d":"code","1cb6e5b4":"code","57963388":"code","0426f011":"code","008ff699":"code","e341a337":"code","4aab8bb9":"code","c82d2826":"code","b481658c":"code","c9011b9b":"code","2c525f58":"code","d150c8f1":"code","e11c235b":"code","90bcaf95":"code","c53a7cba":"code","071dcfda":"code","ee226375":"code","07efb5cf":"code","85145215":"code","ac9e9b41":"code","ac2f66ce":"code","f6b02006":"code","c2d4e956":"code","105689af":"code","2f6d7729":"code","ce49558f":"code","963b81a6":"code","fe93ea35":"markdown","a0457819":"markdown","76c70a6b":"markdown","f7fd7a01":"markdown","901f9c2b":"markdown","948e7ef2":"markdown","09793aab":"markdown","49908344":"markdown","63afc7d5":"markdown","f6de8f57":"markdown","a94698cb":"markdown","2b19f161":"markdown","e74ca84f":"markdown","40fd9a12":"markdown","b98f81ed":"markdown","cab5f8e0":"markdown","31b4a8c4":"markdown","3f2193bf":"markdown","02f8763f":"markdown","5fe31c02":"markdown","b1ad179d":"markdown","caa4b727":"markdown","446ed184":"markdown","ba906904":"markdown","2d77016d":"markdown","24fda40c":"markdown","58dd8da9":"markdown","2d760744":"markdown","da31c960":"markdown","b4173020":"markdown","dd266d66":"markdown","c65bc5b6":"markdown","9884dc22":"markdown","62682110":"markdown","2d8ff60c":"markdown","85a3eaee":"markdown","ebdd91ed":"markdown","0f42bbcf":"markdown","a7452564":"markdown","b42fc7d5":"markdown"},"source":{"78bcc9b3":"import numpy as np\nimport pandas as pd\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom scipy.integrate import odeint\nfrom scipy import integrate, optimize\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nimport warnings\nwarnings.filterwarnings('ignore')","e9266bcb":"pop = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\npop.head()","ed265125":"pop.rename(columns={'Country (or dependency)':'country',\n                   'Population (2020)':'population'\n                   }, inplace=True)","277d0740":"cleaned_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\/master\/covid_19_clean_complete.csv')\ncleaned_data.head()","3cf0443c":"cleaned_data.rename(columns={'Date': 'date', \n                     'Province\/State':'state',\n                     'Country\/Region':'country',\n                     'Confirmed': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)\n\n# cases \ncases = ['confirmed', 'deaths', 'recovered', 'active']\n\n# Active Case = confirmed - deaths - recovered\ncleaned_data['active'] = cleaned_data['confirmed'] - cleaned_data['deaths'] - cleaned_data['recovered']\n\n# replacing Mainland china with just China\ncleaned_data['country'] = cleaned_data['country'].replace('Mainland China', 'China')\n\n# filling missing values \ncleaned_data[['state']] = cleaned_data[['state']].fillna('')\ncleaned_data[cases] = cleaned_data[cases].fillna(0)\ndata = cleaned_data.copy()","537589ce":"data['date'] =pd.to_datetime(data['date'], infer_datetime_format=True)","55736c60":"print(\"External Data\")\nprint(f\"Earliest Entry: {data['date'].min()}\")\nprint(f\"Last Entry:     {data['date'].max()}\")\nprint(f\"Total Days:     {data['date'].max() - data['date'].min()}\")","1273f429":"us_data = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/imdevskp\/covid_19_jhu_data_web_scrap_and_cleaning\/master\/usa_county_wise.csv\")","7718eb91":"us_data.columns","36dd958c":"#Cleaning\nus_data.drop(['UID', 'iso2', 'iso3', 'code3', 'FIPS', 'Admin2','Lat','Long_', 'Combined_Key'], inplace=True, axis=1)\n\nus_data = us_data[~us_data.Province_State.str.match(\"Diamond Princess|Grand Princess|Recovered|Northern Mariana Islands|American Samoa\")]\n\nus_data.rename(columns={'Date': 'date', \n                     'Province_State':'state',\n                     'Country_Region':'country',\n                     'Confirmed': 'confirmed',\n                     'Deaths': 'deaths'\n                    }, inplace=True)\n\nus_data['date'] =pd.to_datetime(us_data['date'], infer_datetime_format=True)","fb3879e4":"us_data.head()","60660c1d":"ww_df = data.groupby('date')[['confirmed', 'deaths']].sum().reset_index()\nww_df['new_case'] = ww_df['confirmed'] - ww_df['confirmed'].shift(1)\nww_df.tail()","a604bc6f":"fig = px.line(ww_df, x=\"date\", y=\"confirmed\", title=\"Worldwide Confirmed Cases Over Time\")\nfig.show()","4ce6f7fc":"countries = data['country'].unique()\nprint(f'{len(countries)} countries are in dataset:\\n{countries}')","5b8c611d":"target_date = data['date'].max()\n\nprint('Date: ', target_date)\nfor i in [1, 10, 100, 1000, 10000]:\n    n_countries = len(data.query('(date == @target_date) & confirmed > @i'))\n    print(f'{n_countries} countries have more than {i} confirmed cases')","c4c8f7ea":"grouped_china = data[data['country'] == \"China\"].reset_index()\ngrouped_china_date = grouped_china.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_italy = data[data['country'] == \"Italy\"].reset_index()\ngrouped_italy_date = grouped_italy.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_us = data[data['country'] == \"US\"].reset_index()\ngrouped_us_date = grouped_us.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_spain = data[data['country'] == \"Spain\"].reset_index()\ngrouped_spain_date = grouped_spain.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_pak = data[data['country'] == \"Pakistan\"].reset_index()\ngrouped_pak_date = grouped_pak.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_ind = data[data['country'] == \"India\"].reset_index()\ngrouped_ind_date = grouped_ind.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()\n\ngrouped_rest = data[~data['country'].isin(['China', 'Italy', 'US', 'Spain', 'Pakistan', 'India'])].reset_index()\ngrouped_rest_date = grouped_rest.groupby('date')['date', 'confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()","7c850ad4":"plot_titles = ['China', 'Spain', 'Italy', 'USA', 'Pakistan', 'India', 'Rest of the World']\n\n\nfig = px.line(grouped_china_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[0].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_spain_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[1].upper()} Over Time\", \n              color_discrete_sequence=['#F61407'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_italy_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[2].upper()} Over Time\", \n              color_discrete_sequence=['#91C4F2'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_us_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[3].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_pak_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[4].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_ind_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[5].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_rest_date, x=\"date\", y=\"confirmed\", \n              title=f\"Confirmed Cases in {plot_titles[6].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()","c42e7e5c":"data['state'] = data['state'].fillna('')\ntemp = data[[col for col in data.columns if col != 'state']]\n\nlatest = temp[temp['date'] == max(temp['date'])].reset_index()\nlatest_grouped = latest.groupby('country')['confirmed', 'deaths'].sum().reset_index()","de850ef8":"fig = px.choropleth(latest_grouped, locations=\"country\", \n                    locationmode='country names', color=\"confirmed\", \n                    hover_name=\"country\", range_color=[1,5000], \n                    color_continuous_scale=\"peach\", \n                    title='Countries with Confirmed Cases')\nfig.show()","e5511283":"fig = px.bar(latest_grouped.sort_values('confirmed', ascending=False)[:20][::-1], \n             x='confirmed', y='country',\n             title='Confirmed Cases Worldwide', text='confirmed', height=1000, orientation='h')\nfig.show()","f79e7134":"usa_latest = us_data[us_data['date'] == max(us_data['date'])]\nusa_latest = usa_latest.groupby('state')['confirmed', 'deaths'].max().reset_index()\n\nfig = px.bar(usa_latest.sort_values('confirmed', ascending=False)[:10][::-1], \n             x='confirmed', y='state', color_discrete_sequence=['#D63230'],\n             title='Confirmed Cases in USA', text='confirmed', orientation='h')\nfig.show()","100a9104":"#ww_death_df = data.groupby('date')['deaths'].sum().reset_index()\nfig = px.line(ww_df, x=\"date\", y=\"deaths\", title=\"Worldwide Deaths Over Time\",\n             color_discrete_sequence=['#F42272'])\nfig.show()","303d49e4":"ww_df['mortality'] = ww_df['deaths'] \/ ww_df['confirmed']\n\nfig = px.line(ww_df, x=\"date\", y=\"mortality\", \n              title=\"Worldwide Mortality Rate Over Time\")\nfig.show()","d8540c8d":"plot_titles = ['China', 'Spain', 'Italy', 'USA', 'Pakistan', 'India', 'Rest of the World']\n\nfig = px.line(grouped_china_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[0].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_spain_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[1].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_italy_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[2].upper()} Over Time\", \n              color_discrete_sequence=['#91C4F2'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_us_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[3].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_pak_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[4].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_ind_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[5].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_rest_date, x=\"date\", y=\"deaths\", \n              title=f\"Deaths in {plot_titles[6].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()","9f4c8fa4":"fig = px.choropleth(latest_grouped, locations=\"country\", \n                    locationmode='country names', color=\"deaths\", \n                    hover_name=\"deaths\", range_color=[1,100], \n                    color_continuous_scale=\"peach\", \n                    title='Countries with Reported Deaths')\nfig.show()","dba98b55":"fig = px.bar(latest_grouped.sort_values('deaths', ascending=False)[:10][::-1], \n             x='deaths', y='country',\n             title='Confirmed Deaths Worldwide', text='deaths', orientation='h')\nfig.show()","a27f196c":"fig = px.bar(usa_latest.sort_values('deaths', ascending=False)[:5][::-1], \n             x='deaths', y='state', color_discrete_sequence=['#D63230'],\n             title='Deaths in USA', text='deaths', orientation='h')\nfig.show()","1930bcc1":"plot_titles = ['China', 'Spain', 'Italy', 'USA', 'Pakistan', 'India', 'Rest of the World']\n\nfig = px.line(grouped_china_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[0].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_spain_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[1].upper()} Over Time\", \n              color_discrete_sequence=['#F61067'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_italy_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[2].upper()} Over Time\", \n              color_discrete_sequence=['#91C4F2'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_us_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[3].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_pak_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[4].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_ind_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[5].upper()} Over Time\", \n              color_discrete_sequence=['#6F2DBD'],\n              height=500\n             )\nfig.show()\n\nfig = px.line(grouped_rest_date, x=\"date\", y=\"active\", \n              title=f\"Active Cases in {plot_titles[6].upper()} Over Time\", \n              color_discrete_sequence=['#FFDF64'],\n              height=500\n             )\nfig.show()","47621274":"cleaned_data['state'] = cleaned_data['state'].fillna('')\ntemp = cleaned_data[[col for col in cleaned_data.columns if col != 'state']]\n\nlatest = temp[temp['date'] == max(temp['date'])].reset_index()\nlatest_grouped = latest.groupby('country')['confirmed', 'deaths', 'active', 'recovered'].sum().reset_index()","b2e1ffa7":"fig = px.choropleth(latest_grouped, locations=\"country\", \n                    locationmode='country names', color=\"active\", \n                    hover_name=\"active\", range_color=[1,1000], \n                    color_continuous_scale=\"peach\", \n                    title='Active Cases Worldwide')\nfig.show()","dc718635":"fig = px.bar(latest_grouped.sort_values('active', ascending=False)[:10][::-1], \n             x='active', y='country',\n             title='Active Cases Worldwide', text='active', orientation='h')\nfig.show()","481e1437":"fig = px.bar(latest_grouped.sort_values('recovered', ascending=False)[:10][::-1], \n             x='recovered', y='country',\n             title='Recovered Cases Worldwide', text='recovered', orientation='h')\nfig.show()","d65ed77d":"cleaned_latest = cleaned_data[cleaned_data['date'] == max(cleaned_data['date'])]\nflg = cleaned_latest.groupby('country')['confirmed', 'deaths', 'recovered'].sum().reset_index()\n\nflg['mortalityRate'] = round((flg['deaths']\/flg['confirmed'])*100, 2)\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"mortalityRate\", ascending=False)[:10][::-1],\n             x = 'mortalityRate', y = 'country', \n             title='Deaths per 100 Confirmed Cases', text='mortalityRate', height=800, orientation='h',\n             color_discrete_sequence=['darkred']\n            )\nfig.show()","1cb6e5b4":"print(\"Countries with Lowest Mortality Rates\")\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('mortalityRate', ascending=True)[['country', 'confirmed','deaths']][:16]\ntemp.sort_values('confirmed', ascending=False)[['country', 'confirmed','deaths']][:20].style.background_gradient(cmap='Greens')","57963388":"flg['recoveryRate'] = round((flg['recovered']\/flg['confirmed'])*100, 2)\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('recoveryRate', ascending=False)\n\nfig = px.bar(temp.sort_values(by=\"recoveryRate\", ascending=False)[:10][::-1],\n             x = 'recoveryRate', y = 'country', \n             title='Recoveries per 100 Confirmed Cases', text='recoveryRate', height=800, orientation='h',\n             color_discrete_sequence=['#2ca02c']\n            )\nfig.show()","0426f011":"print(\"Countries with Worst Recovery Rates\")\ntemp = flg[flg['confirmed']>100]\ntemp = temp.sort_values('recoveryRate', ascending=True)[['country', 'confirmed','recovered']][:20]\ntemp.sort_values('confirmed', ascending=False)[['country', 'confirmed','recovered']][:20].style.background_gradient(cmap='Reds')","008ff699":"city_wise_data = pd.read_csv('..\/input\/pakistan-corona-virus-citywise-data\/PK COVID-19-3jun.csv')\ncity_wise_data.tail()","e341a337":"city_wise_data.rename(columns={'Date': 'date', \n                     'Province':'province',\n                     'City':'city',\n                     'Cases': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)","4aab8bb9":"grouped_data = city_wise_data.groupby('city')['date', 'confirmed', 'deaths','recovered'].sum().reset_index()","c82d2826":"fig = px.bar(grouped_data.sort_values('confirmed', ascending=False)[:10][::-1], \n             x='confirmed', y='city', color_discrete_sequence=['#D63230'],\n             title='Confirmed Cases So Far in Pakistan', text='confirmed', orientation='h')\nfig.show()","b481658c":"fig = px.bar(grouped_data.sort_values('recovered', ascending=False)[:10][::-1], \n             x='recovered', y='city', color_discrete_sequence=['#D63230'],\n             title='Recovered So Far in Pakistan', text='recovered', orientation='h')\nfig.show()","c9011b9b":"fig = px.bar(grouped_data.sort_values('deaths', ascending=False)[:10][::-1], \n             x='deaths', y='city', color_discrete_sequence=['#D63230'],\n             title='Deaths so far in Pakistan', text='deaths', orientation='h')\nfig.show()","2c525f58":"data['date'] = pd.to_datetime(data['date'])\ndata['Day_num'] = preprocessing.LabelEncoder().fit_transform(data.date)\n\ncovid_pop = pop[['country','population']]\n\ndf_pop = data.merge(covid_pop, left_on = ['country'], right_on = ['country'], how = 'left')\n\nna_countries = df_pop['country'][df_pop['population'].isnull()].unique()\n\ndf_pop = df_pop[~df_pop['country'].isin(na_countries)]","d150c8f1":"df_fin_selc = df_pop[['country','date','confirmed','recovered','deaths','Day_num','population']]","e11c235b":"comp_df_pk = df_fin_selc[df_fin_selc['country']=='Pakistan']\ncomp_df_pk = comp_df_pk.reset_index(drop = True)\ncomp_df_pk.head()","90bcaf95":"comp_df_pk['D'] = comp_df_pk['deaths']\ncomp_df_pk['R'] = comp_df_pk['recovered']\ncomp_df_pk['I'] = comp_df_pk['confirmed']- comp_df_pk['R'] - comp_df_pk['D']\ncomp_df_pk['S'] = comp_df_pk['population']-comp_df_pk['confirmed']\ncomp_df_pk.tail(3)","c53a7cba":"cond1 = comp_df_pk.I >= 1\ntest = comp_df_pk['Day_num'][(cond1)]\ntest.head(1)","071dcfda":"def SIRD_testmodel(y,t,bta,gmma, alpha, rho):\n    S, I, R, D = y\n    \n    dS_dt = -1*bta*I*S\/N\n    dI_dt = (bta*I*S\/N) -  (1-alpha)*gmma*I - alpha*rho*I\n    dR_dt = (1 - alpha)*gmma*I\n    dD_dt = alpha*rho*I\n    \n    return ([dS_dt, dI_dt, dR_dt, dD_dt])","ee226375":"#defining initial conditions\n\nN = 1500\nS00 = N - 2.0\nI00 = 2.0\nR00 = 0.0\nD00 =0.0\nbeta = 1.0 \ngamma = 1\/9 # first recovery observed after 9 days of 1st infection\nrho = 1\/12\nalpha = 0.25\n\nt = np.linspace(0,30,875)\n\nsol = odeint(SIRD_testmodel,[S00,I00,R00, D00],t,args = (beta,gamma, alpha, rho))\nsol = np.array(sol)","07efb5cf":"#plotting results\n\nplt.figure(figsize=(6,4))\nplt.plot(t, sol[:,0],label = \"S(t)\")\nplt.plot(t, sol[:,1],label = \"I(t)\")\nplt.plot(t, sol[:,2],label = \"R(t)\")\nplt.plot(t, sol[:,3],label = \"D(t)\")\nplt.legend()\nplt.show()","85145215":"PK_S = comp_df_pk['S']\nPK_I = comp_df_pk['I']\nPK_R = comp_df_pk['R']\nPK_D = comp_df_pk['D']","ac9e9b41":"def SIRD(y, t, beta, gamma, alpha, rho):\n    S, I, R, D = y\n    dS_dt = -1*beta*I*S\/N\n    dI_dt = (beta*I*S\/N) -  (1-alpha)*gamma*I - alpha*rho*I\n    dR_dt = (1 - alpha)*gamma*I\n    dD_dt = alpha*rho*I\n    return dS_dt, dI_dt, dR_dt, dD_dt","ac2f66ce":"def fit_SIRD_odeint(x, beta, gamma, alpha, rho): # x is day num\n    return integrate.odeint(SIRD, (S0, I0, R0, D0), x, args=(beta, gamma, alpha, rho))[:,1] # return I values only (ydata)","f6b02006":"first_case_index = np.array(test.head(1))[0]\n\nxdata = comp_df_pk.Day_num\n\nN = comp_df_pk['population'][first_case_index]\nI0 = comp_df_pk['I'][first_case_index]\nS0 = comp_df_pk['S'][first_case_index]\nR0 = comp_df_pk['R'][first_case_index]\nD0 = comp_df_pk['D'][first_case_index]\npopt, pcov = optimize.curve_fit(fit_SIRD_odeint, xdata, PK_I)\nfitted = fit_SIRD_odeint(xdata, *popt)","c2d4e956":"from_tomorrow = len(xdata) +  21 # data of after 21 days of 2020\ndays_left = 365 - from_tomorrow","105689af":"plt.plot(xdata, PK_I, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Pakistan infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \"gamma = \", popt[1], \"alpha = \", popt[2], \"rho = \", popt[3])","2f6d7729":"D1 = comp_df_pk['D'][len(comp_df_pk)-1]\nN = comp_df_pk['population'][len(comp_df_pk)-1] - D1\nS1 = comp_df_pk['S'][len(comp_df_pk)-1]\nI1 = comp_df_pk['I'][len(comp_df_pk)-1]\nR1 = comp_df_pk['R'][len(comp_df_pk)-1]\ny = S1, I1, R1, D1\nx = np.linspace(0, days_left, days_left)\n# Integrate the SIR equations over the time grid, x using optimal parameters.\nret = odeint(SIRD, y, x , args=(popt[0], popt[1], popt[2], popt[3]))","ce49558f":" #remaining_days = pd.date_range(max(comp_df_pk['date']) , max(comp_df_pk['date']) + timedelta(days=days_left+1))\n","963b81a6":"#plotting results\nplt.figure(figsize=(6,4))\nplt.title('Predicted number of cases for the year 2020 in remaining days')\nplt.plot(x, ret[:,1],label = \"Infected\")\nplt.legend()\nplt.show()","fe93ea35":"## 6- Analysis of Pakistan's Situation ","a0457819":"Global Death tolls have began to rise sharply ever since the turn of March.","76c70a6b":"What kind of country is in the dataset? How's the distribution of number of confirmed cases by country?","f7fd7a01":"### USA county wise data","901f9c2b":"### 1. Confirmed Cases Over Time","948e7ef2":"### Developing SIRD model","09793aab":"### Worldwide cleaned data","49908344":"It is difficult to see all countries so let's check countries of our interest.","63afc7d5":"Import Population Data\n\n","f6de8f57":"* Belgium with the most brutal of them all. Almost 16 people for every 100 that get affected die!","a94698cb":"## References and Acknowledgements\n**Data:**\n* [Novel Coronavirus (COVID-19) Cases, provided by JHU CSSE](https:\/\/github.com\/CSSEGISandData\/COVID-19)\n\n* [COVID-19 Complete Dataset (Updated every 24hrs)](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report)\n\n* [Population by country -2020](https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020)  \n\n* [Pakistan City wise COVID-19 data](https:\/\/www.kaggle.com\/zusmani\/pakistan-corona-virus-citywise-data)\n\n**Notebooks:**\n* [COVID Global Forecast SIR + XGBoost](https:\/\/www.kaggle.com\/kaniya\/covid-global-forecast-sir-xgboost\/notebook)\n\n**Forked From and Extended the copy of:**\n* [COVID-19: Digging a bit Deeper](https:\/\/www.kaggle.com\/abhinand05\/covid-19-digging-a-bit-deeper\/notebook)","2b19f161":"Looking at the American states, New York being the clear and outright most affected state.","e74ca84f":"### Importing Libraries","40fd9a12":"## SIR Model","b98f81ed":"We see that mortality rate is kept almost 3%, however it is slightly increasing gradually to go over 7% at the end of April.","cab5f8e0":"## Data Analysis - COVID-19","31b4a8c4":"US has topped the list!","3f2193bf":"#### Merging population data","02f8763f":"* Active cases in China have plummeted multifold over the past few days making it a much better sign for the country and its people. Something is working out there. Maybe the lockdown and the strict rules implied? Anyway there's a lot to learn from China this time.\n\n* Active cases elsewhere have skyrocketed to be frank, which is deeply worrying. Especially USA again sporting an almost straight line graph to the skies. ","5fe31c02":"But deaths in China somehow seem to be decreased since April which is interesting.\n\nLooking at the Deaths elsewhere is a saddening graph in itself. Terrible! \n\nLook at the graph of USA it is almost as if the curve is going into a straight like to the skies above. ","b1ad179d":"* It is very much possible to see things escalate in these few countries here even more with the rise in infected people.\n\n* Much of what is to come over the next few days depend on what is going to happen here \n","caa4b727":"Looking at the numbers it's worth noting that Europe is more affected than China and it's neighbors. \n\nCurrently, the US being the most affected country.","446ed184":"#### Choosing Pakistan for our model","ba906904":"# COVID-19: Global EDA and TS Prediction For Pakistan using SIRD Model","2d77016d":"Predicting the cases througout the year 2020\n","24fda40c":"### Data Loading and Cleaning ","58dd8da9":"## 2. Confirmed Deaths Over Time","2d760744":"## 4. Recovered Cases ","da31c960":"## 5. Mortality and Recovery Rates","b4173020":"The cleaned data from [COVID-19 Complete Dataset (Updated every 24hrs)](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report) is used for visualizations. The file contains the cumulative count of confirmed, death and recovered cases of COVID-19 from different countries from 22nd January 2020.","dd266d66":"It is worth seeing these stats as well. It might have a story for sure.","c65bc5b6":"* Wow this graph gives me some hope at last.","9884dc22":"Now lets analyze an important thing - ACTIVE CASES over time. It is the number of people who are affected by the virus excluding the dead and the recovered. This might have a bigger say on what is to come.","62682110":"> #### Feel free to zoom into the interactive maps.\n\nThe above graph is just an illustration of how the virus is spread out across the globe.\n\n","2d8ff60c":"#### Country-wise growth","85a3eaee":"**N**: total population\n\n**S(t)**: number of people susceptible on day t\n\n**I(t)**: number of people infected on day t\n\n**R(t)**: number of people recovered on day t\n \n**D(t)** : number of people dead on day t\n\n**\u03b2**: expected amount of people an infected person infects per day\n\n**D**: number of days an infected person has and can spread the disease\n\n**\u03b3**: the proportion of infected recovering per day (\u03b3 = 1\/D)\n\n**a**: fatality rate\n\n**p**: rate at which people die \n","ebdd91ed":"Not a good time to be a New Yorkian I guess. \nAlarming signs for the US?","0f42bbcf":"Now lets take a look at the confirmed cases across the globe.","a7452564":"## 3. Active Cases Over Time","b42fc7d5":"* China seems quite safe now\n\n* An interesting find from all these plots is that sub-saharan Africa seem to have fewer cases than the rest of the world. \n\n* However things might get a lot worse when it hits Africa, it is better to keep it as far away as possible. "}}