{"cell_type":{"28440da6":"code","72ddee37":"code","f687b200":"code","f2e22974":"code","ee5a53dc":"code","72260cc3":"code","2b7d6ab0":"code","cfe3b74a":"code","7706ee6b":"code","fc15069b":"code","9d12eede":"code","4cd711b6":"code","4c896b3d":"code","2cbc36b2":"code","8d917e1e":"markdown","d718de73":"markdown","ea9fc1ed":"markdown","478e6405":"markdown","409dfe11":"markdown","47c88f4f":"markdown","63916107":"markdown","4c7050cf":"markdown"},"source":{"28440da6":"import numpy as np \nimport pandas as pd \nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","72ddee37":"df = pd.read_csv(\"..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv\")\ntest = pd.read_csv(\"..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\ntrain = pd.read_csv(\"..\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")","f687b200":"fig = go.Figure(data=[go.Table(\n    header=dict(values=[['<b>Variable Name<\/b>'],['<b>Description<\/b>'],['<b>Category<\/b>'],['<b>Unit of Measure<\/b>'],['<b>Data Type<\/b>'],['<b>Example<\/b>']],\n                \n                line_color='darkslategray',\n                fill_color='royalblue',\n                align=['left'],\n                font=dict(color='white', size=15),\n                ),\n    cells=dict(values=[df['Variable Name'], df['Description'], df['Category'],df['Unit of Measure'],df['Data Type'],df['Example']],\n               line_color='darkslategray',\n               fill=dict(color=['paleturquoise', 'white']),\n               align=['left', 'center'],\n               font_size=12,\n               height=30))\n])\nfig.show()\n","f2e22974":"train.head()","ee5a53dc":"train.describe().T","72260cc3":"train.describe(include='O').T","2b7d6ab0":"colors=['#008000','#FFA500']\nlabels=['negative','positivity'] \nvalues=[train['diabetes_mellitus'].value_counts()[0],train['diabetes_mellitus'].value_counts()[1]]\nfig = go.Figure(data=[go.Pie(labels=labels, values=values)])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=18,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution Diabetes Mellitus')\nfig.show()","cfe3b74a":"positive=train.groupby('gender')['diabetes_mellitus'].value_counts().unstack()[1].values\nnegative=train.groupby('gender')['diabetes_mellitus'].value_counts().unstack()[0].values\nGender=['Female', 'Male']\ncolors=['#FFA500','#008000']\nlabels=['Negative','Positivity'] \nfig = go.Figure(data=[\n    go.Bar(name='negative', x=Gender, y=negative,marker_color=colors[1]),\n    go.Bar(name='positivity', x=Gender, y=positive,marker_color=colors[0])\n])\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution Gender Over  diabetes mellitus')\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})\n\nfig.show()","7706ee6b":"negative=train['age'][train.diabetes_mellitus == 0]\npositive=train['age'][train.diabetes_mellitus == 1]\n\nfig = px.histogram(train, x=\"age\", color=\"diabetes_mellitus\",marginal=\"box\",title='Distribution Age Over  diabetes mellitu',\n                   opacity=.6,color_discrete_sequence=['#FFA500','#008000'])\nfig.show()","fc15069b":"nigative=train[['height','weight']][train.diabetes_mellitus == 0].fillna(method='ffill').dropna().sample(frac=0.01, replace=True, random_state=1)\npositive=train[['height','weight']][train.diabetes_mellitus == 1].fillna(method='ffill').dropna().sample(frac=0.01, replace=True, random_state=1)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=nigative['weight'], y=nigative['height'],name='Nigative',marker_color='#008000'))\nfig.add_trace(go.Scatter(x=positive['weight'], y=positive['height'],name='Positive',marker_color='#FFA500'))\n\nfig.update_traces(mode='markers', marker_line_width=2, marker_size=16)\nfig.update_layout(title='Distribution Sample One Percent of Data Height and  weight over diabetes mellitu',\n                  yaxis_zeroline=False, xaxis_zeroline=False)\n\nfig.show()","9d12eede":"bmi=pd.DataFrame()\nbmi['data']=train['bmi'].fillna(method='ffill').dropna().astype(float)\nbmi['diabetes_mellitus']=train['diabetes_mellitus']\nbmi.loc[(bmi.data <18.5),'bmi'] = 'Underweight'\nbmi.loc[(bmi.data >=18.6)  & (bmi.data <=24.999),'bmi'] = 'Normal'\nbmi.loc[(bmi.data >=25)  & (bmi.data <=29.999),'bmi'] = 'Overweight'\nbmi.loc[(bmi.data >=30)  & (bmi.data <=34.999),'bmi'] = 'Obese'\nbmi.loc[(bmi.data > 35),'bmi'] = 'Extremely obese'\nbmi['diabetes_mellitus'].replace({0: 'Negative', 1: 'Positive'},inplace=True)\nbmi.dropna(inplace=True)\nfig_sunburst = px.sunburst(bmi,\n                           path=['bmi', 'diabetes_mellitus'],#[Continent, Country, Sex, Age]\n                           template='seaborn',\n                           maxdepth=2,\n                           title='Distribution Bmi Over diabetes mellitu')\nfig_sunburst.update_traces(textinfo='label+percent entry')# Shows % in graph\nfig_sunburst.update_layout(margin=dict(t=25, l=0, r=0, b=0))","4cd711b6":"gender=train.groupby('icu_type')['diabetes_mellitus'].value_counts().unstack()\n\nx=gender.index\nfig = go.Figure(go.Bar(x=x, y=gender[0].values, name='Nigative',marker_color='#008000'))\nfig.add_trace(go.Bar(x=x, y=gender[1].values, name='Positive',marker_color='#FFA500'))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution Icu type Over diabetes mellitu')\n\nfig.update_layout(barmode='stack', xaxis={'categoryorder':'total descending'})","4c896b3d":"ethnicity=train[['ethnicity','diabetes_mellitus']]\nethnicity['diabetes_mellitus'].replace({0: 'Negative', 1: 'Positive'},inplace=True)\nethnicity.dropna(inplace=True)\n\nfig_sunburst = px.sunburst(ethnicity,\n                           path=['ethnicity', 'diabetes_mellitus'],\n                           template='seaborn',\n                           maxdepth=2,\n                           title='Distribution ethnicity Over diabetes mellitu ')\nfig_sunburst.update_traces(textinfo='label+percent entry')\nfig_sunburst.update_layout(margin=dict(t=25, l=0, r=0, b=0))","2cbc36b2":"corr=train.corr()\ncorr=corr.sort_values(by='diabetes_mellitus')\ncolorscale = [[0, '#edf8fb'], [.03, '#b3cde3'],  [.09, '#00FF00']]\nfig= go.Figure(data=go.Heatmap(z=corr.values,  y=corr.index,x=corr.columns, colorscale=colorscale))\nfig.update_layout(\n    autosize=False,\n    width=850,\n    height=850)\nfig.show()","8d917e1e":"# Understanding the data","d718de73":"![](https:\/\/alsapakistan.com\/wp-content\/uploads\/2021\/01\/bmi-chart.png)","ea9fc1ed":"overview","478e6405":"# Background\nGetting a rapid understanding of the context of a patient\u2019s overall health has been particularly important during the COVID-19 pandemic as healthcare workers around the world struggle with hospitals overloaded by patients in critical condition. Intensive Care Units (ICUs) often lack verified medical histories for incoming patients. A patient in distress or a patient who is brought in confused or unresponsive may not be able to provide information about chronic conditions such as heart disease, injuries, or diabetes. Medical records may take days to transfer, especially for a patient from another medical provider or system.","409dfe11":"# Overview Correlation of Data","47c88f4f":"![](https:\/\/engineering.stanford.edu\/sites\/default\/files\/styles\/full_width_banner_tall\/public\/women_in_data-web.jpg?itok=Unjy9Jez)","63916107":"![](https:\/\/en.pimg.jp\/041\/331\/621\/1\/41331621.jpg)","4c7050cf":"# How to calculate Body Mass Index ?\nBody Mass Index is a simple calculation using a person\u2019s height and weight. The formula is BMI = kg\/m2 where kg is a person\u2019s weight in kilograms and m2 is their height in metres squared.\n\nA BMI of 25.0 or more is overweight, while the healthy range is 18.5 to 24.9. BMI applies to most adults 18-65 years.\n"}}