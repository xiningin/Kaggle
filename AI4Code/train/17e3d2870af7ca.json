{"cell_type":{"f4b0f1f5":"code","ca9f57ad":"code","c5567370":"code","81aa0526":"code","e8faa597":"code","b2a21e27":"code","788ecc3f":"code","6cca43b6":"code","e7307b14":"code","bd338c9b":"code","53f47c7e":"code","f3f6e5ec":"code","2235b88a":"code","cd90ecbf":"code","f8e1d2df":"markdown","1a3fdbcc":"markdown","192baefb":"markdown","8fa564d7":"markdown","6fd05598":"markdown","29350007":"markdown","96350cc9":"markdown","684ebfe1":"markdown","9bba2f49":"markdown","c3643bf8":"markdown"},"source":{"f4b0f1f5":"import numpy as np\nimport tensorflow as tf\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom scipy.stats import skew","ca9f57ad":"# N = length of last name = 8\n# S = (8 % 5) + 1 = 4\n\nN_SAMPLES = 10000\nN_TEST = 1000\n\n# Lengths up to S + 5\nMAX_TIMESTEPS = 9\nMASK_VALUE = -1\n\ntrain_X = np.random.uniform(size=(N_SAMPLES, MAX_TIMESTEPS, 1))\ntrain_L = np.random.randint(2, MAX_TIMESTEPS, N_SAMPLES)\n\ntest_X = np.random.uniform(size=(N_TEST, MAX_TIMESTEPS, 1))\ntest_L = np.random.randint(2, MAX_TIMESTEPS, N_TEST)","c5567370":"for i in range(N_SAMPLES):\n    train_X[i, train_L[i]:] = MASK_VALUE","81aa0526":"for i in range(N_TEST):\n    test_X[i, test_L[i]:] = MASK_VALUE","e8faa597":"train_y = skew(train_X, axis=1)\ntest_y = skew(test_X, axis=1)","b2a21e27":"input_ = tf.keras.Input(shape=(None, 1))\nmasked = tf.keras.layers.Masking(MASK_VALUE)(input_)\nlstm1 = tf.keras.layers.LSTM(32, return_sequences=True)(masked)\nlstm2 = tf.keras.layers.LSTM(32)(lstm1)\noutput = tf.keras.layers.Dense(1)(lstm2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","788ecc3f":"model.compile('adam', 'mse')","6cca43b6":"hist = model.fit(train_X, train_y, epochs=8)","e7307b14":"prediction = model.predict(test_X)","bd338c9b":"prediction[:8]","53f47c7e":"test_y[:8]","f3f6e5ec":"mean_squared_error(test_y, prediction)","2235b88a":"mean_absolute_error(test_y, prediction)","cd90ecbf":"np.percentile(test_y, np.arange(0, 100, 10)) ","f8e1d2df":"### Import all the needed modules","1a3fdbcc":"### Mean squared error","192baefb":"### Define the connections of the nodes in the network and verify the model\n\nThe ```Masking``` layer removes the numbers whose values are equal to -1. This allows us to tell the network that the data lengths are different.\n\nThe ```return_sequence``` flag defines if the LSTM should return only the last or the full sequence.","8fa564d7":"### View the predictions on the test set","6fd05598":"### Compile the model by providing the optimization algorithm and the loss function","29350007":"### Mean absolute error","96350cc9":"# Recurrent Network\n\nThis notebook shows how to create a recurrent network","684ebfe1":"### Train the model for 8 epochs","9bba2f49":"### Decile error","c3643bf8":"### Generate random values and calculate the label using the problem\n\nThe model shold be able to learn how to calculate the skewness of a sequence.\n\nTo define data with different lengths, we set the unused parts of the data as -1."}}