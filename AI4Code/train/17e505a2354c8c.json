{"cell_type":{"211f470f":"code","0652f2c6":"code","5c4b29aa":"code","a6d2651d":"code","a12becec":"code","cfba65ac":"code","bf9831f4":"code","30ce4c3c":"code","9a83f64a":"code","463de0d5":"code","6864d24a":"code","07ef1a03":"code","fadaebdf":"code","0fdae4ef":"code","4f3b9945":"code","96f04632":"code","201b1253":"code","943fa5bb":"code","6bbdb199":"code","4c6f23b0":"code","e2dc8742":"code","b5a9226c":"code","d5c9035c":"code","893bc0c7":"code","4088e298":"code","d84ddad6":"code","34f7e30c":"code","7994fa46":"code","d641d992":"code","f42ec1b5":"code","3b94b4e4":"code","42b19984":"code","df089042":"code","c6104237":"code","ae4e872c":"code","f1822a3d":"code","73d7a420":"code","6d957e43":"code","c52987c3":"code","393dab2a":"code","53173013":"code","97c29147":"code","527e9387":"code","e718c9b2":"code","5dba85da":"code","60e179e1":"code","9afa17aa":"code","cc314b35":"code","4166b39f":"code","89ce44d6":"code","f224c602":"code","fdb2b617":"code","515438a0":"code","1a7577b0":"code","aeee0354":"code","91dc63e8":"code","b618bc79":"code","69cc222a":"code","9baa3bcf":"code","d8a4d737":"code","7b32fe46":"code","093b27e5":"code","f2a6997f":"code","385bc990":"code","9c28824f":"code","ee53b4fb":"code","0773a640":"code","97f6239b":"code","c14c88ed":"code","ccb87c0c":"code","a06eaa7d":"code","5ac5778f":"code","00fe2cc7":"markdown","5bd70a01":"markdown","c267ea64":"markdown","12346972":"markdown","22863c9c":"markdown","7c374773":"markdown","fb7c48a9":"markdown","79690097":"markdown","de08ca19":"markdown","8b135ea9":"markdown","656c5702":"markdown","1dd23f06":"markdown","16f00b0a":"markdown","bd02d1ed":"markdown","be06cc33":"markdown","905a51ff":"markdown","f663e130":"markdown","0e31bbe4":"markdown","a13f5a3c":"markdown","481b0bfd":"markdown","7fd81996":"markdown","e727483b":"markdown","0dbaa2c3":"markdown","a9ec3e22":"markdown","ba4a7429":"markdown","2a8a32f6":"markdown","8a71005f":"markdown","1c9c235d":"markdown","36518010":"markdown","8bceff51":"markdown","6bbeac0b":"markdown","059cf78a":"markdown","911620d7":"markdown","571eb5ab":"markdown","0075340f":"markdown","6c07c3d4":"markdown","bd5d1b50":"markdown","bd38d21f":"markdown","75d9232a":"markdown","1b561e38":"markdown","892d19e3":"markdown","b0ac9550":"markdown","0d4e0787":"markdown","1dbd9193":"markdown","c66f8206":"markdown","8c2072cf":"markdown","bcd73ed2":"markdown","c40faba4":"markdown","36e1fd15":"markdown","633e9750":"markdown","eb6f0d53":"markdown"},"source":{"211f470f":"a=10\nb=20\nc=a+b\nprint(c)","0652f2c6":"a=10\na+=1\nprint(a)\n","5c4b29aa":"print(3!=2)","a6d2651d":"first_name=input(\"What is your first name: \") #first_name\nlast_name=input(\"What is your last name: \") #last_name\nprint(f\"My name is: {first_name} {last_name}\")","a12becec":"num=input('enter a number: ')\n#num+=10   error\nnum=int(num)\nnum+=10\nprint(num)","cfba65ac":"# Python always takes input as a string. Except string there also available integer, float, boolean types.\n\nyear=input(\"Enter your birth_year: \")\nprint(type(year)) # type() returns the type of the variable.","bf9831f4":"# Calculate your age.\n\nyear=input(\"Enter your birth_year: \")\nprint(\"Your cuurrent age is: {}\".format(2019-int(year)))\n\n'''\nYou can also use:\n    float(): To convert into float.\n    bool(): To convert into boolean.\n'''","30ce4c3c":"# ( Operator Precedence )\n# x=2+(2-2)*2**2\/2, calculate the value of x and print it. \n\nx=2+(2-2)*2**2\/2\nprint(f\"x = {x}\")","9a83f64a":"# Input two numbers and swap them\n\nx,y=input('Enter two numbers: ').split(',')\ny,x=int(x),int(y)\nprint('x={} y={}'.format(x,y))","463de0d5":"# Input a number and check whether it is odd or even and display accordingly.\n\na=int(input('enter a number: '))\nif a%2==0:\n    print('{} ia even'.format(a))\nelse:\n    print('{} is odd'.format(a))","6864d24a":"# Input your marks and give a review.\n\nmarks=float(input(\"Enter your marks: \"))\nif marks>0 and marks<50:\n    print(\"BAD\")\nelif marks>50 and marks<80:\n    print(\"Good\")\nelif marks>80 and marks<100:\n    print(\"OUTSTANDING\")\nelse:\n    print(\"Invalid Marks !\")","07ef1a03":"#Print the pattern: \n\nn=int(input('Enter value of n: '))\ni=1\nwhile i<=n:\n    print('* '*i)\n    i+=1","fadaebdf":"# Input a number and find the sum of its digits.\n\nn=int(input('enter a no: '))\nsum=0\nwhile n>0:\n    rem=n%10\n    sum=sum+rem\n    n=n\/\/10\nprint('sum of digits is: ',sum)","0fdae4ef":"# Input a number n and print all odd numbers upto n.\n\nn=int(input('enter the range: '))\nfor i in range(1,n+1,2):\n    print(i,end=' ')","4f3b9945":"#Print the pattern: \n\nn=int(input('Enter value of n: '))\nfor i in range (1,n+1):\n    for j in range (i,n): # nested loop\n        print(' ',end=' ')\n    for k in range(1,i+1):\n        print('{} '.format(k),end='')\n    print()","96f04632":"# Input a number n and find its factorial using a user defined function int fact(int)\n\ndef fact(n):\n    s=1\n    for i in range(1,n+1):\n        s=s*i\n    return s\nn=int(input('Enter a number: '))\nprint(f'The factorial of {n} is: {fact(n)}')","201b1253":"\"\"\"\nImplement simple arithmetic calculator using user defined functions for each operation\n(addition, subtraction, multiplication, division, modulus, exponent). You may use a dictionary to print the menu.\n\"\"\"\n\ndef add(x, y):\n    return x+y\n\ndef subtract(x, y):\n    return x-y\n\ndef multiply(x, y):\n    return x*y\n\ndef divide(x, y):\n    return x\/y\n\ndef mod(x,y):\n    return x%y\n\ndef expo(x,y):\n    return x**y\n\nn1,n2 = input('Enter the two numbers  : ').split(',')\nn1,n2=int(n1),int(n2)\nwhile True:\n    print(\"****MENU****\\n1. Addition\\n2. Subtraction\\n3. Multiplication\\n4. Division\\n5. Modulus\\n6. Exponent\\n7. Exit\\n\")\n    ch=int(input('enter your choice : '))\n    if ch==1:\n        print(add(n1,n2))\n    elif ch==2:\n        print(subtract(n1,n2))\n    elif ch==3:\n        print(multiply(n1,n2))\n    elif ch==4:\n        print(divide(n1,n2))\n    elif ch==5:\n        print(mod(n1,n2))\n    elif ch==6:\n        print(expo(n1,n2))\n    elif ch==7:\n        break\n    else:\n        print(\"Invalid input\")","943fa5bb":"# Input a number n and find its factorial using recursion.\n\ndef fact(n):\n    if n<1:\n        return 1\n    else:\n        return n*fact(n-1)\nn=int(input('Enter a number: '))\nprint(f'The factorial of {n} is: {fact(n)}')","6bbdb199":"# Input two strings and concatenate them.\n\nstr1=input('enter the first string:')\nstr2=input('enter the second string:')\nstr1=str1 + str2\nprint('the concatinated string: ',str1)","4c6f23b0":"# Indexing\n'''\nIndex:\n    T y l e r  D u r d e n\n    0,1,2...     ...-3,-2,-1\n    \n'''\n\nname='Tyler Durden'\nprint(name[0])\nprint(name[-1])","e2dc8742":"# Slicing\n\nname='Tyler Durden'\nprint(name)\n\nname1=name[2:8]\nprint(name1)\n\nname2=name[:-2]\nprint(name2)\n\nname3=name[4:]\nprint(name3)\n\nname4=name[:]\nprint(name4)","b5a9226c":"# Some string Methods:\n\nname='Van Rossum'\n\nprint(len(name)) # to obtain length.","d5c9035c":"print(name.upper()) # to change into upper case.\n","893bc0c7":"print(name.lower()) # to change into lower case.\n","4088e298":"print(name.find('R'))","d84ddad6":"print(name.find('D')) # to find index of string.\n","34f7e30c":"print(name.replace('Rossum', 'Mukherjee')) # to replace a string.\n","7994fa46":"#immutable\nprint(name)","d641d992":"#Create a list of individual characters from a string\nstr='abc'\nprint(list(str))","f42ec1b5":"# Input a string and reverse it.\n\nstr=input('Enter a string: ')\ns=''\nfor i in str:\n    s=i+s\nprint(\"The reverse string is: \",s)","3b94b4e4":"# Declaration of tuples.\n\nt1 = (1,2,3)\nt2 = (4,5,6)","42b19984":"# Tuple concatenation.\n\nt3 = t1 + t2","df089042":"#  Print.\n\nprint(t1)\nprint(t2)\nprint(t3)","c6104237":"# Tuple indexing.\n\nprint(t3[-3]) # It returns a new tuple","ae4e872c":"# Tuple slicing.\n\nprint(t3[1:4]) # It returns a new tuple","f1822a3d":"# 2D Tuples\n\nt1=(1,2,3)\nt2=(4,5,6)\nt3=(t1,t2)\nprint(t3)","73d7a420":"t3[0][0]","6d957e43":"# Declaration of two dimentional list.\n\nt=(\n    (1,2,3),\n    (4,5,6),\n    (7,8,9)\n)\n\nprint(t)\n\nprint(t[0][1])","c52987c3":"# 2D-Tuple concatenation.\n\nprint(t + (10,11,12))","393dab2a":"# 2D-Tuple indexing.\n\nprint(t[-2])\nprint(t[-2][1])","53173013":"# 2D-Tuple slicing.\n\nprint(t[0:-1])","97c29147":"# List Declaration.\n\nl = [1,2,3,4,5]\n\nprint(l)","527e9387":"# In list we can update a value of a list as it is immutable.\n\nl = [1,2,3,4,5]\nprint(l)\n\n# List Update.\n\nl[1] = 20\nprint(l)","e718c9b2":"l1=[1,2,3]\nl2=[4,5,6]\nl3=[l1,l2]\nprint(l3)","5dba85da":"print(l3[0][1])","60e179e1":"# Declaration of two dimentional list.\n\nl=[\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]\n\nprint(l)\n\nprint(l[0][1])","9afa17aa":"l = [1,2,3,4,5]\nprint(l)\n\n# Append.\nl.append(6)\nprint(l)\n\n# We can also insert a number in any position using insert() method.\nl.insert(0,100)\nprint(l)","cc314b35":"l[::-1]","4166b39f":"# Convert a tuple into a list.\n\nt=(1,2,3,4,5)\nprint(list(t))\n\n# Convert a list into a tuple.\n\nl=[1,2,3,4,5]\nprint(tuple(l))","89ce44d6":"# Find maximum elements in a list.\n\nnumbers = [6,1,5,10,2]\nmax=numbers[0]\nfor number in numbers:\n    if number>max:\n        max=number\nprint(f\" Maximum number in list is: {max}\")","f224c602":"'''\n    Find the sum of digits of a number using an user defined function digits(x) which returns a tuple containing the digits\n    of the number.\n'''\n# Sumofdigits\n\ndef digits(x):\n    t1=()\n    while(x>0):\n        t1=t1+(x%10,)\n        x\/\/=10\n    return t1\n\nn=int(input('Enter the number : '))\n\nt2=digits(n)\nprint(t2)\n\nsum=0\nfor i in t2:\n    sum=sum+i\nprint(sum)","fdb2b617":"# Declaration\n\nstudent={\n    \"name\" : \"Tyler Durden\",\n    \"age\" : 27,\n    \"marks\" : 77.50,\n    \"email\" : \"tyler@gmail.com\"\n}","515438a0":"# Access value through a key\n\nprint(student[\"name\"])","1a7577b0":"# \" print(student[\"birth_date\"]) \" will give an error, because there is no key name \" birthyear \"\n\n# Using get() method we can get a default value if the key is not pressent in the dictionary\n\nprint(student.get(\"birth_date\",\"feb 2, 1998\"))","aeee0354":"# Update of a value\n\nstudent[\"name\"] = \"Bob Biswas\"\nprint(student[\"name\"])","91dc63e8":"# Add a new key\n\nstudent[\"birth_date\"] = \"aug 15, 1947\"\nprint(student[\"birth_date\"])","b618bc79":"# Coverts a phone numbers into words\n\ndigits_to_words={\n    \"1\" : \"one\",\n    \"2\" : \"two\",\n    \"3\" : \"three\",\n    \"4\" : \"four\",\n    \"5\" : \"five\",\n    \"6\" : \"six\",\n    \"7\" : \"seven\",\n    \"8\" : \"eight\",\n    \"9\" : \"nine\",\n}\n\nph_number=input(\"Enter a phone number: \")\nph_words=\"\"\n\nfor ch in ph_number:\n    ph_words+=digits_to_words[ch] + \" \"\n    \nprint(\"The phone number in words is: \",{ph_words})","69cc222a":"# Declaration\n\ns={1,2,3,4,5}\nt={3,4,5,6,6,7}\n\n#print\n\nprint(s)\nprint(t)","9baa3bcf":"# Union\n\nprint(s.union(t))","d8a4d737":"# To add more than one value\n\nt.update([8,9])\n\nprint(t)","7b32fe46":"# To remove a value\n\nt.remove(6)\n\nprint(t)","093b27e5":"# List coverstion to a set\n\ns = [1,2,3,4,2,1,5]\n\ns=set(s)\n\nprint(s)","f2a6997f":"name = [\"Shahrukh\", \"Salman\", \"Amir\", \"Akshay\"] \nrank = [3, 4, 1, 2 ] \ncharge_per_film = [60, 50, 80, 50] \n  \nobj=zip(name, rank, charge_per_film) \n  \n# converting values to print as set \nobj=set(obj) \n  \nprint(\"The zipped result is : \",end=\"\") \nprint(obj)","385bc990":"n, r, ch = zip(*obj) \nprint(\"The unzipped result: \\n\",end=\"\") \nprint(n) \nprint(r) \nprint(ch) ","9c28824f":"name = [\"Shahrukh\", \"Salman\", \"Amir\", \"Akshay\"]\ncharge = [60, 50, 80, 50] \n\nfor n,c in zip(name, charge): \n    print (\"Actor : %s     Charge : %d\" %(n, c)) ","ee53b4fb":"def square(x): \n    return x*x; \nprint(square(5)) \n\n  \nf = lambda x: x*x \nprint(f(7)) ","0773a640":"mylist = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61] \nfiltered_list = list(filter(lambda x: (x%2 != 0) , mylist)) \nprint(filtered_list) ","97f6239b":"def cube(n): \n    return n * n * n\n  \nlist1 = [1, 2, 3, 4]\nresult = map(cube, list1) \nprint(list(result))","c14c88ed":"t = (1, 2, 3, 4) \nresult = map(lambda x: x * x * x, t) \nprint(tuple(result)) ","ccb87c0c":"list1 = [1, 2, 3] \nlist2 = [4, 5, 6] \n  \nresult = map(lambda x, y: x + y, list1, list2) \nprint(list(result)) ","a06eaa7d":"'''# Create a class called Rectangle having two attributes \u2013 \nlength and breadth and find the area and perimeter of the rectangle using two methods \u2013 showarea() and showperimeter()\n--> Using Constructor'''\nclass rectangle:\n    def __init__(self,l,b): #instance variable unique to each instance\n        self.length = l\n        self.breadth = b\n\n    def showarea(self):\n        return self.length*self.breadth\n   \n    def showperimeter(self):\n        peri=2*(self.length + self.breadth)\n        return peri\n\nobj1=rectangle(10,5)\nobj2=rectangle(12,6)\nprint(obj1.showarea())\nprint(obj1.showperimeter())\nprint(obj2.showarea())\nprint(obj2.showperimeter())","5ac5778f":"'''# Create a class called Rectangle having two attributes \u2013 \nlength and breadth and find the area and perimeter of the rectangle using two methods \u2013 showarea() and showperimeter()\n-->Not Using Constructor'''\nclass rectangle:\n    length=10   #class variables shared by all instances\n    breadth=5\n    def showarea(self):\n        return self.length*self.breadth\n   \n    def showperimeter(self):\n        peri=2*(self.length + self.breadth)\n        return peri\n\nobj1=rectangle()\nobj2=rectangle()\nprint(obj1.showarea())\nprint(obj1.showperimeter())\nprint(obj2.showarea())\nprint(obj2.showperimeter())","00fe2cc7":"# If-Else & If-Else-If Ladder:","5bd70a01":"# Classes & Objects","c267ea64":"In this way we can convert a tuple and a dictionary into set","12346972":"Two dimentonal list is also as same as two dimentional tuple.","22863c9c":"Excercise:\n    1. Input a number and find its absolute value.\n    2. Find the largest and smallest among three numbers supplied by user.\n    3. Check whether an input year is a leap year or not. \n    4. Compute the telephone bill for Mr. X as per the call rates given below:\n        Rental = 250\n        1st 100 calls   @Rs.  0.2\n        Next 100 calls  @ Rs. 0.3\n        Remaining calls @ Rs. 0.5\n    5.Solve a given quadratic equation. (Without imaginary root).","7c374773":"# LISTS & TUPLES","fb7c48a9":"Tuples:\n    \n    Like strings, tuples are ordered sequences of elements. The difference is that the elements of a tuple need not be characters. The individual elements can be of any type, and need not be of the same type as each other. Like strings,tuples can be concatenated, indexed and sliced.","79690097":"# Receiving Input:","de08ca19":"# Operators in Python: ","8b135ea9":"Application","656c5702":"# Dictionaries","1dd23f06":"Lists:\n    \n    Like a tuple, a list is an ordered sequence of values, where each value is identified by an index. The syntax for expressing literals of type list is similar to that used for tuples; the difference is that we use square brackets rather than parentheses. Lists can also be concatenated, indexed and sliced. Lists differ from tuples in one hugely important way: lists are mutable. In contrast, tuples and strings are immutable. ****","16f00b0a":"# Keywords in Python:","bd02d1ed":"Reversing a list","be06cc33":"Adding two lists using map and lambda function:","905a51ff":"We can perform concatenation, indexing and slicing in list as like as tuple.","f663e130":"An object is any real world entity with some properties and methods\n\nA class is a blueprint for creating objects\n","0e31bbe4":"Some more methods:\n    \n    remove()  -> remove a specific element of list.\n    \n    clear()   -> clear all elements of list.\n    \n    pop()     -> returns the last element of list.\n    \n    index()   -> returns the element of specifying index.\n    \n    count()   -> count the total elements of list.\n    \n    sort()    -> sort the elements of the list in ascending order.\n    \n    reverse() -> reverse the elents of the list.\n    \n    copy()    -> copy all the elements of a list into a another list.","a13f5a3c":"# Basic Computations","481b0bfd":"\n-> A Dictionary iis an unordered collection of data values, used to store data values like a map, which unlike other Data\n   Types that hold only single value as an element, \n\n-> Dictionary holds key:value pair, each key-value pair being separated by a colon :, whereas each key is separated by a\n   \u2018comma\u2019. \n\n-> Keys of a Dictionary must be unique and of immutable data type such as Strings, Integers and tuples, but the key-values can \n   be repeated and be of any type.\n   ","7fd81996":"Exercise:\n    1. Find Out average of three decimal numbers\n    \n    2. Find out the area and perimeter of a rectangle\n\n    3. Input temperature in Celsius and convert it to Fahrenheit.\n","e727483b":"# Simple Arithmetic Programs:","0dbaa2c3":"# Function & Recursion","a9ec3e22":"We can perform all above mentioned operation in 2D-tuple as like as 1D-tuple.","ba4a7429":"# Set","2a8a32f6":"Arithmetic Operators   (+, -, *, \/, %, **, \/\/)\n\nComparison (Relational) Operators   (==, !=, <>, >, <, >=, <=)\n\nAssignment Operators   (=, +=, -=, *=, \/=, %=, **=, \/\/=)\n\nLogical Operators   (and, or, not)\n\nBitwise Operators   (&, |, ^, ~, << >>)\n\nMembership Operators   (in, not in)\n\nIdentity Operators   (is, is not)\n","8a71005f":"Excercise:\n    \n    1. Design a class to represent a bank account. Include the following members:\n       Data members - Name of the depositor, Account number, Type of account, Account balance\n       Methods \u2013 To deposit an amount, To withdraw an amount after checking balance, to display the\n       name and balance.\n       Incorporate a constructor to provide the initial values.\n\n    2. Create a class called Complex having two attributes \u2013 real and imag. Create two instances of the class and perform \n       addition of two complex numbers. The class should use the following methods:\n       show() \u2013 that displays the complex numbers in proper format\n       add() \u2013 that adds the two complex instances\n       sub() \u2013 that subtracts one complex instance from another\n       displaymodulus() \u2013 that displays the modulus of the resultant complex number after addition or subtraction","1c9c235d":"Excercise:\n    \n    1. Input a name and find its initial (e.g., Subhash Chandra Bose should be printed as S. C. Bose).\n    \n    2. Input a string and delete all consecutive occurrences of characters.\n    \n    3. Input a string and a pattern and count the occurrences of the pattern in the string.\n    \n    4. Input a string and a pattern and delete all occurrences of the pattern from the string.\n    \n    5. Input a string and two patterns pattern1 and pattern2. Find all occurrences of pattern1 and \n       replace them by pattern2.   \n    \n    6. A Pig Latin word is a word that begins with consonant sound; all letters before the initial \n       vowel are placed at the end of the word sequence. Then, \"ay\" is added, as in the following \n       examples:  \n       \"pig\" \"igpay\"\n       \u201cbanana\"  \"ananabay\"\n       \"trash\" \"ashtray\"\n       Input a word and generate its Pig Latin.\n    \n    7. Find the frequency of occurrence of each character in a given string.\n","36518010":"# Loop Control Structure:","8bceff51":"# lambda (Anonymous Functions)","6bbeac0b":"Excercise:\n    \n    1.Create a tuple with different data types, print the tuple and then add one more item into the tuple and print it again.\n    \n    2.Create a tuple and find the repeated items of the tuple.\n    \n    3.Input a number and check if it a pefect number or not using an user defined function factors(x) \n    which returns a tuple containing the factors of the number.\n    \n    4.Convert a given list into a tuple.\n    \n    5.Create a list of n tuples and sort them according to the second element of each tuple.\n    \n    6.Create a list containing n tuples and replace last value of all tuples in the list.\n    Sample list: [(10,20,40), (40,50,60), (70,80,90)]\n    Expected Output: [(10, 20, 100), (40, 50, 100), (70, 80, 100)]\n    \n    7.Create a list containing n tuples and remove all empty tuple(s) from the list.\n    Sample data: [(),(), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n    Expected output: [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n    \n    8.Input a list and split the odd and even numbers into two separate lists.\n    \n    9.Enter the roll, name and marks of n students print their records. Finally find the student name \n    with the highest marks.","059cf78a":"Application","911620d7":"Some more methods:\n    \n    Method\t\t     Description\n    \n    len()\t\t\t Returns the length of the set\n    \n    clear()\t\t\t Removes all the elements from the set\n    \n    difference()\t Returns a set containing the difference between 2 or more sets \n    \n    discard()\t\t Remove the specified item\n    \n    intersection()\t Returns a set, that is the intersection of two sets \n    \n    pop()\t\t\t Removes an element from the set\n","571eb5ab":"Using map with lambda function:","0075340f":"The __init__() Function:\n\n    All classes have a function called __init__(), which is always executed when the class is being initiated.\n\n    Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:\n","6c07c3d4":"Exercise:\n    1. Input a number and check if it a Krishnamurthy number.\n    2. Find the sum of first n prime numbers using as user defined function to check for prime. Input the value of n from the user.\n    3. Input a limit n and print all prime fibonacci numbers up to n using a user defined function prime() which returns a 1 if the argument is a prime or else 0.\n    4. Input a limit n and print all twin prime numbers up to n.\n    5. Input the values of two variables n and r and calculate nCr.\n    6. Generate a pascal\u2019s triangle upto n rows (value of n is to be taken as input from the user).\n    7. Input a number n and print its prime factors using a user defined function int prime(int) which returns a 1 if the argument is a prime or else 0.\n    8. Calculate the below series. Use a user defined function fact(n) which will return the factorial of n.\n       x\/1! \u2013 x^3\/3! + x^5\/5! \u2013 x^7\/7! + ........(up to n terms).\n    9. Print the sum of natural numbers up to n using recursion.\n    10. Find the nth Fibonacci number using recursion. The value of n should be taken as input.","bd5d1b50":"We can convert a tuple into a list and also a list into a tuple.","bd38d21f":"Few Programs:","75d9232a":"# Basic Python Programming","1b561e38":"Exercise:\n    1.\n                *     \n              * * *\n            * * * * *\n          * * * * * * *\n            * * * * *\n              * * *\n                *\n    2.  \n            * * * * * * *\n              * * * * *\n                * * *\n                  *\n                * * *\n              * * * * *\n            * * * * * * *\n    3. Input two numbers and find their hcf and lcm\n    4. Input a number n and find:\n       (a)\tFibonacci series up to n\n       (b)\tthe nth Fibonacci number\n    5. Input a number and reverse it using while\/do-while loop.\n    6. Input a number and check if it is a prime number or not.\n    7. According to the Goldbach conjecture, every even number greater than two is the sum of two prime numbers.\n       Input an even number and decompose it into two primes.\n    8. Input a number and check whether it is an automorphic number or not using while\/do-while loop.\n    9. Input a number and check whether it is an Armstrong number or not using while\/do-while loop.\n\n","892d19e3":"Unzipping values","b0ac9550":"String is a sequence that can be concatenated, indexed and sliced.","0d4e0787":"# Map","1dbd9193":"Some list methods:","c66f8206":"assert, break, class, continue, def, del, elif, else, except, exec, finally, for, from, global, if, import, in, is, lambda,\nnot,or, pass, print, raise, return, try, with, while, and yield\n","8c2072cf":"A set is a collection which is unordered and unindexed.\n\nNote: Sets are unordered, so the items will appear in a random order.\n\ns = set() creates an empty set\n\nPython has a set of built-in methods that you can use on sets.","bcd73ed2":"Creates a single iterator object, having mapped values from all containers.","c40faba4":"# Type Conversion:","36e1fd15":"Returns a list of the results after applying the given function to each item of a given iterable (list, tuple etc.)","633e9750":"# Strings:","eb6f0d53":"# ZIP"}}