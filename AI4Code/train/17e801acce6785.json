{"cell_type":{"670433b5":"code","23b1ad4d":"code","7d6fd072":"code","4d5a9ce2":"code","4cb49a85":"code","735b967f":"code","caba6baf":"code","3f599bbd":"code","819e2514":"code","04a4c898":"code","e7fa9fb4":"code","7d9f9b00":"code","e46bb31a":"code","44de1a39":"code","4e62eb13":"code","d8d69a92":"code","338364e2":"code","2ed64886":"code","85d1f118":"code","ed656dd9":"code","b7dbf683":"code","498d9871":"code","3ad0bd1b":"markdown","8e27550c":"markdown","4694688d":"markdown","9802eddf":"markdown","2e12a719":"markdown"},"source":{"670433b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom pathlib import Path\nfrom PIL import Image\n\nfrom functools import partial\nfrom scipy import stats\nimport missingno as msno\nimport joblib\nimport tarfile\nimport shutil\nimport urllib\n\nfrom sklearn import datasets\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nfrom keras.models import Model\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout, Input\nfrom keras.layers import BatchNormalization\nfrom keras.callbacks import ModelCheckpoint\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23b1ad4d":"dataset_path = '\/kaggle\/input\/arabic-hwr-ai-pro-intake1\/'\ntrain_images = Path('\/kaggle\/input\/arabic-hwr-ai-pro-intake1\/train')\n\ntrain_images_paths = pd.Series(sorted(list(train_images.glob(r'*.png'))), name='Filepath').astype(str)\nprint(train_images_paths.head())\ntrain_labels = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nprint(train_labels.shape)","7d6fd072":"img_key_value = {}\nfor value in train_labels['label'].unique():\n    img_key_value[value] = train_labels[train_labels['label']==value].index[0]\n    \nimg_index = list(img_key_value.values())\nimg_label = list(img_key_value.keys())\n\nfig, ax = plt.subplots(4, 7, figsize=(12, 8))\n\ni = 0\nfor row in range(4):\n    for col in range(7):\n        plt.sca(ax[row, col])\n        plt.title(f'label = {img_label[i]}')\n        img = plt.imread(train_images_paths.iloc[img_index[i]])\n        plt.imshow(img)\n        plt.axis('off')\n        i+=1","4d5a9ce2":"def rgb_to_gray(rgb):\n    r, g, b = rgb[:,:,0], rgb[:,:,1], rgb[:,:,2]\n    gray = 0.2989 * r + 0.5870 * g + 0.1140 * b\n    gray = gray[:, :, np.newaxis]\n    return gray","4cb49a85":"def rgba_to_gray(imgs):\n    new_imgs = np.empty((len(imgs), 32, 32, 1), dtype=np.float32) \n\n    for idx, path in enumerate(imgs):\n        img = plt.imread(path)\n        #img = img[:,:,:3]\n        img = cv2.cvtColor(img, cv2.COLOR_BGRA2RGBA)\n        img = cv2.cvtColor(img, cv2.COLOR_BGRA2GRAY)\n        img = img[:, :, np.newaxis]\n        #img = rgb_to_gray(img)\n        #plt.imshow(img)\n        new_imgs[idx] = img\n    print('train_full_set.shape =>', new_imgs.shape)\n    \n    return new_imgs","735b967f":"def normalize_data(imgs):\n    return imgs \/ 255.0","caba6baf":"def preprocess_data(imgs):\n    imgs = rgba_to_gray(imgs)\n    #imgs = normalize_data(imgs)\n    return imgs","3f599bbd":"X = preprocess_data(train_images_paths)","819e2514":"#y =  to_categorical(train_labels)\ny = to_categorical(train_labels['label'])","04a4c898":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, shuffle=True, random_state=42)","e7fa9fb4":"In = Input(shape=(32,32,1))\nx = Conv2D(32, (5,5), padding=\"same\", activation=\"relu\")(In)\nx = Conv2D(32, (5,5), activation=\"relu\")(x)\nx = Conv2D(32, (5,5), activation=\"relu\")(x)\nx = MaxPooling2D((2,2))(x)\nx = BatchNormalization()(x)\n\nx = Conv2D(64, (5,5), padding=\"same\", activation=\"relu\")(x)\nx = Conv2D(64, (5,5), activation=\"relu\")(x)\nx = Conv2D(64, (5,5), activation=\"relu\")(x)\nx = MaxPooling2D((2,2))(x)\nx = BatchNormalization()(x)\n\nx = Flatten()(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dense(128, activation=\"relu\")(x)\nx = Dropout(0.4)(x)\n\nOut = Dense(29, activation=\"softmax\")(x)\n\nmodel = Model(In, Out)","7d9f9b00":"print(model.summary())","e46bb31a":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images","44de1a39":"batch_size = 64\nepochs = 50\n\ntrain_gen = datagen.flow(X_train, y_train, batch_size=batch_size)\ntest_gen = datagen.flow(X_valid, y_valid, batch_size=batch_size)","4e62eb13":"model_checkpoint_callback = ModelCheckpoint(\n    filepath=\"best.hdf5\",\n    monitor='val_accuracy', \n    verbose=1, \n    save_best_only=True, \n    mode='max')","d8d69a92":"model.compile(optimizer='adam',\n                    loss='categorical_crossentropy',\n                    metrics=['accuracy'])\n\nhistory = model.fit_generator(train_gen, \n                              epochs = epochs,\n                              verbose = 2,\n                              steps_per_epoch = X_train.shape[0] \/\/ batch_size,\n                              validation_data = test_gen,\n                              validation_steps = X_valid.shape[0] \/\/ batch_size)\n","338364e2":"pd.DataFrame(history.history).plot(figsize=(10, 6));","2ed64886":"test_labels = pd.read_csv('..\/input\/arabic-hwr-ai-pro-intake1\/test.csv')\ntest_images = Path(r'..\/input\/arabic-hwr-ai-pro-intake1\/test')\n\ntest_images_paths = pd.Series(sorted(list(test_images.glob(r'*.png'))), name='Filepath').astype(str)\n\ntest_images_paths.head()","85d1f118":"test_images = preprocess_data(test_images_paths)","ed656dd9":"y_hat = np.argmax(model.predict(test_images), axis=-1)\ntest_labels['label'] = y_hat","b7dbf683":"test_labels[['id', 'label']].to_csv('\/kaggle\/working\/submission.csv', index=False)","498d9871":"loss_all_data, acc_all_data = model.evaluate(X, y, verbose=0)\nprint('loss_all_data =>', loss_all_data)\nprint('acc_all_data =>', acc_all_data)","3ad0bd1b":"## Build Model","8e27550c":"## Data Preprocessing","4694688d":"## Model Evaluation","9802eddf":"## Read Train Data ","2e12a719":"## Data Visualization"}}