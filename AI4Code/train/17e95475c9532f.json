{"cell_type":{"89c13370":"code","8157d4a7":"code","c143a569":"code","20a80eab":"code","4a88e325":"code","3c9c38d2":"code","d2ed0074":"code","887fd438":"code","22284329":"code","57397f5e":"code","86115690":"code","80c9e7e3":"code","486d10b4":"code","a673ec32":"code","581fd2a4":"code","016ef1d2":"code","55e6dbdb":"code","81b311b9":"markdown","12a862b9":"markdown","ace04972":"markdown","e14c5fac":"markdown","950db7aa":"markdown","fe4f3aa7":"markdown","b4c24d65":"markdown","23def46a":"markdown","b2aadb8b":"markdown","5d832e7f":"markdown","8a47966d":"markdown","bf678e3b":"markdown","9caea0e2":"markdown"},"source":{"89c13370":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8157d4a7":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","c143a569":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","20a80eab":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","4a88e325":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","3c9c38d2":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","d2ed0074":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","887fd438":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","22284329":"#user defined function(long way)\ndef square(x):\n    return x**2\nprint(square(5))\n# lambda function(short way)\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","57397f5e":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","86115690":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","80c9e7e3":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","486d10b4":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list1)))","a673ec32":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ] #list comprehension\nprint(num2)","581fd2a4":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","016ef1d2":"data=pd.read_csv('..\/input\/pokemon.csv')\ndata.columns","55e6dbdb":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.Speed)\/len(data.Speed)\nprint(\"threshold :\",threshold)\ndata[\"speed_level\"] = [\"high\" if i > threshold else \"low\" for i in data.Speed]\ndata.loc[:10,[\"speed_level\",\"Speed\"]] # we will learn loc more detailed later","81b311b9":"LAMBDA FUNCTION\u00b6\nFaster way of writing function","12a862b9":"Up to now, you learn\n\nUser defined function\nScope\nNested function\nDefault and flexible arguments\nLambda function\nAnonymous function\nIterators\nList comprehension","ace04972":"Hello everyone today we are continuing Python Lessons.\nFirst we will learn funtions","e14c5fac":"NESTED FUNCTION\nfunction inside function.\nThere is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","950db7aa":"zip(): zip lists","fe4f3aa7":"ITERATORS\niterable is an object that can return an iterator\niterable: an object with an associated iter() method \nexample: list, strings and dictionaries\niterator: produces next value with next() method","b4c24d65":"[i + 1 for i in num1 ]: list of comprehension \ni +1: list comprehension syntax \nfor i in num1: for loop syntax \ni: iterator \nnum1: iterable object","23def46a":"DEFAULT and FLEXIBLE ARGUMENTS\nDefault argument example: \ndef f(a, b=1):\n  \"\"\" b = 1 is default argument\"\"\"\nFlexible argument example: \ndef f(*args):\n \"\"\" *args can be one or more\"\"\"\n\ndef f(** kwargs)\n \"\"\" **kwargs is a dictionary\"\"\"\n\n\nlets write some code to practice","b2aadb8b":"Lets apply list comprehension pokemon data file","5d832e7f":"\nLIST COMPREHENS\u0130ON\nOne of the most important topic of this kernel \nWe use list comprehension for data analysis often. \nlist comprehension: collapse for loops for building lists into a single line \nEx: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long. We can make it one line code that is list comprehension.","8a47966d":"SCOPE\nWhat we need to know about scope:\n\nglobal: defined main body in script\nlocal: defined in a function\nbuilt in scope: names in predefined built in scope module such as print, len \n\nLets make some basic examples","bf678e3b":"ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n\nmap(func,seq) : applies a function to all the items in a list","9caea0e2":"FUNCTIONS\nUSER DEFINED FUNCTION"}}