{"cell_type":{"26553bc0":"code","6a170099":"code","6fe56df0":"code","439d8cb6":"code","8c5508b1":"code","99c140d5":"code","7992596d":"code","831975d6":"code","903f0014":"code","88daac18":"code","08806d4f":"code","0da4067e":"code","b1c0497e":"code","33dfed55":"code","c64827ea":"code","c7c23a1f":"code","c6a411d1":"code","f3e5e8b0":"code","9c4a8549":"code","54123235":"code","a760d715":"code","96f9e3fb":"code","f3dab61d":"code","e68ed2da":"code","57433775":"code","99b5ad27":"code","93d3d180":"code","da72acb9":"code","ca65ab5c":"code","1f43d7e6":"code","06f88cda":"code","01155f12":"code","b4b42968":"code","b150a4d3":"code","aa60cadc":"code","76f64812":"code","69d95f72":"code","fdbff642":"code","6a5f76f2":"code","9f7cef32":"code","386f56c6":"code","dc1b47e8":"code","7cb5c1ba":"code","d741cbef":"code","60adfcd6":"code","da6bc629":"code","e7ff53ee":"code","095b1913":"code","44c80653":"code","c7a24aee":"code","257c006f":"code","d3c8d2be":"code","4909be6b":"code","af14458b":"code","323175e3":"code","6786a29e":"code","3c7a27d6":"code","1893c02a":"code","db2ff213":"code","4f26aa59":"code","9f29a7dc":"code","3557ca26":"code","9af5a92e":"code","033d19d1":"code","fd5f7722":"code","6b7d82d0":"code","bf123f3e":"code","5ebf6e96":"code","5fe56d34":"code","24606d8c":"code","edefe0ed":"code","f8bb6c86":"code","ea1ad6ef":"code","7813eee4":"code","2706b333":"code","a122d863":"code","add9ef4f":"code","e0de9e58":"code","f36dcbf0":"code","de2ad2b5":"code","182b0133":"code","aa8973fd":"code","93df7e9e":"code","7dd73481":"markdown","4ebf680d":"markdown","d5eafa0a":"markdown","bc202b97":"markdown","62a29010":"markdown","a8a66cc4":"markdown","d863955a":"markdown","69aaf314":"markdown","2029b974":"markdown","dd4b089a":"markdown","b42468c5":"markdown"},"source":{"26553bc0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n","6a170099":"movie=pd.read_csv(r'\/kaggle\/input\/cinema-movie\/Movie_regression.csv')\nmovie.head()","6fe56df0":"movie.info()","439d8cb6":"movie.shape","8c5508b1":"movie.describe()","99c140d5":"round((movie.isnull().sum() * 100 \/ len(movie)),2)","7992596d":"\nsns.distplot(movie['Time_taken'])\nplt.show()","831975d6":"movie['Time_taken'].describe()","903f0014":"movie['Time_taken'].fillna(movie['Time_taken'].mean(), inplace = True) ","88daac18":"movie.info()","08806d4f":"movie['Collection']=movie['Collection'].astype('float')\nmovie['Num_multiplex']=movie['Num_multiplex'].astype('float')\nmovie['Avg_age_actors']=movie['Avg_age_actors'].astype('float')\nmovie['Trailer_views']=movie['Trailer_views'].astype('float')\n","0da4067e":"movie.info()","b1c0497e":"# import pandas_profiling as pp \n# profile = pp.ProfileReport(movie) \n# profile.to_file(\"MovieEDA.html\")","33dfed55":"movie.hist(figsize=(32,20),bins=50)\nplt.xticks(rotation=90)\nplt.show()","c64827ea":"from sklearn.model_selection import train_test_split\n\n# We specify this so that the train and test data set always have the same rows, respectively\nnp.random.seed(0)\ndf_train, df_test = train_test_split(movie, train_size = 0.7, random_state = 42)","c7c23a1f":"df_train.shape, df_test.shape","c6a411d1":"df_train1=df_train.copy()\ndf_test1=df_test.copy()\ndf_train2=df_train.copy()\ndf_test2=df_test.copy()","f3e5e8b0":"dftrain, dfeval = train_test_split(df_train, train_size = 0.8, random_state = 42)","9c4a8549":"X_train=dftrain.drop('Collection',axis=1)\ny_train=dftrain['Collection']\nX_test=df_test.drop('Collection',axis=1)\ny_test=df_test['Collection']\nX_eval=dfeval.drop('Collection',axis=1)\ny_eval=dfeval['Collection']","54123235":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_train.head()","a760d715":"X_eval[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_eval[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_eval.head()","96f9e3fb":"X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.transform(X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_test.head()","f3dab61d":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\n\nmodel.fit(X_train,y_train,cat_features=([11, 14]),eval_set=(X_eval, y_eval))\n\n","e68ed2da":"score_cbr=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:\", score_cbr)","57433775":"from sklearn.metrics import mean_squared_error\nrmse_cbr=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:',rmse_cbr)","99b5ad27":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:\",RMSLE_cbr)","93d3d180":"dftrain, dfeval = train_test_split(df_train1, train_size = 0.8, random_state = 42)","da72acb9":"X_train=dftrain.drop('Collection',axis=1)\ny_train=dftrain['Collection']\nX_test=df_test1.drop('Collection',axis=1)\ny_test=df_test1['Collection']\nX_eval=dfeval.drop('Collection',axis=1)\ny_eval=dfeval['Collection']","ca65ab5c":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_train.head()","1f43d7e6":"X_eval[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_eval[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_eval.head()","06f88cda":"X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.transform(X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_test.head()","01155f12":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\n\nmodel.fit(X_train,y_train,cat_features=([11, 14]),eval_set=(X_eval, y_eval))\n","b4b42968":"score_cbr1=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler:\", score_cbr1)","b150a4d3":"\nfrom sklearn.metrics import mean_squared_error\nrmse_cbr1=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler:',rmse_cbr1)","aa60cadc":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr1=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler:\",RMSLE_cbr1)","76f64812":"dftrain, dfeval = train_test_split(df_train2, train_size = 0.8, random_state = 42)","69d95f72":"X_train=dftrain.drop('Collection',axis=1)\ny_train=dftrain['Collection']\nX_test=df_test2.drop('Collection',axis=1)\ny_test=df_test2['Collection']\nX_eval=dfeval.drop('Collection',axis=1)\ny_eval=dfeval['Collection']","fdbff642":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\nmodel.fit(X_train,y_train,cat_features=([11, 14]),eval_set=(X_eval, y_eval))\n","6a5f76f2":"score_cbr2=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping Evaluation Data available & using No Preprocessing :\", score_cbr2)","9f7cef32":"from sklearn.metrics import mean_squared_error\nrmse_cbr2=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping Evaluation Data available & using no Preprocessing :',rmse_cbr2)","386f56c6":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr2=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using No Preprocessing :\",RMSLE_cbr2)","dc1b47e8":"print(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:\",RMSLE_cbr)\nprint(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler  :\",RMSLE_cbr1)\nprint(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using No Preprocessing               :\",RMSLE_cbr2)","7cb5c1ba":"print('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:',rmse_cbr)\nprint('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler  :',rmse_cbr1)\nprint('RMSE CatBoostRegressor with keeping Evaluation Data available & using no Preprocessing               :',rmse_cbr2)","d741cbef":"print(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:\", score_cbr)\nprint(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler  :\", score_cbr1)\nprint(\"Score CatBoostRegressor with keeping Evaluation Data available & using no Preprocessing               :\", score_cbr2)","60adfcd6":"df_train3=df_train.copy()\ndf_train4=df_train.copy()\ndf_train5=df_train.copy()\ndf_test3=df_test.copy()\ndf_test4=df_test.copy()\ndf_test5=df_test.copy()","da6bc629":"X_train=df_train3.drop('Collection',axis=1)\ny_train=df_train3['Collection']\nX_test=df_test3.drop('Collection',axis=1)\ny_test=df_test3['Collection'] ##Let's believe we will get part of evaluation","e7ff53ee":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_train.head()\n","095b1913":"X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.transform(X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_test.head()","44c80653":"X_test.shape,X_train.shape","c7a24aee":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\nmodel.fit(X_train,y_train,cat_features=([11, 14]))\n","257c006f":"score_cbr4=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\", score_cbr4)","d3c8d2be":"from sklearn.metrics import mean_squared_error\nrmse_cbr4=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:',rmse_cbr4)","4909be6b":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr4=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\",RMSLE_cbr4)","af14458b":"X_train=df_train4.drop('Collection',axis=1)\ny_train=df_train4['Collection']\nX_test=df_test4.drop('Collection',axis=1)\ny_test=df_test4['Collection']##Let's believe we will get part of evaluation","323175e3":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.fit_transform(X_train[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_train.head()","6786a29e":"X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n         'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n         'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n         'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']]= scaler.transform(X_test[['Marketing expense', 'Production expense', 'Multiplex coverage',\n                                                        'Budget', 'Movie_length', 'Lead_ Actor_Rating', 'Lead_Actress_rating',\n                                                        'Director_rating', 'Producer_rating', 'Critic_rating', 'Trailer_views',\n                                                        'Time_taken', 'Twitter_hastags', 'Avg_age_actors', 'Num_multiplex']])\nX_test.head()","3c7a27d6":"X_test.shape,X_train.shape","1893c02a":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\nmodel.fit(X_train,y_train,cat_features=([11, 14]))\n","db2ff213":"score_cbr5=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler:\", score_cbr5)","4f26aa59":"from sklearn.metrics import mean_squared_error\nrmse_cbr5=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler:',rmse_cbr5)","9f29a7dc":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr5=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler:\",RMSLE_cbr5)","3557ca26":"X_train=df_train5.drop('Collection',axis=1)\ny_train=df_train5['Collection']\nX_test=df_test5.drop('Collection',axis=1)\ny_test=df_test5['Collection']##Let's believe we will get part of evaluation","9af5a92e":"X_test.shape,X_train.shape","033d19d1":"from catboost import CatBoostRegressor\nmodel=CatBoostRegressor()\ncategorical_features_indices = np.where(X_train.dtypes != np.float)[0]\nmodel.fit(X_train,y_train,cat_features=([11, 14]))\n","fd5f7722":"score_cbr6=model.score(X_test,y_test)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using No Preprocessing :\", score_cbr6)","6b7d82d0":"from sklearn.metrics import mean_squared_error\nrmse_cbr6=mean_squared_error(y_test,model.predict(X_test))**0.5\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using no Preprocessing :',rmse_cbr6)","bf123f3e":"from sklearn.metrics import mean_squared_log_error\nRMSLE_cbr6=np.sqrt(mean_squared_log_error( y_test, model.predict(X_test) ))\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using No Preprocessing :\",RMSLE_cbr6)","5ebf6e96":"print(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\",RMSLE_cbr4)\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :\",RMSLE_cbr5)\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using No Preprocessing               :\",RMSLE_cbr6)","5fe56d34":"print('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:',rmse_cbr4)\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :',rmse_cbr5)\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using no Preprocessing               :',rmse_cbr6)","24606d8c":"print(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\", score_cbr4)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :\", score_cbr5)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using no Preprocessing               :\", score_cbr6)","edefe0ed":"print(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler   :\",RMSLE_cbr)\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\",RMSLE_cbr4)","f8bb6c86":"print(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler     :\",RMSLE_cbr1)\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :\",RMSLE_cbr5)","ea1ad6ef":"print(\"RMSLE for CatBoostRegressor with keeping Evaluation Data available & using No Preprocessing                  :\",RMSLE_cbr2)\nprint(\"RMSLE for CatBoostRegressor with keeping no Evaluation Data available & using No Preprocessing               :\",RMSLE_cbr6)","7813eee4":"print('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler   :',rmse_cbr)\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:',rmse_cbr4)","2706b333":"print('RMSE CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler     :',rmse_cbr1)\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :',rmse_cbr5)","a122d863":"print('RMSE CatBoostRegressor with keeping Evaluation Data available & using no Preprocessing                  :',rmse_cbr2)\nprint('RMSE CatBoostRegressor with keeping no Evaluation Data available & using no Preprocessing               :',rmse_cbr6)","add9ef4f":"print(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as StandardScaler:   \", score_cbr)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler:\", score_cbr4)","e0de9e58":"print(\"Score CatBoostRegressor with keeping Evaluation Data available & using Preprocessing as MinMaxScaler     :\", score_cbr1)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler  :\", score_cbr5)","f36dcbf0":"print(\"Score CatBoostRegressor with keeping Evaluation Data available & using no Preprocessing                  :\", score_cbr2)\nprint(\"Score CatBoostRegressor with keeping no Evaluation Data available & using no Preprocessing               :\", score_cbr6)","de2ad2b5":"score=(score_cbr6,score_cbr5,score_cbr4,score_cbr2,score_cbr1,score_cbr)\nRMSE =(rmse_cbr6,rmse_cbr5,rmse_cbr4,rmse_cbr2,rmse_cbr1,rmse_cbr)\nRMSLE=(RMSLE_cbr6,RMSLE_cbr5,RMSLE_cbr4,RMSLE_cbr2,RMSLE_cbr1,RMSLE_cbr)","182b0133":"acceptedsol=min(RMSLE)\nacceptedsol","aa8973fd":"acceptedsol=max(score)\nacceptedsol","93df7e9e":"acceptedsol=min(RMSE)\nacceptedsol","7dd73481":"Hence, CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as MinMaxScaler can be accepted","4ebf680d":"# We proceed without keeping Evaluation Data ","d5eafa0a":"If Accepted solution is evaluated on **Score**, higher the better","bc202b97":"# Missing Value Treatment ","62a29010":"Hence, Score CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler can be accepted","a8a66cc4":"Hence,RMSE CatBoostRegressor with keeping no Evaluation Data available & using Preprocessing as StandardScaler can be accepted","d863955a":"# During Evaluation ","69aaf314":"# Preprocessing helps to get better & faster results, So suggested to be used.","2029b974":"If Accepted solution is evaluated on **RMSLE**, lower the better ","dd4b089a":"If Accepted solution is evaluated on RMSE, lower the better","b42468c5":"# Summary"}}