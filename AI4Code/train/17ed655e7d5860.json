{"cell_type":{"3c6eebb6":"code","3809efba":"code","d4e60a4a":"code","6c81d5ee":"code","8a457187":"code","0bf03434":"code","14449e7d":"code","ef055a5c":"code","b12469c3":"code","d9824593":"code","fa2fabdc":"code","8bfea2ae":"code","af21135b":"code","c4c7f30d":"code","26100235":"markdown","39c88f6c":"markdown","150602c7":"markdown","84b7ee44":"markdown","7fcd18f9":"markdown","2f4fd695":"markdown"},"source":{"3c6eebb6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3809efba":"#importing datasets\n\ndf = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf2 = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nprint(df.shape)\nprint(df2.shape)","d4e60a4a":"from sklearn.preprocessing import OneHotEncoder\n\nx = np.array(df.drop('label',axis=1))\/255\ny = np.array(df.label)\ntest = np.array(df2)\/255\n\nenc = OneHotEncoder(sparse=False)\ny= y.reshape((-1,1))\ny = enc.fit_transform(y)\n\nprint(x.shape)\nprint(y.shape)\nprint(test.shape)","6c81d5ee":"x_2d = x.reshape((x.shape[0],28,28,1))\ntest_2d = test.reshape((test.shape[0],28,28,1))\n\nprint(x_2d.shape)\nprint(test_2d.shape)","8a457187":"for i in range(5):\n    plt.figure()\n    plt.imshow(np.squeeze(x_2d[i]))","0bf03434":"from sklearn.model_selection import train_test_split as tts\n\nx_train,x_test,y_train,y_test = tts(x_2d,y,test_size = 0.15, random_state=42)\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","14449e7d":"# importing required librery and moduls\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras import applications\n\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.callbacks import ReduceLROnPlateau","ef055a5c":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(64, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size = 3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(128, kernel_size = 4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\n\nmodel.summary()\n","b12469c3":"# setting for early stopping\n\nfrom tensorflow import keras\n\ncallbacks = [\n    keras.callbacks.EarlyStopping(\n        # Stop training when `val_loss` is no longer improving\n        monitor='val_loss',\n        # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n        min_delta=1e-5,\n        # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n        patience=15,\n        verbose=1)\n]","d9824593":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\nhistory = model.fit(x_2d,y,batch_size=64,epochs=600,validation_data=(x_test,y_test))\n\n","fa2fabdc":"plt.plot(history.history['loss'],label='train_loss')\nplt.plot(history.history['val_loss'],label='val_loss')\nplt.xlabel('No. epoch')\nplt.legend()\nplt.show()\n\nplt.figure()\n\nplt.plot(history.history['accuracy'],label='train_accuracy')\nplt.plot(history.history['val_accuracy'],label='test_accuracy')\nplt.xlabel('No. epoch')\nplt.legend()\nplt.show()","8bfea2ae":"scores = model.evaluate(x_test, y_test, verbose = 10 )\nprint ( scores )","af21135b":"predictions=model.predict(test_2d)\npre=predictions.argmax(axis=-1)","c4c7f30d":"submission = pd.Series(pre,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),submission],axis = 1)\nsubmission.to_csv(\"final_submission_lenet5.csv\",index=False)\nsubmission.head()","26100235":"# importing data","39c88f6c":"# Creating CNN model","150602c7":"# reshaping data to make it ready for CNN model (convert to 28*28 array)","84b7ee44":"### Created By :- Faldu jay\n#### Email :- jay.faldu928@gmail.com\n\n\n# ----------------------------------------------------------","7fcd18f9":"# Digit Recognition System on MNIST Dataset Using LeNet-5 CNN Model","2f4fd695":"# Test Trsin Split"}}