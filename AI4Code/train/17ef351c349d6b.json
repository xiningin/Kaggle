{"cell_type":{"c3003d3e":"code","32866b0e":"code","ef65f1de":"code","b6d5d9b3":"code","c66cb7b3":"code","c2ca0b31":"code","ef4f52f4":"code","1de2928d":"code","c47a8bc4":"code","18b7aac9":"code","e9b6084f":"code","813e0a57":"code","a35fbc90":"code","1ab8412f":"code","f79cde7a":"code","b6d99781":"code","cae84102":"code","a4891acd":"code","839c1c41":"code","a61e70bd":"code","c1f09fb4":"code","e4192abd":"code","0d5006bd":"code","b9635a95":"code","cfd8de08":"code","f097dc9d":"code","938f4147":"code","bc9f2919":"code","dbc206c2":"code","71d76d19":"code","1c67bdbc":"code","a8d101b7":"code","61c449b3":"code","7cfa96ac":"code","d3bb9f86":"code","9a72e280":"code","1534ccb8":"markdown","df0124e5":"markdown","e180549c":"markdown","69a6e38e":"markdown","a3b6a863":"markdown","145a630c":"markdown","ceb5d7cf":"markdown"},"source":{"c3003d3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport datetime as dt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split as tts\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_selection import RFE, SelectKBest, chi2, VarianceThreshold\n\nimport xgboost as xgb\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","32866b0e":"df = pd.read_csv(\"\/kaggle\/input\/all-crypto-currencies\/crypto-markets.csv\")","ef65f1de":"df.info()","b6d5d9b3":"df.describe()","c66cb7b3":"dfnum = df.drop(['symbol', 'slug', 'name', 'date'], axis=1)","c2ca0b31":"dfnum.mean()  # Mean value","ef4f52f4":"def dataframe_range(dataframe):  # Data range\n    df_range = pd.DataFrame(dataframe.max() - dataframe.min())\n    return df_range","1de2928d":"dataframe_range(dfnum)","c47a8bc4":"dfnum.std()  # Standard deviation","18b7aac9":"dfnum.std() ** 2  # Dispersion is squared degree of standard deviation","e9b6084f":"df.isnull().sum()  # Checking NULLs, we're lucky","813e0a57":"df = df.drop(['slug'], axis=1)  # Drop useless columns\n\ndf['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')  # Transform date to date object","a35fbc90":"df.head(10)","1ab8412f":"df['ohlc_average'] = (df['open'] + df['high'] + df['low'] + df['close']) \/ 4","f79cde7a":"top10 = df[(df['ranknow'] >= 1) & (df['ranknow'] <= 10)]\ntop10.name.unique()","b6d99781":"fig = px.pie(top10, values='volume', names='name', title='Cryptocurrencies Top-10 by Transaction Volume')\nfig.show()","cae84102":"fig = px.pie(top10, values='market', names='name', title='Cryptocurrencies Top-10 by Market capitalization')\nfig.show()","a4891acd":"fig = tools.make_subplots(subplot_titles=('Time'))\nfor name in top10.name.unique():\n    currency = top10[top10['name'] == name]\n    trace = go.Scatter(x=currency['date'], y=currency['ohlc_average'], name=name)\n    fig.append_trace(trace, 1, 1)\n    \nfig['layout'].update(title='Top-10 Cryptocurrencies exchange rates comparison')\nfig['layout']['yaxis1'].update(title='USD')\nfig.show()","839c1c41":"top10minorCurrencies = df[(df['ranknow'] >= 11) & (df['ranknow'] <= 21)]\n\ntop10minorCurrencies.name.unique()","a61e70bd":"fig = px.pie(top10minorCurrencies, values='volume', names='name', title='Minor Cryptocurrencies by Transaction Volume')\nfig.show()","c1f09fb4":"fig = px.pie(top10minorCurrencies, values='market', names='name', title='Minor Cryptocurrencies by Market capitalization')\nfig.show()","e4192abd":"fig = tools.make_subplots(subplot_titles=('Time'))\nfor name in top10minorCurrencies.name.unique():\n    currency = top10minorCurrencies[top10minorCurrencies['name'] == name]\n    trace = go.Scatter(x=currency['date'], y=currency['ohlc_average'], name=name)\n    fig.append_trace(trace, 1, 1)\n    \nfig['layout'].update(title='Top-10 Cryptocurrencies exchange rates comparison')\nfig['layout']['yaxis1'].update(title='USD')\nfig.show()","0d5006bd":"currency = df[df['name']=='Bitcoin']\ncurrency.head()","b9635a95":"currency['target'] = currency['close'].shift(-30)","cfd8de08":"X = currency.dropna().copy()\nX['year'] = X['date'].apply(lambda x: x.year)\nX['month'] = X['date'].apply(lambda x: x.month)\nX['day'] = X['date'].apply(lambda x: x.day)\nX = X.drop(['date', 'symbol', 'name', 'ranknow', 'target'], axis=1)\n\ny = currency.dropna()['target']\n\nX_train, X_test, y_train, y_test = tts(X, y, test_size=0.2, random_state=1)\n\nX_train.shape, X_test.shape","f097dc9d":"forecast = currency[currency['target'].isnull()]\nforecast = forecast.drop('target', axis=1)\n\nX_forecast = forecast.copy()\nX_forecast['year'] = X_forecast['date'].apply(lambda x: x.year)\nX_forecast['month'] = X_forecast['date'].apply(lambda x: x.month)\nX_forecast['day'] = X_forecast['date'].apply(lambda x: x.day)\nX_forecast = X_forecast.drop(['date', 'symbol', 'name', 'ranknow'], axis=1)","938f4147":"currency = currency.drop('target', axis=1)","bc9f2919":"classifiers = {\n    'LinearRegression': LinearRegression(),\n    'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=1)\n}\n\nsummary = list()\nfor name, clf in classifiers.items():\n    print(name)\n    nada = clf.fit(X_train, y_train)\n    \n    print(f'R2: {r2_score(y_test, clf.predict(X_test)):.2f}')\n    print(f'MAE: {mean_absolute_error(y_test, clf.predict(X_test)):.2f}')\n    print(f'MSE: {mean_squared_error(y_test, clf.predict(X_test)):.2f}')\n    print()\n    \n    summary.append({\n        'MSE': mean_squared_error(y_test, clf.predict(X_test)),\n        'MAE': mean_absolute_error(y_test, clf.predict(X_test)),\n        'R2': r2_score(y_test, clf.predict(X_test)),\n        'name': name,\n    })","dbc206c2":"import xgboost as xgb\n\ndtrain = xgb.DMatrix(X_train.values, y_train.values)\ndtest = xgb.DMatrix(X_test.values)\n\nparam = {\n    'max_depth': 10,\n    'eta': 0.3\n}\nnum_round = 20\nbst = xgb.train(param, dtrain, num_round)\n# make prediction\nprint('XGBoost')\nprint(f'R2: {r2_score(y_test, bst.predict(dtest)):.2f}')\nprint(f'MAE: {mean_absolute_error(y_test, bst.predict(dtest)):.2f}')\nprint(f'MSE: {mean_squared_error(y_test, bst.predict(dtest)):.2f}')\n\nsummary.append({\n    'MSE': mean_squared_error(y_test, bst.predict(dtest)),\n    'MAE': mean_absolute_error(y_test, bst.predict(dtest)),\n    'R2': r2_score(y_test, bst.predict(dtest)),\n    'name': 'XGBoost',\n})","71d76d19":"summary = pd.DataFrame(summary)\n\nfig = tools.make_subplots(rows=1, cols=3, subplot_titles=(\n    'R-\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430', '\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430', '\u0421\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430'\n))\n\ntrace0 = go.Bar(x=summary['name'], y=summary['R2'], name='R2')\nfig.append_trace(trace0, 1, 1)\n\ntrace1 = go.Bar(x=summary['name'], y=summary['MAE'], name='MAE')\nfig.append_trace(trace1, 1, 2)\n\ntrace2 = go.Bar(x=summary['name'], y=summary['MSE'], name='MSE')\nfig.append_trace(trace2, 1, 3)\n\nfig['layout'].update(title='\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a')\nfig['layout'].update(showlegend=False)\n\npy.iplot(fig)","1c67bdbc":"clf = LinearRegression()\nclf.fit(X_train, y_train)\ntarget = clf.predict(X_forecast)\n\nfinal = pd.concat([currency, forecast])\nfinal = final.groupby('date').sum()\n\nday_one_forecast = currency.iloc[-1].date + dt.timedelta(days=1)\ndate = pd.date_range(day_one_forecast, periods=30, freq='D')\npredictions = pd.DataFrame(target, columns=['target'], index=date)\nfinal = final.append(predictions)\nfinal.index.names = ['date']\nfinal = final.reset_index()","a8d101b7":"trace0 = go.Scatter(\n    x=final['date'], y=final['close'],\n    name='Close'\n)\n\ntrace1 = go.Scatter(\n    x=final['date'], y=final['target'],\n    name='Target'\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430 BTC \u043f\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438',\n    yaxis={\n        'title': 'USD',\n        'nticks': 10,\n    },\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","61c449b3":"clf = RandomForestRegressor(n_estimators=100, random_state=1)\nclf.fit(X_train, y_train)\ntarget = clf.predict(X_forecast)\n\nfinal = pd.concat([currency, forecast])\nfinal = final.groupby('date').sum()\n\nday_one_forecast = currency.iloc[-1].date + dt.timedelta(days=1)\ndate = pd.date_range(day_one_forecast, periods=30, freq='D')\npredictions = pd.DataFrame(target, columns=['target'], index=date)\nfinal = final.append(predictions)\nfinal.index.names = ['date']\nfinal = final.reset_index()","7cfa96ac":"trace0 = go.Scatter(\n    x=final['date'], y=final['close'],\n    name='Close'\n)\n\ntrace1 = go.Scatter(\n    x=final['date'], y=final['target'],\n    name='Target'\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430 BTC \u043f\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u043c',\n    yaxis={\n        'title': 'USD',\n        'nticks': 10,\n    },\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","d3bb9f86":"dtrain = xgb.DMatrix(X_train.values, y_train.values)\ndtest = xgb.DMatrix(X_test.values)\n\nparam = {\n    'max_depth': 10,\n    'eta': 0.3\n}\nnum_round = 20\nbst = xgb.train(param, dtrain, num_round)\n\nX_forecast = xgb.DMatrix(X_forecast.values)\ntarget = bst.predict(X_forecast)\n\nfinal = pd.concat([currency, forecast])\nfinal = final.groupby('date').sum()\n\nday_one_forecast = currency.iloc[-1].date + dt.timedelta(days=1)\ndate = pd.date_range(day_one_forecast, periods=30, freq='D')\npredictions = pd.DataFrame(target, columns=['target'], index=date)\nfinal = final.append(predictions)\nfinal.index.names = ['date']\nfinal = final.reset_index()","9a72e280":"trace0 = go.Scatter(\n    x=final['date'], y=final['close'],\n    name='Close'\n)\n\ntrace1 = go.Scatter(\n    x=final['date'], y=final['target'],\n    name='Target'\n)\n\ndata = [trace0, trace1]\nlayout = go.Layout(\n    title='\u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u0430 BTC \u043f\u043e xgboost',\n    yaxis={\n        'title': 'USD',\n        'nticks': 10,\n    },\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","1534ccb8":"Adding minor cryptocurrencies that not affect too much on the market","df0124e5":"Checking other currencies","e180549c":"*Volume* - All trades buys and sells that were made during that time (for example 24 hours like coinmarketcap does by default).\n\n*Circulating supply* - number of coins mined and existing right now.\n\n*Marketcap* = circulating supply multiply by price of coin.","69a6e38e":"**This is the final project in Data Analysis.**\n\nGoals:\n1. Analyze the cryptocurrency market in the selected time period\n2. Try to predict the results of exchange rates (without focusing on events)\n3. Analyze current profitability and risk\n4. Prepare forecasted financial statements\n5. Analyze the share of cryptocurrencies in the economy","a3b6a863":"Traders still love to analyze the concept of HLC (and OHLC|HL) [proof](https:\/\/www.mypivots.com\/dictionary\/definition\/92\/hlc-3)","145a630c":"Read the data and drop the symbols","ceb5d7cf":"Description of variables\n\n* slug - unique name of cryptocurrency (text)\n* symbol - unique short name (text)\n* name - name of cryptocurrency (text)\n* date - dates (categorical)\n* ranknow - market entry (ordinal)\n* open - starting bid price (numerical)\n* high - highest bid price (numerical)\n* low - lowest bid price (numerical)\n* close - closing bid price (numerical)\n* volume - number of transactions (quantitative)\n* market - market capitalization (numerical)\n* close_ratio - difference between open and close price (numerical)\n* spread - difference between the lowest and the highest price (numerical)"}}