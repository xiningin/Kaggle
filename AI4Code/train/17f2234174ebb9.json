{"cell_type":{"5c7f4c67":"code","ca6be41d":"code","8ecee812":"code","95d31950":"code","3db77ee9":"code","b6feb332":"code","182a4897":"code","f141907d":"code","ef352727":"code","533b48bd":"code","62ca2aae":"code","222e5ebf":"code","482b9011":"code","cfb49c37":"code","d964b82b":"code","dcfe7cfe":"code","febeadec":"code","4a944a52":"code","a3e0cae4":"code","a7246686":"code","27e30bb3":"code","ea68d80c":"code","42eb28f0":"code","82f0b92a":"code","4cf3f967":"code","a53bac7b":"code","26f9129e":"code","fcb8ae44":"code","d3c662d9":"markdown","9e12aeb9":"markdown","c13d8d0b":"markdown","29ec78d2":"markdown","3ca8ed37":"markdown","92d28359":"markdown"},"source":{"5c7f4c67":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n!pip install chart_studio\nimport chart_studio.plotly as py\n\nfrom plotly.subplots import make_subplots","ca6be41d":"df = pd.read_csv('survey.csv')\ndf.head()","8ecee812":"df.columns","95d31950":"df.describe(include='all')","3db77ee9":"x = df.Gender.value_counts().index.tolist()[::-1]\ny = df.Gender.value_counts().tolist()[::-1]\ndata = pd.DataFrame({'name': x, 'count': y})\n\nfig = px.bar(data, x=\"count\", y=\"name\", orientation='h')\n\n# Update Figure Visuals\nfig.update_layout(\n    height=1000, width=800, \n    template=\"plotly_dark\",\n    title_text=\"Gender Count\" # Name of Plot\n    )\n\nfig.show()","b6feb332":"# Interactive tool to relabel Gender Pronouns\n# If Male pronoun enter 1\n# If Female pronoun enter 2\n# If Other, press any other button\n\nmale_pronouns = []\nfemale_pronouns =[]\nother = []\n\nfor p in df.Gender.unique():\n  print(p)\n  x = input()\n  if x == '1': # male\n    male_pronouns.append(p)\n  elif x == '2': # female\n    female_pronouns.append(p)\n  else: # other\n    other.append(p)","182a4897":"# After Relabeling, these are the final listing of pronouns\nmale_pronouns = ['M', 'Male', 'male', 'm', 'Male-ish', 'maile', 'Cis Male', \n                 'Mal', 'Male (CIS)', 'Make', 'Male ', 'Man', 'msle', 'Mail', \n                 'cis male', 'Malr', 'Cis Man']\n\nfemale_pronouns = ['Female', 'female', 'Cis Female', 'F', 'Woman', 'f', \n                   'Femake', 'woman', 'Female ', 'cis-female\/femme', \n                   'Female (cis)', 'femail']\n\nother = ['Trans-female', 'something kinda male?', 'queer\/she\/they', \n         'non-binary', 'Nah', 'All', 'Enby', 'fluid', 'Genderqueer', \n         'Androgyne', 'Agender', 'Guy (-ish) ^_^', 'male leaning androgynous', \n         'Trans woman', 'Neuter', 'Female (trans)', 'queer', \n         'A little about you', 'p', \n         'ostensibly male, unsure what that really means']\n","f141907d":"# Change the names of some genders\nreduced_pronouns = [{p: 'Male' for p in male_pronouns},\n                    {p: 'Female' for p in female_pronouns},\n                    {p: 'Other' for p in other}]\n\nfor p in reduced_pronouns:\n  df.Gender = df.Gender.replace(p)","ef352727":"df.Gender.value_counts()","533b48bd":"# check value count\nx = df.Gender.value_counts().index.tolist()\ny = df.Gender.value_counts().tolist()\n\nfig = make_subplots(rows=1, cols=2)\n\n# Initialize figure with subplots\nfig = make_subplots(\n    rows=1, cols=2,\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\n\n\nDEFAULT_PLOTLY_COLORS=['rgb(31, 119, 180)', 'rgb(255, 127, 14)',\n                       'rgb(44, 160, 44)', 'rgb(214, 39, 40)',\n                       'rgb(148, 103, 189)', 'rgb(140, 86, 75)',\n                       'rgb(227, 119, 194)', 'rgb(127, 127, 127)',\n                       'rgb(188, 189, 34)', 'rgb(23, 190, 207)']\n\ncolors = DEFAULT_PLOTLY_COLORS[:len(x)]\n\n# Add bar graph of Gender Count\nfig.add_trace(\n    go.Bar(x=x, y=y,\n           text=y,\n           textposition='auto',\n           marker_color=colors,\n           showlegend=False), \n    row=1, col=1\n)\n\n# Add pie chart of Gender Count\nfig.add_trace(\n    go.Pie(labels=x, values=y,\n           marker_colors=colors\n           ),\n    row=1, col=2\n)\n\n# Update Figure Visuals\nfig.update_layout(\n    height=600, width=800, \n    template=\"plotly_dark\",\n    title_text=\"Gender Count\" # Name of Plot\n    )\n\nfig.show()","62ca2aae":"x = df.state.value_counts().index.tolist()\ny = df.state.value_counts().tolist()\n\nfig = go.Figure(go.Bar(x=x,y=y))\n\nfig.show()","222e5ebf":"import plotly.express as px\n# survey sample population in USA\nfig = px.choropleth(locations=x, locationmode=\"USA-states\", color=y, \n                    scope=\"usa\",\n                    color_continuous_scale = 'Reds')\n\nfig.update_layout(\n    title_text = '2014 Mental Health Survey',\n    geo_scope='usa', # limite map scope to USA\n)\n\nfig.show()","482b9011":"# oldest person ever lived is 122\n# assume only employing adults (>18)\nidx = (df.Age >= 18) & (df.Age < 122)\n\nx = df.Age[idx].value_counts().index.tolist()\ny = df.Age[idx].value_counts().tolist()\n\nfig = go.Figure(\n    go.Bar(x=x,y=y)\n    )\n\nfig.update_layout(\n    title_text = 'Age distribution',\n    \n)\n\nfig.show()","cfb49c37":"# Add histogram data\nidx = (df.Age >= 18) & (df.Age < 122)\nx1 = df.Age[idx][df.Gender=='Male']\nx2 = df.Age[idx][df.Gender=='Female']\n\n# Group data together\nhist_data = [x1, x2]\n\ngroup_labels = ['Male', 'Female']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels)\nfig.show()","d964b82b":"# Add histogram data\nidx = (df.Age >= 18) & (df.Age < 122) & (df.tech_company=='Yes')\nx1 = df.Age[idx][df.Gender=='Male']\nx2 = df.Age[idx][df.Gender=='Female']\n\n# Group data together\nhist_data = [x1, x2]\n\ngroup_labels = ['Male', 'Female']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels)\nfig.show()","dcfe7cfe":"column_names = ['Timestamp', 'Age', 'Gender', 'Country', 'state', 'self_employed',\n                'family_history', 'treatment', 'work_interfere', 'no_employees',\n                'remote_work', 'tech_company', 'benefits', 'care_options',\n                'wellness_program', 'seek_help', 'anonymity', 'leave',\n                'mental_health_consequence', 'phys_health_consequence', 'coworkers',\n                'supervisor', 'mental_health_interview', 'phys_health_interview',\n                'mental_vs_physical', 'obs_consequence', 'comments']","febeadec":"ordered_labels = {\n    'Gender': ['Male', 'Female', 'Other'],\n    'anonymity': ['No', 'Yes', \"Don't know\"],\n    'benefits': ['No', 'Yes', \"Don't know\"],\n    'care_options': ['No', 'Yes', 'Not sure'],\n    'coworkers': ['No', 'Some of them', 'Yes'],\n    'family_history': ['No', 'Yes'],\n    'leave': ['Very difficult',\n      'Somewhat difficult',\n      'Somewhat easy',\n      'Very easy',\n      \"Don't know\"],\n    'mental_health_consequence': ['No', 'Maybe', 'Yes'],\n    'mental_health_interview': ['No', 'Maybe', 'Yes'],\n    'mental_vs_physical': ['No', 'Yes', \"Don't know\"],\n    'no_employees': ['1-5',\n      '6-25',\n      '26-100',\n      '100-500',\n      '500-1000',\n      'More than 1000'],\n    'obs_consequence': ['No', 'Yes'],\n    'phys_health_consequence': ['No', 'Maybe', 'Yes'],\n    'phys_health_interview': ['No', 'Maybe', 'Yes'],\n    'remote_work': ['No', 'Yes'],\n    'seek_help': ['No', 'Yes', \"Don't know\"],\n    'self_employed': ['No', 'Yes'],\n    'supervisor': ['No', 'Some of them', 'Yes'],\n    'tech_company': ['No', 'Yes'],\n    'treatment': ['No', 'Yes'],\n    'wellness_program': ['No', 'Yes', \"Don't know\"],\n    'work_interfere': ['Never', 'Rarely', 'Sometimes', 'Often']\n    }","4a944a52":"# find all columns with at most 5 unique entries for bar graph\nbars = []\nfor c in df.columns:\n  if len(df[c].unique()) <=6:\n    bars.append(c)\n\nsize = round(len(bars)**(1\/2))\n\nfig = make_subplots(\n    rows=size, cols=size,\n    subplot_titles=bars)\n\nj = 1\nfor i, c in enumerate(bars):\n  x_temp = df[c].value_counts().index.tolist()\n  y_temp = df[c].value_counts().tolist()\n\n  # resort x labels\n  x = []\n  y = []\n  for label in ordered_labels[c]:\n    try:\n      index = x_temp.index(label)\n      x.append(x_temp[index])\n      y.append(y_temp[index])\n    except Exception as e:\n      x.append(label)\n      y.append(0)\n\n  if i % size == 0 and i > 0:\n      j += 1\n\n  # add figure to subplot\n  fig.add_trace(go.Bar(x=x, y=y, \n                       text=y,\n                       textposition='auto',\n                       showlegend=False),\n                row=j, col=(i % size)+1)\n  \nfig.update_layout(title_text=\"2014 Health Survey In Tech\",\n                  height=1000, \n                  # width=800, \n                  )\n\nfig.show()","a3e0cae4":"import plotly.graph_objects as go\ndef stacked_horizontal_bar(x_data, y_data, top_labels):\n  # function to display stacked horizontal bar chart\n\n  colors = ['rgba(38, 24, 74, 0.8)', 'rgba(71, 58, 131, 0.8)',\n          'rgba(122, 120, 168, 0.8)', 'rgba(164, 163, 204, 0.85)',\n          'rgba(190, 192, 213, 1)']\n  \n  colors = colors[:len(top_labels)]\n\n  fig = go.Figure()\n\n  for i in range(0, len(x_data[0])):\n      for xd, yd in zip(x_data, y_data):\n          fig.add_trace(go.Bar(\n              x=[xd[i]], y=[yd],\n              width=0.75,\n              orientation='h',\n              marker=dict(\n                  color=colors[i],\n                  line=dict(color='rgb(248, 248, 249)', width=1)\n              )\n          ))\n\n  fig.update_layout(\n      xaxis=dict(\n          showgrid=False,\n          showline=False,\n          showticklabels=False,\n          zeroline=False,\n          domain=[0.15, 1]\n      ),\n      yaxis=dict(\n          showgrid=False,\n          showline=False,\n          showticklabels=False,\n          zeroline=False,\n      ),\n      barmode='stack',\n      paper_bgcolor='rgb(248, 248, 255)',\n      plot_bgcolor='rgb(248, 248, 255)',\n      margin=dict(l=120, r=10, t=100, b=80),\n      showlegend=False,\n  )\n\n  annotations = []\n\n  for yd, xd in zip(y_data, x_data):\n      # labeling the y-axis\n      annotations.append(dict(xref='paper', yref='y',\n                              x=0.14, y=yd,\n                              xanchor='right',\n                              text=str(yd),\n                              font=dict(family='Arial', size=14,\n                                        color='rgb(67, 67, 67)'),\n                              showarrow=False, align='right'))\n      # labeling the first percentage of each bar (x_axis)\n      annotations.append(dict(xref='x', yref='y',\n                              x=xd[0] \/ 2, y=yd,\n                              text=str(xd[0]) + '%',\n                              font=dict(family='Arial', size=14,\n                                        color='rgb(248, 248, 255)'),\n                              showarrow=False))\n      # labeling the first Likert scale (on the top)\n      if yd == y_data[-1]:\n          annotations.append(dict(xref='x', yref='paper',\n                                  x=xd[0] \/ 2, y=1.1,\n                                  text=top_labels[0],\n                                  font=dict(family='Arial', size=14,\n                                            color='rgb(67, 67, 67)'),\n                                  showarrow=False))\n      space = xd[0]\n      for i in range(1, len(xd)):\n              # labeling the rest of percentages for each bar (x_axis)\n              annotations.append(dict(xref='x', yref='y',\n                                      x=space + (xd[i]\/2), y=yd,\n                                      text=str(xd[i]) + '%',\n                                      font=dict(family='Arial', size=14,\n                                                color='rgb(248, 248, 255)'),\n                                      showarrow=False))\n              # labeling the Likert scale\n              if yd == y_data[-1]:\n                  annotations.append(dict(xref='x', yref='paper',\n                                          x=space + (xd[i]\/2), y=1.1,\n                                          text=top_labels[i],\n                                          font=dict(family='Arial', size=14,\n                                                    color='rgb(67, 67, 67)'),\n                                          showarrow=False))\n              space += xd[i]\n\n  fig.update_layout(annotations=annotations)\n\n  fig.show()","a7246686":"top_labels = ['No', 'Yes']\n\ny_data = ['tech_company',\n          'self_employed',\n          'family_history',\n          'treatment',\n          'remote_work',\n          'obs_consequence'\n]\n# reorder because labeling is inverted\ny_data = list(reversed(y_data))\n\n# return percentages\nx_data = []\nfor label in y_data:\n  d = df[label].value_counts() \/ sum(df[label].value_counts())\n  d = round(d*100, 0).apply(int)\n  x_data.append(list(d))\n\ny_data_description = {\n    'self_employed' : 'Are you self-employed?',\n\n    'family_history' : 'Do you have a family <br>'+ \n                      'history of mental illness?',\n\n    'treatment' : 'Have you sought treatment <br>' +\n                  'for a mental health condition?',   \n\n    'remote_work' : 'Do you work remotely<br>'+ \n                  'at least 50% of the time?',\n\n    'tech_company' : 'Is your employer primarily<br>'+\n                    'a tech company\/organization?',\n\n    'obs_consequence' : 'Have you heard of or observed<br>'+\n                        'negative consequences for<br>'+\n                        'coworkers with mental health<br>' + \n                        'conditions in your workplace?'\n}\n\n\ny_data = [y_data_description[y] for y in y_data]\n\nstacked_horizontal_bar(x_data, y_data, top_labels)","27e30bb3":"top_labels = ['No', 'Yes', 'Don\\'t Know']\n\ny_data = ['benefits',\n          'care_options',\n          'wellness_program',\n          'mental_vs_physical',\n          'seek_help',\n          'anonymity'\n]\n\n# reorder because labeling is inverted\ny_data = list(reversed(y_data))\n\n# return percentages\nx_data = []\nfor label in y_data:\n  d = df[label].value_counts() \/ sum(df[label].value_counts())\n  d = round(d*100, 0).apply(int)\n  x_data.append(list(d))\n\ny_data_description = {\n    'benefits' : \n      'Does your employer provide<br>' +\n      'mental health benefits?',\n\n    'care_options' : \n      'Do you know the options for<br>' +\n      'mental health care your employer provides?',\n\n    'wellness_program' : \n      'Has your employer ever discussed<br>' + \n      'mental health as part of an employee<br>' +\n      'wellness program?',   \n\n    'mental_vs_physical': \n      'Do you feel that your employer takes<br>' + \n      'mental health as seriously as<br>' + \n      'physical health?',\n\n    'seek_help' : \n      'Does your employer provide resources<br>' +\n      'to learn more about mental health issues<br>' + \n      'and how to seek help?',\n\n    'anonymity' : \n      'Is your anonymity protected if you choose<br>' + \n      'to take advantage of mental health or<br>' +\n      'substance abuse treatment resources?',\n}\n\n\ny_data = [y_data_description[y] for y in y_data]\n\nstacked_horizontal_bar(x_data, y_data, top_labels)","ea68d80c":"top_labels = ['No', 'Maybe', 'Yes']\n\ny_data = ['mental_health_consequence',\n          'mental_health_interview',\n          'phys_health_consequence',\n          'phys_health_interview'\n]\n\n# reorder because labeling is inverted\ny_data = list(reversed(y_data))\n\n# return percentages\nx_data = []\nfor label in y_data:\n  d = df[label].value_counts() \/ sum(df[label].value_counts())\n  d = round(d*100, 0).apply(int)\n  x_data.append(list(d))\n\ny_data_description = {\n    'mental_health_consequence' : \n      'Do you think that discussing a<br>' +\n      'mental health issue with your<br>' +\n      'employer would have<br>' + \n      'negative consequences?',\n\n\n    'phys_health_consequence' : \n      'Do you think that discussing a<br>' + \n      'physical health issue with your<br>' + \n      'employer would have<br>' + \n      'negative consequences?',\n\n    'mental_health_interview' : \n      'Would you bring up a mental health<br>' + \n      'issue with a potential<br>' + \n      'employer in an interview?', \n\n    'phys_health_interview': \n      'Would you bring up a physical<br>' + \n      'health issue with a potential<br>' + \n      'employer in an interview?'\n}\n\n\ny_data = [y_data_description[y] for y in y_data]\n\nstacked_horizontal_bar(x_data, y_data, top_labels)","42eb28f0":"top_labels = ['No', 'Some of them', 'Yes']\n\ny_data = ['coworkers',\n          'supervisor',\n]\n\n# reorder because labeling is inverted\ny_data = list(reversed(y_data))\n\n# return percentages\nx_data = []\nfor label in y_data:\n  d = df[label].value_counts() \/ sum(df[label].value_counts())\n  d = round(d*100, 0).apply(int)\n  x_data.append(list(d))\n\ny_data_description = {\n    'coworkers' : \n      'Would you be willing to discuss<br>'+\n      'a mental health issue<br>' +\n      'with your coworkers?',\n\n    'supervisor' : \n      'Would you be willing to discuss<br>' +\n      'a mental health issue<br>' +\n      'with your direct supervisor(s)?'\n}\n\n\ny_data = [y_data_description[y] for y in y_data]\n\nstacked_horizontal_bar(x_data, y_data, top_labels)","82f0b92a":"# MALE VS FEMALE\ndef cat_plot(df, CAT_x, CAT_y, title=\"\"):\n  \"\"\"\n  Categorical plot to display between 2 variables\n  Displays the plot\n\n  CAT_x is x-axis\n  CAT_y is y-axis\n\n  title is name of entire plot\n  \"\"\"\n\n  CAT_x, CAT_y = CAT_y, CAT_x # to lazy to change code below, easier to swap\n\n  fig = make_subplots(\n      rows=1, cols=1,\n      subplot_titles=[f'{CAT_y} vs. {CAT_x}'])\n\n  for label_x in ordered_labels[CAT_x]:\n\n    data = df[CAT_y][df[CAT_x] == label_x].value_counts()\n\n    \n    x_temp = data.index.tolist()\n    y_temp = data.tolist()\n\n    # resort x labels\n    x = []\n    y = []\n    for label_y in ordered_labels[CAT_y]:\n      try: # element not in list\n        index = x_temp.index(label_y)\n        x.append(x_temp[index])\n        y.append(y_temp[index])\n      except Exception as e:\n        x.append(label_y)\n        y.append(0)\n\n\n    fig.add_trace(go.Bar(x=x,\n                        y=y,\n                        text=y,\n                        textposition='auto',\n                        showlegend=True,\n                        name=label_x))\n  \n  fig.update_layout(title_text=f\"2014 Health Survey In Tech-{title}\",\n                  height=300, \n                  width=800, \n                  )\n\n  fig.show()","4cf3f967":"column_names = ['Timestamp', 'Age', 'Gender', 'Country', 'state', 'self_employed',\n                'family_history', 'treatment', 'work_interfere', 'no_employees',\n                'remote_work', 'tech_company', 'benefits', 'care_options',\n                'wellness_program', 'seek_help', 'anonymity', 'leave',\n                'mental_health_consequence', 'phys_health_consequence', 'coworkers',\n                'supervisor', 'mental_health_interview', 'phys_health_interview',\n                'mental_vs_physical', 'obs_consequence', 'comments']","a53bac7b":"CAT_x = 'family_history' # category on x label\nCAT_y = 'obs_consequence' # category on y label\ncat_plot(df,\n    CAT_x, CAT_y)","26f9129e":"def cat_plot_3(df, x, y, z):\n  \"\"\"\n  3 dim categorical plot\n  x is x-axis\n  y is y-axis\n  z is different plot\n  \"\"\"\n  for label in ordered_labels[z]:\n    cat_plot(df[df[z] == label],\n             CAT_x, CAT_y,\n             title=f'{z}={label}')\n\nCAT_x = 'family_history' # category on x label\nCAT_y = 'obs_consequence' # category on y label\nCAT_z = 'tech_company'\n\ncat_plot_3(df, CAT_x, CAT_y, CAT_z)","fcb8ae44":"# Python program to generate WordCloud \n  \n# importing all necessery modules \nfrom wordcloud import WordCloud, STOPWORDS \nimport matplotlib.pyplot as plt \nimport pandas as pd \nfrom tqdm.auto import tqdm # loading bar\n  \ncomment_words = '' \nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in tqdm(df.comments[~df.comments.isnull()]):\n      \n  # typecaste each val to string \n  val = str(val) \n\n  # split the value \n  tokens = val.split() \n    \n  # Converts each token into lowercase \n  for i in range(len(tokens)): \n      tokens[i] = tokens[i].lower() \n    \n  comment_words += \" \".join(tokens)+\" \"\n\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10).generate(comment_words) \n\n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","d3c662d9":"We can see from our sample, women tend to be younger than men","9e12aeb9":"# Distribution of Gender","c13d8d0b":"# Distribution of Gender in Tech","29ec78d2":"# Introduction\n\nThis notebook was originally created using Google Colab. To view plots created in the original notebook, visit [here](https:\/\/colab.research.google.com\/drive\/1XjXAFhTO6oikEyjOUh0YWw0-rdjR0b-L?usp=sharing).\n\n# Dataset Information\n\nThis dataset is from a **2014** survey that measures attitudes towards mental health and frequency of mental health disorders in the tech workplace. You are also encouraged to analyze data from the ongoing 2016 survey found here.\n\nhttps:\/\/www.kaggle.com\/osmi\/mental-health-in-tech-2016\n\n## Content\n\nThis dataset contains the following data:\n\n\n\n*   Timestamp\n*   Age\n*   Gender\n*   Country\n*   state: If you live in the United States, which state or territory do you live in?\n* self_employed: Are you self-employed?\n\n* family_history: Do you have a family history of mental illness?\n\n* treatment: Have you sought treatment for a mental health condition?\n\n* work_interfere: If you have a mental health condition, do you feel that it interferes with your work?\n\n* no_employees: How many employees does your company or organization have?\n\n* remote_work: Do you work remotely (outside of an office) at least 50% of the time?\n\n* tech_company: Is your employer primarily a tech company\/organization?\n\n* benefits: Does your employer provide mental health benefits?\n\n* care_options: Do you know the options for mental health care your employer provides?\n\n* wellness_program: Has your employer ever discussed mental health as part of an employee wellness program?\n\n* seek_help: Does your employer provide resources to learn more about mental health issues and how to seek help?\n\n* anonymity: Is your anonymity protected if you choose to take advantage of mental health or substance abuse treatment resources?\n\n* leave: How easy is it for you to take medical leave for a mental health condition?\n\n* mentalhealthconsequence: Do you think that discussing a mental health issue with your employer would have negative consequences?\n\n* physhealthconsequence: Do you think that discussing a physical health issue with your employer would have negative consequences?\n\n* coworkers: Would you be willing to discuss a mental health issue with your coworkers?\n\n* supervisor: Would you be willing to discuss a mental health issue with your direct supervisor(s)?\n\n* mentalhealthinterview: Would you bring up a mental health issue with a potential employer in an interview?\n\n* physhealthinterview: Would you bring up a physical health issue with a potential employer in an interview?\n\n* mentalvsphysical: Do you feel that your employer takes mental health as seriously as physical health?\n\n* obs_consequence: Have you heard of or observed negative consequences for coworkers with mental health conditions in your workplace?\n\n* comments: Any additional notes or comments\n","3ca8ed37":"# Exploratory Data Analysis\n\nhttps:\/\/www.kaggle.com\/osmi\/mental-health-in-tech-survey","92d28359":"# NLP - WordCloud for comments"}}