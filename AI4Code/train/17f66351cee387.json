{"cell_type":{"7c0304be":"code","078b6fe2":"code","5b46b21f":"code","31bf3ad2":"code","68c74277":"code","7a6e020b":"code","697eeaa2":"code","904140cf":"code","ce35a322":"code","6178523c":"code","d2278cad":"code","8dd0e66e":"code","c7b30bd0":"code","70efdddb":"code","574cc4a4":"code","a830ca90":"code","5c02eecb":"code","43055a90":"code","10feb1d6":"code","e22fe65d":"code","e236f42e":"code","83c17049":"code","bfb44077":"code","1e5d4b9c":"code","30c5268d":"code","165a1c68":"code","bc820035":"code","42381d46":"code","1f3dad36":"code","7529df9e":"code","9c7781cf":"code","e371b02e":"code","5106f09e":"code","5ec72b24":"markdown","3541147b":"markdown","1d8e9b81":"markdown","dd54119f":"markdown","c9886c03":"markdown","e7cfd449":"markdown","9c8d38d0":"markdown","2142ce84":"markdown","4b66e188":"markdown","8f266c1e":"markdown","959e6c58":"markdown","d3e4930f":"markdown","e0934971":"markdown","48eaa43b":"markdown","7d9ab762":"markdown","ec45675a":"markdown","79979d6d":"markdown","08011986":"markdown","1bef73fb":"markdown","cbfb4ffd":"markdown","00b40ab7":"markdown","ce498a8a":"markdown","f4ed0cb0":"markdown","7a621da4":"markdown","41766bd7":"markdown","03e4ca00":"markdown","7b89e574":"markdown","2f9194df":"markdown","540379e0":"markdown","cbc3d61e":"markdown","01ea264d":"markdown"},"source":{"7c0304be":"from csv import reader\n\nAndroid_file = open('..\/input\/google-play-store-apps\/googleplaystore.csv', encoding=\"utf8\")\nread_Android_file = reader(Android_file)\nAndroid_apps_data = list(read_Android_file)\nAndroid_apps_header = Android_apps_data[0]\nAndroid_apps_data = Android_apps_data[1:]\n\niOS_file = open('..\/input\/app-store-apple-data-set-10k-apps\/AppleStore.csv', encoding=\"utf8\")\nread_iOS_file = reader(iOS_file)\niOS_apps_data = list(read_iOS_file)\niOS_apps_header = iOS_apps_data[0]\niOS_apps_data = iOS_apps_data[1:]","078b6fe2":"def explore_data(dataset, start, end, rows_and_columns=False):\n    dataset_slice = dataset[start:end]\n    for row in dataset_slice:\n        print(row)\n        print('\\n') # empty row between rows\n    if rows_and_columns:\n        print('Number of rows: ', len(dataset))\n        print('Number of columns: ', len(dataset[0]))","5b46b21f":"print(Android_apps_header)\nprint('\\n')\nexplore_data(Android_apps_data, 0, 3, rows_and_columns=True)","31bf3ad2":"print(iOS_apps_header)\nprint('\\n')\nexplore_data(iOS_apps_data, 0, 3, rows_and_columns=True)","68c74277":"for row in Android_apps_data:\n    if len(row) != len(Android_apps_header):\n        print(row)\n        print(Android_apps_data.index(row))","7a6e020b":"del(Android_apps_data[10472])","697eeaa2":"for row in iOS_apps_data:\n    if len(row) != len(iOS_apps_header):\n        print(row)\n        print(iOS_apps_data.index(row))","904140cf":"unique_apps = []\nduplicate_apps = []\n\nfor row in Android_apps_data:\n    app = row[0]\n    if app in unique_apps:\n        duplicate_apps.append(app)\n    else:\n        unique_apps.append(app)\n        \nprint('Number of unique apps: ', len(unique_apps))\nprint('Number of duplicate apps: ', len(duplicate_apps))\nprint('\\n')\nprint('Duplicate apps examples: ', duplicate_apps[:20])","ce35a322":"for row in Android_apps_data:\n    app = row[0]\n    if app == 'Slack':\n        print(row)","6178523c":"for row in Android_apps_data:\n    app = row[0]\n    if app == 'Google Ads':\n        print(row)","d2278cad":"for row in Android_apps_data:\n    app = row[0]\n    if app == 'Google Analytics':\n        print(row)","8dd0e66e":"reviews_max = {}\nfor row in Android_apps_data:\n    app = row[0]\n    n_reviews = float(row[3])\n    if app in reviews_max and reviews_max[app] < n_reviews:\n        reviews_max[app] = n_reviews\n    elif app not in reviews_max:\n        reviews_max[app] = n_reviews\n\nprint(len(reviews_max)) # We control the number of rows","c7b30bd0":"Android_apps_clean = []\nAlready_added = [] # We need to avoid adding duplicated rows with the same number of reviews\nfor row in Android_apps_data:\n    app = row[0]\n    n_reviews = float(row[3])\n    if (n_reviews == reviews_max[app]) and (app not in Already_added):\n        Android_apps_clean.append(row)\n        Already_added.append(app)\n\nprint(len(Android_apps_clean)) # We control the number of rows","70efdddb":"unique_apps = []\nduplicate_apps = []\n\nfor row in iOS_apps_data:\n    app = row[0]\n    if app in unique_apps:\n        duplicate_apps.append(app)\n    else:\n        unique_apps.append(app)\n        \nprint('Number of unique apps: ', len(unique_apps))\nprint('Number of duplicate apps: ', len(duplicate_apps))","574cc4a4":"def is_english(app_name):\n    for character in app_name:\n        if ord(character) > 127:\n            return False\n    return True\n\nprint(is_english('Instagram'))\nprint(is_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(is_english('Docs To Go\u2122 Free Office Suite'))\nprint(is_english('Instachat \ud83d\ude1c'))","a830ca90":"def is_english(app_name):\n    non_ASCII = 0\n    for character in app_name:\n        if ord(character) > 127:\n            non_ASCII += 1\n    if non_ASCII > 3:\n        return False\n    return True\n\nprint(is_english('\u7231\u5947\u827aPPS -\u300a\u6b22\u4e50\u98822\u300b\u7535\u89c6\u5267\u70ed\u64ad'))\nprint(is_english('Docs To Go\u2122 Free Office Suite'))\nprint(is_english('Instachat \ud83d\ude1c'))","5c02eecb":"Android_apps_Eng = []\niOS_apps_Eng = []\n\nfor row in Android_apps_clean:\n    app = row[0]\n    if is_english(app):\n        Android_apps_Eng.append(row)\n        \nfor row in iOS_apps_data:\n    app = row[2]\n    if is_english(app):\n        iOS_apps_Eng.append(row)\n        \nprint('Number of Android apps left: ', len(Android_apps_Eng))\nprint('Number of iOS apps left: ',len(iOS_apps_Eng))\n","43055a90":"Android_apps_free = []\niOS_apps_free = []\n\nfor row in Android_apps_Eng:\n    price = row[7] # We take a string as some prices contain the $ symbol. Converting to a float requires additional data cleaning\n    if price == '0':\n        Android_apps_free.append(row)\n        \nfor row in iOS_apps_Eng:\n    price = row[5] # We take a string as some prices contain the $ symbol. Converting to a float requires additional data cleaning\n    if price == '0':\n        iOS_apps_free.append(row)\n        \nprint('Number of free Android apps: ', len(Android_apps_free))\nprint('Number of free iOS apps: ',len(iOS_apps_free))","10feb1d6":"def freq_table(dataset, index):\n    freq_dictionary = {}\n    total = 0\n    for row in dataset:\n        total += 1\n        value = row[index]\n        if value in freq_dictionary:\n            freq_dictionary[value] += 1\n        else:\n            freq_dictionary[value] = 1\n            \n    freq_percentage = {}\n    for key in freq_dictionary:\n        percentage = (freq_dictionary[key] \/ total) * 100\n        freq_percentage[key] = percentage\n    \n    return freq_percentage\n        ","e22fe65d":"def display_table(dataset, index):\n    table = freq_table(dataset, index)\n    table_display = []\n    for key in table:\n        key_val_as_tuple = (table[key], key)\n        table_display.append(key_val_as_tuple)\n\n    table_sorted = sorted(table_display, reverse = True)\n    for entry in table_sorted:\n        print(entry[1], ':', entry[0])","e236f42e":"display_table(iOS_apps_free, -5) # 'prime_genre' column","83c17049":"display_table(Android_apps_free, 1) #'Category' column","bfb44077":"display_table(Android_apps_free, 9) #'Genres' column","1e5d4b9c":"genres_iOS = freq_table(iOS_apps_free, -5)\ngenres_iOS = sorted(genres_iOS)\n\nfor genre in genres_iOS:\n    total = 0\n    len_genre = 0\n    for row in iOS_apps_free:\n        genre_app = row[-5]\n        if genre_app == genre:\n            total += float(row[6]) # 'rating_count_tot' column\n            len_genre += 1\n            \n    everage_rating = total \/ len_genre\n    print(genre, ':', everage_rating)","30c5268d":"for row in iOS_apps_free:\n    genre = row[-5]\n    if genre == 'Navigation':\n        print(row[2], ':', row[6])","165a1c68":"for row in iOS_apps_free:\n    genre = row[-5]\n    if genre == 'Reference':\n        print(row[2], ':', row[6])","bc820035":"for row in iOS_apps_free:\n    genre = row[-5]\n    if genre == 'Social Networking':\n        print(row[2], ':', row[6])","42381d46":"for row in iOS_apps_free:\n    genre = row[-5]\n    if genre == 'Music':\n        print(row[2], ':', row[6])","1f3dad36":"display_table(Android_apps_free, 5) # Shows 'Installs' column and its percentage to the total variety of values","7529df9e":"categories = freq_table(Android_apps_free, 1)\n\nfor category in categories:\n    total = 0\n    len_category = 0\n    for row in Android_apps_free:\n        category_app = row[1]\n        if category_app == category:\n            installs = row[5]\n            installs = installs.replace('+', '')\n            installs = installs.replace(',', '')\n            installs = float(installs)\n            total += installs\n            len_category += 1\n    installs_evarage = total \/ len_category\n    print(category, ':', installs_evarage)","9c7781cf":"for row in Android_apps_free:\n    genre = row[1]\n    if genre == 'BOOKS_AND_REFERENCE':\n        print(row[0], ':', row[5])","e371b02e":"for row in Android_apps_free:\n    genre = row[1]\n    if genre == 'HEALTH_AND_FITNESS':\n        print(row[0], ':', row[5])","5106f09e":"for row in Android_apps_free:\n    genre = row[1]\n    if genre == 'HEALTH_AND_FITNESS' and (row[5] == '10,000,000+' or \n                                          row[5] == '50,000,000+' or \n                                          row[5] == '100,000,000+'):\n        print(row[0], ':', row[5])","5ec72b24":"We will start by opening given data sets and separating the header rows with column names.","3541147b":"We create the lists of the English apps only:","1d8e9b81":"Data Analysis: Most Popular Apps by Genre in Google Play\n---\nIn our Google Play data set, we will analyze genre popularity by the number of installs. We do not have sharp figures (Installs column shows more than a_number of installs), but it is enough to have a clear picture. We want to see the average number of installs by app genre.","dd54119f":"We want to see the average number of installs by genre. The 'Installs' column has commas and plus symbols. Thus, before calculations, we need to clean the column values to numbers only.","c9886c03":"Data Cleaning: Isolating the Free Apps\n---\nOur study is aiming to understand what apps are optimal for in-app ad placement. Obviously, such apps should be free to download. So the last step of our data cleaning process will be the isolation of zero price apps.","e7cfd449":"Data Sources\n---\nWe will use the following data sets from [kaggle.com](http:\/\/kaggle.com):\n\n* Data about approximately 10,000 Android apps from Google Play was collected in August 2018 and is available via this [link](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps)\n* Data about approximately 7,000 iOS apps from the App Store was collected in July 2017 and is available via this [link](https:\/\/www.kaggle.com\/ramamet4\/app-store-apple-data-set-10k-apps)","9c8d38d0":"We need a single entry for each app to make a proper analysis. At the same time, we do not want to remove duplicates randomly. We want to take the most relevant entry of each duplicated app. To find such criteria, we will study duplicate entries.","2142ce84":"We can see that more than half of the free English apps in our App Store data set are games.\n\nOur Google Play data set has two columns that describe app genres: 'Category' and 'Genres'. So we will have a look at both.","4b66e188":"Above, we have concluded that the Book genre and Health & Fitness genre might be suitable for the App Store market. These genres have a decent average number of installs compared to others. The numbers say they are popular enough. Let's have a closer look at these genres in Goole Play.","8f266c1e":"The Bible dominates the Reference genre. It makes genre statistics by the average number of ratings non-representative.","959e6c58":"Data Cleaning: Duplicate Entries\n----\nIn the next step, we need to detect and delete duplicate entries of apps in our datasets. At first, we analyze the uniqueness of Android apps names.","d3e4930f":"Data Analysis: Frequency of Genres\n---\nOur business goal is to add an app on both Google Play and the App Store. Thus, we need to know what app profiles are profitable in both markets. \n\nWe will start our analysis by finding what app genres are the most common for each market. To do it, we will create frequency tables of app genres.\n\nWe will use the `freq_table()` function that creates a dictionary. The values of keys in our dictionary will show the percentage from total values.","e0934971":"Entertainment apps dominate the App Store, so we can assume that a practical use app of a popular genre has potential in this market. In this respect we might consider 'Weather', 'Book', 'Finance', 'Shopping' 'Food & Drink' and 'Health & Fitness' app genres.\n\nWeather apps seem not appropriate enough for our add placement strategy, as users don't spend much time in such apps, while good quality weather feed can cost a lot.\n\nFinance apps require in-depth domain knowledge and extensive support. It contradicts our strategic goal to develop a simple app and make it profitable within the short term.\n\nShopping and Food & Drink apps generally represent offline businesses. Such apps are beyond our strategy, only if we are not going to develop some aggregator.\n\n__Book__ and __Health & Fitness__ genres seem to have the best potential for our strategy in App Store.","48eaa43b":"Our function is not yet suitable, as some English app names contain symbols out of 0 to 127 ASCII range. We will improve our function the way it sorts out the app names with more than three non-proper characters. This filter is still not perfect, but it should be reasonably efficient.","7d9ab762":"We can see that some entries have different values in the fourth column that is 'Reviews'. We can assume that a higher number of reviews shows a later entry update. So we take a number of review as a criterion of the most relevant entry. We know that we need the set of 9659 unique apps with the highest 'Reviews' number. To do it we will (1) create a dictionary of apps with the highest number of reviews and (2) add these apps data to our `Android_apps_clean` list.","ec45675a":"Data Analysis: Profitable App Profiles for the App Store and Google Play Markets\n===\nWe have received the task to perform data analysis and give recommendations on what kind of apps have potential on both app markets. The business goal is to develop an app that makes profits by placing in-app ads. The business expects an app is simple and becomes profitable within the short term. \n\nThe strategy of app development involves the following steps:\n\n* build a minimum version of the Android app and add it to Google Play\n* if the app has a good response from users, develop it further\n* if an app is profitable after six months, build a version for iOS and add it to the App Store\n\nThe project ams to explore application data in App Store and Google Play Markets. We want to define what kind of applications are likely to attract more users.","79979d6d":"The next step is to explore these data sets. To do it, we will use the function `explore_data()`. This function prints rows in a readable way and gives rows and columns parameters.","08011986":"Data Analysis: Most Popular Apps by Genre in App Store\n---\nWe want to know what app genres are more popular among users. We can find out this info by analyzing the total number of app downloads by genre. However, this data is missing from our App Store dataset. Thus, we will examine the popularity of app genres by the average number of user ratings of a given genre of apps.","1bef73fb":"Almost 19% of apps in our Android dataset are under the 'Family' category. We had a look through apps in Google Play 'Family' category. It is clear enough that the majority of apps are games for kids. The other significant app genres are Game, Tools, and Business.\n\nThe difference between 'Category' and 'Genres' is not clear enough. Nevertheless, we can see that free Android app genre fields are more balanced between apps designed for practical use and apps made for fun. At the same time, the majority of free iOS apps are for entertainment.","cbfb4ffd":"We have checked and found out that the iOS apps data set has no duplicate entries. It consists of 7197 unique apps.","00b40ab7":"For better visualization of our frequency table, we will improve the `freq_table()` function. The `display_table()` function will sort our dictionary keys by the highest value.","ce498a8a":"Conclusions\n---\nWe have analyzed the popularity of app genres in both Google Play and the App Store. Entertainment apps compose more than half of apps in the App Store. Google Play market looks more balanced between practical and for-fun apps. Functional apps look popular enough in this market. We have concluded that practical use app will be more suitable for our strategy, as the App Store looks a bit overloaded with games.\n\nApps devoted to Health and Fitness are popular in both markets. The strategy is to launch an app in Google Play first. Workouts, weight loss and control, meal planning, and period tracking are popular app topics in this market.\n\nOur recommendation is to develop a simple free app, make it easy to use, and add an innovative feature. Such apps can be innovative workout complex, meal planning app, calorie tracker, or period tracker with additional functions and settings.","f4ed0cb0":"The majority of apps of the Books and Reference genre don't have a significant number of installs. Google Play Books with 1,000,000,000+ installs seem to dominate the market. A new app in this category is not likely to become popular enough.","7a621da4":"Data Cleaning: Wrong Data\n----\nWe have studied the dedicated [discussion section](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/discussion) of the Google Play data set. [One of the discussions](https:\/\/www.kaggle.com\/lava18\/google-play-store-apps\/discussion\/66015) points out that a row in the data set has a missing column. We will find this row, delete it, and check the App Store data set for similar errors.","41766bd7":"We can see that the Health and Fitness category has many popular apps devoted to workouts, weight loss and control, meal planning, and period tracking.","03e4ca00":"Let's have a closer look at genres with the highest average number of ratings. There are quite a few apps in the 'Navigation' genre, while the overwhelming majority of user ratings spread between two major apps: Waze and Google Maps.","7b89e574":"Data Cleaning: Removing Non-English Apps\n---\nIn our analysis, we will study apps directed towards English-speaking audiences only. We assume that such apps use symbols common for the English language. Each character has a corresponding number associated with it. We can get this number with the build-in `ord()` function. According to [ASCII](https:\/\/en.wikipedia.org\/wiki\/ASCII), symbols commonly used in English text have numbers between 0 to 127. Based on this number range, we will build a function that detects whether characters in app names belong to the set of general English characters or not.","2f9194df":"Exploring Google Play data set:","540379e0":"Exploring the Apps Store data set:","cbc3d61e":"The major industry players of Social Networking and Music app genres accumulate way more user ratings than minor players. Our app development strategy does not involve bursting into such extremely competitive niches.","01ea264d":"We can see that the Health and Fitness category has quite a few apps with over 10 million downloads. We will have a closer look at those."}}