{"cell_type":{"a0bc03ec":"code","8a093301":"code","8ea1fe48":"code","d399dc74":"code","6dcd8e95":"code","a1152326":"code","e4130599":"code","a1a23cab":"code","c1239544":"code","3aeaeb28":"code","02e905b5":"code","d3d6264b":"code","2410fdde":"code","355da967":"code","2c5bdbab":"code","ab32af3e":"code","83e508ec":"code","11897a3a":"code","2ffc3760":"code","46b7d65d":"code","ef483a37":"code","d85c19d5":"code","97baa519":"code","d9e46aeb":"code","95680b58":"code","f52e35ac":"code","01f20153":"code","f731d4ad":"code","b527d126":"code","57ce671d":"markdown","ca2589a3":"markdown","749644b8":"markdown","2e725ccb":"markdown","8b4631c1":"markdown","da22f9b6":"markdown","713dca97":"markdown","297a8eb6":"markdown","1583d498":"markdown","cfd45c1b":"markdown"},"source":{"a0bc03ec":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nimport nltk\nimport sys\nimport datetime\nsns.set(font_scale=2)\n# pd.set_option('display.max_columns', 500)\n","8a093301":"df2 = pd.read_csv(\"..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv\",encoding=\"utf-8\", delimiter=',')\n","8ea1fe48":"print( df2.shape)\ndf2['Book Name'].dtype","d399dc74":"df2","6dcd8e95":"# fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n# splot=sns.barplot(x=df2['Order Status'].unique(),y=df2['Order Status'].value_counts(),orient=\"v\")\n# for i, p in enumerate(ax.patches):\n#     ax.annotate(format(p.get_height(), '.1f'), \n#                    (p.get_x() + p.get_width() \/ 2., p.get_height()), \n#                    ha = 'center', va = 'center', \n#                    xytext = (0, 9), \n#                    textcoords = 'offset points')\n# =============Below is same==================================\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\ndf2['Order Status'].value_counts().plot.bar()\nfor i, p in enumerate(ax.patches):\n    ax.annotate(format(p.get_height(), '.1f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\n","a1152326":"# @navid\nstatistics_of_data = []\nfor col in df2.columns:\n    print(col)\n    statistics_of_data.append((col,\n                             df2[col].nunique(),\n                             df2[col].isnull().sum()*100\/df2.shape[0],\n                             df2[col].value_counts(normalize=True, dropna=False).values[0] * 100, \n                             df2[col].dtype\n                            \n                             ))\nstats_df = pd.DataFrame(statistics_of_data, columns=['Feature', 'Uniq_val', 'missing_val', 'val_biggest_cat', 'type'])\nstats_df","e4130599":"\n# df2.drop(df2[df2['Book Name'].isnull()].index,axis=0,inplace=True)\n# df2.shape\n# df2['Book Name']=df2['Book Name'].to_string()\ndf2['Book Name']=df2['Book Name'].apply(lambda x: str(x))\ndf2['City (Billing)']=df2['City (Billing)'].apply(lambda x:str(x))\ndf2['Book Name'] = df2['Book Name'].str.lower()\ndf2['City (Billing)'] = df2['City (Billing)'].str.lower()","a1a23cab":"df2.columns=['order_name', 'order_status', 'book_name', 'order_date','city_billing']\ndf2.tail(20)\nfrom itertools import chain\n\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\nlens = df2['book_name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndf2 = pd.DataFrame({'order_name': np.repeat(df2['order_name'], lens),\n                    'order_status': np.repeat(df2['order_status'], lens),\n                    'book_name': chainer(df2['book_name']),\n                    'order_date': np.repeat(df2['order_date'], lens),\n                    'city_billing': np.repeat(df2['city_billing'], lens)})\ndf2.reset_index(inplace=True,drop=True)\ndf2","c1239544":"%%time\n\npakistan_top_cities = ['karachi', 'lahore', 'sialkot', 'faisalabad', 'rawalpindi',\n       'peshawar', 'saidu sharif', 'multan', 'gujranwala', 'islamabad',\n       'quetta', 'bahawalpur', 'sargodha', 'new mirpur', 'chiniot',\n       'sukkur', 'larkana', 'shekhupura', 'jhang', 'rahimyar khan',\n       'gujrat', 'kasur', 'mardan', 'mingaora', 'dera ghazi khan',\"dgk\"\n       'nawabshah', 'sahiwal', 'mirpur khas', 'okara', 'burewala',\n       'jacobabad', 'saddiqabad', 'kohat', 'muridke', 'muzaffargarh',\n       'khanpur', 'gojra', 'bahauddin', 'abbottabad', 'dadu',\n       'khuzdar', 'pakpattan', 'tando allahyar', 'vihari', 'jaranwala',\n       'kamalia', 'kot addu', 'nowshera', 'swabi', 'dera ismail khan',\n       'chaman', 'charsadda', 'kandhkot', 'hasilpur', 'muzaffarabad',\n       'mianwali', 'jalalpur\",\"jattan', 'bhakkar', 'zhob', 'kharian',\n       'mian channun', 'jamshoro', 'pattoki', 'harunabad',\n       'toba tek singh', 'shakargarh', 'hujra\", \"shah\", \"muqim', 'kabirwala',\n       'mansehra', 'lala musa', 'nankana sahib', 'bannu', 'timargara',\n       'parachinar', 'gwadar', 'abdul hakim', 'hassan\", \"abdal', 'tank',\n       'hangu', 'risalpur cantonment', 'karak', 'kundian', 'umarkot',\n       'chitral', 'dainyor', 'kulachi', 'kotli', 'gilgit',\n       'hyderabad', 'narowal', 'khairpur', \"mir\u2019s\", 'khanewal', 'jhelum',\n       'haripur', 'shikarpur', 'rawala kot', 'hafizabad', 'lodhran',\n       'malakand', 'attock', 'batgram', 'matiari', 'ghotki',\n       'firoz','naushahro', 'alpurai', 'bagh', 'daggar', 'bahawalnagar',\n       'leiah', 'tando muhammad khan', 'chakwal', 'khushab', 'badin',\n       'lakki', 'rajanpur', 'dera allahyar', 'shahdad kot', 'pishin',\n       'sanghar', 'upper dir', 'thatta', 'dera murad jamali', 'kohlu',\n       'mastung', 'dasu', 'athmuqam', 'loralai', 'barkhan',\n       'musa khel bazar', 'ziarat', 'gandava', 'sibi', 'dera bugti',\n       'eidgah', 'turbat', 'uthal', 'chilas', 'kalat', 'panjgur', 'gakuch',\n       'qila', 'saifullah', 'kharan', 'aliabad', 'awaran', 'dalbandin']\ndef city(x):\n    if x in pakistan_top_cities :\n        return True\n    else:\n        return False\nnew=df2.city_billing.apply(city)\nfound=new[new==True]\nnot_found=new[new==False] #These cities were not found in paK_cities. It is seprated out and wil be dealth with later.\n\nlen(found)\ndf2.loc[found.index.to_list(),'city_billing'].nunique()","3aeaeb28":"not_found=df2.loc[not_found.index.to_list(),'city_billing']\nnot_found.size","02e905b5":"df2.nunique()","d3d6264b":"df2['order_date']= pd.to_datetime(df2['order_date'])\ndf2['year'] = df2['order_date'].apply(lambda x : x.year)\ndf2['month'] = df2['order_date'].apply(lambda x : x.month)\ndf2['day'] = df2['order_date'].apply(lambda x : x.day_name())\ndf2['weekday'] = df2['order_date'].apply(lambda x : x.weekday())\n","2410fdde":"# def cat_plot(col,status):\n#     fig, ax = plt.subplots(1, 1, figsize=(15, 10))\n#     print(col)\n#     df=df2.loc[df2['order_status']==status,['order_status',col]].groupby(col,as_index=False).count()\n#     if df.shape[0] >20:\n#         df=df.nlargest(n=10,columns='order_status')\n#     sns.barplot(y=col,x='order_status',data=df,orient='h' )\n#     for p in ax.patches:\n# #         value_count = '{:.1f}'.format(p.get_width())\n#         value_count = p.get_width()\n#         x = p.get_x() + p.get_width() + 0.02\n#         y = p.get_y() + p.get_height()\/2\n#         ax.annotate(value_count, (x, y))\n#     plt.ylabel(f'{col}')\n#     plt.xlabel(f'Number of {status} Orders')\n#     plt.show()\n    ","355da967":"# nf['city_billing'] = nf['city_billing'].str.replace('\\d+', '')\n# nf['city_billing'] = nf['city_billing'].str.replace('pakistan', '')\n# nf['city_billing'] = nf['city_billing'].str.replace('city', '')\n# nf['city_billing'] = nf['city_billing'].str.replace('?', '')\n\n# nf['city_billing'].tail(20)\n# nf['city_billing'].to_string()\n","2c5bdbab":"not_found[0:31]","ab32af3e":"%%time\ndef city(x):\n    if '?' in x or len(x)==3 :\n        return 'others'\n    else:\n        return x\nnot_found=not_found.apply(city)\nprint(len(not_found))\ndf2.loc[not_found.index.to_list(),'city_billing']=not_found\ndf2.nunique()","83e508ec":"not_found[0:31]","11897a3a":"not_found=not_found[not_found!='others']\nnot_found.size","2ffc3760":"%%time\nsingle_word_cities = df2[df2['city_billing'].str.split().apply(len) == 2][\"city_billing\"].unique()\nsingle_word_cities[:20]\ndef clean_city(row):\n    address = row.city_billing.split()\n    add = set()\n    for a in address:\n        a = a.strip()\n        if a:\n            add.add(a)\n    for city in pakistan_top_cities:\n        if row.city_billing.__contains__(city):\n            return city\n        \n    for a in add:\n        for c in pakistan_top_cities:\n            if nltk.edit_distance(a, c) <= 5: # considering spelling mistakes upto 5 letters\n                return c\n    return row.city_billing\nnf2=pd.DataFrame(not_found)\nnf2[\"city_billing\"]=nf2.apply(clean_city, axis=1)\nnf2.nunique()\n","46b7d65d":"df2.loc[nf2.index.to_list(),'city_billing']=nf2\ndf2.nunique()\n","ef483a37":"def cat_plot(col,status):\n    fig, ax = plt.subplots(1, 1, figsize=(15, 10))\n    print(col)\n    df=df2.loc[df2['order_status']==status,['order_status',col]].groupby(col,as_index=False).count()\n    if df.shape[0] >20:\n        df=df.nlargest(n=10,columns='order_status')\n    sns.barplot(y=col,x='order_status',data=df,orient='h' )\n    for p in ax.patches:\n#         value_count = '{:.1f}'.format(p.get_width())\n        value_count = p.get_width()\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(value_count, (x, y))\n    plt.ylabel(f'{col}')\n    plt.xlabel(f'Number of {status} Orders')\n    plt.show()\n    ","d85c19d5":"cat_plot('book_name','Completed')\n# pass Returned or Cancles for their status","97baa519":"cat_plot('city_billing','Completed')","d9e46aeb":"cat_plot('city_billing','Returned')","95680b58":"cat_plot('year','Completed')","f52e35ac":"cat_plot('month','Completed')","01f20153":"cat_plot('month','')","f731d4ad":"# ran=np.random.randint(0,nf2.shape[0],10)\n# for i in range(9):\n#     ran=np.random.randint(0,nf2.shape[0],10)\n#     cur=pd.DataFrame(nf2.loc[ran,'city_billing'])\n#     cur=cur.reset_index(drop=True)\n#     if i!=0:\n#         cur=pd.concat([old,cur],axis=1)\n#     old=cur\n# cur\n","b527d126":"df2.city_billing.unique()\n","57ce671d":"# Status Frequency ","ca2589a3":"# Data Summary","749644b8":"# EDA\n# TOP BOOKS SOLD","2e725ccb":"# Separating Books ","8b4631c1":"# TOP CITIES OF RETURNED BOOK","da22f9b6":"#  Prosessiong-1 (Most Fequenty cities)","713dca97":"# TOP MONTH FOR BOOK SALE","297a8eb6":"# Least Books Sold","1583d498":"# TOP YEAR FOR BOOK SALE","cfd45c1b":"# TOP CITIES FOR BOOK SALE"}}