{"cell_type":{"357a2480":"code","e9ef862b":"code","9447923d":"code","12f73028":"code","84e6d5cb":"code","50c096fa":"code","4285a79f":"code","398494fd":"code","c0c1535a":"code","8128baa7":"code","87155e28":"code","0f975eb4":"code","26a618bb":"code","a3e8f1d9":"code","e48fa9ae":"code","36b44210":"code","2844611b":"code","7e9551a0":"code","0819847b":"code","3d8f53c7":"code","bb5136af":"code","a70ffb3b":"code","a401da1d":"code","1587ed33":"code","49a9a0ea":"code","659a0876":"code","5988471a":"code","042efe5a":"code","b0267278":"code","dd4e17cf":"code","d181360e":"code","389d5ef9":"markdown","89236e53":"markdown","26316eed":"markdown","27e97f9e":"markdown","3eb5ee71":"markdown","239f049e":"markdown","2b7b5714":"markdown","3a65c038":"markdown","b9c9026a":"markdown","be443d9d":"markdown","09f46511":"markdown"},"source":{"357a2480":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n# Display full output rather than just the last line of output\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 500)","e9ef862b":"df = pd.read_csv('\/kaggle\/input\/kernel51d9b7c83e\/raw_data_no_dummies_imputed.csv')\ndf.head()","9447923d":"'''########### FIX TO 10% ########## -------- Identify columns with more than 30% missing values and remove them\n\ncol_to_delete = df.columns[df.isna().sum() >= 0.30*len(df)].tolist()\n\nncols_before = df.shape[1]\n\n  ######\n#Keep Hybrid columns (['Hybrid\/Electric Components Miles\/km', 'Hybrid\/Electric Components Years', 'Hybrid\/Electric Components Note', 'Hybrid'] )\n#                 even if they have many missing values\nhyb_cols = [col for col in df if 'ybri' in col]\n\nfor x in hyb_cols, 'EPA Classification':\n    if x in col_to_delete:\n        col_to_delete.remove(x)\n  ######\n\ndf.drop(col_to_delete, axis=1, inplace=True)\n\nprint('Number of columns removed: '+ str(ncols_before - df.shape[1]))\nprint('Current number of columns: ' + str(df.shape[1]))\ndf.head()'''","12f73028":"#split to electric and petrol cars\ndf_hyb = df.loc[df['Electric']==1]\ndf = df.loc[df['Electric']!=1]\n\ndf_hyb.shape\ndf.shape","84e6d5cb":"df.shape","50c096fa":"df.describe()","4285a79f":"skewness = df.skew().to_frame('skew')\n\nprint('Positivily Skewed >1')\nskewness.loc[skewness['skew']>1].sort_values(by='skew', ascending=False)\nprint('Negatively Skewed <-1')\nskewness.loc[skewness['skew']<-1].sort_values(by='skew')","398494fd":"#Number of Cars per year\ndf.groupby('Year')['Year'].count().sort_values(ascending=False)","c0c1535a":"# it is the same as previous corr plot\nf, ax = plt.subplots(figsize=(50, 50))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(200, 10, as_cmap=True),\n            square=True, ax=ax)\n","8128baa7":"#get details for the most expensive car\ndf.loc[df.MSRP.idxmax()][[0,1]]\n\n#get details for the least expensive car\ndf.loc[df.MSRP.idxmin()][[0,1]]","87155e28":"#number of cars per company and company name, sorted by compact\n\ncompany_cat_count = df.groupby(['Company Name', 'EPA Classification'])['MSRP'].count().to_frame().unstack()\ncompany_cat_count.sort_values(by=('MSRP', 'Compact'), ascending=False).head(20)","0f975eb4":"fig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df[\"Company Name\"].loc[(df[\"EPA Classification\"]=='Compact', )], y=df[\"MSRP\"].loc[df[\"EPA Classification\"]=='Compact'] )","26a618bb":"#Number of NaNs\ndf.isna().sum().sort_values(ascending=False)","a3e8f1d9":"#many outliers for price\ndf.boxplot('MSRP', figsize=(20,10))","e48fa9ae":"df.MSRP[df.MSRP<100000].hist(bins=100) #NEG skewed","36b44210":"#number of cars per company and company name, sorted by compact after 2017\n\ncompany_cat_count = df[df.Year>2017].groupby(['Company Name', 'EPA Classification'])['MSRP'].count().to_frame().unstack()\ncompany_cat_count.sort_values(by=('MSRP', 'Compact'), ascending=False).head(20)","2844611b":"fig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df[\"Company Name\"].loc[df[\"MSRP\"]<100000], y=df[\"MSRP\"].loc[df[\"MSRP\"]<100000] )","7e9551a0":"fig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df[\"Company Name\"].loc[df[\"EPA Classification\"]=='Compact'], y=df[\"MSRP\"].loc[df[\"EPA Classification\"]=='Compact'] )","0819847b":"fig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df[\"Company Name\"].loc[df[\"EPA Classification\"]=='Midsize'], y=df[\"MSRP\"].loc[df[\"EPA Classification\"]=='Midsize'] )","3d8f53c7":"#Year of first Hybrid car\ndf_hyb['Year'].min()","bb5136af":"#number of cars per company and company name, sorted by compact HYBRID\ncompany_cat_count_hyb = df_hyb.groupby(['Company Name', 'EPA Classification'])['MSRP'].count().to_frame().unstack()\ncompany_cat_count_hyb.sort_values(by=('MSRP', 'Compact'), ascending=False).head(20)","a70ffb3b":"print(df_hyb[\"Company Name\"].loc[df_hyb[\"EPA Classification\"]=='Compact'].value_counts())\n\nfig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df_hyb[\"Company Name\"].loc[df_hyb[\"EPA Classification\"]=='Compact'], y=df_hyb[\"MSRP\"].loc[df_hyb[\"EPA Classification\"]=='Compact'] )","a401da1d":"print(df_hyb[\"Company Name\"].loc[df_hyb[\"EPA Classification\"]=='Midsize'].value_counts())\nfig = plt.figure(figsize=(40, 10))\nsns.boxplot( x=df_hyb[\"Company Name\"].loc[df_hyb[\"EPA Classification\"]=='Midsize'], y=df_hyb[\"MSRP\"].loc[df_hyb[\"EPA Classification\"]=='Midsize'] )","1587ed33":"mean_mpg_hybrid = df_hyb.groupby('Company Name')['EPA Fuel Economy Est - Hwy (MPG)'].mean().dropna().sort_values(ascending=False)\n\n#Save the name of companies which create hyb\n\nmean_mpg_hybrid_index = mean_mpg_hybrid.index\nmean_mpg_hybrid","49a9a0ea":"mean_mpg_nonhybrid = df.groupby('Company Name')['EPA Fuel Economy Est - Hwy (MPG)'].mean().dropna().sort_values(ascending=False)\n\n#Save the companies which also create hyb\n\nmean_mpg_nonhybrid.loc[mean_mpg_nonhybrid.index.isin(mean_mpg_hybrid_index)]","659a0876":"max_mpg_hybrid = df_hyb.groupby('Company Name')['EPA Fuel Economy Est - Hwy (MPG)'].max().dropna().sort_values(ascending=False)\n\n#Save the name of companies which create hyb\n\nmax_mpg_hybrid_index = max_mpg_hybrid.index\nmax_mpg_hybrid","5988471a":"max_mpg_nonhybrid = df.groupby('Company Name')['EPA Fuel Economy Est - Hwy (MPG)'].max().dropna().sort_values(ascending=False)\n\n#Save the companies which also create hyb\n\nmax_mpg_nonhybrid.loc[max_mpg_nonhybrid.index.isin(mean_mpg_hybrid_index)]","042efe5a":"mean_price_hybrid_compact = df_hyb.loc[df_hyb[\"EPA Classification\"]=='Compact'].groupby(['Company Name'])['MSRP'].mean().dropna().sort_values(ascending=False)\n\n\n#keep the name of the companies which create hybrid compact\nmean_price_hybrid_compact_index = mean_price_hybrid_compact.index\n\nmean_price_hybrid_compact","b0267278":"mean_price_nonhybrid_compact = df.loc[df[\"EPA Classification\"]=='Compact'].groupby(['Company Name'])['MSRP'].mean().dropna().sort_values(ascending=False)\n\n#filter to keep only the companies which also create hybrid compact cars\n\nmean_price_nonhybrid_compact[mean_price_nonhybrid_compact.index.isin(mean_price_hybrid_compact_index)]\n","dd4e17cf":"mean_price_hybrid_compact = df_hyb.loc[df_hyb[\"EPA Classification\"]=='Compact'].groupby(['Company Name'])['MSRP'].max().dropna().sort_values(ascending=False)\n\n\n#keep the name of the companies which create hybrid compact\nmean_price_hybrid_compact_index = mean_price_hybrid_compact.index\n\nmean_price_hybrid_compact","d181360e":"mean_price_nonhybrid_compact = df.loc[df[\"EPA Classification\"]=='Compact'].groupby(['Company Name'])['MSRP'].max().dropna().sort_values(ascending=False)\n\n#filter to keep only the companies which also create hybrid compact cars\n\nmean_price_nonhybrid_compact[mean_price_nonhybrid_compact.index.isin(mean_price_hybrid_compact_index)]\n\n","389d5ef9":"# COMPARISONS BETWEEN HYBRID AND NON-HYBRID","89236e53":"# General Metrics","26316eed":"# Remove columns with many NaN values","27e97f9e":"# Metrics for Cars with EPA Classification = 'Midsize'","3eb5ee71":"PRICE","239f049e":"Hybrid Compact","2b7b5714":"# Metrics for Cars with EPA Classification = 'Compact'","3a65c038":"Hybrid Midsize","b9c9026a":"Mean and Max MPG for NON hybrid cars per company","be443d9d":"# Metrics for Cars below 100.000$ ","09f46511":"# Hybrid Cars"}}