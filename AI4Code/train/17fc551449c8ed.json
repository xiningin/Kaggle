{"cell_type":{"06a44552":"code","ac07f816":"code","8363b416":"code","0025cd18":"code","e6252bb1":"code","947ba4c0":"code","5d32310e":"code","f38ba830":"code","98b77c81":"code","d138ad9f":"code","14e0ccee":"code","9b70e91d":"code","d1292ec6":"code","d4e0c1dd":"code","823330be":"code","f51bc9a8":"code","a5adf702":"code","1e73d45e":"code","618ecb02":"code","5e57cfb8":"code","69ce9c8c":"code","6cd6412a":"code","39c1ee42":"code","0bbafafa":"code","3f7ebeed":"code","f244788d":"code","ddd74e97":"code","b1251385":"code","2820a1da":"code","84c7727c":"code","d9260abf":"code","014de792":"code","5fa4d248":"code","7d7558a1":"code","631239c5":"code","9435ebdf":"code","acecff01":"code","e735fa99":"code","58b680de":"code","0196120a":"code","63b04897":"code","5e5112e8":"code","635d53c9":"code","06efabc5":"code","454c882d":"code","26c46edf":"code","0e199ce0":"code","4fb47667":"code","50e1b8a4":"code","5711d704":"code","fa1d7b61":"code","a681c393":"code","93ef948c":"code","079d0235":"code","7db6fb50":"code","7914a34f":"code","cfee42f2":"code","bd1f667e":"code","6c8686ac":"code","d3ec65a2":"code","72c973b7":"code","105924fc":"code","674d383f":"code","3a87b276":"code","0cc19db5":"code","7d03a6fb":"code","48761820":"markdown","0b4ce01c":"markdown","4a12f236":"markdown","72be9607":"markdown","a62351f3":"markdown","683b1ae5":"markdown","1d45d0f7":"markdown","09351644":"markdown","2f347113":"markdown","f421c0e0":"markdown","b71c432d":"markdown","24eed471":"markdown","32de63a8":"markdown","84e0611b":"markdown","71766947":"markdown","8b204de4":"markdown","2bfa4c1e":"markdown","6518fb79":"markdown","ea3c5f17":"markdown","48c8d98a":"markdown","b327f9b2":"markdown","2a1a38d3":"markdown","f6f932f7":"markdown","f26815ef":"markdown","175bf77f":"markdown","49f09fbd":"markdown","b305988d":"markdown","f64c3822":"markdown","1caf547a":"markdown","26232f36":"markdown","b945e35f":"markdown","bc17f202":"markdown","fc411787":"markdown","cb4aafd7":"markdown","a90aa998":"markdown","93cabb1a":"markdown","d42afbb4":"markdown","c87439b1":"markdown","9784787e":"markdown","0bf14073":"markdown","581eeb29":"markdown","aa123e45":"markdown","826904da":"markdown","f8d83dc0":"markdown","5e31977f":"markdown","92aacb9b":"markdown","8cc6026f":"markdown","047b075e":"markdown"},"source":{"06a44552":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as sch\nfrom  sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.decomposition import PCA\nimport plotly.express as px\n\nimport warnings\nimport sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")\npy.offline.init_notebook_mode(connected = True)\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff","ac07f816":"df = pd.read_csv('..\/input\/arketing-campaign\/marketing_campaign.csv', sep=';')\n","8363b416":"df.head()\n","0025cd18":"df.info()","e6252bb1":"df.dropna(inplace = True)\n","947ba4c0":"df.info()\n","5d32310e":"df[\"Dt_Customer\"] = pd.to_datetime(df[\"Dt_Customer\"])\ndates = []\nfor i in df[\"Dt_Customer\"]:\n    i = i.date()\n    dates.append(i)  \n\nprint(\"Registration date of the newest customer on record:\",max(dates))\nprint(\"Registration date of the oldest customer on record:\",min(dates))\n","f38ba830":"days = []\nd1 = max(dates)\nfor i in dates:\n    delta = d1 - i\n    days.append(delta)\ndf[\"Customer_For\"] = days\ndf[\"Customer_For\"] = pd.to_numeric(df[\"Customer_For\"], errors=\"coerce\")\n","98b77c81":"print(\"Unique value in Martial Status\\n\", df[\"Marital_Status\"].value_counts(), \"\\n\")\nprint(\"Unique value in Education\\n\", df[\"Education\"].value_counts())\n","d138ad9f":"df[\"Age\"] = 2021-df[\"Year_Birth\"]\n","14e0ccee":"df[\"Spent\"] = df[\"MntWines\"]+ df[\"MntFruits\"]+ df[\"MntMeatProducts\"]+ df[\"MntFishProducts\"]+ df[\"MntSweetProducts\"]+ df[\"MntGoldProds\"]","9b70e91d":"df[\"Living_With\"] = df[\"Marital_Status\"].replace({\"Married\":\"Partner\", \"Together\":\"Partner\", \"Absurd\":\"Alone\", \"Widow\":\"Alone\", \"YOLO\":\"Alone\", \"Divorced\":\"Alone\", \"Single\":\"Alone\",})","d1292ec6":"df[\"Children\"] = df[\"Kidhome\"] + df[\"Teenhome\"]\n","d4e0c1dd":"df[\"Family_Size\"] = df[\"Living_With\"].replace({\"Alone\": 1, \"Partner\":2}) + df[\"Children\"]\n","823330be":"df[\"Is_Parent\"] = np.where(df.Children > 0, 1, 0)\n","f51bc9a8":"df[\"Education\"] = df[\"Education\"].replace({\"Basic\":\"Undergraduate\",\"2n Cycle\":\"Undergraduate\", \"Graduation\":\"Graduate\", \"Master\":\"Graduate\", \"PhD\":\"Graduate\"})","a5adf702":"df = df.rename(columns={\"MntWines\": \"Wines\", \"MntFruits\":\"Fruits\", \"MntMeatProducts\":\"Meat\", \"MntFishProducts\":\"Fish\", \"MntSweetProducts\":\"Sweets\", \"MntGoldProds\":\"Gold\"})","1e73d45e":"df.Z_CostContact.describe()","618ecb02":"df.Z_Revenue.describe()","5e57cfb8":"to_drop = [\"Marital_Status\", \"Dt_Customer\", \"Z_CostContact\", \"Z_Revenue\", \"Year_Birth\", \"ID\"]\ndf = df.drop(to_drop, axis=1)","69ce9c8c":"le = LabelEncoder()\ndf['Education'] = df[['Education']].apply(le.fit_transform)\ndf['Living_With'] = df[['Living_With']].apply(le.fit_transform)","6cd6412a":"df.info()\n","39c1ee42":"df","0bbafafa":"sns.set_style(\"whitegrid\")\nplt.figure()\nsns.pairplot(df[[\"Income\", \"Recency\", \"Age\", \"Spent\", \"Is_Parent\"]], hue='Is_Parent', palette='crest')\nplt.show()\n","3f7ebeed":"df.describe()\n","f244788d":"personal = [\"Income\", \"Recency\", \"Age\", \"Spent\"]\n\n\nfor i in personal:\n    plt.figure()\n    sns.boxplot(x=df[i], palette='crest')\n    plt.show()\n    ","ddd74e97":"df['Age'].quantile(0.25)\n","b1251385":"df['Age'].quantile(0.75)","2820a1da":"Q1 = df['Age'].quantile(0.25)\nQ3 = df['Age'].quantile(0.75)\nIQR = Q3 - Q1","84c7727c":"IQR","d9260abf":"lower_lim = Q1 - 1.5 * IQR\nupper_lim = Q3 + 1.5 * IQR\n\n#The fixed value used during the determination of the limits changes according to the state of the data.","014de792":"lower_lim","5fa4d248":"upper_lim","7d7558a1":"outliers_low = (df['Age'] < lower_lim)","631239c5":"outliers_up = (df['Age'] > upper_lim)","9435ebdf":"len(df['Age'] - (len(df['Age'][outliers_low] + len(df['Age'][outliers_up]))))","acecff01":"df['Age'][(outliers_low | outliers_up)]","e735fa99":"df['Age'][~(outliers_low | outliers_up)]","58b680de":"df = df[~(outliers_low | outliers_up)]","0196120a":"sns.boxplot(df.Age, palette='crest')","63b04897":"sns.distplot(df['Age'], bins = 15, kde = False)\nplt.show()","5e5112e8":"sns.boxplot(df.Income, palette='crest')\n","635d53c9":"sns.distplot(df['Income'], bins = 15, kde = False)\nplt.show()","06efabc5":"Q1 = df['Income'].quantile(0.25)\nQ3 = df['Income'].quantile(0.75)\nIQR = Q3 - Q1\n\nlower_lim = Q1 - 1.5 * IQR\nupper_lim = Q3 + 1.5 * IQR\n\noutliers_low = (df['Income'] < lower_lim)\noutliers_up = (df['Income'] > upper_lim)\nlen(df['Income'] - (len(df['Income'][outliers_low] + len(df['Income'][outliers_up]))))\ndf['Income'][(outliers_low | outliers_up)]\ndf['Income'][~(outliers_low | outliers_up)]\ndf = df[~(outliers_low | outliers_up)]","454c882d":"sns.boxplot(df.Income, palette='crest')","26c46edf":"sns.distplot(df['Income'], bins = 15, kde = False)\nplt.show()","0e199ce0":"corrmat = df.corr()\nplt.figure(figsize = (20,20))  \nsns.heatmap(corrmat,annot=True, center=0, cmap='crest')","4fb47667":"new_df = df.copy()\ncols_del = ['AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1','AcceptedCmp2', 'Complain', 'Response']\nnew_df = new_df.drop(cols_del, axis=1)","50e1b8a4":"sc = StandardScaler()\nsc.fit(new_df)\nscaled_df = pd.DataFrame(sc.transform(new_df), columns = new_df.columns )","5711d704":"scaled_df","fa1d7b61":"pca = PCA(n_components=3)\npca.fit(scaled_df)\npca_df = pd.DataFrame(pca.transform(scaled_df), columns=([\"col1\",\"col2\", \"col3\"]))\npca_df.describe().T","a681c393":"pca_df","93ef948c":"Scene = dict(xaxis = dict(title  = 'Col1'),yaxis = dict(title  = 'Col2'),zaxis = dict(title  = 'Col3'))\ntrace = go.Scatter3d(x=pca_df['col1'], y=pca_df['col2'], z=pca_df['col3'], mode='markers',marker=dict(color = 'blue', size= 10, line=dict(color= 'black',width = 10)))\nlayout = go.Layout(margin=dict(l=0,r=0),scene = Scene,height = 800,width = 800)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.show()","079d0235":"plt.rcParams['figure.figsize'] = [8,8]\nsns.set_style(\"whitegrid\")\ncolors = plt.rcParams['axes.prop_cycle'].by_key()['color']\n\ninertia_list = []\nfor num_clusters in range(1, 11):\n    kmeans_model = KMeans(n_clusters=num_clusters, init=\"k-means++\")\n    kmeans_model.fit(pca_df)\n    inertia_list.append(kmeans_model.inertia_)\n    \n#plotting the inertia curve\nplt.plot(range(1,11),inertia_list)\nplt.scatter(range(1,11),inertia_list)\nplt.scatter(4, inertia_list[4], marker=\"X\", s=100, c=\"r\")\nplt.xlabel(\"Number of clusters\", size=14)\nplt.ylabel(\"WCSS\", size=14)\nplt.title(\"Elbow Method\", size=17)","7db6fb50":"print('K-Means')\nkMeans = KMeans(n_clusters = 4, init = 'k-means++') \ny_pred_kMeans = kMeans.fit_predict(pca_df)\npca_df[\"Clusters_KMeans\"] = y_pred_kMeans\ndf[\"Clusters_KMeans\"]= y_pred_kMeans\nprint('Pred:\\n', y_pred_kMeans)\nprint('\\n\\ninertia: ', kMeans.inertia_, '\\n\\nclusters centers:\\n', kMeans.cluster_centers_)\n","7914a34f":"Scene = dict(xaxis = dict(title  = 'Col1'),yaxis = dict(title  = 'Col2'),zaxis = dict(title  = 'Col3'))\ntrace = go.Scatter3d(x=pca_df['col1'], y=pca_df['col2'], z=pca_df['col3'], mode='markers',marker=dict(color = pca_df[\"Clusters_KMeans\"], size= 10, line=dict(color= 'black',width = 10)))\nlayout = go.Layout(margin=dict(l=0,r=0),scene = Scene,height = 800,width = 800)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.show()","cfee42f2":"%matplotlib inline\nimport scipy.cluster.hierarchy as sch\nplt.figure(figsize=(25,12))\ndendrogram=sch.dendrogram(sch.linkage(pca_df,method = 'ward'))\nplt.title('Dendrogram plot')\nplt.show()","bd1f667e":"agg = AgglomerativeClustering(n_clusters=4)\ny_pred_agg = agg.fit_predict(pca_df)\npca_df[\"Clusters_agg\"] = y_pred_agg\ndf[\"Clusters_agg\"]= y_pred_agg","6c8686ac":"Scene = dict(xaxis = dict(title  = 'Col1'),yaxis = dict(title  = 'Col2'),zaxis = dict(title  = 'Col3'))\n\ntrace = go.Scatter3d(x=pca_df['col1'], y=pca_df['col2'], z=pca_df['col3'], mode='markers',marker=dict(color = pca_df[\"Clusters_agg\"], size= 10, line=dict(color= 'black',width = 10)))\nlayout = go.Layout(margin=dict(l=0,r=0),scene = Scene,height = 800,width = 800)\ndata = [trace]\nfig = go.Figure(data = data, layout = layout)\nfig.show()","d3ec65a2":"pal = [\"#b0282f\",\"#9E00FF\", \"#30832c\",\"#286090\"]\npl = sns.countplot(x=df[\"Clusters_agg\"], palette= pal)\npl.set_title(\"K\u00fcmelerin da\u011f\u0131l\u0131m\u0131\")\nplt.show()","72c973b7":"plt.rcParams['figure.figsize'] = [8,8]\npl = sns.scatterplot(data = df,x=df[\"Spent\"], y=df[\"Income\"],hue=df[\"Clusters_agg\"], palette= pal)\npl.set_title(\"Cluster profile based on income and spent.\")\nplt.legend()\nplt.show()","105924fc":"fig = px.box(df, x=df['Children'], y=df['Spent'], points=\"all\", color=\"Clusters_agg\")\nfig.show()","674d383f":"fig = px.box(df, x=df['Family_Size'], y=df['Spent'], points=\"all\", color=\"Clusters_agg\")\nfig.show()","3a87b276":"fig = px.box(df, x=df['Is_Parent'], y=df['Spent'], points=\"all\", color=\"Clusters_agg\")\nfig.show()","0cc19db5":"fig = px.box(df, x=df['Education'], y=df['Spent'], points=\"all\", color=\"Clusters_agg\")\nfig.show()","7d03a6fb":"fig = px.box(df, x=df['Living_With'], y=df['Spent'], points=\"all\", color=\"Clusters_agg\")\nfig.show()","48761820":"* **Let's get some info.**","0b4ce01c":"### **Data preprocessing**","4a12f236":" * **Basic statistical details**\n>> * **df.describe()**\n>* count:  Sum of filled values\n>* mean:   Average value\n>* std:    Standard deviation\n>* min:    Minimum value\n>* %25:    %25 quantil*\n>* %50:    %50 quantil*\n>* %75:    %75 quantil*\n>* max:    Maximum value","72be9607":"**Cluster profile based on income and spent.**","a62351f3":"### Importing the Dataset","683b1ae5":"* **Converting categorical value to numerical value**","1d45d0f7":"* **Determine the data types and missing value.**","09351644":"* **We are removing columns related to deals and promotions from the dataset as they cause semantic confusion.**","2f347113":"* **Let's open a new column called customer for.**","f421c0e0":"* **Then IQR limits are determined.**","b71c432d":"![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/banner.png?raw=true)\n\n## Customer Segmentation\nCustomer Segmentation creates information that supports decision-making by matching the right customers with the right services and products. It also makes it possible to take the right actions to address customers' concerns.\n\n## Notebook\nIn this study, K-means and Agglomerative clustering were performed using the market campaign dataset. Also, tutorial short description cells have been added.\n\n## Libraries Used \n\n* Pandas\n* Numpy\n* Matplotlib\n* Seaborn\n* Scikit Learn\n* Plotly\n* Scipy\n\n\n","24eed471":"* Total person at family","32de63a8":"* Editing some column names","84e0611b":"* Determination of whether the client has a partner based on marital status.","71766947":"### Importing Library","8b204de4":"* Total number of children living at home","2bfa4c1e":"**KMeans**\n\n**K-Means starts by randomly choosing the center point of k clusters, and the data points outside the center are included in the clusters they are similar to, according to their distance from the mean values of the clusters. Then, the average value of each cluster is calculated and new cluster centers are determined. Again, the distances of the objects from the center are examined. This process until the change is over.**\n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/kmeans.png?raw=true)","6518fb79":"*  **Scale the data**","ea3c5f17":"**By performing this operation, we actually look at the data from a different point of view, looking at the data from a different point means that new attributes can be extracted.**","48c8d98a":"### **Dimension Reduction**\n\n* **In some cases, dimension reduction is very important.**\n\n>* **For example: improving model performance or enabling visualization.**","b327f9b2":"## Image of data reduced to 3D","2a1a38d3":"### Data Cleaning","f6f932f7":"## Modelling","f26815ef":"### We perform label encode operation by changing the labels of unique values because there are many columns.\n\n* Married : Partner\n* Together : Partner\n* Absurd : Alone\n* Widow : Alone\n* YOLO : Alone\n* Single : Alone\n\n* \n* Basic : Undergraduate\n* 2n Cycle : Undergraduate\n* Graduatition : Graduate\n* Master : Graduate\n* PhD : Graduate","175bf77f":"![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/pca.png?raw=true)","49f09fbd":"# Hierarchical Clustering","b305988d":"**Quantities of samples in each cluster.**","f64c3822":"* Hierarchical clustering typically works by sequentially combining similar clusters. It has two different approaches: Agglomerative (Part to whole) and Divisive (Whole to part).\n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/hierarchical.png?raw=true)","1caf547a":"### Deleting rows with missing values\n","26232f36":"### Feature Engineering\n* Customer age","b945e35f":"**WCSS(Within Cluster Sum Of Square):**\n* It is an indicator of how consistent the different cluster amounts are.\n* Calculates and sums the square of the distance of each sample from the cluster center.\n* The smaller the inertia value, the more consistent the different clusters will be.\n* As the number of clusters increases, the WCSS value starts to decrease.\n* The inertia value and the optimal number of clusters are found by the Elbow method.\n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/wcss.png?raw=true)\n\n","bc17f202":"* **There are some missing value in income column**\n* **Dt_Customer column need to process**\n* **There are  3 categorical columns.**\n","fc411787":"##  **Outlier Detection**","cb4aafd7":"**Inter Quantile Range**\n* We will use the IQR method to detect outlier data.\n* First of all, it is necessary to find the distance between the quartiles in the data. (IQR = Q3 - Q1) \n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/Interquartile-Odd.png?raw=true)\n","a90aa998":"* Miscellaneous expenses","93cabb1a":"* **PairPlot**\n\n**Pairplot plots pairwise relationships in a dataset. creates a grid of Axes such that each variable in the data is shared along the y-axis along a single row and on the x-axis along a single column.**","d42afbb4":"## PROFILING\n\n* Determining the qualifications of customers belonging to different clusters.","c87439b1":"* **Determination of Optimal Cluster Quantity**","9784787e":"* **Let's create a column that shows how many days customers have been registered with the company.**\n>* We need to oldest customer and newest customer.","0bf14073":"* **Grup 0:** Low income, low spending.\n* **Grup 1:** Average income, low spending\n* **Grup 2:** Average income, high spending\n* **Grup 3:** High income, high spending","581eeb29":"* **We look for unique values in columns that are categorical.**","aa123e45":"* Parentage status","826904da":"## Correlation\n* **It is a statistical method used to determine whether there is a linear relationship between two numerical measurements, and if so, the direction and severity of this relationship.**\n","f8d83dc0":"* **Extraction of outlier data from the dataset.**","5e31977f":"* Division of education status","92aacb9b":"* **Then we will perform Q1-1.5xIQR and Q3+1.5xIQR transactions to determine the IQR limits.**\n>* **The fixed value used during the determination of the limits changes according to the state of the data.**\n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/iqr.jpeg?raw=true)","8cc6026f":"**Dendrogram**\n\n* A dendrogram is a tree diagram of a distance matrix showing hierarchical clustering (relationships between sets of similar data).\n\n![](https:\/\/github.com\/emreyesilyurt\/customer_segmentation\/blob\/main\/assets\/dendrogram.png?raw=true)","047b075e":"* Z_CostContact and Z_Revenue have fixed value. We exclude them from the dataset because they are unnecessary."}}