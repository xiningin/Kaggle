{"cell_type":{"bbe33380":"code","8c8741a6":"code","b2507448":"code","a0c2b188":"code","edfff1b3":"code","420da180":"code","28eab309":"code","b68e6ea5":"code","64585c4e":"code","a8671551":"code","4aa4a3c2":"code","b377ae22":"code","cde0e5dc":"code","66b318cb":"code","0ee24164":"code","cf66b66d":"markdown","b3b75239":"markdown","0a39a0c6":"markdown","e7ce85d7":"markdown"},"source":{"bbe33380":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8c8741a6":"# Run this code to install the library\n!pip install autots","b2507448":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom autots import AutoTS\n\nimport warnings\nwarnings.filterwarnings('ignore')","a0c2b188":"train = pd.read_csv(\"..\/input\/bri-data-hackathon-cr-optimization\/train.csv\")\ntrain = train[['periode', 'kas_kantor', 'kas_echannel']]\ntrain['kas_kantor'].iloc[0] = train['kas_kantor'].iloc[1]\ntrain['periode'] = pd.to_datetime(train['periode'])\n# train.set_index(['periode'], inplace=True)\n# train.head()","edfff1b3":"train.isna().sum()","420da180":"from sklearn.preprocessing import StandardScaler\nscaler_kantor = StandardScaler()\nscaler_echannel = StandardScaler()\ntrain['kas_kantor'] = scaler_kantor.fit_transform(train[['kas_kantor']])\ntrain['kas_echannel'] = scaler_echannel.fit_transform(train[['kas_echannel']])","28eab309":"# Add time-series models here\nmodel_list = ['ARIMA', 'FBProphet']\nmodel = ['ARIMA', 'FBProphet']","b68e6ea5":"mod_kantor = AutoTS(\n    forecast_length=31,\n    frequency='infer',\n    prediction_interval=0.9,\n    ensemble='all',\n    model_list=model,\n    max_generations=5,\n    num_validations=2,\n    validation_method='even',\n    n_jobs = -1\n)\n\nmod_echannel = AutoTS(\n    forecast_length=31,\n    frequency='infer',\n    prediction_interval=0.9,\n    ensemble='all',\n    model_list=model_list,\n    max_generations=5,\n    num_validations=2,\n    validation_method='even',\n    n_jobs=-1\n)","64585c4e":"# Output is hidden\nmod_kantor = mod_kantor.fit(train,\n                            date_col='periode', \n                            value_col='kas_kantor', \n                            id_col=None)\n\nmod_echannel = mod_echannel.fit(train,\n                                date_col='periode', \n                                value_col='kas_echannel', \n                                id_col=None)","a8671551":"print(mod_kantor)","4aa4a3c2":"print(mod_echannel)","b377ae22":"prediction_kantor = mod_kantor.predict()\nforecast_kantor = prediction_kantor.forecast\nplt.plot(forecast_kantor);","cde0e5dc":"prediction_echannel = mod_echannel.predict()\nforecast_echannel = prediction_echannel.forecast\nplt.plot(forecast_echannel);","66b318cb":"forecast_kantor = scaler_kantor.inverse_transform(forecast_kantor)\nplt.plot(forecast_kantor);","0ee24164":"forecast_echannel = scaler_echannel.inverse_transform(forecast_echannel)\nplt.plot(forecast_echannel);","cf66b66d":"### Print the best model and make prediction","b3b75239":"## Intro\n\nIn this notebook, I will present **a fast and straightforward automated time series model.**\nI will be using the AutoTS library for this notebook, but one can find another similar library to analyze! \n\n**Please do upvote if you find this notebook useful and leave any comment so I can help you ;)**\n**I will update the notebook accordingly.**\n\nTo learn more about AutoTS, please refer to this website: https:\/\/pypi.org\/project\/AutoTS\/\n\nQuoting from the website, AutoTS offer:\n> 1. Finds optimal time series forecasting model and data transformations by genetic programming optimization\n> 2. Twenty-two available model classes, with tens of thousands of possible hyperparameter configurations\n> 3. Over thirty time-series specific data transformations\n> 4. Allows automatic ensembling of best models\n> 5. Multiple cross-validation options\n\nPlease keep in mind that I only use the basic option and parameters **without tuning** in this notebook. You can tune it to get a better score. You can also predict each variable then ensemble the prediction to obtain better results.","0a39a0c6":"## Initialize Model\n\nI will forecast both `kas_kantor` and `kas_echannel` directly without any preprocessing.","e7ce85d7":"## Load library and train data"}}