{"cell_type":{"eeb07dd5":"code","cf72f709":"code","9bbc4bf3":"code","7791f27b":"code","f4c3d3e0":"code","90512a3b":"code","8813b6a5":"code","26cf814a":"code","808f4c8c":"code","c6fa92d6":"code","7fc7ef15":"code","36977e87":"code","0ef34733":"code","b5312d79":"markdown","64307b78":"markdown","a63e52ad":"markdown","9a4f8eb0":"markdown"},"source":{"eeb07dd5":"import numpy as np\nimport pandas as pd\nimport glob\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nimport time\nfrom IPython.display import clear_output\nimport time\n\nimport cv2\n","cf72f709":"!mkdir \/kaggle\/working\/data\/\n!mkdir \/kaggle\/working\/data\/edged\/\n!mkdir \/kaggle\/working\/data\/img\/\n","9bbc4bf3":"# listfolder = ['American Foursquare architecture', 'American craftsman style', 'Art Deco architecture', 'Art Nouveau architecture']\n# file_jpg = [glob.glob(f'\/kaggle\/input\/architecture-dataset\/arcDataset\/{x}\/*.jpg') for x in listfolder]","7791f27b":"# file_jpg = [item for sublist in file_jpg for item in sublist]","f4c3d3e0":"# len(file_jpg)","90512a3b":"!ls '\/kaggle\/input\/architecture-dataset\/arcDataset'","8813b6a5":"result = []\n#file_jpg = glob.glob('\/kaggle\/input\/**\/*.jpg', recursive=True)\nfile_jpg = glob.glob('..\/input\/architectural-styles-dataset\/**\/American Foursquare architecture\/*.jpg', recursive=True)\n\n#print(file_jpg)\n\ndim = (256,256)\nsigma = 0.6\ndata = np.empty((1,256,256,3))\n\nc = 0\n\nfor i, f in enumerate(file_jpg):\n    img = cv2.imread(f)\n    #print(img)\n\n    img = cv2.resize(img, dim, interpolation=cv2.INTER_AREA)\n    #img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n\n    v = np.median(img)\n\n    lower = int(max(0, (1.0 - sigma) * v))\n    upper = int(min(255, (1.0 + sigma) * v))\n    edged = cv2.Canny(img, lower, upper)\n    \n#     plt.imshow(img)\n#     plt.show()\n    \n#     plt.imshow(edged)\n#     plt.show()\n    \n    \n    img = np.array([img]).astype(float)\n    edged = np.array([edged]).astype(float)\n    \n    if edged.sum() < 10000*255 and edged.sum() >1000:\n#         plt.imshow(img[0]\/255)\n#         plt.show()\n#         plt.imshow(edged[0])\n#         plt.show()\n        np.save(f'\/kaggle\/working\/data\/edged\/{i}', edged)\n        np.save(f'\/kaggle\/working\/data\/img\/{i}', img)\n        c = c + 1\n        \n        \n        \n#     print(img.shape)\n#     print(edged.shape)\n\n    \n    if i % 100 == 0:\n        print(f'done {i}')\n    \n\n    \n#     if i == 0:\n#         break\n\nprint(c)\n#print(data.shape)","26cf814a":"# plt.imshow(np.load('\/kaggle\/working\/data\/edged\/0.npy')[0])\n# plt.show()\n# plt.imshow(np.load('\/kaggle\/working\/data\/img\/0.npy')[0])\n# plt.show()","808f4c8c":"data = []\nlabel = []","c6fa92d6":"for np_name in glob.glob('\/kaggle\/working\/data\/img\/*.npy'):\n    #numpy_vars[np_name] = np.load(np_name)\n    #print(np_name)\n    data.append(np.load(np_name))\n    \n    pass\n\nfor np_name in glob.glob('\/kaggle\/working\/data\/edged\/*.npy'):\n    #numpy_vars[np_name] = np.load(np_name)\n    #print(np_name)\n    label.append(np.load(np_name))\n    \n    pass","7fc7ef15":"# data = np.array(data[:-4])\n# label = np.array(label[:-4])","36977e87":"# print(data.shape)\n# print(label.shape)\n# print(label.shape[0]%64)","0ef34733":"np.save(f'\/kaggle\/working\/data\/data', data)\nnp.save(f'\/kaggle\/working\/data\/label', label)","b5312d79":"# Get data and prepare the dataset\n\nI am using architecture dataset images i found from searching in kaggle. \n\nTo make the sketch of the architectural images i use OpenCV Canny edge detection .\n","64307b78":"American Foursquare architecture\n\nAmerican craftsman style\n\nArt Deco architecture\n\nArt Nouveau architecture\n\nGreek Revival architecture\n\nTudor Revival architecture\n","a63e52ad":"# Welcome, \n### I need a architectural sketch and image pair dataset for my attempt at making architectural cGAN that can transform architectural sketch to images","9a4f8eb0":"### Make sketch from  dataset"}}