{"cell_type":{"ec7fdfa1":"code","37a1e8f4":"code","39587fff":"code","ce80e19f":"code","283ebfce":"code","65cd713b":"code","5aed51ec":"code","502c9bb4":"code","b67d7da0":"code","b03666b0":"code","333e28ab":"code","26b53920":"code","eda20a75":"code","0cf0e322":"code","680ccb7c":"code","d9ec2626":"code","155fe44c":"code","a9b08692":"code","05de01b4":"code","8f39db8c":"code","bbb2a1e4":"code","f101078c":"code","f7e3aa69":"code","ea5cff6d":"code","27e3bb36":"code","6ffeec9b":"code","5e9d7bca":"markdown"},"source":{"ec7fdfa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","37a1e8f4":"data_path = '\/kaggle\/input\/dwdm-petrol-prices\/Petrol Prices.csv'\ndata = pd.read_csv(data_path) \ndata.head(7)","39587fff":"data.tail(4)","ce80e19f":"data['Date']=data.Date.astype('datetime64')","283ebfce":"Month = data.Date.dt.month\ndata['Month'] = Month\nresult = data.groupby('Month').Date.count()\nresult","65cd713b":"import matplotlib.pyplot as plt","5aed51ec":"data.groupby('Month').Date.count().plot(kind=\"bar\",\n    title=\"Total Record per Month\",\n    figsize=(12,8)\n)\nplt.ylabel(\"Number of Records\")","502c9bb4":"from datetime import time","b67d7da0":"Month = data.Date.dt.month_name()\ndata['Month'] = Month\nDay = data.Date.dt.day\ndata['Day'] = Day\nYear = data.Date.dt.year\ndata['Year'] = Year","b03666b0":"data['TimeStamp']= data.Date.dt.time","333e28ab":"data.describe()","26b53920":"Interesting_data = data[['Gasolene_87','Gasolene_90','Auto_Diesel','Kerosene','Propane','Butane','HFO','Asphalt','ULSD','87_Change','Ex_Refinery']]\ndf = pd.DataFrame(Interesting_data)\ndf\nx=df.set_index(data['Date'])\nx.plot(kind='line', figsize=(12,8))","eda20a75":"print(x['Gasolene_90'].pct_change(periods=4))","0cf0e322":"x['Gasolene_90'].pct_change(periods=4).plot(kind='line', figsize=(12,8))","680ccb7c":"data1 = pd.DataFrame({\n    'Gasolene_87':data['Gasolene_87'],\n    'Gasolene_90':data['Gasolene_90'],\n    'Month':data['Month'],\n    'Day':data['Day'],\n    'Year':data['Year'],\n    'Timestamp':data['TimeStamp'],\n})\ndata1","d9ec2626":"from sklearn.cluster import KMeans","155fe44c":"data_values = data1.iloc[ :, [0,1]].values\ndata_values","a9b08692":"wcss = []\nfor i in range( 1, 15 ):\n    kmeans = KMeans(n_clusters=i, init=\"k-means++\", n_init=10, max_iter=300) \n    kmeans.fit_predict( data_values )\n    wcss.append( kmeans.inertia_ )\n    \nplt.plot( wcss, 'ro-', label=\"WCSS\")\nplt.title(\"Computing WCSS for KMeans++\")\nplt.xlabel(\"Number of clusters\")\nplt.ylabel(\"WCSS\")\nplt.show()","05de01b4":"data2 = data[['Gasolene_87','Gasolene_90','Auto_Diesel','Kerosene','Propane','Butane','HFO','Asphalt','ULSD','87_Change','Ex_Refinery']]","8f39db8c":"missing_data_results = data2.isnull().sum()\nprint(missing_data_results)","bbb2a1e4":"data2 = data2.fillna( data.median() )","f101078c":"data_values1 = data2.iloc[ :, :].values\ndata_values1","f7e3aa69":"\nkmeans = KMeans(n_clusters=4, init=\"k-means++\", n_init=10, max_iter=300) \ndata1[\"cluster\"] = kmeans.fit_predict( data_values )\ndata1.head(25)","ea5cff6d":"import seaborn as sns","27e3bb36":"sns.pairplot( data1, hue=\"cluster\")","6ffeec9b":"average = data.groupby('Year').mean()\naverage","5e9d7bca":"A)Average price for gas before cluster \n\t    Gasolene_87\tGasolene_90\tAuto_Diesel\tKerosene\tPropane\t     Butane\t    HFO\t        Asphalt\t    ULSD\t   87_Change\tSCT\t        Ex_Refinery\t       \nYear\t\t\t\t\t\t\t\t\t\t\t\t\t\n2015\t103.617264\t105.273243\t97.179638\t96.638336\t35.102489\t40.115998\t45.031875\t66.629389\t106.142917\t0.069434\t23.238175\t70.959337\n2016\t99.019338\t100.674829\t91.794723\t83.194646\t33.984775\t40.704885\t40.699758\t49.906919\t100.427785\t-0.123654\t29.683023\t60.334558\n2017\t111.148185\t113.689085\t107.640877\t91.616954\t43.929562\t48.724500\t63.179696\t63.526038\t113.380477\t-0.430192\t35.704369\t65.339435\t\n2018\t129.460207\t132.296107\t130.314930\t111.805059\t49.359339\t54.288204\t78.827380\t83.159994\t135.057030\t0.018333\t37.776100\t79.914998\t\n2019\t126.284467\t129.120367\t131.411411\t109.790811\t44.055822\t51.152833\t80.628300\t93.862844\t134.500733\t-1.006111\t37.776100\t77.027961\t\n \nB)Cluster 0 have the third highest gas price while cluster 1 had the highest. \n Cluster 3 had the lowest gas prices and cluster 2 had the second highest. \n \nC)K-means clustering is a type of unsupervised learning, which is used when you have unlabeled data. The goal of this algorithm is to find groups in the data.\n \nD)Autoregression Models: According to Brownlee (2019) Autoregression is a time series model that uses observations from previous time steps as input to a regression equation to predict the value at the next time step."}}