{"cell_type":{"e363d4e6":"code","62306c16":"code","e40c18e1":"code","45b40cc1":"code","09a1a85a":"code","a1cc4e0a":"code","85ac98e7":"code","3f5d5dd3":"code","25fda609":"code","603e0e75":"code","e9e51f19":"code","97a66c18":"markdown","be77d064":"markdown"},"source":{"e363d4e6":"# importing the libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob","62306c16":"# loading the directories \ntraining_dir = '..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Training\/'\nvalidation_dir = '..\/input\/fruits\/fruits-360_dataset\/fruits-360\/Test\/'\ntest_dir = '..\/input\/fruits\/fruits-360_dataset\/fruits-360\/test-multiple_fruits\/'","e40c18e1":"# useful for getting number of files\nimage_files = glob(training_dir + '\/*\/*.jp*g')\nvalid_image_files = glob(validation_dir + '\/*\/*.jp*g')","45b40cc1":"# getting the number of classes i.e. type of fruits\nfolders = glob(training_dir + '\/*')\nnum_classes = len(folders)\nprint ('Total Classes = ' + str(num_classes))","09a1a85a":"# this will copy the pretrained weights to our kernel\n!mkdir ~\/.keras\n!mkdir ~\/.keras\/models\n!cp ..\/input\/keras-pretrained-models\/*notop* ~\/.keras\/models\/\n!cp ..\/input\/keras-pretrained-models\/imagenet_class_index.json ~\/.keras\/models\/","a1cc4e0a":"# importing the libraries\nfrom keras.models import Model\nfrom keras.layers import Flatten, Dense\nfrom keras.applications import VGG16\n#from keras.preprocessing import image\n\nIMAGE_SIZE = [64, 64]  # we will keep the image size as (64,64). You can increase the size for better results. \n\n# loading the weights of VGG16 without the top layer. These weights are trained on Imagenet dataset.\nvgg = VGG16(input_shape = IMAGE_SIZE + [3], weights = 'imagenet', include_top = False)  # input_shape = (64,64,3) as required by VGG\n\n# this will exclude the initial layers from training phase as there are already been trained.\nfor layer in vgg.layers:\n    layer.trainable = False\n\nx = Flatten()(vgg.output)\n#x = Dense(128, activation = 'relu')(x)   # we can add a new fully connected layer but it will increase the execution time.\nx = Dense(num_classes, activation = 'softmax')(x)  # adding the output layer with softmax function as this is a multi label classification problem.\n\nmodel = Model(inputs = vgg.input, outputs = x)\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","85ac98e7":"model.summary()","3f5d5dd3":"# Image Augmentation\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.vgg16 import preprocess_input\n\ntraining_datagen = ImageDataGenerator(\n                                    rescale=1.\/255,   # all pixel values will be between 0 an 1\n                                    shear_range=0.2, \n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    preprocessing_function=preprocess_input)\n\nvalidation_datagen = ImageDataGenerator(rescale = 1.\/255, preprocessing_function=preprocess_input)\n\ntraining_generator = training_datagen.flow_from_directory(training_dir, target_size = IMAGE_SIZE, batch_size = 200, class_mode = 'categorical')\nvalidation_generator = validation_datagen.flow_from_directory(validation_dir, target_size = IMAGE_SIZE, batch_size = 200, class_mode = 'categorical')","25fda609":"# The labels are stored in class_indices in dictionary form. \n# checking the labels\ntraining_generator.class_indices","603e0e75":"training_images = 37836\nvalidation_images = 12709\n\nhistory = model.fit_generator(training_generator,\n                   steps_per_epoch = 10000,  # this should be equal to total number of images in training set. But to speed up the execution, I am only using 10000 images. Change this for better results. \n                   epochs = 1,  # change this for better results\n                   validation_data = validation_generator,\n                   validation_steps = 3000)  # this should be equal to total number of images in validation set.","e9e51f19":"print ('Training Accuracy = ' + str(history.history['acc']))\nprint ('Validation Accuracy = ' + str(history.history['val_acc']))","97a66c18":"We have not used any X_train, y_train, X_test, y_test or generated any labels for our classes. It is because we are using the flow_from_directory function of ImageDataGenerator. This function takes a directory as an input and assign the class indices to its sub directories. For this function to work, each subdirectory must contain a single class object only.\nAnother function of ImageDataGenerator is 'flow'. With this function, we need to provide X_train, y_train. If you use X_train, y_train, X_test, y_test, don't forget to normalize X_train and X_test and use on hot encoding for y_train and y_test.","be77d064":"In this notebook, we are going to use pretrained weights of VGG 16 and then add a new output layer with the required number of classes. In order to use the pretrained weights, you need add a new dataset containing the weights. Go to Data tab and click on 'Add Data Source'. Then search for 'Keras Pretrained Model' dataset which contains weights of different architectures like VGG16, Inception, Resnet50, Xception.\n\nThe dataset contains 3 directories: Training, Validation and Testing. Each directory contains sub-directories with images of different fruits."}}