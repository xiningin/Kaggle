{"cell_type":{"81387a3e":"code","079db154":"code","0c6aa19b":"code","cb47d020":"code","8bc540d6":"code","bab6890b":"code","aacb43da":"code","0362f09a":"code","1d4d0a2c":"code","c3adf83f":"code","f8d16541":"code","7e6087b0":"code","af332fd4":"code","6355e146":"code","908a93b0":"code","070bef95":"code","3691172f":"code","b9dae9b3":"code","a81dad55":"code","0015211c":"code","75758595":"code","5737cdb0":"code","789fc89f":"code","bc539122":"code","ead7694a":"code","9675ddfa":"code","050352ee":"code","0f50e7d4":"code","70d65017":"code","53e48f80":"code","590970f8":"code","633be0b5":"code","f11e50e2":"code","aace3923":"code","8471f251":"code","5ba4258f":"code","1632c0fc":"code","8670ef20":"code","01f03bc3":"code","0a33a2c2":"code","01bef58d":"code","a601c349":"code","ffcb7283":"code","bc34dded":"code","f3b86d29":"code","1c786449":"code","b9efe097":"code","a2fe1897":"code","d661f4e6":"code","aea619a9":"code","c9f4162b":"code","afe3b642":"code","9b0e2172":"code","5ef96d65":"code","17a39a76":"code","3f7f0fc1":"code","fc37ebc6":"code","d8d8dc3b":"code","24307876":"code","63232390":"code","ba29c62d":"code","c43849a1":"code","b1c4bd0a":"code","93c62dd3":"code","2835eb0e":"code","aa20d8ab":"code","38b62ccf":"code","04bb9079":"code","5e68f21a":"code","0ce89de4":"code","a43ef9bf":"code","5ec74573":"code","b72d4894":"code","fecc651d":"code","92ab5327":"code","a21fe3a7":"code","7fa3281e":"code","33cff095":"code","138a3483":"code","a52c22e4":"code","2d5613ca":"code","0679db26":"code","17648874":"code","f1a9718a":"markdown","36619f8c":"markdown","cb178e89":"markdown","e3366ce1":"markdown","82448d9e":"markdown","b2bdb00a":"markdown","bcda595a":"markdown","4bca56a9":"markdown","f9310266":"markdown","95936921":"markdown","40578bae":"markdown","486ac735":"markdown"},"source":{"81387a3e":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","079db154":"df=pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')","0c6aa19b":"pd.set_option('display.max_columns', None)","cb47d020":"df.head()","8bc540d6":"df.shape","bab6890b":"df.isna().sum()  #we will not convert values of -1 to none ,just leave them","aacb43da":"df[df['winPlacePerc'].isna()]","0362f09a":"df=df.drop(2744604)            #dropping this nan\ndf=df.reset_index(drop=True)","1d4d0a2c":"df.matchId.value_counts()        #it seems the data have all players os some matches \n                                 #but actually I didn't use it","c3adf83f":"df[df.killPoints==0][df.rankPoints!=-1].shape    #getting the shape of 0 kill points and no rank","f8d16541":"df[df.killPoints==0].shape                   #it seems all 0 kill points has no rank","7e6087b0":"df.describe()          #getting the statistical analysis of the data ","af332fd4":"df.matchType.value_counts() ","6355e146":"import matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline","908a93b0":"df.head()","070bef95":"plt.figure(figsize=(13,7))\nsns.boxplot(x='matchType',y='winPlacePerc',data=df)     \nplt.xticks(rotation=300)\nplt.show()\n\n\n#it seems the type of match isn't playing a big role in winning","3691172f":"sns.lmplot(x='winPlacePerc',y='kills',data=df,fit_reg=False)\nplt.show()\n\n#A lot wins without even one kill, may be they are cheaters or have a great team beside them\n#but in general more kills more wins","b9dae9b3":"sns.lmplot(x='winPlacePerc',y='winPoints',data=df,fit_reg=False)\nplt.show()\n\n#win points don't give you more probabilty to win ever","a81dad55":"sns.lmplot(x='winPlacePerc',y='killPoints',data=df,fit_reg=False)\nplt.show()\n\n#neither kill points","0015211c":"sns.lmplot(x='winPlacePerc',y='rankPoints',data=df,fit_reg=False)\nplt.show()\n\n#and rank is trash ","75758595":"sns.lmplot(x='winPlacePerc',y='longestKill',data=df,fit_reg=False)\nplt.show()\n\n#okay it has a little tiny correlation but a lot of noise ","5737cdb0":"sns.lmplot(x='winPlacePerc',y='damageDealt',data=df)\nplt.show()\n\n#some winners didn't even make a scratch ,but you can see a slight correlation though","789fc89f":"sns.lmplot(x='winPlacePerc',y='walkDistance',data=df)\nplt.show()\n\n#winners without even walk ,hackers","bc539122":"df[df['walkDistance']==0][df['winPlacePerc']==1].describe()\n\n#and a lot of cheaters here weapons and kills without a single move","ead7694a":"sns.lmplot(x='winPlacePerc',y='swimDistance',data=df,fit_reg=False)\nplt.show()\n\n#not interesting ","9675ddfa":"weapons_num=pd.cut(df['weaponsAcquired'],[0,2,6,12,25,50,100,200,300],\n                   labels=['0-2','2-6','6-12','12-25','25-50','50-100','100-200','+200'])\n\n#making the number of weapons acquired in categories so we can visualize it properly","050352ee":"plt.figure(figsize=(12,7))\nsns.boxplot(x=weapons_num,y='winPlacePerc',data=df)\nplt.show()\n\n#okay having weapons from 6 and up to 25 makes your probability to win a bit more\n#it's the proper number beacuse more than 100 hunderd are likely cheatings","0f50e7d4":"del weapons_num","70d65017":"kills=pd.cut(df['kills'],[1,10,20,40,60,80],labels=['1-10','10-20','20-40','40-60','+60'])\n#make kills in categories","53e48f80":"plt.figure(figsize=(13,6))\nsns.boxplot(x=kills,y=df['winPlacePerc'])\nplt.show()","590970f8":"df.headshotKills.value_counts()\n\n#64 headshot !","633be0b5":"head_shot=pd.cut(df['headshotKills'],[0,1,2,3,4,7,10,16,19,35,64],\n                 labels=['0','1','2','3','4-7','7-10','10-16','16-19','19-35','35-64'])\n\n#making head shots in categories","f11e50e2":"plt.figure(figsize=(13,6))\nsns.boxplot(x=head_shot,y=df['winPlacePerc'])\n\n#if you get more than 5 head shots you are likely more to win ","aace3923":"groups=df.groupby('groupId').sum()\n\n#we will make some features that take all the group in consideration","8471f251":"groups=groups.reset_index()","5ba4258f":"groups.head()","1632c0fc":"add_col=groups.loc[:,['groupId','kills','revives','weaponsAcquired','teamKills']]\n\n#These are the new columns","8670ef20":"add_col=add_col.rename(columns={'kills':'groupKills','revives':'groupRevives',\n                                'weaponsAcquired':'groupWeapons','teamKills':'groupOwnKills'})\n\n#let's give them nice names ","01f03bc3":"df2=df.merge(add_col,how='left',on=['groupId'])\n#and we merge them with the data","0a33a2c2":"df2.head()","01bef58d":"del df \ndel groups\ndel add_col\n#then get rid of them ","a601c349":"df2.loc[:,['groupKills','groupRevives','groupWeapons','groupOwnKills']].describe()","ffcb7283":"gkills=pd.cut(df2['groupKills'],[1,10,20,40,60,80,200],\n              labels=['1-10','10-20','20-40','40-60','60-80','+80'])","bc34dded":"plt.figure(figsize=(13,6))\nsns.boxplot(x=gkills,y=df2['winPlacePerc'])\nplt.show()","f3b86d29":"gweapons_num=pd.cut(df2['groupWeapons'],[0,2,6,12,25,50,100,200,300,700],\n                labels=['0-2','2-6','6-12','12-25','25-50','50-100','100-200','200-300','+300'])","1c786449":"plt.figure(figsize=(13,6))\nsns.boxplot(x=gweapons_num,y=df2['winPlacePerc'])\nplt.show()\n\n#Your group should have from 12 to 25 to be close to win \n#because the game is not about collecting weapons","b9efe097":"grevives=pd.cut(df2['groupRevives'],[0,2,4,8,15,30,50],\n                labels=['0-2','2-4','4-8','8-15','15-30','+30'])","a2fe1897":"plt.figure(figsize=(13,6))\nsns.boxplot(x=grevives,y=df2['winPlacePerc'])\nplt.show()","d661f4e6":"df2.head()","aea619a9":"df2['matchType']=df2.matchType.astype('category') #make it categorical to encode","c9f4162b":"df2['matchtype']=df2['matchType'].cat.codes  #encoding","afe3b642":"df2.head()","9b0e2172":"pubg=df2.drop(columns=['Id','groupId','matchId','matchType'])  ","5ef96d65":"del df2","17a39a76":"pubg=pubg.drop(columns=['killPoints','matchDuration','maxPlace','numGroups','rankPoints'\n                        ,'winPoints','groupOwnKills','teamKills','vehicleDestroys'])\n\n#dropping the unnecessary columns","3f7f0fc1":"from sklearn.model_selection import train_test_split","fc37ebc6":"x=pubg.drop(columns=['winPlacePerc'])\ny=pubg['winPlacePerc']","d8d8dc3b":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)","24307876":"del x\ndel y","63232390":"plt.figure(figsize=(15,10))\nsns.heatmap(pubg.corr(),annot=True)","ba29c62d":"corr_matrix = pubg.corr()\ncorr_matrix[\"winPlacePerc\"].sort_values(ascending=False)\n\n#It seems that some of our new features are good correlated ","c43849a1":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(x_train, y_train)","b1c4bd0a":"from sklearn.metrics import mean_squared_error\n\ny_pred = lin_reg.predict(x_test)\nlin_mse = mean_squared_error(y_test, y_pred)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","93c62dd3":"del lin_reg\ndel lin_mse\ndel lin_rmse","2835eb0e":"from sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(random_state=42)\ntree_reg.fit(x_train, y_train)","aa20d8ab":"y_pred = tree_reg.predict(x_test)\ntree_mse = mean_squared_error(y_test, y_pred)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse\n#great","38b62ccf":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(tree_reg, x_train, y_train,\n                         scoring=\"neg_mean_squared_error\", cv=5)","04bb9079":"-scores","5e68f21a":"del scores","0ce89de4":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    {'max_features': [6, 8,None]},\n  ]\n\ngrid_search = GridSearchCV(tree_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\ngrid_search.fit(x_train, y_train)","a43ef9bf":"grid_search.best_params_\n#I knew it","5ec74573":"tree_reg = DecisionTreeRegressor(random_state=42)\ntree_reg.fit(pubg.drop(columns=['winPlacePerc']), pubg['winPlacePerc'])\n\n#Fitting the model with all the data and it's ready to go","b72d4894":"df_test=pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","fecc651d":"groups=df_test.groupby('groupId').sum()\ngroups=groups.reset_index()","92ab5327":"add_col=groups.loc[:,['groupId','kills','revives','weaponsAcquired','teamKills']]\nadd_col=add_col.rename(columns={'kills':'groupKills','revives':'groupRevives','weaponsAcquired':'groupWeapons','teamKills':'groupOwnKills'})\ndf2_test=df_test.merge(add_col,how='left',on=['groupId'])","a21fe3a7":"df2_test.head()","7fa3281e":"df2_test['matchType']=df2_test.matchType.astype('category')\ndf2_test['matchtype']=df2_test['matchType'].cat.codes","33cff095":"final=df2_test.drop(columns=['Id','groupId','matchId','matchType'])\nfinal=final.drop(columns=['killPoints','matchDuration','maxPlace','numGroups',\n                          'rankPoints','winPoints','groupOwnKills','teamKills','vehicleDestroys'])","138a3483":"Id=df2_test['Id']  #for submission","a52c22e4":"winPlacePerc = tree_reg.predict(final)  #our prediction","2d5613ca":"pred =pd.concat([Id,pd.Series(winPlacePerc)],axis=1)","0679db26":"pred=pred.rename(columns={0:'winPlacePerc'})","17648874":"pred.to_csv('submission.csv',index=False) ","f1a9718a":"# Visualizing the data and getting insights","36619f8c":"## Splitting the data","cb178e89":"# Decision Tree model","e3366ce1":"# Preparing the data for the model","82448d9e":"> # So to make your win more certain, you should have minimum 6 weapons ,10 kills,5 headshots,your group make about 4 revives and run a lot if you are not a hacker anyway","b2bdb00a":"# Model tunning","bcda595a":"# Adding new features","4bca56a9":"# Linear Regression model","f9310266":"# Getting the data","95936921":"## Converting some numerical features into categories","40578bae":"## Handling the test set","486ac735":"## Let's visualize these new features "}}