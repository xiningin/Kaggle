{"cell_type":{"2f2ddf50":"code","b149feab":"code","796d2bc7":"code","8d641e83":"code","5e2cb11b":"code","ab36cfa9":"code","c5077d67":"code","38cdc5ad":"code","210c7313":"code","85b487fd":"code","6b2dbd71":"markdown","2b924f93":"markdown","6e8b6f52":"markdown","9b21aeed":"markdown","1b07e08e":"markdown","e599a23f":"markdown","fcaa9525":"markdown","af3fd178":"markdown","5718a82f":"markdown","4048d04e":"markdown"},"source":{"2f2ddf50":"import numpy as np\nimport pandas as pd \nimport plotly\nfrom plotly import graph_objs as go\nimport datetime\n\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\n\nfrom plotly import tools\nimport seaborn as sns\ninit_notebook_mode(connected=True)\nfrom itertools import zip_longest\nimport string \nimport re\n\nfrom nltk.corpus import stopwords \nfrom nltk.util import ngrams\nimport nltk ","b149feab":"binance = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_binance.json')\n\nbinance.head(5)","796d2bc7":"#consolidating the dataframe\n\nhuobi = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_huobi.json')\nokex = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_okex.json')\nbittrex = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_bittrex.json')\nbinance = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_binance.json')\nkucoin = pd.read_json('\/kaggle\/input\/crypto-telegram-groups\/group_messages_kucoin.json')\n\nhuobi['Channel_name'] = 'Huobi'\nokex['Channel_name'] = 'OKEx'\nbittrex['Channel_name'] = 'Bittrex'\nbinance['Channel_name'] = 'Binance'\nkucoin['Channel_name'] = 'Kucoin'\n\nconsolidated_data = huobi\nconsolidated_data = consolidated_data.append(okex)\nconsolidated_data = consolidated_data.append(bittrex)\nconsolidated_data = consolidated_data.append(binance)\nconsolidated_data = consolidated_data.append(kucoin)","8d641e83":"#date manipulation\nstopwords = stopwords.words('english')\nconsolidated_data['CreationDate'] = pd.to_datetime(consolidated_data['date'])\nconsolidated_data['CreationYear'] = consolidated_data['CreationDate'].dt.year\nconsolidated_data['CreationMonth'] = consolidated_data['CreationDate'].dt.month\nconsolidated_data['CreationMonth'] = consolidated_data['CreationMonth'].apply(lambda x : \"0\"+str(x) if len(str(x)) < 2 else x)\nconsolidated_data['CreationDay'] = \"27\"\nconsolidated_data['MessageDate'] = consolidated_data[\"CreationYear\"].astype(str) +\"-\"+ consolidated_data[\"CreationMonth\"].astype(str) +\"-\"+ consolidated_data[\"CreationDay\"].astype(str)\nconsolidated_data['Message'] = consolidated_data['message'].fillna(\" \")\n\n## cleaning text\ndef clntxt(text):\n    text = text.lower()\n    text = \" \".join([c for c in text.split() if c not in stopwords])\n    for c in string.punctuation:\n        text = text.replace(c, \" \")\n    text = \" \".join([c for c in text.split() if c not in stopwords])\n    \n    words = []\n    ignorewords = [\"www\", \"http\",\"https\" \"com\"]\n    for wrd in text.split():\n        if len(wrd) <= 2: \n            continue\n        if wrd in ignorewords:\n            continue\n        words.append(wrd)\n    text = \" \".join(words)    \n    return text\n\n# counting mentions\ndef count_presence(txt, wrds):    \n    cnt = 0\n    txt = \" \"+txt+\" \"\n    for wrd in wrds.split(\"|\"):\n        if \" \"+wrd+\" \" in txt:\n            cnt += 1 \n    return cnt\n\nconsolidated_data['CleanMessage'] = consolidated_data['Message'].apply(lambda x : clntxt(x))\n","5e2cb11b":"#plotting telegram mentions\n\ndef plotit(listed, title):    \n    traces = []\n    for model in listed:\n        temp = consolidated_data.groupby('MessageDate').agg({model : \"sum\"}).reset_index()\n        trace = go.Scatter(x = temp[\"MessageDate\"], y = temp[model], name=model.split(\"|\")[0].title(), line=dict(shape=\"spline\", width=2), mode = \"lines\")\n        traces.append(trace)\n\n    layout = go.Layout(\n        paper_bgcolor='#fff',\n        plot_bgcolor=\"#fff\",\n        legend=dict(orientation=\"h\", y=1.1),\n        title=title,\n        title_x=0.5,\n        xaxis=dict(\n            gridcolor='rgb(255,255,255)',\n            showgrid=True,\n            showline=False,\n            showticklabels=True,\n            tickcolor='rgb(127,127,127)',\n            ticks='outside',\n            zeroline=False\n        ),\n        yaxis=dict(\n            title=\"Number of Mentions\",\n            gridcolor='rgb(255,255,255)',\n            showgrid=False,\n            showline=False,\n            showticklabels=True,\n            tickcolor='rgb(127,127,127)',\n            ticks='outside',\n            zeroline=False\n        ),\n    )\n\n    fig = go.Figure(data=traces, layout=layout)\n    iplot(fig)\n\n#btc vs eth\nmodels = [\"btc\", \"eth\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"Telegram Discussions: BTC vs ETH\")    \n","ab36cfa9":"#other popular crypto-currencies\nmodels = [\"dot\", \"xrp\", \"ltc\", \"xlm\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"Telegram Discussions: DOT vs XRP vs LTC vs XLM\")    \n","c5077d67":"#btc vs defi\nmodels = [\"btc\", \"defi\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"Telegram Discussions: BTC vs DeFi\")    ","38cdc5ad":"#stablecoins\nmodels = [\"usdt\", \"dai\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"Stable coins: USDT vs DAI\") ","210c7313":"#DEXs\nmodels = [\"uniswap\", \"sushiswap\", \"1inch\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"DEX: UNISWAP vs Sushiswap vs 1inch\")","85b487fd":"#defi protocols\nmodels = [\"makerdao\", \"compound\"]\nfor col in models:\n    consolidated_data[col] = consolidated_data[\"CleanMessage\"].apply(lambda x : count_presence(x, col))\nplotit(models, \"DeFi protocols: MakerDAO vs Compound\")","6b2dbd71":"DeFi showing volatility in the number of mentions starting from the 2020 spring and again that is quite logical as DeFi is known to have some ups and downs in popularity during 2020. \n\n### Stable coins: centralized stablecoins (USDT) vs decentralized (DAI)\n\nLet's see if true decentralised stable coins are getting more popularity recently","2b924f93":"As seen, there are some possible trends in the crypto space based on mentions in the Telegram groups. This [dataset](https:\/\/www.kaggle.com\/aagghh\/crypto-telegram-groups) is quite interesting and can be used to derive some other trends as well as measuring impact by analyzing the number of messages' views\/shares and more. \n\nAlso, there is a good opportunity to perform some sentiment analysis in an attempt to predict the asset prices. That is what I probably would do in the next parts. ","6e8b6f52":"### DeFi protocols (MakerDAO vs Compound)","9b21aeed":"![](https:\/\/media.giphy.com\/media\/8LWOXKCJxAOic\/giphy.gif)","1b07e08e":"XRP (Ripple) is getting more attention at the end of 2020 because of the SEC investigation regarding it and that seems logical. Other assets aren't getting much in that regard. \n\n### Bitcoin vs DeFi\n\nI want to see how the decentralized finance area is getting noticed in the crypto community.\u00a0","e599a23f":"### Bitcoin vs Ether\n\nFirst I'd like to see how the number of mentions in the community is spread across the number 1 and 2 cryptocurrencies ","fcaa9525":"![](https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Fcoinmixed.eu%2Fthe-best-crypto-memes-that-will-get-you-through-a-bear-market%2F&psig=AOvVaw0Tv5wcC7QYcHQjELBT3Uhg&ust=1612269326840000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCOjJ-cjZyO4CFQAAAAAdAAAAABAD)\n\n## Historical Trends in the top Telegram Crypto Groups\n\nA number of trends have changed over the years in the field of cryptocurrencies. [This dataset](https:\/\/www.kaggle.com\/aagghh\/crypto-telegram-groups) gathers the data from the largest crypto exchanges Telegram public groups. Essentially the data consists of the messages that users post in the group along with the number of their views\/shares, post dates, and others.\n\nIn this notebook, I am going to show how this dataset can be effectively used by exploring some trends in crypto over the years and make some visualizations using Plotly\n\nImporting modules first:","af3fd178":"As seen there is a huge splash in the number of mentions for BTC and ETH starting from July 2020 that is well correlated with the BTC\/ETH price rise. However, this does not necessarily mean that the assets are getting a rise in price because more and more people talking about it, and actually might look like a 'reverse causality' problem. The assets are rising and people talk more about it. \n\n### Other popular cryptocurrencies (DOT vs XRP vs LTC vs XLM)","5718a82f":"Then, I will see how the data looks like. Given it's a JSON format, I need to read it with `pd.read_json` \n\nHere is the example of the data read from Binance Telegram group:\n","4048d04e":"USDT has been dominating the space for a while and still does, however, decentralized stable coins like DAI ([MakerDAO](https:\/\/makerdao.com\/en\/)) is getting the rise of popularity recently, but unfortunately still not much comparing to traditional centralised USDT\n\n### Decentralized exchanges (UNISWAP vs Sushiswap vs 1inch)"}}