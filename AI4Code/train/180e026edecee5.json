{"cell_type":{"f101bc40":"code","7963b457":"code","d8b0ef34":"code","8d74e07c":"code","a715f30e":"code","ce936fef":"code","3771eedf":"code","f4724f52":"code","43dfc340":"code","aa9609b7":"code","64e64aae":"code","cee304ab":"code","19eae71f":"code","131913d7":"code","f7832763":"code","fcb059e1":"code","b295b43f":"code","646d1f28":"markdown","01cee1b3":"markdown","65c98384":"markdown","d5faf152":"markdown","470e3ae5":"markdown","616675a2":"markdown","66f305c8":"markdown","7035c148":"markdown","c15185ec":"markdown","42dda248":"markdown","0ee44d92":"markdown","97552268":"markdown","951a22ce":"markdown"},"source":{"f101bc40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7963b457":"data=pd.read_csv('..\/input\/nyc-jobs.csv')\ndata.head()","d8b0ef34":"label=['min_salary','max_salary']\ndef salary_for_agencies(agency,salary_freq):\n    try:\n        posting_type_data=data[data['Salary Frequency']==salary_freq]\n        agency_data=posting_type_data[posting_type_data['Agency']==agency]\n        min_salary=agency_data['Salary Range From']\n        max_salary=agency_data['Salary Range To']\n        avg_max_salary=sum(max_salary)\/len(max_salary)\n        print(\"Count of \"+salary_freq+\" Job poosition in the agency:\",len(max_salary))\n        avg_min_salary=sum(min_salary)\/len(min_salary)\n        print(\"Minimum Avg salary for agency:\",avg_min_salary)\n        print(\"Maximum Avg salary for agency:\",avg_max_salary)\n        plt.bar(label,[avg_min_salary,avg_max_salary])\n        plt.title(\"Average Min Max \"+salary_freq+\" Salary for \"+agency)\n        plt.show()\n    except:\n        print(\"No data\")","8d74e07c":"salary_for_agencies('DEPARTMENT OF BUSINESS SERV.','Annual')","a715f30e":"salary_for_agencies('DEPARTMENT OF BUSINESS SERV.','Hourly')","ce936fef":"salary_for_agencies('NYC HOUSING AUTHORITY','Annual')","3771eedf":"from numpy import loadtxt\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\nfrom matplotlib import pyplot\nfrom sklearn import preprocessing","f4724f52":"data=data.dropna(subset = ['Job Category'])\nprint(data.shape)\ndata.head()","43dfc340":"X_temp = data.iloc[:,[1,2,4,5,7,12]]\ny = data.iloc[:,[10,11]]\n\nX=X_temp.apply(preprocessing.LabelEncoder().fit_transform)\n","aa9609b7":"X.head()","64e64aae":"X['# Of Positions']=data.iloc[:,3]\n\nprint(X.shape)\nX.head()\n","cee304ab":"model = XGBClassifier()\nmodel.fit(X, y.iloc[:,0])\n# plot feature importance\nplot_importance(model)\npyplot.show()","19eae71f":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test=train_test_split(X.iloc[:,[0,2,3,4,6]],y)","131913d7":"from sklearn.linear_model import LinearRegression\n\nlr=LinearRegression()\nlr.fit(X_train,Y_train)\npredict=lr.predict(X_test)","f7832763":"lr.score(X_test,Y_test)","fcb059e1":"from sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42)\n# Train the model on training data\nrf.fit(X_train, Y_train);","b295b43f":"rf.score(X_test,Y_test)","646d1f28":"We have left some features which were not string type, so let's include them. Also , I am not considering columns after **\"Salary Frequency\"** column as some of them contains text data,too much of NaN data. **\"Title Code No\"** is also not relevant so leaving it.\n\nIf you think they are useful then you can include them. ","01cee1b3":"Checking hourly salries for the job postion of same company","65c98384":"Let's load the dataset and see the **attributes**","d5faf152":"**Future Scope**\nUse count vectorizer to list words liks skills required for a particular job. \n\n","470e3ae5":"As you can see **# Of Position** and **Posting type** are also nut much useful, So we are creating train and test set wihout taking these two columns","616675a2":"Checking for one more agency **NYC HOUSING AUTHORITY**","66f305c8":"Label encoding those attributes which contains string datatypes","7035c148":"Let's remove NaN values from column **Job Category**.The question arises why not remove NaN from column **Full-Time\/Part-Time indicator**. Answer : Full-Time\/Part-Time indicator contains NaN values in 245 such rows and we dont know with what value shall we replace it (if it was a int type column then we could have replaced NaN with mean,most_occured value etc but it's a character type here and I dont want to give false data).\n","c15185ec":"Create a bar graph showing average anual and hourly salaries for a given agency","42dda248":"Using Linear Regression first","0ee44d92":"As we can see the accuracy is poor. So we will go for RandomForest.","97552268":"Lets check our function for agency **DEPARTMENT OF BUSINESS SERV.**","951a22ce":"Import the following libraries for finding out features of interest whick will **affect the result most** "}}