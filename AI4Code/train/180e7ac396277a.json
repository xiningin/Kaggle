{"cell_type":{"c67ff201":"code","5a5990e3":"code","8cdaf50f":"code","97bf86de":"code","701ddcf2":"code","be7d0072":"code","a7cfb915":"code","c8f9060f":"code","6e6e210b":"code","365ebbaa":"code","335fd319":"code","f4092087":"code","e386181e":"code","0b8e89a0":"code","8b1dbb8a":"code","18ddee61":"code","b1ad614e":"code","32520254":"code","17970089":"code","e56e66c1":"code","93a2fc4f":"code","b386c0d7":"code","43ffcdac":"code","b87edd94":"markdown","af6f773e":"markdown","52c247fb":"markdown","07d52696":"markdown","46eacde2":"markdown","ecaf61cf":"markdown","2b9bf7d6":"markdown","f0ab90db":"markdown","142e1584":"markdown","5b4d8687":"markdown"},"source":{"c67ff201":"from __future__ import unicode_literals, print_function, division\nfrom io import open\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n\nimport glob\nimport os\n\nimport unicodedata\nimport string\nimport random\nimport time\nimport math\n\nimport torch\nimport torch.nn as nn\n\nimport warnings\nwarnings.filterwarnings('ignore')","5a5990e3":"class Dataset():\n    def __init__(self, path):\n        self.path = path\n        self.path_txt = self.path + '*.txt'\n        \n        self.all_letters = string.ascii_letters + \" .,;'\"\n        self.n_letters = len(self.all_letters)\n        \n        self.all_categories, self.category_lines = self.get_categories()\n        \n        \n    def findFiles(self, path): return glob.glob(path)\n\n    def unicodeToAscii(self, s):\n        return ''.join(\n            c for c in unicodedata.normalize('NFD', s)\n            if unicodedata.category(c) != 'Mn'\n            and c in self.all_letters\n        )\n    \n    def readLines(self, filename):\n        lines = open(filename, encoding='utf-8').read().strip().split('\\n')\n        return [self.unicodeToAscii(line) for line in lines]\n    \n    def get_categories(self):\n        all_categories = []\n        category_lines = {}\n        \n        for filename in self.findFiles(path + '*.txt'):\n            category = os.path.splitext(os.path.basename(filename))[0]\n            all_categories.append(category)\n            lines = self.readLines(filename)\n            category_lines[category] = lines\n            \n        return all_categories, category_lines","8cdaf50f":"path = '\/kaggle\/input\/multilingual-names\/'\nds = Dataset(path)","97bf86de":"print(ds.findFiles(ds.path_txt))","701ddcf2":"print(ds.unicodeToAscii('Fran\u00e7ais'))","be7d0072":"n_categories = len(ds.all_categories)\nprint(\"Number of categories: \", n_categories)\nprint(ds.category_lines['Spanish'][:5])","a7cfb915":"class DatasetExtra(Dataset):\n    def __init__(self, path):\n        super().__init__(path)\n    \n    # Find letter index from all_letters, e.g. \"a\" = 0\n    def letterToIndex(self, letter):\n        return self.all_letters.find(letter)\n\n    # Just for demonstration, turn a letter into a <1 x n_letters> Tensor\n    def letterToTensor(self, letter):\n        tensor = torch.zeros(1, self.n_letters)\n        tensor[0][self.letterToIndex(letter)] = 1\n        return tensor\n\n    # Turn a line into a <line_length x 1 x n_letters>,\n    # or an array of one-hot letter vectors\n    def lineToTensor(self, line):\n        tensor = torch.zeros(len(line), 1, self.n_letters)\n        for li, letter in enumerate(line):\n            tensor[li][0][self.letterToIndex(letter)] = 1\n        return tensor","c8f9060f":"ds = DatasetExtra(path)","6e6e210b":"print(\"Letter to tensor: \", ds.letterToTensor('J'))\nprint(\"Line to tensor: \", ds.lineToTensor('Jones').size())","365ebbaa":"class RNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(RNN, self).__init__()\n\n        self.hidden_size = hidden_size\n\n        self.i2h = nn.Linear(input_size + hidden_size, hidden_size)\n        self.i2o = nn.Linear(input_size + hidden_size, output_size)\n        self.softmax = nn.LogSoftmax(dim=1)\n\n    def forward(self, input, hidden):\n        combined = torch.cat((input, hidden), 1)\n        hidden = self.i2h(combined)\n        output = self.i2o(combined)\n        output = self.softmax(output)\n        return output, hidden\n\n    def initHidden(self):\n        return torch.zeros(1, self.hidden_size)\n\nn_hidden = 128\nrnn = RNN(ds.n_letters, n_hidden, n_categories)","335fd319":"input = ds.lineToTensor('Albert')\nhidden = torch.zeros(1, n_hidden)\n\noutput, next_hidden = rnn(input[0], hidden)\nprint(output)","f4092087":"class Utilities():\n    def __init__(self, ds):\n        self.ds = ds\n    \n    def categoryFromOutput(self, output):\n        top_n, top_i = output.topk(1)\n        category_i = top_i[0].item()\n        return self.ds.all_categories[category_i], category_i\n\n    def randomChoice(self, l):\n        return l[random.randint(0, len(l) - 1)]\n\n    def randomTrainingExample(self):\n        category = self.randomChoice(self.ds.all_categories)\n        line = self.randomChoice(self.ds.category_lines[category])\n        category_tensor = torch.tensor([self.ds.all_categories.index(category)], \n                                        dtype=torch.long)\n        line_tensor = self.ds.lineToTensor(line)\n        return category, line, category_tensor, line_tensor\n\n    def timeSince(self, since):\n        now = time.time()\n        s = now - since\n        m = math.floor(s \/ 60)\n        s -= m * 60\n        return '%dm %ds' % (m, s)","e386181e":"util = Utilities(ds)","0b8e89a0":"for i in range(10):\n    category, line, category_tensor, line_tensor = util.randomTrainingExample()\n    print('category =', category, '\/ line =', line)","8b1dbb8a":"def train(category_tensor, line_tensor, learning_rate=0.005):\n    hidden = rnn.initHidden()\n\n    rnn.zero_grad()\n\n    for i in range(line_tensor.size()[0]):\n        output, hidden = rnn(line_tensor[i], hidden)\n\n    loss = criterion(output, category_tensor)\n    loss.backward()\n\n    for p in rnn.parameters():\n        p.data.add_(p.grad.data, alpha=-learning_rate)\n\n    return output, loss.item()","18ddee61":"n_iters = 100000\nprint_every = 5000\nplot_every = 1000\n\ncurrent_loss = 0\nall_losses = []\n\n# loss function\ncriterion = nn.NLLLoss()","b1ad614e":"start = time.time()\nfor iter in range(1, n_iters + 1):\n    category, line, category_tensor, line_tensor = util.randomTrainingExample()\n    output, loss = train(category_tensor, line_tensor)\n    current_loss += loss\n\n    # Print iter number, loss, name and guess\n    if iter % print_every == 0:\n        guess, guess_i = util.categoryFromOutput(output)\n        correct = '\u2713' if guess == category else '\u2717 (%s)' % category\n        print('%d %d%% (%s) %.4f %s \/ %s %s' % (iter, iter \/ n_iters * 100, util.timeSince(start), loss, line, guess, correct))\n\n    # Add current loss avg to list of losses\n    if iter % plot_every == 0:\n        all_losses.append(current_loss \/ plot_every)\n        current_loss = 0","32520254":"plt.title(\"Losses per epoch\")\nplt.plot(all_losses)","17970089":"def evaluate(line_tensor):\n    hidden = rnn.initHidden()\n\n    for i in range(line_tensor.size()[0]):\n        output, hidden = rnn(line_tensor[i], hidden)\n\n    return output","e56e66c1":"def get_confusion_matrix(ds, util):\n    confusion = torch.zeros(n_categories, n_categories)\n    n_confusion = 10000\n\n    for i in range(n_confusion):\n        category, line, category_tensor, line_tensor = util.randomTrainingExample()\n        output = evaluate(line_tensor)\n        guess, guess_i = util.categoryFromOutput(output)\n        category_i = ds.all_categories.index(category)\n        confusion[category_i][guess_i] += 1\n        \n    return confusion","93a2fc4f":"confusion = get_confusion_matrix(ds, util)\n\n# Normalize by dividing every row by its sum\nfor i in range(n_categories):\n    confusion[i] = confusion[i] \/ confusion[i].sum()\n\n# Set up plot\nfig = plt.figure(figsize=(20, 8))\nax = fig.add_subplot(111)\ncax = ax.matshow(confusion.numpy())\nfig.colorbar(cax)\n\n# Set up axes\nax.set_xticklabels([''] + ds.all_categories, rotation=90)\nax.set_yticklabels([''] + ds.all_categories)\n\n# Force label at every tick\nax.xaxis.set_major_locator(ticker.MultipleLocator(1))\nax.yaxis.set_major_locator(ticker.MultipleLocator(1))\n\n# sphinx_gallery_thumbnail_number = 2\nplt.show()","b386c0d7":"def predict(input_line, n_predictions=3):\n    print('\\n> %s' % input_line)\n    with torch.no_grad():\n        output = evaluate(ds.lineToTensor(input_line))\n\n        # Get top N categories\n        topv, topi = output.topk(n_predictions, 1, True)\n        predictions = []\n\n        for i in range(n_predictions):\n            value = topv[0][i].item()\n            category_index = topi[0][i].item()\n            print('(%.2f) %s' % (value, ds.all_categories[category_index]))\n            predictions.append([value, ds.all_categories[category_index]])","43ffcdac":"predict('Tai')\npredict('Marry')\npredict('Satoshi')","b87edd94":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Line to Tensor<\/center><\/h3>","af6f773e":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Evaluation<\/center><\/h3>","52c247fb":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Prediction<\/center><\/h3>","07d52696":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Utilities<\/center><\/h3>","46eacde2":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Network<\/center><\/h3>","ecaf61cf":"# RNN","2b9bf7d6":"![architecture.png](attachment:architecture.png)","f0ab90db":"\n<pre style=\"border: 1px dashed;\">\n<div style=\"margin-left: 35%;\">\no________________________________\n  |$o`\"Y888888888 $$ 888888888P\"'o$|\n  |.\"$$o`\"Y888888 $$ 888888P\"'o$$\".|\n  |8bo.\"$$o`\"Y888 $$ 888P\"'o$$\".od8|\n  |8888bo.\"$$o`\"J $$ P\"'o$$\".od8888|\n  |8888888bo.$$oj $$ L$$\".od8888888|\n  |\"\"\"\"\"\"\"\"\"\"\"\"\"\" $$ \"\"\"\"\"\"\"\"\"\"\"\"\"\"|\n  |$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$|\n  |=============; $$ :=============|\n  |888888888P\"'o| $$ |o`\"Y888888888|\n  |888888P\"'o$$\"j $$ l\"$$o`\"Y888888|\n  |888P\"'o$$\".od8 $$ 8bo.\"$$o`\"Y888|\n  |P\"'o$$\".od8888 $$ 8888bo.\"$$o`\"J|\n  |o$$\".od8888888 $$ 8888888bo.$$ojf\n  |\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"'\n  |\n\n          <b>Multilingual Names<\/b>\n      Classifying by nationality\n            - Alin Cijov\n<\/div>\n<\/pre>","142e1584":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Training<\/center><\/h3>","5b4d8687":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style=\"color:black; background:white; border:1px dashed;\" role=\"tab\" aria-controls=\"home\"><center>Dataset<\/center><\/h3>"}}