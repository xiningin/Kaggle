{"cell_type":{"27bb8fbf":"code","c7963ebc":"code","323fcf93":"code","3b0a1d60":"code","9f23ab91":"code","c3dcaf4e":"code","84340713":"code","d3dd588c":"code","320bb089":"code","4db1536f":"code","aa7e48de":"code","2d431b5a":"code","9aeea72a":"code","eddd7926":"code","120add65":"code","b7b7aea5":"code","a66b2b1b":"code","1d55bc5c":"code","19bc7ea2":"code","6bd77328":"code","81f4d840":"code","f09a6ec7":"code","be6f19b4":"markdown","af2235bf":"markdown","06760b43":"markdown","a0832741":"markdown","0bbee164":"markdown","e1591a9f":"markdown","4a5dc513":"markdown"},"source":{"27bb8fbf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7963ebc":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}\n\nfootball = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])\n","323fcf93":"football","3b0a1d60":"edu = pd.read_csv('\/kaggle\/input\/ense32020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])\nedu","9f23ab91":"edu.head()","c3dcaf4e":"edu.tail()","84340713":"edu[10:14]","d3dd588c":"edu.describe()","320bb089":"edu['Value']\n","4db1536f":"edu.iloc[90:94][['TIME','GEO']]","aa7e48de":"edu[edu['Value'] > 6.5].tail()","2d431b5a":"edu.max(axis = 0)","9aeea72a":"s = edu[\"Value\"].apply(np.sqrt) \ns","eddd7926":"s = edu[\"Value\"].apply(lambda d : d**2)\ns","120add65":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)\nedu","b7b7aea5":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean() #mean = moyenne\ngroup","a66b2b1b":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","1d55bc5c":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","19bc7ea2":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","6bd77328":"totalSum = pivedu.sum(axis = 1)\ntotalSum\n","81f4d840":"totalSum.rank(ascending = False, method = 'dense').sort_values().head()","f09a6ec7":"totalSum.rank(ascending = True, method = 'dense').sort_values().head()","be6f19b4":"4. Which measures does the result show? It seems that it shows some default values, can you guess which ones?\nedu.describe() affiche des valeurs statistiques calcul\u00e9es \u00e0 partir des valeurs du tableau edu.\nOn remarque que la fonction compte 384 valeurs de temps diff\u00e9rentes. C'est faux, il n'y en a moins que cela. Par exemple, les lignes d'index 10 et 382 ont la m\u00eame ann\u00e9e \"2010\".","af2235bf":"3. What does the method tail()return?\nNous obtenons les 5 derni\u00e8res lignes.","06760b43":"5. What does this index return? What does the first index represent? And the second one?\nNous obtenons les lignes dont le num\u00e9ro est compris entre 90 et 93. L'index \"Time\" est la date et l'index \"GEO\" est le pays.","a0832741":"7. What do you observe regarding the parameter ascending=False?\nSi nous \u00e9crivons \"ascending = True\", nous obtenons les 5 pays avec les r\u00e9sultats les plus faibles","0bbee164":"6. What does the operation edu[\u2019Value\u2019] > 6.5 produce? An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nedu[\u2019Value\u2019] > 6.5 rajoute un masque avec la valeur True sur les valeurs sup\u00e9rieures \u00e0 6,5 et False sinon. Quand on applique edu[edu[\u2019Value\u2019] > 6.5] nous obtenons un tableau avec seulement les lignes de valeur True. C'est un DataFrame.","e1591a9f":"1. Which is the size of the edu DataFrame (rows x columns)?\n384 rows * 3 columns","4a5dc513":"2. What happens if we give a number as argument to the method head()?\nNous obtenons les n premi\u00e8res lignes o\u00f9 n est l'argument."}}