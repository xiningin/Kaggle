{"cell_type":{"e557585a":"code","d4a99b51":"code","cb3283eb":"code","4ebc51c9":"code","2d2b0dfb":"code","0c40ba02":"code","438424ca":"code","ddd13587":"code","e7766864":"code","477ebf1d":"code","1bedfd47":"code","c68ced9d":"code","12c88eca":"code","3a65c148":"code","8900636e":"code","3dbbf39d":"code","4e2af6f2":"code","adf59db2":"markdown"},"source":{"e557585a":"%matplotlib inline\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot","d4a99b51":"import os\nimport shutil\nprint(os.listdir(\"..\/input\"))","cb3283eb":"import os.path\nimport itertools\nfrom itertools import chain\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\nfrom sklearn import cluster, datasets, mixture\nfrom sklearn.datasets import load_digits\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.metrics import f1_score, classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns\n\nfrom keras.layers import Input, Embedding, LSTM, GRU, Dense, Dropout, Lambda, \\\n    Conv1D, Conv2D, Conv3D, \\\n    Conv2DTranspose, \\\n    AveragePooling1D, AveragePooling2D, \\\n    MaxPooling1D, MaxPooling2D, MaxPooling3D, \\\n    GlobalAveragePooling1D, \\\n    GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalMaxPooling3D, \\\n    LocallyConnected1D, LocallyConnected2D, \\\n    concatenate, Flatten, Average, Activation, \\\n    RepeatVector, Permute, Reshape, Dot, \\\n    multiply, dot, add, \\\n    PReLU, \\\n    Bidirectional, TimeDistributed, \\\n    SpatialDropout1D, \\\n    BatchNormalization\nfrom keras.models import Model, Sequential\nfrom keras import losses\nfrom keras.callbacks import BaseLogger, ProgbarLogger, Callback, History\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras import regularizers\nfrom keras import initializers\nfrom keras.metrics import categorical_accuracy\nfrom keras.constraints import maxnorm, non_neg\nfrom keras.optimizers import RMSprop\nfrom keras.utils import to_categorical, plot_model\nfrom keras import backend as K","4ebc51c9":"from PIL import Image\nfrom zipfile import ZipFile\nimport h5py\nimport cv2\nfrom tqdm import tqdm","2d2b0dfb":"src_dir = '..\/input\/human-protein-atlas-image-classification'","0c40ba02":"train_labels = pd.read_csv(os.path.join(src_dir, \"train.csv\"))\nprint(train_labels.shape)\ntrain_labels.head(10)","438424ca":"test_labels = pd.read_csv(os.path.join(src_dir, \"sample_submission.csv\"))\nprint(test_labels.shape)\ntest_labels.head()","ddd13587":"def show_arr(arr, nrows = 1, ncols = 4, figsize=(15, 5)):\n    fig, subs = plt.subplots(nrows=nrows, ncols=ncols, figsize=figsize)\n    for ii in range(ncols):\n        iplt = subs[ii]\n        img_array = arr[:,:,ii]\n        if ii == 0:\n            cp = 'Greens'\n        elif ii == 1:\n            cp = 'Blues'\n        elif ii == 2:\n            cp = 'Reds'\n        else:\n            cp = 'Oranges'\n        iplt.imshow(img_array, cmap=cp)","e7766864":"def get_arr0(Id, test=False):\n    def fn(Id, color, test=False):\n        if test:\n            tgt = 'test'\n        else:\n            tgt = 'train'\n        with open(os.path.join(src_dir, tgt, Id+'_{}.png'.format(color)), 'rb') as fp:\n            img = Image.open(fp)\n            arr = (np.asarray(img) \/ 255.)\n        return arr\n    res = []\n    for icolor in ['green', 'blue', 'red', 'yellow']:\n        arr0 = fn(Id, icolor, test)\n        res.append(arr0)\n    arr = np.stack(res, axis=-1)\n    return arr","477ebf1d":"arr = get_arr0('00008af0-bad0-11e8-b2b8-ac1f6b6435d0', test=True)\nprint(arr.shape)\nshow_arr(arr)","1bedfd47":"arr = get_arr0('00070df0-bbc3-11e8-b2bc-ac1f6b6435d0')\nprint(arr.shape)\nshow_arr(arr)","c68ced9d":"SH = (139, 139)","12c88eca":"### CACHE\nimg_cache_train = np.zeros((train_labels.shape[0], 139, 139, 4), dtype=np.float16)\nID_LIST_TRAIN = train_labels.Id.tolist()","3a65c148":"for ii, id0 in enumerate(tqdm(ID_LIST_TRAIN)):\n    arr = get_arr0(id0)\n    img_cache_train[ii] = cv2.resize(arr[:], SH)","8900636e":"img_cache_train.shape","3dbbf39d":"np.savez_compressed('img_cache_train_resize_139x139', x=img_cache_train)","4e2af6f2":"ls -la","adf59db2":"### cache train data"}}