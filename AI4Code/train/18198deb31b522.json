{"cell_type":{"cd77c13b":"code","a66bbafd":"code","5aea2bfd":"code","f1a7b5ba":"code","ad9249ed":"code","d1684b6c":"code","ed618c3f":"code","416467c9":"code","b2f0c154":"code","a7b06f4b":"code","00e01942":"code","24b18b4d":"code","4e41ff4c":"code","2fff0e16":"code","bf244dfc":"code","7d7e9056":"code","ba431144":"code","0fd03c7e":"code","924541b6":"code","c3583f8b":"code","35e1c88d":"code","cf5b70ab":"code","da9ca007":"code","c5f9b0f3":"code","6ea35d46":"code","5111c8b4":"code","4ee91428":"code","057d19fc":"code","3576d2a4":"code","ef5c9c5d":"code","5e7dc32f":"code","cbc2cf26":"code","f2425857":"code","6e7780c6":"code","30d5c345":"code","bb446461":"code","29264253":"code","b27588a1":"code","6f504e9c":"code","a5d413c2":"code","e73fb29d":"code","c8a13a49":"code","f2af8bb0":"code","6abddf21":"code","82f6155f":"code","8e61636b":"code","cb4442e1":"code","4775b676":"code","03dd7146":"code","d42f4647":"code","deb441f3":"code","eef39981":"code","13b52e9c":"code","ef4b980e":"code","ea3c2fe5":"code","9e52b798":"code","651c4e5c":"code","ff3852f5":"code","ea3d2106":"code","ac9dc4b0":"code","885ce745":"code","6d2404b5":"code","2830de5b":"code","c7e734ed":"code","55e43341":"code","8c137b76":"code","1c882767":"code","16565bd5":"code","7b284f7f":"code","e38e239d":"code","cc44573c":"code","5249da13":"code","d91dae75":"code","e2cde270":"code","1837a1c9":"markdown","ef73c44c":"markdown","2510fa3c":"markdown","142b9ac0":"markdown","b6448b58":"markdown","973173b6":"markdown","522e99c1":"markdown","f741871f":"markdown","7ec5d9a4":"markdown","6f76dae0":"markdown","a724b1e0":"markdown","30fd2fa0":"markdown","6e3530e0":"markdown","c259d555":"markdown","4594e8a2":"markdown","217f0f4e":"markdown","74671791":"markdown","043792d6":"markdown","4239344f":"markdown","714fb513":"markdown","3c28c900":"markdown","a1f5acee":"markdown","4a494332":"markdown","0a52e7ef":"markdown","d6d77c33":"markdown","6043ff5c":"markdown","4e4eed80":"markdown","aaa775e6":"markdown","945246f7":"markdown","251590d9":"markdown","c59b650c":"markdown","e5b5c392":"markdown","bdb6ed5b":"markdown"},"source":{"cd77c13b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a66bbafd":"import matplotlib.pyplot as plt\nimport seaborn as sns","5aea2bfd":"match_results_df = pd.read_csv('..\/input\/dream11-ipl2020-live\/IPLMatchResults2020.csv')","f1a7b5ba":"match_results_df.loc[22,'TEAMS'] = 'RR vs DC'","ad9249ed":"match_results_df.loc[19,'TEAMS']= 'MI vs RR'","d1684b6c":"match_results_df.head()","ed618c3f":"match_results_df.isna().sum()","416467c9":"plt.figure(figsize=(8,5),)\nmatch_results_df['TOSS'].value_counts().plot(kind='bar')\nplt.show()","b2f0c154":"won = 0\nlost = 0\nfor i in range(60):\n    if match_results_df.iloc[i,-3] == match_results_df.iloc[i,2]:\n        won+=1\n    else:\n        lost+=1","a7b06f4b":"print(f\"Out of 60 macthes, in {won} matches the team that won the toss won the match.\\n\")\nprint(f\"That is in {round((won\/60)*100,2)} % of the matches, team that won the toss won the match.\")","00e01942":"toss_vs_result = pd.DataFrame({'Won_match':[25,35],'Lost_match':[35,25]},index=['Won_toss','Lost_toss'])\ntoss_vs_result","24b18b4d":"from scipy.stats import chi2_contingency","4e41ff4c":"chi2_contingency(toss_vs_result)","2fff0e16":"team_wise_toss_vs_result = pd.crosstab(match_results_df['TOSS'],match_results_df['RESULT (won_by)'])\nteam_wise_toss_vs_result","bf244dfc":"for team in team_wise_toss_vs_result.index:\n    toss_won = team_wise_toss_vs_result.loc[team,:].sum()\n    match_won = team_wise_toss_vs_result.loc[team,team]\n    print(f\"In {round((match_won\/toss_won)*100,2)} % of the matches of {team},{team} won the TOSS and won the MATCH\\n\")","7d7e9056":"chase = 0\ndefend = 0\nfor i in range(60):\n    if match_results_df.iloc[i,-3] == match_results_df.iloc[i,2]:\n        if match_results_df.iloc[i,3] == 'BOWL':\n            chase+=1\n        else:\n            defend+=1\n    else:\n        if match_results_df.iloc[i,3] == 'BOWL':\n            defend+=1\n        else:\n            chase+=1","ba431144":"print(f\"{chase} out of 60 times team chasing won the match and \\n{defend} out of 60 times team defending won the match.\")","0fd03c7e":"for team in match_results_df['RESULT (won_by)'].unique():\n    bowl_first = 0\n    bat_first = 0\n    temp_df = match_results_df[match_results_df['RESULT (won_by)'] == team]\n    for i in range(temp_df.shape[0]):\n        if temp_df.iloc[i,2] == team:\n            if temp_df.iloc[i,3] == 'BOWL':\n                bowl_first+=1\n            else:\n                bat_first+=1\n                \n        else:\n            if temp_df.iloc[i,3] == 'BOWL':\n                bat_first+=1\n            else:\n                bowl_first+=1\n                \n    print(f\"Out of {temp_df.shape[0]} wins by {team}:\")\n    print(f\"{bowl_first} matche(s) were won by bowling first and\\n{bat_first} matche(s) were won by batting first.\\n\\n\")","924541b6":"stadiums = match_results_df['GROUND'].unique()\nprint(f\"{len(stadiums)} used in IPL 2020 were: \")\ni = 0\nfor stadium in stadiums:\n    i+=1\n    print(f\"{i}. {stadium}\")","c3583f8b":"plt.figure(figsize=(8,5))\nplt.title(\"Number of matches played in each stadium\")\nsns.countplot(match_results_df['GROUND'])\nplt.xlabel(\"Stadium\")\nplt.ylabel(\"No. of matches\")\nplt.show()","35e1c88d":"for stadium in stadiums:\n    temp_stadium_df = match_results_df[match_results_df['GROUND'] == stadium]\n    chase = 0\n    defend = 0\n    for i in range(temp_stadium_df.shape[0]):\n        if temp_stadium_df.iloc[i,-3] == temp_stadium_df.iloc[i,2]:\n            if match_results_df.iloc[i,3] == 'BOWL':\n                chase+=1\n            else:\n                defend+=1\n        else:\n            if match_results_df.iloc[i,3] == 'BOWL':\n                defend+=1\n            else:\n                chase+=1\n            \n    print(\"\\nStadium: \",stadium)\n    print(\"---------------------\")\n    print(f\"Total number of matches played in {stadium} stadium: {temp_stadium_df.shape[0]}\")\n    print(f\"Number of wins by chasing a total: {chase}\")\n    print(f\"Number of wins by defending a total: {defend}\")\n    print(f\"Win percentage of chasing a total: {round((chase\/temp_stadium_df.shape[0])*100,2)} %\")\n    print(f\"Win percentage of defending a total: {round((defend\/temp_stadium_df.shape[0])*100,2)} %\")\n    print(\"***********************\")","cf5b70ab":"#Sheikh Zayed Stadium.\n#Total number of matches played in Sheikh Zayed stadium: 22\n#Number of wins by chasing a total: 6\n#Number of wins by defending a total: 16\nSheikh_Zayed = pd.DataFrame({\"Won\":[6,16],\"Lost\":[16,6]},index=['Chasing','Defending'])\nSheikh_Zayed","da9ca007":"chi2_contingency(Sheikh_Zayed)","c5f9b0f3":"#Sharjah Stadium\n#Total number of matches played in Sharjah stadium: 12\n#Number of wins by chasing a total: 8\n#Number of wins by defending a total: 4\nSharjah = pd.DataFrame({\"Won\":[8,4],\"Lost\":[4,8]},index=['Chasing','Defending'])\nSharjah","6ea35d46":"chi2_contingency(Sharjah)","5111c8b4":"for stadium in stadiums:\n    fi_runs = 0\n    fi_wick = 0\n    si_runs = 0\n    si_wick = 0\n    temp_stadium_df = match_results_df[match_results_df['GROUND'] == stadium]\n    fi_runs = temp_stadium_df.loc[:,'First_half_score'].apply(lambda x:int(x.split('\/')[0]))\n    fi_wick = temp_stadium_df.loc[:,'First_half_score'].apply(lambda x:int(x.split('\/')[1]))\n    si_runs = temp_stadium_df.loc[:,'Second_half_score'].apply(lambda x:int(x.split('\/')[0]))\n    si_wick = temp_stadium_df.loc[:,'Second_half_score'].apply(lambda x:int(x.split('\/')[1]))\n    print(\"\\nStadium: \",stadium)\n    print(\"---------------------\")\n    print(f\"Total number of matches played in {stadium} stadium: {temp_stadium_df.shape[0]}\")\n    print(f\"Total Runs scored in {stadium} stadium: {np.sum(fi_runs) + np.sum(si_runs)}\")\n    print(f\"Total Wickets taken in {stadium} stadium: {np.sum(fi_wick)+np.sum(si_wick)}\")\n    print(f\"Average first innings score: {round(np.mean(fi_runs))}\")\n    print(f\"Average wickets taken in first innings: {round(np.mean(fi_wick))}\")\n    print(f\"Average second innings score: {round(np.mean(si_runs))}\")\n    print(f\"Average wickets taken in first second: {round(np.mean(si_wick))}\")\n    print(\"***********************\")\n","4ee91428":"match_detailed = match_results_df.copy()","057d19fc":"match_detailed['First_Inns_Runs'] = match_detailed['First_half_score'].apply(lambda x:int(x.split('\/')[0]))\nmatch_detailed['First_Inns_Wkts'] = match_detailed['First_half_score'].apply(lambda x:int(x.split('\/')[1]))\nmatch_detailed['Second_Inns_Runs'] = match_detailed['Second_half_score'].apply(lambda x:int(x.split('\/')[0]))\nmatch_detailed['Second_Inns_Wkts'] = match_detailed['Second_half_score'].apply(lambda x:int(x.split('\/')[1]))","3576d2a4":"team_batting_first = []\nteam_batting_second = []\nfor i in range(match_detailed.shape[0]):\n    if match_detailed.loc[i,'CHOOSE_TO'] == 'BOWL':\n        team1 = set()\n        team1.add(match_detailed.loc[i,'TOSS'])\n        teams_playing = set(match_detailed.loc[i,'TEAMS'].split(' vs '))\n        team2 = teams_playing - team1\n        team_batting_first.append(list(team2)[0])\n        team_batting_second.append(list(team1)[0])\n    else:\n        team1 = set()\n        team1.add(match_detailed.loc[i,'TOSS'])\n        teams_playing = set(match_detailed.loc[i,'TEAMS'].split(' vs '))\n        team2 = teams_playing - team1\n        team_batting_first.append(list(team1)[0])\n        team_batting_second.append(list(team2)[0])\n        ","ef5c9c5d":"match_detailed['Team_Batting_First'] = team_batting_first\nmatch_detailed['Team_Batting_Second'] = team_batting_second","5e7dc32f":"match_detailed = match_detailed[['Team_Batting_First','Team_Batting_Second','TOSS', 'CHOOSE_TO', 'GROUND','First_Inns_Runs', 'First_Inns_Wkts', 'Second_Inns_Runs',\n       'Second_Inns_Wkts','RESULT (won_by)', 'Super_over', 'MOM']]","cbc2cf26":"match_detailed.head()","f2425857":"match_detailed.groupby('GROUND')[['First_Inns_Runs', 'Second_Inns_Runs']].mean().plot(kind='bar',figsize=(8,7))\nplt.show()","6e7780c6":"match_detailed.groupby('GROUND')[['First_Inns_Wkts','Second_Inns_Wkts']].mean().plot(kind='bar',figsize=(8,7))\nplt.show()","30d5c345":"bat_first_df = match_detailed.groupby('Team_Batting_First').agg({'First_Inns_Runs':[np.mean,np.sum],'First_Inns_Wkts':[np.mean,np.sum]})","bb446461":"bat_first_df.columns = ['Average runs scored','Total runs scored',\n            'Average wicket fall','Total Wicket Fall']","29264253":"temp_df = pd.DataFrame(match_detailed.groupby('Team_Batting_First')['Team_Batting_First'].count())\ntemp_df.columns = ['No. of Matches']","b27588a1":"bat_first_df = pd.concat([temp_df,bat_first_df],axis=1)","6f504e9c":"bat_first_df.sort_values('Average runs scored',ascending=False)","a5d413c2":"colors = ['yellow','deepskyblue','indigo','indianred','blue','red','violet','orangered']","e73fb29d":"plt.figure(figsize=(8,6))\nplt.title(\"Average First Innings Score of each Team\")\nsns.barplot(y=bat_first_df.sort_index()['Average runs scored'],x=bat_first_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","c8a13a49":"bat_second_df = match_detailed.groupby('Team_Batting_Second').agg({'Second_Inns_Runs':[np.mean,np.sum],'Second_Inns_Wkts':[np.mean,np.sum]})","f2af8bb0":"bat_second_df.columns = ['Average runs scored','Total runs scored',\n            'Average wicket fall','Total Wicket Fall']","6abddf21":"temp_df = pd.DataFrame(match_detailed.groupby('Team_Batting_Second')['Team_Batting_Second'].count())\ntemp_df.columns = ['No. of Matches']","82f6155f":"bat_second_df = pd.concat([temp_df,bat_second_df],axis=1)","8e61636b":"bat_second_df.sort_values('Average runs scored',ascending=False)","cb4442e1":"plt.figure(figsize=(8,6))\nplt.title(\"Average Second Innings Score of each Team\")\nsns.barplot(y=bat_second_df.sort_index()['Average runs scored'],x=bat_second_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","4775b676":"field_first_df = match_detailed.groupby('Team_Batting_Second').agg({'First_Inns_Runs':[np.mean,np.sum],'First_Inns_Wkts':[np.mean,np.sum]})","03dd7146":"field_first_df.columns = ['Average runs conceded','Total runs conceded',\n            'Average wickets taken','Total wickets taken']","d42f4647":"temp_df = pd.DataFrame(match_detailed.groupby('Team_Batting_Second')['Team_Batting_Second'].count())\ntemp_df.columns = ['No. of Matches']","deb441f3":"field_first_df = pd.concat([temp_df,field_first_df],axis=1)","eef39981":"field_first_df.index.name='Team Fielding First'","13b52e9c":"field_first_df.sort_values('Average runs conceded')","ef4b980e":"plt.figure(figsize=(8,6))\nplt.title(\"Average Runs Conceded in First Innings\")\nsns.barplot(y=field_first_df.sort_index()['Average runs conceded'],x=field_first_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","ea3c2fe5":"field_second_df = match_detailed.groupby('Team_Batting_First').agg({'Second_Inns_Runs':[np.mean,np.sum],'Second_Inns_Wkts':[np.mean,np.sum]})","9e52b798":"field_second_df.columns = ['Average runs conceded','Total runs conceded',\n            'Average wickets taken','Total wickets taken']","651c4e5c":"temp_df = pd.DataFrame(match_detailed.groupby('Team_Batting_First')['Team_Batting_First'].count())\ntemp_df.columns = ['No. of Matches']","ff3852f5":"field_second_df = pd.concat([temp_df,field_second_df],axis=1)","ea3d2106":"field_second_df.index.name = 'Team Fielding Second'","ac9dc4b0":"field_second_df.sort_values('Average runs conceded')","885ce745":"plt.figure(figsize=(8,6))\nplt.title(\"Average Runs Conceded in Second Innings\")\nsns.barplot(y=field_second_df.sort_index()['Average runs conceded'],x=field_second_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","6d2404b5":"diff_scored_conceded = pd.DataFrame(bat_first_df.sort_index()['Average runs scored'] - field_second_df.sort_index()['Average runs conceded'])","2830de5b":"diff_scored_conceded.index.name = 'Team'\ndiff_scored_conceded.columns = ['Runs_scored - Runs_conceded']\ndiff_scored_conceded.sort_values('Runs_scored - Runs_conceded',ascending=False)","c7e734ed":"plt.figure(figsize=(8,6))\nplt.title(\"Difference between Runs Scored in 1st innings and Runs Conceded in 2nd innings\")\nsns.barplot(y=diff_scored_conceded.sort_index()['Runs_scored - Runs_conceded'],x=diff_scored_conceded.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","55e43341":"diff_conceded_scored = pd.DataFrame(bat_second_df.sort_index()['Average runs scored']-field_first_df.sort_index()['Average runs conceded'])","8c137b76":"diff_conceded_scored.index.name = 'Team'\ndiff_conceded_scored.columns = ['Runs_conceded-Runs_scored']\ndiff_conceded_scored.sort_values('Runs_conceded-Runs_scored',ascending=False)","1c882767":"plt.figure(figsize=(8,6))\nplt.title(\"Difference between Runs Conceded in 1st innings and Runs Scored in 2nd innings\")\nsns.barplot(y=diff_conceded_scored.sort_index()['Runs_conceded-Runs_scored'],x=diff_conceded_scored.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","16565bd5":"tot_runs_scored = bat_first_df.sort_index()['Total runs scored'] + bat_second_df.sort_index()['Total runs scored']\ntot_wkt_fall = bat_first_df.sort_index()['Total Wicket Fall'] + bat_second_df.sort_index()['Total Wicket Fall']\ntot_runs_conceded = field_first_df.sort_index()['Total runs conceded'] + field_second_df.sort_index()['Total runs conceded']\ntot_wkts_taken = field_first_df.sort_index()['Total wickets taken'] + field_second_df.sort_index()['Total wickets taken']","7b284f7f":"team_summary_df = pd.DataFrame({\"Total Runs Scored\":tot_runs_scored,'Total Wicket Fall':tot_wkt_fall,\n             \"Total Runs Conceded\":tot_runs_conceded,\"Total Wickets Taken\":tot_wkts_taken})\nteam_summary_df.index.name= 'Team'","e38e239d":"team_summary_df","cc44573c":"plt.figure(figsize=(8,6))\nplt.title(\"Total Runs Scored By Each Team\")\nsns.barplot(y=team_summary_df.sort_index()['Total Runs Scored'],x=team_summary_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","5249da13":"plt.figure(figsize=(8,6))\nplt.title(\"Total Runs Conceded By Each Team\")\nsns.barplot(y=team_summary_df.sort_index()['Total Runs Conceded'],x=team_summary_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","d91dae75":"plt.figure(figsize=(8,6))\nplt.title(\"Total Wicket Fall Of Each Team\")\nsns.barplot(y=team_summary_df.sort_index()['Total Wicket Fall'],x=team_summary_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","e2cde270":"plt.figure(figsize=(8,6))\nplt.title(\"Total Wickets Taken by By Each Team\")\nsns.barplot(y=team_summary_df.sort_index()['Total Wickets Taken'],x=team_summary_df.sort_index().index,palette=colors)\nplt.xlabel('Team')\nplt.show()","1837a1c9":"###### Difference between runs conceded by a team in the first innings and the runs scored by the team in the second innings","ef73c44c":"### Chase or Defend","2510fa3c":"###### Statistics of each team batting second","142b9ac0":"##### First innings and second innings in each stadium","b6448b58":"### The Toss","973173b6":"Mumbai Indians has the lowest first innings runs conceded.","522e99c1":"Chennai Super Kings has the highest second innings score average.","f741871f":"The pvalue = 0.10, which is greater than 0.05. Hence we accept null hyposthesis. There is no significant relation between winning the toss and winning the match.","7ec5d9a4":"The unluckiest team with the toss is KXIP. KXIP only won 4 out of 14 tosses.","6f76dae0":"In IPL 2020, teams performed better by defending a total in Sheikh Zayed stadium and teams performed better by chasing a total in Sharjah stadium.","a724b1e0":"Sheikh Zayed Stadium.","30fd2fa0":"When SRH was batting first, the team chasing the target scored around 29 runs lesser than the target on an average.","6e3530e0":"Mumbai Indians has the highest first innings average.","c259d555":"### Stadium","4594e8a2":"Sharjah Stadium","217f0f4e":"Null hypothesis: Chasing or defending did NOT have a significant effect on result of the match in Sheikh Zayed Stadium.\n\nAlternate hypothesis: Chasing or defending did have a significant effect on result of the match in Sheikh Zayed Stadium.","74671791":"CSK has the lowest first innings runs conceded.","043792d6":"###### Statistics of each team fielding first","4239344f":"###### Statistics of each team fielding second","714fb513":"#### Checking statisticaly whether batting first or bowling first had a significant effect on the result in each stadium","3c28c900":"            \n    print(\"\\nStadium: \",stadium)\n    print(\"---------------------\")\n    print(f\"Total number of matches played in {stadium} stadium: {temp_stadium_df.shape[0]}\")\n    print(f\"Total Runs scored in {stadium} stadium: {np.sum(fi_runs) + np.sum(si_runs)}\")\n    print(f\"Total Wickets taken in {stadium} stadium: {np.sum(fi_wick)+np.sum(si_wick)}\")\n    print(f\"Average first innings score: {np.mean(fi_runs)}\")\n    print(f\"Average wickets taken in first innings: {np.mean(fi_wick)}\")\n    print(f\"Average second innings score: {np.mean(si_runs)}\")\n    print(f\"Average wickets taken in first second: {np.mean(si_wick)}\")\n    print(\"***********************\")","a1f5acee":"### Teams","4a494332":"The luckiest team with the toss is SRH. SRH won 11 out of 16 toss.","0a52e7ef":"That is, chasing and defending had exactly equal probablity in winning a match in IPL 2020.","d6d77c33":"In Dubai stadium, teams performed equally well by chasing and defending a total.","6043ff5c":"As pvalue = 0.006 is less than 0.05, we reject null hyothesis.\n\nHence, We can say that there is statistical proof that team defending a total have a better chance of winning in Sheikh Zayed Stadium.","4e4eed80":"Null hypothesis: Chasing or defending did NOT have a significant effect on result of the match in Sharjah Stadium.\n\nAlternate hypothesis: Chasing or defending did have a significant effect on result of the match in Sharjah Stadium.","aaa775e6":"### Does winning the toss means winning the match?","945246f7":"###### Statistics of each team batting first","251590d9":"On an average, Mumbai Indians is the only team that has managed to score atleast one run more than the run they conceded in the first innings.","c59b650c":"###### Difference between runs scored by a team in the first innings and the runs conceded by the team in the second innings","e5b5c392":"Null hypothesis: There is NO significant relation between winning the toss and winning the macth.\nAlternate hypothesis: There is significant relation between winning the toss and winning the macth.","bdb6ed5b":"As the pvalue = 0.22 is greater than 0.05, we accept null hypothesis.\n\nHence, we can say that in Sharjah stadium, we do not have any statistical proof to say that chasing a total has a better chance of winning."}}