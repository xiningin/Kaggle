{"cell_type":{"9ddfd4a1":"code","b77d79b1":"code","dd7376d8":"code","bec79a26":"code","f976355e":"code","75415f85":"code","990c9046":"code","857de55f":"code","bab62ede":"code","ca961303":"code","232b7b56":"code","16eb25f8":"code","c8c10f80":"code","30f356ee":"code","87c82b2b":"code","9cd12964":"code","ddbd29ee":"code","f8af21f7":"code","2b9d7606":"code","861c7652":"code","f1890f1d":"code","fbc72082":"code","c111b19b":"code","d9397043":"code","4fc0388d":"code","9485ae81":"code","2f493f46":"code","9799681a":"code","6903dfde":"code","4c3ab132":"code","4d590fcb":"markdown"},"source":{"9ddfd4a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b77d79b1":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")","dd7376d8":"df=pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\n\n","bec79a26":"df","f976355e":"df.describe()","75415f85":"df.type","990c9046":"df.head()","857de55f":"df.info()","bab62ede":"# Data frame of date_added column\ndf[\"date_added\"].value_counts().to_frame()","ca961303":"df.isnull().sum()\n","232b7b56":"df[\"date_added\"] = df[\"date_added\"].fillna(df[\"date_added\"].mode()[0])","16eb25f8":"df.isnull().sum()","c8c10f80":"import re\nfrom datetime import datetime\n\n\n\nmonths = {\n    'January': 1,\n    'February': 2,\n    'March': 3,\n    'April': 4,\n    'May': 5,\n    'June': 6,\n    'July': 7,\n    'August': 8,\n    'September': 9,\n    'October': 10,\n    'November': 11,\n    'December': 12\n}\ndateList = []\n\n# Convert the date_added column from object type to datetime\nfor i in df['date_added'].values:\n    str1 = re.findall('([a-zA-Z]+)\\s[0-9]+\\,\\s[0-9]+', i)\n    str2 = re.findall('[a-zA-Z]+\\s([0-9]+)\\,\\s[0-9]+', i)\n    str3 = re.findall('[a-zA-Z]+\\s[0-9]+\\,\\s([0-9]+)', i)\n    date = '{}-{}-{}'.format(str3[0], months[str1[0]], str2[0])\n    dateList.append(date)\n    \ndf['date_added_cleaned'] = dateList\ndf = df.drop('date_added', axis = 1)\ndf['date_added_cleaned'] = df['date_added_cleaned'].astype('datetime64[ns]')\n","30f356ee":"df.head()","87c82b2b":"df[\"country\"].value_counts().to_frame()","9cd12964":"df.isnull().sum()","ddbd29ee":"for i, j in zip(df['country'].values, df.index):\n    if i == np.nan:\n        if ('Anime' in df.loc[j, 'listed_in']) or ('anime' in df.loc[j, 'listed_in']):\n            df.loc[j, 'country'] = 'Japan'\n        else:\n            continue\n    else:\n        continue\n\n# Replace null values in country column with the word Unknown\ndf['country'] = df['country'].fillna('Unknown')","f8af21f7":"df['country'].isnull().sum()","2b9d7606":"# Data frame of rating column\nrating_order = df[\"rating\"].value_counts().to_frame()\nrating_order","861c7652":"df.isnull().sum()","f1890f1d":"df['rating'] = df['rating'].fillna(df['rating'].mode()[0])\ndf.isnull().sum()\n","fbc72082":"df['director'] = df['director'].fillna('Unknown')","c111b19b":"# Data frame of director column\ndf[\"director\"].value_counts().to_frame()","d9397043":"df['director'] = df['director'].fillna('Unknown')\ndf['director'].isnull().sum()","4fc0388d":"df[\"type\"].value_counts().to_frame()","9485ae81":"plt.figure(figsize = (8,6))\nsns.countplot(x = \"type\", data = df)\nax = plt.gca()\n\n# The maximum scale of y axis\ny_max = df['type'].value_counts().max() \n\nax.set_ylim([0, y_max + 1000])\n\n\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width() \/ 2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize = 12, color = 'black', ha = 'center', va = 'bottom')","2f493f46":"# Plot the pie chart for the distribution of movies and TV shows\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\n\nmovies_count = df[df.type == 'Movie']\ntvshows_count = df[df.type == 'TV Show']\n\ncolors = ['red', 'black']\ntrace = go.Pie(labels = ['Movie', 'TV Show'], \n               values = [movies_count.type.count(), tvshows_count.type.count()],\n               hoverinfo = 'label + percent', textinfo = 'label + percent', marker = dict(colors = colors,\n                line = dict(color = 'blue', width = 2)))\n\nfig = go.Figure(data = [trace])\niplot(fig)","9799681a":"import plotly.express as px\n\nfig =px.pie(x=range(10), y=range(10))\nfig.write_html(\"\"C\\Users\\amznkris\\Downloads\\newplot1.html\"\")","6903dfde":"# Plot the bar chart for the TV rating distribution \nplt.figure(figsize = (12,8))\nsns.countplot(df.rating, order = rating_order.index)\nplt.title(\"Rating for Movies And TV Shows\")\nplt.xlabel(\"Rating\")\nplt.ylabel(\"Total Count\")\n\n# The content for mature adult is the most abundent\nplt.show()","4c3ab132":"# Plot the bar chart for the TV rating distribution of movies and TV shows separately\nplt.figure(figsize = (12,8))\nsns.countplot(x = 'rating', data = df, hue = 'type')\nplt.xlabel('Rating')\nplt.ylabel('Total Count')\nplt.show()","4d590fcb":"**VIZ**"}}