{"cell_type":{"f45f2c3c":"code","81592e36":"code","767fcf74":"code","fa5eb7c3":"code","fac45c1c":"code","3399bc34":"code","eb2369f5":"code","9eb9c71d":"code","3f5fbc60":"code","5077a127":"code","1849e82d":"code","c38c274c":"code","18d252a7":"code","131575a0":"code","7c83fe3a":"code","8dcaddd3":"code","0820b858":"code","7c691f5e":"code","863e75c4":"markdown","f5ce5321":"markdown","838bc829":"markdown","18081e89":"markdown","3e37dc26":"markdown","563306f0":"markdown","1527434b":"markdown","c13f1018":"markdown"},"source":{"f45f2c3c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81592e36":"train = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/song-popularity-prediction\/sample_submission.csv')","767fcf74":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","fa5eb7c3":"train.head()","fac45c1c":"train['song_popularity'].value_counts()","3399bc34":"train.isnull().sum() \/ len(train)","eb2369f5":"ax1 = (train['song_duration_ms']).plot.hist(density=True)\n(train['song_duration_ms']).plot.density(ax=ax1)\nax1.set_xlabel('song_duration_ms _density')","9eb9c71d":"ax2 = (train['acousticness']).plot.hist(density=True)\n(train['acousticness']).plot.density(ax=ax2)\nax2.set_xlabel('acousticness')","3f5fbc60":"ax3 = (train['danceability']).plot.hist(density=True)\n(train['danceability']).plot.density(ax=ax3)\nax3.set_xlabel('danceability')","5077a127":"ax4 = (train['energy']).plot.hist(density=True)\n(train['energy']).plot.density(ax=ax4)\nax4.set_xlabel('energy')","1849e82d":"train.columns","c38c274c":"# we scale the data and transform it\nax5 = (train['instrumentalness']).plot.hist(density=True) \n(train['instrumentalness']).plot.density(ax=ax5)\nax5.set_xlabel('instrumentalness')","18d252a7":"# we scale the data and transform it\nax6 = (train['key']).plot.hist(density=True) \n(train['key']).plot.density(ax=ax6)\nax6.set_xlabel('key')","131575a0":"# we scale the data and transform it\nax7 = (train['liveness']).plot.hist(density=True) \n(train['liveness']).plot.density(ax=ax7)\nax7.set_xlabel('liveness')","7c83fe3a":"# we scale the data and transform it\nax8 = (train['loudness']).plot.hist(density=True) \n(train['loudness']).plot.density(ax=ax8)\nax8.set_xlabel('loudness')","8dcaddd3":"# Categorical data\nsns.countplot(train['audio_mode'])","0820b858":"plt.figure(figsize = (16,5))       # Sample figsize in inches\nsns.heatmap(train.corr(), annot=True)","7c691f5e":"plt.scatter(x=train['energy'], y=train['loudness'])","863e75c4":"This slightly follow a Normal Distribution, it might not required Data Standardization.","f5ce5321":"The Energy Data is a slightly left skewed data","838bc829":"### Correlation","18081e89":"The data set is Imbalance but not too bad ","3e37dc26":"We can check the positive and negative correlation of each features across each other and the target variable.","563306f0":"This data distribution is between 0s and 1s and most of the values are Zero.\nThe data can be converted into Categorical data (0,1), if we can set a decision boundary for it.","1527434b":"### Introductory Python Notebook in Python by Heads or Tails for Music Popularity Challenge\n\nThis notebook introduced those that uses python as their data science tool with what **Heads or Tails** did with R Language.\n\nThis is an introduction for the Live Session.\n\nMost of the comments in the notebook are adopted by what the speaker encouraged, when performing Exploratory Data Analysis and Visualization.\n\nMore to Come in the following days.","c13f1018":"A Funny Skewed Data, More listeners dance but not to the extreme ones."}}