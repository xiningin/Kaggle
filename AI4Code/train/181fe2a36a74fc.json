{"cell_type":{"eaf79a41":"code","7c3d53d3":"code","9a70cfe4":"code","103d038c":"code","5644b65a":"code","54b8bd50":"code","2a02bc6b":"code","3113c6d3":"code","b4af07c5":"code","47bbfbe4":"code","17427ae8":"code","ab1e8e1c":"code","537ce5aa":"code","0a60fd24":"code","d2f1e6d8":"code","716f32d4":"code","e7e4b2c2":"code","c331cf3b":"code","eb110e13":"code","95888d49":"code","9883e022":"code","f70f3f1d":"markdown","c115662b":"markdown","fd621ef6":"markdown","0e182701":"markdown","674e8d8b":"markdown","600001ad":"markdown","95041188":"markdown","e542ba75":"markdown","9f52b83a":"markdown","555031a6":"markdown","777396a0":"markdown"},"source":{"eaf79a41":"import os\nimport random\nimport shutil\n\nfrom multiprocessing.dummy import Pool\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.externals import joblib\n\nfrom skimage.morphology import binary_opening, disk, label\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader, Dataset\n\nimport torchvision.transforms as transforms","7c3d53d3":"%matplotlib inline","9a70cfe4":"train_dpath = '..\/input\/train\/'\ntest_dpath = '..\/input\/test\/'\n\nanno_fpath = '..\/input\/train_ship_segmentations.csv'\nbst_model_fpath = 'model\/bst_unet.model'\n\nsample_submission_fpath = '..\/input\/sample_submission.csv'\nsubmission_fpath = 'submission.csv'\n\nexcluded_filenames = ['6384c3e78.jpg', ]\noriginal_img_size = (768, 768)","103d038c":"annos = pd.read_csv(anno_fpath)\nannos = annos[~annos['ImageId'].isin(excluded_filenames)]","5644b65a":"annos['EncodedPixels_flag'] = annos['EncodedPixels'].map(lambda v: 1 if isinstance(v, str) else 0)\nimgs = annos.groupby('ImageId').agg({'EncodedPixels_flag': 'sum'}).reset_index().rename(columns={'EncodedPixels_flag': 'ships'})\n\nimgs_w_ships = imgs[imgs['ships'] > 0]\nimgs_wo_ships = imgs[imgs['ships'] == 0].sample(20000, random_state=69278)\n\nselected_imgs = pd.concat((imgs_w_ships, imgs_wo_ships))\nselected_imgs['has_ship'] = selected_imgs['ships'] > 0","54b8bd50":"train_imgs, val_imgs = train_test_split(selected_imgs, test_size=0.15, stratify=selected_imgs['has_ship'], random_state=69278)\n\ntrain_fnames = train_imgs['ImageId'].values\nval_fnames = val_imgs['ImageId'].values","2a02bc6b":"_, train_fnames = train_test_split(train_fnames, test_size=0.1, random_state=69278)\n_, val_fnames = train_test_split(val_fnames, test_size=0.1, random_state=69278)","3113c6d3":"class ImgDataset(Dataset):\n\n    def __init__(self,\n                 img_dpath,\n                 img_fnames,\n                 img_transform,\n                 mask_encodings=None,\n                 mask_size=None,\n                 mask_transform=None):\n        self.img_dpath = img_dpath\n        self.img_fnames = img_fnames\n        self.img_transform = img_transform\n\n        self.mask_encodings = mask_encodings\n        self.mask_size = mask_size\n        self.mask_transform = mask_transform\n\n    def __getitem__(self, i):\n        # https:\/\/github.com\/pytorch\/vision\/issues\/9#issuecomment-304224800\n        seed = np.random.randint(2147483647)\n\n        fname = self.img_fnames[i]\n        fpath = os.path.join(self.img_dpath, fname)\n        img = Image.open(fpath)\n        if self.img_transform is not None:\n            random.seed(seed)\n            img = self.img_transform(img)\n\n        if self.mask_encodings is None:\n            return img, fname\n\n        if self.mask_size is None or self.mask_transform is None:\n            raise ValueError('If mask_dpath is not None, mask_size and mask_transform must not be None.')\n\n        mask = np.zeros(self.mask_size, dtype=np.uint8)\n        if self.mask_encodings[fname][0] == self.mask_encodings[fname][0]: # NaN doesn't equal to itself\n            for encoding in self.mask_encodings[fname]:\n                mask += rle_decode(encoding, self.mask_size)\n        mask = np.clip(mask, 0, 1)\n\n        mask = Image.fromarray(mask)\n\n        random.seed(seed)\n        mask = self.mask_transform(mask)\n\n        return img, torch.from_numpy(np.array(mask, dtype=np.int64))\n\n    def __len__(self):\n        return len(self.img_fnames)","b4af07c5":"# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_decode(mask_rle, shape=(768, 768)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return\n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    ends = starts + lengths\n    im = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        im[lo:hi] = 1\n    return im.reshape(shape).T\n\ndef rle_encode(im):\n    '''\n    im: numpy array, 1 - mask, 0 - background\n    Returns run length as string formated\n    '''\n    pixels = im.T.flatten()\n    pixels = np.concatenate([[0], pixels, [0]])\n    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1\n    runs[1::2] -= runs[::2]\n    runs[::2] -= 1\n    return ' '.join(str(x) for x in runs)","47bbfbe4":"def get_mask_encodings(annos, fnames):\n    a = annos[annos['ImageId'].isin(fnames)]\n    return a.groupby('ImageId')['EncodedPixels'].apply(lambda x: x.tolist()).to_dict()","17427ae8":"def conv1x1(in_channels, out_channels, groups=1):\n    return nn.Conv2d(in_channels,\n                     out_channels,\n                     kernel_size=1,\n                     groups=groups,\n                     stride=1)\n\ndef conv3x3(in_channels, out_channels, stride=1, padding=1, bias=True, groups=1):\n    return nn.Conv2d(in_channels,\n                     out_channels,\n                     kernel_size=3,\n                     stride=stride,\n                     padding=padding,\n                     bias=bias,\n                     groups=groups)\n\ndef upconv2x2(in_channels, out_channels, mode='transpose'):\n    if mode == 'transpose':\n        return nn.ConvTranspose2d(in_channels,\n                                  out_channels,\n                                  kernel_size=2,\n                                  stride=2)\n    else:\n        return nn.Sequential(\n            nn.Upsample(mode='bilinear', scale_factor=2),\n            conv1x1(in_channels, out_channels))","ab1e8e1c":"class DownConv(nn.Module):\n    \"\"\"\n    A helper Module that performs 2 convolutions and 1 MaxPool.\n    A ReLU activation follows each convolution.\n    \"\"\"\n    def __init__(self, in_channels, out_channels, pooling=True):\n        super(DownConv, self).__init__()\n\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.pooling = pooling\n\n        self.conv1 = conv3x3(self.in_channels, self.out_channels)\n        self.conv2 = conv3x3(self.out_channels, self.out_channels)\n\n        if self.pooling:\n            self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        before_pool = x\n        if self.pooling:\n            x = self.pool(x)\n        return x, before_pool\n\nclass UpConv(nn.Module):\n    \"\"\"\n    A helper Module that performs 2 convolutions and 1 UpConvolution.\n    A ReLU activation follows each convolution.\n    \"\"\"\n    def __init__(self,\n                 in_channels,\n                 out_channels,\n                 merge_mode='concat',\n                 up_mode='transpose'):\n        super(UpConv, self).__init__()\n\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.merge_mode = merge_mode\n        self.up_mode = up_mode\n\n        self.upconv = upconv2x2(self.in_channels,\n                                self.out_channels,\n                                mode=self.up_mode)\n\n        if self.merge_mode == 'concat':\n            self.conv1 = conv3x3(2*self.out_channels,\n                                 self.out_channels)\n        else:\n            # num of input channels to conv2 is same\n            self.conv1 = conv3x3(self.out_channels, self.out_channels)\n\n        self.conv2 = conv3x3(self.out_channels, self.out_channels)\n\n    def forward(self, from_down, from_up):\n        \"\"\" Forward pass\n        Arguments:\n            from_down: tensor from the encoder pathway\n            from_up: upconv'd tensor from the decoder pathway\n        \"\"\"\n        from_up = self.upconv(from_up)\n        if self.merge_mode == 'concat':\n            x = torch.cat((from_up, from_down), 1)\n        else:\n            x = from_up + from_down\n        x = F.relu(self.conv1(x))\n        x = F.relu(self.conv2(x))\n        return x","537ce5aa":"class UNet(nn.Module):\n    \"\"\" `UNet` class is based on https:\/\/arxiv.org\/abs\/1505.04597\n    The U-Net is a convolutional encoder-decoder neural network.\n    Contextual spatial information (from the decoding,\n    expansive pathway) about an input tensor is merged with\n    information representing the localization of details\n    (from the encoding, compressive pathway).\n    Modifications to the original paper:\n    (1) padding is used in 3x3 convolutions to prevent loss\n        of border pixels\n    (2) merging outputs does not require cropping due to (1)\n    (3) residual connections can be used by specifying\n        UNet(merge_mode='add')\n    (4) if non-parametric upsampling is used in the decoder\n        pathway (specified by upmode='upsample'), then an\n        additional 1x1 2d convolution occurs after upsampling\n        to reduce channel dimensionality by a factor of 2.\n        This channel halving happens with the convolution in\n        the tranpose convolution (specified by upmode='transpose')\n    \"\"\"\n\n    def __init__(self, num_classes, in_channels=3, depth=5,\n                 start_filts=64, up_mode='transpose',\n                 merge_mode='concat'):\n        \"\"\"\n        Arguments:\n            in_channels: int, number of channels in the input tensor.\n                Default is 3 for RGB images.\n            depth: int, number of MaxPools in the U-Net.\n            start_filts: int, number of convolutional filters for the\n                first conv.\n            up_mode: string, type of upconvolution. Choices: 'transpose'\n                for transpose convolution or 'upsample' for nearest neighbour\n                upsampling.\n        \"\"\"\n        super(UNet, self).__init__()\n\n        if up_mode in ('transpose', 'upsample'):\n            self.up_mode = up_mode\n        else:\n            raise ValueError(\"\\\"{}\\\" is not a valid mode for \"\n                             \"upsampling. Only \\\"transpose\\\" and \"\n                             \"\\\"upsample\\\" are allowed.\".format(up_mode))\n\n        if merge_mode in ('concat', 'add'):\n            self.merge_mode = merge_mode\n        else:\n            raise ValueError(\"\\\"{}\\\" is not a valid mode for\"\n                             \"merging up and down paths. \"\n                             \"Only \\\"concat\\\" and \"\n                             \"\\\"add\\\" are allowed.\".format(up_mode))\n\n        # NOTE: up_mode 'upsample' is incompatible with merge_mode 'add'\n        if self.up_mode == 'upsample' and self.merge_mode == 'add':\n            raise ValueError(\"up_mode \\\"upsample\\\" is incompatible \"\n                             \"with merge_mode \\\"add\\\" at the moment \"\n                             \"because it doesn't make sense to use \"\n                             \"nearest neighbour to reduce \"\n                             \"depth channels (by half).\")\n\n        self.num_classes = num_classes\n        self.in_channels = in_channels\n        self.start_filts = start_filts\n        self.depth = depth\n\n        self.down_convs = []\n        self.up_convs = []\n\n        # create the encoder pathway and add to a list\n        for i in range(depth):\n            ins = self.in_channels if i == 0 else outs\n            outs = self.start_filts*(2**i)\n            pooling = True if i < depth-1 else False\n\n            down_conv = DownConv(ins, outs, pooling=pooling)\n            self.down_convs.append(down_conv)\n\n        # create the decoder pathway and add to a list\n        # - careful! decoding only requires depth-1 blocks\n        for i in range(depth-1):\n            ins = outs\n            outs = ins \/\/ 2\n            up_conv = UpConv(ins, outs, up_mode=up_mode,\n                merge_mode=merge_mode)\n            self.up_convs.append(up_conv)\n\n        self.conv_final = conv1x1(outs, self.num_classes)\n\n        # add the list of modules to current module\n        self.down_convs = nn.ModuleList(self.down_convs)\n        self.up_convs = nn.ModuleList(self.up_convs)\n\n        self.reset_params()\n\n    @staticmethod\n    def weight_init(m):\n        if isinstance(m, nn.Conv2d):\n            nn.init.xavier_normal(m.weight)\n            nn.init.constant(m.bias, 0)\n\n\n    def reset_params(self):\n        for i, m in enumerate(self.modules()):\n            self.weight_init(m)\n\n    def forward(self, x):\n        encoder_outs = []\n\n        # encoder pathway, save outputs for merging\n        for i, module in enumerate(self.down_convs):\n            x, before_pool = module(x)\n            encoder_outs.append(before_pool)\n\n        for i, module in enumerate(self.up_convs):\n            before_pool = encoder_outs[-(i+2)]\n            x = module(before_pool, x)\n\n        # No softmax is used. This means you need to use\n        # nn.CrossEntropyLoss is your training script,\n        # as this module includes a softmax already.\n        x = self.conv_final(x)\n        return x","0a60fd24":"class param:\n    img_size = (80, 80)\n    bs = 8\n    num_workers = 4\n    lr = 0.001\n    epochs = 3\n    unet_depth = 5\n    unet_start_filters = 8\n    log_interval = 70 # less then len(train_dl)\n\nchannel_means = (0.20166926, 0.28220195, 0.31729624)\nchannel_stds = (0.20769505, 0.18813899, 0.16692209)","d2f1e6d8":"train_tfms = transforms.Compose([transforms.Resize(param.img_size),\n                                 transforms.RandomRotation(360),\n                                 transforms.ToTensor(),\n                                 transforms.Normalize(channel_means, channel_stds)])\nval_tfms = transforms.Compose([transforms.Resize(param.img_size),\n                               transforms.ToTensor(),\n                               transforms.Normalize(channel_means, channel_stds)])\nmask_tfms = transforms.Compose([transforms.Resize(param.img_size),\n                                transforms.RandomRotation(360)])\n\ntrain_dl = DataLoader(ImgDataset(train_dpath,\n                                 train_fnames,\n                                 train_tfms,\n                                 get_mask_encodings(annos, train_fnames),\n                                 original_img_size,\n                                 mask_tfms),\n                      batch_size=param.bs,\n                      shuffle=True,\n                      pin_memory=torch.cuda.is_available(),\n                      num_workers=param.num_workers)\nval_dl = DataLoader(ImgDataset(train_dpath,\n                               val_fnames,\n                               val_tfms,\n                               get_mask_encodings(annos, val_fnames),\n                               original_img_size,\n                               mask_tfms),\n                    batch_size=param.bs,\n                    shuffle=False,\n                    pin_memory=torch.cuda.is_available(),\n                    num_workers=param.num_workers)\n\nmodel = UNet(2,\n             depth=param.unet_depth,\n             start_filts=param.unet_start_filters,\n             merge_mode='concat').cuda()\noptim = torch.optim.Adam(model.parameters(), lr=param.lr)","716f32d4":"def get_loss(dl, model):\n    loss = 0\n    for X, y in dl:\n        X, y = Variable(X).cuda(), Variable(y).cuda()\n        output = model(X)\n        loss += F.cross_entropy(output, y).data[0]\n    loss = loss \/ len(dl)\n    return loss","e7e4b2c2":"iters = []\ntrain_losses = []\nval_losses = []\n\nit = 0\nmin_loss = np.inf\n\nos.makedirs(os.path.dirname(bst_model_fpath), exist_ok=True)\n\nmodel.train()\nfor epoch in range(param.epochs):\n    for i, (X, y) in enumerate(train_dl):\n        X = Variable(X).cuda()  # [N, 1, H, W]\n        y = Variable(y).cuda()  # [N, H, W] with class indices (0, 1)\n        output = model(X)  # [N, 2, H, W]\n        loss = F.cross_entropy(output, y)\n\n        optim.zero_grad()\n        loss.backward()\n        optim.step()\n\n        if (i + 1) % param.log_interval == 0:\n            it += param.log_interval * param.bs\n            iters.append(it)\n            train_losses.append(loss.data[0])\n\n            model.eval()\n            val_loss = get_loss(val_dl, model)\n            model.train()\n            val_losses.append(val_loss)\n\n            if val_loss < min_loss:\n                torch.save(model.state_dict(), bst_model_fpath)\n\nmodel.eval()\nval_loss = get_loss(val_dl, model)\nif val_loss < min_loss:\n    torch.save(model.state_dict(), bst_model_fpath)","c331cf3b":"plt.plot(iters, train_losses)\nplt.plot(iters, val_losses)\nplt.show()","eb110e13":"sample_submission = pd.read_csv(sample_submission_fpath)\ntest_fnames = sample_submission.sample(100, random_state=69278)['ImageId'].values\n\ntest_dl = DataLoader(ImgDataset(test_dpath,\n                                test_fnames,\n                                val_tfms),\n                     batch_size=param.bs,\n                     shuffle=False,\n                     pin_memory=torch.cuda.is_available(),\n                     num_workers=param.num_workers)","95888d49":"submission = {'ImageId': [], 'EncodedPixels': []}\n\nmodel.eval()\nfor X, fnames in test_dl:\n    X = Variable(X).cuda()\n    output = model(X)\n    for i, fname in enumerate(fnames):\n        mask = F.sigmoid(output[i, 0]).data.cpu().numpy()\n        mask = binary_opening(mask > 0.5, disk(2))\n        mask = Image.fromarray(mask.astype(np.uint8)).resize(original_img_size)\n        mask = np.array(mask).astype(np.bool)\n\n        labels = label(mask)\n        encodings = [rle_encode(labels == k) for k in np.unique(labels[labels > 0])]\n        if len(encodings) > 0:\n            for encoding in encodings:\n                submission['ImageId'].append(fname)\n                submission['EncodedPixels'].append(encoding)\n        else:\n            submission['ImageId'].append(fname)\n            submission['EncodedPixels'].append(None)","9883e022":"submission_df = pd.DataFrame(submission, columns=['ImageId', 'EncodedPixels'])\nsubmission_df.to_csv('submission.csv', index=False)\nsubmission_df.sample(10)","f70f3f1d":"#### Prediction","c115662b":"###### Balance","fd621ef6":"#### Submission","0e182701":"#### Train","674e8d8b":"https:\/\/github.com\/jaxony\/unet-pytorch\nhttps:\/\/github.com\/jvanvugt\/pytorch-unet","600001ad":"#### Dataset","95041188":"#### Methods","e542ba75":"###### Sampling","9f52b83a":"###### Train and validate","555031a6":"#### Model","777396a0":"#### Split data"}}