{"cell_type":{"7592f316":"code","05864ef8":"code","4ab63de0":"code","ac8aae8a":"code","5d4c5877":"code","474596bd":"code","24e96eb4":"code","adbcf8e8":"code","a9b42415":"code","ff90e50c":"code","23473727":"code","5fe93a22":"code","11674448":"code","184f14de":"code","8102d6cc":"code","d4de1f9f":"code","229fb728":"code","a7ac1f44":"code","78ef2d5c":"code","053eba8d":"code","9fd162be":"code","6016cce5":"code","351add05":"code","1d18334d":"code","ecb7a30c":"code","0695b4d0":"code","16193251":"code","d8888e40":"code","42797a0b":"code","1d88ff52":"code","06b336e1":"code","a5a6e40a":"code","0f36561d":"code","ebc6abe6":"code","b336fce7":"code","c0056e51":"code","81748305":"code","f54c778e":"code","05183c45":"code","28d1ce25":"code","a7e75871":"code","1bd96d1f":"code","7f5857ff":"code","b9403cd2":"code","0c3abbea":"code","ba508bc8":"code","609f0067":"code","388fc1d8":"code","a2c3e98b":"code","7d03f710":"code","28fcf5f0":"code","3aa18989":"code","c4f38ceb":"code","ef6ab139":"code","6ce2a784":"code","1c9977d7":"code","fe138f49":"code","aa27a83b":"code","585458b4":"code","e5b90e9a":"code","2f2c6314":"code","4643653b":"code","615c6f02":"code","a1826f21":"code","c6870424":"code","33c9670a":"code","4eaffe3f":"code","47f4c423":"code","74d175e4":"code","0868a257":"code","808dee1c":"code","9d2ef10e":"markdown","34f52251":"markdown","302e394c":"markdown","710f521c":"markdown","ed3ef1dd":"markdown","8c0ba253":"markdown","4eb56f6c":"markdown","06208d5f":"markdown","59a59dd1":"markdown","7abf739f":"markdown","38c9c79b":"markdown","8c8e9f31":"markdown","98ffa851":"markdown","aa948633":"markdown"},"source":{"7592f316":"import pandas as pd\nimport numpy as np\nimport glob\nimport os\nimport cv2\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import * \nfrom tensorflow.keras.preprocessing import image\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nimport warnings\nwarnings.filterwarnings('ignore')","05864ef8":"#Train Data\ndf=pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/train.csv\")\ndf.head()","4ab63de0":"#Test Data\ndf_t=pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv\")\ndf_t.head()","ac8aae8a":"df.shape","5d4c5877":"df.isnull().sum()","474596bd":"df.nunique()","24e96eb4":"df.dtypes","adbcf8e8":"#Create a new dataset\nimg_df = pd.DataFrame()\nimg_df[\"Image_Path\"]=\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/trainImages\/\" + df[\"Image_path\"]\nimg_df[\"Condition\"]=df[\"Condition\"]\nimg_df.head(6)","a9b42415":"#Data type change\nimg_df = img_df.astype({'Condition': str})\nimg_df.dtypes","ff90e50c":"fig = plt.figure(figsize=(20, 7))\n\nrows = 2\ncolumns = 3\n\nImage1 = cv2.imread((img_df['Image_Path'][0]))\nImage2 = cv2.imread(img_df['Image_Path'][1])\nImage3 = cv2.imread(img_df['Image_Path'][2])\nImage4 = cv2.imread(img_df['Image_Path'][3])\nImage5 = cv2.imread(img_df['Image_Path'][4])\nImage6 = cv2.imread(img_df['Image_Path'][5])\n\nfig.add_subplot(rows, columns, 1)\n\nplt.imshow(Image1)\nplt.axis('off')\nplt.title(img_df['Condition'][0])\n  \n# Adds a subplot at the 2nd position\nfig.add_subplot(rows, columns, 2)\n  \n# showing image\nplt.imshow(Image2)\nplt.axis('off')\nplt.title(img_df['Condition'][1])\n  \n# Adds a subplot at the 3rd position\nfig.add_subplot(rows, columns, 3)\n  \n# showing image\nplt.imshow(Image3)\nplt.axis('off')\nplt.title(img_df['Condition'][2])\n  \n# Adds a subplot at the 4th position\nfig.add_subplot(rows, columns, 4)\n  \n# showing image\nplt.imshow(Image4)\nplt.axis('off')\nplt.title(img_df['Condition'][3])\n\n# Adds a subplot at the 4th position\nfig.add_subplot(rows, columns, 5)\n  \n# showing image\nplt.imshow(Image5)\nplt.axis('off')\nplt.title(img_df['Condition'][4])\n\n# Adds a subplot at the 4th position\nfig.add_subplot(rows, columns, 6)\n  \n# showing image\nplt.imshow(Image6)\nplt.axis('off')\nplt.title(img_df['Condition'][5])","23473727":"#Split the image dataset into two parts\nfrom sklearn.model_selection import train_test_split\ntrain,  test = train_test_split(img_df, test_size = 0.25, random_state = 32)\nprint(f\"train set shape: {train.shape}\")\nprint(f\"validation set shape: {test.shape}\")","5fe93a22":"#Training model\nmodel = Sequential()   ## creating a blank model\nmodel.add(Conv2D(3,kernel_size=(3,3),activation='relu',input_shape=(224,224,3)))\nmodel.add(Conv2D(3,(3,3),activation='relu'))\nmodel.add(Conv2D(3,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(6,(3,3),activation='relu'))\nmodel.add(Conv2D(6,(3,3),activation='relu'))\nmodel.add(Conv2D(6,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(9,(3,3),activation='relu'))\nmodel.add(Conv2D(9,(3,3),activation='relu'))\nmodel.add(Conv2D(9,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(12,(3,3),activation='relu'))\nmodel.add(Conv2D(12,(3,3),activation='relu'))\nmodel.add(Conv2D(12,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(16,(3,3),activation='relu'))\nmodel.add(Conv2D(16,(3,3),activation='relu'))\nmodel.add(Conv2D(16,(3,3),activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n\nmodel.add(Conv2D(32,(3,3),activation='relu',padding = 'same'))\nmodel.add(MaxPooling2D(pool_size=(2,2), padding = \"same\"))\n\n\nmodel.add(Flatten())    ### input layer\nmodel.add(Dense(128,activation='relu')) \nmodel.add(Dense(100,activation='relu'))    # hidden layer of ann\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1,activation='sigmoid'))   ## output layer\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","11674448":"model.summary()","184f14de":"#Data Augmentation\ntrain_datagen = image.ImageDataGenerator(rescale = 1.\/255,rotation_range=30,width_shift_range=(-20,20), height_shift_range=(-20,20),shear_range = 0.4,zoom_range = (0.1,0.6), horizontal_flip = True,vertical_flip=True,channel_shift_range=0.3,fill_mode='nearest')\n\ntest_dataset = image.ImageDataGenerator(rescale=1.\/255)","8102d6cc":"#Reshaping test and validation images \ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = train,\n    x_col = 'Image_Path', \n    y_col ='Condition',\n    target_size = (224,224),\n    batch_size = 64,\n    class_mode = 'binary',\n    shuffle = True)\nvalidation_generator = test_dataset.flow_from_dataframe(\n    dataframe = test,\n    x_col = 'Image_Path', \n    y_col ='Condition',\n    target_size = (224,224),\n    batch_size = 64,\n    class_mode = 'binary',\n    shuffle = True)","d4de1f9f":"history = model.fit(train_generator,epochs = 15,validation_data = validation_generator)","229fb728":"#Graph\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = 15\nepochs_range = range(epochs)\n\nplt.figure(figsize=(20, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","a7ac1f44":"model.evaluate_generator(validation_generator)","78ef2d5c":"#Test dataset\ntest_datagen = image.ImageDataGenerator(rescale = 1.0\/255.)\ndir = \"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/testImages\" \ntest_generator = test_datagen.flow_from_dataframe(directory = dir, dataframe = df_t, target_size = (224,224),\n                                            x_col = 'Image_path', y_col = None,\n                                             batch_size = 64,class_mode = None)","053eba8d":"#Prediction\npreds = (model.predict(test_generator)>0.5).astype(\"int32\")\npreds","9fd162be":"np.shape(preds)","6016cce5":"df_t['Condition'] = pd.DataFrame(preds)","351add05":"df_t.head()","1d18334d":"df.head()","ecb7a30c":"#Get the null rows\nis_NaN = df.isnull()\nrow_has_NaN = is_NaN.any(axis=1)\nrows_with_NaN = df[row_has_NaN]","0695b4d0":"rows_with_NaN","16193251":"df['Insurance_company'].unique()","d8888e40":"df['Insurance_company'].value_counts()","42797a0b":"sum1 =0\nsum2 =0\nsum3=0\nsum4=0\nsum5=0\nsum6=0\nsum7=0\nsum8=0\nsum9=0\nsum10=0\nsum11=0\nfor i in range(0,len(df)):\n    if (pd.isnull(df['Cost_of_vehicle'][i])== False):\n        if (df['Insurance_company'][i] == \"BQ\"):\n            sum1 = sum1 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"A\"):\n            sum2 = sum2 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"AC\"):\n            sum3 = sum3 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"BC\"):\n             sum4 = sum4 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"DA\"):\n               sum5 = sum5 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"BB\"):\n                 sum6 = sum6 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"C\"):\n                   sum7 = sum7 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"O\"):\n                     sum8 = sum8 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"B\"):\n                       sum9 = sum9 + df['Cost_of_vehicle'][i]\n        elif (df['Insurance_company'][i] == \"AA\"):\n                         sum10 = sum10 + df['Cost_of_vehicle'][i]\n        else:\n                           sum11 = sum11 + df['Cost_of_vehicle'][i]\n    \n\n\n","1d88ff52":"sum11","06b336e1":"for i in range(0,len(df)):\n    if (pd.isnull(df['Cost_of_vehicle'][i]) == True):\n        if (df['Insurance_company'][i] == \"BQ\"):\n            p1 = sum1\/131\n            df['Cost_of_vehicle'][i] = p1\n        elif (df['Insurance_company'][i] == \"A\"):\n            p2 = sum2\/132\n            df['Cost_of_vehicle'][i] = p2\n      \n        elif (df['Insurance_company'][i] == \"AC\"):\n            p3 = sum3\/119\n            df['Cost_of_vehicle'][i] = p3\n      \n        elif (df['Insurance_company'][i] == \"BC\"):\n                p4 = sum4\/121\n                df['Cost_of_vehicle'][i] = p4\n      \n        elif (df['Insurance_company'][i] == \"DA\"):\n            p5 = sum5\/128\n            df['Cost_of_vehicle'][i] = p5\n      \n        elif (df['Insurance_company'][i] == \"BB\"):\n                 p6 = sum6\/124\n                 df['Cost_of_vehicle'][i] = p6\n      \n        elif (df['Insurance_company'][i] == \"C\"):\n                p7 = sum7\/131\n                df['Cost_of_vehicle'][i] = p7\n      \n        elif (df['Insurance_company'][i] == \"O\"):\n            p8 = sum8\/126\n            df['Cost_of_vehicle'][i] = p8\n      \n        elif (df['Insurance_company'][i] == \"B\"):\n            p9 = sum9\/148\n            df['Cost_of_vehicle'][i] = p9\n      \n        elif (df['Insurance_company'][i] == \"AA\"):\n                p10 = sum10\/123\n                df['Cost_of_vehicle'][i] = p10\n      \n        else:\n            p11 = sum11\/116\n            df['Cost_of_vehicle'][i] = p11\n                    ","a5a6e40a":"sum1 =0\nsum2 =0\nsum3=0\nsum4=0\nsum5=0\nsum6=0\nsum7=0\nsum8=0\nsum9=0\nsum10=0\nsum11=0\ns1 =0\ns2 =0\ns3=0\ns4=0\ns5=0\ns6=0\ns7=0\ns8=0\ns9=0\ns10=0\ns11=0\nfor i in range(0,len(df)):\n    if (pd.isnull(df['Min_coverage'][i])== False):\n        if (df['Insurance_company'][i] == \"BQ\"):\n            sum1 = sum1 + df['Min_coverage'][i]\n            s1 = s1 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"A\"):\n            sum2 = sum2 + df['Min_coverage'][i]\n            s2 = s2 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"AC\"):\n                sum3 = sum3 + df['Min_coverage'][i]\n                s3 = s3 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"BC\"):\n                sum4 = sum4 + df['Min_coverage'][i]\n                s4 = s4 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"DA\"):\n                sum5 = sum5 + df['Min_coverage'][i]\n                s5 = s5 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"BB\"):\n                 sum6 = sum6 + df['Min_coverage'][i]\n                 s6 = s6 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"C\"):\n                   sum7 = sum7 + df['Min_coverage'][i]\n                   s7 = s7 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"O\"):\n                     sum8 = sum8 + df['Min_coverage'][i]\n                     s8 = s8 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"B\"):\n                       sum9 = sum9 + df['Min_coverage'][i]\n                       s9 = s9 + df['Max_coverage'][i]\n        elif (df['Insurance_company'][i] == \"AA\"):\n                         sum10 = sum10 + df['Min_coverage'][i]\n                         s10 = s10 + df['Max_coverage'][i]\n        else:\n                           sum11 = sum11 + df['Min_coverage'][i]\n                           s11 = s11 + df['Max_coverage'][i]\n    \n\n\n","0f36561d":"s1","ebc6abe6":"sum1","b336fce7":"for i in range(0,len(df)):\n    if (pd.isnull(df['Min_coverage'][i]) == True):\n        if (df['Insurance_company'][i] == \"BQ\"):\n            p1 = sum1\/131\n            m1 = s1\/131\n            df['Min_coverage'][i] = p1\n            df['Max_coverage'][i] = m1\n        elif (df['Insurance_company'][i] == \"A\"):\n            p2 = sum2\/132\n            m2 = s2\/132\n            df['Min_coverage'][i] = p2\n            df['Max_coverage'][i] = m2\n      \n        elif (df['Insurance_company'][i] == \"AC\"):\n            p3 = sum3\/119\n            m3 = s3\/119\n            df['Min_coverage'][i] = p3\n            df['Max_coverage'][i] = m3\n      \n        elif (df['Insurance_company'][i] == \"BC\"):\n            p4 = sum4\/121\n            m4 = s4\/121\n            df['Min_coverage'][i] = p4\n            df['Max_coverage'][i] = m4\n      \n        elif (df['Insurance_company'][i] == \"DA\"):\n            p5 = sum5\/128\n            m5 = s5\/128\n            df['Min_coverage'][i] = p5\n            df['Max_coverage'][i] = m5\n      \n        elif (df['Insurance_company'][i] == \"BB\"):\n            p6 = sum6\/124\n            m6 = s6\/124\n            df['Min_coverage'][i] = p6\n            df['Max_coverage'][i] = m6\n      \n        elif (df['Insurance_company'][i] == \"C\"):\n            p7 = sum7\/131\n            m7 = s7\/131\n            df['Min_coverage'][i] = p7\n            df['Max_coverage'][i] = m7\n      \n        elif (df['Insurance_company'][i] == \"O\"):\n            p8 = sum8\/126\n            m8 = s8\/126\n            df['Min_coverage'][i] = p8\n            df['Max_coverage'][i] = m8\n      \n        elif (df['Insurance_company'][i] == \"B\"):\n            p9 = sum9\/148\n            m9 = s9\/148\n            df['Min_coverage'][i] = p9\n            df['Max_coverage'][i] = m9\n      \n        elif (df['Insurance_company'][i] == \"AA\"):\n            p10 = sum10\/123\n            m10 = s10\/123\n            df['Min_coverage'][i] = p10\n            df['Max_coverage'][i] = m10\n      \n        else:\n            p11 = sum11\/116\n            m11 = s11\/116\n            df['Min_coverage'][i] = p11\n            df['Max_coverage'][i] = m11\n                    ","c0056e51":"df['Amount'].fillna(value = (df['Amount'].mean()),inplace = True)","81748305":"btype = df[\"Expiry_date\"].str.split(\"-\",expand = True)\ndf[\"Year\"]=btype[0]\ndf[\"Month\"]=btype[1]\ndf[\"Day\"]=btype[2]","f54c778e":"df=df.drop(columns=['Expiry_date'])\ndf.head()","05183c45":"g=sb.distplot(np.log1p(df['Amount']),color=\"Purple\")","28d1ce25":"plt.figure(figsize=(20,10 ))\nsb.boxplot(x=\"Insurance_company\", y=\"Min_coverage\", data=df)\nplt.show()","a7e75871":"plt.figure(figsize=(20,10 ))\nsb.boxplot(x=\"Insurance_company\", y=\"Max_coverage\", data=df)\nplt.show()","1bd96d1f":"plt.figure(figsize=(20,10 ))\nsb.boxplot(x=\"Insurance_company\", y=\"Cost_of_vehicle\", data=df)\nplt.show()","7f5857ff":"plt.figure(figsize=(10,10 ))\nsb.jointplot(x='Max_coverage',y='Min_coverage',data=df,color = 'red')\nplt.show()","b9403cd2":"plt.figure(figsize=(40,40 ))\nsb.pairplot(df,hue='Insurance_company',diag_kind=\"kde\",kind=\"scatter\",palette=\"husl\")\nplt.show()","0c3abbea":"#Remove outliers\ndf.loc[df['Max_coverage']>20000,'Max_coverage'] = np.mean(df['Max_coverage'])","ba508bc8":"df = df.astype({'Year':'int64','Month':'int64','Day':'int64'})","609f0067":"df.drop('Image_path', axis=1, inplace=True)","388fc1d8":"df_t.head()","a2c3e98b":"df_t.isnull().sum()","7d03f710":"ctype = df_t[\"Expiry_date\"].str.split(\"-\",expand = True)\ndf_t[\"Year\"]=ctype[0]\ndf_t[\"Month\"]=ctype[1]\ndf_t[\"Day\"]=ctype[2]","28fcf5f0":"df_t = df_t.astype({'Year':'int64','Month':'int64','Day':'int64'})","3aa18989":"sol = df_t['Image_path']\ndf_t.drop('Image_path', axis=1, inplace=True)","c4f38ceb":"df_t=df_t.drop(columns=['Expiry_date'])\ndf_t.head()","ef6ab139":"l= LabelEncoder()   \ndf['Insurance_company'] = l.fit_transform(df['Insurance_company'])\ndf_t['Insurance_company'] = l.fit_transform(df_t['Insurance_company'])","6ce2a784":"Y_train = df['Amount']\nX_train = df.drop('Amount',1)\nX_test = df_t","1c9977d7":"X_train.info()","fe138f49":"Y_train.head()","aa27a83b":"Y_train.isnull().sum()","585458b4":"X_train.shape","e5b90e9a":"Y_train.shape","2f2c6314":"#split the dataset\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_valid, y_train, y_valid = train_test_split(X_train, Y_train, test_size = 0.1, random_state = 123)","4643653b":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_valid.shape)\nprint(y_valid.shape)","615c6f02":"#xgboost \nimport xgboost as xgb\n\nparam = {\"booster\":\"gblinear\", \"objective\":\"reg:squarederror\",\"eval_metric\":\"rmse\"}\n\nd_train = xgb.DMatrix(x_train, label=y_train)\nd_valid = xgb.DMatrix(x_valid, label=y_valid)\n\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\n\nbst = xgb.train(params=param, dtrain = d_train, num_boost_round = 10)","a1826f21":"d_test = xgb.DMatrix(X_test)\np_test = bst.predict(d_test)","c6870424":"X_train.head()","33c9670a":"solution = pd.DataFrame(p_test, columns = ['Amount'])","4eaffe3f":"solution.head(10)","47f4c423":"sol = pd.read_csv('..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv')\nsolution['Image_path'] = sol['Image_path']\nsolution['Condition'] = df_t['Condition']","74d175e4":"solution.head()","0868a257":"#rearrange the columns \ncolumn_names = [\"Image_path\", \"Condition\", \"Amount\"]\n\nsolution = solution.reindex(columns=column_names)\nsolution.head()","808dee1c":"#Download the .csv file in Google colab\nfrom google.colab import files\nfiles.download('solution.csv')","9d2ef10e":"# <center><span style=\"color:crimson;\">Please upvote it, if you find it useful.<\/span><\/center>","34f52251":"# Model","302e394c":"*Different insurance company will have different values of minimum and maximum coverage.*\n**Fill the missing values**.","710f521c":"# Predict the insurance amount of cars","ed3ef1dd":"# Load Packages","8c0ba253":"**Test Dataset Analysis**","4eb56f6c":"# **Task**\n\n* Condition: Predict if the vehicle provided in the image is damaged or not\n* Amount: Based on the condition of a vehicle, predict the insurance amount of the cars that are provided in the dataset","06208d5f":"**Vehicle insurance** is insurance for cars, trucks, motorcycles, and other road vehicles. Its main purpose is to provide financial protection against:\n\n* Physical damage or bodily injury caused by traffic collisions\n* Liability that could arise from incidents in a vehicle\n\nVehicle insurance may additionally offer financial protection against theft of the vehicle and against damage to the vehicle sustained because of events other than traffic collisions such as keying, weather or natural disasters, and damage sustained by colliding with stationary objects.","59a59dd1":"***Data Visualization***","7abf739f":"**Label Encoder**","38c9c79b":"# Predict the condition of the cars","8c8e9f31":"# EDA","98ffa851":"# <h1><span style=\"color:crimson;\"><center>**Fast,Furious and Insured:Machine Learning Challenge**<\/center><\/span><\/h1>","aa948633":"**NOTE:-** While using XGBoost model,please make sure that target column don't have any NAN values."}}