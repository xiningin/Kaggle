{"cell_type":{"172396e6":"code","96e6589f":"code","efb9d9e5":"code","e92a2714":"code","612b745c":"code","e88f0fe6":"code","da7282f9":"code","ca96c629":"code","b59523ac":"code","b59249cf":"code","2a7e6b5e":"code","c81b3602":"code","02a54cb5":"code","ef870068":"code","19938108":"code","985f1889":"code","deed921d":"code","ef53e153":"code","065e15d0":"code","d9ac9827":"code","25f8a12a":"code","d05e3186":"code","d87f3ee2":"code","b0449db8":"code","c3f0b963":"code","2bfc7bc6":"code","e20da57a":"code","bf52f644":"code","83ab145c":"code","b66babe5":"code","2a5eca5e":"code","95369966":"code","66fa5e2a":"code","9fbc35d9":"code","29360c90":"code","bfa21dfe":"code","ce7bf289":"code","89135e3f":"code","0f950651":"code","bbe0b4e5":"code","3585e991":"code","014a9aad":"code","d0f9bc49":"code","e9fc97a3":"code","be424a00":"code","7334b69b":"code","639d568b":"code","38646be4":"code","8de71b2d":"code","937ef313":"code","b4b4cb44":"code","bc02f8ef":"code","26916281":"code","7ce34ed9":"code","2f4740c1":"code","0422887c":"code","96b0754e":"code","9b48eb38":"code","929eefb3":"code","5bf4a053":"code","b9d5372b":"code","104d7c56":"code","2ed8b48b":"code","757abbf5":"code","329a49f7":"code","b63cbb44":"code","c2506d0e":"markdown","54e6cb9b":"markdown","b5efb843":"markdown","68f013fb":"markdown"},"source":{"172396e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom copy import copy\nfrom tensorflow import keras\nfrom scipy import stats\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score","96e6589f":"from keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator","efb9d9e5":"stock_price_df = pd.read_csv (\"..\/input\/ml-prediction\/stock.csv\")","e92a2714":"stock_price_df.head()","612b745c":"## Sort The data\nstock_price_df = stock_price_df.sort_values(by =['Date'])\nstock_price_df","e88f0fe6":"## Stock volume\nstock_volume_df = pd.read_csv ('..\/input\/same-dataset\/stock_volume.csv')\nstock_volume_df","da7282f9":"## sort the volume data based on date\nstock_volume_df = stock_volume_df.sort_values (by = ['Date'])\nstock_volume_df","ca96c629":"## check any null Values in stock price Data\nstock_price_df. isnull().sum()","b59523ac":"## check any null Values in stock volume Data\n\nstock_volume_df.isnull().sum()","b59249cf":"# Get stock prices Datafram info\nstock_price_df.info()\n","2a7e6b5e":"# Get stock Volume Datafram info\n\nstock_volume_df.info()","c81b3602":"stock_price_df.describe()","02a54cb5":"stock_volume_df.describe()","ef870068":"# Function to normalize stock price based on inital prices \ndef normalized (df):\n    x = df.copy()\n    for i in x.columns [1:]:\n        x[i]= x[i]\/x[i][0]\n    return x    ","19938108":"## Function to plot interactive plots in ploty expression\ndef interactive_plot (df,title):\n    fig = px.line(title = title)\n    for i in df.columns [1:]:\n        fig.add_scatter (x = df['Date'], y = df[i], name = i)\n    fig.show()","985f1889":"interactive_plot(stock_price_df, 'Srock Prices')","deed921d":"interactive_plot (stock_volume_df, 'Stock Volume')","ef53e153":"interactive_plot (normalized (stock_price_df), 'Normalize Stock Prices Data')","065e15d0":"interactive_plot (normalized (stock_volume_df), 'Normalize Stock Volume Data')","d9ac9827":"## Function which Concatenate the Date Stock Price and Volume\ndef individual_df (price_df, vol_df, name):\n    return pd.DataFrame ({'Date' : price_df ['Date'] , 'Close' : price_df[name] , 'Volume' : vol_df[name]})","25f8a12a":"## Function to return input output data for AI\/ML model\n## Note that our goal is predict future stock Price\n## Target Stock Price today will be tomorrow stock price\ndef trading_window (data):\n    n = 1\n    data ['Target'] = data [['Close']].shift(-n)\n    return data","d05e3186":"## Let test the Function and individual stock price and volume of AAPL\nprice_volume_df = individual_df(stock_price_df, stock_volume_df , 'AAPL')\nprice_volume_df","d87f3ee2":"price_volume_target_df = trading_window(price_volume_df)\nprice_volume_target_df","b0449db8":"## Remove the Last number\nprice_volume_target_df = price_volume_target_df[:  -1]\nprice_volume_target_df\n","c3f0b963":"## Scale the Data\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler (feature_range = (0,1))\nprice_volume_target_scaled_df = sc.fit_transform (price_volume_target_df.drop (columns = ['Date']))","2bfc7bc6":"price_volume_target_scaled_df","e20da57a":"price_volume_target_scaled_df.shape","bf52f644":"# Create Feature and Target\nx = price_volume_target_scaled_df[: , :2]\ny = price_volume_target_scaled_df [: , 2:]","83ab145c":"x","b66babe5":"y","2a5eca5e":"# Splitting the data in way , Sincce order is important in time series\n# Note that we did not use train test split with its default setting since it suffeles the data\nsplit = int (0.65 * len (x))\nsplit","95369966":"x_train=x[:split]\nx_train.shape","66fa5e2a":"y_train = y[:split]\ny_train.shape","9fbc35d9":"x_test = x[split:]\nx_test","29360c90":"y_test = x[split:]\ny_test","bfa21dfe":"# Define A DATA plotting function\n\ndef show_plot (data,title):\n    plt.figure(figsize = (13,5))\n    plt.plot(data, linewidth = 3)\n    plt.title (title)\n    plt.grid()\n    \nshow_plot (x_train , 'Trainnig Data')\nshow_plot (x_test , 'Test Data')","ce7bf289":"from sklearn.linear_model import Ridge \n# Create and Train Ridge Regression Model\nregression_model = Ridge (alpha = 2)\nregression_model.fit (x_train , y_train )","89135e3f":"# Make a prediction\npredict_prices = regression_model.predict (x)\npredict_prices","0f950651":"# Append the close value to the list\npredicted = []\nfor i in predict_prices:\n    predicted.append(i[0])\n    ","bbe0b4e5":"len(predicted)","3585e991":"# Append the Close Value to the list\nclose = []\nfor i in price_volume_target_scaled_df:\n    close.append(i[0])\n    ","014a9aad":"df_predicted = price_volume_target_df[[\"Date\"]]\ndf_predicted","d0f9bc49":"# Add and Close Value of Data Frame\ndf_predicted['Close'] = close\ndf_predicted","e9fc97a3":"# Add te predicted value in the data frame\ndf_predicted['prediction'] = 'predicted'\ndf_predicted","be424a00":"# Plot the result\ninteractive_plot (df_predicted , 'Orginal vs Prediction')","7334b69b":"## Lets test the functions and get  individule stock prices and Volume for AAPL\nprice_volume_df = individual_df (stock_price_df, stock_volume_df, 'sp500')\nprice_volume_df","639d568b":"# Get the Close and Volume data as a trainng Data\ntraining_data = price_volume_df.iloc[: , 1:3].values\ntraining_data","38646be4":"# Normalize the Data\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler (feature_range = (0,1))\ntraining_set_scaler = sc.fit_transform (training_data)","8de71b2d":"x = []\ny = []\nfor i in range (1 , len(price_volume_df)):\n    x.append (training_set_scaler[i - 1: i , 0])\n    y.append (training_set_scaler[i , 0])","937ef313":"x","b4b4cb44":"y","bc02f8ef":"# Convert Data into array format\nx = np.asarray (x)\ny = np.asarray(y)\n","26916281":"# Split the Data\nsplit = int(0.7 * len(x))\nx_train = x[:split]\ny_train = y[:split]\nx_test = x[split:]\ny_test = y[split:]","7ce34ed9":"# Reshape 1D array to  3D array to feed into model\nx_train = np.reshape (x_train, (x_train.shape[0] , x_train.shape[1] , 1))\nx_test  = np.reshape (x_test , (x_test.shape[0] , x_test.shape[1] , 1))\nx_train.shape , x_test.shape","2f4740c1":"# Create a Model\ninputs = keras.layers.Input (shape = (x_train.shape[1] , x_train.shape[2]))\nx = keras.layers.LSTM(150 , return_sequences = True)(inputs)\nx = keras.layers.LSTM(150 , return_sequences = True)(x)\nx = keras.layers.LSTM(150 , return_sequences = True)(x)\noutputs = keras.layers.Dense(1, activation = 'linear')(x)\n\n\nmodel = keras.Model(inputs = inputs , outputs = outputs)\nmodel.compile (optimizer = 'adam' , loss = 'mse')\nmodel.summary()\n","0422887c":"# Train the Model\nhistory = model.fit (x_train, y_train , epochs = 2 , batch_size = 32 , validation_split = 0.2  )","96b0754e":"predicted","9b48eb38":"df_predicted = price_volume_df [1:][['Date','Close']]\ndf_predicted","929eefb3":"predicted = model.predict(y)","5bf4a053":"test_predicted = []\n\nfor i in predicted:\n    test_predicted.append(i[0][0])","b9d5372b":"test_predicted","104d7c56":"Close = []\n\nfor i in training_set_scaler:\n    Close.append(i[0])","2ed8b48b":"Close","757abbf5":"df_predicted['predictions'] = test_predicted","329a49f7":"df_predicted","b63cbb44":"df_predicted = price_volume_df [1:][['Date','Close']]\ndf_predicted","c2506d0e":"## Prepare The Data preprocessing ","54e6cb9b":"# Train an Long Short-term Memory (LSTM) time series model","b5efb843":"## Performe Exploratory Data Analysis and Visulation ","68f013fb":"### Bridge and Train a Ridge linear Regression"}}