{"cell_type":{"680eb908":"code","83afcc8a":"code","7d823738":"code","45bad94a":"code","64be440a":"code","2ea32e2e":"code","10cf7d9c":"code","2860824a":"code","0807e3ff":"code","83892fbf":"code","9464a885":"code","e406927b":"code","c0d00530":"code","96874188":"code","00b57c51":"code","c89c1ac2":"code","a3f9d15a":"code","b8148981":"code","1794022c":"markdown","1e11b5e5":"markdown","3e0f589a":"markdown","73f587d0":"markdown","a694296b":"markdown","28be944a":"markdown","89e09fd9":"markdown","0c9550c6":"markdown","358717f5":"markdown","25c99e8d":"markdown","b1188369":"markdown","d3b8f5af":"markdown","5ba4e162":"markdown","fdeb41fe":"markdown","5ea154d4":"markdown","5c1c0740":"markdown","311d3c22":"markdown","f44700ba":"markdown","39db454a":"markdown","b369ad3e":"markdown","a771a93a":"markdown","b78937f0":"markdown","5b56d38d":"markdown","ba571595":"markdown","73c160ca":"markdown","cfdd6538":"markdown","67ac13aa":"markdown","cb7d2462":"markdown"},"source":{"680eb908":"import numpy as np\nimport pandas as pd\nimport itertools\nimport random\nimport os\nimport json\nfrom pathlib import Path\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors","83afcc8a":"data_path = Path('\/kaggle\/input\/abstraction-and-reasoning-challenge\/')\ntraining_path = data_path \/ 'training'\ntraining_tasks = sorted(os.listdir(training_path))\nevaluation_path = data_path \/ 'evaluation'\nevaluation_tasks = sorted(os.listdir(evaluation_path))\ntest_path = data_path \/ 'test'\ntest_tasks = sorted(os.listdir(test_path))","7d823738":"def plot_output(task, program):\n    for test_part in task['test']:\n        image = [np.array(test_part['input'])]\n   \n        for function in program:\n            image=function(image)    \n        plt.figure()\n        \n        cmap = colors.ListedColormap(\n                ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n                 '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n        norm = colors.Normalize(vmin=0, vmax=9)\n               \n        for num in range(0,len(image)):\n            plt.imshow(image[num], cmap=cmap, norm=norm)\n            #plt.grid()   \n            plt.show()   \n\ncmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\nnorm = colors.Normalize(vmin=0, vmax=9)\ndef plot_one(ax, i,train_or_test,input_or_output):\n    cmap = colors.ListedColormap(\n        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n    norm = colors.Normalize(vmin=0, vmax=9)\n    \n    input_matrix = task[train_or_test][i][input_or_output]\n    ax.imshow(input_matrix, cmap=cmap, norm=norm)\n    ax.grid(True,which='both',color='lightgrey', linewidth=0.5)    \n    ax.set_yticks([x-0.5 for x in range(1+len(input_matrix))])\n    ax.set_xticks([x-0.5 for x in range(1+len(input_matrix[0]))])     \n    ax.set_xticklabels([])\n    ax.set_yticklabels([])\n    ax.set_title(train_or_test + ' '+input_or_output)\n    \n\ndef plot_task(task, has_testoutput=True):\n    \"\"\"\n    Plots the first train and test pairs of a specified task,\n    using same color scheme as the ARC app\n    \"\"\"    \n    num_train = len(task['train'])\n    fig, axs = plt.subplots(2, num_train, figsize=(3*num_train,3*2))\n    for i in range(num_train):     \n        plot_one(axs[0,i],i,'train','input')\n        plot_one(axs[1,i],i,'train','output')        \n    plt.tight_layout()\n    plt.show()        \n        \n    num_test = len(task['test'])\n    \n    fig, axs = plt.subplots(2, num_test, figsize=(3*num_test,3*2))\n    \n    if num_test==1: \n        plot_one(axs[0],0,'test','input')\n        if has_testoutput:\n            plot_one(axs[1],0,'test','output')     \n    else:\n        for i in range(num_test):      \n            plot_one(axs[0,i],i,'test','input')\n            if has_testoutput:\n                plot_one(axs[1,i],i,'test','output')  \n    plt.tight_layout()\n    plt.show() \n\n    \n# Display each output of the function\ndef show_image_list(images):\n    \"\"\" Show each image contained in a list. \"\"\"\n    p = plt.figure().subplots(1, len(images))\n    if len(images) > 1:\n        for i, image in enumerate(images):\n            p[i].imshow(image, cmap=cmap, norm=norm)\n    elif len(images) == 1:\n        p.imshow(images[0], cmap=cmap, norm=norm)\n\n\n# describe a program as a human readable string.\ndef program_desc(program):\n    \"\"\" Create a human readable description of a program. \"\"\"\n    desc = [x.__name__ for x in program]\n    return(' >> '.join(desc))","45bad94a":"for first_col in range(0,10):\n    for second_col in range(0,10):\n        if first_col != second_col:\n            exec(\"\"\"def c{first_color}_to_c{second_color}_unlifted(pixmap):\n                         pixmap[pixmap==int({first_color})]=int({second_color})\n                         return [pixmap]\n            \"\"\".format(first_color=str(first_col), second_color=str(second_col))) in globals()\n            \n#            exec(\"\"\"def unite_c{colorstr}_horizontally_in_c{colorstr2}_unlifted(pixmap):   \n#               for row_index, row in enumerate(pixmap):\n#                   row_nums=[]\n#                   for index, value in np.ndenumerate(row):\n#                       if value==int({colorstr}):\n#                           row_nums.append(index)\n#                   if len(row_nums)>1:\n#                       for index, value in np.ndenumerate(row):\n#                           if (index >= min(row_nums)) & (index <= max(row_nums)) & (value == 0):\n#                               pixmap[row_index, index]=int({colorstr})\n#               return [pixmap]\n#           \"\"\".format(colorstr=str(color), colorstr2=str(color))) in globals()\n\n\nfor color in range(0,10):\n    exec(\"\"\"def to_c{colorstr}_unlifted(pixmap):\n                pixmap[pixmap>0]=int({colorstr})\n                return [pixmap]\n            \"\"\".format(colorstr=str(color))) in globals()\n \n\n    exec(\"\"\"def unite_c{colorstr}_horizontally_unlifted(pixmap):   \n                for row_index, row in enumerate(pixmap):\n                    row_nums=[]\n                    for index, value in np.ndenumerate(row):\n                        if value==int({colorstr}):\n                            row_nums.append(index)\n                    if len(row_nums)>1:\n                        for index, value in np.ndenumerate(row):\n                            if (index >= min(row_nums)) & (index <= max(row_nums)) & (value == 0):\n                                pixmap[row_index, index]=int({colorstr})\n                return [pixmap]\n            \"\"\".format(colorstr=str(color))) in globals()\n    \n    exec(\"\"\"def unite_c{colorstr}_vertically_unlifted(pixmap):\n            transp=pixmap.T\n            for col_index, col in enumerate(transp):\n                col_nums=[]\n                for index, value in np.ndenumerate(col):\n                    if value==int({colorstr}):\n                        col_nums.append(index)                \n                if len(col_nums)>1:\n                    for index, value in np.ndenumerate(col):\n                        if (index >= min(col_nums)) & (index <=max(col_nums)) & (value == 0):\n                            transp[col_index, index]=int({colorstr})\n            return [transp.T]\n        \"\"\".format(colorstr=str(color))) in globals()\n    \n    exec(\"\"\"def add_c{colorstr}_frame_to_single_squares_unlifted(pixmap):\n                framed=np.pad(pixmap, (1,1), \"constant\", constant_values=(0,0))   \n                for x in range(1, framed.shape[0]-2):\n                    for y in range(1, framed.shape[1]-2):\n                        x_=x-1\n                        y_=y-1\n                        if (pixmap[x_, y_]!=pixmap[x_+1, y_]) & (pixmap[x_, y_]!=pixmap[x_-1, y_]) & (pixmap[x_, y_]!=pixmap[x_, y_+1]) & (pixmap[x_, y_]!=pixmap[x_, y_-1]):\n                            framed[x-1, y]=framed[x, y-1]=framed[x+1, y]=framed[x, y+1]=framed[x+1, y+1]=framed[x-1, y+1]=framed[x+1, y-1]=framed[x-1, y-1]=int({colorstr})   \n                return [framed[1:-1,1:-1]]\n        \"\"\".format(colorstr=str(color))) in globals()\n    \n    if color > 0:\n        exec(\"\"\"def hollow_c{colorstr}_unlifted(pixmap):\n                    framed = np.pad(pixmap, 1, \"constant\", constant_values=0)\n                    for x in range(1, framed.shape[0]-2):\n                        for y in range(1, framed.shape[1]-2):\n                            x_=x-1\n                            y_=y-1\n                            if (pixmap[x_, y_]==int({colorstr})) & (pixmap[x_+1, y_]==int({colorstr})) & (pixmap[x_-1, y_]==int({colorstr})) & (pixmap[x_, y_+1]==int({colorstr})) & (pixmap[x_, y_-1]==int({colorstr})):\n                                framed[x,y]=0\n                    return [framed[1:-1,1:-1]]\n            \"\"\".format(colorstr=str(color))) in globals()\n        \n\n                # copied\n        exec(\"\"\"def fill_enclosed_area_c{colorstr}_unlifted(arr):\n                        # depth first search\n                        H, W = arr.shape\n                        Dy = [0, -1, 0, 1]\n                        Dx = [1, 0, -1, 0]\n                        arr_padded = np.pad(arr, ((1,1),(1,1)), \"constant\", constant_values=0)\n                        searched = np.zeros(arr_padded.shape, dtype=bool)\n                        searched[0, 0] = True\n                        q = [(0, 0)]\n                        while q:\n                            y, x = q.pop()\n                            for dy, dx in zip(Dy, Dx):\n                                y_, x_ = y+dy, x+dx\n                                if not 0 <= y_ < H+2 or not 0 <= x_ < W+2:\n                                    continue\n                                if not searched[y_][x_] and arr_padded[y_][x_]==0:\n                                    q.append((y_, x_))\n                                    searched[y_, x_] = True\n                        res = searched[1:-1, 1:-1]\n                        res |= arr!=0  \n                        return [arr+~res*int({colorstr})]\n            \"\"\".format(colorstr=str(color))) in globals()","64be440a":"# np.array -> [np.array]\ndef groupByColor_unlifted(pixmap):\n    \"\"\" Split an image into a collection of images with unique color \"\"\"\n    # Count the number of colors\n    nb_colors = int(pixmap.max()) + 1\n    # Create a pixmap for each color\n    splited = [(pixmap == i) * i for i in range(1, nb_colors)]\n    # Filter out empty images\n    return [x for x in splited if np.any(x)]\n\n# np.array -> [np.array]\ndef cropToContent_unlifted(pixmap):\n    \"\"\" Crop an image to fit exactly the non 0 pixels \"\"\"\n    # Op argwhere will give us the coordinates of every non-zero point\n    true_points = np.argwhere(pixmap)\n    if len(true_points) == 0:\n        return []\n    # Take the smallest points and use them as the top left of our crop\n    top_left = true_points.min(axis=0)\n    # Take the largest points and use them as the bottom right of our crop\n    bottom_right = true_points.max(axis=0)\n    # Crop inside the defined rectangle\n    pixmap = pixmap[top_left[0]:bottom_right[0]+1, top_left[1]:bottom_right[1]+1]\n    return [pixmap]\n\n# np.array -> [np.array]\ndef splitH_unlifted(pixmap):\n    \"\"\" Split horizontally an image \"\"\"\n    h = pixmap.shape[0]\n    if h % 2 == 1:\n        h = h \/\/ 2\n        return [pixmap[:h,:], pixmap[h+1:,:]]\n    else:\n        h = h \/\/ 2\n        return [pixmap[:h,:], pixmap[h:,:]]\n\n# np.array -> [np.array]\ndef negative_unlifted(pixmap):\n    \"\"\" Compute the negative of an image (and conserve the color) \"\"\"\n    negative = np.logical_not(pixmap).astype(int)\n    color = max(pixmap.max(), 1)\n    return [negative * color]\n\n# Added by fernandeslouro\n\n# np.array -> [np.array]\ndef splitV_unlifted(pixmap):\n    \"\"\" Split vertically an image \"\"\"\n    h = pixmap.shape[1] # horizontal dimension\n    if h % 2 == 1: # if horizontal dimension not pair\n        h = h \/\/ 2 # floor division - results after decimal points are removed - ???????????????????????????????????\n        return [pixmap[:,:h], pixmap[:,h+1:]]\n    else:\n        h = h \/\/ 2\n        return [pixmap[:,:h], pixmap[:,h:]]\n    \n\n# np.array -> [np.array]\ndef rotate_counterclockwise_unlifted(pixmap):\n    \"\"\" Rotates array counterclockwise \"\"\"\n    return [np.rot90(pixmap, 1)]\n\n# np.array -> [np.array]\ndef rotate_clockwise_unlifted(pixmap):\n    \"\"\" Rotates array clockwise \"\"\"\n    return [np.rot90(pixmap, 3)]\n\n# np.array -> [np.array]\ndef duplicate_unlifted(pixmap):\n    \"\"\" One element of the array becomes three \"\"\"\n    return [np.repeat(np.repeat(pixmap, 2, axis=0), 2, axis=1)]\n\n# np.array -> [np.array]\ndef triplicate_unlifted(pixmap):\n    \"\"\" One element of the array becomes three \"\"\"\n    return [np.repeat(np.repeat(pixmap, 3, axis=0), 3, axis=1)]\n\n# copied\ndef get_enclosed_area_unlifted(arr):\n        # depth first search\n        H, W = arr.shape\n        Dy = [0, -1, 0, 1]\n        Dx = [1, 0, -1, 0]\n        arr_padded = np.pad(arr, ((1,1),(1,1)), \"constant\", constant_values=0)\n        searched = np.zeros(arr_padded.shape, dtype=bool)\n        searched[0, 0] = True\n        q = [(0, 0)]\n        while q:\n            y, x = q.pop()\n            for dy, dx in zip(Dy, Dx):\n                y_, x_ = y+dy, x+dx\n                if not 0 <= y_ < H+2 or not 0 <= x_ < W+2:\n                    continue\n                if not searched[y_][x_] and arr_padded[y_][x_]==0:\n                    q.append((y_, x_))\n                    searched[y_, x_] = True\n        res = searched[1:-1, 1:-1]\n        res |= arr!=0\n        return [arr, ~res*2]\n               \n    \n# np.array -> [np.array]\ndef extrapolate_unlifted(pixmap): #It seems that extrpolate will crash given the nature of this DSL or whatever\n    \"\"\" Expand the pattern, duplicating it where different from zero (like task 0) \"\"\"\n    pixmap_upsampled = pixmap.repeat(pixmap.shape[0], axis=0).repeat(pixmap.shape[1], axis=1)\n    pixmap_tiled = np.tile(pixmap, pixmap.shape)\n    output=[pixmap_upsampled, pixmap_tiled]\n    return [np.bitwise_and.reduce(np.array(output).astype(int))]\n\n# np.array -> [np.array]\ndef lower_elements_unlifted(pixmap):\n    pixmap=np.concatenate(([np.zeros(pixmap.shape[1])], pixmap), axis=0)\n    return[pixmap[:pixmap.shape[0]-1]]\n\ndef extrapolate_unlifted(pixmap): #It seems that extrpolate will crash given the nature of this DSL or whatever\n    \"\"\" Expand the pattern, duplicating it where different from zero (like task 0) \"\"\"\n    pixmap_upsampled = pixmap.repeat(pixmap.shape[0], axis=0).repeat(pixmap.shape[1], axis=1)\n    pixmap_tiled = np.tile(pixmap, pixmap.shape)\n    output=[pixmap_upsampled, pixmap_tiled]\n    return [np.bitwise_and.reduce(np.array(output).astype(int))]\n\ndef duplicate_horizontally_unlifted(pixmap):\n    \"\"\"Adds copy to the list side by side\"\"\"\n    return[np.concatenate((pixmap, pixmap), axis=1)]\n\ndef duplicate_horizontally_symmetrically_unlifted(pixmap):\n    \"\"\"Adds copy to the list side by side, maintaining symmetry\"\"\"\n    return[np.concatenate((pixmap, np.fliplr(pixmap)), axis=1)]\n\ndef duplicate_vertically_unlifted(pixmap):\n    \"\"\"Adds copy to the list below\"\"\"\n    return[np.concatenate((pixmap, pixmap), axis=0)]\n\ndef duplicate_vertically_symmetrically_unlifted(pixmap):\n    \"\"\"Adds copy to the list below, maintaining symmetry\"\"\"\n    return[np.concatenate((pixmap, np.flipud(pixmap)), axis=0)]\n\ndef flip_vertically_unlifted(pixmap):\n    return[np.flipud(pixmap)]\n\ndef flip_horizontally_unlifted(pixmap):\n    return[np.fliplr(pixmap)]\n\ndef rotate_colors_unlifted(pixmap):\n    colors=[x for x in np.unique(pixmap) if x > 0]\n    if len(colors)==0:\n        return[pixmap]\n    switch={}\n    prevcolor=colors[-1]\n    for color in colors:\n        switch[color]=prevcolor\n        prevcolor=color\n    for (x,y), value in np.ndenumerate(pixmap):\n        if value > 0:\n            pixmap[x,y]=switch[value]\n    return [pixmap]\n\ndef hollow_all_unlifted(pixmap):\n    framed = np.pad(pixmap, 1, \"constant\", constant_values=0)\n    for color in range(1,10):\n        for x in range(1, framed.shape[0]-2):\n            for y in range(1, framed.shape[1]-2):\n                x_=x-1\n                y_=y-1\n                if (pixmap[x_, y_]==color) & (pixmap[x_+1, y_]==color) & (pixmap[x_-1, y_]==color) & (pixmap[x_, y_+1]==color) & (pixmap[x_, y_-1]==color):\n                    framed[x,y]=0\n    return [framed[1:-1,1:-1]]\n\n#being ignored at the moment\ndef paint_all_most_common_color_unlifted(pixmap):\n    most_common_color=np.argmax(np.bincount(pixmap[pixmap>0].flatten().astype(int))) #SOMETIMES IT'S NOT IN INT, WHY?????????????? - THAT CAUSES ERROR HEREcolor\n    pixmap[pixmap>0]=most_common_color\n    return[pixmap]\n","2ea32e2e":"# [np.array] -> [np.array]\ndef identity(x: [np.array]):\n    return x\n\n# [np.array] -> [np.array]\ndef tail(x):\n    if len(x) > 1:\n        return x[1:]\n    else:\n        return x\n\n# [np.array] -> [np.array]\ndef init(x):\n    if len(x) > 1:\n        return x[:1]\n    else:\n        return x\n\n# [np.array] -> [np.array]\ndef union(x):\n    \"\"\" Compute the pixel union of all images in the list. \"\"\"\n    if len(x) < 2:\n        return x\n    \n    # Make sure everybody have the same shape\n    first_shape = tuple(x[0].shape)\n    for pixmap in x[1:]:\n        if first_shape != tuple(pixmap.shape):\n            return []\n    \n    return [np.bitwise_or.reduce(np.array(x).astype(int))]\n    \ndef intersect(x):\n    \"\"\" Compute the pixel intersection of all images in the list. \"\"\"\n    if len(x) < 2:\n        return x\n    \n    # Make sure everybody have the same shape\n    first_shape = tuple(x[0].shape)\n    for pixmap in x[1:]:\n        if first_shape != tuple(pixmap.shape):\n            return []\n    \n    return [(np.prod(np.array(x), axis=0) > 0).astype(int)]\n\ndef sortByColor(xs):\n    \"\"\" Sort pictures by increasing color id. \"\"\"\n    xs = [x for x in xs if len(x.reshape(-1)) > 0]\n    return list(sorted(xs, key=lambda x: x.max()))\n\ndef sortByWeight(xs):\n    \"\"\" Sort images by how many non zero pixels are contained. \"\"\"\n    xs = [x for x in xs if len(x.reshape(-1)) > 0]\n    return list(sorted(xs, key=lambda x: (x>0).sum()))\n\ndef reverse(x):\n    \"\"\" Reverse the order of a list of images. \"\"\"\n    return x[::-1]\n\n#-------\n# added by fernandeslouro\ndef sortByNumberOfColors(xs):\n    \"\"\" Sort pictures by increasing number of colors. \"\"\"\n    return list(sorted(xs, key=lambda x: len(np.unique(x))))\n\n\ndef xor(x):\n    \"\"\" Compute the xor of all images in the list. \"\"\"\n    if len(x) < 2:\n        return x\n    \n    # Make sure everybody have the same shape\n    first_shape = tuple(x[0].shape)\n    for pixmap in x[1:]:\n        if first_shape != tuple(pixmap.shape):\n            return []\n    \n    return [np.bitwise_xor.reduce(np.array(x).astype(int))]","10cf7d9c":"def lift(fct):\n    # Lift the function\n    def lifted_function(xs):\n        list_of_results = [fct(x) for x in xs]\n        return list(itertools.chain(*list_of_results))\n    # Give a nice name to the lifted function\n    import re\n    lifted_function.__name__ = re.sub('_unlifted$', '_lifted', fct.__name__)\n    return lifted_function\n\ndef lift_functions_list(unlifted_functions):\n    # Lift the function\n    \n    # Give a nice name to the lifted function\n    lifted_functions=[]\n    for fct in unlifted_functions:\n        def lifted_function(xs):\n            list_of_results = [fct(x) for x in xs]\n            return list(itertools.chain(*list_of_results))\n        import re\n        lifted_function.__name__ = re.sub('_unlifted$', '_lifted', fct.__name__)\n        lifted_functions.append(lifted_function)\n    return lifted_functions","2860824a":"   \ncropToContent = lift(cropToContent_unlifted)\ngroupByColor = lift(groupByColor_unlifted)\nsplitH = lift(splitH_unlifted)\nnegative = lift(negative_unlifted)\n\ninitial_functions=[tail, init, union, intersect, sortByColor, sortByWeight, reverse,\\\n                   cropToContent, groupByColor, splitH, negative]\n#--\nto_c0=lift(to_c0_unlifted)\nto_c1=lift(to_c1_unlifted)\nto_c2=lift(to_c2_unlifted)\nto_c3=lift(to_c3_unlifted)\nto_c4=lift(to_c4_unlifted)\nto_c5=lift(to_c5_unlifted)\nto_c6=lift(to_c6_unlifted)\nto_c7=lift(to_c7_unlifted)\nto_c8=lift(to_c8_unlifted)\nto_c9=lift(to_c9_unlifted)\n\nsingle_color_functions=[to_c1,to_c2, to_c3, to_c4, to_c5, to_c6, to_c7, to_c8, to_c9] \n\n#--\nc1_to_c0=lift(c1_to_c0_unlifted)\nc1_to_c2=lift(c1_to_c2_unlifted)\nc1_to_c3=lift(c1_to_c3_unlifted)\nc1_to_c4=lift(c1_to_c4_unlifted)\nc1_to_c5=lift(c1_to_c5_unlifted)\nc1_to_c6=lift(c1_to_c6_unlifted)\nc1_to_c7=lift(c1_to_c7_unlifted)\nc1_to_c8=lift(c1_to_c8_unlifted)\nc1_to_c9=lift(c1_to_c9_unlifted)\nc2_to_c0=lift(c2_to_c0_unlifted)\nc2_to_c1=lift(c2_to_c1_unlifted)\nc2_to_c3=lift(c2_to_c3_unlifted)\nc2_to_c4=lift(c2_to_c4_unlifted)\nc2_to_c5=lift(c2_to_c5_unlifted)\nc2_to_c6=lift(c2_to_c6_unlifted)\nc2_to_c7=lift(c2_to_c7_unlifted)\nc2_to_c8=lift(c2_to_c8_unlifted)\nc2_to_c9=lift(c2_to_c9_unlifted)\nc3_to_c0=lift(c3_to_c0_unlifted)\nc3_to_c1=lift(c3_to_c1_unlifted)\nc3_to_c2=lift(c3_to_c2_unlifted)\nc3_to_c4=lift(c3_to_c4_unlifted)\nc3_to_c5=lift(c3_to_c5_unlifted)\nc3_to_c6=lift(c3_to_c6_unlifted)\nc3_to_c7=lift(c3_to_c7_unlifted)\nc3_to_c8=lift(c3_to_c8_unlifted)\nc3_to_c9=lift(c3_to_c9_unlifted)\nc4_to_c0=lift(c4_to_c0_unlifted)\nc4_to_c1=lift(c4_to_c1_unlifted)\nc4_to_c2=lift(c4_to_c2_unlifted)\nc4_to_c3=lift(c4_to_c3_unlifted)\nc4_to_c5=lift(c4_to_c5_unlifted)\nc4_to_c6=lift(c4_to_c6_unlifted)\nc4_to_c7=lift(c4_to_c7_unlifted)\nc4_to_c8=lift(c4_to_c8_unlifted)\nc4_to_c9=lift(c4_to_c9_unlifted)\nc5_to_c0=lift(c5_to_c0_unlifted)\nc5_to_c1=lift(c5_to_c1_unlifted)\nc5_to_c2=lift(c5_to_c2_unlifted)\nc5_to_c3=lift(c5_to_c3_unlifted)\nc5_to_c4=lift(c5_to_c4_unlifted)\nc5_to_c6=lift(c5_to_c6_unlifted)\nc5_to_c7=lift(c5_to_c7_unlifted)\nc5_to_c8=lift(c5_to_c8_unlifted)\nc5_to_c9=lift(c5_to_c9_unlifted)\nc6_to_c0=lift(c6_to_c0_unlifted)\nc6_to_c1=lift(c6_to_c1_unlifted)\nc6_to_c2=lift(c6_to_c2_unlifted)\nc6_to_c3=lift(c6_to_c3_unlifted)\nc6_to_c4=lift(c6_to_c4_unlifted)\nc6_to_c5=lift(c6_to_c5_unlifted)\nc6_to_c7=lift(c6_to_c7_unlifted)\nc6_to_c8=lift(c6_to_c8_unlifted)\nc6_to_c9=lift(c6_to_c9_unlifted)\nc7_to_c0=lift(c7_to_c0_unlifted)\nc7_to_c1=lift(c7_to_c1_unlifted)\nc7_to_c2=lift(c7_to_c2_unlifted)\nc7_to_c3=lift(c7_to_c3_unlifted)\nc7_to_c4=lift(c7_to_c4_unlifted)\nc7_to_c5=lift(c7_to_c5_unlifted)\nc7_to_c6=lift(c7_to_c6_unlifted)\nc7_to_c8=lift(c7_to_c8_unlifted)\nc7_to_c9=lift(c7_to_c9_unlifted)\nc1_to_c0=lift(c1_to_c0_unlifted)\nc8_to_c0=lift(c8_to_c0_unlifted)\nc8_to_c1=lift(c8_to_c1_unlifted)\nc8_to_c2=lift(c8_to_c2_unlifted)\nc8_to_c3=lift(c8_to_c3_unlifted)\nc8_to_c4=lift(c8_to_c4_unlifted)\nc8_to_c5=lift(c8_to_c5_unlifted)\nc8_to_c6=lift(c8_to_c6_unlifted)\nc8_to_c7=lift(c8_to_c7_unlifted)\nc8_to_c9=lift(c8_to_c9_unlifted)\nc9_to_c0=lift(c9_to_c0_unlifted)\nc9_to_c1=lift(c9_to_c1_unlifted)\nc9_to_c2=lift(c9_to_c2_unlifted)\nc9_to_c3=lift(c9_to_c3_unlifted)\nc9_to_c4=lift(c9_to_c4_unlifted)\nc9_to_c5=lift(c9_to_c5_unlifted)\nc9_to_c6=lift(c9_to_c6_unlifted)\nc9_to_c7=lift(c9_to_c7_unlifted)\nc9_to_c8=lift(c9_to_c8_unlifted)\n\ncolor_switch_functions = [c1_to_c0, c1_to_c2, c1_to_c3, c1_to_c4, c1_to_c5, c1_to_c6,\\\n                          c1_to_c7, c1_to_c8, c1_to_c9, c2_to_c0, c2_to_c1, c2_to_c3,\\\n                          c2_to_c4, c2_to_c5, c2_to_c6, c2_to_c7, c2_to_c8,\\\n                          c2_to_c9, c3_to_c0, c3_to_c1, c3_to_c2, c3_to_c4, c3_to_c5,\\\n                          c3_to_c6, c3_to_c7, c3_to_c8, c3_to_c9, c4_to_c0, c4_to_c1,\\\n                          c4_to_c2, c4_to_c3, c4_to_c5, c4_to_c6, c4_to_c7,\\\n                          c4_to_c8, c4_to_c9, c5_to_c0, c5_to_c1, c5_to_c2, c5_to_c3,\\\n                          c5_to_c4, c5_to_c6, c5_to_c7, c5_to_c8, c5_to_c9, c6_to_c0,\\\n                          c6_to_c1, c6_to_c2, c6_to_c3, c6_to_c4, c6_to_c5,\\\n                          c6_to_c7, c6_to_c8, c6_to_c9, c7_to_c0, c7_to_c1, c7_to_c2,\\\n                          c7_to_c3, c7_to_c4, c7_to_c5, c7_to_c6, c7_to_c8,\\\n                          c7_to_c9, c8_to_c0, c8_to_c1, c8_to_c2, c8_to_c3, c8_to_c4,\\\n                          c8_to_c5, c8_to_c6, c8_to_c7, c8_to_c9, c9_to_c0, c9_to_c1,\\\n                          c9_to_c2, c9_to_c3, c9_to_c4, c9_to_c5, c9_to_c6,\\\n                          c9_to_c7, c9_to_c8]\n\n#--\nunite_c1_horizontally=lift(unite_c1_horizontally_unlifted)\nunite_c2_horizontally=lift(unite_c2_horizontally_unlifted)\nunite_c3_horizontally=lift(unite_c3_horizontally_unlifted)\nunite_c4_horizontally=lift(unite_c4_horizontally_unlifted)\nunite_c5_horizontally=lift(unite_c5_horizontally_unlifted)\nunite_c6_horizontally=lift(unite_c6_horizontally_unlifted)\nunite_c7_horizontally=lift(unite_c7_horizontally_unlifted)\nunite_c8_horizontally=lift(unite_c8_horizontally_unlifted)\nunite_c9_horizontally=lift(unite_c9_horizontally_unlifted)\n\nunite_c1_vertically=lift(unite_c1_vertically_unlifted)\nunite_c2_vertically=lift(unite_c2_vertically_unlifted)\nunite_c3_vertically=lift(unite_c3_vertically_unlifted)\nunite_c4_vertically=lift(unite_c4_vertically_unlifted)\nunite_c5_vertically=lift(unite_c5_vertically_unlifted)\nunite_c6_vertically=lift(unite_c6_vertically_unlifted)\nunite_c7_vertically=lift(unite_c7_vertically_unlifted)\nunite_c8_vertically=lift(unite_c8_vertically_unlifted)\nunite_c9_vertically=lift(unite_c9_vertically_unlifted)\n\nunite_colors_functions=[unite_c1_horizontally, unite_c2_horizontally, unite_c3_horizontally,\\\n                        unite_c4_horizontally, unite_c5_horizontally, unite_c6_horizontally,\\\n                        unite_c7_horizontally, unite_c8_horizontally, unite_c9_horizontally,\\\n                        unite_c1_vertically, unite_c2_vertically, unite_c3_vertically,\\\n                        unite_c4_vertically, unite_c5_vertically, unite_c6_vertically,\\\n                        unite_c7_vertically, unite_c8_vertically, unite_c9_vertically]\n\n\n#--\nadd_c1_frame_to_single_squares=lift(add_c1_frame_to_single_squares_unlifted)\nadd_c2_frame_to_single_squares=lift(add_c2_frame_to_single_squares_unlifted)\nadd_c3_frame_to_single_squares=lift(add_c3_frame_to_single_squares_unlifted)\nadd_c4_frame_to_single_squares=lift(add_c4_frame_to_single_squares_unlifted)\nadd_c5_frame_to_single_squares=lift(add_c5_frame_to_single_squares_unlifted)\nadd_c6_frame_to_single_squares=lift(add_c6_frame_to_single_squares_unlifted)\nadd_c7_frame_to_single_squares=lift(add_c7_frame_to_single_squares_unlifted)\nadd_c8_frame_to_single_squares=lift(add_c8_frame_to_single_squares_unlifted)\nadd_c9_frame_to_single_squares=lift(add_c9_frame_to_single_squares_unlifted)\n\nadd_frame_colors_functions= [add_c1_frame_to_single_squares, add_c2_frame_to_single_squares, add_c3_frame_to_single_squares, add_c4_frame_to_single_squares, add_c5_frame_to_single_squares, add_c6_frame_to_single_squares, add_c7_frame_to_single_squares, add_c8_frame_to_single_squares, add_c9_frame_to_single_squares]\n\n\n#----\n\nhollow_c1=lift(hollow_c1_unlifted)\nhollow_c2=lift(hollow_c2_unlifted)\nhollow_c3=lift(hollow_c3_unlifted)\nhollow_c4=lift(hollow_c4_unlifted)\nhollow_c5=lift(hollow_c5_unlifted)\nhollow_c6=lift(hollow_c6_unlifted)\nhollow_c7=lift(hollow_c7_unlifted)\nhollow_c8=lift(hollow_c8_unlifted)\nhollow_c9=lift(hollow_c9_unlifted)\nhollow_all=lift(hollow_all_unlifted)\n\nhollow_functions=[hollow_c1,hollow_c2,hollow_c3,hollow_c4,hollow_c5,hollow_c6,hollow_c7,hollow_c8,hollow_c9, hollow_all]\n\n#--\n\nfill_enclosed_area_c1=lift(fill_enclosed_area_c1_unlifted)\nfill_enclosed_area_c2=lift(fill_enclosed_area_c2_unlifted)\nfill_enclosed_area_c3=lift(fill_enclosed_area_c3_unlifted)\nfill_enclosed_area_c4=lift(fill_enclosed_area_c4_unlifted)\nfill_enclosed_area_c5=lift(fill_enclosed_area_c5_unlifted)\nfill_enclosed_area_c6=lift(fill_enclosed_area_c6_unlifted)\nfill_enclosed_area_c7=lift(fill_enclosed_area_c7_unlifted)\nfill_enclosed_area_c8=lift(fill_enclosed_area_c8_unlifted)\nfill_enclosed_area_c9=lift(fill_enclosed_area_c9_unlifted)\n\nfill_enclosed_functions=[fill_enclosed_area_c1, fill_enclosed_area_c2, fill_enclosed_area_c3, fill_enclosed_area_c4, fill_enclosed_area_c5, fill_enclosed_area_c6, fill_enclosed_area_c7, fill_enclosed_area_c8, fill_enclosed_area_c9]\n\n\n#--\nsplitV = lift(splitV_unlifted)\nrotate_counterclockwise=lift(rotate_counterclockwise_unlifted)\nrotate_clockwise=lift(rotate_clockwise_unlifted)\ntriplicate=lift(triplicate_unlifted)\nduplicate=lift(duplicate_unlifted)\nget_enclosed_area=lift(get_enclosed_area_unlifted)\nextrapolate=lift(extrapolate_unlifted)\nlower_elements=lift(lower_elements_unlifted)\nduplicate_horizontally=lift(duplicate_horizontally_unlifted)\nduplicate_horizontally_symmetrically=lift(duplicate_horizontally_symmetrically_unlifted)\nduplicate_vertically=lift(duplicate_vertically_unlifted)\nduplicate_vertically_symmetrically=lift(duplicate_vertically_symmetrically_unlifted)\nflip_horizontally=lift(flip_horizontally_unlifted)\nflip_vertically=lift(flip_vertically_unlifted)\nrotate_colors=lift(rotate_colors_unlifted)\npaint_all_most_common_color=lift(paint_all_most_common_color_unlifted)\n\nadded_functions=[splitV, rotate_counterclockwise, rotate_clockwise, triplicate,\\\n                 duplicate, get_enclosed_area, lower_elements, sortByNumberOfColors,\\\n                 xor, duplicate_horizontally, duplicate_horizontally_symmetrically,\\\n                 duplicate_vertically, duplicate_vertically_symmetrically,\\\n                 flip_vertically, flip_horizontally, rotate_colors]\n                 #paint_all_most_common_color\n#does not include extrapolate - it blows up memory, for some reason\nall_functions=initial_functions+single_color_functions+color_switch_functions+unite_colors_functions+add_frame_colors_functions+\\\n                        hollow_functions+fill_enclosed_functions+added_functions","0807e3ff":"def evaluate(program: [], input_image: np.array):\n    # Make sure the input is a np.array\n    input_image = np.array(input_image)\n    assert type(input_image) == np.ndarray\n    \n    # Apply each function on the image\n    image_list = [input_image]\n    for fct in program:\n        # Apply the function\n        image_list = fct(image_list)\n        # Filter out empty images\n        image_list = [img for img in image_list if img.shape[0] > 0 and img.shape[1] > 0]\n        # Break if there is no data\n        if image_list == []:\n            return []\n    return image_list        ","83892fbf":"def are_two_images_equals(a, b):\n    if tuple(a.shape) == tuple(b.shape):\n        if (np.abs(b-a) < 1).all():\n            return True\n    return False\n\ndef is_solution(program, task, verbose=True): #task is actually task['train'] - this function only analyses inputs and I am dumb\n    for sample in task: # For each pair input\/output\n        i = np.array(sample['input'])\n        o = np.array(sample['output'])\n\n        # Evaluate the program on the input\n        images = evaluate(program, i)\n        if len(images) < 1:\n            return False\n        \n        # The solution should be in the 3 first outputs\n        images = images[:3]\n        \n        # Check if the output is in the 3 images produced\n        is_program_of_for_sample = any([are_two_images_equals(x, o) for x in images])\n        if not is_program_of_for_sample:\n            return False\n    \n    return True","9464a885":"def width_fitness(predicted, expected_output):\n    \"\"\" How close the predicted image is to have the right width. Less is better.\"\"\"\n    return np.abs(predicted.shape[0] - expected_output.shape[0])\n\ndef height_fitness(predicted, expected_output):\n    \"\"\" How close the predicted image is to have the right height. Less is better.\"\"\"\n    return np.abs(predicted.shape[1] - expected_output.shape[1])\n\ndef activated_pixels_fitness(p, e):\n    \"\"\" How close the predicted image to have the right pixels. Less is better.\"\"\"\n    shape = (max(p.shape[0], e.shape[0]), max(p.shape[1], e.shape[1]))\n    diff = np.zeros(shape, dtype=int)\n    diff[0:p.shape[0], 0:p.shape[1]] = (p > 0).astype(int)\n    diff[0:e.shape[0], 0:e.shape[1]] -= (e > 0).astype(int)\n    \n    return (diff != 0).sum()\n\ndef colors_fitness(p, e):\n    p_colors = np.unique(p)\n    e_colors = np.unique(e)\n    \n    nb_inter = len(np.intersect1d(p_colors, e_colors))\n\n    return (len(p_colors) - nb_inter) + (len(e_colors) - nb_inter)\n\nfitness_functions = [colors_fitness, activated_pixels_fitness, height_fitness, width_fitness]\n","e406927b":"def product_less(a, b):\n    \"\"\" Return True iff the two tuples a and b respect a<b for the partial order. \"\"\"\n    a = np.array(a)\n    b = np.array(b)\n    return (np.array(a) < np.array(b)).all()    ","c0d00530":"# ([[np.array] -> [np.array]], Taks) -> (int, int, ..., int)\ndef evaluate_fitness(program, task):\n    \"\"\" Take a program and a task, and return its fitness score as a tuple. \"\"\"\n    score = np.zeros((len(fitness_functions)))\n    \n    # For each sample\n    for sample in task:\n        i = np.array(sample['input'])\n        o = np.array(sample['output'])\n        \n        # For each fitness function\n        for index, fitness_function in enumerate(fitness_functions):\n            images = evaluate(program, i)\n            if images == []: # Penalize no prediction!\n                score[index] += 500\n            else: # Take only the score of the first output\n                score[index] = fitness_function(images[0], o)\n    return tuple(score)","96874188":"def build_candidates(allowed_nodes=[identity], best_candidates=[], nb_candidates=200):\n    \"\"\"\n    Create a poll of fresh candidates using the `allowed_nodes`.\n    \n    The pool contain a mix of new single instructions programs\n    and mutations of the best candidates.\n    \"\"\"\n    new_candidates = []\n    length_limit = 4 # Maximal length of a program\n    \n    def random_node():\n        return random.choice(allowed_nodes)\n    \n    # Until we have enougth new candidates\n    while(len(new_candidates) < nb_candidates):\n        # Add 10 new programs\n        for i in range(5):\n            new_candidates += [[random_node()]]\n        \n        # Create new programs based on each best candidate\n        for best_program in best_candidates:\n            # Add one op on its right but limit the length of the program\n            if len(best_program) < length_limit - 1:\n                new_candidates += [[random_node()] + best_program]\n            # Add one op on its left but limit the length of the program\n            if len(best_program) < length_limit - 1:\n                new_candidates += [best_program + [random_node()]]\n            # Mutate one instruction of the existing program\n            new_candidates += [list(best_program)]\n            new_candidates[-1][random.randrange(0, len(best_program))] = random_node()\n   \n    # Truncate if we have too many candidates\n    np.random.shuffle(new_candidates)\n    return new_candidates[:nb_candidates]\n\n# Test the function by building some candidates\n#len(build_candidates(allowed_nodes=[identity], best_candidates=[[identity]], nb_candidates=42))","00b57c51":"def remove_functions(all_functions, to_remove):\n    reduced_functions=[]        \n    for function in all_functions:\n        fname=str(function.__name__)\n        if '_lifted' in fname:\n            fname=fname[:-7]\n        if fname not in to_remove:\n            reduced_functions.append(function)\n    return reduced_functions\n    \n\ndef color_change_heuristics(all_functions_list, task):\n    \"\"\"When a color is not present on the avaliable input\/output grids, do not consider functions that change colors from\/to that color\"\"\"\n    outputs=np.zeros(0)\n    for test_or_train in [task['train'], task['test']]:\n        for x in test_or_train:\n            if len(x)==2:\n                outputs=np.append(outputs,x['output'])      \n    to_remove=[]\n    for color in range (0,10):\n        if color not in np.unique(outputs):\n            to_remove+=['to_c'+str(color)]\n            other_colors= list(range(0,10))\n            other_colors.remove(color)\n            for other_color in other_colors:\n                to_remove+=['c'+str(other_color)+'_to_c'+str(color)]\n                \n    inputs=np.zeros(0)\n    for test_or_train in [task['train'], task['test']]:\n        for x in test_or_train:\n            inputs=np.append(inputs,x['input'])\n    for color in range (1,10):\n        if color not in np.unique(inputs):\n            other_colors= list(range(1,10))\n            other_colors.remove(color)\n            for other_color in other_colors:\n                to_remove+=['c'+str(color)+'_to_c'+str(other_color)]\n                                    \n    return remove_functions(all_functions, to_remove)\n\ndef initial_color_heuristic(all_functions_list, task):\n    \"\"\"When a color is not present either in the output or input grids, do not consider functions refer to those colors\"\"\"\n    present_colors=np.zeros(0)\n    for test_or_train in [task['train'], task['test']]:\n        for x in test_or_train:\n            present_colors=np.append(present_colors,x['input'])\n            if len(x)==2:\n                present_colors=np.append(present_colors,x['output'])\n    colors_not_present=[]\n    for colorcode in range(0,10):\n        if colorcode not in np.unique(present_colors):\n            colors_not_present=np.append(colors_not_present, colorcode)\n    \n    to_remove=[]\n    for colorcode in colors_not_present:\n        for function in all_functions_list:\n            if 'c'+str(int(colorcode)) in function.__name__:\n                fname=function.__name__\n                if '_lifted' in fname:\n                    fname=fname[:-7]\n                to_remove+=[fname]\n    \n    return remove_functions(all_functions, to_remove)            \n\ndef heuristics(all_functions_list, task):\n    reduced_functions=initial_color_heuristic(all_functions_list, task)\n    reduced_functions=color_change_heuristics(reduced_functions, task)\n    return reduced_functions","c89c1ac2":"def build_model(task, candidates_nodes=all_functions, max_iterations=20, verbose=True):\n    \n    if verbose:\n        print(\"Candidates nodes are:\", [program_desc([n]) for n in candidates_nodes])\n        print()\n\n    best_candidates = {} # A dictionary of {score:candidate}\n    for i in range(max_iterations):\n        if verbose:\n            print(\"Iteration \", i+1)\n            print(\"-\" * 10)\n        \n        # Create a list of candidates\n        candidates = build_candidates(candidates_nodes, best_candidates.values())\n        # Keep candidates with best fitness.\n        # They will be stored in the `best_candidates` dictionary\n        # where the key of each program is its fitness score.\n        for candidate in candidates:\n            score = evaluate_fitness(candidate, task)\n            is_uncomparable = True # True if we cannot compare the two candidate's scores\n            \n            # Compare the new candidate to the existing best candidates\n            best_candidates_items = list(best_candidates.items())\n            for best_score, best_candidate in best_candidates_items:\n                if product_less(score, best_score):\n                    # Remove previous best candidate and add the new one\n                    del best_candidates[best_score]\n                    best_candidates[score] = candidate\n                    is_uncomparable = False # The candidates are comparable\n                if product_less(best_score, score) or best_score == score:\n                    is_uncomparable = False # The candidates are comparable\n            if is_uncomparable: # The two candidates are uncomparable\n                best_candidates[score] = candidate\n\n        # For each best candidate, we look if we have an answer\n        \n        \n        for program in best_candidates.values():\n            if is_solution(program, task):\n                return program\n          \n            \n            \n        # Give some informations by selecting a random candidate\n        if verbose:\n            print(\"Best candidates lenght:\", len(best_candidates))\n            random_candidate_score = random.choice(list(best_candidates.keys()))\n            print(\"Random candidate score:\", random_candidate_score)\n            print(\"Random candidate implementation:\", program_desc(best_candidates[random_candidate_score]))\n    \n    #print(best_candidates[0])\n    \n    #for program in best_candidates.values(): #what to do if program isn't found? - and does it really matter? -atm I'm not even trying\n    #    return program\n          \n    return None","a3f9d15a":"task_file = str(training_path \/ training_tasks[1])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\n#plot_task(task)\ncandidate_functions=heuristics(all_functions, task)\nprogram = build_model(task['train'], candidate_functions, max_iterations=20, verbose=False)\n#print(numtask)\nif program is None:\n    print(\"No program was found\")\nelse:\n    print(f'Found program: {program_desc(program)}')","b8148981":"task_file = str(training_path \/ training_tasks[119])\nwith open(task_file, 'r') as f:\n    task = json.load(f)\nplot_task(task)\nprogram=[]\nfor f in all_functions:\n    if 'hollow_all' in f.__name__ or 'fill_enclosed_area_c8' in f.__name__:\n        program.append(f)\nprogram_desc(program)\nplot_output(task, program)","1794022c":"# Solve the task\n\nWe now apply our knowledge to solving the first task presented. We will run our algorithm and see how long it takes to generate a program that can solve the task. You may run the folowing cell multiple times to see the variance into how long the algorithm takes to find the answer.","1e11b5e5":"submission = pd.read_csv(data_path \/ 'sample_submission.csv', index_col='output_id')\nused_k = len(submission)\n\n\nfor output_id in tqdm(submission.index[:used_k], total = len(submission.index[:used_k])):\n#for output_id in ['195ba7dc_0', '31d5ba1a_1', '34b99a2b_0']:\n    \n    task_id = output_id.split('_')[0]\n    pair_id = int(output_id.split('_')[1])\n    \n    fileName = str(test_path \/ str(task_id + '.json'))\n    with open(fileName, 'r') as f:\n        task = json.load(f)\n        \n    #plot_task(task, has_testoutput=False)\n    \n    candidate_functions=heuristics(all_functions, task)\n    program = build_model(task['train'], candidate_functions, max_iterations=25, verbose=False)\n    if not program:\n        data = task['test'][pair_id]['input'] # test pair input\n        # for the first guess, predict that output is unchanged\n        pred_1 = flattener(data)\n        # for the second guess, change all 0s to 5s\n        data = [[5 if i==0 else i for i in j] for j in data]\n        pred_2 = flattener(data)\n        # for the last gues, change everything to 0\n        data = [[0 for i in j] for j in data]\n        pred_3 = flattener(data)\n        # concatenate and add to the submission output\n        prediction=pred_1 + ' ' + pred_2 + ' ' + pred_3 + ' ' \n    #print(program_desc(program))\n    else:\n        #plot_output(task, program)\n        prediction=''\n        for sample in task['test']: # For each pair input\/output\n            i = np.array(sample['input'])\n            # Evaluate the program on the input\n            images = evaluate(program, i)  \n            # The solution should be in the 3 first outputs\n            for image in images[:3]:\n                if prediction == '':\n                    prediction = flattener(image.tolist())\n                else:\n                    prediction+=' ' + flattener(image.tolist())\n\n    print(prediction)\n    # concatenate and add to the submission output\n    submission.loc[output_id, 'output'] = prediction\n    ","3e0f589a":"## Is a program solution ?\n\nFirst, we need a way to know if a program is a solution of the given examples of a task.","73f587d0":"The fitness score (less is better) of our function will be a 4-dimensional tuple containing the result of each of the fitness functions.\n\nWe want to be able to compare two score. Unfortunately, the *lixocographical order* is not adapted, as there is no reason than having a small `width score` is better than having a small `height score`. We are going to define a partial order that give the same weight to any fitness function.\n\nWhen we compare two tuple with this partial order, `(3, 2, 4, 0) < (3, 2, 5, 0)` and `(3, 2, 4, 0) < (4, 2, 4, 0)`. But there is no way to compare `(3, 2, 5, 0)` and `(4, 2, 4, 0)`. We say this two values are *incomparable*. If two score are incomparable, it means that we cannot say that one program is better than the over.","a694296b":"We now write a function that evaluate the fitness of a program on a task.","28be944a":"no_lifting_needed=[tail, init, union, intersect, sortByColor, sortByWeight, reverse, sortByNumberOfColors, xor]\n\n                 #paint_all_most_common_color\n#does not include extrapolate - it blows up memory, for some reason\n\nall_functions=no_lifting_needed+lifted_functions","89e09fd9":"## Asexual reproduction\n\nNow that we can compare two programs we need a way to generate some of them. We will generate them randomly from a pool of best candidate.\n\nFor the initial run, and also to be able to evaluate fresh candidates, we will also allow spontaneous generation of new born one instruction programs.","0c9550c6":"#get list of unlifted functions\nunlifted_functions = []\nfor key, value in locals().items():\n    if callable(value) and value.__module__ == __name__:\n        if '_unlifted' in key:\n            unlifted_functions.append(value)","358717f5":"# Submission","25c99e8d":"# Program evaluation\n\n\nWe define our building blocks for programs (the functions in our DSL). We will define a program as a list of functions from our DSL ; `program: [[np.array] -> [np.array]]`. The instructions in our programs will be executed *from left to right*. This mean that if we want to first `splitByColor` and then compute the `negative` of the image, we need to write `[splitByColor, negative]` in this order.\n\nWe want to run and evaluate a such program on a pictures and then recover the result. This logic is realised by the `evaluate` function.","b1188369":"def colorchange(pixmap, c_in, c_out):\n    pixmap[pixmap==c_in]=c_out\n    return [pixmap]\n\ndef c1_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 1, 0)\ndef c1_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 1, 2)\ndef c1_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 1, 3)\ndef c1_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 1, 4)\ndef c1_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 1, 5)\ndef c1_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 1, 6)\ndef c1_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 1, 7)\ndef c1_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 1, 8)\ndef c1_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 1, 9)\n\ndef c2_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 2, 0)\ndef c2_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 2, 1)\ndef c2_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 2, 3)\ndef c2_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 2, 4)\ndef c2_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 2, 5)\ndef c2_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 2, 6)\ndef c2_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 2, 7)\ndef c2_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 2, 8)\ndef c2_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 2, 9)\n\ndef c3_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 3, 0)\ndef c3_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 3, 1)\ndef c3_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 3, 2)\ndef c3_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 3, 4)\ndef c3_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 3, 5)\ndef c3_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 3, 6)\ndef c3_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 3, 7)\ndef c3_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 3, 8)\ndef c3_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 3, 9)\n\ndef c4_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 4, 0)\ndef c4_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 4, 1)\ndef c4_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 4, 2)\ndef c4_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 4, 3)\ndef c4_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 4, 5)\ndef c4_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 4, 6)\ndef c4_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 4, 7)\ndef c4_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 4, 8)\ndef c4_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 4, 9)\n\ndef c5_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 5, 0)\ndef c5_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 5, 1)\ndef c5_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 5, 2)\ndef c5_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 5, 3)\ndef c5_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 5, 4)\ndef c5_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 5, 6)\ndef c5_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 5, 7)\ndef c5_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 5, 8)\ndef c5_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 5, 9)\n\ndef c6_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 6, 0)\ndef c6_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 6, 1)\ndef c6_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 6, 2)\ndef c6_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 6, 3)\ndef c6_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 6, 4)\ndef c6_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 6, 5)\ndef c6_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 6, 7)\ndef c6_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 6, 8)\ndef c6_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 6, 9)\n\ndef c7_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 7, 0)\ndef c7_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 7, 1)\ndef c7_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 7, 2)\ndef c7_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 7, 3)\ndef c7_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 7, 4)\ndef c7_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 7, 5)\ndef c7_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 7, 6)\ndef c7_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 7, 8)\ndef c7_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 7, 9)\n\ndef c8_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 8, 0)\ndef c8_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 8, 1)\ndef c8_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 8, 2)\ndef c8_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 8, 3)\ndef c8_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 8, 4)\ndef c8_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 8, 5)\ndef c8_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 8, 6)\ndef c8_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 8, 7)\ndef c8_to_c9_unlifted(pixmap):\n    return colorchange(pixmap, 8, 9)\n\ndef c9_to_c0_unlifted(pixmap):\n    return colorchange(pixmap, 9, 0)\ndef c9_to_c1_unlifted(pixmap):\n    return colorchange(pixmap, 9, 1)\ndef c9_to_c2_unlifted(pixmap):\n    return colorchange(pixmap, 9, 2)\ndef c9_to_c3_unlifted(pixmap):\n    return colorchange(pixmap, 9, 3)\ndef c9_to_c4_unlifted(pixmap):\n    return colorchange(pixmap, 9, 4)\ndef c9_to_c5_unlifted(pixmap):\n    return colorchange(pixmap, 9, 5)\ndef c9_to_c6_unlifted(pixmap):\n    return colorchange(pixmap, 9, 6)\ndef c9_to_c7_unlifted(pixmap):\n    return colorchange(pixmap, 9, 7)\ndef c9_to_c8_unlifted(pixmap):\n    return colorchange(pixmap, 9, 8)\n\n\n\n\n# np.array -> [np.array]\ndef to_c0_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=0\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c1_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=1\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c2_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=2\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c3_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=3\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c4_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=4\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c5_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=5\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c6_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=6\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c7_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=7\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c8_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=8\n    return [pixmap]\n\n# np.array -> [np.array]\ndef to_c9_unlifted(pixmap):\n    \"\"\" Paints all elements of array in this color \"\"\"\n    pixmap[pixmap>0]=9\n    return [pixmap]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \ndef unite_color_horizontally(pixmap, color):   \n    for row_index, row in enumerate(pixmap):\n        row_nums=[]\n        for index, value in np.ndenumerate(row):\n            if value==color:\n                row_nums.append(index)\n        if len(row_nums)>1:\n            for index, value in np.ndenumerate(row):\n                if (index >= min(row_nums)) & (index <= max(row_nums)) & (value == 0):\n                    pixmap[row_index, index]=color\n    return [pixmap]\n\ndef unite_c1_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 1)\ndef unite_c2_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 2)\ndef unite_c3_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 3)\ndef unite_c4_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 4)\ndef unite_c5_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 5)\ndef unite_c6_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 6)\ndef unite_c7_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 7)\ndef unite_c8_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 8)\ndef unite_c9_horizontally_unlifted(pixmap):\n    return unite_color_horizontally(pixmap, 9)\n\ndef unite_color_vertically(pixmap, color):\n    transp=pixmap.T\n    for col_index, col in enumerate(transp):\n        col_nums=[]\n        for index, value in np.ndenumerate(col):\n            if value==color:\n                col_nums.append(index)                \n        if len(col_nums)>1:\n            for index, value in np.ndenumerate(col):\n                if (index >= min(col_nums)) & (index <=max(col_nums)) & (value == 0):\n                    transp[col_index, index]=color\n    return [transp.T]\n\ndef unite_c1_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 1)\ndef unite_c2_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 2)\ndef unite_c3_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 3)\ndef unite_c4_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 4)\ndef unite_c5_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 5)\ndef unite_c6_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 6)\ndef unite_c7_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 7)\ndef unite_c8_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 8)\ndef unite_c9_vertically_unlifted(pixmap):\n    return unite_color_vertically(pixmap, 9)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n ","d3b8f5af":"for numtask in [30 ,48 ,52 ,56 ,64 ,71 ,82 ,112,139,141,163,171,173,209,222, 240, 248, 258, 260, 275, 299, 306, 308, 310, 371, 379, 383]:\n    task_file = str(training_path \/ training_tasks[numtask])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    #plot_task(task)\n    candidate_functions=heuristics(all_functions, task)\n    print(len(candidate_functions))\n    program = build_model(task['train'], candidate_functions, max_iterations=20, verbose=False)\n    #print(numtask)\n    if program is None:\n        print(numtask, \" - No program was found\")\n    else:\n        print(numtask, \" - Found program:\", program_desc(program))","5ba4e162":"# Domain Specific Language (DSL)\n\nWe will build a domain specific language specialized on processing list of images. To allow easy chaining of keyword from this language together, each *function* provided by this language will be take one or more images and transform it to none, one or more. The final result of our program will then be a list of images.\n\nThe DSL is so constituted by a collection of functions of type `np.array -> [np.array]` and `[np.array] -> [np.array]`.\n\nThe first kind of function take an image, and produce a list of images (for example, the image split by different colors). The second type of function take a list of images and produce a new list (for exemple, intersect).\n[](http:\/\/)","fdeb41fe":"simple genetic algorithm (based on a multiobjective and elitist strategy)","5ea154d4":"def flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","5c1c0740":"## Find a program given a task\n\nThis is the last step to our genetic algorithm. We have all the building blocks:\n * Generating both new programs and mutation of existing solutions\n * Evaluating the fitness score of a program\n * Comparing two programs to know if one perform better than the other\n * Detecting when a solution was found\n \nWe can now write a function that will keep generating programs with increasing complexity until a solution is found.\n\nUsing our partial order, we are going to keep the best candidates. Because the order is partial,\nthere is no bound on how many uncomparables candidates we may have at a given iteration.","311d3c22":"## Composition of functions\n\nIt is important to make sure we can chain both functions. To compose two functions `f` and `g` of type `[np.array] -> [np.array]` ; We symply call `g(f([input_image]))`.\n\n\nBut for each function of the type `np.array -> [np.array]` some work is required. We need to generated a *lifted version* version of them. A function `f: np.array -> [np.array]` can be turned into a function of type `[np.array] -> [np.array]` by applying `f` on each image of the input list and concatenating the results.\n\n---\nIf you want to know more about the `lift` concept, have a look to the concept of [*monades*](https:\/\/en.wikipedia.org\/wiki\/Monad_%28functional_programming%29). We are indeed using the *list monade*.","f44700ba":"## DSL Implementation\n\nWe start with the functions that take *one image* and produce an *a list of images*.](http:\/\/)","39db454a":"   \ncropToContent = lift(cropToContent_unlifted)\ngroupByColor = lift(groupByColor_unlifted)\nsplitH = lift(splitH_unlifted)\nnegative = lift(negative_unlifted)\n\ninitial_functions=[tail, init, union, intersect, sortByColor, sortByWeight, reverse,\\\n                   cropToContent, groupByColor, splitH, negative]\n#--\nto_c0=lift(to_c0_unlifted)\nto_c1=lift(to_c1_unlifted)\nto_c2=lift(to_c2_unlifted)\nto_c3=lift(to_c3_unlifted)\nto_c4=lift(to_c4_unlifted)\nto_c5=lift(to_c5_unlifted)\nto_c6=lift(to_c6_unlifted)\nto_c7=lift(to_c7_unlifted)\nto_c8=lift(to_c8_unlifted)\nto_c9=lift(to_c9_unlifted)\n\nsingle_color_functions=[to_c1,to_c2, to_c3, to_c4, to_c5, to_c6, to_c7, to_c8, to_c9] \n\n#--\nc1_to_c0=lift(c1_to_c0_unlifted)\nc1_to_c2=lift(c1_to_c2_unlifted)\nc1_to_c3=lift(c1_to_c3_unlifted)\nc1_to_c4=lift(c1_to_c4_unlifted)\nc1_to_c5=lift(c1_to_c5_unlifted)\nc1_to_c6=lift(c1_to_c6_unlifted)\nc1_to_c7=lift(c1_to_c7_unlifted)\nc1_to_c8=lift(c1_to_c8_unlifted)\nc1_to_c9=lift(c1_to_c9_unlifted)\nc2_to_c0=lift(c2_to_c0_unlifted)\nc2_to_c1=lift(c2_to_c1_unlifted)\nc2_to_c3=lift(c2_to_c3_unlifted)\nc2_to_c4=lift(c2_to_c4_unlifted)\nc2_to_c5=lift(c2_to_c5_unlifted)\nc2_to_c6=lift(c2_to_c6_unlifted)\nc2_to_c7=lift(c2_to_c7_unlifted)\nc2_to_c8=lift(c2_to_c8_unlifted)\nc2_to_c9=lift(c2_to_c9_unlifted)\nc3_to_c0=lift(c3_to_c0_unlifted)\nc3_to_c1=lift(c3_to_c1_unlifted)\nc3_to_c2=lift(c3_to_c2_unlifted)\nc3_to_c4=lift(c3_to_c4_unlifted)\nc3_to_c5=lift(c3_to_c5_unlifted)\nc3_to_c6=lift(c3_to_c6_unlifted)\nc3_to_c7=lift(c3_to_c7_unlifted)\nc3_to_c8=lift(c3_to_c8_unlifted)\nc3_to_c9=lift(c3_to_c9_unlifted)\nc4_to_c0=lift(c4_to_c0_unlifted)\nc4_to_c1=lift(c4_to_c1_unlifted)\nc4_to_c2=lift(c4_to_c2_unlifted)\nc4_to_c3=lift(c4_to_c3_unlifted)\nc4_to_c5=lift(c4_to_c5_unlifted)\nc4_to_c6=lift(c4_to_c6_unlifted)\nc4_to_c7=lift(c4_to_c7_unlifted)\nc4_to_c8=lift(c4_to_c8_unlifted)\nc4_to_c9=lift(c4_to_c9_unlifted)\nc5_to_c0=lift(c5_to_c0_unlifted)\nc5_to_c1=lift(c5_to_c1_unlifted)\nc5_to_c2=lift(c5_to_c2_unlifted)\nc5_to_c3=lift(c5_to_c3_unlifted)\nc5_to_c4=lift(c5_to_c4_unlifted)\nc5_to_c6=lift(c5_to_c6_unlifted)\nc5_to_c7=lift(c5_to_c7_unlifted)\nc5_to_c8=lift(c5_to_c8_unlifted)\nc5_to_c9=lift(c5_to_c9_unlifted)\nc6_to_c0=lift(c6_to_c0_unlifted)\nc6_to_c1=lift(c6_to_c1_unlifted)\nc6_to_c2=lift(c6_to_c2_unlifted)\nc6_to_c3=lift(c6_to_c3_unlifted)\nc6_to_c4=lift(c6_to_c4_unlifted)\nc6_to_c5=lift(c6_to_c5_unlifted)\nc6_to_c7=lift(c6_to_c7_unlifted)\nc6_to_c8=lift(c6_to_c8_unlifted)\nc6_to_c9=lift(c6_to_c9_unlifted)\nc7_to_c0=lift(c7_to_c0_unlifted)\nc7_to_c1=lift(c7_to_c1_unlifted)\nc7_to_c2=lift(c7_to_c2_unlifted)\nc7_to_c3=lift(c7_to_c3_unlifted)\nc7_to_c4=lift(c7_to_c4_unlifted)\nc7_to_c5=lift(c7_to_c5_unlifted)\nc7_to_c6=lift(c7_to_c6_unlifted)\nc7_to_c8=lift(c7_to_c8_unlifted)\nc7_to_c9=lift(c7_to_c9_unlifted)\nc1_to_c0=lift(c1_to_c0_unlifted)\nc8_to_c0=lift(c8_to_c0_unlifted)\nc8_to_c1=lift(c8_to_c1_unlifted)\nc8_to_c2=lift(c8_to_c2_unlifted)\nc8_to_c3=lift(c8_to_c3_unlifted)\nc8_to_c4=lift(c8_to_c4_unlifted)\nc8_to_c5=lift(c8_to_c5_unlifted)\nc8_to_c6=lift(c8_to_c6_unlifted)\nc8_to_c7=lift(c8_to_c7_unlifted)\nc8_to_c9=lift(c8_to_c9_unlifted)\nc9_to_c0=lift(c9_to_c0_unlifted)\nc9_to_c1=lift(c9_to_c1_unlifted)\nc9_to_c2=lift(c9_to_c2_unlifted)\nc9_to_c3=lift(c9_to_c3_unlifted)\nc9_to_c4=lift(c9_to_c4_unlifted)\nc9_to_c5=lift(c9_to_c5_unlifted)\nc9_to_c6=lift(c9_to_c6_unlifted)\nc9_to_c7=lift(c9_to_c7_unlifted)\nc9_to_c8=lift(c9_to_c8_unlifted)\n\ncolor_switch_functions = [c1_to_c0, c1_to_c2, c1_to_c3, c1_to_c4, c1_to_c5, c1_to_c6,\\\n                          c1_to_c7, c1_to_c8, c1_to_c9, c2_to_c0, c2_to_c1, c2_to_c3,\\\n                          c2_to_c4, c2_to_c5, c2_to_c6, c2_to_c7, c2_to_c8,\\\n                          c2_to_c9, c3_to_c0, c3_to_c1, c3_to_c2, c3_to_c4, c3_to_c5,\\\n                          c3_to_c6, c3_to_c7, c3_to_c8, c3_to_c9, c4_to_c0, c4_to_c1,\\\n                          c4_to_c2, c4_to_c3, c4_to_c5, c4_to_c6, c4_to_c7,\\\n                          c4_to_c8, c4_to_c9, c5_to_c0, c5_to_c1, c5_to_c2, c5_to_c3,\\\n                          c5_to_c4, c5_to_c6, c5_to_c7, c5_to_c8, c5_to_c9, c6_to_c0,\\\n                          c6_to_c1, c6_to_c2, c6_to_c3, c6_to_c4, c6_to_c5,\\\n                          c6_to_c7, c6_to_c8, c6_to_c9, c7_to_c0, c7_to_c1, c7_to_c2,\\\n                          c7_to_c3, c7_to_c4, c7_to_c5, c7_to_c6, c7_to_c8,\\\n                          c7_to_c9, c8_to_c0, c8_to_c1, c8_to_c2, c8_to_c3, c8_to_c4,\\\n                          c8_to_c5, c8_to_c6, c8_to_c7, c8_to_c9, c9_to_c0, c9_to_c1,\\\n                          c9_to_c2, c9_to_c3, c9_to_c4, c9_to_c5, c9_to_c6,\\\n                          c9_to_c7, c9_to_c8]\n\n#--\nunite_c1_horizontally=lift(unite_c1_horizontally_unlifted)\nunite_c2_horizontally=lift(unite_c2_horizontally_unlifted)\nunite_c3_horizontally=lift(unite_c3_horizontally_unlifted)\nunite_c4_horizontally=lift(unite_c4_horizontally_unlifted)\nunite_c5_horizontally=lift(unite_c5_horizontally_unlifted)\nunite_c6_horizontally=lift(unite_c6_horizontally_unlifted)\nunite_c7_horizontally=lift(unite_c7_horizontally_unlifted)\nunite_c8_horizontally=lift(unite_c8_horizontally_unlifted)\nunite_c9_horizontally=lift(unite_c9_horizontally_unlifted)\n\nunite_c1_vertically=lift(unite_c1_vertically_unlifted)\nunite_c2_vertically=lift(unite_c2_vertically_unlifted)\nunite_c3_vertically=lift(unite_c3_vertically_unlifted)\nunite_c4_vertically=lift(unite_c4_vertically_unlifted)\nunite_c5_vertically=lift(unite_c5_vertically_unlifted)\nunite_c6_vertically=lift(unite_c6_vertically_unlifted)\nunite_c7_vertically=lift(unite_c7_vertically_unlifted)\nunite_c8_vertically=lift(unite_c8_vertically_unlifted)\nunite_c9_vertically=lift(unite_c9_vertically_unlifted)\n\nunite_colors_functions=[unite_c1_horizontally, unite_c2_horizontally, unite_c3_horizontally,\\\n                        unite_c4_horizontally, unite_c5_horizontally, unite_c6_horizontally,\\\n                        unite_c7_horizontally, unite_c8_horizontally, unite_c9_horizontally,\\\n                        unite_c1_vertically, unite_c2_vertically, unite_c3_vertically,\\\n                        unite_c4_vertically, unite_c5_vertically, unite_c6_vertically,\\\n                        unite_c7_vertically, unite_c8_vertically, unite_c9_vertically]\n\n\n#--\nadd_c1_frame_to_single_squares=lift(add_c1_frame_to_single_squares_unlifted)\nadd_c2_frame_to_single_squares=lift(add_c2_frame_to_single_squares_unlifted)\nadd_c3_frame_to_single_squares=lift(add_c3_frame_to_single_squares_unlifted)\nadd_c4_frame_to_single_squares=lift(add_c4_frame_to_single_squares_unlifted)\nadd_c5_frame_to_single_squares=lift(add_c5_frame_to_single_squares_unlifted)\nadd_c6_frame_to_single_squares=lift(add_c6_frame_to_single_squares_unlifted)\nadd_c7_frame_to_single_squares=lift(add_c7_frame_to_single_squares_unlifted)\nadd_c8_frame_to_single_squares=lift(add_c8_frame_to_single_squares_unlifted)\nadd_c9_frame_to_single_squares=lift(add_c9_frame_to_single_squares_unlifted)\n\nadd_frame_colors_functions= [add_c1_frame_to_single_squares, add_c2_frame_to_single_squares, add_c3_frame_to_single_squares, add_c4_frame_to_single_squares, add_c5_frame_to_single_squares, add_c6_frame_to_single_squares, add_c7_frame_to_single_squares, add_c8_frame_to_single_squares, add_c9_frame_to_single_squares]\n#--\nsplitV = lift(splitV_unlifted)\nrotate_counterclockwise=lift(rotate_counterclockwise_unlifted)\nrotate_clockwise=lift(rotate_clockwise_unlifted)\ntriplicate=lift(triplicate_unlifted)\nduplicate=lift(duplicate_unlifted)\nget_enclosed_area=lift(get_enclosed_area_unlifted)\nextrapolate=lift(extrapolate_unlifted)\nlower_elements=lift(lower_elements_unlifted)\nduplicate_horizontally=lift(duplicate_horizontally_unlifted)\nduplicate_horizontally_symmetrically=lift(duplicate_horizontally_symmetrically_unlifted)\nduplicate_vertically=lift(duplicate_vertically_unlifted)\nduplicate_vertically_symmetrically=lift(duplicate_vertically_symmetrically_unlifted)\nflip_horizontally=lift(flip_horizontally_unlifted)\nflip_vertically=lift(flip_vertically_unlifted)\nrotate_colors=lift(rotate_colors_unlifted)\npaint_all_most_common_color=lift(paint_all_most_common_color_unlifted)\n\nadded_functions=[splitV, rotate_counterclockwise, rotate_clockwise, triplicate,\\\n                 duplicate, get_enclosed_area, lower_elements, sortByNumberOfColors,\\\n                 xor, duplicate_horizontally, duplicate_horizontally_symmetrically,\\\n                 duplicate_vertically, duplicate_vertically_symmetrically,\\\n                 flip_vertically, flip_horizontally, rotate_colors]\n                 #paint_all_most_common_color\n#does not include extrapolate - it blows up memory, for some reason\nall_functions=initial_functions+single_color_functions+color_switch_functions+unite_colors_functions+add_frame_colors_functions+added_functions","b369ad3e":"We now write functions that take a list of images and transform it to a new list.","a771a93a":"# Program generation (Genetic Algorithm)\n\nWe now have a simple and powerful language to express various transformation on images. But someone or something still have to write the actual program that can solve a task. In this part, we will implement a naive but somewhat efficient genetic algorithm that will be able to find by itself the solution to a task.\n\nThe strategy will be as follow:\n\n* We generate random program with one node, and then run them. We keep the best solution (the *elites* of our population).\n* Starting from this best solutions, we create new program though mutation. We avaluate them again and update our collection of elite.\n* We continue doing this process again and again... until a solution is found.\n\n---\n\nSince we use multiple fitness function, our aproache can be qualified of [multi-objectives](https:\/\/en.wikipedia.org\/wiki\/Multi-objective_optimization) : we try to optimise multiple objectives at the same time.\n\nOur *elites* can be understood as an approximation of the pareto surface (collection of pareto optimal solution). In our specific case, when a solution to the task exists in our DSL, their exists a global minimum that will be smaller than any candidate. In a such case the pareto surface is reduced to a single point. Nethertheless, this is a good image to keep in mind to understand what the collection of *elites* represent.","b78937f0":"for numtask in tqdm(range(0,400)):\n    task_file = str(evaluation_path \/ evaluation_tasks[numtask])\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n    #plot_task(task)\n    candidate_functions=heuristics(all_functions, task)\n    program = build_model(task['train'], candidate_functions, max_iterations=20, verbose=False)\n    #print(numtask)\n    if program is None:\n        #print(\"No program was found\")\n        continue\n    else:\n        print(numtask, \" - Found program:\", program_desc(program))","5b56d38d":"submission.to_csv(\"submission.csv\")","ba571595":"## Fitness\n\nTo help our algorithm progress in the right direction, we need a way to give a score to an existing program. The smaller is the score of the program, the closer we are to the solution. One can think of this score as a distance of our program to the optimal solution.\n\nNotice that one can think of this program as a minimization problem (minimize `score`) or maximization problem (minimize `-score`). On machine learning it is common to minimise a distance wereas in genetic algorithm literature you can read that we maximize the fitness of an agent^1. Both convention work perfectly, but it is more convenient if we choose one and stick to it. Therefore, we will MINIMIZE the score of our programs.\n\nBecause we can't really comme up with one single good score function that would describe well the progression of the algorithm on all task of the dataset, we will evaluate how our program perform on different aspects through a collection of them.\n\n---\n\n^1: The reason you see maximization and positive score in Genetic Programming literature is that you need all your values to be positive in order to build a probability distribution over your population. Since we use an elitist algorithm instead of a sampling of the population for reproduction, we do not need this restriction.","73c160ca":"lifted_functions=lift_functions_list(unlifted_functions)","cfdd6538":"30  - Found program: cropToContent_lifted\n48  - Found program: groupByColor_lifted >> c2_to_c7_lifted >> cropToContent_lifted\n52  - Found program: lower_elements_lifted\n56  - Found program: cropToContent_lifted >> duplicate_horizontally_lifted\n64  - Found program: union >> splitV_lifted >> splitH_lifted\n71  - Found program: splitH_lifted >> to_c3_lifted >> xor\n82  - Found program: unite_c2_horizontally_lifted >> duplicate_vertically_symmetrically_lifted >> duplicate_horizontally_symmetrically_lifted\n112  - Found program: splitH_lifted >> duplicate_vertically_symmetrically_lifted\n139  - Found program: flip_vertically_lifted >> flip_horizontally_lifted\n141  - Found program: duplicate_horizontally_symmetrically_lifted >> duplicate_vertically_symmetrically_lifted\n163  - Found program: duplicate_horizontally_symmetrically_lifted\n171  - Found program: duplicate_vertically_symmetrically_lifted\n173  - Found program: c3_to_c6_lifted >> groupByColor_lifted >> cropToContent_lifted\n209  - Found program: duplicate_vertically_symmetrically_lifted\n222  - Found program: triplicate_lifted\n240  - Found program: rotate_clockwise_lifted >> flip_horizontally_lifted\n248  - Found program: duplicate_horizontally_lifted\n258  - Found program: c1_to_c0_lifted >> cropToContent_lifted\n260  - Found program: lower_elements_lifted >> c8_to_c2_lifted\n275  - Found program: c6_to_c2_lifted\n299  - Found program: groupByColor_lifted >> cropToContent_lifted\n306  - Found program: duplicate_lifted >> sortByWeight\n308  - Found program: c7_to_c5_lifted\n310  - Found program: duplicate_horizontally_symmetrically_lifted\n371  - Found program: splitH_lifted >> union\n379  - Found program: rotate_counterclockwise_lifted\n383  - Found program: cropToContent_lifted >> duplicate_lifted\n","67ac13aa":"# Conclusion\n\nThe actual search space is of size `14\u202f641 = 4**11`. This is the total number of programs that can be build under the current restrictions.\nIt is impressive that a simple algorithm as this one can find a solution so fast.\n\n\nPossible improvement\n\n* Add more fitness functions that would allow a faster convergence,\n* Keep more than one candidate per local minima found,\n* Extend the DSL to functions that allow solving more tasks,\n* Rework the dsl as an execution graph (cf: tensorflow \/ onnx neural net graphs),\n* Add speciation inspired from Neat \/ Neat-GP\n* Sample the candidate pool with probabilities according to the best candidates scores,\n* Add *sexual reproduction* to the programs, aka crossover.\n","cb7d2462":"***"}}