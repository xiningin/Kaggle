{"cell_type":{"e48e1ce0":"code","07868a82":"code","26b026cd":"code","a9a04025":"code","fa2c2bf9":"code","8a7e4d7d":"code","5f264bf3":"code","161003c8":"code","47a5b96f":"code","af8eb22f":"code","251c9923":"code","329d83eb":"code","1d4df7be":"code","60cef944":"code","a18d7ad8":"code","2f8a7d9b":"code","c1cbf29d":"code","bb4a6d45":"code","970c3801":"code","51324020":"code","c5119a0c":"code","36de9ada":"code","acd8c585":"code","c0f7741a":"code","b8b5e3fe":"code","c536a03b":"code","0ba39c43":"code","566ca63a":"code","6631e39b":"code","b93a5c88":"code","9bf3ff8e":"code","5ff55dd7":"code","ea751d78":"code","1bdd1c6d":"code","5576b9af":"code","0bc2c0a6":"code","01c8e5f5":"markdown"},"source":{"e48e1ce0":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","07868a82":"from fastai import *\nfrom fastai.vision import *\nimport numpy as np # linear algebra\nimport pandas as pd ","26b026cd":"import os\npath = '..\/input'\nprint(os.listdir(path))","a9a04025":"\nclass CustomImageList(ImageList):\n    def open(self, fn):\n        img = fn.reshape(28,28)\n        img = np.stack((img,)*3, axis=-1)\n        return Image(pil2tensor(img, dtype=np.float32))\n    \n    @classmethod\n    def from_csv_custom(cls, path:PathOrStr, csv_name:str, imgIdx:int=1, header:str='infer', **kwargs)->'ItemList': \n        df = pd.read_csv(Path(path)\/csv_name, header=header)\n        res = super().from_df(df, path=path, cols=0, **kwargs)\n        \n        res.items = df.iloc[:,imgIdx:].apply(lambda x: x.values \/ 255.0, axis=1).values\n        \n        return res\n","fa2c2bf9":"test = CustomImageList.from_csv_custom(path=path, csv_name='test.csv', imgIdx=0)","8a7e4d7d":"    tfms = get_transforms(do_flip=False)\n    data = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                .split_by_rand_pct(.2)\n                .label_from_df(cols='label')\n                .add_test(test, label=0)\n                 #src.transform(tfms, size=256)\n                .transform(tfms,size=28)\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))\n    data.show_batch(rows=3, figsize=(5,5))","5f264bf3":"#learn = cnn_learner(data, models.resnet34, metrics=accuracy, model_dir='\/kaggle\/working\/models')\nlearn = cnn_learner(data, models.resnet50, metrics=accuracy, model_dir='\/kaggle\/working\/models')","161003c8":"data.show_batch(rows=3, figsize=(5,5))\n","47a5b96f":"learn.fit_one_cycle(4)","af8eb22f":"classes = [10,14,18,22,25,28]","251c9923":"for c in classes:\n    tfms = get_transforms(do_flip=False)\n    data = (CustomImageList.from_csv_custom(path=path, csv_name='train.csv', imgIdx=1)\n                .split_by_rand_pct(.2)\n                .label_from_df(cols='label')\n                .add_test(test, label=0)\n                 #src.transform(tfms, size=256)\n                .transform(tfms,size=c)\n                .databunch(bs=128, num_workers=0)\n                .normalize(imagenet_stats))\n    data.show_batch(rows=3, figsize=(5,5))\n    learn.data = data\n    c\n    learn.fit_one_cycle(8)","329d83eb":"#learn.data = data","1d4df7be":"learn.save('stage-1-resnet50')","60cef944":"learn.load('stage-1-resnet50')","a18d7ad8":"learn.lr_find()\n","2f8a7d9b":"learn.recorder.plot()","c1cbf29d":"learn.unfreeze()\nlearn.fit_one_cycle(12, max_lr=slice(1e-6,5e-2))","bb4a6d45":"learn.save('stage-1-resnet50')","970c3801":"learn.load('stage-1-resnet50')\nlearn.validate()","51324020":"learn.unfreeze()\nlearn.lr_find()\n","c5119a0c":"learn.recorder.plot()","36de9ada":"learn.unfreeze()\nlearn.fit_one_cycle(4, max_lr=slice(1e-6,1e-4))","acd8c585":"learn.save('stage-1-resnet50')","c0f7741a":"learn.load('stage-1-resnet50')\nlearn.validate()","b8b5e3fe":"#learn.lr_find()","c536a03b":"#learn.recorder.plot()","0ba39c43":"#learn.lr_find()","566ca63a":"#learn.recorder.plot()","6631e39b":"#learn.unfreeze()\n#learn.fit_one_cycle(5,1e-4)","b93a5c88":"#learn.save('stage-1-resnet50')","9bf3ff8e":"#learn.load('stage-1-resnet50')\n#learn.validate()","5ff55dd7":"#learn.lr_find()","ea751d78":"#learn.recorder.plot()","1bdd1c6d":"#learn.unfreeze()\n#learn.fit_one_cycle(8, max_lr=slice(1e-5, 2.5e-4))","5576b9af":"#learn.save('stage-1-resnet50')\n#learn.load('stage-1-resnet50')\n#learn.validate()","0bc2c0a6":"# get the predictions\npredictions, *_ = learn.get_preds(DatasetType.Test)\nlabels = np.argmax(predictions, 1)\n# output to a file\nsubmission_df = pd.DataFrame({'ImageId': list(range(1,len(labels)+1)), 'Label': labels})\nsubmission_df.to_csv(f'submission.csv', index=False)","01c8e5f5":"# Training with different sizes"}}