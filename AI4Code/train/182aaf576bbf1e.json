{"cell_type":{"ca1d161e":"code","e1808651":"code","367cad3a":"code","9d5eeda4":"code","57c2409f":"code","bb8d9412":"code","ae71143e":"code","4272858c":"code","ff4479e7":"code","13a739ea":"code","631cd6fe":"code","20aa1581":"code","52acd005":"code","9c90d703":"code","9b5c9e04":"code","c0ca56d8":"code","10fefccc":"code","82435478":"code","d6a1b111":"code","6f4bec7c":"code","c11d164a":"markdown","2c41e358":"markdown","e6590d3b":"markdown","dff5bc44":"markdown","dbd39bf7":"markdown","9698a1ec":"markdown"},"source":{"ca1d161e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1808651":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","367cad3a":"from sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler,RobustScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cb","9d5eeda4":"df = pd.read_csv('..\/input\/iba-ml1-mid-project\/train.csv')\ndftest = pd.read_csv('..\/input\/iba-ml1-mid-project\/test.csv')","57c2409f":"df.head()","bb8d9412":"#Converting credit_line_utilization to float of train file\ndf['credit_line_utilization'] = (df['credit_line_utilization'].replace(',','.', regex=True)\n                        .astype(float))","ae71143e":"X1 = df[['age', 'number_dependent_family_members', 'monthly_income', 'number_of_credit_lines',\\\n        'real_estate_loans', 'ratio_debt_payment_to_income', 'credit_line_utilization',  \\\n        'number_of_previous_late_payments_up_to_59_days', 'number_of_previous_late_payments_up_to_89_days',\\\n        'number_of_previous_late_payments_90_days_or_more']]\ny = df['defaulted_on_loan']","4272858c":"#Converting credit_line_utilization of test file to float\ndftest['credit_line_utilization'] = (dftest['credit_line_utilization'].replace(',','.', regex=True)\n                        .astype(float))","ff4479e7":"#preparing test file for submission\nX_testfull = dftest[['age', 'number_dependent_family_members', 'monthly_income', 'number_of_credit_lines',\\\n        'real_estate_loans', 'ratio_debt_payment_to_income','credit_line_utilization', \\\n        'number_of_previous_late_payments_up_to_59_days', 'number_of_previous_late_payments_up_to_89_days',\\\n        'number_of_previous_late_payments_90_days_or_more']]","13a739ea":"X1_train, X1_test, y_train, y_test = train_test_split(X1,y, test_size = 0.15)","631cd6fe":"#1st model for private leaderboard results\nmodelxgbopt0152 = Pipeline(steps=[\n    ('scaler', RobustScaler()),\n    ('impute', SimpleImputer()),\n    ('classification', xgb.XGBClassifier(max_depth = 8,  n_estimators = 318,\\\n                                         learning_rate = 0.017908175298544122,\\\n                                         reg_alpha = 3.7371173636198085, \\\n                                         reg_lambda = 0.9902194985058221,\\\n                                         gamma = 3.023979501244473,\\\n                                         min_child_weight = 2, \\\n                                         colsample_bytree = 0.5159364079662955,\\\n                                         subsample = 0.8027346577264907, \\\n                                         scale_pos_weight = 1))  \n])","20aa1581":"modelxgbopt0152.fit(X1_train, y_train)","52acd005":"rocaucscorexgbopt0152 = roc_auc_score(y_test, modelxgbopt0152.predict_proba(X1_test)[:, 1])\nrocaucscorexgbopt0152","9c90d703":"rocaucscorexgbopt0152train = roc_auc_score(y_train, modelxgbopt0152.predict_proba(X1_train)[:, 1])\nrocaucscorexgbopt0152train","9b5c9e04":"submission20 = pd.DataFrame({'Id':dftest['Id'],'Predicted':modelxgbopt0152.predict_proba(X_testfull)[:, 1]})\nsubmission20.to_csv('submissionanar20.csv',index=False)","c0ca56d8":"#2nd model for private leaderboard results\nmodelxgbopt01510 = Pipeline(steps=[\n    ('scaler', RobustScaler()),\n    ('impute', SimpleImputer()),\n    ('classification', xgb.XGBClassifier(max_depth = 8,  n_estimators = 375,\\\n                                         learning_rate = 0.014347834529320648,\\\n                                         reg_alpha = 3.499373975280538, \\\n                                         reg_lambda = 0.9984391921356766,\\\n                                         gamma = 1.658097856305046,\\\n                                         min_child_weight = 1, \\\n                                         colsample_bytree = 0.5639072449604189,\\\n                                         subsample = 0.6344904061063109, \\\n                                         scale_pos_weight = 1))  \n])","10fefccc":"modelxgbopt01510.fit(X1_train, y_train)","82435478":"rocaucscorexgbopt01510 = roc_auc_score(y_test, modelxgbopt01510.predict_proba(X1_test)[:, 1])\nrocaucscorexgbopt01510","d6a1b111":"rocaucscorexgbopt01510train = roc_auc_score(y_train, modelxgbopt01510.predict_proba(X1_train)[:, 1])\nrocaucscorexgbopt01510train","6f4bec7c":"submission28 = pd.DataFrame({'Id':dftest['Id'],'Predicted':modelxgbopt01510.predict_proba(X_testfull)[:, 1]})\nsubmission28.to_csv('submissionanar28.csv',index=False)","c11d164a":"ROC_AUC for test data at the time of trial is 0.8520. (Result at the time of running may differ)  ","2c41e358":"ROC_AUC for train data above is 0.86419 (Result at the time of running may differ)  ","e6590d3b":"ROC_AUC score for train data is 0.8683 (Result at the time of running may differ)  ","dff5bc44":"ROC_AUC score for test data above is 0.8524 (Result at the time of running may differ) ","dbd39bf7":"Public submission score is 0.85491","9698a1ec":"ROC_AUC public score is 0.85424 "}}