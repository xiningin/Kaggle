{"cell_type":{"682f5444":"code","42f858c6":"code","8d6f3d4a":"code","e8be471a":"code","b7470aa0":"code","b9f15261":"code","5bef9a61":"code","47234ffa":"code","d692c7a2":"code","710ee7b9":"code","fa5260d6":"code","fbae0282":"code","06612511":"code","3bec2e2d":"code","9be1f4bc":"code","9f155e13":"code","b5e21884":"code","9efa63ac":"code","30ddd7f3":"code","3dae8bc5":"code","e55dd4ed":"code","fae48f7a":"code","c2d127fc":"code","8d02bf88":"code","db9fa395":"code","ddd33643":"code","e7951853":"code","44af5fe0":"code","519fabe3":"code","86ecc32d":"code","9f4e8d2b":"code","82df4549":"code","ff5d0abe":"code","b58f1c8c":"code","96564f1f":"code","be27ae89":"code","b4145048":"code","5da7e3c9":"code","63ef3d7e":"markdown","93f96cee":"markdown","4bda2cea":"markdown","e702bb18":"markdown","23a0dcfb":"markdown","a5801a4a":"markdown","02c91858":"markdown","f273fffc":"markdown","f82dbbf3":"markdown","9fb6777f":"markdown","927ba025":"markdown","5300a8dc":"markdown"},"source":{"682f5444":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split","42f858c6":"df = pd.read_csv('..\/input\/amazon-electronic-product-recommendation\/ratings_Electronics (1).csv', names=['userId', 'productId','rating','timestamp'])\ndf.head()","8d6f3d4a":"\ndf.info()","e8be471a":"df.shape","b7470aa0":"df.rating.describe()","b9f15261":"df.drop_duplicates(inplace=True)","5bef9a61":"df.drop(columns=[\"timestamp\"], inplace=True)","47234ffa":"# take 10 % of the data\ndf = df[:int(len(df) * .1)]\ndf.shape","d692c7a2":"# find minimum and maximum ratings\nprint('The minimum rating is: %d' %(df['rating'].min()))\nprint('The maximum rating is: %d' %(df['rating'].max()))","710ee7b9":"df.groupby('userId')['rating'].mean().sort_values(ascending=False).head(10)  ","fa5260d6":"# check the Rating distribution in the range 1-5 for the Data given \n\nwith sns.axes_style('white'):\n    g = sns.factorplot(\"rating\", data=df, aspect=2.0,kind='count')\n    g.set_ylabels(\"Total number of ratings\")","fbae0282":"print(\"Total data \")\nprint(\"*\"*50)\nprint(\"\\nTotal no of ratings :\",df.shape[0])\nprint(\"Total No of Users   :\", len(np.unique(df.userId)))\nprint(\"Total No of products  :\", len(np.unique(df.productId)))","06612511":"#Keep the users where the user has rated more than 50 \n\ncounts1 = df['userId'].value_counts()\n#print(counts1)\nData_new = df[df['userId'].isin(counts1[counts1 >= 50].index)]\n#counts1","3bec2e2d":"#highest rated products from the selected records. \n\nData_new.groupby('productId')['rating'].mean().sort_values(ascending=False) ","9be1f4bc":"#Calculate the density of the rating matrix\n\nfinal_ratings_matrix = Data_new.pivot(index = 'userId', columns ='productId', values = 'rating').fillna(0)\nprint('Shape of final_ratings_matrix: ', final_ratings_matrix.shape)\n\ngiven_num_of_ratings = np.count_nonzero(final_ratings_matrix)\nprint('given_num_of_ratings = ', given_num_of_ratings)\npossible_num_of_ratings = final_ratings_matrix.shape[0] * final_ratings_matrix.shape[1]\nprint('possible_num_of_ratings = ', possible_num_of_ratings)\ndensity = (given_num_of_ratings\/possible_num_of_ratings)\ndensity *= 100\nprint ('density: {:4.2f}%'.format(density))","9f155e13":"final_ratings_matrix.head()","b5e21884":"# Matrix with one row per 'Product' and one column per 'user' for Item-based CF\nfinal_ratings_matrix_T = final_ratings_matrix.transpose()\nfinal_ratings_matrix_T.head()","9efa63ac":"#Count of user_id for each unique product as recommendation score \nData_new_grouped = Data_new.groupby('productId').agg({'userId': 'count'}).reset_index()\nData_new_grouped.rename(columns = {'userId': 'score'},inplace=True)\nData_new_grouped.head()","30ddd7f3":"#Sort the products on recommendation score \ntrain_data_sort = Data_new_grouped.sort_values(['score', 'productId'], ascending = [0,1]) ","3dae8bc5":"#Generate a recommendation rank based upon score \ntrain_data_sort['Rank'] = train_data_sort['score'].rank(ascending=0, method='first') ","e55dd4ed":"#Get the top 5 recommendations \npopularity_recommendations = train_data_sort.head(5) \npopularity_recommendations ","fae48f7a":"# Use popularity based recommender model to make predictions\ndef recommend(user_id):     \n    user_recommendations = popularity_recommendations \n          \n    #Add user_id column for which the recommendations are being generated \n    user_recommendations['userId'] = user_id \n      \n    #Bring user_id column to the front \n    cols = user_recommendations.columns.tolist() \n    cols = cols[-1:] + cols[:-1] \n    user_recommendations = user_recommendations[cols] \n          \n    return user_recommendations ","c2d127fc":"find_recom = [15,21,53]   # This list is user choice.\nfor i in find_recom:\n    print(\"Here is the recommendation for the userId: %d\\n\" %(i))\n    print(recommend(i))    \n    print(\"\\n\") ","8d02bf88":"no_of_ratings_per_product = Data_new.groupby(by='productId')['rating'].count().sort_values(ascending=False)\n\nfig = plt.figure(figsize=plt.figaspect(.5))\nax = plt.gca()\nplt.plot(no_of_ratings_per_product.values)\nplt.title('Ratings per Product')\nplt.xlabel('Product')\nplt.ylabel('No of ratings per product')\nax.set_xticklabels([])\n\nplt.show()","db9fa395":"# Top 30 recommendations for the users\n\npopular_products = pd.DataFrame(Data_new.groupby('productId')['rating'].count())\nmost_popular = popular_products.sort_values('rating', ascending=False)\nmost_popular.head(30).plot(kind = \"bar\")\nplt.title(\"Ratings of product Id\")\nplt.show()","ddd33643":"from surprise import KNNWithMeans\nfrom surprise import Dataset\nfrom surprise import accuracy\nfrom surprise import Reader\nimport os\nfrom surprise.model_selection import train_test_split\nfrom collections import defaultdict","e7951853":"#Reading the dataset\nreader = Reader(rating_scale=(1, 5))\ndata1 = Dataset.load_from_df(Data_new,reader)\ndata1","44af5fe0":"#Splitting the dataset\ntrainset, testset = train_test_split(data1, test_size=0.3,random_state=123)","519fabe3":"trainset.ur","86ecc32d":"# Use user_based true\/false to switch between user-based or item-based collaborative filtering\nalgo = KNNWithMeans(k=50, sim_options={'name': 'pearson_baseline', 'user_based': True})\nalgo.fit(trainset)","9f4e8d2b":"# run the trained model against the testset\ntest_pred = algo.test(testset)","82df4549":"test_pred","ff5d0abe":"def get_top_n(predictions, n=5):\n    # First map the predictions to each user.\n    top_n = defaultdict(list)\n    for uid, iid, true_r, est, _ in predictions:\n        top_n[uid].append((iid, est))\n\n    # Then sort the predictions for each user and retrieve the k highest ones.\n    for uid, user_ratings in top_n.items():\n        user_ratings.sort(key=lambda x: x[1], reverse=True)\n        top_n[uid] = user_ratings[:n]\n\n    return top_n","b58f1c8c":"top_n = get_top_n(test_pred, n=5)\ntop_n","96564f1f":"# Print the recommended items for each user\nfor uid, user_ratings in top_n.items():\n    print(uid, [iid for (iid, _) in user_ratings])","be27ae89":"uid = \"A231WM2Z2JL0U3\"  # raw user id (as in the ratings file). They are **strings**!\niid = \"B00004RC2D\"  # raw item id (as in the ratings file). They are **strings**!\n\n# get a prediction for specific users and items.\npred = algo.predict(uid, iid, r_ui=0.0, verbose=True)","b4145048":"pred = pd.DataFrame(test_pred)\npred[pred['uid'] == 'A231WM2Z2JL0U3'][['iid', 'r_ui','est']].sort_values(by = 'est',ascending = False).head(10)","5da7e3c9":"# get RMSE\nprint(\"User-based Model : Test Set\")\naccuracy.rmse(test_pred, verbose=True)","63ef3d7e":"<center style=\"background-color:tomato\"> Load libraries <\/center>","93f96cee":"- Model-based Collaborative Filtering is a personalised recommender system, the recommendations are based on the past behavior of the user and it is not dependent on any additional information.\n\n- The Popularity-based recommender system is non-personalised and the recommendations are based on frequecy counts, which may be not suitable to the user.The Popularity based model has recommended the same set of 5 products to both but Collaborative Filtering based model has recommended entire different list based on the user past purchase history\n\n- KNN with means recommender system if we have got user rating avaialable and popularity based in case of cold start","4bda2cea":"<center style=\"background-color:tomato\">  3. Build Popularity Recommender model. <\/center>","e702bb18":"<img src=\"https:\/\/wallpaperaccess.com\/full\/1308159.jpg\" alt=\"Amazon.com\" class=\"center\">","23a0dcfb":"- Domain - E-commerce\n- Context - Everyday a million products are being recommended to users based on\npopularity and other metrics on e-commerce websites. The most popular e-commerce\nwebsite boosts average order value by 50%, increases revenues by 300%, and\nimproves conversion. In addition to being a powerful tool for increasing revenues,\nproduct recommendations are so essential that customers now expect to see similar\nfeatures on all other eCommerce sites.\n- Data Description -\nData columns- First three columns are userId, productId, and ratings and the fourth\ncolumn is timestamp. You can discard the timestamp column as in this case you may\nnot need to use it.\n- Source - Amazon Reviews data (http:\/\/jmcauley.ucsd.edu\/data\/amazon\/) The\nrepository has several datasets. For this case study, we are using the Electronics\ndataset.\n- Learning Outcomes <br\/>\nExploratory Data Analysis<br\/>\nData Wrangling <br\/>\nBuild a Popularity recommender model <br\/>\nBuild Collaborative Filtering model <br\/>\n\n- Objective - To make a recommendation system that recommends at least five(5)\nnew products based on the user's habits.\n\n","a5801a4a":"<center style=\"background-color:tomato\">  1. Read and explore the given dataset <\/center>","02c91858":"<center style=\"background-color:tomato\">6. Evaluate the above model <\/center>","f273fffc":"<center style=\"background-color:tomato\"> 2. Take a subset of the dataset to make it less sparse\/ denser <\/center>","f82dbbf3":"<center style=\"background-color:tomato\"> 8. Summarise <\/center>","9fb6777f":"<center style=\"background-color:tomato\"> Build Collaborative Filtering model <\/center>","927ba025":"<center style=\"background-color:tomato\"> 4. Split the data randomly into a train and test dataset.  <\/center>","5300a8dc":"<center style=\"background-color:tomato\"> Get top - K ( K = 5) recommendations. <\/center>"}}