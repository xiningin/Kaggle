{"cell_type":{"662def6e":"code","26968684":"code","761af90e":"code","a0b89be6":"code","fd6b8c6d":"code","ce9c089a":"code","3e690020":"code","896b6616":"code","9911a449":"markdown","d708f6f8":"markdown","2f5a5660":"markdown","8cdf2560":"markdown","6fc57208":"markdown","ba3bd964":"markdown","49d5a9e0":"markdown"},"source":{"662def6e":"from IPython.display import YouTubeVideo\n# a talk about IPython at Sage Days at U. Washington, Seattle.\n# Video credit: William Stein.\nYouTubeVideo('JNm3M9cqWyc')","26968684":"#import dependencies\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","761af90e":"#create a list to store sample means\nmeans = []\n#repeat experiment 100 times\nfor i in range(100):\n    #generate a random array of 5 values, with values between 0 and 1\n    arr = np.random.rand(5)\n    #calculate mean of random sample\n    s_mean = np.mean(arr)\n    #add s_mean to list \n    means.append(s_mean)","a0b89be6":"#Plot it along with the mean of the distribution\nsns.distplot(means, hist=True, kde=True, \n             bins=100, color = 'darkblue', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3})\n\n#Calculate the mean\nmean = sum(means)\/ len(means)\n\n#Plot the mean over the distribution to get a sense of the central tendency\nplt.axvline(mean, color='k', linestyle='dashed', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(mean*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(mean))\n\nplt.title(\"Sampling distribution of sample means of randomly generated samples (no of samples = 100)\")\nplt.xlabel(\"Sample mean\")\nplt.ylabel(\"Frequency\")\n\nplt.show()","fd6b8c6d":"#Lets repeat this with 1000 and 10000 samples\n#for 1000 times\nmeans = []\nfor i in range(1000):\n    arr = np.random.rand(5)\n    s_mean = np.mean(arr)\n    means.append(s_mean)\n\nsns.distplot(means, hist=True, kde=True, \n             bins=100, color = 'yellow', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3})\n\nmean = sum(means)\/ len(means)\n\nplt.axvline(mean, color='k', linestyle='dashed', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(mean*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(mean))\n\nplt.title(\"Sampling distribution of sample means of randomly generated samples (no of samples = 1000)\")\nplt.xlabel(\"Sample mean\")\nplt.ylabel(\"Frequency\")\n\nplt.show()    ","ce9c089a":"#for 10000 times\nmeans = []\nfor i in range(10000):\n    arr = np.random.rand(5)\n    s_mean = np.mean(arr)\n    means.append(s_mean)\n\nsns.distplot(means, hist=True, kde=True, \n             bins=100, color = 'green', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3})\n\nmean = sum(means)\/ len(means)\n\nplt.axvline(mean, color='k', linestyle='dashed', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(mean*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(mean))\n\nplt.title(\"Sampling distribution of sample means of randomly generated samples (no of samples = 10000)\")\nplt.xlabel(\"Sample mean\")\nplt.ylabel(\"Frequency\")\n\nplt.show()    ","3e690020":"medians = []\nfor i in range(10000):\n    arr = np.random.rand(5)\n    s_median = np.median(arr)\n    medians.append(s_median)\n\nsns.distplot(medians, hist=True, kde=True, \n             bins=100, color = 'pink', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3})\n\nmean = sum(medians)\/ len(medians)\n\nplt.axvline(mean, color='k', linestyle='dashed', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(mean*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(mean))\n\nplt.title(\"Sampling distribution of sample medians of randomly generated samples (no of samples = 10000)\")\nplt.xlabel(\"Sample median\")\nplt.ylabel(\"Frequency\")\n\nplt.show()  ","896b6616":"sums = []\nfor i in range(10000):\n    arr = np.random.rand(5)\n    s_sum = np.sum(arr)\n    #normalize it to get a value between 0 and 1\n    s_sum \/= 5\n    sums.append(s_sum)\n\nsns.distplot(sums, hist=True, kde=True, \n             bins=100, color = 'cyan', \n             hist_kws={'edgecolor':'black'},\n             kde_kws={'linewidth': 3})\n\nmean = sum(sums)\/ len(sums)\n\nplt.axvline(mean, color='k', linestyle='dashed', linewidth=1)\nmin_ylim, max_ylim = plt.ylim()\nplt.text(mean*1.1, max_ylim*0.9, 'Mean: {:.2f}'.format(mean))\n\nplt.title(\"Sampling distribution of sample sums of randomly generated samples (no of samples = 10000)\")\nplt.xlabel(\"Sample sum\")\nplt.ylabel(\"Frequency\")\n\nplt.show()  ","9911a449":"### Sample Sum","d708f6f8":"### Great! Doesn't this look similar to a normal distribution? (with a little left skew). If we keep on increasing the number of samples, the distribution should become almost identical to a normal distribution.","2f5a5660":"## Sampling distribution of Sample Means","8cdf2560":"# Central Limit Theorem \n\n### In probability theory, the central limit theorem establishes that, in some situations, when independent random variables are added, their properly normalized sum tends toward a normal distribution even if the original variables themselves are not normally distributed.\n\n#### In simpler terms, it states that if we have a sample S, with a probability distribution which is NOT normally distributed, and we take sample Si multiple number of times, then the probability distribution for an independent random variable which is calculated from Si (like the sample mean), will tend to be normally distributed if we take a sufficiently large number of samples.","6fc57208":"## Let's try replicating it with other independent random variables. ","ba3bd964":"### Sample median","49d5a9e0":"### We will try to implement the concepts as discussed in this video by Khan Academy. We will additionaly repeat this experiment with other independent random variables like the sum, median etc. Watch the video below to understand the concepts more clearly."}}