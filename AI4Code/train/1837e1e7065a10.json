{"cell_type":{"7d6505e5":"code","99834d98":"code","ebfef0e3":"code","0e7ea498":"code","4af832cf":"code","a4c689cb":"code","81830692":"code","98496190":"code","5a087aba":"code","e0745e4a":"code","2502023b":"code","e7e65f30":"code","c74c722e":"code","bb72dd31":"code","36348c26":"markdown","19627bcc":"markdown","ade82342":"markdown","db251689":"markdown","d1bbb32a":"markdown","a3a9586d":"markdown","1f1ddd25":"markdown","cdd08db4":"markdown","be808885":"markdown","421b5ca8":"markdown","02ac84de":"markdown","6e6d2d41":"markdown"},"source":{"7d6505e5":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n%matplotlib inline\n","99834d98":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ebfef0e3":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","0e7ea498":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","4af832cf":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","a4c689cb":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# shopping_customer_data.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/shopping_customer_data.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'shopping_customer_data.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","81830692":"df1.head(5)","98496190":"plotPerColumnDistribution(df1, 10, 5)","5a087aba":"plotCorrelationMatrix(df1, 8)","e0745e4a":"plotScatterMatrix(df1, 12, 10)","2502023b":"from sklearn.cluster import KMeans\nselectedDF = df1.drop('CustomerID',axis=1)\nselectedDF = pd.get_dummies(selectedDF)  #one hot encoding\n\nkmeans = KMeans(n_clusters=4)\nkmeans.fit(selectedDF)\n\nprint(kmeans.cluster_centers_)\nprint(kmeans.labels_)\nprint(len(kmeans.labels_))","e7e65f30":"print(type(kmeans.labels_))\nunique,counts = np.unique(kmeans.labels_,return_counts=True)\nprint(dict(zip(unique,counts)))","c74c722e":"df1['cluster'] = kmeans.labels_\ndf1.tail()","bb72dd31":"import seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set_style('whitegrid')\nsns.lmplot('Annual Income (k$)','Spending Score (1-100)',data=df1,hue='cluster',palette='coolwarm',size=8,aspect=1,fit_reg=False)","36348c26":"Distribution graphs (histogram\/bar graph) of sampled columns:","19627bcc":"There is 1 csv file in the current version of the dataset:\n","ade82342":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data.","db251689":"## Conclusion\nThis concludes simple kmeans clustering approach. Above plots only related to 2 axes but we have 4 feature in total use for clustering. \n\n\n\n### Please Upvote this kernel if you feel useful.","d1bbb32a":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","a3a9586d":"Now you're ready to read in the data and use the plotting functions to visualize the data.","1f1ddd25":"Correlation matrix:","cdd08db4":"Scatter and density plots:","be808885":"Let's take a quick look at what the data looks like:","421b5ca8":"## Introduction\nUse this kernel to understand KMeans clustering with simple dataset.","02ac84de":"### KMeans Clustering","6e6d2d41":"### Let's check 1st file: \/kaggle\/input\/shopping_customer_data.csv"}}