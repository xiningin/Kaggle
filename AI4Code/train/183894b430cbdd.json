{"cell_type":{"447a00ec":"code","d46464eb":"code","77859536":"code","a72d6a66":"code","5e213c9b":"code","fbd3dd52":"code","cdbd33c4":"code","376a5ad3":"code","548efe5f":"code","a0f2c5e1":"code","35dece66":"code","539e609e":"code","ee37eb4d":"code","51963233":"code","8af3d27e":"code","8c750993":"code","d3004cee":"code","44575590":"code","3f8a7c5f":"code","4026508f":"code","dd43f1ad":"code","915133dd":"code","6370672f":"code","9f2400ae":"code","85c2e62c":"code","0a62dd32":"code","c93501f7":"code","2819d349":"code","bd17f208":"code","95b0c65e":"code","4c1470dc":"code","dae17989":"code","58b51a6c":"code","9c560685":"code","8c54ad90":"code","84731c19":"code","be272ef0":"code","2228719a":"code","f7d77fd1":"code","76a48734":"code","7083e61b":"code","71434f15":"code","4d2e8c2a":"markdown","84d38ae8":"markdown","6ceb039f":"markdown","c4064753":"markdown","22c9e5a6":"markdown","1d7cbc6d":"markdown","3b30ab33":"markdown","58a0c4b6":"markdown","3b51661b":"markdown","40a71b12":"markdown","dd910c18":"markdown","6903afe0":"markdown","7d967054":"markdown","a4952aae":"markdown","b8294c60":"markdown","57f6c8d3":"markdown"},"source":{"447a00ec":"#Packages\n\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d46464eb":"#Dataset for train\ndf_train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv')\n\n#Dataset for test\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv')\n\n#Datasetfor submission\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv')","77859536":"#Columns of train dataset\n\ndf_train.columns","a72d6a66":"#Columns of train dataset\n\ndf_test.columns","5e213c9b":"#Dataset Shape - Train\n\ndf_train.shape","fbd3dd52":"#Dataset Shape - Test\n\ndf_test.shape","cdbd33c4":"df_train.head()","376a5ad3":"df_test.head()","548efe5f":"cat_columns = ['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8','cat9']","a0f2c5e1":"cont_columns = ['cont0', 'cont1', 'cont2', 'cont3', 'cont4', 'cont5','cont6', 'cont7', 'cont8', 'cont9', 'cont10', 'cont11', 'cont12','cont13']","35dece66":"df_train.isnull().sum()","539e609e":"#Quantity per category and column - Train\n\ndf_train[cat_columns].apply(pd.Series.value_counts).fillna(0)","ee37eb4d":"#Quantity per category and column - Test\n\ndf_test[cat_columns].apply(pd.Series.value_counts).fillna(0)","51963233":"def grafico_contador(columna,dataset):\n    \n    import random\n    paleta = sns.color_palette()\n    color = random.choice(paleta)\n    \n    cantidad = dataset[columna].value_counts()\n    df_cantidad = pd.DataFrame(cantidad)\n    \n    plt.figure(figsize=(8,6))\n    \n    ax = plt.bar(x=df_cantidad.index,height=df_cantidad[columna],color=color)\n    \n\n    plt.title('Quantity per Type for ' + columna,fontsize=20)\n    plt.ylabel('n')","8af3d27e":"#Quantity per category and column - Train\n\nfor columna in cat_columns:\n    grafico_contador(columna,df_train)","8c750993":"#Quantity per category and column - Test\n\nfor columna in cat_columns:\n    grafico_contador(columna,df_test)","d3004cee":"def grafico_distribucion(columna,dataset):\n    \n    import random\n    \n    datos = dataset[columna]\n    \n    paleta = sns.color_palette()\n    color = random.choice(paleta)\n\n    sns.displot(datos, color=color)\n    \n    plt.show()","44575590":"#Distribution for continuous variables - Train\n\nfor columna in cont_columns:\n    grafico_distribucion(columna,df_train)","3f8a7c5f":"#Distribution for continuous variables - Test\n\nfor columna in cont_columns:\n    grafico_distribucion(columna,df_test)","4026508f":"from sklearn.preprocessing import OneHotEncoder","dd43f1ad":"OH_encoder = OneHotEncoder(sparse=False)","915133dd":"#Categorical column encoding\n\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(df_train[cat_columns]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(df_test[cat_columns]))","6370672f":"#Column name for categorical column - Train\n\nOH_cols_train.columns = OH_encoder.get_feature_names(['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8','cat9'])","9f2400ae":"#Column name for categorical column - Test\n\nOH_cols_test.columns = OH_encoder.get_feature_names(['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7','cat8','cat9'])","85c2e62c":"OH_cols_train.head()","0a62dd32":"OH_cols_test.head()","c93501f7":"#Remove categorical columns without encoding and add new ones with encoding - Train\n\ndf_train_OH = df_train.drop(df_train[cat_columns],axis=1)\ndf_train_OH = pd.concat([df_train_OH,OH_cols_train],axis=1)\ndf_train_OH.head()","2819d349":"df_train_OH.columns","bd17f208":"#Remove categorical columns without encoding and add new ones with encoding - Test\n\ndf_test_OH = df_test.drop(df_test[cat_columns],axis=1)\ndf_test_OH = pd.concat([df_test_OH,OH_cols_test],axis=1)\ndf_test_OH.head()","95b0c65e":"df_test_OH.columns","4c1470dc":"from sklearn.preprocessing import LabelEncoder","dae17989":"#Label column by column -  Train and test\n\nfor columna in cat_columns:\n    LB_encoder = LabelEncoder()\n    LB_encoder.fit(df_train[columna])\n    df_train[columna] = LB_encoder.transform(df_train[columna])\n    df_test[columna] = LB_encoder.transform(df_test[columna])","58b51a6c":"df_train.head()","9c560685":"df_test.head()","8c54ad90":"#Target for training\n\ntarget = df_train['target']\ntarget.head()","84731c19":"#Train dataset\n\ntrain_LB = df_train.drop(columns=['target'])\ntrain_LB.head()","be272ef0":"#Columns for train\n\ntrain_LB.columns","2228719a":"from lightgbm import LGBMRegressor","f7d77fd1":"hyperparameters = {\"random_state\": 42,\n                   \"metric\": \"rmse\",\n                   \"n_jobs\": -1,\n                   \"cat_feature\": [x for x in range(len(cat_columns))],\n                   \"reg_alpha\": 6.147694913504962,\n                   \"reg_lambda\": 0.002457826062076097,\n                   \"colsample_bytree\": 0.20,\n                   \"learning_rate\": 0.01,\n                   \"max_depth\": 48,\n                   \"num_leaves\": 100,\n                   \"min_child_samples\": 275,\n                   \"n_estimators\": 2200,\n                   \"cat_smooth\": 40.0,\n                   \"max_bin\": 512,\n                   \"min_data_per_group\": 100,\n                   \"bagging_freq\": 1,\n                   \"bagging_fraction\": 0.70,\n                   \"cat_l2\": 12.0}","76a48734":"model = LGBMRegressor(**hyperparameters)","7083e61b":"model.fit(train_LB, target)","71434f15":"sample_submission['target'] = model.predict(df_test)\n\nsample_submission.to_csv('lightgbm.csv',index=False)","4d2e8c2a":"## 1.2 Continuous variables","84d38ae8":"## 2.2 Label encoding","6ceb039f":"## 2.1 One-hot encoding","c4064753":"## 1.1 Categorical Variables","22c9e5a6":"# 6. Prediction and submit","1d7cbc6d":"# 5. LightGBM Model\n","3b30ab33":"# 4. Datasets for Model training","58a0c4b6":"As can be seen, there are no NaN in the columns","3b51661b":"## Summary of models executed\n\nVersion 6 y 7:\n    \n        One-hot encoding for categorial variables\n        Linear Regression\n        Public Score: 0.86316\n      \nVersion 8:\n    \n        One-hot encoding for categorial variables\n        Ridge Regression\n        hyperparameters: {'alpha': np.linspace(0.00001,20,200),\n                         'fit_intercept':[False,True],\n                         'normalize':[False,True],\n                         'solver':['auto'],\n                         'random_state':[42]}\n        Public Score: 0.86315\n        \nVersion 9:\n    \n       One-hot encoding for categorial variables\n       LightGBM\n       hyperparameters:{'task': 'train',\n                        'boosting_type': 'gbdt',\n                        'objective': 'regression',\n                        'type': 'regression_l1',\n                        'metric': ['rmse'],\n                        'num_iterations': 5000,\n                        'verbose': 0}\n       Public Score: 0.85784\n       \nVersion 10:\n   \n       One-hot encoding for categorial variables\n       LightGBM\n       hyperparameters:{'task': 'train',\n                        'boosting_type': 'gbdt',\n                        'objective': 'regression',\n                        'metric': ['l2'],\n                        'learning_rate': 0.005,\n                        'feature_fraction': 0.9,\n                        'bagging_fraction': 0.7,\n                        'bagging_freq': 10,\n                        'verbose': 0,\n                        'max_depth': 8,\n                        'num_leaves': 128,  \n                        'max_bin': 512,\n                        'num_iterations': 100000,\n                        'n_estimators': 100}\n       Public Score: 0.87002  \n    \nVersion 11:\n\n       One-hot encoding for categorial variables\n       LightGBM\n       hyperparameters: {'task': 'train',\n                         'boosting_type': 'gbdt',\n                         'objective': 'regression',\n                         'metric': ['l2'],\n                         'learning_rate': 0.005,\n                         'feature_fraction': 0.9,\n                         'bagging_fraction': 0.7,\n                         'bagging_freq': 10,\n                         'verbose': 0,\n                         'max_depth': 8,\n                         'num_leaves': 128,  \n                         'max_bin': 512,\n                         'num_iterations': 1000,\n                         'n_estimators': 100}\n       Public Score: 0.84861\n    \nVersion 13:\n\n       One-hot encoding for categorial variables\n       Gradient Boosting Regressor (sklearn) - default hyperparameters\n       Public Score: 0.85232\n \n\nVersion 14:\n\n       Label encoding for categorial variables\n       Gradient Boosting Regressor (sklearn) - default hyperparameters\n       Public Score: 0.85271\n      \nVersion 15:\n\n       Label encoding for categorial variables\n       CatBoostRegressor - default hyperparameters\n       Public Score: 0.84426\n       \nVersion 16:\n\n       Only continuos variables \n       CatBoostRegressor - default hyperparameters\n       Public Score: 0.85971\n\nVersion 17:\n\n       Label encoding for categorial variables\n       LightGBM\n       hyperparameters: {'reg_alpha': 6,\n                         'reg_lambda': 0.002,\n                         'colsample_bytree': 0.25,\n                         'subsample': 0.8,\n                         'learning_rate': 0.001,\n                         'max_depth': 20,\n                         'num_leaves': 100,\n                         'min_child_samples': 250,\n                         'random_state': 42,\n                         'n_estimators': 3000,\n                         'metric': 'rmse',\n                         'cat_smooth': 10}\n       Public Score: 0.85417\n   \nVersion 18:\n\n       Label encoding for categorial variables\n       LightGBM\n       hyperparameters: {'reg_alpha': 6,\n                         'reg_lambda': 0.0025,\n                         'colsample_bytree': 0.3,\n                         'subsample': 0.8,\n                         'learning_rate': 0.0005,\n                         'max_depth': 20,\n                         'num_leaves': 110,\n                         'min_child_samples': 250,\n                         'random_state': 42,\n                         'n_estimators': 300000,\n                         'metric': 'rmse',\n                         'cat_smooth': 30}\n       Public Score: 0.84822\n       \nVersion 19:\n\n       Label encoding for categorial variables\n       Random Forest Regressor - default hyperparameters\n       Public Score: 0.85845   \n       \n       \nVersion 21:\n\n       Label encoding for categorial variables\n       Optuna (hyperparameters optimization) - n_trials=5\n       LightGBM\n       hyperparameters: {'reg_alpha': 0.15329416977275137,\n                         'reg_lambda': 1.3369717590743315,\n                         'colsample_bytree': 0.6,\n                         'subsample': 1.0,\n                         'learning_rate': 0.006,\n                         'max_depth': 20,\n                         'num_leaves': 106,\n                         'min_child_samples': 71,\n                         'random_state': 42,\n                         'n_estimators': 20000,\n                         'metric': 'rmse',\n                         'cat_smooth': 11}\n       Public Score: 0.84686 \n       \nVersion 22:\n\n       Label encoding for categorial variables\n       Optuna (hyperparameters optimization) - n_trials=10\n       LightGBM\n       hyperparameters: {'reg_alpha': 0.002025121636940981,\n                         'reg_lambda': 0.009545164727006287,\n                         'colsample_bytree': 0.4,\n                         'subsample': 0.7,\n                         'learning_rate': 0.006,\n                         'max_depth': 20,\n                         'num_leaves': 749,\n                         'min_child_samples': 64,\n                         'random_state': 42,\n                         'n_estimators': 20000,\n                         'metric': 'rmse',\n                         'cat_smooth': 22}\n       Public Score: 0.85591 \n   \nVersion 23:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=20\n      LightGBM\n      hyperparameters:{'reg_alpha': 0.1654217829132715,\n                       'reg_lambda': 4.607124758840013,\n                       'colsample_bytree': 0.3,\n                       'subsample': 0.4,\n                       'learning_rate': 0.006,\n                       'max_depth': 20,\n                       'num_leaves': 108,\n                       'min_child_samples': 54,\n                       'random_state': 42,\n                       'n_estimators': 20000,\n                       'metric': 'rmse',\n                       'cat_smooth': 1}\n      Public Score: 0.84525 \n      \nVersion 24:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=30\n      LightGBM\n      hyperparameters:{'reg_alpha': 0.01113086761492008,\n                       'reg_lambda': 1.6233914638378455,\n                       'colsample_bytree': 0.3,\n                       'subsample': 1.0,\n                       'learning_rate': 0.006,\n                       'max_depth': 20,\n                       'num_leaves': 163,\n                       'min_child_samples': 49,\n                       'random_state': 42,\n                       'n_estimators': 20000,\n                       'metric': 'rmse',\n                       'cat_smooth': 98}\n      Public Score: 0.84639 \n      \nVersion 25:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=40 (fails in Trial 13)\n      LightGBM\n      hyperparameters:{'reg_alpha': 8.450233836569357,\n                       'reg_lambda': 0.0222506784975048,\n                       'colsample_bytree': 0.3,\n                       'subsample': 0.4,\n                       'learning_rate': 0.02,\n                       'max_depth': 10,\n                       'num_leaves': 281,\n                       'min_child_samples': 295,\n                       'random_state': 42,\n                       'n_estimators': 20000,\n                       'metric': 'rmse',\n                       'cat_smooth': 64}\n      Public Score: 0.86773 \n      \nVersion 26:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=50 (fails in Trial 45)\n      LightGBM\n      hyperparameters:{'reg_alpha': 1.9972784701288318,\n                       'reg_lambda': 0.12477445797435255,\n                       'colsample_bytree': 0.4,\n                       'subsample': 1.0,\n                       'learning_rate': 0.008,\n                       'max_depth': 20,\n                       'num_leaves': 60,\n                       'min_child_samples': 191,\n                       'random_state': 42,\n                       'n_estimators': 20000,\n                       'metric': 'rmse',\n                       'cat_smooth': 9}\n      Public Score: 0.84607 \n      \n      \nVersion 27:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=5\n      CatBoost Regressor\n      hyperparameters:{'learning_rate': 0.016,\n                       'depth': 11,\n                       'l2_leaf_reg': 5.0,\n                       'min_child_samples': 1}\n      Public Score: 0.84615   \n      \n      \n Version 32:\n\n      Label encoding for categorial variables\n      Optuna (hyperparameters optimization) - n_trials=10\n      CatBoost Regressor\n      hyperparameters:{'learning_rate': 0.02,\n                       'depth': 6,\n                       'l2_leaf_reg': 2.0,\n                       'model_size_reg': 1.0,\n                       'min_child_samples': 2}\n      Public Score: 0.84646     \n      \n \n Version 34:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':3000,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}              \n      Public Score: 0.84328 \n      \n      \n  Version 35:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':3500,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}              \n      Public Score: 0.84320     \n      \n   Version 36:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4000,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}              \n      Public Score: 0.84317     \n \n   Version 37:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4500,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}              \n      Public Score: 0.84324 \n\n   Version 38:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4100,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}              \n      Public Score: 0.84319 \n \n   Version 39:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':3975,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.85,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}             \n      Public Score: 0.84317 \n \n   Version 40:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4000,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.80,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}             \n      Public Score: 0.84313\n \n   Version 41:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4500,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.80,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}             \n      Public Score: 0.84321\n      \n   Version 42:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':3950,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.80,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}             \n      Public Score: 0.84313     \n      \n   Version 43:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4000,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.75,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}            \n      Public Score: 0.84310      \n      \n   Version 44:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4100,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.75,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}            \n      Public Score: 0.84310        \n      \n \n   Version 45:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{'n_estimators':4000,\n                      'learning_rate': 0.004,\n                      'min_data_per_group': 5,\n                      'boosting_type': 'gbdt',\n                      'num_leaves': 256,\n                      'max_depth': -1,\n                      'lambda_l1': 4.5,\n                      'lambda_l2': 1.2,\n                      'metric': 'rmse',\n                      'cat_smooth': 1.0,\n                      'silent': True,\n                      'importance_type': 'split',\n                      'feature_pre_filter': False,\n                      'bagging_fraction': 0.70,\n                      'min_data_in_leaf': 100,\n                      'min_sum_hessian_in_leaf': 0.001,\n                      'bagging_freq': 7,\n                      'feature_fraction': 0.5,\n                      'min_gain_to_split': 0.0,\n                      'min_child_samples': 20,\n                      'n_jobs': -1,\n                      'random_state': 42}          \n      Public Score: 0.84314        \n       \n   Version 47:\n\n      Label encoding for categorial variables\n      XGBoost\n      hyperparameters:{'booster':'gbtree',\n                       'n_estimators':10000,\n                       'max_depth':5, \n                       'eta':0.006,\n                       'gamma':1.2,\n                       'objective':'reg:squarederror',\n                       'verbosity':0,\n                       'subsample':0.85,\n                       'colsample_bytree':0.8,\n                       'lambda':4.5,\n                       'alpha':1.2,\n                       'scale_pos_weight':1,\n                       'objective':'reg:squarederror',\n                       'eval_metric':'rmse',\n                       'seed':42,\n                       'tree_method':'gpu_hist',\n                       'gpu_id':0}          \n      Public Score: 0.84325\n \n   Version 48:\n\n      Label encoding for categorial variables\n      XGBoost\n      hyperparameters:{'booster':'gbtree',\n                       'n_estimators':10000,\n                       'max_depth':12, \n                       'eta':0.006,\n                       'gamma':1.2,\n                       'objective':'reg:squarederror',\n                       'verbosity':0,\n                       'subsample':0.85,\n                       'colsample_bytree':0.8,\n                       'lambda':4.5,\n                       'alpha':1.2,\n                       'scale_pos_weight':1,\n                       'objective':'reg:squarederror',\n                       'eval_metric':'rmse',\n                       'seed':42,\n                       'tree_method':'gpu_hist',\n                       'gpu_id':0}          \n      Public Score: 0.84490\n \n   Version 49:\n\n      Label encoding for categorial variables\n      XGBoost\n      hyperparameters:{'booster':'gbtree',\n                       'n_estimators':10000,\n                       'max_depth':4, \n                       'eta':0.006,\n                       'gamma':1.2,\n                       'objective':'reg:squarederror',\n                       'verbosity':0,\n                       'subsample':0.80,\n                       'colsample_bytree':0.8,\n                       'lambda':4.5,\n                       'alpha':1.2,\n                       'scale_pos_weight':1,\n                       'objective':'reg:squarederror',\n                       'eval_metric':'rmse',\n                       'seed':42,\n                       'tree_method':'gpu_hist',\n                       'gpu_id':0}          \n      Public Score: 0.84314\n  \n   Version 52:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1600,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84262\n      \n \n   Version 54:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 16000,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84214\n      \n      \n   Version 55:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1700,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84256      \n      \n   Version 56:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1800,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84254      \n  \n   Version 57:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1900,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84250\n      \n   Version 58:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2000,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84252\n      \n   Version 59:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.3,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1950,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84250\n      \n   Version 60:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2000,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84239 \n      \n   Version 61:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2100,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84235       \n      \n   Version 62:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2200,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84236      \n      \n   Version 63:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 30,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 1900,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84241      \n \n   Version 64:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 32,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2100,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84231\n     \n   Version 65:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 36,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2100,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}          \n      Public Score: 0.84231     \n      \n   Version 66:\n\n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 36,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2200,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}\n      Public Score: 0.84230       \n                 ","40a71b12":"# 1. Exploratory Data Analysis (EDA)","dd910c18":"# 3. Seleccion de modelos base con Pycaret","6903afe0":"# 2. Encoding for categorical variables","7d967054":"Below are the Pycaret results obtained at the beginning of the competition. I take them as a baseline for model selection\n\n![image.png](attachment:image.png)","a4952aae":" **BEST PUBLIC SCORE:** \n                       Version 66\n                   \n      Label encoding for categorial variables\n      LightGBM\n      hyperparameters:{\"random_state\": 42,\n                       \"metric\": \"rmse\",\n                       \"n_jobs\": -1,\n                       \"cat_feature\": [x for x in range(len(cat_columns))],\n                       \"reg_alpha\": 6.147694913504962,\n                       \"reg_lambda\": 0.002457826062076097,\n                       \"colsample_bytree\": 0.25,\n                       \"learning_rate\": 0.01,\n                       \"max_depth\": 36,\n                       \"num_leaves\": 100,\n                       \"min_child_samples\": 275,\n                       \"n_estimators\": 2200,\n                       \"cat_smooth\": 40.0,\n                       \"max_bin\": 512,\n                       \"min_data_per_group\": 100,\n                       \"bagging_freq\": 1,\n                       \"bagging_fraction\": 0.7,\n                       \"cat_l2\": 12.0}\n      Public Score: 0.84230 \n\n![](https:\/\/repository-images.githubusercontent.com\/64991887\/dc855780-e34b-11ea-9ab8-e08ca33288b0)","b8294c60":"# TPS - Feb 2021 - EDA + Models\n\n![](https:\/\/www.lifewire.com\/thmb\/WGo_EVL86KWQrv5Mr1BzwdTpG70=\/1135x851\/smart\/filters:no_upscale()\/med241050-56a9f68a3df78cf772abc65f.jpg)","57f6c8d3":"All of the feature columns, cat0 - cat9 are categorical, and the feature columns cont0 - cont13 are continuous."}}