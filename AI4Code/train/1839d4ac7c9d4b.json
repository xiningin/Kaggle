{"cell_type":{"9804251c":"code","d539981f":"code","eb15b9e2":"code","1c5f9e85":"code","0fb1ca02":"code","a8f2fe06":"code","2e452473":"code","1f6f4747":"code","f3f6d3f5":"code","b2c5ed3c":"code","4ae2a09e":"code","cf945ba2":"code","7b32f7ad":"code","d0facf8c":"code","7b6cee0c":"code","63db8b02":"code","5206154a":"code","2e69adec":"code","bb30945b":"markdown","2a5d7153":"markdown","860b5af1":"markdown","3599ec9b":"markdown","520a71f6":"markdown","b510ac6a":"markdown","54936479":"markdown","334dd2a8":"markdown","0288e3c7":"markdown","84e55c21":"markdown","f5acc2bf":"markdown"},"source":{"9804251c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d539981f":"df = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndf.head()","eb15b9e2":"df.info()","1c5f9e85":"bins_ = (2,6.5,8)\nlabels_ = ['bad','good']\ndf['quality']=pd.cut(df['quality'],bins=bins_,labels=labels_)\nprint(df['quality'])","0fb1ca02":"sns.countplot(df['quality'],data=df)","a8f2fe06":"x1=df[df['quality']=='bad']['quality'].count()\nx2=df[df['quality']=='good']['quality'].count()\nratio =x1\/(x1+x2)\nprint(\"Percentage of Bad Quality data in the dataset:\",ratio*100)","2e452473":"plt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),annot=True)","1f6f4747":"from sklearn.preprocessing import StandardScaler,LabelEncoder\n\nlabel_enc = LabelEncoder()\ndf['quality'] = label_enc.fit_transform(df['quality'])\ndf.head(10)","f3f6d3f5":"y = df['quality']\nX = df.drop('quality',axis=1)","b2c5ed3c":"from imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler(random_state=0,replacement = True)\nrus.fit(X,y)\nX_resampled, y_resampled = rus.fit_resample(X,y)","4ae2a09e":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(X_resampled,y_resampled,random_state=0,train_size=0.85) ","cf945ba2":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","7b32f7ad":"from sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix,classification_report,mean_absolute_error,accuracy_score\n\nmodel1 = RandomForestClassifier(n_estimators=500)\nmodel1.fit(X_train,y_train)\npred1 = model1.predict(X_test)\nprint(mean_absolute_error(y_test,pred1))\nprint(accuracy_score(y_test,pred1))","d0facf8c":"print(classification_report(y_test,pred1))","7b6cee0c":"print(confusion_matrix(y_test,pred1))","63db8b02":"model2 = LogisticRegressionCV(cv=5,random_state=0)\nmodel2.fit(X_train,y_train)\npred2 = model2.predict(X_test)\nprint(mean_absolute_error(y_test,pred2))\nprint(accuracy_score(y_test,pred2))","5206154a":"print(classification_report(y_test,pred2))","2e69adec":"print(confusion_matrix(y_test,pred2))","bb30945b":"I have tried 2 models RandomForestClassifier and LogisticRegressionCV.","2a5d7153":"Since, this dataset is strongly imbalanced, even though SMOTE is considered the best practice for handling imbalanced data,I used undersampling technique to overcome the bias in this notebook.","860b5af1":"Comparing the number of 'good' and 'bad' quality wines to check for bias in the dataset.","3599ec9b":"There is no strong dependencies between the co-variates. Now, before building the model we have to encode the categorical variables.","520a71f6":"Standardization of data is important for algorithms involving calculating distance in it.So before trying different algorithms,it's good to standardize the data.","b510ac6a":"We have 94% accuracy using RandomForestClassifier. We will try out Logistic Regression with cross validation folds.","54936479":"There are approx. 86% of 'bad' quality wines and only 14% 'good' quality wines which is a sign of bias in the dataset. We have to counter this Imbalance data before building the model.","334dd2a8":"There are no missing values in the dataset. So,dividing categories of quality from 1-10 as 2 - 6.5 as 'Bad' quality wine and 6.5-10 as 'Good' quality wine as stated in the data description. ","0288e3c7":"We got a 88% accuracy using Logistic Regression.\nSo, comparing Logistic Regression and RandomForest Classifier, Random Forest Classifier outperforms Logistic Regression by 6% in this dataset. Any suggestions or feedback is most welcome!!","84e55c21":"I have used 85% of resampled data for training set(which is a bit high) because we have lost lot of data in undersampling 'bad' quality wines.","f5acc2bf":"**Importing dataset into dataframe**"}}