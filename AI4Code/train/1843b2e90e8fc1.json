{"cell_type":{"0e2b32b5":"code","87a16a81":"code","c4285967":"code","eaefe053":"code","50dc6eac":"code","e0dbc69c":"code","4a5e61bb":"code","690de856":"code","b6055b12":"code","a3996fb3":"code","891f88c7":"markdown","d9e3c4d1":"markdown","4a308b35":"markdown","e523a23e":"markdown","fe37d4ed":"markdown","85b713a5":"markdown","59d8d4e1":"markdown"},"source":{"0e2b32b5":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\ndf = pd.read_csv('..\/input\/credit-data\/credit_data.csv')","87a16a81":"df.describe()\n# I notice the min for age is -52! That needs to change.\n# clientid is not needed\n# age has three nulls in it","c4285967":"sns.displot(df.income, height = 6, color = 'orange')\n#Nice distribution","eaefe053":"sns.displot(df.age, height = 6, color = 'orange')\n#age has three negative ages!","50dc6eac":"sns.displot(df.loan, height = 6, color = 'orange')","e0dbc69c":"df['age'].fillna(40.807559, inplace = True)\n# I fill in the null values with the average.","4a5e61bb":"df.age = np.where(df.age <= -28.218361,28.218361, df.age)\ndf.age = np.where(df.age <= -52.423280,52.423280, df.age) \ndf.age = np.where(df.age <= -36.496976,36.496976, df.age) \n# Replacing the negative values with its positive counterpart","690de856":"df.drop(columns=['clientid'], axis = 1, inplace = True)\n# Dropping clientid from data frame","b6055b12":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = df.drop(columns=['default'])\ny = df.default\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.2)\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\n\nscore = accuracy_score(y_test, predictions)\nscore","a3996fb3":"from sklearn.tree import DecisionTreeClassifier\nX = df.drop(columns=['default'])\ny = df.default\n\nmodel = DecisionTreeClassifier()\nmodel.fit(X, y)\npredictions = model.predict([[24000,44,7000]]) #input : [income,age,loan amount]\npredictions","891f88c7":"# Data Cleaning","d9e3c4d1":"### Make Predictions!","4a308b35":"# Decision Tree Model","e523a23e":"### How accurate is this model?","fe37d4ed":"# Credit Data\n## Objective: Determine who will default on there loan.\n### Code by Daniel Ramirez\n### Table of Contents\n1. Importing Libraries\n2. Data Exploration\n3. Data Cleaning\n4. Decision Tree Model\n","85b713a5":"# Importing Libraries","59d8d4e1":"# Data Exploration"}}