{"cell_type":{"a72cdaeb":"code","12e36349":"code","468d84ff":"code","287107a9":"code","bb5b6b95":"code","e50a9338":"code","878a9d30":"code","6f246bed":"code","3bbb9207":"code","f631da72":"code","6f84ab09":"code","47ed29e0":"code","8b56ecf1":"code","2e286728":"code","304bfa29":"code","1aa7a425":"code","2f9a1540":"code","0d407166":"code","373b04ac":"code","8c6e93da":"code","976b2104":"code","78570fd3":"code","962c4de9":"code","92c17e8a":"code","2f50bec9":"code","e2d11ffe":"code","db5987cd":"code","41d7687d":"code","73f86476":"code","f1b6a077":"code","2b8d09c2":"code","47105dc3":"code","3457bd22":"code","04f84cbb":"code","ca55c8e6":"code","5326c2a1":"code","a4240bd1":"code","b30654a2":"code","fdbfc70d":"code","51a7b44e":"code","8c47c6aa":"code","98abcba4":"code","6fd29958":"code","39d9e749":"code","5cdbfb73":"code","66917deb":"code","a5423f54":"code","aea35d57":"code","9cdc811f":"code","0ead56ad":"code","45a0eb9c":"code","0565e314":"code","91e169f5":"code","d97a3ff1":"code","7d084b32":"code","0250446c":"code","57ee3446":"code","34a7cb5d":"code","c28036f1":"code","f648bf0c":"code","8cd7f104":"code","48724186":"code","9f81a163":"markdown","847df95f":"markdown","ec425cda":"markdown","0db3c674":"markdown","7f52b430":"markdown","f0375af5":"markdown","30dc208e":"markdown","5ee79bbd":"markdown","73e39704":"markdown","e4bde35a":"markdown","5078cd6e":"markdown","789edc97":"markdown","8cb649d9":"markdown"},"source":{"a72cdaeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12e36349":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")","468d84ff":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","287107a9":"train_data.head()","bb5b6b95":"#train_data.info()\ntrain_data.isnull().sum()","e50a9338":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\ndef bar_chart(feature):\n    survived = train_data[train_data['Survived']==1][feature].value_counts()\n    dead = train_data[train_data['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","878a9d30":"bar_chart('Pclass')","6f246bed":"bar_chart('Sex')","3bbb9207":"bar_chart('SibSp')","f631da72":"bar_chart('Parch')","6f84ab09":"bar_chart('Embarked')","47ed29e0":"bar_chart('Cabin')","8b56ecf1":"train_test_data = [train_data, test_data] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","2e286728":"train_data['Title'].value_counts()","304bfa29":"test_data['Title'].value_counts()","1aa7a425":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","2f9a1540":"train_data.head()","0d407166":"test_data.head()","373b04ac":"bar_chart('Title')","8c6e93da":"# delete unnecessary feature from dataset\ntrain_data.drop('Name', axis=1, inplace=True)\ntest_data.drop('Name', axis=1, inplace=True)","976b2104":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","78570fd3":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain_data[\"Age\"].fillna(train_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_data[\"Age\"].fillna(test_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","962c4de9":"train_data.groupby(\"Title\")[\"Age\"].transform(\"median\")","92c17e8a":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train_data['Age'].max()))\nfacet.add_legend()\n \nplt.show()","2f50bec9":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train_data['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","e2d11ffe":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","db5987cd":"bar_chart('Age')","41d7687d":"Pclass1 = train_data[train_data['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train_data[train_data['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train_data[train_data['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","73f86476":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","f1b6a077":"train_data.head()","2b8d09c2":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","47105dc3":"# fill missing Fare with median fare for each Pclass\ntrain_data[\"Fare\"].fillna(train_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest_data[\"Fare\"].fillna(test_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain_data.head()","3457bd22":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train_data['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","04f84cbb":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train_data['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","ca55c8e6":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","5326c2a1":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","a4240bd1":"Pclass1 = train_data[train_data['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train_data[train_data['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train_data[train_data['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","b30654a2":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","fdbfc70d":"# fill missing Fare with median fare for each Pclass\ntrain_data[\"Cabin\"].fillna(train_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest_data[\"Cabin\"].fillna(test_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","51a7b44e":"train_data[\"FamilySize\"] = train_data[\"SibSp\"] + train_data[\"Parch\"] + 1\ntest_data[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"] + 1","8c47c6aa":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train_data['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","98abcba4":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","6fd29958":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain_data = train_data.drop(features_drop, axis=1)\ntest_data = test_data.drop(features_drop, axis=1)\ntrain_data = train_data.drop(['PassengerId'], axis=1)","39d9e749":"trainx = train_data.drop('Survived', axis=1)\ntarget = train_data['Survived']\n\ntrainx.shape, target.shape","5cdbfb73":"train_data.head()","66917deb":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","a5423f54":"train_data.info()","aea35d57":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","9cdc811f":"#for all models\nscoring = 'accuracy'","0ead56ad":"clf = KNeighborsClassifier(n_neighbors = 13)\nscore = cross_val_score(clf, trainx, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","45a0eb9c":"# kNN Score\nround(np.mean(score)*100, 2)","0565e314":"clf = DecisionTreeClassifier()\nscore = cross_val_score(clf, trainx, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","91e169f5":"# decision tree Score\nround(np.mean(score)*100, 2)","d97a3ff1":"clf = RandomForestClassifier(n_estimators=13)\nscore = cross_val_score(clf, trainx, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","7d084b32":"# Random Forest Score\nround(np.mean(score)*100, 2)","0250446c":"clf = GaussianNB()\nscore = cross_val_score(clf, trainx, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","57ee3446":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","34a7cb5d":"clf = SVC()\nscore = cross_val_score(clf, trainx, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","c28036f1":"round(np.mean(score)*100,2)","f648bf0c":"clf = SVC()\nclf.fit(trainx, target)\n\ntestx = test_data.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(testx)","8cd7f104":"submission = pd.DataFrame({\n        \"PassengerId\": test_data[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","48724186":"submission = pd.read_csv('submission.csv')\nsubmission.head()","9f81a163":"# Modelling","847df95f":"# 1. KNN ","ec425cda":"**3. Feature engineering**","0db3c674":"# 5. SVM","7f52b430":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)\nfrom sklearn.ensemble import RandomForestClassifier\ny = train_data[\"Survived\"]\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f0375af5":"Random forest classifier using sex feature","30dc208e":"# Testing","5ee79bbd":"# 3. Random Forest","73e39704":"# 2. Decision Tree ","e4bde35a":"**Bar Chart for Categorical Features**\n* Pclass\n* Sex\n* SibSp ( # of siblings and spouse)\n* Parch ( # of parents and children)\n* Embarked\n* Cabin","5078cd6e":"For k-fold cross validation","789edc97":"4.4.2 Binning\nBinning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4","8cb649d9":"# 4. Naive Bayes"}}