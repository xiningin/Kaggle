{"cell_type":{"6bd9e9f1":"code","28df9221":"code","5e39a7de":"code","cdd4dc82":"code","cff92b22":"code","4a52ecbd":"code","357c1de1":"code","51b4efdd":"code","cacfbe2c":"code","cb825a04":"code","a96bfff6":"code","014c4e02":"code","3ae987c7":"code","584eec23":"code","da898d09":"code","ed5d8a71":"code","21068b3a":"code","69a8a0ec":"code","60cedf6b":"code","589d0669":"code","fcfb319d":"code","1478aa2f":"code","8ea3f37b":"code","c1bbc815":"code","fcbb40ed":"code","68124c23":"code","36649c29":"code","3dca67f6":"code","8a82bfe3":"markdown","d14d0234":"markdown","ac09192e":"markdown","74c0547d":"markdown","9bd659dd":"markdown","1378d33a":"markdown","956708bf":"markdown"},"source":{"6bd9e9f1":"# Importing Required Libraries\nimport cv2\nimport os\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nfrom glob import glob\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, BatchNormalization\nfrom keras.layers import Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\n%matplotlib inline ","28df9221":"image = cv2.imread('..\/input\/cotton-disease-dataset\/Cotton Disease\/train\/diseased cotton leaf\/dis_leaf (101)_iaip.jpg')\nplt.figure(figsize=(10,10)) \nplt.title(' Cotton Leaf with Disease')\nplt.imshow(image)","5e39a7de":"image = cv2.imread('..\/input\/cotton-disease-dataset\/Cotton Disease\/train\/diseased cotton plant\/dd (104)_iaip.jpg')\nplt.figure(figsize=(10,10)) \nplt.title(' Cotton Plant with Disease')\nplt.imshow(image)","cdd4dc82":"image = cv2.imread('..\/input\/cotton-disease-dataset\/Cotton Disease\/train\/fresh cotton leaf\/d (100)_iaip.jpg')\ntype(image)\nplt.figure(figsize=(10,10)) \nplt.title(' Fresh Cotton Leaf')\nplt.imshow(image)","cff92b22":"image = cv2.imread('..\/input\/cotton-disease-dataset\/Cotton Disease\/train\/fresh cotton plant\/dsd (143)_iaip.jpg')\nplt.figure(figsize=(10,10)) \nplt.title(' Fresh Cotton Plant')\nplt.imshow(image)","4a52ecbd":"train_datagenerator = ImageDataGenerator(rescale = 1.0\/255,\n                                        shear_range = 0.2,\n                                        zoom_range = 0.5,\n                                        horizontal_flip = True,\n                                        rotation_range=10,\n                                        width_shift_range=0.2,\n                                        brightness_range=[0.2,1.2]\n                                        )\ntest_datagenerator = ImageDataGenerator(rescale = 1.0\/255)","357c1de1":"train_data = train_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/train',\n                                                    target_size = (256,256),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')\ntest_data = test_datagenerator.flow_from_directory('..\/input\/cotton-disease-dataset\/Cotton Disease\/val',\n                                                  target_size = (256,256),\n                                                    batch_size = 32,\n                                                    class_mode = 'categorical')","51b4efdd":"# CNN Model\ncnn = tf.keras.models.Sequential()\n# Convolution \ncnn.add(tf.keras.layers.Conv2D(filters=64,padding = \"same\",kernel_size=3,activation='relu',input_shape=[256,256,3]))\ncnn.add(tf.keras.layers.Conv2D(filters=32,padding = \"same\",kernel_size=3,activation='relu'))\n# pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n# Convolution\ncnn.add(tf.keras.layers.Conv2D(filters=16,padding = \"same\",kernel_size=3,activation='relu'))\ncnn.add(tf.keras.layers.Conv2D(filters=16,padding = \"same\",kernel_size=3,activation='relu'))\n#pooling\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2,strides=2))\n\n#flaterning\ncnn.add(tf.keras.layers.Flatten())\ncnn.add(tf.keras.layers.Dense(units=128,activation='relu'))\ncnn.add(tf.keras.layers.Dense(units=128,activation='relu'))\n# Output layer\ncnn.add(tf.keras.layers.Dense(units=4,activation='softmax'))","cacfbe2c":"# Compiling the CNN\ncnn.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","cb825a04":"# Training the CNN on the Training set and evaluating it on the Test set\nhistory = cnn.fit(x = train_data, validation_data = test_data, epochs = 10)","a96bfff6":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","014c4e02":"from keras.applications.vgg16 import VGG16","3ae987c7":"IMAGE_SIZE = [224, 224]\nvgg16 = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)","584eec23":"for layer in vgg16.layers:\n    layer.trainable = False","da898d09":"folders = glob('\/kaggle\/input\/cotton-disease-dataset\/Cotton Disease\/train\/*')\n","ed5d8a71":"    x = Flatten()(vgg16.output)","21068b3a":"prediction = Dense(len(folders), activation='softmax')(x)\n\n#create a model object\nmodel = Model(inputs=vgg16.input, outputs=prediction)","69a8a0ec":"model.summary()","60cedf6b":"# Compile the Model\nmodel.compile( loss='categorical_crossentropy',\n               optimizer='adam',\n               metrics=['accuracy'])","589d0669":"\ntrain_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)","fcfb319d":"# Make sure you provide the same target size as initialied for the image size\ntraining_set = train_datagen.flow_from_directory('\/kaggle\/input\/cotton-disease-dataset\/Cotton Disease\/train',\n                                                 target_size = (224, 224),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","1478aa2f":"test_set = test_datagen.flow_from_directory('\/kaggle\/input\/cotton-disease-dataset\/Cotton Disease\/test',\n                                            target_size = (224, 224),\n                                            batch_size = 32,\n                                            class_mode = 'categorical')","8ea3f37b":"# Fit the model\nr = model.fit_generator( training_set,\n                         validation_data=test_set,\n                        epochs=20,\n                        steps_per_epoch=len(training_set),\n                         validation_steps=len(test_set))","c1bbc815":"# plot the loss\nplt.plot(r.history['loss'], label='train loss')\nplt.plot(r.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\n\n# plot the accuracy\nplt.plot(r.history['accuracy'], label='train acc')\nplt.plot(r.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\n","fcbb40ed":"import numpy as np\nfrom tensorflow.keras.preprocessing import image\ntest_image = image.load_img('..\/input\/cotton-disease-dataset\/Cotton Disease\/test\/fresh cotton leaf\/d (133)_iaip.jpg', target_size = (224, 224))\nimgplot = plt.imshow(test_image)\ntest_image = image.img_to_array(test_image)\ntest_image=test_image\/255\ntest_image = np.expand_dims(test_image, axis = 0)\npreds = model.predict(test_image)","68124c23":"preds","36649c29":"preds = np.argmax(preds, axis=1)","3dca67f6":"if preds==0:\n  print(\"The leaf is diseased cotton leaf\")\nelif preds==1:\n  print(\"The leaf is diseased cotton plant\")\nelif preds==2:\n  print(\"The leaf is fresh cotton leaf\")\nelse:\n  print(\"The leaf is fresh cotton plant\")\n","8a82bfe3":"# Cotton Disease Prediction","d14d0234":"### Building Model","ac09192e":"![image.png](attachment:c1e68fef-11f5-4aca-8916-d959df893f77.png)!","74c0547d":"![image.png](attachment:84256452-d2fa-45e1-967b-9a375cf89eaf.png)","9bd659dd":"## Transfer Learning","1378d33a":"### VGG16","956708bf":"### Preprocessing"}}