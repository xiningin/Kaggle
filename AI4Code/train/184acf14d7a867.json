{"cell_type":{"a5f3462f":"code","d9c91a02":"code","37305ba7":"code","81e084eb":"code","86e1e9de":"code","fa59ea29":"code","07649802":"code","27c46802":"code","f2ae499e":"code","fdb76d43":"code","56fc3f67":"code","d40d545e":"code","a69547cf":"code","f4b2407e":"code","8f1fb1f4":"code","a3413753":"code","11dab439":"code","d556d8f9":"code","84849758":"code","22cf0ae1":"code","33f08043":"code","8cfd9881":"code","697cc809":"code","84885314":"code","1c8e6723":"code","fc719cf9":"code","2815bdaa":"code","726ec115":"code","8cc7fd70":"code","141b4d81":"code","e7895066":"code","cb2985ae":"code","f10bf56f":"code","d6469f89":"code","d4a4dd70":"code","91f6cb5a":"code","7cab507b":"code","7e289888":"code","2ebf603b":"code","8545fb88":"code","79eb3cfe":"code","8d5d1563":"markdown","29494668":"markdown","d4f5e074":"markdown","969b3ab3":"markdown","2ea42359":"markdown","99052436":"markdown","b8e44376":"markdown","8e71f7e8":"markdown"},"source":{"a5f3462f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9c91a02":"per_capita_gdp = pd.read_csv(\"..\/input\/gdp-per-capita-all-countries\/GDP.csv\")","37305ba7":"pd.set_option('max_rows',10)\nper_capita_gdp","81e084eb":"per_capita_gdp.columns","86e1e9de":"per_capita_gdp.columns = per_capita_gdp.columns.str.strip()\nper_capita_gdp.columns","fa59ea29":"per_capita_gdp_2018=per_capita_gdp.loc[:,['Country','2018']]\nper_capita_gdp_2018","07649802":"sum(per_capita_gdp_2018.iloc[:,1].isnull())","27c46802":"per_capita_gdp_2018.loc[per_capita_gdp_2018.iloc[:,1].isnull()]","f2ae499e":"pip install xlrd","fdb76d43":"pip install openpyxl","56fc3f67":"\nolympic_performance = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx')\nolympic_performance","d40d545e":"olympic_score=10*olympic_performance.Gold+5*olympic_performance.Silver+2*olympic_performance.Bronze","a69547cf":"\nolympic_performance['Score']=olympic_score\nolympic_performance","f4b2407e":"final_performance = olympic_performance.iloc[:,[1,7]]\nfinal_performance","8f1fb1f4":"merged_dataframe=pd.merge(final_performance,per_capita_gdp_2018,right_on='Country',left_on='Team\/NOC',how='inner')\nmerged_dataframe","a3413753":"\nnot_matched = final_performance.loc[~final_performance['Team\/NOC'].isin(merged_dataframe.Country)]\nnot_matched['Team\/NOC']","11dab439":"final_performance['Team\/NOC'].replace([\"United States of America\",\n                 \"People's Republic of China\",\n                  \"Great Britain\",\n                           \"ROC\",\n                          \n             \"Republic of Korea\",\n      \"Islamic Republic of Iran\",\n                \n                       \"Bahamas\",\n                     \"Venezuela\",\n              \"Hong Kong, China\",\n                      \"Slovakia\",\n                         \"Egypt\",\n                   \"Kyrgyzstan\",\n                 \"C\u00f4te d'Ivoire\",\n           \"Republic of Moldova\"],['United States','China','United Kingdom','Russian Federation','Korea, Rep.','Iran, Islamic Rep.','Bahamas, The','Venezuela, RB','Hong Kong SAR, China','Slovak Republic','Egypt, Arab Rep.','Kyrgyz Republic',\"Cote d'Ivoire\",\"Moldova\"],inplace=True)","d556d8f9":"final_performance","84849758":"merged_dataframe_new=pd.merge(final_performance,per_capita_gdp_2018,right_on='Country',left_on='Team\/NOC',how='inner')\nmerged_dataframe_new_nonull=merged_dataframe_new.loc[merged_dataframe_new[\"2018\"].notnull()]\nmerged_dataframe_new_nonull","22cf0ae1":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nx=merged_dataframe_new_nonull[\"2018\"]\ny=merged_dataframe_new_nonull[\"Score\"]\ndef r2(x, y):\n    return stats.pearsonr(x, y)[0] ** 2\nsns.scatterplot(x,y)\n\n\nplt.xlabel(\"GDP per Capita\")\nplt.ylabel(\"Olympic Score\")","33f08043":"print(r2(x,y))","8cfd9881":"population = pd.read_csv(\"..\/input\/population-by-country-2020\/population_by_country_2020.csv\")\npopulation","697cc809":"population_2020 = population.iloc[:,[0,1]]\npopulation_2020","84885314":"\nmerge_score_gdp_poulation=pd.merge(merged_dataframe_new_nonull,population_2020,left_on = \"Country\",right_on=\"Country (or dependency)\",how=\"inner\")\nmerge_score_gdp_poulation","1c8e6723":"merged_dataframe_new_nonull.Country.loc[~merged_dataframe_new_nonull.Country.isin(merge_score_gdp_poulation.Country)]","fc719cf9":"population_2020[\"Country (or dependency)\"].replace(['Russia','South Korea','Czech Republic (Czechia)','Bahamas','Hong Kong','Slovakia','Egypt','Kyrgyzstan',\"C\u00f4te d'Ivoire\"],[       \"Russian Federation\",\n             \"Korea, Rep.\",\n          \"Czech Republic\",\n            \"Bahamas, The\",\n                  \n    \"Hong Kong SAR, China\",\n         \"Slovak Republic\",\n        \"Egypt, Arab Rep.\",\n         \"Kyrgyz Republic\",\n           \"Cote d'Ivoire\"],inplace=True)","2815bdaa":"merge_score_gdp_poulation_new=pd.merge(merged_dataframe_new_nonull,population_2020,left_on = \"Country\",right_on=\"Country (or dependency)\",how=\"inner\")\nmerge_score_gdp_poulation_new","726ec115":"merge_high_pop_country=merge_score_gdp_poulation_new.loc[merge_score_gdp_poulation_new[\"Population (2020)\"]>10000000]","8cc7fd70":"x=merge_high_pop_country[\"2018\"]\ny=merge_high_pop_country[\"Score\"]\nsns.regplot(x,y)","141b4d81":"print(r2(x,y))","e7895066":"atheletes = pd.read_excel(\"..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx\")","cb2985ae":"athelete_count=atheletes.groupby(\"NOC\").NOC.count().sort_values(ascending=False)\nathelete_count.name = \"Contingent_size\"\nathelete_count","f10bf56f":"plt.figure(figsize=(10,6))\nsns.barplot(x=athelete_count[:25],y=athelete_count.index[:25])\nplt.title(\"Top 25 Countries by contingent size\")\nplt.xlabel(\"Number of atheletes\")\nplt.ylabel(\"Country\")","d6469f89":"plt.figure(figsize=(13,4))\nsns.swarmplot(y=athelete_count,size=5)\n","d4a4dd70":"athelete_count.describe()","91f6cb5a":"sum(athelete_count)","7cab507b":"contingent_size_vs_pop=pd.merge(athelete_count, population_2020, left_on =\"NOC\" , right_on =\"Country (or dependency)\" , how = \"inner\")\ncontingent_size_vs_pop","7e289888":"category_of_pop=[]\nfor a in list(contingent_size_vs_pop[\"Population (2020)\"]):\n    if a<1000000:\n        category_of_pop.append(\"very small\")\n    elif a<10000000:\n        category_of_pop.append(\"small\")\n    elif a<100000000:\n        category_of_pop.append(\"large\")\n    else:\n        category_of_pop.append(\"very large\")\ncontingent_size_vs_pop[\"category_of_population\"] = pd.Series(category_of_pop) \ncontingent_size_vs_pop\n        \n        ","2ebf603b":"plt.figure(figsize=(13,10))\n\nsns.swarmplot(data=contingent_size_vs_pop,x=\"Contingent_size\",y=\"category_of_population\",size=4.3)","8545fb88":"olympic_performance_similar_countries= pd.read_csv(\"..\/input\/olympic-contingent-and-medals\/Olympic_total_athletes_and_medals.csv\")\nplt.figure(figsize=(14,8))\nsns.relplot(data=olympic_performance_similar_countries.loc[olympic_performance_similar_countries.Year>=1980],x=\"Year\",y=\"Total_athletes\",hue=\"Country\",size=\"Total_athletes\",sizes=(10,2000),alpha=1,palette=\"muted\",height=8)\n","79eb3cfe":"plt.figure(figsize=(14,8))\nsns.scatterplot(data=olympic_performance_similar_countries.loc[olympic_performance_similar_countries.Year>=1980],x=\"Year\",y=\"Total_medals\",size=\"Total_medals\",sizes=(10,2000),hue=\"Country\",alpha=0.9)","8d5d1563":"Contributor: Shivam Sachdeva and Rishabh Solanki","29494668":"## No significant corelation, though it increased a little bit.","d4f5e074":"## No corelation between per capita GDP and Olympic performance","969b3ab3":"# Olympic Performance vs Per Capita GDP","2ea42359":"# Contingent Size Analysis","99052436":"## Let us only keep countries with significant population(>1,00,00,000)","b8e44376":"# India's comparision with similar countries ","8e71f7e8":"## Let us test a hypothesis that a country's per capita gdp is positively corelated with performance in olympics"}}