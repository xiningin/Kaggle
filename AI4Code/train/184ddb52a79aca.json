{"cell_type":{"08e5841e":"code","fda7c642":"code","33bda050":"code","070fe6a3":"code","cf95b0dd":"code","980ce60c":"code","bd497cb9":"code","522ea3c9":"code","1f2f1cf1":"code","3f73b24a":"code","8a8596f7":"code","b6f588ce":"code","f2c6fff2":"code","8cae7865":"code","498493cb":"code","9ff0f1f3":"code","eab62082":"code","ee29c454":"code","dedea337":"code","05bfd023":"code","1992e7ad":"code","7ea9a118":"code","3b05b0b4":"code","ba887812":"code","295f39af":"code","e1938da9":"code","26897def":"code","6e94888e":"code","f854f0d3":"code","c45fc438":"code","fb7b5fa4":"code","ea2a09a1":"code","d851ea69":"code","df2fcf9f":"code","54a30bf3":"code","efb61c36":"code","7a80dd20":"code","230148dd":"code","c4a3bd24":"code","9f45afac":"code","44093283":"code","c019961e":"code","5fe0f485":"code","bbc723dc":"markdown"},"source":{"08e5841e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fda7c642":"df=pd.read_csv('\/kaggle\/input\/employee-attrition\/HR-Employee-Attrition.csv')","33bda050":"df[:5]","070fe6a3":"df.info()","cf95b0dd":"df.describe()","980ce60c":"df.columns","bd497cb9":"df_category_columns = df.select_dtypes(exclude=np.number).columns\ndf_category_columns[:10]","522ea3c9":"df_number_columns = df.select_dtypes(include=np.number).columns\ndf_number_columns[:25]","1f2f1cf1":"# Age left as it is as it is a numerical column\ndf['Age'].nunique()","3f73b24a":"# Attrition is our target variable but the 'No' is very much higher than 'Yes'\n### Need to fine tune later\ndf['Attrition'].value_counts()","8a8596f7":"# Label Encode the Attrition Column\ndf['Attrition'] = np.where(df['Attrition'] == 'No', 0, 1)","b6f588ce":"df[:5]","f2c6fff2":"#One Hot Encoding of Business Travel , Department, Educational Field, Marital Status\n\n#'BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'Over18', 'OverTime'\n\ndata_to_encode = df[df_category_columns].drop(columns = ['Gender', 'Over18', 'OverTime'] )\ndata_to_encode[:3]","8cae7865":"df_category_encoded =  pd.get_dummies(data_to_encode)","498493cb":"df_category_encoded[:5]","9ff0f1f3":"# Concatenating One hot encoded values , numerical columns and other non-encoded columns\ndf_final = pd.concat([df_category_encoded, df[df_number_columns] ,    \n                      df[['Gender', 'Over18', 'OverTime']]], axis = 1)","eab62082":"df_final.head()","ee29c454":"df_final.info()","dedea337":"# Label Encoding of Gender\ndf_final['Gender'] = np.where(df_final['Gender'] == 'Male', 0, 1)","05bfd023":"# Label Encoding of OverTime\ndf_final['OverTime'] = np.where(df_final['OverTime'] == 'Yes', 1, 0)","1992e7ad":"df_final[:5]","7ea9a118":"#Remove EmployeeCount Column as it adds no value\ndel df_final['EmployeeCount']","3b05b0b4":"#Remove EmployeeNumber Column as its values are in a linear format \ndel df_final['EmployeeNumber']","ba887812":"#Remove Over18 Column as its values are all 'Y'\ndel df_final['Over18']","295f39af":"# Remove StandardHours as its value is always '80'\ndel df_final['StandardHours']","e1938da9":"df_final[:5]","26897def":"df_final.info()","6e94888e":"import matplotlib.pyplot as plt\nimport seaborn as sns","f854f0d3":"df.corr()","c45fc438":"sns.displot(df_final['MonthlyIncome'])\nplt.show()","fb7b5fa4":"sns.displot(df['BusinessTravel'])\nplt.show()","ea2a09a1":"from sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix, recall_score, precision_score, f1_score, roc_auc_score\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures","d851ea69":"y = df_final.pop('Attrition')","df2fcf9f":"df_final[:5]","54a30bf3":"train_x, test_x, train_y, test_y = train_test_split(df_final, y, test_size = 0.25, random_state=43)","efb61c36":"model = LogisticRegression(max_iter=5000)\n","7a80dd20":"model.fit(train_x, train_y)","230148dd":"model.coef_, model.intercept_","c4a3bd24":"train_pred = model.predict(train_x)\ntest_pred = model.predict(test_x)","9f45afac":"def metric_score(actual, pred):\n    print('confusion matrix: ', confusion_matrix(actual, pred))\n    print('accuracy score: ', accuracy_score(actual, pred))\n    print('recall_score: ', recall_score(actual, pred))\n    print('precision score: ', precision_score(actual, pred))\n    print('f1 score: ', f1_score(actual, pred))\n    print('roc auc score: ', roc_auc_score(actual, pred))\n    print('classification report : ', classification_report(actual, pred))","44093283":"metric_score(train_y, train_pred)","c019961e":"from sklearn.metrics import plot_roc_curve","5fe0f485":"plot_roc_curve(model, test_x, test_y)","bbc723dc":"# # # **Modelling**"}}