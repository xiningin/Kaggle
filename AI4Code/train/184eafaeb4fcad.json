{"cell_type":{"4a1290f0":"code","e62af891":"code","ae0e0a3b":"code","2b05f6fe":"code","a1df9dae":"code","9b131d0b":"code","4d0665e0":"code","bdb6087a":"code","2d0b67a1":"code","5470dff0":"code","cc293bd9":"code","f314e697":"code","cba65657":"code","6ed3117d":"code","3a7bab40":"code","df83529e":"code","711bbc79":"code","feff7c77":"code","23977c70":"code","87d61095":"code","8f76e012":"code","634f162c":"code","efd26d92":"code","7ef3a06d":"code","7a084903":"code","e9f49dee":"code","4fb7c5d4":"code","a7fcf228":"code","decc1d74":"code","b3bc0a51":"code","4e8462ce":"code","a5250f44":"code","64db96e1":"code","59aebf0d":"code","947e74d8":"code","008bdf75":"code","6d4e5984":"code","6dbbe5be":"code","5715fbda":"code","2367a672":"code","a9e370d3":"code","d8533fc9":"code","814129ee":"code","6e970aa1":"code","cb9e45bf":"code","9ce3efd9":"code","8f0e9bb5":"code","c113bc07":"code","f159cfe9":"code","ad39d805":"code","bbae752b":"code","ab49dde1":"code","f9a89f04":"code","77720fef":"code","f77a17a1":"code","2a70ca60":"code","18d12b5c":"code","44173059":"code","228c6290":"code","b9248bb8":"code","94c53eb1":"code","d6f38de5":"code","46092564":"code","c0e1e9f9":"code","b155447d":"code","197f95b5":"code","971a49ee":"code","5a54a7df":"code","06229dc7":"code","a786d6ab":"code","735310bb":"code","4f455d6f":"code","317d9b97":"code","62705489":"code","7fd26b40":"markdown","acb6b2b3":"markdown","69a59eba":"markdown","1c73b052":"markdown","e7abd1b0":"markdown","ae8a43f0":"markdown","15b3f65d":"markdown","aa5b7e07":"markdown","e75206bf":"markdown","33b24828":"markdown","3f7adabc":"markdown","492dff1e":"markdown","f9b79e2b":"markdown","7fec7814":"markdown","5e3880b4":"markdown","040f1426":"markdown","4209999d":"markdown","ebd5d524":"markdown","b92c1043":"markdown","9b9a59ce":"markdown","d27627c7":"markdown","70048f55":"markdown","b5a38ea7":"markdown","32ddf355":"markdown","86b00f44":"markdown","7f2f0955":"markdown","5d6c26d1":"markdown","75604ef8":"markdown","d2d00d34":"markdown","579e430c":"markdown","d07ae18b":"markdown","7e6c8839":"markdown","b29ea3e0":"markdown","bc4cb2d3":"markdown","18c2c1a5":"markdown","dac1c716":"markdown","bb7f6f42":"markdown","c6847f83":"markdown","d1513678":"markdown","a6615a4b":"markdown","2308fdfe":"markdown","9de0d088":"markdown","a6498f1c":"markdown","e683b1a9":"markdown","0a39bfa7":"markdown","a3c1b453":"markdown","76e472ac":"markdown","5a9cfbe7":"markdown","0735dc0f":"markdown","c21aab5e":"markdown","1704767d":"markdown","8a7b325f":"markdown","dff7a0f5":"markdown","2c8de8d7":"markdown","ef5dcc8d":"markdown","8e8ca092":"markdown","343f0904":"markdown","7eb07d76":"markdown","1271cc8e":"markdown","c5841530":"markdown","6b438c14":"markdown","0b0e6ff7":"markdown","3298f02e":"markdown","0472daa9":"markdown","6d8c56ca":"markdown","c6cbb6e5":"markdown","3f408410":"markdown","ed315fc8":"markdown","5c00d41c":"markdown","01f81c35":"markdown","2a345dda":"markdown","398f523d":"markdown","01e6914e":"markdown","82132713":"markdown","42611a9d":"markdown","6f6bc8d8":"markdown","f181a974":"markdown","e7700df1":"markdown"},"source":{"4a1290f0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#data visualizations\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nhotel_data = pd.read_csv(\"\/kaggle\/input\/hotel-booking-demand\/hotel_bookings.csv\")\n","e62af891":"# !pip install pandas\n# !pip install seaborn\n# !pip install sklearn\n","ae0e0a3b":"#data processing\nimport pandas as pd\nimport numpy as np\n\n\n#data visualizations\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nsns.set_style(\"whitegrid\")\n\n","2b05f6fe":"SMALL_SIZE = 12\nMEDIUM_SIZE = 14\nBIGGER_SIZE = 16\n\n\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)","a1df9dae":"# hotel_data = pd.read_csv('data\/hotel_bookings.csv')","9b131d0b":"hotel_data.shape","4d0665e0":"hotel_data.head(4)","bdb6087a":"hotel_data.info()","2d0b67a1":"hotel_data.describe()","5470dff0":"eda_data = hotel_data.copy()\neda_data['is_canceled'] = eda_data.is_canceled.replace([1,0],[\"Cancelled\",\"Not Cancelled\"])\neda_data['is_repeated_guest'] = hotel_data.is_repeated_guest.replace([1,0],[\"Repeated\",\"Not Repeated\"])\n\n\nsns.countplot(x='is_canceled', data=eda_data)\nplt.title('Canceled Distributions', fontsize=14)","cc293bd9":"hotel_data['is_canceled'].value_counts()\/hotel_data.shape[0]*100","f314e697":"\n\nnumeric_variables_normal = ['lead_time','arrival_date_week_number','total_of_special_requests']\n\nnumeric_variables_normal2 = ['arrival_date_day_of_month', 'arrival_date_year','stays_in_weekend_nights',\n                             'stays_in_week_nights','babies', 'booking_changes', 'company', 'adr']\n\n\nnumeric_variables_log1 = ['adults','children','previous_cancellations']\nnumeric_variables_log2 = ['previous_bookings_not_canceled','days_in_waiting_list','required_car_parking_spaces']","cba65657":"\n#      reservation_status_date\n#  30  reservation_status              \n","6ed3117d":"categorical_variables = ['country', 'market_segment', 'agent','arrival_date_month', 'meal', 'reserved_room_type', 'assigned_room_type' ]\nfor i in categorical_variables:\n    print((\"{} : {} \\n\").format(i,hotel_data[i].nunique()))","3a7bab40":"plt.figure(figsize=(18,6))\ncountry_booking = hotel_data['country'].value_counts(normalize=True).rename_axis('country').reset_index(name='Percentage')\nsns.barplot(x='country', y='Percentage', data=country_booking.head(10))\nplt.title('Country of Customers')\nplt.show()","df83529e":"#generate a figures grid:\nfig, axes = plt.subplots(2,3,figsize=(22,12))\nfig.subplots_adjust(hspace=0.5)\n\n#we will create a histogram for each categorical attribute\nn=len(categorical_variables[1:])\nnum_rows = 3\nmax_bars = 8\n\nfor i,variable in enumerate(categorical_variables[1:]):\n    #calculate the current place on the grid\n    r=int(i\/num_rows)\n    c=i%num_rows\n    \n    #create the \"value counts\" for the first <max_bars> categories:\n    u=min(hotel_data[variable].nunique(),max_bars)\n    vc = hotel_data[variable].value_counts()[:u]\n    \n    # plot a bar chart using Pandas\n    vc.plot(kind='bar',ax=axes[r,c],title=variable , color=\"rbgkm\"[i%5])","711bbc79":"binary_variables = ['hotel', 'is_repeated_guest','is_canceled', 'distribution_channel', 'deposit_type', 'customer_type']","feff7c77":"plt.rcParams.update({'font.size': 10})\n#initialize a Matplotlib figures grid\nfig, axes = plt.subplots(2,3,figsize=(18,8))\n                         \nfig.subplots_adjust(hspace=0.5)\n\n#we will create a histogram for each categorical attribute\nn=len(binary_variables)\nnum_rows = 3\n                    \n#generate a histogram using Pandas, for each numeric variable\nfor i, var in enumerate(binary_variables):\n    r=int(i\/num_rows)\n    c=i%num_rows         \n    eda_data[var].value_counts().plot.pie(ax=axes[r,c] ,autopct=\"%.2f%%\")\n    \n\n","23977c70":"numeric_variables_normal = ['lead_time','arrival_date_week_number','total_of_special_requests']\n\nnumeric_variables_normal2 = ['arrival_date_day_of_month', 'arrival_date_year','stays_in_weekend_nights',\n                             'stays_in_week_nights','babies', 'booking_changes', 'company', 'adr']","87d61095":"# Show numeric_variables\n#initialize a Matplotlib figures grid\nfig, axes = plt.subplots(1, len(numeric_variables_normal),figsize=(18,3))\n\n#generate a histogram using Pandas, for each numeric variable\nfor ind,var in enumerate(numeric_variables_normal):\n    hotel_data[var].hist(ax=axes[ind],edgecolor='black' ,color=\"rbgkm\"[ind%5])\n    axes[ind].set_title(var)\n","8f76e012":"sns.kdeplot(hotel_data[\"lead_time\"], kernel='epa')","634f162c":"fig, axes = plt.subplots(2,4,figsize=(18,8))\nfig.subplots_adjust(hspace=0.5)\n\n#we will create a histogram for each categorical attribute\nn=len(numeric_variables_normal2)\nnum_rows = 4\n\nfor i,var in enumerate(numeric_variables_normal2):\n    #calculate the current place on the grid\n    r=int(i\/num_rows)\n    c= i%num_rows\n    \n    \n    hotel_data[var].hist(ax=axes[r,c] ,edgecolor='black' ,color=\"rbgkm\"[i%5]).set_title(var)\n\n    ","efd26d92":"fig, axs = plt.subplots(1,3, figsize=(22,3))\n\nsns.boxplot(hotel_data.stays_in_weekend_nights, ax=axs[0])\naxs[0].set_title(\"Stays in weekend - box plot\")\n\nsns.boxplot(hotel_data.stays_in_week_nights, ax=axs[1])\naxs[1].set_title(\"stays in week nights - box plot\")\n\n\ncountry_booking = hotel_data['stays_in_week_nights'].value_counts(normalize=True).rename_axis('stays_in_week_nights').reset_index(name='Percentage')\nsns.barplot(ax=axs[2], x='stays_in_week_nights', y='Percentage', data=country_booking.head(10))\nplt.title('stays_in_week_nights')\n","7ef3a06d":"fig, axs = plt.subplots(1,3, figsize=(22,3))\n\n\ncountry_booking = hotel_data['babies'].value_counts(normalize=True).rename_axis('babies').reset_index(name='Percentage')\nsns.barplot(ax=axs[0], x='babies', y='Percentage', data=country_booking.head(5))\naxs[0].set_title('babies (top 5)')\n\ncg = hotel_data[hotel_data[\"babies\"] > 0]\ncountry_booking = cg['babies'].value_counts(normalize=True).rename_axis('babies').reset_index(name='Percentage')\nsns.barplot(ax=axs[1], x='babies', y='Percentage', data=country_booking.head(5))\naxs[1].set_title('babies more than 1 (top 5)')\n\n\ncountry_booking = hotel_data['booking_changes'].value_counts(normalize=True).rename_axis('booking_changes').reset_index(name='Percentage')\nsns.barplot(ax=axs[2], x='booking_changes', y='Percentage', data=country_booking.head(5))\nplt.title('booking_changes')","7a084903":"fig, axs = plt.subplots(1,2, figsize=(12,3))\n\nsns.kdeplot(hotel_data[\"adr\"], kernel='epa', ax=axs[0])\naxs[0].set_title(\"Adr - kdeplot\")\n\n# days in waiting list not 0.. (boxplot)\n\ncg = hotel_data[hotel_data[\"adr\"] < 1000]\nsns.boxplot(cg[\"adr\"], ax=axs[1])\naxs[1].set_title(\"Adr - box plot\")","e9f49dee":"numeric_variables_log1 = ['adults','children','previous_cancellations']\nnumeric_variables_log2 = ['previous_bookings_not_canceled','days_in_waiting_list','required_car_parking_spaces']\n# Const\nbins = []\nfor x in range(-1,5400,1):\n    bins.append(x+0.5)","4fb7c5d4":"# Show numeric_variables: \n#initialize a Matplotlib figures grid\nfig, axes = plt.subplots(1, len(numeric_variables_log1),figsize=(24,3))\n\n\n#generate a histogram using Pandas, for each numeric variable\nfor ind,var in enumerate(numeric_variables_log1):\n    max_value = int(hotel_data[var].max())\n    slice_object = slice(max_value)\n    hotel_data[var].hist(ax=axes[ind],bins=bins[slice_object], edgecolor='black', log=True)\n    axes[ind].set_title(var)","a7fcf228":"# Show numeric_variables:\n#initialize a Matplotlib figures grid\nfig, axes = plt.subplots(1, len(numeric_variables_log2),figsize=(24,3))\n\n#generate a histogram using Pandas, for each numeric variable\nfor ind,var in enumerate(numeric_variables_log2):\n    max_value = int(hotel_data[var].max())\n    slice_object = slice(max_value)\n    hotel_data[var].hist(ax=axes[ind],bins=bins[slice_object], edgecolor='black', log=True)\n    axes[ind].set_title(var)","decc1d74":"# days in waiting list not 0.. (boxplot)\nfig, axs = plt.subplots(1,1, figsize=(6,4))\n\ncg = hotel_data[hotel_data[\"days_in_waiting_list\"] > 0]\nsns.boxplot(cg[\"days_in_waiting_list\"])","b3bc0a51":"_, ax = plt.subplots( nrows = 2, ncols = 1, figsize = (12,8))\nsns.countplot(x = 'market_segment', data = hotel_data, ax = ax[0])\nsns.countplot(x = 'market_segment', data = hotel_data, hue = 'is_canceled', ax = ax[1])\nplt.show()","4e8462ce":"# Number of Canceled Each Month\n\n# We can simply use a countplot as we sre visualising categorical data\nplt.figure(figsize=(20,5))\n\n# data we will use in a list\nl1 = ['is_canceled','arrival_date_month']\n\n# plotting\nsns.countplot(data = hotel_data[l1],x= \"arrival_date_month\",hue=\"is_canceled\",order=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\n                                                                              \"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]).set_title(\n'Illustration of Number of Canceled Each Month')\nplt.xlabel('Month')\nplt.ylabel('Count')","a5250f44":"hotel_data.groupby(['arrival_date_year'])['is_canceled'].mean()","64db96e1":"fig, axs = plt.subplots(2,1, figsize=(16,12))\n\n\n# We can simply use a countplot as we sre visualising categorical data\n# plt.figure(figsize=(20,5))\n\n# data we will use in a list\nl1 = ['is_canceled','arrival_date_week_number']\n\n# plotting\nsns.countplot(ax = axs[0], data = hotel_data[l1],x= \"arrival_date_week_number\").set_title(\n'Illustration of Canceled Each week')\n\n# plotting\nsns.countplot(ax = axs[1], data = hotel_data[l1],x= \"arrival_date_week_number\",hue=\"is_canceled\").set_title(\n'Illustration of Canceled Each week')\n","59aebf0d":"_, ax = plt.subplots( nrows = 1, ncols = 2, figsize = (18,4))\nsns.countplot(x = 'deposit_type', data = hotel_data, hue = 'hotel', ax = ax[0])\nsns.countplot(x = 'deposit_type', data = hotel_data, hue = 'is_canceled', ax = ax[1])\nplt.show()","947e74d8":"# Let's look into how much of bookings were cancelled in each type of hotel\nfig, axs = plt.subplots(1,2, figsize=(16,3))\n\nsns.countplot(x = 'hotel', data = hotel_data, ax = axs[0], order = hotel_data['hotel'].value_counts().index).set_title('city and resort hotel')\n\nlst1 = ['is_canceled', 'hotel']\ntype_of_hotel_canceled = eda_data[lst1]\ncanceled_hotel = type_of_hotel_canceled[type_of_hotel_canceled['is_canceled'] == 'Cancelled'].groupby(['hotel']).size().reset_index(name = 'count')\ncanceled_hotel\nsns.barplot(data = canceled_hotel, x = 'hotel', y = 'count', ax=axs[1]).set_title('Graph showing cancellation rates in city and resort hotel')","008bdf75":"hotel_data.groupby(['hotel'])['is_canceled'].mean()","6d4e5984":"fig, axs = plt.subplots(1,3, figsize=(22,3))\n\n\n# We will just look at number of children that canceled booking.\nsns.countplot(ax=axs[0], data=hotel_data,x='children',hue='is_canceled').set_title(\"Illustration of number of children canceling booking\")\n\n# We will just look at number of babies that canceled booking.\nsns.countplot(ax=axs[1],data=hotel_data,x='babies',hue='is_canceled').set_title(\"Illustration of number of babies canceling booking\")\n\n\nsns.countplot(ax=axs[2],data=hotel_data,x='adults',hue='is_canceled').set_title(\"Illustration of number of babies canceling booking\")\n","6dbbe5be":"_, ax = plt.subplots( nrows = 1, ncols = 2, figsize = (18,5))\nsns.countplot(x = 'customer_type', data = hotel_data, ax = ax[0])\nsns.countplot(x = 'customer_type', data = hotel_data, hue = 'is_canceled', ax = ax[1])\nplt.show()","5715fbda":"_, ax = plt.subplots( nrows = 1, ncols = 2, figsize = (18,5))\nsns.countplot(x = 'reservation_status', data = hotel_data, ax = ax[0])\nsns.countplot(x = 'reservation_status', data = hotel_data, hue = 'is_canceled', ax = ax[1])\nplt.show()","2367a672":"clean_data = hotel_data.copy()\n\nclean_data.fillna({\"children\": 0}, inplace=True)\n\n# missing countries can be labeled unknown\nclean_data.fillna({\"country\": \"Unknown\"}, inplace=True)\n\n# missing agent ID can be zero, presuming the booking was made privately\nclean_data.fillna({\"agent\": 0}, inplace=True)\n\n# missing company ID can be zero (for the same reason as agent ID)\nclean_data.fillna({\"company\": 0}, inplace=True)","a9e370d3":"clean_data.isnull().sum()\/clean_data.shape[0]*100","d8533fc9":"corr_matrix = clean_data.corr(method='spearman')\nfig, ax = plt.subplots(figsize=(25,25))\nsns.heatmap(clean_data.corr(method='spearman'),annot=True,linewidths=.5)\n","814129ee":"corr_matrix = clean_data.corr()\ncorr_matrix[\"is_canceled\"].sort_values(ascending=False)","6e970aa1":"# hist plot of lead time\n# kde = kernel density estimation (displays distribution function, density curve)\n# shows the distribution and highest concentration points\nplt.figure(figsize=(10,5))\nlead_time = clean_data['lead_time']\nlead_time = pd.DataFrame(sorted(lead_time, reverse = True), columns = ['Lead'])\nsns.histplot(lead_time, kde=True)\nplt.title(\"Lead Time\", size=20)\nplt.xlabel(\"lead time days\", size=15)\nplt.tight_layout()\nplt.show()","cb9e45bf":"lead_time_1 = clean_data[clean_data[\"lead_time\"] < 50]\nlead_time_2 = clean_data[clean_data[\"lead_time\"] < 100]\nlead_time_3 = clean_data[clean_data[\"lead_time\"] < 150]\nlead_time_4 = clean_data[clean_data[\"lead_time\"] < 200]\nlead_time_5 = clean_data[(clean_data[\"lead_time\"] >= 200) & (clean_data[\"lead_time\"] < 365)]\nlead_time_6 = clean_data[clean_data[\"lead_time\"] >= 365]\n# calculates cancellations according to lead time groups\nlead_cancel_1 = lead_time_1[\"is_canceled\"].value_counts()\nlead_cancel_2 = lead_time_2[\"is_canceled\"].value_counts()\nlead_cancel_3 = lead_time_3[\"is_canceled\"].value_counts()\nlead_cancel_4 = lead_time_4[\"is_canceled\"].value_counts()\nlead_cancel_5 = lead_time_5[\"is_canceled\"].value_counts()\nlead_cancel_6 = lead_time_6[\"is_canceled\"].value_counts()","9ce3efd9":"# total count of lead time according to cancellation\ntotal_lead_days_cancel = pd.DataFrame(data=[lead_cancel_1,lead_cancel_2,lead_cancel_3,lead_cancel_4,lead_cancel_5,lead_cancel_6],\n                                      index=[\"[0,50) days\",\"[50,100) days\",\"[100,150) days\",\"[150,200) days\",\"200,365) days\",\"[365,max) days\"])\n\n# pie plot for each lead time group\nfig, ax = plt.subplots(2,3, figsize=(15,6))\nax[0,0].pie(np.array([total_lead_days_cancel[0][0], total_lead_days_cancel[1][0]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[0,0].set_title(\"lead_time [0,50) days\", size=15)\nax[0,1].pie(np.array([total_lead_days_cancel[0][1], total_lead_days_cancel[1][1]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[0,1].set_title(\"lead_time [50,100) days\", size=15)\nax[0,2].pie(np.array([total_lead_days_cancel[0][2], total_lead_days_cancel[1][2]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[0,2].set_title(\"lead_time [100,150) days\", size=15)\n\n\nax[1,0].pie(np.array([total_lead_days_cancel[0][3], total_lead_days_cancel[1][3]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[1,0].set_title(\"lead_time [150,200) days\", size=15)\n\nax[1,1].pie(np.array([total_lead_days_cancel[0][4], total_lead_days_cancel[1][4]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[1,1].set_title(\"lead_time [200,356) days\", size=15)\n\nax[1,2].pie(np.array([total_lead_days_cancel[0][5], total_lead_days_cancel[1][5]]),\n          labels=[\"not_canceled\", \"canceled\"], autopct='%1.1f%%', startangle=90,\n          colors=['forestgreen', 'firebrick'])\nax[1,2].set_title(\"lead_time [356,max) days\", size=15)\n\nplt.tight_layout()\nplt.show()","8f0e9bb5":"# plot special requests according to cancellations\nplt.figure(figsize=(10,5))\nsns.countplot(x=clean_data[\"total_of_special_requests\"], hue=clean_data[\"is_canceled\"])\nplt.title(\"Special Requests\", size=20)\nplt.xlabel(\"Number of Special Requests\", size=15)\nplt.legend([\"not canceled\", \"canceled\"])\nplt.tight_layout()\nplt.show()\n\n# Nearly half of the bookings without special requests are canceled.","c113bc07":"var_a = 'lead_time'\nvar_b = 'total_of_special_requests'\n\ncanceled = clean_data[clean_data['is_canceled'] == 1]\nnot_canceled = clean_data[clean_data['is_canceled'] == 0]","f159cfe9":"sns.set(color_codes=True)\nfig,ax=plt.subplots(figsize=(16,8))\n\nsns.regplot(var_a, var_b, canceled,ax=ax, \n            scatter_kws={\"marker\": \".\", \"color\": \"blue\"},\n            line_kws = {\"linewidth\": \"1\", \"color\": \"blue\"},\n            order = 3,\n            label = 'canceled')\nsns.regplot(var_a, var_b, not_canceled,ax=ax, \n            scatter_kws={\"marker\": \".\", \"color\": \"orange\"},\n            line_kws = {\"linewidth\": \"1\", \"color\": \"orange\"},\n            order = 3,\n            label = 'not canceled')\n\nfig.legend(loc=\"lower right\")\nfig.suptitle(f\"Scatter plot of {var_a} and {var_b}\")","ad39d805":"hot_data = clean_data.copy()","bbae752b":"hot_data = hot_data.drop('reservation_status_date', axis = 1)\nhot_data = hot_data.drop('reservation_status', axis = 1)\nhot_data.info()","ab49dde1":"\nfrom sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\n# hot_data = hot_data.drop('reservation_status_date', axis = 1)\n# hot_data = hot_data.drop('reservation_status', axis = 1)\n\nhot_data = pd.get_dummies(hot_data, prefix='Category_', columns=['hotel','arrival_date_month','meal','country','market_segment',\n                                                                'distribution_channel','reserved_room_type','assigned_room_type',\n                                                                'deposit_type','customer_type'])\n\ny = hot_data['is_canceled']\nX = hot_data.drop('is_canceled',axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)\n\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)\ny_pred = clf.predict(X_test)\nprint(hot_data.shape)\nprint(accuracy_score(y_test,y_pred))","f9a89f04":"def setDictionary(dictionary,unique_data_arr): \n    for i in range (len(unique_data_arr)):\n        dictionary[unique_data_arr[i]] = i\n    return dictionary","77720fef":"# hotel to bool\nclean_data['hotel']= clean_data['hotel'].replace([\"Resort Hotel\",\"City Hotel\"],[1,0])\n\n# arrival_date_month to int \nmonth_dict = {'January': 0, 'February': 1, 'March': 2, 'April': 3, 'May': 4, 'June': 5, 'July': 6, 'August': 7, 'September': 8, 'October': 9, 'November': 10, 'December': 11} \nclean_data['arrival_date_month']= clean_data['arrival_date_month'].map(month_dict)\n\n# meal to int \nmeal_dict = {'BB':1, 'FB':2 ,'HB':3, 'SC':4 ,'Undefined':0}\nclean_data['meal'] = clean_data['meal'].map(meal_dict)\n\n\n# countery to int \ncountry_dict ={}\ncountry_arr = clean_data['country'].unique()\ncountry_dict = setDictionary(country_dict, clean_data['country'].unique())\nclean_data['country'] = clean_data['country'].map(country_dict)\n\n# market_segment to int \nmarket_segment_dict ={}\nmarket_segment_dict = setDictionary(market_segment_dict,clean_data['market_segment'].unique())\nclean_data['market_segment'] = clean_data['market_segment'].map(market_segment_dict) \n\n# distribution_channel to int\ndistribution_channel_dict = {}\ndistribution_channel_dict = setDictionary(distribution_channel_dict,clean_data['distribution_channel'].unique())\nclean_data['distribution_channel'] = clean_data['distribution_channel'].map(distribution_channel_dict) \n\n# reserved_room_type to int\nreserved_room_type_dict = {}\nreserved_room_type_dict = setDictionary(reserved_room_type_dict,clean_data['reserved_room_type'].unique())\nclean_data['reserved_room_type'] = clean_data['reserved_room_type'].map(reserved_room_type_dict)\n\n# assigned_room_type_dict TO INT \nassigned_room_type_dict = {}\nassigned_room_type_dict = setDictionary(assigned_room_type_dict, clean_data['assigned_room_type'].unique())\nclean_data['assigned_room_type'] = clean_data['assigned_room_type'].map(assigned_room_type_dict)\n\n# deposit_typ TO INT \ndeposit_type_dict = {}\ndeposit_type_dict = setDictionary(deposit_type_dict,clean_data['deposit_type'].unique())\nclean_data['deposit_type'] = clean_data['deposit_type'].map(deposit_type_dict)\n\n# customer_type TO INT \ncustomer_type_dict = {}\ncustomer_type_dict = setDictionary(customer_type_dict, clean_data['customer_type'].unique())\nclean_data['customer_type'] = clean_data['customer_type'].map(customer_type_dict)\n\n# reservation_status TO INT \nreservation_status_dict = {}\nreservation_status_dict = setDictionary(reservation_status_dict,clean_data['reservation_status'].unique())\nclean_data['reservation_status'] = clean_data['reservation_status'].map(reservation_status_dict)\n\n# reservation_status_date TO INT \nreservation_status_date_dict ={}\nreservation_status_date_dict =setDictionary(reservation_status_date_dict, clean_data['reservation_status_date'].unique())\nclean_data['reservation_status_date'] = clean_data['reservation_status_date'].map(reservation_status_date_dict)\n\nclean_data.info()","f77a17a1":"corr_matrix = clean_data.corr()\ncorr_matrix[\"is_canceled\"].sort_values(ascending=False)","2a70ca60":"clean_data = clean_data.drop('reservation_status_date', axis = 1)\nclean_data = clean_data.drop('reservation_status', axis = 1)","18d12b5c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix, roc_curve, roc_auc_score,auc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import load_iris","44173059":"y = clean_data['is_canceled']\nX = clean_data.drop('is_canceled',axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)","228c6290":"from sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\n\nclf = LogisticRegression(random_state=0).fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nprint(accuracy_score(y_test,y_pred))","b9248bb8":"clean_data.info()","94c53eb1":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2)\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\n\ny_pred_knn = knn.predict(x_test)\n\nacc_knn = accuracy_score(y_test, y_pred_knn)\nconf = confusion_matrix(y_test, y_pred_knn)\nclf_report = classification_report(y_test, y_pred_knn)\n\nprint(f\"Accuracy Score of KNN is : {acc_knn}\")\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")","d6f38de5":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123,criterion='entropy')\n\ndtree.fit(x_train,y_train)\nDecisionTreeClassifier(criterion='entropy', max_depth=6, random_state=123)\ny_pred=dtree.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore","46092564":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\nRandomForestClassifier()\ny_pred=rfc.predict(x_test)\nconf =print(confusion_matrix(y_test, y_pred))\nclf =print(classification_report(y_test, y_pred))\nscore=accuracy_score(y_test,y_pred)\nscore","c0e1e9f9":"from sklearn import metrics\n","b155447d":"# test_class = oh_test['class']\n# expected = test_class.values\n# oh_test_data= oh_test.drop('class',axis=1)\n\ntest_is_canceled = clean_data['is_canceled']\nexpected = test_is_canceled.values\ncleaned_data = clean_data.drop('is_canceled',axis=1)\n","197f95b5":"# predicted = logreg.predict(oh_test_data)\n# predicted_probs = logreg.predict_proba(oh_test_data)\n\npredicted = clf.predict(cleaned_data)\npredicted_probs = clf.predict_proba(cleaned_data)","971a49ee":"print(metrics.classification_report(expected, predicted))","5a54a7df":"import sklearn.metrics\n","06229dc7":"y_true = expected\ny_score = predicted_probs[:,1]","a786d6ab":"def plotPR(precision, recall):\n    plt.figure()\n    plt.plot(recall, precision, label='PR curve')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.0])\n    plt.xlabel('Recall')\n    plt.ylabel('Precision')\n    plt.title('Precision Recall curve')\n    plt.legend(loc='lower left')\n    plt.show()","735310bb":"precision, recall, thresholds = sklearn.metrics.precision_recall_curve(y_true, y_score, pos_label=1)\nplotPR(precision, recall)","4f455d6f":"def plotRoc(fpr, tpr, auc):\n    plt.figure()\n    plt.plot(fpr, tpr, label='ROC curve (AUC = %0.2f)' % auc)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.0])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()","317d9b97":"auc = sklearn.metrics.roc_auc_score(y_true, y_score)\nfpr, tpr, thresholds = sklearn.metrics.roc_curve(y_true, y_score)\nplotRoc(fpr, tpr, auc)","62705489":"\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\ny = clean_data['is_canceled']\nX = clean_data.drop('is_canceled',axis = 1)\nx_train,x_test,y_train,y_test=train_test_split(X,y,random_state=0,test_size=0.2)\nknn = KNeighborsClassifier()\nknn.fit(x_train, y_train)\n\ny_pred_knn = knn.predict(x_test)\n\nacc_knn = accuracy_score(y_test, y_pred_knn)\nconf = confusion_matrix(y_test, y_pred_knn)\nclf_report = classification_report(y_test, y_pred_knn)\n\nprint(f\"Accuracy Score of KNN is : {acc_knn}\")\nprint(f\"Confusion Matrix : \\n{conf}\")\nprint(f\"Classification Report : \\n{clf_report}\")","7fd26b40":"### Special Requests","acb6b2b3":"delet  Reservation status...","69a59eba":"### Columns & Data types","1c73b052":"* Same order for customer of bookings and cancellation rate","e7abd1b0":"#### ADR - Average Daily Rate\n    Calculated by dividing the sum of all lodging transactions by the total number of staying nights\n* Can see an average in the 95 range and most of the data is between 90 and 115\n* There is a some data that is considered extreme (over 210)","ae8a43f0":"### Lead time","15b3f65d":"* Most hotels are City hotel: 66% \n* The vast majority of customers are not repeat visitors\n* In the most of the hotel no policy of diposit\n* Most of thr custumer are transient (when the booking is not part of a group or contract)\n* The most poplar Distribution Channel is \u201cTA\u201d means \u201cTravel Agents\u201d and \u201cTO\u201d means \u201cTour Operators\u201d","aa5b7e07":"* The vast majority of orders are with zero babys\n* Those who did book with a baby usually booked for a single baby\n* Most people do not change their order","e75206bf":"#### We will check if there are strong ties with the features we created","33b24828":"## Comparative Visualizations To Cancellation :","3f7adabc":"* Most bookings are for 1 adult or more (2 is must commen)\n* Most customers do not have children (or at least did not include them in the order)\n* Most people have not previously canceled an order before the current orde\n\n#### Can see that there are slight noises in the data : \n* There are data showing over 20 guests and even 50\n* Or order with 10 babies (unlikely)","492dff1e":"#### There are 32 columns.\n* 12 Categorical\n* 20 Numerical\n\n#### There are 4 columns with the missing values-\n* country\n* agent\n* company\n* children","f9b79e2b":"### Market segment vs Cancellations","7fec7814":"## Clean The Data ( part 2 ) :","5e3880b4":"# Hotel Data Analysis - Prediction of Cancellation\n\n## Workshop on Data Science","040f1426":"## Introducing the various features :\n","4209999d":"#### There is a strong connection between the number of requests and the cancellations\n* The more requests there are the chance of cancellation decreases significantly\n* One request is enough to greatly reduce the chance of cancellation","ebd5d524":"### 0.2 Import Python Libraries","b92c1043":"##  Distribution :","9b9a59ce":"###  Class distribution","d27627c7":"### Customer profile vs Cancellations","70048f55":"* PRT or Portugal has the most booking demand based on the data (more than 60%). It is pretty obvious because if we trace to the publication page, the description tells us that the data source locations are from hotels located in Portugal.","b5a38ea7":"* The average time to be on the waiting list is 0.5\n* The vast majority of straight orderers are happy and not waiting on the waiting list\n  <br>But those who waited usually waited about 50 days\n* Most of the waiters are in the range of 40 to 90\n* There are extreme values that have waited over 170 days (half a year or more)","32ddf355":"## Data Info :","86b00f44":"## Correlation Heat Map of features","7f2f0955":"## Clean The Data ( part 1 ) :","5d6c26d1":"* A strong connection can be seen between the two features\n* **Because this is the feature we predict we will delete it at the cleaning stage**","75604ef8":"### 0.1 install libraries","d2d00d34":"#  2. Model :","579e430c":"#### It can be clearly seen, as the lead time increases the chance of cancellation increases :\n* And that does make sense, since there is more time to cancel, and the chances of change are greater","d07ae18b":"* It can be seen that according to previous orders most customers do not cancel orders\n* Most people do not require parking, and those who do, ask for one","7e6c8839":"## Depth analysis of the strong bond :","b29ea3e0":"### Data Statistics","bc4cb2d3":"* can assume that null is represents no children\n* missing countries can be labeled unknown\n* missing agent ID can be zero, presuming the booking was made privately\n* missing company ID can be zero (for the same reason as agent ID)\n","18c2c1a5":"#### At this stage, we will examine only the numerical features (later we will convert additional features)\n\n#### The must strong connections are between cancelesion and this features:\n* lead_time \n* total_of_special_requests\n* required_car_parking_spaces\n* previous_cancellations","dac1c716":"* Most of the columns are full - according to the count line\n* Avg. lead time is 104 days, around 3.5 months.\n* Each booking has on an average 1.8 adults and 0.1 children.\n* Only 3% of the guests are repeated.\n* Median lead time is 69 days.","bb7f6f42":"# 3. Evaluate results\n","c6847f83":"### Reservation status vs Cancellations","d1513678":"#### Arrival year","a6615a4b":"### Categories to Numbers :","2308fdfe":"* There does not appear to be a direct link between the customer profile and the cancellations.\n* We will later choose to try and convert these features to a single feature (After cleaning and arranging)","9de0d088":"* There are extreme values - people who have booked for more than 5 weeks (over a month)\n* The avarge pf stay in weekend is 1.19 day and weekday is 3.13\n* More than 25 percent order 2 days a week","a6498f1c":"#### Arrival date month","e683b1a9":"# 1. Exploration (EDA) & Visualization\n","0a39bfa7":"# TODO DELETE!!!!!!\n\nhotel -> bool,\n\narrival_date_month ->  int  ? hot\n\nmeal_dict -> int ? hot \/\/ TODO\n\ncountry -> int  ? hot \/\/ TODO\n\nmarket_segment to int  ? hot \/\/ TODO\n\ndistribution_channel to int ? hot \/\/ TODO\n\nreserved_room_type to int ? hot \/\/ TODO (or orde)\n\nassigned_room_type_dict TO INT ? hot \/\/ TODO (or orde)\n\ndeposit_typ TO INT ? hot \/\/ TODO\n\ncustomer_type TO INT ? hot \/\/ TODO\n\n\nuse this\nhttps:\/\/github.com\/amitsomech\/DS-WORKSHOP\/blob\/master\/DS%20Pipeline%20Example\/End%20to%20End%20Simple%20DS%20Pipeline.ipynb\ntodo?:\n1. hot vs int (1:07:00 in lec2 line 531)\n2. befor reservation_status_date & reservation_status\n3. eda all the categorical features\n4. int to bins (1:02:00 in lec2 or line 525) \n\nextra?: \n4. add holiday \n5. Adding amount of people feature\n6. Adding expensive and cheap (eta)\n7. adding Early late","a3c1b453":"### Customer type vs Cancellations","76e472ac":"## Imports","5a9cfbe7":"### Numeric Variables :","0735dc0f":"### Hotel type vs Cancellations","c21aab5e":"### Categories to One Hot :","1704767d":"### 0.3 Reading the Datase","8a7b325f":"### Date vs Cancellations","dff7a0f5":"* Arrival time is kind of uniform distributed, the most popular is arrival at the end of the month\n* At 2016 was most of the arrival\n* There are 236 different companies (id) where some of the data in them is null\n\n#### Some of the plots are not informative so we will show them more plots:","2c8de8d7":"#### Arrival week number","ef5dcc8d":"### Delete features :","8e8ca092":"* It can be seen that the order of the amount of orders in market segment does change in cancellations filter:\n<br> **from -** \n<br> &emsp; Online TA -> Offline TA -> Groups -> Direct -> Corporate\n<br> **To -**\n<br> &emsp; Online TA -> **Groups** -> **Offline TA** -> Direct -> Corporate\n\n#### It is possible that order in a group increased the chances of cancellations\n","343f0904":"## A combination of the two features","7eb07d76":"#### Summary  date vs cancellations:\n* The cancellation rate is quite consistently high during april to october having its peak at august.\n* There is no direct effect between the month and the amount of cancellations\n* This year does not affect the cancellation at all around 36%\n*There are weeks when the cancellation ratio changes slightly but not something extreme\n\n","1271cc8e":"* Can see similarities between the graphs\n*There are weeks when the cancellation ratio changes slightly but not something extreme","c5841530":"#### All features are number now","6b438c14":"### Size of the Dataset","0b0e6ff7":"**Evaluation Plots**","3298f02e":"#### High dependence between reservation_status and is_canceled  (0.980601)","0472daa9":"### Replace missing value","6d8c56ca":"* Week 30 is the most popular week for August bookings (holiday)\n* Earlier lead time is more common\n* Most visitors do not make special requests","c6cbb6e5":"* reserved_room_type and assigned_room_type similar, We will examine later the option to unify or download one of them\n* Agent 9 is the most popular\n* We will present the orders by months in a more orderly manner below\n* The most common meal is BB (Bed & Breakfast)","3f408410":"**ROC Curve**","ed315fc8":"### Categorical Variables :","5c00d41c":"### Deposit  type vs Cancellations","01f81c35":"* Avg. lead time is 104 days, around 3.5 months.\n* Median lead time is 69 days.\n* The decrease in lead time can be seen as time increases\n","2a345dda":"### The following plot shows the two points presented earlier\n* Relationship between the number of requests and cancellations\n* Relationship between order time and cancellations\n\n### In the plot it can be seen that looking at the two features together allows for understanding (partial prediction) at a higher probability.\n* The sheer majority of the blue dots in the lower right quarter of the graph","398f523d":"* City hotel has high Cancellation rate than Resort Hotel.\n* Around 27% for resort hotel and greater than 40 % for city hotel.\n\n#### There seems to be a connection between the type of hotel and the chance of cancellation","01e6914e":"#### Distribution of lead time:","82132713":"#### Canceled Distribution :\n* Not Canceled: 62.96%\n* Canceled: 37.04%","42611a9d":"#### Binary Variables :","6f6bc8d8":"* Deposit type has 3 categories - No Deposit, refundable, Non Refund\n* Either customers have opted for no deposit or non refundable deposits.\n* Maybe refundable deposit type is not offered by the hotels.\n* All of the non refund bookings have been cancelled in our dataset. That might prove important feature based on how many such   bookings are part of cancelled bookings.\n* No hotel has refundable deposit type\n\n* In city hotel is more common Non Refund deposit policy ","f181a974":"**Precision-Recall Curve**","e7700df1":"## Data distribution (train, test)"}}