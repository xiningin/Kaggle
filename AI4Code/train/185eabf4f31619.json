{"cell_type":{"251f77a1":"code","0ab8232c":"code","9c427061":"code","f0baa4c2":"code","613da1e7":"code","a86b12e6":"code","5dcca309":"code","a1ba75ee":"code","31c5b518":"code","89f3998a":"code","76a6464f":"code","f3104bf4":"code","a1c0610a":"code","89e59728":"code","1217729d":"code","8543cb43":"code","b21e1c72":"code","00881c98":"code","1293dfaa":"code","e746e88c":"code","ae7cde8e":"code","aa39bf3d":"code","796aaffe":"code","447cf044":"code","0f8b9982":"code","85c9fc20":"code","f015efe9":"code","0b5a53c0":"markdown","f0720511":"markdown","23b25fa4":"markdown","d8fdc068":"markdown","f389b125":"markdown","54d01f14":"markdown","6f971bd2":"markdown","21f0e39a":"markdown","905ba761":"markdown","774e421a":"markdown","58e38865":"markdown","0f4b88c6":"markdown"},"source":{"251f77a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ab8232c":"%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport xgboost\nimport lightgbm\n\nfrom mlxtend.plotting import plot_confusion_matrix\n\nfrom colorama import Fore, Back, Style \n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom catboost import CatBoostClassifier","9c427061":"heart_data = pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\nheart_data.head()","f0baa4c2":"Features = ['time','ejection_fraction','serum_creatinine']\nx = heart_data[Features]\ny = heart_data[\"DEATH_EVENT\"]\nx_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=2)","613da1e7":"accuracy_list = []","a86b12e6":"# logistic regression\n\nlog_reg = LogisticRegression()\nlog_reg.fit(x_train, y_train)\nlog_reg_pred = log_reg.predict(x_test)\nlog_reg_acc = accuracy_score(y_test, log_reg_pred)\naccuracy_list.append(100*log_reg_acc)","5dcca309":"print(\"Accuracy of Logistic Regression model is : \", 100*log_reg_acc)","a1ba75ee":"cm = confusion_matrix(y_test, log_reg_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap = plt.cm.Blues)\nplt.title(\"Logistic Regression Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.yticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.show()\n","31c5b518":"# svc \n\nsv_clf = SVC()\nsv_clf.fit(x_train, y_train)\nsv_clf_pred = sv_clf.predict(x_test)\nsv_clf_acc = accuracy_score(y_test, sv_clf_pred)\naccuracy_list.append(100*sv_clf_acc)","89f3998a":"print(\"Accuracy of SVC is : \", 100*sv_clf_acc)","76a6464f":"cm = confusion_matrix(y_test, sv_clf_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap = plt.cm.Blues)\nplt.title(\"SVC Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.yticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.show()\n","f3104bf4":"# K Neighbors Classifier\n\nkn_clf = KNeighborsClassifier(n_neighbors=6)\nkn_clf.fit(x_train, y_train)\nkn_pred = kn_clf.predict(x_test)\nkn_acc  = accuracy_score(y_test, kn_pred)\naccuracy_list.append(100*kn_acc)","a1c0610a":"print(\"Accuracy of K Neighbors Classifier is : \", 100*kn_acc)","89e59728":"cm = confusion_matrix(y_test, kn_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize = (12,8), hide_ticks=True, cmap = plt.cm.Blues)\nplt.title(\"K Neighbors Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.yticks(range(2), [\"Heart Not Failed\", \"Heart Fail\"], fontsize = 16)\nplt.show()\n","1217729d":"# Decision Tree Classifier\n\ndt_clf = DecisionTreeClassifier(max_leaf_nodes=3, random_state=0, criterion='entropy')\ndt_clf.fit(x_train, y_train)\ndt_pred = dt_clf.predict(x_test)\ndt_acc = accuracy_score(y_test, dt_pred)\naccuracy_list.append(100*dt_acc)","8543cb43":"print(\"Accuracy of Decision Tree Classifier is : \", 100* dt_acc)","b21e1c72":"cm = confusion_matrix(y_test, dt_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Decision Tree Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","00881c98":"\n\nr_clf = RandomForestClassifier(max_features=0.5, max_depth=15, random_state=1)\nr_clf.fit(x_train, y_train)\nr_pred = r_clf.predict(x_test)\nr_acc = accuracy_score(y_test, r_pred)\naccuracy_list.append(100*r_acc)","1293dfaa":"print(\"Accuracy of RandomForestClassifier is : \", 100*r_acc)","e746e88c":"cm = confusion_matrix(y_test, r_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Random Forest Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()","ae7cde8e":"# GradientBoostingClassifier\n\ngradientboost_clf = GradientBoostingClassifier(max_depth=2, random_state=1)\ngradientboost_clf.fit(x_train,y_train)\ngradientboost_pred = gradientboost_clf.predict(x_test)\ngradientboost_acc = accuracy_score(y_test, gradientboost_pred)\naccuracy_list.append(100*gradientboost_acc)","aa39bf3d":"print(\"Accuracy of GradientBoostingClassifier is : \", 100*gradientboost_acc)","796aaffe":"cm = confusion_matrix(y_test, gradientboost_pred)\nplt.figure()\nplot_confusion_matrix(cm, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Blues)\nplt.title(\"Gredient Boosting Model - Confusion Matrix\")\nplt.xticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.yticks(range(2), [\"Heart Not Failed\",\"Heart Fail\"], fontsize=16)\nplt.show()\n","447cf044":"# CatBoostClassifier\n\ncat_clf = CatBoostClassifier()\ncat_clf.fit(x_train,y_train)\ncat_pred = cat_clf.predict(x_test)\ncat_acc = accuracy_score(y_test, cat_pred)\naccuracy_list.append(100*cat_acc)","0f8b9982":"print (\"Accuracy of CatBoostClassifier is :\", 100*cat_acc)","85c9fc20":"model_list = ['Logistic Regression', 'SVC','KNearestNeighbours', 'DecisionTree', 'RandomForest',\n              'GradientBooster','CatBoostClassifier']","f015efe9":"import seaborn as sns\n\nplt.rcParams['figure.figsize']=20,8\nsns.set_style('darkgrid')\nax = sns.barplot(x=model_list, y=accuracy_list, palette = \"husl\", saturation =2.0)\nplt.xlabel('Classifier Models', fontsize = 20 )\nplt.ylabel('% of Accuracy', fontsize = 20)\nplt.title('Accuracy of different Classifier Models', fontsize = 20)\nplt.xticks(fontsize = 12, horizontalalignment = 'center', rotation = 8)\nplt.yticks(fontsize = 12)\nfor i in ax.patches:\n    width, height = i.get_width(), i.get_height()\n    x, y = i.get_xy() \n    ax.annotate(f'{round(height,2)}%', (x + width\/2, y + height*1.02), ha='center', fontsize = 'x-large')\nplt.show()","0b5a53c0":"\n\n<div class=\"alert alert-info\">  \n<h3><strong>Accuracy Results<\/strong><\/h3>\n<\/div>","f0720511":"<div class=\"alert alert-info\">  \n<h3><strong>Logistic Regression<\/strong><\/h3>\n<\/div>","23b25fa4":"<div class=\"alert alert-info\">  \n<h3><strong>Data Modeling<\/strong><\/h3>\n<\/div>","d8fdc068":"<div class=\"alert alert-info\">  \n<h3><strong>Decision Tree Classifier<\/strong><\/h3>\n<\/div>\n\n","f389b125":"<div class=\"alert alert-info\">  \n<h3><strong>RandomForestClassifier<\/strong><\/h3>\n<\/div>","54d01f14":"<div class=\"alert alert-info\">  \n<h3><strong>GradientBoostingClassifier<\/strong><\/h3>\n<\/div>","6f971bd2":"* Gradient Booster Classifier: 93.33%\n* KNeighborsClassifier: 91.67%\n* Cat Boost Classifier: 91.67%\n* Random Forest Classifier: 90.00%\n* DecisionTreeClassifier: 90.00%\n* SVC: 90.00%\n* Logistic Regression: 90.00%","21f0e39a":"train_test_split","905ba761":"<div class=\"alert alert-info\">  \n<h3><strong>Support Vector<\/strong><\/h3>\n<\/div>","774e421a":"<div class=\"alert alert-info\">  \n<h3><strong>Import Libraries<\/strong><\/h3>\n<\/div>","58e38865":"<div class=\"alert alert-info\">  \n<h3><strong>CatBoostClassifier<\/strong><\/h3>\n<\/div>","0f4b88c6":"<div class=\"alert alert-info\">  \n<h3><strong>K Neighbors Classifier<\/strong><\/h3>\n<\/div>"}}