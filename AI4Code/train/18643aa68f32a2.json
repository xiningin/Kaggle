{"cell_type":{"3946349c":"code","5a9a0e14":"code","dce970d7":"code","2d299c00":"code","5a9ef23e":"code","43e0e5d0":"code","3cfb0b36":"code","56b96e12":"code","19c41f3a":"code","516950f2":"code","753c3b25":"code","1873f938":"code","f891ba1c":"code","e0c20486":"code","334de329":"code","7b9e7ed2":"markdown","10a80441":"markdown","bd2f65b6":"markdown","ea901176":"markdown","9b81e7e1":"markdown"},"source":{"3946349c":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import StratifiedKFold\nfrom tqdm import tqdm\nfrom copy import deepcopy","5a9a0e14":"# let's define our own stratified validator \"with blackjack and hookers\" :)\nclass CustomStratifiedKFold:\n    \"\"\"\n    Faster (yet memory-heavier) stratified cross-validation split\n    Best suited for longer time-series with many different `y` groups\n    \"\"\"\n    def __init__(\n        self,\n        n_splits: int = 5,\n        shuffle: bool = True,\n        random_state: int = 42\n    ):\n        self.n_splits = n_splits\n        self.shuffle = shuffle\n        self.seed = random_state\n        self.folds_ = [(list(), list()) for _ in range(n_splits)]\n        self.randomizer_ = np.random.RandomState(random_state)\n        self.groups_ = None\n        self.counts_ = None\n        self.s_ = None\n\n    def split(self, X, y):\n        sorted_y = pd.Series(y).reset_index(drop=True).sort_values().astype('category').cat.codes\n        self.s_ = pd.Series(data=sorted_y.index.values, index=sorted_y)\n        self.groups_ = self.s_.index.unique()\n        self.counts_ = np.bincount(self.s_.index)\n\n        if self.n_splits > self.counts_.min():\n            raise ValueError(\n                f'Cannot split {self.counts_.min()} elements in smallest group on {self.n_splits} folds'\n            )\n\n        shift = 0\n        for cnt in tqdm(self.counts_, desc='processing unique strats'):\n            # get array of initial data's indices\n            arr = self.s_.iloc[shift:shift + cnt].values\n            # shuffle data if needed\n            if self.shuffle:\n                self.randomizer_.shuffle(arr)\n            folds = np.array_split(arr, self.n_splits)\n            # extend outer folds by elements from micro-folds\n            for i in range(self.n_splits):\n                cp = deepcopy(folds)\n                # extend val indices\n                val_chunk = cp.pop(i).tolist()\n                self.folds_[i][1].extend(val_chunk)\n                # extend train indices\n                if self.shuffle:\n                    cp = self.randomizer_.permutation(cp)\n                train_chunk = np.hstack(cp).tolist()\n                self.folds_[i][0].extend(train_chunk)\n\n            # shift to the next group\n            shift += cnt\n        assert shift == len(self.s_)\n\n        for (t, v) in self.folds_:\n            yield (\n                np.array(self.randomizer_.permutation(t) if self.shuffle else t, dtype=np.int32),\n                np.array(self.randomizer_.permutation(v) if self.shuffle else v, dtype=np.int32)\n            )","dce970d7":"from collections import defaultdict\n\nclass CustomStratifiedKFold2:\n    def __init__(self, n_splits: int = 5, shuffle: bool = True, random_state: int = 42):\n        self.n_splits    = n_splits\n        self.shuffle     = shuffle\n        self.randomizer_ = np.random.RandomState(random_state)\n\n    def split(self, X, y):\n        folds = defaultdict(lambda: np.zeros(len(y), dtype=np.int8))              # global fold reference\n\n        for i, (g, u) in enumerate(tqdm(pd.Series(y).groupby(by=y), desc='processing strats')):\n            strata = u.index.values                                               # array of initial data's indices for the given strata\n\n            l = len(strata)\n            if self.n_splits > l:\n                raise ValueError(f'Cannot split {l} elements in group {u} on {self.n_splits} folds')\n            \n            if self.shuffle:                                                      # shuffle if asked so\n                self.randomizer_.shuffle(strata)\n                \n            tl = l \/\/ self.n_splits\n            for j in range(self.n_splits):\n                folds[j][strata]                =  1                              # first set the whole strata to train\n                folds[j][strata[tl*j:tl*(j+1)]] =  2                              # now set the valid part \n                \n        for i in range(self.n_splits):\n            yield (folds[i] == 1, folds[i] == 2)","2d299c00":"N_FOLDS = 5\nSEED = 42\nSHUFFLE = True\nNUM_UNIQUES = 1000\nN = 7000000\n\nrandomizer = np.random.RandomState(SEED)\nstrat_column = pd.Series(randomizer.randint(0, NUM_UNIQUES, N, dtype=np.int32))\nprint(strat_column.nunique())\nstrat_column.head(10)","5a9ef23e":"%%time\n# let's check usual StratifiedKFold speed\nskf = StratifiedKFold(n_splits=N_FOLDS, shuffle=SHUFFLE, random_state=SEED)\n\nfolds = list(skf.split(\n    # we don't actually need `X` to produce indices, only `y`\n    X=np.zeros(len(strat_column)),\n    y=strat_column\n))","43e0e5d0":"# let's check whether class balance is preserved\nprint('train')\nprint(strat_column.iloc[folds[0][0]].value_counts(normalize=True).sort_index())\nprint('val')\nprint(strat_column.iloc[folds[0][1]].value_counts(normalize=True).sort_index())","3cfb0b36":"# check all indices are there in joined validation blocks\nassert len(set(np.hstack([v for (tr,v) in folds]).tolist())) == len(strat_column)","56b96e12":"%%time\n# let's check updated StratifiedKFold speed\nskf = CustomStratifiedKFold(n_splits=N_FOLDS, shuffle=SHUFFLE, random_state=SEED)\n\nfolds = list(skf.split(\n    # we don't actually need `X` to produce indices, only `y`\n    X=None,\n    y=strat_column\n))","19c41f3a":"# let's check whether class balance is preserved also in new method\nprint('train')\nprint(strat_column.iloc[folds[1][0]].value_counts(normalize=True).sort_index())\nprint('val')\nprint(strat_column.iloc[folds[1][1]].value_counts(normalize=True).sort_index())","516950f2":"# check all indices are there in joined validation blocks (also for the new strategy)\nassert len(set(np.hstack([v for (tr,v) in folds]).tolist())) == len(strat_column)","753c3b25":"N_FOLDS = 5\nSEED = 42\nSHUFFLE = True\nNUM_UNIQUES = 10000\nN = 20000000\n\nstrat_column = pd.Series(randomizer.randint(0, NUM_UNIQUES, N, dtype=np.int32))\nprint(strat_column.nunique())\nstrat_column.head(10)","1873f938":"%%time\n# let's check updated StratifiedKFold speed on heavier task (however, notice rapid memory peak)\n# don't try to run this with usual `StratifiedKFold` or prepare to wait A LOT\nskf = CustomStratifiedKFold(n_splits=N_FOLDS, shuffle=SHUFFLE, random_state=SEED)\n\nfolds = list(skf.split(\n    # we don't actually need `X` to produce indices, only `y`\n    X=None,\n    y=strat_column\n))","f891ba1c":"# let's check whether class balance is preserved also in new method\nprint('train')\nprint(strat_column.iloc[folds[1][0]].value_counts(normalize=True).sort_index())\nprint('val')\nprint(strat_column.iloc[folds[1][1]].value_counts(normalize=True).sort_index())","e0c20486":"%%time\nskf = CustomStratifiedKFold2(n_splits=N_FOLDS, shuffle=SHUFFLE, random_state=SEED)\n\nfolds = list(skf.split(\n    # we don't actually need `X` to produce indices, only `y`\n    X=None,\n    y=strat_column\n))","334de329":"# let's check whether class balance is preserved also in new method\nprint('train')\nprint(strat_column.iloc[folds[1][0]].value_counts(normalize=True).sort_index())\nprint('val')\nprint(strat_column.iloc[folds[1][1]].value_counts(normalize=True).sort_index())","7b9e7ed2":"### Let's create some fake data to test different approaches on","10a80441":"Here is my optimized version of \"[Faster stratified cross-validation (V2)](https:\/\/www.kaggle.com\/frednavruzov\/faster-stratified-cross-validation-v2)\".\n\nIt runs ca. 5 times faster than the original version and has such a plain-dumb logic that it is difficult to make a mistake :) At also has very low memory consumption.\n\nI reused almost the whole original notebook so that you could test yourself.\n\nThe new code is in the function CustomStratifiedKFold2","bd2f65b6":"### let's create real-world example","ea901176":"Well, almost as fast (or even faster at commiting mode) as `StratifiedKFold` on much smaller\/less diverse dataset!","9b81e7e1":" Well, even on smaller dataset we get** 3x+** speed improvement"}}