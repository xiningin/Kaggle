{"cell_type":{"cd14fdc8":"code","2ad0649b":"code","a2f522a1":"code","27b5df76":"code","fb77ceb6":"code","07fecb25":"code","08589c4a":"code","207171fd":"markdown"},"source":{"cd14fdc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nfrom IPython.core.display import HTML\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2ad0649b":"PATH = '\/kaggle\/input\/tensorflow2-question-answering\/'\n!ls {PATH}","a2f522a1":"train_head = []\nnrows = 5\n\nwith open(PATH+'simplified-nq-train.jsonl', 'rt') as f:\n    for i in range(nrows):\n        train_head.append(json.loads(f.readline()))\n\ntrain_df = pd.DataFrame(train_head)","27b5df76":"train_df","fb77ceb6":"def show_example(example_id):\n#     example_id = 5655493461695504401\n\n    example = train_df[train_df['example_id']==example_id]\n    document_text = example['document_text'].values[0]\n    question = example['question_text'].values[0]\n\n    annotations = example['annotations'].values[0]\n    la_start_token = annotations[0]['long_answer']['start_token']\n    la_end_token = annotations[0]['long_answer']['end_token']\n    long_answer = \" \".join(document_text.split(\" \")[la_start_token:la_end_token])\n    short_answers = annotations[0]['short_answers']\n    sa_list = []\n    for sa in short_answers:\n        sa_start_token = sa['start_token']\n        sa_end_token = sa['end_token']\n        short_answer = \" \".join(document_text.split(\" \")[sa_start_token:sa_end_token])\n        sa_list.append(short_answer)\n    \n    document_text = document_text.replace(long_answer,'<LALALALA>')\n    sa=False\n    la=''\n    for sa in short_answers:\n        sa_start_token = sa['start_token']\n        sa_end_token = sa['end_token']\n        for i,laword in enumerate(long_answer.split(\" \")):\n            ind = i+la_start_token\n            if ind==sa_start_token:\n                la = la+' SASASASA'+laword\n            elif ind==sa_end_token-1:\n                la = la+' '+laword+'SESESESE'\n            else:\n                la = la+' '+laword\n    #print(la)\n    html = '<div style=\"font-weight: bold;font-size: 20px;color:#00239CFF\">Example Id<\/div><br\/>'\n    html = html + '<div>' + str(example_id) + '<\/div><hr>'\n    html = html + '<div style=\"font-weight: bold;font-size: 20px;color:#00239CFF\">Question<\/div><br\/>'\n    html = html + '<div>' + question + ' ?<\/div><hr>'\n    html = html + '<div style=\"font-weight: bold;font-size: 20px;color:#00239CFF\">Document Text<\/div><br\/>'\n    \n    if la_start_token==-1:\n        html = html + '<div>There are no answers found in the document<\/div><hr>'\n    else:\n        la = la.replace('SASASASA','<span style=\"background-color:#C7D3D4FF; padding:5px\"><font color=\"#000\">')\n        la = la.replace('SESESESE','<\/font><\/span>')\n        document_text = document_text.replace('<LALALALA>','<div style=\"background-color:#603F83FF; padding:5px\"><font color=\"#fff\">'+la+'<\/font><\/div>')\n\n        #for simplicity, trim words from end of the document\n        html = html + '<div>' + \" \".join(document_text.split(\" \")[:la_end_token+200]) + ' <\/div>'\n    display(HTML(html))","07fecb25":"show_example(5328212470870865242)","08589c4a":"show_example(5655493461695504401)","207171fd":"To keep scroll bar short, content from the document text is trimmed at the end.\n\nLong answer is highlighted in dark blue, and short answers are in light blue."}}