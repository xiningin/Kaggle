{"cell_type":{"08a7e352":"code","7948638e":"code","65eb319c":"code","56f182b8":"code","d2f9fdd4":"code","407ebf75":"code","215677c4":"code","3440be7b":"code","f48fa1ab":"code","91513aa6":"code","dd8d1315":"code","c1fb11c0":"code","2c5be741":"code","2b8d4d42":"code","8e243a28":"code","5f9cafc0":"code","12e00d31":"code","5d1c1887":"code","91eae0cf":"code","9c88c458":"code","c6d33bd1":"code","0fb5529c":"code","2c89abe7":"code","77d24087":"code","1ff0329d":"code","a89e362d":"code","8c762757":"code","3889034a":"code","102873ea":"code","64991d4b":"code","d9619d39":"code","32ce6f79":"code","5f04b935":"code","7349b2a9":"code","702c0cd1":"code","00390bce":"code","168ef145":"code","cf19d45c":"code","da0d32ff":"code","9910d966":"code","49a537c4":"code","63d16967":"code","78a600ce":"code","bd75fc31":"code","2b311e33":"code","ddccdc43":"code","0f5845c6":"code","d275f4f0":"code","8ecb790e":"code","ca5b93bf":"code","fb5e72f3":"code","2de1901d":"code","1c6b516b":"code","45ee27fa":"code","ca1c2cc1":"code","0e3a07f4":"code","4b8e0501":"code","bcc4ad0f":"code","587b079b":"code","011acca0":"code","d65d4571":"code","d8a3d695":"code","370f593d":"code","9ea225cb":"code","8104c9ba":"markdown","b1dbcb76":"markdown","01eade74":"markdown","c7b3eab5":"markdown","030af9ac":"markdown","1aed207f":"markdown","6ded5e16":"markdown","bd76ad0f":"markdown","b7236aa8":"markdown","724d2538":"markdown","6374ede9":"markdown","56e7404a":"markdown","5e2f1f3e":"markdown","4aacf3c3":"markdown","0f0485f2":"markdown","3aa4d88c":"markdown","7f5d75a4":"markdown","0eb1fa05":"markdown","5d656fcc":"markdown","7f4640ae":"markdown","ba8b489d":"markdown","1d2ef485":"markdown","6dfa0fa0":"markdown","528dc727":"markdown","8722f1d8":"markdown","2e4fbb47":"markdown","3a8ad405":"markdown","bca8da42":"markdown","c5e8bedb":"markdown","c91e2e4e":"markdown","85792105":"markdown","6d5e8a69":"markdown","6619041e":"markdown","7ca0f067":"markdown","8c513a62":"markdown","06d6239e":"markdown","3c9da4c1":"markdown","e8d3f521":"markdown","0eb32c6f":"markdown","0a384c62":"markdown","8158bfee":"markdown","665516d6":"markdown"},"source":{"08a7e352":"import pandas as pd \nimport numpy as np\n","7948638e":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\n%matplotlib inline\nsns.set_style('darkgrid')\n","65eb319c":"matplotlib.rcParams['figure.figsize']=(10,10)\nmatplotlib.rcParams['font.size']=15","56f182b8":"mart = pd.read_csv('..\/input\/big-mart-data\/bigmart_data.csv')\nmart.head(10)","d2f9fdd4":"mart.shape","407ebf75":"mart.columns","215677c4":"mart.info()","3440be7b":"mart.dtypes.value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%',shadow=True)\nplt.title('type of our data');","f48fa1ab":"mart.describe(include='all')","91513aa6":"mart.isnull().sum()","dd8d1315":"mart.isnull().sum()\/len(mart)*100","c1fb11c0":"mart.Item_Weight.describe()","2c5be741":"mart.Item_Weight.fillna(mart.Item_Weight.mean(),inplace=True)","2b8d4d42":"mart.Outlet_Size.value_counts()","8e243a28":"mart.Outlet_Size.fillna('Medium',inplace=True)","5f9cafc0":"mart.isnull().sum()","12e00d31":"mart.hist(figsize=(15,15),edgecolor='black');","5d1c1887":"sns.distplot(mart.Item_Weight,kde=True,bins=20)","91eae0cf":"sns.distplot(mart.Item_Visibility,kde=True,bins=25)","9c88c458":"sns.distplot(mart.Item_MRP,kde=True,bins=25)","c6d33bd1":"sns.distplot(mart.Outlet_Establishment_Year,kde=True,bins=25)","0fb5529c":"sns.countplot(x='Outlet_Establishment_Year',data=mart,)","2c89abe7":"mart.Outlet_Establishment_Year.value_counts().plot.pie(autopct='%1.1f%%',shadow=True)","77d24087":"sns.distplot(mart.Item_Outlet_Sales,kde=True,bins=25)","1ff0329d":"sns.set(style='whitegrid', palette=\"deep\", font_scale=1.1, rc={\"figure.figsize\": [12, 12]})\nsns.distplot(\n    mart['Item_Outlet_Sales'], norm_hist=False, kde=False, bins=20, hist_kws={\"alpha\": 1}\n).set(xlabel='Item_Outlet_Sales', ylabel='Count');","a89e362d":"y = mart.groupby(['Outlet_Establishment_Year']).sum()\ny = y['Item_Outlet_Sales']\nx = y.index.astype(int)\n\nplt.figure(figsize=(12,8))\nax = sns.barplot(y = y, x = x)\nax.set_xlabel(xlabel='Year', fontsize=16)\nax.set_xticklabels(labels = x, fontsize=12, rotation=50)\nax.set_ylabel(ylabel='Sales', fontsize=16)\nax.set_title(label='Sales Per Year', fontsize=20)\nplt.show();","8c762757":"sns.countplot(x='Item_Fat_Content',data=mart);","3889034a":"mart.Item_Fat_Content.value_counts().plot.pie(explode=[0.05,0.05,0.05,0.05,0.05],autopct='%1.1f%%',shadow=False);","102873ea":"Item_Type1=mart.Item_Type.value_counts().head(20)\nsns.barplot(Item_Type1.index,Item_Type1)\nplt.xticks(rotation=90)\nplt.figure(figsize=(15,15));","64991d4b":"mart.Item_Type.value_counts().plot.pie(autopct='%1.1f%%',shadow=False);","d9619d39":"Outlet_Size1=mart.Outlet_Size.value_counts().head(3)\nsns.barplot(Outlet_Size1.index,Outlet_Size1)\nplt.xticks(rotation=90)\nplt.figure(figsize=(15,15));","32ce6f79":"mart.Outlet_Size.value_counts().plot.pie(explode=[0.05,0.05,0.05],autopct='%1.1f%%',shadow=False);","5f04b935":"Outlet_Location_Type1=mart.Outlet_Location_Type.value_counts().head(3)\nsns.barplot(Outlet_Location_Type1.index,Outlet_Location_Type1)\nplt.xticks(rotation=90)\nplt.figure(figsize=(15,15));","7349b2a9":"mart.Outlet_Location_Type.value_counts().plot.pie(explode=[0.05,0.05,0.05],autopct='%1.1f%%',shadow=False);","702c0cd1":"Outlet_Type1=mart.Outlet_Type.value_counts().head(5)\nsns.barplot(Outlet_Type1.index,Outlet_Type1)\nplt.xticks(rotation=90)\nplt.figure(figsize=(15,15));","00390bce":"mart.Outlet_Type.value_counts().plot.pie(explode=[0.05,0.05,0.05,0.05],autopct='%1.1f%%',shadow=False);","168ef145":"mart=mart.drop('Item_Identifier',axis=1)\nmart=mart.drop('Outlet_Identifier',axis=1)\nmart","cf19d45c":"# Item_Fat_Content\/Item_Type\/Outlet_Size\/Outlet_Location_Type\/Outlet_Type","da0d32ff":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","9910d966":"mart.Item_Fat_Content.value_counts()","49a537c4":"mart.Item_Fat_Content=le.fit_transform(mart.Item_Fat_Content)","63d16967":"mart.Item_Fat_Content.value_counts()","78a600ce":"mart.Outlet_Size.value_counts()","bd75fc31":"mart.Outlet_Size=le.fit_transform(mart.Outlet_Size)","2b311e33":"mart.Outlet_Size.value_counts()","ddccdc43":"mart.Outlet_Location_Type.value_counts()","0f5845c6":"mart.Outlet_Location_Type=le.fit_transform(mart.Outlet_Location_Type)","d275f4f0":"mart.Outlet_Location_Type.value_counts()","8ecb790e":"mart.Outlet_Type.value_counts()","ca5b93bf":"mart.Outlet_Type=le.fit_transform(mart.Outlet_Type)","fb5e72f3":"mart.Outlet_Type.value_counts()","2de1901d":"mart.Item_Type.value_counts()","1c6b516b":"mart.Item_Type=le.fit_transform(mart.Item_Type)","45ee27fa":"mart.Item_Type.value_counts()","ca1c2cc1":"mart","0e3a07f4":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score","4b8e0501":"x=mart.drop('Item_Outlet_Sales',axis=1)\ny=mart.Item_Outlet_Sales","bcc4ad0f":"print(x.shape)\nprint(y.shape)","587b079b":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25)","011acca0":"from sklearn import linear_model\n#Train the model\nmodel = linear_model.LinearRegression()\n#Fit the model\nmodel.fit(x_train, y_train)\n#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)\n","d65d4571":"#Train the model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)\n#Fit\nmodel.fit(x_train, y_train)\n#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(x_test, y_test)*100)\n","d8a3d695":"#Train the model\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)\n#Fit\nGBR.fit(x_train, y_train)\nprint(\"Accuracy --> \", GBR.score(x_test, y_test)*100)\n","370f593d":"from sklearn.ensemble import GradientBoostingRegressor\n#Train the model\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)\n#Fit\nGBR.fit(x_train, y_train)\nprint(\"Accuracy --> \", GBR.score(x_test, y_test)*100)\n","9ea225cb":"from sklearn.model_selection import KFold, cross_val_score\nfrom xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(x_train,y_train)\npredictions = my_model.predict(x_test)\n\nfrom sklearn.metrics import mean_absolute_error\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,predictions)))","8104c9ba":"## 4 ) data cleaning ","b1dbcb76":"### 3)\tGradientBoostingRegresso","01eade74":"### e) Outlet_Type","c7b3eab5":"### B) Outlet_Size missing value","030af9ac":"* Item_Weight\n* Item_Visibility\n* Item_MRP\n* Outlet_Establishment_Year\n* Item_Outlet_Sales  (traget)","1aed207f":"# 3 ) Exploring data ","6ded5e16":"# 6) feauturs selection ","bd76ad0f":"### B) library data vizualisation","b7236aa8":"so we had (8523) rows train data set has both input and output variable(s). You need to predict the sales for test data set.","724d2538":"### Item_Type","6374ede9":"### Item_Fat_Content","56e7404a":"# 7) transform data from categorical to numerical","5e2f1f3e":"### Outlet_Location_Type","4aacf3c3":"#####  a) Item_Weight","0f0485f2":"### 1)\tLinear Regression ","3aa4d88c":"### c) Outlet_Size","7f5d75a4":"### 2)\tRandomForestRegressor ","0eb1fa05":"### d) Outlet_Location_Type","5d656fcc":"# 8) split data ","7f4640ae":"### 4)\tGradient Boosting Regresso","ba8b489d":"* 0 ==> LF          \n* 1 ==> Low Fat\n* 2 ==> Regular    \n* 3 ==> low fat\n* 4 ==> reg","1d2ef485":"#####  b) Item_Visibility","6dfa0fa0":"# 5) data visualaization","528dc727":"# 2) load data","8722f1d8":"### Outlet_Type","2e4fbb47":"### A) library data controls","3a8ad405":"#### d) Outlet_Establishment_Year","bca8da42":"### 5) XGBOOST REGRESSOR","c5e8bedb":"#### c) Item_MRP","c91e2e4e":"#### e) Item_Outlet_Sales (traget)","85792105":"### columns that we gonna delete\nItem_Identifier      : Unique product ID    ==> delete                           \nOutlet_Identifier    : Unique store ID  ==> delete                        \n      ","6d5e8a69":"### A) type : numerical","6619041e":"### B) type : object\n* Item_Identifier      : Unique product ID       ( will be doped )               \n* Item_Fat_Content     : Whether the product is low fat or not         \n* Item_Type            : \tThe category to which the product belongs          \n* Outlet_Identifier    : Unique store ID                          \n* Outlet_Size          : \tThe size of the store in terms of ground area covered              \n* Outlet_Location_Type : The type of city in which the store is located                    \n* Outlet_Type          : Whether the outlet is just a grocery store or some sort of supermarket ","7ca0f067":"### C) verification ","8c513a62":"### Outlet_Size","06d6239e":"# Bigmart Sales Data Set using machine learning for bigenners\n\nRetail is another industry which extensively uses analytics to optimize business processes. Tasks like product placement, inventory management, customized offers, product bundling, etc. are being smartly handled using data science techniques. As the name suggests, this data comprises of transaction records of a sales store. This is a regression problem. The data has 8523 rows of 12 variables.\n\n### Problem: Predict the sales of a store.\n\nLet\u2019s have a look at the Big Mart Sales data and build a Linear Regression Model in the Live Coding window below.\n\n1. import library\n    * pandas and numpy to manip the data \n    * matplotlib and seaborn for the visualization\n2. load data \n3. exploring data and analys\n4. data cleaning\n5. data visualization\n6. feature selection\n7. feature transformation\n8. split data\n9. machine learning algo \n![](https:\/\/miro.medium.com\/max\/499\/1*LXEEUY5Vf3tTCMFC41llJQ.png)","3c9da4c1":"##### type : object\nItem_Identifier      : Unique product ID                     \nItem_Fat_Content     : Whether the product is low fat or not         \nItem_Type            : \tThe category to which the product belongs          \nOutlet_Identifier    : Unique store ID                          \nOutlet_Size          : \tThe size of the store in terms of ground area covered              \nOutlet_Location_Type : The type of city in which the store is located                    \nOutlet_Type          : Whether the outlet is just a grocery store or some sort of supermarket     \n##### type : numerical\nItem_Weight                 : Weight of product        \nItem_Visibility             : The % of total display area of all products in a store allocated to the particular product         \nItem_MRP                    : Maximum Retail Price (list price) of the product                                       \nOutlet_Establishment_Year   : The year in which store was established                                               \nItem_Outlet_Sales  (traget) : \tSales of the product in the particular store. This is the outcome variable to be predicted.       ","e8d3f521":"### A) Item_Weight missing value","0eb32c6f":"***so we had : 17% of Item_Weight + 28 % of Outlet_Size missing value***","0a384c62":"### a) Item_Fat_Content","8158bfee":"# 1) import library","665516d6":"### b) Item_Type"}}