{"cell_type":{"15666a4a":"code","8a59f9c6":"code","471e2a87":"code","ee325e6a":"code","5c38d5e6":"code","fc2a4886":"code","b7ab7fe5":"code","10a72bed":"code","276521b4":"code","85dc006e":"code","e49c06d3":"code","7bab523f":"code","c8acb886":"code","f3153058":"code","33ae15c6":"code","308cb530":"code","af849fe8":"code","930693fe":"code","2f697219":"code","d73f18fc":"code","f6b9d24c":"code","65f97f94":"code","a8621acb":"code","e6e94305":"code","5286c6be":"code","081ecafe":"code","5965015a":"code","7a80fa29":"code","7d56b88e":"code","f8cdeb8d":"code","ea595874":"code","416af5e4":"code","36263146":"code","95148ce2":"code","aca5dfe9":"code","b73d381e":"code","498e8372":"code","76be8be1":"markdown","0b0e3093":"markdown","45a2919c":"markdown","5a5c2c52":"markdown","595eb299":"markdown","5899bb70":"markdown","6e6ea1d7":"markdown","3200657c":"markdown","b9aab624":"markdown"},"source":{"15666a4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a59f9c6":"import pandas as pd\ndf=pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest=pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ndf.head()","471e2a87":"df.describe()","ee325e6a":"df['Target'].value_counts()","5c38d5e6":"l=[]\nfor i in range(len(df)):\n    if(df['Target'][i]=='ConfirmedCases'):\n        l.append(0)\n    else:\n        l.append(1)","fc2a4886":"m=[]\nfor i in range(len(df)):\n    if(test['Target'][i]=='ConfirmedCases'):\n        m.append(0)\n    else:\n        m.append(1)\n        ","b7ab7fe5":"test['Target_val']=m","10a72bed":"test.shape","276521b4":"df['Target_val']=l\ndf.head()","85dc006e":"import seaborn as sns\nsns.lmplot(x='Population',y='TargetValue',fit_reg=False,hue='Country_Region',data=df)","e49c06d3":"sns.boxplot(df['Weight']).set_title('Weight')","7bab523f":"sns.distplot(df['Weight'])","c8acb886":"sns.distplot(df['Population'])","f3153058":"sns.boxplot(df['Population'])","33ae15c6":"import plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import *\ntrace1=go.Scatter(\n    x=df.TargetValue,\n    y=df.Population,\n    mode='lines',\n    name='Population',\n    marker=dict(color='rgba(16,112,2,0.8)'),\n    text=df.Country_Region\n\n)\n\ntrace2=go.Scatter(\n    x=df.TargetValue,\n    y=df.Weight,\n    mode='lines+markers',\n    name='Weight',\n    marker=dict(color='rgba(80, 26, 80, 0.8)'),\n    text=df.Country_Region\n)\n\ndata=[trace1,trace2]\nlayout=dict(title='Comparing Population and Weight with respect to TargetValue', xaxis= dict(title= 'TargetValue',ticklen= 5,zeroline= False))\nfigure=dict(data=data,layout=layout)\niplot(figure)","308cb530":"from sklearn.model_selection import train_test_split\nimport numpy as np\nX=np.asanyarray(df[['Population','Weight','Target_val']],dtype=np.float64)\ny=np.asanyarray(df['TargetValue'],dtype=np.float64)\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=333)\nprint('Train size :: ',X_train.shape)\nprint('Test size :: ',X_test.shape)","af849fe8":"from sklearn import neighbors\nfrom sklearn.metrics import mean_squared_error\nk=4\nmodel=neighbors.KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train,y_train)","930693fe":"from math import sqrt\nrms_value=[]\nfor k in range(1,21):\n    model=neighbors.KNeighborsRegressor(n_neighbors=k)\n    model.fit(X_train,y_train)\n    pred=model.predict(X_test)\n    error=sqrt(mean_squared_error(y_test,pred))\n    rms_value.append(error)\n    print(error)","2f697219":"min_val=min(rms_value)\n\n\nval=rms_value.index(min_val)\nk=val+1","d73f18fc":"curve=pd.DataFrame(rms_value)\ncurve.plot()","f6b9d24c":"##SO TAKING K=10\nimport numpy as np\nmodel=neighbors.KNeighborsRegressor(n_neighbors=k)\nmodel.fit(X_train,y_train)\npred=model.predict(X_test)\nerror=sqrt(mean_squared_error(y_test,pred))\nrms_value.append(error)\nprint(error)","65f97f94":"print(model.score(X_test,y_test))","a8621acb":"final_prediction=model.predict(test[['Population','Weight','Target_val']])","e6e94305":"final_prediction.shape","5286c6be":"op = [int(x) for x in final_prediction]\n\nout = pd.DataFrame({'Id': df.index, 'TargetValue': op})\nprint(out)\nout.shape","081ecafe":"col1=out.groupby(['Id'])['TargetValue'].quantile(q=0.25).reset_index()\ncol2=out.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\ncol3=out.groupby(['Id'])['TargetValue'].quantile(q=0.75).reset_index()\ncol1.shape","5965015a":"col1.columns=['Id','q0.25']\ncol2.columns=['Id','q0.5']\ncol3.columns=['Id','q0.75']\ncol1=pd.concat([col1,col2['q0.5'],col3['q0.75']],1)\ncol1['q0.25']=col1['q0.25'].clip(0,10000)\ncol1['q0.5']=col2['q0.5'].clip(0,10000)\ncol1['q0.75']=col3['q0.75'].clip(0,10000)\n","7a80fa29":"col1.shape","7d56b88e":"submission=pd.melt(col1, id_vars=['Id'], value_vars=['q0.25','q0.5','q0.75'])\nsubmission['variable']=submission['variable'].str.replace(\"q\",\"\", regex=False)\nsubmission['ForecastId_Quantile']=submission['Id'].astype(str)+'_'+submission['variable']\nsubmission['TargetValue']=submission['value']\nsubmission=submission[['ForecastId_Quantile','TargetValue']]\n","f8cdeb8d":"key=[]\nfor i in range(0,2264802):\n    key.append(i)","ea595874":"submission.head()","416af5e4":"submission.shape","36263146":"submission=submission[submission['Index']<935010]","95148ce2":"submission.shape","aca5dfe9":"submission.drop(['Index'],inplace=True,axis=1)","b73d381e":"\nsubmission.to_csv(\"submission.csv\",index=False)","498e8372":"submission.head()","76be8be1":"**DATA_VISUALIZATION**","0b0e3093":"***SO_HERE WE GOT BEST RESULT FOR K=18***","45a2919c":"> **As We Can See Here The Histogram Of Population Is Right_Skewed So Can Act As Outlier In Higher Ranges**","5a5c2c52":"**HERE I AM USING STANDARD QUANTILE VALUES** \n\n1.First_quantile-->0.25\n\n2.Second_quantile-->0.5(Mean)\n\n3.Third_quantile-->0.75","595eb299":"# INITIALIZING MODEL BY DEFAULT K=4","5899bb70":"IT can be visualized from boxplot","6e6ea1d7":"***MODEL_BUILDING***","3200657c":"**HERE WE ARE VISUALIZING HOW POPULATION AND WEIGHT AFFECTS TARGET VALUE**","b9aab624":"# CHECKING FOR WHICH K IT GIVES OPTIMAL ANSWER"}}