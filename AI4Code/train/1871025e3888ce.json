{"cell_type":{"f3b2f79f":"code","7bf7c437":"code","3bd05b34":"code","7b5a58f5":"code","2aecb429":"code","928a2592":"code","92a80804":"code","6516c8d9":"code","43b9c709":"code","a78faf5d":"code","78a372a1":"code","375c02ea":"code","d355f754":"code","f6525d67":"code","bc923682":"code","7b14f9a1":"code","17719242":"code","76a14a23":"code","32cd7f53":"code","e1684ad2":"code","5a5b3137":"code","96b92f23":"code","6e739627":"code","ab2be682":"code","c6f7b173":"code","93434658":"code","c56feec6":"code","9a1a7e73":"code","fba89a66":"code","55d8f95d":"code","2467d78d":"code","da02e75c":"code","0ab24ba5":"code","d6123bf5":"code","c1d88705":"code","ca687b27":"code","296c40b4":"code","414fff9e":"code","e5501a28":"code","138cb861":"code","0f58bf15":"code","b87305f2":"code","18134e4c":"code","24265954":"code","c3fbab35":"code","bf0815ef":"code","a3e7cca0":"code","bb22518e":"code","9d237f07":"code","863f84c4":"code","4e4ca096":"code","1cdd4e5e":"code","44cbec7e":"code","033599b8":"code","3b776c53":"code","c1de0628":"code","0196e409":"code","72f4c949":"code","e0aaa4b3":"code","cefcc140":"code","7edfe9b7":"code","7069b4f5":"code","d2cf89f3":"code","5b21f601":"code","9461c553":"code","613aa399":"code","d55ed912":"code","ad4c9469":"code","9dfe42c9":"code","07236438":"code","fddefc27":"code","e20ebc91":"code","ea36ccbf":"code","91c6eb68":"code","f69cb1e9":"code","f6f3a733":"code","10ab8969":"code","5f50d262":"code","4961b863":"markdown","341b6492":"markdown","44f4f23f":"markdown","f277e1f4":"markdown","73efc9cb":"markdown","3ef4c52f":"markdown","54400a4a":"markdown","df75cf16":"markdown","de555f53":"markdown","a04130d1":"markdown","45400502":"markdown","d0437ea9":"markdown","cec1aab1":"markdown","623b2976":"markdown","63946f51":"markdown","41a21a85":"markdown","0692719b":"markdown","ba22f5ac":"markdown","5b1666b2":"markdown","c9111922":"markdown","bd131225":"markdown","37edf5b5":"markdown","00a7e345":"markdown","c1aec23a":"markdown"},"source":{"f3b2f79f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bf7c437":"data = pd.read_csv(\"\/kaggle\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 2.csv\",encoding='cp1252')\n#reference https:\/\/stackoverflow.com\/a\/45530363","3bd05b34":"data.head(10)","7b5a58f5":"data = pd.read_csv(\"\/kaggle\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv\")","2aecb429":"#no of rows and number of columns\ndata.shape","928a2592":"data.head(10)","92a80804":"#no of rows and number of columns\ndata.shape","6516c8d9":"df=data","43b9c709":"# Number of rows and columns in the Data set\ndf.shape","a78faf5d":"# check the rows have null values in dataset\ndf[pd.isnull(df).any(axis=1)]","78a372a1":"# the number of unique Order Numbers\ndf['Order Number'].nunique()","375c02ea":"#df.duplicated(subset=['Order Number']).nunique()\n# Select all duplicate rows based on OrderNumber column\nduplicateRowsDF = df[df.duplicated(['Order Number'])]\nduplicateRowsDF","d355f754":"# There are duplicate rows in the dataset\nduplicate=df.loc[(df['Order Number']==65878) | (df['Order Number']==55816)]\nduplicate","f6525d67":"df.drop_duplicates(subset=['Order Number'], keep= 'first',inplace=True) \ndf.shape","bc923682":"#there are null values but we are not deleting those rows\ndata2=df","7b14f9a1":"df['Order Status'].unique()","17719242":"print(df['Order Status'].value_counts())\n#print(df.groupby('Order Status').agg(['count']))","76a14a23":"# count plot of Order Status\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ndf = data\nsns.catplot(x=\"Order Status\", kind=\"count\", data=df)\nplt.show()","32cd7f53":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(8,5))\ntotal = float(len(df))\nax =sns.countplot(x=\"Order Status\", hue=\"Order Status\", data=df)\nplt.title('Order Status', fontsize=20)\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:.1f}%'.format(100 * height\/total),\n            ha=\"center\") \nplt.show()","e1684ad2":"# Making a list of missing value types\nmissing_values = [\"n\/a\", \"na\", \"??????? ?? ???? ??????\"]\ndef tidy_split(df, column, sep='\/', keep=False):\n    \"\"\"\n    Split the values of a column and expand so the new DataFrame has one split\n    value per row. Filters rows where the column is missing.\n\n    Params\n    ------\n    df : pandas.DataFrame\n        dataframe with the column to split and expand\n    column : str\n        the column to split and expand\n    sep : str\n        the string used to split the column's values\n    keep : bool\n        whether to retain the presplit value as it's own row\n\n    Returns\n    -------\n    pandas.DataFrame\n        Returns a dataframe with the same columns as `df`.\n    \"\"\"\n    indexes = list()\n    new_values = list()\n    df = df.dropna(subset=[column])\n    for i, presplit in enumerate(df[column].astype(str)):\n        values = presplit.split(sep)\n        if keep and len(values) > 1:\n            indexes.append(i)\n            new_values.append(presplit)\n        for value in values:\n            indexes.append(i)\n            new_values.append(value)\n    new_df = df.iloc[indexes, :].copy()\n    new_df[column] = new_values\n    return new_df\n#source https:\/\/stackoverflow.com\/a\/39946744","5a5b3137":"dataclean=tidy_split(df, 'Book Name')\ndataclean.head(10)","96b92f23":"#sns.catplot(y=\"Book Name\", kind=\"count\", data=dataclean2)\n#bookdata=pd.DataFrame(data2clean['Book Name'].value_counts())\nbookdata = dataclean['Book Name'].value_counts().rename_axis('Book_Name').reset_index(name='counts')\nbookdata\n","6e739627":"dataclean['Book Name'].nunique()","ab2be682":"#20 Most sold books\nbookdata.head(20)\n","c6f7b173":"print(bookdata.columns)\nplotdata=bookdata.head(10)\ndf2 = plotdata.set_axis(['Book Name', 'Number Sold'], axis=1, inplace=False)","93434658":"# code adapted from: https:\/\/plotly.com\/python\/bar-charts\/\nimport plotly.express as px\n\nfig = px.bar(df2, x=\"Book Name\", y=\"Number Sold\", title=\"Top 10 Books\")\nfig.show()","c56feec6":"# list of returned books\nreturned=dataclean[dataclean['Order Status']==\"Returned\"]['Book Name'].value_counts().rename_axis('Book_Name').reset_index(name='counts')\nreturned","9a1a7e73":"# list of canceled books\ncanceled=dataclean[dataclean['Order Status']==\"Canceled\"]['Book Name'].value_counts().rename_axis('Book_Name').reset_index(name='counts')\ncanceled","fba89a66":"# look at the city\ndf.columns","55d8f95d":"#top 10 cities from where got orders\ndf['City (Billing)'].value_counts().head(10)","2467d78d":"# look at the Order Date  to see the distribution  \ndataclean.dtypes\n","da02e75c":"import datetime as dt\n#Thanks to @hussainsaddam12 for this codeblock idea\ndf=dataclean\ndf[\"Order Date\"] = pd.DatetimeIndex(df[\"Order Date\"])\ndf['Date'] = df['Order Date'].dt.date\ndf['Time'] = df['Order Date'].dt.time\ndf[\"Day\"] = df[\"Order Date\"].dt.day_name()\ndf[\"Month\"] = df[\"Order Date\"].dt.month_name()\ndf['Year'] = df[\"Order Date\"].dt.year\ndf.shape\n","0ab24ba5":"df.reset_index(drop=True)","d6123bf5":"# Best Selling Book\ncomplete=df[df['Order Status']==\"Completed\"]['Book Name'].value_counts().rename_axis('Book_Name').reset_index(name='counts')\nbestbook=complete.head(5)\nfig = px.bar(bestbook, x=\"Book_Name\", y='counts', title=\"Top 5 Books\")\nfig.show()","c1d88705":"# the cithy from where we got the most orders with completed status\n#i am using the given data set excluding  duplicate order Numbers rows\n# as there are more than  one books were in orders and we are looking at orders so used the data without spliting\n# the book Name column data\n\ncompleteorder=data2[data2['Order Status']==\"Completed\"]['City (Billing)'].value_counts().rename_axis('City').reset_index(name='counts')\norder=completeorder.head(10)\n#fig = px.bar(order, x=\"City\", y=\"counts\", title=\"Top 10 Cities\")\nimport plotly.graph_objects as go\nx=order[\"City\"]\ny=order[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\n\nfig.show()\n#fig.show()\norder.transpose()","ca687b27":"data2.groupby('Order Status')['City (Billing)'].count()","296c40b4":"returnedorder=data2[data2['Order Status']==\"Returned\"]['City (Billing)'].value_counts().rename_axis('City').reset_index(name='counts')\nr_order=returnedorder.head(10)\nimport plotly.graph_objects as go\nx=r_order[\"City\"]\ny=r_order[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Returned Orders')\nfig.show()\n#fig.show()\nr_order.transpose()","414fff9e":"# Canceld Orders\ncancelorder=data2[data2['Order Status']==\"Canceled\"]['City (Billing)'].value_counts().rename_axis('City').reset_index(name='counts')\nc_order=cancelorder.head(10)\nimport plotly.graph_objects as go\nx=c_order[\"City\"]\ny=c_order[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Canceld Orders')\nfig.show()\n#fig.show()\nc_order.transpose()","e5501a28":"# these are number of books ordered Frequency By Months\nordermonth=df['Month'].value_counts().rename_axis('Month').reset_index(name='counts')\n  \n#ordermonth\nx=ordermonth[\"Month\"]\ny=ordermonth[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Monthly Orders (No of Books)')\nfig.show()\n#fig.show()\nordermonth.transpose()","138cb861":"# to get the number of orders\ndata2[\"Order Date\"] = pd.DatetimeIndex(data2[\"Order Date\"])\ndata2[\"Month\"] = data2[\"Order Date\"].dt.month_name()\n#df['Year'] = df[\"Order Date\"].dt.year\nordermonth=data2['Month'].value_counts().rename_axis('Month').reset_index(name='counts')\n  \n#ordermonth\nx=ordermonth[\"Month\"]\ny=ordermonth[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Monthly Orders')\nfig.show()\n#fig.show()\nordermonth.transpose()","0f58bf15":"data2[\"Day\"] = data2[\"Order Date\"].dt.day_name()\norderday=data2['Day'].value_counts().rename_axis('Day').reset_index(name='counts')\n  \n#ordermonth\nx=orderday[\"Day\"]\ny=orderday[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Orders Day')\nfig.show()\n#fig.show()\norderday.transpose()","b87305f2":"data = pd.read_csv(\"\/kaggle\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 5.csv\")","18134e4c":"data.shape","24265954":"data.info()","c3fbab35":"data.head(10)","bf0815ef":"df=data[data['Order Number']==3162]['Book Name']","a3e7cca0":"pd.set_option('display.max_colwidth', None)\ndf","bb22518e":"data['Payment Method'].unique()","9d237f07":"# check the rows have null values in dataset\ndata[pd.isnull(data).any(axis=1)]","863f84c4":"data.head(10)","4e4ca096":"data['Payment Method'].value_counts()","1cdd4e5e":"#change the cash on delivery (COD) to Cash on delivery\ndata.loc[data['Payment Method']=='Cash on Delivery (COD)' , 'Payment Method']= 'Cash on delivery'","44cbec7e":"data['Payment Method'].value_counts()","033599b8":"# Payment Method\npaymentmethod=data['Payment Method'].value_counts().rename_axis('Payment Method').reset_index(name='counts')\nx=paymentmethod[\"Payment Method\"]\ny=paymentmethod[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Payment Methods')\nfig.show()","3b776c53":"data['Order Status'].value_counts()","c1de0628":"# Order status\norderstatus=data['Order Status'].value_counts().rename_axis('Order Status').reset_index(name='counts')\nx=orderstatus[\"Order Status\"]\ny=orderstatus[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Order Status')\nfig.show()","0196e409":"data['Book Name'].head(10)","72f4c949":"#new = data[\"Book Name\"].str.split(\"\/\",expand = True) ","e0aaa4b3":"#split the Book Name column values\ncleandata=tidy_split(data, 'Book Name')\n","cefcc140":"cleandata.shape","7edfe9b7":"cleandata.reset_index(drop=True)\ncleandata.head(20)","7069b4f5":"data['Book Name'] = data['Book Name'].str.replace(r\"\\(C\\++\\)\\s\\++\u0633\u06cc\/\u0633\u06cc\" , '(C++) ++\u0633\u06cc-\u0633\u06cc')\n#split the Book Name column values\ncleandata=tidy_split(data, 'Book Name')\ncleandata.head(20)\n","d2cf89f3":"df=cleandata\ncomplete=df[df['Order Status']==\"Completed\"]['Book Name'].value_counts().rename_axis('Book_Name').reset_index(name='counts')\nbestbook=complete.head(10)\nfig = px.bar(bestbook, x=\"Book_Name\", y='counts', title=\"Top 10 Books\")\nfig.show()","5b21f601":"bestbook","9461c553":"# removing null values to avoid errors   \ndata.dropna(inplace = True)   \n  \n# Applying upper() method on 'City' column \ndata['City']=data['City'].apply(lambda x: x.upper())","613aa399":"data.loc[data['City']=='FSD' , 'City']= 'FAISALABAD'\ndata.loc[data['City']=='D I KHAN' , 'City']= 'DERA ISMAIL KHAN'\ndata.loc[data['City']=='DEAR ISMAIL KHAN' , 'City']= 'DERA ISMAIL KHAN'\n\ndata.loc[data['City']=='KARACH' , 'City']= 'KARACHI'\ndata.loc[data['City']=='SAIHWAL', 'City']= 'SAHIWAL'\ndata.loc[data['City']=='ISB', 'City']= 'ISLAMABAD'\ndata.loc[data['City']=='LHR', 'City']= 'LAHORE'\ndata.loc[data['City']=='SARGOSHA', 'City']= 'SARGODHA'\ndata.loc[data['City']=='PESHAWAR KPK', 'City']= 'PESHAWAR'\ndata.loc[data['City']=='KPK', 'City']= 'PESHAWAR'\ndata.loc[data['City']=='RAIWIND LAHORE', 'City']= 'RAIWIND'\ndata.loc[data['City']=='\u0642\u0635\u0648\u0631', 'City']='KASUR'\ndata.loc[data['City']=='KASOOR', 'City']='KASUR'\ndata.loc[data['City']=='RAHIMYARKHAN','City']='RAHIMYAR KHAN'\n","d55ed912":"data.loc[data['City']=='RAHIMYARKHAN']","ad4c9469":"data['City'].nunique()","9dfe42c9":"data['City'].head(20)","07236438":"city=data['City'].value_counts().rename_axis('City').reset_index(name='counts')\ncity.tail(20)","fddefc27":"data['City'].nunique()","e20ebc91":"completeorder=data[data['Order Status']==\"Completed\"]['City'].value_counts().rename_axis('City').reset_index(name='counts')\norder=completeorder.head(10)\n#fig = px.bar(order, x=\"City\", y=\"counts\", title=\"Top 10 Cities\")\nimport plotly.graph_objects as go\nx=order[\"City\"]\ny=order[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\n\nfig.show()","ea36ccbf":"completeorder","91c6eb68":"data[\"Order Date & Time\"] = pd.DatetimeIndex(data[\"Order Date & Time\"])\ndata[\"Year\"] = data[\"Order Date & Time\"].dt.year\n#df['Year'] = df[\"Order Date\"].dt.year\norderyear=data['Year'].value_counts().rename_axis('Year').reset_index(name='counts')\n  \n#ordermonth\nx=orderyear[\"Year\"]\ny=orderyear[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Yearly Orders')\nfig.show()","f69cb1e9":"orderyear","f6f3a733":"# Create a circle for the center of the plot\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(orderyear[\"counts\"], labels=orderyear[\"Year\"], colors=['skyblue','green','orange'],wedgeprops = { 'linewidth' : 2, 'edgecolor' : 'white' })\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()\n","10ab8969":"data[\"Order Date & Time\"] = pd.DatetimeIndex(data[\"Order Date & Time\"])\ndata[\"Month\"] = data[\"Order Date & Time\"].dt.month_name()\n#df['Year'] = df[\"Order Date\"].dt.year\nordermonth=data['Month'].value_counts().rename_axis('Month').reset_index(name='counts')\n  \n#ordermonth\nx=ordermonth[\"Month\"]\ny=ordermonth[\"counts\"]\n# Use textposition='auto' for direct text\nfig = go.Figure(data=[go.Bar(x=x,\n                             y=y,\n                             text=y,\n            textposition='auto',\n        )])\nfig.update_layout(title_text='Monthly Orders')\nfig.show()","5f50d262":"data['Date'] = data[\"Order Date & Time\"].dt.date\ndata['Time'] = data[\"Order Date & Time\"].dt.time\ndata[\"Day\"] = data[\"Order Date & Time\"].dt.day_name()\nplt.figure(figsize=(20, 8))\nplt.title('Number of books Orders\/Week Days')\nplot = sns.countplot(x=data[\"Day\"],data=data, hue=\"Order Status\")\nfor p in plot.patches:\n        plot.annotate(format(p.get_height()), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points', rotation=0)\nplot.set_xticklabels(plot.get_xticklabels(), ha=\"center\")\nplt.show()","4961b863":"## Percentage of Completed,Returned and Canceled Orders","341b6492":"### As there is some values are not displaying correctly so try to use othe csv file","44f4f23f":"### As look at the City column there are inconsistency \nlike faisalabad in some rows and FSD in some, same for dera Ismail Khan  in a row also entered as d i khan so need to fix it\n","f277e1f4":"### Order Status Frequency","73efc9cb":"## Gufhtugu Publication Dataset Challenge","3ef4c52f":"### there are two issues one is with (C++) ++\u0633\u06cc\/\u0633\u06cc as there is \/ is separating them so rather than One row we are getting two rows for this one book. when spliting the data\n### there are books where more than 1 copy is  orderd as e.g.order Number 307","54400a4a":"## Expolatory Data Analysis\n","df75cf16":"## Tasks to Complete\n- What is the best-selling book?\n- Visualize order status frequency\n- Find a correlation between date and time with order status\n- Find a correlation between city and order status\n- Find any hidden patterns that are counter-intuitive for a layman\n- Can we predict number of orders, or book names in advance?","de555f53":"### There are 1778 titles are Ordered\n","a04130d1":"### Remove the duplicate from the dataset\nthere are duplicate rows with same order number and details\n","45400502":"## Payment Methods","d0437ea9":"### Check the number of completed, returned and canceled Orders","cec1aab1":"### there are 19187 rows and 5 columns in dataset","623b2976":"## As it is obvious from the above plot that cash on delivery is popular method of payment\n","63946f51":"## Order\/year","41a21a85":"I was expecting to see the 19187 unique row values for Order number as there is not null value in the Order Number so check for duplicates","0692719b":"## Orders\/ Month","ba22f5ac":"## New data file is added look at that","5b1666b2":"## Orders\/week days","c9111922":"## Now look at the City data","bd131225":"## Order Status","37edf5b5":"### Returned Books","00a7e345":"### there are 10 rows where payment method is NaN","c1aec23a":"### Change the cash on delivery (COD) to cash on delivery "}}