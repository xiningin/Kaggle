{"cell_type":{"d4b0e1e5":"code","c30b5101":"code","9674324e":"code","32a8702d":"markdown"},"source":{"d4b0e1e5":"%%writefile submission.py\nfrom numba import njit\n\n# WORKS | Testcase 1 - native python - return static value\ndef python_constant():\n    return 3\n\n\n# WORKS | Testcase 2 - @njit - return static value\n@njit\ndef njit_constant():\n    return 3\n\n# BROKEN | Testcase 3 - @njit - passing in Structs arguments\n# BROKEN | cannot determine Numba type of <class 'kaggle_environments.utils.Struct'>\n@njit\ndef njit_struct_arguments(observation, configuration):\n    return configuration.columns - configuration.rows\n\n\n\n# The last function defined in the file run by Kaggle in submission.py\ndef agent(observation, configuration) -> int:\n    print('python_constant() = ', python_constant(), type(python_constant()) )    # WORKS\n    print('njit_constant() = ',   njit_constant(),   type(njit_constant())   )    # WORKS\n    # print('observation, configuration() = ', njit_struct_arguments(observation, configuration),   type(njit_constant(observation, configuration)) ) # BROKEN\n    \n    action = njit_constant()\n    return int(action)","c30b5101":"%run submission.py","9674324e":"from kaggle_environments import make\nenv = make(\"connectx\", debug=True)\nenv.render()\nenv.reset()\n\nobservation   = env.state[0].observation\nconfiguration = env.configuration\naction = agent(observation, configuration)\nprint(action, type(action))","32a8702d":"# ConnectX - Numba Testcases\n\nThe purpose of this notebook is to test if Numba will work inside the Kaggle Submit environment, and which features break it"}}