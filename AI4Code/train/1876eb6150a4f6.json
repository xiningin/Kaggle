{"cell_type":{"dd6f7a7a":"code","389966ca":"code","2033f14a":"code","a43fd698":"code","eb4afccc":"code","78b61935":"code","387e7312":"code","c0205e6b":"code","67770d91":"code","8e4d2111":"code","e3750c4a":"code","cc686f81":"markdown","822973e1":"markdown","bc6cb5f2":"markdown","02e05588":"markdown","73686df7":"markdown","e2cf3c62":"markdown","0221eef8":"markdown","a8a9aacb":"markdown","47fe5d8a":"markdown"},"source":{"dd6f7a7a":"def sign(num):\n    if num < 0:\n        return -1\n    elif num > 0:\n        return 1\n    else:\n        return 0    \nx=sign(-4)\nprint(x)","389966ca":"def sign(num):\n    if num < 0:\n        return -1\n    elif num > 0:\n        return 1\n    else:\n        return 0    \nx=sign(7)\nprint(x)","2033f14a":"def sign(num):\n    if num < 0:\n        return -1\n    elif num > 0:\n        return 1\n    else:\n        return 0 \nx=sign(0)\nprint(x)","a43fd698":"def to_smash(total_candies):\n    print(\"Splitting\", total_candies, \"candies\")\n    return total_candies % 3\n\nx=to_smash(91)\nprint (\"Smashing \",x,\" candy\/candies\")","eb4afccc":"def to_smash(total_candies):\n    if total_candies == 1:\n        print(\"Splitting\", total_candies, \"candy\") \n        return total_candies % 3\n    else:\n        print(\"Splitting\", total_candies, \"candies\")\n        return total_candies % 3   \nto_smash(91)\nto_smash(1)","78b61935":"def prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday):\n    # Don't change this code. Our goal is just to find the bug, not fix it!\n    return have_umbrella or rain_level < 5 and have_hood or not rain_level > 0 and is_workday\n\n# Change the values of these inputs so they represent a case where prepared_for_weather\n# returns the wrong answer.\nhave_umbrella = False\nrain_level = 1\nhave_hood = True\nis_workday = True\n\n# Check what the function returns given the current values of the variables above\nactual = prepared_for_weather(have_umbrella, rain_level, have_hood, is_workday)\nif rain_level>0 and is_workday==True and actual==True:\n    print(\"It should not be True but it is: \",actual) \n    print(\"Bug Found!\")","387e7312":"def is_negative(number):\n    if number < 0:\n        return True\n    else:\n        return False\n\ndef concise_is_negative(number):\n    return number < 0","c0205e6b":"def onionless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not onion\n\ndef ketchupless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not ketchup\n\ndef mustardless(ketchup, mustard, onion):\n    \"\"\"Return whether the customer doesn't want onions.\n    \"\"\"\n    return not mustard\n\ndef wants_all_toppings(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants \"the works\" (all 3 toppings)\n    \"\"\"\n\n    return ketchup and mustard and onion","67770d91":"def wants_plain_hotdog(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants a plain hot dog with no toppings.\n    \"\"\"\n    return not ketchup and not mustard and not onion","8e4d2111":"def exactly_one_sauce(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants either ketchup or mustard, but not both.\n    (You may be familiar with this operation under the name \"exclusive or\")\n    \"\"\"\n    return (ketchup and not mustard) or (mustard and not ketchup)","e3750c4a":"def exactly_one_topping(ketchup, mustard, onion):\n    \"\"\"Return whether the customer wants exactly one of the three available toppings\n    on their hot dog.\n    \"\"\"\n    return (int(ketchup) + int(mustard) + int(onion)) == 1","cc686f81":"**Adding Conditions for Singular and Plural**","822973e1":"**Signed Function**","bc6cb5f2":"**Analyzing a Buggy Code:** \nI'm safe from today's weather if...\n\nI have an umbrella...\nor if the rain isn't too heavy and I have a hood...\notherwise, I'm still fine unless it's raining and it's a workday\nThe function below uses our first attempt at turning this logic into a Python expression. I claimed that there was a bug in that code. Can you find it?\n\nTo prove that prepared_for_weather is buggy, come up with a set of inputs where either:\n\nthe function returns False (but should have returned True), or\nthe function returned True (but should have returned False).","02e05588":"For the next function, fill in the body to match the English description in the docstring.","73686df7":"**Add Logging into The Candies problem**","e2cf3c62":"**Ketchup,Mustard,Onion Problem:**\n The boolean variables ketchup, mustard and onion represent whether a customer wants a particular topping on their hot dog. We want to implement a number of boolean functions that correspond to some yes-or-no questions about the customer's order.","0221eef8":"**Using Intergers 0 and 1 for Boolean Functions:**\n We\u2019ve seen that calling bool() on an integer returns False if it\u2019s equal to 0 and True otherwise. What happens if we call int() on a bool? Try it out in the notebook cell below.","a8a9aacb":"**Minimizing Code Length**","47fe5d8a":"For the next function, fill in the body to match the English description in the docstring."}}