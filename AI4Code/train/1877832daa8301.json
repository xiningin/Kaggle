{"cell_type":{"91cbfaa1":"code","18e050e1":"code","0f0e7290":"code","2b698b32":"code","2a243b03":"code","8615f043":"code","be7a94d3":"code","8f27e908":"code","09ecb50e":"code","b649678f":"code","d23dfd74":"code","6f97c3d5":"code","c1478419":"code","7dfa26e3":"code","f62fe618":"code","4e8cb799":"code","dbfce21b":"code","9fc43c2a":"code","da6ef142":"code","b5b5cef1":"code","50ebe3ba":"code","ce751b61":"code","1871591e":"code","59433805":"code","a3432702":"code","706cd8f9":"code","2bdfd9f5":"code","26c63859":"code","811bcdf3":"markdown","a6ba7cd2":"markdown","72f6141e":"markdown","df27588a":"markdown","9f683c24":"markdown","263104f0":"markdown","68f43cab":"markdown","c6d356cc":"markdown","ee463cde":"markdown","7af49ee0":"markdown","c27ead1c":"markdown","3800a82e":"markdown"},"source":{"91cbfaa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18e050e1":"import matplotlib.pyplot as plt\nfrom math import pi\nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import cross_val_score","0f0e7290":"dataset = pd.read_csv(\"\/kaggle\/input\/family-income-and-expenditure\/Family Income and Expenditure.csv\")","2b698b32":"dataset.head()","2a243b03":"msno.matrix(dataset)","8615f043":"dataset.info()","be7a94d3":"null_data = dataset[dataset.isnull().any(axis=1)]\nprint(null_data.shape)","8f27e908":"print(dataset.isnull().sum())","09ecb50e":"dataset=dataset.drop(['Household Head Occupation','Household Head Class of Worker'],axis=1)","b649678f":"dataset.info()","d23dfd74":"plt.figure(figsize=(12,10))\ncor=dataset.corr()\nsns.heatmap(cor, annot=True, cmap=plt.cm.Reds)\nplt.show()","6f97c3d5":"#Correlation with output variable\ncor_target = abs(cor[\"Total Household Income\"])\n#Selecting highly correlated features\nrelevant_features = cor_target[cor_target>0.5]\ncols1=relevant_features.index\ncols1= np.delete(relevant_features.index,0)\n\ncols1=np.delete(cols1,0)\ncols1","c1478419":"Feature Selection(Method2)","7dfa26e3":"k = 20\ntarget = 'Total Household Income'\ncorrmat = dataset.corr()\ncols = corrmat.nlargest(k, target)[target].index\nf, ax = plt.subplots(figsize=(10, 7))\ncm = np.corrcoef(dataset[cols].values.T)\nsns.set(font_scale=1.25)\ns = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\n\nprint(type(cols.values))\ncols = np.delete(cols,0)\nprint(cols)\ns.set_title(\"Top 20 variables Most Correlated with Total Household Income\", size=15)\n","f62fe618":"expenditures = [column for column in dataset.columns if 'Expenditure' in column]\nexpenditures1=cols1.values","4e8cb799":"expenditures","dbfce21b":"expenditures1","9fc43c2a":"X = dataset.loc[:, expenditures1]\ny = dataset['Total Household Income']","da6ef142":"plt.figure(figsize=(20, 20))\ni = 1\nfor exp in cols1 :\n    plt.subplot(6,3,i)\n    sns.regplot(x=X[exp], y=y)\n    i += 1","b5b5cef1":"plt.figure(figsize=(15, 25))\ni = 1\nfor exp in cols1 :\n    plt.subplot(6,3,i)\n    sns.histplot(X[exp])\n    i += 1","50ebe3ba":"from sklearn.model_selection import train_test_split\nxTrain, xTest, yTrain, yTest = train_test_split(X, y, random_state = 0)","ce751b61":"from sklearn.tree import DecisionTreeRegressor  \n  \n\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(xTrain,yTrain)","1871591e":"regressor.score(xTest,yTest)","59433805":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(verbose=True, n_jobs=-1, n_estimators=1000)\nrfr.fit(xTrain, yTrain)","a3432702":"rfr.score(xTest, yTest)","706cd8f9":"test_data=pd.read_csv(\"..\/input\/test-data\/sample.csv\")\ntest_data.head()","2bdfd9f5":"predicted_income=rfr.predict(test_data)\npredicted_income\n","26c63859":"\nfinal_DF=pd.DataFrame({'Predicted Income':predicted_income})\n\n\nfinal_DF.to_csv(\"Family_income.csv\")\n","811bcdf3":"Importing libraries","a6ba7cd2":"Splitting the data","72f6141e":"Removing the unnecessary features","df27588a":"Test with new data","9f683c24":"Data Pre-processing","263104f0":"This tells that a large number of participants in the dataset spends about the same amount for expenses. \n\nMost peaks are below the bin with the most number of datapoints, which tells us there are values to the extreme right that are skewing the curve heavily.\n\nWhile a lot of people agree on spending a certain range, there also exists a group that are spending at a maximum","68f43cab":"Feature Selection","c6d356cc":"Applying the Random Forest Regression Model","ee463cde":"7536 rows with missing values","7af49ee0":"Visualization of relationship between feature and target label","c27ead1c":"Applying the Decision Tree Regression Model","3800a82e":"**Importing the dataset**"}}