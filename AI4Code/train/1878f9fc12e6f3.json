{"cell_type":{"f230fd5c":"code","69b93c9a":"code","68003cb2":"code","c997c675":"code","b7a8cbd8":"code","4bf7b87e":"code","ed10e951":"code","8a6df3e0":"code","71a3164b":"code","63caaf28":"code","138b313c":"code","a7ecec54":"code","96644f76":"code","e8ca160a":"code","84927437":"code","0eb4b7cd":"code","281dd1be":"code","4fec8b35":"code","6727c7f3":"markdown","3cf7ea74":"markdown","3601bf85":"markdown","a8c4246a":"markdown","8aa7bf20":"markdown","ea3581c8":"markdown","ba8ff994":"markdown","3c3042fe":"markdown","89413a9a":"markdown","21afd93d":"markdown","b18ebc34":"markdown","121f99e0":"markdown","5a6a3dd5":"markdown","6b828fb5":"markdown","72d3043e":"markdown","fd57ad27":"markdown","c941d736":"markdown"},"source":{"f230fd5c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualisation\nsns.set(style=\"darkgrid\")\nimport matplotlib.pyplot as plt # data plotting\n\nimport warnings\nwarnings.simplefilter(\"ignore\") # Remove certain warnings from Machine Learning Models\n\ndata = pd.read_csv('..\/input\/mushrooms.csv')\ndata.head(2)","69b93c9a":"data.describe()","68003cb2":"sns.countplot(data['class'])","c997c675":"fig, ax =plt.subplots(1,3, figsize=(15,5))\nsns.countplot(x=\"cap-shape\", hue='class', data=data, ax=ax[0])\nsns.countplot(x=\"cap-surface\", hue='class', data=data, ax=ax[1])\nsns.countplot(x=\"cap-color\", hue='class', data=data, ax=ax[2])\nfig.tight_layout()\nfig.show()","b7a8cbd8":"fig, ax =plt.subplots(1,2, figsize=(15,5))\nsns.countplot(x=\"bruises\", hue='class', data=data, ax=ax[0])\nsns.countplot(x=\"odor\", hue='class', data=data, ax=ax[1])\nfig.tight_layout()\nfig.show()","4bf7b87e":"fig, ax =plt.subplots(1,4, figsize=(20,5))\nsns.countplot(x=\"gill-attachment\", hue='class', data=data, ax=ax[0])\nsns.countplot(x=\"gill-spacing\", hue='class', data=data, ax=ax[1])\nsns.countplot(x=\"gill-size\", hue='class', data=data, ax=ax[2])\nsns.countplot(x=\"gill-color\", hue='class', data=data, ax=ax[3])\nfig.tight_layout()\nfig.show()","ed10e951":"fig, ax =plt.subplots(2,3, figsize=(20,10))\nsns.countplot(x=\"stalk-shape\", hue='class', data=data, ax=ax[0,0])\nsns.countplot(x=\"stalk-root\", hue='class', data=data, ax=ax[0,1])\nsns.countplot(x=\"stalk-surface-above-ring\", hue='class', data=data, ax=ax[0,2])\nsns.countplot(x=\"stalk-surface-below-ring\", hue='class', data=data, ax=ax[1,0])\nsns.countplot(x=\"stalk-color-above-ring\", hue='class', data=data, ax=ax[1,1])\nsns.countplot(x=\"stalk-color-below-ring\", hue='class', data=data, ax=ax[1,2])\nfig.tight_layout()\nfig.show()","8a6df3e0":"fig, ax =plt.subplots(2,2, figsize=(15,10))\nsns.countplot(x=\"veil-type\", hue='class', data=data, ax=ax[0,0])\nsns.countplot(x=\"veil-color\", hue='class', data=data, ax=ax[0,1])\nsns.countplot(x=\"ring-number\", hue='class', data=data, ax=ax[1,0])\nsns.countplot(x=\"ring-type\", hue='class', data=data, ax=ax[1,1])\nfig.tight_layout()\nfig.show()","71a3164b":"fig, ax =plt.subplots(1,3, figsize=(20,5))\nsns.countplot(x=\"spore-print-color\", hue='class', data=data, ax=ax[0])\nsns.countplot(x=\"population\", hue='class', data=data, ax=ax[1])\nsns.countplot(x=\"habitat\", hue='class', data=data, ax=ax[2])\nfig.tight_layout()\nfig.show()","63caaf28":"# Make column class True\/False for isPoisonous\ndata['class'].replace('p', 1, inplace = True)\ndata['class'].replace('e', 0, inplace = True)\n\n# Bruises: t = True \/ f = False\ndata['bruises'].replace('t', 1, inplace = True)\ndata['bruises'].replace('f', 0, inplace = True)","138b313c":"# Encode the rest of the string data\ndata = pd.get_dummies(data)\n\npd.set_option(\"display.max_columns\",200)\ndata.head(5)","a7ecec54":"Target = ['class']\nbruisesColumn = ['bruises']\ncapColumns = list(data.columns[2:22])\nodorColumns = list(data.columns[22:31])\ngillColumns = list(data.columns[31:49])\nstalkColumns = list(data.columns[49:82])\nveilColumns = list(data.columns[82:87])\nringColumns = list(data.columns[87:95])\nsporeColumns = list(data.columns[95:104])\npopulationColumns = list(data.columns[104: 110])\nhabitatColumns = list(data.columns[110:117])","96644f76":"plt.subplots(figsize=(10,10))\nsns.heatmap(data[Target+odorColumns].corr(), annot=True)","e8ca160a":"plt.subplots(figsize=(10,10))\nsns.heatmap(data[Target+populationColumns].corr(), annot=True)","84927437":"#Create X & y\nX = data.iloc[:, 1:]\ny = data['class']","0eb4b7cd":"#Create Testing and Training Data\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)","281dd1be":"from sklearn import tree\n\ndtc = tree.DecisionTreeClassifier(max_depth=2, random_state=0)\ndtc.fit(X_train, y_train)\n\ndtc.score(X_test, y_test)\n\n","4fec8b35":"import graphviz\ndot_data = tree.export_graphviz(dtc, feature_names=X.columns.values, class_names=['Edible', 'Poisonous'], filled=True )\ngraphviz.Source(dot_data) ","6727c7f3":"# 3. Training a Model\nNow that we have usable data we can start training our data. We'll be using the Decision Tree model since it's the easiest to visualise and understand.\n\nFirst we have to create X and y DataFrames. Y DataFrames contain the data we predict, X DataFrames contain the data the model uses to predict y.","3cf7ea74":"Let's make lists with the columns so we can make some correlation heatmaps.","3601bf85":"Now that we know what our data looks like we can clean it. Let's start by turning the columns with only 2 different values into Booleans.","a8c4246a":"Gills are a bit more evenly distributed again though there are some outliers in spacing, size and color","8aa7bf20":"Most of these columns are not very interesting, but ring-type has some useful information.","ea3581c8":"These last columns have some stronger outliers we can use for prediction. especially spore print color.","ba8ff994":"# 2. Data Analysis & Cleaning\nBefore we can train a model to help us determine if a mushroom is poisonous we have to look at what kind of data we have. After that we'll clean the data so it can be used by a model.","3c3042fe":"Finally we can import and test our Decision Tree. We are using a Classifier version which gives us a Boolean variable ( 0 or 1 ). If we'd used a Regressor we would have gotten a number between 0 and 1.\n\nTo keep it simple we will limit the tree to a maximum depth of 5. Then we'll fit the training data. Fitting prepares the model for the real work, in this case the identification of X_test.","89413a9a":"# Is This Mushroom Poisonous? - The basics of Machine Learning\n[Index](https:\/\/www.kaggle.com\/veleon\/in-depth-look-at-machine-learning-models)\n\nEveryone has to start somewhere, usually the beginning. It is no different when you're learning Machine Learning. This Kernel is my attempt at showing the basics of Machine Learning.\n\nWe'll be using the Mushroom Classification dataset to determine if a mushroom we found is poisonous or edible.\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*_QGyIwpgq831xI54cIe_GQ.jpeg\" alt=\"ML Process\" width=\"600\"\/>\n## Index\n1. Importing Libraries & Data\n2. Data Analysis & Cleaning\n3. Training a Model\n4. Visualize \n\n# 1. Importing Libraries & Data","21afd93d":"Most of the cap related columns seem fairly balanced between edible and poisonous. Notable are cap-shape k, cap-surface f and cap-color w for not having a fairly equal distribution.","b18ebc34":"Our machine learning models can't read characters (only integers and floats). So we'll have to make a column for every unique value. Pandas has a function for this, named get_dummies. Our DataFrame looks a bit different now.","121f99e0":"Again, the stalk columns are fairly evenly distributed. There are some outliers in surface and color that could be usefull for classification.","5a6a3dd5":"We have a lot of different columns. We'll try to get some insight into what effect they have on the class of a mushroom by making some graphs.\n\nLet's start by looking at the distribution of edible and poisonous mushrooms in our data. As you can see the distribution is almost 50\/50, which is very nice when you are going to let a machine learning model use your data. This means it won't have to struggle to find correlations.","6b828fb5":"To test our model we split the data into training and testing data. This ensures that the model doesn't just memorize the data instead of finding correlations.","72d3043e":"# Conclusion \nNow that you know how to start a Machine Learning project we'll go some more in depth into different Machine Learning Models in the next Kernels.\n### Next Kernel\n[How Does Linear Regression Work?](https:\/\/www.kaggle.com\/veleon\/how-does-linear-regression-work)\n### Back to Index\n[Index](https:\/\/www.kaggle.com\/veleon\/in-depth-look-at-machine-learning-models)","fd57ad27":"The bruises are a much better indication if a mushroom is poisonous or not. You can clearly see the distribution in the plot. The odors are even more clear, only odor n has both poisonous and edible. Even then it's not really a fair distribution with edible being multiple times larger. These are both good columns to use for determining the class of a mushroom.","c941d736":"Our final score is 0.954 which is really good! This means we are correct 95.4% of the time. To increase this we could remove the max_depth limit so the tree can grow bigger.\n\nNow let's see what our Decision Tree looks like!\nThe tree is built out of leaves and these leaves contain information about our model:\n* Condition of the leaf\n* Gini (or chance of incorrect measurement of a random training sample at that point)\n* The number of samples that passed during fitting\n* Class (or prediction) of the sample at that point"}}