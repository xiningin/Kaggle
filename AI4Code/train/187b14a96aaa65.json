{"cell_type":{"8e7ad0c5":"code","6dd8f81b":"code","d3bfc85c":"code","d36d3d36":"code","b2687738":"code","47473c41":"code","7955bf2f":"code","94573a95":"code","3a891376":"code","5bd01bc7":"code","8dbaef9d":"code","584dbc67":"code","fd41c03d":"code","e7330637":"code","9003f38b":"code","07b9f509":"code","8bf1ba16":"code","04f98510":"code","bfd64da5":"code","e7896003":"code","7d4dea63":"code","0d1e2555":"code","e5b1a240":"code","e6e1a74c":"code","7f052aaf":"code","9dc1a0c8":"code","2a9d4135":"code","ba1a7d69":"code","5d484eb2":"code","870008b2":"code","69e314ae":"code","1e5b3573":"markdown","6c9981a6":"markdown","d6183f47":"markdown","ac7bcfa9":"markdown","fabce776":"markdown","91a72277":"markdown","37864694":"markdown"},"source":{"8e7ad0c5":"import pandas as pd\nimport numpy as np\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n","6dd8f81b":"data=pd.read_csv('..\/input\/sales_train.csv')","d3bfc85c":"test=pd.read_csv('..\/input\/test.csv')","d36d3d36":"data.head()","b2687738":"test.head()","47473c41":"data['date'] = data['date'].apply(lambda x: datetime.strptime(x,'%d.%m.%Y'))","7955bf2f":"print(data.dtypes)\ndata['date_block_num'] = data['date_block_num'].astype(str)\ndata['shop_id'] = data['shop_id'].astype(str)\ndata['item_id'] = data['item_id'].astype(str)\nprint(data.dtypes)","94573a95":"data.describe()","3a891376":"data.apply(lambda x:sum(x.isnull()),axis=0)","5bd01bc7":"data.boxplot(column = 'item_price')\nplt.show()","8dbaef9d":"data[\"shop_id\"].unique()","584dbc67":"data[\"item_id\"].unique()","fd41c03d":"data[\"date_block_num\"].unique()","e7330637":"data['shop_id'].value_counts().plot(kind='bar',figsize=(15, 5))","9003f38b":"data['date_block_num'].value_counts().plot(kind='bar',figsize=(15, 5))","07b9f509":"#data['item_id'].value_counts().plot(kind='bar',figsize=(15, 5))\ndata['item_id'].value_counts()","8bf1ba16":"modified = data.pivot_table(index=['shop_id','item_id'], columns='date_block_num', values='item_cnt_day',aggfunc='sum').fillna(0.0)\ntrain_df = modified.reset_index()\ntrain_df['shop_id']= train_df.shop_id.astype('str')\ntrain_df['item_id']= train_df.item_id.astype('str')\ntrain_df.head()","04f98510":"train_df = train_df[['shop_id', 'item_id','0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33']]\ntrain_df.head()","bfd64da5":"X_train=train_df.iloc[:,  (train_df.columns != '33')].values\ny_train=train_df.iloc[:, train_df.columns == '33'].values","e7896003":"rf = RandomForestRegressor(random_state = 10)\n# Train the model on training data\nrf.fit(X_train, y_train)\nfrom sklearn.metrics import mean_squared_error\nrmse_dmy = np.sqrt(mean_squared_error(y_train, rf.predict(X_train)))\nprint('RMSE: %.4f' % rmse_dmy)","7d4dea63":"param_grid = {\n    'bootstrap': [True],\n    'max_depth': [5,10],\n    #'max_features': [20],\n    'min_samples_leaf': [3],\n    'min_samples_split': [8],\n    'n_estimators': [100]\n}\n# Create a based model\nrf = RandomForestRegressor()\n\ngrid_search = GridSearchCV(estimator = rf, param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)\ngrid_search.fit(X_train, y_train)\n\nrmse_dmy = np.sqrt(mean_squared_error(y_train, grid_search.predict(X_train)))\nprint('RMSE: %.4f' % rmse_dmy)","0d1e2555":"import xgboost as xgb\nparam = {'max_depth':12,\n         'subsample':1,  \n         'min_child_weight':0.5,  \n         'eta':0.3,\n         'num_round':1000, \n         'seed':42,  \n         'silent':0,\n         'eval_metric':'rmse',\n         'early_stopping_rounds':100\n        }\n\nprogress = dict()\nxgbtrain = xgb.DMatrix(X_train, y_train)\nwatchlist  = [(xgbtrain,'train-rmse')]\nbst = xgb.train(param, xgbtrain)\npreds = bst.predict(xgb.DMatrix(X_train))\nrmse_dmy = np.sqrt(mean_squared_error(y_train,preds))\nprint('RMSE: %.4f' % rmse_dmy)","e5b1a240":"preds_XG = bst.predict(xgb.DMatrix(X_train))\npreds_RFCV = grid_search.predict(X_train)\n\n## Stacking \nStacking_data_Train=pd.DataFrame( {'RandomForest':preds_RFCV,'CGB':preds_XG})\n","e6e1a74c":"\nparam = {'max_depth':12,\n         'subsample':1,  \n         'min_child_weight':0.5,  \n         'eta':0.3,\n         'num_round':1000, \n         'seed':42,  \n         'silent':0,\n         'eval_metric':'rmse',\n         'early_stopping_rounds':100\n        }\n\nprogress = dict()\nxgbtrain_2 = xgb.DMatrix(Stacking_data_Train, y_train)\nwatchlist_2  = [(xgbtrain_2,'train-rmse')]\nbst2 = xgb.train(param, xgbtrain_2)\npreds = bst2.predict(xgb.DMatrix(Stacking_data_Train))\nrmse_dmy = np.sqrt(mean_squared_error(y_train,preds))\nprint('RMSE: %.4f' % rmse_dmy)","7f052aaf":"test_df = test.copy()\ntest_df['shop_id']= test_df.shop_id.astype('str')\ntest_df['item_id']= test_df.item_id.astype('str')\n\ntest_df = test_df.merge(train_df, how = \"left\", on = [\"shop_id\", \"item_id\"]).fillna(0.0)\ntest_df.head()\n","9dc1a0c8":"test_df.columns =['ID','shop_id','item_id','-1','0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32']\ntest_df.head()","2a9d4135":"X_test = test_df.iloc[:, (test_df.columns != 'ID') & (test_df.columns != '-1')].values","ba1a7d69":"preds_XG = bst.predict(xgb.DMatrix(X_test))\npreds_RFCV = grid_search.predict(X_test)\n\n## Stacking \nStacking_data_Test=pd.DataFrame( {'RandomForest':preds_RFCV,'CGB':preds_XG})\n","5d484eb2":"preds_vf = bst2.predict(xgb.DMatrix(Stacking_data_Test))","870008b2":"preds_vf = list(map(lambda x: min(20,max(x,0)), list(preds_vf)))\nfinal = pd.DataFrame({'ID':test_df.ID,'item_cnt_month': preds_vf })","69e314ae":"final.to_csv('Stacking_RFCV_XGB.csv',index=False)","1e5b3573":"## Modelling","6c9981a6":"### 3)XGBoost","d6183f47":"### Prediction for test data","ac7bcfa9":"### 2)Random Forest with Grid Search","fabce776":"### Stacking","91a72277":"### Feature Engineering ","37864694":"### 1)Random Forest Regressor"}}