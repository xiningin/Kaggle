{"cell_type":{"cfb873f5":"code","7ceab1fb":"code","24aa7cf4":"code","f92a22b0":"code","ff815d07":"code","dd1054b6":"code","904cd9a5":"code","19d56131":"code","9d0e3309":"code","cd6c0248":"code","6c75e410":"code","dda1bb9c":"code","8a4aadbd":"code","925c0189":"code","d976890d":"code","649b3596":"code","8aed1359":"code","a1711a50":"code","7ae11639":"code","e29374d1":"code","2a0108be":"code","f219b4f5":"code","cd2156b3":"code","96a1fb41":"code","5308fe26":"code","cd9ccf4d":"code","a861d138":"code","91e564c2":"code","201f56a1":"code","973e331f":"code","b33a8205":"code","c2776e40":"code","4eb75d35":"code","e5f34216":"code","7d000ccf":"code","bc9d7cc2":"code","fcd7da40":"code","e2ea5154":"code","76e8ab87":"code","e7f85a15":"code","beda00f6":"code","a959066b":"code","7e86ba36":"code","3118d7b5":"code","51aee26f":"code","84eeb553":"code","8fd9ff2f":"code","8cdbd223":"code","7f8c688e":"code","c24b11ba":"code","06b01a30":"code","d183c2b1":"code","f2fe933b":"code","2bc93ffd":"code","b93f2868":"code","996d2e5a":"code","f9d5825e":"code","c8682d39":"code","66dcc1c9":"code","58094f15":"code","3fe946c8":"code","629325f9":"code","5f28d8d8":"code","18d416df":"code","d8141a64":"code","99944ad6":"code","3f2a8b8c":"code","fb751cb0":"code","6c46cd11":"code","6039c621":"code","270bf1c4":"code","abf225ae":"code","75d28326":"code","c843fe62":"code","7d4b80f0":"code","1850a0be":"code","56d7555c":"code","b5d9c5ef":"code","999c7e02":"code","c2e01008":"code","d255c7de":"code","7b52dad6":"code","a1e0bbef":"code","bce089a8":"code","868f13c4":"markdown","f83af60b":"markdown","a006ee83":"markdown","37c8b1a2":"markdown","f5e723ce":"markdown","c87c365e":"markdown","0f78e21e":"markdown","add7d35f":"markdown","ef2656b4":"markdown","d069549e":"markdown","f7dc5713":"markdown","416e9711":"markdown","8358fff8":"markdown","159fb943":"markdown","56f7dcdf":"markdown","b9ac3283":"markdown","16bab33e":"markdown","508d49bc":"markdown","aa0f6a53":"markdown","3b676ee8":"markdown","5cb303d9":"markdown","b690334a":"markdown","d70b7844":"markdown","65e4acb8":"markdown","a6e41df2":"markdown","12bd41b6":"markdown","324be660":"markdown","faae1754":"markdown","92fcdc10":"markdown","0b74198d":"markdown","66791297":"markdown","2225ad01":"markdown","eda3851e":"markdown","abcf7991":"markdown","c046a3f4":"markdown","5b4b7b82":"markdown","d5aa02d1":"markdown","dc2d09ef":"markdown","da304381":"markdown","63d9fcca":"markdown","868d2376":"markdown","091e22a1":"markdown","834cf77f":"markdown","7bd252ae":"markdown","176df205":"markdown","2e228ef3":"markdown","7f769953":"markdown","0f75676f":"markdown"},"source":{"cfb873f5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ceab1fb":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntset_PassengerId = test_df[\"PassengerId\"]","24aa7cf4":"train_df.head()","f92a22b0":"train_df.columns","ff815d07":"train_df.info()","dd1054b6":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    \n    var = train_df[variable]            # get feature\n   \n    varValue = var.value_counts()       # count number of categorical variable(value\/sample)\n    \n    #visualize\n    \n    plt.figure(figsize = (10,5))\n    plt.bar(varValue.index , varValue)\n    plt.xticks(varValue.index , varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} : \\n {}\".format(variable,varValue))\n    \n    ","904cd9a5":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","19d56131":"def numVar_hist(variable):\n    plt.figure(figsize = (10,5))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} dist. with histogram\".format(variable))\n    plt.show()\n    \n    ","9d0e3309":"num_var = [\"Age\",\"Fare\",\"PassengerId\"]\nfor n in num_var:\n    numVar_hist(n)","cd6c0248":"# PClass - Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index=False).mean().sort_values(by=\"Survived\",ascending = False)\n","6c75e410":"# Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","dda1bb9c":"# SibSp - Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","8a4aadbd":"# Parch - Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index=False).mean().sort_values(by=\"Survived\",ascending = False)","925c0189":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","d976890d":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","649b3596":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)","8aed1359":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","a1711a50":"train_df.head()","7ae11639":"train_df.columns[train_df.isnull().any()]","e29374d1":"train_df.isnull().sum()","2a0108be":"train_df[train_df[\"Embarked\"].isnull()]","f219b4f5":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","cd2156b3":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","96a1fb41":"train_df[train_df[\"Fare\"].isnull()]","5308fe26":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","cd9ccf4d":"train_df[train_df[\"Fare\"].isnull()]","a861d138":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr() , annot=True , fmt=\".2f\" )\nplt.show()","91e564c2":"import plotly.graph_objs as go\ndata =go.Scatter(\n                    y = train_df.Fare,\n                    x =  train_df.Age,\n                    mode = \"markers\",\n                    name = \"Fare-Age\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= train_df.Fare.corr(train_df.Age))\n\nlayout = dict(title = 'Correlation of Fare and Age',\n              yaxis= dict(title= 'Fare',ticklen= 5,zeroline= False),\n              xaxis= dict(title= 'Age',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","201f56a1":"a = sns.factorplot(x = \"SibSp\" , y = \"Survived\",hue = \"Sex\", data = train_df , kind = \"bar\" , size = 7)\na.set_ylabels(\"Survived Probability\")\nplt.show(a)","973e331f":"a = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df ,kind = \"bar\" ,size = 8 )\na.set_ylabels(\"Survived Probability\")\nplt.show(a)","b33a8205":"a = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df ,kind = \"bar\" ,size = 8 )\na.set_ylabels(\"Survived Probability\")\nplt.show(a)","c2776e40":"k = sns.FacetGrid(train_df , col=\"Survived\")\nk.map(sns.distplot , \"Age\" , bins = 25)\nplt.show()","4eb75d35":"a = sns.FacetGrid(train_df , col=\"Pclass\" , row=\"Survived\", size=3)\na.map(sns.histplot , \"Age\" , bins = 25)\nplt.show()","e5f34216":"a = sns.FacetGrid(train_df , row = \"Embarked\" , size=3)\na.map(sns.pointplot , \"Pclass\",\"Survived\",\"Sex\")\na.add_legend()\nplt.show()","7d000ccf":"a = sns.FacetGrid(train_df , row = \"Embarked\" , col = \"Survived\" , size=2.5)\na.map(sns.barplot , \"Sex\",\"Fare\")\na.add_legend()\nplt.show()","bc9d7cc2":"train_df.isnull().sum()","fcd7da40":"sns.factorplot(x = \"Sex\" , y = \"Age\" , data =train_df , kind = \"box\" )\nplt.show()","e2ea5154":"sns.factorplot(x = \"Sex\" , y = \"Age\"  ,hue = \"Pclass\" ,data =train_df , kind = \"box\" )\nplt.show()","76e8ab87":"sns.factorplot(x = \"Parch\" , y = \"Age\" ,data =train_df , kind = \"box\" )\nsns.factorplot(x = \"SibSp\" , y = \"Age\" ,data =train_df , kind = \"box\" )\n\nplt.show()","e7f85a15":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr() , annot=True)\nplt.show()","beda00f6":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","a959066b":"train_df[train_df[\"Age\"].isnull()]","7e86ba36":"train_df[\"Name\"].head(10)","3118d7b5":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","51aee26f":"sns.countplot(x=\"Title\",data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","84eeb553":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Don\",\"Rev\",\"Dr\",\"Major\",\"Lady\",\"Sir\",\"Col\",\"Capt\",\"the Countess\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"] ]\ntrain_df[\"Title\"].head()","8fd9ff2f":"sns.countplot(x=\"Title\",data = train_df)\nplt.xticks(rotation = 0)\nplt.show()","8cdbd223":"g = sns.factorplot(x = \"Title\" , y = \"Survived\" , data = train_df, kind =\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","7f8c688e":"train_df.drop(labels = [\"Name\"] , axis = 1 , inplace = True)","c24b11ba":"train_df.head()","06b01a30":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\n","d183c2b1":"train_df.head()\n","f2fe933b":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","2bc93ffd":"train_df.head()","b93f2868":"g = sns.factorplot(x = \"Fsize\" , y = \"Survived\" , data = train_df , kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","996d2e5a":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"Fsize\"]]","f9d5825e":"sns.countplot(x = \"family_size\" , data = train_df)\nplt.show()","c8682d39":"g = sns.factorplot(x = \"family_size\" , y = \"Survived\" , data = train_df , kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","66dcc1c9":"train_df = pd.get_dummies(train_df , columns=[\"family_size\"])\n","58094f15":"train_df.head(10)","3fe946c8":"train_df[\"Embarked\"].head()","629325f9":"sns.countplot(x = \"Embarked\" , data=train_df)\nplt.show()","5f28d8d8":"train_df = pd.get_dummies(train_df,columns=[\"Embarked\"])","18d416df":"train_df.head()","d8141a64":"train_df[\"Ticket\"].head(20)","99944ad6":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets\n    ","3f2a8b8c":"train_df[\"Ticket\"].head(15)","fb751cb0":"train_df = pd.get_dummies(train_df,columns=[\"Ticket\"],prefix = \"T\")\ntrain_df.head(10)","6c46cd11":"sns.countplot(x = \"Pclass\" ,data=train_df )\nplt.show()","6039c621":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])\ntrain_df.head()","270bf1c4":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df , columns=[\"Sex\"])\ntrain_df.head()","abf225ae":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","75d28326":"train_df.columns","c843fe62":"from sklearn.model_selection import train_test_split,StratifiedKFold,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n","7d4b80f0":"train_df_len","1850a0be":"test = train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","56d7555c":"test.head()","b5d9c5ef":"train = train_df[:train_df_len]\nX_train = train.drop(labels=[\"Survived\"],axis=1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train , y_train , test_size = 0.33, random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))\n","999c7e02":"logreg = LogisticRegression(solver='liblinear')\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","c2e01008":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","d255c7de":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","7b52dad6":"cv_results = pd.DataFrame({\"Cross Validation Means\" : cv_result ,\n                         \"ML Models \": [\"DecisionTreeClassifier\",\n             \"SVC\",\n             \"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\ng = sns.barplot(\"Cross Validation Means\" ,\"ML Models \" , data=cv_results)\ng.xlabels(\"Mean Accuracy\")\ng.titles(\"Cross Validation Scores\")","a1e0bbef":"votingC = VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                      (\"rfc\",best_estimators[2]),\n                                      (\"lr\",best_estimators[3])],\n                                       voting = \"soft\" ,n_jobs = -1)\nvotingC = votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","bce089a8":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([tset_PassengerId,test_survived],axis = 1)\nresults.to_csv(\"titanic_eda.csv\",index = False)","868f13c4":"<a id = \"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","f83af60b":"<a id = \"7\"><\/a><br>\n# Outlier Detection","a006ee83":"<a id = \"29\"><\/a><br>\n\n# Modeling","37c8b1a2":"<a id = \"13\"><\/a><br>\n##  Between SibSp -- Survived","f5e723ce":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression","c87c365e":"Chance of survive is decreasing when the family size getting larger.","0f78e21e":"<a id = \"5\"><\/a><br>\n## Numerical Variable","add7d35f":"<a id = \"25\"><\/a><br>\n## Ticket","ef2656b4":"[](http:\/\/)","d069549e":"<a id = \"18\"><\/a><br>\n## Between Embarked -- Sex -- Pclass -- Survived","f7dc5713":"* Class type is important feature for Surviving","416e9711":"* oldest guys are in 1. class , youngest guys are in 3.rd class","8358fff8":"# Introduction\nThis is my first project which is real life problem. I am going to learn Data Science and ML algorithms on this project's path. \n\n<font color = 'blue'>\nContent: \n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1.[Basic Data Analysis](#6)    \n1.[Outlier Detection](#7)   \n1.[Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1.[Visualization](#11)\n    * [Correlation Matrices Between Sibsp -- Parch -- Age -- Fare -- Survived](#12)\n    * [Between Sibsp -- Survived](#13)\n    * [Between Parch -- Survived](#14)\n    * [Between PClass -- Survived](#15)\n    * [Between Age -- Survived](#16)\n    * [Between Pclass -- Age -- Survived](#17)\n    * [Between Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Between Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing : Age Feature](#20)\n1.[Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1.[Modeling](#29)\n    * [Train-Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)\n    ","159fb943":"<a id = \"11\"><\/a><br>\n# **Visualization**","56f7dcdf":"* Much more Fare much more Surviving Probability","b9ac3283":"<a id = \"4\"><\/a><br>\n## Categorical Variable","16bab33e":"<a id = \"22\"><\/a><br>\n## Name -- Title","508d49bc":"<a id = \"17\"><\/a><br>\n## Between PClass -- Age -- Survived","aa0f6a53":"* Number of SibSp has negative correlation between Survived.\n* More SibSp is less Survived\n* If number of SibSp == 0 or 1 or 2 , passenger has more chance to survive","3b676ee8":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","5cb303d9":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* I will compare 5 Machine learning classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","b690334a":"<a id = \"30\"><\/a><br>\n## Train - Test Split","d70b7844":"* Medians of male and females are too close , so we can not predict correctly.","65e4acb8":"<a id = \"15\"><\/a><br>\n## Between PClass -- Survived","a6e41df2":" !! Fare feature seems to has a correlation bewteen Survived ","12bd41b6":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* PClass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","324be660":"<a id = \"16\"><\/a><br>\n## Between Age -- Survived","faae1754":"<a id = \"33\"><\/a><br>\n## Ensemble Modeling","92fcdc10":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","0b74198d":"<a id = \"20\"><\/a><br>\n## Fill Missing : Age Feature","66791297":"<a id = \"34\"><\/a><br>\n## Prediction and Submission","2225ad01":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","eda3851e":"* Females have much more survive probability.","abcf7991":"<a id = \"10\"><\/a><br>\n# Fill Missing Value","c046a3f4":"#### In this train-test split method I will use \"X_train\" and \"y_train\" for model training\n#### In this train-test split method I will use \"X_test\" and \"y_test\" for model validation\n#### In this train-test split method we will use \"test\" for model testing","5b4b7b82":"<a id = \"14\"><\/a><br>\n##  Between Parch -- Survived","d5aa02d1":"<a id = \"21\"><\/a><br>\n# Feature Engineering","dc2d09ef":"<a id = \"24\"><\/a><br>\n## Embarked","da304381":"<a id = \"19\"><\/a><br>\n## Between Embarked -- Sex -- Fare -- Survived","63d9fcca":"* Childres ( 10 <= ) has more chance of Survive\n* Large number of Young people ( about 20 ) did not survive\n* Most of passengers are 15-35 ","868d2376":"<a id = \"12\"><\/a><br>\n## Correlation Matrices Between SibSp -- Parch -- Age -- Fare -- Survived","091e22a1":"* SibSp and Parch can be used for new feature\n* Small families are has more chance to survive\n","834cf77f":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId : unique Passenger number\n1. Survived : Passenger survive(1) or Died (0)\n1. Pclass : Passenger class\n1. Name : Name\n1. Sex : Sex\n1. Age : Age of Passenger\n1. SibSp : number of siblins \/ spouses\n1. Parch : number of Parents\/Children\n1. Ticket : Ticket number\n1. Fare : Cost of Ticket\n1. Cabin : Cabin name\n1. Embarked : port of where passenger embarked","7bd252ae":"<a id = \"27\"><\/a><br>\n## Sex","176df205":"* Age is correlated with SibSp,Parch, and Pclass  but not with sex","2e228ef3":"<a id = \"9\"><\/a><br>\n# Find Missing Value","7f769953":"<a id = \"23\"><\/a><br>\n## Family Size","0f75676f":"<a id = \"26\"><\/a><br>\n## Pclass"}}