{"cell_type":{"eb34240f":"code","cd162499":"code","11c955a9":"code","43240f54":"code","e4e02db4":"code","852b2d66":"code","958b7d47":"code","dd270547":"code","9d54c1b2":"code","a0fa7d67":"code","d5c487ba":"code","e5c544ac":"code","83bcd041":"code","9b64cd2a":"code","bfb49df4":"code","9e2bdd64":"code","e2328150":"code","bf310ee2":"code","6f06ca90":"code","d2a28eb3":"markdown","05763d11":"markdown","843d7a31":"markdown","f33e128d":"markdown","98deb94c":"markdown","6b5c7219":"markdown","30f15048":"markdown","d8f3c198":"markdown","3c3a75cb":"markdown","eb4aba82":"markdown","8084a4da":"markdown","53256592":"markdown","03f9c573":"markdown","662fda8b":"markdown","600e8f21":"markdown"},"source":{"eb34240f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cd162499":"#importing necessary libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as pltimg\nimport seaborn as sns\nsns.set()","11c955a9":"#Loading data of train and test set\ntrain = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\ntrain","43240f54":"X_train = train.drop(['label'],axis = 1)\ny_train = train['label']","e4e02db4":"test","852b2d66":"X_test = test","958b7d47":"#Checking for null values in train and test set\n\nprint('Number of null values in training set is : ',train.isnull().sum().unique())\nprint('Number of null values in test set is : ',test.isnull().sum().unique())","dd270547":"plt.figure(figsize=(15,8))\nplt.hist(y_train,bins=20)\nplt.xticks(range(10),fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel('Numbers',fontsize = 20)\nplt.ylabel('Counts or Frequency',fontsize =20)\nplt.show()","9d54c1b2":"#Reshaping\n\nX_train_reshaped = X_train.values.reshape(-1,28,28,1)\nX_test_reshaped = X_test.values.reshape(-1,28,28,1)\n\n#Normalising\n\nX_train_normalised = X_train_reshaped\/255.\nX_test_normalised = X_test_reshaped\/255.","a0fa7d67":"def visualise_digits(cmap = 'gray'):\n    fig = plt.figure(figsize=(15,15))\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(X_train_normalised[i][:,:,0],cmap = cmap)\n        plt.title('Label {}'.format(y_train[i]))\n        plt.xticks(ticks = [])\n        plt.yticks(ticks = [])\n            \n            \nvisualise_digits()","d5c487ba":"#importing library\nfrom tensorflow.keras.utils import to_categorical\n\n\n#encoding to 10 classes of one hot vectors\ny_train_encoded = to_categorical(y_train,num_classes=10)","e5c544ac":"#importing library\nfrom sklearn.model_selection import train_test_split\n\n#Splitting the data\nX_train_final,X_val,y_train_final,y_val = train_test_split(X_train_normalised,y_train_encoded,test_size = 0.2,random_state = 42)","83bcd041":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv2D, MaxPool2D\nfrom tensorflow.keras.layers import BatchNormalization,Flatten,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(input_shape=(28,28,1),filters=64,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding=\"same\", activation=\"relu\"))\n\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\n\nmodel.add(Flatten())\n\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(units=256,activation=\"relu\"))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(units=10, activation=\"softmax\"))","9b64cd2a":"model.compile(loss = 'categorical_crossentropy',optimizer = 'adam',metrics = ['accuracy'])\n\nmodel.summary()","bfb49df4":"callbacks = [ \n    EarlyStopping(monitor = 'loss', patience = 6), \n    ReduceLROnPlateau(monitor = 'loss', patience = 4)\n]","9e2bdd64":"model.fit(X_train_final,y_train_final,\n         batch_size = 64,\n         epochs = 100,\n         verbose = 1,\n         validation_data = (X_val,y_val),\n         callbacks = callbacks)","e2328150":"#Metric on validation set\nscore = model.evaluate(X_val,y_val,verbose = 0)\nprint('The loss on validation set is {0} and the accuracy is {1}'.format(round(score[0],3),round(score[1],3)))","bf310ee2":"# predict results\nresults = model.predict(X_test_normalised)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name='Label')\n","6f06ca90":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"cnn_result.csv\",index=False)","d2a28eb3":"So there are no null values in train and test set","05763d11":"## Splitting of data into train and validation set","843d7a31":"Almost each label has enough equal count in training set","f33e128d":"There are 28000 images in test set","98deb94c":"## Let's check if there is any imbalanced in data labels","6b5c7219":"Keras takes the digits in tensors form i.e 3d channel of RGB.Since here only grayscale is involved we will reshape the images into (px,px,1) where 1 is number of channel.In case of RGB number of channel is 3.","30f15048":"# Implementation of Model","d8f3c198":"So the image consists of 784 pixels which represents same number of columns and has 1 extra column as label which tells which number it is.\n\nThere are 42000 images in train set\n\nLet's split the datas in independent and dependent set","3c3a75cb":"* Let the split be 80-20 train-val split","eb4aba82":"# Data Preparation and Intuition","8084a4da":"# Generating Output","53256592":"Let's visualise some digits","03f9c573":"Values in grayscale range from 0 to 255.Higher values can influence their\nweights as compared to lower values weights.Therefore normalising the values between 0 to 1 by dividing every value by 255.","662fda8b":"## Reshaping and Normalising the digits","600e8f21":"## One hot encoding the target variable i.e. y_train"}}