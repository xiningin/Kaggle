{"cell_type":{"89c43ca5":"code","81842b23":"code","83dd6a20":"code","8932860e":"code","799c31f3":"code","2dd22028":"code","494d6927":"code","698bcc79":"code","e7594d5a":"code","cdaab6a3":"code","813d9d80":"code","eb25d8a7":"code","97c6cffc":"code","910e06ac":"code","1927963d":"code","be5c6a07":"code","5972dfed":"code","58f4ac7b":"code","52f7997d":"code","c5be1c83":"code","d8e00980":"code","0fe130e2":"code","1c1d8b6b":"code","1bb670fc":"code","72d41342":"code","a0781e2a":"code","4c16fd29":"code","42449441":"code","7c513350":"code","432ca4b1":"code","d1ae382c":"code","719c6e70":"code","48e34339":"code","f536a490":"code","500ee516":"code","3b9bbfab":"code","1616d830":"code","274d3f7c":"code","89b86c8d":"code","1a7e24b8":"code","318cd615":"code","188a1c24":"code","e531fefd":"code","1eedb3c7":"code","e705adc2":"code","818f062b":"code","08d564f4":"code","e8cf2350":"code","ed1aa5d8":"markdown","9b8f22ed":"markdown","fb0b6d32":"markdown","2027418f":"markdown","bddebfd2":"markdown","669e6a10":"markdown","07608c12":"markdown","d98fe6e1":"markdown","387557fd":"markdown","acc5d657":"markdown","a4197087":"markdown","9e8060d8":"markdown","58e1029b":"markdown"},"source":{"89c43ca5":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_predict, cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, f1_score\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","81842b23":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\nall_data = [train_df, test_df]\n","83dd6a20":"train_df.head(10)","8932860e":"train_df.tail(10)","799c31f3":"train_df.info()","2dd22028":"test_df.info()","494d6927":"train_df.describe()","698bcc79":"train_df.describe(include =['O'])","e7594d5a":"train_df[['Survived','Pclass']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending = False)","cdaab6a3":"train_df[['Survived','Sex']].groupby(['Sex'],as_index = False).mean().sort_values(by='Survived', ascending = False)","813d9d80":"train_df[['Survived','Embarked']].groupby(['Embarked'],as_index = False).mean().sort_values(by='Survived', ascending = False)","eb25d8a7":"train_df[['Survived','SibSp']].groupby(['SibSp'],as_index = False).mean().sort_values(by='Survived', ascending = False)","97c6cffc":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins = 20)","910e06ac":"g = sns.FacetGrid(train_df, col='Survived', row= 'Pclass')\ng.map(plt.hist, 'Age', bins=20)","1927963d":"g = sns.FacetGrid(train_df, col='Survived', row= 'Embarked')\ng.map(plt.hist, 'Age', bins=20)","be5c6a07":"train_df = train_df.drop(['PassengerId','Cabin','Ticket','Name'], axis = 1)\ntest_df = test_df.drop(['PassengerId','Cabin','Ticket','Name'], axis = 1)\nall_data = [train_df, test_df]","5972dfed":"print('train_df_shape : ',train_df.shape,'\\ntest_df_shape : ' , test_df.shape)","58f4ac7b":"for data in all_data:\n    data['Sex_new'] = data['Sex'].map({'male' : 0 , 'female' : 1}).astype(int)\ntrain_df.head()    ","52f7997d":"#null_ages = np.zeros((2,3))\nfor data in all_data:\n    for i in range(0,2):\n        for j in range(0,3):\n            \n            ages_mean = data[(data['Sex_new']==i) & (data['Pclass']==j+1)]['Age'].dropna().mean()\n            #null_ages[i, j] = ages_mean\n            \n            data.loc[(data.Age.isnull()) & (data.Sex_new==i) & (data.Pclass==j+1), 'Age'] = ages_mean\n    data['Age'] = np.ceil(data['Age']).astype(int)\n    \nprint(train_df['Age'].isnull().sum())\nprint(test_df['Age'].isnull().sum())","c5be1c83":"train_df = train_df.drop(['Sex_new'], axis = 1)\ntest_df = test_df.drop(['Sex_new'], axis = 1)\ntrain_df.head()    ","d8e00980":"Embarked_freq = train_df['Embarked'].dropna().mode()[0]\nEmbarked_freq","0fe130e2":"train_df['Embarked'] = train_df['Embarked'].fillna(Embarked_freq)\ntrain_df['Embarked'].isnull().sum()","1c1d8b6b":"fare_median = test_df['Fare'].dropna().median()\ntest_df['Fare'] = test_df['Fare'].fillna(fare_median)\ntest_df['Fare'].isnull().sum()","1bb670fc":"train_df['Family Size'] = train_df['Parch'] + train_df['SibSp'] +1\ntest_df['Family Size'] = test_df['Parch'] + test_df['SibSp'] +1\ntrain_df.head()\n","72d41342":"train_df[['Survived', 'Family Size']].groupby(['Family Size'],as_index = False).mean().sort_values(by = 'Survived', ascending = False)","a0781e2a":"train_df = train_df.drop(['Parch', 'SibSp'], axis=1)\ntest_df = test_df.drop(['Parch', 'SibSp'], axis=1)\nall_data = [train_df, test_df]\n","4c16fd29":"\ntrain_df = pd.get_dummies(train_df)\ntest_df = pd.get_dummies(test_df)\n\ntrain_df.head()","42449441":"all_data = [train_df, test_df]","7c513350":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","432ca4b1":"for data in all_data:\n    data['Fare_category'] = pd.cut(data['Fare'], bins = [0, 8, 16, 32, np.inf], labels = [0, 1, 2, 3])\ntrain_df = train_df.drop(['FareBand'], axis = 1)  \n","d1ae382c":"train_df = train_df.dropna(how='any',axis=0)\ntest_df = test_df.dropna(how='any',axis=0)","719c6e70":"print(train_df.isnull().sum())\nprint('___'*15)\nprint(test_df.isnull().sum())\n","48e34339":"train_df = train_df.drop(['Fare'], axis = 1)\ntest_df = test_df.drop(['Fare'], axis = 1)\nall_data = [train_df, test_df]","f536a490":"train_df.head()","500ee516":"test_df.head()","3b9bbfab":"all_data = [train_df, test_df]\nfor data in all_data:\n    data['Age'] = (data['Age']-data['Age'].mean()) \/ data['Age'].std()\ntrain_df.head()    ","1616d830":"y_train = train_df['Survived']\nX_train = train_df.drop(['Survived'], axis = 1)\n","274d3f7c":"sgd_clf = SGDClassifier(random_state = 42)\ncross_val_score(sgd_clf, X_train, y_train, cv = 3, scoring = 'accuracy')\n","89b86c8d":"svc_clf = SVC()\ncross_val_score(svc_clf, X_train, y_train, cv = 3, scoring = 'accuracy')\n","1a7e24b8":"D_tree_clf = DecisionTreeClassifier()\ncross_val_score(D_tree_clf, X_train, y_train, cv = 3, scoring = 'accuracy')\n","318cd615":"knn_clf = KNeighborsClassifier()\ncross_val_score(sgd_clf, X_train, y_train, cv = 3, scoring = 'accuracy')\n","188a1c24":"Ran_forest_clf = RandomForestClassifier()\ncross_val_score(Ran_forest_clf, X_train, y_train, cv = 3, scoring = 'accuracy')\n","e531fefd":"param_grid = [{'kernel' : ['rbf','poly','sigmoid'] , 'C' : [0.1, 1, 5, 10, 15, 20]}]\ngrid_search = GridSearchCV(svc_clf, param_grid, cv = 5)\ngrid_search.fit(X_train, y_train)","1eedb3c7":"grid_search.best_params_","e705adc2":"svc_clf = SVC(kernel = 'rbf', C = 5)\nsvc_clf.fit(X_train,y_train)\ny_pred = cross_val_predict(svc_clf, X_train, y_train, cv=3)\ncm = confusion_matrix(y_train, y_pred)","818f062b":"print(cm)\n","08d564f4":"y_test_predicted = svc_clf.predict(test_df)","e8cf2350":"y_test_predicted[:10]","ed1aa5d8":"# Some correlations between data ","9b8f22ed":"> there is nulls in age and cabin in test data","fb0b6d32":"# Dealing with nulls ","2027418f":"# imports","bddebfd2":"# Dropping useless features","669e6a10":"* the best model is SVC","07608c12":"> there is nulls in age, cabin and embarked in train data","d98fe6e1":"#  final model","387557fd":"# fine tunning the model","acc5d657":"## Data is ready for model","a4197087":"## Some modifications on features ","9e8060d8":"# Data Visualization","58e1029b":"# Getting and describing data"}}