{"cell_type":{"85322d00":"code","d9006517":"code","407479ec":"code","ec1b9d8a":"code","1a495714":"code","dcda27b9":"code","619a7d74":"code","4caf3df7":"code","ae359859":"code","c23d6abc":"code","bec2187f":"code","61a69743":"code","520a3431":"code","f199f01f":"code","d577fb24":"code","8ee23aa8":"code","8979dce3":"code","7bc91d6c":"code","8f058501":"code","f523df58":"code","0c88f076":"code","92bdb820":"code","24113b6c":"code","dee8f0ed":"code","0a39e13c":"code","8b7a703e":"code","54df1652":"code","a63f7c38":"code","f6137e94":"code","98493611":"code","45a3f25a":"code","51ac9b6c":"code","f97bea6e":"code","dfe5de5b":"code","8c7d1f78":"code","4a184939":"code","53b89fd9":"code","8762f2a9":"code","bc10cd4e":"markdown"},"source":{"85322d00":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9006517":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\nDATADIR=\"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\"\nCAT=['WithMask',\"WithoutMask\"]","407479ec":"import matplotlib.pyplot as plt","ec1b9d8a":"for cat in CAT:\n    path=os.path.join(DATADIR,cat)\n    for img in os.listdir(path):\n        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_UNCHANGED)\n        plt.imshow(img_array)\n        plt.show()\n        break","1a495714":"IMG_Size=224\nnew_array=cv2.resize(img_array,(IMG_Size,IMG_Size))\nplt.imshow(new_array)\nplt.show()","dcda27b9":"training_data=[]\ndef create_training_data(dire):\n    training_data=[]\n    for cat in CAT:\n        lb=CAT.index(cat)\n        path=os.path.join(dire,cat)\n        for img in os.listdir(path):\n            img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_UNCHANGED)\n            new_array=cv2.resize(img_array,(IMG_Size,IMG_Size))\n            training_data.append([new_array,lb])","619a7d74":"d='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train'\ncreate_training_data(d)","4caf3df7":"training_data[0]","ae359859":"X=[]\nY=[]\nfor features,lab in training_data:\n    X.append(features)\n    Y.append(lab)","c23d6abc":"import keras","bec2187f":"input_shape_densenet = (224, 224, 3)\npretrained_model = keras.applications.MobileNetV2(input_shape=input_shape_densenet, include_top=False)\npretrained_model.trainable = False","61a69743":"model = keras.models.Sequential([\n    pretrained_model,\n    keras.layers.Flatten(),\n    keras.layers.Dense(1, activation='sigmoid')\n])","520a3431":"model.summary()","f199f01f":"X=np.array(X).reshape(-1,IMG_Size,IMG_Size,3)","d577fb24":"Y=np.array(Y)","8ee23aa8":"X.shape","8979dce3":"Y.shape","7bc91d6c":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y)","8f058501":"model.compile('adam','binary_crossentropy',metrics=['accuracy'])\nhistory=model.fit(X_train,Y_train,epochs=15,batch_size=32)","f523df58":"history","0c88f076":"ypr=model.predict(X_test)","92bdb820":"from sklearn.metrics import f1_score","24113b6c":"ypr=pd.DataFrame(ypr)","dee8f0ed":"ypr=round(ypr)","0a39e13c":"f1_score(ypr,Y_test)","8b7a703e":"from sklearn.metrics import confusion_matrix","54df1652":"confusion_matrix(ypr,Y_test)","a63f7c38":"dire='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test'\ntesting_data=[]\ndef create_test_data(dire):\n    for cat in CAT:\n        lb=CAT.index(cat)\n        path=os.path.join(dire,cat)\n        for img in os.listdir(path):\n            img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_UNCHANGED)\n            new_array=cv2.resize(img_array,(IMG_Size,IMG_Size))\n            testing_data.append([new_array,lb])","f6137e94":"create_test_data(dire)","98493611":"testing_data","45a3f25a":"XT=[]\nYT=[]\nfor features,lab in testing_data:\n    XT.append(features)\n    YT.append(lab)","51ac9b6c":"XT=np.array(XT).reshape(-1,IMG_Size,IMG_Size,3)\nYT=np.array(YT)","f97bea6e":"ypre=model.predict(XT)","dfe5de5b":"ypre=pd.DataFrame(ypre)","8c7d1f78":"ypre=round(ypre)","4a184939":"confusion_matrix(YT,ypre)","53b89fd9":"model.save('my_model')","8762f2a9":"model.save(\"facemask_model.h5\")","bc10cd4e":"0 : mask\n1 : without mask"}}