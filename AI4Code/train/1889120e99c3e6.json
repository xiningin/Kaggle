{"cell_type":{"05ab4a0f":"code","9d6f2a3a":"code","0dd3cb87":"code","b6b091f0":"code","6e07155b":"code","a2bd4ce8":"code","c482e470":"code","a036b588":"code","23c45182":"code","068f17d7":"code","cabdb030":"code","53dcc1a9":"code","5edaee7f":"markdown","fc257914":"markdown","fb04d0da":"markdown","3572dd1a":"markdown","15617b25":"markdown"},"source":{"05ab4a0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#Package to make graphs\nimport matplotlib.pyplot as plt\n\n#Packages to Analyze Data\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9d6f2a3a":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","0dd3cb87":"train_data.head()","b6b091f0":"train_data.describe()","6e07155b":"#Age is missing some data so  we have to replace the missing data with a replacement \n#value which would be in most cases mean\n\n#in order to look at the data graphically \ntrain_data.hist(bins=40, figsize=[10,8])","a2bd4ce8":"#Finding the mean of the Age Feature\nmean_value = train_data['Age'].mean()\n#Replacing missing values with the mean value of the ages\ntrain_data['Age'].fillna(value=mean_value, inplace=True)\n\n#Replacing NaN's in the test data\ntest_data['Age'].fillna(value=mean_value, inplace=True)","c482e470":"#Making the training and test data\ncols = ['Pclass', 'Age', 'SibSp', 'Parch']\nX = pd.get_dummies(train_data[cols])\ny = train_data['Survived']\n\n#Retrieving test set and train set\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n#Now i wanna look through all of the models to see which one scores the highest","a036b588":"#LinearRegression Model\nlr = LinearRegression()\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_test)\n#Showing how similar each \nprint(lr.score(X_test, y_test))\n#Getting the mean\nlr_score = cross_val_score(lr, X, y, cv=5)\nprint('LinearRegression mean score:' + str(np.mean(lr_score)))","23c45182":"#SGDClassifier Model\nsg = SGDClassifier()\nsg.fit(X_train, y_train)\nsg_pred = sg.predict(X_test)\n#Showing how similar each \nprint(sg.score(X_test, y_test))\n#Getting the mean\nsg_score = cross_val_score(sg, X, y, cv=5)\nprint('SGDClassifier mean score:' + str(np.mean(sg_score)))","068f17d7":"kn = KNeighborsClassifier()\nkn.fit(X_train, y_train)\nkn_pred = kn.predict(X_test)\n\nprint(kn.score(X_test, y_test))\n#Getting the mean\nkn_score = cross_val_score(kn, X, y, cv=5)\nprint('KNeighborsClassifier mean score:' + str(np.mean(kn_score)))","cabdb030":"dt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ndt_pred = dt.predict(X_test)\n\nprint(dt.score(X_test, y_test))\n\n#Getting the mean\ndt_score = cross_val_score(dt, X, y, cv=5)\nprint('DecisionTreeClassifier mean score:' + str(np.mean(dt_score)))","53dcc1a9":"X_test = pd.get_dummies(test_data[cols])\n\npreds = kn.predict(X_test)\n\nout = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': preds})\nout.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","5edaee7f":"3. Building Models from the  data","fc257914":"1. Reading Data from CSV","fb04d0da":"5. Produce outputs","3572dd1a":"4. Evaluate Model","15617b25":"2. Exploratory Data Analysis"}}