{"cell_type":{"fbcc459b":"code","7d9b2922":"code","753d94a6":"code","dd9fed0c":"code","59ef3568":"code","c755bb76":"code","f02259ea":"code","45e5d98a":"code","bc98ae7c":"code","36082a0f":"code","9a35d216":"code","129549dd":"code","2a0b9756":"code","2e2e63ea":"code","b72291e7":"code","6a8acb40":"markdown","6a1cce77":"markdown","d689ddb9":"markdown","88409307":"markdown","7faf172d":"markdown","db0d4a51":"markdown","9a30a9bf":"markdown","91771c49":"markdown","c7359382":"markdown","aeec5e28":"markdown"},"source":{"fbcc459b":"import numpy as np\nimport pandas as pd","7d9b2922":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf","753d94a6":"df.describe()","dd9fed0c":"df.info()","59ef3568":"import seaborn as sns\n\nsns.countplot(x=\"Class\", data=df)","c755bb76":"df[\"Class\"].value_counts()","f02259ea":"df[\"Class\"].mean()","45e5d98a":"data = df.drop(\"Time\", axis=1)\nX = data.drop(\"Class\", axis=1)\nY = data[\"Class\"]\nX","bc98ae7c":"Y","36082a0f":"from sklearn.model_selection import train_test_split\nX_tr, X_test, y_tr, y_test = train_test_split(X, Y, test_size=0.2, random_state=23785, stratify=Y)\nX_tr.shape, X_test.shape","9a35d216":"from sklearn.dummy import DummyClassifier\n\ndummy_clf = DummyClassifier()\ndummy_clf.fit(X_tr, y_tr)\ndummy_clf.score(X_test, y_test)","129549dd":"from sklearn.metrics import accuracy_score, recall_score, precision_score, roc_auc_score\nfrom cuml.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom cuml.ensemble import RandomForestClassifier\nfrom cuml.neighbors import KNeighborsClassifier\n\nmodels = []\nmodels.append(SVC())\n# models.append(DecisionTreeClassifier())\nmodels.append(RandomForestClassifier())\nmodels.append(KNeighborsClassifier())\nmodels.append(CatBoostClassifier(verbose=False))\n\nfor model in models:\n    model.fit(X_tr.astype(np.float32), y_tr.astype(np.float32))\n    print(type(model).__name__)\n    print(f\"Accuracy: {accuracy_score(y_test.astype(np.float32), model.predict(X_test.astype(np.float32)))}\")\n    print(f\"Recall: {recall_score(y_test.astype(np.float32), model.predict(X_test.astype(np.float32)))}\")\n    print(f\"Precision: {precision_score(y_test.astype(np.float32), model.predict(X_test.astype(np.float32)))}\")\n    print(f\"ROC-AUC: {roc_auc_score(y_test.astype(np.float32), model.predict(X_test.astype(np.float32)))}\")\n    print()","2a0b9756":"# from sklearn.metrics import confusion_matrix\n\n# svc_param = SVC(C=1e9, gamma=1e-7)\n# svc_param.fit(X_tr.values.astype(np.float32), y_tr.values.astype(np.float32))\n# confusion_matrix(y_test, svc_param.predict(X_test.values.astype(np.float32)))","2e2e63ea":"from cuml import LogisticRegression\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_precision_recall_curve\n\nlr = LogisticRegression()\nlr.fit(X_tr.astype(np.float32), y_tr.astype(np.float32))\nplot_precision_recall_curve(lr, X_test.astype(np.float32), y_test)","b72291e7":"from sklearn.metrics import plot_roc_curve\n\nplot_roc_curve(lr, X_test.astype(np.float32), y_test )","6a8acb40":"## Comment:\nThe dataset is highly imbalance. Most classifier will have ~99% accuracy score. We should use other metrics like ROC-AUC","6a1cce77":"Split the raw data into train and test datasets","d689ddb9":"\nIn this lab exercise, you will train several models and evaluate how effectively they predict instances of fraud using data based on [this dataset from Kaggle](https:\/\/www.kaggle.com\/dalpozz\/creditcardfraud).\n\u00a0\nEach row in `fraud_data.csv` corresponds to a credit card transaction. Features include confidential variables `V1` through `V28` as well as `Amount` which is the amount of the transaction.\u00a0\n\u00a0\nThe target is stored in the `class` column, where a value of 1 corresponds to an instance of fraud and 0 corresponds to an instance of not fraud. \n\nNOTE: you are not required to carry out data preprocessing step to enhance the prediction performance","88409307":"### Question 4\n\nUsing the SVC classifier with parameters `{'C': 1e9, 'gamma': 1e-07}`, what is the confusion matrix when using a threshold of -220 on the decision function. Use X_test and y_test.\n\n*This function should return a confusion matrix, a 2x2 numpy array with 4 integers.*\n\n\n# Note: it runs very long","7faf172d":"### Question 2\n\nUsing `X_train`, `X_test`, `y_train`, and `y_test` (as defined above), train a dummy classifier that classifies everything as the majority class of the training data. What is the accuracy of this classifier? What is the recall?\n\n*This function should a return a tuple with two floats, i.e. `(accuracy score, recall score)`.*","db0d4a51":"### Question 3\n\nUsing X_train, X_test, y_train, y_test (as defined above), train a SVC, Decision Tree, k-NN classifiers using the default parameters. What is the accuracy, recall, and precision of this classifier?\n\n*This function should a return a tuple with three floats, i.e. `(accuracy score, recall score, precision score)`.*","9a30a9bf":"### Question 1\nImport the data from `fraud_data.csv` from your local G-Drive. What percentage of the observations in the dataset are instances of fraud?\n\n*This function should return a float between 0 and 1.* ","91771c49":"### Question 5\n\nTrain a logisitic regression classifier with default parameters using X_train and y_train.\n\nFor the logisitic regression classifier, create a precision recall curve and a roc curve using y_test and the probability estimates for X_test (probability it is fraud).\n\nLooking at the precision recall curve, what is the recall when the precision is `0.75`?\n\nLooking at the roc curve, what is the true positive rate when the false positive rate is `0.16`?\n\n*This function should return a tuple with two floats, i.e. `(recall, true positive rate)`.*","c7359382":"### Question 6\n\nDo these 5 tasks above with `titanic` data.","aeec5e28":"## Comments:\nI use [cuML](https:\/\/docs.rapids.ai\/api\/cuml\/stable\/api.html) to speed up the training. The dataset is big, so sklearn cannot train it fast. \n\nGPU must be enabled, and cuML does not have DecisionTree"}}