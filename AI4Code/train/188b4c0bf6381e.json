{"cell_type":{"f869bf95":"code","537f968c":"code","c5896a95":"code","3b0c5989":"code","88eb6a51":"code","7f2a041a":"code","2312768c":"code","42f1c4d6":"code","fde019cd":"code","faa448d1":"code","4645688a":"code","8c45a55f":"markdown","3cb6225b":"markdown","26b87a31":"markdown","200a41f9":"markdown","f7621a55":"markdown","1c686bc0":"markdown","e6ea513d":"markdown","8068e483":"markdown","fe1f15b1":"markdown","4dc7b449":"markdown"},"source":{"f869bf95":"%matplotlib inline\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","537f968c":"mnist = fetch_openml('mnist_784')","c5896a95":"mnist.data[:5]","3b0c5989":"mnist.target[:5]","88eb6a51":"plt.figure(figsize=(20,5))\nfor index, (image,label) in enumerate(zip(mnist.data[:6], mnist.target[:6])):\n    plt.subplot(1, 6, index+1)\n    plt.imshow(np.reshape(image, (28,28)), cmap=\"gray\")\n    plt.title(\"Actual No.%s\" % label)","7f2a041a":"X_train, X_test, y_train, y_test = train_test_split(mnist.data, mnist.target, test_size=0.2) ","2312768c":"mdl = LogisticRegression(solver=\"lbfgs\",max_iter=126)\nmdl.fit(X_train,y_train)\nprediction = mdl.predict(X_test)\nscore = mdl.score(X_test, y_test) \nprint(score)","42f1c4d6":"print(\"Accurcay is :\",round(score,2)*100,\"%\")","fde019cd":"index = 3\nplt.imshow(np.reshape(X_test[index],(28,28)), cmap = \"gray\")\nprint(\"prediction: \" + mdl.predict([X_test[index]])[0])","faa448d1":"cm = metrics.confusion_matrix(y_test,prediction)\ncm","4645688a":"plt.figure(figsize=(8,8))\nplt.imshow(cm, cmap=\"Set2\")\n\nplt.xticks(np.arange(10))\nplt.yticks(np.arange(10))\n\nplt.xlabel(\"Predicted Data\")\nplt.ylabel(\"Actual Data\")\nplt.colorbar()\n\nplt.title(\"Confusion Matrix of Mnist Data\")\n\nwidth, height = cm.shape\nfor x in range(width):\n    for y in range(height):\n        plt.annotate(str(cm[x][y]), xy=(y,x), horizontalalignment='center',verticalalignment='center')","8c45a55f":"# Handwritten Digits Recognition with Python (Scikit-Learn)","3cb6225b":"## Dataset from openml","26b87a31":"The **MNIST** database is a set of 70000 samples of handwritten digits where each sample consists of a grayscale image of size 28\u00d728. There are a total of 70,000 samples. Dataset is available on many online platform or we can use dataset directly from openml from **sklearn.datasets** library.","200a41f9":"## Importing Library","f7621a55":"Recognizing handwritten text is a problem that can be traced back to the first automatic machines that needed to recognize individual characters in handwritten documents. Classifying handwritten text or numbers is important for many real-world scenarios. The applications of handwritten digit recognition includes in postal mail sorting, bank check processing, form data entry, etc.","1c686bc0":"## Plotting actual label using matplotlib","e6ea513d":"## Splitting data into train and test measuring prediction score","8068e483":"## Confusion matrix value and visualization","fe1f15b1":"<b>Dataset link ----- <a href='https:\/\/www.openml.org\/d\/554'>Click Here<\/a> <\/b>\n                 ","4dc7b449":"In this notebook, we'll recognizing the handwritten digits (0 to 9) using the famous digits data set from Scikit-Learn, using a classifier called Logistic Regression."}}