{"cell_type":{"d9650eae":"code","9c002901":"code","3439fc54":"code","b4cef5a3":"code","94ea4580":"code","f9a09848":"code","5f1de220":"code","660ac9b9":"code","93f03f6e":"code","5446bc13":"code","24d09f63":"code","e217ec93":"code","686a20c2":"code","dce3c9ff":"code","830c1a7e":"code","89fa3051":"code","8a96edfd":"code","44b872f2":"code","149f60f6":"code","b8c28723":"code","4432fef9":"code","a6904e85":"code","82f26cf3":"code","20a4cfb3":"code","0a7d075f":"code","83ea1b89":"markdown","50219fb6":"markdown","72bc50e3":"markdown","743be104":"markdown","3bc30ad0":"markdown","137f5f38":"markdown","b2e2d9ef":"markdown","d7813616":"markdown","1591be52":"markdown","3d9cfb1c":"markdown","151080b6":"markdown","59ac672c":"markdown","f9ef71a6":"markdown","1dac86b0":"markdown","4b740e47":"markdown","4b3df7b1":"markdown","12f2a99c":"markdown","a13c6db7":"markdown","752e4fbd":"markdown","4734cfb9":"markdown","63b9b547":"markdown","a9ccd4b2":"markdown","ad450051":"markdown","58987862":"markdown","a8d7ae9f":"markdown","ab53d308":"markdown","5503faad":"markdown","8c53453b":"markdown","214a3381":"markdown","c905befc":"markdown","8f780ed4":"markdown","2dca911b":"markdown","0c265191":"markdown","5a9dffae":"markdown","e854e9f1":"markdown","3d2abe5c":"markdown","5e7f2794":"markdown","6b5d4121":"markdown","2742dd6d":"markdown","1effbfe0":"markdown","18de5c04":"markdown","9aed82ea":"markdown","f4662cc2":"markdown","62483b1e":"markdown","cc9c2efb":"markdown","d81dbe63":"markdown","3a3646b5":"markdown","891e52af":"markdown","ee1a293f":"markdown","095ac77b":"markdown","19dea8d4":"markdown","09beb118":"markdown","749a3ad4":"markdown","6cf571b8":"markdown","2ec352a9":"markdown","137747c4":"markdown","9504e8c1":"markdown","d7fbe9da":"markdown","b6838bd9":"markdown","191e6304":"markdown","82495d3b":"markdown","3fa9c627":"markdown","6c1bd4be":"markdown","6111ac00":"markdown","54b67690":"markdown","0453851e":"markdown","31e47182":"markdown"},"source":{"d9650eae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","9c002901":"# importing raw data\ndata = pd.read_csv('..\/input\/examplarydataset2\/example2.csv')           \ndata = data.drop(columns=['time','Unnamed: 0','Unnamed: 4'], axis=1)    \nprint(data)                                                             ","3439fc54":"# extract columns\ns = data['speed'] \/ 3.6                              # speed in m\/s\ndis_cum = data['distance']                           # cumulative distance in m\nacc = data['forward_acceleration']                   # acceleration in m\/s\u00b2\ntime = ((np.arange(0,len(acc),1)) \/ 10) \/ 60         # time array in s (10 Hz)\n\n# plot cumulative distance vs time\nplt.plot(time, dis_cum) \nplt.title('Cumulative Distance')\nplt.xlabel('Time [min]') \nplt.ylabel('Cumulative Distance [m]') \nplt.show()\n\n# plot speed vs time\nplt.plot(time, s) # plotting velocity\nplt.title('Speed') # assigning title\nplt.xlabel('Time [min]') # assigning x-label\nplt.ylabel('Speed [m\/s]') # assigning y-label\nplt.show()\n\n# plot acceleration vs time\nplt.plot(time, acc) # plotting acceleration\nplt.title('Acceleration') # assigning title\nplt.xlabel('Time [min]') # assigning x-label\nplt.ylabel('Acceleration [m\/s\u00b2]') # assigning y-label\nplt.show()","b4cef5a3":"# setting constants\nKT = 1.29 \nk = 0.0037\ng = 9.81\nRun_eff = 3.6","94ea4580":"# calculating ES and EM\nES = acc * 9.81**-1 + ((k * s **2) \/ g) \nEM = ((acc**2 * 9.81**-2)+1)**0.5 ","f9a09848":"Pmet_r = (155.4*ES**5 - 30.4 * ES**4 - 43.3*ES**3 + 46.3*ES**2 + 19.5*ES + Run_eff) * EM * KT * s # calculating metabolic power running","5f1de220":"# calculating transition speed\nV_trans = -107.05 * ES ** 5 + 113.13 * ES ** 4 - 1.13 * ES ** 3 - 15.84 * ES ** 2 - 1.70 * ES + 2.27 \nprint('Transition speed for the data points is: ') # printing output to the screen\nprint(V_trans[47030:47035])","660ac9b9":"logic_Vtrans1 = V_trans > s      # returns True if measured speed is above V_Trans\nlogic_Vtrans2 = V_trans <= s     # returns True if measured speed is below V_Trans\n\n# printing output\ndf_trans = pd.DataFrame({'Transition speed': V_trans, 'Measured speed': s, 'Energy cost of running': logic_Vtrans1})\nprint(df_trans[47030:47035])","93f03f6e":"fig= plt.figure(figsize=(10,10))                          # building fixed graph size\nplt.subplot(2,1,1)                                        # building first subplot\nplt.title('Using Energy Cost Running')                    # setting title 1st graph\nplt.xlabel('Time [min]')                                  # setting x-axis label 1st graph\nplt.ylabel('Metabolic Power [W\/Kg]')                      # setting y-axis label 1st graph\nplt.plot(time, Pmet_r)                                    # plotting metabolic power running\nPmet = Pmet_r * logic_Vtrans2                             # removing wrongly calculated\nplt.subplot(2,1,2)                                        # building second subplot\nplt.title('After eliminating wrongly calculated')         # setting title 2nd graph\nplt.xlabel('Time [min]')                                  # setting x-axis label 2nd graph\nplt.ylabel('Metabolic Power [W\/Kg]')                      # setting y-axis label 2nd graph\nplt.plot(time, Pmet)                                      # plotting metabolic power with removed wrongly calculated\n","5446bc13":"# importing coefficients into dataframe\ndict_ECw = {'ES':[0.4, 0.3, 0.2, 0.1, 0.0,-0.1, -0.2,-0.3],\n            'a':[94.62, 44.95, 3.80, 0.68, 1.25, 0.69, 0.03, 0.28],\n            'b':[-213.94, -122.88, -14.91, -4.17, -6.57, -3.21, -0.15, -1.66],\n            'c':[184.43, 126.94, 22.94, 10.17, 13.14, 5.94, 0.98, 3.81],\n            'd':[-68.49, -57.46, -14.53, -10.31, -11.15, -5.07, -2.25, -3.96],\n            'e':[25.04, 21.39, 11.24, 8.66, 5.35, 2.79, 3.14, 4.01]}","24d09f63":"# splitting dataframe\ndf_ECw = pd.DataFrame(dict_ECw, columns = ['ES', 'a', 'b','c','d','e'])\nECw_list = ['ES', 'a', 'b', 'c', 'd', 'e']\nECw_ = {}\nfor count in ECw_list:\n    ECw_[count] = np.array(df_ECw[str(count)])\n\nECw_0 = np.array([0.5])\nECw_0 = np.append(ECw_0, ECw_['ES'])\nECw_['ES'] = np.append(ECw_['ES'], -0.4)\n\nECw_list1 = ['a', 'b', 'c', 'd', 'e']\ngut = {}\n\n# finding coefficients for lower energy cost of walking\nx = np.floor(ES * 10) \/ 10 \nindices_la = np.zeros(len(ES))\nindices_lb = np.zeros(len(ES))\nindices_lc = np.zeros(len(ES))\nindices_ld = np.zeros(len(ES))\nindices_le = np.zeros(len(ES))\nlaufvar = 0\nfor es in dict_ECw['ES']:\n    a = (x == es) * dict_ECw['a'][laufvar]\n    b = (x == es) * dict_ECw['b'][laufvar]\n    c = (x == es) * dict_ECw['c'][laufvar]\n    d = (x == es) * dict_ECw['d'][laufvar]\n    e = (x == es) * dict_ECw['e'][laufvar]\n\n\n    indices_la += a\n    indices_lb += b\n    indices_lc += c\n    indices_ld += d\n    indices_le += e\n    laufvar += 1\n\n# inserting coefficients into polynomial for lower energy cost of walking\nLECw = indices_la * s**4 + indices_lb * s**3 + indices_lc * s**2 + indices_ld * s + indices_le\n\ndp = 50000 # choosing datapoint for output, may be manipulated in range 0 - 50000\n\n# printing output to the screen\nprint('The given ES is: ' + str(ES[dp]))\nprint('a = ' + str(indices_la[dp]), 'b = ' + str(indices_lb[dp]), 'c = ' + str(indices_lc[dp]), 'd = ' + str(indices_ld[dp]), 'e = ' + str(indices_le[dp]))\nprint('Lower Energy Cost of walking is ' + str(np.round(LECw[dp],2)) + ' J\/kg*m')","e217ec93":"# finding coefficients for upper energy cost of walking\nES1 = x + 0.1 \nindices_ua = np.zeros(len(ES))\nindices_ub = np.zeros(len(ES))\nindices_uc = np.zeros(len(ES))\nindices_ud = np.zeros(len(ES))\nindices_ue = np.zeros(len(ES))\n\nlaufvar = 0\nfor es in dict_ECw['ES']:\n    a = (ES1 == es) * dict_ECw['a'][laufvar]\n    b = (ES1 == es) * dict_ECw['b'][laufvar]\n    c = (ES1 == es) * dict_ECw['c'][laufvar]\n    d = (ES1 == es) * dict_ECw['d'][laufvar]\n    e = (ES1 == es) * dict_ECw['e'][laufvar]\n\n    indices_ua += a\n    indices_ub += b\n    indices_uc += c\n    indices_ud += d\n    indices_ue += e\n    laufvar += 1\n    \n# inserting coefficients into polynomial for lower energy cost of walking\nUECw = indices_ua *  s ** 4 + indices_ub * s ** 3 + indices_uc * s ** 2 + indices_ud * s + indices_ue\n\ndp = 50000 # choosing datapoint for output, may be manipulated in range 0 - 50000\n\n# printing output to the screen\nprint('The given ES is: ' + str(ES[dp]))\nprint('a = ' + str(indices_ua[dp]), 'b = ' + str(indices_ub[dp]), 'c = ' + str(indices_uc[dp]), 'd = ' + str(indices_ud[dp]), 'e = ' + str(indices_ue[dp]))\nprint('Lower Energy Cost of walking is ' + str(np.round(UECw[dp],2)) + ' J\/kg*m')","686a20c2":"# linear interpolation\ndelta_u_l = UECw - LECw\nmultipli = (ES - x) * 10 \nECwalking_final = LECw + multipli * delta_u_l \n\n# printing output to the screen\nprint('The energy cost of walking for ES = ' + str(np.round(ES[dp],4)) + ' is: ' + str(np.round(ECwalking_final[dp],2)) + ' J\/kg*m')","dce3c9ff":"# calculating metabolic power of walking\nPmet_w = ECwalking_final * s ","830c1a7e":"# eliminating wrongly calculated datapoints and joining metabolic power for running and walking in one array\nPmet = (Pmet_r * logic_Vtrans2) + (Pmet_w * logic_Vtrans1) \n\n# plotting final metabolic power \nplt.title('Final Metabolic Power') \nplt.xlabel('Time [min]') \nplt.ylabel('Metabolic Power [W\/Kg]')\nplt.plot(time, Pmet) ","89fa3051":"# defining the metabolic power zones\nPmetZ1_log = Pmet < 9.2 \nPmetZ2_log = (Pmet >= 9.2) & (Pmet < 19.1)\nPmetZ3_log = (Pmet >= 19.1) & (Pmet < 27.0)\nPmetZ4_log = (Pmet >= 27.0) & (Pmet < 35.9)\nPmetZ5_log = Pmet >= 35.9\n\n# defining the speed bands, division by 3.6 to convert km\/h to m\/s\nSBZ1_log =  s < (7.1\/3.6) \nSBZ2_log = (s >= (7.1\/3.6)) & (s < (14.3\/3.6))\nSBZ3_log = (s >= (14.3\/3.6)) & (s < (19.7\/3.6))\nSBZ4_log = (s >= (19.7\/3.6)) & (s < (25.2\/3.6))\nSBZ5_log = s >= (25.2\/3.6)\n\n# printing metabolic power values and zone allocation to the screen\ndf_pmet2 = pd.DataFrame({'Metabolic Power':Pmet[1010:1015], 'Metabolic Power Zone 2 Allocation': PmetZ2_log[1010:1015]})\nprint(df_pmet2)","8a96edfd":"# calculating distance spent between each datapoint\ndis = np.array([0])\ndis = np.append(dis, np.diff(dis_cum)) \n\n# plotting distances between data points vs time\nplt.xlabel('Time [min]') \nplt.ylabel('Distance between consecutive Data Points [m]') \nplt.title('Distance between consecutive Data Points')\nplt.plot(time, dis) ","44b872f2":"# calculating distances traveled in metabolic power zones\nPmet_Z1 = np.sum(dis * PmetZ1_log)\nPmet_Z2 = np.sum(dis * PmetZ2_log)\nPmet_Z3 = np.sum(dis * PmetZ3_log)\nPmet_Z4 = np.sum(dis * PmetZ4_log)\nPmet_Z5 = np.sum(dis * PmetZ5_log)\n\n# calculating distances traveled in speed-bands\nSBZ1 = np.sum(dis * SBZ1_log)\nSBZ2 = np.sum(dis * SBZ2_log)\nSBZ3 = np.sum(dis * SBZ3_log)\nSBZ4 = np.sum(dis * SBZ4_log)\nSBZ5 = np.sum(dis * SBZ5_log)\n\n# printing cumulative distance in speed-bands and metabolic power zones to the screen\nprint('Cumulative distance in metabolic power zones: ' + str(np.round(np.sum([Pmet_Z1, Pmet_Z2, Pmet_Z3, Pmet_Z4, Pmet_Z5]),3)))\nprint('Cumulative distance in speed-bands: ' + str(np.round(np.sum([SBZ1, SBZ2, SBZ3, SBZ4, SBZ5]),3)))\n\n# creating bar-graph\nZone_1 = [Pmet_Z1, SBZ1] # bar 1 & 2\nZone_2 = [Pmet_Z2, SBZ2] # bar 3 & 4\nZone_3 = [Pmet_Z3, SBZ3] # bar 5 & 6\nZone_4 = [Pmet_Z4, SBZ4] # bar 7 & 8\nZone_5 = [Pmet_Z5, SBZ5] # bar 9 & 10\nX = ['Zone 1', 'Zone 2', 'Zone 3', 'Zone 4', 'Zone 5'] \nPmet_data = [Pmet_Z1, Pmet_Z2, Pmet_Z3, Pmet_Z4, Pmet_Z5] \nSB_data = [SBZ1, SBZ2, SBZ3, SBZ4, SBZ5] \nX_axis = np.arange(len(X)) \nplt.bar(X_axis - 0.2, Pmet_data, 0.4, label = 'Metabolic Power')\nplt.bar(X_axis + 0.2, SB_data, 0.4, label = 'Speed-Band')\nplt.xticks(X_axis, X) \nplt.ylabel(\"Distance in Zones [m]\")\nplt.title(\"Comparison\") \nplt.legend() \nplt.show() \n\n# printing concrete distances in metabolic power zones and speed-bands to the screen\nprint('_________________________________________________________________________________________')\nprint('Concrete Values for the different Zones: ')\n\nl = 1\nfor n in Pmet_data:\n    print('Metabolic Power Zone ' + str (l) + ': ' + str(np.round(n,2)) + 'm')\n    l = l + 1\nprint('\\n')\n\nl = 1\nfor n in SB_data:\n    print('Speed-Band ' + str (l) + ': ' + str(np.round(n,2)) + 'm')\n    l = l + 1\n","149f60f6":"# converting W\/kg into ml\/(kg*min) and adding basal metabolic rate\nPmet_oxygen = Pmet * 2.87 + 3.5 \n\n# plotting oxygen demand vs time\nTime2 = np.arange(0,len(Pmet_oxygen),1)\/60\/10 \nplt.axhline(60, linestyle = '--', color = 'grey') # adding horizontal line for maximal oxygen uptake\nplt.xlabel('Time [min]') \nplt.ylabel('V\u0307O2-Demand [ml\/(min*kg)]') \nplt.plot(Time2, Pmet_oxygen)","b8c28723":"# implementing equation 16\na = 3.5 \nO2 = np.array([]) \nfor n in range(0, len(Pmet_oxygen)): \n    a = (Pmet_oxygen[n] - a) * (1- (np.exp(-0.1\/20))) + a \n    O2 = np.append(O2, a) \n    \n# plotting uncorrected actual O2-uptake vs time\nplt.axhline(60, linestyle='--', color='grey') \nplt.xlabel('Time [min]') \nplt.ylabel('Uncorrected VO2-Supply [ml\/(min*kg)]') \nplt.plot(Time2, O2) \nplt.show()","4432fef9":"# respecting VO2max\na = 3.5 \nO2_capped = np.array(np.clip(O2,0,60)) \n\n# plotting corrected actual O2-uptake\nplt.axhline(60, linestyle='--', color='grey') \nplt.xlabel('Time [min]') \nplt.ylabel('Corrected VO2-Supply [ml\/(min*kg)]')\nplt.plot(Time2, O2_capped)","a6904e85":"# calculating time above 90% of the maximal oxygen uptake\nVO2max_90pc_time = (np.sum(O2_capped >= (60 * 0.9))) \/ 10 \n\n# printing output to the screen\nprint('Time spent above 90% of VO2max is ' + str(VO2max_90pc_time) + ' seconds!') ","82f26cf3":"# calculating O2-Deficit\nO2_Deficit = Pmet_oxygen - O2 \n\n# plotting O2-Defict vs time\nplt.xlabel('Time [min]') \nplt.ylabel('O2-Deficit [ml\/(min*kg)]') \nplt.plot(Time2, O2_Deficit) \n","20a4cfb3":"# calculating relative lactate distribution space\nLa_distribution_space = (((35 \/ 70) * 0.75) + 5 \/ 70) \n\n# adding array for moving average corrected for resting lactate values and respecting PCr and ATP stores\nLactate = np.array(np.zeros(1000)+1.2)\nLactate = np.append(Lactate,((np.cumsum(O2_Deficit \/ 600 * 70)) * 0.01576 \/ La_distribution_space) + 1.5) \/ 3 \ndf_mov_av = pd.DataFrame({'Lactate':Lactate}) \ndf_mov_av['Lactate'] = df_mov_av['Lactate'].rolling(window=1000).mean() \n\n# plotting La-concentration vs time and printing relative lactate distribution space\nTime3 = np.arange(0,len(df_mov_av['Lactate']),1) \/10 \/ 60\nplt.xlabel('Time [min]') \nplt.ylabel('Lactate [mmol\/l]') \nplt.plot(Time3, df_mov_av['Lactate']) \nVolRel = np.round(La_distribution_space, 2) \nprint('Lactate distribution space is: ' + str(VolRel*100) + '%') ","0a7d075f":"## this function takes two positional arguments: speed and equivalent slope. It returns the energy cost of walking for this particular datapoint ##\ndef ECw(v, ES): \n    dict_ECw = {'ES':[0.4, 0.3, 0.2, 0.1, 0.0, -0.1, -0.2, -0.3], \n            'a':[94.62, 44.95, 3.80, 0.68, 1.25, 0.69, 0.03, 0.28],\n            'b':[-213.94, -122.88, -14.91, -4.17, -6.57, -3.21, -0.15, -1.66],\n            'c':[184.43, 126.94, 22.94, 10.17, 13.14, 5.94, 0.98, 3.81],\n            'd':[-68.49, -57.46, -14.53, -10.31, -11.15, -5.07, -2.25, -3.96],\n            'e':[25.04, 21.39, 11.24, 8.66, 5.35, 2.79, 3.14, 4.01]}\n    df_ECw = pd.DataFrame(dict_ECw, columns = ['ES', 'a', 'b','c','d','e'])\n    ECw_list = ['ES', 'a', 'b', 'c', 'd', 'e']\n    ECw_ = {}\n    for count in ECw_list:\n        ECw_[count] = np.array(df_ECw[str(count)])\n\n    ECw_0 = np.array([0.5])\n    ECw_0 = np.append(ECw_0, ECw_['ES'])\n    ECw_['ES'] = np.append(ECw_['ES'], -0.4)\n\n    ECw_list1 = ['a', 'b', 'c', 'd', 'e']\n    gut = {}\n\n    x = np.floor(ES * 10) \/ 10  \n    \n    indices_la = np.zeros(1)\n    indices_lb = np.zeros(1)\n    indices_lc = np.zeros(1)\n    indices_ld = np.zeros(1)\n    indices_le = np.zeros(1)\n    \n    \n    laufvar = 0\n    for es in dict_ECw['ES']: \n        a = (x == es) * dict_ECw['a'][laufvar]\n        b = (x == es) * dict_ECw['b'][laufvar]\n        c = (x == es) * dict_ECw['c'][laufvar]\n        d = (x == es) * dict_ECw['d'][laufvar]\n        e = (x == es) * dict_ECw['e'][laufvar]\n\n        indices_la += a\n        indices_lb += b\n        indices_lc += c\n        indices_ld += d\n        indices_le += e\n        laufvar += 1\n        \n    LECw = indices_la * v**4 + indices_lb * v**3 + indices_lc * v**2 + indices_ld * v + indices_le\n\n    ES1 = x + 0.1 # upper energy cost of walking\n    ES1 = np.round(ES1, 2)\n\n    indices_ua = np.zeros(1)\n    indices_ub = np.zeros(1)\n    indices_uc = np.zeros(1)\n    indices_ud = np.zeros(1)\n    indices_ue = np.zeros(1)\n\n    laufvar = 0\n    for es in dict_ECw['ES']:\n        a = (es == ES1) * dict_ECw['a'][laufvar]\n        b = (es == ES1) * dict_ECw['b'][laufvar]\n        c = (es == ES1) * dict_ECw['c'][laufvar]\n        d = (es == ES1) * dict_ECw['d'][laufvar]\n        e = (es == ES1) * dict_ECw['e'][laufvar]\n\n        indices_ua += a\n        indices_ub += b\n        indices_uc += c\n        indices_ud += d\n        indices_ue += e\n        laufvar += 1\n        \n    UECw = indices_ua * v ** 4 + indices_ub * v ** 3 + indices_uc * v ** 2 + indices_ud * v + indices_ue\n    \n    delta_u_l = UECw - LECw\n    multipli = (ES - x) * 10\n    ECwalking_final = LECw + multipli * delta_u_l\n    return(ECwalking_final) # outputting final energy cost of walking\n\n## this function takes five positional arguments: Running efficiency, speed, acceleration, wind density and correction term for surface differences. The function does not\n## return anything. The calculates metabolic power and allocates a datapoint into metabolic power zone and speed-band.\ndef Metabolic_Power(Run_eff, v, acc, k, KT):\n    ES = acc * 9.81**-1 + ((k * v **2) \/ g)\n    EM = ((acc**2 * 9.81**-2)+1)**0.5 \n    Vtrans = -107.05 * ES ** 5 + 113.13 * ES ** 4 - 1.13 * ES ** 3 - 15.84 * ES ** 2 - 1.70 * ES + 2.27 \n    logic_Vtrans1 = Vtrans > v  \n    logic_Vtrans2 = Vtrans <= v  \n    \n    ECr = (155.4*ES**5 - 30.4 * ES**4 - 43.3*ES**3 + 46.3*ES**2 + 19.5*ES + Run_eff) * EM * KT * logic_Vtrans2 # calculating energy cost of running\n    ECwalking = np.array([])\n    ECw_walking = ECw(v, ES) * KT \n\n    ECw_walking = ECw_walking * logic_Vtrans1 * v \n    MPtemp = ECr * v \n    MP = MPtemp + ECw_walking \n   \n    #printing metabolic power output to the screen\n    print('Metabolic is ' + str(np.round(MP,2)) + ' W\/Kg and ' + str(np.round(MP*2.87,2)) + ' ml\/(min*kg) \\n')\n    \n    # allocation into metabolic power zones\n    if MP < 9.2:\n        zone_allo = 'Metabolic Power Zone 1'\n    elif MP < 19.1:\n        zone_allo = 'Metabolic Power Zone 2'\n    elif MP < 27.0:\n        zone_allo = 'Metabolic Power Zone 3'\n    elif MP < 35.9:\n        zone_allo = 'Metabolic Power Zone 4'\n    else: \n        zone_allo = 'Metabolic Power Zone 5'\n    \n    # allocation into speed-bands\n    if v < 7.1\/3.6:\n        zone_allo = zone_allo + ' \/ Speed-Band 1'\n    elif v < 14.3\/3.6:\n        zone_allo = zone_allo + ' \/ Speed-Band 2'\n    elif v < 19.7\/3.6:\n        zone_allo = zone_allo + ' \/ Speed-Band 3'\n    elif v < 25.2\/3.6:\n        zone_allo = zone_allo + ' \/ Speed-Band 4'\n    else:\n        zone_allo = zone_allo + ' \/ Speed-Band 5'\n    \n    # printing zone allocation to the screen\n    print(zone_allo)\n    print('_________________________________________________')    \n\n# creating interactive tool with sliders\nimport ipywidgets as widgets\nwidgets.interact(Metabolic_Power, \n         Run_eff = widgets.FloatSlider(value=3.6, min=3, max=4.2,step=0.1),\n         v = widgets.FloatSlider(value=4.0, min=0.0, max=12.0,step=0.1),\n         acc = widgets.FloatSlider(value=1.0, min=-3.8, max=5.1,step=0.1),\n         k = widgets.FloatSlider(value=0.0037 , min=0.0, max=0.005,step=0.0001),\n         KT = widgets.FloatSlider(value= 1.29 , min=1, max=1.5,step=0.01))","83ea1b89":"<p style=\"text-align: center;\"> $ES = tan$($\u03b1\u2019$) $=$ $tan(90 - arctan $$\\frac{g}{a_f}$) (4)<\/p>","50219fb6":"Using these two parameters metabolic power for each data point using [equation 10](#eq10) and [11](#eq11) can already be calculated. ","72bc50e3":"So far metabolic power has been expressed in $\\frac {W}{kg}$. By multiplication with **2.87**, $\\frac {W}{kg}$ is converted into $\\frac {ml}{kg*min}$ (assuming a **respiratory quotient of 0.96**). The caloric equivalent of 1L oxygen at an respiratory quotient of 0.96 is **20.906**  $kJ$. The following calculations show how the conversion factor of **2.87** from $\\frac {W}{kg}$ to $\\frac {ml}{kg*min}$ is inferred:\n\n \n$20.906$ $kJ$ = $1l_{O_2}\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~ \\text{|}\ufeff~ \\text{:1000; to convert kJ to J and l to ml}$ \n    \n$20.906$ $J$ = $1ml_{O_2} \ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~   \\text{|}\ufeff~\\text{Change J and to Ws as both units are equivalent}$ \n    \n$20.906$ $Ws$ = $1ml_{O_2}   \ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~  \\text{|}\ufeff~\\text{\u00d760;  to convert Ws to Wmin}$ \n    \n$20.906$ $Wmin$ = $60ml_{O_2}  \ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff\ufeff~~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~ \\text{|}\ufeff~\\text{:60;  to bring min to right side of the equation}$ \n    \n$20.906$ $W$ = $60 \\frac{ml_{O_2}}{min} \ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~\ufeff~ \\text{|} \ufeff~\\text{:20.906kg; to receive conversion factor and normalize to bodyweight}$ \n\n$1$ $\\frac {W}{kg}$ = $2.87 \\frac{ml_{O_2}}{min * kg}$ \n    ","743be104":"![Energy_Cost_Walking+Running.png](attachment:e364018b-10df-4b9a-98de-12987e483bb9.png)\n\n<p style=\"text-align: center;\">Figure 2: Energy Cost of Transportation<\/p>\n<a id =eq10> <\/a>\n\n\nBased on equations (8) and (9) the energy cost walking and running for slopes between -0.45 and 0.45 can be calculated. During accelerative running the **ES** depends on the magnitude of the acceleration and can therefore be calculated, if the acceleration is known [(equation 4)](#eq4). The energy cost of uphill running an **ES** must be multiplied by the **EM** [(equation 7)](#eq7). Substituting the equations 4 and 7 into equation 8 supplies the formula to calculate the actual energy cost of accelerative running $C_{ar}$. It must be kept in mind that the investigations by Minetti and colleagues were conducted on a treadmill. The energy cost of transportation on a treadmill is different compared to that on grass, which is a typical surface for team sports. Consequently, equation 8 must be multiplied with a coefficient respecting the terrain (KT, e.g. for grass **KT = 1.29**) to account for this difference (Pinnington & Dawson, 2001).  ","3bc30ad0":"<p style=\"text-align: center;\">g'= $\\sqrt{(a_{f}\u00b2 + g\u00b2)}$    (1)<\/p>","137f5f38":"The allocation of the datapoints into the different metabolic power zones and speed-bands is now **saved in separate arrays**. The following centers around finding the **actual distance spent** in each respective speed-band and metabolic power zone.\n\nTherefore, the distance covered between each datapoint needs to be calculed from the cumulative distance that was saved in the array *dis_cum* in the **beginning of [part 2](#part2)**. The imported library numpy offers a function for this purpose *(np.diff)*. First, a new array $(dis)$ needs to be created in which the distance traveled between each data point is saved. Then the numpy function is used to save the distances between each data point in this array. This new array is visualized in the graphic below.","b2e2d9ef":"<p style=\"text-align: center;\">$C_{ar}=(155.4ES^5-30.4ES^4-43.3ES^3+46.3ES^2+19.5ES+3.6)\u00d7EM\u00d7KT$  (10)<\/p>","d7813616":"The authors state that constant speed running an uphill slope, during which the **angle**  $\u03b1$ between the runner and the terrain is maintained and the runner is in a vertical position (orthogonal to the horizon), is metabolically equivalent to accelerative running on flat terrain (Di Prampero et al., 2005). Figure 1 (A: accelerative flat terrain, B: steady-state uphill) provides a simplified illustration of this approach. Following this rationale the angle of the uphill slope $(\u03b1\u2019)$ can be calculated with the following formula. ","1591be52":"\n## Part 5: Interactive Plot","3d9cfb1c":"![V_thres.png](attachment:329b9022-a808-409c-be1c-146b251520a8.png)\n\n<p style=\"text-align: center;\">Figure 3: Threshold Speed between Walking and Running<\/p>","151080b6":"In summary, according to the presented model the **ES** and **EM** can be calculated once the **forward acceleration** is known. As a final step, the energy cost of uphill running needs to be quantified to calculate metabolic power. \n<a id =eq8> <\/a><a id =eq9> <\/a>\nThe energy cost of walking and running at uphill and downhill slopes was investigated in ten elite endurance mountain racers (Minetti, Moia, Roi, Susta & Ferretti, 2002). Every participant completed three trials on a treadmill with increasing running and walking speeds at different slopes from 0.00 to 0.45 uphill and downhill. During the trials, the participants expired air was collected in a Douglas bag and consequently analyzed for gas composition ($O_{2}$ and $CO_{2}$). The authors report a linear relationship for $V\u0307O_{2}$ with running speed for each slope, respectively. Furthermore, the authors were able to establish a polynomial fit for the energy cost of running ($C_{r}$) and walking ($C_{w}$) as a function of the **terrains slope** (Minetti et al., 2002). The equations are provided in the following with their plotted graphs visualized in figure 2.","59ac672c":"\n<p style=\"text-align: center;\">Table 1: Coefficient $a$ to $e$ of Equation 15 (Di Prampero & Osgnach, 2018) <\/p>\n\n![Coeffiecients.png](attachment:f8a0c6bf-6b0d-4e2b-97ab-edc4852ebc48.png)\n","f9ef71a6":"\n## Part 4: V\u0307O$_2$ and Lactate concentration","1dac86b0":"\n## Part 2: Implementation in a Python Script\n\nFirst a couple of libraries need to be imported into our script. \n**Pandas** to build a dataframe, **numpy** for mathematical operations and lastly **matplotlib** for graphical visualisations. ","4b740e47":"In the following the right value from the table for a given **ES** must be found. In this first part of the code the **lower energy cost of walking** is calculated. Afterwards the **upper energy cost of running** is calculated and lastly **linear interpolation** is performed between both values to calculate the **exact energy cost of walking** for a given ES. The coefficients $a$ to $e$ are displayed below the code for a given **ES** *(may be alternated by changing variable **dp** in code, which must be in range 0 to 50000)*.","4b3df7b1":"So far the focus lay on the implementation of the biomechanical model in python-code without focusing on the use for **practical application**. In practice cut-off values are used to distinguish between multiple zones and the distance traveled in these zones is used as a marker of **external load**. In this part of the Notebook it is shown how these parameters can be calculated.\n\nFirst, the cut-off values for the different zones need to be defined. This demonstration uses the speed-bands based on Ingebrigtsen, Dalen, Hjelde, Drust & Wisl\u00f8ff (2015).\n\n* Zone 1:\t0.0 \u2013 7.1 $\\frac {km}{h}$\n* Zone 2:\t7.1 \u2013 14.3 $\\frac {km}{h}$\n* Zone 3:\t14.3 \u2013 19.7 $\\frac {km}{h}$\n* Zone 4:\t19.7 \u2013 25.2 $\\frac {km}{h}$\n* Zone 5:\t>25.2 $\\frac {km}{h}$\n\nBased on these speed-bands respective metabolic power zones using [equation 10](#eq10), assuming the absence of an acceleration, can be calculated. Thereby the influence of acceleration on zone classification is visualized.\n\n* Zone 1:    0.0 \u2013 9.2 $\\frac {W}{kg}$\n* Zone 2:    9.2 \u2013 19.1 $\\frac {W}{kg}$\n* Zone 3:    19.1 \u2013 27.0 $\\frac {W}{kg}$\n* Zone 4:    27.0 \u2013 35.9 $\\frac {W}{kg}$\n* Zone 5:    >35.9 $\\frac {W}{kg}$\n\nIn the following section of code the speed-bands and metabolic power zones are defined. The code also yields a logical array for each speed-band and metabolic power zone containing a series of **True or False** values, depending on if the respective data point is allocated into the respective zone. \n\nAs an example the code outputs the metabolic power of datapoints 1010 to 1015 and below if they have to be allocated into **metabolic power zone 2**. ","12f2a99c":"\nIn the next step the metabolic power of all datapoints that considered as **walking** need to be calculated. Therefore, the energy cost of walking for all data points is calculated and afterwards the wrongly calculated data points are eliminated using the calculated **transition speed**. \nDue to the dependence of energy cost of walking on speed (unlike running) the implementation of this calculation is not straightfoward. \n\nFirst the coefficients $a$ to $e$ (see [table 1](#table1)) are imported into a pandas dataframe.","a13c6db7":"<p style=\"text-align: center;\">$ES_D$ = $\\frac{(k\u00d7v^2)}{g}$ (12)<\/p>","752e4fbd":"## Literature\n\nAkenhead, R. & Nassis, G. P. (2016). Training Load and Player Monitoring in High-Level Football: Current Practice and Perceptions. International journal of sports physiology and performance, 11 (5), 587-593. doi:10.1123\/ijspp.2015-0331\n\nDi Prampero, P., Fusi, S., Sepulcri, L., Morin, J. B., Belli, A. & Antonutto, G. (2005). Sprint running: a new energetic approach. The Journal of experimental biology, 208 (Pt 14), 2809-2816. doi:10.1242\/jeb.01700\n\nDi Prampero, P. & Osgnach, C. (2018). Metabolic Power in Team Sports - Part 1: An Update. International journal of sports medicine, 39 (8), 581-587. doi:10.1055\/a-0592-7660\n\nGray, A. J., Shorter, K., Cummins, C., Murphy, A. & Waldron, M. (2018). Modelling Movement Energetics Using Global Positioning System Devices in Contact Team Sports: Limitations and Solutions. Sports medicine (Auckland, N.Z.), 48 (6), 1357-1368. doi:10.1007\/s40279-018-0899-z\n\nIngebrigtsen, J., Dalen, T., Hjelde, G. H., Drust, B. & Wisl\u00f8ff, U. (2015). Acceleration and sprint profiles of a professional elite football team in match play. European journal of sport science, 15 (2), 101-110. doi:10.1080\/17461391.2014.933879\n\nMader, A. & Heck, H. (1986). A theory of the metabolic origin of \"anaerobic threshold\". International journal of sports medicine, 7 Suppl 1, 45-65.\n\nMader, A. (2003). Glycolysis and oxidative phosphorylation as a function of cytosolic phosphorylation state and power output of the muscle cell. European journal of applied physiology, 88 (4-5), 317-338. doi:10.1007\/s00421-002-0676-3\n\nMinetti, A. E., Moia, C., Roi, G. S., Susta, D. & Ferretti, G. (2002). Energy cost of walking and running at extreme uphill and downhill slopes. Journal of applied physiology (Bethesda, Md. : 1985), 93 (3), 1039-1046. doi:10.1152\/japplphysiol.01177.2001\n\nMtaweh, H., Tuira, L., Floh, A. A. & Parshuram, C. S. (2018). Indirect Calorimetry: History, Technology, and Application. Frontiers in pediatrics, 6, 257. doi:10.3389\/fped.2018.00257\n\nOsgnach, C. & Di Prampero, P. E. (2018). Metabolic Power in Team Sports - Part 2: Aerobic and Anaerobic Energy Yields. International journal of sports medicine, 39 (8), 588-595. doi:10.1055\/a-0592-7219\n\nPinnington, H. C. & Dawson, B. (2001). The energy cost of running on grass compared to soft dry beach sand. Journal of Science and Medicine in Sport, 4 (4), 416-430. doi:10.1016\/S1440-2440(01)80051-7\n\nPolglaze, T. & Hoppe, M. W. (2019). Metabolic Power: A Step in the Right Direction for Team Sports. International journal of sports physiology and performance, 14 (3), 407-411. doi:10.1123\/ijspp.2018-0661\n","4734cfb9":"In the following the different parameters ($s$ = speed, $dis_{cum}$ = cumulative distance and $acc$ = forward acceleration) are allocated into different arrays. Speed raw data is divided by 3.6 to convert $\\frac{km}{h}$ into $\\frac{m}{s}$.  Speed, cumulative distance and forward acceleration is visualized in separate graphics in the following to get a first overview of the data. ","63b9b547":"<p style=\"text-align: center;\">$EM$ = $\\frac{g'}{g}$ = $\\sqrt{(\\frac{a_f\u00b2}{g\u00b2} + 1)}$ (7)<\/p>","a9ccd4b2":"<p style=\"text-align: center;\">$ \\alpha $ = $arctan \\frac{g}{a_{f}}$ (2)<\/p>","ad450051":"The figure shows the calculated oxygen consumption. As **time above 90% of maximal oxygen uptake** has been suggested as a parameter to quantify metabolic conditioning, this time is calculated in the following. Therefore, datapoints that are above $60 \\frac {ml}{kg*min} * 0.9 = 54 \\frac {ml}{kg*min}$. Afterwards this number is divided by 10 to receive seconds (remember that the sampling frequency is 10 Hz).","58987862":"<a id =table1> <\/a>\n<p style=\"text-align: center;\">$EC_w=a\u00d7s^4+b\u00d7s^3+c\u00d7s^2+d\u00d7s+e$ (15)<\/p>    \n","a8d7ae9f":"As has already been described, the runner tilts forward to maintain equilibrium and thereby prevents falling. The **angle** $\u03b1$ (figure 1A) describes the angle of inclination between the runner and the terrain (T). It can be calculated using [trigonometry][1].\n\n[1]: https:\/\/www.mathsisfun.com\/algebra\/trigonometry.html","ab53d308":"Generally, it should be noted that the **influence of air resistance on overall metabolic power is rather small.** A larger influence is posed by the gait type. The **energy cost of running is substantially larger in comparison to that of walking** [(figure 2)](#fig2). However, the calculation of the metabolic power in walking is rather complicated in comparison to the metabolic power in running. While metabolic power in running is **proportional to the runner\u2019s speed**, this is not the case for walking. Furthermore, if only kinematic data is used, it must be decided on the basis of speed which gait type is chosen. Addressing the latter issue, Di Prampero and Osgnach suggested that for each **ES** a threshold speed exists below which walking is metabolically more efficient compared to running. This threshold speed $(V_{thres})$ is described by the following equation and visualized in figure 3.","5503faad":"The resulting **ES** is the sum of the originally calculated **ES** in [equation 4](#eq4) and the ES for drag ($ES_D$).\n<a id =eq13> <\/a>","8c53453b":"For the calculation of metabolic power **equation 14** can be used to distinguish between running and walking based solely on kinematic data. Equation 14 calculates the threshold speed as a function of a given **ES**. If the speed by the runner exceeds the result of equation 14, the **energy cost of running** must be calculated [(equation 8)](#eq8). On the other hand, if the speed by the runner is below the calculated threshold speed, the **energy cost of walking** must be calculated [(equation 9)](#eq9). \nAs we have described previously, it still must be considered, that unlike in running the **energy cost of walking is not proportional to speed**. Therefore, the energy cost of walking must be calculated as a function of speed and **ES**. Di Prampero and Osgnach found polynomial fits for different **ES** that allow to calculate the energy cost of walking as a function of speed for a given ES (Osgnach & Di Prampero, 2018). The polynomial fits are described by the following equation and table 1. ","214a3381":"<a id =eq7> <\/a>\nDuring accelerative running $F\u2019$ is always larger than $F$ because $g\u2019$ is the vectorial sum of $g$ and $a_{f}$. Consequently, the accelerated running is only metabolically equivalent to uphill running an equivalent slope, if the transported mass of the runner is increased in direct proportion to the ratio of $\\frac {F\u2019} {F}$. The $\\frac {F\u2019} {F}$ ratio was consequently named equivalent \u2018normalized body mass\u2019 **(EM)**. **EM** can be calculated using the following formula (Di Prampero et al., 2005).","c905befc":"Figure 1A shows the initial phase of sprint running. Two different accelerations act upon the runner, who is modelled as a point mass at the center of mass (COM). The earth\u2019s gravitational field acts upon the runner with an acceleration of g = 9.81 $\\frac{m}{s\u00b2}$. Due to the forward tilt the runner would fall if no additional acceleration were acting. As the runner is accelerating forward ($a_{f}$), and thereby producing a horizontal forward acceleration, the runner can maintain equilibrium and prevents falling. Therefore, the overall acting acceleration on the runner\u2019s COM (g\u2019) *\u201cis the vectorial sum of the forward acceleration and the earth\u2019s acceleration of gravity\u201d* (Di Prampero et al., 2005). The calculation of g\u2019 is achieved with formula 1.","8f780ed4":"\n## Part 3: Metabolic Power Zones and Speed-Bands","2dca911b":"Based on the **actual oxygen uptake** (respecting the inertia of the aerobic system) and the **needed oxygen uptake**, the **oxygen deficit** can be calculated, which is the difference between these two. ","0c265191":"<a id =eq11> <\/a>\nEquation 10 can also be used to calculate the energy cost of steady-state running. In this case, the **ES is 0 and EM is 1**, outputting an energy cost of steady state running of **4.64 $\\frac {J}{kg*m}$ (KT = 1.29)**. Lastly, to calculate metabolic power the **energy cost of accelerative or steady-state running is multiplied with speed** $(s)$. \n","5a9dffae":"# **Calculating metabolic power from acceleration and velocity**\nThis Notebook is accompanying a Master Thesis **(Monitoring Volume and Intensity in Soccer: Differences between Metabolic Power Zones and Speed-Bands)** and intended is as a guide to help practitioners understand the **calculation of metabolic power**. The presented code is provided for personal use and adaptations. The calculated metabolic power approach was first suggested in a paper from 2005 and then later updated for team sports in 2018 (Di Prampero, Fusi, Sepulcri, Morin, Belli & Antonutto, 2005; Di Prampero & Osgnach, 2018; Osgnach & Di Prampero, 2018).\n\nIn the [first part](#part1) of the notebook the **theoretical biomechanical background** of calculated metabolic power is described. The [second part](#part2) explains the **implementation** of the model into a python script that automatically calculates metabolic power from kinematic data. Moreover, the [third part](#part3) explains how the data can be used to set different metabolic power zones and speed-bands and calculate the distance traveled in these zones as an important parameter for the **monitoring of training**. [Part 4](#part4) centers around the modelling of **aerobic and anaerobic energy** contributions. [Lastly](#part5), an **interactive tool** is created to understand the influence of the variables in the calculation on the parameter metabolic power and the allocation into the different metabolic power zones and speed-bands. Finally an overview of the cited [literature](#literature) is presented.\n<a id =part1> <\/a>\n___","e854e9f1":"In the last part of this Notebook the entire code is implemented into **one function** and an **interactive tool** is provided. The use of this tool is supposed to help understand the origin of metabolic power calculated from acceleration and speed. Note this tool will only be activated in the **[editor's mode][2]** of this notebook once *run all* is selected (the process may take up to 60 seconds)!\n\n[2]: https:\/\/www.kaggle.com\/rasaff57\/metabolic-power\/edit\n","3d2abe5c":"<p style=\"text-align: center;\">$C_{r} = 155.4x^5-30.4x^4-43.3x^3+46.3x^2+19.5x+3.6$   (8)<\/p>\n\n<p style=\"text-align: center;\">$C_{w} = 280.5x^5-58.1x^4-76.8x^3+51.9x^2+19.6x+2.5$   (9)<\/p>\n<a id =fig2> <\/a>\n","5e7f2794":"The following code converts the metabolic power values from [part 2](#part2) into V\u0307O2 - equivalents. Also 3.5 $\\frac {ml}{kg*min}$ were added to account for the basal metabolic rate. Note that the labels of axis do not allow the writting of formula. Therefore **V\u0307O2** is written as **VO2**.","6b5d4121":"In the next step the **upper energy cost of walking** is calculated.","2742dd6d":"So far the **difference between running and walking** has been neglected. The metabolic power values calculated so far treat each datapoint as *gait type running*. In order to implement the distinction between running and walking the **transition speed** for each data point needs to be calculated by inserting **ES** into [equation 13](#eq13). The **transition speed** for each data point in $\\frac{m}{s}$ is saved in the array $V_{trans}$. The following code calculates the transition speed and also displays the transition speed of the data points 47030 to 47035 in $\\frac{m}{s}$.","1effbfe0":"<p style=\"text-align: center;\">$V_{thres}$ = $-107.05ES^5+113.13ES^4-1.13ES^3-15-84ES^2-1.70ES+2.27$ (14)<\/p>","18de5c04":"\n<p style=\"text-align: center;\">$ES$ =$tan\u2061(90-arctan$\u2061 $\\frac{g}{a_f}$+$\\frac{k\u00d7v^2}{g}$ (13)<\/p>","9aed82ea":"Now it must be kept in mind that the aerobic system is sluggish and cannot provide energy instantaneously. \nThe actual      \n**V\u0307O$_2$** - consumption at a given timepoint **(V\u0307O**$_2T_{n(t)})$  can be calculated using the following formula:\n\n<p style=\"text-align: center;\"> V\u0307O$_2T_{n(t)} = (\u0116_n - $V\u0307$O_2T_{n(0)}) * (1 - e ^ {\\frac{-t}{\\tau}}) + $V\u0307$O_2T_{n(0)}$ (16) <\/p>\n\n**List of variables:**\n\n**V\u0307**$O_2T_{n(0)}$ : actual **V\u0307**$O_2$ demand onset of time interval \n\n$\u0116_n$ :  theoretical **V\u0307**$O_2$ demand onset of time interval\n\n$\\tau$: time constant of the process ($\\tau$\u224820 seconds) (Osgnach & Di Prampero, 2018) \n\n$t$ : time (seconds)\n","f4662cc2":"You can play with sliders thereby manipulate the **Running efficiency** $(Run_{eff}, \\frac {J}{m*kg})$, **speed** $(s, \\frac {m}{s})$, **acceleration** $(a, \\frac {m}{s\u00b2})$, **air density** $(k)$ and factor for **surface differences** $(KT)$. The tool automatically calculates metabolic power (in $\\frac {W}{kg}$ and $\\frac {ml}{min*kg}$) and also allocate the datapoint into the respective metabolic power zone and speed-band.\n<a id =literature> <\/a>\n___","62483b1e":"Based on the **ES** the coefficients of equation 15 can be filled and the energy cost of walking for a given speed calculated. If the **ES** lies in between the reported values of table 1 (e.g. 0.15), the energetic cost of walking for the two closest ES is calculated (e.g. 0.10 and 0.20). Both values may consequently be **linearly interpolated** to calculate the energy cost of walking for **any given ES** between these values. \n<a id =part2> <\/a>\n___\n","cc9c2efb":"The oxygen deficit can be used to model **lactate concentrations**. The oxygen deficit is currently expressed as a *rate of change* in $\\frac {ml}{kg*min}$ . The numpy function *cumsum* calculates the cumulative sum. In order to find the absolute number of lactate, the $O_2$-deficit must be divided by 600 (60 from minutes to seconds and 10 from seconds to our sampling frequency of 10 Hz) and also multiplied by the defined bodyweight (70 kg). Aiming to calculate the concentration of lactate in $\\frac {mmol}{l}$, the $O_2$-deficit must be multiplied with the quotient of the $O_2$ - lactate equivalent and the lactate distribution space. The following formula is used to calculate the lactate distribution space (Mader & Heck, 1986):\n\n<p style=\"text-align: center;\">La_distribution_space = $\\frac {Mass_{muscle}}{Mass_{body}} * 0.75 + \\frac{Volume_{blood}}{Mass_{body}}$ (17)<\/p>\n\nIn order to account for **phosphocreatine and ATP-stores** that meet small amounts of the demands of the $O_2$-deficit and the **diffusion process from the muscle to the blood** a rolling average is applied to smooth the lactate-concentration curve. Also 1.2 $\\frac {mmol}{l}$ are added to account for **the resting lactate concentration**.","d81dbe63":"The calculated metabolic power data considers **air resistance** and **gait type**.\n<a id =part3> <\/a>\n___","3a3646b5":"<p style=\"text-align: center;\">$F$ = $M_{b}$ * $g$ (5)<\/p>\n\n<p style=\"text-align: center;\">$F'$ = $M_{b}$ * $g'$ (6)<\/p>\n","891e52af":"Consequently, **Pmet_r** needs to be multiplied with **logic_Vtrans2** to change all datapoints to zero that were wrongly calculated as gait-type running. The following code section displays the corrected and uncorrected version of metabolic power.\n","ee1a293f":"Besides the calculation of the **ES** it must be considered that the average muscular force during a stride cycle in accelerative running is greater in comparison to the force needed during constant speed uphill running. The average force exerted is calculated as the product of the acceleration along the body axis and the body weight of the runner $(M_{b})$. Equations 5 and 6 show the calculation of the force for constant speed und accelerative running, respectively. ","095ac77b":"In the next step the **raw data** from which metabolic power is calculated is imported into the script. For the sake of this notebook an anonymous dataset is provided from a training session in soccer. The raw data is saved in a *.csv* file containing three columns:\n* speed in $\\frac {km}{h}$\n* distance (cumulative)* in $m$\n* forward acceleration in $\\frac {m}{s\u00b2}$\n\n*note that the cumulative distance does not start from zero because the measuring device has been activated before the start of the training sessions. \n\nNotes to explain the lines of codes are also added within the code and marked with a #.","19dea8d4":"Metabolic power is defined as *\u201cthe required rate of ATP hydrolysis to sustain forward running at an instant in time.\u201d* (Gray, Shorter, Cummins, Murphy & Waldron, 2018). Direct measurements of instantaneous metabolic power in non-steady-state conditions remain to be challenging and are in many cases unfeasible. In order to overcome this issue, a biomechanical approach to indirectly calculate metabolic power was suggested in a paper from Di Prampero and colleagues (2005). It was the aim of the paper to investigate the energy cost of sprint running. In comparison to energy cost of steady-state running, which is easily measurable via indirect calorimetry (Mtaweh, Tuira, Floh & Parshuram, 2018) the measurement in sprint running is rather difficult due to the **absence of a steady-state**. The approach suggests that the energy cost of **accelerative running is equal to steady-state uphill running** in which the inclination of the uphill slope is dictated by the magnitude of the acceleration (figure 1). Following the same concept steady-state downhill running is metabolically equivalent to decelerative running.  ","09beb118":"Next it must be investigated, if the measured speed at each data point is below or above the transition speed to inform **if the energy cost of walking or running needs to be calculated**. \nIn order to demonstrate this step the datapoints 47030 to 47035 are outputted. For the datapoints **47030, 47031, 47032 the energy cost of running must be calculated**, because the array returns the value **'False'**. This means, that the measured speed is below the calculated transition velocity for the given **ES**. On other hand, for the data points **47033 and 47034 the energy cost of running must be calculated**, because the array outputs **'True'**, meaning that the measured speed is above the transition speed calculated from the given **ES**.","749a3ad4":"Using the parameters **speed** and **acceleration** metabolic power can be calculated using the **equations from [Part 1](#part1)**. For the sake of this demonstration the constants are defined the constants as follows:\n\n* $KT = 1.29$\n* $k = 0.0037 \\frac {N * s\u00b2}{kg * m^{\u00b2}}$\n* $g = 9.81 \\frac{m}{s\u00b2}$\n* $Run_{eff} = 3.6 \\frac{J}{kg*m}$ (Running efficiency)","6cf571b8":"If $C_{ar}$ is expressed in $\\frac {J}{kg*m}$ and speed in $\\frac {m}{s}$, metabolic power is calculated in $\\frac {W}{kg}$. This can easily be converted into $O_2$-demand. Multiplying $P_{met}$ with a factor of 2.87 converts $\\frac {W}{kg}$ to $\\frac {ml}{min*kg}$, given a respiratory quotient of 0.96, which corresponds to an energy equivalent of 20.9 kJ per liter of $O_2$ (Polglaze & Hoppe, 2019). Further explanations regarding the conversion of $\\frac {W}{kg}$ into $\\frac {ml}{min*kg}$ are provided in [part 4](#part4) of this notebook.\n\nFollowing the presented approach, **metabolic power can be calculated solely from kinematic data**. As kinematic data is already being collected in many elite team sports for training monitoring and prescription purposes, the interest in the concept rapidly grew following Di Prampero\u2019s publication (Akenhead & Nassis, 2016). Consequently, in 2018 Di Prampero and Osgnach provided an update to their in 2005 first described concept, to make the approach more applicable for team sports. In their update the authors addressed **two issues of the original approach**. First, they proposed an additional calculation to account for the influence of drag by **air resistance** that was only briefly described in their original approach. Second, the authors state that the **attenuated energy cost of walking** [(figure 2)](#fig2) was neglected in their 2005 paper because they merely focused on sprint running. As the intermittent team sport load profile contains periods of walking the neglection of this leads to an overestimation of metabolic power (Di Prampero & Osgnach, 2018). \n\nThe influence of air resistance can easily be added into the equation. To calculate the additional energetic need to overcome air resistance the runner must produce a force that is proportional to the square of the wind\u2019s velocity during steady-state running. Since continuous measurement of the wind\u2019s speed and direction would need an additional device, Di Prampero and Osgnach suggest **modelling metabolic power in the absence of wind**. In this case the **wind\u2019s velocity is always equal to the speed of the runner $(v)$**. The wind\u2019s velocity must then be multiplied with a constant factor $(k)$ that depends on the runners frontal area $(Af)$, the air density $(p)$ and the drag coefficient $(C_x)$. For an average sized runner $k$ amounts to  0.0037 $\\frac {N * s\u00b2}  {kg * m\u00b2}$. Lastly, the runner must lean forward additionally to overcome the acceleration due to air resistance. Thus, the **ES** calculated in equation 4 must be added with the following equation to account for air resistance. ","2ec352a9":"<a id =eq4> <\/a>\n<p style=\"text-align: center;\">$\u03b1\u2019$ = $90 -  \\alpha $ (3)<\/p>","137747c4":"Lastly, the logical arrays that was created for the different **metabolic power zones** and **speed-bands** must be multiplied with the array $dis$. The following code outputs a graphical visualisation of the result. In order to verify that no mistake was made in the allocation of distances, the code also outputs the overall sum of distance spent in the metabolic power zones and speed-bands, which must be identical.","9504e8c1":"The **distance traveled** in various **speed-bands** and **metabolic power zones** has been calculated. These values are typically used in the **monitoring of volume and intensity** in team sports. \n<a id =part4> <\/a>\n___","d7fbe9da":"The figure shows oxygen consumption **above the maximal oxygen uptake** (in this case 60 $\\frac {ml}{kg*min}$). Therefore, the actual oxygen consumption needs a maximal value that **cannot be exceeded**. This applied in the following codesection.","b6838bd9":"The **resulting lactate concentrations** must be understood on a **qualitative level**. Individual modelling of lactate concentrations require knowledge of **individual PCr and ATP stores** as well as the maximal power of the **oxidative and glycolytic system** and the individual **running efficiency** (Mader, 2003). Future research may focus on the application of these variables into the modelling of metabolic pathways based on metabolic power data. \n<a id =part5> <\/a>\n___","191e6304":"\n<center><img src=\"https:\/\/d3i71xaburhd42.cloudfront.net\/a32c6e1aa4e51ab8566ff26632964bd3b5d5cf26\/2-Figure1-1.png\" ><\/center>\n\n<p style=\"text-align: center;\">Figure 1: Calculation of the equivalent slope (Di Prampero et al., 2005)<\/p>","82495d3b":"First **EM** and **ES** are calculated using [equation 7](#eq7) and [13](#eq13), respectively. Both are saved into separate arrays.","3fa9c627":"In the last step all datapoints that are considered as walking but actually should be considered as running need to be **eliminated**. Afterwards both arrays are **joined** (running: Pmet_r, walking: Pmet_w). The code below displays the final data! ","6c1bd4be":"In order to calculate **metabolic power** the energy cost of walking must be multiplied with the speed $(s)$.","6111ac00":"\n## Part 1: The Theoretical Background","54b67690":"In the following the energy cost of walking between the **upper** and the **lower** **ES** is **linearly interpolated** to calculate the energy cost of walking for the given **ES**. ","0453851e":"<p style=\"text-align: center;\">$P_{met}$=$C_{ar}$\u00d7$s$ (11)<\/p>","31e47182":"Thus, the equivalent slope (ES) for the angle $\u03b1\u2019$ is the tangent of itself. "}}