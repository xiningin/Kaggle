{"cell_type":{"3cce13b7":"code","accc2785":"code","ba5e0e04":"code","4c587a4c":"code","27d855c5":"code","7c85c58e":"code","6d553635":"code","3e697da9":"code","79b59375":"code","34c34677":"code","1d7e3382":"code","25c2a6fa":"code","12ac9c69":"code","5907a72e":"code","8104341f":"code","81b2b21a":"code","33f0a9d5":"code","4f406c2f":"code","82cbbfe7":"code","bd09a5ec":"code","e49ccc87":"code","d4666fd3":"code","61e69603":"code","108341c8":"code","7f7f3968":"code","5557360a":"code","3c25ce05":"code","a1ef4a27":"code","652746b6":"code","55bca7d0":"code","3ce226a6":"code","6a14767b":"code","a63feffc":"code","f448d8d9":"code","a25024a4":"code","f83917fe":"code","c41de409":"code","4e055dcd":"code","58420ebf":"code","a51321d6":"code","96096711":"code","7737d925":"code","590b8c93":"code","7d008efe":"code","299c5f59":"code","831f02ee":"code","bd270dc1":"code","45ef46a0":"code","051828da":"code","e1d9973c":"code","baf363d3":"code","f9855058":"code","463eb246":"code","e495b070":"code","fd2a5fe3":"code","084973b0":"code","179d762d":"code","7ecd9a7d":"code","b48f5133":"code","763daf7c":"code","11934d37":"code","cd026d59":"code","9f59a458":"code","62377a92":"code","68c32c4d":"code","c46717a3":"code","94b6b0b5":"code","92c2d4aa":"code","23e0d245":"code","7e825901":"code","f7db7a52":"code","c8018f21":"code","07fd5c03":"markdown","66e0d11a":"markdown","15aa9f4d":"markdown","17b502ef":"markdown","dcf70952":"markdown","4aef419d":"markdown","6182a7fb":"markdown","558183e6":"markdown","6f214be5":"markdown","c8c70b94":"markdown","0265472f":"markdown","6edefa78":"markdown","1b43ce05":"markdown","b5b16060":"markdown","8ff4f412":"markdown","0da4074c":"markdown","534c1cda":"markdown","7033cbc4":"markdown"},"source":{"3cce13b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","accc2785":"#\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib \nimport random\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import load_boston\nfrom datetime import datetime\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold, GridSearchCV\nimport seaborn as sns\nfrom sklearn.metrics import r2_score\n\n%matplotlib inline\n%config InlineBackend.figure_format = 'svg'\nimport warnings\nwarnings.filterwarnings('ignore')\n\nmatplotlib.rcParams.update({'font.size': 9})","ba5e0e04":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0446\u0435\u043d\u043a\u0438\ndef evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(f'Train R2: {round(r2_score(train_true_values, train_pred_values), 3)},\\\n            Test R2:{round(r2_score(test_true_values, test_pred_values), 3)}')\n    \n    check_train = pd.DataFrame({\n        \"true\": train_true_values,\n        \"pred\": train_pred_values.flatten(),\n    })\n\n    check_test = pd.DataFrame({\n        \"true\": test_true_values,\n        \"pred\": test_pred_values.flatten(),\n    })\n\n    sns.scatterplot(data=check_train, x=\"pred\", y=\"true\", alpha=.5, label=\"Train\")\n    sns.scatterplot(data=check_test, x=\"pred\", y=\"true\", alpha=.5, label=\"Test\")","4c587a4c":"#\u041f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0430\u043c\nTRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'\nSAMPLE_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv'","27d855c5":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","7c85c58e":"train_df.head()","6d553635":"train_df.describe()","3e697da9":"train_df.dtypes","79b59375":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","34c34677":"test_df['Ecology_2'].value_counts()","1d7e3382":"test_df['Ecology_3'].value_counts()","25c2a6fa":"test_df['Shops_2'].value_counts()","12ac9c69":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', test_df.shape[0])","5907a72e":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('count')\nplt.xlabel('Price')\n\nplt.title('Distribution of Price')\nplt.show()","8104341f":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \ntrain_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","81b2b21a":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['Rooms'].value_counts()","33f0a9d5":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f\ntrain_df.loc[train_df['Rooms'] == 0]","4f406c2f":"train_df.loc[train_df['Rooms'] == 10]","82cbbfe7":"train_df.loc[train_df['Rooms'] == 19]","bd09a5ec":"train_df.loc[train_df['Rooms'] == 6]","e49ccc87":"#\u0418\u0437\u0443\u0447\u0438\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f = 0 \u0438 \u0431\u043e\u043b\u0435\u0448\u0435 5 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443, \u0430 \u0442\u0430\u043a \u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u043e\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ntrain_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 6), 'Rooms_outlier'] = 1\ntrain_df.head()","d4666fd3":"train_df.loc[(train_df['Rooms'] >= 6) | (train_df['Rooms'] == 0), 'Rooms'] = train_df['Rooms'].median()\ntrain_df['Rooms'].value_counts()","61e69603":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['Square'].value_counts()","108341c8":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0437\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043c\u0435\u043d\u0435\u0435 20 \u043a\u0432. \u043c\u0435\u0442\u0440\u043e\u0432\ntrain_df.loc[train_df['Square'] < 20]","7f7f3968":"#\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043c\u0435\u043d\u0435\u0435 16 - \u043e\u0448\u0438\u0431\u043a\u0430 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u044c\u0448\u0435\u0435 16 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[train_df['Square'] < 16, 'Square'] = train_df['Square'].median()","5557360a":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u0435\u0435 150 \u043c\u0435\u0442\u0440\u043e\u0432\ntrain_df.loc[train_df['Square'] > 150]","3c25ce05":"#\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0431\u043e\u043b\u0435\u0435 200 \u044d\u0442\u043e \u043e\u0448\u0438\u0431\u043a\u0430 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[train_df['Square'] > 200, 'Square'] = train_df['Square'].median()","a1ef4a27":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['KitchenSquare'].value_counts()","652746b6":"#\u041f\u0440\u0435\u0434\u043f\u043b\u043e\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u043c\u0435\u043d\u0435\u0435 5 \u0438 \u0431\u043e\u043b\u0435\u0435 20 \u043e\u0448\u0438\u0431\u043a\u0430 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441 - \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[(train_df['KitchenSquare'] < 5) | (train_df['KitchenSquare'] > 20), 'KitchenSquare'] = train_df['KitchenSquare'].median()\ntrain_df['KitchenSquare'].value_counts()","55bca7d0":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['LifeSquare'].value_counts()","3ce226a6":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438\ntrain_df.loc[train_df['LifeSquare'] > train_df['Square']]","6a14767b":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0431\u0449\u0435\u0439, \u043d\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0433\u0434\u0435 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0438\u043d\u0443\u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u0438 \n#\u043c\u0438\u043d\u0443\u0441 5 (\u0431\u0435\u0440\u0435\u043c \u0433\u0438\u043f\u043e\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u0445\u043e\u0434\u0438\u0442 \u0441\u0430\u043d\u0443\u0437\u0435\u043b \u0438 \u0438\u043d\u043e\u0435 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0436\u0438\u043b\u044b\u043c)\ntrain_df.loc[(train_df['LifeSquare'] > train_df['Square']),'LifeSquare'] = train_df['Square'] - train_df['KitchenSquare'] - 5\n","a63feffc":"#\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432\u044b\u0448\u0435 \u043e\u0431\u0449\u0435\u0439\ntrain_df.loc[train_df['LifeSquare'] > train_df['Square'], 'LifeSquare'].count()","f448d8d9":"#\u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0441\u0442\u0440\u043e\u043a \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0433\u0434\u0435 \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043e\u0431\u0449\u0435\u0439 \u0437\u0430 \u043c\u0438\u043d\u0443\u0441\u043e\u043c 5, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c\ntrain_df.loc[train_df['LifeSquare'] < (train_df['Square'] - train_df['KitchenSquare'] - 5)\/2]['LifeSquare']","a25024a4":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0438\u0437 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u0438 5\ntrain_df.loc[(train_df['LifeSquare'] < (train_df['Square'] - train_df['KitchenSquare'] - 5)\/2),['LifeSquare']] = train_df['Square'] - train_df['KitchenSquare'] - 5","f83917fe":"#\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u0441\u0435 \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c\ntrain_df.loc[train_df['LifeSquare'] < (train_df['Square'] - train_df['KitchenSquare'] - 5)\/2]['LifeSquare'].count()","c41de409":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['HouseFloor'].value_counts()","4e055dcd":"train_df['HouseFloor'].sort_values().unique()","58420ebf":"#\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439\ntrain_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","a51321d6":"#\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0448\u0435 30 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c, \u0442\u0430\u043a \u0436\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[(train_df['HouseFloor'] == 0) | (train_df['HouseFloor'] > 30)] = train_df['HouseFloor'].median()","96096711":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['Floor'].value_counts()","7737d925":"#\u0441\u0432\u0435\u0440\u0438\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u0430\u0436\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0434\u0430\u043d\u0438\u044f\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor']].value_counts()","590b8c93":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0440\u0430\u043d\u0434\u043e\u043c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'Floor'] = train_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor'].apply(lambda x: random.randint(1, x))","7d008efe":"#\u0418\u0437\u0443\u0447\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435\ntrain_df['HouseYear'].value_counts()","299c5f59":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0448\u0435 \u043d\u044b\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0433\u043e\u0434\u0430\ntrain_df.loc[train_df['HouseYear'] > 2021]['HouseYear'].value_counts","831f02ee":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[train_df['HouseYear'] > 2021] = train_df['HouseYear'].median()","bd270dc1":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0440\u0430\u043d\u044c\u0448\u0435 1970 \ntrain_df.loc[train_df['HouseYear'] < 1970]['HouseYear'].value_counts()","45ef46a0":"#\u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u043e\u043b\u0435\u0435 100 \u043b\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0431\u043e\u0441\u043e\u043c, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u0443\ntrain_df.loc[train_df['HouseYear'] < 1921] = train_df['HouseYear'].median()","051828da":"#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ntrain_df.isna().sum()","e1d9973c":"#\u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043d\u0430 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u043a\u0443\u0445\u043d\u0438 \u043c\u0438\u043d\u0443\u0441 5\ntrain_df_life_non = train_df['LifeSquare'].isna()\ntrain_df.loc[train_df_life_non, 'LifeSquare'] = train_df['Square'] - train_df['KitchenSquare'] - 5","baf363d3":"#Healthcare_1 - \u0443\u0434\u0430\u043b\u044f\u0435\u043c\ntrain_df.drop('Healthcare_1', axis=1, inplace=True)","f9855058":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"        \n        self.medians = None\n        self.kitchen_square_quantile = None\n        self.rooms_quantile_min = None\n        self.rooms_quantile_max = None\n        self.house_floor_mode=None\n        self.life_square_quantile = None\n        self.square_quantile_min = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        self.rooms_quantile_min = X['Rooms'].quantile(0.025)\n        self.rooms_quantile_max = X['Rooms'].quantile(0.975)\n        self.house_floor_mode = X['HouseFloor'].mode()[0]\n        self.square_quantile_min = X['Square'].quantile(0.025)\n        self.life_square_quantile = X['LifeSquare'].quantile(0.125)\n                \n    # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u0439\n    def life_square(self, square, kitchen_square):\n        return square - kitchen_square - 5\n    \n    # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0441 \u0443\u0447\u0451\u0442\u043e\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043c\u0435\u0449\u0435\u043d\u0438\u0439\n    def square(self, life_square, kitchen_square):\n        return life_square + kitchen_square + 5\n\n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        X.loc[(X['Rooms'] == 0), \"Rooms\"] = self.medians['Rooms']\n        X.loc[(X['Rooms'] >= 6), \"Rooms\"] = self.medians['Rooms']\n        \n        # HouseFloor\n        X['HouseFloor_outlier'] = 0\n        X.loc[((X['HouseFloor'] == 0) | (X['HouseFloor'] > 30)), 'HouseFloor_outlier'] = 1\n        X.loc[(X['HouseFloor'] == 0), 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[(X['HouseFloor'] > 30), 'HouseFloor'] = self.medians['HouseFloor']\n        \n        # Floor\n        more_house_floor = X.loc[(X['Floor'] > X['HouseFloor'])].index\n        X.loc[more_house_floor, 'Floor'] = X.loc[more_house_floor, 'HouseFloor'].apply(lambda x: random.randint(1,x))\n\n        # HouseYear\n        current_year = datetime.now().year\n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        X.loc[X['HouseYear'] < 1921] = self.medians['HouseYear']\n        \n        \n        # Square\n        X.loc[X['Square'] <= 16, 'Square'] = self.medians['Square']\n        X.loc[X['Square'] >= 150, 'Square'] = self.medians['Square']\n        X.loc[X['Square'].isna(), 'Square'] = self.medians['Square']\n\n        # KitchenSquare\n        cond = ((X['KitchenSquare'] > 30) & ~(X['LifeSquare'].isna()) & ~(X['Square'].isna()))\n        square_outliers = X.loc[cond, 'KitchenSquare'].index\n        X.loc[square_outliers, 'KitchenSquare'] = X.loc[square_outliers, 'Square'] - X.loc[square_outliers, 'LifeSquare'] - 5\n        cond = ((X['KitchenSquare']) > (self.kitchen_square_quantile))\n        X.loc[cond, 'KitchenSquare'] = self.medians['KitchenSquare']\n        X.loc[(X['KitchenSquare'] < 5), 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        # LifeSquare \n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 5\n        X.loc[X['LifeSquare'] > X['Square'], 'LifeSquare'] = X['Square'] - X['KitchenSquare'] - 5 \n        X.loc[(X['LifeSquare'] < (X['Square'] - X['KitchenSquare'] - 5)\/2),['LifeSquare']] = X['Square'] - X['KitchenSquare'] - 5\n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)       \n        \n       # \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\n        X.fillna(self.medians, inplace=True)\n\n        return X","463eb246":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","e495b070":"# \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nclass FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.med_price_by_social = None\n        self.med_price_by_health = None\n        self.house_year_max = None\n        self.floor_max = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                                .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n        \n        # District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n           df['Price'] = y.values\n           self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                           .rename(columns={'Price':'MedPriceByDistrict'})\n           self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n\n           self.med_price_by_social = df.groupby(['Social_1', 'Social_2'], as_index=False).agg({'Price':'median'})\\\n                                           .rename(columns={'Price':'MedPriceBySocial'})\n           self.med_price_by_social_median = self.med_price_by_social['MedPriceBySocial'].median()\n\n           self.med_price_by_floor = df.groupby(['Rooms', 'Floor'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByFloor'})\n           self.med_price_by_floor_median = self.med_price_by_floor['MedPriceByFloor'].median()\n            \n        # floor, year\n        if y is not None:\n           self.floor_max = df['Floor'].max()\n           self.house_year_max = df['HouseYear'].max()\n           df['Price'] = y.values\n           df = self.floor_to_cat(df)\n           df = self.year_to_cat(df)\n           self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                           rename(columns={'Price':'MedPriceByFloorYear'})\n           self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n                \n    def transform(self, X):\n        # \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['DistrictSize'].fillna(4, inplace=True)\n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0438 \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n        X = self.floor_to_cat(X)\n        X = self.year_to_cat(X)\n\n        \n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X.fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X.fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        if self.med_price_by_social is not None:\n            X = X.merge(self.med_price_by_social, on=['Social_1', 'Social_2'], how='left')\n            X.fillna(self.med_price_by_social_median, inplace=True)\n\n        if self.med_price_by_floor is not None:\n            X = X.merge(self.med_price_by_floor, on=['Rooms', 'Floor'], how='left')\n            X.fillna(self.med_price_by_floor_median, inplace=True)\n            \n        return X\n    \n    # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n    def floor_to_cat(self, X):\n        bins = [0, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n        X['floor_cat'].fillna(-1, inplace=True) \n        return X\n    \n     # \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0434\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n    def year_to_cat(self, X):\n        bins = [0, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n        X['year_cat'].fillna(-1, inplace=True)\n        return X","fd2a5fe3":"train_df.columns.tolist()","084973b0":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nfeature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n# \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'DistrictSize', 'IsDistrictLarge', 'MedPriceByFloorYear', 'MedPriceBySocial', 'MedPriceByFloor']\n\ntarget_name = 'Price'","179d762d":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns='Price')\ny = train_df['Price']","7ecd9a7d":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","b48f5133":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","763daf7c":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","11934d37":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","cd026d59":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","9f59a458":"rf_model = RandomForestRegressor(n_estimators=200, random_state=21, max_depth=15, criterion='mse')\nrf_model.fit(X_train, y_train)","62377a92":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u0440\u0438\u043a\u0438 R2\ny_train_preds = rf_model.predict(X_train)\ny_test_preds = rf_model.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","68c32c4d":"cv_score = cross_val_score(rf_model, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\ncv_score","c46717a3":"cv_score.mean()","94b6b0b5":"feature_importances = pd.DataFrame(zip(X_train.columns, rf_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\nfeature_importances.sort_values(by='importance', ascending=False)","92c2d4aa":"test_df.shape","23e0d245":"submit = pd.read_csv(SAMPLE_PATH)\nsubmit.head()","7e825901":"predictions = rf_model.predict(test_df)\npredictions","f7db7a52":"submit['Price'] = predictions\nsubmit.head()","c8018f21":"submit.to_csv('rf_submit.csv', index=False)","07fd5c03":"**\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043d\u0430 \u0442\u0435\u0441\u0442\u0435**","66e0d11a":"**\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439**","15aa9f4d":"**\u041f\u043e\u0441\u0442\u043e\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","17b502ef":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**","dcf70952":"\u041f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438(KitchenSquare)","4aef419d":"\u041f\u043b\u043e\u0449\u0430\u0434\u044c(Square)","6182a7fb":"\u042d\u0442\u0430\u0436 \u0440\u0430\u0441\u043f\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b(Floor)","558183e6":"\u0413\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438(HouseYear)","6f214be5":"\u041a\u043e\u043c\u043d\u0430\u0442\u044b(Rooms)","c8c70b94":"\u0416\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c(LifeSquare)","0265472f":"\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","6edefa78":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438**","1b43ce05":"**\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447**","b5b16060":"**\u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445**","8ff4f412":"**\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445**","0da4074c":"\u042d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0434\u0430\u043d\u0438\u044f(HouseFloor)","534c1cda":"* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","7033cbc4":"**\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438**"}}