{"cell_type":{"0bbe3080":"code","63d1f3b0":"code","def709f3":"code","f5e7e56e":"code","4ac13544":"code","a2163478":"code","b2c97dca":"code","10832f26":"code","f38099d3":"code","d0403bd1":"code","401ff573":"code","f515ab2a":"code","4d201f9e":"code","c908160d":"code","22104125":"code","15705a41":"code","2678e444":"code","c9c1f2f9":"code","40125feb":"code","4ce02cc8":"code","5bb30fdc":"code","8391e08f":"markdown","158997e0":"markdown","973beb74":"markdown","c556cabe":"markdown","70c21ac1":"markdown","cff4c125":"markdown","b90e99f0":"markdown","06d332a8":"markdown","6b605aff":"markdown","1d3cdeec":"markdown","82694f14":"markdown","39169b3f":"markdown","f9df72e3":"markdown","279b1386":"markdown","7280db74":"markdown","6a764d58":"markdown"},"source":{"0bbe3080":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport missingno as msno\nfrom imblearn .over_sampling import SMOTE\n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score , classification_report , confusion_matrix , f1_score\n","63d1f3b0":"diabetes_df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndiabetes_df.head()","def709f3":"print(diabetes_df.shape)","f5e7e56e":"diabetes_df.info()","4ac13544":"diabetes_df.describe().T","a2163478":"\ndiabetes_df.loc[:,'Glucose'].replace(0 , np.NaN , inplace=True)\ndiabetes_df.loc[:,'BloodPressure'].replace(0 , np.NaN , inplace=True)\ndiabetes_df.loc[:,'SkinThickness'].replace(0 , np.NaN , inplace=True)\ndiabetes_df.loc[:,'BMI'].replace(0 , np.NaN , inplace=True)\n\n","b2c97dca":"diabetes_df.isnull().sum()","10832f26":"diabetes_df.isnull().value_counts()","f38099d3":"plt.figure(figsize=(3,3))\nmsno.matrix(diabetes_df)\nplt.show()","d0403bd1":"plt.figure(figsize=(10,5))\nsns.heatmap(diabetes_df.isna() , cmap='Blues')\nplt.show()","401ff573":"diabetes_df.loc[:,'Glucose'].fillna(diabetes_df.loc[:,'Glucose'].mean(),inplace=True)\ndiabetes_df.loc[:,'BloodPressure'].fillna(diabetes_df.loc[:,'BloodPressure'].mean(),inplace=True)\ndiabetes_df.loc[:,'SkinThickness'].fillna(diabetes_df.loc[:,'SkinThickness'].mean(),inplace=True)\ndiabetes_df.loc[:,'BMI'].fillna(diabetes_df.loc[:,'BMI'].mean(),inplace=True)","f515ab2a":"diabetes_df","4d201f9e":"diabetes_df['Outcome'].value_counts()","c908160d":"sns.countplot(data = diabetes_df , x='Outcome')","22104125":"plt.figure(figsize=(10,5))\ncol = ['non diabetics','diabetics']\npx.pie(diabetes_df , values=diabetes_df['Outcome'].value_counts(),names=col,\n       color_discrete_sequence=px.colors.sequential.RdBu)","15705a41":"X = diabetes_df.drop('Outcome',axis=1)\ny = diabetes_df['Outcome']\n","2678e444":"X_scaler = StandardScaler().fit_transform(X)","c9c1f2f9":"X_train,X_test,y_train,y_test = train_test_split(X_scaler,y,random_state=0,test_size=0.20)\n\nprint('The shape of X_train:'+' '+str(X_train.shape))\nprint('The size of X_train:'+' '+str(X_train.shape[0]))\nprint('The shape of X_test:'+' '+str(X_test.shape))\nprint('The size of X_test:'+' '+str(X_test.shape[0]))","40125feb":"knn_clf = KNeighborsClassifier(n_neighbors=10).fit(X_train , y_train)\nknn_clf.score(X_train , y_train)","4ce02cc8":"pred = knn_clf.predict(X_test)\nprint(accuracy_score(y_true=y_test , y_pred=pred))","5bb30fdc":"target_name = []\nclassification_report(y_true=y_test , y_pred=pred,output_dict=True)\n","8391e08f":"# Preprocessing Our Dataset Using StandardScaler ","158997e0":"# Splitting the dataset to training(80%)and testing (20%)set","973beb74":"## Replacing the unlogically value (0) with null","c556cabe":"## Visualizing the count of class_label","70c21ac1":"# Training our dataset via Model","cff4c125":"*Note: The min value for \"Glucose , BloodPressure , SkinThickness , Insulin and BMI\" is 0 \nwhich is not logic value for such features*\n#### so we should deal with it , by Replacing the 0 value with null","b90e99f0":"# Import Libraries","06d332a8":"### Note our data set is imbalnce , so the best performance evaluation is f1_score","6b605aff":"## KNN model","1d3cdeec":"> Note: Our data set is imbalnced as the count of diabetic is consided half the non diabetic ","82694f14":"## Check the null values","39169b3f":"## dealing with the null values","f9df72e3":"# Get the features and class label","279b1386":"## Dealing with the imbalance dataset","7280db74":"## Get a statsistics insights and deep inforamtion about our dataset","6a764d58":"# Check imbalnce dataset"}}