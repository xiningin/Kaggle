{"cell_type":{"56ac5657":"code","5a93e05c":"code","fa5f72a5":"code","7eb47ab4":"code","72f233b8":"code","e3172010":"code","a1f144fe":"code","c8c8a2a7":"code","53c50aae":"code","2ee83321":"code","f65f481f":"code","40d979bd":"markdown"},"source":{"56ac5657":"import cv2\nimport pandas as pd\nimport numpy as np\nimport os\nfrom tqdm import tqdm, tqdm_notebook\nfrom keras.applications.densenet import preprocess_input, DenseNet121\nfrom keras.models import Model\nfrom keras.layers import GlobalAveragePooling2D, Input, Lambda, AveragePooling1D\nimport keras.backend as K","5a93e05c":"train = pd.read_csv('..\/input\/petfinder-adoption-prediction\/train\/train.csv')\ntest = pd.read_csv('..\/input\/petfinder-adoption-prediction\/test\/test.csv')\nimg_size = 256\nbatch_size = 16","fa5f72a5":"def resize_to_square(im):\n    old_size = im.shape[:2] # old_size is in (height, width) format\n    ratio = float(img_size)\/max(old_size)\n    new_size = tuple([int(x*ratio) for x in old_size])\n    # new_size should be in (width, height) format\n    im = cv2.resize(im, (new_size[1], new_size[0]))\n    delta_w = img_size - new_size[1]\n    delta_h = img_size - new_size[0]\n    top, bottom = delta_h\/\/2, delta_h-(delta_h\/\/2)\n    left, right = delta_w\/\/2, delta_w-(delta_w\/\/2)\n    color = [0, 0, 0]\n    new_im = cv2.copyMakeBorder(im, top, bottom, left, right, cv2.BORDER_CONSTANT,value=color)\n    return new_im\n\ndef load_image(path, pet_id):\n    image = cv2.imread(f'{path}{pet_id}-1.jpg')\n    new_image = resize_to_square(image)\n    new_image = preprocess_input(new_image)\n    return new_image","7eb47ab4":"inp = Input((img_size, img_size, 3))\nbackbone = DenseNet121(input_tensor=inp, \n                       weights=\"..\/input\/densenet-keras\/DenseNet-BC-121-32-no-top.h5\",\n                       include_top = False)\nx = backbone.output\nx = GlobalAveragePooling2D()(x)\nx = Lambda(lambda x: K.expand_dims(x,axis = -1))(x)\nx = AveragePooling1D(4)(x)\nout = Lambda(lambda x: x[:,:,0])(x)\n\nm = Model(inp,out)","72f233b8":"pet_ids = train['PetID'].values\nn_batches = len(pet_ids) \/\/ batch_size + 1\n\nfeatures = {}\nfor b in tqdm_notebook(range(n_batches)):\n    start = b*batch_size\n    end = (b+1)*batch_size\n    batch_pets = pet_ids[start:end]\n    batch_images = np.zeros((len(batch_pets),img_size,img_size,3))\n    for i,pet_id in enumerate(batch_pets):\n        try:\n            batch_images[i] = load_image(\"..\/input\/petfinder-adoption-prediction\/train_images\/\", pet_id)\n        except:\n            pass\n    batch_preds = m.predict(batch_images)\n    for i,pet_id in enumerate(batch_pets):\n        features[pet_id] = batch_preds[i]","e3172010":"train_feats = pd.DataFrame.from_dict(features, orient='index')\ntrain_feats.to_csv('train_img_features.csv')\ntrain_feats.head()","a1f144fe":"pet_ids = test['PetID'].values\nn_batches = len(pet_ids) \/\/ batch_size + 1\n\nfeatures = {}\nfor b in tqdm_notebook(range(n_batches)):\n    start = b*batch_size\n    end = (b+1)*batch_size\n    batch_pets = pet_ids[start:end]\n    batch_images = np.zeros((len(batch_pets),img_size,img_size,3))\n    for i,pet_id in enumerate(batch_pets):\n        try:\n            batch_images[i] = load_image(\"..\/input\/petfinder-adoption-prediction\/test_images\/\", pet_id)\n        except:\n            pass\n    batch_preds = m.predict(batch_images)\n    for i,pet_id in enumerate(batch_pets):\n        features[pet_id] = batch_preds[i]","c8c8a2a7":"test_feats = pd.DataFrame.from_dict(features, orient='index')\ntest_feats.to_csv('test_img_features.csv')\ntest_feats.head()","53c50aae":"print(train_feats.shape, test_feats.shape)","2ee83321":"train_feats.columns = [\"img_feat{}\".format(i) for i in range(256)]\ntest_feats.columns = [\"img_feat{}\".format(i) for i in range(256)]\n\ntrain_feats[\"PetID\"] = train_feats.index\ntest_feats[\"PetID\"] = test_feats.index\n\ntrain = pd.merge(train, train_feats, on=\"PetID\")\ntest = pd.merge(test, test_feats, on=\"PetID\")\n\nprint(train.shape, test.shape)","f65f481f":"train.head()","40d979bd":"original kernel: https:\/\/www.kaggle.com\/christofhenkel\/extract-image-features-from-pretrained-nn"}}