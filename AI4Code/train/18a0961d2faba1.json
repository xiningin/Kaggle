{"cell_type":{"2629f820":"code","3f262402":"code","852a17f6":"code","a7b64035":"code","468038a0":"code","c18618d4":"code","2f8e6517":"code","b58d1b5a":"code","5fc35698":"code","b8d979d7":"code","b5c8605d":"code","d755b4d4":"code","d4c0ec3c":"code","6e462f40":"code","b1bcbad5":"code","e2a92218":"code","34855a6b":"code","eb9a949b":"code","20855525":"code","cccb83a5":"code","47551ad8":"code","fa935f43":"code","4528ad52":"code","412982c8":"code","42b6c39c":"code","ef9a1316":"code","90bcfe74":"code","021860ad":"code","00b49113":"code","d8e04829":"code","3e8da65d":"code","bb28e19f":"code","02549790":"code","f3e6fc82":"code","ed6a97c8":"markdown","64e4a273":"markdown","e2872537":"markdown","c014a8a4":"markdown","4bd42f41":"markdown"},"source":{"2629f820":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nimport random\n\nfrom functools import partial\nfrom scipy.optimize import minimize\nimport matplotlib.pyplot as plt","3f262402":"def seed_everything(seed=0):\n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n\nseed_everything(seed=0)","852a17f6":"weights_lambda = 0.95 # reflect the weight decay for distant days\nnormalize = True\ndays_of_pace_keep = 5","a7b64035":"print([weights_lambda ** i for i in range(100)])","468038a0":"train_df = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/train.csv')\ntrain_df.head()","c18618d4":"test_df = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/test.csv')\ntest_df.head()","2f8e6517":"num_dates_total = len(np.unique(list(train_df['Date']) + list(test_df['Date'])))\nnum_dates_total\nnum_dates_test = len(np.unique(list(test_df['Date'])))\nnum_dates_test\nnum_dates_train = len(np.unique(list(train_df['Date'])))\nnum_dates_train","b58d1b5a":"sample_submission = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-3\/submission.csv')\nsample_submission.head()","5fc35698":"cases = train_df['ConfirmedCases'].values.reshape((-1, num_dates_train))\nfatalities = train_df['Fatalities'].values.reshape((-1, num_dates_train))","b8d979d7":"def predict(x, len_t = None):\n    assert len(x) % 3 == 0\n    num_cases = (len(x)) \/\/ 3\n    r = np.array(x[:num_cases])\n    k = np.array(x[num_cases:2 * num_cases])\n    p0 = np.array(x[num_cases*2:3 * num_cases])\n    t = np.arange(len_t)  \n    \n    exp = np.exp(t.reshape((-1,1)).dot(r.reshape((1,-1)))).transpose()\n\n    nom = (k * p0).reshape((-1,1))*exp\n    denom = p0.reshape((-1,1))*(exp - 1) + k.reshape((-1,1)) + 0.0000001\n    log = nom \/ denom\n    \n    return log","b5c8605d":"def fun(x, cases = cases, regularisation = 0, lamb = weights_lambda):\n    log = predict(x, cases.shape[1])\n    if (log < 0).any():\n        return 100000\n    \n    t = np.arange(cases.shape[1])\n    weight = (lamb ** t)[::-1]    \n    \n    num_cases = (len(x)) \/\/ 3\n    k = np.array(x[num_cases:2 * num_cases])\n    \n    result = (((np.log1p(log) - np.log1p(cases))**2)*weight).mean() \/ weight.mean()\n    \n    \n    if regularisation == 0:\n        return result\n    else:\n        r = np.array(x[:cases.shape[0]])\n        mean_r = r.mean()\n#         print(((r - mean_r)**2).mean())\n        return result + regularisation * ((r - mean_r)**2).mean()","d755b4d4":"partial_results_x = []\npartial_results_y = []\n\nfor i, case in enumerate(cases):\n    x0 = [0.1] + [case[-1]*2] + [1]\n    part_func = partial(fun, cases = case[None], regularisation = 0)\n    bounds = []\n    for j in range(len(x0)\/\/3):\n        bounds.append((0,2))\n    for j in range(len(x0)\/\/3):\n        bounds.append(((case[-1]*2 - case[-days_of_pace_keep])*((case[-1]+1)\/(case[-days_of_pace_keep]+1)),None)) \n    for j in range(len(x0)\/\/3):\n        bounds.append((None,None))  \n    res = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':100000, 'disp' : False}, bounds = bounds)\n    partial_results_y.append(res.fun)\n    print(i, res.fun)\n    partial_results_x.append(res.x)\n    \nx0 = np.stack(partial_results_x).transpose().flatten()","d4c0ec3c":"bounds = []\nfor i in range(len(x0)\/\/3):\n    bounds.append((0,2))\nfor i in range(len(x0)\/\/3):\n    bounds.append(((cases[i,-1]*2 - cases[i,-days_of_pace_keep])*((cases[i,-1]+1)\/(cases[i,-days_of_pace_keep]+1)),None)) \nfor i in range(len(x0)\/\/3):\n    bounds.append((None,None))  ","6e462f40":"part_func = partial(fun, cases = cases, regularisation = 0)\nres = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':1000, 'disp' : True}, bounds = bounds)\nprint(res.fun)\nx0 = res.x","b1bcbad5":"part_func = partial(fun, cases = cases, regularisation = 0.3)\nres = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':1000, 'disp' : True}, bounds = bounds)\nprint(res.fun)\nx0 = res.x","e2a92218":"prediction_full = predict(x0, len_t = num_dates_total)","34855a6b":"def draw_results(cases, prediction_full, i):\n    plt.plot(cases[i])\n    plt.plot(prediction_full[i])\n    plt.show()\n\nfor i in range(50):\n    draw_results(cases, prediction_full, i)","eb9a949b":"if normalize:\n    for i in range(50):\n        multiplier = (cases[:,-1] + 1).reshape(-1,1) \/ (prediction_full[:, num_dates_train-1] + 1).reshape(-1,1)\n        prediction_full = (prediction_full +1) * multiplier - 1\n        multiplier","20855525":"prediction = prediction_full[:, -num_dates_test:]","cccb83a5":"for i in range(50):\n    draw_results(cases, prediction_full, i)","47551ad8":"def compute_fatalities(x, cases = cases):\n    result = []\n    num_cases = len(x) \/\/ 2\n    lamb = np.array(x[:num_cases])\n    p = np.array(x[num_cases:])\n    \n    fatalities = cases[:,0] * p\n    result.append(fatalities)\n    for j in range(1,cases.shape[1]):\n        fatalities = result[-1] * lamb + cases[:,j] * p\n        result.append(fatalities)\n    return np.stack(result).transpose()","fa935f43":"def fun_fat(x, fatalities = fatalities, cases = cases, regularisation = 0, lamb = weights_lambda):\n    pred = compute_fatalities(x, cases)\n    \n    if (pred < 0).any():\n        return 100000\n    \n    t = np.arange(fatalities.shape[1])\n    weight = (lamb ** t)[::-1]    \n    \n    num_cases = (len(x)) \/\/ 3\n    k = np.array(x[num_cases:2 * num_cases])\n    \n    result = (((np.log1p(pred) - np.log1p(fatalities))**2)*weight).mean() \/ weight.mean()\n    \n    \n    if regularisation == 0:\n        return result\n    else:\n        p = np.array(x[fatalities.shape[0]:])\n        mean_p = p.mean()\n        l = np.array(x[:fatalities.shape[0]])\n        mean_l = l.mean()\n#         print(((r - mean_r)**2).mean())\n        return result + regularisation * (((p - mean_p)**2).mean() + ((l - mean_l)**2).mean())","4528ad52":"partial_results_x = []\npartial_results_y = []\n\nfor i, case in enumerate(cases):\n    fatality = fatalities[i]\n    x0 = [0.1]*2\n    part_func = partial(fun_fat, cases = case[None], fatalities=fatality[None], regularisation = 0)\n    bounds = []\n    for j in range(len(x0)\/\/2):\n        bounds.append((0,1))\n    for j in range(len(x0)\/\/2):\n        bounds.append((0,1)) \n    res = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':100000, 'disp' : False}, bounds = bounds)\n    partial_results_y.append(res.fun)\n    print(i, res.fun)\n    partial_results_x.append(res.x)","412982c8":"x0 = np.stack(partial_results_x).transpose().flatten()\nbounds = []\nfor j in range(len(x0)\/\/2):\n    bounds.append((0,1))\nfor j in range(len(x0)\/\/2):\n    bounds.append((0,1)) ","42b6c39c":"part_func = partial(fun_fat, cases = cases, fatalities=fatalities, regularisation = 0)\nres = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':1000, 'disp' : True}, bounds = bounds)\nprint(res.fun)\nx0 = res.x","ef9a1316":"for i in range(3):\n    part_func = partial(fun_fat, cases = cases, fatalities=fatalities, regularisation = 0.01)\n    res = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':1000, 'disp' : True}, bounds = bounds)\n    print(res.fun)\n    x0 = res.x","90bcfe74":"for i in range(3):\n    part_func = partial(fun_fat, cases = cases, fatalities=fatalities, regularisation = 0.1)\n    res = minimize(part_func, x0, method='L-BFGS-B', tol=1e-6, options = {'maxiter':1000, 'disp' : True}, bounds = bounds)\n    print(res.fun)\n    x0 = res.x","021860ad":"predicted_cases = np.concatenate([cases,prediction[:, -(num_dates_total - num_dates_train):]], axis = 1)","00b49113":"prediction_fatalities_full = compute_fatalities(x0, predicted_cases)\nprediction_fatalities_full.shape","d8e04829":"for i in range(50):\n    draw_results(fatalities, prediction_fatalities_full, i)","3e8da65d":"if normalize:\n    for i in range(50):\n        multiplier = (fatalities[:,-1] + 1).reshape(-1,1) \/ (prediction_fatalities_full[:, num_dates_train-1] + 1).reshape(-1,1)\n        prediction_fatalities_full = (prediction_fatalities_full +1) * multiplier - 1","bb28e19f":"for i in range(50):\n    draw_results(fatalities, prediction_fatalities_full, i)","02549790":"prediction_fatalities = prediction_fatalities_full[:, -num_dates_test:]","f3e6fc82":"sample_submission['ConfirmedCases'] = prediction.reshape(-1)\nsample_submission['Fatalities'] = prediction_fatalities.reshape(-1)\nsample_submission.to_csv('submission.csv', index = False)","ed6a97c8":"# Predicitng fatalities","64e4a273":"# Predicting num cases","e2872537":"# Making submission","c014a8a4":"# Preparing data","4bd42f41":"The idea of this notebook is simple. I am trying to approximate number of cases with logistic curve and then predict number of fatalities.\nI also do some regularisation, give higher weight to later cases and normalise all the predictions according to the latest train day."}}