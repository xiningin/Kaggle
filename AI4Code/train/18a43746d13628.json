{"cell_type":{"1e54ef33":"code","f5dcd69a":"code","80b6f626":"code","6b88418f":"code","b64ad75c":"code","cd678ac9":"code","7d6fb710":"code","e9d9e1c5":"code","951242e5":"code","744d6a7c":"code","0932c40d":"code","e24e7163":"code","532a59b9":"markdown","03d16acf":"markdown","0335a6b8":"markdown","33cfd3ab":"markdown","28e664bb":"markdown","5449ee7b":"markdown","60348a43":"markdown","a408f17a":"markdown","f3b6978c":"markdown","b3b7281f":"markdown","89ab95ae":"markdown","b8207fac":"markdown","36052145":"markdown","8064d508":"markdown","06d3e553":"markdown","2ce1ac88":"markdown","33f0355e":"markdown","c547edd0":"markdown","d22a9981":"markdown","af3537de":"markdown","0f73ca10":"markdown","ecdd7ab0":"markdown","d3343a3a":"markdown","ab476146":"markdown","76b59b31":"markdown","f24c0f63":"markdown","9c8f6198":"markdown"},"source":{"1e54ef33":"import pandas as pd\nimport sqlite3\nimport seaborn as sns\n\n\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nconn = sqlite3.connect('\/kaggle\/input\/sellyourstuffdb\/company (7).db')","f5dcd69a":"sql = '''\nSELECT \n  transaction_date, \n  t.account, \n  clt.residence Country_of_residence, \n  SUM(total_buy)\/ 100 Total_profit \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \nGROUP BY \n  clt.residence \nORDER BY \n  Total_profit DESC \nLIMIT \n  10\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x='Country_of_residence', y='Total_profit',kind='bar', figsize=(20,10))\nplt.xlabel('Country')\nplt.ylabel('Total profit')\nplt.title('Total profits by country of residence on absolute scale')\nplt.show()","80b6f626":"sql = '''\nSELECT \n  transaction_date, \n  t.account, \n  clt.residence Country_of_residence, \n  sum(total_buy)\/ 100 Total_profit \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \nGROUP BY \n  clt.residence \nORDER BY \n  Total_profit DESC \nLIMIT \n  10\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x='Country_of_residence', y='Total_profit',kind='bar', figsize=(20,10), log=True)\nplt.xlabel('Country')\nplt.ylabel('Total profit on log scale')\nplt.title('Total profits by country of residence on log scale')\nplt.show()","6b88418f":"sql = '''\nSELECT \n  DISTINCT clt.residence as Country, \n  avg(total_buy \/ 100) as Average_profit \nFROM \n  transactions t \n  LEFT JOIN clients clt ON clt.account = t.account \nWHERE \n  total_buy > 0 \nGROUP BY \n  Country \nORDER by \n  Average_profit DESC\nLIMIT \n  10\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x='Country', y='Average_profit',kind='bar', figsize=(20,10), log=True)\nplt.xlabel('Country')\nplt.ylabel('Average profit')\nplt.title('Average profit by country per daily transactions per user')\nplt.show()\n","b64ad75c":"sql = '''\nSELECT \n  DISTINCT clt.indication_coupon as Coupon, \n  total(t.total_buy \/ 100) Total_profit \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \nWHERE \n  total_buy > 0 \nGROUP by \n  Coupon \nORDER by \n  Total_profit DESC \nLIMIT \n  15\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x='Coupon', y='Total_profit',kind='bar', figsize=(20,10), log=True)\nplt.xlabel('Coupon')\nplt.ylabel('Average profit')\nplt.title('Total profit by indication coupons on a log scale')\nplt.show()","cd678ac9":"sql = '''\nSELECT \n  DISTINCT clt.indication_coupon as Coupon, \n  clt.residence as Country, \n  total(t.total_buy \/ 100) Total_profit \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \nWHERE \n  total_buy > 0 \n  and indication_coupon = 308 \nGROUP by \n  residence \nORDER by \n  Total_profit DESC\nLIMIT \n  15\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x='Country', y='Total_profit',kind='bar', figsize=(20,10), log=True)\nplt.xlabel('Country')\nplt.ylabel('Average profit')\nplt.title('Total profit by indication coupon 308 on a log scale')\nplt.show()","7d6fb710":"sql = '''\nSELECT \n  t.transaction_date as Date, \n  clt.residence as Country, \n  total(total_buy \/ 100) as Profit \nFROM \n  transactions t \n  LEFT JOIN clients clt ON clt.account = t.account \nWHERE \n  total_buy > 0 \nGROUP BY \n  transaction_date, \n  residence\n'''\n\nprofits_by_dates_countries = pd.read_sql_query(sql,conn)\n\n## since we don't have a pivot feature in SQLite, we have to implement this functionality in Pandas:\n\nprofits_by_dates_countries_pivot = pd.pivot_table(profits_by_dates_countries,index='Date',columns='Country',values='Profit')\n\n## converting index to datetime object\nprofits_by_dates_countries_pivot.index = pd.to_datetime(profits_by_dates_countries_pivot.index)\n\n## adding columns with Month\/Year\/Year-Month for better trends aggregated visualization\n\nprofits_by_dates_countries_pivot['Month'] = profits_by_dates_countries_pivot.index.month\nprofits_by_dates_countries_pivot['Year'] = profits_by_dates_countries_pivot.index.year\nprofits_by_dates_countries_pivot['Year-Month'] = profits_by_dates_countries_pivot.index.year.map(str) + '-'+profits_by_dates_countries_pivot.index.month.map(str)\n\nprofits_by_dates_countries_pivot[['id','br','ng','ru']].head(10)","e9d9e1c5":"### list of the top countries by most accessible values (i.e. least number of missing values for visualization)\n\nNUMBER_OF_COUNTRIES = 5\ntopcountries = profits_by_dates_countries_pivot.isnull().sum(axis = 0).sort_values(ascending=True)[3:][:NUMBER_OF_COUNTRIES].index.values.tolist() \n\n\n## plotting selected number of countries \n\nfig, axes = plt.subplots(NUMBER_OF_COUNTRIES, 1, figsize=(20, 30), sharex=True)\nfor name, ax in zip(topcountries, axes):\n    sns.boxplot(data=profits_by_dates_countries_pivot, x='Month', y=name, ax=ax)\n    ax.set_ylabel('Monthly profit')\n    ax.set_title('Boxplots with montly profit for country {}'.format(name))","951242e5":"sql = '''\nSELECT \n  DISTINCT CASE WHEN (c.country = '') THEN 'global' WHEN (clt.residence = c.country) THEN 'local' ELSE 'no' END as Is_campaign, \n  avg(t.total_buy \/ 100) Profit_per_user \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \n  LEFT JOIN campaigns c ON t.transaction_date BETWEEN c.start_date \n  AND c.end_date \nWHERE \n  total_buy > 0 \nGROUP BY \n  Is_campaign\n'''\n\noverall_effect = pd.read_sql_query(sql,conn).set_index('Is_campaign')\n\n##plotting\n\noverall_effect.plot.barh(figsize=(20,5))\nplt.ylabel('Campaign status')\nplt.xlabel('Average profit per total daily transactions per user')\nplt.title('Average profit per total daily transactions per user depending on campaign status')\nplt.show()","744d6a7c":"sql = '''\nSELECT \n  DISTINCT t.transaction_date as Date, \n  CASE WHEN (c.country = '') THEN 'global' WHEN (clt.residence = c.country) THEN 'local' ELSE 'no' END as Is_campaign, \n  (t.total_buy \/ 100) Profit_per_user \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \n  LEFT JOIN campaigns c ON t.transaction_date BETWEEN c.start_date \n  AND c.end_date \nWHERE \n  total_buy > 0 \nORDER BY \n  t.transaction_date\n'''\n\ncampaigns_on_time_lines = pd.read_sql_query(sql,conn) \n\n##plotting\n\npd.pivot_table(campaigns_on_time_lines,index='Date',columns='Is_campaign',values='Profit_per_user').plot(kind='line',figsize=(20,10))\nplt.xlabel('Date')\nplt.ylabel('Average daily profit per user depending on campaign status')\nplt.title('Average daily profit per user depending on campaign status on timeline')\nplt.show()","0932c40d":"sql = '''\nSELECT \n  DISTINCT c.start_date as Campaign_start, \n  c.end_date as Campaign_end, \n  julianday(c.end_date) - julianday(c.start_date)+ 1 as Camp_duration, \n  round(\n    total(t.total_buy \/ 100), \n    3\n  ) as Average_profit, \n  round(\n    total(t.total_buy) \/(total_spend), \n    3\n  ) as Camp_ratio, \n  c.country as Country, \n  CASE WHEN (c.country = '') THEN 'global' WHEN (clt.residence = c.country) THEN 'local' ELSE 'no' END as Camp_type, \n  round(\n    total_spend \/(\n      julianday(c.end_date) - julianday(c.start_date) + 1\n    )\n  ) as Camp_costs_daily, \n  (c.total_spend) as Camp_costs_total \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \n  LEFT JOIN campaigns c ON t.transaction_date BETWEEN c.start_date \n  AND c.end_date \nWHERE \n  total_buy > 0 \n  AND (\n    clt.residence = c.country \n    OR c.country = '' \n    OR c.country = 'global'\n  ) \nGROUP BY \n  c.start_date \nORDER BY \n  Camp_ratio\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nplt.figure(figsize=(20,15))\nsns.scatterplot(data=z, x='Camp_ratio', y='Camp_costs_daily', hue = 'Country',size=\"Average_profit\", sizes=(40, 300)).set_title('Average profits by country and campaign sorted by campaign efficiency')\nplt.xlabel('Campaign efficiency rank')\nplt.ylabel('Campaign costs per day')\nplt.title('Campaign efficiency per country, average profit and costs')\nplt.show()","e24e7163":"sql = '''\nSELECT \n  DISTINCT c.start_date as Campaign_started, \n  sum(t.total_buy \/ 100) Total_profit, \n  avg(t.total_buy \/ 100) Average_profit, \n  c.country, \n  CASE WHEN (c.country = '') THEN 'global' WHEN (clt.residence = c.country) THEN 'local' ELSE 'no' END as is_camp, \n  julianday(c.end_date) - julianday(c.start_date)+ 1 as camp_duration, \n  total_spend \/(\n    julianday(c.end_date) - julianday(c.start_date) + 1\n  ) as camp_costs_per_day, \n  (c.total_spend) \nFROM \n  transactions t \n  INNER JOIN clients clt ON t.account = clt.account \n  LEFT JOIN campaigns c ON t.transaction_date BETWEEN c.start_date \n  AND c.end_date \nWHERE \n  total_buy > 0 \n  AND (\n    clt.residence = c.country \n    OR c.country = '' \n    OR c.country = 'global'\n  ) \nGROUP BY \n  Campaign_started \nORDER BY \n  Campaign_started\n\n'''\n\nz = pd.read_sql_query(sql,conn)\n\n## plotting\n\nz.plot(x= 'Campaign_started',y = 'Average_profit',kind='line', figsize=(20,10))\nplt.xlabel('Date')\nplt.ylabel('Average daily profit')\nplt.title('Average daily profits of all campaigns on timeline')\nplt.show()","532a59b9":"# Project ","03d16acf":"As we can see from the very rough summary table, there's a significant difference between average profits for those days when we didn't launch campaigns (`Is_campaign=no`) and when we did. An important thing, we cannot say for sure whether *global* campaigns (those where we did not target any specific region) are really that bad (profits are even lower for this dates), one of the reasons, there's only 2 campaigns in the database and this issue should be investigated with more data to come.","0335a6b8":"One of the issues with data provided is connected with the fact most data relates to *Indonesia*. There are 14 campaigns of 43 total which were targeted for the Indonesian market. The same issue touches `transactions` table, where the majority of data collected for Indonesia as well. From a brief look, we can say, there's no general correlation between campaign daily costs and relative campaign effect (roughly speaking, there could be observed some negative correlation, meaning, the more money we spend, the less efficient in terms of average user profits our campaign is). The figure purpose is to provide with insights on how one campaign relates to another in terms of efficiency. ","33cfd3ab":"Since *coupon 308* is an absolute leader (total profit is around 30 times higher than the second following coupon 116), it does not make sense to visualize it without logarithmic scale. We need to understand deeper which countries were directly affected by *coupon 308*.","28e664bb":"As we can see, selected data has a lot of NaN values, we should choose countries most informative in terms of trends analysis.","5449ee7b":"## Average profits by user per country","60348a43":"# Analysis","a408f17a":"## Seasonable trends by country","f3b6978c":"## Total profits by country. Most profitable countries","b3b7281f":"As we can see from the figure above, the most profitable country by the amount of total profit is *Indonesia*. But we cannot see how other countries compete and how they differ because of the scale. We need to try to use a log scale and to compare other countries.","89ab95ae":"## Average profits during a campaign","b8207fac":"## Analyzing campaigns effect","36052145":"## Important notes regarding further research\n\n* When we mention profits calculation, we understand profits using the general given formula  (`total_buy \/ 100`) unless otherwise indicated.\n* Campaigns dates are overlapping, but this issue does not touch promo effect calculation since 95% of campaigns are geo-targeted and when calculated profits for specific transactions by users it will not influence the stat on big numbers.\n* Some of the users in the `clients` table have no `residence` information. Those users will be considered only as a general client when no geo-based calculation and modelling involved.\n* Since there is no much info on the nature of campaigns, per data provided, we make an assumption, that the effect is produced for the very same days as the campaign is active for the selected region.","8064d508":"## Profits by dates and countries\n","06d3e553":"Taking a look at the provided boxplots for countries above we can assume there are readily obvious seasonable trends in profits according to transactions of our customers. The most significant source of data comes from *Indonesia*, where we can observe low peaks in summer and significant highs in wintertime. As we also can read from the boxplots above, other countries do not have the same seasonable activity. One of the reasons could be connected with differences in climate and other sociodemographic features of the countries or other underlying distinction.","2ce1ac88":"From the graph, we can see extremely bad campaigns (*2017-09-10*, *2017-08-31*, *2018-05-23*, etc.). Also, some peaks of efficiency for campaigns can be observed (probably, starting from November to the end of January, yet, we don't have enough data to conclude).","33f0355e":"If we try to roughly summarize average profits during the time when we have campaign and when we do not have one, we can observe that *local campaigns* (when we know that during a campaign targeted for one country customers from the same country made deals, it is an assumption as mentioned in preamble for this research) bring us around 1.5 times more profit on average. One of the exceptions is *global campaigns* when we can observe small profits recession. There could be two possible explanations, the first is that we do not have enough data to make such conclusions (only 2 global campaigns out of 43), the second is global campaigns are bad targeted and in general are a waste of money since they do not produce distinct profit effects.","c547edd0":"## Campaigns efficiency and costs distribution","d22a9981":"## Indication coupon 308 and countries influenced","af3537de":"## Imports and connection to the DB","0f73ca10":"## Profits by indication coupons on a log scale","ecdd7ab0":"As we can see from the figure, our top ten countries have comparable importance in term of profit. There is no such obvious second 'leader' speaking of the ranking of profitability.","d3343a3a":"As we can see from the figure above, indication *coupon 308* is the main source of profits. Again, we use a logarithmic scale, since profit from users coming from *Indonesian* is ten times higher than following second and third *Nigeria* and *Brazil* accordingly. And as it seems, most profits from all transactions in our database came from users registered with *coupon 308*.","ab476146":"As a general note, we try to analyze campaigns by campaign efficiency estimator, based on calculation of average profit per user per day (as aggregated in `transactions` table) which is later aggregated by campaign and then divided by campaigns total costs to form a relative index for analyzing how efficient this exact campaign was relative to others in provided dataset.","76b59b31":"## Project description\n\n\nA website allows clients to buy and sell items that are not being used anymore (chairs, laptops, books, etc.). Some of the clients make their living by buying products refurbishing and then reselling It. But most are only interested in selling things they don\u2019t use anymore or buying cheap stuff.\nThe process is quite simple, a client creates an account (choosing one of the possible account types, each account type follows specific rules and legislations for different types of products and countries). One client can have only one account.\n\nAfter account creation clients need to deposit money to buy\/sell products, as the website itself works as a broker and guarantees that both clients will be satisfied.\n\nInternally the company keeps information of every product bought and sold splitting them into categories and socioeconomic factors. This data is then sold to third parties following data protection legislations (no personal information is disclosed). As a rule of thumb, the company sells the data by roughly 1% of the total clients have bought. (e.g. a client that buys USD 100.00 worth of products will generate USD 1.00 to the company ).\n\nAs the information contained on these tables can reach terabytes, summary tables were created in order to help data analysts and managers to take decisions regarding marketing strategies and resources allocation. The most used tables are:\n* client: Basic anonymized information about clients and client\u2019s account.\n* transactions: Summary of transactions amounts of each account aggregated daily.\n* campaigns: High level description of past marketing campaigns, dates and budget.\n\n\n### Goal\n\nThe management wants to set up marketing strategies for the next fiscal year based on the summary tables. Your job is to analyse the performance of past campaigns, coupons, profit by countries, etc. and make a report showing information to support your insights.","f24c0f63":"## Total profits by country on log scale (major profit comes from Indonesia)","9c8f6198":"## Campaigns and profits on timeline"}}