{"cell_type":{"02462da7":"code","dfda5889":"code","0839add1":"code","a7e19b0a":"code","f27ecc67":"code","d2de2c91":"code","a590a122":"code","b476b34a":"code","60099258":"code","deb71006":"code","0af09b37":"code","064aaf75":"code","a241499c":"code","dfc32164":"code","bd297c8d":"code","ea745042":"code","90ce2762":"code","3173dc37":"code","f3fceaef":"code","e099108d":"code","430cbdc4":"code","2398fae8":"code","f5ba0c83":"markdown","515ef072":"markdown","ac4ba639":"markdown","18e77eaa":"markdown","287ad416":"markdown","2f115d11":"markdown","1965d0fa":"markdown","ddb36cb0":"markdown","096e5a80":"markdown","072291bf":"markdown","1c397733":"markdown","e24fce98":"markdown"},"source":{"02462da7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dfda5889":"df_chainlevel = pd.read_csv(\"..\/input\/nft-dataset-from-defillama\/nft_chainlevel.csv\")\ndf_collections = pd.read_csv(\"..\/input\/nft-dataset-from-defillama\/nft_collections.csv\")\ndf_dailyvolume = pd.read_csv(\"..\/input\/nft-dataset-from-defillama\/nft_dailyvolume.csv\")","0839add1":"df_chainlevel","a7e19b0a":"from matplotlib.pyplot import figure\nfig,axis = plt.subplots(1,2, figsize=(14,4))\n\n\nsns.barplot(data=df_chainlevel.sort_values(by=[\"collections\"],ascending=False), y = \"displayName\", x =\"collections\",ax=axis[0])\nsns.barplot(data=df_chainlevel.sort_values(by=[\"totalVolumeUSD\"], ascending=False), y = \"displayName\", x =\"totalVolumeUSD\", ax=axis[1])","f27ecc67":"fig,axis = plt.subplots(1,2, figsize=(19,4))\nsns.barplot(data=df_chainlevel.sort_values(by=[\"collections\"],ascending=False), y = \"displayName\", x =\"collections\",ax=axis[0]).set_xscale(\"log\")\nsns.barplot(data=df_chainlevel.sort_values(by=[\"totalVolumeUSD\"], ascending=False), y = \"displayName\", x =\"totalVolumeUSD\", ax=axis[1]).set_xscale(\"log\")","d2de2c91":"df_chainlevel[\"ratio\"] = df_chainlevel[\"totalVolumeUSD\"]\/df_chainlevel[\"collections\"]\nsns.barplot(data=df_chainlevel.sort_values(by=[\"ratio\"],ascending=False), y = \"displayName\", x =\"ratio\")","a590a122":"df_collections","b476b34a":"fig,axis = plt.subplots(1,3, figsize=(20,4))\nsns.histplot(data=df_collections[\"owners\"] ,ax=axis[0]).set_yscale(\"log\")\nsns.histplot(data=df_collections[\"totalVolume\"],ax=axis[1]).set_yscale(\"log\")\nsns.histplot(data=df_collections[\"floor\"],ax=axis[2]).set_yscale(\"log\")","60099258":"top_dailyVolumeUSD = df_collections.sort_values(by=[\"dailyVolumeUSD\"],ascending=False).head(5)\ntop_totalVolumeUSD = df_collections.sort_values(by=[\"totalVolumeUSD\"],ascending=False).head(5)\ntop_floorUSD = df_collections.sort_values(by=[\"floorUSD\"],ascending=False).head(5)\ntop_owners = df_collections.sort_values(by=[\"owners\"],ascending=False).head(5)","deb71006":"import urllib\nimport math\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\ndef get_logo(url):\n    #f = urllib.request.urlopen(url)\n    response = requests.get(url)\n    with Image.open(BytesIO(response.content)) as im :\n        f = im\n        #im = plt.imread(f, format=\"jpeg\")\n        f=f.resize((100,100))\n        return f\n\ndef offset_image(coord, url, ax, value, offset_factor):\n    img = get_logo(url)\n    im = OffsetImage(img, zoom=0.4)\n    im.image.axes = ax\n\n    ab = AnnotationBbox(im, (0,coord),  xybox=(offset_factor*value, 0.), frameon=False,\n                        xycoords='data',  boxcoords=\"offset points\", pad=0)\n\n    ax.add_artist(ab)","0af09b37":"fig, ax = plt.subplots(figsize=(13,6))\nfrom matplotlib.offsetbox import OffsetImage,AnnotationBbox\n\n\nsns.barplot(data=top_dailyVolumeUSD, y =\"name\",x=\"dailyVolumeUSD\")\n\n\nfor (i, [url, volume]) in enumerate(top_dailyVolumeUSD.loc[:,[\"logo\",\"dailyVolumeUSD\"]].values.tolist()):\n    offset_image(i, url, ax,volume,0.00003)","064aaf75":"fig, ax = plt.subplots(figsize=(13,6))\nfrom matplotlib.offsetbox import OffsetImage,AnnotationBbox\n\n\nsns.barplot(data=top_totalVolumeUSD, y =\"name\",x=\"totalVolumeUSD\")\n\nfor (i, [url, volume]) in enumerate(top_totalVolumeUSD.loc[:,[\"logo\",\"totalVolumeUSD\"]].values.tolist()):\n    offset_image(i, url, ax,volume,0.00000012)","a241499c":"fig, ax = plt.subplots(figsize=(13,6))\nfrom matplotlib.offsetbox import OffsetImage,AnnotationBbox\n\n\nsns.barplot(data=top_floorUSD, y =\"name\",x=\"floorUSD\")\n\n\nfor (i, [url, volume]) in enumerate(top_floorUSD.loc[:,[\"logo\",\"floorUSD\"]].values.tolist()):\n    offset_image(i, url, ax,volume,0.0006)","dfc32164":"fig, ax = plt.subplots(figsize=(13,6))\nfrom matplotlib.offsetbox import OffsetImage,AnnotationBbox\n\n\nsns.barplot(data=top_owners, y =\"name\",x=\"owners\")\n\n\nfor (i, [url, volume]) in enumerate(top_owners.loc[:,[\"logo\",\"owners\"]].values.tolist()):\n    offset_image(i, url, ax,volume,0.0014)","bd297c8d":"sns.heatmap(df_collections.corr())","ea745042":"df_dailyvolume[\"year\"] = df_dailyvolume[\"Date\"].str.split(\"-\").str[0]\ndf_dailyvolume[\"month\"] = df_dailyvolume[\"Date\"].str.split(\"-\").str[1]\ndf_dailyvolume[\"dd\"] = df_dailyvolume[\"Date\"].str.split(\"-\").str[2]","90ce2762":"df_dailyvolume.head()","3173dc37":"df_yearlyvolume = df_dailyvolume.groupby(by=[\"year\"]).sum(\"NFTMarket_DailyVolumeUSD\").reset_index()\ndf_monthlyvolume = df_dailyvolume.groupby(by=[\"year\",\"month\"]).sum(\"NFTMarket_DailyVolumeUSD\").reset_index()\ndf_monthlyvolume[\"Year-Month\"] = df_monthlyvolume[\"year\"].astype(str) +\"-\"+ df_monthlyvolume[\"month\"].astype(str);","f3fceaef":"df_monthlyvolume.head()","e099108d":"sns.barplot(data=df_yearlyvolume.iloc[:-1,:], x=\"year\", y=\"NFTMarket_DailyVolumeUSD\")","430cbdc4":"sns.barplot(data=df_yearlyvolume.iloc[:-1,:], x=\"year\", y=\"NFTMarket_DailyVolumeUSD\").set_yscale(\"log\")","2398fae8":"figure(figsize=(14, 6))\nplt.xticks(rotation=90)\nsns.lineplot(data=df_monthlyvolume.iloc[:-1,:], x=\"Year-Month\", y=\"NFTMarket_DailyVolumeUSD\")","f5ba0c83":"## Distribution plots of totalVolume , number of owners and floor price","515ef072":"## NFT collections with highest floor price","ac4ba639":"## Top chains w.r.t totalvolume\/collections ratio","18e77eaa":"## NFT collections with most number of owners","287ad416":"## Top chains w.r.t number of collections and total volume","2f115d11":"## NFT market volume through years (w.r.t months)","1965d0fa":"### logscaled plot","ddb36cb0":"### Log scaled plot","096e5a80":"## NFT market volume through years ","072291bf":"## Top selling NFT collections w.r.t total Volume USD","1c397733":"## Top selling NFT collections w.r.t dailyVolume USD","e24fce98":"## To be continued"}}