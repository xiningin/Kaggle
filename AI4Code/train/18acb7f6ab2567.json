{"cell_type":{"5b28183f":"code","2ff4a0f5":"code","d1807fc4":"code","e1e24a19":"code","6a29a509":"code","c9c105f5":"code","aae74a76":"code","ee0813e4":"code","74c63e20":"code","401c3803":"code","a9d5a347":"code","a4c8dbc6":"code","674abb32":"code","a188048d":"code","77be5463":"markdown","12804c62":"markdown","6c4f6bad":"markdown","bd997c6f":"markdown","8c2a8981":"markdown","188de1e4":"markdown","0f459279":"markdown"},"source":{"5b28183f":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.model_selection import cross_val_score,cross_val_predict,cross_validate\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score,accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\n\nimport seaborn as sns \nsns.set_theme(style=\"darkgrid\")\n\nfrom imblearn.over_sampling import SMOTE\nfrom lightgbm import LGBMClassifier","2ff4a0f5":"def buildModel(model,x_train,x_val,y_train,y_val):\n    model.fit(x_train,y_train)\n    pred = model.predict(x_val)\n    \n    accuracy = accuracy_score(y_val,pred)\n    precision = precision_score(y_val,pred)\n    recall = recall_score(y_val,pred)\n    f1 = f1_score(y_val,pred)\n    roc_score = roc_auc_score(y_val,pred,average='macro')\n    print('accuracy : {0:.2f}, precision : {1:.2f}, recall : {2:.2f}'.format(accuracy,precision,recall))\n    print('f1-score : {0:.2f}, auc : {1:.2f}'.format(f1,roc_score,recall))","d1807fc4":"TARGET = \"Class\"\nSEED = 2021\nVAL_SET_SIZE = 0.25\n\nN_ESTIMATORS = 1000\nNUM_LEAVES = 64 ","e1e24a19":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf.head()","6a29a509":"def getLabelCount(df,target):\n    return sorted([( labelValue,len(df.loc[df[target] == labelValue]) ) for labelValue in df[target].unique()])\n\nlabelCount = getLabelCount(df,TARGET)\nlabelCount","c9c105f5":"sns.countplot(y=TARGET, \n                   data=df,\n                   facecolor=(0, 0, 0, 0),\n                   linewidth=5,\n                   edgecolor=sns.color_palette(\"dark\", len(labelCount)))","aae74a76":"X = df.drop([TARGET],axis = 1)\ny = df[TARGET]","ee0813e4":"X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=VAL_SET_SIZE,random_state=SEED)","74c63e20":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","401c3803":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = False,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","a9d5a347":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=False)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","a4c8dbc6":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,is_unbalance = True,boost_from_average=True)\nbuildModel(lgb,X_train,X_val,y_train,y_val)","674abb32":"smote = SMOTE(random_state=SEED)\nX_train_over,y_train_over = smote.fit_resample(X_train,y_train)\nprint('before SMOTE : ', X_train.shape, y_train.shape)\nprint('after SMOTE: ', X_train_over.shape, y_train_over.shape)\nprint('after SMOTE values: \\n', pd.Series(y_train_over).value_counts())","a188048d":"lgb = LGBMClassifier(n_estimators=N_ESTIMATORS,num_leaves=NUM_LEAVES,n_jobs=-1,boost_from_average=False)\nbuildModel(lgb,X_train_over,X_val,y_train_over,y_val)","77be5463":"# lgbm + is_unbalance = True\nWhen you set Is_unbalace: True, \nthe algorithm will try to Automatically balance the weight of the dominated label (with the pos\/neg fraction in train set).","12804c62":"# split data","6c4f6bad":"# use oversampling data as training data  => to increase auc ","bd997c6f":"# label over sampling : SMOTE","8c2a8981":"# load","188de1e4":"# check label count","0f459279":"# lgbm + is_unbalance = False"}}