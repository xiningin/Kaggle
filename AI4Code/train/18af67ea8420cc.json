{"cell_type":{"c0aaeb3d":"code","c0148021":"code","30816e32":"code","ddeb4df9":"code","df047217":"code","b72aeb06":"code","95faa9e1":"code","2629eb3b":"code","3f5d246f":"code","0b9b99c5":"code","e5def94c":"code","e5b5811e":"code","d8f4aa58":"markdown","4f51e055":"markdown","81881f7a":"markdown","4342ca30":"markdown","973de20b":"markdown","7133f07a":"markdown"},"source":{"c0aaeb3d":"from google.cloud import bigquery\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import kde","c0148021":"# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"chicago_crime\" dataset\ndataset_ref = client.dataset(\"chicago_crime\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\ntable_list = list(client.list_tables(dataset))\nfor table in table_list:\n    print(table.table_id)","30816e32":"# table reference\ntable_ref = dataset_ref.table(\"crime\")\n\n# fetch the table\ntable = client.get_table(table_ref)\ntable.schema","ddeb4df9":"# Preview the first five lines of the \"international_education\" table\nclient.list_rows(table, max_results=5).to_dataframe()","df047217":"crime_overview_query = \"\"\"\n                select primary_type, count(*) as frequency\n                from  `bigquery-public-data.chicago_crime.crime`\n                group by primary_type\n                order by frequency desc\n            \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncrime_overview_query_job = client.query(crime_overview_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\ncrime_overview_results = crime_overview_query_job.to_dataframe()\n\n# View top few rows of results\nprint(crime_overview_results.head(5))","b72aeb06":"crime_year_query = \"\"\"\n                    select year, count(*) as frequency\n                    from  `bigquery-public-data.chicago_crime.crime`\n                    group by year\n                    order by year\n                    \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\ncrime_year_query_job = client.query(crime_year_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\ncrime_year_results = crime_year_query_job.to_dataframe()","95faa9e1":"axs = crime_year_results.plot('year', 'frequency')\naxs.grid()\naxs.set_xlim([2001, 2021])\naxs.set_xticks(range(2002, 2021, 3))\naxs.set_yticks(range(10**5, int(5.5*10**5), 5*10**4))\naxs.set_yticklabels(np.linspace(1, 5, 9))\naxs.set_ylim([10**5, 5*10**5])\naxs.set_ylabel('Number of crimes in 100,000')","2629eb3b":"def crime_and_location(client, topic, year):\n    query = '''\n            select latitude, longitude\n            from `bigquery-public-data.chicago_crime.crime`\n            where primary_type like @topic and latitude is not Null and longitude is not Null and year = @year\n            '''\n    \n    query_params = [bigquery.ScalarQueryParameter(\"topic\", \"STRING\", topic), bigquery.ScalarQueryParameter(\"year\", \"INTEGER\", year)]\n    job_config = bigquery.QueryJobConfig(query_parameters=query_params, maximum_bytes_billed=10**10)      \n    query_job = client.query(query, job_config=job_config)\n   \n    return query_job.to_dataframe()","3f5d246f":"def crime_type_and_time(client, topic):\n    query = '''\n        select year, count(1) as Count\n        from `bigquery-public-data.chicago_crime.crime`\n        where primary_type like @topic and year is not Null\n        group by year\n    '''\n    query_params = [bigquery.ScalarQueryParameter(\"topic\", \"STRING\", topic)]\n    job_config = bigquery.QueryJobConfig(query_parameters=query_params, maximum_bytes_billed=10**10)      \n    query_job = client.query(query, job_config=job_config)\n   \n    return query_job.to_dataframe()","0b9b99c5":"types = [\"THEFT\",  \"BATTERY\", \"CRIMINAL DAMAGE\",  \"NARCOTICS\", \"ASSAULT\"]\nyears = [2001, 2020]\nc = ['b', 'r', 'm', 'g', 'c']\nnbins=30\n\nfig, axs = plt.subplots(3, 5, figsize=(34, 18))\n\nfor id_typ, typ in enumerate(types):\n    time = crime_type_and_time(client, typ)\n    axs[-1, id_typ].bar(time['year'], time['Count']\/10000)\n    axs[-1, id_typ].set_xlabel('year')\n    axs[-1, id_typ].set_ylabel('number of crimes per 10.000')\n    axs[-1, id_typ].set_title(typ)\n    axs[-1, id_typ].grid()\n    axs[-1, id_typ].set_xlim([2001, 2021])\n    axs[-1, id_typ].set_xticks(range(2002, 2021, 3))\n    \n    for id_year, year in enumerate(years):\n        table = crime_and_location(client, typ, year)\n        x = table['longitude']\n        y = table['latitude']\n        axs[id_year, id_typ].scatter(np.array(x),np.array(y), color='b', alpha=0.6)\n        pcol = axs[id_year, id_typ].hist2d(x,y, bins=nbins, cmap='Reds', alpha=0.9)\n        \n        clb = fig.colorbar(pcol[3], ax=axs[id_year, id_typ]) \n        clb.set_label('Count',size=10)\n        \n        axs[id_year, id_typ].set_ylabel('Lattitude')\n        axs[id_year, id_typ].set_xlabel('Longitude')\n        axs[id_year, id_typ].set_ylim([y.min(), y.max()])\n        axs[id_year, id_typ].set_xlim([x.min(), x.max()])\n        axs[id_year, id_typ].legend()\n        axs[id_year, id_typ].set_title([typ, year], fontsize=15)\n        ","e5def94c":"def crime_and_time(client, topic):\n    query = '''\n            select extract(hour from date) as hour, count(*) as Count\n            from `bigquery-public-data.chicago_crime.crime`\n            where primary_type like @topic\n            group by hour\n            '''\n    \n    query_params = [bigquery.ScalarQueryParameter(\"topic\", \"STRING\", topic)]\n    job_config = bigquery.QueryJobConfig(query_parameters=query_params, maximum_bytes_billed=10**10)      \n    query_job = client.query(query, job_config=job_config)\n   \n    return query_job.to_dataframe()\n","e5b5811e":"fig, axs = plt.subplots(1, 5, figsize=(30, 6))\n\nfor id_typ, typ in enumerate(types):\n    table = table = crime_and_time(client, typ)\n    axs[id_typ].bar(table['hour'], table['Count']\/np.sum(table['Count'])*100)\n    axs[id_typ].set_ylabel('Frequency in %')\n    axs[id_typ].set_xlabel('Hour of the Day')\n    axs[id_typ].set_title(typ, fontsize=15)\n    axs[id_typ].grid()","d8f4aa58":"To get familiar with the sql syntax and to apply what I learned in the tutorial, I will give a short overview of some interesting aspects of the Chicago Crime dataset.","4f51e055":"Since this dataset contains only one table, we will now take a look at the structure of this table. We can also get a small overview of the data.","81881f7a":"Finally, let's take a look at the time distribution of the crimes. Unfortunately, there seems to be a problem with the time stamp, since only times up to 12 o'clock are displayed and there is no distinction between morning and afternoon.","4342ca30":"Let's create a query to search for the top five most common crimes in chicago.","973de20b":"Furthermore, we will now look at the absolute number of crimes from 2001 to 2021 to find out how the number of crimes has changed over time.","7133f07a":"So next let's look at the distribution of crime within the city and see if anything has changed in the spatial distribution between 2001 and 2021. For this we will use a scatter plot and 2d frequency distribution."}}