{"cell_type":{"92d35b6c":"code","acd0d715":"code","6dd6ac1a":"code","8046240d":"code","a16e4958":"code","ff56e9f1":"code","729aed0f":"code","1667799c":"code","5932987e":"code","fdfe8139":"code","eddc0249":"code","9b68d5d9":"code","98313b25":"code","ca1b22ac":"code","31e45575":"code","16af6437":"code","69cbb14d":"code","d7617595":"code","27dc7679":"code","575f84dd":"code","afb9bd55":"code","9fcdeae4":"code","e9910ece":"code","350cde2a":"code","9f3c1020":"code","4a479ef5":"code","39c1ded9":"code","6b0f579b":"code","c949b31c":"code","bddc511f":"code","1a6b967d":"code","f0764ed7":"code","191b4bca":"code","bd54c270":"code","8ca5e00c":"code","4c740e06":"code","cdc61266":"code","c7d6995b":"code","a29d614d":"code","528f5d4b":"code","352af4fb":"code","ed72afc1":"code","74fa825f":"markdown","9eff0ff0":"markdown","306ee7bd":"markdown","038e1350":"markdown","7ccf07b5":"markdown","197b33c7":"markdown","4486ef46":"markdown","0a408098":"markdown","4ff7630b":"markdown","7653b50a":"markdown","6c18acd3":"markdown","6d86237f":"markdown","c5f03a50":"markdown","325b8066":"markdown","307caf66":"markdown","68192612":"markdown","1cdf380a":"markdown","229e7f6a":"markdown","93748e6e":"markdown","d9df881e":"markdown","b94b9d8a":"markdown","dee91fce":"markdown"},"source":{"92d35b6c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","acd0d715":"train_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain_data.head()","6dd6ac1a":"train_data.describe().T","8046240d":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","a16e4958":"train_data.head().T","ff56e9f1":"## Correlation\nplt.figure(figsize=(30,30))\nsns.heatmap(train_data.corr(),\n           annot=True,\n           cmap='Pastel2_r')","729aed0f":"# Check the missing values\ntrain_data.isna().sum()","1667799c":"# check dtypes\ntrain_data.dtypes","5932987e":"# Create a function that can turn 'object' into 'numerical' and fill missing_values\ndef preprocess_data(df):\n    for label, content in df.items():\n        # Checking the numeric dtypes\n        if pd.api.types.is_numeric_dtype(content):\n            # checking the missing_values\n            if pd.isnull(content).sum():\n                # filling the missing values with median\n                df[label] = content.fillna(content.median())\n        #Checking the non numeric dtypes\n        if not pd.api.types.is_numeric_dtype(content):\n            # convert object dtype to int\n            df[label] = pd.Categorical(content).codes+1\n     #return data       \n    return df","fdfe8139":"df = preprocess_data(df=train_data)\ndf.head()","eddc0249":"# Check again the missing values \ndf.isna().sum()","9b68d5d9":"# Check again the dtypes\ndf.dtypes","98313b25":"df.columns","ca1b22ac":"plt.scatter(df.YearBuilt, df.SalePrice, c = \"blue\")\nplt.xlabel(\"YearBuilt\")\nplt.ylabel(\"SalePrice\")\nplt.show()","31e45575":"plt.bar( df.YrSold, df.SalePrice,  color = \"lightcoral\")\nplt.xlabel(\"YearSold\")\nplt.ylabel(\"SalePrice\")\nplt.show()","16af6437":"plt.scatter(df.GrLivArea, df.SalePrice, c='lightgreen', marker='*')\nplt.xlabel('GrLivArea')\nplt.ylabel('SalePrice')\nplt.show()","69cbb14d":"plt.scatter(df.LotArea, df.SalePrice, c = \"red\", marker =\"^\")\nplt.xlabel(\"LotArea\")\nplt.ylabel(\"SalePrice\")\nplt.show()","d7617595":"plt.scatter(df.LotFrontage, df.SalePrice, c = \"lightblue\", marker =\"+\")\nplt.xlabel(\"LotFrontage\")\nplt.ylabel(\"SalePrice\")\nplt.show()","27dc7679":"labels = 'Average', 'Above Average', 'Good', 'Very Good', 'Below Average','Excellent', 'Fair', 'Very Excellent', 'Poor', 'Very Poor' \nexplode = (0, 0.0, 0.0, 0.1, 0.1, 0.1, 0.2, 0.3, 0.5, 0.7)\n\nNUM_COLORS = len(explode)\n\nfig1, ax1 = plt.subplots(figsize=(10, 10))\ncolors = ['lightskyblue', 'red', 'blue', 'green', 'gold', 'black', 'chocolate', 'brown', 'pink', 'maroon']\nax1.pie(df['OverallQual'].value_counts(), explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=30, colors=colors)\n#Theme\nax1.axis('equal')\nplt.show()","575f84dd":"fig = sns.barplot(x = 'OverallQual',y = 'SalePrice', data = df)\nfig.set_xticklabels(labels=['Very Poor', 'Poor', 'Fair', 'Below Average', 'Average', 'Above Average', 'Good', 'Very Good', 'Excellent', 'Very Excellent'], rotation=90);","afb9bd55":"# Split the dataset\nX = df.drop('SalePrice', axis=1)\ny = df['SalePrice']\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\nlen(X_train), len(X_val), len(y_train), len(y_val)","9fcdeae4":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nnp.random.seed(42)\n\nrg = RandomForestRegressor()\nrg.fit(X_train, y_train)\n\ny_preds = rg.predict(X_val)\n\nprint(f\"Score : {rg.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","e9910ece":"from sklearn.ensemble import GradientBoostingRegressor\n\nnp.random.seed(42)\nrg2 = GradientBoostingRegressor()\nrg2.fit(X_train, y_train)\ny_preds = rg2.predict(X_val)\n\nprint(f\"Score : {rg2.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg2, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","350cde2a":"from sklearn.ensemble import AdaBoostRegressor\n\nnp.random.seed(42)\nrg3 = AdaBoostRegressor()\nrg3.fit(X_train, y_train)\ny_preds = rg3.predict(X_val)\n\nprint(f\"Score : {rg3.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg3, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","9f3c1020":"from sklearn.linear_model import Lasso\n\nnp.random.seed(42)\nrg4 = Lasso()\nrg4.fit(X_train, y_train)\ny_preds = rg4.predict(X_val)\n\nprint(f\"Score : {rg4.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg4, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","4a479ef5":"from sklearn.linear_model import ElasticNet\n\nnp.random.seed(42)\nrg5 = ElasticNet()\nrg5.fit(X_train, y_train)\ny_preds = rg5.predict(X_val)\n\nprint(f\"Score : {rg5.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg5, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","39c1ded9":"from sklearn.linear_model import Ridge\n\nnp.random.seed(42)\nrg6 = Ridge()\nrg6.fit(X_train, y_train)\ny_preds = rg6.predict(X_val)\n\nprint(f\"Score : {rg6.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg6, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","6b0f579b":"from xgboost import XGBRegressor\n\nnp.random.seed(42)\nrg7 = XGBRegressor()\nrg7.fit(X_train, y_train)\ny_preds = rg7.predict(X_val)\n\nprint(f\"Score : {rg7.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg7, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","c949b31c":"from lightgbm import LGBMRegressor\n\nnp.random.seed(42)\nrg8 = LGBMRegressor()\nrg8.fit(X_train, y_train)\ny_preds = rg8.predict(X_val)\n\nprint(f\"Score : {rg8.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg8, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","bddc511f":"from sklearn.tree import DecisionTreeRegressor\n\nnp.random.seed(42)\nrg9 = DecisionTreeRegressor()\nrg9.fit(X_train, y_train)\ny_preds = rg9.predict(X_val)\n\nprint(f\"Score : {rg9.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg9, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","1a6b967d":"from catboost import CatBoostRegressor\n\nnp.random.seed(42)\nrg10 = CatBoostRegressor()\nrg10.fit(X_train, y_train)\ny_preds = rg10.predict(X_val)\n\nprint(f\"Score : {rg10.score(X_val, y_val)}\")\nprint(f\"Cross_val_score : {np.mean(cross_val_score(rg10, X, y, cv=5))}\")\nprint(f\"Root_mean_squared_error {np.sqrt(mean_squared_error(y_val, y_preds))}\")","f0764ed7":"model = XGBRegressor()\nnp.random.seed(42)\nmodel.fit(X_train, y_train)\ny_preds = model.predict(X_val)\ny_preds","191b4bca":"test_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_data.head()","bd54c270":"test_data = preprocess_data(df=test_data)\ntest_data.head()","8ca5e00c":"# check again\ntest_data.isna().sum()","4c740e06":"test_data.dtypes","cdc61266":"model = XGBRegressor()\nnp.random.seed(42)\nmodel.fit(X_train, y_train)\npredictions = model.predict(test_data)\nmodel.score(X_val, y_val)","c7d6995b":"predictions","a29d614d":"# make a dataframe which we are going to submit\nresult = pd.DataFrame()\nresult['Id'] = test_data['Id']\nresult['SalePrice'] = predictions","528f5d4b":"result.head()","352af4fb":"sample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nsample.head()","ed72afc1":"result.to_csv('result.csv', index=False)","74fa825f":"### CatBoostRegressor","9eff0ff0":"### 9. Make Prediction On Test Dataset","306ee7bd":"## 2. Import Train Data","038e1350":"### 10.Saving The File","7ccf07b5":"**-----------------------------------------------------------------------------------------------------------------------**","197b33c7":"## 3. Clean Dataset","4486ef46":"## 4. EDA","0a408098":"### DecisionTreeRegressor","4ff7630b":"## 5. Modelling","7653b50a":"### 6. Make Prediction \n\nfrom model which performed the best","6c18acd3":"### Ridge","6d86237f":"### 8.Cleaning The Test Dataset","c5f03a50":"## GradientBoostingRegressor","325b8066":"### AdaBoostRegressor","307caf66":"## XGBoostRegressor","68192612":"### LGBMRegressor","1cdf380a":"### RandomForestRegressor","229e7f6a":"## 1. Problem Definition\n\n**Make House Price Prediction Using Advanced Regression Techniques**","93748e6e":"### ElasticNet","d9df881e":"### LASSO","b94b9d8a":"### 7. Import Test Dataset","dee91fce":"## Overview\n\n### 1.Problem Definition\n### 2.Import Train Data\n### 3.Cleaning The Dataset\n### 4.EDA\n### 5.Modelling\n### 6.Make Predictions\n### 7.Import Test Data\n### 8.Cleaning The Dataset\n### 9.Make Predictions\n### 10.Saving The File."}}