{"cell_type":{"3e880132":"code","d13489e6":"code","2791472c":"code","1a5ea7da":"code","4edadba4":"code","ab7c1c43":"code","fd496de9":"code","b6e83861":"code","2bc75d91":"code","6140ff68":"code","bf3df62b":"code","5d31c51b":"code","035196ac":"code","f6aeb666":"code","d34eda49":"code","b462bd26":"code","daa19d61":"code","f4c5d094":"code","1b6a3ec4":"code","f07714d9":"code","63530830":"code","b635d2f2":"code","c674b579":"code","994710f5":"code","6d6ee764":"code","f026b9b4":"code","92f2b370":"code","97970ffa":"code","2168ffd9":"code","7fbfa860":"code","06ad20fa":"code","b4904484":"code","63013ba6":"code","b49b6556":"code","9c684385":"code","571ab231":"code","a16bb3f5":"code","eb8390b2":"code","16705195":"code","ba713d50":"code","2edd84d7":"code","534b19ed":"code","38825004":"code","033a3b72":"code","8c969131":"code","f671c3a2":"code","4b3bdfe9":"markdown","a5ffe939":"markdown","1ed2dbea":"markdown","b5650d9e":"markdown","e307aeef":"markdown","48bd7406":"markdown","05096e4a":"markdown","55b7305e":"markdown","20f104b5":"markdown","d0180275":"markdown"},"source":{"3e880132":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d13489e6":"# importing dataset\ndf = pd.read_csv(\"..\/input\/Pokemon.csv\", index_col = \"#\")\n#print(df.shape)\n#print(df.head(2))\ndf.columns.values\ncolumns = ['Name', 'Type_1', 'Type_2', 'Total', 'HP', 'Attack', 'Defense','Sp_Atk', 'Sp_Def', 'Speed', 'Generation', 'Legendary']\ndf.columns = columns\ndf.head(2)","2791472c":"df.info()","1a5ea7da":"df.describe()","4edadba4":"df.columns.values","ab7c1c43":"# converting legendary column vales into labels {true: 1, false: 0}\ndf.Legendary.replace({True:1,False:0}, inplace = True)\ndf.describe()","fd496de9":"df.head(3)","b6e83861":"# converting categorical values into dummies\ntype_1_dummies = pd.get_dummies(df.Type_1)\ntype_2_dummies = pd.get_dummies(df.Type_2)","2bc75d91":"print(type_1_dummies.shape)\ntype_1_dummies.head(2)","6140ff68":"print(type_2_dummies.shape)\ntype_2_dummies.head(2)","bf3df62b":"types_df = pd.DataFrame(index = df.index)\ntypes_df.shape","5d31c51b":"types = list(type_2_dummies.columns.values)","035196ac":"for t in types:\n    types_df[t] = type_1_dummies[t] + type_2_dummies[t]\n    \ntypes_df.head(3)","f6aeb666":"temporary_df = pd.concat([df, types_df], sort = False, axis = 1)\nprint(temporary_df.shape)\ntemporary_df.head(3)","d34eda49":"labels_df  = temporary_df.Legendary\ntemporary_df.drop([\"Name\",\"Type_1\",\"Type_2\",\"Legendary\"], axis = \"columns\", inplace = True)\ntemporary_df.head(3)","b462bd26":"labels_df.shape","daa19d61":"num_df = temporary_df.iloc[:,0:7]\nnum_df.head(3)","f4c5d094":"cat_df = temporary_df.iloc[:,7:]\ncat_df.head(3)","1b6a3ec4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(num_df)\nscaled_df = pd.DataFrame(np.array(scaler.transform(num_df)), columns = [\"Total\",\"HP\",\"Attack\",\"Defense\",\"Sp_Atk\",\"Sp_Def\",\"Speed\"], index = df.index)\nprint(scaled_df.shape)\nscaled_df.head(3)","f07714d9":"cat_df.shape","63530830":"final_df = pd.concat([scaled_df,cat_df], axis = \"columns\")\nfinal_df.head(3)","b635d2f2":"plt.figure(figsize = (20,20))\nsns.heatmap(final_df.corr(), annot=True)","c674b579":"# train \/ test splitting of data\nfrom sklearn.model_selection import train_test_split\nfeature_train, feature_test, label_train, label_test = train_test_split(final_df, labels_df, test_size = 0.2, random_state = 2)\nprint(feature_train.shape, feature_test.shape)\nprint(label_train.shape, label_test.shape)","994710f5":"feature_train.head(3)","6d6ee764":"label_train.head(3)","f026b9b4":"# Bernoulli naive bayes classifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nbnb = BernoulliNB()\nbnb.fit(feature_train, label_train)\npredicted_labels = bnb.predict(feature_test)\nprint(\"Train Score : \", bnb.score(feature_train, label_train))\nprint(\"Test Score : \", bnb.score(feature_test, label_test))\nprint(\"Accuracy : \",accuracy_score(label_test, predicted_labels))","92f2b370":"# Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\n\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, fmt = 'd')\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")\nplt.title(\"Confusion Matrix for Bernoulli Naive Bayes Classifier\")","97970ffa":"# roc auc curve\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\npred_score = bnb.predict_proba(feature_test)[:,1]\nfpr, tpr, thresholds = roc_curve(label_test, pred_score)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_score))\nplt.plot([0,1],[0,1])\nplt.plot(fpr, tpr)\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")\nplt.title(\"ROC-AUC Curve for Bernoulli Naive Bayes Classifier\")\nplt.show()","2168ffd9":"# Gaussian Naive Bayes Classifier\nfrom sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(feature_train, label_train)\npredicted_labels = gnb.predict(feature_test)\nprint(\"Train Score : \", gnb.score(feature_train, label_train))\nprint(\"Test Score : \", gnb.score(feature_test, label_test))\nprint(\"Accuracy : \",accuracy_score(label_test, predicted_labels))","7fbfa860":"# Confusion Matrix for Gaussian Naive Bayes Classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\n\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt = \"d\", annot=True)\nplt.ylabel(\"Actual Values\")\nplt.xlabel(\"Predicted Values\")\nplt.title(\"Confusion Matrix for Gaussian Naive Bayes Classifier\")","06ad20fa":"# roc-auc curve for gaussian naive bayes classifier\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\npred_prob = gnb.predict_proba(feature_test)[:,1]\nfpr, tpr, thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr, tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","b4904484":"# CART Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\ncart_model = DecisionTreeClassifier(criterion = \"gini\", random_state = 2)\ncart_model.fit(feature_train, label_train)\npredicted_labels = cart_model.predict(feature_test)\nprint(\"Train Score : \", cart_model.score(feature_train, label_train))\nprint(\"Test Score : \", cart_model.score(feature_test, label_test))\nprint(\"Accuracy : \", accuracy_score(label_test, predicted_labels))","63013ba6":"# confusion matrix for decision tree cart classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt = \"d\", annot = True)\nplt.xlabel(\"Predicated values\")\nplt.ylabel(\"Actual values\")","b49b6556":"# roc-auc curve for decision tree cart classifier\nfrom sklearn.metrics import roc_auc_score \nfrom sklearn.metrics import roc_curve\npred_prob = cart_model.predict_proba(feature_test)[:,1]\nfpr,tpr, thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel('fpr')\nplt.ylabel(\"tpr\")","9c684385":"# C50 Decision Tree Classifier\nfrom sklearn.tree import DecisionTreeClassifier\nc5 = DecisionTreeClassifier(criterion=\"entropy\", random_state = 2)\nc5.fit(feature_train, label_train)\npredicted_labels = c5.predict(feature_test)\nprint(\"Train Score : \", c5.score(feature_train, label_train))\nprint(\"Test Score : \", c5.score(feature_test, label_test))\nprint(\"Accuracy : \", accuracy_score(label_test, predicted_labels))","571ab231":"# confusion matrix for decision tree c50 classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt= \"d\", annot = True)\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")","a16bb3f5":"# roc auc curve for decision tree c50 classifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\npred_prob = c5.predict_proba(feature_test)[:,1]\nfpr,tpr,thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","eb8390b2":"# K Nearest Neighbour Classsifier\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5, algorithm=\"auto\",n_jobs=-1)\nknn.fit(feature_train, label_train)\npredicted_labels = knn.predict(feature_test)\nprint(\"Train Score : \", knn.score(feature_train, label_train))\nprint(\"Test Score : \", knn.score(feature_test, label_test))\nprint(\"Accuracy : \", accuracy_score(label_test, predicted_labels))","16705195":"# confusion matrix for knn classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt= \"d\", annot = True)\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")","ba713d50":"# roc auc curve for knn classifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\npred_prob = knn.predict_proba(feature_test)[:,1]\nfpr,tpr,thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","2edd84d7":"# Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_jobs=-1, n_estimators=300, random_state=2, max_depth=3)\nrf.fit(feature_train, label_train)\npredicted_labels = rf.predict(feature_test)\nprint(\"Train Score : \", rf.score(feature_train, label_train))\nprint(\"Test Score : \", rf.score(feature_test, label_test))\nprint(\"Accuracy : \", accuracy_score(label_test, predicted_labels))","534b19ed":"# confusion matrix for random forest classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt= \"d\", annot = True)\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")","38825004":"# roc auc curve for random forest classifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\npred_prob = rf.predict_proba(feature_test)[:,1]\nfpr,tpr,thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","033a3b72":"# Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\ngbm = GradientBoostingClassifier(n_estimators=400, learning_rate=0.01, subsample=0.4, max_depth=3, random_state=1)\ngbm.fit(feature_train, label_train)\npredicted_labels = gbm.predict(feature_test)\nprint(\"Train Score : \", gbm.score(feature_train, label_train))\nprint(\"Test Score : \", gbm.score(feature_test, label_test))\nprint(\"Accuracy : \", accuracy_score(label_test, predicted_labels))","8c969131":"# confusion matrix for Gradient Boost classifier\nfrom sklearn.metrics import confusion_matrix\ncnf_matrix = confusion_matrix(label_test, predicted_labels)\nsns.heatmap(pd.DataFrame(cnf_matrix), fmt= \"d\", annot = True)\nplt.xlabel(\"Predicted Values\")\nplt.ylabel(\"Actual Values\")","f671c3a2":"# roc auc curve for gradient boost classifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\npred_prob = gbm.predict_proba(feature_test)[:,1]\nfpr,tpr,thresholds = roc_curve(label_test, pred_prob)\nprint(\"ROC-AUC Score : \", roc_auc_score(label_test, pred_prob))\nplt.plot(fpr,tpr)\nplt.plot([0,1],[0,1])\nplt.xlabel(\"fpr\")\nplt.ylabel(\"tpr\")","4b3bdfe9":"#### K Nearest Neighbour Classifier","a5ffe939":"#### Random Forest Classifier","1ed2dbea":"## Modelling and Evaluation","b5650d9e":"#### Decision Tree C50 Classifier","e307aeef":"#### Bernoulli Naive Bayes Classifier","48bd7406":"#### Gradient Boosting Classifier","05096e4a":"# Legendary Classification in Pokemon Dataset","55b7305e":"#### kaggle Link : https:\/\/www.kaggle.com\/abcsds\/pokemon","20f104b5":"#### Gaussian Naive Bayes Classifier","d0180275":"#### Decision Tree CART Classifier"}}