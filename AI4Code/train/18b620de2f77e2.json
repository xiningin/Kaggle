{"cell_type":{"ec28369b":"code","01426184":"code","f3168063":"code","143f1458":"code","e36486ad":"code","093172b2":"code","e312905e":"code","efd113b3":"code","44d209a8":"code","2c7ed714":"code","349f1e36":"code","52488e07":"code","4aac8c28":"code","f9113528":"code","415b3c22":"code","f1f34b46":"code","fcf73c51":"code","aac5b2c7":"code","4df07fb2":"code","154edfad":"code","7e7f745f":"code","bc752d8e":"code","7ba60a25":"code","a9b2f0d1":"code","facbadcc":"code","90274311":"code","cb672665":"code","f80d5ef8":"code","8b732ca7":"code","a7bee609":"code","18b6144f":"code","e2867ae1":"code","709a5af6":"code","e3bc3e0a":"code","528393ae":"code","c64ed2de":"code","ad4f31dd":"code","52fd209d":"code","8ec0ad21":"code","d5ab1604":"code","47bb5839":"code","23fb04c3":"code","c6a343c9":"code","2c9a8747":"code","25114e10":"code","f63e6af1":"code","29817c96":"code","e6ec8893":"markdown","2f271c72":"markdown","c3afaf94":"markdown","c9ab8866":"markdown","dc654c73":"markdown","aea466dd":"markdown","dc0fcd53":"markdown","bb7a8956":"markdown","c786b5c6":"markdown","9ff82b26":"markdown","644303f9":"markdown"},"source":{"ec28369b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\n\n# Any results you write to the current directory are saved as output.","01426184":"#Read data\ndata = pd.read_csv('..\/input\/train.csv')","f3168063":"data.columns","143f1458":"data.columns.size","e36486ad":"data.shape","093172b2":"data.columns = [column.lower() for column in data.columns]\ndata.columns","e312905e":"#I could not understand what some columns name represents so I changed them.\ndata = data.rename(\n    columns = {\n        'passengerId': 'id',\n        'pclass': 'ticketClass',\n        'sibsp': 'sisBroSpo',\n        'parch': 'parentChild'\n    }\n)","efd113b3":"#More understandable.\ndata.columns","44d209a8":"data.dtypes","2c7ed714":"data.info()","349f1e36":"data.isnull().sum()","52488e07":"data.describe()","4aac8c28":"#From output of describe method above it looks like;\n#More people were travelling with ticketClass 3 then other groups\n#Most people have no sisBroSpo(sibsb) aboard\n#Most people have no parentChild(parch) aboard\n#sisBroSpo and parentChild could be connected?\ndata.plot()\nplt.show()","f9113528":"data.head()","415b3c22":"data.tail()","f1f34b46":"data.boxplot(column = ['age', 'sisBroSpo', 'parentChild'])\nplt.show()","fcf73c51":"data.plot(kind = 'scatter', x = 'sisBroSpo', y = 'parentChild')\nplt.show()","aac5b2c7":"#Ticket class number's\nprint(data.ticketClass.unique())\nprint(data.ticketClass.value_counts())","4df07fb2":"pd.melt(\n    frame = data, \n    id_vars = 'age', \n    value_vars = ['sisBroSpo', 'parentChild']\n).head(10)","154edfad":"pd.melt(\n    frame = data, \n    id_vars = 'age',\n    value_vars = ['sisBroSpo', 'parentChild']\n).tail(10)","7e7f745f":"filtered = data[(data.age >= 1) & (data.survived == 1)]\nfiltered.loc[filtered.age == filtered.age.max()]","bc752d8e":"filtered = data[(data.age >= 1) & (data.survived == 0)]\nfiltered.loc[filtered.age == filtered.age.max()]","7ba60a25":"filtered = data[(data.age <= 1) & (data.survived == 1)]\nfiltered.loc[filtered.age == filtered.age.min()]","a9b2f0d1":"filtered = data[(data.age <= 1) & (data.survived == 0)]\nfiltered.loc[filtered.age == filtered.age.min()]","facbadcc":"#data.loc[:,['sisBroSpo', 'parentChild']].plot()\ndata.loc[:,['sisBroSpo', 'parentChild']].plot(subplots = True)\nplt.legend(loc = 'upper right')\nplt.show()","90274311":"data[data.age > 50].plot()\nplt.show()","cb672665":"data[data.age > 50].plot(subplots = True)\nplt.show()","f80d5ef8":"data[data.age > 50].plot(\n    kind = 'hist', \n    x = 'age', \n    y = 'parentChild',\n    color = 'yellow'\n)\nplt.show()","8b732ca7":"data[data.age > 50].plot(\n    kind = 'hist', \n    x = 'age', \n    y = 'sisBroSpo',\n    color = 'yellow'\n)\nplt.show()","a7bee609":"data[data.age < 50].plot()\nplt.show()","18b6144f":"data[data.age < 50].plot(subplots = True)\nplt.show()","e2867ae1":"data[data.age > 50].plot(\n    kind = 'hist', \n    x = 'age', \n    y = 'parentChild',\n    color = 'yellow'\n)\nplt.show()","709a5af6":"data[data.age > 50].plot(\n    kind = 'hist', \n    x = 'age', \n    y = 'sisBroSpo',\n    color = 'yellow'\n)\nplt.show()","e3bc3e0a":"data.sort_values('age').age.unique()","528393ae":"keep = ['name', 'age', 'sisBroSpo', 'parentChild', 'survived']\nageAboveFifty = data[data.age > 50].filter(items = keep).head()\nageBelowFifty = data[data.age < 50].filter(items = keep).head()","c64ed2de":"ageAboveFifty = ageAboveFifty.sort_values('age')\nageAboveFifty","ad4f31dd":"ageBelowFifty = ageBelowFifty.sort_values('age')\nageBelowFifty","52fd209d":"ageAboveFifty.where(ageAboveFifty.values != ageBelowFifty.values)","8ec0ad21":"data.describe()","d5ab1604":"#Find percentage of people surviving if they are above 28\nageAbove28 = data[\n    (data.age >= 28) & (data.survived == 1)\n].age.count() \/ data[(data.survived == 1)].age.count()","47bb5839":"#Find percentage of people surviving if they are below 28\nageBelow28 = data[\n    (data.age < 28) & (data.survived == 1)\n].age.count() \/ data[(data.survived == 1)].age.count()","23fb04c3":"ticketOne = data[\n    (data.ticketClass == 1) & (data.survived == 1)\n].ticketClass.count() \/ data[(data.survived == 1)].ticketClass.count()","c6a343c9":"ticketTwo = data[\n    (data.ticketClass == 2) & (data.survived == 1)\n].ticketClass.count() \/ data[(data.survived == 1)].ticketClass.count()","2c9a8747":"ticketThree = data[\n    (data.ticketClass == 3) & (data.survived == 1)\n].ticketClass.count() \/ data[(data.survived == 1)].ticketClass.count()","25114e10":"fareAbove = data[\n    (data.fare >= 14) & (data.survived == 1)\n].fare.count() \/ data[(data.survived == 1)].fare.count()","f63e6af1":"fareBelow = data[\n    (data.fare < 14) & (data.survived == 1)\n].fare.count() \/ data[(data.survived == 1)].fare.count()","29817c96":"pSurvivor = data[(data.survived == 1)].passengerid.count() \/ data.passengerid.count()\npSurvivor","e6ec8893":"Get column names in data","2f271c72":"^ Youngest person who did not survived.","c3afaf94":"^ Youngest person who survived","c9ab8866":"^ Oldest surviver who's age is above 1","dc654c73":"Turn all column names to lower case","aea466dd":"491 people had  ticket class 3, 184 people had 2 and 216 people had 1","dc0fcd53":"People below age 50 features","bb7a8956":"Numeric values inside the data.","c786b5c6":"^ Oldest person to die who's age is above 1","9ff82b26":"People above age 50 features","644303f9":"Get type's in data"}}