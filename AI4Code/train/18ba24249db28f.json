{"cell_type":{"0d9c3b26":"code","168b3ce6":"code","cea2ab4b":"code","1e6c089b":"code","41f7932d":"code","0bd339ec":"code","35990b6f":"code","c4958140":"code","a38bd5be":"code","f8329058":"code","0714ffc8":"code","4ad737c8":"code","69a026d7":"code","1e9e99d9":"code","7c21bc69":"code","32374d6c":"code","65d20acf":"code","04681945":"code","dd2d71e9":"code","ce5f4210":"code","15f51707":"code","c7ca7c38":"code","18f945a2":"code","c95c8d06":"code","d4b1d30e":"code","e9994978":"code","d11012ce":"code","54568499":"code","da5b7d5a":"code","0c19a02a":"code","23c85d1a":"code","3e576884":"code","0f907d20":"code","1b6c9450":"code","9f917bf9":"code","a6bc0965":"code","e864315d":"code","cba604fb":"code","75426ce6":"code","64d30420":"code","40b568ed":"code","b17ade5b":"markdown","ad793945":"markdown","d93f9615":"markdown","535329e7":"markdown","3d5947c8":"markdown","681ce1ba":"markdown","73d7222a":"markdown","03fc0dce":"markdown","a37d4d4d":"markdown","644f3ffe":"markdown","433deb5c":"markdown","933d532d":"markdown","8812b43f":"markdown","bcef4c06":"markdown","714915a1":"markdown","94227063":"markdown","d29b9eab":"markdown","d7f5c2ec":"markdown","bd806d34":"markdown","b06b42aa":"markdown","4dc0f2a7":"markdown","f6c8c702":"markdown","cd9df5f0":"markdown","bd4363cd":"markdown","4da9d423":"markdown"},"source":{"0d9c3b26":"import pandas as pd \n\nfrom itertools import chain\nfrom urllib.parse import urlparse\n\nimport plotly.express as px\nimport plotly.graph_objects as go","168b3ce6":"vaccine_dataset_path = '..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv'\nvaccine_df = pd.read_csv(vaccine_dataset_path)","cea2ab4b":"vaccine_df.head()","1e6c089b":"# exploring the columns\n\nvaccine_df.columns","41f7932d":"# checkong the column type and null values in each column\n\nvaccine_df.info()","0bd339ec":"# changing the data type\n\nvaccine_df['date'] = vaccine_df['date'].astype('datetime64')","35990b6f":"# replacing the Null values with the suitable value\n\nvaccine_df['total_vaccinations'] = vaccine_df['total_vaccinations'].fillna(0)\nvaccine_df['people_vaccinated'] = vaccine_df['people_vaccinated'].fillna(0)\nvaccine_df['people_vaccinated'] = vaccine_df['people_vaccinated'].fillna(0)\nvaccine_df['people_fully_vaccinated'] = vaccine_df['people_fully_vaccinated'].fillna(0)\nvaccine_df['daily_vaccinations_raw'] = vaccine_df['daily_vaccinations_raw'].fillna(0)\nvaccine_df['daily_vaccinations'] = vaccine_df['daily_vaccinations'].fillna(0)\nvaccine_df['total_vaccinations_per_hundred'] = vaccine_df['total_vaccinations_per_hundred'].fillna(0)\nvaccine_df['people_vaccinated_per_hundred'] = vaccine_df['people_vaccinated_per_hundred'].fillna(0)\nvaccine_df['people_vaccinated_per_hundred'] = vaccine_df['people_vaccinated_per_hundred'].fillna(0)\nvaccine_df['people_fully_vaccinated_per_hundred'] = vaccine_df['people_fully_vaccinated_per_hundred'].fillna(0)\nvaccine_df['daily_vaccinations_per_million'] = vaccine_df['daily_vaccinations_per_million'].fillna(0)","c4958140":"# getting the numbers of countries which have started vaccination\n\nlen(set(vaccine_df['country'].unique()))","a38bd5be":"# getting the time-frame in the dataset\n\nprint('The earliest date in the dataset is: ', vaccine_df['date'].min())\nprint('The latest date in the dataset is: ', vaccine_df['date'].max())","f8329058":"# checking the news sources in the dataset\n\n#set(vaccine_df['source_name'].unique())\nprint('Number of sources:', len(vaccine_df['source_name'].unique()))\n","0714ffc8":"# getting the type of vaccines \n\ncountries_vaccine = list(vaccine_df['vaccines'].unique())\nsplitted_list = [vacc for item in countries_vaccine for vacc in item.split(', ')]\nvaccines = set(splitted_list)\n\nprint('Number of vaccines used:', len(vaccines))\nvaccines","4ad737c8":"vaccine_df.describe()","69a026d7":"# chart data\nsources = vaccine_df['source_name'].value_counts()\nsources = vaccine_df['source_name'].sort_values(ascending=False).value_counts()\n\n# chart colors\ncolors = ['lightslategray',] * sources.shape[0]\n\n# Bar Chart\nfig = go.Figure(\n    data=[go.Bar(\n    x = sources.index,\n    y = sources.values,\n    marker_color=colors\n    \n)])\n\n\nfig.update_layout(\n    width=1600,\n    height=800,\n    plot_bgcolor='white',\n    yaxis_title='Count',\n    title={\n        'text': 'Number of Reported Sources',\n        'xanchor': 'center',\n        'x':0.5,\n        'yanchor': 'top'\n})\n\n\nfig.show()\n\n","1e9e99d9":"# chart data\nvaccine_df['source_domain'] = [urlparse(x).netloc for x in vaccine_df['source_website'].values]\nsources = vaccine_df['source_domain'].sort_values(ascending=False).value_counts()\n\n# data color\ncolors = ['lightslategray',] * sources.shape[0]\ncolors[0:2] = ['crimson'] * 3\n\n# Bar Chart\nfig = go.Figure(\n    data=[go.Bar(\n    y = sources.values,\n    x = sources.index,\n    marker_color=colors\n)])\n\nfig.update_layout(\n    width=1600, \n    height=800,\n    plot_bgcolor='white',\n    yaxis_title='Count',\n    title={\n        'text': 'Number of Reported Websites',\n        'xanchor': 'center',\n        'x':0.5,\n        'yanchor': 'top'\n})\n\nfig.show()","7c21bc69":"# chart data\nvaccines_df = pd.Series.to_frame(vaccine_df.groupby(['vaccines'])['daily_vaccinations'].sum().sort_values(ascending=False))\nvaccines_df.reset_index(inplace=True)\n\n# adding breaks to data labels in order to create readable visualization\nvaccines_df['vaccines'] = vaccines_df['vaccines'].str.replace(', ', ',<br>')\n\n# data color\ncolors = ['lightgray',] * vaccines_df.shape[0]\ncolors[0:3] = ['crimson'] * 3\n\n# Treemap Chart\nfig = go.Figure(\n    go.Treemap(\n    labels=vaccines_df['vaccines'].values, \n    parents  = ['']* vaccines_df.shape[0],\n    values=vaccines_df['daily_vaccinations'].values,\n    marker_colors = colors\n))\n\nfig.update_layout(\n    width=1400,\n    height=600,\n    plot_bgcolor='white',\n    font_color=\"white\",\n    font_size=24,\n    title={\n        'text': 'Number of used Vaccines Combination',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 15,\n        'font_color':'black',\n        'yanchor': 'top'\n})\n\nfig.show()","32374d6c":"# calculating vaccines used in each country\n\nvaccine_df[['country', 'vaccines']].drop_duplicates()\nall_vaccines = vaccine_df['vaccines'].str.split(', ')\n\ncountry_vaccines_df = pd.DataFrame({\n    'country' : vaccine_df['country'].values.repeat(all_vaccines.str.len()),\n    'vaccines' : list(chain.from_iterable(all_vaccines.tolist()))\n}).drop_duplicates()\n\ncountry_vaccines_df","65d20acf":"vaccines = country_vaccines_df['vaccines'].unique()\nvaccines_mapping = dict(zip(vaccines, range(len(vaccines))))\ncountry_vaccines_mapping_df = country_vaccines_df.replace({'vaccines': vaccines_mapping})","04681945":"# chart\n\nfig = go.Figure(\n    data=[go.Sankey(\n    node = dict(\n    pad = 15,\n    thickness = 20,\n    line = dict(color = 'red', width = 0.25),\n    label = list(country_vaccines_mapping_df['country']) + list(vaccines),\n    color = \"crimson\"),\n    link = dict(\n    source = list(range(0, country_vaccines_mapping_df.shape[0])), # indices correspond to labels, eg A1, A2, A2, B1, ...\n    target = country_vaccines_mapping_df['vaccines'] + country_vaccines_mapping_df.shape[0],\n    value = [1] * (country_vaccines_mapping_df.shape[0]),\n\n  ))])\n\n\nfig.update_layout(\n    width=1200,\n    height=4000,\n    font_color=\"white\",\n    font_size=14,\n    title={\n    'text': 'Type of Vaccine Used in Each Country',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'}\n\n)\n\nfig.show()","dd2d71e9":"# chart data\ndata = vaccine_df.loc[vaccine_df['people_vaccinated_per_hundred'] > 5].groupby(['country'])['people_vaccinated_per_hundred'].max().sort_values(ascending=False)\n\n# chart color\ncolors = ['lightslategray',] * data.shape[0]\ncolors[0:2] = ['crimson'] * 3\n\n# Bar Chart\nfig = go.Figure(\n    data=[go.Bar(\n    y = data.values,\n    x = data.index,\n    marker_color=colors\n    \n)])\n\nfig.update_layout(\n    width=1600, \n    height=600,\n    plot_bgcolor='white',\n    yaxis_title=\"%\",\n    title={\n        'text': \"% People Vaccinated in Countries\",\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'}\n)\n\nfig.show()\n","ce5f4210":"# chart data\ndata = vaccine_df.loc[vaccine_df['total_vaccinations'] > 100000].groupby(['country'])['total_vaccinations'].max().sort_values(ascending=False)\n\n# chart color\ncolors = ['lightslategray',] * data.shape[0]\ncolors[0:2] = ['crimson'] * 3\n\n# Bar Chart\nfig = go.Figure(\n    data=[go.Bar(\n    y = data.values,\n    x = data.index,\n    marker_color=colors\n)])\n\nfig.update_layout(\n    width=1400, \n    height=600,\n    plot_bgcolor='white',\n    yaxis_title='Number of Vaccination',\n    title={\n        'text': 'Total Number of Vaccinations in Countries',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'\n})\n\nfig.show()","15f51707":"vaccines_count_df = country_vaccines_df.groupby(['vaccines']).count().reset_index().sort_values('country', ascending=False)\nvaccines_count_df","c7ca7c38":"vaccines_count_df['vaccines'] = vaccines_count_df['vaccines'].str.replace('&', '<br> &')\n\n# chart color\ncolors = ['lightgray',] * vaccines_count_df.shape[0]\ncolors[0:3] = ['crimson'] * 3\n\n# Treemap chart\nfig = go.Figure(\n    go.Treemap(\n    labels=vaccines_count_df['vaccines'].values, \n    parents=['']* vaccines_count_df.shape[0],\n    values=vaccines_count_df['country'].values,\n    marker_colors=colors\n))\n\nfig.update_layout(\n    width=1600,\n    height=600,\n    font_color=\"white\",\n    font_size=16,\n    title={\n        'text': 'Comparing Vaccines by Number of Countries Using Them',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'\n})\n\nfig.show()","18f945a2":"country_date_df = pd.Series.to_frame(vaccine_df.groupby(['country'])['date'].min())\ncountry_date_df.reset_index(inplace=True)\ncountry_date_df.rename(columns={'date':'start date'}, inplace = True)\ncountry_date_df['end date'] = vaccine_df.groupby(['country'])['date'].max().values\ncountry_date_df.sort_values('start date', ascending=True, inplace=True)","c95c8d06":"# deviding countries in three groups based on their start date of vaccination\n\ncountry_date_df['status'] = pd.cut(country_date_df['start date'], bins=3, labels=['Early Starters', 'Middle', 'Late Starters'])","d4b1d30e":"# Timeline Chart\n\nfig = px.timeline(\n    country_date_df, \n    x_start='start date',\n    x_end='end date',\n    y='country',\n    color='status',\n    width=1000, \n    height=1200)\n\n\nfig.update_layout(\n    width=1000,\n    height=800,\n\n    title={\n        'text': 'Vaccination Timeline for Countries',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'\n})\n\nfig.update_yaxes(autorange=\"reversed\") \nfig.show()","e9994978":"countries_pop_dataset_path = '..\/input\/countries-of-the-world\/countries of the world.csv'\ncountries_pop = pd.read_csv(countries_pop_dataset_path)","d11012ce":"vaccines_df.columns","54568499":"# dropping the useless columns\n\ncountries_pop = countries_pop[['Country', 'Region', 'Population']]","da5b7d5a":"countries_pop['Country'] = countries_pop['Country'].str.rstrip(' ')","0c19a02a":"# getting the countries which has not started the vaccination\n\nprint(len(set(countries_pop['Country']) - set(vaccine_df['country'])), 'Countries have not started with the vaccination.')","23c85d1a":"# Table\n\nfig = go.Figure(\n    data=[go.Table(\n    header=dict(values=['Country', 'Region', 'Population'],\n    line_color='darkslategray',\n    fill_color='crimson',\n    font_color='white',\n    font_size=16,\n    align='left'),\n    cells=dict(values=[countries_pop[~countries_pop['Country'].isin(vaccine_df['country'])].dropna()['Country'].values,         # 1st column\n                countries_pop[~countries_pop['Country'].isin(vaccine_df['country'])].dropna()['Region'].values,          # 2nd column\n                countries_pop[~countries_pop['Country'].isin(vaccine_df['country'])].dropna()['Population'].values,       # 3rd column\n            ], \n           line_color='darkslategray',\n           fill_color='lightgray',\n           font_color='black',\n           align='left'))\n])\n\nfig.update_layout(width=800, height=1000,\n        title={\n            'text': 'Countries Which Has Not Started With Vaccination',\n            'xanchor': 'center',\n            'x':0.5,\n            'font_size': 18,\n            'font_color':'black',\n            'yanchor': 'top'\n})\n\nfig.show()","3e576884":"countries_pop.shape","0f907d20":"vaccine_df.shape","1b6c9450":"# joining two data frames\n\nvaccine_pop_df = vaccine_df.join(countries_pop.set_index('Country'), rsuffix='_other', on='country')","9f917bf9":"vaccine_pop_df.shape","a6bc0965":"# chart data\ndata = pd.Series.to_frame(vaccine_pop_df.groupby(['country','Region'])['people_vaccinated'].max())\n                          \ndata.reset_index(inplace=True)\n\nregion_vaccinated = pd.Series.to_frame(data.groupby(['Region'])['people_vaccinated'].sum())\nregion_vaccinated.reset_index(inplace=True)\nregion_vaccinated","e864315d":"region_population = pd.Series.to_frame(vaccine_pop_df.groupby(['Region'])['Population'].sum())\nregion_population.reset_index(inplace=True)","cba604fb":"new_df = region_vaccinated.join(region_population.set_index('Region'), rsuffix='_other', on='Region')\nnew_df['%vaccination'] = new_df['people_vaccinated'] \/ new_df['Population'] * 100\nnew_df = new_df.sort_values('%vaccination', ascending=False)","75426ce6":"# chart color\ncolors = ['lightgray',] * new_df.shape[0]\n#colors[0:3] = ['crimson'] * 3\n\n# Treemap Chart\nfig = go.Figure(\n    go.Treemap(\n    labels=new_df['Region'], \n    parents=['']* new_df.shape[0],\n    values=new_df['%vaccination'],\n    marker_colors=colors)) \n\n\nfig.update_layout(\n    width=1400,\n    height=1000,\n    font_color=\"white\",\n    font_size=16,\n    title={\n        'text': 'Comparing Vaccination in Regions',\n        'xanchor': 'center',\n        'x':0.5,\n        'font_size': 18,\n        'font_color':'black',\n        'yanchor': 'top'\n})\n\nfig.show()","64d30420":"# getting the top 6 countries in vaccination\ncountries_with_highest_daily_vaccine = list(vaccine_df.groupby(['country'])['daily_vaccinations'].max().sort_values(ascending=False).head(6).index)\ncountries_with_highest_daily_vaccine","40b568ed":"# Line Chart\n\nfig = px.line(vaccine_df[vaccine_df['country'].isin(countries_with_highest_daily_vaccine)], \n              x='date', y='daily_vaccinations', color='country', title='Daily Vaccination over Time')\nfig.show()","b17ade5b":"## **Visulizing the Reporting Sources**","ad793945":"## In this notebook, we use Plotly to visualize the data.","d93f9615":"### **Conclusion:** *Gibraltor has vaccined 74% of its population*","535329e7":"In this notebook we will use the country vaccinations data and countries of the world dataset to explore how countries are doing in vaccinating their population in order to reach herd immunity.","3d5947c8":"# **Covid World Vaccination Progres Analysis**","681ce1ba":"* **Country:** *this is the country for which the vaccination information is provided;*\n\n* **Country ISO Code :** *ISO code for the country;*\n\n* **Date :** *date for the data entry; *\n\n* **Total number of vaccinations :** *this is the absolute number of total immunizations in the country;\n\n* **Total number of people vaccinated :** *a person, depending on the immunization scheme, will receive one or more (typically 2) vaccines;*\n\n* **Total number of people fully vaccinated :** *this is the number of people that received the entire set of immunization according to the immunization scheme;*\n\n* **Daily vaccinations (raw) :** *for a certain data entry, the number of vaccination for that date\/country;*\n\n* **Daily vaccinations :** *for a certain data entry, the number of vaccination for that date\/country;*\n\n* **Total vaccinations per hundred :** *ratio (in percent) between vaccination number and total population up to the date in the country;*\n\n* **Total number of people vaccinated per hundred :** *ratio (in percent) between population immunized and total population up to the date in the country;*\n\n* **Total number of people fully vaccinated per hundred :** *ratio (in percent) between population fully immunized and total population up to the date in the country;*\n\n* **Number of vaccinations per day :** *number of daily vaccination for that day and country;*\n\n* **Daily vaccinations per million :** *ratio (in ppm) between vaccination number and total population for the current date in the country;*\n\n* **Vaccines used in the country :** *total number of vaccines used in the country (up to date);*\n\n* **Source name :** *source of the information (national authority, international organization, local organization etc.);*\n\n* **Source website :** *website of the source of information;*","73d7222a":"![f](https:\/\/i.guim.co.uk\/img\/media\/f1a723c4431b974f8b6ad4f7a34e0ada9e169b51\/0_0_2560_1536\/master\/2560.jpg?width=445&quality=45&auto=format&fit=max&dpr=2&s=06480e53863e03fef6b71f8ce9022853)\nWhen will a coronavirus vaccine be ready? Illustration by James Melaugh. Illustration: James Melaugh\/The Observer","03fc0dce":"## Visualizing the Caccination Start Date in Countirs","a37d4d4d":"# **Importing the Countries Population Dataset**","644f3ffe":"## Exploring the Countries Which has not started the vaccination yet","433deb5c":"## Importing the World Vaccination Dataset","933d532d":"## Exploring vaccines used in each country","8812b43f":"### Since **Ministry of Health** is a vague source we will explore the source URL:","bcef4c06":"## Visualizing Percentage of People Vaccinated in Regions","714915a1":"# **Visualizng the Data**","94227063":"### *Conclusion:* Most countries has used Oxford\/AstraZeneca and Pfizer\/BioNTech Vaccines .","d29b9eab":"## Joining two datasets","d7f5c2ec":"## **Visualizing the most used vaccines**","bd806d34":"### **Conclusion:** *Moderna and Pfzier\/BioNTech are the most used vaccines.*","b06b42aa":"### **Conclusion:** *Government of UK is the most reported source.*","4dc0f2a7":"## Which vaccine is used in more countries?\n","f6c8c702":"## Visualizing Top Countries' Vaccination Progress Over Time","cd9df5f0":"## Exploring the Data","bd4363cd":"## Visualizing Percentage of Vaccined Population in Countries ","4da9d423":"## Visualizing Number of Vaccination in Countries"}}