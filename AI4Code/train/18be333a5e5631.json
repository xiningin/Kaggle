{"cell_type":{"b081e40f":"code","75474db8":"code","822f8ede":"code","f5117d67":"code","56cf1820":"code","a154d12a":"code","ca5087c4":"code","32048457":"code","ca65fa7d":"code","b7b500c3":"code","9ec467a7":"code","3c0f760c":"code","67a82f4b":"code","e0f16802":"code","14621789":"markdown","3b9e58db":"markdown","03fbed17":"markdown","3dcd3bef":"markdown"},"source":{"b081e40f":"import numpy as np \nimport pandas as pd \nimport warnings\nwarnings.filterwarnings('ignore')","75474db8":"train = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsubmission = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","822f8ede":"train.shape, test.shape, submission.shape","f5117d67":"train.head()","56cf1820":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","a154d12a":"print('train: ')\ntrain.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","ca5087c4":"print('test: ')\ntest.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","32048457":"num_features = ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', \n                'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f20', \n                'f21', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28', 'f29', 'f30', \n                'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38', 'f39', 'f40', \n                'f41', 'f42', 'f44', 'f45', 'f46', 'f47', 'f48', 'f49', 'f50', \n                'f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57', 'f58', 'f59', 'f60', \n                'f61', 'f62', 'f63', 'f64', 'f65', 'f66', 'f67', 'f68', 'f69', 'f70', \n                'f71', 'f72', 'f73', 'f74', 'f75', 'f76', 'f77', 'f78', 'f79', 'f80', \n                'f81', 'f82', 'f83', 'f84', 'f85', 'f86', 'f87', 'f88', 'f89', 'f90', \n                'f91', 'f92', 'f93', 'f94', 'f95', 'f96', 'f97', 'f98', 'f99']","ca65fa7d":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\ntrain[num_features] = ss.fit_transform(train[num_features])\ntest[num_features] = ss.transform(test[num_features])","b7b500c3":"! pip install pycaret","9ec467a7":"from pycaret.classification import setup, compare_models, blend_models, get_config","3c0f760c":"def pycaret_model(train, target,test, n_select, fold,opt):\n    print('Setup Your Data....')\n    setup(data=train,\n          target=target,\n          silent= True,use_gpu = True)\n  \n    print('Comparing Models....')\n    best = compare_models(sort = opt,n_select=n_select, fold = fold,include = ['lightgbm','xgboost','catboost'])\n    \n    print('Blending Models....')\n    blended = blend_models(estimator_list= best, fold=fold, optimize=opt)\n    \n    prep_pipe = get_config(\"prep_pipe\")\n    prep_pipe.steps.append(['final_model', blended])\n    predictions = prep_pipe.predict_proba(test)[:,1]\n\n    return predictions\n","67a82f4b":"submission['target'] = pycaret_model(train,'target',test, 2, 5,'AUC')","e0f16802":"submission.to_csv('submission.csv',index=False)","14621789":"### **PyCaret**","3b9e58db":"### **Data Exploration:**","03fbed17":"### **Data Preprocessing:**","3dcd3bef":"<div class=\"alert alert-info\">\n<h4>If you like this notebook, please upvote it! \n     Thank you! :)<\/h4>\n<\/div>"}}