{"cell_type":{"3af553ec":"code","c753eb72":"code","217be21a":"code","1b2ea73c":"code","95c17986":"code","a2791d3c":"code","c7951aae":"code","372abcfb":"code","c036cdb6":"code","5321f3ac":"code","6b9fe533":"code","c60fdca1":"code","8bb39b40":"code","56a4c668":"code","bed1ba49":"code","8066b65d":"code","b5ade110":"code","972de8af":"code","ce73117e":"code","b2525438":"code","2b078f07":"code","98f6af37":"code","1a487f1b":"code","790b66dd":"code","6a499640":"code","6a9e0190":"code","4284eb5a":"markdown","fe7c24d5":"markdown","97858f35":"markdown","304f31fd":"markdown","ba222875":"markdown","e447ef3e":"markdown","42c152a6":"markdown","48836d8f":"markdown","6ec7802f":"markdown","41adfc2d":"markdown","e85bb690":"markdown","a1e1c717":"markdown","5f92c90d":"markdown","094352c2":"markdown","f79bc0aa":"markdown","0a65d86f":"markdown","b6acc3e8":"markdown","629c6350":"markdown","1dc0c082":"markdown","6749b0a2":"markdown","6f4ccebc":"markdown","72d94bd1":"markdown","10897307":"markdown","28b234e4":"markdown","5f4fc9ec":"markdown","08d1c3f9":"markdown","f903f129":"markdown","e584eed9":"markdown"},"source":{"3af553ec":"%load_ext google.cloud.bigquery","c753eb72":"%%bigquery\nSELECT\n    source_year AS year,\n    COUNT(is_male) AS birth_count\nFROM `bigquery-public-data.samples.natality`\nGROUP BY year\nORDER BY year DESC\nLIMIT 15","217be21a":"%%bigquery total_births\nSELECT\n    source_year AS year,\n    COUNT(is_male) AS birth_count\nFROM `bigquery-public-data.samples.natality`\nGROUP BY year\nORDER BY year DESC\nLIMIT 15","1b2ea73c":"# Th\u1eed v\u1ebd \u0111\u1ed3 th\u1ecb d\u1ea1ng plot cho bi\u1ebfn n\u00e0y\n%matplotlib inline\ntotal_births.plot","95c17986":"%%bigquery births_by_weekday\nSELECT\n    wday,\n    SUM(CASE WHEN is_male THEN 1 ELSE 0 END) AS male_births,\n    SUM(CASE WHEN is_male THEN 0 ELSE 1 END) AS female_births\nFROM `bigquery-public-data.samples.natality`\nWHERE wday IS NOT NULL\nGROUP BY wday\nORDER BY wday ASC","a2791d3c":"births_by_weekday.plot(x='wday');","c7951aae":"from google.cloud import bigquery\nclient = bigquery.Client()","372abcfb":"# T\u1ea1o m\u1ed9t li\u00ean k\u1ebft t\u1edbi \"hacker_news\" dataset\ndataset_ref = client.dataset(\"hacker_news\", project=\"bigquery-public-data\")\n\n# l\u1ea5y d\u1eef li\u1ec7u v\u00e0o dataset. M\u1ed7i dataset l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c b\u1ea3ng.\nhacker_news_dataset = client.get_dataset(dataset_ref)","c036cdb6":"# Li\u1ec7t k\u00ea t\u1ea5t c\u1ea3 c\u00e1c b\u1ea3ng trong \"hacker_news\" dataset\ntables = list(client.list_tables(hacker_news_dataset))\n\n# In t\u00ean b\u1ea3ng\nprint([table.table_id for table in tables])","5321f3ac":"# T\u1ea1o con tr\u1ecf \u0111\u1ebfn b\u1ea3ng \"full\"\ntable_ref = dataset_ref.table(\"comments\")\n\n# L\u1ea5y d\u1eef li\u1ec7u t\u1eeb b\u1ea3ng\ntable = client.get_table(table_ref)\ntable.schema","6b9fe533":"lines = client.list_rows(table, max_results=5).to_dataframe()\nlines","c60fdca1":"# Xem 5 d\u00f2ng \u0111\u1ea7u ti\u00ean c\u1ee7a c\u1ed9t 'text' trong b\u1ea3ng 'comments'\nclient.list_rows(table, selected_fields=table.schema[5:6], max_results=5).to_dataframe()","8bb39b40":"# Khai b\u00e1o bi\u1ebfn ds l\u1ea5y d\u1eef li\u1ec7u t\u1eeb \"openaq\" dataset r\u1ed3i t\u00ecm s\u1ed1 b\u1ea3ng\nds_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\nopenaq_dataset = ","56a4c668":"query = \"\"\"\n        SELECT country, city, COUNT(1)\n        FROM `bigquery-public-data.openaq.global_air_quality`\n        GROUP BY country, city\n        \"\"\"","bed1ba49":"query_job = client.query(query)\nus_cities = query_job.to_dataframe()\nus_cities","8066b65d":"us_cities","b5ade110":"# Query to get the score column from every row where the type column has value \"job\"\nquery = \"\"\"\n        SELECT score, title\n        FROM `bigquery-public-data.hacker_news.full`\n        WHERE type = \"job\" \n        \"\"\"\n\n# Create a QueryJobConfig object to estimate size of query without running it\ndry_run_config = bigquery.QueryJobConfig(dry_run=True)\n\n# API request - dry run query to estimate costs\ndry_run_query_job = client.query(query, job_config=dry_run_config)\n\nprint(\"This query will process {} Mega Bytes.\".format(dry_run_query_job.total_bytes_processed \/ 1024))","972de8af":"# Only run the query if it's less than 1 MB\nONE_MB = 1000*1000\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=ONE_MB)\n\n# Set up the query (will only run if it's less than 1 MB)\nsafe_query_job = client.query(query, job_config=safe_config)\n\n# API request - try to run the query, and return a pandas DataFrame\nsafe_query_job.to_dataframe()","ce73117e":"query_good = \"\"\"\n             SELECT parent, COUNT(id)\n             FROM `bigquery-public-data.hacker_news.comments`\n             GROUP BY parent\n             \"\"\"","b2525438":"query_bad = \"\"\"\n            SELECT author, parent, COUNT(id)\n            FROM `bigquery-public-data.hacker_news.comments`\n            GROUP BY parent\n            \"\"\"","2b078f07":"# Query to select comments that received more than 10 replies\nquery_popular = \"\"\"\n                SELECT parent, COUNT(id)\n                FROM `bigquery-public-data.hacker_news.comments`\n                GROUP BY parent\n                HAVING COUNT(id) > 10\n                \"\"\"","98f6af37":"# \u0111\u1eb7t quota l\u00e0 1GB v\u00e0 ch\u1ea1y query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**9)\ncomment_query_job = client.query(query_popular, job_config=safe_config)\npopular_comments = comment_query_job.to_dataframe()\n\n# Print the first five rows of the DataFrame\npopular_comments.head()","1a487f1b":"# Improved version of earlier query, now with aliasing & improved readability\nquery_improved = \"\"\"\n                 SELECT parent, COUNT(1) AS NumPosts\n                 FROM `bigquery-public-data.hacker_news.comments`\n                 GROUP BY parent\n                 HAVING COUNT(1) > 10\n                 \"\"\"\n\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**9)\nimproved_query_job = client.query(query_improved, job_config=safe_config)\n\n# API request - run the query, and convert the results to a pandas DataFrame\nimproved_df = improved_query_job.to_dataframe()\n\n# Print the first five rows of the DataFrame\nimproved_df.head()","790b66dd":"first_query = \"\"\"\n            SELECT abc.id \n            FROM `big_query_dataset.tendataset.tentable`\n            WHERE \n            \"\"\"\n\n# \u0111\u1eb7t quota v\u00e0 ch\u1ea1y query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**9)\nfirst_query_job = client.query(first_query, job_config=safe_config)\nfirst_results = first_query_job.to_dataframe()\n\n# View top few rows of results\nprint(first_results.head())","6a499640":"prolific_commenters_query = # query \u1edf \u0111\u00e2y\n\n# \u0111\u1eb7t quota\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**9)\nquery_job = client.query(prolific_commenters_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nprolific_commenters = query_job.to_dataframe()\n\n# View top few rows of results\nprint(prolific_commenters.head())","6a9e0190":"deleted_posts_query = # query \u1edf \u0111\u00e2y\n\n# Set up the query\nquery_job = client.query(deleted_posts_query)\n\n# API request - run the query, and return a pandas DataFrame\ndeleted_posts = query_job.to_dataframe()\n\n# View results\nprint(deleted_posts)","4284eb5a":"### B\u00e0i t\u1eadp th\u1ef1c h\u00e0nh\n1. Ch\u00fang ta s\u1ebd d\u00f9ng dataset `openaq`. T\u00ecm c\u00e1ch \u0111\u1ebfm s\u1ed1 b\u1ea3ng trong dataset n\u00e0y.","fe7c24d5":"### GROUP BY ... HAVING\nHAVING d\u00f9ng chung v\u1edbi GROUP BY \u0111\u1ec3 b\u1ecf qua c\u00e1c nh\u00f3m kh\u00f4ng \u0111\u1ea1t \u0111i\u1ec1u ki\u1ec7n.\n![\u1ea2nh](https:\/\/i.imgur.com\/2ImXfHQ.png)","97858f35":"M\u1ed9t v\u00e0i g\u1ee3i \u00fd \u0111\u1ec3 c\u1ea3i ti\u1ebfn query tr\u00ean:\n* Ta c\u00f3 th\u1ec3 \u0111\u1ed5i t\u00ean **aliasing** c\u1ed9t `COUNT(id)` d\u00f9ng `AS NumPosts` \u0111\u1ec3 c\u00f3 t\u00ean d\u1ec5 hi\u1ec3u h\u01a1n.\n* N\u1ebfu c\u00f3 khi n\u00e0o b\u1ea1n kh\u00f4ng ch\u1eafc ph\u1ea3i \u0111\u1eb7t g\u00ec trong h\u00e0m COUNT() th\u00ec c\u00f3 th\u1ec3 ch\u1ea1y `COUNT(1)` \u0111\u1ec3 \u0111\u1ebfm s\u1ed1 h\u00e0ng trong m\u1ed7i nh\u00f3m. Nhi\u1ec1u ng\u01b0\u1eddi th\u1ea5y c\u00e1ch n\u00e0y d\u1ec5 \u0111\u1ecdc v\u00ec h\u1ecd bi\u1ebft n\u00f3 kh\u00f4ng tham chi\u1ebfu \u0111\u1ebfn nh\u1eefng c\u1ed9t kh\u00e1c. C\u00e1ch n\u00e0y c\u0169ng gi\u00fap **scan \u00edt d\u1eef li\u1ec7u h\u01a1n** l\u00e0 khi \u0111\u01b0\u1ee3c c\u1ea5p t\u00ean c\u1ed9t n\u00ean c\u0169ng s\u1ebd nhanh h\u01a1n. \u0110i\u1ec3m kh\u00e1c bi\u1ec7t nh\u1ecf nh\u01b0ng c\u00f3 th\u1ec3 d\u1eabn \u0111\u1ebfn k\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 kh\u00e1c nhau l\u00e0:\n    1. SELECT COUNT(*) or SELECT COUNT(1) will return the total of all records returned in the result set regardless of NULL values.\n    2. COUNT() will count the number of non-NULL items in the specified column (NULL fields will be ignored).","304f31fd":"# SQL v\u00e0 BigQuery","ba222875":"BigQuery web interface c\u00f2n gi\u00fap \u01b0\u1edbc l\u01b0\u1ee3ng \u0111\u01b0\u1ee3c l\u01b0\u1ee3ng d\u1eef li\u1ec7u m\u00e0 Query s\u1ebd truy c\u1eadp tr\u01b0\u1edbc khi query \u0111\u00f3 \u0111\u01b0\u1ee3c th\u1ef1c thi. Xem [Video](https:\/\/cloudacademy.com\/course\/introduction-to-bigquery\/running-a-query-1\/?context_resource=lp&context_id=44)","e447ef3e":"## Google BigQuery\nCh\u00fang ta s\u1ebd th\u1eed ch\u01a1i v\u1edbi d\u1eef li\u1ec7u l\u1edbn th\u1eadt s\u1ef1. BigQuery l\u00e0 kho d\u1eef li\u1ec7u quy m\u00f4 petabyte (~ 1 tri\u1ec7u GB. H\u01a1n 10 t\u1ef7 b\u1ee9c \u1ea3nh t\u1ed3n t\u1ea1i tr\u00ean Facebook c\u00f3 dung l\u01b0\u1ee3ng 1,5 petabyte v\u00e0 m\u1ed9t m\u00e1y quay video HD ph\u1ea3i ch\u1ea1y 24\/7 trong 3 n\u0103m r\u01b0\u1ee1i m\u1edbi c\u00f3 th\u1ec3 l\u1ea5p \u0111\u1ea7y \u1ed5 c\u1ee9ng 1PB.) m\u00e0 b\u1ea1n c\u00f3 th\u1ec3 s\u1eed d\u1ee5ng \u0111\u1ec3 ch\u1ea1y c\u00e1c truy v\u1ea5n SQL tr\u00ean m\u1ed9t l\u01b0\u1ee3ng l\u1edbn d\u1eef li\u1ec7u trong th\u1eddi gian g\u1ea7n nh\u01b0 th\u1eddi gian th\u1ef1c. Trong h\u01b0\u1edbng d\u1eabn n\u00e0y ta s\u1ebd truy c\u1eadp v\u00e0o [BigQuery public dataset](https:\/\/cloud.google.com\/bigquery\/public-data\/) \u0111\u01b0\u1ee3c Google l\u01b0u tr\u1eef mi\u1ec5n ph\u00ed.\n\n* B\u01b0\u1edbc \u0111\u1ea7u ti\u00ean, c\u00e0i \u0111\u1eb7t trong virtual env\n`pip install --upgrade google-cloud-bigquery`\n* T\u1ea1o file x\u00e1c th\u1ef1c (authentication) theo h\u01b0\u1edbng d\u1eabn trong https:\/\/cloud.google.com\/docs\/authentication\/getting-started?authuser=1\n\n**L\u01b0u \u00fd: \u0111\u1eb7t \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn file credential b\u1eb1ng 1 trong 2 c\u00e1ch** \n1. `export GOOGLE_APPLICATION_CREDENTIALS=[FILE_PATH]` \u0111\u01b0\u1eddng d\u1eabn ph\u1ea3i t\u01b0\u01a1ng \u0111\u1ed1i so v\u1edbi root c\u1ee7a virtual environment\n2. ho\u1eb7c c\u00f3 th\u1ec3 \u0111\u1eb7t lu\u00f4n trong notebook\n```\nimport os\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"]=\"[FILE_NAME].json\"\n```","42c152a6":"## SQL Query\nC\u00e1c keywords l\u00e0 **SELECT**, **FROM** v\u00e0 **WHERE** cho ph\u00e9p truy c\u1eadp d\u1eef li\u1ec7u t\u1eeb nh\u1eefng c\u1ed9t c\u1ee5 th\u1ec3 th\u1ecfa \u0111i\u1ec1u ki\u1ec7n cho ph\u00e9p. Query sau li\u1ec7t k\u00ea t\u1ea5t c\u1ea3 c\u00e1c th\u00e0nh ph\u1ed1 m\u00e0 c\u1ed9t `country` c\u00f3 gi\u00e1 tr\u1ecb l\u00e0 `US`","48836d8f":"M\u00f4 h\u00ecnh d\u1eef li\u1ec7u c\u1ee7a BigQuery\n![m\u00f4 h\u00ecnh](https:\/\/i.imgur.com\/biYqbUB.png)\n\nT\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1edbi dataset, ta l\u1ea5y d\u1eef li\u1ec7u t\u1eeb b\u1ea3ng \"full\" nh\u01b0 sau. V\u00e0 s\u1ebd c\u00f3 \u0111\u01b0\u1ee3c **schema** hay l\u00e0 c\u1ea5u tr\u00fac c\u1ee7a b\u1ea3ng. Ta s\u1ebd c\u1ea7n hi\u1ec3u r\u00f5 c\u1ea5u tr\u00fac c\u1ee7a b\u1ea3ng \u0111\u1ec3 l\u1ea5y d\u1eef li\u1ec7u m\u00e0 ta mu\u1ed1n ra.","6ec7802f":"Xem l\u1ea1i c\u1ea5u tr\u00fac b\u1ea3ng v\u00e0 5 d\u00f2ng d\u1eef li\u1ec7u \u0111\u1ea7u ti\u00ean c\u1ee7a b\u1ea3ng `comments` trong  `hacker_news_dataset` \u1edf tr\u00ean. V\u00ec:\n* C\u1ed9t `parent` cho bi\u1ebft comment hi\u1ec7n t\u1ea1i l\u00e0 l\u1eddi \u0111\u00e1p tr\u1ea3 c\u1ee7a comment g\u1ed1c n\u00e0o v\u00e0\n* C\u1ed9t `id` c\u00f3 ID d\u00f9ng \u0111\u1ec3 ph\u00e2n bi\u1ec7t m\u1ed7i comment\nN\u00ean ta c\u00f3 th\u1ec3 GROUP BY c\u1ed9t `parent` v\u00e0 **COUNT()** c\u1ed9t `id` \u0111\u1ec3 bi\u1ebft s\u1ed1 comment \u0111\u00e3 \u0111\u01b0\u1ee3c vi\u1ebft \u0111\u1ec3 tr\u1ea3 l\u1eddi cho m\u1ed9t comment n\u00e0o \u0111\u00f3 (!!kh\u00fac n\u00e0y ph\u1ea3i ngh\u0129 1 ch\u00fat). Ngo\u00e0i ra, v\u00ec ch\u00fang ta ch\u1ec9 quan t\u00e2m \u0111\u1ebfn nh\u1eefng comment n\u00e0o ph\u1ed5 bi\u1ebfn n\u00ean s\u1ebd d\u00f9ng HAVING \u0111\u1ec3 tr\u1ea3 v\u1ec1 nh\u00f3m c\u00f3 nhi\u1ec1u h\u01a1n 10 ID.","41adfc2d":"\u0110\u1ea7u ti\u00ean ta c\u1ea7n t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng `Client`. \u0110\u00e2y l\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng trung t\u00e2m trong vi\u1ec7c l\u1ea5y d\u1eef li\u1ec7u t\u1eeb BigQuery datasets. B\u00e2y gi\u1edd ta s\u1ebd l\u00e0m vi\u1ec7c v\u1edbi c\u00e1c b\u00e0i vi\u1ebft tr\u00ean trang [Hacker News](https:\/\/news.ycombinator.com\/). M\u1ed7i dataset t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed9t project, c\u00e1c b\u01b0\u1edbc sau gi\u00fap truy c\u1eadp dataset.","e85bb690":"2. B\u00e2y gi\u1edd d\u00f9ng dataset `hacker_news`, ta mu\u1ed1n g\u1eedi qu\u00e0 \u0111\u1ebfn c\u00e1c t\u00e1c gi\u1ea3 c\u00f3 h\u01a1n 10,000 posts. Vi\u1ebft query tr\u1ea3 ra t\u1ea5t c\u1ea3 c\u00e1c t\u00e1c gi\u1ea3 \u0111\u1ea1t con s\u1ed1 post tr\u00ean 10,000 v\u00e0 \u0111\u1ebfm s\u1ed1 post \u0111\u00f3, hi\u1ec3n th\u1ecb v\u1edbi t\u00ean c\u1ed9t l\u00e0 `NumPosts`","a1e1c717":"Gi\u1edd ta c\u00f3 th\u1ec3 d\u00f9ng `list_rows()` \u0111\u1ec3 ki\u1ec3m tra d\u1eef li\u1ec7u th\u1eadt (xem c\u00f3 gi\u1ed1ng v\u1edbi m\u00f4 t\u1ea3 kh\u00f4ng). H\u00e0m n\u00e0y tr\u1ea3 v\u1ec1 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng BigQuery `RowIterator` v\u00e0 c\u00f3 th\u1ec3 \u0111\u01b0\u1ee3c chuy\u1ec3n th\u00e0nh m\u1ed9t DataFrame v\u1edbi h\u00e0m `to_dataframe()`","5f92c90d":"M\u1ed7i dataset l\u00e0 m\u1ed9t t\u1eadp h\u1ee3p c\u00e1c b\u1ea3ng, c\u00f3 th\u1ec3 ngh\u0129 m\u1ed9t dataset l\u00e0 m\u1ed9t file spreadsheet ch\u1ee9a nhi\u1ec1u b\u1ea3ng.Ta d\u00f9ng `list_tables()` \u0111\u1ec3 li\u1ec7t k\u00ea c\u00e1c b\u1ea3ng trong dataset.","094352c2":"3. Bao nhi\u00eau comments \u0111\u00e3 b\u1ecb x\u00f3a? C\u1ed9t `deleted` trong b\u1ea3ng comments s\u1ebd c\u00f3 gi\u00e1 tr\u1ecb `True` n\u1ebfu comment \u0111\u00f3 \u0111\u00e3 b\u1ecb x\u00f3a","f79bc0aa":"### B\u00e0i t\u1eadp th\u1ef1c h\u00e0nh\n1. Ti\u1ebfp t\u1ee5c v\u1edbi dataset `openaq` \u1edf tr\u00ean, vi\u1ebft query \u0111\u1ec3 li\u1ec7t k\u00ea c\u00e1c n\u01b0\u1edbc d\u00f9ng \u0111\u01a1n v\u1ecb \"ppm\" \u0111\u1ec3 \u0111o ch\u1ea5t l\u01b0\u1ee3ng kh\u00f4ng kh\u00ed. G\u1ee3i \u00fd: d\u00f9ng DISTINCT \u0111\u1ec3 kh\u00f4ng li\u1ec7t k\u00ea l\u1eb7p \u0111i l\u1eb7p l\u1ea1i m\u1ed9t s\u1ed1 n\u01b0\u1edbc.","0a65d86f":"C\u00e2u query tr\u00ean c\u00f3 2 bi\u1ebfn `parent` v\u00e0 `id`\n* `parent` \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o **GROUP BY** v\u00e0\n* `id` \u0111\u01b0\u1ee3c truy\u1ec3n v\u00e0o h\u00e0m `COUNT(id)`\n\nC\u00e2u Query d\u01b0\u1edbi \u0111\u00e2y s\u1ebd b\u00e1o l\u1ed7i `SELECT list expression references column (column's name) which is neither grouped nor aggregated at` v\u00ec c\u1ed9t `author` kh\u00f4ng thu\u1ed9c m\u1ed9t trong 2 \u0111i\u1ec1u ki\u1ec7n tr\u00ean","b6acc3e8":"## GROUP BY, HAVING v\u00e0 COUNT()\n\u0110\u1ec3 minh h\u1ecda, ta d\u00f9ng b\u1ea3ng d\u1eef li\u1ec7u sau:\n![\u1ea2nh](https:\/\/i.imgur.com\/fI5Pvvp.png)\n### COUNT()\nL\u00e0 m\u1ecdt trong nh\u1eefng h\u00e0m t\u1ed5ng h\u1ee3p (aggregate functions) l\u00e0 c\u00e1c h\u00e0m nh\u1eadn nhi\u1ec1u gi\u00e1 tr\u1ecb v\u00e0 tr\u1ea3 v\u1ec1 m\u1ed9t con s\u1ed1 duy nh\u1ea5t (c\u00e1c h\u00e0m kh\u00e1c g\u1ed3m SUM(), AVG(), MIN(), v\u00e0 MAX()). H\u00e0m n\u00e0y tr\u1ea3 v\u1ec1 t\u00ean c\u1ed9t h\u01a1i l\u1ea1 `f0__`, ta c\u00f3 th\u1ec3 \u0111\u1ed5i t\u00ean n\u00e0y th\u00e0nh c\u00e1i g\u00ec \u0111\u00f3 c\u00f3 t\u00ednh m\u00f4 t\u1ea3 h\u01a1n.\n\nN\u1ebfu ch\u00fang ta SELECT COUNT() c\u1ee7a c\u1ed9t ID, k\u1ebft qu\u1ea3 s\u1ebd l\u00e0 4\n![\u1ea2nh](https:\/\/i.imgur.com\/Eu5HkXq.png)\n### GROUP BY\n![\u1ea2nh](https:\/\/i.imgur.com\/tqE9Eh8.png)\nM\u1ed9t ch\u00fat l\u01b0u \u00fd: S\u1ebd kh\u00f4ng c\u00f3 \u00fd ngh\u0129a l\u1eafm n\u1ebfu d\u00f9ng GROUP BY m\u00e0 kh\u00f4ng c\u00f3 h\u00e0m t\u1ed5ng h\u1ee3p k\u00e8m theo. T\u01b0\u01a1ng t\u1ef1, n\u1ebfu \u0111\u00e3 d\u00f9ng GROUP BY th\u00ec t\u1ea5t c\u1ea3 c\u00e1c bi\u1ebfn (t\u00ean c\u1ed9t) ph\u1ea3i ho\u1eb7c l\u00e0:\n1. \u0111\u01b0\u1ee3c \u0111\u01b0a v\u00e0o trong nh\u00f3m GROUP BY ho\u1eb7c\n2. n\u1eb1m trong m\u1ed9t h\u00e0m t\u1ed5ng h\u1ee3p","629c6350":"Ch\u1ea1y l\u1ea1i c\u00e2u l\u1ec7nh tr\u00ean nh\u01b0ng l\u1ea7n n\u00e0y ta l\u01b0u k\u1ebft qu\u1ea3 v\u00e0o bi\u1ebfn `total_births` (l\u00e0 m\u1ed9t \u0111\u1ed1i s\u1ed1 c\u1ee7a `%%bigquery`. Ta s\u1ebd d\u00f9ng bi\u1ebfn n\u00e0y \u0111\u1ec3 v\u1ebd \u0111\u1ed3 th\u1ecb.","1dc0c082":"Th\u01b0 vi\u1ec7n BigQuery client cung c\u1ea5p l\u1ec7nh cell magic, `%%bigquery`, cho ph\u00e9p ch\u1ea1y m\u1ed9t c\u00e2u l\u1ec7nh SQL v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 l\u00e0 m\u1ed9t Pandas DataFrame. C\u00e2u l\u1ec7nh sau tr\u1ea3 v\u1ec1 t\u1ed5ng s\u1ed1 l\u01b0\u1ee3ng tr\u1ebb em l\u00e0 nam sinh theo n\u0103m t\u1eeb b\u1ea3ng m\u1eabu `natality`*(B\u1ea3ng natality c\u00f3 k\u00edch c\u1ee1 21.94 GB v\u00e0 137,826,763 d\u00f2ng d\u1eef li\u1ec7u)*","6749b0a2":"### C\u00e1ch th\u1ee9 2: D\u00f9ng Pandas DataFrames\nC\u00e2u l\u1ec7nh ma thu\u1eadt cho ph\u00e9p b\u1ea1n s\u1eed d\u1ee5ng c\u00fa ph\u00e1p t\u1ed1i thi\u1ec3u \u0111\u1ec3 t\u01b0\u01a1ng t\u00e1c v\u1edbi BigQuery. \u1ea8n ph\u00eda sau, `%%bigquery` s\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n m\u00e1y kh\u00e1ch BigQuery Python \u0111\u1ec3 ch\u1ea1y truy v\u1ea5n SQL, chuy\u1ec3n \u0111\u1ed5i k\u1ebft qu\u1ea3 th\u00e0nh Pandas Dataframe, cho ph\u00e9p l\u01b0u k\u1ebft qu\u1ea3 v\u00e0o m\u1ed9t bi\u1ebfn v\u00e0 cu\u1ed1i c\u00f9ng hi\u1ec3n th\u1ecb k\u1ebft qu\u1ea3. S\u1eed d\u1ee5ng th\u01b0 vi\u1ec7n m\u00e1y kh\u00e1ch BigQuery Python thay v\u00ec c\u00e2u l\u1ec7nh ma thu\u1eadt cho ph\u00e9p b\u1ea1n ki\u1ec3m so\u00e1t nhi\u1ec1u truy v\u1ea5n h\u01a1n v\u00e0 cho ph\u00e9p c\u00e1c c\u1ea5u h\u00ecnh ph\u1ee9c t\u1ea1p h\u01a1n. S\u1ef1 t\u00edch h\u1ee3p c\u1ee7a th\u01b0 vi\u1ec7n v\u1edbi Pandas cho ph\u00e9p b\u1ea1n k\u1ebft h\u1ee3p s\u1ee9c m\u1ea1nh c\u1ee7a khai b\u00e1o SQL v\u1edbi code Python \u0111\u1ec3 th\u1ef1c hi\u1ec7n c\u00e1c nhi\u1ec7m v\u1ee5 ph\u00e2n t\u00edch d\u1eef li\u1ec7u, tr\u1ef1c quan h\u00f3a v\u00e0 chuy\u1ec3n \u0111\u1ed5i th\u00fa v\u1ecb.","6f4ccebc":"## L\u00e0m vi\u1ec7c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u l\u1edbn\n**L\u01afU \u00dd: BigQuery query pricing provides the first 1 TB per month free of charge. V\u1edbi d\u1eef li\u1ec7u l\u1edbn, b\u1ea1n v\u1eabn n\u00ean c\u1ea9n th\u1eadn v\u00ec ch\u1ec9 v\u00e0i queries c\u00f3 th\u1ec3 d\u00f9ng h\u1ebft dung l\u01b0\u1ee3ng n\u00e0y ngay. Nh\u01b0ng c\u0169ng \u0111\u1eebng lo qu\u00e1: ch\u00fang ta s\u1ebd h\u1ecdc c\u00e1ch tr\u00e1nh scan qu\u00e1 nhi\u1ec1u d\u1eef li\u1ec7u m\u1ed9t l\u00fac \u0111\u1ec3 kh\u00f4ng b\u1ecb v\u01b0\u1ee3t \u0111\u1ecbnh m\u1ee9c n\u00e0y**\n\nDataset Hacker News \u1edf tr\u00ean c\u1ee7a ch\u00fang ta r\u1ea5t l\u1edbn. Ta c\u00f3 th\u1ec3 \u01b0\u1edbc t\u00ednh k\u00edch c\u1ee1 c\u1ee7a b\u1ea5t k\u1ef3 query n\u00e0o tr\u01b0\u1edbc khi ch\u1ea1y ch\u00fang. \u0110\u1ec3 h\u00ecnh dung, ta t\u1ea1o \u0111\u1ed1i t\u01b0\u1ee3ng `QueryJobConfig` v\u00e0 \u0111\u1eb7t tham s\u1ed1 `dry_run` l\u00e0 `True`","72d94bd1":"### Truy xu\u1ea5t v\u00e0 h\u00ecnh dung d\u1eef li\u1ec7u BigQuery m\u1ed9t c\u00e1ch tr\u1ef1c quan (ch\u1ec9 \u00e1p d\u1ee5ng cho ng\u01b0\u1eddi d\u00f9ng Jupyter notebook)","10897307":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#SQL-v\u00e0-BigQuery\" data-toc-modified-id=\"SQL-v\u00e0-BigQuery-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>SQL v\u00e0 BigQuery<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#T\u1ea1i-sao-ph\u1ea3i-h\u1ecdc-SQL?\" data-toc-modified-id=\"T\u1ea1i-sao-ph\u1ea3i-h\u1ecdc-SQL?-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>T\u1ea1i sao ph\u1ea3i h\u1ecdc SQL?<\/a><\/span><\/li><li><span><a href=\"#Big-Data\" data-toc-modified-id=\"Big-Data-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>Big Data<\/a><\/span><\/li><li><span><a href=\"#Google-BigQuery\" data-toc-modified-id=\"Google-BigQuery-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>Google BigQuery<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Truy-xu\u1ea5t-v\u00e0-h\u00ecnh-dung-d\u1eef-li\u1ec7u-BigQuery-m\u1ed9t-c\u00e1ch-tr\u1ef1c-quan-(ch\u1ec9-\u00e1p-d\u1ee5ng-cho-ng\u01b0\u1eddi-d\u00f9ng-Jupyter-notebook)\" data-toc-modified-id=\"Truy-xu\u1ea5t-v\u00e0-h\u00ecnh-dung-d\u1eef-li\u1ec7u-BigQuery-m\u1ed9t-c\u00e1ch-tr\u1ef1c-quan-(ch\u1ec9-\u00e1p-d\u1ee5ng-cho-ng\u01b0\u1eddi-d\u00f9ng-Jupyter-notebook)-1.3.1\"><span class=\"toc-item-num\">1.3.1&nbsp;&nbsp;<\/span>Truy xu\u1ea5t v\u00e0 h\u00ecnh dung d\u1eef li\u1ec7u BigQuery m\u1ed9t c\u00e1ch tr\u1ef1c quan (ch\u1ec9 \u00e1p d\u1ee5ng cho ng\u01b0\u1eddi d\u00f9ng Jupyter notebook)<\/a><\/span><\/li><li><span><a href=\"#C\u00e1ch-th\u1ee9-2:-D\u00f9ng-Pandas-DataFrames\" data-toc-modified-id=\"C\u00e1ch-th\u1ee9-2:-D\u00f9ng-Pandas-DataFrames-1.3.2\"><span class=\"toc-item-num\">1.3.2&nbsp;&nbsp;<\/span>C\u00e1ch th\u1ee9 2: D\u00f9ng Pandas DataFrames<\/a><\/span><\/li><li><span><a href=\"#\u0110i\u1ec3m-kh\u00e1c-bi\u1ec7t-l\u1edbn-nh\u1ea5t-gi\u1eefa-1-DataFrame-v\u1edbi-bi\u1ebfn-table-l\u00e0-g\u00ec?\" data-toc-modified-id=\"\u0110i\u1ec3m-kh\u00e1c-bi\u1ec7t-l\u1edbn-nh\u1ea5t-gi\u1eefa-1-DataFrame-v\u1edbi-bi\u1ebfn-table-l\u00e0-g\u00ec?-1.3.3\"><span class=\"toc-item-num\">1.3.3&nbsp;&nbsp;<\/span>\u0110i\u1ec3m kh\u00e1c bi\u1ec7t l\u1edbn nh\u1ea5t gi\u1eefa 1 DataFrame v\u1edbi bi\u1ebfn table l\u00e0 g\u00ec?<\/a><\/span><\/li><li><span><a href=\"#B\u00e0i-t\u1eadp-th\u1ef1c-h\u00e0nh\" data-toc-modified-id=\"B\u00e0i-t\u1eadp-th\u1ef1c-h\u00e0nh-1.3.4\"><span class=\"toc-item-num\">1.3.4&nbsp;&nbsp;<\/span>B\u00e0i t\u1eadp th\u1ef1c h\u00e0nh<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#SQL-Query\" data-toc-modified-id=\"SQL-Query-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>SQL Query<\/a><\/span><\/li><li><span><a href=\"#L\u00e0m-vi\u1ec7c-v\u1edbi-c\u00e1c-t\u1eadp-d\u1eef-li\u1ec7u-l\u1edbn\" data-toc-modified-id=\"L\u00e0m-vi\u1ec7c-v\u1edbi-c\u00e1c-t\u1eadp-d\u1eef-li\u1ec7u-l\u1edbn-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>L\u00e0m vi\u1ec7c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u l\u1edbn<\/a><\/span><\/li><li><span><a href=\"#GROUP-BY,-HAVING-v\u00e0-COUNT()\" data-toc-modified-id=\"GROUP-BY,-HAVING-v\u00e0-COUNT()-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>GROUP BY, HAVING v\u00e0 COUNT()<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#COUNT()\" data-toc-modified-id=\"COUNT()-1.6.1\"><span class=\"toc-item-num\">1.6.1&nbsp;&nbsp;<\/span>COUNT()<\/a><\/span><\/li><li><span><a href=\"#GROUP-BY\" data-toc-modified-id=\"GROUP-BY-1.6.2\"><span class=\"toc-item-num\">1.6.2&nbsp;&nbsp;<\/span>GROUP BY<\/a><\/span><\/li><li><span><a href=\"#GROUP-BY-...-HAVING\" data-toc-modified-id=\"GROUP-BY-...-HAVING-1.6.3\"><span class=\"toc-item-num\">1.6.3&nbsp;&nbsp;<\/span>GROUP BY ... HAVING<\/a><\/span><\/li><li><span><a href=\"#B\u00e0i-t\u1eadp-th\u1ef1c-h\u00e0nh\" data-toc-modified-id=\"B\u00e0i-t\u1eadp-th\u1ef1c-h\u00e0nh-1.6.4\"><span class=\"toc-item-num\">1.6.4&nbsp;&nbsp;<\/span>B\u00e0i t\u1eadp th\u1ef1c h\u00e0nh<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><\/ul><\/div>","28b234e4":"2. Li\u1ec7t k\u00ea 5 d\u00f2ng \u0111\u1ea7u ti\u00ean trong b\u1ea3ng `global_air_quality`","5f4fc9ec":"### \u0110i\u1ec3m kh\u00e1c bi\u1ec7t l\u1edbn nh\u1ea5t gi\u1eefa 1 DataFrame v\u1edbi bi\u1ebfn table l\u00e0 g\u00ec?\nM\u1ed9t c\u00e1ch kh\u00e1c \u0111\u1ec3 xem d\u1eef li\u1ec7u tr\u00ean l\u00e0 qua c\u00f4ng c\u1ee5 web c\u1ee7a BigQuery, truy c\u1eadp qua http:\/\/console.cloud.google.com\/","08d1c3f9":"Ti\u1ebfp theo, ta th\u1eed l\u1ea5y 1 b\u1ea3ng \u0111\u1ebfm s\u1ed1 l\u01b0\u1ee3ng tr\u1ebb em sinh ra theo ng\u00e0y trong tu\u1ea7n","f903f129":"B\u1ea1n c\u00f3 th\u1ec3 khai b\u00e1o tham s\u1ed1 gi\u1edbi h\u1ea1n l\u01b0\u1ee3ng d\u1eef li\u1ec7u m\u00e0 b\u1ea1n mu\u1ed1n scan. D\u01b0\u1edbi \u0111\u00e2y ta ch\u1ec9 cho ph\u00e9p ch\u1ea1y 1MB, n\u00ean c\u00e2u l\u1ec7nh s\u1ebd b\u1ecb h\u1ee7y b\u1ecf v\u00ec v\u01b0\u1ee3t qu\u00e1 dung l\u01b0\u1ee3ng \u0111\u00e3 \u0111\u1eb7t.","e584eed9":"Setup v\u1edbi h\u00e0m `query()` v\u00e0 ch\u1ea1y, chuy\u1ec3n k\u1ebft qu\u1ea3 th\u00e0nh DataFrame. 3 d\u1ea5u ngo\u1eb7c k\u00e9p `\"\"\"` gi\u00fap Python hi\u1ec3u l\u00e0 m\u1ecdi th\u1ee9 ph\u00eda trong l\u00e0 1 chu\u1ed7i duy nh\u1ea5t, k\u1ec3 c\u1ea3 l\u00e0 c\u00f3 xu\u1ed1ng d\u00f2ng (gi\u00fap d\u1ec5 \u0111\u1ecdc Query h\u01a1n).\n* L\u01b0u \u00fd: t\u00ean b\u1ea3ng sau keyword **FROM** n\u1eb1m trong d\u1ea5u backtick `` ` ``\n* Kh\u00f4ng c\u1ea7n ph\u1ea3i vi\u1ebft hoa SELECT v\u00e0 FROM nh\u01b0ng theo quy c\u00e1ch n\u00e0y s\u1ebd gi\u00fap query c\u1ee7a b\u1ea1n d\u1ec5 \u0111\u1ecdc h\u01a1n"}}