{"cell_type":{"690e36dc":"code","836c9df0":"code","bb275584":"code","110bddc4":"code","1d5f8a3a":"code","51a825a3":"code","5414a2ee":"code","f1562ed0":"code","1a538d2b":"code","6e0d179a":"code","271d3595":"code","2408b3ff":"code","f573db7f":"code","c2d09310":"code","1726884a":"code","22d79f77":"code","40ea8084":"code","fbd7702c":"code","b396978a":"code","0e72c64c":"code","88835a6f":"code","d475834d":"markdown","ec9806cb":"markdown"},"source":{"690e36dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","836c9df0":"train_set = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest_set = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsample = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","bb275584":"train_set.head()","110bddc4":"test_set.head()","1d5f8a3a":"sample.head()","51a825a3":"x = train_set[\"text\"]\ny = train_set[\"target\"]\nprint(np.shape(y))\n\n\nx_test = test_set[\"text\"]","5414a2ee":"x.head()","f1562ed0":"y.head()","1a538d2b":"tokenizer = Tokenizer(num_words = 10000)\ntokenizer.fit_on_texts(x)\n\nx_index = tokenizer.word_index\nsequence = tokenizer.texts_to_sequences(x)\nx_padded = pad_sequences(sequence)","6e0d179a":"test_sequence = tokenizer.texts_to_sequences(x_test)\nx_test_padded = pad_sequences(test_sequence)","271d3595":"print(type(x_index))\nprint(type(sequence))\nprint(type(x_padded))","2408b3ff":"print(np.shape(x_padded))\nprint(len(x_index))","f573db7f":"model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(10000, 64, input_length = 10),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid')\n])","c2d09310":"model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\nhistory = model.fit(x_padded, y, validation_split=0.33, epochs=10)","1726884a":"import matplotlib.pyplot as plt\n\nprint(history.history.keys())","22d79f77":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\n\nplt.show()","40ea8084":"predictions = model.predict(x_test_padded)\npredictions = predictions.flatten()\nprint(predictions)\nprint(np.shape(predictions))","fbd7702c":"predictions = (predictions>=.5)","b396978a":"predictions = predictions.astype(int)\nprint(predictions)","0e72c64c":"print(type(predictions))","88835a6f":"output = pd.DataFrame({'id': test_set.id, 'target': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","d475834d":"# 1. Loading the data as Dataframe","ec9806cb":"# Have a look, what it look like!"}}