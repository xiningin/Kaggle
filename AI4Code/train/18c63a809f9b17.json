{"cell_type":{"351bdf8c":"code","696a7745":"code","062cb265":"code","10a59576":"code","27b3661e":"code","c51445ab":"code","5092f84d":"code","4b4051d5":"code","a02fa901":"code","21e319dd":"code","1d632abd":"code","83f20c78":"code","1e32e212":"code","8f8edf20":"code","0c488438":"code","2b78fb78":"code","16044772":"code","866af122":"code","96674b3d":"code","a82dea9d":"code","16f49f8a":"code","8ff4d1a2":"code","ce4f44d6":"code","717b3fd4":"code","ac801a85":"code","cab4b25f":"code","1004a22c":"code","5b252200":"code","1312fd24":"code","ba980622":"code","f4c9c53a":"code","1dbf61ef":"code","002bc167":"code","a03647b6":"code","a645a6d9":"code","3a00651c":"code","580f58da":"code","1bed05bf":"code","117e1ae9":"code","cc0bd846":"code","321433af":"code","36be7afe":"code","84689491":"code","6d408a8a":"code","5b7cd69c":"code","d7b011a7":"code","6b858b0f":"code","9b2e6918":"code","0a4954e1":"code","a3c3ab33":"code","53dc016e":"code","1aa438e4":"code","50deb7af":"code","7c56e428":"code","f0d7bd9d":"code","b192a7eb":"code","b20eb173":"code","6af93e90":"code","be44087a":"code","53ed3d29":"code","b6f4ef21":"code","2f4e984c":"code","d2df3af8":"code","00b2771e":"code","12459da4":"code","3b5b1ebc":"code","45562243":"code","98d83db1":"code","937d5f12":"code","66186a9a":"code","6a46140c":"code","b3a497c1":"code","cd657367":"code","57956479":"code","568e987f":"code","55c931ba":"code","5976e5df":"code","f7bb1fcf":"code","b4524b72":"code","8376435f":"code","654db59b":"markdown","71ac7b41":"markdown","eb5fab3b":"markdown","5ac10c6d":"markdown","26191de9":"markdown","0c831762":"markdown","424b40bd":"markdown","44fe9cb1":"markdown","bf57d99e":"markdown","cf7f7099":"markdown","3029a883":"markdown","9a4cce64":"markdown","95fe370e":"markdown","e4329c68":"markdown"},"source":{"351bdf8c":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom scipy import stats\nfrom scipy.stats import norm, skew","696a7745":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","062cb265":"print(train.head())\nprint('**'* 50)\nprint(test.head())","10a59576":"print(train.info())\nprint('**'* 50)\nprint(test.info())","27b3661e":"plt.figure(figsize=(30,8))\nsns.heatmap(train.corr(),cmap='coolwarm',annot = True)\nplt.show()","c51445ab":"corr = train.corr()","5092f84d":"corr[corr['SalePrice']>0.3].index","4b4051d5":"train.info()","a02fa901":"train = train[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'SalePrice']]","21e319dd":"test=test[['LotFrontage', 'OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n       'BsmtFinSF1', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'GrLivArea',\n       'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n       'GarageArea', 'WoodDeckSF', 'OpenPorchSF']]","1d632abd":"sns.lmplot(x='1stFlrSF',y='SalePrice',data=train) # 1stFlrSF possui grande correla\u00e7\u00e3o com SalePrice.","83f20c78":"plt.figure(figsize=(16,8))\nsns.barplot(x='FullBath',y = 'SalePrice',data=train)\nplt.show()","1e32e212":"#missing data\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","8f8edf20":"# tratando missing data\ntrain = train.drop((missing_data[missing_data['Total'] > 81]).index,1)","0c488438":"train.isnull().sum().sort_values(ascending=False).head(20)","2b78fb78":"#missing data\ntotal_test = test.isnull().sum().sort_values(ascending=False)\npercent_test = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total_test, percent_test], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","16044772":"# tratando missing data\ntest = test.drop((missing_data[missing_data['Total'] > 78]).index,1)","866af122":"test.isnull().sum().sort_values(ascending=False).head(20)","96674b3d":"train.isnull().sum().sort_values(ascending = False).head(20)","a82dea9d":"# True\/False para variaveis categ\u00f3ricas(strings)\ncategorical_feature_mask = train.dtypes==object\n\n# filtramos e transformamos em lista com .tolist()\ncategorical_cols = train.columns[categorical_feature_mask].tolist()","16f49f8a":"categorical_cols","8ff4d1a2":"# True\/False para variaveis categ\u00f3ricas(strings)\ncategorical_feature_mask_test = test.dtypes==object\n\n# filtramos e transformamos em lista com .tolist()\ncategorical_cols_test = test.columns[categorical_feature_mask_test].tolist()","ce4f44d6":"train.head()","717b3fd4":"test.head()","ac801a85":"train.isnull().sum().sort_values(ascending=False).head(20)","cab4b25f":"test.isnull().sum().sort_values(ascending=False).head(20)","1004a22c":"train['GarageYrBlt'] = train['GarageYrBlt'].fillna(train['GarageYrBlt'].mean())\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(train['MasVnrArea'].mean())","5b252200":"# Matriz de correla\u00e7\u00e3o com SalePrice\nk = 15 #variaveis para heatmap\nplt.figure(figsize=(16,8))\ncorrmat = train.corr()\n# top 15 correlacionadas\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","1312fd24":"train = train[cols]","ba980622":"cols","f4c9c53a":"test=test[cols.drop('SalePrice')]","1dbf61ef":"test.isnull().sum().sort_values(ascending=False).head(20)","002bc167":"test.head()","a03647b6":"# Preencher NA com m\u00e9dia\ntest['GarageYrBlt'] = test['GarageYrBlt'].fillna(test['GarageYrBlt'].mean())\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(test['MasVnrArea'].mean())\ntest['GarageCars'] = test['GarageCars'].fillna(test['GarageCars'].mean())\ntest['GarageArea'] = test['GarageArea'].fillna(test['GarageArea'].mean())\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].fillna(test['BsmtFinSF1'].mean())\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].fillna(test['TotalBsmtSF'].mean())","a645a6d9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train.drop('SalePrice', axis=1), train['SalePrice'], test_size=0.3, random_state=101)","3a00651c":"# StandardScaler\n\ny_train= y_train.values.reshape(-1,1)\ny_test= y_test.values.reshape(-1,1)\n\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.fit_transform(X_test)\ny_train = sc_X.fit_transform(y_train)\ny_test = sc_y.fit_transform(y_test)","580f58da":"X_train","1bed05bf":"from sklearn.linear_model import LinearRegression\nlm = LinearRegression()","117e1ae9":"lm.fit(X_train,y_train)\nprint(lm)","cc0bd846":"# Intercept\nprint(lm.intercept_)","321433af":"# Coeficiente\nprint(lm.coef_)","36be7afe":"predictions = lm.predict(X_test)\npredictions= predictions.reshape(-1,1)","84689491":"plt.figure(figsize=(15,8))\nplt.scatter(y_test,predictions)\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.show()","6d408a8a":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(predictions, label = 'predict')\nplt.show()","5b7cd69c":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, predictions))\nprint('MSE:', metrics.mean_squared_error(y_test, predictions))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions)))","d7b011a7":"from sklearn import ensemble\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import mean_squared_error, r2_score","6b858b0f":"params = {'n_estimators': 100, 'max_depth': 4, 'min_samples_split': 2,\n          'learning_rate': 0.05, 'loss': 'ls'}\nclf = ensemble.GradientBoostingRegressor(**params)\n\nclf.fit(X_train, y_train)","9b2e6918":"clf_pred=clf.predict(X_test)\nclf_pred= clf_pred.reshape(-1,1)","0a4954e1":"print('MAE:', metrics.mean_absolute_error(y_test, clf_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, clf_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, clf_pred)))","a3c3ab33":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(clf_pred, label = 'predict')\nplt.show()","53dc016e":"from sklearn.tree import DecisionTreeRegressor\ndtreg = DecisionTreeRegressor(random_state = 100)\ndtreg.fit(X_train, y_train)","1aa438e4":"dtr_pred = dtreg.predict(X_test)\ndtr_pred= dtr_pred.reshape(-1,1)","50deb7af":"print('MAE:', metrics.mean_absolute_error(y_test, dtr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, dtr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, dtr_pred)))","7c56e428":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(dtr_pred, label = 'predict')\nplt.show()","f0d7bd9d":"from sklearn.svm import SVR\nsvr = SVR(kernel = 'rbf')\nsvr.fit(X_train, y_train)","b192a7eb":"svr_pred = svr.predict(X_test)\nsvr_pred= svr_pred.reshape(-1,1)","b20eb173":"print('MAE:', metrics.mean_absolute_error(y_test, svr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, svr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, svr_pred)))","6af93e90":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(svr_pred, label = 'predict')\nplt.show()","be44087a":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)","53ed3d29":"rfr_pred= rfr.predict(X_test)\nrfr_pred = rfr_pred.reshape(-1,1)","b6f4ef21":"print('MAE:', metrics.mean_absolute_error(y_test, rfr_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, rfr_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, rfr_pred)))","2f4e984c":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(rfr_pred, label = 'predict')\nplt.show()","d2df3af8":"import lightgbm as lgb\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.1, n_estimators=500,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","00b2771e":"model_lgb.fit(X_train,y_train)","12459da4":"lgb_pred = model_lgb.predict(X_test)\nlgb_pred = lgb_pred.reshape(-1,1)","3b5b1ebc":"print('MAE:', metrics.mean_absolute_error(y_test, lgb_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, lgb_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lgb_pred)))","45562243":"plt.figure(figsize=(16,8))\nplt.plot(y_test,label ='Test')\nplt.plot(lgb_pred, label = 'predict')\nplt.show()","98d83db1":"error_rate=np.array([metrics.mean_squared_error(y_test, predictions),metrics.mean_squared_error(y_test, clf_pred),metrics.mean_squared_error(y_test, dtr_pred),metrics.mean_squared_error(y_test, svr_pred),metrics.mean_squared_error(y_test, rfr_pred)])","937d5f12":"a = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","66186a9a":"test_id = a['Id']\na = pd.DataFrame(test_id, columns=['Id'])","6a46140c":"test = sc_X.fit_transform(test)","b3a497c1":"test_prediction_lgbm=model_lgb.predict(test)\ntest_prediction_lgbm= test_prediction_lgbm.reshape(-1,1)","cd657367":"test_prediction_lgbm","57956479":"test_prediction_lgbm =sc_y.inverse_transform(test_prediction_lgbm)","568e987f":"test_prediction_lgbm = pd.DataFrame(test_prediction_lgbm, columns=['SalePrice'])","55c931ba":"result = pd.concat([a,test_prediction_lgbm], axis=1)","5976e5df":"result.head()","f7bb1fcf":"result.tail()","b4524b72":"result.to_csv('submit.csv',index=False)","8376435f":"#!kaggle competitions submit -c house-prices-advanced-regression-techniques -f submit.csv -m \"this is my second compete in kaggle\"","654db59b":"## Linear Regression","71ac7b41":"# 8. Choice The Better model","eb5fab3b":"# 5. predictive model","5ac10c6d":"# 3. Dataviz","26191de9":"## GRADIENT BOOSTING","0c831762":"# 6. Evaluate Model\n\n---\n\nThe slope indicates the gradient of a line and the intercept indicates the place where it crosses an axis. The slope and the intercept define the linear relationship between two variables, and can be used to estimate an average rate of change. The greater the magnitude of the slope, the steeper the line and the greater the rate of change. By examining a line's equation, you can quickly determine its slope and y-intercept (where the line crosses the y-axis).\n\n![texto alternativo](https:\/\/support.minitab.com\/pt-br\/minitab\/18\/scatterplot_linear_equation_2_plus_5x.png)<br>\nThe slope is 5 positive. When x increases by 1, y increases by 5. The y-intercept is 2. <br> <br>\nThe regression coefficients represent the average change in the response variable for a unit of change in the predictor variable.","424b40bd":"## DECISION  TREES","44fe9cb1":"## SVM","bf57d99e":"# 9. kaggle submit","cf7f7099":"# 7. Predi\u00e7\u00f5es","3029a883":"## RANDOM FOREST","9a4cce64":"## LGBM","95fe370e":"# 2. Data Acquisition","e4329c68":"# 4. Feature Engineering"}}