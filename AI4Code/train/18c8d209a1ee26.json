{"cell_type":{"1c1337c3":"code","c3ad1b7d":"code","4a44071f":"code","5d21f511":"code","6390af10":"code","95d80b3d":"code","26db0212":"code","6a27f8b9":"code","a41c65f7":"code","cd4e4875":"code","5c8d616c":"code","a1fa13e9":"code","95ed35d0":"code","0caef711":"code","62e81f34":"code","a52fff7a":"code","ee69688f":"code","51b561b3":"code","831ec725":"code","9fba0b80":"code","3155b580":"code","782422a7":"code","50dccd1a":"code","4817d3cb":"code","0ee8c9b0":"code","624fcd76":"code","f9f8bed2":"code","fa9689f6":"code","cc0bdb89":"code","c13fec15":"code","15d33c55":"code","90dcfcbd":"code","6b6d1d14":"code","a531ded9":"code","c4777972":"code","c6f54118":"code","2805d7d2":"markdown","71fe638c":"markdown","405bc41c":"markdown","e0f0694a":"markdown","8819fe49":"markdown","8f475768":"markdown","16cd49c7":"markdown","ac13e126":"markdown","3a35425a":"markdown","934bb4ee":"markdown","081da042":"markdown","9adcb584":"markdown","d8c257af":"markdown","0101da4b":"markdown","49d3c69e":"markdown","e70ecb7c":"markdown","4e2ee0ff":"markdown","0d2b6d5f":"markdown","58b9cc2d":"markdown","c7351a32":"markdown","ee88b67d":"markdown","0bb26c53":"markdown","2279d1d1":"markdown","661eabb2":"markdown"},"source":{"1c1337c3":"import pandas as pd","c3ad1b7d":"trade = pd.read_csv('..\/input\/tradein\/TradeInventories.csv',index_col=0,parse_dates=True)\ntrade.index.freq='MS'","4a44071f":"trade.head()","5d21f511":"%matplotlib inline","6390af10":"trade['Inventories'].plot(figsize=(12,5))","95d80b3d":"from statsmodels.tsa.statespace.tools import diff","26db0212":"trade['d1'] = diff(trade['Inventories'],k_diff=1)","6a27f8b9":"trade['d1'].plot(figsize=(12,5))","a41c65f7":"from statsmodels.tsa.stattools import adfuller\n\ndef adf_test(series,title=''):\n    \"\"\"\n    Pass in a time series and an optional title, returns an ADF report\n    \"\"\"\n    print(f'Augmented Dickey-Fuller Test: {title}')\n    result = adfuller(series.dropna(),autolag='AIC') # .dropna() handles differenced data\n    \n    labels = ['ADF test statistic','p-value','# lags used','# observations']\n    out = pd.Series(result[0:4],index=labels)\n\n    for key,val in result[4].items():\n        out[f'critical value ({key})']=val\n        \n    print(out.to_string())          # .to_string() removes the line \"dtype: float64\"\n    \n    if result[1] <= 0.05:\n        print(\"Strong evidence against the null hypothesis\")\n        print(\"Reject the null hypothesis\")\n        print(\"Data has no unit root and is stationary\")\n    else:\n        print(\"Weak evidence against the null hypothesis\")\n        print(\"Fail to reject the null hypothesis\")\n        print(\"Data has a unit root and is non-stationary\")","cd4e4875":"adf_test(trade['Inventories'],title='DF for orignal data')","5c8d616c":"adf_test(trade['d1'],title='DF for 1 diff data')","a1fa13e9":"import numpy as np\nfrom statsmodels.tsa.arima_model import ARMA,ARMAResults,ARIMA,ARIMAResults\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nimport warnings\nwarnings.filterwarnings(\"ignore\")","95ed35d0":"df2 = pd.read_csv('..\/input\/tradein\/TradeInventories.csv',index_col=0,parse_dates=True)\ndf2.index.freq='MS'","0caef711":"import matplotlib.ticker as ticker\nformatter = ticker.StrMethodFormatter('{x:,.0f}')\n\ntitle = 'Real Manufacturing and Trade Inventories'\nylabel='Chained 2012 Dollars'\nxlabel='' # we don't really need a label here\n\nax = df2['Inventories'].plot(figsize=(12,5),title=title)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel, ylabel=ylabel)\nax.yaxis.set_major_formatter(formatter);","62e81f34":"from statsmodels.tsa.statespace.tools import diff\ndf2['d1'] = diff(df2['Inventories'],k_diff=1)\n\nadf_test(df2['d1'],'Real Manufacturing and Trade Inventories')","a52fff7a":"title = 'Autocorrelation: Real Manufacturing and Trade Inventories'\nlags = 40\nplot_acf(df2['Inventories'],title=title,lags=lags);","ee69688f":"title = 'Partial Autocorrelation: Real Manufacturing and Trade Inventories'\nlags = 40\nplot_pacf(df2['Inventories'],title=title,lags=lags);","51b561b3":"len(df2)","831ec725":"# Set one year for testing\ntrain = df2.iloc[:252]\ntest = df2.iloc[252:]","9fba0b80":"model = ARIMA(train['Inventories'],order=(1,1,0))\nresults = model.fit()\nresults.summary() ","3155b580":"model = ARIMA(train['Inventories'],order=(1,1,1))\nresults = model.fit()\nresults.summary()","782422a7":"start=len(train)\nend=len(train)+len(test)-1\npredictions = results.predict(start=start, end=end, dynamic=False, typ='levels').rename('ARIMA(1,1,1) Predictions')","50dccd1a":"for i in range(len(predictions)):\n    print(f\"predicted={predictions[i]:<11.10}, expected={test['Inventories'][i]}\")","4817d3cb":"title = 'Real Manufacturing and Trade Inventories'\nylabel='Chained 2012 Dollars'\nxlabel=''\n\nax = test['Inventories'].plot(legend=True,figsize=(12,6),title=title)\npredictions.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel, ylabel=ylabel)\nax.yaxis.set_major_formatter(formatter);","0ee8c9b0":"from statsmodels.tools.eval_measures import rmse\n\nerror = rmse(test['Inventories'], predictions)\nprint(f'ARIMA(1,1,1) RMSE Error: {error:11.10}')","624fcd76":"model = ARIMA(df2['Inventories'],order=(1,1,1))\nresults = model.fit()\nfcast = results.predict(len(df2),len(df2)+11,typ='levels').rename('ARIMA(1,1,1) Forecast')","f9f8bed2":"title = 'Real Manufacturing and Trade Inventories'\nylabel='Chained 2012 Dollars'\nxlabel=''\n\nax = df2['Inventories'].plot(legend=True,figsize=(12,6),title=title)\nfcast.plot(legend=True)\nax.autoscale(axis='x',tight=True)\nax.set(xlabel=xlabel, ylabel=ylabel)\nax.yaxis.set_major_formatter(formatter);","fa9689f6":"from statsmodels.tsa.seasonal import seasonal_decompose\n\nresult = seasonal_decompose(df2['Inventories'], model='additive')  # model='add' also works\nresult.plot();","cc0bdb89":"from statsmodels.graphics.tsaplots import month_plot,quarter_plot","c13fec15":"df = pd.read_csv('..\/input\/airline1\/airline_passengers.csv',index_col=0, parse_dates=True)\ndf.index.freq='MS'","15d33c55":"df.head()","90dcfcbd":"month_plot(df['Thousands of Passengers']);","6b6d1d14":"# !!pip install pyramid-arima\nfrom pmdrima import auto_arima","a531ded9":"stepwise_fit = auto_arima(df2['Inventories'], start_p=0, start_q=0,\n                          max_p=2, max_q=2, m=12,\n                          seasonal=False,\n                          d=None, trace=True,\n                          error_action='ignore',   # we don't want to know if an order does not work\n                          suppress_warnings=True,  # we don't want convergence warnings\n                          stepwise=True)           # set to stepwise\n\nstepwise_fit.summary()","c4777972":"stepwise_fit = auto_arima(df2['Inventories'], start_p=0, start_q=0,\n                          max_p=2, max_q=2, m=4,\n                          seasonal=True,\n                          d=None, trace=True,\n                          error_action='ignore',   # we don't want to know if an order does not work\n                          suppress_warnings=True,  # we don't want convergence warnings\n                          stepwise=True)           # set to stepwise\n\nstepwise_fit.summary()","c6f54118":"stepwise_fit = auto_arima(df['Thousands of Passengers'], start_p=0, start_q=0,\n                          max_p=2, max_q=2, m=12,\n                          seasonal=True,\n                          d=None, trace=True,\n                          error_action='ignore',   # we don't want to know if an order does not work\n                          suppress_warnings=True,  # we don't want convergence warnings\n                          stepwise=True)           # set to stepwise\n\nstepwise_fit.summary()","2805d7d2":"**Time Series Analysis Basics and ARIMA model**","71fe638c":"### Forecasting","405bc41c":"ACF is the autocorelation between the time laged value of time series while PACF is partial autocorelation between the lags removing the effect of other lags.\n\nACF and PACF can be helpful in finding the ARIMA (p,d,0) model or ARIMA(0,d,q) models but for combine P,d,q model is become very difficult to identify through these plots","e0f0694a":"The data may follow an ARIMA( p, d,0) model if the ACF and PACF plots of the differenced data show the following patterns:\n\nthe ACF is exponentially decaying or sinusoidal;\nthere is a significant spike at lag  p in the PACF, but none beyond lag p.\n\nThe data may follow an ARIMA(0,d,q) model if the ACF and PACF plots of the differenced data show the following patterns:\n\nthe PACF is exponentially decaying or sinusoidal;\nthere is a significant spike at lag q in the ACF, but none beyond lag q\n .","8819fe49":"### Seasonality","8f475768":"# ACF and PACF\n# Autocorrelation Function \/ Partial Autocorrelation Function","16cd49c7":"## the augmented Dickey-Fuller Test\nA test to check the stationarity of time series","ac13e126":"![stationarity.PNG](attachment:stationarity.PNG)","3a35425a":"![image.jpg](attachment:image.jpg)","934bb4ee":"**The Above data looks stationary but we have a statistical tool to check for stationarity of the Time seties which is called Dickey-Fuller Test**","081da042":"**ARIMA MODEL IS COMBINATION OF THREE DIFFERENT APPROACHES** .\n\nARIMA, or Autoregressive Integrated Moving Average is actually a combination of 3 models:\n\nAR(p) Autoregression - a regression model that utilizes the dependent relationship between a current observation and observations over a previous period\n\nI(d) Integration - uses differencing of observations (subtracting an observation from an observation at the previous time step) in order to make the time series stationary\n\nMA(q) Moving Average - a model that uses the dependency between an observation and a residual error from a moving average model applied to lagged observations.\n\n**Once we understand the components, we'll investigate how to best choose the  \ud835\udc5d ,  \ud835\udc51  and  \ud835\udc5e  values required by the model**","9adcb584":"### ARIMA","d8c257af":"**Evaluating the results**","0101da4b":"![image.png](attachment:image.png)","49d3c69e":"The Auto Arima is not getting installed but it can  be used to find whitch ARIMA( p,d,q) can be best fit for the data","e70ecb7c":"![image.png](attachment:image.png)","4e2ee0ff":"**------------------------------------------------------------------------------------------------------------------------**","0d2b6d5f":"![image.png](attachment:image.png)","58b9cc2d":"The curve b , h and g have stationarity rest others are are not stationary ","c7351a32":"**Stationarity and differencing**\nStationary means when the data at a given time does not have corelation with same lag of time of Data at different time. What does it means suppose we have two years of Data . If the value at the month of Jun does not have a corelation on value at next year Jun that means the series is stationary. The statinary Series can have cycles , ups and downs but no trend and sesonality. ","ee88b67d":"Lets Check One Example","0bb26c53":"![image.png](attachment:image.png)","2279d1d1":"I have collected materials to understand stationarity and other time series aspects in this kernal.\n\nBelow are references for the same:\n1. [Pierian_Data Josh Portilla time Serie course at Udemy.com](https:\/\/www.udemy.com\/share\/101WWMBEEYc15TQHw=\/)\n2. Forasting: Principles and Practice by Rob J Hyndman and George Anthanasopoulos\nHyndman, R.J., & Athanasopoulos, G. (2018) Forecasting: principles and practice, 2nd edition, OTexts: Melbourne, Australia. OTexts.com\/fpp2. Accessed on 24-03-2020\n\n","661eabb2":"Certainly the above series is not Stationary To convert a non Stationary series into a Stationary series we do Differencing \nDifference means takeing taking the difference of value of next time unit with previous time unit value... However since the first observation can take part in this process , the data gets reduced by 1 observation"}}