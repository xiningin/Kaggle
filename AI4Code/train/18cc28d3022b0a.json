{"cell_type":{"ce801562":"code","16a0e04d":"code","6e224604":"code","e323ffe0":"code","b385a257":"code","acbb3057":"code","e3faa1fa":"code","c16042f8":"code","f107165c":"code","3216ac17":"code","5e62a7e1":"code","0ccf8823":"code","afcc2b67":"code","e86ba980":"markdown","168c41b1":"markdown","be6c1bc5":"markdown"},"source":{"ce801562":"import pandas as pd\nimport numpy as np # linear algebra","16a0e04d":"image_columns = [f\"pixel{i}\" for i in range(1, 785)]\nlabel_column = \"label\"","6e224604":"train = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv\")\ntrain.head()","e323ffe0":"train_images = np.array(train[image_columns]).reshape((-1, 28, 28, 1))\ntrain_images = train_images \/ 255.0\ntrain_images.shape","b385a257":"test = pd.read_csv(\"..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv\")\ntest.head()","acbb3057":"test_images = np.array(test[image_columns]).reshape((-1, 28, 28, 1))\ntest_images = test_images \/ 255.0\ntest_images.shape","e3faa1fa":"labels = sorted(train[label_column].unique())\nlabel_index = dict([(label, i) for i, label in enumerate(labels)])\nprint(label_index)","c16042f8":"train_labels = np.array([label_index[label] for label in train[label_column]])\ntrain_labels.shape","f107165c":"test_labels = np.array([label_index[label] for label in test[label_column]])\ntest_labels.shape","3216ac17":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","5e62a7e1":"model = keras.Sequential([\n    layers.Input((28, 28, 1)),\n    layers.Conv2D(32, 3, activation=\"relu\", padding=\"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.Conv2D(64, 3, activation=\"relu\", padding=\"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.Conv2D(128, 3, activation=\"relu\", padding=\"same\"),\n    layers.MaxPooling2D(),\n    layers.BatchNormalization(),\n    layers.GlobalAveragePooling2D(),\n    layers.Dense(64, activation=\"relu\"),\n    layers.Dropout(0.3),\n    layers.Dense(len(labels), activation=\"softmax\")\n])\nmodel.compile(loss=\"sparse_categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\nmodel.summary();","0ccf8823":"history = model.fit(train_images, train_labels, epochs=10, batch_size=256, validation_data=(test_images, test_labels))","afcc2b67":"pd.DataFrame(history.history).plot()","e86ba980":"## Sign Language MNIST Classification","168c41b1":"## Modeling","be6c1bc5":"##### Labels"}}