{"cell_type":{"308ed7b5":"code","47ad4aa9":"code","9f0f60f6":"code","f95d17f7":"code","327df2f8":"code","999e2528":"code","ea22fc41":"code","9040a6a8":"code","1297d5a2":"code","02507495":"code","23837bcc":"code","3738d203":"code","4df72cda":"code","9dbf9b47":"code","e357b623":"code","2369e418":"code","b03f3dc1":"code","e3cb8135":"code","5c439b82":"code","ad98a112":"code","491d78ca":"code","da3831f4":"code","838dc6b5":"code","d661ba5c":"code","a91d1785":"code","c068f7d2":"code","55ff9238":"code","9edd1057":"code","c728dfbd":"code","ee9fd0e2":"code","dbd842ff":"code","b881adee":"code","208cc1c8":"code","10540c14":"code","0881f9fe":"code","5b606c30":"code","f08697ab":"code","303c3c2c":"code","38d473f2":"markdown","c67d4ee6":"markdown","f597cc29":"markdown","94d0f0df":"markdown","b8374f6f":"markdown","83fbd506":"markdown"},"source":{"308ed7b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47ad4aa9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nsns.set()","9f0f60f6":"test=pd.read_csv('..\/input\/customer-segmentation\/test.csv')\ntest.sample(6)","f95d17f7":"test.describe()","327df2f8":"train=pd.read_csv('..\/input\/customer-segmentation\/train.csv',index_col=[0])\ntrain.sample(6)","999e2528":"train.describe()","ea22fc41":"train.info()","9040a6a8":"train.isna().sum()","1297d5a2":"train['Ever_Married'].fillna(method='ffill',inplace=True)\ntrain['Profession'].fillna(method='ffill',inplace=True)\ntrain['Graduated'].fillna(method='bfill',inplace=True)\ntrain['Work_Experience'].fillna(method='bfill',inplace=True)\ntrain['Family_Size'].fillna(method='bfill',inplace=True)\n","02507495":"train.isna().sum()","23837bcc":"train1=train[['Gender', 'Ever_Married', 'Age', 'Graduated', 'Profession',\n       'Work_Experience', 'Spending_Score', 'Family_Size']]\ntrain1","3738d203":"train1.groupby('Profession').mean()","4df72cda":"train1.groupby('Ever_Married').mean()","9dbf9b47":"train1.groupby('Gender').mean()","e357b623":"train1.groupby('Spending_Score').mean()","2369e418":"train1['Profession']=train1['Profession'].map({'Artist':0, \n                                               'Doctor':1, \n                                               'Engineer':2,\n                                               'Entertainment':3,\n                                               'Executive':4,\n                                               'Healthcare':5,\n                                               'Homemaker':6,\n                                               'Lawyer':7, \n                                               'Marketing':8})\ntrain1['Spending_Score']=train1['Spending_Score'].map({'Average':0,\n                                                       'High':1,\n                                                       'Low':2})\ntrain1['Gender']=train1['Gender'].map({'Female':0,\n                                       'Male':1})\ntrain1['Ever_Married']=train1['Ever_Married'].map({'No':0,\n                                                  'Yes':1})\ntrain1['Graduated']=train1['Graduated'].map({'No':0,\n                                                  'Yes':1})","b03f3dc1":"train1.sample(5)","e3cb8135":"train1.corr().round(2)","5c439b82":"plt.figure(figsize=(10,5))\nplt.xticks(rotation=90)\nplt.title(\"Correlation Map\",fontsize=20)\nsns.heatmap(train1.corr().round(2),vmin=-1,vmax=1,annot=True)","ad98a112":"stand=StandardScaler()\nstand.fit(train1)","491d78ca":"stand.transform(train1)","da3831f4":"link=linkage(stand.transform(train1),'ward')\nplt.figure(figsize=(20,20))\ndendrogram(link,p=5)\nplt.ylabel('Distance')\nplt.title('Hierarchitical Segmentation')\nplt.show()","838dc6b5":"train1.info()","d661ba5c":"train1[['Work_Experience','Family_Size']]=train1[['Work_Experience','Family_Size']].astype('int32')\n#train1['Family_Size']=train1['Family_Size'].asty","a91d1785":"stand=StandardScaler()\nstand.fit_transform(train1)","c068f7d2":"wcss=[]\nfor i in range(1,11):\n    kmeans=KMeans(n_clusters=i,random_state=42)\n    kmeans=kmeans.fit(stand.fit_transform(train1))\n    wcss.append(kmeans.inertia_)\n","55ff9238":"wcss","9edd1057":"plt.figure(figsize=(10,5))\nplt.plot(range(1,11),wcss,marker='o')\nplt.title('Kmeans Segmentation')\nplt.xlabel('Segmentation Range')","c728dfbd":"kmeans=KMeans(n_clusters=4,random_state=40)\nkmeans.fit(stand.fit_transform(train1))\nkmeans.labels_","ee9fd0e2":"kmeans_seg=pd.DataFrame(train1)\nkmeans_seg[\"segmentation\"]=kmeans.labels_\nkmeans_seg","dbd842ff":"kmeans_seg_grp=kmeans_seg.groupby('segmentation').mean().round(2)\nkmeans_seg_grp","b881adee":"kmeans_seg_grp.rename({0:'Average',1:'Low',2:'work & spend',3:'Good Profeesion'},inplace=True)\nkmeans_seg_grp","208cc1c8":"pca=PCA()\npca.fit(stand.fit_transform(train1))\npca.explained_variance_ratio_.cumsum()","10540c14":"plt.figure(figsize=(10,5))\nplt.plot(range(1,10),pca.explained_variance_ratio_.cumsum(),marker='o')\nplt.title('PCA Clustering')\nplt.xlabel(\"Clustering Range\")","0881f9fe":"pca=PCA(n_components=4)\npca.fit(stand.fit_transform(train1))\npca.components_","5b606c30":"train1.columns","f08697ab":"pca_seg=pd.DataFrame(pca.components_,index=['comp 1','comp 2','comp 3','comp 4'],columns=['Gender', 'Ever_Married', 'Age', 'Graduated', 'Profession',\n       'Work_Experience', 'Spending_Score', 'Family_Size', 'segmentation']).round(3)\npca_seg","303c3c2c":"plt.figure(figsize=(10,5))\nsns.heatmap(pca_seg,annot=True)\nplt.title('Component Map')","38d473f2":"# **K-Means Clustering**","c67d4ee6":"# **Hierachitical**","f597cc29":"# **Standadization**","94d0f0df":"# **Data Preprocessing**","b8374f6f":"# **Data Exploration**","83fbd506":"# **PCA**"}}