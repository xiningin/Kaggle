{"cell_type":{"40fd8bb8":"code","0eef4ceb":"code","8dc916e4":"code","868f65ad":"code","8cd63ba0":"code","97aaebe0":"code","6e94a88f":"code","7517367b":"code","8b7a28c8":"code","051e6d1e":"code","038ec479":"code","308c9f3c":"code","367c04a7":"code","00d4e941":"code","9409518c":"code","f6da91f8":"code","307dca20":"code","50237278":"code","bcecbf48":"code","889ffc34":"code","7c64189e":"code","0bfa57e4":"code","8f6c7b8d":"code","bf0537ea":"markdown","d3f9e208":"markdown","c1a454fd":"markdown","b0d40af8":"markdown","f92f3147":"markdown","57deac71":"markdown","b1c6a317":"markdown","a521b3b1":"markdown","bda0c90c":"markdown","494114fc":"markdown","5be39a3a":"markdown","d5e42b37":"markdown","98555ca7":"markdown","e12e57b2":"markdown","5b7817be":"markdown","e1744a60":"markdown","f333c9f2":"markdown","b34dce02":"markdown","a4e0e97c":"markdown","b7850d9c":"markdown","66844ca2":"markdown","aa623050":"markdown","a68339e9":"markdown","cd0a8c3a":"markdown","b7c99b07":"markdown","daa8e288":"markdown","561b7882":"markdown"},"source":{"40fd8bb8":"import numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n    \n\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\nimport scipy.stats as sts\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndata = pd.read_csv(\"\/kaggle\/input\/fifa-20-complete-player-dataset\/players_20.csv\")","0eef4ceb":"pip install chart_studio","8dc916e4":"nations = data['nationality'].value_counts()\n\nother_nations = (data['nationality'].value_counts() < np.mean(nations.values))\ndata['nationality'] = data['nationality'].apply(lambda x: 'Others' if other_nations.loc[x] == True else x)\n\nfig = px.pie(data, names=\"nationality\")\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","868f65ad":"fig = px.pie(data, names='preferred_foot')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","8cd63ba0":"data['body_type'].value_counts()\n\nfig = px.pie(data, names='body_type')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","97aaebe0":"fig = px.pie(data, names='real_face')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","6e94a88f":"import chart_studio.plotly as py\nimport plotly.figure_factory as ff\n\ndf_head = (data.sort_values(by='age', ascending=False)).head(10)\ncols = ['short_name', 'age','nationality', 'club']\ntable = ff.create_table(df_head[cols])\ntable.show()\n\ndf_head = (data.sort_values(by='age', ascending=True)).head(10)\ncols = ['short_name', 'age','nationality', 'club']\ntable = ff.create_table(df_head[cols])\ntable.show()","7517367b":"plt.figure(figsize=(15,8))\n\nage = data['age']\nfig = px.histogram(age,marginal=\"box\")\nfig.show()\n\nheight = data['height_cm']\nfig = px.histogram(height,marginal=\"box\")\nfig.show()\n\nweight = data['weight_kg']\nfig = px.histogram(weight,marginal=\"box\")\nfig.show()","8b7a28c8":"df_head = (data.sort_values(by='overall', ascending=False)).head(10)\ncols = ['short_name', 'overall']\ntable = ff.create_table(df_head[cols])\ntable.show()\n\ndf_head = (data.sort_values(by='potential', ascending=False)).head(10)\ncols = ['short_name', 'potential']\ntable = ff.create_table(df_head[cols])\ntable.show()","051e6d1e":"plt.figure(figsize=(12,8))\nsns.distplot(data['overall'],bins=45)\nsns.distplot(data['potential'], bins=45)\nplt.legend([\"overall score\", \"potential score\"])\nplt.show()","038ec479":"df_head = (data.sort_values(by='value_eur', ascending=False)).head(10)\ncols = ['short_name', 'value_eur']\ntable = ff.create_table(df_head[cols])\ntable.show()","308c9f3c":"df_head = (data.sort_values(by='wage_eur', ascending=False)).head(10)\ncols = ['short_name', 'wage_eur']\ntable = ff.create_table(df_head[cols])\ntable.show()","367c04a7":"plt.figure(figsize=(12,8))\nsns.regplot(x=data['value_eur'],y=data['wage_eur'],\n            scatter_kws={'color':'black','edgecolor':'blue','linewidth':'0.7'},line_kws={'color':'red','alpha':0.8})\nplt.title(\"Value\/Wage proportion\")","00d4e941":"fig = px.scatter_3d(data, x='wage_eur', y='value_eur', z='overall',\n              color='overall', hover_name=\"short_name\")\nfig.show()","9409518c":"fig = px.scatter_3d(data, x='wage_eur', y='value_eur', z='overall',\n              color='potential', hover_name=\"short_name\")\nfig.show()","f6da91f8":"fig = px.scatter_3d(data, x='wage_eur', y='value_eur', z='overall',\n              color='potential', hover_name=\"player_positions\")\nfig.show()","307dca20":"def search_bests(cols):\n    \n    team = []\n    \n    for i in cols:\n        df = data.sort_values(by=i, ascending=False).head(12)\n        for j in range(0,12):\n            name = df.iloc[j]['short_name']\n            overall = df.iloc[j]['overall']\n            foot = df.iloc[j]['preferred_foot']\n            pos = df.iloc[j]['team_position']\n            arr = (name, overall, foot, pos)\n            if arr not in team:\n                team.append(arr)\n                break\n                \n    return team\n\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\ncols = [\"ls\",\"st\",\"rs\",\"lw\",\"lf\",\"cf\",\"rf\",\"rw\",\"lam\",\"cam\",\"ram\",\"lm\",\n            \"lcm\",\"cm\",\"rcm\",\"rm\",\"lwb\",\"ldm\",\"cdm\",\"rdm\",\"rwb\",\"lb\",\"lcb\",\"cb\",\"rcb\",\"rb\"]\n\nxy = [(400,300), (800,200), (800,300), (150,850), (200,270), (400,200), (1050,270), (1050,850), (400,750), (600,700),\n      (800,750), (300,950), (400,850), (600,900), (800,850), (900,950), (300,1250), (400,1100), (600,1000), \n      (800,1100), (900,1250), (200,1400), (400,1475), (600,1550), (800,1475), (1000,1400),(600,1700)]\n\nteam = search_bests(cols)\n\ncols.append(\"gk\")\nxy.append((1700,650))\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['overall'],df['preferred_foot'],df['team_position']))\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-120, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","50237278":"def search_bests_overall():\n    \n    fws = [\"LS\",\"ST\",\"RS\", \"LF\" ,\"CF\",\"RF\"]\n    cnts = [\"LW\",\"LAM\",\"CAM\",\"RAM\",\"RW\"]\n    dfs = [\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"]\n    \n    ar1 = []\n    ar2 = []\n    ar3 = []\n    \n    team = []\n    \n    df = data.sort_values(by=\"overall\", ascending=False).head(100)\n    for j in range(100):\n        name = df.iloc[j]['short_name']\n        overall = df.iloc[j]['overall']\n        foot = df.iloc[j]['preferred_foot']\n        pos = df.iloc[j]['team_position']\n        arr = (name, overall, foot, pos)\n        \n        if pos in fws and len(ar1) < 6:\n            ar1.append(arr)\n        elif pos in cnts and len(ar2) < 5:\n            ar2.append(arr)\n        elif pos in dfs and len(ar3) < 5:\n            ar3.append(arr)\n            \n    team.extend(ar1)\n    team.extend(ar2)\n    team.extend(ar3)\n                \n    return team\n\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\ncols = [\"ls\",\"st\",\"rs\", \"lf\" ,\"cf\",\"rf\",\n        \"lw\",\"lam\",\"cam\",\"ram\",\"rw\",\n        \"lb\",\"lcb\",\"cb\",\"rcb\",\"rb\"]\n\nxy = [(370,300), (600,200), (830,300), (150,270), (600,270), (1050,270),\n      (200,800), (400,900), (600,1000), (800,900), (1000,800),\n      (200,1275), (400,1350), (600,1425), (800,1350),(1000,1275)]\n\nteam = search_bests_overall()\n\ncols.append(\"gk\")\nxy.append((650,1700))\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['overall'],df['preferred_foot'],df['team_position']))\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-120, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","bcecbf48":"def search_bests_potential():\n    \n    fws = [\"LS\",\"ST\",\"RS\", \"LF\" ,\"CF\",\"RF\"]\n    cnts = [\"LW\",\"LAM\",\"CAM\",\"RAM\",\"RW\"]\n    dfs = [\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"]\n    \n    ar1 = []\n    ar2 = []\n    ar3 = []\n    \n    team = []\n    \n    df = data.sort_values(by=\"potential\", ascending=False).head(100)\n    for j in range(100):\n        name = df.iloc[j]['short_name']\n        overall = df.iloc[j]['potential']\n        foot = df.iloc[j]['preferred_foot']\n        pos = df.iloc[j]['team_position']\n        arr = (name, overall, foot, pos)\n        \n        if pos in fws and len(ar1) < 6:\n            ar1.append(arr)\n        elif pos in cnts and len(ar2) < 5:\n            ar2.append(arr)\n        elif pos in dfs and len(ar3) < 5:\n            ar3.append(arr)\n            \n    team.extend(ar1)\n    team.extend(ar2)\n    team.extend(ar3)\n                \n    return team\n\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\ncols = [\"ls\",\"st\",\"rs\", \"lf\" ,\"cf\",\"rf\",\n        \"lw\",\"lam\",\"cam\",\"ram\",\"rw\",\n        \"lb\",\"lcb\",\"cb\",\"rcb\",\"rb\"]\n\nxy = [(370,300), (600,200), (830,300), (150,270), (600,270), (1050,270),\n      (200,800), (400,900), (600,1000), (800,900), (1000,800),\n      (200,1275), (400,1350), (600,1425), (800,1350),(1000,1275)]\n\nteam = search_bests_potential()\n\ncols.append(\"gk\")\nxy.append((650,1700))\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['potential'],df['preferred_foot'],df['team_position']))\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-120, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","889ffc34":"def search_bests_fastest():\n    \n    fws = [\"LS\",\"ST\",\"RS\", \"LF\" ,\"CF\",\"RF\"]\n    cnts = [\"LW\",\"LAM\",\"CAM\",\"RAM\",\"RW\"]\n    dfs = [\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"]\n    \n    ar1 = []\n    ar2 = []\n    ar3 = []\n    \n    team = []\n    \n    df = data.sort_values(by=\"movement_sprint_speed\", ascending=False).head(100)\n    for j in range(100):\n        name = df.iloc[j]['short_name']\n        overall = df.iloc[j]['overall']\n        foot = df.iloc[j]['preferred_foot']\n        pos = df.iloc[j]['team_position']\n        arr = (name, overall, foot, pos)\n        \n        if pos in fws and len(ar1) < 6:\n            ar1.append(arr)\n        elif pos in cnts and len(ar2) < 5:\n            ar2.append(arr)\n        elif pos in dfs and len(ar3) < 5:\n            ar3.append(arr)\n            \n    team.extend(ar1)\n    team.extend(ar2)\n    team.extend(ar3)\n                \n    return team\n\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\ncols = [\"ls\",\"st\",\"rs\", \"lf\" ,\"cf\",\"rf\",\n        \"lw\",\"lam\",\"cam\",\"ram\",\"rw\",\n        \"lb\",\"lcb\",\"cb\",\"rcb\",\"rb\"]\n\nxy = [(370,300), (600,200), (830,300), (150,270), (600,270), (1050,270),\n      (200,800), (400,900), (600,1000), (800,900), (1000,800),\n      (200,1275), (400,1350), (600,1425), (800,1350),(1000,1275)]\n\nteam = search_bests_fastest()\n\ncols.append(\"gk\")\nxy.append((650,1700))\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['overall'],df['preferred_foot'],df['team_position']))\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-120, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","7c64189e":"def search_bests_dribbling():\n    \n    fws = [\"LS\",\"ST\",\"RS\", \"LF\" ,\"CF\",\"RF\"]\n    cnts = [\"LW\",\"LAM\",\"CAM\",\"RAM\",\"RW\"]\n    dfs = [\"LB\",\"LCB\",\"CB\",\"RCB\",\"RB\"]\n    \n    ar1 = []\n    ar2 = []\n    ar3 = []\n    \n    team = []\n    \n    df = data.sort_values(by=\"dribbling\", ascending=False).head(100)\n    for j in range(100):\n        name = df.iloc[j]['short_name']\n        overall = df.iloc[j]['overall']\n        foot = df.iloc[j]['preferred_foot']\n        pos = df.iloc[j]['team_position']\n        arr = (name, overall, foot, pos)\n        \n        if pos in fws and len(ar1) < 6:\n            ar1.append(arr)\n        elif pos in cnts and len(ar2) < 5:\n            ar2.append(arr)\n        elif pos in dfs and len(ar3) < 5:\n            ar3.append(arr)\n            \n    team.extend(ar1)\n    team.extend(ar2)\n    team.extend(ar3)\n                \n    return team\n\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\ncols = [\"ls\",\"st\",\"rs\", \"lf\" ,\"cf\",\"rf\",\n        \"lw\",\"lam\",\"cam\",\"ram\",\"rw\",\n        \"lcb\",\"rcb\"]\n\nxy = [(370,300), (600,200), (830,300), (150,270), (600,270), (1050,270),\n      (200,800), (400,900), (600,1000), (800,900), (1000,800), (400,1350), (800,1350)]\n\nteam = search_bests_dribbling()\n\ncols.append(\"gk\")\nxy.append((650,1700))\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['overall'],df['preferred_foot'],df['team_position']))\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-120, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","0bfa57e4":"def search_players1():\n    \n    cols = ['attacking_crossing', 'attacking_finishing', 'attacking_short_passing', 'attacking_short_passing','skill_dribbling',\n           'skill_dribbling','skill_long_passing','defending_standing_tackle','defending_standing_tackle','defending_sliding_tackle']\n    team = []\n    \n    for i in cols:\n        df = data.sort_values(by=i, ascending=False).head(15)\n        for j in range(0,15):\n            name = df.iloc[j]['short_name']\n            overall = df.iloc[j]['overall']\n            foot = df.iloc[j]['preferred_foot']\n            pos = df.iloc[j]['team_position']\n            arr = (name, overall, foot, pos)\n            if arr not in team:\n                team.append(arr)\n                break\n                \n    return team\n\ncols = ['attacking_crossing', 'attacking_finishing', 'attacking_short_passing', 'attacking_short_passing','skill_dribbling',\n           'skill_dribbling','skill_long_passing','defending_standing_tackle','defending_standing_tackle','defending_sliding_tackle']\nteam = search_players1()\n\ncols.append(\"gk\")\n\n#find the best goal keeper\ndata['gk_score'] = (data['gk_reflexes'] + data['gk_handling'] + data['gk_positioning'])\/3\ndf = data.sort_values(by=\"gk_score\", ascending=False).head(1)\ndf = df.iloc[0]\nteam.append((df['short_name'], df['overall'],df['preferred_foot'],df['team_position']))\n\nteam\n\ndf_head = pd.DataFrame()\ndf_head['player'] = team\ndf_head['feature'] = cols\n\ntable = ff.create_table(df_head)\ntable.show()","8f6c7b8d":"xy = [(400,250), (600,150), (225,650), (775,650), (225,450), (775,450),\n       (600,1000), (300,1350), (600,1200), (900,1350),(650,1700)]\n\nplt.figure(figsize=(15,15))\nimg = mpimg.imread('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/c\/c9\/Boisko.svg\/1200px-Boisko.svg.png')\nimgplot = plt.imshow(img)\n\nfor i in range(len(team)):\n    plt.text(xy[i][0]-150, xy[i][1]+20,cols[i] + \":\" + team[i][0] + \"(\" +str(team[i][1]) + \")\\nfoot \" + team[i][2], fontsize=12,\n            bbox={'facecolor': 'white', 'alpha': 0.5})","bf0537ea":"### Top 10 wageable players","d3f9e208":"## Wages, values","c1a454fd":"![image.png](attachment:image.png)","b0d40af8":"## Distribution plot: Age, Weight, Height","f92f3147":"### Fastest Players Method(17 Players)","57deac71":"# Data Preview\nVersion 1: Basics. 15.06.2020\n\nVersion 2: Updated best goal keeper + new methods to pick best players. 16.06.2020\n\nVersion 3: Soon","b1c6a317":"# Data Analysis","a521b3b1":"## Real bodies and faces","bda0c90c":"### Top 10 valuable players","494114fc":"## Search best players","5be39a3a":"## Player nationalities","d5e42b37":"### Total bodies","98555ca7":"### Unique bodies","e12e57b2":"### Distribution by potential scores (names)","5b7817be":"## Overall","e1744a60":"## Preferred foot","f333c9f2":"### Best Overall Method(17 players)","b34dce02":"### Distribution by potential scores (positions)","a4e0e97c":"### Naive and straight method\nLet's choose players by their best positions","b7850d9c":"![newplot.png](attachment:newplot.png)","66844ca2":"## Overall vs Potential scores","aa623050":"# FIFA 2020\n## Searching the best team\n![](https:\/\/megaobzor.com\/uploads\/stories\/153117\/p1_2606755_2c85697d.jpg)","a68339e9":"### Proportion of unique faces","cd0a8c3a":"### My method 1\nI will take best next players in different parametres: 1 in attacking crossing, 1 - attacking finishing, 2 - attacking short passing, 2 - skill dribbling, 1 - skill long passing\n2 - defending standing tackle, 1 defending sliding tackle, 1 gk","b7c99b07":"### Distribution by overall scores","daa8e288":"### Best Potential Method(17 Players)","561b7882":"### Most Dribbling Players Method(17 Players)"}}