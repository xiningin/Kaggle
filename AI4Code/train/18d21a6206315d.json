{"cell_type":{"6b52a9c8":"code","45242638":"code","6515e7c4":"code","12af5616":"code","01052740":"code","66a220cc":"code","3d421408":"code","6b027f89":"code","78114865":"code","787d9687":"code","ca612cf6":"code","1bc2cd37":"code","6bf83857":"code","ab3f1a13":"code","b68eebcd":"code","2248b0f1":"markdown","d598952f":"markdown"},"source":{"6b52a9c8":"import pandas as pd\nimport numpy as np\nfrom fastai.vision.all import *\nimport pickle\nimport os\nimport torch\nimport librosa","45242638":"def sample_to_mel(_id, is_test):\n    x = np.load(id2path(_id, is_test))\n    spectrogram = []\n    for i in range(3):\n        mel = librosa.feature.melspectrogram(x[i]\/x[i].max(), \n                                                sr=2048,\n                                                n_mels=16,\n                                               hop_length=16)\n        mel = mel[:,:256]\n        mel = librosa.power_to_db(mel).astype(np.float32)\n        mel = mel.reshape(64,64)\n        spectrogram.append(mel)\n    spectrogram = np.stack(spectrogram)\n    return spectrogram","6515e7c4":"train = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/training_labels.csv')\ntest_df = pd.read_csv('..\/input\/g2net-gravitational-wave-detection\/sample_submission.csv')","12af5616":"def id2path(id, is_test):\n    a, b, c = id[0], id[1], id[2]\n    if is_test: return f'..\/input\/g2net-gravitational-wave-detection\/test\/{a}\/{b}\/{c}\/{id}.npy'\n    return f'..\/input\/g2net-gravitational-wave-detection\/train\/{a}\/{b}\/{c}\/{id}.npy'","01052740":"train = train.sample(frac=0.3).reset_index(drop=True)","66a220cc":"class NumpyDataset(torch.utils.data.Dataset):\n    def __init__(self, df, is_test=False):\n        self.df,self.is_test = df,is_test\n        \n    def __getitem__(self, i):\n        image_id = self.df['id'].loc[i]\n        img = sample_to_mel(image_id, self.is_test)\n        if self.is_test:\n            tgt = 0 if i < 10 else 1\n            return (torch.tensor(img, dtype=torch.float), torch.tensor(tgt, dtype=torch.long))\n        else:\n            tgt = self.df['target'].loc[i]\n            return (torch.tensor(img, dtype=torch.float), torch.tensor(tgt, dtype=torch.long))\n    \n    def __len__(self): return len(self.df)","3d421408":"cut = int(0.8 * len(train))\ntrain_df = train[:cut].reset_index(drop=True)\nvalid_df = train[cut:].reset_index(drop=True)\nlen(train_df), len(valid_df)","6b027f89":"train_ds = NumpyDataset(train_df, is_test=False)\nvalid_ds = NumpyDataset(valid_df, is_test=False)\ntest_ds = NumpyDataset(test_df, is_test=True)","78114865":"dls = DataLoaders.from_dsets(train_ds, valid_ds, bs=16)\ndls.c = 1","787d9687":"learn = cnn_learner(dls, resnet34, loss_func=BCEWithLogitsLossFlat(), metrics=RocAucBinary())","ca612cf6":"learn.fit_one_cycle(1, 3e-4)","1bc2cd37":"learn.save('model')","6bf83857":"learn.recorder.plot_loss()","ab3f1a13":"test_dl = DataLoader(test_ds, bs=16, shuffle=False, drop_last=False)\npreds, _ = learn.get_preds(dl=test_dl)","b68eebcd":"test_df.target = np.array(preds)\ntest_df.to_csv('submission.csv', index=False)\ntest_df.head()","2248b0f1":"# Inference","d598952f":"# fastai training with resnet34\nfastai is a great tool to create a strong baseline quickly. I'm learning about signal processing so there may be big errors in my approach :) "}}