{"cell_type":{"7e4b01e8":"code","6a09e35d":"code","d4741d45":"code","22b954c2":"code","cb81c4b2":"code","f997dde4":"code","e0267f7a":"code","f7460856":"code","bb19e5fd":"code","57fd480a":"code","87358edb":"code","2580d929":"code","d3476182":"code","86ab1ff5":"code","cfcae99f":"code","d9520c9d":"code","0508275b":"code","e723a1b6":"code","9c4f06a8":"code","e99b9451":"code","85f450f7":"code","70a82c6a":"code","8ba75faf":"code","56fb559d":"code","c9c56b9f":"code","a6eadb86":"code","72f2ae5b":"code","e81ddbab":"code","cbe8f9fc":"code","463a79fe":"code","d34b6e16":"code","58a66438":"code","efcbcea3":"code","f808470c":"code","6f581698":"code","5a2a50a0":"code","bc788403":"code","7da58c2e":"code","d8bae11d":"code","68a898c9":"code","6a5abba9":"code","18abd73f":"code","b9aa1670":"code","5caac13d":"markdown","8235b186":"markdown","c59b5e6e":"markdown","2eda63ac":"markdown","43bbcdf6":"markdown","e6190b3b":"markdown","b597247f":"markdown","5b66a53c":"markdown"},"source":{"7e4b01e8":"!pip install --no-deps '..\/input\/timm-package\/timm-0.1.26-py3-none-any.whl' > \/dev\/null\n!pip install --no-deps '..\/input\/pycocotools\/pycocotools-2.0-cp37-cp37m-linux_x86_64.whl' > \/dev\/null\n!pip install  --no-cache-dir ..\/input\/nvidia-apex\/apex-master ","6a09e35d":"import sys\nsys.path.insert(0, \"..\/input\/timm-efficientdet-pytorch\")\nsys.path.insert(0, \"..\/input\/omegaconf\")\nsys.path.insert(0, \"..\/input\/weightedboxesfusion\")\n\nimport ensemble_boxes \nimport torch\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom torch.utils.data import Dataset,DataLoader\nimport albumentations as A\nfrom albumentations.pytorch.transforms import ToTensorV2\nimport cv2\nimport gc\nfrom matplotlib import pyplot as plt\nfrom effdet import get_efficientdet_config, EfficientDet, DetBenchEval\nfrom effdet.efficientdet import HeadNet\nimport os\nfrom datetime import datetime\nimport time\nimport random\nfrom sklearn.model_selection import StratifiedKFold\nfrom torch.utils.data.sampler import SequentialSampler, RandomSampler\nfrom apex import amp","d4741d45":"SEED = 2020\n\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(SEED)","22b954c2":"#marking.head()","cb81c4b2":"#include.head()","f997dde4":"marking = pd.read_csv('..\/input\/clean-data\/modified_cleaned_data_upd.csv')\ninclude= pd.read_csv('..\/input\/clean-data\/best_train_val_image.csv')\n\n#marking=marking.loc[marking.image_id.isin(include.image_id.values )]\nmarking=marking[~marking.image_id.isin(['14716eed5','4e6c05213'])]\n\nmarking.drop(columns=['bbox'], inplace=True)\nmarking.columns=['image_id','width','height','source','area','x','y','w','h']\nmarking=marking.loc[:,['image_id','width','height','source','x','y','w','h']]\n#marking.columns=['image_id','width','height','source','area','x','y','w','h']\n#pd.read_csv('..\/input\/global-wheat-detection\/train.csv')\n'''\nbboxs = np.stack(marking['bbox'].apply(lambda x: np.fromstring(x[1:-1], sep=',')))\nfor i, column in enumerate(['x', 'y', 'w', 'h']):\n    marking[column] = bboxs[:,i]\nmarking.drop(columns=['bbox'], inplace=True)\n'''","e0267f7a":"''' \nfrom sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=5, shuffle=True)\n\ndf_folds = marking[['image_id']].copy()\ndf_folds['bbox_count'] = 1\ndf_folds = df_folds.groupby('image_id').count() #num bbox for each img_id\ndf_folds['source'] = marking[['image_id', 'source']].groupby('image_id').min()['source'] #get source from each img_id\ndf_folds.loc[:, 'stratify_group'] = np.char.add(\n    df_folds['source'].values.astype(str),\n    df_folds['bbox_count'].apply(lambda x: f'_{x \/\/ 15}').values.astype(str)\n)\ndf_folds.loc[:, 'fold'] = 0\n\nfor fold_num, (train_idx, val_idx) in enumerate(skf.split(X=df_folds.index, y=df_folds['stratify_group'])):\n    df_folds.loc[df_folds.iloc[val_idx].index,'fold'] = fold_num\n'''\n ","f7460856":"#df_folds.source.value_counts()\n#marking.index.size","bb19e5fd":"#df_folds[df_folds.fold!=0].source.value_counts()","57fd480a":"#df_folds[df_folds.fold!=0].source.value_counts()","87358edb":"def get_train_transforms():\n    return A.Compose([\n            #A.RandomSizedCrop(min_max_height=(800, 800), height=1024, width=1024, p=0.5),\n            A.OneOf([\n                A.HueSaturationValue(hue_shift_limit=(0.1,0.25), sat_shift_limit= (0.1,0.25), \n                                     val_shift_limit=(0.1,0.25), p=0.7),#0.5\n                A.RandomBrightnessContrast(brightness_limit=(0.1,0.2), \n                                           contrast_limit=(0.1,0.25), p=0.8),#0.5\n                    ],p=0.8),\n            A.HorizontalFlip(p=0.65),#0.75\n            A.VerticalFlip(p=0.65),  #0.75\n            A.Resize(height=1024, width=1024, p=1),\n            #A.Cutout(num_holes=6, max_h_size=48, max_w_size=48, fill_value=0, p=0.5),\n            #[0.31463625 0.31740943 0.21443922] , std: [0.49570253 0.48870521 0.44089793]\n            #A.Normalize(mean=(0.31463625, 0.31740943, 0.21443922), std=(0.49570253, 0.48870521, 0.44089793), \n            #            max_pixel_value=1.0, \n            #            always_apply=False, p=1.0),\n            ToTensorV2(p=1.0)], p=1.0, \n            bbox_params=A.BboxParams(\n                format='pascal_voc',\n                label_fields=['labels']\n        )\n    )\n\ndef get_valid_transforms():\n    return A.Compose(\n        [\n            A.Resize(height=1024, width=1024, p=1),\n            ToTensorV2(p=1.0),\n        ], \n        p=1.0, \n        bbox_params=A.BboxParams(\n            format='pascal_voc',\n            min_area=0, \n            min_visibility=0,\n            label_fields=['labels']\n        )\n    )\ndef get_test_transforms():\n    return A.Compose([\n            A.Resize(height=1024, width=1024, p=1),\n            ToTensorV2(p=1.0),\n        ], p=1.0)","2580d929":"import warnings\nfrom tqdm.notebook import tqdm\n\nwarnings.filterwarnings(\"ignore\")\n\nclass Fitter:\n    \n    def __init__(self, model, device, config):\n        self.config = config\n        self.epoch = 0\n\n        self.base_dir = f'.\/{config.folder}'\n        if not os.path.exists(self.base_dir):\n            os.makedirs(self.base_dir)\n        \n        self.log_path = f'{self.base_dir}\/log.txt'\n        self.best_summary_loss = 10**5\n\n        self.model = model\n        self.device = device\n\n        param_optimizer = list(self.model.named_parameters())\n        no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']\n        optimizer_grouped_parameters = [\n            {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.001},\n            {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n        ] \n        \n        self.optimizer = torch.optim.AdamW(self.model.parameters(), lr=config.lr)\n        self.model, self.optimizer = amp.initialize(self.model, self.optimizer, opt_level=\"O1\", verbosity=0)\n        self.scheduler = config.SchedulerClass(self.optimizer, **config.scheduler_params)\n        self.log(f'Fitter prepared. Device is {self.device}')\n\n    def fit(self, train_loader, validation_loader,n_epochs):\n        for e in range(n_epochs):\n            if self.config.verbose:\n                lr = self.optimizer.param_groups[0]['lr']\n                timestamp = datetime.utcnow().isoformat()\n                self.log(f'\\n{timestamp}\\nLR: {lr}')\n\n            t = time.time()\n            summary_loss = self.train_one_epoch(train_loader)\n\n            self.log(f'[RESULT]: Train. Epoch: {self.epoch}, summary_loss: {summary_loss.avg:.5f}, time: {(time.time() - t):.5f}')\n            self.save(f'{self.base_dir}\/last-checkpoint1.bin')\n\n            t = time.time()\n            summary_loss = self.validation(validation_loader)\n\n            self.log(f'[RESULT]: Val. Epoch: {self.epoch}, summary_loss: {summary_loss.avg:.5f}, time: {(time.time() - t):.5f}')\n            if summary_loss.avg < self.best_summary_loss:\n                self.best_summary_loss = summary_loss.avg\n                self.model.eval()\n                self.save(f'{self.base_dir}\/best-checkpoint1.bin')\n\n            if self.config.validation_scheduler:\n                self.scheduler.step(metrics=summary_loss.avg)\n\n            self.epoch += 1\n\n    def validation(self, val_loader):\n        self.model.eval()\n        summary_loss = AverageMeter()\n        t = time.time()\n        for step, (images, targets, image_ids) in enumerate(val_loader):\n            if self.config.verbose:\n                if step % self.config.verbose_step == 0:\n                    print(\n                        f'Val Step {step}\/{len(val_loader)}, ' + \\\n                        f'summary_loss: {summary_loss.avg:.5f}, ' + \\\n                        f'time: {(time.time() - t):.5f}', end='\\r'\n                    )\n            with torch.no_grad():\n                images = torch.stack(images)\n                batch_size = images.shape[0]\n                images = images.to(self.device).float()\n                boxes = [target['boxes'].to(self.device).float() for target in targets]\n                labels = [target['labels'].to(self.device).float() for target in targets]\n\n                loss, _, _ = self.model(images, boxes, labels)\n                summary_loss.update(loss.detach().item(), batch_size)\n\n        return summary_loss\n\n    def train_one_epoch(self, train_loader):\n        self.model.train()\n        summary_loss = AverageMeter()\n        t = time.time()\n        step=0\n        for   (images, targets, image_ids) in tqdm(train_loader):\n            if self.config.verbose:\n                if step % self.config.verbose_step == 0:\n                    print(\n                        f'Train Step {step}\/{len(train_loader)}, ' + \\\n                        f'summary_loss: {summary_loss.avg:.5f}, ' + \\\n                        f'time: {(time.time() - t):.5f}', end='\\r'\n                    )\n            \n            images = torch.stack(images)\n            images = images.to(self.device).float()\n            batch_size = images.shape[0]\n            boxes = [target['boxes'].to(self.device).float() for target in targets]\n            labels = [target['labels'].to(self.device).float() for target in targets]\n            self.optimizer.zero_grad()\n            loss, _, _ = self.model(images, boxes, labels)\n            \n            if True:\n                    with amp.scale_loss(loss, self.optimizer) as scaled_loss:\n                        scaled_loss.backward()\n            else:\n                loss.backward()\n\n            \n            \n            \n            if ((step +1)% 16 == 0 )or (step==len(train_loader)-1):\n                self.optimizer.step()\n                self.optimizer.zero_grad()\n\n                summary_loss.update(loss.detach().item(), batch_size)\n             \n\n            #summary_loss.update(loss.detach().item(), batch_size)\n\n            #self.optimizer.step()\n\n            if self.config.step_scheduler:\n                self.scheduler.step()\n            step=step+1\n\n        return summary_loss\n    \n    def save(self, path):\n        self.model.eval()\n        torch.save({\n            'model_state_dict': self.model.model.state_dict()\n            \n        }, path)\n\n    def load(self, path):\n        checkpoint = torch.load(path)\n        self.model.model.load_state_dict(checkpoint['model_state_dict'])\n        \n        #self.epoch = checkpoint['epoch'] + 1\n        \n    def log(self, message):\n        if self.config.verbose:\n            print(message)\n        with open(self.log_path, 'a+') as logger:\n            logger.write(f'{message}\\n')","d3476182":"class TrainGlobalConfig:\n    num_workers = 8\n    batch_size = 2 \n    n_epochs = 6 \n    lr =2e-4\n\n    folder = 'plabel_model'\n\n    # -------------------\n    verbose = True\n    verbose_step = 1\n    # -------------------\n\n    # --------------------\n    step_scheduler = False  \n    validation_scheduler = True  \n\n    SchedulerClass = torch.optim.lr_scheduler.ReduceLROnPlateau\n    scheduler_params = dict(\n        mode='min',\n        factor=0.7,\n        patience=1,\n        verbose=False, \n        threshold=0.0001,\n        threshold_mode='abs',\n        cooldown=0, \n        min_lr=1e-8,\n        eps=1e-08\n    )","86ab1ff5":"DATA_ROOT_PATH = '..\/input\/global-wheat-detection\/test'\n\nclass DatasetRetriever(Dataset):\n\n    def __init__(self, image_ids, transforms=None):\n        super().__init__()\n        self.image_ids = image_ids\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n        image_id = self.image_ids[index]\n        image = cv2.imread(f'{DATA_ROOT_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n        if self.transforms:\n            sample = {'image': image}\n            sample = self.transforms(**sample)\n            image = sample['image']\n        return image, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]","cfcae99f":"dataset = DatasetRetriever(\n    image_ids=np.array([path.split('\/')[-1][:-4] for path in glob(f'{DATA_ROOT_PATH}\/*.jpg')]),\n    transforms=get_test_transforms()\n)\n\ndef collate_fn(batch):\n    return tuple(zip(*batch))\n\ntest_data_loader = DataLoader(\n    dataset,\n    batch_size=1,\n    shuffle=False,\n    num_workers=4,\n    drop_last=False,\n    collate_fn=collate_fn\n)","d9520c9d":"def load_net(checkpoint_path):\n    config = get_efficientdet_config('tf_efficientdet_d5')\n    net = EfficientDet(config, pretrained_backbone=False)\n\n    config.num_classes = 1\n    config.image_size=1024\n    net.class_net = HeadNet(config, num_outputs=config.num_classes, norm_kwargs=dict(eps=.001, momentum=.01))\n\n    checkpoint = torch.load(checkpoint_path)\n    net.load_state_dict(checkpoint['model_state_dict'])\n\n    del checkpoint\n    gc.collect()\n\n    net = DetBenchEval(net, config)\n    net.eval();\n    return net.cuda()\n\n\nnet = load_net('..\/input\/d51024\/best-checkpoint-06epoch.bin')","0508275b":"class BaseWheatTTA:\n    \"\"\" author: @shonenkov \"\"\"\n    image_size = 1024\n\n    def augment(self, image):\n        raise NotImplementedError\n    \n    def batch_augment(self, images):\n        raise NotImplementedError\n    \n    def deaugment_boxes(self, boxes):\n        raise NotImplementedError\n\nclass TTAHorizontalFlip(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n\n    def augment(self, image):\n        return image.flip(1)\n    \n    def batch_augment(self, images):\n        return images.flip(2)\n    \n    def deaugment_boxes(self, boxes):\n        boxes[:, [1,3]] = self.image_size - boxes[:, [3,1]]\n        return boxes\n\nclass TTAVerticalFlip(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    \n    def augment(self, image):\n        return image.flip(2)\n    \n    def batch_augment(self, images):\n        return images.flip(3)\n    \n    def deaugment_boxes(self, boxes):\n        boxes[:, [0,2]] = self.image_size - boxes[:, [2,0]]\n        return boxes\n    \nclass TTARotate90(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    \n    def augment(self, image):\n        return torch.rot90(image, 1, (1, 2))\n\n    def batch_augment(self, images):\n        return torch.rot90(images, 1, (2, 3))\n    \n    def deaugment_boxes(self, boxes):\n        res_boxes = boxes.copy()\n        res_boxes[:, [0,2]] = self.image_size - boxes[:, [1,3]]\n        res_boxes[:, [1,3]] = boxes[:, [2,0]]\n        return res_boxes\n\nclass TTACompose(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    def __init__(self, transforms):\n        self.transforms = transforms\n        \n    def augment(self, image):\n        for transform in self.transforms:\n            image = transform.augment(image)\n        return image\n    \n    def batch_augment(self, images):\n        for transform in self.transforms:\n            images = transform.batch_augment(images)\n        return images\n    \n    def prepare_boxes(self, boxes):\n        result_boxes = boxes.copy()\n        result_boxes[:,0] = np.min(boxes[:, [0,2]], axis=1)\n        result_boxes[:,2] = np.max(boxes[:, [0,2]], axis=1)\n        result_boxes[:,1] = np.min(boxes[:, [1,3]], axis=1)\n        result_boxes[:,3] = np.max(boxes[:, [1,3]], axis=1)\n        return result_boxes\n    \n    def deaugment_boxes(self, boxes):\n        for transform in self.transforms[::-1]:\n            boxes = transform.deaugment_boxes(boxes)\n        return self.prepare_boxes(boxes)","e723a1b6":"from itertools import product\n\ntta_transforms = []\nfor tta_combination in product([TTAHorizontalFlip(), None], \n                               [TTAVerticalFlip(), None],\n                               [TTARotate90(), None]):\n    tta_transforms.append(TTACompose([tta_transform for tta_transform in tta_combination if tta_transform]))","9c4f06a8":"# \u6267\u884c TTA\ndef make_tta_predictions(images, score_threshold=0.25):\n    with torch.no_grad():\n        images = torch.stack(images).float().cuda()\n        predictions = []\n        for tta_transform in tta_transforms:\n            result = []\n            det = net(tta_transform.batch_augment(images.clone()), torch.tensor([1]*images.shape[0]).float().cuda())\n\n            for i in range(images.shape[0]):\n                boxes = det[i].detach().cpu().numpy()[:,:4]    \n                scores = det[i].detach().cpu().numpy()[:,4]\n                indexes = np.where(scores > score_threshold)[0]\n                boxes = boxes[indexes]\n                boxes[:, 2] = boxes[:, 2] + boxes[:, 0]\n                boxes[:, 3] = boxes[:, 3] + boxes[:, 1]\n                boxes = tta_transform.deaugment_boxes(boxes.copy())\n                result.append({\n                    'boxes': boxes,\n                    'scores': scores[indexes],\n                })\n            predictions.append(result)\n    return predictions\n\ndef run_wbf(predictions, image_index, image_size=1024, iou_thr=0.44, skip_box_thr=0.42, weights=None):\n    boxes = [(prediction[image_index]['boxes']\/(image_size-1)).tolist() for prediction in predictions]\n    scores = [prediction[image_index]['scores'].tolist() for prediction in predictions]\n    labels = [np.ones(prediction[image_index]['scores'].shape[0]).astype(int).tolist() for prediction in predictions]\n    boxes, scores, labels = ensemble_boxes.ensemble_boxes_wbf.weighted_boxes_fusion(boxes, scores, labels, weights=None, iou_thr=iou_thr, skip_box_thr=skip_box_thr)\n    boxes = boxes*(image_size-1)\n    return boxes, scores, labels","e99b9451":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n    return \" \".join(pred_strings)","85f450f7":"results_plabel = []\n\nfor images, image_ids in test_data_loader:\n    predictions = make_tta_predictions(images)\n    for i, image in enumerate(images):\n        image_id = image_ids[i]\n        image_ = cv2.imread(f'{DATA_ROOT_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        h,w,_ = np.shape(image_)\n        \n        boxes, scores, labels = run_wbf(predictions, image_index=i)\n        boxes = (boxes*h\/1024.).astype(np.int32).clip(min=0, max=1023)\n        image_id = image_ids[i]\n        \n        boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n        boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n        \n        # make plabel\n        for box in boxes:\n            result_p = {\n                'image_id': image_id,\n                'width':w,\n                'height':h,\n                'source':'inrae_1',\n                'x':box[0],\n                'y':box[1],\n                'w':box[2],\n                'h':box[3],\n            }\n            results_plabel.append(result_p)","70a82c6a":"results_df = pd.DataFrame(results_plabel, columns=['image_id', 'width','height','source','x','y','w','h'])\n#results_df ","8ba75faf":"results_df.head()","56fb559d":"results_df['image_id'] = results_df['image_id'].apply(lambda x: DATA_ROOT_PATH+'\/'+ x+'.jpg')","c9c56b9f":"TRAIN_ROOT_PATH = '..\/input\/global-wheat-detection\/train'\nmarking['image_id'] = marking['image_id'].apply(lambda x: TRAIN_ROOT_PATH+'\/'+ x+'.jpg')\n#include['image_id'] = include_df['image_id'].apply(lambda x: TRAIN_ROOT_PATH+'\/'+ x+'.jpg')","a6eadb86":"include['image_id'] = include['image_id'].apply(lambda x: TRAIN_ROOT_PATH+'\/'+ x+'.jpg')","72f2ae5b":"train_data_plabel = pd.concat([results_df,marking], axis=0)\ntrain_data_plabel=train_data_plabel.sample(frac=1,random_state=42).reset_index(drop=True)","e81ddbab":"#train_data_plabel.index.size","cbe8f9fc":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\ndf_folds = train_data_plabel[['image_id']].copy()\ndf_folds.loc[:, 'bbox_count'] = 1\ndf_folds = df_folds.groupby('image_id').count()\ndf_folds.loc[:, 'source'] = marking[['image_id', 'source']].groupby('image_id').min()['source']\ndf_folds.loc[:, 'stratify_group'] = np.char.add(\n    df_folds['source'].values.astype(str),\n    df_folds['bbox_count'].apply(lambda x: f'_{x \/\/ 15}').values.astype(str)\n)\ndf_folds.loc[:, 'fold'] = 0\n\nfor fold_number, (train_index, val_index) in enumerate(skf.split(X=df_folds.index, y=df_folds['stratify_group'])):\n    df_folds.loc[df_folds.iloc[val_index].index, 'fold'] = fold_number","463a79fe":"#df_folds.index.size","d34b6e16":"#df_folds.index.size\ndf_folds.loc[~df_folds.index.isin(include [-600:].image_id.values),'fold']=1\ndf_folds.loc[df_folds.index.isin(include [-600:].image_id.values),'fold']=0\n\ndf_folds[df_folds.fold==1].index.size,df_folds[df_folds.fold==0].index.size","58a66438":"class DatasetRetriever(Dataset):\n\n    def __init__(self, marking, image_ids, transforms=None, test=False):\n        super().__init__()\n\n        self.image_ids = image_ids\n        self.marking = marking\n        self.transforms = transforms\n        self.test = test\n\n    def __getitem__(self, index: int):\n        image_id = self.image_ids[index]\n        '''\n        if self.test or random.random() > 0.5:\n            image, boxes = self.load_image_and_boxes(index)\n        else:\n            image, boxes = self.load_cutmix_image_and_boxes(index)\n        '''\n        if self.test or random.random() > 0.5:\n            if random.random()>0.5:\n              #print('x')\n              image, boxes=self.stitch_boxes(index)\n            else:\n              #print('normal',index)  \n\n              image, boxes = self.load_image_and_boxes(index)\n        else:\n            #print('cut')\n            image, boxes = self.load_cutmix_image_and_boxes(index)\n\n        # there is only one class\n        labels = torch.ones((boxes.shape[0],), dtype=torch.int64)\n        \n        target = {}\n        target['boxes'] = boxes\n        target['labels'] = labels\n        target['image_id'] = torch.tensor([index])\n        \n        #if image.shape[0]!=1024 or image.shape[1]!=1024:\n        #    image=A.Resize(height=1024, width=1024, p=1.0)(image=image)['image']\n\n        if self.transforms:\n            for i in range(10):\n                sample = self.transforms(**{\n                    'image': image,\n                    'bboxes': target['boxes'],\n                    'labels': labels\n                })\n                if len(sample['bboxes']) > 0:\n                    image = sample['image']\n                    target['boxes'] = torch.stack(tuple(map(torch.tensor, zip(*sample['bboxes'])))).permute(1, 0)\n                    target['boxes'][:,[0,1,2,3]] = target['boxes'][:,[1,0,3,2]]  #yxyx: be warning\n                    break\n\n        return image, target, image_id\n\n    def __len__(self) -> int:\n        return self.image_ids.shape[0]\n    \n    def stitch_boxes(self, index, imsize=1024):\n        \n        # Increase this to pick less number of boxes from each image and vice versa.\n        BOX_NUM_SELECTOR = 5\n        \n        all_boxes = []\n        #print(index)\n        image, boxes = self.load_image_and_boxes(index)\n        #print(image,boxes,self.img_ids[index])\n        for box in boxes:\n            all_boxes.append([int(x) for x in box])\n        \n        indexes = [random.randint(0, self.image_ids.shape[0] - 1) for _ in range(3)]\n        \n        for i, idx in enumerate(indexes):\n            _im, _boxes = self.load_image_and_boxes(idx)\n            _bi = [int(x) for x in random.sample(list(range(len(_boxes))), len(_boxes)\/\/BOX_NUM_SELECTOR)]\n            \n            _b = _boxes[_bi]\n            for box in _b:\n                box = [int(x) for x in box]\n                all_boxes.append(box)\n                image[box[1]:box[3], box[0]:box[2]] = _im[box[1]:box[3], box[0]:box[2]]\n        \n        return image, np.array(all_boxes)\n    \n\n    def load_image_and_boxes(self, index):\n        image_id = self.image_ids[index]\n        #print('image_id',image_id)\n        image = cv2.imread(image_id, cv2.IMREAD_COLOR)\n        \n        #print('load',image.shape)\n        #image = cv2.imread(f'{TRAIN_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image=A.CLAHE((1.5,4),p=0.35)(image=image)['image']#new reduce it for test\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n        records = self.marking[self.marking['image_id'] == image_id]\n        boxes = records[['x', 'y', 'w', 'h']].values\n        boxes[:, 2] =np.clip(boxes[:,0]+boxes[:,2],0,1024-1) \n        #boxes[:, 0] + boxes[:, 2]\n        boxes[:, 3] = np.clip(boxes[:,1]+boxes[:,3],0,1024-1)\n        return image, boxes\n\n    def load_cutmix_image_and_boxes(self, index, imsize=1024):\n        \"\"\" \n        This implementation of cutmix author:  https:\/\/www.kaggle.com\/nvnnghia \n        Refactoring and adaptation: https:\/\/www.kaggle.com\/shonenkov\n        \"\"\"\n        w, h = imsize, imsize\n        s = imsize \/\/ 2\n    \n        xc, yc = [int(random.uniform(imsize * 0.25, imsize * 0.75)) for _ in range(2)]  # center x, y\n        indexes = [index] + [random.randint(0, self.image_ids.shape[0] - 1) for _ in range(3)]\n\n        result_image = np.full((imsize, imsize, 3), 1, dtype=np.float32)\n        result_boxes = []\n\n        for i, index in enumerate(indexes):\n            #print(index)\n            image, boxes = self.load_image_and_boxes(index)\n            if i == 0:\n                x1a, y1a, x2a, y2a = max(xc - w, 0), max(yc - h, 0), xc, yc  # xmin, ymin, xmax, ymax (large image)\n                x1b, y1b, x2b, y2b = w - (x2a - x1a), h - (y2a - y1a), w, h  # xmin, ymin, xmax, ymax (small image)\n            elif i == 1:  # top right\n                x1a, y1a, x2a, y2a = xc, max(yc - h, 0), min(xc + w, s * 2), yc\n                x1b, y1b, x2b, y2b = 0, h - (y2a - y1a), min(w, x2a - x1a), h\n            elif i == 2:  # bottom left\n                x1a, y1a, x2a, y2a = max(xc - w, 0), yc, xc, min(s * 2, yc + h)\n                x1b, y1b, x2b, y2b = w - (x2a - x1a), 0, max(xc, w), min(y2a - y1a, h)\n            elif i == 3:  # bottom right\n                x1a, y1a, x2a, y2a = xc, yc, min(xc + w, s * 2), min(s * 2, yc + h)\n                x1b, y1b, x2b, y2b = 0, 0, min(w, x2a - x1a), min(y2a - y1a, h)\n            result_image[y1a:y2a, x1a:x2a] = image[y1b:y2b, x1b:x2b]\n            padw = x1a - x1b\n            padh = y1a - y1b\n\n            boxes[:, 0] += padw\n            boxes[:, 1] += padh\n            boxes[:, 2] += padw\n            boxes[:, 3] += padh\n\n            result_boxes.append(boxes)\n\n        result_boxes = np.concatenate(result_boxes, 0)\n        np.clip(result_boxes[:, 0:], 0, 2 * s, out=result_boxes[:, 0:])\n        result_boxes = result_boxes.astype(np.int32)\n        result_boxes = result_boxes[np.where((result_boxes[:,2]-result_boxes[:,0])*(result_boxes[:,3]-result_boxes[:,1]) > 0)]\n        return result_image, result_boxes","efcbcea3":"fold_number = 0\n\ntrain_dataset = DatasetRetriever(\n    image_ids=df_folds[df_folds['fold'] != fold_number].index.values,\n    marking=train_data_plabel,\n    transforms=get_train_transforms(),\n    test=False,\n)\n\nvalidation_dataset = DatasetRetriever(\n    image_ids=df_folds[df_folds['fold'] == fold_number].index.values,\n    marking=train_data_plabel,\n    transforms=get_valid_transforms(),\n    test=True,\n)","f808470c":"#len(train_dataset )\/\/2\n#include.index.size","6f581698":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\ndef run_training(n_epochs):\n    device = torch.device('cuda:0')\n    net.to(device)\n\n    train_loader = torch.utils.data.DataLoader(\n        train_dataset,\n        batch_size=TrainGlobalConfig.batch_size,\n        sampler=RandomSampler(train_dataset),\n        pin_memory=False,\n        drop_last=True,\n        num_workers=TrainGlobalConfig.num_workers,\n        collate_fn=collate_fn,\n    )\n    val_loader = torch.utils.data.DataLoader(\n        validation_dataset, \n        batch_size=TrainGlobalConfig.batch_size,\n        num_workers=TrainGlobalConfig.num_workers,\n        shuffle=False,\n        sampler=SequentialSampler(validation_dataset),\n        pin_memory=False,\n        collate_fn=collate_fn,\n    )\n\n    fitter = Fitter(model=net, device=device, config=TrainGlobalConfig)\n    fitter.fit(train_loader, val_loader,n_epochs)","5a2a50a0":"from effdet import get_efficientdet_config, EfficientDet, DetBenchTrain\nfrom effdet.efficientdet import HeadNet\n\ndef get_net():    \n    config = get_efficientdet_config('tf_efficientdet_d5')\n    net = EfficientDet(config, pretrained_backbone=False)\n    \n    config.num_classes = 1\n    config.image_size = 1024\n    net.class_net = HeadNet(config, num_outputs=config.num_classes, norm_kwargs=dict(eps=.001, momentum=.01))\n    checkpoint = torch.load('..\/input\/d51024\/best-checkpoint-06epoch.bin')\n    net.load_state_dict(checkpoint['model_state_dict'])\n   \n    return DetBenchTrain(net, config)\n\nnet = get_net()","bc788403":"import gc\ntorch.cuda.empty_cache()\ngc.collect()","7da58c2e":"class AverageMeter(object):\n    \"\"\"Computes and stores the average and current value\"\"\"\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.val = 0\n        self.avg = 0\n        self.sum = 0\n        self.count = 0\n\n    def update(self, val, n=1):\n        self.val = val\n        self.sum += val * n\n        self.count += n\n        self.avg = self.sum \/ self.count","d8bae11d":"import os\nif len(os.listdir('..\/input\/global-wheat-detection\/test\/'))<11:\n    pass\n    #run_training(1)\nelse:\n    run_training(5)","68a898c9":"weights = f'plabel_model\/best-checkpoint1.bin'\nif not os.path.exists(weights):\n    print('without pseudo')\n    weights = '..\/input\/d51024\/best-checkpoint-06epoch.bin'\n\nnet = load_net(weights)","6a5abba9":"results = []\n\nfor images, image_ids in test_data_loader:\n    predictions = make_tta_predictions(images)\n    for i, image in enumerate(images):\n        boxes, scores, labels = run_wbf(predictions, image_index=i)\n        image_id = image_ids[i]\n        image_ = cv2.imread(f'{DATA_ROOT_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        h,w,_ = np.shape(image_)\n        #boxes = (boxes*2).astype(np.int32).clip(min=0, max=1023) (boxes*h\/1024.)\n        \n        boxes = (boxes*h\/1024.).astype(np.int32).clip(min=0, max=1023) \n        image_id = image_ids[i]\n        \n        boxes[:, 2] = boxes[:, 2] - boxes[:, 0]\n        boxes[:, 3] = boxes[:, 3] - boxes[:, 1]\n\n        result = {\n            'image_id': image_id,\n            'PredictionString': format_prediction_string(boxes, scores)\n        }\n        results.append(result)","18abd73f":"test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\ntest_df.to_csv('submission.csv', index=False)\ntest_df.head()","b9aa1670":"import matplotlib.pyplot as plt\n\nfor j, (images, image_ids) in enumerate(test_data_loader):\n    \n\n    predictions = make_tta_predictions(images)\n\n    i = 0\n    sample = images[i].permute(1,2,0).cpu().numpy()\n\n    boxes, scores, labels = run_wbf(predictions, image_index=i)\n    boxes = boxes.astype(np.int32).clip(min=0, max=1023)\n\n    fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n\n    for box in boxes:\n        cv2.rectangle(sample, (box[0], box[1]), (box[2], box[3]), (1, 0, 0), 3)\n\n    ax.set_axis_off()\n    ax.imshow(sample);","5caac13d":"# Get TRain Net","8235b186":"Train dataset","c59b5e6e":"# Train Prep ","2eda63ac":"# Run Pseudo Label Training","43bbcdf6":"I have made public this notebook before but I forgot to write the reference.So I republic this one.\nThanks for someone's remind before.I feel very sorry.\nThis is the copy of notebook (https:\/\/www.kaggle.com\/gofarther\/efficientdet-framework-tta-pl-etc) by @gofather.\nI used this notebook to submit my effdet and found my score has improved much.So I want to show it for people.\nThanks for this one's help.","e6190b3b":"# TEST Predictions","b597247f":"# Pre Test predictions","5b66a53c":"# Gather New Prediction"}}