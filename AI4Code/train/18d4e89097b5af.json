{"cell_type":{"718be76f":"code","e5bb9554":"code","53be4475":"code","ee0df99e":"code","0e89efd1":"code","21b75387":"code","811646a6":"code","0d82d6c3":"code","2ca47599":"code","01cebf7e":"code","33ed1a9e":"code","6102e385":"code","f9d87c9f":"code","c24af450":"markdown","c2ba79e4":"markdown","7859fcd1":"markdown","5081294f":"markdown","aefeb7a5":"markdown","ea58c1f0":"markdown","677f40ff":"markdown","88c3bf12":"markdown","3c7f5819":"markdown"},"source":{"718be76f":"!pip install spacy scispacy\n!pip install https:\/\/s3-us-west-2.amazonaws.com\/ai2-s2-scispacy\/releases\/v0.2.4\/en_core_sci_sm-0.2.4.tar.gz  #scispacy model","e5bb9554":"import os\nimport json\nfrom spacy.tokens import DocBin\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm\nfrom pprint import pprint\nimport spacy\nfrom scispacy.abbreviation import AbbreviationDetector\nfrom scispacy.umls_linking import UmlsEntityLinker\nfrom allennlp.predictors.predictor import Predictor","53be4475":"metadata = (\n    pd.read_csv(\"\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv\")\n    .assign(publish_time=lambda df_: pd.to_datetime(df_.publish_time, errors='coerce'))\n)","ee0df99e":"(metadata.publish_time\n .groupby(metadata.publish_time.dt.year)\n .count()\n .plot(kind=\"bar\", figsize=(20,5), title=\"count per year\")\n)","0e89efd1":"biorxiv = pd.read_csv(\"\/kaggle\/input\/cord-19-eda-parse-json-and-generate-clean-csv\/biorxiv_clean.csv\")\ncommuse = pd.read_csv(\"\/kaggle\/input\/cord-19-eda-parse-json-and-generate-clean-csv\/clean_comm_use.csv\")\nnoncommuse = pd.read_csv(\"\/kaggle\/input\/cord-19-eda-parse-json-and-generate-clean-csv\/clean_noncomm_use.csv\")\npmc = pd.read_csv(\"\/kaggle\/input\/cord-19-eda-parse-json-and-generate-clean-csv\/clean_pmc.csv\")\n\nbiorxiv[\"source\"] = \"biorxiv\"\ncommuse[\"source\"] = \"commuse\"\nnoncommuse[\"source\"] = \"noncommuse\"\npmc[\"source\"] = \"pmc\"\n\nall_data = pd.concat([biorxiv, commuse, noncommuse, pmc])","21b75387":"new_metadata = metadata[metadata.publish_time.dt.year >= 2019]\nlen(new_metadata)","811646a6":"nlp = spacy.load(\"en_core_sci_sm\")\nabbreviation_pipe = AbbreviationDetector(nlp)\nnlp.add_pipe(abbreviation_pipe)\nlinker = UmlsEntityLinker(resolve_abbreviations=True)\nnlp.add_pipe(linker)","0d82d6c3":"new_metadata['abstract_spacy'] = [nlp(abstract) if pd.notnull(abstract) else None for abstract in tqdm(new_metadata.abstract)]","2ca47599":"new_metadata.abstract_spacy.tolist()","01cebf7e":"new_metadata.abstract_spacy.iloc[0]","33ed1a9e":"def replace_abbr_with_json(spacy_doc): \n    new_abbrs = []\n    for short in spacy_doc._.abbreviations:\n        if type(short) == dict:\n            return\n        short_text = short.text \n        short_start = short.start \n        short_end = short.end \n        long = short._.long_form \n        long_text = long.text \n        long_start = long.start \n        long_end = long.end \n        serializable_abbr = {\"short_text\": short_text, \"short_start\": short_start, \"short_end\": short_end, \"long_text\": long_text, \"long_start\": long_start, \"long_end\": long_end} \n        short._.long_form = None \n        new_abbrs.append(serializable_abbr) \n    spacy_doc._.abbreviations = new_abbrs\n    \n# cast otherwise pickling spacy docs won't work with Pandas, so save in different object\n# https:\/\/github.com\/allenai\/scispacy\/issues\/205\n#for doc in new_metadata.abstract_spacy:\n#    if doc is not None:\n#        replace_abbr_with_json(doc)","6102e385":"# pickling spacy docs won't work with Pandas, so save in different object\nnew_metadata.drop('abstract_spacy', axis=1).to_pickle('metadata_2019_2020.pkl')","f9d87c9f":"from spacy.tokens import Doc\ndoc_bin = DocBin(attrs=[\"LEMMA\", \"ENT_IOB\", \"ENT_TYPE\"], store_user_data=True)\nfor doc in tqdm(new_metadata.abstract_spacy):\n    doc_bin.add(doc or Doc(nlp.vocab))\nbytes_data = doc_bin.to_bytes()\nwith open('abstract_spacy_2019_2020.pkl', 'wb') as ofs:\n    pickle.dump(bytes_data, ofs)","c24af450":"# Preprocess","c2ba79e4":"load clean data thanks to [this notebook](https:\/\/www.kaggle.com\/xhlulu\/cord-19-eda-parse-json-and-generate-clean-csv)","7859fcd1":"# Extract entities from abstracts","5081294f":"# Load","aefeb7a5":"# EDA","ea58c1f0":"new_metadata.srl = [[predictor.predict(sentence=sent.text) for sent in doc.sents] for doc in tqdm(new_metadata.abstract_spacy)]","677f40ff":"For quick prototyping we only consider papers from 2019 onwards","88c3bf12":"# Extract SRL from abstracts","3c7f5819":"predictor = Predictor.from_path(\"https:\/\/s3-us-west-2.amazonaws.com\/allennlp\/models\/bert-base-srl-2019.06.17.tar.gz\")"}}