{"cell_type":{"89b6c81c":"code","20bb89ea":"code","1d1b40ca":"code","eace4af5":"code","0bd6e9f8":"code","37c0b3a2":"code","29ed9f31":"code","9fbc7bb7":"code","558485a6":"code","8fb2d8f9":"code","851bae3b":"code","016f93c9":"code","d79de0ab":"markdown","3b6ccd14":"markdown","dd223fe5":"markdown","dd76b110":"markdown","29957070":"markdown","58a9784c":"markdown","99fea493":"markdown","bfaeb1cd":"markdown","8524f392":"markdown","128772f6":"markdown","41f07587":"markdown","20094bb2":"markdown","417afa52":"markdown","5543fe66":"markdown"},"source":{"89b6c81c":"import numpy as np\nimport pandas as pd\n\n# Load in the dataset into a dataframe\ndf = pd.read_csv('..\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')\n\ndf.info()","20bb89ea":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# describe dataframe\ndf.describe()","1d1b40ca":"df_data_description = pd.DataFrame({'Features' : ['blueWins','WardsPlaced \/ WardsDestroyed','FirstBlood','Kills \/ Deaths \/ Assists','TowersDestroyed',\n                                                  'TotalGold','AvgLevel','TotalExperience','CSPerMin','GoldPerMin']})\n\ndf_data_description['Description'] = ['whether blue team won or not','number of total wards placed or destroyed by team','team with the first kill of game',\n                                      'total number of kills, deaths, or assists of team','total number of towers destroyed by team','total gold obtained by team',\n                                      'average level of all players on team','total experience points accumulated by team','average creep score per minute',\n                                      'average gold obtained per minute']\n\ndf_data_description['Feature type'] = ['Discrete','Continuous','Discrete','Continuous','Continuous','Continuous','Continuous','Continuous','Continuous','Continuous']\n\ndf_data_description['Attribute Type'] = ['nominal','ratio','nominal','ratio','ratio','ratio','ratio','ratio','ratio','ratio']\n\ndf_data_description['Range'] = ['0: red team won; 1: blue team won','placed: 5 - 250;destroyed: 0 - 27','0: did not get first kill; 1: team obtained first kill',\n                                'kills: 0-22;deaths: 0-22;assists: 0-29','0 - 2','11,000 - 25,000','4.5 - 8.5','10,000 - 24,000','10.0 - 30.0','1,100.0 - 2,000.0']\ndf_data_description","eace4af5":"import missingno as mn\n\nmn.matrix(df)\n\n# Count unique values in column 'gameId' of the dataframe\nprint('Number of unique values in column \"gameId\" : ', df['gameId'].nunique())\n\ndup_df = df.duplicated()\nprint('Duplicates : ', len(df[dup_df]))","0bd6e9f8":"del df['gameId']\n\nred_col = df.corr()[df.corr()['blueWins'] <= -0.07].index.values\nblue_col = df.corr()[df.corr()['blueWins'] >= 0.07].index.values\n\n# Create dataframes for the 2 possible outcomes :\ndf_win  = df[df[\"blueWins\"]==1]     # Blue Team Win  \/  Red Team Lost\ndf_lose = df[df[\"blueWins\"]==0]     # Red Team Win   \/  Blue Team Lost","37c0b3a2":"ax = sns.countplot(x=\"blueWins\", data=df, palette=['red', 'blue'])\nax.set_title('Win Rate by Team')\nax.set_xlabel('Teams')\nax.set_xticks([0,1])\nax.set_xticklabels(['Red', 'Blue'])\nax.set_ylabel('Frequency')","29ed9f31":"# Formula to calculate KDA ratio ------> KDA = (Kills + Assists) \/ Deaths\ndf['redKDA'] = ((df['redKills'] + df['redAssists']) \/ df['redDeaths'])\ndf['blueKDA'] = ((df['blueKills'] + df['blueAssists']) \/ df['blueDeaths'])\n\n# Group all KDA's for each team\ndf_redKDA = df[(df['redKDA'] <= 20)].groupby(by=['redKDA'])\ndf_blueKDA = df[(df['blueKDA'] <= 20)].groupby(by=['blueKDA'])\n\n# Calculate probability of winning according to KDA\n# Frequency of winning according to KDA \/ Frequency for each KDA * 100\nredKDA_rate = (df_redKDA.blueWins.sum() \/ df_redKDA.blueWins.count() * 100)\nblueKDA_rate = (df_blueKDA.blueWins.sum() \/ df_blueKDA.blueWins.count() * 100)\n\nax = sns.lineplot(data=redKDA_rate, label='Red KDA', color='red')\nsns.lineplot(data=blueKDA_rate, label='Blue KDA', color='blue')\nax.set_xlabel('KDA ratio')\nax.set_ylabel('Win %')\nax.set_title('Win % by KDA ratio')\n","9fbc7bb7":"jitter_values = ['blueKills','blueAssists','blueDeaths','blueWins']\n\ndf_jitter = df[jitter_values].copy()\ndf_jitter[['blueKills','blueAssists','blueDeaths']] += np.random.rand(len(df_jitter),3)\/2\nax = sns.pairplot(df_jitter,hue=\"blueWins\",height=2,plot_kws=dict(s=20,alpha=0.15,linewidth=0),palette=['red','blue'])\n\nplt.show()","558485a6":"obj_blue = pd.crosstab([df['blueEliteMonsters'],df['blueDragons'],df['blueHeralds']],df.blueWins.astype(bool))\n\nax_blue = obj_blue.plot(kind='bar', stacked=True, label='Game Outcome', color=['red', 'blue'], alpha=0.8)\nax_blue.set_xlabel('EliteMonsters, Dragons, Heralds')\nax_blue.set_ylabel('Frequency')\nax_blue.set_title('Objective Eliminations : Blue Team')\nax_blue.legend([\"Lost Game\", \"Won Game\"], title=\"Game Outcome\")\n\nobj_blue","8fb2d8f9":"from matplotlib.lines import Line2D\n\nmark1 = {0:\"X\", 1:\"o\"}\nmark2 = {0:\"o\", 1:\"X\"}\n\nlegend_elements_1 = [Line2D([0],[0],marker='X',color='w',label='Lost Game',markerfacecolor='red',markersize=8),\n                     Line2D([0],[0],marker='o',color='w',label='Won Game',markerfacecolor='blue',markersize=10)]\nlegend_elements_2 = [Line2D([0],[0],marker='X',color='w',label='Lost Game',markerfacecolor='blue',markersize=8),\n                     Line2D([0],[0],marker='o',color='w',label='Won Game',markerfacecolor='red',markersize=10)]\n\nplt.subplots(figsize=(20,5))\nsns.set_style(\"white\")\n\nplt.subplot(1,2,1)\nax1 = sns.scatterplot(data=df,x='blueGoldPerMin',y='blueKills',hue='blueWins',palette=['red','blue'],style='blueWins',markers=mark1)\nax1.set_title('Blue Team : Kills & Gold Per Minute')\nax1.set_xlabel('Gold Per Minute')\nax1.set_ylabel('# of Kills')\nax1.legend(title='Game Outcome',handles=legend_elements_1,loc='upper left')\n\nplt.subplot(1,2,2)\nax2 = sns.scatterplot(data=df,x='redGoldPerMin',y='redKills',hue='blueWins',palette=['red','blue'],style='blueWins',markers=mark2)\nax2.set_title('Red Team : Kills & Gold Per Minute')\nax2.set_xlabel('Gold Per Minute')\nax2.set_ylabel('# of Kills')\nax2.legend(title='Game Outcome',handles=legend_elements_2,loc='upper left')\n\nplt.show()","851bae3b":"cmap = sns.set(style=\"darkgrid\", palette=\"colorblind\")\n\nplt.subplots(figsize=(17,15))\nplt.pcolor(df[blue_col].corr())\nplt.xticks(np.arange(0, len(blue_col), 1), blue_col)\nplt.yticks(np.arange(0, len(blue_col), 1), blue_col)\nplt.xticks(rotation=90)\nsns.heatmap(df[blue_col].corr(),cmap=cmap,annot=True)\nplt.show()","016f93c9":"corr_blue = ['blueKills', 'blueTotalGold', 'blueTotalMinionsKilled', 'blueCSPerMin', 'redDeaths', 'blueGoldPerMin']\n\nc = 0\nplt.subplots(figsize=(20,5))\nfor i in corr_blue:\n    plt.subplot(1,3,c+1)\n    sns.histplot(df_win[i],label='Won Game',color='blue', kde=True)\n    sns.histplot(df_lose[i],label='Lost Game',color='red', kde=True)\n    plt.legend(title='Game Outcome')\n    c=c+1\n\n    if c == 3:\n        plt.show()\n        if i != corr_blue[len(corr_blue) - 1]:\n            plt.subplots(figsize=(20,5))\n        c=0","d79de0ab":"## &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.2 Data Quality\n\nUsing the `missingno` package, we are able to additionally confirm that all the data is complete\nand there is no missing entries with the dataset. If there was missing data, we could impute the\nmissing values by using the k-nearest neighbor. But if an instance was missing a majority of its\nattributes, it would be removed from the dataset.\n\nThe number of unique values in the column \"gameId\" is printed to verify that all instances\nare weighted equally.","3b6ccd14":"The heatmap printed above contains correlating values pertaining to the 'blueWins' attribute.\nWe observe that there are 6 attributes with a correlation value of 1 ('blueWins' not included) :\n- 'redDeaths'\n- 'blueKills'\n- 'blueCSPerMin'\n- 'blueTotalGold'\n- 'blueGoldPerMin'\n- 'blueTotalMinionsKilled'\n\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2.2 Winning attributes","dd223fe5":"----------------------\n\n# 3. Data Visualization\n\n## &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1 Data Exploration\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1.1 Win rate by Team\nDoes being on a specific team have an impact on winning?\n\nFor context :\n- Red team defends the top right Nexus\n- Blue team defends the bottom left Nexus","dd76b110":"We additionally use a jitter plot to demonstrate KDA ratio, but we break down the ratio into\nthe original attributes (blueKills, blueAssists, & blueDeaths). The bottom row of the jitter\nplot emphasizes the already known correlation deaths has with losing games. Players\/teams should\nbe expected to already know this since everytime a player on your team dies, the opposing team\nreceives gold.\n\n#### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1.3 Win rate by objective eliminations","29957070":"# Data Visualization - LoL Diamond Ranked Matches\n\n\n# 1. Business Understanding\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <ins>`About League of Legends`<ins> :\nDeveloped by Riot Studios, League of Legends, or \"LoL\", is an online multiplayer\nvideo-game that is available to Windows\/MacOS users. LoL consists 2 teams ('Blue\n& 'Red') facing each other, where the main objective is to destroy the opposing\nteams 'Nexus', or home base, while facing obstacles like destroying damage dealing\ntowers & eliminating players throughout the way. Perks & gold are able to be\nobtained by players\/teams through completing tasks such as eliminating players,\nenemy creeps, or dragons. Players then spend the gold to purchase items that help\nraise the power of their abilities.\n\nLeague of Legends offers different game modes, such as ranked. In this game mode,\nplayers are given a rank based off of the number of wins + the number of games\nplayed. \"Diamond\" is one of the highest ranks a player may obtain and is known\nto be extremely competitive. A ranked game on average lasts 30-45 minutes. The\ndataset we will be using contains the first 10 minute analytics of each team\nfor different diamond ranked matches.\n\nOnce the data is analyzed, teams\/players would be able to conceptualize the level\nof priority different attributes have during early stages of diamond ranked\nmatches. They could then use this information to adjust their strategy to one\nproven to win matches.\n\nAdditionally, players who are accustomed to playing as the 'jungle' role (a player\nrole that focuses on obtaining objective eliminations within the jungle areas of\nthe map) can use this analyzed data to better understand the impact elite monsters\nhave on winning games.\n\n-------------------------------------\n\nDataset : https:\/\/www.kaggle.com\/bobbyscience\/league-of-legends-diamond-ranked-games-10-min\n\nQuestion Of Interest : As of the first 10 minutes, which team will win?","58a9784c":"The stacked plot shown above contains values regarding objective eliminations for elite monsters. As mentioned\nin section `2.1`, these elite monsters are dragons, & heralds.\n\nBy eliminating these elite monsters, a team\/player will gain perks that give you advantages such as increased damaged\ndealing, or regenerating health quicker. The stacked plots shown above, show the clear impact these elite monsters have\non winning.\n\nBreaking down the 'obj_blue' table into percentages:\n- 0 elite monsters : ~40% win rate\n- 1 herald (0 dragons) : ~50% win rate\n- 1 dragon (0 heralds) : ~60% win rate\n- herald & dragon : ~70% win rate\n\nPlayers\/Teams but mostly 'Jungle' role players should take note of these percentages. A couple things to point out:\n- If no elite monsters are obtained within the first 10 minutes of playing, ~60% of the time they are shown to lose.\n- A 'jungler' should prioritize on eliminating a dragon before a herald, as a dragon seems to yield a %60 win rate.\n- Out of ~5,000 diamond ranked matches where blue team won, only in ~700 games was blue team able to eliminate both a\ndragon and herald within the first 10 minutes. Most importantly, in the games this occurred in, ~70% of them resulted\nin a win. So as a team it would be strongly advised to help your 'jungle' role player eliminate these elite monsters.\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1.4 Win rate by Kills & GoldPerMinute","99fea493":"----------------\n\n#### References\n\nKaggle. League of Legends Diamond Ranked Games (First 10 Minutes).\nhttps:\/\/www.kaggle.com\/bobbyscience\/league-of-legends-diamond-ranked-games-10-min (Accessed 1-28-2020)","bfaeb1cd":"Using the attributes we found in `3.2.1` with a correlation value of 1, we output the distribution plot\n(kernel density estimation + histogram) for each attribute to help us visualize how significantly\nimportant each of these are to winning.\n\nThe distribution plots shown above help teams\/players visualize the importance of these attributes and\nhow the higher these attribute values are, the greater chance a team has at winning the game. Players\/teams\ncan adjust their strategy by using the averaged values displayed in the plots above as a measure of success within\ntheir first 10 minutes of a game.","8524f392":"---------------------------------\n\nPrinting out the information about the dataframe we are able to see that there are a\ntotal of 9,879 instances, and 39 attributes.\n\nAdditionally we are able to see that there are 19 of the same attributes for each\nthe blue & red team (columns 1-19 are the same as 20-38).\n\nAttributes for each team includes :\n- Wards placed & destroyed\n- Total number of kills, deaths, & assists\n- First Bloods (1st elimination of the game)\n- Total : towers destroyed, gold, experience\n- Average : level, CS per minute, & gold per minute\n- Difference in gold & experience between the teams\n- Objective eliminations : elite monsters(dragons, heralds), minions, & jungle minions\n\nAttributes such as total gold, experience, objectives eliminations, towers destroyed, etc.\nwill be of type integer (int64) because they will always be whole numbers. Attributes involving\naverages such as cs per minute, gold per minute, & level, should be the only of double-precision floating-point\nformat (float64).\n\nThe data type for \"blueWins\" and \"first bloods\" could be changed to be of type boolean, but because we are wanting to\nvisualize these attributes, optimally it is best to keep these as integer data types. As a result,\nthe data types presented for each attribute are correct and should not be changed.\n\nBelow is a brief description of some of the key attributes.","128772f6":"Because each team puts you on a specific side of the map, some may think that having a specific perspective on the map\nmay make an impact on your chances of winning. As shown above, the win rate for each team is symmetrical within the\nlarge dataset, meaning that defending a specific side of the map will likely not have an impact on the game outcome.\n\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1.2 Win rate by kill\/death\/assist ratio\n\nA KDA, or Kills\/Deaths\/Assists, ratio is highly significant when determining whether a team will win or not.\nA KDA ratio is calculated by using the formula shown in the code below(Kills + Assists \/ Deaths).","41f07587":"## &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.3 Cleaning the Dataset\n\nAfter confirming there are no duplicates in the data, the \"gameId\" column can be removed since it\nwill have no impact on the results.\n\nUsing the correlation feature from the `pandas` package, for each team we find the names of\nattributes that correlate most with winning (correlation >= 7%). The names of these attributes\nare stored in a array for later use.\n\nLastly, two dataframes are created to hold the attributes at instances when blue team wins, and\nwhen blue team loses.","20094bb2":"The line plot shown above helps us visualize the KDA's at instances where the blue team won. The x-axis\nrepresents the KDA obtained by a team. Meanwhile the y-axis represents the probability of winning according to a\nteams KDA ratio. When the dataframes are initially grouped according to blue\/red team kda, only KDA's under 20\nare taken into consideration since they are the most relevant\/frequent data. The line plot does an excellent job\nat displaying the frequency of each KDA, i.e the interval 0.0 - 5.0 shows us the most common KDA ratios obtained\nwithin diamond ranked games. Additionally it helps teams\/players see how when the blue team KDA ratio rises, the\nprobability of red team winning rapidly declines.","417afa52":"Above we have scatter plots for each teams performances during games that they won\/lost. The x-axis\nrepresents the average gold per minute, & the y-axis represents the number of kills. In both scatter\nplots we see the same pattern of the higher number a kills & average gold per minute achieved by a\nteam, will often lead to winning the game.\n\n## &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2 Data Relationship Exploration\n\n### &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2.1 Correlation Matrix","5543fe66":"# 2. Data Understanding\n\n## &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.1 Data Description"}}