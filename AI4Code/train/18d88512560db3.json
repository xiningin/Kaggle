{"cell_type":{"425393e6":"code","0d33e227":"code","5f97905a":"code","e54f1c18":"code","89143f75":"code","4450fba3":"code","7b9d9102":"code","2eaeed35":"code","98557b45":"code","abb8d64c":"code","74a1c856":"code","5e1b80ea":"markdown","498cbcd9":"markdown","e36d8522":"markdown","5973a252":"markdown","a6a6b291":"markdown","708ffcae":"markdown","97ef5314":"markdown","2e4e28ec":"markdown","282a4132":"markdown","4b0b9737":"markdown","613fc563":"markdown","d2265f0b":"markdown","f649b70a":"markdown","d811b684":"markdown","16380809":"markdown","5a6ad0c0":"markdown","6f59b97b":"markdown","62cffc25":"markdown"},"source":{"425393e6":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport sympy","0d33e227":"%%bash -e\nif ! [[ -f .\/linkern ]]; then\n  wget http:\/\/www.math.uwaterloo.ca\/tsp\/concorde\/downloads\/codes\/src\/co031219.tgz\n  echo 'c3650a59c8d57e0a00e81c1288b994a99c5aa03e5d96a314834c2d8f9505c724  co031219.tgz' | sha256sum -c\n  tar xf co031219.tgz\n  (cd concorde && CFLAGS='-Ofast -march=native -mtune=native -fPIC' .\/configure)\n  (cd concorde\/LINKERN && make -j && cp linkern ..\/..\/)\n  rm -rf concorde co031219.tgz\nfi","5f97905a":"def read_cities(filename='..\/input\/cities.csv'):\n    return pd.read_csv(filename, index_col=['CityId'])\n\ncities = read_cities()","e54f1c18":"cities1k = cities * 1000","89143f75":"def write_tsp(cities, filename, name='traveling-santa-2018-prime-paths'):\n    with open(filename, 'w') as f:\n        f.write('NAME : %s\\n' % name)\n        f.write('COMMENT : %s\\n' % name)\n        f.write('TYPE : TSP\\n')\n        f.write('DIMENSION : %d\\n' % len(cities))\n        f.write('EDGE_WEIGHT_TYPE : EUC_2D\\n')\n        f.write('NODE_COORD_SECTION\\n')\n        for row in cities.itertuples():\n            f.write('%d %.11f %.11f\\n' % (row.Index+1, row.X, row.Y))\n        f.write('EOF\\n')\n\nwrite_tsp(cities1k, 'cities1k.tsp')","4450fba3":"%%bash\ntime .\/linkern -K 1 -s 42 -S linkern.tour -R 999999999 -t 300 .\/cities1k.tsp >linkern.log","7b9d9102":"!sed -Ene 's\/([0-9]+) Steps.*Best: ([0-9]+).*\/\\1,\\2\/p' linkern.log >linkern.csv\npd.read_csv('linkern.csv', index_col=0, names=['TSP tour length']).plot();","2eaeed35":"class Tour:\n    cities = read_cities()\n    coords = (cities.X + 1j * cities.Y).values\n    penalized = ~cities.index.isin(sympy.primerange(0, len(cities)))\n\n    def __init__(self, data):\n        \"\"\"Initializes from a list\/iterable of indexes or a filename of tour in csv\/tsplib\/linkern format.\"\"\"\n\n        if type(data) is str:\n            data = self._read(data)\n        elif type(data) is not np.ndarray or data.dtype != np.int32:\n            data = np.array(data, dtype=np.int32)\n        self.data = data\n\n        if (self.data[0] != 0 or self.data[-1] != 0 or len(self.data) != len(self.cities) + 1):\n            raise Exception('Invalid tour')\n\n    @classmethod\n    def _read(cls, filename):\n        data = open(filename, 'r').read()\n        if data.startswith('Path'):  # csv\n            return pd.read_csv(io.StringIO(data)).Path.values\n        offs = data.find('TOUR_SECTION\\n')\n        if offs != -1:  # TSPLIB\/LKH\n            data = np.fromstring(data[offs+13:], sep='\\n', dtype=np.int32)\n            data[-1] = 1\n            return data - 1\n        else:  # linkern\n            data = data.replace('\\n', ' ')\n            data = np.fromstring(data, sep=' ', dtype=np.int32)\n            if len(data) != data[0] + 1:\n                raise Exception('Unrecognized format in %s' % filename)\n            return np.concatenate((data[1:], [0]))\n\n    def info(self):\n        dist = np.abs(np.diff(self.coords[self.data]))\n        penalty = 0.1 * np.sum(dist[9::10] * self.penalized[self.data[9:-1:10]])\n        dist = np.sum(dist)\n        return { 'score': dist + penalty, 'dist': dist, 'penalty': penalty }\n\n    def dist(self):\n        return self.info()['dist']\n\n    def score(self):\n        return self.info()['score']\n\n    def __repr__(self):\n        return 'Tour: %s' % str(self.info())\n\n    def to_csv(self, filename):\n        pd.DataFrame({'Path': self.data}).to_csv(filename, index=False)","98557b45":"tour = Tour('linkern.tour')\ntour","abb8d64c":"tour.to_csv('submission.csv')","74a1c856":"def plot_tour(tour, cmap=mpl.cm.gist_rainbow, figsize=(25, 20)):\n    fig, ax = plt.subplots(figsize=figsize)\n    n = len(tour.data)\n\n    for i in range(201):\n        ind = tour.data[n\/\/200*i:min(n, n\/\/200*(i+1)+1)]\n        ax.plot(tour.cities.X[ind], tour.cities.Y[ind], color=cmap(i\/200.0), linewidth=1)\n\n    ax.plot(tour.cities.X[0], tour.cities.Y[0], marker='*', markersize=15, markerfacecolor='k')\n    ax.autoscale(tight=True)\n    mpl.colorbar.ColorbarBase(ax=fig.add_axes([0.125, 0.075, 0.775, 0.01]),\n                              norm=mpl.colors.Normalize(vmin=0, vmax=n),\n                              cmap=cmap, orientation='horizontal')\n\nplot_tour(tour)","5e1b80ea":"## Build concorde","498cbcd9":"The rest of concorde code is mostly dedicated to optimizing a lower bound on TSP length and is not of great practical interest for this competition, so we won't built it.","e36d8522":"Concorde's EUC_2D norm rounds the distances between cities to the nearest integer ([source](https:\/\/github.com\/matthelb\/concorde\/blob\/master\/UTIL\/edgelen.c#L299)) whereas competition metric doesn't. This significantly hurts quality as we get closer to TSP optimum. Let's scale the coordinates up by a few orders of magnitude to work around this problem:","5973a252":"This notebook shows how to build and run concorde TSP solver directly, without using a rather underfeatured wrapper like pyconcorde.","a6a6b291":"With rainbow gradient to vizualize the progression of the tour:","708ffcae":"Read found TSP tour and score it:","97ef5314":"## Run LINKERN","2e4e28ec":"*Note: Internet must be enabled in kernel environment's settings for this step.*\n\nDownload concorde's source code and build LINKERN - the main tour finding component (Chained Lin-Kernighan). It comes with a convenient command line utility that we'll build and copy for later use.","282a4132":"## Changelog","4b0b9737":"Write out the problem in TSPLIB format:","613fc563":"## Score and submit found tour","d2265f0b":"* V1: initial version (1518555.37)\n  * [5 hour run](https:\/\/www.kaggle.com\/blacksix\/concorde-for-5-hours): 1516912.37\n* V2: improved plotting (1518523.84)\n* V3: geometric kick (-K 1), improved tour wrapper, scorer and plotting  (1518375.06)\n* V4: changelog, comments, compile with -Ofast (1518296.59)\n* V5: synced library code to a version from my latest [Flip 'n Roll](https:\/\/www.kaggle.com\/blacksix\/flip-n-roll-fast-python-scorer) kernel, fixed a minor bug in plotting","f649b70a":"A small OOP wrapper to represent tours:","d811b684":"## Plot the tour","16380809":"Format it for submission:","5a6ad0c0":"## Prepare input","6f59b97b":"Flags that we're using:\n\n  * `-s <seed>` - random seed\n  * `-S <file>` - save the best found tour periodically in this file\n  * `-R 999999999` - repeat LK rounds (almost) indefinitely\n  * `-t <seconds>` - bound by time instead\n  * `-K 1` - a minor tuning: set kick type to \"geometric\" instead of \"random walk\"","62cffc25":"Lengths of best found tours (times scaling factor) during each LK round:"}}