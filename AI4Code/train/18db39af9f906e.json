{"cell_type":{"9a2e47af":"code","8bad604a":"code","2fb89aaf":"code","03a08581":"code","2aa542c3":"code","b5934c7f":"code","a9aaa1fc":"code","7b90b85e":"code","333dd6e0":"code","0daaca73":"code","bcd47fab":"code","04c6bd1c":"code","680c9354":"code","ce6c96fc":"code","61e84f65":"code","afce7f68":"code","045dd401":"code","a6b420f3":"code","87b45067":"code","538363d9":"code","c7b6c087":"code","590469c1":"code","449e27b9":"code","9c198635":"code","04029531":"code","ba22605b":"code","0025b213":"code","57bbe6a1":"code","ca65fc2c":"code","637093d3":"code","a0ea3405":"code","0395fe18":"code","61a9e206":"code","12c23a98":"code","e3db1161":"code","d04f7eb9":"code","4ecf2299":"code","d461f3e0":"code","437dc13d":"code","c50cdfb7":"code","36f3fa55":"code","0d2a5415":"code","ee469866":"code","857b20a8":"code","5afe3107":"code","6ce3e1db":"code","526386c7":"code","10be551a":"code","2be64198":"code","60072ff7":"code","b32351c3":"code","39d0a2d4":"code","ca0bc806":"code","ada73d4b":"code","d555c458":"code","a41691c1":"code","73ab2ca9":"code","78592a58":"code","8b7660c2":"code","c0ff09e3":"code","ed498cd5":"code","cc0ce5d0":"code","a934bb2a":"code","8ee88635":"code","ebc10178":"code","29ca88e2":"code","b332e3e3":"code","1340c676":"code","7a45626d":"code","5373bde3":"code","08dd1dec":"code","9772e7ef":"code","d9fdb610":"code","00c27b77":"markdown","ced1ee5b":"markdown","bacb478d":"markdown","1e0b80da":"markdown","081907b1":"markdown","d6ee4c55":"markdown","b7c8760c":"markdown","c65f46de":"markdown","e55a22e1":"markdown","f3d952c8":"markdown","44aca92f":"markdown","11f794bc":"markdown","222928ae":"markdown","55928669":"markdown","16a7c455":"markdown","67d4a268":"markdown","22c5a39b":"markdown","516fc2b3":"markdown","29f6f194":"markdown","f238349c":"markdown","33008321":"markdown","004a9119":"markdown","82951bb0":"markdown","293071e9":"markdown","d90a5bab":"markdown","76fc795d":"markdown","62958312":"markdown","1f2204f4":"markdown"},"source":{"9a2e47af":"# Basic library for Python\nimport numpy as np\nimport pandas as pd\nimport os","8bad604a":"os.listdir(\"..\/input\/star-dataset\/\")","2fb89aaf":"# Load star data\ndata = pd.read_csv(\"..\/input\/star-dataset\/6 class csv.csv\")","03a08581":"# see the first five rows of data\ndata.head()","2aa542c3":"print(\"The shape of data is\", data.shape)","b5934c7f":"# Let's see what kind of data types are in data\ndata.info()","a9aaa1fc":"# Take a look whole data\ndata.describe(include=\"all\")","7b90b85e":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","333dd6e0":"sns.pairplot(data = data, hue = \"Star type\")","0daaca73":"sns.distplot(data[\"Temperature (K)\"])\nplt.show()","bcd47fab":"print(\"Temperature (k) skewnewss:\", data[\"Temperature (K)\"].skew())\nprint(\"Temperature (k) kurtosis:\", data[\"Temperature (K)\"].kurt())","04c6bd1c":"sns.distplot(data[\"Luminosity(L\/Lo)\"])\nplt.show()","680c9354":"print(\"Luminosity(L\/Lo) skewnewss:\", data[\"Luminosity(L\/Lo)\"].skew())\nprint(\"Luminosity(L\/Lo) kurtosis:\", data[\"Luminosity(L\/Lo)\"].kurt())","ce6c96fc":"sns.distplot(data[\"Radius(R\/Ro)\"])\nplt.show()","61e84f65":"print(\"Radius(R\/Ro) skewnewss:\", data[\"Radius(R\/Ro)\"].skew())\nprint(\"Radius(R\/Ro) kurtosis:\", data[\"Radius(R\/Ro)\"].kurt())","afce7f68":"sns.distplot(data[\"Absolute magnitude(Mv)\"])\nplt.show()","045dd401":"print(\"Absolute magnitude(Mv) skewnewss:\", data[\"Absolute magnitude(Mv)\"].skew())\nprint(\"Absolute magnitude(Mv) kurtosis:\", data[\"Absolute magnitude(Mv)\"].kurt())","a6b420f3":"ax = sns.countplot(data[\"Star color\"])\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nplt.show()","87b45067":"data[\"Star color\"].unique()","538363d9":"print(\"Star color has {} unique values.\".format(len(data[\"Star color\"].unique())))","c7b6c087":"data[\"Star type\"].value_counts().plot(kind=\"bar\")\nplt.show()","590469c1":"data[\"Star type\"].value_counts()","449e27b9":"ax = sns.scatterplot(data = data, x = \"Spectral Class\", y = \"Absolute magnitude(Mv)\", hue = \"Star type\")\nax.invert_yaxis()","9c198635":"mapping_Spec_class = {\"O\": 0, \"B\": 1, \"A\": 2, \"F\": 3, \"G\": 4, \"K\": 5, \"M\": 6}\ndata[\"labeled_spec\"] = data[\"Spectral Class\"].map(mapping_Spec_class)","04029531":"ax = sns.scatterplot(data = data, x = \"labeled_spec\", y = \"Absolute magnitude(Mv)\", hue = \"Star type\")\nax.invert_yaxis()","ba22605b":"sns.catplot(y=\"labeled_spec\", col=\"Star type\", kind=\"count\", orient = \"h\", height = 5, aspect = 1, data=data)\nplt.show()","0025b213":"data[[\"Star type\",\"labeled_spec\"]].pivot_table(columns=[\"Star type\"],index=[\"labeled_spec\"], aggfunc=len, fill_value = 0)","57bbe6a1":"sns.heatmap(data[[\"Star type\",\"labeled_spec\"]].pivot_table(columns=[\"Star type\"],index=[\"labeled_spec\"], aggfunc=len, fill_value = 0))\nplt.show()","ca65fc2c":"data.info()","637093d3":"#to lower case\ndata[\"Star color\"] = data[\"Star color\"].apply(lambda x: x.lower())","a0ea3405":"len(data[\"Star color\"].unique())","0395fe18":"#replace -  to \" \"\ndata[\"Star color\"] = data[\"Star color\"].apply(lambda x: x.replace(\"-\",\" \"))\nlen(data[\"Star color\"].unique())","61a9e206":"#remove white space\ndata[\"Star color\"] = data[\"Star color\"].apply(lambda x: x.replace(\" \",\"\"))\nlen(data[\"Star color\"].unique())","12c23a98":"data[\"Star color\"].unique()","e3db1161":"dummy_color = pd.get_dummies(data[\"Star color\"]).astype(\"int64\")\nnew_data = pd.concat([data, dummy_color], axis=1)","d04f7eb9":"new_data.head()","4ecf2299":"new_data.info()","d461f3e0":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold","437dc13d":"X = new_data.drop([\"Star type\", \"Star color\", \"Spectral Class\"], axis=1)\ny = new_data[\"Star type\"]","c50cdfb7":"X.info()","36f3fa55":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 523)","0d2a5415":"print(\"The shape of X_train:\", X_train.shape)\nprint(\"The shape of X_test:\", X_test.shape)","ee469866":"print(\"The shape of y_train:\", y_train.shape)\nprint(\"The shape of y_test:\", y_test.shape)","857b20a8":"stsc = StandardScaler()\nX_train_scaled = stsc.fit_transform(X_train.drop(\"labeled_spec\", axis = 1))\nX_test_scaled = stsc.transform(X_test.drop(\"labeled_spec\", axis = 1))","5afe3107":"X_train.columns","6ce3e1db":"scaled_columns = list(X_train.columns)\nscaled_columns.remove(\"labeled_spec\")","526386c7":"X_train.loc[X_train.index,scaled_columns] = X_train_scaled\nX_test.loc[X_test.index,scaled_columns] = X_test_scaled","10be551a":"X_train.head()","2be64198":"X_test.head()","60072ff7":"stf = StratifiedKFold(n_splits=5, random_state=523)","b32351c3":"from sklearn.neighbors import KNeighborsClassifier","39d0a2d4":"knn = KNeighborsClassifier(n_jobs=-1, n_neighbors=3)","ca0bc806":"cv_scores = cross_val_score(cv=stf, estimator=knn, X = X_train, y = y_train, scoring = \"accuracy\")","ada73d4b":"print(\"The Average accuracy for 5 folds KNN is {:.3f} +\/- {:.3f}\".format(cv_scores.mean(), cv_scores.std()))","d555c458":"from sklearn.ensemble import RandomForestClassifier","a41691c1":"rf_clf = RandomForestClassifier(n_estimators=1000, n_jobs=-1, random_state=523)\ncv_scores_rf = cross_val_score(cv=stf, estimator=rf_clf, X = X_train, y = y_train, scoring = \"accuracy\")","73ab2ca9":"print(\"The Average accuracy for 5 folds RF clf is {:.3f} +\/- {:.3f}\".format(cv_scores_rf.mean(), cv_scores_rf.std()))","78592a58":"from xgboost import XGBClassifier","8b7660c2":"xg_clf = XGBClassifier(n_estimators=1000, n_jobs=-1, random_state=523)\ncv_scores_xg = cross_val_score(cv=stf, estimator=xg_clf, X = X_train, y = y_train, scoring = \"accuracy\")","c0ff09e3":"print(\"The Average accuracy for 5 folds XGB clf is {:.3f} +\/- {:.3f}\".format(cv_scores_xg.mean(), cv_scores_xg.std()))","ed498cd5":"from lightgbm import LGBMClassifier","cc0ce5d0":"lgbm_clf = LGBMClassifier(n_estimators=1000, n_jobs=-1, random_state=523)\ncv_scores_lgbm = cross_val_score(cv=stf, estimator=lgbm_clf, X = X_train, y = y_train, scoring = \"accuracy\")","a934bb2a":"print(\"The Average accuracy for 5 folds LGBM clf is {:.3f} +\/- {:.3f}\".format(cv_scores_lgbm.mean(), cv_scores_lgbm.std()))","8ee88635":"from sklearn.metrics import confusion_matrix, classification_report","ebc10178":"%%time\nrf_clf.fit(X_train, y_train)\nrf_pred = rf_clf.predict(X_test)","29ca88e2":"cfmx_rf = confusion_matrix(y_test, rf_pred)","b332e3e3":"sns.heatmap(cfmx_rf,annot=True,cbar=False)\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.title('Confusion Matrix')\nplt.show()","1340c676":"print(classification_report(y_test, rf_pred))","7a45626d":"feat_importances = pd.Series(rf_clf.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(7).plot(kind='barh').invert_yaxis()","5373bde3":"%%time\nxg_clf.fit(X_train, y_train)\nxg_pred = xg_clf.predict(X_test)","08dd1dec":"cfmx_xg = confusion_matrix(y_test, xg_pred)\nsns.heatmap(cfmx_xg,annot=True,cbar=False)\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.title('Confusion Matrix')\nplt.show()","9772e7ef":"print(classification_report(y_test, xg_pred))","d9fdb610":"feat_importances = pd.Series(xg_clf.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(7).plot(kind='barh').invert_yaxis()","00c27b77":"Radius(R\/Ro) is right skewed","ced1ee5b":"## 6. Conclusion\n\nI have opinions about data and classifier.\n\n1. About data  \nWell, I don't know whether this expression is appropriate for star dataset, but I feel like analyzing Star type version of iris data.  \nI mean it is really fun experience to analyzing star dataset, because the dataset has so many hints,  \nclean status(except star color column) and appropriate numbers of data for beginner like me.  \nI want to say thank you to Data Author [@Deepraj Baidya](https:\/\/www.kaggle.com\/deepu1109)! \n\n\n2. About classifier  \nWhat data author wanted to do was using DNN for classification star type,  \nbut I made decision to use ML model after I saw shape of the dataset(240, 7).  \nThe dataset is not large enough and wide enough to use DNN compare to other datasets that capable of Deep learning models.  \nIf the dataset was images of star, DNN, especially CNN would be suitable for classification model.  \nWhat I really surprised about model was that classifies star type like an H-R diagram.  \nThe model that was trained by star dataset finds out how to classify stars by itself in less than **ten seconds.**  \nI know that dataset is small but it is still amazing.  \n\n\n## **Thank you for reading! Have a nice day!**","bacb478d":"## 3. Preprocessing","1e0b80da":"## 1. Data preview","081907b1":"Temperature (K) is right skewed","d6ee4c55":"RF and XGB show good performance.  \nLet's find out how they work with test set.","b7c8760c":"Lower case, upper case, white space, hyphen make difference between same words.","c65f46de":"Luminosity(L\/Lo) is right skewed","e55a22e1":"It is hard to recognize the graph, because of Spectral Class order is a little bit messy in graph.  \nI guess Spectral Class could be interpretable as binning of stars temperature.  \nCold to Hot  \nO < B < A < F < G < K < M  \n0   1   2   3   4   5   6","f3d952c8":"Finally, we clean up the Star color!","44aca92f":"They look alike.  \nAbsolute magnitude and Spectral type will be a good guide for a star classifier.","11f794bc":"## 5. Optimization and Evaluation\nIt is interesting that train accuracy is over 99% and test f1 score is 1.00 for both models, so I think hyperparameter tuning is unnecessary.  \nEvaluation process was already done, and it showed perfect f1 score.","222928ae":"## 0. The purpose of data analysis\nTake a look how the star dataset look like and build some star type classifier based on star dataset.","55928669":"![astronomy%281%29.PNG](attachment:astronomy%281%29.PNG) ![image.png](attachment:image.png)","16a7c455":"What a lucky day! We got so balanced target variable.  \nIf we have imbalanced target variable, the accuracy paradox could destory your classifier.","67d4a268":"This is so confusing...","22c5a39b":"Let's find out this really works.","516fc2b3":"Let's scaling Temperature(K) to Absolute magnitude(Mv).","29f6f194":"Absolute magnitude(Mv) has bimodal distribution... but doesn't matter because classifiers that we will build are robust to distribution.","f238349c":"After I started eda, I got curious about domain knowledges(maybe a little bit of astronomy?) and I found this figure(H-R diagram?).","33008321":"What we need to do is chage Star color values in to **dummy format,** because they are just color which is norminal variable.","004a9119":"As you can see, we got 2 int variables, 3 float variables and 2 object variables.  \nStar type is target(y) variable and other variables are independent(X) variable.  \nLuckily we got clean data with non-null data.  \nWith this information we could consider **scaling and dummy variables** in preprocessing step.","82951bb0":"## Context\n0. The purpose of data analysis\n1. Data preview\n2. EDA\n3. Preprocessing\n4. Modeling\n5. Optimization and Evaluation\n6. Conclusion","293071e9":"## 2. EDA","d90a5bab":"![image.png](attachment:image.png)  \nfigure from https:\/\/en.m.wikipedia.org\/wiki\/Stellar_classification","76fc795d":"Classifier will take numeric values so we need to transform all the variables into numeric.","62958312":"## 4. Modeling\nWe will compare several models; KNN, RandomForest, XGB, LGBM","1f2204f4":"Now we can drop Star color and Spectral Class.  \nNext step is scaling Temperature(K) to Absolute magnitude(Mv)."}}