{"cell_type":{"5086b521":"code","ddc8ce88":"code","8c081bc8":"code","88d19840":"code","17640dbe":"code","5645ca30":"code","f9589f79":"code","f25a78a1":"code","924fc517":"code","a0f51b4b":"code","46885707":"code","568822b9":"code","5c2dae8d":"markdown","92bf92f2":"markdown","f9fb8234":"markdown","c203defe":"markdown","185dcc0e":"markdown","1626f038":"markdown","a2681482":"markdown","7d5ce584":"markdown","095a47c0":"markdown","1485f997":"markdown","a9b56c54":"markdown","ab3ed85e":"markdown","75a8d3bc":"markdown","1869517e":"markdown"},"source":{"5086b521":"import pandas as pd\nfrom collections import Counter\nimport matplotlib.pyplot as plt\nimport statistics \nimport random\nimport numpy as np\nimport operator\nimport matplotlib\nmatplotlib.use(\"Agg\")\nfrom matplotlib.animation import FFMpegWriter\nfrom IPython.display import Video, Image","ddc8ce88":"# Create a dictionary of nice NFL colors for plots\ncolours = {\n    \"JAX\" : \"#0092ab\",\n    \"NE\" : \"#012756\",\n    \"NO\" : \"#c7aa44\",\n    \"CLE\" : \"#733b16\",\n    \"DEN\" : \"#f96b21\",\n    \"SEA\" : \"#306086\",\n    \"BAL\" : \"#32347e\",\n    \"WSH\" : \"#97191a\",\n    \"CAR\" : \"#008ed0\",\n    \"NYJ\" : \"#035936\",\n    \"PHI\" : \"#005760\",\n    \"LV\" : \"#abaaa8\",\n    \"PIT\" : \"#fec401\",\n    \"MIA\" : \"#007877\",\n    \"ATL\" : \"#cb1023\"\n}","8c081bc8":"df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2021\/plays.csv\")\n\n# Filter the dataframe to only keep plays with numbers of rushers with a high sample size\nrushers = [3,4,5,6]\ndf = df[df.numberOfPassRushers.isin(rushers)]\n\n# Calculate percentage plays with each number of rushers\nrushers_used = [(i, Counter(list(df.numberOfPassRushers))[i] \/ len(df) * 100.0) for i in Counter(list(df.numberOfPassRushers))]\nrushers_used = {rush : percent for rush, percent in sorted(rushers_used, key=lambda item: item[0])}\n\n# Create dictionary storing EPA-values for every play, by number of rushers\nepas = {rush : [] for rush in rushers}\nfor epa_i, rush_i in zip(list(df.epa), list(df.numberOfPassRushers)):\n    epas[rush_i].append(epa_i)","88d19840":"# Define helper function (adapted from https:\/\/matplotlib.org\/3.1.1\/gallery\/lines_bars_and_markers\/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py)\ndef autolabel(rects, horizontal=False, percentageLabel = False):\n    \"\"\"Attach a text labels to bars in *rects*, displaying its size.\"\"\"\n    for rect in rects:\n        if horizontal:\n            if percentageLabel:\n                width = str(round(rect.get_width(),1)) + \"%\"\n                ax.annotate('{}'.format(width),\n                        xy=(rect.get_width(), rect.get_y() + rect.get_height() \/ 5),\n                        xytext=(19, 0),  # 3 points vertical offset\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')\n            else:\n                width = round(rect.get_width(),1)\n                ax.annotate('{}'.format(width),\n                            xy=(rect.get_width(), rect.get_y() + rect.get_height() \/ 5),\n                            xytext=(14, 0),  # 3 points vertical offset\n                            textcoords=\"offset points\",\n                            ha='center', va='bottom')\n        else:\n            if percentageLabel:\n                height = str(round(rect.get_height(),1)) + '%'\n            else:\n                height = round(rect.get_height(),1)\n            \n            ax.annotate('{}'.format(height),\n                        fontsize=8,\n                        xy=(rect.get_x() + rect.get_width() \/ 2, rect.get_height()),\n                        xytext=(0, 3),  # 3 points vertical offset\n                        textcoords=\"offset points\",\n                        ha='center', va='bottom')","17640dbe":"# Plot percentages that each number of rushers is used\nx = np.arange(len(rushers))  # the label locations\nwidth = 0.75  # the width of the bars\nfig, ax = plt.subplots(figsize=(10, 2))\nrects = ax.barh(x, list(rushers_used.values()), width, color = colours[\"JAX\"])\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Rushers', fontsize=14)\nax.set_xlabel('Play Call %', fontsize=14)\nax.set_yticks(x)\nax.set_yticklabels(rushers)\n\n# Hide spines\nfor spine in ['right', 'top', 'bottom']:\n    ax.spines[spine].set_visible(False)\n\n# Remove ticks\nplt.tick_params(axis='x', which='both',bottom=False,top=False,labelbottom=False)\nplt.tick_params(axis='y', which='both',left=False)\n\nautolabel(rects, horizontal=True, percentageLabel=True)\nfig.tight_layout()\n\nplt.savefig(\"rushers_used.png\")\nplt.close(fig)\nImage(\"rushers_used.png\")  ","5645ca30":"# Plot the EPA-value distributions\nfig, axs = plt.subplots(2,2, figsize=(16, 9))\n\nfor i, rush in enumerate(rushers):\n    \n    ax = axs.flat[i]\n\n    ax.hist(epas[rush], bins=150, color=colours[\"BAL\"])\n    ax.set_title(str(rush) + \" Rushers\", fontsize=16)\n    ax.set_xlim([-12,9])\n    ax.set_xlabel(\"EPA\", fontsize=14)\n    ax.set_ylabel(\"Number of Plays\", fontsize=14)\n\nplt.tight_layout()\nplt.subplots_adjust(wspace=0.2, hspace=0.3)\n\nplt.savefig(\"epas.png\")\nplt.close(fig)\nImage(\"epas.png\")  ","f9589f79":"# Create dictionary to seperate out distributions\nepas_sep = {rush : {\"success\" : [], \"failure\" : []} for rush in rushers}\nfor rush in rushers:\n    for epa_i in epas[rush]:\n        if epa_i < 0:\n            epas_sep[rush][\"success\"].append(epa_i)\n        elif epa_i > 0:\n            epas_sep[rush][\"failure\"].append(epa_i)\n            \n# Create dictionary to store mean EPA-values of successes and failures, along with percentage plays successful\nepas_metric = {rush : {\"mean - success\" : [], \"mean - failure\" : [], \"success %\" : []} for rush in rushers}\nfor rush in rushers:\n    epas_metric[rush][\"mean - success\"] = statistics.mean(epas_sep[rush][\"success\"])\n    epas_metric[rush][\"mean - failure\"] = statistics.mean(epas_sep[rush][\"failure\"])\n    epas_metric[rush][\"success %\"] = 100 * len(epas_sep[rush][\"success\"]) \/ (len(epas_sep[rush][\"success\"]) + len(epas_sep[rush][\"failure\"]))\n\n            \n# Plot the seperated EPA-value distributions\nfig, axs = plt.subplots(2,2, figsize=(18, 10))\n\nfor i, rush in enumerate(rushers):\n    \n    ax = axs.flat[i]\n    bins_success = int(150 * len(epas_sep[rush][\"success\"]) \/ (len(epas_sep[rush][\"success\"]) + len(epas_sep[rush][\"failure\"])))\n    ax.axvline(statistics.mean(epas_sep[rush][\"success\"]), color=colours[\"MIA\"], linestyle='dashed', linewidth=1, label='Success Mean')\n    ax.axvline(statistics.mean(epas_sep[rush][\"failure\"]), color=colours[\"ATL\"], linestyle='dashed', linewidth=1, label='Failure Mean')\n    ax.hist(epas_sep[rush][\"success\"], bins=bins_success, color=colours[\"NYJ\"])\n    ax.hist(epas_sep[rush][\"failure\"], bins=150-bins_success, color=colours[\"WSH\"])\n    ax.set_title(str(rush) + \" Rushers\", fontsize=16)\n    ax.set_xlim([-12,9])\n    ax.set_xlabel(\"EPA\", fontsize=14)\n    ax.set_ylabel(\"Number of Plays\", fontsize=14)\n    ax.legend()\n    \n    # Calculate success % (i.e. ratio areas of distributions)\n    text = \"Successful Plays: \" + str(round(100*len(epas_sep[rush][\"success\"]) \/ (len(epas_sep[rush][\"success\"]) + len(epas_sep[rush][\"failure\"])),1)) + \" %\"\n    text += \"\\nSuccess Mean: \" + str(round(statistics.mean(epas_sep[rush][\"success\"]),2)) + \" points\"\n    text += \"\\nFailure Mean: \" + str(round(statistics.mean(epas_sep[rush][\"failure\"]),2)) + \" points\"\n    props = dict(facecolor=colours[\"NO\"], alpha=0.5)\n    ax.text(0.05, 0.95, text, transform=ax.transAxes,\n        verticalalignment='top', bbox=props, fontsize=14)\n    \n    \nplt.tight_layout()\nplt.subplots_adjust(wspace=0.2, hspace=0.3)\n\nplt.savefig(\"epas_sep.png\")\nplt.close(fig)\nImage(\"epas_sep.png\") ","f25a78a1":"# Using the Monte Carlo method (i.e. randomly sampling values from the EPA distributions), calculate the percentage that each rush number has the smallest EPA\n\nN_samples = 400000\n\n# Create dictionary to store percentages resulting from Monte Carlo simulations\nmonte = {rush : None for rush in rushers}\n\n# Store all sample results (i.e. the number of rushers which had smallest EPA for each N_samples)\nsamples = []\n\n# Create figure for animation and final plot\nfig, ax = plt.subplots(figsize=(8, 4))\nx = np.arange(len(rushers))  # the label locations\nwidth = 0.35  # the width of the bars\n\n# Create FFMpegWriter object for animation\nwriter = FFMpegWriter(fps=10)\n\n# Keep frames on logarithmic scale (as more interesting at start)\nn_frames = 200\nframes = [int(k) for k in np.logspace(1, np.log10(N_samples), n_frames, endpoint=True)]\n\nwith writer.saving(fig, \"monte.mp4\", 100):\n    \n    # Monte Carlo Simulation\n    for i in range(N_samples):\n\n        # Store current samples EPA-value for each number of rushers\n        sample = {rush : 0 for rush in rushers}\n        for rush in rushers:\n            # Randomly sample distribution\n            sample[rush] = random.sample(epas[rush],1)[0]\n\n        # Keep number rushers which had smallest EPA \n        samples.append([rush for rush, epa in sorted(sample.items(), key=lambda item: item[1])][0])\n\n        # Create frame for animation\n        if i+1 in frames:\n\n            # Get percentanges for each number of rushers\n            samples_percentages = [(i, Counter(samples)[i] \/ len(samples) * 100.0) for i in Counter(samples)]\n            monte = {rush : percent for rush, percent in sorted(samples_percentages, key=lambda item: item[0])}\n\n            # Clear previous frame\n            ax.clear()\n            \n            # Add bars\n            rects1 = ax.barh(x + width\/2, list(rushers_used.values()), width, label='Reality', color=colours[\"SEA\"])\n            rects2 = ax.barh(x - width\/2, list(monte.values()), width, label='Monte Carlo', color=colours[\"MIA\"])\n            autolabel(rects1, horizontal=True, percentageLabel=True)\n            autolabel(rects2, horizontal=True, percentageLabel=True)\n\n            # Add some text for labels, title and custom x-axis tick labels, etc.\n            ax.set_ylabel('Rushers', fontsize=14)\n            ax.set_xlabel('% of calls or samples', fontsize=14)\n            ax.set_yticks(x)\n            ax.set_yticklabels(rushers)\n            ax.legend(bbox_to_anchor=(0.67,0.75),loc=\"lower left\")\n            ax.set_xlim([0,125])\n\n            # Hide spines\n            for spine in ['right', 'top', 'bottom']:\n                ax.spines[spine].set_visible(False)\n\n            # Remove ticks\n            ax.tick_params(axis='x', which='both',bottom=False,top=False,labelbottom=False)\n            ax.tick_params(axis='y', which='both',left=False)\n\n            # Create text to annotate\n            text = \"Sample count: \" + str(i+1) + \"\\n\\nEPA-values:\\n\"\n            text += \"3 rushers = \" + str(round(sample[3],2))\n            text += \"\\n4 rushers = \" + str(round(sample[4],2))\n            text += \"\\n5 rushers = \" + str(round(sample[5],2))\n            text += \"\\n6 rushers = \" + str(round(sample[6],2)) + \"\\n\"\n            text += r\"$\\bf{Best}$ $\\bf{is}$ $\\bf{\" + str(samples[len(samples)-1]) +  r\"}$ $\\bf{rushers}$\"\n            ax.text(0.67, 0.7, text, transform=ax.transAxes, verticalalignment='top')\n\n            fig.tight_layout()\n\n            # Write frame to animation\n            writer.grab_frame()\n\nplt.close(fig)\nVideo(\"monte.mp4\")    ","924fc517":"# Replot final values\nfig, ax = plt.subplots(figsize=(8, 4))\n\nrects1 = ax.barh(x + width\/2, list(rushers_used.values()), width, label='Reality', color=colours[\"SEA\"])\nrects2 = ax.barh(x - width\/2, list(monte.values()), width, label='Monte Carlo', color=colours[\"MIA\"])\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('Rushers', fontsize=14)\nax.set_xlabel('% of calls or samples', fontsize=14)\nax.set_yticks(x)\nax.set_yticklabels(rushers)\nax.legend(fontsize=12)\nax.set_xlim([0,70])\n\n# Hide spines\nfor spine in ['right', 'top', 'bottom']:\n    ax.spines[spine].set_visible(False)\n\n# Remove ticks\nplt.tick_params(axis='x', which='both',bottom=False,top=False,labelbottom=False)\nplt.tick_params(axis='y', which='both',left=False)\n\nautolabel(rects1, horizontal=True, percentageLabel=True)\nautolabel(rects2, horizontal=True, percentageLabel=True)\n\nfig.tight_layout()\n\nplt.savefig(\"monte.png\")\nplt.close(fig)\nImage(\"monte.png\") ","a0f51b4b":"# Using the Monte Carlo method (i.e. randomly sampling values from the EPA distributions), calculate the percentage that each rush number has the smallest, second-smallest, third-smallest, and worst EPA-value\n\n# Create dictionary of dictionaries to store percentages resulting from Monte Carlo simulations\nmonte_place = {place : {rush : None for rush in rushers} for place in range(4)}\n\n# Store all sample results\nsamples = {place : [] for place in range(4)}\n\n# Monte Carlo Simulation\nfor i in range(1, N_samples):\n\n    # Store current sample EPA for each number rushers\n    sample = {rush : 0 for rush in rushers}\n    for rush in rushers:\n        # Randomly sample distribution\n        sample[rush] = random.sample(epas[rush],1)[0]\n\n    # Keep number rushers which had EPA corresponding to 'place'\n    for place in range(4):\n        samples[place].append([rush for rush, epa in sorted(sample.items(), key=lambda item: item[1])][place])\n\n# Get percentanges for each number of rushers\nfor place in range(4):\n    samples_percentages = [(i, Counter(samples[place])[i] \/ len(samples[place]) * 100.0) for i in Counter(samples[place])]\n    monte_place[place] = {rush : percent for rush, percent in sorted(samples_percentages, key=lambda item: item[0])}","46885707":"fig, ax = plt.subplots(figsize=(12, 6))\n\nx = np.arange(len(rushers))  # the label locations\nwidth = 0.175  # the width of the bars\n\nrects1 = ax.barh(x + 1.5*width, list(monte_place[0].values()), width, label='Best (1st of 4)', color=colours[\"DEN\"])\nrects2 = ax.barh(x + .5*width, list(monte_place[1].values()), width, label='Second-best (2nd of 4)', color=colours[\"NYJ\"])\nrects3 = ax.barh(x - .5*width, list(monte_place[2].values()), width, label='Third-best (3rd of 4)', color=colours[\"ATL\"])\nrects4 = ax.barh(x - 1.5*width, list(monte_place[3].values()), width, label='Worst (4th of 4)', color=colours[\"CAR\"])\n\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_xlabel('% of samples', fontsize=14)\nax.set_ylabel('Rushers', fontsize=14)\nax.set_yticks(x)\nax.set_yticklabels(rushers)\nax.legend(fontsize=12)\nax.set_xlim([0,45])\n\n# Hide spines\nfor spine in ['right', 'top', 'bottom']:\n    ax.spines[spine].set_visible(False)\n\n# Remove ticks\nplt.tick_params(axis='x', which='both',bottom=False,top=False,labelbottom=False)\nplt.tick_params(axis='y', which='both',left=False)\n\nautolabel(rects1, horizontal=True, percentageLabel=True)\nautolabel(rects2, horizontal=True, percentageLabel=True)\nautolabel(rects3, horizontal=True, percentageLabel=True)\nautolabel(rects4, horizontal=True, percentageLabel=True)\n\nfig.tight_layout()\n\nplt.savefig(\"monte_place.png\")\nplt.close(fig)\nImage(\"monte_place.png\") ","568822b9":"fig, axs = plt.subplots(2,1, figsize=(9, 9))\n\nx = np.arange(len(rushers))  # the label locations\nwidth = 0.175  # the width of the bars\n\n# Reward plot\nax = axs[0]\nrects1 = ax.bar(x - 1.5*width, list(monte_place[0].values()), width, label='Best (1st)',color=colours[\"BAL\"])\nrects2 = ax.bar(x - .5*width, [a+b for a,b in zip(list(monte_place[1].values()),list(monte_place[0].values()))], width, label='Second-best or better (1st or 2nd)',color=colours[\"JAX\"])\nrects3 = ax.bar(x + .5*width, [a+b+c for a,b,c in zip(list(monte_place[2].values()),list(monte_place[1].values()),list(monte_place[0].values()))], width, label='Third-best or better (1st, 2nd or 3rd)',color=colours[\"PHI\"])\nrects4 = ax.bar(x + 1.5*width,[a+b+c+d for a,b,c,d in zip(list(monte_place[3].values()),list(monte_place[2].values()),list(monte_place[1].values()),list(monte_place[0].values()))], width, label='Worst or better (1st, 2nd, 3rd or 4th)',color=colours[\"MIA\"])\n\nautolabel(rects1, percentageLabel=True)\nautolabel(rects2, percentageLabel=True)\nautolabel(rects3, percentageLabel=True)\nautolabel(rects4, percentageLabel=True)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('% of samples',fontsize=14)\nax.set_xlabel('Rushers',fontsize=14)\nax.set_xticks(x)\nax.set_xticklabels(rushers)\nax.set_yticks([0,20,40,60,80,100])\nax.set_yticklabels([0,20,40,60,80,100])\nax.legend(ncol=2,loc=\"upper center\",frameon=False,fontsize=10)\nax.set_title(\"Reward\",fontsize=16)\nax.set_ylim([0,135])\n\n# Hide spines\nfor spine in ['right', 'left', 'top']:\n    ax.spines[spine].set_visible(False)\n\n# Remove ticks\nax.tick_params(axis='x', which='both',bottom=False,top=False)\nax.tick_params(axis='y', which='both',left=False, labelleft=False)\n\n# Risk plot\nax = axs[1]\nrects1 = ax.bar(x - 1.5*width,[a+b+c+d for a,b,c,d in zip(list(monte_place[0].values()),list(monte_place[1].values()),list(monte_place[2].values()),list(monte_place[3].values()))], width, label='Best or worse (1st, 2nd, 3rd or 4th)',color=colours[\"DEN\"])\nrects2 = ax.bar(x - .5*width, [a+b+c for a,b,c in zip(list(monte_place[1].values()),list(monte_place[2].values()),list(monte_place[3].values()))], width, label='Second-best or worse (2nd, 3rd or 4th)',color=colours[\"CLE\"])\nrects3 = ax.bar(x + .5*width, [a+b for a,b in zip(list(monte_place[2].values()),list(monte_place[3].values()))], width, label='Third-best or worse (2nd, 3rd or 4th)',color=colours[\"WSH\"])\nrects4 = ax.bar(x + 1.5*width, list(monte_place[3].values()), width, label='Worst (4th)',color=colours[\"ATL\"])\n\nautolabel(rects1, percentageLabel=True)\nautolabel(rects2, percentageLabel=True)\nautolabel(rects3, percentageLabel=True)\nautolabel(rects4, percentageLabel=True)\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('% of samples',fontsize=14)\nax.set_xlabel('Rushers',fontsize=14)\nax.set_xticks(x)\nax.set_xticklabels(rushers)\nax.set_yticks([0,20,40,60,80,100])\nax.set_yticklabels([0,20,40,60,80,100])\nax.legend(ncol=2,loc=\"upper center\",frameon=False,fontsize=10)\nax.set_title(\"Risk\",fontsize=16)\nax.set_ylim([0,135])\n\n# Hide spines\nfor spine in ['right', 'left', 'top']:\n    ax.spines[spine].set_visible(False)\n\n# Remove ticks\nax.tick_params(axis='x', which='both',bottom=False,top=False)\nax.tick_params(axis='y', which='both',left=False, labelleft=False)\n\n\nfig.tight_layout()\nplt.subplots_adjust(hspace=0.4)\n\nplt.savefig(\"risk_reward.png\")\nplt.close(fig)\nImage(\"risk_reward.png\") ","5c2dae8d":"From this plot we can infer the Conventional Wisdom of defensive play callers on how many players to rush. They have a strong preference for rushing 4 players, followed by 5, 3 then 6 players. \n\nNow create a plot of the distributions of EPA-values (as histograms - noting the different scales on y-axis), for each number of rushers:","92bf92f2":"Now we have two sets of data for comparison:\n* **rushers_used** - percentage of actual plays **called** with each number of rushers (3, 4, 5, or 6)\n* **monte** - from the Monte Carlo Analysis, the percentage of samples that each number of rushers (3, 4, 5, or 6) had the smallest EPA-value (implying it's the best choice)","f9fb8234":"The video shows the Monte Carlo Analysis as it progresses, with the final results being presented in the plot below.\n\n**N.B.** For the benefit of viewing, the video frames correspond to a logarithmic progression of samples.","c203defe":"# Assumptions\n\nFor our analysis we rely upon the [EPA (Expected Points Added)](https:\/\/www.advancedfootballanalytics.com\/index.php\/home\/stats\/stats-explained\/expected-points-and-epa-explained) value for each play. The power of this metric is how it allows us to [control](https:\/\/en.wikipedia.org\/wiki\/Controlling_for_a_variable) for other variables that we are not considering in our analysis. It also allows us to determine binary classifications for which plays are a 'success' for the defence (i.e. a negative EPA-value) and which ones are a 'failure' (i.e. a positive EPA-value). As the EPA-values are supplied from the NFL with the dataset we are confident in their accuracy, however this assumed accuracy is a fundamental assumption of our analysis.\n\nIt is also important to remember these conclusions are drawn from the dataset of *passing plays* only (as this was the only data supplied by the NFL). The results of the analysis may change if the data associated with rushing plays is also included. ","185dcc0e":"# Beginning of Analysis\n\nThis notebook only uses the data in `plays.csv`. To ensure a high enough sample size, the data is filtered to only keep plays with 3, 4, 5 or 6 rushers.\n\nThe following dictionaries are created from this data:\n* **rushers_used** - storing the percentage of plays called with each number of rushers (3, 4, 5, or 6)\n* **epas** - storing a list of the EPA (Expected Points Added) on each play, organised by number of rushers used\n\nCreate a plot for the percentages that each number of rushers is used:","1626f038":"### Monte Carlo - Analysis 1\n\nUsing the [Monte Carlo Method](https:\/\/en.wikipedia.org\/wiki\/Monte_Carlo_method), perform an analysis to calculate the percentages that each given number of rushers has the smallest EPA-value for a given play. \n\nFor example, take a random EPA-value sample from each of the 4 distributions, comparing the values. Whichever value is smallest, that number of rushers is the best. Repeat 400,000 times*. Hence we can calculate the percentage that each number rushers yields the best result (i.e. has the smallest EPA). \n\n\\* a sensitivity analysis was carried out, determining that 400,000 samples was sufficient for convergence within 0.1%.\n\n**N.B.** the power of using the Monte Carlo Method is that it takes full account of the highly non-standard EPA distributions.\n","a2681482":"# About the Authors\n\nBen and Arthur met in their first year of university, studying Engineering at the University of Cambridge. They began following the NFL avidly in 2016, supporting the New York Giants and the Chicago Bears respectively. No thanks to their teams, their enjoyment increased as their knowledge of the game deepened. They decided the NFL's Big Data Bowl 2021 was a great opportunity to have some fun and do something very different to their day jobs.","7d5ce584":"These results show a stark contrast between the actual number of rushers used by defensive play callers and their respective success.\n\nThe results of the Monte Carlo analysis agree with our initial conclusions from earlier. They imply that defensive play callers ***should*** have a preference for **rushing more players**. \n\nThese results imply that the ***reward*** increases with increasing numbers of players that are rushed. But, as discussed earlier, we also need to consider the ***risk***.\n\n\n### Monte Carlo - Analysis 2\n\nTo investigate ***risk***, we need to consider a few additional results from our Monte Carlo Analysis.\n\nNamely, the percentage of samples that each number of rushers has the:\n* **smallest EPA-value** (i.e. best out of 4) - **previously the only result considered**\n* **second-smallest EPA-value** (i.e. 2nd best out of 4)\n* **third-smallest EPA-value** (i.e. 3rd best out of 4)\n* **fourth-smallest**, or largest, EPA-value (i.e. 4th best out of 4)\n\nFor example, to calculate the **second-smallest EPA-value**, take a random EPA sample from each of the 4 distributions. Compare EPA values, with whichever is ***second-smallest***, that number of rushers is the ***second-best***. Repeating 400,000 times, hence calculate the percentage of samples that each number rushers yields the ***second-best*** result (i.e. ***second-smallest*** EPA).\n\nConsidering the all of the 4 results above allows us to investigate the balance between the ***reward*** and ***risk*** associated with each number of rushers. The choice of how many players to rush isn't just about achieving the best outcome, but also about avoiding the bad outcomes. ","095a47c0":"# Question\n> How many players should a defence rush to minimise EPA?\n\nAfter initially exploring all the data made available in this year's competition, we considered a few different ideas for our Notebook. When exploring one idea we discovered a simple, yet significant, outcome. Could the [Conventional Wisdom](https:\/\/en.wikipedia.org\/wiki\/Conventional_wisdom) of defensive play callers truly be this different to the reality presented by the data?\n\nThe analysis has been written as a narrative, so it is recommended you don't just skip to the end.\n\nCan you spot the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Easter_egg_(media)\">Easter Egg<\/a> associated with the colour scheme?\n\n\n# Summary\n\nThe reality presented by the data does not agree with the Conventional Wisdom of rushing 4 players the majority of the time. Although progress should be cautious and gradual, defensive play callers should look to significantly change the amount they use different numbers of rushers. They should reduce the amount they rush 4 players and should show a greater preference for rushing 5 and 6.","1485f997":"Hopefully you are not too confused at this point! If so, it may be worth going back a few steps having a quick refresh.\n\nSo what does this final plot tells us? \n\nBegin by considering the **'Reward'** subplot. As with the first Monte Carlo analysis, the *'Best'* bars show that the ***reward*** increases with increased numbers of rushers. But the additional results of this analysis allow us to look deeper than this. From the *'Second-best or better'* bars, we can also see that the trend of increasing ***reward*** with more rushers continues. This trend flattens off (and reverses slightly) when considering the *'Third-best or better'* bars, which demonstrates the higher ***risk*** associated with higher numbers of rushers.\n\nWe can consider risk further with the second **'Risk'** subplot. As would be expected from Conventional Wisdom, if we just consider the *'Worst'* bars, they show that rushing 4 players poses the lowest ***risk***, followed by 3 rushers, with 5 and 6 rushers being approximately the same. However, if we now consider the *'Third-best or worse'* and *'Second-best or worse'* bars we can see that the opposite trend exists: *the higher the number of rushers, the lower the* ***risk***.\n\nHence, we have shown that. \n* Rushing more players gives a higher chance of achieving the ***best*** outcome\n* The Conventional Wisdom of rushing 4 players the majority of the time gives the highest chance of avoiding the ***worst*** outcome\n* **But**, rushing more players reduces the risk of the ***second-worst*** and ***third-worst*** outcomes (a bit mind-bending to think about, heh?)\n\nWe have demonstrated there is a huge gap between the frequency of each number of rushers used by defensive play callers and the reality of their impacts on the game. Hence, we draw a \nquite radical conclusion: \n\n> Defensive play callers should look to significantly change the amount they use different numbers of rushers. They should reduce the amount they rush 4 players and should show a greater preference for rushing 5 and 6.\n\nHowever, it is important to remember an important principle: **Equilibrium**. What we have found is the **gradient**, the direction in which change needs to occur. Defensive play callers should undoubtedly look to increase the amount they rush more players, but this should occur in a gradual fashion. For example, the irregularity of rushing 6 players lends it the advantage of surprise; a significant increase in using 6 players will reduce the surprise element and so could impact the effectiveness. \n\nUnderstanding the balance between ***risk*** and ***reward*** will allow defensive play callers to make more informed decisions on how many players to rush. Rushing more passers increases volatility, but on average has the greatest impact on swinging the scoreboard in the Team's favour. Defensive play callers can use this knowledge, with their current appetite for risk (depending on the game situation), to make better decisions to help win Football games!","a9b56c54":"Now plot the results of the second Monte Carlo Analysis. (For clarity, the 'Reality' of rushers used is not included in this plot).","ab3ed85e":"Before we discuss these plots, it may be worth reminding yourself of the play call percentage plot above, which shows that 4 players are rushed the majority of the time, followed by 5, 3, then 6 players. This is also indicated by the y-axis limits of the EPA-distribution plots.\n\nFrom the above plots, we can draw some initial conclusions:\n\n**Primary**:\n* The percentage of plays which are a 'success' increases with increasing number of rushers\n* As the number of rushers is increased from 4 to 6, the mean EPA-value of the successful plays improves - i.e. the ***reward*** increases with increasing numbers of rushers\n* However, as the number of rushers is increased, the mean EPA-value of the failure plays worsens - i.e. the ***risk*** increases with increasing numbers of rushers\n\n**Secondary** (i.e. less interesting):\n* Plays which rush 3 or 4 players have similar mean EPA-values, with 4-rushers having a higher 'success' rate. This supports the conventional wisdom of rushing 4 players more frequently than 3\n\nThese initial conclusions imply that the Conventional Wisdom of defensive play callers, in rushing 4 players the majority of the time, needs to be reconsidered. Let's deepen our analysis further.","75a8d3bc":"From this new plot, we may initially naively conclude that this plot supports the Conventional Wisdom of defensive play callers. The plot appears to indicate that, although rushing 6 players may give the best outcome the highest percentage of the time, it gives the lowest percentages for being the 2nd and 3rd best, and the highest percentage for being the worst. On the other hand, although rushing 4 players has the approximate joint-worse probability in achieving the best outcome, it has the highest percentages for being the 2nd and 3rd best, and the lowest percentage for being the worst.\n\nThe issue with the above conclusions are that they forget the interdependency between each result. It is not a useful comparison to compare the percentage that each number of rushers was the 2nd best; what is a useful comparison is to compare the percentage that each number of rushers was the ***2nd best or better***. It is the **cumulative** percentages which are important for drawing conclusions.\n\nHence, we will plot the results in a cumulative form. To investigate both ***risk*** and ***reward*** we need to plot the results cumulatively in both 'directions'.","1869517e":"An interesting feature of these distributions is the trough around the 0 EPA-value, which broadly splits two peaks. For a defence, an EPA-value above 0 indicates a 'failure' and an EPA-value below 0 represents a 'success'. Hence, a shallower trough around 0 indicates a 'safer' play call and a deeper trough a more 'risky' one. As the troughs deepen for rushing more players, this follows the conventional wisdom that the more players rushed, the greater the ***risk***.\n\nBut how much greater ***risk*** is there? \n\nIt is worth re-emphasising an important premise:\n\n> A play with an EPA-value less than 0 is deemed a 'success'\n\n> A play with an EPA-value greater than 0 is deemed a 'failure'\n\nWe can take our analysis further by separating each distribution in two: a 'success' distribution and a 'failure' distribution. This allows us to consider the following:\n1. For each number of rushers, the percentage of defensive plays that are a 'success' (i.e. have negative EPA-values)\n2. The mean EPA-values for 'successful' and 'failure' defensive plays"}}