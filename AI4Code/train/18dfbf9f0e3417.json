{"cell_type":{"366d4785":"code","0165d057":"code","18b84bda":"code","140cfe2c":"code","66839d70":"code","b2c2a675":"code","b7287ef5":"code","57b97194":"code","73ce4cb6":"code","046ed41a":"code","1bb425b5":"code","96d13346":"code","f96d1e1e":"code","54070445":"code","db478148":"code","fc053934":"code","8cb65f0e":"code","9b846d5f":"code","2845e18f":"code","b84290c0":"code","9113e43a":"code","738fdb2d":"code","2ad388c9":"code","72c65372":"code","143f0f26":"code","add5d7bc":"code","5c9a2316":"code","50371004":"code","d7d0fb6c":"code","246d3d08":"code","74eb1e17":"code","a872c46e":"code","f15d8496":"code","4608c670":"code","bc1e4098":"code","9a1cca1b":"code","eb4e2241":"code","99f652e6":"code","c4d7e6d1":"code","1b8804e4":"code","44e11fb3":"code","4cbd72fc":"code","cfbcb68e":"code","fdbd0c2b":"code","32ff3803":"code","112f4c59":"code","766bd56a":"code","b09e8cd5":"markdown","19abe443":"markdown","f45abfa9":"markdown","1ade82e9":"markdown","4a34d6cf":"markdown","d2cb5d68":"markdown","3e81c508":"markdown","4c9ae8d1":"markdown","17dbf238":"markdown","50f6f0f9":"markdown","150072ac":"markdown","75d4ba49":"markdown"},"source":{"366d4785":"# Importing libraries\nimport numpy as np         # linear algebra\nimport pandas as pd       # data processing","0165d057":"df = pd.read_csv('..\/input\/churn-prediction\/Churn.csv')\ndf.head()","18b84bda":"df = df.iloc[:3000,:]\ndf","140cfe2c":"print (\"Rows     : \" ,df.shape[0])\nprint (\"Columns  : \" ,df.shape[1])","66839d70":"print (\"\\nVariables : \\n\" ,df.columns.tolist())","b2c2a675":"print (\"\\nMissing values :  \", df.isnull().sum().values.sum())","b7287ef5":"print (\"\\nUnique values :  \\n\",df.nunique())","57b97194":"df.dtypes","73ce4cb6":"df.info()","046ed41a":"#Dropping null values from total charges column which contain .15% missing data \n#df = df[df[\"TotalCharges\"].notnull()]\n#df = df.reset_index()[df.columns]","1bb425b5":"df = df.replace({\"Male\":1,\"Female\":0,\"Yes\":1,\"No\":0,\"No phone service\":0,\"No internet service\":0})\ndf","96d13346":"#Replacing spaces with null values in total charges column\ndf['TotalCharges'] = df[\"TotalCharges\"].replace(\" \",np.nan).astype(float)\ndf['InternetService'] = df['InternetService'].replace({\"DSL\":1,\"Fiber optic\":2,\"No\":0})\ndf['Contract'] = df['Contract'].replace({\"Month-to-month\":0,\"One year\":1,\"Two year\":2})","f96d1e1e":"#df.dropna(subset=[\"columnname\"], axis=0)","54070445":"#df.dropna(subset=[\"columnname\"], axis=0)\n\ndel df['customerID']\n\ndel df['PaymentMethod']","db478148":"# def tenure_lab(telcom) :\n    \n#     if telcom[\"tenure\"] <= 12 :\n#         return 0\n#     elif (telcom[\"tenure\"] > 12) & (telcom[\"tenure\"] <= 24 ):\n#         return 1\n#     elif (telcom[\"tenure\"] > 24) & (telcom[\"tenure\"] <= 48) :\n#         return 2\n#     elif (telcom[\"tenure\"] > 48) & (telcom[\"tenure\"] <= 60) :\n#         return 3\n#     elif telcom[\"tenure\"] > 60 :\n#         return 4\n# df[\"Tenure_group\"] = df.apply(lambda df:tenure_lab(df),\n#                                       axis = 1)","fc053934":"df.count()","8cb65f0e":"avg_norm_TotalCharges = df[\"TotalCharges\"].astype(\"float\").mean(axis=0)\nprint(\"Average of normalized-TotalCharges:\",avg_norm_TotalCharges)","9b846d5f":"df[\"TotalCharges\"].replace(np.nan, avg_norm_TotalCharges, inplace=True)","2845e18f":"df.count()","b84290c0":"df = df.astype(float)","9113e43a":"df.info()","738fdb2d":"df.corr()","2ad388c9":"import seaborn as sns\nfrom matplotlib.pyplot import figure \nfrom matplotlib import pyplot as plt\nplt.figure(figsize=(6,8), dpi= 80, facecolor='w', edgecolor='k')\nsns.countplot(x='Churn',data=df, palette='hls')\nplt.show()","72c65372":"from matplotlib.pyplot import figure\nplt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nsns.heatmap(df.corr(),annot = True,cmap='Blues')  \nplt.savefig('heatmap.png')\nplt.show()","143f0f26":"from sklearn.ensemble import ExtraTreesClassifier\n\nX = df[[ 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'MonthlyCharges', 'TotalCharges']] #ind col\ny = df['Churn']   #targt \nmodel = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\n","add5d7bc":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nfeat_importances.nlargest(20).plot(kind='barh',edgecolor='w',color='orange')\nplt.ylabel('Independent Variables ',size=20,color='orange')\nplt.title('ALL FEATURES',size=40,color='orange')\nplt.show()\n#plt.savefig('heap.png')","5c9a2316":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nfeat_importances.nlargest(15).plot(kind='barh',edgecolor='w',color='y')\nplt.ylabel('Independent Variables ',size=20,color='y')\nplt.show()\n#plt.savefig('heap.png')\n","50371004":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nfeat_importances.nlargest(10).plot(kind='barh',edgecolor='w',color='c')\nplt.ylabel('Independent Variables ',size=20,color='c')\nplt.title(\"IMPORTANT FEATURE\",size=40,color='c')\nplt.show()\n#plt.savefig('heap.png')","d7d0fb6c":"X1 = df[['OnlineSecurity','Partner','PaperlessBilling','TechSupport','gender','Contract','InternetService','MonthlyCharges','TotalCharges','tenure']]\nY1 = df['Churn']","246d3d08":"df1 = df[['Churn','OnlineSecurity','Partner','PaperlessBilling','TechSupport','gender','Contract','InternetService','MonthlyCharges','TotalCharges','tenure']]\n","74eb1e17":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split( X1, Y1, test_size=0.2, random_state=42)\nprint ('Train set:', X_train.shape,  Y_train.shape)\nprint ('Test set:', X_test.shape,  Y_test.shape)","a872c46e":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nax = df[df['Churn'] == 1][:].plot\\\n(kind='scatter', x='TotalCharges', y='tenure', color='DarkBlue', label='Churn',alpha=0.4)\n\ndf[df['Churn'] == 0][:].plot\\\n(kind='scatter', x='TotalCharges', y='tenure', color='Orange', label='No churn',alpha=0.1,ax=ax)\nplt.show()","f15d8496":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nax = df[df['Churn'] == 1][:].plot\\\n(kind='scatter', x='TotalCharges', y='tenure', color='DarkBlue', label='Churn',alpha=0.3)\n\ndf[df['Churn'] == 0][:].plot\\\n(kind='scatter', x='TotalCharges', y='tenure', color='Orange', label='No churn',alpha=0.3)\nplt.show()","4608c670":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nax = df[df['Churn'] == 1][:].plot\\\n(kind='scatter', x='MonthlyCharges', y='InternetService', color='DarkBlue', label='Churn',alpha=0.3)\n\ndf[df['Churn'] == 0][:].plot\\\n(kind='scatter', x='MonthlyCharges', y='InternetService', color='Orange', label='No churn',alpha=0.3)\nplt.show()","bc1e4098":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nax = df[df['Churn'] == 1][:].plot\\\n(kind='scatter', x='TotalCharges', y='Contract', color='b', label='Churn',alpha=0.8)\n\ndf[df['Churn'] == 0][:].plot\\\n(kind='scatter', x='TotalCharges', y='Contract', color='r', label='No churn',alpha=0.1,ax=ax)\nplt.show()","9a1cca1b":"plt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nax = df[df['Churn'] == 1][:].plot\\\n(kind='scatter', x='TotalCharges', y='gender', color='k', label='Churn',alpha=0.8)\n\ndf[df['Churn'] == 0][:].plot\\\n(kind='scatter', x='TotalCharges', y='gender', color='r', label='No churn',alpha=0.1,ax=ax)\nplt.show()","eb4e2241":"from matplotlib.pyplot import figure\nplt.figure(figsize=(15,10), dpi= 80, facecolor='w', edgecolor='k')\nsns.heatmap(df1.corr(),cmap='YlGnBu')  \n#plt.savefig('heatmap.png')\nplt.show()","99f652e6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,Y_train) #\nLR","c4d7e6d1":"yhat = LR.predict(X_test)\nyhat","1b8804e4":"X_test.head()","44e11fb3":"yhat_prob = LR.predict_proba(X_test)\nyhat_prob[:5]","4cbd72fc":"plt.figure(figsize=(15,8))\nplt.plot(X_test, yhat_prob, 'co',alpha=0.4)\nplt.ylabel('Probabilities',size=15)\nplt.xlabel('Independent Variable',size=15)\nplt.show()","cfbcb68e":"from sklearn.metrics import classification_report, confusion_matrix\nimport itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\nprint(confusion_matrix(Y_test, yhat, labels=[1,0]))","fdbd0c2b":"# Compute confusion matrix\ncnf_matrix = confusion_matrix(Y_test, yhat, labels=[1,0])\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\n\nplt.figure(figsize=(10,10))\nplot_confusion_matrix(cnf_matrix, classes=['Churn=1','Churn=0'],normalize= False,  title='Confusion matrix',cmap='Reds')","32ff3803":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy Score = \",  accuracy_score(Y_test,yhat))","112f4c59":"print (classification_report(Y_test, yhat))","766bd56a":"from sklearn.metrics import log_loss\nlog_loss(Y_test, yhat_prob)","b09e8cd5":"## Exploratory Data Analysis","19abe443":"# **Telecom Customer Churn Prediction**","f45abfa9":"# Dataset Overveiw","1ade82e9":"## Model Evaluation","4a34d6cf":"# Testing","d2cb5d68":"## Data Manipulation","3e81c508":"Look at first row.\n\nThe firsr row is for customers whose actual churn value in test set is 1.\n\nAs you can calculate, out of 600 customers, the churn value of 146 of them is 1. And out of these 146, the classifier correctly predicted 78 of them as 1, and 68 of them as 0.\n\nIt means, for 78 customers, the actual churn value were 1 in test set, and classifier also correctly predicted those as 1. \n\nHowever, while the actual label of 68 customers were 1, the classifier predicted those as 0, which is not very good.\n\nWe can consider it as error of the model for first row.\n\nWhat about the customers with churn value 0? Lets look at the second row. It looks like there were 454 customers whom their churn value were 0.\n\nThe classifier correctly predicted 405 of them as 0, and 49 of them wrongly as 1.\n\nSo, it has done a good job in predicting the customers with churn value 0. \n\nA good thing about confusion matrix is that shows the model\u2019s ability to correctly predict or separate the classes.\n\n\n","4c9ae8d1":"#### Confusion Matrix","17dbf238":"# Train \/ Test Split  ","50f6f0f9":"## Log loss","150072ac":"# Training","75d4ba49":"Now, lets try log loss for evaluation. \n\nIn logistic regression, the output can be the probability of customer churn is yes (or equals to 1). \n\nThis probability is a value between 0 and 1.\n\nLog loss( Logarithmic loss) measures the performance of a classifier where the predicted output is a probability value between 0 and 1."}}