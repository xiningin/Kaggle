{"cell_type":{"56b8f071":"code","9d6aea59":"code","b21e9c3e":"code","2e91b454":"code","268a3126":"code","3e0bee6d":"code","ffa45937":"code","fbe81714":"code","036e332b":"code","fe4449e0":"code","88946cd9":"code","d972df68":"code","774a8ac6":"code","a4a5ea48":"code","3bc52428":"code","1f764af6":"code","a7e4f331":"code","f0453f88":"code","613bfd9a":"code","9f133850":"code","8df4fa8f":"code","065b4ed1":"code","945992b0":"code","45db0439":"code","4b675ef3":"code","8b0eac69":"markdown","15c4ed1d":"markdown","3623d73a":"markdown","93014dca":"markdown","895b2f3a":"markdown","b65a411d":"markdown","e6714a8f":"markdown","62fcb40a":"markdown","1fab43ec":"markdown","ebacffbd":"markdown","0640cadf":"markdown"},"source":{"56b8f071":"# Load packages\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.feature_extraction.text import HashingVectorizer\nfrom sklearn.base import TransformerMixin\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.utils import shuffle\nfrom sklearn.feature_extraction.stop_words import ENGLISH_STOP_WORDS\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import classification_report \nfrom nltk.corpus import stopwords\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom nltk.stem.porter import PorterStemmer\nimport string\nimport spacy\nfrom spacy.lang.en import English\nspacy.load('en')\nparser = English()","9d6aea59":"# load dataset\nbbc_df = pd.read_csv('..\/input\/bbc-text.csv')","b21e9c3e":"bbc_df.head(10)","2e91b454":"bbc_df.shape","268a3126":"bbc_df.info()","3e0bee6d":"bbc_df['category'].unique()","ffa45937":"bbc_df['category'].value_counts()","fbe81714":"sns.countplot(bbc_df['category'])","036e332b":"# change category labels\nbbc_df['category'] = bbc_df['category'].map({'sport':1,'business':-1,'politics':-1,'tech':-1,'entertainment':-1})","fe4449e0":"# create a new dataset with only sport category data\nsports_df = bbc_df[bbc_df['category'] == 1]","88946cd9":"sports_df.shape","d972df68":"# create train and test data\ntrain_text = sports_df['text'].tolist()\ntrain_labels = sports_df['category'].tolist()\n\ntest_text = bbc_df['text'].tolist()\ntest_labels = bbc_df['category'].tolist()","774a8ac6":"# stop words list\nSTOPLIST = set(stopwords.words('english') + list(ENGLISH_STOP_WORDS)) \n# special characters\nSYMBOLS = \" \".join(string.punctuation).split(\" \") + [\"-\", \"...\", \"\u201d\", \"\u201d\",\"''\"]","a4a5ea48":"# class for cleaning the text\nclass CleanTextTransformer(TransformerMixin):\n    def transform(self, X, **transform_params):\n        return [cleanText(text) for text in X]\n    def fit(self, X, y=None, **fit_params):\n        return self\n    def get_params(self, deep=True):\n            return {}\n\ndef cleanText(text):\n    text = text.strip().replace(\"\\n\", \" \").replace(\"\\r\", \" \")\n    text = text.lower()\n    return text","3bc52428":"# tokenizing the raw text\ndef tokenizeText(sample):\n    \n    tokens = parser(sample)\n    \n    # lemmatization\n    lemmas = []\n    for tok in tokens:\n        lemmas.append(tok.lemma_.lower().strip() if tok.lemma_ != \"-PRON-\" else tok.lower_)\n    tokens = lemmas\n    \n    # remove stop words and special characters\n    tokens = [tok for tok in tokens if tok.lower() not in STOPLIST]\n    tokens = [tok for tok in tokens if tok not in SYMBOLS]\n    \n    # only take words with length greater than or equal to 3\n    tokens = [tok for tok in tokens if len(tok) >= 3]\n    \n    # remove remaining tokens that are not alphabetic\n    tokens = [tok for tok in tokens if tok.isalpha()]\n    \n    # stemming of words\n    porter = PorterStemmer()\n    tokens = [porter.stem(word) for word in tokens]\n    \n    return list(set(tokens))","1f764af6":"# lets see tokenized random text\ntokenizeText(train_text[9])","a7e4f331":"# getting features\nvectorizer = HashingVectorizer(n_features=20,tokenizer=tokenizeText)\n\nfeatures = vectorizer.fit_transform(train_text).toarray()\nfeatures.shape","f0453f88":"# OneClassSVM algorithm\nclf = OneClassSVM(nu=0.1, kernel=\"rbf\", gamma=0.1)\npipe_clf = Pipeline([('cleanText', CleanTextTransformer()), ('vectorizer', vectorizer), ('clf', clf)])","613bfd9a":"# fit OneClassSVM model \npipe_clf.fit(train_text, train_labels)","9f133850":"# validate OneClassSVM model with train set\npreds_train = pipe_clf.predict(train_text)\n\nprint(\"accuracy:\", accuracy_score(train_labels, preds_train))","8df4fa8f":"# validate OneClassSVM model with test set\npreds_test = pipe_clf.predict(test_text)\npreds_test","065b4ed1":"results = confusion_matrix(test_labels, preds_test) \nprint('Confusion Matrix :')\nprint(results) \nprint('Accuracy Score :',accuracy_score(test_labels, preds_test)) \nprint('Report : ')\nprint(classification_report(test_labels, preds_test)) ","945992b0":"# let's take random text from dataset\ntest_text[3]","45db0439":"# check actual category\ntest_labels[3]","4b675ef3":"# let's predict the category of above random text\npipe_clf.predict([test_text[3]])","8b0eac69":"## Feature Extraction","15c4ed1d":"One-class SVM is an unsupervised algorithm that learns a decision function for novelty detection: classifying new data as similar or different to the training set.","3623d73a":"## One-class SVM","93014dca":"## Data Cleaning and Tokenization","895b2f3a":"our model predicted random text as sport category which is correct","b65a411d":"## Data preparation","e6714a8f":"Let's check how model is performing ","62fcb40a":"The one-class algorithms are based on recognition since their aim is to recognize data from a particular class, and reject data from all other classes. This is accomplished by creating a boundary that encompasses all the data belonging to the target class within itself, so when a new sample arrives the algorithm only has to check whether it lies within the boundary or outside and accordingly classify the sample as belonging to the target class or the outlier.","1fab43ec":"Let's take \"sport\" category as our traning class for one-class classification\n\nso let's replace the category labels\n\nSince \"sport\" is our traning class let's replace \"sport\" with \"1\" and replace \"business, politics, tech and entertainment\" with \"-1\"\n\nbecuase one-class classification model prediction will be 1 or -1\n\nhere \"1\" is target class and \"-1\" is the outlier","ebacffbd":"# Text Classification - OneClass Classificaiton","0640cadf":"Things we are going to discuss:\n\n1. Data Preparation \n2. Cleaning and Tokenization\n3. Feature Extraction\n4. Train One-class classificaiton model\n5. Predict one-class on test data"}}