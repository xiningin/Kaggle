{"cell_type":{"76c2aeb9":"code","85a0410e":"code","5b5f4aa4":"code","ee1ddf62":"code","b9f6930d":"code","d7e13c28":"code","cdffa1ed":"code","7b38d369":"code","41446089":"code","7049f568":"code","8bf6fc82":"code","5afc8f25":"code","5aa02fe5":"code","36bab619":"code","03de5f95":"code","4701ec78":"code","0c064802":"code","2bb58a80":"code","c6a038d3":"code","7b47ee6e":"code","2f6482a3":"code","ebf8102c":"code","0b51fb5d":"code","761733cf":"code","d463586e":"code","11cef672":"code","c74b9b41":"code","87b2251f":"code","6adc3a27":"code","875f994a":"code","425ce874":"code","b0f5a9f3":"code","61fa4e19":"code","3b5e24e2":"code","2ce162a2":"code","5bdf79e1":"code","de1304a5":"code","6d9f4e21":"code","e3f17981":"code","ae701481":"code","43be0ce6":"markdown","25569bbf":"markdown","d97d4664":"markdown","0ea99b90":"markdown","14e96458":"markdown","5dc2d1d4":"markdown","2411675f":"markdown","09e674d9":"markdown","fc26a74d":"markdown"},"source":{"76c2aeb9":"%reload_ext autoreload\n%autoreload 2","85a0410e":"from fastai import *\nfrom fastai.tabular import *","5b5f4aa4":"path = Path('data\/rossmann\/')\ndest = path\ndest.mkdir(parents=True, exist_ok=True)","ee1ddf62":"!cp -r ..\/input\/* {path}\/","b9f6930d":"path.ls()","d7e13c28":"train_df = pd.read_pickle(path\/'train_clean')","cdffa1ed":"train_df.head().T","7b38d369":"n = len(train_df); n","41446089":"idx = np.random.permutation(range(n))[:2000]\nidx.sort()\nsmall_train_df = train_df.iloc[idx[:1000]]\nsmall_test_df = train_df.iloc[idx[1000:]]\nsmall_cont_vars = ['CompetitionDistance', 'Mean_Humidity']\nsmall_cat_vars =  ['Store', 'DayOfWeek', 'PromoInterval']\nsmall_train_df = small_train_df[small_cat_vars + small_cont_vars + ['Sales']]\nsmall_test_df = small_test_df[small_cat_vars + small_cont_vars + ['Sales']]","7049f568":"small_train_df.head()","8bf6fc82":"small_test_df.head()","5afc8f25":"categorify = Categorify(small_cat_vars, small_cont_vars)\ncategorify(small_train_df)\ncategorify(small_test_df, test=True)","5aa02fe5":"small_test_df.head()","36bab619":"small_train_df.PromoInterval.cat.categories","03de5f95":"small_train_df['PromoInterval'].cat.codes[:5]","4701ec78":"fill_missing = FillMissing(small_cat_vars, small_cont_vars)\nfill_missing(small_train_df)\nfill_missing(small_test_df, test=True)","0c064802":"small_train_df[small_train_df['CompetitionDistance_na'] == True]","2bb58a80":"train_df = pd.read_pickle(path\/'train_clean')\ntest_df = pd.read_pickle(path\/'test_clean')","c6a038d3":"len(train_df),len(test_df)","7b47ee6e":"procs=[FillMissing, Categorify, Normalize]","2f6482a3":"cat_vars = ['Store', 'DayOfWeek', 'Year', 'Month', 'Day', 'StateHoliday', 'CompetitionMonthsOpen',\n    'Promo2Weeks', 'StoreType', 'Assortment', 'PromoInterval', 'CompetitionOpenSinceYear', 'Promo2SinceYear',\n    'State', 'Week', 'Events', 'Promo_fw', 'Promo_bw', 'StateHoliday_fw', 'StateHoliday_bw',\n    'SchoolHoliday_fw', 'SchoolHoliday_bw']\n\ncont_vars = ['CompetitionDistance', 'Max_TemperatureC', 'Mean_TemperatureC', 'Min_TemperatureC',\n   'Max_Humidity', 'Mean_Humidity', 'Min_Humidity', 'Max_Wind_SpeedKm_h', \n   'Mean_Wind_SpeedKm_h', 'CloudCover', 'trend', 'trend_DE',\n   'AfterStateHoliday', 'BeforeStateHoliday', 'Promo', 'SchoolHoliday']","ebf8102c":"dep_var = 'Sales'\ndf = train_df[cat_vars + cont_vars + [dep_var,'Date']].copy()","0b51fb5d":"test_df['Date'].min(), test_df['Date'].max()","761733cf":"cut = train_df['Date'][(train_df['Date'] == train_df['Date'][len(test_df)])].index.max()\ncut","d463586e":"valid_idx = range(cut)","11cef672":"df[dep_var].head()","c74b9b41":"data = (TabularList.from_df(df, path=path, cat_names=cat_vars, cont_names=cont_vars, procs=procs)\n                   .split_by_idx(valid_idx)\n                   .label_from_df(cols=dep_var, label_cls=FloatList, log=True)\n                   .databunch())","87b2251f":"#doc(FloatList)","6adc3a27":"max_log_y = np.log(np.max(train_df['Sales'])*1.2)\ny_range = torch.tensor([0, max_log_y], device=defaults.device)","875f994a":"learn = tabular_learner(data, layers=[1000,500], ps=[0.001,0.01], emb_drop=0.04, \n                        y_range=y_range, metrics=exp_rmspe)","425ce874":"learn.model","b0f5a9f3":"len(data.train_ds.cont_names)","61fa4e19":"learn.lr_find()","3b5e24e2":"learn.recorder.plot()","2ce162a2":"learn.fit_one_cycle(5, 1e-3, wd=0.2)","5bdf79e1":"learn.save('1')","de1304a5":"learn.recorder.plot_losses(last=-1)","6d9f4e21":"learn.load('1');","e3f17981":"learn.fit_one_cycle(5, 3e-4)","ae701481":"learn.fit_one_cycle(5, 3e-4)","43be0ce6":"### Preparing full data set","25569bbf":"[Lesson Video Link](https:\/\/course.fast.ai\/videos\/?lesson=6)\n\n[Lesson resources and updates](https:\/\/forums.fast.ai\/t\/lesson-6-official-resources-and-updates\/31441)\n\n[Lesson chat](https:\/\/forums.fast.ai\/t\/lesson-6-in-class-discussion\/31440)\n\n[Further discussion thread](https:\/\/forums.fast.ai\/t\/lesson-6-advanced-discussion\/31442)\n\nNote: This is a mirror of the FastAI Lesson 6 Nb. \nPlease thank the amazing team behind fast.ai for creating these, I've merely created a mirror of the same here\nFor complete info on the course, visit course.fast.ai","d97d4664":"(10th place in the competition was 0.108)","0ea99b90":"## Data preparation","14e96458":"To create the feature-engineered train_clean and test_clean from the Kaggle competition data, run `rossman_data_clean.ipynb`. One important step that deals with time series is this:\n\n```python\nadd_datepart(train, \"Date\", drop=False)\nadd_datepart(test, \"Date\", drop=False)\n```","5dc2d1d4":"## Model","2411675f":"## fin","09e674d9":"# Rossmann","fc26a74d":"### Experimenting with a sample"}}