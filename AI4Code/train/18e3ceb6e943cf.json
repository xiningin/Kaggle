{"cell_type":{"cc1973b1":"code","d95dc724":"code","42073d05":"code","b515e9f7":"code","1312cb3c":"code","780c73db":"code","340f6ece":"code","1c27d964":"code","5636ac1a":"code","1fabb9e4":"code","1cb5ff4c":"code","e6eb6837":"code","756a80c9":"code","3a476a40":"code","62cb72f1":"code","c9fbf2c0":"code","a28bc6c0":"code","37bdb351":"code","ba593b10":"code","11d74fb0":"code","c87c7eff":"code","5197ba99":"code","4a9a3222":"code","e05b7856":"code","abc0b593":"markdown","ae144dca":"markdown"},"source":{"cc1973b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d95dc724":"pip install xfeat","42073d05":"import matplotlib.pyplot as plt\nimport seaborn as sns\n#from matplotlib_venn import venn2\nimport category_encoders as ce\n%matplotlib inline\n\nfrom xfeat import (SelectCategorical, LabelEncoder, Pipeline, ConcatCombination, SelectNumerical, \n                   ArithmeticCombinations, TargetEncoder, aggregation, GBDTFeatureSelector, GBDTFeatureExplorer)\n\nfrom catboost import CatBoost\nfrom catboost import CatBoostClassifier\nfrom catboost import CatBoostRegressor\nfrom catboost import Pool\nfrom catboost import cv\nfrom sklearn.metrics import mean_squared_log_error\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom tqdm import tqdm\n\nimport os\nfrom glob import glob\n\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.decomposition import PCA\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\n\nimport shap\nimport gc\n\nfrom optuna.integration import _lightgbm_tuner as lgb_tuner\nimport optuna\nfrom collections import Counter\npd.set_option('display.max_columns', 100)\n\nimport warnings\nwarnings.filterwarnings('ignore')","b515e9f7":"from contextlib import contextmanager\nfrom time import time\n\n@contextmanager\ndef timer(logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None):\n    if prefix: format_str = str(prefix) + format_str\n    if suffix: format_str = format_str + str(suffix)\n    start = time()\n    yield\n    d = time() - start\n    out_str = format_str.format(d)\n    if logger:\n        logger.info(out_str)\n    else:\n        print(out_str)\n        \ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","1312cb3c":"train_df = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/test.csv\")\nsub_df = pd.read_csv(\"..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv\")","780c73db":"# fillna preprocessing\nall_df = pd.concat([train_df, test_df])\n\nage_map = all_df[['Age', 'Pclass']].dropna().groupby('Pclass').median().to_dict()\n\ncombine = [train_df, test_df]\n\nfor dataset in combine:\n    dataset.Age = dataset.Age.fillna(dataset.Pclass.map(age_map['Age']))\n    dataset.Fare = dataset.Fare.fillna(all_df.Fare.mean())","340f6ece":"train_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)","1c27d964":"train_df.head()","5636ac1a":"test_df.head()","1fabb9e4":"# change category->object\n\nchange_cols = [\"Pclass\",\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Embarked\"]\n\nfor col in change_cols:\n    train_df[col] = train_df[col].astype(str)\n    test_df[col] = test_df[col].astype(str)","1cb5ff4c":"# baseBlock \n\nclass BaseBlock(object):\n    def fit(self, input_df, y=None):\n        return self.transform(input_df)\n    \n    def transform(self, input_df):\n        raise NotImplementedError()\n        \n# CountEncoding\nclass CountEncodingBlock(BaseBlock):\n    def __init__(self, cols):\n        self.cols = cols\n        self.encoder = None\n        \n    def fit(self, input_df, y=None):\n        return self.transform(input_df[self.cols])\n    \n    def transform(self, input_df):\n        self.encoder = ce.CountEncoder()\n        self.encoder.fit(input_df[self.cols])\n        return self.encoder.transform(input_df[self.cols]).add_prefix(\"CE_\")\n    \n# OneHotEncoding\nclass OneHotEncodingBlock(BaseBlock):\n    def __init__(self, cols):\n        self.cols = cols\n        self.encoder = None\n        \n    def fit(self, input_df, y=None):\n        self.encoder = ce.OneHotEncoder(use_cat_names=True)\n        self.encoder.fit(input_df[self.cols])\n        return self.transform(input_df[self.cols])\n    \n    def transform(self, input_df):\n        return self.encoder.transform(input_df[self.cols]).add_prefix(\"OHE_\")\n\n# OrdinalEncoding\nclass OrdinalEncodingBlock(BaseBlock):\n    def __init__(self, cols):\n        self.cols = cols\n        self.encoder = None\n        \n    def fit(self, input_df, y=None):\n        self.encoder = ce.OrdinalEncoder()\n        self.encoder.fit(input_df[self.cols])\n        return self.transform(input_df[self.cols])\n    \n    def transform(self, input_df):\n        return self.encoder.transform(input_df[self.cols]).add_prefix(\"OE_\")","e6eb6837":"def get_ce_features(input_df):\n    _input_df = pd.concat([input_df], axis=1)\n    \n    cols = [\"Pclass\",\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Embarked\"]\n    \n    encoder = CountEncodingBlock(cols = cols)\n    output_df = encoder.fit(_input_df.astype(str))\n    return output_df\n\n\ndef get_oe_features(input_df):\n    _input_df = pd.concat([input_df], axis=1)\n    cols = [\"Pclass\",\"Name\", \"Sex\", \"Ticket\", \"Cabin\", \"Embarked\"]\n    \n    encoder = OrdinalEncodingBlock(cols = cols)\n    output_df = encoder.fit(_input_df)\n    return output_df\n\n\ndef get_ohe_features(input_df):\n    _input_df = pd.concat([input_df], axis=1)\n    cols = [\"Pclass\",\"Sex\", \"Embarked\"]\n    encoder = OneHotEncodingBlock(cols=cols)\n    output_df = encoder.fit(_input_df)\n    return output_df\n\n\ndef family_size_feature(input_df):\n    output_df = pd.DataFrame()\n    \n    output_df['family_size'] = input_df.SibSp + input_df.Parch + 1\n    output_df.loc[output_df['family_size']==1, 'IsAlone'] = 1\n    output_df.IsAlone.fillna(0, inplace=True)\n    \n    return output_df\n\n\ndef cabin_code_feature(input_df):\n    _input_df = pd.DataFrame()\n    _input_df[\"cabin_code\"] = input_df[\"Cabin\"].str[0]\n    \n    output_df = pd.get_dummies(_input_df)\n    \n    return output_df\n    \n\ndef age_class_feature(input_df):\n    output_df = input_df.copy()\n    \n    output_df.loc[output_df['Age'] <= 16, 'Age'] = 0\n    output_df.loc[(output_df['Age'] > 16) & (output_df['Age'] <= 32), 'Age'] = 1\n    output_df.loc[(output_df['Age'] > 32) & (output_df['Age'] <= 48), 'Age'] = 2\n    output_df.loc[(output_df['Age'] > 48) & (output_df['Age'] <= 64), 'Age'] = 3\n    output_df.loc[output_df['Age'] > 64, 'Age'] = 4\n    \n    output_df.rename(columns={\"Age\":\"Age_Band\"}, inplace=True)\n    output_df.Pclass = output_df.Pclass.astype(int)\n    output_df[\"Pclass_Age\"] = output_df[\"Age_Band\"] * output_df[\"Pclass\"]\n    \n    add_cols = [\"Age_Band\", \"Pclass_Age\"]\n    \n    return output_df[add_cols]\n\ndef get_ticket_len_feature(input_df):\n    output_df = pd.DataFrame()\n    \n    output_df[\"Ticket_len\"] = input_df.Ticket.str.len()\n    \n    return output_df\n    \n\ndef get_ticket_feature(input_df):\n    _input_df = pd.DataFrame()\n    \n    _input_df[\"Ticket_type\"] = input_df.Ticket.str.replace('\\d+', '')\n    _input_df[\"Ticket_type\"] = _input_df[\"Ticket_type\"].astype(str).apply(lambda x: \"Num\" if x=='' else x[:3])\n    \n    output_df = pd.get_dummies(_input_df)\n    \n    return output_df\n\n\n    \n# numeric_feature\ndef create_numeric_feature(input_df):\n    use_columns = [\n        \"Age\",\n        \"SibSp\",\n        \"Parch\",\n        \"Fare\",\n    ]\n\n    return input_df[use_columns].copy()","756a80c9":"def to_features(train, test):\n    input_df = pd.concat([train, test]).reset_index(drop=True)\n\n    processes = [\n        get_oe_features,\n        get_ce_features,\n        get_ohe_features,\n        create_numeric_feature,\n        family_size_feature,\n        cabin_code_feature,\n        age_class_feature,\n        #get_ticket_feature,\n        get_ticket_len_feature\n    ]\n\n    output_df = pd.DataFrame()\n    for func in tqdm(processes):\n        _df = func(input_df)\n        assert len(_df) == len(input_df), func.__name__\n        output_df = pd.concat([output_df, _df], axis=1)\n\n    train_x = output_df.iloc[:len(train)] \n    test_x = output_df.iloc[len(train):].reset_index(drop=True)\n    return train_x, test_x","3a476a40":"target_data = \"Survived\" \n\ntrain_x, test_x = to_features(train_df, test_df)\ntrain_ys = train_df[target_data]","62cb72f1":"train_x","c9fbf2c0":"# ligthGBM\ndef fit_lgbm(X, y, cv, params: dict=None, verbose: int=50):\n    metric_func = accuracy_score\n    if params is None:\n        params = {}\n\n    models = []\n    # training data \u306e target \u3068\u540c\u3058\u3060\u3051\u306e\u30bc\u30ed\u914d\u5217\u3092\u7528\u610f\n    # float \u306b\u3057\u306a\u3044\u3068\u60b2\u3057\u3044\u4e8b\u4ef6\u304c\u8d77\u3053\u308b\u306e\u3067\u305d\u3053\u3060\u3051\u6ce8\u610f\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        # \u3053\u306e\u90e8\u5206\u304c\u4ea4\u5dee\u691c\u8a3c\u306e\u3068\u3053\u308d\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092 cv instance \u306b\u3088\u3063\u3066\u5206\u5272\u3057\u307e\u3059\n        # training data \u3092 trian\/valid \u306b\u5206\u5272\n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgb.LGBMClassifier(**params)\n\n        with timer(prefix='fit fold={} '.format(i + 1)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=verbose,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n\n        print(f'Fold {i} Accuracy: {metric_func(y_valid, pred_i) :.4f}')\n\n    score = metric_func(y, oof_pred) \n    print('FINISHED | Whole Accuracy: {:.4f}'.format(score))\n    return oof_pred, models\n\nparams = {\n    'metric': 'binary_logloss',\n    'n_estimators': 10000,\n    'objective': 'binary',\n    'random_state': 71,\n    'learning_rate': 0.01,\n    'min_child_samples': 150,\n    'reg_alpha': 3e-5,\n    'reg_lambda': 9e-2,\n    'num_leaves': 20,\n    'max_depth': 16,\n    'colsample_bytree': 0.8,\n    'subsample': 0.8,\n    'subsample_freq': 2,\n    'max_bin': 240\n}","a28bc6c0":"fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=71)\ncv = list(fold.split(train_x, train_ys))\n\noof, models = fit_lgbm(train_x.values, train_ys, cv, params=params)","37bdb351":"np.unique(oof)","ba593b10":"def visualize_importance(models, feat_train_df):\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n\n    fig, ax = plt.subplots(figsize=(max(6, len(order) * .4), 7))\n    sns.boxenplot(data=feature_importance_df, x='column', y='feature_importance', order=order, ax=ax, palette='viridis')\n    ax.tick_params(axis='x', rotation=90)\n    ax.grid()\n    fig.tight_layout()\n    return fig, ax","11d74fb0":"fig, ax = visualize_importance(models, train_x)","c87c7eff":"pred1 = np.array([model.predict(test_x.values) for model in models])\npred1 = np.mean(pred1, axis=0)\npred1 = np.where(pred1<0.5, 0, pred1)\npred1 = np.where(pred1>0.5, 1, pred1)","5197ba99":"np.unique(pred1)","4a9a3222":"sub_df[\"Survived\"] = pred1.astype(int)\nsub_df.to_csv('submission.csv', index=False)","e05b7856":"sub_df","abc0b593":"# model","ae144dca":"# Load Data"}}