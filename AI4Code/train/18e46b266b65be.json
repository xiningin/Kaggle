{"cell_type":{"60b77a92":"code","979ca121":"code","983e5d64":"code","2d11922e":"code","ccdcf28b":"code","d8d85b31":"code","884ce6ac":"code","c615a40c":"code","e8590b14":"code","34a39fe2":"code","860a7b29":"code","a9e7635b":"code","7191c773":"code","e8b5a3e3":"code","c90de9e5":"code","8f946c45":"code","c79b000a":"code","83cf54fc":"code","5b1c0c88":"markdown","a6ff8324":"markdown","a8a409a2":"markdown"},"source":{"60b77a92":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Imported libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport keras\nimport cv2\nfrom imageio import imread\nfrom PIL import Image\nfrom keras import layers\nfrom keras import models\nfrom keras.models import Sequential, Model, load_model\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, GlobalAveragePooling2D\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import VGG16, ResNet50\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nfrom os.path import join\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","979ca121":"img_dir = \"..\/input\/flowers\/flowers\/\"","983e5d64":"img_dir","2d11922e":"flower_list=os.listdir(img_dir)\nflower_list","ccdcf28b":"sunflower_dir='..\/input\/flowers\/flowers\/sunflower'\ntulip_dir='..\/input\/flowers\/flowers\/tulip'\ndaisy_dir='..\/input\/flowers\/flowers\/daisy'\nrose_dir='..\/input\/flowers\/flowers\/rose'\ndandelion_dir='..\/input\/flowers\/flowers\/dandelion'","d8d85b31":"data = []\nlabels = []\n\nfor u in os.listdir(sunflower_dir):\n    try:\n        \n        image = imread(\"..\/input\/flowers\/flowers\/sunflower\"+\"\/\"+u)\n        image_array = Image.fromarray(image, 'RGB')\n        resize_img = image_array.resize((224 , 224))\n        data.append(np.array(resize_img))\n        labels.append(0)\n        \n    except AttributeError:\n        print('')\n        \nfor v in os.listdir(tulip_dir)[:800]:\n    try:\n        \n        image = imread(\"..\/input\/flowers\/flowers\/tulip\"+\"\/\"+v)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((224 , 224))\n        data.append(np.array(resize_img))\n        labels.append(1)\n        \n    except AttributeError:\n        print('')\n\nfor j in os.listdir(daisy_dir):\n    try:\n        \n        image = imread(\"..\/input\/flowers\/flowers\/daisy\"+\"\/\"+j)\n        image_array = Image.fromarray(image , 'RGB')\n        resize_img = image_array.resize((224 , 224))\n        data.append(np.array(resize_img))\n        labels.append(2)\n        \n    except AttributeError:\n        print('')\n\nfor k in os.listdir(rose_dir):\n    try:\n        \n        image = imread(\"..\/input\/flowers\/flowers\/rose\"+\"\/\"+k)\n        image_array = Image.fromarray(np.array(image) , 'RGB')\n        resize_img = image_array.resize((224 , 224))\n        data.append(np.array(resize_img))\n        labels.append(3)\n        \n    except AttributeError:\n        print('') \n\nfor l in os.listdir(dandelion_dir)[:800]:\n    if l.endswith('.jpg'):\n        try:\n        \n            image = imread(\"..\/input\/flowers\/flowers\/dandelion\"+\"\/\"+l)\n            image_array = Image.fromarray(image , 'RGB')\n            resize_img = image_array.resize((224 , 224))\n            data.append(np.array(resize_img))\n            labels.append(4)\n        \n        except AttributeError:\n            print('') ","884ce6ac":"flowers = np.array(data)\nlabels = np.array(labels)","c615a40c":"np.shape(flowers)","e8590b14":"print('flowers : {} | labels : {}'.format(flowers.shape , labels.shape))","34a39fe2":"def flower_type(x):\n    if x==0:\n        return 'sunflower'\n    if x==1: \n        return 'tulip'\n    if x==2:\n        return 'daisy'\n    if x==3:\n        return 'rose'\n    else:\n        return 'dandelion'\n\n\nplt.figure(1 , figsize = (15 , 9))\nn = 0 \nfor i in range(25):\n    n += 1 \n    r = np.random.randint(0 , flowers.shape[0] , 1)\n    plt.subplot(5 , 5 , n)\n    plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n    plt.imshow(flowers[r[0]])\n    plt.title('{} : {}'.format(flower_type(labels[r[0]]), labels[r[0]]))\n    plt.xticks([]) , plt.yticks([])\n    \nplt.show()\n","860a7b29":"flowers, labels=shuffle(flowers, labels, random_state=13)","a9e7635b":"X_train, X_test, y_train, y_test = train_test_split(flowers, labels, test_size=0.2, random_state=13)\n\nX_train, X_val, y_train, y_val= train_test_split(X_train, y_train, test_size=0.2, random_state=13)","7191c773":"#import inception with pre-trained weights. do not include fully #connected layers\ninception_base = ResNet50(weights='imagenet', include_top=False)\n\n# add a global spatial average pooling layer\nx = inception_base.output\nx = GlobalAveragePooling2D()(x)\nx = Dropout(0.5)(x)\n# add a fully-connected layer\nx = Dense(512, activation='relu')(x)\n# and a fully connected output\/classification layer\npredictions = Dense(5, activation='softmax')(x)\n# create the full network so we can train on it\ninception_transfer = Model(inputs=inception_base.input, outputs=predictions)","e8b5a3e3":"#import inception with pre-trained weights. do not include fully #connected layers\ninception_base_vanilla = ResNet50(weights=None, include_top=False)\n\n# add a global spatial average pooling layer\nx = inception_base_vanilla.output\nx = GlobalAveragePooling2D()(x)\n# add a fully-connected layer\nx = Dense(512, activation='relu')(x)\n# and a fully connected output\/classification layer\npredictions = Dense(5, activation='softmax')(x)\n# create the full network so we can train on it\ninception_transfer_vanilla = Model(inputs=inception_base_vanilla.input, outputs=predictions)","c90de9e5":"inception_transfer.compile(loss='categorical_crossentropy',\n              optimizer=keras.optimizers.RMSprop(lr=2e-5),\n              metrics=['accuracy'])\n\ninception_transfer_vanilla.compile(loss='categorical_crossentropy',\n              optimizer=keras.optimizers.RMSprop(lr=2e-5),\n              metrics=['accuracy'])","8f946c45":"inception_transfer.summary()","c79b000a":"batch_size=16\n\nnum_classes=5\ny_train = to_categorical(y_train, num_classes)\ny_val = to_categorical(y_val, num_classes)\ny_test = to_categorical(y_test, num_classes)\n\n\ntrain_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_datagen.fit(X_train)\n\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)\n\nvalidation_generator=test_datagen.flow(X_val, y_val, batch_size=batch_size)\n\nhistory = inception_transfer.fit_generator(\n      train_generator,    \n      steps_per_epoch=len(X_train) \/ batch_size, \n      epochs=30,\n      validation_data=validation_generator,\n      validation_steps=50)\n                    ","83cf54fc":"import matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","5b1c0c88":"## Modeling\n\nA common and highly effective approach to deep learning on small image datasets is to use a pretrained network. We will use ResNet50 architecture.","a6ff8324":"## Preparing the data","a8a409a2":"## Introduction\n\nThis dataset contains 4242 images of flowers. The data collection is based on the data flicr, google images, yandex images. In this kernel we will apply transfer learning with keras to recognize plants from the photo."}}