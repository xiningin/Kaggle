{"cell_type":{"6ad878af":"code","be2339d0":"code","b2a15c08":"code","5cbdd075":"code","02e9c6ea":"code","978cb133":"code","fe00e505":"code","a1716390":"code","d9972e7f":"code","e5d9beb6":"code","a9c16fe0":"code","985da893":"code","8c33d16f":"code","1c08cba4":"code","d3c7f348":"code","1936f3e0":"code","27c6d3e7":"code","8448a80b":"code","dbf8a726":"code","bbd9d736":"code","9ecef3be":"code","caf3ffcd":"markdown","a27d1000":"markdown","3a78dfa6":"markdown","7778ee81":"markdown","9c9cec6a":"markdown","6ce52f04":"markdown","6beaacde":"markdown","90fea169":"markdown","0f5dc040":"markdown","ce3b94eb":"markdown","1abdb0e0":"markdown","114fedaf":"markdown"},"source":{"6ad878af":"import pandas as pd\nimport numpy as np\nimport networkx as nx\nimport json\nimport itertools\nfrom itertools import count\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport warnings\n\nwarnings.filterwarnings('ignore')\nplt.rcParams['axes.titlesize'] = 30","be2339d0":"with open('..\/input\/dark-netflix-character-relationship\/characters.json', 'r') as f:\n    data=f.read()\n    f.close()\nobj = json.loads(data)   \n\nheaders = list()\nfor i in range(len(obj['characters'])):\n    headers.extend(list(obj['characters'][i].keys()))\nheaders = list(set(headers))\n\ndict_1 = {key:[] for key in headers}\nfor _,character in enumerate(obj['characters']):\n    for attribute in list(dict_1.keys()):\n        try:\n            dict_1[attribute].append(character[attribute])\n        except KeyError:\n            dict_1[attribute].append(None)","b2a15c08":"processed_df = pd.DataFrame.from_dict(dict_1)","5cbdd075":"processed_df = processed_df.drop(['firstname','lastname','years','sicMundus'],axis=1)","02e9c6ea":"rel_heders = ['killedBy','parentOf','married','siblings']","978cb133":"dict_2 = {'character1':[],'relationship':[],'character2':[]}\nfor i,row in processed_df.iterrows():\n    for rel in rel_heders:\n        if row[rel] is not None:\n            dict_2['character1'].append(row['name'])\n            dict_2['relationship'].append(rel)\n            dict_2['character2'].append(row[rel])","fe00e505":"rels_df = pd.DataFrame.from_dict(dict_2)\nrelationnships_df = rels_df.explode('character2')\n\nproperties_df = processed_df[['name','alias','gender']]\nproperties_df['alias'] = properties_df['alias'].apply(lambda x:x[0] if x is not None else x)","a1716390":"color_map = dict({key:'' for key in relationnships_df['relationship'].unique()})\nweight_map = dict({key:'' for key in relationnships_df['relationship'].unique()})","d9972e7f":"color_map['parentOf'] = 'blue'\ncolor_map['married'] = 'red'\ncolor_map['siblings'] = 'green'\ncolor_map['killedBy'] =  'magenta'\n\nweight_map['parentOf'] = 8\nweight_map['married'] = 4\nweight_map['siblings'] = 4\nweight_map['killedBy'] = 2","e5d9beb6":"relationnships_df['color'] = relationnships_df['relationship'].map(color_map)\nrelationnships_df['weight'] = relationnships_df['relationship'].map(weight_map)","a9c16fe0":"relationnships_df = relationnships_df[['character1','character2','relationship','weight','color']]","985da893":"properties_df.to_csv(\"properties.csv\",index=False)\nrelationnships_df.to_csv(\"relationnships.csv\",index=False)","8c33d16f":"relationnships_df.columns = ['source','target','relationship','weight','color']","1c08cba4":"G = nx.from_pandas_edgelist(\n    relationnships_df,\n    edge_key=\"relationship\",\n    edge_attr=[\"weight\", \"color\"],\n    create_using=nx.DiGraph(),\n)\npos = nx.circular_layout(G)\ncolors = relationnships_df['color']\noptions = {\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Accent,\n    \"with_labels\": True,\n}\nplt.figure(figsize=(20,20))\nnx.draw(G, pos,node_size=1e3, **options)\npatchList = []\nfor key in color_map:\n        data_key = mpatches.Patch(color=color_map[key], label=key)\n        patchList.append(data_key)\n\nplt.legend(handles=patchList)\nplt.show()","d3c7f348":"def plot_rels(edges,rel,fig_size = (10,10)):\n    G = nx.from_pandas_edgelist(\n            edges,\n            edge_key=\"relationship\",\n            edge_attr=[\"weight\", \"color\"],\n            create_using=nx.DiGraph(),\n    )\n    pos = nx.circular_layout(G)\n    colors = edges['color']\n    options = {\n        \"node_color\": \"#A0CBE2\",\n        \"edge_color\": colors,\n        'node_size':1e3,\n        \"width\": 4,\n        \"edge_cmap\": plt.cm.Blues,\n        \"with_labels\": True,\n    }\n    plt.figure(figsize=fig_size)\n    nx.draw(G, pos, **options)\n    plt.title(f\"{rel} Relationships\")\n    plt.show()","1936f3e0":"plot_rels(relationnships_df,'All',(20,20))","27c6d3e7":"plot_rels(relationnships_df.query(\"relationship=='married'\"),'Married',(10,10))","8448a80b":"plot_rels(relationnships_df.query(\"relationship=='parentOf'\"),'ParentOf',(10,20))","dbf8a726":"plot_rels(relationnships_df.query(\"relationship=='siblings'\"),'Siblings',(10,10))","bbd9d736":"bc = nx.betweenness_centrality(G,normalized=False)\nnode_colors = list(bc.values())\nnode_size = [val**2.5 for val in node_colors]\nplt.figure(figsize=(20,20))\npos = nx.circular_layout(G)\noptions = {\n    \"node_color\": node_colors,\n    \"width\": 3,\n    \"with_labels\": True,\n    \"node_size\":node_size\n}\nnx.draw(G,pos,**options)\nplt.show()","9ecef3be":"betweenes_df = pd.DataFrame.from_dict(bc,orient='index').reset_index()\nbetweenes_df.columns = ['Name','Betweeness Centrality']\nbetweenes_df.sort_values('Betweeness Centrality',ascending=False)","caf3ffcd":"### Plot Siblings relationship","a27d1000":"### As per the results shown above most influenctial character in the show !!!\n##### PS: I'm not a DARK fan though \ud83d\ude04\ud83d\ude04","3a78dfa6":"# Import necessary libraries ","7778ee81":"## Build and plot the Graph","9c9cec6a":"![image.png](attachment:ffa1e3fe-6eb0-49db-958d-8a6f3c9adfa1.png)","6ce52f04":"## Plot All relationships","6beaacde":" ## Plot individual relationships\n \n ### Married relationship","90fea169":"## In this notbook we will use [NetworkX](https:\/\/networkx.org\/https:\/\/networkx.org\/) library to visualize the connection between different characters in the DARK TV series ","0f5dc040":"### Plot Parent relationship","ce3b94eb":"## Define the color map, which we can used in next steps","1abdb0e0":"### Process data into `pandas_edge_list`, described in [here](https:\/\/networkx.org\/documentation\/stable\/reference\/generated\/networkx.convert_matrix.from_pandas_edgelist.html#networkx-convert-matrix-from-pandas-edgelist)\n- ### This will make easy to create graph using pandas dataframe","114fedaf":"## When we built a Graph, we can run various Graph Algorithms top of it. \n - ### Here we are going to use one of most popular Centrality algorithms, [`Betweenness Centrality`](https:\/\/neo4j.com\/docs\/graph-data-science\/current\/algorithms\/betweenness-centrality\/#:~:text=Betweenness%20centrality%20is%20a%20way,of%20nodes%20in%20a%20graph.)"}}