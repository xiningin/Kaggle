{"cell_type":{"cc4a1865":"code","bb08a284":"code","fc98c8ce":"code","4b9ad0ae":"code","aa8d7503":"code","d4424427":"code","2dd27a40":"code","9b84a664":"code","bbb1a445":"code","47d5b76b":"code","960b3fdc":"code","87d8bab9":"code","bb1b2ca3":"code","a32017da":"code","c83bd21e":"markdown","806a127f":"markdown","e3b7ec4d":"markdown"},"source":{"cc4a1865":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom __future__ import print_function\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","bb08a284":"# fonction pour reshape les features d'un example et afficher l'image correspondante\ndef showDigits(features, title = None):\n    f_shape = features.shape\n    if len(f_shape) == 0:\n        nb_features = 0\n    elif len(f_shape) == 1:\n        nb_features = 1\n        img = features.reshape((28, 28))\n        plt.imshow(img)\n        if not title is None:\n            plt.title(title)\n        return None\n    elif len(f_shape) > 25:\n        nb_features = 25\n    else:\n        nb_features = f_shape[0]\n    \n    nb_plots = nb_features\n    nb_plots_j = int(np.round(np.sqrt(nb_plots) + 0.5))\n    nb_plots_i = nb_plots_j \n    \n    fig, axs = plt.subplots(nb_plots_i ,nb_plots_j, figsize=(15, 15), facecolor='w', edgecolor='k')\n    axs = axs.ravel()\n    \n    for p in range(nb_plots):\n        img = features[p, :].reshape((28, 28))\n        axs[p].imshow(img)\n        if not title is None:\n            axs[p].set_title(title[p])\n        \n    return None","fc98c8ce":"train_data = pd.read_csv(\"..\/input\/train.csv\")\ntrain_data.head()","4b9ad0ae":"cols = train_data.columns\nm = 5000\nX_train = np.array(train_data[cols[1:]])[:m, :] # features\ny_train = np.array(train_data.label)[:m] # labels\nm, n = X_train.shape\nprint(\"number of training examples: m = \", m)\nprint(\"number of features: n = \", n)","aa8d7503":"idx = np.random.randint(0, m, 16)\nshowDigits(X_train[idx, :])","d4424427":"from keras.models import Sequential\nfrom keras.layers import Dense\n# fix random seed for reproducibility\nnp.random.seed(7)","2dd27a40":"model = Sequential() # mode sequential => couches les unes a la suite des autres\nmodel.add(Dense(50, input_dim=n, activation='sigmoid')) # hidden layer en entree: toutes les features (n = 784) et possede en 50 sorties (pour 50 basic units) \nmodel.add(Dense(10, activation='sigmoid'))","9b84a664":"# Compile model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","bbb1a445":"# Fit the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=10)","47d5b76b":"test_data = pd.read_csv(\"..\/input\/test.csv\")\ntest_data.head()\n# print(test_data.shape)","960b3fdc":"lut = np.array(range(10))\nX_test = np.array(test_data)\npredictions = model.predict(X_test)","87d8bab9":"print(predictions[0])\n\nprint(predictions[0] == np.max(predictions[0]) )\n\nlut = np.array(range(10))\n\nprint(lut[predictions[0] == np.max(predictions[0])])\n","bb1b2ca3":"idx = np.random.randint(0, m, 16)\ntitle = [str(\"Prediction: %d\" % lut[predictions[i] == np.max(predictions[i])]) for i in idx]\nshowDigits(X_test[idx, :], title=title)","a32017da":"# hidden_layer = model.layers[0]\n# hidden_layer.get_input_at(0)","c83bd21e":"# Prediction","806a127f":"# 2. Construction du mod\u00e8le","e3b7ec4d":"# 1. Visualisation des donn\u00e9es"}}