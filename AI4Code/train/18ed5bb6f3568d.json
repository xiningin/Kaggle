{"cell_type":{"6e2bd2f7":"code","ac343695":"code","6a643cf2":"code","495eaf44":"code","da4fdd0f":"code","41d555a8":"code","a6e54dc8":"code","49ad6684":"code","4d611bc5":"code","4689c446":"code","d0448cf3":"code","cb877db1":"code","b1c04dd1":"code","16bb3b16":"code","f8de3e53":"code","80156cc1":"code","589622a3":"code","b25f451b":"code","e028d111":"code","cc7e4fec":"code","b2bfe11b":"code","77b9d8cc":"code","c929a069":"code","b0afc134":"code","e366ba9d":"code","69d7b324":"code","4e6a4df3":"code","47c0966c":"code","a2b60979":"code","6d9c8096":"code","0ee75c12":"code","278e68a2":"code","db1c56c8":"code","351f3921":"code","85d4e296":"code","0589abdf":"code","a340a640":"code","80197a5d":"code","56cd918f":"code","0c2821a8":"code","5c641a67":"code","68976330":"code","d574bc22":"code","b1290c28":"code","4e906cf8":"code","b6840b9d":"code","e4cb5127":"code","289e47d0":"code","d55d62b0":"code","84ebf888":"code","57158024":"code","486e3647":"code","f730eb1a":"code","2a6aaebc":"code","18f7ab64":"code","ece61129":"code","ff8c96f5":"code","e456490b":"code","dbbb64d7":"code","6dcc2def":"code","fa6321c4":"code","715a2bd3":"code","18c2d6eb":"code","469ac9b8":"code","51a4c217":"code","d0459cd6":"code","d6cdcfc4":"code","09a71398":"code","cbd1c50d":"code","84fec9c3":"code","2a89fa4e":"code","1421963c":"code","28486284":"code","935bfade":"markdown","f792e398":"markdown","dace7615":"markdown","a73fb74f":"markdown","039d1cf9":"markdown","9748f575":"markdown","b47fa1eb":"markdown","b1360e28":"markdown","6a6a5b79":"markdown","8f129fbb":"markdown","c066b45a":"markdown","f939f896":"markdown","d8dcd25d":"markdown","50336e38":"markdown","9bcd50b1":"markdown","0a1a619e":"markdown","a8e7c73f":"markdown","3902b49e":"markdown","9b83ff05":"markdown","537e6176":"markdown","236daeed":"markdown","d1f90d35":"markdown","12ecd6e6":"markdown","43447173":"markdown","f285d454":"markdown","d806e4f0":"markdown","34d4645a":"markdown","b06dac84":"markdown","1c3b23d3":"markdown","0fc03b65":"markdown","334e7046":"markdown","265a9e65":"markdown","b0a6277c":"markdown","77a60228":"markdown","ad15f89a":"markdown","d7f90f80":"markdown","69a811a8":"markdown","a41e5db0":"markdown","780f4c61":"markdown","36013dc6":"markdown","60bb59be":"markdown","707b2440":"markdown","5c5078b8":"markdown","29c8695a":"markdown","329e633b":"markdown","5c6d4e0a":"markdown","fbe77cb5":"markdown","11e8c50a":"markdown","0e42f082":"markdown","624bc5b8":"markdown","9cf3a1cc":"markdown","a83016d3":"markdown","4c5b4173":"markdown","9808b506":"markdown","7c88217d":"markdown","68ffce97":"markdown","d878b683":"markdown","16a5a37c":"markdown"},"source":{"6e2bd2f7":"!pip install chart_studio","ac343695":"import numpy as np\nimport pandas as pd\nimport chart_studio.plotly as py\nfrom plotly import tools\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.figure_factory as ff\nimport plotly.graph_objs as go","6a643cf2":"deliveries = pd.read_csv('..\/input\/tsf-datasets\/deliveries.csv')\nmatches = pd.read_csv('..\/input\/tsf-datasets\/matches.csv')","495eaf44":"matches.head()","da4fdd0f":"matches.info()","41d555a8":"#since umpire3 contains many null values, we can omit the column\nmatches.drop('umpire3', axis = 1, inplace = True)","a6e54dc8":"x = ['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions', \n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\nmatches.replace(x, y, inplace = True)\ndeliveries.replace(x, y, inplace = True)","49ad6684":"matches['season'].value_counts().head()","4d611bc5":"data = [go.Histogram(x = matches['season'], marker = dict(color = '#EB89B5'), opacity = 0.75)]\nlayout = go.Layout(title = 'Matches In Every Season', xaxis = dict(title = 'Season', tickmode = 'linear'), yaxis = dict(title = 'Count'), bargap = 0.2)\nfig = go.Figure(data = data, layout = layout)\n#fig.update_xaxes(tickangle = 45)\niplot(fig)","4689c446":"matches_played = pd.concat([matches['team1'], matches['team2']])\nmatches_played = matches_played.value_counts().reset_index()\nmatches_played.columns = ['Team', 'Total Matches']\nmatches_played['wins'] = matches['winner'].value_counts().reset_index()['winner']\n\nmatches_played.set_index('Team', inplace = True)","d0448cf3":"matches_played.reset_index().head(8)","cb877db1":"win_percentage = round(matches_played['wins']\/matches_played['Total Matches'], 3)*100\nwin_percentage.head(3)","b1c04dd1":"#Plotting\ntrace1 = go.Bar(x = matches_played.index, y = matches_played['Total Matches'], name = 'Total Matches', opacity = 0.4)\ntrace2 = go.Bar(x = matches_played.index, y = matches_played['wins'], name = 'Matches Won', marker = dict(color = 'red'), opacity = 0.4)\ntrace3 = go.Bar(x = matches_played.index, y = win_percentage, name = 'Win Percentage', marker = dict(color = 'gold'), opacity = 0.6)\n\ndata =[trace1, trace2, trace3]\n\nlayout = go.Layout(title = 'Match Played, Wins and Win Percentage(%)', xaxis = dict(title = 'Team'), yaxis = dict(title = 'Count'), bargap = 0.2, bargroupgap = 0.1, hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","16bb3b16":"venue_matches = matches.groupby('venue').count()[['id']].sort_values(by = 'id', ascending = False).head()\nser = pd.Series(venue_matches['id'])\nser","f8de3e53":"venue_matches = matches.groupby('venue').count()[['id']].reset_index()\n\ndata = [{\"x\" : venue_matches['id'], \"y\" : venue_matches['venue'], \"marker\" : {\"color\" : \"lightblue\", \"size\" : 12},\n         \"line\" : {\"color\" : \"red\", \"width\" : 2, \"dash\" : 'dash'}, \"mode\" : \"markers+lines\", \"name\" : \"Women\", \"type\" : \"scatter\"}]\n\nlayout = {\"title\" : \"Stadiums and Matches\",\n          \"xaxis\" : {\"title\" : \"Matches Played\"},\n          \"yaxis\" : {\"title\" : \"Stadiums\"}, \n          \"autosize\" : False, \"width\" : 900, \"height\"  : 1000,\n          \"margin\"  : go.layout.Margin(l = 340, r = 0, b = 100, t = 100, pad = 0)}\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","80156cc1":"ump = pd.concat([matches['umpire1'], matches['umpire2']])\nump = ump.value_counts()\nump_frame = ump.to_frame().reset_index()","589622a3":"ump.head()","b25f451b":"data = [go.Bar(x = ump_frame['index'], y = ump_frame[0], opacity = 0.4)]\n\nlayout = go.Layout(title = 'Umpires in Matches', yaxis = dict(title = 'Matches'), bargap = 0.2, hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e028d111":"batsmen = matches[['id','season']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nseason = batsmen.groupby(['season'])['total_runs'].sum().reset_index()\n\navgruns_each_season=matches.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns = {'id' : 'matches'}, inplace = 1)\navgruns_each_season['total_runs'] = season['total_runs']\navgruns_each_season['average_runs_per_match'] = avgruns_each_season['total_runs'] \/ avgruns_each_season['matches']","cc7e4fec":"fig = {\"data\" : [{\"x\" : season[\"season\"], \"y\" : season[\"total_runs\"],\n                  \"name\" : \"Total Run\", \"marker\" : {\"color\" : \"lightblue\", \"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\", \"mode\" : \"lines+markers\" },\n        \n                 {\"x\" : season[\"season\"], \"y\" : avgruns_each_season[\"average_runs_per_match\"],\n                  \"name\" : \"Average Run\", \"marker\" : {\"color\" : \"brown\", \"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3}, \"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\", \"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Total and Average run per Season\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1], \"anchor\" : \"x2\", \"title\": \"Average Run\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear', \"title\": \"Year\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Total Run\"}, 'hovermode' : 'x'}}\n\niplot(fig)","b2bfe11b":"avgruns_each_season.sort_values(by = 'total_runs', ascending = False).head(2)","77b9d8cc":"Season_boundaries = batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x : (x == 6).sum()).reset_index()\nfours = batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x : (x == 4).sum()).reset_index()\nSeason_boundaries = Season_boundaries.merge(fours, left_on = 'season', right_on = 'season', how = 'left')\nSeason_boundaries = Season_boundaries.rename(columns = {'batsman_runs_x' :  '6\"s', 'batsman_runs_y' : '4\"s'})","c929a069":"Season_boundaries['6\"s'] = Season_boundaries['6\"s']*6\nSeason_boundaries['4\"s'] = Season_boundaries['4\"s']*4\nSeason_boundaries['total_runs'] = season['total_runs']","b0afc134":"trace1 = go.Bar(\n    x = Season_boundaries['season'],\n    y = Season_boundaries['total_runs'] - (Season_boundaries['6\"s'] + Season_boundaries['4\"s']),\n    name = 'Remaining runs', opacity = 0.6)\n\ntrace2 = go.Bar(\n    x = Season_boundaries['season'],\n    y = Season_boundaries['4\"s'],\n    name = 'Run by 4\"s', opacity = 0.7)\n\ntrace3 = go.Bar(\n    x = Season_boundaries['season'],\n    y = Season_boundaries['6\"s'],\n    name = 'Run by 6\"s', opacity = 0.7)\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title = \"Run Distribution per year\", barmode = 'stack', xaxis = dict(tickmode = 'linear', title = \"Year\"),\n                                    yaxis = dict(title = \"Run Distribution\"), hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e366ba9d":"high_scores = deliveries.groupby(['match_id', 'inning', 'batting_team', 'bowling_team'])['total_runs'].sum().reset_index() \nhigh_scores = high_scores[high_scores['total_runs'] >= 200]\nhigh_scores.nlargest(10, 'total_runs')","69d7b324":"high_scores = high_scores[high_scores.batting_team != 'GL']\nhigh_scores = high_scores[high_scores.bowling_team != 'RPS']\nhigh_scores = high_scores[high_scores.bowling_team != 'GL']\nhigh_scores = high_scores[high_scores.bowling_team != 'PW']","4e6a4df3":"high_scores = high_scores.groupby(['inning', 'batting_team']).count().reset_index()\nhigh_scores.drop([\"bowling_team\", \"total_runs\"],axis = 1, inplace = True)\nhigh_scores.rename(columns = {\"match_id\" : \"total_times\"}, inplace = True)\n\nhigh_scores_1 = high_scores[high_scores['inning'] == 1]\nhigh_scores_2 = high_scores[high_scores['inning'] == 2]","47c0966c":"high_scores_1.sort_values(by = 'total_times', ascending = False).head(2)","a2b60979":"trace1 = go.Bar(x = high_scores_1['batting_team'], y = high_scores_1['total_times'], name = 'Ist Innings')\ntrace2 = go.Bar(x = high_scores_2['batting_team'], y = high_scores_2['total_times'], name = 'IInd Innings')\n\nfig = tools.make_subplots(rows = 1, cols = 2, subplot_titles = ('At Ist Innings', 'At IInd Innings'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\niplot(fig)","6d9c8096":"high_scores = deliveries.groupby(['match_id', 'inning', 'batting_team', 'bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1 = high_scores[high_scores['inning'] == 1]\nhigh_scores2 = high_scores[high_scores['inning'] == 2]\nhigh_scores1 = high_scores1.merge(high_scores2[['match_id', 'inning', 'total_runs']], on = 'match_id')\nhigh_scores1.rename(columns = {'inning_x' : 'inning_1', 'inning_y' : 'inning_2', 'total_runs_x' : 'inning1_runs', 'total_runs_y' : 'inning2_runs'}, inplace = True)\nhigh_scores1 = high_scores1[high_scores1['inning1_runs'] >= 200]\nhigh_scores1['is_score_chased'] = 1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs'] <= high_scores1['inning2_runs'], 'yes', 'no')","0ee75c12":"slices = high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels = ['No', 'Yes']\nslices","278e68a2":"trace0 = go.Pie(labels = labels, values  = slices,\n              hoverinfo =  'label+value')\n\nlayout = go.Layout(title = '200 score chased ?')\nfig = go.Figure(data = [trace0], layout = layout)\niplot(fig)","db1c56c8":"agg = matches[['id', 'season', 'winner', 'toss_winner', 'toss_decision', 'team1']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nbatsman_grp = agg.groupby([\"season\", \"match_id\", \"inning\", \"batting_team\", \"batsman\"])\nbatsmen = batsman_grp[\"batsman_runs\"].sum().reset_index()\nruns_scored = batsmen.groupby(['season', 'batting_team', 'batsman'])['batsman_runs'].agg(['sum', 'mean']).reset_index()\nruns_scored['mean'] = round(runs_scored['mean'])","351f3921":"agg_battingteam = agg.groupby(['season', 'match_id', 'inning', 'batting_team', 'bowling_team', 'winner'])['total_runs'].sum().reset_index()\nwinner = agg_battingteam[agg_battingteam['batting_team'] == agg_battingteam['winner']]\nwinner_batting_first = winner[winner['inning'] == 1]\nwinner_batting_second = winner[winner['inning'] == 2]\n\nwinner_runs_batting_first = winner_batting_first.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\nwinner_runs_batting_second = winner_batting_second.groupby(['season', 'winner'])['total_runs'].mean().reset_index().round()\n\nwinner_runs = winner_runs_batting_first.merge(winner_runs_batting_second, on = ['season', 'winner'])\nwinner_runs.columns = ['season', 'winner', 'batting_first', 'batting_second']","85d4e296":"total_win = matches.groupby(['season', 'winner']).count()[['id']].reset_index()\nwinner_runs[\"wins\"] = total_win['id']","0589abdf":"winner_runs.sort_values(by = ['season'], inplace = True)","a340a640":"csk = winner_runs[winner_runs['winner'] == 'CSK']\nrr = winner_runs[winner_runs['winner'] == 'RR']\nsrh = winner_runs[winner_runs['winner'] == 'SRH']\nkkr = winner_runs[winner_runs['winner'] == 'KKR']\nmi = winner_runs[winner_runs['winner'] == 'MI']\nrcb = winner_runs[winner_runs['winner'] == 'RCB']\nkxip = winner_runs[winner_runs['winner'] == 'KXIP']\ndd = winner_runs[winner_runs['winner'] == 'DC']","80197a5d":"trace1 = go.Scatter(x = csk['season'], y = csk['batting_first'], name = 'Batting First')\ntrace2 = go.Scatter(x = csk['season'], y = csk['batting_second'], name = 'Batting Second')\ntrace3 = go.Scatter(x = rr['season'], y = rr['batting_first'], name = 'Batting First')\ntrace4 = go.Scatter(x = rr['season'], y = rr['batting_second'], name = 'Batting Second')\ntrace5 = go.Scatter(x = srh['season'], y = srh['batting_first'], name = 'Batting First')\ntrace6 = go.Scatter(x = srh['season'], y = srh['batting_second'], name = 'Batting Second')\ntrace7 = go.Scatter(x = kkr['season'], y = kkr['batting_first'], name = 'Batting First')\ntrace8 = go.Scatter(x = kkr['season'], y = kkr['batting_second'], name = 'Batting Second')\ntrace9 = go.Scatter(x = rcb['season'], y = rcb['batting_first'], name = 'Batting First')\ntrace10 = go.Scatter(x = rcb['season'], y = rcb['batting_second'], name = 'Batting Second')\ntrace11 = go.Scatter(x = kxip['season'], y = kxip['batting_first'], name = 'Batting First')\ntrace12 = go.Scatter(x = kxip['season'], y = kxip['batting_second'], name = 'Batting Second')\ntrace13 = go.Scatter(x = mi['season'], y = mi['batting_first'], name = 'Batting First')\ntrace14 = go.Scatter(x = mi['season'], y = mi['batting_second'], name = 'Batting Second')\ntrace15 = go.Scatter(x = dd['season'], y = dd['batting_first'], name = 'Batting First')\ntrace16 = go.Scatter(x = dd['season'], y = dd['batting_second'], name = 'Batting Second')\n\nfig = tools.make_subplots(rows = 4, cols = 2, subplot_titles = ('CSK', 'RR','SRH', 'KKR','RCB', 'KXIP','MI', 'DC'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 1)\nfig.append_trace(trace3, 1, 2)\nfig.append_trace(trace4, 1, 2)\nfig.append_trace(trace5, 2, 1)\nfig.append_trace(trace6, 2, 1)\nfig.append_trace(trace7, 2, 2)\nfig.append_trace(trace8, 2, 2)\nfig.append_trace(trace9, 3, 1)\nfig.append_trace(trace10, 3, 1)\nfig.append_trace(trace11, 3, 2)\nfig.append_trace(trace12, 3, 2)\nfig.append_trace(trace13, 4, 1)\nfig.append_trace(trace14, 4, 1)\nfig.append_trace(trace15, 4, 2)\nfig.append_trace(trace16, 4, 2)\n\nfig['layout'].update(title = 'Batting first vs Batting Second of Teams', showlegend = False, hovermode = 'x')\niplot(fig)","56cd918f":"runs_per_over = deliveries.pivot_table(index = ['over'], columns = 'batting_team', values = 'total_runs', aggfunc = sum)\nruns_per_over.reset_index(inplace = True)\nruns_per_over.drop(['KTK', 'PW', 'RPS', 'GL'], axis = 1, inplace = True)","0c2821a8":"trace1 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['CSK'], name = 'CSK',marker= dict(color= \"blue\",size=12))\ntrace2 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['DC'], name = 'DC')\ntrace3 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['KKR'], name = 'KKR')\ntrace4 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['KXIP'], name = 'KXIP')\ntrace5 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['MI'], name = 'MI')\ntrace6 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['RCB'], name = 'RCB')\ntrace7 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['RR'], name = 'RR')\ntrace8 = go.Scatter(x = runs_per_over['over'], y = runs_per_over['SRH'], name = 'SRH')\n\ndata = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8]\n\nlayout = go.Layout(title = 'Average Run in Each Over', xaxis = dict(tickmode = 'linear', title = \"Over\"),\n                                    yaxis = dict(title = \"Runs\"), hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","5c641a67":"season = matches[['id', 'season', 'winner']]\ncomplete_data = deliveries.merge(season, how = 'inner', left_on = 'match_id', right_on = 'id')","68976330":"powerplay_data = complete_data[complete_data['over'] <= 6]\n\ninn1 = powerplay_data[powerplay_data['inning'] == 1].groupby('match_id')['total_runs'].agg(['sum']).reset_index()\ninn2 = powerplay_data[powerplay_data['inning'] == 2].groupby('match_id')['total_runs'].agg(['sum']).reset_index()","d574bc22":"inn1.reset_index(inplace = True)\ninn1.drop([\"match_id\"], axis = 1, inplace = True)\n\ninn2.reset_index(inplace = True)\ninn2.drop([\"match_id\"], axis = 1, inplace = True)","b1290c28":"fig = {\"data\" : [{\"x\" : inn1[\"index\"], \"y\" : inn1[\"sum\"], \"marker\" : {\"color\" : \"blue\", \"size\" : 2},\n                  \"line\" : {\"width\" : 1.5}, \"type\" : \"scatter\", \"mode\" : \"lines\" },\n        \n                 {\"x\" : inn2[\"index\"], \"y\" : inn2[\"sum\"], \"marker\" : {\"color\" : \"brown\", \"size\": 2},\n                  \"type\" : \"scatter\", \"line\": {\"width\" : 1.5}, \"mode\" : \"lines\",\n                  \"xaxis\" : \"x2\", \"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\" : \"Inning 1 vs Inning 2 in Powerplay Overs\",\n                    \"xaxis2\" : {\"domain\" : [0, 1], \"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\n                    \"yaxis2\" : {\"domain\" : [.55, 1], \"anchor\" : \"x2\", \"title\": \"Inn2 Powerplay\"},\n                    \"margin\" : {\"b\" : 111},\n                    \"xaxis\" : {\"domain\" : [0, 1],\"title\": \"Matches\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Inn1 Poweplay\"}, 'hovermode' : 'x'}}\n\niplot(fig)","4e906cf8":"pi1 = powerplay_data[powerplay_data['inning'] == 1].groupby(['season', 'match_id'])['total_runs'].agg(['sum'])\npi1 = pi1.reset_index().groupby('season')['sum'].mean()\npi1 = pi1.to_frame().reset_index()\n\npi2 = powerplay_data[powerplay_data['inning'] == 2].groupby(['season', 'match_id'])['total_runs'].agg(['sum'])\npi2 = pi2.reset_index().groupby('season')['sum'].mean()\npi2 = pi2.to_frame().reset_index()","b6840b9d":"trace1 = go.Bar(x = pi1.season, y = pi1[\"sum\"],\n                name = 'Inning 1', opacity = 0.4)\n\ntrace2 = go.Bar(x = pi2.season, y = pi2[\"sum\"], name = 'Inning 2',\n                marker = dict(color = 'red'), opacity = 0.4)\n\ndata = [trace1, trace2]\nlayout = go.Layout(title = 'Powerplay Average runs per Year',\n                   xaxis = dict(title = 'Year', tickmode = 'linear'),\n                   yaxis = dict(title = 'Run'), bargap = 0.2, bargroupgap = 0.1, hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e4cb5127":"powerplay_dismissals = powerplay_data.dropna(subset = ['dismissal_kind']).groupby(['season', 'match_id', 'inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\npowerplay_dismissals = powerplay_dismissals.reset_index()\n\npowerplay_dismissals_first = powerplay_data[powerplay_data['inning'] == 1].dropna(subset = ['dismissal_kind']).groupby(['season', 'match_id', 'inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_first = powerplay_dismissals_first.reset_index()\n\npowerplay_dismissals_second = powerplay_data[powerplay_data['inning'] == 2].dropna(subset = ['dismissal_kind']).groupby(['season', 'match_id', 'inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_second = powerplay_dismissals_second.reset_index()","289e47d0":"trace1 = go.Bar(x = powerplay_dismissals.season, y = powerplay_dismissals[\"count\"],\n                name = 'Max', opacity = 0.4)\n\ntrace2 = go.Bar(x = powerplay_dismissals_first.season, y = powerplay_dismissals_first[\"count\"], name = 'Inning 1',\n                marker = dict(color = 'red'), opacity = 0.4)\n\ntrace3 = go.Bar(x = powerplay_dismissals_second.season, y = powerplay_dismissals_second[\"count\"], name = 'Inning 2',\n                marker = dict(color = 'lime'), opacity = 0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title = 'Powerplay Average Dismissals per Year',\n                   xaxis = dict(title = 'Year', tickmode = 'linear'),\n                   yaxis = dict(title = 'Wicket'), bargap = 0.2, bargroupgap = 0.1, hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d55d62b0":"df_strike_rate = deliveries.groupby(['batsman']).agg({'ball' : 'count', 'batsman_runs' : 'mean'}).sort_values(by = 'batsman_runs', ascending = False)\ndf_strike_rate.rename(columns = {'batsman_runs' : 'strike rate'}, inplace = True)\ndf_runs_per_match = deliveries.groupby(['batsman', 'match_id']).agg({'batsman_runs' : 'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum', 'mean', 'count'})\ndf_total_runs.rename(columns = {'sum' : 'batsman run', 'count' : 'match count', 'mean' : 'average score'}, inplace = True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\ndf_sixes = deliveries[['batsman', 'batsman_runs']][deliveries.batsman_runs == 6].groupby(['batsman']).agg({'batsman_runs' : 'count'})\ndf_four = deliveries[['batsman', 'batsman_runs']][deliveries.batsman_runs == 4].groupby(['batsman']).agg({'batsman_runs' : 'count'})\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate, df_total_runs, left_index = True, right_index = True),\n                                    df_sixes, left_index = True, right_index = True), df_four, left_index = True, right_index = True)","84ebf888":"df_batsman_stat.rename(columns = {'ball' : 'ball', 'strike rate' : 'strike_rate', 'batsman run' : 'batsman_run',\n                                  'match count' : 'match_count', 'average score' : 'average_score' , 'batsman_runs_x' : 'six',\n                                  'batsman_runs_y' : 'four'}, inplace = True)\ndf_batsman_stat['strike_rate'] = df_batsman_stat['strike_rate'] * 100\ndf_batsman_stat.sort_values(by = 'batsman_run', ascending = False, inplace = True)\ndf_batsman_stat.reset_index(inplace = True)","57158024":"average_score = df_batsman_stat.sort_values(by = 'average_score', ascending = False)\naverage_score = average_score[average_score['match_count'] > 50].head(10)\n\nstrike_rate = df_batsman_stat.sort_values(by = 'strike_rate', ascending = False)\nstrike_rate = strike_rate[strike_rate['match_count'] > 50].head(10)","486e3647":"trace1 = go.Bar(x = average_score['batsman'], y = average_score['average_score'],\n                name = 'Average Score', marker = dict(color = 'gold'), opacity = 0.6, showlegend = False)\n\ntrace2 = go.Bar(x = strike_rate['batsman'], y = strike_rate['strike_rate'],\n                name = 'Strike Rate', marker = dict(color = 'brown'), opacity = 0.6, showlegend = False)\n\nfig = tools.make_subplots(rows = 1, cols = 2, subplot_titles = ('Highest Average Score', 'Highest Strike Rate'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title = 'Player')\nfig['layout']['xaxis2'].update(title = 'Player')\nfig.update_layout(hovermode = 'x')\niplot(fig)","f730eb1a":"top_df_batsman = df_batsman_stat.head(20)\ntop_df_batsman.head(5)","2a6aaebc":"data = [{\"y\" : top_df_batsman.match_count,\n        \"x\" : top_df_batsman.batsman,\n        \"mode\" : \"markers\",\n        \"marker\" : {\"color\" : top_df_batsman.six, \"size\" : top_df_batsman.average_score, 'showscale' : True},\n        \"text\" : top_df_batsman.batsman}]\niplot(data)","18f7ab64":"toppers = deliveries.groupby(['batsman', 'batsman_runs'])['total_runs'].count().reset_index()\ntoppers = toppers.pivot('batsman', 'batsman_runs', 'total_runs')\ntoppers.reset_index(inplace = True)","ece61129":"top_6 = toppers.sort_values(6, ascending = False).head(10)\ntop_4 = toppers.sort_values(4, ascending = False).head(10)\ntop_2 = toppers.sort_values(2, ascending = False).head(10)\ntop_1 = toppers.sort_values(1, ascending = False).head(10)","ff8c96f5":"trace1 = go.Scatter(x = top_6.batsman, y = top_6[6], name = '6\"s', marker = dict(color = \"blue\", size = 9), line = dict(width = 2, dash = 'dash'))\ntrace2 = go.Scatter(x = top_4.batsman, y = top_4[4], name = '4\"s', marker = dict(color = \"orange\", size = 9), line = dict(width = 2, dash ='longdash'))\ntrace3 = go.Scatter(x = top_2.batsman, y = top_2[2], name = '2\"s', marker = dict(color = \"green\", size = 9), line = dict(width = 2, dash = 'dashdot'))\ntrace4 = go.Scatter(x = top_1.batsman, y = top_1[1], name = '1\"s', marker = dict(color = \"red\", size = 9), line = dict(width = 2, dash = 'longdashdot'))\n\nfig = tools.make_subplots(rows = 4, cols = 1, subplot_titles = ('Top 6\"s Scorer', 'Top 4\"s Scorer', 'Top 2\"s Scorer', 'Top 1\"s Scorer'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig.append_trace(trace4, 4, 1)\n\nfig['layout'].update(title = 'Top Scorer in each Category', showlegend = False, hovermode = 'x')\niplot(fig)","e456490b":"orange = matches[['id', 'season']]\norange = orange.merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left')\norange = orange.groupby(['season', 'batsman'])['batsman_runs'].sum().reset_index()\norange = orange.sort_values('batsman_runs', ascending = 0)\norange = orange.drop_duplicates(subset = [\"season\"], keep = \"first\")","dbbb64d7":"data = [go.Bar(x = orange['season'].values, y = orange['batsman_runs'].values,\n                name = 'Total Matches', text =  orange['batsman'].values,\n                marker = dict(color = 'rgb(255, 140, 0)',\n                            line = dict(color = 'rgb(8, 48, 107)', width = 1.5,)), opacity = 0.7)]\n\nlayout = go.Layout(title = 'Orange-Cap Holders', xaxis = dict(tickmode = 'linear', title = \"Year\"),\n                   yaxis = dict(title = 'Runs'), hovermode = 'x')\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","6dcc2def":"bowlers = deliveries.groupby('bowler').sum().reset_index()\nbowl = deliveries['bowler'].value_counts().reset_index()\nbowlers = bowlers.merge(bowl, left_on = 'bowler', right_on = 'index', how = 'left')\nbowlers = bowlers[['bowler_x', 'total_runs', 'bowler_y']]\nbowlers.rename({'bowler_x' : 'bowler', 'total_runs' : 'runs_given', 'bowler_y' : 'balls'}, axis = 1, inplace = True)\nbowlers['overs'] = (bowlers['balls'] \/\/ 6)","fa6321c4":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  \nct = deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\nct = ct['bowler'].value_counts().reset_index()\nbowlers = bowlers.merge(ct, left_on = 'bowler', right_on = 'index', how = 'left').dropna()\nbowlers = bowlers[['bowler_x', 'runs_given', 'overs', 'bowler_y']]\nbowlers.rename({'bowler_x' : 'bowler', 'bowler_y' : 'wickets'}, axis = 1, inplace = True)\nbowlers['economy'] = (bowlers['runs_given'] \/ bowlers['overs'])","715a2bd3":"bowlers_top = bowlers.sort_values(by = 'runs_given', ascending = False)\nbowlers_top = bowlers_top.head(20)","18c2d6eb":"trace = go.Scatter(y = bowlers_top['wickets'], x = bowlers_top['bowler'], mode = 'markers',\n                   marker = dict(size = bowlers_top['wickets'].values,\n                               color = bowlers_top['economy'].values,\n                               colorscale = 'Viridis',\n                               showscale = True,\n                               colorbar = dict(title = 'Economy')),\n                   text = bowlers['overs'].values)\n\ndata = [(trace)]\n\nlayout = go.Layout(autosize = True,\n                  title = 'Top 20 Wicket Taking Bowlers',\n                  hovermode = 'closest',\n                  xaxis =dict(showgrid = False, zeroline = False,\n                              showline = False),\n                  yaxis = dict(title = 'Wickets Taken', ticklen = 5,\n                             gridwidth = 2, showgrid = False,\n                             zeroline = False, showline = False),\n                  showlegend = False)\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","469ac9b8":"dismissal_kinds = [\"bowled\", \"caught\", \"lbw\", \"stumped\", \"caught and bowled\", \"hit wicket\"]  #since run-out is not creditted to the bowler\npurple = deliveries[deliveries[\"dismissal_kind\"].isin(dismissal_kinds)]\npurple = purple.merge(matches, left_on = 'match_id', right_on = 'id', how = 'outer')\npurple = purple.groupby(['season', 'bowler'])['dismissal_kind'].count().reset_index()\npurple = purple.sort_values('dismissal_kind',ascending = False)\npurple = purple.drop_duplicates('season', keep = 'first').sort_values(by = 'season')\npurple.rename({'dismissal_kind' : 'count_wickets'}, axis = 1, inplace = True)","51a4c217":"trace1 = go.Bar(x = purple['season'].values, y = purple['count_wickets'].values,\n                name = 'Total Matches', text = purple['bowler'].values,\n                marker = dict(color = 'rgb(75, 0, 130)',\n                            line = dict(color = 'rgb(108, 148, 107)', width = 1.5,)),\n                opacity = 0.7)\n\nlayout = go.Layout(title = 'Purple-Cap Holders', xaxis = dict(tickmode = 'linear', title = \"Year\"),\n                   yaxis = dict(title = 'Wickets'), hovermode = 'x')\n\ndata = [trace1]\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","d0459cd6":"season_winner = matches.drop_duplicates(subset = ['season'], keep = 'last')[['season', 'winner']].reset_index(drop = True)\nseason_winner = season_winner['winner'].value_counts()\n\nseason_winner = season_winner.to_frame()\nseason_winner.reset_index(inplace = True)\nseason_winner.rename(columns = {'index' : 'team'}, inplace = True)","d6cdcfc4":"season_winner","09a71398":"trace0 = go.Pie(labels = season_winner['team'], values = season_winner['winner'],\n              hoverinfo = 'label+value+name', name = \"Winner\")\n\nlayout = go.Layout(title = 'Winner of IPL season')\nfig = go.Figure(data = [trace0], layout = layout)\niplot(fig)","cbd1c50d":"finals = matches.drop_duplicates(subset = ['season'], keep = 'last')\nfinals = finals[['id', 'season', 'city', 'team1', 'team2', 'toss_winner', 'toss_decision', 'winner']]\nmost_finals = pd.concat([finals['team1'], finals['team2']]).value_counts().reset_index()\nmost_finals.rename({'index' : 'team', 0 : 'count'}, axis = 1, inplace = True)\nxyz = finals['winner'].value_counts().reset_index()","84fec9c3":"most_finals = most_finals.merge(xyz,left_on = 'team', right_on = 'index', how = 'outer')\nmost_finals = most_finals.replace(np.NaN, 0)\nmost_finals.drop('index', axis = 1, inplace = True)\nmost_finals.set_index('team', inplace = True)\nmost_finals.rename({'count' : 'finals_played', 'winner' : 'won_count'}, inplace = True, axis = 1)\nmost_finals.reset_index(inplace = True)","2a89fa4e":"trace1 = go.Bar(x = most_finals.team, y = most_finals.finals_played,\n                name = 'Total Matches', opacity = 0.4)\n\ntrace2 = go.Bar(x = most_finals.team, y = most_finals.won_count,\n                name = 'Matches Won', marker = dict(color = 'red'), opacity = 0.4)\n\ndata = [trace1, trace2]\n\nlayout = go.Layout(title = 'Match Played vs Wins In Finals', xaxis = dict(title = 'Team'),\n                   yaxis = dict(title = 'Count'), bargap = 0.2, bargroupgap = 0.1, hovermode = 'x')\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","1421963c":"df = finals[finals['toss_winner'] == finals['winner']]\nslices = [len(df), (len(finals) - len(df))]\nlabels = ['yes', 'no']","28486284":"trace0 = go.Pie(labels = labels, values = slices,\n              hoverinfo = 'label+value+name', name = \"Winner\")\n\nlayout = go.Layout(title = 'Winner of IPL season')\nfig = go.Figure(data = [trace0], layout = layout)\niplot(fig)","935bfade":"In this EDA task, we have to clean the data and visualize the same using different methods in order to derive meaningful insights from the 2 given datasets of the famous Indian Premier League(IPL).","f792e398":"### 8.2 Match Played vs wins in Final Match of Every Season","dace7615":"* Maximum fall of wickets in powerplay overs set new record in 2019(It was Deepak Chahar, Source:Internet)\n* Dismissals in 2nd innings decrease significantly in 2019","a73fb74f":"(But we will consider them same for the sake of simplicity and non-redundancy)","039d1cf9":"No doubt Warner, Gayle and Pant are best in terms of both strike rate and average runs","9748f575":"## 2. Target of 200 Runs or More","b47fa1eb":"## Task 5: Exploratory Data Analysis - Sports","b1360e28":"* Virat kohli owned Orange Cap with a whopping 973 runs in 2016, highest ever.","6a6a5b79":"Data Science & Business Analytics Intern (Batch - Dec'20)","8f129fbb":"S Ravi(106) and HDPK Dhrmasena(87) are most popular umpires in IPL.","c066b45a":"### 6.4 Orange Cap Holders","f939f896":"* In December 2018, the team changed its name from the Delhi Daredevils to the Delhi Capitals.\n* Sunrisers Hyderabad replaced the Deccan Chargers in 2012 and debuted in 2013.","d8dcd25d":"# 8. Winner Analysis","50336e38":"### 8.1 Which team win highest no. of seasons","9bcd50b1":"* Virat Kohli has highest total runs across all seasons. Suresh Raina is just few runs behind with the second spot.\n* Average Score and 6\"s by Parthiv Patel is lowest among top 20 batsmen.\n* Gayle is at top in 6\"s","0a1a619e":"### 7.2 Purple Cap Holders","a8e7c73f":"* Hightest wicket taker is Malinga.","3902b49e":"## Matches Played vs Wins by Each Team","9b83ff05":"### 4. Runs Per over of Each Team","537e6176":"Mumbai indians have most number of wins with most number of matches.","236daeed":"*I've solely used \"Plotly\" library for visualizations, thus all the graphs are interactive.*","d1f90d35":"### 5.3 Powerplay Average Dismissals","12ecd6e6":"* So Eden Gardens, M Chinnaswamy, Wankhede and Feroz Shah Kotla are statiums with most matches.\n* Reason being, usually eliminators, qualifiers and final of each season are held here.","43447173":"### 1.1 Average and Total Runs","f285d454":"### 6.1 Highest Average and Strike rate for >50 Matches","d806e4f0":"The year 2013 has most number of matches.\nMay be due to super over (super over occurs when there is a tie in the score)\n\nMoreover there are 10 teams in 2011, 9 in 2012 and 2013","34d4645a":"* Powerplay is upto six overs so there is dip in 7th over\n* MI is best at Death over (Good Finishers\/Tailenders)\n* RR is worst among all in death, middle and powerplay overs","b06dac84":"### 6.3 Top 10 Batsman in each run category","1c3b23d3":"So there is increase in runs in powerplay in last few years","0fc03b65":"* CSK has played 8 out of 12 finals of IPL.\n* MI win 4 out of 5 finals.\n* RCB has appeared in 3 finals but never won till now.","334e7046":"Just slight increase in runs by boundaries over years","265a9e65":"### 2.2 Is it possible to chase >200 Target","b0a6277c":"## 7. Bowler Analysis","77a60228":"![ipl.jpg](attachment:ipl.jpg)","ad15f89a":"### 6.2 Top 20 Batsman","d7f90f80":"## Batsman Analysis","69a811a8":"Powerplay is of starting 6 overs in T20 matches\n\nDuring the first six overs, a maximum of 2 fielders can be outside the 30-yard circle.","a41e5db0":"## Importing Libraries","780f4c61":"* Every team able to create a better than in first innings than second.\n* Exception - KXIP ( Showing anamolous behavior :P)","36013dc6":"It seems that it is hard to achieve this target, only 17 out of 100 targets greater than 200 have  been chased successfully.","60bb59be":"# Author : Akash Kothare","707b2440":"### 8.3 Is Toss Outcome the Final Outcome in Finals ?","5c5078b8":"* MI won 4 seasons of IPL.\n* DC, KXIP, RCB haven't won any title yet.","29c8695a":"* DJ Bravo owned Purple cap with highest 32 wickets in 2013.","329e633b":"* We see crest at 2012,2013 years (this is beacuse increase in no. of matches)\n* Average runs per match increase over years","5c6d4e0a":"## Loading Dataset","fbe77cb5":"## Most Umpiring Done:","11e8c50a":"## 5. PowerPlay Analysis","0e42f082":"### 1.2 Run Distribution Over Years","624bc5b8":"### 5.2 Powerplay Average Runs","9cf3a1cc":"* Woah! Each 3 among 4 toss winners is match winner in Finals. That's Incredible.","a83016d3":"### 7.1 Best Bowler in Each category","4c5b4173":"### 2.1 How many times each Team scored > 200","9808b506":"## 3. Average Score of Each Team Per Season","7c88217d":"## 1. Runs per Season","68ffce97":"## Venue of Most Matches","d878b683":"## Matches in every Season","16a5a37c":"* Difference between 6\"s by Gayle(1st) and AB de Villiers(2nd) is of 113\n* Suresh Raina has a prominent place in all the lists plotted above."}}