{"cell_type":{"313d181a":"code","8b2f1012":"code","bae97e74":"code","52b72be4":"code","9ef19422":"code","75914370":"code","e2a1ef2c":"code","88594477":"code","662f674f":"code","284b82b2":"code","b2e38e07":"code","c806c9bb":"code","86d1a06e":"code","83ae8677":"code","de054a80":"code","6a9a1cef":"code","78b6b326":"code","905eaa75":"code","90a7652b":"markdown","03e9e213":"markdown","2bd6ed09":"markdown","25921326":"markdown","e6b2210d":"markdown","3882f78c":"markdown"},"source":{"313d181a":"import os\nimport string\nimport datetime\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\npd.options.mode.chained_assignment = None\npd.options.display.max_columns = 999\n\nprint(os.listdir(\"..\/input\"))","8b2f1012":"### Enter the user name here ###\nuser_name = \"yassinealouini\"","bae97e74":"users_df = pd.read_csv(\"..\/input\/meta-kaggle\/Users.csv\")\nuser_df = users_df[users_df[\"UserName\"]==user_name]\nuser_id = user_df[\"Id\"].values[0]\nuser_display = user_df[\"DisplayName\"].values[0]\nprint(\"The user id for the given user name is : \",user_id)\nprint(\"The display name for the given user name is : \",user_display)","52b72be4":"team_members_df = pd.read_csv(\"..\/input\/meta-kaggle\/TeamMemberships.csv\")\nteam_df = pd.read_csv(\"..\/input\/meta-kaggle\/Teams.csv\")\ncomp_df = pd.read_csv(\"..\/input\/meta-kaggle\/Competitions.csv\")\n\ntemp_df = team_members_df[team_members_df[\"UserId\"]==user_id]\ntemp_df = pd.merge(temp_df, team_df, left_on=\"TeamId\", right_on=\"Id\", how=\"left\")\ntemp_df = pd.merge(temp_df, comp_df, left_on=\"CompetitionId\", right_on=\"Id\", how=\"left\")\ntemp_df[\"DeadlineDate\"] = pd.to_datetime(temp_df[\"DeadlineDate\"], format=\"%m\/%d\/%Y %H:%M:%S\")\ntemp_df[\"DeadlineYear\"] = temp_df[\"DeadlineDate\"].dt.year\ntemp_df[\"DeadlineDate\"] = temp_df[\"DeadlineDate\"].apply(lambda x: datetime.date(x.year,x.month,1))\n\ntemp_df = temp_df[~np.isnan(temp_df[\"PrivateLeaderboardRank\"])]\ntemp_df.head()","9ef19422":"def scatter_plot(cnt_srs, color):\n    trace = go.Scatter(\n        x=cnt_srs.index[::-1],\n        y=cnt_srs.values[::-1],\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_df = temp_df.groupby('DeadlineYear')['PrivateLeaderboardRank'].agg([\"size\", \"mean\", \"min\"])\ncnt_srs = cnt_df[\"size\"]\ncnt_srs = cnt_srs.sort_index()\ntrace = go.Bar(\n    x=cnt_srs.index,\n    y=cnt_srs.values,\n    marker=dict(\n        color=\"green\",\n    ),\n)\n\nlayout = go.Layout(\n    title='Count of competitions over years',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"TargetCount\")\n\n\n### Mean Private Rank ###\ncnt_srs = cnt_df[\"mean\"]\ncnt_srs = cnt_srs.sort_index()\ntrace = go.Bar(\n    x=cnt_srs.index,\n    y=cnt_srs.values,\n    marker=dict(\n        color=\"blue\",\n    ),\n)\n\nlayout = go.Layout(\n    title='Mean Rank over years',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"TargetCount\")\n\n\n\n### Best rank each year ###\ncnt_srs = cnt_df[\"min\"]\ncnt_srs = cnt_srs.sort_index()\ntrace = go.Bar(\n    x=cnt_srs.index,\n    y=cnt_srs.values,\n    marker=dict(\n        color=\"red\",\n    ),\n)\n\nlayout = go.Layout(\n    title='Best Rank in each year',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"TargetCount\")","75914370":"#temp_df[\"Medal\"].value_counts()\n\ncnt_df = temp_df.pivot_table(index=\"DeadlineYear\", columns=\"Medal\", values=\"PrivateLeaderboardRank\", aggfunc=\"count\")\ncnt_df = cnt_df.fillna(0)\n\ndef get_bar_chart(cnt_srs, name, color):\n    trace = go.Bar(\n        x=cnt_srs.index,\n        y=cnt_srs.values,\n        name=name,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\nmedal_map = {1.:\"Gold\", 2.:\"Silver\", 3.:\"Bronze\"}\ncolor_map = {1.:\"gold\", 2.:\"silver\", 3.:\"darkorange\"}\ntraces = []\nfor col in np.array(cnt_df.columns)[::-1]:\n    cnt_srs = cnt_df[col]\n    traces.append(get_bar_chart(cnt_srs, medal_map[col], color_map[col]))\n\nlayout = go.Layout(\n    title='Competition Medals in each year',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n","e2a1ef2c":"cnt_srs = temp_df[\"HostSegmentTitle\"].value_counts()\n\nlabels = (np.array(cnt_srs.index))\nsizes = (np.array((cnt_srs \/ cnt_srs.sum())*100))\n\ntrace = go.Pie(labels=labels, values=sizes)\nlayout = go.Layout(\n    title='Competition Type Distribution',\n    font=dict(size=14),\n    width=600,\n    height=600,\n)\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"usertype\")","88594477":"comp_tags_df = pd.read_csv(\"..\/input\/meta-kaggle\/CompetitionTags.csv\")\ntags_df = pd.read_csv(\"..\/input\/meta-kaggle\/Tags.csv\")\ncnt_df = pd.merge(temp_df[[\"CompetitionId\"]], comp_tags_df, on=\"CompetitionId\", how=\"inner\")\ncnt_df = pd.merge(cnt_df, tags_df, left_on=\"TagId\", right_on=\"Id\", how=\"inner\")\ncnt_df[\"Name\"].value_counts()\n\ndef bar_chart(cnt_srs, color):\n    trace = go.Bar(\n        x=cnt_srs.index,\n        y=cnt_srs.values,\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ncnt_srs = cnt_df[\"Name\"].value_counts().head(10)\ntraces = [bar_chart(cnt_srs, \"orange\")]\nlayout = go.Layout(\n    title='Data type of competitions',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n","662f674f":"cnt_srs = temp_df[\"TeamName\"].value_counts().head(5)\ntraces = [bar_chart(cnt_srs, \"blue\")]\nlayout = go.Layout(\n    title='Favorite Team Name',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","284b82b2":"temp_df = team_members_df[team_members_df[\"UserId\"]==user_id]\ntemp_df = pd.merge(team_members_df, temp_df, on=\"TeamId\", how=\"inner\", suffixes=('', '_y'))\ntemp_df = temp_df[temp_df[\"UserId\"]!=user_id]\ntemp_df = pd.merge(temp_df, users_df, left_on=\"UserId\", right_on=\"Id\", how=\"left\")\n\ncnt_srs = temp_df[\"DisplayName\"].value_counts().head(7)\ntraces = [bar_chart(cnt_srs, \"green\")]\nlayout = go.Layout(\n    title='Number of competitions with favorite team members ',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","b2e38e07":"kernels_df = pd.read_csv(\"..\/input\/meta-kaggle\/Kernels.csv\")\ntemp_df = kernels_df[kernels_df[\"AuthorUserId\"]==user_id]\ntemp_df[\"MadePublicDate\"] = pd.to_datetime(temp_df[\"MadePublicDate\"], format=\"%m\/%d\/%Y\")\ntemp_df[\"MadePublicYear\"] = temp_df[\"MadePublicDate\"].dt.year\ntemp_df.head()","c806c9bb":"# Number of kernels\ncnt_srs = temp_df[\"MadePublicYear\"].value_counts()\ntraces = [bar_chart(cnt_srs, \"blue\")]\nlayout = go.Layout(\n    title='Number of kernels in each year',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n\n\n# Number of views\ncnt_srs = temp_df.groupby(\"MadePublicYear\")[\"TotalViews\"].mean()\ntraces = [bar_chart(cnt_srs, \"green\")]\nlayout = go.Layout(\n    title='Mean number of views per kernel',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')\n\n# Number of votes\ncnt_srs = temp_df.groupby(\"MadePublicYear\")[\"TotalVotes\"].mean()\ntraces = [bar_chart(cnt_srs, \"red\")]\nlayout = go.Layout(\n    title='Mean number of votes per kernel',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","86d1a06e":"cnt_df = temp_df.pivot_table(index=\"MadePublicYear\", columns=\"Medal\", values=\"AuthorUserId\", aggfunc=\"count\")\ncnt_df = cnt_df.fillna(0)\n\ndef get_bar_chart(cnt_srs, name, color):\n    trace = go.Bar(\n        x=cnt_srs.index,\n        y=cnt_srs.values,\n        name=name,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\nmedal_map = {1.:\"Gold\", 2.:\"Silver\", 3.:\"Bronze\"}\ncolor_map = {1.:\"gold\", 2.:\"silver\", 3.:\"darkorange\"}\ntraces = []\nfor col in np.array(cnt_df.columns)[::-1]:\n    cnt_srs = cnt_df[col]\n    traces.append(get_bar_chart(cnt_srs, medal_map[col], color_map[col]))\n\nlayout = go.Layout(\n    title='Kernel Medals in each year',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","83ae8677":"temp_df = kernels_df[kernels_df[\"AuthorUserId\"]==user_id]\nkernel_tags_df = pd.read_csv(\"..\/input\/meta-kaggle\/KernelTags.csv\")\ntemp_df = pd.merge(temp_df, kernel_tags_df, left_on=\"Id\", right_on=\"KernelId\", how=\"inner\")\ntemp_df = pd.merge(temp_df, tags_df, left_on=\"TagId\", right_on=\"Id\", how=\"inner\")\n\ncnt_srs = temp_df[\"Name\"].value_counts().head(10)\ntraces = [bar_chart(cnt_srs, \"orange\")]\nlayout = go.Layout(\n    title='Tag count of the kernels',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","de054a80":"#temp_df = kernels_df[kernels_df[\"AuthorUserId\"]==user_id]\nforum_message_df = pd.read_csv(\"..\/input\/meta-kaggle\/ForumMessages.csv\")\ntemp_df = forum_message_df[forum_message_df[\"PostUserId\"]==user_id]\ntemp_df[\"PostDate\"] = pd.to_datetime(temp_df[\"PostDate\"], format=\"%m\/%d\/%Y %H:%M:%S\")\ntemp_df[\"PostYear\"] = temp_df[\"PostDate\"].dt.year\ntemp_df.head()","6a9a1cef":"# Number of kernels\ncnt_srs = temp_df[\"PostYear\"].value_counts()\ntraces = [bar_chart(cnt_srs, \"blue\")]\nlayout = go.Layout(\n    title='Number of forum posts in each year',\n    font=dict(size=14),\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","78b6b326":"cnt_df = temp_df.pivot_table(index=\"PostYear\", columns=\"Medal\", values=\"PostUserId\", aggfunc=\"count\")\ncnt_df = cnt_df.fillna(0)\n\ndef get_bar_chart(cnt_srs, name, color):\n    trace = go.Bar(\n        x=cnt_srs.index,\n        y=cnt_srs.values,\n        name=name,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\nmedal_map = {1.:\"Gold\", 2.:\"Silver\", 3.:\"Bronze\"}\ncolor_map = {1.:\"gold\", 2.:\"silver\", 3.:\"darkorange\"}\ntraces = []\nfor col in np.array(cnt_df.columns)[::-1]:\n    cnt_srs = cnt_df[col]\n    traces.append(get_bar_chart(cnt_srs, medal_map[col], color_map[col]))\n\nlayout = go.Layout(\n    title='Discussion Medals in each year',\n    font=dict(size=14),\n    barmode='stack',\n    width=800,\n    height=500,\n)\n\nfig = go.Figure(data=traces, layout=layout)\npy.iplot(fig, filename='stacked-bar')","905eaa75":"import re\ndef clean_string(txt):\n    txt = str(txt)\n    txt = re.sub(\"<.*?>\", \"\", txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt\n\ntemp_df[\"Message\"] = temp_df[\"Message\"].apply(lambda x: clean_string(x))\n#temp_df.head()\n\nfrom wordcloud import WordCloud, STOPWORDS\n\n# Thanks : https:\/\/www.kaggle.com\/aashita\/word-clouds-of-various-shapes ##\ndef plot_wordcloud(text, mask=None, max_words=200, max_font_size=100, figure_size=(24.0,16.0), \n                   title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    if image_color:\n        image_colors = ImageColorGenerator(mask);\n        plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation=\"bilinear\");\n        plt.title(title, fontdict={'size': title_size,  \n                                  'verticalalignment': 'bottom'})\n    else:\n        plt.imshow(wordcloud);\n        plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                                  'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()  \n    \nplot_wordcloud(temp_df[\"Message\"], title=\"Word Cloud of the common words in forum messages\")","90a7652b":"## Discussion Journey","03e9e213":"### More to come. Stay tuned!\n\nSome of the ideas are\n* Kagglers who upvote your kernels\n* Kagglers who upvote your forum posts\n* Number of followers over time","2bd6ed09":"## Kernels Journey","25921326":"Ever wondered how you have fared in the Kaggle over time? \n\nThis kernel is to look at the kaggle journey of you (and probably the people whom we silently stalk at) and understand more about the journey !\n\nPlease enter the `username` of the person in the below cell and execute the notebook to look at the journey.","e6b2210d":"## Competitions Journey","3882f78c":"# DISCLAIMER: This isn't my own work!!!\n\nI have forked this notebook to check the results applied to my user, nothing more.\nYou should check the original notebook [here](https:\/\/www.kaggle.com\/sudalairajkumar\/a-look-back-at-your-kaggle-journey) and fork it to experiment. :)"}}