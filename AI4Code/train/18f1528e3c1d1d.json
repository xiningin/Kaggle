{"cell_type":{"dac8d5bf":"code","ae17b84b":"code","e7f22f77":"code","fa42e446":"code","725844aa":"code","65a88e30":"code","19994633":"code","d875fcfb":"code","d881c148":"code","4154c951":"code","f391db1f":"code","5d3c6847":"code","ef07a006":"code","d32a12f8":"code","9e2bab1a":"code","f98e65ed":"code","bb589b45":"code","a8ae9eda":"code","53bf9116":"code","f65e563d":"code","e4df6da0":"code","33dd668c":"code","c72bb847":"markdown","42e78f05":"markdown","e1da69b6":"markdown","d39974bb":"markdown"},"source":{"dac8d5bf":"import glob\nimport os.path as osp\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom tqdm.notebook import tqdm\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.utils.data as data\nimport torchvision\nfrom torchvision import models, transforms\nimport cv2\nimport albumentations as A\n\nimport os\nimport time\nfrom PIL import Image\nfrom IPython.display import display","ae17b84b":"df_train = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2021-fgvc8\/train.csv\")\ndf_sub = pd.read_csv(\"\/kaggle\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv\")\ntrain_image_path = '..\/input\/plant-pathology-2021-fgvc8\/train_images'","e7f22f77":"# th\u1ed1ng t\u1eadp d\u1eef li\u1ec7u train\ncount_dict = df_train.labels.value_counts()\nclasses = list(count_dict.index)\nclasses_count = list(count_dict.values)\nprint(\"Number of unique labels: \",len(classes))\nprint(\"-------------------------------------------\")\ndf_train.head()","fa42e446":"# in k\u00edch th\u01b0\u1edbc c\u1ee7a m\u1ea3ng\ndf_train.shape","725844aa":"plt.figure(figsize=(35,15))\nplt.bar(classes,classes_count)\nplt.xticks(rotation=20,fontsize = 20,fontweight = \"bold\")\nplt.xticks(fontsize = 20,fontweight = \"bold\")\nplt.show()","65a88e30":"# m\u00e3 h\u00f3a c\u00e1c nh\u00e3n th\u00e0nh chu\u1ea9n s\u1ed1 nguy\u00ean \u0111\u1ec3 c\u00f3 th\u1ec3 train model\ndef to_label(df):\n    \"\"\"\n    H\u00e0m m\u00e3 h\u00f3a cho c\u00e1c nh\u00e3n.\n    \"\"\"\n    le = LabelEncoder()\n    df[\"labels_n\"] = le.fit_transform(df.labels.values)\n    return df\n\n# L\u01b0u t\u1eeb \u0111i\u1ec3n m\u00e3 h\u00f3a\ndf_train = to_label(df_train)\ndf_labels_idx = df_train.loc[df_train.duplicated([\"labels\", \"labels_n\"])==False]\\\n                [[\"labels_n\", \"labels\"]].set_index(\"labels_n\").sort_index()\ndisplay(df_labels_idx)","19994633":"# N\u1ea1p, gi\u1ea3i n\u00e9n tinh ch\u1ec9nh model zoo\n! ls \/kaggle\/input\/finetuningmodelzoo","d875fcfb":"TEST_IMAGE_PATH = '..\/input\/plant-pathology-2021-fgvc8\/test_images'","d881c148":"def make_datapath_list(phase=\"train\", val_size=0.25):\n    \"\"\"\n    H\u00e0m t\u1ea1o PATH cho d\u1eef li\u1ec7u.\n    \n    Th\u00f4ng s\u1ed1\n    ----------\n    bi\u1ebfn : 'train' or 'val' or 'test'\n         Ch\u1ec9 \u0111\u1ecbnh s\u1eed d\u1ee5ng d\u1eef li\u1ec7u train, validation, test.\n    val_size : float\n        T\u1ef7 l\u1ec7 d\u1eef li\u1ec7u x\u00e1c th\u1ef1c \u0111\u1ec3 \u0111\u00e0o t\u1ea1o d\u1eef li\u1ec7u.\n        \n    Tr\u1ea3 v\u1ec1\n    -------\n    path_lsit : list\n        M\u1ed9t list ch\u1ee9a c\u00e1c PATH ch\u1ec9 t\u1edbi d\u1eef li\u1ec7u.\n    \"\"\"\n    \n    if phase in [\"train\", \"val\"]:\n        phase_path = \"train_images\"\n    elif phase in [\"test\"]:\n        phase_path = \"test_images\"\n    else:\n        print(f\"{phase} not in path\")\n    rootpath = \"\/kaggle\/input\/plant-pathology-2021-fgvc8\/\"\n#     rootpath = \"\/kaggle\/input\/resized-plant2021\/img_sz_256\/\"\n    target_path = osp.join(TRAIN_IMAGE_PATH , '*.jpg') if  phase in ['train', 'val'] else osp.join(TEST_IMAGE_PATH, \"*.jpg\")\n\n    path_list = []\n    \n    for path in glob.glob(target_path):\n        path_list.append(path)\n        \n    if phase in [\"train\", \"val\"]:\n        train, val = train_test_split(path_list, test_size=val_size, random_state=0, shuffle=True)\n        if phase == \"train\":\n            path_list = train\n        else:\n            path_list = val\n    \n    return path_list","4154c951":"class ImageTransform():\n    \"\"\"\n    L\u1edbp ti\u1ec1n s\u1eed l\u00fd h\u00ecnh \u1ea3nh.\n    \n    Thu\u1ed9c t\u00ednh\n    ----------\n    resize : int\n        224\n    mean : (R, G, B)\n        Gi\u00e1 tr\u1ecb trung b\u00ecnh cho m\u1ed7i k\u00eanh m\u00e0u\n    std : (R, G, B)\n        \u0110\u1ed9 l\u1ec7ch ti\u00eau chu\u1ea9n cho m\u1ed7i k\u00eanh m\u00e0u\n    \"\"\"\n    \n    def __init__(self, resize, mean, std):\n        self.data_transform = {\n#             'train': A.Compose(albumentation_list),\n            'train': transforms.Compose([\n                transforms.Resize(resize),\n                transforms.RandomResizedCrop(resize, scale=(0.5, 1.0)),\n                transforms.RandomHorizontalFlip(),\n                transforms.RandomPerspective(),\n                transforms.ToTensor(),\n#                 transforms.RandomRotation(),\n                transforms.Normalize(mean, std)\n            ]),\n            'val': transforms.Compose([\n                transforms.Resize(resize),\n                transforms.CenterCrop(resize),\n                transforms.ToTensor(),\n                transforms.Normalize(mean, std)\n            ]),\n            'test': transforms.Compose([\n                transforms.Resize(resize),\n                transforms.CenterCrop(resize),\n                transforms.ToTensor(),\n                transforms.Normalize(mean, std)\n            ])\n        }\n    \n    def __call__(self, img, phase=\"train\"):\n        \"\"\"\n        Th\u00f4ng s\u1ed1\n        ----------\n        bi\u1ebfn: 'train' or 'val' or 'test'\n            Ch\u1ec9 \u0111\u1ecbnh ch\u1ebf \u0111\u1ed9 x\u1eed ti\u1ec1n x\u1eed l\u00fd\n        \"\"\"\n        \n        return self.data_transform[phase](img)\n#         return self.data_transform[phase](image=img).get('image')","f391db1f":"class PlantDataset(data.Dataset):\n    \"\"\"\n    L\u1edbp t\u1ea1o t\u1eadp d\u1eef li\u1ec7u\n    \n    Thu\u1ed9c t\u00ednh\n    ----------\n    df_train : DataFrame\n        DataFrame ch\u1ee9a c\u00e1c nh\u00e3n h\u00ecnh \u1ea3nh.\n    file_list : list\n        Danh s\u00e1ch ch\u1ee9a c\u00e1c \u0111\u01b0\u1eddng d\u1eabn \u0111\u1ebfn h\u00ecnh \u1ea3nh\n    transform : object\n        Phi\u00ean b\u1ea3n c\u1ee7a l\u1edbp ti\u1ec1n x\u1eed l\u00fd (ImageTransform)\n    bi\u1ebfn : 'train' or 'val' or 'test'\n        Ch\u1ec9 \u0111\u1ecbnh s\u1eed d\u1ee5ng d\u1eef li\u1ec7u train, validation, test\n    \"\"\"\n    def __init__(self, df_train, file_list, transform=None, phase='train'):\n        self.df_train = df_train\n        self.df_labels_idx = df_labels_idx\n        self.file_list = file_list\n        self.transform = transform\n        self.phase = phase\n   \n    def __len__(self):\n        \"\"\"\n        Returns the number of images.\n        \"\"\"\n        return len(self.file_list)\n    \n    def __getitem__(self, index):\n        \"\"\"\n        Nh\u1eadn d\u1eef li\u1ec7u \u1edf \u0111\u1ecbnh d\u1ea1ng Tensor v\u00e0 nh\u00e3n c\u1ee7a ti\u1ec1n x\u1eed l\u00fd h\u00ecnh \u1ea3nh.\n        \"\"\"\n        #print(index)\n        \n        # Load the index number image.\n        img_path = self.file_list[index]\n        img = Image.open(img_path)\n#         img = cv2.imread(img_path)\n#         img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        \n        # Ti\u1ec1n x\u1eed l\u00fd h\u00ecnh \u1ea3nh\n        img_transformed = self.transform(img, self.phase)\n        \n        # image name\n        image_name = img_path[-20:]\n        \n        # Tr\u00edch xu\u1ea5t c\u00e1c nh\u00e3n\n        if self.phase in [\"train\", \"val\"]:\n            label = df_train.loc[df_train[\"image\"]==image_name][\"labels_n\"].values[0]\n        elif self.phase in [\"test\"]:\n            label = -1\n        \n        return img_transformed, label, image_name","5d3c6847":"size=224\nmean = (0.485, 0.355, 0.406)\nstd = (0.229, 0.224, 0.225)\ntest_list = make_datapath_list(phase=\"test\")\ntest_dataset = PlantDataset(df_train, test_list, transform=ImageTransform(size, mean, std), phase='test')","ef07a006":"batch_size = 128\n\n# Create DataLoader\ntest_dataloader = data.DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n\n# to Dictionary\ndataloaders_dict = {\"test\": test_dataloader}\n\n# Operation check\n# batch_iterator = iter(dataloaders_dict[\"train\"])\n# inputs, labels = next(batch_iterator)\n# print(inputs.size())  # torch.Size([3, 3, 224, 224]) : [batch_size, Channel, H, W]\n# print(labels)","d32a12f8":"SELECTION_MODEL = 'AlexNet' # AlexNet, VGG16, DenseNet","9e2bab1a":"if SELECTION_MODEL == 'AlexNet':\n    net = models.alexnet(pretrained=False)\n    net.classifier[6] = nn.Linear(in_features=4096, out_features=12)","f98e65ed":"if SELECTION_MODEL == 'VGG16':\n    net = models.vgg16(pretrained=False)\n    net.classifier[6] = nn.Linear(in_features=4096, out_features=12)","bb589b45":"if SELECTION_MODEL == 'DenseNet':\n    net = models.densenet161(pretrained=False)\n    prev_out_feature = net.classifier.in_features\n    \n    new_last_layer = [\n        nn.Linear(prev_out_feature, 2208),\n        nn.ReLU(inplace = True),\n        nn.Dropout(p=0.5, inplace=False),\n        \n        nn.Linear(2208, 1104),\n        nn.ReLU(inplace = True),\n        nn.Dropout(p=0.5, inplace=False),\n        \n        nn.Linear(1104, 552),\n        nn.ReLU(inplace = True),\n        nn.Dropout(p=0.2, inplace=False),\n        \n        nn.Linear(552, 138),\n        nn.ReLU(inplace = True),\n        nn.Dropout(p=0.2, inplace=False),\n        \n        nn.Linear(138, 12),\n    ]\n    \n    net.classifier = nn.Sequential(*new_last_layer)","a8ae9eda":"load_path = ''\nif SELECTION_MODEL == 'DenseNet':\n    load_path = \"..\/input\/finetuningmodelzoo\/densenet_second10epoch_fine_tuning_v1.h\"\nelif SELECTION_MODEL == 'AlexNet':\n    load_path = '\/kaggle\/input\/finetuningmodelzoo\/alexnet_final200epoch_fine_tuning_v1.h'\nelif SELECTION_MODEL == 'VGG16':\n    load_path = '..\/input\/finetuningmodelzoo\/vgg16_final-50epoch_fine_tuning_v1.h'","53bf9116":"if torch.cuda.is_available():\n    load_weights = torch.load(load_path)\n    net.load_state_dict(load_weights)\nelse:\n    load_weights = torch.load(load_path, map_location={\"cuda:0\": \"cpu\"})\n    net.load_state_dict(load_weights)","f65e563d":"class PlantPredictor():\n    \"\"\"\n    L\u1edbp d\u1ef1 \u0111o\u00e1n nh\u00e3n t\u1eeb k\u1ebft qu\u1ea3 \u0111\u1ea7u ra\n    \n    Thu\u1ed9c t\u00ednh\n    ----------\n    df_labels_idx: DataFrame\n        DataFrame li\u00ean k\u1ebft INDEX v\u1edbi t\u00ean nh\u00e3n \n    \"\"\"\n    \n    def __init__(self, net, df_labels_idx, dataloaders_dict):\n        self.net = net\n        self.df_labels_idx = df_labels_idx\n        self.dataloaders_dict = dataloaders_dict\n        self.df_submit = pd.DataFrame()\n        \n    \n    def __predict_max(self, out):\n        \"\"\"\n        L\u1ea5y t\u00ean nh\u00e3n v\u1edbi x\u00e1c su\u1ea5t cao nh\u1ea5t.\n        \n        Thong s\u1ed1\n        ----------\n        predicted_label_name: str\n            T\u00ean nh\u00e3n c\u00f3 x\u00e1c su\u1ea5t d\u1ef1 \u0111o\u00e1n cao nh\u1ea5t\n        \"\"\"\n        maxid = np.argmax(out.detach().numpy(), axis=1)\n        df_predicted_label_name = self.df_labels_idx.iloc[maxid]\n        \n        return df_predicted_label_name\n    \n    def inference(self):\n        device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n        print(f\"Devices to be used : {device}\")\n        df_pred_list = []\n        for inputs, _, image_name in tqdm(self.dataloaders_dict['test']):\n            device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n            self.net.to(device)\n            inputs = inputs.to(device)\n            out = self.net(inputs)\n            device = torch.device(\"cpu\")\n            out = out.to(device)\n            df_pred = self.__predict_max(out).reset_index(drop=True)\n            df_pred[\"image\"] = image_name\n            df_pred_list.append(df_pred)\n            \n        self.df_submit = pd.concat(df_pred_list, axis=0)\n        self.df_submit = self.df_submit[[\"image\", \"labels\"]].reset_index(drop=True)","e4df6da0":"predictor = PlantPredictor(net, df_labels_idx, dataloaders_dict)\npredictor.inference()","33dd668c":"df_submit = predictor.df_submit.copy()\ndf_submit.to_csv(\"\/kaggle\/working\/submission.csv\", index=False)","c72bb847":"# Import Data","42e78f05":"Nh\u1eadn th\u1ea5y t\u1eadp d\u1eef li\u1ec7u train c\u00f3 6 lo\u1ea1i nh\u00e3n, t\u1eeb c\u00e1c nh\u00e3n n\u00e0y \u0111\u01b0\u1ee3c phan th\u00e0nh 12 nh\u00e3n c\u1ee5 th\u1ec3.","e1da69b6":"# Load Model","d39974bb":"M\u00f4 h\u00ecnh s\u1ebd \u0111\u01b0\u1ee3c train v\u1edbi 18632 \u1ea3nh"}}