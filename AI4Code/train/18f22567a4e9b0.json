{"cell_type":{"63c62d38":"code","0bed68e1":"code","6b0656fe":"code","1232c307":"code","a0d94e88":"code","912320cb":"markdown"},"source":{"63c62d38":"import numpy\nimport matplotlib.pyplot as plt\nimport math","0bed68e1":"%matplotlib notebook","6b0656fe":"nX = 12\niXmid = 5\ndomainWidth = 1e6  # meters\ndx = domainWidth \/ nX\ntimeStep = 10  # years\nnYears = 50000\ndryFlowParam = 1e3 # m horizontal \/ yr\nwetFlowParam = 1e5 # caution slippery when wet\nsnowFall = 0.05   # m \/ y\nplotLimit = 4000\n\nairT = -10.     # Celcius\ngeoHeatRate = 2E-2 # W\/m2\n#snowFall = float( input('Snowfall rate (m\/yr): ') )\n#nYears = float( input('') )\nnSteps = int( nYears \/ timeStep)\n#nSteps = 2","1232c307":"elevations = numpy.zeros(nX+2)\nflows = numpy.zeros(nX+1)\nxpoints = numpy.zeros(nX+2)\nfor iX in range(0, nX+2):\n    xpoints[iX] = iX + 1\nxpoints_km = xpoints*dx\/1e3\n    \nmean_T_dZ = 0.\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10,5))\n#print( ax )\nax[0].plot(xpoints_km,elevations)\nax[0].set_ylim([0,plotLimit])\nax[0].set_xlabel('distance (km)')\nax[0].set_ylabel('elevation')\nax[1].plot([airT,airT,airT],[0,0,0])\nax[1].set_xlim([-10,0])\nax[1].set_ylim([0,plotLimit])\nax[1].set_xlabel('air T')\n\nplt.show()\n#plt.show(block=False)\nfig.canvas.draw()","a0d94e88":"\n# nX = 2\n\n#      |      |      |\n# e0=0 |  e1  |  e2  |  e3=0     \n#     f0     f1     f2\n#      |      |      |\n\ngenFlowParam = dryFlowParam\nbasetype = \"dry\"\n\nfor iTime in range(0, nSteps):\n\n    for ix in range(1,nX+1):\n        elevations[ix] += snowFall * timeStep\n\n    mean_T_dZ += snowFall * timeStep * airT \n    mean_T = mean_T_dZ \/ elevations[iXmid]\n\n    dTdz = 2 * ( mean_T - airT ) \/ elevations[iXmid] # K \/ m\n    diffAtm = dTdz * 2  # W\/m2\n\n #   diffAtm *= 0\n\n    diffHeatRate = (geoHeatRate - diffAtm) \/ 2E6 * 3E7  \n                                   # W\/m2   K*m\/s  K*m\/yr\n\n    mean_T += diffHeatRate \/ elevations[iXmid] * timeStep\n    mean_T_dZ = mean_T * elevations[iXmid]\n\n    base_T = airT + 2 * ( mean_T - airT )\n    if base_T > 0.:\n        genFlowParam = wetFlowParam\n        basetype = \"wet\"\n    if base_T < -2.:\n        genFlowParam = dryFlowParam\n        basetype = \"dry\"\n    for ix in range(0, nX+1):\n        flows[ix] = ( elevations[ix] - elevations[ix+1] ) \/ dx * \\\n            genFlowParam * \\\n            ( elevations[ix] + elevations[ix+1] ) \/ 2 \/ dx\n\n    for ix in range(1,nX+1):\n        elevations[ix] += ( flows[ix-1] - flows[ix] ) * timeStep\n\n    mean_T_dZ = mean_T * elevations[iXmid]  # keep the same mean_T\n\n#    print( \"elevation\", elevations )\n  #  print( \"flows\", flows )\n\n    if iTime % 100 == 0:\n        print( \"year\", iTime*timeStep, \" base is \", basetype )\n        ax[0].clear()\n        \n        ax[0].plot(xpoints_km,elevations)\n        ax[0].set_ylim([0,plotLimit])\n        ax[0].set_xlabel('distance (km)')\n        ax[0].set_ylabel('elevation')\n\n        ax[1].clear()\n        elvs = [elevations[iXmid],elevations[iXmid]\/2.,0.]\n        ax[1].plot([airT,mean_T,base_T],elvs)\n        ax[1].set_xlim([-10,0])\n        ax[1].set_ylim([0,plotLimit])\n        ax[1].set_xlabel('air T')\n\n        plt.pause(0.01)\n        fig.canvas.draw()\n\nax[0].clear()\nax[0].plot(xpoints_km, elevations )\nax[0].set_ylim([0,plotLimit])\nax[0].set_xlabel('distance (km)')\nax[0].set_ylabel('elevation')\n\nax[1].clear()\nelvs = [elevations[iXmid],elevations[iXmid]\/2.,0.]\nax[1].plot([airT,mean_T,base_T],elvs)\nax[1].set_xlim([-10,0])\nax[1].set_ylim([0,plotLimit])\nax[1].set_xlabel('air T')\n\nplt.show()\nfig.canvas.draw()\n\n#print( elevations[5] )","912320cb":"# Attribution:\n* Python code written by David Archer\n* Adapted to notebook format by Steven Neshyba (March 2021)"}}