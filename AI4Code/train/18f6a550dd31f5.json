{"cell_type":{"3aa18611":"code","13beb52c":"code","08518d68":"code","39e1ab9f":"code","7d1dc624":"code","5bda78a9":"code","44f4bc02":"code","6ec4bbc0":"code","15c1d71b":"code","5714b4fb":"code","ca5b5018":"code","689ba3f8":"code","a8fabc61":"code","6b326e0e":"code","ac37b1c0":"code","0ad21812":"code","08efb4f2":"code","e2b65246":"code","3afa7a90":"code","35ad99e3":"code","4d387fd0":"code","c90d11e2":"code","ecf93feb":"code","cdc7bb53":"code","35b8e142":"code","2d14cd07":"code","c0f1581b":"code","b49bcb03":"code","841c7169":"code","f5418f6c":"code","4a28b44f":"code","ed0b9c40":"code","48277995":"code","7fd4a6ee":"code","f35d6bb6":"code","4a8b4a05":"code","0e105ef8":"code","cc15da3a":"code","786fae6b":"code","536adb4e":"code","5cc2016d":"code","e85e3bf2":"code","17626a7f":"code","77235d5f":"code","c85db729":"code","e456f69f":"code","71bb5304":"code","7a1f0c6a":"code","ebcff7bd":"code","6a956a80":"code","218ad764":"code","4e40fc51":"code","80ead04a":"code","acc6b4fe":"code","db5968f0":"code","ab8f78d3":"code","da8698e9":"code","76f7aa9e":"code","2c27853f":"code","c580797f":"code","d6679014":"code","5d6fc17b":"code","2d7578ca":"code","703c012b":"code","4d788c97":"code","afb626fe":"code","ffe9cef2":"code","60595569":"code","695e0791":"code","7814faec":"code","0a6813a1":"code","0ef79b57":"code","e07d1751":"code","0598095c":"code","8a46c7f7":"code","777ef6f8":"code","5c21d63b":"code","cbd45c6c":"code","73d6eeb1":"code","658181e2":"code","f24c246c":"code","1b2424af":"code","de773da3":"code","b86d74d7":"code","a59a167e":"code","936dbe8a":"code","fba71e15":"code","077d1fb0":"code","3a2a6573":"code","e7eccd2a":"code","256e6172":"code","a9cb5021":"code","639da976":"code","2fc3c876":"code","c9a47ae4":"code","32c7a45b":"code","218772a3":"code","6b61fc7d":"code","4ff9fc82":"code","c5011252":"code","6301efd9":"code","8b6749ca":"code","a92c7bb1":"code","ba92eea0":"code","fcc4783f":"code","71959200":"code","fc99148e":"markdown","7d658046":"markdown","aaad694d":"markdown","699833ee":"markdown","bfe484e2":"markdown","1f774bd8":"markdown","949eb961":"markdown","c921b1ea":"markdown","43a11955":"markdown","4041ff32":"markdown","aa58880c":"markdown","c3ee95a8":"markdown","1c3e151e":"markdown","b7593752":"markdown","6a78154f":"markdown","bec05c7f":"markdown","93285e82":"markdown","1951059f":"markdown","92413def":"markdown","069a9592":"markdown","b2087a31":"markdown","c9703ade":"markdown","97bf9fb3":"markdown","05765f81":"markdown"},"source":{"3aa18611":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","13beb52c":"voice = pd.read_csv('..\/input\/voicegender\/voice.csv')","08518d68":"voice.info()","39e1ab9f":"voice.head()","7d1dc624":"voice.describe()","5bda78a9":"voice.isnull().sum()","44f4bc02":"voice.isnull().any(axis=1).sum()","6ec4bbc0":"sns.countplot(voice['label'])","15c1d71b":"voice.groupby('label').mean()","5714b4fb":"def cohens_d(feature):\n    m1 = voice[voice['label']=='male'][feature].mean()\n    m2 = voice[voice['label']=='female'][feature].mean()\n    n1 = voice[voice['label']=='male'][feature].size\n    n2 = voice[voice['label']=='female'][feature].size\n    s1 = voice[voice['label']=='male'][feature].std()\n    s2 = voice[voice['label']=='female'][feature].std()\n    s = np.sqrt((((n1-1)*s1**2) + ((n2-1)*s2**2)) \/ (n1+n2-2))\n    d = (m1 - m2) \/ s\n    return np.abs(d)","ca5b5018":"cohens_d_effect = pd.Series([cohens_d(i) for i in voice.columns[:-1]], index= voice.columns[:-1])","689ba3f8":"plt.figure(figsize=(20,5))\nplt.plot(cohens_d_effect)","a8fabc61":"voice.groupby('label').mean().loc['female']\/voice.groupby('label').mean().loc['male']","6b326e0e":"plt.figure(figsize=(20,5))\nplt.plot((voice.groupby('label').mean().loc['female']\/voice.groupby('label').mean().loc['male']))\nplt.plot([1]*20, '--')\nplt.title('Ratio of female to male values')\nplt.show()","ac37b1c0":"plt.figure(figsize=(15,10))\nsns.heatmap(voice.corr(), cmap='Spectral', annot=True)\nplt.show()","0ad21812":"voice.columns","08efb4f2":"long_voice = pd.melt(voice, id_vars='label', value_vars=voice.columns[:-1], var_name='properties')","e2b65246":"g = sns.FacetGrid(long_voice, col='properties', col_wrap=5, hue='label', sharex=False, sharey=False, height=4)\ng = g.map(sns.kdeplot, 'value').add_legend().set_titles(\"{col_name}\").set_axis_labels('')","3afa7a90":"df1 = voice.iloc[:, :10]\ndf1 =  (df1-df1.mean())\/df1.std()","35ad99e3":"plt.figure(figsize=(20,6))\nsns.violinplot(data=df1)","4d387fd0":"df1 = pd.concat([df1, voice['label']], axis=1)","c90d11e2":"df1 = pd.melt(df1, id_vars='label', var_name='properties')","ecf93feb":"plt.figure(figsize=(20,7))\nsns.violinplot(x='properties', y='value', hue='label', split=True, inner='quart', data=df1)","cdc7bb53":"df2 = voice.iloc[:, 10:-1]\ndf2 =  (df2-df2.mean())\/df2.std()","35b8e142":"plt.figure(figsize=(20,6))\nsns.violinplot(data=df2)","2d14cd07":"df2 = pd.melt(pd.concat([df2, voice['label']], axis=1), id_vars='label', var_name='properties')","c0f1581b":"plt.figure(figsize=(20,7))\nsns.violinplot(x='properties', y='value', hue='label', split=True, inner='quart', data=df2)","b49bcb03":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split","841c7169":"from sklearn.model_selection import cross_val_score","f5418f6c":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve, precision_recall_curve","4a28b44f":"X = voice.iloc[:, :-1]\ny = voice['label']","ed0b9c40":"def preprocess(X, y, rand):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = rand)\n    min_ = X_train.min()\n    max_ = X_train.max()\n    X_train = (X_train - min_)\/(max_ - min_)\n    X_test = (X_test - min_)\/(max_ - min_)\n    return X_train, X_test, y_train, y_test","48277995":"X_train, X_test, y_train, y_test = preprocess(X, y, 53)","7fd4a6ee":"def scores(X, y, clf, n):\n    \"\"\"\n        X, y are input and output variables.\n        clf is classifier algorithm\n        n is number of random states used for splitting the dataframe\n        this function returns array of scores for random states 0 to n.\n    \"\"\"\n    scores = []\n    for i in range(n):\n        X_train, X_test, y_train, y_test = preprocess(X, y, i)\n        clf.fit(X_train, y_train)\n        scores.append(clf.score(X_test, y_test))\n    return np.array(scores)","f35d6bb6":"from sklearn.ensemble import ExtraTreesClassifier","4a8b4a05":"score_list = scores(X, y, ExtraTreesClassifier(n_estimators=200), 100)","0e105ef8":"plt.figure(figsize=(15,5))\nplt.plot(score_list)\nplt.xlabel('random state')\nplt.ylabel('mean accuracy score')","cc15da3a":"score_list.mean()","786fae6b":"cross_val_score(ExtraTreesClassifier(criterion='entropy', n_estimators=200), X_train, y_train, cv=5).mean()","536adb4e":"etc = ExtraTreesClassifier(n_estimators=200, criterion='entropy')","5cc2016d":"etc.fit(X_train, y_train)","e85e3bf2":"predictions = etc.predict(X_test)","17626a7f":"accuracy_score(y_test, predictions)","77235d5f":"print(classification_report(y_test, predictions))","c85db729":"fig, axes = plt.subplots(1,1, figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, predictions), annot=True, ax=axes)","e456f69f":"pred_prob = etc.predict_proba(X_test)","71bb5304":"fpr, tpr, thresholds = roc_curve(y_test, pred_prob[:, 1], pos_label='male')","7a1f0c6a":"precision, recall, thresholds = precision_recall_curve(y_test, pred_prob[:, 1], pos_label='male')","ebcff7bd":"fig, axes = plt.subplots(1,2, figsize=(15,5))\naxes[0].plot(fpr, tpr)\naxes[0].plot([0, 1], [0, 1],'r--')\naxes[0].set_xlim([-0.05, 1.0])\naxes[0].set_ylim([0.0, 1.05])\naxes[0].set_xlabel('False Positive Rate')\naxes[0].set_ylabel('True Positive Rate')\n\naxes[1].plot(recall, precision)\naxes[1].plot([0, 1], [0, 1],'r--')\naxes[1].set_xlim([0.0, 1.05])\naxes[1].set_ylim([0.0, 1.05])\naxes[1].set_xlabel('Recall')\naxes[1].set_ylabel('Precision')","6a956a80":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,5), gridspec_kw={'width_ratios': [1, 2]})\nsns.heatmap(pred_prob[np.argsort(pred_prob[:, 0])], ax=ax1)\nax2.plot(pred_prob[np.argsort(pred_prob[:, 0])])\nax2.set_xlabel('test case number')\nax2.set_ylabel('probability')\nax2.legend(['female', 'male'])","218ad764":"feature_imp = pd.DataFrame(etc.feature_importances_, voice.iloc[:, :-1].columns, columns=['importance']).sort_values(by='importance', ascending=False)","4e40fc51":"feature_imp.head()","80ead04a":"from sklearn.linear_model import LogisticRegression","acc6b4fe":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","db5968f0":"logreg = LogisticRegression(solver='lbfgs', max_iter=500)","ab8f78d3":"cross_val_score(logreg, X_train, y_train, cv=5).mean()","da8698e9":"logreg.fit(X_train, y_train)","76f7aa9e":"logreg.score(X_test, y_test)","2c27853f":"parameters = {'solver':( 'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'), 'C':[0.001,0.01,.1,1,5,10,25,100]}","c580797f":"clf = GridSearchCV(logreg, parameters)","d6679014":"clf.fit(X_train, y_train)","5d6fc17b":"clf.best_params_","2d7578ca":"clf.best_score_","703c012b":"parameters = {'solver':( 'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'), 'C':[i for i in range(1,100)]}","4d788c97":"clf = RandomizedSearchCV(logreg, param_distributions=parameters, n_iter=50)","afb626fe":"clf.fit(X_train, y_train)","ffe9cef2":"clf.best_params_","60595569":"clf.best_score_","695e0791":"from sklearn.ensemble import RandomForestClassifier","7814faec":"rfc = RandomForestClassifier(n_estimators=100)","0a6813a1":"rfc.fit(X_train, y_train)","0ef79b57":"predictions = rfc.predict(X_test)","e07d1751":"accuracy_score(y_test, predictions)","0598095c":"cross_val_score(rfc, X_train, y_train, cv=5).mean()","8a46c7f7":"print(classification_report(y_test, predictions))","777ef6f8":"fig, axes = plt.subplots(1,1, figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, predictions), annot=True, ax=axes)","5c21d63b":"pred_prob = rfc.predict_proba(X_test)","cbd45c6c":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,5), gridspec_kw={'width_ratios': [1, 2]})\nsns.heatmap(pred_prob[np.argsort(pred_prob[:, 0])], ax=ax1)\nax2.plot(pred_prob[np.argsort(pred_prob[:, 0])])\nax2.set_xlabel('test case number')\nax2.set_ylabel('probability')\nax2.legend(['female', 'male'])","73d6eeb1":"feature_imp = pd.DataFrame(rfc.feature_importances_, voice.iloc[:, :-1].columns, columns=['importance']).sort_values(by='importance', ascending=False)","658181e2":"feature_imp.head()","f24c246c":"from sklearn.svm import SVC","1b2424af":"svc = SVC(C=10, gamma='scale')","de773da3":"svc.fit(X_train, y_train)","b86d74d7":"predictions = svc.predict(X_test)","a59a167e":"accuracy_score(y_test, predictions)","936dbe8a":"cross_val_score(svc, X_train, y_train, cv=5).mean()","fba71e15":"pred_prob = svc.decision_function(X_test)","077d1fb0":"from sklearn.calibration import calibration_curve","3a2a6573":"fop, mpv = calibration_curve(y_test, pred_prob, normalize=True, n_bins=10)","e7eccd2a":"plt.plot(mpv, fop, '*-')\nplt.plot([0,1])","256e6172":"from sklearn.calibration import CalibratedClassifierCV","a9cb5021":"ccc = CalibratedClassifierCV(svc, 'sigmoid')","639da976":"ccc.fit(X_train,  y_train)","2fc3c876":"pred_prob = ccc.predict_proba(X_test)","c9a47ae4":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,5), gridspec_kw={'width_ratios': [1, 2]})\nsns.heatmap(pred_prob[np.argsort(pred_prob[:, 0])], ax=ax1)\nax2.plot(pred_prob[np.argsort(pred_prob[:, 0])])\nax2.set_xlabel('test case number')\nax2.set_ylabel('probability')\nax2.legend(['female', 'male'])","32c7a45b":"fop1, mpv1 = calibration_curve(y_test, ccc.predict_proba(X_test)[:, 1], n_bins=10, normalize=True)","218772a3":"plt.plot(mpv1, fop1, '^-', label='calibrated')\nplt.plot(mpv, fop, '*-')\nplt.plot([0,1])\nplt.legend()","6b61fc7d":"ccc.score(X_test, y_test)","4ff9fc82":"from sklearn.ensemble import GradientBoostingClassifier","c5011252":"gbc = GradientBoostingClassifier()","6301efd9":"cross_val_score(gbc, X_train, y_train, cv=5).mean()","8b6749ca":"gbc.fit(X_train, y_train)","a92c7bb1":"predictions = gbc.predict(X_test)","ba92eea0":"accuracy_score(y_test, predictions)","fcc4783f":"print(classification_report(y_test, predictions))","71959200":"fig, axes = plt.subplots(1,1, figsize=(10,5))\nsns.heatmap(confusion_matrix(y_test, predictions), annot=True, ax=axes)","fc99148e":"SVC does not give probability of each prediction, so we have to use predict_proba method from CalibratedClassifierCV.","7d658046":"Measuring Cohen's d effect size ","aaad694d":"The Dataset\n\nThe following acoustic properties of each voice are measured and included within the CSV:\n\n    meanfreq: mean frequency (in kHz)\n    sd: standard deviation of frequency\n    median: median frequency (in kHz)\n    Q25: first quantile (in kHz)\n    Q75: third quantile (in kHz)\n    IQR: interquantile range (in kHz)\n    skew: skewness (see note in specprop description)\n    kurt: kurtosis (see note in specprop description)\n    sp.ent: spectral entropy\n    sfm: spectral flatness\n    mode: mode frequency\n    centroid: frequency centroid (see specprop)\n    peakf: peak frequency (frequency with highest energy)\n    meanfun: average of fundamental frequency measured across acoustic signal\n    minfun: minimum fundamental frequency measured across acoustic signal\n    maxfun: maximum fundamental frequency measured across acoustic signal\n    meandom: average of dominant frequency measured across acoustic signal\n    mindom: minimum of dominant frequency measured across acoustic signal\n    maxdom: maximum of dominant frequency measured across acoustic signal\n    dfrange: range of dominant frequency measured across acoustic signal\n    modindx: modulation index. Calculated as the accumulated absolute difference between adjacent measurements of fundamental frequencies divided by the frequency range\n    label: male or female","699833ee":"# Random Forest","bfe484e2":"# Logistic Regression","1f774bd8":"# Extra Trees Classifier","949eb961":"# Preprocessing","c921b1ea":"meanfun has clear bimodal distribution","43a11955":"# Introduction","4041ff32":"Violin plots of each feature","aa58880c":"# Data Visualization","c3ee95a8":"sd and IQR show clear bimodal distribution.","1c3e151e":"1. Mean fundamental frequency has highest effect size of 3\n2. sd, Q25, IQR and spectral entropy have values around 1 to 1.5","b7593752":"Plotting probabilities for each case.","6a78154f":"Interactive Visualization - https:\/\/rpsychologist.com\/d3\/cohend\/","bec05c7f":"Plotting probabilities for each case.","93285e82":"Grid Search CV","1951059f":"[](http:\/\/)# Gradient Boosting Classifier","92413def":"Randomized Search CV","069a9592":"Distribution plots of all features by label","b2087a31":"1. for Q25, meanfun, meandom, mindom, maxdom and dfrange ratio of male to female is more than 1.25\n2. for IQR and kurt ratio is less than 0.6","c9703ade":"# Support Vector Machines","97bf9fb3":"Ratio of female to male mean values","05765f81":"Check for any null values"}}