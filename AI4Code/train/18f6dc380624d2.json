{"cell_type":{"99c3f467":"code","68143e65":"code","25d6950b":"code","3b7e2813":"code","c0ede7c5":"code","76e87ede":"code","1e2087a9":"code","3b05f425":"code","8b2c5f52":"code","48de9492":"code","1efa4d97":"code","60329d77":"code","94c9bca5":"code","92090589":"code","9da9ba4c":"code","ad32fdd9":"code","ca32a808":"code","8862e496":"code","2dd0f866":"code","12c45401":"code","2a539403":"code","ea15a2b5":"code","8b51f05e":"code","ecb042cd":"code","4f425a47":"code","2f00985c":"code","2ecd9dea":"code","b51b7c68":"code","dfa8250e":"code","e2179d2c":"code","cfcc83bc":"code","50e1e928":"code","6569d7d0":"code","73f989f6":"code","58c0c755":"code","3ebfd70d":"code","48a50cfc":"code","5b98513f":"code","0aeeca8d":"code","ea7f4406":"code","c692800a":"code","9c11dcdf":"code","30ac4a96":"code","ab5b57cb":"markdown","43681236":"markdown","58a517d7":"markdown","7cd7283a":"markdown","d51fced8":"markdown","66fc33d7":"markdown","f108fe96":"markdown","d8003e2d":"markdown","201ca1d0":"markdown","73f11f3d":"markdown","7e411be5":"markdown","cf8904cd":"markdown","d2079932":"markdown","3b2e49dd":"markdown","9a6f2b2f":"markdown","5b8e8372":"markdown","f40bf535":"markdown","e57c372a":"markdown","823959a0":"markdown","9d17a900":"markdown","8b5d154c":"markdown","2bdec3d8":"markdown","73be31ce":"markdown","ef6adab1":"markdown"},"source":{"99c3f467":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn import metrics\n%matplotlib inline\nimport matplotlib.pyplot as plt","68143e65":"housing = pd.read_csv(r\"..\/input\/housing-data\/Data.csv\")","25d6950b":"housing.head()#overview of data","3b7e2813":"#shape of data \nhousing.shape","c0ede7c5":"#rename the column MEDV \nhousing.rename(columns={\"MEDV\":\"Price\"}, inplace=True)","76e87ede":"# To see the columns\nhousing.columns","1e2087a9":"#check for null values\nhousing.isnull().sum()","3b05f425":"housing.info()#summary of dataset","8b2c5f52":"housing.describe()#statistical summary of dataset","48de9492":"housing['CHAS'].value_counts()#categorical variable","1efa4d97":"#visualisation of CHAS values\nsns.countplot(x=\"CHAS\",data=housing)","60329d77":"#corelation b\/w columns\ncorr_matrix=housing.corr()","94c9bca5":"#here we see the correlation of other features with Price\ncorr_matrix['Price'].sort_values(ascending=False)","92090589":"plt.scatter(housing['RM'],housing['Price'],alpha=0.3)#high positive corelation","9da9ba4c":"plt.scatter(housing['LSTAT'],housing['Price'],alpha=0.3)# high negative correlation","ad32fdd9":"#we create a new column using another two columns\nhousing['RMTAX']=housing['RM']\/housing['TAX']","ca32a808":"housing.head()#check for new added column","8862e496":"# correlation after adding new coulmn and we can see that RMTAX has a good positive correlation \ncorr_matrix=housing.corr()\ncorr_matrix['Price'].sort_values(ascending=False)","2dd0f866":"#plotting the heatmap of correlation between features\nplt.figure(figsize=(15,15))\nsns.heatmap(corr_matrix, cbar=False, square= True, fmt=\".2%\", annot=True, cmap=\"Greens\")","12c45401":"from sklearn.model_selection import train_test_split #import library for train_test_split","2a539403":"X=housing.drop('Price',axis=1)#independent variable\ny=housing['Price'].copy()#target variable","ea15a2b5":"#split the dataset\nX_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=42)","8b51f05e":"X_train.shape","ecb042cd":"X_test.shape","4f425a47":"y_train.shape","2f00985c":"y_test.shape","2ecd9dea":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()#create the model\nmodel.fit(X_train,y_train)#fit the model","b51b7c68":"# predict the model\ny_pred = model.predict(X_test) ","dfa8250e":"#Accuracy of model\nregTrain_score=model.score(X_train,y_train)*100\nregTest_score=model.score(X_test,y_test)*100\nprint(\"Training Accuracy : \",regTrain_score)\nprint(\"Testing Accuracy : \",regTest_score)","e2179d2c":"#we use here MAE, MSE & RMSE for model evaluation \nReg_mse = metrics.mean_squared_error(y_test, y_pred) \nReg_rmse=np.sqrt(Reg_mse)\nReg_mae=metrics.mean_absolute_error(y_test, y_pred)\nprint(\"Mean Absolute Error: \", Reg_mae)\nprint(\"Mean Square Error : \",Reg_mse) \nprint(\"Root Mean Square Error : \",Reg_rmse) ","cfcc83bc":"# Plotting Scatter graph to show the results between true values and predicted values\nplt.scatter(y_test, y_pred, c = 'red') \nplt.xlabel(\"Price: in $1000's\") \nplt.ylabel(\"Predicted values\") \nplt.title(\"Results: Linear Regression\") \nplt.show() ","50e1e928":"from sklearn.tree import DecisionTreeRegressor \nDes_Tree = DecisionTreeRegressor(random_state = 0) #create the Des_Tree object\n# fit the regressor with X and Y data \nDes_Tree.fit(X_train, y_train) ","6569d7d0":"# predict the Des_Tree Model\ny_pred = Des_Tree.predict(X_test) ","73f989f6":"#Accuracy of model\nDesTrain_score=Des_Tree.score(X_train,y_train)*100\nDesTest_score=Des_Tree.score(X_test,y_test)*100\nprint(\"Training Accuracy : \",DesTrain_score)\nprint(\"Testing Accuracy : \",DesTest_score)","58c0c755":"#we use here MAE, MSE & RMSE for model evaluation \nDes_mse = metrics.mean_squared_error(y_test, y_pred) \nDes_rmse=np.sqrt(Des_mse)\nDes_mae=metrics.mean_absolute_error(y_test, y_pred)\nprint(\"Mean Absolute Error: \", Des_mae)\nprint(\"Mean Square Error : \",Des_mse) \nprint(\"Root Mean Square Error : \",Des_rmse) ","3ebfd70d":"# Plotting Scatter graph to show the results between true values and predicted values\nplt.scatter(y_test, y_pred, c = 'red') \nplt.xlabel(\"Price: in $1000's\") \nplt.ylabel(\"Predicted values\") \nplt.title(\"Results: Decision Tree\") \nplt.show() ","48a50cfc":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0) #create the object","5b98513f":"regressor.fit(X_train, y_train)  # fit the object","0aeeca8d":"y_pred=regressor.predict(X_test)# predict the regressor","ea7f4406":"#Accuracy of model\nRandom_Train_score=regressor.score(X_train,y_train)*100\nRandom_Test_score=regressor.score(X_test,y_test)*100\nprint(\"Training Accuracy : \",Random_Train_score)\nprint(\"Testing Accuracy : \",Random_Test_score)","c692800a":"#we use here MAE, MSE & RMSE for model evaluation \nRandom_mse = metrics.mean_squared_error(y_test, y_pred) \nRandom_rmse=np.sqrt(Random_mse)\nRandom_mae=metrics.mean_absolute_error(y_test, y_pred)\nprint(\"Mean Absolute Error: \", Random_mae)\nprint(\"Mean Square Error : \",Random_mse) \nprint(\"Root Mean Square Error : \",Random_rmse) ","9c11dcdf":"# Plotting Scatter graph to show the results between true values and predicted values\nplt.scatter(y_test, y_pred, c = 'red') \nplt.xlabel(\"Price: in $1000's\") \nplt.ylabel(\"Predicted values\") \nplt.title(\"Results: Random Forest\") \nplt.show() ","30ac4a96":"models = pd.DataFrame({\n    'Model': ['Linear Regression','Decision Tree','Random Forest'],\n    'RMSE': [Reg_rmse, Des_rmse, Random_rmse],'Test_Accuracy': [regTest_score,DesTest_score,Random_Test_score]})\nmodels.sort_values(by='RMSE', ascending=False)","ab5b57cb":"# Trying different models\n","43681236":"## *2. Decision Tree*","58a517d7":"**From above comparison we can say that Random Forest is more suitable for price prediction between all three models.**","7cd7283a":"# *Train Test split  the dataset*","d51fced8":"##### As we can see that RM has high positive correlation with Price and  LSTAT has negative correlation with Price. We can see these correlation through visualisation also.","66fc33d7":"# *Model Visualisation*","f108fe96":"# *Model evaluation*","d8003e2d":"# *Model Visualisation*","201ca1d0":"## **Exploratory Data Analysis:** ","73f11f3d":"# *Model Evaluation*","7e411be5":"# *Problem Statement & Approach :*\n We have a dataset of Boston house prices with some features. Our task is to  to make a model which can give us a good prediction on the price of the house based on the features. We are going to use Linear Regression, Decision Tree Regressor and Random Forest Regressor for this dataset and evaluate these models based on the performace metrics.","cf8904cd":"# *Model evaluation*","d2079932":"## *Importing Libraries*","3b2e49dd":"## *1. Linear Regression*","9a6f2b2f":"Shape of split data:","5b8e8372":"### ***Comparing all the models:***","f40bf535":"# *Model Visualisation*","e57c372a":"## Dataset Features","823959a0":"## *3. Random Forest*","9d17a900":"## *Feature Observation:*","8b5d154c":"There are 506 observations of 13 features with a target column price.","2bdec3d8":"    1. CRIM      per capita crime rate by town\n    2. ZN        proportion of residential land zoned for lots over \n                 25,000 sq.ft.\n    3. INDUS     proportion of non-retail business acres per town\n    4. CHAS      Charles River dummy variable (= 1 if tract bounds \n                 river; 0 otherwise)\n    5. NOX       nitric oxides concentration (parts per 10 million)\n    6. RM        average number of rooms per dwelling\n    7. AGE       proportion of owner-occupied units built prior to 1940\n    8. DIS       weighted distances to five Boston employment centres\n    9. RAD       index of accessibility to radial highways\n    10. TAX      full-value property-tax rate per $ 10,000\n    11. PTRATIO  pupil-teacher ratio by town\n    12. B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks \n                 by town\n    13. LSTAT    % lower status of the population\n    14. MEDV     Median value of owner-occupied homes in $1000's","73be31ce":"## Feature Engineering","ef6adab1":"# *Importing Data* "}}