{"cell_type":{"eaac003d":"code","2f02eaa3":"code","5caf911f":"code","36e5f91b":"code","25fa4ebb":"code","8106a11f":"code","78d1de36":"code","97a47417":"code","4a0c108c":"code","d74ebfb8":"code","e2cff6fb":"code","3fea212c":"code","096fadf6":"code","b1a55208":"code","da3a9972":"code","7fd8b526":"code","4642cf63":"code","beca1d26":"code","9a6d5cb3":"code","bf198463":"code","7727061a":"code","6d3b5024":"code","451d2b46":"code","db098a4b":"code","24b928b5":"markdown","145adfb8":"markdown","f590e901":"markdown","74bd60f0":"markdown","d53d4829":"markdown","2849e31c":"markdown"},"source":{"eaac003d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","2f02eaa3":"# Data loading\nedges_raw = pd.read_csv(\"..\/input\/the-marvel-universe-social-network\/edges.csv\")\nnodes_raw = pd.read_csv(\"..\/input\/the-marvel-universe-social-network\/nodes.csv\")\nheros_raw = pd.read_csv(\"..\/input\/the-marvel-universe-social-network\/hero-network.csv\")","5caf911f":"# Null value check\nprint('Edges', edges_raw.shape)\nprint(edges_raw.isnull().sum())\n\nprint('Nodes', nodes_raw.shape)\nprint(nodes_raw.isnull().sum())\n\nprint('Heros', heros_raw.shape)\nprint(heros_raw.isnull().sum())","36e5f91b":"# Representative values check\nprint(edges_raw.describe())\nprint(nodes_raw.describe())\nprint(heros_raw.describe())","25fa4ebb":"edges_raw.head()","8106a11f":"nodes_raw.head()","78d1de36":"heros_raw.head()","97a47417":"import networkx as nx\nfrom networkx.algorithms import bipartite\nfrom networkx.drawing.layout import bipartite_layout","4a0c108c":"# Mini sample\nmini_comic_list = ['TB:LS', 'ASM 53', 'MX 16', 'GAL 3', 'COH 2']\nmini_hero_list = ['CAPTAIN MARVEL III\/G', 'JAMESON, J. JONAH', 'BOUDREAUX, BELLA DON', \n                  'SCARLET WITCH\/WANDA', 'STORM\/ORORO MUNROE S']\nmini_edges = [('CAPTAIN MARVEL III\/G', 'TB:LS'),\n              ('JAMESON, J. JONAH', 'ASM 53'),\n              ('BOUDREAUX, BELLA DON', 'MX 16'),\n              ('SCARLET WITCH\/WANDA', 'GAL 3'),\n              ('STORM\/ORORO MUNROE S', 'COH 2'),\n              ('JAMESON, J. JONAH', 'GAL 3'),\n              ('STORM\/ORORO MUNROE S', 'TB:LS'),\n              ('JAMESON, J. JONAH', 'MX 16'),\n             ]\n\n# Make a blank graph\nmini_bipart = nx.Graph()\n\n# Add nodes\nmini_bipart.add_nodes_from(mini_comic_list, bipartite=0)\nmini_bipart.add_nodes_from(mini_hero_list, bipartite=1)\n\n# Add edges\nmini_bipart.add_edges_from(mini_edges)\n\n# Separate nodes\nmini_top_nodes = {n for n, d in mini_bipart.nodes(data=True) if d['bipartite'] == 0}\nmini_bottom_nodes = set(mini_bipart) - mini_top_nodes\nmini_bipart.nodes(data=True)\n\n# Set node colors\ncolor_dict = {0:'cornflowerblue', 1:'tomato'}\ncolor_list = [color_dict[i[1]] for i in mini_bipart.nodes.data('bipartite')]\n\n# Draw a bipartite graph\npos = dict()\ncolor = []\npos.update((n, (1, i)) for i, n in enumerate(mini_bottom_nodes) ) \npos.update((n, (2, i)) for i, n in enumerate(mini_top_nodes) ) \nnx.draw(mini_bipart, pos=pos, with_labels=True, node_color=color_list, font_size=8)\nplt.show()","d74ebfb8":"# Full bipartite graph\n\n# Separate comic and hero nodes\ncomic_node = nodes_raw['node'][nodes_raw['type'] == 'comic'].unique()\nhero_node = nodes_raw['node'][nodes_raw['type'] == 'hero'].unique()\n\n# Make the edge data as a 2-tuple\nedges_tuple = edges_raw.values.tolist()\nedges_tuple = [tuple(x) for x in edges_tuple]\n\n# Make numpy array to list\ncomic_node_list = comic_node.tolist()\nhero_node_list = hero_node.tolist()\n\n# Make a blank graph\nbipart = nx.Graph()\n\n# Add nodes\nbipart.add_nodes_from(comic_node_list, bipartite=0)\nbipart.add_nodes_from(hero_node_list, bipartite=1)\nbipart.add_node(\"SPIDER-MAN\/PETER PARKER\", bipartite=1) # Manually added a node that was somehow not included \n\n# Add edges\nbipart.add_edges_from(edges_tuple)\n\n# Separate nodes\ntop_nodes = {n for n, d in bipart.nodes(data=True) if d['bipartite'] == 0}\nbottom_nodes = set(bipart) - top_nodes","e2cff6fb":"# Visualization\nplt.figure(figsize=(70, 6))\npos = bipartite_layout(bipart, top_nodes, align='horizontal')\nnx.draw(bipart, pos=pos, node_size=10, node_color='lightgreen', alpha=0.01)\nnx.draw_networkx_labels(bipart, pos=pos, font_size=3)\nplt.show()","3fea212c":"# Build a unipartite graph of hero\nhero_graph = bipartite.projected_graph(bipart, hero_node_list, multigraph=False)\n\n# Visualization\nplt.figure(figsize=(5, 5))\npos=nx.spring_layout(hero_graph)\nnx.draw(hero_graph, pos=pos, node_size=5, node_color='tomato', alpha=0.4)\nnx.draw_networkx_edges(hero_graph, pos=pos, alpha=0.1)\nplt.show()","096fadf6":"# Build a unipartite graph of comic\ncomic_graph = bipartite.projected_graph(bipart, comic_node_list, multigraph=False)\n\n# Visualization\nplt.figure(figsize=(5, 5))\npos=nx.spring_layout(comic_graph)\nnx.draw(comic_graph, pos=pos, node_size=5, node_color='cornflowerblue', alpha=0.4)\nnx.draw_networkx_edges(comic_graph, pos=pos, alpha=0.1)\nplt.show()","b1a55208":"# Distribution of degrees: Hero\n\n# Ranking of nodes regarding the number of degrees\ndegree_sequence = sorted([d for n, d in hero_graph.degree()], reverse=True)\n\n# Extract connected nodes to visualize\nGcc = hero_graph.subgraph(sorted(nx.connected_components(hero_graph), key=len, reverse=True)[0])\n\n# Visualization\nfig = plt.figure(\"Degree of the hero graph\", figsize=(8, 8))\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\npos = nx.spring_layout(Gcc, seed=42)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=5, alpha=0.4, node_color='tomato')\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.1)\nax0.set_title(\"Connected components of Hero\")\nax0.set_axis_off()\n\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, marker=\"o\", markersize=1, color='tomato')\nax1.set_title(\"Degree Rank Plot (Hero)\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\n\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True), color='tomato')\nax2.set_title(\"Degree histogram (Hero)\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylim([0, 200])\nax2.set_ylabel(\"Frequency of Nodes\")\n\nfig.tight_layout()\nplt.show()","da3a9972":"# Distribution of degrees: Comic\n\n# Ranking of nodes regarding the number of degrees\ndegree_sequence = sorted([d for n, d in comic_graph.degree()], reverse=True)\n\n# Extract connected nodes to visualize\nGcc = comic_graph.subgraph(sorted(nx.connected_components(comic_graph), key=len, reverse=True)[0])\n\n# Visualization\nfig = plt.figure(\"Degree of the comic graph\", figsize=(8, 8))\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=5, alpha=0.4, node_color='cornflowerblue')\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.1)\nax0.set_title(\"Connected components of Comic\")\nax0.set_axis_off()\n\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, marker=\"o\", markersize=1, color='cornflowerblue')\nax1.set_title(\"Degree Rank Plot (Comic)\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\n\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True), color='cornflowerblue')\nax2.set_title(\"Degree histogram (Comic)\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylim([0, 200])\nax2.set_ylabel(\"Frequency of Nodes\")\n\nfig.tight_layout()\nplt.show()","7fd8b526":"# Digree Centrality\ncentrality_hero = nx.degree_centrality(hero_graph)\ncentrality_df_hero = pd.DataFrame(sorted(centrality_hero.items(), key=lambda x:x[1], reverse=True), columns=['Hero', 'Degree Centrality'])\ncentrality_df_hero['Degree Centrality'] = centrality_df_hero['Degree Centrality'].apply(lambda x: round(x, 2))\nprint(centrality_df_hero.head())\n\ncentrality_comic = nx.degree_centrality(comic_graph)\ncentrality_df_comic = pd.DataFrame(sorted(centrality_comic.items(), key=lambda x:x[1], reverse=True), columns=['Comic', 'Degree Centrality'])\ncentrality_df_comic['Degree Centrality'] = centrality_df_comic['Degree Centrality'].apply(lambda x: round(x, 2))\nprint(centrality_df_comic.head())","4642cf63":"from community import community_louvain\nimport matplotlib.cm as cm","beca1d26":"# Visualization of communities divided by Louvain algorithm: Hero\n\n# Extract connected nodes to visualize\nGcc = hero_graph.subgraph(sorted(nx.connected_components(hero_graph), key=len, reverse=True)[0])\n\n# Community division\npartition_hero = community_louvain.best_partition(Gcc)\n\n# Color the nodes according to community\ncmap = cm.get_cmap('gist_ncar', max(partition_hero.values()) + 1)\n\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(Gcc, seed=42)\nnx.draw_networkx_nodes(Gcc, pos, partition_hero.keys(), node_size=5, alpha=0.4,\n                       cmap=cmap, node_color=list(partition_hero.values()))\nnx.draw_networkx_edges(Gcc, pos, alpha=0.1)\nplt.title(\"Hero Community\")\nplt.show()","9a6d5cb3":"# Visualization of communities divided by Louvain algorithm: Comic\n\n# Extract connected nodes to visualize\nGcc = comic_graph.subgraph(sorted(nx.connected_components(comic_graph), key=len, reverse=True)[0])\n\n# Community division\npartition_comic = community_louvain.best_partition(Gcc)\n\n# Color the nodes according to community\ncmap = cm.get_cmap('gist_ncar', max(partition_comic.values()) + 1)\n\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(Gcc, seed=42)\nnx.draw_networkx_nodes(Gcc, pos, partition_comic.keys(), node_size=5, alpha=0.4,\n                       cmap=cmap, node_color=list(partition_comic.values()))\nnx.draw_networkx_edges(Gcc, pos, alpha=0.1)\nplt.title(\"Comic Community\")\nplt.show()","bf198463":"# Modularity (Evaluate the community dividion)\nimport networkx.algorithms.community as nx_comm\n\nhero_modu = nx_comm.modularity(hero_graph, nx_comm.label_propagation_communities(hero_graph))\ncomic_modu = nx_comm.modularity(comic_graph, nx_comm.label_propagation_communities(comic_graph))\n\nprint('Modularity of Hero network: ', round(hero_modu, 4))\nprint('Modularity of Comic network: ', round(comic_modu, 4))","7727061a":"# Analyze community info\nGcc_hero = hero_graph.subgraph(sorted(nx.connected_components(hero_graph), key=len, reverse=True)[0])\npartition_hero = community_louvain.best_partition(Gcc_hero)\n\nGcc_comic = comic_graph.subgraph(sorted(nx.connected_components(comic_graph), key=len, reverse=True)[0])\npartition_comic = community_louvain.best_partition(Gcc_comic)\n\npartition_hero_df = pd.DataFrame(partition_hero.values(), index=partition_hero.keys(), columns=['Community'])\npartition_comic_df = pd.DataFrame(partition_comic.values(), index=partition_comic.keys(), columns=['Community'])","6d3b5024":"# Number of communities\nprint('Number of communities (Hero): ', partition_hero_df['Community'].nunique())\nprint('Number of communities (Comic): ', partition_comic_df['Community'].nunique())","451d2b46":"# Top communities having larger members\ncommunity_rank_hero = pd.DataFrame(partition_hero_df.value_counts(), columns=['Count'])\nprint('TOP communities (Hero): ', community_rank_hero.head(3))\n\ncommunity_rank_comic = pd.DataFrame(partition_comic_df.value_counts(), columns=['Count'])\nprint('TOP communities (Comic): ', community_rank_comic.head(3))","db098a4b":"# Extract heros belong to the top community (community #5)\nprint(partition_hero_df[partition_hero_df['Community'] == 5].sample(5))\n\n# Extract comics belong to the top community (community #1)\nprint(partition_comic_df[partition_comic_df['Community'] == 1].sample(5))","24b928b5":"# Data checking","145adfb8":"## Insights from the praphs","f590e901":"## Find communities","74bd60f0":"## Centrality Metrics","d53d4829":"# Build a bipartite graph consists of comic and heroe nodes","2849e31c":"# Projection to unipartite graph"}}