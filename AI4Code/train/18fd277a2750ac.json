{"cell_type":{"cadadc62":"code","68d8d632":"code","cad93929":"code","21cf42ab":"code","c99ac79d":"code","9eeeb478":"code","c13546b6":"code","ed11eeb7":"code","85582f1c":"code","08b15090":"code","41a011da":"code","30643df9":"code","7bb2d83d":"code","01c5ec53":"code","6e3f7866":"code","52b7a29c":"code","7424555c":"code","c9c47b0f":"code","2a44e59a":"code","91e3d020":"code","3ddff823":"code","1d74817d":"code","f9ed1f5b":"code","348ff15b":"code","072482cc":"code","7b4f5658":"code","4b0b2565":"code","2b0b648b":"code","3cbaff2e":"code","cc9ddbba":"code","74ed84b1":"code","cf48567f":"code","6119043d":"code","bec1d5d6":"code","ac01e9c6":"code","b476cb38":"code","f5544abd":"code","e63d3eea":"code","9d308ba1":"code","fce9c98a":"code","ce3a572b":"code","099f3145":"code","2975363e":"code","edb1b06b":"code","6fb0c52c":"code","28064eeb":"code","5d3c05c1":"code","ff24adb5":"markdown","33893749":"markdown","ee728dae":"markdown","de24491e":"markdown","417e6baf":"markdown","3974dba9":"markdown","cda0123e":"markdown","1e1edd79":"markdown","7de5c99e":"markdown","d9d37f80":"markdown","76950606":"markdown","a3555653":"markdown","8424047b":"markdown"},"source":{"cadadc62":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats","68d8d632":"from sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,ElasticNet\nfrom sklearn.model_selection import GridSearchCV","cad93929":"dftrain = pd.read_csv('..\/input\/train.csv')\nprint(dftrain.shape)\ndftrain.head()","21cf42ab":"dfmeal = pd.read_csv('..\/input\/meal_info.csv')\nprint(dfmeal.shape)\ndfmeal.head()","c99ac79d":"dfcenter = pd.read_csv('..\/input\/fulfilment_center_info.csv')\nprint(dfcenter.shape)\ndfcenter.head()","9eeeb478":"food = pd.merge(pd.merge(dftrain,dfmeal,on='meal_id'),dfcenter,on='center_id')\nfood.head()","c13546b6":"dftest = pd.read_csv('..\/input\/test_QoiMO9B.csv')\nprint(dftest.shape)\ndftest.head()","ed11eeb7":"foodTest = pd.merge(pd.merge(dftest,dfmeal,on='meal_id'),dfcenter,on='center_id')\nfoodTest.head()","85582f1c":"food.info()","08b15090":"foodTest.info()","41a011da":"food.loc[food[food['checkout_price'] > food['base_price']].index,'Discount'] = 1\nfood.loc[food[food['checkout_price'] < food['base_price']].index,'Discount'] = -1\nfood.loc[food[food['checkout_price'] == food['base_price']].index,'Discount'] = 0","30643df9":"#food['promotion'] = food['emailer_for_promotion'] + food['homepage_featured']","7bb2d83d":"#food['cuisine'] = food['cuisine'].replace(['Thai','Indian','Italian'],['Asian','Asian','Continental'])","01c5ec53":"food['year'] = food['week'].apply(lambda x: int(x\/52))\nfood['month'] = food['week'].apply(lambda x: int(x\/4))","6e3f7866":"food.drop(['checkout_price','city_code','region_code'],axis=1,inplace=True)","52b7a29c":"food.head()","7424555c":"foodTest.loc[foodTest[foodTest['checkout_price'] > foodTest['base_price']].index,'Discount'] = 1\nfoodTest.loc[foodTest[foodTest['checkout_price'] < foodTest['base_price']].index,'Discount'] = -1\nfoodTest.loc[foodTest[foodTest['checkout_price'] == foodTest['base_price']].index,'Discount'] = 0","c9c47b0f":"#foodTest['promotion'] = foodTest['emailer_for_promotion'] + foodTest['homepage_featured']\n#foodTest['cuisine'] = foodTest['cuisine'].replace(['Thai','Indian','Italian','Continental''],['Asian','Asian','Continental'])\nfoodTest['year'] = foodTest['week'].apply(lambda x: int(x\/52))\nfoodTest['month'] = foodTest['week'].apply(lambda x: int(x\/4))\nfoodTest.drop(['checkout_price','city_code','region_code'],axis=1,inplace=True)","2a44e59a":"dummyTrain = pd.get_dummies(food.drop(['id','op_area'],axis=1))\ndummyTrain.head()","91e3d020":"dummyTest = pd.get_dummies(foodTest.drop(['id','op_area'],axis=1))","3ddff823":"sc = StandardScaler()","1d74817d":"scaledTrain = pd.DataFrame(sc.fit_transform(dummyTrain),columns=dummyTrain.columns)\nscaledTrain.head()","f9ed1f5b":"scaledTest = pd.DataFrame(sc.fit_transform(dummyTest),columns=dummyTest.columns)\nscaledTest.head()","348ff15b":"x = scaledTrain.drop('num_orders',axis=1)\ny = scaledTrain['num_orders']","072482cc":"lr = LinearRegression()","7b4f5658":"lr.fit(x,y)","4b0b2565":"ypredLr = lr.predict(scaledTest)\nypredLr","2b0b648b":"sci = StandardScaler()","3cbaff2e":"sci.fit_transform(pd.DataFrame(food['num_orders']))","cc9ddbba":"ypredlr_i = sci.inverse_transform(ypredLr)\nypredlr_i","74ed84b1":"ypredlr_i = abs(ypredlr_i)","cf48567f":"pd.DataFrame({'id':foodTest['id'],'num_orders':ypredlr_i})","6119043d":"params = {\"alpha\":[0.01,0.5,1,2,3,4,0.02,0.03,0.09,10,50],\n         \"solver\":[\"auto\", \"svd\", \"cholesky\", \"lsqr\", \"sparse_cg\", \"sag\", \"saga\"],\n         \"random_state\":[0,2,1,3,500]}\nparams_lasso = {\"alpha\":[0.01,0.5,1,2,3,0.05,0.02,0.03,0.09,0.001,5],\n         \"random_state\":[0,2,1,3,500]}\nparams_elastic = {\"alpha\":[0.01,0.5,1,2,3,0.05,0.02,0.03,0.001,5],\n         \"random_state\":[0,2,1,3,500]}\n","bec1d5d6":"lasso = Lasso(alpha=0.01,random_state=0)\nlasso.fit(x,y)\nypredl = lasso.predict(scaledTest)\nypredl_i = sci.inverse_transform(ypredl)\nypredl_i","ac01e9c6":"ypredl_i = abs(ypredl_i)","b476cb38":"pd.DataFrame({'id':foodTest['id'],'num_orders':ypredl_i})","f5544abd":"gLasso =GridSearchCV(estimator=lasso,param_grid=params_lasso,cv=3)","e63d3eea":"#gLasso.fit(x,y)","9d308ba1":"#gLasso.best_params_","fce9c98a":"plt.figure(figsize=(12,12))\npd.Series(lasso.coef_,index=x.columns).plot(kind='barh')","ce3a572b":"enet = ElasticNet(alpha=0.01,random_state=0)\nenet.fit(x,y)\nypredenet = enet.predict(scaledTest)\nypredenet_i = sci.inverse_transform(ypredenet)\nypredenet_i","099f3145":"ypredenet_i = abs(ypredenet_i)","2975363e":"pd.DataFrame({'id':foodTest['id'],'num_orders':ypredenet_i})","edb1b06b":"gEnet =GridSearchCV(estimator=enet,param_grid=params_elastic,cv=3)","6fb0c52c":"#gEnet.fit(x,y)","28064eeb":"#gEnet.best_params_","5d3c05c1":"plt.figure(figsize=(12,12))\nsns.heatmap(food.corr(),annot=True)","ff24adb5":"# Read","33893749":"# OH Encode","ee728dae":"# Merged Df","de24491e":"# Food Demand Forecast(Analytics Vidhya Hackthon)\nSource : https:\/\/datahack.analyticsvidhya.com\/contest\/genpact-machine-learning-hackathon-1\/","417e6baf":"# Scaling","3974dba9":"# Linear Regression","cda0123e":"# Import ","1e1edd79":"# Inverse Transformation of Target","7de5c99e":"# ElasticNet","d9d37f80":"Final score on analytics vidhya after submission,\nRMSE : 99.2","76950606":"# Lasso","a3555653":"# Heatmap","8424047b":"# Feature Eng"}}