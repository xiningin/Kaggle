{"cell_type":{"b6fad84d":"code","dd06fe8b":"code","ce9def55":"code","d067f4b6":"code","edc64e49":"code","01bde4d7":"code","d4258a74":"code","1fde497d":"code","4da65695":"code","bc4ee6f0":"code","64b59163":"code","0a6716fe":"code","2df77bb4":"code","7a24aac0":"code","10c06947":"code","3b8d05c7":"code","5f0996e3":"code","fd82e569":"code","ac01ced4":"code","15bf6ed1":"code","ae53436f":"code","8f1b1817":"code","b0e5c494":"markdown","392421c5":"markdown","e8e74877":"markdown","16b061ee":"markdown","b8dbb924":"markdown","93311388":"markdown","708f2170":"markdown"},"source":{"b6fad84d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport os\nimport random\nimport json\nimport cv2\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom PIL import Image\nfrom keras.applications.vgg16 import VGG16 \nfrom keras.preprocessing import image\nfrom keras.models import Sequential,Model\nfrom keras.optimizers import Adam,SGD\nfrom keras.layers import Dense, Flatten, GlobalAveragePooling2D, Conv2D, Input, Dropout\nfrom keras.utils import np_utils\nfrom keras import backend as K\n\n","dd06fe8b":"path = '..\/input\/aerial-cactus-identification\/'\ntrain = pd.read_csv(path + 'train.csv')\nsample_sub = pd.read_csv(path + 'sample_submission.csv')","ce9def55":"train.head()","d067f4b6":"train['has_cactus'].value_counts().plot(kind='bar')","edc64e49":"plt.subplots(figsize=(10,10))\nfor i in range(5):\n    img_name = train['id'][i]\n    img = Image.open(path + 'train\/train\/' + img_name)\n    plt.imshow(np.asarray(img))\n    plt.show()","01bde4d7":"images = []\nlabels = []\nfor i in os.listdir(path + 'train\/train\/'):\n    img = image.load_img(path + 'train\/train\/' + i, target_size=(32,32))\n    img = image.img_to_array(img)\n    labels.append(train[train['id'] == i]['has_cactus'].values[0])\n    images.append(img)","d4258a74":"combined = list(zip(images,labels))\nrandom.shuffle(combined)\nimages[:],labels[:] = zip(*combined) ","1fde497d":"X_train = np.asarray(images)\nX_train = X_train.astype('float32')\nX_train \/= 255\ny_train = np.array(labels)","4da65695":"vgg16 = VGG16(include_top=False, weights='imagenet', input_shape=(32,32,3))","bc4ee6f0":"vgg16.summary()","64b59163":"avg = Flatten()(vgg16.output)\nfc1 = Dense(256, activation='relu')(avg)\nfc = Dropout(0.5)(fc1)\nfc2 = Dense(1, activation='sigmoid')(fc)\n\nmodel = Model(inputs=vgg16.inputs, outputs=fc2)\nmodel.summary()","0a6716fe":"for i in model.layers:\n    print(i)","2df77bb4":"for i in range(15):\n    model.layers[i].trainable = False","7a24aac0":"model.compile(loss='binary_crossentropy', optimizer=Adam(lr=1e-5), metrics=['accuracy'])","10c06947":"hist = model.fit(X_train,y_train,shuffle=True, validation_split=0.1, batch_size=32, epochs=25,verbose=1)","3b8d05c7":"plt.figure(0)\nplt.plot(hist.history['acc'],'r')\nplt.plot(hist.history['val_acc'],'b')\n\nplt.figure(1)\nplt.plot(hist.history['loss'],'r')\nplt.plot(hist.history['val_loss'],'b')\n\nplt.show()","5f0996e3":"test_images_ids = []\ntest_images = []\nfor i in os.listdir(path + 'test\/test\/'):\n    img = image.load_img(path + 'test\/test\/' + i)\n    img = image.img_to_array(img)\n    test_images.append(img)\n    test_images_ids.append(i)","fd82e569":"X_test = np.asarray(test_images)\nX_test = X_test.astype('float32')\nX_test \/= 255","ac01ced4":"predictions = model.predict(X_test)","15bf6ed1":"predictions[:5]","ae53436f":"submit = pd.DataFrame(predictions, columns=['has_cactus'])","8f1b1817":"submit['id'] = test_images_ids\nsubmit['has_cactus'] = submit['has_cactus'].apply(lambda x: 1 if x > 0.75 else 0)\nsubmit.to_csv('submission.csv', index=False)","b0e5c494":"### Simple EDA","392421c5":"I am a beginner in Computer Vision. If there are any mistakes or improvements, please let me know.","e8e74877":"creating lists of images and labels.","16b061ee":"Rescaling the pixel values and converting to arrays.","b8dbb924":"Data is imbalanced, but as this is a playground competition, we can ignore this.","93311388":"###  Importing libraries and data","708f2170":"## References\n\n1. A simple yet wonderful kernel :  https:\/\/www.kaggle.com\/ateplyuk\/keras-transfer-vgg16\n2. How CNNs work : https:\/\/brohrer.github.io\/how_convolutional_neural_networks_work.html"}}