{"cell_type":{"8edb14a5":"code","54177482":"code","8ab35b66":"code","f4fc8a94":"code","1d402760":"code","2c362423":"code","22fb8f3a":"code","544c4023":"code","fffa655d":"code","5d85b6e3":"code","bd51d624":"code","ac8158f3":"code","5f2c72ed":"code","1b9c5115":"code","0961be01":"code","fcb39411":"code","074b0ba9":"code","04d4baf9":"code","b2275b4a":"code","42be9be4":"code","c1f8a374":"code","35fb6ac8":"code","a173b3a6":"code","a29bdc69":"code","6aabc58d":"code","7043a387":"code","4aa8d712":"code","0a3ccd1d":"code","b245db58":"code","c43daefd":"code","cf3af1fb":"code","386efe34":"code","19f522e3":"code","ee9d5058":"code","10607125":"code","52249810":"code","2b25a478":"code","10f68131":"code","5b13cea4":"code","396723ae":"code","03df3c85":"code","0973e2cf":"code","5682e882":"code","f168268d":"code","e6382895":"code","96c621fc":"code","c33bea4f":"code","c9cc965e":"code","6bb0b978":"code","de4c8d9c":"code","32bb3d7a":"code","3462b51c":"code","503be47c":"code","d4de956f":"code","64c751eb":"code","6858d099":"code","4c2b5c23":"code","5a487a5b":"code","9171645a":"code","d9eba979":"code","87058681":"code","438e6067":"code","e094d090":"code","2dd37467":"code","a25b5fea":"code","157c7300":"code","80221f71":"code","578655d4":"code","f799e56e":"code","5b7e1087":"code","ad2c0e54":"code","0689715c":"code","6493539e":"code","4f79115e":"code","c5e94c0d":"code","d7b5cae5":"code","d5ae4e29":"code","81215cc3":"code","5ee1da41":"code","a9f28107":"code","60b3ef51":"code","84998350":"code","96fcbb41":"code","727a5724":"code","3fcc2209":"code","39fcedad":"code","a43194e7":"code","ba64446a":"code","56136ab6":"code","e8f36ceb":"code","bda2e676":"code","cd669807":"code","6b5afad6":"code","7dcf3ad2":"code","d80ab13e":"code","2f5528f4":"code","567902af":"code","0f3dacf2":"code","077463f0":"code","a822003b":"code","f706695e":"code","4f79edc2":"code","32a524b5":"code","7bc8f05d":"code","35bd57c9":"code","63a8e571":"code","c5ce63ed":"code","f2cbd720":"code","75778db4":"code","a01147bc":"code","82341971":"code","4b8179c1":"code","fc24c30f":"code","71b3abef":"code","fb068603":"code","7b777bbe":"code","e5b85920":"code","c8778441":"code","1ee77808":"code","09ebe581":"code","4ae8f1e6":"code","672337a0":"code","9ab13c81":"markdown","13bb4f4d":"markdown","582ac92b":"markdown","e25a90f8":"markdown","64328a4e":"markdown","9f96f901":"markdown","d640c0bf":"markdown","8d46ab8b":"markdown","146f115f":"markdown","e7364bec":"markdown","e9840b71":"markdown","905e4294":"markdown","e972dd46":"markdown","8f9283e9":"markdown","71020561":"markdown","6ee34486":"markdown","3037904c":"markdown","fe094bd4":"markdown","d2516f0c":"markdown","fd2c9261":"markdown","84d65a79":"markdown","046aaf84":"markdown","acbfa516":"markdown","1a180fce":"markdown","4d2da956":"markdown","13dad21e":"markdown","7c167eac":"markdown","5f822ac0":"markdown","992a61ab":"markdown","524be711":"markdown","e9764d05":"markdown","78325a11":"markdown","3afa4a17":"markdown","5d87a6bd":"markdown","4fbad227":"markdown","d3d7f841":"markdown","9190d339":"markdown","e391ac10":"markdown","8fb78dfe":"markdown","67e86244":"markdown","273dea07":"markdown","e6def558":"markdown"},"source":{"8edb14a5":"import numpy as np\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n \nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\n\nfrom sklearn.preprocessing import StandardScaler \n\n# import various functions from sklearn \n\n\nfrom sklearn import metrics\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import accuracy_score\n\n# import function to perform feature selection\nfrom sklearn.feature_selection import RFE","54177482":"diabet = pd.read_csv('..\/input\/diabetes\/diabetic_data.csv')\ndiabet.head()\n","8ab35b66":"diabet = diabet.replace(\"?\",np.nan)\n\ndf = diabet.copy()","f4fc8a94":"#df = df.drop_duplicates(subset= ['patient_nbr'], keep = 'first')\n#df.shape","1d402760":"df['readmitted'].value_counts()","2c362423":"diabet['readmitted'].value_counts()","22fb8f3a":"df[df['readmitted'] == '<30']","544c4023":"len(diabet.select_dtypes('O').columns)","fffa655d":"diabet['readmitted'].value_counts()\/len(diabet)","5d85b6e3":"diabet.info()","bd51d624":"diabet.isnull().sum()[diabet.isnull().sum()>1]\/len(diabet)*100","ac8158f3":"diabet.drop(['weight','payer_code','medical_specialty'],axis=1,inplace=True)","5f2c72ed":" diabet['readmitted'].unique()","1b9c5115":"diabet.head()","0961be01":"diabet = diabet.replace({\"NO\":0,\n                         \"<30\":1,\n                         \">30\":0})\n\nprint(diabet.readmitted.value_counts())\n\nsns.countplot(x = \"readmitted\", data = diabet)\nplt.title(\"Distribution of Target Values\")\nplt.show()\n\n# Pie chart\ndiabet.readmitted.value_counts().plot.pie(autopct = \"%.1f%%\")\nplt.title(\"Proportion of Target Value\")\nplt.show()","fcb39411":"sns.countplot(x=diabet.race, data = diabet)\nplt.xticks(rotation=90)\nplt.title(\"Number of Race values\")\nplt.show()\n\nprint(\"Proportion of Race\")\nprint(diabet.race.value_counts(normalize = True)*100)","074b0ba9":"mapped_race = {\"Asian\":\"Other\",\"Hispanic\":\"Other\"}\ndiabet.race = diabet.race.replace(mapped_race)\n\nsns.countplot(x=\"race\", data = diabet)\nplt.title(\"Number of Race values\")\nplt.show()\n\nprint(\"Proportion of Race After the Mapping\")\nprint(diabet.race.value_counts(normalize= True)*100)","04d4baf9":"sns.countplot(x=\"race\", hue= \"readmitted\", data = diabet)\nplt.title(\"Readmitted - Race\")\nplt.show()","b2275b4a":"sns.catplot(x = \"race\", y = \"readmitted\",\n            data = diabet, kind = \"bar\", height= 5)\nplt.title(\"Readmitted Probability\")\nplt.show()","42be9be4":"sns.countplot(x = \"gender\", data = diabet)\nplt.title(\"Distribution of Number of Gender\")\nplt.show()\n\nprint(\"Proportions of Race Value\")\nprint(diabet.gender.value_counts(normalize = True))","c1f8a374":"diabet = diabet.drop(diabet.loc[diabet[\"gender\"]==\"Unknown\/Invalid\"].index, axis=0)\n\nsns.countplot(x = \"gender\", data = diabet)\nplt.title(\"Distribution of Number of Gender After Dropping\")\nplt.show()\n\nsns.countplot(x = \"gender\", hue = \"readmitted\", data = diabet)\nplt.title(\"Gender - Readmitted\")\nplt.show()","35fb6ac8":"g = sns.catplot(x = \"gender\",y = \"readmitted\", \n                data = diabet, kind = \"bar\", height= 5)\ng.set_ylabels(\"Readmitted Probability\")\nplt.show()","a173b3a6":"sns.countplot(x=\"age\", data = diabet)\nplt.xticks(rotation = 90)\nplt.show()","a29bdc69":"diabet.age = diabet.age.replace({\"[70-80)\":75,\n                         \"[60-70)\":65,\n                         \"[50-60)\":55,\n                         \"[80-90)\":85,\n                         \"[40-50)\":45,\n                         \"[30-40)\":35,\n                         \"[90-100)\":95,\n                         \"[20-30)\":25,\n                         \"[10-20)\":15,\n                         \"[0-10)\":5})\n\nsns.countplot(x=\"age\", data = diabet)\n#plt.xticks(rotation = 90)\nplt.show()","6aabc58d":"g = sns.catplot(x = \"age\", y = \"readmitted\", data = diabet, \n                   kind = \"bar\", height = 5)\ng.set_ylabels(\"Readmitted Probability\")\nplt.show()","7043a387":"sns.countplot(x = \"admission_type_id\", data = diabet)\nplt.title(\"Distribution of Admission IDs\")\nplt.show()\n\nprint(\"Distribution of ID's\")\nprint(diabet.admission_type_id.value_counts())","4aa8d712":"mapped = {1.0:\"Emergency\",\n          2.0:\"Emergency\",\n          3.0:\"Elective\",\n          4.0:\"New Born\",\n          5.0:np.nan,\n          6.0:np.nan,\n          7.0:\"Trauma Center\",\n          8.0:np.nan}\n\ndiabet.admission_type_id = diabet.admission_type_id.replace(mapped)\n\nsns.countplot(x = \"admission_type_id\", data = diabet)\nplt.title(\"-Distribution of Admission IDs-\")\nplt.show()\n\nprint(\"-Distribution of ID's-\")\nprint(diabet.admission_type_id.value_counts())","0a3ccd1d":"g = sns.catplot(x = \"admission_type_id\", y =\"readmitted\", \n                    data = diabet, height = 6, kind = \"bar\")\ng.set_ylabels(\"Readmitted Probability\")\nplt.show()","b245db58":"sns.countplot(x =\"discharge_disposition_id\", data = diabet)\nplt.show()","c43daefd":"diabet['discharge_disposition_id'].unique()","cf3af1fb":"mapped_discharge = {1:\"Discharged to Home\",\n                    6:\"Discharged to Home\",\n                    8:\"Discharged to Home\",\n                    13:\"Discharged to Home\",\n                    19:\"Discharged to Home\",\n                    18:np.nan,25:np.nan,26:np.nan,\n                    2:\"Other\",3:\"Other\",4:\"Other\",\n                    5:\"Other\",7:\"Other\",9:\"Other\",\n                    10:\"Other\",11:\"Other\",12:\"Other\",\n                    14:\"Other\",15:\"Other\",16:\"Other\",\n                    17:\"Other\",20:\"Other\",21:\"Other\",\n                    22:\"Other\",23:\"Other\",24:\"Other\",\n                    27:\"Other\",28:\"Other\",29:\"Other\",30:\"Other\"}\n\ndiabet[\"discharge_disposition_id\"] = diabet[\"discharge_disposition_id\"].replace(mapped_discharge)","386efe34":"diabet['discharge_disposition_id'].unique()","19f522e3":"sns.countplot(x =\"discharge_disposition_id\", data = diabet)\nplt.show()\n\nsns.countplot(x =\"discharge_disposition_id\", hue = \"readmitted\", data = diabet)\nplt.show()\n\nprint(\"Proportions of ID's\")\nprint(diabet.discharge_disposition_id.value_counts())","ee9d5058":"g = sns.catplot(x = \"discharge_disposition_id\", y=\"readmitted\", \n                data = diabet, height = 5, kind =\"bar\")\ng.set_ylabels(\"Probability of Readmitted\")\nplt.show()","10607125":"sns.countplot(x =\"admission_source_id\", data = diabet)\nplt.show()","52249810":"mapped_adm = {1:\"Referral\",2:\"Referral\",3:\"Referral\",\n              4:\"Other\",5:\"Other\",6:\"Other\",10:\"Other\",22:\"Other\",25:\"Other\",\n              9:\"Other\",8:\"Other\",14:\"Other\",13:\"Other\",11:\"Other\",\n              15:np.nan,17:np.nan,20:np.nan,21:np.nan,\n              7:\"Emergency\"}\ndiabet.admission_source_id = diabet.admission_source_id.replace(mapped_adm)\n\nsns.countplot(x = \"admission_source_id\", data = diabet)\nplt.show()\n\nsns.countplot(x = \"admission_source_id\", hue = \"readmitted\", data = diabet)\nplt.title(\"Admission Source - Readmitted\")\nplt.show()\n\n\nprint(diabet.admission_source_id.value_counts())","2b25a478":"g = sns.catplot(x = \"admission_source_id\", y =\"readmitted\", \n                    data = diabet, kind = \"bar\", height= 5)\ng.set_ylabels(\"Probability of Readmission\")\nplt.show()","10f68131":"sns.countplot(x=\"time_in_hospital\", data = diabet,\n              order = diabet.time_in_hospital.value_counts().index)\nplt.show()\n\nprint(diabet.time_in_hospital.value_counts())\n","5b13cea4":"fig = plt.figure(figsize=(10,5))\n\n#readmitted = 0\nax = sns.kdeplot(diabet.loc[(diabet.readmitted == 0), \"time_in_hospital\"],\n                 color = \"b\", shade = True, label = \"Not Readmitted\")\n\nax = sns.kdeplot(diabet.loc[(diabet.readmitted == 1), \"time_in_hospital\"],\n                 color = \"r\", shade = True, label = \"Readmitted\")\nax.legend(loc=\"upper right\")\n\nax.set_xlabel(\"Time in Hospital\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Time in Hospital - Readmission\")\nplt.show()","396723ae":"plt.figure(figsize=(20,13))\nsns.countplot(x = \"num_lab_procedures\", data = diabet)\nplt.show()\n\nprint(\"Proportions of Column\")\nprint(diabet.num_lab_procedures.value_counts().head(10))","03df3c85":"fig = plt.figure(figsize=(10,5))\n\n#readmitted = 0\nax = sns.kdeplot(diabet.loc[(diabet.readmitted == 0), \"num_lab_procedures\"],\n                 color = \"b\", shade = True,label = \"Not Readmitted\")\n\n#readmitted = 1\nax = sns.kdeplot(diabet.loc[(diabet.readmitted == 1), \"num_lab_procedures\"],\n                 color = \"r\", shade = True, label = \"Readmitted\")\n\nax.legend(loc=\"upper right\")\n\nax.set_xlabel(\"Number of Lab Procedures\")\nax.set_ylabel(\"Frequency\")\nax.set_title(\"Number of Lab Procedures - Readmission\")\n\nplt.show()","0973e2cf":"sns.countplot(x = diabet.num_procedures, order = diabet.num_procedures.value_counts().index)\nplt.title(\"Distribution of Number of Procedures\")\nplt.show()\n\nprint(\"Proportions of Values\")\nprint(diabet.num_procedures.value_counts(normalize=True)*100)\n","5682e882":"sns.countplot(x = \"num_procedures\", hue = \"readmitted\", \n              data = diabet, order = diabet.num_procedures.value_counts().index)\nplt.show()","f168268d":"sns.catplot(x = \"num_procedures\", y = \"readmitted\",\n               data = diabet, kind = \"bar\", height = 5)\nplt.title(\"Readmission Probability\")\nplt.show()","e6382895":"plt.figure(figsize=(20,14))\nsns.countplot(x=\"num_medications\", data = diabet, \n        order = diabet.num_medications.value_counts().index)\nplt.title(\"Distribution of Number of Medications\")\nplt.show()\n\nprint(diabet.num_medications.value_counts())","96c621fc":"def map_diagnosis(data, cols):\n    for col in cols:\n        data.loc[(data[col].str.contains(\"V\")) | (data[col].str.contains(\"E\")), col] = -1\n        data[col] = data[col].astype(np.float16)\n\n    for col in cols:\n        data[\"temp_diag\"] = np.nan\n        data.loc[(data[col]>=390) & (data[col]<=459) | (data[col]==785), \"temp_diag\"] = \"Circulatory\"\n        data.loc[(data[col]>=460) & (data[col]<=519) | (data[col]==786), \"temp_diag\"] = \"Respiratory\"\n        data.loc[(data[col]>=520) & (data[col]<=579) | (data[col]==787), \"temp_diag\"] = \"Digestive\"\n        data.loc[(data[col]>=250) & (data[col]<251), \"temp_diag\"] = \"Diabetes\"\n        data.loc[(data[col]>=800) & (data[col]<=999), \"temp_diag\"] = \"Injury\"\n        data.loc[(data[col]>=710) & (data[col]<=739), \"temp_diag\"] = \"Muscoloskeletal\"\n        data.loc[(data[col]>=580) & (data[col]<=629) | (data[col] == 788), \"temp_diag\"] = \"Genitourinary\"\n        data.loc[(data[col]>=140) & (data[col]<=239), \"temp_diag\"] = \"Neoplasms\"\n\n        data[\"temp_diag\"] = data[\"temp_diag\"].fillna(\"Other\")\n        data[col] = data[\"temp_diag\"]\n        data = data.drop(\"temp_diag\", axis=1)\n\n    return data","c33bea4f":"diabet = map_diagnosis(diabet,[\"diag_1\",\"diag_2\",\"diag_3\"])","c9cc965e":"def plot_diags(col,data):\n    sns.countplot(x = col, data = data,\n            order = data[f\"{col}\"].value_counts().index)\n    plt.xticks(rotation = 90)\n    plt.title(col)\n    plt.show()\n\ndiag_cols = [\"diag_1\",\"diag_2\",\"diag_3\"]\n\nfor diag in diag_cols:\n    plot_diags(diag,diabet)\n","6bb0b978":"drug_cols = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide',\n             'glimepiride', 'acetohexamide', 'glipizide', 'glyburide', 'tolbutamide',\n             'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'troglitazone',\n             'tolazamide', 'insulin', 'glyburide-metformin', 'glipizide-metformin', \n             'metformin-rosiglitazone', 'metformin-pioglitazone']\n\ndef explore_drug(drugs):\n\n  for drug in drugs:\n    sns.countplot(x = drug, \n                  hue = \"readmitted\",\n                  data = diabet)\n    plt.show()\n    print(drug.upper())\n    print(diabet[f\"{drug}\"].value_counts())\n    \n\nexplore_drug(drug_cols)","de4c8d9c":"diabet.change.value_counts()","32bb3d7a":"diabet.change = diabet.change.replace(\"Ch\",\"Yes\")\n\nsns.countplot(x = \"change\", data = diabet)\nplt.title(\"Proportions of Change Values\")\nplt.show()\n\nsns.countplot(x = \"change\", hue = \"readmitted\", data = diabet)\nplt.show()\n","3462b51c":"g = sns.catplot(x = \"change\", y=\"readmitted\", data = diabet, height = 6, kind =\"bar\")\ng.set_ylabels(\"Probability of Readmitted\")\nplt.show()                                                                                ","503be47c":"diabet[\"max_glu_serum\"] = diabet[\"max_glu_serum\"].replace({\">200\":2,\n                                                        \">300\":2,\n                                                        \"Norm\":1,\n                                                        \"None\":0}) \n\nsns.countplot(x = \"max_glu_serum\", data = diabet)\nplt.show()\n\nsns.countplot(x = \"max_glu_serum\",hue = \"readmitted\", data = diabet)\nplt.show()\n\nprint(diabet.max_glu_serum.value_counts())","d4de956f":"diabet[\"A1Cresult\"] = diabet[\"A1Cresult\"].replace({\">7\":2,\n                                           \">8\":2,\n                                           \"Norm\":1,\n                                           \"None\":0})\n\nsns.countplot(x = \"A1Cresult\", data = diabet)\nplt.show()\n\nsns.countplot(x = \"A1Cresult\",hue = \"readmitted\", data = diabet)\nplt.show()\n\nprint(diabet.A1Cresult.value_counts())","64c751eb":"sns.countplot(x = \"diabetesMed\", data = diabet )\nplt.title(\"Proportions of Change Values\")\nplt.show()\n\nsns.countplot(x = \"diabetesMed\", hue = \"readmitted\", data = diabet)\nplt.show()\n\nprint(diabet.diabetesMed.value_counts())","6858d099":"g = sns.catplot(x = \"diabetesMed\", y=\"readmitted\", \n            data = diabet, height = 6, kind =\"bar\")\ng.set_ylabels(\"Probability of Readmitted\")\nplt.show()","4c2b5c23":"diabet.isnull().sum()","5a487a5b":"#from google.colab import files\n\n#diabet.to_csv('submit.csv',index=0)\n\n#files.download('submit.csv')","9171645a":" diabet['race'] = diabet['race'].fillna(diabet['race'].mode()[0])","d9eba979":"diabet['admission_type_id'] = diabet['admission_type_id'].fillna(diabet['admission_type_id'].mode()[0])","87058681":"diabet['discharge_disposition_id'] = diabet['discharge_disposition_id'].fillna(diabet['discharge_disposition_id'].mode()[0])","438e6067":"diabet['admission_source_id'] = diabet['admission_source_id'].fillna(diabet['admission_source_id'].mode()[0])","e094d090":"diabet.head()","2dd37467":"plt.figure(figsize=(13,10))\nsns.heatmap(diabet.corr(),annot=True)","a25b5fea":"#b\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nX = diabet.select_dtypes(np.number)\nvif = [variance_inflation_factor(X.values,i) for i in range(len(X.columns))]\nz = pd.DataFrame({'names':X.columns,'vif':vif})  # we can ingnore constant as we know it just a constant we have provided\nz","157c7300":"cat_data = diabet.select_dtypes('O')\n\nnum_data = diabet.select_dtypes(np.number)\n\ncat_data","80221f71":"cat_data = pd.get_dummies(cat_data,drop_first= True)\ncat_data.shape","578655d4":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor i in cat_data:\n    cat_data[i] = le.fit_transform(cat_data[i])","f799e56e":"data = pd.concat([num_data,cat_data],axis=1)\ndata.head()","5b7e1087":"data.drop(['encounter_id','patient_nbr'],axis=1,inplace=True)","ad2c0e54":"data.head()","0689715c":"X = data.drop('readmitted',axis=1)\n\ny = data['readmitted']","6493539e":"import statsmodels.api as sm\n\nXc = sm.add_constant(X)\n\nmodel = sm.Logit(y,Xc.iloc[:,0:25]).fit()\n","4f79115e":"model.summary()","c5e94c0d":"#modelling now\nimport statsmodels.api as sm\n\nfrom sklearn.preprocessing import StandardScaler ","d7b5cae5":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.1,random_state=1)","d5ae4e29":"SC = StandardScaler()\n\nX_train_scaled = pd.DataFrame(SC.fit_transform(X_train),columns=X_train.columns)\nX_test_scaled = pd.DataFrame(SC.transform(X_test),columns=X_test.columns)","81215cc3":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","5ee1da41":"LR = LogisticRegression()\n\nLR.fit(X_train_scaled,y_train)","a9f28107":"LR.score(X_train_scaled,y_train)\n","60b3ef51":"LR.score(X_test_scaled,y_test)","84998350":"y_pred = LR.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","96fcbb41":"# define a to plot a confusion matrix for the model\n\n    \n    # predict the target values using X_test\n\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\nplt.figure(figsize=(9,7))\ncm = confusion_matrix(y_test, y_pred)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap =['lightskyblue'], cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\nplt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\nplt.yticks(fontsize = 20)\n\n\n    # display the plot\nplt.show()\n  ","727a5724":"RF = RandomForestClassifier()\n\nRF.fit(X_train_scaled,y_train)","3fcc2209":"RF.score(X_train_scaled,y_train)","39fcedad":"RF.score(X_test_scaled,y_test)","a43194e7":"y_pred = RF.predict(X_test)\n\n","ba64446a":"confusion_matrix(y_test,y_pred)","56136ab6":"accuracy_score(y_test,y_pred)","e8f36ceb":"plt.figure(figsize=(12,24))\nsns.barplot(sorted(RF.feature_importances_),X_train.columns);","bda2e676":"z = pd.DataFrame([RF.feature_importances_,X_train.columns]).T","cd669807":"z.columns = ['Feature','importance']\nplt.figure(figsize=(13,12))\n\nsns.barplot(y=z['Feature'],x=z['importance'])","6b5afad6":"diabet.head()","7dcf3ad2":"X.head()","d80ab13e":"important_features = pd.DataFrame({'Features': X_train.columns, \n                                   'Importance': RF.feature_importances_})\n\n# sort the dataframe in the descending order according to the feature importance\nimportant_features = important_features.sort_values('Importance', ascending = False)\n\n# create a barplot to visualize the features based on their importance\nplt.figure(figsize=(12,24))\nsns.barplot(x = 'Importance', y = 'Features', data = important_features)\n\n# add plot and axes labels\n# set text size using 'fontsize'\nplt.title('Feature Importance', fontsize = 15)\nplt.xlabel('Importance', fontsize = 15)\nplt.ylabel('Features', fontsize = 15)\n\n# display the plot\nplt.show()","2f5528f4":"# define a to plot a confusion matrix for the model\ndef plot_confusion_matrix(model, test_data):\n    \n    # predict the target values using X_test\n    y_pred = model.predict(test_data)\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\n    cm = confusion_matrix(y_test, y_pred)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\n    conf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \n    sns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = ListedColormap(['lightskyblue']), cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\n    plt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\n    plt.yticks(fontsize = 20)\n\n\n    # display the plot\n    plt.show()\n  ","567902af":"# define a to plot a confusion matrix for the model\n\n    \n    # predict the target values using X_test\n\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\nplt.figure(figsize=(12,8))\ncm = confusion_matrix(y_test, y_pred)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap =['lightskyblue'], cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\nplt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\nplt.yticks(fontsize = 20)\n\n\n    # display the plot\nplt.show()\n  ","0f3dacf2":"# define a function to plot the ROC curve and print the ROC-AUC score\ndef plot_roc(model, test_data):\n    \n    # predict the probability of target variable using X_test\n    # consider the probability of positive class by subsetting with '[:,1]'\n    y_pred_prob = model.predict_proba(test_data)[:,1]\n    \n    # the roc_curve() returns the values for false positive rate, true positive rate and threshold\n    # pass the actual target values and predicted probabilities to the function\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n    # plot the ROC curve\n    plt.plot(fpr, tpr)\n\n    # set limits for x and y axes\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.0])\n\n    # plot the straight line showing worst prediction for the model\n    plt.plot([0, 1], [0, 1],'r--')\n\n    # add plot and axes labels\n    # set text size using 'fontsize'\n    plt.title('ROC curve for Cancer Prediction Classifier', fontsize = 15)\n    plt.xlabel('False positive rate (1-Specificity)', fontsize = 15)\n    plt.ylabel('True positive rate (Sensitivity)', fontsize = 15)\n\n    # add the AUC score to the plot\n    # 'x' and 'y' gives position of the text\n    # 's' is the text \n    # use round() to round-off the AUC score upto 4 digits\n    plt.text(x = 0.02, y = 0.9, s = ('AUC Score:',round(roc_auc_score(y_test, y_pred_prob),4)))\n\n    # plot the grid\n    plt.grid(True)","077463f0":"from sklearn.model_selection import GridSearchCV\nparams = {'criterion':['gini','entropy'],\n          'max_depth':[5,7,8,9,10],\n         'random_state':[1,2,3,4,],\n       'learning_rate': [0.045,0.034,0.012,0.034,0.0023],\n        'n_estimators': [20000,50000,23000,133400,43560,54643],\n        'max_bin': [94,75,34,56,23,66,67,13,67,123,89],\n        'num_leaves': [10,6,7,8,9,11,12,34,45,21,34],\n        'max_depth': [27, 12,15,16,17,14,21,31,24,25],\n        'reg_alpha': [8.457, 9.945,6.57,7.436,9.8765,10.23],\n        'reg_lambda': [6.853,4.5,6.68,10.35,8.346,9.35],\n        'subsample':[ 0.749,0.436,0.235,0.346,0.264,0.8568]\n         }        \n         \n\n","a822003b":"        \n\nmodel= LGBMClassifier()\ngrid = GridSearchCV(estimator=model,param_grid=params)\ngrid.fit(X,y)","f706695e":"grid.best_params_","4f79edc2":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\ndef cross_val(X, y, model, params, folds=9):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=21)\n    for fold, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**params)\n        alg.fit(x_train, y_train,\n                eval_set=[(x_test, y_test)],\n                early_stopping_rounds=100,\n                verbose=400)\n\n        pred = alg.predict_proba(x_test)[:, 1]\n        roc_score = roc_auc_score(y_test, pred)\n        print(f\"roc_auc_score: {roc_score}\")\n        print(\"-\"*50)\n    \n    return alg\n\n\nlgb_params= {'learning_rate': 0.045, \n             'n_estimators': 20000, \n             'max_bin': 94,\n             'num_leaves': 10, \n             'max_depth': 27, \n             'reg_alpha': 8.457, \n             'reg_lambda': 6.853, \n             'subsample': 0.749}\n\nfrom lightgbm import LGBMClassifier\nlgb_model = cross_val(X, y, LGBMClassifier, lgb_params)","32a524b5":"import imblearn\n\nfrom imblearn.over_sampling import SMOTE\n","7bc8f05d":"oversample = SMOTE()\n\nX,y = oversample.fit_resample(X,y)","35bd57c9":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.1,random_state=121)","63a8e571":"LR = LogisticRegression()\n\nLR.fit(X_train,y_train)\n\ny_pred_LR = LR.predict(X_test)\n\nprint(classification_report(y_test,y_pred))","c5ce63ed":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier()\n\ndt.fit(X_train,y_train)\n\ny_pred_dt = dt.predict(X_test)\n\nprint(classification_report(y_test,y_pred_dt))","f2cbd720":"RF = RandomForestClassifier()\n\nRF.fit(X_train,y_train)","75778db4":"RF.score(X_train,y_train),RF.score(X_test,y_test)","a01147bc":"y_pred_RF = RF.predict(X_test)\nprint(classification_report(y_test,y_pred))","82341971":"from xgboost import XGBClassifier\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)\n","4b8179c1":"y_pred = model.predict(X_test)","fc24c30f":"y_pred = model.predict(X_test)\nprint(classification_report(y_test,y_pred))","71b3abef":"from sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\ndef cross_val(X, y, model, params, folds=9):\n\n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=21)\n    for fold, (train_idx, test_idx) in enumerate(skf.split(X, y)):\n        print(f\"Fold: {fold}\")\n        x_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n        x_test, y_test = X.iloc[test_idx], y.iloc[test_idx]\n\n        alg = model(**params)\n        alg.fit(x_train, y_train,\n                eval_set=[(x_test, y_test)],\n                early_stopping_rounds=100,\n                verbose=400)\n\n        pred = alg.predict_proba(x_test)[:, 1]\n        roc_score = roc_auc_score(y_test, pred)\n        print(f\"roc_auc_score: {roc_score}\")\n        print(\"-\"*50)\n    \n    return alg\n\n\nlgb_params= {'learning_rate': 0.045, \n             'n_estimators': 20000, \n             'max_bin': 94,\n             'num_leaves': 10, \n             'max_depth': 27, \n             'reg_alpha': 8.457, \n             'reg_lambda': 6.853, \n             'subsample': 0.749}\n\nfrom lightgbm import LGBMClassifier\nlgb_model = cross_val(X, y, LGBMClassifier, lgb_params)","fb068603":"lgb_model.score(X_test,y_test),lgb_model.score(X_train,y_train)","7b777bbe":"y_pred_lgb = lgb_model.predict(X_test)\nfrom sklearn.metrics import f1_score","e5b85920":"print(classification_report(y_test,y_pred))","c8778441":"from sklearn.ensemble import GradientBoostingClassifier,AdaBoostClassifier\ngbc = GradientBoostingClassifier()\ngbc.fit(X_train,y_train)\ny_pred_gbc = gbc.predict(X_test)\nprint(classification_report(y_test,y_pred))","1ee77808":"abc = AdaBoostClassifier()\nabc.fit(X_train,y_train)\ny_pred_ada = abc.predict(X_test)\nprint(classification_report(y_test,y_pred))","09ebe581":"# define a to plot a confusion matrix for the model\n\n    \n    # predict the target values using X_test\n\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\nplt.figure(figsize=(9,7))\ncm = confusion_matrix(y_test, y_pred_dt)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap =['lightskyblue'], cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\nplt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\nplt.yticks(fontsize = 20)\n\n\n    # display the plot\nplt.show()\n  ","4ae8f1e6":"# define a to plot a confusion matrix for the model\n\n    \n    # predict the target values using X_test\n\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\nplt.figure(figsize=(9,7))\ncm = confusion_matrix(y_test, y_pred_LR)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\nconf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \nsns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap =['lightskyblue'], cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\nplt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\nplt.yticks(fontsize = 20)\n\n\n    # display the plot\nplt.show()\n  ","672337a0":"lis = [y_pred_ada,y_pred_RF,y_pred_gbc,y_pred_dt,y_pred_lgb,y_pred_LR]\n\nfor i in lis:\n    \n    \n    # define a to plot a confusion matrix for the model\n\n    \n    # predict the target values using X_test\n\n    \n    # create a confusion matrix\n    # pass the actual and predicted target values to the confusion_matrix()\n    plt.figure(figsize=(9,7))\n    cm = confusion_matrix(y_test,i)\n\n    # label the confusion matrix  \n    # pass the matrix as 'data'\n    # pass the required column names to the parameter, 'columns'\n    # pass the required row names to the parameter, 'index'\n    conf_matrix = pd.DataFrame(data = cm,columns = ['Predicted:0','Predicted:1'], index = ['Actual:0','Actual:1'])\n\n    # plot a heatmap to visualize the confusion matrix\n    # 'annot' prints the value of each grid \n    # 'fmt = d' returns the integer value in each grid\n    # 'cmap' assigns color to each grid\n    # as we do not require different colors for each grid in the heatmap,\n    # use 'ListedColormap' to assign the specified color to the grid\n    # 'cbar = False' will not return the color bar to the right side of the heatmap\n    # 'linewidths' assigns the width to the line that divides each grid\n    # 'annot_kws = {'size':25})' assigns the font size of the annotated text \n    sns.heatmap(conf_matrix, annot = True, fmt = 'd', cmap =['lightskyblue'], cbar = False, \n                linewidths = 0.1, annot_kws = {'size':25})\n\n    # set the font size of x-axis ticks using 'fontsize'\n    plt.xticks(fontsize = 20)\n\n    # set the font size of y-axis ticks using 'fontsize'\n    plt.yticks(fontsize = 20)\n\n\n    # display the plot\n    plt.show()\n  ","9ab13c81":"### **Race**\nWe have 5 different races value, these are;\n- Caucasian          \n- AfricanAmerican    \n- Hispanic            \n- Asian\n- Other ","13bb4f4d":"### **Admission Type ID**\nInteger identifier corresponding to 9 distinct values;\n- **Emergency**        : 1\n- **Urgent**           : 2\n- **Elective**         : 3\n- **Newborn**          : 4\n- **Not Available**    : 5\n- **NULL**             : 6\n- **Trauma Center**    : 7\n- **Not Mapped**       : 8\n\n","582ac92b":"### **Admission Source ID**\n\nInteger identifier corresponding to 21 distinct values.For example, **physician referral, emergency room, and transfer from a hospital**\n","e25a90f8":"### heatmap","64328a4e":"- We see a nearly equal distribution of **Gender**.\n- Also, we can state that **Females** are a little more prone than **Males**.","9f96f901":"## **Change**\nIndicates if there was a change in diabetic medications (either dosage or generic\nname). Values: \n- **\u201cchange\u201d** \n- **\u201cno change\u201d**","d640c0bf":"### **Gender**","8d46ab8b":"In here we need to do mapping for :\n- **NULL**, **Not Available** and **Not Mapped** values.\n- In addition, we will map **Urgent** value as **Emergency** because they have same meaning","146f115f":"# Splitting the dependent and independent variable","e7364bec":"When we look the graph, we can see too much values. Getting rid of that situation,\n we applied this rules: \n- If any one includes **\"home\"** word I will grouping into one\n- If not, it will be as **OTHER**\n- NAN = 18, 25, 26","e9840b71":"### **Diag1, Diag2 and Diag3**\n- In diag section there are lots of ID that belong the specific name. So we'll map them","905e4294":"- we can understand that we have an **elderly population.**","e972dd46":"- Most of the patients are **Caucasian**, followed by **African Americans**.\n- Although the **Other** values are few than **Caucasian**, \nwe see that the **Readmitted Probability** almost close to **Caucasian**.","8f9283e9":"- Now it will be more clear and readable","71020561":"# Splitting into train and test","6ee34486":"### **Discharge Disposition ID**\n-Integer identifier corresponding to 29 distinct values. For example, discharged to home, expired, and not available","3037904c":"# decision tree","fe094bd4":"### **Readmitted**\nThis column our target feature. It is about **\"days to inpatient readmission\"**\n* If the patient was readmitted in less than 30 days **\"<30\"**\n* if the patient was readmitted in more than 30 days **\">30\"**\n* If there is no record **\"NO\"**\n\nWe decided to reduce these values to two and map them according to the following rule;\n* NO -> 0 <30 \n*  >30 -> 1","d2516f0c":"- As we see, there is **Caucasians** in 73 percent of all our data. \nAnd other other 22 percent is divided into **African Americans**, **Hispanics**, **Asians** and **Others**.<br>\n- Here we decided to divide into 3 groups like **Caucasian**, **African American** and **Other**.","fd2c9261":"- When we looked up **Gender** values, there is only one entry for **Unknown\/Invalid**. So we dropped them","84d65a79":"## **Diabetes medications**\nIndicates if there was any diabetic medication prescribed. Values: **\u201cyes\u201d** and **\u201cno\u201d**","046aaf84":"# Data Set Description\n\n\n* **Encounter ID**\tUnique identifier of an encounter\n* **Patient number**\tUnique identifier of a patient\n* **Race**\tValues: Caucasian, Asian, African American, Hispanic, and other\n* **Gender**\tValues: male, female, and unknown\/invalid\n* **Age**\tGrouped in 10-year intervals: 0, 10), 10, 20), \u2026, 90, 100)\n* **Weight**\tWeight in pounds\n* **Admission type**\tInteger identifier corresponding to 9 distinct values, for example, emergency, urgent, elective, newborn, and not available\n* **Discharge disposition**\tInteger identifier corresponding to 29 distinct values, for example, discharged to home, expired, and not available\n* **Admission source**\tInteger identifier corresponding to 21 distinct values, for example, physician referral, emergency room, and transfer from a hospital\n* **Time in hospital**\tInteger number of days between admission and discharge\n* **Payer code**\tInteger identifier corresponding to 23 distinct values, for example, Blue Cross\/Blue Shield, Medicare, and self-pay Medical\n* **Medical specialty**\tInteger identifier of a specialty of the admitting physician, corresponding to 84 distinct values, for example, cardiology, internal medicine, family\/general practice, and surgeon\n* **Number of lab procedures**\tNumber of lab tests performed during the encounter\n* **Number of procedures** Numeric\tNumber of procedures (other than lab tests) performed during the encounter\n* **Number of medications**\tNumber of distinct generic names administered during the encounter\n* **Number of outpatient visits** Number of outpatient visits of the patient in the year preceding the encounter\n* **Number of emergency visits**\tNumber of emergency visits of the patient in the year preceding the encounter\n* **Number of inpatient visits**\tNumber of inpatient visits of the patient in the year preceding the encounter\n* **Diagnosis 1**\tThe primary diagnosis (coded as first three digits of ICD9); 848 distinct values\n* **Diagnosis 2**\tSecondary diagnosis (coded as first three digits of ICD9); 923 distinct values\n* **Diagnosis 3** Additional secondary diagnosis (coded as first three digits of ICD9); 954 distinct values\n* **Number of diagnoses**\tNumber of diagnoses entered to the system 0%\n* **Glucose serum test result**\tIndicates the range of the result or if the test was not taken. Values: \u201c>200,\u201d \u201c>300,\u201d \u201cnormal,\u201d and \u201cnone\u201d if not measured\n* **A1c test result**\tIndicates the range of the result or if the test was not taken. Values: \u201c>8\u201d if the result was greater than 8%, \u201c>7\u201d if the result was greater than 7% but less than 8%, \u201cnormal\u201d if the result was less than 7%, and \u201cnone\u201d if not measured.\n* **Change of medications**\tIndicates if there was a change in diabetic medications (either dosage or generic name). Values: \u201cchange\u201d and \u201cno change\u201d\n* **Diabetes medications**\tIndicates if there was any diabetic medication prescribed. Values: \u201cyes\u201d and \u201cno\u201d\n* 24 features for medications\tFor the generic names: **metformin, repaglinide, nateglinide, chlorpropamide, glimepiride, acetohexamide, glipizide, glyburide, tolbutamide, pioglitazone, rosiglitazone, acarbose, miglitol, troglitazone, tolazamide, examide, sitagliptin, insulin, glyburide-metformin, glipizide-metformin, glimepiride- pioglitazone, metformin-rosiglitazone, and metformin- pioglitazone**, the feature indicates whether the drug was prescribed or there was a change in the dosage. Values: \u201cup\u201d if the dosage was increased during the encounter, \u201cdown\u201d if the dosage was decreased, \u201csteady\u201d if the dosage did not change, and \u201cno\u201d if the drug was not prescribed\n* **Readmitted**\tDays to inpatient readmission. Values: \u201c<30\u201d if the patient was readmitted in less than 30 days, \u201c>30\u201d if the patient was readmitted in more than 30 days, and \u201cNo\u201d for no record of readmission\n\n\n\n\n\n\n\n\n","acbfa516":"### **Weight**","1a180fce":"## **Diabetes medications**\n\n- There was too many medications that belong the diabet. And some of them has just one or two value that does not any impact the model. So we decided to drop them.\n- But firstly, lets look at the medications","4d2da956":"We can see that there is same problem here. Again we applied some map like:\n\n- we'll put the similar ones together like **Referral or Transfer**\n- we will replace **Null, Not Mapped, Unknown** values as NAN\n","13dad21e":"# Dropping the duplicates entries\n","7c167eac":"\n\n\n\n\n# **Exploratory Data Analysis and Visualizations**","5f822ac0":"- Most of people stayed 2 - 3 days in hospital\n","992a61ab":"## **Number of Medications**\nNumber of distinct generic names administered during the encounter","524be711":"# Data Dictionary\n\n# admission_type_id\tDescription\n1.\tEmergency\n2.\tUrgent\t\n3.\tElective\t\n4.\tNewborn\t\n5.\tNot Available\n6.\tNULL\t\n7.\tTrauma Center\n8.\tNot Mapped\n\t\t\n# discharge_disposition_id\tDescription\n1.\tDischarged to home\n2.\tDischarged\/transferred to another short term hospital\n3.\tDischarged\/transferred to SNF\n4.\tDischarged\/transferred to ICF\n5. Discharged\/transferred to another type of inpatient care institution\n6.\tDischarged\/transferred to home with home health service\n7.\tLeft AMA\t\n8.\tDischarged\/transferred to home under care of Home IV provider\n9.\tAdmitted as an inpatient to this hospital\n10.\tNeonate discharged to another hospital for neonatal aftercare\n11.\tExpired\t\n12.\tStill patient or expected to return for outpatient services\n13.\tHospice \/ home\n14.\tHospice \/ medical facility\n15.\tDischarged\/transferred within this institution to Medicare approved swing bed\n16.\tDischarged\/transferred\/referred another institution for outpatient services\n17.\tDischarged\/transferred\/referred to this institution for outpatient services\n18.\tNULL\t\n19.\tExpired at home. Medicaid only, hospice.\n20.\tExpired in a medical facility. Medicaid only, hospice.\n21.\tExpired, place unknown. Medicaid only, hospice.\n22.\tDischarged\/transferred to another rehab fac including rehab units of a hospital .\n23.\tDischarged\/transferred to a long term care hospital.\n24.\tDischarged\/transferred to a nursing facility certified under Medicaid but not certified under Medicare.\n25.\tNot Mapped\n26.\tUnknown\/Invalid\n30.\tDischarged\/transferred to another Type of Health Care Institution not Defined Elsewhere\n27.\tDischarged\/transferred to a federal health care facility.\n28.\tDischarged\/transferred\/referred to a psychiatric hospital of psychiatric distinct part unit of a hospital\n29.\tDischarged\/transferred to a Critical Access Hospital (CAH).\n\t\t\n# admission_source_id\tDescription\n1.\t Physician Referral\n2.\tClinic Referral\n3.\tHMO Referral\n4.\tTransfer from a hospital\n5.\t Transfer from a Skilled Nursing Facility (SNF)\n6.\t Transfer from another health care facility\n7.\t Emergency Room\n8.\t Court\/Law Enforcement\n9.\t Not Available\n10.\t Transfer from critical access hospital\n11.\tNormal Delivery\n12.\t Premature Delivery\n13.\t Sick Baby\t\n14.\t Extramural Birth\n15.\tNot Available\n17.\tNULL\t\n18.\t Transfer From Another Home Health Agency\n19.\tReadmission to Same Home Health Agency\n20.\t Not Mapped\n21.\tUnknown\/Invalid\n22.\t Transfer from hospital inpt\/same fac reslt in a sep claim\n23.\t Born inside this hospital\n24.\t Born outside this hospital\n25.\t Transfer from Ambulatory Surgery Center\n26.\tTransfer from Hospice\n","e9764d05":"\n## Before I start, I realized that there are \"?\" sign that represented the NAN values. Getting rid of some information missing, I will replace them with np.nan","78325a11":"## **A1c test result**\n\nIndicates the range of the result or if the test was not taken. <br>\nValues: \n- \u201c>8\u201d if the result\nwas greater than 8%, \n- \u201c>7\u201d if the result was greater than 7% but less than 8%, \u201cnormal\u201d\n- if the result was less than 7%, and \u201cnone\u201d if not measured.\n\nWe decided use the A1c test result like as follows:","3afa4a17":"* To get rid of this parenthesis notation and make the **Age** variable a numeric value, we changed it according to the following rule.","5d87a6bd":"## **Age**","4fbad227":"### using OVERSAMPLING METHOD!!!!","d3d7f841":"## **Glucose Serum Test Result**<br>\nIndicates the range of the result or if the test was not taken.<br> \nValues: \n- \u201c>200,\u201d \n- \u201c>300,\u201d\n- \u201cnormal,\u201d \n- \u201cnone\u201d if not measured<br>\n\nWe decided use the Glucose Serum Test Result like as follows:\n","9190d339":"### **Number of Procedures**\nNumber of procedures (other than lab tests) performed during the encounter","e391ac10":"\n## **Time in Hospital**\nInteger number of days between admission and discharge. Shortly it is \"treatment time\"[](http:\/\/)","8fb78dfe":"### **Number of Lab Procedures**\nNumber of lab tests performed during the encounter","67e86244":"# logistic regression","273dea07":"- Most of the patients are **Caucasian**, followed by **African Americans**.\n- Although the **Other** values are few than **Caucasian**, \nwe see that the **Readmitted Probability** almost close to **Caucasian**.","e6def558":"- We see that **Readmitted Probability of Referral** is very close to **Emergency**, although **Emergency** is have more samples than other"}}