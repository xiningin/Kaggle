{"cell_type":{"a1409258":"code","05040d91":"code","fcd09683":"code","abdb2f82":"code","7ab3edd3":"code","76326467":"code","cef6f2ab":"code","6ea9f5a8":"code","ba70be3a":"code","cbe302aa":"code","df00b294":"code","39dad2db":"code","26f7045d":"code","31ea33a9":"code","e2ed6243":"code","52c801dd":"code","5fb21871":"code","8f69071b":"code","d3114a1c":"code","dfdb06e4":"code","e572d1f0":"code","beaff3a3":"code","bd9ae9ed":"code","849e29f7":"code","3ef52d66":"code","839a0749":"code","b1ae04ee":"code","66ec83ba":"code","2a130158":"code","130bb0eb":"code","cbee544e":"code","cfc8a6bd":"code","4f94b8ab":"code","d2c768d2":"code","503b863a":"code","41a7b086":"code","d6321f52":"markdown","a3ae2374":"markdown","4b4cc7eb":"markdown","ff266328":"markdown","e0951e38":"markdown","c6b59c7d":"markdown","c75ff96a":"markdown","b5f4777d":"markdown"},"source":{"a1409258":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","05040d91":"# Import DataFrame\ndf1 = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\ndf2 = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","fcd09683":"# In this example we use the second dataset (tmdb_5000_movies.csv).\n# Let's start First Look\n# This line shows info on DataFrame\ndf2.info()","abdb2f82":"# This line shows first 10 rows of DataFrame2\ndf2.head(10)","7ab3edd3":"# This line shows rows and columns numbers\ndf2.shape","76326467":"# These lines remove the features we will not use.\ndf = df2.drop([\"homepage\", \"keywords\", \"original_language\", \"original_title\", \"overview\",\n               \"production_companies\", \"production_countries\", \"release_date\", \n               \"spoken_languages\", \"status\", \"tagline\"], axis=1)\ndf.shape","cef6f2ab":"# This line shows first 10 rows of removed DataFrame\ndf.head(10)","6ea9f5a8":"# This line shows last 10 rows of DataFrame\ndf.tail(10)","ba70be3a":"# This line describes DataFrame columns\ndf.columns","cbe302aa":"# This line describes index\ndf.index","df00b294":"# This line shows numbers on non-NA values\ndf.count()","39dad2db":"# These lines examine the null values and their numbers\nif df.isnull().values.any():   # Check whether or not any null value\n    print(df.isnull().sum())   # If there is any null value prints total numbers\nelse:\n    print(\"False -> This DataFrame has not any null value\")","26f7045d":"# This line shows correlation between DataFrame values\ndf.corr()","31ea33a9":"# These lines visualize correlation map between DataFrame values\nf,ax = plt.subplots(figsize=(12,12))\nsns.heatmap(df.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","e2ed6243":"# This line shows DataFrame summary statistics (\".T\" means transpose of \"df.describe()\")\ndf.describe().T","52c801dd":"# LINE PLOT\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\n\ndf.budget.plot(kind=\"line\", color=\"b\", label=\"budget\", linewidth=2, alpha=0.9, grid=True, linestyle = '--')\ndf.revenue.plot(color=\"r\", label=\"revenue\", linewidth=1, alpha=0.5, grid=True, linestyle=':')\nplt.legend(loc=\"upper right\")                        # legend = puts label into plot\nplt.xlabel('x axis')                                 # label = name of label\nplt.ylabel('y axis')\nplt.title(\"Line Plot (Budget & Revenue)\")            # title = title of plot\nplt.show()","5fb21871":"# SCATTER PLOT \n# x = budget, y = revenue\ndf.plot(kind=\"scatter\", x=\"budget\", y=\"revenue\", alpha=0.7, color=\"purple\")\nplt.xlabel(\"Budget\")                                # label = name of label\nplt.ylabel(\"Revenue\")\nplt.title(\"Budget Revenue Scatter Plot\")            # title = title of plot\nplt.show()","8f69071b":"# HISTOGRAM\n# bins = number of bar in figure\ndf.runtime.plot(kind=\"hist\", color=\"orange\", bins=100, figsize=(8,8))\nplt.show()","d3114a1c":"# clf() = cleans it up again you can start a fresh\ndf.runtime.plot(kind = 'hist',bins = 50)\nplt.clf()\n# We cannot see plot due to clf()","dfdb06e4":"# This line defines a dictionary related to movie genres\ndictionary = {\"2233\":\"future\", \"3344\":\"society\", \"4455\":\"war\"}","e572d1f0":"# These lines print dictionary keys and values seperately\nprint(dictionary.keys())\nprint(dictionary.values())","beaff3a3":"# These lines change the value of \"2233\" and print\ndictionary[\"2233\"] = \"science\"\nprint(dictionary)","bd9ae9ed":"# These lines add value to the dictionary and print\ndictionary[\"5566\"] = \"fiction\"\nprint(dictionary)","849e29f7":"# These lines delete the value of \"2233\" and print\ndel dictionary[\"2233\"]\nprint(dictionary)","3ef52d66":"# These lines return boolean values of \"2233\" and \"3344\"\nprint(\"2233\" in dictionary)\nprint(\"3344\" in dictionary)","839a0749":"# These lines remove all entries in dictionary and print empty dictionary\ndictionary.clear()\nprint(dictionary)","b1ae04ee":"# These lines delete entire dictionary \n# In order to run all code you need to take comment these lines\n# It gives error because dictionary is completely deleted\n# Or you can use try-except structure not to get an error (like below) \ntry:\n    del dictionary    \n    print(dictionary)\nexcept:\n    print(\"error\")","66ec83ba":"# Import DataFrame\ndf = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","2a130158":"# Define pandas Series and pandas DataFrame related to \"tmdb_5000_movies.csv\"\nseries = df['original_title']        # data['Defense'] = pandas Series\nprint(type(series))\ndata_frame = df[['original_title']]  # data[['Defense']] = pandas DataFrame\nprint(type(data_frame))","130bb0eb":"# This line shows first 10 rows of pandas Series\nseries[0:10]","cbee544e":"# This line shows first 10 rows of pandas DataFrame\ndata_frame.head(10)","cfc8a6bd":"# 1 - Filtering pandas DataFrame\nx = df['budget']>275000000 # There are only 3 movies who have higher budget value bigger than 275M.\ndf[x]","4f94b8ab":"# 2-A Filtering pandas DataFrame with \"&\"\n# There are only 2 movies who have higher budget value bigger than 275M. and bigger revenue value than 1B.\ny = df[(df[\"budget\"]>275000000) & (df[\"revenue\"]>1000000000)]\ny","d2c768d2":"# 2-B Filtering pandas DataFrame with \"logical_and\"\n# These are also same with previous code lines.\n# There are only 2 movies who have higher budget value bigger than 275M. and bigger revenue value than 1B.\nz = df[np.logical_and(df[\"budget\"]>275000000, df[\"revenue\"]>1000000000)]\nz","503b863a":"# Stay in loop if condition is true\na = 0\nwhile a != 5:\n    print('a is: ',a)\n    a +=1 \nprint(a,' is equal to 5')   \n","41a7b086":"# Stay in loop if condition is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {\"2233\":\"future\", \"3344\":\"society\", \"4455\":\"war\"}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in df[['budget']][0:1].iterrows():\n    print(index,\" : \",value)\n","d6321f52":"# **Data Science Tutorial Example**\n\n**In this example [TMDB 5000 Movie Dataset](https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata) was used with [DATAI TEAM](https:\/\/www.kaggle.com\/kanncaa1) Tutorial ([Data ScienceTutorial for Beginners](https:\/\/www.kaggle.com\/kanncaa1\/data-sciencetutorial-for-beginners)) for learning data science basics.**","a3ae2374":"The first dataset contains the following features:\n\n* movie_id - A unique identifier for each movie.\n* cast - The name of lead and supporting actors.\n* crew - The name of Director, Editor, Composer, Writer etc.\n\nThe second dataset has the following features: \n\n* budget - The budget in which the movie was made.\n* genre - The genre of the movie, Action, Comedy ,Thriller etc.\n* homepage - A link to the homepage of the movie.\n* id - This is infact the movie_id as in the first dataset.\n* keywords - The keywords or tags related to the movie.\n* original_language - The language in which the movie was made.\n* original_title - The title of the movie before translation or adaptation.\n* overview - A brief description of the movie.\n* popularity - A numeric quantity specifying the movie popularity.\n* production_companies - The production house of the movie.\n* production_countries - The country in which it was produced.\n* release_date - The date on which it was released.\n* revenue - The worldwide revenue generated by the movie.\n* runtime - The running time of the movie in minutes.\n* status - \"Released\" or \"Rumored\".\n* tagline - Movie's tagline.\n* title - Title of the movie.\n* vote_average -  average ratings the movie recieved.\n* vote_count - the count of votes recieved.","4b4cc7eb":"## WHILE and FOR LOOPS","ff266328":"## Python Dictionaries\nThis section aim is explain and learn python dictionaries.","e0951e38":"## MATPLOTLIB\nMatplot is a python library that help us to plot data. (Line Plot, Scatter Plot and Histogram)","c6b59c7d":"As you can see, this dataset contains 4803 rows and 20 columns. Therefore, let's continue by removing the features we will not use.","c75ff96a":"As you can see, this dataset has only two null values related to runtime. Let's check it.","b5f4777d":"## Pandas\n\nPandas is a python library that help us to fast, powerful, flexible and easy data analysis and manipulation.\n"}}