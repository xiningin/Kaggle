{"cell_type":{"eeefc0e8":"code","f187d940":"code","4f73daf4":"code","e65ad0bc":"code","069c2c9f":"code","e82d7319":"code","751d33e5":"code","2e209ff3":"code","31565a43":"code","1d7fb402":"code","2e602280":"code","20d7e272":"code","71213971":"code","8f23d8e1":"code","893977d7":"code","e74fe92d":"code","4e8753de":"code","52ecd54b":"code","209084b4":"code","e053ea3c":"code","9bdb89bc":"code","10b85ec7":"code","bdd160dc":"code","b7b97e7f":"code","739f8458":"markdown","176964e7":"markdown","32c4b9a7":"markdown","cffbd5d6":"markdown","04ccbebe":"markdown","a6baaa12":"markdown","58fc4622":"markdown","e2a2c187":"markdown","73c418cb":"markdown","888bf172":"markdown","12dac3b0":"markdown","b38ce893":"markdown","c595bd46":"markdown","1be7ae16":"markdown","37d89acc":"markdown"},"source":{"eeefc0e8":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport cv2\n\nimport os\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle","f187d940":"directory = '..\/input\/handwritten-math-symbols\/dataset'","4f73daf4":"Name=[]\nfor file in os.listdir(directory):\n    Name+=[file]\nprint(Name)\nprint(len(Name))","e65ad0bc":"extensions = []\n\nfor path, subdirs, files in os.walk(directory):\n        for name in files:\n            if os.path.splitext(name)[1] not in extensions:\n                extensions += [os.path.splitext(name)[1]]\n\nprint(extensions)","069c2c9f":"''\nextensions.remove('')","e82d7319":"print(extensions)","751d33e5":"sorted(os.listdir(directory))","2e209ff3":"from collections import defaultdict\nd = defaultdict(int)\nco = 0\nfor x in sorted(os.listdir(directory)):\n    if x != '.directory':\n        if not d[x]:\n            d[x] = co\n            co+=1\nd","31565a43":"def images_read(directory):\n    image_width_min = 10000\n    image_height_min = 10000\n    \n    image_width_max = 0\n    image_height_max = 0\n    \n    # checking the size of each file\n    for path, subdirs, files in os.walk(directory):\n        for name in files:\n            if os.path.splitext(name)[1] in extensions:\n                image=cv2.imread(os.path.join(path, name))\n\n                # updating minimum size\n                height = image.shape[0]\n                width = image.shape[1]\n                \n                if height < image_height_min:\n                    image_height_min = height\n                \n                if width < image_width_min:\n                    image_width_min = width\n                    \n                if height > image_height_max:\n                    image_height_max = height\n                \n                if width > image_width_max:\n                    image_width_max = width\n                    \n    print('Image minimum width:'+str(image_width_min)+'\\n'+'Image minimum height:'+str(image_height_min)+'\\n'+\n         'Image maximum width:'+str(image_width_max)+'\\n'+'Image maximum height:'+str(image_height_max)\n         )\n    \n           \nimages_read('dataset')","1d7fb402":"def images_resize(directory):\n    list_target_names = []\n    list_images = []\n        \n    for path, subdirs, files in os.walk(directory):\n        files = [f for f in files if not f[0] == '.'] # Ignore '.directory' file\n        subdirs[:] = [d for d in subdirs if not d[0] == '.'] # Ignore hidden directories\n        \n        for name in files:\n            image=cv2.imread(os.path.join(path, name))\n            image=cv2.resize(image, (100, 100))\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n            list_target_names.append(os.path.basename(path))\n            list_images.append(image)\n    \n    return { \"target_names\": list_target_names, \"images\": list_images }\n        \ntarget_names = images_resize('..\/input\/handwritten-math-symbols\/dataset')['target_names']\nimages = images_resize('..\/input\/handwritten-math-symbols\/dataset')['images']","2e602280":"len(target_names)","20d7e272":"len(images)","71213971":"from collections import Counter\nc = Counter(sorted(target_names))\n\nc","8f23d8e1":"target_names = [d[key] for key in target_names]","893977d7":"fig, ax = plt.subplots(5, 5, figsize=(10, 10))\n\nfor i, axi in enumerate(ax.flat):\n    axi.imshow(images[i], cmap='bone')\n    axi.set(xticks=[], yticks=[],\n            xlabel=target_names[i])\n    axi.xaxis.label.set_color('green')","e74fe92d":"# target_names_shuffled, images_shuffled = shuffle(np.array(target_names, dtype=object), np.array(images, dtype=object))\ntarget_names_shuffled, images_shuffled = shuffle(np.array(target_names), np.array(images))","4e8753de":"fig, ax = plt.subplots(5, 5, figsize=(10, 10))\n\nfor i, axi in enumerate(ax.flat):\n    axi.imshow(images_shuffled[i], cmap='bone')\n    axi.set(xticks=[], yticks=[],\n            xlabel=target_names_shuffled[i])\n    axi.xaxis.label.set_color('green')","52ecd54b":"images_shuffled.shape","209084b4":"images_shuffled = images_shuffled.reshape(9008, 10000)","e053ea3c":"images_shuffled.shape","9bdb89bc":"Xtrain, Xtest, ytrain, ytest = train_test_split(images_shuffled, target_names_shuffled, random_state=0)","10b85ec7":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=1000)\nmodel.fit(Xtrain, ytrain)\nypred = model.predict(Xtest)","bdd160dc":"from sklearn import metrics\nprint(metrics.classification_report(ypred, ytest))","b7b97e7f":"import seaborn as sns\nsns.set(rc={'figure.figsize':(15,12)})\n\nmat = confusion_matrix(ytest, ypred)\nsns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False, xticklabels=list(d.keys()), yticklabels=list(d.keys()))\n\n\nplt.xlabel('true label')\nplt.ylabel('predicted label');","739f8458":"<h4>List of folders:<\/h4>","176964e7":"<h3>Reading directory names<\/h3>","32c4b9a7":"<h3>Resizing images<\/h3>","cffbd5d6":"<h3>The classification report for this classifier:<\/h3>","04ccbebe":"<h3>Plot the confusion matrix:<\/h3>","a6baaa12":"<h3>Implementing an Random Forest Classifier<\/h3>","58fc4622":"<h3>Map unique strings to integers in Python. Make dictionary<\/h3>","e2a2c187":"<h4>' ' is useless, we will remove it<\/h4>","73c418cb":"<h4>Randomly shuffle two lists \"target_names\" and \"images\" keeping initial order<\/h4>","888bf172":"<h4>Reshaping dataframe<\/h4>","12dac3b0":"<h4>Getting a list of unique file extensions<\/h4>","b38ce893":"<h3><i><B>We got an accuracy of 78%<\/B><\/i><\/h3>","c595bd46":"<h4>Finding the minimum height and width of image in \"cropped_images\" directory<.\/h4>","1be7ae16":"<h4>Remaining extensions:<\/h4>","37d89acc":"<h3>Assign a Dictionary Value to the List <B><I>\"target_names\"<\/I><\/B> Based on Dictionary Key<\/h3>"}}