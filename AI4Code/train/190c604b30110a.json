{"cell_type":{"15c02cfc":"code","7b7ff719":"code","a0c6c5e0":"code","0a88ee3d":"code","037a2d21":"code","e78d1e01":"code","d9963233":"code","f41a1207":"code","b1fde264":"code","74e6dd78":"code","d088dcbb":"code","2456ca3e":"code","b78dbde6":"code","a8868697":"code","84739c1b":"code","d2aa94e4":"code","d08aca29":"code","5a4dc6ed":"code","d9cc25d4":"code","18ba02b3":"code","0b5d6505":"code","7e5b0bf9":"code","05ecec99":"code","c3bc7a68":"code","02342c67":"code","e1297395":"code","f44fd477":"code","b935d788":"code","384fe622":"code","ad23841c":"code","d8f14dce":"code","e4d8a632":"code","803c31a4":"code","e5029840":"code","15f8b43f":"code","e1a018c0":"code","fc8d9eb1":"code","abe3966b":"code","3987d546":"code","7d2762de":"code","828c85d7":"code","fd62a3f6":"code","49c3f9c6":"code","d814dee3":"code","3b48e43d":"code","839b61a5":"code","c0969a28":"code","acb71a3c":"code","3cdcd061":"code","1fbddde3":"markdown","2b9ec774":"markdown","b32472a4":"markdown","247ecc10":"markdown","bf8d1f3c":"markdown","162a33bb":"markdown"},"source":{"15c02cfc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7b7ff719":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.text import Text\nfrom matplotlib.lines import Line2D\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.patches import Rectangle, Polygon\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom wordcloud import WordCloud, STOPWORDS\n\nimport geopandas as gpd\nfrom shapely.geometry import Point, LineString\n\nimport folium\nfrom folium import Marker, GeoJson\nfrom folium.plugins import MarkerCluster, HeatMap","a0c6c5e0":"df=pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')\ndf.head()","0a88ee3d":"df.info()","037a2d21":"df.describe(include='all')","e78d1e01":"#chech duplicates in show_id column\nshow_id_dupl=len(df['show_id'])!=len(set(df['show_id']))\nshow_id_dupl","d9963233":"df.set_index('show_id', inplace=True)\ndf.head()","f41a1207":"#Top Actors\/Actresses\nactor_df=df[['cast','type']]\nactor_df.head()\nactor_df.dropna(subset=['cast'], inplace=True)\nactor_df","b1fde264":"new_actor_df=actor_df['cast'].str.split(',', expand=True)\nnew_actor_df","74e6dd78":"splited_actor_df=pd.concat([actor_df, new_actor_df], axis=1)\nsplited_actor_df.drop(columns=['cast'], inplace=True)\nvalue=list(splited_actor_df.columns[1:])\nsplited_actor_df=pd.melt(splited_actor_df, id_vars=['type'], value_vars=value)\nsplited_actor_df['value']=splited_actor_df['value'].str.strip()\nsplited_actor_df","d088dcbb":"print('null value\\n', splited_actor_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_actor_df.isna().sum(axis=0), '\\n')\nprint(splited_actor_df.shape, '\\n')","2456ca3e":"splited_actor_df.dropna(inplace=True)\nsplited_actor_df","b78dbde6":"print('null value\\n',splited_actor_df.isnull().sum(axis=0),'\\n')\nprint('NaN value\\n',splited_actor_df.isna().sum(axis=0),'\\n')\nprint(splited_actor_df.shape, '\\n')","a8868697":"#Let's keep top 5 for Movie bars\ntop_m=splited_actor_df[splited_actor_df['type']=='Movie']\ntop_m=top_m[['variable','value']].groupby(by='value').count()\ntop_m.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_m=top_m.head(5)\ntop_m.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_m_max=top_m['variable'].max()\ntop_m['color'] = np.where(top_m['variable']==top_m_max, 'darkred', 'grey')\ntop_m.reset_index(inplace=True)\n\ntop_m","84739c1b":"#Let's keep top 5 for TV show bars\ntop_s=splited_actor_df[splited_actor_df['type']=='TV Show']\ntop_s=top_s[['variable','value']].groupby(by='value').count()\ntop_s.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_s=top_s.head(5)\ntop_s.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_s_max=top_s['variable'].max()\ntop_s['color'] = np.where(top_s['variable']==top_s_max, 'darkred', 'grey')\ntop_s.reset_index(inplace=True)\n\ntop_s","d2aa94e4":"#Creat DFs for word cloud\n#Let's keep top 100 for word cloud\ntext=splited_actor_df[['variable','value']].groupby(by='value').count()\ntext.sort_values(by='variable', ascending=False, inplace=True)\n\ntext=text.head(100)\ntext['variable']=text['variable']**4\ntext.reset_index(inplace=True)\n\n#Makes the circle using numpy\nx, y = np.ogrid[:1000, :1000]\n\nmask = (x - 500) ** 2 + (y - 500) ** 2 > 400 ** 2\nmask = 255 * mask.astype(int)\n\n#Make a word cloud\nwc=WordCloud(background_color='black',\n             #width = 1920, height = 1080,\n             random_state=1,\n             contour_color='Red',\n             colormap='Reds_r',\n             mask=mask,\n             collocations=False).generate_from_frequencies(dict(text.values.tolist()))\n\nfig=plt.figure(figsize=(20,10), facecolor='black')\nfig.suptitle('Netflix Actors Analisis', color ='white', fontweight='bold', fontsize=20)\ngs = fig.add_gridspec(2, 2)\nplt.tight_layout()\nax = [None for _ in range(4)]\n\nax[0] = fig.add_subplot(gs[:, 0]) \nax[0].imshow(wc, interpolation=\"bilinear\")\nax[0].axis(\"off\")\n\nax[1] = fig.add_subplot(gs[0, 1])\nax[1].barh(y=top_m['value'], width=top_m['variable'], align='center', color=top_m['color'])\n\nfor i, row in top_m.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[1].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' Movies', fontweight='bold', color='white')\n\nax[1].set_title('\\nTop 5 Movie Actors', color ='darkred', fontweight='bold', fontsize=15)\nax[1].axis(\"off\")\n\nax[2] = fig.add_subplot(gs[1, 1]) \nax[2].barh(y=top_s['value'], width=top_s['variable'], align='center', color=top_s['color'])\n\nfor i, row in top_s.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[2].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' TV-Shows', fontweight='bold', color='white')\n    \nax[2].set_title('\\nTop 5 TV-Show Actors', color ='darkred', fontweight='bold', fontsize=15)\nax[2].axis(\"off\")\n\nplt.show()","d08aca29":"#Top Director\ndirector_df=df[['director','type']]\ndirector_df.head()\ndirector_df.dropna(subset=['director'], inplace=True)\ndirector_df","5a4dc6ed":"new_director_df=director_df['director'].str.split(',', expand=True)\nnew_director_df","d9cc25d4":"splited_director_df=pd.concat([director_df, new_director_df], axis=1)\nsplited_director_df.drop(columns=['director'], inplace=True)\nvalue=list(splited_director_df.columns[1:])\nsplited_director_df=pd.melt(splited_director_df, id_vars=['type'], value_vars=value)\nsplited_director_df['value']=splited_director_df['value'].str.strip()\nsplited_director_df","18ba02b3":"print('null value\\n', splited_director_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_director_df.isna().sum(axis=0), '\\n')\nprint(splited_director_df.shape, '\\n')","0b5d6505":"splited_director_df.dropna(inplace=True)\nsplited_director_df","7e5b0bf9":"print('null value\\n', splited_director_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_director_df.isna().sum(axis=0), '\\n')\nprint(splited_director_df.shape, '\\n')","05ecec99":"#Let's keep top 5 for Movie bars\ntop_d_m=splited_director_df[splited_director_df['type']=='Movie']\ntop_d_m=top_d_m[['variable','value']].groupby(by='value').count()\ntop_d_m.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_d_m=top_d_m.head(5)\ntop_d_m.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_d_m_max=top_d_m['variable'].max()\ntop_d_m['color'] = np.where(top_d_m['variable']==top_d_m_max, 'darkred', 'grey')\ntop_d_m.reset_index(inplace=True)\n\ntop_d_m","c3bc7a68":"#Let's keep top 5 for TV show bars\ntop_d_s=splited_director_df[splited_director_df['type']=='TV Show']\ntop_d_s=top_d_s[['variable','value']].groupby(by='value').count()\ntop_d_s.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_d_s=top_d_s.head(5)\ntop_d_s.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_d_s_max=top_d_s['variable'].max()\ntop_d_s['color'] = np.where(top_d_s['variable']==top_d_s_max, 'darkred', 'grey')\ntop_d_s.reset_index(inplace=True)\n\ntop_d_s","02342c67":"#Creat DFs for word cloud\n#Let's keep top 100 for word cloud\ntext_d=splited_director_df[['variable','value']].groupby(by='value').count()\ntext_d.sort_values(by='variable', ascending=False, inplace=True)\n\ntext_d=text_d.head(100)\ntext_d['variable']=text_d['variable']**4\ntext_d.reset_index(inplace=True)\n\n#Makes the circle using numpy\nx, y = np.ogrid[:1000, :1000]\n\nmask = (x - 500) ** 2 + (y - 500) ** 2 > 400 ** 2\nmask = 255 * mask.astype(int)\n\n#Make a word cloud\nwc_d=WordCloud(background_color='black',\n             #width = 1920, height = 1080,\n             random_state=1,\n             contour_color='Red',\n             colormap='Reds_r',\n             mask=mask,\n             collocations=False).generate_from_frequencies(dict(text_d.values.tolist()))\n\nfig=plt.figure(figsize=(20,10), facecolor='black')\nfig.suptitle('Netflix Directors Analisis', color ='white', fontweight='bold', fontsize=20)\ngs = fig.add_gridspec(2, 2)\nplt.tight_layout()\nax = [None for _ in range(4)]\n\nax[0] = fig.add_subplot(gs[:, 0]) \nax[0].imshow(wc_d, interpolation=\"bilinear\")\nax[0].axis(\"off\")\n\nax[1] = fig.add_subplot(gs[0, 1])\nax[1].barh(y=top_d_m['value'], width=top_d_m['variable'], align='center', color=top_d_m['color'])\n\nfor i, row in top_d_m.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[1].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' Movies', fontweight='bold', color='white')\n\nax[1].set_title('\\nTop 5 Movie Directors',color ='darkred', fontweight='bold', fontsize=15)\nax[1].axis(\"off\")\n\nax[2] = fig.add_subplot(gs[1, 1]) \nax[2].barh(y=top_d_s['value'], width=top_d_s['variable'], align='center', color=top_d_s['color'])\n\nfor i, row in top_d_s.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[2].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' TV-Shows', fontweight='bold', color='white')\n    \nax[2].set_title('\\nTop 5 TV-Show Directors',color ='darkred', fontweight='bold', fontsize=15)\nax[2].axis(\"off\")\n\nplt.show()","e1297395":"#Top Genres\ngenres_df=df[['listed_in','type']]\ngenres_df.head()\ngenres_df.dropna(subset=['listed_in'], inplace=True)\ngenres_df","f44fd477":"new_genres_df=genres_df['listed_in'].str.split(',', expand=True)\nnew_genres_df","b935d788":"splited_genres_df=pd.concat([genres_df, new_genres_df], axis=1)\nsplited_genres_df.drop(columns=['listed_in'], inplace=True)\nvalue=list(splited_genres_df.columns[2:])\nsplited_genres_df=pd.melt(splited_genres_df, id_vars=['type'], value_vars=value)\nsplited_genres_df['value']=splited_genres_df['value'].str.strip()\nsplited_genres_df","384fe622":"print('null value\\n', splited_genres_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_genres_df.isna().sum(axis=0), '\\n')\nprint(splited_genres_df.shape, '\\n')","ad23841c":"splited_genres_df.dropna(inplace=True)\nsplited_genres_df","d8f14dce":"print('null value\\n', splited_genres_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_genres_df.isna().sum(axis=0), '\\n')\nprint(splited_genres_df.shape, '\\n')","e4d8a632":"#Let's keep top 5 for Movie bars\ntop_g_m=splited_genres_df[splited_genres_df['type']=='Movie']\ntop_g_m=top_g_m[['variable','value']].groupby(by='value').count()\ntop_g_m.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_g_m=top_g_m.head(5)\ntop_g_m.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_g_m_max=top_g_m['variable'].max()\ntop_g_m['color'] = np.where(top_g_m['variable']==top_g_m_max, 'darkred', 'grey')\ntop_g_m.reset_index(inplace=True)\n\ntop_g_m","803c31a4":"#Let's keep top 5 for TV show bars\ntop_g_s=splited_genres_df[splited_genres_df['type']=='TV Show']\ntop_g_s=top_g_s[['variable','value']].groupby(by='value').count()\ntop_g_s.sort_values(by='variable', ascending=False, inplace=True)\n\ntop_g_s=top_g_s.head(5)\ntop_g_s.sort_values(by='variable', ascending=True, inplace=True)\n\ntop_g_s_max=top_g_s['variable'].max()\ntop_g_s['color'] = np.where(top_g_s['variable']==top_g_s_max, 'darkred', 'grey')\ntop_g_s.reset_index(inplace=True)\n\ntop_g_s","e5029840":"#Creat DFs for word cloud\n#Let's keep top 100 for word cloud\ntext_g=splited_genres_df[['variable','value']].groupby(by='value').count()\ntext_g.sort_values(by='variable', ascending=False, inplace=True)\n\ntext_g=text_g.head(100)\ntext_g['variable']=text_g['variable']\ntext_g.reset_index(inplace=True)\n\n#Makes the circle using numpy\nx, y = np.ogrid[:1000, :1000]\n\nmask = (x - 500) ** 2 + (y - 500) ** 2 > 400 ** 2\nmask = 255 * mask.astype(int)\n\n#Make a word cloud\nwc_g=WordCloud(background_color='black',\n             #width = 1920, height = 1080,\n             random_state=1,\n             contour_color='Red',\n             colormap='Reds_r',\n             mask=mask,\n             collocations=False).generate_from_frequencies(dict(text_g.values.tolist()))\n\nfig=plt.figure(figsize=(20,10), facecolor='black')\nfig.suptitle('Netflix Genres Analisis', color ='white', fontweight='bold', fontsize=20)\ngs = fig.add_gridspec(2, 2)\nplt.tight_layout()\nax = [None for _ in range(4)]\n\nax[0] = fig.add_subplot(gs[:, 0]) \nax[0].imshow(wc_g, interpolation=\"bilinear\")\nax[0].axis(\"off\")\n\nax[1] = fig.add_subplot(gs[0, 1])\nax[1].barh(y=top_g_m['value'], width=top_g_m['variable'], align='center', color=top_g_m['color'])\n\nfor i, row in top_g_m.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[1].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' Movies', fontweight='bold', color='white')\n\nax[1].set_title('\\nTop 5 Movie Genreses',color ='darkred', fontweight='bold', fontsize=15)\nax[1].axis(\"off\")\n\nax[2] = fig.add_subplot(gs[1, 1]) \nax[2].barh(y=top_g_s['value'], width=top_g_s['variable'], align='center', color=top_g_s['color'])\n\nfor i, row in top_g_s.iterrows():\n    #print(i, row['value'], ': ', row['variable'], ' Movies')\n    ax[2].text(x=0.1, y=i, s=row['value']+': '+str(row['variable'])+' TV-Shows', fontweight='bold', color='white')\n    \nax[2].set_title('\\nTop 5 TV-Show Genreses', color ='darkred', fontweight='bold', fontsize=15)\nax[2].axis(\"off\")\n\nplt.show()","15f8b43f":"#Lest create dataframe for counties\ncountry_df=df[['country','type']]\ncountry_df.head()","e1a018c0":"new_country_df=country_df['country'].str.split(',', expand=True)\nnew_country_df","fc8d9eb1":"splited_country_df=pd.concat([country_df, new_country_df], axis=1)\nsplited_country_df.drop(columns=['country'], inplace=True)\nvalue=list(splited_country_df.columns[1:])\nsplited_country_df=pd.melt(splited_country_df, id_vars=['type'], value_vars=value)\nsplited_country_df['value']=splited_country_df['value'].str.strip()\nsplited_country_df.head()","abe3966b":"print('null value\\n', splited_country_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_country_df.isna().sum(axis=0), '\\n')\nprint(splited_country_df.shape, '\\n')","3987d546":"splited_country_df.dropna(inplace=True)\nprint('null value\\n', splited_country_df.isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', splited_country_df.isna().sum(axis=0), '\\n')\nprint(splited_country_df.shape, '\\n')","7d2762de":"country_df=pd.pivot_table(splited_country_df, values='variable', index='value', columns='type', aggfunc=len)\nprint('null value\\n', country_df.reset_index().isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', country_df.reset_index().isna().sum(axis=0), '\\n')\nprint(country_df.shape, '\\n')\ncountry_df.replace(to_replace=np.nan, value=0, inplace=True)\nprint('null value\\n', country_df.reset_index().isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', country_df.reset_index().isna().sum(axis=0), '\\n')\nprint(country_df.shape, '\\n')\ncountry_df","828c85d7":"country_df['Total']=country_df['Movie']+country_df['TV Show']\ncountry_df.sort_values(by='Total', ascending=False, inplace=True)\ncountry_df","fd62a3f6":"# generate country code  based on country name \nimport pycountry \ndef alpha3code(column):\n    CODE=[]\n    for country in column:\n        try:\n            code=pycountry.countries.get(name=country).alpha_3\n           # .alpha_3 means 3-letter country code \n           # .alpha_2 means 2-letter country code\n            CODE.append(code)\n        except:\n            CODE.append('None')\n    return CODE\n# create a column for code \ncountry_df['CODE']=alpha3code(country_df.index)\ncountry_df.head(50)","49c3f9c6":"print('null value\\n', country_df.reset_index().isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', country_df.reset_index().isna().sum(axis=0), '\\n')\nprint(country_df.shape, '\\n')","d814dee3":"# first let us merge geopandas data with our data\n# 'naturalearth_lowres' is geopandas datasets so we can use it directly\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n# rename the columns so that we can merge with our data\nworld.columns=['pop_est', 'continent', 'name', 'CODE', 'gdp_md_est', 'geometry']\n# then merge with our data \ncountry_df=pd.merge(world,country_df, how='left', on='CODE')\ncountry_df.sort_values(by='Total', ascending=False, inplace=True)\n#country_df[['Movie','TV Show','Total']]=country_df[['Movie','TV Show','Total']].replace(to_replace=np.nan, value=0)\ncountry_df","3b48e43d":"print('null value\\n', country_df.reset_index().isnull().sum(axis=0), '\\n')\nprint('NaN value\\n', country_df.reset_index().isna().sum(axis=0), '\\n')\nprint(country_df.shape, '\\n')","839b61a5":"country_df=country_df[country_df['continent']!='Antarctica']\ncountry_df['continent'].value_counts()","c0969a28":"fig, ax = plt.subplots(figsize=(20, 10), facecolor='black')\ncountry_df.plot(ax=ax,\n                column='Total',\n                scheme='quantiles',\n                cmap='Reds',\n                legend=True)\nplt.axis('off')\nplt.show()","acb71a3c":"fig, ax = plt.subplots(figsize=(20, 10), facecolor='black')\n\ncountry_df.iloc[[0]].plot(ax=ax,\n                column='Total',\n                scheme='quantiles',\n                cmap='Reds',\n                legend=False)\nplt.axis('off')\nplt.show()","3cdcd061":"fig=plt.figure(figsize=(20,10), facecolor='black')\nfig.suptitle('Netflix Countries Analisis', color ='white', fontweight='bold', fontsize=20)\ngs = fig.add_gridspec(3, 3)\nplt.tight_layout()\nax = [None for _ in range(6)]\n\nax[0] = fig.add_subplot(gs[1:, :-1])\n\ncountry_df.plot(ax=ax[0],\n                figsize=(12,10),\n                column='Total',\n                scheme='quantiles',\n                cmap='Reds',\n                legend_kwds={'loc':'lower left'},\n                legend=True,\n                edgecolor='white',\n                missing_kwds={\"color\": \"white\",\n                              \"edgecolor\": \"darkred\",\n                              \"hatch\": \"\/\/\/\",\n                              \"label\": \"Missing values\"})\n\nax[0].set_facecolor('black')\n\nax[1] = fig.add_subplot(gs[0, 0])\nax[2] = fig.add_subplot(gs[0, 1])\nax[3] = fig.add_subplot(gs[0, 2])\nax[4] = fig.add_subplot(gs[1, 2])\nax[5] = fig.add_subplot(gs[2, 2])\n\nfor i in range(0,5):\n    row=country_df.iloc[[i]]    \n    row.plot(ax=ax[i+1],\n                column='Total',\n                categorical=True,\n                cmap='Reds_r',\n                edgecolor='white',\n                legend=True)\n    title=country_df.iloc[i]['name']\n    ax[i+1].set_title('\\n'+str(i+1)+' - '+title, color ='darkred', fontweight='bold', fontsize=15)\n    ax[i+1].set_facecolor('black')\n    #ax[i+1].set_aspect('equal', adjustable='datalim')\n\nplt.show()","1fbddde3":"# Top Counties","2b9ec774":"# Libriaries","b32472a4":"# Top Directors","247ecc10":"# Get & Prepare Data","bf8d1f3c":"# Top Genres","162a33bb":"# Top Actors\/Actresses"}}