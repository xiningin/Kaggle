{"cell_type":{"6fd7a037":"code","8f42f18e":"code","77309ce2":"code","45236155":"code","03eed85b":"code","2209896a":"code","5ac5256d":"code","3531b3c9":"code","7c5be847":"code","1fe1f0af":"code","f73e1937":"code","cc09c06b":"code","0946e71b":"code","70369f0b":"code","6d2645f5":"code","b1b7d52e":"code","e15203d3":"code","2fa2dc44":"markdown","165177cc":"markdown","044534dc":"markdown","361c078c":"markdown","ff8d2649":"markdown","085b1b2d":"markdown","0175c679":"markdown","70d51f08":"markdown","23261bb3":"markdown","1e9fff99":"markdown","904b7bf1":"markdown","1de9dbc5":"markdown","f52aeb81":"markdown","58a0a9c6":"markdown","4f03a8bc":"markdown","5091ffbb":"markdown"},"source":{"6fd7a037":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt #Plotting\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (15,10) #Set the default figure size\nplt.style.use('ggplot') #Set the plotting method\n\nfrom mlxtend.frequent_patterns import apriori #Import Apriori for Market Basket Analysis\nfrom mlxtend.frequent_patterns import association_rules #Pull Rules from Apriori\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f42f18e":"bread = pd.read_csv(\"..\/input\/the-bread-basket\/bread basket.csv\") #Put the data into a dataset\nbread.head() #Take a peek at the data","77309ce2":"print(bread.isnull().any()) #Check for any null values","45236155":"date = [] #Add a holder variable for the dates\ntime = [] #Add a holder variable for the times\ndateTime = bread[\"date_time\"].copy() #Get the datetime field from the dataframe\n\n#For each datetime, split the dates and times and hold them in the holders\nfor dateT in dateTime:\n    splitDate = dateT.split() #Split the date and time\n    date.append(splitDate[0]) #Add the date to the date holder list\n    time.append(splitDate[1]) #Add the time to the time holder list\n    \nbread[\"date\"] = date #Put the date holder into the bread dataframe\nbread[\"time\"] = time #Put the time holder into the bread dataframe\nbread = bread.drop(columns = {\"date_time\"}) #Drop the original datetime column\nbread.head() #Take a peek at the dataset","03eed85b":"bread[\"date\"] = pd.to_datetime(bread[\"date\"]) #Convert the dates to pandas datetime\nbread[\"day\"] = bread[\"date\"].dt.day_name() #Get the day from the date field\nbread.head() #Take a peek at the dataset","2209896a":"bread[\"day\"].value_counts().plot.bar(title = \"Sales by Weekday\") #Plot the number of items sold on each weekday","5ac5256d":"bread[\"month\"] = pd.DatetimeIndex(bread[\"date\"]).month #Get the months of the transactions\ncolors = [] #Add a holder list for the colors I want\n\n#For each month, give it a color by season\nfor month in bread[\"month\"].value_counts().sort_index().index:\n    if month <3: #If the month is 1 or 2, thus winter\n        colors.append(\"lightblue\") #Make their color light blue, a wintery color\n    elif month <6: #If the month is 3-5, thus spring\n        colors.append(\"lightgreen\") #Make their color light green, a springy color\n    elif month <9: #If the month is 6-8, thus summer\n        colors.append(\"yellow\") #Make their color yellow, a summery color\n    elif month <12: #If the month is 9-11, thus fall\n        colors.append(\"darkorange\") #Make their color orange, a fall-like color\n    else: #Else case, handling December, and thus winter\n        colors.append(\"lightblue\") #Make december light blue\n        \nbread[\"month\"].value_counts().sort_index().plot.bar(color = colors, title = \"Sales by Month\") #Plot the items sold by month","3531b3c9":"hour = pd.DatetimeIndex(bread[\"time\"]).hour #Get the months of the transactions\nhour.value_counts().sort_index().plot.bar(color = \"purple\", title = \"Sales by Hour\", subplots = True) #Plot the sales by hour","7c5be847":"bread[\"time\"].value_counts().sort_index().plot(color = \"royalblue\", title = \"Sales by Time of Day\") #Plot the transaction times","1fe1f0af":"bread[\"Item\"].value_counts()[:10].plot.bar(title = \"Popular Items\", color = \"brown\") #Plot the counts of the most popular items","f73e1937":"win = [1, 2, 3, 10, 11, 12] #A list of \"winter\" months\nbread[\"sumWin\"] = bread[\"month\"].apply(\n    lambda x: \"Winter\" if x in win else \"Summer\") #Add a column to the dataframe to distinuish summer and winter\n\nbread[\"Item\"].loc[bread[\"sumWin\"] == \"Summer\"].value_counts()[:10].plot.bar(\n    title = \"Popular Summer Items\", color = \"yellow\") #Plot the counts of the most popular summer items","cc09c06b":"bread[\"Item\"].loc[bread[\"sumWin\"] == \"Winter\"].value_counts()[:10].plot.bar(\n    title = \"Popular Winter Items\", color = \"lightblue\") #Plot the counts of the most popular winter items","0946e71b":"breadBasic = bread[[\"Transaction\", \"Item\"]].copy() #Take only the transaction and item fields\nbreadBasic[\"Quant\"] = breadBasic[\"Item\"].apply(lambda x: 1) #Add a quantity field so the basket will not get mad\nbreadBasic.head() #Take a peek at the simplified data","70369f0b":"breadBasket = (breadBasic #Pull the dataframe\n               .groupby([\"Transaction\", \"Item\"])[\"Quant\"] #Group the items and transactions together\n               .sum().unstack().reset_index().fillna(0) #Create a table for the quantities of each item per transaction\n               .set_index(\"Transaction\")) #Set the index to the transactions\nbreadBasket.head(13) #Take a peek at the basket","6d2645f5":"#Encode: encodes the quantities into 0 (none in this transaction) and 1 (at least one in this transaction)\n#Input: the quantity\n#Output: 1 for in the transaction, 0 for not in the transaction\ndef encode(quant):\n    if quant == 0: #If the count is already 0\n        return 0 #Fill the slot with 0\n    return 1 #Fill the slot with 1 to represent existence\n\nbreadBasket = breadBasket.applymap(encode) #Encode the basket\nbreadBasket.head(13) #Take a peek at the basket","b1b7d52e":"freq = apriori(breadBasket, min_support = 0.01, use_colnames = True) #Use the Apriori Algorithm\nrules = association_rules(freq, metric = \"lift\", min_threshold = 1) #Get the associations from the Apriori\nrules = rules.sort_values(\"confidence\", ascending = False) #Sort the rules by their confidence\nrules.head(15) #Take a peek at the associations","e15203d3":"rulesConf = rules.loc[rules[\"confidence\"] > 0.5] #Get only the items with 50% confidence\nrulesConf #Show all the 50% confident connections","2fa2dc44":"---","165177cc":"Source: https:\/\/medium.com\/edureka\/apriori-algorithm-d7cc648d4f1e","044534dc":"# Split the DateTime Field","361c078c":"Coded by Luna McBride","ff8d2649":"# Explore the Data","085b1b2d":"# Check for Nulls","0175c679":"---","70d51f08":"---","23261bb3":"# Bakery Data Exploration\/Apriori Market Analysis","1e9fff99":"It appears the options most sold together are coffee with pastry-type items, with the occasional two drinks together or sandwich (basically sharing a drink or getting lunch). ","904b7bf1":"---","1de9dbc5":"There are no null values in the dataset","f52aeb81":"This market has a stronger weekend clientelle, yet only by a small amount. They are most popular in the cold seasons of winter rather than the summer, with extra popularity in March and November when the cold season is just ending\/starting respectively. Their most popular times are from 10-2 with a peak at 11. The most popular items are warm drinks and warm bread items, but this does not appear to differ much by time of year.\n\nI think it is very likely this is a place to stop on the way to work and\/or between college classes, given the high rise in the morning, sustained popularity midday, and disproportionately high coffee sales for a bread shop. ","58a0a9c6":"## Basket Formation (Item\/Transaction)","4f03a8bc":"# Market Basket Analysis","5091ffbb":"## Run Apriori"}}