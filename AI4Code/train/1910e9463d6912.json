{"cell_type":{"0e75f8d6":"code","f7e9103f":"code","7e155205":"code","9107d418":"code","116e6bf8":"code","d08db33b":"code","916d57bc":"code","72016a71":"code","0ffc6329":"code","947d4817":"code","5aec8216":"code","5c0573b1":"code","f461e1c1":"code","67427c5f":"code","17534eb2":"code","e4a6ca3f":"code","778656f1":"code","e7596a02":"code","8adbb07f":"code","2bf42f50":"code","fde7976b":"code","b4185e4a":"code","4d6c91b6":"code","e875fc3f":"code","c7bd5a2c":"code","19586267":"code","0985b7c8":"code","d34c0d88":"code","529b08e0":"code","9d7ea2ba":"code","b84b0865":"code","fb2f6645":"markdown","98349fa7":"markdown","65579b2c":"markdown","4cc211bc":"markdown","5718a735":"markdown","50c219c2":"markdown","7043a390":"markdown","9ec116d9":"markdown"},"source":{"0e75f8d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f7e9103f":"!pip install pyspark","7e155205":"from pyspark.sql import SparkSession","9107d418":"app = SparkSession.builder.appName(\"dtc\").getOrCreate()","116e6bf8":"df = app.read.csv(\"\/kaggle\/input\/drug-classification\/drug200.csv\",inferSchema=True,header=True)","d08db33b":"df.printSchema()","916d57bc":"df.describe().select(['Summary','Age','Sex','BP','Cholesterol','Na_to_K','Drug']).show()","72016a71":"#To drop null values if present in the dataset\n#final_df = df.na.drop()","0ffc6329":"from pyspark.ml.feature import (StringIndexer,OneHotEncoder)","947d4817":"Sex_Indexer = StringIndexer(inputCol = 'Sex',outputCol='Sex_Indexed')\nSex_Encoder = OneHotEncoder(inputCol = 'Sex_Indexed',outputCol = 'Sex_Encoder')","5aec8216":"BP_Indexer = StringIndexer(inputCol = 'BP',outputCol='BP_Indexed')\nBP_Encoder = OneHotEncoder(inputCol = 'BP_Indexed',outputCol = 'BP_Encoder')","5c0573b1":"Cholesterol_Indexer = StringIndexer(inputCol = 'Cholesterol',outputCol='Cholesterol_Indexed')\nCholesterol_Encoder = OneHotEncoder(inputCol = 'Cholesterol_Indexed',outputCol = 'Cholesterol_Encoder')","f461e1c1":"Drug_Indexer = StringIndexer(inputCol = 'Drug',outputCol='Drug_Indexed')\nindexed = Drug_Indexer.fit(df).transform(df)\nindexed.show()","67427c5f":"final_df=indexed.drop(\"Drug\")\nfinal_df.show()","17534eb2":"final_df.printSchema()","e4a6ca3f":"from pyspark.ml.feature import VectorAssembler","778656f1":"Assembler = VectorAssembler(inputCols=['Age','Sex_Encoder','BP_Encoder','Cholesterol_Encoder','Na_to_K'], outputCol='Features')","e7596a02":"from pyspark.ml.feature import StandardScaler","8adbb07f":"sc = StandardScaler(inputCol = \"Features\",outputCol = \"Standard_Features\")","2bf42f50":"from pyspark.ml import Pipeline\nfrom pyspark.ml.classification import (DecisionTreeClassifier,GBTClassifier,RandomForestClassifier)","fde7976b":"dtc = DecisionTreeClassifier(featuresCol=\"Standard_Features\",labelCol=\"Drug_Indexed\")\n#gbt = GBTClassifier(featuresCol=\"Standard_Features\",labelCol=\"Drug_Indexed\") \n#removing gbt since this is a multinomial classification problem. GBT only supports binary classification\nrfc = RandomForestClassifier(featuresCol=\"Standard_Features\",labelCol=\"Drug_Indexed\")","b4185e4a":"Pipeline_One = Pipeline(stages = [Sex_Indexer,Sex_Encoder,BP_Indexer,BP_Encoder,Cholesterol_Indexer,Cholesterol_Encoder,\n                                 Assembler,\n                                 sc,\n                                 dtc])","4d6c91b6":"Pipeline_Three = Pipeline(stages = [Sex_Indexer,Sex_Encoder,BP_Indexer,BP_Encoder,Cholesterol_Indexer,Cholesterol_Encoder, \n                                 Assembler,\n                                 sc,\n                                 rfc])","e875fc3f":"train_dataset,test_dataset = final_df.randomSplit([0.8,0.2])","c7bd5a2c":"dtc_model = Pipeline_One.fit(train_dataset)\nrfc_model = Pipeline_Three.fit(train_dataset)","19586267":"dtc_result = dtc_model.transform(test_dataset)\nrfc_result = rfc_model.transform(test_dataset)","0985b7c8":"from pyspark.ml.evaluation import MulticlassClassificationEvaluator","d34c0d88":"evaluation_metric = MulticlassClassificationEvaluator(predictionCol = 'prediction', labelCol = \"Drug_Indexed\")","529b08e0":"predictionAndTarget_dtc = dtc_model.transform(final_df).select(\"Drug_Indexed\", \"prediction\")\npredictionAndTarget_rfc = rfc_model.transform(final_df).select(\"Drug_Indexed\", \"prediction\")","9d7ea2ba":"print(\"Accuracy score using DecisionTreeClassifier: \"+str(evaluation_metric.evaluate(predictionAndTarget_dtc,{evaluation_metric.metricName: \"accuracy\"}))+\"\\nAccuracy score using RandomForestClassifer: \"+str(evaluation_metric.evaluate(predictionAndTarget_rfc,{evaluation_metric.metricName: \"accuracy\"})))","b84b0865":"app.stop()","fb2f6645":"# **Model Building:**","98349fa7":"# **Model Evaluation:**","65579b2c":"Converting categorical to numerical variables:","4cc211bc":"Standardizing the values:","5718a735":"# **Data preprocessing for model building:**","50c219c2":"Combining all variables into a single feature:","7043a390":"# **Extracting data and gathering insights:**","9ec116d9":"We observe that both numerical and categorical variables are present. Categorical variables need to be converted."}}