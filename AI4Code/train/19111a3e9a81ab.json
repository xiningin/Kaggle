{"cell_type":{"a11bf793":"code","41e7ccda":"code","e864703c":"code","7ae30b48":"code","9333bfe0":"code","148555ef":"code","dec86af4":"code","be76bee4":"code","c67c4140":"code","a5399ea6":"code","c0c1ccac":"code","09449137":"code","e933cd10":"code","c21671d9":"code","a7568f34":"code","674ff6e8":"code","a84937b3":"code","88f478e5":"code","e7d26ba4":"code","e1ca9198":"code","fe812b45":"code","9934702d":"code","c2d2dee3":"code","8f409bcc":"code","66fd11a5":"code","34b4c1ba":"code","9a05608a":"code","75eb0e86":"code","18760f7d":"markdown","f1f0a1d9":"markdown","fea3ec78":"markdown","c5868a7d":"markdown"},"source":{"a11bf793":"from google.colab import drive","41e7ccda":"drive.mount('\/content\/drive', force_remount=True)\n","e864703c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix","7ae30b48":" df = pd.read_csv('\/content\/drive\/MyDrive\/creditcard_csv.csv', low_memory=False)","9333bfe0":"#afficher les 5 premiers lignes \ndf.head()\n# Import label encoder\n  \n# label_encoder object knows how to understand word labels.\nlabel_encoder = preprocessing.LabelEncoder()\n  \n# Encode labels in column 'species'.\ndf['Class']= label_encoder.fit_transform(df['Class'])","148555ef":"#Access a group of rows\nfrauds = df.loc[df['Class'] == 1] \nprint(frauds)","dec86af4":"df.head()","be76bee4":"non_frauds = df.loc[df['Class'] == 0] \nprint(non_frauds)","c67c4140":"print('Frauds ', len(frauds), ' transactions or ', round(df['Class'].value_counts()[1]\/len(df)*100, 2), '% of the dataset')\n","a5399ea6":"print('No Fraud ', len(non_frauds), ' transactions or ', round(df['Class'].value_counts()[0]\/len(df)*100,2), '% of the dataset')","c0c1ccac":"print(df['Class'].value_counts())","09449137":"df.describe()","e933cd10":"df.isnull().sum().max() #voir s il y a des valeurs nulle ","c21671d9":"ax = frauds.plot.scatter(x='Amount', y='Class', color='red', label='Fraud')\nnon_frauds.plot.scatter(x='Amount', y='Class', color='green', label='No Fraud', ax=ax)\nplt.show()","a7568f34":"sns.set(style=\"whitegrid\")\nax = sns.countplot(x=\"Class\", hue=\"Class\", data=df)\n","674ff6e8":"colors = ['green', 'red']\n\nsns.countplot('Class', data=df, palette=colors)\nplt.title('Class Distributions \\n (0: No Fraud || 1: Fraud)',fontsize=20 )","a84937b3":"fig, ax = plt.subplots(1, 2, figsize=(18,4))\n\namount_val = df['Amount'].values\ntime_val = df['Time'].values\n\nsns.distplot(amount_val, ax=ax[0], color='b')\nax[0].set_title('Distribution of Transaction Amount', fontsize=20)\nax[0].set_xlim([min(amount_val), max(amount_val)])\n\nsns.distplot(time_val, ax=ax[1], color='r')\nax[1].set_title('Distribution of Transaction Time', fontsize=20)\nax[1].set_xlim([min(time_val), max(time_val)])\n\nplt.show()","88f478e5":"amount_scaler = preprocessing.StandardScaler().fit_transform(df['Amount'].values.reshape(-1,1))\nprint(amount_scaler)\ntime_scaler = preprocessing.StandardScaler().fit_transform(df['Time'].values.reshape(-1,1))\n\n","e7d26ba4":"df.drop(['Time','Amount'], axis=1, inplace=True)\ndf.insert(0,'amount_scaler',amount_scaler,True)\ndf.insert(1,'time_scaler',time_scaler,True)\ndf.head()","e1ca9198":"corrMatrix = df.corr()\nsns.heatmap(corrMatrix)\nplt.show()","fe812b45":"X = df.drop('Class', axis=1)\ny = df['Class']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nprint('Train set:', X_train.shape)\nprint('Test set:', X_test.shape)\n\n\n","9934702d":"model=XGBClassifier()\nmodel.fit(X_train, y_train)\nprint('train score:', model.score(X_train, y_train))\nprint('test score:', model.score(X_test, y_test))","c2d2dee3":"model=XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n               colsample_bynode=1, colsample_bytree=1, eta=0.01,\n               eval_metric='auc', gamma=0, learning_rate=0.1, max_delta_step=0,\n               max_depth=6, min_child_weight=10, missing=None, n_estimators=100,\n               n_jobs=1, nthread=None, objective='binary:logistic',\n               random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1)\ncross_val_score(model, X_train, y_train, cv=5, scoring='accuracy')\nval_score = []\nfor k in range(1, 20):\n    score = cross_val_score(XGBClassifier(k), X_train, y_train, cv=5).mean()\n    val_score.append(score)\n\nplt.plot(val_score)\n","8f409bcc":"model=XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n               colsample_bynode=1, colsample_bytree=1, eta=0.01,\n               eval_metric='auc', gamma=0, learning_rate=0.1, max_delta_step=0,\n               max_depth=6, min_child_weight=10, missing=None, n_estimators=100,\n               n_jobs=1, nthread=None, objective='binary:logistic')\nk = np.arange(1, 20)\ntrain_score, val_score = validation_curve(model, X_train, y_train,\n                                          'n', k, cv=5)\n\nplt.plot(k, val_score.mean(axis=1), label='validation')\nplt.plot(k, train_score.mean(axis=1), label='train')\n\nplt.ylabel('score')\nplt.xlabel('n')\nplt.legend()","66fd11a5":"param_grid = {'n': np.arange(1, 20),\n              'min_child_weight': [1, 5, 10],\n              'gamma': [0.5, 1, 1.5, 2, 5],\n              'subsample': [0.6, 0.8, 1.0],\n              'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 4, 5]\n\ngrid = GridSearchCV(XGBClassifier(ase_score=0.5, booster='gbtree', colsample_bylevel=1,\n               colsample_bynode=1, colsample_bytree=1, eta=0.01,\n               eval_metric='auc', gamma=0, learning_rate=0.1, max_delta_step=0,\n               max_depth=6, min_child_weight=10, missing=None, n_estimators=100,\n               n_jobs=1, nthread=None, objective='binary:logistic'), param_grid, cv=5)\n\ngrid.fit(X_train, y_train)","34b4c1ba":"print(grid.best_score_)\nprint(grid.best_params_)","9a05608a":"model = grid.best_estimator_\nmodel.score(X_test, y_test)","75eb0e86":"confusion_matrix(y_test, model.predict(X_test))\n","18760f7d":"## **Let's Visualize the data**","f1f0a1d9":"## **Data Exploration**","fea3ec78":"\n# **Importing Libraries**","c5868a7d":"## **Scaling and Distribution **"}}