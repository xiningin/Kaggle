{"cell_type":{"0a426183":"code","572c4d48":"code","7fbe84fe":"code","9b890287":"code","abe8be07":"code","2c4ce6d0":"code","2771ff6d":"code","f4dbd11d":"code","ed17dda1":"code","0af72bea":"code","03318b21":"code","ba2af046":"markdown","6146568a":"markdown","5132db88":"markdown","166e94ba":"markdown","90a4d019":"markdown"},"source":{"0a426183":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nprint('all done')","572c4d48":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7fbe84fe":"#reading in the dataset\nreactionsdf = pd.read_csv(\"\/kaggle\/input\/reactions.csv\")\nreactionsdf.head()\nreactionsdf.describe(include=\"all\")\nreactionsdf.sort_values(by=['Source Notes'])\nreactionsdf.head()\nreactionsdf.Name","9b890287":"#to initially get a simple readout, i assigned each of the emotions to \"happy\" or \"sad\". \n#i used the general understanding underlying those emotions.\n#i.e., shocked implies negativity but amazed implies positivity.\nHappies = ['Agreement','Amazed','Confident','Curiosity','Daydreaming','Delight','Dozing','Encouraging','Flourish','Glee','Greetings','Happiness','Inspiration','Intense','Joy','Laughter','Love','Mischief','Pleased','Pride','Showmanship','Sleepy','Surprise','Thought']","abe8be07":"#checking styles to graph results\nmpl.style.available","2c4ce6d0":"#apparently there are slightly more happy emotions than sad.\nmpl.style.use(\"fivethirtyeight\")\nHappies = ['Agreement','Amazed','Confident','Curiosity','Daydreaming','Delight','Dozing','Encouraging','Flourish','Glee','Greetings','Happiness','Inspiration','Intense','Joy','Laughter','Love','Mischief','Pleased','Pride','Showmanship','Sleepy','Surprise','Thought']\ndef happysad(Name):\n    if Name in Happies:\n        return \"Happy\"\n    else:\n        return \"sad\"\n\nreactionsdf['cat']=reactionsdf['Name'].apply(happysad)\nreactionsdf['cat'].value_counts().plot(kind='bar').set(title=\"happysads\")","2771ff6d":"#the ones requiring high level of friendship are all Happy.\nreactionsdf.sort_values(by = 'Source Notes')","f4dbd11d":"#the ones that All personalities can teach you are all Happy as well.\nreactionsdf.sort_values(by=['Source','Name'])","ed17dda1":"#here, we use the default .plot which is matplotlib anyway. \n#i used a line of code incorporating multiple commands.\nmpl.style.use('fivethirtyeight')\ndata = reactionsdf.groupby(by='Source')['cat'].value_counts(normalize=True)\nplt=data.unstack().plot(kind='bar',stacked=True,title=\"Emotions\").set(xlabel=\"Source\",ylabel='% of Happy and Sad')","0af72bea":"#here, we use the default.plot which is matplotlib anyway. \n#here, i deconstructed the last commands to try and see where the .legend command could fit. \n#still no luck with the .legend command, setting ax, using plt. commands. i'm sure i'm missing something?\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nmpl.style.use('fivethirtyeight')\nreactionsdf.groupby(by='Source')['cat'].value_counts(normalize=True)\nreactionsdf1 = reactionsdf[['Name','Source','cat']]\nrxn1 = reactionsdf1.groupby(by='Source')['cat'].value_counts(normalize=True)\nrxn1 = rxn1.to_frame()\nrxn1 = rxn1.unstack()\nrxn1.plot(kind='bar',stacked=True).set(title='Emotions')","03318b21":"#unstacking a dataframe turns it into a series?\n#performing groupby operations on a dataframe turns it into a series?\ng = rxn1.columns.levels\ng\n# the above returns column levels\nrxn2 = rxn1.unstack()\ngg = rxn2.columns.levels\n#the above does not, stating the object is a series.","ba2af046":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","6146568a":"### Emotions in Animal Crossing:The Recon\n![image.png](attachment:image.png)<h3>Hello Kaggle! I'm new to coding--just finished a Coursera certification but at a beginner\/intermediate level--and looking to develop professionally and personally as a coder. In this little project,I wanted to know how the life simulator game Animal Crossing taught emotions to the player. Emotions in this game are learned through \"reactions\" taught by animals of different personality types. <\/h3>\n<h3>I wanted to know:<br>\n1)which personality types taught which reactions?<br>\n2)were there any overall interesting characteristics about the emotions when exploratory analysis was conducted?<br>\nread on! any comments, critiques, and expansions would be great. thank you!<\/h3>\n<a href='#fin'>Click here for Conclusions and Summary<\/a>\n(img from Nintendo for Polygon.)","5132db88":"There are 20 csv files in the current version of the dataset:\n","166e94ba":"<a id = fin><h2>Conclusions:<\/h2><\/a>\n1. More happy than sad emotions were taught.<br>\n2. The emotions requiring a high degree of friendship are all happy.<br>\n3. A cursory visual examination of the graph's Happy to Sad ratios shows that the \"Peppy\" animals had the highest happy-to-sad ratio, and<br>\nthe \"Lazy\" animals the lowest. \n\n<h2>Future Directions<\/h2>\n1. statistical analysis of happy\/sad ratios between personality types: what's a significant trend?<br>\n2. expand analysis to include any information on how Nintendo planned this aspect of Animal Crossing.<br>\n3.Psychological profiling across personality types and also, a lot more n's if possible, if this analysis is going to be robust.<br>\n4.create a personality profile predicting which villagers a player would like the most as neighbors. the player would take a (hopefully) entertaining quiz to establish their profile.<br>\n\n<h2>Technical Issues:<\/h2>\n1.Not clear on the full range of multilevel indexing and graph commands used together. for instance, why am i not able to manipulate the legend on the graph despite trying: setting ax, plt.legend? Seaborn requires a dataframe which brings me to:<br>\n2.apparently any groupby operation performed with value_counts results in a series. not sure why this is but it is complicating 1, and attempts to convert series to df aren't recognized as df by the graph commands. ","90a4d019":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code."}}