{"cell_type":{"8e26f045":"code","e175f40f":"code","3af21738":"code","775730f6":"code","48663ae9":"code","8eb9c45b":"code","868d1243":"code","d4f4e6cd":"code","212702e9":"code","0b8d9dcd":"code","a7c19775":"code","8d9cf9ba":"code","47837c43":"code","57512c77":"code","a2b51fa4":"code","089afc3a":"code","d93da5d0":"code","14bb2102":"code","385b3763":"code","443ee8ab":"code","5b307ccc":"code","32681579":"code","b65f1eb5":"code","e251b9f2":"code","7922d2f0":"code","9d3fb46f":"code","fb708ffe":"code","e588c8d6":"code","e12bec67":"code","cdea3def":"code","6a942304":"code","9cb7a0d4":"code","74b5993c":"markdown","c48088a1":"markdown","5225184f":"markdown"},"source":{"8e26f045":"import numpy as np\nimport pandas as pd\nimport math","e175f40f":"df = pd.read_csv('..\/input\/mm1010\/C2.csv')","3af21738":"df.head()","775730f6":"#EDUC1 is the coumn containing the education level of te mother of the child\n#equal to less than high school (<12), high school (12)\n#more than high school but not a college graduate (>12) and college degree.\nnew_df = df['EDUC1']\nnew_df.head(2)","48663ae9":"new_df.unique()","8eb9c45b":"#1 - equal to less than high school\n#2 - high school\n#3 - more than high school but not a college graduate\n#4 - college degree","868d1243":"total_rows = new_df.count()\nprint(total_rows)","d4f4e6cd":"mask = (new_df==4)\ntotal_college = new_df.where(mask).dropna().count()\nprint(total_college\/total_rows)","212702e9":"def proportion_of_education(df):\n    total_rows = df.count()\n    new_dict = {\"less than high school\":1,\n    \"high school\":2,\n    \"more than high school but not college\":3,\n    \"college\":4}\n    for key,val in new_dict.items():\n        mask = (df==val)\n        total = df.where(mask).dropna().count()\n        new_dict[key]=(total\/total_rows)\n            \n    return new_dict\n        ","0b8d9dcd":"proportion_of_education(new_df)\n","a7c19775":"#does all the work as the above all cells\n\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/mm1010\/C2.csv')\nnew_df = df['EDUC1']\ndef proportion_of_education():\n    total_rows = new_df.count()\n    new_dict = {\"less than high school\":1,\n    \"high school\":2,\n    \"more than high school but not college\":3,\n    \"college\":4}\n    for key,val in new_dict.items():\n        mask = (new_df==val)\n        total = new_df.where(mask).dropna().count()\n        new_dict[key]=(total\/total_rows)\n            \n    return new_dict\nproportion_of_education()","8d9cf9ba":"df = pd.read_csv('..\/input\/mm1010\/C2.csv')","47837c43":"new_df_2 = df[['CBF_01','P_NUMFLU']]\nnew_df_2","57512c77":"new_df_2 = new_df_2.rename(columns={'CBF_01':'x','P_NUMFLU':'y'})\nnew_df_2","a2b51fa4":"new_df_2['x'].unique()","089afc3a":"from collections import deque\n# 1 = Breastfed\n# 2 = not breastfed\n# 99 = Don't Know\n# 77 = Missing","d93da5d0":"def average_influenza_doses(new_df,x,y):  \n    m = [1,2]\n    y1 = list()\n    for n in m:\n        mask = (new_df[x] == n)\n        new_df2 = new_df.where(mask).dropna()\n        x1 = sum(new_df2[y])\/new_df2[x].count()\n        y1.append(x1)\n    y2 = tuple(y1)\n    return y2\n\n\naverage_influenza_doses(new_df_2,'x','y')","14bb2102":"#does all the work as the above all cells\n\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/mm1010\/C2.csv')\nnew_df_2 = df[['CBF_01','P_NUMFLU']]\nnew_df_2 = new_df_2.rename(columns={'CBF_01':'x','P_NUMFLU':'y'})\ndef average_influenza_doses():  \n    m = [1,2]\n    y1 = list()\n    for n in m:\n        mask = (new_df_2['x'] == n)\n        new_df2 = new_df_2.where(mask).dropna()\n        x1 = sum(new_df2['y'])\/new_df2['x'].count()\n        y1.append(x1)\n    y2 = tuple(y1)\n    return y2\n\n\naverage_influenza_doses()","385b3763":"new_df_3 = df[['P_NUMVRC','HAD_CPOX','SEX']]\nnew_df_3.count()","443ee8ab":"#renaming the dataframe\nnew_df_3r = new_df_3.rename(columns={'P_NUMVRC':'x','HAD_CPOX':'y','SEX':'z'})\nnew_df_3r['y'].unique()\n# 2 = No\n# 1 = Yes","5b307ccc":"new_df_3r['z'].unique()\n# 1 = male\n# 2 = female","32681579":"new_df_3r['x'].unique()\n# number of doses","b65f1eb5":"new_df_3r.head()","e251b9f2":"#masking all the NaN values\nnew_df_3r_m = new_df_3r\nnew_df_3r_m = new_df_3r_m.where(new_df_3r_m['x']>0).dropna()\nnew_df_3r_m.head()","7922d2f0":"df_31 = new_df_3r_m\ndf_31_m = df_31.where(df_31['z'] == 1) #male\ndf_31_fm = df_31.where(df_31['z'] == 2) #female\nc1 = df_31_m.where(df_31_m['y'] == 1).count()['z']\nc2 = df_31_m.where(df_31_m['y'] == 2).count()['z']\nc3 = df_31_fm.where(df_31_fm['y'] == 1).count()['z']\nc4 = df_31_fm.where(df_31_fm['y'] == 2).count()['z']\n\nc3\/c4\n","9d3fb46f":"def chickenpox_by_sex():\n    new_dict = {'male':0,'female':0}\n    \n    df_31 = new_df_3r_m\n    df_31_m = df_31.where(df_31['z'] == 1) #male\n    df_31_fm = df_31.where(df_31['z'] == 2) #female\n    c1 = df_31_m.where(df_31_m['y'] == 1).count()['z']\n    c2 = df_31_m.where(df_31_m['y'] == 2).count()['z']\n    c3 = df_31_fm.where(df_31_fm['y'] == 1).count()['z']\n    c4 = df_31_fm.where(df_31_fm['y'] == 2).count()['z']\n    new_dict['male'] = c1\/c2\n    new_dict['female'] = c3\/c4\n    return new_dict  \n\nchickenpox_by_sex()","fb708ffe":"def chickenpox_by_sex():\n    import pandas as pd\n\n    df = pd.read_csv('..\/input\/mm1010\/C2.csv')\n    new_df_3 = df[['P_NUMVRC','HAD_CPOX','SEX']]\n    \n    new_df_3r = new_df_3.rename(columns={'P_NUMVRC':'x','HAD_CPOX':'y','SEX':'z'})\n    new_df_3r = new_df_3r.where(new_df_3r_m['x']>0).dropna()\n    \n    new_dict = {'male':0,'female':0}\n    \n    df_31 = new_df_3r\n    df_31_m = df_31.where(df_31['z'] == 1) #male\n    df_31_fm = df_31.where(df_31['z'] == 2) #female\n    \n    c1 = df_31_m.where(df_31_m['y'] == 1).count()['z']\n    c2 = df_31_m.where(df_31_m['y'] == 2).count()['z']\n    c3 = df_31_fm.where(df_31_fm['y'] == 1).count()['z']\n    c4 = df_31_fm.where(df_31_fm['y'] == 2).count()['z']\n    \n    new_dict['male'] = c1\/c2\n    new_dict['female'] = c3\/c4\n    \n    return new_dict  \n\nchickenpox_by_sex()","e588c8d6":"import pandas as pd\nimport scipy.stats as stats\nimport numpy as np\n\ndf = pd.read_csv('..\/input\/mm1010\/C2.csv')\n","e12bec67":"new_df_4 = df[['P_NUMVRC','HAD_CPOX']]\n    \nnew_df_4 = new_df_4.rename(columns={'P_NUMVRC':'x','HAD_CPOX':'y'})\nnew_df_4m = new_df_4.where(new_df_4['y']<3).dropna()","cdea3def":"corr, pval=stats.pearsonr(new_df_4m['y'],new_df_4m['x'])\ncorr ","6a942304":"pval","9cb7a0d4":"def corr_chickenpox():\n    import scipy.stats as stats\n    import numpy as np\n    import pandas as pd\n    \n    df = pd.read_csv('..\/input\/mm1010\/C2.csv')\n    new_df_4 = df[['P_NUMVRC','HAD_CPOX']]\n    \n    new_df_4 = new_df_4.rename(columns={'P_NUMVRC':'x','HAD_CPOX':'y'})\n    new_df_4m = new_df_4.where(new_df_4['y']<3).dropna()\n    \n    corr, pval=stats.pearsonr(new_df_4m['y'],new_df_4m['x'])\n    \n    return corr\n\ncorr_chickenpox()","74b5993c":"It would be interesting to see if there is any evidence of a link between vaccine \neffectiveness and sex of the child. Calculate the ratio of the number of children \nwho contracted chickenpox but were vaccinated against it (at least one varicella dose) \nversus those who were vaccinated but did not contract chicken pox. Return results by sex.","c48088a1":"Let's explore the relationship between being fed breastmilk as a child and getting a seasonal influenza vaccine from a \n\nhealthcare provider. Return a tuple of the average number of influenza vaccines for those children we know received \n\nbreastmilk as a child and those who know did not.\n\nThis function should return a tuple in the form (use the correct numbers:\n\n(2.5, 0.1)","5225184f":"A correlation is a statistical relationship between two variables. \nIf we wanted to know if vaccines work, we might look at the correlation between \nthe use of the vaccine and whether it results in prevention of the infection or disease [1]. \nIn this question, you are to see if there is a correlation between having had the chicken pox and the\nnumber of chickenpox vaccine doses given (varicella).\n\nSome notes on interpreting the answer. The had_chickenpox_column is either 1 (for yes) or 2 (for no), \nand the num_chickenpox_vaccine_column is the number of doses a child has been given of the varicella \nvaccine. A positive correlation (e.g., corr > 0) means that an increase in had_chickenpox_column \n(which means more no\u2019s) would also increase the values of num_chickenpox_vaccine_column \n(which means more doses of vaccine). If there is a negative correlation (e.g., corr < 0), \nit indicates that having had chickenpox is related to an increase in the number of vaccine doses.\nAlso, pval is the probability that we observe a correlation between had_chickenpox_column and\nnum_chickenpox_vaccine_column which is greater than or equal to a particular value occurred by chance.\nA small pval means that the observed correlation is highly unlikely to occur by chance. \nIn this case, pval should be very small (will end in e-18 indicating a very small number).\n\n[1] This isn\u2019t really the full picture, since we are not looking at when the dose was given.\nIt\u2019s possible that children had chickenpox and then their parents went to get them the vaccine.\nDoes this dataset have the data we would need to investigate the timing of the dose?"}}