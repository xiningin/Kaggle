{"cell_type":{"3f20477c":"code","4cf0555e":"code","ca52a858":"code","09f5180f":"code","e377e70e":"code","b57d42e2":"code","568b986e":"code","26b5bdd4":"code","d5aa0e11":"code","376e094f":"code","dca816bb":"code","2ee8eba2":"code","5fb1cd5d":"code","15f68a54":"code","26d32a88":"code","c218a0c3":"code","115512b2":"code","8b0fe73b":"code","6dcec6d7":"code","5b24e2cf":"code","381184ac":"code","752bfec3":"code","7466e7d6":"code","3b15bfac":"code","180d955d":"code","9b83a5bd":"code","38db7fc7":"code","8fd8f0ea":"code","f437d2e0":"code","811b93f8":"code","3d95c3cd":"code","7b8bfd68":"code","8968d8b6":"markdown","96dc3342":"markdown","4c69c87e":"markdown"},"source":{"3f20477c":"# importando as bibliotecas necessarias\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.xception import preprocess_input\nfrom keras.metrics import mean_absolute_error\nimport tensorflow as tf\nimport datetime, os","4cf0555e":"# fazendo a leitura dos dados nos diret\u00f3rios\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n        #print(os.path.join(dirname, filename))","ca52a858":"# criando os dataframes de teste e de treino\ndf_train = pd.read_csv('\/kaggle\/input\/i2a2-bone-age-regression\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/i2a2-bone-age-regression\/test.csv')\n\n# visualizando o formato linhas por colunas\nprint(\"treino:\" + str(df_train.shape))\nprint(\"teste:\" + str(df_test.shape))","09f5180f":"# visualizando uma amostra da base de treino, mudando a variavel do .sample() \u00e9 possivel plotar mais imagens\nfor fileName, patientSex, boneage in df_train[['fileName','patientSex','boneage']].sample(1).values:\n    img_name = str(fileName)\n    img = mpimg.imread(\"\/kaggle\/input\/i2a2-bone-age-regression\/images\/\"+img_name)\n    plt.imshow(img)\n    plt.title('Image: {} Boneage: {} Male: {}'.format(fileName, patientSex, boneage))\n    plt.show()","e377e70e":"# isualizando os 5primeiros itens do dataframe\ndf_train.head()","b57d42e2":"# visualizando uma amostra da base de teste, mudando a variavel do .sample() \u00e9 possivel plotar mais imagens\n# possivel ver que em alguns momentos apareceram duas m\u00e3os nas imagens e algumas de cabe\u00e7a para baixo\nfor fileName, patientSex in df_test[['fileName','patientSex']].sample(1).values:\n    img_name = str(fileName)\n    img = mpimg.imread(\"\/kaggle\/input\/i2a2-bone-age-regression\/images\/\"+img_name)\n    plt.imshow(img)\n    plt.title('Image: {} Sex: {}'.format(fileName, patientSex))\n    plt.show()","568b986e":"df_test.head()","26b5bdd4":"# criando um diret\u00f3rio de sa\u00edda para as imagens de teste\n# caso a pasta j\u00e1 exista ira gerar um erro... FileExistsError: [Errno 17] File exists: '..\/output\/working\/preview'\n# ent\u00e3o rode uma vez apenas...\nos.makedirs('..\/output\/working\/preview')","d5aa0e11":"# Fazendo o processo de corte das imagens para tentar obter apenas as imagens da m\u00e3o esquerda, ou do lado esquerdo.\n# \u00e9 uma abordagem bem simplista...\nfor row in df_test.iterrows():\n    img_name = row[1][0]\n    img = mpimg.imread(\"\/kaggle\/input\/i2a2-bone-age-regression\/images\/\"+img_name)\n    h, w = img.shape\n    \n    # se a largura da imagem estiver entre 800 e 900 utilizei dois ter\u00e7os da largura\n    if w > 800 and w < 900:\n        img = img[0:int(h),0:int(w-(w\/3))]\n        #plt.imshow(img)\n        #plt.title('Image: {} Sex: {}'.format(row[1][0], row[1][1]))\n        #plt.show()\n        #print(img.shape)\n        mpimg.imsave('..\/output\/working\/preview\/'+img_name, img)\n        \n    # se a largura da imagem estiver acima 900 utilizei metade    \n    elif w > 900:\n        img = img[0:int(h),0:int(w\/2)]\n        #plt.imshow(img)\n        #plt.title('Image: {} Sex: {}'.format(row[1][0], row[1][1]))\n        #plt.show()\n        #print(img.shape)\n        mpimg.imsave('..\/output\/working\/preview\/'+img_name, img)\n        \n    # caso seja menor que 800 \u00e9 utilizada inteira\n    else:\n        #plt.imshow(img)\n        #plt.title('Image: {} Sex: {}'.format(row[1][0], row[1][1]))\n        #plt.show()\n        #print(img.shape)\n        mpimg.imsave('..\/output\/working\/preview\/'+img_name, img)","376e094f":"# fazendo leitura dos dados no diret\u00f3rio criado para armazenar as imagens\nfor dirname, _, filenames in os.walk('\/kaggle\/output'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n        #print(os.path.join(dirname, filename))","dca816bb":"# total de arquivos... 249 \nfile_count = len(filenames)\nfile_count","2ee8eba2":"# visualizando os dados na pasta que acabamos de salvar\nfor fileName, patientSex in df_test[['fileName','patientSex']].sample(3).values:\n    img_name = str(fileName)\n    img = mpimg.imread(\"\/kaggle\/output\/working\/preview\/\"+img_name)\n    plt.imshow(img)\n    plt.title('Image: {} Sex: {}'.format(fileName, patientSex))\n    plt.show()","5fb1cd5d":"# maior idade do dataset\nprint('MAX age: ' + str(df_train['boneage'].max()) + ' months')\n\n# menor idade do dataset\nprint('MIN age: ' + str(df_train['boneage'].min()) + ' months')\n\n# idade media\nmean_bone_age = df_train['boneage'].mean()\nprint('mean: ' + str(mean_bone_age))\n\n# mediana\nprint('median: ' +str(df_train['boneage'].median()))\n\n# desvio padr\u00e3o das idades\nstd_bone_age = df_train['boneage'].std()\n\n# modelos podem performar melho quando s\u00e3o normalizados os dados\ndf_train['bone_age_z'] = (df_train['boneage'] - mean_bone_age)\/(std_bone_age)\n\n# visualizando o dataset novamente\nprint(df_train.head())","15f68a54":"# dividindo o dataframe em uma base de treino e uma de valida\u00e7\u00e3o, 20% para validar e 80% para treinar\ndfTrain, dfValid = train_test_split(df_train, test_size = 0.2, random_state = 0)","26d32a88":"# tamanho da imagem a ser utilizado\nimg_size = 256\n\n# criando objetos para receber a fun\u00e7\u00e3o ImageDataGenerator() a serem usados no treinamento e valida\u00e7\u00e3o\ntrain_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\nval_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\n# treino - data generator\ntrain_generator = train_data_generator.flow_from_dataframe(\n    dataframe = dfTrain,\n    directory = '\/kaggle\/input\/i2a2-bone-age-regression\/images\/', \n    x_col= 'fileName',\n    y_col= 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode= 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n# validador - data generator\nval_generator = val_data_generator.flow_from_dataframe(\n    dataframe = dfValid,\n    directory = '\/kaggle\/input\/i2a2-bone-age-regression\/images\/',\n    x_col = 'fileName',\n    y_col = 'bone_age_z',\n    batch_size = 32,\n    seed = 42,\n    shuffle = True,\n    class_mode = 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))\n\n# test - data generator\ntest_data_generator = ImageDataGenerator(preprocessing_function = preprocess_input)\n\n# \u00e9 daqui que vai sair a base de teste para gerar o data set de submiss\u00e3o\ntest_generator = val_data_generator.flow_from_dataframe(\n    dataframe = df_test,\n    directory = '\/kaggle\/output\/working\/preview\/',\n    x_col = 'fileName',\n    y_col = 'patientSex',\n    batch_size = 32,\n    #seed = 42,\n    shuffle = True,\n    class_mode = 'other',\n    flip_vertical = True,\n    color_mode = 'rgb',\n    target_size = (img_size, img_size))","c218a0c3":"# separando o validador em x e y\ntest_X, test_Y = next(val_data_generator.flow_from_dataframe( \n                            dfValid, \n                            directory = '\/kaggle\/input\/i2a2-bone-age-regression\/images\/',\n                            x_col = 'fileName',\n                            y_col = 'bone_age_z', \n                            target_size = (img_size, img_size),\n                            batch_size = 2523,\n                            class_mode = 'other'\n                            )) ","115512b2":"# visualizando o formato de X\nprint(test_X.shape)\n\n# visualizando o formato de Y\nprint(test_Y.shape)","8b0fe73b":"# fun\u00e7\u00e3o para plotar o hist\u00f3rico do aprendizado\ndef plot_it(history):\n    '''function to plot training and validation error'''\n    fig, ax = plt.subplots( figsize=(20,10))\n    ax.plot(history.history['mae_in_months'])\n    ax.plot(history.history['val_mae_in_months'])\n    plt.title('Model Error')\n    plt.ylabel('error')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Val'], loc='upper right')\n    ax.grid(color='black')\n    plt.show()","6dcec6d7":"# fun\u00e7\u00e3o que retorna o erro medio absoluto em meses\ndef mae_in_months(x_p, y_p):\n    '''function to return mae in months'''\n    return mean_absolute_error((std_bone_age*x_p + mean_bone_age), (std_bone_age*y_p + mean_bone_age)) ","5b24e2cf":"# importando mais algumas libs necessarias\nfrom tensorflow.keras.layers import GlobalMaxPooling2D, Dense,Flatten\nfrom tensorflow.keras.callbacks import TensorBoard, ModelCheckpoint,EarlyStopping,ReduceLROnPlateau\nfrom tensorflow.keras import Sequential\n\n# importando a Xception pr\u00e9-treinada\nmodel_1 = tf.keras.applications.xception.Xception(input_shape = (img_size, img_size, 3),\n                                           include_top = False,\n                                           weights = 'imagenet')\n\n# nesta etapa foi combinada a rede pr\u00e9-treinada model1 com as camadas model2\nmodel_1.trainable = True\nmodel_2 = Sequential()\n# adiciona a rede pr\u00e9-treinada na nova rede model2\nmodel_2.add(model_1)\n# criando ultimas camadas \nmodel_2.add(GlobalMaxPooling2D())\nmodel_2.add(Flatten())\nmodel_2.add(Dense(10, activation = 'relu'))\nmodel_2.add(Dense(1, activation = 'linear'))\n\n\n# compilando o modelo\nmodel_2.compile(loss ='mse', optimizer= 'adam', metrics = [mae_in_months] )\n\n# visualizando o sumario da rede\nmodel_2.summary()","381184ac":"# armazenando saidas, comandos para visuaizar o tensorboard que n\u00e3o est\u00e3o fucnionando\n# https:\/\/www.tensorflow.org\/tensorboard\/get_started\n\n#%load_ext tensorboard\nlogs_dir = '.\\logs'\n#%tensorboard --logdir {logs_dir}","752bfec3":"# early stopping - efetuada a parada do treinamento quando o value_loss n\u00e3o obtem mais melhorias\nearly_stopping = EarlyStopping(monitor='val_loss',\n                              min_delta=0,\n                              patience= 5,\n                              verbose=0, mode='auto')\n\n# model checkpoint - armazena o melhor modelo ou peso treinado para ser usado no teste final\n# https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/ModelCheckpoint\nmc = ModelCheckpoint('best_model.h5', monitor='val_loss', mode='min', save_best_only=True)\n\n#tensorboard callback -->> n\u00e3o entendo bem de como fucniona o tensor board mas foi necessario manter aqui no c\u00f3digo para mantero o callback\n# \nlogdir = os.path.join(logs_dir,datetime.datetime.now().strftime('%Y%m%d-%H%M%S'))\ntensorboard_callback = TensorBoard(logdir, histogram_freq = 1)\n\n#reduce lr on plateau - aplica a redu\u00e7\u00e3o da taxa de aprendizado quando a metrica para de ser melhorada, \u00e9 aplicado a cada 10 epocas\n# https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/ReduceLROnPlateau\nred_lr_plat = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, verbose=0, mode='auto', min_delta=0.0001, cooldown=0, min_lr=0)\n\n# https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/ModelCheckpoint\ncallbacks = [tensorboard_callback,early_stopping,mc, red_lr_plat]\n\n\n#fit model\nhistory = model_2.fit_generator(train_generator,\n                            steps_per_epoch = 300,\n                            validation_data = val_generator,\n                            validation_steps = 1,\n                            epochs = 50,\n                            callbacks= callbacks)\n\n# mostrando o treinamento\nhistory\n#%tensorboard --logdir logs\nplot_it(history)","7466e7d6":"# model_2.load_weights('best_model.h5')\n# calculo para retornar o valor correto da predi\u00e7\u00e3o devido a normaliza\u00e7\u00e3o feita anteriormente\npred = mean_bone_age + std_bone_age*(model_2.predict(test_X, batch_size = 32, verbose = True))\ntest_months = mean_bone_age + std_bone_age*(test_Y)\n\n# obs.: algumas etapas neste trecho n\u00e3o comprendi muito bem estou estudando ainda.\nord_ind = np.argsort(test_Y)\nord_ind = ord_ind[np.linspace(0, len(ord_ind)-1, 8).astype(int)] # take 8 evenly spaced ones\nfig, axs = plt.subplots(4, 2, figsize = (15, 30))\nfor (ind, ax) in zip(ord_ind, axs.flatten()):\n    ax.imshow(test_X[ind, :,:,0], cmap = 'bone')\n    ax.set_title('Age: %fY\\nPredicted Age: %fY' % (test_months[ind]\/12.0, \n                                                           pred[ind]\/12.0))\n    ax.axis('off')\nfig.savefig('trained_image_predictions.png', dpi = 300)","3b15bfac":"# Plotando algumas imagens para visualiza\u00e7\u00e3o dos resultados\nfig, ax = plt.subplots(figsize = (7,7))\nax.plot(test_months, pred, 'r.', label = 'predictions')\nax.plot(test_months, test_months, 'b-', label = 'actual')\nax.legend(loc = 'upper right')\nax.set_xlabel('Actual Age (Months)')\nax.set_ylabel('Predicted Age (Months)')","180d955d":"# utilizando o test_generator criado etapas acima\ntest_generator.reset()\ny_pred = model_2.predict_generator(test_generator)\npredicted = y_pred.flatten()\npredicted_months = mean_bone_age + std_bone_age*(predicted)\nfilenames=test_generator.filenames\nresults=pd.DataFrame({\"fileName\":filenames,\n                      \"boneage\": predicted_months})\n# salvando o resultado para submeter no kaggle, o arquivo ficara no outputs basta efetuar o download.\nresults.to_csv(\"results.csv\",index=False)","9b83a5bd":"# caso queira remover alguma coisa do diret\u00f3rio de saida\n\n# os.remove(\"\/kaggle\/working\/results2.csv\")","38db7fc7":"# Visualizando o dataframe de results para ter certeza que esta com nomes de coluns corretos\nresults.head()","8fd8f0ea":"from sklearn.metrics import mean_squared_error\nfrom math import sqrt\nfrom sklearn import metrics\n\n# raiz do erro m\u00e9dio quadrado\nrmse = sqrt(mean_squared_error(test_months, pred))\nrmse","f437d2e0":"# erro maximo\nmetrics.max_error(test_months, pred)","811b93f8":"# r score\nmetrics.r2_score(test_months, pred)","3d95c3cd":"# erro medio quadrado\nmetrics.mean_squared_error(test_months, pred)","7b8bfd68":"# erro medio absoluto\nmetrics.mean_absolute_error(test_months, pred)","8968d8b6":"Fiz uso de um kernel existe no kaggle (https:\/\/www.kaggle.com\/daenys2000\/bone-age-prediction\/output?select=results.csv), adaptei algumas etapas, de acordo com o este artigo no Medium https:\/\/medium.com\/analytics-vidhya\/image-recognition-using-pre-trained-xception-model-in-5-steps-96ac858f4206 o modelo Xception gera resultados muito bons ![image.png](attachment:image.png) ent\u00e3o utilizei a mesma tecnica.","96dc3342":"Algumas m\u00e9tricas aplicadas para compreender os resultados finais. Vale dar uma pesquisada sobre as metricas aplicadas a regress\u00e3o linear... https:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.metricsimage.pngAlgumas se aplicam e outras pode ser que n\u00e3o...\n![image.png](attachment:image.png)","4c69c87e":"Para tratar os dados da base de teste usei uma tecnica bem simples, mas que possui certa efici\u00eancia,\ncortando as imagens de acordo com sua largura, criei um for simples e condicional if..."}}