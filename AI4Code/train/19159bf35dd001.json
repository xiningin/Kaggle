{"cell_type":{"f004fc5f":"code","639feda1":"code","c36f3795":"code","4dcc52f3":"code","dab5a232":"code","9315c5c4":"code","4f61dd88":"code","96bc79d9":"code","ecadc50a":"code","f7be43f8":"code","a5f514d4":"code","92ccce9f":"markdown","1a2699ee":"markdown","93613cb6":"markdown","cab24ff0":"markdown","ac75c360":"markdown","1f89e35c":"markdown"},"source":{"f004fc5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","639feda1":"dataset = pd.read_csv(\"\/kaggle\/input\/breast-cancer-prediction-dataset\/Breast_cancer_data.csv\")\ndataset","c36f3795":"x = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","4dcc52f3":"y = y.reshape((len(y), 1))","dab5a232":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=56)","9315c5c4":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.fit_transform(x_test)","4f61dd88":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(x_train, y_train)","96bc79d9":"import matplotlib.pyplot as plt","ecadc50a":"y_pred = classifier.predict(x_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","f7be43f8":"from sklearn.metrics import plot_confusion_matrix, accuracy_score\nplot_confusion_matrix(classifier, x_test, y_test)\nplt.show()","a5f514d4":"print(accuracy_score(y_test, y_pred)*100,\" percent accuracy\")","92ccce9f":"## Checking 'accuracy-score'","1a2699ee":"## Training the Logistic Regression model on the Training set","93613cb6":"## Splitting the dataset into the Training set and Test set","cab24ff0":"## Making the Confusion Matrix","ac75c360":"## Feature Scaling","1f89e35c":"## Predicting the Test set results"}}