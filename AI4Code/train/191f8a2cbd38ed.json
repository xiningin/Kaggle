{"cell_type":{"b1e3e429":"code","3da69d50":"code","ce15a0e7":"code","3ce4449e":"code","67fcb422":"code","23db41fe":"code","8fe02ee6":"code","1c4cce22":"code","1e2d162b":"code","4c040629":"code","495b09fb":"code","1bab642b":"code","075eae70":"code","fed7b5e1":"code","60f9f235":"code","6377de7c":"code","fb483a3b":"code","db55e40b":"code","982815d7":"code","9ab5ac8e":"code","5863dc6a":"code","dfb7b7d6":"code","2ac9999a":"code","d7c92e3e":"code","ad9bac2c":"code","231d1de4":"code","d1b3b292":"code","59810d21":"code","fcda6d7e":"code","9d65a6b6":"code","cec3b136":"code","c595ab7b":"code","e979c5fd":"code","aad5517e":"markdown","1308557b":"markdown","225d26d2":"markdown"},"source":{"b1e3e429":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","3da69d50":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('..\/input\/us-counties-covid-19-dataset\/us-counties.csv')\n\ndata=df.drop(['fips'], axis = 1) \ndata","ce15a0e7":"data.sort_values(by=['cases'], ascending=False)","3ce4449e":"data.sort_values(by=['deaths'], ascending=False)","67fcb422":"plt.figure(figsize=(12,8)) # Figure size\ndata.groupby(\"state\")['cases'].max().plot(kind='bar', color='olivedrab')","23db41fe":"data.plot.line()","8fe02ee6":"plt.figure() # for defining figure sizes\ndata.plot(x='state', y='deaths', figsize=(12,8), color='goldenrod')","1c4cce22":"WA=data.loc[data['state']== 'Washington']\nWA","1e2d162b":"WA.groupby('county').plot(x='date', y='deaths')","4c040629":"NY=data.loc[data['state']== 'New York']\nNY","495b09fb":"DF1 = pd.concat([WA,NY])\nDF1","1bab642b":"DFGroup = DF1.groupby(['cases'])\n\nDFGPlot = DFGroup.sum().unstack().plot(kind='bar', figsize=(15,10))","075eae70":"plt.style.use('ggplot')\nWA.plot(kind='bar', figsize=(16,9))\nplt.ylabel('total')\n","fed7b5e1":"DF1.plot('state',['deaths','cases'],kind = 'line', figsize=(16,9))","60f9f235":"plt.figure(figsize=(16,9)) # Figure size\nsns.lineplot(x='date', y='cases', data=WA, marker='o', color='lightseagreen') \nplt.title('Cases in Washington') # Title\nplt.xticks(DF1.date.unique(), rotation=90) # All values in the x axis rotate 90 degrees\nplt.show()","6377de7c":"plt.figure(figsize=(16,9)) # Figure size\nsns.lineplot(x='date', y='cases', data=NY, marker='o', color='darkmagenta') \nplt.title('Cases in New York state') # Title\nplt.xticks(DF1.date.unique(), rotation=90) # All values in the x axis rotate 90 degrees\nplt.show()","fb483a3b":"plt.figure(figsize=(16,9)) # Figure size\nsns.lineplot(x='date', y='cases', data=DF1, marker='o', color='royalblue') \nplt.title('Cases in the states of WA and NY') # Title\nplt.xticks(DF1.date.unique(), rotation=90) # All values in the x axis rotate 90 degrees\nplt.show()","db55e40b":"DF1.corr().style.background_gradient(cmap='magma')","982815d7":"ax = WA.plot()\nNY.plot(ax=ax)","9ab5ac8e":"plt.figure(figsize=(16,11))\nsns.lineplot(x=\"cases\", y=\"deaths\", hue=\"county\",data=WA)","5863dc6a":"plt.figure(figsize=(16,11))\nsns.lineplot(x=\"cases\", y=\"deaths\", hue=\"state\",data=DF1)","dfb7b7d6":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split ","2ac9999a":"X = WA['cases'].values.reshape(-1,1)\ny = WA['deaths'].values.reshape(-1,1)","d7c92e3e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","ad9bac2c":"regressor = LinearRegression()  \nregressor.fit(X_train, y_train) #training the algorithm","231d1de4":"print(regressor.intercept_)\nprint(regressor.coef_)","d1b3b292":"y_pred = regressor.predict(X_test)","59810d21":"preds1 = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\npreds1","fcda6d7e":"plt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","9d65a6b6":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","cec3b136":"LogReg = LogisticRegression()  \nLogReg.fit(X_train, y_train) #training the algorithm","c595ab7b":"y_pred = LogReg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(LogReg.score(X_test, y_test)))","e979c5fd":"accuracy = metrics.accuracy_score(y_test, y_pred)\naccuracy_percentage = 100 * accuracy\naccuracy_percentage","aad5517e":"Regressions","1308557b":"Correlation:","225d26d2":"Across the country"}}