{"cell_type":{"d39d920b":"code","9c3a55cf":"code","13b771b1":"code","53ff3388":"code","1c380f96":"code","36cf62b2":"code","41d53b7e":"code","dbb51854":"code","7d55c5fc":"code","f0c6b848":"code","0e8f4830":"code","ca6f942a":"code","bf090742":"code","ce4b956f":"code","0560e96b":"code","4d6b564c":"code","69309ddd":"code","5191852f":"code","c1787f93":"code","601d8799":"code","21b7b0a5":"code","bf3291af":"code","69fd4230":"code","2675b4b9":"code","1abfca43":"code","648eb657":"markdown","0f84b2ce":"markdown","210a619d":"markdown"},"source":{"d39d920b":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\n\nfrom textblob import TextBlob\n\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","9c3a55cf":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","13b771b1":"df = pd.read_csv(\"\/kaggle\/input\/GP Orders - 5.csv\",encoding=\"utf-8\", delimiter=',')\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head(5)","53ff3388":"df = df.rename(columns={'Order Number': 'Order_Number',\"Order Status\":\"Order_Status\", \"Book Name\":\"Book_Name\",\"Order Date & Time\":\"Order_Date\",\"City\":\"Billing_City\", \"Payment Method\":\"Payment_Method\", \"Total items\":\"Total_Items\", \"Total weight (grams)\": \"Total_Weight\"})\ndf.head(5)","1c380f96":"df.isnull().sum()","36cf62b2":"df[df['Book_Name'].isna()]","41d53b7e":"df[df['Billing_City'].isna()]","dbb51854":"df.dropna(inplace= True)","7d55c5fc":"nRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f0c6b848":"df.Order_Status.unique()","0e8f4830":"df.Order_Status.value_counts()\n","ca6f942a":"# Set the width and height of the figure\nplt.figure(figsize=(14,5))\nhistogram= df.Order_Status.hist()\n\n# Rotate the x-labels by 30 degrees, and keep the text aligned horizontally\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.title(\"NO. of Orders vs Order Status\")\nplt.xlabel(\"Order Status\")\nplt.ylabel(\"Number of Orders\")\nplt.show()","bf090742":"df.Billing_City.nunique()","ce4b956f":"df.Billing_City.value_counts()","0560e96b":"cities = df.Billing_City.unique()\ncities","4d6b564c":"#Convert Billing_City into lower case letters\ndf['Billing_City'] = df['Billing_City'].str.lower()\ndf['Billing_City'] = df['Billing_City'].str.strip()","69309ddd":"#Convert Book_Name into lower case letters\ndf['Book_Name'] = df['Book_Name'].str.lower()\ndf['Book_Name'] = df['Book_Name'].str.strip()\ndf","5191852f":"df['Payment_Method'] = df['Payment_Method'].replace({\"Cash on Delivery (COD)\": \"Cash on delivery\"})\ndf.Payment_Method.value_counts().to_frame('counts')","c1787f93":"# Set the width and height of the figure\nplt.figure(figsize=(14,5))\n\ndf.Payment_Method.value_counts().plot(kind='bar')\n# Rotate the x-labels by 30 degrees, and keep the text aligned horizontally\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.title(\"Payment Methods vs. Order Status\")\nplt.xlabel(\"Payment Method\")\nplt.ylabel(\"Number of Deliveries\")\n\nplt.show()","601d8799":"#Shout out muhammadismail99 for this function\n\nfrom itertools import chain\n# return list from series of comma-separated strings\ndef chainer(s):\n    return list(chain.from_iterable(s.str.split('\/')))\n\n# calculate lengths of splits\nlens = df['Book_Name'].str.split('\/').map(len)\n\n# create new dataframe, repeating or chaining as appropriate\ndf = pd.DataFrame({'Order_Number': np.repeat(df['Order_Number'], lens),\n                    'Order_Status': np.repeat(df['Order_Status'], lens),\n                    'Book_Name': chainer(df['Book_Name']),\n                    'Order_Date': np.repeat(df['Order_Date'], lens),\n                    'Billing_City': np.repeat(df['Billing_City'], lens)})","21b7b0a5":"df = df.assign(Order_Books_Name=df.Book_Name.str.split(\"\/\")).explode(\"Book_Name\")","bf3291af":"# Set the width and height of the figure\nplt.figure(figsize=(14,5))\n\ntop_10_seller = df.Order_Books_Name.explode().value_counts()[:10].plot.bar()\n\ndf.Payment_Method.value_counts().plot(kind='bar')\n\n# Rotate the x-labels by 30 degrees, and keep the text aligned horizontally\nplt.xticks(rotation=30, horizontalalignment=\"center\")\nplt.title(\"Top 10 Best Selling Books\")\nplt.xlabel(\"Books\")\nplt.ylabel(\"Number of Orders\")\nplt.show()","69fd4230":"top_selling_books = df[df['Order_Status']=='Completed']['Book_Name'].value_counts()\ntop_selling_books.head(1)","2675b4b9":"\ntop10 = df[\"Book_Name\"].value_counts().nlargest(10).to_frame()\n\ngraph = px.bar(top10, y =top10['Book_Name'], x = top10.index, title = 'Top 10 Books ')\n\ngraph.update_xaxes(title=\"Books\")\ngraph.update_yaxes(title=\"Count\")\ngraph.update_traces()\ngraph.show()","1abfca43":"df[\"Order_Date\"] = pd.DatetimeIndex(df[\"Order_Date\"])\ndf['date'] = df['Order_Date'].dt.date\ndf['time'] = df['Order_Date'].dt.time\ndf[\"Day_Name\"] = df[\"Order_Date\"].dt.day_name()\ndf[\"Week_Day\"] = df[\"Order_Date\"].dt.dayofweek\ndf[\"DayofYear\"] = df[\"Order_Date\"].dt.dayofyear\ndf[\"Month_Number\"] = df[\"Order_Date\"].dt.month\ndf[\"Month_Name\"] = df[\"Order_Date\"].dt.month_name()\ndf['year'] = df[\"Order_Date\"].dt.year\ndf.sample(50)","648eb657":"Rename column names for better EDA and Let's take a quick look at what the data looks like:","0f84b2ce":"Best Selling Book","210a619d":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}