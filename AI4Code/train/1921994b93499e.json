{"cell_type":{"12917386":"code","684e34e1":"code","405f248a":"code","dc9154c1":"code","c7e8f40c":"code","d464519a":"code","9900d35d":"code","aaddbff5":"code","f2f17ec2":"code","4a3a17db":"code","1b582bb7":"code","8c28f398":"code","419042ee":"code","64a82a4c":"code","ad5bca3c":"code","c7c65d45":"code","efe6e3f2":"code","c4407ac5":"code","da435fde":"markdown","870a5b49":"markdown","96146ed2":"markdown","ded35b89":"markdown","f6937792":"markdown","cbb3cca0":"markdown"},"source":{"12917386":"%%capture\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libjpeg-turbo-2.1.0-h7f98852_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/libgcc-ng-9.3.0-h2828fa1_19.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/gdcm-2.8.9-py37h500ead1_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/conda-4.10.1-py37h89c1867_0.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/certifi-2020.12.5-py37h89c1867_1.tar.bz2' -c conda-forge -y\n!conda install '\/kaggle\/input\/pydicom-conda-helper\/openssl-1.1.1k-h7f98852_0.tar.bz2' -c conda-forge -y","684e34e1":"%%capture\n!pip install ..\/input\/icevision08-kagcuda\/loguru-0.5.3-py3-none-any.whl -f .\/ --no-index --no-deps\n!pip install ..\/input\/icevision08-kagcuda\/timm-0.4.9-py3-none-any.whl -f .\/ --no-index --no-deps\n!pip install ..\/input\/icevision08-kagcuda\/effdet-0.2.4-py3-none-any.whl -f .\/ --no-index --no-deps\n!pip install ..\/input\/icevision08-kagcuda\/icevision-0.8.0-py3-none-any.whl -f .\/ --no-index --no-deps\n!pip install ..\/input\/icevision08-kagcuda\/omegaconf-2.0.6-py3-none-any.whl -f .\/ --no-index --no-deps","405f248a":"%%capture\n%mkdir -p \/root\/.icevision\/fonts\n%cp \/kaggle\/input\/icevision08-kagcuda\/SpaceGrotesk-Medium.ttf \/root\/.icevision\/fonts\/","dc9154c1":"%%capture\n!pip install ..\/input\/pycocotools202\/pycocotools-2.0.2-cp37-cp37m-linux_x86_64.whl -f .\/ --no-index --no-deps","c7e8f40c":"from fastai.vision.all import *\nfrom fastai.medical.imaging import *\nimport pydicom\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nimport albumentations as A\nimport cv2\nimport gdcm\nfrom tqdm.auto import tqdm\nfrom joblib import Parallel, delayed\nimport PIL","d464519a":"def Dicom2array(path):\n    im = pydicom.dcmread(path)\n    is_mono1 = (im.PhotometricInterpretation == \"MONOCHROME1\")\n    im = np.array(apply_voi_lut(im.pixel_array, im))\n    if is_mono1:\n        im = np.amax(im) - im\n    im = im - np.min(im)\n    im = im \/ np.max(im)\n    im = (im * 255).astype(np.uint8)\n    return im\n\ndef Dicom2jpg(file):\n    img = Dicom2array(file)        \n    out_path = Path('\/kaggle\/working')\/Path(*file.parts[3:]).with_suffix('.jpg')\n    os.makedirs(out_path.parent, exist_ok=True)\n    cv2.imwrite(str(out_path), img)","9900d35d":"dicom_file = get_dicom_files('..\/input\/siim-covid19-detection\/test')\no = Parallel(n_jobs=2)(delayed(Dicom2jpg)(f) for f in tqdm(dicom_file))","aaddbff5":"%mkdir -p \/root\/.cache\/torch\/hub\/checkpoints\n!cp ..\/input\/tf-efficientnet-b3-weights\/tf_efficientnet_b3_aa-84b4657e.pth \/root\/.cache\/torch\/hub\/checkpoints\/tf_efficientnet_b3_aa-84b4657e.pth","f2f17ec2":"from icevision import models, show_preds, tfms, Dataset\nmax_size = 512\nextra_args = {\n    'img_size': max_size\n}\nweights = '..\/input\/siimcovid19-models\/efficientdet-tf_d3_BL2.pth'\narch = 'tf_efficientdet_d3'\nnum_classes = 2\nmodel_type = models.ross.efficientdet\nbackbone = model_type.backbones.tf_d3(pretrained=False)\nmodel = model_type.model(backbone=backbone, num_classes=num_classes, **extra_args) \nmodel.load_state_dict(torch.load(weights, map_location=torch.device('cpu')))","4a3a17db":"# !rm \/root\/.cache\/torch\/hub\/checkpoints\/tf_efficientnet_b3_aa-84b4657e.pth","1b582bb7":"%run ..\/input\/icevision-functions\/icevision_functions.py","8c28f398":"image_files = get_image_files('\/kaggle\/working')\ninfer_tfms = tfms.A.Adapter([A.Resize(height=max_size, width=max_size, p=1), tfms.A.Normalize()])","419042ee":"preds = []\nfor file in tqdm(image_files):\n    img = PIL.Image.open(file).convert('RGB')\n    pred = _end2end_detect(img, infer_tfms, model, ClassMap(['opacity']), 0.35, model_type.predict)\n    for d in pred:\n        d['id'] = file.stem\n    preds += pred","64a82a4c":"preds_df = pd.DataFrame(preds)\npreds_df['PredictionString'] = preds_df.apply(lambda x: f\"{x['class']} {x['score']:.3f} {' '.join([str(b) for b in x['bbox']])}\", axis = 1)\npreds_df = preds_df[['id', 'PredictionString']].groupby('id').agg(lambda x: ' '.join(x)).reset_index()\npreds_df['id'] = preds_df['id'].apply(lambda x: x + '_image')\npreds_df","ad5bca3c":"submission_image = pd.DataFrame({\n    'id': [f.stem + '_image' for f in image_files if (f.stem + '_image') not in preds_df['id'].values],\n    'PredictionString': 'none 1 0 0 1 1'\n})\nsubmission_image = pd.concat([preds_df, submission_image]).sort_values('id').reset_index(drop=True)\nsubmission_image","c7c65d45":"study = list(set([f.parent.parent.name + '_study' for f in image_files]))\nprediction_string = ['negative 1 0 0 1 1'] * len(study)\nsubmission_study = pd.DataFrame({\n    'id': study,\n    'PredictionString': prediction_string\n}).sort_values('id').reset_index(drop=True)\nsubmission_study","efe6e3f2":"submission = pd.concat([submission_study, submission_image])\nsubmission.to_csv('submission.csv',index=False)\nsubmission","c4407ac5":"import shutil\nshutil.rmtree('.\/test')","da435fde":"## Loading model","870a5b49":"## Converting DICOM files to JPG","96146ed2":"## Install dependencies","ded35b89":"## Predicting","f6937792":"## Building the submission files","cbb3cca0":"## Loading dependencies"}}