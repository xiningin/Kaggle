{"cell_type":{"58d97226":"code","6e93fd64":"code","f1541912":"code","004dabd8":"code","0ae9c6b8":"code","23021ca6":"code","80725e76":"code","158bb2b3":"code","d80041a3":"code","dfb8c938":"code","49755fc7":"code","390cceac":"code","1bfd2668":"code","29b2590b":"code","99af93e3":"code","6feffe5e":"markdown","f2ce7d92":"markdown","863aaff9":"markdown","70d410d9":"markdown","a8bdbd46":"markdown","6fd7b55d":"markdown","809b3b88":"markdown","7df432da":"markdown"},"source":{"58d97226":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport os\nfrom tqdm.notebook import tqdm\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import minimize\nfrom sklearn.metrics import mean_squared_log_error, mean_squared_error","6e93fd64":"# Susceptible equation\ndef dS_dt(S, I, R_t, t_inf):\n    return -(R_t \/ t_inf) * I * S\n\n\n# Exposed equation\ndef dE_dt(S, E, I, R_t, t_inf, t_inc):\n    return (R_t \/ t_inf) * I * S - (E \/ t_inc)\n\n\n# Infected equation\ndef dI_dt(I, E, t_inc, t_inf):\n    return (E \/ t_inc) - (I \/ t_inf)\n\n\n# Hospialized equation\ndef dH_dt(I, C, H, t_inf, t_hosp, t_crit, m_a, f_a):\n    return ((1 - m_a) * (I \/ t_inf)) + ((1 - f_a) * C \/ t_crit) - (H \/ t_hosp)\n\n\n# Critical equation\ndef dC_dt(H, C, t_hosp, t_crit, c_a):\n    return (c_a * H \/ t_hosp) - (C \/ t_crit)\n\n\n# Recovered equation\ndef dR_dt(I, H, t_inf, t_hosp, m_a, c_a):\n    return (m_a * I \/ t_inf) + (1 - c_a) * (H \/ t_hosp)\n\n\n# Deaths equation\ndef dD_dt(C, t_crit, f_a):\n    return f_a * C \/ t_crit\n\n# Positive equation\ndef dP_dt(C, t_inc, p_a):\n    return p_a * C \/ t_inc\n\ndef SEIR_COM_model(t, y, R_t, t_inc=2.9, t_inf=5.2, t_hosp=4, t_crit=14, m_a=0.8, c_a=0.1, f_a=0.3,p_a=0.3):\n    \"\"\"\n\n    :param t: Time step for solve_ivp\n    :param y: Previous solution or initial values\n    :param R_t: Reproduction number\n    :param t_inc: Average incubation period. \n    :param t_inf: Average infectious period. \n    :param t_hosp: Average time a patient is in hospital before either recovering or becoming critical. \n    :param t_crit: Average time a patient is in a critical state (either recover or die). \n    :param m_a: Fraction of infections that are asymptomatic or mild. \n    :param c_a: Fraction of severe cases that turn critical. \n    :param f_a: Fraction of critical cases that are fatal. \n    :param p_a: Fraction of testing cases that are positive.\n    :return:\n    \"\"\"\n    if callable(R_t):\n        reprod = R_t(t)\n    else:\n        reprod = R_t\n        \n    S, E, I, R, H, C, D , P= y\n    \n    S_out = dS_dt(S, I, reprod, t_inf)\n    E_out = dE_dt(S, E, I, reprod, t_inf, t_inc)\n    I_out = dI_dt(I, E, t_inc, t_inf)\n    R_out = dR_dt(I, H, t_inf, t_hosp, m_a, c_a)\n    H_out = dH_dt(I, C, H, t_inf, t_hosp, t_crit, m_a, f_a)\n    C_out = dC_dt(H, C, t_hosp, t_crit, c_a)\n    D_out = dD_dt(C, t_crit, f_a)\n    P_out = dP_dt(C, t_inc, p_a)\n    return [S_out, E_out, I_out, R_out, H_out, C_out, D_out,P_out]","f1541912":"def plot_model(solution, title='SEIR+COM model'):\n    sus, exp, inf, rec, hosp, crit, death , positive= solution.y\n    \n    cases = inf + rec + hosp + crit + death + positive\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16,5))\n    fig.suptitle(title)\n    \n    ax1.plot(sus, 'tab:blue', label='Susceptible');\n    ax1.plot(exp, 'tab:orange', label='Exposed');\n    ax1.plot(inf, 'tab:red', label='Infected');\n    ax1.plot(rec, 'tab:green', label='Recovered');\n    ax1.plot(hosp, 'tab:purple', label='Hospitalised');\n    ax1.plot(crit, 'tab:brown', label='Critical');\n    ax1.plot(death, 'tab:cyan', label='Dead');\n    ax1.plot(death, 'tab:pink', label='Positive');\n    \n    \n    ax1.set_xlabel(\"Days\", fontsize=10);\n    ax1.set_ylabel(\"Fraction of population\", fontsize=10);\n    ax1.legend(loc='best');\n    \n    ax2.plot(cases, 'tab:red', label='Cases');    \n    ax2.set_xlabel(\"Days\", fontsize=10);\n    ax2.set_ylabel(\"Fraction of population (Cases)\", fontsize=10, color='tab:red');\n    \n    ax3 = ax2.twinx()\n    ax3.plot(death, 'tab:cyan', label='Dead');    \n    ax3.set_xlabel(\"Days\", fontsize=10);\n    ax3.set_ylabel(\"Fraction of population (Fatalities)\", fontsize=10, color='tab:cyan');\n","004dabd8":"DATE_BORDER = '2020-04-08'\n\ndata_path = Path('\/kaggle\/input\/covid19-global-forecasting-week-3\/')\n\ntrain = pd.read_csv(data_path \/ 'train.csv', parse_dates=['Date'])\ntest = pd.read_csv(data_path \/'test.csv', parse_dates=['Date'])\nsubmission = pd.read_csv(data_path \/'submission.csv', index_col=['ForecastId'])\n\n# Load the population data into lookup dicts\npop_info = pd.read_csv('\/kaggle\/input\/covid19-population-data\/population_data.csv')\ncountry_pop = pop_info.query('Type == \"Country\/Region\"')\nprovince_pop = pop_info.query('Type == \"Province\/State\"')\ncountry_lookup = dict(zip(country_pop['Name'], country_pop['Population']))\nprovince_lookup = dict(zip(province_pop['Name'], province_pop['Population']))\n\n# Load the social distance data into lookup dicts\ndistance_info = pd.read_csv('\/kaggle\/input\/personal-distance-in-42-countries\/personal_distance.csv')\ndistance_info['Country\/Region']=distance_info['Country']\ndistance_pop = distance_info.query('Country == \"Country\/Region\"')\ndistance_lookup = dict(zip(distance_pop['Country'], distance_pop.iloc[:,1]))\n#distance_lookup = dict(zip(province_pop['Name'], province_pop['Population']))\n\n\n# Fix the Georgia State\/Country confusion - probably a better was of doing this :)\ntrain['Province_State'] = train['Province_State'].replace('Georgia', 'Georgia (State)')\ntest['Province_State'] = test['Province_State'].replace('Georgia', 'Georgia (State)')\nprovince_lookup['Georgia (State)'] = province_lookup['Georgia']\n\ntrain['Area'] = train['Province_State'].fillna(train['Country_Region'])\ntest['Area'] = test['Province_State'].fillna(test['Country_Region'])\n\n# https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-1\/discussion\/139172\ntrain['ConfirmedCases'] = train.groupby('Area')['ConfirmedCases'].cummax()\ntrain['Fatalities'] = train.groupby('Area')['Fatalities'].cummax()\n\n# load covid19 tests data\ntest_info = pd.read_csv('\/kaggle\/input\/covid19-tests-conducted-by-country\/Tests_Conducted_31Mar2020.csv')\ntest_info['Country']=test_info['Country or region']\ntest_pop =test_info.query('Country== \"Country\/Region\"')\n#tests_lookup = dict(zip(province_pop['Name'], province_pop['Population']))\ntests_lookup = dict(zip(test_pop['Country'], test_pop['Tests']))\npositive_lookup = dict(zip(test_pop['Country'], test_pop['Positive']))\n#positive_lookup = dict(zip(province_pop['Name'], province_pop['Population']))\n# Remove the leaking data\ntrain_full = train.copy()\nvalid = train[train['Date'] >= test['Date'].min()]\ntrain = train[train['Date'] < test['Date'].min()]\n\n# Split the test into public & private\ntest_public = test[test['Date'] <= DATE_BORDER]\ntest_private = test[test['Date'] > DATE_BORDER]\n\n# Use a multi-index for easier slicing\ntrain_full.set_index(['Area', 'Date'], inplace=True)\ntrain.set_index(['Area', 'Date'], inplace=True)\nvalid.set_index(['Area', 'Date'], inplace=True)\ntest_public.set_index(['Area', 'Date'], inplace=True)\ntest_private.set_index(['Area', 'Date'], inplace=True)\n\nsubmission['ConfirmedCases'] = 0\nsubmission['Fatalities'] = 0\n\ntrain_full.shape, train.shape, valid.shape, test_public.shape, test_private.shape, submission.shape","0ae9c6b8":"OPTIM_DAYS = 14  # Number of days to use for the optimisation evaluation","23021ca6":"# Use a constant reproduction number\ndef eval_model_const(params, data, population, return_solution=False, forecast_days=0):\n    R_0, t_hosp, t_crit, m, c, f ,p= params\n    N = population\n    n_infected = data['ConfirmedCases'].iloc[0]\n    max_days = len(data) + forecast_days\n    initial_state = [(N - n_infected)\/ N, 0, n_infected \/ N, 0, 0, 0, 0,0]\n    args = (R_0, 5.6, 2.9, t_hosp, t_crit, m, c, f,p)\n               \n    sol = solve_ivp(SEIR_COM_model, [0, max_days], initial_state, args=args, t_eval=np.arange(0, max_days))\n    \n    sus, exp, inf, rec, hosp, crit, deaths,positive = sol.y\n    \n    y_pred_cases = np.clip(inf + rec + hosp + crit + deaths + positive, 0, np.inf) * population\n    y_true_cases = data['ConfirmedCases'].values\n    y_pred_fat = np.clip(deaths, 0, np.inf) * population\n    y_true_fat = data['Fatalities'].values\n    \n    optim_days = min(OPTIM_DAYS, len(data))  # Days to optimise for\n    weights = 1 \/ np.arange(1, optim_days+1)[::-1]  # Recent data is more heavily weighted\n    msle_cases = mean_squared_log_error(y_true_cases[-optim_days:], y_pred_cases[-optim_days:], weights)\n    msle_fat = mean_squared_log_error(y_true_fat[-optim_days:], y_pred_fat[-optim_days:], weights)\n    \n    msle_final = np.mean([msle_cases, msle_fat])\n    \n    if return_solution:\n        return msle_final, sol\n    else:\n        return msle_final","80725e76":"# Use a Hill decayed reproduction number\ndef eval_model_decay(params, data, population, return_solution=False, forecast_days=0):\n    R_0, t_hosp, t_crit, m, c, f, p, k, L = params  \n    N = population\n    n_infected = data['ConfirmedCases'].iloc[0]\n    max_days = len(data) + forecast_days\n    \n    # https:\/\/github.com\/SwissTPH\/openmalaria\/wiki\/ModelDecayFunctions   \n    # Hill decay. Initial values: R_0=2.2, k=2, L=50\n    def time_varying_reproduction(t): \n        return R_0 \/ (1 + (t\/L)**k)\n    \n    initial_state = [(N - n_infected)\/ N, 0, n_infected \/ N, 0, 0, 0, 0,0]\n    args = (time_varying_reproduction, 5.6, 2.9, t_hosp, t_crit, m, c, f,p)\n            \n    sol = solve_ivp(SEIR_COM_model, [0, max_days], initial_state, args=args, t_eval=np.arange(0, max_days))\n    \n    sus, exp, inf, rec, hosp, crit, deaths,postive = sol.y\n    \n    y_pred_cases = np.clip(inf + rec + hosp + crit + deaths, 0, np.inf) * population\n    y_true_cases = data['ConfirmedCases'].values\n    y_pred_fat = np.clip(deaths, 0, np.inf) * population\n    y_true_fat = data['Fatalities'].values\n    \n    optim_days = min(OPTIM_DAYS, len(data))  # Days to optimise for\n    weights = 1 \/ np.arange(1, optim_days+1)[::-1]  # Recent data is more heavily weighted\n    \n    msle_cases = mean_squared_log_error(y_true_cases[-optim_days:], y_pred_cases[-optim_days:], weights)\n    msle_fat = mean_squared_log_error(y_true_fat[-optim_days:], y_pred_fat[-optim_days:], weights)\n    msle_final = np.mean([msle_cases, msle_fat])\n    \n    if return_solution:\n        return msle_final, sol\n    else:\n        return msle_final","158bb2b3":"def use_last_value(train_data, valid_data, test_data):\n    lv = train_data[['ConfirmedCases', 'Fatalities']].iloc[-1].values\n    \n    forecast_ids = test_data['ForecastId']\n    submission.loc[forecast_ids, ['ConfirmedCases', 'Fatalities']] = lv\n    \n    if valid_data is not None:\n        y_pred_valid = np.ones((len(valid_data), 2)) * lv.reshape(1, 2)\n        y_true_valid = valid_data[['ConfirmedCases', 'Fatalities']]\n\n        msle_cases = mean_squared_log_error(y_true_valid['ConfirmedCases'], y_pred_valid[:, 0])\n        msle_fat = mean_squared_log_error(y_true_valid['Fatalities'], y_pred_valid[:, 1])\n        msle_final = np.mean([msle_cases, msle_fat])\n\n        return msle_final","d80041a3":"def plot_model_results(y_pred, train_data, valid_data=None):\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16,5))\n    \n    ax1.set_title('Confirmed Cases')\n    ax2.set_title('Fatalities')\n    \n    train_data['ConfirmedCases'].plot(label='Confirmed Cases (train)', color='g', ax=ax1)\n    y_pred.loc[train_data.index, 'ConfirmedCases'].plot(label='Modeled Cases', color='r', ax=ax1)\n    ax3 = y_pred['R'].plot(label='Reproduction number', color='c', linestyle='-', secondary_y=True, ax=ax1)\n    ax3.set_ylabel(\"Reproduction number\", fontsize=10, color='c');\n        \n    train_data['Fatalities'].plot(label='Fatalities (train)', color='g', ax=ax2)\n    y_pred.loc[train_data.index, 'Fatalities'].plot(label='Modeled Fatalities', color='r', ax=ax2)\n    \n    if valid_data is not None:\n        valid_data['ConfirmedCases'].plot(label='Confirmed Cases (valid)', color='g', linestyle=':', ax=ax1)\n        valid_data['Fatalities'].plot(label='Fatalities (valid)', color='g', linestyle=':', ax=ax2)\n        y_pred.loc[valid_data.index, 'ConfirmedCases'].plot(label='Modeled Cases (forecast)', color='r', linestyle=':', ax=ax1)\n        y_pred.loc[valid_data.index, 'Fatalities'].plot(label='Modeled Fatalities (forecast)', color='r', linestyle=':', ax=ax2)\n    else:\n        y_pred.loc[:, 'ConfirmedCases'].plot(label='Modeled Cases (forecast)', color='r', linestyle=':', ax=ax1)\n        y_pred.loc[:, 'Fatalities'].plot(label='Modeled Fatalities (forecast)', color='r', linestyle=':', ax=ax2)\n        \n    ax1.legend(loc='best')\n    ","dfb8c938":"def fit_model_public(area_name, \n                     initial_guess=[3.6, 4, 14, 0.8, 0.1, 0.3, 0.3,2, 50],\n                     bounds=((1, 20), # R bounds\n                             (0.5, 10), (2, 20), # transition time param bounds\n                             (0.5, 1), (0, 1), (0, 1),(0, 1), (1, 10), (1, 100)), # fraction time param bounds\n                     make_plot=True):\n        \n    train_data = train.loc[area_name].query('ConfirmedCases > 0')\n    valid_data = valid.loc[area_name]\n    test_data = test_public.loc[area_name]  \n    \n    try:\n        population = province_lookup[area_name]\n    except KeyError:\n        population = country_lookup[area_name]\n         \n    try:\n        distacnce = distance_lookup[area_name]\n    except KeyError:\n        distacnce = 100\n    try:\n        positive = tests_lookup[area_name]\n    except KeyError:\n        positive = 0.3\n        \n    cases_per_million = train_data['ConfirmedCases'].max() * 10**6 \/ population\n    n_infected = train_data['ConfirmedCases'].iloc[0]\n    \n    if cases_per_million < 1:\n        return use_last_value(train_data, valid_data, test_data)\n    \n                \n    res_const = minimize(eval_model_const, initial_guess[:-2], bounds=bounds[:-2],\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n    \n    res_decay = minimize(eval_model_decay, initial_guess, bounds=bounds,\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n    \n    dates_all = train_data.index.append(test_data.index)\n    dates_val = train_data.index.append(valid_data.index)\n    \n    \n    # If using a constant R number is better, use that model\n    if res_const.fun < res_decay.fun:\n        msle, sol = eval_model_const(res_const.x, train_data, population, True, len(test_data))\n        res = res_const\n        R_t = pd.Series([res_const.x[0]] * len(dates_val), dates_val)\n    else:\n        msle, sol = eval_model_decay(res_decay.x, train_data, population, True, len(test_data))\n        res = res_decay\n        \n        # Calculate the R_t values\n        t = np.arange(len(dates_val))\n        R_0, t_hosp, t_crit, m, c, f,p, k, L = res.x  \n        R_t = pd.Series(R_0 \/ (1 + (t\/L)**k), dates_val)\n        \n    sus, exp, inf, rec, hosp, crit, deaths, positive= sol.y\n    \n    y_pred = pd.DataFrame({\n        'ConfirmedCases': np.clip(inf + rec + hosp + crit + deaths, 0, np.inf) * population,\n        'Fatalities': np.clip(deaths, 0, np.inf) * population,\n        'R': R_t,\n    }, index=dates_all)\n    \n    y_pred_valid = y_pred.iloc[len(train_data): len(train_data)+len(valid_data)]\n    y_pred_test = y_pred.iloc[len(train_data):]\n    y_true_valid = valid_data[['ConfirmedCases', 'Fatalities']]\n        \n    valid_msle_cases = mean_squared_log_error(y_true_valid['ConfirmedCases'], y_pred_valid['ConfirmedCases'])\n    valid_msle_fat = mean_squared_log_error(y_true_valid['Fatalities'], y_pred_valid['Fatalities'])\n    valid_msle = np.mean([valid_msle_cases, valid_msle_fat])\n    \n    if make_plot:\n        print(f'Validation MSLE: {valid_msle:0.5f}')\n        print(f'R: {res.x[0]:0.3f}, t_hosp: {res.x[1]:0.3f}, t_crit: {res.x[2]:0.3f}, '\n              f'm: {res.x[3]:0.3f}, c: {res.x[4]:0.3f}, f: {res.x[5]:0.3f},p: {res.x[5]:0.3f}')\n        plot_model_results(y_pred, train_data, valid_data)\n        \n    # Put the forecast in the submission\n    forecast_ids = test_data['ForecastId']\n    submission.loc[forecast_ids, ['ConfirmedCases', 'Fatalities']] = y_pred_test[['ConfirmedCases', 'Fatalities']].values\n    \n    return valid_msle\n            ","49755fc7":"# Fit a model on the full dataset (i.e. no validation)\ndef fit_model_private(area_name, \n                      initial_guess=[3.6, 4, 14, 0.8, 0.1, 0.3, 0.3,2, 50],\n                      bounds=((1, 20), # R bounds\n                              (0.5, 10), (2, 20), # transition time param bounds\n                              (0.5, 1), (0, 1), (0, 1), (0, 1),(1, 10), (1, 100)), # fraction time param bounds\n                      make_plot=True):\n        \n    train_data = train_full.loc[area_name].query('ConfirmedCases > 0')\n    test_data = test_private.loc[area_name]\n    \n    try:\n        population = province_lookup[area_name]\n    except KeyError:\n        population = country_lookup[area_name]\n        \n    cases_per_million = train_data['ConfirmedCases'].max() * 10**6 \/ population\n    n_infected = train_data['ConfirmedCases'].iloc[0]\n        \n    if cases_per_million < 1:\n        return use_last_value(train_data, None, test_data)\n                \n    res_const = minimize(eval_model_const, initial_guess[:-2], bounds=bounds[:-2],\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n    \n    res_decay = minimize(eval_model_decay, initial_guess, bounds=bounds,\n                         args=(train_data, population, False),\n                         method='L-BFGS-B')\n    \n    dates_all = train_data.index.append(test_data.index)\n    \n    \n    # If using a constant R number is better, use that model\n    if res_const.fun < res_decay.fun:\n        msle, sol = eval_model_const(res_const.x, train_data, population, True, len(test_data))\n        res = res_const\n        R_t = pd.Series([res_const.x[0]] * len(dates_all), dates_all)\n    else:\n        msle, sol = eval_model_decay(res_decay.x, train_data, population, True, len(test_data))\n        res = res_decay\n        \n        # Calculate the R_t values\n        t = np.arange(len(dates_all))\n        R_0, t_hosp, t_crit, m, c, f, p,k, L = res.x  \n        R_t = pd.Series(R_0 \/ (1 + (t\/L)**k), dates_all)\n        \n    sus, exp, inf, rec, hosp, crit, deaths,positive= sol.y\n    \n    y_pred = pd.DataFrame({\n        'ConfirmedCases': np.clip(inf + rec + hosp + crit + deaths+positive, 0, np.inf) * population,\n        'Fatalities': np.clip(deaths, 0, np.inf) * population,\n        'R': R_t,\n    }, index=dates_all)\n    \n    y_pred_test = y_pred.iloc[len(train_data):]\n    \n    if make_plot:\n        print(f'R: {res.x[0]:0.3f}, t_hosp: {res.x[1]:0.3f}, t_crit: {res.x[2]:0.3f}, '\n              f'm: {res.x[3]:0.3f}, c: {res.x[4]:0.3f}, f: {res.x[5]:0.3f},p: {res.x[5]:0.3f}')\n        plot_model_results(y_pred, train_data)\n        \n    # Put the forecast in the submission\n    forecast_ids = test_data['ForecastId']\n    submission.loc[forecast_ids, ['ConfirmedCases', 'Fatalities']] = y_pred_test[['ConfirmedCases', 'Fatalities']].values\n            ","390cceac":"# Public Leaderboard\nvalidation_scores = []\n\nfor c in tqdm(test_public.index.levels[0].values):\n    try:\n        score = fit_model_public(c, make_plot=False)\n        validation_scores.append({'Country': c, 'MSLE': score})\n        print(f'{c} {score:0.5f}')\n    except IndexError as e:\n        print(c, 'has no cases in train')\n    except ValueError as e:\n        print(c, e)\n\nvalidation_scores = pd.DataFrame(validation_scores)\nprint(f'Mean validation score: {np.sqrt(validation_scores[\"MSLE\"].mean()):0.5f}')","1bfd2668":"# Find which areas are not being predicted well\nvalidation_scores.sort_values(by=['MSLE'], ascending=False).head(20)","29b2590b":"dir_output = '\/kaggle\/working\/'\nsubmission.round().to_csv('submission.csv')","99af93e3":"submission.join(test.set_index('ForecastId')).query(f'Date > \"{DATE_BORDER}\"').round().to_csv('forecast.csv')","6feffe5e":"The function below fits a SEIR-COMPARTMENTS model for each area, either using a constant R or a decayed R, whichever is better. If the total cases\/1M pop is below 1 and social distance large than 100cm, then the last value is used.","f2ce7d92":"# Model\nLets assume that there is some intervention that causes the reproduction number (`R_0`) to fall to a lower value (`R_t`) at a certain time. Assuming reproduction number will deacrease when keeping safe social ditance. ","863aaff9":"# Calculate for all countries","70d410d9":"The function below is essentially the same as above, by R is decayed using a Hill decay function. This model requires 2 additional parameters to be optimized, `k` & `L`","a8bdbd46":"The function below evaluates a model with a constant `R` number as well as `t_hosp`, `t_crit`, `m`, `c`, `f`,'p'","6fd7b55d":"## Parameters used in the model\n`R_t` = reproduction number at time t. \n\n**Transition times**\n* `T_inc` = average incubation period.\n* `T_inf` = average infectious period. \n* `T_hosp` = average time a patient is in hospital before either recovering or becoming critical. \n* `T_crit` = average time a patient is in a critical state (either recover or die). \n* `m` = fraction of infections that are asymptomatic or mild. \n* `c` = fraction of severe cases that turn critical. \n* `f` = fraction of critical cases that are fatal. \n* `p` = fraction of tests that are positive. ","809b3b88":"# SEIR compartments Model\nThis is a working example of a [SIER](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SEIR_model) model with added compartments for hospitalization, social distance and Covid19 test.\n","7df432da":"# Fitting the model to data\nParameters in the model:\n* Average incubation period, `t_inc`\n* Average infection period, `t_inf`\n* Average hospitalization period, `t_hosp`\n* Average critital period, `t_crit`\n* The fraction of mild\/asymptomatic cases, `m_a`\n* The fraction of severe cases that turn critical, `c_a`\n* The fraction of critical cases that result in a fatality, `f_a`\n* The fraction of positive cases, `p_a`\n* Reproduction number, `R_0` or `R_t`\n\nOther factors such as:\n* social distance\n* Population demographic of a country (is a significant proportion of the population old?). This is the `a` subscript\n* Heathcare system capacity (hostpital beds per capita)\n* Number of testing kits available\nUsing a Hill decay, which has 2 parameters, `k` and `L` (the half decay constant):"}}