{"cell_type":{"b8643662":"code","f4d1e956":"code","7eabb0dd":"code","e4998d04":"code","18fb52f7":"code","c2700985":"code","65afe582":"code","83dd9c64":"code","3817b813":"code","623fc6b1":"code","9db55dc9":"code","e49a361b":"code","5e79e537":"code","ce3c8b8b":"code","79b362ba":"code","0cf411f3":"code","ccceede5":"code","ffc56f21":"code","9662890e":"code","b68f1a01":"markdown","ef022f48":"markdown","4463e4d1":"markdown","e007710e":"markdown","872d0fae":"markdown","eca38db5":"markdown","bf3d7c3d":"markdown","5bb4c2a7":"markdown","6c0ccfba":"markdown","f6a6279c":"markdown","078165b7":"markdown","93735980":"markdown"},"source":{"b8643662":"import numpy as np\nimport pandas as pd\n\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Conv2D, MaxPooling2D\nfrom keras.optimizers import SGD\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n","f4d1e956":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","7eabb0dd":"train.head()","e4998d04":"X_train = train.drop(labels = [\"label\"], axis=1)\nY = train[\"label\"]\nY_train = keras.utils.to_categorical(Y)","18fb52f7":"X_train = X_train \/ 255.\ntest = test \/ 255.\n# convert Y_train to one_hot\ndel train","c2700985":"print(np.sum(np.isnan(X_train.values)))\nprint(np.sum(np.isnan(test.values)))","65afe582":"fig = plt.figure(figsize=(10,10))\n\nfor i in range(20):\n    plt.subplot(5,4,i+1)\n    plt.imshow(X_train.iloc[i].values.reshape(28,28),cmap=plt.cm.binary)","83dd9c64":"sns.countplot(Y)","3817b813":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","623fc6b1":"from keras import regularizers\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_dim=784, kernel_regularizer=regularizers.l2(0.001)))\nmodel.add(Dense(64, activation='relu', kernel_regularizer=regularizers.l2(0.001)))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.summary()","9db55dc9":"# trainining\nhistory = model.fit(X_train, Y_train, epochs=40, batch_size=128, validation_split=0.1, callbacks = [learning_rate_reduction])","e49a361b":"# evaluate model on training data\nres = model.evaluate(X_train, Y_train)\nprint(\"Model accuracy on training data is: %{}\".format(res[1]*100))","5e79e537":"# Create submission\nsubmission_df = pd.read_csv(\"..\/input\/sample_submission.csv\", index_col=0)\nprobs = model.predict(test)\nsubmission_df['Label'] = np.argmax(probs,axis=1)\nsubmission_df.head()","ce3c8b8b":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nsgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer=sgd)\n\nmodel.summary()","79b362ba":"X_train_CNN = X_train.values.reshape((-1,28,28,1))\nX_train_CNN.shape","0cf411f3":"model.fit(X_train_CNN, Y_train, batch_size=128, epochs=30)","ccceede5":"# evaluate model on training data\nres2 = model.evaluate(X_train_CNN, Y_train)\nprint(\"Model accuracy on training data is: %{}\".format(res2[1]*100))","ffc56f21":"# datagen = ImageDataGenerator(\n#     rotation_range = 15,\n#     zca_whitening = True,\n#     width_shift_range=0.15,\n#     height_shift_range=0.15,\n#     )\n# datagen.fit(X_train_CNN)\n\n# history = model.fit_generator(datagen.flow(X_train_CNN,Y_train, batch_size=32),\n#                               epochs = 10,\n#                               verbose = 1, steps_per_epoch=steps_per_epoch=X_train_CNN.shape[0] \/\/ 32)","9662890e":"submission_df = pd.read_csv(\"..\/input\/sample_submission.csv\", index_col=0)\nprobs = model.predict(test.values.reshape((-1,28,28,1)))\nsubmission_df['Label'] = np.argmax(probs,axis=1)\nsubmission_df.head()\n","b68f1a01":"# Models","ef022f48":"### 2. Preprocessing","4463e4d1":"### 2.2 Check if there is any missing data","e007710e":"### 1. Importing Dataset","872d0fae":"### 2.4 Analyse the class distributions","eca38db5":"# Digit Recognizer\n\n2 Models mentioned below will be used for training:\n\n1. NN - Simple 3 layer Neural Network - Keras\n2. CNN - Convolutional Neural Network - Keras","bf3d7c3d":"### 2.1 Normalize features","5bb4c2a7":"#### Alternatively augmentation can be used to train the model.","6c0ccfba":"#### Create Submission","f6a6279c":"## Model 2 - Convolutional Neural Network (Keras)\n\nAccuracy on Kaggle learderboard: **%99.3** \n\nModel used is a VGG-like convnet from Keras website:\n\n","078165b7":"### 2.3 Plot some examples","93735980":"## Model 1 - Simple Neural Network (Keras)\n\nAccuracy on Kaggle learderboard: **%97.2**\n\nModel has the features mentioned below:\n* 3 layers (2 hidden + 1 output) - 784 --> (64,64) -->  (10)\n* Learning Rate Reduction - LR will decrease when validation accuracy is not improved for 2 epochs in a row\n* Regularization - 2 hidden layers will have L2 regularization"}}