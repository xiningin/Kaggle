{"cell_type":{"dbd3c851":"code","675a7172":"code","c38758eb":"code","9f40cc3d":"code","b872ec03":"code","ba40266f":"code","ba4fca4c":"code","011b5710":"code","3b739c89":"code","5e4adb02":"code","77af3365":"code","9e489d01":"code","168db550":"code","a775c84f":"code","fc5db549":"code","d4857741":"code","7e9482dc":"code","21271e3d":"code","9726289d":"code","74fa2241":"code","54f735c5":"code","77c95e43":"code","6a27cb8e":"code","04eed105":"code","9dc940ab":"code","18d628a8":"code","1a1a1172":"markdown","f1ad6e95":"markdown"},"source":{"dbd3c851":"!pip install python-gdcm","675a7172":"import pydicom\nimport numpy as np\nimport json\nimport pandas as pd\n\nfrom fastai.data.all import get_files\nfrom functools import partial\nfrom pathlib import Path\nfrom random import choice\nfrom matplotlib import pyplot as plt\nfrom matplotlib.patches import Rectangle\nfrom IPython.core.pylabtools import print_figure\nfrom collections import Counter\nfrom glob import glob\nfrom pydicom.pixel_data_handlers.util import apply_voi_lut\nfrom IPython.core.debugger import set_trace\n","c38758eb":"data_url = Path(\"..\/input\/siim-covid19-detection\")\n# data_url = Path(\"..\/data\")","9f40cc3d":"dfi = pd.read_csv(data_url\/\"train_image_level.csv\")\ndfi.id = dfi.id.apply(lambda x: x.split(\"_\")[0])\ndfi.set_index(\"id\", inplace=True)","b872ec03":"get_dicoms = partial(get_files, extensions=['.dcm'])","ba40266f":"dfs = pd.read_csv(data_url\/'train_study_level.csv')\ndfs.id = dfs.id.apply(lambda x: x.split(\"_\")[0])\ndfs.set_index('id', inplace=True)","ba4fca4c":"class Study:\n    _cats = [ \"Negative for Pneumonia\", \"Typical Appearance\", \"Indeterminate Appearance\", \"Atypical Appearance\"]\n    def __init__(self, path):\n        if isinstance(path, Path):\n            self.path = path\n        else:\n            self.path = list((data_url\/\"train\").glob(path))[0]\n        self.dcms = [DCM(_) for _ in get_dicoms(self.path)]\n    def __len__(self): return len(self.dcms)\n\n    @property\n    def result(self): return self._cats[np.argmax(dfs.loc[self.path.stem])]\n    \n    @property\n    def _figure(self):\n        cols=4\n        rows=len(self)\/\/5+1\n        fig, axs = plt.subplots(rows, cols, figsize=(14, rows*3.5+1), \n                                gridspec_kw={'hspace':0.5, 'wspace':0.0},\n                                squeeze=False)\n        axs=axs.ravel()\n        for i, dcm in enumerate(self.dcms): self.dcms[i].plot(axs[i])\n        for ax in axs[len(self):]:ax.axis('off')\n\n        data = print_figure(fig)\n        fig.suptitle(f\"{self.__class__.__name__}: {self.path.stem} {self.result}\")\n        plt.close(fig)\n        return fig\n\n    def _repr_png_(self):\n        data = print_figure(self._figure)\n        return data","011b5710":"class DCM:\n    def __init__(self, path):\n        if isinstance(path, Path):\n            self.path = path\n        else:\n            self.path = list((data_url\/\"train\").glob(f\"**\/{path}.dcm\"))[0]\n        self._dcm = None\n    @property\n    def label(self): return dfi.loc[self.name].label\n\n    @property\n    def dcm(self):\n        if self._dcm is None:\n            dicom = pydicom.read_file(self.path)\n            try:\n                data = apply_voi_lut(dicom.pixel_array, dicom)\n            except RuntimeError:\n                data = dicom.pixel_array\n            if dicom.PhotometricInterpretation == \"MONOCHROME1\":\n                data = np.amax(data) - data\n        \n            data = data - np.min(data)\n            data = data \/ np.max(data)\n            self._dcm = (data * 255).astype(np.uint8)\n            \n            try: self.patient_sex = dicom.PatientSex\n            except AttributeError: self.patient_sex = \"NA\"\n            try: self.body_part_examined = dicom.BodyPartExamined\n            except AttributeError: self.body_part_examined = \"NA\"\n            \n        return self._dcm\n    \n    @property\n    def boxes(self):\n        try: return json.loads(dfi.loc[self.name].boxes.replace(\"'\", \"\\\"\"))\n        except AttributeError: return []\n    \n    def plot(self, ax):\n        ax.imshow(self.dcm, cmap='gray')\n        ax.set_xticks([])\n        ax.set_yticks([])\n        ax.set_title(f'{self.name}\\nBody Part:{self.body_part_examined}\\nPatient Sex:{self.patient_sex}')\n\n        for box in self.boxes:\n            x, y, w, h = box.values()\n            ax.add_patch(Rectangle((x, y), w, h, edgecolor=\"red\", fill=False))\n        \n    @property\n    def name(self): return self.path.stem\n    def _repr_png_(self):\n        fig, ax = plt.subplots()\n        self.plot(ax)\n        plt.close(fig)\n        data = print_figure(fig)\n        return data\n    \n    def __len__(self): return 1","3b739c89":"## data structure\n# study\/series\/image","5e4adb02":"get_dicoms = partial(get_files, extensions=['.dcm'])\ndcms = get_dicoms(path=data_url\/\"train\")","77af3365":"DCM(\"1018aa051dd9\")","9e489d01":"study_counter = Counter([_.parent.parent for _ in dcms])\nstudys = [Study(_) for _ in list(study_counter.elements())]\n# for p, i in studys.most_common(50): Study(p)","168db550":"choice(studys)","a775c84f":"DCM(choice(dcms))","fc5db549":"Study(\"7e91e041c7d4\")","d4857741":"DCM(\"d3885c0f58bb\")","7e9482dc":"Study(\"a7335b2f9815\")","21271e3d":"Study(\"8943d1d85097\")","9726289d":"Study(\"970c96c9fa5d\")","74fa2241":"Study(\"7e91e041c7d4\")","54f735c5":"Study(\"4c45ac349e3a\")","77c95e43":"Study(\"26648048b098\")","6a27cb8e":"Study(\"1e96d5eb4c91\")","04eed105":"Study(\"1de3b9724942\")","9dc940ab":"Study(\"72044bb44d41\")","18d628a8":"Study(\"7e91e041c7d4\")","1a1a1172":"PatientSex\nBodyPartExamined","f1ad6e95":"# Update"}}