{"cell_type":{"5490889f":"code","d2bc66f7":"code","f880fbf5":"code","413f9d1d":"code","a8af7695":"code","2ee7de5c":"code","9173977d":"code","c149404a":"code","fe982ba5":"code","27ee177d":"code","ce38ccfb":"code","1f5f45d0":"code","bea18ee5":"code","760b6514":"code","9a273202":"code","f51d3d21":"code","d4ebbc61":"code","9547cde5":"code","60a3b238":"code","fea408a4":"markdown","c25a33ed":"markdown","3c25eb25":"markdown","14542411":"markdown","504c2dac":"markdown","34d334b6":"markdown","eb065604":"markdown","ba76a05a":"markdown","c2d452f7":"markdown","66022b67":"markdown","330db5f6":"markdown","8eaa92d5":"markdown","a7693b66":"markdown","e3ad077c":"markdown"},"source":{"5490889f":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\n%pylab inline","d2bc66f7":"data = pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\ndata = data.drop(['country-year','HDI for year'],axis=1)\nprint(data.shape)\ndata.head()","f880fbf5":"data.info()","413f9d1d":"data[['suicides_no','population','suicides\/100k pop','gdp_per_capita ($)']].describe()","a8af7695":"from IPython.display import Image\nImage('..\/input\/country\/missed countries.png')","2ee7de5c":"suic_sum = pd.DataFrame(data['suicides_no'].groupby(data['country']).sum())\nsuic_sum = suic_sum.reset_index().sort_index(by='suicides_no',ascending=False)\nmost_cont = suic_sum.head(8)\nfig = plt.figure(figsize=(20,10))\nplt.title('Count of suicides for 31 years.')\nsns.set(font_scale=2)\nsns.barplot(y='suicides_no',x='country',data=most_cont,palette=\"Blues_d\")\nplt.xticks(rotation=45)\nplt.ylabel('');\nplt.xlabel('')\nplt.tight_layout()","9173977d":"from mpl_toolkits.basemap import Basemap\nconcap = pd.read_csv('..\/input\/world-capitals-gps\/concap.csv')\nconcap.head()","c149404a":"def reg(x):\n    if x=='Russia':\n        res = 'Russian Federation'\n    else:\n        res=x\n    return res\nconcap['CountryName'] = concap['CountryName'].apply(reg)\n\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         suic_sum,left_on='CountryName',right_on='country')","fe982ba5":"def mapWorld(col1,size2,title3,label4,metr=100,colmap='hot'):\n    m = Basemap(projection='mill',llcrnrlat=-60,urcrnrlat=70,\\\n            llcrnrlon=-110,urcrnrlon=180,resolution='c')\n    m.drawcoastlines()\n    m.drawcountries()\n    m.drawparallels(np.arange(-90,91.,30.))\n    m.drawmeridians(np.arange(-90,90.,60.))\n    lat = data_full['CapitalLatitude'].values\n    lon = data_full['CapitalLongitude'].values\n    a_1 = data_full[col1].values\n    if size2:\n        a_2 = data_full[size2].values\n    else: a_2 = 1\n    m.scatter(lon, lat, latlon=True,c=a_1,s=metr*a_2,linewidth=1,edgecolors='black',cmap=colmap, alpha=1)\n    \n    cbar = m.colorbar()\n    cbar.set_label(label4,fontsize=30)\n    plt.title(title3, fontsize=30)\n    plt.show()\nsns.set(font_scale=1.5)\nplt.figure(figsize=(15,15))\nmapWorld(col1='suicides_no', size2=False,title3='Suicide count',label4='',metr=300,colmap='viridis')","27ee177d":"data_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         data,left_on='CountryName',right_on='country')\nplt.figure(figsize=(15,15))\nmapWorld(col1='gdp_per_capita ($)', size2=False,title3='GDP ($)',label4='',metr=200,colmap='viridis')","ce38ccfb":"suic_sum_m = data['suicides_no'].groupby([data['country'],data['sex']]).sum()\nsuic_sum_m = suic_sum_m.reset_index().sort_index(by='suicides_no',ascending=False)\nmost_cont_m = suic_sum_m.head(10)\nmost_cont_m.head(10)\nfig = plt.figure(figsize=(20,5))\nplt.title('Count of suicides for 31 years.')\nsns.set(font_scale=1.5)\nsns.barplot(y='suicides_no',x='country',hue='sex',data=most_cont_m,palette='Set2');\nplt.ylabel('Count of suicides')\nplt.tight_layout()","1f5f45d0":"suic_mean = pd.DataFrame(data['suicides\/100k pop'].groupby(data['country']).mean())\nsuic_mean = suic_mean.reset_index()\nsuic_mean_most = suic_mean.sort_index(by='suicides\/100k pop',ascending=False).head(8)\n\nfig = plt.figure(figsize=(15,5))\nplt.title('suicides\/100k pop.')\n#sns.set(font_scale=1.5)\nsns.barplot(y='suicides\/100k pop',x='country',data=suic_mean_most,palette=\"GnBu_d\");\nplt.ylabel('suicides\/100k pop')\nplt.tight_layout()","bea18ee5":"data_past = data[data['year']<2000]\nsuic_mean = pd.DataFrame(data_past['suicides\/100k pop'].groupby(data_past['country']).mean())\nsuic_mean = suic_mean.reset_index()\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         suic_mean,left_on='CountryName',right_on='country')\nplt.figure(figsize=(15,15))\nmapWorld(col1='suicides\/100k pop', size2=False,title3='Suicides\/100k pop before 2000 year',label4='',metr=300,colmap='viridis')","760b6514":"data_last = data[data['year'] > 2000]\nsuic_mean = pd.DataFrame(data_last['suicides\/100k pop'].groupby(data_last['country']).mean())\nsuic_mean = suic_mean.reset_index()\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         suic_mean,left_on='CountryName',right_on='country')\nplt.figure(figsize=(15,15))\nmapWorld(col1='suicides\/100k pop', size2=False,title3='Suicides\/100k pop after 2000 year',label4='',metr=300,colmap='viridis')","9a273202":"suic_sum_yr = pd.DataFrame(data['suicides_no'].groupby(data['year']).sum())\nsuic_sum_yr = suic_sum_yr.reset_index().sort_index(by='suicides_no',ascending=False)\nmost_cont_yr = suic_sum_yr\nfig = plt.figure(figsize=(30,10))\nplt.title('Count of suicides for years.')\nsns.set(font_scale=2.5)\nsns.barplot(y='suicides_no',x='year',data=most_cont_yr,palette=\"OrRd\");\nplt.ylabel('Count of suicides')\nplt.xlabel('')\nplt.xticks(rotation=45)\nplt.tight_layout()","f51d3d21":"suic_sum_yr = pd.DataFrame(data['suicides_no'].groupby([data['generation'],data['year']]).sum())\nsuic_sum_yr = suic_sum_yr.reset_index().sort_index(by='suicides_no',ascending=False)\nmost_cont_yr = suic_sum_yr\nfig = plt.figure(figsize=(30,10))\nplt.title('The distribution of suicides by age groups')\n\nsns.set(font_scale=2)\nsns.barplot(y='suicides_no',x='year',hue='generation',data=most_cont_yr,palette='deep');\nplt.ylabel('Count of suicides')\nplt.xticks(rotation=45)\nplt.tight_layout()","d4ebbc61":"suic_sum_yr = pd.DataFrame(data['suicides_no'].groupby([data['generation'],data['country']]).sum())\nsuic_sum_yr = suic_sum_yr.reset_index().sort_index(by='suicides_no',ascending=False)\nmost_cont = suic_sum_yr\n\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         most_cont,left_on='CountryName',right_on='country')","9547cde5":"data_new = data[data['year']<2000]\ntitle_map = 'Generation suicides before 2000 year'\ndata_gener = pd.DataFrame(data_new['suicides_no'].groupby([data_new['generation'],data_new['country']]).sum()).reset_index()\nage_max = pd.DataFrame(data_gener['suicides_no'].groupby(data_gener['country']).max()).reset_index()\ngen_full = pd.merge(age_max,data_gener,left_on=['suicides_no','country'],right_on=['suicides_no','country'])\n\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         gen_full,left_on='CountryName',right_on='country')\ndata_full.dropna(inplace=True)\n\ndef gener(x):\n    dic_t = {'Generation X':100,'Silent':200,'G.I. Generation':300,'Boomers':400,'Millenials':500,'Generation Z':600}\n    return dic_t[x]\ndata_full.generation = data_full.generation.apply(gener)\nprint(\" Generation X:100 \\n Silent:200 \\n G.I. Generation:300 \\n Boomers:400 \\n Millenials:500 \\n Generation Z:600\")\nplt.figure(figsize=(15,15))\nmapWorld(col1='generation', size2='suicides_no', title3=title_map,label4='',metr=0.01,colmap='viridis')","60a3b238":"data_new = data[data['year']>=2000]\ntitle_map = 'Generation suicides after 2000 year'\ndata_gener = pd.DataFrame(data_new['suicides_no'].groupby([data_new['generation'],data_new['country']]).sum()).reset_index()\nage_max = pd.DataFrame(data_gener['suicides_no'].groupby(data_gener['country']).max()).reset_index()\ngen_full = pd.merge(age_max,data_gener,left_on=['suicides_no','country'],right_on=['suicides_no','country'])\n\ndata_full = pd.merge(concap[['CountryName', 'CapitalName', 'CapitalLatitude', 'CapitalLongitude']],\\\n         gen_full,left_on='CountryName',right_on='country')\ndata_full.dropna(inplace=True)\n\ndef gener(x):\n    dic_t = {'Generation X':100,'Silent':200,'G.I. Generation':300,'Boomers':400,'Millenials':500,'Generation Z':600}\n    return dic_t[x]\ndata_full.generation = data_full.generation.apply(gener)\nprint(\" Generation X:100 \\n Silent:200 \\n G.I. Generation:300 \\n Boomers:400 \\n Millenials:500 \\n Generation Z:600\")\nplt.figure(figsize=(15,15))\nmapWorld(col1='generation', size2='suicides_no', title3=title_map,label4='',metr=0.01,colmap='viridis')","fea408a4":"Let's divide data into old and new:","c25a33ed":"First look at numerical features:","3c25eb25":"Count of suicides for 31 years. Note that not all countries are included in this list! This is extremely important.","14542411":"Compare this with statistics - suicides\/100k pop.","504c2dac":"Thank you for reading! I hope this kernel was helpful for you. <br>\nIf you like same map visualization, you can see my other kernels:\nhttps:\/\/www.kaggle.com\/nikitagrec\/kernels","34d334b6":"# Suicide Rates Overview 1985 to 2016","eb065604":"Here we can see count of suicides by year distribution:","ba76a05a":"For this map, color - generation, size - suicides_no","c2d452f7":"Compare it with map - gdp_per_capita ($)","66022b67":"Consider it on the map. I will remind you, that many big (by population) countries aren't included in this dataset.","330db5f6":"What is the most critical age group?","8eaa92d5":"Consider same barplot with with gender difference:","a7693b66":"Here you can see map with missing countries in this dataset. This is important information, and we can suggest that situation with suicide in these countries is bad. <br>\nIt should be noted that our dataset is offset and not completely objective.","e3ad077c":"Open dataset and consider it's head"}}