{"cell_type":{"53de9af4":"code","d687a1c1":"code","8101459d":"code","e1babdbb":"code","86209fa9":"code","8f5df7bb":"code","1b0b92e1":"code","1ee6cab8":"code","9a842d3d":"code","ecba24b1":"code","09d93774":"code","918c0946":"code","03aca2b6":"code","24e101de":"code","6e97cea6":"code","0c5dbf8e":"code","80da86f5":"code","e94ef0fd":"code","925584e4":"code","29635d1e":"code","46a7d967":"code","f2159b3e":"code","6c16b649":"code","57c662c8":"code","0ebbed18":"code","6d83151f":"code","842c665d":"code","7d24e907":"code","0104f880":"code","bdac6052":"code","e28e90cf":"code","7dd629ab":"code","80c74f66":"code","36c7e63a":"markdown","ebce0c74":"markdown","4ccf734d":"markdown","7a3aa3a5":"markdown","e25691e4":"markdown","b02dc4b1":"markdown","09b6cb22":"markdown","1adc0292":"markdown","c1b6b80e":"markdown","b6f726c3":"markdown","6129fd60":"markdown","1fbe22e7":"markdown","d7044063":"markdown","8fc01252":"markdown","86b0d644":"markdown","d13f80fe":"markdown","7f053e71":"markdown","e25dafa6":"markdown","907ae22d":"markdown","524642f0":"markdown","4b045abf":"markdown","36468310":"markdown","c169ac2d":"markdown","c408727e":"markdown","c77cba8c":"markdown","03ea167e":"markdown","7d9f469e":"markdown","16f72e54":"markdown","f0a7c49c":"markdown","6d24c653":"markdown"},"source":{"53de9af4":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly as py\nimport plotly.express as px\nimport plotly.graph_objs as go\nsns.set(style=\"white\", color_codes=True)\n\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# We will use - 'corona-virus-report', 'novel-corona-virus-2019-dataset' ","d687a1c1":"import os\n# print(os.listdir(\".\"))\nfor item in os.listdir(\"..\/input\/\"):\n    print(item)\n    print(os.listdir(f'..\/input\/{item}'))","8101459d":"table1 = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates=['ObservationDate'])\nprint(table1.shape)\ntable1.head(2)","e1babdbb":"table2 = pd.read_csv('..\/input\/countryinfo\/covid19countryinfo.csv', thousands=',')\nprint(table2.shape)\ntable2.head(3)","86209fa9":"#PREPRARING TABLE1 DATA\ntable1 = table1.dropna(axis=0, how='all')\ntable1 = table1.drop(['SNo'], axis=1)\n\n# Renaming Mainland china as China in the data table\ntable1['Country\/Region'] = table1['Country\/Region'].replace('Mainland China', 'China')\ntable1 = table1.rename(columns={'ObservationDate':'Date', 'Country\/Region':'country'})\n\ncases = ['Confirmed', 'Deaths', 'Recovered', 'Active']\n\n# Active Case: Active Case = confirmed - deaths - recovered\ntable1['Active'] = table1['Confirmed'] - table1['Deaths'] - table1['Recovered']\n\n# filling missing values \ntable1[['Province\/State']] = table1[['Province\/State']].fillna('')\ntable1[cases] = table1[cases].fillna(0)\n\n# latest\ntable1_latest = table1[table1['Date'] == max(table1['Date'])].reset_index()\n# latest_reduced\ntable1_latest_gp = table1_latest.groupby('country')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntable1.tail(2)","8f5df7bb":"# PREPARING TABLE2 DATA\n\ntable2 = table2.dropna(axis=0, how='all')\n# table2 = table2.dropna(axis=1, thresh=len(table2)*0.20) # selecting columns with atleast 20% non-nan values\n\nprint(table2.shape)\ncountry_info = table2[table2['region'] != table2['region']].drop(['region', 'alpha3code', 'alpha2code', 'newcases30','newcases31','deaths','newdeaths30','newdeaths31','recovered','critical30','critical31', 'active30', 'active31'], axis=1)\n# table2[(table2['quarantine'] == table2['quarantine']) & (table2['region'] != table2['region'])][['country', 'quarantine']]\n\n# country_info[['healthexp', 'totalcases']].apply(pd.to_numeric)\ncountry_info.head(2)","1b0b92e1":"# temp = table1.groupby(['Country\/Region', 'Province\/State'])['Confirmed', 'Deaths', 'Recovered', 'Active'].max().reset_index()\n# temp[temp['Confirmed'] == max(temp['Confirmed'])]\n\n# OR\ntemp = table1_latest_gp[table1_latest_gp['Confirmed'] == max(table1_latest_gp['Confirmed'])]\nprint(temp['country'])\ntemp","1ee6cab8":"temp = table1.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n(temp.style.background_gradient(cmap='Pastel1'))","9a842d3d":"temp_f = table1_latest_gp.sort_values(by='Confirmed', ascending=False)\ntemp_f = temp_f.reset_index(drop=True)[:20]\ntemp_f.style.background_gradient(cmap='Reds')","ecba24b1":"import plotly as py\nimport plotly.graph_objects as go\n# from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n# init_notebook_mode(connected=True)\ntemp = table1.groupby('Date').max().reset_index()\n\nfig = go.Figure()\nfig.add_trace(go.Bar(\n                x=temp['Date'],\n                y=temp['Confirmed'],\n                name=\"Confirmed\",))\n\nfig.add_trace(go.Bar(\n                x=temp['Date'],\n                y=temp['Recovered'],\n                name=\"Recovered\",))\nfig.update_layout(title_text='Rate of cases over time')\npy.offline.iplot(fig)\n# fig.write_image(\"global_CR.png\",scale=1, width=800, height=420)","09d93774":"fig = plt.figure(figsize=(12, 7))\n# ax = plt.subplot(111)\nplt.plot(table1.groupby('Date').sum().reset_index()[cases], linewidth=3)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('total Cases', size=20)\nplt.legend(cases, prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n# fig.savefig('global_CARD.png', bbox_inches='tight')","918c0946":"top_5 = list(temp_f['country'][:5])\nfig = plt.figure(figsize=(12,8))\nplt.plot(table1[table1['country'] == top_5[0]].groupby('Date').sum().reset_index()['Confirmed'], linewidth=3)\nplt.plot(table1[table1['country'] == top_5[1]].groupby('Date').sum().reset_index()['Confirmed'], linewidth=3)\nplt.plot(table1[table1['country'] == top_5[2]].groupby('Date').sum().reset_index()['Confirmed'], linewidth=3)\nplt.plot(table1[table1['country'] == top_5[3]].groupby('Date').sum().reset_index()['Confirmed'], linewidth=3)\nplt.plot(table1[table1['country'] == top_5[4]].groupby('Date').sum().reset_index()['Confirmed'], linewidth=3)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('total Cases', size=20)\nplt.legend(top_5, prop={'size': 15})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n# fig.savefig('country_C.png', bbox_inches='tight')","03aca2b6":"temp = table1.groupby('Date').max().reset_index()\ndates = temp.keys()\nmortality_rate = []\nrecovery_rate = [] \n\nfor i,row in temp.iterrows():\n    confirmed_sum = temp.iloc[i]['Confirmed']\n    death_sum = temp.iloc[i]['Deaths']\n    recovered_sum = temp.iloc[i]['Recovered']\n\n    mortality_rate.append(death_sum\/confirmed_sum)\n    recovery_rate.append(recovered_sum\/confirmed_sum)\n\n\nfig = plt.figure(figsize=(12, 7))\nplt.plot(mortality_rate, linewidth=3)\nplt.plot(recovery_rate, linewidth=3)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('rate (0-1)', size=20)\nplt.legend(['mortality rate', 'recovery rate'], prop={'size': 20})\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n# fig.savefig('global_rate.png', bbox_inches='tight')","24e101de":"# TOP 10 COUNTRIES WITH MOST NUMBER OF DEATHS\n\ntemp_f = table1.groupby('country').max().reset_index()[['country','Deaths','Recovered']].sort_values('Deaths', ascending=False)[:10].reset_index(drop=True)\ntemp_f.style.background_gradient(cmap='Reds')","6e97cea6":"top_5 = temp_f['country'][:6]\ntemp = table1[table1['country'] == 'US'].groupby('Date').max().reset_index()\n\nfig = plt.figure(figsize=(16,12))\n# fig, ax = plt.subplots(1, 1)\nax = plt.subplot(2,2,1)\nax.plot(table1[table1['country'] == top_5[0]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[1]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[2]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[3]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[4]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[5]].groupby('Date').max().reset_index()['Deaths'], linewidth=3)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Total Deaths', size=15)\nplt.legend(top_5, prop={'size': 12})\nplt.xticks(size=12)\nplt.yticks(size=12)\n\nax = plt.subplot(2,2,2)\nax.plot(table1[table1['country'] == top_5[0]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[1]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[2]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[3]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[4]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nax.plot(table1[table1['country'] == top_5[5]].groupby('Date').max().reset_index()['Recovered'], linewidth=3)\nplt.xlabel('Days Since 1\/22\/2020', size=15)\nplt.ylabel('Total Recoveries', size=15)\nplt.legend(top_5, prop={'size': 12})\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.show()\n# fig.savefig('country_RD.png', bbox_inches='tight')","0c5dbf8e":"\"\"\"\n@temp1 - subset of country_info for population, density, and healthcare related data against total cases, deaths.\n\"\"\"\n\ntemp1 = country_info[['country','healthperpop', 'pop' , 'density','hospibed', 'totalcases']].sort_values(by='totalcases', ascending=False)\ntemp1 = temp1.reset_index(drop=True)\n\ntemp1.style.bar(subset=['healthperpop', 'totalcases', 'urbanpop'], align='mid', color=['#d65f5f', '#5fba7d'])\n# print(country_info['healthperpop'].mean())\n\nax = sns.heatmap(temp1.corr(), annot=True);\nax.set_ylim([0,5]);\n\nfig = ax.get_figure()\nfig.savefig('corr1.png', bbox_inches='tight')","80da86f5":"temp1 = pd.merge(country_info[['country','healthperpop', 'density','hospibed', 'totalcases']], table1[['country', 'Recovered']]\\\n                 .groupby('country').max(), on='country').sort_values(by='Recovered', ascending=False)\ntemp1 = temp1.reset_index(drop=True)\ntemp1 = temp1[:40]\n\ntemp1['recover_per_confirmed'] = temp1['Recovered']\/temp1['totalcases']\ntemp1 = temp1.sort_values('recover_per_confirmed', ascending=False)[1:].reset_index(drop=True)\n\nx = temp1['healthperpop']\nx2 = temp1['density']\ntemp1['healthperpop_z'] = (x - x.mean())\/x.std()\ntemp1['density_z'] = (x2 - x2.mean())\/x2.std()\n\nfig = go.Figure()\nfig.add_trace(go.Bar(y=temp1.loc[:29, ['country']].values.reshape(30),\n               x=np.array(temp1.loc[:29, ['healthperpop_z']]).reshape(30),\n               orientation='h',\n               name='health exp per pop',\n               hoverinfo='x',\n               marker=dict(color='deepskyblue'),\n               width=0.4\n               ))\n\nfig.add_trace(go.Bar(y=temp1.loc[:29, ['country']].values.reshape(30),\n               x=np.array(temp1.loc[:29, ['density_z']]).reshape(30),\n               orientation='h',\n               name='density',\n               hoverinfo='x',\n               marker=dict(color='seagreen'),\n               width=0.4  \n               ))\nfig.update_layout(title = 'countries with most RECOVERIES PER CONFIRMED Cases vs HEALTH Exp vs Population DENSITY',\n                  yaxis=go.layout.YAxis(title_text='countries - total cases', tickvals=temp1.loc[:29, ['country']].values.reshape(30)),\n                  xaxis=go.layout.XAxis(\n                       range = [-1, 2.0],\n                       tickvals = [-1, -0.5, 0, 0.5, 1.5, 1, 2],\n                       ticktext = [-1, -0.5, 'Global Average', 0.5, 1.5, 1, 2],\n                       title = 'z - score'),\n#                   barmode='overlay',\n                  bargap=0.3)\npy.offline.iplot(fig);\n# fig.write_image(\"global_density_healthexp.png\",scale=1.2)","e94ef0fd":"country_age = pd.merge(country_info[['country', 'medianage', 'sexratio']], table1[['country', 'Deaths']].groupby('country').max(), on='country')\ncountry_age = country_age.sort_values(by='Deaths', ascending=False)[:20]\n# temp3[temp3['country'] == 'India']\n\nfig = px.scatter(country_age, x=\"country\", y=\"medianage\", size=\"Deaths\", \n                 color=\"country\", hover_name=\"country\", size_max=60)\n\nfig.update_layout(title_text='countries with most DEATHS vs Median Age',\n                  yaxis=go.layout.YAxis(title_text='Median Age',\n#                                         tickvals = [-1, 0, 1, 2, 3, 4],\n#                                         ticktext = [-1, 'Global Average', 1, 2, 3, 4],\n                                       ),\n                   xaxis=go.layout.XAxis(title_text='Countries with incoming rate (high -> low)')\n                 )\n\nfig.show();\n","925584e4":"fig = px.bar(country_age[:12], x=\"country\", y=\"medianage\", color=\"country\")\n\nfig.update_layout(title_text='countries with most DEATHS vs Median Age',\n                  yaxis=go.layout.YAxis(title_text='Median Age'),\n                   xaxis=go.layout.XAxis(title_text='Countries with most DEATHS (high -> low)')\n                 )\n\nfig.show();\n# fig.write_image(\"deathVSage.png\",scale=1, width=800, height=420)","29635d1e":"global_inbound = pd.read_excel('..\/input\/countries-travel-inbound-dataset-19952018\/global_travel_inbound.xls', header=3)\nglobal_inbound = global_inbound.dropna(how='all', axis=1)\n\nindeces = global_inbound.drop(['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'], axis=1).dropna(how='all', axis=0).index\nglobal_inbound = global_inbound.iloc[indeces].reset_index(drop=True)\n\n# Renaming column to similar column names\nglobal_inbound = global_inbound.rename(columns={'Country Name':'country'})\n# Changing United States to 'US' o maintain similarity\nglobal_inbound.loc[global_inbound['country']=='United States', 'country'] = 'US'","46a7d967":"temp = pd.merge(global_inbound, country_info, on='country').reset_index(drop=True)\ntemp = temp[['country', 'totalcases', 'firstcase', 'quarantine', '1995',\n       '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004',\n       '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013',\n       '2014', '2015', '2016', '2017', '2018']]\n\ntemp = temp.sort_values('totalcases', ascending=False)[:20]","f2159b3e":"with sns.axes_style(\"whitegrid\"):\n    \n    fig = plt.figure(figsize=(10,6))\n    plot=list()\n    color_palette = sns.hls_palette(temp[:10].shape[0], l=.4, s=.8)\n    for i in range(temp[:10].shape[0]):\n        plt.plot(temp[[ '2008', '2009', '2010', '2011', '2012', '2013','2014', '2015', '2016', '2017', '2018']].iloc[i].values,\n                 color=color_palette[i], label=temp.iloc[i]['country'], linewidth=3, marker='o')\n\nplt.legend(handles = plot, labels = list(temp['country'][:10].values))    \nplt.xlabel('years', size=16)\nplt.ylabel('total visitors (in 10 millions)', size=16)\nplt.xticks(list(range(1,10)), labels=[ '2008', '2009', '2010', '2011', '2012', '2013','2014', '2015', '2016', '2017', '2018'], size=14)\nplt.yticks(size=16)\nplt.show()\n\nfig.savefig('visitors_2018.png', bbox_inches='tight')","6c16b649":"fig = px.scatter(temp, x=\"country\", y=\"2018\", size=\"totalcases\", \n                 color=\"country\", hover_name=\"country\", size_max=60)\n\nfig.update_layout(title_text='countries with total cases vs Annual Travel Visitors(2018)',\n                  yaxis=go.layout.YAxis(title_text='Annual Travel Visitors (2018)',\n#                                         tickvals = [-1, 0, 1, 2, 3, 4],\n#                                         ticktext = [-1, 'Global Average', 1, 2, 3, 4],\n                                       ),\n                  xaxis=go.layout.XAxis(title_text='Countries with incoming rate (high -> low)')\n                 )\nfig.show();\n# fig.write_image(\"countriesVSvisitors.png\",scale=1, width=800, height=420)","57c662c8":"china_travel = pd.read_excel('..\/input\/countries-travel-inbound-dataset-19952018\/china_outbound.xlsx', header=5)\nchina_travel = china_travel.dropna(how='all', axis=1)\n\nindeces = china_travel.drop(['country'], axis=1).dropna(how='all', axis=0).index\nchina_travel = china_travel.iloc[indeces].reset_index(drop=True)\n\nchina_travel.loc[china_travel['country']=='Korea, Republic of', 'country'] = 'Korea, South'\nchina_travel.loc[china_travel['country']=='United States of America', 'country'] = 'US'\nchina_travel.shape","0ebbed18":"china_travel_top20 = china_travel.groupby('country').sum().sort_values(by=2018, ascending=False).reset_index()[:40]\n\nplt.figure(figsize=(10,6))\nfig = sns.barplot(x='country', y=2018, data=china_travel_top20[:15], palette='Set1')\n\n# plt.legend(handles = plot, labels = list(temp['country'][:10].values))    \nplt.xlabel('countries', size=16)\nplt.ylabel('Arrivals - 2018 (in 10 millions)', size=16)\nfig.set_xticklabels(fig.get_xticklabels(), rotation=45, horizontalalignment='right', size=12)\nplt.show()\n\nfig = fig.get_figure()\nfig.savefig('chineese_2018.png', bbox_inches='tight')","6d83151f":"# temp4 = pd.merge(temp[['country', '2018']], table1[['country', 'Deaths']].groupby('country').max(), on='country')\n# temp4 = temp4.sort_values(by='Deaths', ascending=False)[:20]\n\ntemp = pd.merge(china_travel_top20, country_info, on='country').reset_index(drop=True)\ntemp = temp.sort_values(2018, ascending=False)\n\nfig = px.scatter(temp, x=\"country\", y='totalcases', size='totalcases', \n                 color=\"country\", hover_name=\"country\", size_max=60)\n\nfig.update_layout(title_text='countries with total cases vs Chineese National Arrivals in countries(2018)',\n                  yaxis=go.layout.YAxis(title_text='Total COVID-19 cases',\n#                                         tickvals = [-1, 0, 1, 2, 3, 4],\n#                                         ticktext = [-1, 'Global Average', 1, 2, 3, 4],\n                                       ),\n                  xaxis=go.layout.XAxis(title_text='Countries with incoming rate (high -> low)')\n                 )\nfig.show();\n# fig.write_image(\"countriesVScases_chineese.png\",scale=1, width=800, height=420)","842c665d":"country_tests = table2.loc[:,['country','pop','tests', 'gatheringlimit']]\n\ncontinents = pd.read_csv(\"..\/input\/country-to-continent\/countryContinent.csv\", encoding='latin-1')\ncontinents = continents.loc[:,['country','continent']]","7d24e907":"continents['continent'].value_counts()","0104f880":"tests_merged = pd.merge(table1[['country', 'Confirmed', 'Deaths', 'Recovered', 'Active']].groupby('country').max(), country_tests, on='country')\ntests_merged = pd.merge(tests_merged, continents, on='country', how='left')\n\ntests_merged.loc[tests_merged.country=='Russia','continent'] = 'Europe'\ntests_merged.loc[tests_merged.country=='US','continent'] = 'Americas'\ntests_merged.loc[tests_merged.country=='Vietnam','continent'] = 'Asia'\n\ntests_merged_notna = tests_merged[['country','pop','Deaths', 'Confirmed', 'Recovered', 'tests', 'continent']].dropna(how='any', axis=0)\\\n.reset_index(drop=True)","bdac6052":"tests_merged_notna['tests_1m'] = round(1000000*tests_merged_notna.tests\/tests_merged_notna['pop'],2)\ntests_merged_notna['Confirmed_1m'] = round(1000000*tests_merged.Confirmed\/tests_merged_notna['pop'],2)\ntests_merged_notna['Deaths_1m'] = round(1000000*tests_merged.Deaths\/tests_merged_notna['pop'],2)\ntests_merged_notna['Recovered_1m'] = round(1000000*tests_merged.Recovered\/tests_merged_notna['pop'],2)","e28e90cf":"tests_merged_notna.head(2)\ntests_merged_notna[tests_merged_notna['country'] == 'India']","7dd629ab":"ax=sns.heatmap(tests_merged_notna.corr(), annot=True);\nax.set_ylim([0,9]);\nfig = ax.get_figure()\n# fig.savefig('corr2.png', bbox_inches='tight')","80c74f66":"tests_merged_notna['size'] = 20\nfig = px.scatter(tests_merged_notna, x='tests_1m', y='Confirmed_1m',  size='size',text='country', color='continent')\\\n.update_traces(textposition='top center', textfont_size=10)\\\n.update_layout(title='Tests conducted vs Confirmed cases by country', xaxis_type='log', yaxis_type='log', xaxis_title='Tests per 1 million population', yaxis_title='Confirmed cases per 1 million population')\nfig.show()\n# fig.write_image(\"countriesVStestsVSpopulation.png\",scale=1, width=800, height=420)","36c7e63a":"<font size=\"5\">**Data Visualisation**<\/font>","ebce0c74":"**7 of top 11 most visited countries are in top 10 countries with most spread of COVID-19. Hence there is good impact of country's travel history in spreading COVID-19.**","4ccf734d":"**The countries with most spread are also the most visited countries by foreign visitors.**","7a3aa3a5":"From plot, it is visible that Italy and Spain has a sudden increase in number of deaths. US despite having a largest number of cases and France also following the same trend.\n\nBut Spain has also highest rate for recoveries.","e25691e4":"The data was available to me was till 2018. So seeing the left graph for top 10 countries with highest number of visitors, the nature of most(except UK) is Non-Descreasing and hence I assume its safe to use this datset.","b02dc4b1":"> TABLE1 DATA ","09b6cb22":"> TABLE2 DATA","1adc0292":"Studying the global Mortality and recovery rate is also very interesting. There is a steep decline in recovery rate for last 20 days, which is justified with sudden increase in Confirmed cases over past couple of weeks.\n\nThis shows as the number of Infected people grows, it affects recovery rate for a infectious disease, which is absolutely justified in SIR model.","c1b6b80e":"**Visual 5 :** Plot for number of deaths and recoveries.","b6f726c3":"There are some countries from the Middle East who had the highest tests\/million rate in the world, but have lower or similar confirmed\/million rate than some Western European countries.\n\nAlso, there are some countries like Belarus, who had many times more tests per million than some south-asian countries, Brazil and South Africa but have identified population with almost the same number of positive cases.\u00a0\n\nOther countries like Pakistan despite having less tests\/million shows a comparitively greater number of infected\/million cases.","6129fd60":"**Preparing the data**","1fbe22e7":"## 1.Trend analysis","d7044063":"**Visual 3 :** Trend for top 5 most spread countries","8fc01252":"## 4. Effect of travel and tourist pattern of countries vs Total Cases","86b0d644":"From the plot, it can be understood that almost all countries has same health expenditure per population and density. Though the average density or health expenditure is insufficent to determine the recovery or deaths status and might not be good predictors.","d13f80fe":"## COVID-19 : impact and analysis\n\n<font size=\"3\">**Coronavirus disease (COVID-19)** is an infectious disease caused by a new virus.\nThe disease causes respiratory illness (like the flu) with symptoms such as a cough, fever, and in more severe cases, difficulty breathing.\n\n\nIn this notebook exploratory analysis of spread of covid-19 is studied and which will help to determine which factors impact the transmission behavior of COVID-19. And I tried to answer some questions through exploratory analysis which can be found at : https:\/\/medium.com\/@namanphy\/covid-19-impact-and-analysis-55f6386df614\n\nThis is notebook is a extension to my previous notebook on COVID-19 : https:\/\/www.kaggle.com\/namanphy7\/covid-19-spread-analysis-visualisation\n\nRight now this notebook examines covid-19 spread based on the following datasets through visualisations. Though it does not consider some key factors such as \n\n1. asymptomatic spread,\n2. Climatic factors\n\n<br\/>\n\nSTAY SAFE.","7f053e71":"**Reading and understanding the data**","e25dafa6":"# **DATA EXPLORATION**\n","907ae22d":"There is some amount of correlation between the total cases and the total population (0.29), which actually justifies itself.","524642f0":"NOTE : This kernel is inspired from few other kaggle kernels and other data science resources. Any traces of replications, which may appear, is purely for the purpose to use them for further developement. Due respect & credit to all my fellow kagglers. Thanks","4b045abf":"**Visual 4 :** Plot for mortality and recovery rates.","36468310":"## 3. Effect of age vs Deaths","c169ac2d":"## 2. Effect of population density, healthcare system","c408727e":"## 5. Effect of tests conducted on Total Cases, recovered cases","c77cba8c":"There is some fair amount of correlation between the total number of tests and the number of recovered cases (0.58), which is higher than the correlation between the number of tests and number of confirmed cases (0.46) or deaths (0.40). Some good correlation can be seen in confirmed cases, recoveries and deaths.","03ea167e":"**7 out of top 10 countries with most deaths has a median age of above 40 years. Age can be good predictor to predict the COVID-19 situation.**","7d9f469e":"**Visual 1 :** A Time-series graph of the confirmed and recovered cases of COVID-19. This shows that with increasing number of positive cases the number of recovered cases as a whole also increasing telling us that the situation is improving.\n\n1. The rate of increase of confirmed cases significantly drops from March 1st week and almost flattens and then booms suddenly after march 3rd week with a steep slope.\n2. We expect the bar of **recovered cases** to increase in coming weeks to compensate the total number of positive cases and neutralise the situation.","16f72e54":"**1. Maximum number of cases from country**\n\n","f0a7c49c":"**Visual 2 :** Total confirmed, recovered, active cases.","6d24c653":"**2. Total Global cases**"}}