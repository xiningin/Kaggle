{"cell_type":{"527af537":"code","27cc01ae":"code","6de5a2c7":"code","db93db14":"code","b9f32ea1":"code","75dd3cb3":"code","8af74726":"code","14f7836c":"code","562a1f30":"code","5c0e5ab5":"code","a748bace":"code","c03d0088":"code","ccfe056b":"code","67fb9e20":"code","9dd0ebb8":"code","606094e7":"code","5fdbfeab":"code","b28d6062":"code","7c0bdffa":"code","23a089c1":"code","d4dda7c3":"code","6191856f":"code","104f0263":"code","9abf0668":"code","794a6f78":"code","58fd7efb":"code","a63728e3":"code","937045a0":"code","319989f6":"code","0737ae31":"code","1e7e3f69":"code","72e8eb09":"code","3072d837":"code","cec60cfe":"markdown","fc6a5ccc":"markdown"},"source":{"527af537":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import optimize","27cc01ae":"%matplotlib inline","6de5a2c7":"training_set = pd.read_csv('..\/input\/training_set.csv')\nmeta_data = pd.read_csv('..\/input\/training_set_metadata.csv')\ntest_meta_data = pd.read_csv('..\/input\/test_set_metadata.csv')\ntraining_set.head()","db93db14":"targets = np.hstack([np.unique(meta_data['target']), [99]])\ntarget_map = {j:i for i, j in enumerate(targets)}\ntarget_ids = [target_map[i] for i in meta_data['target']]\nmeta_data['target_id'] = target_ids\n\n","b9f32ea1":"galactic_cut = meta_data['hostgal_specz'] == 0\nplt.figure(figsize=(10, 8))\nplt.hist(meta_data[galactic_cut]['target_id'], 15, (0, 15), label='Galactique')\nplt.hist(meta_data[~galactic_cut]['target_id'], 15, (0, 15), label='Extragalactique')\nplt.xticks(np.arange(15)+0.5,   targets)\nplt.gca().set_yscale(\"log\")\nplt.xlabel('Classe')\nplt.ylabel('nombre')\nplt.xlim(0, 15)\nplt.legend();","75dd3cb3":"\ntarget_types={6:'Microlensing', 15:'Explosive Type V', 16:'Transits', 42:'Explosive type W', 52:'Explosive Type X', \n                  53:'Long periodic', 62:'Explosive Type Y', 64:'Near Burst', 65:'Flare', 67:'Explosive Type Z',\n                  88:'AGN', 90:'SN Type U', 92:'Periodic', 95:'SN Type T'}","8af74726":"object_list=times.groupby('object_id').apply(lambda x: x['object_id'].unique()[0]).tolist()","14f7836c":"colors = ['purple', 'blue', 'green', 'orange', 'red', 'black']\n\ndef plot_one_object(obj_id):\n        \n    for band in range(len(colors)):\n        sample = train_series[(train_series['object_id'] == obj_id) & (train_series['passband']==band)]\n        plt.errorbar(x=sample['mjd'],y=sample['flux'],yerr=sample['flux_err'],c = colors[band],fmt='o',alpha=0.7)","562a1f30":"#le nombre d'objet dans chaque classe.","5c0e5ab5":"for t in sorted(meta_data['target'].unique()):\n    print (t,meta_data[meta_data['target']== t]['target'].count(),target_types[t],meta_data[meta_data['target']== t]['hostgal_specz'].mean())","a748bace":"print(meta_data[meta_data.isnull().any(axis=1)][null_columns].head())","c03d0088":"null_columns=test_meta_data.columns[test_meta_data.isnull().any()]\ntest_meta_data[null_columns].isnull().sum()","ccfe056b":"\ngroups = training_set.groupby(['object_id', 'passband'])\ngroups","67fb9e20":"times = groups.apply(\n    lambda block: block['mjd'].values).reset_index().rename(columns={0: 'seq'})\nflux = groups.apply(\n    lambda block: block['flux'].values\n).reset_index().rename(columns={0: 'seq'})\nerr = groups.apply(\n    lambda block: block['flux_err'].values\n).reset_index().rename(columns={0: 'seq'})\ndet = groups.apply(\n    lambda block: block['detected'].astype(bool).values\n).reset_index().rename(columns={0: 'seq'})\ntimes_list = times.groupby('object_id').apply(lambda x: x['seq'].tolist()).tolist()\nflux_list = flux.groupby('object_id').apply(lambda x: x['seq'].tolist()).tolist()\nerr_list = err.groupby('object_id').apply(lambda x: x['seq'].tolist()).tolist()\ndet_list = det.groupby('object_id').apply(lambda x: x['seq'].tolist()).tolist()","9dd0ebb8":"flux","606094e7":"object_list=times.groupby('object_id').apply(lambda x: x['object_id'].unique()[0]).tolist()","5fdbfeab":"colors = ['purple', 'blue', 'green', 'orange', 'red', 'black']\n\ndef plot_one_object(obj_id):\n        \n    for band in range(len(colors)):\n        sample = training_set[(training_set['object_id'] == obj_id) & (training_set['passband']==band)]\n        plt.errorbar(x=sample['mjd'],y=sample['flux'],yerr=sample['flux_err'],c = colors[band],fmt='o',alpha=0.7)","b28d6062":"for t in sorted(meta_data['target'].unique()):\n    print (t,meta_data[meta_data['target']== t]['target'].count(),target_types[t],meta_data[meta_data['target']== t]['hostgal_specz'].mean())","7c0bdffa":"def fit_kernel_length_only(times_band,flux_band,err_band):\n    \n    def _kernel_likelihood(length):\n        sigma=siguess\n        #length=params\n        kernel=np.exp(-(np.reshape(times_band,(-1,1)) - times_band)**2\/2\/length**2)\n        np.fill_diagonal(kernel,0)\n        sumw=kernel.dot(1.\/err_band**2) + 1.\/sigma**2\n        pred=kernel.dot(flux_band\/err_band**2) \/ sumw\n        chi2 = (pred - flux_band)**2 \/ ( err_band**2 + 1.\/sumw )\n        # -2 ln likelihood\n        logl=np.sum(chi2 + np.log(err_band**2 + 1.\/sumw))\n        return logl\n    \n    lguess=(np.max(times_band)-np.min(times_band))\/len(times_band)\n    siguess=np.std(flux_band)\n    output=optimize.fmin(_kernel_likelihood,lguess,disp=False,xtol=0.01,full_output=1)\n    return (siguess,output[0][0]), output[1]","23a089c1":"def kernel_predict(params,times_band,flux_band,err_band):\n    sigma=params[0]\n    length=params[1]\n    kernel=np.exp(-(np.reshape(time_grid,(-1,1)) - times_band)**2\/2\/length**2)\n    sumw=kernel.dot(1.\/err_band**2) + 1.\/sigma**2\n    pred=kernel.dot(flux_band\/err_band**2) \/ sumw\n    return pred, np.sqrt(1.\/sumw)","d4dda7c3":"def make_kernel(tlist,flist,elist,fit_kernel_function=fit_kernel_length_only):\n    flux_grid = []\n    err_grid = []\n    kernel_sigma = []\n    kernel_length = []\n    kernel_logl=[]\n    for iobj,(times_obj,flux_obj,err_obj) in enumerate(zip(tlist,flist,elist)):\n        flux_grid_obj=[]\n        err_grid_obj=[]\n        kernel_sigma_obj = []\n        kernel_length_obj = []\n        kernel_logl_obj=[]\n        if iobj in meta_data[meta_data['hostgal_photoz']!=0.0].index:\n            for times_band,flux_band,err_band in zip(times_obj,flux_obj,err_obj):\n                (sigma,length),logl = fit_kernel_function(times_band,flux_band,err_band)\n                k_flux,k_err=kernel_predict((sigma,length),times_band,flux_band,err_band)\n                flux_grid_obj.append(k_flux)\n                err_grid_obj.append(k_err)\n                kernel_sigma_obj.append(sigma)\n                kernel_length_obj.append(length)\n                kernel_logl_obj.append(logl)\n        else:\n            kernel_sigma_obj=[0]*6\n            kernel_length_obj=[0]*6\n            kernel_logl_obj=[0]*6\n        flux_grid.append(flux_grid_obj)\n        err_grid.append(err_grid_obj)\n        kernel_sigma.append(kernel_sigma_obj)\n        kernel_length.append(kernel_length_obj)\n        kernel_logl.append(kernel_logl_obj)\n    return flux_grid,err_grid, kernel_sigma, kernel_length,kernel_logl","6191856f":"iobj=1\nband=3\ntime_grid=(np.arange(59550,60705,5.))\n(sigma,length),logl = fit_kernel_length_only(times_list[iobj][band],flux_list[iobj][band],err_list[iobj][band])\n#length=4.0\nk_flux,k_err=kernel_predict((sigma,length),times_list[iobj][band],flux_list[iobj][band],err_list[iobj][band])\nplt.errorbar(times_list[iobj][band],flux_list[iobj][band],yerr=err_list[iobj][band],color=colors[band],fmt='o')\nplt.plot(time_grid,k_flux)\nplt.fill_between(time_grid,k_flux-k_err,k_flux+k_err,alpha=0.3)\nplt.ylim(np.min(flux_list[iobj][band]*1.5,0),np.max(flux_list[iobj][band]*1.5,0))\n#plt.xlim(60100,60300)\nprint (sigma,length,logl)","104f0263":"klonly_flux_grid,klonly_err_grid,klonly_sigma,klonly_length,klonly_logl = make_kernel(\n    times_list,flux_list,err_list,fit_kernel_function=fit_kernel_length_only)","9abf0668":"def plot_interpolations(iobj,times_list,flux_list,err_list,flux_grid,err_grid):\n    fig, axes = plt.subplots(2, 3, sharex=True, sharey=True, figsize=(12, 8))\n    plt.title(target_types[meta_data.loc[iobj,'target']]) \n    for band in range(6):\n        ax = axes[band \/\/ 3, band % 3]\n        ax.errorbar(times_list[iobj][band],flux_list[iobj][band],yerr=err_list[iobj][band],color=colors[band],fmt='o')\n        ax.plot(time_grid,flux_grid[iobj][band],color=colors[band])\n        ax.fill_between(time_grid,flux_grid[iobj][band]-err_grid[iobj][band],\n                        flux_grid[iobj][band]+err_grid[iobj][band],alpha=0.3,color=colors[band])\n        ax.set_xlabel('MJD')\n        ax.set_ylabel('Flux')\n    plt.title(target_types[meta_data.loc[iobj,'target']])\nplot_interpolations(300,times_list,flux_list,err_list,klonly_flux_grid,klonly_err_grid)\n#plt.ylim(-50,200)\nplt.xlim(60000,60250)","794a6f78":"for iobj in meta_data[(meta_data['ddf']==0)]['object_id'][:25]:\n   plt.figure()\n   plot_one_object(iobj)","58fd7efb":"x1=meta_data[\"hostgal_specz\"].tolist()\nx2=meta_data[\"hostgal_photoz\"].tolist()\nplt.scatter(x1, meta_data[\"distmod\"],color = 'red');\nplt.scatter(x2, meta_data[\"distmod\"],color = 'blue');","a63728e3":"true_photoz= meta_data[~meta_data.hostgal_specz.isna()==~meta_data.hostgal_photoz.isna()]\ntrue_photoz.plot.scatter(x=\"hostgal_specz\", y=\"hostgal_photoz\",color = 'green');","937045a0":"\ntraining_set.plot.scatter(y=\"passband\", x=\"flux\");","319989f6":"meta_data.plot.scatter(x=\"gal_l\", y=\"ra\")","0737ae31":"meta_data.plot.scatter(x=\"decl\", y=\"gal_b\")","1e7e3f69":"l=len(meta_data['target_id'])","72e8eb09":"l=len(unique(training_set['object_id']))","3072d837":"l","cec60cfe":"**EXPLORATION ET TRAITEMENT DES DONNEES:**\n1. objets galactiques et extragalactiques.(chque classe est soit galactique(redshift=0) soit extragalactique)\n1.  affichage en histagram\n1. valeur nan dans les attributs (distmod, et hostgal_spectz pour les donnees de test)\n1.  les attributs correles sont: \n                                          * hostgal_photoz et distmod.\n                                          * flux et distmod.\n                                          * hostgal_photoz et hostgal_spectz.\n                                          * passband et flux\n                                          * ra et gal_l\n                                          * dec et gal_b\n                                              \n                                              \n\n\n","fc6a5ccc":"attribuant a chque classe son nom tel que definie par les astronautes ."}}