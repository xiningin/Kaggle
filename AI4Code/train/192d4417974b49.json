{"cell_type":{"49507515":"code","7226ae86":"code","fc1d3b8c":"code","04d10731":"code","4c0b941a":"code","2310dabe":"code","de0f2bae":"code","1e657b38":"code","852f6ee1":"code","efcfeab6":"code","5bb5909d":"code","9b671dff":"code","3036dc90":"code","50d9586f":"code","531c62ce":"code","af8d1bb0":"code","77ad0d65":"code","50b2e2bb":"code","840c52fb":"code","98f775d3":"code","809624a7":"code","cb5abbab":"code","3fa70a7b":"code","57ce3de8":"code","2503bd11":"code","daf76722":"code","c58fd3a2":"code","013f897f":"code","cd048b19":"code","095231cf":"code","29f1a531":"code","4be7e104":"code","49368f99":"code","f4ec825f":"code","8e35ad80":"code","68101a7b":"markdown","c2abc26c":"markdown","3b7f8eea":"markdown","bb9a5236":"markdown","eea4e84c":"markdown","17e7b25a":"markdown","0abf3775":"markdown","44e3e8b6":"markdown","2504e4d6":"markdown","74a47b19":"markdown","6b8009e4":"markdown","82cacafe":"markdown","86f4c6f8":"markdown","63088bc7":"markdown","28959524":"markdown","b51b07da":"markdown","a16521b6":"markdown","ea3ee228":"markdown","ef4ec4e8":"markdown","afc97b70":"markdown","23189ddf":"markdown","c44687b6":"markdown","fb9d700d":"markdown","bd8bcf37":"markdown","aaf577e5":"markdown","5c3f44c7":"markdown","b683ffbd":"markdown","025e6e6c":"markdown","f76c5c85":"markdown","b5500115":"markdown"},"source":{"49507515":"import pandas as pd\nimport numpy as np\nimport geopandas as gpd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport unicodedata\nfrom shapely.geometry import Point\nfrom geopandas import GeoDataFrame\nimport geoplot as gplt\nimport geoplot.crs as gcrs\nimport warnings\nfrom numpy import mean\nfrom sklearn.metrics import mean_squared_error\nfrom matplotlib import pyplot","7226ae86":"shp_gdf = gpd.read_file('..\/input\/india-gis-data\/India States\/Indian_states.shp')\ndata = pd.read_csv(\"..\/input\/daily-air-quality-dataset-india\/air_quality_index.csv\")\nlatlong = pd.read_csv(\"..\/input\/indian-city-latitude-longitude\/India Cities LatLng.csv\")","fc1d3b8c":"data.head()","04d10731":"sns.countplot(x='COUNTRY',data=data)","4c0b941a":"data['YEAR'] = pd.DatetimeIndex(data['DATE']).year\ndata['MONTH'] = pd.DatetimeIndex(data['DATE']).month\ndata.head()","2310dabe":"#Getting Country as India\ndata_INDIA = data.loc[data['COUNTRY'] == 'IN']\n#Getting Country as US\ndata_USA = data.loc[data['COUNTRY'] == 'US']","de0f2bae":"#Seeing the distribution of AQI for INDIA\nsns.distplot(data_INDIA[\"VALUE\"])","1e657b38":"sns.boxplot(x=\"VALUE\", data=data_INDIA)","852f6ee1":"#We can see the outliers for Indian DataSet, aqi above 800 is too much, hence we can remove this\ndata_INDIA = data_INDIA.drop(data_INDIA[(data_INDIA['VALUE']>800)].index)\ndata = data.drop(data[(data['VALUE']>800)].index)","efcfeab6":"sns.catplot(x=\"VALUE\", y=\"COUNTRY\", hue=\"YEAR\", data=data, height=5, aspect=3)","5bb5909d":"Good = len(data_INDIA[(data_INDIA['VALUE']>0) & (data_INDIA['VALUE']<=30)].count(axis=1))\nSatisfactory = len(data_INDIA[(data_INDIA['VALUE']>31) & (data_INDIA['VALUE']<=60)].count(axis=1))\nModerately_polluted = len(data_INDIA[(data_INDIA['VALUE']>61) & (data_INDIA['VALUE']<=90)].count(axis=1))\nPoor = len(data_INDIA[(data_INDIA['VALUE']>91) & (data_INDIA['VALUE']<=120)].count(axis=1))\nVery_poor = len(data_INDIA[(data_INDIA['VALUE']>121) & (data_INDIA['VALUE']<=250)].count(axis=1))\nSevere = len(data_INDIA[(data_INDIA['VALUE']>=250)].count(axis=1))\ncolors = ['lightgreen', 'mediumseagreen', 'yellow', 'orangered', 'darkred', 'red']\n\nAqi_grp = ['Good','Satisfactory','Moderately Polluted','Poor','Very Poor','Severe']\nAqi_group_val = [Good,Satisfactory,Moderately_polluted,Poor,Very_poor,Severe]\n\nfig = go.Figure(data=[go.Pie(labels=Aqi_grp, values=Aqi_group_val,sort=False,title=\"AQI Category, Pollutants and Health Breakpoints from Jan 2019 to May 2021 for major Indian Cities\",\n                            marker=dict(colors=colors),textfont_size=12)])\n\nfig.show()","9b671dff":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(10,9))\nBefore_Lockdown = data_INDIA.drop(data_INDIA[(data_INDIA.YEAR>2019)].index)\nBefore_Lockdown.sort_values(by=[\"CITY\"], inplace = True)\nsns.scatterplot(x='VALUE',y='CITY',data=Before_Lockdown,ax=axis1).set_title(\"Before Covid\")\n\nAfter_Lockdown  = data_INDIA.drop(data_INDIA[(data_INDIA.YEAR==2019)].index)\nAfter_Lockdown.sort_values(by=[\"CITY\"], inplace = True)\nsns.scatterplot(x='VALUE',y='CITY',data=After_Lockdown,ax=axis2).set_title(\"During Covid\")\nfig.set_size_inches(20, 12)\n","3036dc90":"### checking top 10 maximum pollutant cities of India\n\ndef max_pollutant_city_beforeLockdown(pollutant):\n    polu = Before_Lockdown[[pollutant,\"CITY\"]].groupby([\"CITY\"]).mean().sort_values(by = pollutant,ascending = False).reset_index()\n    polu[pollutant] = round(polu[pollutant],2)  \n    return polu[:10]\n\ndef max_pollutant_city_afterLockdown(pollutant):\n    polu = After_Lockdown[[pollutant,\"CITY\"]].groupby([\"CITY\"]).mean().sort_values(by = pollutant,ascending = False).reset_index()\n    polu[pollutant] = round(polu[pollutant],2)  \n    return polu[:10]\n\nBeforLockdown_Cities = max_pollutant_city_beforeLockdown(\"VALUE\")\nAfterLockdown_Cities = max_pollutant_city_afterLockdown(\"VALUE\")\n\nfig, (axis1,axis2) = plt.subplots(1,2,figsize=(10,9))\nsns.barplot(x = BeforLockdown_Cities[\"CITY\"], y= BeforLockdown_Cities[\"VALUE\"], data = BeforLockdown_Cities, ax=axis1,palette=\"rocket\").set_title(\"Before Lockdown\") \nsns.barplot(x = AfterLockdown_Cities[\"CITY\"], y= AfterLockdown_Cities[\"VALUE\"], data = AfterLockdown_Cities, ax=axis2,palette=\"rocket\").set_title(\"After Lockdown\")\nfig.set_size_inches(25, 12)\nplt.show()\n","50d9586f":"#Now we are changing the month like for first year it will be 1-12, for 2nd - 12-24\n#Changing the months for year 2019\ndata_MF = (data_INDIA[(data_INDIA['MONTH']>0) & (data_INDIA['YEAR']==2020)])\ndata_MF.loc[28212:59274,'MONTH'] += 12\ndata_INDIA.loc[28212:59274,'MONTH'] = data_MF","531c62ce":"data_FF = (data_INDIA[(data_INDIA['MONTH']>0) & (data_INDIA['YEAR']==2021)])\ndata_FF.loc[59282:68987,'MONTH'] += 24\ndata_INDIA.loc[59282:68987,'MONTH'] = data_FF","af8d1bb0":"data_INDIA.head()","77ad0d65":"px.scatter(data_INDIA, x = \"MONTH\", y = \"VALUE\", animation_frame = \"MONTH\", animation_group = \"CITY\",\n           color = \"CITY\", size='VALUE',range_x=[1,30], range_y=[0,600],)","50b2e2bb":"data_INDIA[\"Latitude\"] = np.nan\ndata_INDIA[\"Longitude\"] = np.nan","840c52fb":"def remove_accents(input_str):\n    nfkd_form = unicodedata.normalize('NFKD', input_str)\n    only_ascii = nfkd_form.encode('ASCII', 'ignore')\n    return only_ascii.decode('utf-8')\n#Removing from data_INDIA \ndata_INDIA['CITY'] = data_INDIA['CITY'].apply(remove_accents)\n#Removing from LatLong dataset\nlatlong['city'] = latlong['city'].apply(remove_accents)","98f775d3":"for i in data_INDIA.index:\n    if(data_INDIA[\"CITY\"][i] in latlong.city.values):\n        x = latlong[latlong['city']==data_INDIA[\"CITY\"][i]].index.values\n        data_INDIA[\"Latitude\"][i] = latlong[\"lat\"][x]\n        data_INDIA[\"Longitude\"][i] = latlong[\"lng\"][x]","809624a7":"data_INDIA.head()","cb5abbab":"geometry = [Point(xy) for xy in zip(data_INDIA['Longitude'], data_INDIA['Latitude'])]\ngdf = GeoDataFrame(data_INDIA, geometry=geometry)\nax = gplt.polyplot(shp_gdf, projection=gcrs.AlbersEqualArea())\nax.set_title(\"Density of AQI\")\ngplt.kdeplot(gdf, n_levels=20, cmap='Reds', ax=ax)","3fa70a7b":"sns.lineplot(x=\"MONTH\", y=\"VALUE\", data=data_INDIA)","57ce3de8":"sns.pointplot(x='MONTH',y='VALUE',hue='YEAR',data=data_INDIA)","2503bd11":"data_INDIA['VALUE'].rolling(window =20).mean().plot()","daf76722":"data_INDIA['VALUE'].plot(figsize=(10,6))\ndata_INDIA['VALUE'].rolling(window =20).mean().plot()\n","c58fd3a2":"data_INDIA['moving_avg'] = data_INDIA['VALUE'].rolling(window =20).mean()\ndata_INDIA.tail(20)","013f897f":"data_avg = data_INDIA.drop(['DATE','COUNTRY', 'CITY', 'YEAR', 'moving_avg', 'Latitude', 'Longitude', 'geometry' ],axis=1)","cd048b19":"data_avg.head()","095231cf":"data_avg.set_index('MONTH', inplace=True)\ndata_avg.index.name = 'Month'\ndata_avg","29f1a531":"plt.style.use('seaborn')\ndata_avg.plot(color='green', linewidth=3, figsize=(12,6))\n\n# modify ticks size\nplt.xticks(fontsize=14)\nplt.yticks(fontsize=14)\nplt.legend('')\n\n# title and labels\nplt.title('Distribution of AQI over the past few months', fontsize=20)\nplt.xlabel('Month', fontsize=16)\nplt.ylabel('Value', fontsize=16)","4be7e104":"list1 = []\nlist2 = []\nX = data_avg.values\nwindow = 10\nhistory = [X[i] for i in range(window)]\ntest = [X[i] for i in range(window, len(X))]\npredictions = list()\n#Just for printing the top10 predicted and expected values\ncounter = 0\nprint(\"Printing first 10 values\")\n# walk forward over time steps in test\nfor t in range(len(test)):\n    length = len(history)\n    yhat = mean([history[i] for i in range(length-window,length)])\n    obs = test[t]\n    predictions.append(yhat)\n    history.append(obs)\n    ##Uncomment below code to see the predicted and expected value\n    if(counter<10):   \n        print('predicted=%f, expected=%f' % (yhat, obs))\n    list1.append(yhat)\n    list2.append(obs)\n    counter+=1\nerror = mean_squared_error(test, predictions)\nprint('Test MSE: %.3f' % error)\n","49368f99":"np.sqrt(mean_squared_error(list1,list2))","f4ec825f":"pyplot.plot(test)\npyplot.plot(predictions, color='red')\npyplot.show()","8e35ad80":"pyplot.plot(test[0:100])\npyplot.plot(predictions[0:100], color='red')\npyplot.show()","68101a7b":"#### Let us create two new columns Year and Months","c2abc26c":"#### *The moving average value can also be used directly to make predictions.*\n\n#### It is a naive model and assumes that the trend and seasonality components of the time series have already been removed or adjusted for.\n\n#### The moving average model for predictions can easily be used in a walk-forward manner. As new observations are made available (e.g. daily), the model can be updated and a prediction made for the next day.\n#### This website explains in more detailed way - https:\/\/machinelearningmastery.com\/moving-average-smoothing-for-time-series-forecasting-python\/","3b7f8eea":"#### Let us replace the index with the month","bb9a5236":"### Let us read the Csv Files, \n#### *shp_gdf* is the shape file for Indian map which we will use to plot the map of India using geopandas\n#### *Latlong* is the data for latitude and longitude for cities which will help us to plot in the map","eea4e84c":"#### As there are so many values, let us look at the top 100 expected and predicted values ","17e7b25a":"#### We will need only the AQI values w.r.t pm2.5 and the months, so we will drop the rest of the column and store it inside a new dataframe which we will use for prediction","0abf3775":"#### Let us have some more clearer and better visualization at the data","44e3e8b6":"### KDE PLOT using geopandas ","2504e4d6":"### Let us see the plot and see ","74a47b19":"#### Here we can see the yellow line is the moving average and it helps us to smoothen the data and we can see the trend in the data","6b8009e4":"#### As we are dealing with pm2.5, hence we are following the below chart\n![AQIpm2.5.png](attachment:39646e5d-154c-47d2-a8f8-7fe3db25e943.png)\n\n#### We can see that almost half i.e 40.5% of Indian Cities fall in very poor category\n","82cacafe":"# Time Series Analysis","86f4c6f8":"### The simple moving average is the unweighted mean of the previous M data points. The selection of M (sliding window) depends on the amount of smoothing desired since increasing the value of M improves the smoothing at the expense of accuracy.\n\n### For a sequence of values, we calculate the simple moving average at time period t as follows:\n![SMA.PNG](attachment:c8430dfd-5fa7-4b17-8eb9-32e781013270.PNG)","63088bc7":"#### Let us plot the distribution of the data over the few months from 2019 Jan - 2021 May","28959524":"### This model can be further improved and optimized using various other time series analysis, I will learn and explore some more and will update this also. Please Upvote if you like and leave a comment :D","b51b07da":"#### Ok, so in this dataset we have two countries India and US, mainly we will focus on the Indian data but let us visualize some data between India and US","a16521b6":"## *Visualizing using Geopandas* ","ea3ee228":"#### From this we can see very interesting thing, that in US almost for 2019 and 2021 the air quality index is same, while in 2020 we can see there is an increase\n#### While for India, in 2019(pre-covid) we can see it's more, but for 2020 and 2021 it's much less than of 2019 i.e during-covid time","ef4ec4e8":"## Moving Average as Prediction","afc97b70":"#### Below, we are checking if the city in our dataset matches with the city in the latitude&longitude dataset, if it matches then we are assigning the latitude and longitude value for that respective city in the empty Latitude and Longitude columns we have earlier declared","23189ddf":"#### From the above histogram, we have some very interesting data, like Ghaziabad which stays the most polluted and have very little change before and during lockdown peroid,\n#### While we can see patna moved from 4th place to 6th place, Chandigarh moved from 10th place to 8th place, while Kolkata moved from 8th to 10th place","c44687b6":"#### From the above plotting, we are assuming that till 2019 december it was post-covid and from 2020 Jan till 2021 May we are assuming it during covid-times\n#### We can see from the above chart some interesting readings that in the right figure most of the points have shifted to right meaning lower AQI value w.r.t pm2.5, but also interestingly\n#### some places like Thrissur have an increasing value from before and after","fb9d700d":"#### Let us see if any outliers are present","bd8bcf37":"### In our Excel file the names contains some characters, so let us use some encoding to remove all this","aaf577e5":"#### *Here the expected value is in blue and the red is our predictions*","5c3f44c7":"### With a window size of 3, we must shift the series forward by 2 time steps. This is because we want to include the previous two observations as well as the current observation in the moving average in order to predict the next value. We can then calculate the moving average from this shifted series.","b683ffbd":"#### Here we can see, that during 15th month i.e March 2020 all the bubbles(cities) aqi comes down, this was the time when India's First Lockdown was announced i.e 25 Mar 2020 \u2013 31 May 2020\n#### Again in 23rd month i.e November 2020, as lockdowns were eased and due to diwali there is an increase in the AQI value w.r.t pm2.5 and again as the second wave hits the bubbles comes down\n#### One more interesting detail is Thrissur has the lowest AQI value among the all and is almost consistent throughout","025e6e6c":"#### We will calculate the simple moving averge over a peroid of 20months, i.e window size 20","f76c5c85":"## Here, we are going to see the values of pm2.5, fine particulate matter (PM2.5) is an air pollutant that is a concern for people's health when levels in air are high. PM2.5 are tiny particles in the air that reduce visibility and cause the air to appear hazy when levels are elevated.\n![Airpollition.jpg](attachment:c37aa221-da3b-4131-93c8-563315010bf5.jpg)\n\n### Also one interesting thing about this dataset is it contains the data of the Major Cities in India and US time-peroid before covid-19 and during covid-19(from Jan-2019 to May-2021)\n### The COVID-19 pandemic might have some role to play in bringing some changes to the overall quality of air.\n### Here, I mainly focused on the Indian Cities","b5500115":"#### Creating two new null columns Latitude and Longitude"}}