{"cell_type":{"a51f4549":"code","11fe81d0":"code","fa883b07":"code","9c93d8ad":"code","0da1838e":"code","84622bc9":"code","6e84fede":"code","7e76033f":"code","7267d845":"code","da436255":"code","18c04b1f":"code","6100bfa6":"code","c2ee409d":"code","44fa3c6c":"code","f288d905":"code","f0947e3e":"code","fe59c3be":"code","95677dcb":"code","8cca3e6d":"code","20ec8803":"code","232462ee":"code","aea31558":"code","e76fc2d4":"code","75bea8ae":"code","1590a5ca":"code","aa0f91cd":"code","c02ed9f5":"code","3a83b55e":"code","812f83e5":"code","be56d928":"code","e38814c4":"code","6dd734b9":"code","0943c1f7":"code","9e14215e":"code","f8899da1":"code","8ff4aeb6":"code","1aa04bfa":"code","74759546":"code","90d3cf33":"code","d37788bb":"code","2eb4cd61":"code","9831d3ff":"code","28237b17":"code","704de5a2":"code","b63d1bfa":"code","1b9f9fba":"code","9a119de4":"code","a264ff69":"code","0866205c":"code","0f112211":"code","ad7bef91":"code","ef8cefe3":"code","4cb23240":"code","266a3bc7":"code","f93a0a3a":"code","149a0ccb":"code","adb93abc":"code","1f332aa4":"code","a3093643":"code","b48935a7":"code","133bcf4c":"code","852c10bd":"code","f77beefc":"code","08fef643":"code","e925a264":"code","09962d41":"code","723a44cc":"code","07bc5ea0":"code","cc9a4968":"code","5b107527":"code","eafdb947":"code","0811bf72":"code","0d1547c0":"code","23cffb15":"code","89ec8ec7":"code","78566c8b":"code","db2501b3":"code","cf7db50d":"code","595e6241":"code","1550ea04":"code","2f367fda":"code","031e513e":"code","6f7c761c":"code","325daaff":"code","5bb6f557":"code","0ca57daa":"code","70ffe5a6":"code","6cff977f":"code","388d0b58":"code","8cb0f175":"code","8c5fc8a9":"code","41290b61":"code","e93ff0a5":"code","7d87cd08":"code","ef79587c":"markdown","2c0596ca":"markdown","0d414c17":"markdown","c1850a1b":"markdown","fd108ec0":"markdown","3cc4c3a9":"markdown","6c223f40":"markdown","67800dc6":"markdown","40f53009":"markdown","b7f18f26":"markdown","8d55ccdd":"markdown","c53c755d":"markdown","4e0ea5c2":"markdown","48814686":"markdown","59e14014":"markdown","b801a6a2":"markdown","86b35f4f":"markdown","b8933e9a":"markdown","0db81e7d":"markdown","a9b75369":"markdown","189e3b28":"markdown","91a45598":"markdown","eba66ed3":"markdown","35b645bb":"markdown","12dd02eb":"markdown","8f47aad5":"markdown","1adbb929":"markdown","3c68594c":"markdown"},"source":{"a51f4549":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nimport os\n\nos.chdir('..\/input\/titanic\/')\nplt.rcParams['figure.figsize'] = (15.0, 6.0)\nplt.style.use('ggplot')","11fe81d0":"# just tallying the format\n\nsubmission_format = pd.read_csv('gender_submission.csv')\nsubmission_format.shape\nsubmission_format.head()","fa883b07":"# test data\n\ntest_df = pd.read_csv('test.csv')\ntest_df.shape\ntest_df.head()","9c93d8ad":"# train data\n\ntrain_df = pd.read_csv('train.csv')\ntrain_df.shape\ntrain_df.head()","0da1838e":"train_df.dtypes","84622bc9":"train_df.isnull().sum()","6e84fede":"# validating unique IDs\ntrain_df['PassengerId'].nunique(), train_df.shape[0]","7e76033f":"# proportion of survivalists\n# 0-No, 1-Yes\n\ntrain_df['Survived'].value_counts()\ntrain_df['Survived'].value_counts(normalize=True)*100\ntrain_df['Survived'].value_counts(normalize=True).plot.bar(figsize=(16, 5))","7267d845":"# class-wise proportion (the class of class has a descending ordinality)\n\ntrain_df['Pclass'].value_counts()\ntrain_df['Pclass'].value_counts(normalize=True)*100\ntrain_df['Pclass'].value_counts(normalize=True).plot(kind='bar', figsize=(16, 5))","da436255":"# percentage of casualties, class wise\n\n(train_df.groupby(['Pclass', 'Survived']).size()\/train_df.shape[0])*100\ntrain_df.groupby(['Pclass', 'Survived']).size().plot.bar(label='(Pclass, Survived)', figsize=(16, 5))","18c04b1f":"# percentage of casualties within a class\n\n(train_df.groupby(['Pclass', 'Survived']).size()\/train_df.groupby(['Pclass']).size())*100","6100bfa6":"# class wise survival ratio\n\n(train_df.groupby(['Survived', 'Pclass']).size()\/train_df.groupby(['Survived']).size())*100","c2ee409d":"# had to\n[i for i in set(train_df['Name']) if 'rose' in i or 'jack' in i]","44fa3c6c":"# sex ratio\n\ntrain_df['Sex'].value_counts()\ntrain_df['Sex'].value_counts(normalize=True)\ntrain_df['Sex'].value_counts(normalize=True).plot(kind='bar', figsize=(16, 5))","f288d905":"# deaths of passengers by SEX x Pclass\ntrain_df[train_df['Survived']==0].groupby(['Sex', 'Pclass']).size().plot(kind='bar', label='(Sex, Pclass)', figsize=(16, 5))","f0947e3e":"# percentage of deaths, among the classes, within gender\n(train_df[train_df['Survived']==0].groupby(['Sex', 'Pclass']).size()\/train_df[train_df['Survived']==0].groupby(['Sex']).size())*100","fe59c3be":"# percentage of deaths, among the genders, within class\n(train_df[train_df['Survived']==0].groupby(['Pclass', 'Sex']).size()\/train_df[train_df['Survived']==0].groupby(['Pclass']).size())*100","95677dcb":"# Age distribution\n\ntrain_df['Age'].hist(bins=40, figsize=(16, 5))","8cca3e6d":"# total unique age values\n\ntrain_df['Age'].nunique()","20ec8803":"# get some statistical insights\n\ntrain_df['Age'].describe()","232462ee":"train_df.groupby('Survived')['Age'].describe()","aea31558":"# null check\n\ntrain_df['Age'].isnull().sum(), train_df.shape[0]\n(train_df['Age'].isnull().sum()\/train_df.shape[0]) * 100","e76fc2d4":"# SibSp (# of siblings\/spouses aboard the ship)\n\ntrain_df['SibSp'].value_counts()\ntrain_df['SibSp'].value_counts(normalize=True)\ntrain_df['SibSp'].value_counts().plot(kind='bar', figsize=(16, 5))","75bea8ae":"# Class wise deaths of sib\/sp\n\n(train_df[train_df['Survived']==0].groupby(['Pclass'])['SibSp'].sum()\/train_df[train_df['Survived']==0]['SibSp'].sum())*100","1590a5ca":"# Parch (# of parents\/children aboard)\ntrain_df['Parch'].value_counts()\ntrain_df['Parch'].value_counts(normalize=True)\ntrain_df['Parch'].value_counts().plot(kind='bar', figsize=(16, 5))","aa0f91cd":"# Class wise deaths of parch\n\n(train_df[train_df['Survived']==0].groupby(['Pclass'])['Parch'].sum()\/train_df[train_df['Survived']==0]['Parch'].sum())*100","c02ed9f5":"# does having family aboard increase or decrease the chances of survival?\n(train_df[(train_df['Parch']>0) | (train_df['SibSp']>0)].groupby('Survived').size()\/train_df[(train_df['Parch']>0) | (train_df['SibSp']>0)].shape[0])*100","3a83b55e":"# Fare\n\ntrain_df['Fare'].describe()\ntrain_df['Fare'].hist(bins=60, figsize=(16, 5))","812f83e5":"train_df[train_df['Fare']==0].shape","be56d928":"# class wise fares\n\ntrain_df.groupby(['Pclass'])['Fare'].describe()","e38814c4":"# binning fare\n\ntrain_df['fare_range'] = pd.cut(x=train_df['Fare'], bins=[i for i in range(0, 100, 10)]+[i for i in range(100, 700, 100)], include_lowest=True)","6dd734b9":"(train_df[train_df['Survived']==0].groupby(['Pclass', 'fare_range']).size()\/train_df[train_df['Survived']==0].shape[0])\n(train_df[train_df['Survived']==0].groupby(['Pclass', 'fare_range']).size()\/train_df[train_df['Survived']==0].shape[0]).plot(kind='barh', figsize=(16, 6))","0943c1f7":"(train_df.groupby(['Pclass', 'fare_range']).size()\/train_df.shape[0])\n(train_df.groupby(['Pclass', 'fare_range']).size()\/train_df.shape[0]).plot(kind='barh', figsize=(16, 6))","9e14215e":"# gender wise fare\ntrain_df.groupby(['Pclass', 'Sex'])['Fare'].describe()","f8899da1":"# # imputing with mean\ntrain_df['Age_Imputed'] = train_df.groupby(['Pclass', 'Sex', 'fare_range'])['Age'].transform(lambda x: x.fillna(x.mean()))","8ff4aeb6":"train_df['Age_Imputed'].isnull().sum()","1aa04bfa":"# imputing with mean\ntrain_df['Age_Imputed'] = train_df.groupby(['Sex'])['Age'].transform(lambda x: x.fillna(x.mean()))","74759546":"train_df['Age_Imputed'].isnull().sum()","90d3cf33":"train_df['Age_Imputed'] = train_df['Age_Imputed'].astype('int64')","d37788bb":"train_df['Age_Imputed'].describe()","2eb4cd61":"train_df.loc[train_df['Age_Imputed']==0, 'Age_Imputed'] = 1","9831d3ff":"train_df['age_range'] = pd.cut(x=train_df['Age_Imputed'], bins=[i for i in range(0, 90, 10)])\ntrain_df['age_range'].value_counts(normalize=True)\ntrain_df['age_range'].value_counts(normalize=True).plot(kind='bar', figsize=(16, 5))","28237b17":"# age wise death dist among classes\n\n(train_df[train_df['Survived']==0].groupby(['Pclass', 'age_range']).size()\/train_df[train_df['Survived']==0].groupby(['Pclass']).size()) * 100","704de5a2":"(train_df[train_df['Survived']==0].groupby(['age_range', 'Pclass']).size()\/train_df[train_df['Survived']==0].groupby(['age_range']).size()) * 100","b63d1bfa":"train_df.groupby(['Pclass', 'age_range'])['Fare'].describe()","1b9f9fba":"# % nulls in Cabin columns (ignoring)\n(train_df['Cabin'].isnull().sum() \/ train_df.shape[0])*100","9a119de4":"# Embarked (Point of Embarking)\n# C = Cherbourg, Q = Queenstown, S = Southampton\ntrain_df['Embarked'].value_counts()\ntrain_df['Embarked'].value_counts(normalize=True)\ntrain_df['Embarked'].value_counts().plot(kind='bar', figsize=(16, 5))","a264ff69":"train_df['Embarked'].isnull().sum()","0866205c":"train_df['Embarked'].fillna('S', inplace=True)","0f112211":"# surival perc amongst poe\n(train_df.groupby(['Embarked', 'Survived']).size()\/train_df.shape[0]) * 100","ad7bef91":"# survival perc\n(train_df.groupby(['Embarked', 'Survived']).size()\/train_df.groupby('Embarked').size()) * 100","ef8cefe3":"# of all that didn't survive, poe dist\n\n(train_df.groupby(['Survived', 'Embarked']).size()\/train_df.groupby(['Survived']).size()) * 100","4cb23240":"(train_df.groupby(['Embarked', 'Pclass']).size()\/train_df.groupby(['Embarked']).size()) * 100","266a3bc7":"train_df.groupby(['Pclass', 'Embarked'])['Fare'].describe()","f93a0a3a":"train_df['Deck'] = train_df['Cabin'].apply(lambda x: x[:1] if pd.notnull(x) else x)","149a0ccb":"(train_df.groupby(['Deck', 'Survived']).size()\/train_df.groupby(['Deck']).size())*100","adb93abc":"(train_df[train_df['Survived']==0].groupby('Deck').size()\/train_df[train_df['Survived']==0].shape[0])*100","1f332aa4":"train_df['Family_Size'] = train_df['SibSp'] + train_df['Parch']","a3093643":"train_df.head()","b48935a7":"test_df.isnull().sum()","133bcf4c":"#imputing null fare\ntest_df['Fare'] = test_df.groupby(['Pclass', 'Sex'])['Fare'].transform(lambda x: x.fillna(x.mean()))","852c10bd":"test_df['fare_range'] = pd.cut(x=test_df['Fare'], bins=[i for i in range(0, 100, 10)]+[i for i in range(100, 700, 100)], include_lowest=True)","f77beefc":"# # imputing with mean\ntest_df['Age_Imputed'] = test_df.groupby(['Pclass', 'Sex', 'fare_range'])['Age'].transform(lambda x: x.fillna(x.mean()))","08fef643":"test_df['Age_Imputed'].isnull().sum()","e925a264":"# imputing with mean\ntest_df['Age_Imputed'] = test_df.groupby(['Sex'])['Age'].transform(lambda x: x.fillna(x.mean()))","09962d41":"test_df['Age_Imputed'].isnull().sum()","723a44cc":"test_df['Age_Imputed'] = test_df['Age_Imputed'].astype('int64')","07bc5ea0":"test_df['Age_Imputed'].describe()","cc9a4968":"test_df.loc[test_df['Age_Imputed']==0, 'Age_Imputed'] = 1","5b107527":"test_df['age_range'] = pd.cut(x=test_df['Age_Imputed'], bins=[i for i in range(0, 90, 10)])\ntest_df['age_range'].value_counts(normalize=True)\ntest_df['age_range'].value_counts(normalize=True).plot(kind='bar', figsize=(16, 5))","eafdb947":"test_df['Family_Size'] = test_df['SibSp'] + test_df['Parch']","0811bf72":"test_df.head()","0d1547c0":"train_df['model_type'] = 'Train'\ntest_df['model_type'] = 'Test'","23cffb15":"feature_df = train_df.append(test_df, sort=False, ignore_index=True)\nfeature_df.groupby('model_type').size()\nfeature_df.shape\nfeature_df.head()","89ec8ec7":"feature_df.isnull().sum()","78566c8b":"feature_df['fare_range'] = feature_df['fare_range'].astype(str)\nfeature_df['age_range'] = feature_df['age_range'].astype(str)","db2501b3":"feature_df.loc[feature_df['Family_Size']==0, 'Family_Onboard'] = '0'\nfeature_df.loc[feature_df['Family_Size']!=0, 'Family_Onboard'] = '1'","cf7db50d":"# One Hot Encoded columns\nfeature_df = feature_df.join(pd.get_dummies(feature_df[['Sex', 'Embarked', 'Family_Onboard', 'fare_range', 'age_range']]))\nfeature_df.columns","595e6241":"# median fare\nfeature_df['median_fare'] = feature_df.groupby('fare_range')['Fare'].transform('median')","1550ea04":"# delta fare\nfeature_df['delta_fare'] =  (feature_df['Fare'] - feature_df['median_fare'])\/feature_df['median_fare']\nfeature_df['delta_fare'].describe()","2f367fda":"# cat coding features\nfeature_df['Sex_category'] = feature_df['Sex'].astype('category').cat.codes\nfeature_df['Embarked_category'] = feature_df['Embarked'].astype('category').cat.codes\nfeature_df['fare_range_category'] = feature_df['fare_range'].astype('category').cat.codes\nfeature_df['age_range_category'] = feature_df['age_range'].astype('category').cat.codes\nfeature_df['Family_Onboard_category'] = feature_df['Family_Onboard'].astype('category').cat.codes","031e513e":"feature_df.columns","6f7c761c":"l_features = ['Pclass', 'SibSp', 'Parch', 'Fare', 'Age_Imputed', 'Family_Size', 'Sex_female', \n              'Sex_male', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Family_Onboard_0', 'Family_Onboard_1',\n              'fare_range_(-0.001, 10.0]', 'fare_range_(10.0, 20.0]',\n              'fare_range_(100.0, 200.0]', 'fare_range_(20.0, 30.0]',\n              'fare_range_(200.0, 300.0]', 'fare_range_(30.0, 40.0]',\n              'fare_range_(40.0, 50.0]', 'fare_range_(50.0, 60.0]',\n              'fare_range_(500.0, 600.0]', 'fare_range_(60.0, 70.0]',\n              'fare_range_(70.0, 80.0]', 'fare_range_(80.0, 90.0]',\n              'fare_range_(90.0, 100.0]', 'age_range_(0, 10]', 'age_range_(10, 20]',\n              'age_range_(20, 30]', 'age_range_(30, 40]', 'age_range_(40, 50]',\n              'age_range_(50, 60]', 'age_range_(60, 70]', 'age_range_(70, 80]',\n              'median_fare', 'delta_fare', 'Sex_category', 'Embarked_category',\n              'fare_range_category', 'age_range_category', 'Family_Onboard_category']\n\npred_y = 'Survived' \n\nlen(l_features)","325daaff":"feature_df[l_features].isnull().sum()","5bb6f557":"plt.figure(figsize=(16, 16))\nsns.heatmap(feature_df[l_features].corr(), cmap='RdYlGn')","0ca57daa":"l_features = list(set(l_features) - {'Parch', 'SibSp','median_fare'})\nlen(l_features)","70ffe5a6":"def scale_matrix(X, infer=False, scaler=None):\n    if not infer:\n        scaler = MinMaxScaler().fit(X)\n        t_X = scaler.transform(X)\n    else:\n        t_X = scaler.transform(X)\n    return t_X, scaler","6cff977f":"# creating train-val-test split\nd_matrix = feature_df[feature_df['model_type']=='Train'].reset_index(drop=True).copy()\ntrain_X, val_X, train_y, val_y = train_test_split(d_matrix[l_features].copy(), d_matrix[pred_y].copy(), test_size=0.2)\n\ntest_X = feature_df[feature_df['model_type']=='Test'][l_features].reset_index(drop=True).copy()\n\nd_matrix_X = d_matrix[l_features].copy()\nd_matrix_y = d_matrix[pred_y].copy()\n\nd_matrix_X.shape, d_matrix_y.shape\ntrain_X.shape, train_y.shape\nval_X.shape, val_y.shape\ntest_X.shape","388d0b58":"# scaling features\ntrain_X, mm_scaler = scale_matrix(train_X.copy())\nval_X, _ = scale_matrix(val_X.copy(), infer=True, scaler=mm_scaler)\n\nd_matrix_X, act_mm_scaler = scale_matrix(d_matrix_X.copy())\n\ntest_X, _ = scale_matrix(test_X.copy(), infer=True, scaler=act_mm_scaler)","8cb0f175":"def evaluation_fn(y_true, y_pred):\n    print('accuracy', accuracy_score(y_true, y_pred))\n    print('f1_score', f1_score(y_true, y_pred))\n    print()\n    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()\n    conf_mat = pd.DataFrame()\n    conf_mat[0] = ['True', 'False']\n    conf_mat['Positive'] = [tp, fp]\n    conf_mat['Negative'] = [tn, fn]\n    conf_mat = conf_mat.set_index(0)\n    print(conf_mat)","8c5fc8a9":"def logistic_regression():\n    return LogisticRegression(random_state=1511, n_jobs=-1, max_iter=300,\n                                        solver='saga', fit_intercept=True, penalty='elasticnet', C=1.0, l1_ratio=0.6)\n\ndef random_forest_classifier():\n    return RandomForestClassifier(random_state=1511, n_jobs=-1, n_estimators=200,\n                                            max_depth=11, min_samples_split=8, min_samples_leaf=2,\n                                            max_features='auto', bootstrap=True)\n\ndef multilayer_perceptron_classifier():\n    return MLPClassifier(hidden_layer_sizes=(100, 100), batch_size=256, \n                         max_iter=1000, random_state=1511, early_stopping=True)\n\ndef k_neighbours_classifier():\n    return KNeighborsClassifier(n_neighbors=7, n_jobs=-1)\n\ndef support_vector_machine():\n    return SVC(random_state=1511)\n\ndef model_blueprint(X, y, model, infer=False, this_model=None):\n    model_mapper_dict = {\n        'rf': random_forest_classifier(),\n        'lr': logistic_regression(),\n        'mlp': multilayer_perceptron_classifier(),\n        'knn': k_neighbours_classifier(),\n        'svm': support_vector_machine()\n    }\n    if not infer:\n        this_model = model_mapper_dict[model]\n        this_model = this_model.fit(X, y)        \n\n    predicted_y = this_model.predict(X)\n    if len(y)>0:\n        evaluation_fn(y, predicted_y)\n\n    return predicted_y, this_model","41290b61":"champ_model = 'rf'\n\nprint('*'*7, 'TRAIN', '*'*7, '\\n')\n_, model = model_blueprint(train_X, train_y, champ_model)\n\nprint()\n\nprint('\\n', '*'*7, 'VAL', '*'*7, '\\n')\n_, _ = model_blueprint(val_X, val_y, champ_model, True, model)\n\ntest_y, _ = model_blueprint(test_X, pd.Series(), champ_model, True, model)\ntest_X.shape, test_y.shape\n\ns_output = test_df[['PassengerId']].copy()\ns_output[pred_y] = test_y\ns_output[pred_y] = s_output[pred_y].astype('int64')\ns_output.shape","e93ff0a5":"s_output[pred_y].value_counts()\ns_output.head()","7d87cd08":"s_output.to_csv('my_submission.csv', index=False)","ef79587c":"Pretty sensical, also these features are certainly correlated. The question is, does fare have a direct impact (apart from the obvious class impact) on survival rate. Just brainstorming but maybe the cheapest parts of the ship were actually the ones to get flooded the first.","2c0596ca":"More than half of the people onboard were class-3 passengers (as per the train data).","0d414c17":"More than 40% of all casualties is among passengers from Class-3!","c1850a1b":"imputing age","fd108ec0":"Turns out that, even in Class 3, the most number of deaths (46%) are among the lower fare passengers. One obvious reason is due to the population concentration (36%) but it could also be due to the positional circumstances of their rooms.","3cc4c3a9":"The correlations are pretty obvious and causes of basic feature engineering.\n\nFor eg., features <b>Family_Onboard_x<\/b> and <b>Family_Onboard_category<\/b> are strongly correlated, <br>\nand so are features <b>median_fare<\/b> and <b>fare<\/b>\n\nCorrelated features generally don't really improve the model (depends on the speicifity of the model) and might cause inaccuracies in some given models (eg., for linear models, [multicollinearity can produce widely varying and highly unstable results](https:\/\/en.wikipedia.org\/wiki\/Multicollinearity#Consequences_of_multicollinearity)), so eliminating correlated features","6c223f40":"#### FEATURE MATRIX","67800dc6":"family members","40f53009":"#### MODELING","b7f18f26":"TRAIN TEST SPLIT","8d55ccdd":"Of all the female deaths, 89% were from Class 3","c53c755d":"The Titanic sank on April 15, 1912. 1502 people died in the disaster, and there were 722 survivors.\n\nThe percentage of deceased and survivors is 67.5% and 32.5% respectively. <br>\nThe percentage of deceased and survivors, in our dataset, is 61.6% and 38.4%","4e0ea5c2":"Of all the passengers that could not survive, about 68% were from Class-3. <br>\nOf all that survived, about 40% were from Class-1","48814686":"imputing age","59e14014":"Around 76% of all passengers from Class-3, died!!! <br>\nWhile about 63% of all Class-1 passengers survived","b801a6a2":"#### EDA","86b35f4f":"Almost 94% of all Queens passengers were Class 3","b8933e9a":"It's probabilistic to have relatively more deaths of Men from Class-3","0db81e7d":"family members","a9b75369":"deck","189e3b28":"Men contribute to most casualities in all classes","91a45598":"Generally, fares were higher for women than for men","eba66ed3":"FEATURE SELECTION","35b645bb":"preparing the test set","12dd02eb":"Not the most optimal imputation, but there is some context to it","8f47aad5":"voila!","1adbb929":"Tricky to get any reliable insights from such a spread out and continous sample, we could bin it to get a better sense of the data","3c68594c":"MODELING"}}