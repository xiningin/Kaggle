{"cell_type":{"a1acc35c":"code","0f046d8a":"code","210e7825":"code","416ba443":"code","4d66410c":"code","35fe715c":"code","e7e949de":"code","30014a71":"code","5c412fd8":"code","663f7772":"code","c3911795":"code","afbe859f":"code","38976f87":"code","ade2b760":"code","50fd77a9":"code","03884abb":"code","714d56d7":"code","7c8ab5b1":"markdown","6ade780d":"markdown","4e1a47ba":"markdown"},"source":{"a1acc35c":"import PIL\nfrom PIL import Image\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport imageio\nimport imgaug as ia\nimport imgaug.augmenters as iaa\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport matplotlib\n\nimport plotly.offline as pyo\npyo.init_notebook_mode()\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport cv2 \nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom sklearn import preprocessing\nimport random\nimport tensorflow as tf\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#!pip install visualkeras\n\nfrom matplotlib import image\nfrom matplotlib import pyplot","0f046d8a":"def Create_Directory_DataFrame():\n    df =pd.DataFrame(columns=['Class','Location'])\n    basedir = '..\/input\/breastcancer\/ICIAR2018_BACH_Challenge\/ICIAR2018_BACH_Challenge\/Photos\/'\n    for Class in os.listdir(basedir):\n        if Class == 'microscopy_ground_truth.csv':\n            continue\n        for location in os.listdir(basedir+Class+'\/'):\n            if location.endswith('.tif'):\n                df = df.append({'Class':Class,'Location':basedir+Class+'\/'+location},ignore_index=True)\n    df = df.sample(frac = 1) \n    return df\ndf = Create_Directory_DataFrame()\nprint(df.shape)\ndf.head()","210e7825":"df.iloc[5,0]\n","416ba443":"def Augmentation( data , w , h): \n    rotate=iaa.Affine(rotate=(-50, 30))\n    rotated_image=rotate.augment_image(data)\n    rotated_image = cv2.resize(rotated_image, (w,h), interpolation = cv2.INTER_AREA)\n    rotated_image = rotated_image.reshape(w,h,1)\n    \n    gaussian_noise=iaa.AdditiveGaussianNoise(10,20)\n    noise_image=gaussian_noise.augment_image(data)\n    noise_image = cv2.resize(noise_image, (w,h), interpolation = cv2.INTER_AREA)\n    noise_image = noise_image.reshape(w,h,1)\n    \n    crop = iaa.Crop(percent=(0, 0.3)) \n    corp_image=crop.augment_image(data)\n    corp_image = cv2.resize(corp_image, (w,h), interpolation = cv2.INTER_AREA)\n    corp_image = corp_image.reshape(w,h,1)\n    \n    shear = iaa.Affine(shear=(0,40))\n    shear_image=shear.augment_image(data)\n    shear_image = cv2.resize(shear_image, (w,h), interpolation = cv2.INTER_AREA)\n    shear_image = shear_image.reshape(w,h,1)\n    \n    flip_hr=iaa.Fliplr(p=1.0)\n    flip_hr_image= flip_hr.augment_image(data)\n    flip_hr_image  = cv2.resize(flip_hr_image , (w,h), interpolation = cv2.INTER_AREA)\n    flip_hr_image = flip_hr_image .reshape(w,h,1)\n    \n    flip_vr=iaa.Flipud(p=1.0)\n    flip_vr_image= flip_vr.augment_image(data)\n    flip_vr_image = cv2.resize(flip_vr_image, (w,h), interpolation = cv2.INTER_AREA)\n    flip_vr_image = flip_vr_image.reshape(w,h,1)\n    \n    contrast=iaa.GammaContrast(gamma=2.0)\n    contrast_image =contrast.augment_image(data)\n    contrast_image = cv2.resize(contrast_image, (w,h), interpolation = cv2.INTER_AREA)\n    contrast_image = contrast_image.reshape(w,h,1)\n    \n    aug = iaa.Jigsaw(nb_rows=10, nb_cols=10)\n    flip_R270_image= aug.augment_image(data)\n    flip_R270_image = cv2.resize(flip_R270_image, (w,h), interpolation = cv2.INTER_AREA)\n    flip_R270_image = flip_R270_image.reshape(w,h,1)\n    \n    Rot_90 = iaa.Rot90(2)\n    flip_R180_image= Rot_90.augment_image(data)\n    flip_R180_image = cv2.resize(flip_R180_image, (w,h), interpolation = cv2.INTER_AREA)\n    flip_R180_image = flip_R180_image.reshape(w,h,1)\n    \n    Rot_90 = iaa.Rot90(1)\n    flip_R90_image= Rot_90.augment_image(data)\n    flip_R90_image = cv2.resize(flip_R90_image, (w,h), interpolation = cv2.INTER_AREA)\n    flip_R90_image = flip_R90_image.reshape(w,h,1)\n    \n    scale_im=iaa.Affine(scale={\"x\": (1.5, 1.0), \"y\": (1.5, 1.0)})\n    scale_image =scale_im.augment_image(data)\n    scale_image = cv2.resize(scale_image, (w,h), interpolation = cv2.INTER_AREA)\n    scale_image = scale_image.reshape(w,h,1)\n    \n    Rot_90 = iaa.Rot90(3)\n    flip_R270_image= Rot_90.augment_image(data)\n    flip_R270_image = cv2.resize(flip_R270_image, (w,h), interpolation = cv2.INTER_AREA)\n    flip_R270_image = flip_R270_image.reshape(w,h,1)\n    \n    aug_image = [rotated_image,noise_image,corp_image,shear_image,\n                 flip_hr_image,flip_vr_image,contrast_image,flip_R270_image,\n                 flip_R180_image,flip_R90_image,scale_image,flip_R270_image]\n    return aug_image","4d66410c":"w,h = 512,512\ndata = cv2.imread(df.iloc[7,1],0)\ndata = cv2.resize(data, (w,h), interpolation = cv2.INTER_AREA)\ndata = data.reshape(w,h,1)\nlt = Augmentation(data,w,h)\nlt = np.array(lt)\nlt.shape","35fe715c":"from tqdm import tqdm\nfrom sklearn.preprocessing import OneHotEncoder\nw , h= 256,256\nfinal_class = 4\n\ntrain_image = []\ny=[]\n\n\nfor i in tqdm(df.index):\n    data = cv2.imread(df.iloc[i,1],0)\n    data = cv2.resize(data, (w,h), interpolation = cv2.INTER_AREA)\n    data = data.reshape(w,h,1)\n    train_image.append(data)\n    y.append(df.iloc[i,0])\n    lt = Augmentation(data,w,h)\n    train_image.extend(lt)\n   \n\nX = np.array(train_image)\ny = np.array(y)\ny = np.repeat(y,13)\ny = y.reshape(y.shape[0],1)\nenc = OneHotEncoder(handle_unknown='ignore')\nenc.fit(y)\nprint(enc.categories_)\ny = enc.transform(y).toarray()\nprint('Data   :   '+str(X.shape))\nprint('Output :   '+str(y.shape))","e7e949de":"np.save('X.npy',X)\nnp.save('Y.npy',y)","30014a71":"X = np.load('X.npy')\nY=np.load('Y.npy')\nX.shape,Y.shape","5c412fd8":"from IPython.display import FileLink\nFileLink(r'X.npy')","663f7772":"from IPython.display import FileLink\nFileLink(r'Y.npy')","c3911795":"import tensorflow as tf\ntf.config.run_functions_eagerly(True)\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Flatten , Conv1D\nfrom tensorflow.keras.layers import concatenate\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D,MaxPooling1D\nfrom tensorflow.keras.utils import plot_model\ndef model_b():\n    inp1 = Input(shape=(X.shape[1],X.shape[2],1,))\n    new_input = Input(shape=(X.shape[1],X.shape[2], 3))\n    conv1 = Conv2D(3, kernel_size=3, padding ='same', activation='relu')(inp1)\n    i1 = tf.keras.applications.Xception(include_top=False,weights=\"imagenet\",input_tensor=new_input,\n                        input_shape=None,\n                         pooling=None,\n                    )(conv1)\n    i1 = tf.keras.layers.Flatten()(i1)\n    class1 = Dense(1024, activation='relu')(i1)\n    class1 = Dense(512, activation='relu')(class1)\n    class1 = Dense(256, activation='relu')(class1)\n    class1 = Dense(128, activation='relu')(class1)\n    class1 = Dense(64, activation='relu')(class1)\n    output = Dense(final_class, activation='sigmoid')(class1)\n    model = Model(inputs=inp1, outputs=output)\n    return model\nmd = model_b()\nmd.summary()","afbe859f":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \nimport tensorflow as tf","38976f87":"def LR_verify():\n        model = model_b()\n        METRICS = [\n               'accuracy',\n            tf.keras.metrics.AUC(),\n            tf.keras.metrics.Recall(),\n            tf.keras.metrics.Precision(),\n            tf.keras.metrics.TrueNegatives(),\n            tf.keras.metrics.TruePositives(),\n            tf.keras.metrics.FalseNegatives(),\n            tf.keras.metrics.FalsePositives(),\n            tf.keras.metrics.RootMeanSquaredError()\n        ]  \n        model.compile(\n                optimizer='Adam',\n                loss='categorical_crossentropy',\n                metrics=METRICS\n            )\n        history = model.fit(X, y, epochs=20,verbose=1,shuffle = True,validation_split=0.2)\n        return model,history\nmodel,history= LR_verify()","ade2b760":"from tensorflow.keras.models import model_from_json\nmodel_json = model.to_json()\nname ='RIADD_MobNetB3'\nwith open(name+\".json\", \"w\") as json_file:\n    json_file.write(model_json)\nmodel.save_weights(name+\".h5\")\nimport pandas as pd\nhist_df = pd.DataFrame(history.history) \nhist_df.to_csv(name+'.csv',index = False)\nhist_df.tail()","50fd77a9":"json_file = open('.\/'+name+'.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights('.\/'+name+'.h5')\nprint(\"Loaded model from disk\")","03884abb":"score = model.evaluate(X, y, verbose=0)\nfor i in range(len(score)):\n    print(model.metrics_names[i]+\" : \"+str(score[i]))","714d56d7":"from sklearn.metrics import accuracy_score\n# make a prediction on the test set\nyhat = model.predict(X)\n# Tranform Output \nyhat = enc.inverse_transform(yhat)\nyt = enc.inverse_transform(y)\nfrom sklearn.metrics import classification_report\nprint(classification_report(yt, yhat))","7c8ab5b1":"# Model test","6ade780d":"# Model Save","4e1a47ba":"# Model Load"}}