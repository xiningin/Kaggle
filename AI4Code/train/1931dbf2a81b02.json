{"cell_type":{"b24125b8":"code","7b65353c":"code","56fa42fa":"code","1ec4fc2a":"code","1251adf9":"code","dff84586":"code","8ac43194":"code","1bea195e":"code","324deb5a":"code","75302536":"code","a6826c4d":"code","68eca3ab":"code","5eb14432":"code","dc1730e7":"code","0440cb10":"code","a8e31604":"code","fcd567dc":"code","b479a78a":"code","2798f640":"code","9340c164":"code","803fd469":"code","0530e3be":"code","0317f916":"code","29943cd2":"code","22a6c275":"code","fa1b1d3d":"code","936f046c":"code","323d0f8a":"code","8a4a14ef":"code","cceb8914":"code","9b15998d":"code","fe885667":"code","06c2c2f6":"code","bb0c03d5":"code","85a51b99":"code","5eac1c54":"code","a9c29d58":"code","5f92a6c1":"code","16eb41fa":"code","e213f21e":"code","d4740ee2":"code","56526b82":"code","b9db9579":"code","8f7c7042":"code","f8744b86":"code","32f0f64a":"code","7c9c23b1":"code","b64ff367":"code","c779bbe7":"code","01562dec":"code","122dca26":"code","e8617f9f":"code","32988974":"code","a6b35d7d":"code","2e2d0b69":"code","d6b1d68c":"code","7cadaae8":"markdown","30be964b":"markdown","f0aa5581":"markdown","4f033ecb":"markdown","e8d9e6a0":"markdown","8555e956":"markdown","8dcaeb39":"markdown","407e14e5":"markdown","7ddf1f99":"markdown","0dec3f28":"markdown","b8a01f07":"markdown","05f34b48":"markdown","4e686ce6":"markdown","9c5e92e0":"markdown","8ba2c589":"markdown","97ea0096":"markdown","3f9e2c99":"markdown","5753e77c":"markdown","fd769468":"markdown","ae494316":"markdown","2b7a3f95":"markdown","43017378":"markdown","9d5c9f5c":"markdown","0089db94":"markdown","f1bac8e0":"markdown","5b621eae":"markdown","ed70a397":"markdown","d45e906d":"markdown","77e44e88":"markdown","723f312a":"markdown","237e0c42":"markdown","686a7070":"markdown","899de70d":"markdown","aa6cbb9b":"markdown","0976fd94":"markdown","41b40062":"markdown","f242bae0":"markdown","77710fa0":"markdown","5291edc8":"markdown","ce9f7f15":"markdown","bac7a460":"markdown","718a4996":"markdown","e331a94f":"markdown","56c03692":"markdown","01621cbb":"markdown","2dfb1e82":"markdown","4ed23526":"markdown","ad8514a4":"markdown","cfd66e5c":"markdown","6f2e83be":"markdown","c81c5eef":"markdown","9716a8a8":"markdown"},"source":{"b24125b8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport plotly.figure_factory as ff \nimport  plotly.offline as py\nimport plotly.graph_objs as go \nfrom plotly.offline  import download_plotlyjs,init_notebook_mode,plot, iplot, plot\nimport cufflinks as cf\nfrom plotly import tools \npy.init_notebook_mode(connected = True)\nimport cufflinks as cf \ncf.go_offline()\n%matplotlib inline","7b65353c":"Game_Data_Set = pd.read_csv('..\/input\/game_data.csv')\nPlay_Information_Data_Set = pd.read_csv('..\/input\/play_information.csv')\nPlayer_Punt_Data_Set = pd.read_csv('..\/input\/player_punt_data.csv')\nPlay_Player_Role_Data_Set = pd.read_csv('..\/input\/play_player_role_data.csv')\nVideo_Review_Data_Set = pd.read_csv('..\/input\/video_review.csv')","56fa42fa":"Game_Data_Set = Game_Data_Set.rename({\n    'GameKey' : 'Game_Key',\n    'HomeTeamCode' : 'Home_Team_Code',\n    'VisitTeamCode' : 'Visit_Team_Code',\n    'StadiumType' : 'Stadium_Type',\n    'GameWeather' : 'Game_Weather',\n    'OutdoorWeather' : 'Outdoor_Weather'\n    }, axis='columns')","1ec4fc2a":"Play_Information_Data_Set = Play_Information_Data_Set.rename({\n    'GameKey' : 'Game_Key',\n    'PlayID' : 'Play_ID',\n    'YardLine' : 'Yard_Line',\n    'PlayDescription' : 'Play_Description',\n    }, axis='columns')","1251adf9":"Play_Player_Role_Data_Set = Play_Player_Role_Data_Set.rename({\n    'GameKey' : 'Game_Key',\n    'PlayID' : 'Play_ID'\n    }, axis='columns')","dff84586":"Video_Review_Data_Set = Video_Review_Data_Set.rename({\n    'GameKey' : 'Game_Key',\n    'PlayID' : 'Play_ID'\n    }, axis='columns')","8ac43194":"Game_Data_Set['Stadium_Type'].fillna(\"Missing Stadium Type\", inplace=True)\nGame_Data_Set['Turf'].fillna(\"Missing Turf\", inplace=True)\nGame_Data_Set['Game_Weather'].fillna(\"Missing Weather\", inplace=True)\nGame_Data_Set['Temperature'].fillna(\"0.00\", inplace=True)\nGame_Data_Set['Outdoor_Weather'].fillna(\"Missing Outdoor Weather\", inplace=True)","1bea195e":"Video_Review_Data_Set['Primary_Partner_GSISID'].fillna(\"0.00\", inplace=True)\nVideo_Review_Data_Set['Primary_Partner_Activity_Derived'].fillna(\"Missing Primary Partner Activity\", inplace=True)\nVideo_Review_Data_Set['Friendly_Fire'].fillna(\"Missing Friendly Fire\", inplace=True)","324deb5a":"Video_Review_Data_Set.Season_Year = Video_Review_Data_Set.Season_Year.astype('int64')","75302536":"Game_Data_Set.info()","a6826c4d":"Play_Information_Data_Set.info()","68eca3ab":"Player_Punt_Data_Set.info()","5eb14432":"Play_Player_Role_Data_Set.info()","dc1730e7":"Video_Review_Data_Set.info()","0440cb10":"Game_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"AT&T\", \"Stadium\"] = 'AT&T Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Bank of America\", \"Stadium\"] = 'Bank of America Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"CenturyLink\", \"Stadium\"] = 'CenturyLink Field'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"FirstEnergy\", \"Stadium\"] = 'First Energy Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"FirstEnergy Stadium\", \"Stadium\"] = 'First Energy Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"First Energy Stadium\", \"Stadium\"] = 'First Energy Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Los  Angeles Memorial Coliseum\", \"Stadium\"] = 'Los Angeles Memorial Coliseum'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Lucas Oil\", \"Stadium\"] = 'Lucas Oil Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"M & T Bank Stadium\", \"Stadium\"] = 'M&T Bank Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"M&T Stadium\", \"Stadium\"] = 'M&T Bank Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"MetLife\", \"Stadium\"] = 'MetLife Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Mercedes Benz-Superdome\", \"Stadium\"] = 'Mercedes-Benz Superdome'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"NRG Stadiium\", \"Stadium\"] = 'NRG Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Oakland Alameda-County Coliseum\", \"Stadium\"] = 'Oakland Alameda County Coliseum'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Oakland-Alameda County Coliseum\", \"Stadium\"] = 'Oakland Alameda County Coliseum'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Raymon James Stadium\", \"Stadium\"] = 'Raymond James Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Solidier Field\", \"Stadium\"] = 'Solider Field'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"Twickenham\", \"Stadium\"] = 'Twickenham Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"University of Phoenix\", \"Stadium\"] = 'University of Phoenix Stadium'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium\"] == \"US Bank Stadium\", \"Stadium\"] = 'U.S. Bank Stadium'","a8e31604":"Game_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outdoors\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"outdoor\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outdoors\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outdor\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outddors\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Oudoor\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Ourdoor\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outdoors \", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Outside\", \"Stadium_Type\"] = 'Outdoor'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Indoor\", \"Stadium_Type\"] = 'Indoors'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Indoor, fixed roof\", \"Stadium_Type\"] = 'Indoor, Fixed Roof'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Dome, closed\", \"Stadium_Type\"] = 'Closed Dome'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Domed, Closed\", \"Stadium_Type\"] = 'Closed Dome'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Retr. Roof-Closed\", \"Stadium_Type\"] = 'Retr. Roof - Closed'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Retr. roof - closed\", \"Stadium_Type\"] = 'Retr. Roof - Closed'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Retr. Roof Closed\", \"Stadium_Type\"] = 'Retr. Roof - Closed'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Indoor, non-retractable roof\", \"Stadium_Type\"] = 'Indoor, Non-Retractable Roof'\nGame_Data_Set.loc[Game_Data_Set[\"Stadium_Type\"] == \"Retr. Roof-Open\", \"Stadium_Type\"] = 'Retr. Roof - Open'","fcd567dc":"Game_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"FieldTurf\", \"Turf\"] = 'Field Turf'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"FieldTurf360\", \"Turf\"] = 'Field Turf 360'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"FieldTurf 360\", \"Turf\"] = 'Field Turf 360'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"grass\", \"Turf\"] = 'Grass'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"Natrual Grass\", \"Turf\"] = 'Natural Grass'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"Natural grass\", \"Turf\"] = 'Natural Grass'\nGame_Data_Set.loc[Game_Data_Set[\"Turf\"] == \"Naturall Grass\", \"Turf\"] = 'Natural Grass'","b479a78a":"Game_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Mostly cloudy\", \"Game_Weather\"] = 'Mostly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Mostly Coudy\", \"Game_Weather\"] = 'Mostly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Mostly CLoudy\", \"Game_Weather\"] = 'Mostly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Partly sunny\", \"Game_Weather\"] = 'Partly Sunny'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"cloudy\", \"Game_Weather\"] = 'Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Party Cloudy\", \"Game_Weather\"] = 'Partly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Partly CLoudy\", \"Game_Weather\"] = 'Partly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Partly cloudy\", \"Game_Weather\"] = 'Partly Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Suny\", \"Game_Weather\"] = 'Sunny'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Sunny intervals\", \"Game_Weather\"] = 'Sunny Intervals'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Snow showers\", \"Game_Weather\"] = 'Snow Showers'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Indoor\", \"Game_Weather\"] = 'Indoors'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Coudy\", \"Game_Weather\"] = 'Cloudy'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"CLEAR\", \"Game_Weather\"] = 'Clear'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Cloudy and cold\", \"Game_Weather\"] = 'Cloudy and Cold'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Controlled\", \"Game_Weather\"] = 'Controlled Climate'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Sunny and cool\", \"Game_Weather\"] = 'Sunny and Cool'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Sunny and warm\", \"Game_Weather\"] = 'Sunny and Warm'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Sunny intervals\", \"Game_Weather\"] = 'Sunny Intervals'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Clear and warm\", \"Game_Weather\"] = 'Clear and Warm'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Clear skies\", \"Game_Weather\"] = 'Clear Skies'\nGame_Data_Set.loc[Game_Data_Set[\"Game_Weather\"] == \"Mostly Clear. Gusting ot 14.\", \"Game_Weather\"] = 'Mostly Clear'","2798f640":"Game_Data_Set.loc[Game_Data_Set[\"Season_Type\"] == \"Reg\", \"Season_Type\"] = 'Regular Season'\nGame_Data_Set.loc[Game_Data_Set[\"Season_Type\"] == \"Pre\", \"Season_Type\"] = 'Pre Season'\nGame_Data_Set.loc[Game_Data_Set[\"Season_Type\"] == \"Post\", \"Season_Type\"] = 'Post Season'","9340c164":"Play_Information_Data_Set.loc[Play_Information_Data_Set[\"Season_Type\"] == \"Reg\", \"Season_Type\"] = 'Regular Season'\nPlay_Information_Data_Set.loc[Play_Information_Data_Set[\"Season_Type\"] == \"Pre\", \"Season_Type\"] = 'Pre Season'\nPlay_Information_Data_Set.loc[Play_Information_Data_Set[\"Season_Type\"] == \"Post\", \"Season_Type\"] = 'Post Season'","803fd469":"Video_Review_Data_Set.loc[Video_Review_Data_Set[\"Primary_Impact_Type\"] == \"Helmet-to-body\", \"Primary_Impact_Type\"] = 'Helmet-to-Body'\nVideo_Review_Data_Set.loc[Video_Review_Data_Set[\"Primary_Impact_Type\"] == \"Helmet-to-ground\", \"Primary_Impact_Type\"] = 'Helmet-to-Ground'\nVideo_Review_Data_Set.loc[Video_Review_Data_Set[\"Primary_Impact_Type\"] == \"Helmet-to-helmet\", \"Primary_Impact_Type\"] = 'Helmet-to-Helmet'","0530e3be":"f, axarr = plt.subplots(2, 2, figsize=(20, 10))\n\nf.subplots_adjust(hspace=0.5)\n\nsns.countplot(Game_Data_Set['Season_Year'], ax=axarr[0][0], color='#EC7063', order = Game_Data_Set['Season_Year'].value_counts().index)\naxarr[0][0].set_title(\"Season Year\", fontsize=14)\n\nsns.countplot(Game_Data_Set['Season_Type'], ax=axarr[0][1], color='#9B59B6',order = Game_Data_Set['Season_Type'].value_counts().index)\naxarr[0][1].set_title(\"Season Type\", fontsize=14)\n\nsns.countplot(Game_Data_Set['Week'], ax=axarr[1][0], color='#45B39D',order = Game_Data_Set['Week'].value_counts().index)\naxarr[1][0].set_title(\"Week\", fontsize=14)\n\nsns.countplot(Game_Data_Set['Game_Day'], ax=axarr[1][1], color='#F39C12',order = Game_Data_Set['Game_Day'].value_counts().index)\naxarr[1][1].set_title(\"Game Day\", fontsize=14)\n","0317f916":"f, axarr = plt.subplots(2, 2, figsize=(20, 10))\n\nf.subplots_adjust(hspace=0.5)\n\nsns.countplot(Play_Information_Data_Set['Season_Year'], ax=axarr[0][0], color='#EC7063', order = Play_Information_Data_Set['Season_Year'].value_counts().index)\naxarr[0][0].set_title(\"Season Year\", fontsize=14)\n\nsns.countplot(Play_Information_Data_Set['Season_Type'], ax=axarr[0][1], color='#45B39D',order = Play_Information_Data_Set['Season_Type'].value_counts().index)\naxarr[0][1].set_title(\"Season Type\", fontsize=14)\n\nsns.countplot(Play_Information_Data_Set['Week'], ax=axarr[1][0], color='#9B59B6',order = Play_Information_Data_Set['Week'].value_counts().index)\naxarr[1][0].set_title(\"Week\", fontsize=14)\n\nsns.countplot(Play_Information_Data_Set['Quarter'], ax=axarr[1][1], color='#F39C12',order = Play_Information_Data_Set['Quarter'].value_counts().index)\naxarr[1][1].set_title(\"Quarter\", fontsize=14)","29943cd2":"f, axarr = plt.subplots(2, 2, figsize=(20, 10))\n\nf.subplots_adjust(hspace=0.5)\n\nsns.countplot(Video_Review_Data_Set['Season_Year'], ax=axarr[0][0], color='#EC7063', order = Video_Review_Data_Set['Season_Year'].value_counts().index)\naxarr[0][0].set_title(\"Season Year\", fontsize=14)\n\nsns.countplot(Video_Review_Data_Set['Player_Activity_Derived'], ax=axarr[0][1], color='#45B39D',order = Video_Review_Data_Set['Player_Activity_Derived'].value_counts().index)\naxarr[0][1].set_title(\"Player Activity Derived\", fontsize=14)\n\nsns.countplot(Video_Review_Data_Set['Primary_Impact_Type'], ax=axarr[1][0], color='#9B59B6',order = Video_Review_Data_Set['Primary_Impact_Type'].value_counts().index)\naxarr[1][0].set_title(\"Primary Impact Type\", fontsize=14)\n\nsns.countplot(Video_Review_Data_Set['Primary_Partner_Activity_Derived'], ax=axarr[1][1], color='#F39C12',order = Video_Review_Data_Set['Primary_Partner_Activity_Derived'].value_counts().index)\naxarr[1][1].set_title(\"Primary Partner Activity Derived\", fontsize=14)","22a6c275":"TotalGame2017 = Game_Data_Set[Game_Data_Set['Season_Year']==2017]['Season_Year'].value_counts()\nTotalGame2017Percentage = round(TotalGame2017 \/ len(Game_Data_Set.Season_Year) * 100,2)\n\nTotalGame2016 = Game_Data_Set[Game_Data_Set['Season_Year']==2016]['Season_Year'].value_counts()\nTotalGame2016Percentage = round(TotalGame2016 \/ len(Game_Data_Set.Season_Year) * 100,2)\n\nTotalPercentage = round(len(Game_Data_Set.Season_Year) \/ len(Game_Data_Set.Season_Year) * 100,2)\n\nField_1 = pd.Series({'Description': 'Year 2017',\n                        'Total Records': int(TotalGame2017.values),\n                         'Percentage' : float(TotalGame2017Percentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Year 2016',\n                        'Total Records': int(TotalGame2016.values),\n                         'Percentage' : float(TotalGame2016Percentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Total',\n                        'Total Records': Game_Data_Set['Season_Year'].count(),\n                         'Percentage' : TotalPercentage})\nYearSummary = pd.DataFrame([Field_1,Field_2,Field_3], index=['1','2','3'])\nYearSummary","fa1b1d3d":"labels = (np.array(Game_Data_Set[\"Season_Year\"].unique()))\nvalues = Game_Data_Set[\"Season_Year\"].value_counts()\ncolors = ['#F15854 ', '#60BD68  ']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='percent+label', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#FFFFFF', width=2)))\npy.offline.iplot([trace], filename='styled_pie_chart')","936f046c":"TotalSunday = Game_Data_Set[Game_Data_Set['Game_Day']=='Sunday']['Game_Day'].value_counts()\nTotalSundayPercentage = round(TotalSunday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalThursday = Game_Data_Set[Game_Data_Set['Game_Day']=='Thursday']['Game_Day'].value_counts()\nTotalThursdayPercentage = round(TotalThursday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalSaturday = Game_Data_Set[Game_Data_Set['Game_Day']=='Saturday']['Game_Day'].value_counts()\nTotalSaturdayPercentage = round(TotalSaturday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalMonday = Game_Data_Set[Game_Data_Set['Game_Day']=='Monday']['Game_Day'].value_counts()\nTotalMondayPercentage = round(TotalMonday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalFriday = Game_Data_Set[Game_Data_Set['Game_Day']=='Friday']['Game_Day'].value_counts()\nTotalFridayPercentage = round(TotalFriday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalWednesday = Game_Data_Set[Game_Data_Set['Game_Day']=='Wednesday']['Game_Day'].value_counts()\nTotalWednesdayPercentage = round(TotalWednesday \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nTotalPercentage = round(len(Game_Data_Set.Game_Day) \/ len(Game_Data_Set.Game_Day) * 100,2)\n\nField_1 = pd.Series({'Description': 'Sunday',\n                        'Total Records': int(TotalSunday.values),\n                         'Percentage' : float(TotalSundayPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Thursday',\n                        'Total Records': int(TotalThursday.values),\n                         'Percentage' : float(TotalThursdayPercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Saturday',\n                        'Total Records': int(TotalSaturday.values),\n                         'Percentage' : float(TotalSaturdayPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Monday',\n                        'Total Records': int(TotalMonday.values),\n                         'Percentage' : float(TotalMondayPercentage.values),                     \n                    })\nField_5 = pd.Series({'Description': 'Friday',\n                        'Total Records': int(TotalFriday.values),\n                         'Percentage' : float(TotalFridayPercentage.values),                     \n                    })\nField_6 = pd.Series({'Description': 'Wednesday',\n                        'Total Records': int(TotalWednesday.values),\n                         'Percentage' : float(TotalWednesdayPercentage.values),                     \n                    })\nField_7 = pd.Series({'Description': 'Total',\n                        'Total Records': Game_Data_Set['Game_Day'].count(),\n                         'Percentage' : TotalPercentage})\nGameDaySummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4,Field_5,Field_6,Field_7], index=['1','2','3','4','5','6','7'])\nGameDaySummary","323d0f8a":"GraphData=Game_Data_Set.groupby('Game_Day').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Total Records', title='Game Day')","8a4a14ef":"TotalReg = Game_Data_Set[Game_Data_Set['Season_Type']=='Regular Season']['Season_Type'].value_counts()\nTotalRegPercentage = round(TotalReg \/ len(Game_Data_Set.Season_Type) * 100,2)\n\nTotalPre = Game_Data_Set[Game_Data_Set['Season_Type']=='Pre Season']['Season_Type'].value_counts()\nTotalPrePercentage = round(TotalPre \/ len(Game_Data_Set.Season_Type) * 100,2)\n\nTotalPost = Game_Data_Set[Game_Data_Set['Season_Type']=='Post Season']['Season_Type'].value_counts()\nTotalPostPercentage = round(TotalPost \/ len(Game_Data_Set.Season_Type) * 100,2)\n\nTotalPercentage = round(len(Game_Data_Set.Season_Type) \/ len(Game_Data_Set.Season_Type) * 100,2)\n\nField_1 = pd.Series({'Description': 'Regular Season',\n                        'Total Records': int(TotalReg.values),\n                         'Percentage' : float(TotalRegPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Pre Season',\n                        'Total Records': int(TotalPre.values),\n                         'Percentage' : float(TotalPrePercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Post Season',\n                        'Total Records': int(TotalPost.values),\n                         'Percentage' : float(TotalPostPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Total',\n                        'Total Records': Game_Data_Set['Season_Type'].count(),\n                         'Percentage' : TotalPercentage})\nSeasonTypeSummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4], index=['1','2','3','4'])\nSeasonTypeSummary","cceb8914":"GraphData=Game_Data_Set.groupby('Season_Type').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Total Records', title='Season Type')","9b15998d":"TotalGame2017 = Play_Information_Data_Set[Play_Information_Data_Set['Season_Year']==2017]['Season_Year'].value_counts()\nTotalGame2017Percentage = round(TotalGame2017 \/ len(Play_Information_Data_Set.Season_Year) * 100,2)\n\nTotalGame2016 = Play_Information_Data_Set[Play_Information_Data_Set['Season_Year']==2016]['Season_Year'].value_counts()\nTotalGame2016Percentage = round(TotalGame2016 \/ len(Play_Information_Data_Set.Season_Year) * 100,2)\n\nTotalPercentage = round(len(Play_Information_Data_Set.Season_Year) \/ len(Play_Information_Data_Set.Season_Year) * 100,2)\n\nField_1 = pd.Series({'Description': 'Year 2017',\n                        'Total Records': int(TotalGame2017.values),\n                         'Percentage' : float(TotalGame2017Percentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Year 2016',\n                        'Total Records': int(TotalGame2016.values),\n                         'Percentage' : float(TotalGame2016Percentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Total',\n                        'Total Records': Play_Information_Data_Set['Season_Year'].count(),\n                         'Percentage' : TotalPercentage})\nYearSummary = pd.DataFrame([Field_1,Field_2,Field_3], index=['1','2','3'])\nYearSummary","fe885667":"labels = (np.array(Play_Information_Data_Set[\"Season_Year\"].unique()))\nvalues = Play_Information_Data_Set[\"Season_Year\"].value_counts()\ncolors = ['#F15854', '#60BD68']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='percent+label', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#FFFFFF', width=2)))\npy.offline.iplot([trace], filename='styled_pie_chart')","06c2c2f6":"TotalReg = Play_Information_Data_Set[Play_Information_Data_Set['Season_Type']=='Regular Season']['Season_Type'].value_counts()\nTotalRegPercentage = round(TotalReg \/ len(Play_Information_Data_Set.Season_Type) * 100,2)\n\nTotalPre = Play_Information_Data_Set[Play_Information_Data_Set['Season_Type']=='Pre Season']['Season_Type'].value_counts()\nTotalPrePercentage = round(TotalPre \/ len(Play_Information_Data_Set.Season_Type) * 100,2)\n\nTotalPost = Play_Information_Data_Set[Play_Information_Data_Set['Season_Type']=='Post Season']['Season_Type'].value_counts()\nTotalPostPercentage = round(TotalPost \/ len(Play_Information_Data_Set.Season_Type) * 100,2)\n\nTotalPercentage = round(len(Play_Information_Data_Set.Season_Type) \/ len(Play_Information_Data_Set.Season_Type) * 100,2)\n\nField_1 = pd.Series({'Description': 'Regular Season',\n                        'Total Records': int(TotalReg.values),\n                         'Percentage' : float(TotalRegPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Pre Season',\n                        'Total Records': int(TotalPre.values),\n                         'Percentage' : float(TotalPrePercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Post Season',\n                        'Total Records': int(TotalPost.values),\n                         'Percentage' : float(TotalPostPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Total',\n                        'Total Records': Play_Information_Data_Set['Season_Type'].count(),\n                         'Percentage' : TotalPercentage})\nSeasonTypeSummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4], index=['1','2','3','4'])\nSeasonTypeSummary","bb0c03d5":"GraphData=Play_Information_Data_Set.groupby('Season_Type').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Total Records', title='Season Type')","85a51b99":"TotalSecond = Play_Information_Data_Set[Play_Information_Data_Set['Quarter']==2]['Quarter'].value_counts()\nTotalSecondPercentage = round(TotalSecond \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nTotalFirst = Play_Information_Data_Set[Play_Information_Data_Set['Quarter']==1]['Quarter'].value_counts()\nTotalFirstPercentage = round(TotalFirst \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nTotalFourth = Play_Information_Data_Set[Play_Information_Data_Set['Quarter']==4]['Quarter'].value_counts()\nTotalFourthPercentage = round(TotalFourth \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nTotalThird = Play_Information_Data_Set[Play_Information_Data_Set['Quarter']==3]['Quarter'].value_counts()\nTotalThirdPercentage = round(TotalThird \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nTotalOverTime = Play_Information_Data_Set[Play_Information_Data_Set['Quarter']==5]['Quarter'].value_counts()\nTotalOverTimePercentage = round(TotalOverTime \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nTotalPercentage = round(len(Play_Information_Data_Set.Quarter) \/ len(Play_Information_Data_Set.Quarter) * 100,2)\n\nField_1 = pd.Series({'Description': 'Second Quarter',\n                        'Total Records': int(TotalSecond.values),\n                         'Percentage' : float(TotalSecondPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'First Quarter',\n                        'Total Records': int(TotalFirst.values),\n                         'Percentage' : float(TotalFirstPercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Fourth Quarter',\n                        'Total Records': int(TotalFourth.values),\n                         'Percentage' : float(TotalFourthPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Third Quarter',\n                        'Total Records': int(TotalThird.values),\n                         'Percentage' : float(TotalThirdPercentage.values),                     \n                    })\n\nField_5 = pd.Series({'Description': 'Overtime',\n                        'Total Records': int(TotalOverTime.values),\n                         'Percentage' : float(TotalOverTimePercentage.values),                     \n                    })\n\nField_6 = pd.Series({'Description': 'Total',\n                        'Total Records': Play_Information_Data_Set['Quarter'].count(),\n                         'Percentage' : TotalPercentage})\nQuarterSummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4,Field_5,Field_6], index=['1','2','3','4','5','6'])\nQuarterSummary","5eac1c54":"GraphData=Play_Information_Data_Set.groupby('Quarter').size().nlargest(6)\nGraphData.iplot(kind='bar',yTitle='Total Records', title='Quarter')","a9c29d58":"TotalGame2017 = Video_Review_Data_Set[Video_Review_Data_Set['Season_Year']==2017]['Season_Year'].value_counts()\nTotalGame2017Percentage = round(TotalGame2017 \/ len(Video_Review_Data_Set.Season_Year) * 100,2)\n\nTotalGame2016 = Video_Review_Data_Set[Video_Review_Data_Set['Season_Year']==2016]['Season_Year'].value_counts()\nTotalGame2016Percentage = round(TotalGame2016 \/ len(Video_Review_Data_Set.Season_Year) * 100,2)\n\nTotalPercentage = round(len(Video_Review_Data_Set.Season_Year) \/ len(Video_Review_Data_Set.Season_Year) * 100,2)\n\nField_1 = pd.Series({'Description': 'Year 2017',\n                        'Total Records': int(TotalGame2017.values),\n                         'Percentage' : float(TotalGame2017Percentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Year 2016',\n                        'Total Records': int(TotalGame2016.values),\n                         'Percentage' : float(TotalGame2016Percentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Total',\n                        'Total Records': Video_Review_Data_Set['Season_Year'].count(),\n                         'Percentage' : TotalPercentage})\nYearSummary = pd.DataFrame([Field_1,Field_2,Field_3], index=['1','2','3'])\nYearSummary","5f92a6c1":"labels = (np.array(Video_Review_Data_Set[\"Season_Year\"].unique()))\nvalues = Video_Review_Data_Set[\"Season_Year\"].value_counts()\ncolors = ['#F15854', '#60BD68']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='percent+label', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#FFFFFF', width=2)))\npy.offline.iplot([trace], filename='styled_pie_chart')","16eb41fa":"TotalTackling = Video_Review_Data_Set[Video_Review_Data_Set['Player_Activity_Derived']=='Tackling']['Player_Activity_Derived'].value_counts()\nTotalTacklingPercentage = round(TotalTackling \/ len(Video_Review_Data_Set.Season_Year) * 100,2)\n\nTotalBlocked = Video_Review_Data_Set[Video_Review_Data_Set['Player_Activity_Derived']=='Blocked']['Player_Activity_Derived'].value_counts()\nTotalBlockedPercentage = round(TotalBlocked \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalBlocking = Video_Review_Data_Set[Video_Review_Data_Set['Player_Activity_Derived']=='Blocking']['Player_Activity_Derived'].value_counts()\nTotalBlockingPercentage = round(TotalBlocking \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalTackled = Video_Review_Data_Set[Video_Review_Data_Set['Player_Activity_Derived']=='Tackled']['Player_Activity_Derived'].value_counts()\nTotalTackledPercentage = round(TotalTackled \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalActivity = round(len(Video_Review_Data_Set.Player_Activity_Derived) \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nField_1 = pd.Series({'Description': 'Tackling',\n                        'Total Records': int(TotalTackling.values),\n                         'Percentage' : float(TotalTacklingPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Blocked',\n                        'Total Records': int(TotalBlocked.values),\n                         'Percentage' : float(TotalBlockedPercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Blocking',\n                        'Total Records': int(TotalBlocking.values),\n                         'Percentage' : float(TotalBlockingPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Tackled',\n                        'Total Records': int(TotalTackled.values),\n                         'Percentage' : float(TotalTackledPercentage.values),                     \n                    })\nField_5 = pd.Series({'Description': 'Total',\n                        'Total Records': Video_Review_Data_Set['Player_Activity_Derived'].count(),\n                         'Percentage' : TotalActivity})\nActivitySummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4,Field_5], index=['1','2','3','4','5'])\nActivitySummary","e213f21e":"GraphData=Video_Review_Data_Set.groupby('Player_Activity_Derived').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Number of Injuries', title='Player Activity Derived')","d4740ee2":"TotalHTB = Video_Review_Data_Set[Video_Review_Data_Set['Primary_Impact_Type']=='Helmet-to-Body']['Primary_Impact_Type'].value_counts()\nTotalHTBPercentage = round(TotalHTB \/ len(Video_Review_Data_Set.Season_Year) * 100,2)\n\nTotalHTH = Video_Review_Data_Set[Video_Review_Data_Set['Primary_Impact_Type']=='Helmet-to-Helmet']['Primary_Impact_Type'].value_counts()\nTotalHTHPercentage = round(TotalHTH \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalHTG = Video_Review_Data_Set[Video_Review_Data_Set['Primary_Impact_Type']=='Helmet-to-Ground']['Primary_Impact_Type'].value_counts()\nTotalHTGPercentage = round(TotalHTG \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalUnclear = Video_Review_Data_Set[Video_Review_Data_Set['Primary_Impact_Type']=='Unclear']['Primary_Impact_Type'].value_counts()\nTotalUnclearPercentage = round(TotalUnclear \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nTotalActivity = round(len(Video_Review_Data_Set.Player_Activity_Derived) \/ len(Video_Review_Data_Set.Player_Activity_Derived) * 100,2)\n\nField_1 = pd.Series({'Description': 'Helmet-to-Body',\n                        'Total Records': int(TotalHTB.values),\n                         'Percentage' : float(TotalHTBPercentage.values),\n                    })\nField_2 = pd.Series({'Description': 'Helmet-to-Helmet',\n                        'Total Records': int(TotalHTH.values),\n                         'Percentage' : float(TotalHTHPercentage.values),                     \n                    })\nField_3 = pd.Series({'Description': 'Helmet-to-Ground',\n                        'Total Records': int(TotalHTG.values),\n                         'Percentage' : float(TotalHTGPercentage.values),                     \n                    })\nField_4 = pd.Series({'Description': 'Unclear',\n                        'Total Records': int(TotalUnclear.values),\n                         'Percentage' : float(TotalUnclearPercentage.values),                     \n                    })\nField_5 = pd.Series({'Description': 'Total',\n                        'Total Records': Video_Review_Data_Set['Primary_Impact_Type'].count(),\n                         'Percentage' : TotalActivity})\nImpactSummary = pd.DataFrame([Field_1,Field_2,Field_3,Field_4,Field_5], index=['1','2','3','4','5'])\nImpactSummary","56526b82":"GraphData=Video_Review_Data_Set.groupby('Primary_Impact_Type').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Number of Injuries', title='Primary Impact Type')","b9db9579":"Game_Data_Set.Start_Time.value_counts()","8f7c7042":"GraphData=Game_Data_Set.groupby('Start_Time').size().nlargest(666)\nGraphData.iplot(kind='bar',yTitle='Number of Match', title='Game Start Time')","f8744b86":"Game_Video_Data_Set = pd.merge(Game_Data_Set, Video_Review_Data_Set,\n                          how='inner',\n                          on=['Game_Key'])\nGraphData=Game_Video_Data_Set.groupby('Start_Time').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Number of Injuires', title='Game Injuries Start Time')","32f0f64a":"plt.figure(figsize = (18,5))\nsns.swarmplot(x= Video_Review_Data_Set[\"Primary_Impact_Type\"], y = Video_Review_Data_Set[\"Game_Key\"])\nplt.title(\"Total Primary Impact Type\")\nplt.xlabel(\"Primary Impact Type\")\nplt.ylabel(\"Total\")","7c9c23b1":"Game_Data_Set.Stadium.value_counts()","b64ff367":"GraphData=Game_Data_Set.groupby('Stadium').size().nlargest(666)\nGraphData.iplot(kind='bar',yTitle='Number of Match', title='Stadium Name')","c779bbe7":"Game_Video_Stadium_Data_Set = pd.merge(Game_Data_Set,Video_Review_Data_Set,\n                          how='inner',\n                          on=['Game_Key'])","01562dec":"Game_Video_Stadium_Data_Set.Stadium.value_counts()","122dca26":"GraphData=Game_Video_Stadium_Data_Set.groupby('Stadium').size().nlargest(10)\nGraphData.iplot(kind='bar',yTitle='Number of Match Injuries', title='Stadium Name')","e8617f9f":"Game_Video_Data_Set = pd.merge(Video_Review_Data_Set,Play_Player_Role_Data_Set,\n                          how='inner',\n                          on=['Play_ID','Game_Key','GSISID'])","32988974":"HTH = Game_Video_Data_Set[(Game_Video_Data_Set.Primary_Impact_Type == 'Helmet-to-Helmet')]\nHTH.Role.value_counts()","a6b35d7d":"GraphData=HTH.groupby('Role').size().nlargest(11)\nGraphData.iplot(kind='bar',yTitle='Number of Injuires', title='Helmet-to-Helmet')","2e2d0b69":"HTB = Game_Video_Data_Set[(Game_Video_Data_Set.Primary_Impact_Type == 'Helmet-to-Body')]\nHTB.Role.value_counts()","d6b1d68c":"GraphData=HTB.groupby('Role').size().nlargest(11)\nGraphData.iplot(kind='bar',yTitle='Number of Injuires', title='Helmet-to-Body')","7cadaae8":"## Dataset - Video Review Dataset","30be964b":"## Dataset - Play Player Role Dataset","f0aa5581":"## Dataset - Video Review - Field Name - Primary Impact Type","4f033ecb":"## Dataset - Video Review Dataset","e8d9e6a0":"# 2) Import all Datasets","8555e956":"# 3) Rename fields for all Datasets","8dcaeb39":"# 5) Change data type for Video review Dataset","407e14e5":"# 1) Import all important Python Packages","7ddf1f99":"## Dataset - Game Dataset","0dec3f28":"## Dataset - Play Information Dataset","b8a01f07":"## Dataset - Play Player Role Dataset","05f34b48":"### Field Name - Season Year","4e686ce6":"# 7) Rename field values with proper text","9c5e92e0":"## Dataset - Player Punt Dataset","8ba2c589":"## Dateset - Game Dataset","97ea0096":"## Dataset - Play Information Dataset","3f9e2c99":"## No. of Game played in the Stadium","5753e77c":"### Field Name - Quarter","fd769468":"# 8) Basic graphs for few Datasets","ae494316":"### I would like to Thank You for spending time to review my Kernel I hope that this might help you to reduce punt player injuires.","2b7a3f95":"# 10) Summary of Game Start Time","43017378":"# 4) Update missing values for all Datasets","9d5c9f5c":"## Dataset - Game Dataset","0089db94":"## Dataset - Game Data Dataset - Field Name - Stadium Type","f1bac8e0":"## Comparison of Helmet-to-Helmet and Helmet-to-Body","5b621eae":"## Dataset - Game Data Dataset - Field Name - Season Type","ed70a397":"# 6) Date Types for all Datasets","d45e906d":"# 9) Data Analysis for all Datasets","77e44e88":"## Dataset - Video Peview Dataset","723f312a":"### Field Name - Season Year","237e0c42":"## Dataset - Video Review Dataset","686a7070":"## List of the Stadium that incurred injuries","899de70d":"### Field Name - Season Type","aa6cbb9b":"## Dataset - Play Information Dataset","0976fd94":"### Field Name - Game Day","41b40062":"## Dateset - Game Dataset","f242bae0":"## Dataset - Game Dataset","77710fa0":"### Field Name - Season Type","5291edc8":"# NFL Punt Player Data Analysis with New Rules Modification\n\n## Table of Content\n###### 1) Import all important Python Packages\n###### 2) Import all Datasets\n###### 3) Rename fields for all Datasets\n###### 4) Update missing values for all Datasets\n###### 5) Change data type for Video review Dataset\n###### 6) Date Types for all Datasets\n###### 7) Rename field values with proper text\n###### 8) Basic graphs for few Datasets\n###### 9) Data Analysis for all Datasets\n###### 10) Summary of Game Start Time\n###### 11) Summary of the Stadium\n###### 12) Summary of Punt Player Position","ce9f7f15":"# 12) Summary of Punt Player Position","bac7a460":"## Dataset - Play Information Dataset","718a4996":"## Dataset - Play Information - Field Name - Season Type","e331a94f":"## Total Game Injuries Start Time","56c03692":"### Field Name - Primary Impact Type","01621cbb":"## Dataset - Game Data Dataset - Field Name - Game Weather","2dfb1e82":"### Field Name - Season Year","4ed23526":"## 11) Summary of the Stadium","ad8514a4":"## Dataset - Video Review Dataset","cfd66e5c":"### Field Name - Player Activity Derived","6f2e83be":"## Total Game Start Time","c81c5eef":"## Dataset - Game Data Dataset - Field Name - Stadium","9716a8a8":"## Dataset - Game Data Dataset - Field Name - Turf"}}