{"cell_type":{"ade51813":"code","e856aa7e":"code","48f2ba4a":"code","ea8132b4":"code","ee945f86":"code","ecc9624e":"code","3d95f34a":"code","6bef7c7a":"code","5e1941da":"code","ae71769d":"code","cbeaf252":"code","77477ab9":"code","3b66445b":"code","88cb8a40":"markdown","7dc8cbdd":"markdown","f36eb2b6":"markdown","6f421fed":"markdown","134ba2d1":"markdown","3f71abfe":"markdown","134332b3":"markdown","7490bb77":"markdown"},"source":{"ade51813":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport ipywidgets as widgets\nfrom IPython.display import display","e856aa7e":"data = pd.read_csv('..\/input\/insurance\/insurance.csv')","48f2ba4a":"data","ea8132b4":"data.info()","ee945f86":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Split df into X and y\n    y = df['charges']\n    X = df.drop('charges', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    return X_train, X_test, y_train, y_test","ecc9624e":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","3d95f34a":"X_train","6bef7c7a":"y_train","5e1941da":"nominal_features = ['sex', 'smoker', 'region']\n\nnominal_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(sparse=False, drop='if_binary'))\n])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('nominal', nominal_transformer, nominal_features)\n], remainder='passthrough')\n\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('scaler', StandardScaler()),\n    ('regressor', RandomForestRegressor())\n])","ae71769d":"model.fit(X_train, y_train)","cbeaf252":"y_pred = model.predict(X_test)","77477ab9":"rmse = np.sqrt(np.mean((y_test - y_pred)**2))\nr2 = 1 - (np.sum((y_test - y_pred)**2) \/ np.sum((y_test - y_test.mean())**2))\n\nprint(\"RMSE: {:.2f}\".format(rmse))\nprint(\" R^2: {:.5f}\".format(r2))","3b66445b":"age_widget = widgets.IntSlider(\n    value=38,\n    min=18,\n    max=64,\n    step=1,\n    description=\"Age:\"\n)\n\nbmi_widget = widgets.FloatSlider(\n    value=30,\n    min=15,\n    max=54,\n    step=0.01,\n    description=\"BMI:\"\n)\n\nchildren_widget = widgets.IntSlider(\n    value=1,\n    min=0,\n    max=5,\n    step=1,\n    description=\"Children:\"\n)\n\nsex_widget = widgets.ToggleButtons(\n    options=['female', 'male'],\n    description=\"Sex:\"\n)\n\nsmoker_widget = widgets.ToggleButtons(\n    options=['no', 'yes'],\n    description=\"Smoker:\"\n)\n\nregion_widget = widgets.Dropdown(\n    options=['northeast', 'northwest', 'southeast', 'southwest'],\n    description=\"Region:\"\n)\n\npredict_btn = widgets.Button(\n    description=\"Predict\"\n)\n\nprediction_out = widgets.Output()\n\n\ndef make_prediction(btn):\n    x = pd.DataFrame({\n        'age':      age_widget.value,\n        'sex':      sex_widget.value,\n        'bmi':      bmi_widget.value,\n        'children': children_widget.value,\n        'smoker':   smoker_widget.value,\n        'region':   region_widget.value\n    }, index=[0])\n    \n    prediction = model.predict(x)\n    \n    with prediction_out:\n        prediction_out.clear_output()\n        print(\"Prediction: {:.4f}\".format(prediction[0]))\n\n\npredict_btn.on_click(make_prediction)\n\n\ndisplay(age_widget, bmi_widget, children_widget, sex_widget, smoker_widget, region_widget, predict_btn, prediction_out)","88cb8a40":"# Preprocessing","7dc8cbdd":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/Pyx4egSbZj0","f36eb2b6":"# Task for Today  \n\n***\n\n## Insurance Premium Prediction  \n  \nGiven *data about insurance customers*, let's try to predict the **premium charges** a given customer will incur.  \n  \nWe will use a random forest regression model within a scikit-learn pipeline to make our predictions.  \nWe will design an interactive widget that will allow us to make predictions.","6f421fed":"# Getting Started","134ba2d1":"<div class=\"alert alert-block alert-info\"><strong>Note:<\/strong> This widget can only be used to make predictions in an interactive session of the notebook.<\/div>","3f71abfe":"# Building the Pipeline and Training","134332b3":"# Interactive Widget","7490bb77":"# Results"}}