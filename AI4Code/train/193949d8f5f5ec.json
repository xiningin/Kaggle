{"cell_type":{"672b6f69":"code","1be51a1b":"code","09f9ab5c":"code","a8ccb30d":"code","7f8724de":"code","764c67c4":"code","525d1981":"code","9a694aff":"code","50834298":"code","3174c528":"code","acc9aca2":"code","661562ec":"code","e831be3a":"code","9e20a3ac":"code","b2060b11":"code","3aa7037f":"code","31ef58c1":"code","e3763cfb":"code","aef9071d":"code","e1e95b33":"code","dd65b145":"code","6c7e8728":"code","5929603b":"code","be00d998":"code","c1676708":"code","be807fad":"code","e3ac3224":"code","3cfba10e":"code","c3e46537":"code","7b8a4092":"code","40a13355":"code","8bb52072":"code","ef5c80c2":"code","27e820da":"code","f98e7be2":"markdown","f6a634b3":"markdown","5a538f14":"markdown","ba18661b":"markdown","f3543498":"markdown","d0992782":"markdown","b61c5f23":"markdown"},"source":{"672b6f69":"# importing required libraries\nimport pandas as pd\nimport numpy as np\nimport statistics as st\nfrom datetime import datetime, timedelta\nimport matplotlib.pyplot as plt","1be51a1b":"# Reading csv\n\nsales = pd.read_csv('..\/input\/sales-forecasting\/train.csv')","09f9ab5c":"# checking column names and viweing first few records\nsales.columns\nsales.head()","a8ccb30d":"# dropping ROW ID\nsales.drop('Row ID', axis = 1, inplace = True)\nsales.columns","7f8724de":"# Renaming columns\n\nsales.rename(columns = {'Order ID' : 'order_id', 'Order Date' : 'order_date', 'Ship Date' : 'ship_date', 'Ship Mode' : 'ship_mode',\n                        'Customer ID' : 'customer_id', 'Customer Name' : 'customer_name',\n                        'Postal Code' : 'postal_code', 'Product ID' : 'product_id', 'Sub-Category' : 'sub_category',\n                        'Product Name' : 'product_name'}, inplace = True)","764c67c4":"# checking for null values\n\nsales.isna().sum() # 11 null values in postal_code - Let's ignore for now","525d1981":"# sales city wise\nsales_city = sales.groupby('City').agg({'Sales' : sum})\nsales_city.columns\nsales_city.sort_values(by = 'Sales', ascending = False).head(10)","9a694aff":"# distribution of sales region wise\nsales_region = sales.groupby('Region').agg({'Sales' : sum})\nsales_region","50834298":"# count of number of orders region wise\ncount_region = sales.groupby('Region').agg({'Sales' : 'count'})\ncount_region","3174c528":"# plotting number or orders region wise\ncount_region.plot(kind = 'bar',\n                  figsize = (12,5),\n                  title = 'Region-wise Orders',\n                  rot = 0) # East and West Region contribute the highest in terms of number of orders","acc9aca2":"# number of orders region and state wise\nreg_st = sales.groupby(['Region', 'State']).agg({'Sales' : 'count'})\nreg_st.head(20)","661562ec":"# filtering top 2 sub categories(sales wise) in each category\ncat_per = sales.groupby(['Category', 'sub_category']).agg({'Sales' : sum})\ncat_per.sort_values(by = 'Sales', ascending = False).groupby('Category').head(2).sort_index()","e831be3a":"# calculating shipment date - order date\nsales.dtypes\nsales['order_date'] = pd.to_datetime(sales['order_date'], dayfirst = True)\nsales['ship_date'] = pd.to_datetime(sales['ship_date'], dayfirst = True)","9e20a3ac":"sales['shipment_in_days'] = sales['ship_date'] - sales['order_date']\nsales['shipment_in_days'] = sales['shipment_in_days'].dt.days\nsales.head()","b2060b11":"# extracting year and month from order_date\nsales['year'] = sales['order_date'].dt.year\nsales['month'] = sales['order_date'].dt.month_name()\nsales.head()","3aa7037f":"# aggregating sales at month level\n\nmonthly_sales = sales.groupby('month').agg({'Sales' : sum})","31ef58c1":"# plotting monthly sales\n\nmonthly_sales.plot(kind = 'bar',\n                   title = 'Monthly Sales',\n                   figsize = (14,5),\n                   rot = 0) # September, November and december have highest sales","e3763cfb":"# calculating mean deliver days\nst.mean(sales['shipment_in_days']) # 3.96\nst.median(sales['shipment_in_days']) # 4","aef9071d":"# visualizing sales over the course of time\nsales.plot(x = 'order_date',\n           y = 'Sales',\n           figsize = (20,6))","e1e95b33":"delayed_orders = sales.loc[sales['shipment_in_days'] > 5]\ndelayed_orders.head()\n\n# filtering orders getting shipped on time\n\ntimely_orders = sales.loc[~(sales['shipment_in_days'] > 5)]\ntimely_orders.head()","dd65b145":"# creating a boolean field to determine whether an order was delayed or not\nsales['is_delay'] = [True if s > 5 else False for s in sales['shipment_in_days']]\nsales.head()","6c7e8728":"# plotting number of timely orders vs delayed orders\nsales['is_delay'].value_counts().plot(kind = 'bar',\n           figsize = (14,5),\n           title = 'Timely vs Delayed',\n           rot = 0)","5929603b":"# average number of orders daily for delayed orders\n\navg_ord = delayed_orders.groupby('order_date').agg({'Sales' : 'count'})\nst.mean(avg_ord['Sales']) # 3.1","be00d998":"# average number of orders daily for timely orders\n\navg_ord_time = timely_orders.groupby('order_date').agg({'Sales' : 'count'})\nst.mean(avg_ord_time['Sales']) # 6.8","c1676708":"# avg ticket size for delayed orders\navg_ticket_size_delayed = delayed_orders.groupby('order_date').agg({'Sales' : sum})\nst.mean(avg_ticket_size_delayed['Sales']) # 690\n\n# avg ticket size for timely orders\navg_ticket_size_timely = timely_orders.groupby('order_date').agg({'Sales' : sum})\nst.mean(avg_ticket_size_timely['Sales']) # 1571","be807fad":"# first and last purchase of each customer\n\nfirst_purchase = sales.sort_values(by = 'order_date').groupby('customer_id').first()\nlast_purchase = sales.sort_values(by = 'order_date', ascending = False).groupby('customer_id').first()","e3ac3224":"first_purchase.head()","3cfba10e":"last_purchase.head()","c3e46537":"# merging first and last purchase dataframes\ncustomer = pd.merge(first_purchase, last_purchase, how = 'inner', on = ['customer_id'])\ncustomer.shape\ncustomer.columns","7b8a4092":"# filtering out order_date from customer\n\ncustomer = customer[['order_date_x', 'order_date_y']]\ncustomer.head()\ncustomer.reset_index(inplace = True)\ncustomer.head()","40a13355":"customer.rename(columns = {'order_date_x' : 'first_purchase', 'order_date_y' : 'last_purchase'}, inplace = True)\ncustomer.head(10)","8bb52072":"# calculating retention of each customer\n\ncustomer['retention'] = customer['last_purchase'] - customer['first_purchase']\ncustomer['retention'] = customer['retention'].dt.days\ncustomer['retention'] = round(customer['retention']\/365, 2)\ncustomer.head(10)\n","ef5c80c2":"# number of orders by each customer\nnumber_of_orders = sales.groupby('customer_id').agg({'Sales' : 'count'})\nnumber_of_orders.head()\ncustomer['no_of_orders'] = list(number_of_orders['Sales']) # cannot assign a series to a column in dataframe\ncustomer.head(20)","27e820da":"# average revenue from each customer\n\navg_rev = sales.groupby('customer_id').agg({'Sales' : np.mean})\ncustomer['average_revenue'] = list(avg_rev['Sales'])\ncustomer.head(20)","f98e7be2":"## Customer Level Analysis ","f6a634b3":"## Analyzing Data","5a538f14":"### Orders shipped on time have ticket size more than twice the ticket size of delayed orders ","ba18661b":"### For timely orders, average daily orders > average daily orders for delayed orders ","f3543498":"## Analyzing the above two datasets separately to get the root cause behind the delayed shipment","d0992782":"## Performing further analysis using difference between order date and shipment date","b61c5f23":"## Performing Preliminary steps "}}