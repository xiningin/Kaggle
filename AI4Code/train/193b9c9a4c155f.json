{"cell_type":{"012d0beb":"code","2851b1c9":"code","8e45e2d1":"code","ce830def":"code","392df2fa":"code","e00bd728":"code","1c9525ed":"code","3a201375":"code","6e79c612":"code","e51f48c3":"code","adacc4a1":"code","cbc4c969":"code","1ae244bf":"code","3e2e5d49":"code","fd49b3c9":"code","fdae8fe8":"code","b51d04d5":"code","1f6ab271":"code","cab3d7bf":"markdown","def046e6":"markdown"},"source":{"012d0beb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2851b1c9":"d1=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ndconfirmed=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")\ndrecovered=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")\nddeaths=pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")","8e45e2d1":"d1.head()","ce830def":"dconfirmed.head()","392df2fa":"dco=dconfirmed[dconfirmed[\"Country\/Region\"]==\"Mainland China\"]\ndc=dco.drop([\"Lat\",\"Long\",\"Country\/Region\"],axis=1)\ndct=dc.T\ndct.columns=dc[\"Province\/State\"]\ndct.drop(dct.index[0],inplace=True)","e00bd728":"import plotly.graph_objects as go\nfig = go.Figure(data=go.Heatmap(\n                   z=dct,\n                   y=dct.index,\n                   x=dct.columns,\n                    colorscale=\"Blues\",\n                    hoverongaps=False))\nfig.update_layout(\n    title='Number of Confirmed Cases between 1\/22\/20 - 3\/11\/20 in China Regions')\nfig.show()","1c9525ed":"dcr=drecovered[drecovered[\"Country\/Region\"]==\"Mainland China\"]\ndcs=dcr.drop([\"Lat\",\"Long\",\"Country\/Region\"],axis=1)\ndcts=dcs.T\ndcts.columns=dcs[\"Province\/State\"]\ndcts.drop(dcts.index[0],inplace=True)","3a201375":"fig = go.Figure(data=go.Heatmap(\n                   z=dcts,\n                   y=dcts.index,\n                   x=dcts.columns,\n                    colorscale=\"Greens\",\n                    hoverongaps=False))\nfig.update_layout(\n    title='Number of Recovered Cases between 1\/22\/20 - 3\/11\/20 in China Regions')\nfig.show()","6e79c612":"dcd=ddeaths[ddeaths[\"Country\/Region\"]==\"Mainland China\"]\ndcsd=dcd.drop([\"Lat\",\"Long\",\"Country\/Region\"],axis=1)\ndctsd=dcsd.T\ndctsd.columns=dcsd[\"Province\/State\"]\ndctsd.drop(dctsd.index[0],inplace=True)","e51f48c3":"fig = go.Figure(data=go.Heatmap(\n                   z=dctsd,\n                   y=dctsd.index,\n                   x=dctsd.columns,\n                    colorscale=\"Reds\",\n                    hoverongaps=False))\nfig.update_layout(\n    title='Number of Death Cases between 1\/22\/20 - 3\/11\/20 in China')\nfig.show()","adacc4a1":"dx=d1.groupby([\"Country\/Region\" ,\"ObservationDate\"]).sum()\ndx.reset_index(inplace=True)\ndchina=dx[dx[\"Country\/Region\"]==\"Mainland China\"]\n\n","cbc4c969":"fig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=dchina.ObservationDate,\n    y=dchina.Confirmed,\n    name='Confirmed',\n    mode='lines',\n    marker_color='lightsalmon',\n    marker=dict(size=10)\n))\nfig.add_trace(go.Scatter(\n    x=dchina.ObservationDate,\n    y=dchina.Recovered,\n    name='Recovered',\n    mode='lines',\n    marker_color='yellowgreen',\n    marker=dict(size=10)\n))\nfig.add_trace(go.Scatter(\n    x=dchina.ObservationDate,\n    y=dchina.Deaths,\n    name='Deaths',\n    mode='lines',\n    marker_color='red',\n    marker=dict(size=10)\n    \n))\n\nfig.update_layout( xaxis_tickangle=-45)\nfig.update_layout(\n    title=\"Cumulative Number of Confirmed, Recovered and Death Cases in China \",\n    xaxis_title=\"Observation Date\",\n    yaxis_title=\"Count\",\n    height=700,\n    width=800,\n    plot_bgcolor=\"white\",\n    paper_bgcolor='mistyrose'\n)\nfig.show()","1ae244bf":"da=dconfirmed[[\"Province\/State\",\"Lat\",\"Long\",\"Country\/Region\"]]\ndata=pd.merge(d1,da,on=[\"Province\/State\" ,\"Country\/Region\"])\ndata.drop_duplicates(subset =\"SNo\", inplace = True) \ndata[\"normConfirmed\"]=  (data[\"Confirmed\"] - np.min(data[\"Confirmed\"]))\/(np.max(data[\"Confirmed\"])-np.min(data[\"Confirmed\"]))","3e2e5d49":"dskorea=dx[dx[\"Country\/Region\"]==\"South Korea\"]\ndusa=dx[dx[\"Country\/Region\"]==\"US\"]\nditaly=dx[dx[\"Country\/Region\"]==\"Italy\"]\ndfrance=dx[dx[\"Country\/Region\"]==\"France\"]\ndiran=dx[dx[\"Country\/Region\"]==\"Iran\"]\ndjapan=dx[dx[\"Country\/Region\"]==\"Japan\"]","fd49b3c9":"from plotly.subplots import make_subplots\nfig = make_subplots(rows=2, cols=3,subplot_titles=(\"South Korea\",\"USA\", \"Italy\",\"France\",\"Iran\",\"Japan\"))\n\nfig.add_trace(\n    go.Scatter(x=dskorea.ObservationDate, y=dskorea.Confirmed,name=\"South Korea\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=dusa.ObservationDate, y=dusa.Confirmed,name=\"USA\"),\n    row=1, col=2\n)\nfig.add_trace(\n    go.Scatter(x=ditaly.ObservationDate, y=ditaly.Confirmed,name=\"Italy\"),\n    row=1, col=3\n)\nfig.add_trace(\n    go.Scatter(x=dfrance.ObservationDate, y=dfrance.Confirmed,name=\"France\"),\n    row=2, col=1\n)\nfig.add_trace(\n    go.Scatter(x=diran.ObservationDate, y=diran.Confirmed,name=\"Iran\"),\n    row=2, col=2\n)\nfig.add_trace(\n    go.Scatter(x=djapan.ObservationDate, y=djapan.Confirmed,name=\"Japan\"),\n    row=2, col=3\n)\n\nfig.update_layout(height=600, width=900, title_text=\"Cumulative Number of Confirmed Cases \",plot_bgcolor=\"white\", paper_bgcolor='ivory')\nfig.show()","fdae8fe8":"fig = make_subplots(rows=2, cols=3,subplot_titles=(\"South Korea\",\"USA\", \"Italy\",\"France\",\"Iran\",\"Japan\"))\n\nfig.add_trace(\n    go.Scatter(x=dskorea.ObservationDate, y=dskorea.Recovered,name=\"South Korea\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=dusa.ObservationDate, y=dusa.Recovered,name=\"USA\"),\n    row=1, col=2\n)\nfig.add_trace(\n    go.Scatter(x=ditaly.ObservationDate, y=ditaly.Recovered,name=\"Italy\"),\n    row=1, col=3\n)\nfig.add_trace(\n    go.Scatter(x=dfrance.ObservationDate, y=dfrance.Recovered,name=\"France\"),\n    row=2, col=1\n)\nfig.add_trace(\n    go.Scatter(x=diran.ObservationDate, y=diran.Recovered,name=\"Iran\"),\n    row=2, col=2\n)\nfig.add_trace(\n    go.Scatter(x=djapan.ObservationDate, y=djapan.Recovered,name=\"Japan\"),\n    row=2, col=3\n)\n\nfig.update_layout(height=600, width=900, title_text=\"Cumulative Number of Recovered Cases \",plot_bgcolor=\"white\",paper_bgcolor='oldlace')\nfig.show()","b51d04d5":"fig = make_subplots(rows=2, cols=3,subplot_titles=(\"South Korea\",\"USA\", \"Italy\",\"France\",\"Iran\",\"Japan\"))\n\nfig.add_trace(\n    go.Scatter(x=dskorea.ObservationDate, y=dskorea.Deaths,name=\"South Korea\"),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=dusa.ObservationDate, y=dusa.Deaths,name=\"USA\"),\n    row=1, col=2\n)\nfig.add_trace(\n    go.Scatter(x=ditaly.ObservationDate, y=ditaly.Deaths,name=\"Italy\"),\n    row=1, col=3\n)\nfig.add_trace(\n    go.Scatter(x=dfrance.ObservationDate, y=dfrance.Deaths,name=\"France\"),\n    row=2, col=1\n)\nfig.add_trace(\n    go.Scatter(x=diran.ObservationDate, y=diran.Deaths,name=\"Iran\"),\n    row=2, col=2\n)\nfig.add_trace(\n    go.Scatter(x=djapan.ObservationDate, y=djapan.Deaths,name=\"Japan\"),\n    row=2, col=3\n)\n\nfig.update_layout(height=600, width=900, title_text=\"Cumulative Number of Deaths  \",plot_bgcolor=\"white\",paper_bgcolor='honeydew')\nfig.show()","1f6ab271":"import plotly.express as px\n\nfig = px.density_mapbox(data, lat=\"Lat\", lon=\"Long\", hover_name=\"Province\/State\", hover_data=['normConfirmed',\"Confirmed\",\"Deaths\",\"Recovered\"],animation_frame=\"ObservationDate\",\n                        color_continuous_scale=\"Portland\",radius=7,  zoom=0,height=700)\nfig.update_layout(mapbox_style=\"carto-darkmatter\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n\nfig.show()","cab3d7bf":"CHINA","def046e6":"All World"}}