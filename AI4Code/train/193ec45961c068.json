{"cell_type":{"92a67624":"code","6aa4920a":"code","a2b03ff5":"code","f33807da":"code","b477cea1":"code","03b29d6c":"code","a0bebe00":"code","c924f551":"code","a659e204":"code","e6acebdf":"code","29c6da22":"code","927a125a":"code","cbb15559":"code","30e4e210":"code","2748fca1":"code","42a4681a":"code","a67c4265":"code","a5a4b5b2":"code","69c32e07":"code","2065a529":"code","0fd6893c":"code","0ddb4247":"code","47a8f16b":"code","01cf0f59":"code","2c39bae2":"code","6d11f964":"markdown","9f55424f":"markdown","6ab362a7":"markdown","a464db31":"markdown","d46f6cde":"markdown","c8d72501":"markdown","8ffc6e9b":"markdown","642af263":"markdown","9fb9bf1e":"markdown","a66ef990":"markdown","674587dc":"markdown","627edd25":"markdown","512d6cdb":"markdown","522d9add":"markdown","0bf622a9":"markdown","c67f9f56":"markdown"},"source":{"92a67624":"#import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","6aa4920a":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a2b03ff5":"#read files\n#Reading train file:\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n#Reading test file:\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","f33807da":"for column in train.columns:\n    train[column].fillna(train[column].mode()[0], inplace=True)\n\nfor column in test.columns:\n    test[column].fillna(test[column].mode()[0], inplace=True)","b477cea1":"sns.distplot(train.Survived)","03b29d6c":"from sklearn import preprocessing\nfrom sklearn.preprocessing import OrdinalEncoder\nenc = OrdinalEncoder()\n\ntrain.Sex = enc.fit_transform(train.Sex.values.reshape(-1,1))\ntrain.Age=train.Age.astype(int)\ntrain.Age = enc.fit_transform(train.Age.values.reshape(-1,1))\ntrain.Ticket = enc.fit_transform(train.Ticket.values.reshape(-1,1))\ntrain.Cabin = enc.fit_transform(train.Cabin.values.reshape(-1,1))\ntrain.Fare=train.Fare.astype(int)\ntrain.Fare = enc.fit_transform(train.Fare.values.reshape(-1,1))\ntrain.Embarked = enc.fit_transform(train.Embarked.values.reshape(-1,1))\n\ntest.Sex = enc.fit_transform(test.Sex.values.reshape(-1,1))\ntest.Age=test.Age.astype(int)\ntest.Age = enc.fit_transform(test.Age.values.reshape(-1,1))\ntest.Ticket = enc.fit_transform(test.Ticket.values.reshape(-1,1))\ntest.Cabin = enc.fit_transform(test.Cabin.values.reshape(-1,1))\ntest.Fare=test.Fare.astype(int)\ntest.Fare = enc.fit_transform(test.Fare.values.reshape(-1,1))\ntest.Embarked = enc.fit_transform(test.Embarked.values.reshape(-1,1))","a0bebe00":"y = train.Survived\nX = train.drop(['PassengerId', 'Survived', 'Name', 'Cabin', 'Ticket'], axis=1)\nX_test = test.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1)\nX.shape, y.shape,X_test.shape","c924f551":"#split train set for testing\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.10, random_state=1, stratify=y, shuffle=True)\nX_train.shape, X_val.shape, y_train.shape, y_val.shape, X_test.shape","a659e204":"# Import `StandardScaler` from `sklearn.preprocessing`\nfrom sklearn.preprocessing import StandardScaler\n\n# Define the scaler \nscaler = StandardScaler().fit(X_train)\n# Scale the train set\nX_train = scaler.transform(X_train)\n# Scale the validation set\nX_val = scaler.transform(X_val)\n# Scale the test set\nX_test = scaler.transform(X_test)","e6acebdf":"from sklearn.utils import class_weight\nclass_weights = dict(zip(np.unique(y_train), class_weight.compute_class_weight('balanced',np.unique(y_train), y_train))) ","29c6da22":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=6)\n\nX_train = pca.fit_transform(X_train)\nX_val = pca.transform(X_val)\nX_test = pca.transform(X_test)","927a125a":"explained_variance = pca.explained_variance_ratio_\nexplained_variance","cbb15559":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nmodel = AdaBoostClassifier(base_estimator=RandomForestClassifier(n_estimators=100, random_state=1, class_weight=class_weights)).fit(X_train, y_train)\nprint(model.score(X_train, y_train))","30e4e210":"y_pred=model.predict(X_val)\nprint(model.score(X_val, y_val))","2748fca1":"predictions = model.predict(X_test)","42a4681a":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","a67c4265":"#upload submission\nmy_submission = pd.read_csv(\"my_submission.csv\")\nmy_submission","a5a4b5b2":"from sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(X) # normalizing the features\nX.shape","69c32e07":"np.mean(X),np.std(X)","2065a529":"feat_cols = ['feature'+str(i) for i in range(X.shape[1])]\nfeat_cols","0fd6893c":"normalised = pd.DataFrame(X,columns=feat_cols)\nnormalised","0ddb4247":"from sklearn.decomposition import PCA\n\npca_titanic = PCA(n_components=2)\nprincipalComponents_titanic = pca_titanic.fit_transform(X)","47a8f16b":"principal_titanic_Df = pd.DataFrame(data = principalComponents_titanic, columns = ['principal component 1', 'principal component 2'])\nprincipal_titanic_Df","01cf0f59":"print('Explained variation per principal component: {}'.format(pca_titanic.explained_variance_ratio_))","2c39bae2":"import matplotlib.pyplot as plt\n\nplt.figure()\nplt.figure(figsize=(10,10))\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=14)\nplt.xlabel('Principal Component - 1',fontsize=20)\nplt.ylabel('Principal Component - 2',fontsize=20)\nplt.title(\"Principal Component Analysis of Titanic Dataset\",fontsize=20)\ntargets = [0, 1]\ncolors = ['r', 'g']\nfor target, color in zip(targets,colors):\n    indicesToKeep = y == target\n    plt.scatter(principal_titanic_Df.loc[indicesToKeep, 'principal component 1'], \n                principal_titanic_Df.loc[indicesToKeep, 'principal component 2'], c = color, s = 50)\n\nplt.legend(targets,prop={'size': 15})","6d11f964":"Predict on validation set","9f55424f":"Graphical representation of target","6ab362a7":"Submit predictions","a464db31":"Apply PCA","d46f6cde":"Split the X file for training and testing","c8d72501":"Process data","8ffc6e9b":"Define model","642af263":"Set up X, y and X_test values[](http:\/\/)","9fb9bf1e":"Class weights","a66ef990":"Predict on test set","674587dc":"Problem Statement\n\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","627edd25":"Load and read files","512d6cdb":"Visualise PCA","522d9add":"Load libraries","0bf622a9":"Fill null values with mode","c67f9f56":"Scaler"}}