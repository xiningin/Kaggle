{"cell_type":{"ccc860b7":"code","0bbfaadf":"code","a46647b4":"code","1ddf17cf":"code","e32a1775":"code","64ef2dee":"code","de32d03c":"code","d744b2e0":"code","e884a14f":"code","47ca38cc":"code","7cc5e49b":"code","4353768f":"code","a7b02f32":"code","4d9c79dc":"markdown","f6fc3d38":"markdown","46c431bb":"markdown","12afa6c5":"markdown","2636741e":"markdown","fbbac648":"markdown","bd97c436":"markdown"},"source":{"ccc860b7":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold,train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom catboost import CatBoostClassifier\nimport optuna","0bbfaadf":"train = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsample_submission = pd.read_csv(r'..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","a46647b4":"print(f'train set have {train.shape[0]} rows and {train.shape[1]} columns.')\nprint(f'test set have {test.shape[0]} rows and {test.shape[1]} columns.') \nprint(f'sample_submission set have {sample_submission.shape[0]} rows and {sample_submission.shape[1]} columns.') ","1ddf17cf":"train.head()","e32a1775":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","64ef2dee":"plt.figure(figsize=(14,5))\ntarget_values = train['target'].value_counts()\nsns.barplot(x=target_values.index, y=target_values.values,linewidth=1.5, facecolor='red',\n                 errcolor=\".2\", edgecolor=\".2\")\nplt.title(\"Target unique values\", fontdict={'fontsize':20})\nplt.show()","de32d03c":"fig = plt.figure(figsize = (15, 60))\nfor i in range(len(train.columns.tolist()[0:100])):\n    plt.subplot(24,5,i+1)\n    sns.set_style(\"white\")\n    plt.title(train.columns.tolist()[0:100][i], size = 10, fontname = 'monospace')\n    a = sns.kdeplot(train[train.columns.tolist()[0:100][i]], shade = True, alpha = 0.9, linewidth = 1.5, facecolor='red', edgecolor=\".2\")\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\nplt.show()","d744b2e0":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","e884a14f":"def fit_cat(trial, x_train, y_train, x_test, y_test):\n    params = {'iterations':trial.suggest_int(\"iterations\", 1000, 100000),\n              'od_wait':trial.suggest_int('od_wait', 500, 5000),\n              'task_type':\"GPU\",\n              'learning_rate' : trial.suggest_uniform('learning_rate', 0.02 , 0.06),\n              'reg_lambda': trial.suggest_loguniform('reg_lambda', 0.30 , 0.33),\n              'subsample': trial.suggest_uniform('subsample',0.8,1.0),\n              'random_strength': trial.suggest_uniform('random_strength',10,50),\n              'depth': trial.suggest_int('depth',1,15),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,50),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n              'bootstrap_type':'Poisson'\n               }\n    \n    \n    model = CatBoostClassifier(**params)\n    model.fit(x_train, y_train,eval_set=[(x_test,y_test)], early_stopping_rounds=150, verbose=False)\n    \n    y_train_pred = model.predict_proba(x_train)[:,1]\n    \n    y_test_pred = model.predict_proba(x_test)[:,1]\n    y_train_pred = np.clip(y_train_pred, 0.1, None)\n    y_test_pred = np.clip(y_test_pred, 0.1, None)\n    \n    log = {\n        \"train roc_auc\": roc_auc_score(y_train, y_train_pred),\n        \"valid roc_auc\": roc_auc_score(y_test, y_test_pred)\n    }\n    \n    return model, log","47ca38cc":"def objective(trial):\n    roc_auc = 0\n    x_train, x_test, y_train, y_test = train_test_split(train, y, test_size=0.20)\n    model, log = fit_cat(trial, x_train, y_train, x_test, y_test)\n    roc_auc += log['valid roc_auc']\n        \n    return roc_auc","7cc5e49b":"# catboost params\ncat_params = {'iterations': 51269,\n 'od_wait': 4941,\n 'learning_rate': 0.04213735801762003,\n 'reg_lambda': 0.30872600062215705,\n 'subsample': 0.8228796292309075,\n 'random_strength': 13.402944110034412,\n 'depth': 7,\n 'min_data_in_leaf': 45,\n 'leaf_estimation_iterations': 6,\n 'task_type':\"GPU\",\n 'bootstrap_type':'Poisson'}","4353768f":"folds = KFold(n_splits = 5, random_state = 2021, shuffle = True)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n    print(f\"Fold: {fold}\")\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = CatBoostClassifier(**cat_params)\n   \n    model.fit(X_train, y_train,\n              eval_set=[(X_test, y_test)],\n                early_stopping_rounds=400,\n                verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","a7b02f32":"sample_submission['target'] = predictions\nsample_submission.to_csv(f'cat.csv',index = False)","4d9c79dc":"#### Optuna:","f6fc3d38":"#### Target Distribution:","46c431bb":"<div style=\"background-color:dark;\">\n    <h1><center>Building Model - CatBoost<\/center><\/h1>\n<\/div>","12afa6c5":"#### Features Distribution:","2636741e":"<div style=\"background-color:skyblue;\">\n    <h1><center>Tabular Playground Series - NOV 2021<\/center><\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26480\/logos\/header.png?t=2021-04-09-00-57-05)","fbbac648":"#### CatBoost:","bd97c436":"<div style=\"background-color:dark;\">\n    <h1><center>Data visualization<\/center><\/h1>\n<\/div>"}}