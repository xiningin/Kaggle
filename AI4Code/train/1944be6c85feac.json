{"cell_type":{"29d9143e":"code","27640b2e":"code","4d42119a":"code","5bd94438":"code","7da0a563":"code","bbdbec53":"code","facc4694":"code","a19c4ea0":"code","8ea672ce":"code","09290eb9":"code","d7385d24":"code","90580f55":"code","6219a5a4":"code","0e873957":"code","cd97f9dd":"code","5b0739b3":"code","b8979aa4":"code","5aab911c":"markdown","8c1f20c6":"markdown"},"source":{"29d9143e":"%reload_ext autoreload\n%autoreload 2\n\nimport os\nimport cv2\nimport random\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\nfrom sklearn.metrics import cohen_kappa_score\n\nimport torch\nfrom fastai.vision import *","27640b2e":"SEED = 1234\nSIZE = 224\n\nPATH = \"..\/input\/aptos2019-blindness-detection\"","4d42119a":"import os\nos.listdir('..\/input\/densenet201')","5bd94438":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ[\"PYTHONHASHSEED\"] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nseed_everything(SEED)","7da0a563":"!mkdir -p \/tmp\/.cache\/torch\/checkpoints\/\n!cp ..\/input\/densenet201\/densenet201-c1103571.pth \/tmp\/.cache\/torch\/checkpoints\/densenet201-c1103571.pth","bbdbec53":"train_df = pd.read_csv(PATH+\"\/train.csv\")\nsub = pd.read_csv(PATH+\"\/sample_submission.csv\")","facc4694":"train = ImageList.from_df(train_df, path=PATH, cols='id_code', folder=\"train_images\", suffix='.png')\ntest = ImageList.from_df(sub, path=PATH, cols='id_code', folder=\"test_images\", suffix='.png')","a19c4ea0":"def quadratic_kappa(y_hat, y):\n    return torch.tensor(cohen_kappa_score(torch.round(y_hat), y, weights='quadratic'),device='cuda:0')","8ea672ce":"def crop_image(img,tol=7):        \n    mask = img>tol\n    return img[np.ix_(mask.any(1),mask.any(0))]\n\ndef open_aptos2019_image(fn, convert_mode, after_open)->Image:\n    image = cv2.imread(fn)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    image = crop_image(image)\n    image = cv2.resize(image, (SIZE, SIZE))\n    image = cv2.addWeighted(image, 4, cv2.GaussianBlur(image , (0,0) , SIZE\/10) ,-4 ,128)\n    return Image(pil2tensor(image, np.float32).div_(255))\n\nvision.data.open_image = open_aptos2019_image","09290eb9":"from sklearn.model_selection import StratifiedKFold\nfrom tqdm import tqdm","d7385d24":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state = SEED)\n\nmodel_name = 'densenet201'\nbs = 64\npredictions = torch.from_numpy(np.zeros((len(sub))))\nfor fold, (train_index, val_index) in tqdm(enumerate(skf.split(train_df[\"id_code\"], train_df[\"diagnosis\"]))):\n    print(fold)\n    filename = model_name + \"fold_\" + str(fold)+\".pkl\"\n    print(\"Fold:\", filename)\n    print(\"TRAIN:\", train_index, \"VALIDATE:\", val_index)\n    \n    data_fold = (ImageList.from_df(train_df,\n                                   PATH,\n                                   folder='train_images'\n                                   ,cols=\"id_code\",suffix='.png')\n        .split_by_idxs(train_index, val_index)\n        .label_from_df(cols='diagnosis', label_cls=FloatList)\n        .transform(get_transforms(), size=SIZE)\n        .databunch(bs=bs).normalize(imagenet_stats)\n    )\n    \n    learn = cnn_learner(data_fold, models.densenet201, metrics=[quadratic_kappa], pretrained=True)\n    #learn.lr_find()\n    #learn.recorder.plot(suggestion=True)\n    learn.fit_one_cycle(5, 1e-2)        \n    learn.data.add_test(ImageList.from_df(sub ,PATH ,folder='test_images',suffix='.png'))\n    test_predsx, _ = learn.get_preds(ds_type=DatasetType.Test)\n    if (fold == 0):\n        test_preds = test_predsx\n    else:\n        test_preds = test_predsx + test_preds\n    \n    if (fold == 2):\n        valid_preds, valid_y = learn.get_preds(ds_type=DatasetType.Valid) ","90580f55":"# ref: https:\/\/www.kaggle.com\/abhishek\/optimizer-for-quadratic-weighted-kappa\n# thank you Abhishek Thakur!!\nclass OptimizedRounder(object):\n    def __init__(self):\n        self.coef_ = 0\n\n    def _kappa_loss(self, coef, X, y):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n\n        ll = cohen_kappa_score(y, X_p, weights='quadratic')\n        return -ll\n\n    def fit(self, X, y):\n        loss_partial = partial(self._kappa_loss, X=X, y=y)\n        initial_coef = [0.5, 1.5, 2.5, 3.5]\n        self.coef_ = sp.optimize.minimize(loss_partial, initial_coef, method='nelder-mead')\n\n    def predict(self, X, coef):\n        X_p = np.copy(X)\n        for i, pred in enumerate(X_p):\n            if pred < coef[0]:\n                X_p[i] = 0\n            elif pred >= coef[0] and pred < coef[1]:\n                X_p[i] = 1\n            elif pred >= coef[1] and pred < coef[2]:\n                X_p[i] = 2\n            elif pred >= coef[2] and pred < coef[3]:\n                X_p[i] = 3\n            else:\n                X_p[i] = 4\n        return X_p\n\n    def coefficients(self):\n        return self.coef_['x']","6219a5a4":"test_preds = test_preds\/5\noptR = OptimizedRounder()\noptR.fit(valid_preds, valid_y)\ncoefficients = optR.coefficients()\n\nvalid_predictions = optR.predict(valid_preds, coefficients)[:,0].astype(int)\ntest_predictions = optR.predict(test_preds, coefficients)[:,0].astype(int)\n\nvalid_score = cohen_kappa_score(valid_y.numpy().astype(int), valid_predictions, weights=\"quadratic\")","0e873957":"valid_score = cohen_kappa_score(valid_y.numpy().astype(int), valid_predictions, weights=\"quadratic\")","cd97f9dd":"print(\"coefficients:\", coefficients)\nprint(\"validation score:\", valid_score)","5b0739b3":"sub.diagnosis = test_predictions\nsub.to_csv(\"submission.csv\", index=None)\nsub.head()","b8979aa4":"sub.diagnosis.hist();","5aab911c":"Unfortunately, my local and public score down after added this preprocessing.  \nI may have some mistakes.  \nI'll try to learn more.","8c1f20c6":"I saw [this kernel](https:\/\/www.kaggle.com\/ratthachat\/aptos-simple-preprocessing-decoloring-cropping) and learned about Ben Graham's Preprocessing.  \nIn this kernel, I try apply training Resnet50 by fast.ai.  \nI learned how to train fast.ai by [this kernel](https:\/\/www.kaggle.com\/tanlikesmath\/intro-aptos-diabetic-retinopathy-eda-starter).  \nThank you Neuron Engineer and ilovescience!!"}}