{"cell_type":{"cdb1fe72":"code","c2dd05fa":"code","2d9acd0d":"code","d4d60c3b":"code","ee916f5b":"code","d72e34a0":"code","67ba926b":"code","28e47d58":"code","d110f7ce":"code","ffa0d8ae":"code","e1ab6506":"code","a7f898b3":"code","564cb83a":"code","f39a4a17":"code","9e0d9623":"code","818b5924":"code","625864c7":"code","ce33d239":"code","1d4fc2a7":"code","e8428df6":"code","e408f5dc":"code","b1f25ac8":"code","d9b28e9f":"code","55d3da21":"code","992f9162":"code","33d8d02a":"code","5673c46a":"code","f77de522":"code","62c3a59f":"code","d375e0d7":"code","b3c91d8f":"code","aaf505de":"code","d675a445":"code","fb4899d3":"code","f7ede95f":"code","7400b246":"code","3e569f2e":"code","58282d42":"code","004206d2":"code","8a6b5a50":"code","190b12f7":"code","4b1b6d9d":"code","cdf35a94":"code","93f5e2d2":"code","5640d2f2":"code","116f3606":"code","8c6eb0e8":"markdown","e8d860d8":"markdown","aa4a3cf6":"markdown","153aefed":"markdown","d83a982f":"markdown","cd7302e8":"markdown","75681bbc":"markdown","ffcc40a9":"markdown","1ae2f1a2":"markdown","8ab39b47":"markdown","36b72032":"markdown","d031d9f6":"markdown","5fbb54f6":"markdown","e208e806":"markdown","326d5b44":"markdown","4d78864e":"markdown","71a8eb79":"markdown"},"source":{"cdb1fe72":"import numpy as np \nimport pandas as pd \nimport nltk\nimport os\nimport gc\nfrom keras.preprocessing import sequence,text\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout,Embedding,LSTM,Conv1D,GlobalMaxPooling1D,Flatten,MaxPooling1D,GRU,SpatialDropout1D,Bidirectional\nfrom keras.callbacks import EarlyStopping\nfrom keras.utils import to_categorical\nfrom keras.losses import categorical_crossentropy\nfrom keras.optimizers import Adam\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report,f1_score\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n#pd.set_option('display.max_colwidth',100)\npd.set_option('display.max_colwidth', -1)","c2dd05fa":"gc.collect()","2d9acd0d":"train=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/train.tsv',sep='\\t')\nprint(train.shape)\ntrain.head()","d4d60c3b":"test=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/test.tsv',sep='\\t')\nprint(test.shape)\ntest.head()","ee916f5b":"sub=pd.read_csv('..\/input\/movie-review-sentiment-analysis-kernels-only\/sampleSubmission.csv')\nsub.head()","d72e34a0":"test['Sentiment']=-999\ntest.head()","67ba926b":"df=pd.concat([train,test],ignore_index=True)\nprint(df.shape)\ndf.tail()","28e47d58":"del train,test\ngc.collect()","d110f7ce":"from nltk.tokenize import word_tokenize\nfrom nltk import FreqDist\nfrom nltk.stem import SnowballStemmer,WordNetLemmatizer\nstemmer=SnowballStemmer('english')\nlemma=WordNetLemmatizer()\nfrom string import punctuation\nimport re\n","ffa0d8ae":"def clean_review(review_col):\n    review_corpus=[]\n    for i in range(0,len(review_col)):\n        review=str(review_col[i])\n        review=re.sub('[^a-zA-Z]',' ',review)\n        #review=[stemmer.stem(w) for w in word_tokenize(str(review).lower())]\n        review=[lemma.lemmatize(w) for w in word_tokenize(str(review).lower())]\n        review=' '.join(review)\n        review_corpus.append(review)\n    return review_corpus","e1ab6506":"df['clean_review']=clean_review(df.Phrase.values)\ndf.head()\n","a7f898b3":"df_train=df[df.Sentiment!=-999]\ndf_train.shape","564cb83a":"df_test=df[df.Sentiment==-999]\ndf_test.drop('Sentiment',axis=1,inplace=True)\nprint(df_test.shape)\ndf_test.head()","f39a4a17":"del df\ngc.collect()","9e0d9623":"train_text=df_train.clean_review.values\ntest_text=df_test.clean_review.values\ntarget=df_train.Sentiment.values\ny=to_categorical(target)\nprint(train_text.shape,target.shape,y.shape)","818b5924":"X_train_text,X_val_text,y_train,y_val=train_test_split(train_text,y,test_size=0.2,stratify=y,random_state=123)\nprint(X_train_text.shape,y_train.shape)\nprint(X_val_text.shape,y_val.shape)","625864c7":"all_words=' '.join(X_train_text)\nall_words=word_tokenize(all_words)\ndist=FreqDist(all_words)\nnum_unique_word=len(dist)\nnum_unique_word","ce33d239":"r_len=[]\nfor text in X_train_text:\n    word=word_tokenize(text)\n    l=len(word)\n    r_len.append(l)\n    \nMAX_REVIEW_LEN=np.max(r_len)\nMAX_REVIEW_LEN","1d4fc2a7":"max_features = num_unique_word\nmax_words = MAX_REVIEW_LEN\nbatch_size = 128\nepochs = 3\nnum_classes=5","e8428df6":"tokenizer = Tokenizer(num_words=max_features)\ntokenizer.fit_on_texts(list(X_train_text))\nX_train = tokenizer.texts_to_sequences(X_train_text)\nX_val = tokenizer.texts_to_sequences(X_val_text)\nX_test = tokenizer.texts_to_sequences(test_text)","e408f5dc":"X_train = sequence.pad_sequences(X_train, maxlen=max_words)\nX_val = sequence.pad_sequences(X_val, maxlen=max_words)\nX_test = sequence.pad_sequences(X_test, maxlen=max_words)\nprint(X_train.shape,X_val.shape,X_test.shape)","b1f25ac8":"model1=Sequential()\nmodel1.add(Embedding(max_features,100,mask_zero=True))\nmodel1.add(LSTM(64,dropout=0.4, recurrent_dropout=0.4,return_sequences=True))\nmodel1.add(LSTM(32,dropout=0.5, recurrent_dropout=0.5,return_sequences=False))\nmodel1.add(Dense(num_classes,activation='softmax'))\nmodel1.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel1.summary()","d9b28e9f":"%%time\nhistory1=model1.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","55d3da21":"y_pred1=model1.predict_classes(X_test,verbose=1)","992f9162":"sub.Sentiment=y_pred1\nsub.to_csv('sub1.csv',index=False)\nsub.head()","33d8d02a":"model2= Sequential()\nmodel2.add(Embedding(max_features,100,input_length=max_words))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Conv1D(64,kernel_size=3,padding='same',activation='relu',strides=1))\nmodel2.add(GlobalMaxPooling1D())\n\nmodel2.add(Dense(128,activation='relu'))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(num_classes,activation='softmax'))\n\n\nmodel2.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nmodel2.summary()","5673c46a":"%%time\nhistory2=model2.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","f77de522":"y_pred2=model2.predict_classes(X_test, verbose=1)","62c3a59f":"sub.Sentiment=y_pred2\nsub.to_csv('sub2.csv',index=False)\nsub.head()","d375e0d7":"model3= Sequential()\nmodel3.add(Embedding(max_features,100,input_length=max_words))\nmodel3.add(Conv1D(64,kernel_size=3,padding='same',activation='relu'))\nmodel3.add(MaxPooling1D(pool_size=2))\nmodel3.add(Dropout(0.25))\nmodel3.add(GRU(128,return_sequences=True))\nmodel3.add(Dropout(0.3))\nmodel3.add(Flatten())\nmodel3.add(Dense(128,activation='relu'))\nmodel3.add(Dropout(0.5))\nmodel3.add(Dense(5,activation='softmax'))\nmodel3.compile(loss='categorical_crossentropy',optimizer=Adam(lr=0.001),metrics=['accuracy'])\nmodel3.summary()","b3c91d8f":"%%time\nhistory3=model3.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","aaf505de":"y_pred3=model3.predict_classes(X_test, verbose=1)\n","d675a445":"sub.Sentiment=y_pred3\nsub.to_csv('sub3.csv',index=False)\nsub.head()","fb4899d3":"model4 = Sequential()\n\nmodel4.add(Embedding(max_features, 100, input_length=max_words))\nmodel4.add(SpatialDropout1D(0.25))\nmodel4.add(Bidirectional(GRU(128)))\nmodel4.add(Dropout(0.5))\n\nmodel4.add(Dense(5, activation='softmax'))\nmodel4.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel4.summary()","f7ede95f":"%%time\nhistory4=model4.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=epochs, batch_size=batch_size, verbose=1)","7400b246":"y_pred4=model4.predict_classes(X_test, verbose=1)","3e569f2e":"sub.Sentiment=y_pred4\nsub.to_csv('sub4.csv',index=False)\nsub.head()","58282d42":"def get_coefs(word, *arr):\n    return word, np.asarray(arr, dtype='float32')\n    \ndef get_embed_mat(EMBEDDING_FILE, max_features,embed_dim):\n    # word vectors\n    embeddings_index = dict(get_coefs(*o.rstrip().rsplit(' ')) for o in open(EMBEDDING_FILE, encoding='utf8'))\n    print('Found %s word vectors.' % len(embeddings_index))\n\n    # embedding matrix\n    word_index = tokenizer.word_index\n    num_words = min(max_features, len(word_index) + 1)\n    all_embs = np.stack(embeddings_index.values()) #for random init\n    embedding_matrix = np.random.normal(all_embs.mean(), all_embs.std(), \n                                        (num_words, embed_dim))\n    for word, i in word_index.items():\n        if i >= max_features:\n            continue\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector\n    max_features = embedding_matrix.shape[0]\n    \n    return embedding_matrix","004206d2":"# embedding matrix\nEMBEDDING_FILE = '..\/input\/glove6b100dtxt\/glove.6B.100d.txt'\nembed_dim = 100 #word vector dim\nembedding_matrix = get_embed_mat(EMBEDDING_FILE,max_features,embed_dim)\nprint(embedding_matrix.shape)","8a6b5a50":"model5 = Sequential()\nmodel5.add(Embedding(max_features, embed_dim, input_length=X_train.shape[1],weights=[embedding_matrix],trainable=True))\nmodel5.add(SpatialDropout1D(0.25))\nmodel5.add(Bidirectional(GRU(128,return_sequences=True)))\nmodel5.add(Bidirectional(GRU(64,return_sequences=False)))\nmodel5.add(Dropout(0.5))\nmodel5.add(Dense(num_classes, activation='softmax'))\nmodel5.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel5.summary()","190b12f7":"%%time\nhistory5=model5.fit(X_train, y_train, validation_data=(X_val, y_val),epochs=4, batch_size=batch_size, verbose=1)","4b1b6d9d":"y_pred5=model5.predict_classes(X_test, verbose=1)","cdf35a94":"sub.Sentiment=y_pred5\nsub.to_csv('sub5.csv',index=False)\nsub.head()","93f5e2d2":"sub_all=pd.DataFrame({'model1':y_pred1,'model2':y_pred2,'model3':y_pred3,'model4':y_pred4,'model5':y_pred5})\npred_mode=sub_all.agg('mode',axis=1)[0].values\nsub_all.head()","5640d2f2":"pred_mode=[int(i) for i in pred_mode]","116f3606":"sub.Sentiment=pred_mode\nsub.to_csv('sub_mode.csv',index=False)\nsub.head()","8c6eb0e8":"## Building Keras LSTM model","e8d860d8":"** seperating train and test dataset**","aa4a3cf6":"** sequence padding**","153aefed":"## 5. Glove word embedding","d83a982f":"### Loading dataset and basic visualization","cd7302e8":"## 2. CNN","75681bbc":"**Adding Sentiment column to test datset and joing train and test for preprocessing**","ffcc40a9":"###  combine all output","1ae2f1a2":"## 4. Bidirectional GRU","8ab39b47":"## 3. CNN +GRU","36b72032":"## Importing Library","d031d9f6":"## 1. LSTM model","5fbb54f6":"### Finding max length of a review in train set","e208e806":"### Finding number of unique words in train set","326d5b44":"** Tokenize Text**","4d78864e":"** cleaning review**","71a8eb79":"### Splitting Train dataset into train and 20% validation set"}}