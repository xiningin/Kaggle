{"cell_type":{"fd95b027":"code","a2e302f1":"code","2c3f3d10":"code","fe151328":"code","ca302e37":"code","451e1628":"code","37f95ef3":"code","8ef53ab8":"code","31a639f9":"code","2abb7b92":"code","55301403":"code","fee75e83":"code","593c58e7":"code","4ad4b101":"code","70a37012":"code","a40bb3f3":"code","43f33e36":"code","29f8c09e":"code","e825be31":"code","75aecd69":"code","60ffc275":"code","41a9a597":"code","43201253":"code","f023989c":"code","b27e6656":"code","106bee0b":"code","5e43bd92":"code","8b8044a6":"markdown","99c4d12b":"markdown","9e747baf":"markdown","33bd23b6":"markdown","799c354a":"markdown","e7277d32":"markdown","4e48246d":"markdown","88cbb0c0":"markdown","2a549a88":"markdown","3e031222":"markdown"},"source":{"fd95b027":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2e302f1":"heart_data = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\nprint(\"Shape of heart.csv: \",heart_data.shape)\nheart_data.head()","2c3f3d10":"o2sat_data = pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/o2Saturation.csv\")\nprint(\"Shape of o2Saturation.csv: \",o2sat_data.shape)\no2sat_data.head()","fe151328":"from pandas_profiling import ProfileReport","ca302e37":"profile = ProfileReport(heart_data, title=\"Heart Attack Dataset\", explorative=True)\nprofile.to_widgets()","451e1628":"from matplotlib import pyplot as plt","37f95ef3":"def normal_scatter(x,y):\n    fig = plt.figure(figsize=(4, 4))\n    plt.scatter(x,y)","8ef53ab8":"def boxplot(data, column, groupby):\n    fig, ax = plt.subplots(figsize=(4,4))\n    plt.suptitle('')\n    data.boxplot(column=column, by=groupby, ax=ax, grid=False, rot=0)","31a639f9":"normal_scatter(heart_data['thall'], heart_data['output'])\nboxplot(heart_data, [\"thall\"],\"output\")","2abb7b92":"normal_scatter(heart_data['exng'], heart_data['output'])\nboxplot(heart_data, [\"exng\"],\"output\")","55301403":"normal_scatter(heart_data['exng'], heart_data['output'])\nboxplot(heart_data, [\"exng\"],\"output\")","fee75e83":"normal_scatter(heart_data['cp'], heart_data['output'])\nboxplot(heart_data, [\"cp\"],\"output\")","593c58e7":"normal_scatter(heart_data['thalachh'], heart_data['output'])\nboxplot(heart_data, [\"thalachh\"],\"output\")","4ad4b101":"# To understand the density function and also the correlation between different variables\npd.plotting.scatter_matrix(heart_data.loc[:, heart_data.columns], diagonal=\"kde\",figsize=(20,15))\nplt.show()","70a37012":"# To have an understanding of the range of values of continuous variables\nax = heart_data[[\"age\",\"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]].plot(figsize=(20,15))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5));","a40bb3f3":"from sklearn.model_selection import train_test_split","43f33e36":"X_train, X_test, y_train, y_test = train_test_split(heart_data[heart_data.columns[~heart_data.columns.isin(['output'])]\n], heart_data[heart_data.columns[heart_data.columns.isin(['output'])]\n], test_size=0.3, random_state=42)","29f8c09e":"X_train = X_train.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)\nX_test = X_test.reset_index(drop=True)\ny_test = y_test.reset_index(drop=True)","e825be31":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom scipy import stats","75aecd69":"lda = LinearDiscriminantAnalysis().fit(X_train, y_train)","60ffc275":"def pretty_scalings(lda, X, out=False):\n    ret = pd.DataFrame(lda.scalings_, index=X.columns, columns=[\"LD\"+str(i+1) for i in range(lda.scalings_.shape[1])])\n    if out:\n        print(\"Coefficients of linear discriminants:\")\n        display(ret)\n    return ret\n\npretty_scalings_ = pretty_scalings(lda, X_train, out=True)","41a9a597":"def calclda(variables, loadings):\n    # find the number of samples in the data set and the number of variables\n    numsamples, numvariables = variables.shape\n    # make a vector to store the discriminant function\n    ld = np.zeros(numsamples)\n    # calculate the value of the discriminant function for each sample\n    for i in range(numsamples):\n        valuei = 0\n        for j in range(numvariables):\n            valueij = variables.iloc[i, j]\n            loadingj = loadings[j]\n            valuei = valuei + (valueij * loadingj)\n        ld[i] = valuei\n    # standardise the discriminant function so that its mean value is 0:\n    ld = scale(ld, with_std=False)\n    return ld","43201253":"import seaborn as sns\nfrom sklearn.preprocessing import scale","f023989c":"calclda(X_train, lda.scalings_[:, 0])","b27e6656":"lda.fit_transform(X_train, y_train)[:, 0]","106bee0b":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, lda.predict(X_test),labels=[0,1])","5e43bd92":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, lda.predict(X_test), target_names=[\"0\",\"1\"]))","8b8044a6":"# **Distribution and Scatter of thalachh and output**","99c4d12b":"# **Distribution and Scatter of exng and output**","9e747baf":"# **LDA Analysis**","33bd23b6":"# **Distribution and Scatter of cp and output**","799c354a":"# **Heart Dataset**","e7277d32":"# **Kernal Distribution Function**","4e48246d":"# **Distribution and Scatter of exng and output**","88cbb0c0":"# **Distribution and Scatter of thall and output**","2a549a88":"# **Exploratory Data Analysis**","3e031222":"# **O2 Saturation**"}}