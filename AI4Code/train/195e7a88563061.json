{"cell_type":{"5e549f0c":"code","d18f28d6":"code","96de2f5e":"code","4d0b0cac":"code","175b9f48":"code","316314fc":"code","de0b99e4":"code","2a02cb5f":"code","b690144b":"code","fdf1ec02":"code","8eb9e91f":"code","1c035705":"code","e6935393":"markdown"},"source":{"5e549f0c":"#Loading libraries and methods:\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import confusion_matrix\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.utils import np_utils\nfrom tqdm.notebook import tqdm","d18f28d6":"#Loading the dataset:\ndata = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndata.head()","96de2f5e":"#Dataset dimensions:\ndata.shape","4d0b0cac":"#The pred variable stores the predictors (petal.length, ...).\n#The cla variable stores the classes.\n\n#Converting to the numpy format:\npred = data.iloc[:, 0:4].values\n\n#Converting to the numpy format:\ncla = data.iloc[:, 4].values \n\n#Transforming to numeric features:\n#labelencoder = LabelEncoder()\n#cla = labelencoder.fit_transform(cla)\n\ncla_dummy = np_utils.to_categorical(cla, 3)\n\n#Iris setosa      1 0 0\n#Iris virginica   0 1 0\n#Iris versicolor  0 0 1","175b9f48":"#Splitting the dataset into training and test datasets:\n\npred_train, pred_test, cla_train, cla_test = train_test_split(pred, cla_dummy, test_size = 0.25)","316314fc":"#Training dataset: 75% \/ Test dataset: 25%\n\nprint(pred_train.shape)\nprint(pred_test.shape)\nprint(cla_train.shape)\nprint(cla_test.shape)","de0b99e4":"#Building the neural network with 2 hidden layers:\n\nclassifier = Sequential()\nclassifier.add(Dense(units=4, activation='relu', input_dim = 4))\nclassifier.add(Dropout(0.1))\nclassifier.add(Dense(units=4, activation='relu'))\nclassifier.add(Dropout(0.1))\nclassifier.add(Dense(units=3, activation='softmax'))\n\n#Compiling the neural network:\nclassifier.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics = ['categorical_accuracy'])","2a02cb5f":"#Neural network architecture:\n\nfrom IPython.display import Image\nImage(filename='\/kaggle\/input\/images\/meuralnet.png') ","b690144b":"#Training the neural network:\n\ntqdm(classifier.fit(pred_train, cla_train, batch_size = 10, epochs = 1000))","fdf1ec02":"#applying the trained model to the test set:\n\nresults = classifier.evaluate(pred_test, cla_test)","8eb9e91f":"#Predictions:\n\nprediction = classifier.predict(pred_test)\nprediction = (prediction > 0.5)","1c035705":"#Confusion matrix:\n\ncla_test2 = [np.argmax(t) for t in cla_test]\nprediction2 = [np.argmax(t) for t in prediction]\n\nmatrix = confusion_matrix(prediction2, cla_test2)\nmatrix","e6935393":"# Multiclass Classification with Keras\n\n\n<br>\n\nIn this notebook, we'll implement a fully connected feedforward neural network for a multiclass classification problem using the Iris dataset. As is customary, to solve this problem, we'll use the Sklearn and Keras libraries.\n\n<br>\n<hr>"}}