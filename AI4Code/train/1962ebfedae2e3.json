{"cell_type":{"0f56026a":"code","664d7672":"code","adf00458":"code","504405fc":"code","e787f491":"code","a485a039":"code","75f7ab7e":"code","6ace848e":"code","f483edd2":"code","ebd5fc73":"code","e7bfa551":"code","5b6f7c73":"code","7c6813be":"code","7db31ff3":"code","77e1b9e5":"code","affcdb7f":"code","af7253bd":"code","7b3e734a":"code","9a868d21":"code","aa39b017":"markdown","035d4c17":"markdown","78e1c14a":"markdown","2dded5d0":"markdown","ed583afa":"markdown","98ece0e4":"markdown","24f0d5b9":"markdown","0f3f5ff4":"markdown","3fe4f84e":"markdown","e0ed0717":"markdown"},"source":{"0f56026a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","664d7672":"df = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndf.head()","adf00458":"# Checking missing values\ndf.isna().sum()","504405fc":"# Checking the dtypes\ndf.dtypes","e787f491":"#describe\ndf.describe()","a485a039":"# Correlation\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),\n           annot=True,\n           cmap='Pastel1')\nplt.title('Correlation of Diabetes', fontsize=20);","75f7ab7e":"df.columns","6ace848e":"plt.figure(figsize=(10,5))\nsns.scatterplot(data=df, x='Age', y='Glucose', color='Black')\n","f483edd2":"plt.figure(figsize=(20,10))\nsns.boxplot(data=df, x='Age', y='BloodPressure')","ebd5fc73":"plt.figure(figsize=(20,10))\nsns.barplot(data=df, x='Age', y='Pregnancies')","e7bfa551":"plt.figure(figsize=(20,20))\nsns.boxplot(data=df, x='Glucose', y='Insulin')","5b6f7c73":"plt.figure(figsize=(10,10))\nsns.displot(df['Outcome'])","7c6813be":"from sklearn.model_selection import train_test_split\n\nX = df.drop('Outcome', axis=1)\ny = df['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nlen(X_train), len(X_test), len(y_train), len(y_test)","7db31ff3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\n\nlr = LogisticRegression(random_state=42)\nlr.fit(X_train, y_train)\ny_preds = lr.predict(X_test)\n\nprint(f\" Score : {lr.score(X_test, y_test)}\")\nprint(\"*\"*20)\nprint(f\" Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\" Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\" Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\" F1_score  : {f1_score(y_test, y_preds)}\")\nprint(\"*\" * 20)\nprint(f\" Classification_report : {classification_report(y_test, y_preds)}\")\n\nsns.heatmap(confusion_matrix(y_test, y_preds),\n            annot=True)\nplt.title(\"Confusion Matrix\");","77e1b9e5":"from sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(random_state=42)\nrf.fit(X_train, y_train)\ny_preds = rf.predict(X_test)\n\nprint(f\" Score : {rf.score(X_test, y_test)}\")\nprint(\"*\"*20)\nprint(f\" Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\" Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\" Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\" F1_score  : {f1_score(y_test, y_preds)}\")\nprint(\"*\" * 20)\nprint(f\" Classification_report : {classification_report(y_test, y_preds)}\")\n\nsns.heatmap(confusion_matrix(y_test, y_preds),\n            annot=True)\nplt.title(\"Confusion Matrix\");","affcdb7f":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb = GradientBoostingClassifier(random_state=42)\ngb.fit(X_train, y_train)\ny_preds = gb.predict(X_test)\n\nprint(f\" Score : {gb.score(X_test, y_test)}\")\nprint(\"*\"*20)\nprint(f\" Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\" Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\" Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\" F1_score  : {f1_score(y_test, y_preds)}\")\nprint(\"*\" * 20)\nprint(f\" Classification_report : {classification_report(y_test, y_preds)}\")\n\nsns.heatmap(confusion_matrix(y_test, y_preds),\n            annot=True)\nplt.title(\"Confusion Matrix\");","af7253bd":"from sklearn.neighbors import KNeighborsClassifier\n\nnp.random.seed(42)\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_preds = knn.predict(X_test)\n\nprint(f\" Score : {knn.score(X_test, y_test)}\")\nprint(\"*\"*20)\nprint(f\" Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\" Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\" Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\" F1_score  : {f1_score(y_test, y_preds)}\")\nprint(\"*\" * 20)\nprint(f\" Classification_report : {classification_report(y_test, y_preds)}\")\n\nsns.heatmap(confusion_matrix(y_test, y_preds),\n            annot=True)\nplt.title(\"Confusion Matrix\");","7b3e734a":"from sklearn.svm import LinearSVC\n\nsvc = LinearSVC(random_state=42)\nsvc.fit(X_train, y_train)\ny_preds = svc.predict(X_test)\n\nprint(f\" Score : {svc.score(X_test, y_test)}\")\nprint(\"*\"*20)\nprint(f\" Accuracy_score : {accuracy_score(y_test, y_preds)*100:.2f}%\")\nprint(f\" Precision_score : {precision_score(y_test, y_preds)}\")\nprint(f\" Recall_score : {recall_score(y_test, y_preds)}\")\nprint(f\" F1_score  : {f1_score(y_test, y_preds)}\")\nprint(\"*\" * 20)\nprint(f\" Classification_report : {classification_report(y_test, y_preds)}\")\n\nsns.heatmap(confusion_matrix(y_test, y_preds),\n            annot=True)\nplt.title(\"Confusion Matrix\");","9a868d21":"# logistic regression gave best accuracy\ny_preds = lr.predict(X_test)\ny_preds","aa39b017":"### Modelling","035d4c17":"### LinearSVC","78e1c14a":"## Exploratory Data Analysis","2dded5d0":"### Logistic Regression","ed583afa":"### KNN","98ece0e4":"#### split the dataset","24f0d5b9":"## Import Python Library","0f3f5ff4":"### GradientBoostingClassifier","3fe4f84e":"### RandomForestClassifier","e0ed0717":"### Import Dataset"}}