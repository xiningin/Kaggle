{"cell_type":{"05e66c9c":"code","18e92014":"code","f40ea27e":"code","b2a70424":"code","f142d07c":"code","db4888c3":"code","d679cdfc":"code","d3ed4f3f":"code","fa91f4b3":"code","f7d89b07":"code","1f4cf07a":"code","4e536ce2":"code","b4b30942":"code","da27e0a5":"code","c3731fcc":"code","b639637b":"code","8eeabb94":"code","4c77361e":"code","695b0222":"code","f5513091":"code","393700ce":"code","e41fc5be":"code","319f2120":"code","4c2b424d":"code","284eb71c":"code","ac362120":"code","c36f8504":"code","ba1f3879":"code","f62205a5":"code","8fc65948":"code","cc0e6fcb":"code","c6beb1b7":"code","05c00cd6":"code","2d7ebc61":"code","c906f6cc":"code","70855903":"code","bfccaa21":"code","ea704de7":"code","61e90643":"code","216a596c":"markdown","fb0e1d63":"markdown","126faa29":"markdown","532dc3a3":"markdown"},"source":{"05e66c9c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","18e92014":"data=pd.read_csv('..\/input\/train.csv',dtype=np.float32)# reading the csv file","f40ea27e":"data.head()#checking out the data","b2a70424":"targets_numpy = data.label.values\nfeatures_numpy = data.loc[:,data.columns != \"label\"].values\/255 # normalization","f142d07c":"import torch\nfrom torchvision import datasets,transforms\nfrom sklearn.model_selection import train_test_split","db4888c3":"features_train, features_test, targets_train, targets_test = train_test_split(features_numpy,\n                                                                             targets_numpy,\n                                                                             test_size = 0.2,\n                                                                             random_state = 42)\n","d679cdfc":"featuresTrain = torch.FloatTensor(features_train)\ntargetsTrain = torch.LongTensor(targets_train) # data type is long\n\n# create feature and targets tensor for test set.\nfeaturesTest = torch.FloatTensor(features_test)\ntargetsTest = torch.LongTensor(targets_test)","d3ed4f3f":"print(type(featuresTest))\nprint(type(targetsTest))","fa91f4b3":"trainset = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)\ntestset = torch.utils.data.TensorDataset(featuresTest,targetsTest)","f7d89b07":"trainloader = torch.utils.data.DataLoader(trainset, batch_size = 64, shuffle = False)\ntestloader = torch.utils.data.DataLoader(testset, batch_size = 64, shuffle = False)","1f4cf07a":"import matplotlib.pyplot as plt","4e536ce2":"# visualize one of the images in data set\nplt.imshow(features_numpy[10].reshape(28,28))\nplt.axis(\"off\")\nplt.title(str(targets_numpy[10]))\nplt.savefig('graph.png')\nplt.show()","b4b30942":"from torch import nn, optim \nimport torch.nn.functional as F","da27e0a5":"#creating our classifier\nclass classifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1=nn.Linear(784, 256)\n        self.fc2=nn.Linear(256,128)\n        self.fc3=nn.Linear(128,10)\n        self.dropout = nn.Dropout(p=0.2)\n    def forward (self,x):\n        x=self.dropout(F.relu(self.fc1(x)))\n        x=self.dropout(F.relu(self.fc2(x)))\n        x=F.log_softmax(self.fc3(x),dim=1)\n        return x\n    ","c3731fcc":"model=classifier()\ncriterion=nn.NLLLoss()\noptimizer=optim.Adam(model.parameters(),lr=0.004)","b639637b":"train_on_gpu=torch.cuda.is_available()\nif train_on_gpu:\n    model.cuda()","8eeabb94":"epochs=15\ntrain_losses, test_losses = [], []\nfor e in range(epochs):\n    running_loss = 0\n    for images, labels in trainloader:\n        if train_on_gpu:\n            images,labels=images.cuda(),labels.cuda()\n        \n        optimizer.zero_grad()\n        \n        log_ps = model(images)\n        loss = criterion(log_ps, labels)\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n        \n    else:\n        test_loss = 0\n        accuracy = 0\n        \n        # Turn off gradients for validation, saves memory and computations\n        with torch.no_grad():\n            model.eval()\n            for images, labels in testloader:\n                if train_on_gpu:\n                    images,labels=images.cuda(),labels.cuda()\n                log_ps = model(images)\n                test_loss += criterion(log_ps, labels)\n                \n                ps = torch.exp(log_ps)\n                top_p, top_class = ps.topk(1, dim=1)\n                equals = top_class == labels.view(*top_class.shape)\n                accuracy += torch.mean(equals.type(torch.FloatTensor))\n        \n        model.train()\n        \n        train_losses.append(running_loss\/len(trainloader))\n        test_losses.append(test_loss\/len(testloader))\n\n        print(\"Epoch: {}\/{}.. \".format(e+1, epochs),\n              \"Training Loss: {:.3f}.. \".format(train_losses[-1]),\n              \"Test Loss: {:.3f}.. \".format(test_losses[-1]),\n              \"Test Accuracy: {:.3f}\".format(accuracy\/len(testloader)))","4c77361e":"%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nimport matplotlib.pyplot as plt","695b0222":"plt.plot(train_losses, label='Training loss')\nplt.plot(test_losses, label='Validation loss')\nplt.legend(frameon=False)","f5513091":"testdata=pd.read_csv('..\/input\/test.csv',dtype=np.float32)","393700ce":"testdata.head()","e41fc5be":"ssubmission=pd.read_csv('..\/input\/sample_submission.csv',)","319f2120":"ssubmission.head() # Checking out how the submission has to be made","4c2b424d":"testfeatues = testdata.loc[:].values\/255 # normalization","284eb71c":"testfeatures = torch.from_numpy(testfeatues)","ac362120":"print(testfeatures.shape)","c36f8504":"testlabels=torch.ones_like(testfeatures)# Creating a dummy label list so that we can make a dataset","ba1f3879":"print(testlabels.shape)","f62205a5":"testset = torch.utils.data.TensorDataset(testfeatures,testlabels)","8fc65948":"testloader = torch.utils.data.DataLoader(testset, batch_size = 64, shuffle = False)","cc0e6fcb":"ImageId=[]\nLabel=[]\nmodel.eval()\ncount=-1\nfor images,labels in (testloader):\n    count+=1\n    if train_on_gpu:\n        images=images.cuda()\n    log_ps = model(images)\n    ps = torch.exp(log_ps)\n    top_p, top_class = ps.topk(1, dim=1)\n    i=0\n    for i in range(64):\n        try:#our dataset is not exactly divisible by 64 so it will go out of bound at some point\n            Label.append(top_class[i].item())#Storing label\n            ImageId.append(count*64+i+1)#atoring respective ImageId\n        except Exception:\n            print(i)","c6beb1b7":"print((Label[:50]))","05c00cd6":"print(ImageId[:50])","2d7ebc61":"submission={\n    'ImageId':ImageId,\n    'Label':Label\n}","c906f6cc":"df = pd.DataFrame(submission)","70855903":"df.head()","bfccaa21":"df.to_csv('submission.csv',index=False)","ea704de7":"dataa=pd.read_csv('submission.csv')","61e90643":"dataa.head()","216a596c":"#### Now that our model is trained we will use it on test.csv and store the output we get from it in submission.csv which can be submitted on kaggle","fb0e1d63":"#### We will be now checking our first 50 labels and ImageId. Labels should contain number from 0 to 9 and ImageId ahould be in increasing order staring from 1 all the way to 50","126faa29":"### Dividing data into training and testing","532dc3a3":"### To download your submission csv check this link out https:\/\/www.kaggle.com\/getting-started\/60617"}}