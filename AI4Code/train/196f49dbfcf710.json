{"cell_type":{"9d9f91c7":"code","ec317ec3":"code","8b513bda":"code","6440a7ad":"code","318dde21":"code","fffb86c4":"code","d2e5affd":"code","3b20462a":"code","b5cbe29e":"code","197d0cee":"code","22acd61b":"code","fe6b5f60":"code","9993399b":"code","8bb166a8":"code","da91df34":"code","e5b953a2":"code","d619f0ec":"code","f7e45cc0":"code","831f9f59":"code","a24d309f":"code","0c64d69a":"code","1ac7793b":"code","c0067455":"code","1d4670d2":"code","5b3b2674":"code","d6b384ff":"code","08023a7b":"markdown","52622a05":"markdown","f9dd23ca":"markdown","2aa6ae0e":"markdown","5239d3df":"markdown","f4944503":"markdown","be2faa44":"markdown","d035f88c":"markdown","0e9dc4b4":"markdown","d14af390":"markdown","8ca506f9":"markdown","3d3187ed":"markdown","8b771ea0":"markdown","592bc280":"markdown","a1f01950":"markdown","292ea710":"markdown","6096dcb7":"markdown","a8514c6a":"markdown","9449ac1c":"markdown","e06a4702":"markdown","11c4266c":"markdown","0c3d1472":"markdown","058ddc1a":"markdown","ad0fb436":"markdown","3578dd68":"markdown"},"source":{"9d9f91c7":"!pip install jovian --upgrade -q","ec317ec3":"import jovian","8b513bda":"jovian.commit(project='numpy-array-operations')","6440a7ad":"import numpy as np","318dde21":"# List of functions explained \nfunction1 = np.sort\nfunction2 = np.argsort\nfunction3 = np.sort_complex\nfunction4 = np.lexsort\nfunction5 = np.partition","fffb86c4":"# Example 1 - working (change this)\narr1 = [[15, 18], \n        [30, 21]]\nsorted_arr = np.sort(arr1, axis = 0)\nprint(sorted_arr)","d2e5affd":"# Example 2 - working\narr1 = [[15, 18], \n        [30, 21]]\nsorted_arr = np.sort(arr1, axis = None)\nprint(sorted_arr)","3b20462a":"# Example 3 - breaking (to illustrate when it breaks)\narr1 = [[15, 18], \n        [30, 21]]\n\nsorted_arr = np.sort(arr1, axis = 3)\nprint(sorted_arr)","b5cbe29e":"jovian.commit()","197d0cee":"# Example 1 - working\narr = np.array([ 2, 0,  1, 5, 4, 2, 9])\nargsorted_arr = np.argsort(arr, axis = 0)\n\nprint(argsorted_arr)","22acd61b":"# Example 2 - working\narr = np.array([[ 2, 0, 1], [ 5, 4, 3]])\nargsorted_arr = np.argsort(arr, kind = 'mergesort', axis = 1)\n\nprint(argsorted_arr)","fe6b5f60":"# Example 3 - breaking (to illustrate when it breaks)\narr = np.array([ 2, 0,  1, 5, 4, 2, 9])\nargsorted_arr = np.argsort(arr, order = '1')\n\nprint(argsorted_arr)","9993399b":"jovian.commit()","8bb166a8":"# Example 1 - working\narr1 = [9,8,1,2,4,4] \narr2 = [4,1,0,4,2,1] \nlexsorted_arr = np.lexsort((arr2, arr1))\n\nprint(lexsorted_arr)","da91df34":"# Example 2 - working\nsurnames =    ('Thanvi',    'Mathur', 'Jain')\nfirstnames = ('Anirudhi', 'Animesh', 'Sneha')\nlexsorted_arr = np.lexsort((firstnames, surnames))\n\nprint(lexsorted_arr)","e5b953a2":"# Example 3 - breaking (to illustrate when it breaks)\narr1 = [9,8,1,4] \narr2 = [4,2,1] \nlexsorted_arr = np.lexsort((arr2, arr1))\n\nprint(lexsorted_arr)","d619f0ec":"jovian.commit()","f7e45cc0":"# Example 1 - working\narr = np.array([9,6,1,0,4])\ncomplexsort_arr = np.sort_complex(arr)\n\nprint(complexsort_arr)","831f9f59":"# Example 2 - working\narr = np.array([3 + 4j, 5 - 1j, 9 - 3j, 2 - 2j, 1 + 3j])\ncomplexsort_arr = np.sort_complex(arr)\n\nprint(complexsort_arr)","a24d309f":"# Example 3 - breaking (to illustrate when it breaks)\narr = np.array([[3 + 4j, 5 - 1j],[ 9 - 3j, 2 - 2j, 1 + 3j]])\ncomplexsort_arr = np.sort_complex(arr)\n\nprint(complexsort_arr)","0c64d69a":"jovian.commit()","1ac7793b":"# Example 1 - working\narr = np.array([4, 5, 3, 4, 2, 6, 1,])\npartitioned_arr = np.partition(arr, 4)\n\nprint(partitioned_arr)","c0067455":"# Example 2 - working\narr = np.array([ 2, 0, 1, 5, 4, 9, 3]) \npartitioned_arr = np.partition(arr, (0, 3)) \n\nprint(partitioned_arr)","1d4670d2":"# Example 3 - breaking (to illustrate when it breaks)\narr = np.array([ 2, 0, 1, 5, 4, 9, 3]) \npartitioned_arr = np.partition(arr) \n\nprint(partitioned_arr)","5b3b2674":"jovian.commit()","d6b384ff":"jovian.commit()","08023a7b":"## Function 3 - np.lexsort\n\nIt perform indirect stable sort using list of keys. The first key is sorted, then the second, and so on through the list of keys.","52622a05":"## Function 1 - np.sort \n\nThis function runs the sorted copy of error.","f9dd23ca":"## Reference Links\n* Numpy official tutorial : https:\/\/numpy.org\/doc\/stable\/user\/quickstart.html\n* Python Numpy GeeksforGeeks : https:\/\/www.geeksforgeeks.org\/python-numpy\/\n* W3Schools : https:\/\/www.w3schools.com\/python\/numpy_intro.asp","2aa6ae0e":"The error gives out of bound for array means. Index 3 is not available in array. So we need to give the axis between 0 to 1.","5239d3df":"Sorts the array only for the axis 0. That is 0th index array.","f4944503":"returns the indices of the sorted array","be2faa44":"This will sort first by the surname and then names","d035f88c":"It is mandatory to give the Kth element then it will sort accordingly","0e9dc4b4":"## Function 2 - np.argsort\n\nPerform an indirect sort along the given axis using the algorithm specified by the kind keyword. It returns the indicies of the sorted array","d14af390":"Let's begin by importing Numpy and listing out the functions covered in this notebook.","8ca506f9":"Sorts the real part and returns the complex number.","3d3187ed":"## Conclusion\nThis notebook covers how sorting can be fun and made easy with the help of numpy library.","8b771ea0":"Some closing comments about when to use this function.","592bc280":"Order cannot be used here as it is used when string is available in the list. A single field can be specified as a string.","a1f01950":"Sorts first the real part and then the imaginery part","292ea710":"This will sort by arr1 and then by arr2 and will return the indices o the sorted array.","6096dcb7":"\n# SORTING MADE EASY @NumPy\n\n\n### Here we will see how numpy uses different sorting techquines to sort an array\n\nNumpy is a python library used for working with arrays. It is a library that is partially developed in python and rest prt written in python which makes numpy fast computation. It is 50x times fast then traditional python. We will be introducing 5 Sorting algrithms. A Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements.\n\n- numpy.sort()\n- numpy.lexsort()\n- numpy.argsort()\n- numpy.sort_complex()\n- numpy.partition()\n","a8514c6a":"## Function 5 - np.partition\n\nCreates a copy of the array with its elements rearranged in such a way that the value of the element in k-th position is in the position it would be in a sorted array. Returns a partitioned copy of array.","9449ac1c":"Shape of the array must be same for this kind of sorting.","e06a4702":"It sorts the array through merge sort and returns the indices of the sorted array","11c4266c":"Explanation about example","0c3d1472":"Rearranged in such a way that the value of the element in k-th position (4)is in the position it would be in a sorted array. All elements smaller than the k-th element(4) are moved before this element and all equal or greater are moved behind it. ","058ddc1a":"## Function 4 - sort_complex\n\nSorting in complex number as sorting real part first and then imaginery part","ad0fb436":"Sorts the full array.","3578dd68":"Doesnot compare in 2d array it throws error."}}