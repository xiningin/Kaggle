{"cell_type":{"d3b2b889":"code","f5e5984a":"code","3ee144bf":"code","b219e92b":"code","38260b8a":"code","cda53e22":"code","9a6bc223":"code","37759674":"code","ffdafdef":"code","5f827186":"code","15a9543f":"code","fc3b6798":"code","a56c6e36":"code","bcb0ad8d":"code","fcfe28da":"code","906b84a2":"code","f737599e":"code","04f8d886":"markdown","fb0803d0":"markdown","aa51b4eb":"markdown","9ed43d4b":"markdown","2b923a86":"markdown","afe5dcd6":"markdown","d671b19a":"markdown","83216869":"markdown","b66a6860":"markdown","20bbddea":"markdown"},"source":{"d3b2b889":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom scipy.stats import hmean","f5e5984a":"N_SAMPLES = 100000\nN_TEST = 1000\nMAX_TIMESTEPS = 9\nMASK_VALUE = -1\n\ntrain_X = np.random.uniform(size=(N_SAMPLES, MAX_TIMESTEPS, 1))\ntrain_L = np.random.randint(4, MAX_TIMESTEPS, N_SAMPLES)\n\ntest_X = np.random.uniform(size=(N_TEST, MAX_TIMESTEPS, 1))\ntest_L = np.random.randint(4, MAX_TIMESTEPS, N_TEST)","3ee144bf":"for i in range(N_SAMPLES):\n    train_X[i, train_L[i]:] = MASK_VALUE","b219e92b":"for i in range(N_TEST):\n    test_X[i, test_L[i]:] = MASK_VALUE","38260b8a":"train_y = np.ma.masked_array(train_X, train_X==MASK_VALUE).std(axis=1).data\ntest_y = np.ma.masked_array(test_X, test_X==MASK_VALUE).std(axis=1).data","cda53e22":"input_ = tf.keras.Input(shape=(None, 1))\nmasked = tf.keras.layers.Masking(MASK_VALUE)(input_)\nlstm1 = tf.keras.layers.LSTM(32, return_sequences=True)(masked)\nlstm2 = tf.keras.layers.LSTM(32)(lstm1)\noutput = tf.keras.layers.Dense(1)(lstm2)\n\nmodel = tf.keras.Model(inputs=input_, outputs=output)\nmodel.summary()","9a6bc223":"model.compile('adam', 'mse')","37759674":"hist = model.fit(train_X, train_y, epochs=3)","ffdafdef":"prediction = model.predict(test_X)","5f827186":"prediction[:5]","15a9543f":"test_y[:5]","fc3b6798":"mse = model.evaluate(train_X,train_y)","a56c6e36":"Harmonic_ = hmean(train_y,axis = 0)","bcb0ad8d":"# Value of Harmonic\nHarmonic_","fcfe28da":"# Value of Mean Squared Error\nmse","906b84a2":"# Value of Mean absolute error\nmean_absolute_error(test_y, prediction)","f737599e":"# Value of Decile\nnp.percentile(train_X,10)","04f8d886":"N = JAURIGUE (8)\n","fb0803d0":"### Train the model for 3 epochs","aa51b4eb":"### Define the connections of the nodes in the network and verify the model\n\nThe ```Masking``` layer removes the numbers whose values are equal to -1. This allows us to tell the network that the data lengths are different.\n\nThe ```return_sequence``` flag defines if the LSTM should return only the last or the full sequence","9ed43d4b":"S = (8 % 5) + 1 \n    = 3 + 1\n    = 4","2b923a86":"### Import all the needed modules","afe5dcd6":"S+5 = 9","d671b19a":"### Compile the model by providing the optimization algorithm and the loss function","83216869":"### Generate random values and calculate the label using the toy problem\n\nThe model shold be able to learn how to calculate the standard deviation of a sequence\n\nTo define data with different lengths, we set the unused parts of the data as -1.","b66a6860":"# Recurrent Network\n\nThis notebook shows how to create a recurrent network","20bbddea":"### View the predictions on the test set"}}