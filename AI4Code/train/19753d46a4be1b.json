{"cell_type":{"4c00b23b":"code","7f74f061":"code","ff9cbc42":"code","c1a684f6":"code","ef7831ed":"code","6fdd03df":"code","7a459d1a":"code","4a8544f8":"code","e30e723b":"code","8553b4a3":"code","1fe23c57":"code","2bd70193":"code","debc7aee":"code","189a4617":"code","bef553bf":"code","9f00fb70":"code","52a83b4d":"code","baaed22b":"code","e00cb65c":"code","dbf34d91":"code","67f031c1":"code","1248d6fd":"code","ffb8570a":"code","e89bc1d2":"code","b107afc0":"code","c0f7cb42":"code","6e26ac15":"code","7edb4de9":"code","411d1db3":"code","ef32882a":"code","402834cd":"code","17e50c34":"code","2dfef9e3":"code","de30f5ab":"code","7935694e":"code","bba0bfba":"markdown","c0eee35c":"markdown","f9eb40fc":"markdown","5b137005":"markdown","d2bebe2a":"markdown","da32051e":"markdown","4d5c06b0":"markdown","dc44f35b":"markdown"},"source":{"4c00b23b":"# Import the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nfrom sklearn.model_selection import cross_val_score, cross_val_predict, GridSearchCV, KFold, train_test_split \nfrom sklearn.metrics import roc_auc_score, accuracy_score, roc_curve \nfrom sklearn.metrics import confusion_matrix, classification_report","7f74f061":"# plots' parameters with seaborn\nsns.set_style(\"whitegrid\")\nsns.set_context(\"notebook\", font_scale = 1, rc = {\"lines.linewidth\": 2, 'font_family': [u'times']})","ff9cbc42":"# Load our dataset\ndf = pd.read_csv(\"..\/input\/game-of-thrones\/character-predictions.csv\")","c1a684f6":"df.head()","ef7831ed":"# Check for NANs values\nnans = df.isna().sum()\nnans","6fdd03df":"# Mean age\nprint(df[\"age\"].mean())","7a459d1a":"# Check which characters have a negative age and it's value.\nprint(df[\"name\"][df[\"age\"] < 0])\nprint(df['age'][df['age'] < 0])","4a8544f8":"#According to https:\/\/gameofthrones.fandom.com\/wiki\/Doreah Doreah is actually around 25\n#and \n#accoding to https:\/\/gameofthrones.fandom.com\/wiki\/Rhaego Rhaego was never even born so;\n# Replace negative ages\ndf.loc[1684, \"age\"] = 25.0\ndf.loc[1868, \"age\"] = 0.0","e30e723b":"# Mean is correct now\nprint(df[\"age\"].mean())","8553b4a3":"# Fill the nans we can\ndf[\"age\"].fillna(df[\"age\"].mean(), inplace=True)\ndf.fillna(\"\", inplace=True)","1fe23c57":"nans = df.isna().sum()\nnans","2bd70193":"sns.violinplot(\"isPopular\", \"isNoble\", hue=\"isAlive\", data=df ,split=True).set_title('Noble and Popular vs Mortality')\n","debc7aee":"sns.violinplot(\"isPopular\", \"isMarried\", hue=\"isAlive\", data=df ,split=True).set_title('Married and Popular vs Mortality')\n","189a4617":"sns.violinplot(\"isPopular\", \"book1\", hue=\"isAlive\", data=df ,split=True).set_title('Book_1 and Popular vs Mortality')","bef553bf":"# Get all of the culture values in our dataset\nset(df['culture'])","9f00fb70":"# Lots of different names for one culture so lets group them up\ncult = {\n    'Summer Islands': ['summer islands', 'summer islander', 'summer isles'],\n    'Ghiscari': ['ghiscari', 'ghiscaricari',  'ghis'],\n    'Asshai': [\"asshai'i\", 'asshai'],\n    'Lysene': ['lysene', 'lyseni'],\n    'Andal': ['andal', 'andals'],\n    'Braavosi': ['braavosi', 'braavos'],\n    'Dornish': ['dornishmen', 'dorne', 'dornish'],\n    'Myrish': ['myr', 'myrish', 'myrmen'],\n    'Westermen': ['westermen', 'westerman', 'westerlands'],\n    'Westerosi': ['westeros', 'westerosi'],\n    'Stormlander': ['stormlands', 'stormlander'],\n    'Norvoshi': ['norvos', 'norvoshi'],\n    'Northmen': ['the north', 'northmen'],\n    'Free Folk': ['wildling', 'first men', 'free folk'],\n    'Qartheen': ['qartheen', 'qarth'],\n    'Reach': ['the reach', 'reach', 'reachmen'],\n    'Ironborn': ['ironborn', 'ironmen'],\n    'Mereen': ['meereen', 'meereenese'],\n    'RiverLands': ['riverlands', 'rivermen'],\n    'Vale': ['vale', 'valemen', 'vale mountain clans']\n}\n\ndef get_cult(value):\n    value = value.lower()\n    v = [k for (k, v) in cult.items() if value in v]\n    return v[0] if len(v) > 0 else value.title()\ndf.loc[:, \"culture\"] = [get_cult(x) for x in df[\"culture\"]]\n","52a83b4d":"#how does culter affect survival\ndf.loc[:, \"culture\"] = [get_cult(x) for x in df.culture.fillna(\"\")]\ndata = df.groupby([\"culture\", \"isAlive\"]).count()[\"S.No\"].unstack().copy(deep = True)\ndata.loc[:, \"total\"]= data.sum(axis = 1)\np = data[data.index != \"\"].sort_values(\"total\")[[0, 1]].plot.barh(stacked = True, rot = 0, figsize = (14, 12),)\n_ = p.set(xlabel = \"No. of Characters\", ylabel = \"Culture\"), p.legend([\"Dead\", \"Alive\"], loc = \"lower right\")","baaed22b":"#saving a copy of the dataset just in case\ndf2 = df.copy(deep=True)","e00cb65c":"df","dbf34d91":"#droping columns that are not useful\ndrop = [\"S.No\", \"plod\", \"title\", \"dateOfBirth\", \"DateoFdeath\", \"mother\", \"father\", \"heir\", \"house\", \n        \"spouse\", \"book2\", \"book3\", \"book4\", \"book5\", \"isAliveMother\", \"isAliveFather\",\"isAliveHeir\",\n        \"isAliveSpouse\", \"popularity\", \"name\"]\ndf = df.drop(drop, axis=1)","67f031c1":"#turning categorical variables into one-hot encoded variables\ndf = pd.get_dummies(df)","1248d6fd":"#creating response and explanatory variables \ny=df.isAlive #response\nX=df.drop('isAlive', axis=1)","ffb8570a":"#making logit\nlr = LogisticRegression()","e89bc1d2":"lr.fit(X,y)","b107afc0":"lr.predict(X)","c0f7cb42":"#model's score is pretty good\nlr.score(X,y)","6e26ac15":"#finding arya's index number\ndf2[df2[\"name\"]==\"Arya Stark\"].index","7edb4de9":"X.iloc[1466]","411d1db3":"#finding survival rate which is 0.557\nlr.predict_proba([X.iloc[1466]])","ef32882a":"lr.predict([X.iloc[1466]])","402834cd":"from statsmodels.stats.outliers_influence import variance_inflation_factor","17e50c34":"vif = pd.DataFrame()","2dfef9e3":"vif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]","de30f5ab":"vif[\"features\"] = X.columns","7935694e":"vif","bba0bfba":"The dataset contains data for 1946 characters. It indicates whether the character has died or not, and a number of variables, including the gender, nobility, etc. data for the character.\nData was not clean, so I had to do some changes. There were total 22108 NAs. It is always better to change the NA values that can be changed. Sometimes using a mean value for this, might work. When I looked at the age column, I saw something strange. \n","c0eee35c":"According to my first model, Arya's chances of living is 99%. \nI looked at the multicollinearity by looking vifs.\n","f9eb40fc":"According to the violin plots:\n\u2022\tNoble and popular characters are most likely to be alive,\n\u2022\tPopular characters that appearing in book1 most likely to be dead\n\u2022\tNot popular characters that appearing in book1 most likely to be dead\n\u2022\tSingle and not popular characters are most likely to be alive\n\u2022\tSingle and popular characters are most probably dead\nSo, if you are a popular, married and noble character in the Game of Thrones Universe, you are most likely to be alive. Also, you have to appear in the book1. \n\tThe data preparation process is not over yet. When we look at the culture column, we see that there are different spelling types for the same culture group. For instance, Westermen takes 3 different values; westermen, westerman, westerlands. These name errors have been corrected. \nAfter correcting these values, I wanted to find out the relationship between culture and survival.\n","5b137005":"There are many ways to deal with NAN values. If there are few NAN values, it may be healthier to remove those values from the data and continue the analysis. However, there were too many NAN values in the data set we worked on. Filling the values that can be filled would be better in this case. \nI researched the characters an what I found was; according to https:\/\/gameofthrones.fandom.com\/wiki\/Doreah,  Doreah is actually around 25 and according to https:\/\/gameofthrones.fandom.com\/wiki\/Rhaego,  Rhaego was never even born. I replaced the negative ages so that mean was fixed. However, there were still nulls in the data. I replaced them with mean. Other null values in the data was replaced with empty string. As a result of these processes, there are no NAs in the data.  \nBy making exploratory data analysis, I will decide the variables I will put in my model.\nViolin plots are almost the same as box plots. But they also show the probability density of the data at different values. Box plots show mean, median and interquartile ranges, the violin plots show the full distribution of the data.  \n","d2bebe2a":"Therefore, for my model, I omitted several variables that were not required to estimate the character's survival rate. For example; S.No, plod, title, dateOfBirth, DateoFdeath, mother, father, heir,house, spouse, book2, book3, book4, book5, isAliveMother, isAliveFather, isAliveHeir, isAliveSpouse, popularity and name. I also removed the isAlive variable from the data so that I can use it for the response variable. \n\tWhen I put the remaining variables into the model, the score of the model came to 0.776 which is pretty good actually. So, I made sure that I could put the character I wanted to guess into the model. I wanted to estimate the living rate of Arya Stark. While watching the series, my favorite character was already Arya Stark and I knew that she lived at the end of the series.\n","da32051e":"Arya had the chance to live 0.992 by using the important variables I found by doing EDA. And my model has no multicollinearity problem. ","4d5c06b0":"Mean age was a **negative** value. So, I had to fix it.  As you can see in the Figure 2 below, there were characters that have negative age. They were affecting the mean value. ","dc44f35b":"We can see that Northmen and Ironborn are more than many in number. There is no death in Summer Islands and Crannogmen etc.\n"}}