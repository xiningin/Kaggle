{"cell_type":{"2de04b52":"code","823e3f87":"code","bad2d6bd":"code","8f0a939e":"code","9f63e0cf":"code","24e6ad6c":"code","2c764e34":"code","90171c09":"code","75301d92":"code","0b72a1a4":"code","406ddc1c":"code","8a3412de":"code","e4ca38a0":"code","eb74e435":"code","119ce741":"code","15d2bc83":"code","e709af8e":"code","7f873ef6":"code","6439c7e8":"code","867ed253":"code","b91ca074":"code","cc9c7b5c":"code","ab813369":"code","172efba7":"code","a8c2fb61":"code","1a728859":"code","019ca915":"code","53785148":"code","dbb7eb74":"code","87548c8a":"code","956aae26":"code","07166221":"code","06b92949":"code","d8e094d8":"code","f332d56c":"code","e94b7910":"code","98176201":"code","35afcd56":"code","c092d095":"code","0d7c939e":"code","2bdf661a":"code","1271e04a":"code","01f3bc20":"code","3c14381c":"code","75bca984":"code","a8fd2911":"code","4a318517":"code","fbb91134":"code","9eb17a95":"code","ccd81dbd":"code","699e568a":"code","a48f18e2":"code","f37a0f5f":"code","d6c1e325":"code","8331e0cc":"code","2b3b8be7":"code","ed820223":"code","ae053853":"code","d0eba6f5":"code","c0973bc8":"code","9578e976":"code","d686ff61":"code","b29aadfa":"code","09292a5f":"code","6f5c9726":"code","28cfe563":"markdown","ef7b1161":"markdown","4166c9fc":"markdown","5186f7cc":"markdown","55f29838":"markdown","4961546a":"markdown","3adad7e2":"markdown","3209c9e1":"markdown","c8bcd3a7":"markdown","fecfb3a0":"markdown","b1cbf867":"markdown","6b5e2a11":"markdown","61891eb4":"markdown","fc1914c1":"markdown","60dff823":"markdown","962e7b08":"markdown","170e0f40":"markdown","108591d8":"markdown","c0b53bbb":"markdown","42cd72b6":"markdown","9370a98a":"markdown","80d5244e":"markdown","d12d88e3":"markdown","7e1a5662":"markdown","c2917d7b":"markdown","0236a8fd":"markdown","b690b253":"markdown","42f950d0":"markdown","3a059901":"markdown","8a8384b4":"markdown","04802ca4":"markdown","3a5fe5fe":"markdown","7b4081a3":"markdown","6ceb6882":"markdown","5a732afe":"markdown","ffa72a88":"markdown","5edcaac2":"markdown","dac353d3":"markdown","2e29d097":"markdown","df57be28":"markdown","f625e65a":"markdown","05cd9962":"markdown","e093ef53":"markdown","b0a52fd1":"markdown","84d9d9c5":"markdown","ce80a2a0":"markdown","d2d092a4":"markdown","8367cb18":"markdown","a19d55c7":"markdown","ed66c893":"markdown","3f6b608c":"markdown","975825e4":"markdown","47410b34":"markdown","075c879a":"markdown","63cf4dca":"markdown","f43e81d9":"markdown","fd8cd9fc":"markdown","794d13f8":"markdown","2774e201":"markdown","867eb8c3":"markdown","3f8d84d4":"markdown","1b20e7e8":"markdown","4c6a904c":"markdown","4ecd27cb":"markdown","c59e9432":"markdown","ac24eeb9":"markdown","84bc9cbe":"markdown","52dec980":"markdown","6889fbb4":"markdown","55d2052c":"markdown","5e446c65":"markdown","c6a2e8cf":"markdown","ab347ac7":"markdown","f871db74":"markdown","3b31183e":"markdown","2c698e59":"markdown","7d527678":"markdown","63585cba":"markdown","b5f5bee3":"markdown","916e777d":"markdown","f5ab767f":"markdown","4964efb4":"markdown","d264b4f5":"markdown","b69d6b0e":"markdown","f68ce1d9":"markdown","37d8b522":"markdown","b5693b9d":"markdown","63e25b61":"markdown","ea7b16b2":"markdown","6cd1700c":"markdown"},"source":{"2de04b52":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","823e3f87":"#Now let's import and put the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","bad2d6bd":"##display the first five rows of the train dataset.\ntrain.head(5)","8f0a939e":"##display the first five rows of the test dataset.\ntest.head(5)\n","9f63e0cf":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","24e6ad6c":"\nfig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()\n","2c764e34":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n\n#Check the graphic again\nfig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","90171c09":"sns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()","75301d92":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.show()\n","0b72a1a4":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","406ddc1c":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(20)","8a3412de":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","e4ca38a0":"#Correlation map to see how features are correlated with SalePrice\ncorrmat = train.corr()\nplt.subplots(figsize=(12,9))\nsns.heatmap(corrmat, vmax=0.9, square=True)","eb74e435":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","119ce741":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","15d2bc83":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","e709af8e":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","7f873ef6":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","6439c7e8":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","867ed253":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","b91ca074":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","cc9c7b5c":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","ab813369":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","172efba7":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","a8c2fb61":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","1a728859":"all_data = all_data.drop(['Utilities'], axis=1)","019ca915":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","53785148":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])","dbb7eb74":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])","87548c8a":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","956aae26":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","07166221":"\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\n\n","06b92949":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","d8e094d8":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\n","f332d56c":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))\n\n\n","e94b7910":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n","98176201":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)\n","35afcd56":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","c092d095":"\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","0d7c939e":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\n","2bdf661a":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n","1271e04a":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","01f3bc20":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))","3c14381c":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))","75bca984":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)","a8fd2911":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)","4a318517":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\n\n","fbb91134":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)","9eb17a95":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","ccd81dbd":"score = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","699e568a":"score = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","a48f18e2":"score = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","f37a0f5f":"\nscore = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","d6c1e325":"score = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","8331e0cc":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    # we define clones of the original models to fit the data in\n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        \n        # Train cloned base models\n        for model in self.models_:\n            model.fit(X, y)\n\n        return self\n    \n    #Now we do the predictions for cloned models and average them\n    def predict(self, X):\n        predictions = np.column_stack([\n            model.predict(X) for model in self.models_\n        ])\n        return np.mean(predictions, axis=1)   ","2b3b8be7":"averaged_models = AveragingModels(models = (ENet, GBoost, KRR, lasso))\n\nscore = rmsle_cv(averaged_models)\nprint(\" Averaged base models score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","ed820223":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","ae053853":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","d0eba6f5":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","c0973bc8":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","9578e976":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","d686ff61":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","b29aadfa":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.70 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 ))","09292a5f":"ensemble = stacked_pred*0.70 + xgb_pred*0.15 + lgb_pred*0.15","6f5c9726":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","28cfe563":"**XGBoost:**","ef7b1161":"- **MSZoning (The general zoning classification)** :  'RL' is by far  the most common value.  So we can fill in missing values with 'RL'\n","4166c9fc":"In this approach, we add a meta-model on averaged base models and use the out-of-folds predictions of these base models to train our meta-model. \n\nThe procedure, for the training part, may be described as follows:\n\n\n1. Split the total training set into two disjoint sets (here **train** and .**holdout** )\n\n2. Train several base models on the first part (**train**)\n\n3. Test these base models on the second part (**holdout**)\n\n4. Use the predictions from 3)  (called  out-of-folds predictions) as the inputs, and the correct responses (target variable) as the outputs  to train a higher level learner called **meta-model**.\n\nThe first three steps are done iteratively . If we take for example a 5-fold stacking , we first split the training data into 5 folds. Then we will do 5 iterations. In each iteration,  we train every base model on 4 folds and predict on the remaining fold (holdout fold). \n\nSo, we will be sure, after 5 iterations , that the entire data is used to get out-of-folds predictions that we will then use as \nnew feature to train our meta-model in the step 4.\n\nFor the prediction part , We average the predictions of  all base models on the test data  and used them as **meta-features**  on which, the final prediction is done with the meta-model.\n","5186f7cc":"- **PoolQC** : data description says NA means \"No  Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general. ","55f29838":"- **Functional** : data description says NA means typical","4961546a":"- **KitchenQual**: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent)  for the missing value in KitchenQual.\n","3adad7e2":"**Ensemble prediction:**","3209c9e1":"We get again a better score by adding a meta learner","c8bcd3a7":"This competition is very important to me as  it helped me to begin my journey on Kaggle few months ago. I've read  some great notebooks here. To name a few:\n\n1. [Comprehensive data exploration with Python][1] by **Pedro Marcelino**  : Great and very motivational data analysis\n\n2. [A study on Regression applied to the Ames dataset][2] by **Julien Cohen-Solal**  : Thorough features engeneering and deep dive into linear regression analysis  but really easy to follow for beginners.\n\n3. [Regularized Linear Models][3] by **Alexandru Papiu**  : Great Starter kernel on modelling and Cross-validation\n\nI can't recommend enough every beginner to go carefully through these kernels (and of course through many others great kernels) and get their first insights in data science and kaggle competitions.\n\nAfter that (and some basic pratices) you should be more confident to go through [this great script][7] by **Human Analog**  who did an impressive work on features engeneering. \n\nAs the dataset is particularly handy, I  decided few days ago to get back in this competition and apply things I learnt so far, especially stacking models. For that purpose, we build two stacking classes  ( the simplest approach and a less simple one). \n\nAs these classes are written for general purpose, you can easily adapt them and\/or extend them for your regression problems. \nThe overall approach is  hopefully concise and easy to follow.. \n\nThe features engeneering is rather parsimonious (at least compared to some others great scripts) . It is pretty much :\n\n- **Imputing missing values**  by proceeding sequentially through the data\n\n- **Transforming** some numerical variables that seem really categorical\n\n- **Label Encoding** some categorical variables that may contain information in their ordering set\n\n-  [**Box Cox Transformation**][4] of skewed features (instead of log-transformation) : This gave me a **slightly better result** both on leaderboard and cross-validation.\n\n- ** Getting dummy variables** for categorical features. \n\nThen we choose many base models (mostly sklearn based models + sklearn API of  DMLC's [XGBoost][5] and Microsoft's [LightGBM][6]), cross-validate them on the data before stacking\/ensembling them. The key here is to make the (linear) models robust to outliers. This improved the result both on LB and cross-validation. \n\n  [1]: https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n  [2]:https:\/\/www.kaggle.com\/juliencs\/a-study-on-regression-applied-to-the-ames-dataset\n  [3]: https:\/\/www.kaggle.com\/apapiu\/regularized-linear-models\n  [4]: http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n  [5]: https:\/\/github.com\/dmlc\/xgboost\n [6]: https:\/\/github.com\/Microsoft\/LightGBM\n [7]: https:\/\/www.kaggle.com\/humananalog\/xgboost-lasso\n\nTo my surprise, this does well on LB ( 0.11420 and top 4% the last time I tested it : **July 2, 2017** )\n\n","fecfb3a0":"**Data Correlation**\n","b1cbf867":"- **Electrical** : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n","6b5e2a11":"- **Kernel Ridge Regression** :","61891eb4":"**Transforming some numerical variables that are really categorical**","fc1914c1":"We use the **cross_val_score** function of Sklearn. However this function has not a shuffle attribut, we add then one line of code,  in order to shuffle the dataset  prior to cross-validation","60dff823":"We can see at the bottom right two with extremely large GrLivArea that are of a low price. These values are huge oultliers.\nTherefore, we can safely delete them.","962e7b08":"**Averaged base models class**","170e0f40":"- **SaleType** : Fill in again with most frequent which is \"WD\"","108591d8":"- **XGBoost** :","c0b53bbb":"###More features engeneering","42cd72b6":"###Simplest Stacking approach : Averaging base models","9370a98a":"Wow ! It seems even the simplest stacking approach really improve the score . This encourages \nus to go further and explore a less simple stacking approch. ","80d5244e":"let's first  concatenate the train and test data in the same dataframe","d12d88e3":" **Log-transformation of the target variable**","7e1a5662":"We add **XGBoost and LightGBM** to the** StackedRegressor** defined previously. ","c2917d7b":"- **LightGBM** :","0236a8fd":"The skew seems now corrected and the data appears more normally distributed. ","b690b253":"**Getting dummy categorical features**","42f950d0":"**Define a cross validation strategy**","3a059901":"Getting the new train and test sets. ","8a8384b4":"#Stacked Regressions to predict House Prices \n\n\n##Serigne\n\n**July 2017**\n\n**If you use parts of this notebook in your scripts\/notebooks, giving  some kind of credit would be very much appreciated :)  You can for instance link back to this notebook. Thanks!**","04802ca4":"**Submission**","3a5fe5fe":"- **Elastic Net Regression** :\n\nagain made robust to outliers","7b4081a3":"###Less simple Stacking : Adding a Meta-model","6ceb6882":"- **Exterior1st and Exterior2nd** : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\n","5a732afe":"## Ensembling StackedRegressor, XGBoost and LightGBM","ffa72a88":"###Note : \n Outliers removal is note always safe.  We decided to delete these two as they are very huge and  really  bad ( extremely large areas for very low  prices). \n\nThere are probably others outliers in the training data.   However, removing all them  may affect badly our models if ever there were also  outliers  in the test data. That's why , instead of removing them all, we will just manage to make some of our  models robust on them. You can refer to  the modelling part of this notebook for that. ","5edcaac2":"- **MiscFeature** : data description says NA means \"no misc feature\"\n","dac353d3":"#Modelling","2e29d097":"Since area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","df57be28":"**Hope that at the end of this notebook, stacking will be clear for those, like myself, who found the concept not so easy to grasp**","f625e65a":"**Stacking averaged Models Class**","05cd9962":"##Target Variable","e093ef53":"- **Utilities** : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\"  and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling**. We can then safely  remove it.\n","b0a52fd1":"- **MSSubClass** : Na most likely means No building class. We can replace missing values with None\n","84d9d9c5":"- **GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None","ce80a2a0":"![kaz](http:\/\/5047-presscdn.pagely.netdna-cdn.com\/wp-content\/uploads\/2017\/06\/image5.gif)\n\nGif taken from [KazAnova's interview](http:\/\/blog.kaggle.com\/2017\/06\/15\/stacking-made-easy-an-introduction-to-stacknet-by-competitions-grandmaster-marios-michailidis-kazanova\/)","d2d092a4":"**SalePrice** is the variable we need to predict. So let's do some analysis on this variable first.","8367cb18":"###Missing Data","a19d55c7":"On this gif, the base models are algorithms 0, 1, 2 and the meta-model is algorithm 3. The entire training dataset is \nA+B (target variable y known) that we can split into train part (A) and holdout part (B). And the test dataset is C. \n\nB1 (which is the prediction from the holdout part)  is the new feature used to train the meta-model 3 and C1 (which\nis the prediction  from the test dataset) is the meta-feature on which the final prediction is done. ","ed66c893":"- **Gradient Boosting Regression** :\n\nWith **huber**  loss that makes it robust to outliers\n    ","3f6b608c":"![Faron](http:\/\/i.imgur.com\/QBuDOjs.jpg)\n\n(Image taken from [Faron](https:\/\/www.kaggle.com\/getting-started\/18153#post103381))","975825e4":"**Stacking Averaged models Score**","47410b34":"##Base models","075c879a":"The target variable is right skewed.  As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.","63cf4dca":"It remains no missing value.\n","f43e81d9":"###Imputing missing values ","fd8cd9fc":"To make the two approaches comparable (by using the same number of models) , we just average **Enet KRR and Gboost**, then we add **lasso as meta-model**.","794d13f8":"**Averaged base models score**","2774e201":"**If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated -  That will keep me motivated to update it on a regular basis** :-)","867eb8c3":"- **Fence** : data description says NA means \"no fence\"","3f8d84d4":"- **LotFrontage** : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can **fill in missing values by the median LotFrontage of the neighborhood**.","1b20e7e8":"We first define a rmsle evaluation function ","4c6a904c":"- **GarageYrBlt, GarageArea and GarageCars** : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n","4ecd27cb":"We impute them  by proceeding sequentially  through features with missing values ","c59e9432":"**Box Cox Transformation of (highly) skewed features**","ac24eeb9":"Is there any remaining missing value ? ","84bc9cbe":"We just average four models here **ENet, GBoost,  KRR and lasso**.  Of course we could easily add more models in the mix. ","52dec980":"Let's see how these base models perform on the data by evaluating the  cross-validation rmsle error","6889fbb4":"**Adding one more important feature**","55d2052c":"[Documentation][1] for the Ames Housing Data indicates that there are outliers present in the training data\n[1]: http:\/\/ww2.amstat.org\/publications\/jse\/v19n3\/Decock\/DataDocumentation.txt","5e446c65":"- **FireplaceQu** : data description says NA means \"no fireplace\"","c6a2e8cf":"- **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** : For all these categorical basement-related features, NaN means that there is no  basement.\n","ab347ac7":"We begin with this simple approach of averaging base models.  We build a new **class**  to extend scikit-learn with our model and also to laverage encapsulation and code reuse ([inheritance][1]) \n\n\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Inheritance_(object-oriented_programming)","f871db74":"-  **LASSO  Regression**  : \n\nThis model may be very sensitive to outliers. So we need to made it more robust on them. For that we use the sklearn's  **Robustscaler()**  method on pipeline ","3b31183e":"##Features engineering","2c698e59":"###Final Training and Prediction","7d527678":"#Data Processing","63585cba":"- **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** : missing values are likely zero for having no basement","b5f5bee3":"**StackedRegressor:**","916e777d":"**Import librairies**","f5ab767f":"**Skewed features**","4964efb4":"##Outliers","d264b4f5":"- **Alley** : data description says NA means \"no alley access\"","b69d6b0e":"**Label Encoding some categorical variables that may contain information in their ordering set** ","f68ce1d9":"###Base models scores","37d8b522":"- **MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type. \n","b5693b9d":"**LightGBM:**","63e25b61":"Let's explore these outliers\n","ea7b16b2":"##Stacking  models","6cd1700c":"We use the scipy  function boxcox1p which computes the Box-Cox transformation of **\\\\(1 + x\\\\)**. \n\nNote that setting \\\\( \\lambda = 0 \\\\) is equivalent to log1p used above for the target variable.  \n\nSee [this page][1] for more details on Box Cox Transformation as well as [the scipy function's page][2]\n[1]: http:\/\/onlinestatbook.com\/2\/transformations\/box-cox.html\n[2]: https:\/\/docs.scipy.org\/doc\/scipy-0.19.0\/reference\/generated\/scipy.special.boxcox1p.html"}}