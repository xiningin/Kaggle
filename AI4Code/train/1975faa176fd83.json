{"cell_type":{"ea710780":"code","50bd53f0":"code","f42bbc01":"code","6290a5d9":"code","a21ce761":"code","1858d7b7":"code","224e282d":"code","2c50aab2":"code","d8d4e0fe":"code","41811468":"code","91495b0d":"code","42e11c87":"code","a0f82294":"code","30c1dd6d":"code","a56e2453":"code","c1feb523":"code","0b37a34b":"code","d5984bf7":"code","4c28ba9b":"code","ac8abada":"code","d153f988":"code","f7985992":"code","ebc4aef8":"code","26ed7ed7":"code","5b25b89b":"code","5724f6c8":"code","61be2549":"code","3773e116":"code","3ca3ddbc":"code","a344ad63":"code","1c5c2a88":"code","011c4435":"code","ef0266c0":"code","bd35ea31":"code","0e733d2e":"code","c85b9e1e":"code","9a044e8f":"code","00a82a57":"code","fa703d77":"code","021c6690":"code","3653bedd":"code","5021966b":"code","7c6a4cb8":"code","7854381c":"code","495aa600":"code","e67bf513":"code","3ab3825b":"markdown","7552e32e":"markdown","d276ace6":"markdown","7db87411":"markdown","9be05071":"markdown","bbd7f0fc":"markdown","aa2b2ddf":"markdown","eca26bc6":"markdown","1a72214c":"markdown","d4a89e17":"markdown","35ecab14":"markdown","c47c639e":"markdown","2deac55e":"markdown","d1b0b7c6":"markdown","b884516b":"markdown","dc12d702":"markdown","9a129dd9":"markdown","f854643e":"markdown","3d8ff2da":"markdown","0e438e68":"markdown","7fad7805":"markdown","7d014071":"markdown","065d0be7":"markdown","00237970":"markdown","13373407":"markdown","3ce79e72":"markdown","5965444d":"markdown","e7c4dd1c":"markdown","3c7f09f3":"markdown","04353e92":"markdown","10f1c27b":"markdown","f2fbc36b":"markdown","6aa2009c":"markdown"},"source":{"ea710780":"#ignore the warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n#importing the libraries\nimport numpy as np\nimport time\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mp\nimport seaborn as sns\nimport datetime\nimport matplotlib.ticker as tick\nfrom random import randint\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport csv\nimport pylab\nimport mpld3\nfrom ipywidgets import interact\nfrom matplotlib.ticker import EngFormatter\n# you will need to pip install Basemap - https:\/\/matplotlib.org\/basemap\/users\/installing.html\nfrom mpl_toolkits.basemap import Basemap\nfrom geopy.geocoders import Nominatim\nimport folium\n#Plotting the charts with plotly as well\nimport plotly.offline as py\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom plotly import tools\nimport plotly.express as px\n# Set notebook mode to work in offline\npy.init_notebook_mode()\n\n#Using enums for various choices\nimport enum","50bd53f0":"cov19_confirmed_data = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ncov19_deaths_data = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\ncov19_recoveries_data = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\ncov19_country_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/web-data\/data\/cases_country.csv')\n","f42bbc01":"cov19_confirmed_data.head(10)","6290a5d9":"#lets see the shape of cov19_confirmed_data data frame\ncov19_confirmed_data.shape","a21ce761":"# lets explore the data types of the confirmed covid-19 data frame as well\ncov19_confirmed_data.dtypes","1858d7b7":"# Lets rename and clean the data frame\ncov19_country_data.columns = map(str.lower, cov19_country_data.columns)\ncov19_confirmed_data.columns = map(str.lower, cov19_confirmed_data.columns)\ncov19_deaths_data.columns = map(str.lower, cov19_deaths_data.columns)\ncov19_recoveries_data.columns = map(str.lower, cov19_recoveries_data.columns)\n\n# changing province\/state to state and country\/region to country\ncov19_confirmed_data = cov19_confirmed_data.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\ncov19_recoveries_data = cov19_recoveries_data.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\ncov19_deaths_data = cov19_deaths_data.rename(columns={'province\/state': 'state', 'country\/region': 'country'})\ncov19_country_data = cov19_country_data.rename(columns={'country_region': 'country'})\n\n#define some enums, especially in this case exploring plotly and matplotlib\nclass ChartPlotter(enum.Enum):\n    MatPlotLib = 1\n    Plotly = 2\n    ","224e282d":"sorted_cov19_country_data = cov19_country_data.sort_values('confirmed', ascending= False)\nsorted_cov19_country_data","2c50aab2":"# lets show the data of 30 countries\nn = 30\nonlyLimitedData_df = sorted_cov19_country_data.head(n)\n\nfig = go.Figure(data=[go.Table(\n    header = dict(\n    values = list(onlyLimitedData_df.columns),\n    line_color='whitesmoke',\n    fill_color='royalblue',\n    align=['left','center'],\n    font=dict(color='white', size=13),\n    height=30\n  ),\n  cells=dict(\n    values=[onlyLimitedData_df.country,\n            onlyLimitedData_df.last_update,\n            onlyLimitedData_df.people_tested,\n            onlyLimitedData_df.people_hospitalized,\n            onlyLimitedData_df.lat,\n            onlyLimitedData_df.long_,\n            onlyLimitedData_df.confirmed,\n            onlyLimitedData_df.deaths,\n            onlyLimitedData_df.recovered,\n            onlyLimitedData_df.active,\n            onlyLimitedData_df.incident_rate,\n            onlyLimitedData_df.mortality_rate,\n            onlyLimitedData_df.uid,\n            onlyLimitedData_df.iso3],\n      line_color='whitesmoke',\n      fill=dict(color=['royalblue', 'black','black','black','orange','red','green','grey','grey','grey','grey','grey','grey','grey']),\n      align=['left', 'center'],\n      font=dict(color='white', size=13),\n      height=15)\n    )\n])\nfig.show()","d8d4e0fe":"def plot_bubble_chart(n):\n    fig = px.scatter(sorted_cov19_country_data.head(n), x=\"country\", y=\"confirmed\", size=\"confirmed\", \n                     color=\"country\",template=\"plotly_dark\",\n                     hover_name=\"country\", size_max=60)\n    fig.update_layout(\n    title=str(n) +\" Worst hit countries - in terms of confirmed cases\",\n    xaxis_title=\"Countries\",\n    yaxis_title=\"Confirmed Cases\",\n    )\n    fig.show()\n\ninteract(plot_bubble_chart, n=30)","41811468":"# Lets use the bar chart as well to plot the countries worst hit, in terms of fatalities\npx.bar(\n    sorted_cov19_country_data.head(30),\n    x = \"country\",\n    y = \"deaths\",\n    title= \"Top 30 worst affected countries- in terms of deaths\", # the axis names\n    color_discrete_sequence=[\"pink\"], \n    template=\"plotly_dark\",\n    height=500,\n    width=1000\n)","91495b0d":"# # creating world map using Map class\n# world_map = folium.Map(location=[11,0], tiles=\"Stamen Toner\", zoom_start=2, max_zoom = 6, min_zoom = 2)\n# # iterate over all the rows of confirmed_df to get the lat\/long\n# for i in range(0,len(cov19_confirmed_data)):\n#     folium.Circle(\n#         location=[cov19_confirmed_data.iloc[i]['lat'], cov19_confirmed_data.iloc[i]['long']],\n#         fill=True,\n#         radius=(int((np.log(cov19_confirmed_data.iloc[i,-1]+1.00001)))+0.2)*50000,\n#         color='red',\n#         fill_color='lightpink',\n#     ).add_to(world_map)\n    \n# world_map","42e11c87":"cov19_deaths_data.head(10)","a0f82294":"#lets see the shape of cov19_deaths_data data frame\ncov19_deaths_data.shape","30c1dd6d":"# lets explore the data types of the deaths covid-19 data frame as well\ncov19_deaths_data.dtypes","a56e2453":"cov19_recoveries_data.head(10)","c1feb523":"#lets see the shape of cov19_recoveries_data data frame\ncov19_recoveries_data.shape","0b37a34b":"# lets explore the data types of the deaths covid-19 data frame as well\ncov19_recoveries_data.dtypes","d5984bf7":"# Calculate total number of columns in COVID-19 confirmed data set\nno_of_confirmed_data_columns = cov19_confirmed_data.keys()\n\n# Make the subset of cov19_confirmed_data dataframe so that the resulting data frame only includes the dates column\nconfirmed_data_only_dates_column = cov19_confirmed_data.loc[:, no_of_confirmed_data_columns[4]:no_of_confirmed_data_columns[-1]]\n\n# Make the subset of cov19_deaths_data dataframe so that the resulting data frame only includes the dates column\ndeaths_data_only_dates_column = cov19_deaths_data.loc[:, no_of_confirmed_data_columns[4]:no_of_confirmed_data_columns[-1]]\n\n# Make the subset of cov19_recoveries_data dataframe so that the resulting data frame only includes the dates column\nrecovery_data_only_dates_column = cov19_recoveries_data.loc[:, no_of_confirmed_data_columns[4]:no_of_confirmed_data_columns[-1]]","4c28ba9b":"#Lets have look at confirmed_data_only_dates_column dataframe\nconfirmed_data_only_dates_column.head()","ac8abada":"# Lets prepare the data which will later be used for analysis on whole world and the some specific countries mentioned above.\n\ndates = confirmed_data_only_dates_column.keys()\n\n#Confirmed Data : Initialize()\nworld_confirmed_data = []\nchina_confirmed_data = []\niran_confirmed_data = []\nitaly_confirmed_data = []\nspain_confirmed_data = []\nunited_states_confirmed_data = []\nindia_confirmed_data = []\ngermany_confirmed_data = []\nuk_confirmed_data = []\nfrance_confirmed_data = []\n\n# Mortality data : Initialize()\ntotal_number_of_fatalities = []\nfatality_rate = []\nworld_mortality_data = []\nchina_mortality_data = []\niran_mortality_data = []\nitaly_mortality_data = []\nspain_mortality_data = []\nunited_states_mortality_data = []\nindia_mortality_data = []\ngermany_mortality_data = []\nuk_mortality_data = []\nfrance_mortality_data = []\nfor i in dates:\n    # Confirmed cases\n    confirmed_sum = confirmed_data_only_dates_column[i].sum()\n    world_confirmed_data.append(confirmed_sum)\n    china_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='China'][i].sum())\n    iran_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='Iran'][i].sum())\n    italy_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='Italy'][i].sum())\n    spain_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='Spain'][i].sum())\n    united_states_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='US'][i].sum())\n    india_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='India'][i].sum())\n    germany_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='Germany'][i].sum())\n    uk_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='United Kingdom'][i].sum())\n    france_confirmed_data.append(cov19_confirmed_data[cov19_confirmed_data['country']=='France'][i].sum())\n    \n    # fatality Data\n    sum_of_fatalities = deaths_data_only_dates_column[i].sum()\n    total_number_of_fatalities.append(sum_of_fatalities)\n    fatality_rate.append(total_number_of_fatalities\/confirmed_sum)\n    world_mortality_data.append(sum_of_fatalities)\n    china_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='China'][i].sum())\n    iran_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='Iran'][i].sum())\n    italy_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='Italy'][i].sum())\n    spain_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='Spain'][i].sum())\n    united_states_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='US'][i].sum())\n    india_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='India'][i].sum())\n    germany_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='Germany'][i].sum())\n    uk_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='United Kingdom'][i].sum())\n    france_mortality_data.append(cov19_deaths_data[cov19_deaths_data['country']=='France'][i].sum())","d153f988":"# Lets make some dates for simplicity in future\ndays_to_consider_for_future = 10\nmodified_list_future = np.array([i for i in range(len(dates)+days_to_consider_for_future)]).reshape(-1, 1)\nmodified_dates = modified_list_future[:-10]\nmodified_dates = modified_dates.reshape(1, -1)[0]","f7985992":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\ndays_to_consider_for_future = 20\nfuture_forcast = np.array([i for i in range(len(dates)+days_to_consider_for_future)]).reshape(-1, 1)\ntotal_number_of_fatalities = np.array(total_number_of_fatalities).reshape(-1, 1)\nstart = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n    \n# our plots are all having dark background\nplt.style.use('dark_background')\n# also lets increase the width of line plots\nmp.rcParams['lines.linewidth'] = 3","ebc4aef8":"def format_y_axis(tick_val, pos):\n    convert_val = tick_val.astype(np.int64)\n    if convert_val > 1000000:\n        val = int(convert_val)\/\/1000000\n        return '{:d} M'.format(val)\n    elif convert_val > 1000:\n        val = int(convert_val) \/\/ 1000\n        return '{:d} k'.format(val)\n    else:\n        return convert_val","26ed7ed7":"def lighten_color(color, amount=0.5):\n    \"\"\"\n    Lightens the given color by multiplying (1-luminosity) by the given amount.\n    Input can be matplotlib color string, hex string, or RGB tuple.\n\n    Examples:\n    >> lighten_color('g', 0.3)\n    >> lighten_color('#F034A3', 0.6)\n    >> lighten_color((.3,.55,.1), 0.5)\n    \"\"\"\n    import matplotlib.colors as mc\n    import colorsys\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n    c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])","5b25b89b":"def plot_confirmed_cases_data(countryConfirmedDataList,countryNamesList, chartPlotter):\n    numRows = len(countryConfirmedDataList)\n    colors = []\n    for i in range(numRows):\n        colors.append('#%06X' % randint(5, 0xFFFFFF))\n        \n    if(chartPlotter == ChartPlotter.Plotly):\n        fig = make_subplots(rows=numRows, cols=1,subplot_titles = countryNamesList)\n        for j in range(numRows):\n            modified_color = lighten_color(colors[j],1.0)\n            title = \"{}\".format(countryNamesList[j])\n            fig.add_trace(go.Scatter(x=modified_dates,\n                                     y=countryConfirmedDataList[j],\n                                     fillcolor = colors[j],\n                                     name='',\n                                     showlegend=False),row=j+1, col=1)\n            fig.update_xaxes(title_text=\"Days since 1\/22\/2020\",row=j+1, col=1)\n            fig.update_yaxes(title_text=\"Confirmed Cases\",row=j+1, col=1)\n            fig.update_layout(template=\"plotly_dark\",height=1500, width=800, title_text=\"\",font=dict(\n                family=\"Courier New, monospace\",\n                size=10\n            ))\n        fig.show()\n    else:\n        fig, axs = plt.subplots(numRows,figsize=(8,22))\n        fig.subplots_adjust(hspace = 1.0)\n        plot=0\n        for j in range(numRows):\n            modified_color = lighten_color(colors[j],1.0)\n            axs[plot].plot(modified_dates, countryConfirmedDataList[j],color = modified_color)\n            formatter1 = EngFormatter(places=1, sep=\"\\N{THIN SPACE}\")\n            axs[plot].yaxis.set_major_formatter(formatter1)\n            title = \"{}\".format(countryNamesList[j])\n            axs[plot].set_title(title)\n            axs[plot].grid()\n            plot=plot+1\n            \n        for ax in axs.flat:\n            ax.set(xlabel='Days since 1\/22\/2020', ylabel='Confirmed Cases')\n            \n        # Hide x labels and tick labels for top plots and y ticks for right plots.\n        #for ax in axs.flat:\n        #    ax.label_outer()\n        plt.tight_layout()\n        plt.show()\n        ","5724f6c8":"def plot_daily_increase_confirmed_cases_data(countryConfirmedDataList,countryNamesList):\n    numRows = len(countryConfirmedDataList)\n    colors = []\n    \n    for i in range(numRows):\n        colors.append('#%06X' % randint(0, 0xFFFFFF))\n    \n    fig, axs = plt.subplots(numRows, figsize=(8,22))\n    fig.subplots_adjust(hspace = 1.0)\n    plot=0\n    for j in range(numRows): \n        axs[plot].bar(modified_dates,countryConfirmedDataList[j],color=colors[j])\n        formatter1 = EngFormatter(places=1, sep=\"\\N{THIN SPACE}\")\n        axs[plot].yaxis.set_major_formatter(formatter1)\n        title = \"{}\".format(countryNamesList[j])\n        axs[plot].set_title(title)\n        plot=plot+1\n\n    for ax in axs.flat:\n        ax.set(xlabel='Days since 1\/22\/2020', ylabel='Confirmed Cases')\n        \n    # Hide x labels and tick labels for top plots and y ticks for right plots.\n    #for ax in axs.flat:\n    #    ax.label_outer()\n        \n    plt.tight_layout()\n    plt.show()","61be2549":"def confirmed_cases_daily_increase(confirmedCasesData):\n    arr = [] \n    for i in range(len(confirmedCasesData)):\n        if i == 0:\n            arr.append(confirmedCasesData[0])\n        else:\n            arr.append(confirmedCasesData[i]-confirmedCasesData[i-1])\n    return arr \n\nworld_daily_increase_data = confirmed_cases_daily_increase(world_confirmed_data)\nchina_daily_increase_data = confirmed_cases_daily_increase(china_confirmed_data)\niran_daily_increase_data = confirmed_cases_daily_increase(iran_confirmed_data)\nitaly_daily_increase_data = confirmed_cases_daily_increase(italy_confirmed_data)\nspain_daily_increase_data = confirmed_cases_daily_increase(spain_confirmed_data)\nunited_states_daily_increase_data = confirmed_cases_daily_increase(united_states_confirmed_data)\nindia_daily_increase_data = confirmed_cases_daily_increase(india_confirmed_data)\ngermany_daily_increase_data = confirmed_cases_daily_increase(germany_confirmed_data)\nuk_daily_increase_data = confirmed_cases_daily_increase(uk_confirmed_data)\nfrance_daily_increase_data = confirmed_cases_daily_increase(france_confirmed_data)","3773e116":"def plot_forecast_basedon_confirmed_cases_data(countryConfirmedDataList,countryName,linear_pred):\n    plt.figure(figsize=(9, 6))\n    plt.plot(modified_dates, countryConfirmedDataList,color = 'blue')\n    plt.plot(future_forcast, linear_pred , linestyle='dashed', color='red')\n    title = \"# of Coronavirus Cases Over Time:  {}\".format(countryName)\n    plt.title(title, size=15)\n    plt.xlabel('Days Since 1\/22\/2020', size=10)\n    plt.ylabel('')\n    plt.legend(['Confirmed Cases', 'Polynomial predictions'], prop={'size': 8})\n    formatter1 = EngFormatter(places=1, sep=\"\\N{THIN SPACE}\")\n    #plt.yaxis.set_major_formatter(formatter1)\n    plt.xticks(size=9)\n    plt.yticks(size=9)\n    plt.grid()\n    plt.show()","3ca3ddbc":"def polynomial_model_confirmed_Cases(countryConfirmedDataList,countryName, polyDegree):\n    X_train, X_test, y_train, y_test = train_test_split(days_since_1_22, countryConfirmedDataList, test_size=0.05, shuffle=False)\n    poly = PolynomialFeatures(degree=polyDegree)\n    poly_X_train = poly.fit_transform(X_train)\n    poly_X_test = poly.fit_transform(X_test)\n    poly_future_forcast = poly.fit_transform(future_forcast)\n    linear_model = LinearRegression(normalize=True, fit_intercept=False)\n    linear_model.fit(poly_X_train, y_train)\n    test_linear_pred = linear_model.predict(poly_X_test)\n    linear_pred = linear_model.predict(poly_future_forcast)\n    plot_forecast_basedon_confirmed_cases_data(countryConfirmedDataList,countryName,linear_pred)\n    print('Mean Absolute Error:', mean_absolute_error(test_linear_pred, y_test))\n    print('Mean Squared Error:',mean_squared_error(test_linear_pred, y_test))\n    print(linear_model.coef_)","a344ad63":"def export_to_csv(countryName, dataList):\n    fileName = countryName + '.csv'\n    with open(fileName, 'w') as f:\n        writer = csv.writer(f)\n        writer.writerows(zip(modified_dates, dataList))","1c5c2a88":"def plot_mortality_cases_data(countryFatalitiesDataList,countryNamesList):\n    numRows = len(countryFatalitiesDataList)\n    #mpld3.enable_notebook()\n    colors = []\n    for i in range(numRows):\n        colors.append('#%06X' % randint(0, 0xFFFFFF))\n    \n    fig, axs = plt.subplots(numRows, figsize=(8,22))\n    fig.subplots_adjust(hspace = 1.0)\n    plot=0    \n    for j in range(numRows): \n        #myPlot = axs[plot].plot(modified_dates, countryFatalitiesDataList[j],color = colors[j])\n        axs[plot].plot(modified_dates, countryFatalitiesDataList[j],color = colors[j])\n        formatter1 = EngFormatter(places=1, sep=\"\\N{THIN SPACE}\")\n        axs[plot].yaxis.set_major_formatter(formatter1)\n        #labels0 = ['point {0}'.format(i + 1) for i in range(len(countryFatalitiesDataList[j]))]\n        #tooltip = mpld3.plugins.PointLabelTooltip(myPlot, labels = labels0)\n        #mpld3.plugins.connect(fig, tooltip)\n        #axs[plot].grid(color='green', linestyle='solid')\n        title = \"{}\".format(countryNamesList[j])\n        axs[plot].set_title(title)\n        axs[plot].grid()\n        plot=plot+1\n\n    for ax in axs.flat:\n        ax.set(xlabel='Days since 1\/22\/2020', ylabel='Fatal Cases')\n        \n    # Hide x labels and tick labels for top plots and y ticks for right plots.\n    #for ax in axs.flat:\n    #    ax.label_outer()\n        \n    plt.tight_layout()\n    plt.show()","011c4435":"all_list = []\nall_list.append(world_confirmed_data)\nall_list.append(china_confirmed_data)\nall_list.append(italy_confirmed_data)\nall_list.append(iran_confirmed_data)\nall_list.append(spain_confirmed_data)\nall_list.append(united_states_confirmed_data)\nall_list.append(india_confirmed_data)\nall_list.append(germany_confirmed_data)\nall_list.append(uk_confirmed_data)\nall_list.append(france_confirmed_data)\n\nall_countries = []\nall_countries.append(\"World\")\nall_countries.append(\"China\")\nall_countries.append(\"Italy\")\nall_countries.append(\"Iran\")\nall_countries.append(\"Spain\")\nall_countries.append(\"United States\")\nall_countries.append(\"India\")\nall_countries.append(\"Germany\")\nall_countries.append(\"United Kingdom\")\nall_countries.append(\"France\")\n\nplot_confirmed_cases_data(all_list,all_countries,ChartPlotter.Plotly)","ef0266c0":"all_list = []\nall_list.append(world_daily_increase_data)\nall_list.append(china_daily_increase_data)\nall_list.append(italy_daily_increase_data)\nall_list.append(iran_daily_increase_data)\nall_list.append(spain_daily_increase_data)\nall_list.append(united_states_daily_increase_data)\nall_list.append(india_daily_increase_data)\nall_list.append(germany_daily_increase_data)\nall_list.append(uk_daily_increase_data)\nall_list.append(france_daily_increase_data)\n\nall_countries = []\nall_countries.append(\"World\")\nall_countries.append(\"China\")\nall_countries.append(\"Italy\")\nall_countries.append(\"Iran\")\nall_countries.append(\"Spain\")\nall_countries.append(\"United States\")\nall_countries.append(\"India\")\nall_countries.append(\"Germany\")\nall_countries.append(\"United Kingdom\")\nall_countries.append(\"France\")\n\nplot_daily_increase_confirmed_cases_data(all_list,all_countries)","bd35ea31":"plt.figure(figsize=(8, 5))\nplt.plot(modified_dates, china_confirmed_data)\nplt.plot(modified_dates, iran_confirmed_data)\nplt.plot(modified_dates, italy_confirmed_data)\nplt.plot(modified_dates, spain_confirmed_data)\nplt.plot(modified_dates, united_states_confirmed_data)\nplt.plot(modified_dates, india_confirmed_data)\nplt.plot(modified_dates, germany_confirmed_data)\nplt.plot(modified_dates, uk_confirmed_data)\nplt.plot(modified_dates, france_confirmed_data)\nplt.title('# of Confirmed Coronavirus Cases', size=20)\nplt.xlabel('Days Since 1\/22\/2020', size=20)\nplt.ylabel('Confirmed Cases', size=20)\nplt.legend(['China','Iran','Italy','Spain', 'US','India','Germany','UK','France'], prop={'size': 10})\nplt.xticks(size=12)\nplt.yticks(size=12)\nplt.show()","0e733d2e":"# To find the Polynomial degree and Polynomial equation on the confirmed COVID-19 data you can use the following example\n# to export the data into csv and use the steps mentioned above\n\n# export \"world\" data\nexport_to_csv(\"World\",world_confirmed_data)\nexport_to_csv(\"China\",china_confirmed_data)\nexport_to_csv(\"Iran\",iran_confirmed_data)\nexport_to_csv(\"Italy\",italy_confirmed_data)\nexport_to_csv(\"Spain\",spain_confirmed_data)\nexport_to_csv(\"USA\",united_states_confirmed_data)\nexport_to_csv(\"India\",india_confirmed_data)\nexport_to_csv(\"Germany\",germany_confirmed_data)\nexport_to_csv(\"UK\",uk_confirmed_data)\nexport_to_csv(\"France\",france_confirmed_data)\n","c85b9e1e":"# World\npolynomial_model_confirmed_Cases(world_confirmed_data,\"World\",6)","9a044e8f":"# China\npolynomial_model_confirmed_Cases(china_confirmed_data,\"China\",6)","00a82a57":"# India\npolynomial_model_confirmed_Cases(india_confirmed_data,\"India\",6)","fa703d77":"# United States of America\npolynomial_model_confirmed_Cases(united_states_confirmed_data,\"United States of America\",6)","021c6690":"# Italy\npolynomial_model_confirmed_Cases(italy_confirmed_data,\"Italy\",6)","3653bedd":"# Spain\npolynomial_model_confirmed_Cases(spain_confirmed_data,\"Spain\",6)","5021966b":"# Germany\npolynomial_model_confirmed_Cases(germany_confirmed_data,\"Germany\",6)","7c6a4cb8":"# Iran\npolynomial_model_confirmed_Cases(iran_confirmed_data,\"Iran\",6)","7854381c":"# UK\npolynomial_model_confirmed_Cases(uk_confirmed_data,\"UK\",6)","495aa600":"# France\npolynomial_model_confirmed_Cases(france_confirmed_data,\"France\",6)","e67bf513":"all_list = []\nall_list.append(world_mortality_data)\nall_list.append(china_mortality_data)\nall_list.append(italy_mortality_data)\nall_list.append(iran_mortality_data)\nall_list.append(spain_mortality_data)\nall_list.append(united_states_mortality_data)\nall_list.append(india_mortality_data)\nall_list.append(germany_mortality_data)\nall_list.append(uk_mortality_data)\nall_list.append(france_mortality_data)\n\nall_countries = []\nall_countries.append(\"World\")\nall_countries.append(\"China\")\nall_countries.append(\"Italy\")\nall_countries.append(\"Iran\")\nall_countries.append(\"Spain\")\nall_countries.append(\"United States\")\nall_countries.append(\"India\")\nall_countries.append(\"Germany\")\nall_countries.append(\"United Kingdom\")\nall_countries.append(\"France\")\n\nplot_mortality_cases_data(all_list,all_countries)","3ab3825b":"# Some proactive calculations to make the data analysis easy in later stages - Specially in Plotting the data","7552e32e":"### Model fitting with the Python:","d276ace6":"# Conclusion\n* China is definitely moving towards almost full recovery.\n* Worrying sign for United States of America as the forecast trend shows (both in terms of confirmed cases and mortalities).\n* Cases in India has suddenly spiked (Both Confirmed and Death cases).\n* Spain and Italy saw a massive problem, still the problem is there, probably the peak is going down.\n* In Germany COVID-19 positive cases are forecaseted to go down now, which is pretty good sign for the country.\n* Confirmed COVID-19 Data from Iran tends towards positive direction.\n* After looking at most countries data, the growth of COVID-19 positive cases is exponential, and thats worrying sign, the curve needs to be flatten out.\n* Situation in United Kingdoma and France is still worrysome.\n* SOCIAL DISTANCING IS MUST, thats the best remedy currently.","7db87411":"### Case Study :  In this case study and analysis, Since the COVID-19 spread started from China (Wuhan) and later on it hit badly to countries like Iran, Italy, Spain, United States etc. In this case study I am doing the analytics\/forecast ***based*** on:\n* World\n* China\n* Iran\n* Italy\n* Spain\n* United States of America\n* India\n* Germany\n* UK\n* France","9be05071":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above plots from Trend data<\/b>\n<ul>\n    <li>India has sharp rise in last couple of days, trend line does not look promising.<\/li>\n    <li>United States of America also have not seen the peak yet.<\/li>\n    <li>China is moving towards COVAI-19 free nation. almost!!!.<\/li>\n<\/ul>\n<\/font>\n<\/div>","bbd7f0fc":"## UDF Definitions:","aa2b2ddf":"## Polynomial Equation : USA\n![United_States_Chart.JPG](attachment:United_States_Chart.JPG)","eca26bc6":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above plots from Microsoft EXCEL<\/b>\n<ul>\n    <li>Note : Please draw the chart of country of interest, based on the method explained above.<\/li>\n    <li>The polynomial degree of 6 is pretty good fit(with my earlier experiment degree of 5 was okay, hence we are still in dangerous zone) on the confirmed data<\/li>\n    <li>R-Squared value is extremely decent and the trend line on the confirmed data fits very well for all the countries and world.<\/li>\n    <li>Polynomial Equations for world and individual countries are drawn in the chart iteslf.<\/li>\n<\/ul>\n<\/font>\n<\/div>","1a72214c":"## Analysis: Daily Increase of Confirmed COVID-19 cases\n\n#### For this just bar plot will help to find the trend on daily increase of COVID-19 cases","d4a89e17":"## Lets Read\/Understand the data essentially - Confirmed COVID-19, Recovered COVID-19, Fatalities COVID-19 cases and Country wise COVID-19 data.","35ecab14":"## Analysis : Future Forecast (World and Countries under consideration in study)","c47c639e":"## Visualizing the worst hit countries","2deac55e":"# COVID-19 Analysis and Forecast\n\nWith almost entire world coming to standstill and most of the folks are either working from home (WFH) or some of them have lost their jobs the world economy is under free fall.Outbreak of COVID-19 novel coronavirus SARS-CoV-2 has played the havoc in our beautiful planet right now. Since in India we are also currently going through the lock down period, so I decided to understand the COVID-19 data (which is available in https:\/\/www.kaggle.com\/c\/covid19-global-forecasting-week-2\/overview), and do some analysis on:\n* Worst hit countries currently in the planet (interactively), in terms of COVID-19 confirmed cases and death cases.\n* Latest updates from top N countries in the world in terms of Confirmed, Recovered, Death and Active cases.\n* Global Spread in the planet currently, and interactively visualizing the data.\n* Attempt to analyze the confirmed COVID-19 patients from world and specific countries like China(from where the pandemic started), Iran, Italy, Spain (Massive problem they have faced\/facing), United States of America, India,UK, France and Germany.\n* Polynomial regression is used to model the data with fairly good r-square numbers.\n* Curve fitting is used on the confirmed COVID-19 cases to forecast the data.\n* Different graphics libraries are used to plot the data, Plotly is used to Visualize the affected countries in interactive way.\n* Folium map is used to show the spread of COVID-19 virus worldwide, which clearly depicts the dangerous time we are living in.","d1b0b7c6":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above plots from Trend data<\/b>\n<ul>\n    <li>With Indian contextual data, sharp rise in Mortality in India in last few days.<\/li>\n    <li>China mortality rate is constant now, good sign towards full recovery.<\/li>\n    <li>Rate of mortality in United States is also in steep rise.<\/li>\n<\/ul>\n<\/font>\n<\/div>","b884516b":"### Recovered cases : ","dc12d702":"## Polynomial Equation : India\n![India_Chart.JPG](attachment:India_Chart.JPG)","9a129dd9":"<div class=\"identifier\">\n<font color='blue'>\n<b>World and specific Countries<\/b>\n<ul>\n    <li>Plot the data for whole world and some specific countries.<\/li>\n    <li>x-axis represents days elapsed since January 22, 2020.<\/li>\n    <li>y-axis represents confirmed COVID-19 cases respectively.<\/li>\n<\/ul>\n<\/font>\n<\/div>","f854643e":"## Lets use Plotly to Visualize the data","3d8ff2da":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above plots<\/b>\n<ul>\n    <li>In general big worry for entire world as daily increase in COVID-19 patients is showing steep rise and we are yet to see the stabilizing trend, and 60th and 70th day from January 22, 2020 showing the largest bar (big worry).<\/li>\n    <li>**Big worry for India as there is sharp rise of COVID-19 patients, from 70th day right from January 22,2020**.<\/li>\n    <li>In last few days in India there is steep rise in positive COVID-19 cases, again a big sign of worry.<\/li>\n    <li>**In United States the day range from 65th to 70 right from date 22nd January 2020, there is sharp rise in COVID-19 patients, again a sign of big worry, with the histogram trend it looks like next 2-3 weeks are extremely crucial for United States.**<\/li>\n    <li>**There was sudden surge in number for Spain from 50th day after 22nd January 2020, and things are not still not looking good.**<\/li>\n    <li>**China is on the path of recovery right from 40th day since January 22, 2020, and things are looking positively consistent over there.**<\/li>\n    <li>**Italy started to see the massive problem right from 49th day since January 22nd, 2020 and things are still not improving.**<\/li>\n    <li>64th, 65th and 66th day since January 22nd, 2020 Germany saw massive rise in COVID-19 patients, then relatively numbers started going down.<\/li>\n<\/ul>\n<\/font>\n<\/div>","0e438e68":"## Understand the data - Confirmed cases, Recovered cases and Fatalities\n\n### Confirmed cases : ","7fad7805":"## Modelling the Analysis:\n### In this case study I am using the Curve fit for the trend on the confirmed COVID-19 cases, the resulting model looks pretty accurate with satisfactory r-square values.\n\n### Since I am using the polynomial regression, in order to find out the polynomial degree i used the website https:\/\/arachnoid.com\/polysolve\/, where you can input your data points and it will draw the graph and will show the polynomial degree as well, alternatively you can use Microsoft Excel to automatically find the best fit polynomial degree. Here is the snapshot of the China data from the website https:\/\/arachnoid.com\/polysolve\/\n\n![China.JPG](attachment:China.JPG)\n\n### Also I used Microsoft Excel to find the final polynomial equation for COVID-19 confirmed data for specific country, here are the steps in case you want to play around:\n* Export the country specific confirmed cases data in .csv format (essentially x,y points)\n* Select scatter chart from Microsoft Excel\n* Select \"Add Chart Element\" from top-left toolbar button and then select Trendline-More Trendline Options\n* Select polynomial and try to fit the trend line with change in polynomial degree (in my case i already knew polynomial degree above)\n* Select \"display equation on chart\" and \"display r-squared values\", you will get the final polynomail equation and r-square value","7d014071":"## Curve Fitting : Polynomial Modelling : World","065d0be7":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above plots<\/b>\n<ul>\n    <li>Roughly after 50-60 days since January 22, 2020, there is steep surge in positive COVID -19 cases in general, in whole world excpet China roughly after ~40 Days since January 22, 2020 the confirmed cases of positive COVID-19 stabilized. This is worrying sign as in most of the countries spread has a definitive trend.<\/li>\n    <li>In last 2-3 days in India (as on April 3rd, 2020), there is steep rise in positive COVID-19 cases, again a big sign of worry.<\/li>\n    <li>In United States since past ~10 days, there is steep rise in COVID-19 patients.<\/li>\n    <li>Spain and Italy are also still in painful situation as on 3rd April 2020.<\/li>\n<\/ul>\n<\/font>\n<\/div>","00237970":"## Data Preparation for future forecast - based on confirmed COVID-19 patients","13373407":"### Fatalities cases : ","3ce79e72":"<div class=\"identifier\">\n<font color='blue'>\n<b>Generic User Defined Functions<\/b>\n<ul>\n    <li>**plot_confirmed_cases_data** : Plots the data for the confirmed cases against the days elapsed since 22 Jan 2020.<\/li>\n    <li>**plot_daily_increase_confirmed_cases_data** : Plots the data for the daily increase in confirmed cases against the days elapsed since 22 Jan 2020.<\/li>\n    <li>**confirmed_cases_daily_increase** : Prepares the data structures for the whole world and specific countries mentioned above for the daily increase in COVID-19 confirmed cases.<\/li>\n    <li>**polynomial_model_confirmed_Cases** : Fits the polynomial model on confirmed data and predicts the model.<\/li>\n    <li>**plot_forecast_basedon_confirmed_cases_data** : Plot future forecast on Confirmed data of COVID-19 patients.<\/li>\n    <li>**export_to_csv** : Export the country specific data to .csv file.<\/li>\n    <li>**plot_mortality_cases_data** : Plots the data for the fatality cases against the days elapsed since 22 Jan 2020.<\/li>\n<\/ul>\n<\/font>\n<\/div>","5965444d":"## Analysis: COVID-19 Confirmed Cases","e7c4dd1c":"## Mortality Analysis:","3c7f09f3":"<div class=\"identifier\">\n<font color='blue'>\n<b>Inference from above:<\/b>\n<ul>\n    <li>The data frames confirmed_data_only_dates_column, deaths_data_only_dates_column, recovery_data_only_dates_column has been sliced so that columns only holds the data from 22 Jan 2020, which will be used to plot the x-y data taking time as x-axis.<\/li>\n<\/ul>\n<\/font>\n<\/div>","04353e92":"## Cumulative plot of all the world + Countries under consideration : Confirmed Data","10f1c27b":"## Global Spread on World Map - COVID19","f2fbc36b":"## Polynomial Equation : World\n![World.JPG](attachment:World.JPG)","6aa2009c":"### The structure of cov19_confirmed_data, cov19_deaths_data, cov19_recoveries_data is same and they store the confirmed, recovered and death cases in each country\u2019s province\/state respectively. Countries are in alphabetical order."}}