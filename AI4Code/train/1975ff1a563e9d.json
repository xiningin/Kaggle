{"cell_type":{"52afc19b":"code","467c0116":"code","4eb52f5b":"code","a8719125":"code","49f00c3e":"code","36d925b0":"code","7e827c81":"code","9ad549f6":"code","14b027d0":"code","59a760ba":"code","80f5032c":"code","60dbb241":"code","809110cc":"code","5d915c2c":"code","3ec9c448":"code","ebcad0e9":"code","998d1b9c":"code","5d62acee":"code","b7d45335":"markdown","9c0b8da5":"markdown","5dac4a62":"markdown","a8d2bffa":"markdown","3215990a":"markdown","fc79b236":"markdown","64c6ca09":"markdown","91550897":"markdown","3b1c68f9":"markdown","b30bade2":"markdown","0efc9944":"markdown"},"source":{"52afc19b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","467c0116":"# load the data\ndelay1 = pd.read_csv(\"\/kaggle\/input\/usa-flights-2018\/01_18.csv\")\ndelay2 = pd.read_csv(\"\/kaggle\/input\/usa-flight-2018\/02_18.csv\")\ndelay3 = pd.read_csv(\"\/kaggle\/input\/usa-flight-2018\/03_18.csv\")\ndelay4 = pd.read_csv(\"\/kaggle\/input\/usa-flight-2018\/04_18.csv\")\ndelay5 = pd.read_csv(\"\/kaggle\/input\/usa-flight-2018\/05_18.csv\")\ndelay6 = pd.read_csv(\"\/kaggle\/input\/usa-flight-2018\/06_18.csv\")\ndelay = pd.concat([delay1, delay2, delay3, delay4, delay5, delay6], axis=0)\ndelay.head()","4eb52f5b":"# Create delay Column\ndelay.loc[:,\"OTP\"] = 0 #ontime performance\n\n#filter\nfilter_Delay = (delay[\"DEP_DEL15\"] == 1) | (delay[\"ARR_DEL15\"] == 1) \nfilter_DnA = (delay[\"DEP_DEL15\"] == 1) & (delay[\"ARR_DEL15\"] == 0)\n\n# apply delay filter to DEL15\ndelay.loc[filter_Delay, \"OTP\"] = 1","a8719125":"# Function to create graph\ndef plotDelay(x, data, ax, xlab, hue=None, xticklabs=None, top=0):\n    sns.countplot(x=x, data=data, ax=ax, hue=hue)\n    total = len(data)\n    #annotation\n    ymax = 0\n    for p in ax.patches:\n        ax.text(p.get_x()+p.get_width()\/2, (p.get_height() - top), int(p.get_height()), color=\"w\", fontweight=\"ultralight\", ha=\"center\", va=\"center\", alpha=0.3)\n        ax.text(p.get_x()+p.get_width()\/2, p.get_height()\/2, \"{0} %\".format(round((p.get_height() * 100) \/ total), 2), color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\")\n        if ymax < p.get_height():\n            ymax = p.get_height()\n\n    #settings\n    ax.tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\n    ax.set_yticks([]) #show only the extreme value\n    if(xticklabs != None):\n        ax.set_xticklabels(xticklabs) #rename the xticklabels\n    ax.set_ylabel(\"\") #hiding the \"count\" label\n    ax.set_xlabel(xlab) #x label\n    sns.despine(left=True, bottom=True) #hiding axes left\/right\/top\/bottom","49f00c3e":"sns.set(style=\"white\")\n\nfig, ax = plt.subplots(1,3, figsize=(22,12))\n\nplotDelay(x=\"DEP_DEL15\", data=delay, ax=ax[0], top=130000, \n          xlab=\"Number of Departures Delays\", xticklabs=[\"Not Delayed\",\"Delayed\"])\nplotDelay(x=\"ARR_DEL15\", data=delay, ax=ax[1], top=130000, \n          xlab=\"Number of Arrivals Delays\", xticklabs=[\"Not Delayed\",\"Delayed\"])\nplotDelay(x=\"OTP\", data=delay, ax=ax[2], top=130000, \n          xlab=\"On-Time Performance (OTP)\", xticklabs=[\"Not Delayed\",\"Delayed\"])","36d925b0":"# The on-time arrival performance knowing that departure has been delayed\nround((len(delay[filter_DnA]) * 100) \/ len(delay[delay[\"DEP_DEL15\"] == 1]), 2)","7e827c81":"delay_by_days = delay.groupby(by=\"DAY_OF_WEEK\")[\"ARR_DEL15\"].agg([\"sum\", \"count\"])\ndelay_by_days.loc[:,\"percent\"] = (delay_by_days[\"sum\"] * 100) \/ delay_by_days[\"count\"]","9ad549f6":"fig, ax = plt.subplots(2,1, figsize=(22,15))\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nsns.barplot(x=delay_by_days.index, y=delay_by_days[\"percent\"], ax=ax[0])\nsns.countplot(x=delay[\"DAY_OF_WEEK\"], ax=ax[1])\n# Annotations\nfor p in ax[0].patches:\n        ax[0].text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), \"{0} %\".format(round(p.get_height(),1)), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=0.9)\nax[0].tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax[0].set_yticks([]) #show only the extreme value\nax[0].set_xticklabels(days)\nax[0].set_ylabel(\"\") #hiding the \"count\" label\nax[0].set_xlabel(\"\") #x label\nax[0].set_title(\"Percentage of Delays\")\n\nfor p in ax[1].patches:\n        ax[1].text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), int(p.get_height()), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=0.9)\nax[1].tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax[1].set_yticks([]) #show only the extreme value\nax[1].set_xticklabels(days)\nax[1].set_ylabel(\"\") #hiding the \"count\" label\nax[1].set_xlabel(\"\") #x label\nax[1].set_title(\"Number of Flights\")\n\nsns.despine(left=True, bottom=True)\nplt.tight_layout()\n\nfig.savefig(\"DayOfWeek_delays.png\", transparent=True, bbox_inches='tight', pad_inches=0)","14b027d0":"delay_by_dmonth = delay.groupby(by=\"DAY_OF_MONTH\")[\"ARR_DEL15\"].agg([\"sum\", \"count\"])\ndelay_by_dmonth.loc[:,\"percent\"] = (delay_by_dmonth[\"sum\"] * 100) \/ delay_by_dmonth[\"count\"]","59a760ba":"\nfig, ax = plt.subplots(1,1, figsize=(17,9))\nsns.barplot(x=delay_by_dmonth.index, y=delay_by_dmonth[\"percent\"])\n\n# Annotations\nfor p in ax.patches:\n        ax.text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), \"{0} %\".format(round(p.get_height(),1)), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=1, rotation=\"vertical\")\nax.tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax.set_yticks([]) #show only the extreme value\nax.set_ylabel(\"\") #hiding the \"count\" label\nax.set_xlabel(\"Days of Month\") #x label\nax.set_title(\"Percentage of Delays\")\nsns.despine(left=True, bottom=True)","80f5032c":"def getHr(x):\n    x = str(x)\n    if len(x) == 4:\n        return int(x[:2])\n    if len(x) == 3:\n        return int(x[:1])\n    if len(x) < 3:\n        return int(0)\n    \ndelay[\"HR_DEP_TIME\"] = delay[\"CRS_DEP_TIME\"].apply(getHr)","60dbb241":"delay_by_hour = delay.groupby(by=\"HR_DEP_TIME\")[\"ARR_DEL15\"].agg([\"sum\", \"count\"])\ndelay_by_hour.loc[:,\"percent\"] = (delay_by_hour[\"sum\"] * 100) \/ delay_by_hour[\"count\"]","809110cc":"fig, ax = plt.subplots(1,1, figsize=(22,12))\norder=[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0, 1, 2, 3, 4]\norder_labels=[\"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \n              \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \n              \"23:00\", \"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\"]\nsns.barplot(x=delay_by_hour.index, y=delay_by_hour[\"percent\"], order=order)\n# Annotations\nfor p in ax.patches:\n        ax.text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), \"{0} %\".format(round(p.get_height(),1)), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=1, rotation=\"vertical\")\nax.tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax.set_yticks([]) #show only the extreme value\nax.set_ylabel(\"\") #hiding the \"count\" label\nax.set_xlabel(\"Hours Of The Day\") #x label\nax.set_xticklabels(order_labels)\nax.set_title(\"Percentage of Delays\")\nsns.despine(left=True, bottom=True)\n\nfig.savefig(\"HourOfDay_delays.png\", transparent=True, bbox_inches='tight', pad_inches=0)","5d915c2c":"delay_by_month = delay.groupby(by=\"MONTH\")[\"ARR_DEL15\"].agg([\"sum\", \"count\"])\ndelay_by_month.loc[:,\"percent\"] = (delay_by_month[\"sum\"] * 100) \/ delay_by_month[\"count\"]","3ec9c448":"fig, ax = plt.subplots(1,1, figsize=(16,10))\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n         'September', 'October', 'November', 'December']\nsns.barplot(x=delay_by_month.index, y=delay_by_month[\"percent\"], ax=ax)\n\n# Annotations\nfor p in ax.patches:\n        ax.text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), \"{0} %\".format(round(p.get_height(),1)), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=0.9)\nax.tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax.set_yticks([]) #show only the extreme value\nax.set_xticklabels(month)\nax.set_ylabel(\"\") #hiding the \"count\" label\nax.set_xlabel(\"\") #x label\nax.set_title(\"Percentage of Delays\")\n\nsns.despine(left=True, bottom=True)\nplt.tight_layout()\n\nfig.savefig(\"Month_delays.png\", transparent=True, bbox_inches='tight', pad_inches=0)\n","ebcad0e9":"delay_by_md = pd.pivot_table(delay, index=\"DAY_OF_WEEK\", columns=\"MONTH\", values=\"ARR_DEL15\", \n                             aggfunc=lambda x: (np.sum(x) * 100) \/ len(x))\n\nfig, ax = plt.subplots(1,1, figsize=(22,10))\nsns.heatmap(delay_by_md, annot=True, xticklabels=month, yticklabels=days)\nax.set_ylabel(\"\") #hiding the \"count\" label\nax.set_xlabel(\"\") #x label\nax.set_title(\"Percentage of Delays\") #title\nplt.yticks(rotation=0)","998d1b9c":"dist_delay = delay.groupby(\"DISTANCE_GROUP\")[\"ARR_DEL15\"].agg(lambda x: (np.sum(x) * 100) \/ len(x))","5d62acee":"fig, ax = plt.subplots(1,1, figsize=(22,10))\nsns.barplot(x=dist_delay.index, y=dist_delay.values)\n# Annotations\nfor p in ax.patches:\n        ax.text(p.get_x()+p.get_width()\/2, (p.get_height()\/2), \"{0} %\".format(round(p.get_height(),1)), \n                color=\"w\", fontweight=\"bold\", ha=\"center\", va=\"center\", alpha=0.9)\nax.tick_params(bottom=\"off\", top=\"off\", left=\"off\", right=\"off\") #Hiding Tick Marks\nax.set_yticks([]) #show only the extreme value\nax.set_ylabel(\"\") #hiding the \"count\" label\nax.set_xlabel(\"\") #x label\nax.set_title(\"Percentage of Delays\") #title\nsns.despine(left=True, bottom=True)","b7d45335":"Note : The on-time performance (OTP) is a flight that arrives or departs within 15 minutes.\n\n**Obviously, the departures delayed and arrivals delayed are correlated. Only 21% of flights delayed on departure arrived on time. In this project, we will rather analyze arrival delays as this is what concerns most passengers.**","9c0b8da5":"**Delay By Hour of day**","5dac4a62":"**Delays by Distance**","a8d2bffa":"**In terms of delays, the best day to fly seems to be Saturday (13.7% of delays), the worst day is Thursday (21% of delays). Saturday has fewer flights on average than any other day of the week and therefore a reduction in the likelihood of delays, but it's difficult to see a pattern here.**","3215990a":"**Visualizations**\n\nThe Number of Delays Per Types","fc79b236":"**Delays Per Day of Week For Each Month\n**","64c6ca09":"The data comes from [the U.S. Department of Transportation](https:\/\/www.transtats.bts.gov\/DL_SelectFields.asp?Table_ID=236), which publishes very large files each month that contains delays data on every flight flown by a major airline within the U.S. They cover about 500,000 flights per month\nData fields names and descriptions :\n\nYEAR \u2014 Year\nQUARTER \u2014 Quarter (1-4)\nMONTH \u2014 Month\nDAY_OF_MONTH \u2014 Day of Month\nDAY_OF_WEEK \u2014 Day of Week\nFL_DATE\u2014 Flight Date (yyyy-mm-dd)\nUNIQUE_CARRIER \u2014 Unique Carrier Code. (HA: Hawaiian Airlines Inc., AS: Alaska Airlines Inc., DL: Delta Air Lines Inc., OO: SkyWest Airlines Inc., UA: United Air Lines Inc., EV: ExpressJet Airlines Inc., WN: Southwest Airlines Co., AA: American Airlines Inc., VX: Virgin America, F9: Frontier Airlines Inc., B6: JetBlue Airways, NK: Spirit Air Lines.)\nORIGIN\u2014 Origin Airport\nORIGIN_CITY_NAME \u2014 Origin Airport, City Name\nDEST \u2014 Destination Airport\nDEST_CITY_NAME \u2014 Destination Airport, City Name\nCRS_DEP_TIME \u2014 CRS Departure Time (local time: hhmm)\nDEP_TIME \u2014 Actual Departure Time (local time: hhmm)\nDEP_DEL15 \u2014 Departure Delay Indicator, 15 Minutes or More (1=Yes)\nCRS_ARR_TIME \u2014 CRS\n\nArrival Time (local time: hhmm)\nARR_TIME \u2014 Actual Arrival Time (local time: hhmm)\nARR_DEL15 \u2014 Arrival Delay Indicator, 15 Minutes or More (1=Yes)\nFLIGHTS \u2014 Number of Flights\nDISTANCE \u2014 Distance between airports (miles)\nDISTANCE_GROUP \u2014 Distance Intervals, every 250 Miles, for Flight Segment","91550897":"**Delays Per Day of Month**\n","3b1c68f9":"**Monthly Analysis**\n\n**Delay By Month**","b30bade2":"**Delays by Airports**","0efc9944":"**Daily Analysis**\n\n**Delays Per Day of Week**"}}