{"cell_type":{"852183d3":"code","96db1685":"code","10415aa1":"code","a1d5b7d8":"code","72eb9d5f":"code","81762f2a":"code","982d1ed8":"code","a406fdcb":"code","70c3ab65":"code","acf61ee1":"code","bddc7287":"code","52830df3":"code","fabc2e9b":"code","29b8c5bd":"code","e455cf2c":"code","549911b2":"code","b05473b1":"code","121e00f3":"code","8506a1e7":"code","9e7b05d8":"code","5db210c6":"code","db0efd61":"code","35e2b1a8":"code","9820c1f5":"code","60234018":"code","5cad0ad6":"code","a891e937":"code","fb63195e":"code","0f159405":"code","e9376d06":"code","39393d0f":"code","a1a45d21":"markdown","3c9ae932":"markdown","f1525c9b":"markdown","9a1e409e":"markdown","7452dddd":"markdown","cabf45da":"markdown","8fd8f9d1":"markdown","80d02a84":"markdown","90d407be":"markdown","39b19cae":"markdown","b836697b":"markdown","c57d7a24":"markdown","7cf4209f":"markdown","99681826":"markdown","71c7f478":"markdown","758e322d":"markdown","68f06f62":"markdown","186a7649":"markdown","5baa1885":"markdown","30da23c0":"markdown","0c4dc8cf":"markdown","0cbaae72":"markdown","e1ad36a1":"markdown","d1ec7995":"markdown","4321e868":"markdown","f0796b83":"markdown","7b0161c2":"markdown","a55f06c3":"markdown","5054ecd0":"markdown","d72a9e84":"markdown","5352c8f9":"markdown","fa73fa31":"markdown","78567a68":"markdown","3e66fa35":"markdown"},"source":{"852183d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","96db1685":"import os\nimport json\nfrom pandas.io.json import json_normalize\n\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, \n                     nrows=nrows) # Important!!\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))\n\ntrain = load_df(nrows=100000)\ntest =load_df('..\/input\/test.csv', nrows=100000)\ntrain.head()","10415aa1":"train[\"totals.transactionRevenue\"] = train[\"totals.transactionRevenue\"].astype('float')\ngdf = train.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()\n\nplt.figure(figsize=(6,4))\nplt.scatter(range(gdf.shape[0]), np.sort(np.log1p(gdf[\"totals.transactionRevenue\"].values)))\nplt.xlabel('index', fontsize=12)\nplt.ylabel('TransactionRevenue', fontsize=12)\nplt.show()","a1d5b7d8":"gdf.describe()","72eb9d5f":"zeroColumns = [c for c in train.columns if train[c].nunique() == 1]\nzeroColumns\n# \u6570\u636e\u4e2d\u65b9\u5dee\u4e0d\u4e3a0\u7684\u7279\u5f81","81762f2a":"nzi = pd.notnull(train[\"totals.transactionRevenue\"]).sum()\nnzr = (gdf[\"totals.transactionRevenue\"] > 0).sum()\nprint(\"Nusmber of instances in train set with non-zero revenue : \", nzi, \" and ratio is : \", nzi \/ train.shape[0])\nprint(\"Number of unique customers with non-zero revenue : \", nzr, \"and the ratio is : \", nzr \/ gdf.shape[0])\n","982d1ed8":"print(\"Number of unique visitors in train set : \",train.fullVisitorId.nunique(), \" out of rows : \",train.shape[0])\nprint(\"Number of unique visitors in test set : \",test.fullVisitorId.nunique(), \" out of rows : \",test.shape[0])\nprint(\"Number of common visitors in train and test set : \",len(set(train.fullVisitorId.unique()).intersection(set(test.fullVisitorId.unique())) ))","a406fdcb":"import seaborn as sns\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\ndef horizontal_bar_chart(cnt_srs, color):\n    trace = go.Bar(\n        y=cnt_srs.index[::-1],\n        x=cnt_srs.values[::-1],\n        showlegend=False,\n        orientation = 'h',\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace","70c3ab65":"# Device Browser\ncnt_srs = train.groupby('device.browser')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(50, 171, 96, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(50, 171, 96, 0.6)')\n\n# Device Category\ncnt_srs = train.groupby('device.deviceCategory')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(71, 58, 131, 0.8)')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(71, 58, 131, 0.8)')\n\n# Operating system\ncnt_srs = train.groupby('device.operatingSystem')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace5 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(246, 78, 139, 0.6)')\ntrace6 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10),'rgba(246, 78, 139, 0.6)')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.04, \n                          subplot_titles=[\"Device Browser - Count\", \"Device Browser - Non-zero Revenue Count\",\n                                          \"Device Category - Count\",  \"Device Category - Non-zero Revenue Count\",\n                                          \"Device Operating System - Count\", \"Device Operating System - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\n\nfig['layout'].update(height=1200, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Device Plots\")\npy.iplot(fig, filename='device-plots')","acf61ee1":"import datetime\n\ndef scatter_plot(cnt_srs, color):\n    trace = go.Scatter(\n        x=cnt_srs.index[::-1],\n        y=cnt_srs.values[::-1],\n        showlegend=False,\n        marker=dict(\n            color=color,\n        ),\n    )\n    return trace\n\ntrain['date'] = train['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\ncnt_srs = train.groupby('date')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_index()\n#cnt_srs.index = cnt_srs.index.astype('str')\ntrace1 = scatter_plot(cnt_srs[\"count\"], 'red')\ntrace2 = scatter_plot(cnt_srs[\"count of non-zero revenue\"], 'blue')\n\nfig = tools.make_subplots(rows=2, cols=1, vertical_spacing=0.08,\n                          subplot_titles=[\"Date - Count\", \"Date - Non-zero Revenue count\"])\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig['layout'].update(height=800, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Date Plots\")\npy.iplot(fig, filename='date-plots')","bddc7287":"test['date'] = test['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\ncnt_srs = test.groupby('date')['fullVisitorId'].size()\n\n\ntrace = scatter_plot(cnt_srs, 'red')\n\nlayout = go.Layout(\n    height=400,\n    width=800,\n    paper_bgcolor='rgb(233,233,233)',\n    title='Dates in Test set'\n)\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename=\"ActivationDate\")","52830df3":"# Geographic Information:\n\n# Continent\ncnt_srs = train.groupby('geoNetwork.continent')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'rgba(58, 71, 80, 0.6)')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'rgba(58, 71, 80, 0.6)')\n\n# Sub-continent\ncnt_srs = train.groupby('geoNetwork.subContinent')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"], 'orange')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'orange')\n\n# Network domain\ncnt_srs = train.groupby('geoNetwork.networkDomain')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace5 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'blue')\ntrace6 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'blue')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=3, cols=2, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Continent - Count\", \"Continent - Non-zero Revenue Count\",\n                                          \"Sub Continent - Count\",  \"Sub Continent - Non-zero Revenue Count\",\n                                          \"Network Domain - Count\", \"Network Domain - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\nfig.append_trace(trace5, 3, 1)\nfig.append_trace(trace6, 3, 2)\n\nfig['layout'].update(height=1200, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Geography Plots\")\npy.iplot(fig, filename='geo-plots')\n","fabc2e9b":"cnt_srs = train.groupby('trafficSource.source')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace1 = horizontal_bar_chart(cnt_srs[\"count\"].head(10), 'green')\ntrace2 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"].head(10), 'green')\n\n# Sub-continent\ncnt_srs = train.groupby('trafficSource.medium')['totals.transactionRevenue'].agg(['size', 'count'])\ncnt_srs.columns = [\"count\", \"count of non-zero revenue\"]\ncnt_srs = cnt_srs.sort_values(by=\"count\", ascending=False)\ntrace3 = horizontal_bar_chart(cnt_srs[\"count\"], 'purple')\ntrace4 = horizontal_bar_chart(cnt_srs[\"count of non-zero revenue\"], 'purple')\n\n# Creating two subplots\nfig = tools.make_subplots(rows=2, cols=2, vertical_spacing=0.08, horizontal_spacing=0.15, \n                          subplot_titles=[\"Traffic Source - Count\", \"Traffic Source - Non-zero Revenue Count\",\n                                          \"Traffic Source Medium - Count\",  \"Traffic Source Medium - Non-zero Revenue Count\"])\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\n\nfig['layout'].update(height=1000, width=800, paper_bgcolor='rgb(233,233,233)', title=\"Traffic Source Plots\")\npy.iplot(fig, filename='traffic-source-plots')","29b8c5bd":"zeroColumns = [c for c in train.columns if train[c].nunique() == 1]\nzeroColumns","e455cf2c":"cols_to_drop = ['socialEngagementType',\n 'device.browserSize',\n 'device.browserVersion',\n 'device.flashVersion',\n 'device.language',\n 'device.mobileDeviceBranding',\n 'device.mobileDeviceInfo',\n 'device.mobileDeviceMarketingName',\n 'device.mobileDeviceModel',\n 'device.mobileInputSelector',\n 'device.operatingSystemVersion',\n 'device.screenColors',\n 'device.screenResolution',\n 'geoNetwork.cityId',\n 'geoNetwork.latitude',\n 'geoNetwork.longitude',\n 'geoNetwork.networkLocation',\n 'totals.bounces',\n 'totals.newVisits',\n 'totals.visits',\n 'trafficSource.adwordsClickInfo.criteriaParameters',\n 'trafficSource.adwordsClickInfo.isVideoAd',\n 'trafficSource.isTrueDirect',\n 'sessionId']\n\ntrain = train.drop(cols_to_drop + [\"trafficSource.campaignCode\"], axis=1)\ntest = test.drop(cols_to_drop, axis=1)","549911b2":"train.shape, test.shape","b05473b1":"# Impute 0 for missing target values\ntrain[\"totals.transactionRevenue\"].fillna(0, inplace=True)\ntrain_y = train[\"totals.transactionRevenue\"].values\ntrain_id = train[\"fullVisitorId\"].values\ntest_id = test[\"fullVisitorId\"].values\n\n# label encode the categorical variables and convert the numerical variables to float\ncat_cols = [\"channelGrouping\", \"device.browser\", \"device.deviceCategory\", \"device.operatingSystem\", \n            \"geoNetwork.city\", \"geoNetwork.continent\", \"geoNetwork.country\", \"geoNetwork.metro\",\n            \"geoNetwork.networkDomain\", \"geoNetwork.region\", \"geoNetwork.subContinent\", \"trafficSource.adContent\", \n            \"trafficSource.adwordsClickInfo.adNetworkType\", \"trafficSource.adwordsClickInfo.gclId\", \n            \"trafficSource.adwordsClickInfo.page\", \"trafficSource.adwordsClickInfo.slot\", \"trafficSource.campaign\",\n            \"trafficSource.keyword\", \"trafficSource.medium\", \"trafficSource.referralPath\", \"trafficSource.source\"]\nnum_cols = [\"totals.hits\", \"totals.pageviews\"]","121e00f3":"from sklearn import preprocessing\n\nfor col in cat_cols:\n    print(col)\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train[col].values.astype('str')) + list(test[col].values.astype('str')))\n    train[col] = lbl.transform(list(train[col].values.astype('str')))\n    test[col] = lbl.transform(list(test[col].values.astype('str')))\nfor col in num_cols:\n    train[col] = train[col].astype(float)\n    test[col] = test[col].astype(float)\n\n# Split the train dataset into development and valid based on time \ndev = train[train['date']<=datetime.date(2017,5,31)]\nval = train[train['date']>datetime.date(2017,5,31)]\ndev_y = np.log1p(dev[\"totals.transactionRevenue\"].values)\nval_y = np.log1p(val[\"totals.transactionRevenue\"].values)\n\ndev_X = dev[cat_cols + num_cols]\nval_X = val[cat_cols + num_cols]\ntest_X = test[cat_cols + num_cols]","8506a1e7":"[d.shape for d in [dev_X, val_X, test_X]]","9e7b05d8":"import lightgbm as lgb\n\n# custom function to run light gbm model\ndef run_lgb(train_X, train_y, val_X, val_y, test_X):\n    params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"rmse\",\n        \"num_leaves\" : 30,\n        \"learning_rate\" : 0.1,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.5,\n        \"bagging_frequency\" : 5,\n        \"bagging_seed\" : 2018,\n        \"verbosity\" : -1\n    }\n    \n    lgtrain = lgb.Dataset(train_X, label=train_y)\n    lgval = lgb.Dataset(val_X, label=val_y)\n    model = lgb.train(params, lgtrain, 1000, valid_sets=[lgval], early_stopping_rounds=100, verbose_eval=100)\n    \n    pred_test_y = model.predict(test_X, num_iteration=model.best_iteration)\n    return pred_test_y, model\n\n# Training the model #\npred_test, model = run_lgb(dev_X, dev_y, val_X, val_y, test_X)","5db210c6":"sub_df = pd.DataFrame({\"fullVisitorId\":test_id})\npred_test[pred_test<0] = 0\nsub_df[\"PredictedLogRevenue\"] = np.expm1(pred_test)\nsub_df = sub_df.groupby(\"fullVisitorId\")[\"PredictedLogRevenue\"].sum().reset_index()\nsub_df.columns = [\"fullVisitorId\", \"PredictedLogRevenue\"]\nsub_df[\"PredictedLogRevenue\"] = np.log1p(sub_df[\"PredictedLogRevenue\"])\nsub_df.to_csv(\"baseline_lgb.csv\", index=False)","db0efd61":"sub_df.head()\n","35e2b1a8":"fig, ax = plt.subplots(figsize=(12,18))\nlgb.plot_importance(model, max_num_features=50, height=0.8, ax=ax)\nax.grid(False)\nplt.title(\"LightGBM - Feature Importance\", fontsize=15)\nplt.show()","9820c1f5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nimport json\nfrom pandas.io.json import json_normalize\n%matplotlib inline\n\n# 1. \u8bfb\u5165\u6570\u636e\ndef load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, \n                     nrows=nrows) # Important!!\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df\n\nprint(os.listdir(\"..\/input\"))\n\ntrain = load_df(nrows=100000)\ntest =load_df('..\/input\/test.csv', nrows=100000)","60234018":"# 2. \u5904\u7406\u6570\u636e\ntrain[\"totals.transactionRevenue\"] = train[\"totals.transactionRevenue\"].astype('float')\n# test[\"totals.transactionRevenue\"] = test[\"totals.transactionRevenue\"].astype('float') # test \u6570\u636e\u96c6\u5408\u5c31\u662f\u8981\u9884\u6d4b\u8be5\u9879\n\ntrain['date'] = train['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\ntest['date'] = test['date'].apply(lambda x: datetime.date(int(str(x)[:4]), int(str(x)[4:6]), int(str(x)[6:])))\n\ncols_to_drop = ['socialEngagementType',\n 'device.browserSize',\n 'device.browserVersion',\n 'device.flashVersion',\n 'device.language',\n 'device.mobileDeviceBranding',\n 'device.mobileDeviceInfo',\n 'device.mobileDeviceMarketingName',\n 'device.mobileDeviceModel',\n 'device.mobileInputSelector',\n 'device.operatingSystemVersion',\n 'device.screenColors',\n 'device.screenResolution',\n 'geoNetwork.cityId',\n 'geoNetwork.latitude',\n 'geoNetwork.longitude',\n 'geoNetwork.networkLocation',\n 'totals.bounces',\n 'totals.newVisits',\n 'totals.visits',\n 'trafficSource.adwordsClickInfo.criteriaParameters',\n 'trafficSource.adwordsClickInfo.isVideoAd',\n 'trafficSource.isTrueDirect',\n 'sessionId']\n\ntrain = train.drop(cols_to_drop + [\"trafficSource.campaignCode\"], axis=1)\ntest = test.drop(cols_to_drop, axis=1)\n\n# Impute 0 for missing target values\ntrain[\"totals.transactionRevenue\"].fillna(0, inplace=True)\ntrain_y = train[\"totals.transactionRevenue\"].values\ntrain_id = train[\"fullVisitorId\"].values\ntest_id = test[\"fullVisitorId\"].values\n\n# label encode the categorical variables and convert the numerical variables to float\ncat_cols = [\"channelGrouping\", \"device.browser\", \"device.deviceCategory\", \"device.operatingSystem\", \n            \"geoNetwork.city\", \"geoNetwork.continent\", \"geoNetwork.country\", \"geoNetwork.metro\",\n            \"geoNetwork.networkDomain\", \"geoNetwork.region\", \"geoNetwork.subContinent\", \"trafficSource.adContent\", \n            \"trafficSource.adwordsClickInfo.adNetworkType\", \"trafficSource.adwordsClickInfo.gclId\", \n            \"trafficSource.adwordsClickInfo.page\", \"trafficSource.adwordsClickInfo.slot\", \"trafficSource.campaign\",\n            \"trafficSource.keyword\", \"trafficSource.medium\", \"trafficSource.referralPath\", \"trafficSource.source\"]\nnum_cols = [\"totals.hits\", \"totals.pageviews\"]\n\nfrom sklearn import preprocessing\n\nfor col in cat_cols:\n    print(col)\n    lbl = preprocessing.LabelEncoder()\n    lbl.fit(list(train[col].values.astype('str')) + list(test[col].values.astype('str')))\n    train[col] = lbl.transform(list(train[col].values.astype('str')))\n    test[col] = lbl.transform(list(test[col].values.astype('str')))\nfor col in num_cols:\n    train[col] = train[col].astype(float)\n    test[col] = test[col].astype(float)\n\n# Split the train dataset into development and valid based on time \ndev = train[train['date']<=datetime.date(2017,5,31)]\nval = train[train['date']>datetime.date(2017,5,31)]\ndev_y = np.log1p(dev[\"totals.transactionRevenue\"].values)\nval_y = np.log1p(val[\"totals.transactionRevenue\"].values)\n\ndev_X = dev[cat_cols + num_cols]\nval_X = val[cat_cols + num_cols]\ntest_X = test[cat_cols + num_cols]","5cad0ad6":"# 3. \u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b\nimport lightgbm as lgb\n\n# custom function to run light gbm model\ndef run_lgb(train_X, train_y, val_X, val_y, test_X):\n    params = {\n        \"objective\" : \"regression\",\n        \"metric\" : \"rmse\",\n        \"num_leaves\" : 30,\n        \"learning_rate\" : 0.1,\n        \"bagging_fraction\" : 0.7,\n        \"feature_fraction\" : 0.5,\n        \"bagging_frequency\" : 5,\n        \"bagging_seed\" : 2018,\n        \"verbosity\" : -1\n    }\n    \n    lgtrain = lgb.Dataset(train_X, label=train_y)\n    lgval = lgb.Dataset(val_X, label=val_y)\n    model = lgb.train(params, lgtrain, 1000, valid_sets=[lgval], early_stopping_rounds=100, verbose_eval=100)\n    \n    pred_test_y = model.predict(test_X, num_iteration=model.best_iteration)\n    return pred_test_y, model\n\n# Training the model #\npred_test, model = run_lgb(dev_X, dev_y, val_X, val_y, test_X)\n\n# 4. \u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30\nsub_df = pd.DataFrame({\"fullVisitorId\":test_id})\npred_test[pred_test<0] = 0\nsub_df[\"PredictedLogRevenue\"] = np.expm1(pred_test)\nsub_df = sub_df.groupby(\"fullVisitorId\")[\"PredictedLogRevenue\"].sum().reset_index()\nsub_df.columns = [\"fullVisitorId\", \"PredictedLogRevenue\"]\nsub_df[\"PredictedLogRevenue\"] = np.log1p(sub_df[\"PredictedLogRevenue\"])\nsub_df.to_csv(\"baseline_lgb.csv\", index=False)","a891e937":"from xgboost import XGBRegressor\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05)\nmy_model.fit(dev_X, dev_y, early_stopping_rounds=5, \n             eval_set=[(val_X, val_y)], verbose=False)","fb63195e":"pred_test_y = my_model.predict(test_X)\nsub_df = pd.DataFrame({\"fullVisitorId\":test_id})\npred_test[pred_test<0] = 0\nsub_df[\"PredictedLogRevenue\"] = np.expm1(pred_test)\nsub_df = sub_df.groupby(\"fullVisitorId\")[\"PredictedLogRevenue\"].sum().reset_index()\nsub_df.columns = [\"fullVisitorId\", \"PredictedLogRevenue\"]\nsub_df[\"PredictedLogRevenue\"] = np.log1p(sub_df[\"PredictedLogRevenue\"])","0f159405":"pred_test","e9376d06":"import xgboost\n","39393d0f":"[d.shape for d in [dev_X, val_X, test_X]]","a1a45d21":"### traffic source \u548c target \u7684\u5173\u7cfb","3c9ae932":"\u4ece\u4e2d\u53ef\u4ee5\u770b\u51fa\u4e00\u4e2a\u91cd\u8981\u7684\u70b9\uff1a\n\n*The 80\/20 rule has proven true for many businesses\u2013only a small percentage of customers produce most of the revenue. As such, marketing teams are challenged to make appropriate investments in promotional strategies.*","f1525c9b":"\u8bbf\u5ba2\u4eba\u6570\u548c\u5171\u540c\u8bbf\u5ba2\u4eba\u6570\uff1a\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e2d\u7684\u4e0d\u540c\u8bbf\u5ba2\u6570\u91cf\uff0c\u4ee5\u53ca\u5171\u540c\u7684\u8bbf\u5ba2\u7684\u6570\u91cf\u3002","9a1e409e":"### \u5212\u5206\u6570\u636e\u96c6\u5408\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u6839\u636e\u65f6\u95f4\u521b\u5efa\u5f00\u53d1\u548c\u9a8c\u8bc1\u62c6\u5206\u6765\u6784\u5efa\u6a21\u578b\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u6700\u8fd1\u4e24\u4e2a\u6708\u4f5c\u4e3a\u9a8c\u8bc1\u6837\u672c\u3002","7452dddd":"## \u8bfb\u5165\u6570\u636e\n\n\u672c\u6570\u636e\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002","cabf45da":"# \u53c2\u8003\u8d44\u6599","8fd8f9d1":"### \u76ee\u6807\u53d8\u91cf","80d02a84":"\n\u63a8\u8bba\uff1a\n\n- \u8bbe\u5907\u6d4f\u89c8\u5668\u5206\u5e03\u5728\u975e\u96f6\u6536\u5165\u56fe\u7684\u8ba1\u6570\u548c\u8ba1\u6570\u65b9\u9762\u770b\u8d77\u6765\u76f8\u4f3c\n- \u5728\u8bbe\u5907\u7c7b\u522b\u65b9\u9762\uff0c\u4e0e\u79fb\u52a8\u8bbe\u5907\u76f8\u6bd4\uff0c\u684c\u9762\u4f3c\u4e4e\u5177\u6709\u66f4\u9ad8\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u767e\u5206\u6bd4\u3002\n- \u5728\u8bbe\u5907\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u867d\u7136\u8ba1\u6570\u7684\u6b21\u6570\u591a\u6765\u81eaWindows\uff0c\u4f46\u6536\u5165\u4e0d\u4e3a\u96f6\u7684\u8ba1\u6570\u6570\u91cf\u5bf9\u4e8eMacintosh\u6765\u8bf4\u66f4\u591a\u3002\n- Chrome\u64cd\u4f5c\u7cfb\u7edf\u7684\u975e\u96f6\u6536\u5165\u5360\u6bd4\u4e5f\u8f83\u9ad8\n- \u5728\u79fb\u52a8\u64cd\u4f5c\u7cfb\u7edf\u65b9\u9762\uff0c\u4e0eAndroid\u76f8\u6bd4\uff0ciOS\u62e5\u6709\u66f4\u591a\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570","90d407be":"## \u6bd4\u8d5b\u4ecb\u7ecd\n\n>> Google Analytics Customer Revenue Prediction \n\n**Objective of the competition:**\n\n\u5728\u672c\u6b21\u7ade\u8d5b\u4e2d\uff0c\u6211\u4eec\u9762\u4e34\u7684\u6311\u6218\u662f\u5206\u6790Google Merchandise Store\uff08\u4e5f\u79f0\u4e3aGStore\uff0c\u9500\u552e\u8c37\u6b4c\u5468\u8fb9\uff09\u5ba2\u6237\u6570\u636e\u96c6\uff0cpredicting the log of the total revenue per user, be aware that not all rows in `test.csv` will correspond to a row in the submission, but all unique `fullVisitorIds` will correspond to a row in the submission.\n\n\n\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002\u5728\u5176\u4e2d\u4e00\u4e2aJSON\u5217\uff08`total`\uff09\u4e2d\uff0c\u5b50\u5217 `transactionRevenue` \u5305\u542b\u6211\u4eec\u5c1d\u8bd5\u9884\u6d4b\u7684\u6536\u5165\u4fe1\u606f\u3002\u8be5\u5b50\u5217\u4ec5\u5b58\u5728\u4e8e\u8bad\u7ec3\u6570\u636e\u4e2d\u3002\u5177\u4f53\u7684\u6765\u8bf4\uff0c\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u7528\u6237\uff0c\u76ee\u6807\u662f\uff1a\n\n$$\n\\text{target}^\\text{user} = \\ln \\sum_{i=1}^n \\text{transaction}_i^\\text{user}\n$$","39b19cae":"- Simple Exploration+Baseline - GA Customer Revenue\n https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-baseline-ga-customer-revenue\n \n- 02-data analysis \u76f8\u5173\u53d8\u91cf\u5206\u6790\n https:\/\/www.kaggle.com\/gongheayng\/02-data-analysis","b836697b":"\n\u63a8\u8bba\uff1a\n\n- \u5728\u975e\u6d32\u5927\u9646\u7684\u60c5\u8282\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7f8e\u56fd\u7684\u8ba1\u6570\u6570\u91cf\u66f4\u591a\uff0c\u800c\u4e14\u6536\u5165\u975e\u96f6\u7684\u8ba1\u6570\u6700\u591a\n- \u867d\u7136\u4e9a\u6d32\u548c\u6b27\u6d32\u7684\u8ba1\u6570\u5f88\u591a\uff0c\u4f46\u6765\u81ea\u8fd9\u4e9b\u5927\u9646\u7684\u975e\u96f6\u6536\u5165\u6570\u91cf\u76f8\u5bf9\u8f83\u4f4e\u3002\n- \u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u6b21\u5927\u9646\u7684\u56fe\u63a8\u65ad\u524d\u4e24\u70b9\u3002\n- \u5982\u679c\u7f51\u7edc\u57df\u662f\u201cunknown.unknown\u201d\u800c\u4e0d\u662f\u201c\uff08\u672a\u8bbe\u7f6e\uff09\u201d\uff0c\u5219\u5177\u6709\u975e\u96f6\u6536\u5165\u7684\u8ba1\u6570\u6570\u91cf\u5f80\u5f80\u8f83\u4f4e\u3002","c57d7a24":"### \u5efa\u7acb\u548c\u8bad\u7ec3\u6a21\u578b","7cf4209f":"### target \u5f53\u6210\u65f6\u95f4\u5e8f\u5217\n\n","99681826":"\n\u5173\u4e8e\u6570\u636e\u96c6\uff1a\n\n\u4e0e\u5927\u591a\u6570\u5176\u4ed6\u7684kaggle\u6bd4\u8d5b\u7c7b\u4f3c\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86\u4e24\u4e2a\u6570\u636e\u96c6\n\n    train.csv\n    test.csv\n\n\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u5bf9\u5546\u5e97\u7684\u4e00\u6b21\u8bbf\u95ee\u3002\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u591a\u4e2a\u5217\u5305\u542b\u4e0d\u540c\u6df1\u5ea6\u7684JSON blob\u3002\u5728\u5176\u4e2d\u4e00\u4e2aJSON\u5217\uff08`total`\uff09\u4e2d\uff0c\u5b50\u5217 `transactionRevenue` \u5305\u542b\u6211\u4eec\u5c1d\u8bd5\u9884\u6d4b\u7684\u6536\u5165\u4fe1\u606f\u3002","71c7f478":"\n\u603b\u517112\u4e2a\u53d8\u91cf\uff1a\n\n1. `channelGrouping`  - \u7528\u6237\u901a\u8fc7\u5176\u8fdb\u5165\u5546\u5e97\u7684\u6e20\u9053\u3002\n1. `date` - \u7528\u6237\u8bbf\u95eeStore\u7684\u65e5\u671f\n1. `device` - \u7528\u6237\u8bbf\u95ee Store \u7684\u8bbe\u5907\u7c7b\u578b\n1. `fullVisitorId` - Google Merchandise Store\u7684\u6bcf\u4e2a\u7528\u6237\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n1. `geoNetwork`  - \u5305\u542b\u6709\u5173\u7528\u6237\u5730\u7406\u4f4d\u7f6e\u7684\u4fe1\u606f\u3002\n1. `sessionId` - \u6b64\u6b21\u8bbf\u95ee\u5546\u5e97\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\n1. `socialEngagementType` - Engagement type, either \"Socially Engaged\" or \"Not Socially Engaged\".\n1. `totals` - This section contains aggregate values across the session.\n1. `trafficSource` - This section contains information about the Traffic Source from which the session originated.\n1. `visitId`  - \u6b64\u4f1a\u8bdd\u7684\u6807\u8bc6\u7b26\u3002\u8fd9\u662f\u901a\u5e38\u5b58\u50a8\u4e3a_utmb cookie\u7684\u503c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4ec5\u5bf9\u7528\u6237\u800c\u8a00\u662f\u552f\u4e00\u7684\u3002\u5bf9\u4e8e\u5b8c\u5168\u552f\u4e00\u7684ID\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528fullVisitorId\u548cvisitId\u7684\u7ec4\u5408\u3002\n1. `visitNumber`  - \u6b64\u7528\u6237\u7684\u4f1a\u8bdd\u53f7\u3002\u5982\u679c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u5219\u5c06\u5176\u8bbe\u7f6e\u4e3a1\u3002\n1. `visitStartTime`  - \u65f6\u95f4\u6233\uff08\u8868\u793a\u4e3aPOSIX\u65f6\u95f4\uff09\u3002\n\n\u5176\u4e2d\u7684\u56db\u4e2a\u53d8\u91cf `device, geoNetwork, totals, trafficSource` \u8fdb\u4e00\u6b65\u5904\u7406\u6210\u591a\u4e2a\u53d8\u91cf\uff0c\u6700\u540e\u5206\u89e3\u621054\u4e2a\u7279\u5f81\u3002","758e322d":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Baseline-Model-\u5feb\u901f\u5c1d\u8bd5\" data-toc-modified-id=\"Baseline-Model-\u5feb\u901f\u5c1d\u8bd5-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Baseline Model \u5feb\u901f\u5c1d\u8bd5<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u6bd4\u8d5b\u4ecb\u7ecd\" data-toc-modified-id=\"\u6bd4\u8d5b\u4ecb\u7ecd-1.1\"><span class=\"toc-item-num\">1.1&nbsp;&nbsp;<\/span>\u6bd4\u8d5b\u4ecb\u7ecd<\/a><\/span><\/li><li><span><a href=\"#\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9\" data-toc-modified-id=\"\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9-1.2\"><span class=\"toc-item-num\">1.2&nbsp;&nbsp;<\/span>\u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9<\/a><\/span><\/li><li><span><a href=\"#\u8bfb\u5165\u6570\u636e\" data-toc-modified-id=\"\u8bfb\u5165\u6570\u636e-1.3\"><span class=\"toc-item-num\">1.3&nbsp;&nbsp;<\/span>\u8bfb\u5165\u6570\u636e<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Target-variable\" data-toc-modified-id=\"Target-variable-1.3.1\"><span class=\"toc-item-num\">1.3.1&nbsp;&nbsp;<\/span>Target variable<\/a><\/span><\/li><li><span><a href=\"#full-Visitor-ld\" data-toc-modified-id=\"full-Visitor-ld-1.3.2\"><span class=\"toc-item-num\">1.3.2&nbsp;&nbsp;<\/span>full Visitor ld<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#\u57fa\u672c\u6570\u636e\u5206\u6790\" data-toc-modified-id=\"\u57fa\u672c\u6570\u636e\u5206\u6790-1.4\"><span class=\"toc-item-num\">1.4&nbsp;&nbsp;<\/span>\u57fa\u672c\u6570\u636e\u5206\u6790<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u76ee\u6807\u53d8\u91cf\" data-toc-modified-id=\"\u76ee\u6807\u53d8\u91cf-1.4.1\"><span class=\"toc-item-num\">1.4.1&nbsp;&nbsp;<\/span>\u76ee\u6807\u53d8\u91cf<\/a><\/span><\/li><li><span><a href=\"#\u8bbe\u5907\u4e0e-target-\u7684\u5173\u7cfb\" data-toc-modified-id=\"\u8bbe\u5907\u4e0e-target-\u7684\u5173\u7cfb-1.4.2\"><span class=\"toc-item-num\">1.4.2&nbsp;&nbsp;<\/span>\u8bbe\u5907\u4e0e target \u7684\u5173\u7cfb<\/a><\/span><\/li><li><span><a href=\"#target-\u5f53\u6210\u65f6\u95f4\u5e8f\u5217\" data-toc-modified-id=\"target-\u5f53\u6210\u65f6\u95f4\u5e8f\u5217-1.4.3\"><span class=\"toc-item-num\">1.4.3&nbsp;&nbsp;<\/span>target \u5f53\u6210\u65f6\u95f4\u5e8f\u5217<\/a><\/span><\/li><li><span><a href=\"#geographic-\u4e0e-target-\u5173\u7cfb\" data-toc-modified-id=\"geographic-\u4e0e-target-\u5173\u7cfb-1.4.4\"><span class=\"toc-item-num\">1.4.4&nbsp;&nbsp;<\/span>geographic \u4e0e target \u5173\u7cfb<\/a><\/span><\/li><li><span><a href=\"#traffic-source-\u548c-target-\u7684\u5173\u7cfb\" data-toc-modified-id=\"traffic-source-\u548c-target-\u7684\u5173\u7cfb-1.4.5\"><span class=\"toc-item-num\">1.4.5&nbsp;&nbsp;<\/span>traffic source \u548c target \u7684\u5173\u7cfb<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Baseline-model-\u5efa\u7acb\" data-toc-modified-id=\"Baseline-model-\u5efa\u7acb-1.5\"><span class=\"toc-item-num\">1.5&nbsp;&nbsp;<\/span>Baseline model \u5efa\u7acb<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u6570\u636e\u5904\u7406\" data-toc-modified-id=\"\u6570\u636e\u5904\u7406-1.5.1\"><span class=\"toc-item-num\">1.5.1&nbsp;&nbsp;<\/span>\u6570\u636e\u5904\u7406<\/a><\/span><\/li><li><span><a href=\"#\u5212\u5206\u6570\u636e\u96c6\u5408\" data-toc-modified-id=\"\u5212\u5206\u6570\u636e\u96c6\u5408-1.5.2\"><span class=\"toc-item-num\">1.5.2&nbsp;&nbsp;<\/span>\u5212\u5206\u6570\u636e\u96c6\u5408<\/a><\/span><\/li><li><span><a href=\"#\u5efa\u7acb\u548c\u8bad\u7ec3\u6a21\u578b\" data-toc-modified-id=\"\u5efa\u7acb\u548c\u8bad\u7ec3\u6a21\u578b-1.5.3\"><span class=\"toc-item-num\">1.5.3&nbsp;&nbsp;<\/span>\u5efa\u7acb\u548c\u8bad\u7ec3\u6a21\u578b<\/a><\/span><\/li><li><span><a href=\"#\u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30\" data-toc-modified-id=\"\u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30-1.5.4\"><span class=\"toc-item-num\">1.5.4&nbsp;&nbsp;<\/span>\u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30<\/a><\/span><\/li><li><span><a href=\"#\u5c01\u88c5\" data-toc-modified-id=\"\u5c01\u88c5-1.5.5\"><span class=\"toc-item-num\">1.5.5&nbsp;&nbsp;<\/span>\u5c01\u88c5<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#XGBoost\" data-toc-modified-id=\"XGBoost-1.6\"><span class=\"toc-item-num\">1.6&nbsp;&nbsp;<\/span>XGBoost<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b\" data-toc-modified-id=\"\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b-1.6.1\"><span class=\"toc-item-num\">1.6.1&nbsp;&nbsp;<\/span>\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b<\/a><\/span><\/li><\/ul><\/li><\/ul><\/li><li><span><a href=\"#\u53c2\u8003\u8d44\u6599\" data-toc-modified-id=\"\u53c2\u8003\u8d44\u6599-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>\u53c2\u8003\u8d44\u6599<\/a><\/span><\/li><\/ul><\/div>","68f06f62":"### \u8bbe\u5907\u4e0e target \u7684\u5173\u7cfb\n\n\u4e0e\u8bbe\u5907\u76f8\u5173\u7684\u4e09\u4e2a\u91cd\u8981\u5c5e\u6027\u662f\uff1a\n\n- \u6d4f\u89c8\u5668(chrome,firefox, IE)\n- \u64cd\u4f5c\u7cfb\u7edf\uff08mac, linux, windows\uff09\n- \u8bbe\u5907\u7c7b\u578b\uff08\u79fb\u52a8\u7aef\uff0c\u684c\u9762\u7aef\u548c\u5e73\u677f\uff09\n\n\u6211\u4eec\u8003\u5bdf\u8fd9\u4e09\u4e2a\u53d8\u91cf\u548c\u76ee\u6807\u53d8\u91cf\u7684\u5173\u7cfb\u3002","186a7649":"# Baseline Model \u5feb\u901f\u5c1d\u8bd5\n\n*By Jared Gong*\n\n\u672c\u6587\u6863\u4e13\u6ce8\u4e8e\u5c1d\u8bd5\u5feb\u901f\u5efa\u7acb baseline model.","5baa1885":"### geographic \u4e0e target \u5173\u7cfb","30da23c0":"## \u57fa\u672c\u6570\u636e\u5206\u6790","0c4dc8cf":"## Baseline model \u5efa\u7acb\n\n\u6211\u4eec\u5e0c\u671b\u5feb\u901f\u5efa\u7acb\u4e00\u4e2a Baseline Model.\n\n**\u6bd4XGBOOST\u66f4\u5feb--LightGBM\u4ecb\u7ecd:**\n\nxgboost\u7684\u51fa\u73b0\uff0c\u8ba9\u6570\u636e\u6c11\u5de5\u4eec\u544a\u522b\u4e86\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4eec\uff1aRF\u3001GBM\u3001SVM\u3001LASSO........\u3002\u73b0\u5728\uff0c\u5fae\u8f6f\u63a8\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684boosting\u6846\u67b6\uff0c\u60f3\u8981\u6311\u6218xgboost\u7684\u6c5f\u6e56\u5730\u4f4d\u3002 https:\/\/zhuanlan.zhihu.com\/p\/25308051","0cbaae72":"### \u5c01\u88c5\n\n\u628a\u6574\u4e2a\u5efa\u6a21\u8fc7\u7a0b\u90fd\u5c01\u88c5\u6210\u4e00\u6bb5\u4ee3\u7801\u3002","e1ad36a1":"## \u76f8\u5173\u6709\u8da3\u7684\u77e5\u8bc6\u70b9","d1ec7995":"### \u6a21\u578b\u9884\u6d4b\u548c\u8bc4\u4f30","4321e868":"### \u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b\n","f0796b83":"\n\u63a8\u8bba\uff1a\n\n- \u5728\u6d41\u91cf\u6765\u6e90\u56fe\u4e2d\uff0c\u5c3d\u7ba1Youtube\u5728\u6570\u636e\u96c6\u4e2d\u5177\u6709\u5927\u91cf\u8ba1\u6570\uff0c\u4f46\u975e\u96f6\u6536\u5165\u8ba1\u6570\u7684\u6570\u91cf\u975e\u5e38\u5c11\u3002\n- Google plex\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u4e0e\u6d41\u91cf\u6765\u6e90\u56fe\u4e2d\u7684\u603b\u8ba1\u6570\u4e4b\u6bd4\u5f88\u9ad8\u3002\n- \u5728\u6d41\u91cf\u6765\u6e90\u5a92\u4f53\u4e0a\uff0c\u4e0e\u201corganic\u201d\u5a92\u4f53\u76f8\u6bd4\uff0c\u201creferral\u201d\u5177\u6709\u66f4\u591a\u7684\u975e\u96f6\u6536\u5165\u8ba1\u6570\u3002","7b0161c2":"\n\u5728\u6d4b\u8bd5\u96c6\u4e2d\uff0c\u6211\u4eec\u7684\u65e5\u671f\u4e3a2017\u5e748\u67082\u65e5\u81f32018\u5e744\u670830\u65e5\u3002\u56e0\u6b64\uff0c\u8bad\u7ec3\u548c\u6d4b\u8bd5\u96c6\u4e4b\u95f4\u6ca1\u6709\u5171\u540c\u65e5\u671f\u3002\u56e0\u6b64\uff0c\u5bf9\u6b64\u6570\u636e\u96c6\u8fdb\u884c\u57fa\u4e8e\u65f6\u95f4\u7684\u9a8c\u8bc1\u53ef\u80fd\u662f\u4e2a\u597d\u4e3b\u610f\u3002","a55f06c3":"### \u6570\u636e\u5904\u7406","5054ecd0":"### full Visitor ld\n\n\u4e0e\u5ba2\u6237 Id \u76f8\u5173\u7684\u53d8\u91cf\u5305\u62ec `fullVisitorId, sessionId, visitId, visitNumber`\uff0c\u4e00\u4e2a `fullVisitorId` \u5305\u542b\u591a\u4e2a `sessionId`, \u800c\u4e00\u4e2a `sessionId` \u552f\u4e00\u5bf9\u5e94\u4e00\u4e2a `visitId`\uff0c\u4e2a\u6570\u548c `visitNumber` \u76f8\u5173\u3002\n\n> \u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u4ee5 `fullVisitorId` \u4e3a index \u7684\u6570\u636e\u6846\u3002","d72a9e84":"\n\u6211\u4eec\u9884\u6d4b\u6bcf\u4e2a\u7528\u6237\u7684\u6240\u6709\u4ea4\u6613\u603b\u548c\u7684\u81ea\u7136\u5bf9\u6570\u3002\u5bf9\u4e8e\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6bcf\u4e2a\u7528\u6237\uff0c\u76ee\u6807\u662f\uff1a\n\n$$\n\\text{target}^\\text{user} = \\ln \\sum_{i=1}^n \\text{transaction}_i^\\text{user}\n$$\n\n\u770b\u770b\u8fdb\u884c\u6563\u70b9\u56fe\u3002","5352c8f9":"**Feature Importance:**\n\nNow let us have a look at the important features of the light gbm model.","fa73fa31":"\n\u63a8\u8bba\uff1a\n\n- \u6211\u4eec\u7684\u8bad\u7ec3\u6570\u636e\u96c6\u4e2d\u5305\u542b2016\u5e748\u67081\u65e5\u81f32017\u5e747\u670831\u65e5\u7684\u6570\u636e\n- 2016\u5e7411\u6708\uff0c\u867d\u7136\u8bbf\u5ba2\u4eba\u6570\u6709\u6240\u589e\u52a0\uff0c\u4f46\u5728\u6b64\u671f\u95f4\u975e\u96f6\u6536\u5165\u8ba1\u6570\u6ca1\u6709\u589e\u52a0\u3002","78567a68":"## XGBoost","3e66fa35":"###  Target variable"}}