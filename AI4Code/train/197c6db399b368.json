{"cell_type":{"8337ed7f":"code","d20c839e":"code","f8eb8b28":"code","3e2b9519":"code","0bb199dd":"code","654ce990":"code","c5e1128f":"code","9f0b300e":"code","461c9795":"code","8f130bf3":"code","f0001fd9":"code","f100b339":"code","865eb941":"code","7c68c1c6":"code","9e99ba71":"code","88ed4962":"code","67bb178e":"code","258b5c00":"code","e87545b0":"code","bfb157b9":"code","980f83c4":"code","195d67a3":"code","60fa8f1d":"code","a6d4bcea":"code","1a952580":"code","591ed9b8":"code","4d60461a":"code","ede1fe65":"code","fcb38399":"markdown","54024483":"markdown","ac067aaf":"markdown","c04f3bea":"markdown","018556f7":"markdown","c2feeb9a":"markdown","de716981":"markdown","874d18ac":"markdown","98c283ec":"markdown","5b8dab45":"markdown","a3da29d7":"markdown","bc8efc35":"markdown","f6403eae":"markdown","176f3250":"markdown","6b5baace":"markdown","8c9cd68c":"markdown","3bd9081d":"markdown","8e80a649":"markdown","cf94b5b9":"markdown"},"source":{"8337ed7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom IPython.display import Image\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d20c839e":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ncopy_test_df = test_df\nsub_df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","f8eb8b28":"train_df.head()","3e2b9519":"test_df","0bb199dd":"train_df.info()","654ce990":"train_df.describe()","c5e1128f":"train_df.shape","9f0b300e":"train_df.info()","461c9795":"train_df = pd.concat([train_df,pd.get_dummies(train_df['Sex'])], axis = 1)\ntest_df = pd.concat([test_df,pd.get_dummies(test_df['Sex'])], axis = 1)","8f130bf3":"plt = train_df.Survived.value_counts().plot(kind='bar',color=['red','green'])\nplt.set_xlabel('Survived or not')\nplt.set_ylabel('Passenger Count')","f0001fd9":"plt = train_df[['Pclass', 'Survived']].groupby('Pclass').mean().Survived.plot(kind='bar',color=['blue','green','orange'])\nplt.set_xlabel('Pclass')\nplt.set_ylabel('Survival Probability')","f100b339":"plt = train_df.Sex.value_counts().sort_index().plot(kind='bar', color=['blue','green'])\nplt.set_xlabel('Sex')\nplt.set_ylabel('Passenger count')","865eb941":"plt = train_df[['Sex', 'Survived']].groupby('Sex').mean().Survived.plot(kind='bar', color=['blue','green'])\nplt.set_xlabel('Sex')\nplt.set_ylabel('Survival Probability')","7c68c1c6":"plt = train_df.Parch.value_counts().sort_index().plot(kind='bar')\nplt.set_xlabel('Parch')\nplt.set_ylabel('Passenger count')","9e99ba71":"plt = train_df[['Parch', 'Survived']].groupby('Parch').mean().Survived.plot(kind='bar')\nplt.set_xlabel('Parch')\nplt.set_ylabel('Survival Probability')","88ed4962":"train_df = train_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked', 'Sex'], axis = 1)\ntest_df = test_df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Embarked', 'Sex'], axis = 1)","67bb178e":"train_df.info()\ntest_df.info()","258b5c00":"train_df['Age'].fillna(train_df['Age'].mean(), inplace = True)\ntest_df['Age'].fillna(test_df['Age'].mean(), inplace = True)\ntest_df['Fare'].fillna(test_df['Age'].mean(), inplace = True)\ntrain_df.info()\ntest_df.info()","e87545b0":"X_train = X\ny_train = train_df[\"Survived\"]\nX_test = test_df","bfb157b9":"d_tree = DecisionTreeClassifier(criterion = 'entropy', max_depth=6)\nd_tree.fit(X_train, y_train)\n\ny_pred = d_tree.predict(X_test)\nacc_d_tree = round(d_tree.score(X_train, y_train) * 100, 2)\nprint(\"Score: \",acc_d_tree)","980f83c4":"featureNames = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'female', 'male']\nexport_graphviz(d_tree, out_file='tree_limited.dot', feature_names = featureNames,\n                class_names = np.unique(y_train.astype('str')),\n                rounded = True, proportion = False, precision = 2, filled = True)","195d67a3":"!dot -Tpng tree_limited.dot -o tree_limited.png -Gdpi=600\nImage(filename = 'tree_limited.png')","60fa8f1d":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\ny_pred_RF = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest\n\nprint(\"Score: \",acc_random_forest)","a6d4bcea":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred_LR = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, y_train) * 100, 2)\n\nprint(\"Score: \",acc_log)","1a952580":"svc = SVC()\nsvc.fit(X_train, y_train)\ny_pred_SVC = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, y_train) * 100, 2)\n\nprint(\"Score: \",acc_svc)","591ed9b8":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\ny_pred_KNN = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\n\nprint(\"Score: \",acc_knn)","4d60461a":"models = pd.DataFrame({\n    'Model': ['Random Forest','Decision Tree', 'Logistic Regression', 'Support Vector Machines', 'KNN'],\n    'Score': [acc_random_forest, acc_d_tree,  acc_log, acc_svc, acc_knn]\n})\n\nmodels.sort_values(by='Score', ascending=False)","ede1fe65":"submission = pd.DataFrame({\n        \"PassengerId\": copy_test_df[\"PassengerId\"],\n        \"Survived\": y_pred_RF\n    })\n\n\nsubmission.to_csv(path_or_buf=\"submission.csv\", index=False)\nsubmission.head()","fcb38399":"#### Decision Tree","54024483":"#### KNN","ac067aaf":"### Submission","c04f3bea":"##### Visualizating the amount of the different passenger's family sizes and their respective Survival Probability","018556f7":"### Data Visualization","c2feeb9a":"##### Checking which class had a higher rate of survival.","de716981":"##### Visualizing the 'Sex' column","874d18ac":"### Dropping the unnecessary features","98c283ec":"#### Model evaluation","5b8dab45":"Conclusions made from the above plots:\n* Majority of passengers couldn't survive.\n* 1st class had a higher chance of survival than the other two classes.\n* Although the majority of the passengers were Male in every class. But, the survival probability for female was higher.\n* The passengers having three children\/parents had more survival probability.","a3da29d7":"## Getting the data","bc8efc35":"##### Visualizing the target column(i.e. 'Survived')","f6403eae":"### Converting the categorical variable 'Sex' into indicator variables.","176f3250":"##### Random Forest Classifier","6b5baace":"#### Logistic regression","8c9cd68c":"#### Support Vector Machines(SVM)","3bd9081d":"### Splitting the given data","8e80a649":"### Training the Models","cf94b5b9":"#### Visualizing Decision Tree"}}