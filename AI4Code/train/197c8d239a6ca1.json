{"cell_type":{"8c6b2f94":"code","2433fa36":"code","246b8efe":"code","ffcf98a7":"code","8e505854":"code","ab94fe06":"code","18b35082":"code","f04cb699":"code","b19758ea":"code","e0bd012e":"code","85cf060d":"code","0a3d7584":"code","71c6dbec":"code","2444883e":"code","2f418a69":"code","f00ff7e4":"code","2fc443a5":"code","f90e145b":"code","fa1ee645":"code","2b5fc0be":"code","0d74ed2f":"code","d97fda82":"code","acf5cdf7":"code","c7679671":"code","038e5044":"code","58889229":"code","65a84842":"code","ef1cf71e":"code","bfdcaabe":"code","61a20aec":"code","930ff570":"code","fd19a8b0":"code","0750aa77":"code","e23a999b":"code","e2906edf":"code","24d8abc6":"code","9f89d740":"code","9da21ca1":"code","a87a0b47":"code","354f50d2":"code","50d5eb32":"code","9df49537":"code","37f52331":"code","3cda039c":"code","cbf7ab4c":"code","5da01280":"code","afacadd9":"code","27e9c8ae":"code","69e3adee":"markdown"},"source":{"8c6b2f94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2433fa36":"my_data = pd.read_csv('..\/input\/young-people-survey\/responses.csv')\nmy_data.head()","246b8efe":"music_data = my_data.iloc[:,0:19]\nmusic_data.columns\n","ffcf98a7":"print(music_data.isnull().sum())","8e505854":"music_data.dropna(inplace = True)\nmusic_data.reset_index(drop=True,inplace=True)\nrow = len(music_data.index)","ab94fe06":"music_data.info()","18b35082":"corr1 = music_data.corr()\nprint (corr1)\n","f04cb699":"plt.figure(figsize= (16,6))\nsns.heatmap(corr1)","b19758ea":"movie_data = my_data.iloc[:,19:31]\nmovie_data.columns","e0bd012e":"print(movie_data.isnull().sum())","85cf060d":"movie_data.dropna(inplace = True)\nmovie_data.reset_index(drop=True,inplace=True)\nrow = len(movie_data.index)\nmovie_data.info()","0a3d7584":"corr2 = movie_data.corr()\nprint (corr2)","71c6dbec":"plt.figure(figsize= (16,6))\nsns.heatmap(corr2)","2444883e":"hobbies_interests_data = my_data.iloc[:,31:63]\nhobbies_interests_data.columns","2f418a69":"print(hobbies_interests_data.isnull().sum())","f00ff7e4":"hobbies_interests_data.dropna(inplace = True)\nhobbies_interests_data.reset_index(drop=True,inplace=True)\nrow = len(hobbies_interests_data.index)\nhobbies_interests_data.info()","2fc443a5":"corr3 = hobbies_interests_data.corr()\nprint (corr3)","f90e145b":"plt.figure(figsize= (16,6))\nsns.heatmap(corr3)","fa1ee645":"phobias_data = my_data.iloc[:,63:73]\nphobias_data.columns","2b5fc0be":"print(phobias_data.isnull().sum())","0d74ed2f":"phobias_data.dropna(inplace = True)\nphobias_data.reset_index(drop=True,inplace=True)\nrow = len(phobias_data.index)\nphobias_data.info()","d97fda82":"corr4 = phobias_data.corr()\nprint (corr4)","acf5cdf7":"plt.figure(figsize= (16,6))\nsns.heatmap(corr4)","c7679671":"health_habits_data = my_data.iloc[:,73:76]\nhealth_habits_data.columns","038e5044":"print(health_habits_data.isnull().sum())","58889229":"health_habits_data.dropna(inplace = True)\nhealth_habits_data.reset_index(drop=True,inplace=True)\nrow = len(health_habits_data.index)\nhealth_habits_data.info()","65a84842":"s = (health_habits_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nfrom sklearn.preprocessing import LabelEncoder\nlabel_health_habits_data = health_habits_data.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_health_habits_data[col] = label_encoder.fit_transform(health_habits_data[col])","ef1cf71e":"corr5 = label_health_habits_data.corr()\nprint (corr5)","bfdcaabe":"plt.figure(figsize= (6,4))\nsns.heatmap(corr5)","61a20aec":"personality_data = my_data.iloc[:,76:133]\npersonality_data.columns","930ff570":"print(personality_data.isnull().sum())","fd19a8b0":"personality_data.dropna(inplace = True)\npersonality_data.reset_index(drop=True,inplace=True)\nrow = len(personality_data.index)\npersonality_data.info()","0750aa77":"s = (personality_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nfrom sklearn.preprocessing import LabelEncoder\nlabel_personality_data = personality_data.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_personality_data[col] = label_encoder.fit_transform(personality_data[col])","e23a999b":"corr6 = label_personality_data.corr()\nprint (corr6)","e2906edf":"plt.figure(figsize= (20,10))\nsns.heatmap(corr6)","24d8abc6":"spending_habits_data = my_data.iloc[:,133:140]\nspending_habits_data.columns","9f89d740":"print(spending_habits_data.isnull().sum())","9da21ca1":"spending_habits_data.dropna(inplace = True)\nspending_habits_data.reset_index(drop=True,inplace=True)\nrow = len(spending_habits_data.index)\nspending_habits_data.info()","a87a0b47":"corr7 = spending_habits_data.corr()\nprint (corr7)","354f50d2":"sns.heatmap(corr7)","50d5eb32":"demographics_data = my_data.iloc[:,140:150]\ndemographics_data.columns","9df49537":"print(demographics_data.isnull().sum())","37f52331":"demographics_data.dropna(inplace = True)\ndemographics_data.reset_index(drop=True,inplace=True)\nrow = len(demographics_data.index)\ndemographics_data.info()","3cda039c":"s = (demographics_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nfrom sklearn.preprocessing import LabelEncoder\nlabel_demographics_data = demographics_data.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_demographics_data[col] = label_encoder.fit_transform(demographics_data[col])","cbf7ab4c":"corr8 = label_demographics_data.corr()\nprint (corr8)","5da01280":"sns.heatmap(corr8)","afacadd9":"my_data.dropna(inplace = True)\nmy_data.reset_index(drop=True,inplace=True)\nrow = len(my_data.index)\nmy_data.info()\n   ","27e9c8ae":"s = (my_data.dtypes == 'object')\nobject_cols = list(s[s].index)\nfrom sklearn.preprocessing import LabelEncoder\nlabel_my_data = my_data.copy()\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_my_data[col] = label_encoder.fit_transform(my_data[col])","69e3adee":"# correlation coffecint between each question in the field and whole field."}}