{"cell_type":{"2ba00984":"code","7b5273ae":"code","e1320aa6":"code","2809d36d":"code","e8df0935":"code","491ed8e4":"code","24fa332c":"code","59336296":"code","78f9302e":"code","63555d59":"code","b093a79c":"code","0dc8a3f6":"code","590c086c":"code","acc41f60":"code","f2a3e538":"code","93ea6efc":"code","013f0118":"code","e402eab2":"code","1a2b5d4f":"code","d7cb766a":"code","8c9d03ae":"code","c3b54601":"code","b0d215ad":"code","a85c5d47":"code","5a7adc1b":"code","d68cc360":"code","37c1ac3e":"code","f30ba41d":"code","9dca812b":"code","de042e85":"markdown","a9bb107f":"markdown","3f86815f":"markdown","78564018":"markdown","f2f245d0":"markdown","e41851a6":"markdown","5fc7dac4":"markdown","78a175be":"markdown"},"source":{"2ba00984":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.impute import SimpleImputer","7b5273ae":"train_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\nsubmission_csv = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","e1320aa6":"train_data['Date'] = pd.to_datetime(train_data['Date'], infer_datetime_format=True)\ntest_data['Date'] = pd.to_datetime(test_data['Date'], infer_datetime_format=True)","2809d36d":"train_data.loc[:, 'Date'] = train_data.Date.dt.strftime('%y%m%d')\ntrain_data.loc[:, 'Date'] = train_data['Date'].astype(int)\n\ntest_data.loc[:, 'Date'] = test_data.Date.dt.strftime('%y%m%d')\ntest_data.loc[:, 'Date'] = test_data['Date'].astype(int)","e8df0935":"train_data['Province_State'] = np.where(train_data['Province_State'] == 'nan',train_data['Country_Region'],train_data['Province_State'])\ntest_data['Province_State'] = np.where(test_data['Province_State'] == 'nan',test_data['Country_Region'],test_data['Province_State'])","491ed8e4":"convert_dict = {'Province_State': str}\ntrain_data = train_data.astype(convert_dict)\ntest_data = test_data.astype(convert_dict)","24fa332c":"test_data.head()","59336296":"train_data.head()","78f9302e":"sns.countplot(y=\"Country_Region\", data=train_data,order=train_data[\"Country_Region\"].value_counts(ascending=False).iloc[:10].index)","63555d59":"sns.regplot(x=train_data[\"ConfirmedCases\"], y=train_data[\"Fatalities\"], fit_reg=True)","b093a79c":"sns.jointplot(x=train_data[\"ConfirmedCases\"], y=train_data[\"Fatalities\"],kind='scatter')\n","0dc8a3f6":"#get list of categorical variables\ns = (train_data.dtypes == 'object')\nobject_cols = list(s[s].index)","590c086c":"from sklearn.preprocessing import LabelEncoder","acc41f60":"object_cols","f2a3e538":"label_encoder1 = LabelEncoder()\nlabel_encoder2 = LabelEncoder()\n\ntrain_data['Province_State'] = label_encoder1.fit_transform(train_data['Province_State'])\ntest_data['Province_State'] = label_encoder1.transform(test_data['Province_State'])\n\ntrain_data['Country_Region'] = label_encoder2.fit_transform(train_data['Country_Region'])\ntest_data['Country_Region'] = label_encoder2.transform(test_data['Country_Region'])\n\n    ","93ea6efc":"train_data.head()","013f0118":"test_data.head()","e402eab2":"Test_id = test_data.ForecastId","1a2b5d4f":"train_data.drop(['Id'], axis=1, inplace=True)\ntest_data.drop('ForecastId', axis=1, inplace=True)","d7cb766a":"missing_val_count_by_column = (train_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column>0])","8c9d03ae":"from xgboost import XGBRegressor","c3b54601":"train_data.head()","b0d215ad":"X_train = train_data[['Province_State','Country_Region','Date']]\ny_train = train_data[['ConfirmedCases', 'Fatalities']]","a85c5d47":"y_train_confirm = y_train.ConfirmedCases\ny_train_fatality = y_train.Fatalities","5a7adc1b":"x_train = X_train.iloc[:,:].values\nx_test = X_train.iloc[:,:].values","d68cc360":"model1 = XGBRegressor(n_estimators=40000)\nmodel1.fit(X_train, y_train_confirm)\ny_pred_confirm = model1.predict(test_data)","37c1ac3e":"model2 = XGBRegressor(n_estimators=20000)\nmodel2.fit(X_train,y_train_fatality )\ny_pred_fat = model2.predict(test_data)","f30ba41d":"df_sub = pd.DataFrame()\ndf_sub['ForecastId'] = Test_id\ndf_sub['ConfirmedCases'] = y_pred_confirm\ndf_sub['Fatalities'] = y_pred_fat\ndf_sub.to_csv('submission.csv', index=False)","9dca812b":"df_sub","de042e85":"**Convert String Datetime to python datetime**","a9bb107f":"**Check missing value**","3f86815f":"https:\/\/www.kaggle.com\/milantripathi\/covid19-forecasting based on. Study was done for the 4th week. Improved models parameters.Also added Visualizations.","78564018":"**Label Encoding Country**","f2f245d0":"**Submission**","e41851a6":"**Try using Label Encoder**","5fc7dac4":"**Loading Training and Testing Data**","78a175be":"**Make model XGBRegressor**"}}