{"cell_type":{"420b8134":"code","d7562e29":"code","0cb6511d":"code","7d5722c8":"code","4c2e17a8":"code","06d68937":"code","cad25ee6":"code","7d824117":"code","621dc5b4":"code","d8c1be9f":"code","3559f789":"code","16d7a93e":"code","7db8769e":"code","417f2db4":"code","b033f41b":"code","4375899f":"code","31128a98":"code","404effd0":"code","ea3e2935":"code","5a3c9bef":"code","5986ba35":"markdown","cfef0c84":"markdown","d52f713a":"markdown","8278b23a":"markdown","58471ecd":"markdown","316ea189":"markdown","93df9e36":"markdown","d23a7191":"markdown","108451bb":"markdown","b8948ba9":"markdown","780232a6":"markdown","a9d1fa32":"markdown","c584cea7":"markdown","fa12b7ee":"markdown","3e78cdb5":"markdown","e70429b7":"markdown","d5d2db4b":"markdown","0b2d3c78":"markdown","0fa9b10d":"markdown"},"source":{"420b8134":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d7562e29":"df = pd.read_csv('..\/input\/knn-project-data\/KNN_Project_Data')","0cb6511d":"df.head()","7d5722c8":"sns.pairplot(data=df, palette='viridis')","4c2e17a8":"from sklearn.preprocessing import StandardScaler","06d68937":"scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))","cad25ee6":"df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])\ndf_feat.head()","7d824117":"from sklearn.model_selection import train_test_split","621dc5b4":"X_train, X_test, y_train, y_test = train_test_split(df_feat, df['TARGET CLASS'], test_size=0.30)","d8c1be9f":"from sklearn.neighbors import KNeighborsClassifier","3559f789":"knn_model = KNeighborsClassifier(n_neighbors=1)","16d7a93e":"knn_model.fit(X_train, y_train)","7db8769e":"predictions = knn_model.predict(X_test)","417f2db4":"from sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np","b033f41b":"print(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test, predictions))","4375899f":"error_data = []\n\nfor i in range(1,50):\n    knn_model = KNeighborsClassifier(n_neighbors=i)\n    knn_model.fit(X_train, y_train)\n    predictions = knn_model.predict(X_test)\n    error_data.append(np.mean(y_test != predictions))","31128a98":"error_data","404effd0":"plt.figure(figsize=(10,4))\nplt.plot(range(1,50), error_data, linestyle='--', markerfacecolor='red', markersize=10, marker='o')","ea3e2935":"knn_model = KNeighborsClassifier(n_neighbors=42)\nknn_model.fit(X_train, y_train)\npredictions = knn_model.predict(X_test)\n","5a3c9bef":"print(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","5986ba35":"# Standardize the Variables\n\nTime to standardize the variables.\n\n**Import StandardScaler from Scikit learn.**","cfef0c84":"**Now create the following plot using the information from your for loop.**","d52f713a":"**Check the head of the dataframe.**","8278b23a":"## Retrain with new K Value\n\n**Retrain your model with the best K value (up to you to decide what you want) and re-do the classification report and the confusion matrix.**","58471ecd":"**Fit this KNN model to the training data.**","316ea189":"# EDA\n\nSince this data is artificial, we'll just do a large pairplot with seaborn.\n\n**Use seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**","93df9e36":"# Choosing a K Value\nLet's go ahead and use the elbow method to pick a good K Value!\n\n**Create a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list.**","d23a7191":"# Predictions and Evaluations\nLet's evaluate our KNN model!","108451bb":"# Using KNN\n\n**Import KNeighborsClassifier from scikit learn.**","b8948ba9":"**Create a StandardScaler() object called scaler and fit the dataframe.**","780232a6":"### Jose Portilla's Course project solution\n\n\n# K Nearest Neighbors Project \n\nIn this project we will standardize the data and try to classify our data based on the Target Class column. \n\n## Import Libraries\n**Import pandas,seaborn, and the usual libraries.**","a9d1fa32":"# Train Test Split\n\n**Use train_test_split to split your data into a training set and a testing set.**","c584cea7":"## Get the Data\n**Read the 'KNN_Project_Data csv file into a dataframe **","fa12b7ee":"**Create a KNN model instance with n_neighbors=1**","3e78cdb5":"**Convert the scaled features to a dataframe and check the head of this dataframe to make sure the scaling worked.**","e70429b7":"**Use the .transform() method to transform the features to a scaled version.**","d5d2db4b":"scaler = StandardScaler()\nscaler.fit(df.drop('TARGET CLASS', axis=1))","0b2d3c78":"**Use the predict method to predict values using your KNN model and X_test.**","0fa9b10d":"** Create a confusion matrix and classification report.**"}}