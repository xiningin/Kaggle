{"cell_type":{"dff2dd1d":"code","8e243934":"code","2732c2ae":"code","4924a7cf":"code","aa3a1e2c":"code","52135e55":"code","c91a8605":"code","799b87ac":"code","852d721b":"code","44293524":"code","fcb35d2d":"code","708dcd0d":"code","2863a4e7":"code","2bf96388":"code","af2da755":"code","2acd550c":"code","8a8f3fdc":"code","a8d6998f":"code","7ef2ee3e":"code","d601b6cd":"code","91093c03":"code","eddb95b3":"code","6d056b61":"code","fa5f872c":"code","554c4bbc":"code","2c693182":"code","fe315694":"code","e6e1f7a0":"code","5c5eb488":"code","8e69574f":"code","87663ad7":"code","55c6a7e3":"code","62190954":"markdown","692e525d":"markdown","b674eb8a":"markdown","aa9f9fae":"markdown","2a2e0c6a":"markdown","4d2bc406":"markdown","e27edc89":"markdown"},"source":{"dff2dd1d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport pprint\n%matplotlib inline ","8e243934":"df=pd.read_csv(r'..\/input\/adult-income-dataset\/adult.csv')\npprint.pprint(df.head())\nprint('\\n\\n')\npprint.pprint(df.shape)","2732c2ae":"sns.heatmap(df.isnull())","4924a7cf":"cat_df=df.select_dtypes('object')\ncat_df.head()","aa3a1e2c":"print('unique elements of education column: \\n')\npprint.pprint(df.education.unique())\nprint('\\n\\n')\nprint('unique elements of marital-status column: \\n')\npprint.pprint(df['marital-status'].unique())\nprint('\\n\\n')\nprint('unique elements of occupation: \\n')\npprint.pprint(df['occupation'].unique())\nprint('\\n\\n')\nprint('unique elements of workclass: \\n')\npprint.pprint(df['workclass'].unique())\nprint('\\n\\n')\nprint('unique elements of relationship: \\n')\npprint.pprint(df['relationship'].unique())\nprint('\\n\\n')\nprint('unique elements of race: \\n')\npprint.pprint(df['race'].unique())\nprint('\\n\\n')\nprint('unique elements of gender: \\n')\npprint.pprint(df['gender'].unique())\nprint('\\n\\n')\nprint('unique elements of native-country: \\n')\npprint.pprint(df['native-country'].unique())\nprint('\\n\\n')\nprint('unique elements of income: \\n')\npprint.pprint(df['income'].unique())\nprint('\\n\\n')\n","52135e55":"arr1=[]\nfor item in cat_df['workclass']:\n    if (item == '?'):\n        arr1.append(item)\nprint('Length of missing vals in workclass column:')\nprint(len(arr1))\nprint('\\n')\narr2=[]\nfor item in cat_df['occupation']:\n    if (item == '?'):\n        arr2.append(item)\nprint('Length of missing vals in occupation column:')\nprint(len(arr2))","c91a8605":"null_data=((2809+2799)\/(48842-(2809+2799)))*100\nprint(null_data)","799b87ac":"x=df.select_dtypes(object)","852d721b":"from sklearn.preprocessing import OrdinalEncoder","44293524":"oe=OrdinalEncoder()\ncat_df=oe.fit_transform(cat_df)","fcb35d2d":"cat_df","708dcd0d":"cat_df1=pd.DataFrame(data=cat_df,columns=x.columns)\ncat_df1","2863a4e7":"num_df1=df.select_dtypes(int)\nnum_df1","2bf96388":"final_df=pd.concat([num_df1,cat_df1],axis=1)\nfinal_df","af2da755":"from sklearn.model_selection import train_test_split ","2acd550c":"X=final_df.drop('income',axis=1)\ny=final_df['income']","8a8f3fdc":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=50)","a8d6998f":"from sklearn.linear_model import LogisticRegression","7ef2ee3e":"logmodel=LogisticRegression(solver='lbfgs',max_iter=200)","d601b6cd":"logmodel.fit(X_train,y_train)","91093c03":"prediction=logmodel.predict(X_test)\nprediction","eddb95b3":"pred=pd.DataFrame(data=prediction,columns=['prediction'])\npred","6d056b61":"from sklearn.metrics import classification_report","fa5f872c":"result=classification_report(pred,y_test)\nprint(result)","554c4bbc":"from sklearn.tree import DecisionTreeRegressor","2c693182":"tree=DecisionTreeRegressor(max_depth=7)","fe315694":"tree.fit(X_train,y_train)","e6e1f7a0":"predictions=tree.predict(X_test)\nprint(predictions)","5c5eb488":"pred2=pd.DataFrame(data=predictions,columns=['predictions'])\npred2['predictions']","8e69574f":"def num(n):\n    if(n < 0.5):\n        return 0\n    else:\n        return 1","87663ad7":"x=pred2['predictions'].apply(num)\nx.unique()","55c6a7e3":"result2=classification_report(x,y_test)\nprint(result2)","62190954":"**pd.isnull() returns 0 which shows that there are no Nan values in data**","692e525d":"# LOGISTIC REGRESSION\nLogistic regression is a statistical model that in its basic form uses a logistic function to model a binary dependent variable, although many more complex extensions exist. In regression analysis, logistic regression (or logit regression) is estimating the parameters of a logistic model (a form of regression). https:\/\/en.wikipedia.org\/wiki\/Logistic_regression#:~:text=Logistic%20regression%20is%20a%20statistical,a%20form%20of%20binary%20regression).\n\nA sigmoid function is a mathematical function having a characteristic \"S\"-shaped curve or sigmoid curve. A common example of a sigmoid function is the logistic function. A sigmoid function is a bounded, differentiable, real function that is defined for all real input values and has a non-negative derivative at each point and exactly one inflection point. A sigmoid \"function\" and a sigmoid \"curve\" refer to the same object.\nhttps:\/\/en.wikipedia.org\/wiki\/Sigmoid_function#:~:text=A%20sigmoid%20function%20is%20a,given%20in%20the%20Examples%20section.\n\n# DECISION TREE\nDecision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features.\nhttps:\/\/en.wikipedia.org\/wiki\/Decision_tree_learning\n\nUse max_depth=3 as an initial tree depth to get a feel for how the tree is fitting to your data, and then increase the depth.\n\nRemember that the number of samples required to populate the tree doubles for each additional level the tree grows to. Use max_depth to control the size of the tree to prevent overfitting.","b674eb8a":"**12.971% of data is missing from the dataset.**","aa9f9fae":"A decision tree with max_depth of 7 gives better prediction accuracy than logistic regression with solver 'lbfgs' ","2a2e0c6a":"# **USING LOGISTIC REGRESSION**","4d2bc406":"#  **USING DECISION TREE**","e27edc89":"# **THE END**"}}