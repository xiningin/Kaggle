{"cell_type":{"c7ae0bd2":"code","f8248e1b":"code","51633c86":"code","4274ab3b":"code","06dfd6f8":"code","31b0a042":"code","236ad89a":"code","4f0a1d3c":"code","54fa5a48":"code","ec74e846":"code","29e42697":"code","5ca4feae":"code","1c7e4943":"markdown","cc43e907":"markdown","0b283915":"markdown","38b89bf5":"markdown","82a011f5":"markdown"},"source":{"c7ae0bd2":"!pip install feyn","f8248e1b":"import numpy as np\nimport pandas as pd\n\nimport feyn","51633c86":"dataset = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndataset.drop(columns=[\"PassengerId\"])","4274ab3b":"#cleanup data, borrowed from https:\/\/www.kaggle.com\/stuppym\/stuppy-titanic-prediction-21\n\ndef cleanup_dataset(df):\n    df = df.drop(columns=[\"Name\", \"Ticket\"])\n    df[['Embarked']] = df[['Embarked']].fillna('Unknown')\n    df[['Age']] = df[['Age']].fillna(99)\n    df[['Cabin']] = df[['Cabin']].fillna('Unknown')\n    df[['Fare']] = df[['Fare']].fillna(35) # pick the mean of the test Fare $\n    return df\n\ndataset = cleanup_dataset(dataset)\ndataset =  dataset.drop(columns=\"PassengerId\")\ntrain, validation = feyn.tools.split(dataset,ratio=(1,9), random_state=42)\n","06dfd6f8":"train.sample(10).head()","31b0a042":"ql = feyn.connect_qlattice(qlattice=\"CE-4554fb81\",api_token=\"f092f5d1963bf2ad85dd\")","236ad89a":"ql.reset(random_seed=42)","4f0a1d3c":"stypes={\n    \"Survived\": \"cat\",\n    \"Pclass\": \"cat\",\n    \"Sex\": \"cat\",\n    \"Ticket\": \"cat\",\n    \"Cabin\": \"cat\",\n    \"Embarked\": \"cat\",\n}\n\nmodels = ql.auto_run(train, output_name=\"Survived\", kind=\"classification\", criterion=\"aic\", n_epochs=20, stypes=stypes)","54fa5a48":"models[0].plot_roc_curve(train, label=\"Training data\")\nmodels[0].plot_roc_curve(validation, label=\"Validation data\")","ec74e846":"models[0].plot_confusion_matrix(validation, threshold=.6)","29e42697":"test_dataset = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\ntest_dataset = cleanup_dataset(test_dataset)\nsubmission = test_dataset[[\"PassengerId\"]]","5ca4feae":"predictions = models[0].predict(test_dataset)\nsubmission[\"Survived\"] = np.where(predictions>0.6, 1, 0)\nsubmission.to_csv('submission.csv', index=False)","1c7e4943":"\n# Evaluate\n\nThe QLattice has found a mathematical relationship tha can relate the features to the likelyhood of surviving. The final step is to evaluate the model on the test and the train set. To do that we plot the ROC curve of the classifier on both the test and the training data. You can read more about ROC curves here: https:\/\/docs.abzu.ai\/docs\/guides\/plotting\/roc_curve.html","cc43e907":"\n# Confusion matrix\n\nA simpler and less powerfull way to evaluate classifiers is a confusion matrix: https:\/\/docs.abzu.ai\/docs\/guides\/plotting\/confusion_matrix.html\n\nLet us see how that looks at various thresholds:\n","0b283915":"# Get the qlattice","38b89bf5":"# Generating submission results","82a011f5":"# Data\nRead in the data and have a quick look at it:"}}