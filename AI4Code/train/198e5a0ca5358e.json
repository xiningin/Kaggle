{"cell_type":{"94e5d20c":"code","cd56690a":"code","fd8afeee":"code","d3fc0ddd":"code","fc0acd9d":"code","d268a63d":"code","8d94d8a0":"code","12c0603c":"code","da7f8c50":"code","55975b7b":"code","8b21e792":"code","b0aa5906":"code","de34786a":"code","821243cb":"code","d30cd27f":"code","6334764f":"code","ed37c12a":"code","b83c5a1c":"code","d5e47255":"code","c6f80b28":"code","d57ec89d":"code","a3aa6f29":"code","97bded94":"code","cf113cb6":"code","9e173a59":"code","c24aec05":"code","c9bf4767":"code","8ed9c7e1":"code","634f3b59":"code","95442807":"code","7dc13d5c":"markdown","c016e5ba":"markdown","ed1651c4":"markdown","b3012382":"markdown","add950d9":"markdown","36dd98ad":"markdown","97078581":"markdown","6e6ae41b":"markdown","11b49883":"markdown","e9621b7c":"markdown","b6a8666d":"markdown","c91c44f3":"markdown","a8c3e2fa":"markdown","32a65950":"markdown","8eb01c94":"markdown","5f08e82f":"markdown","da92d15d":"markdown","13091264":"markdown","0545c996":"markdown","f31eb63a":"markdown","c1895459":"markdown","d98dbbe7":"markdown","ccae47a7":"markdown","1e715c26":"markdown"},"source":{"94e5d20c":"# import the tools we need\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","cd56690a":"comp_df = pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","fd8afeee":"comp_df.shape","d3fc0ddd":"comp_df.head(3)","fc0acd9d":"comp_df.dtypes","d268a63d":"comp_df.describe()","8d94d8a0":"comp_df.isnull().sum()","12c0603c":"sns.countplot('Class',data=comp_df)","da7f8c50":"plt.figure(figsize=(15,10))\nsns.heatmap(comp_df.corr(),cmap='Reds')","55975b7b":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(20,6))\nsns.distplot(comp_df.Amount,ax=ax1)\nsns.boxplot(comp_df.Amount, ax=ax2)","8b21e792":"sns.boxplot(x='Class',y='Amount',data=comp_df)","b0aa5906":"sns.distplot(comp_df.Time)","de34786a":"# Transfer the time to hour\ncomp_df['hour'] = (comp_df['Time']\/60\/60).astype(int)","821243cb":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(10,10))\nax1.set_title('Distribution of Fraud transaction vs Time(hour)')\nax1.set_xlabel('Number of Fraud transaction')\nsns.countplot(comp_df[comp_df.Class==1]['hour'], ax=ax1)\nax2.set_title('Distribution of non-Fraud transaction vs Time(hour)')\nsns.countplot(comp_df[comp_df.Class==0]['hour'], ax=ax2)","d30cd27f":"comp_df.drop('hour',axis=1,inplace=True)","6334764f":"# Drop the outlier \n# Won't drop the outlier in class 1 \n# Check the number of outliers\nfrom scipy.stats import iqr\nupper_limit = comp_df.Amount.quantile(0.75) + (1.5*iqr(comp_df.Amount))\nprint(upper_limit)\nprint(comp_df[comp_df.Amount>upper_limit]['Class'].value_counts())","ed37c12a":"print(comp_df[comp_df.Amount>5000]['Class'].value_counts())","b83c5a1c":"comp_df = comp_df[comp_df.Amount <= 5000]","d5e47255":"from sklearn.preprocessing import StandardScaler\nscaler_df = comp_df.drop('Class',axis=1)\nscaler_df = StandardScaler().fit_transform(scaler_df)\nscaler_df = pd.DataFrame(scaler_df)","c6f80b28":"from sklearn.model_selection import train_test_split\nfrom collections import Counter","d57ec89d":"x_df = scaler_df.copy()\ny_df = np.asarray(comp_df['Class'])","a3aa6f29":"x_train, x_test, y_train,y_test = train_test_split(x_df,y_df, test_size=0.3,random_state=11)","97bded94":"#Check the shape\nx_train.shape, x_test.shape, y_train.shape, y_test.shape","cf113cb6":"print('Class 1 in training set: {:.2f} %'.format(Counter(y_train)[1]\/Counter(y_train)[0]*100))\nprint('Clas 1 in test set: {:.2f} %'.format(Counter(y_test)[1]\/Counter(y_test)[0]*100))","9e173a59":"from imblearn.over_sampling import SMOTE, BorderlineSMOTE, ADASYN, SVMSMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n\nfrom xgboost import XGBClassifier\n\nfrom sklearn.model_selection import cross_val_score, GridSearchCV, RepeatedStratifiedKFold, cross_validate\nfrom sklearn.metrics import classification_report, roc_auc_score, confusion_matrix,plot_precision_recall_curve\nnp.random.seed = 42","c24aec05":"# Create a function for evaluation\ndef evaluation(clf, x, y):\n    pred = clf.predict(x)\n    print(classification_report(y, pred))\n    print('ROC score:',roc_auc_score(y, pred))\n    fig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,4))\n    plot_precision_recall_curve(clf,x, y,ax=ax1)\n    sns.heatmap(confusion_matrix(y, pred),annot=True, fmt='d',cmap='Reds', ax=ax2,)\n    ax2.set_xlabel('Pred')\n    ax2.set_ylabel('True')","c9bf4767":"clf = XGBClassifier().fit(x_train,y_train)\nevaluation(clf,x_test,y_test)","8ed9c7e1":"# This time I use oversampling only.\nover = SMOTE(sampling_strategy=0.3)\nunder = RandomUnderSampler()\n\nsteps = [\n    #('under',under),\n    ('over',over)\n]\nxs, ys = Pipeline(steps=steps).fit_resample(x_train,y_train)\nprint('The new ratio of data:',Counter(ys))","634f3b59":"# fit the transformed data to the classifier.\nclf = XGBClassifier().fit(xs,ys)\nevaluation(clf,x_test,y_test)","95442807":"#params = {\n    #'n_estimators':[50,100,200],\n    #'max_depth':[3,6,9],\n    #'learning_rate':[0.001,0.01,0.1],\n    #'subsample':[0.3,0.7,1],\n    #'colsample_bytree':[0.3,0.7,1]\n#}\n#cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=2,random_state=11)\n#grid = GridSearchCV(XGBClassifier(random_state=11),params,cv=cv,n_jobs=-1,verbose=True,scoring='f1')\n#grid.fit(xs, ys)\n#print(grid.best_estimator_)","7dc13d5c":"# Features Engineering","c016e5ba":"# Thank you very much","ed1651c4":"- Although using SMOTE on the data ,we get a more balanced model.\n","b3012382":"#### Standardize all numerical column","add950d9":"# Credit Card Fraud Detection\n### Anonymized credit card transactions labeled as fraudulent or genuine\n\n#### Context\n- It is important that credit card companies are able to recognize fraudulent credit card transactions so that customers are not charged for items that they did not purchase.\n\n#### Content\n- The datasets contains transactions made by credit cards in September 2013 by european cardholders.\n\n- This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\n- It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n\n#### Inspiration\n- Identify fraudulent credit card transactions.\n\n- It is recommended measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.","36dd98ad":"# Basic data analysis","97078581":"### Modifing the training data using SMOTE","6e6ae41b":"- There are 31904 outliers, 91 of them are in class 1\n- lets make the threshold higher to 5000.","11b49883":"- The variance of amount is quite large, there are so many outliers in the data.","e9621b7c":"### Time","b6a8666d":"### Try without undersampling and oversampling","c91c44f3":"No missing data in the dataset.","a8c3e2fa":"#### Oversampling the data using SMOTE","32a65950":"#### Drop the outliers","8eb01c94":"- All is float64 besides Class","5f08e82f":"# Split the data into training set and test set\n- There is no test data provided in this project, so train_test_split to split the data","da92d15d":"- The data is extrmely imbalanced, only 0.172% class 1 data.","13091264":"Read the data","0545c996":"- It is so suprising that XGBoost did a really great job without any tuning.\n\n- Both precision and recall are not bad. ","f31eb63a":"### Tuning the hyperparameter for XGBoost","c1895459":"- The money amount for fraud transaction are not high as normal transaction.","d98dbbe7":"# Start training model","ccae47a7":"- We can tune the hyperparameter for XGBClassifier to get a more balanced model, but it uses many time for tuning.","1e715c26":"# Data EDA"}}