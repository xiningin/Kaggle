{"cell_type":{"41a01e04":"code","5bc36250":"code","de3f05e4":"code","66bdc9ef":"code","e5169f3a":"code","60ed4131":"code","2a7386c8":"markdown","98d777e2":"markdown","9a1e8f25":"markdown","fe4a87b3":"markdown"},"source":{"41a01e04":"import pandas as pd\n\ndf = pd.read_csv('\/kaggle\/input\/list-of-roman-emperors-from-wikipedia\/romans 2.csv')\nprint(f\"Total number of emperors: {df.shape[0]}\")\nprint(f\"Total number of raw features: {df.shape[1]}\")\nprint(f\"Features available: {list(df.columns)}\")","5bc36250":"df.head()","de3f05e4":"# Make all columns lowercase except the names\nfor col in df.columns:\n    if col != \"Name\":\n        df[col] = df[col].str.lower()\n    \n# Drop Succession column\nif 'Succession' in df:\n    df = df.drop(['Succession'], axis=1)\n\n# Extract age of death and replace missing values\ndeath_age = df['Deaths'].str.extract('\\((.*?)\\)').apply(lambda x: x.str.strip())\ndf['AgeOfDeath'] = death_age[0].astype(str).map(lambda x: x.lstrip('aged ').strip())\n\ndf['AgeOfDeath'].replace(to_replace =\"?\", value =\"0\", inplace=True) \ndf['AgeOfDeath'].replace(to_replace =\"nan\", value =\"0\", inplace=True) \n\n# Extract Reign in years\ndf['ReignYears'] = df['Time'].str.extract('(\\d+).(?=years|year)').fillna(0)\n\n# Extract Reign in months\ndf['ReignMonths'] = df['Time'].str.extract('(\\d+).(?=months|month)').fillna(0)\n\n# Extract Reign in days\ndf['ReignDays'] = df['Time'].str.extract('(\\d+).(?=days|day)').fillna(0)\n\n# Extract birth name\ndf['BirthName'] = df['Name'].str.extract('(.[a-z]+)')\n\n# Extract title\ndf['Title'] = df['Name'].str.extract('(.[A-Z]{2,})')\n\n# Extract cause of death\ndf['CauseOfDeath'] = df['Deaths'].str.extract('\\).(.*)').fillna('Unknown')\ndf['CauseOfDeath'] = df['CauseOfDeath'].apply(lambda x: x.replace('  ', ' ').strip())\n\n# Extract birth year (caring for AD\/BC)\ndf['BirthYearBC'] = df['Birth'].str.extract('(\\d+.(?=bc))').fillna(0).astype(str)\ndf['BirthYearAD'] = df['Birth'].str.extract('(\\d+.(?=,|ad))').fillna(0).astype(str)\ndf['BirthYearNum'] = df['Birth'].str.extract('(\\d+(?:\\.\\d+)?)').fillna(0).astype(str)\ndf['BirthYearAD'] = df['BirthYearAD'].apply(lambda x: x.replace(',', '').replace('\/', '')).astype(int)\n\ndef add_year_prefix(row):\n    year_bc = int(row['BirthYearBC'])\n    if year_bc > 0:\n        return -year_bc\n    else:\n        return int(row['BirthYearAD'])\n    \ndef add_num_year(row):\n    if row['BirthYear'] is 0:\n        return row['BirthYearNum']\n    else:\n        return row['BirthYear']\n    \ndf['BirthYear'] = df.apply(add_year_prefix, axis=1)\ndf['BirthYear'] = df.apply(add_num_year, axis=1)\ndf = df.drop(['BirthYearNum', 'BirthYearBC', 'BirthYearAD'], axis=1)\n\n# Extract birth day\ndf['BirthDay'] = df['Birth'].str.extract('(\\d+)').fillna(0)\n\n# Extract birth month\ndf['BirthMonth'] = df['Birth'].str.split(',', 1).str[0].str.extract('([a-zA-Z]{5,})').fillna('Unknown')\ndf['BirthMonth'] = df['BirthMonth'].str.capitalize()\n\n# Extract reign start and end year (manual handle the BC case)\ndf['ReignStartYear'] = df['Reign'].str.split('\u2013', 1).str[0].str.extract('(\\d+.(?=ad|bc)|\\d{4})')\ndf['ReignEndYear'] = df['Reign'].str.split('\u2013', 1).str[1].str.extract('(\\d+.(?=ad|bc)|\\d{4})')\ndf.at[0, 'ReignStartYear'] = int('-' + df['ReignStartYear'].iloc[0].strip())\n\n# Extract reign day\ndf['ReignStartDay'] = df['Reign'].str.split('\u2013', 1).str[0].str.extract('(\\d+).(?=[a-zA-Z])')\ndf['ReignEndDay'] = df['Reign'].str.split('\u2013', 1).str[1].str.extract('(\\d+).(?=[a-zA-Z])')\n\n# Extract reign start month\ndf['ReignStartMonth'] = df['Reign'].str.split('\u2013', 1).str[0].str.extract('([a-zA-Z]+)')\ndf['ReignStartMonth'] = df['ReignStartMonth'].str.capitalize()\n\n# Extract reign end month\ndf['ReignEndMonth'] = df['Reign'].str.split('\u2013', 1).str[1].str.extract('([a-zA-Z]+)')\ndf['ReignEndMonth'] = df['ReignEndMonth'].str.capitalize()\n\n# Drop handled columns\ndf = df.drop(['Name', 'Birth', 'Time', 'Deaths', 'Reign'], axis=1)","66bdc9ef":"# Show new df\n\ndf.head()","e5169f3a":"# Print a few causes of death\n\nfor i in range(0,10,2):\n    print(f'{df.BirthName.loc[i]} died of {df.CauseOfDeath.loc[i]}')","60ed4131":"# Look at the most occuring causes\n\nimport spacy\nfrom collections import Counter\n\nnlp = spacy.load(\"en_core_web_sm\")\n\ncomplete_text = df.CauseOfDeath.str.strip().str.cat(sep=' ')\ncomplete_doc = nlp(complete_text)\n\nwords = [token.text for token in complete_doc\n         if not token.is_stop and not token.is_punct]\nword_freq = Counter(words)\n\n# Print 20 most common words\ncommon_words = word_freq.most_common(20)\nprint (f'20 most common words: \\n{common_words}\\n')\n\n# Print all unique words\nunique_words = [word for (word, freq) in word_freq.items() if freq == 1]\nprint (f'Unique words in death notes: \\n{unique_words}\\n')","2a7386c8":"# Extracting data with regex\n\nWe use regex to extract meaningful features from the raw data. It's a good alternative to manually iterating and extracting information from individual rows. Note that years before AD (year zero) are encoded as a negative integer. The process is not 100% robust yet, as the output still has a few outliers due to the messiness of the raw data.","98d777e2":"# Introduction\n\nThe Roman Empire was founded when Augustus Caesar proclaimed himself the first emperor of Rome in 31BC and came to an end with the fall of Constantinople in 1453CE.\n\nThis notebook demonstrates how regex can be used to extract and encode feature values from messy raw data. It also shows a simply way to extract common causes of death by evaluating the death notes of the emperor's using the NLP toolkit spaCy.","9a1e8f25":"# Analyzing cause of death\n\nLastly we look at the most occurring cause of death amongst Roman emperors. It seems that, despite popular believe, that many in fact died from natural causes, but Constantinople is mentioned quite a lot as well. Also suicide wasn't that uncommon amongst emperors either.","fe4a87b3":"![](https:\/\/rome.us\/wp-content\/uploads\/Augustus-Emperor-of-Rome.jpg)"}}