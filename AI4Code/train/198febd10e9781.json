{"cell_type":{"5b677326":"code","141a70e9":"code","07534d20":"code","0ce7e024":"code","72b2c1e2":"code","614b9934":"code","76969c82":"code","326a8011":"code","a2d61ec2":"markdown","259da5b2":"markdown","8c0cc38f":"markdown","9af7b9a4":"markdown","1efe07e7":"markdown","619ca2eb":"markdown","bbdc54bb":"markdown","248ac6ca":"markdown","676331d6":"markdown","70587ca8":"markdown","4bf6d7c2":"markdown","2a7b180d":"markdown","df72ee9a":"markdown"},"source":{"5b677326":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.optimizers import Adam,SGD,RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\n","141a70e9":"# We need to download weights from google cloud storage\n\"\"\"\ninclude_top = False => Don't add fully connected layers \nweights = \"imagenet\" => Download weights trained on imagenet (an image dataset that contain 1000 classes)\n\"\"\"\n\nbase_model = ResNet50(include_top=False,weights=\"imagenet\")\nbase_model.summary()","07534d20":"print(\"There are {} layers in model\".format(len(base_model.layers)))","0ce7e024":"for layer in base_model.layers[:140]:\n    layer.trainable = False\n    \nbase_model.summary()","72b2c1e2":"model = keras.Sequential()\n\nmodel.add(layers.Input(shape=(224,224,3)))\nmodel.add(layers.Lambda(keras.applications.resnet50.preprocess_input))\nmodel.add(base_model)\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(4,activation=\"softmax\"))\n\nmodel.summary()","614b9934":"testGen = ImageDataGenerator()\ntrainGen = ImageDataGenerator(validation_split=0.15,\n                              vertical_flip=True,\n                              horizontal_flip=True,\n                              rotation_range=0.2\n                             )\n\ntestGenerator = testGen.flow_from_directory(\"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TEST\",\n                                            target_size=(224,224),\n                                            shuffle=False\n                                            \n                                           )\ntrainGenerator = trainGen.flow_from_directory(\"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\",\n                                              subset=\"training\",\n                                              target_size=(224,224),\n                                              \n                                             )\n\nvalidationGenerator = trainGen.flow_from_directory(\"..\/input\/blood-cells\/dataset2-master\/dataset2-master\/images\/TRAIN\",\n                                                   subset=\"validation\",\n                                                   target_size=(224,224)\n                                                  )\n\n\n\n","76969c82":"model.compile(optimizer=\"Adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\n\nhistory = model.fit_generator(trainGenerator,epochs=1,validation_data=validationGenerator)\n","326a8011":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n\ny_pred = model.predict_classes(testGenerator)\n\n\ny_true = testGenerator.labels\n\nprint(\"Final test accuracy is {}%\".format(accuracy_score(y_pred=y_pred,y_true=y_true)))\n\nconfMatrix = confusion_matrix(y_pred=y_pred,y_true=y_true)\n\nplt.subplots(figsize=(6,6))\nsns.heatmap(confMatrix,annot=True,fmt=\".1f\",linewidths=1.5)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"Actual Label\")\nplt.show()\n\n","a2d61ec2":"## Preparing Environment\nIn this kernel I'll use tensorflow backend keras and ResNet50 pretrained model. ","259da5b2":"## Modeling","8c0cc38f":"# Conclusion\nThanks for your attention, if you have any question about transfer learning, feel free to ask in comment section.\n\nHave a great day!","9af7b9a4":"* We've fine-tuned our ResNet50 model for 3 epochs and our validation accuracy is 96%\n* Our validation loss and accuracy looks really great, let's make final test!","1efe07e7":"# Introduction\nHello people, welcome to this kernel. In this kernel I am going to fine-tune a ResNet50 model to classify four different blood cells.\n\nBefore starting I have to say that I don't have any general information about these blood cells, I just know something from my biology classes :)\nThis kernel will be implementation-oriented because I want to try fine-tune a pretrained model (especially for competetions)\n\nSo, let's start!","619ca2eb":"* We won't train all the model, because all the first convolutional operators extract similar features such as simple lines, we just need to train top layers of model.\n\n* So we'll freeze first N layers of model","bbdc54bb":"* Everything is ready, now let's our model.","248ac6ca":"* Lambda layer will preprocess image and made images ready to use in model.\n* Now we need to declare our image data generator.","676331d6":"## Image Data Generator ","70587ca8":"* Thanks to these image data generators we will read images easily from folders.","4bf6d7c2":"* First, let's build our model.","2a7b180d":"* Now let's add our lambda layer and fully connected layers and finish the building model","df72ee9a":"* Let's try to freeze layers under 140"}}