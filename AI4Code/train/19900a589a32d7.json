{"cell_type":{"6f879e73":"code","ca26521e":"code","8bfe961a":"code","90a625d1":"code","6074f9bd":"code","c283d69a":"code","ea3762d7":"code","9a3df9c9":"code","7da95ee9":"code","3c41d7e2":"code","cd5cc28f":"code","c69b35cd":"code","8ab4f5ba":"code","0d20f97d":"code","b475c62e":"code","0de4f3fb":"code","57c7684b":"code","3bdaa504":"code","ceaa3d1b":"code","e6f981ca":"code","16832414":"code","79191f88":"code","c0a72d7b":"code","c4a1f744":"code","40a879fe":"code","95648044":"code","994b1788":"code","fe53e23b":"code","eabbbb3f":"code","7b7b3386":"code","0ebda48c":"code","78651d54":"code","467ebcb4":"code","bb095255":"code","0df63ee5":"code","6fc04f4b":"code","7520a832":"code","40f74ebd":"code","1521f59c":"code","46426660":"code","86cae8d3":"code","741a5259":"code","0a05ae74":"code","7697f113":"code","b7a853fd":"code","fbd48fe9":"code","b6382ce0":"code","d9bbb1a6":"code","e5a87137":"code","0fc3447b":"code","41dd4c86":"code","6a085e8d":"code","c9540291":"code","40dc20fb":"code","0cd021d7":"code","1f3bdbc4":"code","4bc52bbe":"code","e70b510a":"code","68cda149":"code","3087acf3":"code","8489c9c9":"code","5535b191":"code","5a43f283":"code","b560ff94":"code","a1e1609f":"code","5fd15077":"code","63313a9e":"code","c2b159f9":"code","8303cbd8":"code","ba1a8c98":"code","aafd37cf":"code","53b6f604":"code","9936c254":"code","0bda8104":"code","db802356":"code","9a22e6a7":"code","7a8a570e":"code","6e0b1b91":"code","68e106ac":"code","c00e037f":"code","3ca0278e":"code","2e994cd5":"code","6a6e7478":"code","4ffbcc56":"code","8e8ae531":"code","c6f9b999":"code","89f8b0f3":"code","ce05c7bc":"code","26e04ac2":"code","d83a28ed":"code","63c32378":"code","271144cc":"code","d57375ca":"code","8b537701":"code","8606749a":"code","286f6382":"code","55a002f3":"code","9bfe1347":"code","6e78bb3d":"code","a15d1d4f":"code","eb524f46":"code","d18d759c":"code","6fdb20fa":"code","06ea8c80":"code","1ee61a41":"code","a19a7a89":"code","aecaa418":"code","eca80b37":"code","0256b8a4":"code","306fd5d8":"code","f7a525ba":"code","433f742d":"code","c93fa80e":"code","ba1d0f90":"code","ee740335":"code","7a90a7e9":"code","9f233c05":"code","387af8b5":"code","1c7a47a2":"code","39e3f967":"code","0e263bed":"code","d9c2c815":"code","005f29fc":"code","84b08892":"code","8c6f4482":"code","f7f8d868":"code","5f90ed0d":"code","72bb6d46":"markdown","ef7cf50b":"markdown","a8de1e3c":"markdown","0c7f48d2":"markdown","23868418":"markdown","bf84649a":"markdown","0692462d":"markdown","832851e2":"markdown","2c00ec8e":"markdown","ae4451cf":"markdown","f91ddb4b":"markdown","f2db12ae":"markdown","ea53b1f0":"markdown","8a74666a":"markdown","8917b179":"markdown","45547f65":"markdown","396502d3":"markdown","c084277f":"markdown","50eb2842":"markdown","8794dee8":"markdown","26e252f4":"markdown","cb2f81d6":"markdown","6a54473f":"markdown","461581ff":"markdown","f6acad13":"markdown","2d35d813":"markdown","e1b3bde8":"markdown","6a8c895c":"markdown"},"source":{"6f879e73":"import pandas as pd","ca26521e":"merc_train = pd.read_csv('\/kaggle\/input\/mercedes-benz-greener-manufacturing\/train.csv.zip')","8bfe961a":"merc_train.head()","90a625d1":"print(merc_train.shape)\n#print(merc_test.shape)","6074f9bd":"merc_train.columns","c283d69a":"merc_train.info()","ea3762d7":"def var_zero_cols(df):\n    var_df=pd.DataFrame(df.var(),columns=['Variance'])\n    return(list(var_df[var_df.Variance==0].index))","9a3df9c9":"var_zero_cols(merc_train)","7da95ee9":"var_df=pd.DataFrame(merc_train.var(),columns=['Variance'])","3c41d7e2":"merc_train.drop(columns=list(var_df[var_df.Variance==0].index),inplace=True)","cd5cc28f":"merc_train.shape","c69b35cd":"train_nullcheck_df=pd.DataFrame(merc_train.isna().any(),columns=['IsNull'])","8ab4f5ba":"train_nullcheck_df[train_nullcheck_df.IsNull==True]","0d20f97d":"train_merc_ucnt=pd.DataFrame(merc_train.nunique(),columns=['uniqueCount'])","b475c62e":"train_merc_ucnt[train_merc_ucnt.uniqueCount>2]","0de4f3fb":"train_merc_ucnt[train_merc_ucnt.uniqueCount<=2]","57c7684b":"merc_train.X0.value_counts()","3bdaa504":"import matplotlib.pyplot as plt,seaborn as sns\nplt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X0,y=merc_train.y)","ceaa3d1b":"sns.boxplot(x=merc_train.X0[merc_train.X0=='y'],y=merc_train.y)","e6f981ca":"((merc_train[merc_train.X0=='y']['y']).sort_values(ascending=False))[:1].index.values","16832414":"merc_train.shape","79191f88":"merc_train.drop(labels=((merc_train[merc_train.X0=='y']['y']).sort_values(ascending=False))[:1].index.values,inplace=True)","c0a72d7b":"merc_train.shape","c4a1f744":"plt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X0,y=merc_train.y)","40a879fe":"merc_train.X0.value_counts()","95648044":"def transform_X0(df):\n    x0_grp=df.groupby('X0').aggregate(func='count')['ID'].reset_index()\n    df['X0'].replace(to_replace=x0_grp[x0_grp['ID']<100]['X0'].values\n                            ,value='OT'\n                            ,inplace=True)","994b1788":"transform_X0(merc_train)","fe53e23b":"merc_train.X0.value_counts()","eabbbb3f":"sns.barplot(x=merc_train.X0,y=merc_train.y)","7b7b3386":"merc_train.X1.value_counts()","0ebda48c":"plt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X1,y=merc_train.y)","78651d54":"def transform_X1(df):\n    x1_grp=df.groupby('X1').aggregate(func='count')['ID'].reset_index()\n    df['X1'].replace(to_replace=x1_grp[x1_grp['ID']<100]['X1'].values\n                            ,value='OT'\n                            ,inplace=True)","467ebcb4":"transform_X1(merc_train)","bb095255":"merc_train.X1.value_counts()","0df63ee5":"plt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X1,y=merc_train.y)","6fc04f4b":"sns.barplot(x=merc_train.X1,y=merc_train.y)","7520a832":"merc_train.X3.value_counts()","40f74ebd":"plt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X3,y=merc_train.y)","1521f59c":"sns.barplot(x=merc_train.X3,y=merc_train.y)","46426660":"merc_train.X4.value_counts()","86cae8d3":"merc_train[merc_train.X4!='d']['X4'].values","741a5259":"def transform_X4(df):\n    df['X4'].replace(to_replace=df[df.X4!='d']['X4'].values\n                    ,value='~d'\n                    ,inplace=True)","0a05ae74":"transform_X4(merc_train)","7697f113":"merc_train.X4.value_counts()","b7a853fd":"sns.barplot(x=merc_train.X4,y=merc_train.y)","fbd48fe9":"merc_train.X5.value_counts()","b6382ce0":"def transform_X5(df):\n    x5_grp=df.groupby('X5').aggregate(func='count')['ID'].reset_index()\n    df['X5'].replace(to_replace=x5_grp[x5_grp['ID']<100]['X5'].values\n                    ,value='OT'\n                    ,inplace=True)","d9bbb1a6":"transform_X5(merc_train)","e5a87137":"merc_train.X5.value_counts()","0fc3447b":"plt.figure(figsize=(14,6))\nsns.boxplot(x=merc_train.X5,y=merc_train.y)","41dd4c86":"sns.barplot(x=merc_train.X5,y=merc_train.y)","6a085e8d":"merc_train.X6.value_counts()","c9540291":"plt.figure(figsize=(14,6))\nsns.barplot(x=merc_train.X6,y=merc_train.y)","40dc20fb":"merc_train.X8.value_counts()","0cd021d7":"plt.figure(figsize=(14,6))\nsns.barplot(x=merc_train.X8,y=merc_train.y)","1f3bdbc4":"from sklearn.preprocessing import LabelEncoder","4bc52bbe":"x=merc_train.drop(columns='y')\ny=merc_train.y","e70b510a":"x.head()","68cda149":"catCols=merc_train.select_dtypes(include=\"object\").columns","3087acf3":"catCols","8489c9c9":"def transform_labels(df,x):\n    catCols=df.select_dtypes(include=\"object\").columns\n    le=LabelEncoder()\n    for i in catCols:\n        le.fit(x[i])\n        x[i]=le.transform(x[i])","5535b191":"transform_labels(merc_train,x)","5a43f283":"x.head()","b560ff94":"#from sklearn.preprocessing import StandardScaler","a1e1609f":"#stdsclr=StandardScaler()\n#stdsclr.fit(x)","5fd15077":"#x_std=stdsclr.transform(x)","63313a9e":"from sklearn.decomposition import PCA","c2b159f9":"pcaModel=PCA()","8303cbd8":"#x_pca_data = x.iloc[:,0:8]#x[['X0','X4','X6']] #","ba1a8c98":"pcaModel.fit(x)","aafd37cf":"pcaModel.explained_variance_ratio_","53b6f604":"pcaModel.explained_variance_ratio_.cumsum()*100","9936c254":"pcaModel.components_","0bda8104":"pcaModel=PCA(n_components=120)","db802356":"x.drop(columns=['ID'],inplace=True)","9a22e6a7":"pcaModel.fit(x)","7a8a570e":"x_pca=pd.DataFrame(pcaModel.transform(x))","6e0b1b91":"pcaModel.explained_variance_ratio_.cumsum()*100","68e106ac":"pcaModel.components_","c00e037f":"x_pca.head()","3ca0278e":"from sklearn.model_selection import train_test_split","2e994cd5":"x_train,x_test,y_train,y_test=train_test_split(x_pca,y,random_state=10,train_size=0.75)","6a6e7478":"from xgboost import XGBRegressor,plot_importance","4ffbcc56":"xgbModel=XGBRegressor(max_depth=3, min_child_weight=4, reg_lambda=1000, gamma = 100)","8e8ae531":"xgbModel.fit(x_train,y_train)","c6f9b999":"xgbModel.score(x_train,y_train)","89f8b0f3":"xgbModel.score(x_test,y_test)","ce05c7bc":"pcaModel=PCA(n_components=7)\npcaModel.fit(x.iloc[:,0:9])\nx_pca_c=pd.DataFrame(pcaModel.transform(x.iloc[:,0:9]),columns=['C1','C2','C3','C4','C5','C6','C7'])","26e04ac2":"pd.DataFrame(pcaModel.components_,columns=(x.iloc[:,0:9]).columns)","d83a28ed":"pcaModel.explained_variance_ratio_.cumsum()","63c32378":"x_pca_c=pd.concat([x_pca_c,merc_train.ID],axis=1)","271144cc":"x_non_pca=pd.concat([x.iloc[:,9:],merc_train.ID],axis=1)","d57375ca":"x_pca=pd.merge(left=x_pca_c,right=x_non_pca,on='ID',how='inner')","8b537701":"x_pca.drop(columns=['ID'],inplace=True)","8606749a":"x_pca","286f6382":"def perform_pca(df,x):\n    pcaModel=PCA(n_components=7)\n    pcaModel.fit(x.iloc[:,0:9])\n    x_pca_c=pd.DataFrame(pcaModel.transform(x.iloc[:,0:9]),columns=['C1','C2','C3','C4','C5','C6','C7'])\n    x_pca_c=pd.concat([x_pca_c,df.ID],axis=1)\n    x_non_pca=pd.concat([x.iloc[:,9:],df.ID],axis=1)\n    x_pca=pd.merge(left=x_pca_c,right=x_non_pca,on='ID',how='inner')\n    x_pca.drop(columns=['ID'],inplace=True)\n    return x_pca","55a002f3":"x_pca=perform_pca(merc_train,x)","9bfe1347":"x_pca.head()","6e78bb3d":"x_train,x_test,y_train,y_test=train_test_split(x_pca,y,random_state=10,train_size=0.75)\nxgbModel=XGBRegressor(max_depth=4, min_child_weight=5, reg_lambda=100, gamma = 200)\nxgbModel.fit(x_train,y_train)\nprint(xgbModel.score(x_train,y_train))\nprint(xgbModel.score(x_test,y_test))","a15d1d4f":"from sklearn.model_selection import GridSearchCV","eb524f46":"param_grid = {'reg_lambda': [100,200,500],  \n              'gamma':[100, 150, 200],\n              'min_child_weight':[4,5,6]\n             }\n#grid = GridSearchCV(XGBRegressor(), param_grid, refit = True, verbose = 3, cv=5) \n#grid.fit(x_train,y_train)","d18d759c":"#grid.best_params_","6fdb20fa":"#grid.best_estimator_","06ea8c80":"xgbModel_final=XGBRegressor(max_depth=4, min_child_weight=4, reg_lambda=100, gamma=150)","1ee61a41":"xgbModel_final.fit(x_train,y_train)","a19a7a89":"xgbModel_final.score(x_train,y_train)","aecaa418":"xgbModel_final.score(x_test,y_test)","eca80b37":"xgb_feature_imp=(pd.DataFrame(xgbModel_final.feature_importances_,index=x_pca.columns))","0256b8a4":"xgb_feature_imp.sort_values(by=0)#,ascending=False)","306fd5d8":"xgb_feature_imp[xgb_feature_imp[0]==0].index.values.size","f7a525ba":"merc_test = pd.read_csv('\/kaggle\/input\/mercedes-benz-greener-manufacturing\/test.csv.zip')","433f742d":"merc_test.head()","c93fa80e":"var_zero_cols(merc_test)","ba1d0f90":"merc_test.drop(columns=['X297', 'X11', 'X290', 'X293', 'X268', 'X233', 'X93', 'X289', 'X235', 'X107', 'X330', 'X347'],inplace=True)","ee740335":"transform_X0(merc_test)","7a90a7e9":"transform_X4(merc_test)","9f233c05":"transform_X1(merc_test)","387af8b5":"transform_X5(merc_test)","1c7a47a2":"x=merc_test.drop(columns=['ID'])","39e3f967":"transform_labels(merc_test,x)","0e263bed":"x.head()","d9c2c815":"x_pca_t=perform_pca(merc_test,x)","005f29fc":"x_pca_t.shape","84b08892":"merc_test_pred=pd.DataFrame(xgbModel_final.predict(x_pca_t),columns=['y'])","8c6f4482":"merc_test_pred['ID']=merc_test.ID","f7f8d868":"merc_test_pred.tail(10)","5f90ed0d":"merc_test_pred.to_csv('Mercedes_TestData_Predictions.csv',index=False)","72bb6d46":"**Dropping zero variance features of training set, from test set, as the above model is not trained on those features**","ef7cf50b":"**Above model is overfit, so now trying with PCA only on categorical features**","a8de1e3c":"**There are no null values in the train data**","0c7f48d2":"**Above columns have zero variance, so dropping them from the data**","23868418":"***PCA on categorical features, tried with same number of components, and observed 99.99% variance ratio is achieved by 7 components, so fixed n_components to 7***","bf84649a":"## Trying to reduce dimensions using PCA ##","0692462d":"## Predicting outcome on test data ##","832851e2":"**Important observation here is, Feature importance is 0 for 311 features.**","2c00ec8e":"## Analyzing feature X6 ## ","ae4451cf":"**All the above columns X0 to X8 are categorical data, so we need to transform them into numerical. Before that Lets look at categorical data and plot them to observe the impact on outcome**","f91ddb4b":"**It is evident from the above counts that X4 is 'd' in more than 99% of the cases, so transforming the data to d, ~d** ","f2db12ae":"## Check for null and unique values for train set##","ea53b1f0":"**There are not too many labels, so leaving the data as is**","8a74666a":"## Analyzing feature X8 ##","8917b179":"**When included ID, ID feature alone is able to explain 99%, but removing ID** ","45547f65":"## Grid Search with cv=5##","396502d3":"**Tried different values of lambda like 10,100,1000, observed scores improvement for higher values of lambda, so will be performing grid search with high values**","c084277f":"**Dropping the extreme outlier observation**","50eb2842":"## Analyzing feature X4 ##","8794dee8":"## Analyzing feature X3 ##","26e252f4":"**From the above barplots on categorical features, it is evident that outcome(y) is not majorly impacted by these features**","cb2f81d6":"**From the above barplots, we can say that categorical features X1,X2,X3,X5,X7,X8 are not making much impact on the outcome, so considering PCA on X0,X4,X6**","6a54473f":"## Analyzing feature X1##","461581ff":"## Applying label encoder on categorical features to convert them to numerical##","f6acad13":"## Analyzing feature X5 ##","2d35d813":"## Defining a function to perform PCA on categorical features using the above approach ##","e1b3bde8":"## Analyzing feature X0 ##","6a8c895c":"## Check for variance of the columns, and drop those columns from the data##"}}