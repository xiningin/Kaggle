{"cell_type":{"8af1c399":"code","ec274822":"code","15d6d92e":"code","0f5cdff6":"code","ab7f12a0":"code","be57a42d":"code","988160e6":"code","af2f6da4":"code","66f3a643":"code","75d9ec47":"code","6553665c":"code","a5518555":"code","464b0d53":"code","9410f4d4":"code","b7fb88be":"code","42f5363c":"code","83726b6d":"code","c5426621":"markdown","b5e8ee32":"markdown","e6665f69":"markdown","61169165":"markdown","be730e33":"markdown","fd160ca8":"markdown","f8d77b03":"markdown","2672be35":"markdown","3fb24439":"markdown","d91f7387":"markdown","1bed1f99":"markdown","54d98490":"markdown","4953e28c":"markdown","0d36e694":"markdown","88027d52":"markdown"},"source":{"8af1c399":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom xgboost import XGBRegressor\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ec274822":"path = '\/kaggle\/input\/ventilator-pressure-prediction\/'\nos.listdir(path)","15d6d92e":"train_data = pd.read_csv(path+'train.csv')\ntest_data = pd.read_csv(path+'test.csv')\nsamp_subm = pd.read_csv(path+'sample_submission.csv')","0f5cdff6":"print('Number of train samples: ', len(train_data.index))\nprint('Number of test samples: ', len(test_data.index))\nprint('Number of features: ', len(train_data.columns))","ab7f12a0":"train_data.head()","be57a42d":"train_data[train_data.columns[1:]].describe().round(3)","988160e6":"train_data['pressure'].hist(bins=100);","af2f6da4":"def scale_data(df):\n    norm_df = (df-df.min())\/(df.max()-df.min())\n    return norm_df","66f3a643":"train_data[train_data.columns[1:-1]] = scale_data(train_data[train_data.columns[1:-1]])\ntest_data[test_data.columns[1:]] = scale_data(test_data[test_data.columns[1:]])","75d9ec47":"number_subset = len(train_data) #test: 1000000\nX_train = train_data[train_data.columns[1:-1]][:number_subset]\ny_train = train_data['pressure'][:number_subset]\nX_test = test_data[test_data.columns[1:]]","6553665c":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.3, random_state=2021)","a5518555":"model = XGBRegressor(objective='reg:squarederror', n_estimators=500)\n#model = DecisionTreeRegressor(random_state=2021)\nmodel.fit(X_train, y_train)\ny_val_pred = model.predict(X_val)\nprint('MAE:', mean_absolute_error(y_val, y_val_pred))","464b0d53":"importance = model.feature_importances_\nfig = plt.figure(figsize=(10, 6))\nx = X_train.columns.values\nplt.barh(x, 100*importance)\nplt.title('Feature Importance', loc='left')\nplt.xlabel('Percentage')\nplt.grid()\nplt.show()","9410f4d4":"y_train_pred = model.predict(X_train)\ny_val_pred = model.predict(X_val)\n\nfig, axs = plt.subplots(1, 2, figsize=(22, 6))\nfig.subplots_adjust(hspace = .5, wspace=.5)\naxs = axs.ravel()\naxs[0].plot(y_train, y_train_pred, 'ro')\naxs[0].plot(y_train, y_train, 'blue')\naxs[1].plot(y_val, y_val_pred, 'ro')\naxs[1].plot(y_val, y_val, 'blue')\nfor i in range(2):\n    axs[i].grid()\n    axs[i].set_xlabel('true')\n    axs[i].set_ylabel('pred')\naxs[0].set_title('train')\naxs[1].set_title('val')\nplt.show()","b7fb88be":"y_test = model.predict(X_test)\nsamp_subm['pressure'] = y_test","42f5363c":"samp_subm.head()","83726b6d":"samp_subm.to_csv('submission.csv', index=False)","c5426621":"We split the train data into the train data to train the model and the validation data to evaluate the model:","b5e8ee32":"# Split Data\nWe define the train and test data. The goal is to predict the pessure. We skip the feature *id* in the train and test data. To test the workflow we train on a subset of the train data set.","e6665f69":"# Load Data","61169165":"# Intro\nWelcome to the [Google Brain - Ventilator Pressure Prediction](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/data) competition.\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/29594\/logos\/header.png)\n<span style=\"color: royalblue;\">Please vote the notebook up if it helps you. Feel free to leave a comment above the notebook. Thank you. <\/span>","be730e33":"# Overview","fd160ca8":"# Predict Test Data","f8d77b03":"# Scale Data","2672be35":"# Libraries","3fb24439":"# Analyse The Error","d91f7387":"# Exploratory Data Analysis","1bed1f99":"# Feature Importance","54d98490":"**Features**\n* id - globally-unique time step identifier across an entire file\n* breath_id - globally-unique time step for breaths\n* R - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n* C - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n* time_step - the actual time stamp.\n* u_in - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n* u_out - the control input for the exploratory solenoid valve. Either 0 or 1.\n* pressure - the airway pressure measured in the respiratory circuit, measured in cmH2O.","4953e28c":"# Export","0d36e694":"# Model\nWe use a simple Regressor first:","88027d52":"# Path"}}