{"cell_type":{"23a7ca0c":"code","1cf6860b":"code","8b9b2d49":"code","49d62f2e":"code","113c84ca":"code","b09f84ba":"code","66f7b504":"code","f6f6cb54":"code","24556253":"code","a148d513":"code","c7f5a65d":"code","2d44835f":"code","98e55d64":"code","0e7c82bf":"code","212ca4fc":"code","6eb5b296":"code","44195d0c":"code","e2bcf615":"code","f2679984":"code","f16057b0":"code","0d1bd56a":"code","db33bcf2":"code","378d4ba5":"code","81a438b5":"code","c7396b39":"code","07b5f1cf":"code","2f2d1097":"code","bf9afa2f":"code","4bcd92ba":"code","02075c15":"code","85a53ed8":"code","1173b50e":"code","57cbda27":"code","24d584d9":"code","e0e1d52d":"code","3eedf394":"code","8d34f162":"code","596d713b":"code","63de4fd7":"code","6012ddb7":"code","f113442e":"code","915a8afc":"code","694e7c0d":"code","5bbb0f27":"code","4b32636f":"code","b88624cc":"code","fcfe122f":"code","4b4fbfb5":"code","c968678f":"code","cc934bb8":"code","f1b900f0":"code","cbb17a33":"code","b4dcf3f3":"code","26d0ae47":"code","3b5367ec":"code","98e45f61":"code","c1defd92":"code","3f892916":"code","78571616":"code","a384f25b":"code","8e3f17b6":"code","588b651f":"code","82d86fd3":"code","84f14215":"code","85222089":"code","850e7168":"code","3c41a69d":"code","61a03d9b":"code","3c4de39d":"code","192a946b":"code","5c97ec82":"code","369af826":"code","2396e512":"code","7465507a":"code","d758dc54":"code","7948e249":"code","9ecdeff6":"code","94c30090":"code","039ea29e":"code","7a6acd5c":"code","ba28bf13":"code","b7181fdd":"code","cffb8673":"code","8ca638cb":"code","89d81752":"code","08a28a38":"code","ee4dde0b":"code","562b0e4f":"code","5ae1865e":"code","dfadece0":"code","10322663":"code","0acd89a8":"code","ea8c86a3":"code","59e875e2":"code","11c984d5":"code","f77178f9":"code","d0714abd":"code","46813143":"code","0552d0d5":"code","40ccb6ad":"code","93650e22":"code","28617b0c":"code","5736797f":"code","d2cff358":"code","502fbf1e":"code","d718d865":"code","d5e4746b":"code","526904cc":"code","9f9d03a6":"code","b55d27ca":"code","447ec40c":"code","c6f9d23c":"code","cfa9ae47":"code","84d56811":"code","a0ab7915":"code","11daeaec":"code","cdf73134":"code","e4c43e6d":"code","225c131f":"code","87ea32de":"code","8e6906e1":"code","d544897a":"code","bb650190":"code","1281f5ec":"code","4ca8ca4c":"code","68fa7429":"code","9f825567":"code","45d5dfd0":"code","7bcb629c":"code","5263ef48":"code","b2d7aa09":"code","7cce8fb1":"code","bd342498":"code","c2be5f2b":"code","f86663e0":"code","f07a87e2":"code","6086cb8f":"code","54b68f4b":"code","40fd53f7":"code","748e04eb":"code","51dff2ff":"code","f0747d5a":"code","84dbb2e7":"code","88778522":"code","b123b93e":"code","943a89ce":"code","3f40b4b1":"code","d196cacf":"code","e0eb55a9":"code","5cea6650":"code","f29e5cd1":"code","430441da":"code","3530063a":"code","120634ef":"code","5c2f79de":"code","3692342b":"code","675608be":"code","0af75a89":"code","a73ad2e6":"code","a19604ff":"code","0dd43134":"code","61d680e1":"code","876c75d6":"code","7b4fc5f4":"code","94a866a9":"code","9b3e5a35":"code","94a8e6f3":"code","728772c9":"code","3f959fb5":"code","ce668cb3":"code","dfa59c34":"code","f13bb2e4":"code","dfb8286c":"code","3c633f84":"code","b6905d35":"code","163d2c06":"code","b1e96b5d":"code","07455c5b":"code","4cd5f93e":"code","3d8ecf54":"markdown","6360acaf":"markdown","8287e8be":"markdown","e4c068fa":"markdown","42792220":"markdown","70076a1f":"markdown","941daca6":"markdown","2aa71ec7":"markdown","6f972219":"markdown","24458004":"markdown","04435953":"markdown","cc4d3e2e":"markdown","5e09985d":"markdown","9d744c2c":"markdown","e3579b8e":"markdown","87c7d109":"markdown","c0d18f46":"markdown","1015e0df":"markdown","7834b3b6":"markdown","d7efd4aa":"markdown","dfbac373":"markdown","7e90f29e":"markdown","74af6b0e":"markdown","0efc5f8a":"markdown","ac89ddc9":"markdown","5d6dd6b9":"markdown","456d735d":"markdown"},"source":{"23a7ca0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1cf6860b":"from fastai_structured import *\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import RandomizedSearchCV\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport altair as alt","8b9b2d49":"df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf.shape","49d62f2e":"display_all(df.head(5).T)","113c84ca":"df.describe().T","b09f84ba":"df.dtypes.value_counts()","66f7b504":"df.select_dtypes(['object']).isna().sum()","f6f6cb54":"df.select_dtypes(['float64']).isna().sum()","24556253":"df['TotalSqFeet'] = df.GrLivArea + df.TotalBsmtSF\ndf['TotBathrooms'] = df.FullBath + (df.HalfBath)*0.5 + df.BsmtFullBath + (df.BsmtHalfBath)*0.5\ndf.set_index('Id',inplace=True)\n#df.drop('Id',inplace=True, axis=1)","a148d513":"df.groupby(\"Neighborhood\")[\"SalePrice\"].mean().sort_values(ascending=False).index","c7f5a65d":"df.groupby(\"MSSubClass\")[\"SalePrice\"].mean().sort_values(ascending=False)","2d44835f":"alt.Chart(df).mark_bar().encode(\n    x='MeanPrice:Q',\n    y=alt.Y('MSSubClass:N', sort='-x'), \n).transform_aggregate(\n    MeanPrice='average(SalePrice)',\n    groupby=['MSSubClass']\n)","98e55d64":"alt.Chart(df).mark_boxplot().encode(\n    x='MSSubClass:N',\n    y=alt.Y('SalePrice:Q', sort='-x') #sort does not works\n)    ","0e7c82bf":"# def add_datepart(df, fldname, drop=True, time=False, errors=\"raise\"):","212ca4fc":"train_cats(df) #for train set\n# apply_cats(test) #for test set IMPORTANT","6eb5b296":"# get_dummies option","44195d0c":"#df.MSSubClass.cat.categories","e2bcf615":"#df.MSSubClass.cat.set_categories(['60', '120', '75', '20', '80', '70', '40', '85', '50', '160', '90', '190', '45', '180', '30'], ordered=True, inplace=True)","f2679984":"df.Neighborhood.cat.categories","f16057b0":"df.Neighborhood.cat.set_categories(['NoRidge', 'NridgHt', 'StoneBr', 'Timber', 'Veenker',\n                  'Somerst', 'ClearCr', 'Crawfor', 'CollgCr', 'Blmngtn',\n                  'Gilbert', 'NWAmes', 'SawyerW', 'Mitchel', 'NAmes',\n                  'NPkVill', 'SWISU', 'Blueste', 'Sawyer', 'OldTown',\n                  'Edwards', 'BrkSide', 'BrDale', 'IDOTRR', 'MeadowV'], ordered=True, inplace=True)","0d1bd56a":"df.info()","db33bcf2":"test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest['TotalSqFeet'] = test.GrLivArea + test.TotalBsmtSF\ntest['TotBathrooms'] = test.FullBath + (test.HalfBath)*0.5 + test.BsmtFullBath + (test.BsmtHalfBath)*0.5\ntest.set_index('Id', inplace=True)\n#test.drop('Id',inplace=True, axis=1)\n\napply_cats(test, df)","378d4ba5":"test.Neighborhood = test.Neighborhood.cat.codes\ndf.Neighborhood = df.Neighborhood.cat.codes","81a438b5":"display_all(df.isna().sum()\/len(df)*100)","c7396b39":"X, y, nas = proc_df(df, 'SalePrice') # max_n_cat=10\nX_test, _, _ = proc_df(test, na_dict=nas) # max_n_cat=10","07b5f1cf":"X.skew(axis=0).sort_values(ascending=False)","2f2d1097":"numeric_feats = X.select_dtypes(include=np.number)\n\n# Check the skew of all numerical features\nskewed_feats = X[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","bf9afa2f":"numeric_feats = df.select_dtypes(include=np.number)\n\n# Check the skew of all numerical features\nskewed_feats = [numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)\n\nskewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","4bcd92ba":"y_first = np.log1p(df.SalePrice) # if log required","02075c15":"y = np.log1p(y_first)","85a53ed8":"display_all(X.isna().sum()\/len(X)*100)","1173b50e":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_estimators=10000)\nxgb.fit(X, y, verbose=False)\nxgb.score(X, y)","57cbda27":"m = CatBoostRegressor(random_state=0, verbose=1000, n_estimators=100000, learning_rate=0.007, early_stopping_rounds=5) #logging_level='Silent' \nm.fit(X, y)\nm.score(X, y)","24d584d9":"m = CatBoostRegressor(random_state=0, verbose=1000, n_estimators=10000) #logging_level='Silent' \nm.fit(X, y)\nm.score(X, y)","e0e1d52d":"# m = CatBoostRegressor(task_type='GPU', random_state=0, verbose=1000,  n_estimators=100000) #logging_level='Silent' \n# m.fit(X, y)\n# m.score(X, y)","3eedf394":"m.save_model('hp_cb', \n           format=\"cbm\",\n           export_parameters=None,\n           pool=None)","8d34f162":"# m = CatBoostClassifier() #https:\/\/catboost.ai\/docs\/concepts\/python-usages-examples.html#training-continuation\n# m.load_model('\/kaggle\/input\/catboost\/hp_cb', format='cbm')\n# m.score(X, y)","596d713b":"m = RandomForestRegressor(n_jobs=-1, n_estimators=60, random_state=0)\nm.fit(X, y)\nm.score(X, y)","63de4fd7":"et = ExtraTreesRegressor(n_jobs=-1, n_estimators=500, random_state=0, max_features=0.5) #max_features=0.5\net.fit(X, y)\net.score(X, y)","6012ddb7":"m = ExtraTreesRegressor(n_jobs=-1, n_estimators=500, random_state=0, max_features=0.5) #max_features=0.5\nm.fit(X, y)\nm.score(X, y)","f113442e":"X_test.columns.difference(X.columns)","915a8afc":"import shap\nfrom catboost import Pool","694e7c0d":"pd.set_option('display.max_rows', 100)","5bbb0f27":"shap_values = m.get_feature_importance(Pool(X, y), type='ShapValues')","4b32636f":"X.columns","b88624cc":"shap.dependence_plot(\"TotalSqFeet\", shap_values, X)","fcfe122f":"shap.summary_plot(shap_values, X)","4b4fbfb5":"m.get_feature_importance(type='PredictionValuesChange', prettified=True)","c968678f":"m.get_feature_importance(Pool(X, y), type='LossFunctionChange', prettified=True)","cc934bb8":"X.iloc[:,11]","f1b900f0":"X.iloc[:,16]","cbb17a33":"X.iloc[:,45]","b4dcf3f3":"X.iloc[:,79]","26d0ae47":"m.get_feature_importance(type='Interaction', prettified=True)","3b5367ec":"# Number of trees in random forest\n# n_estimators = [95, 145, 425]\n\n# Number of features to consider at every split\nmax_features = ['sqrt', 'log2', 0.5, None] # sqrt = auto\n\n# Maximum number of levels in tree\nmin_samples_leaf = [1, 3, 5, 10, 25, 100]\n\nrandom_grid = {'min_samples_leaf': min_samples_leaf,\n               'max_features': max_features}\n               #'n_estimators': n_estimators}\n\nprint(random_grid)","98e45f61":"rf = RandomForestRegressor(n_estimators=100) #ExtraTrees\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, \n                               n_iter = 20, cv = 5, verbose=2, random_state=10, n_jobs=-1) #scoring = 'precision_weighted'","c1defd92":"# rf = ExtraTreesRegressor(n_estimators=500) #ExtraTrees\n# rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, \n#                                n_iter = 20, cv = 5, verbose=2, random_state=10, n_jobs=-1) #scoring = 'precision_weighted'","3f892916":"search = rf_random.fit(X, y)\nprint('Par:', search.best_params_)\nprint('Score:', search.best_score_)","78571616":"y_pred_xgb = xgb.predict(X_test)","a384f25b":"y_pred_cb = m.predict(X_test)","8e3f17b6":"y_pred = 9\/10 * y_pred_cb + 1\/10 * y_pred_et","588b651f":"y_pred = y_pred_cb","82d86fd3":"y_pred = rf_random.predict(X_test)","84f14215":"y_first = np.expm1(y_pred)","85222089":"y_pred = np.expm1(y_first) # fix log","850e7168":"my_submission = pd.DataFrame({'Id': test.index, 'SalePrice': y_pred})","3c41a69d":"my_submission.to_csv('submission.csv', index=False)","61a03d9b":"## IBM\n# msk = np.random.rand(len(df)) < 0.8\n# train = df[msk]\n# valid = df[~msk]","3c4de39d":"processed = X.copy()\nprocessed['SalePrice'] = y","192a946b":"def split_vals(a,n): return a[:n].copy(), a[n:].copy()\n\nn_valid = int(len(processed)*0.2) #Select valid size \nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(processed, n_trn)\nX_train, X_valid = split_vals(X, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","5c97ec82":"def print_score(m):\n    res = [rmse(m.predict(X_train), y_train), rmse(m.predict(X_valid), y_valid),\n                m.score(X_train, y_train), m.score(X_valid, y_valid)]\n    if hasattr(m, 'oob_score_'): res.append(m.oob_score_)\n    print(res)","369af826":"print_score(m)","2396e512":"m = ExtraTreesRegressor(n_jobs=-1, bootstrap=True, oob_score=True)\n%time m.fit(X_train, y_train)\nprint_score(m)","7465507a":"m = RandomForestRegressor(n_jobs=-1, oob_score=True)\n%time m.fit(X_train, y_train)\nprint_score(m)","d758dc54":"df_trn, y_trn, nas = proc_df(df, 'SalePrice')\nX_train, _ = split_vals(df_trn, n_trn)\ny_train, _ = split_vals(y_trn, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","7948e249":"??RandomForestRegressor","9ecdeff6":"X_train","94c30090":"m = RandomForestRegressor(n_estimators=10, max_depth=4, bootstrap=False, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","039ea29e":"draw_tree","7a6acd5c":"draw_tree(m.estimators_[0], X, size=20, ratio=0.9999, precision=1)","ba28bf13":"m = ExtraTreesRegressor(n_jobs=-1, n_estimators=500, bootstrap=True, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","b7181fdd":"preds = np.stack([t.predict(X_valid) for t in m.estimators_])\n#preds[:,0], np.mean(preds[:,0]), y_valid[0]","cffb8673":"preds.shape","8ca638cb":"from sklearn import *","89d81752":"plt.plot([metrics.r2_score(y_valid, np.mean(preds[:i+1], axis=0)) for i in range(1000)]);","08a28a38":"??RandomForestRegressor","ee4dde0b":"m = RandomForestRegressor(bootstrap=True, n_jobs=-1)\nm.fit(X_train, y_train)\nprint_score(m)","562b0e4f":"set_rf_samples(50000)","5ae1865e":"def split_vals(a,n): return a[:n].copy(), a[n:].copy()\n\nn_valid = int(len(processed)*0.2) #Select valid size \nn_trn = len(df)-n_valid\nraw_train, raw_valid = split_vals(processed, n_trn)\nX_train, X_valid = split_vals(X, n_trn)\ny_train, y_valid = split_vals(y, n_trn)\n\nX_train.shape, y_train.shape, X_valid.shape","dfadece0":"raw_train, raw_valid = split_vals(df, n_trn)","10322663":"def get_preds(t): return t.predict(X_valid)\n%time preds = np.stack(parallel_trees(m, get_preds)) #FAST\nnp.mean(preds[:,0]), np.std(preds[:,0])","0acd89a8":"x = raw_valid.copy()\nx.Neighborhood.value_counts().plot.barh();","ea8c86a3":"x['pred_std'] = np.std(preds, axis=0)\nx['pred'] = np.mean(preds, axis=0)\nflds = ['Neighborhood', 'SalePrice', 'pred', 'pred_std']\nnei_summ = x[flds].groupby('Neighborhood', as_index=False).mean()\nnei_summ.head()","59e875e2":"nei_summ = nei_summ[~pd.isnull(nei_summ.SalePrice)]\nnei_summ.plot('Neighborhood', 'SalePrice', 'barh');","11c984d5":"nei_summ.plot('Neighborhood', 'pred', 'barh', xerr='pred_std', alpha=0.6);","f77178f9":"m = ExtraTreesRegressor(n_jobs=-1, n_estimators=100, bootstrap=True, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","d0714abd":"# test added features\nfi = rf_feat_importance(m, X)","46813143":"fi = rf_feat_importance(m, df_trn)","0552d0d5":"list(fi[:6].cols)","40ccb6ad":"fi[:10].plot('cols', 'imp', figsize=(15,6), legend=False)","93650e22":"def plot_fi(fi): return fi.plot('cols', 'imp', 'barh', figsize=(12,7), legend=False)","28617b0c":"plot_fi(fi[:10]);","5736797f":"plot_fi(fi[:25]);","d2cff358":"to_keep = fi[fi.imp>0.004].cols; len(to_keep)","502fbf1e":"df_keep = df_trn[to_keep].copy()\nX_train, X_valid = split_vals(df_keep, n_trn)","d718d865":"#test added\ndf_keep = X[to_keep].copy()","d5e4746b":"m = ExtraTreesRegressor(n_jobs=-1, n_estimators=500, random_state=0) #max_features=0.5\nm.fit(df_keep, y)","526904cc":"m = RandomForestRegressor(max_features=0.5,\n                          n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)\nprint_score(m)","9f9d03a6":"fi = rf_feat_importance(m, df_keep)\nplot_fi(fi);","b55d27ca":"df.Neighborhood.value_counts()","447ec40c":"df.MSSubClass.value_counts()","c6f9d23c":"df.GarageType.value_counts()","cfa9ae47":"fi","84d56811":"list(fi.iloc[0:9,:].cols)","a0ab7915":"from scipy.cluster import hierarchy as hc","11daeaec":"from scipy.stats import spearmanr as sp","cdf73134":"corr = np.round(sp(df_keep).correlation, 4)\ncorr_condensed = hc.distance.squareform(1-corr)\nz = hc.linkage(corr_condensed, method='average')\nfig = plt.figure(figsize=(16,10))\ndendrogram = hc.dendrogram(z, labels=df_keep.columns, orientation='left', leaf_font_size=16)\nplt.show()","e4c43e6d":"def get_oob(df):\n    m = RandomForestRegressor(n_estimators=500, n_jobs=-1, oob_score=True)\n    x, _ = split_vals(df, n_trn)\n    m.fit(x, y_train)\n    return m.oob_score_","225c131f":"get_oob(df_keep)","87ea32de":"# pip install --upgrade pip\n# pip uninstall enum34\n# !pip install hdbscan","8e6906e1":"conda install -c conda-forge hdbscan","d544897a":"import hdbscan\ndata = df_keep\n\nclusterer = hdbscan.HDBSCAN(min_cluster_size=3, gen_min_span_tree=True)\nclusterer.fit(data)","bb650190":"clusterer.minimum_spanning_tree_.plot(edge_cmap='viridis',\n                                      edge_alpha=0.6,\n                                      node_size=2,\n                                      edge_linewidth=2)","1281f5ec":"clusterer.condensed_tree_.plot()","4ca8ca4c":"for i in x.columns:\n    plt.figure()\n    plt.title(x[i].name)\n    plt.hist(x[i], bins=100)","68fa7429":"from pdpbox import pdp\nfrom plotnine import *","9f825567":"df_all = df_keep\ndf_all[\"SalePrice\"] = y","45d5dfd0":"!pip install scikit-misc","7bcb629c":"df.columns","5263ef48":"ggplot(df_all, aes('TotalSqFeet', 'SalePrice'))+stat_smooth(se=True, method='loess')","b2d7aa09":"ggplot(df_all, aes('SalePrice', 'TotalSqFeet'))+stat_smooth(se=True, method='loess')","7cce8fb1":"alt.Chart(df_all).mark_circle().encode(\n    x='TotalSqFeet',\n    y='SalePrice'\n).interactive()  ","bd342498":"ggplot(df_all, aes('OverallQual', 'SalePrice'))+stat_smooth(se=True, method='loess')","c2be5f2b":"ggplot(df_all, aes('SalePrice', 'OverallQual'))+stat_smooth(se=True, method='loess')","f86663e0":"alt.Chart(df_all).mark_circle().encode(\n    x='OverallQual',\n    y='SalePrice'\n).interactive() ","f07a87e2":"ggplot(df_all, aes('SalePrice', 'Neighborhood'))+stat_smooth(se=True, method='loess')","6086cb8f":"ggplot(df_all, aes('Neighborhood', 'SalePrice'))+stat_smooth(se=True, method='loess')","54b68f4b":"alt.Chart(df_all).mark_circle().encode(\n    x='Neighborhood',\n    y='SalePrice'\n).interactive() ","40fd53f7":"ggplot(df_all, aes('GarageCars', 'SalePrice'))+stat_smooth(se=True, method='loess')","748e04eb":"ggplot(df_all, aes('SalePrice', 'GarageCars'))+stat_smooth(se=True, method='loess')","51dff2ff":"alt.Chart(df_all).mark_circle().encode(\n    x='GarageCars',\n    y='SalePrice'\n).interactive() ","f0747d5a":"ggplot(df_all, aes('SalePrice', 'YearBuilt'))+stat_smooth(se=True, method='loess')","84dbb2e7":"ggplot(df_all, aes('YearBuilt', 'SalePrice'))+stat_smooth(se=True, method='loess')","88778522":"alt.Chart(df_all).mark_circle().encode(\n    x='YearBuilt',\n    y='SalePrice'\n).interactive()    ","b123b93e":"x = df_all.copy()\nx.drop('SalePrice', axis=1, inplace=True)\n\ndef plot_pdp(feat, clusters=None, feat_name=None):\n    feat_name = feat_name or feat\n    p = pdp.pdp_isolate(m, x, feature = feat, model_features = x.columns)\n    return pdp.pdp_plot(p, feat_name, plot_lines=True, \n                        cluster=clusters is not None, n_cluster_centers=clusters)","943a89ce":"x.columns","3f40b4b1":"plot_pdp('TotalSqFeet')","d196cacf":"plot_pdp('TotalSqFeet', clusters=5)","e0eb55a9":"plot_pdp('OverallQual')","5cea6650":"plot_pdp('OverallQual', clusters=5)","f29e5cd1":"plot_pdp('GarageCars')","430441da":"plot_pdp('GarageCars', clusters=5)","3530063a":"plot_pdp('YearBuilt')","120634ef":"plot_pdp('YearBuilt', clusters=5)","5c2f79de":"x.columns","3692342b":"feats = ['TotalSqFeet', 'OverallQual']\np = pdp.pdp_interact(m, x, x.columns, feats)\npdp.pdp_interact_plot(p, feats)","675608be":"feats = ['GarageCars', 'Neighborhood']\np = pdp.pdp_interact(m, x, x.columns, feats)\npdp.pdp_interact_plot(p, feats)","0af75a89":"feats = ['OverallQual', 'Neighborhood']\np = pdp.pdp_interact(m, x, x.columns, feats)\npdp.pdp_interact_plot(p, feats)","a73ad2e6":"feats = ['YearBuilt', 'Neighborhood']\np = pdp.pdp_interact(m, x, x.columns, feats)\npdp.pdp_interact_plot(p, feats)","a19604ff":"df","0dd43134":"#plot_pdp(['Enclosure_EROPS w AC', 'Enclosure_EROPS', 'Enclosure_OROPS'], 5, 'Enclosure')","61d680e1":"!pip install treeinterpreter","876c75d6":"from treeinterpreter import treeinterpreter as ti","7b4fc5f4":"df_train, df_valid = split_vals(df[df_keep.columns], n_trn)","94a866a9":"row = X_valid.values[None,1]; row","9b3e5a35":"prediction, bias, contributions = ti.predict(m, row)","94a8e6f3":"prediction[0], bias[0]","728772c9":"idxs = np.argsort(contributions[0])","3f959fb5":"[o for o in zip(df_keep.columns[idxs], df_valid.iloc[0][idxs], contributions[0][idxs])]","ce668cb3":"columns = ['OverallQual', 'GrLivArea', 'YearBuilt', 'GarageCars',\n 'TotalBsmtSF', '1stFlrSF', 'BsmtFinSF1', 'GarageArea', 'LotArea']\n\ndf.loc[:, columns]","dfa59c34":"df.loc[:, columns].dtypes","f13bb2e4":"import seaborn as sns\ndf.loc[:, columns].hist(figsize=(20,15), bins=50, grid=False)\nsns.despine()","dfb8286c":"%whos","3c633f84":"X.dtypes","b6905d35":"numeric_feats = X.dtypes[X.dtypes != \"bool\"].index","163d2c06":"skewed_feats = X.apply(lambda x: skew().sort_value","b1e96b5d":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","07455c5b":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","4cd5f93e":"all_features = pd.get_dummies(all_features).reset_index(drop=True)\nall_features.shape","3d8ecf54":"# Confidence based on tree variance","6360acaf":"# Hyper params","8287e8be":"# Lesson 3 - RF interpretation","e4c068fa":"# Lesson 1","42792220":"# STDEV, log\n","70076a1f":"# PDP","941daca6":"# Features (Kaggle)","2aa71ec7":"        60\t2-STORY 1946 & NEWER\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        30\t1-STORY 1945 & OLDER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES","6f972219":"https:\/\/github.com\/chrispaulca\/waterfall\nhttps:\/\/github.com\/anandsaha\/fastai.part1.v2\/blob\/master\/fastai\/structured.py","24458004":"https:\/\/youtu.be\/BFIYUvBRTpE?t=4249\n","04435953":"## Modeling","cc4d3e2e":"# Lesson 2","5e09985d":"# CB interpretation","9d744c2c":"## Load and see the data","e3579b8e":"# Remove redundant \n","87c7d109":"### Preprocessing\n","c0d18f46":"# Bagging","1015e0df":"# https:\/\/github.com\/Gokkulnath\/fastai-v0.7\/blob\/master\/courses\/ml1\/lesson2-rf_interpretation.ipynb","7834b3b6":"## Submission","d7efd4aa":"### Object type vars","dfbac373":"# Tree interpreter","7e90f29e":"# Feature importance","74af6b0e":"### NAs","0efc5f8a":"## Process","ac89ddc9":"## Imports","5d6dd6b9":"Change strings into cats.","456d735d":"### Dates"}}