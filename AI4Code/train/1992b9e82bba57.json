{"cell_type":{"163fc2c5":"code","9bd39cc0":"code","d83cbec4":"code","9f8821af":"code","ecb6d36b":"code","a0092cb3":"code","db4a9b42":"code","f477fab8":"code","3597f91b":"code","03240423":"code","3bd036ba":"code","b468c8a7":"code","3db2bdad":"code","cab266b7":"code","1df16063":"code","624d4cac":"code","c1786d77":"code","ba6448ee":"code","ca5729f6":"code","ff0af79a":"code","63d1d967":"code","c0ef6313":"code","ed016dba":"code","66345b43":"code","647c13f7":"markdown","4aff9982":"markdown","4db617e8":"markdown","e022e359":"markdown","6bbd5721":"markdown","c20634a0":"markdown","0751669b":"markdown","92cd66a7":"markdown","3ba4ee19":"markdown","2101e698":"markdown"},"source":{"163fc2c5":"import re\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pathlib import Path\ninput_path = Path(\"..\/input\")\n%matplotlib inline","9bd39cc0":"# reference\n# https:\/\/www.kaggle.com\/anokas\/kuzushiji-visualisation\ndf_train = pd.read_csv( input_path \/ 'train.csv')\nunicode_trans = pd.read_csv( input_path \/ 'unicode_translation.csv')\ntrain_image_path = input_path \/ \"train_images\"\ntest_image_path = input_path \/ \"test_images\"\nunicode_map = {codepoint: char for codepoint, char in unicode_trans.values}","d83cbec4":"# nan count per column\ndf_train.isnull().sum()","9f8821af":"# Show NaN column\nnan_df = df_train[df_train.isnull()[\"labels\"] == True]\nnan_df.head()","ecb6d36b":"# get unique labels\nlength = 5\nlabels = []\nfor label in df_train[\"labels\"]:\n    # skip nan\n    if type(label) == str:\n        split_label = label.split()[::length]\n        labels += split_label","a0092cb3":"print(\"Number of unique_label: {}\".format(len(set(labels))))\nprint(\"Number of unique_label(unicode_translation.csv): {}\".format(unicode_trans.shape[0]))\nprint(\"diff: {}\".format(abs(len(set(labels)) - unicode_trans.shape[0])))","db4a9b42":"unicode_trans_only_labels = set(unicode_trans[\"Unicode\"]) - set(labels)\nprint(\"Number of unicode_trans_only_label: {}\".format(len(unicode_trans_only_labels)))","f477fab8":"unicode_trans_only_df = pd.DataFrame({\"Unicode\": list(unicode_trans_only_labels)})\nunicode_trans_only_df[\"string\"] = unicode_trans_only_df[\"Unicode\"].map(unicode_map)\nunicode_trans_only_df.head()","3597f91b":"df_labels = pd.DataFrame({\"label\": labels})\n# df_labels[\"str\"] = df_labels[\"label\"].map(unicode_map)\nlabel_count  = df_labels[\"label\"].value_counts()","03240423":"# Reference\n# https:\/\/www.kaggle.com\/tejainece\/seaborn-barplot-and-pandas-value-counts\n# label_count  = df_labels[\"label\"].value_counts()\n# plt.figure(figsize=(16,10))\n# sns.barplot(label_count.index, label_count.values, alpha=0.8)\n# plt.title('all unicode counts')\n# plt.ylabel('Number of count', fontsize=12)\n# plt.xlabel('unicode', fontsize=12)\n# plt.show()","3bd036ba":"# Reference\n# https:\/\/www.kaggle.com\/tejainece\/seaborn-barplot-and-pandas-value-counts\nplt.figure(figsize=(10,5))\nsns.barplot(label_count[:10,].index, label_count[:10,].values, alpha=0.8)\nplt.title('top 10 unicode counts')\nplt.ylabel('Number of count', fontsize=12)\nplt.xlabel('unicode', fontsize=12)\nplt.show()","b468c8a7":"# convert unicode to str\nd = {\"unicode\": label_count[:10].index.values,\n     \"str\": [unicode_map[l] for l in label_count[:10].index.values]}\npd.DataFrame(d)","3db2bdad":"plt.figure(figsize=(10,5))\nsns.barplot(label_count[-11:-1,].index, label_count[-11:-1,].values, alpha=0.8)\nplt.title('bottom 10 unicode counts')\nplt.ylabel('Number of count', fontsize=12)\nplt.xlabel('unicode', fontsize=12)\nplt.show()","cab266b7":"# convert unicode to str\nd = {\"unicode\": label_count[-11:-1,].index.values,\n     \"str\": [unicode_map[l] for l in label_count[-11:-1,].index.values]}\npd.DataFrame(d)","1df16063":"# Reference\n# https:\/\/ja.wikipedia.org\/wiki\/%E5%B9%B3%E4%BB%AE%E5%90%8D_(Unicode%E3%81%AE%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF)\n# > U+3040..U+309F\nhirakana = re.compile(r\"U\\+30[4-9][0-9a-fA-F]\")","624d4cac":"sum(label_count)","c1786d77":"# The appearance rate of Hirakana accounts for about 60% of the whole.\nhirakana_counts = df_labels[\"label\"].str.match(hirakana).value_counts()\nhirakana_counts \/ sum(hirakana_counts) * 100","ba6448ee":"df_labels[\"is_hirakana\"] = df_labels[\"label\"].str.match(hirakana)\nlabel_count = df_labels[df_labels[\"is_hirakana\"] == True][\"label\"].value_counts()\nplt.figure(figsize=(10,5))\nsns.barplot(label_count[-11:-1,].index, label_count[-11:-1,].values, alpha=0.8)\nplt.title('hirakana bottom 10 unicode counts')\nplt.ylabel('Number of count', fontsize=12)\nplt.xlabel('unicode', fontsize=12)\nplt.show()","ca5729f6":"# convert unicode to str\nd = {\"unicode\": label_count[-11:-1,].index.values,\n     \"str\": [unicode_map[l] for l in label_count[-11:-1,].index.values]}\npd.DataFrame(d)","ff0af79a":"label_count = df_labels[df_labels[\"is_hirakana\"] == False][\"label\"].value_counts()","63d1d967":"plt.figure(figsize=(10,5))\nsns.barplot(label_count[:10,].index, label_count[:10,].values, alpha=0.8)\nplt.title('top 10 unicode counts')\nplt.ylabel('Number of count', fontsize=12)\nplt.xlabel('unicode', fontsize=12)\nplt.show()","c0ef6313":"# convert unicode to str\nd = {\"unicode\": label_count[:10,].index.values,\n     \"str\": [unicode_map[l] for l in label_count[:10,].index.values]}\npd.DataFrame(d)","ed016dba":"plt.figure(figsize=(10,5))\nsns.barplot(label_count[-11:-1,].index, label_count[-11:-1,].values, alpha=0.8)\nplt.title('hirakana bottom 10 unicode counts')\nplt.ylabel('Number of count', fontsize=12)\nplt.xlabel('unicode', fontsize=12)\nplt.show()","66345b43":"# convert unicode to str\nd = {\"unicode\": label_count[-11:-1,].index.values,\n     \"str\": [unicode_map[l] for l in label_count[-11:-1,].index.values]}\npd.DataFrame(d)","647c13f7":"# Label Apperance Bar Plot\n\u30e9\u30d9\u30eb\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u307e\u3057\u305f\u3002\u5168\u3066\u306e\u30e9\u30d9\u30eb\u306e\u51fa\u73fe\u983b\u5ea6\u3092\u63cf\u753b\u3059\u308b\u3068\u3068\u3066\u3082\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u3001Top10\u3068Bottom10\u306e\u307f\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u56f3\u4e2d\u306e\u8868\u793a\u306b\u65e5\u672c\u8a9e\u306e\u6587\u5b57\u8868\u793a\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u56f3\u306e\u4e0b\u306bUnicode\u3068\u6587\u5b57\u306e\u5bfe\u5fdc\u3092\u8f09\u305b\u3066\u3044\u307e\u3059\u3002","4aff9982":"\u9006\u306bhirakana\u4ee5\u5916\u306e\u51fa\u73fe\u983b\u5ea6\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u6c17\u306b\u306a\u308a\u307e\u3059\u3002","4db617e8":"hirakana\u306e\u51fa\u73fe\u983b\u5ea6\u304c\u9ad8\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3001\u3067\u306f\u5168\u4f53\u306e\u4f55\u5272\u7a0b\u5ea6\u304chirakana\u306a\u306e\u304b\u8abf\u3079\u3066\u307f\u307e\u3059\u3002","e022e359":"hirakana\u306e\u4e2d\u3067\u3082\u3069\u306ehirakana\u306e\u51fa\u73fe\u983b\u5ea6\u304c\u9ad8\u3044\u306e\u304b\u6c17\u306b\u306a\u308a\u307e\u3059\u3001top10\u306b\u95a2\u3057\u3066\u306f\u3055\u304d\u307b\u3069\u3068\u540c\u3058\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002","6bbd5721":"# Train.csv include in Nan Labels\n\n\u3053\u3061\u3089\u306ediscussion\u3067\u3082\u6307\u6458\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u3001**train.csv**\u306bnan\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\n\n- https:\/\/www.kaggle.com\/c\/kuzushiji-recognition\/discussion\/100748#latest-580727","c20634a0":"**unicode_translation.csv**\u306b\u306f\u5b58\u5728\u3059\u308b\u304c**train.csv**\u306b\u5b58\u5728\u3057\u306a\u3044\u30e9\u30d9\u30eb\u304c**569**\u500b\u3042\u308b","0751669b":"Sorry I can't speak and write well.\n\nFirst write in Japanese, then translate into English and append.","92cd66a7":"\u5dee\u96c6\u5408\u3092\u4f7f\u3063\u3066**unicode_translation.csv**\u306b\u306e\u307f\u5b58\u5728\u3059\u308b\u30e9\u30d9\u30eb\u3092\u53d6\u308a\u51fa\u3057\u305f\u304c569\u500b\u3068\u6570\u304c\u5408\u308f\u306a\u3044\uff1f","3ba4ee19":"# Load Data","2101e698":"# Check Unique Label\n**train.csv**\u5185\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30e9\u30d9\u30eb\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u53d6\u308a\u51fa\u3059\u969b\u306e\u51e6\u7406\u306f\u4ee5\u4e0b\u306e\u30ab\u30fc\u30cd\u30eb\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n- https:\/\/www.kaggle.com\/wakamezake\/kuzushiji-pytorch-data-preprocessing"}}