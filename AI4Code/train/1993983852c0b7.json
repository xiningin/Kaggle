{"cell_type":{"710c606b":"code","82d4f6c1":"code","c6650875":"code","df112d87":"code","b554c1c0":"code","36aaea25":"code","38a871e7":"code","a47547a5":"code","42a13bce":"code","ea6595c0":"code","98c2cbfb":"code","6db9d02c":"code","32a7780f":"code","5cd01d3f":"code","76e4f2b8":"code","cc5958c1":"code","630ad144":"code","381742ab":"code","d8e160d2":"code","6e8ee86f":"code","f266001a":"markdown","b3016545":"markdown","16903696":"markdown","fb94a0df":"markdown","60439482":"markdown"},"source":{"710c606b":"## Get Rapids added in the context\nimport sys\n!cp ..\/input\/rapids\/rapids.0.18.0 \/opt\/conda\/envs\/rapids.tar.gz\n!cd \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz > \/dev\/null\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + sys.path\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + sys.path \n!cp \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/\n","82d4f6c1":"import os\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib.image as mpimg\nfrom IPython.display import display_html\nfrom PIL import Image\nimport gc\nfrom scipy.stats import pearsonr\nimport tqdm\nimport copy\nimport re\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n# Color Palette\ncustom_colors = ['#7400ff', '#a788e4', '#d216d2', '#ffb500', '#36c9dd']\nsns.palplot(sns.color_palette(custom_colors))\n\n# Set Style\nsns.set_style(\"whitegrid\")\nsns.despine(left=True, bottom=True)\n\n# Set tick size\nplt.rc('xtick',labelsize=12)\nplt.rc('ytick',labelsize=12)","c6650875":"import cudf\nimport cupy # CuPy is an open-source array library accelerated with NVIDIA CUDA.\n\n\nfrom dask.distributed import Client, wait\nfrom dask_cuda import LocalCUDACluster\n\ncluster = LocalCUDACluster()\nclient = Client(cluster)\nclient","df112d87":"!nvidia-smi","b554c1c0":"import gc\ngc.collect()","36aaea25":"%%time\n\n# Read in data\ndtypes = {\n    \"row_id\": \"int64\",\n    \"timestamp\": \"int64\",\n    \"user_id\": \"int32\",\n    \"content_id\": \"int16\",\n    \"content_type_id\": \"boolean\",\n    \"task_container_id\": \"int16\",\n    \"user_answer\": \"int8\",\n    \"answered_correctly\": \"int8\",\n    \"prior_question_elapsed_time\": \"float32\", \n    \"prior_question_had_explanation\": \"int8\"\n}\n\ntrain = cudf.read_csv('..\/input\/riiid-test-answer-prediction\/train.csv', dtype=dtypes)\n","38a871e7":"from numba import cuda\n\n@cuda.jit\ndef multiply(in_col, out_col, multiplier):\n    i = cuda.grid(1)\n    if i < in_col.size: # boundary guard\n        out_col[i] = in_col[i] * multiplier","a47547a5":"size = len(train['content_type_id'])\ntrain['content_type_boolean'] = 0.0\nmultiply.forall(size)(train['content_type_id'], train['content_type_boolean'], 1.0)","42a13bce":"train=train.set_index(['user_id','timestamp'])\n","ea6595c0":"train.tail(2)","98c2cbfb":"import gc\ngc.collect()","6db9d02c":"train=train.reset_index()","32a7780f":"train_user_list=train['user_id'].unique().to_arrow().to_pylist()","5cd01d3f":"train_test=train[train['user_id'].isin(train_user_list[1:100])]","76e4f2b8":"from numba import cuda\n\n# Define a function to apply to each group\ndef cumsum_cals(timestamp,answered_correctly, cumsum_value):\n\n    for i in range(cuda.threadIdx.x,len(timestamp) , cuda.blockDim.x):\n        cumsum_value[i] = 0\n        for j in range(i+1):\n\n            cumsum_value[i] += answered_correctly[j]\n\n\n\ntrain_test = train_test.groupby(\"user_id\").apply_grouped(cumsum_cals,\n                          incols=[\"timestamp\",'answered_correctly'],\n                          outcols={\n                                    'cumsum_value': np.int64,\n                                   },\n                          tpb=8)\n","cc5958c1":"train_test[train_test['user_id']==5382]","630ad144":"questions=cudf.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')\nquestions.head(1)\n","381742ab":"train_test=train_test.merge(questions, how='left', left_on=['content_id'],\n           right_on=['question_id'])","d8e160d2":"train_test.head(4)","6e8ee86f":"del questions\ngc.collect()","f266001a":"1.Convert to boolean","b3016545":"##### Perform User Defined Functions\n","16903696":"2. Merge Data Sets","fb94a0df":"#### Cumsum Operations on a group by(hacky way)\nEg: for the above dataset lets filter by a user and create a cumsum of the correct answers","60439482":"![image.png](attachment:image.png)\n\n**Here I have tried to come up with different ways to create User Defined Functions in Rapids. Please comment and let me know if you wanna add more functions. <\/br>\nThe dataset used is from the recent competition RIID**"}}