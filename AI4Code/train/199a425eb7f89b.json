{"cell_type":{"73e3a8cf":"code","550a0e17":"code","a51ce322":"code","2039ee53":"code","a392718e":"code","df596251":"code","b756aee8":"code","102fc3e9":"code","cfd99954":"code","8376b0b0":"code","ad745c79":"code","63747c78":"code","574b5c3a":"code","2617f803":"code","84feb7d2":"code","d019ae4f":"code","339f178c":"code","ed679da3":"markdown"},"source":{"73e3a8cf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","550a0e17":"from sklearn.datasets import load_wine\nimport matplotlib.pyplot as plt\n%matplotlib inline","a51ce322":"wine_data = load_wine()","2039ee53":"data = pd.DataFrame(wine_data[\"data\"], columns=wine_data[\"feature_names\"])\ndata[\"target\"] = wine_data[\"target\"]","a392718e":"data.head()","df596251":"from sklearn.tree import DecisionTreeClassifier","b756aee8":"tree = DecisionTreeClassifier(random_state=42)","102fc3e9":"x = data.drop(\"target\", axis=1)\ny = data[\"target\"]","cfd99954":"from sklearn.model_selection import cross_val_score","8376b0b0":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(random_state=42)\nx = data.drop(\"target\", axis=1)\ny = data[\"target\"]","ad745c79":"tree.fit(x,y)\ntree.score(x,y)","63747c78":"from sklearn.tree import DecisionTreeClassifier","574b5c3a":"from sklearn.model_selection import cross_val_score, GridSearchCV, KFold\n\nfrom sklearn.preprocessing import StandardScaler","2617f803":"scaler = StandardScaler()\nparameters = {\n'max_depth': np.arange(2, 9),\n'max_features': np.linspace(0.3, 1, 8),\n'min_samples_leaf': np.arange(5, 50, 5)\n}\n\nx_scaled = scaler.fit_transform(x)\ntree = DecisionTreeClassifier(random_state=42)\nkf = KFold(random_state=42, n_splits=5, shuffle=True)\ncv = GridSearchCV(tree, param_grid=parameters, cv=kf, iid=True)\ncv.fit(x_scaled,y)\nprint(cv.best_score_)\nprint(cv.best_params_)\n# clf = cross_val_score(tree, x_scaled, y, cv=5)\n# print(clf.mean())","84feb7d2":"from sklearn.neighbors import KNeighborsClassifier","d019ae4f":"score = []\nfor i in range(1,50):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    kf = KFold(random_state=42, n_splits=5, shuffle=True)\n    cv = cross_val_score(knn, x_scaled, y, cv=kf)\n    score.append(cv.mean())","339f178c":"plt.plot(score);\nprint(max(score))\nprint(score.index(max(score))+1)","ed679da3":"tree.fit(x,y)\ntree.score(x,y)"}}