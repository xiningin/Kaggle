{"cell_type":{"e5cb2966":"code","0e55e353":"code","d21c0f14":"code","9321a0be":"code","6bdfe5a5":"code","10522396":"code","51eee9e4":"code","54dbe2df":"code","627d6f7b":"code","027455af":"code","31ccd427":"code","16f6fd26":"code","92e0e448":"code","9b81e959":"code","96d26b49":"code","bc005c32":"code","14a59a8b":"code","4c953661":"code","bbafd591":"code","f954eaa8":"code","f49b8e61":"code","0ea6233c":"code","69e206f3":"code","7bd23b85":"code","791a113c":"code","ede2be20":"code","aad34041":"code","e0c5f6f7":"code","14284a24":"code","67bf9965":"code","22ba826e":"code","d52b12eb":"code","3aed3c64":"code","2aeecbbf":"code","087c3b64":"code","bcc075ac":"code","6284a730":"code","20ada474":"code","e3145f5d":"code","97b51e67":"code","d1fc2baa":"code","2fae09ca":"code","d57410a7":"code","c266d740":"code","6c9792f7":"markdown","80449988":"markdown","24107335":"markdown","6d1fc8f4":"markdown","e790291c":"markdown","2c7c5ae0":"markdown","462024f4":"markdown","954bb2a1":"markdown","a2a710dd":"markdown","ffb1ef50":"markdown","648e9c16":"markdown","619216ee":"markdown","c91cae7e":"markdown","bfe9ce3c":"markdown","f9ab63af":"markdown","0a9b6e28":"markdown","bf37a384":"markdown","3af1856b":"markdown","3659aa35":"markdown","ca66b8b5":"markdown","d8d2c5f8":"markdown","d9499701":"markdown","0e06dbbe":"markdown","578ebe84":"markdown","b5abc731":"markdown","ed592d1b":"markdown","3375ea92":"markdown","c20efeee":"markdown","f6a1f011":"markdown","0bf107c4":"markdown","4ca20904":"markdown","1947f09f":"markdown"},"source":{"e5cb2966":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0e55e353":"name=\"Coimer\"\nsurname=\"Reis\"\nprint(\"my name is {} {}\".format(name,surname))\n#Also you can simply change the order with using their indexes.\n#default is like that:\n# print(\"my name is {0} {1}\".format(name,surname))\nprint(\"my name is {1} {0}\".format(name,surname))\n#Additionally, you can change the indexes\nprint(\"my name is {s} {n}\".format(n=name,s= surname))","d21c0f14":"#Lets look another example;\noperation=100\/7\nprint(operation)\n#We are gonna write operation in a string with format() method\nprint(\"the result is {op:7.3}\".format(op=operation))\n#\"   14.3\"= 3space+14+.+3 =totally 7 gap for our number\n#I mean there are seven space for our number\n#op:7.3 then what the is 3 in there? It mean show me 3 digit only\n#So Python rounds the number after the comma. Lets do another example\nwow=100\/3\nprint(wow)\nprint(\"the result is {w:4.3}\".format(w=wow)) #33.3\nwow=100\/3\nprint(wow)\nprint(\"the result is {w:4.7}\".format(w=wow)) #33.33333 \nwow=100\/460\nprint(wow)\nprint(\"the result is {w:10.3}\".format(w=wow))","9321a0be":"#More basic method is f string feature\nprint(f\"My name is {name} {surname}\")\n#You add only \"f\" in front of your string.","6bdfe5a5":"#You can change uppercase to lowercase or can do the opposite\ntext=\" How are you doing? \"\nprint(text.lower()) # how are you doing?\nprint(text.upper()) # HOW ARE YOU DOING?\n#First char of all the words are capitalized\nprint(text.title()) # How Are You Doing?\n#Leading and trailing characters removed\n#If you wanna remove blanks only left side= lstrip()\n#                           only right side= rstrip()\nprint(text.strip())\n#We can remove a word or something like that with strip\nprint(text.lstrip(\" Ho\"))\nprint(text.rstrip(\"g? \"))\nprint(text.strip(\" H.ing? \"))\n\n\n#List of strings after breaking the given string by the specified separator\n#Seperator can be letter or simply \".\"\nprint(text.split())\ntext2=\"Welcome. Are you completely new to programming. If not then we presume you will be looking for information about why and how to get started with Python. Fortunately an experienced programmer in any programming language (whatever it may be) can pick up Python very quickly. It's also easy for beginners to use and learn, so jump in!\"\narray=text2.split(\".\")\nprint(array[1])\n#Or you can split every word\nword=text.split(\" \")\nprint(word[3]) #you\n","10522396":"#If you re looking for a word in text ,you can easyly find its starting index\nhey=\"What the fuck are you doing?\"\nhey.find(\"fuck\") #9\n#If you wanna start counting from the right\n#print(hey.rfind(\"fuck\")) \nhey.startswith(\"Wha\") #True\nhey.endswith(\"k\") #False\nhey.replace(\"fuck\",\"f**k\") #'What the f**k are you doing?'\n\ncha=\"\u0130nsan\u0131n \u00e7al\u0131\u015ft\u0131k\u00e7a \u00e7al\u0131\u015fas\u0131 geliyor.\"\ncha=cha.replace(\"\u00e7\",\"c\")\ncha=cha.replace(\"\u015f\",\"s\")\ncha=cha.replace(\"\u0131\",\"i\")\ncha\n#or..\ncha=cha.replace(\"\u00e7\",\"c\").replace(\"\u015f\",\"s\").replace(\"\u0131\",\"i\").replace(\"\u00f6\",\"o\")\ncha\n\n","51eee9e4":"text=text.strip()\nprint(text.replace(\" \",\"\"))\nprint(text.replace(\" \",\"\",2))\nprint(text.replace(\" \",\"\",1))\n","54dbe2df":"net=\"https:\/\/www.w3schools.com\/python\/\"\nprint(net.isalpha()) #there are digits in it\nprint(\"hi\".isalpha()) #true\nprint(\"342\".isdigit()) #true","627d6f7b":"apple=\"Your time is limited, so don't waste it living someone else's life.\"\nprint(apple.count(\"i\"))\n#You can search in a specific area btwn 0 ,15\nprint(apple.count(\"i\",0,15))\n#We find 3 \"i\" until 15.index","027455af":"#Takes my string into a container and centers it\n#For example i assume my container has 50 spaces\ntxt=\"Python for everyone\"\nprint(txt.center(50))\n\n#We can  fill in the blanks with chars\nprint(txt.center(50,\"-\"))\n#Justify expression on right or left side\nprint(txt.ljust(50,\"-\"))\nprint(txt.rjust(50,\"-\"))","31ccd427":"myList=[1,2,3]\nprint(myList)\n#List containers that can store many kind of values.\nsecondList=[1,\"there\",False,0.99]\nprint(secondList)\n#We can easily combine lists with \"+\"\nlist1=[\"one\",\"two\",\"three\"]\nlist2=[4,5,6]\nx=list1+list2\nprint(x)\nlen(x)\nprint(x[2])\n#You can add lists without disturbing the list structure\nuser1=[\"john\",34]\nuser2=[\"isabel\",23]\nusers=[user1,user2]\nprint(users)\nprint(users[0][1])","16f6fd26":"myLst=[\"bmw\",\"mercedes\",\"opel\",\"volvo\",\"mazda\"]\nlen(myLst)#5\nprint(myLst[0])#bmw\nprint(myLst[-1]) #mazda\n#### lists can be changed ####\nmyLst[-1]=myLst[0]\nmyLst[0]=\"mazda\"\nmyLst #['mazda', 'mercedes', 'opel', 'volvo', 'bmw']\n\nresult=\"opel\" in myLst\nprint(result)\n\nmyLst[-2:]=[\"toyota\",\"renault\"]\nmyLst\n\nresult=myLst+[\"audi\",\"nissan\"]\nresult #['mazda', 'mercedes', 'opel', 'toyota', 'renault', 'audi', 'nissan']\n\ndel myLst[-1]\nmyLst\n\nprint(myLst[::-1])\n","92e0e448":"numbers=[1,10,234,2,342,2,2,2,56,2]\nletters=[\"a\",\"h\",\"d\",\"k\"];\n\n## min() max()\nprint(min(numbers)) #1\nprint(min(letters)) #a\nprint(max(letters)) #k\n#Lists are changeable\nnumbers[3]=5\nprint(numbers) #[1, 10, 234, 5, 342, 2, 2, 2, 56, 2]\n\n## append()\n#We can add new members with append() method\nnumbers.append(49)\nprint(numbers) #[1, 10, 234, 5, 342, 2, 2, 2, 56, 2, 49]\n\n## insert()\n#Or you can choice where do you wanna add new member with insert method\n#It says add 9999 where? before the 3.index\nnumbers.insert(3,9999)\nprint(numbers)#[1, 10, 234, 9999, 5, 342, 2, 2, 2, 56, 2, 49]\nnumbers.insert(-1,100000)\nprint(numbers) #[1, 10, 234, 9999, 5, 342, 2, 2, 2, 56, 2, 100000, 49]\n\n##pop()\nnumbers.pop()\nprint(numbers) #[1, 10, 234, 9999, 5, 342, 2, 2, 2, 56, 2, 100000]\n#You can decide which memeber of list will be popped\nnumbers.pop(0) #[10, 234, 9999, 5, 342, 2, 2, 2, 56, 2, 100000]\nprint(numbers)\nnumbers.pop(3) #[10, 234, 9999, 342, 2, 2, 2, 56, 2, 100000]\nprint(numbers)\nnumbers.pop(-1) #numbers.pop() same\nprint(numbers)\n\n##remove()\nnumbers.remove(9999)\nprint(numbers) #[10, 234, 342, 2, 2, 2, 56, 2]\n\n##sort()\nnumbers.sort()\nprint(numbers) #[2, 2, 2, 2, 10, 56, 234, 342]\nletters.sort() #alphabetic\nprint(letters) #['a', 'd', 'h', 'k']\n\n##reverse()\nnumbers.reverse()\nprint(numbers) #[342, 234, 56, 10, 2, 2, 2, 2]\n\n##count()\nprint(numbers.count(2)) #4\n\n##clear()\nnumbers.clear()\nprint(numbers) #[]\n","9b81e959":"mytuple=1,\"two\",3\nprint(type(mytuple))\n\natuple=(1,2,\"dsgf\")\nprint(type(atuple))\n\nmylist=[1,2,3]\nprint(type(mylist))\n\nprint(len(mytuple)) #3\nprint(tuple[1]) #two\n\n# !!!!tuple object doesnt support item assignment\n#  mytuple[1]=\"hi\"\n#  print(mytuple)\n\n#You can change the whole tuple but you cant change one of the member of tuple\nmytuple=(3,45,67,88)\nprint(mytuple)\n\n#addition\nwow=(\"ella\",\"daniel\",\"edd\")+mytuple\nprint(wow) #('ella', 'daniel', 'edd', 3, 45, 67, 88)\n","96d26b49":"#It works key-value logic\ncity=[\"london\",\"DC\",\"mumbai\"]\ncode=[44,1,91]\nprint(code[city.index(\"DC\")]) #1\n\n#Lets learn how can we define dictionaries\n#dict={\"key\":\"value\",..}\ncode={\"london\":44,\"DC\":1,\"mumbai\":91}\nprint(code[\"mumbai\"]) #91\n\n#We can simply add new key&values\ncode[\"madrid\"]=34\nprint(code) #{'london': 44, 'DC': 1, 'mumbai': 91, 'madrid': 34}\n\n#We can change the values\ncode[\"DC\"]=\"+1\"\nprint(code)\n\n#an Example\nusers={\n    \"stephan\":{\n        \"age\":23,\n        \"email\":\"stephan56@gmail.com\",\n        \"city\":\"London\",\n        \"phone\":439712353,\n        \"roles\":[\"user\"]\n    },\n    \"aissa\":{\n        \"age\":43,\n        \"email\":\"aissa_324@gmail.com\",\n        \"city\":\"Delhi\",\n        \"phone\":329473975,\n        \"roles\":[\"admin\",\"user\"]\n    }\n    \n}\n\nprint(users[\"stephan\"])\n#{'age': 23, 'email': 'stephan56@gmail.com', 'city': 'London', 'phone': 439712353}\nprint(users[\"stephan\"][\"city\"]) #London\n\nprint(users[\"aissa\"][\"roles\"][0]) #admin\n\n","bc005c32":"fruits={\"orange\",\"banana\",\"cherry\"}\n#print(fruits[0]) can not be indexed\n\nfor a in fruits:\n    print(a)\n\nfruits.add(\"apple\")\nfruits #{'apple', 'banana', 'cherry', 'orange'}\n\nfruits.update([\"mango\",\"grape\"])\nfruits #{'apple', 'banana', 'cherry', 'grape', 'mango', 'orange'}\n\n#If you trying to add same value inside of set,it wont allow that\nfruits.update([\"apple\"])\nfruits #{'apple', 'banana', 'cherry', 'grape', 'mango', 'orange'}\n#Same set\n\nmylst=[1,2,3,4,3,3,1]\nprint(set(mylst)) #{1, 2, 3, 4}\n#repetitive elements are removed from the list\n\nfruits.remove(\"banana\") #or discard()\nfruits #{'apple', 'cherry', 'grape', 'mango', 'orange'}","14a59a8b":"'''\nx=4\ny=\"sdf\"\nz=324.3\n'''\nx,y,z=4,\"sdf\",324.3\nprint(x,y,z)   # 4 sdf 324.3\n\nx,y=y,x\nprint(x,y,z)   # sdf 4 324.3\n\ny+=5 #y=y+5 #9\ny**=2 #y=y**2 #9*9\ny #81\n\nvalues=4,3,2\nprint(type(values))\nx,y,z=values\nprint(x,y,z)\n#But their lenght will be match each other\n''' #TRY IT\nvalues=4,3,2,7\nprint(type(values))\nx,y,z=values\nprint(x,y,z) #ERROR\n'''\n#TRY IT\nvalues=4,3,2,7,45,34,12\nprint(type(values))\nx,y,*z=values\nprint(x,y,z) #z will have a list z=[2, 7, 45, 34, 12]\nprint(z[2]) #45\n\nq,*w,e=2,34,23,56,78,89,1\nprint(w) #q=2 w=[34, 23, 56, 78, 89] e=1\n\n","4c953661":"a,s,d,f=1,1,2,3\nprint(a==s)  #True\nprint(a==d)  #False\nprint(a!=s)  #False\nprint(a>=d)  #False\nprint(a<d)  #True\nprint(True+False+56) #57","bbafd591":"# WHICH ONE IS GREATER?\na=int(input(\"First one: \"))\nb=int(input(\"Second one: \"))\n\nif(a==b):\n    print(f\"{a} equal to {b}\")\nelif(a<b):\n    print(f\"{b} is greater than {a}\")\nelse:\n    print(f\"{a} is greater than {b}\")","f954eaa8":"x=7\nresult=5<x<10\nprint(result) #true\n\n#and\nresult=x>5 and x<10\nprint(result) #true\n\n#or\nuser1=\"elsa\"\nadmin=\"tresa\"\na,b=45,56\n\nprint((admin==\"tresa\") or (user1==\"asd\")) #True\nprint(a<34 or b>12)#True\nprint((a%2==0) or b<10) #False\n\n#not\nprint(not(a==23)) #True a is not equal 23 so result is false\n#but if you write infront of the station \"not\" it will reverse \n\n","f49b8e61":"#### Identity Operator : is\nx=y=[1,2,3]\nz=[4,5,6]\nw=[1,2,3]\n\nprint(x==y) #True\nprint(x is y) #True\nprint(\"*\"*10)\n\nprint(x==z) #False\nprint(x is z) #False\nprint(\"*\"*10)\n\nprint(x==w) #True\nprint(x is w) #False ?WHY? It looks ,are they sharing the same memory location\n","0ea6233c":"####  Membership Operator : in\nx=[\"fears\",\"big\",\"and\",\"small\",\"are\",\"universial\",\"fact\"]\nprint(\"are\" in x) #True\n\nprint(\"small\" not in x) #False","69e206f3":"a = 200\nb = 33\nif b > a:\n    print(\"b is greater than a\")\nelif a == b:\n    print(\"a and b are equal\")\nelse:\n    print(\"a is greater than b\")","7bd23b85":"# We ll add","791a113c":"def sayHi(name):\n    print(\"Hi \" +name)\n    \nsayHi(\"Stephan\")","ede2be20":"def sayHi(name):\n    return (\"Hi \" +name)\n    \nmsg=sayHi(\"ellise\")\nprint(msg)","aad34041":"def add(num1,num2):\n    return num1+num2\ntotal=add(2,3)\nprint(total)","e0c5f6f7":"year=2020\ndef HowOld(birth):\n    return year-birth\n\n#print(HowOld(1986))\n\n#Retirement Calculator\n\ndef RetCalc(birth,name):\n    '''\n    DOCSTRING: Number of years required for retirement.\n    INPUT: Birth year,name\n    OUTPUT: year\n    '''\n    age=HowOld(birth)\n    ret=65-age\n    return ret\n\nRetCalc(1987,\"Allice\")\nprint(help(RetCalc))","14284a24":"#PASS BY VALUE\ndef ChangeName(n):\n    n=\"Ada\"\nname=\"Lovelace\"\n\nChangeName(name)\nprint(name)\n\n#PASS BY REFERENCE\n#updating info at address\ndef ChangeCity(n):\n    n[0]=\"Istanbul\"\n    n[1]=\"Buhara\"\ncities=[\"London\",\"Birmingham\"]\n\nChangeCity(cities)\ncities\n\n","67bf9965":"def add(a,s,d=0):\n    return sum((a,s,d))\n#You can add 3 component or 2\nadd(1,2)\n\n#we have a better solution about this. We add *params in function\n#(you can change the name params, like *numbers) try it\n#and you can add lots of number as you want\ndef add2(*params):\n    return sum((params))\n\nprint(add2(1,2,3,3,5))\nprint(add2(2,3))\n\n'''\nor\n************************\ndef add2(*numbers):\n    sum=0\n    for n in params:\n        sum=sum+n\n    return sum\n************************  \n'''\n","22ba826e":"#We can use it in dictionary\n\ndef displayUser(**p):\n    for key,value in p.items():\n        print(f\"{key} is {value}\")\n    \ndisplayUser(name=\"qasa\")\ndisplayUser(name=\"wasa\",age=34)\ndisplayUser(name=\"hehoy\",age=45,mail=\"hehoy98@gmail.com\")","d52b12eb":"def myFunc(a,b,*args,**kwargs):\n    print(a)\n    print(b)\n    print(args)\n    print(kwargs)\n    \nmyFunc(10,20,30,40,50,60,70,key1=\"value1\",key2=\"value2\")","3aed3c64":"class Animal(object):\n    name=\"dog\"\n    age=2\n    #if you write def in class it is a method\n\n    def getAge(self):\n        return self.age\n    \na1=Animal()\na1_age=a1.getAge()\nprint(a1_age) #2","2aeecbbf":"class Animal(object):\n    \n    #if you write def in class it is a method\n    #select ve f9 \n    def __init__(self,name,age):\n        self.name=name\n        self.age=age\n        \n    def getAge(self):\n        return self.age\n    def getName(self):\n        print (self.name)\n    \na1=Animal(\"dog\",5)\na1_age=a1.getAge()\nprint(a1_age) #5\na2=Animal(\"cat\",3)\na2.getName() #cat","087c3b64":"class Calc(object):\n    \"calculator\"\n    \n    \n    #init method\n    def __init__(self,a,b):\n        \"initialize values\"\n        self.value1=a\n        self.value2=b\n        #attribute\n        \n    def add(self):\n        \"addition a+b=result\"\n        return self.value1+self.value2\n\n    def islem(self):\n        \"multiplication a*b=result->return result\"\n        return self.value1*self.value2\n    def div(self):\n        return self.value1\/self.value2\n\n\nv1=int(input(\"first value\"))\nv2=int(input(\"second value\"))\nc1=Calc(v1,v2)\nprint(c1.add())\nprint(c1.islem()) \nprint(c1.div())","bcc075ac":"#herhangi bir nesnenin motodlar\u0131n\u0131 verilerini ve de\u011fi\u015fkenlerini di\u011fer nes\n#di\u011fer nesnelerden saklayarak ve bunlara eri\u015fimi s\u0131n\u0131rland\u0131rarak yaln\u0131\u015f kullan\u0131mdan koruma konsepti\n\nclass BankAccount(object):\n    def __init__(self,name,money,address):\n        self.name=name #global\n        self.money=money\n        self.address=address\n        \np1=BankAccount(\"messi\",10000,\"barcelona\")\np2=BankAccount(\"neymar\",5000,\"paris\")\n\np1.money+=p2.money\n#We can axess the bank accounts\n#so we can also change the amount of money\n#it is wrong logic so encapsulation is coming here\n","6284a730":"class BankAccount(object):\n    def __init__(self,name,money,address):\n        self.name=name #global\n        self.__money=money #private\n        self.address=address\n        \n    def getMoney(self):\n        return self.__money\n    def setMoney(self,amount):\n        self.__money=amount\n        \n    def __increase(self):\n        self.__money=self.__money+500\n        \np1=BankAccount(\"messi\",10000,\"barcelona\")\np2=BankAccount(\"neymar\",5000,\"paris\")\n\n#    p1.__money\n#We couldnt axess the money variable\n#AttributeError: 'BankAccount' object has no attribute '__money'\n\n#soooo; we cant observe or change this private value,\n\n\nprint(\"get method: \",p1.getMoney()) #10000\n\np1.__increase()\nprint(\"after raise: \",p1.getMoney())\n\n#!!!AttributeError: 'BankAccount' object has no attribute '__increase'\n#you cannot reach this method becux of encapsulation\n#you can use __increaseonly in the class","20ada474":"#yine bir class yazarken baz\u0131 seyleri onceki b\u015fr klass tan inheritance ediyoruz\n##boylece herseyi bastan yazmak zorunda kalmay\u0131z\n\n\n#parent\nclass Animal:\n    def __init__(self):\n        print(\"animal is created\")\n    def toString(self):\n        print(\"animal\")\n    def walk(self):\n        print(\"animal wallk\")\n\nclass Monkey(Animal):\n    def __init__(self):\n        super().__init__()\n        #use init of parent class\n        print(\"monkey is created\")\n    def toString(self):\n        print(\"monkey\")\n    def climb(self):\n        print(\"monkey can climb\")\n        \nm1=Monkey()\n#animal is created\n#monkey is created\n\nm1.toString() #monkey\nm1.walk() #animal wallk","e3145f5d":"class Website(object):\n    def __init__(self,name):\n        self.name=name\n    def loginInfo(self):\n        print(\"Name: \"+self.name)\nclass WebA(Website):\n    def __init__(self,name,ids):\n        Website.__init__(self,name)\n        #or u can initialize that method with using its name\n        #Website.__init__(self)\n        self.ids=ids\n        \n    def loginInfo(self):\n        print(\"Name: \"+self.name+\"  Id: \"+self.ids)\n        \nclass WebB(Website):\n    def __init__(self,name,email):\n        Website.__init__(self,name)\n        self.email=email\n    def loginInfo(self):\n        print(\"Name: \"+self.name+\"  Id: \"+self.email)\n        \n        \np1=Website(\"ali\")\np1.loginInfo()\np2=WebA(\"ece\",\"9757\")\np2.loginInfo()\n\np3=WebB(\"akri\",\"akri@lik.com\")\np3.loginInfo()","97b51e67":"#soyut class lar\n#super class:parent,sub class:child\n#super classlar, sub class lar i\u00e7in \u015fablon g\u00f6revi g\u00f6r\u00fcr ve kullan\u0131lacak metodlar\u0131 tutarlar\n\n#Burada super class lar instantiate edilemez\n# yani a=Animal() diyemezsin\n\nclass Animal: #super class\n    pass\nclass Bird(Animal):\n    pass\n\na=Animal #olmaz! Animal class \u0131ndan obje \u00fcretilemez","d1fc2baa":"from abc import ABC ,abstractmethod\nclass Animal(ABC): \n    @abstractmethod\n    def walk(self): pass\n\n    @abstractmethod\n    def run(self): pass\n\nclass Bird(Animal):\n    #child class da implement etmekzorundas\u0131n bu walk ve run \u0131\n    def __init__(self):\n        print(\"bird\")\n    def walk(self): \n        print(\"WALKK\")\n\n   \n    def run(self): \n        print(\"RUNN\")\n#a=Animal()\n#TypeError: Can't instantiate abstract class Animal with abstract methods run, walk\n\n\nb1=Bird()\n#TypeError: Can't instantiate abstract class Bird with abstract methods run, walk\n# If you dont write walk or run method\nb1.run()\n\n\n\n#1#Animalla ilgil obje yaratamam\n#2#Super clasta kulland\u0131g\u0131m metodlar\u0131 tekrar yazmak zorunday\u0131m","2fae09ca":"class Animal:\n    def call(self):\n        print(\"animal\")\n        \nclass Monkey(Animal):\n    def call(self):\n        print(\"monkey\")\n        \na1=Animal()\na1.call()\n\nm1=Monkey()\nm1.call()\n\n#animal\n#monkey monkey calls overriding method","d57410a7":"#\u00c7ok bi\u00e7imlilik\n#Super class tan sub class a inheritance yoluyla aktar\u0131lan\n#ama subclass ta farkl\u0131 bir \u015fekilde kullan\u0131lan metodlar varsa biz buna polymorphism diyoruz\nclass Employee:\n    def raisee(self):\n        raise_rate=0.1\n        return 100+100*raise_rate\n    \nclass CompEng(Employee):\n    def raisee(self):\n        raise_rate=0.2\n        return 100+100*raise_rate\nclass EEE(Employee):\n    def raisee(self):\n        raise_rate=0.3\n        return 100+100*raise_rate\ne1=Employee()\ne1.raisee()\nce=CompEng()\nce.raisee()\neee=EEE()\neee.raisee()","c266d740":"#abstract base class abc\nfrom abc import ABC ,abstractmethod\nclass Shapes(ABC): #Abstract class\n    \"\"\"\n    Shape=super class\/abstract class\n    \"\"\"\n    @abstractmethod\n    def area(self,a,b):\n        pass\n    @abstractmethod\n    def perimeter(self):\n        pass        \n    #overriding and polymorphism\n    def toString(self):\n        pass        \n    \nclass Circle(Shapes):\n    \"circle class\"\n    PI=3.14\n    #constant variable(buyuk harfle yazd\u0131k)\n    def __init__(self,r):\n        self.__r=r\n    \n    def area(self):\n        areas=self.PI*self.__r*self.__r\n        return areas\n    def perimeter(self):\n        per=2*self.PI*self.__r\n        return per\n    def toString(self):\n        return \"Circle\"\n        \nclass Square(Shapes):\n    \"sub class\"\n    def __init__(self,edge):\n        self.__edge=edge #encapsulation #private attribute\n    def area(self):\n        result=self.__edge**2\n        return result\n    def perimeter(self):\n        result=self.__edge*4\n        return result\n    def toString(self):\n        return \"Square\"\n\n\nc=Circle(4)\na=c.toString()\n\nprint(a,\" Area: \", c.area())\nprint(a,\" Perimeter \",c.perimeter())\n\n\nprint(\"*****************************\")\ns=Square(5)\nb=s.toString()\n\nprint(b,\" Area: \", s.area())\nprint(b,\" Perimeter \",s.perimeter())\n\n","6c9792f7":"## 5.LISTS","80449988":"#### Little Project About Polymorphism,Abstract Class, Overriding","24107335":"An \"if statement\" is written by using the if keyword.<br>\nThe elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".<br>\nThe else keyword catches anything which isn't caught by the preceding conditions.","6d1fc8f4":"## 15.LOOPS IN PYTHON","e790291c":"#### After Initializer","2c7c5ae0":"## 18.ENCAPSULATION","462024f4":"## 14.CONDITIONS IN PYTHON","954bb2a1":"## 7. TUPLES","a2a710dd":"**center()**","ffb1ef50":"## 19.INHERITANCE","648e9c16":"**Word Search**","619216ee":"## 21.OVERRIDING","c91cae7e":"## 12. LOGICAL OPERATORS\n","bfe9ce3c":"**Convert Case**","f9ab63af":"## 22.POLYMORPHISM","0a9b6e28":"Hey guys, I am coimer and i wanna introduce you to python basics. Python is an amazing language for me so i cant wait anymore. I hope it will be useful and comprehensible tutorial for you. Lets learn! and have fun:)\n\n1. Definition of Variables\n2. Type Conversions\n3. Strings\n4. String Methods\n5. Lists\n6. List Methods\n7. Tuples\n8. Dictionary\n9. Sets\n10. Assignment\n11. Comparisan Operators\n12. Logical Operators\n13. Other Operators\n14. Conditions in Python\n15. Loops in Python\n16. Functions in Python\n17. Initiliazer or Constructor\n18. Encapsulation\n19. Inheritance\n20. Abstract Classes\n21. Overriding\n22. Polymorphism\n","bf37a384":"## 17. INITIALIZER OR CONSTRUCTOR\n#### Before Initiliazer","3af1856b":"## 4.STRING METHODS\n**.format()**\n<br>We can add our data with .format() method. It is the easiest way.","3659aa35":"### **Pass by Value:**\n**Value Type:**<br>\nA data type is a value type if it holds a data value within its own memory space. It means variables of these data types directly contain their values.\n<br> * The following data types are all of value type:\n<br>*bool-byte-char-decimal-double-enum-float-int-long-sbyte-short-struct-uint-ulong-ushort*\n\n>When you pass a value type variable from one method to another method, **the system creates a separate copy of a variable in another method**, so that if value got changed in the one method **won't affect** on the variable in another method.\n\n### **Pass by Reference**\n**Reference Type**<br>\nUnlike value types, a reference type doesn't store its value directly. Instead, **it stores the address** where the value is being stored. In other words, a reference type contains a pointer to another memory location that holds the data.\n<br> * The following data types are of reference type:\n<br>String-All arrays, even if their elements are value types<br>\nClass-Delegates\n\n>When you pass a reference type variable from one method to another, it doesn't create a new copy; instead, it passes the address of the variable. If we now change the value of the variable in a method, it will also be reflected in the calling method.\n\n","ca66b8b5":" ## 6.LIST METHODS","d8d2c5f8":"## 20.ABSTRACT CLASSES","d9499701":"**isalpha()   isdigit()**","0e06dbbe":"#### Inheritance Project","578ebe84":"## 10. ASSIGNMENT","b5abc731":"## 8. DICTIONARY\n","ed592d1b":"## 17.1 CALCULATOR PROJECT","3375ea92":"## 13. OTHER OPERATORS\n#### a. Identity Operator\n#### b. Membership Operator\n","c20efeee":"## 11.COMPARISAN OPERATORS","f6a1f011":"## 16.FUNCTIONS IN PYHTON","0bf107c4":"**f String**","4ca20904":"## 9. SETS","1947f09f":"**count()**"}}