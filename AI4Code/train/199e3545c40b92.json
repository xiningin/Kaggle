{"cell_type":{"689f0db8":"code","a4125a1d":"code","3f516bde":"code","a67ba330":"code","e53cb104":"code","099b8bc5":"code","130c502b":"code","9ebaf1b8":"code","451c1910":"code","a97a244f":"code","e87d153b":"code","afa5b5c5":"code","7ba9c74e":"code","c20a1b2b":"code","18e4ac3a":"code","94010db1":"markdown","1f459f9c":"markdown","a841aedd":"markdown","0e072926":"markdown","930a535a":"markdown","c9c9bd21":"markdown","7673be43":"markdown"},"source":{"689f0db8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4125a1d":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import StrMethodFormatter\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import preprocessing","3f516bde":"df = pd.read_csv('\/kaggle\/input\/bankruptcy-data-cdac\/Bankruptcy.csv')","a67ba330":"df.head()","e53cb104":"df.describe()","099b8bc5":"ax = df.hist(column='D', bins=25, grid=False, figsize=(12,8), color='#86bf91', zorder=2, rwidth=0.9)\n\nax = ax[0]\nfor x in ax:\n\n    # Despine\n    x.spines['right'].set_visible(False)\n    x.spines['top'].set_visible(False)\n    x.spines['left'].set_visible(False)\n\n    # Switch off ticks\n    x.tick_params(axis=\"both\", which=\"both\", bottom=\"off\", top=\"off\", labelbottom=\"on\", left=\"off\", right=\"off\", labelleft=\"on\")\n\n    # Draw horizontal axis lines\n    vals = x.get_yticks()\n    for tick in vals:\n        x.axhline(y=tick, linestyle='dashed', alpha=0.4, color='#eeeeee', zorder=1)\n\n    # Remove title\n    x.set_title(\"\")\n\n    # Set x-axis label\n    x.set_xlabel(\"Bankruptcy\/Non-bankruptcy\", labelpad=20, weight='bold', size=12)\n\n    # Set y-axis label\n    x.set_ylabel(\"Total number\", labelpad=20, weight='bold', size=12)\n\n    # Format y-axis label\n    x.yaxis.set_major_formatter(StrMethodFormatter('{x:,g}'))\n","130c502b":"for i in range(1,10):\n    var = \"R\"+str(i)\n    ax = df.hist(column=var, bins=25, grid=False, figsize=(12,8), color='#86bf91', zorder=2, rwidth=0.9)\n\n    ax = ax[0]\n    for x in ax:\n\n        # Despine\n        x.spines['right'].set_visible(False)\n        x.spines['top'].set_visible(False)\n        x.spines['left'].set_visible(False)\n\n        # Switch off ticks\n        x.tick_params(axis=\"both\", which=\"both\", bottom=\"off\", top=\"off\", labelbottom=\"on\", left=\"off\", right=\"off\", labelleft=\"on\")\n\n        # Draw horizontal axis lines\n        vals = x.get_yticks()\n        for tick in vals:\n            x.axhline(y=tick, linestyle='dashed', alpha=0.4, color='#eeeeee', zorder=1)\n\n        # Remove title\n        x.set_title(\"\")\n\n        # Set x-axis label\n        x.set_xlabel(var, labelpad=20, weight='bold', size=12)\n\n        # Set y-axis label\n        x.set_ylabel(\"Frequency\", labelpad=20, weight='bold', size=12)\n\n        # Format y-axis label\n        x.yaxis.set_major_formatter(StrMethodFormatter('{x:,g}'))\n","9ebaf1b8":"columns = df.columns\nprint(columns)\ncorr = df[columns].corr()\n\nplt.figure(figsize = (15,15))\n\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True,\n    linewidths=.5\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","451c1910":"Y = df['D']\nX = df.drop(columns = ['D','NO', 'YR', 'R4', 'R9', 'R17', 'R23'])","a97a244f":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)","e87d153b":"X_scaled = preprocessing.scale(X_train)","afa5b5c5":"#create an instance and fit the model \nlogmodel = LogisticRegression()\nlogmodel.fit(X_train, y_train)","7ba9c74e":"X_test_scaled = preprocessing.scale(X_test)","c20a1b2b":"Y_predict = logmodel.predict(X_test)\nprint(classification_report(y_test,Y_predict))","18e4ac3a":"Accuracy of our model is: 0.79","94010db1":"Let's build histograms to look at the spread of independent variables(R1-R10)","1f459f9c":"In this step, we will create a heatmap to see the correlation between the dependent and the independent variables. Correlation matrices give us insights into which columns are related to each other and can be eliminated.","a841aedd":"\"R4, R9, R17 and R23 have the highest correlation with D\"","0e072926":"In the next step, we use the insights from our correlation matrix and remove the columns that are highly correlated.","930a535a":"Since the columns are numerical, we can get some insights into column values by using the describe methodology.","c9c9bd21":"Let's build histograms to look how our target variable is distributed in the dataset. This will help us understand if the dataset is balanced or not.","7673be43":"In this step, we look at the data and it's different columns, we can see that all of the columns are numerical in nature."}}