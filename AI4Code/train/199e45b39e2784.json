{"cell_type":{"7b25681f":"code","ed8a946a":"code","518c5f6a":"code","89412408":"code","3dbf7c78":"code","46727f8f":"code","313759d6":"code","6556880f":"code","a24ec5b4":"code","2701cf50":"code","5c6852b1":"code","9a83c2e9":"code","9df1a7e5":"code","2aff7993":"code","0dba0639":"code","86b53c3c":"code","39365828":"code","94269276":"code","cb08c8ff":"code","52cc31c5":"code","568cf727":"code","cfefb871":"code","62c8e364":"code","7f5086ae":"code","c23b7add":"code","4fd0111c":"code","1094804c":"code","cb692c5d":"code","94593b40":"code","0ca23ca7":"code","caf2125e":"code","167d0039":"code","025ceb87":"code","e4ebc055":"code","e5ce3e38":"code","87b8f053":"code","bda7c212":"code","cdec75cc":"code","d3d18f64":"code","28ca9d32":"code","35a29743":"code","50b0398f":"code","46cb9a4d":"code","368870d0":"code","d0ad12e3":"code","0717b227":"markdown","a778485a":"markdown","233cf378":"markdown","835961a0":"markdown","752c159b":"markdown","3eb40451":"markdown","4add192c":"markdown","a828311f":"markdown","492f265b":"markdown","f3c98fe7":"markdown","70d26550":"markdown","22306d78":"markdown","e0a10924":"markdown","0372ebd5":"markdown","abbd13a8":"markdown","1def242d":"markdown","0c8e988a":"markdown","4aca30d4":"markdown","94d2efe0":"markdown","bbe5a40d":"markdown","dec8f16f":"markdown"},"source":{"7b25681f":"# Team Annihilators- MehulKumar Patel,Dhiraj Patel\n# Emails: dhiru474@gmail.com,mkpatel.p64@gmail.com\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ed8a946a":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.simplefilter('ignore')\nget_ipython().run_line_magic('matplotlib', 'inline')","518c5f6a":"matches = pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/matches.csv')\ndeliveries = pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/deliveries.csv')","89412408":"matches.head(3)","3dbf7c78":"deliveries.head(3)","46727f8f":"matches.isnull().sum()","313759d6":"matches.city = matches.city.fillna(\"-\")\nmatches.umpire1 = matches.umpire1.fillna(\"-\")\nmatches.umpire2 = matches.umpire2.fillna(\"-\")\nmatches = matches.replace('Rising Pune Supergiants', 'Rising Pune Supergiant')\nmatches = matches.replace('Pune Warriors', 'Rising Pune Supergiant')\nmatches = matches.replace('Deccan Chargers', 'Sunrisers Hyderabad')\nmatches = matches.replace('Delhi Daredevils', 'Delhi Capitals')","6556880f":"matches.drop(columns=[\"umpire3\"], inplace = True)\nmatches.drop(columns=[\"umpire2\"], inplace = True)\nmatches.drop(columns=[\"umpire1\"], inplace = True)","a24ec5b4":"is_NaN = matches.isnull()\nrow_has_NaN = is_NaN.any(axis=1)\nrows_with_NaN = matches[row_has_NaN]\nrows_with_NaN","2701cf50":"matches.dropna(inplace=True)\nmatches.isnull().sum()","5c6852b1":"matches.info()","9a83c2e9":"matches.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","9df1a7e5":"# Total no. of wins by each team\nsns.set(style='darkgrid')\nfig=plt.gcf()\nfig.set_size_inches(18.5,10.5)\nwins=pd.DataFrame(matches['winner'].value_counts())\nwins['name']=wins.index\nplt.xticks(rotation=90,fontsize=12)\nplt.yticks(fontsize=16)\nplt.bar(wins['name'],\n        wins['winner'],\n        color=['#15244C','#FFFF48','#292734','#EF2920','#CD202D','#ECC5F2',\n               '#294A73','#D4480B','#242307','#FD511F','#158EA6','#E82865',\n               '#005DB7','#C23E25','#E82865']\n        ,alpha=0.8)\ncount=0\nfor i in wins['winner']:\n    plt.text(count-0.15,i-4,str(i),size=15,color='black',rotation=90)\n    count+=1\nplt.title('Total wins by each team',fontsize=20)\nplt.xlabel('Teams',fontsize=15)\nplt.ylabel('Total no. of matches won(2008-2019)',fontsize=14)\nplt.show()","2aff7993":"# Man of Match Awards\nplayers=pd.DataFrame(matches['player_of_match'].value_counts())\nplayers['name']=players.index\nplayers=players.head(20)\nfig=plt.gcf()\nfig.set_size_inches(18.5,10.5)\nplt.xticks(rotation=90,fontsize=0)\nplt.yticks([0,2,4,6,8,10,12,14,16,18,20],[0,2,4,6,8,10,12,14,16,18,20],fontsize=15)\nplt.bar(players['name'], players['player_of_match'],\n        color=['#CD202D','#EF2920','#D4480B','#15244C','#FFFF48','#EF2920',\n               '#FFFF48','#FFFF48','#292734','#FFFF48','#ECC5F2','#EF2920',\n               '#292734','#15244C','#005DB7','#005DB7','#292734','#15244C',\n               '#FFFF48','#CD202D'],alpha=0.8)\ncount=0\nfor i in players['player_of_match']:\n    plt.text(count,7,players['name'][count]+': '+str(i),rotation=90,color='black',size=18)\n    count+=1\nplt.title('Top 20 players with most \"Man of the match\" awards',fontsize=20)\nplt.xlabel('Players',fontsize=20)\nplt.ylabel('No. of times won',fontsize=18)\nplt.tight_layout()\nplt.show()\n","0dba0639":"# Most Runs by a player\n\n#Create new dataframe\nmost_runs = pd.DataFrame()\n# the 'batsman_runs' column, sort them and fetch top 10 results\nmost_runs['Total Runs'] = deliveries.groupby('batsman').sum()['batsman_runs'].sort_values(ascending = False).head(5)\n\n#Give a name to the index and reset the index to make it a column\nmost_runs.index.names = ['Batsman']\nmost_runs.reset_index(inplace=True)\n\n#Plot the graph\nplt.figure(figsize=(10,6))\nfont = {'color':  'darkcyan',\n        'weight': 'bold',\n        'size': 30,\n        }\nplt.title('Most Runs',fontdict=font)\nax = sns.barplot(x='Batsman',y='Total Runs',data = most_runs,palette='gist_rainbow')\nax.xaxis.label.set_color('darkcyan')\nax.yaxis.label.set_color('darkcyan')\nax.xaxis.label.set_size(10)\nax.yaxis.label.set_size(10)\nax.tick_params(axis='both', colors='darkcyan', labelsize=14)\n\n#Display the actual values on the bars\nfor p in ax.patches:\n    ax.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()-500), ha = 'center',\n                va = 'center', xytext = (0, 10), textcoords = 'offset points',fontweight = 'bold',fontsize=15)","86b53c3c":"#the top Ten blower's with highest wickets\n\n#Create new dataframe\nwickets = pd.DataFrame()\ndismissal = pd.DataFrame()\n\ndismissal = deliveries[(deliveries['player_dismissed'].notnull()) & (~deliveries['dismissal_kind'].isin(['run out','retired hurt','obstructing the field']))]\nwickets['Wickets'] = dismissal.groupby('bowler').count()['player_dismissed'].sort_values(ascending=False).head(5)\n\n#Give name to the index and reset the index to make it a column\nwickets.index.names = ['Bowler']\nwickets.reset_index(inplace=True)\n\n\n#Plot the graph\nplt.figure(figsize=(16,6))\nfont = {'color':  'darkcyan',\n        'weight': 'bold',\n        'size': 30,\n        }\nplt.title('Most Wickets',fontdict=font)\nax = sns.barplot(x='Bowler',y='Wickets',data = wickets,palette='gist_rainbow')\nax.xaxis.label.set_color('darkcyan')\nax.yaxis.label.set_color('darkcyan')\nax.xaxis.label.set_size(20)\nax.yaxis.label.set_size(20)\nax.tick_params(axis='both', colors='darkcyan', labelsize=14)\nplt.xticks(rotation=45)\n\n#Display the actual values on the bars\nfor p in ax.patches:\n    ax.annotate(format(int(p.get_height())), (p.get_x() + p.get_width() \/ 2., p.get_height()-15), ha = 'center',\n                va = 'center', xytext = (0, 10), textcoords = 'offset points',fontweight = 'bold',fontsize=15)\n","39365828":"from plotly import tools\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\ninit_notebook_mode(connected=False)","94269276":"matches_played=pd.concat([matches['team1'],matches['team2']])\nmatches_played=matches_played.value_counts().reset_index()\nmatches_played.columns=['Team','Total Matches']\nmatches_played['wins']=matches['winner'].value_counts().reset_index()['winner']\nmatches_played.set_index('Team',inplace=True)","cb08c8ff":"matches_played.reset_index().head(8)\n","52cc31c5":"win_percentage = round(matches_played['wins']\/matches_played['Total Matches'],3)*100\nwin_percentage.head(3)","568cf727":"trace1 = go.Bar(x=matches_played.index,y=matches_played['Total Matches'],\n                name='Total Matches',opacity=0.4)\n\ntrace2 = go.Bar(x=matches_played.index,y=matches_played['wins'],\n                name='Matches Won',marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=matches_played.index,\n               y=(round(matches_played['wins']\/matches_played['Total Matches'],3)*100),\n               name='Win Percentage',opacity=0.6,marker=dict(color='gold'))\n\ndata = [trace1, trace2, trace3]\n\nlayout = go.Layout(title='Match Played, Wins And Win Percentage',xaxis=dict(title='Team'),\n                   yaxis=dict(title='Count'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cfefb871":"venue_matches=matches.groupby('venue').count()[['id']].sort_values(by='id',ascending=False).head()\nser = pd.Series(venue_matches['id']) \nser","62c8e364":"venue_matches=matches.groupby('venue').count()[['id']].reset_index()\n\ndata = [{\"x\": venue_matches['id'],\"y\": venue_matches['venue'], \n          \"marker\": {\"color\": \"lightblue\", \"size\": 12},\n         \"line\": {\"color\": \"red\",\"width\" : 2,\"dash\" : 'dash'},\n          \"mode\": \"markers+lines\", \"name\": \"Women\", \"type\": \"scatter\"}]\n\nlayout = {\"title\": \"Stadiums and Matches\", \n          \"xaxis\": {\"title\": \"Matches Played\", }, \n          \"yaxis\": {\"title\": \"Stadiums\"},\n          \"autosize\":False,\"width\":900,\"height\":1000,\n          \"margin\": go.layout.Margin(l=340, r=0,b=100,t=100,pad=0)}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","7f5086ae":"batsmen = matches[['id','season']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left').drop('id', axis = 1)\nseason=batsmen.groupby(['season'])['total_runs'].sum().reset_index()\navgruns_each_season=matches.groupby(['season']).count().id.reset_index()\navgruns_each_season.rename(columns={'id':'matches'},inplace=1)\navgruns_each_season['total_runs']=season['total_runs']\navgruns_each_season['average_runs_per_match']=avgruns_each_season['total_runs']\/avgruns_each_season['matches']","c23b7add":"fig = {\"data\" : [{\"x\" : season[\"season\"],\"y\" : season[\"total_runs\"],\n                  \"name\" : \"Total Run\",\"marker\" : {\"color\" : \"lightblue\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" },\n        \n                 {\"x\" : season[\"season\"],\"y\" : avgruns_each_season[\"average_runs_per_match\"],\n                  \"name\" : \"Average Run\",\"marker\" : {\"color\" : \"brown\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\",}],\n       \n        \"layout\" : {\"title\": \"Total and Average run per Season\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : False},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"Average Run\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Year\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"title\": \"Total Run\"}}}\n\niplot(fig)","4fd0111c":"Season_boundaries=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==6).sum()).reset_index()\nfours=batsmen.groupby(\"season\")[\"batsman_runs\"].agg(lambda x: (x==4).sum()).reset_index()\nSeason_boundaries=Season_boundaries.merge(fours,left_on='season',right_on='season',how='left')\nSeason_boundaries=Season_boundaries.rename(columns={'batsman_runs_x':'6\"s','batsman_runs_y':'4\"s'})\nSeason_boundaries['6\"s'] = Season_boundaries['6\"s']*6\nSeason_boundaries['4\"s'] = Season_boundaries['4\"s']*4\nSeason_boundaries['total_runs'] = season['total_runs']","1094804c":"trace1 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['total_runs']-(Season_boundaries['6\"s']+Season_boundaries['4\"s']),\n    name='Remaining runs',opacity=0.6)\n\ntrace2 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['4\"s'],\n    name='Run by 4\"s',opacity=0.7)\n\ntrace3 = go.Bar(\n    x=Season_boundaries['season'],\n    y=Season_boundaries['6\"s'],\n    name='Run by 6\"s',opacity=0.7)\n\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title=\"Run Distribution per year\",barmode='stack',xaxis = dict(tickmode='linear',title=\"Year\"),\n                                    yaxis = dict(title= \"Run Distribution\"))\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","cb692c5d":"high_scores=deliveries.groupby(['match_id', 'inning','batting_team','bowling_team'])['total_runs'].sum().reset_index()\nhigh_scores1=high_scores[high_scores['inning']==1]\nhigh_scores2=high_scores[high_scores['inning']==2]\nhigh_scores1=high_scores1.merge(high_scores2[['match_id','inning', 'total_runs']], on='match_id')\nhigh_scores1.rename(columns={'inning_x':'inning_1','inning_y':'inning_2','total_runs_x':'inning1_runs','total_runs_y':'inning2_runs'},inplace=True)\nhigh_scores1=high_scores1[high_scores1['inning1_runs']>=200]\nhigh_scores1['is_score_chased']=1\nhigh_scores1['is_score_chased'] = np.where(high_scores1['inning1_runs']<=high_scores1['inning2_runs'], 'yes', 'no')","94593b40":"slices=high_scores1['is_score_chased'].value_counts().reset_index().is_score_chased\nlist(slices)\nlabels=['No','Yes']\nslices","0ca23ca7":"trace0 = go.Pie(labels=labels, values=slices,\n              hoverinfo='label+value')\n\nlayout=go.Layout(title='200 score chased ?')\nfig = go.Figure(data=[trace0], layout=layout)\niplot(fig)","caf2125e":"x=['Sunrisers Hyderabad', 'Mumbai Indians', 'Gujarat Lions',\n    'Rising Pune Supergiant', 'Royal Challengers Bangalore',\n    'Kolkata Knight Riders', 'Delhi Daredevils', 'Kings XI Punjab',\n    'Chennai Super Kings', 'Rajasthan Royals', 'Deccan Chargers',\n    'Kochi Tuskers Kerala', 'Pune Warriors', 'Rising Pune Supergiants', 'Delhi Capitals']\n\ny = ['SRH','MI','GL','RPS','RCB','KKR','DC','KXIP','CSK','RR','SRH','KTK','PW','RPS','DC']\n\nmatches.replace(x,y,inplace = True)\ndeliveries.replace(x,y,inplace = True)","167d0039":"runs_per_over = deliveries.pivot_table(index=['over'],columns='batting_team',values='total_runs',aggfunc=sum)\nruns_per_over.reset_index(inplace=True)\nruns_per_over.drop(['KTK','PW','RPS','GL'],axis=1,inplace=True)","025ceb87":"trace1 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['CSK'],name='CSK',marker= dict(color= \"blue\",size=12))\ntrace2 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['DC'],name='DC')\ntrace3 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KKR'],name='KKR')\ntrace4 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['KXIP'],name='KXIP')\ntrace5 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['MI'],name='MI')\ntrace6 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RCB'],name='RCB')\ntrace7 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['RR'],name='RR')\ntrace8 = go.Scatter(x=runs_per_over['over'],y = runs_per_over['SRH'],name='SRH')\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\n\nlayout = go.Layout(title='Average Run in Each Over',xaxis = dict(tickmode='linear',title=\"Over\"),\n                                    yaxis = dict(title= \"Runs\"))\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig)","e4ebc055":"season=matches[['id','season','winner']]\ncomplete_data=deliveries.merge(season,how='inner',left_on='match_id',right_on='id')\npowerplay_data=complete_data[complete_data['over']<=6]\npowerplay_dismissals=powerplay_data.dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].max()\npowerplay_dismissals=powerplay_dismissals.reset_index()\n\npowerplay_dismissals_first=powerplay_data[ powerplay_data['inning']==1].dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_first=powerplay_dismissals_first.reset_index()\n\npowerplay_dismissals_second=powerplay_data[ powerplay_data['inning']==2].dropna(subset=['dismissal_kind']).groupby(['season','match_id','inning'])['dismissal_kind'].agg(['count']).reset_index().groupby('season')['count'].mean()\npowerplay_dismissals_second=powerplay_dismissals_second.reset_index()","e5ce3e38":"trace1 = go.Bar(x=powerplay_dismissals.season,y=powerplay_dismissals[\"count\"],\n                name='Max',opacity=0.4)\n\ntrace2 = go.Bar(x=powerplay_dismissals_first.season,y=powerplay_dismissals_first[\"count\"],name='Inning 1',\n                marker=dict(color='red'),opacity=0.4)\n\ntrace3 = go.Bar(x=powerplay_dismissals_second.season,y=powerplay_dismissals_second[\"count\"],name='Inning 2',\n                marker=dict(color='lime'),opacity=0.4)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(title='Powerplay Average Dismissals per Year',\n                   xaxis=dict(title='Year',tickmode='linear'),\n                   yaxis=dict(title='Run'),bargap=0.2,bargroupgap=0.1)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","87b8f053":"df_strike_rate = deliveries.groupby(['batsman']).agg({'ball':'count','batsman_runs':'mean'}).sort_values(by='batsman_runs',ascending=False)\ndf_strike_rate.rename(columns ={'batsman_runs' : 'strike rate'}, inplace=True)\ndf_runs_per_match = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ndf_total_runs = df_runs_per_match.groupby(['batsman']).agg({'sum' ,'mean','count'})\ndf_total_runs.rename(columns ={'sum' : 'batsman run','count' : 'match count','mean' :'average score'}, inplace=True)\ndf_total_runs.columns = df_total_runs.columns.droplevel()\ndf_sixes = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==6].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_four = deliveries[['batsman','batsman_runs']][deliveries.batsman_runs==4].groupby(['batsman']).agg({'batsman_runs':'count'})\ndf_batsman_stat = pd.merge(pd.merge(pd.merge(df_strike_rate,df_total_runs, left_index=True, right_index=True),\n                                    df_sixes, left_index=True, right_index=True),df_four, left_index=True, right_index=True)","bda7c212":"df_batsman_stat.rename(columns = {'ball' : 'ball', 'strike rate':'strike_rate','batsman run' : 'batsman_run',\n                                  'match count' : 'match_count','average score' : 'average_score' ,'batsman_runs_x' :'six',\n                                  'batsman_runs_y':'four'},inplace=True)\ndf_batsman_stat['strike_rate'] = df_batsman_stat['strike_rate']*100\ndf_batsman_stat.sort_values(by='batsman_run',ascending=False,inplace=True)\n#df_batsman_stat.sort_values(by='batsman_run',ascending=False)\ndf_batsman_stat.reset_index(inplace=True)","cdec75cc":"average_score=df_batsman_stat.sort_values(by='average_score',ascending=False)\naverage_score=average_score[average_score['match_count']>50].head(10)\n\nstrike_rate=df_batsman_stat.sort_values(by='strike_rate',ascending=False)\nstrike_rate=strike_rate[strike_rate['match_count']>50].head(10)","d3d18f64":"trace1 = go.Bar(x=average_score['batsman'],y=average_score['average_score'],\n                name='Average Score',marker=dict(color='gold'),opacity=0.6,showlegend=False)\n\ntrace2 = go.Bar(x=strike_rate['batsman'],y=strike_rate['strike_rate'],\n                name='Strike Rate',marker=dict(color='brown'),opacity=0.6,showlegend=False)\n\nfig = tools.make_subplots(rows=1, cols=2, subplot_titles=('Highest Average Score','Highest Strike Rate'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout']['xaxis1'].update(title='Player')\nfig['layout']['xaxis2'].update(title='Player')\n\niplot(fig)","28ca9d32":"toppers=deliveries.groupby(['batsman','batsman_runs'])['total_runs'].count().reset_index()\ntoppers=toppers.pivot('batsman','batsman_runs','total_runs')\ntoppers.reset_index(inplace=True)","35a29743":"top_6 = toppers.sort_values(6,ascending=False).head(10)\ntop_4 = toppers.sort_values(4,ascending=False).head(10)\ntop_2 = toppers.sort_values(2,ascending=False).head(10)\ntop_1 = toppers.sort_values(1,ascending=False).head(10)","50b0398f":"trace1 = go.Scatter(x=top_6.batsman,y =top_6[6],name='6\"s',marker =dict(color= \"blue\",size = 9),line=dict(width=2,dash='dash'))\ntrace2 = go.Scatter(x=top_4.batsman,y = top_4[4],name='4\"s',marker =dict(color= \"orange\",size = 9),line=dict(width=2,dash='longdash'))\ntrace3 = go.Scatter(x=top_2.batsman,y = top_2[2],name='2\"s',marker =dict(color= \"green\",size = 9),line=dict(width=2,dash='dashdot'))\ntrace4 = go.Scatter(x=top_1.batsman,y = top_1[1],name='1\"s',marker =dict(color= \"red\",size = 9),line=dict(width=2,dash='longdashdot'))\n\nfig = tools.make_subplots(rows=4, cols=1, subplot_titles=('Top 6\"s Scorer','Top 4\"s Scorer',\n                                                          'Top 2\"s Scorer','Top 1\"s Scorer'))\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 2, 1)\nfig.append_trace(trace3, 3, 1)\nfig.append_trace(trace4, 4, 1)\n\nfig['layout'].update(title='Top Scorer in each Category',showlegend=False)\niplot(fig)","46cb9a4d":"cen = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\ncen = cen[cen['batsman_runs']>=100]\ncen = cen.groupby(['batsman']).agg({'count'})\ncen.columns = cen.columns.droplevel()\ncen = cen.sort_values(by='count',ascending=False).reset_index()\nhalf_cen = deliveries.groupby(['batsman','match_id']).agg({'batsman_runs':'sum'})\nhalf_cen = half_cen[half_cen['batsman_runs']>=50]\nhalf_cen = half_cen[half_cen['batsman_runs']<100]\nhalf_cen = half_cen.groupby(['batsman']).agg({'count'})\nhalf_cen.columns = half_cen.columns.droplevel()\nhalf_cen = half_cen.sort_values(by='count',ascending=False).reset_index()\ndf_big = pd.merge(cen,half_cen, on='batsman',how='right')\ndf_big = df_big.fillna(0)\nbatsman_stats = pd.merge(df_batsman_stat,df_big, on='batsman',how='left').fillna(0)\nbatsman_stats.rename(columns = {'count_x' : '100s', 'count_y' : '50s'},inplace=True)","368870d0":"centuries = batsman_stats.sort_values(by='100s').tail(15)\nhalf_centuries = batsman_stats.sort_values(by='50s').tail(15)","d0ad12e3":"fig = {\"data\" : [{\"x\" : centuries[\"batsman\"],\"y\" : centuries[\"100s\"],\n                  \"name\" : \"100s\",\"marker\" : {\"color\" : \"lightblue\",\"size\": 12},\n                  \"line\": {\"width\" : 3},\"type\" : \"scatter\",\"mode\" : \"lines+markers\" ,\n                  \"xaxis\" : \"x1\",\"yaxis\" : \"y1\"},\n        \n                 {\"x\" : half_centuries[\"batsman\"],\"y\" : half_centuries[\"50s\"],\n                  \"name\" : \"50s\",\"marker\" : {\"color\" : \"brown\",\"size\": 12},\n                  \"type\" : \"scatter\",\"line\": {\"width\" : 3},\"mode\" : \"lines+markers\",\n                  \"xaxis\" : \"x2\",\"yaxis\" : \"y2\"}],\n       \n        \"layout\" : {\"title\": \"Total centuries and half-centuries by top batsman\",\n                    \"xaxis2\" : {\"domain\" : [0, 1],\"anchor\" : \"y2\",\n                    \"showticklabels\" : True},\"margin\" : {\"b\" : 111},\n                    \"yaxis2\" : {\"domain\" : [.55, 1],\"anchor\" : \"x2\",\"title\": \"50s\"},                    \n                    \"xaxis\" : {\"domain\" : [0, 1],\"tickmode\":'linear',\"title\": \"Batsman\"},\n                    \"yaxis\" : {\"domain\" :[0, .45], \"anchor\" : \"x2\",\"title\": \"100s\"}}}\n\niplot(fig)","0717b227":"## Removing unwanted columns","a778485a":"## -> Boundary & Remaining Runs by each season","233cf378":"## -> Most MOM Awards","835961a0":"## -> Wins by each team","752c159b":"## -> Total & Average Runs scored each season","3eb40451":"## -> Which team scores most in different patches of overs?","4add192c":"## Rearrange & Rename ","a828311f":"# 1. ***Data Cleaning and Rearranging***","492f265b":"## -> Top Run-scorers","f3c98fe7":"## -> Top wicket takers","70d26550":"## -> Total Wins & Win percentage by team","22306d78":"## -> Powerplay dismissals in each innings by year","e0a10924":"## Drop all null values","0372ebd5":"## -> Top players with highest Average & Strike Rate ","abbd13a8":"## -> How often is 200 or more runs being chased?","1def242d":"## -> Top scorer in each category ","0c8e988a":"## -> Which stadium has hosted most matches?","4aca30d4":"## -> Who has scored the most centuries & half-centuries?","94d2efe0":"# 2. ***Deep-dive Analysis into Dataset with Visualization's***","bbe5a40d":"## Checking for null values","dec8f16f":"## Checking for null rows"}}