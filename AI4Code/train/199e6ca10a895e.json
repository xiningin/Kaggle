{"cell_type":{"2b4a6a29":"code","67db03cb":"code","c7011ecc":"code","abef44ba":"code","13b7e2be":"code","c581bf63":"code","27e3cffc":"code","e1ba277c":"code","c2d5015b":"code","7c665469":"code","73078550":"code","f96e8fdd":"code","fb522423":"code","1a4fb3e2":"code","c093b080":"code","8e0b0a16":"code","36c67cd4":"code","cba24edb":"code","227e88fe":"code","74ba0ea7":"markdown"},"source":{"2b4a6a29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67db03cb":"macro = pd.read_csv(\"\/kaggle\/input\/macro-poland\/macro.csv\")","c7011ecc":"macro.head()\n","abef44ba":"macro.shape","13b7e2be":"macro = macro.set_index('date')\nmacro.tail()","c581bf63":"macro.describe()","27e3cffc":"corr = macro.corr()\nprint(corr)\n","e1ba277c":"import seaborn as sns\nsns.heatmap(corr, annot=True)","c2d5015b":"target = macro['export']\nfeatures = macro[[\"balance_payments\", \"services\"]]","7c665469":"train_size = np.int(0.85*features.shape[0])","73078550":"features = macro[[\"balance_payments\", \"services\"]]\nprint(features.shape)\nprint(train_size)","f96e8fdd":"train_target = target[:train_size]\ntrain_features= features[:train_size]\n\ntest_target = target[train_size:]\ntest_features= features[train_size:]","fb522423":"print(f'Train_size:{train_features.shape[0]}')\nprint(f'Test_size:{test_features.shape[0]}')\nsum = train_features.shape[0]+test_features.shape[0]\nprint(\"Sum is \" +str(sum))","1a4fb3e2":"import statsmodels.api as sm","c093b080":"linear_features = sm.add_constant(features)","8e0b0a16":"train_linear_features = linear_features[:train_size]\ntest_linear_features = linear_features[train_size:]","36c67cd4":"model = sm.OLS(train_target, train_linear_features)\nmodel_ols = model.fit()\nmodel_ols.summary()","cba24edb":"train_predictions = model_ols.predict(train_linear_features) \ntest_predictions = model_ols.predict(test_linear_features)","227e88fe":"import matplotlib.pyplot as plt\n\nplt.scatter(train_predictions, train_target, alpha=0.4, color=\"black\", label='train')\nplt.scatter(test_predictions, test_target, alpha=0.5, color='red', label='test')\n\nxmin, xmax = plt.xlim()\n\nplt.plot(np.arange(xmin, xmax, 0.01), np.arange(xmin, xmax, 0.01), color='green', label='perfect_predictions')\n\nplt.xlabel('predicted value')\nplt.ylabel('value')\nplt.legend()\nplt.show()","74ba0ea7":"Hello!\n\nI would like to ask about your opinion on the below model.\nThe data concern the macroeconomics of Poland.\n\ntarget - Export\nfeatures - Services, Balance payments \n\nData are from polish website https:\/\/stat.gov.pl\/. \nI recommend read this https:\/\/www.datarobot.com\/blog\/ordinary-least-squares-in-python\/ in regards to Ordinary Least-Squares (OLS) Regression."}}