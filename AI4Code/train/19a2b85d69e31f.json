{"cell_type":{"d260faef":"code","40b92561":"code","827c606f":"code","1a198a53":"code","0d087a50":"code","dd3e1fc3":"code","7e51ae6b":"code","1d9324a7":"code","2ffc4817":"code","e47f1f2a":"code","96536de9":"code","59a9613c":"code","7df6a5f7":"code","36e8f244":"markdown","3f1de095":"markdown","7e310578":"markdown","1c57dc4f":"markdown","1e353f9a":"markdown","8a5db144":"markdown"},"source":{"d260faef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport pylab as pl\nimport numpy as np\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40b92561":"df = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")\ndf","827c606f":"df.shape","1a198a53":"df.columns","0d087a50":"df.columns.isnull()","dd3e1fc3":"cdf = df[[\"enginesize\",\"horsepower\",\"price\"]]\ncdf.head(10)","7e51ae6b":"plt.scatter(cdf[\"enginesize\"], cdf[\"price\"],  color='blue')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Price\")\nplt.show()","1d9324a7":"plt.scatter(cdf[\"horsepower\"], cdf[\"price\"],  color='blue')\nplt.xlabel(\"Horsepower\")\nplt.ylabel(\"Price\")\nplt.show() ","2ffc4817":"msk = np.random.rand(len(df)) < 0.8\ntrain = cdf[msk]\ntest = cdf[~msk]","e47f1f2a":"from sklearn import linear_model\nregr = linear_model.LinearRegression()\n\nx = np.asanyarray(train[['enginesize','horsepower']])\ny = np.asanyarray(train[['price']])\nregr.fit (x,y)\n\n# The coefficients\nprint ('Coefficients: ', regr.coef_)\nprint ('Intercept: ',regr.intercept_)","96536de9":"plt.scatter(train[\"enginesize\"], train[\"price\"],  color='blue')\nplt.plot(x,regr.coef_[0][0]*x + regr.coef_[0][1]*x + regr.intercept_[0],'-r')\nplt.xlabel(\"Engine size\")\nplt.ylabel(\"Emission\")\nplt.show()","59a9613c":"y_hat= regr.predict(test[['enginesize','horsepower']])\nx = np.asanyarray(test[['enginesize','horsepower']])\ny = np.asanyarray(test[['price']])\nprint(\"Residual sum of squares: %.2f\"\n      % np.mean((y_hat - y) ** 2))\n\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: %.2f' % regr.score(x, y))","7df6a5f7":"test_car_features = [200,200]\ntest_car_price = (regr.coef_[0][0]*test_car_features[0] + regr.coef_[0][1]*test_car_features[1] + regr.intercept_[0])\nprint(\"Arac\u0131n fiyat tahmini: \",int(test_car_price),\"$\")","36e8f244":"## Creating train and test data","3f1de095":"## *Making prediction of a car out of the dataset*","7e310578":"## Building Linear Model","1c57dc4f":"## Cheking the null values","1e353f9a":"## Prediction Making","8a5db144":"*we have 0.74 variance score and it shows us it can be used as a multiple linear model*"}}