{"cell_type":{"35ff26ca":"code","343e3cc8":"code","44990662":"code","309c4689":"code","abe9b54c":"code","30fba9c2":"code","5a843532":"code","d2778209":"code","8041620f":"code","e01c9f70":"code","6339dcf0":"code","2a9b08fd":"code","a7b4c7cf":"code","456a6690":"markdown","092e3966":"markdown","638bf59f":"markdown","14abe8e4":"markdown","3b7caed9":"markdown","675f0f04":"markdown","fe67ca0c":"markdown","90c6a905":"markdown","5420ae69":"markdown","f3b7b9be":"markdown","8794b083":"markdown","80ded79b":"markdown","c6b5787e":"markdown","44f79841":"markdown"},"source":{"35ff26ca":"import numpy as np\nimport pandas as pd\nimport os, json, gc, re, random\nfrom tqdm.notebook import tqdm\nfrom sklearn.preprocessing import MultiLabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport logging\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)","343e3cc8":"%%time\n\n!\/opt\/conda\/bin\/python3.7 -m pip install --upgrade pip\n!pip uninstall -q tqdm -y > \/dev\/null\n!pip install -q tqdm==4.48.1 > \/dev\/null\n!pip uninstall -q torch -y > \/dev\/null\n!pip install -q torch==1.6.0+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html > \/dev\/null\n!pip install -q -U tokenizers==0.7.0 > \/dev\/null\n!pip install -q -U transformers==3.0.2 > \/dev\/null\n!pip install -q -U simpletransformers==0.46.0 > \/dev\/null","44990662":"import torch, transformers, tokenizers\ntorch.__version__, transformers.__version__, tokenizers.__version__","309c4689":"data_file = '..\/input\/arxiv\/arxiv-metadata-oai-snapshot.json'\n\n\"\"\" Using `yield` to load the JSON file in a loop to prevent Python memory issues if JSON is loaded directly\"\"\"\n\ndef get_metadata():\n    with open(data_file, 'r') as f:\n        for line in f:\n            yield line","abe9b54c":"metadata = get_metadata()\nfor paper in metadata:\n    for k, v in json.loads(paper).items():\n        print(f'{k}: {v} \\n')\n    break","30fba9c2":"category_map = {'astro-ph': 'Astrophysics',\n                'astro-ph.CO': 'Cosmology and Nongalactic Astrophysics',\n                'astro-ph.EP': 'Earth and Planetary Astrophysics',\n                'astro-ph.GA': 'Astrophysics of Galaxies',\n                'astro-ph.HE': 'High Energy Astrophysical Phenomena',\n                'astro-ph.IM': 'Instrumentation and Methods for Astrophysics',\n                'astro-ph.SR': 'Solar and Stellar Astrophysics',\n                'cond-mat.dis-nn': 'Disordered Systems and Neural Networks',\n                'cond-mat.mes-hall': 'Mesoscale and Nanoscale Physics',\n                'cond-mat.mtrl-sci': 'Materials Science',\n                'cond-mat.other': 'Other Condensed Matter',\n                'cond-mat.quant-gas': 'Quantum Gases',\n                'cond-mat.soft': 'Soft Condensed Matter',\n                'cond-mat.stat-mech': 'Statistical Mechanics',\n                'cond-mat.str-el': 'Strongly Correlated Electrons',\n                'cond-mat.supr-con': 'Superconductivity',\n                'cs.AI': 'Artificial Intelligence',\n                'cs.AR': 'Hardware Architecture',\n                'cs.CC': 'Computational Complexity',\n                'cs.CE': 'Computational Engineering, Finance, and Science',\n                'cs.CG': 'Computational Geometry',\n                'cs.CL': 'Computation and Language',\n                'cs.CR': 'Cryptography and Security',\n                'cs.CV': 'Computer Vision and Pattern Recognition',\n                'cs.CY': 'Computers and Society',\n                'cs.DB': 'Databases',\n                'cs.DC': 'Distributed, Parallel, and Cluster Computing',\n                'cs.DL': 'Digital Libraries',\n                'cs.DM': 'Discrete Mathematics',\n                'cs.DS': 'Data Structures and Algorithms',\n                'cs.ET': 'Emerging Technologies',\n                'cs.FL': 'Formal Languages and Automata Theory',\n                'cs.GL': 'General Literature',\n                'cs.GR': 'Graphics',\n                'cs.GT': 'Computer Science and Game Theory',\n                'cs.HC': 'Human-Computer Interaction',\n                'cs.IR': 'Information Retrieval',\n                'cs.IT': 'Information Theory',\n                'cs.LG': 'Machine Learning',\n                'cs.LO': 'Logic in Computer Science',\n                'cs.MA': 'Multiagent Systems',\n                'cs.MM': 'Multimedia',\n                'cs.MS': 'Mathematical Software',\n                'cs.NA': 'Numerical Analysis',\n                'cs.NE': 'Neural and Evolutionary Computing',\n                'cs.NI': 'Networking and Internet Architecture',\n                'cs.OH': 'Other Computer Science',\n                'cs.OS': 'Operating Systems',\n                'cs.PF': 'Performance',\n                'cs.PL': 'Programming Languages',\n                'cs.RO': 'Robotics',\n                'cs.SC': 'Symbolic Computation',\n                'cs.SD': 'Sound',\n                'cs.SE': 'Software Engineering',\n                'cs.SI': 'Social and Information Networks',\n                'cs.SY': 'Systems and Control',\n                'econ.EM': 'Econometrics',\n                'eess.AS': 'Audio and Speech Processing',\n                'eess.IV': 'Image and Video Processing',\n                'eess.SP': 'Signal Processing',\n                'gr-qc': 'General Relativity and Quantum Cosmology',\n                'hep-ex': 'High Energy Physics - Experiment',\n                'hep-lat': 'High Energy Physics - Lattice',\n                'hep-ph': 'High Energy Physics - Phenomenology',\n                'hep-th': 'High Energy Physics - Theory',\n                'math.AC': 'Commutative Algebra',\n                'math.AG': 'Algebraic Geometry',\n                'math.AP': 'Analysis of PDEs',\n                'math.AT': 'Algebraic Topology',\n                'math.CA': 'Classical Analysis and ODEs',\n                'math.CO': 'Combinatorics',\n                'math.CT': 'Category Theory',\n                'math.CV': 'Complex Variables',\n                'math.DG': 'Differential Geometry',\n                'math.DS': 'Dynamical Systems',\n                'math.FA': 'Functional Analysis',\n                'math.GM': 'General Mathematics',\n                'math.GN': 'General Topology',\n                'math.GR': 'Group Theory',\n                'math.GT': 'Geometric Topology',\n                'math.HO': 'History and Overview',\n                'math.IT': 'Information Theory',\n                'math.KT': 'K-Theory and Homology',\n                'math.LO': 'Logic',\n                'math.MG': 'Metric Geometry',\n                'math.MP': 'Mathematical Physics',\n                'math.NA': 'Numerical Analysis',\n                'math.NT': 'Number Theory',\n                'math.OA': 'Operator Algebras',\n                'math.OC': 'Optimization and Control',\n                'math.PR': 'Probability',\n                'math.QA': 'Quantum Algebra',\n                'math.RA': 'Rings and Algebras',\n                'math.RT': 'Representation Theory',\n                'math.SG': 'Symplectic Geometry',\n                'math.SP': 'Spectral Theory',\n                'math.ST': 'Statistics Theory',\n                'math-ph': 'Mathematical Physics',\n                'nlin.AO': 'Adaptation and Self-Organizing Systems',\n                'nlin.CD': 'Chaotic Dynamics',\n                'nlin.CG': 'Cellular Automata and Lattice Gases',\n                'nlin.PS': 'Pattern Formation and Solitons',\n                'nlin.SI': 'Exactly Solvable and Integrable Systems',\n                'nucl-ex': 'Nuclear Experiment',\n                'nucl-th': 'Nuclear Theory',\n                'physics.acc-ph': 'Accelerator Physics',\n                'physics.ao-ph': 'Atmospheric and Oceanic Physics',\n                'physics.app-ph': 'Applied Physics',\n                'physics.atm-clus': 'Atomic and Molecular Clusters',\n                'physics.atom-ph': 'Atomic Physics',\n                'physics.bio-ph': 'Biological Physics',\n                'physics.chem-ph': 'Chemical Physics',\n                'physics.class-ph': 'Classical Physics',\n                'physics.comp-ph': 'Computational Physics',\n                'physics.data-an': 'Data Analysis, Statistics and Probability',\n                'physics.ed-ph': 'Physics Education',\n                'physics.flu-dyn': 'Fluid Dynamics',\n                'physics.gen-ph': 'General Physics',\n                'physics.geo-ph': 'Geophysics',\n                'physics.hist-ph': 'History and Philosophy of Physics',\n                'physics.ins-det': 'Instrumentation and Detectors',\n                'physics.med-ph': 'Medical Physics',\n                'physics.optics': 'Optics',\n                'physics.plasm-ph': 'Plasma Physics',\n                'physics.pop-ph': 'Popular Physics',\n                'physics.soc-ph': 'Physics and Society',\n                'physics.space-ph': 'Space Physics',\n                'q-bio.BM': 'Biomolecules',\n                'q-bio.CB': 'Cell Behavior',\n                'q-bio.GN': 'Genomics',\n                'q-bio.MN': 'Molecular Networks',\n                'q-bio.NC': 'Neurons and Cognition',\n                'q-bio.OT': 'Other Quantitative Biology',\n                'q-bio.PE': 'Populations and Evolution',\n                'q-bio.QM': 'Quantitative Methods',\n                'q-bio.SC': 'Subcellular Processes',\n                'q-bio.TO': 'Tissues and Organs',\n                'q-fin.CP': 'Computational Finance',\n                'q-fin.EC': 'Economics',\n                'q-fin.GN': 'General Finance',\n                'q-fin.MF': 'Mathematical Finance',\n                'q-fin.PM': 'Portfolio Management',\n                'q-fin.PR': 'Pricing of Securities',\n                'q-fin.RM': 'Risk Management',\n                'q-fin.ST': 'Statistical Finance',\n                'q-fin.TR': 'Trading and Market Microstructure',\n                'quant-ph': 'Quantum Physics',\n                'stat.AP': 'Applications',\n                'stat.CO': 'Computation',\n                'stat.ME': 'Methodology',\n                'stat.ML': 'Machine Learning',\n                'stat.OT': 'Other Statistics',\n                'stat.TH': 'Statistics Theory'}","5a843532":"%%time\n\ntitles = []\nabstracts = []\ncategories = []\n\n# Consider all categories in the `category_map` to be used during training and prediction\npaper_categories = np.array(list(category_map.keys())).flatten()\n\n# Uncomment & edit below line to use specific paper categories to be used during training and prediction\n# paper_categories = [\"astro-ph\", # Astrophysics\n#                     \"cs.CV\", # Computer Vision and Pattern Recognition\n#                     'q-fin.EC'] # Economics\n\nmetadata = get_metadata()\nfor paper in tqdm(metadata):\n    paper_dict = json.loads(paper)\n    category = paper_dict.get('categories')\n    try:\n        try:\n            year = int(paper_dict.get('journal-ref')[-4:])    ### Example Format: \"Phys.Rev.D76:013009,2007\"\n        except:\n            year = int(paper_dict.get('journal-ref')[-5:-1])    ### Example Format: \"Phys.Rev.D76:013009,(2007)\"\n\n        if category in paper_categories and 2010<year<2021:\n            titles.append(paper_dict.get('title'))\n            abstracts.append(paper_dict.get('abstract'))\n            categories.append(paper_dict.get('categories'))\n    except:\n        pass \n\nlen(titles), len(abstracts), len(categories)","d2778209":"%%time\n\npapers = pd.DataFrame({\n    'title': titles,\n    'abstract': abstracts,\n    'categories': categories\n})\n\npapers['abstract'] = papers['abstract'].apply(lambda x: x.replace(\"\\n\",\"\"))\npapers['abstract'] = papers['abstract'].apply(lambda x: x.strip())\npapers['text'] = papers['title'] + '. ' + papers['abstract']\n\npapers['categories'] = papers['categories'].apply(lambda x: tuple(x.split()))\n\n# Choosing paper categories based on their frequency & eliminating categories with very few papers\nshortlisted_categories = papers['categories'].value_counts().reset_index(name=\"count\").query(\"count > 250\")[\"index\"].tolist()\npapers = papers[papers[\"categories\"].isin(shortlisted_categories)].reset_index(drop=True)\n\n# Shuffle DataFrame\npapers = papers.sample(frac=1).reset_index(drop=True)\n\n# Sample roughtly equal number of texts from different paper categories (to reduce class imbalance issues)\npapers = papers.groupby('categories').head(250).reset_index(drop=True)\n\nmulti_label_encoder = MultiLabelBinarizer()\nmulti_label_encoder.fit(papers['categories'])\npapers['categories_encoded'] = papers['categories'].apply(lambda x: multi_label_encoder.transform([x])[0])\n\npapers = papers[[\"text\", \"categories\", \"categories_encoded\"]]\ndel titles, abstracts, categories\npapers","8041620f":"%%time\n\nfrom simpletransformers.classification import MultiLabelClassificationModel\n\nmodel_args = {\n    \"reprocess_input_data\": True,\n    \"overwrite_output_dir\": True,\n    \"save_model_every_epoch\": False, # Model occupies 1.4GB size per epoch (Total Disk Space Available: 4.9GB)\n    \"save_eval_checkpoints\": False,\n    \"max_seq_length\": 512,\n    \"train_batch_size\": 16,\n    \"num_train_epochs\": 4,\n}\n\n# Create a MultiLabelClassificationModel\nmodel = MultiLabelClassificationModel('roberta', \n                                      'roberta-base', \n                                      num_labels=len(shortlisted_categories), \n                                      args=model_args)","e01c9f70":"%%time\n\ntrain_df, eval_df = train_test_split(papers, test_size=0.1, stratify=papers[\"categories\"], random_state=42)\n\n# Train the model\nmodel.train_model(train_df[[\"text\", \"categories_encoded\"]])\n\n# Evaluate the model\nresult, model_outputs, wrong_predictions = model.eval_model(eval_df[[\"text\", \"categories_encoded\"]])\nprint(result)","6339dcf0":"predicted_categories_encoded = list(map(lambda x: np.argmax(x), model_outputs))\neval_gt_labels = eval_df[\"categories_encoded\"].apply(lambda x: np.argmax(x)).tolist()\n\nplt.figure(figsize=(22,18))\ncf_matrix = confusion_matrix(predicted_categories_encoded, eval_gt_labels)\nax = sns.heatmap(cf_matrix\/np.sum(cf_matrix))\nax.set_xlabel('Predicted labels', fontsize=16)\nax.set_ylabel('True labels', fontsize=16)\nax.set_title('Confusion Matrix', fontsize=20)\n\nplt.show()","2a9b08fd":"predicted_categories_argmax = list(map(lambda x: np.argmax(x), model_outputs))\n# https:\/\/stackoverflow.com\/questions\/29831489\/convert-array-of-indices-to-1-hot-encoded-numpy-array\npredicted_categories_encoded = np.eye(len(shortlisted_categories))[predicted_categories_argmax]\npredicted_categories = multi_label_encoder.inverse_transform(predicted_categories_encoded)\n\neval_gt_labels = eval_df[\"categories\"].tolist()\n\nshortlisted_categories_formatted = list(map(lambda x: list(x)[0], shortlisted_categories))\n\nplt.figure(figsize=(22,18))\ncf_matrix = confusion_matrix(predicted_categories, eval_gt_labels, shortlisted_categories_formatted)\nax = sns.heatmap(cf_matrix\/np.sum(cf_matrix))\nax.set_xlabel('Predicted labels', fontsize=18)\nax.set_ylabel('True labels', fontsize=18)\nax.set_title('Confusion Matrix', fontsize=20)\nax.set_xticklabels(shortlisted_categories_formatted, rotation=90, fontsize=16)\nax.set_yticklabels(shortlisted_categories_formatted, rotation=0, fontsize=16)\n\nplt.show()","a7b4c7cf":"for _ in range(50):\n\n    random_idx = random.randint(0, len(eval_df)-1)\n    text = eval_df.iloc[random_idx]['text']\n    true_categories = eval_df.iloc[random_idx]['categories']\n\n    # Predict with trained multilabel classification model\n    predicted_categories_encoded, raw_outputs = model.predict([text])\n    predicted_categories_encoded = np.array(predicted_categories_encoded)\n    predicted_categories_encoded[0][np.argmax(raw_outputs[0])] = 1\n    predicted_categories = multi_label_encoder.inverse_transform(predicted_categories_encoded)[0]\n\n    print(f'True Categories:'.ljust(21,' '), f'{true_categories} - {category_map[true_categories[0]]}\\n')\n    print(f'Predicted Categories: {predicted_categories} - {category_map[predicted_categories[0]]}\\n')\n    print(f'Abstract: {text}\\n\\n')","456a6690":"### #1.4 Plot Heatmap \ud83d\udcc9","092e3966":"## Introduction\n\n#### In this notebook, we use [RoBERTa](https:\/\/arxiv.org\/abs\/1907.11692) Transformer model to perform abstract classification","638bf59f":"### Libraries \ud83d\udcda\u2b07","14abe8e4":"![](https:\/\/storage.googleapis.com\/kaggle-public-downloads\/arXiv.JPG)\n<h1><center> ArXiv Abstract Classification <\/center><\/h1>\n","3b7caed9":"### Acknowledgements\n\n#### This notebook borrows code from:\n* [simpletransformers documentation](https:\/\/github.com\/ThilinaRajapakse\/simpletransformers)\n* Andrew Lukyanenko's [Arxiv metadata exploration](https:\/\/www.kaggle.com\/artgor\/arxiv-metadata-exploration) kernel","675f0f04":"### (Experimental: Heatmap with labels)","fe67ca0c":"### Read JSON Data \ud83d\udcdd","90c6a905":"### #1.3 Model Training & Evaluation \ud83d\ude9e","5420ae69":"### #1.2 Data Pre-processing \u2699\ufe0f","f3b7b9be":"### If you found this kernel helpful, please upvote it \ud83d\ude9e","8794b083":"#### Let's print a sample paper metadata","80ded79b":"### #1.1 Get Paper Metadata \ud83d\udcc7","c6b5787e":"# #1. Abstract Classification\n###    Text classification using **RoBERTa**","44f79841":"### #1.5 Prediction \ud83d\udd2e"}}