{"cell_type":{"c316457e":"code","3c20b54a":"code","d2995acf":"code","897acc22":"code","03e60720":"code","1507c44a":"code","7090f850":"code","de4ab2fc":"code","79be2d3c":"code","b7fa0bd5":"code","67fea89a":"code","869600ec":"code","3e591d49":"code","acdd97b4":"code","c9241935":"code","ae8c14a5":"markdown","2fbec44f":"markdown","8b5cb4b8":"markdown","c5850970":"markdown","800c2c0a":"markdown","3f0cbc63":"markdown","ac2f878b":"markdown","cb6e40d0":"markdown","2d4e2c54":"markdown","74897470":"markdown","88d18eb8":"markdown","68c57e3a":"markdown","691821b6":"markdown"},"source":{"c316457e":"# libraries\nimport random\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport networkx as nx\nimport datetime\nimport fuzzywuzzy\nfrom fuzzywuzzy import process\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport matplotlib.gridspec as gridspec\nimport warnings; warnings.filterwarnings(\"ignore\")\n\n# unhide all rows and columns\npd.set_option('display.max_rows', 50)\npd.set_option('display.max_columns', 50)\npd.set_option('display.width', 1000)\n\n# for character encoding\nimport chardet\n\n# for box-cox transformation\nfrom scipy import stats\n\n# for min_max scaling\nfrom mlxtend.preprocessing import minmax_scaling","3c20b54a":"# load data\nnba = \"..\/input\/nba-player-stats\/2021-2022 NBA Player Stats.csv\"\nplayers = pd.read_csv(nba, delimiter=\";\", encoding=\"latin-1\", index_col=0)\nplayers.head(10)","d2995acf":"players.columns","897acc22":"# get the number of missing data points per column\nmissing_values_count = players.isnull().sum()\n\n# look at the number of missing points in the columns\nmissing_values_count[:]","03e60720":"Efficiency = players.PTS + players.TRB + players.AST + players.STL + players.BLK - (players.FGA - players.FG) - (players.FTA - players.FT) - players.TOV\nplayers.insert(29, \"EFF\", Efficiency)\nplayers.head(10)","1507c44a":"players_C = players[players.Pos == \"C\"]\nplayers_PG = players[players.Pos == \"PG\"]\nplayers_SG = players[players.Pos == \"SG\"]\nplayers_PF = players[players.Pos == \"PF\"]\nplayers_SF = players[players.Pos == \"SF\"]\n\nplayers_PG.head(10)","7090f850":"# Column Correlations Network\nmain_color = \"#16a085\"\nstrong_main_color = \"#ffeb3b\"\ncustom_colors = [strong_main_color, main_color]\n\ndf = players\n\nthresh = 0.3\ndef correlation_network(data, corr_interval=[-0.9, 0.9], data_type=\"Train\", node_color=custom_colors[1]):\n    data = data\n    corr = data.corr()\n    corr = pd.melt(corr.reset_index(), id_vars=\"index\")\n    corr.columns = [\"x\", \"y\", \"value\"]\n    high_corr = corr[((corr[\"value\"] <= corr_interval[0]) | (corr[\"value\"] >= corr_interval[1]))]\n    high_corr = high_corr[(high_corr[\"value\"] != 1)].reset_index(drop=True)\n    sources = list(high_corr.x.unique())\n    targets = list(high_corr.y.unique())\n    plt.figure(figsize=(16, 12))\n    g = nx.from_pandas_edgelist(high_corr, source=\"x\", target=\"y\") \n    layout = nx.spring_layout(g, iterations=50, k=0.6, seed=1337)\n    target_size = [g.degree(t) * 80 for t in targets]\n    nx.draw_networkx_nodes(g, layout, nodelist=targets, node_size=target_size, node_color=node_color)\n    nx.draw_networkx_nodes(g, layout, nodelist=sources, node_color=node_color, node_size=800, alpha=0.5)\n    nx.draw_networkx_edges(g, layout, width=1, edge_color=custom_colors[1])\n    target_dict = dict(zip(targets, targets))\n    nx.draw_networkx_labels(g, layout, labels=target_dict)\n    plt.axis(\"off\")\n    plt.title(f\"Column Correlations Network\", fontsize=25)\n    plt.show()\ncorrelation_network(data=df, corr_interval=[-thresh, thresh], data_type=\"Train\", node_color=custom_colors[0])","de4ab2fc":"# points-position relation\nplt.figure(figsize=(14,6))\nsns.swarmplot(x=players[\"Pos\"],\n              y=players[\"PTS\"])","79be2d3c":"# points mean per position\nprint(\"Points mean C: \" + str(round(players_C.PTS.mean())))\nprint(\"Points mean PG: \" + str(round(players_PG.PTS.mean())))\nprint(\"Points mean SG: \" + str(round(players_SG.PTS.mean())))\nprint(\"Points mean PF: \" + str(round(players_PF.PTS.mean())))\nprint(\"Points mean SF: \" + str(round(players_SF.PTS.mean())))","b7fa0bd5":"# efficiency-position relation\nplt.figure(figsize=(14,6))\nsns.swarmplot(x=players[\"Pos\"],\n              y=players[\"EFF\"])","67fea89a":"# efficiency mean per position\nprint(\"Efficiency mean C: \" + str(round(players_C.EFF.mean())))\nprint(\"Efficiency mean PG: \" + str(round(players_PG.EFF.mean())))\nprint(\"Efficiency mean SG: \" + str(round(players_SG.EFF.mean())))\nprint(\"Efficiency mean PF: \" + str(round(players_PF.EFF.mean())))\nprint(\"Efficiency mean SF: \" + str(round(players_SF.EFF.mean())))","869600ec":"# points-age relation\nplt.figure(figsize=(14,6))\nsns.swarmplot(x=players[\"Age\"],\n              y=players[\"PTS\"])","3e591d49":"print(players.Player[(players.Age>=30) & (players.PTS>=25)])","acdd97b4":"players.Age.describe().round(decimals=1)","c9241935":"Cs = pd.DataFrame(players_C.Player[(players_C.Age<=23)&(players_C.PTS>=10)&(players_C.EFF>=12)]).rename(columns={\"Player\": \"Centers\"}).reset_index(drop=True)\nPGs = pd.DataFrame(players_PG.Player[(players_PG.Age<=23)&(players_PG.PTS>=10)&(players_PG.EFF>=12)]).rename(columns={\"Player\": \"Point Guards\"}).reset_index(drop=True)\nSGs = pd.DataFrame(players_SG.Player[(players_SG.Age<=23)&(players_SG.PTS>=10)&(players_SG.EFF>=12)]).rename(columns={\"Player\": \"Shooting Guards\"}).reset_index(drop=True)\nPFs = pd.DataFrame(players_PF.Player[(players_PF.Age<=23)&(players_PF.PTS>=10)&(players_PF.EFF>=12)]).rename(columns={\"Player\": \"Power Forwards\"}).reset_index(drop=True)\nSFs = pd.DataFrame(players_SF.Player[(players_SF.Age<=23)&(players_SF.PTS>=10)&(players_SF.EFF>=12)]).rename(columns={\"Player\": \"Small Forwards\"}).reset_index(drop=True)\n\nfuture = pd.concat([Cs, PGs, SGs, PFs, SFs], axis=1, join=\"outer\")\nfuture","ae8c14a5":"Youngest player is 19 while the oldest is 41 years old.<br>\nPlayer age has a mean of 25.8 with a standard deviation of 4.2.","2fbec44f":"Great dataset with no missing values! Don't mind giving [the dataset](https:\/\/www.kaggle.com\/vivovinco\/nba-player-stats) an upvote!","8b5cb4b8":"# 5. Exploratory Data Analysis\nVisualize the data to get a better understanding.<br>\nFirst, quick colum correlation check with network diagram.","c5850970":"# 7. Conclusion\nClassification limits are:\n* Age <= 23\n* Points per game >= 10\n* Efficiency per game >= 12\n\nSo many guards with bright future: LaMelo Ball, Trae Young, Luka Doncic etc.<br>\nLooks like the dominance of the guards will continue...","800c2c0a":"Check for missing values.","3f0cbc63":"# 2. Data Loading\nThe following lines prevent some errors while loading data, delete them from the code and check for yourselves:\n* encoding=\"latin-1\"\n* delimiter=\";\"\n\nDataset is ranked alphabetically so I indexed the \"Rk\" column.","ac2f878b":"Mean points contribution of each position is almost equal.<br>\nThe importance of each position can be observed when position based efficiency calculated.<br>\nMean efficiencies differ by more than 10% between positions.","cb6e40d0":"There are only four players older than 30 with +25 points. These are:","2d4e2c54":"# 3. Adding Information\nCalculate efficiency and add as a column.<br>\nEfficiency (EFF) = (PTS + REB + AST + STL + BLK \u2013 Missed FG \u2013 Missed FT \u2013 TOV)","74897470":"# 3. Data Cleaning\nHave a look at the column names. They usually become useful later on.","88d18eb8":"# 6. Finding Future NBA Superstars\nGained a lot of data insight from above work.<br>\nLet's classify and make a list of future superstars.<br>\nI'll use mean age, points and efficiency values to list future NBA superstars.","68c57e3a":"# 4. Data Splitting\nSplit the data into position categories of C, PG, SG, PF and SF.","691821b6":"# 1. Introduction\nI was looking at [NBA stats](https:\/\/www.nba.com\/stats\/players\/) then realized that there are so many players I have never heard of.<br>\nSo, I decided to look for future NBA superstars based on their efficiency, points and position info.<br>\n**If you're reading this, please upvote.**"}}