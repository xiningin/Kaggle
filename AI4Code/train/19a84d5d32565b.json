{"cell_type":{"69679815":"code","80c81c92":"code","761a1b21":"code","f3b57acc":"code","a589211d":"code","b69762db":"code","46b8bf63":"markdown"},"source":{"69679815":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb","80c81c92":"path = '..\/input\/tabular-playground-series-jan-2021\/'\nseed = 42\nsplits = 5\n","761a1b21":"train = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsample_submission = pd.read_csv(path + 'sample_submission.csv')","f3b57acc":"def model_lgb():\n    return lgb.LGBMRegressor(boosting_type= 'gbdt',\n                         num_leaves=31,  \n                         max_depth= 11,  \n                         learning_rate=0.1, \n                         n_estimators=750,\n                         subsample_for_bin=200000, \n                         objective=None, \n                         class_weight=None, \n                         min_split_gain=0.0, \n                         min_child_weight=0.001, \n                         min_child_samples=20, \n                         subsample=1.0, \n                         subsample_freq=0, \n                         colsample_bytree=1.0, \n                         reg_alpha=0.0, \n                         reg_lambda=0.0, \n                         random_state=None, \n                         n_jobs=- 1, \n                         silent=True\n                        )\n","a589211d":"mean_error = 0\nall_predict = 0\ncv = KFold(n_splits=splits, random_state=seed, shuffle=False)\nfor train_index, test_index in cv.split(train):  \n    x_train = train.loc[train_index, ::] \n    x_test = train.loc[test_index, ::]\n    y_train, y_test  = x_train.target, x_test.target\n    x_train = x_train.drop(['id', 'target'], axis = 1)\n    x_test = x_test.drop(['id', 'target'], axis = 1)\n    ### Model\n    model = model_lgb().fit(x_train, y_train)\n    error = mean_squared_error(y_test, model.predict(x_test),squared=False)\n    print(error, \"\\n\")\n    mean_error += error\n    all_predict += model.predict(test.drop(['id'], axis=1))\n    \nprint('mean error', mean_error\/splits)\npredict = all_predict\/splits","b69762db":"sample_submission['target'] = predict\nsample_submission.to_csv('submission.csv', index=False)","46b8bf63":"### in this work I use 5 cross validation and lgb"}}