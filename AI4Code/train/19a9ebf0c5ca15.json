{"cell_type":{"44f458bb":"code","a5929db6":"code","a9c7644d":"code","c73c4d2b":"code","4c334026":"code","f45837c3":"code","729b9417":"code","ca07276f":"code","6e2efadd":"code","82fc66d4":"code","b86bd7f4":"code","b7548d78":"code","450faa74":"code","8bd27c38":"code","faba73d7":"code","f2964dc4":"code","3ba4bc6a":"code","2b8f07c7":"markdown","8471da73":"markdown","746144e1":"markdown","88058983":"markdown","a672e255":"markdown","90010a6c":"markdown","cb285ca5":"markdown","4a29f57f":"markdown","6059ded9":"markdown","cde7ce1f":"markdown","82fd00fe":"markdown"},"source":{"44f458bb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt","a5929db6":"df = pd.read_csv('..\/input\/headout\/Headout.csv', low_memory = False)\n\n# Converting the `created_at` column to Date-Time format\ndf['created_at'] = pd.to_datetime(df['created_at'])\n\ndf.info()","a9c7644d":"df_ret = df.drop(axis=1, columns=['country', 'city', 'category_name', 'product_id', 'product_name', \n    'experience_date', 'experience_time', 'lead_time_hours', 'lead_time_days', 'number_of_guests',\n    'user_origin_country', 'device', 'is_logged_in', 'session_traffic_source',  'session_traffic_medium',\n    'session_campaign_name', 'session_traffic_origin_country'\n])\n\ndf_ret.info()","c73c4d2b":"def get_month(x): return dt.datetime(x.year, x.month, 1)\n\n# Create transaction_date column based on month and store in TransactionMonth\ndf_ret['TransactionMonth'] = df_ret['created_at'].apply(get_month)\n# Grouping by user_id and select the Initial Month value\ngrouping = df_ret.groupby('user_id')['TransactionMonth'] \n# Assigning a minimum InvoiceMonth value to the dataset\ndf_ret['CohortMonth'] = grouping.transform('min')\n\ndf_ret.head()","4c334026":"def get_date_int(df, column):\n    year = df[column].dt.year\n    month = df[column].dt.month\n    day = df[column].dt.day\n    return year, month, day\n# Getting the integers for date parts from the `TransactionMonth` column\ntranscation_year, transaction_month, _ = get_date_int(df_ret, 'TransactionMonth')\n# Getting the integers for date parts from the `CohortMonth` column\ncohort_year, cohort_month, _ = get_date_int(df_ret, 'CohortMonth')","f45837c3":"#  Get the  difference in years\nyears_diff = transcation_year - cohort_year\n# Calculate difference in months\nmonths_diff = transaction_month - cohort_month\n\"\"\" Extract the difference in months from all previous values\n \"+1\" in added at the end so that first month is marked as 1 instead of 0 for easier interpretation. \n \"\"\"\ndf_ret['CohortIndex'] = years_diff * 12 + months_diff  + 1 \ndf_ret.head(5)","729b9417":"# Reference: pandas.DataFrame.pivot\n# https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.pivot.html\n\n# Counting monthly active user from each chort\ngrouping = df_ret.groupby(['CohortMonth', 'CohortIndex'])\n# Counting number of unique customer ID's falling in each group of CohortMonth and CohortIndex\ncohort_data = grouping['booking_id'].apply(pd.Series.nunique)\ncohort_data = cohort_data.reset_index()\n # Assigning column names to the dataframe created above\ncohort_counts = cohort_data.pivot(index='CohortMonth',\n                                 columns ='CohortIndex',\n                                 values = 'booking_id')\n\ncohort_data.head()","ca07276f":"cohort_counts.head()","6e2efadd":"cohort_sizes = cohort_counts.iloc[ : , 0]\nretention = cohort_counts.divide(cohort_sizes, axis=0)\n\n# Coverting the retention rate into percentage and Rounding off.\nretention = retention.round(3)*100\n\nretention.head()","82fc66d4":"# Finding the retention rate for the first 5 months only\nretention_3 = retention.iloc[ : ,1:4]\nretention_3.index = retention_3.index.strftime('%Y-%m')\nretention_3 = retention_3.rename(columns={2: \"M1 Retention\", 3: \"M2 Retention\", 4: \"M3 Retention\"})\nretention_3.head()","b86bd7f4":"retention_3.describe()","b7548d78":"plt.figure(figsize=(14, 12))\nplt.title('Retention Rate', fontsize = 14)\nsns.heatmap(retention_3, annot=True, center=6, vmin=0.0, vmax=15, cmap=\"YlGnBu\", fmt='g')\nplt.ylabel('Cohort Month')\nplt.xlabel('Cohort Index')\nplt.yticks(rotation='360')\nplt.show()","450faa74":"plt.figure(figsize = (25, 15))\nplt.subplot(311)\nplt.title('M1 Retention', fontsize = 14)\nplt.plot(retention_3['M1 Retention'])\nplt.subplot(312)\nplt.title('M2 Retention', fontsize = 14)\nplt.plot(retention_3['M2 Retention'])\nplt.subplot(313)\nplt.title('M3 Retention', fontsize = 14)\nplt.plot(retention_3['M3 Retention'])","8bd27c38":"# Creating a function for finding the number of repeat bookings per trip\n# For every user, it returns a list, and in each value in the list denotes the number of repeat\n# bookings for a particular trip for a particular user\ndef fun(x):\n    # Case when the user has a single booking\n    if len(x) <= 1: return 0\n    \n    # Case when the user has more than 1 booking\n    x = x.sort_values()\n    # Denotes the number of trips and total number of repeated bookings across trips\n    num_trips, total_rep_book = 0, []\n    # Denotes the starting date for every user\n    start_date = x.iloc[0]\n    # Denotes the number of repeated bookings for a given trip\n    rep_book = 0\n    # Iterate over the bookings of a user\n    for dte in x.iloc[1:]:\n        # Case when there are 2 bookings within 7 days\n        if (dte - start_date).days <= 7: rep_book += 1\n        # Case when the bookings differ with greater than 7 days\n        else:\n            if rep_book > 0: total_rep_book.append(rep_book); num_trips += 1\n            rep_book = 0\n            start_date = dte\n    if rep_book > 0: total_rep_book.append(rep_book); num_trips += 1   \n    return total_rep_book\n\n# Grouping By the User ID, and applying the function\ngrouping = df_ret.groupby('user_id')\nnum = grouping['created_at'].apply(fun)\n\n# Creating a Dictionary for storing the different stats about repeated bookings\ncols = {\n    'min_rep': [],\n    'max_rep': [],\n    'avg_rep': [],\n    'trips_rep': []\n}\n\nfor i in range(len(num)):\n    # Case when there are no repeated bookings of the user\n    if(num[i] == 0 or len(num[i]) == 0):\n        cols['min_rep'].append(0)\n        cols['max_rep'].append(0)\n        cols['avg_rep'].append(0)\n        cols['trips_rep'].append(0)\n    # Case when there is at least 1 repeated booking of the user\n    else:\n        cols['min_rep'].append(min(num[i]))\n        cols['max_rep'].append(max(num[i]))\n        cols['avg_rep'].append(sum(num[i]) \/ len(num[i]) )\n        cols['trips_rep'].append(len(num[i]))","faba73d7":"# Creating a new DataFrame\nrep = pd.DataFrame()\nrep['user_id'] = grouping['user_id']\n\n# Adding the stats of Repeated Bookings\nrep.insert(1, 'min_rep', cols['min_rep'])\nrep.insert(2, 'max_rep', cols['max_rep'])\nrep.insert(3, 'avg_rep', cols['avg_rep'])\nrep.insert(4, 'trips_rep', cols['trips_rep'])\n\nrep.head()","f2964dc4":"# Summaring the information of repeated bookings\nrep.describe()","3ba4bc6a":"# Number of Users\nnum_users = rep.shape[0]\n# Number of Users with repeated bookings\nnum_rep = np.count_nonzero(rep['trips_rep'])\n\nprint(num_users, num_rep)","2b8f07c7":"### 3.1.2. Calculating time offset in Month as Cohort Index","8471da73":"# 2. Loading & Basic Pre-processing","746144e1":"# Take Home Assignment | Headout\n- This is my kernel for the Headout, Take Home Assignment\n\n## References\n- [Cohort Analysis Using Python For Beginners- A Hands-On Tutorial](https:\/\/www.analyticsvidhya.com\/blog\/2021\/06\/cohort-analysis-using-python-for-beginners-a-hands-on-tutorial\/)\n- [What retention metric are you measuring?](https:\/\/growthbug.com\/what-retention-metric-you-should-be-measuring-1e5330df0088)","88058983":"### 3.1.3. Calculate Retention Rate","a672e255":"### 3.2.3. Inference\n- Based on the above analysis, let's make some observations about the Number of Repeated Bookings. In the above table, we can see the statistics about the Mean (Average), Minimum and Maximum values of the Number of Repeated bookings, for the given data.\n- Here, Mean, Min and Max number of repeated bookings are calculated user-wise, and the above statistics are a form of aggregation on all the users.\n- Additionally, out of 290728 unique users, only 44858 of them have done repeated bookings. The rest of the users haven't made even a single trip, in which they have made repeated bookings.\n- If the organization expands its portfolio to include different attraction and tourist sites at the same places, then it could improve these metrics.","90010a6c":"# 3. Analysing the Dataset\n- Monthly retention cohort by date of first booking with emphasis on the first 3 months\n- Number of repeat bookings per trip (assuming trip duration of 7 days)\n\n## 3.1. Monthly Retention Cohort\n### 3.1.1. Assigned the cohorts and calculated the monthly offset","cb285ca5":"## 3.2. Number of Repeat Bookings Per Trip\n- Here, if a user has made say 4 bookings over a course of 7 days (a trip), the number of repeated bookings has been set to 3 for this particular trip, since at least 1 booking must be made in order to consider it a trip.\n- With a simple change in the initial value of the variable `rep_book` from 0 to 1, we can change this number to 4.\n\n### 3.2.1. Finding the number of repeat bookings","4a29f57f":"### 3.2.2. Finding the Statistics","6059ded9":"### 3.1.5. Inference\n- Based on the above analysis, let's make some observations about the M1, M2 and M3 Retention Rates. In the below table, we can see the Mean (Average), Minimum and Maximum values of the M1, M2 and M3 Retention Rates, for the given data.\n\n|        |M1 Retention|M2 Retention|M3 Retention|\n|--------|------------|------------|------------|\n|  Mean  |3.21|1.19|0.97|\n|  Min  |0.80|0.20|0.00|\n|  Max  |12.50|3.90|2.20|\n\n- Additionally, if we take a look at the heatmap, we will observe, that there are either no values or 0 retention rates for the months of **March, April and May of 2020**. This is because at this team, the pandemic was at it's peak, and hence, all the tourist attractions were restricted from access.\n- After these months, we can see a higher M3 retention rate in general, i.e., the organization moved to a higher long-term retention.","cde7ce1f":"# 1. Importing & Installing Packages","82fd00fe":"### 3.1.4. Visualizing the Retention Rate"}}