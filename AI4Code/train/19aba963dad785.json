{"cell_type":{"7f95e3e5":"code","8b3278b8":"code","ddef4f7b":"code","4c187de1":"code","f0ff7bce":"code","f419ceb0":"code","a6f87147":"code","3425fd9c":"code","2949ed06":"code","a846d8df":"code","7a0c2fc1":"code","c4c17f18":"code","1846d77f":"code","38239479":"code","ded8eddc":"code","fc00a944":"code","2583a668":"code","83000296":"code","2bb43840":"code","dc4b6416":"code","535fd6f9":"code","d1ac7fe6":"markdown","072c837e":"markdown","8e7a3e7f":"markdown","451ee3fd":"markdown","3644affe":"markdown"},"source":{"7f95e3e5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\nimport warnings\n\ndef fxn():\n    warnings.warn(\"deprecated\", DeprecationWarning)\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    fxn()","8b3278b8":"# download data\ndata = pd.read_csv(\"..\/input\/usa-cers-dataset\/USA_cars_datasets.csv\")\ndata.drop('Unnamed: 0', axis=1, inplace=True)\ndata_acc = pd.read_csv('..\/input\/us-accidents\/US_Accidents_Dec19.csv')","ddef4f7b":"data.head()","4c187de1":"data = data[data['country']==' usa']","f0ff7bce":"states = {\n        'AK': 'alaska',\n        'AL': 'alabama',\n        'AR': 'arkansas',\n        'AS': 'american samoa',\n        'AZ': 'arizona',\n        'CA': 'california',\n        'CO': 'colorado',\n        'CT': 'connecticut',\n        'DC': 'district of columbia',\n        'DE': 'delaware',\n        'FL': 'florida',\n        'GA': 'georgia',\n        'GU': 'guam',\n        'HI': 'hawaii',\n        'IA': 'iowa',\n        'ID': 'idaho',\n        'IL': 'illinois',\n        'IN': 'indiana',\n        'KS': 'kansas',\n        'KY': 'kentucky',\n        'LA': 'louisiana',\n        'MA': 'massachusetts',\n        'MD': 'maryland',\n        'ME': 'maine',\n        'MI': 'michigan',\n        'MN': 'minnesota',\n        'MO': 'missouri',\n        'MP': 'northern mariana islands',\n        'MS': 'mississippi',\n        'MT': 'montana',\n        'NA': 'national',\n        'NC': 'north carolina',\n        'ND': 'north dakota',\n        'NE': 'nebraska',\n        'NH': 'new hampshire',\n        'NJ': 'new jersey',\n        'NM': 'new mexico',\n        'NV': 'nevada',\n        'NY': 'new york',\n        'OH': 'ohio',\n        'OK': 'oklahoma',\n        'OR': 'oregon',\n        'PA': 'pennsylvania',\n        'PR': 'puerto rico',\n        'RI': 'rhode island',\n        'SC': 'south carolina',\n        'SD': 'south dakota',\n        'TN': 'tennessee',\n        'TX': 'texas',\n        'UT': 'utah',\n        'VA': 'virginia',\n        'VI': 'virgin islands',\n        'VT': 'vermont',\n        'WA': 'washington',\n        'WI': 'wisconsin',\n        'WV': 'west virginia',\n        'WY': 'wyoming'\n}\ninv_states = {v: k for k, v in states.items()}","f419ceb0":"data['state'] = data['state'].apply(lambda x: inv_states[x])\n\nacc_count = pd.DataFrame(data_acc['State'].value_counts())\nacc_count.columns = ['acc_counts']","a6f87147":"data = data.merge(acc_count, how='inner', right_index=True, left_on='state')\ncorr_data = data[['state', 'acc_counts']].merge(data['state'].value_counts(), how='inner', right_index=True, left_on='state')\ncorr_data[['acc_counts','state_y']].corr()","3425fd9c":"plt.scatter(corr_data['acc_counts'], corr_data['state_y']);\ncorr_value = 'corr = ' + str(round(corr_data['acc_counts'].corr(corr_data['state_y']), 2))\nplt.text(300000, 5, corr_value, fontsize=12);","2949ed06":"data_cars = pd.read_csv('..\/input\/craigslist-carstrucks-data\/vehicles.csv')\n\n# some filters\ndata_cars = data_cars[data_cars['price']!=0]\nprint(data_cars.shape)","a846d8df":"data_cars.head()","7a0c2fc1":"data_cars['state'] = data_cars['state'].apply(lambda x: x.upper())\ncorr_data_2 = acc_count.merge(data_cars['state'].value_counts(), how='inner', right_index=True, left_index=True)\n\nplt.scatter(corr_data_2['acc_counts'], corr_data_2['state']);\ncorr_value = 'corr = ' + str(round(corr_data_2['acc_counts'].corr(corr_data_2['state']), 2))\nplt.text(300000, 5, corr_value, fontsize=12);","c4c17f18":"state_count_acc = pd.value_counts(data_acc['State'])\n\nfig = go.Figure(data=go.Choropleth(\n    locations=state_count_acc.index,\n    z = state_count_acc.values.astype(float),\n    locationmode = 'USA-states',\n    colorscale = 'Reds',\n    colorbar_title = \"Count Accidents\",\n))\n\nfig.update_layout(\n    title_text = 'US Traffic Accident Dataset by State',\n    geo_scope='usa',\n)\n\nfig.show()","1846d77f":"data_sever = data_acc.sample(n=10000)\n\nfig = go.Figure(data=go.Scattergeo(\n        locationmode = 'USA-states',\n        lon = data_sever['Start_Lng'],\n        lat = data_sever['Start_Lat'],\n        text = data_sever['City'],\n        mode = 'markers',\n        marker = dict(\n            size = 8,\n            opacity = 0.8,\n            reversescale = True,\n            autocolorscale = False,\n            symbol = 'circle',\n            line = dict(\n                width=1,\n                color='rgba(102, 102, 102)'\n            ),\n            colorscale = 'Reds',\n            cmin = data_sever['Severity'].max(),\n        color = data_sever['Severity'],\n        cmax = 1,\n            colorbar_title=\"Severity\"\n        )))\n\nfig.update_layout(\n        title = 'Severity of accidents',\n        geo = dict(\n            scope='usa',\n            projection_type='albers usa',\n            showland = True,\n            landcolor = \"rgb(250, 250, 250)\",\n            subunitcolor = \"rgb(217, 217, 217)\",\n            countrycolor = \"rgb(217, 217, 217)\",\n            countrywidth = 0.7,\n            subunitwidth = 0.7\n        ),\n    )\nfig.show()","38239479":"print('most dangerous -', acc_count.iloc[:5].index.tolist())\nprint('most safest -', acc_count.iloc[-5:].index.tolist())\n\ndan = data_cars[data_cars['state'].isin(acc_count.iloc[:5].index.tolist())]\nsaf = data_cars[data_cars['state'].isin(acc_count.iloc[-5:].index.tolist())]","ded8eddc":"fig = go.Figure()\nfig.add_trace(go.Histogram(\n    x=dan[dan['price']<1e5]['price'].values,\n    histnorm='percent',\n    xbins=dict( \n        start=0.0,\n        end=80000,\n        size=1000\n    ),\n    name='dangerous'\n))\nfig.add_trace(go.Histogram(\n    x=saf[saf['price']<1e5]['price'].values,\n    histnorm='percent',\n    name='safety'\n))\n\nfig.update_layout(\n    title=\"Price distribution\",\n    xaxis_title=\"Price\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)","fc00a944":"fig = go.Figure()\nfig.add_trace(go.Histogram(\n    x=dan[(dan['odometer']<0.5e6) & (dan['odometer']!=0)]['odometer'].values,\n    histnorm='percent',\n    xbins=dict( \n        start=0.0,\n        end=4e5,\n        size=5000\n    ),\n    name='dangerous'\n))\nfig.add_trace(go.Histogram(\n    x=saf[(saf['odometer']<0.5e6) & (saf['odometer']!=0)]['odometer'].values,\n    histnorm='percent',\n    name='safety'\n))\n\nfig.update_layout(\n    title=\"Odometer distribution\",\n    xaxis_title=\"Odometer\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)","2583a668":"fig = go.Figure(go.Histogram(\n    y=dan['manufacturer'],\n    name='dangerous',\n    histnorm='percent',\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    y=saf['manufacturer'],\n    name='safety', \n    histnorm='percent',\n    bingroup=1))\n\nfig.update_layout(\n    title=\"Manufacturer distribution\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","83000296":"fig = go.Figure(go.Histogram(\n    y=dan['model'],\n    name='dangerous',\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    y=saf['model'],\n    name='safety', \n    bingroup=1))\n\nfig.update_layout(\n    title=\"Models distribution\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","2bb43840":"fig = go.Figure(go.Histogram(\n    y=dan['condition'],\n    name='dangerous',\n    histnorm='percent',\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    y=saf['condition'],\n    name='safety', \n    histnorm='percent',\n    bingroup=1))\n\nfig.update_layout(\n    title=\"Condition distribution\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","dc4b6416":"fig = go.Figure(go.Histogram(\n    y=dan['type'],\n    name='dangerous',\n    histnorm='percent',\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    y=saf['type'],\n    name='safety', \n    histnorm='percent',\n    bingroup=1))\n\nfig.update_layout(\n    title=\"Type distribution\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","535fd6f9":"fig = go.Figure(go.Histogram(\n    y=dan['fuel'],\n    name='dangerous',\n    histnorm='percent',\n    bingroup=1))\n\nfig.add_trace(go.Histogram(\n    y=saf['fuel'],\n    name='safety', \n    histnorm='percent',\n    bingroup=1))\n\nfig.update_layout(\n    title=\"Fuel distribution\",\n    font=dict(\n        family=\"Courier New, monospace\",\n        size=13,\n        color=\"#7f7f7f\"\n    )\n)\n\nfig.show()","d1ac7fe6":"## Cars accidents & sales\nIn this kernel I want to compare types of cars depending on the number of accidents in different states.","072c837e":"Then, I will choose 5 most dangerous states (by accidents) and 5 safest states. I want to compare these states by cars sales.","8e7a3e7f":"Firstly, you can see that 99% of cars are from USA, so we can drop cars from Canada.","451ee3fd":"Let's use bigger dataset:","3644affe":"Let's change state names to it's abbreviations for best merging."}}