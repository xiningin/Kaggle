{"cell_type":{"b3df52ad":"code","a8495331":"code","778362f6":"code","ce8a1f11":"code","1dac7fcd":"code","ca038b59":"code","87a0ec62":"code","e2a48ad8":"code","cf0ca8f5":"code","13b88f2f":"code","8acd9791":"code","28e7c151":"code","e36afc2a":"code","f4c9ed18":"code","f60b2385":"code","46a20f15":"code","0fa84827":"code","23fcc5fd":"code","c94026a4":"code","e8724095":"code","2e6bd28d":"code","d4068c38":"code","be3c9050":"code","56267135":"code","f44e112c":"code","0fd3f66f":"code","4a5fff95":"code","8c9d81db":"code","78cb9208":"code","9e817880":"markdown","b1368ffe":"markdown","e0445d8d":"markdown","454b5ea4":"markdown","f9638259":"markdown"},"source":{"b3df52ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8495331":"df = pd.read_csv('\/kaggle\/input\/predict-movie-success-rate\/movie_success_rate.csv')","778362f6":"df.shape","ce8a1f11":"df.head()","1dac7fcd":"df.columns","ca038b59":"df['Genre'].value_counts()","87a0ec62":"df['Director'].value_counts()","e2a48ad8":"df['Actors'].value_counts()","cf0ca8f5":"import seaborn as sns\nsns.heatmap(df.isnull())","13b88f2f":"df = df.fillna(df.median())","8acd9791":"df.columns","28e7c151":"x = df[['Year',\n       'Runtime (Minutes)', 'Rating', 'Votes', 'Revenue (Millions)',\n       'Metascore', 'Action', 'Adventure', 'Aniimation', 'Biography', 'Comedy',\n       'Crime', 'Drama', 'Family', 'Fantasy', 'History', 'Horror', 'Music',\n       'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Sport', 'Thriller', 'War',\n       'Western']]\ny = df['Success']\n","e36afc2a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.1,stratify=y)","f4c9ed18":"from sklearn.linear_model import LogisticRegression\nlog = LogisticRegression()\nlog.fit(x_train,y_train)","f60b2385":"log.score(x_test,y_test)","46a20f15":"from sklearn.metrics import confusion_matrix\nclf = confusion_matrix(y_test,log.predict(x_test))","0fa84827":"sns.heatmap(clf,annot=True)","23fcc5fd":"#normalising all columns\nx_train_opt = x_train.copy()\nx_test_opt = x_test.copy()","c94026a4":"from sklearn.preprocessing import StandardScaler\nx_train_opt = StandardScaler().fit_transform(x_train_opt)\nx_test_opt = StandardScaler().fit_transform(x_test_opt)","e8724095":"#fitting again in Logistic Regression","2e6bd28d":"log.fit(x_train_opt,y_train)","d4068c38":"log.score(x_test_opt,y_test)","be3c9050":"from sklearn.neighbors import KNeighborsClassifier\nkn = KNeighborsClassifier(n_neighbors=40)\nkn.fit(x_train,y_train)","56267135":"\nkn.score(x_test,y_test)","f44e112c":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier()\ntree.fit(x_train,y_train)\ntree.score(x_test,y_test)","0fd3f66f":"tree.score(x_train,y_train)","4a5fff95":"from sklearn.metrics import confusion_matrix\nclf = confusion_matrix(y_test,tree.predict(x_test))","8c9d81db":"clf","78cb9208":"sns.heatmap(clf,annot=True)","9e817880":"# LOGISTIC REGRESSION","b1368ffe":"# SOME OPTIMAZTIONS","e0445d8d":"# DECISION TREE","454b5ea4":"# KNN","f9638259":"Model Performance went down so we would not pursuit this more"}}