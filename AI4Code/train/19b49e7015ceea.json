{"cell_type":{"d48a7fd2":"code","41a01e94":"code","ea6f51c6":"code","81e742b3":"code","a5ffdcf5":"code","fd0563c2":"code","5e7ce302":"code","c056aa18":"code","832f545f":"code","63284558":"code","3d6c5f7b":"code","3b5603b9":"markdown","5f53f63b":"markdown","f3bf9fdf":"markdown","b85cf3e5":"markdown","d1d8b6d6":"markdown","95fb302a":"markdown","19554c59":"markdown","07811b8f":"markdown","808a093b":"markdown","f1b294d1":"markdown","11f646fe":"markdown","895704df":"markdown","89c45eac":"markdown"},"source":{"d48a7fd2":"import numpy as np\nimport pandas as pd\n\nwith open('..\/input\/hashcode-drone-delivery\/busy_day.in') as file:\n    line_list = file.read().splitlines()","41a01e94":"weights = line_list[2].split()\nproducts_df = pd.DataFrame({'weight': weights})\n\nwh_count = int(line_list[3])\nwh_endline = (wh_count*2)+4\n\nwh_invs = line_list[5:wh_endline+1:2]\nfor i, wh_inv in enumerate(wh_invs):\n    products_df[f'wh{i}_inv'] = wh_inv.split()\n\nproducts_df = products_df.astype(int)\nproducts_df","ea6f51c6":"wh_locs = line_list[4:wh_endline:2]\nwh_rows = [wl.split()[0] for wl in wh_locs]\nwh_cols = [wl.split()[1] for wl in wh_locs]\n\nwarehouse_df = pd.DataFrame({'wh_row': wh_rows, 'wh_col': wh_cols}).astype(np.uint16)\nwarehouse_df","81e742b3":"order_locs = line_list[wh_endline+1::3]\no_rows = [ol.split()[0] for ol in order_locs]\no_cols = [ol.split()[1] for ol in order_locs]\n\norders_df = pd.DataFrame({'row': o_rows, 'col': o_cols})\n\norders_df[orders_df.duplicated(keep=False)].sort_values('row')\n\norders_df['product_count'] = line_list[wh_endline+2::3]\n\norder_array = np.zeros((len(orders_df), len(products_df)), dtype=np.uint16)\norders = line_list[wh_endline+3::3]\nfor i,ord in enumerate(orders):\n    products = [int(prod) for prod in ord.split()]\n    order_array[i, products] = 1\n\ndf = pd.DataFrame(data=order_array, columns=['p_'+ str(i) for i in range(400)], \n                    index=orders_df.index)\n\norders_df = orders_df.astype(np.uint16).join(df)\norders_df\n","a5ffdcf5":"chart_opts = {'width': 500,\n              'xlabel': \"Total Demand\",\n              'ylabel': \"Count of Products\"}\n\nimport holoviews as hv\nfrom holoviews import dim, opts\nhv.extension('bokeh')\n\ncounts = orders_df.product_count \\\n                  .value_counts() \\\n                  .sort_index() \\\n                  .reset_index()\nhv.Bars(counts).opts(**chart_opts)","fd0563c2":"supply = products_df.drop(columns='weight').sum(axis=1)\nsupply\n\ndemand = orders_df.loc[:, orders_df.columns.str.contains(\"p_\")].sum()\ndemand\n\nsurplus = supply.to_numpy() - demand.to_numpy()\nprint(np.amin(surplus))\n\n\nfreqs, edges = np.histogram(surplus, 20)\nhv.Histogram((edges, freqs)).opts(width=600, xlabel=\"surplus\")\n","5e7ce302":"chart_opts = {'width': 500,\n              'xlabel': \"Warehouse\",\n              'ylabel': \"Total Inventory\",\n              'yticks': list(range(0,1801,200))}\n\n\ntotal_prods = products_df.loc[:, products_df.columns.str.contains(\"wh\")].sum()\nhv.Bars(total_prods.value_counts().index).opts(**chart_opts)","c056aa18":"hv.Distribution(products_df.weight).opts(width=500)","832f545f":"chart_opts = dict(width=600, height=400, alpha=0.7)\n\ncustomers = hv.Points(orders_df, kdims = ['col', 'row']).opts(**chart_opts)\nwarehouses = hv.Points(warehouse_df, kdims = ['wh_col', 'wh_row']).opts(size=8, **chart_opts)\ncustomers * warehouses","63284558":"inventory_array = np.zeros((400, 600, 400), dtype=np.uint16)\n\nwh = warehouse_df.to_numpy()\ninv = products_df.drop(columns='weight').T.to_numpy()\ninventory_array[wh[:, 0], wh[:, 1]] = inv\n\ninventory_array.sum()","3d6c5f7b":"print(inventory_array[182,193,1], \n    np.array_equal(inventory_array.sum(axis=(0, 1)), inv.sum(axis=0)))","3b5603b9":"# EDA\n\nWe might as well do basic data exploration with these DFs.\n\n### What is the demand for products? How does it compare to the inventory?\n\nIt looks like the demand per product is pretty well distributed with most products falling in sort of a 2 to 10 range.\n","5f53f63b":"Here is a comparison of supply and demand by product. It's hard to see 400 products on one chart so I'll see if there are any cases where demand exceeds supply. It looks like we're good as the surplus values are all positive.","f3bf9fdf":"<img src='https:\/\/cnet1.cbsistatic.com\/img\/AvDDpG5BMtTqvvLNZWg3Y54Saq0=\/2020\/01\/08\/5e97dfbc-c4ab-456c-a80d-88c86276d945\/flipdish-manna-drone.jpg' width='500'>","b85cf3e5":"OK, just a couple more things to look at. Here is the distribution of weights for products.","d1d8b6d6":"This notebook takes the input text file and transforms it into three dataframes, one for products, one for warehouses, and one for orders. Then it combines two of the dataframes to make a 3-d array suitable for optimization work.","95fb302a":"It checks out. Good luck with the challenge!","19554c59":"## Orders\n\nThis dataframe contains information on orders to include the location for delivery and the specific items in the order.","07811b8f":"And finally we have locations. Here is the grid of warehouses and orders. The desity varies quite a bit throughout the grid,","808a093b":"It's pretty easy to go back and forth from the dataframes. As a check, let's see how many items of product 1 are at warehouse 5. It should be 16. We can also make sure the total number of each product from products_df is the same as what's in the 3-d array.","f1b294d1":"# Data extraction\n\n## Products\n\nThe first data frame describes the 400 products. It contains product weights and the inventories at each of the 10 warehouses.","11f646fe":"# N-dimensional arrays\n\nDataframes work better for EDA than they do for optimization problems like this one. That's where multi-dimensional arrays can be really useful. Here's a 3-d array that maps product quantities to where they are located on the grid at the start (warehouse locations). ","895704df":"\n## Warehouses\n\nThis is a simple dataframe with warehouse locations. You could change this to also include products so it matches the Orders dataframe below.","89c45eac":"Next let's see what the warehouses have in stock. Really this could be done a better way in more detail but here it is at a high level. The range doesn't seem extremely diverse, but there is one warehouse with a bit fewer than the rest.\n"}}