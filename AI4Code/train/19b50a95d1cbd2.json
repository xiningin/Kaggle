{"cell_type":{"00547195":"code","8342b535":"code","66bf30f9":"code","19c46c1d":"code","a1fc3da5":"code","67514b19":"code","103d2dc3":"code","ea8c3417":"markdown","8d0d5003":"markdown","a82bb7a3":"markdown","41aed80c":"markdown","14c583c7":"markdown","34e196c3":"markdown","214590b2":"markdown"},"source":{"00547195":"import numpy as np","8342b535":"equation = np.poly1d([1, 2, 3])\nprint(np.poly1d(equation))","66bf30f9":"print(equation.c, equation.coef, equation.coefficients) # coefficients\nprint(equation.o, equation.order) # degree","19c46c1d":"equation(5)","a1fc3da5":"equation = np.polynomial.Polynomial([1, 2, 3])\nequation","67514b19":"print(equation.coef)       # coefiecnt\nprint(equation.degree())   # degree","103d2dc3":"equation(5)","ea8c3417":"A one-dimensional polynomial class.","8d0d5003":"# np.polynomials","a82bb7a3":"## x^2 + 2x + 3","41aed80c":"This forms part of the old polynomial API. Since version 1.4, the new polynomial API defined in numpy.polynomial is preferred. A summary of the differences can be found in the transition guide.","14c583c7":"Polynomials in NumPy can be created, manipulated, and even fitted using the convenience classes of the numpy.polynomial package, introduced in NumPy 1.4.\n\nPrior to NumPy 1.4, numpy.poly1d was the class of choice and it is still available in order to maintain backward compatibility. However, the newer polynomial package is more complete and its convenience classes provide a more consistent, better-behaved interface for working with polynomial expressions. Therefore numpy.polynomial is recommended for new coding.","34e196c3":"## 1 + 2x + 3x^2","214590b2":"# np.poly1d"}}