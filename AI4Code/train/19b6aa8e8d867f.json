{"cell_type":{"6a3d5498":"code","54a98d91":"code","e2ba5f6f":"code","654dddf0":"code","636fe85b":"code","f403e460":"code","4e57b17e":"code","932bfedf":"code","87ebec56":"code","93aa9f13":"code","d3b04fbf":"code","ecedfde0":"code","002f586e":"code","b8b2d740":"code","e11167e9":"code","01a2464a":"code","1cbe98b0":"code","1a97dd5d":"code","13e6ccd9":"code","87fb77e7":"code","9d191dc2":"code","03d7e9be":"code","5a577095":"code","d6568b92":"code","0723deec":"code","783bcb10":"code","3fcc2219":"code","a20eae2f":"markdown","09c96461":"markdown","191c7c25":"markdown","9a5e1aad":"markdown"},"source":{"6a3d5498":"#### Dataset for raw text mails : https:\/\/www.kaggle.com\/chandramoulinaidu\/spam-classification-for-basic-nlp","54a98d91":"!pip install bs4","e2ba5f6f":"# Importing the packages\n\nimport pandas as pd\nimport numpy as np\nimport operator\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport nltk\nfrom nltk.stem import SnowballStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\n\nfrom bs4 import BeautifulSoup\n\nfrom wordcloud import WordCloud\nfrom PIL import Image\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\nfrom sklearn.metrics import recall_score, precision_score, f1_score","654dddf0":"data = pd.read_csv('..\/input\/spam-classification-for-basic-nlp\/Spam Email raw text for NLP.csv')","636fe85b":"data.head()","f403e460":"data.to_csv(\"Spam Email raw text for NLP.csv\",index=False)","4e57b17e":"data.shape","932bfedf":"# Lets check % of spam and non spam messages\ncategory_names = ['Spam',\"Legit mail\"]\nsize = [data.CATEGORY.value_counts()[1],data.CATEGORY.value_counts()[0]]\n\n# Pie chart \nplt.figure(figsize=(5,5), dpi=100)\nplt.pie(size, labels=category_names, textprops={'fontsize':16}, startangle=90, autopct='%1.1f%%',\n        explode=[0,0.05])\nplt.show()","87ebec56":"vectorizer = CountVectorizer(stop_words = 'english')","93aa9f13":"# Fitting the text messages to vectorizer give a sparse matrix\n\nall_features = vectorizer.fit_transform(data['MESSAGE'])","d3b04fbf":"type(all_features)","ecedfde0":"all_features.shape","002f586e":"# Vectorizer has attribute .vocabulary_ which stores the cout of words from the entire message feature of data df\nvocab_dict = vectorizer.vocabulary_","b8b2d740":"#### For Plotting word cloud we need all words combined from all the messages in the data, using Snowball stemmer,\n#### html parser and tokenizing inside below fn to generate require words","e11167e9":"def clean_message(message, stemmer=SnowballStemmer(\"english\"), stop_words=stopwords.words(\"english\")):\n    \n    #Removing HTML tags:\n    soup = BeautifulSoup(message, \"html.parser\")\n    cleaned_text = soup.get_text()\n    \n    #Coverting to Lower Case and Tokenising\n    words = word_tokenize(cleaned_text.lower())\n    \n    filtered_words =[]\n    \n    for word in words:\n        # Stemming and removing Punctuation \n        if word not in stop_words and word.isalpha():\n            stemmed_word = stemmer.stem(word)\n            filtered_words.append(stemmed_word)\n    \n    return filtered_words","01a2464a":"%%time\n\nnested_list = data.MESSAGE.apply(clean_message)\nall_words = [item for sublist in nested_list for item in sublist]","1cbe98b0":"normal_cloud = WordCloud(background_color=\"white\", max_words=500, colormap='winter')\nnormal_cloud.generate(\" \".join(all_words))\nplt.figure(figsize=(10,8), dpi=100)\nplt.imshow(normal_cloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","1a97dd5d":"#### MultinomialNB model","13e6ccd9":"X_train, X_test, y_train, y_test = train_test_split(all_features, data.CATEGORY, test_size=0.30, random_state=88)","87fb77e7":"X_train.shape, X_test.shape","9d191dc2":"classifier = MultinomialNB()","03d7e9be":"classifier.fit(X_train,y_train)","5a577095":"yhat = classifier.predict(X_test)","d6568b92":"correct_predictions =(yhat == y_test).sum()\nincorrect_prediction = X_test.shape[0] - (yhat == y_test).sum()\naccuracy = round(correct_predictions\/X_test.shape[0],2)","0723deec":"print(\"Number of documents predicted correctly\",correct_predictions )\nprint(\"Number of documents predicted correctly\", incorrect_prediction)\nprint(\"Accuracy is \", accuracy)","783bcb10":"classifier.score(X_test,y_test)","3fcc2219":"#Checking recall, precision and f1 score for the model\n\nrecall_score(y_test,yhat),precision_score(y_test,yhat),f1_score(y_test,yhat)","a20eae2f":"#### The Dataset is downloaded from : \n\n#### The messages are simple uncleaned strings with combinations of text and HTML tags.\n\n#### Method used : CountVectorizer from sklearn to clean messages\n                   1)Tokenizing\n                   2)Removing Stop words\n                   3)Vectorizing\n\n####                         Algorithm: MultinomialNB","09c96461":"![bayes-nagesh-1.jpg](attachment:bayes-nagesh-1.jpg)","191c7c25":"![Countvectorizer.png](attachment:Countvectorizer.png)","9a5e1aad":"#### This Notebook will cover one of the most efficient algorithm for spam mails classification i.e using Navie Bayes Classification\n\n#### Bayes\u2019 Theorem finds the probability of an event occurring given the probability of another event that has already occurred. Bayes\u2019 theorem is stated mathematically as the following equation:"}}