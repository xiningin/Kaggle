{"cell_type":{"6f77032d":"code","1799f37a":"code","77dee81b":"code","66549dc5":"code","1240cb5a":"code","95c0f848":"code","a71a01dd":"code","0a654a34":"code","120bb6ba":"code","17dba879":"code","b373f590":"code","b4c202f9":"code","08c658ec":"code","874422d3":"code","e53343fd":"code","f1477d17":"code","fc656c9d":"code","b7fb8a01":"code","70a1dfcc":"code","06a27fcc":"code","86396a89":"code","ffa4d481":"code","70fb1583":"code","b6596f64":"code","051c864d":"code","728de738":"code","ce04f438":"code","4772741b":"code","751719ce":"code","c5f7f66a":"code","8993b3ee":"code","f7d6c831":"code","d9f4c518":"code","6097dadd":"code","6b66ba74":"code","a24231b0":"code","8efc50f3":"code","9d91a4ef":"code","b483e38c":"code","fba550a6":"code","324c95f9":"code","69617cf1":"code","4d41350f":"markdown","f5022821":"markdown","a90982e9":"markdown","58473f1a":"markdown","7e941be3":"markdown","a55fd23a":"markdown","bad5a0ea":"markdown","9d71e4bc":"markdown","2e61e582":"markdown","9d8d68fb":"markdown","2e337d7f":"markdown","33bfb2ba":"markdown","378d7ecf":"markdown","f6b1bd36":"markdown","1469d781":"markdown","42f47ff9":"markdown","5f45d920":"markdown","02f6e5f8":"markdown","74dc8653":"markdown","ccf8e592":"markdown","903bd065":"markdown","99a054cf":"markdown","28855a3c":"markdown","1dccc106":"markdown","d0daed78":"markdown","38992479":"markdown"},"source":{"6f77032d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1799f37a":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","77dee81b":"match=pd.read_csv('\/kaggle\/input\/ipl-data-set\/matches.csv')\nprint(match.shape)\nmatch.head()","66549dc5":"delivery=pd.read_csv('\/kaggle\/input\/ipl-data-set\/deliveries.csv')\nprint(delivery.shape)\ndelivery.head()","1240cb5a":"total_runs_df=delivery.groupby(['match_id','inning']).sum()['total_runs'].reset_index()\ntotal_runs_df.shape","95c0f848":"total_runs_df=total_runs_df[total_runs_df['inning']==1]","a71a01dd":"match=match.merge(total_runs_df[['match_id','total_runs']],left_on='id',right_on='match_id')\nprint(match.shape)\nmatch.head()","0a654a34":"# Total Match played by the teams\nmatch['team1'].value_counts()","120bb6ba":"match['team1'].unique()","17dba879":"teams={'Sunrisers Hyderabad','Mumbai Indians','Royal Challengers Bangalore',\n       'Chennai Super Kings','Delhi Capitals','Kings XI Punjab','Rajasthan Royals','Kolkata Knight Riders'}","b373f590":"match['team1']=match['team1'].str.replace('Delhi Daredevils','Delhi Capitals')\nmatch['team2']=match['team2'].str.replace('Delhi Daredevils','Delhi Capitals')\n\n#Deccan chargers played most of the w.r.t old teams , as per the value_counts\nmatch['team1']=match['team1'].str.replace('Deccan Chargers','Sunrisers Hyderabad')\nmatch['team2']=match['team2'].str.replace('Deccan Chargers','Sunrisers Hyderabad')","b4c202f9":"match=match[match['team1'].isin(teams)]\nmatch=match[match['team2'].isin(teams)]","08c658ec":"match.shape","874422d3":"match['dl_applied'].value_counts()","e53343fd":"match=match[match['dl_applied']==0]\nmatch.shape","f1477d17":"match=match[['match_id','city','winner','total_runs']]\nmatch.head()","fc656c9d":"delivery=match.merge(delivery,on='match_id')\ndelivery.head()","b7fb8a01":"delivery.shape","70a1dfcc":"#Extraction of 2nd innign data\ndelivery=delivery[delivery['inning']==2]\nprint(delivery.shape)\ndelivery.head()","06a27fcc":"#find current score,runs_left\ndelivery['current_score']=delivery.groupby('match_id').cumsum()['total_runs_y']\ndelivery['runs_left']=delivery['total_runs_x']-delivery['current_score'] + 1","86396a89":"# Balls left\ndelivery['balls_left'] = 126 - (delivery['over']*6 + delivery['ball'])\ndelivery.head(7)","ffa4d481":"#Current run rate,required run rate\ndelivery['crr']=(delivery['current_score']*6)\/(120-delivery['balls_left'])\ndelivery['rrr']=round((delivery['runs_left']*6)\/(delivery['balls_left']),3)\ndelivery.head(2)","70fb1583":"#wickets left\ndelivery['player_dismissed']=delivery['player_dismissed'].fillna('0')\ndelivery['player_dismissed']=delivery['player_dismissed'].apply(lambda x:x if x=='0' else '1')\ndelivery['player_dismissed']=delivery['player_dismissed'].astype('int')\nwickets=delivery.groupby('match_id').cumsum()['player_dismissed'].values\ndelivery['wickets_left']=10-wickets\n","b6596f64":"#Result\ndef result(row):\n    if row['batting_team']==row['winner']:\n        return 1\n    else:\n        return 0","051c864d":"delivery['result']=delivery.apply(result,axis=1)\ndelivery.head()","728de738":"#Extracting out relevent features from delivery dataframe\nfinal_df=delivery[['batting_team','bowling_team','city','runs_left','balls_left',\n                   'total_runs_x','crr','rrr','wickets_left','result']]","ce04f438":"#Determining and removing null values\nplt.figure(figsize=(14,6))\nsns.heatmap(final_df.isnull())\nplt.show()","4772741b":"final_df.isnull().sum()","751719ce":"\nfinal_df.dropna(inplace=True)\nfinal_df.shape","c5f7f66a":"\nfinal_df=final_df[final_df['balls_left']!=0]\nprint(final_df['rrr'].describe())\nfinal_df.shape","8993b3ee":"\nfinal_df=final_df.sample(final_df.shape[0])\nfinal_df.head()","f7d6c831":"X=final_df.iloc[:,:-1]\ny=final_df.iloc[:,-1]\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=20)","d9f4c518":"#shape of X_train ,y_train\nprint(X_train.shape)\nprint(y_train.shape)","6097dadd":"X_train.head()","6b66ba74":"#Categorical Columns transformation using One Hot Encoding\ntrf=ColumnTransformer([\n    ('trf',OneHotEncoder(sparse=False,drop='first'),['batting_team','bowling_team','city'])\n],remainder='passthrough')","a24231b0":"#PipeLine formation\npipe=Pipeline(steps=[\n    ('step1',trf),\n    ('step2',LogisticRegression(solver='liblinear'))\n])","8efc50f3":"#Prediction\npipe.fit(X_train,y_train)\ny_pred=pipe.predict(X_test)\naccuracy_score(y_test,y_pred)","9d91a4ef":"pipe.predict_proba(X_test)[0]","b483e38c":"final_df.head()","fba550a6":"def match_progression(x_df,match_id,pipe):\n    match = x_df[x_df['match_id'] == match_id]\n    match = match[(match['ball'] == 6)]\n    temp_df = match[['batting_team','bowling_team','city','runs_left','balls_left','total_runs_x','crr','rrr','wickets_left']].dropna()\n    temp_df = temp_df[temp_df['balls_left'] != 0]\n    result = pipe.predict_proba(temp_df)\n    temp_df['lose_proba'] = np.round(result.T[0]*100,1)\n    temp_df['win_proba'] = np.round(result.T[1]*100,1)\n    temp_df['end_of_over'] = range(1,temp_df.shape[0]+1)\n    \n    target = temp_df['total_runs_x'].values[0]\n    batting_team=temp_df['batting_team'].values[0]\n    bowling_team=temp_df['bowling_team'].values[0]\n    runs = list(temp_df['runs_left'].values)\n    new_runs = runs[:]\n    runs.insert(0,target)\n    temp_df['runs_after_over'] = np.array(runs)[:-1] - np.array(new_runs)\n    #wickets = list(temp_df['wickets'].values)\n    #new_wickets = wickets[:]\n    #new_wickets.insert(0,10)\n    #wickets.append(0)\n    #w = np.array(wickets)\n    #nw = np.array(new_wickets)\n    #temp_df['wickets_in_over'] = (nw - w)[0:temp_df.shape[0]]\n    print('Batting_team:- ',batting_team)\n    print('Bowling_team:- ',bowling_team)\n    print(\"Target-\",target)\n    \n    temp_df = temp_df[['end_of_over','runs_after_over','wickets_left','lose_proba','win_proba']]\n    return temp_df,target","324c95f9":"temp_df,target=match_progression(delivery,1,pipe)\ntemp_df","69617cf1":"import matplotlib.pyplot as plt\n%matplotlib inline\nplt.figure(figsize=(15,8))\nax = plt.axes()\nax.set_facecolor(\"black\")\nplt.plot(temp_df['end_of_over'],temp_df['lose_proba'],color='red',linewidth=4)\nplt.plot(temp_df['end_of_over'],temp_df['win_proba'],color='green',linewidth=4)\nplt.plot(temp_df['end_of_over'],temp_df['wickets_left'],color='yellow',linewidth=4)\nplt.bar(temp_df['end_of_over'],temp_df['runs_after_over'])\nplt.xlabel('end_of_over')\nplt.title('Target:- '+ str(target))\nplt.show()","4d41350f":"#                               *IPL WIN PROBABILITY PREDICTION*            ","f5022821":"**1-Importing Libraries**","a90982e9":"<span style=\"color:crimson;\"> **If you find this notebook useful , please upvote ,  bcz it would be a great confidence booster for me as a beginner , and also  I'll focus on  doing  the next project with more enthusiasm.**   <\/span> ","58473f1a":"**2-Data Preprocessing**","7e941be3":"- **Column transformation using One Hot Encoding**","a55fd23a":"- **Splitting of Training and Testing Data**","bad5a0ea":"- **Balls Left**","9d71e4bc":"**5-Analysis of Match Progression**","2e61e582":"- **Prediction and find accuracy**","9d8d68fb":"- **Result**","2e337d7f":"# `Table of Content`\n**1-Importing Libraries**\n\n**2-Data Preprocessing**\n\n* Merging of Match and delivery dataframe\n* Current Score\n* Runs Left\n* Balls Left\n* Current Run Rate\n* Required Run Rate\n* Wickets\n* Result\n* Extraction of relevant features and getting final dataframe\n\n**3-Data Cleaning**\n\n* Dropping Null values\n* Removing outrageous values from rrr col\n* Shuffling of final df\n\n**4-Model Building**\n\n* Splitting of Training and Testing Data\n* Column transformation using OHE\n* Build Pipeling\n* Predicting accuracy\n* Predicting Probability score\n\n**5-Analysis of Match Progression**\n\n* Plots regarding match progression","33bfb2ba":"- **Current Score**\n- **Runs Left**","378d7ecf":"- **Wickets**","f6b1bd36":"- **Removal of Outrageous values from rrr col**","1469d781":"**4- Model Building**","42f47ff9":"- **Merging of delivery and match df**","5f45d920":"- **Probability Prediction**","02f6e5f8":"- **Shuffing of final DataFrame**","74dc8653":"- **Extraction of Relevant features and getting final Dataframe**","ccf8e592":"- **Build Pipeline**","903bd065":"# `Description`","99a054cf":"- **Current Run Rate**\n- **Required Run Rate**","28855a3c":"<i>**In this Project, we will going to predict  the Winning and Losing Probability of Chasing Team in Ipl,\nby determining the relevant features from the the give Datasets like current run rate,required run rate,wickets left,\nruns left, balls left etc, and finally analyse the match progression by table formation and plots for loss, win probability ,wickets etc.** <\/i>","1dccc106":"**3-Data Cleaning**","d0daed78":"- **Drop Null Values**","38992479":"- **Plots**"}}