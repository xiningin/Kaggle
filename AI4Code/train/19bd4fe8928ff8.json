{"cell_type":{"734c43ad":"code","c0e7e016":"code","ec01e954":"code","272b8b77":"code","92113be2":"code","50850fd5":"code","cfad699b":"code","9859e475":"code","d55de96a":"code","c7ef8ddf":"code","3c6ba6a1":"code","6558b0e7":"code","f817fcb6":"code","d574b5de":"code","48586727":"code","ba5b8b51":"code","9ca629de":"code","08ef9dbf":"code","3cf565d4":"code","15192e48":"code","bf6f000b":"markdown","8bfb6ca7":"markdown","b412b744":"markdown"},"source":{"734c43ad":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()","c0e7e016":"df = pd.read_csv('..\/input\/breast-cancer-prediction-dataset\/Breast_cancer_data.csv')\ndf.head()","ec01e954":"df.shape","272b8b77":"df.isnull().sum()\n#no nulls found","92113be2":"df.duplicated().sum()\n#no duplicated found\n#df= df.drop_duplicates()\n#df.shape","50850fd5":"sns.countplot(x= 'diagnosis', data=df);","cfad699b":"df.corr()","9859e475":"X = df.drop(['diagnosis'], axis=1)\ny = df['diagnosis']","d55de96a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test= train_test_split(X,y,random_state=5,test_size=0.15)","c7ef8ddf":"from sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nX_train_sc= scaler.fit_transform(X_train)\nX_test_sc = scaler.transform(X_test) ","3c6ba6a1":"from sklearn.preprocessing import MinMaxScaler\nscaler2 = MinMaxScaler()\nX_train_minmax= scaler2.fit_transform(X_train)\nX_test_minmax = scaler2.transform(X_test) ","6558b0e7":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(max_iter=1000)\nclf.fit(X_train, y_train)\nprint('Training Accuracy: ', clf.score(X_train, y_train))\nprint('Test Accuracy: ', clf.score(X_test, y_test))\n\nprint('Training Accuracy_minmax: ', clf.score(X_train_minmax, y_train))\nprint('Test Accuracy_minmax: ', clf.score(X_test_minmax, y_test))\n","f817fcb6":"from sklearn.neighbors import KNeighborsClassifier\nclf = KNeighborsClassifier(n_neighbors = 4)\nclf.fit(X_train, y_train)\nprint('Training Accuracy: ', clf.score(X_train, y_train))\nprint('Test Accuracy: ', clf.score(X_test, y_test))","d574b5de":"k_range = range(1,20,1)\ntraining_acc = []\ntesting_acc = []\nfor k in k_range:\n    clf = KNeighborsClassifier(n_neighbors = k)\n    clf.fit(X_train, y_train)\n    training_acc.append(clf.score(X_train, y_train))\n    testing_acc.append(clf.score(X_test, y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(k_range, training_acc, label = \"Training Accuracy\")   \nplt.plot(k_range, testing_acc, label = \"Testing Accuracy\")\nplt.legend() \nplt.xticks(range(1,20,1))\nplt.xlabel('n_neighbors')\nplt.ylabel('Accuracy')\n_ = plt.show()","48586727":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=4)\n\nX_train_pca = pca.fit_transform(X_train)\nX_test_pca = pca.transform(X_test)","ba5b8b51":"from sklearn.linear_model import LogisticRegression\nclf= LogisticRegression(max_iter=1000)\nclf.fit(X_train_pca,y_train)\n\nprint('Training Accuracy: ', clf.score(X_train_pca, y_train))\nprint('Testing Accuracy: ', clf.score(X_test_pca, y_test))","9ca629de":"from sklearn.ensemble import RandomForestClassifier\nclf0 = RandomForestClassifier(random_state=0)\nclf0.fit(X_train,y_train)\n\nclf = RandomForestClassifier(random_state=0)\nclf.fit(X_train_sc,y_train)\n\nclf2 = RandomForestClassifier(random_state=0)\nclf2.fit(X_train_pca,y_train)\n\nclf3 = RandomForestClassifier(random_state=0)\nclf3.fit(X_train_minmax,y_train)\n \nprint('Training Accuracy            : ', clf0.score(X_train, y_train))\nprint('Testing Accuracy             : ', clf0.score(X_test, y_test))\nprint('Testing Accuracy with pca    : ', clf2.score(X_test_pca, y_test))\nprint('Testing Accuracy with sc     : ', clf.score(X_test_sc, y_test))\n\nprint('Training Accuracy with minmx : ', clf3.score(X_train_minmax, y_train))\nprint('Testing Accuracy with minmax : ', clf3.score(X_test_minmax, y_test))\n","08ef9dbf":"from sklearn.model_selection import GridSearchCV\nparam_grid = { \n    'n_estimators': [10],\n    'max_features': ['auto'],\n    'max_depth' : [7],\n    'criterion' :['entropy']\n}\n\nCV_rfc = GridSearchCV(clf, param_grid=param_grid, cv= 5)\nCV_rfc.fit(X_train_sc,y_train)","3cf565d4":"best_params = CV_rfc.best_params_\nbest_params","15192e48":"clf = RandomForestClassifier(**best_params, random_state=0)\nclf0.fit(X_train,y_train)\nclf.fit(X_train_sc,y_train)\nclf2.fit(X_train_pca,y_train)\nclf3.fit(X_train_minmax,y_train)\n\nprint('Training Accuracy            : ', clf0.score(X_train, y_train))\nprint('Testing Accuracy             : ', clf0.score(X_test, y_test))\nprint('Testing Accuracy with pca    : ', clf2.score(X_test_pca, y_test))\nprint('Testing Accuracy with sc     : ', clf.score(X_test_sc, y_test))\n\nprint('Training Accuracy with minmx : ', clf3.score(X_train_minmax, y_train))\nprint('Testing Accuracy with minmax : ', clf3.score(X_test_minmax, y_test))","bf6f000b":"# # Apply KNN:","8bfb6ca7":"# Data Preparation:","b412b744":"# Random Forest"}}