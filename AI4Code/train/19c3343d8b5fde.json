{"cell_type":{"3fc97252":"code","da188190":"code","39df29ed":"code","a1affcf3":"code","175fd550":"code","99117589":"code","ec3227a4":"code","5f8c6e90":"code","552e1b4c":"code","0ece8451":"code","1df3c510":"code","4334b8d7":"code","9fb6b447":"code","237b1355":"code","9d90b61c":"code","68d21884":"code","87f950eb":"code","ee1b0b62":"code","9cb899ac":"code","d364b1b9":"code","78cd0f8a":"code","87e8d240":"code","8140dc14":"code","8e9d66e3":"code","1b1d105c":"code","ba150f26":"code","40d567ba":"code","025ed3f1":"code","415d428f":"code","c5f82ddf":"code","57888247":"code","4987e0be":"markdown","4d37e58e":"markdown","521ae288":"markdown"},"source":{"3fc97252":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da188190":"data = pd.read_csv('\/kaggle\/input\/car-price-prediction\/CarPrice_Assignment.csv')\ndata.head()","39df29ed":"data.shape","a1affcf3":"data.info()","175fd550":"data = data.drop(['car_ID', 'symboling'], axis=1)","99117589":"data.isnull().any()","ec3227a4":"data.corr()","5f8c6e90":"# not Highly correlated with price\ndata = data.drop(['carheight', 'stroke', 'compressionratio', 'peakrpm', 'citympg', 'highwaympg'], axis=1)","552e1b4c":"data.head()","0ece8451":"data['CarName'].unique()","1df3c510":"data['CarName'].sample(5)","4334b8d7":"data['Model'] = [x.split()[0] for x in data['CarName']]\n\ndata['Model'].replace({'maxda':'Mazda', 'mazda':'Mazda', 'nissan':'Nissan', 'porshce':'Porsche', 'porsche':'Porsche',\n                        'toyouta':'toyota', 'toyota':'Toyota', 'vokswagen':'Volkswagen', 'volkswagen':'Volkswagen', 'vw':'Volkswagen'})","9fb6b447":"data.shape","237b1355":"data.head()","9d90b61c":"data = data.drop(['CarName'], axis=1)","68d21884":"data.shape","87f950eb":"data = pd.get_dummies(data)","ee1b0b62":"data.shape","9cb899ac":"X = data.drop('price', axis=1)\nY = data['price']","d364b1b9":"X.corr()","78cd0f8a":"# import seaborn as snb","87e8d240":"# snb.pairplot(data, hue=\"price\")","8140dc14":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3)","8e9d66e3":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","1b1d105c":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\n\nreg.fit(X_train, y_train)","ba150f26":"y_pred = reg.predict(X_test)","40d567ba":"reg.score(X_test, y_test)","025ed3f1":"from sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(y_test, y_pred)\n\nprint(\"RMSV :\",np.sqrt(mse))\n\nprint('Model : LinearRegression(), rmse score is : {}, R2 : {}'.format(np.sqrt(mse), reg.score(X_test, y_test)))","415d428f":"from sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge","c5f82ddf":"LassoReg = Lasso(alpha=1, normalize=True)\nLassoReg.fit(X_train, y_train)\n\ny_pred2 = LassoReg.predict(X_test)\n\nmse2 = mean_squared_error(y_test, y_pred2)\n\nprint('Model : LassoRegression(), rmse score is : {}, R2 : {}'.format(np.sqrt(mse2), LassoReg.score(X_test, y_test)))","57888247":"RidgeReg = Ridge(alpha=1, normalize=True)\nRidgeReg.fit(X_train, y_train)\n\ny_pred3 = RidgeReg.predict(X_test)\n\nmse3 = mean_squared_error(y_test, y_pred3)\n\nprint('Model : RidgeRegression(), rmse score is : {}, R2 : {}'.format(np.sqrt(mse3), RidgeReg.score(X_test, y_test)))","4987e0be":"# Linear Regegression","4d37e58e":"# Ridge Regegression","521ae288":"# Lasso Regegression"}}