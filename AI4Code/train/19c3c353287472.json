{"cell_type":{"bb6c7c99":"code","be4e756d":"code","823cf6b6":"code","ce8e85fc":"code","241b5539":"code","2e8af8ff":"code","4f916689":"code","fac61494":"code","94cfeee9":"code","3a1cd745":"code","2b137a06":"code","7c366735":"code","fabc6f31":"code","b91cd8f0":"code","839e7e37":"code","90d331aa":"code","deae3c17":"code","13d1e8e5":"code","bd24d9ed":"code","0eb4c31e":"code","75d544b2":"code","2f359981":"code","69eeda91":"code","caed04a1":"markdown","51fbf663":"markdown","66e73d39":"markdown","954b196d":"markdown","d4c41cf2":"markdown","6a6cc540":"markdown","b46cf064":"markdown","cbd11c74":"markdown","78a66cd9":"markdown","5a726d09":"markdown","c5a75a46":"markdown","fbb02ae1":"markdown","58864f71":"markdown"},"source":{"bb6c7c99":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","be4e756d":"df = pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\nprint('The DataFrame has ' + str(df.isnull().sum().sum()) + ' missing values')\ndf.head()","823cf6b6":"x = df['thal'].where(df['thal']==0)\nx.dropna()","ce8e85fc":"df.shape","241b5539":"corr = df.corr()\ndf.corr()# Compute the correlation matrix","2e8af8ff":"# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\nprint('SOME COLUMNS MAY BE IRRELAVANT')\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","4f916689":"gen = df['sex'].where(df['target'] == 1).value_counts().to_frame().transpose() # Total 138\ngen.columns = ['Male','Female']\na = gen.plot(kind = 'bar')\nplt.xlabel('Gender')\nplt.ylabel('Number of Patients')\nplt.title('GENDER')\nplt.show(a)\nage = df['age'].where(df['target'] == 1).value_counts().to_frame()\nage = age.reset_index()\nb = plt.scatter(y = 'age',x = 'index' ,data = age)\nplt.ylabel('Number of Patients')\nplt.xlabel('Age')\nplt.title('Age Bias')\nplt.show(b)","fac61494":"#cp - chest pain type (4 values)(1 = typical angina; 2 = atypical angina; 3 = non-anginal pain; 4 = asymptomatic)\nfig,axs = plt.subplots(1,2,figsize = (20,6))\ncp_dat = df['cp'].where(df['target'] == 1).value_counts().to_frame().transpose()\ncp_dat_total = df['cp'].value_counts().to_frame().transpose()\ncp_dat.rename(columns = {0:'typical angina', 1:'atypical angina', 2:'non-anginal pain', 3:'asymptomatic'},inplace = True)\ncp_dat_total.rename(columns = {0:'typical angina', 1:'atypical angina', 2:'non-anginal pain', 3:'asymptomatic'},inplace = True)\ncp_dat.plot(kind = 'bar',ax = axs[0],color = ['blue','orange','green','red'])\nprint('PEOPLE WHO SUFFER AN ATTACK')\nprint(cp_dat)\ncp_dat_total.plot(kind = 'bar',ax = axs[1],color = ['green','blue','orange','red'])\nprint('PEOPLE WHO WERE SURVEYED')\nprint(cp_dat_total)","94cfeee9":"bpdat = df['trestbps'].where(df['target'] == 1).value_counts().to_frame()\nbpdat = bpdat.reset_index()\nc = plt.scatter(y = 'trestbps',x = 'index' ,data = bpdat)\nplt.ylabel('Number of Patients')\nplt.xlabel('At Rest Blood Pressure')\nplt.title('WRT TO BLOOD PRESSURE AT REST (mm Hg)')\nplt.show(c)","3a1cd745":"choldat = df['chol'].where(df['target'] == 1).value_counts().to_frame()\ncholdat = choldat.reset_index()\nd = plt.scatter(y = 'chol',x = 'index' ,data = choldat)\nplt.ylabel('Number of Patients')\nplt.xlabel('Cholestrol Level in mg\/dl')\nplt.title('WRT Serum Cholestoral')\nplt.show(d)","2b137a06":"fbsdat = df['sex'].where(df['target'] == 1).value_counts().to_frame().transpose() # Total 138\nfbsdat.columns = ['>120 mg\/dl','<120 mg\/dl']\ne = fbsdat.plot(kind = 'bar')\nplt.xlabel('Fasting Blood Sugar')\nplt.ylabel('Number of Patients')\nplt.title('Fasting Blood Sugar(in mg\/dl)')\nplt.show(e)","7c366735":"exangdat = df['exang'].where(df['target'] == 1).value_counts().to_frame().transpose() # Total 138\nexangdat.columns = ['Yes','No']\nf = exangdat.plot(kind = 'bar')\nplt.xlabel('Excercise Induced Angina')\nplt.ylabel('Number of Patients')\nplt.title('Excercise Induced Angina(Yes or No)')\nplt.show(f)","fabc6f31":"hrdat = df['thalach'].where(df['target'] == 1).value_counts().to_frame()\nhrdat = hrdat.reset_index()\ng = plt.scatter(y = 'thalach',x = 'index' ,data = hrdat)\nplt.ylabel('Number of Patients')\nplt.xlabel('Maximum Heart Rate Achieved')\nplt.title('WRT Maximum Heart Rate Achieved')\nplt.show(g)","b91cd8f0":"#restecg - resting electrocardiographic results (values 0,1,2)(0 = normal; 1 = having ST-T; 2 = hypertrophy)\nfig,axs = plt.subplots(1,2,figsize = (20,6))\necg_dat = df['restecg'].where(df['target'] == 1).value_counts().to_frame().transpose()\necg_dat_total = df['restecg'].value_counts().to_frame().transpose()\necg_dat.rename(columns = {0:'normal', 1:'having ST-T', 2:'hypertrophy'},inplace = True)\necg_dat_total.rename(columns = {0:'normal', 1:'having ST-T', 2:'hypertrophy'},inplace = True)\necg_dat.plot(kind = 'bar',ax = axs[0])\nprint('PEOPLE WHO SUFFER AN ATTACK')\nprint(ecg_dat)\necg_dat_total.plot(kind = 'bar',ax = axs[1])\nprint('PEOPLE WHO WERE SURVEYED')\nprint(ecg_dat_total)","839e7e37":"opdat = df['oldpeak'].where(df['target'] == 1).value_counts().to_frame()\nopdat = opdat.reset_index()\nh = plt.scatter(y = 'oldpeak',x = 'index' ,data = opdat)\nplt.ylabel('Number of Patients')\nplt.xlabel('Old Peak')\nplt.title('ST depression induced by exercise relative to rest')\nplt.show(h)","90d331aa":"#slope - the slope of the peak exercise ST segment(1 = upsloping; 2 = flat; 3 = downsloping)\nfig,axs = plt.subplots(1,2,figsize = (20,6))\nslope_dat = df['slope'].where(df['target'] == 1).value_counts().to_frame().transpose()\nslope_dat_total = df['slope'].value_counts().to_frame().transpose()\nslope_dat.rename(columns = {0:'upsloping', 1:'flat', 2:'downsloping'},inplace = True)\nslope_dat_total.rename(columns = {0:'upsloping', 1:'flat', 2:'downsloping'},inplace = True)\nslope_dat.plot(kind = 'bar',ax = axs[0])\nprint('PEOPLE WHO SUFFER AN ATTACK')\nprint(slope_dat)\nslope_dat_total.plot(kind = 'bar',ax = axs[1])\nprint('PEOPLE WHO WERE SURVEYED')\nprint(slope_dat_total)","deae3c17":"#ca - number of major vessels (0-3) colored by flourosopy\nfig,axs = plt.subplots(1,2,figsize = (20,6))\nca_dat = df['ca'].where(df['target'] == 1).value_counts().to_frame().transpose()\nca_dat_total = df['ca'].value_counts().to_frame().transpose()\nca_dat.rename(columns = {0:'One', 1:'Two', 2:'Three',3:'Four',4:'Five'},inplace = True)\nca_dat_total.rename(columns = {0:'One', 1:'Two', 2:'Three',3:'Four',4:'Five'},inplace = True)\nca_dat.plot(kind = 'bar',ax = axs[0],color = ['blue','Orange','Green','Red','purple'])\nprint('PEOPLE WHO SUFFER AN ATTACK')\nprint(ca_dat)\nca_dat_total.plot(kind = 'bar',ax = axs[1],color = ['blue','Orange','Green','purple','Red'])\nprint('PEOPLE WHO WERE SURVEYED')\nprint(ca_dat_total)","13d1e8e5":"X = np.asarray(df[['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg','thalach','exang','oldpeak','slope','ca','thal']])\ny = np.asarray(df['target'])\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","bd24d9ed":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nLR = LogisticRegression(C = 0.5, solver='newton-cg').fit(X_train,y_train)","0eb4c31e":"yhat = LR.predict(X_test)\nprint(yhat)\nyhat_prob = LR.predict_proba(X_test)\nprint(yhat_prob)","75d544b2":"from sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\nprint('The Log Loss is: ' + str(log_loss(y_test, yhat_prob)))\nprint('Jaccard Similarity Score is : ' + str(jaccard_score(y_test, yhat)))\nprint('F1 Score is : ' + str(f1_score(y_test,yhat)))","2f359981":"from sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(LR, X_test, y_test)","69eeda91":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, yhat))","caed04a1":"We will be using Logistic Regression to predict a 10 year risk of developing coronary heart disease (CHD) \u2014 (binary: \u201c1\u201d, means \u201cThere is a risk\u201d, \u201c0\u201d means \u201cThere is no risk\u201d). Logistic Regression uses a sigmoid graph and varies between 0 and 1. We will have a closer look at the graph in the future. The algorith uses the patient's medicial history in order to predict.\n","51fbf663":"# Table of Contents\n* [Introduction](#Introduction)\n* [Data](#Data)\n* [Methodology](#Methodology)\n* [Analysis](#Analysis)\n    * [Data Cleaning](#Data-Cleaning)\n    * [Data Visualisation](#Visualisation)\n    * [Predicting- Logistic Regression](#Algorithm-(MultiVariate-Logistic-Regression))","66e73d39":"### Data Cleaning","954b196d":"### Algorithm (MultiVariate Logistic Regression)","d4c41cf2":"## Visualisation","6a6cc540":"### Gender Bias","b46cf064":"# Analysis","cbd11c74":"# Methodology","78a66cd9":"This database contains 76 attributes, but all published experiments refer to using a subset of 14 of them. In particular, the Cleveland database is the only one that has been used by ML researchers to\nthis date. The \"goal\" field refers to the presence of heart disease in the patient.\nIt is integer valued from 0 (no presence) to 4.\n* **age** - age(age in years)\n* **sex** - sex(1 = male; 0 = female)\n* **cp** - chest pain type (4 values)(1 = typical angina; 2 = atypical angina; 3 = non-anginal pain; 4 = asymptomatic)\n* **trestbp** - resting blood pressure(in mm Hg on admission to the hospital)\n* **chol** - serum cholestoral in mg\/dl\n* **fbs** - fasting blood sugar > 120 mg\/dl ( 0 or 1 ) \n* **restecg** - resting electrocardiographic results (values 0,1,2)(0 = normal; 1 = having ST-T; 2 = hypertrophy)\n* **thalach** - maximum heart rate achieved\n* **exang** - exercise induced angina\n* **oldpeak** - ST depression induced by exercise relative to rest\n* **slope** - the slope of the peak exercise ST segment(1 = upsloping; 2 = flat; 3 = downsloping)\n* **ca** - number of major vessels (0-3) colored by flourosopy\n* **thal** - 3 = normal; 6 = fixed defect; 7 = reversable defect\n\n**Creators:**\n\n* Hungarian Institute of Cardiology. Budapest: Andras Janosi, M.D.\n* University Hospital, Zurich, Switzerland: William Steinbrunn, M.D.\n* University Hospital, Basel, Switzerland: Matthias Pfisterer, M.D.\n* V.A. Medical Center, Long Beach and Cleveland Clinic Foundation: Robert Detrano, M.D., Ph.D.\n* Donor:\n* David W. Aha (aha '@' ics.uci.edu)","5a726d09":"# Prediction of Risk of Heart Attack\n##### By Saai Sudarsanan D","c5a75a46":"Heart disease is the major cause of morbidity and mortality globally: it accounts for **more deaths annually than any other cause**. According to the **WHO**, an estimated **17.9 million people died** from heart disease in 2016, representing **31%** of all global deaths. Over **three quarters** of these deaths took place in **low- and middle-income countries**.\n\nA heart attack occurs when one or more of your **coronary arteries becomes blocked**. Over time, a buildup of fatty deposits, including cholesterol, form substances called **plaques**, which can narrow the arteries (atherosclerosis). This condition, called **coronary artery disease, causes most heart attacks**.\n\nMachine Learning can play an essential role in **predicting presence\/absence of Locomotor disorders**, Heart diseases and more. Such information, **if predicted** well in advance, can **provide important insights** to doctors who can then adapt their **diagnosis** and **treatment** per patient basis.","fbb02ae1":"# Introduction","58864f71":"# Data"}}