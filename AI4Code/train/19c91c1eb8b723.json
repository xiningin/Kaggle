{"cell_type":{"4951ebce":"code","f8510af7":"code","df7f20f3":"code","9ca84242":"code","ef8e616c":"code","b235b2a8":"code","01a3787a":"code","e6e32818":"code","0af31ba5":"code","77e48f8b":"code","aef430a4":"code","099a434f":"code","32a5c4fe":"code","a5fea935":"code","dd89e498":"code","c84ecf29":"code","5ad74541":"code","7f407d86":"code","517da22e":"code","cebb2dd6":"code","177624e5":"code","c2f2e62e":"code","b7e21a12":"code","8857d014":"code","e2e6ecc0":"code","772f84bb":"code","08c862d0":"code","704d898c":"code","6de7e630":"code","d2cbc713":"code","b18e1e80":"code","423bc067":"code","dc7ce10a":"code","4977ea97":"code","6c84f22a":"code","a9797a61":"code","a347d2c2":"code","25c658d5":"code","9a4a8bb1":"code","2796d663":"code","a083667b":"code","15a7e2cd":"code","66f387fb":"code","093a3f75":"code","fcf8b176":"code","f1934fba":"code","89980143":"code","996e4e11":"code","35a9b627":"code","3f499ab6":"code","e0bd2bf9":"code","9520997a":"code","839921ee":"code","59b95111":"code","bc47b033":"code","5e162f83":"code","d094578b":"code","da48f91b":"code","3366e24f":"code","f24ffbd3":"code","4858c705":"code","0f5d2cd2":"code","0a162548":"code","8cff13cb":"code","f45eb703":"code","71eb3aa5":"code","284ab8d5":"code","c2709231":"code","c9ac4244":"code","fe4bea94":"code","33103f75":"code","f3d64e4f":"code","c492d591":"code","0a6de725":"code","c3fa63a4":"code","71aed014":"code","b7f5d8a2":"code","148a4810":"code","3a0ecb30":"code","b1beb717":"code","dd37cd65":"code","296ff977":"markdown","150c3764":"markdown","592b3f8e":"markdown","c38cb2fc":"markdown","41508cb3":"markdown","fe3386bc":"markdown","42366d20":"markdown"},"source":{"4951ebce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8510af7":"df1 = pd.read_csv('..\/input\/titanic\/train.csv')\ndf2 = pd.read_csv('..\/input\/titanic\/test.csv')","df7f20f3":"df1.head()","9ca84242":"df1.info()","ef8e616c":"df2.info()","b235b2a8":"df1.corr()['Survived'].sort_values()","01a3787a":"sns.scatterplot(x='Fare', y='Survived', data=df1)","e6e32818":"def percent_missing(df):\n    percent_nan = 100* df.isnull().sum() \/ len(df)\n    percent_nan = percent_nan[percent_nan>0].sort_values()\n    return percent_nan","0af31ba5":"percent_nan = percent_missing(df1)\npercent_nan","77e48f8b":"df1['Age'].head()","aef430a4":"df1.groupby('Sex')['Age'].mean()\n","099a434f":"df1.groupby('Sex')['Age'].transform(lambda val: val.fillna(val.mean())).isnull().sum()","32a5c4fe":"df1['Age'] = df1.groupby('Sex')['Age'].transform(lambda val: val.fillna(val.mean()))","a5fea935":"percent_nan = percent_missing(df1)\npercent_nan","dd89e498":"df1[df1['Embarked'].isnull()]","c84ecf29":"df1.dropna(axis=0,subset= ['Embarked'])['Embarked'].isnull().sum()","5ad74541":"df1 = df1.dropna(axis=0,subset= ['Embarked'])","7f407d86":"percent_nan = percent_missing(df1)\npercent_nan","517da22e":"final_df1 = df1.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","cebb2dd6":"percent_nan = percent_missing(df2)\npercent_nan","177624e5":"df2['Age'] = df2.groupby('Sex')['Age'].transform(lambda val: val.fillna(val.mean()))","c2f2e62e":"percent_nan = percent_missing(df2)\npercent_nan","b7e21a12":"df2['Ticket'].unique()","8857d014":"df2[df2['Fare'].isnull()]","e2e6ecc0":"'3701' in df2['Ticket'].unique()","772f84bb":"df2[df2['Ticket'] == '3701']","08c862d0":"df2['Fare'] = df2['Fare'].fillna(df2['Fare'].mean())","704d898c":"percent_nan = percent_missing(df2)\npercent_nan","6de7e630":"final_df2 = df2.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","d2cbc713":"final_df2.head()","b18e1e80":"final_df1.head()","423bc067":"final_df1_nums = final_df1.select_dtypes(exclude='object')\nfinal_df1_objs = final_df1.select_dtypes(include='object')","dc7ce10a":"final_df1_objs = pd.get_dummies(final_df1_objs,drop_first=True)\nfinal_df1 = pd.concat([final_df1_nums,final_df1_objs],axis=1)","4977ea97":"final_df1.head()","6c84f22a":"final_df2_nums = final_df2.select_dtypes(exclude='object')\nfinal_df2_objs = final_df2.select_dtypes(include='object')","a9797a61":"final_df2_objs = pd.get_dummies(final_df2_objs,drop_first=True)\nfinal_df2 = pd.concat([final_df2_nums,final_df2_objs],axis=1)","a347d2c2":"final_df2.head()","25c658d5":"X = final_df1.drop('Survived', axis=1)\ny = final_df1['Survived']","9a4a8bb1":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","2796d663":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=101)","a083667b":"scaler = StandardScaler()","15a7e2cd":"scaled_X_train = scaler.fit_transform(X_train)\nscaled_X_test = scaler.transform(X_test)","66f387fb":"from sklearn.linear_model import LogisticRegressionCV ","093a3f75":"log_model = LogisticRegressionCV()\nlog_model.fit(scaled_X_train, y_train)","fcf8b176":"log_model.coef_","f1934fba":"from sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix","89980143":"y_pred = log_model.predict(scaled_X_test)","996e4e11":"confusion_matrix(y_test,y_pred)","35a9b627":"log_model2 = LogisticRegressionCV(max_iter=100000)\nlog_model2.fit(X_train, y_train)","3f499ab6":"y_pred2 = log_model2.predict(X_test)","e0bd2bf9":"confusion_matrix(y_test,y_pred2)","9520997a":"from sklearn.neighbors import KNeighborsClassifier","839921ee":"knn_model = KNeighborsClassifier(n_neighbors=1)\nknn_model.fit(scaled_X_train, y_train)","59b95111":"y_pred3 = knn_model.predict(scaled_X_test)","bc47b033":"confusion_matrix(y_test,y_pred3)","5e162f83":"log_final = LogisticRegressionCV(max_iter=100000)\nlog_final.fit(X,y)","d094578b":"log_final.coef_","da48f91b":"final_ypred = log_final.predict(final_df2)","3366e24f":"index_value = df2['PassengerId']\ncolumn_name = ['Survived']\nfinal_survived = pd.DataFrame(data = final_ypred, index = index_value, columns = column_name)","f24ffbd3":"final_survived.head()","4858c705":"final_survived.to_csv('.\/submit.csv')","0f5d2cd2":"from sklearn.model_selection import GridSearchCV","0a162548":"from sklearn.ensemble import AdaBoostClassifier","8cff13cb":"#help(AdaBoostClassifier)","f45eb703":"param_grid = {'n_estimators':[1,2,4,6,8,10,20,30,40,50,60]}\nmodel = AdaBoostClassifier()","71eb3aa5":"grid = GridSearchCV(model, param_grid)","284ab8d5":"grid.fit(X_train, y_train)","c2709231":"grid.best_params_","c9ac4244":"predictions_4 = grid.predict(X_test)","fe4bea94":"confusion_matrix(y_test,predictions_4)","33103f75":"print(classification_report(y_test, predictions_4))","f3d64e4f":"from sklearn.metrics import accuracy_score\nerror_rates = []\n\nfor n in range(1,10):\n    \n    model = AdaBoostClassifier(n_estimators=n)\n    model.fit(X_train,y_train)\n    preds = model.predict(X_test)\n    err = 1 - accuracy_score(y_test,preds)\n    \n    error_rates.append(err)","c492d591":"plt.plot(range(1,10),error_rates)","0a6de725":"print(error_rates)","c3fa63a4":"final_boostmodel = AdaBoostClassifier(n_estimators=3)\nfinal_boostmodel.fit(X_train, y_train)","71aed014":"pred10 = final_boostmodel.predict(X_test)\naccuracy_score(y_test, pred10)","b7f5d8a2":"final_boostmodel = AdaBoostClassifier()","148a4810":"final_boostmodel.fit(X,y)","3a0ecb30":"final_pred5 = final_boostmodel.predict(final_df2)","b1beb717":"index_value2 = df2['PassengerId']\ncolumn_name2 = ['Survived']\nfinal_survived2 = pd.DataFrame(data = final_pred5, index = index_value2, columns = column_name2)","dd37cd65":"final_survived2.to_csv('.\/submit.csv')","296ff977":"KNN Model","150c3764":"Dealing with Categorical values","592b3f8e":"Taking Best log_model2 for evaluation","c38cb2fc":"Training model and analysing","41508cb3":"Boosting methods","fe3386bc":"Test Data","42366d20":"Final Results for Boosting methods"}}