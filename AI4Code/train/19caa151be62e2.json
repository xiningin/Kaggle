{"cell_type":{"61d4b669":"code","c96acc81":"code","0700fddb":"code","666145d1":"code","7321db7b":"code","db01c5d5":"code","954bb9be":"code","5a8f1e04":"code","a07196b1":"code","508906af":"code","aff8f4d2":"code","0704445d":"code","d01b9475":"markdown","6ad0b074":"markdown","9adc9b87":"markdown"},"source":{"61d4b669":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c96acc81":"df=pd.read_csv(\"..\/input\/iris\/Iris.csv\")","0700fddb":"df.head()","666145d1":"miss=df.isnull()\nfor column in miss.columns.values.tolist():\n    print(column)\n    print (miss[column].value_counts())\n    print(\"\")","7321db7b":"df.describe(include=\"all\")","db01c5d5":"df.info()","954bb9be":"df.dtypes","5a8f1e04":"import matplotlib.pyplot as plt\nimport seaborn as sns\ntmp = df.drop('Id', axis=1)\ng = sns.pairplot(tmp, hue='Species', markers='+')\nplt.show()","a07196b1":"from sklearn import metrics\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression","508906af":"X = df.drop(['Id', 'Species'], axis=1)\ny = df['Species']","aff8f4d2":"k_range = list(range(1,26))\nscores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(X, y)\n    y_pred = knn.predict(X)\n    scores.append(metrics.accuracy_score(y, y_pred))\n    \nplt.plot(k_range, scores)\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')\nplt.show()\n","0704445d":"logreg = LogisticRegression()\nlogreg.fit(X, y)\ny_pred = logreg.predict(X)\nprint(metrics.accuracy_score(y, y_pred))","d01b9475":"<h1>**Exploratory Data analysis**<h1>","6ad0b074":"<h1>modelling with the scikit learn<h1>","9adc9b87":"<h1>Data Cleaning<h1>\n<h3>Identifying missing data<h3>"}}