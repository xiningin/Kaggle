{"cell_type":{"0af8b4e4":"code","358603a3":"code","5e4be853":"code","2c3362e2":"code","aef6834f":"code","eba01630":"code","05d344c4":"code","4a24a38f":"code","54e1f369":"code","40c51639":"code","563e3b58":"markdown"},"source":{"0af8b4e4":"###Importing the necessary libraries###\nimport torchvision\nfrom torchvision import transforms as T\nfrom PIL import Image\nimport cv2\nimport matplotlib.pyplot as plt","358603a3":"###Instantiating the model in evaluation mode###\nmodel = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\nmodel.eval()","5e4be853":"###COCO Dataset Category names###\nCOCO_INSTANCE_CATEGORY_NAMES = [\n    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus',\n    'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'N\/A', 'stop sign',\n    'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',\n    'elephant', 'bear', 'zebra', 'giraffe', 'N\/A', 'backpack', 'umbrella', 'N\/A', 'N\/A',\n    'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',\n    'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket',\n    'bottle', 'N\/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl',\n    'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',\n    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N\/A', 'dining table',\n    'N\/A', 'N\/A', 'toilet', 'N\/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',\n    'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N\/A', 'book',\n    'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush'\n]","2c3362e2":"def get_prediction(img_path, threshold):\n    img = Image.open(img_path) # Load the image\n    transform = T.Compose([T.ToTensor()]) # Defing PyTorch Transform\n    img = transform(img) # Apply the transform to the image\n    pred = model([img]) # Pass the image to the model\n    pred_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(pred[0]['labels'].numpy())] # Get the Prediction Score\n    pred_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(pred[0]['boxes'].detach().numpy())] # Bounding boxes\n    pred_score = list(pred[0]['scores'].detach().numpy())\n    pred_t = [pred_score.index(x) for x in pred_score if x > threshold][-1] # Get list of index with score greater than threshold.\n    pred_boxes = pred_boxes[:pred_t+1]\n    pred_class = pred_class[:pred_t+1]\n    return pred_boxes, pred_class","aef6834f":"def object_detection_api(img_path, threshold=0.5, rect_th=3, text_size=3, text_th=3):\n    boxes, pred_cls = get_prediction(img_path, threshold) # Get predictions\n    img = cv2.imread(img_path) # Read image with cv2\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) # Convert to RGB\n    for i in range(len(boxes)):\n        cv2.rectangle(img, boxes[i][0], boxes[i][1],color=(0, 255, 0), thickness=rect_th) # Draw Rectangle with the coordinates\n        cv2.putText(img,pred_cls[i], boxes[i][0],  cv2.FONT_HERSHEY_SIMPLEX, text_size, (0,255,0),thickness=text_th) # Write the prediction class\n    plt.figure(figsize=(20,30)) # display the output image\n    plt.imshow(img)\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","eba01630":"!wget https:\/\/www.wsha.org\/wp-content\/uploads\/banner-diverse-group-of-people-2.jpg -O people.jpg\n!wget https:\/\/hips.hearstapps.com\/hmg-prod.s3.amazonaws.com\/images\/10best-cars-group-cropped-1542126037.jpg -O car.jpg\n!wget https:\/\/cdn.pixabay.com\/photo\/2013\/07\/05\/01\/08\/traffic-143391_960_720.jpg -O traffic.jpg\n!wget https:\/\/images.unsplash.com\/photo-1458169495136-854e4c39548a -O girl_cars.jpg","05d344c4":"object_detection_api('.\/people.jpg', threshold=0.8)","4a24a38f":"object_detection_api('.\/car.jpg', rect_th=6, text_th=5, text_size=5)","54e1f369":"object_detection_api('.\/traffic.jpg', rect_th=2, text_th=1, text_size=1)","40c51639":"object_detection_api('.\/girl_cars.jpg', rect_th=15, text_th=7, text_size=5, threshold=0.8)","563e3b58":"Faster R-CNN Object Detection - Learn OpenCV Example"}}