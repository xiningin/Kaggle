{"cell_type":{"27d90327":"code","9c0761bc":"code","9d039bd4":"code","d2d9eb4a":"code","bb2720c4":"code","48729e75":"code","ddfb5f48":"code","be87bb25":"code","1d3676d5":"code","191d5f73":"code","4780141f":"code","83a5c8e0":"code","c6892f68":"code","aa827ccb":"markdown","33951a42":"markdown","499904b2":"markdown","43e636e1":"markdown","bf5306ad":"markdown"},"source":{"27d90327":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport joblib\nfrom tqdm.notebook import tqdm\nfrom scipy.io import loadmat\nfrom glob import glob\n\nsns.set()\nsns.set_context('poster')\n%matplotlib inline","9c0761bc":"# Setting Random Seed\n\nimport random\nimport tensorflow as tf\nimport numpy as np\nimport os\n\ndef seed_everything(seed=1234):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(seed=42)","9d039bd4":"_input_path = os.path.join('..', 'input', '1056lab-cardiac-arrhythmia-detection')\nos.listdir(_input_path)","d2d9eb4a":"af_files = sorted(glob(os.path.join(_input_path, 'af', '*.mat')))\naf_files[: 10]","bb2720c4":"normal_files = sorted(glob(os.path.join(_input_path, 'normal', '*.mat')))\nnormal_files[: 10]","48729e75":"test_files = sorted(glob(os.path.join(_input_path, 'test', '*.mat')))\ntest_files[: 10]","ddfb5f48":"def check_folder(fold_name, search_ext='mat', path='..\/input\/1056lab-cardiac-arrhythmia-detection'):\n    \"\"\" \u30d5\u30a9\u30eb\u30c0\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u62e1\u5f35\u5b50\u304c\u3072\u3068\u3064\u3060\u3051\u304b\u78ba\u8a8d\u3059\u308b \"\"\"\n    flag = False\n#     extension = '*.{}'.format(search_ext)\n    for f in sorted(os.listdir(os.path.join(path, fold_name))):\n        if not f.endswith('.{}'.format(search_ext)):\n            print(f)\n            flag = True\n    if not flag:\n        print('{} Folder is only *.{}.'.format(fold_name, search_ext))\n    \n    return not flag","be87bb25":"check_folder('normal')\ncheck_folder('af')\ncheck_folder('test')","1d3676d5":"def load_data(pathes, label=None, prefix=None, max_length=0, min_length=np.inf, verbose=True):\n    verbose = not verbose # tqdm\u7528\u306b\u53cd\u8ee2\n    \n    if prefix is not None:\n        if prefix.endswith(\"\/\") or prefix.endswith(\"\\\\\"):\n            prefix += \"\/\/\"\n\n        for i, val in enumerate(pathes):\n            pathes[i] = \"{}{}\".format(prefix, val)\n    \n    data_array = []\n    labels = []\n    for i, f in enumerate(tqdm(pathes, disable=verbose)):\n        tmp = loadmat(f)\n        data_array.append(tmp[\"val\"].flatten())\n        tmp_len = len(data_array[i])\n        \n        if max_length < tmp_len:\n            max_length = tmp_len\n        elif min_length > tmp_len:\n            min_length = tmp_len\n            \n        if label is not None:\n            labels.append(label)\n        \n    return data_array, labels, max_length, min_length","191d5f73":"normals, normal_label, max_length, min_length = load_data(normal_files, label=0)\nafs, af_label, max_length, min_length = load_data(af_files, label=1, max_length=max_length, min_length=min_length)\ntests, _, max_length, min_length = load_data(test_files, label=None, max_length=max_length, min_length=min_length)\nlabels = np.append(normal_label, af_label)","4780141f":"print(\"Max Length : {}\\nMin Length : {}\".format(max_length, min_length))","83a5c8e0":"normals_ = normals.copy()\nfor i, v in enumerate(tqdm(normals_)):\n    normals_[i] = v[: min_length]\n\nafs_ = afs.copy()\nfor i, v in enumerate(tqdm(afs_)):\n    afs_[i] = v[: min_length]\n\ntests_ = tests.copy()\nfor i, v in enumerate(tqdm(tests_)):\n    tests_[i] = v[: min_length]","c6892f68":"normals_ = np.array(normals_).reshape(-1, min_length, 1)\nafs_ = np.array(afs_).reshape(-1, min_length, 1)\ntests_ = np.array(tests_).reshape(-1, min_length, 1)","aa827ccb":"## Train Files","33951a42":"# Import Libraries","499904b2":"# Create DataFrames","43e636e1":"# Trim Shape of Datasets","bf5306ad":"# Loading Datasets"}}