{"cell_type":{"8e70caa1":"code","d39a38d7":"code","96fb8fd8":"code","d3a666fa":"code","53cfe90c":"code","d375b99f":"code","b3c52599":"code","b80e7165":"code","b460c55d":"code","9d3c5567":"code","d20a9f65":"code","3e652b6d":"code","b7fd2b50":"code","7a8be761":"code","bacd4dd4":"code","96a4f5f5":"code","7df6989c":"code","b8087ee9":"code","642b1d57":"code","591ab912":"code","698fc571":"code","aa6c7d1d":"code","f8ed4070":"code","d31904ea":"code","17158465":"code","abefae0a":"code","478c639f":"code","aedd8b70":"code","9274cd4a":"code","90d714a0":"code","c6460de5":"code","bf3d3fae":"code","37bd3132":"code","c5e1c350":"code","37cbfd4e":"code","6bcf2cdc":"code","f9b21df2":"code","743f2b20":"code","72ce693b":"code","4c220900":"code","1eaa48fc":"markdown","b88f38a1":"markdown","2967f184":"markdown","1f0473f9":"markdown","439e1a00":"markdown","3f45ff72":"markdown","d7dd94f2":"markdown","28d433f2":"markdown","90721053":"markdown","358f8a4f":"markdown","e9f98e52":"markdown","8abc605f":"markdown"},"source":{"8e70caa1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt;\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, InputLayer\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d39a38d7":"df_cars = pd.read_csv('\/kaggle\/input\/cars-sales-for-time-series-prediction\/sales-cars.csv')","96fb8fd8":"df_cars.head()","d3a666fa":"df_cars.index = pd.to_datetime(df_cars.Month, format='%Y-%m')","53cfe90c":"df_cars = df_cars.resample(\"M\").sum()","d375b99f":"df_cars.head()","b3c52599":"df_cars.plot(figsize=(12,6));","b80e7165":"# Seasonal Decompose","b460c55d":"results = seasonal_decompose(df_cars['Sales'])\nresults.plot();","9d3c5567":"# Train Test Split\ntrain = df_cars[:-6]\ntest = df_cars[-6:]","d20a9f65":"train.head()","3e652b6d":"test.head()","b7fd2b50":"# Generate Lags","7a8be761":"def generate_lag(df, n):\n    X, y = [], []\n    for i in range(len(df) - n):\n        X.append(df[i:i+n])\n        y.append(df[n+i])\n    \n    return np.array(X), np.array(y), np.array(y[-n:]).reshape(1,n)","bacd4dd4":"X, y, last_batch_values = generate_lag(train.Sales.values, 12)","96a4f5f5":"X","7df6989c":"y","b8087ee9":"last_batch_values","642b1d57":"# Build Model ","591ab912":"def mlp_model(input_, y_, epochs=1000):\n    model = Sequential()\n    model.add(Dense(100, activation='relu', input_dim=input_.shape[1]))\n    model.add(Dense(1))\n    model.compile(optimizer='adam', loss='mse')\n    print(model.fit(input_, y_, epochs=epochs))\n    return model","698fc571":"model = mlp_model(X,y, epochs=3000)\nmodel","aa6c7d1d":"def forecast_function(model, last_batch, n):\n    in_value = last_batch.copy()\n    preds = []\n    for i in range(n):\n        p = model.predict(in_value)\n        preds.append(p.ravel())\n        in_value = np.append(in_value, p)[1:].reshape(last_batch.shape)\n    return np.array(preds).ravel()","f8ed4070":"pred = forecast_function(model, last_batch_values, 6)","d31904ea":"pred","17158465":"test['Predicted_Sales']=pred","abefae0a":"test.head()","478c639f":"test.plot(figsize=(12,6))","aedd8b70":"def error_function(df,column_1,column_2):\n    data = df.copy()\n    my_list = []\n    for i in range(len(data)):\n        x = (data[column_2][i]*100)\/data[column_1][i]\n        if x >= 100:\n            error = x-100\n            #data['error_percentage'][i] = error\n            my_list.append(error)\n        else:\n            error = 100-x\n            my_list.append(error)\n            #data['error_percentage'][i] = error\n    data['error_percentage'] = my_list\n    return data","9274cd4a":"column_1 = 'Sales'\ncolumn_2 = 'Predicted_Sales'\ndf_new = error_function(test,column_1,column_2)","90d714a0":"df_new","c6460de5":"def mean_error(df,error_column):\n    total = 0\n    for i in range(len(df)):\n        total += df[error_column][i]\n    mean_error_ = total\/(len(df))\n    return mean_error_","bf3d3fae":"error_rate = mean_error(df_new,'error_percentage')","37bd3132":"error_rate","c5e1c350":"sum_of_actual_sales = sum(df_new.Sales.values)","37cbfd4e":"sum_of_actual_sales","6bcf2cdc":"sum_of_predicted_sales = sum(df_new.Predicted_Sales.values)","f9b21df2":"sum_of_predicted_sales","743f2b20":"rate_of_actual_and_predict_sums = (sum_of_predicted_sales*100)\/sum_of_actual_sales","72ce693b":"if rate_of_actual_and_predict_sums >= 100:\n    total_percentage = rate_of_actual_and_predict_sums - 100\nelse:\n    total_percentage = 100-rate_of_actual_and_predict_sums","4c220900":"print('Percentage error: ',total_percentage)","1eaa48fc":"# Find the average error","b88f38a1":"# Build the Model","2967f184":"Let's see how our dataset looks like.","1f0473f9":"# Calculate error line by line between sales and predicted sales as percentage in test data","439e1a00":"# Forecast","3f45ff72":"**If we want see how many cars sold in reality, and how much we predicted. Then, we'll find the percentage error.**","d7dd94f2":"**We want to forecast for the next 6 months. However, we will not be able to see how successful the results we produced are, as we do not have actual sales data to compare our predicted results with. Therefore, to measure the success of the forecast, I set aside the last 6 months of the data as test data. I leave the rest as a train. We will predict the next 6 months from the train data and compare it with the real values in the test data.**","28d433f2":"# Show the difference between Sales and Predicted Sales values","90721053":"In this part, we convert the Month column of the data to date format.","358f8a4f":"The sales chart is as follows.","e9f98e52":"# CAR SALES FORECAST WITH MULTI-LAYER PERCEPTRON\n![istockphoto-1254195198-612x612.jpg](attachment:bae3729b-bf9e-40e1-af87-63bef5b1ea3f.jpg)","8abc605f":"## This dataset contains the number of vehicle sales realized in a certain period. The number of sales was kept for every month. We will forecast sales numbers for the next 6 months using MLP."}}