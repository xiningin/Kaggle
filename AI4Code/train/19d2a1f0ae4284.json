{"cell_type":{"2572f521":"code","d23723ea":"code","ac9e0a06":"code","2981a5bb":"code","fb12b66d":"code","60eebd0d":"code","d7538487":"code","aabc7197":"code","d92be552":"code","23426f78":"code","55ed493d":"code","a5f37982":"code","6f4f2b54":"code","b3962072":"code","1dad5602":"code","6736a29e":"code","4517605b":"code","98be9956":"code","f0482440":"code","3c4e5f0a":"code","52c2cb88":"markdown","6c21e06b":"markdown","5545bae4":"markdown"},"source":{"2572f521":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom helper import data_container\nfrom sklearn.model_selection import cross_validate\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\n\nimport datetime as dt","d23723ea":"dataset_path = '..\/input\/train-dataset\/train.csv'\ndataset = pd.read_csv(dataset_path)","ac9e0a06":"crossvalidation = StratifiedKFold(n_splits=5, shuffle=True)","2981a5bb":"container = data_container(dataset)\ncontainer.normalize_dataset()\nprepared_dataset = container.prepared_dataset\nprepared_dataset","fb12b66d":"X = prepared_dataset.drop(columns=['aircon_sum_target_next14d'])\ny = prepared_dataset['aircon_sum_target_next14d']","60eebd0d":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0, stratify = y)","d7538487":"def plot_feature_importance(importance,names,model_type):\n\n    #Create arrays from feature importance and feature names\n    feature_importance = np.array(importance)\n    feature_names = np.array(names)\n\n    #Create a DataFrame using a Dictionary\n    data={'feature_names':feature_names,'feature_importance':feature_importance}\n    fi_df = pd.DataFrame(data)\n\n    #Sort the DataFrame in order decreasing feature importance\n    fi_df.sort_values(by=['feature_importance'], ascending=False,inplace=True)\n\n    #Define size of bar plot\n    plt.figure(figsize=(15,25))\n    #Plot Searborn bar chart\n    sns.barplot(x=fi_df['feature_importance'], y=fi_df['feature_names'])\n    #Add chart labels\n    plt.title(model_type + 'FEATURE IMPORTANCE')\n    plt.xlabel('FEATURE IMPORTANCE')\n    plt.ylabel('FEATURE NAMES')","aabc7197":"clf_RandomForest = RandomForestClassifier(n_estimators = 20, random_state=0)\nclf_RandomForest.fit(X_train, y_train)\ny_pred = clf_RandomForest.predict(X_test)","d92be552":"confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nsns.heatmap(confusion_matrix, annot=True)\nprint('Accuracy: ',metrics.accuracy_score(y_test, y_pred))\nprint('Precision: ',metrics.precision_score(y_test, y_pred))\nprint('Recall: ',metrics.recall_score(y_test, y_pred))\n\n\n\nplt.show()","23426f78":"plot_feature_importance(clf_RandomForest.feature_importances_,X.columns, 'RANDOMFOREST')","55ed493d":"container = data_container(dataset)\ncontainer.normalize_dataset()\n\ncontainer.run_PCA(features='temperature', components=4, append=True)\ncontainer.run_PCA(features='wind', components=8, append=True)\ncontainer.run_PCA(features='rain', components=6, append=True)\ncontainer.run_PCA(features='humidity', components=4, append=True)\ncontainer.run_PCA(features='pressure', components=4, append=True)\n\nprepared_dataset = container.prepared_dataset\n\nX = prepared_dataset.drop(columns=['aircon_sum_target_next14d'])\ny = prepared_dataset['aircon_sum_target_next14d']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0, stratify = y)","a5f37982":"clf_RandomForest = RandomForestClassifier(n_estimators = 20, random_state=0)\nclf_RandomForest.fit(X_train, y_train)\ny_pred = clf_RandomForest.predict(X_test)","6f4f2b54":"confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nsns.heatmap(confusion_matrix, annot=True)\nprint('Accuracy: ',metrics.accuracy_score(y_test, y_pred))\nprint('Precision: ',metrics.precision_score(y_test, y_pred))\nprint('Recall: ',metrics.recall_score(y_test, y_pred))\n\n\n\nplt.show()","b3962072":"plot_feature_importance(clf_RandomForest.feature_importances_,X.columns, 'RANDOMFOREST')","1dad5602":"container = data_container(dataset)\ncontainer.normalize_dataset()\n\ncontainer.run_PCA(features='temperature', components=4, append=True)\n\n\nprepared_dataset = container.prepared_dataset\n\nX = prepared_dataset.drop(columns=['aircon_sum_target_next14d'])\ny = prepared_dataset['aircon_sum_target_next14d']\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25,random_state=0, stratify = y)","6736a29e":"clf_RandomForest = RandomForestClassifier(n_estimators = 20, random_state=0)\nclf_RandomForest.fit(X_train, y_train)\ny_pred = clf_RandomForest.predict(X_test)","4517605b":"confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])\nsns.heatmap(confusion_matrix, annot=True)\nprint('Accuracy: ',metrics.accuracy_score(y_test, y_pred))\nprint('Precision: ',metrics.precision_score(y_test, y_pred))\nprint('Recall: ',metrics.recall_score(y_test, y_pred))\n\n\n\nplt.show()","98be9956":"plot_feature_importance(clf_RandomForest.feature_importances_,X.columns, 'RANDOMFOREST')","f0482440":"#https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html\nscoring = ['precision', 'recall']\nclf_RandomForest = RandomForestClassifier(n_estimators = 20, random_state=0)\nscores = cross_validate(clf_RandomForest, X, y, scoring=scoring, cv=crossvalidation, verbose = 2)","3c4e5f0a":"scores","52c2cb88":"# Random forest with PCA ","6c21e06b":"# Random forest with PCA only on most relevant features (the one with the highest variance explained with the lowest dimension)","5545bae4":"# Random Forest cross validation"}}