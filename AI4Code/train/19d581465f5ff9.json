{"cell_type":{"6d70a4f4":"code","7ca800a1":"code","76f68214":"code","fa085616":"code","e173313e":"code","c458dc73":"code","b15052d1":"code","e4ae036d":"code","ce2e43d1":"code","b191b313":"code","c543ff09":"code","964c9cbf":"code","5aa103f5":"code","fb8aa8de":"markdown","05d6eda5":"markdown","a6c8baaa":"markdown","7aa97624":"markdown","cf0d1f2c":"markdown"},"source":{"6d70a4f4":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb","7ca800a1":"# \u8a2d\u5b9a\u307e\u3068\u3081\nclass Config:\n    def __init__(self):\n        self.num_kfolds:int = 5\n        self.random_state:int=777\n        self.params = {\n            \"learning_rate\": 0.1,\n            \"random_seed\": 42,\n            'boosting_type': 'gbdt',\n            'objective': 'regression',\n            'metric': 'rmse',\n        }\nconfig = Config()            ","76f68214":"train = pd.read_csv(\"..\/input\/avocado-prices\/train.csv\")\ntest = pd.read_csv(\"..\/input\/avocado-prices\/test.csv\")","fa085616":"train.head()","e173313e":"test.head()","c458dc73":"train[\"Date\"] = pd.to_datetime(train[\"Date\"])\ntest[\"Date\"] = pd.to_datetime(test[\"Date\"])","b15052d1":"train[\"month\"] = train[\"Date\"].dt.month\ntest[\"month\"] = test[\"Date\"].dt.month","e4ae036d":"# \u5b66\u7fd2\u306b\u4f7f\u3046\u7279\u5fb4\u91cf\ntarget_col = 'AveragePrice'\nfeature_names = ['Total Volume', '4046', '4225', '4770',\n       'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags','month']","ce2e43d1":"X_train_all = train[feature_names]\ny_train_all = train[target_col]\nX_test = test[feature_names]","b191b313":"class LightGBM():\n    def train_and_predict(self, X_train, X_valid, y_train, y_valid, X_test, params):\n\n        # \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n        lgb_train = lgb.Dataset(X_train, y_train)\n        lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)\n\n        # \u4e0a\u8a18\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\n        model = lgb.train(\n            params, lgb_train,\n            # \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u3092\u6e21\u3059\n            valid_sets=lgb_eval,\n            # \u6700\u5927\u3067 5000 \u30e9\u30a6\u30f3\u30c9\u307e\u3067\u5b66\u7fd2\u3059\u308b\n            num_boost_round=5000,\n            # 100 \u30e9\u30a6\u30f3\u30c9\u7d4c\u904e\u3057\u3066\u3082\u6027\u80fd\u304c\u5411\u4e0a\u3057\u306a\u3044\u3068\u304d\u306f\u5b66\u7fd2\u3092\u6253\u3061\u5207\u308b\n            early_stopping_rounds=100,\n            verbose_eval = 100\n        )\n\n        # valid \u3092\u4e88\u6e2c\u3059\u308b\n        y_valid_pred = model.predict(X_valid, num_iteration=model.best_iteration)\n        # \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\n        y_pred = model.predict(X_test, num_iteration=model.best_iteration)\n\n        return y_pred, y_valid_pred, model\n","c543ff09":"y_preds = []\nmodels = []\n\n# \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\nkf = KFold(n_splits=config.num_kfolds, shuffle=True, random_state=config.random_state)\nfor train_index, valid_index in kf.split(X_train_all):\n    X_train, X_valid = (X_train_all.iloc[train_index, :], X_train_all.iloc[valid_index, :])\n    y_train, y_valid = (y_train_all.iloc[train_index], y_train_all.iloc[valid_index])\n\n    # lgbm\u306e\u5b66\u7fd2\n    lgbm = LightGBM()\n    y_pred, y_valid_pred, model = lgbm.train_and_predict(X_train,\n                                                         X_valid,\n                                                         y_train,\n                                                         y_valid,\n                                                         X_test,\n                                                         config.params)\n\n    # \u7d50\u679c\u306e\u4fdd\u5b58\n    y_preds.append(y_pred)\n    models.append(model)\n\n\n# CV\u30b9\u30b3\u30a2\nscores = [\n    m.best_score['valid_0']['rmse'] for m in models\n]\nscore = sum(scores) \/ len(scores)\nprint('===CV scores===')\nprint(scores)\nprint(score)\n","964c9cbf":"# submit\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nsub = pd.DataFrame(pd.read_csv('..\/input\/avocado-prices\/sample_submission.csv')['Id'])\n\n# \u4e88\u6e2c\u5024\u306e\u5e73\u5747\u3092\u53d6\u308b\ny_sub = sum(y_preds) \/ len(y_preds)\n\nsub[target_col] = y_sub\n\nsub.to_csv(\n    'submission.csv',\n    index=False\n)","5aa103f5":"# \u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d\nsub = pd.read_csv(\"submission.csv\")\nsub","fb8aa8de":"## \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","05d6eda5":"## \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n\u4eca\u56de\u306f\u65e5\u4ed8\u304b\u3089\u6708\u306e\u60c5\u5831\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u4ed6\u306b\u3082\u8272\u3005\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u308c\u305d\u3046\u306a\u306e\u3067\u3001EDA\u3068\u5408\u308f\u305b\u3066\u8272\u3005\u8a66\u3057\u3066\u4e0b\u3055\u3044\u3002","a6c8baaa":"# \u30d9\u30f3\u30c1\u30de\u30fc\u30af\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\n","7aa97624":"\u3082\u3063\u3068EDA\u3057\u3066\u3069\u3093\u306a\u50be\u5411\u304c\u3042\u308b\u306e\u304b\u3092\u3058\u3063\u304f\u308a\u898b\u308b\u3068\u826f\u3044\u3067\u3059\u3002","cf0d1f2c":"## \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2"}}