{"cell_type":{"34422b6c":"code","7a0a7c07":"code","4928bbb9":"code","97380142":"code","ac5d1772":"code","bc6a244f":"code","d614ba9f":"code","4a9bcf9d":"code","a6db4101":"code","89b95abd":"code","b8d2050b":"code","d0fc830a":"code","63a46da2":"code","b83d9cf2":"code","37958edb":"code","a2e57cee":"code","2c484dd9":"code","6d6c5cd5":"code","f36d579a":"code","b8c862c3":"code","c7aec529":"code","da8e2764":"code","17dda0d1":"code","3b7b7033":"code","12c268d8":"code","52d36f8a":"code","f6199b36":"code","63ea280e":"code","893caa74":"code","b229a605":"code","afce58fe":"code","559ac532":"code","9db8623a":"code","f0120ae4":"code","a38ea7bf":"code","f7eeea8e":"code","57f6eaeb":"code","b64cfca7":"code","00c1bf4d":"code","d1fc53eb":"code","bb646514":"code","8211e6dc":"code","5499e74e":"code","bec000f0":"code","557e9001":"code","7d7ea393":"code","3790d2ef":"code","dbdfd38e":"code","16745d91":"code","274890ed":"code","79e6856c":"code","17a6c2db":"code","820abd1e":"code","844398c0":"code","f08c0b58":"code","fc0e253c":"code","8f66652f":"markdown","5c1be4b4":"markdown","cd433fa5":"markdown","e0defbc7":"markdown","c3ad577e":"markdown","88f72e0a":"markdown","067ec131":"markdown","d84fc77c":"markdown","24e73bab":"markdown","69cf3bdf":"markdown","9fe07e07":"markdown","489befa0":"markdown","d896a85e":"markdown","2c4e3d7b":"markdown","6cfd682f":"markdown","994dcbe9":"markdown","fa8f5d3a":"markdown","7c64beb4":"markdown","af06c47a":"markdown","c84e8140":"markdown","a10daef5":"markdown","fc0dcaa4":"markdown","c141d80a":"markdown","262a2825":"markdown","433338d2":"markdown","66b2fa43":"markdown","103868ea":"markdown"},"source":{"34422b6c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7a0a7c07":"%matplotlib inline","4928bbb9":"train=pd.read_csv('..\/input\/train.csv')","97380142":"train.head()","ac5d1772":"#Pairwise Plot of every feature.\nsns.pairplot(train.drop(['Name','Ticket','Cabin'],axis=1).dropna())","bc6a244f":"plt.figure(figsize=(8,8))\n#Scatter plot of Survived people vs their Age & differentiating the points on the basis of Sex.\nsns.scatterplot(x='Survived',y='Age',data=train,hue='Sex')","d614ba9f":"plt.figure(figsize=(6,6))\n#Heatmap of missing values.\nsns.heatmap(train.isnull(),yticklabels=False,cmap='viridis')","4a9bcf9d":"plt.figure(figsize=(8,8))\n#Boxplot of Passenger class of passengers vs their Age.\nsns.boxplot(x='Pclass',y='Age',data=train)","a6db4101":"#Sibsp stands for Sibling\/Spouse.\n#Parch stands for Parents\/Children.\n#Combining these two attributes as Family attribute.\n# 1 if person is having family, otherwise 0.\nfamily=[1 if i[6]>0 or i[7]>0 else 0 for i in train.values]\ntrain['Family']=family","89b95abd":"train.head()","b8d2050b":"plt.figure(figsize=(6,6))\nfam_surv=train[['Family','Survived']].groupby('Family',as_index=False).mean()\n\nfam_surv_x=fam_surv.iloc[:,0].values\nfam_surv_y=fam_surv.iloc[:,1].values\n#fam_surv_x is list containing 0 and 1.\n# 1 if person is having family, otherwise 0.\n#fam_surv_y is list containing average survival of a person with\/without family.\n\nplt.bar(['Alone','With Family'],fam_surv_y,color=['yellow','violet'])\nplt.ylabel('Average Survived')","d0fc830a":"plt.figure(figsize=(20,6))\naverage_age = train[[\"Age\", \"Survived\"]].groupby(['Age'],as_index=False).mean()\naverage_age['Age']=average_age['Age'].apply(int)\nsns.barplot(x='Age', y='Survived', data=average_age)","63a46da2":"#Dividing category into child,male,female.\n#If age<=16, then child. Else gender.\ncategory=['child' if i[5]<=16 else i[4] for i in train.values]\ntrain['Category']=category","b83d9cf2":"plt.figure(figsize=(6,6))\ncategory=train[['Category','Survived']].groupby('Category',as_index=False).mean()\n\ncategory_x=category.iloc[:,0].values\ncategory_y=category.iloc[:,1].values\n#category_x is list containing child,male,female.\n#category_y is list containing average survival of a category type.\n\nplt.bar(['Child','Female','Male'],category_y,color=['green','blue','red'])\nplt.ylabel('Average Survived')","37958edb":"train.head()","a2e57cee":"#Average Age of Different Passenger classes.\nage_Pclass1=np.around(train[train['Pclass']==1]['Age'].mean())\nage_Pclass2=np.around(train[train['Pclass']==2]['Age'].mean())\nage_Pclass3=np.around(train[train['Pclass']==3]['Age'].mean())\n\ndef impute_age(x):         #Function to fill NaN values in the age data.\n    if str(x[5]).lower()=='nan':\n        if x[2]==1:\n            return age_Pclass1\n        elif x[2]==2:\n            return age_Pclass2\n        else:\n            return age_Pclass3\n    else:\n        return x[5]\n    \ntrain['Age']=train.apply(impute_age,axis=1)","2c484dd9":"embarked_mode=train['Embarked'].mode()  #Mode of embarked attribute.\n\ndef impute_embarked(x):       #Function to fill NaN values in the embarked data.\n    if str(x).lower()=='nan':\n        return embarked_mode[0]\n    else:\n        return x\n        \ntrain['Embarked']=train['Embarked'].apply(impute_embarked)","6d6c5cd5":"plt.figure(figsize=(6,6))\n#Heatmap of missing values.\nsns.heatmap(train.isnull(),yticklabels=False,cmap='viridis')","f36d579a":"#Generating dummy values for Embarked Attribute.\nembarked_dummy=pd.get_dummies(train['Embarked'])\nembarked_dummy.head()","b8c862c3":"#Generating dummy values for Sex Attribute.\ncategory_dummy=pd.get_dummies(train['Category'])\ncategory_dummy.head()","c7aec529":"#Concatenating Dummy Embarked dataframe with main dataframe.\ntrain=pd.concat([train,embarked_dummy],axis=1)\n#Concatenating Dummy Sex dataframe with main dataframe.\ntrain=pd.concat([train,category_dummy],axis=1)\ntrain.head()","da8e2764":"#PassengerID, Name & Ticket are useless attributes in prediction.\n#Whereas Cabin contains a lot NaN values So it has to be dropped.\n#Taking both Male & Female column is not necessary, so any one can be dropped.\n#Same for Embarked column. Here 'Female' and 'S' is dropped.\n\nX=train.iloc[:,[2,5,9,12,14,15,17,18]].values \ny=train.iloc[:,1].values","17dda0d1":"from sklearn.preprocessing import StandardScaler\nscale=StandardScaler()         #Instantiating Standard Scaler Object.","3b7b7033":"X=scale.fit_transform(X)       #Scaling every feature in X.","12c268d8":"X","52d36f8a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","f6199b36":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier","63ea280e":"dtree=DecisionTreeClassifier()\nml_algo=AdaBoostClassifier(base_estimator=dtree,n_estimators=2500,learning_rate=0.01)","893caa74":"ml_algo.fit(X_train,y_train)","b229a605":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,ml_algo.predict(X_test))    #Generating Confusion Matrix.","afce58fe":"ml_algo.score(X_test,y_test)         #Test Score","559ac532":"ml_algo.score(X_train,y_train)       #Train Score","9db8623a":"ml_algo.score(X,y)                   #Total Score","f0120ae4":"# from sklearn.model_selection import GridSearchCV\n# gcv=GridSearchCV(AdaBoostClassifier(),param_grid={'base_estimator':[dtree],'n_estimators':[2500,3000,3500,4000],'learning_rate':[0.001,0.009,0.01,1]})\n# gcv.fit(X,y)","a38ea7bf":"# gcv.best_estimator_","f7eeea8e":"y","57f6eaeb":"ml_algo.fit(X,y)                     #Training the model with whole train set.","b64cfca7":"test=pd.read_csv('..\/input\/test.csv')","00c1bf4d":"test.head()","d1fc53eb":"plt.figure(figsize=(6,6))\n#Heatmap of missing values.\nsns.heatmap(test.isnull(),yticklabels=False,cmap='viridis')","bb646514":"#Filling missing Fare value with Average of Fare.\ntest['Fare'].fillna(test['Fare'].mean(),inplace=True) ","8211e6dc":"#Average Age of Different Passenger classes.\nage_Pclass1=np.around(test[test['Pclass']==1]['Age'].mean())\nage_Pclass2=np.around(test[test['Pclass']==2]['Age'].mean())\nage_Pclass3=np.around(test[test['Pclass']==3]['Age'].mean())\n\ndef impute_age(x):         #Function to fill NaN values in the age data.\n    if str(x[4]).lower()=='nan':\n        if x[1]==1:\n            return age_Pclass1\n        elif x[1]==2:\n            return age_Pclass2\n        else:\n            return age_Pclass3\n    else:\n        return x[4]\n    \ntest['Age']=test.apply(impute_age,axis=1)","5499e74e":"plt.figure(figsize=(6,6))\n#Heatmap of missing values.\nsns.heatmap(test.isnull(),yticklabels=False,cmap='viridis')","bec000f0":"#Sibsp stands for Sibling\/Spouse.\n#Parch stands for Parents\/Children.\n#Combining these two attributes as Family attribute.\n# 1 if person is having family, otherwise 0.\nfamily=[1 if i[5]>0 or i[6]>0 else 0 for i in test.values]\ntest['Family']=family","557e9001":"#Dividing category into child,male,female.\n#If age<=16, then child. Else gender.\ncategory=['child' if i[4]<=16 else i[3] for i in test.values]\ntest['Category']=category","7d7ea393":"#Generating dummy values for Embarked Attribute.\nembarked_dummy=pd.get_dummies(test['Embarked'])\nembarked_dummy.head()","3790d2ef":"#Generating dummy values for Category Attribute.\ncategory_dummy=pd.get_dummies(test['Category'])\ncategory_dummy.head()","dbdfd38e":"#Concatenating Dummy Embarked dataframe with main dataframe.\ntest=pd.concat([test,embarked_dummy],axis=1)\n#Concatenating Dummy Category dataframe with main dataframe.\ntest=pd.concat([test,category_dummy],axis=1)\ntest.head()","16745d91":"#PassengerID, Name & Ticket are useless attributes in prediction.\n#Whereas Cabin contains a lot NaN values So it has to be dropped.\n#Taking both Male & Female column is not necessary, so any one can be dropped.\n#Same for Embarked column. Here 'Female' and 'S' is dropped.\nX_TEST=test.iloc[:,[1,4,8,11,13,14,16,17]].values","274890ed":"from sklearn.preprocessing import StandardScaler\nscale=StandardScaler()         #Instantiating Standard Scaler Object.","79e6856c":"X_TEST=scale.fit_transform(X_TEST)       #Scaling every feature in X.","17a6c2db":"X_TEST","820abd1e":"pred=ml_algo.predict(X_TEST).reshape(-1,1)  #Predictions","844398c0":"id=test.iloc[:,0].values.reshape(-1,1)  #Passenger ID of Test Data\noutput=np.concatenate((id,pred),axis=1)","f08c0b58":"submission=pd.DataFrame(output,columns=['PassengerId','Survived'])        #Dataframe of submissions","fc0e253c":"submission.to_csv('Submission.csv',index=False)    #Generating submission file.","8f66652f":"## Data Acquisition:","5c1be4b4":"From above plot we found average Age in respective Passenger Classes.","cd433fa5":"Above plot tells us the distribution of missing values in the dataset.","e0defbc7":"From above plot, it can be concluded that survival rate of a person with age 0-16, is more than others.","c3ad577e":"## Training the model with Whole Train set:","88f72e0a":"Above plot tells us that the survivors are mostly Female.","067ec131":"From above plot, its clear that people with family are more likely to survive than those without.","d84fc77c":"## Normalizing\/Scaling Data:","24e73bab":"## Getting Predictions:","69cf3bdf":"# Testing the model:","9fe07e07":"## Splitting data into Train & Test sets:","489befa0":"___","d896a85e":"## Normalizing\/Scaling Data:","2c4e3d7b":"## Cleaning the Data:","6cfd682f":"## Converting Categorical values into Dummy variables:","994dcbe9":"Above plot shows that order of survival rates are: Female > Child > Male","fa8f5d3a":"____","7c64beb4":"## Data Acquisition:","af06c47a":"## Converting Categorical values into Dummy variables:","c84e8140":"We can see that all null values in Age & Embarked column has been overwritten by Average Age in respective Passenger Classes.","a10daef5":"# Training the model:","fc0dcaa4":"Credits: \u0905\u0902kur \u0917\u094bswami","c141d80a":"## Getting Accuracy of model:","262a2825":"____","433338d2":"## Applying Machine Learning algorithm:","66b2fa43":"## Getting Insights from data:","103868ea":"## Checking out & Dealing missing values:"}}