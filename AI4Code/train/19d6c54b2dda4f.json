{"cell_type":{"f08a1976":"code","728dd822":"code","c4cbc137":"code","0ad5f6a1":"code","cdda0ec6":"code","6a10f35c":"code","debac050":"code","b8a54927":"code","b87d6110":"code","72641e37":"code","b3b8a04e":"code","f7d1d13d":"code","8a63e6ef":"code","9fa5252e":"code","cac4a4c3":"markdown","fa48c40c":"markdown","f118ede7":"markdown"},"source":{"f08a1976":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","728dd822":"dataframe = pd.read_csv(\"\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv\")\ndataframe.head()","c4cbc137":"dataframe.isnull().sum()","0ad5f6a1":"verified_tweets = dataframe.groupby(['user_verified'])[[\"user_name\"]].count().reset_index()\nprint(verified_tweets.head())\n\nunverified_users = verified_tweets.at[0,\"user_name\"]   #count of unverified users\nverified_users = verified_tweets.at[1,\"user_name\"]     #count of verified users","cdda0ec6":"import matplotlib.pyplot as plt","6a10f35c":"labels = [\"Verified Users\", \"Un-verified Users\"]\nuser_count = [verified_users, unverified_users]\n\nfig= plt.figure(figsize=(6,6))\n\nplt.pie(user_count,labels=labels,autopct='%1.1f%%', explode=(0.1, 0))\nplt.title('Tweet from verified users')","debac050":"location_data = dataframe.groupby(['user_location'])[['user_name']].count()\ntop_10_locations = location_data.sort_values(by = 'user_name', ascending=False).head(10).reset_index()\ntop_10_locations","b8a54927":"fig = plt.figure(figsize=(10,6))\nplt.barh(data = top_10_locations.iloc[::-1], y = 'user_location', width = 'user_name')\nplt.title(\"Top 10 locations with most tweets\")","b87d6110":"source_count = dataframe.groupby('source')[['user_name']].count()\nsource_count = source_count.sort_values(by=\"user_name\").tail(10).reset_index()\nsource_count","72641e37":"fig = plt.figure(figsize=(10,6))\nplt.barh(data=source_count, y=\"source\", width=\"user_name\")\nplt.title(\"Top 10 sources of highest tweet\")","b3b8a04e":"hashtags = dataframe[['user_name', 'hashtags']].dropna()","f7d1d13d":"hashtag_count = {}","8a63e6ef":"for hashtag_str in hashtags['hashtags']:\n    hashtag_list = eval(hashtag_str)\n    for hashtag in hashtag_list:\n        if hashtag not in hashtag_count.keys():\n            hashtag_count[hashtag] = 1\n        else:\n            hashtag_count[hashtag] += 1","9fa5252e":"top_10_hashtags = sorted(hashtag_count.items(), key = lambda kv:(kv[1], kv[0]), reverse=True)[:10]\ntop_10_hash_df = pd.DataFrame(data = top_10_hashtags, columns = ['hashtag', 'count'])\ntop_10_hash_df","cac4a4c3":"> **Percentage of Tweets from Verified and Un-verified users**","fa48c40c":"> **Top 10 locations with highest number of tweets**","f118ede7":"> **Top 10 sources from where maximum tweets being made**"}}