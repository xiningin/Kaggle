{"cell_type":{"187ec645":"code","67c66cf9":"code","173c7d02":"code","d1b50454":"code","6a42b418":"code","0ad0f9d3":"code","e95d2da2":"code","17b96b45":"code","f8b81fb8":"code","173c7f5f":"code","f79b1a85":"code","6ae83058":"code","71f92c2d":"code","d374c0d4":"code","fbc0f709":"code","95865492":"code","981d57dd":"code","9c47c66c":"code","176ea145":"code","25d8adc4":"code","3e07c5f3":"code","91c3ec5f":"code","a3993861":"code","0ee6f54b":"code","b3b4e5e6":"code","91ac4c46":"code","5dc789d3":"code","e1b9dbdf":"code","b2881fbc":"code","c163ff3d":"code","c27b90c0":"code","f9f19470":"code","91c4ce80":"code","dea67eaf":"code","8e4b357a":"code","bee3a763":"code","f345bd9e":"markdown","4a385347":"markdown","046b5fed":"markdown","caf71560":"markdown","362367ff":"markdown","517fcadc":"markdown","cc7a46a2":"markdown","59e389a6":"markdown","f5824147":"markdown","68a6f17a":"markdown","ac436bfc":"markdown","06bb249b":"markdown","3aba587d":"markdown","01902a5d":"markdown","63124c57":"markdown","2235d90b":"markdown","9c2d1d9d":"markdown","572684ab":"markdown","a8948306":"markdown","2b685388":"markdown","a608ac01":"markdown","b602736b":"markdown","723b3152":"markdown","efbb8bb9":"markdown"},"source":{"187ec645":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pylab import rcParams\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\n%matplotlib inline","67c66cf9":"prod_df = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv')\ncat_df = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.csv')\ncat_sorted_df = pd.read_csv('..\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.sorted-by-count.csv')","173c7d02":"prod_df.info()","d1b50454":"prod_df.head()","6a42b418":"prod_df.drop_duplicates(inplace=True)","0ad0f9d3":"def find_null(dataFrame):\n    total = len(dataFrame.columns)\n    n = 0\n    for col in dataFrame.columns:\n        null_sum = dataFrame[col].isna().sum()\n        if null_sum > 0:\n            n+=1\n            print(f'\"{col}\": {null_sum} null values')\n            \n    print('---------------------------------------')\n    print(f'\\n{n}\/{total} columns have null values')","e95d2da2":"find_null(prod_df)","17b96b45":"prod_df['product_color'].unique()","f8b81fb8":"tmp_df = prod_df['product_color'].value_counts()\ntmp_df = tmp_df.reset_index()\ntmp_df['percentage'] = tmp_df['product_color'] \/ prod_df.shape[0]\ntmp_df.head(15)","173c7f5f":"color_convert_dict = {\n          'white':'white', 'green':'green','leopardprint':'other',\n          'black':'black','yellow':'yellow', 'blue':'blue', 'navyblue':'blue',\n          'grey':'grey','orange':'orange', 'red':'red','beige':'other',\n          'lightblue':'blue','Black':'black','armygreen':'green',\n          'khaki':'green', 'red & blue':'multicolor', 'blue & pink':'multicolor',\n          'purple':'purple','RED':'red', 'white & green':'multicolor',\n          'winered':'red', 'black & green':'multicolor','whitefloral':'white',\n          'floral':'other', 'fluorescentgreen':'green', 'orange & camouflage':'orange',\n          'lightyellow':'yellow', 'coolblack':'black','camouflage':'other','pink':'pink',\n          'lightpink':'pink', 'pink & black':'multicolor', 'silver':'other',\n          'Army green':'green', 'lightgreen':'green','mintgreen':'green',\n          'pink & grey':'multicolor', 'gray':'grey', 'coffee':'other', 'rose':'red',\n          'light green':'green', 'leopard':'other', 'black & white':'multicolor',\n          'orange-red':'red','dustypink':'pink', 'White':'white', 'star':'other',\n          'white & black':'multicolor', 'apricot':'orange','skyblue':'blue',\n          'burgundy':'red', 'claret':'purple', 'pink & white':'multicolor',\n          'rosered':'red', 'tan':'other','navy blue':'blue', 'wine red':'red',\n          'lightred':'red', 'Pink':'pink', 'coralred':'red', 'brown':'other',\n          'lakeblue':'blue', 'darkblue':'blue', 'camel':'other', 'pink & blue':'multicolor',\n          'nude':'other', 'Blue':'blue','lightpurple':'purple', 'army':'other',\n          'black & stripe':'multicolor', 'Rose red':'red','greysnakeskinprint':'other',\n          'denimblue':'blue', 'applegreen':'green', 'offwhite':'white','lightgray':'grey',\n          'navy':'blue', 'gray & white':'multicolor', 'brown & yellow':'multicolor',\n          'winered & yellow':'multicolor', 'army green':'green', 'whitestripe':'white',\n          'rainbow':'other','lightgrey':'grey', 'watermelonred':'green',\n          'prussianblue':'blue', 'navyblue & white':'multicolor','white & red':'multicolor',\n          'wine':'red', 'ivory':'white', 'black & yellow':'multicolor', 'jasper':'other',\n          'lightkhaki':'green', 'offblack':'black', 'violet':'purple',\n          'black & blue':'multicolor', 'blackwhite':'other','darkgreen':'green', 'rosegold':'pink',0:'other'\n}","f79b1a85":"prod_df['product_color'] = prod_df['product_color'].map(color_convert_dict)\nprod_df['product_color'] = prod_df['product_color'].fillna('other')\nprod_df['product_color'].unique()\n\ntmp_df = prod_df['product_color'].value_counts()\ntmp_df = tmp_df.reset_index()\ntmp_df['percentage'] = tmp_df['product_color'] \/ prod_df.shape[0]\nprint('--- After converting product color ---')\ntmp_df","6ae83058":"prod_df['origin_country'] = prod_df['origin_country'].fillna('unknown')\nprod_df['origin_country'].unique()","71f92c2d":"prod_df[\"product_variation_size_id\"].unique()","d374c0d4":"tmp_df = prod_df['product_variation_size_id'].value_counts()\ntmp_df = tmp_df.reset_index()\ntmp_df['percentage'] = tmp_df['product_variation_size_id'] \/ prod_df.shape[0]\ntmp_df.head(15)","fbc0f709":"product_size_convert_dict = {\n         'M':'M', 'XS':'XS', 'S':'S', 'Size-XS':'XS', 'M.':'M',\n         'XXS':'XXS', 'L':'L', 'XXL':'XXL','S.':'S',\n         's':'S','choose a size':'other', 'XS.':'XS', '32\/L':'L',\n         'Suit-S':'S', 'XXXXXL':'other', 'EU 35':'S',\n         '4':'other','Size S.':'S', '1m by 3m':'other', '3XL':'other',\n         'Size S':'S', 'XL':'XL', 'Women Size 36':'S',\n         'US 6.5 (EU 37)':'M', 'XXXS':'other', 'SIZE XS':'XS',\n         '26(Waist 72cm 28inch)':'M','Size XXS':'XXS',\n         '29':'other', '1pc':'other', '100 cm':'other',\n         'One Size':'other', 'SIZE-4XL':'other', '1':'other',\n         'S\/M(child)':'other', '2pcs':'other', 'XXXL':'other',\n         'S..':'S', '30 cm':'L', '5XL':'other', '33':'S',\n         'Size M':'M', '100 x 100cm(39.3 x 39.3inch)':'other',\n         '100pcs':'other', '2XL':'XXL', '4XL':'other',\n         'SizeL':'L', 'SIZE XXS':'XXL', 'XXXXL':'other',\n         'Base & Top & Matte Top Coat':'other','size S':'S',\n         '35':'S', '34':'S', 'SIZE-XXS':'XXS', 'S(bust 88cm)':'S',\n         'S (waist58-62cm)':'S', 'S(Pink & Black)':'S', '20pcs':'other', 'US-S':'S',\n         'Size -XXS':'XXS', 'X   L':'XL', 'White':'other',\n         '25':'other', 'Size-S':'S', 'Round':'other',\n         'Pack of 1':'other', '1 pc.':'other', 'S Diameter 30cm':'S', '6XL':'other',\n         'AU plug Low quality':'other', '5PAIRS':'other',\n         '25-S':'S', 'Size\/S':'S', 'S Pink':'S',\n         'Size-5XL':'other', 'daughter 24M':'other', '2':'other',\n         'Baby Float Boat':'other', '10 ml':'other', '60':'other',\n         'Size-L':'L', 'US5.5-EU35':'S', '10pcs':'other',\n         '17':'other', 'Size-XXS':'XXS', 'Women Size 37':'M',\n         '3 layered anklet':'other', '4-5 Years':'other',\n         'Size4XL':'other', 'first  generation':'other',\n         '80 X 200 CM':'other', 'EU39(US8)':'L', 'L.':'L',\n         'Base Coat':'other', '36':'M', '04-3XL':'other',\n         'pants-S':'S', 'Floating Chair for Kid':'other',\n         '20PCS-10PAIRS':'other', 'B':'other',\n         'Size--S':'S', '5':'other', '1 PC - XL':'XL',\n         'H01':'other', '40 cm':'other', 'SIZE S':'S'\n}","95865492":"prod_df['product_variation_size_id'] = prod_df['product_variation_size_id'].map(product_size_convert_dict)\nprod_df[\"product_variation_size_id\"] = prod_df[\"product_variation_size_id\"].fillna('other')\nprod_df['product_variation_size_id'].unique()\n\ntmp_df = prod_df['product_variation_size_id'].value_counts()\ntmp_df = tmp_df.reset_index()\ntmp_df['percentage'] = tmp_df['product_variation_size_id'] \/ prod_df.shape[0]\n\ntmp_df","981d57dd":"rating_cols = [\n    'rating_five_count',\n    'rating_four_count',\n    'rating_three_count',\n    'rating_two_count',\n    'rating_one_count'\n]\n\nfor col in rating_cols:\n    prod_df[col] = prod_df[col].fillna(0)","9c47c66c":"prod_df['discount_amt'] = prod_df['retail_price'] - prod_df['price']\n\nprod_df['discount_percentage'] = (prod_df['retail_price'] - prod_df['price'])\/prod_df['retail_price']*100\n\nprod_df['price_range'] = pd.cut(prod_df['price'], bins=np.arange(0, 60, 10), right=False)\n\nprod_df['discount_amt_range'] = pd.cut(prod_df['discount_amt'], bins=np.arange(-10, 260, 10), right=False)\n\nprod_df['discount_prct_range'] = pd.cut(prod_df['discount_percentage'], bins=np.arange(-20, 110, 10), right=False)\n\n# create rating_percentage columns which indicates rating_x_count \/ rating_counts\nprod_df['five_rating_prct'] = prod_df['rating_five_count']\/prod_df['rating_count']\nprod_df['four_rating_prct'] = prod_df['rating_four_count']\/prod_df['rating_count']\nprod_df['three_rating_prct'] = prod_df['rating_three_count']\/prod_df['rating_count']\nprod_df['two_rating_prct'] = prod_df['rating_two_count']\/prod_df['rating_count']\nprod_df['one_rating_prct'] = prod_df['rating_one_count']\/prod_df['rating_count']","176ea145":"rating_prct_cols = [\n    'five_rating_prct',\n    'four_rating_prct',\n    'three_rating_prct',\n    'two_rating_prct',\n    'one_rating_prct'\n]\n\nfor col in rating_prct_cols:\n    prod_df[col] = prod_df[col].fillna(0)","25d8adc4":"prod_df[\"has_urgency_banner\"].unique()","3e07c5f3":"prod_df[\"has_urgency_banner\"] = prod_df[\"has_urgency_banner\"].fillna(0)","91c3ec5f":"trgt_columns = ['product_color',\n                'units_sold',\n]\n\ntmp_df = prod_df[trgt_columns]\ntmp_df = tmp_df.groupby('product_color').mean()\ntmp_df = tmp_df.sort_values(by='units_sold', ascending=False)\ntmp_df = tmp_df.reset_index()\n\ncolors = ['#f68741', '#a3acb1', '#491d88', '#b48464', \n          '#151c15','#d5dadd','#43b5a0','#1b96f3',\n          '#ac0e28','#446b04','#f2b0a5','#fcdf87'\n]\n\nplt.subplots(figsize=(10,5))\nplt.bar(tmp_df['product_color'], tmp_df['units_sold'], color=colors)\n\nplt.title('Average sales by product color', fontsize=15)\nplt.xlabel('Product color', fontsize=12)\nplt.ylabel('Sales', fontsize=12)\nplt.show()","a3993861":"trgt_columns = ['product_color',\n                'units_sold',\n]\n\ntmp_df = prod_df[trgt_columns]\ntmp_df = tmp_df.groupby('product_color').count()\ntmp_df = tmp_df.sort_values(by='units_sold', ascending=False)\ntmp_df = tmp_df.reset_index()\ntmp_df = tmp_df.rename(columns={'units_sold':'count'})\n\ncolors = ['#151c15','#d5dadd', '#1b96f3','#43b5a0',\n           '#ac0e28','#b48464','#f2b0a5','#fcdf87',\n           '#a3acb1','#491d88', '#446b04','#f68741'\n]\n\nplt.subplots(figsize=(10,5))\nplt.bar(tmp_df['product_color'], tmp_df['count'], color=colors)\n\nplt.title('Number of product by color', fontsize=15)\nplt.xlabel('Product color', fontsize=12)\nplt.ylabel('Count', fontsize=12)\nplt.show()","0ee6f54b":"trgt_columns = ['product_variation_size_id',\n                'units_sold',\n]\n\ntmp_df = prod_df[trgt_columns]\ntmp_df = tmp_df.groupby('product_variation_size_id').mean()\ntmp_df = tmp_df.sort_values(by='units_sold', ascending=False)\ntmp_df = tmp_df.reset_index()\n\n\nfig = px.bar(tmp_df, x='product_variation_size_id', y='units_sold', title='Average sales by product size')\nfig.show()","b3b4e5e6":"trgt_columns = ['product_variation_size_id',\n                'units_sold',\n]\n\ntmp_df = prod_df[trgt_columns]\ntmp_df = tmp_df.groupby('product_variation_size_id').count()\ntmp_df = tmp_df.sort_values(by='units_sold', ascending=False)\ntmp_df = tmp_df.reset_index()\ntmp_df = tmp_df.rename(columns={'units_sold':'count'})\n\n\n\nfig = px.bar(tmp_df, x='product_variation_size_id', y='count', title='Number of product by product size')\nfig.show()","91ac4c46":"def plot_multiple_hist(df):\n    rcParams['figure.figsize'] = 10, 5\n    df.hist(bins=20)\n    plt.tight_layout()\n    plt.show()\n\ntarget_columns = ['price', 'retail_price']\ntarget_df = prod_df[target_columns]\n\nplot_multiple_hist(target_df)","5dc789d3":"def plot_hist_together(df,label1, label2, bins):\n    plt.hist([df[label1], df[label2]], bins, label=[label1, label2])\n    title = label1 + ' vs. ' + label2\n    plt.title(title, fontsize=15)\n    plt.legend()\n    plt.show()\n\nbins = np.linspace(0, 250, 40)\nplot_hist_together(prod_df, 'price', 'retail_price', bins)","e1b9dbdf":"def count_plot(df, label, color, figsize=(10,5), rotation=0):\n    plt.figure(figsize=figsize)\n    df[label].value_counts().plot(kind='bar', color=color)\n    plt.xlabel(label)\n    plt.ylabel('count')\n    \n    title = label + ' distribution'\n    plt.title(title, fontsize=15)\n    plt.xticks(rotation=rotation)\n    plt.show()    \n\ncount_plot(prod_df, 'origin_country', '#ff6d69')","b2881fbc":"figsize=(10,5)\nsns.distplot(prod_df['rating'])\nplt.title('rating distribution', fontsize=15)\nplt.show()","c163ff3d":"fig = px.scatter(prod_df, x='retail_price', y='rating')\nfig.update_layout(title_text=\"Relationship between retail_price and rating\")\nfig.show()","c27b90c0":"trgt_columns = ['uses_ad_boosts',\n                'units_sold',\n                'retail_price',\n                'rating']\n\ntmp_df = prod_df[trgt_columns]\ntmp_df.groupby('uses_ad_boosts').mean()","f9f19470":"plt.subplots(figsize=(10,5))\nsns.countplot(x='discount_prct_range', data=prod_df, order=sorted(prod_df['discount_prct_range'].unique()),palette= [\"#013766\"])\nplt.title('Number of data by discount_percentage_range', fontsize=15)\nplt.show()","91c4ce80":"plt.subplots(figsize=(10,5))\nsns.countplot(x='discount_amt_range', data=prod_df, order=sorted(prod_df['discount_amt_range'].unique()),palette= [\"#ff6d69\"])\nplt.xticks(rotation=60)\nplt.title('Number of data by discount_amount_range', fontsize=15)\nplt.show()","dea67eaf":"trgt_columns = ['discount_amt_range',\n                'units_sold'\n               ]\n\ntmp_df = prod_df[trgt_columns]\ntmp_df = tmp_df.groupby('discount_amt_range').mean()\ntmp_df = tmp_df.reset_index()\n\nplt.subplots(figsize=(10,5))\nsns.barplot(x='discount_amt_range', y='units_sold', data=tmp_df, palette='ocean_r')\nplt.xticks(rotation=90)\nplt.title('units_sold by discount_amount_range', fontsize=15)\nplt.show()","8e4b357a":"plt.subplots(figsize=(20,12))\n\nprod_df_corr = prod_df.corr()\n\nsns.heatmap(prod_df_corr, cmap=\"YlGnBu\", annot=True)\nplt.show()","bee3a763":"def get_pairs(df, trgt_col):\n    '''Get diagonal and lower triangular pairs of correlation matrix'''\n    pairs_to_drop = set()\n    cols = df.columns\n    for i in range(0, df.shape[1]):\n        pairs_to_drop.add((trgt_col, cols[i]))\n    return pairs_to_drop\n\ndef get_strong_correlations(df, n=10):\n    au_corr = df.corr().unstack()\n    labels_to_drop = get_pairs(df, 'units_sold')\n    au_corr_desc = au_corr['units_sold'].sort_values(ascending=False)\n    au_corr_asc = au_corr['units_sold'].sort_values(ascending=True)\n    return au_corr_desc[0:n], au_corr_asc[0:n]\n\nau_corr_desc, au_corr_asc = get_strong_correlations(prod_df, 15)\n\nprint(\"Strong Correlations\")\nprint(\"Positive Correlations\")\nprint(au_corr_desc)\nprint(au_corr_desc.index)\nprint('-----------------------------')\nprint(\"Negative Correlations\")\nprint(au_corr_asc)","f345bd9e":"## Treat null values of origin_country","4a385347":"## product count by color","046b5fed":"## Treat null values and convert values of product_variation_size_id","caf71560":"## Show strong correlations","362367ff":"## Relationship between uses_ad_boosts and other attributes","517fcadc":"# Preprocessing","cc7a46a2":"## Treat null values of x_rating_prct","59e389a6":"## rating distribution","f5824147":"## Treat null values of has_urgency_banner","68a6f17a":"## Number of data by discount_amount_range","ac436bfc":"## Number of product by product size","06bb249b":"## price vs. retail_price","3aba587d":"## Find columns which include null values","01902a5d":"# Data Visualization","63124c57":"## origin_country distribution","2235d90b":"## Treat null values of rating_x_count","9c2d1d9d":"## Relationship between retail_price and rating","572684ab":"## Create Columns\n\n* discount_amt  \nretail_price - price  \n\"discount_amt\" shows how much this product was discounted.\n<br>\n\n* discount_percentage  \n(retail_price - price) \/ retail_price *100  \n\"discount_percentage\" shows discount percentage of this product.\n<br>\n\n* price_range  \n\"price_range\" shows groups of price ranges.  \nbins \u2192 0,10,20,30,40,50\n<br>\n\n* discount_amt_range  \n\"discount_amt_range\" shows groups of discount_percentage ranges.  \nbins \u2192 -20,-10, 0, 10,...,100\n<br>\n\n* discount_prct_range  \n\"discount_prct_range\" shows groups of discount_percentage ranges.  \nbins \u2192 -20,-10, 0, 10,...,100\n<br>\n","a8948306":"## units_sold by discount_amount_range","2b685388":"## Average sales  by product size","a608ac01":"## Treat null values and convert values of product_color","b602736b":"## Average sales by product color","723b3152":"## Number of data by discount percentage range","efbb8bb9":"## Heatmap"}}