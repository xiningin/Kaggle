{"cell_type":{"2a157cdc":"code","18ae2b8e":"code","1b3dfc3c":"code","0e237d22":"code","ecc1c6d6":"code","73790330":"code","0d78fc00":"code","1225f5c9":"code","ea930ac8":"code","2085889b":"code","5187d159":"code","d1241ce0":"code","3aefda49":"markdown","d77aa0ce":"markdown","34dc6ec7":"markdown"},"source":{"2a157cdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18ae2b8e":"X_train = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_train.csv')\ny_train = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/y_train.csv')\nX_test = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_test.csv')","1b3dfc3c":"# print(X_train)\n# print(X_train.select_dtypes(include=object).columns)\n\n#\ud6c8\ub828 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ubc94\uc8fc\ud615 \ub370\uc774\ud130\uac00 \uc788\ub294 \uceec\ub7fc\uc758 \ub370\uc774\ud130 \uad6c\uc131 \ub0b4\uc6a9 \ubc0f \uc624\uc5fc \uc720\ubb34\ub97c \ud655\uc778\ud568\nfor col in X_train.select_dtypes(include=object).columns:\n    target = X_train[col]\n    print('***************************************')\n    print(col)\n    print(target.nunique())\n    print(target.value_counts())\n\nprint(X_train.isna().sum())\nprint(X_train.info())","0e237d22":"#\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ubc94\uc8fc\ud615 \ub370\uc774\ud130\uac00 \uc788\ub294 \uceec\ub7fc\uc758 \ub370\uc774\ud130 \uad6c\uc131 \ub0b4\uc6a9 \ubc0f \uc624\uc5fc \uc720\ubb34\ub97c \ud655\uc778\ud568\nfor col in X_test.select_dtypes(include=object).columns:\n    target = X_test[col]\n    print('***************************************')\n    print(col)\n    print(target.nunique())\n    print(target.value_counts())\n\nprint(X_test.isna().sum())\nprint(X_test.info())","ecc1c6d6":"print(y_train)\nprint(y_train.info())","73790330":"#\ubd88\ud544\uc694 feature \uc81c\uac70 \ubc0f \uc624\uc5fc \ub370\uc774\ud130 \ubcf4\uc815\ndef drop_features(df):\n    df = df.drop('ID', axis=1)\n    df['Customer_care_calls'] = df['Customer_care_calls'].map(lambda x:x.replace('$', '')).astype('int')\n    return df\n\n\n\nfrom sklearn.preprocessing import LabelEncoder\n#\ubc94\uc8fc\ud615 feature \ub77c\ubca8\ub9c1\ndef format_features(df):\n#     label_target = df.select_dtypes(include=object).columns\n#     for target in label_target:\n#         LE = LabelEncoder()\n#         LE.fit(df[target])\n#         df[target] = LE.transform(df[target])\n    df = pd.get_dummies(df)\n\n    return df\n\n#\uc804\ucc98\ub9ac \ud568\uc218 \uc801\uc6a9\ndef transform_features(df):\n    df = drop_features(df)\n    df = format_features(df)\n    return df\n\nX = transform_features(X_train)\nprint(X)\n# print(X['Customer_care_calls'].value_counts())\ny = y_train['Reached.on.Time_Y.N']","0d78fc00":"from sklearn.model_selection import train_test_split\n\nX_train_model, X_test_model, y_train_model, y_test_model = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)","1225f5c9":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(random_state=30)\nmodel.fit(X_train_model, y_train_model)\npred = model.predict_proba(X_test_model)[:,1]\n","ea930ac8":"from sklearn.metrics import roc_auc_score\nscore = roc_auc_score(y_test_model, pred)\nprint(\"score:{0:.4f}\".format(score))","2085889b":"test_ID = X_test['ID']\nX_test = transform_features(X_test)\npred_prob = model.predict_proba(X_test)\n","5187d159":"#submission \ub370\uc774\ud130 \uc800\uc7a5\nsubmission = pd.DataFrame({'ID': test_ID, 'Reached.on.Time_Y.N': pred_prob[:,1]})\nprint(submission)\nsubmission.to_csv('result.csv', index=False)","d1241ce0":"\n#\uc2e4\uc81c \ub370\uc774\ud130\uc640 \uc608\uce21 \ub370\uc774\ud130 \uac80\uc99d\ntrue_label_df = pd.read_csv('\/kaggle\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv')\ntrue_label = true_label_df['Reached.on.Time_Y.N']\nguess_label = submission['Reached.on.Time_Y.N']\nprint(roc_auc_score(true_label, guess_label))\n\n# \uc4f8\ubaa8\uc5c6\ub294 \ucf54\ub4dc\n# from sklearn.preprocessing import Binarizer\n\n# binarizer = Binarizer(threshold = 0.695).fit(pred_prob[:,1].reshape(-1,1))\n# custom_pred = binarizer.transform(pred_prob[:,1].reshape(-1,1))\n# custom_score = roc_auc_score(true_label, custom_pred)       \n# print(custom_score)\n    \n# thresholds = [0.4, 0.45, 0.50, 0.55, 0.60]\n\n\n# def pred_by_threshold(true_label, pred_proba_c1, thresholds):\n#     print(roc_auc_score(true_label, guess_label))\n#     for i in thresholds:\n#         binarizer = Binarizer(threshold = i).fit(pred_proba_c1)\n#         custom_pred = binarizer.transform(pred_proba_c1)\n        \n#         custom_score = roc_auc_score(true_label, custom_pred)\n#         print(\"threshold : {0:.2f}, roc_auc_score : {1:.4f}\".format(i,custom_score))\n# pred_by_threshold(true_label, pred_prob[:,1].reshape(-1,1), thresholds)","3aefda49":"# **\ubd84\ub958 \ubaa9\uc801 \ucf54\ub4dc\uc77c \ub54c\ub294 LabelEncoder\ub97c \uc4f0\ub358 pd.get_dummies\ub97c \uc4f0\ub358 \uc0c1\uad00\uc5c6\uc74c. \uc4f0\uae30 \ud3b8\ud55c \uac78\ub85c \uc801\uc6a9\ud558\uba74 \ub428.**\n\ub2e4\ub9cc, \uc120\ud615\ud68c\uadc0\uc778 \uacbd\uc6b0\uc5d0\ub294 LabelEncoder\ub97c \uc4f0\uba74 \uc548\ub428. \uac00\uc911\uce58\ub85c \uc798\ubabb \ud559\uc2b5\ud560 \uc6b0\ub824\uac00 \uc788\uc74c","d77aa0ce":"**URL**\n\n\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_test.csv\n\n\/kaggle\/input\/ecommerce-shipping-data-competition-form\/y_train.csv\n\n\/kaggle\/input\/ecommerce-shipping-data-competition-form\/X_train.csv\n\n\/kaggle\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv","34dc6ec7":"# \ub370\uc774\ud130 \uad6c\uc131 \ub0b4\uc6a9, \uc624\uc5fc \uc720\ubb34 \ud55c \ub208\uc5d0 \ud655\uc778\ud558\uae30 \uafc0\ud301 \uc804\uc218\ud574\uc8fc\uc154\uc11c \uac10\uc0ac\ud569\ub2c8\ub2e4 \uc18c\ub2c8\ub2d8~"}}