{"cell_type":{"83a44e6a":"code","e49168a7":"code","ccb21865":"code","4114021e":"code","dd1301b2":"code","b60678b9":"code","fe6bc109":"code","1af33b23":"code","16a3907b":"code","0f09ec61":"code","66a0a9c4":"code","702a8e67":"code","592ad6d3":"code","6d5dbda6":"code","1e587f27":"code","cf4f72f8":"code","acc5e8c3":"code","a3f2e3cd":"code","751ef3aa":"code","c645131a":"code","65f9fb69":"code","6e409b15":"code","8aeceb22":"code","b68d6f5a":"code","f7cadbb7":"code","3d783aa3":"code","00c66337":"code","98bae67d":"code","e38988b1":"code","3471304e":"code","8a34859b":"code","0113c09f":"code","2d675995":"code","3529a2a8":"code","1661382d":"code","d6f450d1":"code","6e40eb5b":"code","a6fbf04d":"code","44f13959":"code","c5fc85f9":"code","240188cb":"code","300c31ce":"markdown","45a169bd":"markdown","6b4bcc7f":"markdown","e52717c7":"markdown","e3a127ac":"markdown","69104b25":"markdown","6b3c3fc4":"markdown","f59d1a37":"markdown","993b1824":"markdown","b7837ef1":"markdown","8484847d":"markdown","19c9fe1d":"markdown","d0cec885":"markdown","961ed909":"markdown","ce828645":"markdown","5a3c09bd":"markdown","a8f41270":"markdown","f2e07730":"markdown","ebe4aa9c":"markdown","63ae4411":"markdown","dfdd1e6e":"markdown","2bca51eb":"markdown","2fea733c":"markdown","0852e92b":"markdown","0a416107":"markdown","111fc31e":"markdown","bd506fa2":"markdown","0c21d05d":"markdown","f09231df":"markdown","c26e47bb":"markdown","a8f26ec7":"markdown","72859272":"markdown","a0d98001":"markdown"},"source":{"83a44e6a":"# Import libraries and tools\n# Data preprocessing and linear algebra\nimport pandas as pd\nimport numpy as np\nnp.random.seed(2)\n\n# Visualisation\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\n# Tools for cross-validation, error calculation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical\n\n# Machine Learning\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","e49168a7":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","ccb21865":"train.info()","4114021e":"test.info()","dd1301b2":"# train.head()\n# As we can see our dataset consists of label (meaning 1-9 digit) and pixels of handwritten digits.\n# So we can go next to form X_train and Y_train datasets which gonna be used in ML algorhytm later.","b60678b9":"# Form X_train, Y_train\n# Put digits aka true answer in Y_train\nY_train = train['label']\n# Drop it as Target variable from X_train \nX_train = train.drop(['label'], axis = 1)","fe6bc109":"# By the way we can drop train dataset in order to save some disk space since we will use only X_train further.\ndel train","1af33b23":"# Count how many digits we have in Y_train set\nY_train.value_counts(ascending=False)","16a3907b":"X_train.isnull().any().count()","0f09ec61":"test.isnull().any().count()","66a0a9c4":"# Lets normalize the image pixel values from [0, 255] to [-0.5, 0.5] \n# to make our network easier to train (using smaller, centered values leads to better results).\nX_train = (X_train \/ 255) - 0.5\ntest = (test \/ 255) - 0.5","702a8e67":"# Reshape each image from (28, 28) to (28, 28, 1) because Keras requires the third dimension.\n# MNIST images are gray scaled - only one channel. For RGB images, there is 3 channels, \n# so we will reshape 784px vectors to 28x28x3 3D matrices.\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","592ad6d3":"print(X_train.shape)","6d5dbda6":"print(test.shape)","1e587f27":"Y_train = to_categorical(Y_train, num_classes = 10)","cf4f72f8":"# Split X_train to train and validation datasets","acc5e8c3":"# Set random seed\nrandom_seed = 2","a3f2e3cd":"# Split data\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=random_seed)","751ef3aa":"# # Before class initiation we need to define models hypermarameters, which we will use in our class\n# num_filters = 8 #lets use 8 filters\n# filter_size = 3 #filter is matrix 3x3\n# pool_size = 2 #traverse the input image in 2x2 blocks","c645131a":"# # Initiate class\n# model = Sequential([\n#     Conv2D(num_filters, filter_size, input_shape=(28, 28, 1)), #input layer\n#     MaxPooling2D(pool_size=pool_size),\n#     Flatten(),\n#     Dense(10, activation='softmax'), #output softmax layer has 10 nodes\n# ])","65f9fb69":"# # Compile the model\n# # We decide 3 factors: the optimizer, the loss function, a list of metrics\n# model.compile(\n#     optimizer='adam',\n#     loss='categorical_crossentropy',\n#     metrics=['accuracy'],\n# )","6e409b15":"# # # Train the model\n# # # We decide 3 parameters: training data, number of epochs, batch size\n# # model.fit(\n# #     X_train,\n# #     Y_train,\n# #     epochs=3,\n# #     #batch_size=32,\n# # )\n# Epoch 1\/3\n# 37800\/37800 [==============================] - 24s 630us\/step - loss: 0.4036 - accuracy: 0.8837\n# Epoch 2\/3\n# 37800\/37800 [==============================] - 15s 394us\/step - loss: 0.2115 - accuracy: 0.9386\n# Epoch 3\/3\n# 37800\/37800 [==============================] - 15s 404us\/step - loss: 0.1537 - accuracy: 0.9562","8aeceb22":"# # Evaluate the model\n# model.evaluate(\n#     X_val,\n#     Y_val,\n# )\n# 4200\/4200 [==============================] - 1s 243us\/step\n# [0.1418064293833006, 0.9576190710067749]","b68d6f5a":"# Predict\n# predictions = model.predict(X_train)","f7cadbb7":"# # print(np.argmax(predictions, axis=1))\n# [8 7 9 ... 2 9 4]","3d783aa3":"# Initialize model\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","00c66337":"# Define the optimizer\n# In our previous model we used Adam optimizer. Now lets try another one - RMSprop, which is enough\n# powerfull but can save comp resource. We will use default params.\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","98bae67d":"# Compile the model\nmodel.compile(\n    optimizer = optimizer , \n    loss = \"categorical_crossentropy\", \n    metrics=[\"accuracy\"]\n)","e38988b1":"# Define an annealing method of the learning rate (LR)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001\n                                           )","3471304e":"# A. Fit model without data augmentation\nhistory = model.fit(X_train, Y_train, batch_size = 128, epochs = 10, \nvalidation_data = (X_val, Y_val), verbose = 2)","8a34859b":"# Make some data augmentation. Used [2] approach, but it can easily be modified. It is a very intuitive work.\naugment = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False\n        )","0113c09f":"# Re-fit using augmentation\naugment.fit(X_train)","2d675995":"# B. Fit the model using our augmentaton\nhistory = model.fit_generator(augment.flow(X_train,Y_train, batch_size=128),\n                              epochs = 10, validation_data = (X_val,Y_val),\n                              verbose = 2, steps_per_epoch = X_train.shape[0] \/\/ 128,\n                              callbacks=[learning_rate_reduction]\n                             )","3529a2a8":"predictions_complex_model = model.predict(X_train)","1661382d":"print(np.argmax(predictions_complex_model, axis=1))","d6f450d1":"# Loss and accuracy curves for training and validation \nfig = plt.figure()\nplt.subplot(2,1,1)\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='lower right')\nplt.subplot(2,1,2)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper right')\nplt.tight_layout()","6e40eb5b":"# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# Calculate the confusion matrix\nconf_mat = confusion_matrix(Y_true, Y_pred_classes)","a6fbf04d":"# PLot confusion matrix\nsns.set(font_scale=1.2) # for label size\nsns.heatmap(conf_mat, annot=True, annot_kws={\"size\": 10}) # font size\nplt.figure(figsize=(16,10))\nplt.show()","44f13959":"# Make final prediction showing our model a real-test data for the first time\nresults = model.predict(test)\n# Select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n# Save result as pandas series\nresults = pd.Series(results,name=\"Label\")","c5fc85f9":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"cnn_mnist_result.csv\",index=False)","240188cb":"# Literature\n# [1] https:\/\/victorzhou.com\/blog\/keras-cnn-tutorial\/#the-full-code\n# [2] https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/notebook\n# [3] https:\/\/en.wikipedia.org\/wiki\/Convolutional_neural_network\n# [4] https:\/\/keras.io\/\n# [5] https:\/\/www.tensorflow.org\/\n# [6] https:\/\/www.kaggle.com\/cdeotte\/how-to-choose-cnn-architecture-mnist\/notebook","300c31ce":"### Predict on test dataset ###","45a169bd":"## **Intro**\nMNIST (\"Modified National Institute of Standards and Technology\") is the de facto \u201chello world\u201d \ndataset of computer vision. It consists of thousans of handwritten digits.\nGoal is simple: we need to teach machine to recognize them.\n\nTo address this classical problem we will cover two simple steps:\n1. Make short exploration of MNIST handwritten digits dataset.\n2. Build a Model which will be able to recognize datasets digits.\n\nOur Model will be based on so called CNN, Convolutional Neural Networks [3].\nWhat are they?\nThey\u2019re basically just neural networks that use Convolutional layers,\nwhich are based on the mathematical operation of convolution.\nConv layers consist of a set of filters - 2d matrices of numbers.\nWe will also use Keras [4] with Tensorflow [5] backend. A lot of helpfull beginners tutorial may be found on projects\nsites.\n\n**Why use them?**  \nBecause they are specially produced to be useful in computer vision problems such as digit or image recognition\nand actually became industrial standard.\n\n**Thanks**  \nVictor Zhou who explained CNN's in a very simple but understandable way [1] and Yassine Ghoussam who made a very fundamental tutorial on Kaggle [2].","6b4bcc7f":"We see a few things:\n1. The validation accuracy is greater than the training accuracy. That means that our model doesn't not overfit \non training set. It is good.\n2. Making model more complex increase accuracy from 95% to 99%. It is significiant so making model architecture\nmore complex is reasonable.\n3. Our accuracy and loss curves are not smooth. It is not very good and signals us to change some blocks of\nnetwork or to make some experimens with parameters.","e52717c7":"### Model evaluation ###","e3a127ac":"Ok. Accuracy 95% on train data is very well result on such simple network. We can see how powerfull\nthey can be. This is especially noticeable in real-world computer vision tasks, in which everything \nis more complicated.\n\nComment out our model in order to keep it in mind and not don't get confused while implementing\nsecond one.","69104b25":"A few words about our architecture.\nIt has 2 Conv layers with 32 filters beacause according to [6] \"32 maps in the first convolutional layer and 64 maps in the second convolutional layer is the best. Architectures with more maps only perform slightly better and are not worth the additonal computation cost\". Then one Pooling layer to choose best features. Then one Dropout layer which randomly turn neurons on and off to improve convergence. Then same structure with less params. Then Flatten layer since we don't need all dimensions, just output. Then Dense-relu layer to improve convergence. And finally Dense-softmax since we need to squash the matrix into output probabilities.","6b3c3fc4":"### A second more complex model ###","f59d1a37":"### Save results to csv ###","993b1824":"## Data exploration ##","b7837ef1":"### Normalization ###","8484847d":"### One-hot encoding ###","19c9fe1d":"### Data augmentation ###","d0cec885":"Lets see what happen if we build more complicated network structure.  \n- How it will affect the score?  \n- And what price will we pay for this improvement?","961ed909":"### Reshape ###","ce828645":"## Machine Learning ##","5a3c09bd":"### Fit the model ###","a8f41270":"We obtain 99,3% acuracy. Lets try improving it a little by using augmentation.","f2e07730":"First, lets outline our goal.  \n\"In this competition, your goal is to correctly identify digits from a dataset of \ntens of thousands of handwritten images\"","ebe4aa9c":"A typical CNN work process starts with feature extraction and finishes with classification. \nFeature extraction is performed by alternating convolution layers with subsambling layers. \nClassification is performed with dense layers followed by a final softmax layer. \nFor image classification, this architecture performs better than an entirely fully connected feed forward neural network (but for MNIST dataset, truth be sayed, it would also work fne since data is simple).","63ae4411":"Our goal is to avoid overfitting. We can enlarge amount of data in order to cover cases when\ndigit is written small, not centered or even rotated.\n\nApproaches that alter the training data in ways that change the array representation while keeping \nthe label the same are known as data augmentation techniques. \nSome popular augmentations are: grayscales, horizontal flips, vertical flips, random crops, color jitters, translations, rotations.\n\nData augmentation may increase score up to 1-1.5%. It is huge.","dfdd1e6e":"We see that there are no empty data in datasets. Very good luck! Move on.","2bca51eb":"### Predict ###","2fea733c":"Keras expects the training targets to be 10-dimensional vectors, since there are 10 nodes in our Softmax \noutput layer.  \nOn the other hand our train and test datasets contain single integers representing the class for each image.\nKeras has a 'to_categorical' methid, which turns our array of class integers into an array of one-hot \nvectors instead.  \nFor example, 2 would become [0, 0, 1, 0, 0, 0, 0, 0, 0, 0] etc.","0852e92b":"## Data load ##","0a416107":"Scientists created lots of network architectures coveryng lots of real-world problem. \nEvery of them actually can be used in adressing our classical \"hello-world\" problem, but let heavy artillery \nbe used for heavy tasks.\n\nDetailed description of the CNN nodes, as well as methods for choosing the architecture are shown in [6].\n\nFor example, let our CNN architecure be like this:\nIn -> Conv2D (relu)-> MaxPool2D -> Dropout -> Flatten -> Dense (relu) -> Dropout -> Dense (softmax)-> Out\n\nIt has kind of classical form.","111fc31e":"We need to give to our model the ability to make predictions. \nLets do it by using de-facto standard final layer for a multiclass classification problem: the Softmax layer,\nwhich is a fully-connected (dense) layer that uses the Softmax function as its activation.","bd506fa2":"In order to validate our models result we have to use classical approcah: split our train data into \ntwo parts: train and validation subsets. A good idea is deviding in 90% for train and 10% for validation\nneed. Such proportion allows to teach model on enough amount of data and on the other hand for validation\npurpose we ususally don't need more than 10%.","0c21d05d":"In order to make the optimizer converge faster and closest to the global minimum of the loss function. \nThe LR is the step by which the optimizer walks through the 'loss landscape'. The higher LR, the bigger are the steps and the quicker is the convergence.","f09231df":"### Check missing data ###","c26e47bb":"We obtain 99,52% accuracy. Good.","a8f26ec7":"Every Keras model is built using the Sequential class, which represents a linear stack of layers (there are also more complex and functional Model class, but for now we will not dive deep into it).\nWe\u2019ll be using the Sequential model, our CNN will be a linear stack of layers.\n\nThe Sequential constructor takes an array of Keras Layers.  \nWe\u2019ll use 3 types of layers for our CNN: Convolutional, Max Pooling (MaxPool2D), and Softmax.\n\nWe will first build a very simple network, try to predict and then build second more complex model in\norder to improve our score (if need) and evaluate how much gain the complexity of the model can give.","72859272":"**NB**  \nChoosing 3 factors is empyrical action as well as tuning model hyperparameters. Both of them\nhave a lot of options and variants. For now lets use well-known ones.","a0d98001":"## Data preprocessing ##"}}