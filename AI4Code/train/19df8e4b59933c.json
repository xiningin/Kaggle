{"cell_type":{"6ae47bf9":"code","c83e8e7c":"code","92d4434f":"code","bf1de9de":"code","269b1876":"code","e6d56305":"code","20c95751":"code","05bdb81a":"code","413eaa7c":"code","ebc74956":"code","9548a9f1":"code","c6f3a678":"code","a5a73333":"code","c1e0e6ca":"code","e6585b01":"code","c693f753":"code","88fff84c":"code","9fd56f6b":"code","ee6eae15":"markdown","3fc132e1":"markdown"},"source":{"6ae47bf9":"# install the original detectron2\n!python -m pip install detectron2 -f https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu110\/torch1.7\/index.html\n# install weighted boxes fusion\n!python -m pip install ensemble-boxes","c83e8e7c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nfrom ensemble_boxes import weighted_boxes_fusion\nimport cv2\nimport os\nimport zipfile\nfrom tqdm import tqdm\n\nfrom detectron2.data import detection_utils as utils\n\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.utils.visualizer import Visualizer","92d4434f":"input_dir = '..\/input\/cowboyoutfits'\ndf_valid = pd.read_csv(os.path.join(input_dir, 'valid.csv'))\ndf_test = pd.read_csv(os.path.join(input_dir, 'test.csv'))","bf1de9de":"categories = [87,131,318,588,1034]\ndef create_submission(df,predictor):\n    results = []\n    for _,row in tqdm(df.iterrows(),total=df.shape[0]):\n        img_id = row['id']\n        file_name = row['file_name']\n        image = utils.read_image(os.path.join(input_dir, 'images', row['file_name']), format=\"BGR\")\n        width = image.shape[0]\n        height = image.shape[1]\n        outputs = predictor(image)\n        bboxes = outputs[\"instances\"].to(\"cpu\").pred_boxes\n        classes = outputs[\"instances\"].to(\"cpu\").pred_classes\n        for i,box in enumerate(outputs[\"instances\"].to(\"cpu\").pred_boxes.__iter__()):\n            cowboy_class = outputs[\"instances\"].to(\"cpu\").pred_classes.tolist()[i]\n            score = outputs[\"instances\"].to(\"cpu\").scores.tolist()[i]\n            box[2:4] = box[2:4] - box[0:2]\n            pred = {'image_id': img_id,\n                    'category_id': categories[cowboy_class],\n                    'bbox': box.tolist(),\n                    'score': score}\n            results.append(pred)\n    return results","269b1876":"cfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-Detection\/faster_rcnn_R_50_FPN_3x.yaml\"))\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.1\nmodel_dir = '..\/input\/cowboy-models'\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 5\n","e6d56305":"# create submissions from 5 models trained by different folds of data\n# better run with GPU\ncheckpoint_name = 'best_fold0.pth'\ncfg.MODEL.WEIGHTS = os.path.join(model_dir, checkpoint_name)\npredictor = DefaultPredictor(cfg)\nsubmission_f0 = create_submission(df_test,predictor)\ndf_submission_f0 = pd.json_normalize(submission_f0)\n\ncheckpoint_name = 'best_fold1.pth'\ncfg.MODEL.WEIGHTS = os.path.join(model_dir, checkpoint_name)\npredictor = DefaultPredictor(cfg)\nsubmission_f1 = create_submission(df_test,predictor)\ndf_submission_f1 = pd.json_normalize(submission_f1)\n\ncheckpoint_name = 'best_fold2.pth'\ncfg.MODEL.WEIGHTS = os.path.join(model_dir, checkpoint_name)\npredictor = DefaultPredictor(cfg)\nsubmission_f2 = create_submission(df_test,predictor)\ndf_submission_f2 = pd.json_normalize(submission_f2)\n\ncheckpoint_name = 'best_fold3.pth'\ncfg.MODEL.WEIGHTS = os.path.join(model_dir, checkpoint_name)\npredictor = DefaultPredictor(cfg)\nsubmission_f3 = create_submission(df_test,predictor)\ndf_submission_f3 = pd.json_normalize(submission_f3)\n\ncheckpoint_name = 'best_fold4.pth'\ncfg.MODEL.WEIGHTS = os.path.join(model_dir, checkpoint_name)\npredictor = DefaultPredictor(cfg)\nsubmission_f4 = create_submission(df_test,predictor)\ndf_submission_f4 = pd.json_normalize(submission_f4)","20c95751":"df_submission_f0['fold']=0\ndf_submission_f1['fold']=1\ndf_submission_f2['fold']=2\ndf_submission_f3['fold']=3\ndf_submission_f4['fold']=4\ndf_submission_all = pd.concat([df_submission_f0,df_submission_f1,df_submission_f2,df_submission_f3,df_submission_f4])","05bdb81a":"def read_pred_per_image(df, image_id, width, height):\n    boxes_sub_list = []\n    scores_sub_list = []\n    labels_sub_list = []\n    for iter,row in df[df['image_id'] == image_id].iterrows():\n        box = row['bbox'].copy()\n        box[0] = max(0,box[0]\/width)\n        box[1] = max(0,box[1]\/height)\n        box[2] = min(1,box[2]\/width + box[0])\n        box[3] = min(1,box[3]\/height + box[1])\n        boxes_sub_list.append(box)\n        scores_sub_list.append(row['score'])\n        labels_sub_list.append(row['category_id'])\n    return boxes_sub_list, scores_sub_list, labels_sub_list","413eaa7c":"def WBF_per_image(df, image_id, width, height, iou_thr=0.5):\n    boxes_list = []\n    scores_list = []\n    labels_list = []\n    for i in range(5):\n        df_pred = df[df['fold']==i]\n        boxes_sub_list, scores_sub_list, labels_sub_list = read_pred_per_image(df_pred, image_id, width, height)\n        if len(labels_sub_list)>0:\n            boxes_list.append(boxes_sub_list)\n            scores_list.append(scores_sub_list)\n            labels_list.append(labels_sub_list)\n    if(len(labels_list)==0):\n        boxes = []\n        scores = []\n        labels = []\n    \n    weights = np.ones(len(labels_list))\n    boxes, scores, labels = weighted_boxes_fusion(boxes_list, scores_list, labels_list, weights=weights, iou_thr=iou_thr)\n    return boxes, scores, labels","ebc74956":"def create_ensemble_submission(df_img,df_pred):\n    df = df_img\n    results = []\n    for _,row in tqdm(df.iterrows(),total=df.shape[0]):\n        image_id = row['id']\n        file_name = row['file_name']\n        image = cv2.imread(os.path.join(input_dir, 'images', file_name))\n        width = image.shape[1]\n        height = image.shape[0]\n        boxes, scores, labels = WBF_per_image(df = df_pred, image_id=image_id, width=width, height=height, iou_thr=0.5)\n        if len(labels)>0:\n            for i,box in enumerate(boxes.__iter__()):\n                cowboy_class = labels[i]\n                score = scores[i]\n                box[2:4] = box[2:4] - box[0:2]\n                box = [box[0]*width,box[1]*height,box[2]*width,box[3]*height]\n                pred = {'image_id': image_id,'category_id': cowboy_class,'bbox': box,'score': score}\n                results.append(pred)\n    return results","9548a9f1":"# it is ok to run the ensemble part in CPU after all the predictions have been made\nresult_5folds = create_ensemble_submission(df_test,df_submission_all)","c6f3a678":"df_result_5folds = pd.json_normalize(result_5folds)","a5a73333":"# check results\ndf_result_5folds","c1e0e6ca":"df_result_5folds['category_id'] = df_result_5folds['category_id'].astype('int', copy=False, errors='raise')","e6585b01":"df_result_5folds['score'].hist()","c693f753":"df_test_sub = df_result_5folds[df_result_5folds['score']>0.1]\ndf_test_sub.head()","88fff84c":"df_test_sub.shape","9fd56f6b":"submission_name = 'df_test_sub.json'\ndf_test_sub.to_json(submission_name,orient='records')\nzf = zipfile.ZipFile('df_test_sub.zip', 'w')\nzf.write(submission_name, 'answer.json')\nzf.close()","ee6eae15":"# Submission","3fc132e1":"# Ensemble using weighted boxes fusion"}}