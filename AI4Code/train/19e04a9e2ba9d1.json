{"cell_type":{"09205853":"code","0c1a9825":"code","1596872a":"code","bb4ff2af":"code","1dae3b31":"code","9e9870b0":"code","26a71960":"code","c8a4ee82":"code","e135d526":"code","91d4211c":"code","9081d914":"code","42bb5c1f":"code","2b8f4d12":"code","ddf5159d":"code","08056186":"markdown","1da618e7":"markdown","d61f82a5":"markdown","81dac056":"markdown","b42e1f16":"markdown","b79dffdf":"markdown","c0dd1e6c":"markdown","71752022":"markdown","a302ab24":"markdown","92dd13d5":"markdown","206f9100":"markdown","e1bb6e4c":"markdown","ecdd11a9":"markdown","fe10243f":"markdown","e3e09529":"markdown","084726af":"markdown"},"source":{"09205853":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nplt.style.use(\"seaborn-pastel\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0c1a9825":"df = pd.read_csv(\"\/kaggle\/input\/forbes-celebrity-100-since-2005\/forbes_celebrity_100.csv\")\ndf.head()","1596872a":"df.info()","bb4ff2af":"df.groupby(\"Year\").agg(Celebrity_Count=(\"Name\",\"count\"))","1dae3b31":"df.groupby(\"Name\").first()[\"Category\"].value_counts().plot(kind=\"pie\",autopct=\"%.0f%%\",pctdistance=0.8,\n                                                          wedgeprops=dict(width=0.4),figsize=(8,8))\nplt.ylabel(None)\nplt.show()","9e9870b0":"len(df.Name.unique())","26a71960":"earning_by_category = df.groupby(\"Category\").agg(celebrity_count=(\"Name\",\"count\"),\n                          total_earning=(\"Pay (USD millions)\",\"sum\"),\n                          mean_earning=(\"Pay (USD millions)\",\"mean\")).sort_values(\"total_earning\",ascending=False)\nearning_by_category","c8a4ee82":"plt.figure(figsize=(12,7))\nsns.barplot(data=earning_by_category,x=\"total_earning\",y=earning_by_category.index,orient=\"h\")\nplt.title(\"Sum of Earnings by Category (2005-2019)\",fontweight=\"bold\",fontsize=16)\nplt.xlabel(\"Earning (in USD millions)\")\nfor i,count in enumerate(earning_by_category.celebrity_count):\n    use = earning_by_category.total_earning[i]\/1000\n    plt.text(-1500,i,count,va=\"center\")\n    plt.text(earning_by_category.total_earning[i],i,\n             f\"{int(use)}Bn\" if use>1 else f\"{round(use,2)}Bn\")\nplt.xlim(left=-2500)\nplt.text(-2000,-0.6,\"Celebrity\\nCount\",fontweight=\"bold\")\nplt.show()","e135d526":"plt.figure(figsize=(12,7))  \nsns.barplot(data=earning_by_category,x=\"mean_earning\",y=earning_by_category.index,orient=\"h\",\n            order=earning_by_category.sort_values(\"mean_earning\",ascending=False).index)\nplt.title(\"Average Yearly Earnings by Category\",fontweight=\"bold\",fontsize=16)\nplt.xlabel(\"Earning (in USD millions)\")\nfor i,earn in enumerate(earning_by_category.sort_values(\"mean_earning\",ascending=False).mean_earning):\n    plt.text(earn,i,f\"{round(earn,1)}M\")\n\nplt.tight_layout()\nplt.show()","91d4211c":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(20,7))\nsns.barplot(data=df,x=\"Pay (USD millions)\",y=\"Category\",orient=\"h\",estimator=np.sum,ax=ax1)\nsns.barplot(data=df,x=\"Pay (USD millions)\",y=\"Category\",orient=\"h\",ax=ax2)\nplt.tight_layout()\nplt.show()","9081d914":"top_paid = df.groupby(\"Name\").agg(pay=(\"Pay (USD millions)\",\"sum\"),\n                      category=(\"Category\",\"first\"),av_pay=(\"Pay (USD millions)\",\"mean\")).sort_values(\"pay\",ascending=False).head(15)\nplt.figure(figsize=(12,7))\nsns.barplot(data=top_paid,x=\"pay\",y=top_paid.index,orient=\"h\")\nsns.barplot(data=top_paid,x=\"av_pay\",y=top_paid.index,orient=\"h\",color=\"sandybrown\")\nplt.xlabel(\"Earning (USD Millions)\")\nplt.title(\"Top Earning Celebrities (2005-2019)\",fontweight=\"bold\",fontsize=16)\nplt.text(0,-0.8,\"Average Annual Pay\",fontweight=\"bold\")\nfor i,pay in enumerate(top_paid.pay):\n    plt.text(pay,i,f\"{int(pay)}M\",va=\"center\")\n    plt.text(top_paid.av_pay[i],i,f\"{int(top_paid.av_pay[i])}M\",va=\"center\")\n    \nplt.ylabel(None)\nplt.show()","42bb5c1f":"top_paid = df[df.Category == \"Athletes\"].groupby(\"Name\").agg(pay=(\"Pay (USD millions)\",\"sum\"),\n                      category=(\"Category\",\"first\"),av_pay=(\"Pay (USD millions)\",\"mean\")).sort_values(\"pay\",ascending=False).head(15)\nplt.figure(figsize=(12,7))\nsns.barplot(data=top_paid,x=\"pay\",y=top_paid.index,orient=\"h\")\nsns.barplot(data=top_paid,x=\"av_pay\",y=top_paid.index,orient=\"h\",color=\"sandybrown\")\nplt.xlabel(\"Earning (USD Millions)\")\nplt.title(\"Top Earning Athletes (2005-2019)\",fontweight=\"bold\",fontsize=16)\nplt.text(0,-0.8,\"Average Annual Pay\",fontweight=\"bold\")\nfor i,pay in enumerate(top_paid.pay):\n    plt.text(pay,i,f\"{int(pay)}M\",va=\"center\")\n    plt.text(top_paid.av_pay[i],i,f\"{int(top_paid.av_pay[i])}M\",va=\"center\")\n    \nplt.ylabel(None)\nplt.show()","2b8f4d12":"top_paid = df[df.Category == \"Actors\"].groupby(\"Name\").agg(pay=(\"Pay (USD millions)\",\"sum\"),\n                      category=(\"Category\",\"first\"),av_pay=(\"Pay (USD millions)\",\"mean\")).sort_values(\"pay\",ascending=False).head(15)\nplt.figure(figsize=(12,7))\nsns.barplot(data=top_paid,x=\"pay\",y=top_paid.index,orient=\"h\")\nsns.barplot(data=top_paid,x=\"av_pay\",y=top_paid.index,orient=\"h\",color=\"sandybrown\")\nplt.xlabel(\"Earning (USD Millions)\")\nplt.title(\"Top Earning Actors (2005-2019)\",fontweight=\"bold\",fontsize=16)\nplt.text(0,-0.8,\"Average Annual Pay\",fontweight=\"bold\")\nfor i,pay in enumerate(top_paid.pay):\n    plt.text(pay,i,f\"{int(pay)}M\",va=\"center\")\n    plt.text(top_paid.av_pay[i],i,f\"{int(top_paid.av_pay[i])}M\",va=\"center\")\n    \nplt.ylabel(None)\nplt.show()","ddf5159d":"from matplotlib.animation import FuncAnimation, FFMpegWriter\n\ndata = df[df.Category==\"Actors\"].pivot_table(values=\"Pay (USD millions)\",index=\"Year\",columns=\"Name\").cumsum().fillna(method=\"ffill\")\ndata.index = pd.to_datetime(data.index,format=\"%Y\")\ndata = data.resample(\"D\").interpolate(method=\"linear\")[::7]\n\n#select top paid actors only\ndata = data[top_paid.index]\n\nfig,ax = plt.subplots(figsize=(12,7))\nfig.subplots_adjust(left=0.15)\nno_of_frames = data.shape[0] #Number of frames\n\n#initiate the barplot with the first rows of the dataframe\nbars = sns.barplot(y=data.columns,x=data.iloc[0,:],orient=\"h\",ax=ax)\nax.set_xlim(0,1000)\ntxts = [ax.text(0,i,0,va=\"center\") for i in range(data.shape[1])]\ntitle_txt = ax.text(500,-1,\"Date: \",fontsize=12)\nax.set_xlabel(\"Pay (Millions USD)\")\nax.set_ylabel(None)\n\ndef animate(i):\n    print(\"{0}\/{1}\".format(i,no_of_frames-1),end=\"\\r\")\n    #get i'th row of data \n    y = data.iloc[i,:]\n    \n    #update title of the barplot axis\n    title_txt.set_text(f\"Date: {str(data.index[i].date())}\")\n    \n    #update elements in both plots\n    for j, b, in enumerate(bars.patches):\n        #update each bar's height\n        b.set_width(y[j])\n        \n        #update text for each bar (optional)\n        txts[j].set_text((y[j].astype(int)))\n        txts[j].set_x(y[j])\n\nprint(\"Creating Animation\")\nanim=FuncAnimation(fig,animate,repeat=True,frames=no_of_frames,interval=1,blit=False)\nprint(\"Saving into .gif file\")\nanim.save('actors.gif', writer='imagemagick',fps=30)\nplt.close(fig)","08056186":"![](.\/actors.gif)","1da618e7":"### Highest Paid Celebrities","d61f82a5":"There are 452 unique names in the data","81dac056":"The dataset contains salary\/earning information of top 100 celebrities published by Forbes in the form of \"Celebrity 100\" list.\n\nColumns of the table:\n* **Name**: Celebrity name\n* **Pay (USD millions)**: Earning of the celebrity for the given year\n* **Year**: Year of the earning (YYYY format)\n* **Category**: Category of fame such as athlete, actor, actress etc.","b42e1f16":"The above graphs can also be shown without using groupby functions:","b79dffdf":"![](.\/messi2.gif)","c0dd1e6c":"### Breakdown of the Category column\n\n* Celebrities are represented in 13 different categories\n* Athletes and musicians are almost half of the celebrities (48%)\n* Actors and actresses (including TV actors and TV actresses) constitutes of 25% of the names","71752022":"### Top Earning Athletes","a302ab24":"Even though the list expected to have 100 entries per year as the name indicates, it is changed on 2014. Since then the list have varying number of celebrities per year.","92dd13d5":"### Animate cumulative pays of Actors (2005-2019)","206f9100":"Animation saved in a .gif file which looks like below:","e1bb6e4c":"## Load Data","ecdd11a9":"## Exploratory Data Analysis","fe10243f":"## Earning of the Categories\n* Musicians and Athletes tops the list on total earnings as they are represented with larger counts\n* Directors\/Producers makes the most average annual earnings amongst the other categories","e3e09529":"### Top Earning Actors","084726af":"The data consist of 4 columns and 1647 rows. Each row represents a celebrity's pay for a given year. The dataset is ordered by column 'year'."}}