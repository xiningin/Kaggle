{"cell_type":{"e8d2f8ea":"code","898506d4":"code","7d20bf18":"code","432e0fda":"code","0b45bced":"code","6bcd6cdf":"code","bbe54e41":"code","fc5be0a6":"code","5130f98c":"code","b99cbc09":"code","cbd28925":"code","59fcdaa6":"code","b94373e8":"code","69f803b4":"code","afa9b9b1":"code","af5bea0b":"code","cc3cb15a":"code","f283225e":"code","d9b9cf0c":"code","0c6c14f7":"code","5c1c5b47":"code","f1af033c":"code","c37a5fce":"code","bbc3d625":"code","206bf9eb":"code","0e160bfc":"code","84431742":"code","eee311e5":"code","0475df77":"code","d5b35d14":"code","833d00b5":"code","da9bd282":"code","6bebfac8":"code","8b8c11f8":"code","4bb92221":"code","c1998730":"code","feacbb62":"code","30e331f6":"code","d5e9a372":"code","09d2db92":"code","6d778a1f":"code","2c50b749":"code","45b7294d":"code","b77e97e7":"code","6d6c5dbf":"code","1e0b82ec":"code","76ebf097":"code","62866f23":"code","ebee97e1":"code","c416e6c6":"code","390a3b2a":"code","168f1e84":"code","28eaed77":"code","ff35a0be":"code","bb9fca87":"code","5379a004":"code","9969c9f5":"code","274549e3":"code","6649ea8a":"code","75907831":"code","df7721f5":"code","9a901563":"code","29cc2e1e":"code","cc993c5f":"code","9eeec1b5":"markdown","3da0bb37":"markdown","de905663":"markdown","3e02bae1":"markdown","f8cc41c8":"markdown","5e104a8f":"markdown","71fd96e9":"markdown","49c28db3":"markdown","30c83815":"markdown","c21c47cf":"markdown","e5d9a02c":"markdown","86c7b224":"markdown","29385cfb":"markdown","38d2a7c9":"markdown","272ebe12":"markdown","7001d45d":"markdown","d64224ac":"markdown","3afc2bfb":"markdown","76b3095e":"markdown","2b8965d9":"markdown","78a2c82c":"markdown","11ebf35f":"markdown","74fec7b3":"markdown","7e5bbdb7":"markdown","bfe9e0f1":"markdown","39c0b951":"markdown","9a2deda6":"markdown","026d5469":"markdown","1a9d1d66":"markdown","bfe41c56":"markdown","cb3a47e1":"markdown","bd1598ae":"markdown","23a33641":"markdown","449118a8":"markdown","2debe52a":"markdown","946360ad":"markdown","870dd90a":"markdown","cf39e4a2":"markdown","d0baec09":"markdown","358735e9":"markdown","554ce072":"markdown","76d4ceb3":"markdown","e7fca790":"markdown","e423d01a":"markdown","9bc4f80e":"markdown","f24cb260":"markdown","f66c1415":"markdown","77162133":"markdown","07fe949e":"markdown","af573c1e":"markdown","67de1a9c":"markdown","c3ea607e":"markdown","38a694c2":"markdown","fadd7957":"markdown","5e59a16f":"markdown","f582dc9e":"markdown","1bf0c021":"markdown","5ce103a0":"markdown","e4f3f690":"markdown","f261f686":"markdown","792f8d09":"markdown","c697f5fc":"markdown","1c578eed":"markdown","98966ba1":"markdown"},"source":{"e8d2f8ea":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","898506d4":"df = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","7d20bf18":"df.info()","432e0fda":"df.isna().sum()","0b45bced":"# Plot missing values in columns\nimport missingno #Python library for the exploratory visualization of missing data #install using !pip install missingno\ncolor= ['dimgrey','dimgrey','dimgrey','darkblue','blue','blue','lightblue','dimgrey','dimgrey','dimgrey','dimgrey','dimgrey']\nmissingno.bar(df,fontsize=10,color=color,figsize=(10,5))\nplt.title('COLUMN WISE MISSING VALUES',fontsize=20)","6bcd6cdf":"df['country'] = df['country'].fillna(df['country'].mode()[0])\ndf['date_added'] = df['date_added'].fillna(df['date_added'].mode()[0])\ndf['rating'] = df['rating'].fillna(df['country'].mode()[0])","bbe54e41":"df = df.dropna( how='any',subset=['cast', 'director'])","fc5be0a6":"df.isna().sum()","5130f98c":"df.duplicated().sum()","b99cbc09":"#Rename the 'listed_in' column as 'Genre' for easy understanding\ndf = df.rename(columns={\"listed_in\":\"Genre\"})\ndf['Genre'] = df['Genre'].apply(lambda x: x.split(\",\")[0])\ndf['Genre'].head()","cbd28925":"df['year_add'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['year_add'].head()","59fcdaa6":"df['month_add'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf['month_add'].head()","b94373e8":"df['country_main'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf['country_main'].head()","69f803b4":"df['type'].value_counts()","afa9b9b1":"df['rating'].value_counts()","af5bea0b":"movie_df = df[df['type'] == 'Movie']\ntv_df = df[df['type'] == 'TV Show']","cc3cb15a":"movie_df.head()","f283225e":"sb.set(style=\"darkgrid\")\nsb.countplot(x=\"type\", data= df, palette=\"Set2\")","d9b9cf0c":"#MOVIES RATINGS\nplt.figure(figsize=(12,10))\nsb.set(style=\"darkgrid\")\nsb.countplot(x=\"rating\", data= movie_df, palette=\"Set2\", order=movie_df['rating'].value_counts().index[0:15])","0c6c14f7":"# TV SHOWS RATINGS\nplt.figure(figsize=(12,10))\nsb.set(style=\"darkgrid\")\nsb.countplot(x=\"rating\", data=tv_df, palette=\"Accent\", order=tv_df['rating'].value_counts().index[0:15])","5c1c5b47":"plt.figure(figsize=(12,10))\nsb.set(style=\"darkgrid\")\nsb.countplot(y=\"release_year\", data= df, palette=\"cool\", order= df['release_year'].value_counts().index[0:15],hue=df['type'])","f1af033c":"movie_df['duration']=movie_df['duration'].str.replace(' min','')\nmovie_df['duration']=movie_df['duration'].astype(str).astype(int)\nmovie_df['duration']","c37a5fce":"sb.set(style=\"darkgrid\")\nsb.kdeplot(data=movie_df['duration'], shade=True)","bbc3d625":"duration_year = movie_df.groupby(['release_year']).mean()\nduration_year = duration_year.sort_index()\n\nplt.figure(figsize=(15,6))\nsb.lineplot(x=duration_year.index, y=duration_year.duration.values)\nplt.box(on=None)\nplt.ylabel('Movie duration in minutes');\nplt.xlabel('Year of released');\nplt.title(\"Trends of Movie's Duration over the Years\", fontsize=20, color='Green');","206bf9eb":"tv_df['duration']=tv_df['duration'].str.replace(' Season','')\ntv_df['duration']=tv_df['duration'].str.replace('s','')\ntv_df['duration']=tv_df['duration'].astype(str).astype(int)\ntv_df['duration']","0e160bfc":"#Extract the columns from tv_df\ncolumns=['title','duration']\ntv_shows = tv_df[columns]","84431742":"#sort the dataframe by number of seasons\ntv_shows = tv_shows.sort_values(by='duration',ascending=False)\ntv_shows\ntop20 = tv_shows[0:20]\ntop20","eee311e5":"plt.figure(figsize=(10,6))\ntop20.plot(kind='bar',x='title',y='duration', color='purple')","0475df77":"# TV SHOWS AND THEIR SEASONS\nplt.figure(figsize=(8, 6))\nlabels=['1 Season', '2 Season', '3 Season']\n_, _, texts = plt.pie(df.duration.value_counts()[:3], labels=labels, autopct='%1.2f%%', startangle=90, \n                      explode=(0.0, 0.1, 0.2), colors=['#003f5c', '#bc5090', '#ffa600'])\nplt.axis('equal')\nplt.title('Seasons Available on Netflix', fontsize=20, fontweight='bold');\nfor text in texts:\n    text.set_color('white')","d5b35d14":"plt.figure(figsize=(15,8))\nsb.set(style=\"darkgrid\")\nsb.countplot(x=\"country_main\", data=movie_df, palette=\"Accent\", order=movie_df['country_main'].value_counts().index[0:15])","833d00b5":"plt.figure(figsize=(18,8))\nsb.set(style=\"darkgrid\")\nsb.countplot(x=\"country_main\", data=tv_df, palette=\"Accent\", order=tv_df['country_main'].value_counts().index[0:15])","da9bd282":"# Different Genres from Countries\ncolumns=['Genre','country_main']\ngen_country = df[columns]","6bebfac8":"gen_country.head()","8b8c11f8":"gen_country['Genre'].value_counts()","4bb92221":"size = gen_country['Genre'].value_counts().tolist()\nsize","c1998730":"# GENRES BY COUNTRIES\nimport squarify\nplt.figure(figsize=(30,15))\nsquarify.plot(value= gen_country['Genre'], label= gen_country['country_main'], sizes= size, alpha=0.8)\nplt.rc('font', size=14)\nplt.show()","feacbb62":"release = df['release_year'].value_counts()\nrelease = release.sort_index(ascending=True)\n\nplt.figure(figsize=(9,7))\nplt.plot(release[-11:-1])\nplt.scatter(release[-11:-1].index, release[-11:-1].values, s=0.5*release[-11:-1].values, c='Red');\nplt.box(on=None);\nplt.xticks(rotation = 60)\nplt.xticks(release[-11:-1].index);\nplt.title('Number of Content Released by Year', color='red', fontsize=20);","30e331f6":"plt.figure(figsize=(10,8))\nsb.barplot(y= movie_df.director.value_counts()[:10].sort_values().index, x=movie_df.director.value_counts()[:10].sort_values().values);\nplt.title('Director with most number of movies', color='red', fontsize=18)\nplt.xticks(movie_df.director.value_counts()[:10].sort_values().values);\nplt.xlabel('Number of Movies Released');\n","d5e9a372":"plt.figure(figsize=(10,8))\nsb.barplot(y= tv_df.director.value_counts()[:10].sort_values().index, x=tv_df.director.value_counts()[:10].sort_values().values);\nplt.title('Director with most number of TV Shows', color='green', fontsize=18)\nplt.xticks(tv_df.director.value_counts()[:10].sort_values().values);\nplt.xlabel('Number of Series Released');","09d2db92":"plt.figure(figsize=(18,10))\nsb.barplot(x= df.Genre.value_counts()[:10].sort_values().index, y=df.Genre.value_counts()[:10].sort_values().values,palette='GnBu');\nplt.title('Most Popular Genre', color='Blue', fontsize=20)\nplt.yticks(df.Genre.value_counts()[:10].sort_values().values);\nplt.xlabel('GENRES');\nplt.ylabel('Number of contents');","6d778a1f":"plt.figure(figsize=(18,14))\nsb.barplot(y= df.cast.value_counts()[:15].sort_values().index, x=df.cast.value_counts()[:15].sort_values().values,palette='gnuplot_r');\nplt.title('Top Actor\/Actresses on Netflix', color='purple', fontsize=30)\nplt.xticks(df.cast.value_counts()[:10].sort_values().values);\nplt.ylabel('Actor\/Actresses', fontsize=25);\nplt.xlabel('Content counts', fontsize=25);","2c50b749":"df_copy = df.copy()\nnet_date = df_copy[['date_added']]\nnet_date['year'] = net_date['date_added'].apply(lambda x : x.split(', ')[-1])\nnet_date['month'] = net_date['date_added'].apply(lambda x : x.lstrip().split(' ')[0])\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\ndf_copy = net_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\n","45b7294d":"plt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(df_copy, cmap='BrBG', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(df_copy.columns), 1), df_copy.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(df_copy.index), 1), df_copy.index, fontsize=7, fontfamily='serif')\n\nplt.title('Netflix Contents Update', fontsize=12, fontfamily='calibri', fontweight='bold')\ncbar = plt.colorbar()\ncbar.solids.set_edgecolor(\"face\")\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","b77e97e7":"df['description'].head()","6d6c5dbf":"from sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')","1e0b82ec":"#Replace NaN with an empty string\ndf['description'] = df['description'].fillna('')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(df['description'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","76ebf097":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","62866f23":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(df.index, index=df['title']).drop_duplicates()","ebee97e1":"def get_recommendations(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","c416e6c6":"get_recommendations('#realityhigh')","390a3b2a":"get_recommendations('PK')","168f1e84":"features=['Genre','director','cast','description','title']\nfilters = df[features]","28eaed77":"#Cleaning the data by making all the words in lower case.\ndef clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","ff35a0be":"for feature in features:\n    filters[feature] = filters[feature].apply(clean_data)\n    \nfilters.head()","bb9fca87":"def create_soup(x):\n    return x['director'] + ' ' + x['cast'] + ' ' +x['Genre']+' '+ x['description']","5379a004":"filters['soup'] = filters.apply(create_soup, axis=1)","9969c9f5":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filters['soup'])","274549e3":"# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)","6649ea8a":"filters","75907831":"# Reset index of our main DataFrame and construct reverse mapping as before\nfilters=filters.reset_index()\nindices = pd.Series(filters.index, index=filters['title'])","df7721f5":"def get_recommendations_new(title, cosine_sim=cosine_sim):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","9a901563":"get_recommendations_new('PK', cosine_sim2)","29cc2e1e":"get_recommendations_new('Black panther', cosine_sim2)","cc993c5f":"get_recommendations_new('Naruto', cosine_sim2)","9eeec1b5":"- Actor **'Samuel West'** has highest number of movies\/Tv shows on Netflix.","3da0bb37":"From the Genre,cast and director features, we need to extract the three most important actors, the director and genres associated with that movie.","de905663":"### --> Number of Movies vs TV Shows","3e02bae1":"Adding some new columns:\n- listed_in - Genre\n* Year Added - year_add\n* Month Added - month_add\n* Princial Country - country_main ","f8cc41c8":"- The largest count of movies are made with the 'TV-MA' rating.\"TV-MA\" is a rating assigned by the TV Parental Guidelines to a television program that was designed for mature audiences only. \n- Second largest is the 'TV-14' stands for content that may be inappropriate for children younger than 14 years of age.\n- Third largest is the  very popular 'R' rating.An R-rated film is a film that has been assessed as having material which may be unsuitable for children under the age of 17.","5e104a8f":"### We can see that our improved Recommendation System works very well.","71fd96e9":"## Do share your feedbacks as well as suggestions on how can this EDA be improved,which other visualisations can also be added.I would highly appreciate any kind of ideas.\u2728\n# Kindly **Upvote** if you find it useful.\ud83d\ude0a","49c28db3":"Netflix is the world's leading streaming entertainment service with 208 million paid memberships in over 190 countries enjoying TV series, documentaries and feature films across a wide variety of genres and languages. Members can watch as much as they want, anytime, anywhere, on any internet-connected screen. Members can play, pause and resume watching, all without commercials or commitments.","30c83815":"# <center> \ud83d\udcfaNetflix EDA and Movie Recommendation System\ud83d\ude0e\ud83c\udf7f","c21c47cf":"## 4. Netflix Recommendation System","e5d9a02c":"-- we need a mechanism to identify the index of a movie in our metadata DataFrame, given its title.","86c7b224":"### --> Yearly Analysis of content","29385cfb":"### --> Movies & TV Shows Ratings analysis","38d2a7c9":"- **United States,United Kingdom,South Korea,Japan** creates most of the amount of TV Shows on netflix.","272ebe12":"### -->Understanding what content is available in different countries","7001d45d":"- This is completely plot based recommendations. we can see these are not so accurate, so we can try to add more metrics to improve model performance.","d64224ac":"- We can see that Netflix released most number of content in year 2017.\n- Noticeable growth in releasing content can be seen from the year 2015.","3afc2bfb":"- From the chart we can analyze, **35.04% TV Shows has only 1 Season,32.48% TV Shows has 2 seasons and 32.48% Tv Shows has 3 seasons** available","76b3095e":"- **Supernatural , Naruto** has the highest numbers of seasons","2b8965d9":"- **United States** creates highest amount of movies followed by ***India and UK.***\n","78a2c82c":"- All the missing values in the dataset have either been removed or filled. There are no missing values left.","11ebf35f":"The next steps are the same as what we did with our plot description based recommender. One important difference is that we use the **CountVectorizer()** instead of TF-IDF.","74fec7b3":"### --> Cleaning the data","7e5bbdb7":"## Content Based Filtering","bfe9e0f1":"### --> Top Actor\/Actresses on Netflix","39c0b951":"### --> Contents released by years","9a2deda6":"-- Making two new dataframes, one with movies collection and other with TV shows collection:\n* movie_df\n* tv_df","026d5469":"#### We can analyse the months in which least amount of contents are added, that months can be best for directors to release their content for better audience attention.","1a9d1d66":"### --> Countries on top for TV Show content creation","bfe41c56":"- dataset has 0 duplicated values.","cb3a47e1":"## Multiple metrics(Genre,cast,director)  based Recommender System","bd1598ae":"- For this recommender system the content of the movie (cast, description, director,genre etc) is used to find its similarity with other movies. Then the movies that are most likely to be similar are recommended.","23a33641":"### --> Analysis of movies duration","449118a8":"- We will calculate similarity scores for all movies based on their plot descriptions and recommend movies based on that similarity score. The plot description is given in the **description** feature of our dataset.","2debe52a":"- There are missing values in column director,cast,country and date_added.\n- We can't randomly fill the missing values in columns of director and cast, so we can drop them.\n- For minimal number of missing values in country and date_added,rating, we can fill them using mode(most common value) and mean.","946360ad":"### Reading Data","870dd90a":"We need to convert the word vector of each overview.We'll compute Term Frequency-Inverse Document Frequency (TF-IDF) vectors for each description.The overall importance of each word to the documents in which they appear is equal to TF * IDF.This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final similarity score.","cf39e4a2":"## 2. Data Exploration","d0baec09":"![](https:\/\/www.extremetech.com\/wp-content\/uploads\/2016\/03\/Netflix-Feature.jpg)","358735e9":"### --> Most Popular Genre on Netflix","554ce072":"- Most of the TV Shows has 'TV-14' ratings which stands for the content can be inappropriate for children under 14 years of age.\n- Second highest count of ratings in TV Shows is 'TV-MA', for which the content is for matured audience only.\n- TV Shows has least amount of counts with 'R' ratings.","76d4ceb3":"- There are more Movies on Netflix than TV shows.","e7fca790":"- So, a good amount of movies on Netflix are among the **duration of 75-120 mins.**","e423d01a":"- **Netflix knows how much we all love drama..!! :p**","9bc4f80e":"### Here I have done a detailed analysis of netflix content data with awesome visualizations and built a Recommendation System.","f24cb260":"- We can now create our \"metadata soup\", which is a string that contains all the metadata that we want to feed to our vectorizer.","f66c1415":"### --> Handling missing values","77162133":"-- Let's define a function that takes in a movie title as an input and outputs a list of the 10 most similar movies.","07fe949e":"--> Extract TV Shows titles and its number of seasons:","af573c1e":"![](https:\/\/miro.medium.com\/max\/998\/1*O_GU8xLVlFx8WweIzKNCNw.png)","67de1a9c":"### --> Trends of movies duration","c3ea607e":"- In the years of **1960 to 1965**, Movies durations were over **200 minutes, after 1965 the durations became comparitively shorter.**\n- From the year **1980**, we can see consistent trend of movie durations, of which duration time is around in **between 100-150 minutes.**","38a694c2":"## Plot description based Recommender","fadd7957":"- United states produces most amount of content in 'Comedies' and 'Childern & Family movies' Genres.","5e59a16f":"### --> Best Month for directors to release content","f582dc9e":"## 1. Importing libraries","1bf0c021":"- Director **Alastair Fothergill** released **highest number of TV shows:3** on Netflix.","5ce103a0":"### --> Directors with most number of Movies produced","e4f3f690":"### --> Analysis of TV Shows with most number of seasons","f261f686":"Since we have used the TF-IDF vectorizer, calculating the dot product will directly give us the cosine similarity score. Therefore, we will use sklearn's **linear_kernel()** instead of cosine_similarities() since it is faster.","792f8d09":"- Director **Raul Campos,Jan Suter** Produced **highest number of movies: 18** on Netflix till now.","c697f5fc":"### --> Checking for missing values","1c578eed":"### --> Countries on top for movies content creation","98966ba1":"## 3. Exploratory Data Analysis"}}