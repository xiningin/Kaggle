{"cell_type":{"ad02cf6a":"code","122b1277":"markdown"},"source":{"ad02cf6a":"    import pandas as pd\n    from sklearn import tree\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score\n    \n    # Here i have used Decision Tree Algorithm \n    \n    # Load the data set\n    filename=\"\/\/kaggle\/input\/iriscsv\/Iris.csv\"\n    data_set = pd.read_csv(filename)\n    \n    data_set.head()\n\n    # Visualize the data set using seaborn for specified columns\n    # sb.violinplot(data=data_set, x='Species', y='SepalWidthCm')\n    # plt.show()\n\n    # Check whether data sets column contains any null value\n    data_set.isnull().sum()\n\n    # Check unique value on given column; unique = return the unique value\n    data_set['Species'].unique()  # nunique = return the sum of unique value of column\n\n    # Grouping the data set by passing column name data\n    group_data = data_set.groupby(by='Species')\n    # print(group_data.get_group('Iris-setosa'))\n\n    # Drop the unwanted columns from dataset\n    data_set.drop('Id', axis=1, inplace=True)\n\n    # Divide the data set to get a input columns and target column\n    input_column = data_set[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm',\n                             'PetalWidthCm']]\n    target_column = data_set['Species']\n\n    # Categorical data - Get dummies for species column\n    target_column_dummy = pd.get_dummies(target_column, prefix='Species')\n\n    # Create object for tree\n    object_tree = tree.DecisionTreeClassifier()\n\n    # Splitting the model into train  and test set by passing input columns and target column\n    x_train, x_test, y_train, y_test = train_test_split(input_column, target_column_dummy, test_size=0.2, random_state=0)\n\n    # Train the model passing training values\n    object_tree.fit(x_train, y_train)\n\n    # Predict the output by passing test value\n    predicted_x = object_tree.predict(x_test)\n\n    # Predict the output for passing random values\n    predicted_random_value = object_tree.predict([[5.0, 3.5, 1.3, 0.1]])\n    # Answer is [[1 0 0]]\n\n    # Test the score for our model by passing test set\n    object_tree.score(x_test, y_test)\n\n    # Another method to predict the accuracy score for our model\n    accuracy_score(predicted_x, y_test)","122b1277":"Multiclass Classification, Decision Tree Algorithm"}}