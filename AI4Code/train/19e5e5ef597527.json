{"cell_type":{"5fe721fc":"code","544cfba3":"code","85f7a470":"code","c9bc7215":"code","036241cb":"code","adf626a4":"code","7567aab3":"code","b47ec0cc":"code","68626baa":"code","1cc27fba":"code","c519e4e0":"code","56bf2f53":"code","f69ced57":"code","2f8ddb7c":"code","f9f14add":"code","f63805b8":"code","cce6096a":"code","f438f5ee":"code","ea8410a0":"code","12a2e083":"code","0c8bf3d8":"code","daf730f0":"code","950a51b7":"code","28d3b889":"code","b2bc9780":"code","ae2b23cb":"code","4024336b":"code","9b1c7578":"code","58a5332d":"code","7fcf042c":"code","d6826954":"code","f4e04636":"code","e7e5d33d":"code","4ddfafaa":"code","77c1582f":"code","c1e52504":"markdown","be09c03b":"markdown","785d00c4":"markdown","3cde4730":"markdown","b4ba01ca":"markdown","4cc0e5b6":"markdown","eaba3286":"markdown","d0c3420c":"markdown","a9a48ffc":"markdown","b7cb4cc2":"markdown","304f17e9":"markdown","523dd920":"markdown","c6c6a4b9":"markdown","839e2f6e":"markdown","8b6692d8":"markdown","c2492000":"markdown","1defe53c":"markdown","6fb7078b":"markdown","d4222463":"markdown","b756a32d":"markdown","12cfd12b":"markdown","6be07f8a":"markdown","d24c4ec4":"markdown","77e0a774":"markdown","cd9061be":"markdown"},"source":{"5fe721fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","544cfba3":"import pandas as pd\ndf=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.head()","85f7a470":"df.describe()","c9bc7215":"df['Survived'].value_counts().plot(kind='bar', title='Death and Survival Counts',grid=True)\nprint(df['Survived'].value_counts())\nplt.show()","036241cb":"df['Sex'].value_counts().plot(kind='bar', title='Sex')\nprint(df['Sex'].value_counts())\nplt.show()","adf626a4":"df['Pclass'].value_counts().plot(kind='bar', title='Passenger Class',alpha=0.90,grid=True)\nprint(df['Pclass'].value_counts())\nplt.show()","7567aab3":"df['Age'].plot(kind='hist',title='Age',alpha=0.90,grid=True)\nplt.show()","b47ec0cc":"rel_1=pd.crosstab(df['Pclass'],df['Survived'])\nrel_1_normalize = rel_1.div(rel_1.sum(1).astype(float), axis=0)\nrel_1_normalize.plot(kind='bar',title='Survival Rate by Passenger Classes',stacked=True,grid=True)\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')\nplt.show()","68626baa":"sexes = sorted(df['Sex'].unique())\ngenders_mapping = dict(zip(sexes, range(0, len(sexes) + 1)))\ndf['Sex_Val'] = df['Sex'].map(genders_mapping).astype(int)\ndf.head(10)","1cc27fba":"rel_2=pd.crosstab(df['Sex'],df['Survived'])\nrel_2_normalize=rel_2.div(rel_2.sum(1).astype(float),axis=0)\nrel_2_normalize.plot(kind='bar',title='Survival Rate by Sex',stacked=True,grid=True) \nplt.xlabel('Sex')\nplt.ylabel('Survival Rate')\nplt.show()","c519e4e0":"# Get the unique values of Pclass:\npassenger_classes = sorted(df['Pclass'].unique())\npassenger_classes","56bf2f53":"for i in passenger_classes:\n        print ('M : ',i ,len(df[(df['Sex'] == 'male')  & (df['Pclass'] == i)]))\n        print ('F : ',i ,len(df[(df['Sex'] =='female') & (df['Pclass'] == i)]))\nmale=df[df['Sex']=='male']\nfemale=df[df['Sex']=='female']","f69ced57":"male_rel=pd.crosstab(male['Pclass'],male['Survived'])\nmale_rel_normalize=male_rel.div(male_rel.sum(1).astype(float),axis=0)\nmale_rel_normalize.plot(kind='bar',title='Survival rate of male by passenger classes',stacked='True',grid='True')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')\nplt.show()\nfemale_rel=pd.crosstab(female['Pclass'],female['Survived'])\nfemale_rel_normalize=female_rel.div(female_rel.sum(1).astype(float),axis=0)\nfemale_rel_normalize.plot(kind='bar',title='Survival rate of female by passenger classes',stacked='True',grid='True')\nplt.xlabel('Passenger Class')\nplt.ylabel('Survival Rate')\nplt.show()","2f8ddb7c":"df['Embarked_Value']=df['Embarked']\ndf['Embarked_Value'].replace(['C','Q','S'],[1,2,3],inplace=True)\nembarked_locs = sorted(df['Embarked_Value'].unique())\n\ndf['Embarked_Value'].plot(kind='hist',bins=3,range=(1,3),grid='True')\nplt.title('Port of Embarkation Histogram')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Count')\nplt.show()","f9f14add":"df[df['Embarked'].isnull()]","f63805b8":"df['Embarked_Value']=df['Embarked_Value'].fillna(3)\nembarked_locs = sorted(df['Embarked_Value'].unique())\nembarked_locs","cce6096a":"embarked_rel=pd.crosstab(df['Embarked_Value'],df['Survived'])\nembarked_rel_normalize=embarked_rel.div(embarked_rel.sum(1).astype(float),axis=0)\nembarked_rel_normalize.plot(kind='bar',title='Survival Rate by Port of Embarkation',grid='True',stacked='True')\nplt.xlabel('Port of Embarkation')\nplt.ylabel('Survival Rate')\nplt.show()","f438f5ee":"df[df['Age'].isnull()].head(10)","ea8410a0":"df['Age_complete'] = df['Age']\ndf['Age_complete']=df['Age_complete'].groupby([df['Sex_Val'],df['Pclass']]).apply(lambda x: x.fillna(x.median()))\ndf['Age_complete'].head(10)","12a2e083":"age_survived=df[df['Survived']==1]['Age_complete']\nage_not_survived = df[df['Survived'] == 0]['Age_complete']\nmax_age=max(df['Age_complete'])\n\nplt.hist([age_survived,age_not_survived],bins=8,range=(1, max_age),stacked=True)\nplt.title('Survivors by Age Plot')\nplt.xlabel('Ages')\nplt.ylabel('Count')\nplt.legend(('Died', 'Survived'), loc='best')\nplt.show()","0c8bf3d8":"for i in passenger_classes :\n        df.Age_complete[df.Pclass==i].plot(kind='density')\nplt.title('Age Density Plots by passenger Class')\nplt.xlabel('Age')\nplt.legend(('1st Class', '2nd Class', '3rd Class'), loc='best')\nplt.show()","daf730f0":"df['Family_Size'] = df['SibSp'] + df['Parch']\ndf['Family_Size'].hist(bins=10)\nplt.xlabel('Family Size')\nplt.ylabel('No. of families')\nplt.title('Family Size Histogram')\nplt.show()","950a51b7":"family_sizes=sorted(df['Family_Size'].unique())\nfamily_sizes_max=max(family_sizes)\nfamily_size_survived=df[df['Survived']==1]['Family_Size']\nfamily_size_not_survived=df[df['Survived']==0]['Family_Size']\nplt.hist([family_size_survived,family_size_not_survived],bins=family_sizes_max+1,range=(0, family_sizes_max),stacked=True)\nplt.legend(('Died', 'Survived'), loc='best')\nplt.xlabel('Family size')\nplt.ylabel('No. of families')\nplt.title('Survivors by Family Size')\nplt.show()","28d3b889":"df.dtypes[df.dtypes.map(lambda x: x == 'object')]\ndf=df.drop(['Name','Sex','Ticket','Cabin','Embarked','SibSp','Parch','PassengerId','Age','Embarked_Value'],axis=1)\ndf.head(10)","b2bc9780":"def data_prep(df_given):\n    # Get the unique values of Sex\n    sexes = sorted(df_given['Sex'].unique())\n    # Generate a mapping of Sex from a string to a number representation    \n    genders_mapping = dict(zip(sexes, range(0, len(sexes) + 1)))\n   # Transform Sex from a string to a number representation\n    df_given['Sex_Val'] = df_given['Sex'].map(genders_mapping).astype(int)\n        # Get the unique values of Embarked\n    df_given['Embarked_Value']=df_given['Embarked']\n    df_given['Embarked_Value'].replace(['C','Q','S'],[1,2,3],inplace=True)\n    df_given['Embarked_Value']=df_given['Embarked_Value'].fillna(3)\n   # embarked_locs = sorted(df_given['Embarked_Value'].unique())\n    # Fill in missing values of Fare with the average Fare\n    if len(df_given[df_given['Fare'].isnull()]) > 0:\n        avg_fare = df_given['Fare'].mean()\n        df_given['Fare'].fillna(avg_fare, inplace=True)\n    df_given['Age_complete'] = df_given['Age']\n    df_given['Age_complete']=df_given['Age_complete'].groupby([df_given['Sex_Val'],df_given['Pclass']]).apply(lambda x: x.fillna(x.median()))\n    df_given['Family_Size'] = df_given['SibSp'] + df_given['Parch']\n    # Drop the columns we won't use:\n    # Drop the Age column since we will be using the Age_omplete column instead.\n    # Drop the SibSp and Parch columns since we will be using Family_Size.\n    # Drop the PassengerId column since it won't be used as a feature.\n    df_given=df_given.drop(['Name','Sex','Ticket','Cabin','Embarked','SibSp','Parch','PassengerId','Age','Embarked_Value'],axis=1)#axis=1 means columns\n    #if drop_passenger_id:\n     #   df_given = df_given.drop(['PassengerId'], axis=1)\n    \n    return df_given","ae2b23cb":"train_data=df.values","4024336b":"clf = GaussianNB()","9b1c7578":"train_features = train_data[:, 1:]\ntrain_target = train_data[:, 0]","58a5332d":"df_test1 = pd.read_csv(\"..\/input\/titanic\/test.csv\")    \ndf_test = data_prep(df_test1)\ntest_x1 = df_test.values","7fcf042c":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\n# Split 80-20 train vs test data\ntrain_x, test_x, train_y, test_y = train_test_split(train_features, train_target, test_size=0.20, random_state=0)\nprint (train_features.shape, train_target.shape)\nprint (train_x.shape, train_y.shape)\nprint (test_x.shape, test_y.shape)","d6826954":"clf = clf.fit(train_x, train_y)\npredict_y = clf.predict(test_x)\nfrom sklearn.metrics import accuracy_score\nprint (\"Naive Bayes Accuracy = %.2f\" % (accuracy_score(test_y, predict_y)))","f4e04636":"test_y1 = clf.predict(test_x1)\ntest_y1","e7e5d33d":"df_test1['Survived'] = test_y1\ndf_test1[['PassengerId','Survived']].to_csv('submission1.csv',index=False)","4ddfafaa":"RandomForest = RandomForestClassifier(n_estimators=1000)\nRandomForest.fit(train_x,train_y)\npredict_y = RandomForest.predict(test_x)\nprint (\"RandomForest Accuracy = %.2f\" % (accuracy_score(test_y, predict_y)))","77c1582f":"df_test1['Survived'] = test_y1\ndf_test1[['PassengerId','Survived']].to_csv('submission2.csv',index=False)","c1e52504":"It can be infered that the largest number of passengers were in class 3 followed by class 1 and class 2.","be09c03b":"Since the majority of passengers embarked in 'S': 3, we assign the missing values in Embarked to 'S':","785d00c4":"train_test_split here means that train_x and test_x are made from train_features and train_y and test_y are made from train_target","3cde4730":"From this,we infer that majority of people did not survive the accident.","b4ba01ca":" This Shows that the First class has the highest Chance for Survival.","4cc0e5b6":"**Data for machine learning**\n\nWe drop the columns having strings in it or those which we have used like we remove SibSp and Parch as we use Family_Size which has the attributes of both of them.","eaba3286":"**Naive_Bayes Classifier**","d0c3420c":"**Feature 1;Passenger Class**","a9a48ffc":"Thus we see the first class passengers were generally older then second class passengers, which in turn were older than third class passengers.\n\n**Feature5 : Family Size**\n\nWe define a new feature FamilySize that is the sum of Parch (number of parents or children on board) and SibSp (number of siblings or spouses):","b7cb4cc2":"train_features includes all the columns except the Survived. train_target includes the Survived column.","304f17e9":"We fit the classifier\n\nReading and converting the test data to numpy array","523dd920":"**Feature4 : Age**","c6c6a4b9":"Here also many ages are missing. So we assign the missing ages the median values of the age according to their sex and passenger class.","839e2f6e":"We store the data as numpy array to perform machine learning algorithms.","8b6692d8":"\nIt can be infered that the majority of people in the ship were male","c2492000":"**Feature2 : Sex**\nWe'll need to map Sex from a string to a number to prepare it for machine learning algorithms.","1defe53c":"The majority of females survived, whereas the majority of males did not.\n\nCount males and females in each Pclass:","6fb7078b":"test_y1 is the predicted values of our test data i.e. test_x1","d4222463":"It can be infered that majority of passengers were in the age group 15-30 years.","b756a32d":"It is a summary of the operations we performed on our training data set. We encapsulate this in a function since we'll need to do the same operations to our test set later.","12cfd12b":"**Random Forest**","6be07f8a":"test_y1 is the predicted Survival values of the test data and thus our answer.\n\nNow we check the accuracy of our databy training with 80% of our data and testing on rest 20%","d24c4ec4":"Plot survival rate by Sex and Pclass:","77e0a774":"**Feature3 : Embraked**","cd9061be":"Now we have a general idea of the data set contents."}}