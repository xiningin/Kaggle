{"cell_type":{"0fd5cacf":"code","0bf8dbae":"code","5ab06f4c":"code","75d8ba3c":"code","68de9b12":"code","2cd5b51e":"code","9165ad64":"code","b8635090":"code","58a6d4ee":"code","aab27526":"code","8023d43b":"code","49eaa516":"code","eb10e523":"code","aaa1b5c7":"code","e6eac2a7":"code","2656c801":"code","f3ee649a":"code","1f5fd78b":"code","7d4686da":"code","41006046":"code","945fc5b4":"code","09e24c6a":"code","ff4590c7":"code","75155322":"code","d4db9fbb":"code","446f174a":"code","b979400e":"code","b4673f9b":"code","3d89fce7":"code","62451fd6":"code","e4715815":"code","4b146f0c":"code","83c022c0":"code","f29462ba":"code","b888973a":"code","4ad73925":"markdown","d93839d3":"markdown","987e0925":"markdown","15dcee82":"markdown","30090ceb":"markdown","5528d421":"markdown","d8ccc683":"markdown","1ce4cba8":"markdown","76f8455c":"markdown","51ad9431":"markdown","c44d8ae9":"markdown","fd8011b5":"markdown","0e44e85e":"markdown","966a1d8f":"markdown","6a061e77":"markdown","7794d9a5":"markdown","4751cca5":"markdown","afde1e5b":"markdown","fd5e8cdd":"markdown","9061cfa5":"markdown","ad5603bc":"markdown","e33a0dcb":"markdown","d676eb76":"markdown"},"source":{"0fd5cacf":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno","0bf8dbae":"trainData = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntestData = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","5ab06f4c":"trainData.head()","75d8ba3c":"testData.head()","68de9b12":"print(trainData.shape, testData.shape)","2cd5b51e":"print(trainData.dtypes)","9165ad64":"sexCat = ['male', 'female']\nembarkCat = ['C', 'Q', 'S']\ntrainData['Sex'] = pd.Categorical(trainData['Sex'], sexCat)\ntrainData['Embarked'] = pd.Categorical(trainData['Embarked'], embarkCat)","b8635090":"trainData.describe(include='all')","58a6d4ee":"msno.bar(trainData)","aab27526":"msno.bar(testData)","8023d43b":"msno.heatmap(trainData)","49eaa516":"embarkedMode = np.median(trainData['Embarked'].cat.codes)\nembarkedMode = embarkCat[int(embarkedMode)]\ntrainData['Embarked'].fillna(embarkedMode, inplace=True)","eb10e523":"trainData.drop(columns=['Cabin', 'Ticket'], inplace=True)\ntestData.drop(columns=['Cabin', 'Ticket'], inplace=True)","aaa1b5c7":"testData['Fare'].fillna(np.nanmedian(testData['Fare']), inplace=True)","e6eac2a7":"trainData[['Title']] = trainData['Name'].str.split(',').str[1].str.split('.').str[0]\ntestData[['Title']] = testData['Name'].str.split(',').str[1].str.split('.').str[0]","2656c801":"meanAgesTrain = trainData.groupby('Title')['Age'].mean().reset_index()\nmeanAgesTest = testData.groupby('Title')['Age'].mean().reset_index()","f3ee649a":"meanAgesTrain","1f5fd78b":"trainData['Age'] = trainData['Age'].fillna(trainData.groupby('Title')['Age'].transform('mean'))\ntestData['Age'] = testData['Age'].fillna(testData.groupby('Title')['Age'].transform('mean'))","7d4686da":"testData[testData.isnull().any(axis=1)]","41006046":"testData.loc[88, 'Age'] = 28","945fc5b4":"trainData[trainData.isnull().any(axis=1)]","09e24c6a":"trainData","ff4590c7":"plt.figure(figsize=(20,8))\nplt.subplot(1,3,1)\n#sns.barplot(data=trainData, x='Sex', y='Survived', hue='Pclass', estimator=len, ci=None)\nsns.countplot(data=trainData, x='Sex', hue='Pclass')\nplt.title('Total number of people on board')\nplt.ylim((0, 360))\nplt.ylabel('People')\n\nplt.subplot(1,3,2)\nsns.barplot(data=trainData, x='Sex', y='Survived', hue='Pclass', estimator=sum, ci=None)\nplt.title('Total number of survived people')\nplt.ylim((0, 360))\nplt.ylabel('People')\n\nplt.subplot(1,3,3)\nsns.barplot(data=trainData, x='Sex', y='Survived', hue='Pclass', ci=None, estimator=np.mean)\nplt.title('Percentage of survived people')\nplt.ylabel('Percentage')","75155322":"plt.figure(figsize=(15,10))\nplt.subplot(1,2,1)\nsns.histplot(data=trainData[trainData['Sex']=='male'], x='Age', hue='Survived', binwidth=5)\nplt.title('Male passengers')\nplt.legend(['Not survived', 'Survived'])\nplt.subplot(1,2,2)\nsns.histplot(data=trainData[trainData['Sex']=='female'], x='Age', hue='Survived', binwidth=5)\nplt.title('Female passengers')\nplt.legend(['Not survived', 'Survived'])","d4db9fbb":"plt.figure(figsize=(20,8))\nplt.subplot(1,3,1)\nsns.countplot(data=trainData, x='Embarked')\nplt.ylim((0, 700))\nplt.title('Total people embarked')\nplt.subplot(1,3,2)\nsns.barplot(data=trainData, x='Embarked', y='Survived', estimator=sum, ci=None)\nplt.ylim((0, 700))\nplt.title('Total people survived')\nplt.ylabel('count')\nplt.subplot(1,3,3)\nsns.barplot(data=trainData, x='Embarked', y='Survived', ci=None)\nplt.ylabel('Percentage of people survived')\nplt.title('Percentage of survived people')","446f174a":"trainData['Family'] = trainData['SibSp'] + trainData['Parch']\ntestData['Family'] = testData['SibSp'] + testData['Parch']","b979400e":"plt.figure(figsize=(20,8))\nplt.subplot(1,2,1)\nsns.countplot(data=trainData, x='Survived', hue='Family')\nplt.title('Number of people and family')\nplt.subplot(1,2,2)\nsns.barplot(data=trainData, x='Family', y='Survived', ci=None)\nplt.title('Percentage of people survived')\nplt.ylabel('Percentage')\n","b4673f9b":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","3d89fce7":"trainData['Sex'] = le.fit_transform(trainData['Sex'])\ntrainData['Embarked'] = le.fit_transform(trainData['Embarked'])\n\ntestData['Sex'] = le.fit_transform(testData['Sex'])\ntestData['Embarked'] = le.fit_transform(testData['Embarked'])","62451fd6":"sns.pairplot(data=trainData, hue='Survived')","e4715815":"from sklearn.ensemble import RandomForestClassifier\nfrom hyperopt import hp, fmin, tpe, STATUS_OK, Trials\nfrom sklearn.model_selection import cross_val_score","4b146f0c":"X_train = trainData[['Pclass', 'Sex', 'Family', 'Age', 'Fare', 'Embarked']]\ny_train = trainData[\"Survived\"]\nX_test = testData[['Pclass', 'Sex', 'Family', 'Age', 'Fare', 'Embarked']]","83c022c0":"est = [50, 70, 90, 100, 150, 170, 175, 190, 210]\nfeat = ['sqrt', 'log2']\ncrit = ['entropy', 'gini']\n\nspace = {'criterion': hp.choice('criterion', crit),\n         'max_depth': hp.quniform('max_depth', 3, 25, 1),\n         'n_estimators' :hp.choice('n_estimators', est),\n         'max_features': hp.choice('max_features', feat)\n    }\n \ndef objective(space):\n    model = RandomForestClassifier(criterion = space['criterion'], \n                                   max_depth = space['max_depth'],\n                                   n_estimators = space['n_estimators'],\n                                   max_features = space['max_features'],\n                                 )\n    \n    accuracy = cross_val_score(model, X_train, y_train, cv = 5, n_jobs=-1).mean()\n\n\n    return {'loss': -accuracy, 'status': STATUS_OK }\n    \ntrials = Trials()\nbest = fmin(fn= objective,\n            space= space,\n            algo= tpe.suggest,\n            max_evals = 35,\n            trials= trials)\nprint(best)","f29462ba":"trainedForest = RandomForestClassifier(max_depth = best['max_depth'],  \n                                       criterion = crit[best['criterion']],\n                                       n_estimators = est[best['n_estimators']],\n                                       max_features = feat[best['max_features']],\n                                       n_jobs = -1\n                                      ).fit(X_train,y_train)\n\nprediction = trainedForest.predict(X_test)","b888973a":"output = pd.DataFrame({'PassengerId': testData.PassengerId, 'Survived': prediction})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","4ad73925":"# Modelling","d93839d3":"This is interesting: may it be that people who embarked from C was assigned a certain cabin? Or a position on the ship where it was easier to escape from the crash?\n\nMost of the people embarked from S, but only about 35% of them survivedd","987e0925":"## Filling missing numbers\nSince there is no correlation between the missing data I will proceed as follows:\n\n\n### Embarked\nWith only two missing values on the train set, I can substitute them with the mode.\n","15dcee82":"Most people survived was part of a family with three components (I may think husband, wife and a child)","30090ceb":"There is still one NaN for Ms, because she was the only Ms and had no age. So I'll replace that value with the mean from the training set","5528d421":"## Prediction","d8ccc683":"## General overwiew","1ce4cba8":"## Conversion of categorical into numeric","76f8455c":"The Family and Fare are skewed to the right. I am going to perform a normalization on these two columns to obtain a normal distribution","51ad9431":"## Age, sex and survival","c44d8ae9":"### Age\nThe column \"name\" include the title (Mr. Ms etc.). So\n1. I'll add a column in the dataframe to get the title for each passenger \n2. Obtain the mean age for each title\n3. Look for the title of the passengers without age and substitute it with the mean for its title","fd8011b5":"### Fare\nOnly one value is missing from the test set, I'll substitute it with the mode.","0e44e85e":"## Missing data","966a1d8f":"### Cabin and ticket\nFor sure, being in a certain cabin (e.g. near the front, the back or in the middle) could have influences the survival, however there are too many missing rows.\nI'll drop the entire column from both the train and the test sets.\n\nI'll drop also the ticket column. There are no missing values, but it does not provide any useful information","6a061e77":"# Distribution of data","7794d9a5":"## Family components and survival\n\nI want to explore what is the correlation between survival and family components. \n\nI am prone to think that if a family component survived, also the other components may have survived. Let's see","4751cca5":"Age is also an important feature. Young children survived","afde1e5b":"## Selection of model","fd5e8cdd":"Almost all women in first class survived, while most men in third class died. Sex and class are important features","9061cfa5":"## Sex, class and survival","ad5603bc":"# Exploratory data analysis","e33a0dcb":"## Embarked and survival","d676eb76":"# Understanding the data"}}