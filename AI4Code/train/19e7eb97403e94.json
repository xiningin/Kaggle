{"cell_type":{"336da826":"code","d470d428":"code","aa4ba7b1":"code","713c22ac":"code","5737a2dd":"code","59f9a6b3":"code","cd346187":"code","c8489a58":"code","b75adf86":"code","c37d0ea8":"code","23e16649":"code","4f5d20d5":"code","0ada78c2":"code","7419b77e":"code","0ebfcf5e":"code","d46a5848":"code","33dce674":"code","4b586bfb":"code","c43a79a8":"code","e5a429cb":"code","643b9580":"code","04ee63ce":"code","a3e765f4":"code","334a87da":"code","53ba6447":"code","4a538d66":"code","15529cb5":"code","96033152":"code","2138b827":"code","e6a79cc2":"code","8f3dfacf":"code","cf626da6":"code","99a280b5":"code","e08a0722":"code","d99940a1":"code","6e30764c":"code","109ee609":"code","f360c89e":"code","6236b95f":"code","280edc41":"code","7283f792":"code","f5a1929d":"code","5a0f1ad4":"code","a3c8caa0":"code","21522f95":"markdown","d2fa4d9c":"markdown","0e2aada4":"markdown","ac1948e2":"markdown","2dabe999":"markdown","2bb3bbef":"markdown","b51f2cfe":"markdown","6770f56b":"markdown","6918750e":"markdown","145d8dfe":"markdown","030e9253":"markdown","af83c06e":"markdown","e7b98d53":"markdown","2f7a41ca":"markdown","b9245a26":"markdown","4fbf7c9f":"markdown","5f0600e0":"markdown","9e4b2662":"markdown","562be4c7":"markdown","b1d3847c":"markdown","70feccf2":"markdown","477e5cf8":"markdown","1f559002":"markdown","114b97ec":"markdown","fc3905dc":"markdown","e90884db":"markdown","9d03f6fe":"markdown","eb0ccf0e":"markdown","577f87e0":"markdown","fa15189f":"markdown","1daa37bb":"markdown","e39ccab7":"markdown","01da403f":"markdown","8aa7037c":"markdown","016dcdde":"markdown","370037c7":"markdown","d640fa27":"markdown","7255325f":"markdown"},"source":{"336da826":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom scipy import stats\nfrom scipy.stats import randint\n\n# prep\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_classification\nfrom sklearn.preprocessing import binarize, LabelEncoder, MinMaxScaler\n\n# models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n\n# Validation libraries\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score, mean_squared_error, precision_recall_curve\nfrom sklearn.model_selection import cross_val_score\n\n#Neural Network\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.grid_search import RandomizedSearchCV\n\n#Bagging\nfrom sklearn.ensemble import BaggingClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n#Naive bayes\nfrom sklearn.naive_bayes import GaussianNB \n\n#Stacking\nfrom mlxtend.classifier import StackingClassifier\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.\n\n#reading in CSV's from a file path\ntrain_df = pd.read_csv('..\/input\/survey.csv')\n\n\n#Pandas: whats the data row count?\nprint(train_df.shape)\n    \n#Pandas: whats the distribution of the data?\nprint(train_df.describe())\n    \n#Pandas: What types of data do i have?\nprint(train_df.info())\n","d470d428":"#missing data\ntotal = train_df.isnull().sum().sort_values(ascending=False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\nprint(missing_data)\n","aa4ba7b1":"#dealing with missing data\n#Let\u2019s get rid of the variables \"Timestamp\",\u201ccomments\u201d, \u201cstate\u201d just to make our lives easier.\ntrain_df = train_df.drop(['comments'], axis= 1)\ntrain_df = train_df.drop(['state'], axis= 1)\ntrain_df = train_df.drop(['Timestamp'], axis= 1)\n\ntrain_df.isnull().sum().max() #just checking that there's no missing data missing...\ntrain_df.head(5)","713c22ac":"# Assign default values for each data type\ndefaultInt = 0\ndefaultString = 'NaN'\ndefaultFloat = 0.0\n\n# Create lists by data tpe\nintFeatures = ['Age']\nstringFeatures = ['Gender', 'Country', 'self_employed', 'family_history', 'treatment', 'work_interfere',\n                 'no_employees', 'remote_work', 'tech_company', 'anonymity', 'leave', 'mental_health_consequence',\n                 'phys_health_consequence', 'coworkers', 'supervisor', 'mental_health_interview', 'phys_health_interview',\n                 'mental_vs_physical', 'obs_consequence', 'benefits', 'care_options', 'wellness_program',\n                 'seek_help']\nfloatFeatures = []\n\n# Clean the NaN's\nfor feature in train_df:\n    if feature in intFeatures:\n        train_df[feature] = train_df[feature].fillna(defaultInt)\n    elif feature in stringFeatures:\n        train_df[feature] = train_df[feature].fillna(defaultString)\n    elif feature in floatFeatures:\n        train_df[feature] = train_df[feature].fillna(defaultFloat)\n    else:\n        print('Error: Feature %s not recognized.' % feature)\ntrain_df.head(5)   ","5737a2dd":"#clean 'Gender'\n#Slower case all columm's elements\ngender = train_df['Gender'].str.lower()\n#print(gender)\n\n#Select unique elements\ngender = train_df['Gender'].unique()\n\n#Made gender groups\nmale_str = [\"male\", \"m\", \"male-ish\", \"maile\", \"mal\", \"male (cis)\", \"make\", \"male \", \"man\",\"msle\", \"mail\", \"malr\",\"cis man\", \"Cis Male\", \"cis male\"]\ntrans_str = [\"trans-female\", \"something kinda male?\", \"queer\/she\/they\", \"non-binary\",\"nah\", \"all\", \"enby\", \"fluid\", \"genderqueer\", \"androgyne\", \"agender\", \"male leaning androgynous\", \"guy (-ish) ^_^\", \"trans woman\", \"neuter\", \"female (trans)\", \"queer\", \"ostensibly male, unsure what that really means\"]           \nfemale_str = [\"cis female\", \"f\", \"female\", \"woman\",  \"femake\", \"female \",\"cis-female\/femme\", \"female (cis)\", \"femail\"]\n\nfor (row, col) in train_df.iterrows():\n\n    if str.lower(col.Gender) in male_str:\n        train_df['Gender'].replace(to_replace=col.Gender, value='male', inplace=True)\n\n    if str.lower(col.Gender) in female_str:\n        train_df['Gender'].replace(to_replace=col.Gender, value='female', inplace=True)\n\n    if str.lower(col.Gender) in trans_str:\n        train_df['Gender'].replace(to_replace=col.Gender, value='trans', inplace=True)\n\n#Get rid of bullshit\nstk_list = ['A little about you', 'p']\ntrain_df = train_df[~train_df['Gender'].isin(stk_list)]\n\nprint(train_df['Gender'].unique())","59f9a6b3":"#complete missing age with mean\ntrain_df['Age'].fillna(train_df['Age'].median(), inplace = True)\n\n# Fill with media() values < 18 and > 120\ns = pd.Series(train_df['Age'])\ns[s<18] = train_df['Age'].median()\ntrain_df['Age'] = s\ns = pd.Series(train_df['Age'])\ns[s>120] = train_df['Age'].median()\ntrain_df['Age'] = s\n\n#Ranges of Age\ntrain_df['age_range'] = pd.cut(train_df['Age'], [0,20,30,65,100], labels=[\"0-20\", \"21-30\", \"31-65\", \"66-100\"], include_lowest=True)\n\n","cd346187":"#There are only 0.014% of self employed so let's change NaN to NOT self_employed\n#Replace \"NaN\" string from defaultString\ntrain_df['self_employed'] = train_df['self_employed'].replace([defaultString], 'No')\nprint(train_df['self_employed'].unique())","c8489a58":"#There are only 0.20% of self work_interfere so let's change NaN to \"Don't know\n#Replace \"NaN\" string from defaultString\n\ntrain_df['work_interfere'] = train_df['work_interfere'].replace([defaultString], 'Don\\'t know' )\nprint(train_df['work_interfere'].unique())","b75adf86":"#Encoding data\nlabelDict = {}\nfor feature in train_df:\n    le = preprocessing.LabelEncoder()\n    le.fit(train_df[feature])\n    le_name_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n    train_df[feature] = le.transform(train_df[feature])\n    # Get labels\n    labelKey = 'label_' + feature\n    labelValue = [*le_name_mapping]\n    labelDict[labelKey] =labelValue\n    \nfor key, value in labelDict.items():     \n    print(key, value)\n\n#Get rid of 'Country'\ntrain_df = train_df.drop(['Country'], axis= 1)\ntrain_df.head()\n\n","c37d0ea8":"#missing data\ntotal = train_df.isnull().sum().sort_values(ascending=False)\npercent = (train_df.isnull().sum()\/train_df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)\nprint(missing_data)","23e16649":"#correlation matrix\ncorrmat = train_df.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);\nplt.show()\n\n#treatment correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'treatment')['treatment'].index\ncm = np.corrcoef(train_df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()\n\n","4f5d20d5":"# Distribiution and density by Age\nplt.figure(figsize=(12,8))\nsns.distplot(train_df[\"Age\"], bins=24)\nplt.title(\"Distribuition and density by Age\")\nplt.xlabel(\"Age\")\n\n","0ada78c2":"# Separate by treatment or not\n\ng = sns.FacetGrid(train_df, col='treatment', size=5)\ng = g.map(sns.distplot, \"Age\")","7419b77e":"# Let see how many people has been treated\nplt.figure(figsize=(12,8))\nlabels = labelDict['label_Gender']\ng = sns.countplot(x=\"treatment\", data=train_df)\ng.set_xticklabels(labels)\n\nplt.title('Total Distribuition by treated or not')","0ebfcf5e":"o = labelDict['label_age_range']\n\ng = sns.factorplot(x=\"age_range\", y=\"treatment\", hue=\"Gender\", data=train_df, kind=\"bar\",  ci=None, size=5, aspect=2, legend_out = True)\ng.set_xticklabels(o)\n\nplt.title('Probability of mental health condition')\nplt.ylabel('Probability x 100')\nplt.xlabel('Age')\n# replace legend labels\n\nnew_labels = labelDict['label_Gender']\nfor t, l in zip(g._legend.texts, new_labels): t.set_text(l)\n\n# Positioning the legend\ng.fig.subplots_adjust(top=0.9,right=0.8)\n\nplt.show()","d46a5848":"o = labelDict['label_family_history']\ng = sns.factorplot(x=\"family_history\", y=\"treatment\", hue=\"Gender\", data=train_df, kind=\"bar\", ci=None, size=5, aspect=2, legend_out = True)\ng.set_xticklabels(o)\nplt.title('Probability of mental health condition')\nplt.ylabel('Probability x 100')\nplt.xlabel('Family History')\n\n# replace legend labels\nnew_labels = labelDict['label_Gender']\nfor t, l in zip(g._legend.texts, new_labels): t.set_text(l)\n\n# Positioning the legend\ng.fig.subplots_adjust(top=0.9,right=0.8)\n\nplt.show()","33dce674":"o = labelDict['label_care_options']\ng = sns.factorplot(x=\"care_options\", y=\"treatment\", hue=\"Gender\", data=train_df, kind=\"bar\", ci=None, size=5, aspect=2, legend_out = True)\ng.set_xticklabels(o)\nplt.title('Probability of mental health condition')\nplt.ylabel('Probability x 100')\nplt.xlabel('Care options')\n\n# replace legend labels\nnew_labels = labelDict['label_Gender']\nfor t, l in zip(g._legend.texts, new_labels): t.set_text(l)\n\n# Positioning the legend\ng.fig.subplots_adjust(top=0.9,right=0.8)\nplt.show()","4b586bfb":"o = labelDict['label_benefits']\ng = sns.factorplot(x=\"care_options\", y=\"treatment\", hue=\"Gender\", data=train_df, kind=\"bar\", ci=None, size=5, aspect=2, legend_out = True)\ng.set_xticklabels(o)\nplt.title('Probability of mental health condition')\nplt.ylabel('Probability x 100')\nplt.xlabel('Benefits')\n\n# replace legend labels\nnew_labels = labelDict['label_Gender']\nfor t, l in zip(g._legend.texts, new_labels): t.set_text(l)\n\n# Positioning the legend\ng.fig.subplots_adjust(top=0.9,right=0.8)\nplt.show()","c43a79a8":"o = labelDict['label_work_interfere']\ng = sns.factorplot(x=\"work_interfere\", y=\"treatment\", hue=\"Gender\", data=train_df, kind=\"bar\", ci=None, size=5, aspect=2, legend_out = True)\ng.set_xticklabels(o)\nplt.title('Probability of mental health condition')\nplt.ylabel('Probability x 100')\nplt.xlabel('Work interfere')\n\n# replace legend labels\nnew_labels = labelDict['label_Gender']\nfor t, l in zip(g._legend.texts, new_labels): t.set_text(l)\n\n# Positioning the legend\ng.fig.subplots_adjust(top=0.9,right=0.8)\nplt.show()","e5a429cb":"# Scaling Age\nscaler = MinMaxScaler()\ntrain_df['Age'] = scaler.fit_transform(train_df[['Age']])\ntrain_df.head()\n","643b9580":"# define X and y\nfeature_cols = ['Age', 'Gender', 'family_history', 'benefits', 'care_options', 'anonymity', 'leave', 'work_interfere']\nX = train_df[feature_cols]\ny = train_df.treatment\n\n# split X and y into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)\n\n# Create dictionaries for final graph\n# Use: methodDict['Stacking'] = accuracy_score\nmethodDict = {}\nrmseDict = ()\n\n","04ee63ce":"# Build a forest and compute the feature importances\nforest = ExtraTreesClassifier(n_estimators=250,\n                              random_state=0)\n\nforest.fit(X, y)\nimportances = forest.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in forest.estimators_],\n             axis=0)\nindices = np.argsort(importances)[::-1]\n\nlabels = []\nfor f in range(X.shape[1]):\n    labels.append(feature_cols[f])      \n    \n# Plot the feature importances of the forest\nplt.figure(figsize=(12,8))\nplt.title(\"Feature importances\")\nplt.bar(range(X.shape[1]), importances[indices],\n       color=\"r\", yerr=std[indices], align=\"center\")\nplt.xticks(range(X.shape[1]), labels, rotation='vertical')\nplt.xlim([-1, X.shape[1]])\nplt.show()","a3e765f4":"def evalClassModel(model, y_test, y_pred_class, plot=False):\n    #Classification accuracy: percentage of correct predictions\n    # calculate accuracy\n    print('Accuracy:', metrics.accuracy_score(y_test, y_pred_class))\n    \n    #Null accuracy: accuracy that could be achieved by always predicting the most frequent class\n    # examine the class distribution of the testing set (using a Pandas Series method)\n    print('Null accuracy:\\n', y_test.value_counts())\n    \n    # calculate the percentage of ones\n    print('Percentage of ones:', y_test.mean())\n    \n    # calculate the percentage of zeros\n    print('Percentage of zeros:',1 - y_test.mean())\n    \n    #Comparing the true and predicted response values\n    print('True:', y_test.values[0:25])\n    print('Pred:', y_pred_class[0:25])\n    \n    #Conclusion:\n    #Classification accuracy is the easiest classification metric to understand\n    #But, it does not tell you the underlying distribution of response values\n    #And, it does not tell you what \"types\" of errors your classifier is making\n    \n    #Confusion matrix\n    # save confusion matrix and slice into four pieces\n    confusion = metrics.confusion_matrix(y_test, y_pred_class)\n    #[row, column]\n    TP = confusion[1, 1]\n    TN = confusion[0, 0]\n    FP = confusion[0, 1]\n    FN = confusion[1, 0]\n    \n    # visualize Confusion Matrix\n    sns.heatmap(confusion,annot=True,fmt=\"d\") \n    plt.title('Confusion Matrix')\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.show()\n    \n    #Metrics computed from a confusion matrix\n    #Classification Accuracy: Overall, how often is the classifier correct?\n    accuracy = metrics.accuracy_score(y_test, y_pred_class)\n    print('Classification Accuracy:', accuracy)\n    \n    #Classification Error: Overall, how often is the classifier incorrect?\n    print('Classification Error:', 1 - metrics.accuracy_score(y_test, y_pred_class))\n    \n    #False Positive Rate: When the actual value is negative, how often is the prediction incorrect?\n    false_positive_rate = FP \/ float(TN + FP)\n    print('False Positive Rate:', false_positive_rate)\n    \n    #Precision: When a positive value is predicted, how often is the prediction correct?\n    print('Precision:', metrics.precision_score(y_test, y_pred_class))\n    \n    \n    # IMPORTANT: first argument is true values, second argument is predicted probabilities\n    print('AUC Score:', metrics.roc_auc_score(y_test, y_pred_class))\n    \n    # calculate cross-validated AUC\n    print('Cross-validated AUC:', cross_val_score(model, X, y, cv=10, scoring='roc_auc').mean())\n    \n    ##########################################\n    #Adjusting the classification threshold\n    ##########################################\n    # print the first 10 predicted responses\n    # 1D array (vector) of binary values (0, 1)\n    print('First 10 predicted responses:\\n', model.predict(X_test)[0:10])\n\n    # print the first 10 predicted probabilities of class membership\n    print('First 10 predicted probabilities of class members:\\n', model.predict_proba(X_test)[0:10])\n\n    # print the first 10 predicted probabilities for class 1\n    model.predict_proba(X_test)[0:10, 1]\n    \n    # store the predicted probabilities for class 1\n    y_pred_prob = model.predict_proba(X_test)[:, 1]\n    \n    if plot == True:\n        # histogram of predicted probabilities\n        # adjust the font size \n        plt.rcParams['font.size'] = 12\n        # 8 bins\n        plt.hist(y_pred_prob, bins=8)\n        \n        # x-axis limit from 0 to 1\n        plt.xlim(0,1)\n        plt.title('Histogram of predicted probabilities')\n        plt.xlabel('Predicted probability of treatment')\n        plt.ylabel('Frequency')\n    \n    \n    # predict treatment if the predicted probability is greater than 0.3\n    # it will return 1 for all values above 0.3 and 0 otherwise\n    # results are 2D so we slice out the first column\n    y_pred_prob = y_pred_prob.reshape(-1,1) \n    y_pred_class = binarize(y_pred_prob, 0.3)[0]\n    \n    # print the first 10 predicted probabilities\n    print('First 10 predicted probabilities:\\n', y_pred_prob[0:10])\n    \n    ##########################################\n    #ROC Curves and Area Under the Curve (AUC)\n    ##########################################\n    \n    #Question: Wouldn't it be nice if we could see how sensitivity and specificity are affected by various thresholds, without actually changing the threshold?\n    #Answer: Plot the ROC curve!\n    \n    \n    #AUC is the percentage of the ROC plot that is underneath the curve\n    #Higher value = better classifier\n    roc_auc = metrics.roc_auc_score(y_test, y_pred_prob)\n    \n    \n\n    # IMPORTANT: first argument is true values, second argument is predicted probabilities\n    # we pass y_test and y_pred_prob\n    # we do not use y_pred_class, because it will give incorrect results without generating an error\n    # roc_curve returns 3 objects fpr, tpr, thresholds\n    # fpr: false positive rate\n    # tpr: true positive rate\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred_prob)\n    if plot == True:\n        plt.figure()\n        \n        plt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = %0.2f)' % roc_auc)\n        plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n        plt.xlim([0.0, 1.0])\n        plt.ylim([0.0, 1.0])\n        plt.rcParams['font.size'] = 12\n        plt.title('ROC curve for treatment classifier')\n        plt.xlabel('False Positive Rate (1 - Specificity)')\n        plt.ylabel('True Positive Rate (Sensitivity)')\n        plt.legend(loc=\"lower right\")\n        plt.show()\n    \n    # define a function that accepts a threshold and prints sensitivity and specificity\n    def evaluate_threshold(threshold):\n        #Sensitivity: When the actual value is positive, how often is the prediction correct?\n        #Specificity: When the actual value is negative, how often is the prediction correct?print('Sensitivity for ' + str(threshold) + ' :', tpr[thresholds > threshold][-1])\n        print('Specificity for ' + str(threshold) + ' :', 1 - fpr[thresholds > threshold][-1])\n\n    # One way of setting threshold\n    predict_mine = np.where(y_pred_prob > 0.50, 1, 0)\n    confusion = metrics.confusion_matrix(y_test, predict_mine)\n    print(confusion)\n    \n    \n    \n    return accuracy","334a87da":"##########################################\n# Tuning with cross validation score\n##########################################\ndef tuningCV(knn):\n    \n    # search for an optimal value of K for KNN\n    k_range = list(range(1, 31))\n    k_scores = []\n    for k in k_range:\n        knn = KNeighborsClassifier(n_neighbors=k)\n        scores = cross_val_score(knn, X, y, cv=10, scoring='accuracy')\n        k_scores.append(scores.mean())\n    print(k_scores)\n    # plot the value of K for KNN (x-axis) versus the cross-validated accuracy (y-axis)\n    plt.plot(k_range, k_scores)\n    plt.xlabel('Value of K for KNN')\n    plt.ylabel('Cross-Validated Accuracy')\n    plt.show()\n","53ba6447":"def tuningGridSerach(knn):\n    #More efficient parameter tuning using GridSearchCV\n    # define the parameter values that should be searched\n    k_range = list(range(1, 31))\n    print(k_range)\n    \n    # create a parameter grid: map the parameter names to the values that should be searched\n    param_grid = dict(n_neighbors=k_range)\n    print(param_grid)\n    \n    # instantiate the grid\n    grid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy')\n\n    # fit the grid with data\n    grid.fit(X, y)\n    \n    # view the complete results (list of named tuples)\n    grid.grid_scores_\n    \n    # examine the first tuple\n    print(grid.grid_scores_[0].parameters)\n    print(grid.grid_scores_[0].cv_validation_scores)\n    print(grid.grid_scores_[0].mean_validation_score)\n    \n    # create a list of the mean scores only\n    grid_mean_scores = [result.mean_validation_score for result in grid.grid_scores_]\n    print(grid_mean_scores)\n    \n    # plot the results\n    plt.plot(k_range, grid_mean_scores)\n    plt.xlabel('Value of K for KNN')\n    plt.ylabel('Cross-Validated Accuracy')\n    plt.show()\n    \n    # examine the best model\n    print('GridSearch best score', grid.best_score_)\n    print('GridSearch best params', grid.best_params_)\n    print('GridSearch best estimator', grid.best_estimator_)\n","4a538d66":"def tuningRandomizedSearchCV(model, param_dist):\n    #Searching multiple parameters simultaneously\n    # n_iter controls the number of searches\n    rand = RandomizedSearchCV(model, param_dist, cv=10, scoring='accuracy', n_iter=10, random_state=5)\n    rand.fit(X, y)\n    rand.grid_scores_\n    \n    # examine the best model\n    print('Rand. Best Score: ', rand.best_score_)\n    print('Rand. Best Params: ', rand.best_params_)\n    \n    # run RandomizedSearchCV 20 times (with n_iter=10) and record the best score\n    best_scores = []\n    for _ in range(20):\n        rand = RandomizedSearchCV(model, param_dist, cv=10, scoring='accuracy', n_iter=10)\n        rand.fit(X, y)\n        best_scores.append(round(rand.best_score_, 3))\n    print(best_scores)","15529cb5":"def tuningMultParam(knn):\n    \n    #Searching multiple parameters simultaneously\n    # define the parameter values that should be searched\n    k_range = list(range(1, 31))\n    weight_options = ['uniform', 'distance']\n        \n    # create a parameter grid: map the parameter names to the values that should be searched\n    param_grid = dict(n_neighbors=k_range, weights=weight_options)\n    print(param_grid) \n    \n    # instantiate and fit the grid\n    grid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy')\n    grid.fit(X, y) \n    \n    # view the complete results\n    print(grid.grid_scores_)\n    \n    # examine the best model\n    print('Multiparam. Best Score: ', grid.best_score_)\n    print('Multiparam. Best Params: ', grid.best_params_)","96033152":"def logisticRegression():\n    # train a logistic regression model on the training set\n    logreg = LogisticRegression(C=100)\n    logreg.fit(X_train, y_train)\n    \n    # make class predictions for the testing set\n    y_pred_class = logreg.predict(X_test)\n    \n    print('########### Logistic Regression ###############')\n    \n    accuracy_score = evalClassModel(logreg, y_test, y_pred_class, True)\n    \n    #Data for final graph\n    methodDict['Log. Regres.'] = accuracy_score * 100","2138b827":"logisticRegression()","e6a79cc2":"def Knn():\n    # Calculating the best parameters\n    knn = KNeighborsClassifier(n_neighbors=5)\n    \n    # From https:\/\/github.com\/justmarkham\/scikit-learn-videos\/blob\/master\/08_grid_search.ipynb\n    #tuningCV(knn)\n    #tuningGridSerach(knn)\n    #tuningMultParam(knn)\n    \n    # define the parameter values that should be searched\n    k_range = list(range(1, 31))\n    weight_options = ['uniform', 'distance']\n    \n    # specify \"parameter distributions\" rather than a \"parameter grid\"\n    param_dist = dict(n_neighbors=k_range, weights=weight_options)\n    tuningRandomizedSearchCV(knn, param_dist)\n    \n    # train a KNeighborsClassifier model on the training set\n    knn = KNeighborsClassifier(n_neighbors=27, weights='uniform')\n    knn.fit(X_train, y_train)\n    \n    # make class predictions for the testing set\n    y_pred_class = knn.predict(X_test)\n    \n    print('########### KNeighborsClassifier ###############')\n    \n    accuracy_score = evalClassModel(knn, y_test, y_pred_class, True)\n\n    #Data for final graph\n    methodDict['KNN'] = accuracy_score * 100\n","8f3dfacf":"Knn()","cf626da6":"def treeClassifier():\n    # Calculating the best parameters\n    tree = DecisionTreeClassifier()\n    featuresSize = feature_cols.__len__()\n    param_dist = {\"max_depth\": [3, None],\n              \"max_features\": randint(1, featuresSize),\n              \"min_samples_split\": randint(2, 9),\n              \"min_samples_leaf\": randint(1, 9),\n              \"criterion\": [\"gini\", \"entropy\"]}\n    tuningRandomizedSearchCV(tree, param_dist)\n    \n    # train a decision tree model on the training set\n    tree = DecisionTreeClassifier()\n    tree.fit(X_train, y_train)\n    \n    # make class predictions for the testing set\n    y_pred_class = tree.predict(X_test)\n    \n    print('########### Tree classifier ###############')\n    \n    accuracy_score = evalClassModel(tree, y_test, y_pred_class, True)\n\n    #Data for final graph\n    methodDict['Tree clas.'] = accuracy_score * 100","99a280b5":"treeClassifier()","e08a0722":"def randomForest():\n    # Calculating the best parameters\n    forest = RandomForestClassifier(n_estimators = 20)\n\n    featuresSize = feature_cols.__len__()\n    param_dist = {\"max_depth\": [3, None],\n              \"max_features\": randint(1, featuresSize),\n              \"min_samples_split\": randint(2, 9),\n              \"min_samples_leaf\": randint(1, 9),\n              \"criterion\": [\"gini\", \"entropy\"]}\n    tuningRandomizedSearchCV(forest, param_dist)\n    \n    # Building and fitting my_forest\n    forest = RandomForestClassifier(max_depth = None, min_samples_leaf=8, min_samples_split=2, n_estimators = 20, random_state = 1)\n    my_forest = forest.fit(X_train, y_train)\n    \n    # make class predictions for the testing set\n    y_pred_class = my_forest.predict(X_test)\n    \n    print('########### Random Forests ###############')\n    \n    accuracy_score = evalClassModel(my_forest, y_test, y_pred_class, True)\n\n    #Data for final graph\n    methodDict['R. Forest'] = accuracy_score * 100","d99940a1":"randomForest()","6e30764c":"# Define Tensorflow feature columns\nage = tf.feature_column.numeric_column(\"Age\")\ngender = tf.feature_column.numeric_column(\"Gender\")\nfamily_history = tf.feature_column.numeric_column(\"family_history\")\nbenefits = tf.feature_column.numeric_column(\"benefits\")\ncare_options = tf.feature_column.numeric_column(\"care_options\")\nanonymity = tf.feature_column.numeric_column(\"anonymity\")\nleave = tf.feature_column.numeric_column(\"leave\")\nwork_interfere = tf.feature_column.numeric_column(\"work_interfere\")\nfeature_columns = [age, gender, family_history, benefits, care_options, anonymity, leave, work_interfere]\n","109ee609":"# Build a DNN with 2 hidden layers and 10 nodes in each hidden layer.\nmodel = tf.estimator.DNNClassifier(feature_columns=feature_columns,\n                                    hidden_units=[10, 10],\n                                    optimizer=tf.train.ProximalAdagradOptimizer(\n                                      learning_rate=0.1,\n                                      l1_regularization_strength=0.001\n                                    ))","f360c89e":"model.train(input_fn=lambda:train_input_fn(X_train, y_train, batch_size), steps=train_steps)","6236b95f":"# Evaluate the model.\neval_result = model.evaluate(\n    input_fn=lambda:eval_input_fn(X_test, y_test, batch_size))\n\nprint('\\nTest set accuracy: {accuracy:0.2f}\\n'.format(**eval_result))\n\n#Data for final graph\naccuracy = eval_result['accuracy'] * 100\nmethodDict['NN DNNClasif.'] = accuracy","280edc41":"predictions = list(model.predict(input_fn=lambda:eval_input_fn(X_train, y_train, batch_size=batch_size)))","7283f792":"# Generate predictions from the model\ntemplate = ('\\nIndex: \"{}\", Prediction is \"{}\" ({:.1f}%), expected \"{}\"')\n\n# Dictionary for predictions\ncol1 = []\ncol2 = []\ncol3 = []\n\n\nfor idx, input, p in zip(X_train.index, y_train, predictions):\n    v  = p[\"class_ids\"][0] \n    class_id = p['class_ids'][0]\n    probability = p['probabilities'][class_id] # Probability\n    \n    # Adding to dataframe\n    col1.append(idx) # Index\n    col2.append(v) # Prediction\n    col3.append(input) # Expecter\n    \n   \n    #print(template.format(idx, v, 100 * probability, input))\n\n\nresults = pd.DataFrame({'index':col1, 'prediction':col2, 'expected':col3})\nresults.head(5)","f5a1929d":"def plotSuccess():\n    s = pd.Series(methodDict)\n    s = s.sort_values(ascending=False)\n    plt.figure(figsize=(12,8))\n    #Colors\n    ax = s.plot(kind='bar') \n    for p in ax.patches:\n        ax.annotate(str(round(p.get_height(),2)), (p.get_x() * 1.005, p.get_height() * 1.005))\n    plt.ylim([70.0, 90.0])\n    plt.xlabel('Method')\n    plt.ylabel('Percentage')\n    plt.title('Success of methods')\n     \n    plt.show()","5a0f1ad4":"plotSuccess()","a3c8caa0":"# Generate predictions with the best method\nclf = AdaBoostClassifier()\nclf.fit(X, y)\ndfTestPredictions = clf.predict(X_test)\n\n# Write predictions to csv file\n# We don't have any significative field so we save the index\nresults = pd.DataFrame({'Index': X_test.index, 'Treatment': dfTestPredictions})\n# Save to file\n# This file will be visible after publishing in the output section\nresults.to_csv('results.csv', index=False)\nresults.head()","21522f95":"### Testing there aren't any missing data","d2fa4d9c":"### Create input functions\nYou must create input functions to supply data for training, evaluating, and prediction.","0e2aada4":"Barplot to show probabilities for family history","ac1948e2":"<a id='Tuning'><\/a>\n## **7. Tuning** \n### **Evaluating a Classification Model.** <br>\nThis function will evalue:<br>\n* **Classification accuracy: **percentage of correct predictions\n* **Null accuracy:** accuracy that could be achieved by always predicting the most frequent class\n* **Percentage of ones**<br>\n* **Percentage of zero**s<br>\n* **Confusion matrix: **Table that describes the performance of a classification model\n        True Positives (TP): we correctly predicted that they do have diabetes\n        True Negatives (TN): we correctly predicted that they don't have diabetes\n        False Positives (FP): we incorrectly predicted that they do have diabetes (a \"Type I error\")\n        Falsely predict positive\n        False Negatives (FN): we incorrectly predicted that they don't have diabetes (a \"Type II error\")\n        Falsely predict negative\n\n* **False Positive Rate**<br>\n* **Precision of Positive value**<br>\n* **AUC:** is the percentage of the ROC plot that is underneath the curve\n        .90-1 = excellent (A)\n        .80-.90 = good (B)\n        .70-.80 = fair (C)\n        .60-.70 = poor (D)\n        .50-.60 = fail (F)\nAnd some others values for tuning processes.\nMore information:  [http:\/\/www.ritchieng.com\/machine-learning-evaluate-classification-model\/]: \n","2dabe999":"<a id='Random_Forests'><\/a>\n### Random Forests","2bb3bbef":"### Making predictions (inferring) from the trained model\nWe now have a trained model that produces good evaluation results. We can now use the trained model to predict whether a patient needs treatment or not.","b51f2cfe":"<a id='Scaling_and_fitting'><\/a>\n## **6. Scaling and fitting** ##\n\n","6770f56b":"<a id='Evaluating_models'><\/a>\n## **8. Evaluating models**<br><br>\n<a id='Logistic_regression'><\/a>\n### Logistic Regression","6918750e":"### **Tuning with GridSearchCV** ###","145d8dfe":"### Instantiate an Estimator\nOur problem is a classic classification problem. We want to predict whether a patient has to be treated or not. We'll use tf.estimator.DNNClassifier for deep models that perform multi-class classification.","030e9253":"Features Scaling\nWe're going to scale age, because is extremely different from the othere ones.","af83c06e":"<a id='Some_charts_to_see_data_relationship'><\/a>\n## **5. Some charts to see data relationship** ","e7b98d53":"<a id='Covariance_Matrix'><\/a>\n## **4. Covariance Matrix. Variability comparison between categories of variables** ","2f7a41ca":"#### Train the model\nThe steps argument tells the method to stop training after a number of training steps.","b9245a26":"KNEIGHBORSCLASSIFIER","4fbf7c9f":"Barplot to show probabilities for care options","5f0600e0":"### **Tuning with RandomizedSearchCV** ###","9e4b2662":"### **Tuning with searching multiple parameters simultaneously** ###","562be4c7":"Distribiution and density by Age","b1d3847c":"Features Scaling\nWe're going to scale age, because is extremely different from the othere ones.","70feccf2":"<a id='Decision_Tree_classifier'><\/a>\n### Decision Tree classifier","477e5cf8":"Spliltting the dataset","1f559002":"### Define the feature columns\nA feature column is an object describing how the model should use raw input data from the features dictionary. When you build an Estimator model, you pass it a list of feature columns that describes each of the features you want the model to use.","114b97ec":"**Cleaning NaN**","fc3905dc":"<a id='Success_method_plot'><\/a>\n## **10. Success method plot**","e90884db":"Draw a nested barplot to show probabilities for class and sex","9d03f6fe":"<a id='Creating_predictions_on_test_set'><\/a>\n## **11. Creating predictions on test set**","eb0ccf0e":"### Evaluate the trained model\nNow that the model has been trained, we can get some statistics on its performance. The following code block evaluates the accuracy of the trained model on the test data.","577f87e0":"<a id='Data_cleaning'><\/a>\n## **2. Data cleaning** ##","fa15189f":"How many people has been treated?","1daa37bb":"<a id='Library_and_data_loading'><\/a>\n## **1. Library and data loading** ##","e39ccab7":"<a id='KNeighborsClassifier'><\/a>\n### KNeighbors Classifier","01da403f":"Barplot to show probabilities for work interfere","8aa7037c":"Barplot to show probabilities for benefits","016dcdde":"### **Tuning with cross validation score**","370037c7":"<a id='Encoding_data'><\/a>\n## **3. Encoding data**","d640fa27":"Separate by treatment","7255325f":"### Train, Evaluate, and Predict\nNow that we have an Estimator object, we can call methods to do the following:\n\n* Train the model.\n* Evaluate the trained model.\n* Use the trained model to make predictions.\n"}}