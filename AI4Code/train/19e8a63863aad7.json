{"cell_type":{"54452430":"code","1adb811d":"code","37a6b6c1":"code","e1fbf890":"code","307963b4":"code","8fd96a70":"code","85c64322":"code","76ec72b1":"code","d74befbf":"code","93952ae1":"code","995442cd":"code","b8bb45d2":"code","20fa875a":"code","afa89310":"code","61dd024d":"code","188e904a":"code","412f8b0a":"code","9145cf3d":"code","7688f8aa":"code","3c100911":"code","0640956b":"code","c87a2da0":"code","ce77353a":"code","3f762169":"code","cdd92041":"code","9ac3d8b3":"code","affe3046":"code","592799bf":"code","ec99f307":"code","43a51a74":"code","04caea4e":"code","e26bdfe6":"markdown","3162cb6d":"markdown","45913f0f":"markdown","2de978af":"markdown","fe676e38":"markdown","ae489267":"markdown","b0133b64":"markdown","5edc32b2":"markdown","e483fcd9":"markdown","40c741b8":"markdown","468d905b":"markdown","d2528a2c":"markdown","70284f7e":"markdown","474244a9":"markdown","a0f9e366":"markdown","fb7d33d6":"markdown","351e287e":"markdown","23854391":"markdown","5d895f4c":"markdown","add59f1d":"markdown","c2b0691c":"markdown","6e09232d":"markdown","909209e6":"markdown","25bc38b7":"markdown","cf2c7c10":"markdown","a9f8e7c3":"markdown","e3afee55":"markdown","9810c373":"markdown"},"source":{"54452430":"# For DeepLearning\nimport keras\nfrom keras import models, layers\nfrom keras import backend # If you want to control the subpackage\nimport numpy as np\nfrom keras.utils import np_utils\n\n# For Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom keras import datasets # It use for load dataset\nfrom sklearn.preprocessing import MinMaxScaler","1adb811d":"# Load datasets\n(X_train, y_train), (X_test,y_test) = datasets.mnist.load_data()","37a6b6c1":"# Check the X data\nfig, axes = plt.subplots(1, 5, figsize=(20, 5))\nfig.suptitle('X_train', size=30, y=1.12);     \nfor i in range(0,5):\n    sns.heatmap(ax = axes[i], data = X_train[i])\nfig.show()","e1fbf890":"y_train[:5] # Check the y data","307963b4":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","8fd96a70":"img_rows, img_cols =X_train.shape[1:]\n\nif backend.image_data_format() == 'channel_first':\n    X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n    X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n    input_shape = (1,img_rows, img_cols)\nelse:\n    X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1)\n    X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1)\n    input_shape = (img_rows, img_cols, 1)","85c64322":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')\n\nX_train = X_train \/ 255\nX_test = X_test \/ 255\n\ny_train =keras.utils.to_categorical(y_train, 10)\ny_test =keras.utils.to_categorical(y_test, 10)","76ec72b1":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","d74befbf":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=input_shape))\nmodel.add(layers.Conv2D(64,(3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2,2)))\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(10,activation='softmax'))\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer='rmsprop', metrics=['accuracy'])","93952ae1":"history = model.fit(X_train, y_train, batch_size = 128, epochs = 10, validation_split=0.2)","995442cd":"model.evaluate(X_test, y_test)","b8bb45d2":"fig,axes = plt.subplots(1,2, figsize=(15,8))\nfig.suptitle(\"The model 's evaluation \",fontsize=20)\naxes[0].plot(history.history['loss'])\naxes[0].plot(history.history['val_loss'])\naxes[0].set_title('Model Loss')\naxes[0].set_ylabel('Loss')\naxes[0].set_xlabel('Epoch')\naxes[0].legend(['Train','Test'])\n\n\naxes[1].plot(history.history['accuracy'])\naxes[1].plot(history.history['val_accuracy'])\naxes[1].set_title('Model Accuracy')\naxes[1].set_ylabel('Accuracy')\naxes[1].set_xlabel('Epoch')\naxes[1].legend(['Train','Test'])\nplt.show()","20fa875a":"pred = model.predict(X_test)\n\nX_test = X_test.reshape(10000, 28,28)\n\nfig, axes = plt.subplots(1, 5, figsize=(20, 5))\nfig.suptitle(\"X_test\",fontsize=50)\nfor i in range(0,5):\n    sns.heatmap(ax = axes[i], data = X_test[i])\nfig.show()","afa89310":"import pandas as pd\npred = pd.DataFrame(pred[:5])\n\ndef highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]\n\npred.T.style.apply(highlight_max)","61dd024d":"(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data() # load datasets","188e904a":"fig, axes = plt.subplots(1,10,figsize=(20,10))\nfor i in range(0,10):\n    axes[i].imshow(X_train[i])\nplt.show()","412f8b0a":"y_train[:10]","9145cf3d":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","7688f8aa":"X_train.shape, X_test.shape","3c100911":"X_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","0640956b":"X_train = X_train \/255.0\nX_test = X_test \/255.0","c87a2da0":"y_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","ce77353a":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","3f762169":"input_shape = X_train.shape[1:]","cdd92041":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=input_shape))\nmodel.add(layers.Conv2D(64,(3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2,2)))\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(10,activation='softmax'))\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer='adadelta', metrics=['accuracy'])","9ac3d8b3":"history = model.fit(X_train, y_train, batch_size = 128, epochs = 100, validation_split=0.2,verbose = 1)","affe3046":"model.evaluate(X_test, y_test)","592799bf":"fig,axes = plt.subplots(1,2, figsize=(15,8))\nfig.suptitle(\"The model 's evaluation \",fontsize=20)\naxes[0].plot(history.history['loss'])\naxes[0].plot(history.history['val_loss'])\naxes[0].set_title('Model Loss')\naxes[0].set_ylabel('Loss')\naxes[0].set_xlabel('Epoch')\naxes[0].legend(['Train','Test'])\n\n\naxes[1].plot(history.history['accuracy'])\naxes[1].plot(history.history['val_accuracy'])\naxes[1].set_title('Model Accuracy')\naxes[1].set_ylabel('Accuracy')\naxes[1].set_xlabel('Epoch')\naxes[1].legend(['Train','Test'])\nplt.show()","ec99f307":"pred = model.predict(X_test)","43a51a74":"def highlight_max(s):\n    '''\n    highlight the maximum in a Series yellow.\n    '''\n    is_max = s == s.max()\n    return ['background-color: yellow' if v else '' for v in is_max]\n\n\npd.DataFrame(pred[:10]).T.style.apply(highlight_max)","04caea4e":"X_test_re = X_test.reshape(-1, 32,32,3)\nfig, axes = plt.subplots(1,10,figsize=(20,10))\nfor i in range(0,10):\n    axes[i].imshow(X_test_re[i])\nplt.show()","e26bdfe6":"### CNN is the amazing model with very high Accuracy !","3162cb6d":"# Make CNN model","45913f0f":"# Evaluate the model","2de978af":"# Load the datasets and Data Handling","fe676e38":"### We will make CNN model that classify the images.\n\n1. Classify the handwritten number ( no color images )\n2. Classify the color images","ae489267":"### Unlike before, This dataset has color channel already.","b0133b64":"### We load the mnist datasets from keras.\n### X_train, X_test 's shape => (60000, 28, 28), (10000, 28, 28)\n### y_train, y_test 's shape => (60000,), (10000,)\n### The X_train and X_test are consist the np_array that means handwritten number and y_train and y_test are consist number.\n### Now we need to handle this data's shape for make model","5edc32b2":"## CNN model\n![](https:\/\/miro.medium.com\/max\/700\/0*LOsBwf0eUESjwmAP.png)\nImage url : https:\/\/towardsdatascience.com\/convolutional-neural-networks-in-practice-406426c6c19a","e483fcd9":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\n2. Classify the color images\n<\/h1>\n<\/div>","40c741b8":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\n1. Classify the handwritten number ( no color images )\n<\/h1>\n<\/div>","468d905b":"### Now we are classify the images that have color","d2528a2c":"# Fit the model","70284f7e":"## Import the libraries","474244a9":"### Refer the url about Conv2D and Maxpooling2D !","a0f9e366":"### This model has bad accuracy but, If increase epoch, It's accuracy increase too. (It's too long time...)","fb7d33d6":"## Evaluate the model","351e287e":"### X_train and X_test data shape -> (60000, 28, 28, 1), (10000, 28, 28, 1)\n### y_train and y_test data shape -> (60000, 10), (10000, 10)\n### Now we are ready to make CNN model !","23854391":"## What's the MaxPooling2D?\n![](https:\/\/media.geeksforgeeks.org\/wp-content\/uploads\/20190721025744\/Screenshot-2019-07-21-at-2.57.13-AM.png)\n\nMax pooling is a pooling operation that selects the maximum element from the region of the feature map covered by the filter. Thus, the output after max-pooling layer would be a feature map containing the most prominent features of the previous feature map.\n\nurl : https:\/\/www.geeksforgeeks.org\/cnn-introduction-to-pooling-layer\/","5d895f4c":"### We need to handle X data's shape. Because CNN model has color channel. But we use no color image. So we will put 1 to color channel.\n### If you want handle color channel, we need to use backend module from keras. If backend.image_data_format() is 'channel_first, we will put color channel first. else, we put color channel last\n\n### If you want more information about this, Refer the keras's docs plz. (https:\/\/keras.io\/api\/preprocessing\/image\/)","add59f1d":"## What's the Conv2D?\n![](https:\/\/missinglink.ai\/wp-content\/uploads\/2019\/03\/Group-2.png)\n\n2D convolutional layers take a three-dimensional input, typically an image with three color channels. They pass a filter, also called a convolution kernel, over the image, inspecting a small window of pixels at a time, for example 3\u00d73 or 5\u00d75 pixels in size, and moving the window until they have scanned the entire image. The convolution operation calculates the dot product of the pixel values in the current filter window with the weights defined in the filter.\n\nurl : https:\/\/missinglink.ai\/guides\/keras\/keras-conv2d-working-cnn-2d-convolutions-keras\/","c2b0691c":"### We need to handle the data more.\n1. X_train and X_test data's type is int now. So. change the data's type to float because make their range 0 ~ 1\n2. Completed change data's type, mob this by 255 to make range 0 ~ 1\n3. y data's shape is (1,). So we handle this data to categorical to make model","6e09232d":"![](https:\/\/keras.io\/img\/logo-k-keras-wb.png)","909209e6":"## Data load and Data handling","25bc38b7":"### X_train and X_test data shape -> (50000, 32, 32, 3), (10000, 32, 32, 3)\n### y_train and y_test data shape -> (50000, 10), (10000, 10)\n### Now we are ready to make CNN model !","cf2c7c10":"## Make CNN model","a9f8e7c3":"## Fit the model","e3afee55":"# CNN : Image classify model","9810c373":"### We load the datasets from keras at the same way with classfy handwritten number.\n### X_train, X_test 's shape => (50000, 32, 32, 3), (10000, 32, 32, 3)\n### y_train, y_test 's shape => (50000, 1), (10000, 1)\n### The X_train and X_test are consist the np_array that means images and y_train and y_test are consist number.\n### y data's number mean that\n0. airplane\n1. automobile\n2. bird\n3. cat\n4. deer\n5. dog\n6. frog\n7. horse\n8. ship\n9. truck\n\n### Now we need to handle this data's shape for make model"}}