{"cell_type":{"90e0226e":"code","fbc8821a":"code","80a24086":"code","4c4b7cb2":"code","6d54babf":"code","c7971227":"code","f229d9bd":"code","96eda4ef":"code","0167fc07":"code","9250b27a":"code","277f76ff":"code","830e94c4":"markdown","7f487f55":"markdown","244547c7":"markdown","a87e3e60":"markdown","4a69df23":"markdown"},"source":{"90e0226e":"from keras.models import Sequential\nfrom keras.layers import Dense\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn import preprocessing \nfrom sklearn.preprocessing import MinMaxScaler\nimport seaborn as sns\n\n","fbc8821a":"dataframe = pd.read_csv('..\/input\/churn-modelling\/Churn_Modelling.csv')\ndataframe.head()","80a24086":"df=dataframe.copy()\ndf.drop(['CustomerId','Surname'],axis=1,inplace=True)\nGeo_dummies = pd.get_dummies(prefix='Geo',data=df,columns=['Geography'])\nGender_dummies = Geo_dummies.replace(to_replace={'Gender': {'Female': 1,'Male':0}})\nchurn_data_encoded = Gender_dummies\nsns.countplot(y=churn_data_encoded.Exited ,data=churn_data_encoded)\nplt.xlabel(\"Count of each Target class\")\nplt.ylabel(\"Target classes\")\nplt.show()\n\nchurn_data_encoded.hist(figsize=(15,12),bins = 15)\nplt.title(\"Features Distribution\")\nplt.show()","4c4b7cb2":"# Transform Geography and Gender to numerical values\nle = preprocessing.LabelEncoder()\nencoded = dataframe.apply(le.fit_transform)\ndataset = encoded.values\n# X and Y values\nX = dataset[:,3:13]\nY = dataset[:,13]\n# Rescale min and max for X\nscaler = MinMaxScaler(feature_range=(0, 1))\nrescaledX = scaler.fit_transform(X)\n","6d54babf":"# initializing the ANN\nmodel = Sequential()","c7971227":"#Adding the input layer and the 1st hidden layer\nmodel.add(Dense(12, input_dim=10, kernel_initializer = 'uniform', activation='relu'))\n","f229d9bd":"#Adding the 2nd hidden layer\nmodel.add(Dense(10, kernel_initializer = 'uniform', activation='relu'))","96eda4ef":"#Adding the output layer \nmodel.add(Dense(1, kernel_initializer = 'uniform', activation='relu'))","0167fc07":"#Compiling the ANN \nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","9250b27a":"# Train model\nhistory = model.fit(rescaledX, Y, epochs=50, batch_size=50,  verbose=1)","277f76ff":"# Print Accuracy\nscores = model.evaluate(rescaledX, Y) \nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","830e94c4":"# **3. Visualizing the data**","7f487f55":"# **5. Building the Artificial Neural Network**","244547c7":"# **4. Preprocessing**","a87e3e60":"# **2. Import data**","4a69df23":"# **1. Import necessary libraries**"}}