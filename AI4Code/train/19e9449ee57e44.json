{"cell_type":{"e61f6239":"code","6840361d":"code","9e572337":"code","cebe483d":"code","a74129d0":"code","0514ca21":"code","8d25e468":"code","6298f8b7":"code","b263658b":"code","9a80232c":"code","34f076a2":"code","3712269d":"code","22c42f3d":"code","d5166ea9":"code","f23967a8":"code","2289b57d":"code","b5206a75":"code","4343c10e":"code","a382705b":"code","04bb27b1":"code","ab83afce":"code","97e51eb1":"code","e5067fca":"code","b435b81c":"code","c77a8896":"code","d77d2b13":"code","7acfcd8e":"code","d4abc406":"code","35a930a0":"code","c514bc50":"code","50621c0b":"code","9cc2b9f6":"code","8d0034b4":"code","fde1cf87":"code","f34f91f5":"code","57be6c81":"code","ece2268a":"code","6220f201":"code","9ee5f4d9":"code","09145793":"code","b3ad3f2f":"code","5d4b4387":"markdown","6b43ffb6":"markdown","b7cabe5d":"markdown","ce67c1de":"markdown","e72ba9f2":"markdown","d9c84ec5":"markdown","b31a3de2":"markdown","0bbd42ee":"markdown","2c30dafe":"markdown","aa8ad2cc":"markdown","b8ff478a":"markdown","63546e97":"markdown","c2dd5529":"markdown","e07fea47":"markdown","6fe077ac":"markdown","33b70af0":"markdown"},"source":{"e61f6239":"import numpy as np # linear algebra\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Packages for Visualisation \nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\n# When using the 'inline' backend, your matplotlib graphs will be included in your notebook, next to the code.\n\n","6840361d":"# Importing packages for Predictions\nfrom sklearn import metrics\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold   #For K-fold cross validation\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn import svm\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nfrom sklearn import tree","9e572337":"# Defining a function to print side by side\nfrom IPython.display import display_html\nfrom itertools import chain,cycle\ndef display_side_by_side(*args,titles=cycle([''])):\n    html_str=''\n    for df,title in zip(args, chain(titles,cycle(['<\/br>'])) ):\n        html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n        html_str+=f'<h2>{title}<\/h2>'\n        html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n        html_str+='<\/td><\/th>'\n    display_html(html_str,raw=True)\n\n# this works \n#df1 = pd.DataFrame(np.arange(12).reshape((3,4)),columns=['A','B','C','D',])\n#df2 = pd.DataFrame(np.arange(16).reshape((4,4)),columns=['A','B','C','D',])\n\n#df1_styler = df1.style.set_table_attributes(\"style='display:inline'\").set_caption('Caption table 1')\n#df2_styler = df2.style.set_table_attributes(\"style='display:inline'\").set_caption('Caption table 2')\n\n#display_html(df1_styler._repr_html_()+df2_styler._repr_html_(), raw=True)","cebe483d":"byb=pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\nmatch= pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\n\n# Change the name of Delhi Daredevils to Delhi Capital","a74129d0":"# ball by ball\nbyb","0514ca21":"# Match Data set\nmatch","8d25e468":"print(byb.columns)\nprint(match.columns)","6298f8b7":"byb.info()","b263658b":"match.info()","9a80232c":"# Checking match win total null values\nmatch['winner'].isnull().sum()","34f076a2":"# Checking null match values\n# I Checked the internet these matches were called off\n# So we could simply removes these columns\n\nmatch[match['winner'].isnull()==True]","3712269d":"match[match['result']=='tie']\n# So far 13 match are tie and we can see eliminator column is having Y  ","22c42f3d":"match.method.unique()","d5166ea9":"# Check the no match each team won\nmatch['winner'].value_counts()","f23967a8":"match['team1'].value_counts()","2289b57d":"match['team2'].value_counts()","b5206a75":"# Most wins in IPL\ntemp = pd.DataFrame({'Winner': match['winner']})\ncount_win = temp.value_counts()\n# Count_wins is a dictionary; with key being Mumbai Indian and all\n\n# creating label : containing team's name\n\nlabels= [I[0] for I in count_win.keys()]\n\n\n#count_win.bar()\n'''plt.bar(count_win)\nplt.show()'''\n\nbar, ax= plt.subplots(figsize=(10,10))\nax=plt.pie(x=count_win, autopct=\"%.1f\", labels= labels)\nplt.title(\"Wins\")\nplt.show()","4343c10e":"# Top 10 Umpire1 & 2 value count\n\nsns.barplot(x=match['umpire1'].value_counts().head(10).values,\n            y=match['umpire1'].value_counts().head(10).index,\n            data= match\n           )\nplt.xlabel(\"No of Match\")\nplt.ylabel(\"Name of Umpire\")\nplt.title('10 Most participated Umpire1')\nplt.show()","a382705b":"# Playing with date\nmatch['Season']= pd.DatetimeIndex(match['date']).year\nmatch.head(2)","04bb27b1":"match_per_season = match.groupby(['Season'])['id'].count().reset_index().rename(columns={'id':'matches'})\n\n# {'id':'matches'}: Dictionary to convert id columns to matches\n# match_per_season\nx= match_per_season.Season\ny=match_per_season.matches\nmps=match_per_season\n\nplt.bar(match_per_season.Season, match_per_season.matches)\nplt.xticks(rotation=90)\nplt.grid(True)\nplt.xticks(list(range(1,max(x)+1)),[str(i) for i in range(1,max(x)+1)], fontsize=15) # To plot X axis with 1 interval\nplt.yticks(np.arange(0,80,step=10), fontsize=15) # Here again we are setting frequency using array\nplt.xlim([2007, 2021]) # to define limit of x\nplt.ylim([0, 80])\nplt.xlabel(\"Season\", fontsize=15)\nplt.ylabel(\"No of Matches\", fontsize=15)\nplt.title('Total number matches played in each season', fontsize=15, fontweight = 'bold')\nplt.show()\n\n# Rendering dataframe as matplotlib table\n'''ax2 = fig.add_subplot(122)\nfont_size=14\nbbox=[0, 0, 1, 1]\nax2.axis('off')\nmpl_table = ax2.table(cellText = mps.values, rowLabels = mps.index, bbox=bbox, colLabels=mps.columns)\nmpl_table.auto_set_font_size(False)\nmpl_table.set_fontsize(font_size)\n'''","ab83afce":"# Mergring season column with byb using lefet joint\nseason_data= match[['id','Season']].merge(byb,left_on='id',right_on='id',how='left').drop('id', axis=1)\nseason_data.head(2)","97e51eb1":"# total Run scored in each season. Total Season Run= sr\n# Avg run per Season. average run =ars\n# msp= Match per Season\n\nsr = season_data.groupby(['Season'])['total_runs'].sum().reset_index()\nars= pd.concat([mps,sr.iloc[:,1]],axis=1)\nars['Runs scored per match']=ars['total_runs']\/ars['matches']\nars.set_index('Season',inplace=True)\n\n# Sub plot in sns\n\nf, axes = plt.subplots(1, 2)\nf.set_size_inches(17, 5)\naxes[0].grid(True)\naxes[1].grid(True)\nplt.xticks(fontsize=12)\nsns.barplot(x=ars.index,y=ars['total_runs'], data= ars, ax=axes[0]);\nsns.lineplot(x=ars.index,y=ars['Runs scored per match'], data= ars, ax=axes[1]);\n\n# ; avoids excess text output","e5067fca":"# Venue where atleast 10 matches have been played\n\nsns.set_context(\"talk\")\nfig, ax = plt.subplots(figsize=(12, 7))\nsns.barplot(x=match['venue'].value_counts().head(22).values,\n           y= match['venue'].value_counts().head(22).index,\n           data=match)\n\nplt.title('Venue where atleast 10 matches have been played')\nplt.xlabel('Venue Count')\nplt.ylabel('Venue')\nplt.show()","b435b81c":"# Venue where atmax 10 matches have been played\n\nsns.set_context(\"talk\")\nfig, ax = plt.subplots(figsize=(12, 7))\nsns.barplot(x=match['venue'].value_counts().tail(15).values,\n           y= match['venue'].value_counts().tail(15).index,\n           data=match)\n\nplt.title('Venue where atmax 10 matches have been played')\nplt.xlabel('Venue Count')\nplt.ylabel('Venue')\nplt.show()","c77a8896":"# Which Stadium is best for winning by wickets i.e team fielding won the match\nmatch.venue[match.result!='runs'].mode()","d77d2b13":"# Which stadium is best for winning by run i.e bat First\nmatch.venue[match.result=='runs'].mode()","7acfcd8e":"# Which stadium is best for team when they win the toss\n\n# Create a list containing complete team name\nt= match['team1'].unique()\nfor i in t:\n    venues= match.venue[match.toss_winner == i][match.winner==i].mode()\n    for venue in venues:\n        print(venue +' is best for '+ i + ' if they won the toss')\n        #print()\n    print()\n\n\n# Diagnosis\n'''print(a +' is best for '+ i + ' if they won the toss')\n    print()'''\n    # print(a.values[0])\n  #print(venues.values[0] +' is best for '+ i + ' if they won the toss')\n    #print()","d4abc406":"# Which is the best chasing team\nmatch.winner[match.result!='runs'].mode()","35a930a0":"# Which Team won the most no of matches batting 1st\nmatch.winner[match.result=='runs'].mode()","c514bc50":"match['result'].value_counts()","50621c0b":"# Toss Decision\nteams= match['toss_winner'].unique()\ndecision_making=pd.DataFrame([],columns =['Toss Winner','Decision', 'Times'])\n\nfor id, element in enumerate(teams):\n    temp_bat=match[(match['toss_winner']== element) & (match['toss_decision']== 'bat')]\n    temp_field= match[(match['toss_winner']== element)& (match['toss_decision']=='field')]\n    \n    #append to decision making\n    decision_making = decision_making.append({'Toss Winner': element, 'Decision':'bat', \n                                              'Times' :temp_bat['toss_winner'].count()},ignore_index= True)\n    \n    # For Feild\n    decision_making = decision_making.append({'Toss Winner': element, 'Decision':'field', \n                                              'Times' :temp_field['toss_winner'].count()},ignore_index= True)","9cc2b9f6":"decision_making","8d0034b4":"# Toss won vs match won\ntoss= match['toss_winner']==match['winner']\n# who won more, 1 who choose batting or the one who choose fielding\ndecision= match.toss_decision[match.toss_winner==match.winner]\n\nprint('Toss fig 1')\nf, ax =  plt.subplots(1,2,figsize=(8,3.5))\nsns.countplot(toss,ax=ax[0])\nsns.countplot(decision ,ax=ax[1])\nplt.show()","fde1cf87":"# Tosses won by each team &\ntoss= match['toss_winner'].value_counts()\n# sns.set(rc={'figure.figsize':(12,8)}, style='darkgrid')\n\n# No of match won by each team\nwin=match.winner.value_counts()\n\nprint('Toss fig 2')\n\nf, ax =  plt.subplots(1,2,figsize=(20,8))\n\nsns.set(font_scale=1.2)  # to resize x & y ticks just remember its scale not size\nsns.barplot(y=toss.index, x= toss, orient = 'h', saturation=1, ax=ax[0])\nax[0].set_title('No. of toss won by each team', fontweight='bold', fontsize=15 )\nsns.barplot(y=win.index, x= win, orient = 'h', saturation=1, ax=ax[1])\nax[1].set_title('No. of match won by each team', fontweight='bold', fontsize=15 )\n# plt.yticks(fontsize=12)\nplt.show()","f34f91f5":"print('Toss fig 3')\nax= plt.axes()\nsns.set(rc={'figure.figsize':(12,8)}, style='darkgrid')\nax.set_title('Toss decision across season', fontsize=15, fontweight='bold')\nsns.countplot(x='Season', hue='toss_decision' ,data = match, saturation=1)\nplt.xlabel(\"Season\")\nplt.ylabel(\"Count\")\nplt.show()","57be6c81":"# player winning the man of the match max no of time\nman_of_the_match= match.player_of_match.value_counts()\nman_of_the_match.columns = ['Batsman','man of match']\n#man_of_the_match.sort_values('man of match', ascending=False, inplace=True)\nmom= man_of_the_match.reset_index()\n\n\n# Arrange batsman as per total run in IPL\nruns= byb.groupby(['batsman'])['batsman_runs'].sum().reset_index()\nruns.columns =['Batsman','Total run']\nruns.sort_values('Total run', ascending=False, inplace=True)\nruns.reset_index(inplace=True)\nruns.drop('index',axis=1, inplace=True)\nprint(runs.head(10))\nprint()\nprint(\"Man of the Match\")\nprint()\nprint(mom.head(10))\n\n\n'''f, ax = plt.subplot(2,1,figsize=(5,5))\n\nsns.barplot(data=runs.head(10), y='Batsman', x='Total run', ax=ax[0])\nsns.barplot(data=mom.head(10), y='index' , x='player_of_match', ax=ax[1])\n'''","ece2268a":"# Store top 10 players as per total run they score in list\nplayers_name = runs['Batsman'].head(10).to_list()\n# players_name","6220f201":"# Dismissal of top 10 batsman\n\nf, ax = plt.subplots(5,2,figsize=(25,35))\n'''f.set_figheight(15)\nf.set_figwidth(15)'''\nax = ax.flatten()\n\nj=0\nfor i in players_name:\n    player = (byb['batsman']==i)\n    current_player = byb[player]\n    current_player['dismissal_kind'].value_counts().plot.pie( ax=ax[j],autopct='%1.1f%%', shadow=True,rotatelabels=False)\n    ax[j].set_title('Dismissal kind of '+i , fontweight= 'bold', fontsize=15)\n    ax[j].set_ylabel('')\n    ax[j].set_xlabel('')\n    j=j+1 \n   \n","9ee5f4d9":"# count single, double, triple, boundry and sixes for each player from top 10\n\nfor i in players_name:\n    player = (byb['batsman']==i)\n    current_player = byb[player]\n    def count (current_player,runs):\n        return len(current_player[current_player['batsman_runs']==runs])*runs\n    print('Score distribution of '+ i)\n    print('Runs scored from 1s :', count(current_player,1), '     And no of 1s = ',count(current_player,1)\/1)\n    print('Runs scored from 2s :', count(current_player,2), '      And no of 2s = ',count(current_player,2)\/2)\n    print('Runs scored from 3s :', count(current_player,3), '       And no of 3s = ',count(current_player,3)\/3)\n    print('Runs scored from 4s :', count(current_player,4), '     And no of 4s = ',count(current_player,4)\/4)\n    print('Runs scored from 6s :', count(current_player,6), '     And no of 6s = ',count(current_player,6)\/6)\n    print()\n","09145793":"# Race chart graph for best batsman\nrcg=byb[['batsman','batsman_runs']]\nrcg","b3ad3f2f":"# Race Bar Chart for Best team to win most IPL Match\nmatch_race= match[['date','winner']]\nmatch_race","5d4b4387":"[Continue from here](https:\/\/www.youtube.com\/watch?v=7rCW8fLdJGc)","6b43ffb6":"1. We need to merge Delhi capitals and Delhi DareDevil into **Delhi Capital** as it has been renamed to Delhi Capital.\n2. There is problem with Rising Pune Supergiant as 's' is added at some places.\n","b7cabe5d":"<p style = \"font-size : 25px; color : grey ; font-family : 'Comic Sans MS'; text-align : center; background-color : null; border-radius: 5px 5px;\"><strong>1. Data Loading & basic analysis <\/strong><\/p>","ce67c1de":"# Glossory\n1. SubPlot in Matplotlib\n> Matplotlib\u2019spyplot API has a convenience function called subplots() which acts as a utility wrapper and helps in creating common layouts of subplots, including the enclosing figure object, in a single call.\n> Plt.subplots(nrows, ncols)\n> The two integer arguments to this function specify the number of rows and columns of the subplot grid. The function returns a figure object and a tuple containing axes objects equal to nrows*ncols. Each axes object is accessible by its index. Here we create a subplot of 2 rows by 2 columns and display 4 different plots in each subplot.\n\n","e72ba9f2":"# 3. Data Preparation for Prediction\n* Label encoding \n* One-Hot encoding\nBasically ML understands no better than string so we will convert team name to no.","d9c84ec5":"<p style = \"font-size : 15px; color : #f5f5f0 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #00004d; border-radius: 5px 5px;\">Venue and 1st inning<\/p>\n","b31a3de2":"### Conclusion of Toss ka Funda\n**fig 1** : there is very slight edge to toss winning team. Plus we also observe that *team who won toss and choose to field have more chance of winning the match.*\n\n**fig 2 :** So does it mean winning the toss is directly proportional to winning the match as both graph seems correlated?\n> **No**, see the previous graph we can see the exact relationship between match won and toss won. It certainly gives edge but very minor edge.\n\n**fig 3 :** There is a trend seen in matches between 2016-2019 where team prefer to choose fielding rather than batting. How ever in 2020 this trend seem to fade.","0bbd42ee":"<p style = \"font-size : 15px; color : #ff3300 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff33; border-radius: 7px 5px;\"><Strong>Toss ka Funda<\/Strong><\/p>","2c30dafe":"# 4. Modeling\n* splitting the dataset\n* Choosing the ML algorithm\n* Cross Validation\n* Checking the model on test data","aa8ad2cc":"<p style = \"font-size : 25px; color : black ; font-family : 'Comic Sans MS'; text-align : center; background-color : #D07FFF; border-radius: 5px 5px;\"><strong>2.Exploratory Data Analysis (EDA)<\/strong><\/p> \nExploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns,to spot anomalies,to test hypothesis and to check assumptions with the help of summary statistics and graphical representations.","b8ff478a":"<p style = \"font-size : 15px; color : #f5f5f0 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #00004d; border-radius: 5px 5px;\"><\/p>\n\u200b","63546e97":"# Race Bar Chart Matplotlib\n\nHow to do this\n**Rough Idea** \n> might have to use feature engineering then cumulative no and then \n1. cum_race_df= race_df.cumsum(axis=0)\n2. Install : !pip install bar-chart-race\n3. import bar_chart_race as bcr\n            bcr.bar_chart_race(df= cum_race_df,figsize=(3, 3), title=\"CryptoCurrency Race\")","c2dd5529":"<p style = \"font-size : 50px; color : blue ; font-family : 'Comic Sans MS'; text-align : center; background-color : yellow; border-radius: 5px 5px;\"><strong>Objective<\/strong><\/p>\n\n1. Basic EDA includes most participated player. Most wins by a team (not only finals).\n2. Advance EDA Best performing Players though out the IPL all seasons.\n\n<p style = \"font-size : 20px; color : black ; font-family : 'Comic Sans MS'; text-align : center; background-color : #F4E0FF; border-radius: 5px 5px;\"><strong>Try to find out answers of<\/strong><\/p>\n1. Is there any correlation between Venue and Winning team\n2. Does Toss affect match outcome\n3. Does Batting 1st or 2nd impact the outcome?\n4. ","e07fea47":"#### Calculate dismissal of MS Dhoni\na= 'MS Dhoni'\nplayer = (byb['batsman']=='MS Dhoni')\ndf_dhoni=byb[player]\ndf_dhoni['dismissal_kind'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, rotatelabels=False)\nplt.title('Dismissal kind of '+ a, fontweight= 'bold', fontsize=15)\nplt.show()","6fe077ac":"### Which stadium is best for team when they win the toss\n* Principle code\n> match.venue[match.toss_winner == 'Kolkata Knight Riders'][match.winner=='Kolkata Knight Riders'].mode()\n* Mode : **The mode is the value that appears most frequently in a data set**. A set of data may ***have one mode, more than one mode, or no mode at all***. Other popular measures of central tendency include the mean, or the average of a set, and the median, the middle value in a set.\n\nRefer **List and Dir function** Dir function to check the attributes of an object.\n\n#### Try\na= match.venue[match.toss_winner == 'Kolkata Knight Riders'][match.winner=='Kolkata Knight Riders'].mode()\n#print(dir(a))\nprint(a.values[0])\n#print(a.to_string)","33b70af0":"Method have a lot of null values lets check what are the unique value does method have.\n\n* So it turns our in 19 matches outcome was decided by D\/L method.\n\nThe Duckworth\u2013Lewis\u2013Stern method (DLS) is a mathematical formulation designed to calculate the target score for the team batting second in a limited overs cricket match interrupted by weather or other circumstances. The method was devised by two English statisticians, Frank Duckworth and Tony Lewis, and was formerly known as the Duckworth\u2013Lewis method (D\/L).[1] It was introduced in 1997, and adopted officially by the ICC in 1999. "}}