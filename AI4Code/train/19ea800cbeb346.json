{"cell_type":{"349b8c18":"code","23f22bd1":"code","6c17be5f":"code","eb74701b":"code","cc5cd01e":"code","1a0a0229":"code","68db4085":"code","910ff949":"code","9ef32d56":"code","17d42a84":"code","b4fdcc48":"code","567555b7":"code","e4bb4275":"code","cf3159d9":"code","235b13c3":"code","c319ba1e":"code","518ea9af":"code","8e1eaac9":"code","fa8d1d6e":"markdown","91539fb8":"markdown","a43d9b90":"markdown","33b82f15":"markdown","e757fb5f":"markdown","f3a440c5":"markdown","0f16d171":"markdown","6fcb2a8c":"markdown","46ea42fa":"markdown","441aa1e1":"markdown","8861894d":"markdown","671a781e":"markdown","843a2a5f":"markdown","bd80bbef":"markdown","14287718":"markdown","aedbd771":"markdown","2abf5292":"markdown","7cfcc095":"markdown","60bb83f3":"markdown","d81a29cf":"markdown","0f0199c0":"markdown","e44f761a":"markdown","868357c3":"markdown"},"source":{"349b8c18":"!pip install -U tensorflow_datasets #We use this code to download dataset (tesndorflow_datasets) in GoogleCollab notebook (https:\/\/colab.research.google.com\/notebooks\/welcome.ipynb#recent=true)","23f22bd1":"from __future__ import absolute_import, division, print_function\n\n\n# TensorFlow and TensorFlow Datasets\nimport tensorflow as tf\nimport tensorflow_datasets as tfds\ntf.logging.set_verbosity(tf.logging.ERROR)\n\n# Another libraries\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tqdm\nimport tqdm.auto\ntqdm.tqdm = tqdm.auto.tqdm\n\nprint(tf.__version__)\ntf.enable_eager_execution()  ","6c17be5f":"dataset, metadata = tfds.load('fashion_mnist', as_supervised=True, with_info=True)\ntrain_dataset, test_dataset = dataset['train'], dataset['test']","eb74701b":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', \n               'Sandal',      'Shirt',   'Sneaker',  'Bag',   'Ankle boot']","cc5cd01e":"num_train_examples = metadata.splits['train'].num_examples\nnum_test_examples = metadata.splits['test'].num_examples\nprint(\"Number of training examples: {}\".format(num_train_examples))\nprint(\"Number of test examples:     {}\".format(num_test_examples))","1a0a0229":"def normalize(images, labels):\n  images = tf.cast(images, tf.float32)\n  images \/= 255\n  return images, labels\n\ntrain_dataset =  train_dataset.map(normalize)\ntest_dataset  =  test_dataset.map(normalize)","68db4085":"for image, label in test_dataset.take(1):\n  break\nimage = image.numpy().reshape((28,28))\n\nplt.figure()\nplt.imshow(image, cmap=plt.cm.binary)\nplt.colorbar()\nplt.grid(False)\nplt.show()","910ff949":"plt.figure(figsize=(10,10))\ni = 0\nfor (image, label) in test_dataset.take(25):\n    image = image.numpy().reshape((28,28))\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(image, cmap=plt.cm.binary)\n    plt.xlabel(class_names[label])\n    i += 1\nplt.show()","9ef32d56":"model = tf.keras.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28, 1)),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10,  activation=tf.nn.softmax)\n])","17d42a84":"model.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","b4fdcc48":"BATCH_SIZE = 32\ntrain_dataset = train_dataset.repeat().shuffle(num_train_examples).batch(BATCH_SIZE)\ntest_dataset = test_dataset.batch(BATCH_SIZE)","567555b7":"model.fit(train_dataset, epochs=5, steps_per_epoch=math.ceil(num_train_examples\/BATCH_SIZE))","e4bb4275":"test_loss, test_accuracy = model.evaluate(test_dataset, steps=math.ceil(num_test_examples\/32))\nprint('Accuracy on test dataset:', test_accuracy)","cf3159d9":"for test_images, test_labels in test_dataset.take(1):\n  test_images = test_images.numpy()\n  test_labels = test_labels.numpy()\n  predictions = model.predict(test_images)","235b13c3":"predictions.shape\n","c319ba1e":"predictions[0]","518ea9af":"np.argmax(predictions[0])","8e1eaac9":"test_labels[0]","fa8d1d6e":"<table class=\"tfo-notebook-buttons\" align=\"left\">\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.linkedin.com\/in\/thamer-saraei-472300124\/\"><img src=\"http:\/\/icons.iconarchive.com\/icons\/limav\/flat-gradient-social\/32\/Linkedin-icon.png\" \/>Join me <\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.youtube.com\/channel\/UC8Dt8pO_EqhP9unfnMd-64A?view_as=subscriber\"><img src=\"http:\/\/icons.iconarchive.com\/icons\/emey87\/social-button\/32\/youtube-icon.png\" \/>Join me <\/a>\n  <\/td>\n  <td>\n    <a target=\"_blank\" href=\"https:\/\/www.facebook.com\/timopyr\/\"><img src=\"https:\/\/icon-icons.com\/icons2\/1269\/PNG\/32\/1497553311-103_84832.png\" \/>Join me<\/a>\n  <\/td>\n<\/table>","91539fb8":"## Make predictions and explore\n\nNow, We can use  the model trained to make predictions about some images.","a43d9b90":"**Note : ** It turns out that the accuracy of the test dataset is less than that of the training dataset. This is perfectly normal because the model was formed on `train_dataset` : When the model sees images (from `test_dataset`), it has never seen during training . We can expect a decrease in performance.","33b82f15":"So the model is most confident that this image is a shirt, or `class_names[6]`. And we can check the test label to see this is correct:","e757fb5f":"## Build the model\n\nAs we saw in the previous tutorial, building the machine learning model requires configuring the layers of the model and then compiling it.\n\nWe will build a 2-layer feedforward neural network with 128 units in the hidden layer. the hidden layer will compute a linear function which is then passed into a ReLU activation function. \n\nFinally, we will use a Softmax function on the output from our network, to create 10 outputs (1 output for each target class).\n\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/harishnarayanan.org\/images\/writing\/artistic-style-transfer\/neural-network-1-hidden.svg\"\n         alt=\"Fashion MNIST sprite\"  width=\"410\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n     <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\"><\/a><br\/>\n  <\/td><\/tr>\n<\/table>\n\n\nLet's setup the layers.","f3a440c5":"## Train the model\n\nIt\u2019s time to pass our Fashion MNIST data into our neural network and see how it performs!\n\nFirst, we define the iteration behavior for the train dataset:\n1. Repeat forever by specifying `dataset.repeat()` \n\n2. The `dataset.shuffle(60000)` randomizes the order so our model cannot learn anything from the order of the examples.\n\n3. And `dataset.batch(32)` tells `model.fit` to use batches of 32 images and labels when updating the model variables.\n\nthe training step is performed by calling the `model.fit` method : \n\n1. `train_dataset`:  used to feed the training data to the model \n\n2. The model learns to associate images and labels.\n\n3. The `epochs=5` parameter limits training to 5 full iterations of the training dataset ( total of 5 * 60000 = 300000 examples) .\n\n","0f16d171":"Our model has three layers:\n\n* **input** `tf.keras.layers.Flatten`  :  This layer will transform the images from a 2d-array of 28 $\\times$ 28 pixels), to a 1d-array (lists) of 784 pixels (28\\*28). This layer has no parameters to learn, as it only reformats the data.\n\n* **\"hidden\"** `tf.keras.layers.Dense` : A densely connected layer of 128 neurons. The principe is very simple : Each neuron takes as input the 784 nodes of the previous layer, weighting these inputs according to hidden parameters (**weights** )that will be learned during the training, then sends a unique value to the next layer.\n\n* **output** `tf.keras.layers.Dense` : A 10-neuron **softmax** ( [Activation Function](https:\/\/towardsdatascience.com\/activation-functions-neural-networks-1cbd9f8d91d6) )layer. Each neuron represents a class of clothing. As in the previous layer, each neuron takes input from the 128 nodes in the layer before it, weights thats input according to learned parameters, and outputs a value in the range `[0, 1]`, representing the probability that the image belongs to that class. The sum of all 10 neuron values is 1.\n\n\n### Compile the model\n\nNow our model is ready for training but it needs a few more settings. These are added during the compiling step:\n\n\n* *Loss function* :  An algorithm for measuring how far the model's outputs are from the desired output. \n* *Optimizer* : An algorithm to adjust the internal parameters of the model to minimize  loss.\n* *Metrics* : Used to monitor the training and testing steps. OUr example example uses *accuracy*, the fraction of correctly classified images.","6fcb2a8c":"Uploading the dataset returns the metadata, as well as a **training dataset** and a **test dataset** : \n\n* The model will be training using `train_dataset`.\n* The model will be testing against `test_dataset`.\n\nThe images are 28 $\\times$ 28 arrays, with pixel values is in the range `[0, 255]`. The *labels* are an array of integers, in the range `[0, 9]`. \nEach of these integers correspond to the *class* of clothing represented  by the image : \nThe ten fashion class labels include:\n\n1.   T-shirt\/top\n2.   Trouser\/pants\n3.    Pullover shirt\n4.    Dress\n5.   Coat\n6.   Sandal\n7.   Shirt\n8.   Sneaker\n9.   Bag\n10.  Ankle boot\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*-kpgaee9X9Gm-SrQKdk_og.png\"\n         alt=\"Fashion MNIST sprite\"  width=\"410\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n     <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\"><\/a><br\/>\n  <\/td><\/tr>\n<\/table>\n\nEach image is mapped to a single label. \n\nSince **class names** are not included in the dataset, it should be stored here to be used when tracing images:","46ea42fa":"## Evaluate accuracy\n\nThen we will compare the performance of the model on the test dataset. In other words, we will evaluate the accuracy. So, for that, we will use all the examples of the test dataset.","441aa1e1":"**Thanks for your attention **\n\nI wish that you enjoyed this Notebook. In the next one, we'll see how to calssify clothing images **EASILY**  using the Convolution Neural Networks (CNN). \n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/previews.123rf.com\/images\/123vector\/123vector1409\/123vector140900073\/31489018-vector-illustration-of-see-you-soon-yellow-note-on-white-background.jpg\"\n         alt=\"Fashion MNIST sprite\"  width=\"200\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n     <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\"><\/a><br\/>\n  <\/td><\/tr>\n<\/table>","8861894d":"## Import Our dataset : Fashion MNIST ","671a781e":"## Preprocess the data\n\nThe value of each pixel in the image data is an integer in the range `[0,255]`. But for to work properly,we need to be normalize  these values  to the range `[0,1]`. So for that we should create a simple normalization function, and then apply it to each image in the test and train datasets.","843a2a5f":"Welcome Back , in this tutorial, we'll build and train a machine learning model ( Unsupervised model) to classify images of clothing.\n\nOur goal is to get the general sense of a ML project.\n\nLet's Start \n","bd80bbef":"### Explore our dataset\n\nLet's explore the format of the dataset before training the model. \n\nThe following code shows that there are 60,000 images in the training set, and 10000 images in the test set. \n","14287718":"## Install and import Packages\n\nFor this Colab, we'll need [TensorFlow Datasets](https:\/\/www.tensorflow.org\/datasets\/), an API which  we allow us to download and access the datasets we will work with.\n\nWe're also using a few helper packages like **Numpy**, **mathplotlib** and **math**","aedbd771":"Now we display the first 25 images from the *training set* and the class name below each image. \n\nNow, we're ready to build and train the network.","2abf5292":"# Classifying Images of Clothing\n\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/cdn-images-1.medium.com\/max\/1200\/1*az55lu4udkgtGdYX5inu2w.jpeg\"\n         alt=\"Fashion MNIST  Classification Problem\"  width=\"800\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n     <a href=\"https:\/\/github.com\/\"><\/a><br\/>\n  <\/td><\/tr>\n<\/table>","7cfcc095":"### Setup the layers\n\nThe core element of a neural network is the *layer*. A layer help us to extracts a representation of the input data. A series of connected layers gives a meaningful representation for the problem to be solved.\n\n**Note :** Lots of deep learning consists of connecting simple layers. Most layers, such as `tf.keras.layers.Dense`, contain internal parameters that are learned  during training.","60bb83f3":"\n\n\n\n\nLet's plot an image to see what it looks like.","d81a29cf":"We work in this Colab with the [Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist) dataset.\n\nSimilar to the MNIST digit dataset, the Fashion MNIST dataset includes:\n\n\n\n1.   60,000 training examples\n2.   10,000 testing examples\n3.   10 classes\n4.   28\u00d728 grayscale\/single channel images\n  \n\n The images show individual articles of clothing at low resolution (28 $\\times$ 28 pixels), as shown below:\n\n<table>\n  <tr><td>\n    <img src=\"https:\/\/d2908q01vomqb2.cloudfront.net\/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59\/2018\/05\/04\/ImagesSageMaker3.png\"\n         alt=\"Fashion MNIST sprite\"  width=\"400\">\n  <\/td><\/tr>\n  <tr><td align=\"center\">\n     <a href=\"https:\/\/github.com\/zalandoresearch\/fashion-mnist\"><\/a><br\/>\n  <\/td><\/tr>\n<\/table>\n\nWe will use 60,000 images to train the network and 10,000 images to evaluate how accurately the network learned to classify images. \n\n","0f0199c0":"As the model trains, the loss and accuracy metrics are displayed. ","e44f761a":"Here, the model has predicted the label for each image in the testing set. Let's take a look at the first prediction for example:","868357c3":"As we are 10 output, the our prediction is an array of 10 numbers. These describe the \"confidence\" of the model that the image corresponds to each of the 10 different clothes. We can see which label has the highest confidence value:"}}