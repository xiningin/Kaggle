{"cell_type":{"44b4e54b":"code","4c38d76c":"code","5e01098f":"code","751d2958":"code","25fce1d4":"code","eb753538":"code","5d39b779":"code","9f4184ff":"code","18312499":"code","0805fd8b":"code","1d530925":"code","7a443f3a":"code","c98cff92":"markdown","aff9f2b0":"markdown","798973a5":"markdown","e792aa43":"markdown","a42cf351":"markdown"},"source":{"44b4e54b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4c38d76c":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/GrammarandProductReviews.csv\")\ndata.head()","5e01098f":"data[\"reviews.text\"][0]","751d2958":"import nltk","25fce1d4":"nltk.word_tokenize(data[\"reviews.text\"][0])","eb753538":"data[\"reviews.text\"][0]","5d39b779":"# Tokenize using the white spaces\nnltk.tokenize.WhitespaceTokenizer().tokenize(data[\"reviews.text\"][0])","9f4184ff":"# Tokenize using Punctuations\nnltk.tokenize.WordPunctTokenizer().tokenize(data[\"reviews.text\"][0])","18312499":"#Tokenization using grammer rules\nnltk.tokenize.TreebankWordTokenizer().tokenize(data[\"reviews.text\"][0])","0805fd8b":"#Original Sentence\ndata[\"reviews.text\"][0]","1d530925":"#STEMMING\nwords  = nltk.tokenize.WhitespaceTokenizer().tokenize(data[\"reviews.text\"][0])\ndf = pd.DataFrame()\ndf['OriginalWords'] = pd.Series(words)\n#porter's stemmer\nporterStemmedWords = [nltk.stem.PorterStemmer().stem(word) for word in words]\ndf['PorterStemmedWords'] = pd.Series(porterStemmedWords)\n#SnowBall stemmer\nsnowballStemmedWords = [nltk.stem.SnowballStemmer(\"english\").stem(word) for word in words]\ndf['SnowballStemmedWords'] = pd.Series(snowballStemmedWords)\ndf","7a443f3a":"#LEMMATIZATION\nwords  = nltk.tokenize.WhitespaceTokenizer().tokenize(data[\"reviews.text\"][0])\ndf = pd.DataFrame()\ndf['OriginalWords'] = pd.Series(words)\n#WordNet Lemmatization\nwordNetLemmatizedWords = [nltk.stem.WordNetLemmatizer().lemmatize(word) for word in words]\ndf['WordNetLemmatizer'] = pd.Series(wordNetLemmatizedWords)\ndf","c98cff92":"**Tokenization:**\nTokenization is a task of breking a text into words or sentences.","aff9f2b0":"Instance of the text on which we will do tokenization.","798973a5":"**Token Normalization**\n1. Stemming: A process of removing and replacing suffixes to get to the root form of the word, which is called stem.\n2. Lemmatization: returns the base or dictionary form of a word.","e792aa43":"**NLTK (Natural Language Toolkit):** NLTK is a platform which provides easy to use interfaces and functions to carry out variouf text processing to work with natural language text. [[source]](https:\/\/www.nltk.org\/)","a42cf351":"**Data Description:** We will be using product review data for learning tokenization. Below we can see that there is a column called \"reviews.text\" which contains test for the reviews, we will do tokenization on this column."}}