{"cell_type":{"5053fe3b":"code","35825dbe":"code","3941d3bc":"code","3444667e":"code","e8f34c59":"code","0ec18cc8":"code","fadb5453":"code","b28e18bb":"code","5d1b993b":"code","f0f56dbe":"code","5e1df4f9":"code","b2fcff4f":"code","ac85843e":"code","a4d21cc4":"code","a53fe468":"code","c5addeb4":"code","2cec5d23":"code","dff66721":"code","8b45364f":"code","a9e33c89":"code","019f7c3e":"code","b69356c4":"code","e63c22a2":"code","762c9f4a":"code","9d81314c":"code","0bbfcce3":"code","b10e9306":"code","8053eb3e":"code","e1d0ba6a":"code","82a1742b":"code","0c13dc10":"code","6b82a326":"code","7bfe5d4e":"code","888435f9":"code","a1ea0b15":"code","65ff276d":"code","6c075b27":"code","286fd55e":"code","1d979280":"code","22027f29":"markdown","513f8980":"markdown","d855eb6a":"markdown","c2fe277a":"markdown","82cf0448":"markdown","668408e6":"markdown"},"source":{"5053fe3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('max_rows',10000)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35825dbe":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","3941d3bc":"train_data.head()","3444667e":"passenger_group = train_data.append(test_data).groupby('Ticket',as_index=False)['PassengerId'].count()","e8f34c59":"passenger_group.head()","0ec18cc8":"def add_survival_col(data):\n    if data['Ticket'].startswith('A') or data['Ticket'].startswith('SOTON') or data['Ticket'].startswith('W'):\n        return 'No Chance'\n    elif data['Ticket'].startswith('C.A.') and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]==2:\n        return '50-50'\n    elif (data['Ticket'].startswith('C.A.') or data['Ticket'].startswith('F.C.')) and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]>2 and data['Sex']=='female':\n        return 'High Chance'\n    elif data['Ticket'].startswith('CA'):\n        return 'No Chance'\n    elif data['Ticket'].startswith('C'):\n        return 'High Chance'\n    elif data['Ticket'].startswith('PC') and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]==2 and data['Sex']=='female':\n        return 'High Chance'\n    elif data['Ticket'].startswith('PC') and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]>2:\n        return 'High Chance'\n    elif data['Ticket'].startswith('STON') and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]>1:\n        return 'High Chance'\n    elif data['Ticket'].startswith('STON') and passenger_group[passenger_group['Ticket']==data['Ticket']]['PassengerId'].tolist()[0]==1:\n        return 'No Chance'\n    else:\n        return 'Not Sure'\n        ","fadb5453":"def fill_cabins(data):\n    return ('C' if data['Pclass'] ==1 else 'D' if data['Pclass'] ==2 else 'F' if data['Pclass'] ==3 else 'X') if pd.isna(data['Cabin']) else data['Cabin'][:1]\n    ","b28e18bb":"def generate_group(data):\n    if data['Age'] > 0 and data['Age'] < 15:\n        return 'Childhood'\n    elif data['Age'] >= 15 and data['Age'] < 25:\n        return 'Youth'\n    elif data['Age'] >= 25 and data['Age'] <= 64:\n        return 'Adulthood'\n    elif data['Age'] >= 64:\n        return 'Seniority'","5d1b993b":"def generate_relation_group(data):\n    if data['Age'] > 13 and data['Age'] < 25 and data['SibSp'] > 0 and data['Parch'] == 0:\n        return 'Youth Group'\n    elif data['Age'] > 13 and data['Age'] < 25 and data['SibSp'] == 0 and data['Parch'] == 0:\n        return 'Youth Single'\n    elif data['Age'] >= 25 and data['Age'] <= 30 and data['SibSp'] == 0 and data['Parch'] == 1:\n        return 'Couples'\n    elif data['Age'] >= 25 and data['SibSp'] == 0 and data['Parch'] == 0:\n        return 'Aged Single'\n    else:\n        return 'Family Group'","f0f56dbe":"def prep_data(data):\n    data['relationGroups'] = data.apply(generate_relation_group,axis=1)\n    data['AgeGroups'] = data.apply(generate_group,axis=1)\n    data['CabinCode'] = data.apply(fill_cabins,axis=1)\n    data['RiskLevel'] = ['Medium Risk' if i in ('A','B','G') else 'High Risk' if i in ('C','F','D','T') else 'Low Risk' for i in data['CabinCode']] \n    data['SurvivalChance'] = data.apply(add_survival_col,axis=1)\n    data['Title']=[i.split()[1] if i.split()[1] in ('Mr.', 'Mrs.', 'Miss.', 'Master.', 'Don.','Dr.','Mme.', 'Ms.','Major.','Mlle.', 'Col.', 'Capt.','Jonkheer.') else 'Unknown.' for i in data['Name']]\n    return data","5e1df4f9":"train_data = prep_data(train_data)\ntest_data = prep_data(test_data)","b2fcff4f":"train_data.groupby(['CabinCode','Survived'])['Survived'].count()","ac85843e":"train_data.head()","a4d21cc4":"test_data.head()","a53fe468":"X = train_data[['Pclass','Sex','AgeGroups','SibSp','Parch','Embarked','SurvivalChance','RiskLevel','SurvivalChance','Title','relationGroups']]\nY = train_data['Survived']","c5addeb4":"X = pd.get_dummies(X,columns=['Pclass','AgeGroups','Sex','Embarked','SurvivalChance','RiskLevel','SurvivalChance','Title','relationGroups'])","2cec5d23":"X.head()","dff66721":"X.columns","8b45364f":"from sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","a9e33c89":"x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2)","019f7c3e":"x_train_tf = tf.constant(x_train)\ny_train_tf = tf.constant(y_train)\nx_test_tf = tf.constant(x_test)\ny_test_tf = tf.constant(y_test)","b69356c4":"from tensorflow.keras import initializers\nw_stddev = 1\nb_stddev = 0","e63c22a2":"model = tf.keras.models.Sequential(\n        [\n            tf.keras.Input(shape=(50,)),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(512,activation='relu'),\n            tf.keras.layers.Dense(1,activation='relu')\n        ]\n        )","762c9f4a":"# model.load_weights('my_model_weights.h5')","9d81314c":"model.compile(loss=tf.keras.losses.mean_squared_error,optimizer='adam',metrics=['accuracy'])","0bbfcce3":"model.fit(x_train_tf,y_train_tf,verbose=2,epochs=150)","b10e9306":"model.evaluate(x_test_tf,y_test_tf)","8053eb3e":"# weights = model.weights\n# model.save_weights('my_model_weights.h5')","e1d0ba6a":"X_pre = test_data[['Pclass','Sex','AgeGroups','SibSp','Parch','Embarked','SurvivalChance','RiskLevel','SurvivalChance','Title','relationGroups']]\nX_pre = pd.get_dummies(X_pre,columns=['Pclass','AgeGroups','Sex','Embarked','SurvivalChance','RiskLevel','SurvivalChance','Title','relationGroups'])\nX_pre['Title_Capt.'] = 0\nX_pre['Title_Don.']=0\nX_pre['Title_Jonkheer.']=0\nX_pre['Title_Major.']=0\nX_pre['Title_Mlle.']=0\nX_pre['Title_Mme.']=0\nX_pre['relationGroups_Couples']=0\n","82a1742b":"X_pre_tf = tf.constant(X_pre)","0c13dc10":"X_pre.columns","6b82a326":"y_pre = model.predict(X_pre)","7bfe5d4e":"y_pre = (y_pre > 0.5).astype(int)","888435f9":"y_pre = pd.DataFrame(y_pre,columns=['Survived'])","a1ea0b15":"original_data = pd.DataFrame([0,1,0,0,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1])\n","65ff276d":"from sklearn.metrics import accuracy_score\naccuracy_score(original_data,y_pre)","6c075b27":"# test_data = test_data.drop(columns=['Survived'])","286fd55e":"test_data = test_data.join(y_pre)","1d979280":"test_data[['PassengerId','Survived']].to_csv('submissions.csv',index=False)","22027f29":"# Submission preparation","513f8980":"1. If you see above, passengers in A,B,G Cabin have 50-50 Chances hence medium risk\n1. C,F,D,T Cabin is at high risk\n1. E is Safe\n","d855eb6a":"Analysis on Tickets\n\n1. When Ticket started with 'A' or 'SOTON' or 'W' then there is no chance of Survival\n1. When Ticket started with 'C ' then there is high chance of Survival\n1. When Ticket started with 'C.A.' and passangers are 2 there is 50-50 chances of survival and when passangers are greator than 2 and Sex is Female then high chance of Survival, when passanger is 1 not sure\n1. When Ticket started with 'CA ' or 'CA. ' then no chance of Survival\n1. When Ticket started with 'F.C.' and passangers are greator than 2 and Sex is Female then high chance of Survival, when passanger is 1 not sure\n1. When Ticket started with 'PC' and passangers greator than 2 then high chance of Survival, when greator than 1 and Sex is Female then high chance of Survival, else not sure\n1. When Ticket started with 'STON' and passangers are greator than 1 then high chance of Survival else no chance of Survival","c2fe277a":"# Implement Tensorflow on above data","82cf0448":"1. Based on below code, it is identified that most of the Class 1 Cabins are A,B,C,T , Class 2 Cabins are D,E and Class 3 are F, G\n\n* train_data.groupby(['CabinCode','Pclass'],as_index=False)['PassengerId'].count()\n\n\nNote passenger id in below image is count of passangers, I was not able to rename\n\n![image.png](attachment:image.png)","668408e6":"![image.png](attachment:image.png)"}}