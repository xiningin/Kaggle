{"cell_type":{"c65958d1":"code","86cd88a0":"code","94a1cdf0":"code","5a931421":"code","61bc1ab0":"code","5a8484a4":"code","44c1b605":"code","60c3afc8":"code","5b51fd56":"code","30f9d815":"code","a6d0da61":"code","1de3dd05":"code","02d0b06b":"code","5678ae33":"code","314f74b8":"code","478c7080":"code","b4dde843":"code","d2f10103":"code","b693ff8c":"code","fd703ed9":"code","b9612856":"code","2d8efe16":"code","995a2c12":"code","be427f09":"code","0588d39b":"code","e912e098":"code","eb26d7b0":"code","f13a6e4a":"markdown","3231dd77":"markdown","26f8b6e5":"markdown","71ffb1bc":"markdown","16562a20":"markdown","86c9df3d":"markdown","6c899350":"markdown","b1f898df":"markdown","5423c2a2":"markdown","de530d80":"markdown","408917be":"markdown","1e40860c":"markdown","5eeab0b4":"markdown","b29ab699":"markdown","7b3126a4":"markdown","72bdd07b":"markdown","04566a6c":"markdown","42d99549":"markdown","af0a5277":"markdown","71ab32d1":"markdown","e1ff0d54":"markdown","f38cd171":"markdown","c0c4330a":"markdown","cc6af51a":"markdown","6a3bfb4b":"markdown","fc40f348":"markdown","5788ffdc":"markdown","df49e56b":"markdown","91d08249":"markdown","a15f4946":"markdown","8817bc20":"markdown","999b7e49":"markdown","55d1bf28":"markdown","378ef3e6":"markdown","42d4cfc1":"markdown","d2a6d3f9":"markdown","f0bec1b8":"markdown","6233a899":"markdown","e493fbdd":"markdown","49434ac2":"markdown","44c85451":"markdown","d84e62b3":"markdown","a5afee29":"markdown","6a69e262":"markdown","429133c8":"markdown","47b3ac4f":"markdown","43ab659b":"markdown","c6f8a24a":"markdown","1498ed29":"markdown"},"source":{"c65958d1":"import fastai\nfrom fastai.vision.all import *\nfrom fastai.vision.widgets import *\nimport pandas as pd\nimport os","86cd88a0":"#imports files from kaggle\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","94a1cdf0":"#creates a path to the folder containing image files\npath = Path(\"..\/input\/chinese-mnist\/data\/data\")\n\n#makes .ls() format easier to read  \nPath.BASE_PATH = path\n\n#checks image files using .ls() method\npath.ls()","5a931421":"df = pd.read_csv(\"..\/input\/chinese-mnist\/chinese_mnist.csv\")\ndf.head()","61bc1ab0":"df['fname'] = (\"input_\" + df['suite_id'].astype(str) \n               + \"_\" \n               + df['sample_id'].astype(str) \n               + \"_\" \n               + df['code'].astype(str) \n               + \".jpg\")\ndf.head()","5a8484a4":"def get_x(r): return path\/r['fname']\n\n#.astype() and .split() method were added to contain each label\ndef get_y(r): return r['value'].astype(str).split(\" \")","44c1b605":"#creates a Datablock object\ndblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                  splitter=RandomSplitter(seed=42),\n                  get_x=get_x,\n                  get_y=get_y,\n                  item_tfms = RandomResizedCrop(128, min_scale=0.35))\n\n# passes our dataframe into the dataloaders method of our DataBlock object\ndls = dblock.dataloaders(df)","60c3afc8":"#displays number of batches for our training and validation sets\nlen(dls.train), len(dls.valid)","5b51fd56":"#displays a batch with images and labels\ndls.show_batch(nrows=1, ncols=5)","30f9d815":"#displays training Dataset\ndls.train_ds","a6d0da61":"#displays validation Dataset\ndls.valid_ds","1de3dd05":"#uses fastai's resnet18 model\nlearn = cnn_learner(dls, resnet18)\n\n#creates a batch from our train dataset\nx,y = to_cpu(dls.train.one_batch())\n\n#generates predictions from our batch\nbatch = learn.model(x)","02d0b06b":"#analyzes batch\nbatch.shape","5678ae33":"#we can index into our batch to return predictions for a single image\nbatch[0]","314f74b8":"learn.loss_func","478c7080":"#defining our own sigmoid function\ndef sigmoid(x): return 1\/(1+torch.exp(-x))\n\n#defining our own BCELoss function  \ndef binary_cross_entropy(inputs, targets):\n    inputs = inputs.sigmoid()\n    return -torch.where(targets==1, inputs, 1-inputs).log().mean()","b4dde843":"#creates a loss function\nloss_func = nn.BCEWithLogitsLoss()\n\n#passes our predictions and our labels into our loss function\nloss = loss_func(batch, y)\n\n#prints out or loss\nloss","d2f10103":"def accuracy_multi(inp, targ, thresh=0.5, sigmoid=True):\n    if sigmoid: inp = inp.sigmoid()\n    return ((inp>thresh)==targ.bool()).float().mean()","b693ff8c":"learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fine_tune(6)","fd703ed9":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_top_losses(5, nrows=1)","b9612856":"interp.most_confused(5)","2d8efe16":"learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.lr_find()","995a2c12":"learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fine_tune(6, base_lr=1e-2)","be427f09":"learn = cnn_learner(dls, resnet18, metrics=partial(accuracy_multi, thresh=0.2))\nlearn.fit_one_cycle(3, base_lr=1e-2)","0588d39b":"learn.unfreeze()","e912e098":"learn.lr_find()","eb26d7b0":"learn.fit_one_cycle(6, 1e-4)","f13a6e4a":"The Chinese MNIST dataset provides us with 15,000 images of Chinese numbers handwritten by 100 volunteers. Each participant provided 10 samples of the 15 Chinese characters for numbers. \n\nThe objective of this notebook is to demonstrate how to solve the Chinese MNIST classification task with 0.999 accuracy using: \n1. `fastai` version 2\n2. GPU acceleration\n3. Multilabel classification","3231dd77":"Notice the `grad_fn` attribute. This tells us fastai is automatically keeping track of our gradients for us! Our gradients will be calculated from our loss and they will be used to update our parameters.","26f8b6e5":"Because we are using transfer learning, we are replacing the final linear layer of our `cnn` with a new layer of random weights. We want to train a model in such a way that it is able to remember the useful ideas from the pretrained model so that it can adjust these weights as required for our specific task. We can do this by freezing pretrained layers and only updating the weights for our new linear layer. \n\n`fastai` lets us do this with the `fit_one_cycle` method:","71ffb1bc":"We can see that there's not much activity between 1e-7 and 1e-3 (fastai's default learning rate), so lets test a learning rate of 1e-2:","16562a20":"Notice that our `DataLoaders` object has split our `DataFrame` into a training `Dataset` of 12,000 and a validation `Dataset` of 3,000. Furthermore, our `DataLoaders` object transforms our `Dataset` objects into batches. \n\nAlso notice the structure of our `Dataset` objects:\n* Our x variables are images with a size of 64x64 pixels. \n* The lists of 0s and 1s contains our category labels and refers to ***one-hot-encoding***. Each category is considered independently and a 1 is granted if the category is present. Therefore, we can expect to see 15 digits for our 15 possible categories. \n* Although we don't expect to find multiple labels in our data, our multilabel classification approach allows our model to choose no label in the abscence of a prediction above our treshold. This is in contrast to a multicategory classification model with a softmax loss function which always predicts a category label even when there are no valid matches.","86c9df3d":"Our batch size is 64 images, which is the default for fastai, and each image is generating predictions for 15 seperate categories. Lets analyze a single image:","6c899350":"### Model Analysis","b1f898df":"Lets break this down: \n* `blocks` let us to pass `ImageBlock` and `MultiCategoryBlock.` Even though we converted our x variables into image paths, we still need a method to open our images and to transform them into tensors. `ImageBlock` does this. \n* `MultiCategoryBlock` allows us to have multiple labels for each item. More on one-hot-encoding later.\n* `splitter` splits our `DataFrame` into a training and validation set. Default split is 80\/20.\n* `get_x` calls our `get_x` function to retreive our image paths. \n* `get_y` calls our `get_y` function to retreive our image labels.\n* `item_tfms` makes sure all of our images are the same scale and GPU compatible.\n* `dblock.dataloaders(df)` creates a `DataLoaders` object and passes in our `DataFrame`.\n\nLet's analyze our new `DataLoaders` object: ","5423c2a2":"Now that we understand `BCEWithLogitsLoss`, lets compare our batch predictions with our targets.","de530d80":"We can improve our model by finding our ideal learning rate. Fastai lets us do this with the `.lr_find()` method on our `learner` object:","408917be":"Our baseline model was able to achieve 0.999 accuracy on our first attempt. Lets break down the `learner` object to see how we got our results:  \n* `cnn_learner` is a fastai class that allows us to build our model with a pretrained convolutional neural network. \n* `dls` is our `DataLoaders` object that contains our images in batches of training and validation sets.\n* `resnet18` tells fastai we want to use a pretrained `cnn` with 18 layers.\n* `metrics` calls our `accuracy_multi()` function which is needed for multilabel classification.\n* `fine_tune` is a fastai method that allows us to train our model and pass in the total number of epochs\n* `base_lr` is our learning rate which will be multiplied by our gradients to inform new activations. The default learning rate in fastai is 1e-3 and does not need to be specified inside of `fine_tune`. ","1e40860c":"### Create a DataFrame","5eeab0b4":"### Define Variables","b29ab699":"Before we jump into creating a `DataLoaders` object, lets review some terminology. Note that the last two classes are specific to fastai and build ontop of PyTorch's `Dataset` and `DataLoader` classes.\n\n* `Dataset`: A collection that returns a tuple of your independent and dependent variable for a single item.\n* `DataLoader`: An iterator that provides a stream of mini-batches, where each mini-batch is a tuple of a batch of independent variables and a batch of dependent variables.\n* `Datasets`: An object that contains a training `Dataset` and a validation `Dataset`.\n* `DataLoaders`: An object that contains a training `DataLoader` and a validation `DataLoader`.\n<p><font size=\"1\">*From \"Deep Learning for Coders with Fastai and PyTorch\" - credit to fastai\/Jeremy Howard\/Sylvain Gugger<\/font><\/p>\n\nWe will need to compile a `DataBlock` to create our `DataLoaders` object:","7b3126a4":"* Because we have a one-hot-encoded dependent variable, we cannot use a cross entropy loss function. The softmax function that's used to transform predictions into comparative activations makes it impossible to do multilabel classification. Softmax tends to push one activation over the others and cannot identify multiple labels in one image.\n* Instead, a Binary Cross-Entropy loss function uses a sigmoid function to transform our predictions into activations between 0 and 1. Each prediction is then compared with our targets using a similar function to `mnist_loss`.\n* `BCEWithLogitsLoss` refers to both sigmoid and binary cross-entropy loss in a single function","72bdd07b":"Now that we have our `DataLoaders` object, lets create a `learner`. ","04566a6c":"### From DataFrames to DataLoaders","42d99549":"Before we test our `DalaLearner` object, lets generate predictions from a single batch.","af0a5277":"# <a id='7'>Conclusions<\/a>","71ab32d1":"### Results","e1ff0d54":"We currently don't have a column that we can use to reference our x variables\/images. \n\nNotice that our image files have a similar structure. For example, `\"input_47_6_7.jpg\"` and `\"input_12_8_2.jpg\"` share various components. All of our image files begin and end similarly, and they all contain, in the same order, the number of the participant, the number of the sample, and the code of the Chinese character.\n\nWe can create a new column in Pandas and use our existing columns to concatenate our file names.","f38cd171":"Now that we have our DataFrame, we can define our variables. We can use our new `fname` column for our x variables, but we will need to attach a path to each variable. We can also use our `value` column to label our y variables.","c0c4330a":"Our accuracy has increased once more!","cc6af51a":"# <a id='4'>Preparing our Learner<\/a>   ","6a3bfb4b":"Out of our 3000 images in our validation set, our model only mislabeled a few. Because we are using one-hot-encoding our results are saying actual 1s were predicted as 0s x times, and actual 0s were predicted as 1s y times. In any case, we can use the sum of x and y to determine the total number of mislabelled images.","fc40f348":"### Unfreezing and Transfer Learning","5788ffdc":"The Chinese MNIST dataset also contains a CSV file that we can use to label our variables.","df49e56b":"After importing your files, you can create a `path` to the folder that contains your images. The `path` object contains a `.ls()` method that behaves similar to a Python `list` but has additional functionality. ","91d08249":"As we expected, our image is receiving predictions for each of our 15 categories. We will compare our predictions with our targets\/labels to calculate a loss.","a15f4946":"We don't have a steep decending slope like our previous plot because the model has already been trained. The goal is to pick a point before the sharp increase, not the maximum gradient. Given the flattened slope, we will train our model with our transfered weights for 6 more epochs.","8817bc20":"<h1><center><font size=\"6\">fastai-v2\/GPU for Chinese MNIST Prediction<\/font><\/center><\/h1>\n\n# <a id='0'>Table of Contents<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Preparing our Data<\/a>   \n- <a href='#3'>Preparing our DataBlock<\/a>   \n- <a href='#4'>Preparing our Learner<\/a> \n- <a href='#5'>Baseline Model<\/a> \n- <a href='#6'>Improving our Model<\/a> \n- <a href='#7'>Conclusions<\/a> ","999b7e49":"By default, fastai will apply a Binary Cross-Entropy loss function to multilabel classification problems. We can call `loss_func` on our learner object to see our loss function. ","55d1bf28":"### Import Files","378ef3e6":"### Learning Rate Finder","42d4cfc1":"# <a id='3'>Preparing our DataBlock<\/a>  ","d2a6d3f9":"# <a id='2'>Preparing our Data<\/a>   ","f0bec1b8":"### Batch Testing the Model","6233a899":"# <a id='1'>Introduction<\/a> ","e493fbdd":"Our results improved! But there's still more we can do. ","49434ac2":"### Metrics for Accuracy","44c85451":"# <a id='6'>Improving our Model<\/a>","d84e62b3":"We were able to create a baseline model with .999+ accuracy using fastai's library, gpu acceleration, and multilabel classification. We were further able to improve our model by freezing our pretrained weights and by finding the ideal learning rates for multiple steps in our model. There is still some fine-tuning we can do, but this should be enough to get others started with fastai and multilabel classification!\n\nThank you to Jeremy Howard.","a5afee29":"We will also need to make sure our metric is compatible with our multilabel classification task. Because we could have more than one prediction on a single image, we need to pick a treshold to evaluate the accuracy of each prediction. The default treshold in fastai is 0.5, but Jeremy Howard suggests using 0.2.","6a69e262":"# <a id='5'>Baseline Model<\/a>","429133c8":"After unfreezing our layers, we call the `.lr_find` method again since adding new layers results in a new learning rate:","47b3ac4f":"Now that we have our results, we can plot our top losses with fastai's `ClassificationInterpretation` class. Notice that our `probabilities` category is a tensor of 15 predictions for each image. ","43ab659b":"### Install Dependencies","c6f8a24a":"### Loss Function","1498ed29":"Now that we've gone through 3 epochs, we can unfreeze our pretrained layers using the fastai `.unfreeze()` method:"}}