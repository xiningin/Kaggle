{"cell_type":{"6faac9ef":"code","e33f02b6":"code","7d99de70":"code","1c0914e7":"code","5b919ee5":"code","56d9ac63":"code","1d77a880":"code","7491ed4f":"code","a2e1c3d0":"code","6fd752f1":"code","ca3b0396":"code","7c7b3ae0":"code","c34db88a":"code","7cc30e58":"code","de645268":"code","b433a32c":"markdown","416a3a34":"markdown","d187c263":"markdown","cf54e24a":"markdown","20120659":"markdown","20e2d803":"markdown","9bb595e7":"markdown","db82a3ec":"markdown","138160bf":"markdown","4186af0c":"markdown","721a46b3":"markdown"},"source":{"6faac9ef":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e33f02b6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom surprise import Dataset\nfrom surprise import Reader\nfrom surprise import SVD,accuracy,KNNBasic\nfrom surprise.model_selection import cross_validate,train_test_split\nimport missingno as msno","7d99de70":"df=pd.read_csv('..\/input\/book-ratings\/ratings.csv')","1c0914e7":"df","5b919ee5":"msno.matrix(df)","56d9ac63":"df.info()","1d77a880":"df.shape","7491ed4f":"plt.style.use('default')\nplt.figure(figsize=(6,5))\nsns.countplot(x='rating',data=df,color='dimgrey')\nsns.despine(bottom=True,left=True)\nplt.title('Distibution of Ratings')","a2e1c3d0":"df['user_id'].nunique()","6fd752f1":"highest_no_rat=df.groupby('book_id')['user_id'].count().sort_values().tail(10)\nhighest_no_rat.plot.barh(figsize=(7,4),color='dimgrey')\nplt.style.use('default')\nsns.set_context('paper')\nsns.despine()\nplt.xlabel('No. of User Ratings',fontsize=10)\nplt.title('Book_ID with highest No. of User Ratings',fontsize=10)","ca3b0396":"reader=Reader(rating_scale=(1,5))\n\ndata=Dataset.load_from_df(df,reader)\n\nalgo=SVD()\n\ncross_validate(algo,data,cv=3)\n","7c7b3ae0":"algo.predict(2,4081,r_ui=4)","c34db88a":"train,test=train_test_split(data,test_size=.25)","7cc30e58":"from surprise import CoClustering\nco_clu=CoClustering()\nco_clu.fit(train)\npreds=co_clu.test(test)\naccuracy.rmse(preds)","de645268":"co_clu.predict(2,4081,r_ui=4)","b433a32c":"#### The predicted rating was close enough to actual rating using the CoClustering algorithm.","416a3a34":"#### Same as sklearn's methods,we can use **fit** and **test** methods for training the model and predicing on unseen data","d187c263":"#### Same as before let's predict on user_id=2 and book_id=4081 with the original rating (r_ui=4)","cf54e24a":"<font size=4><b>Checking which ratings have been provided most by the users.<\/b><\/font>","20120659":"<font size=4><b>Checking distinct users<\/b><\/font>","20e2d803":"### Import the libraries","9bb595e7":"### Predict the rating of a book with user_id=2 and book_id=4081","db82a3ec":"### **CoCLustering**\n* <font size=3>A collaborative filtering algorithm based on co-clustering.<\/font>\n* <font size=3>Users and items are assigned some clusters Cu, Ci, and some co-clusters Cui.<\/font>\n* <font size=3>The prediction r<sub>ui<\/sub> is given as:<\/font>\n* <font size=3>r<sub>ui<\/sub>=C'<sub>ui<\/sub>+(u<sub>u<\/sub>-C'<sub>u<\/sub>)+(u<sub>i<\/sub>-C'<sub>i<\/sub>)<\/font>\n* <font size=3>where C'<sub>ui<\/sub> is the average rating of co-cluster Cui, Cu' is the average rating of u\u2019s cluster, and Ci' is the average rating of i\u2019s cluster.<\/font>","138160bf":"<font size=4><b>Reader Class<\/b><\/font>\n<br>\n<font size=3>The Reader class is used to parse a file containing ratings. The default format in which it accepts data is that each rating is stored in a separate line in the order user item rating. This order and the separator can be configured using parameters:<\/font>\n* <font size=3>line_format is a string that stores the order of the data with field names separated by a space, as in \"item user rating\".<\/font>\n* <font size=3>  sep is used to specify separator between fields, such as ','.<\/font>\n* <font size=3>  rating_scale is used to specify the rating scale. The default is (1, 5).<\/font>\n* <font size=3>  skip_lines is used to indicate the number of lines to skip at the beginning of the file. The default is 0.<\/font>\n\n<font size=4><b>Dataset Module<\/b><\/font>\n<br>\n<font size=3>The Dataset module is used to load data from files, Pandas dataframes, or even built-in datasets available for experimentation.<\/font>","4186af0c":"## **SURPRISE**\n<font size=4><b>Surprise is a Python scikit for building and analyzing recommender systems that deal with explicit rating data.<\/b><\/font>\n<font size=4><b>Surprise was designed with the following purposes in mind:<\/b><\/font>\n* <font size=3>Give users perfect control over their experiments.<\/font>\n* <font size=3>Alleviate the pain of Dataset handling. Users can use both built-in datasets (Movielens, Jester), and their own custom datasets.<\/font>\n* <font size=3>Provide various ready-to-use prediction algorithms such as baseline algorithms, neighborhood methods, matrix factorization-based ( SVD, PMF, SVD++, NMF), and many others. Also, various similarity measures (cosine, MSD, pearson\u2026) are built-in.<\/font>\n* <font size=3>Make it easy to implement new algorithm ideas.<\/font>\n* <font size=3>Provide tools to evaluate, analyse and compare the algorithms\u2019 performance. Cross-validation procedures can be run very easily using powerful CV iterators (inspired by scikit-learn excellent tools), as well as exhaustive search over a set of parameters.<\/font>","721a46b3":"### Checking for missing values"}}