{"cell_type":{"344d2441":"code","8eb706d1":"code","a84a3fb6":"code","b2bf5c7b":"code","deb109bb":"code","56c8396c":"code","2306df89":"code","fa511758":"code","03be40b1":"code","b3850275":"code","8cc08e6b":"code","c00611bf":"code","02bc6ba7":"code","c6c6ecdd":"markdown","c7669305":"markdown","ad956e17":"markdown","d5074a0c":"markdown","44625f1c":"markdown","a2a99a03":"markdown","c2d31d66":"markdown","12858c8d":"markdown"},"source":{"344d2441":"import numpy as np \nimport pandas as pd \nimport json","8eb706d1":"pd_train = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/train.csv')\npd_test = pd.read_csv('\/kaggle\/input\/tweet-sentiment-extraction\/test.csv')","a84a3fb6":"train = np.array(pd_train)\ntest = np.array(pd_test)","b2bf5c7b":"def find_all(input_str, search_str):\n    l1 = []\n    length = len(input_str)\n    index = 0\n    while index < length:\n        i = input_str.find(search_str, index)\n        if i == -1:\n            return l1\n        l1.append(i)\n        index = i + 1\n    return l1","deb109bb":"!mkdir data","56c8396c":"# Convert training data\n\noutput = {}\noutput['version'] = 'v1.0'\noutput['data'] = []\n\nfor line in train:\n    paragraphs = []\n    \n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    answers = []\n    answer = line[2]\n    if type(answer) != str or type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answer_starts = find_all(context, answer)\n    for answer_start in answer_starts:\n        answers.append({'answer_start': answer_start, 'text': answer})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open('data\/train.json', 'w') as outfile:\n    json.dump(output, outfile)","2306df89":"# Convert test data\n\noutput = {}\noutput['version'] = 'v1.0'\noutput['data'] = []\n\nfor line in test:\n    paragraphs = []\n    \n    context = line[1]\n    \n    qas = []\n    question = line[-1]\n    qid = line[0]\n    if type(context) != str or type(question) != str:\n        print(context, type(context))\n        print(answer, type(answer))\n        print(question, type(question))\n        continue\n    answers = []\n    answers.append({'answer_start': 1000000, 'text': '__None__'})\n    qas.append({'question': question, 'id': qid, 'is_impossible': False, 'answers': answers})\n    \n    paragraphs.append({'context': context, 'qas': qas})\n    output['data'].append({'title': 'None', 'paragraphs': paragraphs})\n\nwith open('data\/test.json', 'w') as outfile:\n    json.dump(output, outfile)","fa511758":"!cd \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1; pip install .","03be40b1":"!mkdir results_roberta_large","b3850275":"!python \/kaggle\/input\/pytorchtransformers\/transformers-2.5.1\/examples\/run_squad.py \\\n--model_type roberta \\\n--model_name_or_path roberta-large \\\n--do_lower_case \\\n--do_train \\\n--do_eval \\\n--data_dir .\/data \\\n--cache_dir \/kaggle\/input\/cached-roberta-large-pretrained\/cache \\\n--train_file train.json \\\n--predict_file test.json \\\n--learning_rate 5e-5 \\\n--num_train_epochs 2 \\\n--max_seq_length 192 \\\n--doc_stride 64 \\\n--output_dir results_roberta_large \\\n--per_gpu_eval_batch_size=16 \\\n--per_gpu_train_batch_size=16 \\\n--save_steps=100000","8cc08e6b":"# Copy predictions to submission file.\npredictions = json.load(open('results_roberta_large\/predictions_.json', 'r'))\nsubmission = pd.read_csv(open('\/kaggle\/input\/tweet-sentiment-extraction\/sample_submission.csv', 'r'))\nfor i in range(len(submission)):\n    id_ = submission['textID'][i]\n    if pd_test['sentiment'][i] == 'neutral': # neutral postprocessing\n        submission.loc[i, 'selected_text'] = pd_test['text'][i]\n    else:\n        submission.loc[i, 'selected_text'] = predictions[id_]","c00611bf":"submission.head()","02bc6ba7":"# Save the submission file.\nsubmission.to_csv('submission.csv', index=False)","c6c6ecdd":"## Submission","c7669305":"Install the pytorch-transformers package (v2.5.1) of [huggingface](https:\/\/github.com\/huggingface\/transformers\/tree\/v2.5.1).","ad956e17":"### Preprocessing\nI formulate this task as an extractive question answering problem, such as SQuAD.  \nGiven a question and context, the model is trained to find the answer spans in the context.\n\nTherefore, I use sentiment as question, text as context, selected_text as answer.\n- Question: sentiment\n- Context: text\n- Answer: selected_text\n","d5074a0c":"## Import Packages","44625f1c":"## Finetuning RoBERTa","a2a99a03":"Finetune a RoBERTa-QA model.","c2d31d66":"## Data Preprocessing","12858c8d":"### Load Data"}}