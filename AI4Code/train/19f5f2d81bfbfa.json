{"cell_type":{"05357488":"code","754c744a":"code","1c33a55b":"code","620f7f0a":"code","fdd8668d":"code","68f44daf":"code","6f2caabd":"code","df5f633d":"code","590c869c":"code","f2253ed5":"code","49d2acda":"code","67715312":"code","6d4226b7":"code","3acd598c":"code","85a5b6a2":"code","c847e45c":"code","11c7d242":"code","a14fe44b":"code","625bdb26":"code","b04303f0":"code","a694c1f8":"code","b8dfa49a":"code","9eecbae8":"code","563eed84":"code","1d31f54a":"code","97197990":"code","48441a92":"code","9ff41e47":"code","e4f8b1a9":"code","1140070f":"code","18ab650d":"code","67425161":"code","16769e96":"code","79a8abd8":"code","83957b57":"code","b53a3b2c":"code","36579e34":"code","12a41d49":"code","ad936773":"code","8d4a6941":"code","ca217876":"code","ca330ef8":"code","c6e4f965":"code","f3b99cea":"code","c4bd906e":"code","eeb1acf7":"code","be6e5506":"code","72abf9ab":"code","3ba7257d":"code","07528faf":"code","6d4075ad":"code","11aaa632":"code","0908c4c2":"code","d3753925":"code","0368a215":"code","636954ad":"code","6e3fd093":"code","3585da1e":"code","79afb3b7":"code","3869af96":"code","6334e8ea":"code","c176eaa9":"code","b064fda5":"code","c4f64d3b":"code","8832a7bc":"code","dd1d1d91":"code","fa083efe":"code","73748f3a":"code","71bc2d87":"code","61cb73c0":"code","1a837c28":"code","107cb9a6":"code","5328d7d7":"code","9e93b4be":"code","7f679c98":"code","e60b7d3a":"code","30b9f2c4":"code","82e276aa":"code","b95c7574":"code","f61f8249":"code","66b5b72d":"code","b5fd5e70":"code","14a57532":"code","3402bde2":"code","790d7bea":"code","d2ba5b1d":"code","2dd9dcf9":"code","86ec4fed":"code","2b735a99":"markdown","f6993ddf":"markdown","c13ad47d":"markdown","a56c48ad":"markdown","21226f63":"markdown","267ec023":"markdown","15de3d1b":"markdown","6106805c":"markdown","a5e8b130":"markdown","fdb8c114":"markdown","47dc2edb":"markdown","1f979303":"markdown","d70003b8":"markdown","31739477":"markdown","d957cebf":"markdown","441a4adb":"markdown","e3eeccf5":"markdown","168d7142":"markdown","ad7ad497":"markdown","c95cfb65":"markdown","06326fc4":"markdown","b3d7b58b":"markdown","12f1f01d":"markdown","70c8004f":"markdown","a7f46438":"markdown","99757378":"markdown"},"source":{"05357488":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.style.use('ggplot')","754c744a":"# reading the data\ndf = pd.read_csv(\"..\/input\/ab-nyc-2019\/AB_NYC_2019.csv\")\ndf.head()","1c33a55b":"#pip install https:\/\/github.com\/pandas-profiling\/pandas-profiling\/archive\/master.zip\n!pip install pandas_profiling","620f7f0a":"import pandas_profiling\ndf.profile_report()","fdd8668d":"#Let's see about the datatypes of the data\ndf.dtypes","68f44daf":"df.info()","6f2caabd":"df.describe()","df5f633d":"df.columns","590c869c":"df = df[ ['name', 'host_id', 'host_name', 'neighbourhood_group', 'neighbourhood',\n       'latitude', 'longitude', 'room_type', 'minimum_nights',\n       'number_of_reviews', 'last_review', 'reviews_per_month',\n       'calculated_host_listings_count', 'availability_365','price'] ]","f2253ed5":"df.head()","49d2acda":"df.shape","67715312":"# with default: dropna = True and missing values are not unique!\ndf.host_id.nunique()","6d4226b7":"df.isna().sum()","3acd598c":"df.last_review","85a5b6a2":"# converting last_review to datetime\n# replacing NaN values with 0 \n\ndf['last_review']= pd.to_datetime(df['last_review'])\n\ndf.last_review.fillna(max(df.last_review),inplace=True)\n\ndf.reviews_per_month.fillna(0,inplace=True)","c847e45c":"df.reviews_per_month","11c7d242":"#removing unwanted columns\ndf.drop(['name','host_name'],axis=1,inplace=True)","a14fe44b":"#checking if any null values present now\ndf.isna().sum()","625bdb26":"top_host = df.host_id.value_counts().head(10)\ntop_host","b04303f0":"top_host_df = pd.DataFrame(top_host)\n\ntop_host_df.reset_index(inplace=True)\ntop_host_df.rename(columns={'index':'Host_ID', 'host_id':'P_Count'}, inplace=True)\ntop_host_df","a694c1f8":"top_host_check = df.calculated_host_listings_count.max()\ntop_host_check","b8dfa49a":"df.neighbourhood_group.unique()","9eecbae8":"df.room_type.unique()","563eed84":"top_reviewed_listings = df.nlargest(10,'number_of_reviews')\ntop_reviewed_listings","1d31f54a":"#setting figure size for future visualizations\nsns.set(rc={'figure.figsize':(10,8)})\nsns.set_style('white')","97197990":"viz_1 = sns.barplot(x=\"Host_ID\", y=\"P_Count\", data=top_host_df, palette='Blues_d')\n\nviz_1.set_title('Hosts with the most listings in NYC')\n\nviz_1.set_ylabel('Count of listings')\nviz_1.set_xlabel('Host IDs')\n\nviz_1.set_xticklabels(viz_1.get_xticklabels(), rotation=45);","48441a92":"#setting figure size for future visualizations\n\nsns.set(rc = {'figure.figsize':(8,5)} )\n\nviz_1 = top_host.plot(kind='barh',cmap='plasma')\n\n# Kind = pie\n# plasma is for color blue color\n\nviz_1.set_title('Hosts with the most listings in NYC')\nviz_1.set_ylabel('Host IDs')\nviz_1.set_xlabel('Count of listings')\n\n# viz_1.set_xticklabels(viz_1.get_xticklabels())","9ff41e47":"df.neighbourhood.value_counts()[:20]\ndf","e4f8b1a9":"plt.style.use(\"fivethirtyeight\")\n\n\ndata = df.neighbourhood.value_counts()[:20]\n\nplt.figure(figsize=(12, 8))\n\nx = list(data.index) \ny = list(data.values)\n\n# x.reverse()\n# y.reverse()\n\n\nplt.title(\"Most Popular Neighbourhood\")\nplt.ylabel(\"Neighbourhood Area\")\nplt.xlabel(\"Number of guest Who host in this Area\")\n\nplt.barh(x, y)","1140070f":"avg_by_neighbourhood_group = df.groupby(['neighbourhood_group']).mean()\navg_by_neighbourhood_group","18ab650d":"# Let's prepare some data through indexing, grouping and sorting before we plot it\n\navg_by_neighbourhood_group = df.groupby(['neighbourhood_group']).mean()\navg_price_by_neighbourhood_group_sorted= avg_by_neighbourhood_group['price'].sort_values(ascending=False)\navg_price_by_neighbourhood_group_sorted","67425161":"# Here I decided to state the colors ahead of time as a named list and pass that list when plotting the bar\nsns.set_style('darkgrid')\n\nle_colors =['g','b','m','r','y']\nplt.bar(x=avg_price_by_neighbourhood_group_sorted.index, height=avg_price_by_neighbourhood_group_sorted, color=le_colors)\n\nplt.title('Average Rental Price Across neighbourhood_group',color='r',fontsize=13,fontweight='bold')\nplt.xlabel('neighbourhood_group',color='r',fontsize=13)\nplt.ylabel('Average Price',color='r',fontsize=13)\nplt.ylim(0,250)\n\n# i want to add the values for the bars","16769e96":"sns.countplot(x='neighbourhood_group',data= df )","79a8abd8":"a=df.groupby('neighbourhood_group').calculated_host_listings_count.sum()\na\n\nplt.style.use('ggplot')\na.plot(kind='barh')","83957b57":"df.groupby('neighbourhood_group')['neighbourhood'].nunique().plot(kind='barh',colormap='Set2')\n\n\nplt.xlabel('neighbourhood groups')\nplt.ylabel('neighbourhoods')\n\nprint(df.groupby('neighbourhood_group')['neighbourhood'].nunique())","b53a3b2c":"# One useful way of visualizing this would be to separate the values into ranges of days,\n# say into 4 groups as follows:\n\na_availability = df[df['availability_365']<=90].count()[0]\nb_availability = df[(df['availability_365']>90) & (df['availability_365']<=180)].count()[0]\nc_availability = df[(df['availability_365']>180) & (df['availability_365']<=270)].count()[0]\nd_availability = df[(df['availability_365']>270)].count()[0]","36579e34":"c_availability","12a41d49":"df[(df['availability_365']>90) & (df['availability_365']<=180)]","ad936773":"df[(df['availability_365']>90) & (df['availability_365']<=180)].count()","8d4a6941":"# With our ranges created using indexing and '&' operators, the data can be plotted in a pie chart\n\nlabels = 'Less than 90 days','Between 90 & 180 days','Between 180 & 270 days','Greater than 270 days'\n\nsizes = a_availability,b_availability,c_availability,d_availability\nexplode = (.1,.1,.1,.1)\n\navailability_pie = plt.pie(sizes,labels=labels,explode=explode,shadow=True,startangle=90,autopct='%1.1f%%',radius=1.1)\nplt.title('Availability of Airbnb Rentals\\n'+'of the Calendar Year 2019');","ca217876":"print('Total neighbourhoods in NYC in which listings are located: {}'.format(df.neighbourhood.value_counts().sum()))\n\nplt.figure(figsize=(24,16))\n\n# Top 10 neighbourhoods in NYC\n\nplt.subplot(2,1,1)\nV2=sns.countplot(y='neighbourhood', #Create a Horizontal Plot\n                   data=df,                                                    \n                   order=df.neighbourhood.value_counts().iloc[:10].index, #We want to view the top 10 Neighbourhoods\n                   edgecolor=(0,0,0), #This cutomization gives us black borders around our plot bars\n                   linewidth=3)\n\nV2.set_title('Listings by Top NYC Neighbourhood') #Set Title\nV2.set_xlabel('Neighbourhood')                                  \nV2.set_ylabel('Listings')\n\n# 10 Least preferred neighbourhood in NYC\n\nplt.subplot(2,1,2)\nV3 = sns.countplot(y='neighbourhood',\n                   data=df,                                                    \n                   order=df.neighbourhood.value_counts().iloc[-10:].index,\n                   edgecolor=(0,0,0), \n                   linewidth=3)\n\nV3.set_title('Listings by Least Preffered NYC Neighbourhood')   \nV3.set_xlabel('Neighbourhood')                                  \nV3.set_ylabel('Listings')","ca330ef8":"df.room_type.unique()","c6e4f965":"by_room = df.groupby('room_type').agg(['count'])\nby_room.head()\n# low number of shared room and discovered hard","f3b99cea":"# It would be great to break things down by borough AND room type. There are several ways to do so.\n# A pivot table is a great place to start\n\nroom_pivot = pd.pivot_table(df,'price',['neighbourhood_group','room_type'],aggfunc=np.mean)\nroom_pivot","c4bd906e":"by_room = df.groupby('room_type').agg(['count'])\nby_room.head()","eeb1acf7":"sns.countplot(x='room_type',data=df ,edgecolor=sns.color_palette(\"dark\"))\ndf.room_type.value_counts()","be6e5506":"print('Percentage of room types available in AirBnB registered listings are:\\n{}'.format((df.room_type.value_counts()\/len(df.room_type))*100))\n","72abf9ab":"# Visualisation - Neighbourhood groups with counts with category room_type\n\nplt.figure(figsize=(15,6))\n\nsns.countplot(data=df, x='neighbourhood_group', hue='room_type', palette='GnBu_d')\n\nplt.title('Counts of airbnb in neighbourhoods with room type category', fontsize=15,fontweight='bold')\nplt.xlabel('Neighbourhood group')\nplt.ylabel(\"Count\")\n\nplt.legend(frameon=False, fontsize=12)","3ba7257d":"top_nei = df['neighbourhood'].value_counts().reset_index().head(10)\ntop_nei = top_nei['index']\n\nplt.figure(figsize=(15,6))\nvis_3 = sns.catplot(x='neighbourhood', hue='neighbourhood_group', col='room_type',\n                    data=df.loc[df['neighbourhood'].isin(top_nei)], kind='count', palette='GnBu_d')\n\nvis_3.set_xticklabels(rotation=90)","07528faf":"b=df.room_type.value_counts()\/len(df.room_type)\n\nb.plot.pie(autopct='%.2f',fontsize=12,figsize=(8,8))\n\nplt.title('Room types availability in AirBnB',fontsize=20)","6d4075ad":"! pip install plotly","11aaa632":"import plotly.graph_objects as go\nimport plotly.express as px","0908c4c2":"labels = df.room_type.value_counts().index\nvalues = df.room_type.value_counts().values\n\nlabels","d3753925":"colors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nlabels = df.room_type.value_counts().index\nvalues = df.room_type.value_counts().values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.5)])\n\nfig.update_traces(marker=dict(colors = colors, line=dict(color='#000000', width=4)))\n\nfig.show()","0368a215":"len(df.room_type)","636954ad":"df.groupby(['neighbourhood_group','room_type']).room_type.count().plot.barh()\n\n\nplt.ylabel('Neighbourhood wise room types')\nplt.xlabel('Number of Rooms')\nplt.title('Neighbourhood groups Vs Room types availability');","6e3fd093":"#grabbing top 10 neighbourhoods for sub-dataframe\nsns.set(rc={'figure.figsize':(4,4)})\n\nsub = df.loc[df['neighbourhood'].isin(['Williamsburg','Bedford-Stuyvesant','Harlem','Bushwick',\n                 'Upper West Side','Hell\\'s Kitchen''East Village','Upper East Side','Crown Heights','Midtown'])]\n\nsub","3585da1e":"#using catplot to represent multiple interesting attributes together and a count\n\nviz=sns.catplot(x='neighbourhood', hue='neighbourhood_group', col='room_type', data=sub, kind='count')\nviz.set_xticklabels(rotation=90)","79afb3b7":"df.groupby('neighbourhood_group').price.describe()","3869af96":"# setting up bins for price in order to have better understanding of rooms distribution\ndf['price_range']=pd.cut(df['price'],4)","6334e8ea":"df.head()","c176eaa9":"list(df.neighbourhood_group.unique())","b064fda5":"neighbourhood_group=list(df.neighbourhood_group.unique())\n\nplt.figure(figsize=(40,36))\n\nfor i,neighbour in enumerate(neighbourhood_group):\n    plt.subplot(3,2,i+1)\n    sns.countplot(y='price_range',hue='room_type',data=df[df['neighbourhood_group']==neighbour])\n    \n    plt.xlabel('Number of listings')\n    plt.ylabel('Price range in which listings fall')\n    plt.title('Price listings vs neighbourhood and room types in {}'.format(neighbour))","c4f64d3b":"g = df[df.price <500]\n\nplt.figure(figsize=(10,6))\n\nsns.boxplot(y=\"price\",x ='neighbourhood_group' ,data = g)\nplt.title(\"neighbourhood_group price distribution < 500\")\n# plt.show()","8832a7bc":"# distribution of prices\n\nplt.figure(figsize=(15,6))\n\nsns.violinplot(data=df[df.price <500], x='neighbourhood_group', y='price', palette='GnBu_d')\n\nplt.title('Density and distribution of prices for each neighbourhood group', fontsize=15)\nplt.xlabel('Neighbourhood group')\nplt.ylabel(\"Price\")","dd1d1d91":"!pip install calmap\n\n!pip install folium","fa083efe":"import plotly.express as px\nimport plotly.graph_objs as go\nimport calmap\nimport folium","73748f3a":"fig = px.histogram(df, x=\"neighbourhood_group\", color = 'neighbourhood_group', height=600, width=800, )\nfig.update_layout(showlegend = True)\nfig.show()","71bc2d87":"plt.figure(figsize=(10,6))\n\nsns.distplot(df[df.neighbourhood_group=='Manhattan'].price,color='maroon',hist=False,label='Manhattan')\nsns.distplot(df[df.neighbourhood_group=='Brooklyn'].price,color='black',hist=False,label='Brooklyn')\nsns.distplot(df[df.neighbourhood_group=='Queens'].price,color='green',hist=False,label='Queens')\nsns.distplot(df[df.neighbourhood_group=='Staten Island'].price,color='blue',hist=False,label='State Island')\nsns.distplot(df[df.neighbourhood_group=='Long Island'].price,color='lavender',hist=False,label='Long Island')\nplt.title('Borough wise price destribution for price<2000')\nplt.xlim(0,2000)\nplt.show()","61cb73c0":"# Another way to visualize the data is to use FacetGrid to plot multiple kedplots on one plot\n\nfig = sns.FacetGrid(df, hue=\"neighbourhood_group\", aspect=4, height=10)\nfig.map(sns.kdeplot, 'host_id', shade=True)\noldest = df['host_id'].max()\nfig.set(xlim=(0, oldest))\nsns.set(font_scale=5)\nfig.add_legend()","1a837c28":"rooms=list(df.room_type.unique())\n\nfor i,room in enumerate(rooms):\n    plt.figure(figsize=(9,18))\n    plt.subplot(3,1,i+1)\n    sns.barplot(y='price_range',x='minimum_nights',data=df[(df.room_type==room)])\n    sns.set(font_scale=1)\n    plt.title(room)","107cb9a6":"plt.figure(figsize=(5,5))\nsns.scatterplot(x='minimum_nights',y='price',data=df)","5328d7d7":"df.groupby(['room_type','price_range'])['minimum_nights'].describe()","9e93b4be":"plt.figure(figsize=(10,6), dpi = 150)\nsns.scatterplot(df.longitude,df.latitude,hue=df.neighbourhood_group)\nplt.ioff()","7f679c98":"import folium\nfrom folium.plugins import HeatMap\n\n\nm = folium.Map([40.7128,-74.0060],zoom_start=11)\n\nHeatMap(df[['latitude','longitude']].dropna(),radius=8, gradient={0.2:'blue',0.4:'purple',0.6:'orange',1.0:'red'}).add_to(m)\n\ndisplay(m)","e60b7d3a":"#let's what we can do with our given longtitude and latitude columns\n\n#let's see how scatterplot will come out \nviz=df.plot(kind='scatter', x='longitude', y='latitude', label='availability_365', c='price',\n                  cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.9, figsize=(10,8))\nviz.legend()","30b9f2c4":"import urllib\n\n#initializing the figure size\n\nplt.figure(figsize=(10,8))\n\n#loading the png NYC image found on Google and saving to my local folder along with the project\ni=urllib.request.urlopen('https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/ec\/Neighbourhoods_New_York_City_Map.PNG')\nnyc_img=plt.imread(i)\n\n\n#scaling the image based on the latitude and longitude max and mins for proper output\nplt.imshow(nyc_img,zorder=0,extent=[-74.258, -73.7, 40.49,40.92])\n\nax=plt.gca()\n\n#using scatterplot again\ndf.plot(kind='scatter', x='longitude', y='latitude', label='availability_365', c='price', ax=ax, \n           cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.6, zorder=5)\n\nplt.legend()\nplt.show()\n","82e276aa":"#let's grab 100 most reviewed listings in NYC\ntop_reviewed_listings=df.nlargest(100,'number_of_reviews')\ntop_reviewed_listings","b95c7574":"price_avrg=top_reviewed_listings.price.mean()\nprint('Average price per night: {}'.format(price_avrg))","f61f8249":"top_reviewed_listings.groupby('room_type')['price'].describe()","66b5b72d":"sns.boxplot(y='price',x='room_type',data=top_reviewed_listings)","b5fd5e70":"plt.figure(figsize=(10,6))\nsns.distplot(df['minimum_nights'], bins=30)\n\n#(df['minimum_nights'] <= 30) & (df['minimum_nights'] > 0)\n# copy above code in to the first [] \nplt.ioff()","14a57532":"plt.figure(figsize=(10,6))\nplt.scatter(df.longitude, df.latitude, c=df.availability_365, cmap='spring', edgecolor='black', linewidth=1, alpha=0.75)\n\ncbar = plt.colorbar()\ncbar.set_label('availability_365')","3402bde2":"plt.figure(figsize=(10,6))\nplt.scatter(df.longitude, df.latitude, c=df.price, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)\n\ncbar = plt.colorbar()\ncbar.set_label('Price $')","790d7bea":"df.corr()","d2ba5b1d":"#Get Correlation between different variables\ncorr = df.corr()\nplt.figure(figsize=(12,8))\n\nsns.heatmap(corr, annot=True)\ndf.columns","2dd9dcf9":"!pip install wordcloud","86ec4fed":"from wordcloud import WordCloud\n\nplt.subplots(figsize=(25,15))\n\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(df.neighbourhood))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('neighbourhood.png')\nplt.show()","2b735a99":"# Observation: \n### Queens has highest number of neighbourhoods within its zone while Manhattan has lowest number of neighbourhoods. Still, number of listings registered in AirBnB is in Manhattan region","f6993ddf":"# Number of room type in each neighbourhood group!","c13ad47d":"![download.jfif](attachment:download.jfif)","a56c48ad":"# Room type analysis","21226f63":"coming back to our dataset we can confirm our fidnings with already existing column called 'calculated_host_listings_count'","267ec023":"# Observation:\n\n##### In all listings registered in AirBnB New York, private rooms are most expensive in Manhattan region with an average price of registered listing being 197 dollars, and average price of private room is 116.78 dollars and individual apartment being 249.23 dollars.\n\n##### The neighbourhood region with maximum number of affordable rooms is Brooklyn with more than 10000 private rooms with average price of 76 dollars and average price of entire apartment around 178 dollars.\n\n##### The cheapest neighbourhood is Staten with an average price of 66 dollars and 127 dollars for private rooms and apartments respectively. Maximum price of apartment and private rooms in this neighbourgood is 1000 dollars and 2500 dollars respectively.\n\n##### Manhattan is the most expensive region followed by Brooklyn.","15de3d1b":"# Observation:\n#### Most of the listings have room availability for booking for minimum of 1 day","6106805c":"# EDA with Pandas Profileing Library ","a5e8b130":"# Observation:\n\n##### Most of listings who got more reviews have private rooms.\n##### Probably people prefer to book apartment or private rooms as compared to shared room and give reviews.\n##### Average price for preferred apartment is 170 dollars and 74 dollars for private rooms.","fdb8c114":"# Correlation among variables","47dc2edb":"let's grab 10 most reviewed listings in NYC","1f979303":"let's see what hosts (IDs) have the most listings on Airbnb platform and taking advantage of this service","d70003b8":"# Data Cleaning & Pre-Processing","31739477":"### lets create a DataFrame!","d957cebf":"Next, let's turn our attention to price distributions","441a4adb":"# Obeservations:\n\n* Manhattan neighbourhood group has highest number of listings in whole New York area.\n* Number of hosts ownning the listings are highest in Manhattan followed by Brooklyn","e3eeccf5":"# Exploratory Data Analysis","168d7142":"# Price wise analysis of rooms","ad7ad497":"# Observation:\n\n#### In all the listings of rooms registered in AirBnB more than 50% of listings offer complete houses or apartments and remaining are private rooms. Only 2% of listings offer shared rooms.\n#### Brooklyn is a zone which has maximum listings offering private rooms while manhattan is an hub of apartment offerings, followed by Brooklyn.\n#### Bronx, Queen and Staten Island has least number of listings registered and does not offer much of the services.","c95cfb65":"# Exploring and Visualizing Data","06326fc4":"# Pandas Profiling Package","b3d7b58b":"# Minimum Nights and price range","12f1f01d":"# Area wise visualization of availability of listings","70c8004f":"# Observation:\n\n#### Minimum number of night stays has no significant impact on prices.\n\n#### In case of private rooms, price range for longer duration with minimum stay of 8 nights and above is quite on a higher side. People pays huge amount to stay for longer days.","a7f46438":"### The host with maximum number of listings registered for airbnb in NewYork has 327 listings.","99757378":"# Room availability"}}