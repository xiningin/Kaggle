{"cell_type":{"23fc896f":"code","a58a8bdf":"code","d2277981":"code","a568d36e":"code","322864bd":"code","432eba86":"code","da50f7d0":"code","81f3940b":"code","ccc7cb79":"code","6fe40059":"code","a4dfd94e":"code","779ca29e":"code","e5060bef":"code","b6dd4e43":"code","41dd29bb":"code","0b38971b":"code","b5fec220":"code","99069813":"markdown","0bc42e92":"markdown","90a5c15d":"markdown","e23766cd":"markdown","07c8a95d":"markdown","c3a4c214":"markdown","a770c823":"markdown"},"source":{"23fc896f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score, KFold\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","a58a8bdf":"car_filepath = '\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/skoda.csv'\ncar_data = pd.read_csv(car_filepath)\nprint('data uploaded')\nprint(car_data.shape)\nprint(car_data.head())","d2277981":"car_data.info()","a568d36e":"car_data['model'].unique()\n\n","322864bd":"\ncar_data['fuelType'].unique()\ncar_data['fuelType'].replace('Petrol',0,inplace=True)\ncar_data['fuelType'].replace('Diesel',1,inplace=True)\ncar_data['fuelType'].replace('Hybrid',2,inplace=True)\ncar_data['fuelType'].replace('Other',3,inplace=True)","432eba86":"car_data['transmission'].unique()\ncar_data['transmission'].replace('Manual',0,inplace=True)\ncar_data['transmission'].replace('Automatic',1,inplace=True)\ncar_data['transmission'].replace('Semi-Auto',2,inplace=True)\ncar_data['transmission'].replace('Other',3,inplace=True)","da50f7d0":"car_data['transmission'] = car_data['transmission'].astype(int)","81f3940b":"car_data.describe()","ccc7cb79":"continuous_numeric = [ 'year', 'mileage','tax','transmission','fuelType','mpg','engineSize','price']\n\nnumeric_cars = car_data[continuous_numeric].copy()\nnumeric_cars.head()","6fe40059":"numeric_cars.isnull().sum()","a4dfd94e":"numeric_cars.dtypes","779ca29e":"normalized_cars = (numeric_cars - numeric_cars.mean())\/(numeric_cars.max()-numeric_cars.min())\nnormalized_cars['price'] = numeric_cars['price']\nnormalized_cars.head()","e5060bef":"def knn_train_test_uni(feature, target_column, df, k):\n    \n    # Randomize order of rows in data frame.\n    np.random.seed(1)\n    shuffled_index = np.random.permutation(df.index)\n    rand_df = df.reindex(shuffled_index)\n    \n\n    # Split the dataset\n    train_set = rand_df.iloc[0:int(len(rand_df)\/2)]\n    test_set = rand_df.iloc[int(len(rand_df)\/2):]\n    \n    # Train\n    knn = KNeighborsRegressor(n_neighbors=k)\n    knn.fit(train_set[[feature]], train_set[target_column])\n\n    \n    # Predict\n    predictions = knn.predict(test_set[[feature]])\n    \n    # Calculate RMSE\n    rmse = np.sqrt(mean_squared_error(test_set[target_column], predictions))\n\n    \n    return rmse\n\n","b6dd4e43":"from sklearn import metrics\nfeature = normalized_cars.columns.drop('price')\nk_values = [1, 3, 5, 7, 9, 15]\nK_v = 2\nrmse_uni = {}\ncurrent_rmse = []\ntarget_column = 'price'\n\nfor feature in continuous_numeric[0:-1]:\n    for k in k_values:\n        current_rmse.append(knn_train_test_uni(feature, target_column, normalized_cars, k))\n        \n    rmse_uni[feature] = current_rmse\n    current_rmse = []                  \nrmse_uni\n\n","41dd29bb":"fig, ax = plt.subplots(1)\n\nfor key, values in rmse_uni.items():\n    ax.plot(k_values, values, label=key)\n    ax.set_xlabel('k value')\n    ax.set_ylabel('RMSE')\n    ax.set_title('RMSE for Each Parameter\\nvs. k value')\n    ax.tick_params(top=\"off\", left=\"off\", right=\"off\", bottom='off')\n    ax.legend(bbox_to_anchor=(1.5, 1), prop={'size': 11})\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)","0b38971b":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn import neighbors\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\n\ny= normalized_cars.price\nX= normalized_cars.drop('price',axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\n\nprint (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)\n\n#to store rmse values for different k\nrmse_val2 = [] \nfor K in range(15):\n    K += 1\n    model = neighbors.KNeighborsRegressor(n_neighbors = K)\n    #fit the model\n    model.fit(X_train, y_train)  \n    pred=model.predict(X_test) #make prediction on test set\n    error = sqrt(mean_squared_error(y_test, pred)) #calculate rmse\n    rmse_val2.append(error) #store rmse values\n    print('RMSE value for k= ' , K , 'is:', error)\n\n   \nprint('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, pred),2))\nprint('Mean Squared Error:', round(metrics.mean_squared_error(y_test, pred),2))\nprint('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, pred)),2))\n","b5fec220":"#plotting the rmse values against k values\nimport matplotlib.pyplot as plt\nplt.plot(rmse_val2)\nplt.ylabel('RMSE')\nplt.xlabel('K values')\nplt.show()","99069813":"Here the rmse ranges from 4000 to 12000 dollars","0bc42e92":"**Cleaning the Data**: \nThe K-Nearest Neighbors Algorithm uses the distance formula to determine the nearest neighbors. This means we can only use numerical columns from the data and implement it in our model.","90a5c15d":"Statistically, normalization is given as\n![image.png](attachment:image.png)\n\nwhere df is any dataframe","e23766cd":"Checking Null Values","07c8a95d":"The k-nearest neighbors algorithm uses the euclidean distance to determine the closest neighbor.\n\n![image.png](attachment:image.png)\n\nWhere q and p represent two rows and the subscript representing a column. However, each column have different scaling. For example, if we take row 2, and row 3. The price has a difference of 1650, while the difference in mileage is 21,609. The algorithm will give extra weight towards the difference in Mileage.\n\nThat is why it is important to normalize the dataset into a unit vector. After normalization we'll have values from -1 to 1.","c3a4c214":"No null values noted","a770c823":"We are going to write a function that uses the KNeighborsRegressor class from scikit-learn. The class here actually generates a model that fits the training dataset. It is a regression method using k-nearest neighbors."}}