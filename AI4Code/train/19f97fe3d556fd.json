{"cell_type":{"e8790c8e":"code","c701db47":"code","bea3d435":"code","0eb67ab1":"code","71ba29d5":"code","a5e485f4":"code","197e9fa1":"code","1f1d87b9":"code","f3ec8e50":"code","34848d29":"code","b5dfa916":"code","66863408":"code","d5eec592":"code","fe11e40d":"code","305b9aff":"code","333d96c8":"code","a1a544b4":"code","ef0ca3b0":"code","aebbdc89":"code","1d71ff0d":"code","899b6927":"code","72434f2e":"code","02c63bfb":"markdown","cdeb6ed0":"markdown","beee216c":"markdown","c5196d7f":"markdown","d2a9d2cd":"markdown","63aebec1":"markdown","d27c3148":"markdown","da614d31":"markdown","dfbe62c3":"markdown","39750e36":"markdown","753e3441":"markdown","26e7a108":"markdown","9baabeba":"markdown"},"source":{"e8790c8e":"import numpy as np # \uc218\ud559 \uc5f0\uc0b0 \uc218\ud589\uc744 \uc704\ud55c \ubaa8\ub4c8\nimport pandas as pd # \ub370\uc774\ud130 \ucc98\ub9ac\ub97c \uc704\ud55c \ubaa8\ub4c8\nimport seaborn as sns # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8\nimport matplotlib.pyplot as plt # \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ubaa8\ub4c8 ","c701db47":"# CSV \ud30c\uc77c \uc77d\uc5b4\uc624\uae30\ndata_frame = pd.read_csv(\"..\/input\/male-female\/male_female.csv\")","bea3d435":"data_frame.info()","0eb67ab1":"data_frame.head(5)","71ba29d5":"for col in data_frame.columns: \n    print(col) ","a5e485f4":"data_frame.hist(edgecolor='black', linewidth=1.2)\nfig = plt.gcf()\nfig.set_size_inches(12,10)\nplt.show()","197e9fa1":"# \uc77d\uc5b4\uc628 \ub370\uc774\ud130 \ud45c\uc2dc\ud558\uae30\ncl = data_frame['Sex'].unique()\n\ncol = ['orange', 'blue', 'red', 'yellow', 'black', 'brown']\n\nfig = data_frame[data_frame['Sex'] == cl[0]].plot(kind='scatter', x='FeetSize', y='Height', color=col[0], label=cl[0])\n\nfor i in range(len(cl)-1):\n    data_frame[data_frame['Sex'] == cl[i+1]].plot(kind='scatter', x='FeetSize', y='Height', color=col[i+1], label=cl[i+1], ax=fig)\n\nfig.set_xlabel('FeetSize')\nfig.set_ylabel('Height')\nfig.set_title('FeetSize' + \" vs. \" + 'Height')\nfig=plt.gcf()\nfig.set_size_inches(10, 6)\nplt.show()","1f1d87b9":"f, sub = plt.subplots(1, 1,figsize=(8,6))\nsns.boxplot(x=data_frame['Sex'],y=data_frame['FeetSize'], ax=sub)\nsub.set(xlabel='Sex', ylabel='FeetSize')","f3ec8e50":"plt.figure(figsize=(8,6))\nplt.subplot(1,1,1)\nsns.violinplot(x='Sex',y='Height',data=data_frame)\n","34848d29":"from mpl_toolkits.mplot3d import Axes3D\n\nfig=plt.figure(figsize=(12,8))\n\nax=fig.add_subplot(1,1,1, projection=\"3d\")\nax.scatter(data_frame['Height'],data_frame['Weight'],data_frame['FeetSize'],c=\"blue\",alpha=.5)\nax.set(xlabel='Height',ylabel='Weight',zlabel='FeetSize')","b5dfa916":"plt.figure(figsize=(12,8)) \nsns.heatmap(data_frame.corr(),annot=True,cmap='cubehelix_r') \nplt.show()","66863408":"from sklearn.model_selection import train_test_split","d5eec592":"train, test = train_test_split(data_frame, test_size = 0.2)\n\n# train=70% and test=30%\nprint(train.shape)\nprint(test.shape)","fe11e40d":"# \ud559\uc2b5\uc6a9 \ubb38\uc81c, \ud559\uc2b5\uc6a9 \uc815\ub2f5\ntrain_X = train[['Height','FeetSize']] # \ud0a4\uc640 \ubc1c\ud06c\uae30\ub9cc \uc120\ud0dd\ntrain_y = train.Sex # \uc815\ub2f5 \uc120\ud0dd\n\n# \ud14c\uc2a4\ud2b8\uc6a9 \ubb38\uc81c, \ud14c\uc2a4\ud2b8\uc6a9 \uc815\ub2f5\ntest_X = test[['Height','FeetSize']] # taking test data features\ntest_y = test.Sex   #output value of test data","305b9aff":"# \ub2e4\uc591\ud55c \ubd84\ub958 \uc54c\uace0\ub9ac\uc998 \ud328\ud0a4\uc9c0\ub97c \uc784\ud3ec\ud2b8\ud568.\nfrom sklearn.linear_model import LogisticRegression  # Logistic Regression \uc54c\uace0\ub9ac\uc998\n#from sklearn.cross_validation import train_test_split # \ub370\uc774\ud0c0 \ucabc\uac1c\uc8fc\ub294 \ubaa8\ub4c8 \n\nfrom sklearn.neighbors import KNeighborsClassifier  # for K nearest neighbours\nfrom sklearn import svm  #for Support Vector Machine (SVM) Algorithm\nfrom sklearn import metrics #for checking the model accuracy\nfrom sklearn.tree import DecisionTreeClassifier #for using Decision Tree Algoithm","333d96c8":"gildong = svm.SVC()\ngildong.fit(train_X,train_y) # \uac00\ub974\uce5c \ud6c4\nprediction = gildong.predict(test_X) # \uc5bc\ub9c8\ub098 \ub9de\ud788\ub294\uc9c0 \ud14c\uc2a4\ud2b8\n\nrate1 = metrics.accuracy_score(prediction,test_y) * 100\nprint('\uc778\uc2dd\ub960: {0:.1f}'.format(rate1))","a1a544b4":"cheolsu = LogisticRegression()\ncheolsu.fit(train_X,train_y)\nprediction = cheolsu.predict(test_X)\n\nrate2 = metrics.accuracy_score(prediction,test_y) * 100\nprint('\uc778\uc2dd\ub960: {0:.1f}'.format(rate2))","ef0ca3b0":"youngja = DecisionTreeClassifier()\nyoungja.fit(train_X,train_y)\nprediction = youngja.predict(test_X)\n\nrate3 = metrics.accuracy_score(prediction,test_y) * 100\nprint('\uc778\uc2dd\ub960: {0:.1f}'.format(rate3))\n","aebbdc89":"minsu = KNeighborsClassifier(n_neighbors=3) #this examines 3 neighbours for putting the new data into a class\nminsu.fit(train_X,train_y)\nprediction = minsu.predict(test_X)\n\nrate4 = metrics.accuracy_score(prediction,test_y) * 100\nprint('\uc778\uc2dd\ub960: {0:.1f}'.format(rate4))","1d71ff0d":"plt.plot(['SVM','Logistic','D-Tree','K-NN'], [rate1, rate2, rate3, rate4])","899b6927":"train_X = train[['Height','FeetSize','Weight']] # \ud0a4\uc640 \ubc1c\ud06c\uae30\ubfd0\ub9cc \uc544\ub2c8\ub77c \ubab8\ubb34\uac8c\ub3c4 \ucd94\uac00\ntrain_y = train.Sex # \uc815\ub2f5 \uc120\ud0dd\n\ntest_X = test[['Height','FeetSize','Weight']] # taking test data features\ntest_y = test.Sex   #output value of test data","72434f2e":"def run_4_classifiers(a, b, c, d):\n    tmp = svm.SVC() # \uc560\uae30 \n    tmp.fit(a,b) # \uac00\ub974\uce5c \ud6c4\n    prediction = tmp.predict(c) # \ud14c\uc2a4\ud2b8\n    rate1 = metrics.accuracy_score(prediction,test_y) * 100\n\n    tmp = LogisticRegression()\n    tmp.fit(a,b)\n    prediction = tmp.predict(c)\n    rate2 = metrics.accuracy_score(prediction,test_y) * 100\n\n    tmp = DecisionTreeClassifier()\n    tmp.fit(a,b)\n    prediction = tmp.predict(c)\n    rate3 = metrics.accuracy_score(prediction,test_y) * 100\n\n    tmp = KNeighborsClassifier(n_neighbors=3) #this examines 3 neighbours for putting the new data into a class\n    tmp.fit(a,b)\n    prediction = tmp.predict(c)\n    rate4 = metrics.accuracy_score(prediction,test_y) * 100\n    \n    plt.plot(['SVM','Logistic','D-Tree','K-NN'], [rate1, rate2, rate3, rate4])\n    print('\uc778\uc2dd\ub960: {0:.2f}, {1:.2f}, {2:.2f}, {3:.2f}'.format(rate1, rate2, rate3, rate4))\n    \n    \nrun_4_classifiers(train_X, train_y, test_X, test_y)\n","02c63bfb":"## 1. \ub370\uc774\ud130 \uc77d\uc5b4\uc624\uae30","cdeb6ed0":"### 4.3 \uacb0\uc815 \ud2b8\ub9ac(Decision Tree) \uc54c\uace0\ub9ac\uc998 \uc774\uc6a9\ud558\uc5ec \uc54c\uc544\ub9de\ucd94\uae30","beee216c":"> **\uc785\ub825: \uceec\ub7fc, \ud2b9\uc9d5(features), \uc18d\uc131(attributes)** <br\/>\n> **\uc815\ub2f5: \ubaa9\ud45c\uac12(target value, ground truth)**, \ub9de\ucdb0\uc57c \ud558\ub294 \uc815\ub2f5","c5196d7f":"### 4.1 \uc368\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0(SVM) \uc54c\uace0\ub9ac\uc998 \uc774\uc6a9\ud558\uc5ec \uc54c\uc544\ub9de\ucd94\uae30","d2a9d2cd":"# \ud0a4, \ubab8\ubb34\uac8c, \ubc1c \ud06c\uae30\ub85c \ub0a8\uc790\/\uc5ec\uc790\ub97c \uc54c\uc544\ub9de\ucd9c \uc218 \uc788\uc744\uae4c","63aebec1":"### 4.4 \uadfc\uc811 \uc774\uc6c3(K-Nearest Neighbours) \uc54c\uace0\ub9ac\uc998 \uc774\uc6a9\ud558\uc5ec \uc54c\uc544\ub9de\ucd94\uae30 ","d27c3148":"> \ud0a4\uc640 \ubc1c \uc0ac\uc774\uc988 \uc774\uc678\uc5d0 \ubab8\ubb34\uac8c \uc815\ubcf4(\ud2b9\uc9d5)\uc744 \ub354 \uc774\uc6a9\ud558\uba74 \uc5b4\ub5a8\uae4c?","da614d31":"## 4. \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8","dfbe62c3":"### 4.2 \ub17c\ub9ac \ud68c\uadc0(Logistic Regression) \uc54c\uace0\ub9ac\uc998 \uc774\uc6a9\ud558\uc5ec \uc54c\uc544\ub9de\ucd94\uae30","39750e36":"## 3. \ud559\uc2b5\uc6a9, \ud14c\uc2a4\ud2b8\uc6a9\uc73c\ub85c \ub370\uc774\ud130 \ub098\ub204\uae30","753e3441":"## 2. \ub370\uc774\ud130 \uc2dc\uac01\ud654","26e7a108":"## 5. \uacb0\ub860\n\n* \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uace0, \uc0c1\uad00\uad00\uacc4\ub97c \uc774\ud574\ud560 \uc218 \uc788\ub2e4. <br\/>\n* 4\uac00\uc9c0 \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud558\uc5ec \ud559\uc2b5\uc744 \uc2dc\ud0a4\uace0 \ud14c\uc2a4\ud2b8\ub97c \uc218\ud589\ud560 \uc218 \uc788\ub2e4. <br\/> \n* \ud2b9\uc9d5\uc744 2\uac1c\ub9cc \uc774\uc6a9\ud560 \ub54c\ubcf4\ub2e4\ub294 3\uac1c\ub97c \uc774\uc6a9\ud560 \ub54c\uac00 \uc131\ub2a5\uc740 \ud5a5\uc0c1\ub418\uc5c8\ub2e4. <br\/>","9baabeba":"> \ud0a4\uc640 \ubab8\ubb34\uac8c\uc5d0 \ub530\ub77c \ub0a8\uc5ec \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub418\uc5b4\uc788\ub294\uc9c0\ub97c \ud45c\uc2dc\ud574\ubcf4\uc790. <br\/>\n> \uc5ec\uc790\ub294 \uc624\ub80c\uc9c0 \uc0c9\uc73c\ub85c, \ub0a8\uc790\ub294 \ud30c\ub780\uc0c9\uc73c\ub85c \ud45c\uc2dc. "}}