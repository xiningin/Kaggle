{"cell_type":{"b0d37470":"code","a74fb5e6":"code","4973b177":"code","b8920682":"code","e255dcc3":"code","3ee06ea5":"code","d937fac5":"code","54e943bf":"code","826ff240":"code","213a5e8b":"code","d096543d":"code","310849f1":"code","441efcd3":"code","e7b529ae":"code","1f2db592":"code","3aefc380":"code","595ec18f":"code","b2595b43":"code","b0201d2f":"code","e77fac57":"code","9bc63aec":"code","405b7654":"code","2d65249e":"code","44251ef4":"code","2308ddde":"code","08b9d57d":"code","80aac9b5":"code","b623f1a8":"code","5858617a":"code","4215d6eb":"code","343c2114":"code","521cc442":"code","bf7dbcb2":"code","532c95a5":"markdown","c9733669":"markdown","48f13d41":"markdown","a24c616e":"markdown","c4a5dce9":"markdown","7c55eb12":"markdown"},"source":{"b0d37470":"import keras\nimport pandas as pd\nimport numpy as np","a74fb5e6":"df=pd.read_csv('..\/input\/concrete-dataset\/concrete_data.csv')\ndf.head()","4973b177":"df.shape","b8920682":"df.info()","e255dcc3":"df.describe()","3ee06ea5":"df.isnull().sum()","d937fac5":"df_columns = df.columns\npredictors = df[df_columns[df_columns != 'Strength']] \ntarget = df['Strength']","54e943bf":"predictors.head()","826ff240":"target.head()","213a5e8b":"\nn_cols = predictors.shape[1] # number of predictors\nn_cols","d096543d":"from keras.models import Sequential\nfrom keras.layers import Dense","310849f1":"def regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","441efcd3":"from sklearn.model_selection import train_test_split","e7b529ae":"X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.3, random_state=42)","1f2db592":"model = regression_model()","3aefc380":"model.fit(X_train, y_train, epochs=50, verbose=1)","595ec18f":"loss_val = model.evaluate(X_test, y_test)\ny_pred = model.predict(X_test)\nloss_val","b2595b43":"from sklearn.metrics import mean_squared_error\nmean_square_error = mean_squared_error(y_test, y_pred)\nmean = np.mean(mean_square_error)\nstandard_deviation = np.std(mean_square_error)\nprint(mean, standard_deviation)","b0201d2f":"total_mean_squared_errors = 50\nepochs = 50\nmean_squared_errors = []\nfor i in range(0, total_mean_squared_errors):\n    X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.3, random_state=i)\n    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n    MSE = model.evaluate(X_test, y_test, verbose=0)\n    print(\"MSE \"+str(i+1)+\": \"+str(MSE))\n    y_pred = model.predict(X_test)\n    mean_square_error = mean_squared_error(y_test, y_pred)\n    mean_squared_errors.append(mean_square_error)\n\nmean_squared_errors = np.array(mean_squared_errors)\nmean = np.mean(mean_squared_errors)\nstandard_deviation = np.std(mean_squared_errors)\n\nprint('\\n')\nprint(\"Below is the mean and standard deviation of \" +str(total_mean_squared_errors) + \" mean squared errors without normalized data. Total number of epochs for each training is: \" +str(epochs) + \"\\n\")\nprint(\"Mean: \"+str(mean))\nprint(\"Standard Deviation: \"+str(standard_deviation))","e77fac57":"predictors_norm = (predictors - predictors.mean()) \/ predictors.std()\npredictors_norm.head()","9bc63aec":"def regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","405b7654":"X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=42)","2d65249e":"model = regression_model()\nepochs = 50\nmodel.fit(X_train, y_train, epochs=epochs, verbose=2)","44251ef4":"loss_val = model.evaluate(X_test, y_test)\ny_pred = model.predict(X_test)\nloss_val","2308ddde":"mean_square_error = mean_squared_error(y_test, y_pred)\nmean = np.mean(mean_square_error)\nstandard_deviation = np.std(mean_square_error)\nprint(mean, standard_deviation)","08b9d57d":"total_mean_squared_errors = 50\nepochs = 50\nmean_squared_errors = []\nfor i in range(0, total_mean_squared_errors):\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=i)\n    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n    MSE = model.evaluate(X_test, y_test, verbose=0)\n    print(\"MSE \"+str(i+1)+\": \"+str(MSE))\n    y_pred = model.predict(X_test)\n    mean_square_error = mean_squared_error(y_test, y_pred)\n    mean_squared_errors.append(mean_square_error)\n\nmean_squared_errors = np.array(mean_squared_errors)\nmean = np.mean(mean_squared_errors)\nstandard_deviation = np.std(mean_squared_errors)\n\nprint('\\n')\nprint(\"Below is the mean and standard deviation of \" +str(total_mean_squared_errors) + \" mean squared errors with normalized data. Total number of epochs for each training is: \" +str(epochs) + \"\\n\")\nprint(\"Mean: \"+str(mean))\nprint(\"Standard Deviation: \"+str(standard_deviation))","80aac9b5":"total_mean_squared_errors = 50\nepochs = 100\nmean_squared_errors = []\nfor i in range(0, total_mean_squared_errors):\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=i)\n    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n    MSE = model.evaluate(X_test, y_test, verbose=0)\n    print(\"MSE \"+str(i+1)+\": \"+str(MSE))\n    y_pred = model.predict(X_test)\n    mean_square_error = mean_squared_error(y_test, y_pred)\n    mean_squared_errors.append(mean_square_error)\n\nmean_squared_errors = np.array(mean_squared_errors)\nmean = np.mean(mean_squared_errors)\nstandard_deviation = np.std(mean_squared_errors)\n\nprint('\\n')\nprint(\"Below is the mean and standard deviation of \" +str(total_mean_squared_errors) + \" mean squared errors with normalized data. Total number of epochs for each training is: \" +str(epochs) + \"\\n\")\nprint(\"Mean: \"+str(mean))\nprint(\"Standard Deviation: \"+str(standard_deviation))","b623f1a8":"def regression_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(1))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='mean_squared_error')\n    return model","5858617a":"X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=42)","4215d6eb":"# build the model\nmodel = regression_model()\nepochs = 50\nmodel.fit(X_train, y_train, epochs=epochs, verbose=2)","343c2114":"loss_val = model.evaluate(X_test, y_test)\ny_pred = model.predict(X_test)\nloss_val","521cc442":"mean_square_error = mean_squared_error(y_test, y_pred)\nmean = np.mean(mean_square_error)\nstandard_deviation = np.std(mean_square_error)\nprint(mean, standard_deviation)","bf7dbcb2":"total_mean_squared_errors = 50\nepochs = 50\nmean_squared_errors = []\nfor i in range(0, total_mean_squared_errors):\n    X_train, X_test, y_train, y_test = train_test_split(predictors_norm, target, test_size=0.3, random_state=i)\n    model.fit(X_train, y_train, epochs=epochs, verbose=0)\n    MSE = model.evaluate(X_test, y_test, verbose=0)\n    print(\"MSE \"+str(i+1)+\": \"+str(MSE))\n    y_pred = model.predict(X_test)\n    mean_square_error = mean_squared_error(y_test, y_pred)\n    mean_squared_errors.append(mean_square_error)\n\nmean_squared_errors = np.array(mean_squared_errors)\nmean = np.mean(mean_squared_errors)\nstandard_deviation = np.std(mean_squared_errors)\n\nprint('\\n')\nprint(\"Below is the mean and standard deviation of \" +str(total_mean_squared_errors) + \" mean squared errors with normalized data. Total number of epochs for each training is: \" +str(epochs) + \"\\n\")\nprint(\"Mean: \"+str(mean))\nprint(\"Standard Deviation: \"+str(standard_deviation))","532c95a5":"50 epochs","c9733669":"Using 100 epochs","48f13d41":"<h3>Checking for NULL values in the dataset<\/h3>","a24c616e":"<h3>Building the model with 3 hidden layers and ReLu activation function<\/h3>","c4a5dce9":"<h3>Importing the necessary libraries<\/h3>","7c55eb12":"<h3>Building the model after normalising the dataset<\/h3>"}}