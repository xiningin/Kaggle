{"cell_type":{"1d1cc348":"code","df68e343":"code","07c0d2bd":"code","44fbe95e":"code","c8e008e3":"code","ce412e9e":"code","13b94013":"code","20250c73":"code","4e8d3c71":"code","11602573":"code","db366e1e":"code","82c55f66":"code","9f4dcc11":"code","792b9621":"code","78da2b32":"code","1f9cfd1f":"code","46e2349f":"code","b2ac1b60":"code","0b3b2a1c":"code","1fe2c7c4":"code","55b0cb5f":"code","3e6f9caf":"code","3c3abcb9":"code","12308b34":"code","645751e4":"code","4452bfb2":"code","b3686822":"code","028d11d7":"code","9d8a5dbf":"code","0ee38f65":"code","bbd074a0":"code","5c2bf31c":"code","539159c1":"code","0a333e35":"code","0e70084c":"code","618ebb61":"code","b14a8781":"code","04e97008":"code","9069b6e3":"code","dd80f5a6":"code","68881f59":"code","3ec4296a":"code","9b1bc236":"code","1ff97444":"code","07b3ccc1":"code","7feb6e30":"code","b887702d":"code","99db084a":"code","b565caf9":"code","5753914f":"code","39da22ad":"code","386dbf2f":"code","abd8c235":"code","73106b9e":"code","e44628fa":"code","c2e9fb95":"code","43792c91":"code","cacc516a":"code","06940e3a":"code","8f58c8ee":"code","ba3ddf49":"code","56cf7b12":"code","ca6c4b02":"code","a4b44f9d":"code","59a40d1a":"code","fb4d9fb0":"code","d10fe3af":"code","7bc3a267":"code","a254866d":"code","a84bed40":"code","2bfd0805":"code","6edbb666":"code","ffa6376b":"code","e1d14055":"code","6e17144c":"code","fa3a3373":"code","60881214":"code","74567e7f":"code","a4181f21":"code","4a9d9079":"code","d64d985e":"code","6075aa52":"code","2084c5f6":"code","83dacd1f":"code","7cd74160":"code","e30b303e":"code","ad4fbb6e":"code","e67c59bb":"code","8be0be21":"code","bbcc2c6b":"code","f445569b":"code","c973ed82":"code","5b674b5b":"code","7ef3d895":"code","0760b711":"code","d110df4e":"code","2ad3f4a3":"code","bd6006b3":"code","6f1c5986":"code","575e4100":"code","4855e8d9":"code","ebdecad5":"code","fce33293":"code","9a7116ef":"markdown","8ae2ee44":"markdown","a1debc64":"markdown","9f420001":"markdown","03109873":"markdown","b258f65f":"markdown","d9fa4684":"markdown","175769b3":"markdown","a15aa680":"markdown","2394a17c":"markdown","43e6cf23":"markdown","8d04df19":"markdown","4e1f5cf6":"markdown","0a915c16":"markdown","fdcc6d37":"markdown","4a0b3467":"markdown","c16f5b11":"markdown","dcd70045":"markdown","bde508d5":"markdown","0f49cbec":"markdown","60e03883":"markdown","5fd1bde7":"markdown","d3e88980":"markdown","dbff0606":"markdown","af6026a1":"markdown","0f1109ee":"markdown","15073d78":"markdown","521006f1":"markdown","2143eb07":"markdown","1cb286b3":"markdown","0b4d00a7":"markdown","fcf88ab2":"markdown","a0bacfd6":"markdown","246fc38e":"markdown","49196248":"markdown","1c2820ec":"markdown","daec6506":"markdown","bfeb4018":"markdown","83e9af6c":"markdown","0fd417fd":"markdown","c3ea6a59":"markdown","e493ae36":"markdown","c66e37f6":"markdown","068c7730":"markdown","73fc7fa2":"markdown","e01b6f3c":"markdown","8ef45a7c":"markdown","ae56145c":"markdown","1278c412":"markdown","8f74fe25":"markdown","9fe98a72":"markdown","aa669345":"markdown","e136a18d":"markdown","294a9462":"markdown","1793a4ac":"markdown","e9f79dd5":"markdown","ca12f311":"markdown","934b5276":"markdown","108b3da3":"markdown","3b0f3924":"markdown","5916110d":"markdown","79af23bd":"markdown","af7d32d7":"markdown","1b106a1c":"markdown","4ab7195e":"markdown","cd4fed6e":"markdown"},"source":{"1d1cc348":"# import dependecies\n%matplotlib inline \n\n#Start Python Imports\nimport math, time, random, datetime\n\n#Data Manipulation\nimport numpy as np \nimport pandas as pd \n\n#Visualization\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\n\n#Preprocessing\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n#Machine Learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\n\n#Let's be rebels and ignore warnings for now\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Loading Dataset\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","df68e343":"#Import train & test data \npath = \"\/kaggle\/input\/titanic\"\ntrain = pd.read_csv(path + \"\/train.csv\")\ntest = pd.read_csv(path + \"\/test.csv\")\ngender_submission = pd.read_csv(path + \"\/gender_submission.csv\") #example of what a submission should look like","07c0d2bd":"#View first 5 sample in train.\ntrain.sample(5)","44fbe95e":"#View first 5 sample in train.\ntest.head()","c8e008e3":"#Looking gender_submission dataframe\ngender_submission.sample(5)","ce412e9e":"#Looking how long this dataframes.\nprint(len(train))\nprint(len(test))\nprint(len(gender_submission))","13b94013":"train.describe().T","20250c73":"#Plot graphic of missing values\nmissingno.matrix(train, figsize = (30, 10)) #widht, lenght ","4e8d3c71":"train.columns","11602573":"#Let's write a little fuctions to show us how many missing values there are\n\ndef find_missing_values(df, columns):\n    \"\"\"\n    Finds number of rows where certain columns are missing values.\n    ::param_df:: = target dataframe\n    ::param_columns:: = list of columns\n    \"\"\"\n    missing_vals = {}\n    print('Number of missing or NaN values for each columns:')\n    df_length = len(df)\n    for column in columns:\n        total_column_values = df[column].value_counts().sum()\n        missing_vals[column] = df_length - total_column_values\n        #missing_vals.append(str(column) + \"column has {} missing or NaN values.\".format())\n    return missing_vals\n\nmissing_values = find_missing_values(train, columns = train.columns)\nmissing_values","db366e1e":"#We can do with very basic code:\ntrain.isnull().sum()","82c55f66":"df_bin = pd.DataFrame() # for discretised continuous variables\ndf_con = pd.DataFrame() # for continuous variables ","9f4dcc11":"0 - 100 # all numbers between 0 and 100\n0 - 10  # all numbers between 0 and 10 have a label 1\n10 - 20 # 2\n20 - 30 # 3....","792b9621":"# Different data types in the dataset\ntrain.dtypes","78da2b32":"# How many people survived?\nfig = plt.figure(figsize = (20, 1))\nsns.countplot(y = \"Survived\", data = train);\nprint(train.Survived.value_counts())","1f9cfd1f":"# Let's add this to our subset dataframes\ndf_bin['Survived'] = train[\"Survived\"]\ndf_con['Survived'] = train[\"Survived\"]","46e2349f":"df_bin.head()","b2ac1b60":"df_con.head()","0b3b2a1c":"sns.distplot(train.Pclass)","1fe2c7c4":"# How many missing variables does Pclass have ?\ntrain.Pclass.isnull().sum()","55b0cb5f":"df_bin['Pclass'] = train['Pclass']\ndf_con['Pclass'] = train['Pclass']","3e6f9caf":"df_con.head()","3c3abcb9":"# How many different names are there ? \ntrain.Name.value_counts()[:20]","12308b34":"# Let's view the distribution of Sex\nplt.figure(figsize = (20, 5))\nsns.countplot(y = \"Sex\", data = train)","645751e4":"# Are there any missing value in Sex ?\ntrain.Sex.isnull().sum()","4452bfb2":" train.Sex.head()","b3686822":"# add Sex to the subset dataframes\ndf_bin[\"Sex\"] = train[\"Sex\"]\n#df_bin.loc[df_bin]\ndf_bin[\"Sex\"] = np.where(df_bin['Sex'] == 'female', 1, 0)\n\ndf_con[\"Sex\"] = train[\"Sex\"]","028d11d7":"# How does the Sex variable look compared to Survival?\n# We can see this because they're both binarys.\nfig = plt.figure(figsize=(10, 10))\nsns.distplot(df_bin.loc[df_bin['Survived'] == 1]['Sex'], kde_kws={'label': 'Survived', \"bw\": \"0.1\"}); #bandwidth\nsns.distplot(df_bin.loc[df_bin['Survived'] == 0]['Sex'], kde_kws={'label': 'Did not survive',\"bw\": \"0.1\"});","9d8a5dbf":"# How many missing values does age have?\nmissing_values['Age']","0ee38f65":"#Once the Age values have been fixed up, we can add them to our sub dataframes.\n#df_bin['Age'] = pd.cut(train['Age'], 10) # bucketed\/binned into different categories\n#df_con['Age'] = train['Age'] # non-bucketed","bbd074a0":"df_bin.sample(5)","5c2bf31c":"def plot_count_dist(data, bin_df, label_column, target_column, figsize=(20, 5), use_bin_df=False):\n    \"\"\"\n    Function to plot counts and distributions of a label variable and \n    target variable side by side.\n    ::param_data:: = target dataframe\n    ::param_bin_df:: = binned dataframe for countplot\n    ::param_label_column:: = binary labelled column\n    ::param_target_column:: = column you want to view counts and distributions\n    ::param_figsize:: = size of figure (width, height)\n    ::param_use_bin_df:: = whether or not to use the bin_df, default False\n    \"\"\"\n    if use_bin_df: \n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=bin_df);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column], \n                     kde_kws={\"label\": \"Survived\", 'bw': '0.1'});\n        sns.distplot(data.loc[data[label_column] == 0][target_column], \n                     kde_kws={\"label\": \"Did not survive\", 'bw': '0.1'});\n    else:\n        fig = plt.figure(figsize=figsize)\n        plt.subplot(1, 2, 1)\n        sns.countplot(y=target_column, data=data);\n        plt.subplot(1, 2, 2)\n        sns.distplot(data.loc[data[label_column] == 1][target_column], \n                     kde_kws={\"label\": \"Survived\", 'bw': '0.1'});\n        sns.distplot(data.loc[data[label_column] == 0][target_column], \n                     kde_kws={\"label\": \"Did not survive\", 'bw': '0.1'});","539159c1":"# How many missing values does SibSp have?\nmissing_values[\"SibSp\"]","0a333e35":"# What values are there ?\ntrain.SibSp.value_counts()","0e70084c":"# Add SibSp to subset dataframes\ndf_bin['SibSp'] = train['SibSp']\ndf_con['SibSp'] = train['SibSp']","618ebb61":"# Visualize the counts of SibSp and the distribut\u015fon of the values\n# against Survived\nplot_count_dist(train,\n               bin_df = df_bin,\n               label_column = 'Survived',\n               target_column = 'SibSp',\n               figsize = (20, 10))","b14a8781":"# How many missing values does Parch have?\nmissing_values[\"Parch\"]","04e97008":"#What values are there?\ntrain.Parch.value_counts()","9069b6e3":"# Add parch to subset dataframes\ndf_bin['Parch'] = train['Parch']\ndf_con['Parch'] = train['Parch']","dd80f5a6":"# Visualize the counts of Parch and the distribution of the values\n# against Survived\nplot_count_dist(train,\n               bin_df = df_bin,\n               label_column = 'Survived',\n               target_column = 'Parch',\n               figsize = (20, 10))","68881f59":"train.head()","3ec4296a":"df_con.head()","9b1bc236":"# How many missing values does Ticket have?\nmissing_values[\"Ticket\"]","1ff97444":"# How many kinds of ticket are there?\nplt.figure(figsize = (20, 20))\nsns.countplot(y = \"Ticket\", data = train);","07b3ccc1":"# How many kinds of ticket are there ? \ntrain.Ticket.value_counts()[:20]","7feb6e30":"# How many unique kinds of Ticket are there ?\nprint(\"There are {} unique Ticket values.\".format(len(train.Ticket.unique())))","b887702d":"# How many missing values does Fare have ?\nmissing_values['Fare']","99db084a":"# How many different values of Fare are there ?\nsns.countplot(y = 'Fare', data = train);","b565caf9":"# What kind of variable is Fare ? \ntrain.Fare.dtype","5753914f":"# How many unique kinds of Fare are there ?\nprint(\"There are {} unique Fare values.\".format(len(train.Fare.unique())))","39da22ad":"# Add Fare to sub dataframes.\ndf_con['Fare'] = train['Fare']   # Continuous\ndf_bin['Fare'] = pd.cut(train['Fare'], 5) # Discretised\n","386dbf2f":"df_bin.head()","abd8c235":"# Visualize the Fare bin counts as well as the Fare distribution versus Survived.\nplot_count_dist(data = train,\n               bin_df = df_bin,\n               label_column = 'Survived',\n               target_column = 'Fare',\n               figsize = (20, 10),\n               use_bin_df = True)","73106b9e":"# How many missing values does Cabin have ?\nmissing_values['Cabin']","e44628fa":"train.head()","c2e9fb95":"# What do the Cabin values look like ?\ntrain.Cabin.value_counts()","43792c91":"# How many missing values does Embarked have ?\nmissing_values['Embarked']","cacc516a":"# What kind of values are there in Embarked ?\ntrain.Embarked.value_counts()","06940e3a":"sns.countplot(y = 'Embarked', data = train)","8f58c8ee":"# Add Embarked to sub dataframes.\ndf_bin['Embarked'] = train['Embarked']\ndf_con['Embarked'] = train['Embarked']","ba3ddf49":"# Remove Embarked rows which are missing values\nprint(len(df_con))\ndf_con = df_con.dropna(subset = ['Embarked'])\ndf_bin = df_bin.dropna(subset = ['Embarked'])\nprint(len(df_con))","56cf7b12":"df_bin.head()","ca6c4b02":"# One-hot encode binned variables\none_hot_cols = df_bin.columns.tolist()\none_hot_cols.remove('Survived')\ndf_bin_enc = pd.get_dummies(df_bin, columns = one_hot_cols)\n\ndf_bin_enc.head()","a4b44f9d":"df_con.head()","59a40d1a":"# Label Encode all continuous values using LabelEncoder()\ndf_con_enc = df_con.apply(LabelEncoder().fit_transform)\n\ndf_con_enc.head()","fb4d9fb0":"# Select the dataframe we want to use first for predictions\nselected_df = df_con_enc","d10fe3af":"# Split the dataframe into data and labels\nX_train = selected_df.drop('Survived', axis = 1) # data\ny_train = selected_df.Survived # labels","7bc3a267":"X_train","a254866d":"# Shape of the data (without labels)\nX_train.shape","a84bed40":"y_train","2bfd0805":"# Shape of the labels\ny_train.shape","6edbb666":"# Function that runs the requested algorithm and returns the accuracy metrics\ndef fit_ml_algo(algo, X_train, y_train, cv):\n    \n    # One Pass\n    model = algo.fit(X_train, y_train)\n    acc = round(model.score(X_train, y_train) * 100, 2)\n    \n    # Cross Validation\n    train_pred = model_selection.cross_val_predict(algo,\n                                                  X_train,\n                                                  y_train,\n                                                  cv = cv,\n                                                  n_jobs = -1)\n    # Cross-Validatiob accuracy metric\n    acc_cv = round(metrics.accuracy_score(y_train, train_pred) * 100, 2)\n    \n    return train_pred, acc, acc_cv","ffa6376b":"# Logistic Regression\nstart_time = time.time()\ntrain_pred_log, acc_log, acc_cv_log = fit_ml_algo(LogisticRegression(),\n                                                      X_train,\n                                                      y_train,\n                                                      10)\nlog_time = (time.time() - start_time)\nprint(\"Accuracy: %s \" % acc_log)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_log)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=log_time))","e1d14055":"# K-Nearest Neighbours\nstart_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = fit_ml_algo(KNeighborsClassifier(), \n                                                  X_train, \n                                                  y_train, \n                                                  10)\nknn_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_knn)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_knn)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=knn_time))","6e17144c":"# Gaussian NB# Gaussian Naive Bayes\nstart_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = fit_ml_algo(GaussianNB(), \n                                                                      X_train, \n                                                                      y_train, \n                                                                           10)\ngaussian_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gaussian)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gaussian)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gaussian_time))","fa3a3373":"# Linear SVC\nstart_time = time.time()\ntrain_pred_svc, acc_linear_svc, acc_cv_linear_svc = fit_ml_algo(LinearSVC(),\n                                                                X_train, \n                                                                y_train, \n                                                                10)\nlinear_svc_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_linear_svc)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_linear_svc)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=linear_svc_time))","60881214":"# Stochastic Gradient Descent\nstart_time = time.time()\ntrain_pred_sgd, acc_sgd, acc_cv_sgd = fit_ml_algo(SGDClassifier(), \n                                                  X_train, \n                                                  y_train,\n                                                  10)\nsgd_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_sgd)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_sgd)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=sgd_time))\n","74567e7f":"# Decision Tree Classifier\nstart_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = fit_ml_algo(DecisionTreeClassifier(), \n                                                                X_train, \n                                                                y_train,\n                                                                10)\ndt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_dt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_dt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=dt_time))\n","a4181f21":"# Gradient Boosting Trees\nstart_time = time.time()\ntrain_pred_gbt, acc_gbt, acc_cv_gbt = fit_ml_algo(GradientBoostingClassifier(), \n                                                                       X_train, \n                                                                       y_train,\n                                                                       10)\ngbt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gbt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gbt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gbt_time))","4a9d9079":"# View the data for Catboost model\nX_train.head()","d64d985e":"# View the labels for the Catboost model\ny_train.head()","6075aa52":"# Define the categorical features for the Catboost model\ncat_features = np.where(X_train.dtypes != np.float)[0]\ncat_features","2084c5f6":"# Use the Catboost Pool() function to pool together the trainin data and categorical feature labels\ntrain_pool = Pool(X_train,\n                 y_train,\n                 cat_features)","83dacd1f":"# Catboost model definition\ncatboost_model = CatBoostClassifier(iterations = 1000,\n                                   custom_loss = ['Accuracy'],\n                                   loss_function = 'Logloss')\n# Fit CatBoost model\ncatboost_model.fit(train_pool,\n                   plot = True)\n\n# CatBoost accuracy\nacc_catboost = round(catboost_model.score(X_train, y_train) * 100, 2)\n","7cd74160":"# Perform Catboost cross-validation\nstart_time = time.time()\n\n# Set params for cross-validation as same as initial model\ncv_params = catboost_model.get_params()\n\n# Run the cross-validation for 10-folds (same as other models)\ncv_data = cv(train_pool,\n            cv_params,\n            fold_count = 10,\n            plot = True)\n\n# How long did it take ?\ncatboost_time = (time.time() - start_time)\n\n# Catboost CV results save into a dataframe (cv_data), let's withdraw the maximum accuracy score\nacc_cv_catboost = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","e30b303e":"# Print put the Catboost model metrics \nprint(\"---CatBoost Metrics---\")\nprint(f\"Accuracy: {acc_catboost}\")\nprint(f\"Accuracy Cross-Validation 10 Folds: {acc_cv_catboost}\")\nprint(f\"Running Time: {datetime.timedelta(seconds = catboost_time)}\")","ad4fbb6e":"models = pd.DataFrame({\n    'Model': ['KNN','Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Descent','Linear Support Vector Machine', \n              'Decision Tree', 'Gradient Boosting Trees', 'Catboost'],\n    'Score': [\n        acc_knn,\n        acc_log,\n        acc_gaussian,\n        acc_sgd,\n        acc_linear_svc,\n        acc_dt,\n        acc_gbt,\n        acc_catboost\n    ]})\nprint(\"---Regular Accuracy Scores---\")\nmodels.sort_values(by = 'Score', ascending = False)","e67c59bb":"cv_models = pd.DataFrame({\n    'Model': ['KNN','Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Descent','Linear Support Vector Machine', \n              'Decision Tree', 'Gradient Boosting Trees', 'Catboost'],\n    'Score': [\n        acc_cv_knn,\n        acc_cv_log,\n        acc_cv_gaussian,\n        acc_cv_sgd,\n        acc_cv_linear_svc,\n        acc_cv_dt,\n        acc_cv_gbt,\n        acc_cv_catboost\n    ]})\nprint(\"---Cross-Validation Accuracy Scores---\")\ncv_models.sort_values(by = 'Score', ascending = False)","8be0be21":"# Feature Importance\ndef feature_importance(model, data):\n    \"\"\"\n    Function to show which features are most important in the model.\n    ::param_model:: Which model to use?\n    ::param_data:: What data to use?\n    \"\"\"\n    fea_imp = pd.DataFrame({'imp': model.feature_importances_, 'col': data.columns}) \n    fea_imp = fea_imp.sort_values(['imp', 'col'], ascending=[True, False]).iloc[-30:]\n    _ = fea_imp.plot(kind='barh', x='col', y='imp', figsize=(20, 10))\n    return fea_imp\n    #plt.savefig('catboost_feature_importance.png')","bbcc2c6b":"# Plot the feature importance scores\nfeature_importance(catboost_model, X_train)\n","f445569b":"metrics = ['Precision', 'Recall', 'F1', 'AUC']\n\neval_metrics = catboost_model.eval_metrics(train_pool,\n                                           metrics=metrics,\n                                           plot=True)\n\nfor metric in metrics:\n    print(str(metric)+\": {}\".format(np.mean(eval_metrics[metric])))","c973ed82":"# We need our test dataframe to look like this one\nX_train.head()","5b674b5b":"# Our test dataframe has some columns our model hasn't been trained on\ntest.head()","7ef3d895":"# One hot encode the columns in the test data frame (like X_train)\ntest_embarked_one_hot = pd.get_dummies(test['Embarked'], \n                                       prefix='embarked')\n\ntest_sex_one_hot = pd.get_dummies(test['Sex'], \n                                prefix='sex')\n\ntest_plcass_one_hot = pd.get_dummies(test['Pclass'], \n                                   prefix='pclass')","0760b711":"# Let's look at test, it should have one hot encoded columns now\ntest.head()","d110df4e":"# Create a list of columns to be used for the predictions\nwanted_test_columns = df_con.drop('Survived', axis = 1).columns\nwanted_test_columns","2ad3f4a3":"# Make a prediction using the CatBoost model on the wanted columns\npredictions = catboost_model.predict(test[wanted_test_columns]\n                                    .apply(LabelEncoder().fit_transform))","bd6006b3":"# Our predictions array is comprised of 0's and 1's (Survived or Did Not Survive)\npredictions[:20]","6f1c5986":"# Create a submission dataframe and append the relevant columns\nsubmission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = predictions\nsubmission.head()","575e4100":"# Let's convert our submission dataframe 'Survived' column to into\nsubmission['Survived'] = submission['Survived'].astype(int)\nprint(\"Converted Survived column to integers.\")","4855e8d9":"# Are our test and submission dataframes the same length ? \nif len(submission) == len(test):\n    print(f\"Submission dataframe is the same length as test {len(submission)} rows\")\nelse:\n    print(f\"Dataframes mismatched, won't be able to submit to Kaggle.\")","ebdecad5":"# Convert submission dataframe to csv for submission to csv\n# for Kaggle submission\nsubmission.to_csv('..\/catboost_submission.csv', index=False)\nprint('Submission CSV is ready!')","fce33293":"# Check the submission csv to make sure it's in the right format\nsubmissions_check = pd.read_csv(\"..\/catboost_submission.csv\")\nsubmissions_check.head()","9a7116ef":"### Contact me\n\n#### Mert Bozk\u0131r\n[LinkedIn](https:\/\/www.linkedin.com\/in\/mertbozkir\/)\n\n[Github](https:\/\/github.com\/mertbozkir)","8ae2ee44":"## Feature: Ticket\n\nDescription: The ticket number of the boarding passenger.","a1debc64":"### Decision Tree","9f420001":"The columns in test have been converted to the same format at df_con_enc. Now we can make predictions on the test dataframe columns we built a model on.\n\nWe can find the columns we made predictions on with ```X_train.columns```.","03109873":"We can see from the tables, the CatBoost model had the best results. Getting just under 82% is pretty good considering guessing would result in about 50% accuracy (0 or 1).\n\nWe'll pay more attention to the cross-validation figure.\n\nCross-validation is more robust than just the .fit() models as it does multiple passes over the data instead of one.\n\nBecause the CatBoost model got the best results, we'll use it for the next steps.\n\n**Challenge:** How could you improve the CatBoost model?","b258f65f":"### Let's explore each of these features invidually\n\nWe'll go through each column iteratively and see which ones to use in our first models. Some may need more preprocessing than others to get ready.\n\n","d9fa4684":"## Data Description\n\n**Survival:** 0 = No, 1 = Yes\n\n**pclass(Ticket class):** 1=1st, 2=2nd, 3=3rd\n\n**sex:** Sex\n\n**Age:** Age in years\n\n**sibsp:** number of siblings\/spouses aboard the Titanic\n\n**parch:** number of parents\/children aboard the Titanic\n\n**ticket:** Ticket number\n\n**fare:** Passenger fare\n\n**cabin:** Cabin number\n\n**embarked:** Port of Embarkation, C=Cherbourg, Q=Queenstown, S=Southampton\n","175769b3":"## Feature: Parch\n\nDescription: The number of parents\/children the passenger has aboard the Titanic.\n\nSince this feature is similar to SibSp, we'll do a similar analysis.\n","a15aa680":"**Why would you want feature importance?**\n\nFeatrue importance shows how much each feature contributed to the model.\n\nYou could take this information and remove features which don't contribute much to reduce dimenstionality (and save compute).\n\nYou could improve features which don't offer much to the overall model.\n\nOr you could improve features which offer more to the model. In this case, there aren't many ways you could improve sex as it's already a binary.\n\nFeature importance figures also show people who may not be familiar with the problem what features of their data are most important when it comes to making predictions with machine learning models.","2394a17c":"### Linear Support Vector Machines (SVC)","43e6cf23":"###  Now submit your .csv to Kaggle!\n\nhttps:\/\/www.kaggle.com\/c\/titanic\/submit","8d04df19":"## Feature: Sex\n\nDescription: The sex of the passenger (male or female)","4e1f5cf6":"## Feature Encoding\n\nNow we have our two sub dataframes ready. We can encode the features so they're ready to be used with our machine learning models.\n\nWe will encode our binned dataframe (df_bin) with one-hot encoding and our continuous dataframe (df_con) with the label encoding function from sklearn.","0a915c16":"### Gaussian NB","fdcc6d37":"We need our ```submission``` dataframe to look like the ```gender_submission``` dataframe, so we'll turn the ```Survived``` column into integers.","4a0b3467":"## Feature: Name \n\nDescription: The name of the passenger.","c16f5b11":"### Possible Extensions\n","dcd70045":"We've removed the two rows with missing values for Embarked, now we can add Embarked to our sub dataframes.\n","bde508d5":"## Feature: Cabins\n\nDescription: The cabin number where the passenger was staying.","0f49cbec":"What does the graph on the right tell us about ```Parch``` ? ","60e03883":"**How can we deal with the 2 missing values of Embarked ?**\n\nAnother option would be to randomly assign a value C,Q, S to each row.\n\nWhat are the pros and cons of each?\n\nFor now, we will remove those rows.","5fd1bde7":"Let's add SibSp to our subset dataframes and view the distribution.","d3e88980":"## Feature: Embarked\n\nDescription: The port where the passenger boarded the Titanic.\n\nKey: C = Cherbourg, Q = Queenstown, S = Southampton","dbff0606":"### Define a function to fit Machine Learning Algorithms\n\nSince many of the algorithms we will use are from the sklearn library, they all take similar(practically the same) inputs and produce similar outputs.\n\nTo prevent writing code multiple times, we will functionise fitting the model and returning the accuracy scores.","af6026a1":"### Feature: Pclass\n\nDescription: The ticket class of the passenger.\n\nKey: 1=1st, 2=2nd, 3=3rd","0f1109ee":"### Catboost Algorithm\n\nCatBoost is a state-of-the-art open-source gradient boosting on decision trees library.\n\nIt's simple and easy to use. And is now regularly one of my go-to algorithms for any kind of machine learning task.\n\nFor more on CatBoost and the methods it uses to deal with categorical variables, check out the [CatBoost docs](https:\/\/catboost.ai\/).","15073d78":"#### Let's plot the distribution\n\nWe will look at the distribution of each feature first if we can do understand what kind of spread there is across the dataset.\n\nFor example, if there are values which are completely outside of the distribution, we may now want to include them in our model.","521006f1":"Ok we can clearly see some missing values here. Especially in the cabin column.\n\nIt's important to visualize missing values early so you know where the major holes are in your dataset.\n\nKnowing this information will help with your EDA and figuring out what kind of data cleaning and preprocessing is needed.","2143eb07":"That doesn't look too good, what about another way of looking at it?","1cb286b3":"### Submission \n\nLet's use the model with the highest cross-validation accuracy score to make a prediction on the test dataset and then submit our predictions to Kaggle.\n\nWe want to make predictions on the same kind of columnns our model is trained on.\n\nSo we have to select the subset of right columns of the test dateframe, encode them and make a prediciton with our model.","0b4d00a7":"681 unique values is too many for now. So we won't use Ticket in our subset dataframes.\n\nThere may be some way to reduce this down.\n\n**Challenge:** How could you reduce the Ticket feature? Is it even possible?\n\nHint: It may be similar to what you could do with Name.","fcf88ab2":"MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))\n\nRecall is low, this means there's a higher amount of false negatives (predicting Did not survive when it was actually Survived).\n\nPrecision is higher therefore there's less false positives (predicting Survived, when it was actually Did not survive).\n\n**Challenge:** What are some ways to visualise precision and recall? Hint: You may want to look into what a confusion matrix is, you can find much more information in this blog post: [Beyond Accuracy: Precision and Recall](https:\/\/towardsdatascience.com\/beyond-accuracy-precision-and-recall-3da06bea9f6c)","a0bacfd6":"Every row has a unique name. This is equivalent to the passenger ID. But name could be used differently.\n\nCan you think of ways you could reduce the number of different name? Or create new features out of the names?\n\n**Note:** Because of so many different names and to keep this EDA fast, we won't move forward using the name variable. ","246fc38e":"### Precision and Recall\n\nPrecision and recall are two metrics which are used for cases where you have have an imbalanced classification problem.\n\nFor example, you may have 100,000 people and only 1 of them gets a certain disease. If your model predicts that all people don't have the disease, it only misses 1 in 100,000 so its accuracy is 99.999%. But this isn't really helpful.\n\nThis is where precision an recall come in.\n\n**Recall** = a metric which measures a models ability to find all the relevant cases in a dataset.\n\nRecall would be the models ability to find the 1 person in 100,000 who has the disease.\n\n**Precision** = a metric which measures a models ability to correctly identify only relevant instances.\n\nIn our example, Precision would be if the model found the 1 person who had the disease, did they actually have the disease.\n\nCombining the precision and recall, gives an **F1 score**.\n\nThese metrics will all fall between 0 and 1, with a higher value being better.\n\nAlthough, they don't necessarily need to come into play for our Titantic problem, they're worth remembering for your future work.","49196248":"Not many people survived. But of those who did, more were female.","1c2820ec":"### Regular Accuracy Scores","daec6506":"## Feature: Fare\n\nDescription: How much the ticket cost.","bfeb4018":"### What datatypes are in the dataframe?\n\nAs a general rule of thumb, features with a datatype of object could be considered categorical features. And those which are floats or ints(numbers) could be considered numerical features.\n\nHowever, as we dig deeper, we might find features which are numerical may actually be categorical.\n\nThe goal for the next few steps is to figure out how best to process the data so our machine learning model can learn from it.\n\nIdeally, all the features will be encoded into a numerical value of some kind.","83e9af6c":"Embarked is a categorical variable because there are 3 categories which a passenger could have boarded on.","0fd417fd":"Out of a total 891 rows, that's almost one quarter of the dataset.\n\nWhat would you do with these missing values?\n\nCould replace them with the average age? What's the pro's and con's of doing this?\n\nOr would you get rid of them completely?\n\nWe won't answer these questions in our initial EDA but this is something we would definitely revisit at a later date.","c3ea6a59":"### Target Feature: Survived\n\nDescription: Whether the passenger survived or not.\n\nKey:0 = did not survive, 1 = survived\n\nThis is the variable we want our machine learning model to predict based off all the others.","e493ae36":"Since there are no missing values in Pclass, let's add it to our sub dataframes.\n","c66e37f6":" ### Feature Importance\n \n Which features of the best model were most important for making predictions?","068c7730":"Since there are too many missing values. we won't use Cabin for our initial models and won't add it to our sub dataframes.\n\nBut how could you modify Cabin to be more usable?\n\nWhat could you do about missing values ?","73fc7fa2":" We cann see with this feature, the values are numerical(1, 2 and 3) but they are categories.\n \n How do we know this? Because a passenger in Class 3 doesn't ","e01b6f3c":"### Let's separate the data","8ef45a7c":"### Stochastic Gradient Descent","ae56145c":"What does the graph on the right tell us?","1278c412":"## Start Building Machine Learning Models\n\nNow our  data has been manipulating and converted to numbers, we can run a series of different machine learning algorithms over it to find which yield the best results.","8f74fe25":"### References and Learn More\n\n<ul>\n-Daniel Bourke livestream video<br>\n    \n-[Sklearn Classification Notebook by Daniel Furasso](https:\/\/github.com\/dformoso\/sklearn-classification\/blob\/master\/Data%20Science%20Workbook%20-%20Census%20Income%20Dataset.ipynb) - Daniel has  done some epic work showing how you can take a bigger dataset, clean it up and perform some similar classification work from scratch. It would be a great next step after going through this one.\n    \n-[Encoding categorical features in Python blog post by Practical Python Business](http:\/\/pbpython.com\/categorical-encoding.html)- this blog post sheds some great light on how to deal with categorical features in Python. The rest of the website contains plenty more great information for using Python in a business environment.\n    \n-[Shap library](https:\/\/github.com\/slundberg\/shap) - a great (and beautiful) alternative to viewing feature importance. Can you use this to improve on the feature importance graphics?\n<\/ul>","9fe98a72":"These are all possible options to improve this pipeline. I'd suggest starting with the feature engineering (improving and manipulating the existing data) first.\n<ol>\n<ul>\n\n-What can you do with the ```Age``` feature?\n    <ul>-How would fill up all the missing values?<\/ul>\n        <ul>-You may want to look into the ```interpolate()``` function of Pandas for this.<\/ul>\n<\/ul>    \n\n1.What can you do with the ```Name``` feature?\n    <ul>-What titles did the passengers have? Did this influence their survival?<\/ul>\n    \n    \n2.What can you do with the ```Cabin``` feature?\n    <ul>-Is there a way to see whether they had a cabin or not?<\/ul>\n    \n3.Can you combine the ```SibSp``` and ```Parch``` features to see if the person was alone or not?\n    \n4.Could you do a ```PCA\/feature analysis``` to see what features are more important than others?\n    <ul>-Does removing the less important model features improve the model?<\/ul>\n\n5.The models take a bunch of hyperparameters but we've mostly used the default settings, is there a way to find which hyperparameters are best to use?\n    <ul>-Tip: Check out the CatBoost with Python tutorial and the [hyperopt library](https:\/\/github.com\/hyperopt\/hyperopt) to see if you can improve the ```CatBoost``` model<\/ul>\n<\/ol>","aa669345":"This means Catboost has picked up that all variables except ```Fare``` can be treated as categorical.","e136a18d":"### Logistic Regression","294a9462":"## Feature: SibSp\n\nDescription: The number of siblings\/spouses the passenger has aboard the Titanic.","1793a4ac":"## Loading in the data \n \n After we've downloaded the data, we need to get into the notebook.\n I've not stored my computer so I am using Kaggle right now.\n ","e9f79dd5":"<img src=\"https:\/\/lawtomated.com\/wp-content\/uploads\/2019\/10\/Precision_1-300x84.png\" alt=\"drawing\" width=\"388\" height = \"108\"\/>\n\n\n<img src=\"https:\/\/lawtomated.com\/wp-content\/uploads\/2019\/10\/Recall_1-585x133.png\" alt=\"drawing\" width=\"388\" height = \"108\"\/>\n\n\n<img src=\"https:\/\/lawtomated.com\/wp-content\/uploads\/2019\/10\/F1-Score-300x76.png\" alt = \"drawing\" width=\"388\" height= \"108\"\/>\n","ca12f311":"### What missing values are there ? \nWhere are the holes in our data?\n\nThese are rows which are missing value or have NaN instead of something like the rest of column","934b5276":"Since this is already binary variable (male or female), let's add it straight to our subset dataframes.","108b3da3":"## Model Results\n\nWhich model had the best cross-validation accuracy?\n\n**Note:** We care most about cross-validation metrics because the metrics we get from .fit() can randomly score higher than usual.\n\n","3b0f3924":"### K-Nearest Neighbours","5916110d":"Because Fare is a float (number) let's add it as it is to our continuous sub dataframe but to add it to our categorical sub dataframe, we'll cut it into bins.\n\n","79af23bd":"**Challenge:** How would you fill the missing variables in the Age column?\n\n**Function to create count and distribution visualisations.**","af7d32d7":"### To perform our data analysis, let's create two new dataframes\n\nWe'll create one for exploring discretised  continuous variables (continuous variables which have been sorted into some kind of category) and another for exploring continuous variables","1b106a1c":"## Feature: Age\n\nDescription: The age of the passenger.","4ab7195e":"### Gradient Boost Trees","cd4fed6e":"**Challenge:** How would you change the Fare bins ?"}}