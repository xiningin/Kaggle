{"cell_type":{"edf6e413":"code","f2af5f47":"code","b2b75636":"code","2ccee1a7":"code","fb4e52eb":"code","9b0d8d74":"code","38b7b5f1":"code","c7fe5f87":"code","92848cc4":"code","de26f94d":"code","ebe5d040":"code","28a678d1":"code","6cbd0f81":"code","a4e24d69":"code","78afc42a":"code","81b2a550":"code","8fdb8037":"code","5d23c474":"code","d5bb756f":"code","3cb0f86e":"code","848f0cce":"code","e004e05f":"code","41465136":"code","80801d1e":"code","6e4ee814":"code","5bf6cd29":"code","9e656100":"code","9d189ce4":"code","47b2c4aa":"code","cc9dba65":"code","02084af4":"code","70a89ce1":"code","5661fe8b":"code","b622dd16":"code","eb70d904":"code","755cd3bd":"markdown"},"source":{"edf6e413":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2af5f47":"data = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')","b2b75636":"data.head()","2ccee1a7":"data.drop(['Loan_ID'],axis=1,inplace=True)","fb4e52eb":"column_objects = [col for col in data.columns if data[col].dtypes == 'object']","9b0d8d74":"column_objects","38b7b5f1":"data.isnull().sum()","c7fe5f87":"total_missing_values = data.isnull().sum()","92848cc4":"total_missing_values.sum()","de26f94d":"np.product(data.shape)","ebe5d040":"total_percentage = total_missing_values.sum() \/ np.product(data.shape) * 100\ntotal_percentage","28a678d1":"data.dropna(axis=0, inplace=True)","6cbd0f81":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ndata[column_objects] = data[column_objects].apply(labelencoder.fit_transform)","a4e24d69":"data","78afc42a":"X = data.drop(['Loan_Status'],axis=1)\ny = data['Loan_Status']","81b2a550":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)","8fdb8037":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()","5d23c474":"dtree.fit(X_train,y_train)","d5bb756f":"predictions = dtree.predict(X_test)","3cb0f86e":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(predictions,y_test))","848f0cce":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=300)","e004e05f":"rfc.fit(X_train,y_train)","41465136":"rfc_pred = rfc.predict(X_test)","80801d1e":"y_test","6e4ee814":"rfc_pred","5bf6cd29":"accuracy_score(y_test, rfc_pred)","9e656100":"test_data = pd.read_csv('..\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv')\ntest_data.head()","9d189ce4":"test_data.drop(['Loan_ID'],axis=1,inplace=True)","47b2c4aa":"test_data","cc9dba65":"test_data.dropna(axis=0, inplace=True)","02084af4":"column_objects = [col for col in test_data.columns if test_data[col].dtypes == 'object']\ncolumn_objects","70a89ce1":"test_data[column_objects] = test_data[column_objects].apply(labelencoder.fit_transform)","5661fe8b":"test_data","b622dd16":"test_predictions = rfc.predict(X_test)","eb70d904":"accuracy_score(y_test, test_predictions)","755cd3bd":"Now test our testing data"}}