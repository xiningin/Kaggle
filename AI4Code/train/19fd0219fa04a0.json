{"cell_type":{"509e8e22":"code","4ddeccc3":"code","4cb05763":"code","ae43bff5":"code","ef787ca8":"code","d8137a4f":"code","efa9e7a1":"code","0cc06b32":"code","f093c1c2":"code","cc79aa1c":"code","91a9fe4a":"code","682b347e":"code","97047c48":"code","8739f163":"code","1a8dd91b":"code","fdcd1d47":"code","6347c6f6":"code","b79bff3d":"code","dfdd7542":"code","1c934796":"code","8d3322a4":"markdown","13e98282":"markdown","d10b098c":"markdown","45959f22":"markdown","f859b327":"markdown","d155b5af":"markdown","b3a0f162":"markdown","e7a19094":"markdown","6ebf9c6c":"markdown","3fb2ecfd":"markdown","9d9d4bcc":"markdown","97c5d819":"markdown","bd2bb852":"markdown","e05db1f1":"markdown","a0e0d4bd":"markdown","630f8c67":"markdown","0ef51ed0":"markdown","a8e74aa1":"markdown","53a5ae42":"markdown","e400b271":"markdown","84b91ff9":"markdown","f5da29ef":"markdown","9df65812":"markdown","51947c81":"markdown","6dfb61ad":"markdown","3230ecb5":"markdown","e125657e":"markdown","9b88d8ad":"markdown","fb09aec6":"markdown","a64ca0b7":"markdown","3649e881":"markdown","f0cdc35f":"markdown","3e9c58b7":"markdown","a9396723":"markdown"},"source":{"509e8e22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ddeccc3":"import pandas as pd\nwine_rew = pd.read_csv('..\/input\/wine-reviews\/winemag-data-130k-v2.csv')\nwine_ds = wine_rew.copy()\nwine_ds.head()","4cb05763":"import seaborn as sns\niris = sns.load_dataset('iris')\niris_ds = iris.copy()\niris_ds.head()","ae43bff5":"#pip install matplotlib\n#or\n# conda install matplotlib","ef787ca8":"import matplotlib.pyplot as plt","d8137a4f":"#Creating a figure and axis\nfig,ax = plt.subplots()\n\n\n#Scattering the sepal_length against the sepal_width\ncolors = {'setosa':'r', 'versicolor':'g', 'virginica':'b'}\n\nfor i in range(len(iris_ds['sepal_length'])):\n    ax.scatter(iris_ds['sepal_length'][i], iris_ds['sepal_width'][i],color=colors[iris_ds['species'][i]])\n\n# Setting a title and labels\nax.set_title('Iris Dataset')\nax.set_xlabel('Sepal Length')\nax.set_ylabel('Sepal Width')","efa9e7a1":"# get columns to plot\ncolumns = iris.columns.drop(['species'])\n# create x data\nx_data = range(0, iris_ds.shape[0])\n# create figure and axis\nfig, ax = plt.subplots()\n# plot each column\nfor column in columns:\n    ax.plot(x_data, iris_ds[column], label=column)\n# set title and legend\nax.set_title('Iris Dataset')\nax.legend()","0cc06b32":"# create a figure and axis \nfig, ax = plt.subplots() \n# count the occurrence of each class \ndata = wine_ds['points'].value_counts() \n# get x and y data \npoints = data.index \nfrequency = data.values \n# create bar chart \nax.bar(points, frequency) \n# set title and labels \nax.set_title('Wine Review Scores') \nax.set_xlabel('Points') \nax.set_ylabel('Frequency')","f093c1c2":"# pip install pandas\n#or\n# conda install pandas","cc79aa1c":"iris_ds.plot.scatter(x='sepal_length',y='sepal_width',title='Iris Dataset')","91a9fe4a":"iris_ds.drop(['species'], axis=1).plot.line(title='Iris Dataset')\n","682b347e":"wine_ds['points'].value_counts().sort_index().plot.bar();","97047c48":"wine_ds.groupby(\"country\").price.mean().plot.bar();","8739f163":"sns.scatterplot(x='sepal_length', y='sepal_width',hue='species', data=iris_ds);","1a8dd91b":"sns.lineplot(data=iris_ds.drop(['species'], axis=1));","fdcd1d47":"sns.countplot(wine_ds['points']);","6347c6f6":"df = wine_ds[(wine_ds['points']>=97) & (wine_ds['price']<1000)]\ndf.head()","b79bff3d":"sns.boxplot('points', 'price', data=df);","dfdd7542":"corr = iris_ds.drop('species',axis=1).corr()\nsns.heatmap(corr,annot=True);","1c934796":"sns.pairplot(iris_ds,hue='species');","8d3322a4":"**<h2>Scatter Plot<\/h2>**","13e98282":"# **<h1>Importing Datasets<\/h1>**","d10b098c":"<h3> These modules and methods have been beneficial so far. I used them to have a better understanding of the dataset and the correlation between its variables. These are of course not the all data visualization methods but they are good for getting a better grip on the concept. I will cover the interpretation of the graphs in another Notebook.<\/h3>","45959f22":"<h3>To plot a bar-chart we can use the 'plot.bar()' method, but before we can call this we need to get our data. For this we will first count the occurrences using the 'value_count()' method like before and then sort the occurrences from smallest to largest using the 'sort_index()' method.<\/h3>","f859b327":"**<h2>Bar Chart<\/h2>**","d155b5af":"<h3>Pandas Visualization makes it really easy to create plots out of a pandas dataframe and series. It also has a higher level API than Matplotlib and therefore we need less code for the same results.<\/h3>","b3a0f162":"**<h2>Heatmap<\/h2>**","e7a19094":"**<h2>Scatter Plot<\/h2>**","6ebf9c6c":"<h3>Pandas can be installed using either pip or conda.<\/h3>","3fb2ecfd":"<h3>Matplotlib is the most popular python plotting library. It is a low-level library with a Matlab like interface\n<\/h3>\n<h4>To install Matplotlib pip and conda can be used.<\/h4>","9d9d4bcc":"**<h2>Pairplot<\/h2>**","97c5d819":"<h3>In this Notebook, you will learn basics of data visualization using Matplotlib, Pandas and Seaborn libraries. We will create these graphs using 'Iris' and 'Wine Reviews' datasets. Also we will not focus on interpreting the graps rather we'll focus on syntax.<\/h3>","bd2bb852":"<h3> We can also put the country data together and then take the mean of te wine prices for each country.<\/h3>   ","e05db1f1":"<h3>To create a scatter plot in Pandas we can call '<dataset>.plot.scatter()' and pass it two arguments, the name of the x-column as well as the name of the y-column.<\/h3>","a0e0d4bd":"<h3>Scatter plots\u2019 primary uses are to observe and show relationships between two numeric variables. The dots in a scatter plot not only report the values of individual data points, but also patterns when the data are taken as a whole.<\/h3>","630f8c67":"<h3>Seaborn's pairplot enables you to plot a grid of pairwise relationships in a dataset.<\/h3>","0ef51ed0":"# **<h1>Matplotlib<\/h1>**","a8e74aa1":"<h3>To create a line-chart we can use 'sns.lineplot' method. The only required argument is the data, which in our case are the four numeric columns(Independent Variables) from the Iris dataset.<\/h3>","53a5ae42":"**<h2>Line Chart<\/h2>**","e400b271":"<h3>A box plot shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be 'outliers' using a method that is a function of the inter-quartile range.<\/h3>","84b91ff9":"**<h2>Scatter Plot<\/h2>**","f5da29ef":"<h3>In Matplotlib we can create a line chart by calling the plot method.<\/h3>","9df65812":"# **<h1>Seaborn<\/h1>**","51947c81":"<h3>A bar chart can be created using the bar method. The bar-chart isn\u2019t automatically calculating the frequency of a category so we are going to use pandas 'value_counts' function to do this. The bar-chart is mostly useful for categorical data.<\/h3>","6dfb61ad":"<h3>In Seaborn a bar-chart can be created using the 'sns.countplot' method.<h3>","3230ecb5":"**<h2>Box Plot<\/h2>**","e125657e":"**<h2>Line Chart<\/h2>**","9b88d8ad":"<h3>To create a line-chart in Pandas we can call <dataframe>.plot.line(). Whilst in Matplotlib we needed to loop-through each column we wanted to plot, in Pandas we don\u2019t need to do this<\/h3>","fb09aec6":"**<h2>Bar Chart<\/h2>**","a64ca0b7":"<h3>A Heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors. I usually use Heatmaps when i want to see the correlation of variables in a dataset.In order to get the correlation values of variables we can call Pandas' \"dataset.corr()\" method. <\/h3>","3649e881":"**<h2>Bar Chart<\/h2>**","f0cdc35f":"# **<h1>Pandas Visualization<\/h1>**","3e9c58b7":"<h3>Seaborn is a Python data visualization library based on Matplotlib. It provides a high-level interface for creating attractive graphs. Seaborn is the module thati use the most. I use it mostly for data visualization purposes but on the other hand it really usefull for downloading data to work on as i did at the beginning of the Notebook.<\/h3>","a9396723":"**<h2>Line Chart<\/h2>**"}}