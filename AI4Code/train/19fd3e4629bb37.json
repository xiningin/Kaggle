{"cell_type":{"8f0aefba":"code","f2a4eaca":"code","cd508c9b":"code","d0d77f4f":"code","91866099":"code","ad88df0c":"code","49b1711f":"code","8e5b93c8":"code","67ecb0bb":"code","94b68330":"code","79e7afaa":"code","fb4b5db2":"code","72017538":"code","2e24e492":"code","ac9180df":"code","775f66ab":"code","288039d2":"code","1559869e":"code","3e37a39b":"code","b0f38696":"code","40c0b8c3":"code","45f61eab":"code","7914b793":"code","20fb81af":"code","377a6b24":"code","5947ecf1":"code","6dc53d4d":"code","13a87a97":"code","0551eda4":"code","15a4c640":"code","a9cde0b4":"code","fcd36265":"code","7895a05c":"code","7ee3ad43":"code","1ee17e98":"code","55ce5cd8":"code","20cc0c19":"code","5310e312":"code","ec446223":"code","3e089032":"code","8293655e":"code","7f9a6641":"code","ed11811f":"code","4518b0f5":"code","5cab90a7":"code","df0e39ac":"code","638a1e01":"code","bb2190be":"code","ae6bee98":"code","16992bc2":"code","1dd91e1c":"code","34ab594e":"code","476fd912":"code","9710afd8":"code","f5d90f56":"code","fe19fe8d":"code","9c4d57ac":"code","96a37fef":"code","75dfebf7":"code","d719ec81":"code","e063e3a4":"code","86bdeb4b":"code","d02935b0":"code","5aba648b":"code","e38989c4":"code","14a7f566":"code","840f0c24":"code","7ceb6173":"code","35278f7d":"code","c8090c55":"code","2cbfcc84":"code","802cd326":"code","233b0c3c":"code","521c29d7":"code","6089bebb":"code","58e534c4":"code","1dcabaa1":"code","5abbf5e9":"code","7f7fdc24":"code","ea6d7fe8":"code","0046f3f8":"code","e0315c9c":"code","ddc1cb56":"code","d1c92444":"code","f4de4193":"code","6b287f62":"code","1f76f52c":"code","cd540da8":"code","0e29ec04":"code","b2c6007f":"code","d3ca8a3e":"code","b9b5b97e":"code","f32ca933":"code","1a3ed35a":"code","aeee590b":"code","0c50b8e5":"code","d40f880a":"code","25cb1b3e":"code","82e3beb0":"code","e6f4c772":"code","e9d83bf9":"code","201e783b":"code","5be1d54d":"code","ce24dbf4":"code","332955d1":"code","d8929b36":"code","39c8f943":"code","3509e65c":"code","4b5dcf6a":"code","36029f96":"code","4ffa1a91":"code","5396b81a":"code","9bd7f9fb":"code","842e05a2":"code","73e5989a":"code","b4060370":"code","acf48787":"code","56bf3b30":"code","3f6f89e3":"code","17f49889":"code","e2c15615":"code","ade07917":"code","c596424d":"code","bcf69d29":"code","528e4023":"code","53037a1c":"code","382340e8":"code","62d62f80":"code","5bf14c28":"code","ca46a55e":"code","20149e53":"code","f57afc12":"code","1dc90daf":"code","d9940631":"code","81f1115e":"code","570c14f5":"code","d4ce5a49":"code","11fb3818":"code","20533ded":"code","2ce1ffc1":"code","124535f1":"code","f20b0cab":"code","c36f487e":"code","43f9f817":"code","9beebfc5":"code","5e4a6063":"code","957640ab":"code","e56f9c5a":"code","cfb11dc2":"code","8edd6176":"code","d36ca59e":"code","d0a43826":"code","403b22c9":"code","ead1a4d2":"code","c8a96b24":"code","53eaaf54":"code","75241caf":"code","70bd9f2d":"code","82f67de0":"code","1b7970cd":"code","1a4a66f0":"code","e7c933e3":"code","1eaa9acf":"code","d7d056b8":"code","f97e8977":"code","ca5a35be":"code","7cf68bbf":"code","19338880":"code","d35c884d":"code","cec87711":"code","69f468b3":"code","a745660b":"code","47605885":"code","bd5e9a3e":"code","3e1a42f6":"code","c160c398":"code","e409490b":"code","44862f94":"code","0c8924d8":"code","2feda7a2":"code","9ce870c4":"code","c0997f8e":"code","155ed8c5":"code","950f5d33":"code","1622f451":"code","2e6bbbe7":"code","b1047548":"markdown","f6010a23":"markdown","7d6388a5":"markdown","22c87de5":"markdown","56b5ae4f":"markdown","6128bf12":"markdown","e80e98d3":"markdown","315b8d66":"markdown","1b0fdb85":"markdown","a9536d47":"markdown","9babd637":"markdown","b1e3c22f":"markdown","a00ac004":"markdown","e574f230":"markdown","d7583582":"markdown","0994c792":"markdown","b76072f6":"markdown","8a6fef22":"markdown","3e41a528":"markdown","a7d1684e":"markdown","8fe171ec":"markdown","5af4fc1b":"markdown","34685415":"markdown","c2b7c540":"markdown","2917a653":"markdown","fd5dff4c":"markdown","58ee4ad9":"markdown","b4c7f080":"markdown","92ed1218":"markdown","eb58ee9a":"markdown","7c4da063":"markdown","b8135d6d":"markdown","0bbee7a1":"markdown","ecd742c4":"markdown","338eda40":"markdown","82531929":"markdown","896c5c9b":"markdown","190bdbea":"markdown","07ab1a5d":"markdown","f23b7188":"markdown","e66761a9":"markdown","239ce341":"markdown","bd36eed7":"markdown","04b450fc":"markdown","4218d607":"markdown","b8950d70":"markdown","6fa2c065":"markdown","1feb3c93":"markdown","25f0abe8":"markdown","0af8c67d":"markdown","33035a9b":"markdown","e0bca21b":"markdown","04bca7ac":"markdown","b9b9b212":"markdown","d041b1fc":"markdown","929303df":"markdown","1abd4f52":"markdown","7e1b5bd1":"markdown","308c6cc3":"markdown","661288cb":"markdown","73f630ee":"markdown","2e624f0b":"markdown","70de1d99":"markdown","19e56d2c":"markdown","ee59fb1c":"markdown","e1442667":"markdown","b6f71d3d":"markdown","6b50411c":"markdown","7e771255":"markdown","1d16243b":"markdown","a2d81e88":"markdown","b547616f":"markdown","6fa98626":"markdown","f2b006cd":"markdown","287f8a43":"markdown","bdfeab41":"markdown","a22541e8":"markdown","339e7adc":"markdown","a8017085":"markdown","59f7af32":"markdown","d934d682":"markdown","cfe4ea12":"markdown","5788d628":"markdown","08172e72":"markdown","86dadaff":"markdown","2d2d9544":"markdown","759bab22":"markdown","215b7abc":"markdown","4b38a5a8":"markdown","3f7325d3":"markdown","74a04b6f":"markdown","d92e427f":"markdown","2bfee266":"markdown","059edc86":"markdown"},"source":{"8f0aefba":"import numpy as np\nimport pandas as pd\n\nseries = pd.Series([10, 20, 30, 40])\n\nseries","f2a4eaca":"print(\"Series index = \", series.index)\nprint(\"=\"*50)\nprint(\"Series values = \", series.values)","cd508c9b":"series = pd.Series([10, 20, 30, 40], index = [\"A\", \"B\", \"C\", \"D\"])\n\nseries","d0d77f4f":"print(\"Series index = \", series.index)\nprint(\"=\"*50)\nprint(\"Series values = \", series.values)","91866099":"print(series[0])\n\nprint(\"=\"*50)\n\nprint(series[0:2])\n\nprint(\"=\"*50)\n\nprint(series[[0,1]])","ad88df0c":"print(series['A'])\n\nprint(\"=\"*50)\n\nprint(series['A':'B'])\n\nprint(\"=\"*50)\n\nprint(series[['A','B']])","49b1711f":"series","8e5b93c8":"print(series * 2)\n\nprint(\"=\"*50)\n\nprint(series > 10)\n\nprint(\"=\"*50)\n\nprint(series[series > 10])\n\nprint(\"=\"*50)\n\nprint(np.max(series))","67ecb0bb":"series","94b68330":"print(\"A\" in series)\nprint(\"x\" in series)","79e7afaa":"print(10 in series)\nprint(5 in series)","fb4b5db2":"print(10 in series.values)\nprint(5 in series.values)","72017538":"grade_scale = {\n    'A': 'Excellent',\n    'B': 'Very Good',\n    'C': 'Good',\n    'D': 'Accepted',\n    'F': 'Fail'\n}\n\nseries = pd.Series(grade_scale)\n\nseries","2e24e492":"series['B']","ac9180df":"series = pd.Series(grade_scale, index=['D', 'C', 'B', 'A', 'X', 'Z'])\n\nseries","775f66ab":"pd.isnull(series)","288039d2":"pd.notnull(series)","1559869e":"series.isnull()","3e37a39b":"series.notnull()","b0f38696":"restaurant_1 = pd.Series([100, 150], index=['Pizza', 'Chicken'])\nrestaurant_2 = pd.Series([120, 200], index=['Pizza', 'Fish'])\n\nprint(restaurant_1)\nprint(\"=\"*50)\nprint(restaurant_2)","40c0b8c3":"restaurant_1 + restaurant_2","45f61eab":"series","7914b793":"series.name = 'Grade Scale'\nseries.index.name = 'Scale'\n\nseries","20fb81af":"restaurant_1","377a6b24":"restaurant_1.index = ['Meat', 'Fish']\n\nrestaurant_1","5947ecf1":"data_dict = {\n    'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada', 'uOttawa'],\n    'year': [2000, 2001, 2002, 2001, 2002, 2003, 2022],\n    'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2, 9.5]\n}\n\ndatafram = pd.DataFrame(data_dict)\n\ndatafram","6dc53d4d":"datafram.head()","13a87a97":"datafram = pd.DataFrame(data_dict, columns = ['state', 'pop'])\n\ndatafram","0551eda4":"datafram = pd.DataFrame(data_dict, columns = ['state', 'pop', 'country'])\n\ndatafram","15a4c640":"datafram = pd.DataFrame(data_dict, columns = ['state', 'pop'], index = ['#'+str(i) for i in range(1,8)])\n\ndatafram","a9cde0b4":"datafram.state","fcd36265":"datafram['state']","7895a05c":"type(datafram['state'])","7ee3ad43":"datafram['state'].index","1ee17e98":"datafram['state'].name","55ce5cd8":"datafram","20cc0c19":"datafram.loc['#7']","5310e312":"type(datafram.loc['#7'])","ec446223":"datafram = pd.DataFrame(data_dict, columns=['pop', 'year', 'state', 'test'])\n\ndatafram","3e089032":"datafram.test = datafram['pop'] * 10\n\ndatafram","8293655e":"datafram.test = pd.Series(['00', '11', '22', '33', '44', '55', '66'], index=[0, 1, 22, 33, 4, 5, 6])\n\ndatafram","7f9a6641":"datafram['area'] = np.arange(7)\n\ndatafram","ed11811f":"del datafram['area']\n\ndatafram","4518b0f5":"datafram","5cab90a7":"pop_col = datafram['pop']\n\npop_col","df0e39ac":"pop_col *= 100\n\ndatafram","638a1e01":"pop_col = datafram['pop'].copy()\n\npop_col \/= 100\n\ndatafram","bb2190be":"state = {\n    'Nevada': {2001: 2.4, 2002: 2.9},\n    'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}\n}\n\ndatafram = pd.DataFrame(state)\n\ndatafram","ae6bee98":"datafram.T","16992bc2":"datafram","1dd91e1c":"state = {\n    'Nevada': {2001: 2.4, 2002: 2.9},\n    'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}\n}\n\ndatafram = pd.DataFrame(state, index=[2000, 2001, 2002, 2004])\n\ndatafram","34ab594e":"datafram.columns.name = \"State\"\ndatafram.index.name = 'Year'\n\ndatafram","476fd912":"datafram.values","9710afd8":"type(datafram.values)","f5d90f56":"series = pd.Series(range(3), index=['a', 'b', 'c'])\n\nseries.index","fe19fe8d":"print(series.index[1])\nprint(\"=\"*50)\nprint(series.index[:2])","9c4d57ac":"try:\n    series.index[1] = 'B'\nexcept TypeError:\n    print(\"Index does not support mutable operations\")","96a37fef":"labels = pd.Index(np.arange(1,4))\n\nlabels","75dfebf7":"series = pd.Series([10, 20, 30], index=labels)\n\nseries","d719ec81":"duplicate_labels = pd.Index(['foo', 'foo', 'bar', 'bar'])\n\nduplicate_labels","e063e3a4":"series = pd.Series([1,2,3,4], index = duplicate_labels)\n\nseries","86bdeb4b":"series['foo']","d02935b0":"series = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])\n\nseries","5aba648b":"series = series.reindex(['a', 'b', 'c', 'd', 'e', 'f'])\n\nseries","e38989c4":"series = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\n\nseries","14a7f566":"series.reindex([0, 1, 2, 3, 4, 5, 6])","840f0c24":"series.reindex([0, 1, 2, 3, 4, 5, 6], method='ffill')","7ceb6173":"series.reindex([0, 1, 2, 3, 4, 5, 6], method='bfill')","35278f7d":"datafram = pd.DataFrame(np.arange(9).reshape(3,3),\n                       columns = [\"col_1\", \"col_2\", \"col_3\"],\n                       index = [\"row_1\", \"row_2\", \"row_3\"])\n\ndatafram","c8090c55":"datafram.reindex([\"row_3\", \"row_4\", \"row_1\", \"row_2\", \"row_5\"])","2cbfcc84":"datafram","802cd326":"datafram.reindex(columns = [\"col_3\", \"col_2\", \"col_5\", \"col_6\"])","233b0c3c":"datafram","521c29d7":"datafram.reindex([\"row_3\", \"row_2\", \"row_1\"], \n                 columns = [\"col_3\", \"col_2\", \"col_1\"])","6089bebb":"series = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\n\nseries","58e534c4":"series = series.drop('c')\n\nseries","1dcabaa1":"series = series.drop(['a', 'b'])\n\nseries","5abbf5e9":"datafram = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndatafram","7f7fdc24":"datafram.drop('Ohio')","ea6d7fe8":"datafram.drop(['Colorado', 'Utah'])","0046f3f8":"datafram.drop(['one', 'two'], axis=1)","e0315c9c":"datafram","ddc1cb56":"datafram.drop(['Ohio', 'Colorado'], inplace=True)","d1c92444":"datafram","f4de4193":"series = pd.Series(np.arange(10,14), index=['a', 'b', 'c', 'd'])\n\nseries","6b287f62":"series[1]","1f76f52c":"series['b']","cd540da8":"series[[1, 3]]","0e29ec04":"series[['b', 'd']]","b2c6007f":"series","d3ca8a3e":"series['a':'c']","b9b5b97e":"series['a':'c'] = 150\n\nseries","f32ca933":"datafram = pd.DataFrame(np.arange(16).reshape((4, 4)),\n                    index=['Ohio', 'Colorado', 'Utah', 'New York'],\n                    columns=['one', 'two', 'three', 'four'])\ndatafram","1a3ed35a":"datafram['two']","aeee590b":"datafram[['one', 'two']]","0c50b8e5":"datafram","d40f880a":"datafram[datafram['one'] > 5]","25cb1b3e":"datafram[datafram['one'] > 5] = 5\n\ndatafram","82e3beb0":"datafram","e6f4c772":"datafram.loc['Colorado', ['one',\"four\"]]","e9d83bf9":"datafram.loc[['Ohio', 'Colorado'], ['one', 'two']]","201e783b":"datafram.iloc[[0, 1], [0, 1]]","5be1d54d":"datafram.loc[:\"Colorado\", \"two\":]","ce24dbf4":"datafram.iloc[:2, 1:]","332955d1":"series = pd.Series(np.arange(3.))\n\nseries","d8929b36":"series[2]","39c8f943":"try: \n    print(series[-1])\nexcept KeyError:\n    print(\"KeyError: -1\")","3509e65c":"series = pd.Series(np.arange(3.), index=['a', 'b', 'c'])\n\nseries","4b5dcf6a":"series[2]","36029f96":"try: \n    print(series[-1])\nexcept KeyError:\n    print(\"KeyError: -1\")","4ffa1a91":"series_1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])\nseries_2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])\n\nprint(series_1)\nprint(\"=\"*50)\nprint(series_2)","5396b81a":"series_1 + series_2","9bd7f9fb":"series_1 * series_2","842e05a2":"datafram_1 = pd.DataFrame(np.arange(9).reshape((3, 3)), \n                          columns=list('bcd'), \n                          index=['Ohio', 'Texas', 'Colorado'])\n\ndatafram_2 = pd.DataFrame(np.arange(12).reshape((4, 3)), \n                          columns=list('bfe'), \n                          index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\nprint(datafram_1)\nprint(\"=\"*50)\nprint(datafram_2)","73e5989a":"datafram_1 + datafram_2","b4060370":"datafram_1 = pd.DataFrame(np.arange(12).reshape((3, 4)), columns=list('abcd'))\n\ndatafram_2 = pd.DataFrame(np.arange(20).reshape((4, 5)),  columns=list('abcde'))\n\nprint(datafram_1)\nprint(\"=\"*50)\nprint(datafram_2)","acf48787":"datafram_1 + datafram_2","56bf3b30":"datafram_1.add(datafram_2, fill_value = -1)","3f6f89e3":"array = np.arange(12.).reshape((3, 4))\n\narray","17f49889":"array - [0, 1, 2, 3]","e2c15615":"datafram = pd.DataFrame(np.arange(12.).reshape((4, 3)),\n                    columns=list('bde'),\n                    index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\ndatafram","ade07917":"series = pd.Series([0, 1, 2], index=['b', 'd', 'e'])\n\nseries","c596424d":"datafram - series","bcf69d29":"new_series = pd.Series(range(3), index=['b', 'e', 'f'])\n\nnew_series","528e4023":"datafram","53037a1c":"datafram - new_series","382340e8":"datafram","62d62f80":"new_series = datafram['d']\n\nnew_series","5bf14c28":"datafram.sub(new_series, axis = 0)","ca46a55e":"datafram - new_series","20149e53":"datafram = pd.DataFrame(np.arange(-5, 4).reshape(3, 3), columns=list('bde'),\n                        index=['Utah', 'Ohio', 'Texas'])\ndatafram","f57afc12":"np.abs(datafram)","1dc90daf":"datafram","d9940631":"func = lambda i : i.max() - i.min()\n\ndatafram.apply(func)","81f1115e":"datafram.apply(func, axis=1)","570c14f5":"datafram","d4ce5a49":"def func(col):\n    return pd.Series([col.min(), col.max()], index=['min', 'max'])\n\ndatafram.apply(func)","11fb3818":"datafram","20533ded":"formater = lambda x: '%.2f' % x\n\ndatafram.applymap(formater)","2ce1ffc1":"series = datafram['b']\n\nseries","124535f1":"series.map(formater)","f20b0cab":"datafram = pd.DataFrame(np.arange(-5, 4).reshape(3, 3), columns=list('dac'),\n                        index=['Utah', 'Ohio', 'Texas'])\ndatafram","c36f487e":"datafram.sort_index()","43f9f817":"datafram.sort_index(axis=1)","9beebfc5":"datafram.sort_index(axis=0)","5e4a6063":"datafram","957640ab":"datafram.sort_index(axis=1, ascending=False)","e56f9c5a":"series = pd.Series([4, 7, -3, 2])\n\nseries","cfb11dc2":"series.sort_values()","8edd6176":"datafram = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})\n\ndatafram","d36ca59e":"datafram.sort_values(by='b')","d0a43826":"datafram.sort_values(by=['a', 'b'])","403b22c9":"series = pd.Series(range(5), index=['a', 'a', 'b', 'b', 'c'])\n\nseries","ead1a4d2":"series.index.is_unique","c8a96b24":"series['a']","53eaaf54":"datafram = pd.DataFrame(np.random.randn(5, 3), index=['a', 'a', 'b', 'b','c'])\n\ndatafram","75241caf":"datafram.loc['a']","70bd9f2d":"datafram = pd.DataFrame([[1.5, np.nan], [7.0, -4.5],[np.nan, np.nan], [0.5, -1.5]],\n                        index=['a', 'b', 'c', 'd'],\n                        columns=['one', 'two'])\n\ndatafram","82f67de0":"datafram.sum()","1b7970cd":"datafram.sum(axis = 1)","1a4a66f0":"datafram.mean(axis=1, skipna=True)","e7c933e3":"datafram.mean(axis=1, skipna=False)","1eaa9acf":"datafram","d7d056b8":"datafram.idxmax()","f97e8977":"datafram.idxmax(axis=1)","ca5a35be":"datafram","7cf68bbf":"datafram.describe()","19338880":"series = pd.Series(['a', 'a', 'a', 'b', 'c'])\n\nseries","d35c884d":"series.describe()","cec87711":"datafram = pd.DataFrame({\"col_1\":[1, 2, 3], \n                         \"col_2\": ['a', 'b', 'a'], \n                         \"col_3\":[1.5, 2.5, 3.5]})\n\ndatafram","69f468b3":"datafram.describe()","a745660b":"data_dict = {\n    'Google': [1000, 1050, 2005, 2021],\n    'IBM': [500, 1020, 2000, 2000]\n}\n\nprice_datafram = pd.DataFrame(data_dict, index=['2022-02-11', '2022-02-12', '2022-02-13', '2022-02-14'])\n\nprice_datafram","47605885":"price_datafram['Google'].corr(price_datafram['Google'])","bd5e9a3e":"price_datafram['Google'].corr(price_datafram['IBM'])","3e1a42f6":"price_datafram['Google'].cov(price_datafram['Google'])","c160c398":"price_datafram['Google'].cov(price_datafram['IBM'])","e409490b":"price_datafram.corr()","44862f94":"price_datafram.cov()","0c8924d8":"price_datafram.corrwith(price_datafram['Google'])","2feda7a2":"series = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c'])\n\nseries","9ce870c4":"series.unique()","c0997f8e":"series.value_counts()","155ed8c5":"series.value_counts(ascending=True)","950f5d33":"series","1622f451":"series.isin(['a', 'b'])","2e6bbbe7":"series[series.isin(['a', 'b'])]","b1047548":"<hr \/>\n\nShould you have data contained in a Python dict, you can create a Series from it by passing the dict.","f6010a23":"<hr \/>\n\n### 1.3.1 Create Index\n\nYou can create index in pandas using `Index` method.","7d6388a5":"<hr \/>\n\nWe\u2019ll then perform some similar selections with integers using iloc.","22c87de5":"<hr \/>\n\nThe keys in the inner dicts are combined and sorted to form the index in the result. **This isn\u2019t true if an explicit index is specified**","56b5ae4f":"<hr \/>\n\n## 3.1 Correlation and Covariance\n\nSome summary statistics, like **correlation** and **covariance**, are computed from pairs of arguments. \nLet\u2019s consider example of DataFrame of stock prices.","6128bf12":"<hr \/>\n\nPassing axis='columns' or axis=1 sums across the columns instead.","e80e98d3":"<hr \/>\n\nSetting using these methods modifies the corresponding section of the Series.","315b8d66":"<hr \/>\n\n### 3.2.1 Unique Values\n\nThe first function is unique, which gives you an array of the unique values in a Series.","1b0fdb85":"<hr \/>\n\n## 1.2 DataFrame\n\nA DataFrame represents a rectangular table of data and contains an ordered collection of columns,<br>Each of\nwhich can be a different value type (numeric, string, boolean, etc.).\n\nThe DataFrame has both a row and column index; it can be thought of as a dict of Series all sharing the same\nindex. Under the hood, the data is stored as one or more two-dimensional blocks rather than a list, dict, or some\nother collection of one-dimensional arrays.\n\nThere are many ways to construct a DataFrame, though one of the most common is from a dict of equal-length\nlists or NumPy arrays:","a9536d47":"<hr \/>\n\nBy default, arithmetic between DataFrame and Series matches the index of the Series on the DataFrame\u2019s\ncolumns, broadcasting down the rows.","9babd637":"<hr \/>\n\nIf you specify a sequence of columns, the DataFrame\u2019s columns will be arranged in that order.","b1e3c22f":"<hr \/>\n\n## 2.2 Dropping Entries From An Axis\n\nDropping one or more entries from an axis is easy if you already have an index array or list without those\nentries.\n\nAs that can require a bit of munging and set logic, the `drop` method will return a new object with the indicated\nvalue or values deleted from an axis.","a00ac004":"<hr \/>\n\nColumns cannot be created or deleted with the **datafram.columnName** syntax.\n\n**Alert**\n\nThe column returned from indexing a DataFrame is a view on the underlying data, not a copy. Thus, any **in-place** modifications to the Series will be reflected in the DataFrame. The column can be explicitly copied with\nthe Series\u2019s `copy` method.","e574f230":"<hr \/>\n\nWhen sorting a DataFrame, you can use the data in one or more columns as the sort keys. To do so, pass one\nor more column names to the `by` option of `sort_values`.","d7583582":"<hr \/>\n\nThe `corr` method of Series computes the correlation of the overlapping, non-NA, aligned-by-index values in two\nSeries. Relatedly, `cov` computes the covariance.","0994c792":"<hr \/>\n\n**Note**\n\nMany functions, like `drop`, which modify the size or shape of a Series or DataFrame, can manipulate an object\nin-place without returning a new object.","b76072f6":"<hr \/>\n\n# 2. Essential Functionality\n\nThis section will walk you through the fundamental mechanics of interacting with the data contained in a Series\nor DataFrame.\n\n## 2.1 Reindexing\n\nAn important method on pandas objects is reindex, which means to create a new object with the data\nconformed to a new index.\n\n**Example**","8a6fef22":"<hr \/>\n\nThe data is sorted in ascending order by default, but can be sorted in descending order, too.","3e41a528":"<hr \/>\n\n### 3.2.3 Membership\n\n`isin` performs a vectorized set membership check and can be useful in filtering a dataset down to a subset of\nvalues in a Series or column in a DataFrame.","a7d1684e":"<hr \/>\n\nThe Series is sorted by value in descending order as a convenience. `value_counts` is also available as a top level pandas method that can be used with any array or sequence.","8fe171ec":"<hr \/>\n\nIndexing into a DataFrame is for retrieving one or more columns either with a single value or sequence.","5af4fc1b":"<hr \/>\n\nIf an index value is not found in either the DataFrame\u2019s columns or the Series\u2019s index, the objects will be\nreindexed to form the union.","34685415":"<hr \/>\n\nHere ['A', 'B'] is interpreted as a list of indices, even though it contains strings instead of integers.\n\nUsing **NumPy** functions or NumPy-like operations, such as filtering with a boolean array, scalar multiplication, or\napplying math functions, will preserve the index-value link.","c2b7c540":"<hr \/>\n\nUsing the `add` method on **datafram_1**, I pass **datafram_2** and an argument to `fill_value`.","2917a653":"<hr \/>\n\nYou can drop values from the columns by passing **axis=1** or **axis='columns'**.","fd5dff4c":"<hr \/>\n\n## 2.4 Integer Indexes\n\nWorking with pandas objects indexed by integers is something that often trips up new users due to some\ndifferences with indexing semantics on built-in Python data structures like lists and tuples. \n\nFor example, you might not expect the following code to generate an error.","58ee4ad9":"<hr \/>\n\n## 2.7 Sorting\n\nSorting a dataset by some criterion is another important built-in operation. To sort lexicographically by row or\ncolumn index, use the `sort_index` method, which returns a new, sorted object.","b4c7f080":"<hr \/>\n\nCalling DataFrame\u2019s sum method returns a Series containing column sums.","92ed1218":"<hr \/>\n\n**Note**\n\n* Attribute-like access (e.g., datafram.state) and tab completion of column names in IPython is provided as a\n  convenience.\n  \n* Dict-like access (e.g., datafram[column]) works for any column name, BUT datafram.column only works when the       column name is a valid Python variable name.\n\nNote that the returned Series have the same index as the DataFrame, and their name attribute has been\nappropriately set","eb58ee9a":"<hr \/>\n\nThe reason for the name applymap is that Series has a map method for applying an element-wise function.","7c4da063":"<hr \/>\n\nWith DataFrame, index values can be deleted from either axis. To illustrate this, we first create an example\nDataFrame.","b8135d6d":"<hr \/>\n\nLet's see behavior of `describe` method when apply on **DataFram** contain both numerical and categorical values.","0bbee7a1":"<hr \/>\n\nOften it will be desirable to create a Series with an index identifying each data point with a label.","ecd742c4":"<hr \/>\n\nRows can also be retrieved by position or name with the special `loc` attribute","338eda40":"<hr \/>\n\n### 2.5.2 Operations between DataFrame and Series\n\nAs with NumPy arrays of different dimensions, arithmetic between DataFrame and Series is also defined. First,\nas a motivating example, consider the difference between a two-dimensional array and one of its rows.","82531929":"<hr \/>\n\nAnother frequent operation is applying a function on one-dimensional arrays to each column or row.\nDataFrame\u2019s apply method does exactly this.","896c5c9b":"<hr \/>\n\nSince no value for `X` or `Z` was found, it appears as NaN (not a number), which is considered in pandas to mark missing or `NA` values. Since `F` was not included in series indecis, it is excluded from the resulting object.\n\nThe `isnull` and `notnull` functions in pandas should be used to detect missing data","190bdbea":"<hr \/>\n\nIf a DataFrame\u2019s index and columns have their name attributes set, these will also be displayed","07ab1a5d":"<hr \/>\n\nA Series\u2019s index can be altered in-place by assignment.","f23b7188":"<hr \/>\n\nNA values are excluded unless the entire slice (row or column in this case) is NA. This can be disabled with the\nskipna option.","e66761a9":"<hr \/>\n\nYou can transpose the DataFrame (swap rows and columns) with similar syntax to a NumPy array.","239ce341":"<hr \/>\n\nCalling drop with a sequence of labels will drop values from the **row labels (axis 0)**.","bd36eed7":"<hr \/>\n\n## 1.3 Index Objects\n\npandas\u2019s Index objects are responsible for holding the axis labels and other metadata (like the axis name or\nnames). Any array or other sequence of labels you use when constructing a **Series** or **DataFrame** is internally converted to an Index.","04b450fc":"<hr \/>\n\nThe string representation of a Series displayed interactively shows the index on the left and the values on the\nright.\n\nSince we did not specify an index for the data, a default one consisting of the integers 0 through N - 1 (where N\nis the length of the data) is created. You can get the array representation and index object of the Series via its\n`values` and `index` attributes, respectively:","4218d607":"<hr \/>\n\nWhen you are only passing a dict, the index in the resulting Series will have the dict\u2019s keys in sorted order. You\ncan override this by passing the dict keys in the order you want them to appear in the resulting Series.","b8950d70":"<hr \/>\n\nMany of the most common array statistics (like sum and mean) are DataFrame methods, so using apply is not\nnecessary.\n\nThe function passed to apply need not return a scalar value; it can also return a Series with multiple values.","6fa2c065":"<hr \/>\n\n### 2.5.1 Arithmetic methods with fill values\n\nIn arithmetic operations between differently indexed objects, you might want to fill with a special value,\nlike 0, when an axis label is found in one object but not the other.","1feb3c93":"<hr \/>\n\nWith DataFrame, reindex can alter either the (row) index, columns, or both. When passed only a sequence, it\nreindexes the rows in the result.","25f0abe8":"In this case, pandas could \u201cfall back\u201d on integer indexing, but it\u2019s difficult to do this in general without introducing subtle bugs. Here we have an index containing `0, 1, 2`, but inferring what the user wants (label-based indexing or position-based) is difficult.\n\nOn the other hand, with a non-integer index, there is no potential for ambiguity.","0af8c67d":"<hr \/>\n\nThe internal data alignment introduces missing values in the label locations that don\u2019t overlap. Missing values\nwill then propagate in further arithmetic computations.\n\nIn the case of DataFrame, alignment is performed on both the rows and the columns.","33035a9b":"## Please If you find this Notebook useful, Upvote it to help others see it \ud83d\ude42","e0bca21b":"<hr \/>\n\nIf you pass a column that isn\u2019t contained in the dict, it will appear with missing values in the result.","04bca7ac":"<hr \/>\n\nBoth indexing functions work with slices in addition to single labels or lists of labels.","b9b9b212":"<hr \/>\n\nCalling reindex on this Series rearranges the data according to the new index, introducing missing values if any\nindex values were not already present.","d041b1fc":"<hr \/>\n\nColumns can be modified by assignment.\n\nFor example, the empty 'test' column could be assigned a scalar value or an array of values.","929303df":"<hr \/>\n\nGet index of max value based on column or row.","1abd4f52":"<hr \/>\n\n## 2.3 Indexing, Selection, and Filtering\n\nSeries indexing (obj[...]) works analogously to NumPy array indexing, except you can use the Series\u2019s index\nvalues instead of only integers. Here are some examples of this.","7e1b5bd1":"<hr \/>\n\nAnother way to think about a Series is as a fixed-length, ordered dict, as it is a mapping of index values to data\nvalues. It can be used in many contexts where you might use a dict.","308c6cc3":"<hr \/>\n\n## 3.2 Unique Values, Value Counts, and Membership\n\nAnother class of related methods extracts information about the values contained in a one-dimensional Series.\n\nTo illustrate these, consider this example.","661288cb":"### 2.2.1 Selection with loc and iloc\n\nFor DataFrame label-indexing on the rows, I introduce the special indexing operators `loc` and `iloc`. They enable\nyou to select a subset of the rows and columns from a DataFrame with NumPy-like notation using either axis labels **(loc)** or integers **(iloc)**.\n\nAs a preliminary example, let\u2019s select a single row and multiple columns by label.","73f630ee":"<hr \/>\n\nTo keep things consistent, if you have an axis index containing integers, data selection will always be label-\noriented. For more precise handling, use loc (for labels) or iloc (for integers).\n\n<hr \/>\n\n## 2.5 Arithmetic and Data Alignment\n\nAn important pandas feature for some applications is the behavior of arithmetic between objects with different\nindexes. When you are adding together objects, if any index pairs are not the same, the respective index in the\nresult will be the union of the index pairs. For users with database experience, this is similar to an automatic\nouter join on the index labels.\n\n**Let\u2019s look at an example**","2e624f0b":"<hr \/>\n\nIf you want to instead broadcast over the columns, matching on the rows, you have to use one of the arithmetic\nmethods. \n\n**For example**","70de1d99":"<hr \/>\n\nAnother type of method is neither a reduction nor an accumulation. describe is one such example, producing\nmultiple summary statistics in one shot.","19e56d2c":"<hr \/>\n\n### 3.2.2 Values Counts\n\nThe unique values are not necessarily returned in sorted order, but could be sorted after the fact if needed\n`uniques.sort()`. Relatedly, `value_counts` computes a Series containing value frequencies.","ee59fb1c":"<hr \/>\n\nUsing DataFrame\u2019s `corrwith` method, you can compute pairwise correlations between a DataFrame\u2019s columns\nor rows with another Series or DataFrame. Passing a Series returns a Series with the correlation value\ncomputed for each column.","e1442667":"<hr \/>\n\nWhen you are assigning lists or arrays to a column, the value\u2019s length must match the length of the DataFrame.\n\nIf you assign a Series, its labels will be realigned exactly to the DataFrame\u2019s index, inserting missing values in\nany holes.","b6f71d3d":"<hr \/>\n\n**Note**\n\nA pandas Index can contain duplicate labels.","6b50411c":"<hr \/>\n\n## 2.8 Axis Indexes with Duplicate Labels\n\nUp until now all of the examples we\u2019ve looked at have had unique axis labels (index values).<br>While many\npandas functions (like reindex) require that the labels be unique, it\u2019s not mandatory. Let\u2019s consider a small\nSeries with duplicate indices.","7e771255":"<hr \/>\n\nElement-wise Python functions can be used, too. Suppose you wanted to compute a formatted string from each\nfloating-point value in **DataFrame**.\n\nYou can do this with `applymap`.","1d16243b":"<hr \/>\n\nOn non-numeric data, describe produces alternative summary statistics.","a2d81e88":"<hr \/>\n\nFor ordered data like time series, it may be desirable to do some interpolation or filling of values when\nreindexing. The method option allows us to do this, using a method such as `ffill`, which forward-fills the values and `bfill`  which backward-fills the values.","b547616f":"<hr \/>\n\nTo sort a Series by its values, use its `sort_values` method.","6fa98626":"<hr \/>\n\nYou can change row index when creating dataframe.","f2b006cd":"<hr \/>\n\nWith a DataFrame, you can sort by index on either axis.","287f8a43":"<hr \/>\n\nAs we see above the resulting DataFrame will have its index assigned automatically as with Series, and the\ncolumns are placed in sorted order.\n\nFor large DataFrames, the `head` method selects only the first **five** rows.","bdfeab41":"<hr \/>\n\n# 3. Summarizing and Computing Descriptive Statistics\n\npandas objects are equipped with a set of common mathematical and statistical methods. Most of these fall\ninto the category of reductions or summary statistics, methods that extract a single value (like the sum or mean)\nfrom a Series or a Series of values from the rows or columns of a DataFrame. Compared with the similar\nmethods found on NumPy arrays, they have built-in handling for missing data.\n\n**Example**","a22541e8":"<hr \/>\n\nData selection is one of the main things that behaves differently with duplicates. Indexing a label with multiple\nentries returns a Series, while single entries return a scalar value.","339e7adc":"<hr \/>\n\nData alignment features will be addressed in more detail later. If you have experience with databases, you can\nthink about this as being similar to a join operation. Both the Series object itself and its index have a name attribute, which integrates with other key areas of\npandas functionality.","a8017085":"<hr \/>\n\nA useful Series feature for many applications is that it automatically aligns by index label in arithmetic operations.","59f7af32":"<hr \/>\n\nAs with Series, the values attribute returns the data contained in the DataFrame as a two-dimensional ndarray.","d934d682":"<hr \/>\n\nA column in a DataFrame can be retrieved as a Series either by dict-like notation or by attribute.","cfe4ea12":"<hr \/>\n\nIndexing like this has a few special cases. First, slicing or selecting data with a boolean array.","5788d628":"<hr \/>\n\nAnother common form of data is a nested dict of dicts, If the nested dict is passed to the DataFrame, pandas\nwill interpret the outer dict keys as the columns and the inner keys as the row indices.","08172e72":"<hr \/>\n\n**Note**\n\nIndex objects are immutable and thus can\u2019t be modified by the user.","86dadaff":"<hr \/>\n\nSeries also has these as instance methods.","2d2d9544":"<hr \/>\n\nHere the function **func**, which computes the difference between the maximum and mini\u2010 mum of a Series, is\ninvoked once on each column in fram. The result is a Series hav\u2010 ing the columns of frame as its index.\n\nIf you pass `axis='columns'` to apply, the function will be invoked once per row instead.","759bab22":"<hr \/>\n\nThis can make your code more complicated, as the output type from indexing can vary based on whether a\nlabel is repeated or not.","215b7abc":"<hr \/>\n\n## 2.6 Function Application and Mapping\n\nNumPy ufuncs (element-wise array methods) also work with pandas objects.","4b38a5a8":"<hr \/>\n\nDataFrame\u2019s corr and cov methods, on the other hand, return a full correlation or covariance matrix as a\nDataFrame, respectively.","3f7325d3":"<hr \/>\n\nAssigning a column that doesn\u2019t exist will create a new column. The `del` keyword will delete columns as with a\ndict.","74a04b6f":"<hr \/>\n\nWhen we subtract **[0, 1, 2, 3]** from **array** , the subtraction is performed once for each row. This is referred to as broadcasting.\n\nOperations between a DataFrame and a Series are similar.","d92e427f":"<hr \/>\n\nCompared with NumPy arrays, you can use labels in the index when selecting single values or a set of values.","2bfee266":"<hr \/>\n\nThe columns can be reindexed with the columns keyword.","059edc86":"# Gentle Introduction To Pandas - Part 1\n\n<hr \/>\n\n![pandas](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/ed\/Pandas_logo.svg\/1200px-Pandas_logo.svg.png)\n\n<a src='https:\/\/en.wikipedia.org\/wiki\/Pandas_(software)'>image source<\/a>\n\n# Getting Started with pandas\n\npandas will be a major tool of data analysis feild. It contains data structures and data manipulation tools\ndesigned to make data cleaning and analysis fast and easy in Python.\n\npandas is often used in tandem with numerical computing tools like `NumPy` and `SciPy`, analytical libraries like `statsmodels` and `scikit-learn`, and data visualization libraries like `matplotlib`.\n\npandas adopts significant parts of NumPy\u2019s idiomatic style of array-based computing,especially array-based functions and a preference for data processing without for loops.\n\nWhile pandas adopts many coding idioms from NumPy, the biggest difference is that pandas is designed for\nworking with tabular or heterogeneous data. NumPy, by con\u2010trast, is best suited for working with homogeneous\nnumerical array data.\n\n# 1. Introduction to pandas Data Structures\n\nTo get started with pandas, you will need to get comfortable with its two workhorse data structures: **Series** and **DataFrame**. While they are not a universal solution for every problem, they provide a solid, easy-to-use basis\nfor most applications.\n\n## 1.1 Series\n\nA Series is a one-dimensional array-like object containing:\n\n* A sequence of values (of similar types to NumPy types).\n* An associated array of data labels, called its index.\n\nThe simplest Series is formed from only an array of data:"}}