{"cell_type":{"10f7dc37":"code","5e83940c":"code","1dd754b2":"code","71fcc22a":"code","b036ffe5":"code","3ec68b6f":"code","29536b70":"code","752da9d0":"code","113e2c1c":"code","727a3c9f":"code","ca19edf1":"code","152fd13e":"code","b5eee869":"code","264de368":"code","02b14837":"code","d401f4ac":"code","c5286dda":"markdown"},"source":{"10f7dc37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport missingno as msno\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e83940c":"df = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","1dd754b2":"df.head()","71fcc22a":"df.info()","b036ffe5":"df.corr()","3ec68b6f":"msno.matrix(df)","29536b70":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","752da9d0":"x = df.drop('Outcome' ,axis = 1)\ny = df.Outcome","113e2c1c":"x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)","727a3c9f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","ca19edf1":"lr = LogisticRegression()","152fd13e":"lr.fit(x_train, y_train)","b5eee869":"y_pred = lr.predict(x_test)","264de368":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","02b14837":"from sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy percentage =\",accuracy*100)","d401f4ac":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","c5286dda":"From the above, we found that there is no missing values in the data."}}