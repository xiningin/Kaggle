{"cell_type":{"7853fcd6":"code","b6f3bcc3":"code","67ef5080":"code","34212606":"code","23e42169":"code","610b0bce":"code","53af3091":"code","b70ad6f1":"code","47829df8":"code","bc42e32f":"code","a78f4221":"code","cf8a9a85":"code","5642ba8d":"code","67798585":"code","29b1f22d":"code","285c6b42":"code","0fd0f223":"code","3676e629":"code","be417c65":"code","14b7bf39":"code","ee29fb4c":"code","387b50e2":"code","80bdf808":"code","ef62a123":"code","5de3c5d0":"code","bdf1aaa1":"code","b0146f6e":"code","93e57fbb":"code","ef8e961b":"code","353e275d":"code","73b45d77":"code","2cbdd881":"markdown","2e7c1592":"markdown","7d4f9f03":"markdown","516cfeed":"markdown","824de3d2":"markdown","897b0fb0":"markdown","732f67f3":"markdown"},"source":{"7853fcd6":"import pandas as pd\nfrom datetime import datetime","b6f3bcc3":"df = pd.read_csv('\/kaggle\/input\/groceries-dataset\/Groceries_dataset.csv')","67ef5080":"df.head()","34212606":"df['Date'] = df['Date'].apply(lambda x : datetime.strptime(x, \"%d-%m-%Y\"))","23e42169":"first_date = df['Date'].describe()['first']","610b0bce":"df['timedelta'] = df['Date'].apply(lambda x : (x - first_date).days)","53af3091":"def id_maker(x):\n    return str(x[0]) + '-' + str(x[1])","b70ad6f1":"df['id'] = df[['Member_number', 'timedelta']].apply(id_maker, axis=1)","47829df8":"item_freq = df.itemDescription.value_counts()\nitem_freq = item_freq.reset_index()\nitem_freq = item_freq.rename(columns={'index' : 'item', 'itemDescription' : 'frequency'})\nitem_freq","bc42e32f":"df.drop(['Member_number', 'Date', 'timedelta'], axis=1, inplace=True)","a78f4221":"by_purchase = df.groupby('id')","cf8a9a85":"df.head()","5642ba8d":"gb = df.groupby('id')\ntransactions = gb.agg({'itemDescription' : lambda x : x.ravel().tolist()})\ntransactions","67798585":"item_freq","29b1f22d":"freq_dict = {}\ndef freq_counter(transaction):\n    for i in range(0, len(transaction)):\n        x = transaction[i]\n        for j in range(len(transaction) - 1, i, -1):\n            y = transaction[j]\n            x_id = item_freq[item_freq['item'] == x].index[0]\n            y_id = item_freq[item_freq['item'] == y].index[0]\n            sorted_ids = sorted([x_id, y_id])\n            pair_id = str(sorted_ids[0]) + '-' + str(sorted_ids[1])\n            dict_val = freq_dict.get(pair_id)\n            freq_dict.update({pair_id : 1 if dict_val is None else dict_val + 1})","285c6b42":"transactions['itemDescription'].apply(freq_counter)","0fd0f223":"freq_dict","3676e629":"n = 14963 #number of transactions\nsupport = {}\nfor key, value in freq_dict.items():\n    support.update({key : value\/n})","be417c65":"support","14b7bf39":"d = {}\ncount = 0\nfor k in support.keys():\n    items = k.split('-')\n    i1 = items[0]\n    i2 = items[1]\n    d_i1 = d.get(i1)\n    d_i2 = d.get(i2)\n    s = support.get(k)\n    if d_i1 is None:\n        d.update({i1 : {i2 : s}})\n    else:\n        d_i1.update({i2 : s})\n        d.update({i1 : d_i1})\n    if d_i2 is None:\n        d.update({i2 : {i1 : s}})\n    else:\n        d_i2.update({i1 : s})\n        d.update({i2: d_i2})","ee29fb4c":"d","387b50e2":"item = []\nsupps = []\nfor k, v in d.items():\n    item.append(k)\n    supps.append(v)","80bdf808":"supp_df = pd.DataFrame({'item' : item, 'support_dict' : supps})","ef62a123":"supp_df.head()","5de3c5d0":"def conf_calc(x):\n    conf_dict = {}\n    for k, v in x.items():\n        k_freq = item_freq.iloc[int(k)].frequency\/14963\n        conf = v\/k_freq\n        conf_dict.update({k : conf})\n    return conf_dict","bdf1aaa1":"supp_df['confidence_dict'] = supp_df['support_dict'].apply(conf_calc)","b0146f6e":"supp_df.confidence_dict","93e57fbb":"supp_df","ef8e961b":"def lift_calc(row):\n    lift_dict = {}\n    x = row[0]\n    x_freq = item_freq.iloc[int(x)].frequency\/14963\n    for k, v in row[1].items():\n        lift_dict.update({k : v\/x_freq})\n    return lift_dict","353e275d":"supp_df['lift_dict'] = supp_df[['item', 'confidence_dict']].apply(lift_calc, axis=1)","73b45d77":"supp_df.head()","2cbdd881":"Make support dataframe look nifty","2e7c1592":"Now we have all the statistics of any combination we want","7d4f9f03":"We have ~15k separate purchases based on the id (member number and date)","516cfeed":"Only 167 unique items... important for how I want to calculate frequencies later","824de3d2":"# Support","897b0fb0":"We will make a dictionary where keys are outputs of pairing function between id's of two items\nThe value for each pair's id is the amount of transactions both appear in. This is the freq(X,Y)","732f67f3":"Now for lift"}}