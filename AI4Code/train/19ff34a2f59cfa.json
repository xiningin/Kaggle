{"cell_type":{"3685241a":"code","28f9bbea":"code","578d0f50":"code","cd58c2ba":"code","9cb64436":"code","34374e2d":"code","31239fb7":"code","8911d124":"code","c6280c50":"code","6dfb3e39":"code","10ee2e69":"code","6a000755":"code","8ba00ee4":"code","2f4bfef7":"code","78cf39e1":"code","5571e718":"code","0af6ecd9":"code","d62534d1":"code","6cc6637e":"code","071b3774":"code","8997c155":"code","06719d0e":"code","ebb90483":"code","6ff5b44f":"code","800c75ad":"code","8b885f9e":"code","fcfafb94":"code","5eb359f8":"code","3b1419e5":"code","a321304f":"code","cc3f7593":"code","b03985c3":"code","7513be5e":"code","7cdc9c34":"code","794838c8":"code","eb87bff4":"code","410e014e":"code","4b5eaeea":"code","0ff32cc4":"code","e296d810":"code","30409215":"code","f435c2f8":"code","2e4312c5":"code","d0f189de":"code","a8721dcd":"code","b8b66a7c":"code","96b4bf92":"code","bfb3ecbe":"code","375211e8":"code","9b474148":"code","ece85007":"code","39305b67":"code","271fb26c":"code","16c4641e":"code","7d35f853":"code","fd968990":"code","ea591caa":"code","d914b71f":"markdown","24f9b5bb":"markdown","1bd9f539":"markdown","adcceddb":"markdown","5699e9f2":"markdown","9197f3cb":"markdown","540ef9fe":"markdown","d1107d53":"markdown","dd8fd4fb":"markdown","12b3f114":"markdown","e6c361c5":"markdown","2d8b77df":"markdown","84ab85de":"markdown","6d13f3ff":"markdown","9cefa8ea":"markdown","737cc9ac":"markdown","76fdd1f9":"markdown","5ec0da52":"markdown","6d19bb34":"markdown","da0d7286":"markdown","400b4fac":"markdown","28b79afc":"markdown","f9198b26":"markdown","3d0f4968":"markdown","935b0f49":"markdown","aa0f6c56":"markdown","430be001":"markdown","f34a012a":"markdown","27c8d3c0":"markdown","2ba730b4":"markdown","bbfb78b8":"markdown","f89e4a1b":"markdown","b45156cc":"markdown","4e7c9332":"markdown","92aa271e":"markdown","ddae08d1":"markdown","5f1b84b8":"markdown","50040343":"markdown"},"source":{"3685241a":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nstyle.use('ggplot')\n","28f9bbea":"df = pd.read_csv(\"..\/input\/heart-disease-uci\/\/heart.csv\") # data loading into dataframe","578d0f50":"df.head()","cd58c2ba":"df.isna().sum() # output of this  indicate that there is no missing values in any column","9cb64436":"cols = df.columns\ncols","34374e2d":"max_age = max(df['age'])\nmin_age = min(df['age'])\nprint(f\"Max age {max_age}, min age {min_age}\")","31239fb7":"plt.figure(figsize = (12,6))\nage_count = dict(df['age'].value_counts())\nplt.bar(age_count.keys(),age_count.values(),width = 0.5)\nplt.xticks(ticks=[i for i in range(min_age-1,max_age+1)])\nplt.title(\"Age frequency plot\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.show()\n","8911d124":"plt.figure(figsize = (5,5))\nsex_count = dict(df['sex'].value_counts())\nplt.bar(sex_count.keys(),sex_count.values(),width = 0.5)\nplt.xticks([0,1],(\"Female(0)\",\"Male(1)\"))\nplt.xlabel(\"Sex\")\nplt.ylabel(\"Frequency\")\nplt.show()","c6280c50":"plt.figure(figsize = (5,5))\ncount = dict(df['cp'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.5)\nplt.xticks([0,1,2,3],(\"typical angina\",\"Atypical angina\",\"Non-anginal pain\",\"Asymtomatic\"),rotation=45)\nplt.title(\"Chest pain frequency plot\")\nplt.xlabel(\"Chest pain type\")\nplt.ylabel(\"Frequency\")\nplt.show()","6dfb3e39":"plt.figure(figsize = (10,8))\ncount = dict(df['trestbps'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.7)\n#plt.xticks(ticks=[i for i in range(min(df['trestbps'])-1,max(df['trestbps'])+1)])\nplt.title(\"resting blood pressure frequency plot\")\nplt.xlabel(\"resting blood pressure in mm\")\nplt.ylabel(\"Frequency\")\nplt.show()","10ee2e69":"plt.figure(figsize = (8,5))\ncount = dict(df['chol'].value_counts())\nplt.bar(count.keys(),count.values(),width = 1,color='red')\n#plt.xticks(ticks=[i for i in range(min(df['trestbps'])-1,max(df['trestbps'])+1)])\nplt.title(\"serum cholestoral in mg\/dl plot\")\nplt.xlabel(\"serum cholestoral in mg\/dl\")\nplt.ylabel(\"Frequency\")\nplt.show()","6a000755":"plt.figure(figsize = (5,5))\ncount = dict(df['fbs'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.6)\nplt.xticks([0,1],(\"False(0)\",\"True(1)\"))\nplt.title(\"Fasting blood sugar plot\")\nplt.xlabel(\"Fasting blood sugar > 120 mg\/dl\")\nplt.ylabel(\"Frequency\")\nplt.show()","8ba00ee4":"plt.figure(figsize = (5,5))\ncount = dict(df['restecg'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.6)\nplt.xticks([0,1,2])\nplt.title(\"Resting electrocardiographic results plot\")\nplt.xlabel(\"Resting electrocardiographic value\")\nplt.ylabel(\"Frequency\")\nplt.show()","2f4bfef7":"plt.figure(figsize = (32,10))\ncount = dict(df['thalach'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.6)\nplt.xticks(ticks= list(count.keys()),rotation=90)\nplt.title(\"Maximum heart rate achieved plot\")\nplt.xlabel(\"Maximum heart rate achieved\")\nplt.ylabel(\"Frequency\")\nplt.show()","78cf39e1":"sns.distplot(df['thalach'])\nplt.show()","5571e718":"plt.figure(figsize = (5,5))\ncount = dict(df['exang'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.6)\nplt.xticks(ticks= list(count.keys()),labels=[\"NO(0)\",\"YES(1)\"])\nplt.title(\"Exercise induced angina plot\")\nplt.xlabel(\"Exercise induced angina\")\nplt.ylabel(\"Frequency\")\nplt.show()","0af6ecd9":"plt.figure(figsize = (20,8))\ncount = dict(df['oldpeak'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.08)\nplt.xticks(ticks= list(count.keys()))\nplt.title(\"ST depression induced by exercise plot\")\nplt.xlabel(\"ST depression induced by exercise relative to rest\")\nplt.ylabel(\"Frequency\")\nplt.show()","d62534d1":"sns.distplot(df['oldpeak'])\nplt.show()","6cc6637e":"plt.figure(figsize = (5,5))\ncount = dict(df['slope'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.8)\nplt.xticks(ticks= list(count.keys()))\nplt.title(\"The slope of the peak exercise plot\")\nplt.xlabel(\"The slope of the peak exercise ST segment\")\nplt.ylabel(\"Frequency\")\nplt.show()","071b3774":"plt.figure(figsize = (5,5))\ncount = dict(df['ca'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.8)\nplt.xticks(ticks= list(count.keys()))\nplt.title(\"Number of major vessels frequency plot\")\nplt.xlabel(\"Number of major vessels (0-3) colored by flourosopy\")\nplt.ylabel(\"Frequency\")\nplt.show()","8997c155":"plt.figure(figsize = (5,5))\ncount = dict(df['thal'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.8)\nplt.xticks(ticks= list(count.keys()))\nplt.title(\"Thal plot\")\nplt.xlabel(\"Thal\")\nplt.ylabel(\"Frequency\")\nplt.show()","06719d0e":"plt.figure(figsize = (5,5))\ncount = dict(df['target'].value_counts())\nplt.bar(count.keys(),count.values(),width = 0.8)\nplt.xticks(ticks= list(count.keys()))\nplt.title(\"Target plot\")\nplt.xlabel(\"Target\")\nplt.ylabel(\"Frequency\")\nplt.show()","ebb90483":"corr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm')","6ff5b44f":"tar1_df = df[df['target']==1]\ntar0_df = df[df['target']==0]","800c75ad":"print(\"No. of samples where target==1 (Yes heart disease):\",len(tar1_df))\nprint(\"No. of samples where target==0 (No heart disease):\",len(tar0_df))","8b885f9e":"total1 = sum(list(tar1_df['age'].value_counts())) # target == 1 \ntotal0 = sum(list(tar0_df['age'].value_counts())) # target == 0\n\nprint(f\"Target 1: {total1} | Target 0: {total0}\")\n\n","fcfafb94":"d = dict(tar1_df['age'].value_counts())\nplt.figure(figsize=(13,7))\nplt.bar(x =list(d.keys()),height = list(d.values()))\nplt.xticks(list(d.keys()))\nplt.xlabel(\"Age\")\nplt.ylabel(\"#people\")\nplt.title(\"Target=1 vs Age\")\nplt.show()","5eb359f8":"d = dict(tar0_df['age'].value_counts())\nplt.figure(figsize=(13,7))\nplt.bar(x =list(d.keys()),height = list(d.values()))\nplt.xticks(list(d.keys()))\nplt.xlabel(\"Age\")\nplt.ylabel(\"#people\")\nplt.title(\"Target=0 vs Age\")\nplt.show()","3b1419e5":"tar1_df['sex'].value_counts() # target == 1 , male = 1 and female = 0","a321304f":"tar0_df['sex'].value_counts() # target == 0  , male = 1 and female = 0","cc3f7593":"male = tar1_df['sex'].value_counts()[1]\nfemale = tar1_df['sex'].value_counts()[0]\n\nprint(f'No. of male with heart diease:{male}\\nNo. of with female heart disease:{female}\\n')\n\nprint(f'% of male with heart disease = {round(male\/(male+female)*100,2)} %')\n\nprint(f'% of female with heart disease = {round(female\/(male+female)*100,2)} %')\n","b03985c3":"male = tar0_df['sex'].value_counts()[1]\nfemale = tar0_df['sex'].value_counts()[0]\n\nprint(f'No. of male with no heart diease:{male}\\nNo. of with female no heart disease:{female}\\n')\n\nprint(f'% of male with no heart disease = {round(male\/(male+female)*100,2)} %')\n\nprint(f'% of female with no heart disease = {round(female\/(male+female)*100,2)} %')","7513be5e":"d1 = dict(tar1_df[\"cp\"].value_counts().sort_index())\nd0 = dict(tar0_df[\"cp\"].value_counts().sort_index())\nplt.figure(1)\nplt.subplot(121)\nplt.bar(np.array(list(d1.keys())), np.array(list(d1.values())))\nplt.xlabel(\"Chest pain type\")\nplt.title(\"Target=1\")\nplt.subplot(122)\nplt.bar(np.array(list(d0.keys())), np.array(list(d0.values())))\nplt.xlabel(\"Chest pain type\")\nplt.title(\"Target=0\")\nplt.show()\n","7cdc9c34":"for key in d1:\n    print(f\"Chest pain of type {key} for target 1 is {round((d1[key]\/sum(list(d1.values())))*100,2)} %\")\n    print(f\"Chest pain of type {key} for target 0 is {round((d1[key]\/sum(list(d0.values())))*100,2)} %\")\n    print(\"--------------------------------------------------------------------------------------------------------------------\")","794838c8":"from sklearn.model_selection import train_test_split","eb87bff4":"random_state = 42\ntest_size = 0.2\nshuffle = True","410e014e":"X = df[cols[:-1]].values\nY = df[cols[-1]].values\n\nX_train, X_test,y_train, y_test = train_test_split(X, Y,\n                                                   test_size = test_size,\n                                                   shuffle = shuffle,\n                                                   random_state = random_state)\n\n#y_train = y_train.reshape((y_train.shape[0],1))\n#y_test = y_test.reshape((y_test.shape[0],1))\n\nprint(f\"Training X shape : {X_train.shape}\")\nprint(f\"Training y shape : {y_train.shape} \\n\")\nprint(f\"Testing X shape : {X_test.shape}\")\nprint(f\"Testing y shape : {y_test.shape}\")","4b5eaeea":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV ","0ff32cc4":"from sklearn.linear_model import LogisticRegression \n","e296d810":"max_iter =100","30409215":"logReg_clf = LogisticRegression(tol = 0.0001,\n                                C = 1.0,\n                                random_state = random_state,\n                                solver = 'lbfgs',\n                                max_iter = max_iter,\n                                verbose = 0,\n                                n_jobs = 5)\n\n# training\nlogReg_clf.fit(X_train, y_train)\n\n#testing\ny_pred = logReg_clf.predict(X_test)\n\nscore = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of logistic regression classifier is\",score*100,\"%\")\n","f435c2f8":"from sklearn import svm","2e4312c5":"# defining parameter range \nparam_grid = {'C': [0.1, 1, 10, 100, 1000],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['rbf']}  \n  \ngrid1 = GridSearchCV(svm.SVC(random_state = random_state),\n                    param_grid,\n                    refit = True,\n                    verbose = 3) \n  \n# fitting the model for grid\ngrid1.fit(X_train, y_train)","d0f189de":"# print best parameter after tuning \nprint(grid1.best_params_) \n  \n# print how our model looks after hyper-parameter tuning \nprint(grid1.best_estimator_) ","a8721dcd":"#testing\ny_pred = grid1.predict(X_test)\n\nscore = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of SVM classifier is\",score*100,\"%\")","b8b66a7c":"from xgboost import XGBClassifier","96b4bf92":"param_grid = {'n_estimator': [10, 100, 1000, 2000, 3000],  \n              'gamma': [50, 25, 12, 10, 5, 1], \n              'max_depth': [4,5,6,7,8,9,10]} ","bfb3ecbe":" \nxgb_clf = XGBClassifier(scale_pos_weight=1,\n                          learning_rate=0.001,  \n                          colsample_bytree = 0.4,\n                          subsample = 0.2,\n                          objective='binary:logistic', \n                          n_estimators=1500, \n                          reg_alpha = 0.3,\n                          max_depth=5, \n                          gamma= 5,\n                          random_state = random_state,\n                       )\nxgb_clf.fit(X_train, y_train)","375211e8":"#testing\ny_pred = xgb_clf.predict(X_test)\n\nscore = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of XGBOOST classifier is\",score*100,\"%\")","9b474148":"param_grid = {'n_estimator': [10, 100, 1000, 2000, 3000],  \n              'gamma': [50, 25, 12, 10, 5, 1],\n              'learning_rate':[0.1,0.01,0.001,0.0001]}\n              #'max_depth': [4,5,6,7,8,9,10]} \n\ngrid2 = GridSearchCV(XGBClassifier( max_depth = 4,\n                                    random_state = random_state),\n                    param_grid,\n                    refit = True,\n                    verbose = 3) \n  \n# fitting the model for grid\ngrid2.fit(X_train, y_train)","ece85007":"# print best parameter after tuning \nprint(grid2.best_params_) \n  \n# print how our model looks after hyper-parameter tuning \nprint(grid2.best_estimator_) ","39305b67":"#testing\ny_pred = grid2.predict(X_test)\n\nscore = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of XGBOOST classifier is\",score*100,\"%\")","271fb26c":"from sklearn.preprocessing import StandardScaler\nfrom keras.utils import to_categorical\nfrom keras.callbacks.callbacks import ModelCheckpoint\nfrom keras.models import Sequential,load_model\nfrom keras.layers import Dense\n","16c4641e":"scaler = StandardScaler()\n\nscaler = scaler.fit(X_train)\n\nX_trainS = scaler.transform(X_train)\nX_testS = scaler.transform(X_test)\n\ny_train = to_categorical(y_train, num_classes = 2)","7d35f853":"\n# Neural network\nmodel = Sequential()\nmodel.add(Dense(80, input_dim = X_train.shape[1], activation = \"relu\"))\nmodel.add(Dense(50, activation = \"relu\"))\nmodel.add(Dense(2, activation = \"softmax\"))\nmodel.compile(loss ='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n\n# best model file path\nfilepath = \"..\/working\/nn.pkl\"\n\n# callback \nCallback = [ModelCheckpoint(filepath = filepath,\n                          monitor = 'val_loss',\n                          verbose=1,\n                          save_best_only = True,\n                          save_weights_only=False,\n                          mode='auto', period=1)]\n## \nepochs = 120\nbatch_size = 64\n\n\n# training model\nhistory = model.fit(X_trainS, y_train,\n                    epochs = epochs,\n                    batch_size = batch_size,\n                    validation_split=0.1,\n                    callbacks = Callback)\n\n\n","fd968990":"# plotting  accuracy and losses\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = [*range(epochs)]\n\nplt.plot(epochs,acc, label = \"train_acc\")\nplt.plot(epochs,val_acc, label = \"val_acc\")\nplt.legend()\n\nplt.show()\nplt.plot(epochs,loss, label = \"train_loss\")\nplt.plot(epochs,val_loss, label = \"test_loss\")\nplt.legend()\nplt.show()\n","ea591caa":"model = load_model(filepath)\n\ny_pred = np.argmax(model.predict(X_testS),axis=1)\n\nprint(f\"Accuracy of nn is: {accuracy_score(y_pred, y_test)*100}%\")","d914b71f":"# Correlation map","24f9b5bb":"# Support Vector Machine","1bd9f539":"## AGE","adcceddb":"# Logistic Regression","5699e9f2":"## Chest pain ","9197f3cb":"## Chest pain *vs* Target","540ef9fe":"## Thal","d1107d53":"# Neural network","dd8fd4fb":"## SEX","12b3f114":"3 = normal; 6 = fixed defect; 7 = reversable defect","e6c361c5":"## Resting blood pressure","2d8b77df":"* No two features are highly correlated","84ab85de":"<h1> Heart Diease <\/h1>","6d13f3ff":"## Fasting blood sugar","9cefa8ea":"## Number of major vessels","737cc9ac":"Resting electrocardiographic results\n* Value 0: normal\n* Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n* Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria","76fdd1f9":"* Value 1: typical angina\n* Value 2: atypical angina\n* Value 3: non-anginal pain\n* Value 4: asymptomatic","5ec0da52":"## Target, age","6d19bb34":"## Target","da0d7286":"# XGBOOST","400b4fac":"* As we can see there is no major difference to have a heart disease but majorly we can say CP type 2 is 50 % times fatal ","28b79afc":"## Columns","f9198b26":"* No.of males samples in data is more than female.\n* We cannot conclude that men has more chances of getting heart diease than women since it is just a frequency plot which means suppose more females were tested more samples would have there.\n","3d0f4968":"* Chest pain of type 0 is more than any other type","935b0f49":"## Slope of the peak exercise ST segment","aa0f6c56":"\n* Age 55 yrs has highest frequency \n* Age 29,74,76,77 has lowest frequency\n* Seems to be a bimodal case","430be001":"## ST depression induced by exercise relative to rest","f34a012a":"# Targetwise Analysis","27c8d3c0":"![image](https:\/\/miro.medium.com\/max\/4800\/1*ooqlgirGtghlYIw0ujnBkA.jpeg)","2ba730b4":"## Exercise induced angina","bbfb78b8":"## Target *vs* sex","f89e4a1b":"# Train,test data preparation","b45156cc":"## Maximum heart rate achieved","4e7c9332":"## Serum cholestoral","92aa271e":"The slope of the peak exercise ST segment\n* Value 1: upsloping\n* Value 2: flat\n* Value 3: downsloping","ddae08d1":"# Columnwise Analysis","5f1b84b8":"## Resting electrocardiographic results","50040343":"* age\n* sex\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by flourosopy\n* thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"}}