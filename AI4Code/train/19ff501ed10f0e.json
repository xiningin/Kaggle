{"cell_type":{"50353fe0":"code","189c1933":"code","26d108dd":"code","ec5d3ffc":"code","fa93f399":"code","cf6e0fbf":"code","38d0665f":"code","5097c451":"code","a05603b5":"code","d685cc29":"code","fcc608b5":"code","d9454d52":"code","9e07d606":"code","fdb764b9":"code","068d51c6":"code","a0cb65de":"code","5544eb78":"code","e4e1fe40":"code","9fed4909":"code","9abbfb01":"code","3424ca4d":"code","86073bff":"code","66ba5bc0":"code","1738b14a":"code","52826877":"code","65f6d612":"code","5c873ca9":"code","b702aeec":"markdown","ee105c91":"markdown","0cbcd731":"markdown","cea45296":"markdown","67ff7b9b":"markdown","564b1d66":"markdown","38d75f69":"markdown","1418230c":"markdown","8f3a3016":"markdown","b0314091":"markdown","996a63ae":"markdown","04d3a10f":"markdown"},"source":{"50353fe0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","189c1933":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId=test_df['PassengerId']","26d108dd":"train_df.columns #to see the columns of the train dataframe","ec5d3ffc":"train_df.head() #to see the first 5 lines of the train dataframe","fa93f399":"train_df.describe() #to see numerical values","cf6e0fbf":"train_df.info()","38d0665f":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n   \n    var = train_df[variable]  # get feature\n    varValue = var.value_counts()  # count number of categorical variable(value\/sample)\n    \n    # visualize\n    plt.figure(figsize = (8,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","5097c451":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)\n","a05603b5":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","d685cc29":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","fcc608b5":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","d9454d52":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","9e07d606":"# Sex - Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","fdb764b9":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","068d51c6":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","a0cb65de":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] > Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","5544eb78":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","e4e1fe40":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","9fed4909":"train_df.head()","9abbfb01":"train_df.columns[train_df.isnull().any()]","3424ca4d":"train_df.isnull().sum()","86073bff":"train_df[train_df[\"Embarked\"].isnull()]","66ba5bc0":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","1738b14a":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","52826877":"train_df[train_df[\"Fare\"].isnull()]","65f6d612":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","5c873ca9":"train_df[train_df[\"Fare\"].isnull()]","b702aeec":"<a id = '4'><\/a>\n## Categorical Variable","ee105c91":"* float64(2) : Fare and Age\n* int64(5) : Pclass, Sibsp,Parch, PassengerId and Survived\n* object(5) : Cabin, Embarked, Ticked, Name and Sex","0cbcd731":"<a id = '9'><\/a>\n## Find Missing Value","cea45296":"# Introduction\nTitanic accident is a sad accident everyone knows. In 1912, during her voyagew, the Titanic sank after colliding with an iceberg, killing 1513 out of 2340.\n\n<font color = 'blue'>\n      \nContent:\n1. [Look and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Veaiable Analysis](#4)\n        * [Numerical Variable Analysis](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)    \n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)","67ff7b9b":"<a id = '1'><\/a>\n\n### Look and Check Data\n","564b1d66":"<a id = '3'><\/a>\n## Univariate Variable Analysis\n* Categorical Variable : Survived, Sex, Pclass , Embarked, Cabin, Name, Ticked, Sibsp and Parch\n* Numerical Variable : Age, PassengerId, Fare","38d75f69":"<a id = '8'><\/a>\n## Missing Value\n * Find Missing Value\n * Fill Missing Value","1418230c":"<a id = '2'><\/a>\n### Veriable Description\n1.  PassengerId : unique \u0131d number to each passenger\n2.  Survived : passenger survive(1) or died(0)\n3.  Pclass : passenger class\n4.  Name\n5.  Sex : gender of passenger\n6.  Age : age of passenger\n7.  SibSp : number of siblings\/spouses\n8.  Parch : number of parent\/children\n9.  Ticket : ticket number\n10. Fare : amount of money spent on ticket\n11. Cabin : cabin category\n12. Embarked : port where passenger embarked (C = Cherbourg , Q = Queenstown, S = Southampton)\n      ","8f3a3016":"<a id = '6'><\/a>\n## Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","b0314091":"<a id = '7'><\/a>\n## Outlier Detection","996a63ae":"<a id = '5'><\/a>\n## Numerical Variable ","04d3a10f":"<a id = '10'><\/a>\n## Fill Missing Value"}}