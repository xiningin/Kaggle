{"cell_type":{"df717a20":"code","e8e532dd":"code","5066a5f7":"code","dda2cf9e":"code","0fc3464f":"code","cb17d797":"code","cbf105ec":"code","ab9b7f12":"code","0b523aa9":"code","98e0e97f":"code","b8ac4fe7":"code","041204f5":"code","b7da9718":"code","a68590f2":"code","425d8764":"code","8bd2a3d0":"code","7f55bbd1":"code","5896176d":"code","c19d9f31":"code","16b595a8":"code","c88d318e":"code","a07b2cf8":"code","7dc1b434":"code","28af40dc":"code","939e0828":"code","a10f09ad":"code","ca934b2e":"code","ade0ffe9":"code","36f08736":"markdown","672ba375":"markdown","5faec6de":"markdown"},"source":{"df717a20":"\nimport pandas as pd\nimport numpy as np\nimport os\nimport keras\nimport matplotlib.pyplot as plt\nfrom keras.layers import Dense,GlobalAveragePooling2D\nfrom keras.applications import MobileNet\nfrom keras.preprocessing import image\nfrom keras.applications.mobilenet import preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom keras.optimizers import Adam\n\n\nfrom keras.preprocessing.image import img_to_array\nimport random\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D,BatchNormalization\nfrom keras.layers import MaxPooling2D,Dropout\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nimport cv2\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport math\nfrom keras.preprocessing.image import ImageDataGenerator\n\n","e8e532dd":"\nbase_model=MobileNet(weights='imagenet',include_top=False, input_shape=(128, 128, 3))\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) \nx=Dense(512,activation='relu')(x) \npreds=Dense(20,activation='softmax')(x)","5066a5f7":"model=Model(inputs=base_model.input,outputs=preds)\nmodel.summary()","dda2cf9e":"for layer in model.layers[:-7]:\n    layer.trainable=False\nfor layer in model.layers[-7:]:\n    layer.trainable=True","0fc3464f":"model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","cb17d797":"ls ..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/","cbf105ec":"ls ..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/","ab9b7f12":"\ndata = []\nimagePaths = sorted(list(os.listdir(\"..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\")))\ndim = (128, 128)\n\nfor img in imagePaths:\n    image = cv2.imread(\"..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\" + img)\n    image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)\n    image = img_to_array(image)\n    data.append(image)\n\n\"\"\"\nimagePaths = sorted(list(os.listdir(\"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\")))\nfor img in imagePaths:\n    image = cv2.imread(\"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\" + img)\n    image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)\n    image = img_to_array(image)\n    data.append(image)\n\"\"\"\n\ndata = np.array(data, dtype=\"float32\") \/ 255.0\n","0b523aa9":"data.shape","98e0e97f":"# !ls ..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/ImageSets\/Main\/","b8ac4fe7":"object_list = sorted(['person', 'bird', 'cat', 'cow', 'dog', 'horse', 'sheep', 'aeroplane',\n                      'bicycle', 'boat', 'bus', 'car', 'motorbike', 'train', 'bottle',\n                      'chair', 'diningtable', 'pottedplant', 'sofa', 'tvmonitor'])\nprint(len(object_list))\n\nDF = pd.read_csv(\"..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/ImageSets\/Main\/trainval.txt\", header = None, sep=\"\\n\",engine='python', dtype=str, names =['img_ID'])\n\nDF2 = pd.read_csv(\"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/ImageSets\/Main\/test.txt\", header = None, sep=\"\\n\",engine='python', dtype=str, names =['img_ID'])\n\nDF = DF.append(DF2, ignore_index=True)\n\nfor obj in object_list:\n\n    filename = \"..\/input\/voctrainval_06-nov-2007\/VOCdevkit\/VOC2007\/ImageSets\/Main\/\" + obj + \"_trainval.txt\"\n    # https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html\n    # https:\/\/www.w3schools.com\/python\/python_regex.asp\n    df = pd.read_csv(filename, header = None, sep=r\"\\s*\",engine='python', dtype=str, names=['img_ID', obj])\n    \n    filename = \"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/ImageSets\/Main\/\" + obj + \"_test.txt\"\n    # https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html\n    # https:\/\/www.w3schools.com\/python\/python_regex.asp\n    df2 = pd.read_csv(filename, header = None, sep=r\"\\s*\",engine='python', dtype=str, names=['img_ID', obj])\n    \n    df = df.append(df2, ignore_index=True)\n    df[obj] = df[obj].astype(int)\n    df[obj][df[obj]<0] = 0\n    # df.dtypes\n    # df.head()\n    DF = pd.merge(DF, df, on='img_ID')\n\nDF.head(10)\n\n","041204f5":"\nlabels = []\nfor i in range(len(DF)):\n    labels.append(list(DF.iloc[i][1:]))\n\nlabels = np.array(labels)\n\nl = labels[0:5011]\n","b7da9718":"l.shape","a68590f2":"data.shape","425d8764":"plt.imshow(data[0])\nplt.show()","8bd2a3d0":"\nmodel.fit(data, l, epochs=15, validation_split=0.1, batch_size=50)\n","7f55bbd1":"\ntest_data = []\nimagePaths = sorted(list(os.listdir(\"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\")))\ndim = (128,128)\n\nfor img in imagePaths:\n    image = cv2.imread(\"..\/input\/voctest_06-nov-2007\/VOCdevkit\/VOC2007\/JPEGImages\/\" + img)\n    image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)\n    image = img_to_array(image)\n    test_data.append(image)\n    \n\ntest_data = np.array(test_data, dtype=\"float32\") \/ 255.0\ntest_y = labels[5011:]\n","5896176d":"\npred_l = model.predict(test_data, batch_size=None, verbose=0)\n\ntol = 0.5\npred_label = (pred_l > tol) * 1\n\nprint(pred_label[1])\nprint(test_y[1])\n","c19d9f31":"\ntotal = 0\naccurate = 0\naccurate_index = []\nwrong_index = []\n\nfor i in range(len(pred_label)):\n    if (pred_label[i] == test_y[i]).all():\n        accurate += 1\n        accurate_index.append(i)\n    else:\n        wrong_index.append(i)\n        \n    total += 1\n    \n    \nprint('Total test data;', total, '\\taccurately predicted data:', accurate, '\\t wrongly predicted data: ', total - accurate)\nprint('Accuracy:', round(accurate\/total*100, 3), '%')\n","16b595a8":"\nimport math\n\ntotal = 0\ncosine_num = 0\ncosine_den = 0\ncosine = 0\n\nfor i in range(len(pred_label)):\n    \n    cosine_num = np.vdot(pred_label[i], test_y[i])\n    cosine_den = math.sqrt(sum(pred_label[i])) * math.sqrt(sum(test_y[i]))\n    \n    if cosine_den:\n        cosine = cosine + (cosine_num\/ cosine_den)\n    \n    \n    \n    total += 1\n    \nprint('Avg Cosine Similarity:', round(cosine\/total, 3))\n","c88d318e":"\nobject_list = sorted(['person', 'bird', 'cat', 'cow', 'dog', 'horse', 'sheep', 'aeroplane',\n                      'bicycle', 'boat', 'bus', 'car', 'motorbike', 'train', 'bottle',\n                      'chair', 'diningtable', 'pottedplant', 'sofa', 'tvmonitor'])\n\nim_idx = random.sample(accurate_index, k=9)\nobject_np_array = np.array(object_list)\n\nnrows = 3\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(15, 12))\n\nn = 0\nfor row in range(nrows):\n    for col in range(ncols):\n            ax[row,col].imshow(test_data[im_idx[n]])\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(tuple(object_np_array[pred_label[im_idx[n]]==1]), tuple(object_np_array[test_y[im_idx[n]]==1])))\n            n += 1\n\nplt.show()\n\n","a07b2cf8":"\n\nim_idx = random.sample(wrong_index, k=9)\n\nnrows = 3\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(15, 12))\n\nn = 0\nfor row in range(nrows):\n    for col in range(ncols):\n            ax[row,col].imshow(test_data[im_idx[n]])\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(tuple(object_np_array[pred_label[im_idx[n]]==1]), tuple(object_np_array[test_y[im_idx[n]]==1])))\n            n += 1\n\nplt.show()\n\n","7dc1b434":"\n(x_train,x_test,y_train,y_test)=train_test_split(data,l,test_size=0.1,shuffle=False)\nprint(x_train.shape, x_test.shape)\n","28af40dc":"train_datagen = ImageDataGenerator(zoom_range = 0.2, horizontal_flip=True, shear_range=0.2)\n\nbatch_size = 50\nmodel.fit_generator(train_datagen.flow(x_train,y_train,batch_size=batch_size),\n                    steps_per_epoch=math.ceil(len(x_train)\/batch_size), epochs = 15, validation_data=(x_test, y_test))","939e0828":"model.save('CNN_pascal_imagegenerator_5epoch.h5')","a10f09ad":"pred_l_gn = model.predict(test_data)\n\ntol = 0.5\npred_label_gn = (pred_l_gn > tol) * 1\n\nprint(pred_label_gn[1])\nprint(test_y[1])\n\ntotal = 0\naccurate = 0\naccurate_index = []\nwrong_index = []\n\nfor i in range(len(pred_label)):\n    if (pred_label_gn[i] == test_y[i]).all():\n        accurate += 1\n        accurate_index.append(i)\n    else:\n        wrong_index.append(i)\n        \n    total += 1\n    \n    \nprint('Total test data;', total, '\\taccurately predicted data:', accurate, '\\t wrongly predicted data: ', total - accurate)\nprint('Accuracy:', round(accurate\/total*100, 3), '%')","ca934b2e":"import math\n\ntotal = 0\ncosine_num = 0\ncosine_den = 0\ncosine = 0\n\nfor i in range(len(pred_label_gn)):\n    \n    cosine_num = np.vdot(pred_label_gn[i], test_y[i])\n    cosine_den = math.sqrt(sum(pred_label_gn[i])) * math.sqrt(sum(test_y[i]))\n    \n    if cosine_den:\n        cosine = cosine + (cosine_num\/ cosine_den)\n    \n    \n    \n    total += 1\n    \nprint('Avg Cosine Similarity:', round(cosine\/total, 3))","ade0ffe9":"object_list = sorted(['person', 'bird', 'cat', 'cow', 'dog', 'horse', 'sheep', 'aeroplane',\n                      'bicycle', 'boat', 'bus', 'car', 'motorbike', 'train', 'bottle',\n                      'chair', 'diningtable', 'pottedplant', 'sofa', 'tvmonitor'])\n\nim_idx = random.sample(wrong_index, k=9)\nobject_np_array = np.array(object_list)\n\nnrows = 3\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True,figsize=(15, 12))\n\nn = 0\nfor row in range(nrows):\n    for col in range(ncols):\n            ax[row,col].imshow(test_data[im_idx[n]])\n            ax[row,col].set_title(\"Predicted label :{}\\nTrue label :{}\".format(tuple(object_np_array[pred_label_gn[im_idx[n]]==1]), tuple(object_np_array[test_y[im_idx[n]]==1])))\n            n += 1\n\nplt.show()","36f08736":"# Some Samples","672ba375":"# cosine similarity","5faec6de":"# augmentation"}}