{"cell_type":{"7ed6590d":"code","8e96c6b1":"code","15746b20":"code","a4fda355":"code","93f0d245":"code","dcce7f5f":"code","92a7d572":"code","9cfa49c5":"code","fc9fcb7a":"code","0f71555b":"code","e531b12d":"code","f2b0d2a3":"code","b71cf97e":"code","82b52a34":"code","db849e32":"markdown","59540067":"markdown","27f865e0":"markdown"},"source":{"7ed6590d":"!ls \/kaggle\/input\/digit-recognizer\/","8e96c6b1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.svm import SVC\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\n%matplotlib inline\n\npd.set_option('display.max_columns', None)","15746b20":"df = pd.read_csv(r\"\/kaggle\/input\/digit-recognizer\/train.csv\",dtype=\"uint8\")\ndf.head()","a4fda355":"df.shape","93f0d245":"df['label'].value_counts()","dcce7f5f":"X = df.iloc[:,1:].values\ny = df.iloc[:,0].values  \nprint(X.shape)\nprint(y.shape)\n\n# Normalize data for fast converging\nX = X\/255.0","92a7d572":"X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size = 0.3 , random_state = 0)","9cfa49c5":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","fc9fcb7a":"from sklearn.decomposition import PCA\n\npca=PCA()\npca.fit(X_train)\nplt.figure(1,figsize=(12,8))\nplt.xticks(np.arange(0, 800, 50.0))\nplt.plot(pca.explained_variance_,linewidth=2)","0f71555b":"# I have tried with 20, 35, 50, 75 n_compenent, so 35 is the best \npca=PCA(n_components=35, whiten=True)\npca.fit(X_train)\nX_train_pca=pd.DataFrame(pca.transform(X_train))\nX_test_pca=pd.DataFrame(pca.transform(X_test))","e531b12d":"# After grid search, the best hyperparameters are for SVM C= 10, gamma= 0.05, kernel='rbf'\nsvc_PCA= SVC(C= 10, gamma= 0.05, kernel='rbf')\nsvc_PCA.fit(X_train_pca, y_train) \ny_pred_PCA = svc_PCA.predict(X_test_pca) \nsvc_PCA_score = accuracy_score(y_test, y_pred_PCA) \nprint(\"Score : \",svc_PCA_score)","f2b0d2a3":"df_test = pd.read_csv(r\"\/kaggle\/input\/digit-recognizer\/test.csv\",dtype=\"uint8\")\ndf_test = df_test.values \nprint(df_test.shape)\ndf_test = df_test\/255.0","b71cf97e":"pca=PCA(n_components=35, whiten=True)\npca.fit(X)\nX_PCA=pca.transform(X)\ndf_test_PCA = pca.transform(df_test)\n\nsvc_sub = SVC(C=10, gamma=0.05, kernel=\"rbf\")\nsvc_sub.fit(X_PCA, y)\ny_sub = svc_sub.predict(df_test_PCA)","82b52a34":"results = pd.Series(y_sub,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv('sub_PCA_SVM.csv',index=False)","db849e32":"# Submission","59540067":"## PCA - SVM\n\n### Let's see how to get %98.4 without DNN \n","27f865e0":"# PCA"}}