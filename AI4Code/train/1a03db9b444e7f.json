{"cell_type":{"2c660194":"code","d25db834":"code","ce3f035e":"code","becd9b77":"code","e59f54ba":"code","82c13692":"code","007d05db":"code","ba7bb645":"code","1e7a2e0a":"markdown","f1fc7d19":"markdown","6459959e":"markdown","53339aed":"markdown","1d82e453":"markdown","170b9a53":"markdown","f3158f84":"markdown"},"source":{"2c660194":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d25db834":"data = pd.read_csv('\/kaggle\/input\/spotify-dataset-19212020-160k-tracks\/data_by_artist.csv')\nprint(data.columns)\ndata.head()","ce3f035e":"data.drop(['duration_ms','key','mode','count'],axis=1,inplace=True)","becd9b77":"data.shape","e59f54ba":"data['popularity'] = data['popularity']\/100\ndata['tempo'] = (data['tempo'] - 50)\/100\ndata['loudness'] = (data['loudness'] + 60)\/60","82c13692":"features = ['acousticness', 'danceability', 'energy', 'instrumentalness', 'liveness', \n            'loudness', 'speechiness', 'tempo', 'valence', 'popularity']\ndef createUserPrefMatrix(artistRatingDict):\n    \n    artists = artistRatingDict.keys()\n    artMat = data[data['artists'].isin(artists)]\n    #print(artMat)\n    \n    for artist, rating in artistRatingDict.items():\n        artMat.loc[artMat['artists']==\n                   artist,features] = artMat.loc[artMat['artists']==\n                                                 artist,features].mul(rating,axis=0)\n    \n    userProfile = artMat.loc[:,features].sum(axis=0)\n    normalized_userProfile = (userProfile\/userProfile.sum())*10\n    \n    return normalized_userProfile\n\ndef createRecomMatrix(userProfile,artists):\n    \n    artMat = data[~data['artists'].isin(artists)]\n    artMat.set_index('artists',inplace=True) \n    #print(userProfile)\n    #print(artMat.head())\n    \n    recomMat = pd.DataFrame(artMat.values*userProfile.values, \n                            columns=artMat.columns, index=artMat.index)\n    recomMat = recomMat.sum(axis=1)\n    recomMat.sort_values(ascending = False,inplace=True)\n    \n    return recomMat\n\ndef recommend(artistRatingDict):\n    \n    userProfile = createUserPrefMatrix(artistRatingDict)\n    \n    recommendationMat = createRecomMatrix(userProfile,\n                                          artistRatingDict.keys()) \n    \n    return recommendationMat.head(10)","007d05db":"import random\nartists = random.sample(list(data['artists']),k=10)\nratings = [10,10,8,5,9,2,3,7,6,10]\ndictionary = dict(zip(artists, ratings))\nprint(dictionary)","ba7bb645":"recommend(dictionary)","1e7a2e0a":"Drop the columns not very useful for recommendation.","f1fc7d19":"In this notebook, I implemented a music artist recommender system using the spotify dataset. ","6459959e":"Reporting top 10 recommended artists with predicted ratings.","53339aed":"Based on user ratings of a few artists, create a user profile and then create recommendation matrix. ","1d82e453":"Data Loading","170b9a53":"Normalize columns which are already not.","f3158f84":"Generating random user ratings."}}