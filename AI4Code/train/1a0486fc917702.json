{"cell_type":{"c14518dd":"code","5ea2ac6b":"code","291ed8f6":"code","a2c64fde":"code","c20107a4":"code","f5a31087":"code","27a1025e":"code","5f8df669":"code","f173ff9a":"code","324df69a":"code","306335d5":"code","fef8ca17":"code","a13a196c":"code","5763f142":"code","6713262c":"code","acd548db":"code","6ccbb55d":"code","7c2160dd":"code","95bc895d":"code","40a9bf9f":"code","a12e9fac":"code","421f8779":"code","6e45f8d8":"code","d3573fc4":"code","7a1aa744":"code","11c8adb0":"code","a0923644":"code","03fc903f":"code","f5cdc7af":"code","5d70c95e":"code","fdb8769b":"markdown","76c53d74":"markdown","396ec38f":"markdown","8a245b89":"markdown","e39b19bc":"markdown","65ec5d6e":"markdown","a43d8487":"markdown","ad2adcd3":"markdown","bfbf6f67":"markdown","cdaffcfb":"markdown","6e7fb979":"markdown","c895ae28":"markdown","9cc1f4c4":"markdown","89bf2d18":"markdown"},"source":{"c14518dd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(20,5)})\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#MODELS\nfrom sklearn.ensemble import StackingRegressor\n\nfrom xgboost import XGBClassifier\nfrom xgboost import XGBRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoLars\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import ElasticNet\n\n# OUTLINES DETECTION\nfrom sklearn.ensemble import IsolationForest\n\n# PIPELINE\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.decomposition import TruncatedSVD\n\n# MODEL_SELECTION\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\n\n# METRICS\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import make_scorer\n\n# PROCESS DATA\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\n#CONSTS\n_RANDOM_STATE = 42\nnp.random.seed(_RANDOM_STATE)\n_TRAIN_DATA = '..\/input\/price-pred-ml-intro\/Train.csv'\n_TEST_DATA = '..\/input\/price-pred-ml-intro\/Test.csv'\n_SAMPLE_SUB = '..\/input\/price-pred-ml-intro\/SampleSubmission.csv'","5ea2ac6b":"data_train = pd.read_csv(_TRAIN_DATA).drop(columns=['id']).iloc[:]\ndata_test = pd.read_csv(_TEST_DATA).drop(columns=['id']).iloc[:]\ndata_test['price'] = [-1 for _ in range(data_test.shape[0])]\n\ndata_all = pd.concat([data_train, data_test])\nprint(data_all.shape)\ndata_all.head()","291ed8f6":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0432 \u043a\u0430\u043a\u0438\u0445 \u0444\u0438\u0447\u0430\u0445 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ns = data_all.isna().sum()\ns.loc[s != 0]","a2c64fde":"sns.histplot(data_train['price'])\n# \u0411\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0436\u0438\u043b\u044c\u044f \u0432 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 < 1_250_000","c20107a4":"sns.boxplot(data_train['price'])","f5a31087":"sns.histplot(data_all['area'])","27a1025e":"len( data_all['street_id'].unique() )\n# 672 \"\u041a\u043b\u0430\u0441\u0441\u0430\" - \u043c\u043d\u043e\u0433\u043e\u0432\u0430\u0442\u043e \u0434\u043b\u044f OneHot","5f8df669":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u0432 train \u0438 test \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 street_id\nnp.array_equal(np.sort(data_train['street_id'].unique()), np.sort(data_test['street_id'].unique()))","f173ff9a":"# \u041d\u0430\u0439\u0434\u0451\u043c \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0438 \u0434\u043b\u044f price - \u0435\u0441\u043b\u0438 price = -1 (\u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0438\u0437 data_test) \u0442\u043e \u0438 price_percentile = -1\nprice_percentile_train = pd.qcut(data_train['price'],100, labels=False, duplicates='drop')\nprice_percentile_test = np.array([-1 for _ in range(data_test.shape[0])])\ndata_all['price_percentile'] = np.concatenate((price_percentile_train, price_percentile_test))","324df69a":"sns.histplot(data_all['price_percentile'].loc[data_all['price_percentile'] != -1])","306335d5":"data_all['price_percentile_groups'] = data_all['price_percentile'].apply(lambda x: x \/\/ 5 if x > 0 else -1)\nsns.histplot(data_all['price_percentile_groups'].loc[data_all['price_percentile_groups'] != -1])","fef8ca17":"data_all.head()","a13a196c":"price_percentile_groups = data_all['price_percentile_groups'].to_numpy().reshape(-1, 1)\nprint(\"Shape before encoding ::\", price_percentile_groups.shape)\nonehot = OneHotEncoder()\nprice_percentile_groups_encoded = onehot.fit_transform(price_percentile_groups).toarray()\nprice_percentile_groups_encoded.shape\nprice_percentile_groups_encoded_df = pd.DataFrame(price_percentile_groups_encoded, columns=[\"price_percentile_groups\"+str(i-1) for i in range(price_percentile_groups_encoded.shape[1]) ])\nprice_percentile_groups_encoded_df.head()","5763f142":"print(data_all.shape, price_percentile_groups_encoded_df.shape)\ndata_all = data_all.reset_index(drop=True)\ndata_all = pd.concat([data_all, price_percentile_groups_encoded_df], axis=1)\ndata_all.head()","6713262c":"street_groups = data_all.groupby('street_id')[[ \"price_percentile_groups\"+str(i-1) for i in range(price_percentile_groups_encoded.shape[1]) ]].sum()\nstreet_groups.drop(columns=['price_percentile_groups'+'-1'], inplace=True)\nstreet_groups.head()","acd548db":"# \u0423\u0431\u0435\u0440\u0451\u043c \u0444\u0438\u0447\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439\ndata_all.drop(columns=['price_percentile'], inplace=True)\ndata_all.drop(columns=['price_percentile_groups'], inplace=True)\ndata_all.drop(columns=[\"price_percentile_groups\"+str(i-1) for i in range(price_percentile_groups_encoded.shape[1]) ], inplace=True)\nprint(data_all.shape)\ndata_all.head()","6ccbb55d":"data_all['street_id_en'] = data_all['street_id'].apply(lambda x: street_groups.columns.get_loc(street_groups.iloc[x].idxmax()))\ndata_all.head()","7c2160dd":"print( 'g_lift unique values :: ', data_all['g_lift'].unique() )\nprint( 'build_tech unique values :: ', data_all['build_tech'].unique() )\nprint( 'metro_dist unique values :: ', data_all['metro_dist'].unique() )","95bc895d":"# \u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c\ndata_all['timestamp'] = pd.to_datetime(data_all['date'], format = '%Y-%m')\ndata_all['date_year'] = data_all['timestamp'].apply(lambda x: x.year)\ndata_all['date_month'] = data_all['timestamp'].apply(lambda x: x.month)\ndata_all['timestamp'] = data_all['timestamp'].apply(lambda x: np.log(x.value))\n\ndata_all['sin_time_0'] = np.sin(2*np.pi*data_all['timestamp']\/7)\ndata_all['cos_time_0'] = np.cos(2*np.pi*data_all['timestamp']\/7)\n\ndata_all['sin_time_1'] = np.sin(2*np.pi*data_all['timestamp']\/14)\ndata_all['cos_time_1'] = np.cos(2*np.pi*data_all['timestamp']\/14)\n\ndata_all['sin_time_2'] = np.sin(2*np.pi*data_all['timestamp']\/3.5)\ndata_all['cos_time_2'] = np.cos(2*np.pi*data_all['timestamp']\/3.5)\n\ndata_all = data_all.drop(columns=['date'])\ndata_all.head()","40a9bf9f":"params = {\n        'n_estimators': 200,\n        'learning_rate': 0.05,\n        'subsample': 0.4,\n        'max_depth': 9,\n        'colsample_bytree': 0.45,\n        'min_child_weight': 3\n}\n\nfs = ['build_tech', 'metro_dist', 'price', 'g_lift']\n\nfor feature_to_pred in ['metro_dist', 'build_tech', 'g_lift']:\n    break # \u0426\u0438\u043a\u043b \u043d\u0435 \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 - \u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 markdown \u043d\u0438\u0436\u0435\n    features_to_drop = fs[:fs.index(feature_to_pred)] + fs[fs.index(feature_to_pred)+1:]\n    data_g_lift_train = data_all.loc[data_all[feature_to_pred].notna()].drop(columns=features_to_drop)\n    X, y = data_g_lift_train.drop(columns=[feature_to_pred]), data_g_lift_train[feature_to_pred]\n\n\n    clf_g_lift = XGBClassifier(**params, verbosity = 0, random_state=_RANDOM_STATE) if \\\n                                        feature_to_pred != 'metro_dist' else \\\n                    XGBRegressor(**params, verbosity = 0, random_state=_RANDOM_STATE)\n    pipe_g_lift = Pipeline(steps=[\n        ('quant', QuantileTransformer(n_quantiles=10, random_state=_RANDOM_STATE))\n        ('poly', PolynomialFeatures(2)),\n        ('pca', PCA(n_components=200, random_state=_RANDOM_STATE)),\n        ('clf', clf_g_lift)\n    ])\n\n    data_g_lift_pred = data_all.loc[data_all[feature_to_pred].isna()].drop(columns=features_to_drop)\n    pipe_g_lift.fit( X, y )\n    y_pred = pipe_g_lift.predict(data_g_lift_pred.drop(columns=[feature_to_pred]))\n\n    i_pred = 0\n    for i in range(data_all.shape[0]):\n        if np.isnan(data_all[feature_to_pred].iloc[i]):\n            data_all[feature_to_pred].iloc[i] = y_pred[i_pred]\n            i_pred += 1\n\ndata_all.head()","a12e9fac":"data = data_all.loc[data_all['price'] != -1]\ndata = data.loc[data['g_lift'].notna()]\ndata = data.loc[data['build_tech'].notna()]\ndata = data.loc[data['metro_dist'].notna()]\n\ndata_all = pd.concat([data, data_all.loc[data_all['price'] == -1]])\ndata_all = data_all.reset_index(drop=True)\nprint(data_all.shape)\ndata_all.head()","421f8779":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass DetectOutlines(BaseEstimator, TransformerMixin):\n    def __init__(self, random_state=42, new_feature_name=\"is_outline\"):\n        self.random_state = random_state\n        self.new_feature_name = new_feature_name\n        self.isolation_forest = IsolationForest(random_state=self.random_state)\n        \n    def fit(self, X, y=None):\n        self.isolation_forest.fit(X)\n        return self\n    \n    def transform(self, X, y=None):\n        X = X.toarray()\n        is_outline = self.isolation_forest.predict(X)\n        is_outline = np.reshape(is_outline, (is_outline.shape[0], 1))\n        X = np.append(X, is_outline, axis=1)\n        return X","6e45f8d8":"numeric_features = ['timestamp', 'area', 'rooms', 'balcon', 'metro_dist', 'n_photos']\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy=\"median\")),\n    ('scaler', StandardScaler())\n])\n\n\ncategorical_features = ['build_tech', 'date_year', 'date_month', 'floor', 'g_lift']\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', KNNImputer(n_neighbors=3)),\n    ('onehot', OneHotEncoder(handle_unknown=\"ignore\"))\n])\n\nct = ColumnTransformer(\n    transformers=[\n        (\"num\", numeric_transformer, numeric_features),\n        (\"cat\", categorical_transformer, categorical_features),\n    ]\n)\n\npipe_preprocess = Pipeline(steps=[\n    ('ct', ct),\n    ('outline', DetectOutlines(random_state=_RANDOM_STATE)),\n    #('poly', PolynomialFeatures(2))\n    #('pca', PCA(n_components=250, random_state=_RANDOM_STATE)),\n])","d3573fc4":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f - \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0434\u043e\u043b\u0433\u043e(\n\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.manifold import TSNE\n\nX, y = data_all.drop(columns=['price']), data_all['price']\n\nX_tr = pipe_preprocess.fit_transform(X)\nclustering = DBSCAN(eps=3, min_samples=2).fit(X_tr)\ndata_all['cluster_labels'] = clustering.labels_\n\n# X_tr = np.append(X_tr, clustering.labels_, axis=1)\n# tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300)\n# tsne_results = tsne.fit_transform(X_tr)\n\n# sns.scatterplot(\n#     x=\"tsne-2d-one\", y=\"tsne-2d-two\",\n#     hue=\"labels\",\n#     palette=sns.color_palette(\"hls\", 10),\n#     data=df_subset,\n#     legend=\"full\",\n#     alpha=0.3\n# )","7a1aa744":"lightgbm_params = {\n    'boosting_type': 'gbdt',\n    'objective': 'regression',\n    \"max_depth\": 8,\n    'num_leaves': 256,\n    'verbose': -1\n}\n\nestimators = [\n    ('randomforest', RandomForestRegressor(max_depth=6, random_state=_RANDOM_STATE)),\n    ('lightgbm', LGBMRegressor(**lightgbm_params)),\n    ('cat', CatBoostRegressor(max_depth=8, n_estimators=100)),\n    ('ridge', RidgeCV()),\n    ('xgbreg', XGBRegressor(**params,random_state=_RANDOM_STATE)),\n    ('elastic', ElasticNet(random_state=_RANDOM_STATE)),\n    ('lassolars', LassoLars(alpha=0.1, normalize=False)),\n    ('bayes', BayesianRidge()),\n    ('sgd', SGDRegressor(max_iter=1000, tol=1e-3))\n]\n\nreg = StackingRegressor(\n     estimators=estimators,\n     final_estimator=Lasso(alpha=0.1)\n)\n\nparams = {\n        'n_estimators': 100,\n        'learning_rate': 0.05,\n        'subsample': 0.4,\n        'max_depth': 9,\n        'colsample_bytree': 0.45,\n        'min_child_weight': 3\n}\n\n# reg = XGBRegressor(**params,random_state=_RANDOM_STATE)","11c8adb0":"pipe_reg = Pipeline(steps=[\n        ('transform', pipe_preprocess),\n        ('clf', reg)\n    ])","a0923644":"# \u0412\u043e\u043e\u0431\u0449\u0435 \u044d\u0442\u043e \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u0430\u0441\u043a\u043e\u043b\u044c \u0425\u0443\u0436\u0435 \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0435\u0442 \u0441\u0442\u0435\u043a \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\n#1017586.658230839 - Lasso \u042e\u0445\u0443\u0443\u0443\u0443!\n#817586.658230839  - stack models - overfit! \u043f\u0440\u0438\u0447\u0451\u043c \u043e\u0447\u0435\u043d\u044c \u0436\u0451\u0441\u0442\u043a\u0438\u0439\n\ndata = data_all.loc[data_all['price'] != -1]\nX, y = data.drop(columns=['price']), data['price']\n\nscores = cross_val_score(pipe_reg, X, y, cv=3, scoring=make_scorer(mean_absolute_error))\nprint(scores.mean(), '::', scores.tolist())","03fc903f":"pipe_reg.fit(X, y)","f5cdc7af":"data_test = data_all.loc[data_all['price'] == -1].drop(columns=['price'])\nprint(data_test.shape[0])\ny_ans = pipe_reg.predict(data_test)","5d70c95e":"sample = pd.read_csv(_SAMPLE_SUB)\nsample['price'] = y_ans\nsample.to_csv('submission.csv', index=False)\nsample.head()","fdb8769b":"## \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430...","76c53d74":"# \u0410\u043d\u0434\u0440\u0435\u0435\u0432 \u0414\u0430\u043d\u0438\u043b ML-12 - IntoML 2021. Property prices","396ec38f":"# Quicklook","8a245b89":"# \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e street_id\n\n<p> \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0443\u043b\u0438\u0446\u044b \u0441\u0442\u043e\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0430\u0439\u043e\u043d\u044b - \u0411\u043b\u0430\u0433\u043e\u043f\u043e\u043b\u0443\u0447\u043d\u044b\u0435 \u0438 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c <\/p>","e39b19bc":"## \u041e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442","65ec5d6e":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0444\u0438\u0447\u0438, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n<p> \u0414\u043b\u044f g_lift \u0438 build_tech \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043d\u0438\u0445 <\/p>\n<p> \u0414\u043b\u044f metro_dist \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u043e\u0440 \u0438 \u043f\u043e\u0442\u043e\u043c \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0442\u044c \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0433\u043e \u043a\u0440\u0430\u0442\u043d\u043e\u0433\u043e 5-\u0442\u0438<\/p>","a43d8487":"### \u0412\u044b\u0432\u043e\u0434\u044b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n<p> \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 XGBClassifier \u0434\u0430\u043b \u0434\u043b\u044f g_lift \u043d\u0430 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e 0.5 f1_score <\/p>\n<p> \u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0443\u0436\u0430\u0441\u043d\u043e!!! <\/p>\n<p> \u0414\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 \u0432\u0441\u0451 \u0435\u0449\u0451 \u0445\u0443\u0436\u0435 <\/p>\n<h3> \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0412\u043e\u043b\u0435\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 nan! <\/h3>\n<p> \u0422\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u043f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0442\u0440\u043e\u0433\u0430\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f, \u043f\u0440\u0438\u0434\u0451\u0442\u0441\u044f \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c Imputer \u0432 pipeline <\/p>","ad2adcd3":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438","bfbf6f67":"## \u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 street_groups\n<p> \u0427\u0435\u0440\u0435\u0437 \u043d\u0435\u0433\u043e \u043c\u044b \u0441\u043c\u043e\u0436\u0435\u043c \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a\u0430\u044f \u0443\u043b\u0438\u0446\u0430 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u0440\u0430\u0439\u043e\u043d\u0443 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f <\/p>\n<p> \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 data_all \u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0442\u044c<\/p>","cdaffcfb":"## \u0418\u0434\u0435\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f:\n<p> \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0435\u043b\u0438\u043c price_percentile \u043d\u0430 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0430\u0441\u0442\u0435\u0439 (\u043f\u0443\u0441\u0442\u044c 20) \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u0438\u0435 street_id \u043a \u043a\u0430\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0435\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 <\/p>\n<p> \u0420\u0430\u0439\u043e\u043d\u043e\u043c \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c (0..4), (5..9) ... \u041f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u0438 \u043f\u043e price <\/p>","6e7fb979":"# \u041c\u044b \u0440\u0430\u0437\u043e\u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\n## \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\n<p> \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0443\u043c\u0430\u0435\u043c \u043e \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\u0435\u0439 (\u043f\u043e\u043c\u0438\u043c\u043e timestamp) <\/p>\n<p> \u0421\u0442\u043e\u0438\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0435\u0442\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 IsolationForest<\/p>","c895ae28":"# \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445\n<p> \u0422\u0443\u0442 \u043c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0432 \u0444\u0438\u0447\u0430\u0445 build_tech \u0438 g_lift \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u0439, \u0432\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u0435\u043b\u0430\u0442\u044c SimpleImputer mean - \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 pipeline-\u0430\u0445 <\/p>\n<p> C metro_dist \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u043c \u0442\u0430\u043a \u0436\u0435 <\/p>\n\n<hr>\n\n<p> \u0417\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 - \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0441\u043a\u043b\u0435\u0438\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 test \u0438 train \u0432\u043c\u0435\u0441\u0442\u0435 \u0438 \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 <\/p>","9cc1f4c4":"# \u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c street_id","89bf2d18":"## \u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n<p> \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0435\u043c\u0441\u044f \u043e\u0431\u0443\u0447\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 <\/p>"}}