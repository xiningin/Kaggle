{"cell_type":{"6c1f6c08":"code","bc9ed6be":"code","18d32318":"code","34fdb7e5":"code","e4aa7807":"code","ed04b4b9":"code","6068ab5c":"code","5a9fbaf0":"code","d4a34977":"code","9ad4a8cc":"code","743ec576":"code","e77abb82":"code","338ec343":"code","cac5a59f":"code","51a6a2dd":"code","a613acc0":"code","10d234c9":"code","cd3ed80d":"code","d2532883":"code","de017e90":"code","a2ba0310":"code","d3a132de":"code","9dae9c73":"code","74637007":"code","d04a33a8":"code","5578f93b":"code","15c38788":"code","f60fe4c4":"code","420b5703":"code","2e7590a3":"code","89a290b5":"code","b37ebce6":"code","103ceceb":"code","487abce0":"code","34bbc4d2":"code","7e040ff9":"code","4bbea70d":"code","fe834fbf":"code","b8079058":"code","4b101624":"code","e5e2eede":"code","5a0ef363":"code","af85e037":"code","8650276d":"code","3c8c042b":"code","fd20722f":"code","d1613d19":"code","d092dd93":"code","b84a0643":"code","fbc02ca8":"code","665ea514":"code","bb734511":"code","fd83aa66":"code","71075e22":"code","0b85c7fd":"code","0fc0ba77":"code","40b5e5a4":"code","3647c7be":"code","f62059c9":"code","d0dcbc9b":"code","8a098c3e":"code","6d3525e6":"code","93dba8ca":"code","89e9786e":"code","077793d9":"code","4d6b7bef":"code","8fd06efe":"code","c2e9170e":"code","5c16614a":"code","ae76126c":"code","dc4670e5":"code","4b0bf56f":"code","a20806f0":"code","3b85d82f":"code","53ae755d":"code","2c3284a9":"code","a1b73ff2":"code","ed11e50b":"code","9646aa2e":"code","9987bbe4":"code","9a3bb8a3":"code","ed3f099c":"code","c5285935":"code","69b52e4a":"code","356c2b24":"code","9a6f827b":"code","b3e3869f":"code","6b3b5997":"code","887fd7a3":"code","d2ac6443":"code","f4996dde":"code","9642e402":"code","fb749867":"code","18956d21":"code","7e4e0420":"code","801995c2":"code","86203d4b":"code","ffd373fc":"code","5643e3bc":"code","08435b65":"code","14f35037":"code","499e5814":"code","65ec3b87":"code","218fe82a":"code","4340400b":"code","f4426cd0":"code","b3805dbf":"code","01f0d78b":"code","47d9bcab":"code","927e6508":"code","2414b3d2":"code","208f3556":"code","09093de2":"code","3c990fb4":"code","861d0be0":"code","87cca88c":"code","ace330dd":"code","ccf0046f":"code","aef37e00":"code","bbd1c59f":"code","398ab3ac":"code","f4fc58a2":"code","054dc248":"code","d33100a0":"code","688494f1":"code","77e0c8a8":"code","ff8a86f9":"code","f9f6ce90":"code","2121438c":"code","45d29906":"code","b8236d19":"code","a4936357":"code","7ab4550e":"code","8b5b5f45":"code","f1bae398":"code","ab2068bb":"code","44c32391":"code","59da69f7":"code","96e85738":"code","483568cd":"code","917ca87c":"code","94586289":"code","28c3b189":"code","bb02cf22":"code","c1717dc0":"code","4bfde55a":"code","5d32f1fb":"code","4c36ef38":"code","b394eabe":"code","9083990f":"code","8d95395b":"code","22534c94":"code","0ba16c0c":"code","543cafa0":"code","152d6af7":"code","e0eb9daa":"code","c7194273":"code","aa57c17b":"code","5b76648f":"code","39a7a1ac":"code","ef7c7fc9":"code","06f69111":"code","bba598f9":"code","cd13e007":"code","24f2722d":"code","0406a2b0":"code","e5c02e2b":"code","97c873b1":"code","646b2572":"code","3dd8da82":"code","9b77e192":"code","71bb68df":"code","329b8ba5":"code","d847baf1":"code","a3c8a755":"code","d9aacf4e":"code","3932eebe":"code","b7c8d211":"code","9ec233a2":"code","bbd92b4e":"code","9a0a8990":"code","d2c5ed20":"code","8d3f4022":"code","e24b1eda":"code","2440a5da":"code","76001978":"code","7995afa4":"code","4db6fb48":"code","c7a0b466":"code","ba022e80":"code","cc37c533":"code","af3faf0f":"code","1dc3e587":"code","e0e15266":"code","43d1add8":"code","fb7c5cfe":"code","3f09a062":"code","497461a9":"code","2a38e3a6":"code","edf5aa4e":"code","3e6eaa4e":"code","c7e3d2d1":"code","d357891d":"code","36034ca4":"code","cbd36e31":"code","a6b7ddd1":"code","85753b10":"code","7872a9f1":"code","998f7f9d":"code","5aa007ed":"code","ff2ded2d":"code","5e950cb7":"code","1e464982":"code","561d6c38":"code","337fcb3e":"code","9c1d7e47":"code","89ffc135":"code","6b2ea0c6":"code","be9038fa":"code","f14324e4":"code","5838b6f7":"code","bb1802b8":"code","9c4c4c42":"code","0d4b5ff0":"code","f6868879":"code","64992366":"code","2fb87aef":"code","4492ba76":"code","2326e931":"code","fd69379b":"code","dc379c47":"code","90a07a14":"code","da3b799a":"code","03ec9094":"code","10a834bf":"code","5743c2cd":"code","87122f1f":"code","acf6a6df":"code","6c95cc16":"code","430980cf":"code","f43f2337":"code","a3c1ca51":"code","e437e61d":"code","6a584991":"code","8ccc1f18":"code","e3f23993":"code","f949dffc":"code","1c82387b":"code","1cc815a4":"code","518caf0e":"code","cf2eba72":"code","eb313146":"code","8e6b79d3":"code","ffd24a7a":"code","a96d036f":"code","82e484da":"code","b02e0cb3":"code","f15155a7":"code","18ae51cd":"code","8c6794e2":"code","7d9527cd":"code","9eae39d4":"code","c3c41a15":"code","c6a0d98e":"code","5c19e102":"code","f894cbf2":"code","296d1770":"code","1b80c71d":"code","d8869fcc":"code","cceeadf3":"code","1ef7a14f":"code","21e63679":"code","7a14ffaf":"code","2686d166":"code","6c3b4221":"code","48a6b65e":"code","e57fc41c":"code","1a03b776":"code","866816ec":"code","1a7e8549":"code","ad342f17":"code","8f1e90c5":"code","e51bb510":"code","1c943662":"code","a372220f":"code","7f792b2f":"code","94dc965f":"code","c37b8746":"code","08cc01d7":"code","e9dafb97":"code","14798bc9":"code","d4ca18a0":"code","d489d797":"code","5bc74ef5":"code","8fe6bec8":"code","6e574657":"code","d19f51cc":"code","f1e84d99":"code","084e5792":"code","cb2b0d0a":"code","78a7acf2":"code","5b936672":"code","a3836693":"code","dc1ab60d":"code","3e3a02b8":"code","6f6473bc":"code","7ba77019":"code","d6e11ffe":"code","ce595a0c":"code","9f563528":"code","b65ba284":"code","e835049e":"code","67e6868e":"code","b32609d4":"code","a677fc1c":"code","a4bff460":"code","6a1611d8":"code","3d9bcfa8":"code","63731bd5":"code","9b83bde1":"code","0a813c28":"code","26a092da":"code","d1dd05db":"code","dfed7dd4":"code","5a93759c":"code","b6a88bb2":"code","ac8ec8e6":"code","509c92f0":"code","960c50f9":"code","ca48ef13":"code","e107a759":"code","35228e3f":"code","54db9116":"code","a076c464":"code","7d4792b7":"code","69d286b7":"code","efc18ae7":"code","4133b42f":"code","8ee51a17":"code","37fecab7":"code","30806823":"code","5191fe67":"code","cfe46a39":"code","81e6d951":"code","019831f7":"code","431f790a":"code","cfb70de7":"code","27b28611":"code","7ed448c0":"code","8e5dc1e6":"code","1bb70529":"code","5e31484e":"code","33b62f3f":"code","58e0a84c":"code","e94f6af3":"code","371b4994":"code","59a3f68c":"code","0d708014":"code","cebd563c":"code","0066ceee":"code","76fd450a":"code","95864b68":"code","aa8b99e1":"code","faf8a66b":"code","8e031298":"code","9c7283d2":"code","96dca63f":"markdown","b1bf5a76":"markdown","850d2f20":"markdown","4bd54854":"markdown","7cb9d457":"markdown","21c6e773":"markdown","42bdbd2c":"markdown","4c946e36":"markdown","ba16c6be":"markdown","69938e15":"markdown","8f5108f1":"markdown","200f3bf8":"markdown","518ca98d":"markdown","8bb19e74":"markdown","f9fae879":"markdown","3986727d":"markdown","fd7e0814":"markdown","3bdea929":"markdown","25b4daea":"markdown","d9050e66":"markdown","6923161f":"markdown","4504bc7a":"markdown","60336e37":"markdown","41b0f8ff":"markdown","c6c62496":"markdown","d11fdb1d":"markdown","0e85f77b":"markdown","f83176a9":"markdown","aeefecbb":"markdown","11d47a42":"markdown","38dc3149":"markdown","1a5a2426":"markdown","b36523fd":"markdown","9e199fe4":"markdown","1c1d1b23":"markdown","6460c56b":"markdown","c4618cfb":"markdown","99e9a34f":"markdown","7114c81d":"markdown","ebd82d5f":"markdown","1d871e20":"markdown","b7577c00":"markdown","3af9e35d":"markdown","d983975c":"markdown","9eb7a4c1":"markdown","e8930e1d":"markdown","3704825f":"markdown","7386a732":"markdown","1209d4ce":"markdown","676a4322":"markdown","4b91a7be":"markdown","741948fe":"markdown","0b855c1b":"markdown","4e1013c2":"markdown","124cba6f":"markdown","6f0e12f7":"markdown","ba6a4100":"markdown","ba0f3426":"markdown","13d3f19a":"markdown","379d38fd":"markdown","f0dc8c1e":"markdown","18b78df7":"markdown","8fa9f7f5":"markdown","444224f5":"markdown","781902c1":"markdown","33b1071b":"markdown","57d24cfe":"markdown","f691cc50":"markdown","5db5af3b":"markdown","5599ad05":"markdown","cffad43a":"markdown","0775dc5b":"markdown","db97cc5e":"markdown","2087e523":"markdown","7b43284b":"markdown","ac7e650d":"markdown","6075b4b2":"markdown"},"source":{"6c1f6c08":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport sys\nimport json\nimport operator\nimport re\n\nimport pandas_profiling\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom statistics import mean\nfrom itertools import combinations\n\nfrom sklearn.compose import make_column_selector\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import SelectFromModel\nfrom catboost import CatBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import StackingRegressor\nfrom sklearn.feature_selection import SelectPercentile\n#from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import RidgeCV\nfrom xgboost import XGBRegressor\nfrom hyperopt import hp, tpe\nfrom hyperopt.fmin import fmin\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.base import clone\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import make_scorer\n#from sklearn import metrics\n\nfrom sklearn.cluster import KMeans\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom gensim.models import Word2Vec\nfrom scipy.stats import ttest_ind\nfrom IPython.display import Image\nfrom tqdm.notebook import tqdm\n\nimport gc","bc9ed6be":"print('Python       :', sys.version.split('\\n')[0])\nprint('Numpy        :', np.__version__)","18d32318":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","34fdb7e5":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","e4aa7807":"def mape(y_true, y_pred):\n    '''\n    \u041c\u0435\u0442\u0440\u0438\u043a\u0430\n    '''\n    return np.mean(np.abs((y_pred-y_true)\/y_true))","ed04b4b9":"def del_columns(df, list_):\n    '''\n    \"\u0422\u0438\u0445\u043e\u0435\" \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \n    '''\n    for i in list_:\n        try: \n            df.drop([i],axis=1, inplace=True)\n        except:\n            continue\n    return        ","6068ab5c":"def display_data(dataframe, list_columns=None):\n    '''\n    \u0420\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043f\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443 \u043a\u043e\u043b\u043e\u043d\u043e\u043a,\n    \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u043d\u0438\u044e \u0431\u0435\u0437 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438,\n    \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u044b \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443\n    '''\n    if list_columns==None:\n        index_ = sorted(dataframe.columns)\n    else: \n        index_ = sorted([x for x in set(dataframe.dtypes.index).intersection(set(list_columns))])\n    \n    df = dataframe[index_]\n    d = pd.concat([df.dtypes,df.count() + df.isna().sum(),\\\n               round((df.isna().sum()\/(df.count() + df.isna().sum()))*100,2),df.nunique(),],axis=1)\n    d.columns = ['\u0422\u0438\u043f', '\u041e\u0431\u0449.\u043a\u043e\u043b', '% \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432','\u041a\u043e\u043b-\u0432\u043e \u0443\u043d\u0438\u043a.\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439']\n    display(d)\n    \n    return","5a9fbaf0":"def compare_dataframes(df1, df2, show_=0):\n    '''\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0434\u0432\u0443\u0445 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u0432,\n    \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430 \u0438 \u043e\u0431\u0449\u0438\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:\n    \u043f\u043e\u0445\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u043e\u0432 \u043a \u0441\u043b\u0438\u044f\u043d\u0438\u044e.\n    \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\n    \n    show_:\n        0 - \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n        1 - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f\n        2 - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435       \n   \n    \n    '''\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n    total_index = sorted(list(set(df1.columns.tolist()) | set(df2.columns.tolist())))\n    common_index = sorted(list(set(df1.columns.tolist()).intersection(set(df2.columns.tolist()))))\n    if show_ > 0:\n        d = pd.concat([pd.DataFrame(total_index, index = total_index),\\\n                   pd.DataFrame(df1[df1.columns.tolist()].dtypes, index = df1.columns),\\\n                   pd.DataFrame(df2[df2.columns.tolist()].dtypes, index = df2.columns)],axis=1)\n\n        d.columns = ['\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432', f'\u0414\u0430\u0442\u0430\u0441\u0435\u0442 1', '\u0414\u0430\u0442\u0430\u0441\u0435\u0442 2']\n        \n        \n        if show_ == 2:\n            display(d[['\u0414\u0430\u0442\u0430\u0441\u0435\u0442 1','\u0414\u0430\u0442\u0430\u0441\u0435\u0442 2']])\n        else:\n            \n            display(d[d['\u0414\u0430\u0442\u0430\u0441\u0435\u0442 1']!=d['\u0414\u0430\u0442\u0430\u0441\u0435\u0442 2']][['\u0414\u0430\u0442\u0430\u0441\u0435\u0442 1','\u0414\u0430\u0442\u0430\u0441\u0435\u0442 2']])\n            \n    return total_index, common_index","d4a34977":"def IQR_outlier(df: pd.DataFrame, column: object, verbose: bool=True) -> tuple:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u043d\u0438\u0446 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0445\u0430\n    '''\n    perc25 = round(df[column].quantile(0.25),3)\n    perc75 = round(df[column].quantile(0.75),3)\n    IQR = perc75 - perc25\n    low = perc25 - 1.5*IQR\n    high = perc75 + 1.5*IQR\n    if verbose:\n        print(column)\n        print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25)[:-1], '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75),\n            \"IQR: {}, \".format(IQR), \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=low, l=high))\n    return (low, high)\n","9ad4a8cc":"def cut_outlier(df, col):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\n    \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n    \u0441 \"\u0443\u0431\u0438\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u0445\u0432\u043e\u0441\u0442\u0430\u043c\u0438\" \n    '''\n    low, high = IQR_outlier(df,col, False) # \u0433\u0440\u0430\u043d\u0438\u0446 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0445\u0430\n    new_col = col+'_c'\n    df[new_col] = df[col]\n    df[new_col] = df[new_col].apply(lambda x: x if x>low else low)\n    df[new_col] = df[new_col].apply(lambda x: x if x<high else high)\n    \n    return","743ec576":"def cut_tails(df, col, quality=10):\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \n    \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n    \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430,\n    \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f 'OTHERS'\n    '''\n    new_col = col+'_c'\n    df[new_col] = df[col]\n    _index = df[new_col].value_counts().index[:quality] # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b\n    # \u041d\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0435\u0441\u043b\u0438 \u0442\u0435\u043a\u0441\u0442 - OTHERS, \u0447\u0438\u0441\u043b\u043e \u0438 \u043f\u0440. - \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    new_value = 'OTHERS'\n    df[new_col] = df[new_col].apply(lambda x: x if x in _index else new_value)\n    \n    return","e77abb82":"def get_boxplot(df, column, _target):\n    '''\n    plot boxes \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n    '''\n    fig, ax = plt.subplots(figsize = (20, 4))\n    sns.boxplot(x=column, y=_target,data=df, ax=ax) \n    plt.xticks(rotation=90,fontsize=8)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()\n    \n    return","338ec343":"def show_correlation(df, features):\n    '''\n    plot correlation matrix\n    '''\n    \n    #corr_matrix = df.drop(categorial_feature, axis=1).corr()\n    corr_matrix = df[features].corr()\n    plt.rcParams['figure.figsize'] = (15,15)\n    sns.heatmap(corr_matrix, square=True,\n                annot=True, fmt=\".1f\", linewidths=0.1, cmap=\"RdBu\");\n    plt.tight_layout()\n    \n    return","cac5a59f":"def get_stat_dif(df: pd.DataFrame, column: object, _target='score') -> bool:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430 \u0434\u043b\u044f \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0441\u043c\u0435\u0448\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n    '''\n    cols = df.loc[:, column].value_counts()\n    cols = cols[cols>15].index\n    combinations_all = list(combinations(cols, 2))\n    for comb in combinations_all:\n        if ttest_ind(df.loc[df.loc[:, column] == comb[0], _target].dropna(), \n                        df.loc[df.loc[:, column] == comb[1], _target].dropna()).pvalue \\\n            <= 0.05\/len(combinations_all): # \u0423\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438 #0.075\n            print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n            return True\n            break\n    return        ","51a6a2dd":"def fullfil_omissions(df, _features, arr_grp = [['brand','model','name','modelDate','productionDate'],\\\n                                                ['brand','model','name','modelDate'],\\\n                                                ['brand','model','name'],\\\n                                                ['brand','model'],\\\n                                                ['brand'],\\\n                                                []], _type=0):\n\n    '''\n    _features - \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0432\u043e\u0439\u0441\u0442\u0432\n\n    _type - \u0442\u0438\u043f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\n    0 - \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\n    1 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\n\n    arr_grp - \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043e\u043a\n    \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e:\n    arr_grp = [['brand','model_name'],['brand'],[]]\n\n    \u0417\u0430\u043b\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438,\n    \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435: \u0431\u0440\u0435\u043d\u0434+\u043c\u043e\u0434\u0435\u043b\u044c,\n    \u043f\u043e\u0442\u043e\u043c - \u0431\u0440\u0435\u043d\u0434\n    \u0437\u0430\u0442\u0435\u043c \u0432 \u0446\u0435\u043b\u043e\u043c \u043f\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\n\n    '''\n    \n    # \u0422\u0430\u0431\u043b\u0438\u0446\u0430  \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\n    tabl = df[_features].isnull().sum()\n\n    for el in arr_grp:\n        \n        if len(el)>0:\n            grp = df.groupby(el)\n\n            # \u0446\u0438\u043a\u043b \u043f\u043e \u043f\u0440\u043e\u0443\u0441\u043a\u0430\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0435\n            for ind in list(tabl[tabl>0].index):\n                \n                try:\n                    if _type == 0:\n                        \n                        df[ind] = np.round(df[ind].fillna(grp[ind].transform('mean')))\n                    else:\n                        #value_ = grp[ind].value_counts().index[0][len(el)] # \u0441\u0430\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n                        value_ = grp[ind].median()\n                        df[ind].fillna(value_, inplace=True)\n\n                except Exception as err:\n                    \n                    print(err, ind)\n                    \n                    if _type == 1: # \u043d\u0435 \u0441\u0434\u0430\u0435\u043c\u0441\u044f\n                        value_ = grp[ind].value_counts().index[0][len(el)]  # \u0441\u0430\u043c\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u0433\u0440\u0443\u043f\u043f\u0435\n                        print(el, ind, value_)\n                        df[ind].fillna(value_, inplace=True)\n                        \n                    continue\n\n        else:\n\n            # \u0446\u0438\u043a\u043b \u043f\u043e \u043f\u0440\u043e\u0443\u0441\u043a\u0430\u043c \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0434\u043b\u044f \u0437\u0430\u043c\u0435\u043d\u044b \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n            for ind in list(tabl[tabl>0].index):\n                                 \n                if _type == 0:\n                                 \n                    df[ind] = np.round(df[ind].interpolate(method='polynomial', order=2))\n                else:\n                                 \n                    df[ind].fillna(df[ind].mode()[0], inplace=True)\n    return","a613acc0":"def get_complect_from_description(x):\n    '''\n    \u0414\u043b\u044f train\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044e \u0438\u0437 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\n    '''\n    y = ''   \n    if type(x) == str:\n        x = re.sub(chr(8226), '', x)\n        ind_complect = re.search(r'\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f:',x)\n        if  not ind_complect == None:\n            x = x[ind_complect.span()[1]:] #\u041d\u0430\u0439\u0434\u0435\u043c \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044e\n            y = x\n            if len(re.findall(r'\\t([\\w\\s\\-]+)\\n',x))>0:\n                x = re.findall(r'\\t([\\w\\s\\-]+)\\n',x)[0]#.split(sep='\\n\\t')\n                y = re.sub(r'\\n\\t',',',x)\n  \n    return y","10d234c9":"def create_year_month_from_start_date():\n    '''\n    \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044f \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 start_date\n    \n    \u0414\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430!\n    \n    '''\n    for df in ['train','train_upd','test']:\n        if df == 'test':\n            y = f\"{df}[\\'start_date\\'] = pd.to_datetime({df}[\\'parsing_unixtime\\'],unit=\\'s\\')\"\n        else:  \n            print(df)\n            y = f\"{df}[\\'start_date\\'] = pd.to_datetime({df}[\\'start_date\\'])\"\n        print(y)    \n        exec(y)    \n\n        y = f\"{df}[\\'sale_year\\'] = {df}[\\'start_date\\'].dt.year\"\n        exec(y)\n\n        y = f\"{df}[\\'sale_month\\'] = {df}[\\'start_date\\'].dt.month\"\n\n        exec(y)\n\n        y = f\"del_columns({df}, delete_columns)\"\n\n        exec(y)\n    \n    return","cd3ed80d":"def create_year_month_from_ownership():\n    '''\n    \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u044f \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\n    \n    \u0414\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043e \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430!\n    '''\n    \n    for df in ['train','train_upd','test']:\n        #print(df)\n        y = f\"{df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\\'].fillna(\\'0 0\\', inplace = True)\"\n        #print(y)\n        exec(y)\n\n        y = f\"{df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434\\'] = {df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\\'].apply(lambda x :re.findall(r\\'\\d+\\',x)[0] if len(re.findall(r\\'\\d+\\',x))>0 else '0').astype(int)\"\n        #print(y)\n        exec(y)\n        y = f\"{df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441\\'] = {df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\\'].apply(lambda x :re.findall(r\\'\\d+\\',x)[1] if len(re.findall(r\\'\\d+\\',x))>1 else '0').astype(int)\"\n        exec(y)\n    \n    for df in ['train_upd','test']:\n\n        y = f\"{df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434\\'] = np.where({df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434\\']>0,{df}[\\'sale_year\\']-{df}[\\'\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434\\'],0)\"\n        exec(y)\n        \n    return    \n","d2532883":"def show_weights(features, weights, scales):\n    '''\n    \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0435\u0441\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \n    \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 scales)\n    '''\n    fig, axs = plt.subplots(figsize=(14, 10), ncols=2)\n    sorted_weights = sorted(zip(weights, features, scales), reverse=True)\n    weights = [x[0] for x in sorted_weights]\n    features = [x[1] for x in sorted_weights]\n    scales = [x[2] for x in sorted_weights]\n    sns.barplot(y=features, x=weights, ax=axs[0])\n    axs[0].set_xlabel(\"Weight\")\n    sns.barplot(y=features, x=scales, ax=axs[1])\n    axs[1].set_xlabel(\"Scale\")\n    plt.tight_layout()\n\n    return","de017e90":"VERSION    = 8\nDIR_TRAIN  = '..\/input\/parsing-all-moscow-auto-ru-09-09-2020\/' # \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u043a \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0443 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\nDIR_TRAIN_UPD  = '..\/input\/auto-traincsv\/' # \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\nDIR_TRAIN_ED  = '..\/input\/train-enginedisplacement\/' # \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044f engineDisplacement\nDIR_TEST_UPD  = '..\/input\/auto-test-update\/' # \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nDIR_TEST   = '..\/input\/sf-dst-car-price-prediction\/' # \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\nVAL_SIZE   = 0.20   # 20% \n\npd.set_option('display.max_rows', 100) # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 100) # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a \n\n# \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\nnum_features, cat_features, bin_features = [], [], [] # \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n# \u0414\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n#  \u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u044b\u0439 \u043d\u0430\u043b\u043e\u0433 (\u043f\u043e \u041c\u043e\u0441\u043a\u0432\u0435 2021 \u0433)\n# \u041a\u043b\u044e\u0447 - \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0432 \u043b.\u0441, \n# \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0441\u0443\u043c\u043c\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445 \u0437\u0430 1 \u043b.\u0441\nTAX = {0: 12, 100: 35, 150: 50, 200: 75, 250: 150}\n\n# \u041f\u043e\u0432\u044b\u0448\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u043d\u0430\u043b\u043e\u0433\u0430\n# \u041a\u043b\u044e\u0447 - (\u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e \u0432 \u043c\u043b\u043d.\u0440\u0443\u0431; \u043d\u0438\u0436\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0434\u0430\u0445; \u0432\u0435\u0440\u0445\u043d\u044f\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u0432 \u0433\u043e\u0434\u0430\u0445 ), \n# \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\n\nK = {(3,0,3): 1.1, (5,3,5): 2, (10,5,10): 3, (15,10,15): 3}\n\n# \u0421\u041b\u041e\u0412\u0410\u0420\u0418\n\ndict_color = {'040001':'\u0447\u0451\u0440\u043d\u044b\u0439', 'EE1D19':'\u043a\u0440\u0430\u0441\u043d\u044b\u0439', '0000CC':'\u0441\u0438\u043d\u0438\u0439', \n              'CACECB':'\u0441\u0435\u0440\u0435\u0431\u0440\u0438\u0441\u0442\u044b\u0439', '007F00':'\u0437\u0435\u043b\u0451\u043d\u044b\u0439', 'FAFBFB':'\u0431\u0435\u043b\u044b\u0439', \n              '97948F':'\u0441\u0435\u0440\u044b\u0439', '22A0F8':'\u0433\u043e\u043b\u0443\u0431\u043e\u0439', '660099':'\u043f\u0443\u0440\u043f\u0443\u0440\u043d\u044b\u0439', \n              '200204':'\u043a\u043e\u0440\u0438\u0447\u043d\u0435\u0432\u044b\u0439', 'C49648':'\u0431\u0435\u0436\u0435\u0432\u044b\u0439', 'DEA522':'\u0437\u043e\u043b\u043e\u0442\u0438\u0441\u0442\u044b\u0439', \n              '4A2197':'\u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439', 'FFD600':'\u0436\u0451\u043b\u0442\u044b\u0439', 'FF8649':'\u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439', \n              'FFC0CB':'\u0440\u043e\u0437\u043e\u0432\u044b\u0439'}\n\ndict_transmission = {'AUTOMATIC':'\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f', 'MECHANICAL':'\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f',\\\n                            'ROBOT':'\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f', 'VARIATOR':'\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440'}\n\ndict_transmission2 = {'\u0430\u0432\u0442\u043e\u043c\u0430\u0442': '\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f','\u043c\u0435\u0445\u0430\u043d\u0438\u043a\u0430': '\u043c\u0435\u0445\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0430\u044f',\\\n     '\u0440\u043e\u0431\u043e\u0442': '\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f','\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440': '\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440'}\n\ndict_pts = {'ORIGINAL':'\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', 'DUPLICATE':'\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442'}\n\ndict_wheel = {'RIGHT':'\u041f\u0440\u0430\u0432\u044b\u0439', 'LEFT':'\u041b\u0435\u0432\u044b\u0439'}\n\n# Vars\n\nmape_scorer = make_scorer(\n    mape, \n    greater_is_better=False\n)\n\nresults = {} # models with results\npredict_submission, best_model = '', '' # submission, best_model","a2ba0310":"!ls '..\/input'","d3a132de":"# \u0427\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\ntrain = pd.read_csv(DIR_TRAIN + 'all_auto_ru_09_09_2020.csv') #\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ntrain_upd = pd.read_csv(DIR_TRAIN_UPD+'auto_train_2.csv') #\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntrain_ed = pd.read_csv(DIR_TRAIN_ED+'displacement.csv') #\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\ntest = pd.read_csv(DIR_TEST+'test.csv')\n#test_upd = pd.read_csv(DIR_TEST_UPD+'auto_test.csv') #\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","9dae9c73":"# \u041e\u0446\u0435\u043d\u0438\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\ntrain.shape,train_upd.shape,test.shape","74637007":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432:\nprint(train.duplicated().sum(),train_upd.duplicated().sum(),test.duplicated().sum())","d04a33a8":"train.shape[0] - train.duplicated().sum(), train_upd.shape[0] - train_upd.duplicated().sum()","5578f93b":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\ntrain_upd.drop_duplicates(inplace=True)\ntrain.drop_duplicates(inplace=True)","15c38788":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\nprint(train.shape[0] - train.duplicated().sum(), train_upd.shape[0] - train_upd.duplicated().sum())\nprint(train.shape,train_upd.shape,test.shape)","f60fe4c4":"# \u0421\u0440\u0430\u0432\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432: \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u043c\u0435\u043d \u043a\u043e\u043b\u043e\u043d\u043e\u043a \u0438 \u0438\u0445 \u0442\u0438\u043f\u043e\u0432\n#compare_dataframes(train, test, show_= 2)","420b5703":"train.head(3)","2e7590a3":"# \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 engineDisplacement \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432\n'''\ntrain.drop(index=train[train['name'].isna()].index,inplace=True, axis=0)\ntrain['engineDisplacement2'] = train['name'].apply(lambda x: x.split(sep=' ')[0])\ntrain['engineDisplacement2'] = train['engineDisplacement2'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\ntrain['engineDisplacement3'] = train['vehicleConfiguration'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\n '''                                                               ","89a290b5":"# \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ndisplay_data(train)","b37ebce6":"# \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\ndisplay_data(test)","103ceceb":"train['name'].unique()","487abce0":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0435\u043d\u0443\n# \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0435 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043c\u0430\u0440\u043a\u0430\u043c \u0438 \u043c\u043e\u0434\u0435\u043b\u044f\u043c \u0430\u0432\u0442\u043e\n# \u042d\u0442\u043e \u0431\u0443\u0434\u0443\u0442 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\ntrain.dropna(subset=['price'], inplace=True, axis=0)\ntrain_upd.dropna(subset=['price'], inplace=True, axis=0)","34bbc4d2":"train[\"modelDate\"] = train[\"modelDate\"].astype(\"Int64\")\ntrain.rename({'vehicleTransmission': 'transmission'}, inplace=True, axis=1)\ntest.rename({'vehicleTransmission': 'transmission', 'model_name': 'model', 'equipment_dict': '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'},\\\n            inplace=True, axis=1)\ntrain_upd.rename({'equipment_dict': '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f', 'saleDate': 'start_date'}, inplace=True, axis=1)\n\n# \u042d\u0442\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0440\u0430\u0437\u0443\n\ndelete_columns = ['sell_id','car_url','priceCurrency','image','hidden','\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435','\u0422\u0430\u043c\u043e\u0436\u043d\u044f',\\\n                  'start_date','parsing_unixtime','rate_safety','wheelsize','vehicleConfiguration']\n\n# \u041e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0433\u043e\u0434\u0430 \u0438 \u043c\u0435\u0441\u044f\u0446\u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0442\u0438\u043f\u0430 \u0434\u0430\u0442\u0430\ncreate_year_month_from_start_date()","7e040ff9":"#pandas_profiling.ProfileReport(train)","4bbea70d":"train[['brand','model','bodyType','modelDate','productionDate','engineDisplacement','enginePower']].head(5)","fe834fbf":"test[['brand','model','bodyType','modelDate','productionDate','engineDisplacement','enginePower']].head(5)","b8079058":"#train[['productionDate','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']]","4b101624":"# \u041f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\ncat_features = ['brand', 'bodyType', 'color', \\\n               'fuelType', 'model', 'productionDate','modelDate',\\\n                'numberOfDoors','transmission','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', '\u041f\u0440\u0438\u0432\u043e\u0434']\nnum_features = [ \"enginePower\", 'mileage', 'engineDisplacement', ]\nbin_features = ['\u041f\u0422\u0421', '\u0420\u0443\u043b\u044c']","e5e2eede":"#pandas_profiling.ProfileReport(train)","5a0ef363":"train['engineDisplacement'].unique()","af85e037":"train.drop(index=train[train['name'].isna()].index,inplace=True, axis=0) # 1 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u043a\u0443\u0447\u0435\u0439 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 - \u043b\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0447\u0435\u0433\u043e\n\n# \u0412\u044b\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ntrain['engineDisplacement'] = train['name'].apply(lambda x: x.split(sep=' ')[0])\ntrain['engineDisplacement'] = train['engineDisplacement'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\ntest['engineDisplacement'] = test['engineDisplacement'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\ntest['enginePower'] = test['enginePower'].apply(lambda x: re.findall(r'(\\d+)',x)[0] \\\n                                                                if len(re.findall(r'(\\d+)',x))>0 else None)\ntest['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = test['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].apply(lambda x: re.findall(r'(\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d)',x))>0 else None)","8650276d":"# \u0412 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u044f\u0432\u043d\u043e\ntrain['engineDisplacement'].nunique()","3c8c042b":"# \u041e\u0447\u0435\u043d\u044c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432:\ntrain['engineDisplacement'].isna().sum(),train.shape","fd20722f":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\ntrain_ed.rename({'Unnamed: 0': 'ind', 'engineDisplacement': 'new_er'}, inplace=True, axis=1)\ntrain['ind'] = train.index","d1613d19":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043c\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ndel_columns(train_ed, ['brand','model','modelDate','productionDate']) \ndf = pd.merge(train, train_ed, how='left') # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c ","d092dd93":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\ndf['engineDisplacement'] = np.where(df.new_er.isna(),df['engineDisplacement'], df.new_er)","b84a0643":"# \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e\ntrain = df.copy()","fbc02ca8":"train['engineDisplacement'] = train['engineDisplacement'].astype(float)","665ea514":"# C\u0442\u0430\u043b\u043e \u043f\u043e\u043b\u0443\u0447\u0448\u0435\ntrain['engineDisplacement'].isna().sum()","bb734511":"display_data(train)","fd83aa66":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ntrain.drop(index=df[df['engineDisplacement'].isna()].index,inplace=True, axis=0)\ndel_columns(train, ['ind','new_er','name'])","71075e22":"create_year_month_from_ownership()","0b85c7fd":"train[['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434','sale_year']]","0fc0ba77":"train.columns.tolist()","40b5e5a4":"train['color'].unique()","3647c7be":"train_upd['color'].unique()","f62059c9":"train['color'] = train['color'].map(dict_color)","d0dcbc9b":"train['color'].unique()","8a098c3e":"train_upd['transmission'].unique()","6d3525e6":"train['transmission'] = train['transmission'].map(dict_transmission)\ntrain_upd['transmission'] = train_upd['transmission'].map(dict_transmission2)","93dba8ca":"train['transmission'].unique()","89e9786e":"train['\u0420\u0443\u043b\u044c'] = train['\u0420\u0443\u043b\u044c'].map(dict_wheel)","077793d9":"train['\u041f\u0422\u0421'] = train['\u041f\u0422\u0421'].map(dict_pts)","4d6b7bef":"display_data(train)","8fd06efe":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440\ntrain = train.append(train_upd[train.columns.tolist()])","c2e9170e":"# \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0430\u0432\u0442\u043e \u0438\u0437 description\n# \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\n#train['description'].fillna('', inplace=True)\n#train['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = train['description'].apply(lambda x: re.findall(r'\\s(\\w+)\\s\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438', x)[0].lower()[:5] if len(re.findall(r'\\s(\\w+)\\s\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438', x))>0 else '')\n#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u0435 \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0432\u044b\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u044f \u0435\u0433\u043e \u0438\u0437 description \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f: \u0431\u043e\u043b\u0435\u0435 60 \u0442\u044b\u0441 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c\u0438","5c16614a":"train.head(5)","ae76126c":"display_data(train)","dc4670e5":"#json.loads(test['equipment_dict'][10])\n#json.loads(test['super_gen'][10])","4b0bf56f":"train['price'].describe()","a20806f0":"# \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044f\u0432\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430 2 \u043d\u0443\u043b\u044f\ntrain[train['price']==train['price'].max()]","3b85d82f":"train['price'] = train['price'].apply(lambda x: x\/100 if x==train['price'].max() else x)\n      ","53ae755d":"# \u0426\u0435\u043d\u044b \u0431\u0443\u0434\u0443\u0442 \u0432 \u0442\u044b\u0441\u044f\u0447\u0430\u0445 \u0440\u0443\u0431\u043b\u0435\u0439\ntrain['price'] = train['price'] \/1000","2c3284a9":"train[train['price']==train['price'].max()]","a1b73ff2":"get_boxplot(train, 'brand', 'price')","ed11e50b":"train.shape","9646aa2e":"get_boxplot(train[train['brand'].isin(train['brand'].value_counts()[:20].index.tolist())], 'brand', 'price')","9987bbe4":"train[train['brand'].isin(train['brand'].value_counts()[:20].index.tolist())]","9a3bb8a3":"#train[~train['brand'].isin(list(test['brand'].unique()))]\n#brand_restriction = train['brand'].isin(list(test['brand'].unique()))","ed3f099c":"#get_boxplot(train[brand_restriction], 'brand', 'price')","c5285935":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043b\u0438\u0448\u043d\u0435\u0435\n#train.drop(index=list(train[~brand_restriction].index),axis=0, inplace=True)","69b52e4a":"sns.set()\nfig, ax = plt.subplots(figsize = (8, 4))\nsns.distplot(train['price']).set_title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443\u0441\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 TRAIN\");","356c2b24":"IQR_outlier(train,'price')","9a6f827b":"train['price'].describe()","b3e3869f":"# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\ntrain.drop(index=list(train[train['price']<300].index)+list(train[train['price']>10000].index),axis=0, inplace=True)","6b3b5997":"sns.set()\nfig, ax = plt.subplots(figsize = (8, 4))\nsns.distplot(train['price']).set_title\\\n(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 TRAIN \\n \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \\n 300 \u0442\u044b\u0441 - 10000 \u0442\u044b\u0441 \u0440\u0443\u0431\");","887fd7a3":"sns.set()\nfig, ax = plt.subplots(figsize = (8, 4))\nsns.distplot(np.log(1+train['price'])).set(title=\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\",\\\n                                           xlabel='log(price)');","d2ac6443":"train.shape","f4996dde":"get_boxplot(train, 'brand', 'price')","9642e402":"train['brand'].nunique()","fb749867":"# \u041e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e 20-\u0442\u0438 \u0431\u0440\u0435\u043d\u0434\u043e\u0432\ntrain2 = train[train['brand'].isin(train['brand'].value_counts()[:12].index.tolist())]","18956d21":"get_boxplot(train2, 'brand', 'price')","7e4e0420":"sns.set()\nfig, ax = plt.subplots(figsize = (8, 4))\nsns.distplot(train2['price']).set_title\\\n(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 TRAIN \\n \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0431\u043e\u0440\u0430 \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \\n 300 \u0442\u044b\u0441 - 10000 \u0442\u044b\u0441 \u0440\u0443\u0431\\\n         \\n \u0434\u043b\u044f 20 \u0432\u0435\u0434\u0443\u0449\u0438\u0445 \u043c\u0430\u0440\u043e\u043a \u0430\u0432\u0442\u043e\");","801995c2":"sns.set()\nfig, ax = plt.subplots(figsize = (8, 4))\nsns.distplot(np.log(1+train2['price'])).set(title=\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\",\\\n                                           xlabel='log(price)');","86203d4b":"# \u041f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0446\u0435\u043d\u0430\u0445 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0431\u0440\u0435\u043d\u0434\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 price2\n\n# \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0446\u0435\u043d\u0443 \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043e\u043a\ntrain2 = train2.assign(price2 = train2['price'])\nfor brand in train2['brand'].unique().tolist(): # \u0446\u0438\u043a\u043b \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c\n    #print(brand)\n    mask = train2['brand']==brand\n    df = train2.loc[mask]\n    low, high = IQR_outlier(df,'price2',False) # \u0433\u0440\u0430\u043d\u0438\u0446 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0445\u0430\n    new_val = df['price2'].apply(lambda x: x if x>low else low)\n    df['price2'] = new_val\n    new_val = df['price2'].apply(lambda x: x if x<high else high)\n    df['price2'] = new_val\n    train2.loc[mask,'price2'] = df['price2']\n    ","ffd373fc":"# \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\nget_boxplot(train2, 'brand', 'price2')","5643e3bc":"# \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e\ntrain = train2.copy()\ntrain.reset_index(inplace = True, drop = True)","08435b65":"cat_features","14f35037":"cat_quality_values = {}","499e5814":"display_data(train,cat_features)","65ec3b87":"sorted(train['brand'].unique())","218fe82a":"sorted(test['brand'].unique())","4340400b":"train['brand'].value_counts(ascending=False).plot(kind='barh',figsize=(7,6))","f4426cd0":"train['bodyType'].nunique() # 11","b3805dbf":"test['bodyType'].unique()","01f0d78b":"train['bodyType'] = train['bodyType'].apply(lambda x: x.lower())","47d9bcab":"#train['bodyType2'] = train['bodyType'].apply(lambda x: x.split(sep=' ')[1:] if len(x.split(sep=' '))>1 else '' )\ntrain['bodyType'] = train['bodyType'].apply(lambda x: x.split(sep=' ')[0] if len(x.split(sep=' '))>0 else '' )\n# \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0435\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439\n#train['bodyType2'].value_counts() \n#del_columns(train,['bodyType2'])","927e6508":"# \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u0435 'bodyType' : 16 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nfor str_ in ['\u043a\u0443\u043f\u0435','\u0441\u0435\u0434\u0430\u043d','\u043f\u0438\u043a\u0430\u043f','\u0445\u044d\u0442\u0447\u0431\u0435\u043a','\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b','\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a']:\n    train['bodyType'] = train['bodyType'].apply(lambda x: str_ if x[0:len(str_)]==str_ else x )","2414b3d2":"train['bodyType'].value_counts(ascending=False).plot(kind='barh',figsize=(7,6))","208f3556":"#\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044f\u043c\u0438 \u0430\u0432\u0442\u043e:\n#train['bodyType'] = train['bodyType'].apply(lambda x: '\u0441\u0435\u0434\u0430\u043d' if x in ['\u0445\u044d\u0442\u0447\u0431\u0435\u043a','\u0444\u0430\u0441\u0442\u0431\u0435\u043a','\u043b\u0438\u0444\u0442\u0431\u0435\u043a'] else x )\n#train['bodyType'] = train['bodyType'].apply(lambda x: '\u043a\u0430\u0431\u0440\u0438\u043e\u043b\u0435\u0442' if x in ['\u0442\u0430\u0440\u0433\u0430','\u0440\u043e\u0434\u0441\u0442\u0435\u0440','\u043a\u0443\u043f\u0435'] else x )\n#train['bodyType'] = train['bodyType'].apply(lambda x: '\u0444\u0443\u0440\u0433\u043e\u043d' if x in ['\u043c\u0438\u043d\u0438\u0432\u044d\u043d','\u043a\u043e\u043c\u043f\u0430\u043a\u0442\u0432\u044d\u043d','\u043c\u0438\u043a\u0440\u043e\u0432\u044d\u043d','\u043b\u0438\u043c\u0443\u0437\u0438\u043d'] else x )","09093de2":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 9+1\ncat_quality_values['bodyType'] = 9","3c990fb4":"train['bodyType'].value_counts(ascending=False).plot(kind='barh',figsize=(7,6))","861d0be0":"len(train['model'].unique())","87cca88c":"train['model'].value_counts()[:20]","ace330dd":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438\ncat_quality_values['model'] = 20","ccf0046f":"train['modelDate'].nunique()","aef37e00":"train['modelDate'].value_counts(ascending=False).plot(kind='barh',figsize=(8,15));","bbd1c59f":"train['modelDate'].value_counts()[:25]","398ab3ac":"train['productionDate'] = train['productionDate'].astype(int)\ntrain['productionDate'].value_counts(ascending=False).plot(kind='barh',figsize=(8,15));","f4fc58a2":"train['productionDate'].value_counts()[:25]","054dc248":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438\ncat_quality_values['modelDate'] = 25\ncat_quality_values['productionDate'] = 25","d33100a0":"train['color'].value_counts(ascending=False).plot(kind='barh',figsize=(8,8));","688494f1":"cat_features","77e0c8a8":"train['cat_engineDisplacement'] = train['engineDisplacement'].astype(str)","ff8a86f9":"cat_features.append('cat_engineDisplacement')","f9f6ce90":"train['cat_engineDisplacement'].value_counts(ascending=False).plot(kind='barh',figsize=(8,15));","2121438c":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438: 10+1\ncat_quality_values['cat_engineDisplacement'] = 10","45d29906":"train['fuelType'].value_counts(ascending=False).plot(kind='barh',figsize=(8,3));","b8236d19":"# \u0411\u0435\u043d\u0437\u0438\u043d, \u0434\u0438\u0437\u0435\u043b\u044c \u0438 \u043f\u0440\u043e\u0447\u0438\u0435\n# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438: 2+1\ncat_quality_values['fuelType'] = 2","a4936357":"train['numberOfDoors'].value_counts(ascending=False).plot(kind='barh',figsize=(8,3));","7ab4550e":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438: 2+1\ncat_quality_values['numberOfDoors'] = 2","8b5b5f45":"train['transmission'].value_counts(ascending=False).plot(kind='barh',figsize=(8,3));","f1bae398":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].isna().sum()","ab2068bb":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts(ascending=False).plot(kind='barh',figsize=(8,2));","44c32391":"train.groupby(['productionDate'])['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].median()[:3]","59da69f7":"# \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u043e\u0432\u044b\u0439. \u041f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 0\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0, inplace=True)","96e85738":"train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].value_counts(ascending=False).plot(kind='barh',figsize=(8,2));","483568cd":"train[['productionDate', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435']]","917ca87c":"train[train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==0][['productionDate', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435']]","94586289":"train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where(train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434']==0,np.nan,train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])","28c3b189":"train[['productionDate', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435']]","bb02cf22":"#fullfil_omissions(train, ['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'],[['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b', 'productionDate'],['productionDate'],[]], _type=1)","c1717dc0":"# \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\ntrain['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].isna()) & (train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==1),train['productionDate'] ,train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\n#train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].isna())&(train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==3),train['sale_year']-1 ,train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\ntrain['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].isna())&(train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']>1),train['sale_year']-(train['sale_year']-train['productionDate'])\/\/train['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] ,train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])","4bfde55a":"train[['productionDate', '\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434','\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441', '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435', 'sale_year']]","5d32f1fb":"train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].value_counts(ascending=False).plot(kind='barh',figsize=(8,10));","4c36ef38":"train['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].describe()","b394eabe":"# \u0413\u043e\u0442\u043e\u0432\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438: 15+1\ncat_quality_values['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = 15","9083990f":"train['\u041f\u0440\u0438\u0432\u043e\u0434'].value_counts(ascending=False).plot(kind='barh',figsize=(8,2));","8d95395b":"display_data(train,cat_features)","22534c94":"cat_quality_values","0ba16c0c":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f cat_quality_values \u0441 \u0443\u043a\u0430\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\nfor feature in cat_quality_values.keys():\n    \n    cut_tails(train, feature, cat_quality_values[feature])","543cafa0":"display_data(train,cat_features+[x+'_c' for x in list(cat_quality_values.keys())])","152d6af7":"list(set(cat_features) - set(list(cat_quality_values.keys())).union(set([x+'_c' for x in list(cat_quality_values.keys())])))","e0eb9daa":"list(set(cat_features) - set(list(cat_quality_values.keys())))","c7194273":"cat_features = list(set(cat_features) - set(list(cat_quality_values.keys()))) + [x+'_c' for x in list(cat_quality_values.keys())]","aa57c17b":"cat_features","5b76648f":"display_data(train[num_features])","39a7a1ac":"train['mileage'] = np.round(train['mileage']\/1000).astype(int)\ntrain['enginePower'] = train['enginePower'].astype(int)","ef7c7fc9":"train['mileage'].describe()","06f69111":"train['enginePower'].describe()","bba598f9":"train['engineDisplacement'].unique()","cd13e007":"# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0431\u0435\u0437 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438\u043b\u0438 \u043d\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f\n# \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443, \u0430 \u043f\u043e\u0442\u043e\u043c \u044d\u0442\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e \u0438\u043b\u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u0432 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435( \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0431\u044b\u043b\u0438 - \u043d\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b,\n# \u0430 \u0442\u0430\u043a \u0438 \u0437\u0430\u0434\u0443\u043c\u044b\u0432\u0430\u043b\u043e\u0441\u044c) \u0438\u043b\u0438 \u043c\u044b \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441\u043e \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u043e\u043c\n\nnum_features_c = [] #C\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0438\u0437 \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c!\n\nfor feature in num_features:\n    try:\n        num_features_c.append(feature + '_c')\n        # \u0421\u0442\u0440\u043e\u0438\u0442 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0431\u0435\u0437 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432:\n        cut_outlier(train, feature) \n    except Exception as err:\n        print(err, feature)\n        continue    ","24f2722d":"a4_dims = (10, 2)\nfor feature in num_features:\n    \n    #plt.figure(figsize=(2,2))\n    fig, axes = plt.subplots(1, 2, figsize=a4_dims)\n    sns.boxplot(data=train, x=feature, ax=axes[0]);\n    sns.boxplot(data=train, x=feature+'_c', ax=axes[1]);\n    plt.show()\n","0406a2b0":"# \u0413\u0440\u0443\u043f\u043f\u0430 \u043f\u043e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u043b\u043e\u0433\u0430\ntrain['groupPower'] = train['enginePower']\/\/50\ntrain['groupPower'] = train['groupPower'].apply(lambda x: 0 if x==1 else x)\ntrain['groupPower'] = train['groupPower'].apply(lambda x: 5 if x>5 else x)\ntrain['groupPower'] = train['groupPower'].astype(int)","e5c02e2b":"train['groupPower'].value_counts(ascending=False).plot(kind='barh',figsize=(8,4));","97c873b1":"cat_features.append('groupPower')","646b2572":"display_data(train, bin_features)","3dd8da82":"train['\u041f\u0422\u0421'].value_counts(ascending=False).plot(kind='barh',figsize=(8,2));","9b77e192":"train['\u0420\u0443\u043b\u044c'].value_counts(ascending=False).plot(kind='barh',figsize=(8,2));","71bb68df":"def create_features(df, new_num_features):\n    '''\n    \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    '''\n    \n     # \u0413\u0440\u0443\u043f\u043f\u0430 \u043f\u043e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u043b\u043e\u0433\u0430\n    df['groupPower'] = df['enginePower']\/\/50\n    df['groupPower'] = df['groupPower'].apply(lambda x: 0 if x==1 else x)\n    df['groupPower'] = df['groupPower'].apply(lambda x: 5 if x>5 else x)\n    df['groupPower'] = df['groupPower'].astype(int)\n    \n\n    # \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e \n    # \u0438 \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u0433\u043e\u0434 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c: \u043a\u043c\/\u0432\u043e\u0437\u0440\u0430\u0441\u0442\n    # new_num_features - \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u043e\u0432\u044b\u0445 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\n    \n    # \u0432\u043e\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e : 10 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430(\u0430\u0432\u0442\u043e \u0431\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u0433\u0430, \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u0434\u0438\u043b\u0435\u0440\u0430)\n    df['sale_year'] = np.where(df['sale_year']<df['productionDate'],df['productionDate'],df['sale_year'])\n    df['age'] = df['sale_year'] - df['productionDate']\n    new_num_features.append('age')\n    \n    # \u0435\u0441\u043b\u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 = 0, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u044c \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u0430\u0436\n\n    df['degree_use'] = np.divide(df['mileage'], df['age'], where=df['age']!=0)\n    df['degree_use'][np.isinf(df['degree_use'])] = df['mileage']\n    \n    #df['degree_use'] = round(df['degree_use']\/1000)\n    new_num_features.append('degree_use')\n    \n        \n    # \u041d\u043e\u0432\u044b\u0439 \u043d\u0430\u043b\u043e\u0433 \u0431\u0435\u0437 \u043d\u0430\u0434\u0431\u0430\u0432\u043e\u0447\u043d\u043e\u0433\u043e \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\n    df['tax'] = (df['groupPower']*50).map(TAX)\n    df['tax_2021'] = df['tax'] * df['enginePower']\n    \n    new_num_features.append('tax_2021')\n    df['degree_use'] = round(df['degree_use']\/1000,1)\n    # \u041d\u0410 \u0441\u043b\u0443\u0447\u0430\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\n    fullfil_omissions(df, new_num_features, arr_grp = [['brand','model'],['brand'],[]], _type=0)\n    \n   \n    return","329b8ba5":"new_num_features = []\ncreate_features(train, new_num_features)","d847baf1":"display_data(train)","a3c8a755":"train[~train['tax'].isna()][['tax','enginePower','groupPower']]","d9aacf4e":"train['groupPower'].unique()","3932eebe":"TAX","b7c8d211":"#profile_report = pandas_profiling.ProfileReport(train)\n#profile_report","9ec233a2":"train.drop_duplicates(inplace=True)","bbd92b4e":"# \u0414\u043e\u0441\u0442\u0430\u0435\u043c \u043e\u043f\u0446\u0438\u0438 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u0438 \n#train[\"complect\"] = train[\"\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f\"].apply(lambda x: re.findall(r\"'available_options': \\[([\\w\\s\\-,\\'\\\"]+)\\], \",x))\n#train[\"complect\"] = train[\"complect\"].apply(lambda x: re.sub('\\'','',x[0]) if len(x)>0 else '')\n#train[\"len_complect\"] = train[\"complect\"].apply(lambda x: len(x))\n\n#train['descr'] = train['description'].apply(get_complect_from_description)\n\n# \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043d\u0430 100%, \u043c\u043e\u0436\u043d\u043e \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u0437 description\n#train['\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435'] = train['description'].apply(lambda x: re.findall(r'\\s(\\w+)\\s\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438', x)[0].lower()[:5] if len(re.findall(r'\\s(\\w+)\\s\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438', x))>0 else '')","9a0a8990":"#!pip install -U numpy","d2c5ed20":"train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\n# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\ndata = test.append(train, sort=False).reset_index(drop=True) ","8d3f4022":"data.head(5)","e24b1eda":"#profile_report = pandas_profiling.ProfileReport(data)\n#profile_report","2440a5da":"#plt.figure(figsize=(10,7), dpi =100)\n#plot = sns.countplot(train['model_name_c'], order=train['model_name_c'].value_counts().index)\n#plot.set_xticklabels(plot.get_xticklabels(), rotation = 90)\n#plt.tight_layout()","76001978":"#get_boxplot(train, 'brand', 'price')","7995afa4":"data.info()","4db6fb48":"def update_test(test,test_upd):\n    '''\n    \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n    '''\n    # \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\n    test_upd.drop_duplicates(subset=['car_url'], inplace=True)\n\n    # \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    test.rename({'model_name': 'model_name_old','equipment_dict':'equipment_dict_old', 'super_gen':'super_gen_old','vendor': 'vendor_c',\\\n            'vehicleTransmission': 'transmission'}, axis='columns', inplace=True)\n    \n    # \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\n    test_new = pd.merge(test,test_upd,on='car_url',how='left')\n    \n    test_new['model_name'].fillna(test_new['model_name_old'], inplace=True)\n    test_new['equipment_dict'].fillna(test_new['equipment_dict_old'], inplace=True)\n    test_new['super_gen'].fillna(test_new['super_gen_old'], inplace=True)\n    \n    # \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    test_new.drop(['model_name_old','equipment_dict_old','super_gen_old','image','rate_safety',\\\n                'co2','priceCurrency', 'sell_id','vehicleConfiguration'],axis=1, inplace=True)\n    \n    # \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n    test = test_new\n    del test_new\n    gc.collect()\n    \n    return","c7a0b466":"def update_engineDisplacement(train, train_ed):\n    \n    #ONLY TRAIN\n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\n    train_ed.rename({'Unnamed: 0': 'ind', 'engineDisplacement': 'new_er'}, inplace=True, axis=1)\n    train['ind'] = train.index\n    \n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043c\u0430 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\n    del_columns(train_ed, ['brand','model','modelDate','productionDate']) \n    df = pd.merge(train, train_ed, how='outer') # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \n    \n    # \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430\n    df['engineDisplacement'] = np.where(df.new_er.isna(),df['engineDisplacement'], df.new_er)\n    \n    # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e\n    train = df.copy()\n    \n    # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u044a\u0435\u043c\u043e\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\n    train.drop(index=train[train['engineDisplacement'].isna()].index,inplace=True, axis=0)\n    del_columns(train, ['ind','new_er','name'])\n    \n    train['engineDisplacement'] = train['engineDisplacement'].astype(float)\n    \n    del df\n    gc.collect()\n    \n    return","ba022e80":"def prerocessing_train(train):\n    '''\n    \n    '''\n    #ONLY TRAIN\n    \n    # \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n    train.drop(index=list(train[train['price']<300000].index)+list(train[train['price']>10000000].index),axis=0, inplace=True)\n\n    # \u041e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e 12-\u0442\u0438 \u0431\u0440\u0435\u043d\u0434\u043e\u0432\n    train2 = train[train['brand'].isin(train['brand'].value_counts()[:12].index.tolist())]\n\n    # \u041f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0446\u0435\u043d\u0430\u0445 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0431\u0440\u0435\u043d\u0434\u0430. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 price2\n\n    # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0446\u0435\u043d\u0443 \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u043e\u043a\n    train2 = train2.assign(price_c = train2['price'])\n    for brand in train2['brand'].unique().tolist(): # \u0446\u0438\u043a\u043b \u043f\u043e \u0431\u0440\u0435\u043d\u0434\u0430\u043c\n        #print(brand)\n        mask = train2['brand']==brand\n        df = train2.loc[mask]\n        low, high = IQR_outlier(df,'price_c',False) # \u0433\u0440\u0430\u043d\u0438\u0446 \u043c\u0435\u0436\u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0430\u0445\u0430\n        new_val = df['price_c'].apply(lambda x: x if x>low else low)\n        df['price_c'] = new_val\n        new_val = df['price_c'].apply(lambda x: x if x<high else high)\n        df['price_c'] = new_val\n        train2.loc[mask,'price_c'] = df['price_c']\n\n    # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e\n    train = train2.copy()\n    train.reset_index(inplace = True, drop = True)\n    \n    del train2\n    gc.collect()\n    \n    return","cc37c533":"# \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438\ndel train\ndel train_upd\ndel train_ed\ndel test\ndel data\ngc.collect()","af3faf0f":"train = pd.read_csv(DIR_TRAIN + 'all_auto_ru_09_09_2020.csv') #\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ntrain_upd = pd.read_csv(DIR_TRAIN_UPD+'auto_train_2.csv') #\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\ntrain_ed = pd.read_csv(DIR_TRAIN_ED+'displacement.csv') #\u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\ntest = pd.read_csv(DIR_TEST+'test.csv')\nsample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')","1dc3e587":"train.head(3)","e0e15266":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\n\ntrain.drop_duplicates(inplace=True)\ntrain.drop(index=train[train['name'].isna()].index,inplace=True, axis=0) # 1 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u043a\u0443\u0447\u0435\u0439 \u043d\u0435\u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 - \u043b\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0447\u0435\u0433\u043e","43d1add8":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0446\u0435\u043d\u0443\n\ntrain.dropna(subset=['price'], inplace=True, axis=0)\ntrain_upd.dropna(subset=['price'], inplace=True, axis=0)","fb7c5cfe":"train.rename({'vehicleTransmission': 'transmission'}, inplace=True, axis=1)\ntest.rename({'vehicleTransmission': 'transmission', 'model_name': 'model', 'equipment_dict': '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'},\\\n            inplace=True, axis=1)\ntrain_upd.rename({'equipment_dict': '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f', 'saleDate': 'start_date'}, inplace=True, axis=1)","3f09a062":"create_year_month_from_start_date()","497461a9":"train['transmission'] = train['transmission'].map(dict_transmission)\ntrain_upd['transmission'] = train_upd['transmission'].map(dict_transmission2)\ntrain['color'] = train['color'].map(dict_color)\ntrain['\u0420\u0443\u043b\u044c'] = train['\u0420\u0443\u043b\u044c'].map(dict_wheel)\ntrain['\u041f\u0422\u0421'] = train['\u041f\u0422\u0421'].map(dict_pts)","2a38e3a6":"# \u0412\u044b\u0442\u0430\u0441\u043a\u0438\u0432\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043c \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f\ntrain['engineDisplacement'] = train['name'].apply(lambda x: x.split(sep=' ')[0])\ntrain['engineDisplacement'] = train['engineDisplacement'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\ntest['engineDisplacement'] = test['engineDisplacement'].apply(lambda x: re.findall(r'(\\d\\.\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d\\.\\d)',x))>0 else None)\n\ntest['enginePower'] = test['enginePower'].apply(lambda x: re.findall(r'(\\d+)',x)[0] \\\n                                                                if len(re.findall(r'(\\d+)',x))>0 else None)\ntest['enginePower'] = test['enginePower'].astype(int)\ntest['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = test['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].apply(lambda x: re.findall(r'(\\d)',x)[0] \\\n                                                                if len(re.findall(r'(\\d)',x))>0 else None)","edf5aa4e":"print(train['engineDisplacement'].isna().sum())\nprint(test['engineDisplacement'].isna().sum())","3e6eaa4e":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043b\u0438 train\nupdate_engineDisplacement(train, train_ed)","c7e3d2d1":"fullfil_omissions(train, ['engineDisplacement'],[['brand','productionDate']], _type=1)\nfullfil_omissions(test, ['engineDisplacement'],[['brand','productionDate']], _type=1)","d357891d":"print(train['engineDisplacement'].isna().sum())\nprint(test['engineDisplacement'].isna().sum())","36034ca4":"# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\n#train.drop(index=list(train[train['price']<300000].index)+list(train[train['price']>5000000].index),axis=0, inplace=True)","cbd36e31":"# \u0415\u0441\u043b\u0438 \u043e\u0431\u0440\u0435\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u0431\u0440\u0435\u043d\u0434\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u0435\n#train[train['brand'].isin(test['brand'].value_counts().index.tolist())]['brand'].count()","a6b7ddd1":"#prerocessing_train(train)\n\n# \u0412\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0435\u0433\u043e \u043d\u0430\u0441 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\ntrain.drop(index=list(train[train['price']<300000].index)+list(train[train['price']>7500000].index),axis=0, inplace=True)\n\n# \u041e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043e 36-\u0442\u0438 \u0431\u0440\u0435\u043d\u0434\u043e\u0432\ntrain2 = train[train['brand'].isin(train['brand'].value_counts()[:36].index.tolist())]\n\n# \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u043c\u0435\u0441\u0442\u043e\ntrain = train2.copy()\ntrain.reset_index(inplace = True, drop = True)","85753b10":"create_year_month_from_ownership()","7872a9f1":"display_data(train)","998f7f9d":"# \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u043e\u0432\u044b\u0439. \u041f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 0\ntrain['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0, inplace=True)\n\ntrain['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)\ntrain['description'].fillna('', inplace=True)","5aa007ed":"display_data(test)","ff2ded2d":"test[['complectation_dict', '\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f']]","5e950cb7":"test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'] = np.where(test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].isna(),{\"id\":''},test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'])\ntest['complectation_dict'] = np.where(test['complectation_dict'].isna(),{\"id\":''},test['complectation_dict'])\ntest['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'] = test['\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f'].combine_first(test['complectation_dict']).astype('O')\n#\u0442\u043e\u0436\u0435 \u0441 super_gen\ndel_columns(test, ['complectation_dict','super_gen','vendor','model_info', 'name'])","1e464982":"train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\n# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c# \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u044b \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\ndata = test.append(train, sort=False).reset_index(drop=True)       ","561d6c38":"#display_data(data)\ndata.info()","337fcb3e":"data.head(5)","9c1d7e47":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438: \n# \u043e\u0447\u0438\u0449\u0430\u0435\u043c\ndata['bodyType'] = data['bodyType'].apply(lambda x: x.lower())\ndata['bodyType'] = data['bodyType'].apply(lambda x: x.split(sep=' ')[0] if len(x.split(sep=' '))>0 else '' )\n\n# \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u043b\u0435 'bodyType' : 16 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nfor str_ in ['\u043a\u0443\u043f\u0435','\u0441\u0435\u0434\u0430\u043d','\u043f\u0438\u043a\u0430\u043f','\u0445\u044d\u0442\u0447\u0431\u0435\u043a','\u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b','\u0432\u043d\u0435\u0434\u043e\u0440\u043e\u0436\u043d\u0438\u043a']:\n    data['bodyType'] = data['bodyType'].apply(lambda x: str_ if x[0:len(str_)]==str_ else x )\n    \n# \u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043d\u043e\u0432\u044b\u0439. \u041f\u043e\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c 0\n#data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].fillna(0, inplace=True)\n\ndata['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'].astype(int)\n\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434']==0) & (data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']>0),np.nan,data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\n\n# \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].isna()) & (data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==1),data['productionDate'],data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\n\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].isna())&(data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']>1),data['sale_year']-(data['sale_year']-data['productionDate'])\/\/data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'],data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\n\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434']==0) & (data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==0),data['productionDate'],data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\n\ndel_columns(data, ['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435'])  \n\ndata['engineDisplacement'] = data['engineDisplacement'].astype(float)\ndata['cat_engineDisplacement'] = data['engineDisplacement'].astype(str)\n\ndata['enginePower'] = data['enginePower'].astype(int)\ndata['numberOfDoors'] = data['numberOfDoors'].astype(int)\n\n# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f cat_quality_values \u0441 \u0443\u043a\u0430\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n# \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n#for feature in cat_quality_values.keys():\n    \n#    cut_tails(data, feature, cat_quality_values[feature])\n\n# \u0413\u0440\u0443\u043f\u043f\u0430 \u043f\u043e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u043b\u043e\u0433\u0430\n#data['groupPower'] = data['enginePower']\/\/50\n#data['groupPower'] = data['groupPower'].apply(lambda x: 0 if x==1 else x)\n#data['groupPower'] = data['groupPower'].apply(lambda x: 5 if x>5 else x)\n#data['groupPower'] = data['groupPower'].astype(int)    ","89ffc135":"data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = np.where((data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434']==0) & (data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b']==0),data['productionDate'],data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'])\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].astype('int16')\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441'] = data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441'].astype('int16')","6b2ea0c6":"for feature in cat_quality_values.keys():\n    \n    cut_tails(data, feature, cat_quality_values[feature])","be9038fa":"cat_quality_values","f14324e4":"data['model_c'].nunique()","5838b6f7":"new_num_features = []\ncreate_features(data, new_num_features)","bb1802b8":"data.info()","9c4c4c42":"display_data(data,num_features)","0d4b5ff0":"num_features_c","f6868879":"display_data(data,new_num_features)","64992366":"display_data(data,cat_features)","2fb87aef":"display_data(data,bin_features)","4492ba76":"data.head(5)","2326e931":"data[\"\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f\"]","fd69379b":"#data[\"\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f\"] = data[\"\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f\"].apply(lambda x: re.sub(r\"[({'id': '0'})|('id': '\\d+')|('name': )|(:true,)({)|(})]\",'',str(x)))","dc379c47":"del_columns(data,['description','\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f','name','ind'])","90a07a14":"data['degree_use'] = data['degree_use'].astype('int32')\ndata['modelDate'] = data['modelDate'].astype(int)\ndata['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'] = data['\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u0433\u043e\u0434'].astype(int)","da3b799a":"y = data[data['sample']==1]['price']\nX = data.query('sample == 1').drop(['sample'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample'], axis=1)","03ec9094":"X.shape","10a834bf":"categorical_features_indices = list(set(X.columns)-set(['price','enginePower','tax_2021','mileage','age','degree_use', 'engineDisplacement'])-\\\n    set([x+'_c' for x in cat_quality_values.keys()]))","5743c2cd":"X[categorical_features_indices]","87122f1f":"#categorical_features_indices = np.where(X.dtypes != np.float)[0]\n#len(categorical_features_indices)","acf6a6df":"X = X[categorical_features_indices]","6c95cc16":"display_data(X)","430980cf":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","f43f2337":"def Cat_Boost_Model(X_train, X_test, target_train, target_test):\n    \n    model = CatBoostRegressor(iterations = 50,\n                              random_seed = RANDOM_SEED,\n                              eval_metric='MAPE',\n                              custom_metric=['R2', 'MAE'],\n                              silent=True,\n                             )\n    model.fit(X_train, target_train,\n             cat_features=categorical_features_indices,\n             eval_set=(X_test, target_test),\n             verbose_eval=0,\n             use_best_model=True\n             )\n    return model\n\n    \ndef _Model(name_model, X_train, X_test, LogTarget=False, **kwargs):\n    '''\n    \u041e\u0431\u043e\u043e\u043b\u043e\u0447\u043a\u0430 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n    '''   \n    \n    if LogTarget:\n        target_train = np.log(y_train)\n        target_test = np.log(y_test)\n    else:\n        target_train = y_train\n        target_test = y_test\n    \n    model = eval(name_model+'(X_train, X_test, target_train, target_test, **kwargs)')\n    \n    #model.save_model('catboost_single_model_baseline.model')\n    \n    # \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\n    if LogTarget:\n        predict = np.exp(model.predict(X_test)) \n    else:    \n        predict = model.predict(X_test)\n    \n    return model, round((mape(y_test, predict))*100,3)\n    ","a3c1ca51":"model, mape_ = _Model('Cat_Boost_Model', X_train, X_test)\nresults['Cat_Boost_Model'] = [mape_, model.get_params()]\nbest_model = 'Cat_Boost_Model'\n#predict_submission = model.predict(X_sub)\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")","e437e61d":"model, mape_ = _Model('Cat_Boost_Model',X_train, X_test, LogTarget=True)\nresults['Cat_Boost_Model_target_log'] = [mape_, model.get_params()]\n#best_model = 'Cat_Boost_Model'\n#predict_submission = model.predict(X_sub)\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")","6a584991":"if (mape_ < results[best_model][0]): \n    best_model = 'Cat_Boost_Model_target_log'    ","8ccc1f18":"#from sklearn.model_selection import cross_val_score\n#all_accuracies = cross_val_score(estimator=model, X=X_train, y=y_train, cv=5)\n#print(all_accuracies)","e3f23993":"#\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ndisplay_data(data, list_columns=cat_features)","f949dffc":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0443\u0440\u0435\u0437\u0430\u043d\u043d\u044b\u0435\n#display_data(data, list_columns=[x+'_c' for x in cat_quality_values.keys()])","1c82387b":"data['\u041f\u0422\u0421'].fillna('\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b', inplace=True)\ndata['\u041f\u0422\u0421'] = data['\u041f\u0422\u0421'].map({'\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442':0, '\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b':1}).astype('int8')","1cc815a4":"data['\u0420\u0443\u043b\u044c'] = data['\u0420\u0443\u043b\u044c'].map({'\u041b\u0435\u0432\u044b\u0439':0, '\u041f\u0440\u0430\u0432\u044b\u0439':1}).astype('int8')","518caf0e":"display(data.head(3))","cf2eba72":"#\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043e 5\nlist_columns = list(set([x+'_c' for x in cat_quality_values.keys()])) \nlist_cat_1 = [x for x in list_columns if data[x].nunique()==3] # \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043a\u043e\u043b-\u0432\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 = 3\nencoded_columns_cat_1 = pd.get_dummies(data[list_cat_1], columns=list_cat_1)","eb313146":"cat_features","8e6b79d3":"encoded_label = [i for i in cat_features if (data[i].nunique()>5)]\nencoded_ohe = list(set(cat_features) - set(encoded_label))","ffd24a7a":"encoded_label","a96d036f":"encoded_ohe","82e484da":"encoded_ohe_cat = pd.get_dummies(data[encoded_ohe], columns=encoded_ohe)","b02e0cb3":"encoded_ohe_cat.info()","f15155a7":"display(encoded_ohe_cat.head(5))","18ae51cd":"display_data(data,encoded_label)","8c6794e2":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0442\u0438\u043f\u0430\nfor feature in encoded_label:\n    data[feature] = data[feature].astype(str)","7d9527cd":"# \u041d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e LABEL - coding\n\nlabel_encoder = LabelEncoder()\n\nfor column in encoded_label:\n    try:\n        data[column] = label_encoder.fit_transform(data[column])\n    except:\n        print(column, 'control the type')\n    \ndisplay(data.head(3))","9eae39d4":"encoded_label","c3c41a15":"list(cat_quality_values.keys())","c6a0d98e":"#\u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n#del_columns(data,['description','\u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f','name'])\ndel_columns(data,list(cat_quality_values.keys())) \ndel_columns(data,encoded_ohe) ","5c19e102":"#\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 one-hot-encoded\ndata = data.join(encoded_ohe_cat)","f894cbf2":"display(data.head(3))","296d1770":"display_data(data)","1b80c71d":"#mapped_ = pd.Series(label_encoder.fit_transform(data['brand']))\n#mapped_.value_counts().plot.barh()\n#print(dict(enumerate(label_encoder.classes_)))","d8869fcc":"#display_data(data)","cceeadf3":"#data['brand_model'] = data['brand'] * data['model_name']\n#data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_1'] + 2*data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_2'] + 3*data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_3']","1ef7a14f":"correlations = data.corrwith(data['price']).sort_values(ascending=False)\nfig, ax = plt.subplots(figsize = (6, 10))\nplot = sns.barplot(y=correlations.index, x=correlations).set(xlabel='Correlation Index')","21e63679":"sns.pairplot(data[num_features+new_num_features+['price']])","7a14ffaf":"display_data(data)","2686d166":"#!!!\u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e \u043a\u0430\u043a \u043f\u043e\u043b\u044f \u043e\u0447\u0438\u0449\u0435\u043d\u044b\n#cat_features = ['bodyType', 'brand','color','fuelType','vendor','model_name','\u0420\u0443\u043b\u044c']\n#for colum in cat_features:\n#    try:\n#        data[colum] = data[colum].astype('category').cat.codes\n#    except Exception as e:\n#        print(colum,e)\n#        break","6c3b4221":"#data['\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u043e\u043b\u043d\u044b\u0439_\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439'] = data['\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u043e\u043b\u043d\u044b\u0439'] - data['\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439']","48a6b65e":"#data['fuelType_c_OTHERS'] = data['fuelType_c_OTHERS'] + data['bodyType_c']","e57fc41c":"#data['brand_production'] = data['brand'] - data['productionDate_c']","1a03b776":"#data['model_c'] = data['brand'] + data['model_c'] + data['productionDate_c']","866816ec":"data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b'] = data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_1'] + 2*data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_2'] + 3*data['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_3']","1a7e8549":"#data['transmission_\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f'] = data['transmission_\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f'] + data['transmission_\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f']","ad342f17":"#data['numberOfDoors_c_4'] = data['numberOfDoors_c_5'] + data['numberOfDoors_c_4']","8f1e90c5":"'''\ncolumns = ['price'] + list(set(data.columns)-set(['tax','age','fuelType_c_\u0434\u0438\u0437\u0435\u043b\u044c','numberOfDoors_c_5','tax_2021','modelDate_c','\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u043e\u043b\u043d\u044b\u0439',\\\n                                '\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u0435\u0440\u0435\u0434\u043d\u0438\u0439','\u041f\u0440\u0438\u0432\u043e\u0434_\u0437\u0430\u0434\u043d\u0438\u0439','groupPower','color','price','groupPower_5',\\\n                                'brand','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_1','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_2','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_3','fuelType_c_OTHERS','sale_month','sale_year',\\\n                                '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441','numberOfDoors_c_4','groupPower_0','\u0420\u0443\u043b\u044c','numberOfDoors_c_2','mileage',\\\n                                 'transmission_\u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f','transmission_\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f','degree_use','transmission_\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440']))\n\ncolumns = ['price'] + list(set(data.columns)-set(['age','fuelType_c_OTHERS','numberOfDoors_c_2',\\\n                                'sale_month','sale_year','price', 'transmission_\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f',\\\n                                '\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435_\u043c\u0435\u0441','sample','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_3', '\u041f\u0440\u0438\u0432\u043e\u0434_\u0437\u0430\u0434\u043d\u0438\u0439', 'GroupPower_0']))\nshow_correlation(data,columns)#num_features+new_num_features+['price']\n'''","e51bb510":"list_ = ['\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_1', 'fuelType_c_OTHERS', 'numberOfDoors_c_OTHERS','transmission_\u0432\u0430\u0440\u0438\u0430\u0442\u043e\u0440', '\u041f\u0440\u0438\u0432\u043e\u0434_\u0437\u0430\u0434\u043d\u0438\u0439','model_c' ]\ndel_columns(data, list_)","1c943662":"correlations = data.corrwith(data['price']).sort_values(ascending=False)\nfig, ax = plt.subplots(figsize = (6, 10))\nplot = sns.barplot(y=correlations.index, x=correlations).set(xlabel='Correlation Index')","a372220f":"data.head(3)","7f792b2f":"#data['model_c'].hist()","94dc965f":"data['sale_year'].nunique()","c37b8746":"data['price'] = data['price']\/1000\ndata['mileage'] = (data['mileage']\/1000).astype('int32')\ndata['sale_year'] = data['sale_year'] - 2000","08cc01d7":"num_features_, num_features_c = [ 'enginePower', 'mileage', 'age', 'degree_use'], []","e9dafb97":"for feature in num_features_: \n    \n    num_features_c.append(feature + '_c')\n    cut_outlier(data, feature)","14798bc9":"#sns.pairplot(data[num_features_+['price']])","d4ca18a0":"a4_dims = (10, 2)\nfor feature in num_features_:\n    \n    #plt.figure(figsize=(2,2))\n    fig, axes = plt.subplots(1, 2, figsize=a4_dims)\n    sns.boxplot(data=data, x=feature, ax=axes[0]);\n    sns.boxplot(data=data, x=feature+'_c', ax=axes[1]);\n    plt.show()","d489d797":"#for feature in num_features_:\n#    data.rename(columns={feature+'_c' : feature}, inplace=True)","5bc74ef5":"#del_columns(data, num_features_c)","8fe6bec8":"display_data(data)","6e574657":"# \u0414\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u043f\u0430\u043c\u044f\u0442\u0438\nfor col in data.columns:\n    if data[col].dtypes=='int64':\n        data[col] = data[col].astype('int32')","d19f51cc":"df_train = data[data['sample']==1]\ndf_test = data[data['sample']==0]","f1e84d99":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","084e5792":"y = data[data['sample']==1]['price']\nX = data.query('sample == 1').drop(['sample','price'], axis=1)\nX_sub = data.query('sample == 0').drop(['sample','price'], axis=1)","cb2b0d0a":"X.shape,y.shape,X_sub.shape","78a7acf2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)","5b936672":"# \u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train) #\u043e\u0431\u0443\u0447\u0430\u0435\u043c \u043d\u0430 \u0442\u0440\u0435\u043d\u0435\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nX_test_scaled = scaler.transform(X_test) # \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e","a3836693":"tmp_train = X_train.copy()\ntmp_train['price'] = y_train","dc1ab60d":"# \u041d\u0430\u0445\u043e\u0434\u0438\u043c median \u043f\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c engineDisplacement \u0432 \u0442\u0440\u0435\u0439\u043d\u0435 \u0438 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0435\u0441\u0442\npredict = X_test['engineDisplacement'].map(tmp_train.groupby('engineDisplacement')['price'].median())\n\n#\u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\nmape_ = round((mape(y_test, predict.values))*100, 3)\nresults['\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c'] = [mape_, '']\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0438\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")","3e3a02b8":"def Linear_Regression_Model(X_train, X_test,target_train, target_test):\n    \n    model = LinearRegression()\n    model.fit(X_train, target_train)\n    return model","6f6473bc":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\nmodel, mape_ = _Model('Linear_Regression_Model', X_train, X_test, LogTarget=False)\nresults['Linear_Regression_Model'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model'    \n","7ba77019":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c\nmodel, mape_ = _Model('Linear_Regression_Model', X_train, X_test, LogTarget=True)\nresults['Linear_Regression_Model_target_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model_target_log'    ","d6e11ffe":"scales = pd.Series(data=X_train.std(axis=0), index=X.columns)\nshow_weights(X.columns, model.coef_, scales)","ce595a0c":"mask_lr =  ['fuelType_c_\u0434\u0438\u0437\u0435\u043b\u044c','\u0420\u0443\u043b\u044c','engineDisplacement','\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b_0',\\\n        '\u041f\u0440\u0438\u0432\u043e\u0434_\u043f\u043e\u043b\u043d\u044b\u0439','fuelType_c_\u0431\u0435\u043d\u0437\u0438\u043d','age_c','transmission_\u0440\u043e\u0431\u043e\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f','\u041f\u0422\u0421',\\\n          'bodyType_c' ]","9f563528":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0441 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0442\u0430\u0440\u0433\u0435\u0442\u043e\u043c\nmodel, mape_ = _Model('Linear_Regression_Model', X_train[mask_lr], X_test[mask_lr], LogTarget=True)\nresults['Linear_Regression_Model_target_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model_target_log'  ","b65ba284":"def Ridge_Model(X_train, X_test,target_train, target_test, **kwargs):\n    \n    alpha = kwargs['alpha']\n    model = Ridge(alpha=alpha)\n    model.fit(X_train, target_train)\n    return model","e835049e":"# Ridge\n\nmodel, mape_ = _Model('Ridge_Model', X_train, X_test, LogTarget=False, alpha=1.0)\nresults['Ridge_Model'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Ridge_Model'    ","67e6868e":"# Ridge scaled\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nmodel, mape_ = _Model('Ridge_Model', X_train_scaled, X_test_scaled, LogTarget=False, alpha=1.0)\nresults['Ridge_Model_scaled'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Ridge_Model_scaled'    ","b32609d4":"scales = pd.Series(data=X_train_scaled.std(axis=0), index=X.columns)\nshow_weights(X.columns, model.coef_, scales)","a677fc1c":"#NMF\n#from sklearn.decomposition import NMF\n#nmf = NMF(max_iter=2000,n_components=10, random_state=0)\n#nmf.fit(X_train)\n#X_train_nmf = nmf.transform(X_train)\n#X_test_nmf = nmf.transform(X_test)","a4bff460":"# \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c f_classif (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e)\n# \u0438 SelectPercentile, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u0431\u0440\u0430\u0442\u044c 50% \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nselect = SelectPercentile(percentile=50)\nselect.fit(X_train, y_train)\n# \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440\nX_train_selected = select.transform(X_train)\nprint(\"\u0444\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 X_train: {}\".format(X_train.shape))\nprint(\"\u0444\u043e\u0440\u043c\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 X_train_selected: {}\".format(X_train_selected.shape))","6a1611d8":"X_train_selected","3d9bcfa8":"mask = select.get_support()\nprint(mask)\n# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0431\u0443\u043b\u0435\u0432\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f: \u0447\u0435\u0440\u043d\u044b\u0439 \u2013 True, \u0431\u0435\u043b\u044b\u0439 \u2013 False\nplt.matshow(mask.reshape(1, -1), cmap='gray_r')\nplt.xlabel(\"\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\")","63731bd5":"sorted(X_train.columns[mask].tolist())","9b83bde1":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f + mask\nmodel, mape_ = _Model('Linear_Regression_Model'\\\n                      , X_train[X_train.columns[mask].tolist()]\n                        , X_test[X_test.columns[mask].tolist()]\n                        , LogTarget=False\n)\nresults['Linear_Regression_Model_mask'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model_mask'    \n","0a813c28":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f + mask + log\nmodel, mape_ = _Model('Linear_Regression_Model'\\\n                      , X_train[X_train.columns[mask].tolist()]\n                        , X_test[X_test.columns[mask].tolist()]\n                        , LogTarget=True\n)\nresults['Linear_Regression_Model_mask_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model_mask_log'    ","26a092da":"select = SelectFromModel(RandomForestRegressor(n_estimators=100, random_state=42),threshold=\"median\")\nselect.fit(X_train, y_train)\nX_train_l1 = select.transform(X_train)\nprint(\"\u0444\u043e\u0440\u043c\u0430 \u043e\u0431\u0443\u0447 \u043d\u0430\u0431\u043e\u0440\u0430 X: {}\".format(X_train.shape))\nprint(\"\u0444\u043e\u0440\u043c\u0430 \u043e\u0431\u0443\u0447 \u043d\u0430\u0431\u043e\u0440\u0430 X c l1: {}\".format(X_train_l1.shape))","d1dd05db":"mask2 = select.get_support()\n# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0431\u0443\u043b\u0435\u0432\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f -- \u0447\u0435\u0440\u043d\u044b\u0439 \u2013 True, \u0431\u0435\u043b\u044b\u0439 \u2013 False\nplt.matshow(mask2.reshape(1, -1), cmap='gray_r')\nplt.xlabel(\"\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\")","dfed7dd4":"X_train.columns[mask2]","5a93759c":"# \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f + mask + log\nmodel, mape_ = _Model('Linear_Regression_Model'\\\n                      , X_train[X_train.columns[mask2].tolist()]\n                        , X_test[X_test.columns[mask2].tolist()]\n                        , LogTarget=True\n)\nresults['Linear_Regression_Model_mask_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Linear_Regression_Model_mask_log'    ","b6a88bb2":"# \u043f\u043b\u043e\u0445\u0430\u044f \u0438\u0434\u0435\u044f - \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e\n#from sklearn.feature_selection import RFE\n#select = RFE(RandomForestRegressor(n_estimators=100, random_state=RANDOM_SEED,n_jobs=-1),\n#n_features_to_select=20)\n#select.fit(X_train, y_train)\n# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n#mask_RFE = select.get_support()\n#plt.matshow(mask_RFE.reshape(1, -1), cmap='gray_r')\n#plt.xlabel(\"\u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\")","ac8ec8e6":"#Ridge: mask + scale + log\n\nX_train_scaled = X_train[X_train.columns[mask].tolist()]\nX_test_scaled = X_test[X_test.columns[mask].tolist()]\n\nX_train_scaled = scaler.fit_transform(X_train_scaled)\nX_test_scaled = scaler.transform(X_test_scaled)\n\nmodel, mape_ = _Model('Ridge_Model', X_train_scaled, X_test_scaled, LogTarget=True, alpha=1.0)\nresults['Ridge_Model_scaled_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Ridge_Model_scaled_log'","509c92f0":"#from sklearn.model_selection import GridSearchCV\n\nalphas = np.logspace(-1, 6, 100)\nsearcher = GridSearchCV(Ridge(), [{\"alpha\": alphas}], scoring=mape_scorer, cv=10)\nsearcher.fit(X_train_scaled, np.log(y_train))\n\nbest_alpha = searcher.best_params_[\"alpha\"]\nprint(\"Best alpha = %.4f\" % best_alpha)\nplt.figure(figsize=(5, 5))\nplt.plot(alphas, -searcher.cv_results_[\"mean_test_score\"])\nplt.xscale(\"log\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"CV score\")","960c50f9":"#Ridge: mask + scale + log + best_alpha\n\nX_train_scaled = X_train[X_train.columns[mask].tolist()]\nX_test_scaled = X_test[X_test.columns[mask].tolist()]\n\nX_train_scaled = scaler.fit_transform(X_train_scaled)\nX_test_scaled = scaler.transform(X_test_scaled)\n\nmodel, mape_ = _Model('Ridge_Model', X_train_scaled, X_test_scaled, LogTarget=True, alpha=best_alpha)\nresults['Ridge_Model_scaled_log_bestalpha'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Ridge_Model_scaled_log_bestalpha'","ca48ef13":"# Ridge scaled\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nmodel, mape_ = _Model('Ridge_Model', X_train_scaled, X_test_scaled, LogTarget=False, alpha=best_alpha)\nresults['Ridge_Model_scaled_bestalpha'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Ridge_Model_scaled_bestalpha'    ","e107a759":"def Lasso_Pipeline(X_train, X_test,target_train, target_test, **kwargs):\n    \n    alpha = kwargs['alpha']\n    \n    lasso_pipeline = Pipeline(steps=[\n        ('scaling', StandardScaler()),\n        ('regression', Lasso(alpha=alpha, max_iter=4000))\n    ])\n\n    model = lasso_pipeline.fit(X_train, target_train)\n    \n    return model","35228e3f":"model, mape_ = _Model('Lasso_Pipeline', X_train, X_test, LogTarget=False, alpha=best_alpha)\nresults['Lasso_Pipelinel_scaled_bestalpha'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'Lasso_Pipeline_scaled_bestalpha' ","54db9116":"'''\n# \u041f\u043e\u0438\u0441\u043a \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\nmax_depth.append(None)\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}\nrf = RandomForestRegressor(random_state=42)\nrf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, n_iter=100, \n                               cv=3, verbose=2, random_state=42, n_jobs=-1)\nrf_random.fit(X_train, y_train)\n\n\n#best_params_: \n#{'n_estimators': 300,\n# 'min_samples_split': 2,\n# 'min_samples_leaf': 1,\n# 'max_features': 'sqrt',\n# 'max_depth': None,\n# 'bootstrap': False}\n\n#best_rfr = rf_random.best_estimator_\n\n'''","a076c464":"def RandomForestRegressor_Model(X_train, X_test,target_train, target_test, **kwargs):\n       \n    model = RandomForestRegressor(random_state=RANDOM_SEED, n_jobs=-1, **kwargs)\n    model.fit(X_train, target_train)\n    return model","7d4792b7":"model, mape_ = _Model('RandomForestRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , n_estimators=400\n                      , min_samples_split=2\n                      , min_samples_leaf=1\n                      , max_features=X_train.shape[1]\/\/3\n                      , max_depth=None\n                      , bootstrap=False)\n\nresults['RandomForestRegressor_Model_400'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'RandomForestRegressor_Model_400' \n    \n#\u0421 LOG \u0414\u0410\u0415\u0422 \u041f\u0415\u0420\u0415\u041f\u041e\u041b\u041d\u0415\u041d\u0418\u0415 !    ","69d286b7":"model, mape_ = _Model('RandomForestRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , n_estimators=300\n                      , min_samples_split=2\n                      , min_samples_leaf=1\n                      , max_features=X_train.shape[1]\/\/3 \n                      , max_depth=None\n                      , bootstrap=False)\n\nresults['RandomForestRegressor_Model_300'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'RandomForestRegressor_Model_300' ","efc18ae7":"def GradientBoostingRegressor_Model(X_train, X_test,target_train, target_test, **kwargs):\n       \n    model = GradientBoostingRegressor(random_state=RANDOM_SEED, **kwargs)\n    model.fit(X_train, target_train)\n    return model","4133b42f":"#random_grid = {'n_estimators': [int(x) for x in np.linspace(start = 100, stop = 1000, num = 8)],\n#               'max_features': ['auto', 'sqrt', 'log2'],\n#               'max_depth': [int(x) for x in np.linspace(5, 15, num = 6)] + [None],!!!X_train.shape[1]\/\/3\n#               'min_samples_split': [2, 5, 10],\n#               'min_samples_leaf': [1, 2, 4]}\n\n#gbr = GradientBoostingRegressor()\n#gbr_random = RandomizedSearchCV(estimator = gbr, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=10, random_state=RANDOM_SEED, n_jobs = -1)\n#gbr_random.fit(X_train, np.log(y_train))\n#gbr_random.best_params_\n","8ee51a17":"model, mape_ = _Model('GradientBoostingRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , n_estimators=485\n                      , min_samples_split=5\n                      , min_samples_leaf=4\n                      , max_features=X_train.shape[1]\/\/3\n                      , max_depth=9)\n\nresults['GradientBoostingRegressor_Model'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'GradientBoostingRegressor_Model' ","37fecab7":"def hyperopt_score(params):\n    #clf = XGBClassifier(job=-1,**params)\n    model = GradientBoostingRegressor(**params)\n    # \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u0435 \u043f\u043e 3\u0435\u043c \u0444\u043e\u043b\u0434\u0430\u043c, \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0441\u0442\u0430\u0445\u043e\u0441\u0442\u0438\u0447\u043d\u043e\u0441\u0442\u0438\n    # \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c train_test_split \u043e\u0434\u0438\u043d \u0440\u0430\u0437\n    current_score = cross_val_score(model, X_train, y_train, cv=10).mean()\n    print(current_score, params)\n    return -current_score","30806823":"'''\nsimple_space_xgb = {\n            'n_estimators': hp.choice('n_estimators', range(200, 400, 200)),\n            'max_features': hp.choice('max_features',['auto', 'sqrt', 'log2']),\n            'max_depth':  hp.choice('max_depth', np.linspace(5, 15, num = 6)),\n    \n            \n}\n \nbest = fmin(fn=hyperopt_score,space=simple_space_xgb, algo=tpe.suggest, max_evals=10)\nprint('best:')\nprint(best)\n'''","5191fe67":"xgbr = XGBRegressor()","cfe46a39":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\nXGBRegressor()","81e6d951":"def XGBRegressor_Model(X_train, X_test,target_train, target_test, **kwargs):\n       \n    model = XGBRegressor(random_state=RANDOM_SEED, n_jobs=-1, **kwargs)\n    model.fit(X_train, target_train)\n    return model","019831f7":"model, mape_ = _Model('XGBRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      )\n\nresults['XGBRegressor_Model_default'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'XGBRegressor_Model_default' ","431f790a":"# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 XGB\n# \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 100\n# \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435n_estimator\n# \u0441 10-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u043e\u0439\n# \u044d\u0442\u043e 90 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (9 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0439 \u0445 10 \u0440\u0430\u0437)\n'''\nmodel = XGBRegressor()\nn_estimators = range(100, 1000, 100)\nparam_grid = dict(n_estimators=n_estimators)\nkfold = KFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)\ngrid_search = GridSearchCV(model, param_grid, scoring=mape_scorer, n_jobs=-1, cv=kfold)\ngrid_result = grid_search.fit(X_train, y_train)\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))\n# plot\nplt.figure(figsize=(6, 6))\nplt.errorbar(n_estimators, means, yerr=stds)\nplt.title(\"XGBoost n_estimators vs MAPE\")\nplt.xlabel('n_estimators')\nplt.ylabel('MAPE')\nplt.savefig('n_estimators.png')\n'''\n# \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n#Best: -0.114720 using {'n_estimators': 500}\n#-0.123461 (0.001787) with: {'n_estimators': 100}\n#-0.117509 (0.001261) with: {'n_estimators': 200}\n#-0.115630 (0.001298) with: {'n_estimators': 300}\n#-0.114863 (0.001243) with: {'n_estimators': 400}\n#-0.114720 (0.001255) with: {'n_estimators': 500}\n#-0.114933 (0.001246) with: {'n_estimators': 600}\n#-0.115116 (0.001319) with: {'n_estimators': 700}\n#-0.115339 (0.001304) with: {'n_estimators': 800}\n#-0.115707 (0.001253) with: {'n_estimators': 900}\n\n\n#Best: -0.112350 using {'n_estimators': 400}\n\n#-0.119309 (0.001934) with: {'n_estimators': 100}\n#-0.114312 (0.002055) with: {'n_estimators': 200}\n#-0.112806 (0.002033) with: {'n_estimators': 300}\n#-0.112350 (0.002095) with: {'n_estimators': 400}\n#-0.112424 (0.001932) with: {'n_estimators': 500}\n#-0.112540 (0.001926) with: {'n_estimators': 600}\n#-0.112719 (0.001965) with: {'n_estimators': 700}\n#-0.112951 (0.001909) with: {'n_estimators': 800}\n#-0.113269 (0.001881) with: {'n_estimators': 900}\n","cfb70de7":"model, mape_ = _Model('XGBRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , n_estimators=500\n                      )\n\nresults['XGBRegressor_Model_500'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'XGBRegressor_Model_500' ","27b28611":"# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432  \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u043b\u0443\u0431\u0438\u043d\u044b \u0432 XGB\n# \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - 100\n# \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 n_estimator \u0438 max_depth\n# \u0441 3-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043e\u0439 \u0441\u0441\u044b\u043b\u043a\u043e\u0439\n# \u0441 200, 400, 600, 800, 1000, 1200 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u043c\u0438\n# \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 4, 6, 8, 10\n# \u044d\u0442\u043e 72 \u043c\u043e\u0434\u0435\u043b\u0438 (24 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0445 3 \u0440\u0430\u0437)\n'''\nmodel = XGBRegressor()\nn_estimators = range(200, 1300, 200)\nmax_depth = [4, 6, 8, 10]\nparam_grid = dict(max_depth=max_depth, n_estimators=n_estimators)\nkfold = KFold(n_splits=3, shuffle=True, random_state=RANDOM_SEED)\ngrid_search = GridSearchCV(model, param_grid, scoring=mape_scorer, n_jobs=-1, cv=kfold, verbose=1)\ngrid_result = grid_search.fit(X_train, y_train)\n\n# summarize results\nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score']\nstds = grid_result.cv_results_['std_test_score']\nparams = grid_result.cv_results_['params']\nfor mean, stdev, param in zip(means, stds, params):\n    print(\"%f (%f) with: %r\" % (mean, stdev, param))\n    \n# plot\nplt.figure(figsize=(6, 6))\nscores = np.array(means).reshape(len(max_depth), len(n_estimators))\nfor i, value in enumerate(max_depth):\n    plt.plot(n_estimators, scores[i], label='depth: ' + str(value))\nplt.legend()\nplt.xlabel('n_estimators')\nplt.ylabel('MAPE')\nplt.savefig('n_estimators_vs_max_depth.png')\n\n'''\n#Best: -0.116063 using {'max_depth': 6, 'n_estimators': 400}\n#-0.126566 (0.000093) with: {'max_depth': 4, 'n_estimators': 200}\n#-0.120871 (0.000437) with: {'max_depth': 4, 'n_estimators': 400}\n#-0.118598 (0.000595) with: {'max_depth': 4, 'n_estimators': 600}\n#-0.117768 (0.000689) with: {'max_depth': 4, 'n_estimators': 800}\n#-0.117224 (0.001031) with: {'max_depth': 4, 'n_estimators': 1000}\n#-0.116853 (0.001315) with: {'max_depth': 4, 'n_estimators': 1200}\n#-0.116850 (0.000918) with: {'max_depth': 6, 'n_estimators': 200}\n#-0.116063 (0.001179) with: {'max_depth': 6, 'n_estimators': 400}\n#-0.116690 (0.001288) with: {'max_depth': 6, 'n_estimators': 600}\n#-0.117446 (0.001271) with: {'max_depth': 6, 'n_estimators': 800}\n#-0.118283 (0.001340) with: {'max_depth': 6, 'n_estimators': 1000}\n#-0.118881 (0.001295) with: {'max_depth': 6, 'n_estimators': 1200}\n#-0.116562 (0.001200) with: {'max_depth': 8, 'n_estimators': 200}\n#-0.117784 (0.001319) with: {'max_depth': 8, 'n_estimators': 400}\n#-0.118774 (0.001204) with: {'max_depth': 8, 'n_estimators': 600}\n#-0.119373 (0.001197) with: {'max_depth': 8, 'n_estimators': 800}\n#-0.119709 (0.001155) with: {'max_depth': 8, 'n_estimators': 1000}\n#-0.119956 (0.001147) with: {'max_depth': 8, 'n_estimators': 1200}\n#-0.117536 (0.000451) with: {'max_depth': 10, 'n_estimators': 200}\n#-0.118603 (0.000386) with: {'max_depth': 10, 'n_estimators': 400}\n#-0.118911 (0.000387) with: {'max_depth': 10, 'n_estimators': 600}\n#-0.118980 (0.000384) with: {'max_depth': 10, 'n_estimators': 800}\n#-0.119001 (0.000382) with: {'max_depth': 10, 'n_estimators': 1000}\n#-0.119007 (0.000382) with: {'max_depth': 10, 'n_estimators': 1200}\n","7ed448c0":"model, mape_ = _Model('XGBRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , n_estimators=400\n                      , max_depth=6\n                      )\n\nresults['XGBRegressor_Model_400_6'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'XGBRegressor_Model_400_6' ","8e5dc1e6":"model, mape_ = _Model('XGBRegressor_Model'\n                      , X_train\n                      , X_test\n                      , LogTarget=True\n                      , n_estimators=400\n                      , max_depth=6\n                      )\n\nresults['XGBRegressor_Model_400_6_log'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'XGBRegressor_Model_400_6_log' ","1bb70529":"# \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438\ndel train\ndel train_upd\ndel train_ed\ndel test\ndel data\ngc.collect()","5e31484e":"'''\ndef compute_metric(clf, X_train=X_train, y_train=y_train, X_test=X_test):\n    clf.fit(X_train, y_train)\n    y_test_pred = clf.predict(X_test)\n    return np.round(mape(y_test, predict)*100, 6)\n'''    ","33b62f3f":"#cat_selector = make_column_selector(dtype_include=np.number)\n#cat_selector(X)","58e0a84c":"def RF_XGBR_stacking_regressor(X_train, X_test,target_train, target_test, **kwargs):\n    \n    RF_model = RandomForestRegressor(**kwargs['param_RF'])\n    XGB_model = XGBRegressor(**kwargs['param_XGB'])\n    estimators = [\n    (\"Random Forest\", RF_model) ,\n    (\"XGB\", XGB_model),\n    ]   \n    \n    stacking_regressor = StackingRegressor(estimators=estimators, n_jobs=-1, final_estimator=RidgeCV())\n    stacking_regressor.fit(X_train, y_train)\n    \n    return stacking_regressor","e94f6af3":"\nmodel, mape_ = _Model('RF_XGBR_stacking_regressor'\n                      , X_train\n                      , X_test\n                      , LogTarget=False\n                      , param_RF = results['RandomForestRegressor_Model_300'][1]\n                      , param_XGB = results['XGBRegressor_Model_400_6'][1]\n                      )\n\nresults['RF_XGBR_stacking_regressor'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'RF_XGBR_stacking_regressor' \n    \n   \n#\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c 10.78","371b4994":"'''\ndef RF_XGBR_stacking_regressor(X_train, X_test,target_train, target_test, **kwargs):\n    \n    RF_model = RandomForestRegressor(**kwargs['param_RF'])\n    XGB_model = XGBRegressor(**kwargs['param_XGB'])\n    LR_model = LinearRegression(**kwargs['param_LR'])\n    estimators = [\n    (\"Random Forest\", RF_model) ,\n    (\"XGB\", XGB_model),\n    ]   \n    \n    stacking_regressor = StackingRegressor(estimators=estimators, n_jobs=-1, final_estimator=LR_model)\n    stacking_regressor.fit(X_train, y_train)\n    \n    return stacking_regressor\n'''    ","59a3f68c":"results['Ridge_Model_scaled_log']","0d708014":"final_layer_rfr = RandomForestRegressor(random_state=RANDOM_SEED)\n                     \nfinal_layer_gbr = GradientBoostingRegressor(random_state=RANDOM_SEED)\n\nfinal_layer = StackingRegressor(\n        estimators=[('rf', final_layer_rfr),\n        ('gbrt', final_layer_gbr)],\n        final_estimator=RidgeCV()\n    )\n\nmulti_layer_regressor = StackingRegressor(\n    estimators = [\n        (\"Random Forest\", RandomForestRegressor()),\n        (\"XGB\", XGBRegressor())],\n    final_estimator=final_layer\n)    \n\nmulti_layer_regressor.fit(X_train, y_train)\npredict = multi_layer_regressor.predict(X_test)\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {(mape(y_test, predict))*100:0.2f}%\")\n# \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 11.08%","cebd563c":"def MultiLayerRegressor(X_train, X_test,target_train, target_test, **kwargs):\n    \n    final_layer_rfr = RandomForestRegressor(random_state=RANDOM_SEED)\n                     \n    final_layer_gbr = GradientBoostingRegressor(random_state=RANDOM_SEED)\n\n    final_layer = StackingRegressor(\n            estimators=[('rf', final_layer_rfr),\n            ('gbrt', final_layer_gbr)],\n            final_estimator=LinearRegression()\n        )\n\n    model = StackingRegressor(\n        estimators = [\n            (\"Random Forest\", RandomForestRegressor()),\n            (\"XGB\", XGBRegressor())],\n        final_estimator=final_layer\n    )    \n\n    model.fit(X_train, y_train)\n\n    return model","0066ceee":"'''\nmodel, mape_ = _Model('MultiLayerRegressor'\n                      , X_train\n                      , X_test\n                      , LogTarget=True\n                    )\n\nresults['MultiLayerRegressor'] = [mape_, model.get_params()]\n\nprint(f\"\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: {mape_:0.2f}%\")\nif (mape_ < results[best_model][0]): \n    best_model = 'MultiLayerRegressor' \n    \n''' ","76fd450a":"print(best_model, best_model[-3:]=='log')","95864b68":"'''\nmodel, mape_ = _Model(best_model.split(sep='_')[0]\n                      , X_train\n                      , X_test\n                      , LogTarget=True\n                      , n_estimators=400\n                      , max_depth=6\n                      )\n'''","aa8b99e1":"#predict_submission = model.predict(X_sub)\n\nif best_model[-3:]=='log':\n    predict_submission = np.exp(model.predict(X_sub))\nelse:    \n    predict_submission = model.predict(X_sub)","faf8a66b":"sample_submission['price'] = np.round(predict_submission*1000)\nsample_submission.to_csv(f'submission_2_v{VERSION}.csv', index=False)\nsample_submission.head(10)","8e031298":" for i in results.keys():\n        print(i, results[i][0])","9c7283d2":"best_model,results[best_model][0]","96dca63f":"**\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0431\u0440\u0435\u043d\u0434\u044b \u043f\u043e\u043f\u0430\u043b\u0438 \u0432 \u0432\u044b\u0431\u043e\u0440\u043a\u0443**","b1bf5a76":"### \u041d\u043e\u0432\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430","850d2f20":"<a id='13'><\/a> \n## \u0411\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","4bd54854":"**\u0412 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 train 13149 \u0437\u0430\u043f\u0438\u0441\u044c \u0441 61 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438, \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u0442\u044c. \u0421\u043a\u0443\u0447\u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442..**","7cb9d457":"### \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0430","21c6e773":"**\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445:** \n- \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 - \u0432\u0440\u0443\u0447\u043d\u0443\u044e\n- \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e 5 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 : OHE\n- \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0432\u044b\u0448\u0435 5 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 : Label - coding","42bdbd2c":"**C\u0435\u0439\u0447\u0430\u0441 \u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u043c \u0438  \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 <=5 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c one_hot- \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435.**\n**\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0432\u0438\u0442\u044c 1 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432\u043c\u0435\u0441\u0442\u043e \u0434\u0432\u0443\u0445.**","4c946e36":"**\u041a\u0430\u043a \u0438 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442 \u043c\u0430\u0442\u0447\u0430\u0441\u0442\u044c \u043f\u043e CatBoost \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u043b\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\n\u0431\u0435\u0437 \u0438\u0445 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:**\n","ba16c6be":"<a id='20'><\/a> \n##  \u0418\u0442\u043e\u0433\u0438\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","69938e15":"**\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u0447\u0435\u0442\u043a\u043e \u043f\u0440\u043e\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441 2005 \u0433\u043e\u0434\u0430, \u043e\u0441\u0442\u0430\u043d\u044b\u0445 \u043e\u0442\u043d\u0435\u0441\u0435\u043c \u043a \u043f\u0440\u043e\u0447\u0438\u043c**","8f5108f1":"<a id='9'><\/a> \n## 2. \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","200f3bf8":"<img src=\"https:\/\/cs12.pikabu.ru\/post_img\/2021\/06\/05\/11\/1622922908148556144.webp\">\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n### \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n*\u041f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u043e \u043d\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.*   \n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u044d\u0442\u0430\u043f\u044b:\n\n1. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n> \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u044b\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043d\u0430 **Python**, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0431\u0430\u0437\u0435 Postgresql, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u043b\u0438\u0441\u044c \u0432 \u0444\u0430\u0439\u043b auto_train.csv \u0438\nauto_test.csv \u0421\u043a\u0440\u0438\u043f\u0442\u044b \u0432\u044b\u043b\u043e\u0436\u0435\u043d\u044b https:\/\/github.com\/talicofox\/skillfactory_projects.git\n2. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430\n> \u041f\u0440\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e 2 \u0440\u0435\u0448\u0435\u043d\u0438\u044f: \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 train \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0435\u0433\u043e \u043d\u0430 \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u0435\u043d \u0432 \u0441\u0438\u043b\u0443 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0438, \u0432\u044b\u0431\u0440\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u0441\u0432\u043e\u0439 \u0432\u043a\u0443\u0441 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0438 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c train. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0441\u0432\u043e\u0439\u0441\u0442\u0432(\u0441\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432), \u0447\u0442\u043e \u043c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435.\n\u041d\u043e \u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442.\n3. \u041c\u043e\u0434\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n\n\n","518ca98d":"<a id='1'><\/a> \n# Setup\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","8bb19e74":"![n_estimators_1.png](attachment:20d08630-d7ab-467d-b891-adee69b26734.png)","f9fae879":"<a id='11'><\/a> \n# \u0424\u0443\u043d\u043a\u0446\u0438\u0438\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","3986727d":"**\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 c \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439\n\u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 10.42%**","fd7e0814":"**\u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438**","3bdea929":"\n<a id='17'><\/a> \n## \u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c\n\u042d\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0446\u0435\u043d\u0443 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0432\u0438\u0433\u0430\u0442\u0435\u043b\u044f (engineDisplacement). \nC \u043d\u0435\u0439 \u0431\u0443\u0434\u0435\u043c \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n\n","25b4daea":"<a id='23'><\/a> \n## Random Forest Regressor\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","d9050e66":"<a id='12'><\/a> \n# Data\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","6923161f":" - \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0441\u043e\u0436\u0440\u0430\u043b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0437\u0430 \u0441\u0432\u043e\u044e \u0436\u0438\u0437\u043d\u044c: ***fuel_rate * mileage***\n - \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043c \u0437\u0430 \u0433\u043e\u0434 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c: ***mileage\/(saleDate - productionDate)***\n - \u041a\u0430\u043a\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043b\u043e\u0433 \u0432 2021 \u0433\u043e\u0434\u0443 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c ***enginePower***, \u043f\u043e\u043b\u044f ***\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435*** \u0438 \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\u0439 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043d\u0430\u043b\u043e\u0433\u0430 ***K*** \u0438 ***TAX***\n - \u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u043d\u0430\u043b\u043e\u0433\u0430 \u043a \u0442\u0440\u0430\u0442\u0430\u043c \u043d\u0430 \u0431\u0435\u043d\u0437\u0438\u043d \u0432 \u0433\u043e\u0434\n \n \n **\u0414\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e:**","4504bc7a":"**\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f \u0431\u0435\u0437 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043e\u0442\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0438 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u0430\u0435\u0442 20.8%**","60336e37":"## \u041e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432","41b0f8ff":"<a id='16'><\/a> \n##  Label Encoding\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","c6c62496":"**\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438:**","d11fdb1d":"**\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043d\u0438\u0436\u0435 \u043d\u0438\u0436\u0435**","0e85f77b":"## \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","f83176a9":"## \u041f\u0435\u0441\u043e\u0447\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","aeefecbb":"**\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0434\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0445 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a**","11d47a42":"**\u041f\u0440\u0438\u0437\u043d\u0430\u043a bodyType \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0435\u043c \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432 \u0432\u0440\u0443\u0447\u043d\u0443\u044e:**","38dc3149":"**\u0414\u043b\u044f \u043f\u043e\u043b\u0435\u0439 description \u0438 \u041a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0445\u0435\u043c\u0443 TF-IDF \u0438\u043b\u0438 Word2Vec**","1a5a2426":"**\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0435\u043c \u0432\u043e\u0441\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0446\u0432\u0435\u0442\u043e\u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u0445 \u043d\u0430 7 \u0433\u0440\u0443\u043f\u043f. \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u0445\u043e\u0442\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u0435 \u0441 \u0437\u0430\u0432\u043e\u0434\u0441\u043a\u043e\u0439 \u043a\u043e\u043b\u0435\u0440\u043e\u0432\u043a\u043e\u0439 \u0446\u0432\u0435\u0442\u0430.**","b36523fd":"<a id='30'><\/a> \n##  CatBoost\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n\n\n**\u0418\u043c\u0435\u043d\u043d\u043e \u0441\u0435\u0439\u0447\u0430\u0441, \u0434\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0430\u043c\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c Cat Boost**","9e199fe4":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 8817 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041d\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u044f\u0432\u043b\u044f\u0435\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0426\u0435\u043d\u0430 \u0430\u0432\u0442\u043e \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043a\u043e\u043b\u0435\u0431\u043b\u0435\u0442\u0441\u044f \u043e\u0442 16 \u0442\u044b\u0441 \u0440\u0443\u0431 \u0434\u043e 99 \u043c\u043b\u043d, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430, \u0447\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0441\u0438\u043b\u044c\u043d\u044b\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u0445**","1c1d1b23":"<a id='21'><\/a> \n# Submission\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","6460c56b":"**\u0423 \u043c\u043e\u0434\u0435\u043b\u0438 XGBRegressor c 400-\u043c\u0438 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u043c\u0438 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u043b\u0443\u0431\u0438\u043d\u043e\u0439 6 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0430 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 \u041c\u0410\u0420\u0415 10.4%**\n\n**\u041d\u0430 \u0441\u0442\u0435\u043a\u0438\u043d\u0433\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u044b\u043b\u0435\u0442\u0430\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043f\u0430\u043c\u044f\u0442\u0438, \u044f \u0441 \u044d\u0442\u0438\u043c \u0435\u0449\u0435 \u043d\u0435 \u0434\u043e\u043a\u043e\u043d\u0446\u0430 \u043d\u0430\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0431\u043e\u0440\u043e\u0442\u044c\u0441\u044f.**\n\n**\u0421\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**\n","c4618cfb":"## Train Split","99e9a34f":"**\u041f\u043e\u043b\u044f \u0441\u043e 100% \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 (\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 hidden) \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e.  \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430 \u043c\u0430\u043b\u043e, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c**","7114c81d":"**\u0414\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0442\u0431\u0435\u0440\u0435\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430. \u041f\u043e\u044d\u043a\u0441\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0432 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u044f \u043f\u0440\u0438\u0448\u043b\u0430 \u043a \u0432\u044b\u0432\u043e\u0434\u0443, \u0447\u0442\u043e\n\u043f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043e\u0442 150 \u0442\u044b\u0441 \u0434\u043e 7.5 \u043c\u043b\u043d \u0440\u0443\u0431 \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0430\u0435\u0442\u0441\u044f \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443**","ebd82d5f":"**\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u0432, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u0435 \"\u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435\"**","1d871e20":"**\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 0 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0431\u044b\u043b\u043e \u0432\u0435\u0440\u043d\u044b\u043c:**","b7577c00":"<a id='18'><\/a> \n## \u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","3af9e35d":"**\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u0440\u0438\u0441\u0443\u043d\u043a\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u0447\u0435\u0442\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u0431\u0440\u0435\u043d\u0434\u0430\u043c, \u0447\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c**","d983975c":"**\u0422\u0435\u043f\u0435\u0440\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0443\u0441\u0435\u0447\u0435\u043d\u044b \u0437\u0430\u043f\u0438\u0448\u0435\u043c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0438\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u0443\u0431\u0435\u0440\u0435\u043c \u043b\u0438\u0448\u043d\u0435\u0435 \u0438\n\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c Label- encoding**","9eb7a4c1":"**\u041f\u043e\u043b\u044f \u0441 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c (\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u0422\u0430\u043c\u043e\u0436\u043d\u044f,priceCurrency), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 (car_url, image)  \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e.  \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043a\u0430 \u043c\u0430\u043b\u043e, \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043b\u0435\u0436\u0430\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435**","e8930e1d":"<a id='14'><\/a> \n## \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","3704825f":"**\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 11.73% \u043f\u0440\u0438 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 10.78% \u043f\u0440\u0438 \u043d\u0435\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445**","7386a732":"**enginePower \u0440\u0430\u0437\u043e\u0431\u044a\u0435\u043c \u043d\u0430 5 \u0433\u0440\u0443\u043f\u043f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u043c\u0438 \u0433\u0440\u0443\u043f\u043f\u0430\u043c\u0438:**\n\n- \u0434\u043e 100 \u043b.\u0441\n- 100 - 150 \u043b.\u0441\n- 150 - 200 \u043b.\u0441\n- 200 - 250 \u043b.\u0441\n- \u0431\u043e\u043b\u0435\u0435 250 \u043b.\u0441\n\n**\u042d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0443\u0436\u0435 \u0440\u0430\u0437\u0431\u0438\u0442 \u043d\u0430 \u0433\u0440\u0443\u043f\u043f\u044b \u0441 \u0448\u0430\u0433\u043e\u043c 50, \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c 1-\u0443\u044e \u0433\u0440\u0443\u043f\u043f\u0443 \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u043a 0 - \u043e\u0439, \u0430 \u0433\u0440\u0443\u043f\u043f\u044b >5 \u043a 5-\u043e\u0439**","1209d4ce":"**\u0418\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0445\u043e\u0440\u043e\u0448\u043e \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u0438\u043b\u044c\u043d\u043e\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435. \u0412 \u0441\u0438\u043b\u0443 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u043f\u043e\u043c\u043d\u0438\u0442\u044c \u043e \u0446\u0435\u043d\u043e\u0432\u044b\u0445 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u0445 \u0440\u044b\u043d\u043a\u0430\u0445 \u0438 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0446\u0435\u043d\u043e\u0432\u043e\u043c, \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0432 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043a\u0440\u0430\u0439\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0430, \u0447\u0442\u043e \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u044b\u0439 \u043b\u0443\u0447\u0448\u0438\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442**","676a4322":"<a id='2'><\/a> \n## \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","4b91a7be":"**\u0413\u043b\u044f\u0434\u044f \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u0434\u0430\u0441\u0442 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.EnginePower - engineDisplacement \u0441 \u043d\u0430\u0442\u044f\u0436\u043a\u043e\u0439 \u0434\u0430\u0435\u0442 \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441 \u043e\u0447\u0435\u043d\u044c \u0441\u0438\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0441\u0441\u0435\u044f\u043d\u0438\u0435\u043c, \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438 \u044d\u0442\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043c\u043e.**\n\n**tax_2021 - \u043e\u0431\u043b\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0430\u043b\u0430 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0440\u0435\u0437\u043a\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0446\u0435\u043b\u0435\u0432\u044b\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u043c**\n\n**\u0427\u0435\u0442\u043a\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u0438\u0434\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0432\u043d\u043e\u0432\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438**\n\n","741948fe":"## \u0412\u044b\u0431\u0440\u043e\u0441\u044b","0b855c1b":"<a id='25'><\/a> \n## XGBRegressor\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","4e1013c2":"<a id='22'><\/a> \n## Lasso\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","124cba6f":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0447\u0435\u043a \u043b\u0438\u0441\u0442: https:\/\/docs.google.com\/spreadsheets\/d\/1I_ErM3U0Cs7Rs1obyZbIEGtVn-H47pHNCi4xdDgUmXY\/edit?usp=sharing","6f0e12f7":"### Log Target\n\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u0437\u044f\u0442\u044c \u0442\u0430\u0440\u0433\u0435\u0442 \u0432 \u043b\u043e\u0433\u043e\u0440\u0438\u0444\u043c - \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u044c \u0432\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e np.log \u0438 np.exp).    \n\u0412 \u043f\u0440\u0438\u043d\u0446\u0438\u0435\u043f\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u043f\u0440\u0438\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043a\u0443\u0440\u0441 \u0434\u043e\u043b\u043b\u0430\u0440\u0430, \u0435\u0432\u0440\u043e \u0438\u043b\u0438 \u0433\u0440\u0435\u0447\u043a\u0438 :) \u0432 \u0434\u0430\u0442\u0443 \u0441\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u0442\u0443 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0432 **parsing_unixtime**","ba6a4100":"<a id='26'><\/a> \n## \u0421\u0442\u0435\u043a\u0438\u043d\u0433\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","ba0f3426":"# [SF-DST Car Price prediction ](https:\/\/www.kaggle.com\/c\/sf-dst-car-price-prediction)\n\n## \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\n> InClass Prediction Competition\n\n#### By: Natalya Lisitskaya","13d3f19a":"**\u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438\u0441\u044c \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043b\u0438 \u044d\u0442\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c cat_quality_values\n\u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438**","379d38fd":"**\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u043f\u0435\u0447\u0430\u0442\u043b\u044f\u0435\u0442: 14.71% \u0431\u0435\u0437 \u043d\u0430\u0441\u0442\u043e\u0439\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432!**","f0dc8c1e":"**\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0440\u0435\u0432\u044c\u0435\u0432 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0433\u043b\u0443\u0431\u0438\u043d\u0443 \u0432 XGBoost**","18b78df7":"<a id='10'><\/a> \n## Data Preprocessing\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","8fa9f7f5":"### \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","444224f5":"<a id='24'><\/a> \n## Gradient Boosting Regressor\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","781902c1":"**\u041d\u0430 \u0432\u0441\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0431\u0440\u0435\u043d\u0434\u043e\u0432 \u043a\u0430\u0440\u0442\u0438\u043d\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u043e\u0439, \u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0431\u0440\u0435\u043d\u0434\u043e\u0432 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044f\u043c \u0438 \u0440\u0430\u0437\u0431\u0440\u043e\u0441\u0443 \u0446\u0435\u043d. \u0421 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0431\u0440\u0435\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. \u0412\u043e\u0437\u043c\u043e\u0436\u0435\u043d \u0435\u0449\u0435 1 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c 20 \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0431\u0440\u0435\u043d\u0434\u043e\u0432**","33b1071b":"**\u0417\u0434\u0435\u0441\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0447\u0438\u0441\u0442\u043a\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 OHE**","57d24cfe":"**\u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 MAPE: 10.67%**","f691cc50":"<a id='19'><\/a> \n## \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*\n","5db5af3b":"**\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043d\u0435\u0442**","5599ad05":"![n_estimators_2.png](attachment:0488b3dd-dc6d-47b0-9fcc-7ffe2e36e0a6.png)","cffad43a":"<a id='5'><\/a> \n## \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n<a href='#0'> *\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044e*","0775dc5b":"**\u041b\u0443\u0447\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c**","db97cc5e":"**\u042f\u0432\u043d\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430 2 \u043d\u0443\u043b\u044f**","2087e523":"**modelDate \u0438 productionDate \u043d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u044e\u0442 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440 \u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c\u0438 \u043f\u043e\u043b\u044f\u043c\u0438 \u043d\u0430\u0440\u044f\u0434\u0443 \u0441 \u0431\u0440\u0435\u043d\u0434\u043e\u043c \u0438 \u043c\u043e\u0434\u0435\u043b\u044c\u044e \u0434\u043b\u044f \u0438\u043d\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f**","7b43284b":"<a id='0'><\/a> \n# \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\n\n<a href='#1'> **Setup**\n    \n<a href='#11'> **\u0424\u0443\u043d\u043a\u0446\u0438\u0438**\n    \n<a href='#12'> **Data**\n    \n<a href='#5'> **\u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**\n    \n<a href='#2'> **\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**\n    \n<a href='#13'> **\u0411\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435**\n    \n<a href='#14'> **\u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438**\n    \n<a href='#9'> **\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432**\n    \n\n<a href='#10'> **Data preprocessing**   \n\n<a href='#30'> **CatBoost**\n   \n<a href='#16'> **Label Encoding**     \n    \n<a href='#17'> **\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c**   \n   \n<a href='#18'> **\u041b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f**  \n   \n<a href='#19'> **\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**     \n\n<a href='#22'> **Lasso**     \n\n<a href='#23'> **Random Forest Regressor** \n    \n<a href='#24'> **Gradient Boosting Regressor** \n    \n<a href='#25'> **XGBRegressor** \n    \n<a href='#26'> **\u0421\u0442\u0435\u043a\u0438\u043d\u0433**    \n    \n<a href='#21'> **Submission**  \n    \n    \n<a href='#20'> **\u0418\u0442\u043e\u0433\u0438**       \n    \n","ac7e650d":"### \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430","6075b4b2":"**\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445: \u0447\u0430\u0441\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0441\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430 \u0435\u0433\u043e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0432\u0440\u0443\u0447\u043d\u0443\u044e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c cat_quality_values.**"}}