{"cell_type":{"9029daa9":"code","3de52d99":"code","c5c0fff7":"code","f0716609":"code","e707ddf9":"code","522745ba":"code","ba0234c9":"code","dbce921e":"code","c9d96b54":"code","4da2e601":"code","17519644":"code","af9f2ebe":"code","0ff15ce1":"code","7d215a84":"code","7ae1bce9":"code","1d16d375":"code","2b8234a5":"code","25bb9c8f":"code","4cec420a":"code","594c1be3":"code","1565b7dd":"code","8f2687d0":"code","65bbe99b":"code","90722ff3":"code","c833ef2e":"code","2aa997b2":"code","075a67ae":"code","98db01e3":"code","ca97a96f":"code","08317b5f":"code","4872b011":"code","b3e52566":"code","699d7947":"markdown","17f5379e":"markdown","d898ab50":"markdown","c7f1536a":"markdown","ee59e128":"markdown","ec3940d1":"markdown","ef954ac9":"markdown","3a6d41cf":"markdown","b9c4c600":"markdown","e24664c6":"markdown","24a4e958":"markdown","6d199745":"markdown","f3dfa11a":"markdown","5cbcea9d":"markdown","8487e6dc":"markdown","e918f970":"markdown","c52928e0":"markdown"},"source":{"9029daa9":"import re\nimport sys\n\nimport time\nimport datetime\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn import metrics\nfrom sklearn import preprocessing\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n# Loading the data\ndf = pd.read_csv('..\/input\/googleplaystore.csv')","3de52d99":"%matplotlib inline","c5c0fff7":"sns.set(style='darkgrid')\nsns.set_palette('PuBuGn_d')","f0716609":"df.head()\n# Executing the above script will display the first five rows of the dataset as shown below","e707ddf9":"# Checking the data type of the columns\ndf.info()","522745ba":"# Exploring missing data and checking if any has NaN values\nplt.figure(figsize=(7, 5))\nsns.heatmap(df.isnull(), cmap='viridis')\ndf.isnull().any()","ba0234c9":"df.isnull().sum()","dbce921e":"# The best way to fill missing values might be using the median instead of mean.\ndf['Rating'] = df['Rating'].fillna(df['Rating'].median())\n\n# Before filling null values we have to clean all non numerical values & unicode charachters \nreplaces = [u'\\u00AE', u'\\u2013', u'\\u00C3', u'\\u00E3', u'\\u00B3', '[', ']', \"'\"]\nfor i in replaces:\n\tdf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : x.replace(i, ''))\n\nregex = [r'[-+|\/:\/;(_)@]', r'\\s+', r'[A-Za-z]+']\nfor j in regex:\n\tdf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : re.sub(j, '0', x))\n\ndf['Current Ver'] = df['Current Ver'].astype(str).apply(lambda x : x.replace('.', ',',1).replace('.', '').replace(',', '.',1)).astype(float)\ndf['Current Ver'] = df['Current Ver'].fillna(df['Current Ver'].median())","c9d96b54":"# Count the number of unique values in category column \ndf['Category'].unique()","4da2e601":"# Check the record  of unreasonable value which is 1.9\ni = df[df['Category'] == '1.9'].index\ndf.loc[i]","17519644":"# Drop this bad column\ndf = df.drop(i)","af9f2ebe":"# Removing NaN values\ndf = df[pd.notnull(df['Last Updated'])]\ndf = df[pd.notnull(df['Content Rating'])]","0ff15ce1":"# App values encoding\nle = preprocessing.LabelEncoder()\ndf['App'] = le.fit_transform(df['App'])\n# This encoder converts the values into numeric values","7d215a84":"# Category features encoding\ncategory_list = df['Category'].unique().tolist() \ncategory_list = ['cat_' + word for word in category_list]\ndf = pd.concat([df, pd.get_dummies(df['Category'], prefix='cat')], axis=1)","7ae1bce9":"# Genres features encoding\nle = preprocessing.LabelEncoder()\ndf['Genres'] = le.fit_transform(df['Genres'])","1d16d375":"# Encode Content Rating features\nle = preprocessing.LabelEncoder()\ndf['Content Rating'] = le.fit_transform(df['Content Rating'])","2b8234a5":"# Price cealning\ndf['Price'] = df['Price'].apply(lambda x : x.strip('$'))","25bb9c8f":"# Installs cealning\ndf['Installs'] = df['Installs'].apply(lambda x : x.strip('+').replace(',', ''))","4cec420a":"# Type encoding\ndf['Type'] = pd.get_dummies(df['Type'])","594c1be3":"# Last Updated encoding\ndf['Last Updated'] = df['Last Updated'].apply(lambda x : time.mktime(datetime.datetime.strptime(x, '%B %d, %Y').timetuple()))","1565b7dd":"# Convert kbytes to Mbytes \nk_indices = df['Size'].loc[df['Size'].str.contains('k')].index.tolist()\nconverter = pd.DataFrame(df.loc[k_indices, 'Size'].apply(lambda x: x.strip('k')).astype(float).apply(lambda x: x \/ 1024).apply(lambda x: round(x, 3)).astype(str))\ndf.loc[k_indices,'Size'] = converter","8f2687d0":"# Size cleaning\ndf['Size'] = df['Size'].apply(lambda x: x.strip('M'))\ndf[df['Size'] == 'Varies with device'] = 0\ndf['Size'] = df['Size'].astype(float)","65bbe99b":"# Split data into training and testing sets\nfeatures = ['App', 'Reviews', 'Size', 'Installs', 'Type', 'Price', 'Content Rating', 'Genres', 'Last Updated', 'Current Ver']\nfeatures.extend(category_list)\nX = df[features]\ny = df['Rating']","90722ff3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 10)","c833ef2e":"# Look at the 15 closest neighbors\nmodel = KNeighborsRegressor(n_neighbors=15)","2aa997b2":"# Find the mean accuracy of knn regression using X_test and y_test\nmodel.fit(X_train, y_train)","075a67ae":"# Calculate the mean accuracy of the KNN model\naccuracy = model.score(X_test,y_test)\n'Accuracy: ' + str(np.round(accuracy*100, 2)) + '%'","98db01e3":"# Try different numbers of n_estimators - this will take a minute or so\nn_neighbors = np.arange(1, 20, 1)\nscores = []\nfor n in n_neighbors:\n    model.set_params(n_neighbors=n)\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\nplt.figure(figsize=(7, 5))\nplt.title(\"Effect of Estimators\")\nplt.xlabel(\"Number of Neighbors K\")\nplt.ylabel(\"Score\")\nplt.plot(n_neighbors, scores)","ca97a96f":"model = RandomForestRegressor(n_jobs=-1)\n# Try different numbers of n_estimators - this will take a minute or so\nestimators = np.arange(10, 200, 10)\nscores = []\nfor n in estimators:\n    model.set_params(n_estimators=n)\n    model.fit(X_train, y_train)\n    scores.append(model.score(X_test, y_test))\nplt.figure(figsize=(7, 5))\nplt.title(\"Effect of Estimators\")\nplt.xlabel(\"no. estimator\")\nplt.ylabel(\"score\")\nplt.plot(estimators, scores)\nresults = list(zip(estimators,scores))\nresults","08317b5f":"predictions = model.predict(X_test)\n'Mean Absolute Error:', metrics.mean_absolute_error(y_test, predictions)","4872b011":"'Mean Squared Error:', metrics.mean_squared_error(y_test, predictions)","b3e52566":"'Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions))","699d7947":"# Categorical Data Encoding\u00b6","17f5379e":"The RandomForestRegressor class of the sklearn.ensemble library is used to solve regression problems via random forest. The most important parameter of the RandomForestRegressor class is the n_estimators parameter. This parameter defines the number of trees in the random forest.","d898ab50":"In this section shows how k-nearest neighbors and random forests can be used to predict app ratings based on the other matrices. First, the dataset has to separate into dependent and independent variables (or features and labels). Then those variables have to split into a training and test set.\n\nDuring training stage we give the model both the features and the labels so it can learn to classify points based on the features.","c7f1536a":"There are two strategies to handle missing data, either removing records with these missing values or replacing missing values with a specific value like (mean, median or mode) value of the column.","ee59e128":"The above script splits the dataset into 85% train data and 25% test data.","ec3940d1":"It's obvious that the first value of this record is missing (App name) and all other values are respectively propagated backward starting from \"Category\" towards the \"Current Ver\"; and the last column which is \"Android Ver\" is left null. It's better to drop the entire recored instead of consider these unreasonable values while cleaning each column!\n","ef954ac9":"# Random Forest Model","3a6d41cf":"Many machine learning algorithms can support categorical values without further manipulation but there are many more algorithms that do not. We need to make all data ready for the model, so we will convert categorical variables (variables that stored as text values) into numircal variables.","b9c4c600":"The above line drops the reference column and just keeps only one of the two columns as retaining this extra column does not add any new information for the modeling process, this line is exactly the same as setting drop_first parameter to True.","e24664c6":"# K-Nearest Neighbors Model","24a4e958":"# Evaluation Procedure","6d199745":"In this Python notebook, K-nearest neighbors and random forest algorithms will be applied to predict app ratings on Google play store.","f3dfa11a":"# Data Exploration and Cleaning","5cbcea9d":"Looks like there are missing values in \"Rating\", \"Type\", \"Content Rating\" and \" Android Ver\". But most of these missing values in Rating column.","8487e6dc":"The k-nearest neighbors algorithm is based around the simple idea of predicting unknown values by matching them with the most similar known values. Building the model consists only of storing the training dataset. To make a prediction for a new data point, the algorithm finds the closest data points in the training dataset \u2014 its \"*nearest neighbors*\".","e918f970":"This can be done by selecting all k values from the \"Size\" column and replace those values by their corresponding M values, and since k indices belong to a list of non-consecutive numbers, a new dataframe (converter) will be created with these k indices to perform the conversion, then the final values will be assigned back to the \"Size\" column.","c52928e0":"The dataset has 10,841 records and 13 columns, all of them are object types except the target column (Rating) which is float"}}