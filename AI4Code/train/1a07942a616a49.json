{"cell_type":{"5b3366cb":"code","308041f1":"code","0026869a":"code","85a72b60":"code","7c40526b":"code","a99860a6":"code","fdf6e636":"code","3674a412":"code","a96a207d":"code","fd687735":"code","eea7968f":"code","bbfa8c6d":"code","f9020e9d":"code","25a2be7f":"code","359f0a33":"code","985700e5":"code","193f7908":"code","5bbd1c6a":"code","d85072e5":"code","0f237b8b":"code","a31ceac7":"code","0ca3ee63":"code","10df340d":"code","730fd924":"code","635b5570":"code","bcddf063":"code","7e4d56d6":"markdown","2d41dd2c":"markdown","73169c84":"markdown","24344266":"markdown","d7030261":"markdown","ed9d51fd":"markdown","f66ac567":"markdown","8317e5d5":"markdown"},"source":{"5b3366cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ipywidgets\nimport altair as alt\nalt.renderers.enable('notebook')\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import LabelEncoder\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","308041f1":"#load data\ndata = pd.read_csv(\"..\/input\/pokemon.csv\", skipinitialspace=True)","0026869a":"#print out top 5 data from dataframe\ndata.head()","85a72b60":"#check info about the dataframe\ndata.info()\n","7c40526b":"#check NaN values\ndata.isnull().sum()","a99860a6":"#we can drop NaN values from our dataframe\ndata = data.dropna()","fdf6e636":"data.isnull().sum()","3674a412":"#correlation between features\nf, ax = plt.subplots(figsize = (18, 18))\nsns.heatmap(data.corr(), annot = True, linewidth = .5, fmt = \".1f\", ax = ax)\nplt.show() ","a96a207d":"data1 = data.loc[:, [\"Attack\", \"Speed\", \"Defense\", \"HP\"]]\ndata1.plot()\nplt.show()","fd687735":"data1.plot(subplots = True)\nplt.show()","eea7968f":"#we can also use scatter graph\ndata.plot(kind = \"scatter\", x = \"Attack\", y = \"Defense\", color = \"b\", linewidth = 1)\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")\nplt.show()","bbfa8c6d":"#we can plot histogram graph\ndata.Attack.plot(kind = \"hist\", bins = 50, figsize = (15, 15))\nplt.xlabel(\"Attack\")\nplt.show()","f9020e9d":"#we can see count, mean, std, min, max values of numeric data\ndata.describe()","25a2be7f":"#we can also plot outlier \ndata.boxplot(column = \"Attack\", by = \"Legendary\")\nplt.show()","359f0a33":"@ipywidgets.interact\ndef plot(color = ['red', 'steelblue', 'green', 'blue']):\n    (sns.barplot(y = 'Name', x = 'Attack', data = data.head(10), orient = 'h', color = color))","985700e5":"#we can also create pivot table\npd.pivot_table(data,index=[\"Name\"])\n","193f7908":"#we have to remove Name\ndata = data.drop('Name', axis = 1)","5bbd1c6a":"#we have to give numerical values to Legendary column\ndata.iloc[:, 5:6] = data.iloc[:, 5:6].apply(LabelEncoder().fit_transform)\n","d85072e5":"from collections import Counter\ncount  = pd.Series(data['Type 1'].str.replace('[\\[\\]\\']','').str.split(',').map(Counter).sum())\nln_list = range(0, len(count))\ncategorize = list(ln_list)\ntype(categorize[0])\n","0f237b8b":"#we also have to categorize Type 1 and Type 2\n#data['Type 1'] = pd.Categorical(data['Type 1'], categories= data['Type 1'].unique()).codes\n        ","a31ceac7":"data.iloc[:, 1:3] = data.iloc[:, 1:3].apply(LabelEncoder().fit_transform)\ndata.head()\n","0ca3ee63":"data = data.drop('#', axis = 1)","10df340d":"#assign target value\ntarget = data['Legendary']\n#drop target value from the dataframe\ndata = data.drop('Legendary', axis = 1)\n","730fd924":"#create KNN object\nknn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(data, target)\nKNeighborsClassifier(algorithm = 'auto', leaf_size = 30, \n                    metric = \"minkowski\", metric_params = None, n_jobs = None, \n                    n_neighbors = 5, p = 2, weights = 'uniform')","635b5570":"poke = [157,133,30,70,120,100,135,95, 0]\npoke = np.array(poke).reshape(1, -1)\npoke","bcddf063":"prediction = knn.predict(poke)\nresult = 'Legendary' if prediction == True else 'Not Legendary'\nprint(result)\n","7e4d56d6":"higher correlation means higher proportion between  features \n\nif correlation is positive then we can give this example: if the quantity of a room in a house increase, then the price of the house also increase.\n\n\n","2d41dd2c":"<h1>Learning Details About Dataframe<\/h1>","73169c84":"<p>black circles are representing outliers<\/p>","24344266":"<h1>Virtualization and Analysing<\/h1>","d7030261":"We have 1 null value from Name column and 386 null values from Type 2 column","ed9d51fd":"from above graph:\n<li>Most of the attack power gather around 50-100<\/li>\n<li>Most of the defense power gather around 50-100<\/li>\n<li>We have some exaggeration attack values which are greater than 175<\/li>\n<li>We have some exaggeration defense values which are greater than 200<\/li>\n\n","f66ac567":"<p>Before feeding KNN Classifier with our data, we have to do some removing and categorizing<\/p>","8317e5d5":"Above infos tell us:\n<li>We have 800 rows of data<\/li>\n<li>We have 12 columns<\/li>\n<li>We have 1 boolean variable, 8 integer variables, and 3 objects<\/li>\n<li>We only have null varibles from Name and Type 2 columns<\/li>\n<li>Dataset size is 69.6+ KB<\/li>"}}