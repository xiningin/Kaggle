{"cell_type":{"82fa0aa3":"code","2c37b819":"code","68c8c266":"code","ed9fb1f5":"code","54401120":"code","15f259ed":"code","fda62996":"code","84dd3bde":"code","37f482f0":"code","fcbb3c71":"code","9cb7fd7c":"code","bcb7eee1":"code","ad382f04":"code","9c75180d":"code","8c9d24ee":"code","b988c9bb":"code","a6aa635c":"code","f55a283f":"markdown","44ce79d4":"markdown","ca7772b6":"markdown","136bce8a":"markdown","6b477cac":"markdown","634fde53":"markdown","aa2f859f":"markdown","3639744c":"markdown","60915cf6":"markdown","417d9c08":"markdown","a3ff9bdc":"markdown","f882c6be":"markdown"},"source":{"82fa0aa3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c37b819":"directory = '\/kaggle\/input\/insurance\/insurance.csv'","68c8c266":"data =  pd.read_csv (directory)\n\ndata.info()","ed9fb1f5":"data.columns","54401120":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure ( figsize = ( 16, 9 ))\n\nsns.barplot ( y = data ['charges'] , x = data ['region']   )\n","15f259ed":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ndata [ 'sex'] = encoder.fit_transform(data['sex'])\ndata [ 'smoker' ] = encoder.fit_transform ( data [ 'smoker' ])\ndata [ 'region' ] = encoder.fit_transform ( data [ 'region' ])\n","fda62996":"data.head()","84dd3bde":"X_columns = [ 'age', 'sex', 'bmi', 'children', 'smoker', 'region' ]\nY_columns = [ 'charges' ]","37f482f0":"df_X = data [ X_columns ]\ndf_y = data [ Y_columns ]\n","fcbb3c71":"from sklearn.model_selection import train_test_split\n\nX_train , X_test , y_train , y_test  = train_test_split ( df_X , df_y , test_size = 0.2 , random_state = 1 )","9cb7fd7c":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit ( X_train , y_train )\n\nprint( \"Train Accuracy = \" ,  model.score( X_train , y_train ) * 100 )\nprint( \"Test Accuracy = \" ,  model.score( X_test , y_test ) * 100 )","bcb7eee1":" from sklearn.preprocessing import PolynomialFeatures\n\ndegree = PolynomialFeatures ( degree = 2 )\ndf_X2 = degree.fit_transform ( df_X )\ndf_y2 = degree.fit_transform ( df_y )\n\nX_train , X_test , y_train , y_test  = train_test_split ( df_X2 , df_y2 , test_size = 0.2 , random_state = 1 )","ad382f04":"\ntwoDegree_model = LinearRegression()\ntwoDegree_model.fit ( X_train , y_train )\n\nprint(\" Train Accuracy = \" , twoDegree_model.score( X_train , y_train  ) * 100 ) \nprint(\"Test Accuracy = \" , twoDegree_model.score( X_test , y_test) * 100 )","9c75180d":"from sklearn.preprocessing import PolynomialFeatures\n\ndegree = PolynomialFeatures ( degree = 3 )\ndf_X3 = degree.fit_transform ( df_X )\ndf_y3 = degree.fit_transform ( df_y )\n\nX_train , X_test , y_train , y_test  = train_test_split ( df_X3 , df_y3 , test_size = 0.2 , random_state = 1 )","8c9d24ee":"threeDegree_model = LinearRegression()\nthreeDegree_model.fit ( X_train , y_train )\n\n\nprint(\" Train Accuracy = \" , threeDegree_model.score ( X_train , y_train ) * 100 ) \nprint(\"Test Accuracy = \" , threeDegree_model.score ( X_test , y_test) * 100 )","b988c9bb":"from sklearn.preprocessing import PolynomialFeatures\n\ndegree = PolynomialFeatures ( degree = 4 )\ndf_X4 = degree.fit_transform ( df_X )\ndf_y4 = degree.fit_transform ( df_y )\n\nX_train , X_test , y_train , y_test  = train_test_split ( df_X4 , df_y4 , test_size = 0.2 , random_state = 1 )","a6aa635c":"fourDegree_model = LinearRegression()\nfourDegree_model.fit ( X_train , y_train )\n\nprint(\" Train Accuracy = \" , fourDegree_model.score( X_train , y_train ) * 100 ) \nprint(\"Test Accuracy = \" , fourDegree_model.score( X_test , y_test) * 100 )","f55a283f":"# Medical Insurance ","44ce79d4":"# Linear Regression ( Degree = 1 )","ca7772b6":"# Splitting the data into Train , Test","136bce8a":"# Can use this too Encoding","6b477cac":"# Linear Regression ( Degree = 2 )","634fde53":"# Extracting the CSV File","aa2f859f":"# Plotting the graph between the Charges and Region","3639744c":"# Linear Regression ( Degree = 3 )","60915cf6":" data.loc [ data [ 'sex' ] == 'male' , 'sex' ] = 1\ndata.loc [ data [ 'sex' ] == 'female' , 'sex' ] = 0\n\ndata.loc [ data ['smoker'] == 'yes' , 'smoker' ] = 1\ndata.loc [ data ['smoker'] == 'no' , 'smoker' ] = 0\n \n\nstatus = pd.get_dummies ( data[ 'region' ] , drop_first = True )\ndata = pd.concat ( [data , status ] , axis  = 1 )\n\ndel data ['region'] ","417d9c08":"# Label Encoding","a3ff9bdc":"# Linear Regression ( Degree = 4 )","f882c6be":"# Two Degree Polynomial Gives Better Results\n\n# Note :\n\n-> More the degree , more is the overfit\n\n-> More the degree , more becomes difficult to predict on train data as well as test data \n\nKindly upvote if you like this Notebook , Do share\n\nHappy Kaggling ;)\n"}}