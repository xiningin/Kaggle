{"cell_type":{"99b7eee5":"code","88cfe4b6":"code","9373767c":"code","30599fcf":"code","2176d673":"code","dd9ea9ef":"code","d9201a3b":"code","de209c1b":"code","65a9c1ad":"code","e2e40795":"code","7a95a1a6":"code","1818eff9":"markdown","de9a11e7":"markdown","ddede1bb":"markdown"},"source":{"99b7eee5":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport cv2\nimport skimage as ski\nimport os\nTRAIN_FOLD, TEST_FOLD = '..\/input\/understanding_cloud_organization\/train_images', '..\/input\/understanding_cloud_organization\/test_images'\ntrain = pd.read_csv('..\/input\/understanding_cloud_organization\/train.csv')","88cfe4b6":"train.head()","9373767c":"image_name = os.listdir(TRAIN_FOLD)[0]\ntest_image = ski.io.imread(os.path.join(TRAIN_FOLD, image_name))\nprint(f'Image : {image_name}')\nplt.imshow(test_image)","30599fcf":"train.columns","2176d673":"test_image_regions = train[train['Image_Label'].str.contains(image_name)]\ntest_image_regions.head()","dd9ea9ef":"def mask_to_image_decoding(image_shape, mask_string):\n    if str(mask_string) == 'nan':\n        return np.zeros(image_shape).astype(np.uint8)\n    if not ((isinstance(image_shape, np.ndarray) and image_name.ndim != 2) or len(image_name) != 2):\n        raise ValueError('Expected 2D image size')\n\n    pairs = list(map(int, mask_string.split(' ')))\n    mask_pairs = [\n        (x, y) for x, y in zip(pairs[::2], pairs[1::2]) \n    ]\n    mask = np.zeros(image_shape)\n    \n    for start, length in mask_pairs:\n        mask[np.unravel_index(list(range(start, start + length)), image_shape, order='F')] = 255\n        \n    return mask.astype(np.uint8)\n   ","d9201a3b":"def plot_image_and_mask(image, string_mask):\n    shp = list(image.shape)[:-1]\n    mask = mask_to_image_decoding(shp, string_mask)\n    contours = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\n    img_gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n    cv2.drawContours(img_gray, contours[0], -1, (255), 8)\n    to_display = np.hstack([img_gray, mask])\n    plt.figure(figsize=(12, 6))\n    plt.imshow(to_display, cmap='gray')","de209c1b":"plot_image_and_mask(test_image, test_image_regions['EncodedPixels'].iloc[0])","65a9c1ad":"plot_image_and_mask(test_image, test_image_regions['EncodedPixels'].iloc[1])","e2e40795":"plot_image_and_mask(test_image, test_image_regions['EncodedPixels'].iloc[2])","7a95a1a6":"plot_image_and_mask(test_image, test_image_regions['EncodedPixels'].iloc[3])","1818eff9":"Loading train data","de9a11e7":"Taking one image as an example","ddede1bb":"Finding corresponding rows in dataframe"}}