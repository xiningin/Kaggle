{"cell_type":{"0581b521":"code","49582778":"code","1d3a39ee":"code","aeb06a86":"code","3fd2cc73":"code","201f1052":"code","df79b58a":"code","c951f85c":"code","ae454b11":"code","b98cc107":"code","873983a1":"code","91343125":"code","38619cd4":"code","8a2411e8":"code","81125843":"code","0faaaa31":"code","4854906a":"code","dfe35b58":"code","059df5db":"code","bde70fdc":"code","90eb4d0d":"code","27fb0f9d":"code","bf692d48":"code","61cb6430":"code","ed1aa02c":"code","34950b01":"code","be767f01":"code","b190708c":"code","2edb320a":"code","1122ad47":"code","66afd26d":"code","fcc929e0":"code","63b1051a":"code","972d0f00":"code","48bd7d7c":"code","ae422e41":"code","83d26d82":"code","70803721":"code","2ce7e6ac":"code","cf8c4dab":"code","198e9134":"code","d5a17796":"code","2b52ec98":"code","af2e2de2":"code","dbf9abb8":"code","71b2904a":"code","1a26d161":"code","fa4071a7":"code","ac2e6784":"code","e80372d4":"code","b1ea7d98":"code","ecd9059b":"code","3e295e00":"code","33c3f197":"code","7840ad35":"code","89c97f1e":"code","8a92a688":"code","fb6c50e3":"code","1e804f7d":"code","6e28efa6":"code","7e132a10":"code","79e08fc5":"code","25172f31":"code","32489701":"code","aa9d0801":"code","4ae5a269":"code","ab994e29":"code","6929f97b":"code","83a5ff92":"code","f777ebb1":"code","7cc4aa11":"code","0513005f":"code","aff60945":"code","c62697db":"code","cb2692fa":"code","9e4664b5":"code","2e5b8a5b":"code","1b52b0a8":"code","3726c42e":"code","75d5f12d":"code","f427ac64":"code","a8e9331b":"code","8db179a0":"code","78c9d882":"code","a3f72958":"code","be3a0259":"code","288c92d3":"code","fc50821c":"code","b4984c52":"code","11f4af4f":"code","37528112":"code","f548b40f":"markdown","2c4ba674":"markdown","0eebdd88":"markdown","7adc032d":"markdown","1df089fe":"markdown","b3a7ffbf":"markdown","b98f8a62":"markdown","dbc21f86":"markdown","53862bd8":"markdown","8b5e24a2":"markdown","860b4cd2":"markdown","9b54fbc5":"markdown","5408313a":"markdown","970dedae":"markdown","71151749":"markdown","05ea862e":"markdown","20bdab3c":"markdown","63da57f8":"markdown","f991f635":"markdown","d24d7704":"markdown","9015f52f":"markdown","7c480ccf":"markdown","78ef8059":"markdown","035ca914":"markdown","89fb4ac1":"markdown","34711812":"markdown","e0417c84":"markdown","489a2766":"markdown","3b6997c2":"markdown","0ab93eac":"markdown","bf9717ec":"markdown","63607955":"markdown","b28b2406":"markdown","b691b418":"markdown","d515b1a5":"markdown","47657cb6":"markdown","3d0a24fe":"markdown"},"source":{"0581b521":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49582778":"df_h = pd.read_csv(os.path.join(dirname, filename))","1d3a39ee":"df_h","aeb06a86":"import matplotlib.pyplot as plt\nimport seaborn as sns","3fd2cc73":"def basic_info(data):\n    print(\"Dataset size is: \", data.size)\n    print(\"Dataset shape is: \", data.shape)\n    print(\"Dataset dimensions is: \", data.ndim)\n    print(\"Dataset columns are: \", data.columns)\n    print(data.info())\n    cat, num = list(), list()\n    for i in data.columns:\n        if data[i].dtype == object:\n            cat.append(i)\n        else:\n            num.append(i)\n    print(\"Categotical columns are: \", cat)\n    print(\"Numerical columns are: \", num)\n    \n    return cat, num","201f1052":"categorical1, numerical1 = basic_info(df_h)","df79b58a":"df_h.isnull().sum()","c951f85c":"corr = df_h.corr()\nplt.figure(figsize=(35,35))\nax= sns.heatmap(corr, vmin = -1, vmax = 1, square = True, annot=True)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 45, horizontalalignment = 'right', fontsize=10)\nplt.show()","ae454b11":"sns.pairplot(df_h, kind = 'reg')","b98cc107":"df_h['age'].value_counts()","873983a1":"plt.figure(figsize = (20,8))\nsns.countplot(df_h['age'], edgecolor = '#DC143C')\nplt.show()","91343125":"plt.figure(figsize = (20,8))\nplt.hist(df_h['age'], edgecolor = '#DC143C')\nplt.show()","38619cd4":"df_h['anaemia'].value_counts()","8a2411e8":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['anaemia'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        df_h['anaemia'].value_counts()[i],ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","81125843":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['anaemia'], hue = df_h['sex'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","0faaaa31":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['anaemia'], hue = df_h['DEATH_EVENT'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","4854906a":"df_h['creatinine_phosphokinase'].value_counts()","dfe35b58":"plt.figure(figsize=(20,8))\nplt.hist(df_h['creatinine_phosphokinase'], color = \"#68228B\", edgecolor = '#97FFFF')\nplt.show()","059df5db":"df_h['diabetes'].value_counts()","bde70fdc":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['diabetes'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","90eb4d0d":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['diabetes'], hue = df_h['sex'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","27fb0f9d":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['diabetes'], hue = df_h['DEATH_EVENT'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","bf692d48":"df_h['ejection_fraction']","61cb6430":"plt.figure(figsize=(20,8))\nplt.hist(df_h['ejection_fraction'], edgecolor = 'green')\nplt.show()","ed1aa02c":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['ejection_fraction'], hue = df_h['sex'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\n#plt.legend()\nplt.show()","34950b01":"df_h['high_blood_pressure']","be767f01":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['high_blood_pressure'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\nplt.show()","b190708c":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['high_blood_pressure'], hue = df_h['sex'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\nplt.show()","2edb320a":"plt.figure(figsize=(20,9))\ngraph = sns.countplot(df_h['high_blood_pressure'], hue = df_h['DEATH_EVENT'])\ni=0\nfor p in graph.patches:\n    #print(p)\n    height = p.get_height()\n    graph.text(p.get_x()+p.get_width()\/2., height + 0.1,\n        height,ha=\"center\")\n    i += 1\nplt.show()","1122ad47":"df_h['serum_creatinine']","66afd26d":"plt.figure(figsize=(20,8))\nsns.distplot(df_h['serum_creatinine'])","fcc929e0":"df_h['serum_sodium'].value_counts()","63b1051a":"plt.figure(figsize=(20,8))\nsns.distplot(df_h['serum_sodium'])","972d0f00":"df_h['sex'].value_counts()","48bd7d7c":"labels = df_h['sex'].value_counts().index.tolist()\nsizes = df_h['sex'].value_counts()\nfig, ax=plt.subplots()\nax.pie(sizes, labels=labels, autopct=\"%1.1f%%\", shadow=True, startangle=90)\nax.axis('equal')\nplt.show()","ae422e41":"df_h['smoking'].value_counts()","83d26d82":"labels = df_h['smoking'].value_counts().index.tolist()\nsizes = df_h['smoking'].value_counts()\nfig, ax=plt.subplots()\nexplode = (0, 0.2)\nax.pie(sizes, explode = explode,labels=labels, autopct=\"%1.1f%%\", shadow=True, startangle=90)\nax.axis('equal')\nplt.show()","70803721":"df_h['time'].value_counts()","2ce7e6ac":"plt.figure(figsize = (20,8))\nplt.hist(df_h['time'], edgecolor = 'red')\nplt.show()","cf8c4dab":"# age, creatinine_phosphokinase, ejection_fraction, platelets, serum_creatinine, serum_sodium, time are the columns which we will use for predicting DEATH_EVENT.\n# we will see for outliers\n# subplot(nrows, ncols, index, **kwargs)\nplt.figure(figsize=(20,13))\nax=plt.subplot(221)\nplt.boxplot(df_h['age'])\nplt.title('Age')\nax = plt.subplot(222)\nplt.boxplot(df_h['creatinine_phosphokinase'])\nplt.title('creatinine_phosphokinase')\nax = plt.subplot(223)\nplt.boxplot(df_h['ejection_fraction'])\nplt.title('ejection_fraction')\nax = plt.subplot(224)\nplt.boxplot(df_h['platelets'])\nplt.title('platelets')","198e9134":"plt.figure(figsize=(20,13))\nax = plt.subplot(221)\nplt.boxplot(df_h['serum_creatinine'])\nplt.title('serum_creatinine')\nax = plt.subplot(222)\nplt.boxplot(df_h['serum_sodium'])\nplt.title('serum_sodium')\nax = plt.subplot(223)\nplt.boxplot(df_h['time'])\nplt.title('time')","d5a17796":"df_h = df_h[df_h['ejection_fraction'] < 70]","2b52ec98":"df_h['creatinine_phosphokinase'] = np.where(df_h['creatinine_phosphokinase'] > df_h['creatinine_phosphokinase'].quantile(0.95), df_h['creatinine_phosphokinase'].quantile(0.50), df_h['creatinine_phosphokinase'])","af2e2de2":"sns.boxplot(df_h['creatinine_phosphokinase'])","dbf9abb8":"df_h['platelets'] = np.where(df_h['platelets'] > df_h['platelets'].quantile(0.95), df_h['platelets'].quantile(0.50), df_h['platelets'])","71b2904a":"sns.boxplot(df_h['platelets'])","1a26d161":"df_h['serum_creatinine'] = np.where(df_h['serum_creatinine'] > df_h['serum_creatinine'].quantile(0.95), df_h['serum_creatinine'].quantile(0.50), df_h['serum_creatinine'])","fa4071a7":"sns.boxplot(df_h['serum_creatinine'])","ac2e6784":"df_h['serum_sodium'] = np.where(df_h['serum_sodium'] > df_h['serum_sodium'].quantile(0.95), df_h['serum_sodium'].quantile(0.50), df_h['serum_sodium'])","e80372d4":"sns.boxplot(df_h['serum_sodium'])","b1ea7d98":"from sklearn.model_selection import train_test_split","ecd9059b":"X = df_h.loc[:, ['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time']]\ny = df_h.loc[:, 'DEATH_EVENT']","3e295e00":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10)","33c3f197":"from sklearn.metrics import accuracy_score","7840ad35":"from sklearn.linear_model import LogisticRegression","89c97f1e":"lr = LogisticRegression()","8a92a688":"model_lr = lr.fit(X_train, y_train)","fb6c50e3":"y_lr_predict = model_lr.predict(X_test)","1e804f7d":"LR_df = pd.DataFrame(data = {\"Actual\": y_test, \"Predicted\": y_lr_predict})","6e28efa6":"LR_df","7e132a10":"model_lr.score(X_test, y_test)","79e08fc5":"score_lr = accuracy_score(y_test, y_lr_predict)","25172f31":"score_lr","32489701":"from sklearn.ensemble import RandomForestClassifier","aa9d0801":"rfc = RandomForestClassifier()","4ae5a269":"model_rfr = rfc.fit(X_train, y_train)","ab994e29":"y_rfr_predict = model_rfr.predict(X_test)","6929f97b":"RFR_df = pd.DataFrame(data = {\"Actual\": y_test, \"Predicted\": y_rfr_predict})","83a5ff92":"RFR_df","f777ebb1":"model_rfr.score(X_test, y_test)","7cc4aa11":"score_rfr = accuracy_score(y_test, y_rfr_predict)","0513005f":"score_rfr","aff60945":"from sklearn.naive_bayes import GaussianNB","c62697db":"gnb = GaussianNB()","cb2692fa":"model_gnb = gnb.fit(X_train, y_train)","9e4664b5":"y_gnb_predict = model_gnb.predict(X_test)","2e5b8a5b":"GNB_df = pd.DataFrame(data = {\"Actual\":y_test, \"Predicted\": y_gnb_predict})","1b52b0a8":"GNB_df","3726c42e":"model_gnb.score(X_test, y_test)","75d5f12d":"score_gnb = accuracy_score(y_test, y_gnb_predict)","f427ac64":"score_gnb","a8e9331b":"from sklearn.tree import DecisionTreeClassifier","8db179a0":"dtc = DecisionTreeClassifier(random_state=42)","78c9d882":"model_dtc = dtc.fit(X_train, y_train)","a3f72958":"y_dtc_predit = model_dtc.predict(X_test)","be3a0259":"DTC_df = pd.DataFrame(data = {'Actual': y_test, \"Predicted\": y_dtc_predit})","288c92d3":"DTC_df","fc50821c":"model_dtc.score(X_test, y_test)","b4984c52":"score_dtc = accuracy_score(y_test, y_dtc_predit)","11f4af4f":"score_dtc","37528112":"print(\"Logistic Regression accuracy: \", score_lr)\nprint(\"Random Forest Classifier accuracy: \", score_rfr)\nprint(\"Naive Bayes accuracy: \", score_gnb)\nprint(\"DecisionTreeClassifier accuracy\", score_dtc)","f548b40f":"### anaemia ","2c4ba674":"# Basic Informations","0eebdd88":"### sex","7adc032d":"### creatinine_phosphokinase","1df089fe":"We see that only age, anameia, creatinine_phosphokinase, high_blood_pressure, serum_creatinine hvae +ve correlation with death_event","b3a7ffbf":"### serum_sodium","b98f8a62":"#### One thing you might get in mind that even though while replacing outliers with median, we still had some outliers.\n#### Well as much as I searched online and as much as I understood, I replaced the most outer outliers (as I used 0.95) with median.\n#### That's why the far outliers were gone. You can spot that on the 2nd set of boxplots I did.","dbc21f86":"### ejection_fraction","53862bd8":"## Logistic Regression","8b5e24a2":"## Decision Tree","860b4cd2":"We see that 105 people had high blood pressure","9b54fbc5":"### high_blood_pressure","5408313a":"# General Exploration","970dedae":"Columns which i will be taking for model makinh are: age, creatinine_phosphokinase, ejection_fraction, platelets, serum_creatinine, serum_sodium, time","71151749":"#### lets see anemia wrt to sex and wrt death_event","05ea862e":"# Final Result","20bdab3c":"### age","63da57f8":"#### With this we come to the end of this noteook. I hope you like it. If you have any question do ask. If I did something wrong, do point it out and I will rectify it.","f991f635":"### serum_creatinine","d24d7704":"### Lets see the correlation b\/w all the values","9015f52f":"### Before model making, see for outliers in your independent variables, so as to make changes or do more filteration","7c480ccf":"# Model Making","78ef8059":"#### We see that 31.2% of the people used to smoke","035ca914":"#### This chart shows the relation b\/w high blood pressure and sex","89fb4ac1":"## Random Forest Classififer","34711812":"### So this is it. Thank you.","e0417c84":"### smoking","489a2766":"#### This chart shows the relation b\/w high blood pressure and DEATH EVENT","3b6997c2":"### time","0ab93eac":"### diabetes","bf9717ec":"## Naive Bayes","63607955":"### Importing Necessary Libraries","b28b2406":"ejection_fraction have very less outliers so we are gonna remove them, the rest which are having outliers, we are gonna replace them with their median.","b691b418":"We see that most people are in the ejection_fraction range of 35-40.","d515b1a5":"#### Diabetes wrt to sex and death event","47657cb6":"#### If you liked my work, do give an upvote","3d0a24fe":"this is good for us since there are no null values present"}}