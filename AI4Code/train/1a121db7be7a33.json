{"cell_type":{"aac371dd":"code","d7069a8a":"code","113c3ab0":"code","c50faf91":"code","b98f9834":"code","e14bfe13":"markdown","c058a3a6":"markdown","8ee694f5":"markdown","daf70929":"markdown"},"source":{"aac371dd":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\ndf_train = pd.read_csv('\/kaggle\/input\/imc2122la3\/train.csv',header=None)\ndf_test = pd.read_csv('\/kaggle\/input\/imc2122la3\/test.csv',header=None)\ndf_kaggle = pd.read_csv('\/kaggle\/input\/imc2122la3\/kaggle.csv',header=None)\n\ntrain_array = df_train.values\ntrain_x = train_array[:,0:-1]\ntrain_y = train_array[:,-1]\n\ntest_array = df_test.values\ntest_x = test_array[:,0:-1]\ntest_y = test_array[:,-1]\n\nkaggle_x = df_kaggle.values # we do not have depenent variable here\n\nscaler = StandardScaler()\nscaler.fit(train_x)\ntrain_x = scaler.transform(train_x)\ntest_x = scaler.transform(test_x) # note we standarize with mean\/variance from the training set\n#kaggle_x = scaler.transform(kaggle_x) # note we standarize with mean\/variance from the training set\n\nprint(test_array.shape)\nprint(test_x.shape)\nprint(test_y.shape)\nprint(np.unique(train_y))\n\nprint(kaggle_x.shape)","d7069a8a":"lr = LogisticRegression(solver=\"liblinear\") # Default optimizer crashes in this dataset\nlr.fit(train_x, train_y)\ntrain_pred = lr.predict(train_x)\ntest_pred = lr.predict(test_x)","113c3ab0":"print('Train accuracy:{0:.4f}'.format(accuracy_score(train_y, train_pred)))\nprint('Test accuracy:{0:.4f}'.format(accuracy_score(test_y, test_pred)))\nprint('Train confusion matrix:')\nprint(confusion_matrix(train_y, train_pred))\nprint('Test confusion matrix:')\nprint(confusion_matrix(test_y, test_pred))\n","c50faf91":"kaggle_pred = lr.predict(kaggle_x)","b98f9834":"df_k = pd.DataFrame(kaggle_pred.astype(int))\ndf_k.to_csv('\/kaggle\/working\/submission.csv', index_label='Id', header=['Category'])","e14bfe13":"# Fit the model","c058a3a6":"# Evaluate model performance","8ee694f5":"# Kaggle competition \"hello world!\" for IMC2122","daf70929":"# Get kaggle predictions"}}