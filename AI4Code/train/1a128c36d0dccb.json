{"cell_type":{"4a066a93":"code","cb2cd001":"code","1212fb45":"code","8e1847e9":"code","45ebad03":"code","da370afb":"code","8d668358":"code","c661728b":"code","7b429162":"code","bce1a30b":"code","1619fc46":"code","b2f5b175":"code","289344fc":"code","1b29a840":"code","2b7cec5c":"code","d35218dd":"markdown"},"source":{"4a066a93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_profiling import ProfileReport\n\n","cb2cd001":"! conda install hvplot -y\nimport hvplot.pandas","1212fb45":"\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8e1847e9":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv',\n                    index_col=\"Id\")\ntrain['Date'] = pd.to_datetime(train.Date).dt.date\ndisplay(train.head())\n\n\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv',\n                   index_col=\"ForecastId\")\ntest['Date'] = pd.to_datetime(test.Date).dt.date\ndisplay(test.head())","45ebad03":"print(f'Training dates range from {train.Date.min()} to {train.Date.max()} \\n'\n      f'Prediction dates range from {test.Date.min()} to {test.Date.max()}')","da370afb":"train_profile = ProfileReport(train, title='Pandas Profiling Report', html={'style':{'full_width':True}})\ntrain_profile","8d668358":"# Get all the geographies\nlist(train.groupby(['Country_Region', 'Province_State']).groups)","c661728b":"# Focus on Hong Kong\ntrain_HK = train[train.Province_State == 'Hong Kong'].copy()\ntrain_HK['NewCases'] = train_HK.ConfirmedCases-train_HK.ConfirmedCases.shift(1)\ntrain_HK","7b429162":"total = train_HK.hvplot.line(x='Date', y='ConfirmedCases')\nnew = train_HK.hvplot.line(x='Date', y='NewCases')\n\n(total+new).cols(1)","bce1a30b":"t = train_HK.hvplot.line(x='Date', y='ConfirmedCases')\nn = train_HK.hvplot.line(x='Date', y='Fatalities')\n\n(t+n).cols(1)","1619fc46":"train_HK.hvplot.hist(y='NewCases')","b2f5b175":"train.loc[(train.Country_Region == 'China') & (train.Province_State != 'Hubei')].hvplot.line(x='Date', y='ConfirmedCases', by='Province_State')","289344fc":"train.loc[(train.Country_Region == 'China') & (train.Province_State != 'Hubei')].hvplot.violin(y='ConfirmedCases',\n                                                                                    by='Province_State', rot=45)","1b29a840":"train.loc[(train.Country_Region == 'US') & (~train.Province_State.str.contains('New', na=False))].hvplot.violin(y='ConfirmedCases',\n                                                                                    by='Province_State', rot=45, width=700, height=300)","2b7cec5c":"max_dead = train.groupby('Country_Region')['Fatalities'].max()\nmax_dead[max_dead>500].hvplot.bar(rot=65, width=600, height=350)","d35218dd":"Note - the dates above don't seem to make sense."}}