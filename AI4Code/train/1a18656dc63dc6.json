{"cell_type":{"94cd8386":"code","5355b735":"code","0c5d047f":"code","c56898ec":"code","f763a028":"code","8edd59c1":"code","2b7beb61":"code","31c2f40b":"code","31887528":"code","4943c2cc":"code","4642c5a3":"code","6eff0096":"code","269ddcfb":"code","286a1b34":"code","40873f66":"code","86bc0d10":"code","4c317b15":"code","a3928077":"code","f4d03087":"code","88735091":"code","4c4aac38":"code","f860a25b":"code","72718422":"code","2d04f31e":"markdown","e67e952d":"markdown","aa2928d8":"markdown"},"source":{"94cd8386":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5355b735":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')","0c5d047f":"df=pd.read_csv(\"..\/input\/iris\/Iris.csv\")","c56898ec":"df.head()","f763a028":"df.shape","8edd59c1":"df.isnull().sum()","2b7beb61":"plt.gcf().set_size_inches(12,6)\ndf['SepalLengthCm'].hist()\nplt.show()","31c2f40b":"df['SepalWidthCm'].hist(figsize=(12,6))\nplt.show()","31887528":"df['PetalLengthCm'].hist(figsize=(12,6))\nplt.show()","4943c2cc":"df['PetalWidthCm'].hist(figsize=(12,6))\nplt.show()","4642c5a3":"df['Species'].value_counts()","6eff0096":"X=df.drop(['Species','Id'],axis='columns')","269ddcfb":"y=df['Species']","286a1b34":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)","40873f66":"from sklearn.tree import DecisionTreeClassifier\nmodel=DecisionTreeClassifier(criterion='gini',random_state=1)\nmodel.fit(X_train,y_train)","86bc0d10":"predictions=model.predict(X_test)","4c317b15":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy: \",accuracy_score(y_test,predictions))","a3928077":"from sklearn.metrics import confusion_matrix,plot_confusion_matrix","f4d03087":"print(confusion_matrix(y_test,predictions))\nplot_confusion_matrix(model,X_test,y_test)\nplt.grid(False)\nplt.gcf().set_size_inches(12,6)","88735091":"model_2=DecisionTreeClassifier(criterion='entropy',random_state=1)\nmodel_2.fit(X_train,y_train)","4c4aac38":"predictions_2=model.predict(X_test)","f860a25b":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy: \",accuracy_score(y_test,predictions_2))","72718422":"print(confusion_matrix(y_test,predictions_2))\nplot_confusion_matrix(model_2,X_test,y_test)\nplt.grid(False)\nplt.gcf().set_size_inches(12,6)","2d04f31e":"# Using Entropy in DecisionTree","e67e952d":"# Decision Tree","aa2928d8":"# Using Gini in DecisionTree"}}