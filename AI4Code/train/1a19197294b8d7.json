{"cell_type":{"32e01e68":"code","fecb5896":"code","cabdcae8":"code","3990109e":"code","8ac2a8ce":"code","be74dff0":"code","083cd4bf":"code","fa4d56a2":"code","1add9415":"code","975e4dfd":"code","9320b6dd":"code","ec8810d0":"code","c24152a2":"code","3851373f":"code","05888db9":"code","ea1aa426":"code","9b8f8b11":"code","a0857c59":"code","8d0dea01":"code","3b8e2850":"code","3a07de93":"code","81cd53f6":"code","cf37c7c1":"code","8e509435":"code","37123a25":"code","0dec79d6":"code","b210456d":"code","787b3b86":"code","c5a42663":"code","9d23f49f":"code","51d72471":"code","d7dac089":"code","b28a689c":"code","99daa564":"code","a5f62f8d":"code","7af37e4d":"code","98d4588b":"code","ec25425f":"code","82e7b1d5":"code","1bce39f8":"code","17d71c3e":"code","943ccdd5":"code","419afd6d":"code","ff500579":"code","7f8ff44c":"markdown","e275cf83":"markdown","1b0d05d5":"markdown","89df3275":"markdown","a4b138eb":"markdown","0874fd2b":"markdown","270e73f6":"markdown","eb9aac81":"markdown","26657282":"markdown","6683af1c":"markdown","8a181149":"markdown","eb998889":"markdown","80ae8039":"markdown","ee4a3fcd":"markdown","4d7aa08c":"markdown","505a0dd4":"markdown","a4e68f7a":"markdown","25dc2224":"markdown","c6ee6da4":"markdown"},"source":{"32e01e68":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, validation_curve, GridSearchCV\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\n\nRANDOM_STATE = 17","fecb5896":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_all = pd.concat([train, test], sort=True).reset_index(drop=True)\ndf_all.head()","cabdcae8":"def divide_df(all_data):\n    return all_data.loc[:890], all_data.loc[891:].drop(['Survived'], axis=1)","3990109e":"print(train.info())","8ac2a8ce":"print(test.info())","be74dff0":"def display_missing(data, name):\n    missing_data = data.isna().sum()\n    print(name)\n    for feature, i in missing_data.items():\n        print('%s column missing values: %s' % (feature, i))\n    print('\\n')\n\n\n\ndisplay_missing(train, 'Train')\ndisplay_missing(test, 'Test')","083cd4bf":"numerical = list(set(df_all.columns) - \n                 set(['Sex', 'Embarked', 'Survived']))\n\ncorr_matrix = df_all[numerical].corr()\nfig, ax = plt.subplots(1,3,figsize=(15,4))\nsns.heatmap(corr_matrix, annot=True,  ax=ax[0], fmt=\".2f\");\nsns.boxplot(x='Sex', y='Age', data=df_all, ax=ax[1]);\nsns.boxplot(x='Embarked', y='Age', data=df_all, ax=ax[2]);\nfig.show()","fa4d56a2":"df_all['Age'] = df_all.groupby(['Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","1add9415":"df_all['Fare'] = df_all.groupby(['Pclass'])['Fare'].apply(lambda x: x.fillna(x.median()))","975e4dfd":"embarked_mode = df_all['Embarked'].mode()[0]\ndf_all['Embarked'] = df_all['Embarked'].fillna(embarked_mode)\nprint('Missing values of Embarked filled with:', embarked_mode)","9320b6dd":"df_all.drop('Cabin', axis=1, inplace=True)","ec8810d0":"fig1, ax1 = plt.subplots()\nax1.pie(train['Survived'].groupby(train['Survived']).count(), \n        labels = ['Not Survived', 'Survived'], autopct = '%1.1f%%')\nax1.axis('equal')\n\nplt.show()","c24152a2":"df_all.head()","3851373f":"df_all['Title'] = df_all['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\nfig, ax = plt.subplots(figsize=(15,5))\nsns.countplot(x='Title', hue='Survived', data=df_all, ax=ax);\nfig.show()","05888db9":"df_all['Title'] = df_all['Title'].replace(['Miss', 'Mrs','Ms', \n                                           'Mlle', 'Lady', 'Mme', \n                                           'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ndf_all['Title'] = df_all['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', \n                                           'Capt', 'Sir', 'Don', 'Rev'], 'Other')\nsns.countplot(x='Title', hue='Survived', data=df_all);","ea1aa426":"df_all.drop('Name', axis=1, inplace=True)","9b8f8b11":"df_all.drop('Ticket', axis=1, inplace=True)","a0857c59":"df_all.head()","8d0dea01":"sex_dict = {'male':1, 'female':0}\ndf_all['Sex'] = df_all['Sex'].map(sex_dict)","3b8e2850":"embarked_dict = {'S':0, 'Q':1, 'C':2}\ndf_all['Embarked'] = df_all['Embarked'].map(embarked_dict)","3a07de93":"title_dict = {'Mr':0, 'Miss\/Mrs\/Ms':1, 'Master':2, 'Other':3}\ndf_all['Title'] = df_all['Title'].map(title_dict)","81cd53f6":"df_all.head()","cf37c7c1":"df_train, df_test = divide_df(df_all)\ndf_train = df_train.drop('PassengerId', axis=1)\ndf_train.head()","8e509435":"X = df_train.drop(['Survived'], axis=1)\ny = df_train['Survived']\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X, y, test_size=0.33, random_state=RANDOM_STATE)\n\ncategorical_features = ['Embarked', 'Pclass', 'Title']","37123a25":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)\n    ])","0dec79d6":"logit = LogisticRegression(solver='lbfgs', max_iter=500,\n                           random_state=RANDOM_STATE, n_jobs=-1)\n\nparameters = {'C':[0.005, 0.01, 0.05, 0.1, 0.5, 1]}\nlogit_grid = GridSearchCV(logit, parameters)\n\nlogit_pipe = Pipeline([('preprocessor', preprocessor),\n                       ('scaler', StandardScaler()), \n                       ('logit', logit_grid)])\nlogit_pipe.fit(X_train, y_train);","b210456d":"print('Best C: ', logit_grid.best_params_['C'])","787b3b86":"print('Train accuracy:', accuracy_score(y_train, logit_pipe.predict(X_train)))\nprint('CV accuracy:', logit_grid.best_score_)\nprint('Test accuracy:', accuracy_score(y_valid, logit_pipe.predict(X_valid)))","c5a42663":"rf = RandomForestClassifier(random_state=RANDOM_STATE, n_jobs=-1)\n\nparameters = {'n_estimators':[3, 5, 10, 30],\n              'max_depth': range(1, 10)}\n\nrf_grid = GridSearchCV(rf, parameters)\n\nrf_pipe = Pipeline([('preprocessor', preprocessor), \n                    ('forest', rf_grid)])\nrf_pipe.fit(X_train, y_train);","9d23f49f":"print('Best n_estimators: ', rf_grid.best_params_['n_estimators'])\nprint('Best max_depth: ', rf_grid.best_params_['max_depth'])","51d72471":"print('Train accuracy:', accuracy_score(y_train, rf_pipe.predict(X_train)))\nprint('CV accuracy:', rf_grid.best_score_)\nprint('Test accuracy:', accuracy_score(y_valid, rf_pipe.predict(X_valid)))","d7dac089":"lgb_clf = lgb.LGBMClassifier(random_state=RANDOM_STATE)","b28a689c":"#lgb_clf.fit(X_train, y_train)\n#accuracy_score(y_valid, lgb_clf.predict(X_valid))","99daa564":"param_grid = {'num_leaves': [7, 15, 31, 63], \n              'max_depth': [1, 2, 3, 4, 5, 6, -1]}\n\nlgb_grid = GridSearchCV(estimator=lgb_clf, param_grid=param_grid, \n                             cv=5, verbose=1, n_jobs=-1)\n\nlgb_grid.fit(X_train, y_train, categorical_feature=categorical_features);","a5f62f8d":"print('Best params: ', lgb_grid.best_params_)","7af37e4d":"print('Train accuracy:', accuracy_score(y_train, lgb_grid.predict(X_train)))\nprint('CV accuracy:', lgb_grid.best_score_)\nprint('Test accuracy:', accuracy_score(y_valid, lgb_grid.predict(X_valid)))","98d4588b":"num_iterations = 2000\nlgb_clf2 = lgb.LGBMClassifier(random_state=RANDOM_STATE, \n                              max_depth=lgb_grid.best_params_['max_depth'], \n                              num_leaves=lgb_grid.best_params_['num_leaves'], \n                              n_estimators=num_iterations,\n                              n_jobs=-1)\n\nparam_grid2 = {'learning_rate': np.logspace(-4, 0, 10)}\nlgb_grid2 = GridSearchCV(estimator=lgb_clf2, param_grid=param_grid2,\n                               cv=5, verbose=1, n_jobs=4)\n\nlgb_grid2.fit(X_train, y_train, categorical_feature=categorical_features)","ec25425f":"print('Best params: ', lgb_grid2.best_params_)","82e7b1d5":"print('Train accuracy:', accuracy_score(y_train, lgb_grid2.predict(X_train)))\nprint('CV accuracy:', lgb_grid2.best_score_)\nprint('Test accuracy:', accuracy_score(y_valid, lgb_grid2.predict(X_valid)))","1bce39f8":"final_lgb = lgb.LGBMClassifier(n_estimators=num_iterations,\n                               max_depth=lgb_grid.best_params_['max_depth'], \n                               num_leaves=lgb_grid.best_params_['num_leaves'],\n                               learning_rate=lgb_grid2.best_params_['learning_rate'],\n                               n_jobs=-1, random_state=RANDOM_STATE)","17d71c3e":"final_lgb.fit(X, y, categorical_feature=categorical_features)","943ccdd5":"pd.DataFrame(final_lgb.feature_importances_,\n             index=X_train.columns, columns=['Importance']).sort_values(\n    by='Importance', ascending=False)[:10]","419afd6d":"ids = df_test['PassengerId'].values\ntest_inputs = df_test.drop('PassengerId', axis=1)","ff500579":"predsTest = final_lgb.predict(test_inputs)\ny = np.int32(predsTest > 0.5)\ny = y.astype(int)\n\noutput = pd.DataFrame({'PassengerId': ids, 'Survived': y})\noutput.to_csv(\"submission.csv\", index=False)","7f8ff44c":"### 2.2 Random forest","e275cf83":"Group Title into 4 categories","1b0d05d5":"### 1.1 Missing Values","89df3275":"### 1.2 Target distribution","a4b138eb":"**1.1.4 Cabin**\n\nCabin has many missing values. Let's just drop it","0874fd2b":"## 1. Data Analysis","270e73f6":"### 2.1 Logistic Regression","eb9aac81":"### 1.3 Feature engineering","26657282":"**1.3.2 Ticket**\n\nJust drop this column","6683af1c":"**1.1.2. Fare**\n\nMissing values in Fare are filled with median age of corresponding Pclass group, since Pclass has high correlation with Fare","8a181149":"### 1.4 Encode categorical features","eb998889":"**1.1.3. Embarked**","80ae8039":"**1.3.1 Name**\n\nLet's extract useful information from Name","ee4a3fcd":"**2.3.2 Second stage of hyper-param tuning: convergence:**","4d7aa08c":"**2.3.1 First stage of hyper-param tuning: tuning model complexity**","505a0dd4":"**1.1.1. Age**\n\nMissing values in Age are filled with median age of corresponding Pclass group, since Pclass has high correlation with Age","a4e68f7a":"## 2. Model","25dc2224":"### 2.3 LightGBM","c6ee6da4":"## 3. **Submission**"}}