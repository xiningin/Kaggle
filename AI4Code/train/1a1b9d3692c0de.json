{"cell_type":{"5de28a48":"code","5650e327":"code","9e3bb44c":"code","909654a1":"code","fe525e97":"code","453db846":"code","4a45de65":"code","ec519f50":"code","84d770eb":"code","9bce691f":"code","0cf6f238":"code","141fdf9d":"code","dd5284b2":"code","9fb3a8cf":"code","3574a40b":"code","647fd295":"code","c3af9dd7":"code","67a2cab1":"code","90df850c":"code","2d6e6702":"code","2a5bf744":"code","e5cf4575":"code","d47e2615":"code","c2fd5376":"code","6a704cec":"code","fbcc61a8":"code","1da8d757":"code","f21b2bab":"code","615899c7":"code","e31a7e1e":"code","4e883b3d":"code","43712e7b":"code","9e4d72a5":"code","fe4d3600":"code","8c6b4b80":"code","c1a3fadd":"markdown"},"source":{"5de28a48":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras import models\nfrom tensorflow.keras.layers import Input, Dropout, Dense, Flatten, Input, Layer, concatenate\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.regularizers import l2\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nimport cv2\nimport gc\nimport imageio\nfrom os import listdir\nfrom os.path import isfile, join\nfrom tensorflow import keras\nimport shutil\nimport os\nimport PIL.Image\nimport glob","5650e327":"# Loading csv files\ntrain_csv = pd.read_csv('..\/input\/petfinder-pawpularity-score\/train.csv',index_col=[0])\ntest_csv = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv',index_col=[0])","9e3bb44c":"# Loading folders containing images \ntrain_images_folder = \"..\/input\/petfinder-pawpularity-score\/train\/\"\ntest_images_folder = \"..\/input\/petfinder-pawpularity-score\/test\/\"","909654a1":"# Dividing the data\nx_train = train_csv.iloc[:,:-1]\ny = train_csv.iloc[:,-1]\ny = y.sort_index()\nx_train = x_train.sort_index()\ntype(y)","fe525e97":"# Spliting training and validation set from csv file for xgboost model\nx_train_1, x_valid, y_train, y_valid = train_test_split(x_train, y, test_size=0.4, random_state=0)","453db846":"# Getting a validation array\nnew_x_valid = np.array(x_valid)","4a45de65":"model_2 = load_model('..\/input\/model-2-1\/model_2_1')","ec519f50":"# Compiling the Model_1\nmodel_2.compile(optimizer='adam',loss='mse')","84d770eb":"# Image Data Generator\nimg_data_gen = ImageDataGenerator(rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.1,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  vertical_flip=True)","9bce691f":"# Defining a function for getting specific images and their outputs\ndef listing_function(y, x_train_1, images_folder):\n    expectations_from_model_1 = []\n    imagees = []\n    answers = []\n    train_images_folder_ready = glob.glob(images_folder + '\/*.jpg')\n    train_images_folder_ready.sort(reverse=False)\n\n    for imagess in train_images_folder_ready:\n            m = (os.path.basename(imagess))\n            verify = (m)\n            verify = os.path.splitext(verify)\n            verify = verify[0]\n            for i in x_train_1.index:\n                    if verify == i:\n                            x_lt = tf.io.read_file(imagess)\n                            x_lt = tf.image.decode_jpeg(x_lt, channels=3)\n                            x_lt = tf.cast(x_lt, tf.float32) \/ 255.0\n                            x_lt = tf.image.resize(x_lt, (100,100))\n                            x_lt = np.array(x_lt)\n                            imagees.append(x_lt)\n                            \n                            x_vals_final = x_train_1.loc[i]\n                            x_vals_final = np.array(x_vals_final)\n                            expectations_from_model_1.append(x_vals_final)\n                            \n                            if len(y)>=1:\n                                y_final = y[i]\n                                y_final = np.array(y_final)\n                                answers.append([y_final])\n                            else:\n                                answers = []\n\n    return expectations_from_model_1, imagees, answers","0cf6f238":"# Getting values from the defined function\nexpectations_from_model_1, imagees, answers = listing_function(y_train, x_train_1, train_images_folder)","141fdf9d":"# Converting the values into an array\nimagees = np.array(imagees)","dd5284b2":"del answers\ngc.collect()","9fb3a8cf":"# Training model_1\nrecall = keras.callbacks.EarlyStopping(monitor='loss',patience=10,restore_best_weights=True)\nmodel_2.fit(img_data_gen.flow(imagees, expectations_from_model_1,\n                              batch_size=100),steps_per_epoch=len(x_train_1)\/\/100,\n                                                epochs=2, callbacks=[recall])","3574a40b":"del imagees, expectations_from_model_1\ngc.collect()","647fd295":"# Getting test values from the function\nreq, valid_imgs, valid_answers = listing_function(y_valid, x_valid, train_images_folder)","c3af9dd7":"# Converting the valid images into an array\narray_of_valid_imgs = np.array(valid_imgs)","67a2cab1":"# Using the model_1 to predict the features of the pets\npredict_test_vals = model_2.predict(array_of_valid_imgs)","90df850c":"np.set_printoptions(formatter={'float_kind':'{:f}'.format})","2d6e6702":"del _,valid_imgs, array_of_valid_imgs\ngc.collect()","2a5bf744":"def optimizing_for_result(vals):\n    object_list = []\n    predict_test_vals_1 = vals*10\n    for items in predict_test_vals_1:\n        element_list = []\n        for i in items:\n            if i>=3.74:\n                i=1\n                element_list.append(i)\n            else:\n                i=0\n                element_list.append(i)\n        object_list.append(element_list)\n    object_list_1 = np.array(object_list)\n    return object_list_1","e5cf4575":"fitting_res = optimizing_for_result(predict_test_vals)","d47e2615":"from sklearn.metrics import accuracy_score\naccuracy_score(req, fitting_res)","c2fd5376":"# Building Model_2\nxg = XGBRegressor()\nxg.fit(req, valid_answers)","6a704cec":"del valid_answers, predict_test_vals#, fitting_res\ngc.collect()","fbcc61a8":"_, test_img_final, _ = listing_function([], test_csv, test_images_folder)","1da8d757":"del _\ngc.collect()","f21b2bab":"array_of_test_img_final = np.array(test_img_final)","615899c7":"final_features = model_2.predict(array_of_test_img_final)","e31a7e1e":"final_features_ready = optimizing_for_result(final_features)","4e883b3d":"final_features_ready","43712e7b":"test_csv","9e4d72a5":"result_1 = xg.predict(final_features_ready)","fe4d3600":"result_1","8c6b4b80":"finale = pd.DataFrame()\nfinale['Id'] = test_csv.index\nfinale['Pawpularity'] = result_1\nfinale.to_csv('submission.csv',index=False)","c1a3fadd":"# Getting Final results"}}