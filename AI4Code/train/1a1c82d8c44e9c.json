{"cell_type":{"d7ede02d":"code","6150b358":"code","79f1aed7":"code","ffb3c834":"code","cce418fb":"code","a911dd09":"code","ac985dcc":"code","3513e5ab":"code","ffcc94a3":"code","4ddf6ae9":"code","f979b3ef":"code","70f36494":"code","c7139b6a":"code","abf94c4f":"code","bb02acf8":"code","427dbf52":"code","ca089926":"code","54e3a471":"code","e90ab7af":"code","f6fe358f":"code","ae943511":"code","c35906e9":"code","9d782292":"code","8ac1da11":"code","0b3b957f":"code","34783c94":"code","f30f04f9":"code","56978106":"code","a9fa4c26":"code","07affe2e":"code","3215ffa1":"code","1b4d44f4":"code","3a0fe6dc":"code","d3c07fce":"code","ba449851":"code","26f8ea0f":"code","605639a8":"code","89d239ca":"code","b656f4f7":"code","9b9b58b1":"code","9377f0a3":"code","c330a410":"code","e60c589b":"code","1ebb71ff":"code","6dfccb24":"code","e8ff61f7":"code","eacb5f77":"code","d78c00f1":"code","a2c3bc62":"markdown","22488d5b":"markdown","34cca187":"markdown","e92d4e74":"markdown","5449a139":"markdown","9f3cc04f":"markdown","268d9186":"markdown","fbc4da58":"markdown","4c576da1":"markdown","4e571a81":"markdown","8003bf22":"markdown","8947ce74":"markdown","d4d9b345":"markdown","68f78435":"markdown","c48ed268":"markdown","0fc88fa5":"markdown","441ab67b":"markdown","57d79e90":"markdown","d83fe10b":"markdown","32495560":"markdown","dbdce8ba":"markdown"},"source":{"d7ede02d":"!pip3 install seaborn==0.11.0\n!pip install seaborn==0.11.0","6150b358":"import torch\nimport torchvision\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.transforms import ToTensor\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import random_split\nimport pandas as pd\nimport seaborn as sns\nimport datatable as dt\nfrom sklearn.preprocessing import StandardScaler\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nfrom colorama import Fore, Back, Style\nred = Fore.RED\ngrn = Fore.GREEN\nblu = Fore.BLUE\nylw = Fore.YELLOW\nwht = Fore.WHITE\n\nimport plotly.express as ex\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff","79f1aed7":"print(sns.__version__) \n'''We use seaborn version 0.11.0 to use histplot in PairPlot'''","ffb3c834":"path = '..\/input\/tabular-playground-series-jan-2021\/'\ntrain = pd.read_csv(path + 'train.csv')\ntest = pd.read_csv(path + 'test.csv')\nsample = pd.read_csv(path + 'sample_submission.csv')","cce418fb":"print(f'{train.shape}\\n{test.shape}\\n{sample.shape}')","a911dd09":"train.head()","ac985dcc":"test.head()","3513e5ab":"sample.head()","ffcc94a3":"print('number of null columns in train set :- ',np.sum(train.isnull().sum() > 0))\nprint('number of null columns in test set :-',np.sum(test.isnull().sum() > 0 ))","4ddf6ae9":"features = [f'cont{x}'for x in range(1,15)]\ntarget = ['target']","f979b3ef":"all_data = train[features+['id']].append(test)","70f36494":"all_data.head()","c7139b6a":"def plot_distribution(ds,feature,color):\n    plt.figure(dpi=125)\n    sns.distplot(ds[feature],color=color);\n    print(\"{}Max value of {} is {}\\n{}Min value of {} is {}\\n{}Mean value of {} is {}\\n{}Std value of {} is {}\\n{}Median value of {} is {}\".format(red,feature,ds[feature].max(),blu,feature,ds[feature].min(),grn,feature,ds[feature].mean(),ylw,feature,ds[feature].std(),wht,feature,ds[feature].median()));","abf94c4f":"def plot_grid(ds,c1,c2,c3):\n    f = sns.PairGrid(ds[:100]);\n    plt.figure(figsize=(10,10));\n    f.map_upper(plt.scatter,color = c1);\n    f.map_lower(sns.kdeplot,color = c2);\n    #f.map_diag(sns.histplot,color = c3 );\n    f.map_diag(sns.kdeplot, lw=3, legend=False,color = c3);","bb02acf8":"plot_grid(all_data[features],'lightgreen','magenta','red');","427dbf52":"plot_grid(test,'limegreen','darkmagenta','seagreen');","ca089926":"corr1,corr2,corr3 = train[features].corr(),train[features].corr(method='pearson'),train[features].corr(method='spearman');\nplt.figure(figsize=(12,9));\nfig = ex.imshow(corr1);\nfig.show();","54e3a471":"plt.figure(figsize=(12,9))\nfig2 = sns.heatmap(corr2, annot=True, cmap=\"mako\")\nplt.show()","e90ab7af":"plt.figure(figsize=(12,9))\nfig2 = sns.heatmap(corr3, annot=True, cmap=\"rocket_r\")\nplt.show()","f6fe358f":"plt.figure(figsize=(30,15))\nplt.subplot(3,5,1)\nsns.kdeplot(train['cont1'],color='#4285F4',shade=True,alpha=0.8);\nplt.subplot(3,5,2)\nsns.kdeplot(train['cont2'],color='#7D0552',shade=True,alpha=0.8);\nplt.subplot(3,5,3)\nsns.kdeplot(train['cont3'],color='#7FFFD4',shade=True,alpha=0.8);\nplt.subplot(3,5,4)\nsns.kdeplot(train['cont4'],color='#C04000',shade=True,alpha=0.8);\nplt.subplot(3,5,5)\nsns.kdeplot(train['cont5'],color='#4285F4',shade=True,alpha=0.8);\nplt.subplot(3,5,6)\nsns.kdeplot(train['cont6'],color='#F88017',shade=True,alpha=0.8);\nplt.subplot(3,5,7)\nsns.kdeplot(train['cont7'],color='#4285F4',shade=True,alpha=0.8);\nplt.subplot(3,5,8)\nsns.kdeplot(train['cont8'],color='#78C7C7',shade=True,alpha=0.8);\nplt.subplot(3,5,9)\nsns.kdeplot(train['cont9'],color='#728C00',shade=True,alpha=0.8);\nplt.subplot(3,5,10)\nsns.kdeplot(train['cont10'],color='#254117',shade=True,alpha=0.8);\nplt.subplot(3,5,11)\nsns.kdeplot(train['cont11'],color='#6CC417',shade=True,alpha=0.8);\nplt.subplot(3,5,12)\nsns.kdeplot(train['cont12'],color='#CCFB5D',shade=True,alpha=0.8);\nplt.subplot(3,5,13)\nsns.kdeplot(train['cont13'],color='#6A287E',shade=True,alpha=0.8);\nplt.subplot(3,5,14)\nsns.kdeplot(train['cont14'],color='#E3319D',shade=True,alpha=0.8);\nplt.subplot(3,5,15)\nsns.kdeplot(train['target'],color='#E3319D',shade=True,alpha=0.8);","ae943511":"plot_distribution(train,'target','blue')","c35906e9":"lesser,greater = train[train['target'] <= train['target'].median()],train[train['target'] >= train['target'].median()] ","9d782292":"plt.figure(figsize=(30.8,15))\nplt.subplot(3,5,1)\nsns.kdeplot(lesser['cont1'],color='#4285F4',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont1'],color='#4F2083',shade=True,alpha=0.8);\nplt.subplot(3,5,2)\nsns.kdeplot(lesser['cont2'],color='#7D0852',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont2'],color='#43A45F',shade=True,alpha=0.8);\nplt.subplot(3,5,3)\nsns.kdeplot(lesser['cont3'],color='#350836',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont3'],color='#7FFFD4',shade=True,alpha=0.8);\nplt.subplot(3,5,4)\nsns.kdeplot(lesser['cont4'],color='#C08408',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont4'],color='#DA6DBD',shade=True,alpha=0.8);\nplt.subplot(3,5,5)\nsns.kdeplot(lesser['cont5'],color='#4285F4',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont5'],color='#FD376A',shade=True,alpha=0.8);\nplt.subplot(3,5,6)\nsns.kdeplot(lesser['cont6'],color='#F88017',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont6'],color='#508352',shade=True,alpha=0.8);\nplt.subplot(3,5,7)\nsns.kdeplot(lesser['cont7'],color='#4285F4',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont7'],color='#1FCDCB',shade=True,alpha=0.8);\nplt.subplot(3,5,8)\nsns.kdeplot(lesser['cont8'],color='#A3FC08',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont8'],color='#78C7C7',shade=True,alpha=0.8);\nplt.subplot(3,5,9)\nsns.kdeplot(lesser['cont9'],color='#EDEE2C',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont9'],color='#728C08',shade=True,alpha=0.8);\nplt.subplot(3,5,10.8)\nsns.kdeplot(lesser['cont10'],color='#254117',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont10'],color='#9717A9',shade=True,alpha=0.8);\nplt.subplot(3,5,11)\nsns.kdeplot(lesser['cont11'],color='#6CC417',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont11'],color='#872B93',shade=True,alpha=0.8);\nplt.subplot(3,5,12)\nsns.kdeplot(lesser['cont12'],color='#C13408',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont12'],color='#CCFB5D',shade=True,alpha=0.8);\nplt.subplot(3,5,13)\nsns.kdeplot(lesser['cont13'],color='#6A287E',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont13'],color='#CCFB5D',shade=True,alpha=0.8);\nplt.subplot(3,5,14)\nsns.kdeplot(lesser['cont14'],color='#E3319D',shade=True,alpha=0.2);\nsns.kdeplot(greater['cont14'],color='#203E8B',shade=True,alpha=0.8);\nplt.subplot(3,5,15)\nsns.kdeplot(lesser['target'],color='#D8AB59',shade=True,alpha=0.2);\nsns.kdeplot(greater['target'],color='#C61923',shade=True,alpha=0.8);","8ac1da11":"train = train[train['target'] > 5]","0b3b957f":"plot_distribution(train,'target','purple')","34783c94":"def rmse_score(yreal, yhat):\n    return sqrt(mean_squared_error(yreal, yhat))","f30f04f9":"from sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\nimport optuna\nfrom math import sqrt","56978106":"train_ds = train.loc[:,features]\ny_train = train.loc[:,target]\n\nval_ds = test.loc[:,features]","a9fa4c26":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler()\ntrain_ds = sc.fit_transform(train_ds)\nval_ds = sc.transform(val_ds)","07affe2e":"X, X_val, y, y_val = train_test_split(train_ds, y_train, test_size=0.35,random_state=43)\nprint('Train', X.shape, y.shape, 'Test', X_val.shape, y_val.shape)","3215ffa1":"lgb_train = lgb.Dataset(X,y)\nlgb_valid = lgb.Dataset(X_val,y_val,reference=lgb_train)","1b4d44f4":"def objective(trial):    \n    params = {\n            'num_leaves': trial.suggest_int('num_leaves', 32, 512),\n            'boosting_type': 'gbdt',\n            'max_bin': trial.suggest_int('max_bin', 700, 900),\n            'objective': 'regression',\n            'metric': 'RMSE',\n            'learning_rate': trial.suggest_float('learning_rate',0.0155,0.05),\n            'random_state' : 17,\n            'max_depth': trial.suggest_int('max_depth', 4, 16),\n            'min_child_weight': trial.suggest_int('min_child_weight', 1, 16),\n            'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n            'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n            'bagging_freq': trial.suggest_int('bagging_freq', 1, 8),\n            'min_child_samples': trial.suggest_int('min_child_samples', 4, 80),\n            'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1.0),\n            'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 1.0),\n            'early_stopping_rounds': 10\n            }\n    \n    model = lgb.train(params, lgb_train, valid_sets=[lgb_valid], verbose_eval=100, num_boost_round=800)\n    y_pred  = model.predict(X_val)\n    score = rmse_score(y_val, y_pred)\n    print(f\"RMSE = {score}\")\n    return score","3a0fe6dc":"study = optuna.create_study(direction = 'minimize')\nstudy.optimize(objective,n_trials = 50)","d3c07fce":"print(f\"Trials : {len(study.trials)}\")\nprint(f\"Best Trial : {study.best_trial}\")\nbest = study.best_trial\nfor i, j in best.params.items():\n    print(f\"{i} : {j}\")\nprint(f\"{best.value}\")","ba449851":"best_params = best.params\n'''{'num_leaves': 308, 'max_bin': 851, 'learning_rate': 0.016284194606204783, 'max_depth': 15, 'min_child_weight': 12, 'feature_fraction': 0.40359336306503796, 'bagging_fraction': 0.7724641122395841, 'bagging_freq': 4, 'min_child_samples': 62, 'lambda_l1': 9.077642086628708e-08, 'lambda_l2': 0.13127095700079588}, distributions={'num_leaves': IntUniformDistribution(high=512, low=32, step=1), 'max_bin': IntUniformDistribution(high=900, low=700, step=1), 'learning_rate': UniformDistribution(high=0.05, low=0.0155), 'max_depth': IntUniformDistribution(high=16, low=4, step=1), 'min_child_weight': IntUniformDistribution(high=16, low=1, step=1), 'feature_fraction': UniformDistribution(high=1.0, low=0.4), 'bagging_fraction': UniformDistribution(high=1.0, low=0.4), 'bagging_freq': IntUniformDistribution(high=8, low=1, step=1), 'min_child_samples': IntUniformDistribution(high=80, low=4, step=1), 'lambda_l1': LogUniformDistribution(high=1.0, low=1e-08), 'lambda_l2': LogUniformDistribution(high=1.0, low=1e-08)}''';","26f8ea0f":"model = lgb.train(best_params, lgb_train, valid_sets=[lgb_train,lgb_valid],verbose_eval=50,num_boost_round=700)","605639a8":"preds  = model.predict(X_val,num_iteration=model.best_iteration)","89d239ca":"print('LGBM: RMSE %.6f' % (rmse_score(y_val, preds)))","b656f4f7":"print(features)\nlgb.plot_importance(model,importance_type='gain')\nlgb.plot_importance(model);","9b9b58b1":"train_preds = model.predict(train_ds)","9377f0a3":"print('LGBM: Train RMSE %.6f' % (rmse_score(y_train, train_preds)))","c330a410":"train['t_preds'] = train_preds","e60c589b":"sns.jointplot(x = 'target', y = 't_preds',data = train,joint_kws={'alpha' : 0.3},color = 'goldenrod');\nplt.show()","1ebb71ff":"preds = model.predict(val_ds)","6dfccb24":"preds","e8ff61f7":"sub = pd.DataFrame({'id':test.id, 'target':preds})\nsub.to_csv('submission.csv',index=False)","eacb5f77":"sub.head()","d78c00f1":"x = pd.read_csv('.\/submission.csv')\nx.head()","a2c3bc62":"The performance of XGBoost and LGBM was the best of all.. so we use those two and adding catboost","22488d5b":"#### I think 0.0 value for target is an outlier..","34cca187":"# Trying some things on target","e92d4e74":"# Importing libraries\ud83d\udcda","5449a139":"# Work in Progress\ud83d\udea7\ud83d\udea7","9f3cc04f":"# Getting data \ud83d\udcbd","268d9186":"## Metrics \ud83d\udcd0","fbc4da58":"We can see some similarities between some of the features\ud83e\udd14\ud83e\udd14","4c576da1":"### Test Data","4e571a81":"![rmse.JPG](attachment:rmse.JPG)","8003bf22":"## Pair Grid","8947ce74":"cont 6 to cont 13 are somewhat related.. not much though","d4d9b345":"# LGBM Model + Optuna\u2764\ufe0f\u200d\ud83d\udd25","68f78435":"##  Correlation Matrix \ud83c\udfb5\ud83c\udfb5","c48ed268":"### Train Data","0fc88fa5":"#### As we can see it was an outlier","441ab67b":"## Feature Distibutions \ud83d\udcc8\ud83d\udcc8","57d79e90":"We see 2 spikes from the median of the distribution. We can split the dataset from the medain. Suggested by [maunish](https:\/\/www.kaggle.com\/maunish).","d83fe10b":"We see that there are no null values in train and test set","32495560":"# My Submission \ud83d\ude4b\u200d\u2642\ufe0f","dbdce8ba":"# EDA \ud83d\udcca\ud83d\udcca"}}