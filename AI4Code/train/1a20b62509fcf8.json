{"cell_type":{"832e5742":"code","305ddf2e":"code","4f2fc409":"code","d633f549":"code","9b7fa8bc":"code","d3e972c8":"code","bebe1721":"code","761b5ccb":"code","1f0e3d92":"code","29317f24":"code","9d925f6b":"code","26558e47":"code","f72acfb1":"markdown","1993d6a6":"markdown"},"source":{"832e5742":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom pathlib import Path","305ddf2e":"from torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms","4f2fc409":"df_submission = pd.read_csv( '..\/input\/sample_submission.csv' )\nprint( df_submission.shape )","d633f549":"df_submission.head()","9b7fa8bc":"CATEGORY_NAMES = df_submission.columns.values[1:].tolist()\n\nCATEGORY_NAME_TO_ID = {}\nfor i, name in enumerate( CATEGORY_NAMES ):\n    CATEGORY_NAME_TO_ID[name] = i\n\nprint( len( CATEGORY_NAME_TO_ID ) )","d3e972c8":"df_labels = pd.read_csv( '..\/input\/labels.csv' )\ndf_labels['breed_id'] = df_labels['breed'].map( CATEGORY_NAME_TO_ID )\ndf_labels.head()","bebe1721":"class MyDataset(Dataset):\n\n    def __init__(self, df):\n        \n        dataset_str = 'train' if df.shape[1] == 2 else 'test'\n        \n        self.image_dir = Path( '..\/input' ) \/ dataset_str\n        self.df = df\n        \n        # \u5bf9\u8bad\u7ec3\u96c6\u505a\u6570\u636e\u589e\u5f3a\n        if dataset_str == 'train':\n            self.preprocess = transforms.Compose( [\n                transforms.RandomRotation(5),\n                transforms.Resize(256),     # \u7f29\u5c0f\u56fe\u50cf\uff0c\u4f7f\u5f97\u77ed\u8fb9\u4e3a256\n                transforms.RandomCrop(224), # \u968f\u673a\u88c1\u526a224\u00d7224\n                #transforms.RandomHorizontalFlip()\n            ] )\n        else:\n            self.preprocess = transforms.Compose( [\n                transforms.Resize(256),     # \u7f29\u5c0f\u56fe\u50cf\uff0c\u4f7f\u5f97\u77ed\u8fb9\u4e3a256\n                transforms.CenterCrop(224), # \u4e2d\u5fc3\u88c1\u526a224\u00d7224\n            ] )\n        \n        self.preprocess.transforms.append( transforms.ToTensor() )\n#         self.preprocess.transforms.append( transforms.Normalize( mean=[0.485, 0.456, 0.406],\n#                                                                  std=[0.229, 0.224, 0.225] ) )\n\n\n    def __getitem__(self, index):\n\n        image_name = self.df.loc[index, 'id'] + '.jpg'\n        image_path = self.image_dir \/ image_name\n\n        X = Image.open( image_path )\n        X_p = self.preprocess(X)\n\n        simple_ToTensor = transforms.ToTensor()\n        X = simple_ToTensor(X)\n        y = self.df.loc[index, 'breed_id']\n\n        return X, X_p, y\n\n\n    def __len__(self):\n        return len( self.df )","761b5ccb":"df_train = df_labels[['id', 'breed_id']]\ndf_test = df_submission[['id']]\nprint( df_train.shape )\nprint( df_test.shape )","1f0e3d92":"df_temp = df_train.sample(1).copy().reset_index(drop=True)\ntrain_set = MyDataset( df_temp )\ntrain_loader = DataLoader( train_set, batch_size=1, shuffle=False )","29317f24":"image_list = []\n\nfor i in range(9):\n    for batch_i, data in enumerate( train_loader ):\n        batch_X, batch_Xp, batch_y = data\n        \n        # PyTorch\u4f7f\u7528transforms.ToTensor\u540e\uff0csize\u4e3a[N, C, H, W]\n        batch_X = np.transpose( batch_X.squeeze().numpy(), [1, 2, 0] )\n        batch_Xp = np.transpose( batch_Xp.squeeze().numpy(), [1, 2, 0] )\n        \n        image_list.append( batch_Xp )\n        break","9d925f6b":"print( batch_X.shape )\nplt.imshow( batch_X )","26558e47":"fig, axes = plt.subplots( 3, 3, figsize=(9, 9) )\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow( image_list[i] )\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)","f72acfb1":"\u5bf9\u6807\u7b7e\u7c7b\u522b\u8fdb\u884c\u7f16\u53f7","1993d6a6":"\u5f00\u59cb\u5b9a\u4e49Dataset"}}