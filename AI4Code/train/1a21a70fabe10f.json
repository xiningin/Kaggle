{"cell_type":{"4079d0fd":"code","c2435c2d":"code","c99785f4":"code","b3597621":"code","0f08b906":"code","54a95646":"code","7fdddd4d":"code","823ba9a3":"code","c14e37c5":"code","a36de738":"code","96615928":"code","5b023847":"code","77c44930":"code","cb8ef3dc":"code","fd2be907":"code","09187999":"code","bb48b217":"code","38a528fb":"code","ef773790":"code","4af4b42e":"code","ff715d33":"code","db057f3c":"code","0f551b43":"code","afc217bd":"code","2bc819b3":"code","55d86e4d":"code","27f88c13":"code","ad013264":"code","ce20d2ed":"code","ff4ed2a6":"code","8f81d708":"code","dee96ec6":"code","647f095b":"code","8db3e841":"code","d9364e54":"code","33babb64":"code","e4c8e135":"code","b5be62af":"code","3c954996":"code","c9bc2421":"code","287ae86a":"code","f8d6d1bc":"code","d4fda9c0":"code","94dabfc4":"code","c8983940":"code","db478c48":"code","ec64fd86":"code","0eeea982":"code","6ee3cce1":"code","06a0c4ca":"code","e9fffdb9":"code","946724c5":"code","4034c0f9":"code","e9cd03f4":"code","b580a19f":"code","90a425c0":"code","c8df5532":"code","435bfa8f":"code","ddc699f9":"code","47c68d6b":"code","5921d831":"markdown","69494f85":"markdown","0a45b41e":"markdown","11270633":"markdown","120df216":"markdown","ba96b6be":"markdown","ef86d544":"markdown","6f2332f2":"markdown","451bc9f3":"markdown","8f2fbb00":"markdown","12121ec4":"markdown","6623ddff":"markdown","cd1d18a9":"markdown","67f96efe":"markdown","ae0a7526":"markdown","46ec5d03":"markdown","5b848e36":"markdown","1c99523c":"markdown","cf7ea8ac":"markdown","044f4eb5":"markdown","824d1699":"markdown","3ebb3197":"markdown","e3e0e1e8":"markdown","6cb87e70":"markdown","d5c8baab":"markdown","05b7c0dd":"markdown","d7741111":"markdown","665543df":"markdown","383655fb":"markdown","ff46cc88":"markdown","53f4a90d":"markdown","7ab2f549":"markdown"},"source":{"4079d0fd":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport math","c2435c2d":"train = pd.read_csv('..\/input\/titanic\/train.csv')","c99785f4":"print(train.shape)","b3597621":"math.log(891)","0f08b906":"train.sample(10)","54a95646":"train.describe()","7fdddd4d":"train.dtypes","823ba9a3":"cat_features = {\"Name\", \"Sex\", \"Embarked\", \"Ticket\", \"Cabin\"}\nfor f in cat_features:\n    train[f] = train[f].astype(\"category\")","c14e37c5":"train.dtypes","a36de738":"train[cat_features].describe()","96615928":"train[train.duplicated()]","5b023847":"print(train.isnull().sum())","77c44930":"num_features = train.select_dtypes(include = ['float64', 'int64']).columns\nfig, axes = plt.subplots(nrows=len(num_features), ncols=1)\nfig.set_size_inches(10, 10)\nfor i, col in enumerate(num_features):\n    sns.boxplot(data=train[col], orient='h', ax=axes[i], color='g')\nplt.show()\nprint(num_features)","cb8ef3dc":"col_delete_candidate = { 'Name', 'Ticket', 'Cabin' }","fd2be907":"# dropping \"Embarked\"\n\nrow_delete_candidate = { 'Embarked' }\ntrain = train.dropna(subset=row_delete_candidate)","09187999":"\ntrain[\"Age\"].fillna((train[\"Age\"].median()), inplace=True)","bb48b217":"for d in col_delete_candidate:\n    train.drop(d, inplace=True, axis=1)","38a528fb":"print(train.isnull().sum()) ","ef773790":"from sklearn.decomposition import PCA","4af4b42e":"reduction_candidate = {'SibSp', 'Parch'}\n\npca = PCA(n_components=1)\nX = train[reduction_candidate]\npca.fit(X)\nX_pca = pca.transform(X)\n\nfor d in reduction_candidate:\n    train.drop(d, inplace=True, axis=1)\n\ntrain['Kin'] = X_pca","ff715d33":"train.Kin.sample(10)","db057f3c":"train.head(5)","0f551b43":"train['Embarked'] = train['Embarked'].cat.codes\ntrain['Sex'] = train['Sex'].cat.codes","afc217bd":"train.head(5)","2bc819b3":"pass_id = train.PassengerId\ntrain.drop('PassengerId', inplace=True, axis=1)","55d86e4d":"train.head(10)","27f88c13":"from sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram\nfrom sklearn.cluster import DBSCAN","ad013264":"kmeans = KMeans(n_clusters=4).fit(train)\nkmeans_labels = kmeans.labels_\n\nfirst_cluster = np.where(kmeans_labels == 0)\nsecond_cluster = np.where(kmeans_labels == 1)\nthird_cluster = np.where(kmeans_labels == 2)\nfourth_cluster = np.where(kmeans_labels == 3)","ce20d2ed":"print(train.iloc[first_cluster])","ff4ed2a6":"train.iloc[first_cluster].describe()","8f81d708":"print(train.iloc[second_cluster])","dee96ec6":"train.iloc[second_cluster].describe()","647f095b":"print(train.iloc[third_cluster])","8db3e841":"train.iloc[third_cluster].describe()","d9364e54":"print(train.iloc[fourth_cluster])","33babb64":"train.iloc[fourth_cluster].describe()","e4c8e135":"kmeans = KMeans(n_clusters=2).fit(train)\nkmeans_labels = kmeans.labels_\n\nfirst_cluster = np.where(kmeans_labels == 0)\nsecond_cluster = np.where(kmeans_labels == 1)","b5be62af":"print(train.iloc[first_cluster])","3c954996":"train.iloc[first_cluster].describe()","c9bc2421":"print(train.iloc[second_cluster])","287ae86a":"train.iloc[second_cluster].describe()","f8d6d1bc":"def plot_dendrogram(model, **kwargs):\n    # Create linkage matrix and then plot the dendrogram\n\n    # create the counts of samples under each node\n    counts = np.zeros(model.children_.shape[0])\n    n_samples = len(model.labels_)\n    for i, merge in enumerate(model.children_):\n        current_count = 0\n        for child_idx in merge:\n            if child_idx < n_samples:\n                current_count += 1  # leaf node\n            else:\n                current_count += counts[child_idx - n_samples]\n        counts[i] = current_count\n\n    linkage_matrix = np.column_stack([model.children_, model.distances_,\n                                      counts]).astype(float)\n\n    # Plot the corresponding dendrogram\n    dendrogram(linkage_matrix, **kwargs)","d4fda9c0":"agg_clustering = AgglomerativeClustering(distance_threshold=0, n_clusters=None, linkage='ward').fit(train)\nplt.title('Hierarchical Clustering Dendrogram')\n# plot the top three levels of the dendrogram\nplot_dendrogram(agg_clustering, truncate_mode='level', p=5)\nplt.xlabel(\"Number of points in node (or index of point if no parenthesis).\")\nplt.show()","94dabfc4":"agg_clustering = AgglomerativeClustering(distance_threshold=0, n_clusters=None, linkage='average').fit(train)\nplt.title('Hierarchical Clustering Dendrogram')\n# plot the top three levels of the dendrogram\nplot_dendrogram(agg_clustering, truncate_mode='level', p=5)\nplt.xlabel(\"Number of points in node (or index of point if no parenthesis).\")\nplt.show()","c8983940":"agg_clustering = AgglomerativeClustering(distance_threshold=None, n_clusters=2, linkage='ward').fit(train)\nagg_labels = agg_clustering.labels_\n\nfirst_cluster = np.where(agg_labels == 0)\nsecond_cluster = np.where(agg_labels == 1)","db478c48":"print(train.iloc[first_cluster])","ec64fd86":"train.iloc[first_cluster].describe()","0eeea982":"print(train.iloc[second_cluster])","6ee3cce1":"train.iloc[second_cluster].describe()","06a0c4ca":"agg_clustering = AgglomerativeClustering(distance_threshold=None, n_clusters=3, linkage='ward').fit(train)\nagg_labels = agg_clustering.labels_\nfirst_cluster = np.where(agg_labels == 0)\nsecond_cluster = np.where(agg_labels == 1)\nthird_cluster = np.where(agg_labels == 2)","e9fffdb9":"print(train.iloc[first_cluster])","946724c5":"train.iloc[first_cluster].describe()","4034c0f9":"print(train.iloc[second_cluster])","e9cd03f4":"train.iloc[second_cluster].describe()","b580a19f":"print(train.iloc[third_cluster])","90a425c0":"train.iloc[third_cluster].describe()","c8df5532":"from sklearn.cluster import MeanShift, estimate_bandwidth","435bfa8f":"bandwidth = estimate_bandwidth(train, quantile=0.2, n_samples=891)","ddc699f9":"ms = MeanShift(bandwidth=bandwidth, bin_seeding=True)\nX = train\nms.fit(X)\nlabels = ms.labels_\ncluster_centers = ms.cluster_centers_\nlabels_unique = np.unique(labels)\nn_clusters_ = len(labels_unique)\n\nprint(\"number of estimated clusters : %d\" % n_clusters_)\nprint(labels_unique)\nfirst_cluster = np.where(labels == 0)\nprint(train.iloc[first_cluster])\nprint(cluster_centers)","47c68d6b":"import matplotlib.pyplot as plt\nfrom itertools import cycle\n\nplt.figure(1)\nplt.clf()\n\ncolors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk')\nfor k, col in zip(range(n_clusters_), colors):\n    my_members = labels == k\n    print(my_members.shape)\n    cluster_center = cluster_centers[k]\n    print(cluster_center)\n    plt.plot(X[my_members], X[my_members], col + '.')\n    plt.plot(cluster_center[4], cluster_center[4], 'o', markerfacecolor=col,\n             markeredgecolor='k', markersize=14)\nplt.title('Estimated number of clusters: %d' % n_clusters_)\nplt.show()","5921d831":"#### 2 \u0433\u0440\u0443\u043f\u0430","69494f85":"# \u041f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u0438\u0445","0a45b41e":"## \u0412\u0438\u043f\u0430\u0434\u043a\u0438","11270633":"## \u0412\u0438\u0437\u043d\u0430\u0447\u0442\u0435 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456 \u0434\u0430\u043d\u0456\n","120df216":"#### 3 \u0433\u0440\u0443\u043f\u0430","ba96b6be":"#### 1 \u0433\u0440\u0443\u043f\u0430","ef86d544":"### 4 \u0433\u0440\u0443\u043f\u0438","6f2332f2":"### \u0412\u0438\u0431\u0456\u0440 \u0432\u0438\u0436\u043b\u0438\u0432\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0456\u0432 ","451bc9f3":"## \u0421\u0435\u0440\u0435\u0434\u043d\u0456\u0439 \u0437\u0441\u0443\u0432 ","8f2fbb00":"#### 2\u0433\u0440\u0443\u043f\u0430 ","12121ec4":"## \u0412\u0438\u0434\u0430\u043b\u0435\u043d\u043d\u044f \u0441\u0442\u043e\u0432\u043f\u0446\u044f \"PassengerId\"","6623ddff":"# \u0417\u0433\u0440\u0443\u043f\u0443\u0432\u0430\u043d\u043d\u044f","cd1d18a9":"### \u0414\u0432\u0456 \u0433\u0440\u0443\u043f\u0438 ","67f96efe":"# **\u0412\u0438\u0437\u043d\u0430\u0447\u0442\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0456\u0430\u043b\u044c\u043d\u0456 \u043e\u0437\u043d\u0430\u043a\u0438**","ae0a7526":"### \u0414\u0432\u0456 \u0433\u0440\u0443\u043f\u0438 \n","46ec5d03":"## \u041a\u043e\u0434\u0443\u0432\u0430\u043d\u043d\u044f \u043c\u0456\u0442\u043e\u043a \u0434\u043b\u044f \u0441\u0442\u043e\u0432\u043f\u0446\u0456\u0432 \"Sex\" \u0442\u0430 \"\u0412\u0441\u0442\u0443\u043f\"","5b848e36":"\n**\u041f\u0435\u0440\u0435\u0432\u0456\u0440\u043a\u0430 \u0434\u0430\u043d\u0438\u0445**\n*","1c99523c":"## \u0417\u043c\u0435\u043d\u0448\u0435\u043d\u043d\u044f \u0440\u043e\u0437\u043c\u0456\u0440\u043d\u043e\u0441\u0442\u0456","cf7ea8ac":"## \u0406\u0454\u0440\u0430\u0440\u0445\u0456\u0447\u043d\u0430 \u0430\u0433\u043b\u043e\u043c\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0456\u044f","044f4eb5":"#### 2 \u0433\u0440\u0443\u043f\u0430","824d1699":"### 3 \u0433\u0440\u0443\u043f\u0430","3ebb3197":"#### 4 \u0433\u0440\u0443\u043f\u0430","e3e0e1e8":"# # **\u0410\u043d\u0430\u043b\u0456\u0437 \u0434\u0430\u043d\u0438\u0445**","6cb87e70":"## Kmeans","d5c8baab":"#### First cluster","05b7c0dd":"#### \u0442\u0440\u0435\u0442\u044f \u0433\u0440\u0443\u043f\u0430","d7741111":"\n## \u0412\u0438\u0437\u043d\u0430\u0447\u0442\u0435 \u0442\u0438\u043f\u0438 \u043e\u0437\u043d\u0430\u043a","665543df":"#### \u041f\u0435\u0440\u0448\u0430 \u0433\u0440\u0443\u043f\u0430","383655fb":"## \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0438 \u0432\u0438\u0434\u0430\u043b\u0435\u043d\u043d\u044f","ff46cc88":"#### 1 \u0433\u0440\u0443\u043f\u0430","53f4a90d":"1. ## \u041e\u0431\u0440\u043e\u0431\u043a\u0430 \u0432\u0456\u0434\u0441\u0443\u0442\u043d\u0456\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u044c","7ab2f549":"#### 2 \u0433\u0440\u0443\u043f\u0430"}}