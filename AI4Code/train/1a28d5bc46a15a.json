{"cell_type":{"c038d912":"code","2c29d659":"code","f9b16c0e":"code","d84a2516":"code","f23436d8":"code","69943a7d":"code","d209fe7a":"code","f65fcffb":"code","7074b8e2":"code","c7923518":"code","522423f2":"code","e4159801":"code","0f9ef739":"code","bac44403":"code","7a78693a":"code","9aae8301":"code","fef7e519":"markdown","5b389193":"markdown","373cbebe":"markdown","dbb86089":"markdown","33ece545":"markdown","37c10e7f":"markdown","a470507e":"markdown","a37bd6ac":"markdown","23bafde6":"markdown","cf32281d":"markdown","08a29aaa":"markdown","8a3dd14b":"markdown","6530d576":"markdown","ff9651c5":"markdown","99ac3a1c":"markdown"},"source":{"c038d912":"import numpy as np\nimport pandas as pd\nimport squarify\nimport matplotlib.pyplot as plt\n\n# for market basket analysis\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nfrom mlxtend.preprocessing import TransactionEncoder","2c29d659":"df = pd.read_csv('..\/input\/market-basket-optimization\/Market_Basket_Optimisation.csv', header = None)","f9b16c0e":"df.head(5) # looking for the first 5 rows in dataset","d84a2516":"df_res = pd.DataFrame()\nfor i in range(len(df.columns)):\n    df_res = df_res.append(df[i].value_counts())\n","f23436d8":"df_res.head(3)","69943a7d":"df_sum = df_res.sum()\ndf_sum = df_sum.sort_values(ascending=False)\n","d209fe7a":"df_sum","f65fcffb":"plt.figure(figsize=(14,8))\nplt.title(\"FREQUENCY PLOT\")\ncnt = 45 # plot only first 'cnt' values\ncolor = plt.cm.spring(np.linspace(0, 1, cnt))\ndf_sum.head(cnt).plot.bar(color = color)\nplt.xticks(rotation = 'vertical')\nplt.grid(False)\nplt.axis('on')\nplt.show()","7074b8e2":"plt.figure(figsize=(15,15))\ncnt = 40 # plot only first 'cnt' values\ncolor = plt.cm.hot(np.linspace(0, 1, cnt))\ndf_part = df_sum.head(cnt)\nsquarify.plot(sizes = df_part.values, label = df_part.index, alpha=.8, color = color, text_kwargs={'fontsize':8})\nplt.axis('off')\nplt.show()","c7923518":"# making each customers shopping items an identical list\narr = []\nfor i in range(df.shape[0]):\n    arr.append([str(df.values[i,j]) for j in range(df.shape[1])])\n\narr = np.array(arr)\nprint(arr.shape)","522423f2":"te = TransactionEncoder()\ndata = te.fit_transform(arr)\ndata = pd.DataFrame(data, columns = te.columns_)\nprint(data.shape)","e4159801":"data.head(3)","0f9ef739":"data = data.drop(columns=['nan'])\ndata.head(3)","bac44403":"freq_rules = apriori(data, min_support = 0.01, use_colnames = True)\nfreq_rules","7a78693a":"freq_rules['length'] = freq_rules['itemsets'].apply(lambda x: len(x)) # adding 'length' column\nfreq_rules","9aae8301":"mask = freq_rules['length'] > 1 # creating mask for filtering with certain condition\nfiltered_freq_rules = freq_rules.loc[mask] # applying mask\nfiltered_freq_rules # printing the filtering result","fef7e519":"# 2. Read data","5b389193":"# MARKET BASKET ANALYSIS USING PYTHON\n**Market basket analysis** is a data mining technique used by retailers to increase sales by better understanding customer purchasing patterns. It involves analyzing large data sets, such as purchase history, to reveal product groupings, as well as products that are likely to be purchased together [[1]](https:\/\/searchcustomerexperience.techtarget.com\/definition\/market-basket-analysis).\n\nE.g. the rule **{cucumbers, tomatoes} -> {sunflower oil}** found in the sales data of a supermarket would indicate that if a customer buys cucumbers and tomatoes together, they are likely to also buy sunflower oil.","373cbebe":"Also we can frequency plot, but in the form of **heat map**:","dbb86089":"# 4. Transform data\nBefore converting dataset to transaction view, we should convert pandas-data to list-data and then list-data to numpy-data.","33ece545":"# 6. Conclusion\nMore and more organizations are discovering ways of using market basket analysis to gain useful insights into associations and hidden relationships. As industry leaders continue to explore the technique\u2019s value, a predictive version of market basket analysis is making in-roads across many sectors in an effort to identify sequential purchases [[2]](https:\/\/www.kdnuggets.com\/2019\/12\/market-basket-analysis.html).\n\n\nThank you for reading my new article! Hope, you liked it and it was interesting for you!There are some more my articles: \n- [Neural Network for beginners with keras](https:\/\/www.kaggle.com\/maricinnamon\/neural-network-for-beginners-with-keras)\n- [Fetal Health Classification for beginners sklearn](https:\/\/www.kaggle.com\/maricinnamon\/fetal-health-classification-for-beginners-sklearn)\n- [Retail Trade Report Department Stores (LSTM)](https:\/\/www.kaggle.com\/maricinnamon\/retail-trade-report-department-stores-lstm)","37c10e7f":"# 5. Analyze data with apriori rule\nApriori algorithm assumes that any subset of a frequent itemset must be frequent. Its the algorithm behind Market Basket Analysis. Say, a transaction containing {Grapes, Apple, Mango} also contains {Grapes, Mango}. So, according to the principle of Apriori, if {Grapes, Apple, Mango} is frequent, then {Grapes, Mango} must also be frequent [[2]](https:\/\/www.kdnuggets.com\/2019\/12\/market-basket-analysis.html).\n\n**Support:** Its the default popularity of an item. In mathematical terms, the support of item A is nothing but the ratio of transactions involving A to the total number of transactions.\n*Support(Grapes) = (Transactions involving Grapes)\/(Total transaction)* [[2]](https:\/\/www.kdnuggets.com\/2019\/12\/market-basket-analysis.html).\n\n**Confidence:** Likelihood that customer who bought both A and B. Its divides the number of transactions involving both A and B by the number of transactions involving B.\n*Confidence(A => B) = (Transactions involving both A and B)\/(Transactions involving only A)* [[2]](https:\/\/www.kdnuggets.com\/2019\/12\/market-basket-analysis.html).\n\n![image.png](attachment:bdd1e22b-1ea1-4e6f-aea8-9efe6c758fab.png) [[3]](https:\/\/www.researchgate.net\/figure\/Formulae-for-support-confidence-and-lift-for-the-association-rule-X-Y_fig1_337999958)","a470507e":"As we can see, we have **'nan' column**, so we should drop it, because these are just 'not a number' values, which were only empty cells in the original dataset.","a37bd6ac":"After counting all values through all columns, we can build a **frequency plot**.","23bafde6":"And then we can check the results:","cf32281d":"# 3. Visualize data\nHere I decided to count all unique values through all columns and build some visualitions. \nE.g. if we have 5 'almonds' in first column, 3 'almonds' in second column etc, so, will have 8 'almonds' in total.","08a29aaa":"# 1. Import Libraries\nFor market basket analysis I'm going to use [mlxtend](http:\/\/rasbt.github.io\/mlxtend\/). For other purposes (reading data, working with data, visualizing data) I'll use all well-known libraries like numpy, pandas etc.","8a3dd14b":"And now we can convert our dataset to **transaction view**.","6530d576":"So, now we are going to use **apriori rule** to find some dependencies. [Here](http:\/\/rasbt.github.io\/mlxtend\/api_modules\/mlxtend.frequent_patterns\/apriori\/) you can read more about it.","ff9651c5":"So, here we can see all rules, that have minimun support 0.01. \nIf you need **rules with certain length**, we can filter the results:","99ac3a1c":"So, in the end we can see all rules, which have certain length and which have certain minimum support. "}}