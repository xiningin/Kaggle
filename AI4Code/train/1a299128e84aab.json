{"cell_type":{"61dbc3fa":"code","9701e2ae":"code","100db9b7":"code","35843db4":"code","203513c1":"code","7d52fd13":"code","c16ef279":"code","0a663024":"code","142c2d5b":"code","1f97ed00":"code","588443d2":"code","567e6a16":"markdown","88c0b49d":"markdown","824def07":"markdown","58310ad4":"markdown","a13710fe":"markdown","40431406":"markdown","644ea852":"markdown"},"source":{"61dbc3fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9701e2ae":"!pip install pydataset","100db9b7":"import seaborn as sns\n#importing some predefined dataset in python. \nfrom pydataset import data\ndata()\n\n##or we can also use sns predefined datasets as well. For example:\n\ndf = sns.load_dataset('flights')\ndf.tail()","35843db4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme()\n\n# Load the example flights dataset and convert to long-form\nflights_long = sns.load_dataset(\"flights\")\n#Pivot is used to reshape the dataframe\nflights = flights_long.pivot(\"year\", \"month\", \"passengers\")\n\n# Draw a heatmap with the numeric values in each cell\nf, ax = plt.subplots(figsize=(15, 10))\nsns.heatmap(flights, annot=True, fmt=\"d\", linewidths=.5, ax=ax)\n","203513c1":"f, ax = plt.subplots(figsize=(10, 10))\n\n# Load the example planets dataset\niris= sns.load_dataset(\"iris\")\n\n# Plot the orbital period with horizontal boxes\nsns.boxplot(x=\"sepal_length\", y=\"species\", data=iris, whis=[0, 100], width=.6, palette=\"vlag\")\n\n# Add in points to show each observation\nsns.stripplot(x=\"sepal_length\", y=\"species\", data=iris,size=4, color=\".3\", linewidth=0)\n\n# Tweak the visual presentation\nax.xaxis.grid(True)\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)","7d52fd13":"f,ax= plt.subplots(figsize=(10,10))\n\n# Load the example planets dataset\nplanets= sns.load_dataset(\"planets\")\ny=planets['method']\nx=planets['distance']\n\nsns.barplot(x=x, y=y, ax=ax, saturation=0.75)","c16ef279":"import seaborn as sns\n\ndf = sns.load_dataset(\"iris\")\nsns.pairplot(df, hue=\"species\")","0a663024":"f,ax= plt.subplots(figsize=(7,7))\n\niris= sns.load_dataset(\"iris\")\n\nsns.lineplot(x=iris['sepal_width'], y=iris['sepal_length'],\n             hue=iris['species'], style=iris['species'],\n             data=iris)","142c2d5b":"data=sns.get_dataset_names()\nprint(data)","1f97ed00":"f,ax= plt.subplots(figsize=(7,7))\npenguins= sns.load_dataset(\"penguins\")\nax = sns.violinplot(x=penguins[\"island\"], y=penguins[\"flipper_length_mm\"], data=penguins, xlabel='island')","588443d2":"f,ax= plt.subplots(figsize=(7,7))\npenguins= sns.load_dataset(\"flights\")\nprint(penguins.columns)\nprint(penguins.tail())\nax = sns.lineplot(x=penguins['year'],penguins['depth']  ,data=penguins)","567e6a16":"### Pairplot\nSome seaborn functions combine multiple kinds of plots to quickly give informative summaries of a dataset. One, jointplot(), focuses on a single relationship. It plots the joint distribution between two variables along with each variable\u2019s marginal distribution. The other, pairplot(), takes a broader view: it shows joint and marginal distributions for all pairwise relationships and for each variable, respectively.","88c0b49d":"### Violin Plot\nA violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.\n\nThis can be an effective and attractive way to show multiple distributions of data at once, but keep in mind that the estimation procedure is influenced by the sample size, and violins for relatively small samples might look misleadingly smooth","824def07":"### Lineplot\nOften, we are interested in the average value of one variable as a function of other variables. Many seaborn functions will automatically perform the statistical estimation that is necessary to answer these questions. This method could be also used to calculate the time series.\nWhen statistical values are estimated, seaborn will use bootstrapping to compute confidence intervals and draw error bars representing the uncertainty of the estimate.","58310ad4":"### Barplot can be used to represent a single variable against a categorical feature and could be used to represent the frequency or any other numerical attribute.\n\nBarplot shows point estimates and confidence intervals as rectangular bars. A bar plot represents an estimate of central tendency for a numeric variable with the height of each rectangle and provides some indication of the uncertainty around that estimate using error bars.\n","a13710fe":"### Seaborn for Data visualization and representation\nSeaborn is a library for making statistical graphics in Python. It builds on top of matplotlib and integrates closely with pandas data structures.\n\nSeaborn helps you explore and understand your data. Its plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots. Its dataset-oriented, declarative API lets you focus on what the different elements of your plots mean, rather than on the details of how to draw them.\n \nreference: https:\/\/seaborn.pydata.org\/introduction.html\n           https:\/\/www.geeksforgeeks.org\/","40431406":"### Boxplot can be used to represent the mean,quatile ranges, outliers,etc. and Strip plot could be used to represent indiviual values of the dataset.\n\nThe seaborn boxplot is a very basic plot Boxplots are used to visualize distributions. Thats very useful when you want to compare data between two groups. Sometimes a boxplot is named a box-and-whisker plot. Any box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution.\n\nIt is a good complement to a boxplot or violinplot in cases where all observations are shown along with some representation of the underlying distribution. It is used to draw a scatter plot based on the category. Parameters: x, y, hue: Inputs for plotting long-form data.","644ea852":"### HeatMap is used to represent relation between two or more columns and can be used to find correlation, etc.\n\nBy definition, Heat Maps are graphical representations of data that utilize color-coded systems. The primary purpose of Heat Maps is to better visualize the volume of locations\/events within a dataset and assist in directing viewers towards areas on data visualizations that matter most. But they're much more than that."}}