{"cell_type":{"45b2f6ae":"code","f3b4c8d0":"code","014eaa3a":"code","6aa3b7c1":"code","7c2de343":"code","93e05795":"code","57977881":"code","fb8f1c01":"code","922f4a38":"code","82f7ed76":"code","6b83c97a":"code","f82841f3":"code","1cb1d023":"code","bbf01eb0":"code","eccd6779":"code","7c100cae":"code","cbfcd1c8":"code","7d5d7f70":"code","5b6a2314":"code","877fcdc3":"code","153d6fb9":"code","67b7e754":"code","5b67a4f4":"code","6643c92c":"code","15b505b0":"code","d2f93845":"code","ad04a84d":"code","79ca9000":"code","57ee25e9":"code","400f4a9a":"code","2783d973":"code","a559489e":"code","f809212d":"code","c720abf6":"markdown","69e1ba9f":"markdown","0f82e6ff":"markdown","b328980a":"markdown","a98ff1ab":"markdown","cf2311c6":"markdown","df57cb26":"markdown","52defd1d":"markdown","0e307fa9":"markdown","f0d0570a":"markdown","3c3ce3a9":"markdown","2e5e5f8a":"markdown","d3640d58":"markdown","f91413cf":"markdown","099370c7":"markdown"},"source":{"45b2f6ae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nimport os\n\nimport matplotlib.pyplot as plt\n","f3b4c8d0":"print(os.listdir(\"..\/input\/Kannada-MNIST\/\"))","014eaa3a":"df_train = pd.read_csv(\"..\/input\/Kannada-MNIST\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/Kannada-MNIST\/test.csv\")","6aa3b7c1":"print(df_train.shape)\nprint(df_test.shape)","7c2de343":"df_train.head()","93e05795":"df_test.head()","57977881":"X = df_train.iloc[:,1:]\ny = df_train.iloc[:,0]\nX_test_actual = df_test.iloc[:,1:]","fb8f1c01":"data = np.matrix(X) # Convert the dataframe to matrix for visualization","922f4a38":"print(X)# 1-D matrix","82f7ed76":"print(data) # 2-D matrix","6b83c97a":"img = data[0].reshape(28,28)\nplt.imshow(img, cmap=\"gray\")","f82841f3":"img = data[24].reshape(28,28)\nplt.imshow(img, cmap=\"gray\")","1cb1d023":"img = data[49].reshape(28,28)\nplt.imshow(img, cmap=\"gray\")","bbf01eb0":"print(df_train.iloc[[0,24,49],0])","eccd6779":"#X_train.head()\n#_train\n#X_test\n#len(X_train)","7c100cae":"X = X.to_numpy().reshape(len(X), 28, 28,1).astype('float32')\nX_test_actual = X_test_actual.to_numpy().reshape(len(X_test_actual), 28, 28, 1).astype('float32')","cbfcd1c8":"X = X\/255\nX_test_actual = X_test_actual\/255","7d5d7f70":"n_classes=10\ny = to_categorical(y, n_classes)","5b6a2314":"X_train, X_test, y_train,  y_test = train_test_split(X, y, test_size=0.3, random_state=42)","877fcdc3":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)))\n\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(n_classes, activation='softmax'))","153d6fb9":"model.summary()","67b7e754":"model.compile(loss='categorical_crossentropy',\n             optimizer='nadam',\n             metrics=['accuracy'])","5b67a4f4":"len(X_test)","6643c92c":"history = model.fit(X_train, \n                    y_train, \n                    batch_size=128, \n                    epochs=100,\n                    verbose=1,\n                    validation_data=(X_test, y_test)\n                   )","15b505b0":"import matplotlib.pyplot as plt\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(loss) + 1)\n\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","d2f93845":"plt.clf()                                              \n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.show()","ad04a84d":"predictions = model.predict(X_test_actual)","79ca9000":"submission_df = df_test.iloc[:,0]","57ee25e9":"submission_df.head()","400f4a9a":"data_submission = pd.read_csv(\"..\/input\/Kannada-MNIST\/sample_submission.csv\")","2783d973":"y_pre=model.predict(X_test_actual)     ##making prediction\ny_pre=np.argmax(y_pre,axis=1) ##changing the prediction intro labels","a559489e":"data_submission['label']=y_pre\ndata_submission.to_csv('submission.csv',index=False)","f809212d":"data_submission.head()","c720abf6":"NOTE: From the above, it can be concluded that the images shows earlier from the pixels of 1st, 25th, and 50th rows are 0, 4, and 9 respectively. ","69e1ba9f":"Let us see the kannada words stored in the following rows out of 60000:\n* 1st row kannada digit\n* 25th row Kannada digit\n* 50th row kannada digit","0f82e6ff":"# Convolutional MNIST classification","b328980a":"Following line of code check all the files available in \"..\/input\/Kannada-MNIST\/\". i.e.\nWe have following files:\n* train.csv (comprises of 60,000 hand-written digits)\n* test.csv (comprises of 10,000 hand-written digits), and \n* sample_submission.csv ( a submission format comprising of dummy list of ids and labels. We need to replace, the entries with our predictions after designing and training our MNIST-CNN model.)\n","a98ff1ab":"Let us store the pixels columns in variable \"X\" . and store the label in variable \"y\". Additionally, let us store the test pixels in \"X_test_actual\"; this we will use it to predict. ","cf2311c6":"* **Given, no literal awareness about kannada digits; it is not possible to recognize the digits 1st, 25th, and 50th represents.** However, we do have the lables from the dataframe df_train. Let us print the 1st, 25th, and 50th row labels showing the actual numeric digits these image represent:\n","df57cb26":"We have use numpy.reshape() function to reshape the 784 1-D array to 2-D matrix.","52defd1d":"## Architecture of neural netrowk ","0e307fa9":"Here, checking first 5 rows of train and test dataset. Train dataset has the _label_ in the 1st column which we will use as target label while training. ","f0d0570a":"Let us check size of train and test data. Train and test data have 785 columns with 60K and 5K entires.","3c3ce3a9":"## Sample digits\nWe saw both train and test data has 784 pixels. Each row entry here, represents a digit. i.e. A single digit has 28 x 28 pixel distributed in 2D plane. However, for analysis purpose the pixels were flattened into 1D array i.e. 28 x 28 = 784 pixels ( columns). \n\nLet us visualize some of the hand-written digitized pixels. \n\n","2e5e5f8a":"If you are starting with Deeplearning, solving MNIST classification problem is the \"Hello World\" to deep-learning! This is an attempt to put in practice follwoing neural networks using MNIST dataset:\n* Convolution neural networks (CNN)\n* VGG-16\n* AlexNet\n\nFirst, let us implement CNN on MNIST classification problem,\n\n","d3640d58":"### Required libraries\nHere, _numpy_ and _pandas_ will help us handle simple mathematical operations and dataframe manipulations. \nIn addition, we will use _tensofrlow.keras_ to define, train, evaluate, and moinotor CNN model. In addition, we will also use it for making predicitons for submission to the KAGGLE'S board.  ","f91413cf":"## Data prepration","099370c7":"Below line of code reads the _train.csv_ and _test.csv_ data files and stores them in dataframes i.e. _df_train_ and _df_test_. "}}