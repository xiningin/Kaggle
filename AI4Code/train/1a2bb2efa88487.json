{"cell_type":{"f2e64803":"code","e9ae3c8e":"code","e624b592":"code","3554cb62":"code","4a8e533e":"code","95a55615":"code","bdfa3350":"code","474443b7":"code","f9e55056":"code","58d3c751":"code","a12915e4":"code","30c086d5":"code","ffd4b5ae":"code","04991734":"code","6af84272":"code","5095fa50":"code","2f080a5e":"code","f9877f10":"code","3f2c1977":"code","db778192":"code","b8db8db6":"code","50743a2a":"code","e1698533":"code","c1bdeed0":"code","cd32c5b8":"code","134b2879":"code","03dce631":"code","0303c269":"code","8b74bac5":"code","bf618b35":"code","29c51e08":"markdown","1ec4191b":"markdown","c8f70dcb":"markdown","b3ef70ad":"markdown","e51ecdac":"markdown","76bef584":"markdown","6c03f7b4":"markdown","d0600232":"markdown","cc2b320d":"markdown"},"source":{"f2e64803":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e9ae3c8e":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics.cluster import contingency_matrix\nimport warnings\nwarnings.filterwarnings('ignore')","e624b592":"TRAIN_DATASET_PATH = '..\/input\/gb-tutors-expected-math-exam-results\/train.csv'\nTEST_DATASET_PATH = '..\/input\/gb-tutors-expected-math-exam-results\/test.csv'","3554cb62":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.head()","4a8e533e":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df","95a55615":"plt.figure(figsize = (16, 8))\n\ntrain_df['mean_exam_points'].hist(bins=10)\nplt.ylabel('Count')\nplt.xlabel('mean_exam_points')\n\nplt.title('Target distribution')\nplt.show()","bdfa3350":"plt.figure(figsize = (16, 8))\n\ntrain_df['qualification'].hist(bins=3)\nplt.ylabel('Count')\nplt.xlabel('qualification')\n\nplt.title('Target distribution')\nplt.show()","474443b7":"plt.figure(figsize = (16, 8))\n\ntrain_df['years_of_experience'].hist(bins=10)\nplt.ylabel('Count')\nplt.xlabel('years_of_experience')\n\nplt.title('Target distribution')\nplt.show()","f9e55056":"plt.figure(figsize = (16, 8))\n\ntrain_df['lesson_price'].hist(bins=10)\nplt.ylabel('Count')\nplt.xlabel('lesson_price')\n\nplt.title('Target distribution')\nplt.show()","58d3c751":"df_num_features = train_df.select_dtypes(include=['float64', 'int64'])\ndf_num_features.drop('mean_exam_points', axis=1, inplace=True)\ndf_num_features.hist(figsize=(16,16), bins=20, grid=False);","a12915e4":"X_cls = train_df[['physics', 'chemistry', 'biology', 'english', 'geography', 'history']].to_numpy()\nX_cls\n\n","30c086d5":"y_cls = train_df[['mean_exam_points']].to_numpy()\n#y_cls[:, 0] = pd.cut(y_cls[:, 0], 5, labels=False)\ny_cls","ffd4b5ae":"def get_mi(x, y):\n    mi = 0\n    cm = contingency_matrix(y, x)\n    \n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            size = np.sum(cm)\n            p_x_y = cm[i][j] \/ size\n            p_x = np.sum(cm[:, j]) \/ size\n            p_y = np.sum(cm[i]) \/ size\n\n            if p_x_y == 0:\n                continue\n            mi += p_x_y * np.log(p_x_y \/ (p_x * p_y))\n    return mi","04991734":"print(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 0 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0444\u0438\u0437\u0438\u043a\u0430) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 0], y_cls)}')\nprint(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 1 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0445\u0438\u043c\u0438\u044f) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 1], y_cls)}')\nprint(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 2 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0431\u0438\u043e\u043b\u043e\u0433\u0438\u044f) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 2], y_cls)}')\nprint(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 3 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 3], y_cls)}')\nprint(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 4 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 4], y_cls)}')\nprint(f'\u0412\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f 5 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0438\u0441\u0442\u043e\u0440\u0438\u044f) \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 {get_mi(X_cls[:, 5], y_cls)}')\n","6af84272":"X_df = train_df\nX_df = X_df[-X_df.history.isin([1])] #\u0418\u0441\u0442\u043e\u0440\u0438\u044f\nX_df = X_df[-X_df.geography.isin([1])] #\u0413\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u044f\nX_df = X_df[-X_df.english.isin([1])] #\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439\nX_df = X_df[-X_df.biology.isin([1])] #\u0411\u0438\u043e\u043b\u043e\u0433\u0438\u044f\nX_df = X_df[-X_df.chemistry.isin([1])] #\u0425\u0438\u043c\u0438\u044f\n#X_df = X_df[-X_df.physics.isin([1])] #\u0424\u0438\u0437\u0438\u043a\u0430\nX_df","5095fa50":"X = X_df[[ 'years_of_experience']].to_numpy()\nX","2f080a5e":"# \u041f\u043e\u043b\u0443\u0447\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\n\nmeans = np.mean(X, axis=0)\nstds = np.std(X, axis=0)\n# \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 axis \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c, \u0430 \u043d\u0435 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u043c\u0430\u0441\u0441\u0438\u0432\u0443\ndisplay(means, stds)","f9877f10":"# \u0432\u044b\u0447\u0442\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438\u0437 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0438 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435\nfor i in range(X.shape[0]):\n    for j in range(X.shape[1]):\n        X[i][j] = (X[i][j] - means[j]) \/ stds[j]","3f2c1977":"A = np.ones((len(X), 1))\nX= np.column_stack((A, X))\nX","db778192":"y = X_df['mean_exam_points'].to_numpy()\n#y = y.transpose()\n\ny","b8db8db6":"def calc_mse(y, y_pred):\n    err = np.mean((y - y_pred)**2)\n    return err","50743a2a":"n = X.shape[0]\n\neta = 1e-3\nn_iter = 100000 # !\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u043b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043e 10000 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 1100 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0448\u0438\u0431\u043a\u0430 \u043d\u0435 \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f\n\nW = np.array([1, 0.5])\nprint(f'Number of objects = {n} \\\n       \\nLearning rate = {eta} \\\n       \\nInitial weights = {W} \\n')\n\nfor i in range(n_iter):\n    y_pred = np.dot(X, W)\n    err = calc_mse(y, y_pred)\n    for k in range(W.shape[0]):\n        W[k] -= eta * (1\/n * 2 * X[:, k] @ (y_pred - y))\n    if i % 10000 == 0:\n        eta \/= 1.1\n        print(f'Iteration #{i}: W_new = {W}, MSE = {round(err, 2)}')","e1698533":"Z = test_df[[ 'years_of_experience']].to_numpy()\nZ, Z.shape","c1bdeed0":"b = np.array(Z * 2.88161902 + 63.48674734)\n#b = b.transpose()\nb, b.shape","cd32c5b8":"SUBMISS = '..\/input\/gb-tutors-expected-math-exam-results\/sample_submission.csv'\nsubmiss_df = pd.read_csv(SUBMISS)\nsubmiss_df","134b2879":"S = submiss_df[[ 'Id']].to_numpy()\n#S = S.transpose()\nS, S.shape","03dce631":"S_df = pd.DataFrame(S, columns= ['Id'])\nS_df","0303c269":"b_df = pd.DataFrame(b, columns= ['mean_exam_points'])\nb_df","8b74bac5":"my_submiss_df = pd.concat([S_df, b_df], sort=False, axis=1)\nmy_submiss_df","bf618b35":"my_submiss_df.to_csv('.\/submission.csv', encoding='utf-8', index=False)\n                     \n","29c51e08":"## \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0443\u0440\u043e\u043a\u0430","1ec4191b":"## \u0421\u0442\u0430\u0436 \u043f\u0440\u0435\u043f\u043e\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044f","c8f70dcb":"# \u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439\n","b3ef70ad":"## \u041a\u0432\u0430\u043b\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","e51ecdac":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0434\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043d\u0435 \u043d\u0443\u0436\u043d\u044b, \u043d\u0430\u043c \u0432\u0435\u0434\u044c \u043d\u0443\u0436\u0435\u043d \u0440\u0435\u043f\u0435\u0442\u0438\u0442\u043e \u043a \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0443 \u043f\u043e \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0435.","76bef584":"## \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0431\u0430\u043b\u043b \u043d\u0430 \u044d\u043a\u0437\u0430\u043c\u0435\u043d\u0435","6c03f7b4":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","d0600232":"\u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0442\u0440\u0435\u0445\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u0448\u043a\u0430\u043b\u0435.","cc2b320d":"\u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0440\u0435\u043f\u0435\u0442\u0438\u0442\u043e\u0440\u044b \u043f\u043e \u0438\u0441\u0442\u043e\u0440\u0438\u0438 \u0438 \u0430\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c\u0443 \u044f\u0437\u044b\u043a\u0443, \u043d\u0430 \"\u0432\u0442\u043e\u0440\u043e\u043c\" \u043c\u0435\u0441\u0442\u0435 \u0440\u0435\u043f\u0435\u0442\u0438\u0442\u043e\u0440\u044b \u043f\u043e \u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u0438 \u0445\u0438\u043c\u0438\u0438, \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u043e\u0442\u043d\u043e\u0441\u044f\u0442\u0441\u044f \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0438 \u043f\u043e \u0444\u0438\u0437\u0438\u043a\u0435, \u0445\u043e\u0442\u044f \u0442\u043e\u0436\u0435 \u043d\u0435 \u0432\u044b\u0441\u043e\u043a\u0430\u044f \"\u0432\u0437\u0430\u0438\u043c\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\". \u0418 \u0442\u0443\u0442 \u0434\u0432\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u043b\u0438\u0431\u043e \u043d\u0435 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e \u043a\u0430\u043a\u0438\u043c \u043f\u0440\u043e\u0435\u0434\u043c\u0435\u0442\u0430 \u0440\u0435\u043f\u0435\u0442\u0438\u0442\u043e\u0440\u044b, \u043b\u0438\u0431\u043e \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435\u043c \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u044d\u0442\u0438\u043c\u0438 \u0440\u0435\u043f\u0435\u0442\u0438\u0442\u043e\u0440\u0430\u043c\u0438 \u0432\u0435\u0434\u044c \u0435\u0441\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. "}}