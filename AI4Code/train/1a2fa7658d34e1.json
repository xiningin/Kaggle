{"cell_type":{"f01663f3":"code","659603b2":"code","46d016da":"code","77daee93":"code","aac17c7c":"code","2f102c2a":"code","3fe96b85":"code","0f65af0e":"code","4919da1d":"code","faa4b0b6":"code","c38215a5":"code","0acc1bb3":"code","2c8d2d18":"code","751ce117":"code","a4ffe4d5":"code","623b4966":"code","a69bd78a":"code","4aab2c6a":"code","60cf5237":"code","eff18798":"code","de6d024d":"code","68508b6e":"code","96330cf8":"code","1f0b8782":"code","d0ff7d0e":"code","6de5c4c7":"code","f824a3ef":"code","96c20ecd":"code","9a03c38c":"code","0f5d272f":"code","66635db7":"code","03e64fa3":"code","bb7f9515":"markdown","7556ed75":"markdown","beedba46":"markdown","c785b8f8":"markdown","136adc55":"markdown","9bbc95e7":"markdown","b3ba9894":"markdown","b719744b":"markdown","d739c80c":"markdown","707781c6":"markdown","dedd8b28":"markdown","aef4120d":"markdown","effd74cd":"markdown","abf7cbeb":"markdown","8e20be34":"markdown","95ccf437":"markdown","d0cf8011":"markdown"},"source":{"f01663f3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","659603b2":"train = pd.read_csv('..\/input\/train.csv')","46d016da":"train.head()","77daee93":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","aac17c7c":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',data=train,palette='RdBu_r')","2f102c2a":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r')","3fe96b85":"sns.set_style('whitegrid')\nsns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')","0f65af0e":"sns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30)","4919da1d":"train['Age'].hist(bins=30,color='darkred',alpha=0.7)","faa4b0b6":"sns.countplot(x='SibSp',data=train)","c38215a5":"train['Fare'].hist(color='green',bins=40,figsize=(8,4))","0acc1bb3":"import cufflinks as cf\ncf.go_offline()","2c8d2d18":"train['Fare'].iplot(kind='hist',bins=30,color='green')","751ce117":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","a4ffe4d5":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age","623b4966":"train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)","a69bd78a":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","4aab2c6a":"train.drop('Cabin',axis=1,inplace=True)","60cf5237":"train.head()","eff18798":"train.dropna(inplace=True)","de6d024d":"train.info()","68508b6e":"sex = pd.get_dummies(train['Sex'],drop_first=True)\nembark = pd.get_dummies(train['Embarked'],drop_first=True)","96330cf8":"train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)","1f0b8782":"train = pd.concat([train,sex,embark],axis=1)","d0ff7d0e":"train.head()","6de5c4c7":"from sklearn.model_selection import train_test_split","f824a3ef":"X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), \n                                                    train['Survived'], test_size=0.30, \n                                                    random_state=101)","96c20ecd":"from sklearn.linear_model import LogisticRegression","9a03c38c":"logmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","0f5d272f":"predictions = logmodel.predict(X_test)","66635db7":"from sklearn.metrics import classification_report","03e64fa3":"print(classification_report(y_test,predictions))","bb7f9515":"____\n### Cufflinks for plots\n___\n Let's take a quick moment to show an example of cufflinks!","7556ed75":"Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We'll probably drop this later, or change it to another feature like \"Cabin Known: 1 or 0\"\n\nLet's continue on by visualizing some more of the data! Check out the video for full explanations over these plots, this code is just to serve as reference.","beedba46":"# Exploratory Data Analysis\n\nLet's begin some exploratory data analysis! We'll start by checking out missing data!\n\n## Missing Data\n\nWe can use seaborn to create a simple heatmap to see where we are missing data!","c785b8f8":"Great! Our data is ready for our model!\n\n# Building a Logistic Regression model\n\nLet's start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).\n\n## Train Test Split","136adc55":"## The Data\n\nLet's start by reading in the titanic_train.csv file into a pandas dataframe.","9bbc95e7":"Now let's check that heat map again!","b3ba9894":"## Converting Categorical Features \n\nWe'll need to convert categorical features to dummy variables using pandas! Otherwise our machine learning algorithm won't be able to directly take in those features as inputs.","b719744b":"## Evaluation","d739c80c":"We can check precision,recall,f1-score using classification report!","707781c6":"Great! Let's go ahead and drop the Cabin column and the row in Embarked that is NaN.","dedd8b28":"Let's move on to evaluate our model!","aef4120d":"Now apply that function!","effd74cd":"We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We'll use these average age values to impute based on Pclass for Age.","abf7cbeb":"## Training and Predicting","8e20be34":"Not so bad! You might want to explore other feature engineering and the other titanic_text.csv file, some suggestions for feature engineering:\n\n* Try grabbing the Title (Dr.,Mr.,Mrs,etc..) from the name as a feature\n* Maybe the Cabin letter could be a feature\n* Is there any info you can get from the ticket?\n\n## Great Job!","95ccf437":"This is a very famous data set and very often is a student's first step in machine learning! \n\nWe'll be trying to predict a classification- survival or deceased.\nLet's begin our understanding of implementing Logistic Regression in Python for classification.\n\n## Import Libraries\nLet's import some libraries to get started!","d0cf8011":"___\n## Data Cleaning\nWe want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation).\nHowever we can be smarter about this and check the average age by passenger class. For example:\n"}}