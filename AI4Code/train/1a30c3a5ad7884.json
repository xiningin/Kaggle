{"cell_type":{"aa1bd3d9":"code","1b006c5d":"code","a1675390":"code","295d01ae":"code","03db6990":"code","f50c1bf8":"code","e6f6a16b":"code","a75169a5":"code","52afc76f":"code","33b2750d":"code","475744ee":"code","ed9d468f":"code","3499cc6e":"code","b9517973":"code","1bc77157":"code","39c95787":"code","6ae328f9":"code","8d8a798e":"markdown","0b0a3d3d":"markdown","68964f3d":"markdown","8cffe2cb":"markdown","b0edff8e":"markdown","76eb1602":"markdown","c5256ce0":"markdown","6f14620e":"markdown","31c7d652":"markdown","5ef1952e":"markdown","aff53178":"markdown","60cd31ff":"markdown","f6c573c5":"markdown","59f3ee47":"markdown","61999621":"markdown","2837e38f":"markdown","de731f7a":"markdown","07c5b0de":"markdown","254e6cb2":"markdown","f6b111cc":"markdown","f80e64ef":"markdown"},"source":{"aa1bd3d9":"!pip install pycaret","1b006c5d":"\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pycaret.regression import *\nimport numpy as np \nimport pandas as pd \nfrom pandas_profiling import ProfileReport \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1675390":"df = pd.read_csv('..\/input\/payner\/payner.csv', encoding='ISO-8859-2')\ndf.head()","295d01ae":"report_df = ProfileReport(df)\nreport_df","03db6990":"index_int_float = ['popularity', 'danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration', 'time_signature']      \n\nplt.figure(figsize=[20,12])\ni = 1\nfor col in index_int_float :\n    plt.subplot(4,10,i)\n    sns.violinplot(x=col, data= df, orient='v')\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","f50c1bf8":"index_str = ['track_id','track_name', 'artist_1', 'artist_2', 'artist_3', 'datetime', 'time_signature']\n\nplt.figure(figsize=[30,10])\ni = 1\nfor col in index_str :\n    plt.subplot(4,10,i)\n    sns.scatterplot(x=col, y = 'popularity' ,data= df)\n    sns.despine()\n    i = i+1\nplt.tight_layout()\nplt.show()","e6f6a16b":"\nint_features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration', 'time_signature', 'mode']\n        \n\nfloat_features = [ ]\n\nobj_features = ['track_name', 'track_id', 'artist_1', 'artist_2', 'artist_3', 'datetime', 'time_signature']\n\nexp_reg = setup(df, #Train Data\n                target = 'popularity',  #Target\n                categorical_features = obj_features, # Categorical Features\n                numeric_features = int_features + float_features, # Numeric Features\n                normalize = True, # Normalize Dataset\n                remove_outliers = True, # Remove 5% Outliers\n                remove_multicollinearity = True, # Remove Multicollinearity\n                silent = True # Process Automation\n               )","a75169a5":"compare_models(blacklist = ['tr', 'catboost'], sort = 'RMSLE')","52afc76f":"model_br = create_model('br')\nmodel_lightgbm = create_model('lightgbm')\nmodel_xgboost = create_model('xgboost')\nmodel_ridge = create_model('ridge')","33b2750d":"tuned_br = tune_model('br')\ntuned_lightgbm = tune_model('lightgbm')\ntuned_xgboost = tune_model('xgboost')\ntuned_ridge = tune_model('ridge')","475744ee":"plot_model(tuned_br, plot = 'learning')","ed9d468f":"plot_model(tuned_lightgbm, plot = 'learning')","3499cc6e":"plot_model(tuned_xgboost, plot = 'learning')","b9517973":"plot_model(tuned_ridge, plot = 'learning')","1bc77157":"blender = blend_models(estimator_list = [tuned_br, tuned_lightgbm, tuned_xgboost, tuned_ridge])","39c95787":"display(plot_model(blender, plot = 'learning'))","6ae328f9":"predictions = predict_model(blender, data = df)\ndf['popularity'] = np.expm1(predictions['Label'])\ndf.to_csv('submission.csv',index=False)","8d8a798e":"#Numerical Features","0b0a3d3d":"Predict and Submit","68964f3d":"#Extreme Gradient Boosting","8cffe2cb":"#Display Learning Curve for Blending","b0edff8e":"#Ridge Regression","76eb1602":"#Codes from Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret","c5256ce0":"#M\u00e2ri Mariiko - \u041c\u0430\u0440\u0438 \u041c\u0430\u0440\u0438\u0439\u043a\u043e (Bulgaria) Music by Nade\u017eda Hvojneva","6f14620e":"#Models Tuning ","31c7d652":"#Display Learning Curve ","5ef1952e":"#Categorical Features","aff53178":"Pip must be the 1st cell to run otherwise you'll get errors. ","60cd31ff":"#Blend Models","f6c573c5":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke ","59f3ee47":"#The target column shouln't be in the list, only in TARGET.  ","61999621":"#Codes from Mehdi G https:\/\/www.kaggle.com\/servietsky\/eazy-way-house-price-pycaret","2837e38f":"#Bayesian Ridge ","de731f7a":"#That's my 1st Pandas Profiling. I can compare it with cars with automatic transmission. However, I prefer a stick shift car. Where we can detect the subtle nuances of each detail from the data. ","07c5b0de":"#Create and Train Models","254e6cb2":"#Gradient Boosting Regressor? Why is written lightgbm?:)","f6b111cc":"#Compare Models","f80e64ef":"<iframe width=\"956\" height=\"538\" src=\"https:\/\/www.youtube.com\/embed\/zARThQeFYuM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>"}}