{"cell_type":{"b053ccdb":"code","f77bb469":"code","c7ae3827":"code","44b18573":"code","27e5bcaf":"code","fe165563":"code","5c47f534":"code","edc60079":"code","e088e7bf":"code","1bb151db":"code","d6b71f47":"code","e7798bc2":"code","fe735c6a":"code","61d972e8":"code","593f8793":"code","3fc55efa":"code","f3a8d1d3":"code","b03c0acf":"code","009446c3":"markdown","612df31e":"markdown","ab7d9cd2":"markdown","0e8a6390":"markdown","8487df85":"markdown","9207bbf3":"markdown","26e47187":"markdown","38de3be2":"markdown","c21cc3ee":"markdown","603161c1":"markdown","53148f1e":"markdown","f2ff6f4f":"markdown","f486bd42":"markdown","1456df75":"markdown","b6744bcb":"markdown","8db49cdf":"markdown","cabd8662":"markdown","d30ca6be":"markdown","a81afb96":"markdown","c4315793":"markdown","9e28f887":"markdown","a264e84f":"markdown","52502f87":"markdown","6f9d98de":"markdown","16f93d97":"markdown"},"source":{"b053ccdb":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization, ZeroPadding2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau, LearningRateScheduler\n\n\nsns.set(style='white', context='notebook', palette='deep')","f77bb469":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","c7ae3827":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) \n\n# free some space\ndel train \n\ng = sns.countplot(Y_train)\n\nY_train.value_counts()","44b18573":"# Check the data\nX_train.isnull().any().describe()","27e5bcaf":"test.isnull().any().describe()","fe165563":"# Normalize the data\nX_train = X_train \/ 255.0\ntest = test \/ 255.0","5c47f534":"# Reshape image in 3 dimensions (height = 28px, width = 28px , channel = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","edc60079":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nY_train = to_categorical(Y_train, num_classes = 10)","e088e7bf":"# Set the random seed\nrandom_seed = 2","1bb151db":"# Split the train and the validation set for the fitting\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=random_seed)","d6b71f47":"# Some examples\ng = plt.imshow(X_train[0][:,:,0])","e7798bc2":"# BUILD CONVOLUTIONAL NEURAL NETWORKS\nnets = 5\nmodel = [0] *nets\nfor j in range(nets):\n    model[j] = Sequential()\n\n    model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu', input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    #model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    #model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu'))\n   # model[j].add(BatchNormalization())\n    #model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Conv2D(32, kernel_size = 3, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(64, kernel_size = 3, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n   # model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    #model[j].add(Conv2D(64, kernel_size = 3, padding='same', activation='relu'))\n    #model[j].add(BatchNormalization())\n   # model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Conv2D(64, kernel_size = 5, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    model[j].add(Dropout(0.25))\n\n    model[j].add(Conv2D(128, kernel_size = 4, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model[j].add(Flatten())\n    model[j].add(Dense(128, activation='relu'))\n    model[j].add(Dropout(0.7))\n    model[j].add(Dense(10, activation='softmax'))\n\n    # COMPILE WITH ADAM OPTIMIZER AND CROSS ENTROPY COST\n    model[j].compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","fe735c6a":"# Without data augmentation i obtained an accuracy of 0.98114\n#history = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs, \n#          validation_data = (X_val, Y_val), verbose = 2)","61d972e8":"# With data augmentation to prevent overfitting (accuracy 0.99286)\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.3, # Randomly zoom image \n        shear_range = 0.2, #Randomly shears images\n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","593f8793":"# DECREASE LEARNING RATE EACH EPOCH\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n# TRAIN NETWORKS\nhistory = [0] * nets\nepochs = 25\nfor j in range(nets):\n    X_train2, X_val2, Y_train2, Y_val2 = train_test_split(X_train, Y_train, test_size = 0.1)\n    history[j] = model[j].fit_generator(datagen.flow(X_train2,Y_train2, batch_size=32),\n        epochs = epochs, steps_per_epoch = X_train2.shape[0]\/\/32, verbose = 2,  \n        validation_data = (X_val2,Y_val2), callbacks=[annealer])\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['accuracy']),max(history[j].history['val_accuracy']) ))","3fc55efa":"# ENSEMBLE PREDICTIONS AND SUBMIT\nresults = np.zeros( (test.shape[0],10) ) \nfor j in range(nets):\n    results = results + model[j].predict(test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"MNIST-CNN-ENSEMBLE.csv\",index=False)","f3a8d1d3":"for j in range(nets):\n    accs = history[j].history['accuracy']\n    val_accs = history[j].history['val_accuracy']\n\n    plt.title(\"For CNN: \"+ str(j+1))\n    plt.plot(range(len(accs)),accs, label = 'Training_accuracy')\n    plt.plot(range(len(accs)),val_accs, label = 'Validation_accuracy')\n    plt.ylabel('accuracy')\n    plt.xlabel('epochs')\n    plt.legend()\n    plt.show()","b03c0acf":"for j in range(nets):\n    loss = history[j].history['loss']\n    val_loss = history[j].history['val_loss']\n\n    plt.title(\"For CNN: \"+ str(j+1))\n    plt.plot(range(len(loss)),loss, label = 'Training_loss')\n    plt.plot(range(len(loss)),val_loss, label = 'Validation_loss')\n    plt.ylabel('loss')\n    plt.xlabel('epochs')\n    plt.legend()\n    plt.show()","009446c3":"We have similar counts for the 10 digits.","612df31e":"## 2.3 Reshape","ab7d9cd2":"\n\n** you found this notebook helpful or you just liked it , some upvotes would be very much appreciated - That will keep me motivated :)**\n","0e8a6390":"I chose to split the train set in two parts : a small fraction (10%) became the validation set which the model is evaluated and the rest (90%) is used to train the model.\n\nSince we have 42 000 training images of balanced labels (see 2.1 Load data), a random split of the train set doesn't cause some labels to be over represented in the validation set. Be carefull with some unbalanced dataset a simple random split could cause inaccurate evaluation during the validation. \n\nTo avoid that, you could use stratify = True option in train_test_split function (**Only for >=0.17 sklearn versions**).","8487df85":"## 2.6 Split training and valdiation set ","9207bbf3":"Here I have followed the ensemble method to train the model and used the Keras Sequential API, where you have just to add one layer at a time, starting from the input. \n\nDropout is a regularization method, where a proportion of nodes in the layer are randomly ignored (setting their wieghts to zero) for each training sample. This drops randomly a propotion of the network and forces the network to learn features in a distributed way. This technique also improves generalization and reduces the overfitting. \n\n'relu' is the rectifier (activation function max(0,x). The rectifier activation function is used to add non linearity to the network. \n\nThe Flatten layer is use to convert the final feature maps into a one single 1D vector. This flattening step is needed so that you can make use of fully connected layers after some convolutional layers. It combines all the found local features of the previous convolutional layers.\n\nIn the end i used the features in two fully-connected (Dense) layers which is just artificial an neural networks (ANN) classifier. In the last layer(Dense(10,activation=\"softmax\")) the net outputs distribution of probability of each class.","26e47187":"## 2.5 Label encoding","38de3be2":"![mnist.png](attachment:mnist.png)","c21cc3ee":"Labels are 10 digits numbers from 0 to 9. We need to encode these lables to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0]).","603161c1":"We can get a better sense for one of these examples by visualising the image and looking at the label.","53148f1e":"# Introduction\n\n\nIn this version of my notebook, I have used the ensemble method using Sequential Convolutional Neural Network for digits recognition trained on MNIST dataset. I choosed to build it with keras API (Tensorflow backend) which is very intuitive. Firstly, I will prepare the data (handwritten digits images) then i will focus on the CNN modeling and evaluation.\n\nThis Notebook follows three main parts:\n* The data preparation\n* The CNN modeling and evaluation\n* The results prediction and submission","f2ff6f4f":"Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices. \n\nKeras requires an extra dimension in the end which correspond to channels. MNIST images are gray scaled so it use only one channel. For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices. ","f486bd42":"I check for corrupted images (missing values inside).\n\nThere is no missing values in the train and test dataset. So we can safely go ahead.","1456df75":"# 2. Data preparation\n## 2.1 Load data","b6744bcb":"## 2.3 Normalization","8db49cdf":"## 2.2 Check for null and missing values","cabd8662":"For the data augmentation, i choosed to :\n   - Randomly rotate some training images\n   - Randomly  Zoom some training images\n   - Randomly shift images horizontally\n   - Randomly shift images vertically\n   \nI did not apply a vertical_flip nor horizontal_flip since it could have lead to misclassify symetrical numbers such as 6 and 9.\n\nOnce our model is ready, we fit the training dataset and during training, we save the models and use the best model to perform prediction.","d30ca6be":"**Here among all the models, the best performing model is estracted to perform the prediction.**","a81afb96":"We perform a grayscale normalization to reduce the effect of illumination's differences. \n\nMoreover the CNN converg faster on [0..1] data than on [0..255].","c4315793":"## 3.3 Data augmentation ","9e28f887":"# 3. CNN\n## 3.1 Define the model","a264e84f":"**This cell of code shows the accuracy curves for all models.**","52502f87":"In order to avoid overfitting problem, we need to expand artificially our handwritten digit dataset. We can make your existing dataset even larger. The idea is to alter the training data with small transformations to reproduce the variations occuring when someone is writing a digit.\n\nFor example, the number is not centered \nThe scale is not the same (some who write with big\/small numbers)\nThe image is rotated...\n\nApproaches that alter the training data in ways that change the array representation while keeping the label the same are known as data augmentation techniques. Some popular augmentations people use are grayscales, horizontal flips, vertical flips, random crops, color jitters, translations, rotations, and much more. \n\nBy applying just a couple of these transformations to our training data, we can easily double or triple the number of training examples and create a very robust model.\n\nThe improvement is important : \n   - Without data augmentation i obtained an accuracy of 98.114%\n   - With data augmentation i achieved 99.67% of accuracy","6f9d98de":"**This cell of code shows the loss curves for all models.**","16f93d97":"# Prediction"}}