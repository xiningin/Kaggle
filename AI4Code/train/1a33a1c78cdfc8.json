{"cell_type":{"c8e5885d":"code","a41db0c6":"code","82857143":"code","e695dbd9":"code","a0cc6858":"code","14bcdac3":"code","f8b54bb2":"code","3b524605":"code","7973e75a":"code","2febd177":"code","ab280088":"code","414b6d8b":"code","57f9a078":"markdown","337a8715":"markdown","10864091":"markdown","34481bc1":"markdown","9d734e7c":"markdown","21d38283":"markdown","06181fef":"markdown","fff68ee6":"markdown","ee2d62ce":"markdown","3d78d99b":"markdown"},"source":{"c8e5885d":"import numpy as np # For creating arrays and spectral-series\nimport scipy.signal as sp #For generating required signals\nimport matplotlib.pyplot as plt # for plotting the results","a41db0c6":"sampl_rate=1000\nt=np.linspace(0,20,500)\nsfreq=100\nsine=1*np.sin(2*np.pi*sfreq*t)\nsawtooth=1*sp.sawtooth(2*np.pi*sfreq*t)\nsquare=1*sp.square(2*np.pi*sfreq*t)","82857143":"fig, px = plt.subplots(3,1,figsize=(10,8))\npx[0].plot(t,sine)\npx[0].set_title('Sine')\npx[0].set_ylabel('Amplitude')\npx[1].plot(t,sawtooth)\npx[1].set_title('Sawtooth')\npx[1].set_ylabel('Amplitude')\npx[2].plot(t,square)\npx[2].set_title('Square') \nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nfor px in px. flat: \n    px.label_outer()","e695dbd9":"stacked=np.c_[sine,sawtooth,square]\nstacked+=0.2*np.random.normal(size=stacked.shape)\nstacked\/=stacked.std(axis=0) #Standardizing the data","a0cc6858":"plt.figure(figsize=(10,5))\nplt.plot(t,stacked)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.legend(['Sine','Sawtooth','Square'],loc='upper right')\nplt.show()","14bcdac3":"X=np.array([[0.2,0.2,0.6],[0.33,0.33,0.34],[0.6,0.2,0.2]])","f8b54bb2":"Mixed=np.dot(stacked,X.T)","3b524605":"plt.figure(figsize=(10,5))\nplt.plot(t,Mixed)\nplt.xlabel('Time')\nplt.ylabel('Amplitude')\nplt.show()","7973e75a":"from sklearn.decomposition import PCA,FastICA","2febd177":"pca=PCA(n_components=3)\nica=FastICA(n_components=3)","ab280088":"out_pca=pca.fit_transform(Mixed)\nout_ica=ica.fit_transform(Mixed)","414b6d8b":"fig, ax = plt.subplots(4,1,figsize=(10,8))\nax[0].plot(t,stacked)\nax[0].set_title('Original Signal') \nax[0].set_ylabel('Amplitude')\nax[1].plot(t,Mixed)\nax[1].set_title('Mixed Signal')\nax[1].set_ylabel('Amplitude')\nax[2].plot(t, out_pca)\nax[2].set_ylabel('Amplitude')\nax[2].set_title('PCA') \nax[3] .plot(t,out_ica)\nax[3].set_title('ICA')\nax[3].set_ylabel('Amplitude')\nax[3].set_xlabel('Time')\nfor ax in ax. flat: \n    ax.label_outer() \nplt.show()","57f9a078":"## Let us combine the signals in the following combination\n### Square: 20%; Sine: 20%; Sawtooth: 60%\n### Square: 33%; Sine: 33%; Sawtooth: 34%\n### Square: 60%; Sine: 20%; Sawtooth: 20%\n","337a8715":"![image.png](attachment:image.png)","10864091":"## Plotting the individual signals.","34481bc1":"### Everyone likes clean signals, without any noise or any additive signals in it, however this is not possible in real life, all the signals collected from a source will have a noise floor, other signals in the main signal.\n### Independent Component Analysis (ICA) has proven to be an effective data driven method for analyzing EEG data, separating signals from temporally and functionally independent brain and non-brain source processes and thereby increasing their definition.\n### An EEG test has various activities like Blinks, EKG, EMG, Line-noise, EOG.\n### We can identify these Individual activities and generate a corrected EEG, As shown in the figure below\n","9d734e7c":"## The next step would be to stack the signals column wise, in order to combine them in a particular ratio. We will also add random noise to the data","21d38283":"### From the above plots we can see that ICA works best, and even though the amplitude is reduced, the signal is still the same.\n### Another reason of selecting ICA is to identify components which are mutually independent from each other ie their mutual information is 0,  I(comp1,comp2)=0.\n### In the case of PCA we aim for finding the correlation between two features , by maximizing the variation.\n### In order to identify the brain and non-brain activity ICA is best suited for the job","06181fef":"## For this example let us generate 3 simple signals, Sine, Sawtooth and Square. With a sampling frequency of 100Hz .","fff68ee6":"# Extracting Individual Components from a Mixed Signal using PCA and ICA","ee2d62ce":"## Let us do PCA and ICA on the data, and see which one works best","3d78d99b":"## Visualizing the stacked signals"}}