{"cell_type":{"2859ad2b":"code","a4540a57":"code","ca37e6ea":"code","4910c57e":"code","5a04c02a":"code","d05a929c":"code","05704059":"code","151dd412":"code","c4cbdd62":"code","ff2701d2":"code","ad0ee622":"code","8788a8c0":"code","277b2b6c":"code","e2785da9":"code","b3f0f73d":"code","bb4f28f5":"code","b613b632":"markdown","a8499eee":"markdown","c874c5bd":"markdown","dd0ecc9c":"markdown"},"source":{"2859ad2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4540a57":"import numpy as np\nimport pandas as pd\nimport nltk\nimport string \nimport spacy\nimport re\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nimport tensorflow_hub as hub\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import wordnet\nfrom nltk.stem import WordNetLemmatizer","ca37e6ea":"df_train = pd.read_csv('\/kaggle\/input\/twitter-sentiment-analysis-hatred-speech\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/twitter-sentiment-analysis-hatred-speech\/test.csv')\ndf_train.info()","4910c57e":"# convert to lower case\ndf_train['cleaned_tweet'] = df_train['tweet'].str.lower()\ndf_test['cleaned_tweet'] = df_test['tweet'].str.lower()\ndf_train['cleaned_tweet'].head(10)","5a04c02a":"# remove punctuation\ndf_train['cleaned_tweet'] = df_train['cleaned_tweet'].apply(lambda text : text.translate(str.maketrans('','',string.punctuation)))\ndf_test['cleaned_tweet'] = df_test['cleaned_tweet'].apply(lambda text : text.translate(str.maketrans('','',string.punctuation)))\n\n# remove urls\nurl_pattern = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\ndf_train['cleaned_tweet'] = df_train['cleaned_tweet'].apply(lambda text : url_pattern.sub(r'', text))\ndf_test['cleaned_tweet'] = df_test['cleaned_tweet'].apply(lambda text : url_pattern.sub(r'', text))\n\ndf_train['cleaned_tweet'].head(10)","d05a929c":"# remove stopwords\nSTOPWORDS = set(stopwords.words('english'))\ndf_train['cleaned_tweet'] = df_train['cleaned_tweet'].apply(lambda text : ' '.join([word for word in str(text).split() if word not in STOPWORDS]))\ndf_test['cleaned_tweet'] = df_test['cleaned_tweet'].apply(lambda text : ' '.join([word for word in str(text).split() if word not in STOPWORDS]))\ndf_train['cleaned_tweet'].head(10)","05704059":"# remove frequent words\ncnt = Counter()\ncnt_test = Counter()\nfor text in df_train[\"cleaned_tweet\"].values:\n    for word in text.split():\n        cnt[word] += 1\n\nfor text in df_test[\"cleaned_tweet\"].values:\n    for word in text.split():\n        cnt_test[word] += 1        \n\ntemp_test = cnt_test.most_common(20).copy()\ntemp_test = [x[0] for x in temp_test ]\nFREQWORDS_TEST = set(temp_test.copy())        \ndf_test['cleaned_tweet'] = df_test['cleaned_tweet'].apply(lambda text : ' '.join([word for word in str(text).split() if word not in FREQWORDS_TEST]))        \n    \nprint(cnt.most_common(20))        \ntemp = cnt.most_common(20).copy()\ntemp = [x[0] for x in temp ]\nFREQWORDS = set(temp.copy())\ndf_train['cleaned_tweet'] = df_train['cleaned_tweet'].apply(lambda text : ' '.join([word for word in str(text).split() if word not in FREQWORDS]))\ndf_train['cleaned_tweet'].head(10)","151dd412":"# remove rare words\nn_rare_words = 10\nRAREWORDS = set([w for (w, wc) in cnt.most_common()[:-n_rare_words-1:-1]])\nRAREWORDS_TEST = set([w for (w, wc) in cnt_test.most_common()[:-n_rare_words-1:-1]])\ndf_test['cleaned_tweet'] = df_test['cleaned_tweet'].apply(lambda text :  ' '.join([word for word in str(text).split() if word not in RAREWORDS_TEST]))\n\nprint(RAREWORDS)\ndf_train['cleaned_tweet'] = df_train['cleaned_tweet'].apply(lambda text :  ' '.join([word for word in str(text).split() if word not in RAREWORDS]))\ndf_train['cleaned_tweet'].head(10)","c4cbdd62":"# lemmatization\nlemmatizer = WordNetLemmatizer()\nwordnet_map = {\"N\":wordnet.NOUN, \"V\":wordnet.VERB, \"J\":wordnet.ADJ, \"R\":wordnet.ADV}\ndf_train[\"cleaned_tweet\"] = df_train[\"cleaned_tweet\"].apply(lambda text: \" \".join([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in nltk.pos_tag(text.split())]))\ndf_test[\"cleaned_tweet\"] = df_test[\"cleaned_tweet\"].apply(lambda text: \" \".join([lemmatizer.lemmatize(word, wordnet_map.get(pos[0], wordnet.NOUN)) for word, pos in nltk.pos_tag(text.split())]))\ndf_train['cleaned_tweet'].head(10)","ff2701d2":"# keep only numbers and text\ndf_train[\"cleaned_tweet\"] = df_train[\"cleaned_tweet\"].apply(lambda text: ' '.join(re.sub(r'[^a-zA-Z0-9]','',word) for word in text.split()))\ndf_test[\"cleaned_tweet\"] = df_test[\"cleaned_tweet\"].apply(lambda text: ' '.join(re.sub(r'[^a-zA-Z0-9]','',word) for word in text.split()))\ndf_train['cleaned_tweet'].head(10)","ad0ee622":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,y_train,y_test = train_test_split(df_train.iloc[:,3].values,df_train.iloc[:,1].values,test_size=0.25)","8788a8c0":"embedding = \"https:\/\/tfhub.dev\/google\/nnlm-en-dim50\/2\"\nhub_layer = hub.KerasLayer(embedding,input_shape=[],output_shape=[None,None,50], dtype=tf.string, trainable=True)","277b2b6c":"model = tf.keras.Sequential()\nmodel.add(hub_layer)\nmodel.add(tf.keras.layers.Dense(18, activation='relu'))\nmodel.add(tf.keras.layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\nmodel.fit(X_train, y_train,epochs = 5,steps_per_epoch=50)","e2785da9":"model.summary()","b3f0f73d":"results = model.evaluate(X_test,y_test, verbose=2)\nfor name, value in zip(model.metrics_names, results):\n  print(\"%s: %.3f\" % (name, value))","bb4f28f5":"ans = model.predict(df_test[\"cleaned_tweet\"])\ntest_labels = model.predict_classes(df_test[\"cleaned_tweet\"])\ndf_test['predicted_label'] = test_labels.copy()\ndf_test['predicted_label'].value_counts()","b613b632":"## Import libraries","a8499eee":"## Prediction on Test-dataset","c874c5bd":"## Text pre-processing","dd0ecc9c":"## Build and train the model"}}