{"cell_type":{"2b07d150":"code","546d8a64":"code","8109db42":"code","9fa5b06b":"code","eae6d863":"code","bdaa78cf":"code","87c0f999":"code","50f34ae7":"code","47b6649f":"code","51521bf4":"code","e8a8ed4e":"code","c2dcfc4a":"code","0ae12162":"markdown","f3686816":"markdown","3d087ca3":"markdown","b4d39565":"markdown"},"source":{"2b07d150":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport skimage.io\nimport os \nimport tqdm\nimport glob\nimport tensorflow \n\nfrom tqdm import tqdm\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.color import grey2rgb\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import InputLayer, BatchNormalization, Dropout, Flatten, Dense, Activation, MaxPool2D, Conv2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.resnet_v2 import ResNet152V2","546d8a64":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   rotation_range=30,\n                                   zoom_range=0.2,\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   validation_split = 0.2)\n\nvalid_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   validation_split = 0.2)\n\ntest_datagen  = ImageDataGenerator(rescale = 1.\/255)","8109db42":"train_dataset  = train_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                   target_size = (224,224),\n                                                   class_mode = 'categorical',\n                                                   subset = 'training',\n                                                   batch_size = 128)","9fa5b06b":"valid_dataset = valid_datagen.flow_from_directory(directory = '..\/input\/alzheimers-dataset-4-class-of-images\/Alzheimer_s Dataset\/train',\n                                                  target_size = (224,224),\n                                                  class_mode = 'categorical',\n                                                  subset = 'validation',\n                                                  batch_size = 128)","eae6d863":"fig, ax = plt.subplots(nrows = 1, ncols = 5, figsize=(20,20))\n\nfor i in tqdm(range(0,5)):\n    rand1 = np.random.randint(len(train_dataset))\n    rand2 = np.random.randint(100)\n    ax[i].imshow(train_dataset[rand1][0][rand2])\n    ax[i].axis('off')\n    a = train_dataset[rand1][1][rand2]\n    if a[0] == 1:\n        ax[i].set_title('Mild Dementia')\n    elif a[1] == 1:\n        ax[i].set_title('Moderate Dementia')\n    elif a[2] == 1:\n        ax[i].set_title('Non Demetia')\n    elif a[3] == 1:\n        ax[i].set_title('Very Mild Dementia')","bdaa78cf":"# Instantiate Model\n\nbase_model = ResNet152V2(input_shape=(224,224,3), \n                         include_top=False,\n                         weights=\"imagenet\")","87c0f999":"# Freezing Layers\n\nfor layer in base_model.layers:\n    layer.trainable=False","50f34ae7":"# Building Model\n\nmodel=Sequential()\nmodel.add(base_model)\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1024,kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4,activation='softmax'))","47b6649f":"# Model Summary\n\nmodel.summary()","51521bf4":"# Model Compile \n\nOPT    = tensorflow.keras.optimizers.Adam(lr=0.001)\nMETRIC = tensorflow.keras.metrics.AUC(name = 'auc')\n\nmodel.compile(loss='categorical_crossentropy',\n              metrics=METRIC,\n              optimizer=OPT)","e8a8ed4e":"# Defining Callbacks\n\nfilepath = '.\/best_weights.hdf5'\n\nearlystopping = EarlyStopping(monitor = 'val_auc', \n                              mode = 'max' , \n                              patience = 15,\n                              verbose = 1)\n\ncheckpoint    = ModelCheckpoint(filepath, \n                                monitor = 'val_auc', \n                                mode='max', \n                                save_best_only=True, \n                                verbose = 1)\n\n\ncallback_list = [earlystopping, checkpoint]","c2dcfc4a":"model_history=model.fit(train_dataset,\n                        validation_data=valid_dataset,\n                        epochs = 500,\n                        callbacks = callback_list,\n                        verbose = 1)","0ae12162":"### MODEL BUILDING","f3686816":"> `DATA AUGMENTATION`","3d087ca3":"### IMPORT LIBRARIES","b4d39565":"### IMPORTING \/ VIEWING \/ PREPROCESSING DATASET"}}