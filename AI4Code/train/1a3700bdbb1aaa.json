{"cell_type":{"6a8422c2":"code","c7763880":"code","e0241651":"code","04707ee8":"code","fc99acca":"code","a5ce0c25":"code","4c208cb5":"code","882b622f":"code","9de38c90":"code","4fd356cf":"code","74ed3ff2":"code","fcf019cc":"code","d2e5f68d":"code","df2f4e1e":"code","5a7e7bb3":"code","a0f88abd":"code","00859892":"code","690385b7":"code","d315329f":"code","139bdf6a":"code","f09f790f":"code","cbc6586e":"code","f3233a74":"code","f338f4aa":"code","acb435b8":"code","1abfcf08":"code","69f71a7f":"code","1bb19c5e":"code","c316ad75":"code","16345f78":"code","53cd2568":"code","e90c460c":"code","5a6239de":"code","dbc7592e":"markdown","9b088849":"markdown","82364a2d":"markdown","4722b556":"markdown","b8279e13":"markdown","5a803df0":"markdown","ffade189":"markdown","8d0e80c3":"markdown","2765aca2":"markdown","6ee8159d":"markdown","0a8e9fce":"markdown","a19a2e86":"markdown","86a49ff8":"markdown","88d609ee":"markdown","22f46190":"markdown","53d0eceb":"markdown","6dcdcd0d":"markdown","ad74c63c":"markdown","a37348e5":"markdown","8bc86441":"markdown","fde5e813":"markdown","f3c6cdc4":"markdown","9aa54f94":"markdown","9a3ea876":"markdown"},"source":{"6a8422c2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nimport statsmodels.api as sm \nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.svm import SVC\nimport sys\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","c7763880":"dataset = pd.read_excel(io='\/kaggle\/input\/bank-loan-modelling\/Bank_Personal_Loan_Modelling.xlsx' ,sheet_name='Data')","e0241651":"dataset.head()","04707ee8":"dataset.info()","fc99acca":"colormap = plt.cm.viridis # Color range to be used in heatmap\nplt.figure(figsize=(15,15))\nplt.title('Dataset Correlation of attributes', y=1.05, size=19)\nsns.heatmap(dataset.corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","a5ce0c25":"dataset.isnull().sum()","4c208cb5":"dataset.isnull().values.any()","882b622f":"dataset.describe().transpose()","9de38c90":"dataset.apply(lambda x: len(x.unique()))","4fd356cf":"for col in dataset.columns:\n    print(col + ' Col Unique values: ', dataset[col].unique(), '\\n\\n')","74ed3ff2":"zero_mortgage = 0\nfor zero in dataset['Mortgage']:\n    if zero == 0:\n        zero_mortgage += 1\nprint('Number of people with zero mortgage ', zero_mortgage)","fcf019cc":"cc_avg = 0\nfor avg in dataset['CCAvg']:\n    if avg == 0:\n        cc_avg += 1\nprint('Number of people with zero credit card spending per month: ', cc_avg)","d2e5f68d":"categorical_col = ['Personal Loan', 'Securities Account', 'CD Account', 'Online Col', 'CreditCard']\n\nfor col in categorical_col:\n    val = 0\n    for value in col:\n        val += 1\n    print('Value count of ' + col + ':', val)","df2f4e1e":"plt.figure(figsize=(16,4))\nsns.set_color_codes()\nsns.countplot(dataset[\"Age\"])","5a7e7bb3":"plt.figure(figsize=(18,5))\nsns.set_color_codes()\nsns.distplot(dataset[\"Age\"])","a0f88abd":"plt.figure(figsize=(12,4))\nsns.set_color_codes()\nsns.barplot(dataset[\"Age\"],dataset[\"Personal Loan\"])","00859892":"plt.figure(figsize=(12,4))\nsns.set_color_codes()\nsns.boxplot(y=dataset[\"Age\"],x=dataset[\"Personal Loan\"])","690385b7":"X = dataset.drop(columns = ['ID', 'Personal Loan'])\ny = dataset['Personal Loan']","d315329f":"kbest = SelectKBest(k=5)\nk_best_features = kbest.fit_transform(X, y)\nlist(dataset.columns[kbest.get_support (indices=True)])","139bdf6a":"dataset.corrwith(dataset[\"Personal Loan\"]).abs().nlargest(5)","f09f790f":"X = dataset.drop(columns = ['ID','Age','Experience','ZIP Code', 'Family', 'Education','Personal Loan','Securities Account', 'Online','CreditCard']).values\ny = dataset['Personal Loan'].values","cbc6586e":"x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","f3233a74":"sc = MinMaxScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.fit_transform(x_test)","f338f4aa":"def model_evaluate(model, test):\n    y_pred = model.predict(test)\n    print('Metrics: \\n', classification_report(y_test, y_pred))\n    cm = confusion_matrix(y_test, y_pred)\n\n    sns.heatmap(cm, cmap = 'Blues', fmt = '', annot = True)\n\n    plt.xlabel(\"Predicted values\", fontdict = {'size':14}, labelpad = 10)\n    plt.ylabel(\"Actual values\"   , fontdict = {'size':14}, labelpad = 10)\n    plt.title (\"Confusion Matrix\", fontdict = {'size':18}, pad = 20)","acb435b8":"model = LogisticRegression(random_state = 0)\nmodel.fit(x_train, y_train)\n\nmodel_evaluate(model, x_test)","1abfcf08":"model = SVC(kernel = 'rbf')\nmodel.fit(X_train, y_train)\n\nmodel_evaluate(model, X_test)","69f71a7f":"model = KNeighborsClassifier(n_neighbors = 7, metric = 'euclidean')\nmodel.fit(X_train, y_train)\n\nmodel_evaluate(model, X_test)","1bb19c5e":"model = GaussianNB()\nmodel.fit(X_train, y_train)\n\nmodel_evaluate(model, X_test)","c316ad75":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\n\nmodel_evaluate(xgb, X_test)","16345f78":"crossVal= cross_val_score(estimator = xgb, X = X_train, y = y_train, cv = 10)\nprint('XGBoost Accuracy: ', crossVal.mean())\nprint('XGBoost Std: ', crossVal.std())","53cd2568":"skf = StratifiedKFold(n_splits=10)\nscores = cross_val_score(xgb, X_train, y_train, cv=skf)\nprint(\"scores:\\n{}\".format(scores))\nprint(\"average score:\\n{}\".format(scores.mean()))","e90c460c":"params = [{'learning_rate':[0.1,0.01],\n           'colsample_bytree':[1,3],\n           'gamma':[0,1],\n           'reg_alpha':[2,3],\n           'reg_lambda':[1,2,4,16],\n           'n_estimators':[50,100,150],\n           'colsample_bylevel':[1,2],\n           'missing':[False, True],\n           'subsample':[1,2],\n           'base_score':[0.2,0.5]\n           }\n    ]\nfrom sklearn.model_selection import GridSearchCV\ngs = GridSearchCV(estimator = xgb,\n                  param_grid = params,\n                  scoring = 'accuracy',\n                  cv = 10,\n                  n_jobs = -1)\ngrid_search = gs.fit(x_train, y_train)\nbest_result = grid_search.best_score_\nbest_params = grid_search.best_params_\nprint('Best_Result', best_result)\nprint('Best_Params', best_params)\n","5a6239de":"xgb = XGBClassifier(base_score = 0.2, colsample_bylevel = 1, colsample_bytree = 1, gamma = 0, learning_rate = 0.1, missing = True, n_estimators = 150, reg_alpha = 3, reg_lambda = 1, subsample = 1)\nxgb.fit(X_train, y_train)\n\nmodel_evaluate(xgb, X_test)","dbc7592e":"### **Categorical columns in the dataset:**\n\n* **Personal Loan**\n\n\n* **Securities Account**\n\n\n* **CD Account**\n\n\n* **Online Col**\n\n\n* **CreditCard**","9b088849":"## Best features","82364a2d":"* **ID** : Customer ID\n* **Age** : Customer's age in completed years\n* **Experience** : #years of professional experience\n* **Income** : Annual income of the customer (000)\n* **ZIP Code** : Home Address ZIP code.\n* **Family** : Family size of the customer\n* **CCAvg** : Avg. spending on credit cards per month (000)\n* **Education** : Education Level. 1: Undergrad; 2: Graduate; 3:Advanced\/Professional\n* **Mortgage** : Value of house mortgage if any. (000)\n* **Personal Loan** : Did this customer accept the personal loan offered in the last campaign?\n* **Securities Account** : Does the customer have a securities account with the bank?\n* **CD Account** : Does the customer have a certificate of deposit (CD) account with the bank?\n* **Online** : Does the customer use internet banking facilities?\n* **Credit card** : Does the customer use a credit card issued byUniversalBank?\n","4722b556":"## Unique values in each column.","b8279e13":"* **Support Vector Classifier**","5a803df0":"# Number of people with zero mortgage","ffade189":"### **Value counts of all categorical columns:**","8d0e80c3":"* **Gaussian Naive Bayes**","2765aca2":"## Modelling\n* **A small function for easier and easier use of the model. It can make your work quite easy when using more than one model.**","6ee8159d":"## Bivariate\n* **Age and Personal Loan**","0a8e9fce":"* **K Neighbors Classifier**","a19a2e86":"## Data distribution in each feature and target variable.","86a49ff8":"# Detection of null data.","88d609ee":"## Univariate\n* **Age Column**","22f46190":"* **Logistic Regression**","53d0eceb":"## The amount of unique values in each column.","6dcdcd0d":"**There is no empty value in the data set.**","ad74c63c":"## Number of people with zero credit card spending per month","a37348e5":"## Scaling","8bc86441":"### **The bank's expectation from the dataset is to take out loans to its debtor customers and turn them into loan customers. Therefore, it is desired to create a new marketing campaign by making inferences about the connection between the variables.**\n\n### **It seems that the XGBoost algorithm successfully accomplishes the necessary correlation.**","fde5e813":"# Correlation","f3c6cdc4":"#### There is no strong correlation between any two variables.\n#### There is no strong correlation between any independent variable and class variable.","9aa54f94":"* **XGBoost Classifier**","9a3ea876":"## Dividing the dataset"}}