{"cell_type":{"6bf4f0af":"code","443964d7":"code","449e35d9":"code","c74de6e2":"code","526851ce":"code","d3d7925a":"code","40e452ec":"code","39d138ba":"code","b40b302a":"code","b5d5894d":"code","a978e440":"code","cc84783b":"code","205489a6":"markdown","8fc31a42":"markdown","f740d773":"markdown","46ea307f":"markdown","fa0c48b8":"markdown","e4f55fb8":"markdown","a4bfb4f4":"markdown","edc4571a":"markdown","7a628bb7":"markdown"},"source":{"6bf4f0af":"%%time\n!pip install '\/kaggle\/input\/pretrainedmodels\/pretrainedmodels-0.7.4\/pretrainedmodels-0.7.4'","443964d7":"from __future__ import print_function, division\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport numpy as np\nimport pandas as pd\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\nimport pretrainedmodels\nimport pretrainedmodels.utils as utils\nfrom shutil import copyfile\nos.environ['TORCH_HOME'] = '\/kaggle\/working\/pretrained-model-weights-pytorch'","449e35d9":"print(pretrainedmodels.model_names)","c74de6e2":"def copy_weights(model_name):\n    found = False\n    for dirname, _, filenames in os.walk('\/kaggle\/input\/pretrained-model-weights-pytorch'):\n        for filename in filenames:\n            full_path = os.path.join(dirname, filename)\n            if filename.startswith(model_name):\n                found = True\n                break\n        if found:\n            break\n            \n    base_dir = \"\/kaggle\/working\/pretrained-model-weights-pytorch\/checkpoints\"\n    os.makedirs(base_dir, exist_ok=True)\n    filename = os.path.basename(full_path)\n    copyfile(full_path, os.path.join(base_dir, filename))","526851ce":"copy_weights('xception')\nmodel_name = 'xception' # could be fbresnet152 or inceptionresnetv2\nmodel = pretrainedmodels.__dict__[model_name](num_classes=1000, pretrained='imagenet')\nmodel.eval()\ntf_img = utils.TransformImage(model)","d3d7925a":"data_dir = '\/kaggle\/input\/pytorchtransferlearningtutorial\/hymenoptera_data'\nimage_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),\n                                          tf_img)\n                  for x in ['train', 'val']}\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,\n                                             shuffle=True, num_workers=1)\n              for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\nclass_names = image_datasets['train'].classes\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","40e452ec":"def imshow(inp, model=model, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    inp = model.std * inp + model.mean\n    inp = np.clip(inp, 0, 1)\n    plt.imshow(inp)\n    if title is not None:\n        plt.title(title)\n    plt.pause(0.001)  # pause a bit so that plots are updated\n\n\n# Get a batch of training data\ninputs, classes = next(iter(dataloaders['train']))\n\n# Make a grid from batch\nout = torchvision.utils.make_grid(inputs)\n\nimshow(out, title=[class_names[x] for x in classes])","39d138ba":"def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print('Epoch {}\/{}'.format(epoch, num_epochs - 1))\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc = running_corrects.double() \/ dataset_sizes[phase]\n\n            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n                phase, epoch_loss, epoch_acc))\n\n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n\n        print()\n\n    time_elapsed = time.time() - since\n    print('Training complete in {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 60, time_elapsed % 60))\n    print('Best val Acc: {:4f}'.format(best_acc))\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model","b40b302a":"def visualize_model(model, num_images=6):\n    was_training = model.training\n    model.eval()\n    images_so_far = 0\n    fig = plt.figure()\n\n    with torch.no_grad():\n        for i, (inputs, labels) in enumerate(dataloaders['val']):\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n\n            for j in range(inputs.size()[0]):\n                images_so_far += 1\n                ax = plt.subplot(num_images\/\/2, 2, images_so_far)\n                ax.axis('off')\n                ax.set_title('predicted: {}'.format(class_names[preds[j]]))\n                imshow(inputs.cpu().data[j])\n\n                if images_so_far == num_images:\n                    model.train(mode=was_training)\n                    return\n        model.train(mode=was_training)","b5d5894d":"model_ft = model\nnum_ftrs = model_ft.last_linear.in_features\nmodel_ft.last_linear = nn.Linear(num_ftrs, 2)\n\nmodel_ft = model_ft.to(device)\n\ncriterion = nn.CrossEntropyLoss()\n\n# Observe that all parameters are being optimized\noptimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)","a978e440":"%%time\nmodel_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n                       num_epochs=25)","cc84783b":"visualize_model(model_ft)","205489a6":"# 5. Visualizing the model predictions\nGeneric function to display predictions for a few images.","8fc31a42":"# 1. Install Pretrainedmodels package and import packages\nAll packages are available without internet, except [pretrained-models.pytorch](https:\/\/github.com\/Cadene\/pretrained-models.pytorch). After adding the datasets, run the cell below to install it.","f740d773":"# 6. Finetuning the convnet\nHere we reset final fully connected layer.","46ea307f":"# 7. Train and evaluate\nHere we train the model. It takes less than 2min using a GPU.","fa0c48b8":"# Transfer Learning Tutorial: Finetuning the convnet\nThis tutorial demonstrates how to train a convolutional neural network for image classification using transfer learning.\n\nIt is based on [TRANSFER LEARNING FOR COMPUTER VISION TUTORIAL](https:\/\/pytorch.org\/tutorials\/beginner\/transfer_learning_tutorial.html), but it uses **45 Pretrained models for Pytorch** from [this repository](https:\/\/github.com\/Cadene\/pretrained-models.pytorch) instead of the basic [12 torchvision models](https:\/\/pytorch.org\/docs\/stable\/torchvision\/models.html).\n\nTo run this tutorial:\n1. Add [pretrained-models.pytorch](https:\/\/www.kaggle.com\/rishabhiitbhu\/pretrainedmodels) dataset\n2. Add [Pretrained Model Weights (Pytorch)](https:\/\/www.kaggle.com\/abhishek\/pretrained-model-weights-pytorch) dataset\n3. Add [PyTorch Transfer Learning Tutorial: Bees and Ants](https:\/\/www.kaggle.com\/carlossouza\/pytorchtransferlearningtutorial) dataset","e4f55fb8":"# 2. Load data\nWe will use torchvision and torch.utils.data packages for loading the data.\n\nThe problem we\u2019re going to solve today is to train a model to classify ants and bees. We have about 120 training images each for ants and bees. There are 75 validation images for each class. Usually, this is a very small dataset to generalize upon, if trained from scratch. Since we are using transfer learning, we should be able to generalize reasonably well.\n\nThis dataset is a very small subset of imagenet. It's the same data used in PyTorch official documentation.","a4bfb4f4":"# 3. Visualize a few images\nLet\u2019s visualize a few training images so as to understand the data augmentations.","edc4571a":"# 2. Load the model\nAll available pre-trained models can be seen in the cell below. Pick one to do it. We've chosen **xception** to run this tutorial.\n\nIt is important to copy the pre-trained model weights to a directory. That's what **copy_weights** do.","7a628bb7":"# 4. Train the model\nThis is a general function to train a model, exactly as in PyTorch official documentation."}}