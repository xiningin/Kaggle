{"cell_type":{"cf08bed8":"code","041c0f02":"code","17488b50":"code","c58bf2aa":"code","d64da12e":"code","65267bbd":"code","09e5f774":"code","fe74bf8c":"code","d1d9c9ed":"code","452d27c6":"code","e23b1d11":"code","b2e41fcd":"code","d3c591fc":"code","82c12637":"code","90b40f0b":"code","89893dbc":"code","329586fd":"code","ca31eea4":"code","2d00a3fb":"code","b578c9f9":"code","4c6856a7":"code","364a5597":"code","ee4d51c1":"code","2745cfa4":"code","3c3dc6f3":"code","b21fa5e9":"code","b3bcf31a":"code","41f62784":"code","ab1aea06":"code","8dfa7f7d":"code","87d07e1a":"code","8f779188":"code","88d547ce":"code","70ce51c7":"code","fbeebf17":"code","d32809c0":"code","0817ecdd":"code","8caa6a97":"code","70e95ef8":"code","36ae8b50":"code","1172e788":"code","6b9263f5":"code","871a2eaf":"code","aa370754":"code","eba9bc4e":"markdown","ce572153":"markdown","ec9a00df":"markdown","91d5b571":"markdown","8cbd9be8":"markdown","c488a9a0":"markdown","29127ab3":"markdown","753f887d":"markdown","5d0bfd43":"markdown","df8d525c":"markdown","5c3f2cf9":"markdown","0e8f648f":"markdown","0936a464":"markdown","b137332c":"markdown"},"source":{"cf08bed8":"import numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","041c0f02":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\") #loading datas\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","17488b50":"train_df.info() ","c58bf2aa":"train_df.head()","d64da12e":"train_df.describe()","65267bbd":"numeric_titles=['Age','Fare']\ncategorical_titles=['Sex','Pclass','Embarked','Survived','SibSp','Parch']","09e5f774":"for c in categorical_titles:\n    plt.figure()\n    ax = sns.countplot(x=c, data=train_df,palette=\"dark:salmon_r\").set_title(c)","fe74bf8c":"sns.set_theme(style=\"dark\")\n\nf, ax = plt.subplots(figsize=(15, 6))\nax.set_xscale(\"log\")\n\nsns.boxplot(x=\"Fare\", y=\"Embarked\", data=train_df,width=.6, palette=\"dark:salmon_r\").set_title('Fare-Embarked')\nsns.stripplot(x=\"Fare\", y=\"Embarked\", data=train_df,size=4, color=\".3\")\n\nax.set(ylabel=\"\")\nsns.despine(trim=True, left=True)","d1d9c9ed":"for n in numeric_titles:\n    plt.figure()\n    sns.histplot(data=train_df, x=n, bins=30).set_title(n)","452d27c6":"\n\ncorr = train_df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.color_palette(\"dark:salmon_r\", as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","e23b1d11":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        Q1 = np.percentile(df[c],25)\n        Q3 = np.percentile(df[c],75)\n        IQR = Q3 - Q1\n        outlier_step = IQR * 1.5\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","b2e41fcd":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","d3c591fc":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)\n","82c12637":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","90b40f0b":"def detect_miss(df,features):\n    miss_indices = []\n    \n    for c in features:\n        \n        miss_list_col = df[df[c].isna()].index\n        miss_indices.extend(miss_list_col)\n    \n    miss_indices = Counter(miss_indices)\n    multiple_miss = list(i for i, v in miss_indices.items() if v > 3)\n    \n    return multiple_miss","89893dbc":"train_df.loc[detect_miss(train_df,['PassengerId','Survived','Pclass','Name','Sex','Age','SibSp' ,'Parch','Ticket','Fare' ,'Cabin','Embarked'])]","329586fd":"train_df.isnull().sum()\n","ca31eea4":"train_df[train_df[\"Embarked\"].isnull()]","2d00a3fb":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")#Filling embarked\ntrain_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))#Filling fare","b578c9f9":"train_df.isnull().sum()","4c6856a7":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","364a5597":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","ee4d51c1":"train_df['Title'].value_counts()","2745cfa4":"other_title = list(train_df[(train_df[\"Title\"]!='Mr')&(train_df[\"Title\"]!='Master')&(train_df[\"Title\"]!='Miss')&(train_df[\"Title\"]!='Mrs')]['Title'].index) \nfor i in other_title:\n    train_df[\"Title\"].iloc[i] = 'Other'","3c3dc6f3":"ax = sns.countplot(x='Title', data=train_df,palette=\"dark:salmon_r\").set_title('Title')","b21fa5e9":"train_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","b3bcf31a":"ax = sns.countplot(x='Title', data=train_df,palette=\"dark:salmon_r\").set_title('Title')","41f62784":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.drop(labels = [\"Cabin\"], axis = 1, inplace = True)\ntrain_df.drop(labels = [\"Ticket\"], axis = 1, inplace = True)\ntrain_df.drop(labels = [\"PassengerId\"], axis = 1, inplace = True)\ntrain_df.head()","ab1aea06":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","8dfa7f7d":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","87d07e1a":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\",palette=\"dark:salmon_r\")\ng.set_ylabels(\"Survival\")","8f779188":"train_df[\"family_size\"] = [1 if i <= 5 else 0 for i in train_df[\"Fsize\"]]\ntrain_df.head(20)","88d547ce":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df = pd.get_dummies(train_df, columns=[\"Embarked\"])","70ce51c7":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\n\ntrain_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])","fbeebf17":"train_df.head(10)","d32809c0":"test = train_df[train_df_len:]\ntest = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)\ntest.head()","0817ecdd":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","8caa6a97":"train.head()","70e95ef8":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","36ae8b50":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","1172e788":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","6b9263f5":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","871a2eaf":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","aa370754":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","eba9bc4e":"<a id=\"6\"> <\/a>\n# Feature Engineering","ce572153":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">CONTENT <\/h1>\n<br>\n\n* [Add Libaries](#1)\n* [Load and Examine Data](#2)\n* [Quick Look With Visualization](#3)\n* [Dropping Outliers](#4)\n* [Dropping & Fill Missing Values](#5) \n* [Feature Engineering](#6) \n* [Model Training](#7)","ec9a00df":"## Searching Missing Values","91d5b571":"<a id=\"3\"> <\/a>\n# Quick Look With Visualization","8cbd9be8":"<a id=\"4\"> <\/a>\n# Dropping Outliers","c488a9a0":"This data shows us that there are 891 passengers but we have missing values.","29127ab3":"## Seperate Dummies","753f887d":"## Run Models","5d0bfd43":"There is no multiple missing values.","df8d525c":"<a id=\"1\"> <\/a>\n# Add Libaries\n","5c3f2cf9":"<a id=\"7\"> <\/a>\n# Model Training","0e8f648f":"<a id=\"5\"> <\/a>\n# Dropping Missing Values","0936a464":"<a id=\"2\"> <\/a>\n# Load and Examine Data","b137332c":"<br>\n<h1 style = \"font-size:40px; font-family:Garamond ; font-weight : normal; background-color: #C66363 ; color : #E8D6D8; text-align: center; border-radius: 100px 100px;\">INTRODUCTION <\/h1>\n<br>\n\n<img style =\"margin-left: auto; margin-right: auto; margin-bottom: 20;\" src=\"https:\/\/im.haberturk.com\/2021\/04\/09\/ver1618124844\/3034043_ec090621cb78ef3e8c48ca3a38bdef4e.jpg\" alt=\"Titanic\" class=\"center\">\n\n  \n  \n  RMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean on 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking at the time one of the deadliest of a single ship and the deadliest peacetime sinking of a superliner or cruise ship to date. With much public attention in the aftermath, the disaster has since been the material of many artistic works and a founding material of the disaster film genre.\n"}}