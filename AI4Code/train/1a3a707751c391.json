{"cell_type":{"5b4b3735":"code","38b2a7c2":"code","2bfe84c6":"code","366f74c7":"code","7748d593":"code","d1c43c34":"code","e7023cc6":"code","98d6ef6e":"code","b3168aaf":"code","2431f7bd":"code","0aece288":"code","60cd6f9c":"code","30381d01":"code","fe5703d8":"code","0ad2f8db":"code","21ecf067":"code","214bfd0f":"code","e1d33513":"code","53273d65":"code","3301a5e7":"code","ef57bf13":"code","b4ce4569":"code","928e4c38":"code","786851aa":"code","dd71a9e3":"code","706df284":"code","93c7f40c":"code","f5e2a905":"code","2d23de01":"code","f9ddceae":"code","deba9d45":"code","7bdebe3c":"code","9277ddc4":"code","eff65f70":"code","d932248a":"code","5ccb2baa":"code","40ab3da7":"code","af0b349c":"code","4a12f76a":"code","986f954e":"code","75272ef8":"code","068fabd2":"code","b59ce6b8":"code","285858d0":"code","07457f5d":"code","66729b37":"code","c9665c30":"code","053548dd":"code","7bc7e618":"code","7f17ab8f":"code","341d34a4":"code","cbe9dcf4":"code","43d8d59d":"code","2d422885":"code","bc9acf5f":"code","0e593b82":"code","0d89c8e9":"code","e97192de":"code","72787847":"code","2bab671c":"code","117076b5":"code","eb675f03":"markdown","fefe10d4":"markdown","a6e6b4c6":"markdown","1b5e8c41":"markdown","b4350bb4":"markdown","00509d60":"markdown","b39614d0":"markdown","0f803080":"markdown","b76ce509":"markdown","82af114b":"markdown","11e4f039":"markdown","b8356585":"markdown","ecc0809e":"markdown","690e905e":"markdown","9e5bab5d":"markdown","eac0aa0f":"markdown","c0371e4f":"markdown"},"source":{"5b4b3735":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","38b2a7c2":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_df","2bfe84c6":"train_df.isnull().sum()","366f74c7":"train_df[\"Age\"].describe()","7748d593":"train_df[\"Age\"]=train_df[\"Age\"].fillna(train_df[\"Age\"].median())","d1c43c34":"train_df[\"Age\"].isnull().sum()\n","e7023cc6":"sns.distplot(train_df.Age[train_df.Survived==1]);","98d6ef6e":"sns.boxplot(train_df.Sex,train_df.Age,hue=train_df.Survived,palette=\"YlGnBu\");","b3168aaf":"train_df.drop([\"Cabin\",\"Name\",\"Ticket\"], axis=1,inplace=True)","2431f7bd":"train_df","0aece288":"fig,ax=plt.subplots(figsize=(8,6))\nax.bar(train_df.Pclass,train_df.Fare)\nax.set(title=\"Amount of Fare for Different Pclass\", xlabel=\"Pclass\",ylabel=\"Fare amount\")\n#plt.title('Amount of Fare for Different Pclass')\n#plt.xlabel=(\"Pclass\")\n#plt.ylabel=(\"Fare amount\")\nplt.xticks([1,2,3]);","60cd6f9c":"fig,ax=plt.subplots(figsize=(8,6))\nsns.boxplot(train_df.Pclass,train_df.Fare)\n","30381d01":"train_df[\"Embarked\"]","fe5703d8":"train_df[\"Embarked\"].describe()","0ad2f8db":"train_df[\"Embarked\"].value_counts()","21ecf067":"train_df[\"Embarked\"].value_counts().plot.pie(explode=[0.1,0.1,0.1],autopct='%1.1f%%', figsize=(6,6))","214bfd0f":"train_df[\"Embarked\"].mode()","e1d33513":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(train_df[\"Embarked\"].mode()[0])","53273d65":"train_df[\"Embarked\"].isnull().sum()","3301a5e7":"sns.countplot( x='Survived', data=train_df, hue=\"Embarked\", palette=\"icefire\");","ef57bf13":"train_df.head()","b4ce4569":"sns.pairplot(train_df,hue='Survived', palette='husl')","928e4c38":"cor_mat=train_df.corr()\nfig,ax=plt.subplots(figsize=(15,10))\nsns.heatmap(cor_mat,annot=True,linewidths=0.5,fmt=\".3f\",cmap=\"icefire\")","786851aa":"test_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_df.head()","dd71a9e3":"test_df.isnull().sum()","706df284":"test_df","93c7f40c":"test_df[\"Age\"]=test_df[\"Age\"].fillna(test_df[\"Age\"].median())","f5e2a905":"test_df[\"Age\"].isnull().sum()","2d23de01":"test_df[\"Fare\"].describe()","f9ddceae":"test_df[\"Fare\"]","deba9d45":"test_df.Fare=test_df.Fare.fillna('0').astype(float)","7bdebe3c":"test_df.Fare.isnull().sum()","9277ddc4":"test_df.drop([\"Cabin\",\"Name\",\"Ticket\"],axis=1,inplace=True)","eff65f70":"test_df.head()","d932248a":"X=train_df.drop(\"Survived\",axis=1)\nY=train_df.Survived\nX_test=test_df","5ccb2baa":"train_df.Parch[train_df.Parch==2].value_counts()","40ab3da7":"train_df.shape","af0b349c":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Embarked\"]\ntrain_dum= pd.get_dummies(X[features])\ntrain_dum","4a12f76a":"X.drop(train_df[features],axis=1,inplace=True)\nX=pd.concat([X,train_dum],axis=1)\n","986f954e":"X.head()","75272ef8":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,random_state=0,test_size=0.2)","068fabd2":"np.random.seed(42)\nfrom sklearn.svm import LinearSVC\nLSVC_clf=LinearSVC()\nLSVC_clf.fit(X_train,Y_train)\nLSVC_y_pred=LSVC_clf.predict(X_test)\nLSVC_clf.score(X_test,Y_test)","b59ce6b8":"from sklearn.ensemble import RandomForestClassifier\nnp.random.seed(42)\nfor i in range(1,40,1):\n  print(f\"With {i} estimators:\")\n  clf2=RandomForestClassifier(n_estimators=i*10,max_depth=i,random_state=i).fit(X_train,Y_train)\n  print(f\"Accuracy: {clf2.score(X_test,Y_test)*100:2f}%\")","285858d0":"np.random.seed(42)\nfrom sklearn.ensemble import RandomForestClassifier\nRF_clf=RandomForestClassifier(n_estimators=210,max_depth=21,random_state=21)\nRF_clf.fit(X_train,Y_train)\nRF_y_pred=RF_clf.predict(X_test)\nRF_clf.score(X_test,Y_test)","07457f5d":"np.random.seed(42)\nfrom sklearn.linear_model import LogisticRegression\nLR_clf=LogisticRegression()\nLR_clf.fit(X_train,Y_train)\nLR_Y_pred=LR_clf.predict(X_test)\nLR_score=LR_clf.score(X_test,Y_test)\nLR_score","66729b37":"np.random.seed(42)\nfrom sklearn.neighbors import KNeighborsClassifier\nKnn_clf=  KNeighborsClassifier()\nKnn_clf.fit(X_train,Y_train)\nKnn_Y_pred=Knn_clf.predict(X_test)\nKnn_score=Knn_clf.score(X_test,Y_test)\nprint(Knn_score)","c9665c30":"from xgboost import XGBClassifier\nXGB_clf=XGBClassifier()\nXGB_clf.fit(X_train,Y_train)\nXGB_score=XGB_clf.score(X_test,Y_test)\nXGB_Y_pred=XGB_clf.predict(X_test)\nXGB_score=XGB_clf.score(X_test,Y_test)\nprint(XGB_score)\n#evaluation(Y_test,XGB_Y_pred)","053548dd":"xgb = XGBClassifier(learning_rate=0.01, n_estimators=25, max_depth=15,gamma=0.6, subsample=0.52,colsample_bytree=0.6,seed=27, \n                    reg_lambda=2, booster='dart', colsample_bylevel=0.6, colsample_bynode=0.5)\n\nxgb.fit(X_train,Y_train)\nxgb_score=XGB_clf.score(X_test,Y_test)\nxgb_Y_pred=XGB_clf.predict(X_test)\nprint(xgb_score)\n#evaluation(Y_test,xgb_Y_pred)","7bc7e618":"np.random.seed(42)\nfrom sklearn.svm import SVC\nSVC_clf=SVC()\nSVC_clf.fit(X_train,Y_train)\nSVC_score=SVC_clf.score(X_test,Y_test)\nSVC_Y_pred=SVC_clf.predict(X_test)\nprint(SVC_score)","7f17ab8f":"from sklearn.model_selection import GridSearchCV\ngrid   = {'n_estimators': [1200, 1500, 2000],\n          'max_depth': [None, 5, 10],\n          'max_features': ['auto', 'sqrt'],\n          'min_samples_split': [4, 6],\n          'min_samples_leaf': [1, 2]}\n\ngs_clf = GridSearchCV(estimator=RF_clf,\n                      param_grid=grid,\n                      cv=5, # 5-fold cross-validation\n                      verbose=2) # print out progress\n\n# Fit the RandomizedSearchCV version of clf\n#gs_clf.fit(X_train, Y_train)\n#gs_clf.score(X_test,Y_test)","341d34a4":"## sklearn ensembles \nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","cbe9dcf4":"from lightgbm import LGBMClassifier\nimport lightgbm as lgb\nLGB_clf = LGBMClassifier()\nLGB_clf.fit(X_train, Y_train)\nLGB_score=LGB_clf.score(X_test,Y_test)\nLGB_Y_pred=LGB_clf.predict(X_test)\nprint(LGB_score)","43d8d59d":"### CatBoost\n!pip install catboost\nimport catboost \nfrom catboost import CatBoostClassifier\nnp.random.seed(42)\ncat_clf = CatBoostClassifier(verbose=0)\ncat_clf.fit(X_train, Y_train)\ncat_score=cat_clf.score(X_test,Y_test)\ncat_Y_pred=cat_clf.predict(X_test)\nprint(cat_score)","2d422885":"from sklearn.linear_model import SGDClassifier\nsgd = SGDClassifier()\nsgd.fit(X_train.values,Y_train.values)\nsgd_score=cat_clf.score(X_test.values,Y_test.values)\nsgd_Y_pred = sgd.predict(X_test.values)\nsgd_score","bc9acf5f":"np.random.seed(42)\nfrom mlxtend.classifier import StackingCVClassifier\nscv=StackingCVClassifier(classifiers=[xgb,LGB_clf,sgd,cat_clf,RF_clf],meta_classifier= RF_clf)\nscv.fit(X_train.values,Y_train.values)\nscv_score=scv.score(X_test.values,Y_test.values)\nscv_Y_pred=scv.predict(X_test.values)\nprint(scv_score)\n#evaluation(Y_test,scv_Y_pred)","0e593b82":"from sklearn.metrics import confusion_matrix\n\nfig,ax=plt.subplots()\nax=sns.heatmap(confusion_matrix(Y_test,scv_Y_pred),annot=True,cbar=True);","0d89c8e9":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test,scv_Y_pred))","e97192de":"X_test=test_df\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",\"Embarked\"]\ntest_dum= pd.get_dummies(X_test[features])\ntest_dum\n","72787847":"X_test.drop(test_df[features],axis=1,inplace=True)\nX_test=pd.concat([X_test,test_dum],axis=1)\n#X_test=scaler.transform(X_test)","2bab671c":"scv.fit(X.values,Y.values)\nscv_Y_pred=scv.predict(X_test.values)","117076b5":"\noutput = pd.DataFrame({'PassengerId': test_df.PassengerId, 'Survived': scv_Y_pred})\noutput.to_csv('my_submission.csv', index=False)","eb675f03":"# **Import some required modules**","fefe10d4":"# **Fitting Logistic Regression**","a6e6b4c6":"# **Fitting the StackingCV Classifier on the original X and Y and predicting on the test set ( For submission )**","1b5e8c41":"# **Fitting Linear SVM Classifier**","b4350bb4":"# **Stochastic Gradient Descent**","00509d60":"# **Taking data from the test set and converting the categorical columns into numerical columns**","b39614d0":"# **Fitting StackingCV Classifier**","0f803080":"# **Converting the Categorical features into numerical features**","b76ce509":"# **Fitting CatBoost**","82af114b":"# **Tuning XGB manually**","11e4f039":"# **Fitting Support Vector Machine algorithm**","b8356585":"# **Fitting Random Forest Classifier**","ecc0809e":"# **Fitting Light GBM**","690e905e":"# **Load the training dataset using pandas**","9e5bab5d":"# **Check for null values in the training set and fill it up or discard the column accordingly**","eac0aa0f":"# **Fitting XGBoost**","c0371e4f":"# **Fitting KNeighbors**"}}