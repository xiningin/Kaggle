{"cell_type":{"73292738":"code","a995f1a7":"code","1aaf13c1":"code","a8978e8d":"code","a5b093c9":"code","f926d4ee":"code","c11aee0f":"code","3a0d935a":"code","0f821104":"code","5e9520be":"code","bef959ef":"code","581bc98d":"code","c36213bb":"code","321a0161":"code","df7e1ee9":"code","973a97d7":"code","6f9f3182":"code","bb9dbc8d":"code","dd02536c":"code","064004d4":"code","b053f184":"code","c2beffd1":"markdown","369bbbe3":"markdown","5ce71866":"markdown","386ee04a":"markdown","8519ebd0":"markdown","ecfd2c6b":"markdown","08c1e5bf":"markdown","2119d9f8":"markdown","76285953":"markdown","06f84041":"markdown","814ee35d":"markdown","5c53d130":"markdown","bc68f315":"markdown","05468442":"markdown","b0c45119":"markdown","7b8db273":"markdown","7ac76494":"markdown","27e3be22":"markdown","6be03770":"markdown","444fb855":"markdown","ef1fde8d":"markdown","e5f21b1b":"markdown","e1b19859":"markdown"},"source":{"73292738":"# Check nvcc version\n!nvcc -V\n# Check GCC version\n!gcc --version","a995f1a7":"import torch","1aaf13c1":"%%time\n\nprint(\"this will take around 9 mins\")\n# install dependencies: (use cu101 because colab has CUDA 10.1)\n# !pip install -U torch==1.7.0+cu101 torchvision==0.6.1+cu101 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html\n\n# install mmcv-full thus we could use CUDA operators\n!pip install mmcv-full\n\n\n","a8978e8d":"!rm -rf mmdetection\n!git clone --branch v2.7.0 https:\/\/github.com\/open-mmlab\/mmdetection.git\n%cd mmdetection\n\n!pip install -e .\n\n# install Pillow 7.0.0 back in order to avoid bug in colab\n!pip install Pillow==7.0.0","a5b093c9":"# Check Pytorch installation\nimport torch, torchvision\nprint(torch.__version__, torch.cuda.is_available())\n\n# Check MMDetection installation\nimport mmdet\nprint(mmdet.__version__)\n\n# Check mmcv installation\nfrom mmcv.ops import get_compiling_cuda_version, get_compiler_version\nprint(get_compiling_cuda_version())\nprint(get_compiler_version())","f926d4ee":"!mkdir checkpoints\n!wget -c http:\/\/download.openmmlab.com\/mmdetection\/v2.0\/mask_rcnn\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth \\\n      -O checkpoints\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth","c11aee0f":"from mmdet.apis import inference_detector, init_detector, show_result_pyplot\n\n# Choose to use a config and initialize the detector\nconfig = 'configs\/mask_rcnn\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco.py'\n# Setup a checkpoint file to load\ncheckpoint = 'checkpoints\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\n# initialize the detector\nmodel = init_detector(config, checkpoint, device='cuda:0')","3a0d935a":"# Use the detector to do inference\nimg = 'demo\/demo.jpg'\nresult = inference_detector(model, img)","0f821104":"# Let's plot the result\nshow_result_pyplot(model, img, result, score_thr=0.3)","5e9520be":"from mmcv import Config\ncfg = Config.fromfile('.\/configs\/faster_rcnn\/faster_rcnn_r50_caffe_fpn_mstrain_1x_coco.py')\n\n","bef959ef":"from mmdet.apis import set_random_seed\n\ncfg.dataset_type = 'CocoDataset'\ncfg.classes = (\"Aortic_enlargement\", \"Atelectasis\", \"Calcification\", \"Cardiomegaly\", \"Consolidation\", \"ILD\", \"Infiltration\", \"Lung_Opacity\", \"Nodule\/Mass\", \"Other_lesion\", \"Pleural_effusion\", \"Pleural_thickening\", \"Pneumothorax\", \"Pulmonary_fibrosis\")\n\ncfg.data.train.img_prefix = '..\/..\/input\/new-df\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\ncfg.data.train.classes = cfg.classes\ncfg.data.train.ann_file = '..\/..\/input\/new-df\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/train_annotations.json'\ncfg.data.train.type='CocoDataset'\n\n\ncfg.data.val.img_prefix = '..\/..\/input\/new-df\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\ncfg.data.val.classes = cfg.classes\ncfg.data.val.ann_file = '..\/..\/input\/new-df\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/val_annotations.json'\ncfg.data.val.type='CocoDataset'\n\n\n\ncfg.data.test.img_prefix = '..\/..\/input\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/'\ncfg.data.test.classes = cfg.classes\ncfg.data.test.ann_file = '..\/..\/input\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/val_annotations.json'\ncfg.data.test.type='CocoDataset'\n\n\n\n\ncfg.model.roi_head.bbox_head.num_classes = 14\n\ncfg.data.train.type = 'CocoDataset'\ncfg.data.val.type = 'CocoDataset'\ncfg.data.test.type = 'CocoDataset'\n\ncfg.optimizer.lr = 0.02 \/ 8\ncfg.lr_config.warmup = None\ncfg.log_config.interval = 10\n\n# Change the evaluation metric since we use customized dataset.\ncfg.evaluation.metric = 'bbox'\n# We can set the evaluation interval to reduce the evaluation times\ncfg.evaluation.interval = 12\n# We can set the checkpoint saving interval to reduce the storage cost\ncfg.checkpoint_config.interval = 10\n\n# Set seed thus the results are more reproducible\ncfg.seed = 0\nset_random_seed(0, deterministic=False)\ncfg.gpu_ids = range(1)\n\n# we can use here mask_rcnn.\ncfg.load_from = '.\/checkpoints\/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\ncfg.work_dir = \"..\/vinbig_output\"\n\n# One Epoch takes around 18 mins\ncfg.total_epochs = 15","581bc98d":"# the dataset has been taken : https:\/\/www.kaggle.com\/sreevishnudamodaran\/vinbigdata-fusing-bboxes-coco-dataset\nimport os\nos.listdir(\"..\/..\/input\/new-df\/vinbigdata-coco-dataset-with-wbf-3x-downscaled\/train_images\/\")[:2]","c36213bb":"# for saving checkpoint and plots\nimport os\nos.makedirs('..\/vinbig_output')","321a0161":"print(f'Config:\\n{cfg.pretty_text}')","df7e1ee9":"from mmdet.datasets import build_dataset\nfrom mmdet.models import build_detector\nfrom mmdet.apis import train_detector","973a97d7":"model = build_detector(\n    cfg.model, train_cfg=cfg.train_cfg, test_cfg=cfg.test_cfg)\n\n","6f9f3182":"datasets = [build_dataset(cfg.data.train)]","bb9dbc8d":"# cfg.lr_config.policy='step'\ntrain_detector(model, datasets[0], cfg, distributed=False, validate=True)\n","dd02536c":"os.chdir('..\/')\n","064004d4":"\n!python mmdetection\/tools\/analyze_logs.py plot_curve .\/vinbig_output\/None.log.json --keys loss_cls --legend loss_cls --out \"loss_cls\"","b053f184":"!rm -rf \".\/mmdetection\"","c2beffd1":"MMDetection is an open source object detection toolbox based on PyTorch. It is a part of the OpenMMLab project developed by Multimedia Laboratory, CUHK.","369bbbe3":"# Downloading Checkpoint For Demo","5ce71866":"# Building Dataset","386ee04a":"1. **Modular Design**\n    1. The detection framework is decomposed into different components. This gives the flexiblity to construct a customized object detection framework using different backbones and models.\n    \n    2. The framework mainly contains following parts:\n    \n        1. Config: This is the place where you get to set the configurations for the framwork like data dirs, num of epochs, gpus to use etc.\n        2. mmdet: This module contains the files related to backbones, necks, heads and losses etc.\n        \n        3. Tools: This is the directory that contains utilities for training, testing and computing the evaluation metric.\n","8519ebd0":"# Building MMDet From Source","ecfd2c6b":"Dataset Source: https:\/\/www.kaggle.com\/sreevishnudamodaran\/vinbigdata-fusing-bboxes-coco-dataset","08c1e5bf":"3. **High Efficiency**\n    1. All basic bbox and mask operations run on GPUs. The training speed is faster than or comparable to other codebases, including Detectron2, maskrcnn-benchmark and SimpleDet.","2119d9f8":"I am using here faster rcnn for the demo purpose but as listed above the training pipeline can be customized using different framework and backbones. Just need to change the config settings down here. The config dir of mmdet framework contains various implmentation. Do checkit out.","76285953":"# Prereq: MMCV(~9 mins)","06f84041":"# MMDet Framework","814ee35d":"# Verifying Installation","5c53d130":"# Initializing Detector","bc68f315":"# Installing MMDet Framework","05468442":"# MMDet on VinBigData","b0c45119":"# Configuration Settings On BaseConfig","7b8db273":"# Sample Inference Demo","7ac76494":"Check the output dir for the plot.","27e3be22":"2. **Multiple Frameworks**(https:\/\/github.com\/open-mmlab\/mmdetection)\n    1. List of Supported Backbones\n    \n        1. ResNet (CVPR'2016)\n        2. ResNeXt (CVPR'2017)\n        3. VGG (ICLR'2015)\n        4. HRNet (CVPR'2019)\n        5. RegNet (CVPR'2020)\n        6. Res2Net (TPAMI'2020)\n        7. ResNeSt (ArXiv'2020)\n    2. Supported Frameworks\n        1. [RPN (NeurIPS'2015)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/rpn)\n        2. [Fast R-CNN (ICCV'2015)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/fast_rcnn)\n        3. [Faster R-CNN (NeurIPS'2015)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/faster_rcnn)\n        4. [Mask R-CNN (ICCV'2017)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/mask_rcnn)\n        5. [Cascade R-CNN (CVPR'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/cascade_rcnn)\n        6. [Cascade Mask R-CNN (CVPR'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/cascade_rcnn)\n        7. [SSD (ECCV'2016)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/ssd)\n        8. [RetinaNet (ICCV'2017)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/retinanet)\n        9. [GHM (AAAI'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/ghm)\n        10. [Mask Scoring R-CNN (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/ms_rcnn)\n        11. [Double-Head R-CNN (CVPR'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/double_heads)\n        12. [Hybrid Task Cascade (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/htc)\n        13. [Libra R-CNN (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/libra_rcnn)\n        14. [Guided Anchoring (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/guided_anchoring)\n        15. [FCOS (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/fcos)\n        16. [RepPoints (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/reppoints)\n        17. [Foveabox (TIP'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/foveabox)\n        18. [FreeAnchor (NeurIPS'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/free_anchor)\n        19. [NAS-FPN (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/nas_fpn)\n        20. [ATSS (CVPR'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/atss)\n        21. [FSAF (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/fsaf)\n        22. [PAFPN (CVPR'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/pafpn)\n        23. [Dynamic R-CNN (ECCV'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/dynamic_rcnn)\n        24. [PointRend (CVPR'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/point_rend)\n        25. [CARAFE (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/carafe\/README.md)\n        26. [DCNv2 (CVPR'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/dcn\/README.md)\n        27. [Group Normalization (ECCV'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/gn\/README.md)\n        28. [Weight Standardization (ArXiv'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/gn+ws\/README.md)\n        29. [OHEM (CVPR'2016)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/faster_rcnn\/faster_rcnn_r50_fpn_ohem_1x_coco.py)\n        30. [Soft-NMS (ICCV'2017)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/faster_rcnn\/faster_rcnn_r50_fpn_soft_nms_1x_coco.py)\n        31. [Generalized Attention (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/empirical_attention\/README.md)\n        32. [GCNet (ICCVW'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/gcnet\/README.md)\n        33. [Mixed Precision (FP16) Training (ArXiv'2017)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/fp16\/README.md)\n        34. [InstaBoost (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/instaboost\/README.md)\n        35. [GRoIE (ICPR'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/groie\/README.md)\n        36. [DetectoRS (ArXix'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/detectors\/README.md)\n        37. [Generalized Focal Loss (NeurIPS'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/gfl\/README.md)\n        38. [CornerNet (ECCV'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/cornernet\/README.md)\n        39. [Side-Aware Boundary Localization (ECCV'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/sabl\/README.md)\n        40. [YOLOv3 (ArXiv'2018)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/yolo\/README.md)\n        41. [PAA (ECCV'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/paa\/README.md)\n        42. [YOLACT (ICCV'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/yolact\/README.md)\n        43. [CentripetalNet (CVPR'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/centripetalnet\/README.md)\n        44. [VFNet (ArXix'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/vfnet\/README.md)\n        45. [DETR (ECCV'2020)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/detr\/README.md)\n        46. [CascadeRPN (NeurIPS'2019)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/cascade_rpn\/README.md)\n        47. [SCNet (AAAI'2021)](https:\/\/github.com\/open-mmlab\/mmdetection\/blob\/master\/configs\/scnet\/README.md)","6be03770":"The aim of this notebook is to install and run a training pipeline using MMDET Framework.","444fb855":"# Training Detector With BBox Eval","ef1fde8d":"![image.png](attachment:image.png)","e5f21b1b":"# Plotting Classification Loss","e1b19859":"# Features"}}