{"cell_type":{"9fe02930":"code","9cf1dfd0":"code","0bf1b85f":"code","b6f8814b":"code","f353d52c":"code","9cfe997b":"code","99609ffb":"code","294652b9":"code","3d32e857":"code","940b3be9":"code","bfcf8988":"code","b6ac1903":"code","8deaa7f6":"code","a0dcaa12":"code","d38af89a":"code","92237592":"code","9f6bc5da":"code","2fb21361":"code","5d35421a":"code","826e23a0":"code","7ab04a92":"markdown","808eed11":"markdown","19e42a7f":"markdown"},"source":{"9fe02930":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","9cf1dfd0":"banknotes= pd.read_csv('\/kaggle\/input\/banknote-authentication-uci\/BankNoteAuthentication.csv' )","0bf1b85f":"banknotes.head()","b6f8814b":"# Use pairplot and set the hue to be our class\nsns.pairplot(banknotes,hue='class') \n\n\n\n# Describe the data\nprint('Dataset stats: \\n', banknotes.describe())","f353d52c":"banknotes.describe()","9cfe997b":"sns.heatmap(banknotes.corr(),annot=True,cmap='mako',linewidths=0.2)\nfig=plt.gcf()\nfig.set_size_inches(12,6)\nplt.show()","99609ffb":"sns.displot(banknotes[\"variance\"], height= 5, aspect=1.8)\nplt.xlabel(\"Variance\")","294652b9":"sns.displot(banknotes[\"skewness\"], height= 5, aspect=1.8)\nplt.xlabel(\"Skewness\")","3d32e857":"sns.displot(banknotes[\"curtosis\"], height= 5, aspect=1.8)\nplt.xlabel(\"Curtosis\")","940b3be9":"sns.displot(banknotes[\"entropy\"], height= 5, aspect=1.8)\nplt.xlabel(\"Entropy\")","bfcf8988":"sns.countplot(data= banknotes, y=\"class\")\nplt.xlabel(\"Class\")","b6ac1903":"# Import the sequential model and dense layer\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping\n\n# Create a sequential model\nmodel = Sequential()\n\n# Add a dense layer \nmodel.add(Dense(1, input_shape=(4,), activation='sigmoid'))\nmodel.add(Dense(1, input_shape=(3,), activation='sigmoid'))\n\n\n# Compile your model\nmodel.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])\n\n# Display a summary of your model\nmodel.summary()","8deaa7f6":"X=banknotes[['variance','skewness', 'curtosis','entropy']]","a0dcaa12":"X.head()","d38af89a":"y=banknotes[[\"class\"]]","92237592":"y.head()","9f6bc5da":"#splitting the data into test and train sets\n\n\nfrom sklearn.model_selection import train_test_split\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.35,  random_state = 7)","2fb21361":"# Train your model \nmodel.fit(train_X, train_y, epochs=30)\n\n# Evaluate your model accuracy on the test set\naccuracy = model.evaluate(test_X, test_y)[1]\n\n# Print accuracy\nprint('Accuracy:',accuracy)","5d35421a":"monitor_val_acc = EarlyStopping(monitor='accuracy', mode=\"max\",\n                                patience=6)\n\n# Train your model using the early stopping callback\nmodel.fit(train_X, train_y, \n          epochs=100, validation_data=(test_X, test_y),\n          callbacks=[monitor_val_acc])","826e23a0":"print(model.evaluate(test_X, test_y)[1])","7ab04a92":"* variance - variance is the amount by which something changes or is different from something else\n* skewness - skewness is the amount by which something changes or is different from something else\n* kurtosis - kurtosis refers to the pointedness of a peak in the distribution curve.\n* entropy - entropy is the measure of disorder or uncertanity","808eed11":"The early stopping callback is useful since it allows for you to stop the model training if it no longer improves after a given number of epochs. To make use of this functionality you need to pass the callback inside a list to the model's callback parameter in the .fit() method.","19e42a7f":"# Creating the Model"}}