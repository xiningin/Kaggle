{"cell_type":{"5c84ff72":"code","60e01128":"code","802c91e2":"code","e632eda9":"code","43c19e09":"code","95d07626":"code","092151a5":"code","e0d0ea27":"code","c37e1593":"code","b9292e8e":"code","d6a79d60":"code","2eff8af2":"code","601e8ac4":"code","23d97ba9":"code","3279cb04":"code","a12e6e1a":"code","7dbd6a1d":"code","74697949":"code","2d900ad1":"code","e6a94c8a":"code","2e7c5457":"code","d285b739":"code","d98425b6":"code","098dbf2b":"code","bd275ee8":"code","9c3ad24e":"code","5904481e":"code","264ee862":"code","27d6caa7":"code","9d2495e4":"code","9f9e2c07":"code","c4926c7e":"code","373ca663":"code","c9268fc9":"code","208f4092":"code","7036124e":"code","be0dc974":"code","5f9c950e":"code","d24cdf2a":"code","d7c143a7":"code","d3f93a9a":"code","0bb5d298":"code","a0f8ea5b":"code","5a0fe970":"code","191c8cc2":"code","e7db84d4":"code","825326f7":"code","e9ce35ca":"code","cc529341":"code","e535184a":"code","97d28b36":"code","a47c8cf2":"markdown","76666d97":"markdown","4913041d":"markdown","50993f7a":"markdown","4a2ed779":"markdown","5da044ad":"markdown","f2dc15de":"markdown","5460b5af":"markdown","bfb419eb":"markdown","b035b68f":"markdown","b06a51a9":"markdown","d75e15cb":"markdown","2d87a267":"markdown","f8fc452f":"markdown","d3068403":"markdown","be42d705":"markdown","a7e252f1":"markdown","f5a451ee":"markdown","9e2dacf6":"markdown","2880843c":"markdown","b4d82274":"markdown","ef0e4ed1":"markdown"},"source":{"5c84ff72":"import numpy as np","60e01128":"height = np.array([130,140,120,150,160])\nweight = np.array([60,80,70,65,70])","802c91e2":"# type() - used to know the type of the variable \n\ntype(height)","e632eda9":"# size - returns the size (no.of elements) of the array \n\nheight.size","43c19e09":"# itemsize - returns the size of each element of array (int - 4 bytes)\n\nheight.itemsize","95d07626":"# 1D array\n\narr1=np.array([1,2,3,4,5])\narr2=np.array([6,7,8,9,10])","092151a5":"# dtype - return the type of the array\n\nprint(arr1.dtype)\n\n# to alter the datatype of the array, specify it explicitly while defining the numpy array\narr3= np.array([1,2,3,4,5],dtype=float)\nprint(arr3.dtype)\narr4= np.array([1,2,3,45],dtype=complex)\nprint(arr4.dtype)\n","e0d0ea27":"# reshape(no.of. rows, no.of colmns) - we can redefine the shape of the array using this function\n\nsam_arr=np.array([1,2,3,4,5,6,7,8,9,10]).reshape(5,2)  # denotes 5 rows and 2 columns\nsam_arr","c37e1593":"# 1D array\n\narr1=np.array([1,2,3,4,5])\narr2=np.array([6,7,8,9,10])","b9292e8e":"# 2d array\n\na1=np.arange(9).reshape(3,3)\na2=np.arange(1,10).reshape(3,3)\nprint(a1)\nprint(a2)","d6a79d60":"# addition - the resultant array is printed - element-wise addition takes place\n\nprint (arr1+arr2,\"\\n\")  # 1-d array\nprint(a1+a2) # 2-d array","2eff8af2":"# subtraction -  the resultant array is printed - element-wise subtracion takes place\n\nprint(arr2-arr1)  # 1-d array\nprint(arr1-arr2,\"\\n\")  # 1-d array\n\nprint(a2-a1) #2d array","601e8ac4":"# multiplication - the resulting array is printed - element-wise multiplication takes place\n\nprint(arr1*arr2,\"\\n\") # 1d array\n \nprint(a1*a2) #2d array\n","23d97ba9":"# division - element-wise division takes place - the resulting array is printed\n\nprint(arr1\/arr2,\"\\n\")\nprint(arr2\/arr1,\"\\n\")\n\nprint(a1\/a2) # 2d array","3279cb04":"# matrix multiplication - use dot() function\n\nprint(arr1.dot(arr2)) #1d array\nprint(a1.dot(a2)) #2d array\n\n","a12e6e1a":"# modulo \n\nprint(a1%a2)","7dbd6a1d":"ar=np.array([[1,2,21,11],[3,4,41,31],[5,6,61,51]])\nar","74697949":"ar[0:2,1]  # array_name[row,column]","2d900ad1":"ar[2,3]","e6a94c8a":"# ndim --> to know the dimension of the array \n# ar is a 2-D array\n\nar.ndim","2e7c5457":"# zero matrix\n\nnp.zeros(10).reshape(2,5)","d285b739":"# one matrix\n\nnp.ones(10).reshape(5,2)","d98425b6":"# identity matrix\n\nnp.eye(3)","098dbf2b":"\nar=np.array([[1,2,21,11],[3,4,41,31],[5,6,61,51]])\nar","bd275ee8":"# conditional statements\n\nar>5  # will return boolean value","9c3ad24e":"\nar[ar>5] # will return the values that satisfy the conditions --> follows the c order(rows) of execution","5904481e":"# linspace(start,stop,no.of.points_to_be_divided) --> divide the given range into equal division\n\nnp.linspace(1,5,10)","264ee862":"# RAVEL\n\n# returns the view of a original array after flattening\n# no separate memory is allocated\n# changes will be reflected in the main array","27d6caa7":"a=np.array([[1,2],[3,4],[5,6]]) # original 2D array\n\nprint(\"The dimensions of the original array : \",a.ndim)\nprint(\"The dimensions after flattening : \",a.ravel().ndim)\nprint(\"The array after flattening :\", a)","9d2495e4":"# FLATTEN\n\n# returns the coppy of the original array\n# separate memory is allocated\n# changes wont be reflected in the original array","9f9e2c07":"b=np.array([[1,2],[3,4],[5,6]]) # original 2D array\nprint(b,\"\\n\")\nprint(b.flatten(order='F'))\nprint(\"The dimensions of the original array : \",b.ndim)\nprint(\"The dimensions after flattening : \",b.flatten().ndim)\nprint(\"The array after flattening :\", b)","c4926c7e":"a= np.arange(1,5).reshape(2,2)  # 2*2 matrix\nb= np.arange(1,3).reshape(2,1)  # 2*1 matrix","373ca663":"print(a,\"\\n\")\nprint(b)","c9268fc9":"a+b # same works for all operations performed on the array","208f4092":"ar_2d = np.array([[1,100,22],[7,6,0]])\nar_2d","7036124e":"ar_2d.sort()  # default  --> Horizontal Sorting\nar_2d","be0dc974":"ar_2d.sort(axis=1) # axis=1 --> horizontal sorting\nar_2d","5f9c950e":"ar_2d.sort(axis=0) # axis =0 --> vertical sorting\nar_2d","d24cdf2a":"a=np.arange(1,5).reshape(2,2)\nb=np.arange(1,5).reshape(2,2)\nprint(a,\"\\n\")\nprint(b)","d7c143a7":"# concat vertically\n\nnp.concatenate([a,b],axis=0)","d3f93a9a":"# concat horizontally\n\nnp.concatenate([a,b],axis=1)","0bb5d298":"# vstack  -> concatenation with axis =0 => condition=> same columns\n# same as concatening vertically\n\na=np.arange(1,10).reshape(3,3)\nb=np.arange(10,16).reshape(2,3)\nnp.vstack([a,b])","a0f8ea5b":"# hstack  -> concatenation with axis =1 => condition=> rows\n# same as concatening horizantally\n\na=np.arange(1,10).reshape(3,3)\nb=np.arange(10,16).reshape(3,2)\nnp.hstack([a,b])","5a0fe970":"# Horizontal Split\n\na=np.arange(10,16).reshape(2,3)\nnp.hsplit(a,3)","191c8cc2":"# Vertical Split\n\na2=np.arange(20,26).reshape(3,2)\nnp.vsplit(a2,3)","e7db84d4":"# row wise iteration\n\nar1=np.arange(1,10).reshape(3,3)\nprint(ar1)\nprint('*'*25)\nfor i in ar1:   # row wise iteration happens i.e each row is taken as an element\n    print(i)\n    print('-'*50)","825326f7":"# Transpose Matrix  ---> syntax: array_name.T\n\nar1.T","e9ce35ca":"# Columnwise iteration\n    \nfor i in ar1.T:  \n    print(i)\n    print(\"*\"*25)","cc529341":"# elementwise iteration\nar1=np.arange(1,10).reshape(3,3)\nprint(ar1)\nprint('*'*25)\nfor i in np.nditer(ar1):   # element wise iteration\n    print(i)\n    print('-'*50)","e535184a":"x1=np.array([1,2,3,4]).reshape(2,2)\nx=np.array([1,2,3,4])\n","97d28b36":"# mean\nprint(\"Mean:\", x1.mean())\nprint(\"Horizontal direction: \",x1.mean(axis=1))\nprint(\"Vertical direction: \",x1.mean(axis=0))\n\n\n# median\nprint(\"Median: \",np.median(x))\n\n# Standard deviation \nprint(\"STD: \", x.std())\n\n# LOG\nprint(\"LOG: \",np.log(x))    # log base exponential\nprint(\"Log to base10 : \", np.log10(x))    # log base 10\n\n# exponential\nprint(\"Exp: \", np.exp(x))  # e^1,e^2,e^3\n","a47c8cf2":"# Iterating in array","76666d97":"1. Hstack()  # np.hstack(list\/tuple of array)\n2. Vstack()  # np.vstack(list\/tuple of array)","4913041d":"# OPERATIONS PERFORMED ON A NUMPY ARRAY","50993f7a":"we can access the array elements using []","4a2ed779":"# STACKING","5da044ad":"# BROADCASTING","f2dc15de":"1.mean , median\n2.std,var\n3.log\n4.exponential\n5.Ravel, Flatten ---> to flatten the array\n","5460b5af":"1. Addition\n2. Subtraction\n3. Multiplication\n4. Division\n5. Matrix multiplication\n6. Modulo","bfb419eb":"# Zero, One and Identity matrix","b035b68f":"1. use for loop \n2. np.nditer()\n","b06a51a9":"# END","d75e15cb":"# SPECIAL FUNCTIONS","2d87a267":" Conditions:\n\n 1) Either row or column count shoudl be same\n 2) Either one of the non-matching shape should be 1.\n\nResult : If row matches, arithmetic operation happen row wise\nsimilary,If column matches, arithmetic operation happen column wise","f8fc452f":"1. hsplit - draw a vetrical line to split them equally\n2. vsplit - draw a horizontal line to split them equally","d3068403":"# Creating Array","be42d705":"# SPLIT","a7e252f1":" Syntax:\n variable_name = np.array(List)","f5a451ee":"# Accessing the array elements","9e2dacf6":"# SORTING","2880843c":"The functions used are:\n\n1.Ravel\n2.Flatten","b4d82274":"# CONCAT ARRAYS","ef0e4ed1":"# Flattening the array --> Converts n-D array to 1-D array "}}