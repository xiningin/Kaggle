{"cell_type":{"dd17e1da":"code","731da361":"code","bf0a5286":"code","c42ad99a":"code","3c14b0af":"code","53623ef2":"code","c0290e9f":"code","94da9a56":"code","945bc422":"code","426a388a":"code","dd67b7cf":"code","32ed5f70":"code","2534e0c1":"code","60b867e8":"code","34eaa4b0":"code","bebb844f":"code","663ebe8f":"code","1cedef39":"code","7f32e6e3":"code","c4cc028f":"code","f8208efb":"code","d4122a05":"code","9ffaf933":"code","55b5f612":"code","3280f21f":"code","53fb692c":"code","4f958f0c":"code","d62bc708":"code","4d5ac549":"code","25760d91":"code","9e7fe2a3":"code","bacf4a73":"code","26da63f4":"code","e8dae19b":"markdown","43b4d01e":"markdown","1fad02f2":"markdown","f09e9f4a":"markdown","4ff34057":"markdown","947c2c20":"markdown","a69d674d":"markdown","e27c9764":"markdown","adb62a08":"markdown","74575f6a":"markdown"},"source":{"dd17e1da":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nnp.random.seed(2021)","731da361":"# !pip install xlrd\n!pip install openpyxl  # for loading pseudolabels in .xlsx format","bf0a5286":"train_data = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntrain_data.head()","c42ad99a":"train_data.shape","3c14b0af":"test_data = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\ntest_data.head()","53623ef2":"test_data.shape","c0290e9f":"sample_sub = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\nsample_sub.head()","94da9a56":"sample_sub.shape","945bc422":"# Pseudolabels from true dataset \npseudolabels_true = pd.read_excel('\/kaggle\/input\/air-quality-time-series-data-uci\/AirQualityUCI.xlsx')\npseudolabels_true = pseudolabels_true.iloc[7110:].reset_index(drop = True)\npseudolabels_true.rename({'CO(GT)': 'target_carbon_monoxide',\n                          'C6H6(GT)': 'target_benzene',\n                          'NOx(GT)': 'target_nitrogen_oxides'},\n                         axis = 1, inplace = True)\npseudolabels_true.head(5)","426a388a":"pseudolabels_preds = pd.read_csv('..\/input\/tps-lightautoml-baseline-with-pseudolabels\/lightautoml_with_pseudolabelling_kernel_version_15.csv')","dd67b7cf":"pseudolabels_preds.shape","32ed5f70":"test_data['target_carbon_monoxide'] = np.where(pseudolabels_true['target_carbon_monoxide'].values >= 0, \n                                               pseudolabels_true['target_carbon_monoxide'].values, \n                                               pseudolabels_preds['target_carbon_monoxide'].values)\ntest_data['target_benzene'] = np.where(pseudolabels_true['target_benzene'].values >= 0, \n                                       pseudolabels_true['target_benzene'].values, \n                                       pseudolabels_preds['target_benzene'].values)\ntest_data['target_nitrogen_oxides'] = np.where(pseudolabels_true['target_nitrogen_oxides'].values >= 0, \n                                       pseudolabels_true['target_nitrogen_oxides'].values, \n                                       pseudolabels_preds['target_nitrogen_oxides'].values)\n    \ntest_data.head(5)","2534e0c1":"ALL_DF = pd.concat([train_data, test_data]).reset_index(drop = True)\nprint(ALL_DF.shape)","60b867e8":"# Feature engineering func from Remek Kinas kernel with MLJAR (https:\/\/www.kaggle.com\/remekkinas\/mljar-code-minimal) - do not forget to upvote his kernel\n    \nimport math\n\ndef pb_add(X):\n    X['day'] = X.date_time.dt.weekday\n    is_odd = (X['sensor_4'] < 646) & (X['absolute_humidity'] < 0.238)\n    X['is_odd'] = is_odd\n    diff = X['date_time'] - min(X['date_time'])\n    trend = diff.dt.days\n    X['f1s'] = np.sin(trend * 2 * math.pi \/ (365 * 1)) \n    X['f1c'] = np.cos(trend * 2 * math.pi \/ (365 * 1))\n    X['f2s'] = np.sin(2 * math.pi * trend \/ (365 * 2)) \n    X['f2c'] = np.cos(2 * math.pi * trend \/ (365 * 2)) \n    X['f3s'] = np.sin(2 * math.pi * trend \/ (365 * 3)) \n    X['f3c'] = np.cos(2 * math.pi * trend \/ (365 * 3)) \n    X['f4s'] = np.sin(2 * math.pi * trend \/ (365 * 4)) \n    X['f4c'] = np.cos(2 * math.pi * trend \/ (365 * 4)) \n    X['fh1s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh1c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh2s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh2c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh3s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    X['fh3c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    \n    sensor_features = [\n        'deg_C', \n        'relative_humidity', 'absolute_humidity', \n        'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5' ]\n    \n    lags = [-1, -4, -24, -7 * 24]  \n    for sensor_feature in sensor_features:\n        this = X[sensor_feature]\n\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(lag)}b'\n            this_f = X[sensor_feature].shift(lag)\n            X[feature] = (this_f - this).fillna(0)\n        # look forwards\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(-lag)}f'\n            this_f = X[sensor_feature].shift(-lag)\n            X[feature] = (this_f - this).fillna(0)\n            \n    return X\n\nALL_DF['date_time'] = pd.to_datetime(ALL_DF['date_time'])\nALL_DF[\"hour\"] = ALL_DF[\"date_time\"].dt.hour\nALL_DF[\"working_hours\"] =  ALL_DF[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nALL_DF[\"is_weekend\"] = (ALL_DF[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nALL_DF['hr'] = ALL_DF.date_time.dt.hour * 60 + ALL_DF.date_time.dt.minute\nALL_DF['satday'] = (ALL_DF.date_time.dt.weekday==5).astype(\"int\")\nALL_DF[\"SMC\"] = (ALL_DF[\"absolute_humidity\"] * 100) \/ ALL_DF[\"relative_humidity\"]\nALL_DF.drop(columns = 'hour', inplace = True)\n\npb_add(ALL_DF)\n\nALL_DF['date_time'] = ALL_DF['date_time'].astype(str)","34eaa4b0":"ALL_DF.head()","bebb844f":"def create_target_feats(df):\n    for lag in [1, 4, 24, 7 * 24]:\n        for t in ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']:\n            df['{}_lag_{}'.format(t, lag)] = df[t].shift(lag)\n            df['{}_lag_m{}'.format(t, lag)] = df[t].shift(-lag)\n            df['diff_{}_{}'.format(t, lag)] = df['{}_lag_m{}'.format(t, lag)] - df['{}_lag_{}'.format(t, lag)]\n            df['div_{}_{}'.format(t, lag)] = df['{}_lag_m{}'.format(t, lag)] \/ df['{}_lag_{}'.format(t, lag)]\ncreate_target_feats(ALL_DF)","663ebe8f":"train_data, test_data = ALL_DF.iloc[:(len(ALL_DF) - len(test_data)), :], ALL_DF.iloc[(len(ALL_DF) - len(test_data)):, :]\nprint(train_data.shape, test_data.shape)\ntrain_data.tail(5)","1cedef39":"test_data.tail()","7f32e6e3":"from fbprophet import Prophet\n\n\n# Add exogenous regressors\ndef add_regressors(m, train):\n    for reg in train.columns.values.tolist():\n        if reg not in [\"ds\", \"y\"]:\n            m.add_regressor(reg)    \n\ndef do_prophet(train, future):\n    m = Prophet(yearly_seasonality=False, weekly_seasonality=False, daily_seasonality=True,\n                changepoint_prior_scale=0.1, seasonality_prior_scale=10)\n    add_regressors(m, train)\n    m.fit(train)\n    #future = m.make_future_dataframe(periods=100,freq='H')\n    predict = m.predict(future)\n    fig1 = m.plot(predict)\n    fig2 = m.plot_components(predict)\n    return(predict)","c4cc028f":"train_NO = train_data.rename(columns={'date_time': 'ds', 'target_nitrogen_oxides': 'y'})\ntest_NO = test_data.rename(columns={'date_time': 'ds', 'target_nitrogen_oxides': 'y'})\npred_NO = do_prophet(train_NO.fillna(0), test_NO.fillna(0))","f8208efb":"train_CO = train_data.rename(columns={'date_time': 'ds', 'target_carbon_monoxide': 'y'})\ntest_CO = test_data.rename(columns={'date_time': 'ds', 'target_carbon_monoxide': 'y'})\n\npred_CO = do_prophet(train_CO.fillna(0), test_CO.fillna(0))","d4122a05":"train_B = train_data.rename(columns={'date_time': 'ds', 'target_benzene': 'y'})\ntest_B = test_data.rename(columns={'date_time': 'ds', 'target_benzene': 'y'})\n\npred_B = do_prophet(train_B.fillna(0), test_B.fillna(0))","9ffaf933":"pred_CO.loc[:,[\"ds\", \"yhat\"]].head()","55b5f612":"CO_subm = pred_CO.loc[:,[\"ds\", \"yhat\"]]\nCO_subm.rename(columns={\"yhat\": \"target_carbon_monoxide\",\n                        \"ds\": \"date_time\"}, inplace=True)\n\n\nB_subm = pred_B.loc[:,[\"ds\", \"yhat\"]]\nB_subm.rename(columns={\"yhat\": \"target_benzene\",\n              \"ds\": \"date_time\"}, inplace=True)\n\nNO_subm = pred_NO.loc[:,[\"ds\", \"yhat\"]]\nNO_subm.rename(columns={\"yhat\": \"target_nitrogen_oxides\",\n                        \"ds\": \"date_time\"}, inplace=True)","3280f21f":"CO_subm.head(2)","53fb692c":"B_subm.head(2)","4f958f0c":"NO_subm.head(2)","d62bc708":"subm = pd.merge(CO_subm, B_subm, left_on='date_time', right_on='date_time')\nsubm = pd.merge(subm, NO_subm, left_on='date_time', right_on='date_time')","4d5ac549":"subm.head(3)","25760d91":"print(subm.isnull().sum().sum())","9e7fe2a3":"print(subm[subm['target_carbon_monoxide'] < 0]['target_carbon_monoxide'].count())\nprint(subm[subm['target_benzene'] < 0]['target_benzene'].count())\nprint(subm[subm['target_nitrogen_oxides'] < 0]['target_nitrogen_oxides'].count())","bacf4a73":"subm['target_carbon_monoxide'] = np.where(subm['target_carbon_monoxide'].values >= 0, \n                                          subm['target_carbon_monoxide'].values, \n                                          0)\nsubm['target_carbon_monoxide'] = np.where(subm['target_carbon_monoxide'].values >= 0, \n                                          subm['target_carbon_monoxide'].values, \n                                          0)\nsubm['target_carbon_monoxide'] = np.where(subm['target_carbon_monoxide'].values >= 0, \n                                          subm['target_carbon_monoxide'].values, \n                                          0)","26da63f4":"subm.to_csv('prophet_pseudolabels_featEng_submission.csv', index=False)","e8dae19b":"Thanks to Alexander Ryzhkov for [this notebook](https:\/\/www.kaggle.com\/alexryzhkov\/tps-lightautoml-baseline-with-pseudolabels\/notebook).","43b4d01e":"## Split data into training and testing sets","1fad02f2":"### Some feature engineering\n\nThanks Remek Kinas for [your notebook](https:\/\/www.kaggle.com\/remekkinas\/mljar-code-minimal).","f09e9f4a":"## Load data","4ff34057":"### Load pseudolabels","947c2c20":"## Gather predictions for submission","a69d674d":"Cannot have negative values for the targets.","e27c9764":"### Hi ha una variable que t\u00e9 un comporament diferent a partir d'una data. Quina? Entrenar nom\u00e9s a partir d'aquella data.","adb62a08":"## Prophet setup","74575f6a":"## Obtain predictions for each target"}}