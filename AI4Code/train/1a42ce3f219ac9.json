{"cell_type":{"08ae5500":"code","41453fa3":"code","b458b89b":"code","633d62b1":"code","83b48786":"code","a331a34b":"code","6220d5f5":"code","9cd3bd7f":"markdown","9df1b8e1":"markdown","d8b71158":"markdown","527baa60":"markdown","fea3984d":"markdown"},"source":{"08ae5500":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error as MSE\nfrom tensorflow.random import set_seed ","41453fa3":"np.random.seed(37)\nset_seed(37)","b458b89b":"data = np.load('..\/input\/houseprices-preprocessing\/processed.npy')\ntrain = data[:1460]\ntest = data[1460:]\ntrain_targets = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', usecols=['SalePrice']).to_numpy()\ntest_ids = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', usecols=['Id']).to_numpy()","633d62b1":"opt = Adam(learning_rate=0.01)\nmodel = Sequential()\n\nmodel.add(Dense(128, input_dim=train.shape[1], activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='linear'))\n\nmodel.compile(loss='mse', optimizer=opt, metrics=['mse', 'mae'])\nhistory = model.fit(train, train_targets, epochs=100, validation_split=0.2, \n                    verbose=False, use_multiprocessing=True)","83b48786":"history_df = pd.DataFrame(history.history)\nplt.plot(history_df['loss'], label='loss')\nplt.plot(history_df['val_loss'], label='val_loss')\nprint(\"val_mae = \", list(history_df[\"val_mae\"])[-1])\nplt.xlabel(\"epochs\")\nplt.legend()\nplt.show()","a331a34b":"y_pred = model.predict(train).flatten()\nmn = 0\nmx = 800000\nplt.figure(figsize=(7,7))\na = plt.axes(aspect='equal')\nplt.scatter(train_targets, y_pred)\nplt.xlabel('True values')\nplt.ylabel('Predicted values')\nplt.title('Actual vs predicted values')\nplt.xlim([mn, mx])\nplt.ylim([mn, mx])\nplt.grid()\nplt.plot([mn, mx], [mn, mx])\nplt.show()","6220d5f5":"y_pred = model.predict(test).flatten()\nsub = pd.DataFrame({'Id': test_ids.reshape(1459), 'SalePrice': y_pred})\nsub.to_csv('submission.csv', index=False) # score = 0.11783","9cd3bd7f":"## Configure and run learning model","9df1b8e1":"## Visualize learning curve","d8b71158":"## Visualize model fit","527baa60":"## Import processed data and re-split into train & test","fea3984d":"## Create submission"}}