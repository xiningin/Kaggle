{"cell_type":{"c788aa5a":"code","1a07b323":"code","7bb26824":"code","089d1864":"code","4cfda115":"code","1e751e48":"code","1ce450d3":"code","7076b8fd":"code","efa2fb4f":"code","fc027075":"code","4cd11827":"code","90f2a5e2":"code","e92a49a4":"code","7f6e6de0":"code","24114269":"code","bb52a62a":"code","5533ac8b":"code","3e952741":"code","ec562ef7":"code","854f5dbb":"code","7f1bc7b3":"code","35714851":"code","fc68ab68":"code","4c1755c4":"code","c1c8f378":"code","3667ca65":"code","2c7e9b87":"code","dd367d1e":"code","20a10fc4":"code","8b5f2e26":"code","4ff636b4":"code","0f6d6dc9":"code","5f6f2b8d":"code","ee47c856":"code","4706398c":"code","3071ae0a":"code","0304f019":"code","43b3dc23":"code","a7acb67f":"code","d88c2218":"code","e6842150":"code","776fe94c":"code","046cfe9c":"code","2cd3d97a":"code","8118e166":"code","a69f283a":"code","e311bbaa":"code","e02fed24":"code","1dad5eed":"code","0edcd7d9":"code","65c31206":"code","aa9d7dce":"code","1dbb740b":"code","bb564e8d":"code","858f4c73":"code","6182beb7":"code","4a6a9ca0":"code","ddfbcfd8":"code","abae6523":"code","32892550":"code","dd09271a":"code","0e1ed266":"code","8497f02f":"code","08169aad":"code","39aa0a4c":"code","b1ede617":"code","69aabf0c":"code","371dd066":"code","e049a9f3":"code","8de67cbc":"code","9b79a906":"code","c70de2a7":"code","ae235754":"markdown","04a10d61":"markdown","5174336d":"markdown","40af250a":"markdown","77801c77":"markdown","31b6acb4":"markdown","ae95c229":"markdown","c62dccb9":"markdown","c6f76aa3":"markdown","92d3089a":"markdown","2529740c":"markdown","ebbdcb1b":"markdown","d0b2890d":"markdown","e85cf890":"markdown","c61bd36f":"markdown","6cfa6126":"markdown","24a64e5b":"markdown","b7af2e23":"markdown","695f541a":"markdown","4380bde5":"markdown","c52b9960":"markdown","820448f6":"markdown","ce84ccc0":"markdown","c531ad43":"markdown","8f7d1a58":"markdown","492ff866":"markdown","269997a3":"markdown","73e34157":"markdown","d1e4d676":"markdown","1415d970":"markdown","cdf31eae":"markdown","ac17a203":"markdown","fbcef382":"markdown","031b8317":"markdown","698fd370":"markdown","6318926f":"markdown","4c8e4d91":"markdown","c6339395":"markdown","189e9eb7":"markdown","909eb7a4":"markdown","2633d03e":"markdown","2c2dd85d":"markdown","3c6861dd":"markdown","46495f6c":"markdown"},"source":{"c788aa5a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.svm import SVC\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a07b323":"data = pd.read_csv(\"..\/input\/electionfinance\/CandidateSummaryAction1.csv\")","7bb26824":"data.head()","089d1864":"data.shape\n","4cfda115":"#first, visualize missing values\nimport missingno as msn\nmsn.matrix(data)","1e751e48":"#process data values\n\ndata['cov_sta_dat'] = pd.to_datetime(data['cov_sta_dat'])\ndata['cov_end_dat'] = pd.to_datetime(data['cov_end_dat'])\n\ndata['campaign_duration'] = (data['cov_end_dat'] - data['cov_sta_dat']).dt.days","1ce450d3":"#create a function to check all columns with missing data greater than 90% and drop them\n\ndef process_missing_data(data, threshold, inplace_value):\n    #create a list to hold columns with missing value above threshold\n    drop_cols = []\n    \n    #create a variable to store all columns in the dataframe\n    all_cols = data.columns\n    \n    #calculate all columns with missing values percentage greater than the threshold\n    missing_percentage = (data[all_cols].isna().sum()\/len(data))*100\n    \n    #create a dataframe to store all candidate columns and their percentage\n    missing_df = pd.DataFrame({\"cols\":all_cols, \"percentage\":missing_percentage})\n    \n    #check for threshold condition\n    missing_filtered = missing_df[missing_df['percentage'] >= threshold] \n    drop_cols.append(missing_filtered[\"cols\"].tolist())\n    \n    #drop candidate columns\n    drop_cols = drop_cols[0]\n    data.drop(columns=drop_cols, inplace= inplace_value)\n    \n    return data.shape\n","7076b8fd":"#call function on data\nprocess_missing_data(data=data, threshold=90, inplace_value=True)","efa2fb4f":"data['can_off'].value_counts(normalize=True, sort=True) * 100","fc027075":"#first, convert the net_con column to a float data type and modify data inplace\ndef converter(data, data_col):\n    value = data[data_col].str.replace('$','').str.replace(',','').str.replace('(','-').str.replace(')','').astype('float32')\n    data[data_col] = value\n    return data.head()\n\n#call the function on the net_con feature\nconverter(data=data, data_col=\"net_ope_exp\")","4cd11827":"data['winner'] = data['winner'].fillna('N')","90f2a5e2":"H_df = data.loc[data['can_off'] == \"H\"] \nS_df = data.loc[data['can_off'] == \"S\"]\nP_df = data.loc[data['can_off'] == \"P\"]","e92a49a4":"#check the shape of the data\n\nprint(f'The shape of the House of assembly data is {H_df.shape}')\nprint(f'The shape of the senate data is {S_df.shape}')\nprint(f'The shape of the presidential data is {P_df.shape}')","7f6e6de0":"Amt_per_sta_ds = H_df.groupby(['can_off_sta', 'can_off_dis'])['net_ope_exp'].sum().to_frame(name = \"total_dis_sum\").reset_index()","24114269":"Amt_per_sta_ds.head()","bb52a62a":"#visualize the state with high spending\n\nplt.figure(figsize=(20,10))\n\nax = sns.barplot(x=\"can_off_sta\", y=\"total_dis_sum\", data=Amt_per_sta_ds)","5533ac8b":"mt_comp = H_df.loc[H_df['can_off_sta'] == 'MT']\nmt_comp","3e952741":"ax = sns.barplot(x='can_nam', y='net_ope_exp', hue = 'winner',data=mt_comp)","ec562ef7":"mt_comp","854f5dbb":"ax = sns.barplot(x='can_nam', y='campaign_duration',hue='winner', data=mt_comp)","7f1bc7b3":"competitors = H_df.groupby(['can_off_sta', 'can_off_dis'])['can_id'].count().to_frame(name = \"num_of_comp\").reset_index()\n#eliminate data points where num_of_comp <= 1\n#this means that these positions are unopposed\ncompetitors = competitors[competitors['num_of_comp'] > 1]","35714851":"competitors.head()","fc68ab68":"plt.figure(figsize=(20,10))\n\nax = sns.barplot(x=\"can_off_dis\", y=\"num_of_comp\", data=competitors)","4c1755c4":"al_comp = H_df.loc[H_df['can_off_sta'] == 'AL']\nal_comp.shape","c1c8f378":"plt.figure(figsize=(20,10))\nax = sns.barplot(x='can_id', y='net_ope_exp', hue = 'winner',data=al_comp)","3667ca65":"sns.set(rc={'figure.figsize':(12,8)})\nsns.set(style=\"white\", color_codes=True)\nsns.jointplot(x=H_df[\"net_ope_exp\"], y=H_df[\"votes\"], kind='kde', color=\"skyblue\")","2c7e9b87":"S_df.head()","dd367d1e":"prf1 = S_df['votes'].isna().count()\nprf2 =  len(S_df['votes'])\n\nprint(prf1)\nprint(prf2)","20a10fc4":"S_df.drop(columns='votes', inplace=True)","8b5f2e26":"S_df.head()","4ff636b4":"#first, we check amount spent per state \nAmt_per_sta_ds = S_df.groupby(['can_off_sta', 'can_off_dis'])['net_ope_exp'].sum().to_frame(name = \"total_dis_sum\").reset_index()","0f6d6dc9":"Amt_per_sta_ds.head()","5f6f2b8d":"#visualize to see the highest spending state\n\nplt.Figure(figsize=(20,10))\nax = sns.barplot(x='can_off_sta', y='total_dis_sum', data=Amt_per_sta_ds)","ee47c856":"#create the three dataframes\nfl_comp = S_df.loc[S_df['can_off_sta'] == 'FL']\npa_comp = S_df.loc[S_df['can_off_sta'] == 'PA']\nnv_comp = S_df.loc[S_df['can_off_sta'] == 'NV']","4706398c":"#check winners in FL\n\nax = sns.barplot(x='can_nam', y='net_ope_exp', hue='winner', data=fl_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)","3071ae0a":"fl_comp.head()","0304f019":"ax = sns.barplot(x='can_nam', y='campaign_duration', hue='winner', data=fl_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)","43b3dc23":"ax = sns.barplot(x='can_nam', y='net_ope_exp', hue='can_par_aff', data=fl_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)","a7acb67f":"fl_comp['can_par_aff'].value_counts(normalize=True, sort=True).plot()","d88c2218":"#check winners in PA\n\nax = sns.barplot(x='can_nam', y='net_ope_exp', hue='winner', data=pa_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)","e6842150":"\nplt.style.use('seaborn-white')\nplt.subplot(121)\nax = sns.barplot(x='can_nam', y='campaign_duration', hue='winner', data=pa_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")\n\n\nplt.subplot(122)\npa_comp['can_par_aff'].value_counts(normalize=True, sort=True).plot()\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"dominant party\")\n\n\n","776fe94c":"\nax = sns.barplot(x='can_nam', y='net_ope_exp', hue='can_par_aff', data=pa_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")\n","046cfe9c":"#check winners in PA\n\nax = sns.barplot(x='can_nam', y='net_ope_exp', hue='winner', data=nv_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)","2cd3d97a":"plt.style.use('seaborn-white')\nplt.subplot(121)\nax = sns.barplot(x='can_nam', y='campaign_duration', hue='winner', data=nv_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")\n\n\nplt.subplot(122)\nnv_comp['can_par_aff'].value_counts(normalize=True, sort=True).plot()\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"dominant party\")\n","8118e166":"ax = sns.barplot(x='can_nam', y='net_ope_exp', hue='can_par_aff', data=nv_comp)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")","a69f283a":"P_df.head()","e311bbaa":"P_df.shape","e02fed24":"#create dataframe grouped by total amount spent\nAmt_per_sta_ds = P_df.groupby(['can_nam', 'winner', 'can_par_aff', 'campaign_duration'])['net_ope_exp'].sum().to_frame(name = \"total_dis_sum\")","1dad5eed":"#sort result\nAmt_per_sta_ds = Amt_per_sta_ds.sort_values(by = ['total_dis_sum'], ascending=False).reset_index()","0edcd7d9":"#create visualization to reach an assumption on which section of the data points could be candidates to win the election\nAmt_per_sta_ds['total_dis_sum'].plot()\n","65c31206":"# select first 20 data points as candidates\nAmt_per_sta_ds = Amt_per_sta_ds.iloc[:20, :]","aa9d7dce":"Amt_per_sta_ds","1dbb740b":"#check winner\nax = sns.barplot(x='can_nam', y = 'total_dis_sum', hue='winner', data=Amt_per_sta_ds)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\n","bb564e8d":"plt.style.use('seaborn-white')\nplt.subplot(121)\nax = sns.barplot(x='can_nam', y='campaign_duration', hue='winner', data=Amt_per_sta_ds)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")\n\n\nplt.subplot(122)\nAmt_per_sta_ds['can_par_aff'].value_counts(normalize=True, sort=True).plot()\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"dominant party\")","858f4c73":"ax = sns.barplot(x='can_nam', y='total_dis_sum', hue='can_par_aff', data=Amt_per_sta_ds)\nplt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light',  \n)\nplt.title(\"campaign duration\")","6182beb7":"#create regression data\nRegression_data = data[['can_off', 'can_off_sta', 'can_off_dis', 'can_inc_cha_ope_sea', 'net_ope_exp', 'can_par_aff','campaign_duration','votes']]\n\n\n#create classification data\nClassification_data = data[['can_off', 'can_off_sta', 'can_off_dis', 'can_inc_cha_ope_sea', 'net_ope_exp', 'can_par_aff','campaign_duration','winner']]\n","4a6a9ca0":"Regression_data.isna().sum()\/len(Regression_data)","ddfbcfd8":"Classification_data.isna().sum()","abae6523":"from sklearn.impute import SimpleImputer\n\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_mode = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n\nClassification_data['can_off_dis'] = imp_mode.fit_transform(Classification_data[['can_off_dis']]).copy()\nClassification_data['can_inc_cha_ope_sea'] = imp_mode.fit_transform(Classification_data[['can_inc_cha_ope_sea']]).copy()\nClassification_data['net_ope_exp'] = Classification_data['net_ope_exp'].fillna(-99999999999999999999999).copy()\nClassification_data['can_par_aff'] = imp_mode.fit_transform(Classification_data[['can_par_aff']]).copy()","32892550":"Classification_data.isna().sum()","dd09271a":"Classification_data = Classification_data[Classification_data.can_par_aff != 'PPT']","0e1ed266":"#make respective dataframes\nH_model_data_cla = Classification_data.loc[Classification_data['can_off'] == 'H']\nP_model_data_cla = Classification_data.loc[Classification_data['can_off'] == 'P']\nS_model_data_cla = Classification_data.loc[Classification_data['can_off'] == 'S']","8497f02f":"from sklearn.model_selection import train_test_split\n\nX = H_model_data_cla.iloc[:,:-1]\ny = H_model_data_cla.iloc[:,-1]","08169aad":"# determine categorical and numerical features\n\n\n\nnumerical_ix = X.select_dtypes(include=['int64', 'float64']).columns\ncategorical_ix = X.select_dtypes(include=['object', 'bool']).columns\n\n\n# define the data preparation for the columns\nt = [('cat', OneHotEncoder(), categorical_ix), ('num', MinMaxScaler(), numerical_ix)]\ncol_transform = ColumnTransformer(transformers=t)","39aa0a4c":"# define base the model\n\nmodel = XGBClassifier(learning_rate=0.1,min_child_weight=100)\n# define the data preparation and modeling pipeline\npipeline = Pipeline(steps=[('prep',col_transform), ('m', model) ])","b1ede617":"X.isna().sum()","69aabf0c":"#divide data into train and test split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state=0)","371dd066":"pipeline.fit(X_train, y_train)","e049a9f3":"y_pred = pipeline.predict(X_val)","8de67cbc":"print(confusion_matrix(y_true=y_val, y_pred=y_pred))\nprint(f'accuracy of the base model on house of rep election is {accuracy_score(y_val, y_pred) * 100}%')","9b79a906":"def test_model_(models_dict, X_train, y_train, X_val, y_val):\n    \"\"\"\n    a function that takes in a dictionary of models along with train and test data\n    to calculate the f1_score and accuracy score of the built pipeline then return a dataframe as the output\n    \n    \"\"\"\n    metrics = {}\n    for i in models_dict:\n        model_name = str(i)\n        model = models_dict[i]\n        \n        pipeline = Pipeline(steps=[('prep',col_transform), ('m', model) ])\n        pipeline.fit(X_train, y_train)\n        test_pred = pipeline.predict(X_val)\n        metric_1 = accuracy_score(y_val, test_pred) * 100\n        metric_2 = f1_score(y_val, test_pred, average='weighted')\n        metrics[i] = metric_1, metric_2\n        \n    metrics_df = pd.DataFrame.from_dict(metrics, orient='index', columns=['Accuracy score', 'f1_score'])\n    return metrics_df\n        \n        \n","c70de2a7":"#create a dictionary of classification models\ncandidate_models = {'xgboost':XGBClassifier(), 'log_reg': LogisticRegression(), 'svm':SVC(), 'random forest': RandomForestClassifier() }\n\n#cal test_model_function\ntest_model_(candidate_models, X_train, y_train, X_val, y_val)","ae235754":"**Handle missing data in classification data**","04a10d61":"# **Check regression analysis possibility**","5174336d":"# **What is the data**","40af250a":"## Test pipeline and base model on House of rep data","77801c77":"## kindly upvote or comment, which ever you feel obliged to do \n## Also feel free to copy and reuse as you wish","31b6acb4":"**Observation**\n* research holds so we proceed to drop the votes feature in our dataframe\n","ae95c229":"**Observation**\n* MYSTERY SOLVED!!! Party affiliations solved the problem","c62dccb9":"# let's start by analyzing the house of representative data","c6f76aa3":"**Inference**\n* assumption fails. this can be a function of the coefficient of that variable ","92d3089a":"**Next, we seek to find out the number of candidates vying for a sit in a district(competitors) generally **","2529740c":"* here we can see that right off the box, the candidate with the highest contribution won the election, we will test the other assumption of investment time and party affiliation next\n","ebbdcb1b":"**Obeservation**\n* three states show high total money spent which are **FL, PA and WI**\n* analyze the winners of these three states to observe trends","d0b2890d":"**First, we see what offices the candidates are campaigning for**\n","e85cf890":"**observation**\n* we can see a variation in their party affiliations , lets check if they are from the majority or minority party for that state\n","c61bd36f":"**Insights**\n* **Article I, section 3 of the USA Constitution states that** \n* The Senate of the United States shall be composed of two Senators from each State, chosen by the Legislature thereof, for six Years; and each Senator shall have one Vote. Immediately after they shall be assembled in Consequence of the first Election, they shall be divided as equally as may be into three Classes.","6cfa6126":"# MODEL BUILDING\n\n* The features that we've analyzed to matter include\n    * net_ope_exp\n    * winner\n    * votes\n    * can_par_aff\n    * can_off\n    * can_off_dis\n    * can_off_sta\n    * can_inc_cha_ope_sea\n    * campaign_duration\n    \n* create two dataframes for classification and regression tasks\n    * create two subframes from the original frames for granularity of prediction\n        * Regression_data\n            * H_model_data_reg\n            * P_model_data_reg\n            * S_model_data_reg\n        * Classification_data\n            * H_model_data_cla\n            * P_model_data_cla\n            * S_model_data_cla\n","24a64e5b":"We can clearly see that the highest spending state in terms of house of reps election is the MT, let's now go further to analyze the state with the highest net_contribution","b7af2e23":"**Focus**\n* our aim is to check for a relationship in the finance and voting tournout so we proceed in line\n* by research the voters column of the dataframe should be empty as the election is not open to public voting\n\n**inference**\n* check to ascertain second focus","695f541a":"**Basically, there are three offices namely**\n* H : house of represenatative\n* S : senator\n* P : presidency\n\n**create three dataframes based on the candidate office**","4380bde5":"**Observation**\n* the highest spender wasn't the winner, to check why this is happening, we inspect with our investment analogy and check how long they have been campaigning for\n","c52b9960":"**by this inspection, we can see the concentration of where the most money is spent and the expected voters**","820448f6":"# Prepare data for analysis\n1. drop all columns with above 90% missing value","ce84ccc0":"# Build classification pipeline","c531ad43":"# Haven explored the house of rep dataset, we move to explore senetorial campaigns","8f7d1a58":"**Observation**\n* The investment assumption holds","492ff866":"**Inference**\n* approximately 80% of the votes data is missing, this will make regression analysis inaccurate, therefore, we will not look into extracting data for regression analysis","269997a3":"**Observation**\n1. **we can see the state has just one district with only two competitors, yet they have the higest rate of spending this can be due to a various reasons that are sadly not contained in the data. suggestions include:**\n    * The cost of getting things done in that state is relatively high in comparison to other states\n    * Being in direct competition creates just one collision point for the candidates \n2. **we can also see that the candidate with the highest spending won the election**\n\n\n    ","73e34157":"# Proceed to check classification possibility","d1e4d676":"remove a single uninformative data point that affects the pipeline","1415d970":"# Presidential Data Analysis","cdf31eae":"**Observation** \n1. data contains messy features \n2. create a function to deal with features with high percentage of missing data","ac17a203":"**Observation**\n* we still come short in our investment idealogy, next we check for the number of party affiliation in the respective district","fbcef382":"### Before generalizing, let's pick a state at random and test the result of our early analysis","031b8317":"# Create function to test different models","698fd370":"**Observation**\n* holds to our first assumption, as we can see\n* test investment and party assumption","6318926f":"**Observation**\n* here we can see every district represented in our dataset clearly","4c8e4d91":"**Inference**\n* assumption on the relationship between how much a candidate spends on election and winning holds\n* visualize to see what the range of highest amount spent is","c6339395":"**inference**\n1. we are making use of the net_con feature as this is the feature that represents the total expenses of each candidate leading up to the election period","189e9eb7":"**observation**\n* first assumption did not hold, lets find if our data has the ability to give insight to why this is by analyzing the campaign duration and party affiliation","909eb7a4":"**Observation**\n* we have our inlier insight as we can see, the party affiliation plays a big role in the voting outcome","2633d03e":"we can clearly see that for state MT with just one district, the higest spender won the vote, however, before we conclude, let's check how long each candidate campaigned for.\n* reason behind this is the fact that time plays a role in the maturity of an investment. so assuming the campaign is the investemnt, net_con is the invested capital, how long will it take for the said investement to mature. \n* naturally, the longer you keep your investment, the higher your profit gets, therefore, it should hold that the longer you campaign, the more likely it is for you to win, we check if this assumption holds","2c2dd85d":"**Since we are interested in the finances of the campaign, lets see how much is spent on campaign in each district in a state**\n","3c6861dd":"# **Explore the data**","46495f6c":"**replace all the nan columns in the winner with N as they represent the losers**"}}