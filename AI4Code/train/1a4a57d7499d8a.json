{"cell_type":{"fcb0d75d":"code","49069225":"code","fe48e5eb":"code","fe40f663":"code","f9b8af5a":"code","278062cc":"code","d9e9998e":"code","be340c51":"code","ceedbda9":"code","72f033e6":"code","99c7c86e":"code","ec6c243a":"code","dc50be6b":"code","19eb044e":"code","63778e16":"code","8b7ea9ee":"code","163db145":"markdown","71d54afa":"markdown","922bb3c3":"markdown","5b6a2aa1":"markdown","c45a61c5":"markdown","518ecc0c":"markdown"},"source":{"fcb0d75d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","49069225":"dataset = pd.read_csv('..\/input\/suggestions\/Market_Basket_Optimisation.csv', header=None)\n\n#turning all items into columns\nitems = list(set(dataset.values.flatten()))\n\n#removing NULL value which came from flattening the dataframe\nitems.remove(np.nan)\n\n#stripping items strings of spaces & converting all to lower cases\nfor i in range(0,len(items)):\n    items[i] = items[i].strip().lower()\nitems = list(set(items))\n\n#creating new dataframe with items as columns and all values of customer's items as '0' initially\ndata = pd.DataFrame([[0]*len(items)]*dataset.shape[0],columns = items)\n\n#Swichting all values of items to '1' for each item bought by customer\nfor i in range(len(dataset.values)):\n    a=[]\n    a = list(set(dataset.iloc[i,:].values))\n    if np.nan in a: a.remove(np.nan)\n    for j in a:\n        data.loc[i,j]=1\n        \ndata.drop(columns=[' asparagus'],axis=1,inplace=True)","fe48e5eb":"dataset.head()","fe40f663":"data.head()","f9b8af5a":"#validating '1' values of 2nd row manually\nlist(data.iloc[4,:].values).count(1)","278062cc":"dataset.describe()","d9e9998e":"dataset.info()\n#dataset.isna().sum()\n#dataset.isnull().sum()","be340c51":"dataset = pd.read_csv('..\/input\/suggestions\/Market_Basket_Optimisation.csv', header=None)\n\ndataset=dataset.values.tolist()\ndata=[]\nfor i in dataset:\n    i = list(set(i))\n    if np.nan in i: i.remove(np.nan)\n    data.append(i)\n\nfrom mlxtend.preprocessing import TransactionEncoder\nte = TransactionEncoder()\ndf = pd.DataFrame(te.fit_transform(data), columns=te.columns_)\ndf","ceedbda9":"#creating association rules\nfrom mlxtend.frequent_patterns import apriori, association_rules\nrules = apriori(df, min_support=0.003, use_colnames=True, verbose=1)","72f033e6":"rules","99c7c86e":"frequent_itemsets = apriori(df, min_support=0.01, use_colnames=True)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets","ec6c243a":"frequent_itemsets[ (frequent_itemsets['length'] >= 2) &\n                   (frequent_itemsets['support'] >= 0.015) ]","dc50be6b":"frequent_itemsets[ frequent_itemsets['itemsets'] == {'pasta', 'escalope'} ]","19eb044e":"#!pip install apyori","63778e16":"# Apriori\n\n# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Data Preprocessing\ndataset = pd.read_csv('..\/input\/suggestions\/Market_Basket_Optimisation.csv', header = None)\ntransactions = []\nfor i in range(0, 7501):\n    transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])\n\n# Training Apriori on the dataset\nfrom apyori import apriori\nrules = apriori(transactions, min_support = 0.003, min_confidence = 0.2, min_lift = 3, min_length = 2)\n\n# Visualising the results\nresults = list(rules)","8b7ea9ee":"results[:][1]","163db145":"Manual Data Preprocessing","71d54afa":"In this method we have to first define the class and functions explicitly or import its file keeping it in the same folder.\nA better way is to install it manually by copying 'Apyori.py' file into the bin folder of python where all the imports are kept.","922bb3c3":"Though the results of this library are not so good as it is less flexible and have less parameters to control.","5b6a2aa1":"# **1. Apriori Association Rule Learning through 'mlxtend' library**","c45a61c5":"Another method of preprocessing dataset through 'mlxtend' preprocessing library","518ecc0c":"# **2. Apriori ARL through 'APYORI' class defined below**"}}