{"cell_type":{"2b71aa9d":"code","90397707":"code","10bd4447":"code","51061c70":"code","e2330876":"code","0f762fbf":"code","1237d53b":"code","25495253":"code","a52760d7":"code","304e30ed":"code","02ed5e35":"code","5247547b":"code","b3a7f6d8":"code","27d2c4da":"code","1cd6eb10":"code","29cc1ec3":"code","c425c961":"code","b7a060d0":"code","efbaf7f2":"code","ee004f28":"code","abcc2c63":"code","dafe8380":"code","05590470":"code","8d6ae6a6":"code","faff2c99":"code","2295c64b":"code","2b0e96cb":"code","e658a861":"code","1a0bb9d6":"code","2712b334":"code","d5705fb8":"code","3e7218aa":"code","cc8be518":"code","1e1ba1e2":"code","f4062402":"code","aee0ea11":"code","7eba5aa0":"code","131b4c06":"code","48f5ec8c":"code","8b520cd8":"code","f3d6b28e":"code","20827711":"code","46a316f1":"code","c37612b7":"code","41fd4145":"code","c7b8ee3b":"markdown","c1fcc4bc":"markdown","d3b418d7":"markdown","9447b115":"markdown","1bb24142":"markdown"},"source":{"2b71aa9d":"#------------------------------------------Data Preprocessing--------------------------------------------------\n#importing the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np \nimport pandas as pd ","90397707":"#importing the dataset\ndataset = pd.read_csv('..\/input\/car-data\/CarPrice_Assignment.csv')","10bd4447":"dataset.shape","51061c70":"dataset.info()","e2330876":"dataset.describe()","0f762fbf":"#Data Cleaning\n#Splitting company name from CarName column\n\nCompanyName = dataset['CarName'].apply(lambda x : x.split(' ')[0])\ndataset.insert(3,\"CompanyName\",CompanyName)\ndataset.drop(['CarName'],axis=1,inplace=True)\ndataset.head()","1237d53b":"dataset.CompanyName.unique()","25495253":"#Correcting the wrong spellings\ndataset.CompanyName = dataset.CompanyName.str.lower()\n\ndef replace_name(a,b):\n    dataset.CompanyName.replace(a,b,inplace=True)\n\nreplace_name('maxda','mazda')\nreplace_name('porcshce','porsche')\nreplace_name('toyouta','toyota')\nreplace_name('vokswagen','volkswagen')\nreplace_name('vw','volkswagen')\n\ndataset.CompanyName.unique()","a52760d7":"#Checking for duplicates\ndataset.loc[dataset.duplicated()]","304e30ed":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(dataset.price)\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=dataset.price)\n\nplt.show()","02ed5e35":"dataset.price.describe(percentiles = [0.25,0.50,0.75,0.85,0.90,1])","5247547b":"plt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = dataset.CompanyName.value_counts().plot(kind='bar')\nplt.title('Companies Histogram')\nplt1.set(xlabel = 'Car company', ylabel='Frequency of company')\n\nplt.subplot(1,3,2)\nplt1 = dataset.fueltype.value_counts().plot(kind='bar')\nplt.title('Fuel Type Histogram')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')\n\nplt.subplot(1,3,3)\nplt1 = dataset.carbody.value_counts().plot(kind='bar')\nplt.title('Car Type Histogram')\nplt1.set(xlabel = 'Car Type', ylabel='Frequency of Car type')\n\nplt.show()","b3a7f6d8":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Symboling Histogram')\nsns.countplot(dataset.symboling, palette=(\"bright\"))\n\nplt.subplot(1,2,2)\nplt.title('Symboling vs Price')\nsns.boxplot(x=dataset.symboling, y=dataset.price, palette=(\"bright\"))\n\nplt.show()","27d2c4da":"plt.figure(figsize=(25, 6))\n\ndf = pd.DataFrame(dataset.groupby(['CompanyName'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Company Name vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['fueltype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Fuel Type vs Average Price')\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Car Type vs Average Price')\nplt.show()","1cd6eb10":"plt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Engine Type Histogram')\nsns.countplot(dataset.enginetype, palette=(\"bright\"))\n\nplt.subplot(1,2,2)\nplt.title('Engine Type vs Price')\nsns.boxplot(x=dataset.enginetype, y=dataset.price, palette=(\"bright\"))\n\nplt.show()\n\ndf = pd.DataFrame(dataset.groupby(['enginetype'])['price'].mean().sort_values(ascending = False))\ndf.plot.bar(figsize=(8,6))\nplt.title('Engine Type vs Average Price')\nplt.show()","29cc1ec3":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Door Number Histogram')\nsns.countplot(dataset.doornumber, palette=(\"bright\"))\n\nplt.subplot(1,2,2)\nplt.title('Door Number vs Price')\nsns.boxplot(x=dataset.doornumber, y=dataset.price, palette=(\"bright\"))\n\nplt.show()\n\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Aspiration Histogram')\nsns.countplot(dataset.aspiration, palette=(\"bright\"))\n\nplt.subplot(1,2,2)\nplt.title('Aspiration vs Price')\nsns.boxplot(x=dataset.aspiration, y=dataset.price, palette=(\"bright\"))\n\nplt.show()","c425c961":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n    plt.title(x+' Histogram')\n    sns.countplot(dataset[x],palette=(\"bright\"))\n    plt.subplot(4,2,(fig+1))\n    plt.title(x+' vs Price')\n    sns.boxplot(x=dataset[x], y=dataset.price, palette=(\"bright\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('enginelocation', 1)\nplot_count('cylindernumber', 3)\nplot_count('fuelsystem', 5)\nplot_count('drivewheel', 7)\n\nplt.tight_layout()","b7a060d0":"def scatter(x,fig):\n    plt.subplot(5,2,fig)\n    plt.scatter(dataset[x],dataset['price'])\n    plt.title(x+' vs Price')\n    plt.ylabel('Price')\n    plt.xlabel(x)\n\nplt.figure(figsize=(10,20))\n\nscatter('carlength', 1)\nscatter('carwidth', 2)\nscatter('carheight', 3)\nscatter('curbweight', 4)\n\nplt.tight_layout()","efbaf7f2":"def pp(x,y,z):\n    sns.pairplot(dataset, x_vars=[x,y,z], y_vars='price',height=4, aspect=1, kind='scatter')\n    plt.show()\n\npp('enginesize', 'boreratio', 'stroke')\npp('compressionratio', 'horsepower', 'peakrpm')\npp('wheelbase', 'citympg', 'highwaympg')","ee004f28":"# Creating a new feature based on inference from above plots\ndataset['fueleconomy'] = (0.60 * dataset['citympg']) + (0.40 * dataset['highwaympg'])\n\ndataset[\"brand_category\"] = dataset['price'].apply(lambda x : \"Budget\" if x < 10000 \n                                                     else (\"Mid_Range\" if 10000 <= x < 20000\n                                                           else (\"Luxury\")))","abcc2c63":"plt.figure(figsize=(8,6))\n\nplt.title('Fuel economy vs Price')\nsns.scatterplot(x=dataset['fueleconomy'],y=dataset['price'],hue=dataset['drivewheel'])\nplt.xlabel('Fuel Economy')\nplt.ylabel('Price')\n\nplt.show()\nplt.tight_layout()\n\nplt1 = sns.scatterplot(x = 'horsepower', y = 'price', hue = 'brand_category', data = dataset)\nplt1.set_xlabel('Horsepower')\nplt1.set_ylabel('Price of Car ($)')\nplt.show()","dafe8380":"attributes = dataset[['fueltype', 'aspiration', 'carbody', 'drivewheel', 'wheelbase', 'carlength', 'carwidth', 'curbweight', 'enginetype'\n       , 'enginesize',  'boreratio', 'horsepower', 'price', 'brand_category', 'fueleconomy']]\n\nattributes.head()","05590470":"#visualising most of the attributes\nplt.figure(figsize=(15,15))\nsns.pairplot(attributes)\nplt.show()","8d6ae6a6":"#Droppping non-important features according to the plots\ndataset = dataset.drop([\"highwaympg\"], axis = 1)\ndataset = dataset.drop([\"citympg\"], axis = 1)\ndataset = dataset.drop([\"car_ID\"], axis = 1)\ndataset = dataset.drop([\"doornumber\"], axis = 1)\ndataset = dataset.drop([\"cylindernumber\"], axis = 1)\ndataset = dataset.drop([\"enginelocation\"], axis = 1)","faff2c99":"#Handling Categorical Data\n# Defining the map function\ndef dummies(x,df):\n    temp = pd.get_dummies(df[x], drop_first = True)\n    df = pd.concat([df, temp], axis = 1)\n    df.drop([x], axis = 1, inplace = True)\n    return df\n\ndataset = dummies('CompanyName',dataset)\ndataset = dummies('fueltype',dataset)\ndataset = dummies('fuelsystem',dataset)\ndataset = dummies('aspiration',dataset)\ndataset = dummies('carbody',dataset)\ndataset = dummies('drivewheel',dataset)\ndataset = dummies('enginetype',dataset)\ndataset = dummies('brand_category',dataset)","2295c64b":"#Splitting into training and test set\nfrom sklearn.model_selection import train_test_split\nnp.random.seed(0)\ndf_train, df_test = train_test_split(dataset, train_size = 0.8, test_size = 0.2, random_state = 100)","2b0e96cb":"#Feature Scaling\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nnum_vars = ['wheelbase', 'curbweight', 'enginesize', 'boreratio', 'horsepower','fueleconomy','carlength','carwidth','price']\ndf_train[num_vars] = scaler.fit_transform(df_train[num_vars])","e658a861":"#Correlation using heatmap\nplt.figure(figsize = (30, 25))\nsns.heatmap(df_train.corr(), annot = True, cmap=\"flag\")\nplt.show()","1a0bb9d6":"#Dividing data into X and y variables\ny_train = df_train.pop('price')\nX_train = df_train","2712b334":"#Including RFE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport statsmodels.api as sm \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","d5705fb8":"lm = LinearRegression()\nlm.fit(X_train,y_train)\nrfe = RFE(lm, 10)\nrfe = rfe.fit(X_train, y_train)","3e7218aa":"X_train_rfe = X_train[X_train.columns[rfe.support_]]","cc8be518":"def build_model(X,y):\n    X = sm.add_constant(X) #Adding the constant\n    lm = sm.OLS(y,X).fit() # fitting the model\n    print(lm.summary()) # model summary\n    return X\n    ","1e1ba1e2":"def checkVIF(X):\n    vif = pd.DataFrame()\n    vif['Features'] = X.columns\n    vif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    vif['VIF'] = round(vif['VIF'], 2)\n    vif = vif.sort_values(by = \"VIF\", ascending = False)\n    return(vif)","f4062402":"X_train_new = build_model(X_train_rfe,y_train)","aee0ea11":"X_train_new = X_train_rfe.drop([\"hardtop\"], axis = 1)","7eba5aa0":"X_train_new = build_model(X_train_new,y_train)","131b4c06":"lm = sm.OLS(y_train,X_train_new).fit()\ny_train_price = lm.predict(X_train_new)\n# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms', fontsize = 20)                  # Plot heading \nplt.xlabel('Errors', fontsize = 18)   \n#Calculating the Variance Inflation Factor\ncheckVIF(X_train_new)","48f5ec8c":"#Scaling the test set\nnum_vars = ['symboling','wheelbase', 'curbweight', 'enginesize', 'boreratio','stroke','compressionratio','peakrpm', 'horsepower','fueleconomy','carlength','carwidth','carheight','price']\ndf_test[num_vars] = scaler.fit_transform(df_test[num_vars])","8b520cd8":"#Dividing into X and y\ny_test = df_test.pop('price')\nX_test = df_test\n","f3d6b28e":"\nX_train_new = X_train_new.drop('const',axis=1)\nX_test_new = X_test[X_train_new.columns]","20827711":"X_test_new = sm.add_constant(X_test_new)","46a316f1":"# Making predictions\ny_pred = lm.predict(X_test_new)","c37612b7":"from sklearn.metrics import r2_score \nr2_score(y_test, y_pred)\n","41fd4145":"#Evaluation\n\n# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)              # Plot heading \nplt.xlabel('y_test', fontsize=18)                          # X-label\nplt.ylabel('y_pred', fontsize=16)","c7b8ee3b":"**Inference**\n1. Sedan is the top car type prefered\n2. Number of gas fueled cars are more than diesel.\n3. Toyota seemed to be favored car company.","c1fcc4bc":"**Inference**\n1. ohc Engine type seems to be most preferred type.\n2. ohcv has the highest price range ","d3b418d7":"**Inference**\n1. The plot seemed to be right-skewed\n2. Large difference between the mean and the median of the price distribution","9447b115":"**Inference**\n1. It seems that the symboling with 0 and 1 values have high number of rows (i.e. They are most sold.)\n3. The cars with -1 symboling seems to be high priced","1bb24142":"**Car Price Prediction**\n\nProblem Statement:\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n1. Which variables are significant in predicting the price of a car\n2. How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large dataset of different types of cars across the Americal market.\n\n**Business Goal**\nYou are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.\n"}}