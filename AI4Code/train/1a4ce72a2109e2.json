{"cell_type":{"bca5e01f":"code","5787fb7f":"code","518cfd78":"code","8832cc6b":"code","ce3d4fe2":"code","958064ba":"code","357ef75f":"code","13cc67c7":"code","85fe830d":"code","904878e3":"code","7c17eb7a":"code","864010e2":"code","e8779995":"code","72909075":"code","d941c9e9":"code","07496594":"code","27221250":"code","7a55a5bc":"code","bef2d595":"code","8c75434c":"code","f6034ba3":"code","6ac3a0aa":"code","bda0a12d":"code","e6cbb136":"code","3c595c9a":"code","e0ae4cfb":"code","f8e43916":"code","384d5d78":"code","0805845c":"code","2ef64633":"code","5fdd4074":"code","e8e38e3b":"code","e3e4a117":"code","00f083fb":"code","f16c710d":"code","15a2f04d":"code","5157b706":"code","45ee8320":"markdown","838a1b34":"markdown","a141206d":"markdown","de40f33b":"markdown","ffecbb0a":"markdown","f5963092":"markdown","59efede2":"markdown","3a64b1ca":"markdown","bd8239b0":"markdown","66d2b938":"markdown","71c1b7e2":"markdown","c7f52f25":"markdown","13e3d0f9":"markdown","4de2032b":"markdown","82dec675":"markdown","6782c24f":"markdown","cc0387e9":"markdown","4de4ddbc":"markdown","d7977455":"markdown","fbb4e8e7":"markdown","99a077bd":"markdown","005f3e40":"markdown","826fea6f":"markdown","f27b5d96":"markdown","2dd84110":"markdown","4cc06ace":"markdown","9df2cec2":"markdown","ac977c23":"markdown"},"source":{"bca5e01f":"import pandas as pd\nimport numpy as np \nimport tensorflow as tf\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom imblearn.over_sampling import SMOTE\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense, Dropout, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.linear_model import LogisticRegression\n#from sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score ","5787fb7f":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")","518cfd78":"df.head()","8832cc6b":"df.describe()","ce3d4fe2":"df[\"Class\"].value_counts().plot(kind=\"bar\",color=\"red\")\nplt.title(\"counts\", size=20)\nplt.xlabel(\"class\", size = 18)","958064ba":"target = pd.DataFrame(df[\"Class\"].value_counts())\ntarget.style.background_gradient(cmap=\"Reds\")","357ef75f":"df.isnull().sum()","13cc67c7":"print (\"Fraud\")\nprint (df.Time[df.Class == 1].describe())\nprint ()\nprint (\"Normal\")\nprint (df.Time[df.Class == 0].describe())","85fe830d":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(12,4))\n\nbins = 50\n\nax1.hist(df.Time[df.Class == 1], bins = bins)\nax1.set_title('Fraud')\n\nax2.hist(df.Time[df.Class == 0], bins = bins)\nax2.set_title('Normal')\n\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Number of Transactions')\nplt.show()","904878e3":"print (\"Fraud\")\nprint (df.Amount[df.Class == 1].describe())\nprint ()\nprint (\"Normal\")\nprint (df.Amount[df.Class == 0].describe())","7c17eb7a":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(12,4))\n\nbins = 30\n\nax1.hist(df.Amount[df.Class == 1], bins = bins)\nax1.set_title('Fraud')\n\nax2.hist(df.Amount[df.Class == 0], bins = bins)\nax2.set_title('Normal')\n\nplt.xlabel('Amount ($)')\nplt.ylabel('Number of Transactions')\nplt.yscale('log')\nplt.show()","864010e2":"# df['Amount_max_fraud'] = 1\n# df.loc[df.Amount <= 2125.87, 'Amount_max_fraud'] = 0","e8779995":"f, (ax1, ax2) = plt.subplots(2, 1, sharex=True, figsize=(12,6))\n\nax1.scatter(df.Time[df.Class == 1], df.Amount[df.Class == 1])\nax1.set_title('Fraud')\n\nax2.scatter(df.Time[df.Class == 0], df.Amount[df.Class == 0])\nax2.set_title('Normal')\n\nplt.xlabel('Time (in Seconds)')\nplt.ylabel('Amount')\nplt.show()","72909075":"features = df.columns.values\n\ni = 0\nt0 = df.loc[df['Class'] == 0]\nt1 = df.loc[df['Class'] == 1]\n\nsns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(8,4,figsize=(16,28))\n\nfor f in features:\n    i += 1\n    plt.subplot(8,4,i)\n    sns.kdeplot(t0[f], bw=0.5,label=\"Class = 0\")\n    sns.kdeplot(t1[f], bw=0.5,label=\"Class = 1\")\n    plt.xlabel(f, fontsize=12)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='both', which='major', labelsize=12)\nplt.show()","d941c9e9":"plt.figure(figsize = (16,10))\nplt.title('Credit Card Transactions features correlation plot', size = 20)\ncorr = df.corr()\nsns.heatmap(corr,xticklabels=corr.columns,yticklabels=corr.columns,linewidths=.1,cmap=\"Greens\",fmt='.1f',annot=True)\nplt.show()","07496594":"x=df.drop(columns=[\"Class\"])\ny=df[\"Class\"]","27221250":"names=x.columns\nscaled_df = preprocessing.scale(x)\nscaled_df = pd.DataFrame(scaled_df,columns=names)","7a55a5bc":"scaled_df.head()","bef2d595":"x_train, x_test, y_train, y_test = train_test_split(scaled_df, y, test_size = 0.2, random_state = 66, shuffle = True, stratify = y)","8c75434c":"x_train.shape, x_test.shape","f6034ba3":"y_train.value_counts()","6ac3a0aa":"sm = SMOTE(random_state = 33)\nx_train_smote, y_train_smote = sm.fit_sample(x_train, y_train.ravel())","bda0a12d":"pd.Series(y_train_smote).value_counts().plot(kind=\"bar\")","e6cbb136":"lrm = LogisticRegression(solver='lbfgs')\nlrm.fit(x_train_smote, y_train_smote)\ntest_result = lrm.predict(x_test)","3c595c9a":"print('Accuracy score for Testing Dataset = ', accuracy_score(test_result, y_test))","e0ae4cfb":"cm=confusion_matrix(y_test, test_result)\ncm","f8e43916":"plt.figure(figsize=(8,6))\nsns.set(font_scale=1.2)\nsns.heatmap(cm, annot=True, fmt = 'g', cmap=\"Reds\", cbar = False)\nplt.xlabel(\"Predicted Class\", size = 18)\nplt.ylabel(\"Original Class\", size = 18)\nplt.title(\"LR Confusion Matrix\", size = 20)","384d5d78":"print('Recall: ', cm[0,0] \/ (cm[0,0]+cm[0,1]))\nprint('Precision: ', cm[0,0] \/ (cm[0,0]+cm[1,0]))\nprint('Accuracy: ', (cm[0,0]+cm[1,1]) \/ sum(sum(cm)))\nprint('F1 Score: ', 2*cm[0,0] \/ (2*cm[0,0]+cm[0,1]+cm[1,0]))","0805845c":"model = Sequential()\nmodel.add(Dense(x_train_smote.shape[1], activation = 'relu', input_dim = x_train_smote.shape[1]))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(36, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(36, activation = 'relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(1, activation = 'sigmoid'))","2ef64633":"model.compile(optimizer = keras.optimizers.Adam(lr=0.0001),\n              loss = 'binary_crossentropy')","5fdd4074":"early_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience = 10)","e8e38e3b":"model.fit(x=x_train_smote, y=y_train_smote, batch_size = 256, epochs=150,\n          validation_data=(x_test, y_test), verbose=1,\n          callbacks=[early_stop])\n\nmodel.summary()","e3e4a117":"evaluation_metrics=pd.DataFrame(model.history.history)\nevaluation_metrics.plot(figsize=(10,5))\nplt.title(\"Loss for Training and Validation\", size = 20)","00f083fb":"y_predict = model.predict_classes(x_test)","f16c710d":"nn_cm = confusion_matrix(y_test, y_predict)\nnn_cm","15a2f04d":"plt.figure(figsize=(8,6))\nsns.set(font_scale=1.2)\nsns.heatmap(nn_cm, annot=True, fmt = 'g', cmap=\"Blues\", cbar = False)\nplt.xlabel(\"Predicted Class\", size = 18)\nplt.ylabel(\"Original Class\", size = 18)\nplt.title(\"NN Confusion Matrix\", size = 20)","5157b706":"print('Recall: ', nn_cm[0,0] \/ (nn_cm[0,0]+nn_cm[0,1]))\nprint('Precision: ', nn_cm[0,0] \/ (nn_cm[0,0]+nn_cm[1,0]))\nprint('Accuracy: ', (nn_cm[0,0]+nn_cm[1,1]) \/ sum(sum(nn_cm)))\nprint('F1 Score: ', 2*nn_cm[0,0] \/ (2*nn_cm[0,0]+nn_cm[0,1]+nn_cm[1,0]))","45ee8320":"\u6bd4\u8f83\u5f02\u5e38\u4ea4\u6613\u4e0e\u6b63\u5e38\u4ea4\u6613\u989d\u5ea6\u7684\u5dee\u522b\u3002","838a1b34":"\u6d4b\u8bd5\u7ed3\u679c\u6df7\u6dc6\u77e9\u9635 Confusion Matrix","a141206d":"\u5206\u79bb\u6570\u636e\u96c6","de40f33b":"\u7ed9\u5b9a\u6570\u636e\u96c6\u51fa\u4e8e\u4fdd\u5bc6\u7684\u539f\u56e0\uff0c\u5df2\u7ecf\u8fc7\u4e86\u8131\u654f\u5316\u5904\u7406\u3002","ffecbb0a":"\u5c0f\u989d\u4ea4\u6613\u5360\u6bd4\u6700\u5927\u3002\u5f02\u5e38\u4ea4\u6613\u6700\u5927\u989d\u5ea62125.87\uff0c\u8fdc\u5c0f\u4e8e\u6b63\u5e38\u4ea4\u6613\u6700\u5927\u989d\u5ea625691.16\u3002","f5963092":"\u5148\u5c1d\u8bd5\u7528\u903b\u8f91\u56de\u5f52","59efede2":"\u6bd4\u8f83\u5f02\u5e38\u4ea4\u6613\u6570\u91cf\u4e0e\u6b63\u5e38\u4ea4\u6613\u6570\u91cf\u5728\u65f6\u95f4\u7ef4\u5ea6\u4e0a\u7684\u533a\u522b\u3002","3a64b1ca":"\u7ef4\u5ea6\u2018time\u2019\u8868\u793a\u6bcf\u6761\u4ea4\u6613\u4e0e\u6570\u636e\u96c6\u7b2c\u4e00\u6761\u4ea4\u6613\u7684\u95f4\u9694\u65f6\u95f4\u3002","bd8239b0":"\u53ef\u4ee5\u770b\u5230\uff0c\u76f8\u8f83\u4e8e\u903b\u8f91\u56de\u5f52\u6a21\u578b\uff0c\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u5728\u5404\u9879\u5206\u6570\u4e0a\u90fd\u6709\u63d0\u5347\u3002","66d2b938":"# \u7406\u89e3\u6570\u636e Data Exploration","71c1b7e2":"\u770b\u770b\u4ea4\u6613\u65f6\u95f4\u4e0e\u989d\u5ea6\u7684\u5173\u7cfb\u3002   \n   \n\u6ca1\u4ec0\u4e48\u6709\u7528\u7684\u4fe1\u606f\u3002","c7f52f25":"# \u795e\u7ecf\u7f51\u7edc\u6a21\u578b Neural Network","13e3d0f9":"# \u903b\u8f91\u56de\u5f52 Logistic Regression","4de2032b":"\u67f1\u72b6\u56fe\u53ef\u4ee5\u770b\u51fa\u6b63\u5e38\u4ea4\u6613\u6570\u5728\u65f6\u95f4\u4e0a\u5448\u73b0\u4e00\u5b9a\u7684\u5468\u671f\u6027\u3002\u4f46\u5f02\u5e38\u4ea4\u6613\u7684\u65f6\u95f4\u7279\u5f81\u5e76\u4e0d\u660e\u663e\u3002","82dec675":"# \u51c6\u5907\u6570\u636e Data Preparation","6782c24f":"\u540c\u6837\u4e3a\u4e86\u907f\u514d\u53d1\u751f\u8fc7\u62df\u5408\uff0c\u4f7f\u7528EarlyStopping\u51fd\u6570\uff0c\u5728\u5ea6\u91cf\u6307\u6807\u6ca1\u6709\u8fdb\u4e00\u6b65\u4f18\u5316\u7684\u65f6\u5019\u505c\u6b62\u8bad\u7ec3\u8fc7\u7a0b\u3002","cc0387e9":"# \u4fe1\u7528\u5361\u5f02\u5e38\u4ea4\u6613\u9884\u6d4b\u903b\u8f91\u56de\u5f52\u6a21\u578b\u548c\u795e\u7ecf\u7f51\u7edc\u6a21\u578b","4de4ddbc":"\u5206\u79bb\u6807\u7b7e\u3002","d7977455":"rescale\u6570\u636e\u96c6\u3002","fbb4e8e7":"\u67e5\u770b\u5404\u4e2a\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027","99a077bd":"\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u53ec\u56de\uff08Recall\uff09\u3001\u51c6\u786e\u7387\uff08Precision\uff09\u3001\u6b63\u786e\u7387\uff08Accuracy\uff09\u3001F1\u5206\u6570\u3002","005f3e40":"\u67e5\u627e\u662f\u5426\u6709\u7f3a\u5931\u503c\u3002","826fea6f":"\u7528SMOTE\u7b97\u6cd5\u5904\u7406\u5206\u5e03\u4e0d\u5e73\u8861\u6570\u636e\u3002","f27b5d96":"\u53ef\u4ee5\u770b\u51fa\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\u975e\u5e38\u4e0d\u5e73\u8861\u3002","2dd84110":"\u5206\u522b\u67e5\u770b\u5404\u4e2a\u7279\u5f81\u7684\u6b63\u5e38\u548c\u5f02\u5e38\u4ea4\u6613\u5206\u5e03\u3002","4cc06ace":"\u903b\u8f91\u56de\u5f52\u6a21\u578b\u7684\u53ec\u56de\uff08Recall\uff09\u3001\u51c6\u786e\u7387\uff08Precision\uff09\u3001\u6b63\u786e\u7387\uff08Accuracy\uff09\u3001F1\u5206\u6570\u3002","9df2cec2":"\u8fd9\u4e2a\u5206\u6790\u7684\u76ee\u6807\uff0c\u662f\u4f7f\u7528tensorflow\u4ece\u5305\u542b\u6b3a\u8bc8\u4fe1\u606f\u7684\u4fe1\u7528\u5361\u4ea4\u6613\u6570\u636e\u4e2d\u5efa\u7acb\u4e00\u4e2a\u6b3a\u8bc8\u9884\u6d4b\u6a21\u578b\u3002   \n\u6570\u636e\u96c6\u5305\u542b\u7684\u7ef4\u5ea6\u8f83\u591a\uff0c\u5728\u53ef\u89c6\u5316\u6570\u636e\u65f6\u7528\u5230\u4e86t-SNE\u5206\u5e03\uff0c\u5c06\u6570\u636e\u6295\u5c04\u5230\u4e8c\u7ef4\u5e73\u9762\u3002   \n   \n\u8fd9\u6b21\u5206\u6790\u4e3b\u8981\u5305\u542b\u51e0\u4e2a\u90e8\u5206\uff1a\n* \u7406\u89e3\u6570\u636e\n* \u51c6\u5907\u6570\u636e\n* \u903b\u8f91\u56de\u5f52\u6a21\u578b\n* \u795e\u7ecf\u7f51\u7edc\u6a21\u578b\n* \u7528t-SNE\u8fdb\u884c\u53ef\u89c6\u5316\n","ac977c23":"### \u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u642d\u5efa\n\u7ed3\u6784\u4e2d\u542b\u6709\u4e24\u4e2a\u9690\u85cf\u5c42\uff0c\u6bcf\u5c4236\u4e2a\u795e\u7ecf\u5143\uff0c\u4f7f\u7528\u6279\u6807\u51c6\u5316\u548cdropout\u6765\u907f\u514d\u53d1\u751f\u8fc7\u62df\u5408\u3002\u8f93\u5165\u548c\u9690\u85cf\u5c42\u9009\u62e9relu\u6fc0\u6d3b\u51fd\u6570\uff0c\u8f93\u51fa\u5c42\u7528sigmoid\u6fc0\u6d3b\u51fd\u6570\u3002"}}