{"cell_type":{"57e37f66":"code","69b27c1c":"code","e413cbca":"code","36398761":"code","ef78407e":"code","dc8c03ab":"code","7cc660e8":"code","99cadb1d":"code","b247c68c":"code","c10fef2d":"code","d89eb021":"code","c25ca568":"code","9f6a58d2":"code","5bfb0b06":"code","14366b3c":"code","6c68e207":"code","21ce7751":"code","ec472d12":"code","9a51299c":"code","260e3ca5":"code","d1beb688":"code","0cc1c686":"code","d96b02f9":"code","91c0c4a6":"code","8fa4167e":"code","e0dad965":"code","7d371fce":"code","0d082df5":"code","66558fb7":"code","da46117e":"code","b212d588":"code","e8bc1f76":"code","46e4aa30":"code","9e4ca8d1":"code","8df35668":"code","77a9cb75":"code","e5d0b2ab":"code","447a9dc7":"code","03e1e354":"markdown","6f39d457":"markdown","15e2cb6e":"markdown","1b234e29":"markdown","f3a721a2":"markdown","2a9fec83":"markdown","2b0bd074":"markdown","087b6a1d":"markdown","79f822f8":"markdown","4d683220":"markdown","7f64656c":"markdown","d0b5addc":"markdown","e534ab71":"markdown","d37bae7e":"markdown","cfe8db8b":"markdown","26870870":"markdown","bb725dde":"markdown","d8cb8399":"markdown","90a4f57e":"markdown","2df95276":"markdown","56aee798":"markdown","c3772631":"markdown","76128cb9":"markdown","8d68dbf4":"markdown","ad5100ae":"markdown","951b8e54":"markdown","f2e2220e":"markdown","709fe68c":"markdown"},"source":{"57e37f66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport missingno as msno\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","69b27c1c":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf.head()","e413cbca":"df.columns","36398761":"# CHANGE SPELLING OF ANAEMIA COLUMN TO 'ANEMIA'\ndf.rename(columns={'anaemia':'anemia'}, inplace=True)","ef78407e":"df.info()","dc8c03ab":"df.describe()","7cc660e8":"missing_percentage=df.isna().sum()*100\/df.shape[0]\nmissing_percentage","99cadb1d":"df_survived = df.loc[df['DEATH_EVENT'] == 0]\ndf_died = df.loc[df['DEATH_EVENT'] == 1]\n\ndf_cat = df[['anemia', 'diabetes', 'high_blood_pressure', 'sex', 'smoking']]\ndf_cont = df[['age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time']]","b247c68c":"#PRINT VALUE COUNTS FOR VARIABLES WITH BINARY VALUES:\n\nprint(\"ANEMIA:\")\nprint(df['anemia'].value_counts())\nprint(\"\")\nprint(\"DIABETES:\")\nprint(df['diabetes'].value_counts())\nprint(\"\")\nprint(\"HIGH BLOOD PRESSURE:\")\nprint(df['high_blood_pressure'].value_counts())\nprint(\"\")\nprint(\"SEX:\")\nprint(df['sex'].value_counts())\nprint(\"\")\nprint(\"SMOKING:\")\nprint(df['smoking'].value_counts())\nprint(\"\")\nprint(\"DEATH EVENT:\")\nprint(df['DEATH_EVENT'].value_counts())\nprint(\"\")","c10fef2d":"print(\"Range of Age Column: \", df['age'].min(), \"to\", df['age'].max())\nprint(\"\")\nprint(\"Range of Creatinine Phosphokinase Column: \", df['creatinine_phosphokinase'].min(), \"to\", df['creatinine_phosphokinase'].max())\nprint(\"\")\nprint(\"Range of Platelets Column: \", df['platelets'].min(), \"to\", df['platelets'].max())\nprint(\"\")\nprint(\"Range of Serum Creatinine Column: \", df['serum_creatinine'].min(), \"to\", df['serum_creatinine'].max())\nprint(\"\")\nprint(\"Range of Serum Sodium Column: \", df['serum_sodium'].min(), \"to\", df['serum_sodium'].max())\nprint(\"\")\nprint(\"Range of Time Column: \", df['time'].min(), \"to\", df['time'].max())\n\n","d89eb021":"fig = px.box(df, x=\"creatinine_phosphokinase\")\nfig.update_layout(title_text='CREATININE PHOSPHOKINASE')\nfig.show()","c25ca568":"fig = px.box(df, x=\"platelets\")\nfig.update_layout(title_text='PLATELETS')\nfig.show()","9f6a58d2":"fig = px.box(df, x=\"serum_creatinine\")\nfig.update_layout(title_text='SERUM CREATININE')\nfig.show()","5bfb0b06":"fig = px.box(df, x=\"serum_sodium\")\nfig.update_layout(title_text='SERUM SODIUM')\nfig.show()","14366b3c":"# DROP ROWS WITH OUTLIER VALUES\n\ndf.drop(df[df['creatinine_phosphokinase'] >= 1380].index, inplace = True) \ndf.drop(df[df['platelets'] >= 448000].index, inplace = True) \ndf.drop(df[df['platelets'] <= 73000].index, inplace = True) \ndf.drop(df[df['serum_creatinine'] >= 1.7].index, inplace = True) \ndf.drop(df[df['serum_sodium'] <= 127].index, inplace = True) \ndf.drop(df[df['serum_sodium'] >= 148].index, inplace = True) \n","6c68e207":"values = df['DEATH_EVENT'].value_counts()\n\nfig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]],\n                    subplot_titles=('Death Event Count', 'Death Event Percentage'))\n\nfig.add_trace(go.Bar(y=values, \n                     name='Death Event Count', \n                     marker=dict(color=['#2ad4cb','#e6c822'])), row=1, col=1)\n\nfig.add_trace(go.Pie(labels=['Survived','Died'], \n                     values=values, \n                     name='Death Event Percentage',\n                     hole = 0.5,\n                     marker=dict(colors=['#2ad4cb','#e6c822'])), row=1, col=2)\n\n\nfig.update_layout(height=500, \n                  title_text='DEATH EVENT STATS',\n                  showlegend=True)\n\nfig.show()\n","21ce7751":"def plot_cats(feat):    \n    values = df_cat[feat].value_counts()\n    labels = df_cat[feat].value_counts().keys().tolist()\n\n    fig = make_subplots(rows=1, cols=2, \n                        specs=[[{\"type\": \"xy\"}, {\"type\": \"domain\"}]],\n                        subplot_titles=((feat.title() + ' Count'), (feat.title() + ' Percentage')))\n\n    fig.add_trace(go.Bar(y=values, \n                         name=(feat.title() + ' Count'), \n                         marker=dict(color=['#2ad4cb','#e6c822'])), row=1, col=1)\n\n    fig.add_trace(go.Pie(labels=[labels], \n                         values=values, \n                         name=feat.title() + ' Percentage',\n                         hole = 0.5,\n                         marker=dict(colors=['#2ad4cb','#e6c822'])), row=1, col=2)\n\n    fig.update_layout(height=500, \n                      title_text=feat.upper() + ' STATS',\n                      showlegend=True)\n\n    fig.show()","ec472d12":"plot_cats('anemia')","9a51299c":"plot_cats('diabetes')","260e3ca5":"plot_cats('high_blood_pressure')","d1beb688":"plot_cats('sex')","0cc1c686":"plot_cats('smoking')","d96b02f9":"df_anemia = df.groupby(['anemia', 'DEATH_EVENT'])[['DEATH_EVENT']].count()\ndf_anemia.columns = ['count']\ndf_anemia.reset_index(inplace=True)\n\nanemia_count = df_anemia.groupby(['anemia'])[['count']].sum()\nanemia_count.reset_index(inplace=True)\n\nnoanemia_death = df_anemia.loc[df_anemia['anemia'] == 0]\nanemia_death = df_anemia.loc[df_anemia['anemia'] == 1]\n\nsubplot_titles=['ANEMIA COUNT', 'ANEMIA x DEATH EVENT COUNT', 'ANEMIA PERCENTAGES', \n                'OVERALL ANEMIA & DEATH EVENT', 'NO ANEMIA x DEATH', 'ANEMIA x DEATH']\n\nfig = make_subplots(rows=3, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.13)\n\nlabel1 = ['No Anemia', 'Anemia']\nlabel2 = ['No Anemia: Survived', 'No Anemia: Died', 'Anemia: Survived', 'Anemia: Died']\nlabel3 = ['No Anemia: Survived', 'No Anemia: Died']\nlabel4 = ['Anemia: Survived', 'Anemia: Died']\n\nfig.add_trace(go.Bar(x=label1, y=anemia_count['count'], name='Anemia Count', marker_color='rgb(26, 118, 255)'), row=1, col=1)\nfig.add_trace(go.Bar(x=label2, y=df_anemia['count'], name='Anemia vs Death Event', marker_color='rgb(235, 186, 40)'), row=1, col=2)\nfig.add_trace(go.Pie(labels=label1, values=anemia_count['count']), row=2, col=1)\nfig.add_trace(go.Pie(labels=label2, values=df_anemia['count']), row=2, col=2)\nfig.add_trace(go.Pie(labels=label3, values=noanemia_death['count']), row=3, col=1)\nfig.add_trace(go.Pie(labels=label4, values=anemia_death['count']), row=3, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=1000, showlegend=True, title_text='ANEMIA x DEATH EVENT')\n\nfig.show()","91c0c4a6":"df_diabetes = df.groupby(['diabetes', 'DEATH_EVENT'])[['DEATH_EVENT']].count()\ndf_diabetes.columns = ['count']\ndf_diabetes.reset_index(inplace=True)\n\ndiabetes_count = df_diabetes.groupby(['diabetes'])[['count']].sum()\ndiabetes_count.reset_index(inplace=True)\n\nnodiabetes_death = df_diabetes.loc[df_diabetes['diabetes'] == 0]\ndiabetes_death = df_diabetes.loc[df_diabetes['diabetes'] == 1]\n\nsubplot_titles=['DIABETES COUNT', 'DIABETES x DEATH EVENT COUNT', 'DIABETES PERCENTAGES', \n                'OVERALL DIABETES & DEATH EVENT', 'NO DIABETES x DEATH', 'DIABETES x DEATH']\n\nfig = make_subplots(rows=3, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.13)\n\nlabel1 = ['No Diabetes', 'Diabetes']\nlabel2 = ['No Diabetes: Survived', 'No Diabetes: Died', 'Diabetes: Survived', 'Diabetes: Died']\nlabel3 = ['No Diabetes: Survived', 'No Diabetes: Died']\nlabel4 = ['Diabetes: Survived', 'Diabetes: Died']\n\nfig.add_trace(go.Bar(x=label1, y=diabetes_count['count'], name='Diabetes Count', marker_color='rgb(26, 118, 255)'), row=1, col=1)\nfig.add_trace(go.Bar(x=label2, y=df_diabetes['count'], name='Diabetes vs Death Event', marker_color='rgb(235, 186, 40)'), row=1, col=2)\nfig.add_trace(go.Pie(labels=label1, values=diabetes_count['count']), row=2, col=1)\nfig.add_trace(go.Pie(labels=label2, values=df_diabetes['count']), row=2, col=2)\nfig.add_trace(go.Pie(labels=label3, values=nodiabetes_death['count']), row=3, col=1)\nfig.add_trace(go.Pie(labels=label4, values=diabetes_death['count']), row=3, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=1000, showlegend=True, title_text='DIABETES x DEATH EVENT')\n\nfig.show()","8fa4167e":"df_hbp = df.groupby(['high_blood_pressure', 'DEATH_EVENT'])[['DEATH_EVENT']].count()\ndf_hbp.columns = ['count']\ndf_hbp.reset_index(inplace=True)\n\nhbp_count = df_hbp.groupby(['high_blood_pressure'])[['count']].sum()\nhbp_count.reset_index(inplace=True)\n\nnohbp_death = df_hbp.loc[df_hbp['high_blood_pressure'] == 0]\nhbp_death = df_hbp.loc[df_hbp['high_blood_pressure'] == 1]\n\nsubplot_titles=['HBP COUNT', 'HBP x DEATH EVENT COUNT', 'HBP PERCENTAGES', \n                'OVERALL HBP & DEATH EVENT', 'NO HBP x DEATH', 'HBP x DEATH']\n\nfig = make_subplots(rows=3, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.13)\n\nlabel1 = ['No HBP', 'HBP']\nlabel2 = ['No HBP: Survived', 'No HBP: Died', 'HBP: Survived', 'HBP: Died']\nlabel3 = ['No HBP: Survived', 'No HBP: Died']\nlabel4 = ['HBP: Survived', 'HBP: Died']\n\nfig.add_trace(go.Bar(x=label1, y=hbp_count['count'], name='HBP Count', marker_color='rgb(26, 118, 255)'), row=1, col=1)\nfig.add_trace(go.Bar(x=label2, y=df_hbp['count'], name='HBP vs Death Event', marker_color='rgb(235, 186, 40)'), row=1, col=2)\nfig.add_trace(go.Pie(labels=label1, values=hbp_count['count']), row=2, col=1)\nfig.add_trace(go.Pie(labels=label2, values=df_hbp['count']), row=2, col=2)\nfig.add_trace(go.Pie(labels=label3, values=nohbp_death['count']), row=3, col=1)\nfig.add_trace(go.Pie(labels=label4, values=hbp_death['count']), row=3, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=1000, showlegend=True, title_text='HIGH BLOOD PRESSURE (HBP) x DEATH EVENT')\n\nfig.show()","e0dad965":"df_sex = df.groupby(['sex', 'DEATH_EVENT'])[['DEATH_EVENT']].count()\ndf_sex.columns = ['count']\ndf_sex.reset_index(inplace=True)\n\nsex_count = df_sex.groupby(['sex'])[['count']].sum()\nsex_count.reset_index(inplace=True)\n\nfemale_death = df_sex.loc[df_sex['sex'] == 0]\nmale_death = df_sex.loc[df_sex['sex'] == 1]\n\nsubplot_titles=['SEX COUNT', 'SEX x DEATH EVENT COUNT', 'SEX PERCENTAGES', \n                'OVERALL SEX & DEATH EVENT', 'FEMALE x DEATH', 'MALE x DEATH']\n\nfig = make_subplots(rows=3, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.13)\n\nlabel1 = ['Female', 'Male']\nlabel2 = ['Female: Survived', 'Female: Died', 'Male: Survived', 'Male: Died']\nlabel3 = ['Female: Survived', 'Female: Died']\nlabel4 = ['Male: Survived', 'Male: Died']\n\nfig.add_trace(go.Bar(x=label1, y=sex_count['count'], name='Sex Count', marker_color='rgb(26, 118, 255)'), row=1, col=1)\nfig.add_trace(go.Bar(x=label2, y=df_sex['count'], name='Sex vs Death Event', marker_color='rgb(235, 186, 40)'), row=1, col=2)\nfig.add_trace(go.Pie(labels=label1, values=sex_count['count']), row=2, col=1)\nfig.add_trace(go.Pie(labels=label2, values=df_sex['count']), row=2, col=2)\nfig.add_trace(go.Pie(labels=label3, values=female_death['count']), row=3, col=1)\nfig.add_trace(go.Pie(labels=label4, values=male_death['count']), row=3, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=1000, showlegend=True, title_text='SEX x DEATH EVENT')\n\nfig.show()","7d371fce":"df_smoking = df.groupby(['smoking', 'DEATH_EVENT'])[['DEATH_EVENT']].count()\ndf_smoking.columns = ['count']\ndf_smoking.reset_index(inplace=True)\n\nsmoking_count = df_smoking.groupby(['smoking'])[['count']].sum()\nsmoking_count.reset_index(inplace=True)\n\nnonsmoking_death = df_smoking.loc[df_smoking['smoking'] == 0]\nsmoking_death = df_smoking.loc[df_smoking['smoking'] == 1]\n\nsubplot_titles=['SMOKING COUNT', 'SMOKING x DEATH EVENT COUNT', 'SMOKING PERCENTAGES', \n                'OVERALL SMOKING & DEATH EVENT', 'NO SMOKING x DEATH', 'SMOKING x DEATH']\n\nfig = make_subplots(rows=3, cols=2, specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.13)\n\nlabel1 = ['Non Smoker', 'Smoker']\nlabel2 = ['Non Smoker: Survived', 'Non Smoker: Died', 'Smoker: Survived', 'Smoker: Died']\nlabel3 = ['Non Smoker: Survived', 'Non Smoker: Died']\nlabel4 = ['Smoker: Survived', 'Smoker: Died']\n\nfig.add_trace(go.Bar(x=label1, y=smoking_count['count'], name='Smoker Count', marker_color='rgb(26, 118, 255)'), row=1, col=1)\nfig.add_trace(go.Bar(x=label2, y=df_smoking['count'], name='Smoker vs Death Event', marker_color='rgb(235, 186, 40)'), row=1, col=2)\nfig.add_trace(go.Pie(labels=label1, values=smoking_count['count']), row=2, col=1)\nfig.add_trace(go.Pie(labels=label2, values=df_smoking['count']), row=2, col=2)\nfig.add_trace(go.Pie(labels=label3, values=nonsmoking_death['count']), row=3, col=1)\nfig.add_trace(go.Pie(labels=label4, values=smoking_death['count']), row=3, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=1000, showlegend=True, title_text='SMOKING x DEATH EVENT')\n\nfig.show()","0d082df5":"fig = px.histogram(df, x=\"age\", \n                   color=\"DEATH_EVENT\",\n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   nbins=10, hover_data=df.columns) \n\nfig.update_layout(height=500, title_text='AGE x DEATH EVENT', showlegend=True)\n\nfig.show()","66558fb7":"fig = px.histogram(df, \n                   x=\"creatinine_phosphokinase\", \n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='CREATININE PHOSPHOKINASE x DEATH EVENT', showlegend=True)\n\nfig.show()","da46117e":"fig = px.histogram(df, \n                   x=\"ejection_fraction\",\n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='EJECTION FRACTION x DEATH EVENT', showlegend=True)\n\nfig.show()","b212d588":"fig = px.histogram(df, x=\"platelets\", \n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='PLATELETS x DEATH EVENT', showlegend=True)\n\nfig.show()","e8bc1f76":"fig = px.histogram(df, \n                   x=\"serum_creatinine\", \n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='SERUM CREATININE x DEATH EVENT', showlegend=True)\n\nfig.show()","46e4aa30":"fig = px.histogram(df, \n                   x=\"serum_sodium\", \n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='SERUM SODIUM x DEATH EVENT', showlegend=True)\n\nfig.show()","9e4ca8d1":"fig = px.histogram(df, \n                   x=\"time\", \n                   color=\"DEATH_EVENT\", \n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   marginal=\"box\", \n                   hover_data=df.columns)\n\nfig.update_layout(height=500, title_text='TIME x DEATH EVENT', showlegend=True)\n\nfig.show()","8df35668":"df_de = df.groupby(['DEATH_EVENT', 'sex', 'high_blood_pressure'])[['age']].count()\ndf_de.reset_index(inplace=True)\ndf_de.rename(columns={'age':'count'}, inplace=True)\n\nsurvived_female = df_de.loc[(df_de['DEATH_EVENT'] == 0) & (df_de['sex'] == 0)]\nsurvived_male = df_de.loc[(df_de['DEATH_EVENT'] == 0) & (df_de['sex'] == 1)]\ndied_female = df_de.loc[(df_de['DEATH_EVENT'] == 1) & (df_de['sex'] == 0)]\ndied_male = df_de.loc[(df_de['DEATH_EVENT'] == 1) & (df_de['sex'] == 1)]\n\nsubplot_titles = ['FEMALE x SURVIVED' , 'MALE x SURVIVED', 'FEMALE x DIED', 'MALE x DIED']\n\nfig = make_subplots(rows=2, cols=2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles, \n                   vertical_spacing = 0.10)\n\nlabel = ['No HBP', 'HBP']\n\nfig.add_trace(go.Pie(labels=label, values=survived_female['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=1, col=1)\nfig.add_trace(go.Pie(labels=label, values=survived_male['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=1, col=2)\nfig.add_trace(go.Pie(labels=label, values=died_female['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=2, col=1)\nfig.add_trace(go.Pie(labels=label, values=died_male['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=2, col=2)\n\n# fig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=750, showlegend=True, title_text='DEATH & SURVIVAL PERCENTAGES BY SEX & HIGH BLOOD PRESSURE')\n\nfig.show()","77a9cb75":"df_de2 = df.groupby(['DEATH_EVENT', 'sex', 'smoking'])[['age']].count()\ndf_de2.reset_index(inplace=True)\ndf_de2.rename(columns={'age':'count'}, inplace=True)\n\nsurvived_female = df_de2.loc[(df_de2['DEATH_EVENT'] == 0) & (df_de2['sex'] == 0)]\nsurvived_male = df_de2.loc[(df_de2['DEATH_EVENT'] == 0) & (df_de2['sex'] == 1)]\ndied_female = df_de2.loc[(df_de2['DEATH_EVENT'] == 1) & (df_de2['sex'] == 0)]\ndied_male = df_de2.loc[(df_de2['DEATH_EVENT'] == 1) & (df_de2['sex'] == 1)]\n\nsubplot_titles = ['FEMALE x SURVIVED' , 'MALE x SURVIVED', 'FEMALE x DIED', 'MALE x DIED']\n\nfig = make_subplots(rows=2, cols=2, specs=[[{\"type\": \"domain\"}, {\"type\": \"domain\"}],\n                                           [{\"type\": \"domain\"}, {\"type\": \"domain\"}]],\n                   subplot_titles=subplot_titles,\n                   vertical_spacing = 0.10)\n\nlabel = ['Non-Smoking', 'Smoking']\n\nfig.add_trace(go.Pie(labels=label, values=survived_female['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822']), rotation=-45), row=1, col=1)\nfig.add_trace(go.Pie(labels=label, values=survived_male['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=1, col=2)\nfig.add_trace(go.Pie(labels=label, values=died_female['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=2, col=1)\nfig.add_trace(go.Pie(labels=label, values=died_male['count'], hole=0.5, marker=dict(colors=['#2ad4cb','#e6c822'])), row=2, col=2)\n\nfig.update_traces(hoverinfo=\"label+name+value\")\nfig.update_layout(height=700, \n                  showlegend=True, \n                  margin=dict(t=100, b=0, l=0, r=0),\n                  title_text='DEATH & SURVIVAL PERCENTAGES BY SEX & SMOKING STATUS')\n\nfig.show()","e5d0b2ab":"# df_de_age = df.groupby(['DEATH_EVENT', 'sex', 'age'])[['anemia']].count()\n# df_de_age.reset_index(inplace=True)\n# df_de_age.rename(columns={'anemia':'count'}, inplace=True)\n# df_de_age = df_de_age.loc[df_de_age['DEATH_EVENT'] == 1]\n# df_de_age\n\ndf_de1_age = df[['DEATH_EVENT', 'sex', 'age']].loc[df['DEATH_EVENT'] == 1]\ndf_de1_age\n\nfig = px.histogram(df_de1_age, \n                   x=\"age\", \n                   color=\"sex\", \n                   marginal=\"box\",\n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   hover_data=df_de_age.columns)\n\nfig.update_layout(height=500, title_text='SEX & AGE x DEATH EVENT', showlegend=True)\n\nfig.show()\n","447a9dc7":"df_de0_age = df[['DEATH_EVENT', 'sex', 'age']].loc[df['DEATH_EVENT'] == 0]\ndf_de0_age\n\nfig = px.histogram(df_de0_age, \n                   x=\"age\", \n                   color=\"sex\", \n                   marginal=\"box\",\n                   color_discrete_sequence=['#e6c822','#2ad4cb'],\n                   hover_data=df_de_age.columns)\n\nfig.update_layout(height=500, title_text='SEX & AGE of the Survivors', showlegend=True)\n\nfig.show()","03e1e354":"### CONTINUOUS VARIABLES\n\nThe charts below will display the count of the various continuous variables ('age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time') according to whether or not a patient died or survived. ","6f39d457":"<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Contents<\/h3>\n\n* <a href='#1'>I. Load Libraries & Packages<\/a>  \n* <a href='#2'>II. Data Overview & Insights<\/a>  \n* <a href='#3'>III. Outliers<\/a>  \n* <a href='#4'>IV. Exploratory Data Analysis<\/a>  \n    * <a href='#4a'>IVa. Univariate Analysis<\/a>  \n    * <a href='#4b'>IVb. Bivariate Analysis<\/a>  \n    * <a href='#4c'>IVc. Multivariate Analysis<\/a>  \n* <a href='#5'>V. Data Normalization<\/a>  (coming soon) \n* <a href='#6'>VI. Model Development<\/a>  (coming soon)","15e2cb6e":"## **MISSING VALUES**\n\nThere are no missing values","1b234e29":"### ANEMIA x DEATH EVENT\n\n**OBSERVATIONS**\n\n* The dataset is closely split between patients both with and without anemia. A small majority of patients (103 or 52.3%) have no anemia. While 97 or 47.7% of patients do have anemia. \n* Patients with anemia are more likely to die than those without. 27.7% of patients with anemia died while 18.4% of patients without anemia died. ","f3a721a2":"# <a id=\"2\">II. DATA OVERVIEW & INSIGHTS<\/a>","2a9fec83":"## <a id='4a'>IVa. UNIVARIATE ANALYSIS<\/a>\n","2b0bd074":"### SEX & AGE of the Survivors","087b6a1d":"## MODEL DEVELOPMENT","79f822f8":"<a id=\"cat1\"><\/a>\n\n### VISUALIZE ALL CATEGORICAL VARIABLES","4d683220":"# <a id='3'>III. OUTLIERS<\/a>\n\nWe'll visualize some of the major outliers and delete the rows that contain them. This will improve the accuracy of our predictive models. ","7f64656c":"### SEX x DEATH EVENT\n\n**OBSERVATIONS**\n\n* In this dataset males outnumber females by 11.4% \n* Female patients died at a 1.4% higher rate than males. 23.7% of females died while 22.3% of males died.  ","d0b5addc":"#### GET RANGES OF CONTINUOUS VARIABLES","e534ab71":"<a id=\"cat2\"><\/a>\n\n### CATEGORICAL VARIABLES","d37bae7e":"<p  style=\"text-align: center;\"><font size=\"12\"><b>HEART FAILURE PREDICTION<\/b><\/font><\/p>","cfe8db8b":"### DEATH & SURVIVAL PERCENTAGES BY SEX & SMOKING STATUS","26870870":"## DATA NORMALIZATION","bb725dde":"![](https:\/\/inteng-storage.s3.amazonaws.com\/img\/iea\/Xy6xeK3Wwr\/sizes\/heart-attack-ai-oxford_md.jpg)","d8cb8399":"### SEX & AGE of those who Died","90a4f57e":"### SMOKING x DEATH EVENT\n\n**OBSERVATIONS:** \n\n* Most people in the dataset are non smokers. 131 or 66.5% non smoker, 66 or 33.5% smoker. \n* 24.2% of smokers died. 22.1% of non smokers died. ","2df95276":"# <a id=\"1\">I. LIBRARIES & PACKAGES<\/a>","56aee798":"### DIABETES x DEATH EVENT\n\n**OBSERVATIONS**\n\n* Most patients do not have diabetes, outnumbering patients with diabetes by 29 or about 16%. \n* 113 patients or 57.4% do NOT have diabetes. 84 patients or 42.6% have diabetes. \n* Death rates of patients with diabetes are not signficantly higher than those without. Those with diabetes died at a rate approximately 1.8% higher than those without. ","c3772631":"The dataset is very unbalanced with a relatively low number of deaths.","76128cb9":"## <a id='4b'>IVa. BIVARIATE ANALYSIS<\/a>\n\n\nIn this section we'll visualize how each categorical and continuous variable correlates with our target variable, \"DEATH EVENT\". ","8d68dbf4":"# <a id=\"4\">IV. EXPLORATORY DATA ANALYSIS<\/a>\n\nIn this section we'll explore our data and create some visualizion to give us further insight. ","ad5100ae":"### DEATH & SURVIVAL PERCENTAGES BY SEX & HIGH BLOOD PRESSURE","951b8e54":"## <a id='4c'>IVc. MULTIVARIATE ANALYSIS<\/a>\n","f2e2220e":"\nIn this notebook we evaluate several variables to determine how they may relate to whether a patient dies or survives a heart failure event. \n\nThe variables that are included in this data set are:\n* Age                         \n* Anemia  \n* Creatinine Phosphokinase  \n* Diabetes       \n* Ejection Fraction   \n* High Blood Pressure  \n* Platelets   \n* Serum Creatinine \n* Serum Sodium \n* Sex    \n* Smoking \n* Time (Follow-up period (days))\n","709fe68c":"### HIGH BLOOD PRESSURE x DEATH EVENT\n\n**OBSERVATIONS**\n\n* Most patients (121 or 61.4%) do not have high blood pressure, while 76 or 38.6% do. \n* Patients with high blood pressure are more likely to die than those without. 27.6% of patients with high blood pressure died while 19.8% of patients without high blood pressure died. "}}