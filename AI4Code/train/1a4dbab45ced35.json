{"cell_type":{"79c78d1b":"code","07087cfc":"code","ac29c150":"code","b7d91b78":"code","e3b6c496":"code","46b5fb3f":"code","bd742e99":"code","bd7d319c":"code","bfb8f246":"code","c549cf6f":"code","c9e525d3":"code","827804af":"code","2355bac7":"code","35dcdf29":"code","e28ecdc6":"code","ffaf4e41":"code","862c336e":"code","642fdd0d":"code","3f24eb86":"markdown","6bde12f0":"markdown","848a5574":"markdown","2ec6e9eb":"markdown","b8fb01cb":"markdown","2f1f8603":"markdown","af97bfc3":"markdown","b84826ff":"markdown","31b77aef":"markdown","a40311be":"markdown","1c3a9156":"markdown"},"source":{"79c78d1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07087cfc":"cab_df = pd.read_csv(\"\/kaggle\/input\/cabs-fare-data\/Cab_Data.csv\")\ncity_df = pd.read_csv(\"\/kaggle\/input\/cabs-fare-data\/City.csv\")\ncustomer_df = pd.read_csv(\"\/kaggle\/input\/cabs-fare-data\/Customer_ID.csv\")\ntransaction_df = pd.read_csv(\"\/kaggle\/input\/cabs-fare-data\/Transaction_ID.csv\")","ac29c150":"cab_df.columns\n# city_df.columns\n# customer_df.columns\n# transaction_df.columns","b7d91b78":"cab_df.head()\n# city_df.head()\n# customer_df.head()\n# transaction_df.head()","e3b6c496":"cab_df.describe()\n# city_df.describe()\n# customer_df.describe()\n# transaction_df.describe()","46b5fb3f":"cab_df.info()\n# city_df.info()\n# customer_df.info()\n# transaction_df.info()","bd742e99":"def bar_plot(df,variable):\n    \"\"\"\n        input: variable ex: \"gender\"\n        output: barplot & valuecount\n    \"\"\"\n    # get feature\n    var = df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (11,3))\n    plt.bar(varValue.index, varValue)\n    if variable == \"City\":\n        plt.xticks(varValue.index, varValue.index.values, rotation=\"90\")\n    elif variable ==\"Age\":\n        plt.xticks(varValue.index, varValue.index.values, rotation=\"90\")\n    else:\n        plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","bd7d319c":"category1 = [\"Company\", \"City\"]\n\nfor c in category1:\n    bar_plot(cab_df,c)","bfb8f246":"category2 = [\"Gender\", \"Age\"]\n\nfor c in category2:\n    bar_plot(customer_df,c)","c549cf6f":"bar_plot(transaction_df,\"Payment_Mode\")","c9e525d3":"def plot_hist(df,variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","827804af":"num1 = [\"Date of Travel\", \"KM Travelled\", \"Price Charged\", \"Cost of Trip\"]\nfor n in num1:\n    plot_hist(cab_df,n)","2355bac7":"def population_rate(): #percentage of how many people use cab in population\n        population = list(city_df[\"Population\"].str.strip().str.replace(\",\",\"\"))\n        users = list(city_df[\"Users\"].str.strip().str.replace(\",\",\"\"))\n        result = range(0,len(population))\n        rates = []\n\n        for i in result:\n            rate = float(users[i])\/float(population[i])\n            rates.append(round(rate*100,2))\n        new = zip(city_df[\"City\"],rates)\n        new_df = pd.DataFrame(new,columns = [\"City\",\"Rates\"]).sort_values(by = [\"Rates\"],ascending = False)\n        \n            \n        #visulation\n        plt.figure(figsize = (9,3))\n        plt.bar(new_df.City, new_df.Rates)\n        plt.xticks(rotation=\"90\")\n        plt.ylabel(\"rates\")\n        plt.title(\"Percentage of how many people use cab in population\")\n        plt.show()\n        \n        print(new_df)\n        \npopulation_rate()","35dcdf29":"def profit():\n        price = np.array(cab_df[\"Price Charged\"])\n        cost = np.array(cab_df[\"Cost of Trip\"])\n        profit = np.subtract(price,cost)\n        new = zip(cab_df[\"City\"],profit)\n        profit_df = (pd.DataFrame(new,columns = [\"City\",\"Profits\"]).groupby(\"City\").sum()).sort_values(by = \"Profits\",ascending=False)\n        new_df = profit_df.round()\n        \n        #visualization\n        plt.figure(figsize = (9,3))\n        plt.bar(new_df.index,new_df.Profits)\n        plt.xticks(rotation=\"90\")\n        plt.ylabel(\"Profits\")\n        plt.title(\"Profits for each city\")\n        plt.show()\n        \n        print(new_df)\n\nprofit()\n        ","e28ecdc6":"def com_km():\n    new = cab_df[[\"Company\", \"KM Travelled\"]]\n    new_df = (new.groupby(\"Company\").mean()).sort_values(by=\"KM Travelled\")\n    \n    #visualization\n    plt.figure(figsize = (9,3))\n    plt.bar(new_df.index,new_df[\"KM Travelled\"])\n    plt.ylabel(\"KM\")\n    plt.title(\"Avarage Trip Long\")\n    plt.show()\n        \n    print(new_df)\n\ncom_km()","ffaf4e41":"# Pink Cab profits for each city\ndef pink_pf():\n    pink = cab_df[cab_df[\"Company\"] == \"Pink Cab\" ][[\"City\",\"Price Charged\",\"Cost of Trip\"]]\n    cities = list(pink.City.unique())\n    pf = []\n    for c in cities:\n        price = np.array(pink[pink[\"City\"] == c][\"Price Charged\"]).sum()\n        cost = np.array(pink[pink[\"City\"] == c][\"Cost of Trip\"]).sum()\n        profit = round(price-cost,2)\n        pf.append(profit)\n    zipped_data = zip(cities,pf)\n    profit_cities = pd.DataFrame(zipped_data,columns=[\"City\",\"Profit\"]).sort_values(by=\"Profit\",ascending=False)\n    return profit_cities.head()\n\n# Yellow Cab profits for each city\ndef yellow_pf():\n    yellow = cab_df[cab_df[\"Company\"] == \"Yellow Cab\" ][[\"City\",\"Price Charged\",\"Cost of Trip\"]]\n    cities = list(yellow.City.unique())\n    pf = []\n    for c in cities:\n        price = np.array(yellow[yellow[\"City\"] == c][\"Price Charged\"]).sum()\n        cost = np.array(yellow[yellow[\"City\"] == c][\"Cost of Trip\"]).sum()\n        profit = round(price-cost,2)\n        pf.append(profit)\n    zipped_data = zip(cities,pf)\n    profit_cities = pd.DataFrame(zipped_data,columns=[\"City\",\"Profit\"]).sort_values(by=\"Profit\",ascending=False)\n    return profit_cities.head()\n\n#visualization\nf,ax = plt.subplots(figsize = (9,5))\nsns.barplot(x=pink_pf().Profit,y=pink_pf().City,color='pink',label='Pink Cab' )\nsns.barplot(x=yellow_pf().Profit,y=yellow_pf().City,color='yellow',alpha = 0.4,label='Yellow Cab')\n\nax.legend(loc='lower right',frameon = True) \nax.set(xlabel='Profits', ylabel='Cities',title = \"Profit Analyse for Top 5 City\")\nplt.show()\n\n    \n    ","862c336e":"# Pink Cab profits per KM for each city\ndef pink_pf():\n    pink = cab_df[cab_df[\"Company\"] == \"Pink Cab\" ][[\"City\",\"KM Travelled\",\"Price Charged\",\"Cost of Trip\"]]\n    cities = list(pink.City.unique())\n    \n    kms = []\n    pf = []\n\n    for c in cities:\n        price = pink[pink[\"City\"] == c][\"Price Charged\"].sum()\n        cost = pink[pink[\"City\"] == c][\"Cost of Trip\"].sum()\n        profit = round(price-cost,2)\n        pf.append(profit)\n        km = pink[pink[\"City\"] == c][\"KM Travelled\"].sum()\n        kms.append(km)\n        \n    \n    km_np = np.array(kms)  \n    profit = np.array(pf)\n    per_km = profit\/km_np\n    zipped_data = zip(cities,per_km)\n    profit_cities_per_km = pd.DataFrame(zipped_data,columns=[\"City\",\"Profit per KM\"]).sort_values(by=\"Profit per KM\",ascending=False)\n    return profit_cities_per_km.head()\n\n# Yellow Cab profits per KM for each city\ndef yellow_pf():\n    yellow = cab_df[cab_df[\"Company\"] == \"Yellow Cab\" ][[\"City\",\"KM Travelled\",\"Price Charged\",\"Cost of Trip\"]]\n    cities = list(yellow.City.unique())\n    kms = []\n    pf = []\n  \n    for c in cities:\n        price = yellow[yellow[\"City\"] == c][\"Price Charged\"].sum()\n        cost = yellow[yellow[\"City\"] == c][\"Cost of Trip\"].sum()\n        profit = price-cost\n        pf.append(profit)\n        km = yellow[yellow[\"City\"] == c][\"KM Travelled\"].sum()\n        kms.append(km)\n\n  \n    km_np = np.array(kms)  \n    profit = np.array(pf)\n    per_km = profit\/km_np\n    zipped_data = zip(cities,per_km)\n    profit_cities_per_km = pd.DataFrame(zipped_data,columns=[\"City\",\"Profit per KM\"]).sort_values(by=\"Profit per KM\",ascending=False)\n    return profit_cities_per_km.head()\n\n# visualization\nf,ax = plt.subplots(figsize = (9,5))\nsns.barplot(x=pink_pf()[\"Profit per KM\"],y=pink_pf().City,color='pink',label='Pink Cab' )\nsns.barplot(x=yellow_pf()[\"Profit per KM\"],y=yellow_pf().City,color='yellow',alpha = 0.5,label='Yellow Cab')\n\nax.legend(loc='lower right',frameon = True) \nax.set(xlabel='Profits', ylabel='Cities',title = \"Profit Analyse for Top 5 City per KM\")\nplt.show()","642fdd0d":"# prepare data frame\ndate = list(cab_df[\"Date of Travel\"].str.split(\"-\"))\nyears = []\nfor y in date:\n    years.append(y[2])\ncab_df[\"Year\"] = years\n\nyears_list = cab_df[\"Year\"].unique()\ndef year_pink():\n    years = cab_df[\"Year\"].unique\n    p2016 = cab_df[(cab_df.Year == \"2016\") & (cab_df.Company == \"Pink Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n    p2017 = cab_df[(cab_df.Year == \"2017\") & (cab_df.Company == \"Pink Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n    p2018 = cab_df[(cab_df.Year == \"2018\") & (cab_df.Company == \"Pink Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n   \n    price_2016 = p2016[\"Price Charged\"].sum()\n    price_2017 = p2017[\"Price Charged\"].sum()\n    price_2018 = p2018[\"Price Charged\"].sum()\n\n    cost_2016 = p2016[\"Cost of Trip\"].sum()\n    cost_2017 = p2017[\"Cost of Trip\"].sum()\n    cost_2018 = p2018[\"Cost of Trip\"].sum()\n\n    profit_2016 = round((price_2016 - cost_2016),2)\n    profit_2017 = round((price_2017 - cost_2017),2)\n    profit_2018 = round((price_2018 - cost_2018),2)\n    profits = [profit_2016, profit_2017, profit_2018]\n    \n    return profits\n\n   \n\ndef year_yellow():\n    years = cab_df[\"Year\"].unique\n    y2016 = cab_df[(cab_df.Year == \"2016\") & (cab_df.Company == \"Yellow Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n    y2017 = cab_df[(cab_df.Year == \"2017\") & (cab_df.Company == \"Yellow Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n    y2018 = cab_df[(cab_df.Year == \"2018\") & (cab_df.Company == \"Yellow Cab\")][[\"Price Charged\",\"Cost of Trip\"]]\n    \n    price_2016 = y2016[\"Price Charged\"].sum()\n    price_2017 = y2017[\"Price Charged\"].sum()\n    price_2018 = y2018[\"Price Charged\"].sum()\n\n    cost_2016 = y2016[\"Cost of Trip\"].sum()\n    cost_2017 = y2017[\"Cost of Trip\"].sum()\n    cost_2018 = y2018[\"Cost of Trip\"].sum()\n\n    profit_2016 = round((price_2016 - cost_2016),2)\n    profit_2017 = round((price_2017 - cost_2017),2)\n    profit_2018 = round((price_2018 - cost_2018),2)\n    profits = [profit_2016, profit_2017, profit_2018]\n    \n    return profits\n   \n\nyellow = year_yellow()\npink = year_pink()\nzippedy = zip(yellow,years_list)\nzippedp = zip(pink,years_list)\n\ndatap = pd.DataFrame(zippedp,columns=[\"Profit\",\"Year\"])\ndatay = pd.DataFrame(zippedy,columns=[\"Profit\",\"Year\"])\n\n# # Data visualization\nimport plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=datay.Year, y=datay.Profit,\n                    mode='lines+markers',\n                    name='Yellow Cab'\n                    ))\nfig.add_trace(go.Scatter(x=datap.Year, y=datap.Profit,\n                    mode='lines+markers',\n                    name='Pink Cab'\n                     ))\nfig.update_layout(\n    title=\"Profits Per Year\",\n    xaxis_title=\"Years\",\n    yaxis_title=\"Profits\",\n    legend_title=\"Cab Companies\",\n)\n\nfig.show()","3f24eb86":"<a id=\"7\"><\/a>\n## BASIC DATA ANAYLSIS","6bde12f0":"<a id=\"6\"><\/a>\n## Numerical Variable Analysis","848a5574":"<a id=\"4\"><\/a>\n# Univeraite Variable Analysis\n#### Cab_Data\n* Categorical variable: Company, City\n* Numerical Variable: Transaction ID , Date of Travel, KM Travelled, Price Charged, Cost of Trip\n\n#### City\n* Categorical variable: None\n* Numerical Variable: Population, Users\n\n#### Customer_ID\n* Categorical variable: Gender, Age\n* Numerical Variable: Customer ID, Income\n\n#### Transaction_ID\n* Categorical variable: Payment_Mode\n* Numerical Variable: Transaction ID, Costumer ID","2ec6e9eb":"### Customer_ID\n1. Customer ID = Unique identify number for each passanger\n1. Gender = Gender of each passanger (Male\/Female)\n1. Age= Age of each passanger\n1. Income (USD\/Month) = Amount of income for each passanger","b8fb01cb":"<a id=2><\/a>\n# Dataset Description\n\nThis project includes 4 individual data sets. Time period of data is from 31\/01\/2016 to 31\/12\/2018.\n\nBelow are the list of datasets which are provided for the analysis:\n\n1. Cab_Data.csv \u2013 this file includes details of transaction for 2 cab companies\n\n1. Customer_ID.csv \u2013 this is a mapping table that contains a unique identifier which links the customer\u2019s demographic details\n\n1. Transaction_ID.csv \u2013 this is a mapping table that contains transaction to customer mapping and payment mode\n\n1. City.csv \u2013 this file contains list of US cities, their population and number of cab users","2f1f8603":"<a id=\"3\"><\/a>\n## Variable Description\n#### Cab_data\n1. Transaction ID = Unique identify number to each passanger for transaction\n1. Date of Travel\n1. Company = Preferred company for travel\n1. City = City of travel\n1. KM Travelled = Distance of travel\n1. Price Charged = Amount of money for travel\n1. Cost of Trip = Amount of cost for travel\n","af97bfc3":"### Transaction_ID\n1. Transaction ID = Unique identify number to each passanger for transaction\n1. Customer ID = Unique identify number for each passanger\n1. Payment_Mode = Payment type, might be  cash or card\n","b84826ff":"### City\n1. City = City names\n1. Population = Population of cities\n1. Users = Population of cab users for each city","31b77aef":"# Introduction\n\nXYZ is a private firm in US. Due to remarkable growth in the Cab Industry in last few years and multiple key players in the market, it is planning for an investment in Cab industry and as per their Go-to-Market(G2M) strategy they want to understand the market before taking final decision.\n\n<font color=\"blue\">\nContent:\n\n1. [Load and Check Data](#1)\n1. [Dataset Description](#2)\n    * [Variable Description](#3)\n    * [Univeraite Variable Analysis](#4)\n        * [Categorical Variable Analysis](#5)\n        * [Numerical Variable Analysis](#6)\n   \n1. [Basic Data Analysis](#7)\n\n   \n\n\n","a40311be":"<a id=\"1\"><\/a><br>\n# Load and Check Data","1c3a9156":"<a id=\"5\"><\/a>\n## Categorical Variable Analysis"}}