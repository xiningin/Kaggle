{"cell_type":{"f93f2eb3":"code","87aeda7b":"code","debab606":"code","245be144":"code","5ad1f2da":"code","15af475f":"code","007a028a":"code","6ae75664":"code","d94b2aef":"code","dfd09caa":"code","effa48ca":"code","83767ce6":"code","6344a85f":"code","ffcd1368":"code","c1a295d6":"code","f4ed92b8":"code","ae60bbc5":"code","eb632fbc":"code","3024e1cb":"code","62bbbc11":"code","059c7ffb":"code","952a7123":"code","0dd89f85":"code","ecec2cb7":"code","866d9479":"code","3dbad0d4":"code","4dd2fbc6":"code","25e94b4f":"code","5fb0b77d":"code","6d9eb26e":"code","aeaa29d6":"code","b4883048":"markdown","d7da8cee":"markdown","3d9d6fde":"markdown","b010e7f4":"markdown","9cda5ad8":"markdown","7bf0f8d0":"markdown","afc0e866":"markdown","bb4b959d":"markdown","02851d3d":"markdown","305e90a9":"markdown"},"source":{"f93f2eb3":"import numpy as np\nimport pandas as pd \nimport seaborn as sns\n# from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics","87aeda7b":"train_data = pd.read_csv(\"..\/input\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\nunchanged_data = test_data","debab606":"train_data.head()","245be144":"train_data.describe()","5ad1f2da":"train_data.isnull().sum()","15af475f":"Pclass_1_avg_age = train_data[train_data['Pclass']==1]['Age'].median()\nPclass_2_avg_age = train_data[train_data['Pclass']==2]['Age'].median()\nPclass_3_avg_age = train_data[train_data['Pclass']==3]['Age'].median()\n\ndef fill_age(age):\n    if str(age[5]).lower()=='nan':\n        if age[2]==1:\n            return Pclass_1_avg_age\n        elif age[2]==2:\n            return Pclass_2_avg_age\n        else:\n            return Pclass_3_avg_age\n    else:\n        return age[5]\n\ntrain_data['Age']=train_data.apply(fill_age,axis=1)","007a028a":"train_data['Embarked'].fillna(train_data['Embarked'].value_counts().index[0], inplace=True)","6ae75664":"train_data.isnull().sum()","d94b2aef":"train_data[\"Sex\"].value_counts()","dfd09caa":"# \u89c2\u5bdfSex\u4e0eSurvived\u7684\u5173\u7cfb\nsns.countplot(x = \"Sex\", hue =\"Survived\",data = train_data, palette = \"Blues\");","effa48ca":"# \u89c2\u5bdfPclass\u8239\u8231\u7b49\u7ea7\u4e0eSurvived\u7684\u5173\u7cfb\nsns.countplot(x = \"Pclass\", hue =\"Survived\",data = train_data, palette = \"Blues\");","83767ce6":"sns.countplot(x = \"Pclass\", hue =\"Sex\",data = train_data, palette = \"Blues\")","6344a85f":"sns.countplot(x = \"Parch\", hue =\"Survived\",data = train_data, palette = \"Blues\")","ffcd1368":"sns.countplot(x = \"Embarked\", hue=\"Survived\", data = train_data)","c1a295d6":"features = [\"Pclass\",\"Age\",\"Sex\",\"Fare\"]\ntrain_data[\"Family_Size\"] = train_data[\"SibSp\"] + train_data[\"Parch\"]\ny = train_data[\"Survived\"]  # y is label\ntrain_data = train_data[features]","f4ed92b8":"p = {1:'1st',2:'2nd',3:'3rd'} \ntrain_data['Pclass'] = train_data['Pclass'].map(p)","ae60bbc5":"categorical_df = train_data[['Pclass',\"Sex\"]]\none_hot_encode = pd.get_dummies(categorical_df,drop_first=True) \ntrain_data = train_data.drop(['Pclass',\"Sex\"],axis=1)\ntrain_data = pd.concat([train_data,one_hot_encode],axis=1)","eb632fbc":"from sklearn.model_selection import train_test_split\n\nX = train_data\n\ntrain_X, test_X, train_y, test_y = train_test_split(X,y,test_size=0.2,random_state=0) ","3024e1cb":"# \u4f7f\u7528\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\nclf = RandomForestClassifier(random_state = 0)\nclf.fit(train_X,train_y)","62bbbc11":"pred = clf.predict(test_X)","059c7ffb":"metrics.accuracy_score(test_y, pred)","952a7123":"confusion_matrix(test_y,pred)","0dd89f85":"test_data.head()","ecec2cb7":"test_data.isnull().sum()","866d9479":"Pclass_1_avg_age_test = test_data[test_data['Pclass']==1]['Age'].median()\nPclass_2_avg_age_test = test_data[test_data['Pclass']==2]['Age'].median()\nPclass_3_avg_age_test = test_data[test_data['Pclass']==3]['Age'].median()\n\ndef fill_age_kaggle(age):\n    if str(age[4]).lower()=='nan':\n        if age[1]==1:\n            return Pclass_1_avg_age_test\n        elif age[1]==2:\n            return Pclass_2_avg_age_test\n        else:\n            return Pclass_3_avg_age_test\n    else:\n        return age[4]","3dbad0d4":"#test_data['Age'].fillna(test_data['Age'].median(),inplace=True)\ntest_data['Age']=test_data.apply(fill_age_kaggle,axis=1)\ntest_data['Fare'].fillna(test_data['Fare'].median(),inplace=True)\ntest_data[\"Family_Size\"] = test_data[\"SibSp\"] + test_data[\"Parch\"]\np = {1:'1st',2:'2nd',3:'3rd'} \ntest_data['Pclass'] = test_data['Pclass'].map(p)\ntest_data = test_data[features]\ncategorical_df = test_data[['Pclass',\"Sex\"]]\none_hot_encode = pd.get_dummies(categorical_df,drop_first=True) \ntest_data = test_data.drop(['Pclass',\"Sex\"],axis=1)\ntest_data = pd.concat([test_data,one_hot_encode],axis=1)","4dd2fbc6":"kaggle_clf = RandomForestClassifier().fit(X,y)\nkaggle_pred = kaggle_clf.predict(test_data)","25e94b4f":"from sklearn.naive_bayes import MultinomialNB\n\nclf = MultinomialNB()\nclf.fit(X, y)\npredictions = clf.predict(test_X)\nprint(predictions)","5fb0b77d":"from sklearn.metrics import accuracy_score\n\nprint (accuracy_score(test_y, predictions))","6d9eb26e":"my_submission = pd.DataFrame({'PassengerId': unchanged_data.PassengerId, 'Survived': kaggle_pred})","aeaa29d6":"my_submission.to_csv('submission.csv', index=False)","b4883048":"# Exploratory Data Analysis","d7da8cee":"Note that we have more males than females on the ship","3d9d6fde":"# Training Model","b010e7f4":"\u4ee5\u4e0adescribe\u65b9\u6cd5\u663e\u793a\u7684\u90fd\u662f\u6570\u503c\u578b\u7684\u6570\u636e\u5217\u7684\u7edf\u8ba1\u60c5\u51b5\uff0c\u4e00\u4e9b\u6bd4\u5982\u8239\u8231\u3001\u4e0a\u8239\u6e2f\u53e3\u7b49object\u7c7b\u578b\u7684\u5217\u672a\u8fdb\u884c\u7edf\u8ba1\uff1b","9cda5ad8":"# Bayes Function","7bf0f8d0":"We see that 3 columns have null values. Let's deal with this first","afc0e866":"# train test split","bb4b959d":"# RandomForest","02851d3d":"# Feature engineering \u7279\u5f81\u5de5\u7a0b","305e90a9":"# Kaggle Submission"}}