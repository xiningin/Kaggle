{"cell_type":{"3ad0d49a":"code","13068668":"code","a3458b1c":"code","598b8085":"code","02679db4":"code","6ffbd3d1":"code","b28d4bf9":"code","ae74f8c6":"code","bd86ac7c":"code","51443843":"code","cde6b53a":"code","4cf7524d":"code","b52422fa":"code","311a6a2c":"code","26eaf2a0":"code","f431892f":"code","e0424292":"code","ac3d0141":"code","1a66a35e":"code","82ac4256":"code","09a5186e":"code","641556c5":"code","a1883a77":"code","e80239f4":"code","341f691b":"code","45a6892e":"code","fdd02dcb":"code","553fce65":"code","96b0e0d7":"code","17c7cbf9":"code","9fc0b7a5":"code","d2fc6483":"code","e29f2460":"code","ee49709e":"code","cf94f746":"code","1a9833d6":"code","ea570c32":"code","afcf500d":"code","5455e6f6":"code","bfbfca66":"code","64f4a37c":"code","c3100eb9":"code","df35a059":"code","56f0558d":"markdown","06a9a9b8":"markdown","d1de3b46":"markdown","ec09b93c":"markdown","85e4344e":"markdown","a21ebe1d":"markdown","fcecd9d5":"markdown","1981ce88":"markdown","5628a73c":"markdown","73d8f671":"markdown","042768a5":"markdown","7169ea1f":"markdown","0673e345":"markdown","cecaca87":"markdown","1db44876":"markdown","3af8a46b":"markdown","51485a89":"markdown","78382af1":"markdown","a549327e":"markdown","4629f17a":"markdown","46e06bcf":"markdown","0978a819":"markdown","a4dcc078":"markdown","79f14f39":"markdown","32dbc11d":"markdown","21852af6":"markdown","35042870":"markdown","e1a09fc8":"markdown","0be4b434":"markdown","fa669048":"markdown"},"source":{"3ad0d49a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","13068668":"# referred https:\/\/www.kaggle.com\/theoviel\/load-the-totality-of-the-data\ndtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float32',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int16',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'UacLuaenable':                                         'float64', # was 'float32'\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float32', # was 'float16'\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float32', # was 'float16'\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float64', # was 'float32'\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float64', # was 'float32'\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', # was 'float16'\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', # was 'float16'\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', # was 'float16'\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float64', # was 'float32'\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\ntrain = pd.read_csv('..\/input\/train.csv', dtype=dtypes)\ntrain.shape","a3458b1c":"droppable_features = []","598b8085":"(train.isnull().sum()\/train.shape[0]).sort_values(ascending=False)","02679db4":"droppable_features.append('PuaMode')\ndroppable_features.append('Census_ProcessorClass')","6ffbd3d1":"pd.options.display.float_format = '{:,.4f}'.format\nsk_df = pd.DataFrame([{'column': c, 'uniq': train[c].nunique(), 'skewness': train[c].value_counts(normalize=True).values[0] * 100} for c in train.columns])\nsk_df = sk_df.sort_values('skewness', ascending=False)\nsk_df","b28d4bf9":"droppable_features.extend(sk_df[sk_df.skewness > 99].column.tolist())\ndroppable_features","ae74f8c6":"# PuaMode is duplicated in the two categories.\ndroppable_features.remove('PuaMode')\n\n# Drop these columns.\ntrain.drop(droppable_features, axis=1, inplace=True)","bd86ac7c":"# Nan Values\nnull_counts = train.isnull().sum()\nnull_counts = null_counts \/ train.shape[0]\nnull_counts[null_counts > 0.1]","51443843":"train.DefaultBrowsersIdentifier.value_counts().head(5)","cde6b53a":"train.DefaultBrowsersIdentifier.fillna(0, inplace=True)","4cf7524d":"train.SmartScreen.value_counts()","b52422fa":"trans_dict = {\n    'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', \n    'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', \n    '00000000': '0', '&#x03;': '3', np.nan: 'NoExist'\n}\ntrain.replace({'SmartScreen': trans_dict}, inplace=True)","311a6a2c":"train.SmartScreen.isnull().sum()","26eaf2a0":"train.OrganizationIdentifier.value_counts()","f431892f":"train.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)","e0424292":"pd.options.display.max_rows = 99\ntrain.Census_InternalBatteryType.value_counts()","ac3d0141":"trans_dict = {\n    '\u001f\u02d9\u02d9\u02d9': 'unknown', 'unkn': 'unknown', np.nan: 'unknown'\n}\ntrain.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)","1a66a35e":"train.shape","82ac4256":"train.dropna(inplace=True)\ntrain.shape","09a5186e":"train.drop('MachineIdentifier', axis=1, inplace=True)","641556c5":"train['SmartScreen'] = train.SmartScreen.astype('category')\ntrain['Census_InternalBatteryType'] = train.Census_InternalBatteryType.astype('category')\n\ncate_cols = train.select_dtypes(include='category').columns.tolist()\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor col in cate_cols:\n    train[col] = le.fit_transform(train[col])\n","a1883a77":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n%time\ntrain = reduce_mem_usage(train)","e80239f4":"cols = train.columns.tolist()","341f691b":"import seaborn as sns\n\nplt.figure(figsize=(10,10))\nco_cols = cols[:10]\nco_cols.append('HasDetections')\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between 1 ~ 10th columns')\nplt.show()","45a6892e":"corr_remove = []","fdd02dcb":"co_cols = cols[10:20]\nco_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between 11 ~ 20th columns')\nplt.show()","553fce65":"print(train.Platform.nunique())\nprint(train.OsVer.nunique())","96b0e0d7":"corr_remove.append('Platform')","17c7cbf9":"co_cols = cols[20:30]\nco_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between 21 ~ 30th columns')\nplt.show()","9fc0b7a5":"co_cols = cols[30:40]\nco_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between 31 ~ 40th columns')\nplt.show()","d2fc6483":"co_cols = cols[40:50]\nco_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('Correlation between 41 ~ 50th columns')\nplt.show()","e29f2460":"co_cols = cols[50:60]\nco_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0)\nplt.title('Correlation between 51 ~ 60th columns')\nplt.show()","ee49709e":"print(train.Census_OSEdition.nunique())\nprint(train.Census_OSSkuName.nunique(), '\\n')\nprint(train.Census_OSInstallLanguageIdentifier.nunique())\nprint(train.Census_OSUILocaleIdentifier.nunique())\n","cf94f746":"corr_remove.append('Census_OSSkuName')\ncorr_remove.append('Census_OSInstallLanguageIdentifier')","1a9833d6":"co_cols = cols[60:]\n#co_cols.append('HasDetections')\nplt.figure(figsize=(10,10))\nsns.heatmap(train[co_cols].corr(), cmap='RdBu_r', annot=True, center=0)\nplt.title('Correlation between from 61th to the last columns')\nplt.show()","ea570c32":"corr_remove","afcf500d":"train.drop(corr_remove, axis=1, inplace=True)","5455e6f6":"corr = train.corr()\nhigh_corr = (corr >= 0.99).astype('uint8')\nplt.figure(figsize=(15,15))\nsns.heatmap(high_corr, cmap='RdBu_r', annot=True, center=0.0)\nplt.show()\n","bfbfca66":"print(train.Census_OSArchitecture.nunique())\nprint(train.Processor.nunique())","64f4a37c":"train[['Census_OSArchitecture', 'Processor', 'HasDetections']].corr()","c3100eb9":"corr_remove.append('Processor')","df35a059":"droppable_features.extend(corr_remove)\nprint(len(droppable_features))\ndroppable_features","56f0558d":"Nothing here.","06a9a9b8":"# 1. Load Data","d1de3b46":"* `Platform` vs `OsVer` : remove **`Platform`**","ec09b93c":"`Census_OSArchitecture` and `Processor` have the same length of unique values. Then which one? Let's compare their correlation to the `HasDetections`.","85e4344e":"Now we have got 3 columns to remove from correlations of 10-group features.","a21ebe1d":"Compare and choose the feature which has less unique values.","fcecd9d5":"Replace missing values with 0.","1981ce88":"There is no columns which have 0.99+ correlation.","5628a73c":"* There are 2 columns which have more than 99% of missing values and they are useless.","73d8f671":"Reduce the memory by codes from https:\/\/www.kaggle.com\/timon88\/load-whole-data-without-any-dtypes","042768a5":"### Fill missing values for columns that have more than 10% of missing values","7169ea1f":"Nearly 14% of data has been removed. But I have to think about how to deal with missing values of test dataset...","0673e345":"MachineIdentifier is not useful for prediction of malware detection.","cecaca87":"### This column has ID numbers and I think 0 can represent unknown\/NA values.","1db44876":"Nothing.","3af8a46b":"Nothing.","51485a89":"# 2. Feature Engineering\n\n## 2.1 mostly-missing Columns","78382af1":"### Label Encoding for category columns","a549327e":"### 4 columns above should be filled missing values.","4629f17a":"### Remove missing values from the train.","46e06bcf":"### Census_InternalBatteryType has 75+% of missing values as well as \"\u001f\u02d9\u02d9\u02d9\" and \"unkn\" values which seem to mean \"unknown\". So replace these values with \"unknown\".","0978a819":"No features whose correlation is 0.99+.","a4dcc078":" # You can remove 17 columns at the Beginning!!\n\nAs the data is highly dimensional in this competition, it is really difficult to do even a little thing. So, before you begin any work, read this kernel and save your time!\n\nI have tried to reduce the column dimension by eliminating less useful columns and selected 17 columns which you can remove just after loading the data sets.\n\n* Selected `mostly-missing feaures` which have more than 99% of missing values.\n* Selected `too-skewed features` whose majority categories cover more than 99% of occurences.\n* Selected `hightly-correlated features`. Tested correlations between columns, picked up pairs whose corr is greater than 0.99, compared the distribution of the features in the pairs and corr with `HasDetections`,  and selected the minor column for elimination.\n\n**You can eliminate 17 columns without worry:**\n1. (M) PuaMode\n1. (M) Census_ProcessorClass\n1. (S) Census_IsWIMBootEnabled\n1. (S) IsBeta\n1. (S) Census_IsFlightsDisabled\n1. (S) Census_IsFlightingInternal\n1. (S) AutoSampleOptIn\n1. (S) Census_ThresholdOptIn\n1. (S) SMode\n1. (S) Census_IsPortableOperatingSystem\n1. (S) Census_DeviceFamily\n1. (S) UacLuaenable\n1. (S) Census_IsVirtualDevice\n1. (C) Platform\n1. (C) Census_OSSkuName\n1. (C) Census_OSInstallLanguageIdentifier\n1. (C) Processor\n\nHere, (M) denotes `mostly-missing feaures`, (S) means  `too-skewed features`, and (C) indicates `hightly-correlated features`.\n\n\n\n**Use this code:**\n\n> remove_cols = ['PuaMode', 'Census_ProcessorClass', 'Census_IsWIMBootEnabled', 'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal', 'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode', 'Census_IsPortableOperatingSystem',  'Census_DeviceFamily', 'UacLuaenable', 'Census_IsVirtualDevice', 'Platform', 'Census_OSSkuName', 'Census_OSInstallLanguageIdentifier', 'Processor']\n>\n> train.drop(remove_cols, axis=1, inplace=True)\n>\n> test.drop(remove_cols, axis=1, inplace=True)\n\n\n## If you want to see how I got this:\nIn this kernel, I used only train dataset but the result was the same when I used train+test dataset.","79f14f39":"## 17 columns can be removed at the beginning.","32dbc11d":"They seem to be totally same, so anything is OK to remove.\n\n* `Census_OSArchitecture` vs `Processor`: remove **`Processor`**","21852af6":"Now, find cross-group correlated features.","35042870":"## 2.3 Highly correlated features.\n\nAs there are still too many features, it is bad to calculate and look at all the correlations at once. So, I grouped them by 10 columns and considered their correlations, and finally calculated all the correlation of remaining features.","e1a09fc8":"* There are 12 categorical columns whose majority category covers more than 99% of occurences, and they are useless, too.","0be4b434":"* `Census_OSEdition` vs `Census_OSSkuName`:  remove **`Census_OSSkuName`**\n* `Census_OSInstallLanguageIdentifier` vs `Census_OSUILocaleIdentifier`: remove **`Census_OSInstallLanguageIdentifier`**","fa669048":"## 2.2 Too skewed columns"}}