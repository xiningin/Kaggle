{"cell_type":{"fe16416e":"code","733650b2":"code","f6cf77aa":"code","8409daf8":"code","0e365ab0":"code","735002d7":"code","4cebc485":"code","e3a1b4a1":"code","fec7753c":"code","c287677f":"code","df739bdb":"code","bffbdec7":"code","1bde1de3":"code","0a6a0dfe":"code","79e15f67":"code","4dd2d91e":"code","7daf4e29":"code","c8747826":"code","d2e1e6a0":"code","fb53ba96":"code","5f0b4a3b":"code","eed4d394":"code","30ef0789":"code","e05fac63":"code","149f4cae":"code","eed575a6":"code","52c89090":"code","05b5537c":"code","51bc643b":"code","144ec3d0":"code","d5fffaf5":"code","ade06a6d":"code","e6337626":"code","e78cef1c":"code","6d35465f":"code","cdbd5628":"code","346f92ca":"code","4e282253":"code","c807a80e":"code","8c283ee3":"code","8271c42f":"code","76861cd9":"code","0a232e6b":"code","e17832a6":"code","f019cc2d":"code","0daf13ce":"code","7390c876":"code","d017fbda":"code","d89a684c":"code","89e91f98":"code","0e529d84":"code","18db2ae8":"code","1fb9b058":"code","7edfe19e":"code","92bc5ddb":"code","13667849":"code","a9201b39":"code","71e367bf":"code","b0383acc":"code","16e4c271":"code","aa6d3f4c":"code","479b6b72":"code","f839ae0d":"code","edd6a954":"code","4247c629":"code","8d430701":"code","9abee080":"code","e1188277":"code","2740f393":"code","3254325e":"code","51f3e60d":"code","0c2e3cfa":"code","0ed7ab7b":"code","32a91cb1":"code","b39eb588":"code","664d08bc":"code","c717348a":"markdown","c9c8fbbe":"markdown","6e758431":"markdown","849f1837":"markdown","d6705927":"markdown","3f1eaf1d":"markdown","ff803e58":"markdown"},"source":{"fe16416e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","733650b2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n%matplotlib inline\nimport warnings as war\nwar.filterwarnings(\"ignore\")\nsb.set(color_codes=True)\nsb.set(rc={'figure.figsize':(11.7,8.27)})","f6cf77aa":"train=pd.read_csv(\"\/kaggle\/input\/personal-loan-modeling\/Bank_Personal_Loan_Modelling.csv\")\ntrain.head(5)","8409daf8":"train.lt(0).any()","0e365ab0":"## Experience field have some negative values","735002d7":"train.loc[train['Experience']<0,'Experience']=0\ntrain.lt(0).any()","4cebc485":"train.isnull().sum()","e3a1b4a1":"## Dataset has no NaN values","fec7753c":"train.head()","c287677f":"s=train['Age'].value_counts().head(25)\nax=s.plot.bar(width=.9,color=\"Green\") \nplt.xlabel(\"Age\")\nplt.ylabel(\"Count\")\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.Age + 1.5, v.Age, color='green',rotation=90)","df739bdb":"s=train['Experience'].value_counts().head(25)\nax=s.plot.bar(width=.9,color=\"Purple\") \nplt.xlabel(\"Experience\")\nplt.ylabel(\"Count\")\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.Experience + 1.5, v.Experience, color='Purple',rotation=90)","bffbdec7":"s=train['Income'].value_counts().head(25)\nax=s.plot.bar(width=.9,color=\"Indigo\") \nplt.xlabel(\"Income in Dollar\")\nplt.ylabel(\"Count\")\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.Income + 1.5, v.Income, color='Indigo',rotation=90)","1bde1de3":"sb.scatterplot(x=\"Personal Loan\",y=\"Income\",data=train,hue=\"Personal Loan\")","0a6a0dfe":"maxii=train.loc[(train['Personal Loan']==1),'Income'].max()\nminii=train.loc[(train['Personal Loan']==1),'Income'].min()\nprint(maxii)\nprint(minii)","79e15f67":"\nsb.lineplot(x=\"Age\",y=\"Experience\",data=train,marker='.',markersize=12,ci=None,color='red')","4dd2d91e":"sb.lineplot(x=\"Experience\",y=\"Income\",data=train,color='black',ci=None,marker='*',markersize=12)","7daf4e29":"sb.lineplot(x=\"Age\",y=\"Income\",data=train,color='green',ci=None,marker='o',markersize=10)","c8747826":"sb.scatterplot(x=\"Income\",y=\"Mortgage\",hue=\"Mortgage\",data=train)","d2e1e6a0":"sb.stripplot(x=\"Personal Loan\",y=\"Mortgage\",data=train)","fb53ba96":"sb.stripplot(x=\"Education\",y=\"Mortgage\",data=train,hue=\"Education\")","5f0b4a3b":"sb.scatterplot(x=\"Family\",y=\"Mortgage\",data=train,hue=\"Family\")","eed4d394":"s=train.Family[train['Personal Loan']==1].value_counts().sort_index()\n#ax=plot(kind='bar',alpha=0.5,color=\"Orange\")\ncol=['Red','Green','Indigo','Orange']\nax=s.plot.bar(width=.9,color=col) \nplt.xlabel(\"Family\")\nplt.ylabel(\"Count of taken Personal Loan\")\nfor i, v in s.reset_index().iterrows():\n    ax.text(i, v.Family + 1.5, v.Family, color='Indigo')","30ef0789":"## We can see that 3,4 family size are above average. So we can assume that maximum response will be coming from these twos.","e05fac63":"train['Active']=0","149f4cae":"train.loc[((train['Securities Account']==1)|(train['CD Account']==1)|(train['Online']==1)|(train['CreditCard']==1)),'Active']=1","eed575a6":"train.head()","52c89090":"sb.stripplot(y=\"Income\",x=\"Active\",data=train)","05b5537c":"\ntrain['Response']=0","51bc643b":"train.loc[((train['Family']==3)|(train['Family']==4)),'Response']=1\ntrain.head(10)","144ec3d0":"## We can also add response of those who did response in last personal loan campaign.","d5fffaf5":"## Now we will do the IQR range query for finding the ourliers of mortgage (Those did not response to last personal loan campaign but took mortgage. And we can't ignore them fully).","ade06a6d":"test=pd.DataFrame(train.loc[(((train['Family']==1)|(train['Family']==2))&(train['Mortgage']!=0)),'Mortgage'])","e6337626":"test.head()","e78cef1c":"test.shape","6d35465f":"sb.boxplot(x=test['Mortgage'])","cdbd5628":"Q1 = test.quantile(0.25)\nQ3 = test.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","346f92ca":"test = test[~((test < (Q1-1.5 * IQR)) |(test > (Q3 + 1.5 * IQR))).any(axis=1)]","4e282253":"test.shape","c807a80e":"first=Q1-1.5 * IQR\nsecond=Q3 + 1.5 * IQR","8c283ee3":"print(first)\nprint(second)","8271c42f":"## After removing some outliers\nsb.boxplot(x=test['Mortgage'])","76861cd9":"train.loc[((train['Mortgage']==0)&(train['Active']==1)),'Response']=1\ntrain.head(10)","0a232e6b":"train.loc[(((train['Family']==1)&(train['Family']==2))&((train['Mortgage']>=second[0])&(train['Mortgage']<=first[0]))),'Response']=1","e17832a6":"train.head(10)","f019cc2d":"train['Mon_Income']=(train['Income']\/12.0)","0daf13ce":"train.head(10)","7390c876":"train['Ultimate']=(train['Mon_Income']-train['CCAvg'])","d017fbda":"train.head(10)","d89a684c":"sb.boxplot(x=train['Ultimate'],color='orange')","89e91f98":"train['Ultimate'].shape","0e529d84":"(train['Response']>0).sum()","18db2ae8":"tesst=pd.DataFrame(train['Ultimate'])","1fb9b058":"Q1 = tesst.quantile(0.25)\nQ3 = tesst.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","7edfe19e":"tesst = tesst[~((tesst < (Q1-1.5 * IQR)) |(tesst > (Q3 + 1.5 * IQR))).any(axis=1)]\ntesst.head(10)","92bc5ddb":"fifi=tesst['Ultimate'].max()\nsisi=tesst['Ultimate'].min()","13667849":"## After removing some outliers\nsb.boxplot(x=tesst['Ultimate'],color='indigo')","a9201b39":"tesst.shape","71e367bf":"train.loc[((train['Ultimate']>=fifi)&(train['Ultimate']<=sisi)),'Response']=1","b0383acc":"train.head(10)\n","16e4c271":"(train['Response']>0).sum()","aa6d3f4c":"sizes_ = train.groupby(['Response']).size().reset_index(name='Count')\nprint(sizes_)\n\nlabels_ = sizes_['Response'].to_list()\nprint(labels_)\ncolors=[\"red\",\"green\"]\ncounter_ = sizes_['Count'].to_list()\nprint(counter_)\ntotal = sum([int(v) for v in counter_])\nprint(total)\nperchange = [(v\/total)*100 for v in counter_]\nprint(perchange)\nfig, ax1 = plt.subplots()\nax1.pie(perchange,labels=labels_,autopct='%1.1f%%',shadow=True, startangle=90,colors=colors)\nax1.axis('equal')\nplt.show()","479b6b72":"plt.figure(figsize=(15,10))\nc= train.corr()\nsb.heatmap(c,cmap=\"BrBG\",annot=True)","f839ae0d":"target=train['Response']\ntrain=train.drop(['Response'],axis=1)\ntarget","edd6a954":"from sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\n#no of features\nnof_list=np.arange(1,17)            \nhigh_score=0\n#Variable to store the optimum features\nnof=0           \nscore_list =[]\nfor n in range(len(nof_list)):\n    X_train, X_test, y_train, y_test = train_test_split(train,target, test_size = 0.3, random_state = 42)\n    model = LinearRegression()\n    rfe = RFE(model,nof_list[n])\n    X_train_rfe = rfe.fit_transform(X_train,y_train)\n    X_test_rfe = rfe.transform(X_test)\n    model.fit(X_train_rfe,y_train)\n    score = model.score(X_test_rfe,y_test)\n    score_list.append(score)\n    if(score>high_score):\n        high_score = score\n        nof = nof_list[n]\nprint(\"Optimum number of features: %d\" %nof)\nprint(\"Score with %d features: %f\" % (nof, high_score))","4247c629":"cols = list(train.columns)\nmodel = LinearRegression()\n#Initializing RFE model\nrfe = RFE(model, 14)             \n#Transforming data using RFE\nX_rfe = rfe.fit_transform(train,target)  \n#Fitting the data to model\nmodel.fit(X_rfe,target)              \ntemp = pd.Series(rfe.support_,index = cols)\nselected_features_rfe = temp[temp==True].index\nprint(selected_features_rfe)","8d430701":"train = train.rename(columns={\"ZIP Code\": \"ZIP_Code\", \"Personal Loan\": \"Personal_Loan\",\n\"Securities Account\": \"Securities_Account\",\"CD Account\": \"CD_Account\"})\ntrain.head()","9abee080":"new_train=train.drop(['ZIP_Code','ID','Mon_Income'],axis=1).copy()\nnew_train.head()","e1188277":"x_train,x_test,y_train,y_test=train_test_split(new_train,target,test_size=0.3,random_state=42)","2740f393":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler().fit(x_train)\nx_train=scaler.transform(x_train)\nscaler=StandardScaler().fit(x_test)\nx_test=scaler.transform(x_test)","3254325e":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","51f3e60d":"log_reg = LogisticRegression(random_state=42)\nlog_reg.fit(x_train, y_train)\nprint(\"Accuracy: \", log_reg.score(x_test,y_test))","0c2e3cfa":"svm_clsf = SVC()\nsvm_clsf.fit(x_train, y_train)\nprint(\"Accuracy: \", svm_clsf.score(x_test,y_test))","0ed7ab7b":"best_knn = []\nfor n in range(1,14):\n    knn = KNeighborsClassifier(n_neighbors=n)\n    knn.fit(x_train, y_train)\n    best_knn.insert(n, knn.score(x_test,y_test))\nbest_knn","32a91cb1":"knn_clsf = KNeighborsClassifier(n_neighbors=4)\nknn_clsf.fit(x_train, y_train)\nprint(\"Accuracy: \", knn_clsf.score(x_test,y_test))","b39eb588":"voting_classfication = VotingClassifier(estimators = [('knn', knn_clsf),('lg', log_reg), ('svc', svm_clsf)], voting=\"hard\", n_jobs=-1)\nvoting_classfication.fit(x_train, y_train)\nprint(\"Accuracy: \", voting_classfication.score(x_test,y_test))","664d08bc":"from sklearn.svm import SVC\nclas = SVC(kernel = 'linear', random_state = 0)\nclas.fit(x_train, y_train)\nprint(\"Accuracy: \",clas.score(x_test,y_test))","c717348a":"Now doing dataset splitting.","c9c8fbbe":"Now doing feature selection for selecting some important features and train model with them.\n\n\nUsing Wapper Method (Recursive Feature Elimination)","6e758431":"**Exploratory Data Analysis**","849f1837":"Training Model","d6705927":"**Data Cleaning**","3f1eaf1d":"Feature Selection\n","ff803e58":"Data Preprocessing."}}