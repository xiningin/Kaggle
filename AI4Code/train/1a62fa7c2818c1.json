{"cell_type":{"d63f997b":"code","f965de3f":"code","92544fd8":"code","99afab44":"code","8903c047":"code","e2b2de78":"code","a97ba10c":"code","be511bde":"code","d2037549":"markdown","f03eed74":"markdown","205cbd70":"markdown","f015b15b":"markdown"},"source":{"d63f997b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f965de3f":"#imports\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D,Dropout,Flatten,Dense,BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2","92544fd8":"un = '\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected\/C100P61ThinF_IMG_20150918_144104_cell_131.png'\ninf = '\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized\/C100P61ThinF_IMG_20150918_144104_cell_164.png'\nplt.figure(1, figsize = (15 , 7))\nplt.subplot(1 , 2 , 1)\nplt.imshow(cv2.imread(un))\nplt.title('Uninfected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.subplot(1 , 2 , 2)\nplt.imshow(cv2.imread(inf))\nplt.title('Infected Cell')\nplt.xticks([]) , plt.yticks([])\n\nplt.show()","99afab44":"datagen = ImageDataGenerator(rescale=1\/255.0,\n                                      #zoom_range=0.2,\n                                      #horizontal_flip=True,\n                                      #vertical_flip=True,\n                                      #width_shift_range=0.2,\n                                      #height_shift_range=0.2,\n                                      validation_split=0.2\n                                      )\n\ntrain_data = datagen.flow_from_directory('\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                                     target_size=(128,128),\n                                                     batch_size=128,\n                                                     class_mode = 'binary',\n                                                     subset = 'training')\n\nvalidation_data = datagen.flow_from_directory('\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n                                                     target_size=(128,128),\n                                                     batch_size=128,\n                                                     class_mode = 'binary',\n                                                     subset = 'validation')","8903c047":"\nmodel = Sequential([\n    \n    # Block One\n    Conv2D(filters=64, kernel_size=3, activation='relu', input_shape=(128,128,3)),\n    Conv2D(filters=64, kernel_size=3, activation='relu',padding='same'),\n    MaxPool2D((2,2)),\n\n    # Block Two\n    BatchNormalization(),\n    Dropout(0.3),\n    Conv2D(filters=64, kernel_size=3, activation='relu',padding='same'),\n    Dropout(0.3),\n    Conv2D(filters=64, kernel_size=3, activation='relu',padding='same'),\n    MaxPool2D((2,2)),\n\n    # Block Three\n    BatchNormalization(),\n    Dropout(0.5),\n    Conv2D(filters=128, kernel_size=3, activation='relu',padding='same'),\n    Dropout(0.4),\n    Conv2D(filters=128, kernel_size=3, activation='relu',padding='same'),\n    Dropout(0.5),\n    Conv2D(filters=128, kernel_size=3, activation='relu',padding='same'),\n    Dropout(0.4),\n    Conv2D(filters=128, kernel_size=3, activation='relu',padding='same'),\n    MaxPool2D((2,2)),\n\n    # Head\n    Flatten(),\n    Dense(64, activation='relu'),\n    Dropout(0.2),\n    Dense(1, activation='sigmoid'),\n])\n\n\nmodel.summary()","e2b2de78":"early_stopping = EarlyStopping(\n    monitor='val_loss',\n    min_delta=0.001, # minimium amount of change to count as an improvement\n    patience=3, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)\n\nmodel.compile(optimizer=\"adam\",\n              loss='binary_crossentropy',\n              metrics=['accuracy'])","a97ba10c":"history = model.fit_generator(generator = train_data,\n                             steps_per_epoch = len(train_data),\n                              epochs =20,\n                              validation_data = validation_data,\n                              validation_steps=len(validation_data),\n                             callbacks=early_stopping)","be511bde":"history_df = pd.DataFrame(history.history)\nhistory_df.loc[:,['loss','val_loss']].plot()\nhistory_df.loc[:,['accuracy','val_accuracy']].plot()","d2037549":"# Defining the Model","f03eed74":"# Training the Model","205cbd70":"# Defining ImageGenerators for training and vaidation Data","f015b15b":"**Looking at some images**"}}