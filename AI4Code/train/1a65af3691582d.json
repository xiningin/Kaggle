{"cell_type":{"d611e504":"code","1ae2e614":"code","ff958947":"code","989dd961":"code","d5e94805":"code","9edaee3d":"code","28f309f8":"code","7d151ddd":"code","24bc77cb":"code","4cb1d4a9":"code","284082c5":"code","c5b427eb":"code","90aa9cf4":"code","97d84e0f":"code","97d8b206":"code","b841a2b4":"code","86e71cff":"code","4edd1844":"code","420cb3fc":"code","7dbf3809":"code","a1ace1e3":"code","4bd12358":"code","23801cea":"code","cb6a517d":"code","1ad574d7":"code","991392fb":"code","85ac1376":"code","dfdfc33e":"code","80b9741a":"code","3843ec6e":"code","ce00aa04":"code","582fe73c":"code","13f13779":"code","262b84d6":"code","64d5b295":"code","9c786939":"code","f29dcb29":"code","0b1eec7f":"code","edbfa097":"code","8aa302af":"code","15ab3167":"code","277581ca":"markdown","9b68d1a0":"markdown","fc9a3652":"markdown","60f07f9e":"markdown","7095a15f":"markdown","e8d61770":"markdown","fb9c895b":"markdown","5949644a":"markdown","dc69e5b9":"markdown","2e0c018b":"markdown","cec4cdb3":"markdown","8ee2232b":"markdown","8769a576":"markdown","4f3c7e59":"markdown","bdd3d0c9":"markdown","8e72c0e0":"markdown","be8cd746":"markdown","16b518a3":"markdown","1dd48d9a":"markdown","c8f72d9a":"markdown","4b8902b6":"markdown","85038640":"markdown"},"source":{"d611e504":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-whitegrid')\nsns.set_style('whitegrid')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1ae2e614":"anime=pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/anime.csv')\nrating=pd.read_csv('\/kaggle\/input\/anime-recommendations-database\/rating.csv')","ff958947":"def first_look(df):\n    print('dataset shape: \\n')\n    print('number of rows: ',df.shape[0],' number of columns: ',df.shape[1])\n    print('dataset column names: \\n')\n    print(df.columns)\n    print('columns data-type')\n    print(df.dtypes)\n    print('missing data')\n    c=df.isnull().sum()\n    print(c[c>0])","989dd961":"first_look(anime)","d5e94805":"first_look(rating)","9edaee3d":"anime['episodes']=anime['episodes'].replace('Unknown',np.nan)\nanime['episodes']=anime['episodes'].astype(float)","28f309f8":"shared_id=anime[anime['anime_id'].isin(rating['anime_id'])]\nshared_id['rating'].isnull().sum()","7d151ddd":"for i,j in zip(shared_id[shared_id['rating'].isnull()].index,shared_id[shared_id['rating'].isnull()]['anime_id'].values):\n    median_value=rating[rating['anime_id']==j]['rating'].median()\n    print('median value: ',median_value)\n    anime.loc[i,'rating']=median_value\n    print('index {} done!'.format(str(i)))","24bc77cb":"anime.dropna(subset=['rating'],axis=0,inplace=True)","4cb1d4a9":"anime['genre']=anime['genre'].str.replace(', ',',')","284082c5":"anime=anime.drop_duplicates('name')","c5b427eb":"anime['type'].value_counts().plot.pie(autopct='%.1f%%',labels=None,shadow=True,figsize=(8,8))\nplt.title('type of Animes in dataset')\nplt.ylabel('')\nplt.legend(anime['type'].value_counts().index.tolist(),loc='upper right')\nplt.show()","90aa9cf4":"plt.figure(figsize=(10,5))\nsns.boxplot(x='type',y='rating',data=anime)\nplt.title('anime-type VS rating')\nplt.show()","97d84e0f":"for i in anime['type'].unique().tolist():\n    print('mean of '+str(i)+' :\\n')\n    print(anime[anime['type']==i]['rating'].mean())","97d8b206":"TV_anime=anime[anime['type']=='TV']\nTV_anime['genre'].value_counts().sort_values(ascending=True).tail(20).plot.barh(figsize=(8,8))\nplt.title('genres of TV-Animes')\nplt.xlabel('frequency')\nplt.ylabel('genres')\nplt.show()","b841a2b4":"TV_anime.drop('anime_id',axis=1).describe()","86e71cff":"TV_anime[TV_anime['episodes']==TV_anime['episodes'].max()]","4edd1844":"TV_anime[TV_anime['episodes']==TV_anime['episodes'].min()]","420cb3fc":"TV_anime[TV_anime['rating']==TV_anime['rating'].max()]","7dbf3809":"TV_anime[TV_anime['rating']==TV_anime['rating'].min()]","a1ace1e3":"TV_anime[TV_anime['members']==TV_anime['members'].max()]","4bd12358":"TV_anime[TV_anime['members']==TV_anime['members'].min()]","23801cea":"fig=plt.figure(figsize=(13,5))\nfor i,j in zip(TV_anime[['rating','members']].columns,range(3)):\n    ax=fig.add_subplot(1,2,j+1)\n    sns.distplot(TV_anime[i],ax=ax)\n    plt.axvline(TV_anime[i].mean(),label='mean',color='blue')\n    plt.axvline(TV_anime[i].median(),label='median',color='green')\n    plt.axvline(TV_anime[i].std(),label='std',color='red')\n    plt.title('{} distribtion'.format(i))\n    plt.legend()\nplt.show()","cb6a517d":"fig=plt.figure(figsize=(13,5))\nfor i,j in zip(TV_anime[['rating','members']].columns,range(3)):\n    ax=fig.add_subplot(1,2,j+1)\n    sns.boxplot(i,data=TV_anime,ax=ax)\n    plt.title('{} distribtion'.format(i))\nplt.show()","1ad574d7":"import json\nstats=TV_anime.drop('anime_id',axis=1).describe()\ndef show_outliers(df,col): \n    outliers={}\n    for j,k in zip(df[col].index,df[col].tolist()):\n        iqr=stats.loc['75%',col]-stats.loc['25%',col]\n        upper_bound=stats.loc['75%',col]+iqr*1.5\n        lower_bound=stats.loc['25%',col]-iqr*1.5\n        if k>upper_bound :\n            outliers[k]=['upper',df.loc[j,'name'],df.loc[j,'genre']]\n        elif k<lower_bound:\n            outliers[k]=['lower',df.loc[j,'name'],df.loc[j,'genre']]\n    outliers=json.dumps(outliers)        \n    print(outliers)\nfor i in TV_anime[['rating']].columns:\n    print(i)\n    print('-'*10)\n    show_outliers(TV_anime,i)","991392fb":"iqr=stats.loc['75%','episodes']-stats.loc['25%','episodes']\nupper_bound=stats.loc['75%','episodes']+iqr*1.5\nlower_bound=stats.loc['25%','episodes']-iqr*1.5\nepisodes_lst=[]\nfor i in TV_anime['episodes'].values:\n    if i<lower_bound:\n        episodes_lst.append('small')\n    elif i>upper_bound:\n        episodes_lst.append('large')\n    elif (i>lower_bound) and (i<upper_bound):\n        episodes_lst.append('in-between')\n    else:\n        episodes_lst.append('no info!')\nTV_anime['episodes_classification']=episodes_lst","85ac1376":"TV_anime.head()","dfdfc33e":"mean_lst=[]\nmean_lst.append(TV_anime[TV_anime['episodes_classification']=='in-between']['rating'].mean())\nmean_lst.append(TV_anime[TV_anime['episodes_classification']=='small']['rating'].mean())\nmean_lst.append(TV_anime[TV_anime['episodes_classification']=='large']['rating'].mean())\nmean_lst.append(TV_anime[TV_anime['episodes_classification']=='no info!']['rating'].mean())\nplt.bar(['in-between','small','large','no info!'],mean_lst)\nplt.title('mean comparison based on episodes classification')\nplt.xlabel('episodes_classification')\nplt.ylabel('average-rating')\nplt.show()","80b9741a":"TV_anime.drop('episodes_classification',axis=1,inplace=True)","3843ec6e":"TV_animes_df=TV_anime.copy()\nTV_animes_df['genre']=TV_animes_df['genre'].str.split(',')\nTV_animes_df.head()","ce00aa04":"for index, lst in zip(TV_animes_df.index,TV_animes_df['genre'].values):\n    for genre in lst:\n        TV_animes_df.at[index, genre] = 1\n#Filling in the NaN values with 0 to show that a movie doesn't have that column's genre","582fe73c":"TV_animes_df = TV_animes_df.fillna(0)\nTV_animes_df.head()","13f13779":"user_input=pd.DataFrame([{'name':'Fullmetal Alchemist: Brotherhood','user_rating':8.6},\n                        {'name':'Tokyo Ghoul','user_rating':8}])\nuser_input","262b84d6":"inputId = TV_anime[TV_anime['name'].isin(user_input['name'].tolist())]\nuser_input = pd.merge(inputId, user_input)\nuser_input = user_input.drop('genre', 1).drop('rating', 1).drop('episodes',1).drop('type',1).drop('members',1)\nuser_input","64d5b295":"user_anime = TV_animes_df[TV_animes_df['name'].isin(user_input['name'].tolist())]\nuser_anime=user_anime.drop('rating',1)\nuser_anime","9c786939":"user_anime = user_anime.reset_index(drop=True)\n#Dropping unnecessary issues due to save memory and to avoid issues\nuser_genre_table = user_anime.drop('anime_id', 1).drop('name', 1).drop('genre', 1).drop('type', 1).drop('episodes',1).drop('members',1)\nuser_genre_table","f29dcb29":"userProfile = user_genre_table.transpose().dot(user_input['user_rating'])\nuserProfile","0b1eec7f":"genre_table = TV_animes_df.set_index(TV_animes_df['anime_id'])\ngenre_table = genre_table.drop('anime_id', 1).drop('name', 1).drop('genre', 1).drop('episodes', 1).drop('members',1).drop('rating',1).drop('type',1)\ngenre_table.head()","edbfa097":"recommendation_table_df = ((genre_table*userProfile).sum(axis=1))\/(userProfile.sum())\nrecommendation_table_df.head()","8aa302af":"recommendation_table_df = recommendation_table_df.sort_values(ascending=False)\n#Just a peek at the values\nrecommendation_table_df.head()","15ab3167":"TV_anime.loc[TV_anime['anime_id'].isin(recommendation_table_df.head(10).keys())]","277581ca":"<p>this is the number of missing ratings in anime dataset, that have an anime_id in rating column<\/p>","9b68d1a0":"<img src='https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcTuvG5vqsmLDMcWOZ-8Thyq1nrdAI5P1d32SdVLwDJRbJbSJAPDow&s'>","fc9a3652":"<p>let's see the top 20 genres in TV-animes<\/p>","60f07f9e":"<h1>Dataset Exploration<\/h1>","7095a15f":"<p>As I expect TV has the largest percentage(30.4%), and we are going to analyze TV anime type <\/p>","e8d61770":"<p>since we have alot of outliers in rating column we are going to figure out them<\/p> ","fb9c895b":"<p>let's see the distribution plots of rating, members<\/p>","5949644a":"<h1>EDA<\/h1>","dc69e5b9":"<h1>Content-Based Recommendation Engine<\/h1>","2e0c018b":"<h1>Data Cleaning & Preprocessing <\/h1>","cec4cdb3":"<ul>\n    <li>first we are going to change the data-type of episodes column in anime dataset<\/li>\n    <li>next we are going fill the missing rows in rating columns in anime by using the median of rating column in rating dataset<\/li>\n    <li>drop the the missing rows that we can not replace it by rating<\/li>\n    <li>handling genre column in anime dataset<\/li>\n    <li>drop duplicate animes in dataset<\/li> ","8ee2232b":"<p>let's use boxplot to see the outliers in rating and members columns<\/p>","8769a576":"<h1>RE-Preprocessing<\/h1>","4f3c7e59":"<p>Recommendation systems are a collection of algorithms used to recommend items to users based on information taken from the user. These systems have become ubiquitous, and can be commonly seen in online stores, movies databases and job finders. In this notebook, we will explore Content-based recommendation systems and implement a simple version of one using Python and the Pandas library.<\/p>","bdd3d0c9":"<p>let's see which TV anime has the maximum rating, and which has the minimum<\/p>","8e72c0e0":"<p>let's see which TV anime has the maximum members, and which has the minimum<\/p>","be8cd746":"<h1>Anime Recommendation Analysis & Simple Content-based recommendation engine<\/h1>","16b518a3":"<p>let's now see the first 10 recommended TV animes<\/p>","1dd48d9a":"<h3>rating dataset<\/h3>","c8f72d9a":"<p>With the input's profile and the complete list of movies and their genres in hand, we're going to take the weighted average of every movie based on the input profile and recommend the top twenty movies that most satisfy it.<\/p>","4b8902b6":"<h3>Anime dataset<\/h3>","85038640":"<p>let's see which TV anime has the maximum episodes, and which has the minimum<\/p>"}}