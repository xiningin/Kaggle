{"cell_type":{"2df59ec4":"code","504a9a61":"code","aba565aa":"code","8c190038":"code","2ca3887c":"code","eaa6d9c0":"code","958321d8":"code","51273708":"code","e606460d":"code","79d6dd15":"code","c8ddf6c9":"code","31f2bf83":"code","0020ece7":"code","d9968a31":"code","632a583a":"code","addae6e9":"code","52044a0e":"code","632dff11":"code","368fbd1b":"code","66b2db64":"code","fdcb807b":"code","80827aa7":"code","1a888217":"code","a7d3d200":"code","a76fd77f":"code","d2f60b01":"code","e6be3bc2":"code","cc072669":"code","bab5dc41":"code","bfe4f6e6":"code","03298d4c":"code","721d8188":"code","b97ca467":"code","43ae5720":"code","e4cc0f6c":"code","bbb53ab4":"code","ad835666":"code","966abc9d":"code","ec85ed17":"code","f7af45d4":"code","b28d8171":"code","11ad65d5":"code","6e3ac1ef":"code","4e3d5a3c":"code","9fbbe3f1":"code","c3e20023":"code","51863204":"code","ede60042":"code","d3dcd2c4":"code","e3137c3b":"code","165083b6":"code","7ffde25b":"code","aae301ed":"code","4d3f4ec6":"code","25628bb6":"code","cc27bf6a":"code","c207320d":"code","71c5e459":"code","5aa522f2":"code","5dbc3df0":"code","c45c4d74":"code","cffc8e06":"code","e4c52461":"code","71795c37":"code","4ca4383c":"code","a4c09676":"code","5357483e":"code","6499cceb":"code","2cc7a347":"code","06cb3693":"code","f12e7aae":"code","d2f109cc":"code","ca314ff5":"code","fd19857f":"code","7aba4378":"code","f1dcf359":"code","f970eba0":"code","67831e36":"code","07a4710c":"code","5191ba68":"code","06f14ddd":"code","1ceba9cc":"code","bcf016cb":"code","aa43d4ad":"code","b6216139":"code","1ffea01c":"code","5f9a1a32":"code","4821ad35":"code","a5461458":"code","ab2b9b26":"code","4a428b21":"code","c6c8da22":"markdown","902e3687":"markdown","08d0a955":"markdown","6416bc83":"markdown","74e96e52":"markdown","1def691e":"markdown","b291ba64":"markdown","0e9a4d79":"markdown","6bf485b4":"markdown","d807ca67":"markdown","8b06cc00":"markdown","9e962918":"markdown","93b0e4ad":"markdown","069d472d":"markdown","b9f6d64f":"markdown","70fb20cc":"markdown","f4b7f014":"markdown","584205f4":"markdown","b0f38539":"markdown","3dff4bc2":"markdown","4664fbaa":"markdown"},"source":{"2df59ec4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","504a9a61":"# to ignore warnings\nimport warnings as wg\nwg.filterwarnings(\"ignore\")","aba565aa":"pd.set_option('max_rows', None)","8c190038":"data = pd.read_csv('..\/input\/customerattritionprediction\/train.csv')","2ca3887c":"x = data.drop('CustomerAttrition', axis = 'columns')\ny = data['CustomerAttrition']","eaa6d9c0":"from sklearn.model_selection import train_test_split","958321d8":"X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=1, stratify=y)","51273708":"# Dropping ID column\nX_train = X_train.drop('ID', axis = 'columns')","e606460d":"# Imputing the missing 'GrandPayment' with -1\n# If I fill them with 0 then it may mean that their bill is pending \nX_train['GrandPayment'] = X_train['GrandPayment'].fillna(-1)","79d6dd15":"X_train['ServiceSpan'] = X_train['ServiceSpan'].replace([-2, -1], 0)","c8ddf6c9":"X_train.head()","31f2bf83":"X_train.columns","0020ece7":"lst = ['Aged', 'Married', 'TotalDependents', 'MobileService', 'CyberProtection', 'HardwareSupport',\n       'TechnicalAssistance', 'FilmSubscription']","d9968a31":"X_train[lst] = X_train[lst].replace(['Yes', 'No'], [1, 0])","632a583a":"X_train.head()","addae6e9":"X_train_Encod = pd.get_dummies(X_train, drop_first=True)\nX_train_Encod.head()","52044a0e":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","632dff11":"for i in X_train_Encod.columns:\n    scaler.fit(X_train_Encod[[i]])\n    X_train_Encod[[i]] = scaler.transform(X_train_Encod[[i]])","368fbd1b":"X_train_Encod.head()","66b2db64":"Y_train = Y_train.replace(['Yes', 'No'], [1, 0])\nY_test = Y_test.replace(['Yes', 'No'], [1, 0])","fdcb807b":"# Dropping ID column\nX_test = X_test.drop('ID', axis = 'columns')\n\n# Imputing the missing 'GrandPayment' with -1\nX_test['GrandPayment'] = X_test['GrandPayment'].fillna(-1)\n\n# Replace negative values with 0\nX_test['ServiceSpan'] = X_test['ServiceSpan'].replace([-2, -1], 0)\n","80827aa7":"# Label Encoding\nX_test[lst] = X_test[lst].replace(['Yes', 'No'], [1, 0])","1a888217":"# One hot encoding\nX_test_Encod = pd.get_dummies(X_test, drop_first=True)","a7d3d200":"for i in X_test_Encod.columns:\n    scaler.fit(X_test_Encod[[i]])\n    X_test_Encod[[i]] = scaler.transform(X_test_Encod[[i]])","a76fd77f":"X_test_Encod.head()","d2f60b01":"Y_train.value_counts()","e6be3bc2":"from sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier","cc072669":"from sklearn.metrics import classification_report","bab5dc41":"svc = SVC()\nlr = LogisticRegression()\nrfc = RandomForestClassifier()","bfe4f6e6":"from sklearn.model_selection import cross_val_score","03298d4c":"acc = cross_val_score(lr, X_train_Encod, Y_train)\nacc","721d8188":"np.mean(acc)","b97ca467":"lr.fit(X_train_Encod, Y_train)","43ae5720":"lr.score(X_test_Encod, Y_test)","e4cc0f6c":"print(classification_report(Y_test,lr.predict(X_test_Encod)))","bbb53ab4":"acc = cross_val_score(svc, X_train_Encod, Y_train)\nacc","ad835666":"np.mean(acc)","966abc9d":"svc.fit(X_train_Encod, Y_train)","ec85ed17":"svc.score(X_test_Encod, Y_test)","f7af45d4":"print(classification_report(Y_test,svc.predict(X_test_Encod)))","b28d8171":"acc = cross_val_score(rfc, X_train_Encod, Y_train)\nacc","11ad65d5":"np.mean(acc)","6e3ac1ef":"rfc.fit(X_train_Encod, Y_train)","4e3d5a3c":"print(classification_report(Y_test,rfc.predict(X_test_Encod)))","9fbbe3f1":"## RandomOverSampler to handle imbalanced data\n\nfrom imblearn.over_sampling import RandomOverSampler\n\nfrom collections import Counter","c3e20023":"os =  RandomOverSampler(sampling_strategy=1)","51863204":"X_train_res, y_train_res = os.fit_resample(X_train_Encod, Y_train)","ede60042":"X_train_res.shape,y_train_res.shape","d3dcd2c4":"print('Original dataset shape {}'.format(Counter(Y_train)))\nprint('Resampled dataset shape {}'.format(Counter(y_train_res)))","e3137c3b":"acc = cross_val_score(rfc, X_train_res, y_train_res)\nacc","165083b6":"np.mean(acc)","7ffde25b":"acc = cross_val_score(svc, X_train_res, y_train_res)\nacc","aae301ed":"np.mean(acc)","4d3f4ec6":"acc = cross_val_score(lr, X_train_res, y_train_res)\nacc","25628bb6":"np.mean(acc)","cc27bf6a":"rfc.fit(X_train_res, y_train_res)\nlr.fit(X_train_res, y_train_res)\nsvc.fit(X_train_res, y_train_res)","c207320d":"print(classification_report(Y_test,rfc.predict(X_test_Encod)))","71c5e459":"print(classification_report(Y_test,lr.predict(X_test_Encod)))","5aa522f2":"print(classification_report(Y_test,svc.predict(X_test_Encod)))","5dbc3df0":"from sklearn.model_selection import RandomizedSearchCV","c45c4d74":"# model_params = {\n#     'svm': {\n#         'model': SVC(gamma='auto'),\n#         'params' : {\n#             'C': [1,10,20],\n#             'kernel': ['rbf','linear']\n#         }  \n#     },\n#     'random_forest': {\n#         'model': RandomForestClassifier(),\n#         'params' : {\n#             'bootstrap': [True, False],\n#              'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, None],\n#              'max_features': ['auto', 'sqrt'],\n#              'min_samples_leaf': [1, 2, 4],\n#              'min_samples_split': [2, 5, 10],\n#              'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]\n#         }\n#     },\n#     'logistic_regression' : {\n#         'model': LogisticRegression(solver='liblinear',multi_class='auto'),\n#         'params': {\n#   #          'C': [1,5,10]\n#             'penalty' : ['l1', 'l2'],\n#             'C' : np.logspace(-4, 4, 20),\n#         }\n#     }\n# }","cffc8e06":"# scores = []\n\n# for model_name, mp in model_params.items():\n#     clf =  RandomizedSearchCV(mp['model'], mp['params'], cv=5, return_train_score=False,n_iter=3)\n#     clf.fit(X_train_res, y_train_res)\n#     scores.append({\n#         'model': model_name,\n#         'best_score': clf.best_score_,\n#         'best_params': clf.best_params_\n#     })\n    \n# df = pd.DataFrame(scores,columns=['model','best_score','best_params'])\n# df","e4c52461":"# list(df[df['model'] == 'random_forest']['best_params'])","71795c37":"rfc_1 = RandomForestClassifier(bootstrap= False, max_depth= 80, max_features= 'auto', min_samples_leaf= 1, min_samples_split= 2, n_estimators= 1400)","4ca4383c":"rfc_1.fit(X_train_res, y_train_res)","a4c09676":"print(classification_report(Y_test,rfc_1.predict(X_test_Encod)))","5357483e":"rfc_1.score(X_test_Encod, Y_test)","6499cceb":"import xgboost","2cc7a347":"classifier=xgboost.XGBClassifier()","06cb3693":"## Hyper Parameter Optimization\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","f12e7aae":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","d2f109cc":"# random_search.fit(X_train_res,y_train_res)","ca314ff5":"# random_search.best_estimator_","fd19857f":"xg_classifier = xgboost.XGBClassifier(gamma=0.2,\n              learning_rate=0.1,max_depth=15, random_state=0,\n                                  eval_metric='mlogloss')","7aba4378":"X_train_res.head()","f1dcf359":"acc = cross_val_score(xg_classifier, X_train_res, y_train_res)\nacc","f970eba0":"np.mean(acc)","67831e36":"xg_classifier.fit(X_train_res, y_train_res)","07a4710c":"np.array(X_test_Encod.head())","5191ba68":"X_test_Encod = pd.DataFrame(X_test_Encod)\nX_test_Encod.head()","06f14ddd":"xg_classifier.predict(X_test_Encod)","1ceba9cc":"score_list = cross_val_score(xg_classifier,X_train_res,y_train_res,cv=10)\nscore_list","bcf016cb":"np.mean(score_list)","aa43d4ad":"y_train_res.head()","b6216139":"xg_classifier.score(X_test_Encod, Y_test)","1ffea01c":"test_new = pd.read_csv('..\/input\/customerattritionprediction\/test.csv')\nprint(test_new.shape)\ntest_new1 = test_new.copy()\nprint(test_new1.shape)\ntest_new1 = test_new1.drop('ID', axis = 'columns')\nprint(test_new1.shape)\ntest_new1['GrandPayment'] = test_new1['GrandPayment'].fillna(-1)\ntest_new1['ServiceSpan'] = test_new1['ServiceSpan'].replace([-2, -1], 0)\ntest_new1[lst] = test_new1[lst].replace(['Yes', 'No'], [1, 0])\nprint(test_new1.shape)\ntest_new1 = pd.get_dummies(test_new1, drop_first=True)\nprint(test_new1.shape)\nfor i in test_new1.columns:\n    scaler.fit(test_new1[[i]])\n    test_new1[[i]] = scaler.transform(test_new1[[i]])","5f9a1a32":"test_new1.shape","4821ad35":"predictions = xg_classifier.predict(test_new1)\npredictions","a5461458":"predictions = rfc_1.predict(np.array(test_new1))\npredictions","ab2b9b26":"# To create Dataframe of predicted value with particular respective index\n\n\n# res = pd.DataFrame(predictions) #preditcions are nothing but the final predictions of your model on input features of your new unseen test data\n# res.index = test_new.index # its important for comparison. Here \"test_new\" is your new test dataset\n# res = pd.concat([test_new[['ID']], res], axis = 'columns')\n# res.columns = ['ID',\"CustomerAttrition\"]\n# res.reset_index(drop=True, inplace=True)\n# res.head()","4a428b21":"# To download the csv file locally\n\n\n# from google.colab import files\n# res.to_csv('prediction2_RFC.csv')         \n# files.download('prediction2_RFC.csv')","c6c8da22":"My accuracy was 0.80303 with this model","902e3687":"### One Hot Encoding","08d0a955":"#### Cross Validation on SVC","6416bc83":"### Label Encoding","74e96e52":"## Making ML Model","1def691e":"## Hyperparameter Tuning","b291ba64":"My accuracy was 0.78409","0e9a4d79":"Checking the model accuracy again","6bf485b4":"Oversampling is required here","d807ca67":"### Checking the accuracy now","8b06cc00":"# Saving and Downloading the predictions","9e962918":"**Imputing Values in GrandPayment Column**","93b0e4ad":"#### Xgboost","069d472d":"**Replacing all negative values of ServiceSpan with 0**","b9f6d64f":"#### Cross Validation on RandomForestClassifier","70fb20cc":"#### Cross Validation on Logistic","f4b7f014":"#### Over Sampling","584205f4":"these are the best parameters for RandomForestClassifier\n\n[{'bootstrap': False,\n  'max_depth': 80,\n  'max_features': 'auto',\n  'min_samples_leaf': 1,\n  'min_samples_split': 2,\n  'n_estimators': 1400}]\n  \ngiving accuracy of 91.8 on training\n\n","b0f38539":"## Preprocessing on Test Set","3dff4bc2":"### Loading the reproducible data","4664fbaa":"### Feature Scaling"}}