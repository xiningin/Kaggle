{"cell_type":{"2ae08954":"code","3413583d":"code","532e6414":"code","d5ae884f":"code","8ec272ba":"code","4b70c57c":"code","cfca4bb6":"code","ba95588a":"code","379cc55f":"code","4ace620f":"code","6f6c284a":"code","b7461513":"code","dfea452a":"code","dbde2c97":"code","a029d8a8":"code","a728cf63":"code","2dfadeba":"code","518dbe65":"code","5406550a":"code","fe9d9bd9":"code","6f4e9f69":"code","716e3efd":"code","1300eaec":"code","6ca9c353":"code","0f00b390":"code","9ce39e5d":"code","df07fa09":"code","f2ecc3ce":"code","b6bf3558":"code","91ef03f5":"code","5ba2b12a":"code","6b90f598":"code","ab119dee":"code","4e983723":"code","b5dac85a":"code","4cc0b5ef":"code","eb1aeeb4":"code","c1bca330":"code","85f9b784":"code","9681a0ba":"code","aa1a5211":"code","f8dc72f3":"code","11de315f":"code","7970a992":"code","732ba29c":"code","498d7782":"code","45a77208":"code","395265fe":"code","529e0eb6":"code","854cd7b2":"code","3295c141":"code","2ceace6e":"code","5de040a3":"code","7aaacfa3":"code","e95bb2a5":"code","5c3f4e32":"code","ee7a169c":"code","fa4ae0cc":"code","2906e406":"code","2fa179c3":"code","c0103142":"markdown","06113433":"markdown","d88b561c":"markdown","24b50da7":"markdown","b21886d2":"markdown","6bf07aab":"markdown","0d77fd62":"markdown","60c98b63":"markdown","d8e8efb6":"markdown","adfaf2d0":"markdown","09506d21":"markdown","db6dbe7f":"markdown","6d1a259e":"markdown","6a83a80b":"markdown","11218a07":"markdown","d79ec285":"markdown"},"source":{"2ae08954":"# Import modules\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport numpy as np\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\n\n# Figures inline and set visualization style\n%matplotlib inline\nsns.set()\n","3413583d":"os.listdir('..\/input')","532e6414":"# Import data\ndf_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","d5ae884f":"print(df_train.shape)\ndf_train.head()","8ec272ba":"print(df_test.shape)\ndf_test.head()","4b70c57c":"sns.countplot(x='Survived', data=df_train);","cfca4bb6":"sns.countplot(x='Sex', data=df_train);","ba95588a":"sns.factorplot(x='Survived', col='Sex', kind='count', data=df_train);","379cc55f":"df_train.groupby(['Sex']).Survived.sum()","4ace620f":"print(df_train[df_train.Sex == 'female'].Survived.sum()\/df_train[df_train.Sex == 'female'].Survived.count())\nprint(df_train[df_train.Sex == 'male'].Survived.sum()\/df_train[df_train.Sex == 'male'].Survived.count())","6f6c284a":"sns.factorplot(x='Survived', col='Pclass', kind='count', data=df_train);","b7461513":"sns.factorplot(x='Survived', col='Embarked', kind='count', data=df_train);","dfea452a":"sns.distplot(df_train.Fare, kde=False);","dbde2c97":"df_train_drop = df_train.dropna()\nsns.pairplot(df_train_drop, hue='Survived');","a029d8a8":"# Store target variable of training data in a safe place\nsurvived_train = df_train.Survived\n\n# Concatenate training and test sets\ndata = pd.concat([df_train.drop(['Survived'], axis=1), df_test])","a728cf63":"data.info()","2dfadeba":"# Dealing with missing numerical variables\ndata['Age'] = data.Age.fillna(data.Age.median())\ndata['Fare'] = data.Fare.fillna(data.Fare.median())\n\n# Check out info of data\ndata.info()","518dbe65":"# Tranform Sex feature to numeric value\n# create a new column for each of the options in 'Sex'\n# creates a new column for female, called 'Sex_female', \n# creates a new column for 'Sex_male'\n# more then two categorical values it is better to use one-hot-encode\ndata = pd.get_dummies(data, columns=['Sex'], drop_first=True)\ndata.head()","5406550a":"# Select features columns\ndata = data[['Sex_male', 'Fare', 'Age','Pclass', 'SibSp']]\ndata.head()","fe9d9bd9":"data.info()","6f4e9f69":"# split it back into training and test sets\ndata_train = data.iloc[:891]\ndata_test = data.iloc[891:]","716e3efd":"# scikit-learn requires the data as arrays\nX = data_train.values\ntest = data_test.values\ny = survived_train.values","1300eaec":"# Instantiate model and fit to data\nclf = tree.DecisionTreeClassifier()\nclf.fit(X, y)","6ca9c353":"import graphviz \n#dot_data = tree.export_graphviz(clf, out_file=None) \n#graph = graphviz.Source(dot_data) \n#graph.render(\"Titanic\") \n\ndot_data = tree.export_graphviz(clf, out_file=None, \n                         feature_names=data_train.columns.values,  \n                         class_names=['Survived','Not Survived'],  \n                         filled=True, rounded=True,  \n                         special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph ","0f00b390":"# Make predictions and store in 'Survived' column of df_test\nY_pred = clf.predict(test)\ndf_test['Survived'] = Y_pred\nclf.score(X, y)","9ce39e5d":"df_test[['PassengerId', 'Survived']].to_csv('..\/working\/dec_tree.csv', index=False)","df07fa09":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, stratify=y)","f2ecc3ce":"# Setup arrays to store train and test accuracies\ndep = np.arange(1, 9)\ntrain_accuracy = np.empty(len(dep))\ntest_accuracy = np.empty(len(dep))","b6bf3558":"# Loop over different values of k\nfor i, k in enumerate(dep):\n    # Setup a Decision Tree Classifier\n    clf = tree.DecisionTreeClassifier(max_depth=k)\n\n    # Fit the classifier to the training data\n    clf.fit(X_train, y_train)\n\n    #Compute accuracy on the training set\n    train_accuracy[i] = clf.score(X_train, y_train)\n\n    #Compute accuracy on the testing set\n    test_accuracy[i] = clf.score(X_test, y_test)","91ef03f5":"# Generate plot\nplt.title('clf: Varying depth of tree')\nplt.plot(dep, test_accuracy, label = 'Testing Accuracy')\nplt.plot(dep, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.xlabel('Depth of tree')\nplt.ylabel('Accuracy')\nplt.show()","5ba2b12a":"clf = tree.DecisionTreeClassifier(max_depth=6)\nclf.fit(X, y)\nclf.score(X, y)","6b90f598":"dot_data = tree.export_graphviz(clf, out_file=None, \n                         feature_names=data_train.columns.values,  \n                         class_names=['Survived','Not Survived'],  \n                         filled=True, rounded=True,  \n                         special_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph ","ab119dee":"# Make predictions and store in 'Survived' column of df_test\nY_pred = clf.predict(test)\ndf_test['Survived'] = Y_pred\ndf_test[['PassengerId', 'Survived']].to_csv('..\/working\/6dep_dec_tree.csv', index=False)","4e983723":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')\ndf = df_train.append(df_test, sort=False)\ndf.info()","b5dac85a":"df['Surname'] = df['Name'].str.split(',').str[0]\ndf['Surname'].head()","4cc0b5ef":"df['Title'] = df['Name'].str.split(',').str[1].str.split().str[0]  \ndf['Title'].head()","eb1aeeb4":"#df['Cabin'][27:32]","c1bca330":"#df['Cabin Len'] = df.Cabin.str.split().str.len()\n#df['Cabin Len'][27:32]","85f9b784":"df['Cabin Letter'] = df['Cabin'].str[0]\ndf['Cabin Letter'][27:32]","9681a0ba":"df['Family_Size'] = df['SibSp'] + df['Parch']\ndf['Family_Size'].head()","aa1a5211":"df[df['Name'].str.contains('Andersson,')]","f8dc72f3":"df['Fare Per Person'] = df['Fare'] \/ (df['Family_Size'] + 1)\ndf['Fare Per Person'].head()","11de315f":"df['Number of Ticket Uses'] = df.groupby('Ticket', as_index=False)['Ticket'].transform(lambda s: s.count())\ndf['Number of Ticket Uses'].head()","7970a992":"df['Average Fare per Person'] = df['Fare'] \/ df['Number of Ticket Uses'] \ndf['Average Fare per Person'].head()","732ba29c":"for col in df.columns:  \n    if df[col].dtype == 'object':\n        df[col] = df[col].astype('category')  # change text to category\n        df[col] = df[col].cat.codes  # save code as column value\n","498d7782":"df['Age'] = df.Age.fillna(df.Age.median())\ndf['Fare'] = df.Fare.fillna(df.Fare.median())\ndf['Fare Per Person'] = df['Fare Per Person'].fillna(df['Fare Per Person'].median())\ndf['Average Fare per Person'] = df['Average Fare per Person'].fillna(df['Average Fare per Person'].median())","45a77208":"# RandomForest\/Decision Tree it is interesting to replace NA by a value less then the minimum or greater then the maximum\n#df.fillna(-1, inplace=True)","395265fe":"data_train = df.iloc[:891].copy()\ndata_test = df.iloc[891:].copy()","529e0eb6":"train, test = train_test_split(data_train, test_size=0.2, random_state=42)","854cd7b2":"# Instantiate model and fit to data\nclf = tree.DecisionTreeClassifier()","3295c141":"remove = ['Survived', 'PassengerId', 'Name', 'Cabin', 'Embarked']\nfeats = [col for col in df.columns if col not in remove]","2ceace6e":"clf.fit(train[feats], train['Survived'])","5de040a3":"preds_train = clf.predict(train[feats])","7aaacfa3":"preds = clf.predict(test[feats])","e95bb2a5":"from sklearn.metrics import accuracy_score","5c3f4e32":"accuracy_score(train['Survived'], preds_train)","ee7a169c":"accuracy_score(test['Survived'], preds)","fa4ae0cc":"# train with training and test dataset\nclf.fit(data_train[feats],data_train['Survived'])","2906e406":"preds_kaggle = clf.predict(data_test[feats])","2fa179c3":"submission = pd.DataFrame({ 'PassengerId': data_test['PassengerId'],\n                            'Survived': preds_kaggle }, dtype=int)\nsubmission.to_csv(\"submission_FEAT.csv\",index=False)","c0103142":"## Read Data","06113433":"## Second try","d88b561c":"## Data Wrangling","24b50da7":"Women were more likely to survive than men.","b21886d2":"transform text columns to numbers","6bf07aab":"## Basic EDA","0d77fd62":"the size of a person\u2019s family, the sum of their \u2018SibSp\u2019 and \u2018Parch\u2019 attributes","60c98b63":"## Data Wrangling","d8e8efb6":"Passengers that embarked in Southampton were less likely to survive","adfaf2d0":"## Feature Engineering","09506d21":"Most passengers paid less than 100 for travelling with the Titanic.","db6dbe7f":"Persons from same family share tickets, therefore the same Fare","6d1a259e":"Passengers that travelled in first class were more likely to survive. On the other hand, passengers travelling in third class were more unlikely to survive.","6a83a80b":"74% of women survived, while 19% of men survived.","11218a07":"proportion of women that survived and the proportion of men","d79ec285":"## Imports"}}