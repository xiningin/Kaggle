{"cell_type":{"1bdb0139":"code","91729875":"code","26560edf":"code","274b7813":"code","2f403882":"code","1892c5f4":"code","33ed442c":"code","4a50a789":"code","c1cb8402":"code","545822de":"code","152fb749":"code","98ec188a":"code","51293b4d":"code","42ae5f50":"code","d17551e4":"code","1649b786":"code","839d9e3d":"code","f24daf56":"code","3f40c9ec":"code","95c91149":"code","5b8405e0":"code","863be6d3":"code","0f461898":"code","b8852816":"code","d26ee6de":"code","de49a8f7":"code","9f7ffd50":"code","79a3add2":"code","8d4495b5":"code","2cb16f41":"code","70be6bf1":"code","cd934f32":"code","535af4a2":"markdown","27b07b07":"markdown","546c891a":"markdown","588c9806":"markdown","9cc3c54d":"markdown","29ed98ee":"markdown","9fdad449":"markdown","c42bfff6":"markdown","64e66e8b":"markdown","26a9bd15":"markdown","92ed8f38":"markdown","eda0de2e":"markdown"},"source":{"1bdb0139":"import os\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","91729875":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","26560edf":"filename = \"\/kaggle\/input\/analise-credito\/acd2b94f1c.csv\"\ndf = pd.read_csv(filename, na_values=['na'])\ndf","274b7813":"df.info()","2f403882":"clientes, _ = df.shape\nadiplentes, _ = df[df['default'] == 0].shape\ninadiplentes, _ = df[df['default'] == 1].shape\nprint(f'\\\n    Total clientes: {clientes}\\n\\\n    Total adiplentes: {adiplentes} representando {round((adiplentes\/clientes)*100,2)}% dos clientes\\n\\\n    Total inadiplentes: {inadiplentes} representando {round((inadiplentes\/clientes)*100,2)}% dos clientes\\\n    ')","1892c5f4":"df.isna().any()","33ed442c":"def inf_dados_faltantes(df: pd.DataFrame) -> None:\n\n    dados_faltantes = []\n\n    for coluna in df.columns:\n        if df[coluna].isna().any():\n            total, _ = df.shape\n            total_na, _ = df[df[coluna].isna()].shape\n            dado_faltante = {coluna:{'quantidade':total_na,'porcentagem':round(total_na\/total*100,2)}}\n            dados_faltantes.append(dado_faltante)\n        \n    for dados in dados_faltantes:\n        print(f'{dados}')","4a50a789":"inf_dados_faltantes(df = df)","c1cb8402":"inf_dados_faltantes(df = df[df['default'] == 0])","545822de":"inf_dados_faltantes(df = df[df['default'] == 1])","152fb749":"df[['limite_credito','valor_transacoes_12m']].dtypes","98ec188a":"df[['limite_credito','valor_transacoes_12m']].head(n=5)","51293b4d":"df['limite_credito'] = df['limite_credito'].apply(lambda valor: float(valor.replace(\".\",\"\").replace(\",\",\".\")))","42ae5f50":"df['valor_transacoes_12m'] = df['valor_transacoes_12m'].apply(lambda valor: float(valor.replace(\".\",\"\").replace(\",\",\".\")))","d17551e4":"df[['limite_credito','valor_transacoes_12m']].head(n=5)","1649b786":"df[['limite_credito','valor_transacoes_12m']].dtypes","839d9e3d":"df.select_dtypes('object').describe().transpose()","f24daf56":"df.drop('id', axis=1).select_dtypes('number').describe().transpose()","3f40c9ec":"df.dropna(inplace=True)","95c91149":"df.info()","5b8405e0":"df.select_dtypes('object').describe().transpose()","863be6d3":"df.drop('id', axis=1).select_dtypes('number').describe().transpose()","0f461898":"clientes, _ = df.shape\nadiplentes, _ = df[df['default'] == 0].shape\ninadiplentes, _ = df[df['default'] == 1].shape\nprint(f'\\\n    Total clientes: {clientes}\\n\\\n    Total adiplentes: {adiplentes}\\\n    representando {round((adiplentes\/clientes)*100,2)}% dos clientes\\n\\\n    Total inadiplentes: {inadiplentes}\\\n    representando {round((inadiplentes\/clientes)*100,2)}% dos clientes\\\n    ')","b8852816":"sns.set_theme()","d26ee6de":"df_adimplente = df[df['default']==0]\ndf_inadimplente = df[df['default']==1]\n\ndf_list = [df,df_adimplente,df_inadimplente]","de49a8f7":"df.select_dtypes('object').head(n=5)","9f7ffd50":"def analise_categorica(coluna):\n    \n    titulos = [f'{coluna.replace(\"_\",\" \").title()} Clientes',\\\n               f'{coluna.replace(\"_\",\" \").title()} Clientes Adimplente',\\\n               f'{coluna.replace(\"_\",\" \").title()} Clientes Inadimplente'\\\n              ]\n    \n    eixo = 0\n    max_y = 0\n    max = df.select_dtypes('object').describe()[coluna]['freq'] * 1.1 #pega o valor maximo da frequencia da coluna selecionada e mutiplica por 1.1\n\n    figura, eixos = plt.subplots(1,3, figsize=(20, 5), sharex=True) #subplot(numero de linhas,numero de colunas, tamanho da figura ,compartiolha o eixo X para todos os plots)\n\n    for dataframe in df_list: #Lista com os DataFrames para compara\u00e7\u00e3o\n    \n        df_plot = dataframe[coluna].value_counts().to_frame() #cria um novo dataframe apartir da coluna escolhida, somando seus totais e transformando em um frame\n        df_plot.rename(columns={coluna: 'frequencia_absoluta'}, inplace=True) #Renomeia a a coluna\n        df_plot[coluna] = df_plot.index #adiciona uma nova coluna 'escolaridade', com os valores do .index\n        df_plot.sort_values(by=['frequencia_absoluta'], inplace=True) #poem em ordem crescente pela coluna 'frequencia_absoluta'  \n    \n        frame = sns.barplot(x=df_plot[coluna],    #Montagem do plot pelo BARPLOT setando eixo X e Y\n                        y='frequencia_absoluta',\n                        data=df_plot,\n                        ax=eixos[eixo],\n                        )\n        \n        frame.set(title=titulos[eixo], xlabel=coluna.capitalize().replace(\"_\",\" \").title(), ylabel='Frequ\u00eancia Absoluta') #Titulo, Titulo eixo X, Titulo eixo Y\n        frame.set_xticklabels(labels=frame.get_xticklabels(), rotation=65) #Defina os r\u00f3tulos do eixo x com a lista de r\u00f3tulos de string.\n                    \n        _, max_y_f = frame.get_ylim()\n        max_y = max_y_f if max_y_f > max_y else max_y\n        frame.set(ylim=(0, max_y))\n\n        eixo += 1 #Passa para o proximo eixo do PLOT a ser desenhado.\n    \n    return figura.show()","79a3add2":"for coluna in df.select_dtypes('object').columns:\n    analise_categorica(coluna=coluna)","8d4495b5":"df.drop(['id','default'], axis=1).select_dtypes('number').head(n=5)","2cb16f41":"def analise_numerica(coluna):\n    \n    titulos = [f'{coluna.replace(\"_\",\" \").title()} Clientes',\\\n               f'{coluna.replace(\"_\",\" \").title()} Clientes Adimplente',\\\n               f'{coluna.replace(\"_\",\" \").title()} Clientes Inadimplente'\\\n              ]\n    \n    eixo = 0\n    max_y = 0\n\n    figura, eixos = plt.subplots(1,3, figsize=(20, 5), sharex=True) #subplot(numero de linhas,numero de colunas, tamanho da figura ,compartiolha o eixo X para todos os plots)\n\n    for dataframe in df_list: #Lista com os DataFrames para compara\u00e7\u00e3o    \n                   \n        frame = sns.histplot(data=dataframe,    #Montagem do plot pelo HISTPLOT, setando eixo X, DATA e STAT\n                             x=dataframe[coluna],\n                             stat='count',\n                             hue='default',\n                             ax=eixos[eixo],\n                             )\n        \n        frame.set(title=titulos[eixo], xlabel=coluna.capitalize().replace(\"_\",\" \").title(), ylabel='Frequ\u00eancia Absoluta') #Titulo, Titulo eixo X, Titulo eixo Y\n                            \n        _, max_y_f = frame.get_ylim()\n        max_y = max_y_f if max_y_f > max_y else max_y\n        frame.set(ylim=(0, max_y))\n\n        eixo += 1 #Passa para o proximo eixo do PLOT a ser desenhado.\n    \n    return figura.show()","70be6bf1":"drop_list = ['id',\n             'default',\n             'dependentes',\n             'qtd_produtos',\n             'iteracoes_12m',\n             'meses_inativo_12m'\n            ]\n\nfor coluna in df.drop(drop_list, axis=1).select_dtypes('number').columns:\n    analise_numerica(coluna=coluna)","cd934f32":"frame = sns.relplot(x='valor_transacoes_12m', \n                    y='qtd_transacoes_12m', \n                    data=df, \n                    hue='default'\n                   )\n\n_ = frame.set(title='Valor x Quantidade 12m',\n              xlabel='Valor das Transa\u00e7\u00f5es',\n              ylabel='Quantidade das Transa\u00e7\u00f5es'\n             )","535af4a2":"### Removal of missing data","27b07b07":"### Looking at the input files in the directory","546c891a":"# Data transformation and cleaning\n\n### Schema correction","588c9806":"### Getting information about dataframe","9cc3c54d":"# Data visualization","29ed98ee":"### Categorical view","9fdad449":"### Structure and Proportion","c42bfff6":"# Data Exploration\n\n## Dataset Fields\n\n* **id**: Unique Id for account number.\n* **default**: Binary value (0 = non-defaulter, 1 = defaulter).\n* **idade**: Age for each client in years.\n* **sexo**: Gender for each client (M = male, F = famele).\n* **dependentes**: Number of dependents.\n* **escolaridade**: Education level. \n* **estado_civil**: Marital status.\n* **salario_anual**: Annual salary.\n* **tipo_cartao**: Card Category (blue, silver, gold, platinum).\n* **meses_de_relacionamento**: Months of relationship.\n* **qtd_produtos**: Number of contracted products.\n* **iteracoes_12m**: Number of iterations with the customer in the last year.\n* **meses_inativo_12m**: Number of months the customer was inactive in the last year.\n* **limite_credito**: Credit card limit amount.\n* **valor_transacoes_12m**: Total sum of the value of credit card transactions in the last year.\n* **qtd_transacoes_12m**: Total number of credit card transactions in the last year.\n\n## Importing the Necessary Libraries","64e66e8b":"### Reading the data","26a9bd15":"Amount of Transactions in the Last 12 Months x Number of Transactions in the Last 12 Months","92ed8f38":"### Numerical views","eda0de2e":"### Missing data"}}