{"cell_type":{"865fde8b":"code","7aaa507b":"code","dbe24c1b":"code","a53d9493":"code","dc8c9f24":"code","87c44417":"code","3c76e5e3":"code","97a724e8":"code","16a9de24":"code","0f80ca5b":"code","4115bfa2":"code","f28b890e":"code","3abcd434":"code","23021751":"code","04c59f39":"code","efec9c27":"code","156aa700":"code","9996cafe":"code","5901c28b":"code","bde0cce1":"code","70218bf9":"code","62b0febc":"code","ec9af34b":"code","07953021":"code","6736c67a":"code","90201dee":"code","ac3f932f":"code","4e261ad3":"markdown","a7d140bc":"markdown","df32f84c":"markdown","8a9bb0fb":"markdown","417dcb72":"markdown","82d13c3b":"markdown","a4b38966":"markdown"},"source":{"865fde8b":"import torch \nfrom torch import nn \nimport torch.nn.functional as F\nimport numpy as np \nimport pandas as pd \nfrom torch.utils.data import Dataset, DataLoader, TensorDataset\nimport pytorch_lightning as pl \nfrom pytorch_lightning.callbacks.early_stopping import EarlyStopping\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\nimport transformers\nfrom transformers import get_linear_schedule_with_warmup, AdamW\n\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt","7aaa507b":"#taking only the id,excerpt,target,standard_error\ndf = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\",usecols=[\"id\",\"excerpt\",\"target\",\"standard_error\"])\ntest_df = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/test.csv\",usecols=[\"id\",\"excerpt\"])\nprint(\"train shape\",df.shape)","dbe24c1b":"plt.scatter(df['target'], df['standard_error'])","a53d9493":"# remove outlier\ndf = df[df['standard_error']!=0]\nplt.scatter(df['target'], df['standard_error'])","dc8c9f24":"#any null rows\nprint(\"TRAIN NULLS: \\n\",df.isnull().sum())\nprint(\"TEST NULLS: \\n\",df.isnull().sum()) ","87c44417":"#remove \\n and replace \\'s with 'sfrom the text\ndef prep_text(text_df):\n    text_df = text_df.str.replace(\"\\n\",\"\",regex=False) \n    return text_df.str.replace(\"\\'s\",r\"s\",regex=True).values\ndf[\"excerpt\"] = prep_text(df[\"excerpt\"])\ntest_df[\"excerpt\"] = prep_text(test_df[\"excerpt\"])","3c76e5e3":"max_words = df[\"excerpt\"].apply(lambda x: len(x.split())).max()\nprint(\"maximum words in instance:\",max_words)","97a724e8":"def create_folds(data, num_splits):\n    # we create a new column called kfold and fill it with -1\n    data[\"kfold\"] = -1\n    \n    # the next step is to randomize the rows of the data\n    data = data.sample(frac=1).reset_index(drop=True)\n\n    # calculate number of bins by Sturge's rule\n    # I take the floor of the value, you can also\n    # just round it\n    num_bins = int(np.floor(1 + np.log2(len(data))))\n    \n    # bin targets\n    data.loc[:, \"bins\"] = pd.cut(\n        data[\"target\"], bins=num_bins, labels=False\n    )\n    \n    # initiate the kfold class from model_selection module\n    kf = model_selection.StratifiedKFold(n_splits=num_splits)\n    \n    # fill the new kfold column\n    # note that, instead of targets, we use bins!\n    for f, (t_, v_) in enumerate(kf.split(X=data, y=data.bins.values)):\n        data.loc[v_, 'kfold'] = f\n    \n    # drop the bins column\n    data = data.drop(\"bins\", axis=1)\n\n    # return dataframe with folds\n    return data\n\n# read training data\ndf = pd.read_csv(\"..\/input\/commonlitreadabilityprize\/train.csv\")\ndf = df[df['standard_error']!=0]\n\n# create folds\ndf = create_folds(df, num_splits=5)","16a9de24":"df.groupby('kfold').count()","0f80ca5b":"plt.hist(df[df.kfold==0]['target'],alpha=0.3)\nplt.hist(df[df.kfold==1]['target'],alpha=0.3)\nplt.hist(df[df.kfold==2]['target'],alpha=0.3)\nplt.hist(df[df.kfold==3]['target'],alpha=0.3)\nplt.hist(df[df.kfold==4]['target'],alpha=0.3)","4115bfa2":"BATCH_SIZE = 16\nEPOCHS = 30\nNUM_TRAIN_STEPS = int((df.shape[0]\/BATCH_SIZE)*EPOCHS)\nNUM_WARMUP_STEPS = 0\nFOLDS = df.kfold.unique()\nNUM_FOLDS = df.kfold.nunique() ","f28b890e":"class RMSELoss(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.eps = 1e-8\n        \n    def forward(self,output,target):\n        return torch.sqrt(F.mse_loss(output,target)+self.eps)","3abcd434":"class BertModel(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.model = transformers.AutoModel.from_pretrained(\"..\/input\/bert-base-uncased\")\n        #self.model = transformers.AutoModel.from_pretrained(\"..\/input\/huggingface-bert\/bert-large-uncased\")\n        #self.model = transformers.AutoModel.from_pretrained(\"..\/input\/roberta-transformers-pytorch\/roberta-base\")\n        self.drop = nn.Dropout(0.3)\n        self.fc = nn.Linear(768,2)  # output to 2 dimensions, targets and errors\n        \n        # convolutional layer\n        self.conv1 = nn.Conv1d(205, 128, kernel_size=3, stride=1, padding=3)\n        self.conv2 = nn.Conv1d(128, 64, kernel_size=3, stride=1, padding=3)\n        self.conv3 = nn.Conv1d(64, 1, kernel_size=3, stride=1, padding=3)\n        self.ReLU = nn.ReLU()\n        self.pool = nn.MaxPool1d(3)\n        #self.fc_conv = nn.Linear(257,2)\n        self.fc_conv = nn.Linear(30,2)\n        \n        #self.fc = nn.Linear(1024,2)\n    \n    def forward(self,inputs):\n        out = self.model(**inputs) # output from BERT model\n        last_hiddens = out[0]\n        #print(last_hiddens.size())\n        #out = self.drop(last_hiddens[:,0,:].squeeze(1))\n        out = self.conv1(last_hiddens)\n        out = self.ReLU(out)\n        out = self.pool(out)\n        out = self.conv2(out)\n        out = self.ReLU(out)\n        out = self.pool(out)\n        out = self.conv3(out)\n        out = self.ReLU(out)\n        out = self.pool(out)\n        #print(out.size())\n        return self.fc_conv(out)\n    \n    def configure_optimizers(self):\n        no_decay = ['bias', 'LayerNorm.weight']\n        optimizer_grouped_parameters = [\n            {'params': [p for n, p in self.named_parameters() if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01}, # original : 0.01\n            {'params': [p for n, p in self.named_parameters() if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n        ]\n        optimizer = AdamW(optimizer_grouped_parameters, lr=5e-5) # original : 5e-5\n        scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=NUM_WARMUP_STEPS, num_training_steps=NUM_TRAIN_STEPS)\n        return [optimizer],[scheduler] \n    \n    def loss_fn(self,output,target):\n        return RMSELoss()(output.view(-1,2),target.view(-1,2))\n    \n    def training_step(self,batch,batch_idx):\n        inputs = batch[\"inputs\"]\n        labels = batch[\"label\"]\n        output = self(inputs)\n        loss = self.loss_fn(output,labels)\n        return loss\n    \n    def validation_step(self,batch,batch_idx):\n        inputs = batch[\"inputs\"]\n        labels = batch[\"label\"]\n        output = self(inputs)\n        loss = self.loss_fn(output,labels)\n        self.log(\"val_loss\",loss,prog_bar=True)","23021751":"class BertDataset(Dataset):\n    def __init__(self,texts,labels,max_len):\n        super().__init__()\n        self.texts = texts\n        self.max_len = max_len\n        self.labels = labels\n        self.tokenizer = transformers.AutoTokenizer.from_pretrained(\"..\/input\/bert-base-uncased\")\n        #self.tokenizer = transformers.AutoTokenizer.from_pretrained(\"..\/input\/huggingface-bert\/bert-large-uncased\")\n    \n    def __len__(self):\n        return self.labels.shape[0]\n    \n    def __getitem__(self,idx):\n        text = \" \".join(self.texts[idx].split())\n        label = self.labels[idx]\n        inputs = self.tokenizer(text,return_tensors=\"pt\",max_length = self.max_len, padding=\"max_length\",truncation=True)\n        return {\n            \"inputs\":{\"input_ids\":inputs[\"input_ids\"][0],\n                      \"token_type_ids\":inputs[\"token_type_ids\"][0],\n                      \"attention_mask\":inputs[\"attention_mask\"][0],},\n            \"label\":torch.tensor(label,dtype=torch.float)\n        }","04c59f39":"m1 = nn.Conv1d(205, 128, kernel_size=3, stride=1, padding=2)\nm2 = nn.MaxPool1d(3)\nm3 = nn.Conv1d(128, 64, kernel_size=3, stride=1, padding=2)\nm4 = nn.MaxPool1d(3)\nm5 = nn.Conv1d(64, 1, kernel_size=3, stride=1, padding=2)\nm6 = nn.MaxPool1d(3)\ninput = torch.randn(16, 205, 768)\noutput = m1(input)\n#output = m2(output)\nprint(output.size())\noutput = m3(output)\n#output = m4(output)\nprint(output.size())\noutput = m5(output)\n#output = m6(output)\nprint(output.size())","efec9c27":"for fold in FOLDS:\n    print(\"Fold :\",fold)\n    train_df, valid_df = df[df.kfold!=fold], df[df.kfold==fold]\n    train_dataset = BertDataset(train_df.excerpt.values,(np.array([train_df.target.values,train_df.standard_error.values]).T),max_len=max_words)\n    valid_dataset = BertDataset(valid_df.excerpt.values,(np.array([valid_df.target.values,valid_df.standard_error.values]).T),max_len=max_words)\n    train_dloader = DataLoader(train_dataset,batch_size=BATCH_SIZE,shuffle=True,num_workers=4)\n    valid_dloader = DataLoader(valid_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4)\n    bert_model = BertModel() \n    trainer = pl.Trainer(gpus=-1,max_epochs=EPOCHS,callbacks=[EarlyStopping(monitor=\"val_loss\",mode=\"min\",patience=5)],checkpoint_callback=False)\n    trainer.fit(model = bert_model,train_dataloader = train_dloader,val_dataloaders = valid_dloader)\n    trainer.save_checkpoint(f\"checkpoint_{fold}fold.ckpt\") ","156aa700":"check_dataset = BertDataset(df.excerpt.values,labels = (np.array([df.target.values,df.standard_error.values]).T),max_len=max_words)\ncheck_dataloader = DataLoader(check_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4) ","9996cafe":"train_df, valid_df = df[df.kfold!=0], df[df.kfold==0]\ntest_tensor = torch.tensor(np.array([train_df.target.values,train_df.standard_error.values]).T).view(-1,2)\nprint(test_tensor)\nprint(test_tensor[:,0])","5901c28b":"target_prediction = np.zeros(df.shape[0]) \nerror_prediction = np.zeros(df.shape[0]) \ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nfor fold in FOLDS:\n    print(\"Fold:\",fold)\n    loaded_model = BertModel.load_from_checkpoint(f\".\/checkpoint_{fold}fold.ckpt\",map_location=device)\n    loaded_model.to(device)\n    loaded_model.eval() \n    #using the same BertDataset module of train, here dummy labels are provided\n    check_dataset = BertDataset(df.excerpt.values,labels = (np.array([df.target.values,df.standard_error.values]).T),max_len=max_words)\n    check_dataloader = DataLoader(check_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4)\n    out_target = []\n    out_error = []\n    for batch in check_dataloader:\n        x  = batch[\"inputs\"]\n        labels = batch[\"label\"]\n        for key in x.keys():\n            x[key] = x[key].to(device)\n        assert x[\"input_ids\"].is_cuda, f\"data is not in model device({loaded_model.device.type})\"\n        out = loaded_model(x)\n        out = torch.squeeze(out, dim=1)\n        #print(out.size())\n        out_target_t = out[:,0]\n        out_error_t = out[:,1]\n        out_target.extend(out_target_t.cpu().detach().numpy())\n        out_error.extend(out_error_t.cpu().detach().numpy())\n        label_target = labels[:,0]\n        label_error = labels[:,0]\n        #print(out,labels)\n    target_prediction += np.hstack(out_target)\n    error_prediction += np.hstack(out_error)\n    #target_label += np.hstack(label_target)\n    #error_label += np.hstack(label_error)","bde0cce1":"plt.scatter(target_prediction\/5, df['target'])","70218bf9":"plt.scatter(target_prediction\/5, error_prediction\/5)","62b0febc":"np.ones([test_df.shape[0],2])","ec9af34b":"test_dataset = BertDataset(test_df.excerpt.values,labels = np.ones([test_df.shape[0],2]),max_len=max_words)\ntest_dataloader = DataLoader(test_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4)","07953021":"target_prediction = np.zeros(test_df.shape[0]) \nerror_prediction = np.zeros(test_df.shape[0]) \ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nfor fold in FOLDS:\n    print(\"Fold:\",fold)\n    loaded_model = BertModel.load_from_checkpoint(f\".\/checkpoint_{fold}fold.ckpt\",map_location=device)\n    loaded_model.to(device)\n    loaded_model.eval() \n    #using the same BertDataset module of train, here dummy labels are provided\n    test_dataset = BertDataset(test_df.excerpt.values,labels = np.ones([test_df.shape[0],2]),max_len=max_words)\n    test_dataloader = DataLoader(test_dataset,batch_size=BATCH_SIZE,shuffle=False,num_workers=4)\n    out_target = []\n    out_error = []\n    for batch in test_dataloader:\n        x  = batch[\"inputs\"]\n        for key in x.keys():\n            x[key] = x[key].to(device)\n        assert x[\"input_ids\"].is_cuda, f\"data is not in model device({loaded_model.device.type})\"\n        out = loaded_model(x)\n        out = torch.squeeze(out, dim=1)\n        out_target_t = out[:,0]\n        out_error_t = out[:,1]\n        out_target.extend(out_target_t.cpu().detach().numpy())\n        out_error.extend(out_error_t.cpu().detach().numpy())\n    target_prediction += np.hstack(out_target)\n    error_prediction += np.hstack(out_error)","6736c67a":"target_prediction","90201dee":"test_df[\"target\"] = target_prediction\/NUM_FOLDS\nsub = test_df.drop(\"excerpt\",axis=1) \nsub.to_csv(\"submission.csv\",index=False)","ac3f932f":"sub","4e261ad3":"# Create Folds ","a7d140bc":"# Bert Model and Training Module","df32f84c":"# Data and Process","8a9bb0fb":"# Tokenize Dataset and Dataloader","417dcb72":"# Trainer","82d13c3b":"# Load Weights and Inference ","a4b38966":"# check with training data"}}