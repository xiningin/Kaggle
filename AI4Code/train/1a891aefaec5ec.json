{"cell_type":{"4837f802":"code","807b7b94":"code","cbbeed19":"code","55f02312":"code","da424a2b":"code","e2e328cc":"code","2a7b62f4":"code","3b6e674d":"code","94cdc9b0":"code","ebc7cdce":"code","1bb0c566":"code","af810224":"code","863f334c":"code","aca62bf3":"code","6eb02051":"code","ef6b8761":"code","52472140":"code","6d4877b7":"code","c5b01648":"code","1f5f0df2":"code","f82f5279":"code","ead1ff5c":"code","55dab209":"code","f1329205":"code","4198432a":"code","0d8c5162":"code","754160bd":"code","6a6af48e":"code","7d0bf72f":"code","ade83852":"code","d7fb99c8":"code","d0cc5627":"code","89f255d7":"code","cd0c9f36":"code","7cab04e0":"code","7d9f1b03":"code","93794a7e":"code","8c919758":"code","97a03189":"code","c4c0db4c":"code","fdb18b38":"code","dedd606c":"code","dfb10871":"code","77f6e48d":"code","44df86e4":"code","ac8c078d":"code","f5118149":"code","b02fe860":"code","7470d012":"code","d718bd37":"code","feb7fbbd":"code","97030462":"code","e3f3e836":"code","e95f2db8":"code","9bece1ce":"code","d2d7e7e6":"code","25c28c34":"code","3e65b32e":"code","bf079005":"code","8f0205ac":"code","7637c0e7":"code","e3a36066":"code","1af44c2c":"code","aa9d64d8":"code","1b6f4948":"code","0d08fd2e":"code","d7f7b187":"code","f5454324":"code","0ef257ed":"code","467505ec":"code","8133ffd5":"code","393af66c":"code","a68f4536":"code","519ebe08":"code","4e5aa167":"code","528fb6a5":"code","5b73faaa":"code","629c31e3":"code","f370cec4":"code","53a4a364":"code","c186a81a":"code","7cdd3f9f":"code","6e7e442f":"code","812cb5bc":"code","99cdf6b0":"code","89717ad1":"code","f558e0f2":"code","37f030f5":"code","4673c789":"code","c3a0bde6":"code","edbfeab0":"code","75614099":"code","a4cf695e":"code","0bc89819":"code","f908ee85":"code","af269a7d":"code","0bd73fad":"code","2034498f":"code","2910172c":"markdown","7a1c28bb":"markdown","1ebb137b":"markdown","2206659d":"markdown","2a3c3a5b":"markdown","9cf16d4b":"markdown","eb4ef31a":"markdown","34e887b9":"markdown","5a802b20":"markdown","643045f9":"markdown","82fa755d":"markdown","faf52b50":"markdown","71213c14":"markdown","db3e88e7":"markdown","3059db1a":"markdown","3ee23809":"markdown","de5c14ac":"markdown","2e55c00c":"markdown","039fc6d3":"markdown","6c1acf77":"markdown","3b1c1bde":"markdown","eb3af8f8":"markdown","614c4a26":"markdown","1f26d89f":"markdown","6dfdb71b":"markdown","2579409c":"markdown","6bd98357":"markdown","c2e9afb4":"markdown","4fa16309":"markdown","7f6fb192":"markdown","47e9f028":"markdown","6af742d2":"markdown","fc2f12c5":"markdown","f17ebc31":"markdown"},"source":{"4837f802":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","807b7b94":"admission_df= pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\")","cbbeed19":"admission_df.head(5)","55f02312":"admission_df.info()","da424a2b":"admission_df.describe()","e2e328cc":"admission_df.shape","2a7b62f4":"admission_df.columns","3b6e674d":"admission_df.isnull().value_counts()","94cdc9b0":"admission=admission_df.drop('Serial No.',axis=1)","ebc7cdce":"admission.head(3)","1bb0c566":"admission.shape","af810224":"admission.info()","863f334c":"admission.describe()","aca62bf3":"import seaborn as sns\nimport matplotlib.pyplot as plt ","6eb02051":"sns.pairplot(admission,hue='University Rating',palette='viridis')","ef6b8761":"sns.histplot(admission['GRE Score'],bins=10)","52472140":"# Define the number of rows and columns you want\nplt.figure(figsize=(30,30))\n# Create the subplots\nn_rows=3\nn_cols=3\nfig, axes = plt.subplots(nrows=3, ncols=3)\n\nfor i, column in enumerate(admission.columns):\n    sns.distplot(admission[column],ax=axes[i\/\/n_cols,i%n_cols])\n    \n    ","6d4877b7":"sns.histplot(admission['TOEFL Score'],bins=10)","c5b01648":"sns.histplot(admission['LOR '],bins=5)","1f5f0df2":"sns.histplot(admission['SOP'],bins=10)","f82f5279":"sns.histplot(admission['University Rating'],bins=5)","ead1ff5c":"sns.histplot(admission['CGPA'],bins=10)","55dab209":"sns.histplot(admission['Research'],bins=2)","f1329205":"fig, axes = plt.subplots(ncols=len(admission.columns), figsize=(30,15))\nfor ax, col in zip(axes, admission.columns):\n  sns.distplot(admission[col], ax=ax)\n  plt.tight_layout() \nplt.show()","4198432a":"admission.columns","0d8c5162":"sns.barplot(x='University Rating',y='Chance of Admit ',data=admission,hue=\"Research\")","754160bd":"admission.corr()","6a6af48e":"sns.heatmap(admission.corr(),annot=True,cmap='YlGnBu')","7d0bf72f":"from sklearn.model_selection import train_test_split","ade83852":"X=admission.drop('Chance of Admit ',axis=1)\ny=admission['Chance of Admit ']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","d7fb99c8":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()","d0cc5627":"scaler.fit(admission)","89f255d7":"scaled_admit=pd.DataFrame(scaler.transform(admission))\na=[admission.columns]\nscaled_admit.colunms=a\nscaled_admit.head(3)","cd0c9f36":"from sklearn.linear_model import LinearRegression\nlinear_reg=LinearRegression()","7cab04e0":"linear_reg.fit(X_train,y_train)","7d9f1b03":"predict_linear=linear_reg.predict(X_test)","93794a7e":"from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error","8c919758":"print(\"MAE :\", mean_absolute_error(y_test,predict_linear))\nprint(\"MSE :\",mean_squared_error(y_test,predict_linear))\nprint(\"RMSE :\",np.sqrt(mean_squared_error(y_test,predict_linear)))\nprint(\"R2 score:\", r2_score(y_test,predict_linear))","97a03189":"sns.scatterplot(y_test,predict_linear)","c4c0db4c":"from sklearn.ensemble import RandomForestRegressor","fdb18b38":"rf=RandomForestRegressor(n_estimators=100,verbose=3,random_state=42)","dedd606c":"rf.fit(X_train,y_train)","dfb10871":"rf_pred=rf.predict(X_test)","77f6e48d":"print(\"MAE :\",mean_absolute_error(y_test,rf_pred))\nprint(\"MSE :\",mean_squared_error(y_test,rf_pred))\nprint(\"RMSE :\", np.sqrt(mean_squared_error(y_test,rf_pred)))\nprint(\"R2 score :\",r2_score(y_test,rf_pred))","44df86e4":"from sklearn.svm import SVR","ac8c078d":"svr=SVR(verbose=3)","f5118149":"svr.fit(X_train,y_train)","b02fe860":"pred_svr=svr.predict(X_test)","7470d012":"print(\"MAE :\",mean_absolute_error(y_test,pred_svr))\nprint(\"MSE :\",mean_squared_error(y_test,pred_svr))\nprint(\"RMSE :\", np.sqrt(mean_squared_error(y_test,pred_svr)))\nprint(\"R2 score :\",r2_score(y_test,pred_svr))","d718bd37":"from sklearn.model_selection import GridSearchCV","feb7fbbd":"param_grid={'C':[0.1,1,10,100],'gamma':[1,0.1,0.01,0.001]}","97030462":"grid=GridSearchCV(SVR(),param_grid,verbose=3)","e3f3e836":"grid.fit(X_train,y_train)","e95f2db8":"grid.best_estimator_","9bece1ce":"grid.best_params_","d2d7e7e6":"grid.best_score_","25c28c34":"best_svr_pred=grid.predict(X_test)","3e65b32e":"print(\"MAE :\",mean_absolute_error(y_test,best_svr_pred))\nprint(\"MSE :\",mean_squared_error(y_test,best_svr_pred))\nprint(\"RMSE :\", np.sqrt(mean_squared_error(y_test,best_svr_pred)))\nprint(\"R2 score :\",r2_score(y_test,best_svr_pred))","bf079005":"from tensorflow import keras\nfrom tensorflow.keras import layers","8f0205ac":"model=keras.Sequential([\n    layers.Dense(units=512,activation='relu',input_shape=[7]),\n    layers.Dropout(rate=0.3),\n    layers.Dense(256,activation='relu'),\n    layers.Dropout(rate=0.3),\n    layers.Dense(128,activation='relu'),\n    layers.Dropout(rate=0.3),\n    layers.Dense(1)\n    \n])","7637c0e7":"model.compile(\noptimizer='adam',\nloss='mse')","e3a36066":"X=admission.drop('Chance of Admit ',axis=1).values\ny=admission['Chance of Admit '].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","1af44c2c":"X_train","aa9d64d8":"model.fit(\n    X_train, y_train,\n    batch_size=512,\n    epochs=250,\n    verbose=3,\n)","1b6f4948":"loss_df=pd.DataFrame(model.history.history)\nloss_df.plot()","0d08fd2e":"model.evaluate(X_test,y_test)","d7f7b187":"model.evaluate(X_train,y_train)","f5454324":"test_predictions=model.predict(X_test)","0ef257ed":"test_predictions","467505ec":"test_predictions=pd.Series(test_predictions.reshape(150,))","8133ffd5":"pred_df=pd.DataFrame(y_test,columns=[\"Test True Y\"])","393af66c":"pred_df=pd.concat([pred_df,test_predictions],axis=1)","a68f4536":"print(pred_df)","519ebe08":"pred_df.columns=[\"Test True Y\", \"Model Predictions\"]","4e5aa167":"print(pred_df)","528fb6a5":"sns.scatterplot(x=\"Test True Y\",y=\"Model Predictions\",data=pred_df)","5b73faaa":"from sklearn.metrics import mean_absolute_error,mean_squared_error","629c31e3":"mean_absolute_error(pred_df[\"Test True Y\"],pred_df[\"Model Predictions\"])","f370cec4":"admission.describe()","53a4a364":"mean_squared_error(pred_df[\"Test True Y\"],pred_df[\"Model Predictions\"])**0.5","c186a81a":"admission.head(1)","7cdd3f9f":"new_admission=[[330,120,3,3,3,8.33,0]]","6e7e442f":"model.predict(new_admission)","812cb5bc":"model1=keras.Sequential([\n    layers.BatchNormalization(input_shape=[7]),\n    layers.Dense(units=512,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n    layers.Dense(256,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n    layers.Dense(128,activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.3),\n    layers.Dense(1)\n    \n])","99cdf6b0":"model1.compile(\noptimizer='adam',\nloss='mse')","89717ad1":"model1.fit(\n    X_train, y_train,\n    batch_size=512,\n    epochs=50,\n    verbose=1,\n)","f558e0f2":"loss_df=pd.DataFrame(model1.history.history)\n","37f030f5":"loss_df.plot()","4673c789":"test_predictions1= model1.predict(X_test)","c3a0bde6":"test_predictions1","edbfeab0":"test_predictions1=pd.Series(test_predictions1.reshape(150,))","75614099":"pred_df1=pd.DataFrame(y_test,columns=[\"Test True Y\"])","a4cf695e":"pred_df1=pd.concat([pred_df,test_predictions1],axis=1)","0bc89819":"print(pred_df1)","f908ee85":"pred_df1.columns=[\"Test True Y\",\"Model Predictions\",\"Model Predictions 1\"]","af269a7d":"sns.scatterplot(x=\"Test True Y\",y=\"Model Predictions 1\",data=pred_df1)","0bd73fad":"mean_absolute_error(pred_df1[\"Test True Y\"],pred_df1[\"Model Predictions 1\"])","2034498f":"mean_squared_error(pred_df1[\"Test True Y\"],pred_df1[\"Model Predictions 1\"])**0.5","2910172c":"# Result","7a1c28bb":"Evaluating the performance of the tuned SVR","1ebb137b":"# Exploratory Data Analysis","2206659d":"The names of the columns in the dataset are as follows:","2a3c3a5b":"**Splitting the dataset into train and test set**","9cf16d4b":"**Loading the necessary packages**","eb4ef31a":"Neural Network","34e887b9":"# Regression models","5a802b20":"# Loading the dataset ","643045f9":"**Evaluating the performance of the model**","82fa755d":"**Plotting the histogram**","faf52b50":"**After dropping the serial column, the dataset looks as below:**","71213c14":"Plotting the pairplot ","db3e88e7":"Defining the various values to be used for gamma and cost parameter","3059db1a":"Comparing the Mean Squared error and R2 score of the model, we can infer that the linear regression model performs better compared to all the other models with an accuracy of 82.58%.","3ee23809":"From the above tables, we can infer that this problem comes under regression and we can drop the column serial number since this column does not have any influence in the prediction","de5c14ac":"We get a R2 score of 82.56% which is a decent score","2e55c00c":"**Creating a heatmap**","039fc6d3":"From this barplot we can infer that a person who has done a research work has higher possibility of getting a admit in all type of university ","6c1acf77":"**Evaluating the performance of Random Forest**","3b1c1bde":"SVM Regressor","eb3af8f8":"**Checking the head and info of the dataset**","614c4a26":"**Scaling the data**","1f26d89f":"Tuning the parameters such as Cost and gamma for the SVR to improve its performance ","6dfdb71b":"Evaluating the performance of Support Vector Machine","2579409c":"The scatterplot explains the linear plot between the ","6bd98357":"**Random Forest Regressor**","c2e9afb4":"University Rating and chance of admit for students who has done research","4fa16309":"We can infer the following from the heatmap:\n* Chance of admit is highly correlated with GRE score, TOEFL score and CGPA\n* Chance of admit is moderately correlated with University rating, SOP,LOR\n* Chance of admit is weakly correlated with Research\n* Gre score is highly positively correlated with the TOEFL score\n* CGPA is highly correlated with GRE score, TOEFL score","7f6fb192":"Neural Network with Batch Normalization ","47e9f028":"**Correlation matrix**","6af742d2":"***Creating a 70-30 split***","fc2f12c5":"Loading the GridSearch ","f17ebc31":"**Loading the linear regression model**"}}