{"cell_type":{"da04010a":"code","ee161f33":"code","305a80ac":"code","38f1ab7c":"code","a2a09192":"code","864a80f0":"code","4584f182":"code","b05fbada":"code","a4e44cb0":"code","72ebb7db":"code","f63f4c7f":"code","4798113b":"code","42a13546":"code","06cc569c":"code","31eb91af":"code","c95f8030":"code","7e60c0ee":"code","1a46fb26":"code","738897b9":"code","a46fb72b":"code","fe35e965":"code","4f058024":"code","cfae4793":"code","f27a39eb":"code","2bc779c1":"code","dcb3283b":"markdown","0c931125":"markdown","dcad31de":"markdown","792391a0":"markdown","59ba893c":"markdown","caba9fa3":"markdown","22681368":"markdown","d06f03f6":"markdown","f3ecbfa7":"markdown","322b276c":"markdown","37aa6780":"markdown","858e578e":"markdown","3cc968f5":"markdown","e14e673f":"markdown","bb5be274":"markdown","8e63124c":"markdown","eef49388":"markdown","d71f425f":"markdown","a70c1799":"markdown"},"source":{"da04010a":"import numpy as np\nimport pandas as pa\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\n#Import Plotly\nimport plotly.express as px\nimport plotly.offline as py\nimport plotly.graph_objects as go\nimport folium \n\n%matplotlib inline\nimport squarify\nimport matplotlib\nimport matplotlib as mpl\nimport matplotlib.cm as cm\n\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 32}\n\nmatplotlib.rcParams.update({'font.size': 30})\n\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')","ee161f33":"original_data = pa.read_csv('..\/input\/2019-coronavirus-dataset-01212020-01262020\/2019_nCoV_20200121_20200206.csv')\ndata = original_data","305a80ac":"for i in data[data['Province\/State'].isna()].index:\n    data.loc[i,'Province\/State'] = 'Other' + ' ' + str(data.loc[i,'Country\/Region'])\n\ndata = data.fillna(0)\n\ndata['Province\/State'] = data['Province\/State'].astype('category')\ndata['Country\/Region'] = data['Country\/Region'].astype('category')\ndata['Last Update'] = pa.to_datetime(data['Last Update'])","38f1ab7c":"data.info()","a2a09192":"data.head()","864a80f0":"'''country_count = data['Country\/Region'].value_counts()\ncountry = pa.DataFrame({'Name':country_count.index,'Values':country_count.values})\nnames = []\nfor values in country_count.index:\n    if ((values == 'Mainland China') | (values == 'Cambodia') |(values == 'South Korea') | (values == 'Hong Kong')| (values == 'Japan' ) | (values == 'Thailand')|(values == 'Taiwan') | (values == 'Macau') | (values =='Singapore')|(values =='Vietnam')|(values =='Malaysia')|(values =='Philippines')|(values =='Nepal') | (values =='Sri Lanka')):\n        names.append('Asia')\n    if (( values == 'United States') | ( values == 'Mexico' ) | ( values =='Colombia') | ( values == 'Brazil') | ( values == 'Canada')):\n        names.append('America')\n    if (( values == 'France') | ( values == 'Germany' )):  \n        names.append('Europe') \n    if (( values == 'Ivory Coast')):\n        names.append('Africa')\n    if (( values == 'Australia' )):\n        names.append('Oceania')\n\ncountry['Continent'] = names'''","4584f182":"matplotlib.rcParams.update({'font.size': 35})\n\nplt.figure(figsize=(60,17))\ncountry_count = data['Country\/Region'].value_counts()\nsquarify.plot(sizes=country_count.values,label=country_count.index,alpha=0.7)","b05fbada":"#data['Last Update'] = pa.to_datetime(data['Last Update'])\nfinal_data = pa.DataFrame(columns=['Province\/State','Country\/Region','Last Update','Confirmed','Suspected','Recovered','Death'])","a4e44cb0":"def search_values(state):\n    value = len(final_data[final_data['Province\/State'] == state])\n    if(value>0):\n        return True\n    else:\n        return False","72ebb7db":"for i,(row_name,row) in enumerate(data.iterrows()):\n    if i == 0:\n        final_data.loc[i] = [row['Province\/State']] + [row['Country\/Region']] +  [row['Last Update']] + [row['Confirmed']]  + [row['Suspected']] + [row['Recovered']]+ [row['Death']]\n    else:\n        val = search_values(row['Province\/State'])\n        if val == False:\n            final_data.loc[i] = [row['Province\/State']] + [row['Country\/Region']] +  [row['Last Update']] + [row['Confirmed']]  + [row['Suspected']] + [row['Recovered']]+ [row['Death']]\nfinal_data= final_data.reset_index(drop=True)\nfinal_data.head(5)","f63f4c7f":"data= final_data","4798113b":"data_province = data.groupby('Province\/State').sum()\ndata_province = data_province[data_province['Confirmed'] > 0].sort_values(by=['Confirmed'],ascending=False)\n\nfig = go.Figure(go.Bar(x=data_province['Confirmed'],\n                       y=data_province.index,\n                       orientation='h',\n        marker={\n        'color': [np.random.randint(10,255) for x in range(0,len(data_province))],\n        'colorscale': 'Viridis'\n        }\n        ))\n\nfig.update_layout(yaxis=dict(title='States'),width=900,height=500,title='Total Confirmed Coronavirus cases over States',\n                 xaxis=dict(title='Confirmed'))\nfig.show()","42a13546":"data_province = data.groupby('Province\/State').sum()\ndata_province = data_province[data_province['Recovered'] > 0].sort_values(by=['Recovered'],ascending=False)\n\nfig = go.Figure(go.Bar(x=data_province['Recovered'],\n                       y=data_province.index,\n                       orientation='h',\n        marker={\n        'color': [np.random.randint(10,255) for x in range(0,len(data_province))],\n        'colorscale': 'Viridis'\n        }\n        ))\n\nfig.update_layout(yaxis=dict(title='States'),width=900,height=500,title='Total Recovered Coronavirus cases over States',\n                 xaxis=dict(title='Recovered'))\nfig.show()","06cc569c":"fig_c = go.Pie(labels=data['Country\/Region'],values=data['Death'], textinfo='label+percent',hole=0.4,domain={'x': [0,0.40]})\n\ndata_province = data_province[data_province['Death'] > 0].sort_values(by=['Death'],ascending=False)\n\nfig_s = go.Pie(labels=data_province.index,values=data_province['Death'], textinfo='label+percent',hole=0.4,\n               domain={'x': [0.46,1]})\n\nlayout = dict(font=dict(size=10), legend=dict(orientation=\"v\"),\n              annotations = [dict(x=0.14, y=0.5, text='Country', showarrow=False, font=dict(size=20)),\n                             dict(x=0.77, y=0.5, text='State', showarrow=False, font=dict(size=20)) ])\n\n\nfig = dict(data=[fig_s, fig_c],layout=layout)\npy.iplot(fig)","31eb91af":"data_other_country = data[data['Country\/Region']!= 'Mainland China']\n\nfig_c = go.Pie(labels=data_other_country['Country\/Region'],values=data_other_country['Confirmed'], textinfo='label+percent',\n               hole=0.4,domain={'x': [0,0.40]})\n\nfig_s = go.Pie(labels=data_other_country['Country\/Region'],values=data_other_country['Recovered'], \n               textinfo='label+percent',hole=0.4,\n               domain={'x': [0.46,1]})\n\nlayout = dict(font=dict(size=10), legend=dict(orientation=\"v\"),\n              annotations = [dict(x=0.13, y=0.5, text='Confirmed', showarrow=False, font=dict(size=20)),\n                             dict(x=0.80, y=0.5, text='Recovered', showarrow=False, font=dict(size=20)) ])\n\n\nfig = dict(data=[fig_s, fig_c],layout=layout)\npy.iplot(fig)","c95f8030":"data_cn = data.groupby('Country\/Region')['Recovered','Death'].sum()\ndata_cn.loc['Mainland China']\n#sn.barplot(x = data_cn.loc['Mainland China'].index,y=data_cn.loc['Mainland China'].values)\n\nfig = go.Figure(go.Bar(y=data_cn.loc['Mainland China'].values,\n                       x=data_cn.loc['Mainland China'].index,\n                       orientation='v',\n        marker={\n        'color': [np.random.randint(0,225) for x in range(0,2)]\n        \n        }\n        ))\n\nfig.update_layout(yaxis=dict(title='Values'),width=900,height=500,title='Total number of recovered and deaths cases in China',\n                 xaxis=dict(title='Status'))\n\nfig.show()","7e60c0ee":"data_china = data[data['Country\/Region'] == 'Mainland China']\ndata_china_val = data_china.groupby(['Country\/Region']).sum() \n\ndata_chinac = data_china[(data_china['Recovered']!= 0) | (data_china['Death']!=0.0)]\n\nst = data_chinac['Province\/State']\nrec = data_chinac['Recovered']\nde = data_chinac['Death']\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(y=rec, x=st,name='Recovered'))\nfig.add_trace(go.Bar(x=st,\n                       y=rec,showlegend=False,\n                       orientation='v'))\n\n\nfig.add_trace(go.Scatter(x=st, y=de,name='Death'))\nfig.add_trace(go.Bar(x=st,\n                       y=de,showlegend=False,\n                       orientation='v'))\n\nfig.update_layout(yaxis=dict(title='Recovered & Death'),width=900,height=500,\n                  title=\"Analysis of China's Recovered and Death cases\",\n                  xaxis=dict(title='Status'))\n\nfig.show()","1a46fb26":"china_locations = pa.read_csv('..\/input\/china-locations-states\/china_locations_states.csv')\nchina_locations = china_locations.rename({'admin':'Province\/State'},axis=1)\nchina_locations = china_locations.drop(['population'],axis=1)\nchina_locations = china_locations.groupby('Province\/State').mean()\nchina_locations.reset_index(inplace=True)\n\ndata_china_loc = data_china.groupby('Province\/State')['Confirmed','Suspected','Recovered','Death'].sum()\ndata_china_loc.reset_index(inplace=True)\ndata_china_loc = data_china_loc[(data_china_loc['Confirmed'] >0) | (data_china_loc['Suspected'] >0) |\n                                (data_china_loc['Recovered'] >0)]\n\nfinal_china_state = pa.merge(data_china_loc,china_locations, on='Province\/State')\n\nprint('Blue Represent Death and Orange represent Recovered')\n\nfolium_map = folium.Map(location=[32.8617,109.1954],zoom_start=5,tiles='CartoDB dark_matter')\nfor index, row in final_china_state.iterrows():\n    iter_val = ['Recovered','Death']\n    \n    for status in iter_val:\n        if status == 'Recovered':\n            color = '#E37222'\n            value = row[status] \/ 10\n            #print(value)\n        else:\n            color = '#0A8A9F'\n            value = row[status]\/10\n            #print(value)\n            \n        if value!=0:\n            folium.CircleMarker(location=(row['lat'],row['lng']),radius=value,color=color,\n                                popup = ('<strong><u>Country<\/u><\/strong>: ' + str(row['Province\/State']).capitalize())\n                                ,fill=True).add_to(folium_map)\n    \nfolium_map","738897b9":"values = data_china_val.loc['Mainland China'].values\n\nfig = go.Figure(go.Bar(y=values,\n                       x=['Confirmed','Suspected','Recovered','Death'],\n                       orientation='v',\n        marker={\n        'color': [np.random.randint(100,255) for x in range(0,len(values))],\n        'colorscale': 'Viridis'\n        }\n        ))\n\nfig.update_layout(yaxis=dict(title='Values'),width=900,height=500,\n                  title='Analysis China Recovered and Confirmed and Death',\n                  xaxis=dict(title='Status'))\nfig.show()","a46fb72b":"fig = go.Figure(go.Treemap(\n    \n    labels = data_china['Province\/State'],\n    values = data_china.Confirmed,\n    parents = data_china['Country\/Region']\n))\n\nfig.show()","fe35e965":"folium_map = folium.Map(location=[35.8617,104.1954],zoom_start=5,tiles='CartoDB dark_matter')\n\nfor index, row in final_china_state.iterrows():\n    folium.CircleMarker(location=(row['lat'],row['lng']),radius=row['Confirmed']\/400\n                        ,color='#E37222',\n                        popup = ('<strong><u>Country<\/u><\/strong>: ' + str(row['Province\/State']).capitalize())\n                        ,fill=True).add_to(folium_map)\n\n\nfolium_map","4f058024":"z = original_data[original_data['Province\/State'] == 'Hubei']\nz = z.fillna(0)","cfae4793":"z['Last Update'] = pa.to_datetime(z['Last Update'])\ndf = z.pivot_table(columns=z['Last Update'].dt.hour,index = z['Last Update'].dt.day,values='Confirmed')\ndf = df.fillna(0)\n\nmatplotlib.rcParams.update({'font.size': 12})\n\ndef pie_heatmap(table, cmap='coolwarm_r', vmin=None, vmax=None,inner_r=0.25):\n    n, m = table.shape\n    vmin= table.min().min() if vmin is None else vmin\n    vmax= table.max().max() if vmax is None else vmax\n\n    centre_circle = plt.Circle((0,0),inner_r,edgecolor='black',facecolor='white',fill=True,linewidth=0.3)\n    plt.gcf().gca().add_artist(centre_circle)\n    norm = mpl.colors.Normalize(vmin=vmin, vmax=vmax)\n    cmapper = cm.ScalarMappable(norm=norm, cmap=cmap)\n  \n    for i, (row_name, row) in enumerate(table.iterrows()):\n        labels = None if i > 0 else table.columns\n        wedges = plt.pie([1] * m,radius=inner_r+float(n-i)\/n, colors=[cmapper.to_rgba(x) for x in row.values], \n            labels=labels, startangle=90, counterclock=False, wedgeprops={'linewidth':-1})\n        plt.setp(wedges[0], edgecolor='grey',linewidth=1.8)\n        wedges = plt.pie([1], radius=inner_r+float(n-i-1.2)\/n, colors=['w'], labels=[row_name], startangle=-90, wedgeprops={'linewidth':0})\n        plt.setp(wedges[0], edgecolor='grey',linewidth=1.8)\n        \nplt.figure(figsize=(8,8))\nplt.title(\"Timewheel of Hour Vs Date\",y=1.08,fontsize=30)\npie_heatmap(df,vmin=-10,vmax=25,inner_r=0.25)","f27a39eb":"import plotly.express as px\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=z['Last Update'], y=z['Confirmed'],name=\"Confirmed\"))\nfig.add_trace(go.Bar(x=z['Last Update'],\n                       y=z['Confirmed'],\n                       showlegend=False,\n                       orientation='v'))\n\n\nfig.add_trace(go.Scatter(x=z['Last Update'], y=z['Recovered'],name=\"Recovered\"))\nfig.add_trace(go.Bar(x=z['Last Update'],\n                       y=z['Recovered'],\n                       showlegend=False,\n                       orientation='v'))\n\nfig.add_trace(go.Scatter(x=z['Last Update'], y=z['Death'],name=\"Death\"))\nfig.add_trace(go.Bar(x=z['Last Update'],\n                       y=z['Death'],\n                       showlegend=False,\n                       orientation='v'))\n\nfig.add_trace(go.Scatter(x=z['Last Update'], y=z['Suspected'],name=\"Suspected\"))\nfig.add_trace(go.Bar(x=z['Last Update'],\n                       y=z['Suspected'],\n                       showlegend=False,\n                       orientation='v'))\n\nfig.update_layout(yaxis=dict(title='Values'),width=900,height=500,\n                  title='Analysis of Death\/Recovered\/Confirmed in Hubei with time',\n                  xaxis=dict(title='Time in Date'))","2bc779c1":"data_country = data.groupby('Country\/Region')['Confirmed'].sum()\n\nworldmap = [dict(type = 'choropleth', locations = data_country.index, locationmode = 'country names',\n                 z = data_country.values, colorscale = \"Inferno\", reversescale = True, \n                 marker = dict(line = dict( width = 0.5)), \n                 colorbar = dict(autotick = True, title = 'Number of Confirmed cases'))]\n\nlayout = dict(title = 'Coronavirus across all over the world', geo = dict(showframe = False, showcoastlines = True, \n                                                                projection = dict(type = 'Mercator')))\n\nfig = dict(data=worldmap, layout=layout)\npy.iplot(fig, validate=False)","dcb3283b":"The number of victims of this virus is increasing in hubei as it it can be seen clearly from the above plot,the main place from where this virus originated is Wuhan which is the capital of  capital of Central China\u2019s Hubei province.  ","0c931125":"All Peoples died due to coranavirus are from China(492),Hongkong(1),Philippines(1) and states is Hubei (In Hubei 479 people died due to this virus which is almost 97.4% compared to other states).It means 13 people died from other states.","dcad31de":"Hubei has the most number of recovered and deaths as compared to others.\n\nThere's currently a severe shortage of medical supplies, not just in Wuhan but in surrounding cities as well, the governor of Hubei Province, Wang Xiaodong said at a press conference on Wednesday.\nThe mask shortage has become a country-wide problem since the new coronavirus outbreak spread domestically. Everyone who goes outside is suggested to wear mask. But the problem is it's hard to get one. Besides experts suggested the use of normal surgical masks, people have to replace it every four hours.\n\nChina is also recovering quite fast from the above plot it is clear.\n\nSource - https:\/\/news.cgtn.com\/news\/2020-01-30\/Hubei-has-a-severe-shortage-of-medical-supplies-says-governor-NFDtX4DR7i\/index.html","792391a0":"### Get all the latest updated values","59ba893c":"### Check the number of confirmed cases for each update time in Hubei ","caba9fa3":"## If you found this notebook useful pls upvote","22681368":"#### Frequencies Country\/Region","d06f03f6":"From the first plot we can see that all the states that accumulated number of confirmed cases is more in Thailand,Taiwan,Hong Kong,Japan,Singapore,Macau the regions which falls under china or the neghiboring countries of china.","f3ecbfa7":"#### Analysis China Recovered and Confirmed and Death accross all state of china","322b276c":"# Coronavirus Analysis\n\n<img src='https:\/\/bolnews.s3.amazonaws.com\/wp-content\/uploads\/2020\/01\/Coranavirus-2.jpg1000-x-500.jpg' width='600' height='500' >\n\n### How Coronavirus Started\n\nThe virus appears to have originated from a Wuhan seafood market where wild animals, including marmots, birds, rabbits, bats and snakes, are traded illegally. Coronaviruses are known to jump from animals to humans, so it\u2019s thought that the first people infected with the disease \u2013 a group primarily made up of stallholders from the seafood market \u2013 contracted it from contact with animals.\n\nAlthough an initial analysis of the virus suggested it was similar to coronavirus seen in snakes, it now seems more likely that it came from bats. A team of virologists at the Wuhan Institute for Virology released a detailed paper showing that the new coronaviruses' genetic makeup is 96 per cent identical to that of a coronavirus found in bats. Bats were also the original source of the Sars virus.\n\nsrc= 'https:\/\/www.wired.co.uk\/article\/china-coronavirus'\n\nCoronaviruses are a group of viruses that cause diseases in mammals and birds. In humans, the viruses cause respiratory infections which are typically mild including the common cold but rarer forms like SARS and MERS can be lethal. In cows and pigs they may cause diarrhea, while in chickens they can cause an upper respiratory disease. There are no vaccines or antiviral drugs that are approved for prevention or treatment.\n\nCoronaviruses are viruses in the subfamily Orthocoronavirinae in the family Coronaviridae, in the order Nidovirales.Coronaviruses are enveloped viruses with a positive-sense single-stranded RNA genome and with a nucleocapsid of helical symmetry. The genomic size of coronaviruses ranges from approximately 26 to 32 kilobases, the largest for an RNA virus.\n\nThe name \"coronavirus\" is derived from the Latin corona, meaning crown or halo, which refers to the characteristic appearance of the virus particles (virions): they have a fringe reminiscent of a royal crown or of the solar corona.\n    \nSource -> https:\/\/en.wikipedia.org\/wiki\/Coronavirus","37aa6780":"### Country Confirmed and Recovered Coronavirus excluding China","858e578e":"### Death Percentage over state and country","3cc968f5":"### Analysing Hubei","e14e673f":"The number of recovered is more than death cases","bb5be274":"####  Confirmed cases in Province\/State in China","8e63124c":"Coronavirus found or Confirmed in people are mostly common in places like Hubei,Henan, Jiagxi,Beijing and Jiangsu.","eef49388":"**From the above timewheel [0,9,11,12,13,14,18,19,20,21,22,23] represent the hour i.e 0 means 12.00 am etc and [21,22,23.....31] represents the date.**\n\n**For example from the above plot if we take 24 th January we can see the number of confirmed cases updated two times one at 12.00 am another at 12.00 pm.**\n\n","d71f425f":"### Import Libraries","a70c1799":"Coranavirus is mostly common in China as compared to other countries. "}}