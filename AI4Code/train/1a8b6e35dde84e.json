{"cell_type":{"e89dc70c":"code","50f2a971":"code","991f23a2":"code","d38146c6":"code","5a68e38c":"code","832b97d9":"code","68df96d6":"code","6c8bfdf7":"markdown"},"source":{"e89dc70c":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom glob import glob\nimport cv2\nimport tensorflow as tf\nimport keras\nimport keras.backend as k\nimport os\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils import np_utils","50f2a971":"train_dir = '..\/input\/chest_xray\/chest_xray\/train\/'\ntest_dir = '..\/input\/chest_xray\/chest_xray\/test'\nval_dir = '..\/input\/chest_xray\/chest_xray\/val'\ninput_shape = (150, 150, 3)\n\nfrom keras.preprocessing.image import ImageDataGenerator\n\ngen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntrain = gen.flow_from_directory(train_dir, (150, 150), shuffle=True, seed=1, batch_size=16)\nval = gen.flow_from_directory(val_dir, (150, 150), shuffle=True, seed=1, batch_size=16)","991f23a2":"from keras import layers\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense","d38146c6":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2))\nmodel.add(Activation('sigmoid'))","5a68e38c":"opt = keras.optimizers.adam(lr=0.0001, decay=1e-6)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])","832b97d9":"model.fit_generator(train, validation_data=val, epochs=1, steps_per_epoch=5217, validation_steps=17, verbose=1)","68df96d6":"test = gen.flow_from_directory(test_dir, (150, 150), shuffle=False, seed=1, batch_size=8)\n\nscores = model.evaluate_generator(test, steps = 624)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","6c8bfdf7":"# Chest X-Ray Image Classification"}}