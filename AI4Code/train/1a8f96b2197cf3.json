{"cell_type":{"b8b59653":"code","6cfabe8f":"code","d1c8d7f2":"code","d5a845b8":"markdown"},"source":{"b8b59653":"import logging \nimport math\nimport os\nimport subprocess\nfrom multiprocessing import Pool\n\nfrom PIL import Image","6cfabe8f":"def create_logger(filename, \n                  logger_name='logger', \n                  file_fmt='%(asctime)s %(levelname)-8s: %(message)s',\n                  console_fmt='%(asctime)s | %(message)s',\n                  file_level=logging.DEBUG, \n                  console_level=logging.INFO):\n    \n    logger = logging.getLogger(logger_name)\n    logger.setLevel(logging.DEBUG)\n    logger.propagate = False\n\n    file_fmt = logging.Formatter(file_fmt)\n    log_file = logging.FileHandler(filename)\n    log_file.setLevel(file_level)\n    log_file.setFormatter(file_fmt)\n    logger.addHandler(log_file)\n\n    console_fmt = logging.Formatter(console_fmt)\n    log_console = logging.StreamHandler()\n    log_console.setLevel(logging.DEBUG)\n    log_console.setFormatter(console_fmt)\n    logger.addHandler(log_console)\n\n    return logger\n\n\ndef move_images_from_sub_to_root_folder(root_folder, subfolder):\n    subfolder_content = os.listdir(subfolder)\n    folders_in_subfolder = [i for i in subfolder_content if os.path.isdir(os.path.join(subfolder, i))]\n    for folder_in_subfolder in folders_in_subfolder:\n        subfolder_ = os.path.join(subfolder, folder_in_subfolder)\n        move_images_from_sub_to_root_folder(root_folder, subfolder_)\n    images = [i for i in subfolder_content if i not in folders_in_subfolder]\n    for image in images:\n        path_to_image = os.path.join(subfolder, image) \n        os.system(f\"mv {path_to_image} .\/{root_folder}\/{image}\")\n        \n        \ndef remove_all_subfolders_inside_folder(folder):\n    folder_content = os.listdir(folder)\n    subfolders = [i for i in folder_content if os.path.isdir(os.path.join(folder, i))]\n    for subfolder in subfolders:\n        path_to_subfolder = os.path.join(folder, subfolder)\n        os.system(f'rm -r {path_to_subfolder}')\n        \n        \ndef resize_folder_images(src_dir, dst_dir, size=224):\n    if not os.path.isdir(dst_dir):\n        logger.info(\"destination directory does not exist, creating destination directory.\")\n        os.makedirs(dst_dir)\n\n    image_filenames=os.listdir(src_dir)\n    count = 0\n    for filename in image_filenames:\n        dst_filepath = os.path.join(dst_dir, filename)\n        src_filepath = os.path.join(src_dir, filename)\n        new_img = read_and_resize_image(src_filepath, size)\n        if new_img is not None:\n            new_img = new_img.convert(\"RGB\")\n            new_img.save(dst_filepath)\n            count += 1\n    logger.debug(f'{src_dir} files resized: {count}')\n    \n    \ndef read_and_resize_image(filepath, size):\n    img = read_image(filepath)\n    if img:\n        img = resize_image(img, size)\n    return img\n\n\ndef resize_image(img, size):\n    if type(size) == int:\n        size = (size, size)\n    if len(size) > 2:\n        raise ValueError(\"Size needs to be specified as Width, Height\")\n    return resize_contain(img, size)\n\n\ndef read_image(filepath):\n    try:\n        img = Image.open(filepath)\n        return img\n    except (OSError, Exception) as e:\n        logger.debug(\"Can't read file {}\".format(filepath))\n        return None\n\n\ndef resize_contain(image, size, resample=Image.LANCZOS, bg_color=(255, 255, 255, 0)):\n    img_format = image.format\n    img = image.copy()\n    img.thumbnail((size[0], size[1]), resample)\n    background = Image.new('RGBA', (size[0], size[1]), bg_color)\n    img_position = (\n        int(math.ceil((size[0] - img.size[0]) \/ 2)),\n        int(math.ceil((size[1] - img.size[1]) \/ 2))\n    )\n    background.paste(img, img_position)\n    background.format = img_format\n    return background.convert('RGB')\n    \n    \ndef download_resize_clean(index):\n    try:\n        if not os.path.exists('train'):\n            os.system('mkdir train')\n\n        file_index = '{0:0>3}'.format(index)\n        images_file_name = f'images_{file_index}.tar'\n        images_folder = images_file_name.split('.')[0]\n        images_md5_file_name = f'md5.images_{file_index}.txt'\n        images_tar_url = f'https:\/\/s3.amazonaws.com\/google-landmark\/train\/{images_file_name}'\n        images_md5_url = f'https:\/\/s3.amazonaws.com\/google-landmark\/md5sum\/train\/{images_md5_file_name}'\n\n        logger.info(f'Downloading: {images_file_name} and {images_md5_file_name}')\n        os.system(f'wget {images_tar_url}')\n        os.system(f'wget {images_md5_url}')\n\n        logger.debug(f'Checking file md5 and control md5')\n        p = subprocess.Popen(\n            [\"md5sum\", images_file_name], \n            stdout=subprocess.PIPE, \n            stderr=subprocess.STDOUT\n        )\n        stdout, stderr = p.communicate()\n        md5_images = stdout.decode(\"utf-8\").split(' ')[0]\n        md5_control = open(images_md5_file_name).read().split(' ')[0]\n\n        if md5_images == md5_control:\n            logger.debug(f'MD5 are the same: {md5_images}, {md5_control}')\n            logger.debug(f'Unarchiving images into: {images_folder}')\n            os.system(f'mkdir {images_folder}')\n            os.system(f'tar -xf {images_file_name} -C .\/{images_folder}\/')\n\n            logger.debug(f'Moving images into root folder')\n            move_images_from_sub_to_root_folder(images_folder, images_folder)\n            remove_all_subfolders_inside_folder(images_folder)\n\n            logger.debug(f'Resizing images')\n            resize_folder_images(\n                src_dir=images_folder, \n                dst_dir='train',\n                size=224\n            )\n            os.system(f'rm -r {images_folder}')\n            os.system(f'rm {images_file_name}')\n            os.system(f'rm {images_md5_file_name}')\n        else:\n            logger.error(f'{images_file_name} was not processed due to md5 missmatch')\n    except:\n        logger.error(f'FAILED TO PROCESS {images_file_name}')","d1c8d7f2":"# logger = create_logger('download.log')\n\n# p = Pool(processes=6)\n# p.map(download_resize_clean, range(500))\n# p.close()","d5a845b8":"#### The notebook executes:\n- download tar and text md5 files\n- check md5 match\n- unarchive into folder\n- move all images to root folder\n- resize images into train folder\n- remove archive, folder with unarchived images, text md5 file\n- resulting size on disk ~44GB"}}