{"cell_type":{"b128fea6":"code","5fd3b531":"code","6426b495":"code","1c3acd52":"code","7553c5c3":"code","ade0ce3d":"code","32a6cec8":"code","ff8d69ff":"code","e2a50219":"code","5266ca4f":"code","a6f6e957":"code","1ae9010f":"code","82d98302":"code","83277229":"markdown","63beedc1":"markdown","faddd68d":"markdown","53ccd2c3":"markdown","15368d5a":"markdown","782b2a78":"markdown","88d872c5":"markdown","e7590afc":"markdown","645efcdc":"markdown","3133dd82":"markdown","682ae40e":"markdown","0a69d79c":"markdown"},"source":{"b128fea6":"# Data\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom nltk.stem import SnowballStemmer # Stemmer\nfrom nltk.corpus import stopwords # Removes Stopwords\nfrom sklearn.model_selection import train_test_split\n\n# Visualization\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# Learning\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Other Imports\nimport string\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5fd3b531":"data = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\",encoding='latin-1')\ndata.head()","6426b495":"# 1\ndata = data.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis=1)\n\n# 2\ndata = data.rename(columns = {\"v1\":\"type\", \"v2\":\"text\"})\ndata.head()","1c3acd52":"# Add column \"length\"\ndata['length'] = data['text'].apply(len)\n\n# Configure graph\nmpl.rcParams[\"patch.force_edgecolor\"] = True\nplt.style.use(\"seaborn-bright\")\n\n# Show Graph\ndata.hist(column='length', by='type', bins=50,figsize=(11,5))","7553c5c3":"def preprocess(text):\n    # 1\n    text = text.translate(str.maketrans(\"\", \"\", string.punctuation))\n    # 2 & 3\n    text = [word for word in text.split() if word.lower() not in stopwords.words('english')]\n    \n    words = \"\"\n    for c in text:\n        # 4\n        stemmer = SnowballStemmer(\"english\")\n        words += (stemmer.stem(c)) + \" \"\n    \n    return words","ade0ce3d":"# 1\npreprocessed_text = data[\"text\"].copy()\npreprocessed_text = preprocessed_text.apply(preprocess)\n\n# 2\nfeatures_train, features_test, labels_train, labels_test = train_test_split(preprocessed_text, data[\"type\"], test_size=0.3, random_state=111)\n\n# 3\nvectorizer = TfidfVectorizer(\"english\")\nvectorizer.fit(features_train)\n\n# 4\nfeatures_train = vectorizer.transform(features_train)\nfeatures_test = vectorizer.transform(features_test)","32a6cec8":"from sklearn.metrics import accuracy_score\nfrom sklearn.svm import SVC\n\n# 1\nsvc = SVC(kernel=\"sigmoid\", gamma = 1.0)\n# 2\nsvc.fit(features_train, labels_train)\n# 3\nprediction = svc.predict(features_test)\naccuracy_score(labels_test, prediction)","ff8d69ff":"from sklearn.naive_bayes import MultinomialNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.metrics import accuracy_score","e2a50219":"knc = KNeighborsClassifier(n_neighbors=49)\nmnb = MultinomialNB(alpha=0.2)\ndtc = DecisionTreeClassifier(min_samples_split=7, random_state=111)\nlrc = LogisticRegression(solver='liblinear', penalty='l1')\nrfc = RandomForestClassifier(n_estimators=31, random_state=111)\nabc = AdaBoostClassifier(n_estimators=62, random_state=111)\nbc = BaggingClassifier(n_estimators=9, random_state=111)\netc = ExtraTreesClassifier(n_estimators=9, random_state=111)","5266ca4f":"classifiers = {'SVC' : svc,'KN' : knc, 'NB': mnb, 'DT': dtc, 'LR': lrc, 'RF': rfc, 'AdaBoost': abc, 'BgC': bc, 'ETC': etc}","a6f6e957":"predictions = []\nfor name, classifier in classifiers.items():\n    classifier.fit(features_train, labels_train)\n    prediction = classifier.predict(features_test)\n    predictions.append((name, accuracy_score(labels_test, prediction)))","1ae9010f":"dataframe = pd.DataFrame.from_records(predictions, index=\"Classifier\", columns=[\"Classifier\", \"Score\"])\ndataframe","82d98302":"dataframe.plot(kind=\"bar\", ylim=(0.9,1.0), figsize=(11,6), align=\"center\", colormap=\"Accent\")\nplt.xticks(np.arange(9), dataframe.index)\nplt.ylabel(\"Accuracy Score\")\nplt.title(\"Classifiers\")\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","83277229":"### Train Model\n1. Initialize Kernel\n2. Fit training features and labels\n3. Check model accuracy","63beedc1":"Create list of classifiers and iterate through them","faddd68d":"Visualize Data","53ccd2c3":"### Visualize Data","15368d5a":"## Preprocessing\n### Read Data","782b2a78":"### Train more models\n(Based on [this notebook](https:\/\/www.kaggle.com\/muzzzdy\/sms-spam-detection-with-various-classifiers))","88d872c5":"Output scores as table","e7590afc":"# Spam Classification Test","645efcdc":"### Edit Csv\n1. Remove unneccessary columns\n2. Rename columns","3133dd82":"1. Apply preprocessing \n2. Split data into \"test\" and \"train\" subsets\n3. Fit Training-Data (avoid Data-Leak!)\n4. Transform all Data","682ae40e":"## Setup","0a69d79c":"### Preprocess Text & Vectorize\n1. Remove punctuation\n2. Remove stopwords\n3. Convert to lowercase\n4. Stomp words"}}