{"cell_type":{"0f2f2f7c":"code","0da34a15":"code","d7415ddd":"code","19faa2fb":"code","9682bec5":"code","09eed423":"code","8892cd93":"code","f4eb1e69":"code","ae47e223":"code","81dc1396":"code","f524d19d":"code","5a800906":"code","161e3124":"code","a6f412ea":"code","4a505921":"code","ec39f88c":"code","0ca607a9":"code","f5da44b5":"code","c3d44c77":"code","17d6bc23":"code","7195946f":"code","1d5b6568":"code","0f493726":"code","2e83d708":"code","4a80ede0":"code","0f390d91":"code","7de6cc22":"code","d586e5d0":"code","88e76eb1":"markdown","bc508816":"markdown","7858daf0":"markdown","1ac7eb4c":"markdown"},"source":{"0f2f2f7c":"import matplotlib\nfrom matplotlib import pyplot as plt\n%matplotlib inline","0da34a15":"from sklearn.datasets import load_digits","d7415ddd":"digits = load_digits()","19faa2fb":"dir(digits)","9682bec5":"plt.gray()\nplt.matshow(digits.images[0])","09eed423":"X = digits['data']\ny = digits.target\nlen(X)","8892cd93":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2)\nlen(y_train)","f4eb1e69":"from sklearn.linear_model import LogisticRegression","ae47e223":"model = LogisticRegression(solver='liblinear')\nmodel.fit(X_train,y_train)","81dc1396":"model.score(X_test,y_test)","f524d19d":"plt.matshow(digits.images[67])\n# digits.images[67]","5a800906":"model.predict([digits['data'][67]])","161e3124":"y_predicted  = model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix","a6f412ea":"cm = confusion_matrix(y_test,y_predicted)\ncm","4a505921":"import seaborn as sns","ec39f88c":"plt.figure(figsize = (15,8))\nsns.heatmap(cm, annot=True)\nplt.xlabel('predicted')\nplt.ylabel('truth')","0ca607a9":"from sklearn.datasets import load_iris","f5da44b5":"flower = load_iris()","c3d44c77":"dir(flower)","17d6bc23":"flower.data.shape","7195946f":"X1 = flower.data\ny1 = flower.target","1d5b6568":"X_train1, X_test1, y_train1, y_test1 = train_test_split(X1,y1,test_size = 0.15)","0f493726":"model1 = LogisticRegression(solver='liblinear')\nmodel1.fit(X_train1,y_train1)","2e83d708":"model1.predict([flower.data[56]])","4a80ede0":"flower.target[56]","0f390d91":"model1.score(X_test1,y_test1)","7de6cc22":"from sklearn.metrics import confusion_matrix\ny_predi = model1.predict(X_test1)\ncm1 = confusion_matrix(y_test1, y_predi)\ncm1","d586e5d0":"plt.figure(figsize = (10,8))\nsns.heatmap(cm1, annot=True)\nplt.xlabel('predicted')\nplt.ylabel('true')","88e76eb1":"# New excercise\n# iris flower dataset from sklearn datasets","bc508816":"# our model is 96% accurate. but we want to see where our model is not predicting things well. So we would make a confusion matrix.","7858daf0":"Here we have data i.e. length and width of flower leaves and we have to predict (target) ","1ac7eb4c":"# to show confusion matrix in the form of heatmap. Here we would use seaborn library."}}