{"cell_type":{"b947606d":"code","3cf07619":"code","57a426cf":"code","f8dc911a":"code","6c3d90b6":"code","a8d1d0d5":"code","326aae39":"code","d13d3175":"code","2be1f012":"code","333f5e38":"code","a0ddb514":"code","34f28c0a":"code","7ea14046":"code","79da2f00":"code","2eea4acc":"code","33dc8d02":"code","a789e145":"code","b2410c53":"code","5635914c":"code","0588292f":"code","1ec40c34":"code","0639f8ce":"code","dcbf9e78":"code","4ad0201a":"code","75db3b27":"code","14df7cd7":"markdown","0390f67e":"markdown","1c925511":"markdown","aa82c05f":"markdown","f58c4b03":"markdown","e5fe425a":"markdown","620210e9":"markdown","c87cd98b":"markdown","0c17d82b":"markdown"},"source":{"b947606d":"%lsmagic\n# You can add more on your local machine ","3cf07619":"%lsmagic?\n# Use a questionmark to get a short description ","57a426cf":"# Get random numbers to measure sorting time \nimport numpy as np\nn = 100000\nrandom_numbers = np.random.random(size=n)\n\n%time random_numbers_sorted = np.sort(random_numbers)\n# Get execution time of a single line ","f8dc911a":"%%time\n# Get execution time of a whole cell (Has to be the first command in the cell) \n\nrandom_numbers = np.random.random(size=n)\nrandom_numbers_sorted = np.sort(random_numbers)","6c3d90b6":"%timeit -n 100 -r 5 random_numbers_sorted = np.sort(random_numbers)\n# n - execute the statement n times \n# r - repeat each loop r times and return the best ","a8d1d0d5":"%%timeit -n 100 -r 5\n# n - execute the statement n times \n# r - repeat each loop r times and return the best \n\nrandom_numbers = np.random.random(size=n)\nrandom_numbers_sorted = np.sort(random_numbers)","326aae39":"%%prun\n# Returns a duration ranking of all called functions in the cell as well as a count for all funcition calls (Can only be seen by running it on your own) \n\nfor _ in range(5):\n    random_numbers = np.random.random(size=n)\n    random_numbers_sorted = np.sort(random_numbers)","d13d3175":"# Return working directory \n%pwd","2be1f012":"# Create a new folder \n%mkdir 'test_folder'","333f5e38":"# Save to new .py file \ntext = 'I am going into a new file'\n%save 'new_file' text","a0ddb514":"# Copy files to a new location \n%cp new_file.py new_file_2.py","34f28c0a":"# List of elements in current directory \n%ls","7ea14046":"# Read7show files \n%cat new_file.py","79da2f00":"# Remove folder \n%rmdir test_folder\/\n\n# Remove files \n%rm new_file.py","2eea4acc":"# Rename files \n%mv new_file_2.py renamed_file.py","33dc8d02":"%ls","a789e145":"# Using a '!' neables arbitrary single-line bash-commands \n!ls | grep .py","b2410c53":"%%!\n# This executes the whole cell in a bash and returns a list \npwd\nls","5635914c":"%%bash\n# This executes the whole cell in a bash and returns single elements \npwd\nls","0588292f":"# The returned values can be stored in variables \nworking_directory = !pwd\nworking_directory","1ec40c34":"# Compile latex in cells ","0639f8ce":"%%latex\n$\\frac{awe}{some}$","dcbf9e78":"# Html in cells ","4ad0201a":"%%HTML\n\n<h1>Awesome<\/h1>","75db3b27":"%%javascript\n\nwindow.alert('Here you can learn how to use magic functions inside notebooks.\\nHave a good day!')","14df7cd7":"## How To Get The Function Description? ","0390f67e":"# IPython Magic Functions \n\n**Built-in magic functions** can support your programming **in Kaggle-Kernels and IPython Notebooks.**    \nYou can use those functions to **optimize your run-time, to combine different programming languages** in a single notebook or to **execute bash-scripts.**\n\n - Lines starting with an **'%'** will be interpreted as magic function.    \n - A single **'%'** will only evaluate the attached **line of code.**    \n - A double **'%%'** will operate on the **whole notebook-cell.**    \n\n**P.S:**   \nSince **some outputs cannot be saved in a kernel**, fork this notebook and run the cells on your own to see all outputs.\n\n## Which Functions Are Available? ","1c925511":"## More Tutorials \nA few more tipps can be found here:    \n[Timing and Profiling in IPython](http:\/\/pynash.org\/2013\/03\/06\/timing-and-profiling\/)    \n[Advanced Jupyter Notebook](https:\/\/blog.dominodatalab.com\/lesser-known-ways-of-using-notebooks\/)    \n[Make Jupyter\/IPython Notebook even more magical with cell magic extensions!](https:\/\/www.youtube.com\/watch?v=zxkdO07L29Q)\n\n**Have a good day!**","aa82c05f":"## How To Quantify Execution Time? ","f58c4b03":"## How To Measure The Time Of Each Function In A Cell? ","e5fe425a":"## How To Use Different Programming Languages? ","620210e9":"## How To Style Your Notebooks? ","c87cd98b":"The output can be a little bit cryptic. Therefore using the **%lprun** ([Install separatly](http:\/\/pynash.org\/2013\/03\/06\/timing-and-profiling\/)) can be more helpful since it measures the execution-time for each line in the cell. \n\n## How To Measure Memory Usage In A Cell? \n\nUse **%mprun** (Memory line-by-line in a function)  and **%memit** (Memory iteratively several times) just as the previous example.  ([Install separatly](http:\/\/pynash.org\/2013\/03\/06\/timing-and-profiling\/))\n\n## How To Execute Bash Commands? \n\nHere are a few standard bash commands to use them right in the cells.","0c17d82b":"Measuring a short statement onetime can be inaccurate.<br>\nThat is why the **'%timeit'** function executes the statement several times and returns a summary of all durations."}}