{"cell_type":{"6e6dfb4e":"code","a7a1579c":"code","e0a76301":"code","1ffe3da4":"code","924e4356":"code","25d263fc":"code","a8f751d9":"code","380eb77c":"code","d818f48d":"code","623cc438":"code","9779ed5d":"code","f6af39c9":"code","68f3ec39":"code","a5f7d9f3":"code","0b8039c0":"code","8a4bdf68":"code","e2cb7ee6":"code","465fd0e5":"code","3dbfbd2a":"code","96b8576e":"code","de05795e":"code","e98eefe8":"code","0e9c64da":"code","f2c133f6":"code","fd8ea1b0":"code","07cf487c":"code","ce4d03b8":"code","f284166e":"code","11b50ba5":"code","bc263268":"code","4903dd90":"code","a88e8758":"code","03a132ca":"code","42a7e170":"code","21eaa8de":"code","147bda19":"code","cc57be72":"code","24e524b6":"code","ceb40fca":"code","6876105b":"code","084b3a52":"code","0e9d0188":"code","d20ff209":"code","3e829823":"code","d1c4852f":"code","63d14dbd":"code","91ca5091":"code","f3592fa6":"code","78906599":"code","c9834d91":"code","28666ebc":"code","53d11de1":"code","3029c54d":"code","aab6e3d0":"code","c23cade9":"code","90a4a382":"code","a5cfac67":"code","08ce0a8d":"code","a74365fa":"code","d9dfaa68":"code","1613e34a":"code","0d6b4502":"code","78b2846e":"code","7a43a605":"code","b5b47a38":"code","caa6082b":"code","d762ae91":"code","bb39bff4":"code","652b83ed":"code","cb91e402":"code","a307f6a8":"code","9cf0354a":"code","4fb6a049":"code","a92ce6fd":"code","0d90114a":"code","68831cc9":"code","22fb4cb8":"code","02a467b3":"code","f3a4ad42":"code","e65b47cc":"code","03717cfb":"code","9ab3efbe":"markdown","bcccff45":"markdown","8a80af97":"markdown","738c4fd6":"markdown","c26fd6c6":"markdown","63fbd34f":"markdown","2320ab5a":"markdown","97e23f01":"markdown","a4e462ae":"markdown","a90e02da":"markdown","b41f6c15":"markdown","6b964a25":"markdown","ab7819d4":"markdown","4d1332d8":"markdown","3c859bd5":"markdown","09dd94a8":"markdown","137503d5":"markdown","989e87fd":"markdown","abf940c4":"markdown","6d3075ba":"markdown","8a619514":"markdown","460a9515":"markdown","8aa2c063":"markdown","cbfcbc12":"markdown","a43cb7c1":"markdown","b7442cd4":"markdown","8c8ab473":"markdown","21efe742":"markdown","18c2720f":"markdown","d95f474b":"markdown","7101f2af":"markdown","3fe70033":"markdown","e04752a8":"markdown","d6f33c9d":"markdown","a2d6b005":"markdown"},"source":{"6e6dfb4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split,KFold,cross_val_score,KFold\nfrom collections import Counter\nimport os\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score \nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\n\n\n\n","a7a1579c":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path_file_name = os.path.join(dirname, filename)\n        print(path_file_name)\n\ndata = pd.read_csv(path_file_name)","e0a76301":"data.head()","1ffe3da4":"data['target'].value_counts()","924e4356":"sns.countplot(x='target',data=data)","25d263fc":"data.info()","a8f751d9":"data.describe()","380eb77c":"data.isnull().sum()","d818f48d":"fig,ax = plt.subplots(figsize=(10,14))\nax = sns.heatmap(data.corr(),cmap='coolwarm',linecolor='white',linewidths=1,annot=True)\nplt.yticks(rotation=0) ","623cc438":"data.groupby('slope')['target'].sum()","9779ed5d":"sns.barplot(x='slope',y='target',data=data)","f6af39c9":"sns.distplot(data['thalach'],color='red')","68f3ec39":"data.groupby('cp')['target'].sum()","a5f7d9f3":"sns.barplot(x='cp',y='target',data=data)","0b8039c0":"sns.distplot(data['age'])","8a4bdf68":"def get_outliers(df,n,features):\n    outlier_indices = []\n    \n    # iterate over features(columns)\n    for col in features:\n        # 1st quartile (25%)\n        Q1 = np.percentile(df[col], 25)\n        # 3rd quartile (75%)\n        Q3 = np.percentile(df[col],75)\n        # Interquartile range (IQR)\n        IQR = Q3 - Q1\n\n        # outlier step\n        outlier_step = 1.5 * IQR\n\n        # Determine a list of indices of outliers for feature col\n        outlier_list_col = df[(df[col] < Q1 - outlier_step) | (df[col] > Q3 + outlier_step )].index\n\n        # append the found outlier indices for col to the list of outlier indices \n        outlier_indices.extend(outlier_list_col)\n\n    # select observations containing more than 2 outliers\n    outlier_indices = Counter(outlier_indices)        \n    multiple_outliers = list( k for k, v in outlier_indices.items() if v > n )\n\n    return multiple_outliers   \n# detect outliers from Age, SibSp , Parch and Fare\nOutliers_to_drop = get_outliers(data,2,[\"age\",\"chol\",\"restecg\",\"trestbps\",\"oldpeak\"])","e2cb7ee6":"data.loc[Outliers_to_drop]","465fd0e5":"data.columns","3dbfbd2a":"#age\ng= sns.FacetGrid(data,col='target')\ng.map(plt.hist,'age',bins=20)","96b8576e":"grid = sns.FacetGrid(data, row='target', col='sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'age',  bins=20)\ngrid.add_legend()","de05795e":"data['AgeBand'] = pd.cut(data['age'], 5)\ndata[['AgeBand', 'target']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)","e98eefe8":"    \ndata.loc[ data['age'] < 38.6, 'age_group'] = 1\ndata.loc[(data['age'] >= 38.6) & (data['age'] < 48.2), 'age_group'] = 2\ndata.loc[(data['age'] >= 48.2) & (data['age'] < 57.8), 'age_group'] = 3\ndata.loc[(data['age'] >= 57.8) & (data['age'] < 67.4), 'age_group'] = 4\ndata.loc[ data['age'] >= 67.4, 'age_group'] = 5\ndata['age_group'].astype('int')\ndata.head()","0e9c64da":"#drop age and AgeBand\ndata.drop(['age','AgeBand'] , axis= 1,inplace=True)","f2c133f6":"grid = sns.FacetGrid(data, row='target', col='sex', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'age_group',  bins=20)\ngrid.add_legend()","fd8ea1b0":"#change age_group to be dummy column\ndata = pd.get_dummies(data, columns = ['age_group'], prefix=\"AgeGrp\")\ndata.head()","07cf487c":"data.groupby('sex')['target'].count()","ce4d03b8":"#sns.barplot(x='sex',y='target',data=data)\nsns.countplot(data=data,x='sex')\n","f284166e":"data = pd.get_dummies(data,columns = ['sex'], prefix=\"Sex\")","11b50ba5":"data = pd.get_dummies(data,columns = ['cp'], prefix=\"CP\")\ndata.head()","bc263268":"sns.distplot(data['trestbps'])","4903dd90":"sns.distplot(data['chol'])","a88e8758":"data['chol'].skew()","03a132ca":"data['fbs'].value_counts() \/data.shape[0] * 100","42a7e170":"sns.countplot(data['fbs'])","21eaa8de":"data = pd.get_dummies(data,columns=['fbs'],prefix='fbs')\ndata.head()","147bda19":"sns.countplot(data['restecg'])","cc57be72":"data = pd.get_dummies(data,columns=['restecg'],prefix='restecg')\ndata.head()","24e524b6":"g= sns.FacetGrid(data,col='target')\ng.map(sns.distplot,'thalach')","ceb40fca":"data['exang'].value_counts()","6876105b":"sns.countplot(data['exang'])","084b3a52":"data = pd.get_dummies(data,columns=['exang'],prefix='exang')","0e9d0188":"sns.distplot(data['oldpeak'])","d20ff209":"g= sns.FacetGrid(data,col='target')\ng.map(sns.distplot,'oldpeak')","3e829823":"data = pd.get_dummies(data,columns=['slope'],prefix='slope')","d1c4852f":"sns.barplot(x='ca',y='target',data=data)","63d14dbd":"data = pd.get_dummies(data,columns=['ca'],prefix='ca')","91ca5091":"sns.barplot(x='thal',y='target',data=data)","f3592fa6":"data = pd.get_dummies(data,columns=['thal'],prefix='thal')","78906599":"data.info()","c9834d91":"target = data['target']\ndata.drop('target',axis=1,inplace=True)","28666ebc":"numeric_feats = data.dtypes[data.dtypes != \"uint8\" ].index\nnumeric_feats","53d11de1":"ss= StandardScaler()\ndata[numeric_feats] = ss.fit_transform(data[numeric_feats])","3029c54d":"data.head()","aab6e3d0":"#split data to train and test \nx_train,x_test,y_train,y_test = train_test_split(data.values , target.values ,train_size = 0.75)","c23cade9":"print(f'{x_train.shape}  {y_train.shape} {x_test.shape} {y_test.shape}')","90a4a382":"def run_cv_model(classifier,x,y,**params):\n    clf = classifier(**params)\n    \n    scores = cross_val_score(clf,x,y,cv=5)\n\n    return round(scores.mean() * 100,2)","a5cfac67":"gb_score = run_cv_model(GradientBoostingClassifier,x_train,y_train ,learning_rate = 0.1,n_estimators =500)\ngb_score","08ce0a8d":"gb_score_1 =  run_cv_model(GradientBoostingClassifier,x_train,y_train ,learning_rate = 0.5,n_estimators= 500)\ngb_score_1","a74365fa":"gb_score_2 =  run_cv_model(GradientBoostingClassifier,x_train,y_train ,learning_rate  = 0.1,n_estimators = 200)\ngb_score_2","d9dfaa68":"rf_score_1 = run_cv_model(RandomForestClassifier,x_train,y_train , n_estimators = 500 ,criterion ='gini',max_depth =1)\nrf_score_1","1613e34a":"rf_score_2 = run_cv_model(RandomForestClassifier,x_train,y_train , n_estimators =500 ,criterion ='entropy',max_depth =1)\nrf_score_2","0d6b4502":"rf_score_3 = run_cv_model(RandomForestClassifier,x_train,y_train , n_estimators =1000 ,criterion = 'entropy',max_depth =1)\nrf_score_3","78b2846e":"rf_score_4 = run_cv_model(RandomForestClassifier,x_train,y_train , n_estimators = 1000 ,criterion = 'gini',max_depth =1)\nrf_score_4","7a43a605":"ab_score_1 = run_cv_model(AdaBoostClassifier,x_train,y_train , n_estimators = 100,learning_rate=1)\nab_score_1                         ","b5b47a38":"ab_score_2 = run_cv_model(AdaBoostClassifier,x_train,y_train , n_estimators =1000,learning_rate=1)\nab_score_2     ","caa6082b":"ab_score_3 = run_cv_model(AdaBoostClassifier,x_train,y_train , n_estimators =100,learning_rate =0.1)\nab_score_3   ","d762ae91":"ab_score_4 = run_cv_model(AdaBoostClassifier,x_train,y_train , n_estimators = 1000,learning_rate= 0.1)\nab_score_4   ","bb39bff4":"svm_score_1 = run_cv_model(SVC,x_train,y_train , C =1,kernel ='rbf')\nsvm_score_1   ","652b83ed":"svm_score_2 = run_cv_model(SVC,x_train,y_train , C =0.1,kernel ='rbf')\nsvm_score_2 ","cb91e402":"svm_score_3 = run_cv_model(SVC,x_train,y_train , C = 1,kernel = 'linear')\nsvm_score_3","a307f6a8":"svm_score_4 = run_cv_model(SVC,x_train,y_train , C= 0.1,kernel='linear')\nsvm_score_4","9cf0354a":"svm_score_5 = run_cv_model(SVC,x_train,y_train , C =1,kernel ='poly')\nsvm_score_5","4fb6a049":"svm_score_6 = run_cv_model(SVC,x_train,y_train , C = 0.1,kernel='poly')\nsvm_score_6","a92ce6fd":"models_names = ['Gradient boosting','Gradient boosting','Gradient boosting','Random forest','Random forest',\n                'Random forest','Random forest','Adaboost','Adaboost','Adaboost','Adaboost',\n               'SVM','SVM','SVM','SVM','SVM','SVM']\nmodels_scores =[gb_score , gb_score_1,gb_score_2,rf_score_1,rf_score_2,rf_score_3,rf_score_4,\n               ab_score_1,ab_score_2,ab_score_3,ab_score_4,svm_score_1,svm_score_2,svm_score_3,svm_score_4,svm_score_5,svm_score_6]\ncross_validation_df = pd.DataFrame({'Model' :models_names,'Score' :models_scores})\ncross_validation_df","0d90114a":"cross_validation_df.groupby('Model').max()","68831cc9":"def get_oof(classifier, x_train, y_train, x_test,n_folds,**params):\n    oof_train = np.zeros(x_train.shape[0])\n    oof_test = np.zeros(x_test.shape[0])\n    oof_test_skf = np.empty((n_folds, len(y_test)))\n   \n    clf = classifier(**params) \n    kf = KFold(n_splits=n_folds) \n    for i, (train_index, valid_index) in enumerate(kf.split(x_train,y_train)):\n        x_tr = x_train[train_index]\n        y_tr = y_train[train_index]\n        x_valid = x_train[valid_index]\n\n        clf.fit(x_tr, y_tr)\n\n        oof_train[valid_index] = clf.predict(x_valid)\n        oof_test_skf[i, :] = clf.predict(x_test)\n\n    \n    oof_test[:] = oof_test_skf.mean(axis=0)\n    return oof_train.reshape(-1, 1), oof_test.reshape(-1, 1)","22fb4cb8":"#start stacking\ngd_oof_train , gd_oof_test =  get_oof(GradientBoostingClassifier,x_train,y_train ,x_test , 5,learning_rate  = 0.1,n_estimators = 200)\nrf_oof_train , rf_oof_test =  get_oof(RandomForestClassifier,x_train,y_train ,x_test,5, n_estimators =500 ,criterion ='entropy',max_depth =1)\nad_oof_train , ad_oof_test =  get_oof(AdaBoostClassifier,x_train,y_train ,x_test,5, n_estimators = 1000,learning_rate= 0.1)\nsvm_oof_train,svm_oof_test =  get_oof(SVC,x_train,y_train ,x_test,5, C= 0.1,kernel='linear')","02a467b3":"#construct new training set from stacking\nx_stacking_train = pd.DataFrame({'Gradient boosting':gd_oof_train.flatten() , 'Random forest': rf_oof_train.flatten(),\n                                'Adaboost' : ad_oof_train.flatten() , 'SVM':svm_oof_train.flatten()})\n\nx_stacking_train.head()","f3a4ad42":"x_stacking_test =np.c_[gd_oof_test,rf_oof_test]\nx_stacking_test = np.c_[x_stacking_test,ad_oof_test]\nx_stacking_test = np.c_[x_stacking_test,svm_oof_test]\n","e65b47cc":"x_stacking_test.shape","03717cfb":"xgClf = xgb.XGBClassifier(n_estimators= 2000,\n max_depth= 4,\n gamma=0.9,\n nthread= -1,\n scale_pos_weight=1)\n\nxgClf.fit(x_stacking_train.values,y_train)\n\ny_pred = xgClf.predict(x_stacking_test)\n\nscore = round(accuracy_score(y_pred,y_test) * 100,2)\n\nprint(f'Final score for predicting death by heart disease is {score}')","9ab3efbe":"# Data columns desc\n* age = age in years\n* sex = (1 = male; 0 = female)\n* cp= chest pain type\n* trestbps= resting blood pressure (in mm Hg on admission to the hospital)\n* chol = serum cholestoral in mg\/dl\n* fbs = ( fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* restecg = resting electrocardiographic results\n* thalach = maximum heart rate achieved\n* exang = exercise induced angina (1 = yes; 0 = no)\n* oldpeak = ST depression induced by exercise relative to rest\n* slope = the slope of the peak exercise ST segment\n* ca = number of major vessels (0-3) colored by flourosopy\n* thal3 = normal; 6 = fixed defect; 7 = reversable defect\n* target = 1 or 0","bcccff45":"# Normalize nomeric data","8a80af97":"* **trestbps**","738c4fd6":"\nIn a cardiac stress test, an ST depression of at least 1 mm after adenosine administration indicates a reversible ischaemia, while an exercise stress test requires an ST depression of at least 2 mm to significantly indicate reversible ischaemia.\n\nhttps:\/\/en.wikipedia.org\/wiki\/ST_depression","c26fd6c6":"* **cp**","63fbd34f":"* **oldpeak**","2320ab5a":"The electrocardiogram (ECG or EKG) is a noninvasive test that is used to reflect underlying heart conditions by measuring the electrical activity of the heart. By positioning leads (electrical sensing devices) on the body in standardized locations, health care professionals can learn information about many heart conditions by looking for characteristic patterns on the EKG.\n\nfrom https:\/\/www.medicinenet.com\/electrocardiogram_ecg_or_ekg\/article.htm","97e23f01":"* **fbs**","a4e462ae":"# OutLiers","a90e02da":"* **AdaBoost**","b41f6c15":"There are twice as much men than weman in the data","6b964a25":"# Stacking best cross validation from 4 models","ab7819d4":"The target is balanced","4d1332d8":"**No Outliers found**","3c859bd5":"Angina is a type of chest pain caused by reduced blood flow to the heart. Angina (an-JIE-nuh or AN-juh-nuh) is a symptom of coronary artery disease.\n\nAngina, also called angina pectoris, is often described as squeezing, pressure, heaviness, tightness or pain in your chest. Some people with angina symptoms say angina feels like a vise squeezing their chest or a heavy weight lying on their chest. Angina may be a new pain that needs to be checked by a doctor, or recurring pain that goes away with treatment.\n\nAlthough angina is relatively common, it can still be hard to distinguish from other types of chest pain, such as the discomfort of indigestion. If you have unexplained chest pain, seek medical attention right away.\n\nhttps:\/\/www.mayoclinic.org\/diseases-conditions\/angina\/symptoms-causes\/syc-20369373","09dd94a8":"* **restecg**","137503d5":"# Modeling\n\n* Gradient boosting\n* Random forest\n* Adaboost\n* SVM","989e87fd":"> * **Gradient boosting**","abf940c4":"* **ca**","6d3075ba":"*Explore data*","8a619514":"Weman are checked for disease when they are older than the men","460a9515":"* **Sex**","8aa2c063":"# Preproccessing data","cbfcbc12":"Not many people died from complications of high suger level ","a43cb7c1":"* **SVM**","b7442cd4":"* **exang**","8c8ab473":"* **thalach**","21efe742":"* **Random Forest**","18c2720f":"Stage 2 in stacking run the stacking train data through another boosting meta model","d95f474b":"* **Age**","7101f2af":"* **chol**","3fe70033":"* **thal**","e04752a8":"Check for null values","d6f33c9d":"* **slope**","a2d6b005":"*Cross validation*"}}