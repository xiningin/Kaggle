{"cell_type":{"3c96c63a":"code","a41a4605":"code","e56d7429":"code","6edbc150":"code","5557b1e6":"code","5316d494":"code","57678c31":"code","0d4e5b6f":"code","e9f6716b":"code","d6133d76":"code","64b2ea85":"code","14394afe":"code","a764c36f":"code","4b1c74ed":"code","4d068c5e":"code","3c3d42c3":"code","067aab99":"code","41e3fd45":"code","2f3908b1":"code","b186f88e":"code","f8a525d3":"code","170b1d1e":"code","8d08ca75":"code","a5ba7b2b":"code","99f16770":"code","37a71aa9":"code","8bb80f40":"code","377a8e8f":"code","a921055f":"code","0f1903d8":"code","56af45ca":"code","79ebe057":"code","068604c3":"code","949b1b6f":"code","24ea376b":"code","1daf66f7":"code","475d8d0f":"code","3873f607":"code","10c3963d":"code","eb8e74f5":"code","fce92e95":"code","7cb992bc":"code","2ca80d0a":"markdown","fa4cd895":"markdown","254087e7":"markdown","cacaafd9":"markdown","1c8e84c7":"markdown","ab76d8e8":"markdown","d9d1f628":"markdown","d1e91bd8":"markdown","8c8981f7":"markdown","254d99d0":"markdown","57130f5b":"markdown","b1330f5d":"markdown","11bcc4f4":"markdown","ffdf9cbd":"markdown","0e488295":"markdown","f1b3b2a8":"markdown","5a6be0d7":"markdown","a477fdb5":"markdown","3eb720f3":"markdown","5201916f":"markdown"},"source":{"3c96c63a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","a41a4605":"dataset = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')","e56d7429":"dataset.head()","6edbc150":"dataset.shape","5557b1e6":"dataset.info()","5316d494":"dataset.describe(include = 'all')","57678c31":"dataset.isnull().sum()","0d4e5b6f":"plt.figure(figsize = (30, 10))\nplt.subplot(231)\nsns.distplot(dataset['danceability'])\nplt.subplot(232)\nsns.distplot(dataset['duration_ms'])\nplt.subplot(233)\nsns.distplot(dataset['energy'])\nplt.subplot(234)\nsns.distplot(dataset['instrumentalness'])\nplt.subplot(235)\nsns.distplot(dataset['liveness'])\nplt.subplot(236)\nsns.distplot(dataset['loudness'])\nplt.show()","e9f6716b":"plt.figure(figsize = (40, 20))\nplt.subplot(331)\nsns.boxplot(dataset['danceability'])\nplt.subplot(332)\nsns.boxplot(dataset['duration_ms'])\nplt.subplot(333)\nsns.boxplot(dataset['energy'])\nplt.subplot(334)\nsns.boxplot(dataset['liveness'])\nplt.subplot(335)\nsns.boxplot(dataset['loudness'])\nplt.subplot(336)\nsns.boxplot(dataset['instrumentalness'])\nplt.show()","d6133d76":"plt.figure(figsize = (10, 7))\nsns.distplot(dataset.popularity)\nplt.title(\"Dist plot of Popularity\", fontdict = {'fontsize' : 15})\nplt.xlabel('Popularity')\nplt.show()\nplt.show()","64b2ea85":"l = []\nfor i in dataset.artists:\n    a=i[2:-2]\n    l.append(a)\nl = list(set(l))\nlst = []\nfor i in l:\n    res = i.strip('][').split(', ')\n    lst.append(res)\nd=[]\nfor i in lst:\n    for j in i:\n        d.append(j)\ndff=pd.DataFrame(d)\ndff = dff[0].value_counts()\n\ndff = dff[:20, ]\nplt.figure(figsize = (12, 8))\nsns.barplot(dff.values, dff.index, alpha = 0.8)\nplt.title(\"Top 20 Artists\", fontdict = {'fontsize' : 15})\nplt.ylabel(\"Artists\")\nplt.xlabel(\"Count\")\nplt.show()","14394afe":"def year(df):\n    if df>1920 and df<=1945:\n        return \"Post-Great War\"\n    if df>1945 and df<=1970:\n        return \"Retro\"\n    if df>1970 and df<=1995:\n        return \"Modern\"\n    else:\n        return \"Post-Modern\"\ndataset['era'] = dataset['year'].apply(year)\npx.pie(data_frame = dataset, names = 'era', hole = 0.2, title = 'Eras of Music')","a764c36f":"def func(df):\n    if df == 1:\n        return 'Yes'\n    else:\n        return 'No'\ndataset['isExplicit'] = dataset['explicit'].apply(func)\npx.pie(data_frame = dataset, names = 'isExplicit', hole = 0.2, title = 'Explicit')","4b1c74ed":"def loud(row):\n    m=dataset['loudness'].median()\n    sd=dataset['loudness'].std()\n    if row['loudness']>=m+(1.5*sd):\n        return \"Extreme\"\n    elif row['loudness']>=m+(sd):\n        return \"Very Loud\"\n    elif row['loudness']>=m+(0.5*sd):\n        return \"Loud\"\n    elif row['loudness']>=m-(0.5*sd):\n        return \"Soft\"\n    elif row['loudness']>=m-(sd):\n        return \"Very Soft\"\n    else:\n        return \"Mellow\"\ndataset['is_loud']=dataset.apply(lambda row: loud(row), axis=1)\npx.pie(data_frame = dataset, names = 'is_loud', hole = 0.2, title = 'IS LOUD')","4d068c5e":"def energy(row):\n    if row['energy']>=dataset['energy'].mean():\n        return \"High\"\n    else:\n        return \"Low\"\ndataset['en_type']=dataset.apply(lambda row: energy(row),axis=1)\npx.pie(names=dataset['en_type'],hole=0.2)","3c3d42c3":"def func(df):\n    if df > 75:\n        return 'Very Popular'\n    elif df > 50 and df < 76:\n        return 'Popular'\n    elif df > 25 and df < 51:\n        return 'Average'\n    else:\n        return 'Not popular'\ndataset['isPopular'] = dataset['popularity'].apply(func)\npx.pie(data_frame = dataset, names = 'isPopular', hole = 0.2, title = 'Popularity')","067aab99":"fig = px.scatter(dataset, x=\"loudness\", y=\"danceability\", size=\"liveness\", \n                 color=\"isExplicit\", log_x=True,size_max=30)\nfig.show()","41e3fd45":"fig = px.scatter(dataset, x=\"loudness\", y=\"danceability\", size=\"popularity\", \n                 color=\"isExplicit\", log_x=True,size_max=30)\nfig.show()","2f3908b1":"art=dataset\nn=[]\ng=[]\nfor name, group in art.groupby(['artists'])['popularity']:\n    n.append(name)\n    g.append(group.mean())\nartist_pop=pd.DataFrame(n,g)","b186f88e":"artist_pop.columns=['Name']","f8a525d3":"artist_pop['popularity']=artist_pop.index","170b1d1e":"artist_pop.sort_values(by='popularity',ascending=False,inplace=True)","8d08ca75":"px.bar(x=artist_pop['Name'].head(10),y=artist_pop['popularity'].head(10)).update_layout(yaxis_title_text='Popularity')","a5ba7b2b":"dataset.sort_values(by='popularity',ascending=False,inplace=True)\ndff=dataset.head(10)\npx.histogram(x=dff.name,y=dff.popularity,color=dff.isExplicit,labels={'x':'Top 10 songs','y':'Popularity'})","99f16770":"dff=dataset.head(20)\npx.scatter_3d(x=dff.name,y=dff.is_loud,z=dff.danceability,color=dff.popularity,labels={'x':'name','y':'type','z':'danceability','color':'popularity'})","37a71aa9":"dff=dataset.head(20)\npx.scatter_3d(x=dff.name,y=dff.en_type,z=dff.danceability,color=dff.popularity,labels={'x':'name','y':'type','z':'danceability','color':'popularity'})","8bb80f40":"fig = px.scatter(dataset, x = \"popularity\", y = \"danceability\", animation_frame = dataset['year'].sort_values(), animation_group = \"isPopular\",\n           size = \"key\", color = \"isExplicit\", hover_name = \"isPopular\",\n           log_x=True, size_max=45, range_x=[1,101], range_y=[0,1])\nfig.show()","377a8e8f":"isPopular= pd.get_dummies(dataset['isPopular'], drop_first=True)\nisExplicit= pd.get_dummies(dataset['isExplicit'], drop_first=True)\nisLoud= pd.get_dummies(dataset['is_loud'], drop_first=True)\ndataset = pd.concat([dataset, isPopular, isExplicit, isLoud], axis = 1)\ndataset.head()","a921055f":"dataset.head()","0f1903d8":"dataset.drop(['isPopular', 'isExplicit', 'is_loud', 'era', 'id', 'name','en_type', 'artists', 'release_date', 'duration_ms'], \n             axis = 1, inplace = True)","56af45ca":"dataset.columns","79ebe057":"plt.figure(figsize=(20,15))\nsns.heatmap(dataset.corr(),linecolor='white',linewidths=1,cmap='coolwarm',annot=True)\nplt.show()","068604c3":"X= dataset.loc[:,dataset.columns!='popularity']\ny= dataset.loc[:,dataset.columns=='popularity']","949b1b6f":"from sklearn.preprocessing import StandardScaler\nsc_X= StandardScaler()\nsc_y= StandardScaler()\nX=sc_X.fit_transform(X)\ny=sc_y.fit_transform(y)","24ea376b":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25, random_state=0)","1daf66f7":"from sklearn.linear_model import LinearRegression\nregressor_lin=LinearRegression()\nregressor_lin.fit(X_train,y_train)","475d8d0f":"y_pred_lin = regressor_lin.predict(X_test)","3873f607":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","10c3963d":"print(\"Training Score of Linear Regression is: {}\\n\".format(regressor_lin.score(X_train, y_train)))\nprint(\"R2 Score of Linear Regression is: {}\\n\".format(r2_score(y_test, y_pred_lin)))\nprint(\"Mean Squared Error of Linear Regression is: {}\\n\".format(mean_squared_error(y_test, y_pred_lin)))\nprint(\"Mean Absolute Error of Linear Regression is: {}\\n\".format(mean_absolute_error(y_test, y_pred_lin)))","eb8e74f5":"from sklearn.tree import DecisionTreeRegressor\nregressor_dt= DecisionTreeRegressor(random_state=0)\nregressor_dt.fit(X_train,y_train)\n\ny_pred_dt= regressor_dt.predict(X_test)\n\nprint(\"Training Score of Decision Tree Regressor is: {}\\n\".format(regressor_dt.score(X_train, y_train)))\nprint(\"R2 Score of Decision Tree Regressor is: {}\\n\".format(r2_score(y_test, y_pred_dt)))\nprint(\"Mean Squared Error of Decision Tree Regressor is: {}\\n\".format(mean_squared_error(y_test, y_pred_dt)))\nprint(\"Mean Absolute Error of Decision Tree Regressor is: {}\\n\".format(mean_absolute_error(y_test, y_pred_dt)))","fce92e95":"from sklearn.ensemble import RandomForestRegressor\nregressor_rf=RandomForestRegressor(n_estimators=300, random_state=0)\nregressor_rf.fit(X_train,y_train)\n\ny_pred_rf=regressor_rf.predict(X_test)\n\nprint(\"Training Score of rfear Regression is: {}\\n\".format(regressor_rf.score(X_train, y_train)))\nprint(\"R2 Score of rfear Regression is: {}\\n\".format(r2_score(y_test, y_pred_rf)))\nprint(\"Mean Squared Error of rfear Regression is: {}\\n\".format(mean_squared_error(y_test, y_pred_rf)))\nprint(\"Mean Absolute Error of rfear Regression is: {}\\n\".format(mean_absolute_error(y_test, y_pred_rf)))","7cb992bc":"fig, ax = plt.subplots()\n#ax.scatter(y_test, y_pred_lin)\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\nax.set_xlabel('Actual')\nax.set_ylabel('Predicted')\n#regression line\ny_test, y_predicted = y_test.reshape(-1,1), y_pred_lin.reshape(-1,1)\nax.plot(y_test, LinearRegression().fit(y_test, y_pred_lin).predict(y_test))\nax.set_title('R2: ' + str(r2_score(y_test, y_predicted)))\nplt.show()","2ca80d0a":"## Binning 'explicit' to classify songs as explicit or not","fa4cd895":"### Decision Tree Regressor","254087e7":"## Exploratory Data Analysis","cacaafd9":"# Top 20 artists by song count","1c8e84c7":"### Applying Regression","ab76d8e8":"# Importing Necessary Libraries","d9d1f628":"### Linear Regression","d1e91bd8":"### Using various metrics to check the results","8c8981f7":"# Plotting various columns of Dataset","254d99d0":"## Encoding categorical variables","57130f5b":"## Binning 'loudness' to classfiy songs by how loud they are","b1330f5d":"### Random Forest","11bcc4f4":"### Train test split","ffdf9cbd":"# Data Wrangling","0e488295":"### Predicting the values","f1b3b2a8":"## Binning 'popularity' to classify songs on the basis of their popularity","5a6be0d7":"## Binning 'energy' to classify songs by high\/low energy","a477fdb5":"### Feature Scaling","3eb720f3":"# Visualizing the basic statistics related to every column","5201916f":"### Linear Regression R2 score plotting"}}