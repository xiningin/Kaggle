{"cell_type":{"94862094":"code","6bc6af58":"code","f9500818":"code","538f166b":"code","a6acd578":"code","7744c1e9":"code","cf15f303":"code","b6bf85e2":"code","25c2df5d":"code","b431feb4":"code","e598f415":"code","799df963":"code","d8ecfe81":"code","9eea045e":"code","285dfde4":"code","fd6cb8d3":"code","a420e78b":"code","d3dbc507":"code","f3991b8c":"code","7f0199a1":"code","708f01cc":"code","892820f4":"code","9e1abbed":"code","0c3d6036":"code","96484f69":"code","c60fd55f":"code","8e6181d2":"code","e82f60b0":"code","2bc166c7":"code","9a851218":"code","347d828c":"code","0baf595d":"code","3d456f8e":"code","47282608":"code","702fad54":"code","a381fa91":"code","3387e30b":"code","8375e65e":"code","52c89f86":"code","675321f5":"code","61f139bf":"code","8335ba98":"code","413ff863":"code","76514bae":"code","7e508852":"code","42162233":"code","258a83c4":"code","b0c30547":"markdown","06519e90":"markdown","3fbe2ca2":"markdown","0f1bac1b":"markdown","e8a5b3d4":"markdown","444d718e":"markdown","c15bd9e7":"markdown","fad664b6":"markdown","8aa7a8f1":"markdown","a8109f6c":"markdown","df7a964d":"markdown","e50d7375":"markdown","f9e3f770":"markdown","66d0d9e3":"markdown","2d2eaa88":"markdown","13711d17":"markdown","45c73032":"markdown","b9178a25":"markdown","8f6b5d13":"markdown","3d01c0a8":"markdown","f60f9e67":"markdown","092665f0":"markdown","a1628598":"markdown","18c58645":"markdown","1f82ace6":"markdown"},"source":{"94862094":"import numpy as np\nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport os\nfrom sklearn import tree, svm\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.model_selection import cross_validate, cross_val_score\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier","6bc6af58":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","f9500818":"train.head(5)","538f166b":"train.info()","a6acd578":"train.Survived.mean()","7744c1e9":"train.describe()","cf15f303":"for column in ['Pclass', 'Sex', 'Embarked']:\n    sns.catplot(data=train, x=column, col='Survived', kind='count')\n    plt.show()","b6bf85e2":"for column in ['Pclass', 'Sex', 'Embarked']:\n    sns.catplot(data=train, x=column, y='Survived', kind='bar')","25c2df5d":"sns.catplot(data=train[train.Fare<200], y='Fare', row='Pclass', col ='Survived', kind='box')\nplt.show()","b431feb4":"sns.displot(data=train, x='Age', hue='Sex', col = 'Survived', row= 'Pclass', alpha=0.5, bins =10)\nplt.show()","e598f415":"sns.displot(data=train, x='SibSp', hue='Sex', col = 'Survived', row= 'Pclass', alpha=0.5, bins =[0,1,2,3,4,5,6,7])\nplt.show()","799df963":"groups = ['child', 'teenager','young_adult', 'adult', 'elder']\nprint(groups)","d8ecfe81":"train['Age_cat']=pd.cut(x=train['Age'], bins=[0,10,20,40,60,75], labels=groups).values.add_categories('missing')\ntrain.Age_cat.fillna('missing', inplace=True)","9eea045e":"sns.catplot(data=train, x='Age_cat', kind='count',col='Survived', row='Sex')","285dfde4":"sns.catplot(data=train, x='Age_cat', kind='bar',y='Survived', row='Sex', col='Pclass')","fd6cb8d3":"train['Age_Sex_cat'] = train['Age_cat'].astype('str') + ' ' + train['Sex']","a420e78b":"train['Age_Sex_cat']= train['Age_Sex_cat'].astype('category')","d3dbc507":"def get_new_Pclass(train):\n    train['Pclass_new'] = train['Pclass']\n    train.loc[((train.Fare>50) & (train.Pclass == 1)), 'Pclass_new'] = 0\n    train['Pclass_new'] = train['Pclass_new'].astype('category')\n    return train","f3991b8c":"train = get_new_Pclass(train)","7f0199a1":"def get_mapping(train):\n    train['Sex1'] = train['Sex'].map({'male':0, 'female':1})\n    train['Embarked1'] = train['Embarked'].map({'C':0, 'S':1, 'Q':2}).fillna('3')\n    train['Age_Sex_cat'] = train['Age_Sex_cat'].map({'child male':0, 'child female':1, \n                                                     'teenager male':2, 'teenager female':3,\n                                                     'young_adult male': 4, 'young_adult female': 5,\n                                                     'adult male': 6, 'adult female':7,\n                                                     'elder male': 8, 'elder female':9,\n                                                     'missing male': 10, 'missing female': 11})\n    return train\n\ntrain = get_mapping(train)","708f01cc":"before = ['Pclass', 'Sex1','SibSp', 'Parch', 'Fare', 'Embarked1']","892820f4":"model = DecisionTreeClassifier(random_state=0, max_leaf_nodes=5)\nmodel.fit(train[before], train.Survived)\n","9e1abbed":"cv_results = cross_validate(model, train[before], train.Survived)","0c3d6036":"cv_results['test_score']","96484f69":"cross_val_score(model, train[before], train.Survived)","c60fd55f":"cross_val_score(model, train[before], train.Survived).mean()","8e6181d2":"plot_tree(model)\nplt.show()","e82f60b0":"after = ['Pclass_new','Sex1', 'Age_Sex_cat', 'SibSp', 'Parch', 'Embarked1']","2bc166c7":"model1 = DecisionTreeClassifier(random_state=0)\nmodel1.fit(train[after], train.Survived)","9a851218":"cross_val_score(model1, train[after], train.Survived)","347d828c":"cross_val_score(model1, train[after], train.Survived).mean()","0baf595d":"RFC = RandomForestClassifier(n_estimators=300)\nRFC.fit(train[before], train.Survived)","3d456f8e":"cross_val_score(RFC, train[before], train.Survived)","47282608":"RFC2 = RandomForestClassifier(n_estimators=100)\nRFC2.fit(train[after], train.Survived)","702fad54":"cross_val_score(RFC2, train[after], train.Survived)","a381fa91":"cross_val_score(RFC2, train[after], train.Survived).mean()","3387e30b":"SVModel = svm.SVC()\nSVModel.fit(train[before], train.Survived)","8375e65e":"cross_val_score(SVModel, train[before], train.Survived)","52c89f86":"cross_val_score(SVModel, train[before], train.Survived).mean()","675321f5":"SVModel = svm.SVC()\nSVModel.fit(train[after], train.Survived)","61f139bf":"cross_val_score(SVModel, train[after], train.Survived)","8335ba98":"cross_val_score(SVModel, train[after], train.Survived).mean()","413ff863":"test['Age_cat']=pd.cut(x=test['Age'], bins=[0,10,20,40,60,75], labels=['child', 'teenager','young_adult', 'adult', 'elder']).values.add_categories('missing')\ntest.Age_cat.fillna('missing', inplace=True)\ntest['Age_Sex_cat'] = test['Age_cat'].astype('str') + ' ' + test['Sex']\ntest['Age_Sex_cat']= test['Age_Sex_cat'].astype('category')\n\ntest = get_new_Pclass(test)\ntest = get_mapping(test)\n","76514bae":"results = SVModel.predict(test[after])","7e508852":"results_tosummit = pd.DataFrame(test['PassengerId'])","42162233":"results_tosummit['Survived'] = results","258a83c4":"results_tosummit.to_csv('titanic_prediction.csv', index =False)","b0c30547":"## Model Building","06519e90":"What's the ratio between Survived\/non-survived?","3fbe2ca2":"## Feature enignering","0f1bac1b":"And what's the survival rate for those?","e8a5b3d4":"Ok, and what about Age\/Sex relation?","444d718e":"## Preparation before modelling","c15bd9e7":"# **Titanic Survivors**","fad664b6":"Or Class to number of Sibilings\/Spouse?","8aa7a8f1":"Looks like there is no difference for classes 2nd and 3rd. But what happend in the 1st class? Seems that there is always richer guy who's treated better. \n\nSo maybe we will try to find real elite? Spoiler - We will create new class for those in Feature Enignering section.","a8109f6c":"Cross-Validation scores suggests that in this case SVM has the best score on train data and this one was chosen and submitted.","df7a964d":"## Exploration","e50d7375":"As mentioned in Visualistion section - 1st class it's not coherent - we may tried to find richest from the rich. For that all 1st class passengers, which pay more than $50 was reclassified as 0-class","f9e3f770":"To create and fit model all caterogical values need to be mapped to ","66d0d9e3":"### Decision Tree","2d2eaa88":"## Visualisations - Distributions","13711d17":"First I will check model for initial column - without Age (which has 177 missing value)","45c73032":"## Model Evaluation and results","b9178a25":"We would try to create some new variables - at start it would be great to catergorize people against their age - specific classes might be threated differently - like it's shown on Age\/Sex relation. I choose arbitraly to divide it in 5 categories. Sixth category is for those for which we don't have specific age:\n","8f6b5d13":"First, brief look at the data:","3d01c0a8":"## Random Forest","f60f9e67":"This is my attempt to discover who survived, and who's not. First load two datasets. To evaluate models I will use cross-validation, this is why I'm not dividing training set for inner scoring.","092665f0":"Ok, now it would be great to see if there is any relation between caterogical variable and other. \n\nWe will look closer, if those who's paid more, my feel safer.","a1628598":"Let's check how some categorical variables look for those which survived and those whose not:","18c58645":"Additionally Sex\/Age category was combined:","1f82ace6":"## SVM - Simple Vector Machine"}}