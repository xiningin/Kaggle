{"cell_type":{"4f80e8b9":"code","601aaf7b":"code","ff8a6228":"code","66c9a256":"code","f2ea7d89":"code","4caf8b89":"code","47829e19":"code","e023f8e1":"code","a563b757":"code","7318f952":"code","aad8e2c7":"code","db4b206d":"code","b583c37e":"code","c4f4e013":"code","00355c96":"code","22816a90":"code","27712208":"code","7a73e805":"code","260f1e52":"code","698bcdba":"code","12da799e":"code","611ba0c4":"code","0dbce88a":"code","b4625fe1":"markdown","4c2faf5c":"markdown","4d533af8":"markdown","90a0a4a8":"markdown"},"source":{"4f80e8b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","601aaf7b":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\n\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, BatchNormalization\nfrom keras.optimizers import Adam \nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau, EarlyStopping\nfrom keras.preprocessing.image import ImageDataGenerator\n\n\nfrom keras.applications import *\nfrom keras.applications.vgg19 import preprocess_input\nfrom keras import Model, layers\nfrom keras.models import load_model, model_from_json","ff8a6228":"ROOT = '..\/input\/flower-color-images\/flower_images\/flower_images\/'\n\ndf = pd.read_csv(ROOT + 'flower_labels.csv')","66c9a256":"df = df.replace({0:'phlox',1:'rose',2:'calendula',3:'iris',4:'leucanthemum maximum',\n                 5:'bellflower',6:'viola',7:'rudbeckia laciniata',\n                 8:'peony',9:'aquilegia'})","f2ea7d89":"df.label.value_counts().plot.bar()","4caf8b89":"def img_plot(df):\n    print(\"Plot random images of flowers\")\n    imgs = []\n    labels = []\n    df = df.sample(frac=1)\n    for file, label in zip(df['file'][:25], df['label'][:25]):\n        img = cv2.imread(ROOT+file)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        imgs.append(img)\n        labels.append(label)\n    f, ax = plt.subplots(5, 5, figsize=(15,15))\n    for i, img in enumerate(imgs):\n        ax[i\/\/5, i%5].imshow(img)\n        ax[i\/\/5, i%5].axis('off')\n        ax[i\/\/5, i%5].set_title(labels[i])\n    plt.show()\n\nimg_plot(df)","47829e19":"num_classes = len(df.label.value_counts())\nnum_classes","e023f8e1":"train_input_shape = (299,299, 3)\nIMG_SIZE = 299\nSEED = 42\nbatch_size = 32\ntrain_df, test_df = train_test_split(df, \n                                     test_size=0.2, \n                                     random_state=SEED, \n                                     stratify=df['label'].values)","a563b757":"def create_datasets(df, img_size):\n    imgs = []\n    for file in tqdm(df['file']):\n        img = cv2.imread(ROOT+file)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (img_size,img_size))\n        imgs.append(img)\n    # not normalize    \n    imgs = np.array(imgs)\n    df = pd.get_dummies(df['label'])\n    return imgs, df\n\n\ntrain_imgs, train_df = create_datasets(train_df, IMG_SIZE)\ntest_imgs, test_df = create_datasets(test_df, IMG_SIZE)","7318f952":"xception = Xception(weights='imagenet', include_top=False, input_shape=train_input_shape)\n\nfor layer in xception.layers:\n    layer.trainable = True\n","aad8e2c7":"xception.summary()","db4b206d":"# our layers - you can add more if you want\nx = xception.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation='relu')(x) \npredictions = layers.Dense(10, activation='softmax')(x) # 10 since we have only 10 categories","b583c37e":"model = Model(xception.input, predictions)","c4f4e013":"# view the structure of the model\nmodel.summary()","00355c96":"# tell the model what cost and optimization method to use\nmodel.compile(\n  loss='categorical_crossentropy',\n  optimizer='adam',\n  metrics=['accuracy']\n)","22816a90":"early_stop = EarlyStopping(monitor='val_loss', patience=20, verbose=1, \n                           mode='auto', restore_best_weights=True)","27712208":"r = model.fit(train_imgs, train_df, batch_size=32,validation_data = (test_imgs, test_df),\n          epochs=20, verbose=0)","7a73e805":"#Plot train and test loss and Accuracy\nplt.figure(figsize=(10, 10))\n\nplt.subplot(2, 2, 1)\nplt.plot(r.history['loss'], label='Training Loss')\nplt.plot(r.history['val_loss'], label='Validation Loss')\nplt.legend()\nplt.title('Loss Function')\n\nplt.subplot(2, 2, 2)\nplt.plot(r.history['accuracy'], label='Training Accuracy')\nplt.plot(r.history['val_accuracy'], label='Validation Accuracy')\nplt.legend()\nplt.title('Accuracy')","260f1e52":"!mkdir models\n!mkdir models\/keras","698bcdba":"model.save('models\/keras\/model.h5')","12da799e":"model = load_model('models\/keras\/model.h5')","611ba0c4":"# save\nmodel.save_weights('models\/keras\/weights.h5')\nwith open('models\/keras\/architecture.json', 'w') as f:\n        f.write(model.to_json())","0dbce88a":"# load\nwith open('models\/keras\/architecture.json') as f:\n    model = model_from_json(f.read())\nmodel.load_weights('models\/keras\/weights.h5')","b4625fe1":"There are 210 images (128x128x3) with 10 species\/classes of flowers in this dataset. The objective is to classify flowers into different classes namely: \n\n0 => phlox;\n\n1 => rose;\n\n2 => calendula;\n\n3 => iris;\n\n4 => leucanthemum maximum (Shasta daisy);\n\n5 => campanula (bellflower);\n\n6 => viola;\n\n7 => rudbeckia laciniata (Goldquelle);\n\n8 => peony;\n\n9 => aquilegia.","4c2faf5c":"## Plot random images of flowers","4d533af8":"**The dataset can be downloaded from : https:\/\/www.kaggle.com\/olgabelitskaya\/flower-color-images**","90a0a4a8":"## Flower classification"}}