{"cell_type":{"35d5de93":"code","2622da96":"code","0f8933fb":"code","18f7984c":"code","6be88b5f":"code","d20a2559":"code","0413f303":"code","5c328e4d":"code","d033c79f":"code","62fa9263":"code","4ebe5bc3":"code","8e731bb1":"code","09bc0cda":"code","99b86f47":"code","dc21d4fb":"code","bdd6ca32":"code","590f77c2":"code","f1d06771":"code","c879756c":"code","3539c9c5":"code","2468b99c":"code","ca3adaee":"code","2822d772":"code","c40462e7":"code","191ffd92":"code","297e4436":"code","de58d685":"code","9046f179":"code","4f109446":"code","bd2b766b":"code","d6399544":"code","caf46b60":"code","f85a1073":"code","43f4ddfe":"code","49325cd9":"code","f4d241cd":"code","61d9f660":"code","64053d80":"code","60c7b33f":"code","dc1dd2bd":"code","d4125f10":"code","4763785f":"code","4c70629e":"code","a7b1d5be":"code","cfe38061":"code","ee1b5144":"markdown"},"source":{"35d5de93":"import numpy as np \nimport pandas as pd\nimport re\nimport gc\nimport os\nprint(os.listdir(\"..\/input\"))\nimport fileinput\nimport string\nimport tensorflow as tf\nimport zipfile\nimport datetime\nimport sys\nfrom tqdm  import tqdm\ntqdm.pandas()\nfrom nltk.tokenize import wordpunct_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem.snowball import SnowballStemmer\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score, roc_auc_score\n\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, LSTM, Conv1D, MaxPooling1D, Dropout, Activation\nfrom keras.layers.embeddings import Embedding\nfrom sklearn.metrics import classification_report","2622da96":"valid_forms = ['am','are','were','was','is','been','being','be']\nblank = '----'","0f8933fb":"def detect(tokens):\n    return [t for t in tokens if t in valid_forms]\n    \ndef replace_blank(tokens):\n    return [blank if t in valid_forms else t for t in tokens]\n\ndef create_windows(tokens, window_size=3):\n    X = []\n    for i, word in enumerate(tokens):\n        if word == blank:\n            window = tokens[i-window_size:i] + tokens[i+1:i+window_size+1]\n            window = ' '.join(window)\n            X.append(window)    \n    return X","18f7984c":"f1 = open(\"..\/input\/title-conference\/title_conference.csv\",\"r\")\na = f1.read()\na = re.sub('[\\n]', '', a)\ntokens = wordpunct_tokenize(a)\ny = detect(tokens)\ntokens = replace_blank(tokens)\nX = create_windows(tokens)\nf1.close()","6be88b5f":"df = pd.DataFrame()\ndf[\"Text\"] = X\ndf[\"Conference\"] = y","d20a2559":"df = pd.read_csv(\"..\/input\/title-conference\/title_conference.csv\")","0413f303":"df.head()","5c328e4d":"one_hot = pd.get_dummies(df[\"Conference\"])\ndf.drop(['Conference'],axis=1,inplace=True)\ndf = pd.concat([df,one_hot],axis=1)\ndf.head()","d033c79f":"df1 = df","62fa9263":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df1[\"Title\"].values, df1.drop(['Title'],axis=1).values, test_size=0.2, random_state=42)","4ebe5bc3":"y_train","8e731bb1":"X_train","09bc0cda":"vocabulary_size = 20000\ntokenizer = Tokenizer(num_words= vocabulary_size)\ntokenizer.fit_on_texts(X_train)\nsequences = tokenizer.texts_to_sequences(X_train)\nX_train = pad_sequences(sequences, maxlen=50)","99b86f47":"sequences = tokenizer.texts_to_sequences(X_test)\nX_test = pad_sequences(sequences, maxlen=50)","dc21d4fb":"model = Sequential()\nmodel.add(Embedding(20000, 100, input_length=50))\nmodel.add(Dropout(0.2))\nmodel.add(Conv1D(64, 5, activation='relu'))\nmodel.add(MaxPooling1D(pool_size=2))\nmodel.add(LSTM(100))\nmodel.add(Dense(5, activation='softmax'))\n","bdd6ca32":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","590f77c2":"model.fit(X_train, y_train,\n                    batch_size=1024,\n                    epochs=10,\n                    verbose=1,\n                    validation_split=0.1)","f1d06771":"score = model.evaluate(X_test, y_test,\n                       batch_size=256, verbose=1)\nprint('Test accuracy:', score[1])","c879756c":"preds = model.predict(X_test)","3539c9c5":"print(classification_report(np.argmax(y_test,axis=1),np.argmax(preds,axis=1)))","2468b99c":"gc.collect()","ca3adaee":"!wget https:\/\/storage.googleapis.com\/bert_models\/2018_10_18\/uncased_L-12_H-768_A-12.zip\n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/modeling.py \n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/optimization.py \n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/run_classifier.py \n!wget https:\/\/raw.githubusercontent.com\/google-research\/bert\/master\/tokenization.py ","2822d772":"import modeling\nimport optimization\nimport run_classifier\nimport tokenization","c40462e7":"folder = 'model_folder'\nwith zipfile.ZipFile(\"uncased_L-12_H-768_A-12.zip\",\"r\") as zip_ref:\n    zip_ref.extractall(folder)","191ffd92":"BERT_MODEL = 'uncased_L-12_H-768_A-12'\nBERT_PRETRAINED_DIR = f'{folder}\/uncased_L-12_H-768_A-12'\nOUTPUT_DIR = f'{folder}\/outputs'\nprint(f'>> Model output directory: {OUTPUT_DIR}')\nprint(f'>>  BERT pretrained directory: {BERT_PRETRAINED_DIR}')","297e4436":"df2 = pd.read_csv(\"..\/input\/title-conference\/title_conference.csv\")","de58d685":"df2.head()","9046f179":"df2['Conference'].value_counts()","4f109446":"possible_labels = df2.Conference.unique()\n\nlabel_dict = {}\nfor index, possible_label in enumerate(possible_labels):\n    label_dict[possible_label] = index\nlabel_dict","bd2b766b":"df2['label'] = df2.Conference.replace(label_dict)","d6399544":"df2.head()","caf46b60":"df2.drop(['Conference'], axis=1 , inplace = True)","f85a1073":"df2.head()","43f4ddfe":"X_train, X_test, y_train, y_test = train_test_split(df2[\"Title\"].values, df2[\"label\"].values, test_size=0.2, random_state=42)","49325cd9":"X_train[5]","f4d241cd":"y_train","61d9f660":"def create_examples(lines, set_type, labels=None):\n#Generate data for the BERT model\n    guid = f'{set_type}'\n    examples = []\n    if guid == 'train':\n        for line, label in zip(lines, labels):\n            text_a = line\n            label = str(label)\n            examples.append(\n              run_classifier.InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    else:\n        for line in lines:\n            text_a = line\n            label = '0'\n            examples.append(\n              run_classifier.InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n# Model Hyper Parameters\nTRAIN_BATCH_SIZE = 32\nEVAL_BATCH_SIZE = 8\nLEARNING_RATE = 1e-5\nNUM_TRAIN_EPOCHS = 3.0\nWARMUP_PROPORTION = 0.1\nMAX_SEQ_LENGTH = 50\n# Model configs\nSAVE_CHECKPOINTS_STEPS = 100000 #if you wish to finetune a model on a larger dataset, use larger interval\n# each checpoint weights about 1,5gb\nITERATIONS_PER_LOOP = 100000\nNUM_TPU_CORES = 8\nVOCAB_FILE = os.path.join(BERT_PRETRAINED_DIR, 'vocab.txt')\nCONFIG_FILE = os.path.join(BERT_PRETRAINED_DIR, 'bert_config.json')\nINIT_CHECKPOINT = os.path.join(BERT_PRETRAINED_DIR, 'bert_model.ckpt')\nDO_LOWER_CASE = BERT_MODEL.startswith('uncased')\n\nlabel_list = [str(num) for num in range(8)]\ntokenizer = tokenization.FullTokenizer(vocab_file=VOCAB_FILE, do_lower_case=DO_LOWER_CASE)\ntrain_examples = create_examples(X_train, 'train', labels=y_train)\n\ntpu_cluster_resolver = None #Since training will happen on GPU, we won't need a cluster resolver\n#TPUEstimator also supports training on CPU and GPU. You don't need to define a separate tf.estimator.Estimator.\nrun_config = tf.contrib.tpu.RunConfig(\n    cluster=tpu_cluster_resolver,\n    model_dir=OUTPUT_DIR,\n    save_checkpoints_steps=SAVE_CHECKPOINTS_STEPS,\n    tpu_config=tf.contrib.tpu.TPUConfig(\n        iterations_per_loop=ITERATIONS_PER_LOOP,\n        num_shards=NUM_TPU_CORES,\n        per_host_input_for_training=tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2))\n\nnum_train_steps = int(\n    len(train_examples) \/ TRAIN_BATCH_SIZE * NUM_TRAIN_EPOCHS)\nnum_warmup_steps = int(num_train_steps * WARMUP_PROPORTION)\n\nmodel_fn = run_classifier.model_fn_builder(\n    bert_config=modeling.BertConfig.from_json_file(CONFIG_FILE),\n    num_labels=len(label_list),\n    init_checkpoint=INIT_CHECKPOINT,\n    learning_rate=LEARNING_RATE,\n    num_train_steps=num_train_steps,\n    num_warmup_steps=num_warmup_steps,\n    use_tpu=False, #If False training will fall on CPU or GPU, depending on what is available  \n    use_one_hot_embeddings=True)\n\nestimator = tf.contrib.tpu.TPUEstimator(\n    use_tpu=False, #If False training will fall on CPU or GPU, depending on what is available \n    model_fn=model_fn,\n    config=run_config,\n    train_batch_size=TRAIN_BATCH_SIZE,\n    eval_batch_size=EVAL_BATCH_SIZE)","64053d80":"num_train_steps","60c7b33f":"print('Please wait...')\ntrain_features = run_classifier.convert_examples_to_features(\n    train_examples, label_list, MAX_SEQ_LENGTH, tokenizer)\nprint('>> Started training at {} '.format(datetime.datetime.now()))\nprint('  Num examples = {}'.format(len(train_examples)))\nprint('  Batch size = {}'.format(TRAIN_BATCH_SIZE))\ntf.logging.info(\"  Num steps = %d\", num_train_steps+1)\ntrain_input_fn = run_classifier.input_fn_builder(\n    features=train_features,\n    seq_length=MAX_SEQ_LENGTH,\n    is_training=True,\n    drop_remainder=True)\nestimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\nprint('>> Finished training at {}'.format(datetime.datetime.now()))","dc1dd2bd":"def input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    print(params)\n    batch_size = 500\n\n    num_examples = len(features)\n\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn","d4125f10":"predict_examples = create_examples(X_test, 'test')\n\npredict_features = run_classifier.convert_examples_to_features(\n    predict_examples, label_list, MAX_SEQ_LENGTH, tokenizer)\n\npredict_input_fn = input_fn_builder(\n    features=predict_features,\n    seq_length=MAX_SEQ_LENGTH,\n    is_training=False,\n    drop_remainder=False)\n\nresult = estimator.predict(input_fn=predict_input_fn)","4763785f":"preds = []\nfor prediction in result:\n      preds.append(np.argmax(prediction['probabilities']))","4c70629e":"from sklearn.metrics import accuracy_score","a7b1d5be":"print(\"Accuracy of BERT is:\",accuracy_score(y_test,preds))","cfe38061":"\n\n\nprint(classification_report(y_test,preds))","ee1b5144":"# BERT implementation"}}