{"cell_type":{"f4f21237":"code","e0b6b9d4":"code","6e37e950":"code","4a67b392":"code","585839f3":"code","d81eeb24":"code","25524dad":"code","ae7d1f24":"code","a8e55a6e":"code","75f627fb":"code","f7ceef9a":"code","08ddfc8d":"code","950fa42c":"code","6100f485":"code","6008a65e":"code","0f614ca7":"code","499bbb65":"code","bea8c216":"code","cd2362fd":"code","273a8bbe":"code","f0c02650":"code","7d9cf8df":"code","b93db528":"code","f45e7021":"code","bb6952ed":"markdown","0cdf6ec5":"markdown"},"source":{"f4f21237":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom PIL import Image\n\nimport os\nprint(os.listdir(\"..\/input\"))","e0b6b9d4":"# keras libraries\nfrom tensorflow import keras\nfrom keras.applications.vgg16 import VGG16\nfrom keras.applications.vgg16 import preprocess_input\nfrom keras.models import Model\nfrom keras.layers import Input, Lambda, Flatten, Dense, Dropout\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.metrics import classification_report, confusion_matrix","6e37e950":"train_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/train\/'\ntest_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/test\/'\nval_dir = '..\/input\/chest-xray-pneumonia\/chest_xray\/val\/'","4a67b392":"train_normal = train_dir + 'NORMAL\/'\ntrain_pneumonia = train_dir + 'PNEUMONIA\/'","585839f3":"from keras.callbacks import ReduceLROnPlateau , ModelCheckpoint , LearningRateScheduler\nlr_reduce = ReduceLROnPlateau(monitor='val_acc', factor=0.1, epsilon=0.0001, patience=1, verbose=1)","d81eeb24":"# normal pic\nrand_norm = np.random.randint(0, len(os.listdir(train_normal)))\nnormal_pic = os.listdir(train_normal)[rand_norm]\nnormal_pic_address = train_normal+normal_pic\n\n# pneumonia pic\nrand_norm = np.random.randint(0, len(os.listdir(train_pneumonia)))\npneumonia_pic = os.listdir(train_pneumonia)[rand_norm]\npneumonia_pic_address = train_pneumonia+pneumonia_pic\n\n# load the images\nnormal_load = Image.open(normal_pic_address)\npneumonia_load = Image.open(pneumonia_pic_address)\n\n# plot\nf = plt.figure(figsize= (10,6))\na1 = f.add_subplot(1,2,1)\nimg_plot = plt.imshow(normal_load, cmap='gray')\na1.set_title('Normal')\n\na2 = f.add_subplot(1, 2, 2)\nimg_plot = plt.imshow(pneumonia_load, cmap='gray')\na2.set_title('Pneumonia')","25524dad":"# base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=[150,150,3])\n\n# for layer in base_model.layers:\n#     layer.trainable = False","ae7d1f24":"vgg = VGG16(input_shape=[150, 150, 3], weights='imagenet', include_top=False)\n\nfor layer in vgg.layers:\n    layer.trainable = False","a8e55a6e":"# x = base_model.output\n# x = Dropout(0.5)(x)\n# x = GlobalAveragePooling2D()(x)\n# x = Dense(128, activation='relu')(x)\n# x = BatchNormalization()(x)\n# predictions = Dense(2, activation='sigmoid')(x)\n\n# model = Model(inputs=base_model.input, outputs=predictions)","75f627fb":"flatten1 = Flatten()(vgg.output)\ndense1 = Dense(256, activation=\"relu\")(flatten1)\ndropout1 = Dropout(0.5)(dense1)\nprediction = Dense(2, activation=\"softmax\")(dropout1)\n\nmodel = Model(inputs=vgg.input, outputs=prediction)","f7ceef9a":"model.summary()","08ddfc8d":"model.compile(optimizer='adam', \n              loss='categorical_crossentropy', \n              metrics=['accuracy'])","950fa42c":"# loading the images\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,\n                            rotation_range=30,\n                            zoom_range=0.15,\n                            horizontal_flip=True,\n                            fill_mode=\"nearest\")\n\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntraining_set = train_datagen.flow_from_directory(train_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size=32,\n                                    class_mode='categorical',\n                                    shuffle=True)\n\nvalidation_set = test_datagen.flow_from_directory(val_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size=32,\n                                    class_mode='categorical',\n                                    shuffle=True)\n\ntest_set = test_datagen.flow_from_directory(test_dir,\n                                    target_size=(150, 150),\n                                    color_mode='rgb',\n                                    batch_size = 32,\n                                    class_mode='categorical')","6100f485":"early_stop = EarlyStopping(monitor='val_loss',patience=3)\n\nhistory = model.fit_generator(training_set,\n                               steps_per_epoch=128,\n                               epochs=6,\n                               validation_data=validation_set,\n                               validation_steps=len(validation_set))","6008a65e":"# plot the loss\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()\nplt.savefig('LossVal_loss')\n\n# plot the accuracy\nplt.plot(history.history['accuracy'], label='train acc')\nplt.plot(history.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()\nplt.savefig('AccVal_acc')","0f614ca7":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(accuracy))\nplt.plot(epochs, accuracy, 'bo', label='Training Accuracy')\nplt.plot(epochs, val_accuracy, 'b', label='Validation Accuracy')\nplt.title('Training and Validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","499bbb65":"model.save('pneumonia_model.h5')","bea8c216":"img=image.load_img('..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0005-0001.jpeg',\n                   target_size=(150,150))","cd2362fd":"x=image.img_to_array(img)\nx","273a8bbe":"x.shape","f0c02650":"x=x\/255","7d9cf8df":"x=np.expand_dims(x,axis=0)\nimg_data=preprocess_input(x)\nimg_data.shape","b93db528":"pred = np.argmax(model.predict(img_data), axis=1)\npred","f45e7021":"if(pred==1):\n    print(\"Uninfected\")\nelse:\n    print(\"Infected\")","bb6952ed":"## Vgg16 Model","0cdf6ec5":"## Let's look at some pictures"}}