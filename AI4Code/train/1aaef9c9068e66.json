{"cell_type":{"c76b5f74":"code","e49c446d":"code","cd64cb9b":"code","478d1c70":"code","45cfc618":"code","87319d85":"code","ba999665":"code","75b940b0":"code","a8ce9f61":"code","f7bcbdae":"code","6f19c6cd":"code","154076bf":"code","c3716a1c":"code","05291d64":"code","2c794665":"code","22293288":"code","47f68435":"code","82b20b51":"code","2a909353":"code","09d29970":"code","1aa2884e":"code","6b15fe01":"code","e383f1d7":"code","a6f6b43d":"code","5cf346dd":"code","fa2848f0":"code","f1f143cf":"code","a2207ce4":"code","125416a4":"code","fc105be1":"code","a73d4087":"code","c39d82b8":"code","2a6c86b0":"code","9dc7d835":"code","17206c68":"code","2c1d16e9":"code","f7f5c9fa":"code","3c956cc0":"code","7fc8bed4":"code","ee4ed2b1":"code","7358a2c0":"code","59823898":"code","5d29a755":"code","624e8aa7":"code","5678b33b":"code","09338b0e":"code","5542efcf":"code","3ca493d5":"code","b7876abc":"code","1a0294ac":"code","567f7853":"code","7d4f3633":"code","7745f699":"code","593d2261":"code","96749f14":"code","4b888f1e":"code","cebdd8c8":"code","445f18c7":"code","5a987151":"code","f8d14d95":"code","5a4e22ff":"code","c3266271":"code","ec59f849":"code","3bad9e1c":"code","5f9c54de":"code","f874acd1":"code","c4e90afe":"code","6024add0":"code","ae698fd5":"code","d7cbf39b":"code","45bfe6ce":"code","f834f1a8":"code","1a386315":"code","542369f9":"code","6c80becd":"code","f5f92532":"code","f6ff9c41":"code","bd05c524":"code","351c6053":"code","f6a8af48":"code","66cb8ae0":"code","86beefc1":"code","1b860c2a":"code","f3c2c1c4":"code","e45843bf":"code","8230e4d6":"code","8338012d":"code","f6485043":"code","af0acefd":"code","15903ef2":"code","a4b03b1c":"code","326a7ed0":"code","a60b5d05":"code","8b6a7a08":"markdown","c5508bf7":"markdown","cb24c0a5":"markdown","cbbd2e47":"markdown","60214556":"markdown","b350ac8e":"markdown","f483e7d7":"markdown","9186e0f0":"markdown","d65eeba5":"markdown","f120924e":"markdown","2e51b82d":"markdown","ecf77c84":"markdown","8895dcbb":"markdown","09e59e03":"markdown","b7c59c9f":"markdown","fc46c6f6":"markdown","9fb6a178":"markdown","dc14a4f1":"markdown"},"source":{"c76b5f74":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"display.max_rows\",None)\npd.set_option(\"display.max_columns\",None)","e49c446d":"# System\nimport warnings\nimport os\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cd64cb9b":"user=pd.read_csv(\"\/kaggle\/input\/bookcrossing\/bx-csv-dump\/BX-Users.csv\",error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1')\nbooks=pd.read_csv(\"\/kaggle\/input\/bookcrossing\/bx-csv-dump\/BX-Books.csv\",error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1')\nratings=pd.read_csv(\"\/kaggle\/input\/bookcrossing\/bx-csv-dump\/BX-Book-Ratings.csv\",error_bad_lines=False, delimiter=';', encoding = 'ISO-8859-1')","478d1c70":"user.head()","45cfc618":"books.head()","87319d85":"ratings.head()","ba999665":"data = pd.merge(books, ratings, on='ISBN', how='left')\n","75b940b0":"data.head()","a8ce9f61":"data=pd.merge(data, user, on='User-ID', how='left')","f7bcbdae":"data.head()","6f19c6cd":"data.drop([\"Image-URL-S\",\"Image-URL-M\",\"Image-URL-L\"],axis=1,inplace=True)","154076bf":"data.head()","c3716a1c":"#missingno.matrix(data)","05291d64":"data.shape","2c794665":"data[\"User-ID\"].unique().shape","22293288":"data[data.ISBN==\"034545104X\"].head()","47f68435":"# For simplification of the problem we gonna drop the age column too\n\ndata.drop(\"Age\",axis=1,inplace=True)","82b20b51":"data.head()","2a909353":"data[\"Year-Of-Publication\"].unique()","09d29970":"data[data[\"Year-Of-Publication\"]==\"DK Publishing Inc\"]","1aa2884e":"data[\"Year-Of-Publication\"].replace({\"DK Publishing Inc\":2000},inplace=True)","6b15fe01":"data[\"Year-Of-Publication\"].unique()","e383f1d7":"data[data[\"Year-Of-Publication\"]==\"Gallimard\"]","a6f6b43d":"data[\"Year-Of-Publication\"].replace({\"Gallimard\":2003},inplace=True)","5cf346dd":"data[data[\"Year-Of-Publication\"]==0].head()","fa2848f0":"data[\"Year-Of-Publication\"].mode()","f1f143cf":"data[\"Year-Of-Publication\"].replace({0:2002},inplace=True)","a2207ce4":"data[\"Year-Of-Publication\"].unique()","125416a4":"data[\"Year-Of-Publication\"]=data[\"Year-Of-Publication\"].astype(int)","fc105be1":"list1=[]\nfor i in data[\"Year-Of-Publication\"]:\n    if i >2016:\n        i=2016\n    list1.append(i)\n#out = np.where(data.values <= q_05,q_05, np.where(data >= q_95, q_95, data))\n","a73d4087":"for i in list1:\n    if i>2016:\n        print(i)","c39d82b8":"data[\"Year-Of-Publication\"]=list1","2a6c86b0":"data[\"Year-Of-Publication\"].value_counts().sort_index().head()","9dc7d835":"list2=[]\nfor i in data[\"Year-Of-Publication\"]:\n    if i <1376:\n        i=1376\n    list2.append(i)","17206c68":"data[\"Year-Of-Publication\"]=list2","2c1d16e9":"data[\"Year-Of-Publication\"].unique()","f7f5c9fa":"data.head()","3c956cc0":"data.Publisher.isnull().sum()","7fc8bed4":"data.Publisher.unique()","ee4ed2b1":"data[\"Publisher\"].sort_values().head()","7358a2c0":"data[data.Publisher.isnull()]","59823898":"data.Publisher.iloc[824289]=\"Editions P. Terrail\"","5d29a755":"data.Publisher.iloc[824598]=\"Editions P. Terrail\"","624e8aa7":"data.head()","5678b33b":"data.isnull().sum()","09338b0e":"data[data[\"Book-Author\"].isnull()]","5542efcf":"data[\"Book-Author\"].value_counts().sort_values(ascending=False).head()","3ca493d5":"data[\"Book-Author\"].iloc[929219]=\"Stephen King\"","b7876abc":"data[\"Book-Author\"].isnull().sum()","1a0294ac":"data[\"Book-Author\"].head()","567f7853":"# Droping the location column","7d4f3633":"data.drop(\"Location\",axis=1,inplace=True)","7745f699":"data.head()","593d2261":"data[\"User-ID\"].isnull().sum()","96749f14":"data.isnull().sum()","4b888f1e":"data.dropna(inplace=True)","cebdd8c8":"data.isnull().sum()","445f18c7":"data.shape","5a987151":"data.head()","f8d14d95":"sns.countplot(data[\"Book-Rating\"])","5a4e22ff":"data[\"Book-Rating\"].value_counts()","c3266271":"data.head()","ec59f849":"ratng=data.copy()","3bad9e1c":"ratng[\"Book-Rating\"].replace(0.0,None,inplace=True)","5f9c54de":"ratng.head()","f874acd1":"ratng[ratng[\"Book-Rating\"]==0]","c4e90afe":"ratng[\"Book-Rating\"].iloc[0]=5","6024add0":"### lets check the distribution again","ae698fd5":"sns.countplot(ratng[\"Book-Rating\"])","d7cbf39b":"rec1=pd.DataFrame(ratng.groupby([\"ISBN\",\"Book-Title\",\"Book-Author\"])[\"Book-Rating\"].sum().sort_values(ascending=False).head(10))","45bfe6ce":"rec1","f834f1a8":"top_index=ratng[\"User-ID\"].value_counts().sort_values(ascending=False).head(500).index\ntop_index","1a386315":"df=ratng[ratng[\"User-ID\"].isin(top_index)]\ndf.head()","542369f9":"df.head()","6c80becd":"idcount=df[\"User-ID\"].value_counts()","f5f92532":"idcount.shape","f6ff9c41":"df121=df[df[\"User-ID\"].isin(idcount[idcount>=1500].index)]","bd05c524":"zxc=df121.groupby(\"Book-Title\")[\"Book-Rating\"].sum().reset_index()\nzxc.head()","351c6053":"zxc=zxc[zxc[\"Book-Rating\"]>200]","f6a8af48":"zxc[\"Book-Rating\"].max()","66cb8ae0":"df_mat=df121[df121[\"Book-Title\"].isin(zxc[\"Book-Title\"])]","86beefc1":"matrix=df_mat.pivot(index=\"User-ID\",columns=\"ISBN\",values=\"Book-Rating\")","1b860c2a":"matrix.fillna(0,inplace=True)","f3c2c1c4":"matrix","e45843bf":"from sklearn.metrics.pairwise import cosine_similarity\n","8230e4d6":"cos_sim = cosine_similarity(matrix)\nnp.fill_diagonal(cos_sim,0)        # zero here means that both ids are same,it should be 1 here but i am using 0 so as to ease further coding process\nrec_cos=pd.DataFrame(cos_sim,index=matrix.index)\nrec_cos.columns=matrix.index\nrec_cos.head()","8338012d":"df_mat[df_mat[\"User-ID\"]==16795.0][[\"Book-Title\",\"Book-Rating\"]].head()","f6485043":"df_mat[df_mat[\"User-ID\"]==135149.0][[\"Book-Title\",\"Book-Rating\"]].head()","af0acefd":"def sim(userid,n):          # userid is the id for which recommendations has to be made, n represents total no. of similiar users wanted \n    print(np.array(rec_cos[userid].sort_values(ascending=False).head(n).index))","15903ef2":"print(np.array(rec_cos[98391.0].sort_values(ascending=False).head(10).index))","a4b03b1c":"sim(98391.0,20)        # .0 has to be added in front of every id as it is working column wise instead of row wise","326a7ed0":"def book_recommender():              # userid is the id for which recommendations has to be made, n represents total no. of similiar users wanted \n    print()\n    print()\n    userid = int(input(\"Enter the user id to whom you want to recommend : \"))\n    print()\n    print()\n    n= int(input(\"Enter how many books you want to recommend : \"))\n    print()\n    print()\n    arr=np.array(rec_cos[userid].sort_values(ascending=False).head(5).index)\n    recom_arr=[]\n\n    for i in arr:\n        recom_arr.append(df_mat[df_mat[\"User-ID\"]==i][[\"Book-Title\",\"Book-Rating\"]].sort_values(by=\"Book-Rating\",ascending=False))\n    \n    return(pd.Series(recom_arr[0].append([recom_arr[1],recom_arr[2],recom_arr[3],recom_arr[4]]).groupby(\"Book-Title\")[\"Book-Rating\"].mean().sort_values(ascending=False).index).head(n))","a60b5d05":"book_recommender()","8b6a7a08":"# The Above Dataframe shows the top 10 books that have received highest number of ratings and hence they are to be recommended as popular choice based on ratings sum","c5508bf7":"# Recommender 2 : Collabarative Filtering Based ","cb24c0a5":"## Cleaning the Year Column","cbbd2e47":"#### The main idea behind UB-CF is that people with similar characteristics share similar taste.\n#### For example, if you are interested in recommending a movie to our friend Bob, suppose Bob and I have seen many movies together and we rated them almost identically.\n#### It makes sense to think that in future as well we would continue to like similar movies and use this similarity metric to recommend movies.","60214556":"# This is only a basic recommender system and much more work still has to be done ","b350ac8e":"## Cleaning the Book Author Column","f483e7d7":"#### Now We are left with around 10 lakh rows of data to work with","9186e0f0":"## Cleaning the User Id column","d65eeba5":"## Importing the library to calculate cosine similiarity between the users","f120924e":"## To make our first recommender we gonna be making recommendations using only those books that have been rated by the users","2e51b82d":"## Cleaning the Publisher column","ecf77c84":"#### Validating our result","8895dcbb":"## lets start working on making our system now but before that distribution of ratings should be viewed","09e59e03":"#### It is problematic to fill out user ids randomly so we gonna drop the null values","b7c59c9f":"#                              ------------------------------------------------------------------------------------------------------------------------------","fc46c6f6":"### Building a function to show top 10 users that are similiar to input user","9fb6a178":"### we gonna be assuming that the rating \"0\" means that the book hasn't recived any ratings from the user,hence lets replace it with None","dc14a4f1":"# Recommender 1 : Popularity Based"}}