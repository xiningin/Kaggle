{"cell_type":{"d2959c2f":"code","1e767b32":"code","393ce6c3":"code","ab79112a":"code","2fe36623":"code","82042c05":"code","a17d4824":"code","1890e307":"code","b0abfedf":"markdown","d91972de":"markdown","0acbeae3":"markdown","ebd04d9e":"markdown","7a0cd93e":"markdown","b80ca799":"markdown"},"source":{"d2959c2f":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D","1e767b32":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\nnumbers = 10\nimg_size = 28\n\ny = train.pop('label')\ny = keras.utils.to_categorical(y, numbers)\nx = train.values\nx = x.reshape((-1, img_size, img_size, 1))\ntest = test.values\ntest = test.reshape((-1, img_size, img_size, 1))\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","393ce6c3":"batch_size = 128\nepochs = 96\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation = 'relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(64, (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Dense(numbers, activation = 'softmax'))","ab79112a":"model.compile(loss = keras.losses.categorical_crossentropy, optimizer = keras.optimizers.Adam(), metrics = ['accuracy'])\n\nmodel.fit(x_train, y_train, batch_size = batch_size, epochs = epochs, verbose = 1, validation_data = (x_test, y_test))","2fe36623":"model.evaluate(x_test, y_test, verbose=2)","82042c05":"# Predict using the testing data\ny_predict_data = model.predict(x_test)\n\n# Get the value with the highest probabilty\ny_prediction = np.argmax(y_predict_data, axis = 1)\n\n# Check the prediction\ny_actual = np.argmax(y_test, axis = 1)\n\naccuracy = np.mean(y_prediction == y_actual)\nprint(f\"Accuracy: {round(accuracy*100, 2)}%\")","a17d4824":"model.save(f'{round(accuracy*100, 2)}.h5')","1890e307":"testing = model.predict(test)\npredictions = np.argmax(testing, axis = 1)\noutput = pd.DataFrame({'ImageId' : range(1, 28001), 'Label' : list(predictions)})\noutput.to_csv('submission.csv', index = False)","b0abfedf":"### Load and prepare data","d91972de":"### Evaluating the model","0acbeae3":"### Testing the model with the testing data","ebd04d9e":"### Using the model","7a0cd93e":"### Define the model","b80ca799":"### Compiling & training the model"}}