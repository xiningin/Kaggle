{"cell_type":{"fd685c23":"code","7bf0380e":"code","1146bad2":"code","a471d2da":"code","76a3b8b2":"code","53e53c7a":"code","e37b94da":"code","8e322fa5":"code","9bd238f7":"markdown","a50d1f94":"markdown","4e1d3d4f":"markdown","4c2ab354":"markdown","15b447d6":"markdown","f039ca09":"markdown","c6bed9a4":"markdown"},"source":{"fd685c23":"import gc\nimport numpy as np\nimport pandas as pd\nimport datatable as dt\nfrom category_encoders import *\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nsns.set()","7bf0380e":"ds = pd.read_csv('..\/input\/spp-base-models-collection\/l1_train.csv')\ntest = pd.read_csv('..\/input\/spp-base-models-collection\/l1_test.csv')\n\nds = ds.loc[:,~ds.columns.duplicated()]\n\ncols = test.columns.to_list()\ntarget = ds['song_popularity'].copy()\n\nx = np.zeros((len(ds), len(cols)))\n\nfor k, col in enumerate(cols):\n    x[:, k] = ds[col].values\n\nall = []\nfor k in range(x.shape[1]):\n    rmse = roc_auc_score(ds['song_popularity'], x[:,k])\n    all.append(rmse)\n    print('Model %i (%s) has OOF AUC = %.5f'%(k, cols[k], rmse))","1146bad2":"m = [np.argmax(all)]; w = []\nold = np.max(all); \n\nTRUE = ds['song_popularity'].values\nRES = 20000; \nPATIENCE = 100;\nTOL = 0.00001\nDUPLICATES = False\n\nprint('Ensemble AUC = %.4f by beginning with model %i'%(old,m[0]))\nprint()\n\nfor kk in range(len(cols)):\n    \n    # BUILD CURRENT ENSEMBLE\n    md = x[:,m[0]]\n    for i,k in enumerate(m[1:]):\n        md = w[i]*x[:,k] + (1-w[i])*md\n        \n    # FIND MODEL TO ADD\n    mx = 0; mx_k = 0; mx_w = 0\n    print('Searching for best model to add... ')\n    \n    # TRY ADDING EACH MODEL\n    for k in range(x.shape[1]):\n        print(k,', ',end='')\n        if not DUPLICATES and (k in m): continue\n            \n        # EVALUATE ADDING MODEL K WITH WEIGHTS W\n        bst_j = 0; bst = 0; ct = 0\n        for j in range(RES):\n            tmp = j\/RES*x[:,k] + (1-j\/RES)*md\n            auc = roc_auc_score(TRUE,tmp)\n            if auc>bst:\n                bst = auc\n                bst_j = j\/RES\n            else: ct += 1\n            if ct>PATIENCE: break\n        if bst>mx:\n            mx = bst\n            mx_k = k\n            mx_w = bst_j\n            \n    # STOP IF INCREASE IS LESS THAN TOL\n    inc = mx-old\n    if inc<=TOL: \n        print(); print('No increase. Stopping.')\n        break\n        \n    # DISPLAY RESULTS\n    print(); #print(kk,mx,mx_k,mx_w,'%.5f'%inc)\n    print('Ensemble AUC = %.4f after adding model %i with weight %.3f. Increase of %.4f'%(mx,mx_k,mx_w,inc))\n    print()\n    \n    old = mx; m.append(mx_k); w.append(mx_w)","a471d2da":"print('We are using models',m)\nprint('with weights',w)\nprint('and achieve ensemble AUC = %.4f'%old)","76a3b8b2":"print(f\"OOF AUC = {roc_auc_score(ds['song_popularity'], md)}\")\n\nmd = x[:,m[0]]\nfor i,k in enumerate(m[1:]):\n    md = w[i]*x[:,k] + (1-w[i])*md\n\nplt.hist(md,bins=100)\nplt.title('Ensemble OOF predictions')\nplt.show()","53e53c7a":"df = ds.copy()\ndf['pred'] = md\ndf.to_csv('ensemble_oof.csv',index=False)","e37b94da":"test = pd.read_csv('..\/input\/spp-base-models-collection\/l1_test.csv')\ncols = test.columns.to_list()\n\ny = np.zeros((len(test), len(cols)))\n\nfor k, col in enumerate(cols):\n    y[:, k] = test[col].values\n\nmd2 = y[:, m[0]]\n\nfor i,k in enumerate(m[1:]):\n    md2 = w[i]*y[:,k] + (1-w[i])*md2\n\nplt.hist(md2,bins=100)\nplt.show()","8e322fa5":"submission  = pd.read_csv('..\/input\/song-popularity-prediction\/sample_submission.csv')\nsubmission['song_popularity'] = md2\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","9bd238f7":"## Search for weights","a50d1f94":"## Build OOF Ensemble","4e1d3d4f":"## Create submission","4c2ab354":"## Load data with predictions of base models","15b447d6":"## Build SUB Ensemble","f039ca09":"### Get OOF file","c6bed9a4":"## Import libraries"}}