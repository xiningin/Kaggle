{"cell_type":{"936d13f5":"code","535f1915":"code","15ead68b":"code","e78108b1":"code","8c18aa8c":"code","871e2df4":"code","6f3e7d84":"code","26f07371":"code","43eee342":"code","e0f8ce55":"code","a0bd17a7":"code","068e4207":"code","65e64c89":"code","0a57a540":"code","72305152":"code","207319b1":"code","f95df0ae":"code","adcd3485":"code","b55f8fea":"markdown"},"source":{"936d13f5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom wordcloud import WordCloud\nfrom plotly import tools\n\n","535f1915":"df=pd.read_csv(\"..\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\nworldmap=pd.read_csv(\"..\/input\/world-capitals-gps\/concap.csv\")\ndf.head()","15ead68b":"#There are some countries that do no fit with the world capital gps.\nwmC=list(worldmap.CountryName)\n\n\nfor each in df.country.unique():\n    if bool(each in wmC):\n        continue\n    else:\n        print(each)","e78108b1":"df.country=df.country.replace(\"Russian Federation\",\"Russia\")\ndf.country=df.country.replace(\"Republic of Korea\",\"South Korea\")\ndf.country=df.country.replace(\"Cabo Verde\",\"Cape Verde\")\ndf.country=df.country.replace(\"Saint Vincent and Grenadines\",\"Saint Vincent and the Grenadines\") ","8c18aa8c":"#average suicides_no by countries(sorted)\ncountry=df.country.unique()\nsuicide_numb=[]\nfor each in country:\n    suicide_numb.append(df[df.country==each].suicides_no.mean())\ncountry_suicide_no=pd.DataFrame({\"country\":country,\"suicide_number\":suicide_numb})\nnew_index=(country_suicide_no.suicide_number.sort_values(ascending=False)).index.values\ncountry_suicide_no=country_suicide_no.reindex(new_index)\nf,ax=plt.subplots(figsize=(10,15))\nsns.barplot(x=country_suicide_no.suicide_number,y=country_suicide_no.country)\nplt.xticks(rotation=90)\nax.legend(loc=\"lower right\",frameon=True)\nax.set(xlabel=\"Average suicide number\",ylabel=\"States\",title=\"Average Suicide number by States\")\n","871e2df4":"#top 15 country most suicide\ndf.groupby(by=['country'])['suicides_no'].sum().reset_index().sort_values(['suicides_no'],ascending=True).tail(25).plot(x='country',y='suicides_no',kind='barh')\nplt.title(\"Top 15 Suicides_no by Country\")   \nplt.show()","6f3e7d84":"  #SUICIDE COUNT BY COUNTRY AND SEX\nd1=df[df.sex==\"male\"]\nd2=df[df.sex==\"female\"]\nlist1=[]\nlist2=[]\nfor each in country:\n    list1.append(d1[d1.country==each].suicides_no.sum())\n    list2.append(d2[d2.country==each].suicides_no.sum())\nlist1=pd.DataFrame({\"country\":country,\"suicides_no_male\":list1,\"suicides_no_female\":list2})\nlist1=list1.sort_values([\"suicides_no_male\"],ascending=False).head(15)\n\nplt.subplots(figsize=(20,20))\nsns.barplot(x=list1.country,y=list1.suicides_no_male,color=\"green\",alpha=0.5,label=\"male\")\nsns.barplot(x=list1.country,y=list1.suicides_no_female,color=\"blue\",alpha=0.7,label=\"female\")\nplt.title(\"Top 15 Suicide Count by Country and Sex\")\nplt.show()","26f07371":" #SUICIDE COUNT BY YEAR\nd1=df[df.sex==\"male\"]\nd2=df[df.sex==\"female\"]\nyears=df.year.unique()\nlist1=[]\nlist2=[]\nfor each in years:\n    list1.append(d1[d1.year==each].suicides_no.sum())\n    list2.append(d2[d2.year==each].suicides_no.sum())\nlist1=pd.DataFrame({\"year\":years,\"suicides_no_male\":list1,\"suicides_no_female\":list2})\nlist1=list1.sort_values([\"suicides_no_male\"],ascending=False).head(15)\n\nplt.subplots\nsns.pointplot(x='year',y='suicides_no_male',data=list1,color='lime',alpha=0.8)\nsns.pointplot(x='year',y='suicides_no_female',data=list1,color='red',alpha=0.8)\nplt.text(40,0.6,'suicides_no_male',color='red',fontsize = 17,style = 'italic')\nplt.text(40,0.55,'suicides_no_female',color='lime',fontsize = 18,style = 'italic')\nplt.xlabel('Year',fontsize = 15,color='blue')\nplt.ylabel('Suicides_no',fontsize = 15,color='blue')\nplt.title('Suicide count by year',fontsize = 20,color='blue')\nplt.grid()","43eee342":"#Suicides_no by Age-group\nage=df.age.unique()\nlist1=[]\nfor each in age:\n    list1.append(df[df.age==each].suicides_no.sum())\n\nlist1=pd.DataFrame({\"age\":age,\"suicides_no\":list1})\n\npie1 = list1.suicides_no\nlabels = list1.age\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Suicide count by age-group\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Suicides_no by age-group\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Suicides_no\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","e0f8ce55":"#AGE_GROUP and SEX\nage=df.age.unique()\nlist1=[]\nlist2=[]\nfor each in age:\n    list1.append(d1[d1.age==each].suicides_no.sum())#d1 is male(d1=df[df.sex==\"male\"])\n    list2.append(d2[d2.age==each].suicides_no.sum())#d2 is female(d2=df[df.sex==\"female\"])\nlist1=pd.DataFrame({\"age\":age,\"suicides_no_male\":list1,\"suicides_no_female\":list2})\n\ntrace1 = go.Scatter(\n    x=list1.age,\n    y=list1.sort_values([\"suicides_no_male\"],ascending=False).suicides_no_male,\n    mode='markers+text',\n    text=\"Male\",\n    textposition='bottom center'\n)\ntrace2 = go.Scatter(\n    x=list1.age,\n    y=list1.sort_values([\"suicides_no_female\"],ascending=False).suicides_no_female,\n    mode='markers+text',\n    text=\"female\",\n    textposition='bottom center'\n)\n\nfig = tools.make_subplots(rows=1, cols=2)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\n\nfig['layout'].update(height=600, width=800, title='Suicides_no by age-group')\niplot(fig)","a0bd17a7":"#               AGE-GROUP AND COUNTRY\nd1=df[df.sex==\"male\"]\nd2=df[df.sex==\"female\"]\nlist1=[]\nlist3=[]\nlist2=[]\n\nfor each in country:\n    for each1 in age:\n        list1.append(df[(df.country==each) & (df.age==each1) & (df.sex==\"male\")].suicides_no.sum())\n        list3.append(df[(df.country==each) & (df.age==each1) & (df.sex==\"female\")].suicides_no.sum())\n        list2.append(each+\"\\n\"+each1)\n\nlist1=pd.DataFrame({\"country-age\":list2,\"suicides_no_male\":list1,\"suicides_no_female\":list3})\nlist1=list1.sort_values([\"suicides_no_male\"],ascending=False).head(30)\nwomen_bins = (list1.suicides_no_female)*-1\nmen_bins = list1.suicides_no_male\n\n\ny = list1[\"country-age\"]\n\nlayout = go.Layout(title=\"top 30 suicides_no by age-group and country\",yaxis=go.layout.YAxis(side=\"right\"),\n                   xaxis=go.layout.XAxis(\n                       range=[-100000, 300000],\n#                       tickvals=[-100000, -50000, -10000, 0, 100000, 200000, 300000],\n#                       ticktext=[300000, 200000, 100000, 0, 100000, 200000, 300000],\n                      ),\n                   barmode='overlay',\n                   bargap=0.1)\n\ndata = [go.Bar(y=y,\n               x=men_bins,\n               orientation='h',\n               name='Men',\n               hoverinfo='x',\n               marker=dict(color='powderblue')\n               ),\n        go.Bar(y=y,\n               x=women_bins,\n               orientation='h',\n               name='Women',\n               text=-1 * women_bins.astype('int'),\n               hoverinfo='text',\n               marker=dict(color='seagreen')\n               )]\niplot(dict(data=data, layout=layout))","068e4207":"# wordcloud of countries that have more than 1000 suicides\n\nlist1=df[df.suicides_no>1000]\n\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(list1.country))\nplt.imshow(wordcloud)\nplt.axis('off')\n\nplt.show()","65e64c89":"## swarm plot of suicides_no that is bigger than 2000 by generation and sex\nlist1=df[df.suicides_no>2000]\nsns.swarmplot(x=\"sex\", y=\"suicides_no\",hue=\"generation\", data=list1)\nplt.show()","0a57a540":"#           AGE-GROUP AND YEAR\nlist1=[]\nlist2=[]\nyears=df.year.unique()\nage=df.age.unique()\nfor each in years:\n    for each1 in age:\n        list1.append(df[(df.year==each) & (df.age==each1)].suicides_no.sum())\n        list2.append(str(each)+\" ,\"+each1)\nlist1=pd.DataFrame({\"year-age\":list2,\"suicides_no\":list1}).head(20)\nlist1=list1.sort_values([\"suicides_no\"],ascending=False)\nf,ax=plt.subplots(figsize=(10,15))\nsns.barplot(x=list1[\"suicides_no\"],y=list1[\"year-age\"])\nplt.xticks(rotation=90)\nax.legend(loc=\"lower right\",frameon=True)\nax.set(xlabel=\"suicide number\",ylabel=\"year-age-group\",title=\"Suicide count by Year and Age-group\")\nplt.show()","72305152":"russia=df[df.country=='Russia']\nrussia=russia.reset_index()\nmale_russia=russia[russia[\"sex\"]==\"male\"]\nfemale_russia=russia[russia.sex==\"female\"]\nrussia_age=russia.age.unique()\n#Russian males total suicide by age-group\nrussia_male_age=[]\nfor each in russia_age:\n    russia_male_age.append(male_russia[male_russia.age==each].suicides_no.sum())\nrussia_male_age=pd.DataFrame({\"age_group\":russia_age,\"total_suicide\":russia_male_age})\n#Russian females total suicide by age-group\nrussia_female_age=[]\nfor each in russia_age:\n    russia_female_age.append(female_russia[female_russia.age==each].suicides_no.sum())\nrussia_female_age=pd.DataFrame({\"age_group\":russia_age,\"total_suicide\":russia_female_age})\n\n\nf,ax=plt.subplots(figsize=(9,15))\nsns.barplot(x=russia_male_age.age_group,y=russia_male_age.total_suicide,color=\"green\",alpha=0.5,label=\"male\")\nsns.barplot(x=russia_female_age.age_group,y=russia_female_age.total_suicide,color=\"blue\",alpha=0.7,label=\"female\")\nplt.title(\"suicides_no in russia by age-group and sex\")\nplt.show()","207319b1":"#Average suicide number in a country\ncountry=df.country.unique()\nsuicide_numb=[]\nfor each in country:\n    suicide_numb.append(df[df.country==each].suicides_no.mean())\ncountry_suicide_no=pd.DataFrame({\"country\":country,\"suicides_no\":suicide_numb})\nlist1=[]\nlist2=[]\nlist3=[]\nlist4=[]\n\nfor each in country_suicide_no.country:\n    x=worldmap[worldmap.CountryName==each].ContinentName.index.item()\n    list1.append(worldmap.ContinentName[x])\n    list2.append(worldmap.CapitalLatitude[x])\n    list3.append(worldmap.CapitalLongitude[x])\ncountry_suicide_no.head()\nfor each in country:\n    x=country_suicide_no[country_suicide_no.country==each].suicides_no.index.item()\n    list4.append(\"Country: \" +each +\" suicides_no:\"+str(\"%.1f\"%country_suicide_no.suicides_no[x]))\ncountry_suicide_no[\"continent\"]=list1\ncountry_suicide_no[\"latitude\"]=list2\ncountry_suicide_no[\"longitude\"]=list3\ncountry_suicide_no[\"text\"]=list4\ncountry_suicide_no.head()\n#CREATING MAP\ncountry_suicide_no.continent.unique()\n#array(['Europe', 'North America', 'South America', 'Australia', 'Asia',\n#       'Central America', 'Africa'], dtype=object)\ncountry_suicide_no[\"color\"] = \"\"\ncountry_suicide_no.color[country_suicide_no.continent == 'Europe'] = \"rgb(0,116,217)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'North America'] = \"rgb(255,65,54)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'Australia'] = \"rgb(133,20,75)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'Asia'] = \"rgb(255,133,27)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'Central America'] = \"rgb(255,03,157)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'Africa'] = \"rgb(255,203,190)\"\ncountry_suicide_no.color[country_suicide_no.continent == 'South America'] = \"rgb(50,21,86)\"\ncountry=country_suicide_no.country.unique()\n\ndata = [dict(\n    type='scattergeo',\n    lon = country_suicide_no[\"longitude\"],\n    lat = country_suicide_no[\"latitude\"],\n    hoverinfo = 'text',\n    text = country_suicide_no[\"text\"],\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = country_suicide_no[\"color\"],\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Suicide numbers by Country ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f95df0ae":"#ANIMATED MAP\n#shows total suicide number in a country by year\nanimation=df.copy()\ncountry=df.country.unique()\nyear=df.year.unique()\nlist1=[]\nlist2=[]\nlist3=[]\nlist4=[]\nlist5=[]\nlist6=[]\nlist7=[]\nfor each in country:\n    y=worldmap[worldmap.CountryName==each].index.item()\n    for each1 in year:\n        x=animation[(animation.country==each) & (animation.year==each1)].suicides_no.sum()\n        list1.append(each)\n        list2.append(each1)\n        list3.append(x)\n        list4.append(worldmap.ContinentName[y])\n        list5.append(worldmap.CapitalLatitude[y])\n        list6.append(worldmap.CapitalLongitude[y])\n        list7.append(each+\", Continent:\"+worldmap.ContinentName[y]+\", suicide number: \"+str(\"%.1f\"%x))\nnew=pd.DataFrame({\"country\":list1,\"year\":list2,\"suicides_no\":list3,\"continent\":list4\n                  ,\"Latitude\":list5,\"Longitude\":list6,\"text\":list7}) \n\ndataset=new\nnew_index=(dataset.year.sort_values(ascending=True)).index.values\ndataset=dataset.reindex(new_index)\n\nyears=[str(each) for each in dataset.year.unique()]\ntypes=['Europe', 'North America', 'South America', 'Australia', 'Asia',\n       'Central America', 'Africa']\n\ncustom_colors = {\n    'Europe' : \"rgb(0,116,217)\",\n    'North America' : \"rgb(255,65,54)\",\n    'Australia' : \"rgb(133,20,75)\",\n    'Asia' : \"rgb(255,133,27)\",\n    'Central America' : \"rgb(255,03,157)\",\n    'Africa' : \"rgb(255,203,190)\",\n    'South America': \"rgb(50,21,86)\"\n}\n\n#types-->continent\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\nfigure['layout']['geo'] = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, \n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\nfigure['layout']['hovermode'] = 'closest'\nfigure['layout']['sliders'] = {\n    'args': [\n        'transition', {\n            'duration': 400,\n            'easing': 'cubic-in-out'\n        }\n    ],\n    'initialValue': '1985',\n    'plotlycommand': 'animate',\n    'values': years,\n    'visible': True\n}\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, 'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration': 0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\n\nsliders_dict = {\n    'active': 0,\n    'yanchor': 'top',\n    'xanchor': 'left',\n    'currentvalue': {\n        'font': {'size': 20},\n        'prefix': 'Year:',\n        'visible': True,\n        'xanchor': 'right'\n    },\n    'transition': {'duration': 300, 'easing': 'cubic-in-out'},\n    'pad': {'b': 10, 't': 50},\n    'len': 0.9,\n    'x': 0.1,\n    'y': 0,\n    'steps': []\n}\nyear = 1985\nfor ty in types:\n    dataset_by_year = dataset[dataset['year'] == year]\n    dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == ty]\n    \n    data_dict = dict(\n    type='scattergeo',\n    lon = dataset['Longitude'],\n    lat = dataset['Latitude'],\n    hoverinfo = 'text',\n    text = dataset.text,\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = custom_colors[ty],\n        opacity = 0.7),\n)\n    figure['data'].append(data_dict)\n    \n# make frames\nfor year in years:\n    frame = {'data': [], 'name': str(year)}\n    for ty in types:\n        dataset_by_year = dataset[dataset['year'] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[dataset_by_year['continent'] == ty]\n\n        data_dict = dict(\n                type='scattergeo',\n                lon = dataset_by_year_and_cont['Longitude'],\n                lat = dataset_by_year_and_cont['Latitude'],\n                hoverinfo = 'text',\n                text = dataset_by_year_and_cont.text,\n                mode = 'markers',\n                marker=dict(\n                    sizemode = 'area',\n                    sizeref = 1,\n                    size= 10 ,\n                    line = dict(width=1,color = \"white\"),\n                    color = custom_colors[ty],\n                    opacity = 0.7),\n                name = ty\n            )\n        frame['data'].append(data_dict)\n\n    figure['frames'].append(frame)\n    slider_step = {'args': [\n        [year],\n        {'frame': {'duration': 300, 'redraw': False},\n         'mode': 'immediate',\n       'transition': {'duration': 300}}\n     ],\n     'label': year,\n     'method': 'animate'}\n    sliders_dict['steps'].append(slider_step)\n\n\nfigure[\"layout\"][\"autosize\"]= True\nfigure[\"layout\"][\"title\"] = \"Suicides_no by country and year\"       \n\nfigure['layout']['sliders'] = [sliders_dict]\n\niplot(figure)","adcd3485":"  #3D RIBBON CHART\n\ntrace1 = go.Scatter3d(\n    x=new['year'],\n    y=new['continent'],\n    z=new['suicides_no'],\n    text=new[\"text\"],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=750,\n        size=new['suicides_no'],\n        color = new['suicides_no'],\n        colorscale = 'Viridis',\n        colorbar = dict(title = 'Suicides<br>No'),\n        line=dict(color='rgb(140, 140, 170)')\n    )\n)\n\ndata=[trace1]\n\nlayout=go.Layout(height=800, width=800, title='Suicides_no by Year-Country')\n\nfig=go.Figure(data=data, layout=layout)\niplot(fig)","b55f8fea":"Hello to all! I'm a beginner and I'm open to all kinds of advice. \nIf I made any logical or other kinds mistakes, please warn me. I hope you find my kernel good :)"}}