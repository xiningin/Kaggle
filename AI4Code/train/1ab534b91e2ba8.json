{"cell_type":{"1aeaea8b":"code","44f036bc":"code","b966d00c":"code","b123aede":"code","7cb551e5":"code","21760af8":"code","a0e8d604":"code","44f18d7a":"code","24326f8c":"code","ed8e5a4c":"code","deae2da6":"code","86bd7b9b":"code","ae89e4e3":"code","b793d35c":"code","b1e0193f":"code","c452d504":"code","3615e820":"code","57592214":"code","a03662ca":"code","2dd38205":"code","ca337b2c":"code","c0053298":"code","59077383":"code","9427a4da":"code","52658437":"code","3569a564":"code","6d192970":"code","c6122f8e":"code","f71c5d57":"code","ebcf6a8b":"code","92c6bcd6":"code","e578512d":"code","505ad1af":"code","b5375c3e":"code","3a4c3db5":"code","9117162c":"code","0eb18877":"code","c06032ce":"code","46a57ce8":"code","b6af96d0":"code","34120a8c":"code","cc970500":"code","9f075681":"code","c82b30e0":"code","c25cf1da":"code","fcb06e49":"code","ad8fb5e0":"code","808ee000":"code","a74bc812":"code","2cddec11":"code","0c4758fd":"code","b09fb566":"code","ed9e8524":"code","dc0cadb6":"code","b950372e":"code","7f3e1612":"code","23061240":"code","24bb7629":"code","a1ee9842":"code","79f6d899":"code","ea6eb842":"code","8d79f867":"code","50b7c26c":"code","d7ee285e":"code","c771e118":"code","84b04de3":"code","4f6be534":"code","d5de4e7e":"code","d79a87dc":"code","978e3049":"code","59c0f5bc":"code","0b507fab":"code","8c0c11a2":"code","bfa5fa3f":"code","be45a86e":"code","5b691a33":"code","9340b95d":"code","96635450":"code","a8c3c392":"code","35edc441":"code","ffdc2519":"code","9582a98c":"code","709cc9b5":"code","cdc353ff":"code","e3500291":"code","4d4d56a0":"code","5bc27a16":"code","3705ded7":"code","b3f84de9":"code","ae7294fc":"code","4e4301ba":"code","4c9e08c1":"code","329347c4":"code","063d74fc":"code","e5957409":"code","345b0139":"code","169e9c25":"code","a1657aef":"code","79fb2fdc":"code","c369eb44":"code","d96943fc":"code","ea0cd34c":"code","ca5d03fd":"code","c5222932":"code","6259632c":"markdown","deeabac5":"markdown","d5a3cae3":"markdown","f756758e":"markdown","cd135429":"markdown","7cfc486c":"markdown","396fe5f9":"markdown","19ca66e3":"markdown","d10d66f6":"markdown","cb68915c":"markdown","be14d30a":"markdown","71b5d898":"markdown","efd4ba46":"markdown","b510183c":"markdown","93a71538":"markdown","1d33c71e":"markdown","c969d875":"markdown","de3c2671":"markdown","17f5c267":"markdown","8d49a64d":"markdown","4ed86fc1":"markdown","7a92b957":"markdown","c4735c18":"markdown","830bd493":"markdown","57a18373":"markdown","b154cb6d":"markdown","e24bde63":"markdown","5d48f816":"markdown","08593a66":"markdown","88520fb3":"markdown","6afc5875":"markdown","23562dfc":"markdown","24e9d76b":"markdown","c2a6b184":"markdown","3656ce65":"markdown","23154c3b":"markdown","edb1cfcb":"markdown","bf089520":"markdown","77bbee49":"markdown","5aec056b":"markdown","4dbc1176":"markdown","36621d1f":"markdown","1a53da72":"markdown","a7b369c9":"markdown","4d89f837":"markdown","a2c3e890":"markdown","aed6f736":"markdown","19a62c42":"markdown","a521bb42":"markdown","b1db0e8f":"markdown","89a6d432":"markdown","d9326d07":"markdown","4951c39d":"markdown","38adcf22":"markdown","7235020e":"markdown","058711e5":"markdown","bc774591":"markdown","349fe4ab":"markdown","3b24572c":"markdown","9faf3b82":"markdown","05be08d6":"markdown","d2f3e160":"markdown","c00a02e8":"markdown","1e230aac":"markdown","70913106":"markdown","53f9d037":"markdown","12bc522b":"markdown","476009c7":"markdown","7ec7d799":"markdown","a4d34ec7":"markdown","c469e50f":"markdown","5775ee18":"markdown","f346e5c7":"markdown","d6e48bf7":"markdown","bded4fc9":"markdown","57aa756c":"markdown","63bb1847":"markdown","9de527ce":"markdown","3deb67d6":"markdown","109cea68":"markdown","80350e75":"markdown","20b71819":"markdown"},"source":{"1aeaea8b":"# import all libraries and dependencies for dataframe\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom datetime import datetime, timedelta\n\n# import all libraries and dependencies for data visualization\npd.options.display.float_format='{:.4f}'.format\nplt.rcParams['figure.figsize'] = [8,8]\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', -1) \nsns.set(style='darkgrid')\nimport matplotlib.ticker as ticker\nimport matplotlib.ticker as plticker\n\n# import all libraries and dependencies for machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.base import TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","44f036bc":"# Local file path. Please change the file path accordingly\n\npath = '..\/input\/car-price-prediction\/'\nfile = path + 'CarPrice_Assignment.csv'\nfile1 = path+ 'Data Dictionary - carprices.xlsx'","b966d00c":"# Reading the automobile consulting company file on which analysis needs to be done\n\ndf_auto = pd.read_csv(file)\n\ndf_auto.head()","b123aede":"# Reading the data dictionary file\n\ndf_stru = pd.read_excel(file1)\ndf_stru.head(2)","7cb551e5":"# shape of the data\ndf_auto.shape","21760af8":"# information of the data\ndf_auto.info()","a0e8d604":"# description of the data\ndf_auto.describe()","44f18d7a":"# dropping car_ID based on business knowledge\n\ndf_auto = df_auto.drop('car_ID',axis=1)","24326f8c":"# Calculating the Missing Values % contribution in DF\n\ndf_null = df_auto.isna().mean().round(4) * 100\n\ndf_null.sort_values(ascending=False).head()","ed8e5a4c":"# Datatypes\ndf_auto.dtypes","deae2da6":"# Outlier Analysis of target variable with maximum amount of Inconsistency\n\noutliers = ['price']\nplt.rcParams['figure.figsize'] = [8,8]\nsns.boxplot(data=df_auto[outliers], orient=\"v\", palette=\"Set1\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Outliers Variable Distribution\", fontsize = 14, fontweight = 'bold')\nplt.ylabel(\"Price Range\", fontweight = 'bold')\nplt.xlabel(\"Continuous Variable\", fontweight = 'bold')\ndf_auto.shape","86bd7b9b":"# Extracting Car Company from the CarName as per direction in Problem \n\ndf_auto['CarName'] = df_auto['CarName'].str.split(' ',expand=True)","ae89e4e3":"# Unique Car company\n\ndf_auto['CarName'].unique()","b793d35c":"# Renaming the typo errors in Car Company names\n\ndf_auto['CarName'] = df_auto['CarName'].replace({'maxda': 'mazda', 'nissan': 'Nissan', 'porcshce': 'porsche', 'toyouta': 'toyota', \n                            'vokswagen': 'volkswagen', 'vw': 'volkswagen'})","b1e0193f":"# changing the datatype of symboling as it is categorical variable as per dictionary file\n\ndf_auto['symboling'] = df_auto['symboling'].astype(str)","c452d504":"df_auto['symboling'].head()","3615e820":"# checking for duplicates\n\ndf_auto.loc[df_auto.duplicated()]","57592214":"# Segregation of Numerical and Categorical Variables\/Columns\n\ncat_col = df_auto.select_dtypes(include=['object']).columns\nnum_col = df_auto.select_dtypes(exclude=['object']).columns\ndf_cat = df_auto[cat_col]\ndf_num = df_auto[num_col]","a03662ca":"print(df_cat.head(2))","2dd38205":"print(df_num.head(2))","ca337b2c":"df_auto['CarName'].value_counts()","c0053298":"# Visualizing the different car names available\n\nax=df_auto['CarName'].value_counts().plot(kind='bar')\nax.title.set_text('CarName')\nplt.xlabel(\"Names of the Car\",fontweight = 'bold')\nplt.ylabel(\"Count of Cars\",fontweight = 'bold')","59077383":"#plt.figure(figsize=(8,8))\n\nplt.title('Car Price Distribution Plot')\nsns.distplot(df_auto['price'])","9427a4da":"ax = sns.pairplot(df_auto[num_col])","52658437":"plt.figure(figsize=(20, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'doornumber', y = 'price', data = df_auto)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'fueltype', y = 'price', data = df_auto)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'aspiration', y = 'price', data = df_auto)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'carbody', y = 'price', data = df_auto)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'enginelocation', y = 'price', data = df_auto)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'drivewheel', y = 'price', data = df_auto)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'enginetype', y = 'price', data = df_auto)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = df_auto)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = df_auto)\nplt.show()","3569a564":"plt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = df_auto['cylindernumber'].value_counts().plot('bar')\nplt.title('Number of cylinders')\nplt1.set(xlabel = 'Number of cylinders', ylabel='Frequency of Number of cylinders')\n\nplt.subplot(1,3,2)\nplt1 = df_auto['fueltype'].value_counts().plot('bar')\nplt.title('Fuel Type')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of Fuel type')\n\nplt.subplot(1,3,3)\nplt1 = df_auto['carbody'].value_counts().plot('bar')\nplt.title('Car body')\nplt1.set(xlabel = 'Car Body', ylabel='Frequency of Car Body')","6d192970":"plt.figure(figsize = (10, 6))\nsns.boxplot(x = 'fuelsystem', y = 'price', hue = 'fueltype', data = df_auto)\nplt.show()","c6122f8e":"df_auto['carbody'].head()","f71c5d57":"plt.figure(figsize = (10, 6))\nsns.boxplot(x = 'carbody', y = 'price', hue = 'enginelocation', data = df_auto)\nplt.show()","ebcf6a8b":"plt.figure(figsize = (10, 6))\nsns.boxplot(x = 'cylindernumber', y = 'price', hue = 'fueltype', data = df_auto)\nplt.show()","92c6bcd6":"plt.figure(figsize=(20, 6))\n\ndf_autox = pd.DataFrame(df_auto.groupby(['CarName'])['price'].mean().sort_values(ascending = False))\ndf_autox.plot.bar()\nplt.title('Car Company Name vs Average Price')\nplt.show()","e578512d":"plt.figure(figsize=(20, 6))\n\ndf_autoy = pd.DataFrame(df_auto.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf_autoy.plot.bar()\nplt.title('Car Company Name vs Average Price')\nplt.show()","505ad1af":"#Binning the Car Companies based on avg prices of each car Company.\n\ndf_auto['price'] = df_auto['price'].astype('int')\ndf_auto_temp = df_auto.copy()\nt = df_auto_temp.groupby(['CarName'])['price'].mean()\nprint(t)\ndf_auto_temp = df_auto_temp.merge(t.reset_index(), how='left', on='CarName')\nbins = [0,10000,20000,40000]\nlabel =['Budget_Friendly','Medium_Range','TopNotch_Cars']\ndf_auto['Cars_Category'] = pd.cut(df_auto_temp['price_y'], bins, right=False, labels=label)\ndf_auto.head()","b5375c3e":"sig_col = ['price','Cars_Category','enginetype','fueltype', 'aspiration','carbody','cylindernumber', 'drivewheel',\n            'wheelbase','curbweight', 'enginesize', 'boreratio','horsepower', \n                    'citympg','highwaympg', 'carlength','carwidth']","3a4c3db5":"df_auto = df_auto[sig_col]","9117162c":"sig_cat_col = ['Cars_Category','fueltype','aspiration','carbody','drivewheel','enginetype','cylindernumber']","0eb18877":"# Get the dummy variables for the categorical feature and store it in a new variable - 'dummies'\n\ndummies = pd.get_dummies(df_auto[sig_cat_col])\ndummies.shape","c06032ce":"dummies = pd.get_dummies(df_auto[sig_cat_col], drop_first = True)\ndummies.shape","46a57ce8":"# Add the results to the original dataframe\n\ndf_auto = pd.concat([df_auto, dummies], axis = 1)","b6af96d0":"# Drop the original cat variables as dummies are already created\n\ndf_auto.drop( sig_cat_col, axis = 1, inplace = True)\ndf_auto.shape","34120a8c":"df_auto","cc970500":"# We specify this so that the train and test data set always have the same rows, respectively\n# We divide the df into 70\/30 ratio\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(df_auto, train_size = 0.7, test_size = 0.3, random_state = 100)","9f075681":"df_train.head()","c82b30e0":"scaler = preprocessing.StandardScaler()","c25cf1da":"sig_num_col = ['wheelbase','carlength','carwidth','curbweight','enginesize','boreratio','horsepower','citympg','highwaympg','price']","fcb06e49":"# Apply scaler() to all the columns except the 'dummy' variables\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf_train[sig_num_col] = scaler.fit_transform(df_train[sig_num_col])","ad8fb5e0":"df_train.head()","808ee000":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (20, 20))\nsns.heatmap(df_train.corr(), cmap=\"RdYlGn\")\nplt.show()","a74bc812":"col = ['highwaympg','citympg','horsepower','enginesize','curbweight','carwidth']","2cddec11":"# Scatter Plot of independent variables vs dependent variables\n\nfig,axes = plt.subplots(2,3,figsize=(18,15))\nfor seg,col in enumerate(col):\n    x,y = seg\/\/3,seg%3\n    an=sns.scatterplot(x=col, y='price' ,data=df_auto, ax=axes[x,y])\n    plt.setp(an.get_xticklabels(), rotation=45)\n   \nplt.subplots_adjust(hspace=0.5)","0c4758fd":"y_train = df_train.pop('price')\nX_train = df_train","b09fb566":"X_train_1 = X_train['horsepower']","ed9e8524":"# Add a constant\nX_train_1c = sm.add_constant(X_train_1)\n\n# Create a first fitted model\nlr_1 = sm.OLS(y_train, X_train_1c).fit()","dc0cadb6":"# Check parameters created\n\nlr_1.params","b950372e":"# Let's visualise the data with a scatter plot and the fitted regression line\n\nplt.scatter(X_train_1c.iloc[:, 1], y_train)\nplt.plot(X_train_1c.iloc[:, 1], 0.8062*X_train_1c.iloc[:, 1], 'r')\nplt.show()","7f3e1612":"# Print a summary of the linear regression model obtained\nprint(lr_1.summary())","23061240":"X_train_2 = X_train[['horsepower', 'curbweight']]","24bb7629":"# Add a constant\nX_train_2c = sm.add_constant(X_train_2)\n\n# Create a second fitted model\nlr_2 = sm.OLS(y_train, X_train_2c).fit()","a1ee9842":"lr_2.params","79f6d899":"print(lr_2.summary())","ea6eb842":"X_train_3 = X_train[['horsepower', 'curbweight', 'enginesize']]","8d79f867":"# Add a constant\nX_train_3c = sm.add_constant(X_train_3)\n\n# Create a third fitted model\nlr_3 = sm.OLS(y_train, X_train_3c).fit()","50b7c26c":"lr_3.params","d7ee285e":"print(lr_3.summary())","c771e118":"# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 15)             \nrfe = rfe.fit(X_train, y_train)","84b04de3":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","4f6be534":"# Selecting the variables which are in support\n\ncol_sup = X_train.columns[rfe.support_]\ncol_sup","d5de4e7e":"# Creating X_train dataframe with RFE selected variables\n\nX_train_rfe = X_train[col_sup]\nX_train_rfe","d79a87dc":"# Adding a constant variable and Build a first fitted model\nimport statsmodels.api as sm  \nX_train_rfec = sm.add_constant(X_train_rfe)\nlm_rfe = sm.OLS(y_train,X_train_rfec).fit()\n\n#Summary of linear model\nprint(lm_rfe.summary())","978e3049":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","59c0f5bc":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe1 = X_train_rfe.drop('cylindernumber_twelve', 1,)\n\n# Adding a constant variable and Build a second fitted model\n\nX_train_rfe1c = sm.add_constant(X_train_rfe1)\nlm_rfe1 = sm.OLS(y_train, X_train_rfe1c).fit()\n\n#Summary of linear model\nprint(lm_rfe1.summary())","0b507fab":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe1.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe1.values, i) for i in range(X_train_rfe1.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","8c0c11a2":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe2 = X_train_rfe1.drop('cylindernumber_six', 1,)\n\n# Adding a constant variable and Build a third fitted model\n\nX_train_rfe2c = sm.add_constant(X_train_rfe2)\nlm_rfe2 = sm.OLS(y_train, X_train_rfe2c).fit()\n\n#Summary of linear model\nprint(lm_rfe2.summary())","bfa5fa3f":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe2.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe2.values, i) for i in range(X_train_rfe2.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","be45a86e":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe3 = X_train_rfe2.drop('carbody_hardtop', 1,)\n\n# Adding a constant variable and Build a fourth fitted model\nX_train_rfe3c = sm.add_constant(X_train_rfe3)\nlm_rfe3 = sm.OLS(y_train, X_train_rfe3c).fit()\n\n#Summary of linear model\nprint(lm_rfe3.summary())","5b691a33":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe3.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe3.values, i) for i in range(X_train_rfe3.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9340b95d":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe4 = X_train_rfe3.drop('enginetype_ohc', 1,)\n\n# Adding a constant variable and Build a fifth fitted model\nX_train_rfe4c = sm.add_constant(X_train_rfe4)\nlm_rfe4 = sm.OLS(y_train, X_train_rfe4c).fit()\n\n#Summary of linear model\nprint(lm_rfe4.summary())","96635450":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe4.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe4.values, i) for i in range(X_train_rfe4.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","a8c3c392":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe5 = X_train_rfe4.drop('cylindernumber_five', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe5c = sm.add_constant(X_train_rfe5)\nlm_rfe5 = sm.OLS(y_train, X_train_rfe5c).fit()\n\n#Summary of linear model\nprint(lm_rfe5.summary())","35edc441":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe5.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe5.values, i) for i in range(X_train_rfe5.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ffdc2519":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe6 = X_train_rfe5.drop('enginetype_ohcv', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe6c = sm.add_constant(X_train_rfe6)\nlm_rfe6 = sm.OLS(y_train, X_train_rfe6c).fit()\n\n#Summary of linear model\nprint(lm_rfe6.summary())","9582a98c":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe6.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe6.values, i) for i in range(X_train_rfe6.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","709cc9b5":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe7 = X_train_rfe6.drop('curbweight', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe7c = sm.add_constant(X_train_rfe7)\nlm_rfe7 = sm.OLS(y_train, X_train_rfe7c).fit()\n\n#Summary of linear model\nprint(lm_rfe7.summary())","cdc353ff":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe7.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe7.values, i) for i in range(X_train_rfe7.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e3500291":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe8 = X_train_rfe7.drop('cylindernumber_four', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe8c = sm.add_constant(X_train_rfe8)\nlm_rfe8 = sm.OLS(y_train, X_train_rfe8c).fit()\n\n#Summary of linear model\nprint(lm_rfe8.summary())","4d4d56a0":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe8.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe8.values, i) for i in range(X_train_rfe8.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","5bc27a16":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe9 = X_train_rfe8.drop('carbody_sedan', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe9c = sm.add_constant(X_train_rfe9)\nlm_rfe9 = sm.OLS(y_train, X_train_rfe9c).fit()\n\n#Summary of linear model\nprint(lm_rfe9.summary())","3705ded7":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe9.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe9.values, i) for i in range(X_train_rfe9.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","b3f84de9":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe10 = X_train_rfe9.drop('carbody_wagon', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe10c = sm.add_constant(X_train_rfe10)\nlm_rfe10 = sm.OLS(y_train, X_train_rfe10c).fit()\n\n#Summary of linear model\nprint(lm_rfe10.summary())","ae7294fc":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe10.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe10.values, i) for i in range(X_train_rfe10.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4e4301ba":"# Predicting the price of training set.\ny_train_price = lm_rfe10.predict(X_train_rfe10c)","4c9e08c1":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms Analysis', fontsize = 20)                   \nplt.xlabel('Errors', fontsize = 18)","329347c4":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf_test[sig_num_col] = scaler.transform(df_test[sig_num_col])\ndf_test.shape","063d74fc":"y_test = df_test.pop('price')\nX_test = df_test","e5957409":"# Adding constant\nX_test_1 = sm.add_constant(X_test)\n\nX_test_new = X_test_1[X_train_rfe10c.columns]","345b0139":"# Making predictions using the final model\ny_pred = lm_rfe10.predict(X_test_new)","169e9c25":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)   \nplt.xlabel('y_test ', fontsize=18)                       \nplt.ylabel('y_pred', fontsize=16)    ","a1657aef":"r2_score(y_test, y_pred)","79fb2fdc":"# Predicting the price of training set.\ny_train_price2 = lm_rfe8.predict(X_train_rfe8c)","c369eb44":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price2), bins = 20)\nfig.suptitle('Error Terms Analysis', fontsize = 20)                   \nplt.xlabel('Errors', fontsize = 18)","d96943fc":"X_test_2 = X_test_1[X_train_rfe8c.columns]","ea0cd34c":"# Making predictions using the final model\ny_pred2 = lm_rfe8.predict(X_test_2)","ca5d03fd":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred2)\nfig.suptitle('y_test vs y_pred2', fontsize=20)   \nplt.xlabel('y_test ', fontsize=18)                       \nplt.ylabel('y_pred2', fontsize=16)    ","c5222932":"r2_score(y_test, y_pred2)","6259632c":"#### Equation of Line to predict the Car prices values","deeabac5":"$ Carprice = 0.2440 +  0.3599  \\times  horsepower  + 0.3652  \\times  carwidth +  1.2895 \\times Carscategorytopnotchcars  - 0.4859 \\times carbodyhatchback  - 1.4450 \\times enginetypedohcv - 0.3518 \\times carbodysedan - 0.4023 \\times carbodywagon $","d5a3cae3":"<a id=\"6\"><\/a> <br>\n## Step 6: Building a Linear Model","f756758e":"#### Insights:\n- `hardtop` and `convertible` seems to have the highest average price.","cd135429":"<a id=\"8\"><\/a> <br>\n## Step 8: Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the final model.","7cfc486c":"### Closing Statement:\n- Both the models are good enough to predict the carprices which explains the variance of data upto 90% and the model is significant.","396fe5f9":"## Problem Statement:\n\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts. \n\n \n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n* Which variables are significant in predicting the price of a car\n* How well those variables describe the price of a car","19ca66e3":"#### If this Kernel helped you in any way, some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated","d10d66f6":"#### Insights: \n- There are some price ranges above 36000 which can be termed as outliers but lets not remove it rather we will use standarization scaling.","cb68915c":"#### Visualising few more Categorical Variables\n\nBoxplot of all the categorical variables","be14d30a":"**The R2 score of Training set is 0.918 and Test set is 0.915 which is quite close.\nHence, We can say that our model is good enough to predict the Car prices using below predictor variables**\n- horsepower\n- carwidth\t\n- Cars_Category_TopNotch_Cars\n- carbody_hatchback\n- enginetype_dohcv\n- carbody_sedan                  \n- carbody_wagon                  ","71b5d898":"The variable `carbody` has five levels. We need to convert these levels into integer. Similarly we need to convert the categorical variables to numeric.\n\nFor this, we will use something called `dummy variables`.","efd4ba46":"### Dropping the variable and updating the model","b510183c":"### Checking VIF\n\nVariance Inflation Factor or VIF, gives a basic quantitative idea about how much the feature variables are correlated with each other. It is an extremely important parameter to test our linear model. The formula for calculating `VIF` is:\n\n### $ VIF_i = \\frac{1}{1 - {R_i}^2} $","93a71538":"### Here, we are proposing Business 2 Models which can be used to predict the car prices.","1d33c71e":"<a id=\"5\"><\/a> <br>\n## Step 5: Splitting the Data into Training and Testing Sets\n\nAs we know, the first basic step for regression is performing a train-test split.","c969d875":"*Dropping `enginetype_ohc` beacuse its `p-value` is `0.110` and we want p-value less than 0.05 and hence rebuilding the model*","de3c2671":"<a id=\"2\"><\/a> <br>\n## Step 2: Cleaning the Data","17f5c267":"## MODEL I\n- With `lm_rfe10` which has basically 5 predictor variables.","8d49a64d":"## Business Goal\nWe are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.","4ed86fc1":"### RMSE Score","7a92b957":"We generally want a VIF that is less than 5. So there are clearly some variables we need to drop.","c4735c18":"#### Significant variables after Visualization\n- Cars_Category , Engine Type, Fuel Type\n- Car Body , Aspiration , Cylinder Number \n- Drivewheel , Curbweight , Car Length \n- Car Length , Car width , Engine Size\n- Boreratio , Horse Power , Wheel base \n- citympg , highwaympg , symboling","830bd493":"#### Applying the scaling on the test sets","57a18373":"*Dropping `enginetype_ohcv` beacuse its `p-value` is `0.180` and we want p-value less than 0.05 and hence rebuilding the model*","b154cb6d":"*Dropping `curbweight` beacuse its `VIF` is `8.1` and we want VIF less than 5 and hence rebuilding the model*","e24bde63":"#### Below are the steps which we will be basically following:\n\n1. [Step 1: Reading and Understanding the Data](#1)\n1.  [Step 2: Cleaning the Data](#2)\n    - Missing Value check\n    - Data type check\n    - Duplicate check\n1. [Step 3: Data Visualization](#3)\n    - Boxplot\n    - Pairplot\n1. [Step 4: Data Preparation](#4) \n   - Dummy Variable\n1. [Step 5: Splitting the Data into Training and Testing Sets](#5)\n   - Rescaling\n1. [Step 6: Building a Linear Model](#6)\n   - RFE\n   - VIF\n1. [Step 7: Residual Analysis of the train data](#7)\n1. [Step 8: Making Predictions Using the Final Model](#8)\n1. [Step 9: Model Evaluation](#8)\n   - RMSE Score","5d48f816":"#### Relationship between `carbody` vs `price` with hue `enginelocation`","08593a66":"#### Equation of Line to predict the Car prices values","88520fb3":"Lets drop `carbody_sedan` and see if there is any drastic fall in R squared.If not we can drop `carbody sedan`.\nOur aim is to explain the maximum variance with minimum variable.","6afc5875":"## Step 8: Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the model.","23562dfc":"<a id=\"4\"><\/a> <br>\n## Step 4: Data Preparation","24e9d76b":"#### Visualising Numeric Variables\n\nPairplot of all the numeric variables","c2a6b184":"## MODEL II\n- With `lm_rfe8` which has basically 7 predictor variables.","3656ce65":"* The R-squared incresed from 0.650 to 0.797 ","23154c3b":"- We can see there is a line we can fit in above plots","edb1cfcb":"#### Relationship between `fuelsystem` vs `price` with hue `fueltype`","bf089520":"- Looking at the p-values, it looks like some of the variables aren't really significant (in the presence of other variables)<br>\nand we need to drop it","77bbee49":"#### This kernel is based on the assignment by IIITB collaborated with upgrad.","5aec056b":"*Dropping `carbody_hardtop` beacuse its `p-value` is `0.238` and we want p-value less than 0.05 and hence rebuilding the model*","4dbc1176":"<a id=\"7\"><\/a> <br>\n## Step 7: Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of it.","36621d1f":"<a id=\"9\"><\/a> <br>\n## Step 9: Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","1a53da72":"#### Model I Conclusions:\n- R-sqaured and Adjusted R-squared - 0.912 and 0.909 - 90% variance explained.\n- F-stats and Prob(F-stats) (overall model fit) - 284.8 and 1.57e-70(approx. 0.0) - Model fit is significant and explained 90%<br> variance is just not by chance.\n- p-values - p-values for all the coefficients seem to be less than the significance level of 0.05. - meaning that all the <br>predictors are statistically significant.","a7b369c9":"#### Understanding the dataframe","4d89f837":"#### Dividing test set into X_test and y_test","a2c3e890":"#### Insights:\n- Toyota seems to be the most favoured cars.\n- Mercury seems to be the least favoured cars.","aed6f736":"#### Insights:\n- `Jaguar`,`Buick` and `porsche` seems to have the highest average price.","19a62c42":"We have achieved a R-squared of `0.819` by manually picking the highly correlated variables.\nNow lets use RFE to select the independent variables which accurately predicts the dependent variable `price`.","a521bb42":"#### Insights:\n- `carwidth` , `carlength`, `curbweight` ,`enginesize` ,`horsepower`seems to have a poitive correlation with price.\n- `carheight` doesn't show any significant trend with price.\n- `citympg` , `highwaympg` - seem to have a significant negative correlation with price.","b1db0e8f":"*Dropping `cylindernumber_twelve` beacuse its `p-value` is `0.393` and we want p-value less than 0.05 and hence rebuilding the model*","89a6d432":"The R squared value just dropped by `0.005`.Hence we can proceed with dropping `carbody_sedan`.","d9326d07":"*Dropping `cylindernumber_six` beacuse its `p-value` is `0.493` and we want p-value less than 0.05 and hence rebuilding the model*","4951c39d":"**Typo Error in Car Company name**\n- maxda = mazda\n- Nissan = nissan\n- porsche = porcshce\n- toyota = toyouta\n- vokswagen = volkswagen = vw","38adcf22":"*Dropping `cylindernumber_four` beacuse its `VIF` is `5.66` and we want VIF less than 5 and hence rebuilding the model*","7235020e":"#### Insights:\n- The number of cylinders used in most cars is `four`.\n- Number of `Gas` fueled cars are way more than `diesel` fueled cars.\n- `Sedan` is the most prefered car type.","058711e5":"### Dividing into X and Y sets for the model building","bc774591":"### RMSE Score","349fe4ab":"Now the VIFs and p-values both are within an acceptable range. So we can go ahead and make our predictions using model `lm_rfe10` and `lm_rfe8`.","3b24572c":"### Rescaling the Features \n\nFor Simple Linear Regression, scaling doesn't impact model. So it is extremely important to rescale the variables so that they have a comparable scale. If we don't have comparable scales, then some of the coefficients as obtained by fitting the regression model might be very large or very small as compared to the other coefficients.\nThere are two common ways of rescaling:\n\n1. Min-Max scaling \n2. Standardisation (mean-0, sigma-1) \n\nHere, we will use Standardisation Scaling.","9faf3b82":"After passing the arbitary selected columns by RFE we will manually evaluate each models p-value and VIF value.\nUnless we find the acceptable range for p-values and VIF we keep dropping the variables one at a time based on below criteria.\n- High p-value High VIF : Drop the variable\n- High p-value Low VIF or Low p-value High VIF : Drop the variable with high p-value first\n- Low p-value Low VIF : accept the variable","05be08d6":"#### Dummy Variables","d2f3e160":"#### Derived Metrices\n- Average Price","c00a02e8":"#### Insights\n- The cars with `fueltype` as `diesel` are comparatively expensive than the cars with `fueltype` as `gas`.\n- All the types of carbody is relatively cheaper as compared to `convertible` carbody.\n- The cars with `rear enginelocation` are way expensive than cars with `front enginelocation`.\n- The price of car is directly proportional to `no. of cylinders` in most cases.\n- Enginetype `ohcv` comes into higher price range cars.\n- `DoorNumber` isn't affecting the price much.\n- HigerEnd cars seems to have `rwd` drivewheel","1e230aac":"<a id=\"3\"><\/a> <br>\n## Step 3: Visualising the Data\n\n- Here we will identify if some predictors directly have a strong association with the outcome variable `price`","70913106":"![](https:\/\/wallpaper.wiki\/wp-content\/uploads\/2017\/04\/wallpaper.wiki-Full-HD-Wallpapers-1080p-Cars-PIC-WPC002339-1.jpg)","53f9d037":"#### Visualizing the distribution of car prices","12bc522b":"**The R2 score of Training set is 0.912 and Test set is 0.909 which is quite close.\nHence, We can say that our model is good enough to predict the Car prices using below predictor variables**\n- horsepower\n- carwidth\t\n- Cars_Category_TopNotch_Cars\n- carbody_hatchback\n- enginetype_dohcv","476009c7":"## Step 7: Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of it.","7ec7d799":"### Adding another variable\n\nThe R-squared value obtained is `0.797`. Since we have so many variables, we can clearly do better than this. So lets add another correlated variable, i.e. `enginesize`.","a4d34ec7":"### RFE\nLet's use Recursive feature elimination since we have too many independent variables","c469e50f":"<a id=\"1\"><\/a> <br>\n## Step 1 : Reading and Understanding the Data","5775ee18":"#### Model II Conclusions:\n- R-sqaured and Adjusted R-squared - 0.918 and 0.915 - 90% variance explained.\n- F-stats and Prob(F-stats) (overall model fit) - 215.9 and 4.70e-70(approx. 0.0) - Model fit is significant and explained 90%<br> variance is just not by chance.\n- p-values - p-values for all the coefficients seem to be less than the significance level of 0.05. - meaning that all the <br>predictors are statistically significant.","f346e5c7":"$ Carprice = -0.0925 +  0.3847  \\times  horsepower  + 0.3381  \\times  carwidth +  1.3179 \\times Carscategorytopnotchcars  - 0.1565 \\times carbodyhatchback  - 1.5033 \\times enginetypedohcv $","d6e48bf7":"- The plots seems to be right skewed, the prices of almost all cars looks like less than 18000.\n","bded4fc9":"### Adding another variable\n\nThe R-squared value obtained is `0.65`. Since we have so many variables, we can clearly do better than this. So let's go ahead and add the other highly correlated variable, i.e. `curbweight`.","57aa756c":"We need to do some basic cleansing activity in order to feed our model the correct data.","63bb1847":"### If this Kernel helped you in any way, some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated","9de527ce":"#### Relationship between `cylindernumber` vs `price` with hue `fueltype`","3deb67d6":"*Dropping `cylindernumber_five` beacuse its `p-value` is `0.104` and we want p-value less than 0.05 and hence rebuilding the model*","109cea68":"## Step 9: Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","80350e75":"*Dropping `carbody_wagon` beacuse its `p-value` is `0.315` and we want p-value less than 0.05 and hence rebuilding the model*","20b71819":"Let's see scatterplot for few correlated variables  vs `price`."}}