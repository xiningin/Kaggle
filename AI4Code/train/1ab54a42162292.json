{"cell_type":{"c9b89935":"code","0eb2a1d5":"code","72d3244d":"code","5a7835db":"code","ba3670d2":"code","ae3f0fe7":"code","6cec35bc":"code","2964782d":"code","cb013350":"code","1c598a1a":"code","d25621aa":"code","fbc94cc9":"code","c1d5dc21":"code","49863eee":"code","44f62375":"code","ca015f5d":"code","9aebe085":"code","6b090110":"code","8433fa54":"code","6ad7464d":"code","b6bfbbba":"code","c2790931":"code","1937866c":"code","04c9e61e":"code","a72f5216":"code","29e61370":"code","29828ff0":"code","e6514a37":"markdown","8affcca1":"markdown"},"source":{"c9b89935":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0eb2a1d5":"train = pd.read_csv('..\/input\/titanic\/train.csv')","72d3244d":"train.corr()","5a7835db":"train.describe","ba3670d2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'SibSp', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Sibsp\")","ae3f0fe7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Parch', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Parch\")","6cec35bc":"import matplotlib.pyplot as plt\nimport seaborn as sns\nsns.countplot(x = 'Embarked', hue = \"Survived\", data = train)\nplt.legend(loc = \"upper right\", title = \"Survived ~ Embarked\")\n","2964782d":"sns.distplot(train[train['Survived'] == 0].Fare, kde=False,rug=False)\nsns.distplot(train[train['Survived'] == 1].Fare,  kde=False,rug=False)","cb013350":"train.isnull().sum()","1c598a1a":"train.Age.median()","d25621aa":"train.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntrain[\"Age\"].fillna(train[\"Age\"].median(skipna=True), inplace=True)\ntrain[\"Embarked\"].fillna(train['Embarked'].value_counts().idxmax(), inplace=True)","fbc94cc9":"train['Alone']=np.where((train[\"SibSp\"]+train[\"Parch\"])>0, 0, 1)\ntrain.drop(['SibSp', 'Parch'], axis=1, inplace=True)","c1d5dc21":"train[['Pclass','Embarked','Sex']]","49863eee":"pd.get_dummies(train['Sex'])","44f62375":"training=pd.get_dummies(train, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntraining","ca015f5d":"training.dtypes","9aebe085":"from sklearn.preprocessing import StandardScaler\ntrain_standard = StandardScaler()\ntrain_copied = training.copy()\ntrain_standard.fit(train_copied[['Age','Fare']])\ntrain_std = pd.DataFrame(train_standard.transform(train_copied[['Age','Fare']]))\ntrain_std","6b090110":"training[['Age','Fare'] ] = train_std\ntraining","8433fa54":"from sklearn.linear_model import LogisticRegression\n\ncols = [\"Age\",\"Fare\",\"Alone\",\"Pclass_2\",\"Pclass_2\",\"Embarked_Q\",\"Embarked_S\",\"Sex_male\"] \nX =training[cols]\ny = training['Survived']\n# Build a logreg and compute the feature importances\nmodel = LogisticRegression()\n# create the RFE model and select 8 attributes\nmodel.fit(X,y)","6ad7464d":"from sklearn.metrics import accuracy_score\ntrain_predicted =model.predict(X)\naccuracy_score( train_predicted, y)","b6bfbbba":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.isnull().sum()","c2790931":"test.drop(['PassengerId','Name','Cabin','Ticket'], axis=1, inplace=True)\ntest[\"Age\"].fillna(28, inplace=True)\ntest[\"Embarked\"].fillna(test['Embarked'].value_counts().idxmax(), inplace=True)\ntest[\"Fare\"].fillna(train.Fare.median(), inplace=True)\ntest['Alone']=np.where((test[\"SibSp\"]+test[\"Parch\"])>0, 0, 1)\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntesting=pd.get_dummies(test, columns=[\"Pclass\",\"Embarked\",\"Sex\"], drop_first=True)\ntesting.dtypes","1937866c":"train_standard","04c9e61e":"test_copied = testing.copy()\ntest_std = train_standard.transform(test_copied[['Age','Fare']])\ntest_std\ntesting[['Age','Fare']] = test_std\ntesting","a72f5216":"X_test=testing[cols]\nX_test.dtypes\ntest_predicted = model.predict(X_test)","29e61370":"test_predicted","29828ff0":"sub = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsub['Survived'] = list(map(int, test_predicted))\nsub.to_csv('submission.csv', index=False)","e6514a37":"\uff03\uff03\u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\u3059\u308b","8affcca1":"##\u65b0\u3057\u3044\u7279\u5fb4\u306e\u8ffd\u52a0"}}