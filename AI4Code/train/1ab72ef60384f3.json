{"cell_type":{"24542526":"code","598cb068":"code","56307bbf":"code","e5786806":"code","8fd0608f":"code","97d09bd1":"code","0e4830a8":"code","76706731":"code","f1025994":"code","b28649b0":"code","b877da69":"code","bd6f4043":"code","dc2d774f":"code","2c7e6bd2":"markdown","5954fc39":"markdown","595d8b77":"markdown"},"source":{"24542526":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","598cb068":"df_pjm=pd.read_csv('\/kaggle\/input\/hourly-energy-consumption\/PJME_hourly.csv',index_col=[0],parse_dates=[0])\ndf_pjm.head()","56307bbf":"df_pjm.info()","e5786806":"print(df_pjm.isnull().sum())","8fd0608f":"data=df_pjm\nplt.figure(figsize=(16,8))\nsns.lineplot(data.index,'PJME_MW',data=data)","97d09bd1":"def create_feature(df,label=None):\n    df=df.copy()\n    df['date']=df.index\n    df['hour']=df['date'].dt.hour\n    df['dayofweek']=df['date'].dt.dayofweek\n    df['quarter']=df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n        \n    if label:\n        y=df[label]\n        return X,y\n    return X\n\nX,y=create_feature(data,label='PJME_MW')\n\nX.tail()","0e4830a8":"trainData=pd.concat([X,y],axis=1)\ntrainData.head()","76706731":"sns.pairplot(trainData,hue='hour',x_vars=['hour','dayofweek','year','month'],y_vars='PJME_MW')","f1025994":"split_date = '01-Jan-2015'\npjme_train = data.loc[data.index <= split_date].copy()\npjme_test=data.loc[data.index>split_date].copy()\n\npjme_train.reset_index().rename(columns={'Datetime':'ds','PJME_MW':'y'}).head()\n#df['ds']=pjme_train['Datetime'].copy()","b28649b0":"from fbprophet import Prophet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nmodel=Prophet()\nmodel.fit(pjme_train.reset_index().rename(columns={'Datetime':'ds','PJME_MW':'y'}))","b877da69":"Prediction=model.predict(pjme_test.reset_index().rename(columns={'Datetime':'ds','PJME_MW':'y'}))","bd6f4043":"model.plot(Prediction)","dc2d774f":"mean_absolute_error(pjme_test['PJME_MW'],Prediction['yhat'])","2c7e6bd2":"Prediction.head()","5954fc39":"**Prophet Model**\n\nThis model is used for Timeseries data and univariate datasets. Based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data.","595d8b77":"Reference: https:\/\/www.kaggle.com\/robikscube\/time-series-forecasting-with-prophet"}}