{"cell_type":{"0bd1be66":"code","31e20ed5":"code","a735765f":"code","56d41aa1":"code","b2c62574":"code","c52ae4be":"code","fcd4b5af":"code","815c3128":"code","5a7017f5":"code","f0327fea":"code","65c70045":"code","0a590f8b":"code","404861d8":"code","a2bb7688":"code","bf003ee6":"code","9e24c8e3":"code","be67bb06":"code","24f53b83":"code","049d2098":"code","14e1bf11":"code","08ec2633":"code","d0ba23c5":"code","f1c1b7aa":"code","a38d3c88":"code","e7c1515d":"code","904793db":"code","3c7f3bf3":"code","60e26f77":"code","129ce29e":"code","fb09d144":"code","8d96bb1f":"code","6e41dd6a":"code","d96184cb":"code","7c2bfa03":"code","50467eff":"code","8d459ae3":"code","1f4cf2a7":"code","3cb0cf4e":"code","5f45d2d4":"code","c8f4adbd":"code","7cff5dc4":"code","4723e03b":"code","a6c49cf3":"code","15472cf6":"code","912e1ae8":"code","67a63ad8":"code","0d953638":"code","84697b03":"code","52623b30":"code","96976267":"code","8d8bd712":"code","5e694ff4":"code","c39e6a2f":"code","5af24831":"code","a978be58":"code","5180eb5a":"code","de9d020c":"code","08c7582e":"code","2664adbf":"code","70d0d1f6":"code","6d586fd6":"code","3369c6f9":"code","8506cebb":"code","e888778f":"code","c8cc2b09":"code","3bb0c9a0":"code","4b960a69":"code","99dae1de":"code","3169832c":"code","e1339c0c":"code","03f6bd1f":"code","5ddf4a67":"code","19c53460":"code","9cea85f4":"code","63d1084b":"code","12cb1d39":"code","6f449e2b":"code","42601c5b":"code","54d45691":"code","60acebd4":"code","152ca508":"code","13b19b3e":"code","233297b4":"code","2a298799":"code","5ba7608e":"code","604a4197":"code","12a9aaf7":"code","94877924":"code","eccea5bf":"code","83ccf708":"code","46e57a08":"code","5ed00d53":"code","025b613d":"code","9b3a6314":"code","44d5f938":"code","51c09ef7":"code","87670494":"code","6027d19e":"code","8c3d70b4":"code","f4dddaf2":"code","53075b3d":"code","851ab70b":"code","16209fdd":"code","8b425e4e":"code","a0ff7cb1":"code","ad77b1b2":"code","03843931":"code","c10006e0":"code","7df6d05b":"code","8213c169":"code","ffb28d24":"code","20a40031":"code","d38eb497":"code","7252d4e0":"code","f6caf97a":"code","27940050":"code","e988c97d":"code","637f67ac":"code","985768b0":"code","472b34d8":"markdown","202da7b4":"markdown","c531d8ed":"markdown","694cecf2":"markdown","90738ed4":"markdown","72d1133c":"markdown","23a9c5ff":"markdown","bc5a69d0":"markdown","7f75c4a7":"markdown","fac978f9":"markdown","6e494192":"markdown","21121347":"markdown","49cd849e":"markdown","fd8047a2":"markdown","fc637034":"markdown","7f67fc3e":"markdown","0e431752":"markdown","6b7439d8":"markdown","0b6192b7":"markdown","509fb25a":"markdown","c9297699":"markdown","fbe26d88":"markdown","44c2b8e9":"markdown","7f420596":"markdown","5d5e6147":"markdown","b9b9af16":"markdown","f030557b":"markdown","7c4780fe":"markdown","62601c4a":"markdown","050997aa":"markdown","056ced28":"markdown","54fb02c1":"markdown","658e7da3":"markdown","56c9b3ea":"markdown","5e05b6f1":"markdown","435d0a3f":"markdown","cdc36fa4":"markdown","c2d89d62":"markdown","1fa954cb":"markdown","423f663f":"markdown","1fc61c2e":"markdown","3a9cede3":"markdown","946d702f":"markdown","314878fc":"markdown","3eaa3c67":"markdown","e814cc2f":"markdown","3d27ff6e":"markdown","916a9c7c":"markdown","c4536af8":"markdown","bd66ad75":"markdown","03f14342":"markdown","c671aeee":"markdown","8be65f03":"markdown","c9414cc1":"markdown","ca22a64e":"markdown","967340e7":"markdown","82bfe79a":"markdown","6f851aba":"markdown","39d4014c":"markdown","865f838f":"markdown","6a47d357":"markdown","1322896f":"markdown","51fe4660":"markdown","82684deb":"markdown","4a0f341d":"markdown","7dd1e0c9":"markdown","401a68a6":"markdown","0b3bbc38":"markdown","04c2446a":"markdown","f4a9c763":"markdown","96af93e7":"markdown","f5bae9cb":"markdown","14552c8d":"markdown","ffbb30da":"markdown","a934f5a9":"markdown","b9eb7587":"markdown","daddc95b":"markdown","4f3c5e97":"markdown","a7429bbf":"markdown","68b0b578":"markdown","547536e5":"markdown","1a361760":"markdown","83efad13":"markdown","8b967c01":"markdown","d3b00b53":"markdown","c93ba7ad":"markdown","5567a257":"markdown"},"source":{"0bd1be66":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn import model_selection\nfrom sklearn.neighbors import LocalOutlierFactor, KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, GradientBoostingRegressor\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale, StandardScaler\nfrom sklearn.cross_decomposition import PLSRegression, PLSSVD\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor, ExtraTreeRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31e20ed5":"maindata = pd.read_csv(\"..\/input\/hitters\/hitters.csv\")\nmaindatac = maindata.copy()","a735765f":"maindata.info()","56d41aa1":"maindata.head()","b2c62574":"maindata.describe().T","c52ae4be":"maindata.corr()","fcd4b5af":"plt.subplots(figsize = (20,20))\nsns.heatmap(maindata.corr(), annot = True,  fmt = \".1f\");","815c3128":"maindata.isnull().sum()","5a7017f5":"maindata.groupby(\"League\")[\"Salary\"].mean()","f0327fea":"maindatac[\"Salary\"].fillna(maindatac.groupby(\"League\")[\"Salary\"].transform(\"mean\"), inplace = True)","65c70045":"maindatac.isnull().sum()","0a590f8b":"maindata.boxplot(column=\"Salary\", by=\"League\");","404861d8":"outlier = maindatac[\"Salary\"]\n\nQ1 = outlier.quantile(0.25)\nQ3 = outlier.quantile(0.75)\nIQR = Q3 - Q1","a2bb7688":"sns.boxplot(x = outlier)","bf003ee6":"low_limit = Q1 - 1.5*IQR\nhigh_limit = Q3 + 1.5*IQR","9e24c8e3":"(outlier < low_limit) | (outlier > high_limit)","be67bb06":"outlier_tf = (outlier < low_limit) | (outlier > high_limit)\noutlier_tf","24f53b83":"outlier[outlier_tf] = high_limit\noutlier[outlier_tf]  ","049d2098":"sns.boxplot(x = outlier)","14e1bf11":"sns.pairplot(maindatac, kind = \"reg\")","08ec2633":"dms = pd.get_dummies(maindatac[[\"League\", \"Division\", \"NewLeague\"]])\nX_ = maindatac.drop([\"Salary\",\"League\", \"Division\", \"NewLeague\"], axis=1).astype(\"float64\")\ny = maindatac[\"Salary\"]\nX = pd.concat([X_, dms[[\"League_N\", \"Division_W\", \"NewLeague_N\"]]], axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)\n\nprint (\"X_train\", X_train.shape)\nprint (\"X_test\", X_test.shape)\nprint (\"y_train\", y_train.shape)\nprint (\"y_test\", y_test.shape)","d0ba23c5":"X_basit = maindatac[\"CHits\"]\nX_basit = sm.add_constant(X_basit)\nX_basit\n\n# sm k\u00fct\u00fcphanesinde verilere otomatik bir sabit atanmaz. O y\u00fczden  \"X = sm.add_constant(X)\" yaparak d\u0131\u015far\u0131dan sabit (1) atamas\u0131 ger\u00e7ekle\u015ftiriyoruz. Ama smf k\u00fct\u00fcphanesi otomatik sabit atad\u0131\u011f\u0131ndan bu i\u015fleme gerek kalmaz","f1c1b7aa":"y_basit = maindatac[\"Salary\"]\ny_basit[0:5]","a38d3c88":"lm = sm.OLS(y_basit,X_basit)\nmodel = lm.fit()\nmodel.summary()","e7c1515d":"# Model Parametreleri\nmodel.params","904793db":"#Modelin G\u00fcven Aral\u0131\u011f\u0131\nmodel.conf_int()","3c7f3bf3":"print ( \"f_pvalue: \",\"%.4f\" % model.f_pvalue)\nprint ( \"f_value: \", \"%.2f\" % model.fvalue)\nprint (\"t_value: \", \"%.2f\" % model.tvalues[0:1])\nprint ( \"adj. r2: \", \"%.2f\" % model.rsquared_adj)","60e26f77":"g_t = pd.DataFrame( {\"gercek_y\": y_basit[0:5],\n                        \n                    \"tahmini_y\": model.fittedvalues[0:5]})\ng_t","129ce29e":"print ( \"Salary = \" + str(\"%.2f\" % model.params[0]) + \" +  CHits*\" + str(\"%.2f\" % model.params[1]) )","fb09d144":"# \"Salary\" ve \"Hits\" aras\u0131ndaki ili\u015fki\n\nfig = sns.regplot( maindatac[\"CHits\"], maindatac[\"Salary\"], scatter_kws={\"color\": \"r\",\"s\":9} )\nfig.set_title( \"Model Denklemi: Salary = 320.17 +  CHits*0.27\")\nfig.set_ylabel(\"Salary\")\nfig.set_xlabel(\"CHits\")\n\n\nplt.ylim(bottom = 0)\nplt.show()","8d96bb1f":"X_basit = maindatac[[\"CHits\"]]\n\n\nreg = LinearRegression()\nmodel = reg.fit(X_basit,y_basit)\nmodel.predict([[2000]])","6e41dd6a":"# statsmodels.api kullanarak ortalamalar\n\nlm = sm.OLS(y_basit,X_basit)\nmodel = lm.fit()\n\n\nmse = mean_squared_error(y_basit, model.fittedvalues)\nrmse = np.sqrt(mse)\n\nprint(\"Hata Karelerinin Ortalamas\u0131: \", mse)\nprint(\"Hata Karelerinin Ortalamas\u0131n\u0131n Karek\u00f6k\u00fc: \", rmse)","d96184cb":"# statsmodels.formula.api kullanarak ortalamalar\n\nlm = smf.ols(\"Salary ~ CHits\", maindatac)\nmodel = lm.fit()\n\n\nmse = mean_squared_error(y_basit, model.fittedvalues)\nrmse = np.sqrt(mse)\n\nprint(\"Hata Karelerinin Ortalamas\u0131: \", mse)\nprint(\"Hata Karelerinin Ortalamas\u0131n\u0131n Karek\u00f6k\u00fc: \", rmse)\n","7c2bfa03":"k_t = pd.DataFrame( {\"gercek_y\": y_basit[0:10],\n                        \n                    \"tahmini_y\": reg.predict(X_basit)[0:10]})\nk_t","50467eff":"k_t[\"hata\"] = k_t[\"gercek_y\"] - k_t[\"tahmini_y\"]\nk_t","8d459ae3":"k_t[\"hata_kare\"] = k_t[\"hata\"]**2\nk_t","1f4cf2a7":"print ( \"Hata Karelerinin Toplam\u0131: \", np.sum(k_t[\"hata_kare\"]) )\nprint ( \"Hata Karelerinin Ortalamas\u0131: \", np.mean(k_t[\"hata_kare\"])),\nprint ( \"Hata Karelerinin Ortalamas\u0131n\u0131n Karek\u00f6k\u00fc: \", np.sqrt(np.mean(k_t[\"hata_kare\"])))\n","3cb0cf4e":"reg = LinearRegression()\nmodel = reg.fit(X_train, y_train)\nprint (\"Sabit Katsay\u0131: \", model.intercept_)\nprint(\"De\u011fi\u015fkenlerin Katsay\u0131lar\u0131: \", model.coef_)","5f45d2d4":"yeni_katsayilar = [[10], [362], [361], [362], [360],[301],[2001],[21],[355],[354],[354],[349],[299],[1],[1],[12],[156],[11],[11]]\nyeni_katsayilar = pd.DataFrame(yeni_katsayilar).T\nmodel.predict(yeni_katsayilar)","c8f4adbd":"y_pred = model.predict(X_train)\ny_pred_t = model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \",np.sqrt(mean_squared_error(y_test, y_pred_t)))\n","7cff5dc4":"model.score(X_train, y_train)","4723e03b":"r2_score(y_train, y_pred)","a6c49cf3":"tuned = RandomForestRegressor(max_depth = 1,\n                             max_features = 1,\n                             n_estimators = 400)\ntuned.fit(X_train, y_train)\nImportance = pd.DataFrame({\"Importance\": tuned.feature_importances_ * 100},\n                        index = X_train.columns )\nImportance.sort_values(by = \"Importance\", \n                       axis = 0, \n                       ascending = True).plot(kind =\"barh\", color = \"r\")\n\nplt.xlabel(\"De\u011fi\u015fken \u00d6nem D\u00fczeyleri\");","15472cf6":"pca = PCA()\nlm = LinearRegression()\nX_reduced_train = pca.fit_transform(scale(X_train))\npcr_model = lm.fit(X_reduced_train, y_train)\nprint ( \"Sabit Katsay\u0131: \", pcr_model.intercept_)\nprint (\"Katsay\u0131lar\", pcr_model.coef_)","912e1ae8":"yeni_katsayilar = [[10], [10], [10], [10], [10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10],[10]]\nyeni_katsayilar = pd.DataFrame(yeni_katsayilar).T\nmodel.predict(yeni_katsayilar)","67a63ad8":"X_reduced_test = pca.fit_transform(scale(X_test))\n\ny_pred = pcr_model.predict(X_reduced_train)\ny_pred_t = pcr_model.predict(X_reduced_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131\", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131\", np.sqrt(mean_squared_error(y_test, y_pred_t)))","0d953638":"model.score(X_train, y_train)","84697b03":"r2_score(y_train, y_pred)","52623b30":"cv_10 = model_selection.KFold( n_splits=10,\n                               shuffle=True,\n                               random_state=1 )\nRMSE = []","96976267":"for i in np.arange(1, X_reduced_train.shape[1]+1):\n    score = np.sqrt( -1 * model_selection.cross_val_score( lm,\n                                                           X_reduced_train[:,:i],\n                                                           y_train.ravel(),\n                                                           cv= cv_10,\n                                                           scoring=\"neg_mean_squared_error\" ).mean())\n    RMSE.append(score)","8d8bd712":"plt.plot(RMSE, \"-v\")\nplt.xlabel(\"Bile\u015fen Say\u0131s\u0131\")\nplt.ylabel(\"RMSE\")\nplt.title(\"Maa\u015f Tahmin Modeli \u0130\u00e7in PCR Model Do\u011frulama\");","5e694ff4":"pls_model = PLSRegression().fit(X_train, y_train)\n\nprint(\"De\u011fi\u015fken Katsay\u0131lar: \", pls_model.coef_)","c39e6a2f":"y_pred = pls_model.predict(X_train)\ny_pred_t = pls_model.predict(X_test)\n\nprint (\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint (\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","5af24831":"#R2 De\u011feri\nr2_score(y_train, y_pred)","a978be58":"model.score(X_train, y_train)","5180eb5a":"cv_10 = model_selection.KFold( n_splits=10,\n                               shuffle=True,\n                               random_state=1 )\nRMSE = []\n\nfor i in np.arange(1, X_train.shape[1]+1):\n    pls = PLSRegression(n_components=i)\n    score = np.sqrt( -1 * cross_val_score( pls,\n                                            X_train,\n                                            y_train,\n                                            cv= cv_10,\n                                            scoring=\"neg_mean_squared_error\" ).mean())\n    RMSE.append(score)\n\nplt.plot(RMSE, \"-v\")\nplt.xlabel(\"Bile\u015fen Say\u0131s\u0131\")\nplt.ylabel(\"RMSE\")\nplt.title(\"Maa\u015f Tahmin Modeli \u0130\u00e7in PLS Model Do\u011frulama\");","de9d020c":"ridge_model = Ridge(alpha = 0.1).fit(X_train, y_train)\nprint(\"Sabit Katsay\u0131 :\", ridge_model.intercept_)\nprint(\"De\u011fi\u015fken Katsay\u0131lar\u0131 :\", ridge_model.coef_)","08c7582e":"y_pred = ridge_model.predict(X_train)\ny_pred_t = ridge_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train,y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test,y_pred_t)))","2664adbf":"ridge_model.score(X_train, y_train)","70d0d1f6":"r2_score(y_train, y_pred)","6d586fd6":"ridge = Ridge()\nlambdalar = 10**np.linspace(10,-2,100)*0.5 \nkatsayilar = []\n\nfor i in lambdalar:\n    ridge.set_params(alpha=i)\n    ridge.fit(X_train, y_train)\n    katsayilar.append(ridge.coef_)\n    \nax = plt.gca()\nax.plot(lambdalar*2, katsayilar)\nax.set_xscale('log')\nplt.axis('tight')\nplt.xlabel('alpha')\nplt.ylabel('weights');","3369c6f9":"lasso_model = Lasso().fit(X_train, y_train)\n\nprint(\"Sabit Katsay\u0131: \", lasso_model.intercept_)\nprint(\"De\u011fi\u015fken Katsay\u0131lar: \", lasso_model.coef_)","8506cebb":"y_pred = lasso_model.predict(X_train)\ny_pred_t = lasso_model.predict(X_test)\n\nprint(\"E\u011ftim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","e888778f":"lasso = Lasso()\nlambdalar = 10**np.linspace(10,-2,100)*0.5 \nkatsayilar = []\n\nfor i in lambdalar:\n    lasso.set_params(alpha=i)\n    lasso.fit(X_train, y_train)\n    katsayilar.append(lasso.coef_)\n    \nax = plt.gca()\nax.plot(lambdalar*2, katsayilar)\nax.set_xscale('log')\nplt.axis('tight')\nplt.xlabel('alpha')\nplt.ylabel('weights');","c8cc2b09":"elas_model = ElasticNet().fit(X_train, y_train)\n\nprint(\"Sabit Katsay\u0131lar: \", elas_model.intercept_)\nprint(\"De\u011fi\u015fken Katsay\u0131lar: \", elas_model.coef_)","3bb0c9a0":"y_pred = elas_model.predict(X_train)\ny_pred_t = elas_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","4b960a69":"elas_model.score(X_train, y_train)","99dae1de":"r2_score(y_train, y_pred)","3169832c":"elastic = ElasticNet()\nlambdalar = 10**np.linspace(10,-2,100)*0.5 \nkatsayilar = []\n\nfor i in lambdalar:\n    elastic.set_params(alpha=i)\n    elastic.fit(X_train, y_train)\n    katsayilar.append(elastic.coef_)\n    \nax = plt.gca()\nax.plot(lambdalar*2, katsayilar)\nax.set_xscale('log')\nplt.axis('tight')\nplt.xlabel('alpha')\nplt.ylabel('weights');","e1339c0c":"knn_model = KNeighborsRegressor().fit(X_train, y_train)\n\nprint(\"En Yak\u0131n Kom\u015fu Say\u0131s\u0131: \", knn_model.n_neighbors)","03f6bd1f":"y_pred = knn_model.predict(X_train)\ny_pred_t = knn_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","5ddf4a67":"knn = KNeighborsRegressor()\nknn_params = {\"n_neighbors\": np.arange(1,50,1)}\nknn_cv_model = GridSearchCV(knn, knn_params, cv = 10)\nknn_cv_model.fit(X_train, y_train)","19c53460":"knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_[\"n_neighbors\"])\nknn_tuned.fit(X_train, y_train)\n\n\nnp.sqrt(mean_squared_error(y_test, knn_tuned.predict(X_test)))\n","9cea85f4":"X_train_svr = pd.DataFrame(X_train[\"Hits\"])\nX_test_svr = pd.DataFrame(X_test[\"Hits\"])","63d1084b":"svr_model = SVR(\"linear\").fit(X_train_svr, y_train)\n\nprint(\"Sabit Katsay\u0131: \", svr_model.intercept_)\nprint(\"De\u011fi\u015fken Katsay\u0131lar: \", svr_model.coef_)\n","12cb1d39":"y_pred = svr_model.predict(X_train_svr)\ny_pred_t = svr_model.predict(X_test_svr)\n \nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","6f449e2b":"svr_params = {\"C\": np.arange(0.1,1,0.1)}\nsvr_cv_model = GridSearchCV(svr_model, svr_params, cv = 10, n_jobs=-1)\n\nsvr_cv_model.fit(X_train_svr, y_train)","42601c5b":"svr_tuned = SVR(\"linear\",\n               C = pd.Series(svr_cv_model.best_params_))\nsvr_tuned.fit(X_train_svr, y_train)\n\nnp.sqrt(mean_squared_error(y_test, svr_tuned.predict(X_test_svr)))","54d45691":"scaler = StandardScaler().fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","60acebd4":"svr_model_d = SVR(\"rbf\").fit(X_train_scaled, y_train)\n\nprint(\"Sabit Katsay\u0131: \", svr_model_d.intercept_)\n","152ca508":"y_pred = svr_model_d.predict(X_train)\ny_pred_t = svr_model_d.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","13b19b3e":"svr_params = {\"C\": np.arange(1,20,1)}\nsvr_cv_model_d = GridSearchCV(svr_model_d, svr_params, cv = 10, n_jobs=-1)\nsvr_cv_model_d.fit(X_train_scaled, y_train)","233297b4":"svr_tuned = SVR(\"rbf\",\n               C = pd.Series(svr_cv_model_d.best_params_))\nsvr_tuned.fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, svr_tuned.predict(X_test)))","2a298799":"mlp_model = MLPRegressor(hidden_layer_sizes=(100,20)).fit(X_train_scaled, y_train)\n","5ba7608e":"y_pred = mlp_model.predict(X_train)\ny_pred_t = mlp_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","604a4197":"mlp_params = {\"alpha\": [10,20,30,40,50],\n              \"hidden_layer_sizes\": (20,20),\n              \"activation\": [\"relu\",\"logistic\"]}\nmlp_cv_model = GridSearchCV(mlp_model, mlp_params, cv = 10, n_jobs=-1)\nmlp_cv_model.fit(X_train_scaled, y_train)","12a9aaf7":"mlp_tuned = MLPRegressor(alpha = mlp_cv_model.best_params_[\"alpha\"],\n                        hidden_layer_sizes = mlp_cv_model.best_params_[\"hidden_layer_sizes\"],\n                        activation = mlp_cv_model.best_params_[\"activation\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, mlp_tuned.predict(X_test)))","94877924":"X_train = pd.DataFrame(X_train[\"Hits\"])\nX_test = pd.DataFrame(X_test[\"Hits\"])\ncart_model = DecisionTreeRegressor(min_samples_split = 2).fit(X_train, y_train)\n","eccea5bf":"y_pred = cart_model.predict(X_train)\ny_pred_t = cart_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","83ccf708":"cart_params = {\"min_samples_split\": range(2,200),\n               \"max_leaf_nodes\": range(2,10)}\ncart_cv_model = GridSearchCV(cart_model, cart_params, cv = 10, n_jobs=-1)\ncart_cv_model.fit(X_train, y_train)","46e57a08":"cart_tuned = DecisionTreeRegressor(max_leaf_nodes= cart_cv_model.best_params_[\"max_leaf_nodes\"],\n                                   min_samples_split = cart_cv_model.best_params_[\"min_samples_split\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, cart_tuned.predict(X_test)))","5ed00d53":"X_grid = np.arange(min(np.array(X_train)), max(np.array(X_train)), 2)\nX_grid = X_grid.reshape((len(X_grid),1))\n\nplt.scatter(X_train, y_train, color=\"red\")\nplt.plot(X_grid, cart_model.predict(X_grid), color =\"blue\")\nplt.title(\"CART A\u011eA\u00c7 MODEL\u0130\")\nplt.xlabel(\"Di\u011fer Fakt\u00f6rler\")\nplt.ylabel(\"Maa\u015f\");","025b613d":"bagged_model = BaggingRegressor(bootstrap_features=True).fit(X_train, y_train)\n","9b3a6314":"y_pred = bagged_model.predict(X_train)\ny_pred_t = bagged_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","44d5f938":"bagged_params = {\"n_estimators\": range(2,20)}\nbagged_cv_model = GridSearchCV(bagged_model, bagged_params, cv = 10, n_jobs=-1)\nbagged_cv_model.fit(X_train, y_train)","51c09ef7":"bagged_tuned = BaggingRegressor(n_estimators = bagged_cv_model.best_params_[\"n_estimators\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, bagged_tuned.predict(X_test)))","87670494":"X_grid = np.arange(min(np.array(X_train)), max(np.array(X_train)), 1)\nX_grid = X_grid.reshape((len(X_grid),1))\n\nplt.scatter(X_train, y_train, color=\"red\")\nplt.plot(X_grid, bagged_model.predict(X_grid), color =\"blue\")\nplt.title(\"BAGGED A\u011eA\u00c7 MODEL\u0130\")\nplt.xlabel(\"Di\u011fer Fakt\u00f6rler\")\nplt.ylabel(\"Maa\u015f\");","6027d19e":"randomf_model = RandomForestRegressor(random_state=42).fit(X_train, y_train)\n","8c3d70b4":"y_pred = randomf_model.predict(X_train)\ny_pred_t = randomf_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","f4dddaf2":"randomf_params = {\"max_depth\": list(range(1,20)) ,\n                  \"max_features\": [1,2,3,4,5,6,7,8],\n                  \"n_estimators\": [100,200,300,400,500]}\nrandomf_cv_model = GridSearchCV(randomf_model, randomf_params, cv = 10, n_jobs=-1)\nrandomf_cv_model.fit(X_train, y_train)","53075b3d":"randomf_cv_model.best_params_[\"max_depth\"]","851ab70b":"randomf_tuned = RandomForestRegressor(n_estimators = randomf_cv_model.best_params_[\"n_estimators\"],\n                                      max_depth = randomf_cv_model.best_params_[\"max_depth\"],\n                                      max_features = randomf_cv_model.best_params_[\"max_features\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, randomf_tuned.predict(X_test)))","16209fdd":"X_grid = np.arange(min(np.array(X_train)), max(np.array(X_train)), 1)\nX_grid = X_grid.reshape((len(X_grid),1))\n\nplt.scatter(X_train, y_train, color=\"red\")\nplt.plot(X_grid, randomf_model.predict(X_grid), color =\"blue\")\nplt.title(\"RANDOM FORESTS MODEL\u0130\")\nplt.xlabel(\"Di\u011fer Fakt\u00f6rler\")\nplt.ylabel(\"Maa\u015f\");","8b425e4e":"gradient_model = GradientBoostingRegressor().fit(X_train, y_train)","a0ff7cb1":"y_pred = gradient_model.predict(X_train)\ny_pred_t = gradient_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","ad77b1b2":"gradient_params = {\"max_depth\": list(range(1,10)) ,\n                   \"n_estimators\": [100,200],\n                   \"learning_rate\": [0.1,0.2,0.3,0.4,0.5],\n                   \"subsample\": [0.5,1,2]}\ngradient_cv_model = GridSearchCV(gradient_model, gradient_params, cv = 10, n_jobs=-1)\ngradient_cv_model.fit(X_train, y_train)","03843931":"gradient_tuned = GradientBoostingRegressor(n_estimators = gradient_cv_model.best_params_[\"n_estimators\"],\n                                           max_depth = gradient_cv_model.best_params_[\"max_depth\"],\n                                           learning_rate = gradient_cv_model.best_params_[\"learning_rate\"],\n                                           subsample = gradient_cv_model.best_params_[\"subsample\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, gradient_tuned.predict(X_test)))","c10006e0":"xgb_model = XGBRegressor().fit(X_train, y_train)","7df6d05b":"y_pred = xgb_model.predict(X_train)\ny_pred_t = xgb_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","8213c169":"xgb = XGBRegressor()\nxgb_params = {\"colsample_bytree\": [0.5,1],\n              \"n_estimators\": [100,200,300],\n              \"learning_rate\": [0.1,0.3,0.5],\n              \"max_depth\": [2,4,6]}\nxgb_cv_model = GridSearchCV(xgb, param_grid=xgb_params, cv = 10, verbose =2)\nxgb_cv_model = xgb_cv_model.fit(X_train, y_train)","ffb28d24":"xgb_tuned = XGBRegressor(n_estimators = xgb_cv_model.best_params_[\"n_estimators\"],\n                                        max_depth = xgb_cv_model.best_params_[\"max_depth\"],\n                                        learning_rate = xgb_cv_model.best_params_[\"learning_rate\"],\n                                        colsample_bytree = xgb_cv_model.best_params_[\"colsample_bytree\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, xgb_tuned.predict(X_test)))","20a40031":"lgbm_model = LGBMRegressor().fit(X_train, y_train)","d38eb497":"y_pred = lgbm_model.predict(X_train)\ny_pred_t = lgbm_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","7252d4e0":"lgbm = LGBMRegressor()\nlgbm_params = {\"colsample_bytree\": [0.3,0.5,0.7,1],\n              \"n_estimators\": [100,200,300,400,500],\n              \"learning_rate\": [0.1,0.2,0.3,0.4,0.5],\n              \"max_depth\": [2,4,6]}\nlgbm_cv_model = GridSearchCV(lgbm, lgbm_params, cv = 10, n_jobs=-1, verbose =2 )\nlgbm_cv_model.fit(X_train, y_train)","f6caf97a":"lgbm_tuned = XGBRegressor(n_estimators = lgbm_cv_model.best_params_[\"n_estimators\"],\n                                        max_depth = lgbm_cv_model.best_params_[\"max_depth\"],\n                                        learning_rate = lgbm_cv_model.best_params_[\"learning_rate\"],\n                                        colsample_bytree = lgbm_cv_model.best_params_[\"colsample_bytree\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, lgbm_tuned.predict(X_test)))","27940050":"cat_model = CatBoostRegressor().fit(X_train, y_train);","e988c97d":"y_pred = cat_model.predict(X_train)\ny_pred_t = cat_model.predict(X_test)\n\nprint(\"E\u011fitim Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_train, y_pred)))\nprint(\"Test Seti Hata Katsay\u0131s\u0131: \", np.sqrt(mean_squared_error(y_test, y_pred_t)))","637f67ac":"cat = CatBoostRegressor()\ncat_params = {\"iterations\": [100,150,200,250,300],\n              \"learning_rate\": [0.1,0.2,0.3,0.4,0.5],\n              \"depth\": [2,4,6]}\ncat_cv_model = GridSearchCV(cat, cat_params, cv = 10, n_jobs=-1, verbose = 3).fit(X_train, y_train)\n","985768b0":"cat_tuned = XGBRegressor(iterations = cat_cv_model.best_params_[\"iterations\"],\n                         learning_rate = cat_cv_model.best_params_[\"learning_rate\"],\n                         depth = cat_cv_model.best_params_[\"depth\"]).fit(X_train, y_train)\n\nnp.sqrt(mean_squared_error(y_test, cat_tuned.predict(X_test)))","472b34d8":"\n#### Hata Kareleri","202da7b4":"#### Tahmin","c531d8ed":"#### Modelin Olu\u015fturulmas\u0131","694cecf2":"<a id='5.10'><\/a>\n### 5.10) Light GBM Modeli","90738ed4":"#### Grafik","72d1133c":"#### Grafik","23a9c5ff":"#### > **YORUM:**  *X ve y de\u011ferleriyle beraber E\u011fitim ve Test setlerinin olu\u015fturduk*<br> *X: Ba\u011f\u0131ms\u0131z De\u011fer, -t\u00fcm de\u011fi\u015fkenler-* <br> *y: Ba\u011f\u0131ml\u0131 De\u011fer -\"Salary\" de\u011fi\u015fkeni*","bc5a69d0":"#### Grafik","7f75c4a7":"#### Tahmin","fac978f9":"#### Tahmin","6e494192":"## Ayk\u0131r\u0131 De\u011ferlerin Bask\u0131lanmas\u0131","21121347":"#### Modelin Olu\u015fturulmas\u0131","49cd849e":"#### Modelin Do\u011frulu\u011fu","fd8047a2":"#### Modelin Olu\u015fturulmas\u0131","fc637034":"<a id='3'><\/a>\n## 3.Bo\u015f De\u011ferlerin Bulunmas\u0131 ve Doldurulmas\u0131","7f67fc3e":"#### Model Do\u011frulama","0e431752":"#### Modelin Olu\u015fturulmas\u0131","6b7439d8":"<a id ='5.6'><\/a>\n### 5.6) Bagged Trees Regresyon Modeli","0b6192b7":"#### Tahmin","509fb25a":"#### Modelin Olu\u015fturulmas\u0131","c9297699":"> **Basit Do\u011frusal Regresyonun form\u00fcl\u00fc :**  **Salary  = 320.17 +  CHits*0.27**","fbe26d88":"<a id = '4.2'><\/a>\n### 4.2) \u00c7oklu Do\u011frusal Regresyon","44c2b8e9":"#### Tahmin","7f420596":"#### Model Do\u011frulama","5d5e6147":"#### Model Olu\u015fturma","b9b9af16":"<a id='4.6'><\/a>\n### 4.6) Lasso Model","f030557b":"#### Grafik","7c4780fe":"# Index <br>\n\n 1) [Verinin Y\u00fcklenmesi ve Veriye \u00d6n Bak\u0131\u015f](#1) <br>\n 2) [De\u011fi\u015fkenler Aras\u0131ndaki \u0130li\u015fki](#2) <br>\n 3) [Bo\u015f De\u011ferlerin Bulunmas\u0131 ve Doldurulmas\u0131, Ayk\u0131r\u0131 De\u011ferlerin Bask\u0131lanmas\u0131](#3) <br>\n 4) [Analiz](#4) <br>\n &emsp; A) [Do\u011frusal Modeller](#4.0)<br>\n &emsp; 4.1) [Basit Do\u011frusal Regresyon Modeli](#4.1) <br>\n &emsp; 4.2) [\u00c7oklu Do\u011fr\u0131usal Regresyon Modeli](#4.2) <br>\n &emsp; 4.3) [PCR Modeli](#4.3) <br>\n &emsp; 4.4) [PLS Modeli](#4.4) <br>\n &emsp; 4.5) [Ridge Regresyon Modeli](#4.5) <br>\n &emsp; 4.6) [Lasso Modeli](#4.6) <br>\n &emsp; 4.7) [ElasticNet Modeli](#4.7) <br><br>\n &emsp; B)   [Do\u011frusal Olmayan Modeller](#5.0)<br>\n &emsp; 5.1) [KNN Modeli](#5.1)<br>\n &emsp; 5.2) [SVR (Destek Vekt\u00f6r Regresyonu) Modeli](#5.2)<br>\n &emsp; 5.3) [Do\u011frusal Olmayan SVR Modeli](#5.3)<br> \n &emsp; 5.4) [\u00c7ok Katmanl\u0131 Alg\u0131lay\u0131c\u0131 Modeli](#5.4)<br> \n &emsp; 5.5) [CART Modeli](#5.5)<br>\n &emsp; 5.6) [Bagged Trees Regresyon Modeli](#5.6)<br>\n &emsp; 5.7) [Random Forests Modeli](#5.7)<br>\n &emsp; 5.8) [Gradient Boosting Machines Modeli](#5.8)<br>\n &emsp; 5.9) [XGBoost Modeli](#5.9)<br>\n &emsp; 5.10) [Light GBM Modeli](#5.10)<br>\n &emsp; 5.11) [CatBoost Modeli](#5.11)<br> ","62601c4a":"<a id =\"4.4\"><\/a>\n### 4.4) PLS Model","050997aa":"<a id='5.0'><\/a>\n### **B) Do\u011frusal Olmayan Modeller**","056ced28":"#### > **YORUM:**  *Ayk\u0131r\u0131 de\u011ferleri bulduk ve bask\u0131lama y\u00f6ntemi uygulayarak bunlar\u0131 alt limite veyahut \u00fcst limite e\u015fitledik*","54fb02c1":"#### Modelin Olu\u015fturulmas\u0131","658e7da3":"#### Modelin Olu\u015fturulmas\u0131","56c9b3ea":"#### Model Do\u011frulama","5e05b6f1":"#### Model Do\u011frulama","435d0a3f":"#### Tahmin","cdc36fa4":"#### Modelin Olu\u015fturulmas\u0131","c2d89d62":"<a id='5.2'><\/a>\n### 5.2) SVR (Destek Vekt\u00f6r Regresyonu)","1fa954cb":"<a id ='2'><\/a>\n## 2. De\u011fi\u015fkenler Aras\u0131ndaki \u0130li\u015fki","423f663f":"<a id=\"4.5\"><\/a>\n### 4.5) Ridge Regresyon","1fc61c2e":"#### Modelin Olu\u015fturulmas\u0131","3a9cede3":"<a id=\"4.1\"><\/a>\n### 1) Basit Do\u011frusal Regresyon","946d702f":"#### Tahmin","314878fc":"#### Model Do\u011frulama","3eaa3c67":"<a id='4'><\/a>\n## 4. Analiz","e814cc2f":"#### Model Do\u011frulama","3d27ff6e":"#### Model Olu\u015fturma","916a9c7c":"#### > **YORUM:**  *Data seti i\u00e7erisindeki verilerin birbirleriyle olan ili\u015fkilerine bakt\u0131\u011f\u0131m\u0131zda \"Hits\",\"Runs\",\"Walks\",\"RBI\" gibi de\u011ferlerle \"CHits\",\"CHmRun\",\"Cruns\",\"CRBI\",\"CWalks\" gibi de\u011ferlerin kendi aralar\u0131ndaki kolerasyonun y\u00fcksek oldu\u011funu g\u00f6r\u00fcyoruz.*","c4536af8":"#### Modelin Olu\u015fturulmas\u0131","bd66ad75":"<a id='4.3'><\/a>\n### 4.3) PCR Model","03f14342":"#### Model Do\u011frulama","c671aeee":"#### Model Do\u011frulama","8be65f03":"#### Model Do\u011frulama","c9414cc1":"#### Tahmin <br>\n**Model :** *Salary = 320.17 +  CHits*0.27* <br>\n**Soru :** *E\u011fer bir at\u0131c\u0131 sezon boyunca 2000 at\u0131\u015f yapabildiyse maa\u015f\u0131 ne olur?*","ca22a64e":"#### Grafik","967340e7":"#### Tahmin","82bfe79a":"<a id ='5.5'><\/a>\n### 5.5) CART Modeli","6f851aba":"#### Model Do\u011frulama","39d4014c":"#### Grafik","865f838f":"#### Tahmin","6a47d357":"#### Grafik","1322896f":"#### Grafik","51fe4660":"<a id='4.0'><\/a>\n### **A. Do\u011frusal Modeller** ","82684deb":"#### Tahmin","4a0f341d":"<a id='5.4'><\/a>\n### 5.4) \u00c7ok Katmanl\u0131 Alg\u0131lay\u0131c\u0131 Modeli","7dd1e0c9":"> YORUM","401a68a6":"## Veriye \u00d6n Bak\u0131\u015f","0b3bbc38":"#### Grafik","04c2446a":"#### Modelin Olu\u015fturulmas\u0131","f4a9c763":"#### Tahmin","96af93e7":"<a id='5.8'><\/a>\n### 5.8) Gradient Boosting Machines Modeli","f5bae9cb":"<a id='1'><\/a>\n## 1. Verinin Y\u00fcklenmesi","14552c8d":"#### Model Do\u011frulama","ffbb30da":"<a id='5.3'><\/a>\n### 5.3) Do\u011frusal Olmayan SVR Modeli","a934f5a9":"<a id ='5.7'><\/a>\n### 5.7) Random Forests Modeli","b9eb7587":"#### > **YORUM:**  *\"Salary\" de\u011fi\u015fkeninde yer alan 59 bo\u015f de\u011feri, \"Salary\" de\u011fi\u015fkeninin \"League\" de\u011fi\u015fkenine g\u00f6re gruplay\u0131p ortalamas\u0131n\u0131 alarak doldurduk.*","daddc95b":"#### Model Do\u011frulama","4f3c5e97":"#### Tahmin","a7429bbf":"#### Tahmin <br>\nAtBat        :10 <br>\nHits         :362 <br>\nHmRun        :361 <br>\nRuns         :362 <br>\nRBI          :360 <br>\nWalks        :301 <br>\nYears        :2001 <br>\nCAtBat       :21 <br>\nCHits        :355 <br>\nCHmRun       :354 <br>\nCRuns        :354 <br>\nCRBI         :349 <br>\nCWalks       :299 <br>\nLeague       :0 <br>\nDivision     :1 <br>\nPutOuts      :12 <br>\nAssists      :156 <br>\nErrors       :11 <br>\nNewLeague    :0 <br>\n\n","68b0b578":"<a id='5.9'><\/a>\n### 5.9) XGBoost Modeli","547536e5":"<a id='5.1'><\/a>\n### 5.1) KNN Modeli","1a361760":"#### Tahmin","83efad13":"#### Modelin Olu\u015fturulmas\u0131","8b967c01":"<a id='4.7'><\/a>\n### 4.7) ElasticNet ","d3b00b53":"#### Model Do\u011frulama","c93ba7ad":"<a id='5.11'><\/a>\n### 5.11) CatBoost Modeli","5567a257":"#### Modelin Olu\u015fturulmas\u0131"}}