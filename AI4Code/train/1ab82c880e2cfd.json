{"cell_type":{"fa79a89a":"code","504adf94":"code","92a873b0":"code","a46e6cd7":"code","64deb66c":"code","d478b036":"code","efeb14f8":"code","8031ac98":"code","14c97a88":"code","4c99664d":"code","18d689f7":"code","7ba9a2b6":"code","405631d7":"code","348fd7bc":"code","ec8cc64b":"code","a18036f4":"code","a9bad6ac":"code","a931ad61":"markdown"},"source":{"fa79a89a":"#Importing some important utilities\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","504adf94":"df=pd.read_csv('..\/input\/best-movies-of-2021\/Rotten2021.csv')\ndf.head()","92a873b0":"df.shape","a46e6cd7":"df.describe()","64deb66c":"df.info()","d478b036":"df.isnull().sum()","efeb14f8":"#We will sort the data in descending order of the position \ndf_sort = df.sort_values(by=[\"Position\"], ascending=False)","8031ac98":"df_sort.head(10)","14c97a88":"#Will convert the 'string' percentage column in the dataset into float...\n#So that we can use it for segregation of the movies and visualization purpose\ndf_sort['Score'] = df['Score'].apply(lambda x: np.nan if x in ['-'] else x[:-1]).astype(float)\n\n#Will sort the movies having the score 100 in df_100\ndf_100=df_sort[df_sort['Score']==100]          \n#Now, it's time to draw the line plot of the movies containing 100 score on imdb vs the position of the movies \nfig, axes = plt.subplots(figsize=(55, 16))\nplt.title(\"Movies with score equal to 100%\")\nsns.lineplot(x='Title', y='Position', data=df_100, ax=axes)","4c99664d":"df[\"Category\"]=np.nan","18d689f7":"df.tail(10)","7ba9a2b6":"df['Score'] = df['Score'].apply(lambda x: np.nan if x in ['-'] else x[:-1]).astype(float)\ndf['Category'] = np.where((df['Score'] < 90) , '<90%', np.nan)\ndf['Category'] = np.where((df['Score'] >= 90), '>=90%', np.nan)","405631d7":"df.tail()","348fd7bc":"#The overall count of the movies having the specific score number of imdb...\n\ndf.Score.value_counts().plot.pie(autopct='%.2f', figsize=(16, 16))\nplt.title(\"Overall Count Of Movie Score\")","ec8cc64b":"from wordcloud import WordCloud, STOPWORDS\n\ndirectors=df['Main_director']\nd=set(directors)\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color='white', width=4000, height=3000).generate((str(d)))\nplt.imshow(wordcloud)\nplt.title('Main Directors of Movie')","a18036f4":"df.isnull().sum()","a9bad6ac":"c_90=(df[df['Score']>=90])\nc_89=(df[df['Score']<90])\n\ncount_90=c_90['Score'].count()\ncount_89=c_89['Score'].count()\n\nl=[\">=90%\", \"<90%\"]\nplt.pie([count_90, count_89], labels=l, autopct='%.1f')\nplt.title(\"Number of Movies having imdb score more than 90% score and less than 90%\")","a931ad61":"Through this pie chart, we get the general idea that 60.9% movies released in the year 2021 got the imdb score more than 90% !!!"}}