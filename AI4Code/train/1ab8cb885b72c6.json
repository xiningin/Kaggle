{"cell_type":{"e97084af":"code","5ea7698f":"code","1473c5ad":"code","2a6e43e8":"code","fa62fc76":"code","36faf237":"code","cc1f9213":"code","2fa1d0d0":"code","fb308ec2":"code","324971d8":"code","814ab5b9":"code","a450742d":"code","7733a307":"code","a6ec8bb2":"code","3af4d994":"code","903679b3":"code","79a018aa":"code","74bd4c10":"code","5309febb":"code","b9c154ab":"code","d9c39b2f":"code","8edd0117":"code","91047f06":"code","46b2b6be":"code","c55727db":"code","e60e9d4e":"code","a593290f":"code","29eb12fd":"code","a778de46":"code","809511f7":"code","ce8f0935":"code","03d10d0b":"code","23cd24c3":"code","69b9305b":"code","03e98f62":"code","8b6be7de":"code","68168a69":"code","7b825dce":"code","b66d10f1":"code","cadfcd98":"code","6f1daa67":"code","eb4bba68":"code","8fa68062":"code","b4100156":"code","9d1883d8":"code","64c2f275":"code","f8bda60c":"code","6e76b55c":"code","9b3b042c":"code","b5fc07da":"code","4c7e8dcc":"code","8d2ef807":"code","03c432e9":"code","a93de48c":"code","9228147c":"code","a40fca95":"code","d877ccec":"code","e535564f":"code","3f3b3f98":"code","7f101592":"markdown","d3723caa":"markdown","620db858":"markdown","7f496719":"markdown","473ba679":"markdown","b2ac0f84":"markdown","0a97560e":"markdown","4bb7460b":"markdown","30affd44":"markdown","18e33647":"markdown","38259cc9":"markdown"},"source":{"e97084af":"# Clean up (to avoid errors)\n!rm -rf data\n!rm -rf nb_001b.py\n!rm -rf nb_002.py\n\n# Install additional packages\n!pip install dataclasses\n!pip install fastprogress\n\n# Download code from previous notebooks\n!wget https:\/\/raw.githubusercontent.com\/fastai\/fastai_old\/master\/dev_nb\/nb_001b.py\n!wget https:\/\/raw.githubusercontent.com\/fastai\/fastai_old\/master\/dev_nb\/nb_002.py\n!wget https:\/\/raw.githubusercontent.com\/fastai\/fastai_docs\/master\/dev_nb\/nb_002b.py\n!wget https:\/\/raw.githubusercontent.com\/fastai\/fastai_docs\/master\/dev_nb\/nb_002c.py\n!wget https:\/\/raw.githubusercontent.com\/fastai\/fastai_docs\/master\/dev_nb\/nb_003.py\n    \n# Download and unzip data\n!wget http:\/\/files.fast.ai\/data\/cifar10.tgz\n!tar -xzf cifar10.tgz\n\n# Create data directories\n!mkdir data\n!mv cifar10 data\/\n\n# Clean up\n!rm cifar10.tgz","5ea7698f":"from nb_003 import *\nfrom torch import Tensor, tensor\nfrom fastprogress import master_bar, progress_bar\nfrom fastprogress.fastprogress import MasterBar, ProgressBar\nfrom typing import Iterator\nimport functools\nimport fastprogress.fastprogress as fp2\nimport re","1473c5ad":"Floats = Union[float, Collection[float]]\nPBar = Union[MasterBar, ProgressBar]","2a6e43e8":"DATA_PATH = Path('data')\nPATH = DATA_PATH\/'cifar10'","fa62fc76":"# Channel-wise normalization of data\ndata_mean,data_std = map(tensor, ([0.491, 0.482, 0.447], [0.247, 0.243, 0.261]))\ncifar_norm,cifar_denorm = normalize_funcs(data_mean,data_std)","36faf237":"# Transformations for data augmentation\ntfms = [flip_lr(p=0.5),\n        pad(padding=4),\n        crop(size=32, row_pct=(0,1.), col_pct=(0,1.))]","cc1f9213":"# Batch size\nbs = 64","2fa1d0d0":"!ls data\/cifar10\/train","fb308ec2":"# Training and validation datasets\ntrain_ds = ImageDataset.from_folder(PATH\/'train', classes=['airplane','dog'])\nvalid_ds = ImageDataset.from_folder(PATH\/'test', classes=['airplane','dog'])\nlen(train_ds), len(valid_ds)","324971d8":"# Create a DataBunch with transformations\ndata = DataBunch.create(train_ds, valid_ds, bs=bs, train_tfm=tfms, num_workers=4, dl_tfms=cifar_norm)\nlen(data.train_dl), len(data.valid_dl)","814ab5b9":"# Look at some sample images\ntorch.manual_seed(42)\nfig, axes = plt.subplots(3, 5, figsize=(16, 9))\nxb, yb = next(iter(data.train_dl))\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(image2np(xb[i]))\n    ax.set_title(train_ds.classes[yb[i]])\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False) ","a450742d":"# Define the model\nmodel = Darknet([1, 2, 4, 6, 3], num_classes=10, nf=16)","7733a307":"model","a6ec8bb2":"class OptimWrapper():\n    \"Normalize naming of parameters on wrapped optimizers\"\n    def __init__(self, opt:optim.Optimizer, wd:float=0., true_wd:bool=False):\n        \"Create wrapper for `opt` and optionally (`true_wd`) set weight decay `wd`\"\n        self.opt,self.true_wd = opt,true_wd\n        self.opt_keys = list(self.opt.param_groups[0].keys())\n        self.opt_keys.remove('params')\n        self.read_defaults()\n        self._wd = wd\n    \n    #Pytorch optimizer methods\n    def step(self)->None:\n        \"Performs a single optimization step \"\n        # weight decay outside of optimizer step (AdamW)\n        if self.true_wd:\n            for pg in self.opt.param_groups:\n                for p in pg['params']: p.data.mul_(1 - self._wd*pg['lr'])\n            self.set_val('weight_decay', 0)\n        self.opt.step()\n    \n    def zero_grad(self)->None: \n        \"Clears the gradients of all optimized `Tensor`s\"\n        self.opt.zero_grad()\n    \n    #Hyperparameters as properties\n    @property\n    def lr(self)->float: \n        \"Learning rate\"\n        return self._lr\n\n    @lr.setter\n    def lr(self, val:float)->None: self._lr = self.set_val('lr', val)\n    \n    @property\n    def mom(self)->float: \n        \"Momentum if present on wrapped opt, else betas\"\n        return self._mom\n\n    @mom.setter\n    def mom(self, val:float)->None:\n        \"Momentum if present on wrapped opt, else betas\"\n        if 'momentum' in self.opt_keys: self.set_val('momentum', val)\n        elif 'betas' in self.opt_keys:  self.set_val('betas', (val, self._beta))\n        self._mom = val\n    \n    @property\n    def beta(self)->float:\n        \"Beta if present on wrapped opt, else it's alpha\"\n        return self._beta\n\n    @beta.setter\n    def beta(self, val:float)->None:\n        \"Beta if present on wrapped opt, else it's alpha\"\n        if 'betas' in self.opt_keys:    self.set_val('betas', (self._mom,val))\n        elif 'alpha' in self.opt_keys:  self.set_val('alpha', val)\n        self._beta = val\n    \n    @property\n    def wd(self)->float: \n        \"Weight decay for wrapped opt\"\n        return self._wd\n\n    @wd.setter\n    def wd(self, val:float)->None:\n        \"Weight decay for wrapped opt\"\n        if not self.true_wd: self.set_val('weight_decay', val)\n        self._wd = val\n    \n    #Helper functions\n    def read_defaults(self):\n        \"Reads in the default params from the wrapped optimizer\"\n        self._beta = None\n        if 'lr' in self.opt_keys: self._lr = self.opt.param_groups[0]['lr']\n        if 'momentum' in self.opt_keys: self._mom = self.opt.param_groups[0]['momentum']\n        if 'alpha' in self.opt_keys: self._beta = self.opt.param_groups[0]['alpha']\n        if 'betas' in self.opt_keys: self._mom,self._beta = self.opt.param_groups[0]['betas']\n        if 'weight_decay' in self.opt_keys: self._wd = self.opt.param_groups[0]['weight_decay']\n    \n    def set_val(self, key:str, val:Any):\n        \"Set parameter on wrapped optimizer\"\n        for pg in self.opt.param_groups: pg[key] = val\n        return val","3af4d994":"# Sample usage of OptimWrapper\nopt_fn = partial(optim.Adam, betas=(0.95,0.99))\nopt = OptimWrapper(opt_fn(model.parameters(), 1e-2))\nopt.lr, opt.mom, opt.wd, opt.beta","903679b3":"# Changing parameters using OptimWrapper\nopt.lr=0.2\nopt.lr, opt.mom, opt.wd, opt.beta","79a018aa":"class Callback():\n    \"Base class for callbacks that want to record values, dynamically change learner params, etc\"\n    def on_train_begin(self, **kwargs:Any)->None:         \n        \"To initialize constants in the callback.\"\n        pass\n    def on_epoch_begin(self, **kwargs:Any)->None:\n        \"At the beginning of each epoch\"\n        pass\n    def on_batch_begin(self, **kwargs:Any)->None: \n        \"\"\"To set HP before the step is done.\n           Returns xb, yb (which can allow us to modify the input at that step if needed)\"\"\"\n        pass\n    def on_loss_begin(self, **kwargs:Any)->None:\n        \"\"\"Called after the forward pass but before the loss has been computed.\n           Returns the output (which can allow us to modify it)\"\"\"\n        pass\n    def on_backward_begin(self, **kwargs:Any)->None:\n        \"\"\"Called after the forward pass and the loss has been computed, but before the back propagation.\n           Returns the loss (which can allow us to modify it, for instance for reg functions)\"\"\"\n        pass\n    def on_backward_end(self, **kwargs:Any)->None:\n        \"\"\"Called after the back propagation had been done (and the gradients computed) but before the step of the optimizer.\n           Useful for true weight decay in AdamW\"\"\"\n        pass\n    def on_step_end(self, **kwargs:Any)->None:\n        \"Called after the step of the optimizer but before the gradients are zeroed (not sure this one is useful)\"\n        pass\n    def on_batch_end(self, **kwargs:Any)->None:\n        \"Called at the end of the batch\"\n        pass\n    def on_epoch_end(self, **kwargs:Any)->bool:\n        \"Called at the end of an epoch\"\n        return False\n    def on_train_end(self, **kwargs:Any)->None:\n        \"Useful for cleaning up things and saving files\/models\"\n        pass","74bd4c10":"class SmoothenValue():\n    \"Creates a smooth moving average for a value (loss, etc)\"\n    def __init__(self, beta:float)->None:\n        \"Create smoother for value, beta should be 0<beta<1\"\n        self.beta,self.n,self.mov_avg = beta,0,0\n    \n    def add_value(self, val:float)->None:\n        \"Add current value to calculate updated smoothed value \"\n        self.n += 1\n        self.mov_avg = self.beta * self.mov_avg + (1 - self.beta) * val\n        self.smooth = self.mov_avg \/ (1 - self.beta ** self.n)","5309febb":"# Some useful type definitions\nTensorOrNumber = Union[Tensor,Number]\nCallbackList = Collection[Callback]\nMetricsList = Collection[TensorOrNumber]\nTensorOrNumList = Collection[TensorOrNumber]\nMetricFunc = Callable[[Tensor,Tensor],TensorOrNumber]\nMetricFuncList = Collection[MetricFunc]","b9c154ab":"# Initialization of the callback handler's state dictionary\ndef _get_init_state(): return {'epoch':0, 'iteration':0, 'num_batch':0}","d9c39b2f":"@dataclass\nclass CallbackHandler():\n    \"Manages all of the registered callback objects, beta is for smoothing loss\"\n    callbacks:CallbackList\n    beta:float=0.98\n        \n    def __post_init__(self)->None:\n        \"InitInitializeitialize smoother and learning stats\"\n        self.smoothener = SmoothenValue(self.beta)\n        self.state_dict:Dict[str,Union[int,float,Tensor]]=_get_init_state()\n    \n    def __call__(self, cb_name, **kwargs)->None:\n        \"Call through to all of the callback handlers\"\n        return [getattr(cb, f'on_{cb_name}')(**self.state_dict, **kwargs) for cb in self.callbacks]\n    \n    def on_train_begin(self, epochs:int, pbar:PBar, metrics:MetricFuncList)->None:\n        \"About to start learning\"\n        self.state_dict = _get_init_state()\n        self.state_dict['n_epochs'],self.state_dict['pbar'],self.state_dict['metrics'] = epochs,pbar,metrics\n        self('train_begin')\n        \n    def on_epoch_begin(self)->None: \n        \"Handle new epoch\"\n        self.state_dict['num_batch'] = 0\n        self('epoch_begin')\n        \n    def on_batch_begin(self, xb:Tensor, yb:Tensor)->None:\n        \"Handle new batch `xb`,`yb`\"\n        self.state_dict['last_input'], self.state_dict['last_target'] = xb, yb\n        for cb in self.callbacks:\n            a = cb.on_batch_begin(**self.state_dict)\n            if a is not None: self.state_dict['last_input'], self.state_dict['last_target'] = a\n        return self.state_dict['last_input'], self.state_dict['last_target']\n    \n    def on_loss_begin(self, out:Tensor)->None:\n        \"Handle start of loss calculation with model output `out`\"\n        self.state_dict['last_output'] = out\n        for cb in self.callbacks:\n            a = cb.on_loss_begin(**self.state_dict)\n            if a is not None: self.state_dict['last_output'] = a\n        return self.state_dict['last_output']\n    \n    def on_backward_begin(self, loss:Tensor)->None:\n        \"Handle gradient calculation on `loss`\"\n        self.smoothener.add_value(loss.detach())\n        self.state_dict['last_loss'], self.state_dict['smooth_loss'] = loss, self.smoothener.smooth\n        for cb in self.callbacks:\n            a = cb.on_backward_begin(**self.state_dict)\n            if a is not None: self.state_dict['last_loss'] = a\n        return self.state_dict['last_loss']\n    \n    def on_backward_end(self)->None:  \n        \"Handle end of gradient calc\"\n        self('backward_end')\n    def on_step_end(self)->None:   \n        \"Handle end of optimization step\"\n        self('step_end')\n        \n    def on_batch_end(self, loss:Tensor)->None:\n        \"Handle end of processing one batch with `loss`\"\n        self.state_dict['last_loss'] = loss\n        stop = np.any(self('batch_end'))\n        self.state_dict['iteration'] += 1\n        self.state_dict['num_batch'] += 1\n        return stop\n    \n    def on_epoch_end(self, val_metrics:MetricsList)->bool:\n        \"Epoch is done, process `val_metrics`\"\n        self.state_dict['last_metrics'] = val_metrics\n        stop = np.any(self('epoch_end'))\n        self.state_dict['epoch'] += 1\n        return stop\n    \n    def on_train_end(self, exception:Union[bool,Exception])->None: \n        \"Handle end of training, `exception` is an `Exception` or False if no exceptions during training\"\n        self('train_end', exception=exception)","8edd0117":"# Some more types\nOptMetrics = Optional[Collection[Any]]\nOptLossFunc = Optional[LossFunction]\nOptCallbackHandler = Optional[CallbackHandler]\nOptOptimizer = Optional[optim.Optimizer]\nOptCallbackList = Optional[CallbackList]","91047f06":"# Rewrite the loss_batch function to incroporate callbacks\ndef loss_batch(model:Model, xb:Tensor, yb:Tensor, loss_fn:OptLossFunc=None, \n               opt:OptOptimizer=None, cb_handler:OptCallbackHandler=None, \n               metrics:OptMetrics=None)->Tuple[Union[Tensor,int,float,str]]:\n    \"Calculate loss for a batch, calculate metrics, call out to callbacks as necessary\"\n    if cb_handler is None: cb_handler = CallbackHandler([])\n    if not is_listy(xb): xb = [xb]\n    if not is_listy(yb): yb = [yb]\n    out = model(*xb)\n    out = cb_handler.on_loss_begin(out)\n    if not loss_fn: return out.detach(),yb[0].detach()\n    loss = loss_fn(out, *yb)\n    mets = [f(out,*yb).detach().cpu() for f in metrics] if metrics is not None else []\n    \n    if opt is not None:\n        loss = cb_handler.on_backward_begin(loss)\n        loss.backward()\n        cb_handler.on_backward_end()\n        opt.step()\n        cb_handler.on_step_end()\n        opt.zero_grad()\n        \n    return (loss.detach().cpu(),) + tuple(mets) + (yb[0].shape[0],)","46b2b6be":"def validate(model:Model, dl:DataLoader, loss_fn:OptLossFunc=None, \n             metrics:OptMetrics=None, cb_handler:OptCallbackHandler=None, \n             pbar:Optional[PBar]=None)->Iterator[Tuple[Union[Tensor,int],...]]:\n    \"Calculate loss and metrics for the validation set\"\n    model.eval()\n    with torch.no_grad():\n        return zip(*[loss_batch(model, xb, yb, loss_fn, cb_handler=cb_handler, metrics=metrics)\n                       for xb,yb in progress_bar(dl, parent=pbar)])","c55727db":"# Rewrite the fit function to incorporate callbacks\ndef fit(epochs:int, model:Model, loss_fn:LossFunction, opt:optim.Optimizer, \n        data:DataBunch, callbacks:OptCallbackList=None, metrics:OptMetrics=None)->None:\n    \"Fit the `model` on `data` and learn using `loss` and `opt`\"\n    cb_handler = CallbackHandler(callbacks)\n    pbar = master_bar(range(epochs))\n    cb_handler.on_train_begin(epochs, pbar=pbar, metrics=metrics)\n\n    exception=False\n    try:\n        for epoch in pbar:\n            model.train()\n            cb_handler.on_epoch_begin()\n\n            for xb,yb in progress_bar(data.train_dl, parent=pbar):\n                xb, yb = cb_handler.on_batch_begin(xb, yb)\n                loss,_ = loss_batch(model, xb, yb, loss_fn, opt, cb_handler)\n                if cb_handler.on_batch_end(loss): break\n\n            if hasattr(data,'valid_dl') and data.valid_dl is not None:\n                *val_metrics,nums = validate(model, data.valid_dl, loss_fn=loss_fn,\n                                             cb_handler=cb_handler, metrics=metrics,pbar=pbar)\n                nums = np.array(nums, dtype=np.float32)\n                val_metrics = [(torch.stack(val).cpu().numpy() * nums).sum() \/ nums.sum()\n                               for val in val_metrics]\n\n            else: val_metrics=None\n            if cb_handler.on_epoch_end(val_metrics): break\n    except Exception as e:\n        exception = e\n        raise e\n    finally: cb_handler.on_train_end(exception)","e60e9d4e":"_camel_re1 = re.compile('(.)([A-Z][a-z]+)')\n_camel_re2 = re.compile('([a-z0-9])([A-Z])')\ndef camel2snake(name:str)->str:\n    s1 = re.sub(_camel_re1, r'\\1_\\2', name)\n    return re.sub(_camel_re2, r'\\1_\\2', s1).lower()","a593290f":"camel2snake('LearnerCallback')","29eb12fd":"@dataclass\nclass LearnerCallback(Callback):\n    \"Base class for creating callbacks for the `Learner`\"\n    learn: Learner\n    def __post_init__(self):\n        if self.cb_name: setattr(self.learn, self.cb_name, self)\n\n    @property\n    def cb_name(self): return camel2snake(self.__class__.__name__)","a778de46":"class Recorder(LearnerCallback):\n    \"A `LearnerCallback` that records epoch,loss,opt and metric data during training\"\n    def __init__(self, learn:Learner):\n        super().__init__(learn)\n        self.opt = self.learn.opt\n        self.train_dl = self.learn.data.train_dl\n        \n    def on_train_begin(self, pbar:PBar, metrics:MetricFuncList, **kwargs:Any)->None:\n        \"Initialize recording status at beginning of training\"\n        self.pbar = pbar\n        self.names = ['epoch', 'train loss', 'valid loss'] + [fn.__name__ for fn in metrics]\n        self.pbar.write('  '.join(self.names))\n        self.losses,self.val_losses,self.lrs,self.moms,self.metrics,self.nb_batches = [],[],[],[],[],[]\n\n    def on_batch_begin(self, **kwargs:Any)->None:\n        \"Record learning rate and momentum at beginning of batch\"\n        self.lrs.append(self.opt.lr)\n        self.moms.append(self.opt.mom)\n\n    def on_backward_begin(self, smooth_loss:Tensor, **kwargs:Any)->None:\n        \"Record the loss before any other callback has a chance to modify it.\"\n        self.losses.append(smooth_loss)\n        if self.pbar is not None and hasattr(self.pbar,'child'):\n            self.pbar.child.comment = f'{smooth_loss:.4f}'\n\n    def on_epoch_end(self, epoch:int, num_batch:int, smooth_loss:Tensor, \n                     last_metrics=MetricsList, **kwargs:Any)->bool:\n        \"Save epoch info: num_batch, smooth_loss, metrics\"\n        self.nb_batches.append(num_batch)\n        if last_metrics is not None:\n            self.val_losses.append(last_metrics[0])\n            if len(last_metrics) > 1: self.metrics.append(last_metrics[1:])\n            self.format_stats([epoch, smooth_loss] + last_metrics)\n        else:  self.format_stats([epoch, smooth_loss])\n        return False\n\n    def format_stats(self, stats:TensorOrNumList)->None:\n        str_stats = []\n        for name,stat in zip(self.names,stats):\n            t = str(stat) if isinstance(stat, int) else f'{stat:.6f}'\n            t += ' ' * (len(name) - len(t))\n            str_stats.append(t)\n        self.pbar.write('  '.join(str_stats))\n    \n    def plot_lr(self, show_moms=False)->None:\n        \"Plot learning rate, `show_moms` to include momentum\"\n        iterations = list(range(len(self.lrs)))\n        if show_moms:\n            _, axs = plt.subplots(1,2, figsize=(12,4))\n            axs[0].plot(iterations, self.lrs)\n            axs[1].plot(iterations, self.moms)\n        else: plt.plot(iterations, self.lrs)\n\n    def plot(self, skip_start:int=10, skip_end:int=5)->None:\n        \"Plot learning rate and losses, trimmed between `skip_start` and `skip_end`\"\n        lrs = self.lrs[skip_start:-skip_end] if skip_end > 0 else self.lrs[skip_start:]\n        losses = self.losses[skip_start:-skip_end] if skip_end > 0 else self.losses[skip_start:]\n        _, ax = plt.subplots(1,1)\n        ax.plot(lrs, losses)\n        ax.set_xscale('log')\n\n    def plot_losses(self)->None:\n        \"Plot training and validation losses\"\n        _, ax = plt.subplots(1,1)\n        iterations = list(range(len(self.losses)))\n        ax.plot(iterations, self.losses)\n        val_iter = self.nb_batches\n        val_iter = np.cumsum(val_iter)\n        ax.plot(val_iter, self.val_losses)\n\n    def plot_metrics(self)->None:\n        \"Plot metrics collected during training\"\n        assert len(self.metrics) != 0, \"There are no metrics to plot.\"\n        _, axes = plt.subplots(len(self.metrics[0]),1,figsize=(6, 4*len(self.metrics[0])))\n        val_iter = self.nb_batches\n        val_iter = np.cumsum(val_iter)\n        axes = axes.flatten() if len(self.metrics[0]) != 1 else [axes]\n        for i, ax in enumerate(axes):\n            values = [met[i] for met in self.metrics]\n            ax.plot(val_iter, values)","809511f7":"def accuracy(out:Tensor, yb:Tensor)->TensorOrNumber:\n    \"Calculate percentage of 1-hot `out` correctly predicted in `yb`\"\n    preds = torch.argmax(out, dim=1)\n    return (preds==yb).float().mean()\n\nAdamW = partial(optim.Adam, betas=(0.9,0.99))","ce8f0935":"@dataclass\nclass Learner():\n    \"\"\"Trains `module` with `data` using `loss_fn` and `opt_fn`, collects `metrics` along the way\n       `true_wd` along with `wd` turn on weight decay, `path` specifies where models are stored\n       `callback_fns` is used to add custom callbacks beyond Recorder which is added by default\"\"\"\n    data:DataBunch\n    model:nn.Module\n    opt_fn:Callable=AdamW\n    loss_fn:Callable=F.cross_entropy\n    metrics:Collection[Callable]=None\n    true_wd:bool=True\n    wd:Floats=1e-2\n    path:str = 'models'\n    callback_fns:Collection[Callable]=None\n    callbacks:Collection[Callback]=field(default_factory=list)\n    def __post_init__(self):\n        \"Sets up internal learner variables\"\n        self.path = Path(self.path)\n        self.metrics=listify(self.metrics)\n        self.path.mkdir(parents=True, exist_ok=True)\n        self.model = self.model.to(self.data.device)\n        self.callbacks = listify(self.callbacks)\n        self.callback_fns = [Recorder] + listify(self.callback_fns)\n\n    def fit(self, epochs:int, lr:Optional[Floats], wd:Optional[Floats]=None, callbacks:OptCallbackList=None)->None:\n        \"Fit the model in this learner with `lr` learning rate and `wd` weight decay\"\n        if wd is None: wd = self.wd\n        self.create_opt(lr, wd)\n        callbacks = [cb(self) for cb in self.callback_fns] + listify(callbacks)\n        fit(epochs, self.model, self.loss_fn, self.opt, self.data, metrics=self.metrics,\n            callbacks=self.callbacks+callbacks)\n\n    def create_opt(self, lr:Floats, wd:Floats=0.)->None:\n        \"Binds a new optimizer each time `fit` is called with `lr` learning rate and `wd` weight decay\"\n        self.opt = OptimWrapper(self.opt_fn(self.model.parameters(),lr))\n        \n    def save(self, name:PathOrStr)->None:\n        \"Save the model bound to this learner in the `path` folder with `name`\"\n        torch.save(self.model.state_dict(), self.path\/f'{name}.pth')\n    def load(self, name:PathOrStr): \n        \"Load the model bound to this learner with the `name` model params in the `path` folder\"\n        self.model.load_state_dict(torch.load(self.path\/f'{name}.pth'))","03d10d0b":"# Metrics to be tracked during training\nmetrics=[accuracy]","23cd24c3":"# Create a model and learner with callbacks\nmodel = Darknet([1, 2, 2, 2, 2], num_classes=2, nf=16)\nlearn = Learner(data, model, metrics=metrics)","69b9305b":"# Train with callbacks\nlearn.fit(5,0.01)","03e98f62":"# Plot the change in loss\nlearn.recorder.plot_losses()","8b6be7de":"# Plot the change in metrics\nlearn.recorder.plot_metrics()","68168a69":"# Plot the learning rate\nlearn.recorder.plot_lr()","7b825dce":"# Different types of annealing functions\nAnnealFunc = Callable[[Number,Number,float], Number]\ndef annealing_no(start:Number, end:Number, pct:float)->Number: \n    \"No annealing, always return `start`\"\n    return start\ndef annealing_linear(start:Number, end:Number, pct:float)->Number: \n    \"Linearly anneal from `start` to `end` as pct goes from 0.0 to 1.0\"\n    return start + pct * (end-start)\ndef annealing_exp(start:Number, end:Number, pct:float)->Number: \n    \"Exponentially anneal from `start` to `end` as pct goes from 0.0 to 1.0\"\n    return start * (end\/start) ** pct\ndef annealing_cos(start:Number, end:Number, pct:float)->Number:\n    \"Cosine anneal from `start` to `end` as pct goes from 0.0 to 1.0\"\n    cos_out = np.cos(np.pi * pct) + 1\n    return end + (start-end)\/2 * cos_out\n    \ndef do_annealing_poly(start:Number, end:Number, pct:float, degree:Number)->Number: \n    \"Helper function for `anneal_poly`\"\n    return end + (start-end) * (1-pct)**degree\ndef annealing_poly(degree:Number)->Number: \n    \"Anneal polynomically from `start` to `end` as pct goes from 0.0 to 1.0\"\n    return functools.partial(do_annealing_poly, degree=degree)","b66d10f1":"annealings = \"NO LINEAR COS EXP POLY\".split()","cadfcd98":"# Sample data for testing annealing functions\na = np.arange(0, 100)\np = np.linspace(0.01,1,100)","6f1daa67":"# Plot example of annealing functions\nfns = [annealing_no, annealing_linear, annealing_cos, annealing_exp, annealing_poly(0.8)]\nfor fn, t in zip(fns, annealings):\n    plt.plot(a, [fn(2, 1e-2, o) for o in p], label=t)\nplt.legend();","eb4bba68":"def is_tuple(x:Any)->bool: return isinstance(x, tuple)\nStartOptEnd=Union[float,Tuple[float,float]]\nclass Stepper():\n    \"Used to \\\"step\\\" from start,end (`vals`) over `n_iter` iterations on a schedule defined by `func` (defaults to linear)\"\n    def __init__(self, vals:StartOptEnd, n_iter:int, func:Optional[AnnealFunc]=None):\n        self.start,self.end = (vals[0],vals[1]) if is_tuple(vals) else (vals,0)\n        self.n_iter = n_iter\n        if func is None: self.func = annealing_linear if is_tuple(vals) else annealing_no\n        else:          self.func = func\n        self.n = 0\n    \n    def step(self)->Number:\n        \"Return next value along annealed schedule\"\n        self.n += 1\n        return self.func(self.start, self.end, self.n\/self.n_iter)\n    \n    @property\n    def is_done(self)->bool:\n        \"Schedule completed\"\n        return self.n >= self.n_iter","8fa68062":"@dataclass\nclass OneCycleScheduler(LearnerCallback):\n    \"Manages 1-Cycle style traing as outlined in Leslie Smith's [paper](https:\/\/arxiv.org\/pdf\/1803.09820.pdf)\"\n    learn:Learner\n    lr_max:float\n    moms:Floats=(0.95,0.85)\n    div_factor:float=25.\n    pct_start:float=0.5\n    \n    def __post_init__(self): self.moms=tuple(listify(self.moms,2))\n\n    def steps(self, *steps_cfg:StartOptEnd):\n        \"Build anneal schedule for all of the parameters\"\n        return [Stepper(step, n_iter, func=func)\n                for (step,(n_iter,func)) in zip(steps_cfg, self.phases)]\n\n    def on_train_begin(self, n_epochs:int, **kwargs:Any)->None:\n        \"Initialize our optimization params based on our annealing schedule\"\n        n = len(self.learn.data.train_dl) * n_epochs\n        a1 = int(n * self.pct_start)\n        a2 = n-a1\n        self.phases = ((a1, annealing_linear), (a2, annealing_cos))\n        low_lr = self.lr_max\/self.div_factor\n        self.lr_scheds = self.steps((low_lr, self.lr_max), (self.lr_max, low_lr\/1e4))\n        self.mom_scheds = self.steps(self.moms, (self.moms[1], self.moms[0]))\n        self.opt = self.learn.opt\n        self.opt.lr,self.opt.mom = self.lr_scheds[0].start,self.mom_scheds[0].start\n        self.idx_s = 0\n    \n    def on_batch_end(self, **kwargs:Any)->None:\n        \"Take one step forward on the annealing schedule for the optim params\"\n        if self.idx_s >= len(self.lr_scheds): return Trrue\n        self.opt.lr = self.lr_scheds[self.idx_s].step()\n        self.opt.mom = self.mom_scheds[self.idx_s].step()\n        # when the current schedule is complete we move onto the next \n        # schedule. (in 1-cycle there are two schedules)\n        if self.lr_scheds[self.idx_s].is_done:\n            self.idx_s += 1\n\ndef one_cycle_scheduler(lr_max:float, **kwargs:Any)->OneCycleScheduler:\n    return functools.partial(OneCycleScheduler, lr_max=lr_max, **kwargs)","b4100156":"# Create model and learner with 1-cycle scheduling\nmodel = Darknet([1, 2, 2, 2, 2], num_classes=2, nf=16)\nsched = one_cycle_scheduler(0.1, pct_start=0.3, div_factor=5, moms=[0.95,0.85])\nlearn = Learner(data, model, metrics=metrics, callback_fns=sched)","9d1883d8":"# Train with 1-cycle scheduling\nlearn.fit(1,0.1)","64c2f275":"learn.recorder.plot_lr(show_moms=True)","f8bda60c":"def fit_one_cycle(learn:Learner, cyc_len:int, max_lr:float, moms:Tuple[float,float]=(0.95,0.85),\n                  div_factor:float=10., pct_start:float=0.5, wd:Optional[float]=None):\n    \"Fits a model following the 1cycle policy\"\n    cbs = [OneCycleScheduler(learn, max_lr, moms=moms, div_factor=div_factor,\n                             pct_start=pct_start)]\n    learn.fit(cyc_len, max_lr, wd=wd, callbacks=cbs)","6e76b55c":"# Create a new model and train with fit_one_cycle\nmodel = Darknet([1, 2, 2, 2, 2], num_classes=2, nf=16)\nlearn = Learner(data, model, metrics=metrics)\nfit_one_cycle(learn, 1, 0.1)","9b3b042c":"@dataclass\nclass TrainingPhase():\n    \"Schedule lr,mom according to `lr_anneal` and `mom_anneal` across a `length` schedule\"\n    length:int\n    lrs:Floats\n    moms:Floats\n    lr_anneal:Callable=None\n    mom_anneal:Callable=None\n    \n    def __post_init__(self)->None:\n        self.lr_step = Stepper(lrs, length, lr_anneal)\n        self.mom_step = Stepper(moms, length, mom_anneal)\n\n@dataclass\nclass GeneralScheduler(Callback):\n    \"Schedule multiple `TrainingPhase` for a `learner`\"\n    learn:Learner\n    phases:Collection[TrainingPhase]\n    \n    def on_train_begin(self, n_epochs:int, **kwargs:Any)->None:\n        \"Initialize our lr and mom schedules for training\"\n        self.lr_scheds = [p.lr_step for p in self.phases]\n        self.mom_scheds = [p.mom_step for p in self.phases]\n        self.opt = self.learn.opt\n        self.opt.lr,self.opt.mom = self.lr_scheds[0].start,self.mom_scheds[0].start\n        self.idx_s = 0\n    \n    def on_batch_end(self, **kwargs:Any)->None:\n        \"Take a step in lr,mom sched, start next sched when current is complete\"\n        if self.idx_s >= len(self.lr_scheds): return True\n        self.opt.lr = self.lr_scheds[self.idx_s].step()\n        self.opt.mom = self.mom_scheds[self.idx_s].step()\n        if self.lr_scheds[self.idx_s].is_done:\n            self.idx_s += 1","b5fc07da":"class LRFinder(LearnerCallback):\n    \"Explore lr vs loss relationship for a learner\"\n    def __init__(self, learn:Learner, start_lr:float=1e-5, end_lr:float=10, num_it:int=200)->None:\n        \"Initialize schedule of learning rates\"\n        super().__init__(learn)\n        self.data = learn.data\n        self.sched = Stepper((start_lr, end_lr), num_it, annealing_exp)\n        #To avoid validating if the train_dl has less than num_it batches, we put aside the valid_dl and remove it\n        #during the call to fit.\n        self.valid_dl = learn.data.valid_dl\n        self.data.valid_dl = None\n    \n    def on_train_begin(self, **kwargs:Any)->None:\n        \"init optimizer and learn params\"\n        self.learn.save('tmp')\n        self.opt = self.learn.opt\n        self.opt.lr = self.sched.start\n        self.stop,self.best_loss = False,0.\n    \n    def on_batch_end(self, iteration:int, smooth_loss:TensorOrNumber, **kwargs:Any)->None:\n        \"Determine if loss has runaway and we should stop\"\n        if iteration==0 or smooth_loss < self.best_loss: self.best_loss = smooth_loss\n        self.opt.lr = self.sched.step()\n        if self.sched.is_done or smooth_loss > 4*self.best_loss:\n            #We use the smoothed loss to decide on the stopping since it's less shaky.\n            self.stop=True\n            return True\n    \n    def on_epoch_end(self, **kwargs:Any)->None: \n        \"Tell Learner if we need to stop\"\n        return self.stop\n    \n    def on_train_end(self, **kwargs:Any)->None:\n        \"Cleanup learn model weights disturbed during LRFind exploration\"\n        # restore the valid_dl we turned of on `__init__`\n        self.data.valid_dl = self.valid_dl\n        self.learn.load('tmp')","4c7e8dcc":"def lr_find(learn:Learner, start_lr:float=1e-5, end_lr:float=10, num_it:int=100, **kwargs:Any):\n    \"Explore lr from `start_lr` to `end_lr` over `num_it` iterations of `learn`\"\n    cb = LRFinder(learn, start_lr, end_lr, num_it)\n    a = int(np.ceil(num_it\/len(learn.data.train_dl)))\n    learn.fit(a, start_lr, callbacks=[cb], **kwargs)","8d2ef807":"model = Darknet([1, 2, 2, 2, 2], num_classes=2, nf=16)\nlearn = Learner(data, model, metrics=metrics)","03c432e9":"lr_find(learn)\nlearn.recorder.plot()","a93de48c":"learn.fit(2, 5e-3, callbacks=OneCycleScheduler(learn, 5e-3))","9228147c":"learn.recorder.plot_losses()","a40fca95":"learn.recorder.plot_metrics()","d877ccec":"learn.recorder.plot_lr()","e535564f":"class EyeOfSauron(Callback):\n    def __init__(self, learn)->None:\n    #By passing the learner, this callback will have access to everything:\n    #All the inputs\/outputs as they go, the losses, but also the data loaders, the optimizer.\n        self.learn = learn\n\n    #At any time:\n    #Changing self.learn.data.train_dl or self.data.valid_dl will change them inside the fit function\n    #(we just need to pass the data object to the fit function and not data.train_dl\/data.valid_dl)\n    #Changing self.learn.opt.opt (We have an HPOptimizer on top of the actual optimizer) will change it \n    #inside the fit function.\n    #Changing self.learn.data or self.learn.opt directly WILL NOT change the data or the optimizer inside the fit function.\n\n    #In any of the callbacks you can unpack in the kwargs:\n    #- n_epochs, contains the number of epochs the training will take in total\n    #- epoch, contains the number of the current\n    #- iteration, contains the number of iterations done since the beginning of training\n    #- num_batch, contains the number of the batch we're at in the dataloader\n    #- last_input, contains the last input that got through the model (eventually updated by a callback)\n    #- last_target, contains the last target that gor through the model (eventually updated by a callback)\n    #- last_output, contains the last output spitted by the model (eventually updated by a callback)\n    #- last_loss, contains the last loss computed (eventually updated by a callback)\n    #- smooth_loss, contains the smoothed version of the loss\n    #- last_metrics, contains the last validation loss and emtrics computed\n    #- pbar, the progress bar\n\n    def on_train_begin(self, **kwargs)->None:\n    #Here we can initiliaze anything we need. \n        self.opt = self.learn.opt\n    #The optimizer has now been initialized. We can change any hyper-parameters by typing\n    #self.opt.lr = new_lr, self.opt.mom = new_mom, self.opt.wd = new_wd or self.opt.beta = new_beta\n\n    def on_epoch_begin(self, **kwargs)->None:  pass\n    #This is not technically useful since we have on_train_begin for epoch 0 and on_epoch_end for all the other epochs\n    #yet it makes writing code that needs to be done at the beginning of every epoch easy and more readable.\n\n    def on_batch_begin(self, **kwargs)->None: pass\n    #Here is the perfect place to prepare everything before the model is called.\n    #Example: change the values of the hyperparameters (if we don't do it on_batch_end instead)\n\n    #If we return something, that will be the new value for xb,yb. \n\n    def on_loss_begin(self, **kwargs)->None: pass\n    #Here is the place to run some code that needs to be executed after the output has been computed but before the\n    #loss computation.\n    #Example: putting the output back in FP32 when training in mixed precision.\n\n    #If we return something, that will be the new value for the output.\n\n    def on_backward_begin(self, **kwargs)->None: pass\n    #Here is the place to run some code that needs to be executed after the loss has been computed but before the\n    #gradient computation.\n    #Example: reg_fn in RNNs.\n\n    #If we return something, that will be the new value for loss. Since the recorder is always called first,\n    #it will have the raw loss.\n\n    def on_backward_end(self, **kwargs)->None: pass\n    #Here is the place to run some code that needs to be executed after the gradients have been computed but\n    #before the optimizer is called.\n    #Example: deal with weight_decay in AdamW\n\n    def on_step_end(self, **kwargs)->None: pass\n    #Here is the place to run some code that needs to be executed after the optimizer step but before the gradients\n    #are zeroed\n    #Example: can't think of any that couldn't be done in on_batch_end but maybe someone will need this one day.\n\n    def on_batch_end(self, **kwargs)->None: pass\n    #Here is the place to run some code that needs to be executed after a batch is fully done.\n    #Example: change the values of the hyperparameters (if we don't do it on_batch_begin instead)\n\n    #If we return true, the current epoch is interrupted (example: lr_finder stops the training when the loss explodes)\n\n    def on_epoch_end(self, **kwargs)->bool: return False\n    #Here is the place to run some code that needs to be executed at the end of an epoch.\n    #Example: Save the model if we have a new best validation loss\/metric.\n\n    #If we return true, the training stops (example: early stopping)\n\n    def on_train_end(self, **kwargs)->None: pass\n    #Here is the place to tidy everything. It's always executed even if there was an error during the training loop,\n    #and has an extra kwarg named exception to check if there was an exception or not.\n    #Examples: save log_files, load best model found during training\n","3f3b3f98":"# Clean up\n!rm -rf data\n!rm -rf nb_001b.py\n!rm -rf nb_002.py","7f101592":"## Callbacks\n\nNow that's it's easy to set and change the hyperparameters in the optimizer, we need a scheduler to change it. To keep the training loop readable as possible we don't want to handle of this stuff readable, so we'll use callbacks.","d3723caa":"## Eye of Sauron\nTo grasp the potential of callbacks, here's a full example:","620db858":"To be more convenient and make the code of the training loop cleaner, we'll create a class to handle the callbacks. It will keep track of everything the training loop sends it, then pack itin the kwargs of each callback","7f496719":"## Setting hyperparameters easily\nWe want an optimizer with an easy way to set hyperparameters: they're all properties and we define custom setters to handle the different names in pytorch optimizers. We weill define a Wrapper for all optimizers within which we will define each parameter's setter functions. This allows us to set default value for each hyperparameter but to also easily edit it while experimenting.","473ba679":"## Setup","b2ac0f84":"# Hyperparameters and callbacks\n\nSource: https:\/\/github.com\/fastai\/fastai_docs\/blob\/master\/dev_nb\/004_callbacks.ipynb","0a97560e":"The idea is to have a callback between every line of the training loop, that way every callback we need to add will be treated there and not inside. We also add metrics right after calculating the loss.","4bb7460b":"## 1cycle\n\nWe will now we build a 1cycle scheduler to train our network. To learn more about the 1cycle technique for training neural networks check out Leslie Smith's [paper](https:\/\/arxiv.org\/pdf\/1803.09820.pdf) and for a more graphical and intuitive explanation check out Sylvain Gugger's [post](https:\/\/sgugger.github.io\/the-1cycle-policy.html).\n\nWe will first define some annealing functions as options to describe how to progressively move a parameter from a start value to an end value. We will also define a Stepper function that will apply our annealing function (default is linear) to our learning rate and momentum to get a learning rate and momentum value for each step in the training.\n\nWe will then build a callback that actually implements our one cycle policy and changes the parameters accordingly.\n\nThe one cycle policy has three steps:\n\n1. We progressively increase our learning rate from `lr_max\/div_factor` to `lr_max` and at the same time we progressively decrease our momentum from `mom_max` to `mom_min`.\n\n2. We do the exact opposite: we progressively decrease our learning rate from `lr_max` to `lr_max\/div_factor` and at the same time we progressively increase our momentum from `mom_min` to `mom_max`.\n\n3. We further decrease our learning rate from `lr_max\/div_factor` to `lr_max\/(div_factor x 100)` and we keep momentum steady at `mom_max`.\n\nWe usually do steps 1 and 2 for an equal amount of iterations that together make ~90% of total iterations (in this case, we chose 45% each totalling 90%). The remaining iterations are used for step 3.\n\nNote: Each of these transitions (i.e. how do we get from one value to another) is described by the annealing function of choice.","30affd44":"More generally, an API that allows you to create your own schedules.","18e33647":"First callback: it records the important values, updates the progress bar and prints out the epoch and validation loss as the training progresses. The important values we save during training such as losses and hyper-parameters will be used for future plots (lr_finder, plot of the LR\/mom schedule). We will also add the plotting tools that will be used over and over again when training models.","38259cc9":"## Learning Rate Finder"}}