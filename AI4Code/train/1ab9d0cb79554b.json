{"cell_type":{"8cfff33e":"code","78f35f00":"code","cd264a06":"code","6750ab8d":"code","c20b4454":"code","a0c0e6cb":"markdown","efe76466":"markdown","24c93ff7":"markdown"},"source":{"8cfff33e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78f35f00":"from PIL import Image\nimport pytesseract\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2","cd264a06":"text = pytesseract.image_to_string(Image.open('..\/input\/text-extraction\/text1.jpg'))\n\nprint(text)","6750ab8d":"# Import the image and convert to RGB \nimg = cv2.imread('..\/input\/text-extraction\/text2.jpg')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n# Plot the image with different kernel sizes\nkernels = [5, 11, 17]\nfig, axs = plt.subplots(nrows = 1, ncols = 3, figsize = (20, 20))\nfor ind, s in enumerate(kernels):\n    img_blurred = cv2.blur(img, ksize = (s, s))\n    ax = axs[ind]\n    ax.imshow(img_blurred)\n    ax.axis('off')\nplt.show()","c20b4454":"# Blur the image \nimg = cv2.imread('..\/input\/text-extraction\/text2.jpg')\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nimg_0 = cv2.blur(img, ksize = (7, 7))\nimg_1 = cv2.GaussianBlur(img, ksize = (7, 7), sigmaX = 0)   \nimg_2 = cv2.medianBlur(img, 7)\nimg_3 = cv2.bilateralFilter(img, 7, sigmaSpace = 75, sigmaColor =75)\n# Plot the images\nimages = [img_0, img_1, img_2, img_3]\nfig, axs = plt.subplots(nrows = 1, ncols = 4, figsize = (20, 20))\nfor ind, p in enumerate(images):\n    ax = axs[ind]\n    ax.imshow(p)\n    ax.axis('off')\nplt.show()","a0c0e6cb":"Extract English words from pictures","efe76466":"Blurring\nThe goal of fuzzification is noise reduction. We must pay special attention to the following: if we apply edge detection algorithms to high-resolution images, we will get a lot of detection results that we are not interested in; Conversely, if we blur the image too much, we lose the data. Therefore, we need to find an appropriate amount of ambiguity so as not to lose the ideal edge.\nThe Average blurring replaces the center value with the Average of all pixel values in a given kernel region. For example, given a kernel of size 5X5, we calculate the average of the convolution results and place the results in the center of the given region. If we increase the size of the kernel, the pixel values will become more normalized. So the image becomes more and more blurry.","24c93ff7":"Medium Blurring is the same as Average Blurring, except that it uses the median instead of the Average. Gaussian blurring is a kernel function that uses \"values\" with Gaussian distribution. Since these values are generated by the Gaussian function, its arguments require a sigma value. Bilateral Filtering is an advanced version of Gaussian blur. Blurring not only dissolves noise, but also smoothes edges. Bilateral filter can keep edge sharpening while removing noise."}}