{"cell_type":{"abc1113c":"code","aea02c75":"code","e9941d4c":"code","14b876a5":"code","7a778c23":"code","ce06d801":"code","91580e19":"code","6084878c":"code","8a2595b8":"code","90a0b278":"code","0e725ed8":"code","cdcb3868":"code","d2218fe8":"code","95d3d87a":"code","29f7c576":"code","fb000362":"code","30514714":"code","d7112124":"code","6a05557b":"code","15d763e0":"code","e49fbf01":"code","97e10426":"code","a68c7493":"code","56160ad8":"code","24215114":"markdown","c6c34eda":"markdown","c10f2eaf":"markdown","da081d25":"markdown","c5d27921":"markdown","fcfd521a":"markdown"},"source":{"abc1113c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LinearRegression \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aea02c75":"# Read the Data\nX_full = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nX_test_full = pd.read_csv ('\/kaggle\/input\/titanic\/test.csv')\n\nX_full.info()","e9941d4c":"X_full.isnull().sum()","14b876a5":"# Separate target from predictors\ny = X_full.Survived\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",'Embarked','Fare','Age']\nX = pd.get_dummies(X_full[features])\nX_test = pd.get_dummies(X_test_full[features])\n\n# Break off validation set from training data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)","7a778c23":"X_train.head()","ce06d801":"sns.heatmap(X_train.isnull() ,yticklabels=False ,cbar=False , cmap='viridis')","91580e19":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (X_train.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","6084878c":"from sklearn.impute import SimpleImputer\n\n# Fill in the lines below: imputation\nmy_imputer = SimpleImputer() # Your code here\nfinal_X_train = pd.DataFrame(my_imputer.fit_transform(X_train))\nfinal_X_valid = pd.DataFrame(my_imputer.transform(X_valid))\n\n# Fill in the lines below: imputation removed column names; put them back\nfinal_X_train.columns = X_train.columns\nfinal_X_valid.columns = X_valid.columns","8a2595b8":"final_X_train.isnull().sum()","90a0b278":"final_X_valid.isnull().sum()","0e725ed8":"#def cabin(cabin_n,letter):\n # if  (str(cabin_n).find(letter) != -1):\n  #  return 1\n  #else :\n   # return 0","cdcb3868":"#train_data['cabin_a'] = train_data['Cabin'].apply(lambda x: cabin(x,'A'))\n#train_data['cabin_b'] = train_data['Cabin'].apply(lambda x: cabin(x,'B'))\n#train_data['cabin_c'] = train_data['Cabin'].apply(lambda x: cabin(x,'C'))","d2218fe8":"#cabin_a = train_data.loc[train_data.cabin_a == 1 ]\n#cabin_a_s = train_data.loc[train_data.cabin_a == 1 ][\"Survived\"]\n#rate_cabin_a = sum(cabin_a_s)\/len(cabin_a)\n\n#print(\"% of cabin_a who survived:\", rate_cabin_a)","95d3d87a":"sns.barplot(x='Sex',y='Survived',hue='Pclass' , data=train_data )","29f7c576":"X_test.isnull().sum()","fb000362":"X_test.shape","30514714":"final_X_test = pd.DataFrame(my_imputer.transform(X_test))\n\n# Fill in the lines below: imputation removed column names; put them back\nfinal_X_test.columns = X_test.columns","d7112124":"#test_data['Age'].fillna(test_data['Age'].median(), inplace = True)\n#test_data['Fare'].fillna(test_data['Fare'].median(), inplace = True)\n#test_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace = True)\n#test_data['Cabin'].fillna(0, inplace = True)","6a05557b":"final_X_test.isnull().sum()","15d763e0":"final_X_test.shape","e49fbf01":"final_X_test.head()","97e10426":"# Define the models\nmodel_1 = RandomForestRegressor(n_estimators=50, random_state=0)\nmodel_2 = RandomForestRegressor(n_estimators=100, random_state=0)\nmodel_3 = RandomForestRegressor(n_estimators=100, criterion='mae', random_state=0)\nmodel_4 = RandomForestRegressor(n_estimators=200, min_samples_split=10, random_state=0)\nmodel_5 = RandomForestRegressor(n_estimators=50, max_depth=7, random_state=0)\nmodel_6 = DecisionTreeRegressor(random_state=0) \nmodel_7 = RandomForestClassifier(random_state=0)\nmodel_8 = LinearRegression()\nmodel_9 = RandomForestClassifier(n_estimators=100, max_depth=7, random_state=0)\nmodel_10 = RandomForestClassifier(n_estimators=50, max_depth=7, random_state=0)\n\nmodels = [model_1, model_2, model_3, model_4, model_5, model_6,model_7, model_8, model_9, model_10]","a68c7493":"from sklearn.metrics import mean_absolute_error\n\n# Function for comparing different models\ndef score_model(model, X_t=X_train, X_v=X_valid, y_t=y_train, y_v=y_valid):\n    model.fit(X_t, y_t)\n    accuracy = model.score(X_v,y_v)\n    return accuracy\n\nfor i in range(0, len(models)):\n    accuracy = score_model(models[i],final_X_train,final_X_valid,y_train, y_valid)\n    print(\"Model %d score: {}\".format(accuracy))","56160ad8":"model = RandomForestClassifier(n_estimators=50, max_depth=7, random_state=0)\nmodel.fit(final_X_train, y_train)\npredictions = model.predict(final_X_test)\n\noutput = pd.DataFrame({'PassengerId': X_test_full.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission_006.csv', index=False)\nprint(\"Your submission was successfully saved!\")","24215114":"***Fill the Missing Data***","c6c34eda":"# Step 1: Preliminary investigation\n","c10f2eaf":"# **Machine Learning Model**","da081d25":"**Evalute several models**","c5d27921":"\n\ny = train_data['Survived']\n\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\",'Embarked','Fare','Age']\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nprint(X.columns)\nprint(X_test.columns)\n\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission_004.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n","fcfd521a":"# SETUP"}}