{"cell_type":{"755e4060":"code","996a463f":"code","8a1afb32":"code","116591d5":"code","14ac3dbc":"code","e60e172f":"code","52d68aba":"code","efe455a2":"code","bc25d4d4":"code","1364f322":"code","8d2710b9":"code","76fee0f4":"code","1340d0bb":"code","2e707698":"code","4841249c":"code","1eaaa041":"code","6b64ef11":"code","5e1e8c7e":"code","8e36adea":"code","97996ab6":"code","a9c803d0":"code","165c71df":"code","b1a893ca":"code","62371cf5":"code","4135ef7e":"code","f66b097e":"code","03ec6090":"code","94ee995e":"code","283fbf5a":"code","d1e83b48":"code","7f56ec9c":"code","1076f9f7":"code","28d04314":"code","cba7d782":"code","c25f387e":"markdown","8b1ae178":"markdown","e15404ef":"markdown","a5a9043e":"markdown","522343ff":"markdown","950af8ac":"markdown","03b46eff":"markdown","6587037e":"markdown","4a7be688":"markdown"},"source":{"755e4060":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","996a463f":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","8a1afb32":"import plotly.graph_objs as go","116591d5":"# Load libraries\nimport pandas\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split \nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","14ac3dbc":"train_data = pd.read_csv('\/kaggle\/input\/the-insurance-company-tic-benchmark\/tic_2000_train_data.csv')\neval1 = pd.read_csv('\/kaggle\/input\/the-insurance-company-tic-benchmark\/tic_2000_eval_data.csv')\ntarget = pd.read_csv('\/kaggle\/input\/the-insurance-company-tic-benchmark\/tic_2000_target_data.csv')","e60e172f":"train_data.describe()","52d68aba":"#Correlation matrix\ncorrmat = train_data.corr()\nfig = plt.figure(figsize = (16, 16))\n\nsns.heatmap(corrmat, vmax = .8, square = True)\nplt.show()","efe455a2":"cols=list(train_data.columns)\ncols","bc25d4d4":"colors=['#b84949', '#ff6f00', '#ffbb00', '#9dff00', '#329906', '#439c55', '#67c79e', '#00a1db', '#002254', '#5313c2', '#c40fdb', '#e354aa']","1364f322":"k=0\nfor i in cols:\n    train_data.groupby(i)['CARAVAN'].count().plot(kind='bar', grid=True, color=colors[k%12],\n    figsize=(10, 7)).set_ylabel('Count')\n    #s='images\/'+i+'.png'\n    #plt.savefig(s)\n    k+=1\n    plt.show()","8d2710b9":"cols1=list(eval1.columns)","76fee0f4":"for i in cols1:\n    df=train_data.groupby(['CARAVAN', i])['CARAVAN'].count()\n    df = df.unstack().fillna(0)\n    ax = (df).plot(\n    kind='bar',\n    figsize=(10, 7),\n    grid=True\n    )\n    ax.set_ylabel('Count')\n    plt.show()","1340d0bb":"df_1=train_data.copy()","2e707698":"X = df_1.drop(['CARAVAN'], axis=1).values\ny = df_1['CARAVAN'].values","4841249c":"print(X.shape)\nprint(y.shape)","1eaaa041":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","6b64ef11":"lr = LogisticRegression(solver='lbfgs')\nlr.fit(X_train, y_train)\npredictions = lr.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","5e1e8c7e":"lr = LogisticRegression(solver='lbfgs')\nlr.fit(X_train, y_train)\npredictions = lr.predict(eval1)\nprint(accuracy_score(target, predictions))\nprint(confusion_matrix(target, predictions))\nprint(classification_report(target, predictions))","8e36adea":"CART = DecisionTreeClassifier()\nCART.fit(X_train, y_train)\npredictions = CART.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","97996ab6":"CART = DecisionTreeClassifier()\nCART.fit(X_train, y_train)\npredictions = CART.predict(eval1)\nprint(accuracy_score(target, predictions))\nprint(confusion_matrix(target, predictions))\nprint(classification_report(target, predictions))","a9c803d0":"KNN = KNeighborsClassifier()\nKNN.fit(X_train, y_train)\npredictions = KNN.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","165c71df":"KNN = KNeighborsClassifier()\nKNN.fit(X_train, y_train)\npredictions = KNN.predict(eval1)\nprint(accuracy_score(target, predictions))\nprint(confusion_matrix(target, predictions))\nprint(classification_report(target, predictions))","b1a893ca":"lda = LinearDiscriminantAnalysis()\nlda.fit(X_train, y_train)\npredictions = lda.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","62371cf5":"lda = LinearDiscriminantAnalysis()\nlda.fit(X_train, y_train)\npredictions = lda.predict(eval1)\nprint(accuracy_score(target, predictions))\nprint(confusion_matrix(target, predictions))\nprint(classification_report(target, predictions))","4135ef7e":"SVM = SVC(gamma='auto')\nSVM.fit(X_train, y_train)\npredictions = SVM.predict(X_test)\nprint(accuracy_score(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","f66b097e":"SVM = SVC(gamma='auto')\nSVM.fit(X_train, y_train)\npredictions = SVM.predict(eval1)\nprint(accuracy_score(target, predictions))\nprint(confusion_matrix(target, predictions))\nprint(classification_report(target, predictions))","03ec6090":"#RandomForest\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Create the model with 100 trees\nmodel = RandomForestClassifier(n_estimators=100, \n                               bootstrap = True,\n                               max_features = 'sqrt')\n# Fit on training data\nmodel.fit(X_train, y_train)","94ee995e":"# Actual class predictions\nrf_predictions = model.predict(X_test)\n# Probabilities for each class\nrf_probs = model.predict_proba(X_test)[:, 1]","283fbf5a":"\nfrom sklearn.metrics import roc_auc_score\n\n# Calculate roc auc\nroc_value = roc_auc_score(y_test, rf_probs)","d1e83b48":"from sklearn.ensemble import RandomForestClassifier\nclassifier = RandomForestClassifier(n_estimators = 50)\nclassifier.fit(X_train, y_train)","7f56ec9c":"y_pred = classifier.predict(X_test)","1076f9f7":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(y_test, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(y_test,y_pred)\nprint(\"Accuracy:\",result2)","28d04314":"y_pred = classifier.predict(eval1)","cba7d782":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nresult = confusion_matrix(target, y_pred)\nprint(\"Confusion Matrix:\")\nprint(result)\nresult1 = classification_report(target, y_pred)\nprint(\"Classification Report:\",)\nprint (result1)\nresult2 = accuracy_score(target, y_pred)\nprint(\"Accuracy:\",result2)","c25f387e":"Correlation Matrix","8b1ae178":"LDA","e15404ef":"To find how other parameters affect CARAVAN","a5a9043e":"Logistic Regression","522343ff":"SVM","950af8ac":"Univariate Analysis","03b46eff":"KNN","6587037e":"Random Forest","4a7be688":"Decision Tree"}}