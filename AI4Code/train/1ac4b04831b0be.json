{"cell_type":{"67e72386":"code","8fd2a505":"code","e2bf87b1":"code","a464a3cd":"code","49c334b1":"code","7207677e":"code","970ad6b1":"code","f29042c9":"code","61c063e7":"code","3971417b":"code","6d068831":"code","e0bfbe1d":"code","7df0c9aa":"code","32bf14b2":"code","ac811396":"code","c6739bbb":"code","c51f8675":"code","66ce0af6":"code","d1ca79ab":"code","df0797ad":"code","cd339d2b":"code","83b5091d":"code","f98d3f03":"code","860a1d9f":"code","538ca228":"code","78f0c9e2":"code","7a1b3167":"code","2ca743b0":"code","b8cf7171":"code","b3f9ac5a":"code","b8251114":"code","9b44993d":"code","e9f61956":"code","3312fbb8":"code","4331688c":"code","a3f62604":"code","1c038590":"code","52b64aa2":"code","b7cfa92f":"code","cda2787e":"code","310e0127":"code","c7b28529":"code","9a50e2d6":"code","ae2df073":"code","cd31055f":"code","0e5a6104":"code","1c91193a":"code","1b6b4286":"code","24ed7899":"code","de72f4a0":"code","70802799":"code","8b76096b":"code","aa1ddca6":"code","086b9569":"code","09c1d06b":"code","e15e37d1":"code","92209449":"code","b310a1b4":"code","1f4d26f1":"code","44631bf7":"code","e54599fc":"code","af9de4a5":"code","32b978a8":"code","3f116a89":"code","f3338a2c":"code","44a37414":"code","5b127cde":"code","ed1f478b":"code","7bfa9217":"code","94c405a0":"markdown","002f80de":"markdown","4674c70e":"markdown","e92efb4d":"markdown","ff97fac5":"markdown","7178d646":"markdown","fcaa8368":"markdown","4560cf18":"markdown","98587a99":"markdown","88f424e1":"markdown","ca0b02a9":"markdown","dc2c234a":"markdown","ebe18d2c":"markdown","fa4e06d4":"markdown","055961dd":"markdown","16e83ab8":"markdown","4782cff4":"markdown","cdf27d57":"markdown","6fb562d2":"markdown","73008d8e":"markdown","73c35c5b":"markdown","b8befb7d":"markdown","245524bf":"markdown","8b091455":"markdown","a938452e":"markdown","c24b8be2":"markdown","caa08d58":"markdown","28049b24":"markdown","278ab62c":"markdown","44ca1276":"markdown","f3eac7ea":"markdown","b8a14aec":"markdown","3dee3dc3":"markdown","137c03d9":"markdown","9cbc4ec1":"markdown","a9afa458":"markdown","7274a621":"markdown"},"source":{"67e72386":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fd2a505":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go","e2bf87b1":"drink = pd.read_csv(\"..\/input\/starbucks-menu\/starbucks_drinkMenu_expanded.csv\")\ndrink.head()\n###The original file can be accessed in this link: https:\/\/en.starbucksromania.ro\/media\/nutrition_tcm71-14482.pdf### ","a464a3cd":"for col in drink.columns:\n    print(col)","49c334b1":"drink.columns = drink.columns.str.lstrip()\n\nfor col in drink.columns:\n    print(col)","7207677e":"drink.columns","970ad6b1":"drink.columns = drink.columns.str.rstrip()","f29042c9":"drink.columns","61c063e7":"drink.isna().any()","3971417b":"drink.isnull().sum()","6d068831":"drink.isnull().any(axis=1)\ndrink[drink.isnull().any(axis=1)]","e0bfbe1d":"new_drink = drink.fillna(125)","7df0c9aa":"new_drink.loc[[158]]","32bf14b2":"new_drink.isna().any()","ac811396":"new_drink.info()","c6739bbb":"print(new_drink[\"Total Fat (g)\"].unique())","c51f8675":"new_drink.loc[new_drink['Total Fat (g)'] == '3 2']","66ce0af6":"new_drink[\"Total Fat (g)\"] = new_drink[\"Total Fat (g)\"].str.replace('3 2','16')\nprint(new_drink[\"Total Fat (g)\"].unique())","d1ca79ab":"new_drink.iloc[[237]]","df0797ad":"new_drink['Total Fat (g)'] = new_drink['Total Fat (g)'].astype(float)\nprint(new_drink[\"Total Fat (g)\"].unique())","cd339d2b":"print(new_drink['Total Fat (g)'].dtypes)","83b5091d":"print(new_drink[\"Vitamin A (% DV)\"].unique())","f98d3f03":"new_drink['Vitamin A (% DV)'] = new_drink['Vitamin A (% DV)'].str.replace('%', '')\n\nprint(new_drink[\"Vitamin A (% DV)\"].unique())","860a1d9f":"new_drink['Vitamin A (% DV)'] = new_drink['Vitamin A (% DV)'].astype(int)\nprint(new_drink[\"Vitamin A (% DV)\"].unique())","538ca228":"print(new_drink['Vitamin A (% DV)'].dtypes)","78f0c9e2":"print(new_drink[\"Vitamin C (% DV)\"].unique())","7a1b3167":"new_drink['Vitamin C (% DV)'] = new_drink['Vitamin C (% DV)'].str.replace('%', '')\n\nprint(new_drink[\"Vitamin C (% DV)\"].unique())","2ca743b0":"new_drink['Vitamin C (% DV)'] = new_drink['Vitamin C (% DV)'].astype(int)\nprint(new_drink[\"Vitamin C (% DV)\"].unique())","b8cf7171":"print(new_drink['Vitamin C (% DV)'].dtypes)","b3f9ac5a":"print(new_drink[\"Calcium (% DV)\"].unique())","b8251114":"new_drink['Calcium (% DV)'] = new_drink['Calcium (% DV)'].str.replace('%', '')\n\nprint(new_drink[\"Calcium (% DV)\"].unique())","9b44993d":"new_drink['Calcium (% DV)'] = new_drink['Calcium (% DV)'].astype(int)\nprint(new_drink[\"Calcium (% DV)\"].unique())","e9f61956":"print(new_drink['Calcium (% DV)'].dtypes)","3312fbb8":"print(new_drink[\"Iron (% DV)\"].unique())","4331688c":"new_drink['Iron (% DV)'] = new_drink['Iron (% DV)'].str.replace('%', '')\nprint(new_drink[\"Iron (% DV)\"].unique())","a3f62604":"new_drink['Iron (% DV)'] = new_drink['Iron (% DV)'].astype(float)\nprint(new_drink[\"Iron (% DV)\"].unique())","1c038590":"print(new_drink['Iron (% DV)'].dtypes)","52b64aa2":"print(new_drink[\"Caffeine (mg)\"].unique())","b7cfa92f":"new_drink.loc[new_drink['Caffeine (mg)'] == 'varies']","cda2787e":"new_drink['Caffeine (mg)'] = new_drink['Caffeine (mg)'].replace('varies', '50')\n\nprint(new_drink[\"Caffeine (mg)\"].unique())","310e0127":"new_drink.loc[new_drink['Caffeine (mg)'] == 'Varies']","c7b28529":"new_drink.iloc[102:106] = new_drink.iloc[102:106].replace('Varies', '10')\nnew_drink.iloc[102:106]","9a50e2d6":"new_drink.iloc[167:172] = new_drink.iloc[167:172].replace('Varies', '20')\nnew_drink.iloc[167:172]","ae2df073":"new_drink.iloc[172] = new_drink.iloc[172].replace('Varies', '30')\nnew_drink.iloc[[172]]","cd31055f":"print(new_drink[\"Caffeine (mg)\"].unique())","0e5a6104":"new_drink['Caffeine (mg)'] = new_drink['Caffeine (mg)'].astype(int)\nprint(new_drink[\"Caffeine (mg)\"].unique())","1c91193a":"print(new_drink['Caffeine (mg)'].dtypes)","1b6b4286":"new_drink.info()","24ed7899":"new_drink.Beverage_category.unique()","de72f4a0":"plt.style.use('default')\nplt.figure(figsize=(10,6),edgecolor='1',dpi=100)\na=sns.countplot(x='Beverage_category',color='darkgreen',data=new_drink)\n\n\nxticks=plt.xticks(rotation=65,family='serif')\nyticks=plt.yticks(family='serif')\n\nplt.xlabel(new_drink['Beverage_category'].all(),font='serif')\nplt.ylabel('figure',font='serif')\n\na.spines['bottom'].set_color('gray')\na.spines['left'].set_color('gray')\nsns.despine()","70802799":"new_drink.Beverage.unique()","8b76096b":"px.density_heatmap(x='Beverage_category',y='Calories',data_frame=new_drink,width=900)","aa1ddca6":"plt.style.use('ggplot')\nplt.figure(figsize=(8,5),dpi=80)\nsns.scatterplot(x='Calories',y='Sugars (g)',data=new_drink,alpha=0.8,s=60)\nplt.title('Calories vs sugars',x=0.5,y=1.05)","086b9569":"new_nutrients= new_drink.drop(['Trans Fat (g)','Saturated Fat (g)','Sodium (mg)','Total Carbohydrates (g)',\n                            'Cholesterol (mg)','Dietary Fibre (g)','Vitamin A (% DV)','Vitamin C (% DV)','Calcium (% DV)','Iron (% DV)'],axis=1)\nnew_nutrients.head()","09c1d06b":"Hot_drink = new_nutrients.drop(new_nutrients.index[154:]) # index starts from 0, so 154 is actually number 155 so 155 ~ at the end.\nHot_drink.head()","e15e37d1":"Hot_drink.iloc[-1] #check if it is the last Hot_drink","92209449":"Cold_drink = new_nutrients.drop(new_nutrients.index[0:156]) # 0~155\nCold_drink.head()","b310a1b4":"calories=pd.DataFrame(new_drink.groupby('Beverage_category')['Calories'].mean())\n        \ncolors=['gray']*9\ncolors[7]='#eb7a34'\ncolors[6]='blue'\ncolors[2]='lightpink'\nfig = go.Figure(data=[go.Bar(\n    x=calories.index,\n    y=calories['Calories'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Type')\nfig.update_yaxes(title='Avg Calories')\nfig.show()","1f4d26f1":"calories=pd.DataFrame(Hot_drink.groupby('Beverage')['Calories'].mean())\n        \ncolors=['gray']*17\ncolors[16]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=calories.index,\n    y=calories['Calories'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Hot_drink')\nfig.update_yaxes(title='Avg Calories')\nfig.show()","44631bf7":"Total_fat=pd.DataFrame(Hot_drink.groupby('Beverage')['Total Fat (g)'].mean())\n\ncolors=['gray']*17\ncolors[16]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Total_fat.index,\n    y=Total_fat['Total Fat (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Hot_drink')\nfig.update_yaxes(title='Avg Total_fat')\nfig.show()","e54599fc":"Sugars=pd.DataFrame(Hot_drink.groupby('Beverage')['Sugars (g)'].mean())\n        \ncolors=['gray']*17\ncolors[5]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Sugars.index,\n    y=Sugars['Sugars (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Hot_drink')\nfig.update_yaxes(title='Avg Sugars')\nfig.show()","af9de4a5":"Protein=pd.DataFrame(Hot_drink.groupby('Beverage')['Protein (g)'].mean())\n        \ncolors=['gray']*17\ncolors[16]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Protein.index,\n    y=Protein['Protein (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Hot_drink')\nfig.update_yaxes(title='Avg Protein')\nfig.show()","32b978a8":"Caffeine=pd.DataFrame(Hot_drink.groupby('Beverage')['Caffeine (mg)'].mean())\n        \ncolors=['gray']*17\ncolors[0]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Caffeine.index,\n    y=Caffeine['Caffeine (mg)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Hot_drink')\nfig.update_yaxes(title='Avg Caffeine')\nfig.show()","3f116a89":"calories=pd.DataFrame(Cold_drink.groupby('Beverage')['Calories'].mean())\n        \ncolors=['gray']*17\ncolors[7]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=calories.index,\n    y=calories['Calories'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Cold_drink')\nfig.update_yaxes(title='Avg Calories')\nfig.show()","f3338a2c":"Total_fat=pd.DataFrame(Cold_drink.groupby('Beverage')['Total Fat (g)'].mean())\n\ncolors=['gray']*17\ncolors[7]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Total_fat.index,\n    y=Total_fat['Total Fat (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Cold_drink')\nfig.update_yaxes(title='Avg Total_fat')\nfig.show()","44a37414":"Sugars=pd.DataFrame(Cold_drink.groupby('Beverage')['Sugars (g)'].mean())\n        \ncolors=['gray']*17\ncolors[7]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Sugars.index,\n    y=Sugars['Sugars (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Cold_drink')\nfig.update_yaxes(title='Avg Sugars')\nfig.show()","5b127cde":"Protein=pd.DataFrame(Cold_drink.groupby('Beverage')['Protein (g)'].mean())\n        \ncolors=['gray']*17\ncolors[0]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Protein.index,\n    y=Protein['Protein (g)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Cold_drink')\nfig.update_yaxes(title='Avg Protein')\nfig.show()","ed1f478b":"Caffeine=pd.DataFrame(Cold_drink.groupby('Beverage')['Caffeine (mg)'].mean())\n        \ncolors=['gray']*17\ncolors[4]='#eb7a34'\nfig = go.Figure(data=[go.Bar(\n    x=Caffeine.index,\n    y=Caffeine['Caffeine (mg)'],\n    marker_color=colors\n)])\nfig.update_layout(width=700,height=500)\nfig.update_xaxes(title='Cold_drink')\nfig.update_yaxes(title='Avg Caffeine')\nfig.show()","7bfa9217":"from __future__ import print_function\nfrom ipywidgets import interact, interactive, fixed, interact_manual, Dropdown\nimport ipywidgets as widgets\n\ndf = pd.DataFrame(new_drink, columns= ['Beverage_category', 'Beverage', 'Beverage_prep', 'Calories',\n'Total Fat (g)', 'Trans Fat (g) ', 'Saturated Fat (g)', 'Sodium (mg)',\n'Total Carbohydrates (g) ', 'Cholesterol (mg)', 'Dietary Fibre (g)',\n'Sugars (g)', 'Protein (g) ', 'Vitamin A (% DV) ', 'Vitamin C (% DV)',\n'Calcium (% DV) ', 'Iron (% DV) ', 'Caffeine (mg)'])\n\ncurrent_cal = 0\ntotal_cal = 0\nmoredrinks = True\nwhile(moredrinks == True):\n\n    drinklist = widgets.Dropdown(\n    options= (new_drink[\"Beverage\"].unique()),\n    description= 'Drink',\n    )\n\n    display(drinklist)\n\n    drinkselect = input(\"Drink:\")\n    Drinkdata = df.loc[df['Beverage'] == drinkselect]\n    Drinkdatadis = widgets.Dropdown(\n    options= (Drinkdata[\"Beverage_prep\"]),\n    description= 'Prep',\n    )\n\n    display(Drinkdatadis)\n  \n    sizeselect = input(\"Prep:\")\n    Drinksize = Drinkdata.loc[Drinkdata['Beverage_prep'] == sizeselect]\n    current_cal = int(Drinksize['Calories'])\n    print(current_cal)\n    total_cal += current_cal\n    user_choice = input(\"Another drink? Y\/N\")\n    if (user_choice == 'N'):\n        moredrinks = False\n\nprint (\"Total Calories for selected drinks: \", total_cal)","94c405a0":"Above we display the number of items for each 'Type' using countplot. We are able to observe that 'Classic Espresso Drinks' has most number of items, following 'Tazo Tea Drinks' and 'Signature Espresso Drinks'.","002f80de":"We would like to go over the same process for 'Calcium (% DV)'","4674c70e":"Since 'Tazo\u00ae Full-Leaf Tea Latte' is the only beverage with 'varies' for 'Caffeine (mg)', let's assume it's 50 ","e92efb4d":"Now we need to check the data type for each column","ff97fac5":"We would like to find out which row has the null value","7178d646":"Finally, the dataset is now ready for data plotting.","fcaa8368":"First, we would like to get rid of the '%' sign","4560cf18":"The value '3 2' has been replaced to '16'\n\nNow let's convert the values into float-type","98587a99":"Null value(s) exist for the column \"Caffeine (mg)\"\n\nReference:\nhttps:\/\/stackoverflow.com\/questions\/29530232\/how-to-check-if-any-value-is-nan-in-a-pandas-dataframe","88f424e1":"Analysis of Nutrients\n\nAverage Calories distribution for whole Type\n\nBelow we observe the hightest amount of calories for 'Smoothies', followed by 'Frappuccino blended coffee' and 'Signature Espresso Drinks'\n\nlike this, we are going to analyze 5 different tpyes of nutrients called 'Calories', 'Total Fat (g)', 'Sugars (g)', 'Protein (g)', 'Caffeine (mg)' for Hot_drink and Cold_dirnk respectively.","ca0b02a9":"There is only one null value\n\nReference: https:\/\/chartio.com\/resources\/tutorials\/how-to-check-if-any-value-is-nan-in-a-pandas-dataframe\/","dc2c234a":"Analyze the Number of Items per Type The heatmap function is another cool way to show the distribution of calories of Beverage_categories for each type.\n\nHere, if you place the cursor on the bar it shows the name of categories.\n\nBelow we can observe that 'Signature Espresso Drinks' and 'Frappuccino Blended Coffee' have generally high calories of coffees among a number of coffees.\n\n'white chocolate mocha venti' has the highest calories.\n![image.png](attachment:93cd9310-b66a-4470-8a8c-525a83dbf24d.png)","ebe18d2c":"Now we would like to check if there are any null values in the dataset","fa4e06d4":"Below we analyze how are Calories and sugars related in linear graph. It is seen that they are strongly positive related.\n","055961dd":"Let's check what the correct value should be\n\nAccording to the Starbucks website the Total Fat should between 11 to 17 (g) depending on the size, so let's assume it's 16","16e83ab8":"We want the data type for 'Total Fat (g)', 'Vitamin A (% DV)', 'Vitamin C (% DV)', 'Calcium (% DV)', 'Iron (% DV)' and 'Caffeine (mg)' to be either integer-type or float-type, otherwise data plotting is not feasible.\n\nWhile we supsect that there is a typo for 'Total Fat (g)', it seems that for the other aforementioned columns the system is interpreting the data-type as object because of the '%' sign.\n\nFirst let's start with checking the unique values for 'Total Fat (g)'.","4782cff4":"Now let's replace the null value with the correct value\n\nReference: https:\/\/www.geeksforgeeks.org\/python-pandas-dataframe-replace\/","cdf27d57":"For 'Trans Fat (g) ', 'Total Carbohydrates (g) ', 'Protein (g) ', 'Vitamin A (% DV) ', 'Calcium (% DV) ', 'Iron (% DV) ', we would like to get rid of the space at the end","6fb562d2":"We could not find the nutrition information that perfectly corresponds to the one in our initial dataset.\n\nReferring to the link below we assumed the caffeine content of the drink is 125 (mg) \n\nhttps:\/\/www.starbucks.com\/menu\/product\/482\/iced?parent=%2Fdrinks%2Fcold-coffees%2Ficed-coffees","73008d8e":"By analyzing those data, we know that the highest 'Calories' and 'Total Fat (g)' were taken by the same beverage,\n\nHowever, for 'Sugars (g)', 'Protein (g)', and 'Caffeine (mg)', it could be taken by different berverages. \n","73c35c5b":"Data plotting will be carried out for Beverages listed below","b8befb7d":"We would like to go over the same process for 'Iron (% DV)'","245524bf":"Convert them to integer-type","8b091455":"All of the values are string-type so we would like to change them to float-type.\n\nBefore we convert them to float-type, we would like to first change '3 2' to '32'.","a938452e":"We will assume the caffeine content for the same beverage category is constant.\n\n(Tazo\u00ae Tea Drinks = 10, Shaken Iced Beverages = 20, Smoothies = 30)\n\n###Do more research and fix the values###","c24b8be2":"We would like to count how many null values there are in the dataset","caa08d58":"We would like to go over the same process for 'Vitamin C (% DV)'","28049b24":"We are going to start from Hot_drink.\n\nIt is observed that generally White Chocolate Mocha has the highest nutrients value among Hot_drink ","278ab62c":"This dataset shows every drink menus from Starbucks and their nutrition information.","44ca1276":"We would like to go over the same process for 'Vitamin A (% DV)'","f3eac7ea":"Now, we are going to see Cold_drink.\n\nIt is observed that generally Java Chip(Without Whipped Cream) has the highest nutrients value among Cold_drink ","b8a14aec":"We would like to go over the same process for 'Caffeine (mg)'","3dee3dc3":"Here, we can see that the null value has been replaced successfully","137c03d9":"For 158th row there is a null value for the column 'Caffeine (mg)'\n \nReference: https:\/\/stackoverflow.com\/questions\/14247586\/how-to-select-rows-with-one-or-more-nulls-from-a-pandas-dataframe-without-listin","9cbc4ec1":"It's confirmed that there is no null value anymore ","a9afa458":"We would like to remove the spaces at the left side of each string if there is any\n\nReference: https:\/\/www.geeksforgeeks.org\/remove-spaces-from-column-names-in-pandas\/","7274a621":"Now, we are going to devide this berverage into 2 groups. One is 'Hot Beverages' another is 'Cold Beverages'.\n\nWe will be observed the average of nutrients of each berverage in each group.\n\nBefore that, we are going to get rid of some nutrients to describe the only tidy data."}}