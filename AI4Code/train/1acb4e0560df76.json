{"cell_type":{"63774e5c":"code","9d59706e":"code","029473a6":"code","5f1560be":"code","d67716e5":"code","bf37472a":"code","0bc32733":"code","94aec873":"code","5d324b8c":"code","accf73e4":"code","0663b79d":"code","021b0613":"code","9d7d3a6b":"code","ca3d46fc":"code","4a9d0cc7":"code","e63642f2":"code","cbd0adda":"code","3407ac30":"code","3232c5dc":"code","e0ac8aec":"code","ebce1438":"code","b9d57984":"code","26b22b53":"code","0992591f":"code","968f92b6":"code","f6051533":"code","a6ddf694":"code","bc8319b8":"code","044abe99":"code","7146041f":"code","91bc6774":"markdown","7b933042":"markdown","6f2c7ce6":"markdown","b7d0389c":"markdown","6fbdd4e5":"markdown","4808a5c8":"markdown","02d2b8f6":"markdown","ae2d7dca":"markdown","d7687be4":"markdown","6b880c3f":"markdown","b36597dc":"markdown","c8464adf":"markdown"},"source":{"63774e5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nimport operator\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9d59706e":"bottle = pd.read_csv(\"..\/input\/calcofi\/bottle.csv\")\nbottle.head(2)","029473a6":"bottle.describe()","5f1560be":"# Extract 2 columns 'T_degC','Salnty' for pure and better showing\nbottle_df = bottle[['T_degC','Salnty']]\n\n# And called again\nbottle_df.columns = ['Temperature', 'Salinity']","d67716e5":"bottle_df = bottle_df[:][:500]      # lets take limit for speed regression calculating\nbottle_df.head()","bf37472a":"# See picture with scatter or plot method\n\n# sns.lmplot(x=\"Salinity\", y=\"Temperature\", data=bottle_df, order=2, ci=None);\nsns.pairplot(bottle_df, kind=\"reg\")","0bc32733":"# see how many null values we have\n\nbottle_df.isnull().sum()","94aec873":"# Drop NaN or missing input numbers\n\nbottle_df.fillna(method='ffill', inplace=True)\n#bottle_df.isnull().sum()","5d324b8c":"# Features chose\n\nX = np.array(bottle_df['Salinity']).reshape(-1, 1)\ny = np.array(bottle_df['Temperature']).reshape(-1, 1)","accf73e4":"# Split data as %20 is test and %80 is train set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 42)","0663b79d":"from sklearn.linear_model import LinearRegression\n\nlin_df = LinearRegression()  \nlin_df.fit(X_train, y_train)","021b0613":"y_pred = lin_df.predict(X_test)                                     # Predict Linear Model\naccuracy_score = lin_df.score(X_test, y_test)                       # Accuracy score\nprint(\"Linear Regression Model Accuracy Score: \" + \"{:.1%}\".format(accuracy_score))\n","9d7d3a6b":"from sklearn.metrics import mean_squared_error,r2_score\n\nprint(\"R2 Score: \" +\"{:.3}\".format(r2_score(y_test, y_pred)));","ca3d46fc":"# Finally draw figure of Linear Regression Model\n\nplt.scatter(X_test, y_test, color='r')\nplt.plot(X_test, y_pred, color='g')\nplt.show()","4a9d0cc7":"mlin_df = LinearRegression()\nmlin_df = mlin_df.fit(X_train, y_train)\nmlin_df.intercept_       # constant b0\nmlin_df.coef_            # variable coefficient","e63642f2":"y_pred = mlin_df.predict(X_train)                                      # predict Multi linear Reg model\nrmse = np.sqrt(mean_squared_error(y_train, mlin_df.predict(X_train)))\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.3}\".format(r2_score(y_train, y_pred)));      # this is test error score","cbd0adda":"# cross validation method is giving better and clear result\n\ncross_val_score(mlin_df, X, y, cv=10, scoring = 'r2').mean()","3407ac30":"mlin_df.score(X_train, y_train)      # r2 value","3232c5dc":"np.sqrt(-cross_val_score(mlin_df, \n                X_train, \n                y_train, \n                cv=10, \n                scoring = 'neg_mean_squared_error')).mean()","e0ac8aec":"# Finally draw figure of Multiple Linear Regression Model\n\nplt.scatter(X_train, y_train, s=100)\n\n# sort the values of x before line plot\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X_train,y_pred), key=sort_axis)\nX_test, y_pred = zip(*sorted_zip)\nplt.plot(X_train, y_train, color='g')\nplt.show()","ebce1438":"from sklearn.preprocessing import PolynomialFeatures\n\npoly_df = PolynomialFeatures(degree = 4)\ntransform_poly = poly_df.fit_transform(X_train)\n\nlinreg2 = LinearRegression()\nlinreg2.fit(transform_poly,y_train)\n\npolynomial_predict = linreg2.predict(transform_poly)\n","b9d57984":"rmse = np.sqrt(mean_squared_error(y_train,polynomial_predict))\nr2 = r2_score(y_train,polynomial_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","26b22b53":"plt.scatter(X_train, y_train, s=50)\n# sort the values of x before line plot\nsort_axis = operator.itemgetter(0)\nsorted_zip = sorted(zip(X_train,polynomial_predict), key=sort_axis)\nX_train, polynomial_predict = zip(*sorted_zip)\nplt.plot(X_train, polynomial_predict, color='m')\nplt.show()","0992591f":"from sklearn.tree import DecisionTreeRegressor\n\ndt_reg = DecisionTreeRegressor()          # create  DecisionTreeReg with sklearn\ndt_reg.fit(X_train,y_train)","968f92b6":"dt_predict = dt_reg.predict(X_train)\n#dt_predict.mean()","f6051533":"plt.scatter(X_train,y_train, color=\"red\")                           # scatter draw\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  \nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.plot(X_grid,dt_reg.predict(X_grid),color=\"g\")                 # line draw\nplt.xlabel(\"Temperature\")\nplt.ylabel(\"Salinity\")\nplt.title(\"Decision Tree Model\")\nplt.show()","a6ddf694":"rmse = np.sqrt(mean_squared_error(y_train,dt_predict))\nr2 = r2_score(y_train,dt_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","bc8319b8":"from sklearn.ensemble import RandomForestRegressor\n\nrf_reg = RandomForestRegressor(n_estimators=5, random_state=0)\nrf_reg.fit(X_train,y_train)\nrf_predict = rf_reg.predict(X_train)\n#rf_predict.mean()","044abe99":"plt.scatter(X_train,y_train, color=\"red\")                           # scatter draw\nX_grid = np.arange(min(np.array(X_train)),max(np.array(X_train)), 0.01)  \nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.plot(X_grid,rf_reg.predict(X_grid),color=\"b\")                 # line draw\nplt.xlabel(\"Temperature\")\nplt.ylabel(\"Salinity\")\nplt.title(\"Decision Tree Model\")\nplt.show()","7146041f":"rmse = np.sqrt(mean_squared_error(y_train,rf_predict))\nr2 = r2_score(y_train,rf_predict)\nprint(\"RMSE Score for Test set: \" +\"{:.2}\".format(rmse))\nprint(\"R2 Score for Test set: \" +\"{:.2}\".format(r2))","91bc6774":"# 4.Decision Tree Regression","7b933042":"# 2.Multiple Linear Regression","6f2c7ce6":"# 3.Polynomial Regression","b7d0389c":"## 2.1.Multiple Linear Regression Model Tunning","6fbdd4e5":"**Result:** When we revise 5 models, best one is Polynomial Regression Model with %92 accuracy score.","4808a5c8":"* This was just for train set and you can also do for test set.","02d2b8f6":"* This was just for train set and you can also do for test set.","ae2d7dca":"# Linear regression (predicting a continuous value):\n\n*** Question:**\n>     CalCOFI data: Over 60 years of oceanographic data: Is there a relationship between water salinity & water temperature? Can you predict the water temperature based on salinity?","d7687be4":"# 5.Random Forest Model","6b880c3f":"* This was just for train set and you can also do for test set.","b36597dc":"* This was just for train set and you can also do for test set.","c8464adf":"# 1.Linear Regression"}}