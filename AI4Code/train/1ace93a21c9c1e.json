{"cell_type":{"9dc82919":"code","1f867c85":"code","59eb4c66":"code","94ff042d":"code","61a46a92":"code","de4b6a57":"code","4fa24690":"code","357889cd":"code","d4443ba7":"code","e34e436a":"code","d0220a91":"code","4a9585e3":"code","785cd272":"code","8c773afa":"code","7d32d955":"code","d319a691":"code","b53d3d9b":"code","f0c88c0b":"code","7c791099":"code","e6e0e2c5":"code","e1df9e77":"code","00cb60a1":"code","4e06f034":"code","7993474d":"code","86a99f8d":"code","90fcc46a":"code","cf6614f7":"code","ba450e24":"code","52633b8f":"code","32c87134":"code","c89d645d":"code","da045122":"code","39d22b92":"code","a874eaa9":"code","0294ba4d":"code","09613da3":"code","724063b9":"code","a4a91f2c":"code","11e49e7f":"code","ba04a729":"code","c36250dd":"code","0b775ddf":"code","d41e4d52":"code","b2bb6dcb":"code","f58e3bd2":"code","4597f20a":"code","8ad31177":"code","078e2e12":"code","02767a20":"code","289f744d":"code","da4bcb9c":"code","c0d85d6b":"code","2d20f25f":"code","a878c2a2":"code","e80d0b17":"code","196a59a0":"code","534aa2e5":"code","455bdfb3":"code","253e1e82":"code","dd424255":"code","d31b4f98":"code","25a4d10d":"code","c651bcac":"code","27f2ca84":"code","822ba653":"code","2726a63c":"code","207bec99":"code","7a424a5a":"code","4454f923":"code","ead90d06":"code","f6a1be81":"code","6061870a":"code","7c9f3f12":"markdown","acf379c2":"markdown","05bda98c":"markdown","fdb06ddc":"markdown","1e171349":"markdown","b7ac4640":"markdown","eaa40d0f":"markdown","82cb8377":"markdown","449547df":"markdown","d7273a82":"markdown","731e5701":"markdown","66aa907e":"markdown","ce54a40b":"markdown","ac5a88ce":"markdown","da63ced5":"markdown","12e40d35":"markdown","1d23a1db":"markdown","9a3df89f":"markdown","7daaa531":"markdown","0eb434f8":"markdown","8a686063":"markdown","18ae27b0":"markdown","f7c14e22":"markdown","388a89c0":"markdown","3692e2c6":"markdown","35b8e4e7":"markdown","5652211e":"markdown","5bdaa8a8":"markdown","3bc99298":"markdown","493bd6dc":"markdown","1aac4562":"markdown","ea6b9b69":"markdown","175bab9a":"markdown","0fbcedb3":"markdown","ff63478b":"markdown","d676cfe4":"markdown","a6b6d39e":"markdown","6667b603":"markdown","0976ed85":"markdown","427ec923":"markdown","7f46bcbc":"markdown","db3b7482":"markdown","8428d3b2":"markdown","97e41bcf":"markdown","040e17c7":"markdown","c87e2412":"markdown","ac0ee882":"markdown","f54488a2":"markdown","1e41ef73":"markdown","6c2185b0":"markdown","4d60d684":"markdown","e4170f05":"markdown","13f9ab56":"markdown","579afd9d":"markdown","ed6ca46a":"markdown","f6774b1a":"markdown","ce5ab0c6":"markdown","5943088e":"markdown","9bb919ea":"markdown","f9fa3fb6":"markdown","8a5c5036":"markdown","42011efe":"markdown","6a0f0587":"markdown","bf4bd134":"markdown","aaa2dbcf":"markdown","88efcb75":"markdown","334f3475":"markdown","a2b5619c":"markdown","614faa5b":"markdown","e158ee06":"markdown"},"source":{"9dc82919":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\n\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1f867c85":"%%javascript\nIPython.OutputArea.auto_scroll_threshold = 999;","59eb4c66":"dfTrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndfTest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\nprint(\"\\nTrain dataframe info\\n\")\ndfTrain.info()\nprint(\"\\nTest dataframe info\\n\")\ndfTest.info()","94ff042d":"dfTrain.head(10)","61a46a92":"dfTrain.describe()","de4b6a57":"import plotly\nfrom plotly.offline import iplot\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\ndef PlotPieChart(df,label):\n    trace = go.Pie(labels=df[label])\n    layout = dict(title = str(label))\n    fig = dict(data=[trace], layout=layout)\n    iplot(fig)","4fa24690":"categoricalLabels = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\nfor label in categoricalLabels:\n    PlotPieChart(dfTrain,label)","357889cd":"import plotly.express as px\ndef PlotHistogram(df,label):\n    fig = px.histogram(df, x=label)\n    fig.show()","d4443ba7":"numericalLabels = [\"Age\", \"Fare\"]\nfor label in numericalLabels:\n    PlotHistogram(dfTrain,label)","e34e436a":"import plotly.express as px\ndef relationPieChart(df,value,name):\n    fig = px.pie(df, values=value, names=name, title=str(value+\" -- \"+name))\n    fig.show()","d0220a91":"print(\"Surviving probability of Pclasses\")\nprint(dfTrain[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False))\nrelationPieChart(dfTrain,\"Survived\",\"Pclass\")","4a9585e3":"print(\"Surviving probability of genders\")\nprint(dfTrain[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False))\nrelationPieChart(dfTrain,\"Survived\",\"Sex\")","785cd272":"print(\"Surviving probability of Sibsps\")\nprint(dfTrain[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False))\nrelationPieChart(dfTrain,\"Survived\",\"SibSp\")","8c773afa":"print(\"Surviving probability of Parchs\")\nprint(dfTrain[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False))\nrelationPieChart(dfTrain,\"Survived\",\"Parch\")","7d32d955":"def detectOutlier(df,features, minOutlierCount):\n    outlierList = []\n    \n    for feature in features:\n        #1st quartile\n        Q1 = np.percentile(df[feature],25)\n        #3rd quartile\n        Q3 = np.percentile(df[feature],75)\n        #IQR\n        IQR = Q3 - Q1\n        #Outlier Step\n        outlierStep = IQR * 1.5\n        #detect outlier and their indices\n        outlierListCol = df[(df[feature] < Q1 - outlierStep) | (df[feature] > Q3 + outlierStep)].index\n        #store indices\n        outlierList.extend(outlierListCol)\n    \n    outlierIndices = Counter(outlierList)\n    multipleOutliers = list(i for i,v in outlierIndices.items() if v > minOutlierCount)\n    \n    return multipleOutliers","d319a691":"dfTrain.loc[detectOutlier(dfTrain,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"],2)]","b53d3d9b":"dfTrain.drop(detectOutlier(dfTrain,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"],2),axis=0,inplace=True)\ndfTrain.reset_index(inplace=True,drop=True)","f0c88c0b":"correlationList = [\"Survived\", \"Pclass\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"]\nsns.heatmap(dfTrain[correlationList].corr(), annot=True, fmt=\".2f\")","7c791099":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", kind=\"bar\", data=dfTrain,size = 5)\ng.set_ylabels(\"Survival Probablity\")\nplt.show()","e6e0e2c5":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind=\"bar\", data=dfTrain,size = 5)\ng.set_ylabels(\"Survival Probablity\")\nplt.show()","e1df9e77":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind=\"bar\", data=dfTrain,size = 5)\ng.set_ylabels(\"Survival Probablity\")\nplt.show()","00cb60a1":"g = sns.FacetGrid(dfTrain,col=\"Survived\",size = 5)\ng.map(sns.distplot,\"Age\",bins=30)\nplt.show()","4e06f034":"import plotly.express as px\nfig = px.histogram(dfTrain[dfTrain.Survived == 1], x=\"Age\", color=\"Sex\", marginal=\"violin\", title =\"Survived passengers by their ages\", color_discrete_map={\"male\": \"#187196\",\"female\": \"#fab7cc\"})\nfig.show()\nfig2 = px.histogram(dfTrain[dfTrain.Survived == 0], x=\"Age\", color=\"Sex\", marginal=\"violin\", title =\"Couldnt survived passengers by their ages\", color_discrete_map={\"male\": \"#187196\",\"female\": \"#fab7cc\"})\nfig2.show()","7993474d":"fig = px.histogram(dfTrain[dfTrain.Survived == 1], x=\"Pclass\", color=\"Sex\", marginal=\"violin\", title =\"Survived passengers by their ticket class\", color_discrete_map={\"male\": \"#187196\",\"female\": \"#fab7cc\"})\nfig.show()\nfig2 = px.histogram(dfTrain[dfTrain.Survived == 0], x=\"Pclass\", color=\"Sex\", marginal=\"violin\", title =\"Couldnt survived passengers by their ticket class\", color_discrete_map={\"male\": \"#187196\",\"female\": \"#fab7cc\"})\nfig2.show()","86a99f8d":"print(\"\\nTrain dataframe columns that include null values:\\n\")\nprint(dfTrain.columns[dfTrain.isna().any()])\nprint(\"\\nTrain dataframe null rows count:\\n\")\nprint(dfTrain.isna().sum())\nprint(\"\\n================================================\")\nprint(\"\\nTest dataframe columns that include null values:\\n\")\nprint(dfTest.columns[dfTest.isna().any()])\nprint(\"\\nTest dataframe null rows count:\\n\")\nprint(dfTest.isna().sum())","90fcc46a":"dfTrain[dfTrain.Embarked.isna()]","cf6614f7":"dfTest[dfTest.Fare.isna()]","ba450e24":"dfCombined = pd.concat([dfTrain, dfTest], axis=0)\ndfCombined.info()","52633b8f":"fig = px.box(dfCombined, x=\"Embarked\", y=\"Fare\", points=\"all\")\nfig.show()","32c87134":"dfTrain[dfTrain.Embarked.isna()][[\"Fare\",\"Embarked\"]]","c89d645d":"dfTrain[\"Embarked\"].fillna(\"C\",inplace=True)\ndfTrain.iloc[[60,821]]","da045122":"dfTest[dfTest.Fare.isna()]","39d22b92":"np.mean(dfCombined[(dfCombined[\"Pclass\"] == 3) & (dfCombined[\"Embarked\"] == \"S\")][\"Fare\"])","a874eaa9":"dfTest[\"Fare\"].fillna(np.mean(dfCombined[(dfCombined[\"Pclass\"] == 3) & (dfCombined[\"Embarked\"] == \"S\")][\"Fare\"]) , inplace=True)\ndfTest.iloc[[152]]","0294ba4d":"dfTrain[dfTrain[\"Age\"].isna()]","09613da3":"dfTest[dfTest[\"Age\"].isna()]","724063b9":"dfCombined[\"Gender\"] = [1 if i == \"male\" else 0 for i in dfCombined[\"Sex\"]] # make sex variable numerical and store them in gender column to show in heatmap.\ncorrelationList = [\"Age\", \"Gender\", \"Pclass\", \"SibSp\", \"Parch\", \"Fare\"]\nsns.heatmap(dfCombined[correlationList].corr(), annot=True, fmt=\".2f\")\nplt.show()\ndfCombined.drop([\"Gender\"],axis=1,inplace=True) # drop the Gender column, because it was necessary for only heatmap.","a4a91f2c":"fig = px.box(dfCombined, x = \"Sex\", y = \"Age\", color=\"Pclass\", points=\"all\", title=\"Correlation between Sex --- Age --- Pclass\")\nfig.show()","11e49e7f":"fig = px.box(dfCombined, x = \"SibSp\", y = \"Age\", points=\"all\", title=\"Correlation between Age and SibSp\")\nfig.show()","ba04a729":"fig = px.histogram(dfCombined, x = \"Fare\", y = \"Age\", histfunc='avg', title=\"Correlation between Average Age and Fare\")\nfig.show()","c36250dd":"fig = px.box(dfCombined, x = \"Parch\", y = \"Age\", points=\"all\", title=\"Correlation between Age and Parch\")\nfig.show()","0b775ddf":"trainIndexNanAge = list(dfTrain[dfTrain[\"Age\"].isna()].index)\nprint(\"number of nan age train indexes : {}\".format(len(trainIndexNanAge)))\ntestIndexNanAge = list(dfTest[dfTest[\"Age\"].isna()].index)\nprint(\"number of nan age test indexes : {}\".format(len(testIndexNanAge)))\ncombinedIndexNanAge = list(dfCombined[dfCombined[\"Age\"].isna()].index)\nprint(\"number of total nan age indexes : {}\".format(len(combinedIndexNanAge)))","d41e4d52":"for index in trainIndexNanAge:\n    age_pred = dfCombined[\"Age\"][((dfCombined[\"SibSp\"] == dfTrain.iloc[index][\"SibSp\"]) & (dfCombined[\"Parch\"] == dfTrain.iloc[index][\"Parch\"]) & (dfCombined[\"Pclass\"] == dfTrain.iloc[index][\"Pclass\"]))].median()\n    if not np.isnan(age_pred):\n        dfTrain[\"Age\"].iloc[index] = age_pred","b2bb6dcb":"for index in testIndexNanAge:\n    age_pred = dfCombined[\"Age\"][((dfCombined[\"SibSp\"] == dfTest.iloc[index][\"SibSp\"]) & (dfCombined[\"Parch\"] == dfTest.iloc[index][\"Parch\"]) & (dfCombined[\"Pclass\"] == dfTest.iloc[index][\"Pclass\"]))].median()\n    if not np.isnan(age_pred):\n        dfTest[\"Age\"].iloc[index] = age_pred","f58e3bd2":"trainIndexNanAge = list(dfTrain[dfTrain[\"Age\"].isna()].index)\nprint(\"number of nan age train indexes : {}\".format(len(trainIndexNanAge)))\ntestIndexNanAge = list(dfTest[dfTest[\"Age\"].isna()].index)\nprint(\"number of nan age test indexes : {}\".format(len(testIndexNanAge)))\ndfCombined = pd.concat([dfTrain, dfTest], axis=0)\ncombinedIndexNanAge = list(dfCombined[dfCombined[\"Age\"].isna()].index)\nprint(\"number of total nan age indexes : {}\".format(len(combinedIndexNanAge)))","4597f20a":"age_med = dfCombined[\"Age\"].median()\nfor index in trainIndexNanAge:\n    dfTrain[\"Age\"].iloc[index] = age_med\nfor index in testIndexNanAge:\n    dfTest[\"Age\"].iloc[index] = age_med","8ad31177":"trainIndexNanAge = list(dfTrain[dfTrain[\"Age\"].isna()].index)\nprint(\"number of nan age train indexes : {}\".format(len(trainIndexNanAge)))\ntestIndexNanAge = list(dfTest[dfTest[\"Age\"].isna()].index)\nprint(\"number of nan age test indexes : {}\".format(len(testIndexNanAge)))\ndfCombined = pd.concat([dfTrain, dfTest], axis=0)\ncombinedIndexNanAge = list(dfCombined[dfCombined[\"Age\"].isna()].index)\nprint(\"number of total nan age indexes : {}\".format(len(combinedIndexNanAge)))\ndel dfCombined, combinedIndexNanAge, testIndexNanAge, trainIndexNanAge","078e2e12":"def find_title(name):\n    return name.split(\",\")[1].split(\".\")[0].strip()","02767a20":"dfTrain[\"Title\"] = dfTrain[\"Name\"].apply(find_title)\ndfTest[\"Title\"] = dfTest[\"Name\"].apply(find_title)\nprint(\"Used Different Titles Are:\")\nprint(pd.concat([dfTrain,dfTest],axis=0)[\"Title\"].value_counts())","289f744d":"other_list = [\"Rev\", \"Dr\", \"Col\", \"Major\", \"Ms\", \"Mlle\", \"Jonkheer\", \"Lady\", \"Mme\", \"Dona\", \"Capt\", \"the Countess\", \"Sir\", \"Don\"]\ndfTrain[\"Title\"] = dfTrain[\"Title\"].replace(other_list, \"Other\")\ndfTest[\"Title\"] = dfTest[\"Title\"].replace(other_list, \"Other\")\nprint(\"Used Different Titles Are:\")\nprint(pd.concat([dfTrain,dfTest],axis=0)[\"Title\"].value_counts())","da4bcb9c":"g = sns.factorplot(x = \"Title\", y = \"Survived\", kind=\"bar\", data=dfTrain, size = 5)\ng.set_ylabels(\"Survival Probablity\")\nplt.show()","c0d85d6b":"dfTrain.drop([\"Name\"], axis=1, inplace=True)\ndfTest.drop([\"Name\"], axis=1, inplace=True)\n\ndfTrain[\"Title\"] = dfTrain[\"Title\"].astype(\"category\")\ndfTrain = pd.get_dummies(dfTrain,columns=[\"Title\"])\ndfTest[\"Title\"] = dfTest[\"Title\"].astype(\"category\")\ndfTest = pd.get_dummies(dfTest,columns=[\"Title\"])\n\nprint(\"Train dataframe columns: {}\".format(dfTrain.columns.values))\nprint(\"Test dataframe columns: {}\".format(dfTest.columns.values))","2d20f25f":"dfTrain[\"Pclass\"] = dfTrain[\"Pclass\"].astype(\"category\")\ndfTrain = pd.get_dummies(dfTrain,columns=[\"Pclass\"])\n\ndfTest[\"Pclass\"] = dfTest[\"Pclass\"].astype(\"category\")\ndfTest = pd.get_dummies(dfTest,columns=[\"Pclass\"])\n\nprint(\"Train dataframe columns: {}\".format(dfTrain.columns.values))\nprint(\"Test dataframe columns: {}\".format(dfTest.columns.values))","a878c2a2":"dfTrain[\"Embarked\"] = dfTrain[\"Embarked\"].astype(\"category\")\ndfTrain = pd.get_dummies(dfTrain,columns=[\"Embarked\"])\n\ndfTest[\"Embarked\"] = dfTest[\"Embarked\"].astype(\"category\")\ndfTest = pd.get_dummies(dfTest,columns=[\"Embarked\"])\n\nprint(\"Train dataframe columns: {}\".format(dfTrain.columns.values))\nprint(\"Test dataframe columns: {}\".format(dfTest.columns.values))","e80d0b17":"dfTrain[\"Sex\"] = dfTrain[\"Sex\"].astype(\"category\")\ndfTrain = pd.get_dummies(dfTrain,columns=[\"Sex\"], prefix=\"S\")\n\ndfTest[\"Sex\"] = dfTest[\"Sex\"].astype(\"category\")\ndfTest = pd.get_dummies(dfTest,columns=[\"Sex\"], prefix=\"S\")\n\nprint(\"Train dataframe columns: {}\".format(dfTrain.columns.values))\nprint(\"Test dataframe columns: {}\".format(dfTest.columns.values))","196a59a0":"dfTrain.drop([\"Ticket\",\"Cabin\",\"PassengerId\"], axis=1, inplace=True)\ndfTest.drop([\"Ticket\",\"Cabin\"], axis=1, inplace=True)\n\nprint(\"Train dataframe columns: {}\".format(dfTrain.columns.values))\nprint(\"Test dataframe columns: {}\".format(dfTest.columns.values))","534aa2e5":"dfTrain.head()","455bdfb3":"dfTest.head()","253e1e82":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","dd424255":"dfTrain = (dfTrain - np.min(dfTrain)) \/ (np.max(dfTrain) - np.min(dfTrain)).values\ndfTestTemp = dfTest[\"PassengerId\"]\ndfTest = (dfTest - np.min(dfTest)) \/ (np.max(dfTest) - np.min(dfTest)).values\ndfTest[\"PassengerId\"] = dfTestTemp\ndel dfTestTemp\ndfTest.describe()","d31b4f98":"xTrain = dfTrain.drop([\"Survived\"], axis = 1)\nyTrain = dfTrain[\"Survived\"]\nxTrain, xVal, yTrain, yVal = train_test_split(xTrain, yTrain, test_size = 0.33, random_state = 50)\nprint(\"sizes: \")\nprint(\"xTrain: {}, xValidation: {}, yTrain: {}, yValidation: {}\".format(len(xTrain),len(xVal),len(yTrain),len(yVal)))\nprint(\"\\t\\t\\t test: {}\".format(len(dfTest)))","25a4d10d":"logreg = LogisticRegression()\nlogreg.fit(xTrain,yTrain)\nacc_logreg_train = logreg.score(xTrain,yTrain)*100\nacc_logreg_validation = logreg.score(xVal,yVal)*100\nprint(\"Train data accuracy: {}\".format(acc_logreg_train))\nprint(\"Validation data accuracy: {}\".format(acc_logreg_validation))","c651bcac":"classifiers = [DecisionTreeClassifier(random_state = 50),\n               SVC(random_state = 50),\n               RandomForestClassifier(random_state = 50),\n               KNeighborsClassifier(),\n               LogisticRegression(random_state = 50)]\n\ndecisionTree_params_grid = {\"min_samples_split\":range(10,500,20),\n                            \"max_depth\":range(1,20,2)}\nsvc_params_grid = {\"kernel\":[\"rbf\"],\n                   \"gamma\":[0.001,0.01,0.1,1],\n                   \"C\":[1,10,50,100,200],\n                   \"probability\":[True]}\nrandomForest_params_grid = {\"max_features\":[1,3,10],\n                            \"min_samples_split\":[2,3,10],\n                            \"min_samples_leaf\":[1,3,10],\n                            \"bootstrap\":[False],\n                            \"n_estimators\":[100,300],\n                            \"criterion\":[\"gini\"]}\nknn_params_grid = {\"n_neighbors\":np.linspace(1,19,10,dtype=int).tolist(),\n                   \"weights\":[\"uniform\",\"distance\"],\n                   \"metric\":[\"euclidean\",\"manhattan\"]}\nlogisticRegression_params_grid = {\"C\":np.logspace(-3,3,7),\n                                  \"penalty\":[\"l1\",\"l2\"]}\n\n\nclassifier_params = [decisionTree_params_grid,\n                     svc_params_grid,\n                     randomForest_params_grid,\n                     knn_params_grid,\n                     logisticRegression_params_grid]","27f2ca84":"cvResult = []\nbestEstimators = []\nfor classifierIndex in range(len(classifiers)):\n    classifier = GridSearchCV(classifiers[classifierIndex], param_grid=classifier_params[classifierIndex], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs=-1 , verbose=1)\n    classifier.fit(xTrain,yTrain)\n    cvResult.append(classifier.best_score_)\n    bestEstimators.append(classifier.best_estimator_)\n    print(\"current best score = {}\".format(cvResult[classifierIndex]))","822ba653":"cvResult = pd.DataFrame({\"Cross Validation Means\": cvResult, \"ML Models\":[\n    \"Decision Tree Classifier\",\n    \"SVM\",\n    \"Random Forest Classifier\",\n    \"K Neighbors Classifier\",\n    \"Logistic Regression\"]})","2726a63c":"fig = px.bar(cvResult, x='ML Models', y='Cross Validation Means', title=\"Cross Validation Scores\")\nfig.show()","207bec99":"votingClassifier = VotingClassifier(estimators = [(\"decissionTree\",bestEstimators[0]),\n                                                  (\"randomForest\",bestEstimators[2]),\n                                                  (\"logisticRegression\",bestEstimators[4])],\n                                    voting = \"soft\",\n                                    n_jobs = -1)","7a424a5a":"votingClassifier = votingClassifier.fit(xTrain,yTrain)\nprint(\"Train data accuracy: {}\".format(accuracy_score(votingClassifier.predict(xTrain),yTrain)))\nprint(\"Validation data accuracy: {}\".format(accuracy_score(votingClassifier.predict(xVal),yVal)))","4454f923":"survivedTest = pd.Series(votingClassifier.predict(dfTest.drop([\"PassengerId\"],axis=1)),name=\"Survived\").astype(int)\nresults = pd.concat([dfTest[\"PassengerId\"], survivedTest],axis = 1)\nresults.head(10)","ead90d06":"results.info()","f6a1be81":"results.describe()","6061870a":"results.to_csv(\"titanic.csv\", index = False)","7c9f3f12":"<a id=\"1\"><\/a><br>\n# <div align=\"center\"> Loading And Checking The Data <\/div>\n","acf379c2":"<a id=\"SSibSp\"><\/a><br>\n#### Survived --- SibSp","05bda98c":"<a id=\"fillAge\"><\/a>\n##### Filling Missing Values Of Age Columns","fdb06ddc":"<a id=\"parch-survived\"><\/a><br>\n#### Parch  --  Survived","1e171349":"<a id=\"3\"><\/a><br>\n# <div align=\"center\"> Univariate Variable Analysis <\/div>","b7ac4640":"<a id=\"pclass-survived\"><\/a><br>\n#### Pclass  --  Survived","eaa40d0f":"<a id=\"fillFare\"><\/a>\n##### Filling Missing Values Of Fare Column\nNow we can fill the nan value of **test dataframes fare column**\n\nHere, also, we examine the data by saying that there might be a relationship between ticket ***fares***, ***port of embarkation*** and ***ticket class*** information.","82cb8377":"* Higher Pclass passengers has higher survival probablity","449547df":"* [Finding missing values](#9)\n* [Filling missing values](#10)","d7273a82":"* child ages has higher survival rate.\n* large number of 20s ages couldnt survive\n* most passengers are in 15-35 age range","731e5701":"And finally the 2 gender variables.","66aa907e":"Now we can convert this 5 title variables into dummy\/indicator variables.","ce54a40b":"<a id=\"sex-survived\"><\/a><br>\n#### Sex  --  Survived","ac5a88ce":"\n<a id=\"6\"><\/a><br>\n# <div align=\"center\"> Basic Data Analysis <\/div>","da63ced5":"Certain number ranges can cover different age ranges, in parent\/child(Parch) values","12e40d35":"<a id=\"17\"><\/a>\n## Dropping Passenger Id, Ticket and Cabin","1d23a1db":"Now we have no empty row on **age** column in both dataframes.","9a3df89f":"In this section we will examine the relationships between the two labels based on the [Description of the variables](#2)\n\nThese peer tags:\n* [Pclass  --  Survived](#pclass-survived)\n* [Sex  --  Survived](#sex-survived)\n* [SibSp  --  Survived](#sibsp-survived)\n* [Parch  --  Survived](#parch-survived)","7daaa531":"<a id=\"18\"><\/a><br>\n# <div align=\"center\"> Modeling <\/div>","0eb434f8":"There is no significant effect between ticket fares and age. The average age of each ticket is very close to each other","8a686063":"<a id=\"12\"><\/a><br>\n# <div align=\"center\"> Feature Engineering <\/div>","18ae27b0":"* Number of parents\/children(Parch) and siblings\/spouses(SibSp) aboard the Titanic can be used together to extract a new feature until th=3. \n* small families have more chance to survive.\n* there is a high standard deviation in survival of passenger with parch=3.","f7c14e22":"<a id=\"21\"><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","388a89c0":"<a id=\"14\"><\/a>\n## Pclass","3692e2c6":"<a id=\"SAge\"><\/a><br>\n#### Survived --- Age","35b8e4e7":"<a id=\"SAgeGender\"><\/a><br>\n#### Survived --- Age --- Gender","5652211e":"<font color=\"purple\">\nTable of content:\n1. [Load And Check The Data](#1)\n1. [Description Of The Variables](#2)\n1. [Univariate variable Analysis](#3)\n    * [Categorical Variable Analysis](#4)\n    * [Numerical Variable Analysis](#5)\n1. [Basic Data Analysis](#6)\n    * [Pclass  --  Survived](#pclass-survived)\n    * [Sex  --  Survived](#sex-survived)\n    * [SibSp  --  Survived](#sibsp-survived)\n    * [Parch  --  Survived](#parch-survived)\n1. [Outlier Detection](#7)\n1. [Visualization](#8)\n    * [Correlation between Survived --- Pclass --- Age --- SibSp --- Parch --- Fare](#correlation)\n    * [Survived --- SibSp](#SSibSp)\n    * [Survived --- Parch](#SParch)\n    * [Survived --- Pclass](#SPclass)\n    * [Survived --- Age](#SAge)\n    * [Survived --- Age --- Gender](#SAgeGender)\n    * [Survived --- Pclass --- Gender](#SPclassGender)\n1. [Missing Values](#9)\n    * [Finding Missing Values](#10)\n    * [Filling Missing Values](#11)\n        * [Missing Values Of Embarked](#fillEmbarked)\n        * [Missing Values Of Fare](#fillFare)\n        * [Missing Values Of Age](#fillAge)\n1. [Feature Engineering](#12)\n    * [Name To Title](#13)\n    * [Pclass](#14)\n    * [Embarked](#15)\n    * [Sex](#16)\n    * [Dropping PassengerId, Ticket and Cabin](#17)\n1. [Modeling](#18)\n    * [Train-Test Split](#19)\n    * [Simple Logistic Regression](#20)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#21)\n    * [Ensemble Modeling](#22)\n1. [Prediction And Submission](#23)","5bdaa8a8":"* [Correlation between Survived --- Pclass --- Age --- SibSp --- Parch --- Fare](#correlation)\n* [Survived --- SibSp](#SSibSp)\n* [Survived --- Parch](#SParch)\n* [Survived --- Pclass](#SPclass)\n* [Survived --- Age](#SAge)\n* [Survived --- Age --- Gender](#SAgeGender)\n* [Survived --- Pclass --- Gender](#SPclassGender)","3bc99298":"<a id=\"4\"><\/a>\n### Categorical Variable Analysis\n","493bd6dc":"<a id=\"SParch\"><\/a><br>\n#### Survived --- Parch","1aac4562":"<a id=\"11\"><\/a>\n## Filling Missing Values","ea6b9b69":"* [Name To Title](#13)\n* [Pclass](#14)\n* [Embarked](#15)\n* [Sex](#16)\n* [Dropping Passenger Id, Ticket and Cabin](#17)","175bab9a":"the 3 Pclass variables.","0fbcedb3":"<a id=\"23\"><\/a><br>\n# <div align=\"center\"> Prediction And Submission <\/div>","ff63478b":"We will temporarily combine the train and test data to fill with more consistent data","d676cfe4":"<a id=\"9\"><\/a><br>\n# <div align=\"center\"> Missing Values <\/div>","a6b6d39e":"Considering that we can not learn very few passing data, we can name them as \"Other\".","6667b603":"We can fill it by the average fare of the passengers who has same port of embarkation and ticket class ","0976ed85":"There can not be a relationship between the name and the possibility of survive, but there may be a relationship between the title information inside the names.","427ec923":"Having a lot of siblings or spouses means less chance to survive according to this dataset. Whereas passengers have 1 or 2 siblings or spouses, have more chance to survive","7f46bcbc":"# <div align=\"center\">TITANIC<\/div>\n<div align=\"center\">\n    \n    \n![Titanic](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/fd\/RMS_Titanic_3.jpg\/300px-RMS_Titanic_3.jpg)\n\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of April 15, 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters. RMS Titanic was the largest ship afloat at the time she entered service and was the second of three Olympic-class ocean liners operated by the White Star Line. She was built by the Harland and Wolff shipyard in Belfast. Thomas Andrews, chief naval architect of the shipyard at the time, died in the disaster. For more information [Click Here](https:\/\/en.wikipedia.org\/wiki\/RMS_Titanic). <\/div>","db3b7482":"the 3 Embarked variables.","8428d3b2":"Regardless of gender, 1stclass passengers are older than 2nd class passengers, which are older than 3rd class passengers.","97e41bcf":"After this filling we have still two age values empty in the test dataframe ","040e17c7":"* [Train-Test Split](#19)\n* [Simple Logistic Regression](#20)\n* [Hyperparameter Tuning -- Grid Search -- Cross Validation](#21)\n* [Ensemble Modeling](#22)","c87e2412":"<a id=\"sibsp-survived\"><\/a><br>\n#### SibSp  --  Survived","ac0ee882":"<a id=\"16\"><\/a>\n## Sex","f54488a2":"<a id=\"15\"><\/a>\n## Embarked","1e41ef73":"<a id=\"2\"><\/a><br>\n# <div align=\"center\"> Description Of The Variables <\/div>","6c2185b0":"\n<a id=\"7\"><\/a><br>\n# <div align=\"center\"> Outlier Detection <\/div>","4d60d684":"<a id=\"13\"><\/a>\n## Name To Title","e4170f05":"We drop the unnecessary **Ticket**, **Cabin** and **PassengerId** columns. But we do not drop **PassengerID** in the **test** database. Because we will use it in the *submission phase*.","13f9ab56":"<a id=\"SPclass\"><\/a><br>\n#### Survived --- Pclass","579afd9d":"|Variable   | Data Type | Definition                                     | Key                                            |\n|-----------|-----------|------------------------------------------------|------------------------------------------------|\n|PassengerId| int64     | Unique ID of the passanger                     | 0 = No, 1 = Yes                                |\n|Survived   | int64     | Survival status                                | 0 = No, 1 = Yes                                |\n|Pclass     | int64     | Ticket class                                   | 1 = 1st, 2 = 2nd, 3 = 3rd                      |\n|Name       | object    | Passengers name                                | \t                                              |\n|Sex        | object    | Gender of the passenger                        | \t                                              |\n|Age        | float64   | Age in years                                   | \t                                              |\n|Sibsp      | int64     | Number of siblings \/ spouses aboard the Titanic| \t                                              |\n|Parch      | int64     | Number of parents \/ children aboard the Titanic| \t                                              |\n|Ticket     | object    | Ticket number                                  | \t                                              |\n|Fare       | float64   | Passenger fare                                 | \t                                              |\n|Cabin      | object    | Cabin number                                   | \t                                              |\n|Embarked   | object    | Port of Embarkation                            | C = Cherbourg, Q = Queenstown, S = Southampton |","ed6ca46a":"<a id=\"19\"><\/a>\n## Train-Test Split","f6774b1a":"<a id=\"22\"><\/a>\n## Ensemble Modeling","ce5ab0c6":"<a id=\"correlation\"><\/a><br>\n#### Correlation between Survived --- Pclass --- Age --- SibSp --- Parch ---[](http:\/\/) Fare","5943088e":"**In this section the 5 popular ML classifier will be compared by their mean accuracy using stratified cross validation**\n\n> Decision Tree\n\n> SVM\n\n> Random Forest\n\n> KNN\n\n> Logistic Regression","9bb919ea":"We will fill the nan values with the ages median of the same passengers which has same siblings\/spouses, parent\/childs and pclass","f9fa3fb6":"<a id=\"5\"><\/a><br>\n### Numerical Variable Analysis","8a5c5036":"<a id=\"10\"><\/a>\n## Finding Missing Values\n","42011efe":"Checking and dropping the rows which has outliers in 2 or more columns(in Age, SibSp, Parch, Fare)","6a0f0587":"Since this passenger data does not match other passengers, we fill them using the median of all passengers age value","bf4bd134":"<a id=\"fillEmbarked\"><\/a>\n##### Filling Missing Values Of Embarked Column\nMaybe we can analyze train the data by saying that there can be a connection between the ***ticket fare*** and the ***port of embarkation*** information.","aaa2dbcf":"* [Categorical variable analysis](#4)\n>     Labels: Survived, Pclass, Sex, SibSp, Parch, Embarked\n* [Numerical variable analysis](#5)\n>     Labels: Age, Fare \n","88efcb75":"<a id=\"20\"><\/a>\n## Simple Logistic Regression","334f3475":"Labels which will be firstly filled in dataframes\n* Train:\n    * [Embarked](#fillEmbarked) > 2 missing value\n    * [Age](#fillAge) > 170 missing value\n* Test:\n    * [Fare](#fillFare) > 1 missing value\n    * [Age](#fillAge) > 86 missing value","a2b5619c":"<a id=\"8\"><\/a><br>\n# <div align=\"center\"> Visualization <\/div>","614faa5b":"As we can see from the above box plot and nan values, we can fill the embarked column as **\"C\"**","e158ee06":"<a id=\"SPclassGender\"><\/a><br>\n#### Survived --- Pclass --- Gender"}}