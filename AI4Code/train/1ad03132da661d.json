{"cell_type":{"0242f147":"code","96cdb2bc":"code","7df160e8":"code","e3195af4":"code","73c19753":"code","ca21b925":"code","5e10f780":"code","70a2441d":"code","94c7160d":"code","2cd0018d":"code","0b09cafc":"code","6008eb6a":"code","cea90d06":"code","ae87bae0":"code","a8f2e373":"code","a0e7c520":"code","53fd78f1":"code","44be716f":"code","7cf19a7e":"code","384f26c8":"code","84b79779":"code","4453e209":"code","a9cb07df":"code","fa16a3e3":"code","c2bc8323":"code","c44a1e74":"code","c6f7ecb7":"markdown","e339d2bf":"markdown","7331ee10":"markdown","77f54a7c":"markdown","1792701f":"markdown","a54fdb2f":"markdown","681d81e2":"markdown","ec0ddb0d":"markdown","400fafdc":"markdown","4c33b3f4":"markdown","e8e48e9a":"markdown","39392a22":"markdown","3ade3039":"markdown","e53030e9":"markdown","fabff17d":"markdown","1aaadc97":"markdown","137ea3bd":"markdown","c2956b78":"markdown","89ac92b8":"markdown","866703b5":"markdown","b52e2dd8":"markdown","7133f3ae":"markdown","09cee91e":"markdown"},"source":{"0242f147":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96cdb2bc":"import pickle\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\nfrom sklearn import tree, metrics\n\nsns.set_style('whitegrid')\nfig_size = plt.rcParams['figure.figsize']\n\n%matplotlib inline","7df160e8":"class Mask:\n    def __init__(self, df):\n        self.df = df\n    \n    @property\n    def SURVIVED_MASK(self):\n        return self.df.Survived == 1\n    \n    @property\n    def NOT_SURVIVED_MASK(self):\n        return self.df.Survived == 0\n    \n    @property\n    def CHILDREN_MASK(self):\n        return self.df.Age <= 15\n    \n    @property\n    def ADULT_MASK(self):\n        return np.logical_and(self.df.Age <= 45, self.df.Age > 15)\n    \n    @property\n    def SENIOR_ADULT_MASK(self):\n        return 45 < self.df.Age\n    \n    @property\n    def MALE_MASK(self):\n        return self.df.Sex == 'male'\n    \n    @property\n    def FEMALE_MASK(self):\n        return self.df.Sex == 'female'\n    \n    @property\n    def FIRST_CLASS_MASK(self):\n        return self.df.Pclass == 1\n    \n    @property\n    def SECOND_CLASS_MASK(self):\n        return self.df.Pclass == 2\n    \n    @property\n    def THIRD_CLASS_MASK(self):\n        return self.df.Pclass == 3","e3195af4":"def label_age_group(x: float) -> str:\n    if x <= 15:\n        return \"Child\"\n    if x < 45:\n        return \"Adult\"\n    return \"SeniorAdult\"\n\n\ndef preprocess_data(df: pd.DataFrame) -> pd.DataFrame:\n    # filling age missing values with median\n    df['Age'] = df.Age.fillna(df.Age.median())\n    \n    # grouping age values\n    df['AgeGroup'] = df.Age.apply(label_age_group)\n\n    return df","73c19753":"TRAIN_FILE = \"\/kaggle\/input\/titanic\/train.csv\"\nTEST_FILE = \"\/kaggle\/input\/titanic\/test.csv\"\nSUBMISSION_FILE = \"\/kaggle\/input\/titanic\/gender_submission.csv\"","ca21b925":"train_df = pd.read_csv(TRAIN_FILE).drop([\"Cabin\", \"Embarked\"], axis=1)\ntrain_df.info()\ntrain_df.head()","5e10f780":"# Preprocessing\ntrain_df = preprocess_data(train_df)\ntrain_mask = Mask(train_df)","70a2441d":"nrows=1\nncols = 2\ncolumn = \"Pclass\"\nfig, ax = plt.subplots(nrows, ncols, figsize=(fig_size[0] * ncols * 1.25, fig_size[1] * nrows * 1.25))\n_ = sns.countplot(x=column, data=train_df, ax=ax[0])\n_ = sns.countplot(x=column, hue=\"Survived\", data=train_df, ax=ax[1])\n_ = plt.tight_layout()","94c7160d":"nrows=1\nncols = 2\ncolumn = \"Sex\"\nfig, ax = plt.subplots(nrows, ncols, figsize=(fig_size[0] * ncols * 1.25, fig_size[1] * nrows * 1.25))\n_ = sns.countplot(x=column, data=train_df, ax=ax[0])\n_ = sns.countplot(x=column, hue=\"Survived\", data=train_df, ax=ax[1])\n_ = plt.tight_layout()","2cd0018d":"fig = plt.figure(figsize=(fig_size[0] * 2, fig_size[1] * 1.5))\n\ngs0 = gridspec.GridSpec(1, 2, figure=fig)\nax0 = fig.add_subplot(gs0[0, 0])\ngs01 = gs0[0, 1].subgridspec(2, 1)\nax1 = fig.add_subplot(gs01[0, 0])\nax2 = fig.add_subplot(gs01[1, 0])\n\n_ = sns.distplot(train_df.Age, ax=ax0, kde=False)\n_ = ax0.set_xlabel(\"Age\")\n_ = sns.distplot(train_df.loc[train_mask.SURVIVED_MASK].Age, ax=ax1, label='survived', kde=False, color='green')\n_ = sns.distplot(train_df.loc[train_mask.NOT_SURVIVED_MASK].Age, ax=ax2, label='not survived', kde=False, color='red')\n_ = ax1.legend()\n_ = ax2.legend()\n_ = plt.tight_layout()","0b09cafc":"nrows=1\nncols = 2\nfig, ax = plt.subplots(nrows, ncols, figsize=(fig_size[0] * ncols * 1.25, fig_size[1] * nrows * 1.25))\n_ = sns.countplot(x=\"AgeGroup\", data=train_df, ax=ax[0])\n_ = sns.countplot(x=\"AgeGroup\", data=train_df, hue=train_df.Survived, ax=ax[1])\n_ = plt.tight_layout()","6008eb6a":"print(f\"Children that survived = {train_df.loc[np.logical_and(train_mask.SURVIVED_MASK, train_mask.CHILDREN_MASK)].shape[0]}\")\nprint(f\"Children that did not survive = {train_df.loc[np.logical_and(train_mask.NOT_SURVIVED_MASK, train_mask.CHILDREN_MASK)].shape[0]}\")\nprint()\nprint(f\"Adults that survived = {train_df.loc[np.logical_and(train_mask.SURVIVED_MASK, train_mask.ADULT_MASK)].shape[0]}\")\nprint(f\"Adults that did not survive = {train_df.loc[np.logical_and(train_mask.NOT_SURVIVED_MASK, train_mask.ADULT_MASK)].shape[0]}\")\nprint()\nprint(f\"Senior adults that survived = {train_df.loc[np.logical_and(train_mask.SURVIVED_MASK, train_mask.SENIOR_ADULT_MASK)].shape[0]}\")\nprint(f\"Senior adults that did not survive = {train_df.loc[np.logical_and(train_mask.NOT_SURVIVED_MASK, train_mask.SENIOR_ADULT_MASK)].shape[0]}\")","cea90d06":"fig = plt.figure(figsize=(fig_size[0] * 2, fig_size[1] * 1.5))\n\ngs0 = gridspec.GridSpec(1, 2, figure=fig)\nax0 = fig.add_subplot(gs0[0, 0])\ngs01 = gs0[0, 1].subgridspec(2, 1)\nax1 = fig.add_subplot(gs01[0, 0])\nax2 = fig.add_subplot(gs01[1, 0])\n\n_ = sns.distplot(train_df.Fare.values, ax=ax0, kde=False)\n_ = ax0.set_xlabel(\"Fare\")\n_ = sns.distplot(train_df.loc[train_mask.SURVIVED_MASK].Fare, ax=ax1, label='survived', kde=False, color='green')\n_ = sns.distplot(train_df.loc[train_mask.NOT_SURVIVED_MASK].Fare, ax=ax2, label='not survived', kde=False, color='red')\n_ = ax1.legend()\n_ = ax2.legend()\n_ = plt.tight_layout()","ae87bae0":"nrows = 2\nncols = 3\nfig, ax = plt.subplots(nrows, ncols, figsize=(fig_size[0] * ncols, fig_size[1] * nrows))\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.FIRST_CLASS_MASK, train_mask.SURVIVED_MASK)].Fare, kde=False, ax=ax[0, 0])\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.SECOND_CLASS_MASK, train_mask.SURVIVED_MASK)].Fare, kde=False, ax=ax[0, 1], color='orange')\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.THIRD_CLASS_MASK, train_mask.SURVIVED_MASK)].Fare, kde=False, ax=ax[0, 2], color='green')\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.FIRST_CLASS_MASK, train_mask.NOT_SURVIVED_MASK)].Fare, kde=False, ax=ax[1, 0])\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.SECOND_CLASS_MASK, train_mask.NOT_SURVIVED_MASK)].Fare, kde=False, ax=ax[1, 1], color='orange')\n_ = sns.distplot(train_df.loc[np.logical_and(train_mask.THIRD_CLASS_MASK, train_mask.NOT_SURVIVED_MASK)].Fare, kde=False, ax=ax[1, 2], color='green')\n_ = ax[0, 0].set_xlabel(\"\")\n_ = ax[0, 1].set_xlabel(\"\")\n_ = ax[0, 2].set_xlabel(\"\")\n_ = ax[1, 0].set_xlabel(\"First Class Fare\", fontsize=13)\n_ = ax[1, 1].set_xlabel(\"Second Class Fare\", fontsize=13)\n_ = ax[1, 2].set_xlabel(\"Third Class Fare\", fontsize=13)\n_ = ax[0, 0].set_ylabel(\"Survived\", fontsize=13)\n_ = ax[1, 0].set_ylabel(\"Not Survived\", fontsize=13)\n\n_ = plt.tight_layout()","a8f2e373":"# Gathering\ninput_cols = [\"Pclass\", \"Sex\", \"AgeGroup\", \"Fare\"]\ntarget_cols = [\"Survived\"]\n\ninput_data = train_df.loc[:, input_cols]\ntarget_data = train_df.loc[:, target_cols].values\n\ninput_data = pd.get_dummies(input_data)\ninput_dummies = input_data.values","a0e7c520":"# Intialize the classifier\ndtc = tree.DecisionTreeClassifier()\n\n# Train the classifier with our training data\ndtc = dtc.fit(input_dummies, target_data)\n\n# Save the model in a pickle file\nwith open('titanic_decision_tree_model.pkl', mode='wb') as f:\n    pickle.dump(dtc, f)","53fd78f1":"y_pred = dtc.predict(input_dummies)\ny_true = np.squeeze(target_data.T)\n\naccuracy = sum(y_pred == y_true) \/ y_pred.shape[0]\nconf_matrix = metrics.confusion_matrix(y_true, y_pred)\nprecision = metrics.precision_score(y_true, y_pred)\nrecall = metrics.recall_score(y_true, y_pred)\nf1 = metrics.f1_score(y_true, y_pred)\n\nprint(f\"Accuracy: {accuracy * 100:.2f}%\")\nprint(f\"Precision: {precision:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\nprint(f\"F1-Score: {f1:.2f}\")\n\nscale = 1.5\n_ = plt.figure(figsize=(fig_size[0] * scale, fig_size[1] * scale))\nax = sns.heatmap(conf_matrix, annot=True, fmt='d')\n_ = ax.set_xticklabels([\"Not Survived\", \"Survived\"], fontsize=13)\n_ = ax.set_yticklabels([\"Not Survived\", \"Survived\"], fontsize=13)\n_ = ax.set_xlabel(\"Predicted Labels\", fontsize=15)\n_ = ax.set_ylabel(\"Actual Labels\", fontsize=15)","44be716f":"tree_text = tree.export_text(dtc, feature_names=list(input_data.columns))\nprint(tree_text)\nwith open(\"titanic_decision_tree_text.log\", mode='w') as f:\n    f.write(tree_text)","7cf19a7e":"# scale = 2.5\n# fig = plt.figure(figsize=(fig_size[0] * scale, fig_size[1] * scale))\n\n# _ = tree.plot_tree(dtc, filled=True)\nimport graphviz\ndot = tree.export_graphviz(dtc, out_file=None, filled=True, feature_names=list(input_data.columns), class_names=[\"Not Survived\", \"Survived\"])\ngraph = graphviz.Source(dot, format='svg')\n_ = graph.render('titanic_decision_tree_graphviz')","384f26c8":"test_df = pd.read_csv(TEST_FILE).drop([\"Cabin\", \"Embarked\"], axis=1)\ntest_df.info()\ntest_df.head()","84b79779":"test_df = preprocess_data(test_df)\ntest_mask = Mask(test_df)\ntest_df.info()","4453e209":"test_df.loc[test_df.Fare.isnull(), :]","a9cb07df":"test_df.loc[test_df.Fare.isnull(), \"Fare\"] = test_df.loc[test_mask.THIRD_CLASS_MASK].Fare.mean()\ntest_df.info()","fa16a3e3":"# Gathering\ntest_input_cols = [\"Pclass\", \"Sex\", \"AgeGroup\", \"Fare\"]\n\ntest_input_data = test_df.loc[:, test_input_cols]\n\ntest_input_data = pd.get_dummies(test_input_data)\ntest_input_dummies = test_input_data.values\ntest_input_data","c2bc8323":"# Feeding the test data to the model\ny_pred_test = dtc.predict(test_input_dummies)","c44a1e74":"# Logging the predictions into the submission file\nsubmission_df = pd.read_csv(SUBMISSION_FILE)\nsubmission_df.Survived = y_pred_test\nsubmission_df.set_index(['PassengerId']).to_csv(\"submission.csv\")","c6f7ecb7":"#### Plotting Fare values for each Pclass","e339d2bf":"Preprocess data","7331ee10":"## Data Preparation\nBefore building the model, we must prepare the data to feed into the model.","77f54a7c":"### How does survivability depend on Gender?","1792701f":"We see a similar relationship as with Pclass. The women were given higher priority to escort to safety than the men. This clear influence that the variable has over the target label Survived helps us decide whether or not this variable should be considered as a feature.","a54fdb2f":"### How does survivability depend on Pclass?","681d81e2":"# Predicting on the test data set","ec0ddb0d":"Boolean masks","400fafdc":"Helper functions","4c33b3f4":"Gather the input data to feed into the model","e8e48e9a":"# Building the model","39392a22":"We see that there are way more 3rd class passengers than 1st or 2nd class. But when it separated according to the Survived label, it is clear that 1st class was given more priority over 2nd and 3rd classes to escort out of the crash.\n\n\n<!-- We see that most of the 1st class passengers survived. On the contrary, a handful of the 3rd class passengers survived. Since, there is a clear dependence of Survival probability on the Pclass, Pclass can be considered as a feature.<br>\n<br>\nRelationship:<br>\nHigher the class of the passenger, higher the probability of survival -->","3ade3039":"## Training the model","e53030e9":"### Evaluating the performance of the model","fabff17d":"We see that Fare still has a missing value.\n\nI'll fill this in with the average value of the Pclass it belongs to.","1aaadc97":"The missing value for Fare is from Pclass 3, so I'll fill it with the average fare of Pclass 3.","137ea3bd":"### How does survivability depend on Age?","c2956b78":"By plotting the distribution of the Class-wise Fare for Survived and Not Survived passengers, we see that in the case of First Class, the passengers with the most expensive tickets survived, meaning they were given priority in escaping to safety.","89ac92b8":"Not much can be understood from this plot other than that the passengers with expensive tickets survived.<br>\nThis is probably because First class tickets are more expensive, and we know that First class passengers were given more priority in escaping to safety.\n\nWe can verify this by plotting the Fare values of each Pclass separately.","866703b5":"The left half is the distribution of all the values in the `Age` column. The right half has two distplots of those who survived and those who did not.\n\nWe can divide the values of the `Age` column into three buckets:\n1. Children (Age <= 15)\n2. Adults (15 < Age <= 40)\n3. Senior Adults (Age > 40)\n\nWe see that most of the children survived than the adults and senior adults.\n\n\nTo make visualisation easier, I will label each row with one of \"Child\", \"Adult\", \"SeniorAdult\" depending on their age.","b52e2dd8":"*The depth of the tree is 21, which makes it difficult to render in the notebook.*","7133f3ae":"# It's EDA time...","09cee91e":"A text representation of the tree model"}}