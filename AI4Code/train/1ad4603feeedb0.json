{"cell_type":{"eca10bb3":"code","77ef3ae4":"code","fa325e77":"code","84d24a3e":"code","4c6a0ae8":"code","7c32a8ea":"code","d2702cf2":"code","c32f20a0":"code","0af0baea":"code","e7a5c483":"code","dbcbba27":"code","53d0b9d8":"code","bbea52fc":"code","7d449f69":"code","0a0f9032":"code","e9dcb05e":"markdown","92b6a50b":"markdown","7c9d96a0":"markdown","48eb9933":"markdown","e6b3273f":"markdown","3d521112":"markdown","2b9437c3":"markdown","c28c8db4":"markdown","95bf39ac":"markdown","8270ce3c":"markdown","156019b7":"markdown"},"source":{"eca10bb3":"import numpy as np \nimport pandas as pd \nimport os\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing import image_dataset_from_directory\nfrom keras import layers\nfrom keras import models\nfrom skimage import io\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","77ef3ae4":"imgN = io.imread(r'..\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/IM-0001-0001.jpeg')\nimgP = io.imread(r'..\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/person100_bacteria_475.jpeg')\n","fa325e77":"px.imshow(imgN,  binary_string=True)","84d24a3e":"px.imshow(imgP, binary_string=True)","4c6a0ae8":"train_dir = r'..\/input\/chest-xray-pneumonia\/chest_xray\/train'\ntest_dir = r'..\/input\/chest-xray-pneumonia\/chest_xray\/test'\nval_dir = r'..\/input\/chest-xray-pneumonia\/chest_xray\/val'","7c32a8ea":"train_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\nval_datagen = ImageDataGenerator(rescale=1.\/255)","d2702cf2":"train_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=(300, 300),\n    batch_size=20,\n    class_mode='binary')\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=(300, 300),\n    batch_size=20,\n    class_mode='binary')\nval_generator = val_datagen.flow_from_directory(\n    val_dir,\n    target_size=(300, 300),\n    batch_size=20,\n    class_mode='binary')","c32f20a0":"for data_batch, labels_batch in train_generator:\n    print(f'Input data shape: {data_batch.shape}')\n    print(f'Input label data shape: {labels_batch.shape}')\n    break","0af0baea":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (5, 5), activation='relu', input_shape=(300 ,300, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (5, 5), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (5, 5), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (5, 5), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (5, 5), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","e7a5c483":"model.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n","dbcbba27":"history = model.fit(\n    train_generator,\n    steps_per_epoch=100,\n    epochs=10,\n    validation_data=val_generator)","53d0b9d8":"\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']","bbea52fc":"epochs = range(1, 10 + 1)\n\nfig = make_subplots(rows=2, cols=1, subplot_titles=('Loss', 'Accuracy'))\n\nfig.add_trace(\n    go.Scatter(x=list(epochs), y=loss, mode='lines+markers', name='Training loss'),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=list(epochs), y=val_loss, mode='lines+markers', name='Validation loss'),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=list(epochs), y=acc, mode='lines+markers', name='Training accuracy'),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(x=list(epochs), y=val_acc, mode='lines+markers', name='Validation accuracy'),\n    row=2, col=1\n)\nfig\n","7d449f69":"ev = model.evaluate_generator(val_generator)","0a0f9032":"print(f'2D convolutional model accuracy: {ev[1]}')","e9dcb05e":"***Chest x-ray with pneumonia***","92b6a50b":"***Evaluating data on validation set ***","7c9d96a0":"***Set genarators for train test and validation***","48eb9933":"# **Data info**","e6b3273f":"***Plotting accuracy and loss***","3d521112":"# **Model Building**","2b9437c3":"***Read images from directory and put them into ImageDataGenerator***","c28c8db4":"# **Imports**","95bf39ac":"***Shape of input data and input data labels***","8270ce3c":"***Chest x-ray without pneumonia***","156019b7":"***Model training***"}}