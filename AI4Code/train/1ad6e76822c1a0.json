{"cell_type":{"b8149380":"code","5eb0d687":"code","12c64ade":"code","2d9d9d03":"code","c8d5d222":"code","074a4337":"code","56059bc2":"code","7e522e37":"code","7bf64580":"code","42c6c4c3":"code","d581bb83":"code","adbd5e58":"code","8c3f629f":"code","7a9ec015":"code","c2585b85":"code","eb61f944":"code","341a5583":"code","f348b20f":"code","4876536d":"code","308016dc":"code","d014af26":"code","6fa6acec":"code","b20cffdd":"code","08d3c433":"code","a1fccdcf":"code","832e714f":"code","1ccbad25":"code","7d6a9c4f":"code","d030e25b":"code","70bfbd88":"code","f57a66ec":"code","0c935019":"code","aa5de893":"code","ec51befa":"code","e26c7a37":"code","8fa96eca":"code","f9d787cf":"code","42401689":"code","d4bb7c83":"code","86691d89":"code","b8c0e771":"code","bac4b6b6":"code","c56d94fd":"code","5aa31910":"code","a6a555a3":"code","f353bb11":"code","a245016a":"code","fdfe5d07":"code","1ec704c9":"code","bf318d25":"code","87e78582":"code","18cd1a3b":"code","a717e99f":"code","cab362e4":"code","ae131b75":"code","2af6174c":"code","161524f6":"code","b3fe3fbf":"code","94b05a20":"code","0aedb9b5":"code","0f63904d":"code","b930d90a":"code","e69f8c8c":"code","2d176b08":"code","70d04eab":"markdown","2761e93e":"markdown","9f7c2ada":"markdown","cca01be4":"markdown","089f02ae":"markdown","6d81cc06":"markdown","737729f7":"markdown","6d875eba":"markdown","5e633a78":"markdown","b57dd7e4":"markdown","b6bbf507":"markdown","07efefd3":"markdown","076a7699":"markdown","7146f9a8":"markdown","3cb473f0":"markdown","1da5be11":"markdown","fb44867b":"markdown","298b3316":"markdown","573bafe6":"markdown","d390b199":"markdown","5d802a0c":"markdown","6cadf2d2":"markdown","474a5517":"markdown","cd7461b1":"markdown","e90a2856":"markdown","db29065a":"markdown","b59c6668":"markdown","5e791ff9":"markdown"},"source":{"b8149380":"# Import Libraries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt\nfrom fbprophet import Prophet\n# Statsmodels widely known for forecasting than Prophet\nimport statsmodels.api as sm\nfrom scipy import stats\n#from pandas.tseries import datetools\nfrom plotly import tools\n# instead of ploty.ploty we are using chart_studio.ploty\n#import chart_studio.plotly as py\nimport plotly.figure_factory as ff\nimport plotly.tools as tls\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# plt.style.available\nplt.style.use(\"seaborn-whitegrid\")\n","5eb0d687":"import matplotlib.dates as mdates","12c64ade":"df = pd.read_csv(\"..\/input\/mumbai-temperature\/bombay.csv\",header=0)\ndf.head()","2d9d9d03":"df.describe()","c8d5d222":"df.info()","074a4337":"df.loc[:, \"date\"] = pd.to_datetime(df.loc[:,['Year','Month','Day']], format=\"%Y\/%m\/%d\")","56059bc2":"df.head()","7e522e37":"df.info()","7bf64580":"bombay = df.copy()","42c6c4c3":"# Simple plotting of Bombay temperature\n# First Subplot\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(14,5))\nax1.plot(bombay[\"date\"], bombay[\"Temp\"], color=\"green\")\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Daily Bombay Tempreature\")\n\n# Second Subplot\nax2.plot(bombay[\"Year\"], bombay[\"Temp\"], color=\"orange\")\nax2.set_xlabel(\"Date\", fontsize=12)\nax2.set_ylabel(\"Temperature\")\nax2.set_title(\"Yearly Bombay Temperature\")\nplt.show()","d581bb83":"bombay[(bombay.Temp<0)]","adbd5e58":"bombay.Temp[(bombay.Temp<0)]=bombay.Temp.mean()","8c3f629f":"# Simple plotting of Bombay Temerature\n# First Subplot\nf, (ax1, ax2) = plt.subplots(2, 1, figsize=(14,10))\nax1.plot(bombay[\"date\"], bombay[\"Temp\"], color=\"green\")\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Daily Bombay Tempreature\")\n\n# Second Subplot\nax2.plot(bombay[\"Year\"], bombay[\"Temp\"], color=\"orange\")\nax2.set_xlabel(\"Date\", fontsize=12)\nax2.set_ylabel(\"Temperature\")\nax2.set_title(\"Yearly Bombay Temperature\")\nplt.show()","7a9ec015":"bombay = bombay.copy()\nbombay['Day'] = bombay['date'].dt.day\nbombay['Month'] = bombay['date'].dt.month\nbombay['Year'] = bombay['date'].dt.year\nbombay.info()","c2585b85":"# Yearly averages\nyearly = bombay.groupby('Year')['Temp'].mean()\nyearly","eb61f944":"# Monthly averages\nmonthly = bombay.groupby('Month')['Temp'].mean()\nmonthly","341a5583":"# Simple plotting of Bombay Temerature\n# First Subplot\nf, (ax1, ax2) = plt.subplots(2, 1, figsize=(14,10))\nax1.plot(yearly, color=\"purple\",ls=\":\")\nax1.set_xlabel(\"Year\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Avg yearly Bombay Tempreature\")\n\n# Second Subplot\nax2.plot(monthly, color=\"red\",ls=\"--\")\nax2.set_xlabel(\"Month\", fontsize=12)\nax2.set_ylabel(\"Temperature\")\nax2.set_title(\"Avg monthly Bombay Temperature\")\nplt.show()","f348b20f":"# Daily averages\ndaily = bombay.groupby('Day')['Temp'].mean()\n# Simple plotting of Bombay Temerature\n# First Subplot\nf,ax1 = plt.subplots(1, 1, figsize=(14,10))\nax1.plot(daily, color=\"blue\",ls=\":\")\nax1.set_xlabel(\"Day\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Daily Bombay Tempreature\")","4876536d":"bombay[\"day_of_year\"]=bombay['date'].dt.dayofyear\nbombay.tail()","308016dc":"# Day of the year averages\ndayofyear = bombay.groupby('day_of_year')['Temp'].mean()\n# Simple plotting of Bombay Temerature\n# First Subplot\nf,ax1 = plt.subplots(1, 1, figsize=(14,10))\nax1.plot(dayofyear, color=\"brown\",ls=\"-\")\nax1.set_xlabel(\"Day_of_Year\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Avg Day of Year Bombay Tempreature\")","d014af26":"sns.pairplot(bombay,\n             hue='Day',\n             x_vars=['Day','day_of_year',\n                     'Month','Year'],\n             y_vars='Temp',\n)\nplt.suptitle('Temperature by, Day of Month, Day of Year, Month and Year')\nplt.show()","6fa6acec":"zoom = bombay[(bombay['date']> '2015-01-01') & (bombay['date']<= '2020-05-13')].copy()","b20cffdd":"# First Subplot\nf, ax1 = plt.subplots(1, 1, figsize=(14,10))\nax1.plot(zoom[\"date\"], zoom[\"Temp\"], color=\"green\")\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Temperature\")\nax1.set_title(\"Daily Bombay Tempreature from 1 Jan 2015 to 13 May 2020\")\nplt.show()","08d3c433":"import os\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf \nfrom statsmodels.tsa.seasonal import seasonal_decompose \n#from pmdarima import auto_arima                        \nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tools.eval_measures import rmse","a1fccdcf":"a = seasonal_decompose(bombay[\"Temp\"], model = \"add\", period=365)\na.plot();","832e714f":"plt.figure(figsize = (16,7))\na.seasonal.plot();","1ccbad25":"split_date = '01-Jun-2016'\ntrain = bombay.loc[bombay.date <= split_date].copy()\ntest = bombay.loc[bombay.date > split_date].copy()","7d6a9c4f":"train.tail()","d030e25b":"test.tail()","70bfbd88":"train.drop([\"Region\",\"Country\",\"State\",\"City\",\"Month\",\"Day\",\"Year\",\"day_of_year\"],inplace=True,axis=1)","f57a66ec":"train.set_index(\"date\")","0c935019":"test.drop([\"Region\",\"Country\",\"State\",\"City\",\"Month\",\"Day\",\"Year\",\"day_of_year\"],inplace=True,axis=1)\ntest.set_index(\"date\")","aa5de893":"from statsmodels.tsa.stattools import adfuller","ec51befa":"#Perform Augmented Dickey\u2013Fuller test:\nprint('Results of Dickey Fuller Test:')\ndftest = adfuller(bombay['Temp'], autolag='AIC')\n\ndfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\nfor key,value in dftest[4].items():\n    dfoutput['Critical Value (%s)'%key] = value\n    \nprint(dfoutput)","e26c7a37":"plot_acf(bombay['Temp'], lags=50)","8fa96eca":"plot_pacf(bombay['Temp'], lags=50);","f9d787cf":"train = train.set_index(\"date\")\ntrain.head()","42401689":"train.index.to_period(\"D\")","d4bb7c83":"arima_model = SARIMAX(train['Temp'], order = (2,1,1))\narima_result = arima_model.fit()\narima_result.summary()","86691d89":"arima_prediction = arima_result.predict(start=len(train),end=len(bombay)-1,type=\"levels\").rename(\"ARIMA Prediction\")\narima_prediction","b8c0e771":"test['Temp'].plot(figsize = (16,5), legend=True)\narima_prediction.plot(legend = True);","bac4b6b6":"# time series - statsmodels\nfrom statsmodels.tsa.filters.hp_filter import hpfilter  # Hodrick Prescott filter for cyclic & trend separation\nfrom statsmodels.tsa.seasonal import seasonal_decompose # Error Trend Seasonality decomposition\n\n# holt winters \nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing   # single exponential smoothing as in ewm of pandas\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing # double and triple exponential smoothing\n","c56d94fd":"single_exp = SimpleExpSmoothing(train['Temp']).fit()","5aa31910":"ses_prediction = single_exp.predict(start=len(train),end=len(bombay)-1).rename(\"SES Prediction\")\nses_prediction","a6a555a3":"test['Temp'].plot(figsize = (16,5), legend=True)\nses_prediction.plot(legend = True);","f353bb11":"double_exp = ExponentialSmoothing(train['Temp'],trend='add').fit()\ndouble_exp.summary()","a245016a":"des_prediction = double_exp.predict(start=len(train),end=len(bombay)-1).rename(\"DES Prediction\")\ndes_prediction","fdfe5d07":"test['Temp'].plot(figsize = (16,5), legend=True)\ndes_prediction.plot(legend = True);","1ec704c9":"triple_exp = ExponentialSmoothing(train['Temp'],seasonal=\"add\",seasonal_periods=365).fit()\ntriple_exp.summary()","bf318d25":"tes_prediction = triple_exp.predict(start=len(train),end=len(bombay)-1).rename(\"TES Prediction\")\ntes_prediction","87e78582":"test['Temp'].plot(figsize = (16,5), legend=True)\ntes_prediction.plot(legend = True);","18cd1a3b":"m = Prophet()","a717e99f":"train['ds']= train.index\ntrain.rename(columns={'Temp': 'y', 'date': 'ds'}, inplace=True)\ntrain.head()","cab362e4":"prophet = m.fit(train)","ae131b75":"dates = m.make_future_dataframe(periods=len(test))\n# for montly series, use: dates = m.make_future_dataframe(periods=len(test),freq='MS')","2af6174c":"pro_predictions = m.predict(dates)\npro_predictions.tail()","161524f6":"# Plot the forecast\nf, ax = plt.subplots(1)\nf.set_figheight(5)\nf.set_figwidth(15)\nfig = m.plot(pro_predictions,\n                 ax=ax)\nplt.show()","b3fe3fbf":"prophet_pred = pd.DataFrame({\"Date\" : pro_predictions[-len(test):]['ds'], \"Pred\" : pro_predictions[-len(test):][\"yhat\"]})\nprophet_pred.set_index(\"Date\")\nprophet_pred.head()","94b05a20":"mse_prop = mean_squared_error(test['Temp'], prophet_pred[\"Pred\"])\nmse_prop","0aedb9b5":"plt.figure(figsize=(16,5))\nax = sns.lineplot(x= test.index, y=test[\"Temp\"])\nsns.lineplot(x=test.index, y = prophet_pred[\"Pred\"]);","0f63904d":"# Plot the components of the model\nfig = m.plot_components(pro_predictions)","b930d90a":"test.head()","e69f8c8c":"all_pred = prophet_pred = pd.DataFrame({\"date\" : test[-len(test):]['date'],\"Actual\" : test[-len(test):]['Temp'], \"ARIMA\" : arima_prediction, \"Simple Exp Smoothing\" : ses_prediction, \"Triple Exp Smoothing\" : tes_prediction, \"Prophet prediction\" : pro_predictions[-len(test):][\"yhat\"]})\nall_pred.head()","2d176b08":"plt.figure(figsize=(16,9))\nplt.plot_date(all_pred[\"date\"], all_pred[\"Actual\"], linestyle=\"-\",label=\"Actual\")\nplt.plot_date(all_pred[\"date\"], all_pred[\"ARIMA\"], linestyle=\"-.\",label=\"ARIMA\")\nplt.plot_date(all_pred[\"date\"], all_pred[\"Simple Exp Smoothing\"], linestyle=\"--\",label=\"Simple Exp Smoothing\")\nplt.plot_date(all_pred[\"date\"], all_pred[\"Triple Exp Smoothing\"], linestyle=\"--\",label=\"Triple Exp Smoothing\")\nplt.plot_date(all_pred[\"date\"], all_pred[\"Prophet prediction\"], linestyle=\":\",label=\"Prophet prediction\")\nplt.legend()\nplt.show()","70d04eab":"* Lets also look at the daily average of temperature.","2761e93e":"#### There is no pmdarima on kaggle's notebook but you can try it on your own for running auto arima","9f7c2ada":"# ARIMA Model","cca01be4":"* There is probabily seasonality based on the day of the year, i.e freq = 365(or 366)\n* Lets look at a zoomed picture","089f02ae":"### Exponential smothing","6d81cc06":"* It can be observed that there are lot of negative values and hence lets look at the values.","737729f7":"* Lets plot average temperature in day of the year. Thus first we have to parse day of the year and then plot its mean","6d875eba":"## Note that 10 and 13 lines were not able to run in previous part\n","5e633a78":"# Try these on your own as it is not supported here. \n* arima_model = auto_arima(train, seasonal=True,n_jobs=-1)\n* arima_model.summary()","b57dd7e4":"* check for stationarity\n* look at ACF and PACF plots\n* fit an arima model","b6bbf507":"### FB Prophet","07efefd3":"* It can be observed that there is a common error Temp = -99. Probabily these are the missing value. \n* A best way to treat these is replacing by the mean values and proceding. There is a total of 9266 data points and replacing these values by mean would have negligible impact on the model but we would get a better visualization.","076a7699":"##### Double and Triple Exp smoothing","7146f9a8":"* To make predictions, we have to make a date dataframe and then predict","3cb473f0":"* There was no seasonality in the ARIMA model this the straight line can be observed.","1da5be11":"* lets split the data in train and test to validate the model performances","fb44867b":"#### The p-value of dickey fuller test is very very low hence there is sufficicent evidence to conculde that the ts is stationary and we can proceed in model fitting","298b3316":"# Lets start fitting a model","573bafe6":"* Note we have ignored the rend part in triple exp smothing, to improve our forecast.\nTill now triple exp smothing without trend gives best model","d390b199":"* For using Prophet() we have to rename date as ds and output as y.","5d802a0c":"### Forecast","6cadf2d2":"# Mumbai Temperature forecasting using Prophet, Exponential Smoothing and ARIMA","474a5517":"from sklearn.metrics import mean_squared_error\nmse = mean_squared_error(test.values, predict)\nmse","cd7461b1":"* Probabily there is no trend. Lets zoom our time plot a look at the seasonality \n* Before lets parse the dates and look at the monthly and yearly plots.","e90a2856":"* Tip: By default, the plot gets plotted twice. To get rid of this, just use a semi-colon at the end of the plot.","db29065a":"* Now lets try and visualize the data","b59c6668":"### Lets combine the dates and add it to a coloumn and keep in dates format","5e791ff9":"## Triple Exponential smothing and Prophet are give a great fit and we can proceed using these models"}}