{"cell_type":{"0094b5dd":"code","b95fa65f":"code","d4d13902":"code","67d419f0":"code","20c834ec":"code","f17c4430":"code","d51021c6":"code","dfb23d21":"code","b1dc23ab":"code","a0e9fa2e":"code","93be1588":"code","07309ca3":"code","89389b52":"code","f4a7deea":"code","f81bb7e4":"code","5d4307cf":"code","663a39e0":"code","708cc032":"code","3f22f1ae":"code","fe04ef79":"code","0945b704":"code","6689ff83":"code","b682434b":"code","60e8de0f":"code","0a1cc12f":"code","895d2260":"code","9e8f791a":"code","1fe54143":"code","41f3bb5f":"code","e9661a94":"code","7507f6e5":"code","7679e9dc":"code","29962be1":"code","401ecd9a":"code","87f41289":"code","34ec1189":"code","beca7955":"code","e71bdddd":"code","e93d6f45":"code","b54a820d":"code","03ba3726":"code","1c28900b":"code","74b2ee14":"code","99103180":"code","3c32e986":"code","2d588856":"code","425d9017":"code","feb8de9e":"code","ea671f65":"code","8ebf4ad5":"code","e98f33af":"code","01a0817a":"code","9cb4013c":"code","81337b83":"code","f18dc55a":"code","c5f969d6":"code","63488d6e":"code","4aa8bf5f":"code","65480cc9":"code","4330b078":"code","c20fa952":"code","8854f093":"code","6139c1e4":"code","784791f2":"code","566d745d":"markdown","d58a6ea9":"markdown","7b232de4":"markdown","f9d6d79a":"markdown","ba49b432":"markdown","4571a6d4":"markdown","9742c1aa":"markdown","e65e5470":"markdown","f0a8e760":"markdown","bb408412":"markdown","1ed92e5f":"markdown","691a46bc":"markdown","f5a2e386":"markdown","35d03409":"markdown","02da52b3":"markdown","95412678":"markdown","0a63ae0c":"markdown","83c1d162":"markdown","520568fe":"markdown","383cb31a":"markdown","4dfe7f36":"markdown","61f9d8fc":"markdown","4408500d":"markdown"},"source":{"0094b5dd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b95fa65f":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\",header=0)\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\",header=0)","d4d13902":"train.shape, test.shape","67d419f0":"train.columns","20c834ec":"test.shape","f17c4430":"train.head()","d51021c6":"train.tail()","dfb23d21":"test.head()","b1dc23ab":"test.tail()","a0e9fa2e":"# Values in Pclass\ntrain[\"Pclass\"].value_counts()","93be1588":"# Values in Sex\ntrain[\"Sex\"].value_counts()","07309ca3":"#Values in Age\ntrain[\"Age\"].value_counts()","89389b52":"# check descriptive statistics for numerical columns\n\ntrain.describe()","f4a7deea":"#For Categorical Data\ntrain.describe(include=\"object\")","f81bb7e4":"plt.rcParams['figure.figsize'] = (15, 5)\nplt.subplot(1, 2, 1)\nsns.countplot(train[\"Survived\"])\nplt.subplot(1, 2, 2)\ntrain[\"Survived\"].value_counts().plot(kind = 'pie', explode = [0, 0.2], autopct = '%.3f%%', startangle = 90,\n                                       labels = ['0',''], shadow = True, pctdistance = 0.5)","5d4307cf":"train[\"Survived\"].value_counts()","663a39e0":"# missing values in training data set\n\nprint(\"Missing Values\")\n# calculate the total missing values in the dataset\ntrain_total = train.isnull().sum()\n\n# calculate the percentage of missing values in the dataset\ntrain_percent = ((train.isnull().sum()\/train.shape[0])*100).round(2)\n\n# calculate the total missing values in the dataset\ntest_total = test.isnull().sum()\n\n# calculate the percentage of missing values in the dataset\ntest_percent = ((test.isnull().sum()\/test.shape[0])*100).round(2)\n\n# make a dataset consisting of total no. of missing values and percentage of missing values in the dataset\ntrain_missing_data = pd.concat([train_total, train_percent, test_total, test_percent],\n                                axis=1, \n                                keys=['Train_Total', 'Train_Percent %','Test_Total', 'Test_Percent %'])\ntrain_missing_data","708cc032":"# Correcting Missing Values in train \ntrain[\"Age\"].fillna(train[\"Age\"].mean(),inplace=True)\ntrain[\"Cabin\"].fillna(train[\"Cabin\"].mode()[0],inplace=True)\ntrain[\"Embarked\"].fillna(train[\"Embarked\"].mode()[0],inplace=True)","3f22f1ae":"#Correcting Missing Values in test\ntest[\"Age\"].fillna(test[\"Age\"].mean(),inplace=True)\ntest[\"Cabin\"].fillna(test[\"Cabin\"].mode()[0],inplace=True)\ntest[\"Fare\"].fillna(test[\"Fare\"].mean(),inplace=True)","fe04ef79":"#Visiting missing values in training data set\n\nprint(\"Missing Values\")\n# calculate the total missing values in the dataset\ntrain_total = train.isnull().sum()\n\n# calculate the percentage of missing values in the dataset\ntrain_percent = ((train.isnull().sum()\/train.shape[0])*100).round(2)\n\n# calculate the total missing values in the dataset\ntest_total = test.isnull().sum()\n\n# calculate the percentage of missing values in the dataset\ntest_percent = ((test.isnull().sum()\/test.shape[0])*100).round(2)\n\n# make a dataset consisting of total no. of missing values and percentage of missing values in the dataset\ntrain_missing_data = pd.concat([train_total, train_percent, test_total, test_percent],\n                                axis=1, \n                                keys=['Train_Total', 'Train_Percent %','Test_Total', 'Test_Percent %'])\ntrain_missing_data","0945b704":"plt.rcParams['figure.figsize'] = (15, 5)\n\n# plotting for Age Variable\nplt.subplot(1, 2, 1)\ntrain[\"Age\"].value_counts().plot(kind = 'pie', autopct = '', startangle = 90,\n                                       shadow = False, pctdistance = 0.5)\nplt.title(\"Age\",size=20)\n\nplt.subplot(1, 2, 2)\nsns.countplot(x=\"Age\",data=train)\nplt.title(\"Age\",size=20)","6689ff83":"plt.rcParams['figure.figsize'] = (15, 5)\n\n#plotting for Embarked Variable\nplt.subplot(1,2,1)\ntrain[\"Embarked\"].value_counts().plot(kind=\"pie\",shadow=True,explode=[0,.1,.2],autopct=\"%.2f%%\")\nplt.title(\"Embarked\",size=20)\n\nplt.subplot(1, 2, 2)\nsns.countplot(x=\"Embarked\",data=train)\nplt.title(\"Embarked\",size=20)\n","b682434b":"plt.rcParams['figure.figsize'] = (15, 5)\n#plotting for Sex Variable\nplt.subplot(1,2,1)\ntrain[\"Sex\"].value_counts().plot(kind=\"pie\",shadow=True,explode=[0,.1],autopct=\"%.3f%%\")\nplt.title(\"Sex\",size=20)\n\nplt.subplot(1, 2, 2)\nsns.countplot(x=\"Sex\",data=train)\nplt.title(\"Sex\",size=20)\n\n\n","60e8de0f":"plt.rcParams['figure.figsize'] = (15, 5)\n\n#plotting for Pclass Vairable\nplt.subplot(1,2,1)\ntrain[\"Pclass\"].value_counts().plot(kind=\"pie\",shadow=True,explode=[0,.1,.1],autopct=\"%.3f%%\")\nplt.title(\"Pclass\",size=20)\n\n\nplt.subplot(1, 2, 2)\nsns.countplot(x=\"Pclass\",data=train)\nplt.title(\"Pclass\",size=20)\n","0a1cc12f":"plt.rcParams['figure.figsize'] = (20, 5)\n\nplt.subplot(1,3,1)\nsns.countplot(hue=\"Survived\",x=\"Sex\",data=train)\nplt.title(\"Relation of Sex And Survived\")\n\nplt.subplot(1,3,2)\nsns.countplot(hue=\"Survived\",x=\"Pclass\",data=train)\nplt.title(\"Relation of Pclass And Survived\")\n\nplt.subplot(1,3,3)\nsns.countplot(hue=\"Survived\",x=\"Embarked\",data=train)\nplt.title(\"Relation of Embarked And Survived\")\n\n","895d2260":"plt.rcParams['figure.figsize'] = (20, 5)\n\nplt.subplot(1,3,1)\nsns.barplot(y=\"Fare\",x=\"Sex\",hue=\"Survived\",data=train)\nplt.title(\"Relation of Sex And Fare Price\")\n\nplt.subplot(1,3,2)\nsns.barplot(y=\"Fare\",x=\"Pclass\",hue=\"Survived\",data=train)\nplt.title(\"Relation of Pclass And Fare\")\n\nplt.subplot(1,3,3)\nsns.barplot(y=\"Fare\",x=\"Embarked\",hue=\"Survived\",data=train)\nplt.title(\"Relation of Embarked And Fare\")\n","9e8f791a":"plt.rcParams['figure.figsize'] = (20, 50)\n\nsns.barplot(y=\"Fare\",hue=\"Survived\",x=\"Age\",data=train,orient=\"h\")\nplt.title(\"Relation Between Fare and Survived\")","1fe54143":"# For Embarked Categorical Variable\ntrain['Embarked'] = train['Embarked'].replace((\"S\", \"C\", \"Q\"),\n                                                (3, 2, 1))\ntest['Embarked'] = test['Embarked'].replace((\"S\", \"C\", \"Q\"),\n                                                (3, 2, 1))","41f3bb5f":"# For Sex Categorical Variable\ntrain['Sex'] = train['Sex'].replace((\"male\", \"female\"),\n                                                (1, 2))\ntest['Sex'] = test['Sex'].replace((\"male\", \"female\"),\n                                                (1, 2))","e9661a94":"train.info()","7507f6e5":"train = train.drop([\"Name\",\"Ticket\",\"Cabin\"],axis=1)\ntest = test.drop([\"Name\",\"Ticket\",\"Cabin\"],axis=1)","7679e9dc":"X=train.drop([\"Survived\"],axis=1)\nY=train[\"Survived\"]\nx_test = test\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)","29962be1":"print(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape,x_test.shape)","401ecd9a":"from sklearn import tree","87f41289":"clftree = tree.DecisionTreeClassifier(max_depth=3)","34ec1189":"clftree.fit(X_train,Y_train)","beca7955":"Y_test_pred = clftree.predict(X_test)\nY_train_pred = clftree.predict(X_train)\n","e71bdddd":"Y_test_pred\n","e93d6f45":"from sklearn.metrics import accuracy_score,confusion_matrix","b54a820d":"cm = confusion_matrix(Y_test, Y_test_pred)\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.show()","03ba3726":"accuracy_score(Y_test,Y_test_pred)","1c28900b":"dot_data = tree.export_graphviz(clftree, feature_names=X_train.columns, filled=True)\nfrom IPython.display import Image\nimport pydotplus\ngraph = pydotplus.graph_from_dot_data(dot_data)\nImage(graph.create_png())","74b2ee14":"from sklearn.ensemble import BaggingClassifier\nclftree = tree.DecisionTreeClassifier()\n# Model Creation\nbag_clf = BaggingClassifier(base_estimator=clftree,\n                           n_estimators=1000,  #1000 trees (By default= 10)\n                           bootstrap=True,\n                            n_jobs= (-1),\n                           random_state=42)","99103180":"bag_clf.fit(X_train,Y_train)","3c32e986":"accuracy_score(Y_test,bag_clf.predict(X_test))","2d588856":"cm1 = confusion_matrix(Y_test, bag_clf.predict(X_test))\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm1, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.show()","425d9017":"from sklearn.ensemble import RandomForestClassifier\nrf_clf = RandomForestClassifier(n_estimators=100,n_jobs= -1,random_state=42)\n","feb8de9e":"rf_clf.fit(X_train,Y_train)","ea671f65":"accuracy_score(Y_test,rf_clf.predict(X_test))","8ebf4ad5":"cm2 = confusion_matrix(Y_test, rf_clf.predict(X_test))\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm2, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.show()","e98f33af":"from sklearn.model_selection import GridSearchCV\nrf_clf = RandomForestClassifier(n_estimators=100,n_jobs= -1,random_state=42)\nparams_grid = {\"max_features\":[2,3,4,5,6,7,8,9], \"min_samples_split\":[5,6,7,8,9,10]}\ngrid_search = GridSearchCV(rf_clf, params_grid,n_jobs=-1,cv=5,scoring=\"accuracy\")","01a0817a":"#grid_search.fit(X_train,Y_train)","9cb4013c":"grid_search.best_params_","81337b83":"cvrf_clf = grid_search.best_estimator_","f18dc55a":"accuracy_score(Y_test,cvrf_clf.predict(X_test))","c5f969d6":"cm3 = confusion_matrix(Y_test, cvrf_clf.predict(X_test))\nplt.rcParams['figure.figsize'] = (3, 3)\nsns.heatmap(cm3, annot = True, cmap = 'Wistia', fmt = '.8g')\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.show()","63488d6e":"rf_clf.fit(X_train,Y_train)\n# import module\nfrom tabulate import tabulate\n  \n# assign data\nmydata = [{ accuracy_score(Y_test,Y_test_pred), \"Decision Tree\"}, \n          { accuracy_score(Y_test,bag_clf.predict(X_test)),\"Bagging\"},\n          { accuracy_score(Y_test,rf_clf.predict(X_test)),\"Random Forest\"}\n          #{ accuracy_score(Y_test,cvrf_clf.predict(X_test)),\"Grid Search CV\"},\n         ]\n  \n# create header\nhead = [\"Accuracy Score\", \"Model Name\"]\n  \n# display table\nprint(tabulate(mydata, headers=head, tablefmt=\"fancy_grid\"))","4aa8bf5f":"\n# Now We Predict from the test dataset\n\ntest.head()","65480cc9":"test.tail()","4330b078":"test.info()","c20fa952":"predictions = rf_clf.predict(test)","8854f093":"predictions","6139c1e4":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': predictions})","784791f2":"output.to_csv('submission.csv', index=False)","566d745d":"### Male dominance is seen in the data.","d58a6ea9":"# X-Y Split","7b232de4":"## Model 1 (Classifier Tree)","f9d6d79a":"## Females Paid more than Male to purchase a ticket.\n## Chernobyl Fare charge is more than other stations.\n## General Observations can be made by the fare relation with other classes","ba49b432":"### Here we get Young Population is there in the ship and the graph has a positive skewness in the graph.","4571a6d4":"# Multi-Variate Analysis","9742c1aa":"## There are 3 missing values in Training Data. And 3 missing Values in Test data.\n## Now lets impute mode value in Cabin, Embarked,Fare  and mean in Age.","e65e5470":"## Female's although with less population survived almost equal to the men's in the ship\n## 1st class travelers survived in larger ratio than other population.\n## As Southampton population is more so is there survived numbers.\n","f0a8e760":"# Data Description\n\n\n\n| Varible | Definition | Keys |\n| --- | --- | --- |\n| Survival | Survivals | 0 = NO ; 1 = YES |\n| Pclass | Ticket Class | 1=1st ; 2=2nd ; 3=3rd |\n| Sex | Sex |  |\n| Age | Age in Years |  |\n| SibSp | # of siblings \/ spouses aboard the Titanic |  |\n| Parch | # of parents \/ children aboard the Titanic |  |\n| Ticket | Ticket Number |  |\n| Fare | Passenger Number |  |\n| Cabin | Cabin Number |  |\n| Embarked | Port Of Embarked | C = Cherbourg, Q = Queenstown, S = Southampton |\n\n","bb408412":"## Missing Values are imputed in both the dataset","1ed92e5f":"### In the ship the majority population arrived from Southampton","691a46bc":"# Model Training","f5a2e386":"### 3rd Class passengers are in majority .","35d03409":"## Model 2(Bagging Classifier)","02da52b3":"## Model 3 (Random Forest Classifier)","95412678":"# Analysis Of Univariate Data","0a63ae0c":"## Model 4 ( Grid Search)","83c1d162":"# Here We Get the Best classifier Model as Random Forest with 84.35 %","520568fe":"# Bivariate Analysis","383cb31a":"# Dummy Variable Creation","4dfe7f36":"# Comparing Models","61f9d8fc":"# Descriptive Stats","4408500d":"# Missing Values Imputation"}}