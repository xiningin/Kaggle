{"cell_type":{"9edfd2b2":"code","159cb4fe":"code","96db3c1e":"code","cd0ba78b":"code","7bb523b3":"code","1fb334f3":"code","6c7b3eae":"code","0011e955":"code","26365f44":"markdown","f866746d":"markdown"},"source":{"9edfd2b2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","159cb4fe":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')\n\ndata","96db3c1e":"import random\nimport csv\ndef loadData(filename, split, trainset=[], testset=[]):\n    with open(filename, 'r') as csvfile:\n        lines = csv.reader(csvfile)\n        dataset = list(lines)\n    \n    for x in range(1, len(dataset)):\n        for y in range(1, 5):\n            dataset[x][y] = float(dataset[x][y])\n            \n        if random.random() < split:\n            trainset.append(dataset[x])\n        else:\n            testset.append(dataset[x])","cd0ba78b":"# Euclidean distance\nimport math\ndef euclideanDist(instance1, instance2, length):\n    distance = 0\n    for x in range(1, length):\n        distance += pow(instance1[x] - instance2[x], 2)\n    \n    return math.sqrt(distance)\n    ","7bb523b3":"# find k Number of neighbors\nimport operator\n\ndef getNeighbors(trainset, testinstance, k):\n    distance = []\n    length = len(testinstance) - 1\n    \n    for x in range(len(trainset)):\n        dist = euclideanDist(testinstance, trainset[x], length)\n        distance.append((trainset[x], dist))\n    \n    distance.sort(key=operator.itemgetter(1))\n    \n    neighbors = []\n    for x in range(k):\n        neighbors.append(distance[x][0])\n    \n    return neighbors","1fb334f3":"# find the class of testinstance\ndef getResponce(neighbors):\n    dict = {}\n    for x in range(len(neighbors)):\n        responce = neighbors[x][-1]\n        if neighbors[x][-1] in dict:\n            dict[responce] += 1\n        else:\n            dict[responce] = 1\n    \n    sortDict = sorted(dict.items(), key=operator.itemgetter(1), reverse=True)\n    \n    return sortDict[0][0]\n","6c7b3eae":"# accuracy of KNN algorithm\ndef accuracy(testset, prediciotn):\n    correct = 0\n    for x in range(len(testset)):\n        if testset[x][-1] == prediciotn[x]:\n            correct += 1\n    \n    return (correct \/ float(len(testset))) * 100.0","0011e955":"# main function\n\ntrainset = []\ntestset = []\nloadData('\/kaggle\/input\/iris\/Iris.csv', 0.67, trainset, testset)\nprint('Training Set : ', len(trainset))\nprint('Testing Set : ', len(testset))\ntrainset[:][:10]\n\nk = 3\npredictionS = []\n\nfor x in range(len(testset)):\n    neighbors = getNeighbors(trainset, testset[x], k)\n    result = getResponce(neighbors)\n    predictionS.append(result)\n    \n    print('< prediction :' + result + 'Actual :' + testset[x][-1])\n\n\nAccuracy = accuracy(testset, predictionS)\nprint('Accuracy : ', Accuracy)","26365f44":"### In this notebook i was work on iris dataset","f866746d":"# KNN classification on iris Dataset"}}