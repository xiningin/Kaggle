{"cell_type":{"d5a5f62c":"code","1f7bc940":"code","3ad2cd98":"code","71264ccd":"code","76ea40a6":"code","5678057e":"code","74a99859":"code","a4b3c5b8":"code","02e24d8b":"code","6c4bbe25":"code","20c0b1d3":"code","3d72f275":"code","81ebb5c6":"code","e675c71c":"code","da4d3c2f":"code","a27ca01f":"code","3cc3a471":"code","9da0026d":"code","1a39da29":"code","ee0d2033":"code","f751e303":"code","5ba3607f":"markdown","e1095dc6":"markdown","0f584b4c":"markdown"},"source":{"d5a5f62c":"from keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom tqdm import tqdm\n\nimport math\nfrom sklearn.model_selection import train_test_split","1f7bc940":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntrain_df, val_df = train_test_split(train_df, test_size=0.1)","3ad2cd98":"# embdedding setup\n# Source https:\/\/blog.keras.io\/using-pre-trained-word-embeddings-in-a-keras-model.html\nembeddings_index = {}\nf = open('..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt')\nfor line in tqdm(f):\n    values = line.split(\" \")\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s word vectors.' % len(embeddings_index))","71264ccd":"# Convert values to embeddings\ndef text_to_array(text):\n    empyt_emb = np.zeros(300)\n    text = text[:-1].split()[:100]\n    embeds = [embeddings_index.get(x, empyt_emb) for x in text]\n    embeds+= [empyt_emb] * (100 - len(embeds))\n    return np.array(embeds)\n\n# train_vects = [text_to_array(X_text) for X_text in tqdm(train_df[\"question_text\"])]\nval_vects = np.array([text_to_array(X_text) for X_text in tqdm(val_df[\"question_text\"][:5000])])\nval_y = np.array(val_df[\"target\"][:5000])\n","76ea40a6":"val_vects.shape","5678057e":"# Data providers\nbatch_size = 128\n\ndef batch_gen(train_df):\n    n_batches = math.ceil(len(train_df) \/ batch_size)\n    while True: \n        train_df = train_df.sample(frac=1.)  # Shuffle the data.\n        for i in range(n_batches):\n            texts = train_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n            text_arr = np.array([text_to_array(text) for text in texts])\n            yield text_arr, np.array(train_df[\"target\"][i*batch_size:(i+1)*batch_size])\n","74a99859":"from keras.models import Sequential, Input\nfrom keras.models import Model\nfrom keras.layers import concatenate, GlobalAveragePooling1D, GlobalMaxPooling1D, CuDNNLSTM, CuDNNGRU, Dense, Bidirectional, SpatialDropout1D, Conv1D","a4b3c5b8":"dr = 0.25\nunits = 96\n\ninp = Input(shape = ((100, 300)))\nx1 = SpatialDropout1D(dr)(inp)\n\nx = Bidirectional(CuDNNGRU(units, return_sequences = True))(x1)\nx = Conv1D(64, kernel_size = 2, padding = \"valid\", kernel_initializer = \"he_uniform\")(x)\n    \ny = Bidirectional(CuDNNLSTM(units, return_sequences = True))(x1)\ny = Conv1D(64, kernel_size = 2, padding = \"valid\", kernel_initializer = \"he_uniform\")(y)\n    \navg_pool1 = GlobalAveragePooling1D()(x)\nmax_pool1 = GlobalMaxPooling1D()(x)\n    \navg_pool2 = GlobalAveragePooling1D()(y)\nmax_pool2 = GlobalMaxPooling1D()(y)\n    \n    \nx = concatenate([avg_pool1, max_pool1, avg_pool2, max_pool2])\n\nx = Dense(1, activation = \"sigmoid\")(x)\nmodel = Model(inputs = inp, outputs = x)\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","02e24d8b":"mg = batch_gen(train_df)\nmodel.fit_generator(mg, epochs=30,\n                    steps_per_epoch=1000,\n                    validation_data=(val_vects, val_y),\n                    verbose=True)","6c4bbe25":"# prediction part\nbatch_size = 256\ndef batch_gen(test_df):\n    n_batches = math.ceil(len(test_df) \/ batch_size)\n    for i in range(n_batches):\n        texts = test_df.iloc[i*batch_size:(i+1)*batch_size, 1]\n        text_arr = np.array([text_to_array(text) for text in texts])\n        yield text_arr\n\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\n\nall_preds = []\nfor x in tqdm(batch_gen(test_df)):\n    all_preds.extend(model.predict(x).flatten())","20c0b1d3":"all_preds_val = []\nfor x in tqdm(batch_gen(val_df)):\n    all_preds_val.extend(model.predict(x).flatten())","3d72f275":"val_y = val_df[\"target\"].values","81ebb5c6":"from sklearn.metrics import f1_score","e675c71c":"y_val = (np.array(all_preds_val) > 0.1).astype(np.int)\nf1_score(val_y, y_val)","da4d3c2f":"0.6764157867991644","a27ca01f":"0.6762409528694363","3cc3a471":"0.6733616435211752","9da0026d":"0.6676628479716642","1a39da29":"f1_score(val_y, y_val)","ee0d2033":"score = 0\nthresh = .5\nfor i in np.arange(0.1, 0.991, 0.01):\n    y_val = (np.array(all_preds_val) > i).astype(np.int)\n    temp_score = f1_score(val_y, y_val)\n    if(temp_score > score):\n        score = temp_score\n        thresh = i\n\nprint(\"CV: {}, Threshold: {}\".format(score, thresh))","f751e303":"y_te = (np.array(all_preds) > thresh).astype(np.int)\n\nsubmit_df = pd.DataFrame({\"qid\": test_df[\"qid\"], \"prediction\": y_te})\nsubmit_df.to_csv(\"submission.csv\", index=False)","5ba3607f":"# Training","e1095dc6":"# Inference","0f584b4c":"# Setup"}}