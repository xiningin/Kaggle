{"cell_type":{"3c6357a6":"code","fe526820":"code","f7eeaa31":"code","923d906b":"code","75339900":"code","b1a293a5":"code","ff21d019":"code","08f7e22e":"code","a8ea3e25":"code","e1f0c178":"code","e08dbd04":"code","6bf77dac":"code","a94f6535":"code","bce20f71":"code","a4ab40af":"code","37297803":"code","e77d3c12":"markdown","e8816f63":"markdown","b8f968e6":"markdown","9d1b4622":"markdown","50a456e8":"markdown","7515daa8":"markdown","475d1f9e":"markdown"},"source":{"3c6357a6":"# \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","fe526820":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.impute import SimpleImputer\n\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","f7eeaa31":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","923d906b":"X_train.head()","75339900":"y_train.head()","b1a293a5":"X_train.isnull().sum().sort_values(ascending=False)[:20]","ff21d019":"X_test.isnull().sum().sort_values(ascending=False)[:20]","08f7e22e":"X_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']","a8ea3e25":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","e1f0c178":"model = XGBRegressor()\nmodel.fit(X_tr, y_tr, verbose=False)\npred = model.predict(X_val)","e08dbd04":"print(\"RMSLE : \" + str(rmsle(y_val, pred)))","6bf77dac":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor()\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","a94f6535":"X_train, X_test, y_train, y_test = exam_data_load(df, target='SalePrice', id_name='Id')\n\nidx1 = y_train['SalePrice'].quantile(0.005)>y_train['SalePrice']\nidx2 = y_train['SalePrice'].quantile(0.995)<y_train['SalePrice']\n\ny_train = y_train[~(idx1 + idx2)]\nX_train = X_train[~(idx1 + idx2)]\n\nX_train = X_train.select_dtypes(exclude=['object'])\nX_test = X_test.select_dtypes(exclude=['object'])\ntarget = y_train['SalePrice']\n\nimp = SimpleImputer()\nX_train = imp.fit_transform(X_train)\nX_test = imp.transform(X_test)\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=20222)\n\nmodel = XGBRegressor(n_estimators=100, max_depth=4, colsample_bytree=0.9)\nmodel.fit(X_tr, y_tr)\npred = model.predict(X_val)\n\nprint(\"RMSLE : \" + str(rmsle(y_val, pred)))","bce20f71":"pred = model.predict(X_test)\noutput = pd.DataFrame({'Id': y_test['Id'], 'SalePrice': pred})\noutput.head()","a4ab40af":"output.to_csv(\"010.csv\", index=False)","37297803":"pred = model.predict(X_test)\nprint(\"RMSLE : \" + str(rmsle(y_test['SalePrice'], pred)))","e77d3c12":"# \ub370\uc774\ud130 \ubc0f \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30","e8816f63":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","b8f968e6":"# \ud29c\ub2dd","9d1b4622":"# \ubaa8\ub378","50a456e8":"# \uacb0\uacfc \uccb4\uc810","7515daa8":"# \uc804\ucc98\ub9ac","475d1f9e":"# Predict & to CSV"}}