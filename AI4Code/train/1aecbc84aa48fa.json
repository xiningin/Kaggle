{"cell_type":{"53c0b7f9":"code","a4e53f61":"code","bbf496b7":"code","1bb3853a":"code","40c1501e":"code","bf179392":"code","b225ef64":"code","424e0c55":"code","209c1b00":"markdown","ad7e85fc":"markdown","6b412c98":"markdown","d1140934":"markdown"},"source":{"53c0b7f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4e53f61":"# import\nfrom keras.models import Sequential\nfrom keras.layers import SimpleRNN, Flatten, TimeDistributed, LSTM, Dense","bbf496b7":"# build model\nxmodel = Sequential()\nxmodel.add(SimpleRNN(128, input_shape=(5, 10)))\nxmodel.add(Dense(1))\nxmodel.build()\nxmodel.summary()","1bb3853a":"# print all matrices\nfor x in  xmodel.layers[0].weights:\n    print(x.name,'-->', x.shape)","40c1501e":"# build model\nxmodel = Sequential()\nxmodel.add(SimpleRNN(128, input_shape=(5, 10), return_sequences=True))\nxmodel.add(SimpleRNN(128, return_sequences=True))\nxmodel.add(SimpleRNN(128, return_sequences=False))\nxmodel.add(Dense(1))\nxmodel.build()\nxmodel.summary()","bf179392":"# print all matrices\nfor x in  xmodel.layers[0].weights:\n    print(x.name,'-->', x.shape)","b225ef64":"# build model\nxmodel = Sequential()\nxmodel.add(LSTM(128, input_shape=(5, 10)))\nxmodel.add(Dense(1))\nxmodel.build()\nxmodel.summary()","424e0c55":"# print all matrices\nfor x in  xmodel.layers[0].weights:\n    print(x.name,'-->', x.shape)","209c1b00":"# Practical guide to RNN and LSTM in Keras\nA complementary notebook for Medium article.\n\nby: Mohit Mayank (mohitmayank.com)","ad7e85fc":"## Deep Vertical RNNs","6b412c98":"> ## RNN","d1140934":"## LSTM"}}