{"cell_type":{"263f8c13":"code","4379fba2":"code","56958bc4":"code","bf0705d4":"code","4cd3d8d7":"code","3fbda5d3":"code","8a8d778b":"code","bdc12272":"code","5b57909c":"code","8fc741b2":"code","6d2c4e3c":"code","2b590911":"code","d667a88f":"code","a08b6df0":"code","1e2e06a7":"code","552c174d":"code","2b54522e":"code","46f25c41":"code","638c74a8":"code","be5cace5":"code","105f1dad":"code","9d87777f":"code","9bcde408":"code","e1688007":"code","383c96de":"code","ca336d88":"code","9027cc8b":"code","f658004d":"code","6da09f9a":"code","1eadd4e5":"code","5833e89c":"code","5adddd8b":"code","9ef45906":"code","9a50e377":"code","a5477d2d":"code","02d2f172":"code","f8d6fd17":"code","e5c1d996":"code","655b6729":"code","085943a4":"code","7de2b3bd":"code","fe2f41f4":"code","3f295ce6":"code","bc7a12e5":"code","a3618363":"code","d54205c2":"code","b6a9a81b":"code","ebade51c":"code","04fcf87f":"code","730c137d":"code","8434db0f":"code","3fc9a82b":"code","c2895f80":"markdown","08b20198":"markdown","423b06c3":"markdown","24c3b5b6":"markdown","0b9b28d7":"markdown","bdb8c50b":"markdown"},"source":{"263f8c13":"#Libraries for data cleaning and analysis\nimport pandas as pd\nfrom pandas import DataFrame, Series\nimport numpy as np\n\n#Libraries for plotting and data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n#Libraries for plotting geographic data\nimport geopandas as gpd\nfrom shapely.geometry import Point, Polygon\nimport folium","4379fba2":"#Reading in the data\ndf = pd.read_csv('..\/input\/montcoalert\/911.csv')\ndf.head()","56958bc4":"#This data contains very few null values\n#423,909 entries\ndf.info()","bf0705d4":"#This dataset includes 141 unique incident titles\ndf['title'].nunique()","4cd3d8d7":"#This dataset includes 170 unique zipcodes\ndf['zip'].nunique()","3fbda5d3":"#This dataset includes 68 unique townships for Montgomery, PA\ndf['twp'].nunique()","8a8d778b":"#Dropping filler column\ndf.drop(columns='e', inplace=True)\n\n#Creating 'Reason' column based on the category of each incident (EMS, Fire, Traffic)\ndf['Reason'] = df['title'].apply(lambda x: x.split(':')[0])\n\n#Stripping the 'title' column of the identifier now stored in the 'Reason' column\ndf['title'] = df['title'].apply(lambda x:x.split(':')[1])","bdc12272":"#Formatting the timeStamp column to allow for more flexible analysis by hour, day of week, month, and year\n\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])\n\n#Creating a date column to groupby later\ndf['date'] = df['timeStamp'].apply(lambda date: date.date())\n\n#'Year'\ndf['Year'] = df['timeStamp'].apply(lambda time: time.year)\n\n#'Hour'\ndf['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\n\n#'Month'\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\n\n#'Day of Week'\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)\n\ndaysDict={0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(daysDict)\n\n#Month Name\nmonthsDict= {1:'Jan',2:'Feb',3:'Mar',4:'Apr',5:'May',6:'Jun',7:'Jul',8:'Aug',9:'Sep',10:'Oct',11:'Nov',12:'Dec'}\ndf['Month Name'] = df['Month'].map(monthsDict)\n\ndf.sample(5)","5b57909c":"#Reordering columns for readaility\ndf = df[['timeStamp','twp','Reason', 'title', 'desc', 'Hour', 'Day of Week', 'Month', 'Month Name', 'Year','zip','addr', 'lat', 'lng','date']]\n\n#Resetting the index to the 'timeStamp' column\ndf.set_index('timeStamp', inplace=True)\n","8fc741b2":"#Sorting the dataframe by date (earliest to most recent)\ndf.index= df.index.sort_values()\ndf.head()","6d2c4e3c":"#Finding the date of the first recorded call in the DataFrame\ndf.iloc[0].date","2b590911":"#Finding the date of the last recorded call in the DataFrame\ndf.iloc[-1].date","d667a88f":"#Adjusting plot settings\nplt.style.use('seaborn-poster')\nplt.style.use('ggplot')","a08b6df0":"#Explanation of peak in late Janaury 2016\ndf['2016-01-20':'2016-01-30'].groupby('date').count()\n\n#Dates of interest: 1\/23\/2016\n\"\"\"Snowfall ranging from 15 to >30 inches across Montgomery County\n\nSource: https:\/\/www.weather.gov\/phi\/01232016wss\n...MONTGOMERY COUNTY...\n   STOWE                 32.0  1104 AM  1\/24  SOCIAL MEDIA\n   EAGLEVILLE            31.0   748 AM  1\/24  TRAINED SPOTTER\n   LIMERICK              31.0   953 AM  1\/24  SOCIAL MEDIA\n   NORRISTOWN            30.0   820 AM  1\/24  TRAINED SPOTTER\n   BRYN MAWR             29.0   850 AM  1\/24  SOCIAL MEDIA\n   GREEN LANE            28.3   857 AM  1\/24  TRAINED SPOTTER\n   NORTH WALES           28.0   844 AM  1\/24  TRAINED SPOTTER\n   GRATERFORD            27.2   834 AM  1\/24  TRAINED SPOTTER\n   GILBERTSVILLE         27.0  1014 PM  1\/23  TRAINED SPOTTER\n   ROYERSFORD            26.7   517 AM  1\/24  TRAINED SPOTTER\n   KING OF PRUSSIA       26.1  1000 PM  1\/23  TRAINED SPOTTER\n   2 NNE POTTSTOWN       26.0   700 AM  1\/24  COCORAHS\n   COLLEGEVILLE          26.0   600 PM  1\/23  SOCIAL MEDIA\n   2 NW BLUE BELL        25.7   904 AM  1\/24  COCORAHS\n   MONTGOMERYVILLE       25.5   230 AM  1\/24  TRAINED SPOTTER\n   4 WNW HARLEYSVILLE    25.0   700 AM  1\/24  COCORAHS\n   HARLEYSVILLE          25.0  1000 AM  1\/24  SOCIAL MEDIA\n   1 W LIMERICK          24.5   900 AM  1\/24  COCORAHS\n   1 NNE COLLEGEVILLE    24.5   700 AM  1\/24  COCORAHS\n   WYNDMOOR              24.0   109 AM  1\/24  PUBLIC\n   SOUDERTON             23.5   700 PM  1\/23  COCORAHS\n   MAPLE GLEN            23.0   315 PM  1\/23  TRAINED SPOTTER\n   WYNNEWOOD             21.5   825 AM  1\/24  TRAINED SPOTTER\n   AMBLER                21.0   809 PM  1\/23  TRAINED SPOTTER\n   SSW HATFIELD          21.0   600 AM  1\/24  COCORAHS\n   2 SSW PENNSBURG       21.0   700 AM  1\/24  COCORAHS\n   2 SW HARLEYSVILLE     18.0   700 AM  1\/24  COCORAHS\n   GLASGOW               16.0  1104 AM  1\/24  TRAINED SPOTTER\"\"\"","1e2e06a7":"#Explanation of peak in early March 2018\ndf['2018-02-26':'2018-03-10'].groupby('date').count()\n\n#Dates of interest: 3\/2\/2018 and 3\/3\/2018\n\"\"\"\nSnowfall ranging from 8 to 12 inches across Montgomery County, PA\n\nSource:\n\nMontgomery County\nMaple Glen \t\t11.5\nBryn Mawr\t11.0\nHaverford\t11.0\nNorth Wales\t10.0\nWillow Grove \t10.0\nHorsham\t9.1\nHatboro \t9.0\nJenkintown\t 8.6\nKing of Prussia\t8.5\nPlymouth Meeting\t8.0\nLansdale\t8.0 \nUpper Gwynedd\t7.8\nWynnewood \t7.7\nGilbertsville\t6.1\nGraterford \t5.3\n\"\"\"","552c174d":"#November 2018 Explanation\ndf['2018-11-10':'2018-11-20'].groupby('date').count()\n\n#Explanation of peak in mid-November 2018\n\"\"\"\nSnowfall around ~5 inches for Montgomery County\n\nSource: https:\/\/patch.com\/pennsylvania\/doylestown\/eastern-pa-snow-totals-town-town-nov-15-storm\n\nMontgomery County:\n\nGilbertsville, 6.5 inches\nPerkiomen Twp, 5.3 inches\nPottstown, 5.2 inches\nKing Of Prussia, 5.0 inches\nNorth Wales, 4.9 inches\nEast Norriton Twp, 4.8 inches\nNarberth, 4.5 inches\nPlymouth Meeting, 4.5 inches\nLower Providence, 4.5 inches\n\n\"\"\"","2b54522e":"#Count of Type by Type\ndf['Reason'].value_counts().head(10)","46f25c41":"#Creating a bar plot in Seaborn for the count of calls separated by type or the 'Reason' column\nsplot = sns.countplot(x='Reason', data=df, palette='viridis')\nfor p in splot.patches:\n    splot.annotate(format(p.get_height(), '.2f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points', fontsize=15)\nplt.xticks(fontsize=15)\nplt.ylabel('Count', fontsize=22)\nplt.xlabel('Reason', fontsize=22)\nplt.title('Count of 911 Calls by Reason', fontsize = 25)","638c74a8":"#Creating a dataframe for the number of calls for each incident category. \ncountsPerReason = df.groupby(['date','Reason']).count()['lat'].unstack(level=1)\ncountsPerReason['date'] = countsPerReason.index\ncountsPerReason.head()","be5cace5":"#Plotting the frequency of calls over time, separated by type or the 'Reason' column\nfig5, ax5 = plt.subplots()\nreasons=['EMS', 'Fire', 'Traffic']\nfor reason in reasons:\n    sns.lineplot(x='date', y=reason, data = countsPerReason, ax=ax5, linewidth=1.0, label=reason, palette='viridis')\nplt.xlabel('Date', fontsize=15)\nplt.ylabel('Count', fontsize=15)\nplt.title('Frequency of Calls over Time by Type', fontsize=20)\nplt.xticks(fontsize=12)","105f1dad":"top20EMS = pd.DataFrame(df[df['Reason']=='EMS']['title'].value_counts().head(20))\ntop20EMS.rename(columns={'title':'Count'}, inplace=True)\ntop20EMS.head(5)\n","9d87777f":"#Creating a bar chart of the top types of EMS 911 calls\nfig, ax = plt.subplots(figsize=(25,10))\ntop = sns.barplot(x=top20EMS.index, y='Count', data=top20EMS, palette='viridis')\ntop.set_xticklabels(labels=top20EMS.index, rotation=30, ha='right', fontsize=15)\nplt.xlabel('Reason', fontsize=25)\nplt.ylabel('Count', fontsize=25)\nplt.title('EMS Calls by Type', fontsize=30)","9bcde408":"#Plotting the counts of different types of EMS calls throughout the week\n\n#Nearly all EMS incident types decrease throughout the weekend.\n#The most signficant decreases from weekday to weekend occur in the frequency of vehicle accidents and cardiac emergencies\n\n\ntop10EMSList = top20EMS.index.tolist()[0:10]\ntop10EMSList\nfig, ax= plt.subplots()\nfor title in top10EMSList:\n    tempDf = df[(df['Reason']=='EMS') & (df['title']== title)]\n    tempDf.reset_index(inplace=True)\n    tempDf = pd.DataFrame(tempDf.groupby('Day of Week').count()['lat'])\n    tempDf.reset_index(inplace=True)\n    daysDict={0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\n    revDaysDict = dict((v,k) for k,v in daysDict.items())\n    tempDf['Order'] = tempDf['Day of Week'].map(revDaysDict)\n    tempDf.sort_values(by='Order', inplace=True)\n    tempDf.reset_index(inplace=True, drop=True)\n    sns.lineplot(x='Day of Week', y='lat', data=tempDf, ax=ax, sort=False, label=title)\n    \nplt.xlabel('Day of Week', fontsize=20)\nplt.ylabel('Count', fontsize=20)\nplt.title('Frequency of EMS Calls by Day of Week', fontsize=25)\nplt.legend()\nax.legend(bbox_to_anchor=(1.1, 1.05))","e1688007":"#Creating a bar chart for the top types of 'Fire' 911 Calls\ntop10Fire = pd.DataFrame(df[df['Reason']=='Fire']['title'].value_counts().head(10))\ntop10Fire.rename(columns={'title':'Count'}, inplace=True)\ntop10Fire.plot(kind='barh')\nplt.xlabel('Count', fontsize=20)\nplt.ylabel('Reason', fontsize=20)\nplt.title('Fire Calls by Type', fontsize=25)","383c96de":"#Plotting the top 5 types of Traffic 911 Calls\ntop10Traffic =  pd.DataFrame(df[df['Reason']=='Traffic']['title'].value_counts().head(5))\ntop10Traffic.rename(columns = {'title':'Count'}, inplace=True)\ntop10Traffic.plot(kind='barh')\nplt.xlabel('Count', fontsize=25)\nplt.ylabel('Reason', fontsize=25)\nplt.title('Traffic Calls by Type', fontsize=30)","ca336d88":"#Making a dataframe of the count of Vehicle Accidents by Day of the week\nvehAcc = df[(df['Reason']=='Traffic') & (df['title']==' VEHICLE ACCIDENT -')]\nvehAccGb = pd.DataFrame(vehAcc.groupby('Day of Week').count()['lat'])\nvehAccGb.reset_index(inplace=True)\ndaysDict={0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nrevDaysDict = dict((v,k) for k,v in daysDict.items())\nvehAccGb['Order'] = vehAccGb['Day of Week'].map(revDaysDict)\nvehAccGb.sort_values(by='Order', inplace=True)\nvehAccGb.set_index('Order', inplace=True)\nvehAccGb.reset_index(inplace=True)\nvehAccGb.head(5)","9027cc8b":"#Plotting to see how the frequency of Vehicle Accidents changes throughout the week\nfig,ax = plt.subplots()\n\n#Dividing by the number of weeks covered in the data set (152) to give a weekly average of 'Traffic- Vehicle Accident' calls\nsns.lineplot(x='Day of Week', y= (vehAccGb['lat']\/152), data=vehAccGb, sort=False)\nplt.xlabel('Day of Week', fontsize=20)\nplt.ylabel('Count', fontsize=20)\nplt.title('Frequency of Vehicle Accidents per Week', fontsize=25)","f658004d":"#Grouping the DataFrame by the counts of calls per day of the week and hour of the day\ndayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\ndayHour.reset_index(inplace=True)\ndaysDict={0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nrevDaysDict = dict((v,k) for k,v in daysDict.items())\ndayHour['Order'] = dayHour['Day of Week'].map(revDaysDict)\ndayHour.sort_values(by='Order', inplace=True)\ndayHour.reset_index(inplace=True, drop=True)\ndayHour.set_index('Day of Week', inplace=True)\ndayHour.drop('Order', axis=1, inplace=True)\ndayHour.head(5)","6da09f9a":"#Plotting a heatmap of the frequency of calls by hour and day of week\nfig, ax = plt.subplots()\nsns.heatmap(data=dayHour, cmap= 'viridis', ax=ax)\nax.invert_yaxis()","1eadd4e5":"\ntitleVC = pd.DataFrame(df['title'].value_counts())\ntitleVC.head(5)","5833e89c":"(98401 + 24081)\/423909","5adddd8b":"#Grouping the data by the countsof calls per day of the week and month\ndayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\ndayMonth.reset_index(inplace=True)\ndaysDict={0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}\nrevDaysDict = dict((v,k) for k,v in daysDict.items())\ndayMonth['Order'] = dayMonth['Day of Week'].map(revDaysDict)\ndayMonth.sort_values(by='Order', inplace=True)\ndayMonth.reset_index(inplace=True, drop=True)\ndayMonth.set_index('Day of Week', inplace=True)\ndayMonth.drop('Order', axis=1, inplace=True)\ndayMonth.head(5)","9ef45906":"#Plotting a heatmap of the frequency of calls by day of the week and month\nfig, ax = plt.subplots()\nsns.heatmap(dayMonth,cmap='viridis', ax=ax)\nax.invert_yaxis()","9a50e377":"#Using the 10 townships with the highest numbers of calls to find which had the highest calls per person\ntownshipVC = pd.DataFrame(df['twp'].value_counts().head(10))\n\n\n#Population data taken from 2010 US Census\n#Source: https:\/\/www.census.gov\/prod\/cen2010\/cph-2-40.pdf\ntownshipPop = pd.DataFrame.from_dict({'LOWER MERION':57825,\n                          'ABINGTON':55310,\n                          'NORRISTOWN':34324,\n                          'UPPER MERION':28395,\n                          'CHELTENHAM':36793,\n                          'POTTSTOWN': 22377,\n                          'UPPER MORELAND':24015,\n                          'LOWER PROVIDENCE': 25436,\n                          'PLYMOUTH':16525,\n                          'HORSHAM':26147}, orient='index')\ntownshipPop.rename(columns={0:'Population'}, inplace=True)\n\n#Megrging the two DataFrames and creating a columns for 'Calls per Person'\ntop10 = townshipVC.join(townshipPop)\ntop10['Calls per Person'] = top10['twp']\/top10['Population']\ntop10.rename(columns={'twp':'# of Calls'}, inplace=True)\n\n\nlist = top10.index.tolist()\ntop10['Twp Name'] = top10.index\ntop10['Twp Name'].apply(str)\ntop10","a5477d2d":"#Plotting the calls per person by township\nfig, ax = plt.subplots()\nax.set_xlabel('Township')\nax.set_ylabel('Calls per Person')\nax.set_title('Calls per Person by Township')\nplt.setp( ax.xaxis.get_majorticklabels(), rotation=45 )\nplt.xticks(horizontalalignment='right')\nsns.lineplot(x='Twp Name', y='Calls per Person', data = top10,palette='Blues_d', ax=ax)","02d2f172":"#Creating a geodataframe with a column for the paired X and Y coordinates for each 911 Call\ndel list\nnewDf = df[['lat','lng','Year']]\nnewDf['Coordinates'] = list(zip(newDf.lng, newDf.lat))\nnewDf['Coordinates'] = newDf['Coordinates'].apply(Point)\ncrs = {'init':'epsg:3651'}\ngdf = gpd.GeoDataFrame(newDf, geometry='Coordinates', crs=crs)\ngdf.head(5)","f8d6fd17":"#Plotting all calls in the DataFrame on a Lat\/Long Axis\ngdf.plot()","e5c1d996":"#Removing the outliers from the dataset\nfrom scipy import stats\ndf = df[(np.abs(stats.zscore(df[['lat','lng']])) < 3).all(axis=1)]\ndf.info","655b6729":"#Recreating the geodataframe with delimited dataset\nnewDf = df[['lat','lng','Year']]\nnewDf['Coordinates'] = list(zip(newDf.lng, newDf.lat))\nnewDf['Coordinates'] = newDf['Coordinates'].apply(Point)\ncrs = {'init':'epsg:3651'}\ngdf = gpd.GeoDataFrame(newDf, geometry='Coordinates', crs=crs)\ngdf.head(5)","085943a4":"#Replotting the GeoDataFrame on a Lat\/Long Axis\ngdf.plot(markersize=1)","7de2b3bd":"#Creating a heatmap of 911 calls with GeoDataFrame\nfrom scipy import ndimage\ndef heatmap(d, bins=(100,100), smoothing=1.3, cmap='jet'):\n    def getx(pt):\n        return pt.coords[0][0]\n\n    def gety(pt):\n        return pt.coords[0][1]\n\n    x = list(d.geometry.apply(getx))\n    y = list(d.geometry.apply(gety))\n    heatmap, xedges, yedges = np.histogram2d(y, x, bins=bins)\n    extent = [yedges[0], yedges[-1], xedges[-1], xedges[0]]\n\n    logheatmap = np.log(heatmap)\n    logheatmap[np.isneginf(logheatmap)] = 0\n    logheatmap = ndimage.filters.gaussian_filter(logheatmap, smoothing, mode='nearest')\n    \n    plt.imshow(logheatmap, cmap=cmap, extent=extent)\n    plt.colorbar()\n    plt.gca().invert_yaxis()\n    plt.show()\n    \nheatmap(gdf, bins=(100,100))","fe2f41f4":"#Uploading a zip file of wtih geospatial data for Pennsylvania from census.gov\n#Source: https:\/\/www.census.gov\/geo\/maps-data\/data\/cbf\/cbf_cousub.html\nnewgdf = gpd.read_file('..\/input\/pennsylvania-shape-file\/cb_2017_42_cousub_500k.shp')\nnewgdf.plot()","3f295ce6":"#Using the County FIPS code (091) for Montgomery County, PA to plot data on top of county map\nmontgomeryCounty = newgdf[newgdf['COUNTYFP']== '091' ]\nmontgomeryCounty.plot()","bc7a12e5":"#GeoDataFrame for montgomeryCounty only\nmontgomeryCounty.head(5)","a3618363":"#Converting 'NAME' columns of GeoDataFrame to str.upper to match string format of township column in 911 calls dataframe\nmontgomeryCounty['NAME'] = montgomeryCounty['NAME'].apply(lambda x: x.upper())\nmontgomeryCounty.head(5)","d54205c2":"#Creating Geospatial JSON object to overlay on folium map\nmontgomeryCounty.to_file('montgomeryPA.geojson',driver='GeoJSON')","b6a9a81b":"#Creating a\nkeyon = gpd.read_file('montgomeryPA.geojson')\nkeyon.set_index('NAME',inplace=True)\nkeyon.head()","ebade51c":"#Calculating total number of incidents per district\ntwpdata2 = pd.DataFrame(df['twp'].value_counts().astype(float))\ntwpdata2.rename(columns={'twp':'Count'}, inplace=True)\ntwpdata2.head(10)","04fcf87f":"#Creating a new GeoDataFrame linking the counts from 'twpdata2' (above)\ntwpGeoData = keyon.join(twpdata2)\ntwpGeoData.reset_index(inplace=True)\ntwpGeoData.head(5)","730c137d":"#Editing the 'twpdata2' dataframe for readability\ntwpdata2.reset_index(inplace=True)\ntwpdata2.rename(columns={'index':'Township'},inplace=True)\ntwpdata2.head(5)","8434db0f":"#Creating GeoJSON object of twpGeoData to overlay on folium map\ntwpGeoData.to_file('montgomeryCountyPA.geojson',driver='GeoJSON')","3fc9a82b":"#Making the chloropleth map in folium\nmontgomeryChloropleth = folium.Map(location=[df['lat'].mean(), df['lng'].mean()], zoom_start=9.4,tiles='Cartodb Positron')\nfolium.Choropleth(geo_data = 'montgomeryCountyPA.geojson',  \n              data = twpdata2,\n              columns = ['Township','Count'],\n              key_on = 'feature.properties.index',\n              fill_color = 'YlOrRd', \n              fill_opacity = 0.6, \n              line_opacity = 0.2,\n              legend_name = 'Number of Calls').add_to(montgomeryChloropleth)\nmontgomeryChloropleth","c2895f80":"Calls were most frequent on weekdays at 5:00 PM\n1. Given vehicle accidents make up ~30% of all 911 calls most of these calls likely come from the increase in drivers on the road rush hour\n2. Calls increased gradually during the week until Friday, after which a decrease over the weekends occurred","08b20198":"Cleaning and loading the data","423b06c3":"The following is an exploratory analysis of 911 calls from Montgomery, Pennsylvania.\n\nThe data includes all Fire, Traffic, and EMS calls in Montgomery, PA from 12\/10\/2015 to 11\/16\/2018.\n\nThe calls are categorized by type (Traffic, Fire, EMS), date, and the location of the incident.","24c3b5b6":"**Column Information**\n\n1.) **lat**: Latitiude of incident\n\n    a.) dtype: float64\n    \n2.) **long:** Longitude of incident\n\n    a.) dtype: float64\n    \n3.) **desc**: Description of incident\n\n    a.) dtype: non-null object\n    \n4.) **zip**: Zipcode of incident\n\n    a.) dtype: float64\n    \n    b.) 170 unique values\n    \n5.) **title**: Incident label\n\n    a.) dtype: non-null object \n    \n    b.) Three categories of incidents: EMS, Fire, Traffic\n    \n    c.) Incident category followed by short description\n    \n    d.)  141 Unique Values\n    \n6.) **timeStamp**: Timestamp of incident\n\n    a.) dtype: non-null object\n    \n    b.) Date Range: 12\/10\/2015 - 11\/16\/2018\n    \n    \n7.) **twp**: Township of incident\n\n    a.) dtype: non-null object\n    \n    b.) 68 Unique Values\n    \n8.) **addr**: Address of incident\n\n    a.) dtype: non-null object\n    \n9.) **e:** Filler column","0b9b28d7":"Using Folium to create a chloropleth map of the count of calls by township","bdb8c50b":"Top Types of Call by Category"}}