{"cell_type":{"c7ef79c0":"code","66bf95ef":"code","2e7fcc2f":"code","1d7dd737":"code","beb53f14":"code","74748e85":"code","90e19923":"code","90dafb23":"code","a5737844":"code","5c6da6de":"code","25614d16":"code","6e926ff7":"code","386e4f67":"code","2e87feda":"code","a977d911":"code","6639a74d":"code","a0ab0585":"code","3b583864":"code","db13253a":"code","ce7d637e":"code","77893b38":"code","9a22007f":"code","06233f7a":"markdown","c6a6e886":"markdown","b674a54d":"markdown","4558936a":"markdown","83e1275d":"markdown","f9bc7cac":"markdown","9a6d777c":"markdown","02245cd8":"markdown","9dffbb1a":"markdown","984ec2d7":"markdown","da585c88":"markdown","54b5b91c":"markdown","34206388":"markdown","7d1c19d3":"markdown","07f600d8":"markdown","552a19b4":"markdown","19598f79":"markdown","fac2b764":"markdown","e52cad9c":"markdown"},"source":{"c7ef79c0":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","66bf95ef":"X_train = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/train.csv\", index_col= 'Id')\nX_test = pd.read_csv(\"\/kaggle\/input\/home-data-for-ml-course\/test.csv\", index_col = 'Id')","2e7fcc2f":"X_train","1d7dd737":"X_train.shape \n","beb53f14":"X_test.shape\n","74748e85":"X_train.dropna(axis=0, subset=[\"SalePrice\"], inplace=True)\ny = X_train.SalePrice\nX_train.drop([\"SalePrice\"], axis=1, inplace=True)","90e19923":"X_train_full, X_valid_full, y_train, y_valid = train_test_split(X_train, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)","90dafb23":"X_train_full.shape, X_valid_full.shape, y_train.shape, y_valid.shape","a5737844":"categorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]","5c6da6de":"numerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]","25614d16":"my_cols = categorical_cols + numerical_cols\nX_Train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_Test = X_test[my_cols].copy()","6e926ff7":"from sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error","386e4f67":"numerical_transformer = SimpleImputer(strategy='constant')","2e87feda":"categorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])","a977d911":"preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","6639a74d":"import catboost as cb\nmodel1 = cb.CatBoostRegressor(loss_function='RMSE',random_state=42,verbose=False)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline1 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model1)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline1.fit(X_Train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds1 = my_pipeline1.predict(X_valid)","a0ab0585":"from sklearn.ensemble import GradientBoostingRegressor\nmodel2 = GradientBoostingRegressor(n_estimators=1000, random_state=42)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline2 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model2)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline2.fit(X_Train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds2 = my_pipeline2.predict(X_valid)","3b583864":"model3 = RandomForestRegressor(n_estimators=5000,random_state=42)\n\n# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline3 = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', model3)\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline3.fit(X_Train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds3 = my_pipeline3.predict(X_valid)","db13253a":"score = mean_absolute_error(y_valid, preds1)\nprint('MAE:', score)\nscore = mean_absolute_error(y_valid, preds2)\nprint('MAE:', score)\nscore = mean_absolute_error(y_valid, preds3)\nprint('MAE:', score)","ce7d637e":"preds= (preds1+ preds2+ preds3)\/3\n\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","77893b38":"# Preprocessing of test data, fit model\npreds_test1 = my_pipeline1.predict(X_test)\npreds_test2 = my_pipeline2.predict(X_test)\npreds_test3 = my_pipeline3.predict(X_test)\npreds_test = (preds_test1+preds_test2+ preds_test3 )\/3","9a22007f":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test3})\noutput.to_csv('sn.csv', index=False)","06233f7a":"**Break off validation set from training data**","c6a6e886":"**\"Cardinality\" means the number of unique values in a column**\n\n**Select categorical columns with relatively low cardinality (convenient but arbitrary)**","b674a54d":"**Average of their predictions**","4558936a":"**Preprocessing for numerical data**\n\n**Using SimpleImputer to fill all missing values in numerical columns**","83e1275d":"* **Preprocessing**\nRemove rows with missing target, separate target from predictors","f9bc7cac":"\n**Model : 2**\n\n**GradientBoostingRegressor**","9a6d777c":"**Selecting numerical columns**","02245cd8":"* **Importing** ","9dffbb1a":" * **Shape of the dataset**","984ec2d7":"* **Read CSV files**","da585c88":"* Using pipeline\n* Using  RandomForestRegressor, GradientBoostingRegressor, CatBoostRegressor.","54b5b91c":"**Model : 3**\n\n **RandomForestRegressor**","34206388":"**select columns only**","7d1c19d3":"**Implement Pipeline**","07f600d8":"**Predict Test set**","552a19b4":"**MAE of each model**","19598f79":"**Preprocessing for categorical data**","fac2b764":"**Model : 1**\n\n**CatBoostRegressor**","e52cad9c":"**Bundle preprocessing for numerical and categorical data**"}}