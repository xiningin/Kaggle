{"cell_type":{"931b4ca5":"code","8335aead":"code","a0be6600":"code","e52b41af":"code","122c016c":"code","31ee1321":"code","675608f7":"code","96236dbb":"code","ed72b485":"code","2b2101d7":"code","66e28794":"code","424beda3":"code","c823cf17":"code","672a8338":"code","63880a9c":"code","58f879c7":"code","49087690":"code","49b08f63":"code","aa237f1d":"code","aa206dc4":"code","945de031":"code","816dfa17":"code","6a5ae809":"code","8b886aec":"code","f85df0e7":"code","a5a5cc73":"code","ba51afb7":"code","cd09babb":"code","004c0424":"code","3509e883":"code","fada01aa":"code","f366eb90":"code","1340a440":"code","078c654f":"code","330ec7c6":"code","c73342c9":"code","8f3aa774":"code","9546b0ed":"code","5fed2b1a":"code","e45d651a":"code","103c2bd7":"code","ba8edfa0":"code","8c47bafb":"code","71a5cc26":"markdown","31ea06cc":"markdown","ccafcfae":"markdown","1d0a90f8":"markdown","2981bbba":"markdown","5d8596b2":"markdown","fdee0b98":"markdown","b2c28898":"markdown","1ba1a34d":"markdown","1f89c1ac":"markdown","f603b230":"markdown","be1f032a":"markdown","dc05e55b":"markdown","789b755c":"markdown","2a30b7d0":"markdown","57e91bf5":"markdown","e197cb3e":"markdown","1d68945d":"markdown","a9fd64f8":"markdown","eb7c68e0":"markdown","6350fcbe":"markdown","6489f8fb":"markdown","d22793c2":"markdown","3afedd98":"markdown","205ea844":"markdown","4c06526c":"markdown","d581e675":"markdown"},"source":{"931b4ca5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical, plot_model\nfrom tensorflow.math import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\n\nimport warnings\n\nwarnings.filterwarnings('ignore')","8335aead":"(train_image, train_label) , (test_image, test_label) = cifar10.load_data()","a0be6600":"print(f\"Shape of train image is: {train_image.shape}\\n\")\nprint(f'Shape of test image is: {test_image.shape}')","e52b41af":"print(f'Shape of train label is: {train_label.shape}\\n')\nprint(f'Shape of test label is: {test_label.shape}')","122c016c":"fig, axes = plt.subplots(4,4, figsize=(13,9))\nfig.tight_layout()\nplt.suptitle(\"FROM TRAIN DATA\\n\\n\\n\\n\", size = 20, va = 'center', color = '#ff781c', fontweight='bold')\n\nfor i in range(4):\n    for j in range(4):\n        \n        # Select random number b\/w 0 and length of train_image\n        rand_num = np.random.randint(0, len(train_image) + 1)\n        img = train_image[rand_num]      # image at specific index\n        label = train_label[rand_num]    # label number of image\n\n        axes[i][j].imshow(img, aspect='auto')\n        axes[i][j].set_title(f\"INDEX is: {rand_num} ---- LABEL is: {label}\")\n        axes[i][j].axis('off')","31ee1321":"fig, axes = plt.subplots(4,4, figsize=(13,9))\nfig.tight_layout()\nplt.suptitle(\"TEST DATA\\n\\n\\n\\n\", size = 20, va = 'center', color = '#ff781c', fontweight='bold')\n\nfor i in range(4):\n    for j in range(4):\n        \n        # Select random number b\/w 0 and length of test_image\n        rand_num = np.random.randint(0, len(test_image) + 1)\n        img = test_image[rand_num]      # image at specific index\n        label = test_label[rand_num]    # label number of image\n\n        axes[i][j].imshow(img, aspect='auto')\n        axes[i][j].set_title(f\"INDEX is: {rand_num} ---- LABEL is: {label}\")\n        axes[i][j].axis('off')","675608f7":"train_label = train_label.reshape(train_label.shape[0])\ntest_label = test_label.reshape(test_label.shape[0])","96236dbb":"classes = [\"Airplane\", \"Car\", \"Bird\", \"Cat\", \"Deer\", \"Dog\", \"Frog\", \"Horse\", \"Ship\", \"Truck\"]","ed72b485":"plt.figure(figsize = (12,6))\nplt.title(\"Count of Data in Train Label\\n\", size = 15)\n\nsns.countplot(x = train_label, palette='mako').set(xticklabels = classes);","2b2101d7":"plt.figure(figsize = (12,6))\nplt.title(\"Count of Data in Test Label\\n\", size = 15)\n\nsns.countplot(x = test_label, palette='mako').set(xticklabels = classes);","66e28794":"print(f\"Maximum value in train_images is: {train_image.max()}\")\nprint(f\"Minimum value in train_images is: {train_image.min()}\\n\")\n\nprint(f\"Maximum value in test_images is: {test_image.max()}\")\nprint(f\"Minimum value in test_images is: {test_image.min()}\")","424beda3":"train_image = train_image.astype('float64') \/ 255.0\ntest_image = test_image.astype('float64') \/ 255.0","c823cf17":"print(f\"Maximum value in train_images is: {train_image.max()}\")\nprint(f\"Minimum value in train_images is: {train_image.min()}\\n\")\n\nprint(f\"Maximum value in test_images is: {test_image.max()}\")\nprint(f\"Minimum value in test_images is: {test_image.min()}\")","672a8338":"print(train_label)\nprint(test_label)","63880a9c":"train_label = to_categorical(train_label, num_classes = 10)\ntest_label = to_categorical(test_label, num_classes = 10)","58f879c7":"print(train_label)\nprint(test_label)","49087690":"input_shape = train_image.shape[1:]\nnum_classes = 10","49b08f63":"model = Sequential()\n\nmodel.add(Conv2D(filters = 128, kernel_size = 2, padding = \"same\",activation = \"relu\", input_shape = input_shape))\nmodel.add(MaxPooling2D(pool_size = 2))\n\nmodel.add(Conv2D(filters = 32, kernel_size = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = 2))\n\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(filters = 64, kernel_size = 2, padding = \"same\", activation = \"relu\"))\nmodel.add(MaxPooling2D(pool_size = 2))\n\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(500, activation = \"relu\"))\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(num_classes, activation = \"softmax\"))","aa237f1d":"model.summary()","aa206dc4":"plot_model(model, show_dtype = True, show_layer_names = True)","945de031":"model.compile(optimizer = 'adam',\n              loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])","816dfa17":"callbacks = [\n    EarlyStopping(monitor = 'val_loss', patience = 6),\n    ReduceLROnPlateau(monitor = 'val_loss', patience = 3),    \n]","6a5ae809":"result = model.fit(train_image, train_label,\n                   validation_split = 0.2,\n                   epochs = 30,\n                   batch_size = 32,\n                   callbacks = [callbacks])","8b886aec":"train_loss = result.history['loss']\ntrain_acc = result.history['accuracy']\nval_loss = result.history['val_loss']\nval_acc = result.history['val_accuracy']","f85df0e7":"pd.DataFrame({\"Training Loss\" : train_loss,\n             \"Validation Loss\": val_loss,\n             \"Train Accuracy\" : train_acc,\n             \"Validation Accuracy\" : val_acc}).style.bar(color='#ff781c') ","a5a5cc73":"plt.figure(figsize = (12,6))\n\nplt.title(\"Model Loss\\n\", size = 17)\nplt.plot(train_loss, label = \"Train Loss\", marker = 'o')\nplt.plot(val_loss, label='Validation Loss', linestyle='--', marker='o')\nplt.grid()\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\n\nplt.legend();","ba51afb7":"plt.figure(figsize = (12,6))\n\nplt.title(\"Model Accuracy\\n\", size = 17)\nplt.plot(train_acc, label = \"Train Accuracy\", marker = 'o')\nplt.plot(val_acc, label='Validation Accuracy', linestyle='--', marker='o')\nplt.grid()\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Accuracy\")\n\nplt.legend();","cd09babb":"test_loss , test_acc = model.evaluate(test_image , test_label)","004c0424":"print(f'Loss on test data is: {test_loss}')\nprint(f\"Accuracy on test data is: {test_acc}\")","3509e883":"img_15 = np.expand_dims(test_image[15], axis = 0)\n\npred_1 = model.predict(img_15)\npred_1","fada01aa":"pred_1.max()","f366eb90":"pred_1.argmax()","1340a440":"plt.figure(figsize = (10,5))\n\nplt.imshow(test_image[15]);","078c654f":"fig, axes = plt.subplots(4,4, figsize=(13,12))\nplt.suptitle(\"MODEL PREDICTION ON TEST DATA\\n\", size = 20, va = 'center', color = '#ff781c', fontweight='bold')\n\nfor i in range(4):\n    for j in range(4):\n        \n        # Select random number b\/w 0 and length of test_image\n        rand_num = np.random.randint(0, len(test_image) + 1)\n        \n        # image at specific index and expanding image dimesions (3d to 4d)\n        img = np.expand_dims(test_image[rand_num], axis = 0) \n        \n        # label number of image\n        actual_label = test_label[rand_num]    \n        \n        # model prediction\n        prediction = model.predict(img)\n        \n        # model accuracy on image        \n        predicted_score = prediction.max()\n        \n        # index number(class number) of greater value         \n        predict_label = prediction.argmax()\n                \n\n        axes[i][j].imshow(img.reshape(32,32,3), aspect='auto')\n        axes[i][j].set_title(f\"\\nPredicted Label: {predict_label} \\n Score: {predicted_score} \\n Actual Label: {actual_label.argmax()}\")\n        axes[i][j].axis('off')\n        plt.tight_layout()","330ec7c6":"all_prediction = model.predict(test_image)","c73342c9":"predicted_labels = [np.argmax(pred) for pred in all_prediction]       ","8f3aa774":"test_label = [np.argmax(i) for i in test_label]  ","9546b0ed":"predicted_labels[:20]            # displaying first 20 predicted labels","5fed2b1a":"test_label[:20]               # displaying first 20 actual labels","e45d651a":"# creating confusion matrix\n\ncm = confusion_matrix(labels = test_label, predictions = predicted_labels)","103c2bd7":"cm","ba8edfa0":"#  Visualizing using seaborn\n\nplt.figure(figsize = (13,8))\nsns.heatmap(cm, annot = True, fmt = 'd').set(xticklabels = classes, yticklabels = classes)\nplt.xlabel(\"Prediction\", size = 13)\nplt.ylabel(\"Truth\",  size = 13)\nplt.show()","8c47bafb":"print(classification_report(test_label, predicted_labels))","71a5cc26":"<a id=\"3\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Meta information of dataframe<\/p>","31ea06cc":"<a id=\"4\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Displaying some random images from Training data<\/p>","ccafcfae":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">\ud83d\udccb TABLE OF CONTENTS<\/p>   \n","1d0a90f8":"<a id=\"1\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Importing Libraries<\/p>","2981bbba":"<a id=\"7\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Frequency of classes<\/p>","5d8596b2":"<a id=\"13\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Evaluating model on Test data<\/p>\n","fdee0b98":"#### **Model predicts that image on 15<sup>th<\/sup> index of test data belongs to 8<sup>th<\/sup> class which is `Ship`**\n\n#### **Now Checking whether model predicts right or wrong**","b2c28898":"<a id=\"11\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Plotting model layers<\/p>\n\n\n\n\n\n\n\n\n\n\n\n\n","1ba1a34d":"<a id=\"8\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Normalizing pixel values<\/p>\n\n<h4 align='left'><b>Normalization of values between 0 and 1 helps CNN model to converge faster<\/b><\/h4>\n\n","1f89c1ac":"<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">If you like my Work, Please Upvote. Thank You \ud83d\ude0a<\/p>\n","f603b230":"* [1. Importing Libraries](#1)\n    \n* [2. Loading data](#2)\n    \n* [3. Meta information of dataframe](#3)  \n    \n* [4. Random images from Training data](#4)\n    \n* [5. Random images from Test data](#5)\n   \n* [6. Converting labels from 2D to 1D](#6)\n  \n* [7. Visualize Frequency of Each Class](#7)\n \n* [8. Normalization](#8)\n\n* [9. One Hot Encoding](#9)\n\n* [10. Creating CNN Model](#10)\n\n* [11. Plotting model layers](#11)\n\n* [12. Visualizing Model Accuracy & Loss](#12)\n\n* [13. Evaluating model on Test data](#13)\n\n* [14. Model Prediction](#14)\n\n* [15. Predicting model accuracy on some random test data](#15)\n\n* [16. Confusion Matrix](#16)\n\n* [17. Classification Report](#17)\n\n","be1f032a":"<a id=\"9\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">One-hot Encoding of Labels<\/p>\n\n\n\n\n","dc05e55b":"|Label | Description\n|------|------------\n|0\t   | Airplane\n|1\t|Automobile\n|2\t|Birds \n|3\t|Cat\n|4\t|Deer\n|5\t|Dog\n|6\t|Frog\n|7\t|Horse\n|8\t|Ship\n|9\t|Truck\n","789b755c":"<a id=\"6\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Converting labels from 2D to 1D<\/p>\n","2a30b7d0":"\n<a id=\"10\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Creating CNN Model<\/p>\n\n\n\n\n\n\n\n\n","57e91bf5":"### **Shape of image**","e197cb3e":"<a id=\"12\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Visualizing Model Accuracy & Loss<\/p>\n","1d68945d":"Mode seem to be confusing on airplan vs ship and cat vs dog. rest seem to be good.","a9fd64f8":"### **So the model predicted correctly.**","eb7c68e0":"\n<a id=\"5\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Displaying some random images from Test data<\/p>\n","6350fcbe":"<a id=\"2\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Loading Data<\/p>","6489f8fb":"<a id=\"15\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Predicting model accuracy on some random Test data<\/p>\n","d22793c2":"The CIFAR-10 dataset (Canadian Institute For Advanced Research) is a collection of different images. It is one of the most widely used datasets in machine learning. The CIFAR-10 dataset contains 60,000 32x32 color images in 10 different classes. The 10 different classes represent airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks. There are 6,000 images of each class.","3afedd98":"<a id=\"14\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Prediction from model<\/p>\n","205ea844":"<a id=\"17\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Classification Report<\/p>\n","4c06526c":"**So the data is balanced**","d581e675":"<a id=\"16\"><\/a>\n<p style=\"background-color:#ff781c;font-family:newtimeroman;color:#000000;font-size:170%;text-align:center;border-radius:20px 80px;\">Confusion Matrix<\/p>\n"}}