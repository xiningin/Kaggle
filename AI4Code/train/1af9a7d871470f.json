{"cell_type":{"be41359d":"code","97ced725":"code","74572315":"code","f2999d09":"code","1cf31cf1":"code","48189cbc":"code","215c75e3":"code","e44afd1b":"code","6467feb8":"code","6083c9a8":"code","72f795bc":"code","cd5c74ac":"code","36d47ef8":"code","864314b3":"code","6c7b8f24":"code","b2f8d9d3":"code","fa14ceb9":"code","c85013ca":"code","6ee92da4":"code","8101d312":"code","d85f4004":"code","285966dc":"code","c372986a":"code","e7202c1f":"code","9ef47dda":"code","c1b3086f":"code","d0922485":"code","9a956dd2":"code","d9ad3ce9":"code","56cb0ad2":"code","f1c74f0f":"code","a9f4209c":"code","14e452a9":"code","6561b5d7":"code","4d742744":"code","64e2df0d":"code","e8263cf9":"code","394c75f5":"code","bfac6c1c":"code","34ae249e":"code","8a1495d0":"code","f2d6c02d":"markdown"},"source":{"be41359d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","97ced725":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom PIL import Image\n%matplotlib inline\nfrom statsmodels.formula.api import ols\nimport statsmodels.api as sm\nimport scipy.stats as stat\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import r2_score","74572315":"import pandas as pd\nAB_NYC_2019 = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","f2999d09":"# Headings  \nAB_NYC_2019.head()\n\n","1cf31cf1":"# dimension\nrows, columns = AB_NYC_2019.shape\n(f\"AB_NYC_2019 consists {rows} rows and {columns} columns\")","48189cbc":"# checking for missing vlaues or null\nAB_NYC_2019.isnull().sum()\n","215c75e3":"AB_NYC_2019.dropna(how = \"any\", inplace = True)\nAB_NYC_2019.info()","e44afd1b":"# replacing null values with 0\nAB_NYC_2019[\"last_review\"].fillna(0, inplace = True)\nAB_NYC_2019[\"reviews_per_month\"].fillna(0, inplace = True)","6467feb8":"# neighbourhood and room counts\nplt.figure(figsize = (12,8))\nsns.countplot(AB_NYC_2019[\"neighbourhood_group\"])\n\nplt.figure(figsize = (12,8))\nsns.countplot(AB_NYC_2019[\"room_type\"])","6083c9a8":"# Distribution of neighbourhood groups in new york \nplt.figure(figsize = (12,8))\nsns.scatterplot(AB_NYC_2019[\"latitude\"], AB_NYC_2019[\"longitude\"], hue = \"neighbourhood_group\", data = AB_NYC_2019, alpha = \"auto\")\n\n","72f795bc":"# Distribution of different room types in Newyork \nplt.figure(figsize = (12,8))\nsns.scatterplot(AB_NYC_2019[\"latitude\"], AB_NYC_2019[\"longitude\"], hue = \"room_type\", data = AB_NYC_2019, alpha = \"auto\")","cd5c74ac":"# Filtering and grouping data \nrom_neig = AB_NYC_2019.groupby([\"room_type\", \"neighbourhood_group\"])[\"price\"]. mean()","36d47ef8":"bnb_pvt = AB_NYC_2019.query(\"room_type == 'Private room'\").groupby(\"neighbourhood_group\")[\"price\"].mean()","864314b3":"bnb_apt = AB_NYC_2019.query(\"room_type == 'Entire home\/apt'\").groupby(\"neighbourhood_group\")[\"price\"].mean()","6c7b8f24":"bnb_shr = AB_NYC_2019.query(\"room_type == 'Shared room'\").groupby(\"neighbourhood_group\")[\"price\"].mean()","b2f8d9d3":"plt.figure(figsize = (12,8))\nplt.xticks(rotation = 45)\nsns.barplot(x = AB_NYC_2019[\"neighbourhood_group\"], y = AB_NYC_2019[\"price\"], estimator = np.mean, saturation=.75)","fa14ceb9":"# Reviews and listings in each state\nno_rev = AB_NYC_2019.groupby([\"neighbourhood_group\", \"neighbourhood\"])[\"number_of_reviews\"].sum().sort_values(ascending = False).head(5)\n","c85013ca":"no_lst = AB_NYC_2019.groupby([\"neighbourhood_group\", \"neighbourhood\"])[\"calculated_host_listings_count\"].sum().sort_values(ascending = False).head(5)\n","6ee92da4":"rev_per_mon = AB_NYC_2019.groupby([\"neighbourhood_group\", \"neighbourhood\"])[\"reviews_per_month\"].sum().sort_values(ascending = False).head(5)\n","8101d312":"# Reviews on the basis of hostname\nno_of_rev_host = AB_NYC_2019.query(\"neighbourhood_group == ['Brooklyn', 'Manhattan', 'Queens', 'Bronx', 'Staten Island']\").groupby([\"neighbourhood_group\", \"neighbourhood\", \"host_name\",])[\"number_of_reviews\"].sum().sort_values(ascending = False).head(5)\n","d85f4004":"no_of_rev_host_mnth = AB_NYC_2019.query(\"neighbourhood_group == ['Brooklyn', 'Manhattan', 'Queens', 'Bronx', 'Staten Island']\").groupby([\"neighbourhood_group\", \"neighbourhood\", \"host_name\",])[\"reviews_per_month\"].sum().sort_values(ascending = False).head(5)\n","285966dc":"no_of_host_lst = AB_NYC_2019.query(\"neighbourhood_group == ['Brooklyn', 'Manhattan', 'Queens', 'Bronx', 'Staten Island']\").groupby([\"neighbourhood_group\", \"neighbourhood\", \"host_name\",])[\"calculated_host_listings_count\"].sum().sort_values(ascending = False).head(5)\n","c372986a":"# Prediction\n# encoding coverting cateogoriacal varaible into numercial variable \ndef Encode(AB_NYC_2019):\n    for column in AB_NYC_2019.columns[AB_NYC_2019.columns.isin(['neighbourhood_group', 'room_type'])]:\n        AB_NYC_2019[column] = AB_NYC_2019[column].factorize()[0]\n    return AB_NYC_2019\nairbnb_en = Encode(AB_NYC_2019.copy())","e7202c1f":"# Correlation map \nplt.figure(figsize=(12,8))\nsns.heatmap(airbnb_en.corr())","9ef47dda":"\n# Preparaing independent and dependent variable \nfor i in airbnb_en.head():\n    print(i)","c1b3086f":"x = np.array(pd.get_dummies(airbnb_en.iloc[:,[4,8,10,11,14]]))\ny = np.array(airbnb_en[\"price\"])","d0922485":"# Generating test and train data from variables linearregression \nx_train,x_test,y_train,y_test = train_test_split(x,y)","9a956dd2":"\nlm_mod = LinearRegression()\n\nlm_train = lm_mod.fit(x_train, y_train)","d9ad3ce9":"# Intercept and Coefficient of each independent variable \nlm_train.intercept_\n","56cb0ad2":"lm_train.coef_","f1c74f0f":"y_predict = lm_mod.predict(x_test)","a9f4209c":"# Rsquare value is too low\nr2_score(y_test,y_predict)","14e452a9":"plt.scatter(y_test,y_predict)","6561b5d7":"# To validate the regression model three steps has to be done \n# Mean Absolute Error\n# Mean Squared Error\n# Root Mean Squared Error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error","4d742744":"Mean_Absolute_Error = mean_absolute_error(y_test,y_predict)","64e2df0d":"Mean_Squared_Error =  mean_squared_error(y_test,y_predict)","e8263cf9":"Root_Mean_Squared_Error = np.sqrt(mean_squared_error(y_test,y_predict))","394c75f5":" # Generating test and train data from variables Decsion tree regression \nd_tree = DecisionTreeRegressor(min_samples_leaf = 0.0001)\n\ndtree_train = d_tree.fit(x_train, y_train)","bfac6c1c":"dtree_train.score(x,y)","34ae249e":"dtree_y_predict = d_tree.predict(x_test)","8a1495d0":"r2_score(y_test,dtree_y_predict)","f2d6c02d":"# Both model value suggests, its not suitable for production. "}}