{"cell_type":{"45ab1d7e":"code","2982e3e9":"code","4e2bde97":"code","32b5ecb3":"code","3753cf95":"code","36b3f608":"code","b5c7ec51":"code","9d1a3b2d":"code","a76dc39a":"code","79a5fcde":"code","6d984c11":"code","32df9f86":"code","350bed73":"code","6602b63c":"code","a0688650":"code","8cea5161":"code","bcd3760c":"code","d6206928":"markdown","1687cec7":"markdown","d3fdecc7":"markdown","3047fafa":"markdown","365915e9":"markdown","f1eb01f3":"markdown","1f66122b":"markdown","3917baac":"markdown","a7104a33":"markdown"},"source":{"45ab1d7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2982e3e9":"import matplotlib.pyplot as plt\nimport tensorflow as tf \nfrom tensorflow import keras \nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Conv2D, MaxPooling2D, Flatten, Dropout, BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import precision_recall_curve, roc_curve, accuracy_score, confusion_matrix, precision_score, recall_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nplt.style.use('fivethirtyeight')\nimport pickle \nimport os \nimport numpy as np\nimport cv2 \n%matplotlib inline\nimport pandas.util.testing as tm\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler","4e2bde97":"labels = ['bad', 'good']\nimg_size = 100\ndef get_training_data(data_dir):\n    data = [] \n    for label in labels: \n        path = os.path.join(data_dir, label)\n        class_num = labels.index(label)\n        for img in os.listdir(path):\n            try:\n                img_arr = cv2.imread(os.path.join(path, img),cv2.IMREAD_GRAYSCALE)\n                resized_arr = cv2.resize(img_arr, (img_size, img_size))\n                data.append([resized_arr, class_num])\n            except Exception as e:\n                print(e)\n    return np.array(data)","32b5ecb3":"train = get_training_data('..\/input\/cubesat\/training_dataset_v3')\ntest = get_training_data('..\/input\/cubesat\/test_dataset_v5')","3753cf95":"bad = 0 \ngood = 0 \n\nfor i, j in train:\n    if j == 0:\n        bad+=1\n    else:\n        good+=1\n        \nprint('Bad:', bad)\nprint('good:', good)\nprint('Bad - Good:', bad-good)","36b3f608":"X = []\ny = []\n\nfor feature, label in train:\n    X.append(feature)\n    y.append(label)\n\nfor feature, label in test:\n    X.append(feature)\n    y.append(label)\n    \n\n\n# resize data for deep learning \nX = np.array(X).reshape(-1, img_size, img_size, 1)\ny = np.array(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=32)","b5c7ec51":"X_train = X_train \/ 255\nX_test = X_test \/ 255","9d1a3b2d":"model = Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu',\n                 input_shape = (100, 100, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))","a76dc39a":"model.summary()","79a5fcde":"testing = False\nepochs = 15\n\nmodel.compile(optimizer='adam', \n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\nhistory = model.fit(X_train, y_train, epochs=epochs)\n\ntest_loss, test_acc = model.evaluate(X_test, y_test)","6d984c11":"print('\\nTest accuracy: {}'.format(test_acc))","32df9f86":"print(model.predict(X_test))","350bed73":"plt.plot(history.history['accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\n\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","6602b63c":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras","a0688650":"!sudo pip install h5py","8cea5161":"# serialize model to JSON\nmodel_json = model.to_json()\nwith open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)\n# serialize weights to HDF5\nmodel.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","bcd3760c":"model.save(\"my_model\")","d6206928":"# **Training Model**","1687cec7":"# **Data Normalization**","d3fdecc7":"# **Convolution Model**\n<img src = \"https:\/\/i.imgur.com\/EfpBIuO.png\" weight = \"700\">","3047fafa":"# **Data Processing**","365915e9":"# **Extract Trained Model**","f1eb01f3":"# **Summarize Results**","1f66122b":"# **Importing Libraries**","3917baac":"# **Data Distribution**","a7104a33":"# **Predict Data**"}}