{"cell_type":{"ff0c4b57":"code","2c600aef":"code","cfcff35d":"code","42b093da":"code","dc4863c9":"code","c9685966":"code","e07168d4":"code","7890cf80":"code","a37e202f":"code","d9e6d7ba":"code","3a3de444":"code","38e42f40":"code","120d6ffe":"code","2d3cba00":"code","37ef89a8":"code","9bb22ed0":"code","246c448c":"code","84ff318f":"code","97b47115":"code","fd3d6587":"code","ca4bb5c1":"code","be97b640":"code","ac05a485":"code","00dd1625":"code","191b45df":"code","c14025c3":"markdown","9dec094a":"markdown","c6e51a6f":"markdown","c0782b21":"markdown","88f54f81":"markdown","3864d4cf":"markdown","94eb3631":"markdown"},"source":{"ff0c4b57":"import tensorflow as tf\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nfrom PIL import Image","2c600aef":"IMG_CHANNELS, IMG_WIDTH, IMG_HEIGHT = 1, 512, 512","cfcff35d":"X=np.load(\"..\/input\/resized-fire\/source_resized (1).npy\",allow_pickle=True)","42b093da":"a=[]\nfor i in range(0,37):\n    a.append(X[i])","dc4863c9":"plt.imshow(X[0])","c9685966":"a=np.array(a)\ntype(a)\na=a\/255\na[0].max()","e07168d4":"y=np.load(\"..\/input\/resized-fire\/truth_resized (1).npy\",allow_pickle=True)","7890cf80":"b=[]\nfor i in range(0,37):\n    b.append(y[i])\nb=np.array(b)\ntype(b)\nb[0].max()","a37e202f":"from scipy import ndimage\nfrom skimage import filters\nfor i in range (0,37):\n    a[i]= ndimage.gaussian_filter(a[i], sigma=3)","d9e6d7ba":"inputs = tf.keras.layers.Input((512,512, 1))\ns = tf.keras.layers.Lambda(lambda x: x)(inputs)\n\n#Contraction path\nc1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(s)\nc1 = tf.keras.layers.Dropout(0.1)(c1)\nc1 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c1)\np1 = tf.keras.layers.MaxPooling2D((2, 2))(c1)\n\nc2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p1)\nc2 = tf.keras.layers.Dropout(0.1)(c2)\nc2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c2)\np2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)\n \nc3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p2)\nc3 = tf.keras.layers.Dropout(0.2)(c3)\nc3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c3)\np3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)\n \nc4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p3)\nc4 = tf.keras.layers.Dropout(0.2)(c4)\nc4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c4)\np4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c4)\n \nc5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)\nc5 = tf.keras.layers.Dropout(0.3)(c5)\nc5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)\n\n#Expansive path \nu6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c5)\nu6 = tf.keras.layers.concatenate([u6, c4])\nc6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u6)\nc6 = tf.keras.layers.Dropout(0.2)(c6)\nc6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c6)\n \nu7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c6)\nu7 = tf.keras.layers.concatenate([u7, c3])\nc7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u7)\nc7 = tf.keras.layers.Dropout(0.2)(c7)\nc7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c7)\n \nu8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(c7)\nu8 = tf.keras.layers.concatenate([u8, c2])\nc8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u8)\nc8 = tf.keras.layers.Dropout(0.1)(c8)\nc8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c8)\n \nu9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(c8)\nu9 = tf.keras.layers.concatenate([u9, c1], axis=3)\nc9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u9)\nc9 = tf.keras.layers.Dropout(0.1)(c9)\nc9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c9)\n \noutputs = tf.keras.layers.Conv2D(1, (1, 1), activation='sigmoid')(c9)\n \nmodel = tf.keras.Model(inputs=[inputs], outputs=[outputs])\nmodel.compile( optimizer=\"adam\", loss='binary_crossentropy', metrics=['AUC'])# tf.keras.optimizers.Adam(learning_rate=0.001,\nmodel.summary()","3a3de444":"X_train=a[:35]\ny_train=b[:35]\nX_test=a[35:]\ny_test=b[35:]","38e42f40":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(shear_range=0.15, zoom_range=0.15,width_shift_range=0.15,height_shift_range=0.15,rotation_range=20,horizontal_flip=True,vertical_flip=True)\ndatagen.fit(X_train.reshape(35,512,512,1))","120d6ffe":"results = model.fit(X_train,y_train, validation_split=0.1, batch_size=10, epochs=100)","2d3cba00":"# summarize history for accuracy\nplt.plot(results.history['auc'])\nplt.plot(results.history['val_auc'])\nplt.title('model auc')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n\n# summarize history for loss\nplt.plot(results.history['loss'])\nplt.plot(results.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","37ef89a8":"plt.imshow(y_test[0].reshape(512,512))","9bb22ed0":"predictions0 = model.predict(X_test[0].reshape(1,512,512,1))\nplt.imshow(predictions0.reshape(512,512))","246c448c":"predictions0=predictions0.reshape(512,512)","84ff318f":"plt.imshow(predictions0>0.15)","97b47115":"for i in range(0,512):\n    for j in range (0,512):\n        if predictions0[i][j]>0.15:\n            predictions0[i][j]=1\n        else:\n            predictions0[i][j]=0\n            ","fd3d6587":"from sklearn.metrics import confusion_matrix\n\ntn, fp, fn, tp=confusion_matrix(predictions0.flatten(),y_test[0].flatten()).ravel()\np0=tp\/(tp+fp)\nr0=tp\/(tp+fn)\nprint(p0)\nprint(r0)\nprint(2*p0*r0\/(p0+r0))","ca4bb5c1":"predictions1 = model.predict(X_test[1].reshape(1,512,512,1))","be97b640":"predictions1=predictions1.reshape(512,512)","ac05a485":"for i in range(0,512):\n    for j in range (0,512):\n        if predictions1[i][j]>0.084:\n            predictions1[i][j]=1\n        else:\n            predictions1[i][j]=0","00dd1625":"tn, fp, fn, tp=confusion_matrix(predictions1.flatten(),y_test[0].flatten()).ravel()\np1=tp\/(tp+fp)\nr1=tp\/(tp+fn)\nprint(p1)\nprint(r1)\nprint(2*p1*r1\/(p1+r1))","191b45df":"# mean\n\np_mean=(p0+p1)\/2\nprint(p_mean)\nr_mean=(r0+r1)\/2\nprint(r_mean)\nf1_mean=2*p_mean*r_mean\/(p_mean+r_mean)\nprint(f1_mean)","c14025c3":"#### There are only two test images, we just need to calculate their average precision, recall & f1.","9dec094a":"# Importing The libraries","c6e51a6f":"# Training the model.","c0782b21":"# MODEL:","88f54f81":"### MODEL ARCH:\n\n<img src=\"https:\/\/www.researchgate.net\/profile\/Artem_Sevastopolsky\/publication\/324859814\/figure\/fig1\/AS:621316675731456@1525144847236\/Res-U-Net-architecture-a-basic-block-of-the-Stack-U-Net-model-Another-possible-basic.png\" width=\"650\" height=\"350\">","3864d4cf":"# Prediction:","94eb3631":"Plotting history:"}}