{"cell_type":{"47974169":"code","40343545":"code","7772197e":"code","e5e75565":"code","f5d910bf":"code","a21e78ee":"code","557779a3":"code","cd48a27d":"code","691dba7b":"code","256fe5a5":"markdown","2bc73d36":"markdown","bed66d66":"markdown","84231659":"markdown","87274373":"markdown","172ffd72":"markdown"},"source":{"47974169":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","40343545":"train = pd.read_csv('..\/input\/train.csv', index_col='plaintext_id')\ntest = pd.read_csv('..\/input\/test.csv', index_col='ciphertext_id')\nsub = pd.read_csv('..\/input\/sample_submission.csv', index_col='ciphertext_id')","7772197e":"train['length'] = train.text.apply(len)\ntest['length'] = test.ciphertext.apply(len)","e5e75565":"train[train['length']<=100]['length'].hist(bins=99)","f5d910bf":"train.head()","a21e78ee":"test.head(10)","557779a3":"KEYLEN = 4 # len('pyle')\ndef decrypt_level_1(ctext):\n    key = [ord(c) - ord('a') for c in 'pyle']\n    key_index = 0\n    plain = ''\n    for c in ctext:\n        cpos = 'abcdefghijklmnopqrstuvwxy'.find(c)\n        if cpos != -1:\n            p = (cpos - key[key_index]) % 25\n            pc = 'abcdefghijklmnopqrstuvwxy'[p]\n            key_index = (key_index + 1) % KEYLEN\n        else:\n            cpos = 'ABCDEFGHIJKLMNOPQRSTUVWXY'.find(c)\n            if cpos != -1:\n                p = (cpos - key[key_index]) % 25\n                pc = 'ABCDEFGHIJKLMNOPQRSTUVWXY'[p]\n                key_index = (key_index + 1) % KEYLEN\n            else:\n                pc = c\n        plain += pc\n    return plain\n\ndef encrypt_level_1(ptext, key_index=0):\n    key = [ord(c) - ord('a') for c in 'pyle']\n    ctext = ''\n    for c in ptext:\n        pos = 'abcdefghijklmnopqrstuvwxy'.find(c)\n        if pos != -1:\n            p = (pos + key[key_index]) % 25\n            cc = 'abcdefghijklmnopqrstuvwxy'[p]\n            key_index = (key_index + 1) % KEYLEN\n        else:\n            pos = 'ABCDEFGHIJKLMNOPQRSTUVWXY'.find(c)\n            if pos != -1:\n                p = (pos + key[key_index]) % 25\n                cc = 'ABCDEFGHIJKLMNOPQRSTUVWXY'[p]\n                key_index = (key_index + 1) % KEYLEN\n            else:\n                cc = c\n        ctext += cc\n    return ctext\n\ndef test_decrypt_level_1():\n    c_id = 'ID_4a6fc1ea9'\n    ciphertext = test.loc[c_id]['ciphertext']\n    print('Ciphertxt:', ciphertext)\n    decrypted = decrypt_level_1(ciphertext)\n    print('Decrypted:', decrypted)\n    encrypted = encrypt_level_1(decrypted)\n    print('Encrypted:', encrypted)\n    print(\"Encrypted == Ciphertext:\", encrypted == ciphertext)\n\ntest_decrypt_level_1()    ","cd48a27d":"plain_dict = {}\nfor p_id, row in train.iterrows():\n    text = row['text']\n    plain_dict[text] = p_id\nprint(len(plain_dict))","691dba7b":"matched, unmatched = 0, 0\nfor c_id, row in test[test['difficulty']==1].iterrows():\n    decrypted = decrypt_level_1(row['ciphertext'])\n    found = False\n    for pad in range(100):\n        start = pad \/\/ 2\n        end = len(decrypted) - (pad + 1) \/\/ 2\n        plain_pie = decrypted[start:end]\n        if plain_pie in plain_dict:\n            p_id = plain_dict[plain_pie]\n            row = train.loc[p_id]\n            sub.loc[c_id] = train.loc[p_id]['index']\n            matched += 1\n            found = True\n            break\n    if not found:\n        unmatched += 1\n        print(decrypted)\n            \nprint(f\"Matched {matched}   Unmatched {unmatched}\")\nsub.to_csv('submit-level-1.csv')","256fe5a5":"# Introduction\n\n### Time to share solution of cipher level 1 so you can look at the next level.\nIn the previous Cipher Challenge II one of the levels was a cipher with multiple substitutions generated from a key of length 8 if I remember correct.\nThe level 1 of this Cipher Challenge III is the same kind but with a key of length 4, so only 4 substitutions are used for each character mapping.\n\n## The cipher\n- The cipher only apllies to UPPERCASE and LOWERCASE letters.\n- The key only shifts every time an UPPERCASE or LOWERCASE letter is met.\n\n## Padding\nFrom Cipher Challenge II it was found that padding could be done both up front and in the end. Number of padding characters in the end was always equal to or at most 1 character more (if number of characters to pad with was odd) than the number of padding characters up front.\n\n# Level 1 solution","2bc73d36":"Make a dictionary for fast lookup of plaintext","bed66d66":"## Functions to decrypt and encrypt from\/to level 1","84231659":"## Update sub with level 1 decrypted matching texts","87274373":"* If you find this useful - let me know by giving it a like ;-)","172ffd72":"## Read the train, test and sub files"}}