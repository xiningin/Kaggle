{"cell_type":{"0c6ce99a":"code","8a051641":"code","04034dcf":"code","c770c479":"code","c685e6ca":"code","f8015251":"code","8789eea6":"code","7d8407e0":"code","1e80729d":"code","06ae8fbb":"code","be9083b5":"code","577d2e54":"code","1b721a0d":"code","b4f27c7c":"code","b154d3d7":"code","f39ca997":"code","6c648983":"code","e77fb1c6":"code","184c073e":"code","4fe41b0e":"code","7c86fc12":"code","a1610493":"code","10655ed1":"code","9cfba803":"code","a9635016":"code","330ffa43":"code","db24c950":"code","47673440":"code","8b1ab1af":"code","95241ccd":"code","3b069f18":"code","ece796dc":"code","41193820":"code","08051cdc":"code","eb4db5ab":"code","dafca12e":"code","766a8866":"code","e3e3017b":"code","ceb130fe":"code","42c6457e":"code","4e410d81":"code","6af5eaf8":"code","d85a4c6e":"code","51a2b7a9":"code","e10874d5":"code","b8d52284":"code","763947b1":"code","71377185":"code","bbac5a5b":"code","c92a991a":"code","7c2327b5":"markdown","cfe6005a":"markdown","71c03faf":"markdown","bc94eb7d":"markdown"},"source":{"0c6ce99a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn import preprocessing","8a051641":"googleappdata = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","04034dcf":"## Check the dimension of the dataset\nprint(\"Dimesion of the dataset:\", googleappdata.shape)\nprint(\"No of rows:\", googleappdata.shape[0])\nprint(\"No of cols:\", googleappdata.shape[1])","c770c479":"## Check the features\nprint(\"Features of the dataset:\\n\",googleappdata.columns)","c685e6ca":"## Check the datatype and information of the data\ngoogleappdata.info()","f8015251":"## Preview the dataset\ngoogleappdata.head()","8789eea6":"#appdata.iloc[5]","7d8407e0":"## Check if there are any missing values\ngoogleappdata.isna().sum()","1e80729d":"## lets drop the rows containing missing values in content rating, current version, android version, type cols\ngoogleappdata.dropna(axis=0,inplace=True,subset=['Android Ver','Current Ver','Type','Content Rating'])","06ae8fbb":"## Check if there are any other missing values\ngoogleappdata.isna().sum()","be9083b5":"## Check rows having missing values in Rating\ngoogleappdata[googleappdata['Rating'].isna()].head()","577d2e54":"## Statistics of Rating cols\ngoogleappdata.Rating.describe()\n## \"We can impute with mean value 4.19\"","1b721a0d":"## Missing value imputation of Rating coloumn\nmean_r = round(googleappdata.Rating.mean(),2)\ngoogleappdata['Rating']=googleappdata['Rating'].fillna(mean_r)\nprint(\"Checking if there are any missing values:\\n\",googleappdata.Rating.isna().sum())","b4f27c7c":"## Lets make a copy for all cleaning and transformation\ndf_appdata = googleappdata","b154d3d7":"## Univariate Analysis\n## Lets look at CATEGORY column\nprint(\"No of unique categories:\",df_appdata.Category.nunique())\nprint(\"List of unique categories:\\n\",df_appdata.Category.unique())","f39ca997":"## Frequency distribution of Category\nfq=df_appdata.Category.value_counts()\nptg=round(((df_appdata.Category.value_counts())\/df_appdata.shape[0])*100,2)\nfqtble = pd.DataFrame({'Frequency':fq,'Percentage':ptg})\nfqtble","6c648983":"## Plotting the Category frequency\nplt.figure(figsize=(10,8))\nax=sns.barplot(x=fqtble.index,y=fqtble.Frequency,data=fqtble)\nplt.title(\"Frequency\/Count plot for Category column\")\nplt.xticks(rotation=80)\nplt.show()","e77fb1c6":"## Alternate way of Plotting the Category frequency\nplt.figure(figsize=(10,8))\nax=sns.countplot(y='Category',data=df_appdata)\nplt.title(\"Frequency\/Count plot for Category column\")\nplt.xticks(rotation=80)\nplt.show()","184c073e":"## One hot encoding for category variable\ndf_appdata1=df_appdata\noh = pd.get_dummies(df_appdata1['Category'],prefix='CTG')\noh=oh.drop('CTG_BEAUTY',axis = 1)\ndf_appdata1=pd.concat([df_appdata1,oh],axis=1)\ndf_appdata1.head()","4fe41b0e":"## lets look at Rating coloumn\ndf_appdata1.Rating.describe()\n## we can see max and min rating, and 75% of data have values <=4.5","7c86fc12":"## Lets plot distribution plot of Rating col\nplt.figure(figsize=(8,6))\nsns.distplot(df_appdata1.Rating)\nplt.title(\"Distribution plot of Rating\")\nplt.show()","a1610493":"## lets look at Review column\nprint(\"Datatype of Reviews:\",df_appdata1.Reviews.dtype)\n## Lets convert object to float\/int \ndf_appdata1['Reviews']=df_appdata1['Reviews'].astype('int64')\nprint(\"Datatype pf Reviews after conversion:\",df_appdata1.Reviews.dtype)\nprint(\"Description of Review coloum:\\n\",df_appdata1.Reviews.describe())","10655ed1":"### lets look at Size column now\n### We need to remove 'M' and 'k'and convert them to numeric values.\ndef SizePreprocess(size):\n    lists = []\n    for item in size:\n        if item[-1]=='M':\n            item=float(item[:-1])\n            lists.append(item)\n        elif item[-1]=='k':\n            item=item[:-1]\n            item=float(item)\/1000\n            lists.append(item)\n        else:\n            lists.append(21.5)  ## imputing the mean of ratings\n    return lists","9cfba803":"df_appdata2=df_appdata1","a9635016":"float(df_appdata2.Size[1][:-1])*1000","330ffa43":"### Preprocessing the size column\nd=pd.DataFrame(df_appdata2['Size'])\ndf_appdata2['Newsize']=d.apply(SizePreprocess)\ndf_appdata2.head()","db24c950":"x = df_appdata2[df_appdata2['Newsize']!=0]['Newsize']\nx.mean()","47673440":"## Size stats\ndf_appdata2.Newsize.describe()\n## minimum size=0 and max=100, average size of any app is 18Mb","8b1ab1af":"## distribution plot of Size\nplt.figure(figsize=(8,6))\nsns.distplot(df_appdata2.Newsize)\nplt.title(\"Distribution plot of Size\")\nplt.show()","95241ccd":"df_appdata2['Size'].value_counts() ##Since Varies with device is 1694, we might have to impute mean size","3b069f18":"## distribution plot of Size\nplt.figure(figsize=(8,6))\nsns.distplot(df_appdata2.Newsize)\nplt.title(\"Distribution plot of Size\")\nplt.show()","ece796dc":"## Lets deal with Installs col now\ndf_appdata3=df_appdata2\nprint(\"Number of unique values in Installs:\",df_appdata3['Installs'].nunique())\nprint(\"Values in Installs:\",df_appdata3['Installs'].unique())","41193820":"## Bar graph to look at Installs\nplt.figure(figsize=(8,6))\nsns.barplot(x=df_appdata3['Installs'].unique(),y=df_appdata3['Installs'].value_counts())\nplt.title(\"Installs Plot\")\nplt.xticks(rotation =60)\nplt.show()","08051cdc":"df_appdata3.columns","eb4db5ab":"### Lets look at Type coloumn\nprint(\"Types of apps are:\",df_appdata3['Type'].unique())\ndf= pd.DataFrame({'Type':df_appdata3['Type'].unique(), 'Count':df_appdata3['Type'].value_counts()})\nprint(\"Freq table for type\\n\",df)\nplt.figure(figsize=(6,4))\nsns.barplot(x=df['Type'],y=df['Count'])\nplt.title(\"How many are Free\/Paid??\")\nplt.show()\n## Most of the apps are free","dafca12e":"### Label encoding Type Coloumn\ndf_appdata4 = df_appdata3\nlabelencoder = preprocessing.LabelEncoder()\ndf_appdata4['TypeEN']= labelencoder.fit_transform(df_appdata4['Type'])\nprint(\"Label encoded types are\\n:\",df_appdata4['TypeEN'].unique())","766a8866":"## Lets look at the Price coloumn\n## As most of the apps are free, the Price of the app will be 0(10032 values are 0 which matches with free type count)\ndf=pd.DataFrame({'Price':df_appdata3['Price'].unique(),'Count': df_appdata3['Price'].value_counts()})\ndf.head()","e3e3017b":"## Clean the Price column. Remove the dollar sign from the price and convert the type tp float\ndf_appdata5=df_appdata4\ndf_appdata5['NewPrice']=df_appdata4['Price'].str.replace('$','') \nprint(\"New values of Price are\\n:\",df_appdata5['NewPrice'].unique())\nprint(\"Datatype of Price before conversion:\",df_appdata5['NewPrice'].dtype)\ndf_appdata5['NewPrice'] = df_appdata5['NewPrice'].astype('float')\nprint(\"Datatype of Price after conversion:\",df_appdata5['NewPrice'].dtype)","ceb130fe":"##Lets look at content rating\ndf_appdata6 = df_appdata5\nprint(\"Categories of Content Rating are:\", df_appdata6['Content Rating'].unique())\nCRdummies = pd.get_dummies(df_appdata6['Content Rating'],prefix='CR')\nCRdummies= CRdummies.drop('CR_Unrated',axis=1)\ndf_appdata6= pd.concat([df_appdata6,CRdummies],axis=1)\ndf_appdata6.head()","42c6457e":"df_appdata6.columns","4e410d81":"### Looking at Genres coloumn now\nprint(\"How many categories are in the Genres col:\",df_appdata6.Genres.nunique())\n## lets look at some popular Genres\nplt.figure(figsize=(25,15))\nsns.barplot(x=df_appdata6['Genres'].unique(),y=df_appdata3['Genres'].value_counts())\nplt.title(\"Genres Plot\")\nplt.xticks(rotation =90)\nplt.show()","6af5eaf8":"## Which are the Top 20 Genres \ngendf=pd.DataFrame({'Genres':df_appdata6['Genres'].unique(),'Count': df_appdata6['Genres'].value_counts()})\ngendf.head()\n## Alternate way of Plotting the Category frequency\nplt.figure(figsize=(8,6))\nax=sns.barplot(x='Genres',y='Count',data=gendf[0:19])\nplt.title(\"Which are Top 20 Genres ?? \")\nplt.xticks(rotation=80)\nplt.show()","d85a4c6e":"## Last Updated data\ndf_appdata7 = df_appdata6\nprint(\"Type of this coloumn is :\",df_appdata7['Last Updated'].dtype)\n## lets convert it into date format\ndf_appdata7['New Last Updated'] = pd.to_datetime(df_appdata7['Last Updated'])\nprint(\"Type after conversion is:\", df_appdata7['New Last Updated'].dtype)\ndf_appdata7['New Last Updated'].head()","51a2b7a9":"## latest updated app\ndf_appdata7[df_appdata7['New Last Updated'] == df_appdata7['New Last Updated'].max()]","e10874d5":"print(df_appdata7['Current Ver'].nunique())\nprint(df_appdata7['Current Ver'].max())","b8d52284":"print(df_appdata7['Android Ver'].nunique())\nprint(df_appdata7['Android Ver'].max())","763947b1":"### lets look at Installs column now\n### We need to remove '+' from the string\ndef InstallsPrep(Installs):\n    lists = []\n    for item in Installs:\n        if item[-1]=='+':\n            item=float(item[:-1].replace(',',''))\n            lists.append(item)\n        else:\n            lists.append(item)  ## imputing the mean of ratings\n    return lists","71377185":"### Preprocessing the Installs column\ni=pd.DataFrame(df_appdata7['Installs'])\ndf_appdata7['NewInstalls']=i.apply(InstallsPrep)\ndf_appdata7.head()","bbac5a5b":"### lets check the correlation \ng = sns.pairplot(df_appdata7,vars=[\"Rating\",\"Newsize\",\"NewPrice\",\"Reviews\",\"NewInstalls\"],hue = \"Type\")\nplt.title(\"Pair Plot of Google App Data\")\n### Price, Size and Installs are highly right skewwed","c92a991a":"## lets check the correlation of all the variables in the final dataset\nfig,ax = plt.subplots(figsize=(6,6))\nax = sns.heatmap(df_appdata7[[\"Rating\",\"Newsize\",\"NewPrice\",\"Reviews\",\"NewInstalls\"]].corr(),annot=True,linewidths=.5,fmt='.2f')\nax.set_ylim(sorted(ax.get_xlim(), reverse=True))\nplt.show()\n### Reviews and Installs are correlated\n### Size and Reviews are correlated","7c2327b5":"Step 2: Clean the Dataset","cfe6005a":"Import Required Libraries","71c03faf":"Step 1: Describe the Dataset","bc94eb7d":"Read the Dataset"}}