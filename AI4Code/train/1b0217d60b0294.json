{"cell_type":{"5e1f7b09":"code","8e5388c4":"code","0a49dbf4":"code","c3774365":"code","e00ef8ce":"code","3aad5322":"code","e09d9310":"code","c6eafed3":"code","1ece790a":"code","468e7abb":"code","3992109b":"code","d50b0363":"code","51f23c9f":"code","81db8bd2":"code","e00fed62":"code","bb50bb2d":"code","383a5d88":"code","2797fe7d":"code","b86efb05":"code","bb6e0118":"code","86f7408a":"code","3d088d66":"code","4b944267":"code","bb763b63":"code","be5da530":"code","148ae1cf":"code","8466c36f":"code","405cf7d8":"markdown","fd55df9b":"markdown","71afdb87":"markdown","d6b5a3d3":"markdown","36997f90":"markdown","02b9ea31":"markdown","0fca31fa":"markdown","b3d2e82a":"markdown","57351940":"markdown","6839cd47":"markdown","7c6f18d0":"markdown","0d78eb32":"markdown","60b3c69f":"markdown","4a8ec231":"markdown","65da31ea":"markdown","1b9d2a39":"markdown","85f99aca":"markdown","da5ca937":"markdown"},"source":{"5e1f7b09":"import pandas as pd\nimport seaborn as sns\nimport numpy as np","8e5388c4":"#read the data\n\ndf = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv\")\ndf","0a49dbf4":"df = df[df[\"Season\"]==\"Summer\"]","c3774365":"#read the region data\nnoc = pd.read_csv(\"\/kaggle\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv\")\nnoc","e00ef8ce":"#merge the two \nolymp_df = df.merge(noc,left_on=\"NOC\",right_on=\"NOC\")\nolymp_df","3aad5322":"#select categories we want \nolymp_df = olymp_df[[\"region\",\"Age\",\"Height\",\"Weight\",\"Year\",\"Sport\",\"Medal\"]]\nolymp_df","e09d9310":"#fix the medal column - using get dummies you can do this easily.\n\nolymp_df = pd.concat([olymp_df,pd.get_dummies(olymp_df[\"Medal\"])],axis=1)\n\nolymp_df[\"Total\"] = olymp_df[\"Bronze\"] + olymp_df[\"Gold\"] + olymp_df[\"Silver\"]\n\nolymp_df.drop(\"Medal\",axis=1, inplace=True)\n\nolymp_df","c6eafed3":"#convert year to a date \nolymp_df[\"Year\"] = pd.to_datetime(olymp_df[\"Year\"],format=\"%Y\")\nolymp_df","1ece790a":"!pip install progplot","468e7abb":"#import barwriter\nfrom progplot import BarWriter","3992109b":"#create the barwriter object\nbw = BarWriter()","d50b0363":"help(bw.set_data)","51f23c9f":"olymp_df","81db8bd2":"bw.set_data(data=olymp_df, category_col=\"region\", timeseries_col=\"Year\", value_col=\"Total\", groupby_agg=\"sum\", resample_agg=\"sum\", output_agg=\"cumsum\", resample = \"4y\")","e00fed62":"help(bw.set_display_settings)","bb50bb2d":"bw.set_display_settings(time_in_seconds=30, video_file_name = \"total_medals_by_country.mp4\")","383a5d88":"help(bw.set_chart_options)","2797fe7d":"bw.set_chart_options(x_tick_format=\"{:,.0f}\",\n                     palette=\"Pastel1\", \n                     title=\"Top 10 Countries by Total Medals from <mindatetime> to <currentdatetime>\",dateformat=\"%Y\", \n                     y_label=\"State\", \n                     use_top_x=20, display_top_x=10,\n                     border_size=2, border_colour=(0.3,0.3,0.3),\n                     font_scale=1.3,\n                     use_data_labels=\"end\")\nbw.test_chart(30)","b86efb05":"bw.set_chart_options(x_tick_format=\"{:,.0f}\",\n                     palette=\"Pastel1\", \n                     title=\"Top 5 Countries by Total Medals from <mindatetime> to <currentdatetime>\",dateformat=\"%Y\", \n                     y_label=\"State\", \n                     use_top_x=20, display_top_x=5,\n                     border_size=2, border_colour=(0.3,0.3,0.3),\n                     font_scale=1.3,\n                     use_data_labels=\"end\",\n                     squeeze_lower_x=\"1000\") # <----------- HERE either enter the percentace lower than the minimum data value you want the x value to be. OR the absolute value i.e 1000.\nbw.test_chart(14)","bb6e0118":"bw.set_chart_options(x_tick_format=\"{:,.0f}\",\n                     palette=\"bone\", # <------- change palette \n                     title=\"Top 5 Countries by Total Medals from <mindatetime> to <currentdatetime>\",dateformat=\"%Y\", \n                     y_label=\"State\", \n                     use_top_x=20, display_top_x=5,\n                     border_size=2, border_colour=(0.3,0.3,0.3),\n                     font_scale=1.3,\n                     use_data_labels=\"end\",\n                     sort=False) # <------- set to stop the categories re-arranging.\nbw.test_chart(14)","86f7408a":"bw.write_video()\nbw.show_video()","3d088d66":"bw.create_gif()\nbw.show_gif()","4b944267":"olymp_df = olymp_df.dropna()\nolymp_df","bb763b63":"#set the data - mean groupby \/ mean resample \/ rolling output agg to smooth the results.\nbw.set_data(data=olymp_df, category_col=\"region\", timeseries_col=\"Year\", value_col=\"Age\", groupby_agg=\"mean\", resample_agg=\"mean\", output_agg=\"4rolling\", resample = \"4y\")\n\n#similar display as normal\nbw.set_display_settings(time_in_seconds=45, video_file_name = \"mean_age_by_country.mp4\")\n","be5da530":"bw.set_chart_options(x_tick_format=\"{:,.2f}\",\n                     palette=\"Pastel1\",\n                     title=\"Top 10 Rolling Mean Age <rollingdatetime> to <currentdatetime>\",dateformat=\"%Y\",\n                     y_label=\"State\",\n                     use_top_x=10, display_top_x=10,\n                     border_size=2, border_colour=(0.3,0.3,0.3),\n                     font_scale=1.3,\n                     use_data_labels=\"end\")\nbw.test_chart(20)\n","148ae1cf":"bw.set_chart_options(x_tick_format=\"{:,.2f}\",\n                     palette=\"Pastel1\",\n                     title=\"Top 10 Rolling Mean Age <rollingdatetime> to <currentdatetime>\",dateformat=\"%Y\",\n                     y_label=\"State\",\n                     use_top_x=10, display_top_x=10,\n                     border_size=2, border_colour=(0.3,0.3,0.3),\n                     font_scale=1.3,\n                     use_data_labels=\"end\",\n                     squeeze_lower_x=\"16\")  # <------------\n\nbw.test_chart(20)","8466c36f":"bw.write_video()\nbw.show_video()","405cf7d8":"## You can also increase the lowerbound x ticks if you want","fd55df9b":"## This time I have am going to use the setting \"squeeze_lower_x\" which fixes the lower bound x tick labels to a pre-defined value.\n\n## This stops the axis staying at 0 and makes for better viewing.","71afdb87":"## With \"squeeze_lower_x\" set ","d6b5a3d3":"We are going to view the total medals over time ","36997f90":"## I think total summer season medals should provide a appealing animation","02b9ea31":"## Few bits would suggest using.\n\n* set the format of the ticks\n\n* TITLE IS IMPORTANT\n\n* TITLE DATE FORMAT \n\n* use_top_x and display_top_x","0fca31fa":"# Chart options \n\n-----------------------------------\n\n## The most important step to get right. \n\n### There are a lot of options here so I suggest you have a play about with what you might like.\n\n### Default options work fine, but for a more customized approach try limiting the values adding a title and formatting text.\n\n### The docstring should explain as well as possible the options but please go to the end of this kernel for more examples. ","b3d2e82a":"# Video Settings (display settings)\n-----------------------------------------\n\n## Next we need to define the output settings of the video file to be created\n\n1) (fps) The fps can be left default but you're free to change this.\n\n2) (time_in_seconds) This is the length you want your file to be once rendered.  If in the case of there being MORE fps \/ seconds than there is UNIQUE DATES, BarWriter auto smothes the transition between dates so playback is not juddery.\n\n3) (video_file_name) This can be x.mp4 for MP4V codec. \n\n4) (fourcccodecname) It is possible to change the fourcc codec if you are having video generation issues. NOT ADVISED AS WORKING ON KAGGLE \/ COLAB \/ MY LOCAL MACHINE FINE","57351940":"## Write the video","6839cd47":"## Download, Import an Initialize BarWriter","7c6f18d0":"# Prepare the data.\n\n## Lets first get the data into a usable format","0d78eb32":"## Without \"squeeze_lower_x\" set ","60b3c69f":"## Its interesting to see the pauses in the video - it appears that its at the time when the world wars took place. ","4a8ec231":"# Writing Video\n\n## This is the easy part! ","65da31ea":"# **progplot & BarWriter**\n\n### Timeseries animations can be made using a mix of matplotlib and opencv to produce interesting and memorable visual representations of data. \n\n> ### I've been working on a package that can help with this. Originally just for my own use, but think some one else might benefit from it.\n> ### Just made in my own time, so you might have some issues, who knows? If you do, let me know on github.\n\n","1b9d2a39":"# GIF Generation\n\n## Another piece of cake","85f99aca":"# Set Data\n-------------------------------\n\n## BarWriter has 3 stages to data input.\n\n1. The data is groupped by the set timeseries column by either sum, mean or count. (optional if you have already done this step in your dataframe).\n\n> This is because as in this data there are multiple athletes under each country\/region that we need to aggregate\n\n2. The data is resampled to ensure no values dropout while running the animation by either sum, mean or count (optional if you have already done this step in your dataframe).\n\n> We are going to resample every 4 years - although the data is already in this format. This is becuase if there are any gaps the system will fill in any missing datetimes.\n\n3. The data is aggregatted using cumsum or rolling mean (optional if you have already done this step in your dataframe).\n\n> We are going to use cumsum.\n\n## BarWriter has 2 stages prior video rendering.\n\n1. Set the chart output details (and check visually)\n2. Set the video output details\n","da5ca937":"## Lets now have a look at the mean age. The data is a bit funky so for display purposes I am going to remove any NANs"}}