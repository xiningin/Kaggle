{"cell_type":{"1e29f8a8":"code","9025f985":"code","703d08af":"code","802506ff":"code","ffc9926b":"code","3e1f3516":"code","4818b7c6":"code","f7c8b513":"code","7755b30a":"code","f5454577":"code","baf6d33d":"code","91d0bbe5":"code","d0f3f003":"code","791ed976":"code","98f8957f":"code","a54a864c":"code","d20602c9":"code","5bf9845e":"code","113b16ed":"code","5cd438d3":"code","f88b1de4":"code","02c1f124":"code","bf66d3a6":"code","7a54a0d0":"code","cc358909":"code","06891f2f":"code","479b024c":"code","0e1880c4":"code","a034ee46":"code","580b52ec":"code","d1d8a11c":"code","ef5d5cbf":"markdown","29164486":"markdown","83f40f83":"markdown","ba83f013":"markdown","5a46bdfc":"markdown","7c6fd92d":"markdown","cbfc8311":"markdown","6f036eae":"markdown","550e8f9c":"markdown","35e36746":"markdown","86364be9":"markdown","8ccd29c8":"markdown","864d786b":"markdown","9e99ebed":"markdown","d50a2cd5":"markdown","fac345f1":"markdown","caacf094":"markdown","da9e8b86":"markdown","a637b701":"markdown","d90a241f":"markdown","888fe722":"markdown","82f13899":"markdown","2baa1149":"markdown","25083306":"markdown","209de149":"markdown","262d2a40":"markdown","48ed23eb":"markdown","136fcb16":"markdown","5475910c":"markdown","6d02f25d":"markdown","cb8e9da2":"markdown","e4629612":"markdown","c8f54bfc":"markdown","9a2c9b03":"markdown","d1817c72":"markdown"},"source":{"1e29f8a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#viz\nimport matplotlib.pyplot as plt \nimport seaborn as sns \n\n#Statistics Module \nfrom scipy.stats import chi2\nfrom scipy.stats import chi2_contingency\nfrom scipy.stats import anderson, shapiro\nimport statsmodels.api as sm \nfrom statsmodels.formula.api import ols\nfrom scipy import stats\nimport pylab\nfrom collections import Counter\n\nimport os\ndir=[]\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        dir.append(os.path.join(dirname, filename))\n\n\n\n%matplotlib inline","9025f985":"#548k row x 22 column dataset\ndf_red=pd.read_csv(dir[0])\n\n#1.72m row x 26 column dataset\ndf=pd.read_csv(dir[1])","703d08af":"#df = all data\n#df = dataset\n\n#dataset = data after drop\n#dataset = df","802506ff":"#preview dataset \ndef preview_df(df, options = None):\n    '''\n    Preview dataset is one of exploratory data analysis part, which is \n    we will know what the dataset is. \n\n    Paramaters :\n    ------------\n    df      :   object, DataFrame\n            Dataset that will be used  \n    option  :   Optional(default = 'top record data')\n            1. top_record data  : Showing top record data(default = 10)\n            2. shape_data       : showing how many rows and column of dataset\n            3. info_data        : showing how many columns that includes missing value\n                                  and knowing what the data type is of each column. \n    '''\n    #default option is Top record \n    if options == None :\n        options = 'top_record'\n    \n    if options == 'top_record':\n        print('=>> Top 10 Record Data : ','\\n')\n        df = df.head(10)\n        return df \n\n    if options == 'shape_data':\n        print('=>> Data shape : ','\\n')\n        df = df.shape\n        return df\n\n    if options == 'info_data':\n        print('=>> Data Info : ','\\n')\n        df = df.info()\n        return df\n        \n    if options == 'isnull':\n        print('=>> Data Info : ','\\n')\n        df = df.isnull().sum()\n        return df\n    \n    if options == 'duplrows':\n        duplicate_rows_df = df[df.duplicated()]\n        return print('number of duplicate rows: ', duplicate_rows_df.shape)\n        \ndef Describe(df,col=None):\n    '''\n    Documentation :\n    --------------\n    * df  : Dataframe Name\n    * col : Columns Name    \n    '''\n    if col is None :\n        describe = df.describe()\n    else:\n        describe = df[col].describe()\n        \n    return describe\n\n    ","ffc9926b":"preview_df(df)","3e1f3516":"preview_df(df, 'info_data')","4818b7c6":"Describe(df)","f7c8b513":"preview_df(df, 'duplrows')","7755b30a":"# Make a list for both of the data type \n\n\ndef check_dtypes_1(df):\n    '''\n    Parameters :\n    ------------\n    df : Dataframe name \n\n    Step :\n    ------\n    > 1. Do iteration for each feature to define which one categorical and nummerical feature. \n    > 2. Columns in dataframe will be seperated based on the dtypes\n    > 3. All of the column will be entered to the list that have been created\n\n    result :\n    --------\n    The result will be formed as dataframe\n    '''\n    \n    categorical_list = []\n    numerical_list = []\n    \n    #Looping \n    for col in df.columns.tolist():\n        if df[col].dtype=='object':\n            categorical_list.append(col)\n        else:\n            numerical_list.append(col)\n    \n    #make dataframe that have two feature, that is categorical and numerical feature\n    categorical = pd.Series(categorical_list, name='Categorical Feature')\n    numerical = pd.Series(numerical_list, name='Numerical Feature')\n    df_dtypes = pd.concat([categorical,numerical], axis=1)\n    \n    return df_dtypes","f5454577":"check_dtypes_1(df)","baf6d33d":"def unique_columns(df):\n    '''\n    Parameter \n    ---------\n    df : array\n        the data frame that will be checked the unique the entities \n    '''\n    for col in df.columns:\n        if df[col].dtypes == 'object':\n            unique_cat = len(df[col].unique())\n            print(\"Feature '{col}' has {unique_cat} unique categories\".format(col=col, unique_cat=unique_cat))","91d0bbe5":"unique_columns(df)","d0f3f003":"def missing_value(df):\n    '''\n    Documentation :\n    --------------\n    * df : Dataframe Name\n    '''\n    #count the number of missing value \n    total = df.isnull().sum().sort_values(ascending = False)\n    percent = round(df.isnull().sum()\/len(df)*100,2).sort_values(ascending = False)\n    missing  = pd.concat([total, percent], axis=1, keys=['Total_Missing', 'Percent(%)'])\n    \n    return missing","791ed976":"missing_value(df)","98f8957f":"def Drop_Missing_value(df, threshold = None):\n    '''\n    Parameters :\n    ------------\n    df              :  Object, Dataframe\n                    the dataframe which want to dropped     \n    threshold       :   float, default (0.75)\n                    the number of threshold was determined by user \n    '''\n    #default number of threshold \n    if threshold == None : \n        threshold = 0.75\n\n    # Define variable that we need \n    threshold = threshold\n    size_df   = df.shape[0]\n\n    # Define Column list that will we removed\n    dropcol   = []\n\n    #looping to take the number of null of every feature \n    for col in df.columns :\n        if (df[col].isnull().sum()\/size_df >= threshold):\n            dropcol.append(col)\n    print('Columns that have been removed : ')\n    print ('_'*29)\n    \n    # Make df using pd.concat\n    drop_col = pd.Series(dropcol, name='Features')\n    drop_col = pd.concat([drop_col], axis = 1)\n    \n    print(drop_col)\n    \n    df = df.drop(dropcol, axis =1)\n\n    return df","a54a864c":"dataset = Drop_Missing_value(df, threshold = 0.60)","d20602c9":"categorical_list = []\nnumerical_list = []\n\ndef list_dtypes(df):\n    for col in df.columns.tolist():\n        if df[col].dtype=='object':\n            categorical_list.append(col)\n        else:\n            numerical_list.append(col)\n    print('Number of categorical features:', str(len(categorical_list)))\n    print('Number of numerical features:', str(len(numerical_list)))\n\n    return categorical_list, numerical_list","5bf9845e":"list_dtypes(dataset)","113b16ed":"def fill_missing(df, feature_list = None , vartype = None ):\n    '''\n    Documentation :\n    ---------------\n    df              : object, dataframe\n    feature_list    : feature list is the set of numerical or categorical features \n                      that have been seperated before\n    vartype         : variable type : continuos or categorical, default (numerical)\n                        (0) numerical   : variable type continuos\/numerical\n                        (1) categorical : variable type categorical\n    Note :\n    ------\n    > if numerical variable will be filled by median \n    > if categorical variabe will filled by modus\n    > if have been made variebles based on the dtypes list before, \n      insert it into feature list in the function.     \n\n    Example :\n    ---------\n    # 1. Define feature that will be filled in \n      num_feature = numeric_list\n      \n    # 2. Input Dataframe\n      dataframe = df\n      \n    # 3. Vartype\n      var_type = 0\n      \n    # 4. Filling Value\n      Fill_missing(dataframe, num_feature, var_type)\n    '''\n    #default vartype \n    if vartype == None :\n        vartype = 'numerical'\n\n    # filling numerical data with median \n    if vartype == 'numerical' :\n        for col in feature_list:\n            df[col] = df[col].fillna(df[col].median())\n    \n    # filling categorical data with modus  \n    if vartype == 'categorical' :\n        for col in feature_list:\n            df[col] = df[col].fillna(df[col].mode().iloc[0])","5cd438d3":"# 1. define feature that will be filled in \nnum_feature = numerical_list\ncat_feature = categorical_list\n\n# 2. Vartype\nnum_type = 'numerical'\ncat_type = 'categorical'\n\n# 3. Filling Value\nfill_missing(df, num_feature, num_type)\nfill_missing(df, cat_feature, cat_type)","f88b1de4":"#Univariat Analisys\ndef Univariate_plot(df, column, vartype, hue = None ):\n    '''\n    Documentation :\n    Univariate function will plot the graphs based on the parameters.\n    * df      : dataframe name\n    * column  : Column name\n    * vartype : variable type : continuos or categorical\n                (0) Continuos\/Numerical   : Distribution, Violin & Boxplot will be plotted.\n                (1) Categorical           : Countplot will be plotted.\n    * hue     : It's only applicable for categorical analysis.\n    '''\n    sns.set(style=\"darkgrid\")\n      \n    if vartype == 0:\n        fig, ax=plt.subplots(nrows = 3, ncols=1,figsize=(12,12))\n        # Distribution Plot\n        ax[0].set_title(\"Distribution Plot\",fontsize = 10)\n        sns.distplot(df[column], kde=False, fit=stats.gamma, color='darkblue', label = column, ax=ax[0])\n        \n        # Violinplot \n        ax[1].set_title(\"Violin Plot\",fontsize = 10)\n        sns.violinplot(data= df, x=column, color = 'limegreen', inner=\"quartile\", orient='h', ax=ax[1])\n        \n        #Boxplot\n        ax[2].set_title(\"Box Plot\",fontsize = 10)\n        sns.boxplot(data =df, x=col,color='cyan',orient=\"h\",ax=ax[2])\n        \n        fig.tight_layout()\n        \n    if vartype == 1 :\n        #Count plot \n        fig = plt.figure(figsize=(12,6))\n        plt.title('Count Plot',fontsize = 20)\n        ax=sns.countplot(data=df, x=column, palette=\"deep\",order = df[col].value_counts(ascending = False).index[:10])\n        \n        plt.xticks(rotation=45)\n        ax.set_xlabel(column, fontsize = 15)\n        ax.tick_params(labelsize=12)","02c1f124":"# 1. Define Dataframe\ndataframe = df\n\n# 2. Define feature\ncol='manufacturer'\n\n# 3. Vartype \nvar_type = 1   \n \n#Visualization\nUnivariate_plot(df=dataframe,column = col, vartype = var_type)","bf66d3a6":"df_viz = df[(df['manufacturer'] =='ford') | (df['manufacturer'] =='chevrolet') | (df['manufacturer'] =='toyota') | (df['manufacturer'] =='honda') | (df['manufacturer'] =='nissan')]","7a54a0d0":"plt.figure(figsize = (15, 10))\nax = sns.countplot(x=\"year\", hue='manufacturer',data=df_viz_year)","cc358909":"def bivariate_plot(df, xcol, ycol, plot_type, hue = None, title= None):\n    '''\n    Documentation :\n    --------------\n    Bivariate function will plot the graphs based on the parameters.\n    * df        : dataframe name\n    * xcol      : X Column name\n    * ycol      : Y column name\n    * plot_type : plot type : scatter plot, boxplot, and violin plot \n                (0) Scactter plot     : graph between xcol(numerical) and ycol(numerical) \n                (1) Boxplot           : graph between xcol(categorical) and ycol(numerical)\n                (2) Violin plot       : graph between xcol(categorical) and ycol(numerical)\n    * hue     : name of variables in ``data`` or vector data, optional Grouping variable that \n                will produce points with different colors.\n    '''\n    if title == None :\n        title = 'Bivariate Plot'\n        \n    # Scatter plot \n    if plot_type == 0 :\n        \n        \n        fig = plt.figure(figsize=(12,8))\n        ax = sns.scatterplot(data=df, x=xcol, y=ycol, s=150)\n        #title of graph\n        ax.axes.set_title(title,fontsize = 20 )\n        ax.set_xlabel(xcol, fontsize = 15)\n        ax.set_ylabel(ycol, fontsize = 15)\n        ax.tick_params(labelsize=12)\n        \n    #boxplot\n    if plot_type == 1 : \n        fig = plt.figure(figsize = (12, 7))\n        ax =sns.boxplot(data=df, x=xcol, y=ycol, hue = hue)\n        plt.setp(ax.artists, alpha=.5, linewidth=2, edgecolor=\"k\")\n        plt.xticks(rotation=45)\n        #title of graph\n        ax.axes.set_title(title,fontsize = 20 )\n        ax.set_xlabel(xcol, fontsize = 15)\n        ax.set_ylabel(ycol, fontsize = 15)\n        ax.tick_params(labelsize=12)\n        \n    #violinplot \n    if plot_type == 2 :\n        fig =plt.figure(figsize = (12, 7))\n        ax = sns.violinplot(data=df, x=xcol, y=ycol,  hue = hue)\n        plt.xticks(rotation=45)\n        #title of graph\n        ax.axes.set_title(title,fontsize = 20 )\n        ax.set_xlabel(xcol, fontsize = 15)\n        ax.set_ylabel(ycol, fontsize = 15)\n        ax.tick_params(labelsize=12)\n    \n    ax.legend()","06891f2f":"plt.figure(figsize = (15, 10))\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)\n\nax = sns.barplot(x=\"fuel\", y=\"odometer\",hue='manufacturer',data=df_viz)","479b024c":"plt.figure(figsize = (15, 10))\n\nax = sns.barplot(x=\"type\", y=\"price\", hue=\"manufacturer\",data=df_viz)","0e1880c4":"plt.figure(figsize = (20, 10))\n\nax = sns.barplot(x=\"paint_color\", y=\"price\", hue=\"manufacturer\",data=df_viz)\nplt.xticks(rotation=45)\nplt.yticks(rotation=45)","a034ee46":"plt.figure(figsize = (15, 20))\n\ndf_viz_year = df_viz[(df_viz['year'] >2010)]\n\nax = sns.barplot(x=\"condition\", y=\"price\",hue=\"manufacturer\", data=df_viz_year)","580b52ec":"def multivariate(df, column, plot_type ):\n    '''\n    Documentation :\n    --------------\n    Multivvariate function will plot the graphs based on the parameters.\n    * df      : dataframe name\n    * column  : Column name (array)\n    * plot : plot_type : hitmap and pairplot\n                (0) Hitmap    : Hitmap graph will be plotted.\n                (1) pairplot  : pairplot graph will be plotted.\n    '''\n    # hitmap plot\n    if plot_type == 0 :\n        corrMatt = df[column].corr()\n        mask = np.array(corrMatt)\n        mask[np.tril_indices_from(mask)] = False\n        fig,ax= plt.subplots(figsize=(20,12))\n        fig.set_size_inches(25,10)\n        sns.heatmap(corrMatt, mask=mask,vmax=0.9, square=True,annot=True)\n        \n        \n    # pairplot \n    if plot_type == 1 :\n        pairplot = sns.pairplot(df[column], size=2, aspect=2,\n                                plot_kws=dict(edgecolor=\"k\", linewidth=0.5),\n                                diag_kind=\"kde\", diag_kws=dict(shade=True))\n        fig = pairplot.fig \n        fig.subplots_adjust(top=0.90, wspace=0.2)\n        fig.suptitle('Pairplot', fontsize=15)\n        \n    plt.xticks(rotation=45)\n    plt.yticks(rotation=45)","d1d8a11c":"# 1. Define Dataframe\ndataframe = df\n\n# 2. Define Column\ncolname = numerical_list\n\n# 3. Plot_type\nplot = 0\n\n# 4. Visualization \nmultivariate(dataframe, colname, plot)","ef5d5cbf":"> ## Context\nCraigslist is the world's largest collection of used vehicles for sale, yet it's very difficult to collect all of them in the same place. I built a scraper for a school project and expanded upon it later to create this dataset which includes every used vehicle entry within the United States on Craigslist.**","29164486":">  We see the preview from the dataset","83f40f83":"We pick 0.6 for the threshold and use that threshold for drop some columns.  ","ba83f013":"We want to seperate the categorical and numerical data","5a46bdfc":"* ## 1.1 Load Dataset","7c6fd92d":"# **Used Cars exploratory-data-analysis**","cbfc8311":"### 1.5.3 Fill Missing","6f036eae":"### 1.5.2 Seperate Num & Categorical","550e8f9c":"* * *","35e36746":"from 2011 to 2015, stock for the car is almost 2 times than 2016 and so on.","86364be9":"The intresting part, orange colour is the most expensive from brand ford and following by custom colour.","8ccd29c8":"### 1.5.1 Drop Missing Value","864d786b":"'offroad' from chevrolet is the most not sold car from top 5 brand and 'sedan' is the most type car from top 5 brand.","9e99ebed":"The intersting part is, 'other' fuel are so much on sale in Craiglist. The 'electric' fuel from brand honda is the most on sale than the four other fuel.   ","d50a2cd5":"We start by load the dataset from kaggle:","fac345f1":"## 1.5 Missing Value ","caacf094":"### 2.1 Univariat Analysis","da9e8b86":"After we found the missing data, we goona fill it. For numerical we using the median and for categorical we using mode.","a637b701":"Take a preview the dataset from stats point of view ","d90a241f":"## 1.4 Checking Unique Columns","888fe722":"#### Categorical","82f13899":"We want to check the unique variable from every columns:","2baa1149":"## 2.2 Bivariate","25083306":"'New' condition from the brand chevrolet is sold so much. Are chevrolet car is not enough?","209de149":"## 1.3 Seperate Feature(s) (Categorical & Numerical)","262d2a40":"df_viz are variables that i made for top 5 brand.","48ed23eb":"### Description Dataset\n\n* url - Link to listing\n\n* city - Craigslist region\n\n* price - Price of vehicle\n\n* year - Year of manufacturing\n\n* manufacturer - Manufacturer of vehicle\n\n* make - Model of vehicle\n\n* condition - Vehicle condition\n\n* cylinders - Number of cylinders\n\n* fuel - Type of fuel required\n\n* odometer - Miles traveled\n\n* title_status - Title status (e.g. clean, missing, etc.)\n\n* transmission - Type of transmission\n\n* vin - Vehicle Identification Number\n\n* drive - Drive of vehicle\n\n* size - Size of vehicle\n\n* type - Type of vehicle\n\n* paint_color - Color of vehicle\n\n* image_url - Link to image\n\n* lat - Latitude of listing\n\n* long - Longitude of listing\n\n* county_fips - Federal Information Processing Standards code\n\n* county_name - County of listing\n\n* state_fips - Federal Information Processing Standards code\n\n* state_code - 2 letter state code\n\n* state_name - State name\n\n* weather - Historical average temperature for location in October\/November","136fcb16":"## 1.2 Preview Dataset","5475910c":"## 2. Visualization","6d02f25d":"We want to fill the missing value from the dataset","cb8e9da2":"We want to see the variable of the dataset","e4629612":"credit: [EDA](http:\/\/\/\/github.com\/Triano123\/Exploratory-Data-Analysis\/blob\/master\/Exploratory_Data_Analysis.ipynb)","c8f54bfc":"As we can see, there are top 10 brand most counted car and on sale at the Craiglist. From now, we are only want to analyze the top 5 brand.","9a2c9b03":"Take look for the duplicate row:","d1817c72":"The last part is looking for the correlation from every numerical column."}}