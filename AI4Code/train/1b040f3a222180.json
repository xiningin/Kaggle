{"cell_type":{"8dfded81":"code","5a5acfe6":"code","a52d08b4":"code","3ddf3739":"code","857fec67":"code","22110c22":"code","99893fa3":"code","e2a88e1b":"code","2089962f":"code","68158dc5":"code","b34ceba6":"code","167e6cb5":"code","2f5c2016":"code","7fa606ae":"code","1edd3cef":"code","1f6b90be":"code","5bbaae33":"code","a448121b":"code","62f67cd1":"code","1a28b142":"code","7c5b1623":"code","37e1bcc2":"code","1e738b72":"code","b4a7ad64":"code","7684b132":"code","84b6b4cb":"code","530c9513":"code","0f47f5db":"code","d0253758":"code","b28f2317":"code","e273e2b8":"code","f42abd36":"code","8270662b":"code","700ad42b":"code","3fbd50bc":"code","4795a96e":"code","924c0e0e":"code","e39708f3":"code","f22087d6":"code","251b6edd":"code","e8548247":"code","e9e4d8eb":"code","4ff7b61d":"code","54b36cf5":"code","496798ab":"code","8fd48c02":"code","745ece2f":"code","9d64a31a":"code","9a297874":"code","37594f1e":"code","f14f9a91":"code","cb5e121f":"code","0d695c79":"code","503164e0":"code","2c039c24":"code","2e2bd4bd":"code","d7830a5d":"code","7e612274":"code","382201f9":"code","6669adc5":"code","cb67dce1":"code","0448bb43":"code","d10f2ed8":"code","7582ebba":"code","260fa449":"code","715ee977":"code","c26ff982":"code","deaf2139":"code","7138fe24":"code","c768e51e":"code","c342442b":"code","a0e6a5e4":"code","26445274":"code","fa7c36d1":"code","376de164":"code","52142979":"code","3e942c5f":"code","87720d55":"code","e58ca1ac":"code","39d605ad":"code","19df9aed":"code","70ad3551":"code","dd7fa16d":"code","9cb39464":"code","2c0b8a88":"code","7eb4d0e8":"code","4d317cde":"code","dea13d83":"code","acb46b77":"code","2a5ff5ec":"code","9603dd52":"code","c9e6c341":"code","98e65864":"markdown","21f6a8fd":"markdown","5cc25715":"markdown","f07b42b1":"markdown","b90060ca":"markdown","73c14fc5":"markdown","250b59b9":"markdown","ddecb59b":"markdown","28a4cebb":"markdown","ec1e0f67":"markdown","811f5a95":"markdown","0aba2c65":"markdown","356e22cc":"markdown","e6ba05bd":"markdown","c5ca3ae5":"markdown","5b936303":"markdown","a620b786":"markdown","053ec499":"markdown","6f6b41d5":"markdown","3e9edbda":"markdown","92019046":"markdown","897d0260":"markdown","7d63d432":"markdown","194fcb4d":"markdown","497a192f":"markdown","0ab590c5":"markdown","23e1a81d":"markdown","c678fc6c":"markdown","e8d76cd2":"markdown","2137c8aa":"markdown","61d53164":"markdown","c7149c73":"markdown","88ccf701":"markdown","e37a9fcf":"markdown","5c86fb41":"markdown","d7cdc39e":"markdown","a8a26aed":"markdown","84ec5113":"markdown","faf75573":"markdown","0f0535fb":"markdown"},"source":{"8dfded81":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.feature_selection import SelectFromModel\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')","5a5acfe6":"data = pd.read_excel('..\/input\/ticket-price-data\/Data_Train.xlsx')","a52d08b4":"data.head()","3ddf3739":" data.shape ","857fec67":"data.info()","22110c22":"print('Data.describe')\ndata.describe(include= 'all').T","99893fa3":"data.dtypes","e2a88e1b":"null = pd.DataFrame({'Null Values' : data.isna().sum(), 'Percentage Null Values' : (data.isna().sum()) \/ (data.shape[0]) * (100)})\nnull","2089962f":"data.dropna(inplace=True)","68158dc5":"null = pd.DataFrame({'Null Values' : data.isna().sum(), 'Percentage Null Values' : (data.isna().sum()) \/ (data.shape[0]) * (100)})\nnull","b34ceba6":"# Defining function to convert ['Date_of_Journey','Dep_Time', 'Arrival_Time'] to datatype\ndef change_into_datetime(col):\n         data[col]=pd.to_datetime(data[col])","167e6cb5":"data.columns","2f5c2016":"for i in ['Date_of_Journey','Dep_Time', 'Arrival_Time']:\n    change_into_datetime(i)","7fa606ae":"data.dtypes","1edd3cef":"data['Journey_day']=data['Date_of_Journey'].dt.day\ndata['Journey_month']=data['Date_of_Journey'].dt.month","1f6b90be":"data.drop('Date_of_Journey', axis=1, inplace=True)","5bbaae33":"data.head()","a448121b":"# extract_hour function\ndef extract_hour(data,col):\n    data[col+\"_hour\"]=data[col].dt.hour\n# extract__minute function\ndef extract_min(data,col):\n    data[col+\"_minute\"]=data[col].dt.minute\n# drop columns function\ndef drop_column(data,col):\n    data.drop(col,axis=1,inplace=True)","62f67cd1":"# Departure time is when a plane leaves the gate. \n# Similar to Date_of_Journey we can extract values from Dep_Time\nextract_hour(data,'Dep_Time')\n\n# Extracting Minutes\nextract_min(data,'Dep_Time')\n\n# Now we can drop Dep_Time as it is of no use\ndrop_column(data,'Dep_Time')","1a28b142":"data.head()","7c5b1623":"# Arrival time is when the plane pulls up to the gate.\n# Similar to Date_of_Journey we can extract values from Arrival_Time\n\n# Extracting Hours\nextract_hour(data,'Arrival_Time')\n\n# Extracting minutes\nextract_min(data,'Arrival_Time')\n\n# Now we can drop Arrival_Time as it is of no use\ndrop_column(data,'Arrival_Time')","37e1bcc2":"data.head()","1e738b72":"duration=list(data['Duration'])\n\nfor i in range(len(duration)):\n    if len(duration[i].split(' '))==2:\n        pass\n    else:\n        if 'h' in duration[i]:                   # Check if duration contains only hour\n            duration[i]=duration[i] + ' 0m'      # Adds 0 minute\n        else:\n            duration[i]='0h '+ duration[i]       # if duration contains only second, Adds 0 hour","b4a7ad64":"data['Duration']=duration","7684b132":"def hour(x):\n    return x.split(' ')[0][0:-1]","84b6b4cb":"def min(x):\n    return x.split(' ')[1][0:-1]","530c9513":"data['Duration_hours']=data['Duration'].apply(hour)\ndata['Duration_mins']=data['Duration'].apply(min)","0f47f5db":"data.drop('Duration',axis=1,inplace=True)","d0253758":"data.head()","b28f2317":"data.dtypes","e273e2b8":"data['Duration_hours']=data['Duration_hours'].astype(int)\ndata['Duration_mins']=data['Duration_mins'].astype(int)","f42abd36":"data.dtypes","8270662b":"data.head()","700ad42b":"num_features=[col for col in data.columns if data[col].dtype!='O']\nnum_features","3fbd50bc":"cat_features=[col for col in data.columns if data[col].dtype=='O']\ncat_features","4795a96e":"categorical=data[cat_features]\ncategorical.head()","924c0e0e":"categorical['Airline'].value_counts()","e39708f3":"plt.figure(figsize=(15,8))\nsns.boxplot(y='Price',x='Airline',data = data.sort_values('Price',ascending=False))","f22087d6":"# As Airline is Nominal Categorical data we will perform OneHotEncoding\nAirline=pd.get_dummies(categorical['Airline'], drop_first=True)\nAirline.head()","251b6edd":"categorical['Source'].value_counts()","e8548247":"plt.figure(figsize=(15,8))\nsns.catplot(y='Price',x='Source',data = data.sort_values('Price',ascending=False),kind='boxen')","e9e4d8eb":"# As Source is Nominal Categorical data we will perform OneHotEncoding\nSource=pd.get_dummies(categorical['Source'], drop_first=True)\nSource.head()","4ff7b61d":"categorical['Destination'].value_counts()","54b36cf5":"plt.figure(figsize=(15,8))\nsns.catplot(y='Price',x='Destination',data = data.sort_values('Price',ascending=False),kind='boxen')","496798ab":"# As Destination is Nominal Categorical data we will perform OneHotEncoding\n\nDestination=pd.get_dummies(categorical['Destination'], drop_first=True)\nDestination.head()","8fd48c02":"categorical['Route']","745ece2f":"categorical['Route_1']=categorical['Route'].str.split('\u2192').str[0]\ncategorical['Route_2']=categorical['Route'].str.split('\u2192').str[1]\ncategorical['Route_3']=categorical['Route'].str.split('\u2192').str[2]\ncategorical['Route_4']=categorical['Route'].str.split('\u2192').str[3]\ncategorical['Route_5']=categorical['Route'].str.split('\u2192').str[4]","9d64a31a":"categorical.head()","9a297874":"categorical['Route_1'].fillna('None',inplace=True)\ncategorical['Route_2'].fillna('None',inplace=True)\ncategorical['Route_3'].fillna('None',inplace=True)\ncategorical['Route_4'].fillna('None',inplace=True)\ncategorical['Route_5'].fillna('None',inplace=True)","37594f1e":"categorical.head()","f14f9a91":"#now extract how many categories in each cat_feature\nfor feature in categorical.columns:\n    print('{} has total {} categories \\n'.format(feature,len(categorical[feature].value_counts())))","cb5e121f":"encoder=LabelEncoder()","0d695c79":"categorical.columns","503164e0":"for i in ['Route_1', 'Route_2', 'Route_3', 'Route_4','Route_5']:\n    categorical[i]=encoder.fit_transform(categorical[i])","2c039c24":"categorical.head()","2e2bd4bd":"drop_column(categorical,'Route')\ndrop_column(categorical,'Additional_Info')","d7830a5d":"categorical.head()","7e612274":"categorical['Total_Stops'].value_counts()","382201f9":"categorical['Total_Stops'].unique()","6669adc5":"dict={'non-stop':0, '2 stops':2, '1 stop':1, '3 stops':3, '4 stops':4}","cb67dce1":"categorical['Total_Stops']=categorical['Total_Stops'].map(dict)","0448bb43":"categorical.head()","d10f2ed8":"data[num_features]","7582ebba":"data = pd.concat([categorical,Airline,Source,Destination,data[num_features]],axis=1)\ndata.head()","260fa449":"drop_column(data,'Airline')\ndrop_column(data,'Source')\ndrop_column(data,'Destination')","715ee977":"data.head()","c26ff982":"pd.set_option('display.max_columns',35)","deaf2139":"data.head()","7138fe24":"data.shape","c768e51e":"data.columns","c342442b":"plt.figure(figsize=(12,8))\nmean, std = np.mean(data['Price']), np.std(data['Price'])\nz_score = np.abs((data['Price'] - mean) \/ std)\nthreshold = 4\ngood = z_score < threshold\n\nprint(f\"Rejection {(~good).sum()} points\")\nfrom scipy.stats import norm\nprint(f\"z-score of 3 corresponds to a prob of {100 * 2 * norm.sf(threshold):0.2f}%\")\nvisual_scatter = np.random.normal(size=data['Price'].size)\nplt.scatter(data['Price'][good], visual_scatter[good], s=2, label=\"Good\", color=\"#4CAF50\")\nplt.scatter(data['Price'][~good], visual_scatter[~good], s=8, label=\"Bad\", color=\"#F44336\")\nplt.legend();","a0e6a5e4":"data['Price']=np.where(data['Price']>=30000,data['Price'].median(),data['Price'])","26445274":"plt.figure(figsize=(12,8))\nsns.distplot(data['Price'] ,color= \"g\")","fa7c36d1":"X=data.drop('Price',axis=1)\nX.head()","376de164":"y=data['Price']","52142979":"feature_sel_model = SelectFromModel(Lasso(alpha=0.2, random_state=0)) # remember to set the seed, the random state in this function\nfeature_sel_model.fit(X,y)","3e942c5f":"feature_sel_model.get_support()","87720d55":"cols=X.columns","e58ca1ac":"# let's print the number of total and selected features\n\n# this is how we can make a list of the selected features\nselected_feat = cols[(feature_sel_model.get_support())]","39d605ad":"# let's print some stats\nprint('total features: {}'.format((X.shape[1])))\nprint('selected features: {}'.format(len(selected_feat)))","19df9aed":"selected_feat","70ad3551":"x=X[selected_feat]","dd7fa16d":"#Splitting data\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=44, shuffle =True)","9cb39464":"#Splitted Data\nprint('X_train shape is ' , X_train.shape)\nprint('X_test shape is ' , X_test.shape)\nprint('y_train shape is ' , y_train.shape)\nprint('y_test shape is ' , y_test.shape)","2c0b8a88":"def predict(ml_model):          \n    model=ml_model.fit(X_train,y_train)\n    print('Training score : {}'.format(model.score(X_train,y_train)))\n    y_prediction=model.predict(X_test)\n    print('predictions are: \\n {}'.format(y_prediction))\n    print('\\n')\n    r2_score=metrics.r2_score(y_test,y_prediction)\n    print('r2 score: {}'.format(r2_score))\n    print('MAE:',metrics.mean_absolute_error(y_test,y_prediction))\n    print('MSE:',metrics.mean_squared_error(y_test,y_prediction))\n    print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_prediction)))\n    sns.distplot(y_test-y_prediction)","7eb4d0e8":"predict(RandomForestRegressor(ccp_alpha=0.2,n_estimators=1000))","4d317cde":"predict(GradientBoostingRegressor(alpha=.3 , n_estimators=320,learning_rate=0.9, max_depth=30))","dea13d83":"predict(LinearRegression())","acb46b77":"predict(MLPRegressor( activation='identity' , solver='adam',\n    alpha=0.00000005,\n    batch_size=100,\n    learning_rate='adaptive',\n    learning_rate_init=0.5))","2a5ff5ec":"predict(Lasso(max_iter=100000,alpha=.5,selection='random'))","9603dd52":"predict(Ridge(solver='saga',alpha=.9 ,  max_iter=320))","c9e6c341":"predict(KNeighborsRegressor(n_neighbors=3,\n   \n    weights='distance',\n    algorithm='ball_tree',\n    leaf_size=40,\n    p=4,\n    metric='minkowski',\n    metric_params=None,\n    n_jobs=None,))","98e65864":"### Defining functions extract values from [`Dep_Time` , `Arrival_Time`] columns and drop any column","21f6a8fd":"<a id = '0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong> Split dataset into train & test <\/strong><\/p>","5cc25715":"<a id = '11.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Random Forest Algorithm<\/strong><\/p> \n","f07b42b1":"<a id = '16.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Ridge Algorithm<\/strong><\/p> ","b90060ca":"#### Concatenate dataframe --> categorical + Airline + Source + Destination\n\n","73c14fc5":"#### We are using 2 main Encoding Techniques to convert Categorical data into some numerical format\n   * Nominal data --> data are not in any order --> OneHotEncoder is used in this case\n   * Ordinal data --> data are in order -->       LabelEncoder is used in this case","250b59b9":"<a id = '5.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong> Extract Numerical & Categorical Features<\/strong><\/p>   ","ddecb59b":"#### As this is case of Ordinal Categorical type we perform LabelEncoder\n#### Here Values are assigned with corresponding key","28a4cebb":"<a id = '0.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Table of Contents<\/strong><\/p> \n\n\n* [Importing libraries](#2.0)\n* [Importing dataset](#4.0)\n* [Checking for null values](#3.0)\n* [EDA](#1.0)\n* [Extract Numerical & Categorical Features?](#5.0)\n* [Handling Categorical Data](#6.0)\n* [Dealing with Outliers](#7.0)\n* [Separate your independent & dependent data](#8.0)\n* [Feature Selection](#9.0)\n* [Defining function For ML models](#10.0)\n    * [Random Forest Algorithm](#11.0)\n    * [Gradient Boosting](#12.0)\n    * [Linear Regression Algorithm](#13.0)\n    * [MLPRegressor](#14.0)\n    * [Lasso Algorithm](#15.0)\n    * [Ridge Algorithm](#16.0)\n    * [K-Neighbors Algorithm](#17.0)\n\n","ec1e0f67":"## Destination vs Price Analysis","811f5a95":"#### Additional_Info contains almost 80% no_info,so we can drop this column\n#### we can drop Route as well as we have pre-process that column","0aba2c65":"<a id = '4.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Importing dataset <\/strong><\/p>","356e22cc":"### Apply pre-processing on duration column,Separate Duration hours and minute from `duration` column","e6ba05bd":"<a id = '15.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Lasso Algorithm<\/strong><\/p> ","c5ca3ae5":"<a id = '17.0'><\/a>\n<p style = \"font-size : 35px; color : #FDF5E6 ; font-family : 'Comic Sans MS'; text-align : center; background-color : #CD853F; border-radius: 5px 5px;\"><strong>If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated.<\/strong><\/p> ","5b936303":"* Since we have converted Date_of_Journey column into integers, Now we can drop as it is of no use.","a620b786":"### Airline vs Price Analysis","053ec499":"### Feature Selection\n   * Finding out the best feature which will contribute and have good relation with target variable. \n    \n### Why to apply Feature Selection?\n   * To select important features to get rid of curse of dimensionality ie..to get rid of duplicate features","6f6b41d5":"* From graph we can see that Jet Airways Business have the highest Price., Apart from the first Airline almost all are having similar median","3e9edbda":"#### As now we dont have any missing value in data, we can definitely go ahead with Feature Selection","92019046":"#### points Rejection is 36 so we replace it by price median \n","897d0260":"a id = '12.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Gradient Boosting<\/strong><\/p> \n","7d63d432":"<a id = '3.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Checking for null values<\/strong><\/p>","194fcb4d":"<a id = '17.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>K-Neighbors Algorithm<\/strong><\/p> ","497a192f":"<a id = '1.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Exploratory Data Analysis (EDA)<\/strong><\/p>\n","0ab590c5":"### As we will see we have lots of features in Route , one hot encoding will not be a better option lets appply Label Encoding","23e1a81d":"<a id = '9.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong> Feature Selection<\/strong><\/p>","c678fc6c":"<a id = '13.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Linear Regression Algorithm<\/strong><\/p> \n","e8d76cd2":"<a id = '8.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Separate your independent & dependent data<\/strong><\/p> ","2137c8aa":"<img src=\"https:\/\/bcwcs.com\/wp-content\/uploads\/2020\/08\/Air-Freight.jpg\" style=\"margin-left: 10%; float: center;  border:5px solid ; width:80%; height : 80%;\">","61d53164":"<a id = '2.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Importing libraries<\/strong><\/p>\n","c7149c73":"## Source vs Price Analysis","88ccf701":"<p style = \"font-size : 42px; color : \t#D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>EDA & Predict Prices of Airline Tickets<\/strong><\/p>","e37a9fcf":"<a id = '7.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Dealing with Outliers<\/strong><\/p>       ","5c86fb41":"<a id = '6.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Handling Categorical Data<\/strong><\/p>         ","d7cdc39e":"### As less missing values,I can directly drop these","a8a26aed":"## Dealing with Route column","84ec5113":"### From description we can see that Date_of_Journey is a object data type,\n* Therefore, we have to convert this datatype into timestamp so as to use this column properly for prediction.\n* model will not be able to understand Theses string values,it just understand Time-stamp\n    For this we require pandas to_datetime to convert object data type to datetime dtype.\n\n- dt.day method will extract only day of that date\n- dt.month method will extract only month of that date","faf75573":"<a id = '14.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>MLPRegressor<\/strong><\/p> \n","0f0535fb":"<a id = '10.0'><\/a>\n<p style = \"font-size : 35px; color : #D2691E ; font-family : 'Comic Sans MS'; text-align : center; background-color : #ffff99; border-radius: 5px 5px;\"><strong>Defining function For ML models<\/strong><\/p> \n"}}