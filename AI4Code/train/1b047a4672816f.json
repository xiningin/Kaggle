{"cell_type":{"c566dd8f":"code","39abb896":"code","7635ee94":"code","3e26d4c0":"code","938a9c8d":"code","7f823d58":"code","dd70fae5":"code","54ef7ae7":"code","46edbf6c":"code","207c6d27":"code","3eddb5e7":"code","2d4268c5":"code","8b8592cb":"code","4a9e9efb":"code","c46dfec5":"code","5a39e44a":"code","b2e03746":"code","a231768d":"code","203cf1ae":"code","7c015f63":"code","1c82bb19":"code","dbd1e2c5":"code","269cdbe3":"code","16f66783":"code","ad42294c":"code","2fcef2dd":"code","c9742a5b":"code","ab8b15d3":"code","4ca1432c":"code","34b58b6e":"code","536af174":"code","895c6c41":"code","7cadfe31":"code","04b24c6d":"code","d07b9ab2":"code","5337e769":"code","ebe9e55e":"code","1c450c2e":"markdown","af6edc45":"markdown","c654d8c2":"markdown","eaab7ff0":"markdown","383b76ad":"markdown"},"source":{"c566dd8f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","39abb896":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","7635ee94":"from keras.models import Sequential\nfrom keras.layers import Dense #This is a linear operation where every input is connected to every output by a weight.\nfrom keras.layers import Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras import backend as K","3e26d4c0":"from keras.preprocessing import image\ngen = image.ImageDataGenerator()\n#same as: from keras.preprocessing.image import ImageDataGenerator","938a9c8d":"#test-data set excludes the label column\ntrain.head(2)","7f823d58":"test.head(2)","dd70fae5":"train['label'].unique()","54ef7ae7":"train['label'].value_counts()","46edbf6c":"#check the size of both data sources\ntrain.shape, test.shape #2-dimensions","207c6d27":"#converts labels to integers and pixels into floats\nX_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # Labels, column 0, target \nX_test = test.values.astype('float32')","3eddb5e7":"#Reshape by adding dimension for color channel \nX_train_4D = X_train.reshape(X_train.shape[0], 28, 28,1)\nX_test_4D = X_test.reshape(X_test.shape[0], 28, 28,1)\nX_train_4D.shape, X_test_4D.shape","2d4268c5":"X_trainA = X_train_4D.reshape(X_train_4D.shape[0], 28, 28) ##This is important for images to show properly\n# put labels into y_train variable","8b8592cb":"# visualize number of digits classes\nimport seaborn as sns\nplt.figure(figsize=(15,7))\ng = sns.countplot(y_train, palette=\"icefire\")\nplt.title(\"Number of classes\")","4a9e9efb":"#prints a different range (beware: range over 15 fails)\nfor i in range(10, 14):\n    plt.subplot(330 + (i+1))\n    plt.imshow(X_trainA[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","c46dfec5":"#prints the digits in positions 0 to 5 (not the digit image)\nfor i in range(0, 5):\n    plt.subplot(330 + (i+1))\n    plt.imshow(X_trainA[i], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[i]);","5a39e44a":"# shows the pixel values of the image\nplt.figure()\nplt.imshow(X_trainA[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()\n","b2e03746":"# The label data as individual dataframe\nLabls=train[['label']]\nLabls.shape","a231768d":"Labls.head(2)","203cf1ae":"Labls['label'].unique()","7c015f63":"#label as array\n# The label data as individual set\narrayLbl=train['label']\narrayLbl.shape","1c82bb19":"#split the data \nfrom sklearn.model_selection import train_test_split\ntrain_img, test_img, train_lbl, test_lbl = train_test_split(\n    train, arrayLbl, test_size=28000, random_state=0)\n","dbd1e2c5":"from sklearn.linear_model import LogisticRegression\nLmodel = LogisticRegression(solver = 'lbfgs') #  =Limited-memory Broyden\u2013Fletcher\u2013Goldfarb\u2013Shanno \n#solver = seeks parameter weights that minimize a cost function\n#lbfgs solver= approximates the second derivative matrix updates with gradient evaluations \n# and stores only the last few updates to save memory \n#Source: https:\/\/towardsdatascience.com\/dont-sweat-the-solver-stuff-aea7cddc3451","269cdbe3":"#fit the model\nLmodel.fit(test_img, test_lbl) ","16f66783":"# Make predictions on entire test data\npredictions = Lmodel.predict(test_img)\nprint(predictions)","ad42294c":"predictions2 = Lmodel.predict(train_img)\nprint(predictions2)\n    ","2fcef2dd":"Acc = Lmodel.score(test_img, test_lbl)\nprint(Acc)","c9742a5b":"df = pd.DataFrame(predictions, columns=['ImageId'])\ndf.head(2)","ab8b15d3":"df.shape","4ca1432c":"S=pd.concat([df, Labls], axis=1)\nS.head(2)","34b58b6e":"S.info()","536af174":"a=S.iloc[0 : 28000] #from 0 to 27999\na.head(2)","895c6c41":"a.tail(2) #verify the end rows of the table","7cadfe31":"a=a.astype(int)\na.head(3)","04b24c6d":"a=a.rename(columns={'label': \"Label\"})","d07b9ab2":"a.info()","5337e769":"sorted_by_img = a.sort_values('ImageId')\nsorted_by_img=sorted_by_lbl.astype(int)\nsorted_by_img.head(3)","ebe9e55e":"#Submit dataframe\/table a containing:   \n#ImageId,Label   \n#1,0   \n#2,0   \na.to_csv('Subms.csv',index=False)","1c450c2e":"### **Logistic Regression** ###","af6edc45":"**Visualize**","c654d8c2":"**Data exploration**","eaab7ff0":"**Predictions and submission**","383b76ad":"## **KERAS**: ##\nIt's an open-source neural-network Python library, capable of running on top of TensorFlow, Microsoft Cognitive Toolkit, R, Theano or PlaidML, for experimentation with deep neural networks (source:Wikepedia).   "}}