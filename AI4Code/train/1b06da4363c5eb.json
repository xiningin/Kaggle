{"cell_type":{"eb2752d3":"code","441e9943":"code","13f29b68":"code","47a8267b":"code","67518758":"code","d6f26deb":"code","50019cb0":"code","d372577a":"code","4bb786e7":"code","923a06c7":"code","603279e4":"code","5f9e3a5a":"code","de2635c3":"code","dd5e1fc6":"code","dce63bde":"code","db67e00a":"code","77855d98":"code","0b791569":"code","f85da044":"code","3808db8d":"code","216f293b":"code","daeebb6c":"code","5b5ee8a8":"code","f7fb1e80":"code","7675ed50":"code","de79a11c":"code","4818057f":"code","3861c50c":"code","f228a44a":"code","4cebb45f":"code","364b8081":"code","1ef08e95":"code","43dd532d":"code","447e979b":"code","49daadc6":"code","7be0dd19":"code","015c6d47":"code","3f2ff733":"code","f543beaa":"code","747ebfa4":"code","ad51d2f9":"code","3c7e305a":"code","7d13b4c9":"code","18d8fbcd":"code","f3f4da9e":"code","410d369c":"code","a79bdda5":"code","9571761f":"code","555482f8":"code","8de61c27":"markdown","6634f861":"markdown","103cac11":"markdown","fa8441e8":"markdown","e39b6121":"markdown","41bddd61":"markdown","e69a7831":"markdown","7b7a0885":"markdown","1442bae6":"markdown","601b4c5d":"markdown","830d3b3b":"markdown","47c9760d":"markdown","18e25a94":"markdown","a4d392bc":"markdown","b6582683":"markdown","405d468f":"markdown"},"source":{"eb2752d3":"pip install numpy","441e9943":"import numpy as np \nnp.__version__","13f29b68":"import numpy as np \na = np.array([1,2,3]) \nprint(a)\nprint(type(a))\nprint(\"Shape of Array : \" , str(a.shape))","47a8267b":"# 2 dimensional array \n\na = np.array([[1, 2], [3, 4]]) \nprint(a)\nprint(type(a))\nprint(\"Shape of Array : \" , str(a.shape))","67518758":"# Resizing the Array \n\na = np.array([[1,2,3],[4,5,6]]) \nprint(a)\nprint(\"Shape of Array : \" , str(a.shape))\n\nb = a.reshape(3,2) \nprint(b)\nprint(\"Shape of Array : \" , str(b.shape))\n","d6f26deb":"# Array of continous number \n\na = np.arange(24)  # start is zero if you dont specify , end is exclusive\nprint(a)","50019cb0":"# ndim attribute to find the dimension of the array \n\nprint(a.ndim)","d372577a":"b = a.reshape(6,2,2)  # ( row , columns ) format\nprint(\"Number of Dimension for Array B : \" , b.ndim)\nprint(b)\nprint(b.shape)","4bb786e7":"# Empty Array \n\nx = np.empty([3,2], dtype='float') \nprint(x)","923a06c7":"# Zeros Array \n\nx = np.zeros([10,10] , dtype='float') \nprint(x)","603279e4":"x = np.zeros(8 , dtype='int') \nprint(x)","5f9e3a5a":"# All Ones Array \n\nx= np.ones(10 , dtype='int')\nprint(x)","de2635c3":"x = np.ones([2,2], dtype = int) \nprint(x)","dd5e1fc6":"# convert list to ndarray \nx = [1,2,3] \na = np.asarray(x) \nprint(a)","dce63bde":"# ndarray from tuple \n\nx = (1,2,3) \na = np.asarray(x) \nprint(a)","db67e00a":"x = [(1,2,3),(4,5,6)] \na = np.asarray(x) \nprint(a)\n","77855d98":"# create list object using range function \nsmall_list = list(range(50) )\nprint(small_list)","0b791569":"a = np.asarray(list(range(5)))\nprint(a)\n","f85da044":"x = np.arange(5) \nprint(x)","3808db8d":"x = np.arange(5, dtype = float)\nprint(x)","216f293b":"import numpy as np \nx = np.arange(10,20,2)   # stop value is not inclusive\nprint(x)","daeebb6c":"x = np.linspace(10,20,5)   ## 20 is inclusive because endpoint is True by default\nprint(x)","5b5ee8a8":"x = np.linspace(10,20, 5, endpoint = False)   # 20 is not included\nprint(x)","f7fb1e80":"x = np.linspace(1,2,5, retstep = True) \nprint(x)","7675ed50":"a = np.logspace(1.0, 2.0, num = 10) \nprint(a)\n","de79a11c":"10**1.3","4818057f":"a = np.logspace(1,10,num = 10, base = 2) \nprint(a)","3861c50c":"a = np.arange(10) \nprint(a)\ns = slice(2,7,2) \nprint(s)\n","f228a44a":"a[-5:]  # start : end ( end is not inclusive) , array indexes start from zero\n\n\n#  -1 will be treated as len(array ) -1","4cebb45f":"print(a[s])","364b8081":"# slice single item \n\na = np.arange(10) \nb = a[5] \nprint(b)","1ef08e95":"# slice items starting from index \na = np.arange(10) \nprint(a[2:])","43dd532d":"# slice items between indexes \na = np.arange(10) \nprint(a[2:5])","447e979b":"import numpy as np \na = np.array([[1,2,3],[3,4,5],[4,5,6]]) \nprint(a)\n\n# slice items starting from index\nprint('Now we will slice the array from the index a[1:]')\nprint(a[1:])  # return rows starting from index position 1 ","49daadc6":"# array to begin with \nimport numpy as np \na = np.array([[1,2,3],[3,4,5],[4,5,6]]) \n\nprint('Our array is:' )\nprint(a )\nprint ('\\n')\n\n","7be0dd19":"# this returns array of items in the second column \nprint ('The items in the second column are:')\nprint (a[...,0:2])  # ...  means all \nprint ('\\n')\n\n","015c6d47":"# Now we will slice all items from the second row \nprint('The items in the second row are:')\nprint(a[1,...])  \nprint('\\n')\n\n","3f2ff733":"# Now we will slice all items from column 1 onwards \nprint('The items column 1 onwards are:')\nprint(a[...,1:])","f543beaa":"import numpy as np \na = np.arange(6) \n\nprint('Our array is:' )\nprint (a)  \n\nprint('Applying id() function:')\nprint(id(a))  \n\nprint ('a is assigned to b:' )\nb = a \nprint(b)  \n\nprint('b has same id():' )\nprint(id(b))  \n\n","747ebfa4":"print('Change shape of b:')\nb.shape = 3,2 \nprint(b)  \n\nprint('Shape of a also gets changed:')\nprint(a)","ad51d2f9":"# To begin with, a is 3X2 array \na = np.arange(6).reshape(3,2) \n\nprint('Array a:')\nprint(a)  \n\nprint('Create view of a:' )\nb = a.view() \nprint(b)  \n\nprint('id() for both the arrays are different:' )\nprint('id() of a:')\nprint(id(a))\nprint('id() of b:')\nprint(id(b)) \n\n","3c7e305a":"print('Change the contents of b:')\nb[0,0] = 100 \n\nprint('Modified array b:' )\nprint (b ) \n\nprint ('a also changes:')\nprint(a)","7d13b4c9":"# Change the shape of b. It does not change the shape of a \nb.shape = 2,3 \n\nprint('Shape of b:')\nprint(b)  \n\nprint('Shape of a:')\nprint(a)","18d8fbcd":"a = np.array([[10,10], [2,3], [4,5]]) \n\nprint('Array a is:')\nprint(a)  \n\nprint('Create a deep copy of a:' )\nb = a.copy() \nprint('Array b is:' )\nprint(b )\n\n#b does not share any memory of a \nprint('Can we write b is a' )\nprint(b is a)  \n\n","f3f4da9e":"print('Change the contents of b:')\nb[0,0] = 100 \n\nprint('Modified array b:' )\nprint (b ) \n\nprint ('a remains unchanged:')\nprint(a)","410d369c":"import numpy as np \na = np.array([[0.0,0.0,0.0],[10.0,10.0,10.0],[20.0,20.0,20.0],[30.0,30.0,30.0]]) \nb = np.array([1.0,2.0,3.0])  \n   \nprint('First array:' )\nprint(a) \nprint('\\n' )\n   \nprint ('Second array:' )\nprint (b) \nprint ('\\n' )\n   \nprint('First Array + Second Array' )\nprint (a + b)","a79bdda5":"a = np.arange(10)\n\nprint('Original array is:')\nprint(a)\nprint('\\n')\n\nprint('Modified array is:')\nfor x in a:\n    print(x*x)","9571761f":"list_x = [10,9,8,7,6,5,4,3,2,1]","555482f8":"sorted(list_x)","8de61c27":"## Slicing ##","6634f861":"## NumPy is a python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices. NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.##","103cac11":"## numpy.logspace ##\n### This function returns an ndarray object that contains the numbers that are evenly spaced on a log scale. Start and stop endpoints of the scale are indices of the base, usually 10. ###\n\n## numpy.logspace(start, stop, num, endpoint, base, dtype) ##","fa8441e8":"### Numpy array from Existing Data ###","e39b6121":"##  ARANGE FUNCTION ##\n### numpy.arange(start, stop, step, dtype) ###","41bddd61":">## ** Numpy Version ** ##","e69a7831":"## Deep Copy ##","7b7a0885":"## Iterating Over an Array ##","1442bae6":"### The most important object defined in NumPy is an N-dimensional array type called ndarray. It describes the collection of items of the same type. Items in the collection can be accessed using a zero-based index.Every item in an ndarray takes the same size of block in the memory. Each element in ndarray is an object of data-type object (called dtype).###","601b4c5d":"## Braodcasting ##\n\n## The term broadcasting refers to the ability of NumPy to treat arrays of different shapes during arithmetic operations. If the dimensions of two arrays are dissimilar, element-to-element operations are not possible. However, operations on arrays of non-similar shapes is still possible in NumPy, because of the broadcasting capability. The smaller array is broadcast to the size of the larger array so that they have compatible shapes.##","830d3b3b":"### log of 10 to the base of 10 is 1 and log of 100 to the base of 10 is 2, so it divides the range between 10 and 100  ###","47c9760d":"## ** Install Numpy ** ##","18e25a94":"## View or Shallow Copy ## ","a4d392bc":"### ** Initialize a numpy array ** ###","b6582683":"## why Copy is needed ## ","405d468f":"## numpy.linspace ##\n### This function is similar to arange() function. In this function, instead of step size, the number of evenly spaced values between the interval is specified.###\n\n### numpy.linspace(start, stop, num, endpoint, retstep, dtype) ###"}}