{"cell_type":{"e88c5a5f":"code","ccde0d0b":"code","990dc294":"code","66ae6d5d":"code","b88cd9ee":"code","cc6f4c0f":"code","6f565107":"code","ca58e7ee":"code","0c86d06a":"code","4927d88c":"code","6e8cda75":"code","1df4a3bf":"code","a019df86":"code","4ed81794":"markdown","05a6b516":"markdown","cc29fa23":"markdown","0a550ec8":"markdown","1930b69b":"markdown","ac7880aa":"markdown"},"source":{"e88c5a5f":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom joblib import dump, load\nfrom catboost import CatBoostRegressor\n\n# Scikit-Learn Imports\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor","ccde0d0b":"train = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/train.csv\")\ntest = pd.read_csv(\"..\/input\/petfinder-pawpularity-score\/test.csv\")\ntrain_label = train['Pawpularity']\nprint(train.shape, test.shape, train_label.shape)","990dc294":"train.head()","66ae6d5d":"train_meta = train.drop(columns = ['Id', 'Pawpularity'])\ntest_meta = test.drop(columns = ['Id'])\nprint(train_meta.shape, test_meta.shape)","b88cd9ee":"X_train, X_val, y_train, y_val = train_test_split(train_meta, train_label, test_size = 0.15)\nprint(X_train.shape, X_val.shape, y_train.shape, y_val.shape)","cc6f4c0f":"# # Linear Regression\n# lr = LinearRegression()\n# lr.fit(X_train, y_train)\n# y_train_preds = lr.predict(X_train)\n# y_val_preds = lr.predict(X_val)\n\n# print(\"Training RMSE ->\", mean_squared_error(y_train, y_train_preds, squared=False))\n# print(\"Validation RMSE ->\", mean_squared_error(y_val, y_val_preds, squared=False))","6f565107":"# # Random Forest Model\n# params = {\n#     'n_estimators': [50, 100, 150, 200, 250],\n#     'max_depth': [None, 25, 20, 15],\n#     'min_samples_split': [2, 4, 6],\n#     'max_features': [\"auto\", \"sqrt\", \"log2\"]\n# }\n\n# # rfr = RandomForestRegressor()\n# # clf = GridSearchCV(rfr, param_grid = params, n_jobs = -1)\n# # clf.fit(X_train, y_train)\n# # print(clf.best_params_)\n\n# # Training with best params\n# rfr = RandomForestRegressor(max_depth = 25, max_features = 'log2', \n#     min_samples_split = 6, n_estimators = 100)\n# rfr.fit(X_train, y_train)\n\n# y_train_preds = rfr.predict(X_train)\n# y_val_preds = rfr.predict(X_val)\n\n# print(\"Training RMSE ->\", mean_squared_error(y_train, y_train_preds, squared=False))\n# print(\"Validation RMSE ->\", mean_squared_error(y_val, y_val_preds, squared=False))","ca58e7ee":"# # Gradient Boosting Model\n# params = {\n#     'n_estimators': [50, 100, 150, 200, 250],\n#     'max_depth': [None, 3, 5, 7],\n#     'min_samples_split': [2, 4, 6],\n#     'max_features': [\"auto\", \"sqrt\", \"log2\"]\n# }\n\n# # gbr = GradientBoostingRegressor()\n# # clf = GridSearchCV(gbr, param_grid = params, n_jobs = -1)\n# # clf.fit(X_train, y_train)\n# # print(clf.best_params_)\n\n# # Training with best params\n# gbr = GradientBoostingRegressor(max_depth = 3, max_features = 'log2',\n#     min_samples_split = 2, n_estimators = 50)\n# gbr.fit(X_train, y_train)\n\n# y_train_preds = gbr.predict(X_train)\n# y_val_preds = gbr.predict(X_val)\n\n# print(\"Training RMSE ->\", mean_squared_error(y_train, y_train_preds, squared=False))\n# print(\"Validation RMSE ->\", mean_squared_error(y_val, y_val_preds, squared=False))","0c86d06a":"# # CatBoost\n# params = {\n#     'iterations': [50, 100, 150, 200, 250, 300],\n#     'learning_rate': [None, 0.0001, 0.001, 0.01, 0.1, 1],\n#     'random_seed': [7, 42],\n#     'depth': [11, None],\n#     'verbose': [0]\n# }\n\n# model = CatBoostRegressor()\n# grid_search_result = model.grid_search(params, X=X_train, y=y_train)\n\n# y_train_preds = model.predict(X_train)\n# y_val_preds = model.predict(X_val)\n\n# print(\"Training RMSE ->\", mean_squared_error(y_train, y_train_preds, squared=False))\n# print(\"Validation RMSE ->\", mean_squared_error(y_val, y_val_preds, squared=False))","4927d88c":"# model.get_all_params()","6e8cda75":"# Retraining the model on the entire training set\nmodel = CatBoostRegressor(iterations = 50, learning_rate = 0.1, random_seed = 7, \n    depth = 11, verbose = 0)\nmodel.fit(train_meta, train_label)","1df4a3bf":"y_test_preds = model.predict(test_meta)\nsubmission = pd.DataFrame()\nsubmission['Id'] = test['Id']\nsubmission['Pawpularity'] = y_test_preds\nsubmission.to_csv('submission.csv',index = False)","a019df86":"submission.head()","4ed81794":"# Making the Submission","05a6b516":"# Extracting the meta-features","cc29fa23":"# Installing and Importing Packages","0a550ec8":"# Training the Model","1930b69b":"# Importing the CSV(s)","ac7880aa":"# PetFinder: Meta-features\n- Hola amigos, this notebook covers my code for the **PetFinder.my - Pawpularity Contest**, which can be found [here](https:\/\/www.kaggle.com\/c\/petfinder-pawpularity-score)."}}