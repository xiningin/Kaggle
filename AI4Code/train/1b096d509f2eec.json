{"cell_type":{"4abb9a91":"code","2cfe4eaa":"code","184619d0":"code","a633c0c8":"code","84d6706f":"markdown","c1e6d7d5":"markdown","452bd8f7":"markdown"},"source":{"4abb9a91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2cfe4eaa":"df=pd.read_csv('\/kaggle\/input\/graduate-admissions\/Admission_Predict.csv')\ndf.head()","184619d0":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df)\ndf = pd.DataFrame(scaler.fit_transform(df),columns = df.columns)\ndf.head()","a633c0c8":"from sklearn import linear_model\n\n\ndf_op=df['Chance of Admit ']\ndf.drop('Serial No.', axis=1,inplace=True)\ndf.drop('Chance of Admit ', axis=1,inplace=True)\n\n\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(df, df_op, test_size=0.2, \n                                                    random_state=1) \nreg = linear_model.LinearRegression() \n\nimport statsmodels.formula.api as sm \n\nreg.fit(X_train, y_train) \n\n# regression coefficients \nprint('Coefficients: \\n', reg.coef_) \n  \n# variance score: 1 means perfect prediction \nprint('Variance score: {}'.format(reg.score(X_test, y_test)*100)) \n  \n# plot for residual error \n  \n## setting plot style \nplt.style.use('fivethirtyeight') \n  \n## plotting residual errors in training data \nplt.scatter(reg.predict(X_train), reg.predict(X_train) - y_train, \n            color = \"green\", s = 10, label = 'Train data') \n  \n## plotting residual errors in test data \nplt.scatter(reg.predict(X_test), reg.predict(X_test) - y_test, \n            color = \"blue\", s = 10, label = 'Test data') \n  \n## plotting line for zero residual error \nplt.hlines(y = 0, xmin = 0, xmax = 50, linewidth = 2) \n  \n## plotting legend \nplt.legend(loc = 'upper right') \n  \n## plot title \nplt.title(\"Residual errors\") \n  \n## function to show plot \nplt.show()","84d6706f":"Conclusion- Using Linear regression we have predicted model accuracy by 80%","c1e6d7d5":"# Linear regression","452bd8f7":"# Feature engineering"}}