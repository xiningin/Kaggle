{"cell_type":{"be0b2cac":"code","0c163933":"code","422808ff":"code","d8e17781":"code","841ba156":"code","d6895b28":"code","838aa04c":"code","b873687c":"code","1effa9d1":"code","bb61653a":"markdown","2bf764df":"markdown","71982d3c":"markdown","5e37a4a9":"markdown","e0af6a74":"markdown","f0600d62":"markdown","2b7b0686":"markdown","4d8b12bc":"markdown","46fb6413":"markdown","7d6da7bc":"markdown","9a1a3394":"markdown","b4ef9292":"markdown","4bb2f994":"markdown","5e35abb1":"markdown"},"source":{"be0b2cac":"# Utilities to display results.\n\nfrom IPython.core.display import display, HTML\nfrom pathlib import Path\nimport pandas as pd\nimport ast\npd.set_option('display.max_colwidth', -1)\npd.set_option('display.max_rows', 100)\n\ndef format_cell(value):\n    \n    if type(value) is list:\n        children=[format_cell(child) for child in value]\n        value='; '.join(map(str,value))\n    if type(value) is dict:\n        children=[f'{format_cell(k)}={format_cell(v)}' for k,v in value.items()]\n        value='; '.join(children)\n                  \n        \n    return str(value)\n    \n\ndef show_results(filename):\n    path=Path(f'\/kaggle\/input\/queryoutputs\/{filename}.txt')\n    line_dicts=[ast.literal_eval(line.strip()) for line in path.read_text(encoding='utf-8').splitlines()]\n    df=pd.DataFrame(line_dicts)\n    for column in df.columns:\n        df[column]=df[column].apply(format_cell)\n    return df\n    \n","0c163933":"show_results('asymp_child')","422808ff":"show_results('season')","d8e17781":"show_results('persist_body')","841ba156":"show_results('materials')","d6895b28":"show_results('models')","838aa04c":"show_results('pheno')","b873687c":"show_results('immune')","1effa9d1":"show_results('ppe')","bb61653a":"This query did not do well. This is likely because, being a medical Ontology, UMLS has poor coverage for material concepts. Adding a materials-specific NER to our document processing pipeline would likely improve results.","2bf764df":"## Prevalence of asymptomatic shedding and transmission (e.g., particularly children).\n\nQuery finds the UMLS concepts pertaining to Viral Shedding and Asymptomatic Infection in the same context as those for COVID-19. It also optionally finds the concept for the Age Group for Children, and outputs a Boolean `true` if the Sentence refers to children.\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document'). # Find Document Vertices\n    as('DocID').\n    out('section').out('sentence').as('Sentence').out('entity').has('name','COVID-19').select('Sentence'). # Find Sections with Sentences that mention COVID-19.\n    out('entity').\n    has(\n        'name', \n        within( # In the same context, find relevant concepts.            \n            'viral release from host cell',\n            'Viral Shedding',\n            'Asymptomatic',\n            'Asymptomatic Infections',\n            'Asymptomatic Diseases'\n        )       \n    ).as('Concept')   \n    .coalesce( # Optionally also find concepts pertaining to Children, and cast them to Boolean.\n        select('Sentence').out('entity').has('name',within('Child')).constant(true),\n        constant(false)\n        ).as('In Children').\n    limit(75).\n    order().by(decr). # Order by the Child cases first.\n    select('Concept','In Children','Sentence','DocID'). # Output the specified Vertices to columns.        \n    by(values('name')).\n    by().\n    by(values('text')).\n    by(values('sid')).\n    dedup()\n```","71982d3c":"Output only shows a couple of results, however, which are speculative.","5e37a4a9":"Outputs contain two Columns, `Substance` showing which Body Substance was invovled, and `Transmission` showing the Transmission type.","e0af6a74":"## Seasonality of transmission\n\nThis query enumerates the UMLS concepts pertaining to seasons and seasonality (the Semantic Types pertaining to periods were too broad to be useful here) and extracts them when in the same context as COVID-19.\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').\n    out('entity').has('name',\n            within( # Concepts for seasonality.\n                'summer',\n                'winter',\n                'spring (season)',\n                'Autumn',\n                'Holidays',\n                'Seasons',\n                'Seasonal course',\n                'seasonality',\n                'Seasonal Variation'\n            )\n    ).as('Concept').select('Sentence').\n    out('entity').has('name','COVID-19').as('COVID').\n    dedup().    \n    select('Concept',\"Sentence\",\"DocID\").        \n    by(values('name')).\n    by(values(\"text\")).    \n    by(values(\"sid\")).    \n    limit(15).\n    dedup()\n```","f0600d62":"## Immune response and immunity\n\nSimple query to find the two concepts mentioned in the Task.\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').out('entity').has('name','COVID-19').\n    select('Sentence').out('entity').\n    has(\n        'name', \n        within(\n            'Immune response',\n            'Immunity'\n        )        \n    ).        \n    as('Concept').\n    select('Concept','Sentence','DocID').        \n    by(values('name')).\n    by(values('text')).\n    by(values('sid')).\n    limit(25)\n```","2b7b0686":"# Deeper Insights COVID-19 Knowledge Graph\n\nhttps:\/\/deeperinsights.com\/\n\nEdward Brown, Marcia Oliveira, Eduardo Piairo, Brett Drury\n\n## Overview\n\nOur submission to the challenge involves a Knowledge Graph that encodes biomedical concepts and the relations between them.\n\nWe should mention immediately that, since no one on our team has a formal medical background, most of our efforts have focused, for our Round 1 submission, on creation of a tool to allow medical researchers to answer the sorts of questions in the Tasks, rather than answering them all directly ourselves. \n\nThe Graph represents a backend that, in the next few weeks, we will open up via a web interface at [covid.deeperinsights.com](http:\/\/covid.deeperinsights.com\/), with a much simplified search method (e.g. closer to a traditional search box that our code-based queries here), Topic Graph visualisations, Graph navigation, document quality metrics, and so on. This fully-developed tool will be for open use and knowledge discovery, but we also intend to use it as the basis of our Round 2 submission.\n\nEven so we do provide here sets of queries and outputs (the results of performing \u201clow-level\u201d queries against out Graph directly) for a subset of the Round 1 questions, which we believe show very promising results.\n\nSince the code behind the Graph creation process, its deployment, etc., is much too involved for a Notebook context, we will instead outline our methodology descriptively. Query code however is provided later in this Notebook.\n\n## Document Processing\n\nWe'll say a little here about the creation of our Graph with respect to its two phases: First, document processing, consisting of a custom spaCy\/SciSpacy pipeline - and second a bulk insert into our Amazon Neptune instance.\n\n### SciSpacy and UMLS\n\nInitial parsing of the Kaggle Challenge source data was done using [SciSpacy](http:\/\/https:\/\/allenai.github.io\/scispacy\/) (a Python package containing spaCy models for processing biomedical, scientific or clinical text). We also used the SciSpacy UMLS Named Entity Linker, to link the entities found by its NER to a Knowledge Base consisting of UMLS ([Unified Medical Language System](https:\/\/www.nlm.nih.gov\/research\/umls)) Concepts.\n\nBesides SciSpacy, we customised our pipeline to enrich documents with some additional information.\n\n### Custom COVID-19 Entity Recognition\n\nSince COVID-19 is a new disease, and lacks an entry in the UMLS, it isn't linked by the SciSpacy Linker. Hence we created an additional NER dedicated to recognising mentions of COVID-19. This was added to the pipeline *prior to* the SciSpacy NER, to prevent the latter incorrectly identifying COVID-19 an existing UMLS concept. We then linked these to a Concept ID from the [Supplementary Concept Record for Coronavirus Disease 2019](http:\/\/www.nlm.nih.gov\/pubs\/techbull\/jf20\/brief\/jf20_mesh_novel_coronavirus_disease.html) newly issued by MeSH, allowing for them to be queried much as any other UMLS Concept. The result of the Document Processing phase is a large [Neptune CSV format](https:\/\/docs.aws.amazon.com\/neptune\/latest\/userguide\/bulk-load-tutorial-format-gremlin.html) file, ready for bulk insert in Amazon Neptune. \n\n## Amazon Neptune and Gremlin\n\nOnce loaded, the dataset is initially represented in the Graph as entities-within-sentences-within-sections, roughly as follows:\n\n- Document  - \n  - Title\n    - Sentence<sub>1<\/sub>\n      - Entity<sub>1<\/sub>\n      - ...\n      - Entity<sub>n<\/sub>\n    - ...\n    - Sentence<sub>n<\/sub>\n  - Abstract\n    - (As Title)\n  - Full Text\n    - (As Title) \n  \n\nSince our Graph instance is under Neptune, it uses the Gremlin query language. Hence all code examples below are written in Gremlin.\n\n### The UMLS Semantic Network\n\nOnce hosted, we further enriched our Graph with the structure (in addition to the Concepts, that is) behind the [Unified Medical Language System](https:\/\/www.nlm.nih.gov\/research\/umls\/index.html) (UMLS).\n\nEach Entity found during the NLP phase is linked, via an `instance_of edge` to a) one `EntityType` and b) one or more  `SemanticType` Vertices, meaning every `Entity` is given its place within the structure of the [UMLS Taxonomy](https:\/\/www.nlm.nih.gov\/research\/umls\/META3_current_semantic_types.html). From there, we linked the `SemanticType` Vertex with any corresponding relationships mentioned in the [UMLS Semantic Network](https:\/\/semanticnetwork.nlm.nih.gov\/). This allows us to query our documents according to that network too. For example, to find `Entities` in our the dataset that, say, are the *types of things* (Bodily Organs, for example) that produce a Body Substance, we can issue this query:\n\n```python\ng.V().out('entity').where(out('instance_of').hasLabel('SemanticType').out('produces').has('name','Body Substance')).\n```\n\nTo find ones (e.g. \"child\", \"Adults\") that represent Age Groups:\n\n```python\ng.V().out('entity').where(out('instance_of').hasLabel('SemanticType').in('isa').has('name','Age Group')).\n```\n\n## Pros and Cons\n\n### Pros\n\n- Our solution is extremely powerful, allowing queries to exploit the rich structure of the UMLS network.\n- Queries can output arbitrary numbers of columns and normalised data types, and can return raw UMLS codes instead of text. Hence our approach can turn free-text into structured data directly.\n  \n### Cons\n\n- The power mentioned in the Pros section has the downside of requiring a user familiarise themselves with the Gremlin query language, and the structure of the UMLS Semantic Network. This makes query development much slower and more iterative than more user-friendly search-box solutions. \n- We are currently using an early version of the Kaggle dataset with 13K documents only.\n- While not a Con of the approach itself, our Graph currently lacks co-reference resolution, which likely harms recall significantly. Take the sentence \"**COVID-19** is a disease. It is caused by the virus SARS-CoV-2\". Since \"It\" is not recognised as a UMLS Concept, the valuable information in the the second sentence would be missed by queries. So we plan to add co-reference resolution, along with the abovementioned improvements, for our Round 2 submission, and copy any Concept information from \"COVID-19\" to the \"It\".\n  \n\nThe remainder of the Notebook contains our queries and outputs for selected Task questions.","4d8b12bc":"## Persistence and stability on a multitude of substrates and sources (e.g., nasal discharge, sputum, urine, fecal matter, blood).\n\n\nHappily the UMLS contained a broad Semantic Type `Body Substance`, which saved us the gruesome task of enumerating the individual concepts. There were however numerous of concepts pertaining to Transmission that needed including.\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').out('entity').has('name','COVID-19').select('Sentence').\n    out('entity').where(out('instance_of').hasLabel('SemanticType').has('name','Body Substance')). # Semantic Type for Body Substance\n    not(has('name','Matrix substance')).as('Substance'). # Exluded this individual concept as it led to false positives\n    select('Sentence').out('entity').\n    has(\n        'name', \n        within( # Multiple concepts seemed to apply.\n            'transmission process',\n            'disease transmission qualifier',\n            'Droplet Transmission',\n            'viral transmission',\n            'disease transmission',\n            'Horizontal Transmission',\n            'Transmitted by',\n            'Mode of transmission',\n            'Coefficient [transmission coef]',\n            'Pathway (interactions)',\n            'Direct Transmission',\n            'Protein Dynamics',\n            'Transmitter Device Component',\n            'Contact Transmission',\n            'Fecal-oral transmission',\n            'Vector-borne transmission',\n            'Sexual transmission',\n            'Vertical Disease Transmission',\n            'Vector-transmitted infectious disease',\n            'Animal to human transmission'\n        )\n    ).\n    as('Transmission').\n    select('Sentence').\n    select('Substance','Transmission','Sentence','DocID').        \n    by(values('name')).\n    by(values('name')).\n    by(values('text')).\n    by(values('sid')).\n    limit(10)\n```","46fb6413":"## Effectiveness of personal protective equipment (PPE) and its usefulness to reduce risk of transmission in health care and community settings\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').\n    out('entity').has('name',\n            within( # Concepts pertaining to types of PPE\n                'Protective gloves',       \n                'Masks',                   \n                'Orthodontic Facemask',    \n                'Gown',                    \n                'Scrubs',\n                'Face shield' ,\n                'Pulmonary Hygiene',\n                'Personal protective equipment'\n            )\n    ).as('Concept').select('Sentence').\n    out('entity').has('name','COVID-19').as('COVID').    \n    coalesce(\n        select('Sentence').out('entity').\n        has(\n            'name',\n            within( # Extract concepts for Medical Staff, and cast to Boolean.\n                'Health Personnel',\n                'Medical Staff'\n            )\n        ).constant(true),\n        constant(false)\n        ).as('Medical Staff').  \n    select('Concept','Medical Staff',\"Sentence\",\"DocID\").        \n    by(values('name')).\n    by().\n    by(values(\"text\")).    \n    by(values(\"sid\")).\n    limit(35).\n    dedup()    \n```","7d6da7bc":"## Tools and studies to monitor phenotypic change and potential adaptation of the virus\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').out('entity').has('name','COVID-19').\n    select('Sentence').out('entity').\n    has(\n        'name', \n        within( # Concepts pertaining to Phenotypic change\/adaptation.\n            'Acclimatization',\n            'Phenotyping (qualifier value)',\n            'Adaptation',\n            'Phenotypic variability',\n            'Mutation'\n        )        \n    ).        \n    as('Concept').\n    select('Concept','Sentence','DocID').        \n    by(values('name')).\n    by(values('text')).\n    by(values('sid')).\n    limit(25)\n```","9a1a3394":"The output below shows the `Concept` found (i.e. whether the text is refering to Asymptomatic Infections or Viral Shedding) along with the Boolean `In Children` column, which is ordered to show cases invovling children first. The query also includes the source Sentence text and the source Document ID.","b4ef9292":"Output shows the type of PPE in question, plus a Boolean `Medical Staff` column, denoting if the text refers to Medical Staff or not (i.e. the population).","4bb2f994":"## Disease models, including animal models for infection, disease and transmission\n\nThe UMLS also contains a broad Semantic Type, `Experimental Model of Disease`, so we can simply query for that.\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').out('entity').has('name','COVID-19').\n    select('Sentence').out('entity').\n    where(out('instance_of').hasLabel('SemanticType').has('name','Experimental Model of Disease')). # Semantic Type for Disease Models\n    as('Concept').\n    select('Concept','Sentence','DocID').        \n    by(values('name')).\n    by(values('text')).\n    by(values('sid')).\n    limit(3).\n    dedup()\n```","5e35abb1":"## Persistence of virus on surfaces of different materials (e,g., copper, stainless steel, plastic).\n\n```python\n%%gremlin\n\ng.V().hasLabel('Document').\n    as('DocID').\n    out('section').out('sentence').\n    as('Sentence').out('entity').has('name','COVID-19').\n    select('Sentence').out('entity').\n    has(\n        'name', \n        within(\n                'Stainless Steel',\n                'Wood material',\n                'Plastics',\n                'plastic bags',\n                'Box',\n                'Metals',\n                'Metalic',\n                'Paper Dosing Unit',\n                'Acrylic dental material'\n        )        \n    ).        \n    as('Concept').\n    select('Concept','Sentence','DocID').        \n    by(valueMap('name')).\n    by(values('text')).\n    by(values('sid')).\n    limit(1)\n```"}}