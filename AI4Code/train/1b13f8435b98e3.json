{"cell_type":{"e0722815":"code","4020851b":"code","6a5f3ef0":"code","16fc84ba":"code","42b55b31":"code","9ada369c":"code","f57404cc":"code","4be6bdbc":"code","d70189d8":"code","90840bd1":"code","bcfa3e14":"code","d84b805e":"code","7249a59d":"code","2d0fb6f8":"markdown","86ad0e2c":"markdown","219a4a52":"markdown","28a316b1":"markdown","2f1cd111":"markdown","5b7fa094":"markdown","4be449cc":"markdown","13dcd21d":"markdown","42a80ef0":"markdown","603e04e8":"markdown"},"source":{"e0722815":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nfrom random import randint, shuffle\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4020851b":"df_train = pd.read_csv('..\/input\/train_data\/train_data.csv', sep=',')\ndf_test = pd.read_csv('..\/input\/test_data\/test_data.csv', sep=',')","6a5f3ef0":"list_engine_no = list(df_train['engine_no'].drop_duplicates())\n\nratio = .3\nshuffle(list_engine_no)\nengine_no_test = list_engine_no[:int(len(list_engine_no) * ratio)]\nengine_no_train = [x for x in list_engine_no if x not in engine_no_test]","16fc84ba":"nan_column = df_train.columns[df_train.isna().any()].tolist()\nconst_columns = [c for c in df_train.columns if len(df_train[c].drop_duplicates()) <= 2]\nprint('Columns with all nan: \\n' + str(nan_column) + '\\n')\nprint('Columns with all const values: \\n' + str(const_columns) + '\\n')","42b55b31":"metadata_columns = ['engine_no', 'time_in_cycles']\nselected_features = [x for x in df_test.columns if x not in metadata_columns + nan_column + const_columns]","9ada369c":"df_train_train = df_train[df_train['engine_no'].isin(engine_no_train)]\ndata_eval = df_train[df_train['engine_no'].isin(engine_no_test)]\n\nX_train_train, y_train_train = df_train_train[selected_features], df_train_train['RUL'] \nX_eval, y_eval = data_eval[selected_features], data_eval['RUL']\n\nX_train_all, y_train_all = df_train[selected_features], df_train['RUL']\n\nX_test = df_test[selected_features]\n","f57404cc":"from sklearn.tree import DecisionTreeClassifier\ntree = DecisionTreeClassifier(max_depth=20)\ntree.fit(X_train_train, y_train_train)","4be6bdbc":"print(\"Score on train data : \" + str(tree.score(X_train_train, y_train_train)))\nprint(\"Score on eval data : \" + str(tree.score(X_eval, y_eval)))","d70189d8":"tree.fit(X_train_all, y_train_all)","90840bd1":"df_train['pred_tree'] = tree.predict(X_train_all)\ndf_test['pred_tree'] = tree.predict(X_test)","bcfa3e14":"df_train = df_train.sort_values(['engine_no', 'time_in_cycles'])\ndf_test = df_test.sort_values(['engine_no', 'time_in_cycles'])\n\n# On prend la derni\u00e8re pr\u00e9diction du RUL\ndf_result = df_test.groupby('engine_no').last().reset_index()[['engine_no', 'pred_tree']]\n\n# On convertit en binaire (RUL > 100 ?)\ndf_result['result'] = df_result['pred_tree'].map(lambda x: 0 if x > 100 else 1)\n","d84b805e":"df_plot = df_train.copy()\ndf_plot = df_plot.sort_values(['engine_no', 'time_in_cycles'])\ng = sns.PairGrid(data=df_plot, x_vars=\"RUL\", y_vars=['RUL', 'pred_tree'], hue=\"engine_no\", height=6, aspect=6,)\ng = g.map(plt.plot, alpha=0.5)\ng = g.set(xlim=(df_plot['RUL'].max(),df_plot['RUL'].min()))","7249a59d":"df_result[['engine_no', 'result']].to_csv('submission.csv', index=False)","2d0fb6f8":"### Train the classifier","86ad0e2c":"### Train on all dataset","219a4a52":"### Split train - eval ","28a316b1":"### Check Overfitting","2f1cd111":"# **Train a classifier**","5b7fa094":"# **Load tain and test Datasets**","4be449cc":"### Save the results","13dcd21d":"### Make the decision","42a80ef0":"### Make the prediction","603e04e8":"### Plotting the results"}}