{"cell_type":{"c2c1fc85":"code","ac80d41a":"code","12336e72":"code","05c718f1":"code","1bddc6f9":"code","df9d3b8c":"code","cfd9e55e":"code","4e92ad33":"code","3a367bf5":"code","870a7f87":"code","b6bf14b0":"code","0d622d7f":"code","6ffb03a8":"code","e56653d6":"code","24d4a311":"code","3b407e78":"code","58725ad4":"code","656e4aed":"code","5e4216e7":"code","e9c721dd":"code","96c204df":"code","53e39eec":"code","9f5474c0":"code","d7b4145c":"code","c7b5ffdc":"code","98219276":"code","4207d127":"code","0e589788":"code","ebcd9c49":"code","dbf2f183":"code","f806955e":"code","a7898ce8":"code","ad413458":"code","d103d422":"code","4d11e8a7":"code","17ef8e5d":"code","59067dd9":"code","8ed42da9":"code","d2157afe":"code","35c9120e":"markdown","fafb27aa":"markdown","0010aed3":"markdown","1fdc3a51":"markdown","8c4a2afb":"markdown","adc982c3":"markdown","eaf4fd9d":"markdown","58f1f289":"markdown","ab5cda33":"markdown","47ed92a5":"markdown","9cdc8b20":"markdown","9bc7d792":"markdown","92ce92fa":"markdown","760c1a5d":"markdown","f719482d":"markdown","fe0d2eae":"markdown","2fe02bc3":"markdown","e69af998":"markdown","41b06bbb":"markdown","bac1469e":"markdown","a2dac9c3":"markdown","a35b52b9":"markdown","3f142bed":"markdown","45e737e8":"markdown","8b08e3ef":"markdown","e0ceff14":"markdown","28d0dc8d":"markdown","9b60f5cf":"markdown","fd97717e":"markdown"},"source":{"c2c1fc85":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nimport plotly as py\nfrom sklearn.manifold import TSNE\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\npy.offline.init_notebook_mode(connected = True)\n\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ac80d41a":"data=pd.read_csv('..\/input\/Mall_Customers.csv')","12336e72":"data.shape","05c718f1":"data.head()","1bddc6f9":"data.describe()","df9d3b8c":"data.isnull().sum()","cfd9e55e":"## Data Visualisation","4e92ad33":"plt.style.use('fivethirtyeight')","3a367bf5":"plt.figure(1 , figsize = (15 , 6))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1 , 3 , n)\n    plt.subplots_adjust(hspace =5, wspace = 0.5)\n    sns.distplot(data[x] , bins = 40)\n    plt.title('Distplot of {}'.format(x))\nplt.show()","870a7f87":"plt.figure(1 , figsize = (15 , 5))\nsns.countplot(y = 'Gender' , data = data)\nplt.show()","b6bf14b0":"plt.figure(1 , figsize = (15 , 7))\nn = 0 \nfor x in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n    for y in ['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']:\n        n += 1\n        plt.subplot(3 , 3 , n)\n        plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\n        sns.regplot(x = x , y = y , data = data)\n        plt.ylabel(y.split()[0]+' '+y.split()[1] if len(y.split()) > 1 else y )\nplt.show()","0d622d7f":"plt.figure(1 , figsize = (15 , 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Age' , y = 'Annual Income (k$)' , data = data[data['Gender'] == gender] ,\n                s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Age'), plt.ylabel('Annual Income (k$)') \nplt.title('Age vs Annual Income w.r.t Gender')\nplt.legend()\nplt.show()","6ffb03a8":"plt.figure(1 , figsize = (15 , 6))\nfor gender in ['Male' , 'Female']:\n    plt.scatter(x = 'Annual Income (k$)',y = 'Spending Score (1-100)' ,\n                data = data[data['Gender'] == gender] ,s = 200 , alpha = 0.5 , label = gender)\nplt.xlabel('Annual Income (k$)'), plt.ylabel('Spending Score (1-100)') \nplt.title('Annual Income vs Spending Score w.r.t Gender')\nplt.legend()\nplt.show()","e56653d6":"data_1=data[['Age' , 'Annual Income (k$)' , 'Spending Score (1-100)']]","24d4a311":"data_1.describe()","3b407e78":"data_1.corr()","58725ad4":"X=data_1.values\n#print(x)\nscaler=StandardScaler()\nX=scaler.fit_transform(X)","656e4aed":"from sklearn.metrics import silhouette_samples, silhouette_score\nx = list(range(2, 12))\ny_std = []\nfor n_clusters in x:\n    print(\"n_clusters =\", n_clusters)\n    \n    kmeans = KMeans(init='k-means++', n_clusters = n_clusters, n_init=10,max_iter=300)\n    kmeans.fit(X)\n    clusters = kmeans.predict(X)\n    silhouette_avg = silhouette_score(X, clusters)\n    y_std.append(silhouette_avg)\n    print(\"The average silhouette_score is :\", silhouette_avg, \"with Std Scaling\")","5e4216e7":"kmeans=KMeans(n_clusters = 6 ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan') \nkmeans.fit(X)\nclusters=kmeans.predict(X)\n#print(clusters)","e9c721dd":"data_1['clusters']=clusters\ndata_1.head()","96c204df":"trace1 = go.Scatter3d(\n    x= data_1['Age'],\n    y= data_1['Spending Score (1-100)'],\n    z= data_1['Annual Income (k$)'],\n    mode='markers',\n     marker=dict(\n        color = data_1['clusters'], \n        size= 20,\n        line=dict(\n            color= data_1['clusters'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndata = [trace1]\nlayout = go.Layout(\n#     margin=dict(\n#         l=0,\n#         r=0,\n#         b=0,\n#         t=0\n#     )\n    title= 'Clusters',\n    scene = dict(\n            xaxis = dict(title  = 'Age'),\n            yaxis = dict(title  = 'Spending Score'),\n            zaxis = dict(title  = 'Annual Income')\n    )\n)\nfig = go.Figure(data=data, layout=layout)\npy.offline.iplot(fig)","53e39eec":"tsne = TSNE(n_components=2)\nproj = tsne.fit_transform(X)\n\nplt.figure(figsize=(10,10))\nplt.scatter(proj[:,0], proj[:,1], c=clusters)\nplt.title(\"Visualization of the clustering with TSNE\", fontsize=\"25\")","9f5474c0":"cluster_0=data_1[data_1['clusters']==0]","d7b4145c":"cluster_0.describe()","c7b5ffdc":"cluster_1=data_1[data_1['clusters']==1]\ncluster_1.describe()","98219276":"cluster_2=data_1[data_1['clusters']==2]\ncluster_2.describe()","4207d127":"cluster_3=data_1[data_1['clusters']==3]\ncluster_3.describe()","0e589788":"cluster_4=data_1[data_1['clusters']==4]\ncluster_4.describe()","ebcd9c49":"cluster_5=data_1[data_1['clusters']==5]\ncluster_5.describe()","dbf2f183":"X_1 = data_1.drop(columns=['clusters']) \ny = data_1['clusters'].values","f806955e":"scaler=StandardScaler()\nX_scaled = scaler.fit_transform(X_1)","a7898ce8":"X_train, X_test, y_train, y_test = train_test_split(X_scaled,y,test_size = 0.2,random_state = 0, stratify=y)","ad413458":"from sklearn.dummy import DummyClassifier","d103d422":"dummy_biased = DummyClassifier(random_state=0)\n\ndummy_biased.fit(X_train, y_train)","4d11e8a7":"print(\"Baseline accuracy\", (dummy_biased.score(X_test, y_test))*100)","17ef8e5d":"from sklearn.linear_model import LogisticRegression","59067dd9":"lr = LogisticRegression(multi_class='auto')\nlr.fit(X_train, y_train)\nprint(\"LogisticRegression_classifier accuracy:\", (lr.score(X_test, y_test))*100)","8ed42da9":"from sklearn.svm import LinearSVC\n\nsvc = LinearSVC()\nsvc.fit(X_train, y_train)\nprint(\"LinearSVC accuracy:\", (svc.score(X_test, y_test))*100)","d2157afe":"svc_rbf=SVC(kernel='rbf',gamma='auto')\nsvc_rbf.fit(X_train,y_train)\nprint(\"svc_rbf accuracy:\", (svc_rbf.score(X_test, y_test))*100)\n","35c9120e":"By comparing the mean values of the clusters we could see that these customers are with low annual income and high spending score but there age is low.","fafb27aa":"Checking if using kernel trick the accuracy could be improved.","0010aed3":"By comparing the mean values of the clusters we could see that these customers are with high annual income and high spending score and they are middle aged customers.","1fdc3a51":"## Interpretting and Visualizing the clusters","8c4a2afb":"By comparing the mean values of the clusters we could see that these customers are with medium annual income and medium spending score but there age is low.","adc982c3":"### Cluster 5","eaf4fd9d":"By comparing the mean values of the clusters we could see that these customers are with low annual income and low spending score and they are middle aged customers.","58f1f289":"### Cluster 4","ab5cda33":"## Data Visualisation","47ed92a5":"### Cluster 0","9cdc8b20":"Checking the Accuracy of Logistic Regression","9bc7d792":"As we could see the maximum silhoutee score is at number of clusters is equal to 6 so we would try taking 6 clusters and try it.","92ce92fa":"Making a training and testing Split","760c1a5d":"As we could see that we have no strongly correlared features we can use standar algorithms with using dimensionality reduction.\n","f719482d":"### Cluster 1","fe0d2eae":"Visualizing clusters in 2D using T-SNE","2fe02bc3":"As we could see there are no null values in data so we doesnt need to clean the data.","e69af998":"Before we feed the data to the K-Means algorithm we would use standard scaler to scale the data.","41b06bbb":"Using Linear Support Vector Machine","bac1469e":"### Cluster 2\n","a2dac9c3":"Checking with Dummy Classifier First","a35b52b9":"### Cluster 3","3f142bed":"By comparing the mean values of the clusters we could see that these customers are with high annual income and low spending score and they are middle aged customers.","45e737e8":"## K-Means Clustering","8b08e3ef":"By comparing the mean values of the clusters we could see that these customers are with medium annual income and medium spending score but there age is high.","e0ceff14":"## Importing Libraries","28d0dc8d":"## Interpretting the cluster using the cluster centriods.","9b60f5cf":"## Data Exploration","fd97717e":"# Classifying the clusters using Support Vector Machine"}}