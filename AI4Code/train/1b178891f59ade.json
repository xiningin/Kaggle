{"cell_type":{"0d444f8e":"code","0a6284a8":"code","81d3e2cf":"code","03fe97cb":"code","232a96b3":"code","780b906a":"code","c3bd31f2":"code","9fd991b4":"code","81d3f0ee":"code","da1c6e96":"code","0c38efb6":"code","aa942fc7":"markdown","624b7d14":"markdown","bbfc35ec":"markdown","48848f5d":"markdown","413342a1":"markdown","1e01e522":"markdown","cf6b9b8a":"markdown","39ec4988":"markdown","8f51d78e":"markdown","3ea1e2ba":"markdown","6f2317fe":"markdown"},"source":{"0d444f8e":"path = '..\/input\/older-dataset-for-dont-overfit-ii-challenge\/'","0a6284a8":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nfrom yellowbrick.classifier import ROCAUC\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import RandomizedSearchCV","81d3e2cf":"train = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')\nsubmission = pd.read_csv(path+'sample_submission.csv')\nprint(train.shape)\nprint(test.shape)\nprint(submission.shape)","03fe97cb":"X, y = train.drop(['id','target'], axis=1), train['target']\ntest = test.drop(['id'], axis=1) \nprint(X.shape, y.shape)\nprint(test.shape)","232a96b3":"scaler  = StandardScaler()\nX  = scaler.fit_transform(X)\ntest = scaler.transform(test)","780b906a":"# Hyperparameters for Logistic Regression\nLRparams = {\n    \"class_weight\":[\"balanced\"],\n    \"penalty\" : [\"l2\",\"l1\"],\n    \"tol\" : [0.0001,0.0002,0.0003],\n    \"max_iter\": [100,200,300],\n    \"C\" :[0.001,0.01, 0.1, 1, 10, 100],\n    \"intercept_scaling\": [1, 2, 3, 4],\n    \"solver\":[\"liblinear\"],\n}\nmodel = LogisticRegression(random_state=42)\nrs=RandomizedSearchCV(\n    model ,\n    param_distributions = LRparams,\n    verbose=0, \n    n_jobs=-1, \n    scoring='roc_auc',\n    cv = 25, \n    n_iter=100, \n    random_state=42\n)\nrs.fit(X,y)\nprint('Model name:{:20}\\nBest Score: {:.4f}\\nBest Param: {}'.format('Logistic Regression',rs.best_score_, rs.best_params_))","c3bd31f2":"clf = rs.best_estimator_\nclf.fit(X,y)\n\nselector = RFE(clf, 25, step=1)\nselector.fit(X,y)","9fd991b4":"visualizer = ROCAUC(selector, classes=[\"0\", \"1\"])\n\nvisualizer.fit(X, y)\nvisualizer.score(X, y) \nvisualizer.show()    ","81d3f0ee":"pred = selector.predict_proba(test)[:,1]\npred","da1c6e96":"submission['target'] = pred\nsubmission.head()","0c38efb6":"submission.to_csv('submission.csv', index=False)","aa942fc7":"# Logistic Regression Model","624b7d14":"![image.png](attachment:image.png)","bbfc35ec":"# Train Test Data","48848f5d":"# Prediction","413342a1":"# Recursive Feature Selection(For Feature Selection) ","1e01e522":"# Import Libraries","cf6b9b8a":"# Scaling data","39ec4988":"# Submission Score\n\nSubmission Link: https:\/\/www.kaggle.com\/c\/dont-overfit-ii\/submit","8f51d78e":"# Import Dataset","3ea1e2ba":"# Setting Input path","6f2317fe":"# Result Plot"}}