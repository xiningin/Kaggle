{"cell_type":{"a9dee052":"code","ad77c1b0":"code","dd6cb95b":"code","e40b8728":"code","9bc5af0e":"code","c13909be":"code","d9a4636d":"code","aac0085c":"markdown","7c1a7ecd":"markdown","34edb043":"markdown","de8fb4c8":"markdown","c21929ae":"markdown"},"source":{"a9dee052":"##### import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import preprocessing\nfrom sklearn import datasets\nfrom sklearn.externals import joblib\nfrom skimage.feature import hog\nfrom sklearn.svm import LinearSVC,SVC\nimport numpy as np\nfrom collections import Counter\nfrom sklearn.metrics import classification_report\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.decomposition import PCA\n","ad77c1b0":"\n# load data from csv files\ntrain = pd.read_csv('..\/input\/Kannada-MNIST\/train.csv')\ntest_df = pd.read_csv('..\/input\/Kannada-MNIST\/test.csv')\ndig = pd.read_csv('..\/input\/Kannada-MNIST\/Dig-MNIST.csv')\n\n\ntrain_df=train.append(dig)\nprint(train_df.shape, test_df.shape, dig.shape)","dd6cb95b":"features = np.array(train_df.drop('label',axis=1), 'int16')\nlabels = np.array(train_df.label, 'int')\n# train original data","e40b8728":"b = np.dot ( np.linalg.inv( np.dot( features.T, features) )  ,  np.dot( features.T, labels ) )\n\nb","9bc5af0e":"b = np.dot(np.linalg.pinv(features),labels)\nb","c13909be":"predict = np.round( np.dot(  features,b ),0  ).astype('int')\nnp.mean(predict==labels)","d9a4636d":"    predi = np.round( np.dot(  test_df.values[:,1:],b ),0  ).astype('int') \n    submission = pd.DataFrame({ 'id': test_df.id,'label': predi })\n    submission.to_csv(path_or_buf =\"MNIST_pca_svc.csv\", index=False)\n    submission","aac0085c":"# indead 23%","7c1a7ecd":"# the training data predict\n27% corrrect, so probably the result will be very bad compared with the AI solutions","34edb043":"    pca =PCA(n_components=0.8,random_state=0,whiten=True)\n    total_pca =pca.fit_transform(train_df.drop('label',axis=1).append(test_df.drop('id',axis=1)))\n    print(total_pca.shape)\n    clf = SVC()\n    clf.fit(total_pca[:len(features)], labels)\n    print(classification_report(labels,clf.predict(total_pca[:len(features)])))","de8fb4c8":"# singular\nso not regressable without pseudoinverse","c21929ae":"# **Let's  try regression, why not ?**\n\n"}}