{"cell_type":{"916493a4":"code","ccafd2cc":"code","12195dd6":"code","f73d4467":"code","fe461030":"code","b530af7e":"code","11fdef55":"code","7104e334":"code","eb700c29":"code","bfbc1016":"code","ff43d8eb":"code","e4e8f0a9":"code","0e1c42b2":"code","389c413e":"code","77ddf8b6":"code","212b06bf":"code","179a2a16":"code","e204eeff":"code","52cb1d10":"code","3ccdc925":"code","d24bdf12":"code","3e6a0207":"code","6ecdfb4e":"code","8b128dc0":"code","f5a84361":"code","dee2e5ae":"code","bdd8afe1":"code","01e0d034":"code","b1f46d1a":"code","391ee67e":"code","c883b00c":"code","95596cb0":"code","ab0db08c":"code","53a50578":"markdown","cb7db5fb":"markdown","18b4ed93":"markdown","1dfea58e":"markdown","e2ac2fcc":"markdown","d1b42e47":"markdown","b7c672a6":"markdown","83a6022b":"markdown","2917a136":"markdown","16b25a32":"markdown","bd6adc9a":"markdown","0c13c730":"markdown","cf6b897f":"markdown","0de76898":"markdown","669737e9":"markdown","934bf2de":"markdown","7a2cf7cc":"markdown","0ce93150":"markdown","f88a8fd1":"markdown","4403c761":"markdown","ebae767a":"markdown","a06a012c":"markdown","eb1d9dc6":"markdown","1db8d9c2":"markdown","ad89d982":"markdown","43a9aa00":"markdown"},"source":{"916493a4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline,make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn import model_selection\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#import train and test data\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ndataset = pd.concat([train, test], ignore_index = True)\n#Retrieve Passenger ID from test set, used for submission\nPassengerId = test['PassengerId']","ccafd2cc":"dataset = dataset.fillna(np.nan)\ndataset.isnull().sum()","12195dd6":"#Check missing values in train set\ntrain.info()\ntrain.isnull().sum()","f73d4467":"# check the first five information of the train set\ntrain.head()","fe461030":"# Check the data types of every column\ntrain.dtypes","b530af7e":"# Generate descriptive statistics that summarize the central tendency, dispersion and shape of a dataset's distribution\ntrain.describe()","11fdef55":"sns.barplot(x=\"Sex\", y=\"Survived\", data=train, palette='Set3')\nprint(\"Percentage of females that could survive: %.2f\" %(train['Survived'][train['Sex'] == 'female'].value_counts(normalize = True)[1]*100))\nprint(\"Percentage of females that could survive: %.2f\" %(train['Survived'][train['Sex'] == 'male'].value_counts(normalize = True)[1]*100))","7104e334":"sns.barplot(x='Pclass', y='Survived', data=train, palette='Set3')\nprint(\"Percentage of Pclass = 1, survived probability: %.2f\" %(train['Survived'][train['Pclass']==1].value_counts(normalize = True)[1]*100))\nprint(\"Percentage of Pclass = 2, survived probability: %.2f\" %(train['Survived'][train['Pclass']==2].value_counts(normalize = True)[1]*100))\nprint(\"Percentage of Pclass = 3, survived probability: %.2f\" %(train['Survived'][train['Pclass']==3].value_counts(normalize = True)[1]*100))\n","eb700c29":"sns.barplot(x=\"SibSp\", y=\"Survived\", data=train, palette='Set3')","bfbc1016":"sns.barplot(x=\"Parch\", y=\"Survived\", data=train, palette='Set3')","ff43d8eb":"age = sns.FacetGrid(train, hue=\"Survived\",aspect=2)\nage.map(sns.kdeplot,'Age',shade= True)\nage.set(xlim=(0, train['Age'].max()))\nage.add_legend()","e4e8f0a9":"fare = sns.FacetGrid(train, hue=\"Survived\",aspect=2)\nfare.map(sns.kdeplot,'Fare',shade= True)\nfare.set(xlim=(0, 200))\nfare.add_legend()","0e1c42b2":"dataset['Title'] = dataset['Name'].apply(lambda x:x.split(',')[1].split('.')[0].strip())\nTitle_Dict = {}\nTitle_Dict.update(dict.fromkeys(['Capt', 'Col', 'Major', 'Dr', 'Rev'], 'Officer'))\nTitle_Dict.update(dict.fromkeys(['Don', 'Sir', 'the Countess', 'Dona', 'Lady'], 'Royalty'))\nTitle_Dict.update(dict.fromkeys(['Mme', 'Ms', 'Mrs'], 'Mrs'))\nTitle_Dict.update(dict.fromkeys(['Mlle', 'Miss'], 'Miss'))\nTitle_Dict.update(dict.fromkeys(['Mr'], 'Mr'))\nTitle_Dict.update(dict.fromkeys(['Master','Jonkheer'], 'Master'))\ndataset['Title'] = dataset['Title'].map(Title_Dict)\nsns.barplot(x=\"Title\", y=\"Survived\", data=dataset, palette='Set3')","389c413e":"dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1\nsns.barplot(x=\"FamilySize\", y=\"Survived\", data=dataset, palette='Set3')","77ddf8b6":"# Based on the family size, classify them into three groups\ndef Family_label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 7)) | (s == 1):\n        return 1\n    elif (s > 7):\n        return 0\ndataset['FamilyLabel']=dataset['FamilySize'].apply(Family_label)\nsns.barplot(x=\"FamilyLabel\", y=\"Survived\", data=dataset, palette='Set3')","212b06bf":"dataset['Cabin'] = dataset['Cabin'].fillna('Unknown')\ndataset['Deck']= dataset['Cabin'].str.get(0)\nsns.barplot(x=\"Deck\", y=\"Survived\", data=dataset, palette='Set3')","179a2a16":"Ticket_Count = dict(dataset['Ticket'].value_counts())\ndataset['TicketGroup'] = dataset['Ticket'].apply(lambda x:Ticket_Count[x])\nsns.barplot(x='TicketGroup', y='Survived', data=dataset, palette='Set3')","e204eeff":"# Classify the TicketGroup into three kinds\ndef Ticket_Label(s):\n    if (s >= 2) & (s <= 4):\n        return 2\n    elif ((s > 4) & (s <= 8)) | (s == 1):\n        return 1\n    elif (s > 8):\n        return 0\n\ndataset['TicketGroup'] = dataset['TicketGroup'].apply(Ticket_Label)\nsns.barplot(x='TicketGroup', y='Survived', data=dataset, palette='Set3')","52cb1d10":"# Fill the missing age value, use feature Pclass, Sex and Title and random forest regressor model to predict \nage = dataset[['Age','Pclass','Sex','Title']]\nage = pd.get_dummies(age)\n# print(age)\nknown_age = age[age.Age.notnull()].as_matrix()\nnull_age = age[age.Age.isnull()].as_matrix()\nx = known_age[:, 1:]\ny = known_age[:, 0]\nrf = RandomForestRegressor(n_jobs=-1)\nrf.fit(x, y)\npredictedAge = rf.predict(null_age[:, 1:])\ndataset.loc[(dataset.Age.isnull()),'Age'] = predictedAge","3ccdc925":"dataset[dataset['Embarked'].isnull()]","d24bdf12":"C = dataset[(dataset['Embarked']=='C') & (dataset['Pclass'] == 1)]['Fare'].median()\nprint(C)\nS = dataset[(dataset['Embarked']=='S') & (dataset['Pclass'] == 1)]['Fare'].median()\nprint(S)\nQ = dataset[(dataset['Embarked']=='S') & (dataset['Pclass'] == 1)]['Fare'].median()\nprint(Q)\ndataset['Embarked'] = dataset['Embarked'].fillna('C')","3e6a0207":"dataset[dataset['Fare'].isnull()]","6ecdfb4e":"fare=dataset[(dataset['Embarked'] == \"S\") & (dataset['Pclass'] == 3)].Fare.median()\ndataset['Fare']=dataset['Fare'].fillna(fare)","8b128dc0":"dataset['Surname']=dataset['Name'].apply(lambda x:x.split(',')[0].strip())\nSurname_Count = dict(dataset['Surname'].value_counts())\ndataset['FamilyGroup'] = dataset['Surname'].apply(lambda x:Surname_Count[x])\nFemale_Child_Group=dataset.loc[(dataset['FamilyGroup']>=2) & ((dataset['Age']<=12) | (dataset['Sex']=='female'))]\nMale_Adult_Group=dataset.loc[(dataset['FamilyGroup']>=2) & (dataset['Age']>12) & (dataset['Sex']=='male')]","f5a84361":"Female_Child=pd.DataFrame(Female_Child_Group.groupby('Surname')['Survived'].mean().value_counts())\nFemale_Child.columns=['GroupCount']\nFemale_Child","dee2e5ae":"Male_Adult=pd.DataFrame(Male_Adult_Group.groupby('Surname')['Survived'].mean().value_counts())\nMale_Adult.columns=['GroupCount']\nMale_Adult","bdd8afe1":"Female_Child_Group=Female_Child_Group.groupby('Surname')['Survived'].mean()\nDead_List=set(Female_Child_Group[Female_Child_Group.apply(lambda x:x==0)].index)\nprint(Dead_List)\nMale_Adult_List=Male_Adult_Group.groupby('Surname')['Survived'].mean()\nSurvived_List=set(Male_Adult_List[Male_Adult_List.apply(lambda x:x==1)].index)\nprint(Survived_List)","01e0d034":"train=dataset.loc[dataset['Survived'].notnull()]\ntest=dataset.loc[dataset['Survived'].isnull()]\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Sex'] = 'male'\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Age'] = 60\ntest.loc[(test['Surname'].apply(lambda x:x in Dead_List)),'Title'] = 'Mr'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Sex'] = 'female'\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Age'] = 5\ntest.loc[(test['Surname'].apply(lambda x:x in Survived_List)),'Title'] = 'Miss'","b1f46d1a":"dataset = pd.concat([train, test])\ndataset=dataset[['Survived','Pclass','Sex','Age','Fare','Embarked','Title','FamilyLabel','Deck','TicketGroup']]\ndataset=pd.get_dummies(dataset)\ntrainset=dataset[dataset['Survived'].notnull()]\ntestset=dataset[dataset['Survived'].isnull()].drop('Survived',axis=1)\nX = trainset.as_matrix()[:,1:]\nY = trainset.as_matrix()[:,0]","391ee67e":"pipe=Pipeline([('select',SelectKBest(k=20)), \n               ('classify', RandomForestClassifier(random_state = 10, max_features = 'sqrt'))])\n\nparam_test = {'classify__n_estimators':list(range(20,50,2)), \n              'classify__max_depth':list(range(3,60,3))}\ngsearch = GridSearchCV(estimator = pipe, param_grid = param_test, scoring='accuracy', cv=10)\ngsearch.fit(X,Y)\nprint(gsearch.best_params_, gsearch.best_score_)","c883b00c":"select = SelectKBest(k = 20)\nclf = RandomForestClassifier(random_state = 10, warm_start = True, \n                                  n_estimators = 26,\n                                  max_depth = 6, \n                                  max_features = 'sqrt')\npipeline = make_pipeline(select, clf)\npipeline.fit(X, Y)","95596cb0":"cv_score = model_selection.cross_val_score(pipeline, X, Y, cv= 10)\nprint(\"CV Score : Mean - %.7g | Std - %.7g \" % (np.mean(cv_score), np.std(cv_score)))","ab0db08c":"predictions = pipeline.predict(testset)\nsubmission = pd.DataFrame({\"PassengerId\": PassengerId, \"Survived\": predictions.astype(np.int32)})\nsubmission.to_csv(\"submission.csv\", index=False)","53a50578":"## TicketGroup Feature\nCalculate the number of passengers who has the same ticket number\nWe can see that 2-4 passengers own the same ticket number have higher survival rate.\nClassify them into three kinds.","cb7db5fb":"Add a new feature Title\n## Title Feature\nRetrieve the title from passengers name, classify them into six kinds, which are officer, royalty, Mrs, Miss, Mr, and Master.\nMrs, Miss and Royalty have higher survival rate than other titles.","18b4ed93":"## Parch Feature \nWith a suitable number of parents and children, he\/she will have a high survival rate.","1dfea58e":"## Fare feature\nThere is only one missing values in the data set. Use the median of fare that Embarked == S and Pclass == 3.","e2ac2fcc":"## Fare Feature\nPassengers who paid higher fare had higher survival rate.","d1b42e47":"Cross Validation","b7c672a6":"## Embarked feature \nThere are only 2 missing values in the Embarked feature. The passengers who misses Embarked information all have Pclass == 1, and Fare == 80. Calculate the median of fare that Pclass == 1 and Embarked == S, C, Q, respectively.\nSince the median that Embarked == C has the closest fare. Fill the missing value of Embarked as C.","83a6022b":"Most of the man groups' average survival rate are 0 or 1.","2917a136":"# Data visualization\n## Sex Feature\nfemale has higher survival rate than male.","16b25a32":"# Preparation\nImport necessary library and load the train and test data","bd6adc9a":"# Fill the missing values\n## Age feature\nFrom the previous process, there are 263 missing values in the whole data set. Using Sex, Title and Pclass feature construct the Random Forest model to fill the missing values of age.","0c13c730":"# Model training and prediction\nUse grid search to find the best parameter of random forest classifier.","cf6b897f":"Retrieve the surname of the passenger, classify the passengers into the same group if they have the same surname. Retrieve the number of female, male and child from the groups that have more than one person.","0de76898":"From the result, Age and Cabin have a lot of missing values","669737e9":"Select Survived, Pclass, Sex, Age, Fare, Embarked, Title, FamilyLabel, Deck and TicketGroup as features and transfer the features into numerial values.\nGet trainset and testset based on whether the value of Survived is null or not.","934bf2de":"In order to classify the samples in these two outliers groups, modigy the Age, Title and Sex of the samples in these two groups.","7a2cf7cc":"## Age Feature\nChild and adolecent will have a higher survival rate","0ce93150":"## Deck Feature\nAdd Deck feature:\nFill the missing cabin as Unknown\nRetrieve the capital words as Deck number","f88a8fd1":"Most of the average survival rate of female and chile group  are 1 or 0, which means that the women or children in the same group all survive, or all die.","4403c761":"## FamilyLabel\nAdd new feature FamilyLabel\nCalculate the family size = Sibsp+Parch+1\nWe can see that middle size family has higher survival rate.\nClassify the family size into three kinds, which are middle size(2-4), small or large size(1 or 5-7) and larger size( >7 ).","ebae767a":"## SibSp Feature\nWith a suitable number of siblings and spouse, he\/she will have a high survival rate.","a06a012c":"Make prediction and output the result as submission.csv","eb1d9dc6":"Check null values and missing values","1db8d9c2":"The best parameters I got from grid search is n_estimators = 22, max_depth = 6. But I tried n_estimators = 24, 26, 28, respectively. I got higher cross validation score and kaggle score when n_estimators = 26, max_depth = 6.\nTrain the random forest classifier model using the parameters.","ad89d982":"From previous process, a conclusion can be drawn that women and children have high survival rate, while men have lower survival rate. We retrieve the outliers to process. We set a dead group that women and children group have 0 survival rate. And set survived group for the men's group whose survival rate is 1. We can guess that in dead group, women and children have lower survival rate. In survival group, men have higher survival rate.","43a9aa00":"## Pclass feature\nThe higher the class is, the high probability survive"}}