{"cell_type":{"afcebbe9":"code","2f949e6c":"code","42e44e7c":"code","9ebd10d8":"code","1abe7a66":"code","6ed7332d":"code","3d848bc8":"code","b459a187":"code","3ea24ad3":"code","e64cddb0":"code","ef56c2da":"code","4640012d":"code","14dd5499":"code","5c97d4d8":"code","8e76f93c":"code","920693ae":"code","9b9ef071":"code","de42d9b1":"code","f939aada":"code","7fccd986":"code","9f74c9d7":"markdown","be47d57b":"markdown","035aec6f":"markdown","0a92d42f":"markdown","6fa6a026":"markdown","9770c965":"markdown","285280d9":"markdown","c8b6de38":"markdown","ee5e28b0":"markdown","f0f5f86c":"markdown","7222ba55":"markdown","910b4747":"markdown","37bbec01":"markdown","673f68a9":"markdown","2bdca596":"markdown","60d6372a":"markdown","204ae9f3":"markdown","54f7b5df":"markdown"},"source":{"afcebbe9":"!pip install kaggle-environments>=0.1.6","2f949e6c":"from kaggle_environments import make, evaluate, utils, agent\nimport random\nimport numpy as np\nimport os\nimport inspect","42e44e7c":"env=make(\"connectx\",debug=True)\nenv.render()","9ebd10d8":"# Gets board at next step if agent drops piece in selected column\ndef drop_piece(grid, col, piece, config):\n    next_grid = grid.copy()\n    for row in range(config.rows-1, -1, -1):\n        if next_grid[row][col] == 0:\n            break\n    next_grid[row][col] = piece\n    return next_grid\n\n# Returns True if dropping piece in column results in game win\ndef check_winning_move(obs, config, col, piece):\n    # Convert the board to a 2D grid\n    grid = np.asarray(obs.board).reshape(config.rows, config.columns)\n    next_grid = drop_piece(grid, col, piece, config)\n    # horizontal\n    for row in range(config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[row,col:col+config.inarow])\n            if window.count(piece) == config.inarow:\n                return True\n    # vertical\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns):\n            window = list(next_grid[row:row+config.inarow,col])\n            if window.count(piece) == config.inarow:\n                return True\n    # positive diagonal\n    for row in range(config.rows-(config.inarow-1)):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    # negative diagonal\n    for row in range(config.inarow-1, config.rows):\n        for col in range(config.columns-(config.inarow-1)):\n            window = list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])\n            if window.count(piece) == config.inarow:\n                return True\n    return False","1abe7a66":"def my_agent(obs, config):\n    opponent_piece = 1 if obs.mark == 2 else 2\n    choice = []\n    for col in range(config.columns):\n        if check_winning_move(obs,config,col,obs.mark):\n            return col\n        elif check_winning_move(obs,config,col,opponent_piece):\n            choice.append(col)\n    if len(choice):\n        return random.choice(choice)\n    valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]\n    return random.choice(valid_moves)","6ed7332d":"env.reset()\nenv.run([my_agent,\"random\"])\nenv.render(mode=\"ipython\",width=500,height=500)","3d848bc8":"env.reset()\nenv.run([\"random\",my_agent])\nenv.render(mode=\"ipython\",width=500,height=500)","b459a187":"env.reset()\nenv.run([my_agent,\"negamax\"])\nenv.render(mode=\"ipython\",width=500,height=500)","3ea24ad3":"env.reset()\nenv.run([\"negamax\",my_agent])\nenv.render(mode=\"ipython\",width=500,height=500)","e64cddb0":"def win_percentage(player,opponent,num_episodes=10):\n    episodes = num_episodes\/\/2\n    outcomes = evaluate(\"connectx\",[player,opponent],num_episodes=episodes)\n    outcomes += [[b,a] for [a,b] in evaluate(\"connectx\",[opponent,player],num_episodes=num_episodes-episodes)]\n    wins = outcomes.count([1,-1])\n    losses = outcomes.count([-1,1])\n    return (np.sum(wins) \/ len(outcomes))*100","ef56c2da":"random_mean_reward = win_percentage(my_agent,\"random\",num_episodes=10)\nnegamax_mean_reward = win_percentage(my_agent,\"negamax\",num_episodes=10)","4640012d":"print(\"My Agent V\/S Random Agent \", random_mean_reward,\"%\")\nprint(\"My Agent V\/S Negamax Agent \",negamax_mean_reward,\"%\")","14dd5499":"env.play([my_agent,None],width=500,height=500)","5c97d4d8":"submission_file=\"submission.py\"","8e76f93c":"if os.path.exists(submission_file):\n    os.remove(submission_file)","920693ae":"def write_agent_dependencies(file,dependencies):\n    with open(file,\"a\" if os.path.exists(file) else \"w\") as f:\n        for dependency in dependencies:\n            f.write(f\"import {dependency}\\n\")\n        print(f\"depedencies written to {file}\")\n    \ndef write_function_to_file(file,function):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(\"\")\n        f.write(inspect.getsource(function))\n        print(f\"function written to {file}\")","9b9ef071":"dependencies=[\"numpy as np\",\"random\"]","de42d9b1":"write_agent_dependencies(\"submission.py\",dependencies)\nwrite_function_to_file(\"submission.py\",drop_piece)\nwrite_function_to_file(\"submission.py\",check_winning_move)\nwrite_function_to_file(\"submission.py\",my_agent)","f939aada":"with open(\"submission.py\",\"r\") as f:\n    print(f.read())","7fccd986":"import sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nsys.stdout = out\nsaved_agent = agent.get_last_callable(submission)\nenv = make(\"connectx\", debug=True)\nenv.run([saved_agent, saved_agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","9f74c9d7":"### evaluation against agent that drops piece at random as player 1","be47d57b":"# Calculating Win percentage\n\n- against random and negamax agent\n\n*evaluate function* is used to get rewards which are of form list of list ([[1,-1],[1,-1]-----]]) 1 denote *win* while -1 denote *loose* and None denote *no-result*\n\nHere, first we find winning record when player 1 is our agent and then find winning record when our agent is playing as player 2. This ensure that plays are fair ","035aec6f":"remove previously created submission file","0a92d42f":"# Creating an agent\n\nwe create an agent in form of a function that takes two parameters:\n\n1. observation: has recent board information like current board configuration after move.\n2. configuration: which has board configuration like number of columns, rows, number of rows to match\n\nIn this function an agent is created that works as follow:\n\n- if winning move then return that column that leads to winning move\n- blocks winning move of opponent\n- if above two rules do not follow then drop piece at random column","6fa6a026":"### evaluation against agent that drops piece using negamax as player 2","9770c965":"# Evaluating agent","285280d9":"# Play against the agent","c8b6de38":"### Helper Functions for writing code to a file\n\n- write_agent_dependencies: write all dependencies to python file\n- write_function_to_file: write function code to file","ee5e28b0":"### evaluation against agent that drops piece using negamax as player 1","f0f5f86c":"`Note: submission file should be a python file with the last 'def' accepting an observation and returning an action`\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).\n\nWhen agent is being evaluated against others, it will not have access to the Kaggle docker image. Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\nwriting `submission.py` file\n\n- write all dependencies\n- write all function dependencies to file\n- write agent function to file","7222ba55":"# Installing Environment","910b4747":"# Importing Dependencies\n\n- kaggle environment\n- random\n- numpy\n- os\n- inspect","37bbec01":"# Instantiating Game environment\n\nmaking game environment for *connectx* using *make function* of kaggle environment ","673f68a9":"# Validating submission file\n\nThis is to check if submission file is working properly or not ie.. agent function is encapsulated with all dependencies function are included or not.\nIt we submit a non encapsulated agent file we will get *validation error* ","2bdca596":"# Creating Submission file","60d6372a":"# Helper Functions\n\n- drop_piece: return grid status after player drops a piece\n- check_winning_move : used to check if dropping a piece in a column of board leads to a winning move or not","204ae9f3":"define required dependencies here","54f7b5df":"### evaluation against agent that drops piece at random as player 2"}}