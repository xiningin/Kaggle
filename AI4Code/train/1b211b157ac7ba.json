{"cell_type":{"798a3f50":"code","20b2e9b3":"code","4e7c2b34":"code","1957a30e":"code","fc290745":"code","282f453e":"code","98909110":"code","9f424fb1":"code","0ee06b9a":"code","26b7027b":"code","c0a98c6d":"code","8827a7b5":"code","be41ec43":"code","29392e72":"code","aa530c51":"code","475e8156":"code","5a9faf58":"code","f779047e":"code","c9910200":"code","6da89df7":"code","fe0559e2":"code","678d17be":"code","bd944093":"code","f759f7d7":"code","002e06fd":"code","b677c0d6":"code","2d085a98":"code","2b213e99":"code","cb7d0fab":"code","d5bb7c43":"code","9585088e":"code","4559d695":"code","94a1a913":"code","85ad42a2":"code","5766fdea":"code","8f7a4ddb":"markdown","85216206":"markdown","9566c52f":"markdown","b3f97309":"markdown","aa9c845e":"markdown","8cbd9f9a":"markdown"},"source":{"798a3f50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","20b2e9b3":"! pip install gdown","4e7c2b34":"import gdown","1957a30e":"url = 'https:\/\/drive.google.com\/u\/0\/uc?id=1iTDWddtS24J1phkjBmcG4mGEdXzj7P5t&export=download'\noutput = 'new-data.zip'\ngdown.download(url, output, quiet=False)","fc290745":"!apt install -y p7zip-full","282f453e":"!7z x -y .\/new-data.zip","98909110":"import os\nprint(len(os.listdir('.\/img-classes\/img')))\nprint(os.listdir('.\/img-classes'))","9f424fb1":"from fastai.vision.all import *\nimport gc ","0ee06b9a":"PATH = \".\/img-classes\/\"\nTRAIN_PATH = \".\/img-classes\/multilabel-train.csv\"\nTEST_PATH = \".\/img-classes\/multilabel-test.csv\"\nCLASSES_PATH = \".\/img-classes\/classes.txt\"","26b7027b":"train_df = pd.read_csv(TRAIN_PATH)\ntrain_df.head()","c0a98c6d":"train_df.shape","8827a7b5":"def get_x(r): \n    p = '\/'.join(r['image_name'].split('\\\\'))\n    return PATH+p\ndef get_y(r): \n    return r['labels'].split(',')","be41ec43":"for i, r in train_df.iterrows():\n    path = get_x(r)\n    if not os.path.isfile(path):\n        train_df.drop(i, inplace=True)","29392e72":"train_df.shape","aa530c51":"train_df.reset_index(inplace = True)","475e8156":"def splitter(df):\n    train = df.index[df['is_valid']==0].tolist()\n    valid = df.index[df['is_valid']==1].tolist()\n    return train,valid","5a9faf58":"dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   splitter=splitter,\n                   get_x=get_x, \n                   get_y=get_y,\n                   item_tfms=RandomResizedCrop(224, min_scale=0.8),\n                   batch_tfms=aug_transforms())\n\ndls = dblock.dataloaders(train_df, num_workers=0)","f779047e":"dls.show_batch(nrows=1, ncols=6)","c9910200":"dsets = dblock.datasets(train_df)","6da89df7":"dls.vocab","fe0559e2":"from sklearn.metrics import fbeta_score","678d17be":"metrics=[FBetaMulti(2.0, 0.2, average='samples'), partial(accuracy_multi, thresh=0.2)]","bd944093":"learn = cnn_learner(dls, resnet34, loss_func=BCEWithLogitsLossFlat(thresh=0.2), metrics=metrics)","f759f7d7":"learn.fine_tune(5)\nlearn.save('atr-recognition-stage-1-resnet34')","002e06fd":"learn.unfreeze()\nlearn.lr_find()","b677c0d6":"learn.fit_one_cycle(8, lr_max=slice(1e-6, 1e-5))","2d085a98":"learn.recorder.plot_loss()","2b213e99":"learn.save('atr-recognition-stage-2-resnet34')\n\nmodelname = learn.model\nmodelname.cpu()\ntorch.save(modelname, 'atr-recognition-stage-2-resnet34.pkl')\n\nwith open(CLASSES_PATH, 'w') as f:\n    for item in dls.vocab:\n        f.write(\"%s\\n\" % item)","cb7d0fab":"plt.plot(L(learn.recorder.values).itemgot(2))","d5bb7c43":"learn.show_results()","9585088e":"test_df = pd.read_csv(TEST_PATH)\ntest_df.head()","4559d695":"dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock),\n                   get_x=get_x, \n                   get_y=get_y,\n                   item_tfms=Resize(224)) # Not Sure)\n\ntest_dls = dblock.dataloaders(test_df, num_workers=0)","94a1a913":"test_dls.show_batch(nrows=1, ncols=6)","85ad42a2":"learn.data = test_dls\nlearn.validate()","5766fdea":"learn.show_results(figsize=(12,12))","8f7a4ddb":"## Imports","85216206":"FBeta is a generalisation of F-score. While F-score is defined as the harmonic mean of precision and recall and gives each the same weight, FBeta adds a configuration parameter called beta. The beta parameter determines the weight of recall in the combined score. beta < 1 lends more weight to precision, while beta > 1 favors recall (beta -> 0 considers only precision, beta -> +inf only recall).","9566c52f":"## Training","b3f97309":"# Modelling","aa9c845e":"## Fine tuning","8cbd9f9a":"# Data Aquisition"}}