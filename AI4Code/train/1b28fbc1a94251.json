{"cell_type":{"8eb2ca4a":"code","12c7c34a":"code","1dd7f91a":"code","99ec927c":"code","c9ed961b":"code","4394de2d":"code","bf53c198":"code","4237e95b":"code","ed9c0b05":"code","44ba952b":"code","1656d39c":"code","98aacc4e":"code","b19d7225":"code","9cd0c80b":"code","99f1dbb8":"code","5f9efa14":"code","7c98207c":"code","80096d12":"code","4f771a82":"code","00a7be39":"code","98bfe052":"code","3182941d":"code","c8fd924c":"code","9c650eba":"code","1a35d1d2":"code","ef4e5923":"code","3f10168c":"code","0982a35f":"code","f785cbd5":"code","7de2218d":"code","e8c892c4":"code","7f28f243":"code","abb03f1d":"code","9145c5d3":"code","e1e18e4e":"code","9ff9baf0":"code","7dab0676":"code","3adb7046":"code","bab74a1f":"code","89e48ba6":"code","4d9253c1":"code","4ffaad4a":"code","cd04d543":"code","b203d956":"code","b5f4c439":"code","f1146ed3":"code","f97c4cdb":"code","4cd7a59f":"markdown","ba737345":"markdown","f9525863":"markdown","4f5a7b74":"markdown","c5519aa3":"markdown","b52f309d":"markdown","84b7b183":"markdown","80047f41":"markdown","2799d848":"markdown","67cf424f":"markdown","958455b5":"markdown","2c899d9f":"markdown","48705acc":"markdown","5384b254":"markdown","8514a501":"markdown","ea894868":"markdown","a5d3c89a":"markdown","ec89a509":"markdown","ab3c61a9":"markdown","a03baac9":"markdown","9ca3c01b":"markdown","0e2f0e4a":"markdown"},"source":{"8eb2ca4a":"import numpy as np\nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","12c7c34a":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.style.use('seaborn-darkgrid')\nnp.random.seed(42)\n\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, RandomizedSearchCV\nfrom sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","1dd7f91a":"train_data = pd.read_csv('..\/input\/black-friday-sales-prediction\/train_oSwQCTC (1)\/train.csv')\ntest_data = pd.read_csv('..\/input\/black-friday-sales-prediction\/test_HujdGe7 (1)\/test.csv')\ntrain_data.columns = train_data.columns.str.strip().str.lower().str.replace(' ', '_')\ntest_data.columns = test_data.columns.str.strip().str.lower().str.replace(' ', '_')\nprint('Train Data shape: ', train_data.shape)\ntrain_data.head()","99ec927c":"train_data.info()","c9ed961b":"train_data.describe()","4394de2d":"train_data.isnull().sum()","bf53c198":"Total = train_data.isnull().sum().sort_values(ascending=False)          \nPercent = (train_data.isnull().sum()*100\/train_data.isnull().count()).sort_values(ascending=False)   \n\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data","4237e95b":"train_data['type'] = 'train'\ntest_data['type'] = 'test'\n\nmaster_data = pd.concat([train_data, test_data])\nmaster_data.head()","ed9c0b05":"plt.figure(1)\nplt.subplot(121)\nsns.distplot(master_data[\"purchase\"]);\n\nplt.subplot(122)\nmaster_data[\"purchase\"].plot.box(figsize = (16, 6))\nplt.show()","44ba952b":"plt.figure(figsize = (10, 5))\nprint(master_data[\"gender\"].value_counts())\nmaster_data['gender'].value_counts(normalize = True).plot.bar(title = 'Gender')","1656d39c":"plt.figure(figsize = (10, 5))\nprint(master_data[\"age\"].value_counts())\nmaster_data['age'].value_counts(normalize = True).plot.bar(title = 'Age')","98aacc4e":"plt.figure(figsize = (10, 5))\nprint(master_data[\"stay_in_current_city_years\"].value_counts())\nmaster_data['stay_in_current_city_years'].value_counts(normalize = True).plot.bar(title = 'Stay in current city - Years')","b19d7225":"plt.figure(figsize = (10, 5))\nprint(master_data[\"occupation\"].value_counts())\nmaster_data['occupation'].value_counts(normalize = True).plot.bar(title = 'Occupation')","9cd0c80b":"plt.figure(figsize = (10, 5))\nprint(master_data[\"city_category\"].value_counts())\nmaster_data['city_category'].value_counts(normalize = True).plot.bar(title = 'City Category')","99f1dbb8":"plt.figure(figsize = (10, 5))\nprint(master_data[\"marital_status\"].value_counts())\nmaster_data['marital_status'].value_counts(normalize = True).plot.bar(title = 'Martial Status')","5f9efa14":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_1\"].value_counts())\nmaster_data['product_category_1'].value_counts(normalize = True).plot.bar(title = 'Product Category 1')","7c98207c":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_2\"].value_counts())\nmaster_data['product_category_2'].value_counts(normalize = True).plot.bar(title = 'Product Category 2')","80096d12":"plt.figure(figsize = (10, 5))\nprint(master_data[\"product_category_3\"].value_counts())\nmaster_data['product_category_3'].value_counts(normalize = True).plot.bar(title = 'Product Category 3')","4f771a82":"plt.figure(figsize = (12, 6))\nprod_by_cat = master_data.groupby('product_category_1')['product_id'].nunique()\n\nsns.barplot(x = prod_by_cat.index,y = prod_by_cat.values)\nplt.title('Number of Unique Items per Category')\nplt.show()","00a7be39":"plt.figure(figsize = (10, 5))\nsns.violinplot(x = 'city_category', y = 'purchase', hue = 'marital_status', data = master_data)","98bfe052":"plt.figure(figsize = (10, 5))\nsns.countplot(master_data[\"gender\"], hue = master_data[\"age\"]).set_title(\"Age & Gender\")","3182941d":"plt.figure(figsize = (10, 5))\nx = master_data.groupby([\"gender\"]).mean()[[\"purchase\"]].index\ny = master_data.groupby([\"gender\"]).mean()[[\"purchase\"]].values\nplt.plot(x, y,\"ro\")\nplt.xticks(x, [\"male\", \"female\"])\nplt.title(\"Mean purchase of different gender\")\nsns.despine()","c8fd924c":"plt.figure(figsize = (10, 5))\nmaster_data.groupby(\"city_category\")[\"purchase\"].sum().plot.pie(title = \"City Categry\", \n                                                               startangle = 90, explode = (0.1, 0, 0), \n                                                               autopct = \"%1.1f%%\", shadow = True)","9c650eba":"plt.figure(figsize = (10, 5))\nx = master_data.groupby([\"city_category\"]).mean()[[\"purchase\"]].index\ny = master_data.groupby([\"city_category\"]).mean()[[\"purchase\"]].values\nplt.plot(x, y,\"ro\")\nplt.title(\"Mean purchase of different city categories\")","1a35d1d2":"plt.figure(figsize = (10, 5))\nmaster_data[\"stay_in_current_city_years\"].value_counts().plot.pie(title = \"Years of staying in the city\", \n                                                                 explode = (0.1, 0, 0, 0, 0), \n                                                                 autopct = \"%1.1f%%\", shadow = True)","ef4e5923":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\ntrain_data['user_id'] = train_data['user_id'] - 1000000\ntest_data['user_id'] = test_data['user_id'] - 1000000\n\nenc = LabelEncoder()\ntrain_data['user_id'] = enc.fit_transform(train_data['user_id'])\ntest_data['user_id'] = enc.transform(test_data['user_id'])","3f10168c":"train_data['product_id'] = train_data['product_id'].str.replace('P00', '')\ntest_data['product_id'] = test_data['product_id'].str.replace('P00', '')\n\nscaler = StandardScaler()\ntrain_data['product_id'] = scaler.fit_transform(train_data['product_id'].values.reshape(-1, 1))\ntest_data['product_id'] = scaler.transform(test_data['product_id'].values.reshape(-1, 1))","0982a35f":"categorical_col = ['gender', 'city_category']\nnumerical_col = ['age', 'occupation', 'stay_in_current_city_years', 'product_category_1', 'product_category_2', 'product_category_3']","f785cbd5":"train_data['age']=train_data['age'].replace('0-17',17)\ntrain_data['age']=train_data['age'].replace('18-25',25)\ntrain_data['age']=train_data['age'].replace('26-35',35)\ntrain_data['age']=train_data['age'].replace('36-45',45)\ntrain_data['age']=train_data['age'].replace('46-50',50)\ntrain_data['age']=train_data['age'].replace('51-55',55)\ntrain_data['age']=train_data['age'].replace('55+',60)","7de2218d":"test_data['age']=test_data['age'].replace('0-17',17)\ntest_data['age']=test_data['age'].replace('18-25',25)\ntest_data['age']=test_data['age'].replace('26-35',35)\ntest_data['age']=test_data['age'].replace('36-45',45)\ntest_data['age']=test_data['age'].replace('46-50',50)\ntest_data['age']=test_data['age'].replace('51-55',55)\ntest_data['age']=test_data['age'].replace('55+',60)","e8c892c4":"train_data['stay_in_current_city_years']=train_data['stay_in_current_city_years'].replace('4+',4)\ntest_data['stay_in_current_city_years']=test_data['stay_in_current_city_years'].replace('4+',4)","7f28f243":"train_data = train_data.fillna(0)\ntest_data = test_data.fillna(0)","abb03f1d":"encoder = LabelEncoder()\n\nfor col in categorical_col:\n    train_data[col] = encoder.fit_transform(train_data[col])\n    test_data[col] = encoder.transform(test_data[col])","9145c5d3":"scaler = StandardScaler()\n\nfor col in numerical_col:\n    train_data[col] = scaler.fit_transform(train_data[col].values.reshape(-1, 1))\n    test_data[col] = scaler.transform(test_data[col].values.reshape(-1, 1))","e1e18e4e":"train_data","9ff9baf0":"X_train.drop(['type'], axis = 1)","7dab0676":"X_val.drop(['type'], axis = 1)","3adb7046":"X = train_data.drop(['purchase','type'], axis=1)\ny = train_data[['purchase']]\nX_test = test_data\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=42, shuffle=True)","bab74a1f":"train_data.columns","89e48ba6":"train_data.drop(['type'], axis = 1)","4d9253c1":"y_train","4ffaad4a":"X_val.columns","cd04d543":"X_val.drop(['type'], axis = 1)","b203d956":"from sklearn import linear_model\nreg=linear_model.LinearRegression()\nlm_model=reg.fit(X_train,y_train)\npred=lm_model.predict(X_val)","b5f4c439":"np.sqrt(mean_squared_error(y_val,pred))","f1146ed3":"xgb_reg = XGBRegressor(learning_rate=1.0, max_depth=6, min_child_weight=40, seed=0)\n\nxgb_reg.fit(X_train, y_train)\ny_pred = xgb_reg.predict(X_val)\nrmse = np.sqrt(mean_squared_error(y_pred, y_val))\n\nprint (xgb_reg)","f97c4cdb":"rmse","4cd7a59f":"**26-35 age group people has the highest count**","ba737345":"**Data Preprocessing**","f9525863":"****XG Boost model is performing well with the above hyperparameters compared to Linear Regression.****","4f5a7b74":"**Almost all the city categories have equal proportion of males and females**","c5519aa3":"**Analytics Vidhya: Black Friday Sales Prediction**\n\nA retail company \u201cABC Private Limited\u201d wants to understand the customer purchase behaviour (specifically, purchase amount) against various products of different categories. They have shared purchase summary of various customers for selected high volume products from last month. The data set also contains customer demographics (age, gender, marital status, city_type, stay_in_current_city), product details (product_id and product category) and Total purchase_amount from last month.\n\nNow, they want to build a model to predict the purchase amount of customer against various products which will help them to create personalized offer for customers against different products.","b52f309d":"**Variables Definition**\n\nUser_ID- User ID\n\nProduct_ID - Product ID\n\nGender - Sex of User\n\nAge - Age in bins\n\nOccupation - Occupation (Masked)\n\nCity_Category - Category of the City (A,B,C)\n\nStay_In_Current_City_Years - Number of years stay in current city\n\nMarital_Status - Marital Status\n\nProduct_Category_1 - Product Category (Masked)\n\nProduct_Category_2 - Product may belongs to other category also (Masked)\n\nProduct_Category_3 - Product may belongs to other category also (Masked)\n\nPurchase - Purchase Amount (Target Variable)","84b7b183":"**Splitting the dataset**","80047f41":"**Category B city has the highest count**","2799d848":"**Checking for Null values**","67cf424f":"**26-35 age group people with respect to Males is the highest also females in that age group is also the highest.**","958455b5":"**Purchase has unequal distribution**","2c899d9f":"**There are more males than females**","48705acc":"**Imputing null values**","5384b254":"**Exploratory Data Analysis**","8514a501":"**Maximum people stay in current city for 1 year**","ea894868":"**Model Building**","a5d3c89a":"**We are getting an root mean square error of 2591.85.**","ec89a509":"**Category city C has the highest mean purchase.**","ab3c61a9":"**Scaling numerical columns**","a03baac9":"**Encoding categorical columns**","9ca3c01b":"**Maximum people have not married yet**","0e2f0e4a":"**Females have higher mean purchases compared to males**"}}