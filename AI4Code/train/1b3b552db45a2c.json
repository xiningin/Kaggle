{"cell_type":{"f41cec3f":"code","faed2bca":"code","854b0b44":"code","3230593f":"code","5000ba33":"code","05b68a6b":"code","700fdce4":"code","97f06988":"code","38d4fcd6":"code","ba7a07a3":"code","ec6e7201":"code","a37071a8":"code","ba1273de":"code","5b0e74e1":"code","144d24e4":"code","a2db9af8":"code","7fedee58":"code","82b3fd95":"code","079c8397":"code","c0c53362":"code","c8c49cc4":"code","3fd53985":"code","9aa015fa":"code","52a67e54":"code","ba780cfa":"code","9a0b130d":"code","42f984eb":"code","ac5e4619":"code","d1ee3e5d":"code","1fd25faa":"markdown","a084f6d0":"markdown","8b4b023a":"markdown","ecee1590":"markdown","c3ff809a":"markdown","f881c48f":"markdown","5d10f6c7":"markdown","3a4d6b77":"markdown","860bd4c7":"markdown","6badd0db":"markdown","6d675089":"markdown","786f92ce":"markdown","34ba7b82":"markdown","83539415":"markdown","a853ce27":"markdown","1c07caef":"markdown","273eef26":"markdown","758bcebf":"markdown","70357764":"markdown","d54ffddd":"markdown"},"source":{"f41cec3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","faed2bca":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nimport warnings \nwarnings.filterwarnings('ignore')","854b0b44":"df = pd.read_csv('..\/input\/diabetes-data-set\/diabetes.csv')","3230593f":"df.head()","5000ba33":"df.info()","05b68a6b":"df.describe()","700fdce4":"print(f'Total na values\\n\\n{df.isna().sum()}')","97f06988":"print(f'Total duplicated data: {df.duplicated().sum()}')","38d4fcd6":"corr = df.corr()\nfig = px.imshow(corr)\nfig.show()","ba7a07a3":"fig = make_subplots(cols=4, rows=2, subplot_titles=(df.columns))\n\nfig.add_trace(go.Box(x=df.Pregnancies), row=1, col=1)\nfig.add_trace(go.Box(x=df.Glucose), row=1, col=2)\nfig.add_trace(go.Box(x=df.BloodPressure), row=1, col=3)\nfig.add_trace(go.Box(x=df.SkinThickness), row=1, col=4)\n\nfig.add_trace(go.Box(x=df.Insulin), row=2, col=1)\nfig.add_trace(go.Box(x=df.BMI), row=2, col=2)\nfig.add_trace(go.Box(x=df.DiabetesPedigreeFunction), row=2, col=3)\nfig.add_trace(go.Box(x=df.Age), row=2, col=4)","ec6e7201":"fig, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(20,7))\nfig.suptitle('Outcome Comparison\\n', fontsize=20)\n\nax1.pie(df.Outcome.value_counts().values, labels=df.Outcome.value_counts().index, startangle=90, explode=(0.0, 0.1), shadow=True, autopct='%1.1f%%', wedgeprops={'edgecolor':'black'})\nsns.countplot(ax=ax2, data=df, x='Outcome', edgecolor='black')\n\nplt.tight_layout()","a37071a8":"mean_df = pd.DataFrame({'Age':sorted(df.Age.unique())})\n\nfor column in df.columns[:-2]:\n    grouper = df.groupby('Age')\n    column_name = 'Mean_' + column\n    \n    mean_df[column_name] = grouper[column].mean().values","ba1273de":"mean_df.head()","5b0e74e1":"fig = make_subplots(cols=2, rows=4, subplot_titles=mean_df.columns[1:])\n\nncol = 1\nnrow = 1\nfor i, column in zip(range(1,8), mean_df.columns[1:]):\n    if i % 2 == 0:\n        fig.add_trace(go.Line(x=mean_df.Age, y=mean_df[column]), col=ncol, row=nrow)\n        nrow += 1\n        ncol = 0\n    else:\n        fig.add_trace(go.Line(x=mean_df.Age, y=mean_df[column]), col=ncol, row=nrow)\n    ncol += 1\n\nfig.update_layout(height=1000)\nfig.show()","144d24e4":"fig = px.violin(df, x='Outcome', y='Age', box=True)\nfig.show()","a2db9af8":"from sklearn.impute import KNNImputer","7fedee58":"def impute(df):\n    impute_df = df[(df['Glucose'] == 0) | (df['BloodPressure'] == 0) | (df['BMI'] == 0)]\n    \n    imputer = KNNImputer(missing_values=0)\n    impute_values = imputer.fit_transform(impute_df[['Glucose', 'BloodPressure', 'BMI']]).tolist()\n    impute_indexes = impute_df.index.tolist()\n\n    for index, value in zip(impute_indexes, impute_values):\n        df.loc[index, ['Glucose', 'BloodPressure', 'BMI']] = value\n        \n    return df","82b3fd95":"cleaned_df = impute(df.copy())","079c8397":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler","c0c53362":"X = cleaned_df[cleaned_df.columns[:-1]]\ny = cleaned_df.Outcome\n\ntrain_x, test_x, train_y, test_y = train_test_split(X, y, test_size=0.25, random_state=1)","c8c49cc4":"scaler = StandardScaler()\n\nscaled_train_x = scaler.fit_transform(train_x)\nscaled_test_x = scaler.fit_transform(test_x)","3fd53985":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import cross_val_score","9aa015fa":"class Model:\n    scores = {'Model':[], 'Accuracy':[], 'CV_Score':[]}\n    \n    def __init__(self, model, model_name):\n        self.model = model\n        self.model_name = model_name\n        \n    def predict(self):\n        self.model.fit(scaled_train_x, train_y)\n        pred = self.model.predict(scaled_test_x)\n        cv_score = np.mean(cross_val_score(self.model, scaled_test_x, test_y, cv=5))\n        \n        self.performance(pred, cv_score)\n    \n    def performance(self, pred, cv_score):\n        accuracy = accuracy_score(pred, test_y)\n        \n        Model.scores['Model'].append(self.model_name)\n        Model.scores['Accuracy'].append(accuracy)\n        Model.scores['CV_Score'].append(cv_score)\n        \n        print(f'Accuracy Score: {accuracy}')\n        print(f'Mean Cross Validation Score: {cv_score}\\n')\n        print(f'Classification Report\\n{classification_report(pred, test_y)}')\n        \n        self.confusion_matrix(pred)\n        \n    def confusion_matrix(self, pred):\n        cm = confusion_matrix(test_y, pred)\n        return sns.heatmap(cm, annot=True, fmt='d', cmap=\"YlGnBu\")","52a67e54":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = Model(KNeighborsClassifier(), 'KNN')\nmodel.predict()","ba780cfa":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = Model(DecisionTreeClassifier(), 'Decision Tree')\nmodel.predict()","9a0b130d":"from sklearn.naive_bayes import GaussianNB\n\nmodel = Model(GaussianNB(), 'Gaussian NB')\nmodel.predict()","42f984eb":"from sklearn.linear_model import LogisticRegression\n\nmodel = Model(LogisticRegression(), 'Logistic Regression')\nmodel.predict()","ac5e4619":"from sklearn.svm import SVC\n\nmodel = Model(SVC(), 'SVC')\nmodel.predict()","d1ee3e5d":"performance_df = pd.DataFrame(Model.scores)\nperformance_df.sort_values(by='Accuracy', ascending=False, inplace=True)\n\nperformance_df","1fd25faa":"### Does Age Affects Other Features?","a084f6d0":"### Data Scaling","8b4b023a":"# **Model Evaluation**","ecee1590":"### Support Vector Machine","c3ff809a":"# **Exploratory Data Analysis**","f881c48f":"# **Visualization**","5d10f6c7":"### Decision Tree Classifier","3a4d6b77":"### Data Splitting","860bd4c7":"### Total Output","6badd0db":"### Check na Values and Duplicated Data","6d675089":"### KNN","786f92ce":"# **Data Preprocessing**\n1. Split data -> train and test\n2. Scale the data using StandardScaler","34ba7b82":"### Logistic Regression","83539415":"# **Feature Engineering**\n\n### According to my domain knowledge, there are 3 points\n1. It's impossible for people to have 0 blood pressure\n2. It's impossible for people to have 0 glucose\n3. It's impossible for people to have 0 bmi\n\nThese statements may not true\n\n### However, I'm going to impute the rows that have 0 value for these columns anyway","a853ce27":"# **Model Training**","1c07caef":"### General Information About the Data","273eef26":"### Data Distribution","758bcebf":"### It seems like older people are more likely to have diabetes","70357764":"### Correlation","d54ffddd":"### Naive Bayesian"}}