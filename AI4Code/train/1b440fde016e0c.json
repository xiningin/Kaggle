{"cell_type":{"7168b83b":"code","ec7a6548":"code","fe0094c7":"code","203e1bd0":"code","375181d4":"code","9ca17347":"code","3b6fbe44":"code","d991de24":"markdown","ad34a3d9":"markdown"},"source":{"7168b83b":"import sys\nsys.path.insert(0, \"..\/input\/weightedboxesfusion\")\n\nimport numpy as np\nimport pandas as pd \nimport cv2\nimport os\nimport torch\nimport torchvision\nimport glob \nimport ensemble_boxes\n\nfrom matplotlib import pyplot as plt\nfrom itertools import product\nfrom torch.utils.data import DataLoader, Dataset\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor,FasterRCNN\nfrom albumentations import Resize,Compose\nfrom albumentations.pytorch.transforms import ToTensorV2\n\n\nDATA_TEST_PATH = '..\/input\/global-wheat-detection\/test\/'\nMODEL_PATH = '..\/input\/faster000075\/fasterrcnn_fold 0 000075.pt'\n\n\ndevice = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\ndevice","ec7a6548":"def collate_fn(batch):\n    return tuple(zip(*batch))\n\ndef get_test_transform():\n    return Compose([\n        Resize(height=512, width=512, p=1.0),\n        ToTensorV2(p=1.0)\n    ])\n\ndef load_checkpoint(cp_file, model, is_model=False):\n    checkpoint = torch.load(cp_file)\n    if is_model:\n        model.load_state_dict(checkpoint)\n    else:\n        model.load_state_dict(checkpoint['model'])\n\n    return model\n\n    \ndef normalize(img):\n    img -= img.min()\n    img \/= img.max()\n    return img\n\n","fe0094c7":"class DatasetRetriever(Dataset):\n\n    def __init__(self, image_ids, transforms=None):\n        super().__init__()\n        self.image_ids = image_ids\n        self.transforms = transforms\n\n    def __getitem__(self, index: int):\n        \n        image_id = self.image_ids[index]\n        image = cv2.imread(f'{DATA_TEST_PATH}\/{image_id}.jpg', cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image = normalize(image)\n        \n        if self.transforms:\n            sample = {'image': image}\n            sample = self.transforms(**sample)\n            image = sample['image']\n        return image, image_id\n\n    def __len__(self) -> int:\n        return len(self.image_ids)\n\n\n\ntest_ids = [path.split('\/')[-1][:-4] for path in glob.glob(f'{DATA_TEST_PATH}\/*.jpg')]\n\ndataset = DatasetRetriever(image_ids=test_ids, transforms=get_test_transform())\ndata_loader = DataLoader(dataset, batch_size=1, shuffle=False, drop_last=False, collate_fn=collate_fn)","203e1bd0":"model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=False,pretrained_backbone=False)\nnum_classes = 2 \nin_features = model.roi_heads.box_predictor.cls_score.in_features\nmodel.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\nmodel.__name__ = \"fpn_resnet\"\nmodel.to(device)\nmodel = load_checkpoint(MODEL_PATH,model,True)\nmodel.eval()","375181d4":"class BaseWheatTTA:\n    \"\"\" author: @shonenkov \"\"\"\n    image_size = 512\n\n    def augment(self, image):\n        raise NotImplementedError\n    \n    def batch_augment(self, images):\n        raise NotImplementedError\n    \n    def deaugment_boxes(self, boxes):\n        raise NotImplementedError\n\nclass TTAHorizontalFlip(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n\n    def augment(self, image):\n        return image.flip(1)\n    \n    def batch_augment(self, images):\n        return images.flip(2)\n    \n    def deaugment_boxes(self, boxes):\n        boxes[:, [1,3]] = self.image_size - boxes[:, [3,1]]\n        return boxes\n\nclass TTAVerticalFlip(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    \n    def augment(self, image):\n        return image.flip(2)\n    \n    def batch_augment(self, images):\n        return images.flip(3)\n    \n    def deaugment_boxes(self, boxes):\n        boxes[:, [0,2]] = self.image_size - boxes[:, [2,0]]\n        return boxes\n    \nclass TTARotate90(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    \n    def augment(self, image):\n        return torch.rot90(image, 1, (1, 2))\n\n    def batch_augment(self, images):\n        return torch.rot90(images, 1, (2, 3))\n    \n    def deaugment_boxes(self, boxes):\n        res_boxes = boxes.copy()\n        res_boxes[:, [0,2]] = self.image_size - boxes[:, [1,3]]\n        res_boxes[:, [1,3]] = boxes[:, [2,0]]\n        return res_boxes\n\nclass TTACompose(BaseWheatTTA):\n    \"\"\" author: @shonenkov \"\"\"\n    def __init__(self, transforms):\n        self.transforms = transforms\n        \n    def augment(self, image):\n        for transform in self.transforms:\n            image = transform.augment(image)\n        return image\n    \n    def batch_augment(self, images):\n        for transform in self.transforms:\n            images = transform.batch_augment(images)\n        return images\n    \n    def prepare_boxes(self, boxes):\n        result_boxes = boxes.copy()\n        result_boxes[:,0] = np.min(boxes[:, [0,2]], axis=1)\n        result_boxes[:,2] = np.max(boxes[:, [0,2]], axis=1)\n        result_boxes[:,1] = np.min(boxes[:, [1,3]], axis=1)\n        result_boxes[:,3] = np.max(boxes[:, [1,3]], axis=1)\n        return result_boxes\n    \n    def deaugment_boxes(self, boxes):\n        for transform in self.transforms[::-1]:\n            boxes = transform.deaugment_boxes(boxes)\n        return self.prepare_boxes(boxes)\n\ndef process_det(index, det, score_threshold=0.25):\n    boxes = det[index]['boxes'].detach().cpu().numpy()[:,:4]    \n    scores = det[index]['scores'].detach().cpu().numpy()\n\n    boxes = (boxes).clip(min=0, max=511).astype(int)\n    indexes = np.where(scores>score_threshold)\n    boxes = boxes[indexes]\n    scores = scores[indexes]\n    return boxes, scores  \n\ndef make_tta_predictions(images, score_threshold=0.25):\n    with torch.no_grad():\n        images = torch.stack(images).float().cuda()\n        predictions = []\n        for tta_transform in tta_transforms:\n            result = []\n            det = model(tta_transform.batch_augment(images.clone()))\n\n            for i in range(images.shape[0]):\n                boxes = det[i]['boxes'].detach().cpu().numpy()[:,:4]    \n                scores = det[i]['scores'].detach().cpu().numpy()\n                indexes = np.where(scores > score_threshold)[0]\n                boxes = boxes[indexes]\n\n                boxes = tta_transform.deaugment_boxes(boxes.copy())\n                result.append({\n                    'boxes': boxes,\n                    'scores': scores[indexes],\n                })\n            predictions.append(result)\n    return predictions\n\ndef run_wbf(predictions, image_index, image_size=512, iou_thr=0.44, skip_box_thr=0.43, weights=None):\n    boxes = [(prediction[image_index]['boxes']\/(image_size)).tolist() for prediction in predictions]\n    scores = [prediction[image_index]['scores'].tolist() for prediction in predictions]\n    labels = [np.ones(prediction[image_index]['scores'].shape[0]).astype(int).tolist() for prediction in predictions]\n    boxes, scores, labels = ensemble_boxes.ensemble_boxes_wbf.weighted_boxes_fusion(boxes, scores, labels, weights=None, iou_thr=iou_thr, skip_box_thr=skip_box_thr)\n    boxes = boxes*(image_size-1)\n    return boxes, scores, labels","9ca17347":"def format_prediction_string(boxes, scores):\n    pred_strings = []\n    for j in zip(scores, boxes):\n        pred_strings.append(\"{0:.4f} {1} {2} {3} {4}\".format(j[0], j[1][0], j[1][1], j[1][2], j[1][3]))\n    return \" \".join(pred_strings)\n\ntta_transforms = []\nfor tta_combination in product([TTAHorizontalFlip(), None], \n                               [TTAVerticalFlip(), None],\n                               [TTARotate90(), None]):\n    tta_transforms.append(TTACompose([tta_transform for tta_transform in tta_combination if tta_transform]))\n\nresults = []\n\nfor images, image_ids in data_loader:\n    predictions = make_tta_predictions(images)\n    for i, image in enumerate(images):\n        boxes, scores, labels = run_wbf(predictions, image_index=i)\n        boxes_s = (boxes*2).astype(np.int32).clip(min=0, max=1023)\n        image_id = image_ids[i]\n        #visualize outout\n#         boxes = boxes.astype(np.int32)\n\n\n#         sample = images[i].permute(1,2,0).cpu().numpy()\n\n#         fig, ax = plt.subplots(1, 1, figsize=(16, 8))\n\n#         for box in boxes:\n            \n#             cv2.rectangle(sample, (box[0], box[1]), (box[2], box[3]), (1, 0, 0), 1)\n\n#         ax.set_axis_off()\n#         ax.set_title(image_id)\n#         ax.imshow(sample);\n        boxes_s[:, 2] = boxes_s[:, 2] - boxes_s[:, 0]\n        boxes_s[:, 3] = boxes_s[:, 3] - boxes_s[:, 1]\n        \n        result = {\n            'image_id': image_id,\n            'PredictionString': format_prediction_string(boxes_s, scores)\n        }\n        results.append(result)","3b6fbe44":"test_df = pd.DataFrame(results, columns=['image_id', 'PredictionString'])\ntest_df.to_csv('\/kaggle\/working\/submission.csv', index=False)\ntest_df.head()","d991de24":"# WBF+TTA","ad34a3d9":"# Submission"}}