{"cell_type":{"f49e308e":"code","8a566367":"code","4f7f198d":"code","5c8a1b50":"code","e5f8ffb5":"code","0dc3beea":"code","13352bee":"code","f1d7127a":"code","cf4f7b8b":"code","dda8fa90":"code","b4b33e56":"code","5207cadc":"code","16fa868b":"code","9807d75c":"code","3fdafaff":"code","f38e184e":"code","932ddbc7":"code","f48dc064":"code","502b2a0c":"code","d6a13e07":"code","3aeab28a":"code","48371e35":"code","2081b899":"code","a6a05889":"code","29d4d782":"code","b03680c5":"code","a217deca":"code","4a872790":"code","a6890bd3":"code","5169ea0b":"code","2eb30d32":"code","4005f864":"code","506100ea":"code","878daf4b":"code","7f26ddfb":"code","571bae0e":"code","1ff51deb":"code","2ab59af9":"code","fb7bdc19":"code","08da1571":"code","9e2f86dd":"code","1fd6d55a":"code","07f54df5":"code","72eec9a8":"code","11cc1298":"code","34b18a0b":"code","b9bdb445":"code","c5d108ad":"code","9f29922a":"markdown","6c62e396":"markdown","e7886833":"markdown","d69da634":"markdown","e4a06fdd":"markdown","5e35cd56":"markdown","195f14dc":"markdown","4e8ee1f1":"markdown","55971fb9":"markdown","fe556955":"markdown","90e65cc0":"markdown","68c7b621":"markdown","4cb5d9c0":"markdown","7a622899":"markdown","77fc705f":"markdown","95730a0f":"markdown","023140d2":"markdown","784a3ab1":"markdown","39bc3c48":"markdown","c56bdf66":"markdown","acc96db1":"markdown","04b3add1":"markdown","77c9affd":"markdown"},"source":{"f49e308e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8a566367":"%%time\ntraindf = pd.read_pickle(\"..\/input\/riiid-train-data-multiple-formats\/riiid_train.pkl.gzip\")","4f7f198d":"traindf","5c8a1b50":"traindf = traindf[[\"user_id\",\"content_id\",\"task_container_id\",\"answered_correctly\",\"prior_question_had_explanation\"]]","e5f8ffb5":"traindf = traindf[traindf[\"answered_correctly\"]!=-1] # inference\u3067\u306fcontent_type_id\u3000== 0\u3092\u4f7f\u7528\u3002\u30e1\u30e2\u30ea\u524a\u6e1b\u3068\u8a08\u7b97\u91cf\u524a\u6e1b\u306e\u305f\u3081\u3001\u3053\u3061\u3089\u3067\u306f\u3053\u3046\u3084\u3063\u3066\u3044\u308b","0dc3beea":"traindf","13352bee":"usergroup = traindf.groupby(\"user_id\")","f1d7127a":"train = usergroup.tail(24)","cf4f7b8b":"train","dda8fa90":"train[train[\"user_id\"]==115]","b4b33e56":"del traindf","5207cadc":"# \u30e1\u30e2\u30ea\u89e3\u653e\nimport gc\ngc.collect()","16fa868b":"train","9807d75c":"train[\"prior_question_had_explanation\"] = train[\"prior_question_had_explanation\"].fillna(False).astype(\"bool\")","3fdafaff":"usergroup2 = train.groupby(\"user_id\")","f38e184e":"val = usergroup2.tail(6)","932ddbc7":"train = train.drop(val.index)","f48dc064":"train","502b2a0c":"val","d6a13e07":"train = train.reset_index(drop=True)\nval = val.reset_index(drop=True)","3aeab28a":"FEATURES = [\"content_id\",\"task_container_id\",\"prior_question_had_explanation\"]\nTARGET = \"answered_correctly\"","48371e35":"import lightgbm as lgb","2081b899":"train[FEATURES]","a6a05889":"# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\nlgb_train = lgb.Dataset(train[FEATURES], train[TARGET])\nlgb_eval = lgb.Dataset(val[FEATURES], val[TARGET])","29d4d782":"# LightGBM \u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bfbasic\nlgbm_params = {\n    # \u4e8c\u5024\u5206\u985e\u554f\u984c\n    'objective': 'binary',\n    # AUC \u306e\u6700\u5927\u5316\u3092\u76ee\u6307\u3059\n    'metric': 'auc',\n    # Fatal \u306e\u5834\u5408\u51fa\u529b\n    'verbosity': -1,\n}","b03680c5":"# \u4ed6\u306enotebook\u304b\u3089\u6301\u3063\u3066\u304d\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\nlgbm_params2 = {\n    'objective': 'binary',\n    'seed': 42,\n    'metric': 'auc',\n    'learning_rate': 0.05,\n    'max_bin': 800,\n    'num_leaves': 80\n}","a217deca":"# \u4e0a\u8a18\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\nmodel = lgb.train(lgbm_params2, lgb_train, valid_sets=lgb_eval,\n                  verbose_eval=50,  # 50\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u6bce\u306b\u5b66\u7fd2\u7d50\u679c\u51fa\u529b\n                  num_boost_round=1000,  # \u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u6307\u5b9a\n                  early_stopping_rounds=100\n                 )","4a872790":"# \u4f7f\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001model\u306e\u4fdd\u5b58\u65b9\u6cd5\u3068\u30ed\u30fc\u30c9\u65b9\u6cd5\n\nimport pickle\n\nmodel_name = \"LGBMmodel.bin\"\n\n# \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\npickle.dump(model, open(model_name, 'wb'))\n\n# \u30e2\u30c7\u30eb\u306e\u30ed\u30fc\u30c9\u65b9\u6cd5\nestimator = pickle.load(open(model_name, 'rb'))\n\n# \u305d\u3046\u3059\u308b\u3068\u3001estimator\u304c\u2191\u3067\u3044\u3046model\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u4f7f\u3048\u308b\u3002","a6890bd3":"import matplotlib.pyplot as plt","5169ea0b":"# model.save_model(f'model.txt')\nlgb.plot_importance(model, importance_type='gain')\nplt.show()","2eb30d32":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c\u3059\u308b\ny_pred = model.predict(val[FEATURES], num_iteration=model.best_iteration)","4005f864":"# AUC (Area Under the Curve) \u3092\u8a08\u7b97\u3059\u308b\nfrom sklearn import metrics\nfpr, tpr, thresholds = metrics.roc_curve(val[TARGET], y_pred)\nauc = metrics.auc(fpr, tpr)\nprint(auc)\n\n# ROC\u66f2\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\nplt.plot(fpr, tpr, label='ROC curve (area = %.2f)'%auc)\nplt.legend()\nplt.title('ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.grid(True)","506100ea":"# testdata\u3067\u7df4\u7fd2","878daf4b":"ex_test = pd.read_csv(\"..\/input\/riiid-test-answer-prediction\/example_test.csv\")","7f26ddfb":"ex_test","571bae0e":"ex_test = ex_test[ex_test[\"content_type_id\"]==0] #\u8b1b\u7fa9\u306e\u307f\u306b\u3059\u308b\nex_test[\"prior_question_had_explanation\"] = ex_test[\"prior_question_had_explanation\"].fillna(False).astype(\"bool\")","1ff51deb":"ex_train = ex_test[FEATURES]","2ab59af9":"ex_train","fb7bdc19":"ex_train[\"answered_correctly\"] = model.predict(ex_train,model.best_iteration)","08da1571":"ex_train","9e2f86dd":"# submit\u3067row_id\u304c\u5165\u308b\u306e\u3067\u3001row_id\u3092\u5927\u672c\u30c7\u30fc\u30bf\u304b\u3089\u633f\u5165\nex_train[\"row_id\"] = ex_test[\"row_id\"]","1fd6d55a":"ex_train","07f54df5":"submission = ex_train[['row_id', 'answered_correctly']]","72eec9a8":"submission","11cc1298":"def predictdf(ex_test):\n    ex_test = ex_test[ex_test[\"content_type_id\"]==0] #\u8b1b\u7fa9\u306e\u307f\u306b\u3059\u308b\n    ex_test[\"prior_question_had_explanation\"] = ex_test[\"prior_question_had_explanation\"].fillna(False).astype(\"bool\")\n    ex_train = ex_test[FEATURES]\n    ex_train[\"answered_correctly\"] = model.predict(ex_train,model.best_iteration)\n    ex_train[\"row_id\"] = ex_test[\"row_id\"]\n    submission = ex_train[['row_id', 'answered_correctly']]\n  \n    return submission\n\n","34b18a0b":"predictdf(ex_test)","b9bdb445":"import riiideducation\nenv = riiideducation.make_env()\niter_test = env.iter_test()","c5d108ad":"for (test_df, sample_prediction_df) in iter_test:\n    \n    \n    submission = predictdf(test_df)\n    submission[\"answered_correctly\"] = submission[\"answered_correctly\"].fillna(0.707)\n    \n    env.predict(submission)","9f29922a":"## \u3053\u3053\u307e\u3067\u306e\u6d41\u308c\u3092\u95a2\u6570\u5316\u3057\u3066\u304a\u304f\u3068\u697d","6c62e396":"## \u304a\u6c7a\u307e\u308a\u306e\u3084\u308a\u65b9\u3068\u601d\u3063\u3066\u3082\u3089\u3048\u308c\u3070\u826f\u3044\u3002","e7886833":"## \u7d041\u5104\u884c\u306e\u30c7\u30fc\u30bf\u3002\u4f7f\u3046\u884c\u3060\u3051\u306b\u30b9\u30ea\u30df\u30f3\u30b0\u3059\u308b","d69da634":"## 3.2 \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a","e4a06fdd":"## submit file\u306e\u5f62\u5f0f\u306b\u3059\u308b","5e35cd56":"# 6. submit","195f14dc":"## \u5b66\u7fd2\u3055\u305b\u308bcolumn\u3092FEATURES, \u30e9\u30d9\u30eb\u3092TARGET","4e8ee1f1":"# Light GBM \u306e\u57fa\u790e\n## \u4eca\u56de\u306e\u76ee\u7684 : \u3068\u308a\u3042\u3048\u305a\u3001Light GBM\u3092\u6d41\u3057\u3066\u3001submit\u307e\u3067\u3057\u3066\u307f\u308b\n## \u6d41\u3057\u3066\u3044\u308b\u9593\u306b\u3001Light GBM\u3068\u306f\u4f55\u306a\u306e\u304b\u3092\u89e3\u8aac","55971fb9":"# 2. train\u30c7\u30fc\u30bf\u3068validation\u30c7\u30fc\u30bf\u306e\u751f\u6210\u3002\n### \u4eca\u56de\u306f\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u300124\u500b\u554f\u984c\u3068\u56de\u7b54\u7d50\u679c\u3092\u62bd\u51fa\u3002\n### \u3046\u306118\u500b\u3092train\u30c7\u30fc\u30bf\u30026\u500b\u3092validation\u30c7\u30fc\u30bf\u3068\u3059\u308b","fe556955":"## \u5ff5\u306e\u305f\u3081\u3001reset index","90e65cc0":"## \u30e1\u30e2\u30ea\u78ba\u4fdd\u306e\u305f\u3081\u306b1\u5104\u884c\u30c7\u30fc\u30bf\u3092\u524a\u9664","68c7b621":"# 5. inference","4cb5d9c0":"## feature importance\u306e\u8868\u793a","7a622899":"# 4.\u5b66\u7fd2 -\u3053\u306e\u9593\u306b\u89e3\u8aac-","77fc705f":"## 3.1 \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","95730a0f":"# 1. input data\u306e\u8ffd\u52a0\n## https:\/\/www.kaggle.com\/rohanrao\/riiid-train-data-multiple-formats \u3092\u8ffd\u52a0\u3059\u308b","023140d2":"## \u8b1b\u7fa9\u3092\u9664\u53bb","784a3ab1":"## \u3053\u3053\u3067\u4e88\u6e2c","39bc3c48":"# 3. Modeling","c56bdf66":"## pd.read_csv\u3067\u306f\u3001\u7d045\u5206\u4ee5\u4e0a\u8aad\u307f\u8fbc\u307f\u304b\u304b\u308b\u304c\u3001pkl\u3060\u3068\u30011\u5206\u672a\u6e80\u3067\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\n## \u203b GPU\u4f7f\u7528\u3057\u305fcudf\u3060\u3068\u300117 sec\u7a0b\u5ea6","acc96db1":"#### \u4ee5\u4e0b\u306f\u53c2\u8003","04b3add1":"## train\u30c7\u30fc\u30bf24\u500b\u304b\u3089\u5f8c\u308d6\u500b\u3092validation\u306b\u3057\u3066\u62bd\u51fa\u3057\u3066\u3001\u305d\u306eindex\u3092\u9664\u53bb\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001train 18\u500b\u3001validation 6\u500b\u3068\u3059\u308b","77c9affd":"# prior_question_had_explanation\u306enan\u30c7\u30fc\u30bf\u7f6e\u63db"}}