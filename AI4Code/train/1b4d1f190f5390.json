{"cell_type":{"79be4597":"code","1ef16c97":"code","7d18af87":"code","bf029372":"code","f0b3e2be":"code","e2f745a4":"code","33cf5232":"code","332b4277":"code","906f57af":"code","793eee02":"code","884b44d7":"code","759c095c":"code","533eae7f":"code","9b8ddd27":"code","89319ef5":"markdown","161e8044":"markdown","a52a0202":"markdown","1e861b74":"markdown","f310173f":"markdown","746acc49":"markdown","79ebb351":"markdown"},"source":{"79be4597":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1ef16c97":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/cusersmarildownloadsdeathscsv\/deaths.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf1.dataframeName = 'deaths.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","7d18af87":"categorical_cols = [cname for cname in df1.columns if\n                    df1[cname].nunique() < 10 and \n                    df1[cname].dtype == \"object\"]\n\n\n# Select numerical columns\nnumerical_cols = [cname for cname in df1.columns if \n                df1[cname].dtype in ['int64', 'float64']]","bf029372":"print(categorical_cols)","f0b3e2be":"print(numerical_cols)","e2f745a4":"# for data visualzation\nimport seaborn as sns\nimport matplotlib.pyplot as plt","33cf5232":"sns.set(rc={'figure.figsize':(19.7,8.27)})\n\nsns.heatmap(df1.isnull(),yticklabels=False,cbar=False,cmap='viridis')","332b4277":"#Fields not needed to our problem\nto_drop = [\"Unnamed: 1\",\"Unnamed: 2\"]\n    \n# Drop selected fields in place\ndf1.drop(to_drop, inplace=True, axis=1)","906f57af":"df1.dropna(inplace=True)\ndf1.shape","793eee02":"sns.distplot(df1[\"lower\"])","884b44d7":"sns.scatterplot(x='lower',y='median.1',data=df1)","759c095c":"sns.countplot(df1[\"upper.1\"])","533eae7f":"import plotly.offline as pyo\nimport plotly.graph_objs as go\nlowerdf1 = df1.groupby('lower').size()\/df1['lower'].count()*100\nlabels = lowerdf1.index\nvalues = lowerdf1.values\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.6)])\nfig.show()","9b8ddd27":"#catplot room type and price\nplt.figure(figsize=(10,6))\nsns.catplot(x=\"lower\", y=\"upper.1\", data=df1);\nplt.ioff()","89319ef5":"Codes from Baval @bavalpreet26","161e8044":"Thanks Baval @bavalpreet26 for your scripts. Now I have new approaches for my visualizations.","a52a0202":"Heatmap to see missing values. In yellow the missing values?","1e861b74":"Here a catplot. Catplots shows frequencies (or optionally fractions or percents) of the categories of one, two or three categorical variables. ","f310173f":"EDA","746acc49":"No categorical columns","79ebb351":"Thanks for the donut-like pie chart Baval."}}