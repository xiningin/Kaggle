{"cell_type":{"505c611e":"code","cfe4b297":"code","6993e0c0":"code","d4c4de7a":"code","3dc86498":"code","079ba0d9":"code","0f3b9dd1":"code","67025b40":"code","051e0330":"markdown","76e395ba":"markdown","aa1d0f55":"markdown","c57dbd01":"markdown","6b4c8be5":"markdown","e9a28366":"markdown","fe7047a1":"markdown","220abbcc":"markdown","2fc38618":"markdown","4b2049d8":"markdown","b34cf7a0":"markdown"},"source":{"505c611e":"# Global variables for testing changes to this notebook quickly\nRANDOM_SEED = 0\nNUM_FOLDS = 3\nSAMPLES = 100000","cfe4b297":"import numpy as np\nimport pandas as pd\nimport time\nimport os\nimport gc\n\n# Hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n\n# Plotting\nimport matplotlib\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Model and Evaluation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\nimport shap","6993e0c0":"def get_data(n_samples = 100000):\n    start = time.time()\n    \n    # Load and sample training data\n    train = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\n    train.drop(['id', 'target'], axis = 'columns', inplace = True)\n    train = train.sample(n = n_samples, random_state = RANDOM_SEED)\n    gc.collect()\n\n    # Load and sample test data\n    test = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\n    test.drop('id', axis = 'columns', inplace = True)\n    test = test.sample(n = n_samples, random_state = RANDOM_SEED)\n    gc.collect()\n    \n    data = train.append(test).reset_index(drop = True)\n    data['test'] = [0] * len(train) + [1] * len(test)\n    data.reset_index(drop = True, inplace = True)\n    \n    for col, dtype in data.dtypes.iteritems():\n        if dtype.name.startswith('int'):\n            data[col] = pd.to_numeric(data[col], downcast ='integer')\n        elif dtype.name.startswith('float'):\n            data[col] = pd.to_numeric(data[col], downcast ='float')\n    \n    train, valid = train_test_split(data, stratify = data['test'])\n    \n    end = time.time()\n    print(f\"Data retrieved in {round(end-start,2)}s.\")\n    return train, valid","d4c4de7a":"# Load data\ntrain, valid = get_data(n_samples = SAMPLES)\nfeatures = [x for x in train.columns if x != 'test']\n\n# Define and train model\nstart = time.time()\nmodel = XGBClassifier(\n    random_state = RANDOM_SEED,\n    tree_method='gpu_hist',\n    gpu_id=0,\n    predictor=\"gpu_predictor\",\n)\nmodel.fit(\n    train[features], train['test'], \n    eval_metric = 'auc',\n    verbose = False\n)\n\n# Get AUC from validation set\nvalid_auc = roc_auc_score(\n    y_true = valid['test'], \n    y_score = model.predict_proba(valid[features])[:,1],\n)\nend = time.time()\n\nprint(f'Validation AUC: {round(valid_auc, 6)} in {round(end-start, 2)}s.')","3dc86498":"# Top 10 features by importance type \"Weight\"\nfig, ax = plt.subplots(figsize = (9,6))\nxgb.plot_importance(\n    model,\n    ax = ax,\n    importance_type = \"weight\",\n    max_num_features = 10,\n)\nplt.show()","079ba0d9":"# Top 10 features by importance type \"Gain\"\nfig, ax = plt.subplots(figsize = (9,6))\nxgb.plot_importance(\n    model,\n    ax = ax,\n    importance_type = \"gain\",\n    max_num_features = 10,\n    show_values = False, # looks bad\n)\nplt.show()","0f3b9dd1":"# Top 10 features by importance type \"Cover\"\nfig, ax = plt.subplots(figsize = (9,6))\nxgb.plot_importance(\n    model,\n    ax = ax,\n    importance_type = \"cover\",\n    max_num_features = 10,\n    show_values = False, # looks bad\n)\nplt.show()","67025b40":"# Top 10 features by SHAP values\nbooster_xgb = model.get_booster()\nshap_values_xgb = booster_xgb.predict(\n    xgb.DMatrix(train[features], train['test']), \n    pred_contribs=True\n)\n\nshap.summary_plot(\n    shap_values_xgb[:, :-1], train[features], \n    feature_names=features, \n    plot_type=\"bar\",\n    max_display = 10,\n)","051e0330":"# Adversarial Validation\n\nIn this notebook, we use adversarial validation to test the similarity of the training and test data. I made a [post](https:\/\/www.kaggle.com\/c\/tabular-playground-series-oct-2021\/discussion\/276712) about this on the discussion boards and figured I should make a notebook for others to inspect.\n\nThe idea behind adversarial validation is that if there are differences in the training and test data distributions an algorithm like XGBoost should be able to find these differences and use them to distinguish the two sets. So we create a classification problem where we predict whether a sampling of the data comes from the training or test sets. Ideally, we hope to see ~.5 AUC which would mean that our algorithm couldn't find meaningful distinctions between the test and training data.","76e395ba":"## 2. Importance Type - Gain","aa1d0f55":"## 1. Importance Type: Weight","c57dbd01":"# XGBoost SHAP Values\n\nFinally, we can use our fitted model to calculate feature importances using SHAP values:","6b4c8be5":"## 3. Importance Type - Cover","e9a28366":"We see that different features are considered important based on which importance type we consider.","fe7047a1":"We see a validation AUC of `> .95` which seems to suggest significant differences in the training and test distributions.","220abbcc":"# Adversarial Validation\n\nWe use [XGBoost](https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/index.html)  and a random sampling of 100,000 rows from both the training and test data (200k total):","2fc38618":"We see there are several features that are consistently considered important for distinguishing the test set from the training set. It may be worth examining these features.","4b2049d8":"# XGBoost Feature Importance\n\nIt may be useful to examine these features which XGBoost found useful for distinguishing the training and test data. We use consider the following importance types:\n\n* `weight` is the number of times a feature appears in a tree\n* `gain` is the average gain of splits which use the feature\n* `cover` is the average coverage of splits which use the feature where coverage is defined as the number of samples affected by the split\n\nAbove descriptions taken from the XGBoost Plotting API [documentation](https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html#module-xgboost.plotting).","b34cf7a0":"## Load Data\n\nHelper function which samples the training and test sets in preparation for adversarial validation."}}