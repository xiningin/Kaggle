{"cell_type":{"44490cc5":"code","5ba98e59":"code","e8b0fb7d":"code","974dd097":"code","8b1e0f9d":"code","bb0674de":"code","46255f14":"code","c5753a6d":"code","6ee0f349":"code","8d0ded7e":"code","f06c13be":"code","4023516f":"code","f14e1494":"code","468cd720":"code","7f3d768d":"code","6d3b1e11":"code","d22bf59b":"code","c1de4bfe":"code","0720d5d1":"code","4122b451":"code","18fec1ea":"code","df5fbb97":"code","a7e72811":"code","18e71c18":"code","67e18272":"code","2f95b5ca":"code","65d78b3c":"code","fd9f80ab":"markdown","ee546753":"markdown","c7cb521e":"markdown","41665eea":"markdown","1b76d324":"markdown","004b7f8c":"markdown","bc6fa95d":"markdown","c3f6a9ae":"markdown","3870fc26":"markdown","cbee7e9b":"markdown","685ab51f":"markdown","95550be7":"markdown","f3c320bc":"markdown"},"source":{"44490cc5":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import linear_model as lm","5ba98e59":"#Declaring an array\narr = np.array([[1,2,3],[4,5,6]])\n\nprint(\"Array dimensions:\\n\", arr.shape)\nprint(\"Array preview:\\n\", arr)","e8b0fb7d":"#Function to generate a Matrix with all values as 1.\nidentityMatrix = np.ones((2,2))\nprint(\"Identity Matrix:\\n\",identityMatrix)\n\n#Function to stack so as to make a single Matrix horizontally.\nx = np.hstack((identityMatrix,arr))\nprint(\"Stacking arrays:\\n\",x)","974dd097":"#Dot Product \n#Calculation: [[7*11+8*13, 7*12+8*14],[9*11+10*13, 9*12+10*14]]\na = np.array([[7,8],[9,10]]) \nb = np.array([[11,12],[13,14]]) \nprint(np.dot(a,b))","8b1e0f9d":"#Transpose\nmat = np.array([[7,8],[9,10],[11,12],[13,14]]) \n\nprint(\"Original Matrix:\\n\", mat)\nprint(\"Tranposed Matrix:\\n\", np.transpose(mat))","bb0674de":"# Function to calculate the inverse of a matrix\nmat = np.array([[7,8],[9,10]])\nprint(\"Matrix Inverse:\\n\", np.linalg.inv(mat))","46255f14":"# 'x1' functions as an independent variable and 'y' as a dependent variable \ny = np.array([[1.55],[0.42],[1.29],[0.73],[0.76],[-1.09],[1.41],[-0.32]])\nx1 = np.array([[1.13],[-0.73],[0.12],[0.52],[-0.54],[-1.15],[0.20],[-1.09]])","c5753a6d":"#Generating regression coefficients\nid = np.ones((8,1))\nx = np.hstack((id,x1))\nbeta=(np.dot(np.dot(np.linalg.inv(np.dot(x.transpose(),x)),x.transpose()),y))\nprint(beta)","6ee0f349":"#Result - Calculation\nyp1 = beta[0]+beta[1]*x1\nprint(np.hstack((x1,y,yp1)))","8d0ded7e":"#Input Dataframe\nd = pd.DataFrame(np.hstack((x1,y)))\nd.columns = [\"x1\",\"y\"]\nprint(d)","f06c13be":"#Linear Regression - model fitting\nmodel = lm.LinearRegression()\nresults = model.fit(x1,y)\nprint(model.intercept_, model.coef_)","4023516f":"#Result: Scikit-Learn\nyp2 = model.predict(x1)\nprint(yp2)","f14e1494":"#Linear Regression representation using scatter plot\nplt.scatter(x1,y)\nplt.plot(x1,yp2, color=\"blue\")\nplt.show()","468cd720":"#Prediction for new values\nx1new = pd.DataFrame(np.hstack(np.array([[1],[0],[-0.12],[0.52]])))\nx1new.columns=[\"x1\"]\nyp2new = model.predict(x1new)\nprint(yp2new)","7f3d768d":"# Input Dataframe\ny = np.array([[1.55],[0.42],[1.29],[0.73],[0.76],[-1.09],[1.41],[-0.32]])\nx1 = np.array([[1.13],[-0.73],[0.12],[0.52],[-0.54],[-1.15],[0.20],[-1.09]])\nx2 = np.array([[1],[0],[1],[1],[0],[1],[0],[1]])","6d3b1e11":"id = np.ones((8,1))\nx = np.hstack((id,x1,x2))\nprint(x)","d22bf59b":"# Calculating regression coefficients \nbeta=(np.dot(np.dot(np.linalg.inv(np.dot(x.transpose(),x)),x.transpose()),y))\nprint(beta)","c1de4bfe":"#Result - Calculation\nyp1 = beta[0]+beta[1]*x1+beta[2]*x2\nprint(np.hstack((x,y,yp1)))","0720d5d1":"#Input Dataframe\nd = pd.DataFrame(np.hstack((x1,x2,y)))\nd.columns = [\"x1\",\"x2\",\"y\"]\nprint(d)","4122b451":"#Multiple Linear Regression - Model Fitting\ninputDF = d[[\"x1\",\"x2\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,y)\n\nprint(model.intercept_, model.coef_)","18fec1ea":"#Result: Scikit-Learn\nyp2 = model.predict(inputDF)\nyp2","df5fbb97":"#Prediction for new values\nx1new = pd.DataFrame(np.hstack((np.array([[1],[0],[-0.12],[0.52]]),np.array([[1],[-1],[2],[0.77]]))))\nx1new.columns=[\"x1\",\"x2\"]\nyp2new = model.predict(x1new)\nprint(np.hstack((x1new,yp2new)))","a7e72811":"d=pd.read_csv(\"..\/input\/survey.csv\")\nd=d.rename(index=str,columns={\"Wr.Hnd\":\"WrHnd\"})\nd = d[[\"WrHnd\",\"Height\"]]\n#.head()\nprint(d.isnull().values.any())\nprint(d.isnull().sum())","18e71c18":"#Checking for Null\/NaN values\nd = d.dropna()\nprint(\"Check for NaN\/null values:\\n\",d.isnull().values.any())\nprint(\"Number of NaN\/null values:\\n\",d.isnull().sum())","67e18272":"# Simple Linear Regression \ninputDF = d[[\"WrHnd\"]]\noutcomeDF = d[[\"Height\"]]\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outcomeDF)\n\nprint(model.intercept_, model.coef_)","2f95b5ca":"d = pd.read_csv(\"..\/input\/clock.csv\")\nprint(d.head())\nprint(\"Check for NaN\/null values:\\n\",d.isnull().values.any())\nprint(\"Number of NaN\/null values:\\n\",d.isnull().sum())","65d78b3c":"#Multiple Linear Regression\ninputDF = d[[\"Bidders\",\"Age\"]]\noutputDF = d[[\"Price\"]]\n\nmodel = lm.LinearRegression()\nresults = model.fit(inputDF,outputDF)\n\nprint(model.intercept_, model.coef_)","fd9f80ab":"### **1. Inroduction to NumPy:**","ee546753":"### **7. Exercise Questions:**\n\nQ1. Using **survey.csv**, build a simple linear regression based model using \"Height\" as a dependent variable and \"WrHnd\" as independent variable.","c7cb521e":"**Voil\u00e0! This is the end of the lab session for week 2.** <br>\nDo not forget to commit your notebook and set the access to private. Share the notebook with Prof. Karim (Kaggle id: karimshaikh) and Manish Varma (Kaggle id: manishvarma).","41665eea":"### **6. Multiple Linear Regression using Scikit-Learn:**","1b76d324":"### **2. Intoduction to Scikit-Learn:**\n\nScikit-learn also known as sklearn will be used to create your models. Scikit-learn is one of the most popular libraries for modeling the types of data typically stored in DataFrames.\n\nThe steps to building and using a model are:<br>\n\n1. **Define**: Identifying the type of model that will be used. <br>\n2. **Fit**: Capture patterns from provided data. This is the heart of modeling.<br>\n3. **Predict**: Model created will be used to make predictions.<br>\n4. **Evaluate**: Determine how accurate the model's predictions are.<br>\n\nBelow is an example of the four steps described for Linear Regression.\n\n**Import model:** <br>\nfrom sklearn import linear_model as lm\n\n**Define model:** <br>\nmodel = lm.LinearRegression()\n\n**Fit model:** <br>\nmodel.fit(X, y)\n\n**Predict:** <br>\nmodel.predict(X.head())","004b7f8c":"Q2. Using **clock.csv**, build a multiple linear regression based model using \"Price\" as a dependent variable and, \"Bidders\" and \"Age\" as independent variables.","bc6fa95d":"### **4. Simple Linear Regresion using Scikit-Learn:**","c3f6a9ae":"### **3. Simple Linear Regresion using NumPy functions:**","3870fc26":"**Input Dataframe:**\n![Matrix Transpose](https:\/\/i.ibb.co\/m50j7HW\/MLP1.png)\n **Regression Coefficients:**\n![Regression Coefficients](https:\/\/i.ibb.co\/19j2rjt\/MLP2.png)","cbee7e9b":"### **Python Libraries:**","685ab51f":"#  **Simple and Multiple Linear Regression**\nLab Exercises - Week 2\n\n----------","95550be7":"## **Notebook Contents:**\n1. Inroduction to NumPy functions. (Scope: Lab Exercise)\n2. Intoduction to Scikit-Learn functions. (Scope: Lab Exercise)\n3. Simple Linear Regresion using NumPy functions.\n4. Simple Linear Regresion using Scikit-Learn.\n5. Multiple Linear Regression using NumPy functions.\n6. Multiple Linear Regression using Scikit-Learn.\n7. Exercise questions\n\n----------","f3c320bc":"### **5. Multiple Linear Regression using NumPy functions:**"}}