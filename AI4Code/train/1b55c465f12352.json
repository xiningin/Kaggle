{"cell_type":{"382bef82":"code","96b33a8c":"code","1c8c6fda":"code","3d649c8b":"code","bf5e7278":"code","68616818":"code","1c02a44e":"code","694e0e2b":"code","97d17c1c":"code","0191c493":"code","c027c0fe":"code","01f8f703":"code","96045653":"code","1ab14547":"code","a31c0adf":"code","ccf9534a":"code","f06858f0":"code","060bfb48":"code","f31327be":"code","328cf623":"code","9fe53929":"code","88c0a07b":"code","a438aa44":"code","fd166e5d":"code","eca88001":"code","eee472d3":"code","6803dfd5":"code","39232d6b":"code","a35b6b8e":"code","e612118f":"code","ee4a752a":"code","0c65cd56":"code","c8da0783":"code","079c8137":"code","655dbac5":"code","ef962bb9":"code","ea5fdf7e":"code","dfb1b196":"code","31216260":"code","fc32a0f6":"code","2b52e70f":"code","9b6f60f4":"code","360cbce4":"code","0d402c40":"code","a78924c2":"code","e1d2d03f":"code","6b56a33d":"code","2db56a51":"code","bf5f801d":"code","585e54f0":"code","3a57c093":"code","46eeaee9":"code","6b365199":"code","d55ec355":"code","0913d852":"code","a2a1dd00":"code","194f5d49":"code","d7a560e2":"code","b4df968a":"code","2e8050f5":"code","50a9c35c":"code","971b97f0":"code","148ee43f":"code","94ebc2da":"code","c9a2c1e1":"code","bc8d0c63":"code","5b44927a":"code","fae03c21":"code","9cfaeb13":"code","0f41f6c5":"code","51f76eb8":"code","76e11122":"code","1d92947d":"code","434dc2e9":"code","a71eadaa":"code","f8bb353d":"code","91350b6e":"code","cf27fff6":"code","785a5579":"code","292c4dc1":"code","ffdfc01b":"code","bf4a5d1d":"code","9023b517":"code","28680db6":"code","5f0f6128":"code","bd688a0e":"code","57b2adb4":"code","a72eb2a6":"code","011063a0":"code","9734ffc0":"code","d69469e4":"code","ccd3f245":"code","b3702c7a":"markdown","b4eb740a":"markdown"},"source":{"382bef82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","96b33a8c":"adult_df = pd.read_csv('..\/input\/adult.csv')","1c8c6fda":"adult_df.head()","3d649c8b":"adult_df.info()","bf5e7278":"#lets go through each of the columns and decide what action to be taken","68616818":"import matplotlib.pyplot as plt","1c02a44e":"plt.boxplot(adult_df['age'])\nplt.show()","694e0e2b":"plt.hist(adult_df['age'])\nplt.show()","97d17c1c":"#i dont see any problems with this col; we can leave it as is","0191c493":"obj_cols_to_be_treated = []","c027c0fe":"adult_df['workclass'].value_counts()","01f8f703":"obj_cols_to_be_treated.append('workclass')","96045653":"adult_df.columns","1ab14547":"adult_df['education'].value_counts()","a31c0adf":"obj_cols_to_be_treated.append('education')","ccf9534a":"adult_df['educational-num'].value_counts()","f06858f0":"#it is clear that the educational-num is an encoded col of education; so we will jus use this and not encode education again\nobj_cols_to_be_treated.remove('education')","060bfb48":"adult_df['marital-status'].value_counts()","f31327be":"obj_cols_to_be_treated.append('marital-status')","328cf623":"adult_df['occupation'].value_counts()","9fe53929":"obj_cols_to_be_treated.append('occupation')","88c0a07b":"#'relationship', 'race', 'gender',\n","a438aa44":"adult_df['relationship'].value_counts()","fd166e5d":"obj_cols_to_be_treated.append('relationship')","eca88001":"adult_df['race'].value_counts()","eee472d3":"obj_cols_to_be_treated.append('race')","6803dfd5":"adult_df['gender'].value_counts()","39232d6b":"obj_cols_to_be_treated.append('gender')","a35b6b8e":"#all but one of the obj cols are reviewed","e612118f":"plt.boxplot(adult_df['capital-gain'])\nplt.show()","ee4a752a":"plt.hist(adult_df['capital-gain'])\nplt.show()","0c65cd56":"#this is a skewed column; but no action for now; \n#lets jus move on to prediction after reviewing the output col","c8da0783":"adult_df['income'].describe()","079c8137":"adult_df['income'].value_counts()","655dbac5":"adult_df['income_less_than_50K_1_0'] = adult_df['income'].map({'<=50K':1, '>50K':0})","ef962bb9":"adult_df['income_less_than_50K_1_0'].value_counts()","ea5fdf7e":"#OK, lets numericalize the obj cols","dfb1b196":"obj_cols_to_be_treated","31216260":"for obj_col in obj_cols_to_be_treated:\n    adult_df[obj_col + '_cat'] = adult_df[obj_col].astype('category').cat.as_ordered()\n    adult_df[obj_col + '_cat_codes'] = adult_df[obj_col + '_cat'].cat.codes","fc32a0f6":"encoded_cols = [col for col in adult_df.columns if '_cat_codes' in col]","2b52e70f":"encoded_cols","9b6f60f4":"#add the encoded cols and original numeric cols from df to create the input vars list\ninput_vars = encoded_cols + ['age','educational-num','capital-gain','capital-loss','hours-per-week']","360cbce4":"output_var = 'income_less_than_50K_1_0'","0d402c40":"from sklearn.ensemble import RandomForestClassifier","a78924c2":"#lets start with a single decision tree with max depth of 3\nrf1 = RandomForestClassifier(n_estimators=1, max_depth=3)","e1d2d03f":"rf1.fit(X=adult_df[input_vars], y=adult_df[output_var])","6b56a33d":"rf1.score(X=adult_df[input_vars], y=adult_df[output_var])","2db56a51":"from treeinterpreter import treeinterpreter as ti","bf5f801d":"adult_df.head()","585e54f0":"sample_record = adult_df.loc[0:1]","3a57c093":"sample_record","46eeaee9":"prediction, bias, contribution = ti.predict(X=sample_record[input_vars], model=rf1)","6b365199":"prediction.shape","d55ec355":"prediction","0913d852":"bias.shape","a2a1dd00":"bias","194f5d49":"adult_df['income_less_than_50K_1_0'].value_counts()","d7a560e2":"adult_df['income_less_than_50K_1_0'].value_counts()[0] \/ adult_df.shape[0]","b4df968a":"#we can see that the bias value doesnt change across instances; it is the proportion of that output variable","2e8050f5":"contribution.shape","50a9c35c":"contribution[0].shape","971b97f0":"contribution[0]","148ee43f":"input_vars","94ebc2da":"#get more trees\nrf2 = RandomForestClassifier(n_estimators=10, max_depth=3)","c9a2c1e1":"rf2.fit(X=adult_df[input_vars], y=adult_df[output_var])\nrf2.score(X=adult_df[input_vars], y=adult_df[output_var])","bc8d0c63":"rf3 = RandomForestClassifier(n_estimators=10, max_depth=5)\nrf3.fit(X=adult_df[input_vars], y=adult_df[output_var])\nrf3.score(X=adult_df[input_vars], y=adult_df[output_var])","5b44927a":"feat_imp_dict ={}\nfor i in range(len(input_vars)):\n    feat_imp_dict[input_vars[i]] = rf3.feature_importances_[i]","fae03c21":"feat_imp_df = pd.DataFrame.from_dict(feat_imp_dict, orient= 'index')","9cfaeb13":"feat_imp_df.reset_index(inplace=True)\nfeat_imp_df.columns = ['feature', 'feat_imp']","0f41f6c5":"feat_imp_df.sort_values(ascending=False, by=['feat_imp'], inplace=True)","51f76eb8":"feat_imp_df.head()","76e11122":"from treeinterpreter import treeinterpreter as ti","1d92947d":"prediction, bias, contribution = ti.predict(X=sample_record[input_vars], model=rf3)","434dc2e9":"prediction","a71eadaa":"contribution[0]","f8bb353d":"#lets look at a few cases where output var is 0","91350b6e":"adult_df[adult_df['income_less_than_50K_1_0'] ==0]","cf27fff6":"adult_df[adult_df['income_less_than_50K_1_0'] ==0].loc[2:3]","785a5579":"sample_record_0s = adult_df[adult_df['income_less_than_50K_1_0'] ==0].loc[2:3]","292c4dc1":"prediction, bias, contribution = ti.predict(X=sample_record_0s[input_vars], model=rf3)","ffdfc01b":"prediction","bf4a5d1d":"bias","9023b517":"contribution[1]","28680db6":"#the third item from last is the one which impacts the most\ninput_vars[-3]","5f0f6128":"sample_record_0s","bd688a0e":"from sklearn.tree import export_graphviz","57b2adb4":"s=export_graphviz(rf1.estimators_[0], out_file=None, feature_names=input_vars, filled=True,\n                      special_characters=True, rotate=True, precision=3)","a72eb2a6":"from IPython.display import display","011063a0":"import IPython","9734ffc0":"from sklearn.tree import export_graphviz","d69469e4":"import graphviz","ccd3f245":"IPython.display.display(graphviz.Source(s))","b3702c7a":"# Let's use tree interpreter","b4eb740a":"# Observations:\n1. No Null values\n2. quite a few object columns"}}