{"cell_type":{"aa2ccb22":"code","6070e8c0":"code","9e0c1bd0":"code","a0cf2279":"code","c19e7d4c":"code","bc259e3d":"code","076423a4":"code","7eb61d94":"code","e45dfebc":"code","293258d8":"code","d7868de9":"code","1e27cf05":"code","ebedeb95":"code","d018e9dd":"code","698f5766":"code","98741d6d":"code","4f92c3f9":"code","029ce4a5":"code","04c5c89f":"code","454efec2":"code","218313b3":"code","747db9d8":"code","dc9d2e08":"code","28e018ba":"code","6543707e":"code","82f36ed2":"code","1c476350":"code","cc3ed077":"code","43ac21f5":"code","4b8be7a1":"code","4db3f026":"code","f63b9be1":"code","f3ecbf8b":"code","61d4600c":"code","cad6cd46":"code","19b2884a":"code","d7a0c0b5":"code","0ea0bca9":"code","f4f40bd3":"code","b3da0449":"code","1fd9770b":"code","114bfef1":"code","0dac92a0":"code","92aa9ca4":"code","ecc5e77c":"code","5b28789c":"code","b2436cea":"code","de9a5de7":"code","0639a1b1":"code","bee81952":"code","b4b5067a":"code","fa2dacc3":"code","a01a3512":"code","7bb0488f":"code","16c01acc":"code","64d1d1a8":"code","9014b8e5":"markdown","bdc5b361":"markdown","b5dd197b":"markdown","4e9c155f":"markdown","9fed10d3":"markdown","dab26f69":"markdown","298d1a66":"markdown","22fd021e":"markdown","35e93555":"markdown","8e6a7831":"markdown","3cd66d6f":"markdown","e1d84a7d":"markdown","c168765c":"markdown","7a8d348f":"markdown","1c1c4e2a":"markdown","1ce65fce":"markdown","06dc2b73":"markdown","9ca590a2":"markdown","6d684316":"markdown","b2d4b55d":"markdown","86b36234":"markdown","fb266e53":"markdown","57723856":"markdown","9759c147":"markdown","77085a1d":"markdown","ab561d66":"markdown","540f2be0":"markdown","31236136":"markdown","1e6ac955":"markdown","9d58ac9c":"markdown","18ce2701":"markdown","51368225":"markdown","68380277":"markdown","c074376f":"markdown"},"source":{"aa2ccb22":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics","6070e8c0":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain.describe()","9e0c1bd0":"# ID\u306f\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u306b\u4e0d\u8981\u306e\u305f\u3081\u3001\u4e00\u65e6\u843d\u3068\u3059\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)","a0cf2279":"print (\"Size of train data after dropping Id: {}\" .format(train.shape))\nprint (\"Size of test data after dropping Id: {}\" .format(test.shape))","c19e7d4c":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","bc259e3d":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","076423a4":"# Find correlations with the target and sort\ncorrelations = train.corr()['SalePrice'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(30))\nprint('\\nMost Negative Correlations:\\n', correlations.head(30))","7eb61d94":"corrmat = train.corr()\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(train[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","e45dfebc":"sns.barplot(train.OverallQual,train.SalePrice)","293258d8":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","d7868de9":"sns.scatterplot(train.GrLivArea,train.TotalBsmtSF)","1e27cf05":"sns.distplot(train['SalePrice'])\nplt.show()","ebedeb95":"# \u5bfe\u6570\u8a08\u7b97\u3092\u5b9f\u65bd\n# \u6570\u5b57\u306e\u3070\u3089\u3064\u304d\u3001\u504f\u308a\u3092\u5c0f\u3055\u304f\u3059\u308b\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n\nsns.distplot(train['SalePrice'])\nplt.show()","d018e9dd":"# \u5168\u30c7\u30fc\u30bf\u3092\u4e00\u65e6\u7d50\u5408\n# \u30c6\u30b9\u30c8\u3082\u542b\u3081\u305f\u5168\u30c7\u30fc\u30bf\u3067\u7279\u5fb4\u91cf\u3092\u898b\u3066\u3044\u304f\uff08\u4f8b\uff1a\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\u969b\u306emedian\u5024\u306a\u3069\uff09\nntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","698f5766":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\n# TOP30\u3060\u3051\u3092\u4e00\u65e6\u898b\u308b\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})","98741d6d":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","4f92c3f9":"# \u6700\u3082\u6b20\u640d\u5024\u306e\u591a\u3044PoolQC\uff08\u30d7\u30fc\u30eb\u306e\u54c1\u8cea\uff09\u3092\u898b\u308b\nall_data.PoolQC.loc[all_data.PoolQC.notnull()]","029ce4a5":"# PoolQC\u306b\u304a\u3044\u3066Null\u306e\u90e8\u5206\u306fNo Pool\uff08\u30d7\u30fc\u30eb\u304c\u306a\u3044\uff09\u3068\u3044\u3046\u5834\u5408\u3002\u4eca\u56de\u306fNull\u306e\u90e8\u5206\u3092None\u3068\u3044\u3046\u6587\u5b57\u5217\u3067\u57cb\u3081\u308b\nall_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","04c5c89f":"# MiscFeature(\u305d\u306e\u4ed6\u306e\u7279\u5fb4)\u3067\u306eNull\u306fno misc feature\n# Alley\u3001Fence\u3001FireplaceQu\u3082\u540c\u69d8\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","454efec2":"# LotFrontage(\u9593\u53e3\u306e\u5e83\u3055)\n# Grouping by Neighborhood and Check the LotFrontage. Most of the grouping has similar areas\ngrouped_df = all_data.groupby('Neighborhood')['LotFrontage']\n\nfor key, item in grouped_df:\n    print(key,\"\\n\")\n    print(grouped_df.get_group(key))\n    break\n","218313b3":"sns.stripplot(x = train.Neighborhood.values, y = train.LotFrontage.values, jitter=0.1, alpha=0.5)","747db9d8":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","dc9d2e08":"# GarageType\u3001GarageFinish\u3001GarageQual\u3001GarageCond\u306fNone\u3067\u57cb\u3081\u308b\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    all_data[col] = all_data[col].fillna('None')","28e018ba":"abc = ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','GarageYrBlt', 'GarageArea', 'GarageCars']\nall_data.groupby('GarageType')[abc].count()","6543707e":"#GarageYrBlt, GarageArea and GarageCars\u306f0\u3067\u57cb\u3081\u308b\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","82f36ed2":"#BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath\u30820\u3067\u57cb\u3081\u308b\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","1c476350":"#BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2 \u304cnull\u3068\u3044\u3046\u3053\u3068\u306f\u5730\u4e0b\u5ba4\u306b\u95a2\u4fc2\u3059\u308b\u7279\u5fb4\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001None\u3067\u57cb\u3081\u308b\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","cc3ed077":"#MasVnrArea\u3001MasVnrType\u306f\u77f3\u9020\u308a\u306e\u30a8\u30ea\u30a2\u306e\u30b5\u30a4\u30ba\u306a\u306e\u3067\u3001NA\u306e\u5834\u5408\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u30010\u3092\u57cb\u3081\u308b\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","43ac21f5":"#MSZoning\u306fRL\u304c\u6700\u3082\u591a\u3044\u5024\u306a\u306e\u3067RL\u3067\u57cb\u3081\u308b\nall_data['MSZoning'].value_counts()","4b8be7a1":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","4db3f026":"#Utilities\u306f\u307b\u3069\u3093\u3069\u306e\u5024\u3067\u540c\u3058AllPub\u3067\u3042\u308a\u3001\u3042\u307e\u308a\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u5217\u3054\u3068\u524a\u9664\u3059\u308b\nall_data['Utilities'].value_counts()","f63b9be1":"all_data = all_data.drop(['Utilities'], axis=1)","f3ecbf8b":"# Functional\u306b\u3064\u3044\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3001\u3069\u3046\u3084\u3089NA\u306e\u5834\u5408\u306ftypical\u3068\u66f8\u3044\u3066\u3042\u308b\u3089\u3057\u3044\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","61d4600c":"#Electrical,KitchenQual, Exterior1st, Exterior2nd, SaleType\u3082\u30ab\u30c6\u30b4\u30ea\u30fc\u578b\u306e\u305f\u3081\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3088\u3046\u306b\u3059\u308b\nmode_col = ['Electrical','KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType']\nfor col in mode_col:\n    all_data[col] = all_data[col].fillna(all_data[col].mode()[0])","cad6cd46":"# MSSubClass\u306fNA\u306f\u5efa\u7269\u306e\u30af\u30e9\u30b9\u304c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001None\u3067\u7a74\u57cb\u3081\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","19b2884a":"# all_data['MSSubClass'] = all_data['MSSubClass'].transform(\n#         lambda x: x.fillna(x.median()))","d7a0c0b5":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","0ea0bca9":"all_data['OverallCond'].value_counts()","f4f40bd3":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","b3da0449":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","1fd9770b":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n# \u76f8\u95a2\u306e\u5f37\u30442\u3064\u3092\u639b\u3051\u5408\u308f\u305b\u308b\n# https:\/\/www.kaggle.com\/katotaka\/prediction-house-prices-eda\nall_data[\"Interaction\"] = all_data[\"TotalSF\"] * all_data[\"OverallQual\"]","114bfef1":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(15)","0dac92a0":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)","92aa9ca4":"all_data = pd.get_dummies(all_data)\nall_data.shape","ecc5e77c":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\ntrain.shape","5b28789c":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb","b2436cea":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","de9a5de7":"KRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nscore = rmsle_cv(KRR)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","0639a1b1":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nscore = rmsle_cv(lasso)\nprint(\"Lasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","bee81952":"ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nscore = rmsle_cv(ENet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","b4b5067a":"GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nscore = rmsle_cv(GBoost)\nprint(\"Gradient Boosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","fa2dacc3":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nscore = rmsle_cv(model_xgb)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","a01a3512":"model_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nscore = rmsle_cv(model_lgb)\nprint(\"LGBM score: {:.4f} ({:.4f})\\n\" .format(score.mean(), score.std()))","7bb0488f":"LassoMd = lasso.fit(train.values,y_train)\nENetMd = ENet.fit(train.values,y_train)\nKRRMd = KRR.fit(train.values,y_train)\nGBoostMd = GBoost.fit(train.values,y_train)\nXGBMd = model_xgb.fit(train.values, y_train)\nLGBMd = model_lgb.fit(train.values, y_train)","16c01acc":"finalMd = (np.expm1(LassoMd.predict(test.values)) + np.expm1(ENetMd.predict(test.values)) + np.expm1(KRRMd.predict(test.values)) + np.expm1(GBoostMd.predict(test.values))  + np.expm1(XGBMd.predict(test.values))  + np.expm1(LGBMd.predict(test.values)) ) \/ 6\nfinalMd","64d1d1a8":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = finalMd\nsub.to_csv('submission.csv',index=False)","9014b8e5":"# \u30e2\u30c7\u30eb\u306e\u4f5c\u6210\n1. Importing Libraries\n\n2. We will use models\n    - Lasso\n    - Ridge\n    - ElasticNet\n    - Gradient Boosting\n    - XGBoosting\n    - LightGBM\n3. Find the Cross Validation Score.\n\n4. Calculate the mean of all model's prediction.\n5. Submit the CSV file.","bdc5b361":"\u9762\u7a4d\u95a2\u4fc2\u306e\u5024\u306f\u4e0d\u52d5\u7523\u4fa1\u683c\u306b\u5927\u304d\u304f\u5f71\u97ff\u3059\u308b\u305f\u3081\u3001\u5168\u9762\u7a4d\u306e\u5408\u8a08\u306e\u7279\u5fb4\u91cf\u3092\u65b0\u3057\u304f\u4f5c\u6210\u3059\u308b","b5dd197b":"### \u6b20\u640d\u5024\u306e\u88dc\u5b8c","4e9c155f":"### \u6b20\u640d\u5024\u306e\u78ba\u8a8d","9fed10d3":"# \u53c2\u8003\u30ab\u30fc\u30cd\u30eb\nhttps:\/\/www.kaggle.com\/vjgupta\/reach-top-10-with-simple-model-on-housing-prices","dab26f69":"# object\u578b\u4ee5\u5916\u306e\u7279\u5fb4\u91cf\u306e\u504f\u308a\u3092\u898b\u308b","298d1a66":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","22fd021e":"### \u6570\u5024\u578b\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u5024\u306e\u5bfe\u5fdc\n\u6570\u5024\u578b\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3092\u304d\u3061\u3093\u3068\u30ab\u30c6\u30b4\u30ea\u30fc\u578b\u306b\u5909\u63db\u3057\u306a\u3044\u5834\u5408\u3001\u30e2\u30c7\u30eb\u306b\u3088\u3063\u3066\u306f\u6570\u5024\u306e\u5927\u5c0f\u95a2\u4fc2\u3092\u5224\u65ad\u3057\u3066\u3057\u307e\u3046\u3002\n\u305d\u306e\u305f\u3081\u3061\u3083\u3093\u3068\u5909\u63db\u304c\u5fc5\u8981","35e93555":"## \u3082\u3046\u5c11\u3057\u8a73\u7d30\u306bSalePrice\u3068Feature\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u308b","8e6a7831":"### \u6b20\u640d\u5024\u304c\u3082\u3046\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b","3cd66d6f":"### Gradient Boosting Regression","e1d84a7d":"### Lasso Regression","c168765c":"## \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u95a2\u6570","7a8d348f":"# \u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9","1c1c4e2a":"# Dummy-Encoding\n\u30ab\u30c6\u30b4\u30ea\u30fc\u578b\u306e\u5024\u3092one-hotencoding\u3067\u5909\u63db\u3059\u308b","1ce65fce":"LotFrontage\uff08\u9593\u53e3\u306e\u5e83\u3055\uff09\u306fNeighborhood\u306b\u95a2\u4fc2\u3042\u308a\u305d\u3046\u3060\u304b\u3089\u3001Neighborhood\u3054\u3068\u306e\u4e2d\u9593\u5024\u3092\u6b20\u640d\u5024\u306b\u683c\u7d0d\u3059\u308b\u3088\u3046\u306b\u3059\u308b","06dc2b73":"### LightGBM","9ca590a2":"# Label Encoding","6d684316":"# \u5916\u308c\u5024\u306e\u5bfe\u5fdc\n- GrLivArean\u306e\u5916\u308c\u5024\u3092\u53d6\u308b\u3053\u3068\u3092\u3001\u30c7\u30fc\u30bf\u4f5c\u6210\u8005\u304c\u63a8\u85a6\u3057\u3066\u3044\u308b\u305f\u30814000\u4ee5\u4e0a\u306e\u3082\u306e\u3092\u9664\u5916\u3059\u308b\u3002\n- \u30c7\u30fc\u30bf\u4f5c\u6210\u8005\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a00\u53ca\u3057\u3066\u3044\u308b\u3002\n- I would recommend removing any houses with more than 4000 square feet from the data set (which eliminates these five unusual observations) before assigning it to students.","b2d4b55d":"## \u5168\u4e88\u6e2c\u5024\u306e\u5e73\u5747\u306e\u7b97\u51fa","86b36234":"## \u7d50\u679c\u306e\u9001\u4fe1","fb266e53":"### Elastic Net Regression","57723856":"# \u76ee\u7684\u5909\u6570\u306e\u5909\u5f62","9759c147":"- TotalBsmtSF\u3068GrLivArea\u306f\u540c\u3058\u306b\u306a\u308b\u30b1\u30fc\u30b9\u304c\u591a\u304f\u3001TotalBsmtSF\u306e\u5024\u304cGrLivArea\u306e\u5024\u3092\u6765\u308c\u308b\u3053\u3068\u304c\u307e\u308c\u3067\u3042\u308b","77085a1d":"\u5b9f\u30c7\u30fc\u30bf\u3092\u6271\u3046\u969b\u3001\u6b63\u898f\u5206\u5e03\u306b\u306a\u3063\u3066\u304a\u3089\u305a\u3001\u3086\u304c\u3093\u3060\u30c7\u30fc\u30bf\u3082\u591a\u304f\u5b58\u5728\u3059\u308b\u3002\u305d\u306e\u305f\u3081\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081Box-Cox\u5909\u63db\u3092\u5229\u7528\u3059\u308b","ab561d66":"- OverallQual\uff08\u5bb6\u306e\u72b6\u614b\uff09\u306b\u3088\u3063\u3066\u4fa1\u683c\u304c\u660e\u3089\u304b\u306b\u4e0a\u6607\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b","540f2be0":"## \u6b20\u640d\u5024","31236136":"- \u6563\u5e03\u56f3\u3092\u898b\u308b\u3068TotalBsmtSF\uff08\u5730\u4e0b\u9762\u7a4d\uff09\u3068GrLivArea\uff08Above ground living area square feet\uff09\u306e\u5f62\u304c\u3061\u3087\u3063\u3068\u5909\u306a\u3053\u3068\u304c\u5206\u304b\u308b\n","1e6ac955":"### XGBoost","9d58ac9c":"\u76ee\u7684\u5909\u6570\uff08SalePrice\uff09\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u8d77\u3053\u3059\u3068\u3001\u6b63\u898f\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308b\u3002\u305d\u306e\u305f\u3081\u5bfe\u6570\u5316\u3059\u308b\uff08\u5024\u306e\u632f\u308c\u5e45\u3092\u5c0f\u3055\u304f\u3059\u308b\u3053\u3068\u3067\u3070\u3089\u3064\u304d\u3092\u5c0f\u3055\u304f\u3059\u308b\uff09","18ce2701":"- \u4ee5\u4e0b\u306e\u9805\u76ee\u3068SalePrice\u306e\u76f8\u95a2\u95a2\u4fc2\u304c\u5f37\u3044\u3053\u3068\u304c\u5206\u304b\u308b\n- OverallQual, GrLivArea, TotalBsmtSF, GarageCars, GarageArea, 1stFlrSF\n- \u4e0a\u8a18\u306e\u5185GarageCars\u3068GarageArea\u306e\u76f8\u95a2\u304c\u5f37\u3044\uff08\u307e\u3042\u6b62\u3081\u3089\u308c\u308b\u8eca\u306e\u6570\u3068\u8eca\u5eab\u306e\u5927\u304d\u3055\u304c\u5927\u304d\u3044\u306e\u306f\u5f53\u305f\u308a\u524d\u304b\u306a\u30fb\u30fb\u30fb\u30fb\uff09\n- TotalBSMTSF\uff08\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d\uff09\u30681stFlrSF\uff081\u968e\u306e\u9762\u7a4d\uff09\u306e\u76f8\u95a2\u3082\u9ad8\u3044","51368225":"### Ridge Regression","68380277":"# \u76f8\u95a2\u95a2\u4fc2\u306e\u78ba\u8a8d\n- \u76f8\u95a2\u95a2\u4fc2\u304c0.5\u4ee5\u4e0a\u306e\u3082\u306e\u3092\u78ba\u8a8d\u3059\u308b","c074376f":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u30a4\u30f3\u30dd\u30fc\u30c8"}}