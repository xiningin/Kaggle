{"cell_type":{"88814b49":"code","0072cf4f":"code","bba22a92":"code","b310479e":"code","2df944a9":"code","9d073b6b":"code","a814342d":"code","32148549":"code","06c0b58e":"code","4888736d":"code","cdb47cb9":"code","014c8a58":"code","ebbc32d8":"code","f496986e":"code","84d50ded":"code","4c6e3101":"code","4e021169":"code","8f4c2be1":"code","54f9436a":"code","47bcd515":"code","57b46a7c":"code","3c6f38a8":"code","d9596a90":"code","fcae4fdb":"code","ff93801a":"code","b5eb7582":"code","97791c65":"markdown","61a16d50":"markdown","d784628d":"markdown"},"source":{"88814b49":"import sys\nsys.path.append(\"..\/input\/timmmaster\")\nsys.path.append(\"..\/input\/pytorch-toolbelt\")","0072cf4f":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\n\nfrom argparse import Namespace\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader, Dataset\nfrom torch.cuda.amp import autocast\n\nimport timm\nfrom pytorch_toolbelt.inference import tta\nfrom albumentations.pytorch import ToTensorV2\nimport cv2\nimport albumentations as A\n\nfrom pytorch_lightning.utilities.seed import seed_everything\n\nfrom pytorch_lightning import LightningDataModule, LightningModule\nimport pytorch_lightning as pl\n","bba22a92":"test_df = pd.read_csv('..\/input\/petfinder-pawpularity-score\/test.csv')","b310479e":"class Pawpularity(pl.LightningModule):\n    def __init__(self, config):\n        super().__init__()\n        self.config = config\n        self.backbone = timm.create_model(config.backbone_name,\n                                          pretrained=not config.predict,\n                                          num_classes=0)\n        self.head = nn.Sequential(\n            nn.Dropout(0.2),\n            nn.Linear(self.backbone.num_features, 256),\n            nn.GELU(),\n            nn.Dropout(0.2),\n            nn.Linear(256, 1)\n        )\n\n        self.save_hyperparameters(config)\n\n    def forward(self, x):\n        return torch.sigmoid(self.head(self.backbone(x)))*100","2df944a9":"class PawpularityDataset(Dataset):\n    def __init__(self, df, image_root, transform):\n        self._X = df[\"Id\"].values\n        self._y = None\n        if \"Pawpularity\" in df.keys():\n            self._y = df[\"Pawpularity\"].values\n        self.transform = transform\n        self.image_root = image_root\n\n    def __len__(self):\n        return len(self._X)\n\n    def __getitem__(self, idx):\n        image_path = self._X[idx]\n        image = cv2.imread(self.image_root+image_path+'.jpg')\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        transformed = self.transform(image=image)\n        transformed_image = transformed[\"image\"]\n        if self._y is not None:\n            label = self._y[idx]\n            return transformed_image, torch.FloatTensor([label])\n        return transformed_image","9d073b6b":"fold_preds = []","a814342d":"def build_transform(x):\n    pass","32148549":"def predict(config, weight=1):\n    _, valid_transform = build_transform(config)\n    print(valid_transform)\n    for fold in range(5):\n        print(fold)\n        dataset = PawpularityDataset(test_df, config.img_root, valid_transform)\n        dataloader = DataLoader(dataset, batch_size=16, shuffle=False, num_workers=2)\n\n        model = Pawpularity.load_from_checkpoint(f'{config.path}{fold}.ckpt', \n                                                 config=config, strict=False)\n        model.eval()\n        model.cuda()\n\n        all_pred, all_label = [], []\n        with torch.no_grad():\n            with autocast():\n                for images in dataloader:\n                    pred = tta.fliplr_image2label(model, images.cuda())\n                    all_pred.append(pred.flatten().detach().cpu().numpy())\n\n        all_pred = np.concatenate(all_pred)\n\n        for _ in range(weight):\n            fold_preds.append(all_pred)","06c0b58e":"def build_transform(config):\n    \n    valid_aug = [\n        A.ShiftScaleRotate(rotate_limit=15, p=0.5,border_mode=cv2.BORDER_CONSTANT, value=0,shift_limit=0),\n#         A.SmallestMaxSize(max_size=config.img_size),\n        A.RandomResizedCrop(config.img_size, config.img_size,scale=(0.7,1)),\n        A.ColorJitter(p=0.5),\n        A.RandomBrightnessContrast(p=0.3),\n        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n        ToTensorV2()\n    ]\n    valid_transform = A.Compose(valid_aug)\n    return None, valid_transform","4888736d":"seed_everything(1991)","cdb47cb9":"swin_base_384_config = Namespace(\n    backbone_name = 'swin_base_patch4_window12_384_in22k',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/swin-base-bce-384-1225\/swin_base_patch4_window12_384_in22k_',\n    img_size=384\n)\npredict(swin_base_384_config, 1)","014c8a58":"cait_384_config = Namespace(\n    backbone_name = 'cait_s36_384',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/cait-s-bce-384-1227\/cait_s36_384_',\n    img_size=384\n)\npredict(cait_384_config, 1)","ebbc32d8":"# xcit\nconfig = Namespace(\n    backbone_name = 'xcit_medium_24_p16_384_dist',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/xcit-m-bce-384-1228\/xcit_medium_24_p16_384_dist_',\n    img_size=384\n)\npredict(config, 1)","f496986e":"def build_transform(config):\n    valid_aug = [\n        A.Resize(config.img_size, config.img_size),\n        A.ColorJitter(p=0.5),\n        A.RandomBrightnessContrast(p=0.3),\n        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n        ToTensorV2()\n    ]\n    valid_transform = A.Compose(valid_aug)\n    return None, valid_transform","84d50ded":"seed_everything(42)","4c6e3101":"config = Namespace(\n    backbone_name = 'swin_base_patch4_window12_384_in22k',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/swin-384-42-0110\/swin_base_patch4_window12_384_in22k_',\n    img_size=384\n)\npredict(config, 1)","4e021169":"config = Namespace(\n    backbone_name = 'cait_s36_384',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/cait-s-384-42-0110\/cait_s36_384_',\n    img_size=384\n)\npredict(config, 1)","8f4c2be1":"# xcit\nconfig = Namespace(\n    backbone_name = 'xcit_medium_24_p16_384_dist',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/xcit-384-42-0110\/xcit_medium_24_p16_384_dist_',\n    img_size=384\n)\npredict(config, 1)","54f9436a":"def build_transform(config):\n    \n    valid_aug = [\n        A.ShiftScaleRotate(rotate_limit=15, p=0.5,border_mode=cv2.BORDER_CONSTANT, value=0,shift_limit=0),\n#         A.SmallestMaxSize(max_size=config.img_size),\n#         A.CenterCrop(config.img_size, config.img_size),\n        A.RandomResizedCrop(config.img_size, config.img_size,scale=(0.7,1),ratio=(0.8,1.2)),\n        A.ColorJitter(p=0.5),\n        A.RandomBrightnessContrast(p=0.3),\n        A.Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225)),\n        ToTensorV2()\n    ]\n    valid_transform = A.Compose(valid_aug)\n    return None, valid_transform","47bcd515":"seed_everything(1019)","57b46a7c":"config = Namespace(\n    backbone_name = 'swin_large_patch4_window12_384_in22k',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/slarge-384-1019-0112\/swin_large_patch4_window12_384_in22k_',\n    img_size=384\n)\npredict(config, 2)","3c6f38a8":"config = Namespace(\n    backbone_name = 'swin_large_patch4_window7_224_in22k',\n    predict= True,\n    img_root='..\/input\/petfinder-pawpularity-score\/test\/',\n    path = '..\/input\/swin-large-224-1019-0110\/swin_large_patch4_window7_224_in22k_',\n    img_size=224\n)\npredict(config, 1)","d9596a90":"print(len(fold_preds))","fcae4fdb":"test_df['Pawpularity'] = np.mean(fold_preds, axis=0)","ff93801a":"test_df[['Id', 'Pawpularity']].to_csv('submission.csv', index=False)","b5eb7582":"test_df[['Id', 'Pawpularity']].head(10)","97791c65":"## seed 1019","61a16d50":"## seed 42","d784628d":"## Seed 1991"}}