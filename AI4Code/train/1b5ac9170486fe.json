{"cell_type":{"b6b384e5":"code","1e3d75f8":"code","c4bb0913":"code","9e483f14":"code","6eebbde3":"code","72157ba7":"code","c1efa98a":"code","c88f5566":"code","af8f98de":"code","ad680c6c":"code","026953ea":"code","6f49fc54":"code","c77d4a04":"code","e56976ad":"code","c2800d20":"code","137d920e":"code","8bfbe228":"code","2be973e1":"code","bdea9987":"code","2eddb252":"code","f6ce01d8":"code","d08d8643":"code","7244a163":"code","5bbf8c9f":"code","bb2cd95b":"code","6b6f7174":"code","a28a6210":"code","78f11291":"code","fc6cf437":"code","6e80e3c5":"code","27c9a445":"code","028c232b":"code","f8344192":"code","3daf07db":"code","bf9ed394":"code","6c015252":"code","207a2da9":"code","2f868df1":"code","ebc67b9d":"code","9d15656e":"code","919aa0f4":"code","ad1fb7b1":"code","f4945580":"code","363332ff":"code","b9534335":"code","6c03152b":"code","5a18001c":"code","3058bb2e":"code","20b11e29":"code","ad045085":"code","3d3cd79e":"code","8ac588ae":"code","9c09ccd6":"code","9be4efce":"code","f02c9952":"code","4e739612":"code","266cc1fd":"code","191fa2ec":"code","81fb143b":"code","8a4dfac0":"code","e0cb1937":"code","c3cb7557":"code","018115a5":"markdown","30aa5ee8":"markdown","61c739a1":"markdown","f4a59d20":"markdown","e6548da4":"markdown","24218872":"markdown","20cdd106":"markdown","31698620":"markdown","1b6dd96a":"markdown","7e0a6ec2":"markdown","33e5ab53":"markdown"},"source":{"b6b384e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e3d75f8":"train =pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest =pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","c4bb0913":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","9e483f14":"train.head()","6eebbde3":"test.head()","72157ba7":"train.describe().T","c1efa98a":"train['Embarked'].value_counts()","c88f5566":"train['Embarked'].value_counts()","af8f98de":"train['Embarked'].value_counts(normalize=True)\n","ad680c6c":"train['Embarked'].value_counts(ascending=True)\n","026953ea":"train['Embarked'].value_counts(dropna=False)","6f49fc54":"train.isnull()","c77d4a04":"train.isnull().sum()","e56976ad":"for i in train.columns:\n    null_rate = train[i].isna().sum() \/ len(train) * 100 \n    if null_rate > 0 :\n        print(\"{} null rate: {}%\".format(i,round(null_rate,2)))","c2800d20":"train[\"Age\"].fillna(train[\"Age\"].mean(), inplace=True)","137d920e":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","8bfbe228":"sns.boxplot(data=train)","2be973e1":"sns.histplot(data=train)","bdea9987":"sns.countplot(x='Survived',hue='Sex', data=train)","2eddb252":"sns.countplot(x='Survived',hue='Pclass', data=train)","f6ce01d8":"train['Age'].plot.hist()","d08d8643":"train['Fare'].plot.hist(bins=25)","7244a163":"train['Fare'].plot.hist()","5bbf8c9f":"sns.pairplot(train)","bb2cd95b":"train.corr()","6b6f7174":"sns.heatmap(train.corr(),annot=True)","a28a6210":"train.info()","78f11291":"sns.countplot(x='SibSp',data=train)","fc6cf437":"sns.countplot(x='SibSp',data=train)","6e80e3c5":"col_names = train.columns\ncol_nunique = []\ncol_unique = []\nfor column in train.columns:\n    col_nunique.append(train[column].nunique())\n    col_unique.append(train[column].unique())\n    \nfeatures = pd.DataFrame({'Feature':col_names, 'Number of Categories': col_nunique, 'Categories': col_unique})\nfeatures = features[features['Number of Categories']<=6]\nfeatures","27c9a445":"cat_vars=[var for var in train.columns if train[var].dtypes=='O']\ncat_vars","028c232b":"num_vars=[var for var in train.columns if train[var].dtypes!='O']\nnum_vars","f8344192":"train.head()","3daf07db":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncat_cols = ['Sex', 'Embarked', 'Survived', 'Pclass',]\ntrain[cat_cols] = train[cat_cols].apply(le.fit_transform)\ntrain.head()","bf9ed394":"train.drop(['Name','Ticket','Cabin','PassengerId','Ticket'],axis='columns',inplace=True)","6c015252":"train.head()","207a2da9":"train.info()","2f868df1":"X = train.drop('Survived', axis=1)\ny = train['Survived']","ebc67b9d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","9d15656e":"X_train","919aa0f4":"X_train.shape","ad1fb7b1":"print('shape of x_train',X_test.shape)","f4945580":"X_train.columns()","363332ff":"y_train.head()","b9534335":"#feature Scaling  \nfrom sklearn.preprocessing import StandardScaler    \nst_x= StandardScaler()    \nX_train= st_x.fit_transform(X_train)    \nX_test= st_x.transform(X_test)  ","6c03152b":"from sklearn.linear_model import LogisticRegression","5a18001c":"logreg = LogisticRegression()","3058bb2e":"logreg.fit(X_train,y_train)","20b11e29":"y_pred=logreg.predict(X_test)","ad045085":"from sklearn import metrics","3d3cd79e":"cnf_matrix = metrics.confusion_matrix(y_test, y_pred)","8ac588ae":"cnf_matrix","9c09ccd6":"%matplotlib inline","9be4efce":"class_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","f02c9952":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","4e739612":"from sklearn.tree import DecisionTreeClassifier, plot_tree","266cc1fd":"from sklearn.metrics import accuracy_score","191fa2ec":"clf = DecisionTreeClassifier()\nclf.fit(X_train,y_train)\npredictions = clf.predict(X_test)\n","81fb143b":"print('Accuracy: {}'.format(accuracy_score(y_test, predictions)))","8a4dfac0":"sample =pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","e0cb1937":"sample","c3cb7557":"sample.to_csv('gender_submission.csv', index=False)","018115a5":"# #to see the categerical columns in the datasets","30aa5ee8":"# # to see missing data","61c739a1":"# visulazing data and analyzing","f4a59d20":"#2. value_counts() with relative frequencies of the unique values.","e6548da4":"# # you can use one hot encoding with one variable and you can also use multiple varible","24218872":"# train['Embarked'].value_counts(ascending=True)","20cdd106":"# # you can also see categetrical data with this","31698620":"# 1. value_counts() with default parameters","1b6dd96a":"# # 4. value_counts() displaying the NaN values","7e0a6ec2":"# ","33e5ab53":"# implementing of decision tree algorithms"}}