{"cell_type":{"e2d66d0c":"code","7024926c":"code","5a7893f0":"code","445a19aa":"code","c5684825":"code","1e4812c7":"code","e3397302":"code","50fb0b0a":"code","b1160f37":"code","83814a6c":"code","42c36832":"code","f268ce6e":"code","ab05486f":"code","ae8d16e1":"code","15457480":"code","ff54fe55":"code","44f7489d":"code","7e8500a2":"code","099231b4":"code","a2de2c96":"code","96ee6602":"code","33a990e4":"code","5c513922":"code","4220120d":"code","a15b6c07":"code","dfb09661":"code","6973f1d9":"code","ce6f766a":"code","d83d04ec":"code","44fcc454":"code","43c43ebe":"code","8291b243":"code","643f0877":"code","9b6d37e0":"code","ade44a13":"code","306a00a6":"code","cc47224c":"code","8745d6ca":"code","4e109c06":"code","e7f33333":"code","918e6fd8":"code","a9f41cf5":"markdown","92e3c3f8":"markdown","737d9e6f":"markdown","cc3d9ff5":"markdown","3eaa9a5a":"markdown","963eda51":"markdown","c1daec9b":"markdown","2492621b":"markdown","01a43c15":"markdown","558a7996":"markdown","048712ae":"markdown","cabfee15":"markdown","322422f5":"markdown","949e7b27":"markdown","a9539b12":"markdown","df249edb":"markdown","548ae861":"markdown","816480a5":"markdown","5ded2500":"markdown","012421f9":"markdown","2b2773a3":"markdown","82e63ee2":"markdown","6407ebfe":"markdown","2d1b0dad":"markdown","19a41053":"markdown","8f116a18":"markdown","1299296a":"markdown","4b7235e3":"markdown","b8c1b224":"markdown","6c43a342":"markdown","0e36ce50":"markdown","e5782df1":"markdown","f0430dd2":"markdown"},"source":{"e2d66d0c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7024926c":"import pandas as pd\nimport numpy as np\n\nimport pandas_profiling as pp\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as ply","5a7893f0":"dat = pd.read_csv('..\/input\/ecommerce-data\/data.csv')","445a19aa":"print(dat.info(),'\\n')\nprint(dat.describe(),'\\n')\nprint(dat.sample(5),'\\n')","c5684825":"colstats = {}\nfor col in dat.columns:\n#     print(\"{} has  {}  null entries ({:.1f}%) and  {}  unique entries ({:.1f}%)\".format(col,\n#                 dat[col].isnull().sum(),dat[col].isnull().sum()*100\/dat.shape[0],\n#                 len(dat[col].unique()),len(dat[col].unique())*100\/dat.shape[0]))\n    colstats[col] = [dat[col].isnull().sum(),dat[col].isnull().sum()*100\/dat.shape[0],\n                len(dat[col].unique()),len(dat[col].unique())*100\/dat.shape[0]] \n    \nstats_col = pd.DataFrame(colstats.values(), index = colstats.keys(),  columns = ['#Null','%Null','#Unique','%Unique'])\npd.set_option('precision',2)\npd.set_option('display.float_format', lambda x: '%.1f' % x)\nprint(stats_col)","1e4812c7":"temp = dat[dat.Description.isnull()].copy()\nprint(temp.info())","e3397302":"# orders by country\nfig,ax = plt.subplots(1,1,figsize=(20,5))\nstats_country = dat.groupby(['Country']).Quantity.agg([np.sum])\nstats_country.sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Count of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='sum',ascending=False).head()","50fb0b0a":"fig,ax = plt.subplots(1,1,figsize=(20,5))\ntemp = dat.copy()\ntemp['Value'] = temp['Quantity']*temp['UnitPrice']\nstats_country = temp.groupby(['Country']).Value.agg([np.sum, np.mean])\nstats_country.sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Value of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='mean',ascending=False).head()","b1160f37":"# Just a check to make sure that what the above cell is doing is right ...\n# xx = temp[temp.Country.str.contains('United Kingdom')].copy()\n# print(xx.Quantity.sum(), xx.Value.sum(), xx.Value.mean())","83814a6c":"stats_cust = dat.groupby(['CustomerID'])\nfor key,value in stats_cust:\n    if len(value.Country.unique()) > 1:\n        print(key, value.Country.unique())","42c36832":"stats_stock = dat.groupby(['StockCode'])\ncounter = 0\nfor key, value in stats_stock:\n    if counter < 2:\n        print(key)\n        print(value.Description)\n        counter += 1","f268ce6e":"temp = dat.groupby(['InvoiceNo'])\nfor key,value in temp:\n    if len(value.InvoiceDate.unique()) > 1:\n        print(key, value.InvoiceDate.unique())","ab05486f":"df = dat.copy()","ae8d16e1":"# Imput on Description based on StockCode - although I don't intend to use Description in any analysis\n# xx = lambda x : x.mode().iloc[0]\n# xxx = df.groupby(['StockCode']).apply(xx)\ntemp1 = df.groupby('StockCode').Description.agg(pd.Series.mode).to_frame()\ndf[\"Description\"].fillna(lambda x: temp1.loc[x][\"Description\"],inplace=True)","15457480":"# temp = df.sample(5)\n# print(temp.Description)\n# print(dat.loc[temp.index][\"Description\"])","ff54fe55":"df.info()","44f7489d":"lofInvoiceNo_NoCustID = list(set(df[df.CustomerID.isnull()].InvoiceNo))\nprint(df.CustomerID.isnull().sum(),len(lofInvoiceNo_NoCustID))\n\nlofInvoiceNo_CustID = list(set(df[df.CustomerID.notnull()].InvoiceNo))\nprint(df.CustomerID.notnull().sum(),len(lofInvoiceNo_CustID))\n\nprint('Common InvoiceNo between rows that have CustomerId and those that do not', \n      list(set(lofInvoiceNo_NoCustID) & set(lofInvoiceNo_CustID)))       ","7e8500a2":"df.dropna(axis=0, inplace=True)\ndf.drop_duplicates(inplace=True)","099231b4":"df.info()","a2de2c96":"locancelledInvoice = df[df.Quantity < 0].InvoiceNo.unique()\nlocompletedInvoice = df[df.Quantity >= 0].InvoiceNo.unique()\n# all cancelled orders have negative quantities ad InvoiceNo contains a C\nif len(set([\"C\" in l for l in locancelledInvoice])) == 1:\n    print(\"all cancelled orders have negative quantities and corresponding InvoiceNo contains a C\")\n    \n    \nif len(set([\"C\" in l for l in locompletedInvoice])) == 1:\n    print(\"all successful orders have positive quantities and InvoiceNo is all digits\")\n    \nn_cancelInvoice = len(locancelledInvoice)\nn_completeInvoice = len(locompletedInvoice)\nprint(\"{} orders were canceled out of {} total orders ({:.1f}%)\".format(n_cancelInvoice,\n                                                                    n_completeInvoice+n_cancelInvoice, \n                                                                    n_cancelInvoice*100\/(n_completeInvoice+n_cancelInvoice)))\n\ndf[\"OrderStatus_\"]= \"Completed\"\ndf.loc[df[df.Quantity < 0].index,\"OrderStatus_\"] = \"Cancellation\"\n","96ee6602":"# checking to see if unit price per product is invariant over time\ntemp = df.groupby([\"StockCode\"]).UnitPrice.agg(['count','mean','sum'])\ntemp['Mean*Count'] = temp['mean']*temp['count']\ntemp.plot(kind='scatter',x='Mean*Count',y='sum')\nplt.yscale('log')\nplt.xscale('log')\nplt.grid()","33a990e4":"df['Value_'] = df['Quantity']*df['UnitPrice']\ndf.groupby([\"StockCode\"])['Value_'].agg([np.sum]).tail(8).index\n# Mark rows that have transactions \"'BANK CHARGES', 'C2', 'CRUK', 'D', 'DOT', 'M', 'PADS', 'POST'\" as \"Exclude\"\ndf[\"Exclude_\"] = \"False\"\ndf.loc[df[df.StockCode.isin(df.groupby([\"StockCode\"])['Value_'].agg([np.sum]).tail(8).index)].index,\"Exclude_\"] = \"True\"","5c513922":"# Convert returned negative quantity to postivie for analysis\ndf['PQuantity_'] = df['Quantity']\ndf.loc[df[df.Quantity < 0].index, 'PQuantity_'] = df.Quantity*-1","4220120d":"df['Invoicedate_'] = pd.to_datetime(df['InvoiceDate'])","a15b6c07":"df['OrderInvoiceNo_'] = ''\n# df['CancelledAfterDays_'] = ''\ntemp = df[df['OrderStatus_'].str.contains(\"Cancellation\")].copy()\nttemp = df[~df['OrderStatus_'].str.contains(\"Cancellation\")].copy()\n\nimport time\nst = time.time()\ncount = 0\nfor idx,row in temp.sort_values(by='PQuantity_',ascending=False).iterrows():  \n    bl1 = (ttemp.CustomerID == row.CustomerID) & (ttemp.StockCode == row.StockCode) \n    bl2 = (ttemp.PQuantity_ >= row.PQuantity_) & (ttemp.Invoicedate_ < row.Invoicedate_)\n    stemp = ttemp[bl1 & bl2].copy()\n    if stemp.shape[0] == 1:\n        if stemp.iloc[0]['PQuantity_'] == row.PQuantity_:\n            temp.loc[idx,'OrderInvoiceNo_'] = stemp.iloc[0].InvoiceNo\n        else:\n            temp.loc[idx,'OrderInvoiceNo_'] = stemp.iloc[0].InvoiceNo\n            temp.loc[idx, 'OrderStatus_'] = 'PartialReturn'\n    else:            \n        temp.loc[idx, 'OrderStatus_'] = 'NoCorrOrder'  \n    count += 1\n    if count%500 == 0:\n        print('Completed ... {:.0f}%'.format(count\/temp.shape[0]*100))\nen = time.time()\nprint(\"Elapsed time (s) = \",en-st)\n# takes about 10 min","dfb09661":"df.loc[temp.index] = temp","6973f1d9":"df.info()","ce6f766a":"df['Month_'] = pd.DatetimeIndex(df.Invoicedate_).month\ndf['Year_']= pd.DatetimeIndex(df.Invoicedate_).year\ndf['Day_']= pd.DatetimeIndex(df.Invoicedate_).day\ndf['Time_']=pd.DatetimeIndex(df.Invoicedate_).hour\ndf.sample(10)","d83d04ec":"import warnings\nwarnings.filterwarnings('ignore')","44fcc454":"fig, (ax1,ax2,ax3) = plt.subplots(1,3,figsize=(20,5)) \ndf.groupby('OrderStatus_').PQuantity_.agg(['count']).plot(kind='bar',ax=ax1).set_title(\"# of transactions\")\nax1.set_yscale('log')\ndf.groupby('OrderStatus_').PQuantity_.agg(['sum']).plot(kind='bar',ax=ax2).set_title(\"value of all transactions\")\nax2.set_yscale('log')\ndf.groupby('OrderStatus_').PQuantity_.agg(['mean']).plot(kind='bar',ax=ax3).set_title(\"expected value of all transactions\")\nax3.set_yscale('log')","43c43ebe":"print('Value of canceled transactions is {:.1f}% of fulfilled transactions'.format(-100*df[df.Quantity < 0].Value_.sum()\/df[df.Quantity >= 0].Value_.sum()))","8291b243":"fig, ax = plt.subplots(1,1,figsize=(20,5)) \ndf.groupby(['Month_','OrderStatus_']).PQuantity_.agg(['count']).unstack(level=0).plot(kind='bar',ax=ax)\nplt.yscale(\"log\")","643f0877":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(20,10)) \ndf.groupby(['OrderStatus_','Time_']).PQuantity_.agg(['count']).unstack(level=0).plot(kind='bar',ax=ax1).set_title(\"# of transactions\")\nax1.set_yscale(\"log\")\ndf.groupby(['OrderStatus_','Time_']).PQuantity_.agg(['sum']).unstack(level=0).plot(kind='bar',ax=ax2).set_title(\"Value of transactions\")\nax2.set_yscale(\"log\")","9b6d37e0":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(20,5)) \ntemp = df[df.Quantity >= 0].copy()\ntemp1 = df[df.Quantity < 0].copy()\ntemp.groupby(['InvoiceNo']).StockCode.agg(['count']).plot(kind='hist',ax=ax1, bins=40).set_title(\"Average number of products per transaction\")\nax1.set_yscale(\"log\")\ntemp.groupby(['InvoiceNo']).Quantity.agg(['sum']).rename(columns={'sum':'Fulfilled'}).plot(kind='hist',ax=ax2, bins=40, edgecolor='k').set_title(\"Average number of items per transaction\")\ntemp1.groupby(['InvoiceNo']).PQuantity_.agg(['sum']).rename(columns={'sum':'Cancelled'}).plot(kind='hist',ax=ax2, bins=40,alpha=0.5)\nax2.set_yscale(\"log\")\nax2.legend()","ade44a13":"# orders by country\nfig,ax = plt.subplots(1,1,figsize=(20,5))\nstats_country = df.groupby(['Country']).Quantity.agg([np.sum])\nstats_country.sort_values(by='sum',ascending=False).plot(kind='bar',ax=ax).set_title('Count of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='sum',ascending=False).head()","306a00a6":"fig,ax = plt.subplots(1,1,figsize=(20,5))\nstats_country = df.groupby(['Country']).Value_.agg([np.sum, np.mean])\nstats_country.sort_values(by='mean',ascending=False).plot(kind='bar',ax=ax).set_title('Value of orders by country')\nplt.yscale(\"log\")\nplt.grid()\n\nstats_country.sort_values(by='mean',ascending=False).head()","cc47224c":"fig, ax1 = plt.subplots(1,1,figsize=(20,7))\ntemp = df[df.OrderStatus_ == 'Completed']\n\nnrows_Head = 15\nvtemp = temp.groupby(['CustomerID']).Value_.agg([np.sum]).rename(columns={'sum':'Value'}).sort_values(by='Value',ascending=False)\n# vtemp.head(nrows_Head).plot(kind='bar',ax=ax).set_title('Value of orders by customer ( with cumulative % of total value on each customer)')\n\nvtemp['cumValue'] = vtemp.cumsum(axis=0)\nvtemp['PercentValue'] = vtemp.cumValue*100\/vtemp['Value'].sum()\n\nfor i,p in enumerate(ax1.patches):\n    ax.annotate(str(np.round(vtemp.iloc[i]['PercentValue'], decimals=1))+'%', (p.get_x() * 1.005, p.get_height() * 1.015))\n    \nvtemp1 = temp.groupby(['CustomerID','Country']).Value_.agg([np.sum]).rename(columns={'sum':'Value'}).sort_values(by='Value',ascending=False)\nvtemp1.head(nrows_Head).unstack(level=1).plot(kind='bar',ax=ax1, width=1.2).set_title('Value of orders by customer')\n\nxtemp = vtemp.head(nrows_Head)\nxtemp.reset_index(inplace=True)\nax2 = ax1.twinx()\nsns.lineplot(x = xtemp.index, y= xtemp['PercentValue'], ax=ax2, color='k')\nax2.set_xticklabels(xtemp.CustomerID)","8745d6ca":"# most popular products\nfig,ax = plt.subplots(1,1,figsize=(20,5))\ntemp = df[df.OrderStatus_ == 'Completed'].copy()\ntemp.groupby(['Description']).Quantity.agg([np.sum]).sort_values(by='sum',ascending=False).rename(columns={'sum':'Quantity'}).head(20).plot(kind=\"bar\",ax=ax).set_title('Top products by quantity sold')\nplt.yscale('log')\nplt.grid()","4e109c06":"# returned products\nfig,ax = plt.subplots(1,1,figsize=(20,5))\ntemp = df[(df.Quantity < 0) & (df.Exclude_ == \"False\")].copy()\ntemp.groupby(['Description','OrderStatus_']).PQuantity_.agg([np.sum]).sort_values(by='sum',ascending=False).rename(columns={'sum':'Quantity'}).head(20).unstack(level=1).plot(kind=\"bar\",ax=ax, width=1.2).set_title('Top products canceled')\nplt.yscale('log')\nplt.grid()","e7f33333":"# most valued products in terms of reveneue generating\nfig,ax = plt.subplots(1,1,figsize=(20,5))\ntemp = df[(df.OrderStatus_ == 'Completed') & (df.Exclude_ == 'False')].copy()\nvtemp = temp.groupby(['Description']).Value_.agg([np.sum]).sort_values(by='sum',ascending=False).head(20).plot(kind=\"bar\",ax=ax).set_title('Top revenue earning products by value')\n\nplt.yscale(\"log\")\nplt.grid()","918e6fd8":"fig,ax = plt.subplots(4,3,figsize=(20,20),sharex=True)\n\ntemp = df[(df.OrderStatus_ == 'Completed') & (df.Exclude_ == 'False') & (df.Quantity <= 60000)].copy()\nvtemp = temp.groupby(['Month_','Description']).Quantity.agg(['sum'])\nfor i in range(12):\n    r,c=divmod(i,3)    \n    vtemp.query('Month_ == '+str(i+1)).sort_values(by='sum',ascending=False).head(10).unstack(level=0).plot(kind='barh',ax=ax[r,c]).set_title('Month_ == '+str(i+1))\n#     ax[r,c].set_xscale('log')\n#     vtemp.query('Month_ == '+str(i+1)).sort_values(by='sum',ascending=False).head(10).index\n#     ax[r,c].set_xticklabels(vtemp.query('Month_ == '+str(i+1)).sort_values(by='sum',ascending=False).head(10).index.get_level_values('Description'))\nfig.tight_layout()","a9f41cf5":"**Read in the data**","92e3c3f8":"# A foreword\n\nTypically e-commerce datasets are proprietary and consequently hard to find among publicly available data. However, The [UCI Machine Learning Repository](http:\/\/archive.ics.uci.edu\/ml\/index.php) has made this dataset containing actual transactions from 2010 and 2011. The dataset is maintained on their site, where it can be found by the title \"Online Retail\".\n\n**Content**\n\"This is a transnational data set which contains all the transactions occurring between 01\/12\/2010 and 09\/12\/2011 for a UK-based and registered non-store online retail.The company mainly sells unique all-occasion gifts. Many customers of the company are wholesalers.\"\n\n**Acknowledgements**\nPer the UCI Machine Learning Repository, this data was made available by Dr Daqing Chen, Director: Public Analytics group. chend '@' lsbu.ac.uk, School of Engineering, London South Bank University, London SE1 0AA, UK.\n\n![UK_MBA.png](attachment:543a5a8d-3a16-45e0-a2ef-51a489bfccfc.png)","737d9e6f":"*Size of transactions by basket size and value*","cc3d9ff5":"The list of customers above seems to have placed orders from multiple countries. For others, there is a 1-to-1 mapping between customer and country.","3eaa9a5a":"**Invoice number to date\/time**","963eda51":"*Most popular products*","c1daec9b":"*Most value generating products*","2492621b":"The above analysis suggests that stockcode is uniquely mapped to the Description. If one were to use Description in the analysis and modeling, we can use StockCode to imput missing values. Alternately, in this case, I plan to drop Description in favor of using StockCode in any subsequent modeling I intend to do.","01a43c15":"Based on the analysis above, invoice number is uniquely related to the invoice date (within a sec or so).","558a7996":"Based on the table above, 25% of the data are missing CustomerID. All rows with missing Description have missing CustomerID as well.","048712ae":"**Order Analysis**","cabfee15":"> Most of the value is generated across 15 customers who account for 20% of the total value generated.","322422f5":"*Seasonality in product sales*","949e7b27":"*Most valuable customers*","a9539b12":"> ... as is obvious from the nature of the wholesale business.","df249edb":"*Trends in sales through the year*","548ae861":"**Customer ID to country**","816480a5":"**Market segmentation - Geographical\/Customer**","5ded2500":"**Preprocessing - imputing, removing nulls and duplicates**","012421f9":"*Transaction size*","2b2773a3":"> Looking at the charts above, the top two most sold products are also the most commonly canceled\/returned product.","82e63ee2":"**Measure non-null and unique entries per column**","6407ebfe":"*Most canceled products*","2d1b0dad":"> While the total number of transactions cancelled is at 16%, the total value of the cancelled transactions is only 7%.","19a41053":"Since there is no obvious way to imput missing CustomerID from the data, best option available seems to be to drop these rows.","8f116a18":"# Analysis of the prepared data","1299296a":"# EDA - Exploratory Data Analysis","4b7235e3":"*Orders and cancelations trends during a 24-hour period*","b8c1b224":"**Orders by country**","6c43a342":"*Geographical distribution of sales*","0e36ce50":"> There seem to be more transactions during the holiday season, as there are cancellations.","e5782df1":"**Market Segmentation - Product**","f0430dd2":"**Stock code to description**"}}