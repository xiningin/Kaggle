{"cell_type":{"4ac64bd1":"code","80423b9f":"code","78f9f4f4":"code","858abd2c":"code","4759b679":"code","4ebdcb37":"code","d2f959ee":"code","5ad9aeea":"code","f5d56615":"code","3ec11745":"code","0df3ac97":"code","cd0caf05":"code","c40e6c93":"code","9b26a0cf":"code","299c2ccd":"code","a9e2a2c4":"code","6ed35057":"code","01070960":"code","59c007e6":"code","65cc70d9":"code","49f8188d":"code","434dc87d":"code","dd78d0ce":"code","b2a9143c":"code","3fb26112":"code","42fcc532":"code","0437b9a3":"code","d16b5772":"code","8a072320":"code","2f441f07":"code","7d8adb6f":"code","814763ff":"code","5fd18886":"code","1f6b37f5":"code","c2f36fe4":"code","5a653eee":"code","462bd4be":"code","376cbc3d":"code","c18bf9cc":"code","14dc8024":"code","a342e117":"code","5fa40bbe":"code","a9aa2f2c":"code","4952a4a1":"code","5f14f3bd":"code","4ff34faf":"code","1b0903f3":"code","8c6426aa":"code","e93599f3":"code","df8521a6":"code","620fdf3b":"code","237b8114":"code","96aea845":"code","70d373a8":"code","b44b18a0":"code","d5b81b6d":"code","9486efa7":"code","feb80f80":"code","e04a3922":"code","a4044f9b":"code","c07dbee7":"code","de882f22":"code","503eb959":"code","94a997fb":"code","342d19a7":"code","d8c7cf8c":"code","69d9ac47":"code","7c8d2e25":"code","151480b0":"code","9af18d84":"code","bbca09f5":"code","c76ed5df":"code","baf96903":"code","ced3c506":"code","1b31db34":"code","8bddc7f9":"code","59a86e5f":"code","69585a28":"code","c8eebff4":"code","6b33c191":"code","13e7007b":"code","d41da1f5":"code","5423a9b6":"code","0baf4f7c":"code","4bcdc844":"code","642b88e9":"code","b7b9e50b":"markdown","7b1daac6":"markdown","6292c3cc":"markdown","495bbcf5":"markdown","c9214f34":"markdown","70295aaa":"markdown","153a64cd":"markdown","40fcaa8f":"markdown","07787662":"markdown","010079a8":"markdown","4294ed71":"markdown","aef1e276":"markdown","fc621296":"markdown","ef0bd51d":"markdown","519fbb52":"markdown","65ab28ca":"markdown","f0142ca5":"markdown","59062c77":"markdown","6de56d9b":"markdown","dc52321f":"markdown","8fd3bcb0":"markdown","c0283cd9":"markdown","840eb7f0":"markdown","ea09b931":"markdown","21149506":"markdown","2c4564f8":"markdown","aff39cdf":"markdown","35295308":"markdown","3794d302":"markdown","5f1e7e91":"markdown","2753f31c":"markdown","6fcf9d51":"markdown","c2a2413a":"markdown","070ff725":"markdown","7020634a":"markdown","0ae80b83":"markdown","e67ed8c3":"markdown","f4e0965c":"markdown","b2beab1a":"markdown","8aabe54e":"markdown","071e8e46":"markdown","26ea973f":"markdown","6cb79135":"markdown","a19b82c0":"markdown","81db43ea":"markdown","dd8fb26f":"markdown","3cf9d5ec":"markdown","8265a2aa":"markdown","ccf7a426":"markdown"},"source":{"4ac64bd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\") #for available styles; use plt.style.available\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","80423b9f":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","78f9f4f4":"train_df.columns","858abd2c":"train_df.head()","4759b679":"train_df.describe()","4ebdcb37":"train_df.info()","d2f959ee":"def bar_plot(variable):\n        # get feature\n        var = train_df[variable]\n        # count number of categorical variable(value\/sample)\n        varValue = var.value_counts()\n        \n        #visualize\n        plt.figure(figsize = (9,3))\n        plt.bar(varValue.index, varValue)\n        plt.xticks(varValue.index, varValue.index.values)\n        plt.ylabel(\"Frequency\")\n        plt.title(variable)\n        plt.show()\n        print(\"{}: \\n {}\".format(variable,varValue))","5ad9aeea":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","f5d56615":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","3ec11745":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist.\".format(variable))\n    plt.show()","0df3ac97":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","cd0caf05":"#Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","c40e6c93":"#Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","9b26a0cf":"#Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","299c2ccd":"#SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","a9e2a2c4":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier Step\n        outlier_step = IQR * 1.5\n        # Detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return  multiple_outliers","6ed35057":"train_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","01070960":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]),axis = 0).reset_index(drop = True)","59c007e6":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","65cc70d9":"train_df.columns[train_df.isnull().any()]","49f8188d":"train_df.isnull().sum()","434dc87d":"train_df[train_df[\"Embarked\"].isnull()]","dd78d0ce":"train_df.boxplot(column = \"Fare\",by = \"Embarked\")\nplt.show()","b2a9143c":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","3fb26112":"train_df[train_df[\"Fare\"].isnull()]","42fcc532":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","0437b9a3":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","d16b5772":"train_df[train_df[\"Fare\"].isnull()]","8a072320":"list1 = [\"SibSp\",  \"Parch\",  \"Age\", \"Fare\",  \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","2f441f07":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","7d8adb6f":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","814763ff":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size = 7)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","5fd18886":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","1f6b37f5":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","c2f36fe4":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","5a653eee":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","462bd4be":"train_df[train_df[\"Age\"].isnull()]","376cbc3d":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","c18bf9cc":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","14dc8024":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","a342e117":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(),annot = True)\nplt.show()","5fa40bbe":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) \n    &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])\n    & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    \n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","a9aa2f2c":"train_df[train_df[\"Age\"].isnull()]","4952a4a1":"train_df[\"Name\"].head(10)","5f14f3bd":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","4ff34faf":"train_df[\"Title\"].head(10)","1b0903f3":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","8c6426aa":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Mme\", \"Ms\", \"Mlle\", \"Lady\", \"the Countess\", \"Capt\", \"Col\", \"Don\", \"Dr\", \"Major\", \"Rev\", \"Sir\", \"Jonkheer\", \"Dona\"], \"others\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","e93599f3":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","df8521a6":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Probability\")","620fdf3b":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","237b8114":"train_df.head()","96aea845":"train_df = pd.get_dummies(train_df, columns = [\"Title\"])\ntrain_df.head()","70d373a8":"train_df.head()","b44b18a0":"train_df[\"FSize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","d5b81b6d":"train_df.head()","9486efa7":"g = sns.factorplot(x = \"FSize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","feb80f80":"train_df[\"family_size\"] = [1 if i<5 else 0 for i in train_df[\"FSize\"]]","e04a3922":"train_df.head(10)","a4044f9b":"sns.countplot(x = \"family_size\", data = train_df)","c07dbee7":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show() ","de882f22":"train_df = pd.get_dummies(train_df, columns = [\"family_size\"])\ntrain_df.head()","503eb959":"train_df[\"Embarked\"].head()","94a997fb":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","342d19a7":"train_df = pd.get_dummies(train_df, columns = [\"Embarked\"])\ntrain_df.head()","d8c7cf8c":"train_df[\"Ticket\"].head(20)","69d9ac47":"tickets = []\nfor i in list(train_df.Ticket):\n    if i.isdigit():\n        tickets.append(i.replace(\".\", \" \").replace(\"\/\", \" \").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","7c8d2e25":"train_df[\"Ticket\"].head(20)","151480b0":"train_df.head()","9af18d84":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","bbca09f5":"sns.countplot(x = \"Pclass\", data = train_df)","c76ed5df":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Pclass\"])\ntrain_df.head()","baf96903":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns = [\"Sex\"])\ntrain_df.head()","ced3c506":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","1b31db34":"train_df.columns","8bddc7f9":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","59a86e5f":"train_df_len","69585a28":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","c8eebff4":"test.head()","6b33c191":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\", len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","13e7007b":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train) * 100, 2)\nacc_log_test = round(logreg.score(X_test, y_test) * 100, 2)\nprint(\"Training Accuracy :% {}\".format(acc_log_train))\nprint(\"Testing Accuracy :% {}\".format(acc_log_test))","d41da1f5":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","5423a9b6":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","0baf4f7c":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","4bcdc844":"votingC = VotingClassifier(estimators = [(\"dt\", best_estimators[0]),\n                                        (\"rfc\", best_estimators[2]),\n                                        (\"lr\", best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\n\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test), y_test))","642b88e9":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived], axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","b7b9e50b":"<a id = \"19\"><\/a><br>\n## Analyze Embarked -- Sex -- Fare -- Survived","7b1daac6":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* Parch - Survived\n* SibSp - Survived","6292c3cc":"* Having a lot of siblings or spouses have less chance to survive.","495bbcf5":"# Introduction\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean in the early morning hours of April 15, 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking one of modern history's deadliest peacetime commercial marine disasters.\n\n<font color = blue>\nContents\n\n1. [Load and Check the Data](#1)\n1. [Variable Description](#2)\n   * [Univariate Variable Analysis](#3)\n       * [Categorical Variable](#4)\n       * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Values](#8)\n   * [Find Missing Value](#9)\n   * [Fill Missing Vaule](#10)\n1. [Visualization](#11)\n   * [Correlation Between Sibsp -- Parch -- Age-- Fare -- Survived](#12)\n   * [Analyze SibSp -- Survived](#13)\n   * [Analyze Parch -- Survived](#14)\n   * [Analyze Pclass -- Survived](#15)\n   * [Analyze Age -- Survived](#16)\n   * [Analyze Pclass -- Age -- Survived](#17)\n   * [Analyze Embarked -- Sex -- Pclass -- Survived](#18)\n   * [Analyze Embarked -- Sex -- Fare  -- Survived](#19)\n   * [Fill Missing Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [PClass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modelling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression Model](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modelling](#33)\n1. [Prediction and Submission](#34)","c9214f34":"<a id = \"1\"><\/a><br>\n## 1. Load and Check the Data","70295aaa":"<a id = \"12\"><\/a><br>\n## Correlation Between Sibsp -- Parch -- Age -- Fare -- Survived","153a64cd":"<a id = \"26\"><\/a><br>\n## PClass","40fcaa8f":"* More money paid for ticket means higher survivalability rate.","07787662":"<a id = '5'><\/a><br>\n## Numerical Variable","010079a8":"<a id = \"11\"><\/a><br>\n# Visualization\n","4294ed71":"<a id = \"20\"><\/a><br>\n## Fill Missing Age Feature","aef1e276":"<a id = \"10\"><\/a><br>\n## Fill Missing Vaule\n* Embarked has 2 missing values\n* Fare has only 1","fc621296":"<a id = \"18\"><\/a><br>\n## Analyze Embarked -- Sex -- Pclass -- Survived","ef0bd51d":"<a id = \"17\"><\/a><br>\n## Analyze Pclass -- Age -- Survived","519fbb52":"<a id = \"9\"><\/a><br>\n## Find Missing Value","65ab28ca":"<a id = \"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n* Comparing 5 machine learning classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","f0142ca5":"<a id = \"31\"><\/a><br>\n## Simple Logistic Regression Model","59062c77":"* ","6de56d9b":"<a id = \"7\"><\/a><br>\n> # Outlier Detection","dc52321f":"* Age is not correlated with sex but it is correlated with Parch, SibSp and Pclass.","8fd3bcb0":"* Age <= 30 has a high survivalability rate.\n* Large number of 20 years old did not survive.","c0283cd9":"<a id = \"30\"><\/a><br>\n## Train Test Split","840eb7f0":"<a id = \"14\"><\/a><br>\n## Analyze Parch -- Survived","ea09b931":"<a id = '3'><\/a><br>\n# Univariate Variable Analysis\n  * Categorical Variable :Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n  * Numerical Variable :Age, PassengerID, Fare","21149506":"* Sex is not informative for age prediction. Because it seems to be same.","2c4564f8":"<a id = \"22\"><\/a><br>\n## [Name -- Title]","aff39cdf":"<a id = \"27\"><\/a><br>\n## Sex","35295308":"Small families like have 2 or 3 members has more chance to survive rather than bigger families like 5 or 6 members.","3794d302":"<a id = \"16\"><\/a><br>\n## Analyze Age -- Survived","5f1e7e91":"<a id = \"24\"><\/a><br>\n## Embarked","2753f31c":"<a id = \"15\"><\/a><br>\n## Analyze Pclass -- Survived","6fcf9d51":"* Pclass will play a big role of our prediction.","c2a2413a":"<a id = \"33\"><\/a><br>\n## Ensemble Modelling","070ff725":"* Pclass and survivalability has inverse proportion between them.","7020634a":"* Having more parent or children is an advantage for survivalability until having 3.","0ae80b83":"<a id = \"28\"><\/a><br>\n## Drop Passenger ID and Cabin","e67ed8c3":"<a id = \"13\"><\/a><br>\n## Sibsp -- Survived","f4e0965c":"<a id = \"8\"><\/a><br>\n# Missing Value\n * Find Missing Value\n * Fill Missing Value","b2beab1a":"* float64(2) :Fare, Age\n* int64(5) :Pclass, SibSp. Parch, PassengerID, Survival\n* object(5) :Name, Sex, Ticket, Cabin, Embarked","8aabe54e":"* Pclass is a good variable to use in age prediction. 1st class passengers are older than 2nd and 2nd is older than 3rd class.","071e8e46":"<a id = \"2\"><\/a><br>\n## 2. Variable Description\n1. Passenger ID\n2. Survived (0 is dead, 1 is live)\n3. Pclass (Class ticket: 1st class, 2nd class etc.)\n4. Name\n5. Sex\n6. Age\n7. SibSp (Number of siblings\/spouses)\n8. Parch (Number of parents\/children)\n9. Ticket\n10. Fare (Ticket Money)\n11. Cabin\n12. Embarked (Port that passenger board to Titanic. S: Southampton(GB), C: Cherbourg(France) Q: Queenstown(Ireland))","26ea973f":"<a id = \"21\"><\/a><br>\n# Feature Engineering","6cb79135":"* Fare feature seems to have correlation with survived feature (0.26)","a19b82c0":"<a id = \"25\"><\/a><br>\n## Ticket","81db43ea":"<a id = \"34\"><\/a><br>\n# Prediction and Submission","dd8fb26f":"* Female passenger have much better survavilability than males.","3cf9d5ec":"<a id = \"29\"><\/a><br>\n# Modelling","8265a2aa":"<a id = '4'><\/a><br>\n## Categorical Variable","ccf7a426":"<a id = \"23\"><\/a><br>\n## Family Size"}}