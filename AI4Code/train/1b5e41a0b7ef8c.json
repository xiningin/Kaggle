{"cell_type":{"bb8b0be4":"code","6be51b82":"code","21022e18":"code","b21033c3":"code","62f48213":"code","adf2f4ef":"code","12c160d6":"code","63a7297a":"code","b57778fd":"code","9c125556":"code","a9719851":"code","8bef2785":"markdown","54309699":"markdown","fe8a9f7a":"markdown","d79c5c41":"markdown","856f2203":"markdown","4712bfc7":"markdown","cfac8774":"markdown","1255a7ce":"markdown","c3597d7b":"markdown","891ab8f1":"markdown","1b56a11d":"markdown","84dd57bf":"markdown"},"source":{"bb8b0be4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport string as st\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.\noriginal =  pd.read_csv('..\/input\/data.csv')\nfi=original\nfi=pd.DataFrame(fi)\nfi.head()","6be51b82":"fi = fi.drop(columns='Unnamed: 0')\nfi = fi.drop(columns='ID')\nfi = fi.drop(columns='Photo')\nfi = fi.drop(columns='Flag')\nfi = fi.drop(columns='Club Logo')\nfi = fi.drop(columns='Joined')","21022e18":"fi['Value'].unique()","b21033c3":"#Correct currencies\ncurs=[\"Release Clause\", \"Value\", \"Wage\"]\nfor cur in curs:\n    \n    def curr_value(x):\n        x = str(x).replace('\u20ac', '')\n        if('M' in str(x)):\n            x = str(x).replace('M', '')\n            x = float(x) * 1000000\n        elif('K' in str(x)):\n            x = str(x).replace('K', '')\n            x = float(x) * 1000\n        return float(x)\n    fi[cur] = fi[cur].apply(curr_value)","62f48213":"#Correct -Dismiss + values\ncols=[\"LS\", \"ST\", \"RS\", \"LW\", \"LF\", \"CF\", \"RF\", \"RW\",\"LAM\", \"CAM\", \"RAM\", \"LM\", \"LCM\", \"CM\", \"RCM\", \"RM\", \"LWB\", \"LDM\",\"CDM\", \"RDM\", \"RWB\", \"LB\", \"LCB\", \"CB\", \"RCB\", \"RB\"]\nfor col in cols:\n    fi[col]=fi[col].str[:-2]\n    fi[col]=fi[col].astype(float)","adf2f4ef":"fi['Contract Valid Until']=fi['Contract Valid Until'].str[-4:]\nfi['Contract Valid Until']=fi['Contract Valid Until'].astype(float)","12c160d6":"#Corect height values \nfi['Height']=fi['Height'].str.replace(\"'\",'.')\nfi['Height']=fi['Height'].astype(float)\n\n#Correct Weight\nfi['Weight']=fi['Weight'].str[:-3]\nfi['Weight']=fi['Weight'].astype(float)","63a7297a":"#X and y assignments\nX = fi.loc[:, fi.columns != 'Value']\ny=fi.loc[:,['Value']]\nX = X.drop(columns='Name')\nX = X.drop(columns='Real Face')\nX.dtypes","b57778fd":"obj_df = X.select_dtypes(include=['object']).copy()\n#Encoding &missing Values\ncols=obj_df.columns\nfor col in cols:\n    print(col)\n    X[col].replace(np.NaN,'NotAv',inplace=True)\n    from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n    labelencoder_X = LabelEncoder()\n    X[col] = labelencoder_X.fit_transform(X[col])","9c125556":"#See Correlations\n\nX1 = pd.DataFrame(X)\ncorr = X1.corr()\nfig = plt.figure(figsize=(50,20))\nax = fig.add_subplot(111)\ncax = ax.matshow(corr,cmap='coolwarm', vmin=-1, vmax=1)\nfig.colorbar(cax)\nticks = np.arange(0,len(X1.columns),1)\nax.set_xticks(ticks)\nplt.xticks(rotation=90)\nax.set_yticks(ticks)\nax.set_xticklabels(X1.columns)\nax.set_yticklabels(X1.columns)\nplt.show()","a9719851":"#drop highly correlated attributes\ncorr_matrix = X1.corr().abs()\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nto_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\nX=X.drop(columns=to_drop, axis=1)\nprint(to_drop)","8bef2785":"As a result, it seems that the above variables are highly correlated to another variable.","54309699":"With the threshold of 0.95, I would choose below columns to be dropped.","fe8a9f7a":"Now, see correlations between variables. ","d79c5c41":"It is sad that there are still categorical variables and missing values in the dataset. I will try to solve this in a friendly manner. I will not use one hot encoder or get_dummies for now.","856f2203":"I need to convert height & weight. ","4712bfc7":"For the contract end date, I know that the date itself could potentially be a valuable variable. But I chose the easy way at my first attempt because I do not know the importance of this variable yet. So I only took the year as a value. ","cfac8774":"If I remove the \"\u20ac\" sign and replace M with \"000000\" and K with \"000\", I can easily convert them to float\/integer without conducting any encoding process. Using data cleansing for encoding could be named as \"Logical Encoding\".","1255a7ce":"As I told before I am not interested in football so I have asked a friend to help me to understand below columns:\n\"LS\", \"ST\", \"RS\", \"LW\", \"LF\", \"CF\", \"RF\", \"RW\",\"LAM\", \"CAM\", \"RAM\", \"LM\", \"LCM\", \"CM\", \"RCM\", \"RM\", \"LWB\", \"LDM\",\"CDM\", \"RDM\", \"RWB\", \"LB\", \"LCB\", \"CB\", \"RCB\", \"RB\"\nI have learned that the value after \"+\" does not mean too much. So I thought it would be wise to get rid of the last 2 chars.","c3597d7b":"After assigning X and y, I have dropped \"Name\" and \"Real Face\" variables. If the name had a serious effect on the value of a player I would definitely give my son the name \"Ronaldo\". ","891ab8f1":"I can see that there are a lot of categorical values in this dataset. Some of them are meaninglessly categorical they are born to be numerical but somehow they have been categorical. For instance, let's explore the \"Value\" column.","1b56a11d":"Hi all, \nI definitely loved this dataset although I am not really interested in football games. This data gives valuable insights into the players. This is the first version of this Kernel I will improve and enrich this one in the following days. First of all, I would like to start by exploring the data as usual. My future plan is to conduct A\/B testing on this dataset. I want to learn if the value of a player is highly predictable or not. You know that it is hard to predict anything in football, there are always last minute goals:) But I have to warn you that for now, this kernel is not about value prediction. I will just manipulate and encode data according to my requirements. Then I want to see the correlations between the variables.","84dd57bf":"At first sight, I have seen that there are some garbage variables like 'Unnamed: 0'. 'ID' also does not work for me. I am not interested in images so I will also get rid of image data. I will get rid of them and make a clean start. "}}