{"cell_type":{"0fd4879f":"code","e14ddf46":"code","4961254b":"code","b01e0e43":"code","3a692287":"code","a5668be8":"code","69c1c4a9":"code","25ad1cf2":"code","0074a4e2":"code","818fa4b2":"code","eaae2146":"code","40744326":"code","66de4b19":"code","8319816e":"code","c5afa6f1":"code","4bc936d1":"code","ee29085b":"code","b0f67172":"code","3c9505f4":"code","dfa4598e":"code","b3858713":"code","0d918962":"code","5e22d31d":"code","b4ad0b6a":"code","8ee38b57":"code","aa30fe4d":"code","2871fe58":"code","c934d81f":"code","7a98b37e":"code","d1ee6cef":"code","cd4dcd35":"code","3fdba685":"code","36f0bb17":"code","31a67a40":"code","9ee341fe":"markdown","2a825f43":"markdown","9beffb05":"markdown","2f94b2c9":"markdown","f86f66e6":"markdown","939f5dab":"markdown","270b4cca":"markdown","249338aa":"markdown","9b85402e":"markdown","05d66bca":"markdown","7cfad0bb":"markdown","16df7cd0":"markdown","a6257d23":"markdown","68f249a5":"markdown","6adc1e67":"markdown","328e1d4e":"markdown","81738b98":"markdown","899a35ec":"markdown","f9e65ae5":"markdown","577adaef":"markdown","f1327883":"markdown","fc5605c4":"markdown","3fce4409":"markdown","552ec920":"markdown","10995077":"markdown","a079e48a":"markdown","f72b4478":"markdown","32d30434":"markdown","32718919":"markdown","3e50853f":"markdown","0649f9d4":"markdown","611a01aa":"markdown","b8b5f29d":"markdown","a684a293":"markdown","323e69a2":"markdown","d685385a":"markdown","c4562434":"markdown","a6976357":"markdown","e4da346a":"markdown","f6670a1a":"markdown","c9e96792":"markdown","6435b03b":"markdown","0ed0ff18":"markdown","e3c60835":"markdown","993558c9":"markdown"},"source":{"0fd4879f":"import pandas as pd, numpy as np\nfrom collections import Counter\nimport math, json, gc, random, os, sys\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm","e14ddf46":"#get comp data\ntrain = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/train.json', lines=True)\ntest = pd.read_json('\/kaggle\/input\/stanford-covid-vaccine\/test.json', lines=True)\nsample_sub = pd.read_csv(\"\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv\")\n","4961254b":"#target columns\ntarget_cols = ['reactivity', 'deg_Mg_pH10', 'deg_pH10', 'deg_Mg_50C', 'deg_50C']\n","b01e0e43":"train_data = []\nfor mol_id in train['id'].unique():\n    sample_data = train.loc[train['id'] == mol_id]\n    seq_scored = sample_data['seq_scored'].values[0]\n    signal_to_noise = sample_data['signal_to_noise'].values[0]\n    SN_filter = sample_data['SN_filter'].values[0]\n    \n    for seq_order in range(seq_scored):\n        i = seq_order\n        sample_tuple = (mol_id, seq_order, signal_to_noise, SN_filter, \n                        sample_data['sequence'].values[0][i],\n                        sample_data['structure'].values[0][i], sample_data['predicted_loop_type'].values[0][i],\n                        sample_data['reactivity'].values[0][i], sample_data['reactivity_error'].values[0][i],\n                        sample_data['deg_Mg_pH10'].values[0][i], sample_data['deg_error_Mg_pH10'].values[0][i],\n                        sample_data['deg_pH10'].values[0][i], sample_data['deg_error_pH10'].values[0][i],\n                        sample_data['deg_Mg_50C'].values[0][i], sample_data['deg_error_Mg_50C'].values[0][i],\n                        sample_data['deg_50C'].values[0][i], sample_data['deg_error_50C'].values[0][i])\n        train_data.append(sample_tuple)\n        \ntrain_data = pd.DataFrame(train_data, columns=['mol_id', 'seq_order', 'signal_to_noise', 'SN_filter', \n                                               'sequence', 'structure', 'predicted_loop_type', \n                                               'reactivity', 'reactivity_error', 'deg_Mg_pH10', 'deg_error_Mg_pH10',\n                                               'deg_pH10', 'deg_error_pH10', 'deg_Mg_50C', 'deg_error_Mg_50C', \n                                               'deg_50C', 'deg_error_50C'])\n","3a692287":"train_data.head()","a5668be8":"feature = 'SN_filter'\nfeature_values = [[0,1], [0], [1]]\nfig, ax = plt.subplots(figsize = (15, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        sns.distplot(train_data.loc[train_data[feature].isin(feature_value) , target_], color = color);\n        plt.title(f'{target_} distribution when {feature} in {feature_value}');","69c1c4a9":"feature = 'SN_filter'\nfeature_values = [[0,1], [0], [1]]\nfig, ax = plt.subplots(figsize = (15, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        \n        plt.title(f'{target_} distribution when {feature} in {feature_value}');\n","25ad1cf2":"feature = 'SN_filter'\nfeature_values = [[0,1], [0], [1]]\nfig, ax = plt.subplots(figsize = (15, 27))\nfor target_idx, target_ in enumerate(target_cols): \n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), 3, plt_idx);\n        \n        df_show = train_data.loc[train_data[feature].isin(feature_value) , target_].value_counts(normalize = True).iloc[:5] * 100\n        df_show = pd.DataFrame(df_show).reset_index()\n        df_show.columns = [f'{target_} value', 'value_pct']\n        df_show = df_show.round(3)\n        df_show[f'{target_} value'] = df_show[f'{target_} value'].astype('category')\n        sns.barplot(data = df_show, y = f'{target_} value', x = 'value_pct');\n        \n        plt.title(f'{target_} value pct when {feature} in {feature_value}');","0074a4e2":"feature = 'SN_filter'\nfeature_values = [[0,1], [0], [1]]\nfig, ax = plt.subplots(figsize = (15, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), 3, plt_idx);\n        \n        without_zero_df = train_data.loc[train_data[target_] != 0]\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        # remove 0 value\n        show_data = show_data.loc[show_data[target_] != 0]\n        sns.distplot(show_data[target_], color = color);\n        \n        plt.title(f'{target_} distribution when {feature} in {feature_value}');\n        ","818fa4b2":"print(\"Number of row that have value == 0\")\n(train_data[target_cols] == 0).sum(axis = 0)","eaae2146":"at_least_one_target_zero = (train_data[target_cols] == 0).sum(axis = 1) >= 1 \nprint(\"total row of at least one target value == 0 is\" , \n      at_least_one_target_zero.sum())\n\nall_scored_target_zero = (train_data[['reactivity', 'deg_Mg_pH10', 'deg_Mg_50C']] == 0).sum(axis = 1) == 3\nprint(\"total row of scored target value == 0 is\" , \n      all_scored_target_zero.sum())\n\nall_target_zero = (train_data[target_cols] == 0).sum(axis = 1) == 5\nprint(\"total row of all target value == 0 is\" , \n      all_target_zero.sum())\n","40744326":"train_data.loc[all_scored_target_zero].sample(10, random_state = 1)","66de4b19":"train_data.loc[:, 'SN_filter'].value_counts(normalize = True)","8319816e":"train_data.loc[all_scored_target_zero, 'SN_filter'].value_counts(normalize = True)","c5afa6f1":"feature = 'sequence'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} in {feature_value}');","4bc936d1":"feature = 'sequence'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} in {feature_value}');","ee29085b":"feature = 'sequence'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n#         # add log(x+1)\n#         sns.distplot(np.log1p(show_data[target_]) , color = color);\n\n        ## I remove non positive value because log(x+1) is too much to add 1 hence i use np.log\n        show_data = show_data.loc[show_data[target_] > 0 ]\n        sns.distplot(np.log(show_data[target_]) , color = color);\n        plt.title(f'{target_} distribution when {feature} in {feature_value}');","b0f67172":"pd.DataFrame((train_data.loc[train_data['SN_filter'] == 1, target_cols] < 0 ).value_counts(normalize = True)).head() * 100","3c9505f4":"feature = 'structure'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} in {feature_value}');","dfa4598e":"feature = 'predicted_loop_type'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (37, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","b3858713":"total_lag = 3\nfor lag in range(1, total_lag + 1) : \n    train_data[f'sequence_lag_{lag}'] = train_data.groupby('mol_id')[['sequence']].shift(lag)\n    train_data[f'sequence_lag_{lag}'] = train_data[f'sequence_lag_{lag}'].fillna('Z') # Z for null","0d918962":"feature = 'sequence_lag_1'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","5e22d31d":"feature = 'sequence_lag_2'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","b4ad0b6a":"feature = 'sequence_lag_3'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","8ee38b57":"total_lead = 3\nfor lead in range(1, total_lead + 1) : \n    train_data[f'sequence_lead_{lead}'] = train_data.groupby('mol_id')[['sequence']].shift(-1 * lead)\n    train_data[f'sequence_lead_{lead}'] = train_data[f'sequence_lead_{lead}'].fillna('Z') # Z for null","aa30fe4d":"feature = 'sequence_lead_1'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","2871fe58":"feature = 'sequence_lead_2'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","c934d81f":"feature = 'sequence_lead_3'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (25, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} | {feature} in {feature_value}');","7a98b37e":"pd.DataFrame(train_data[['sequence_lag_3', 'sequence_lag_2', 'sequence_lag_1' , 'sequence', \n                        'sequence_lead_1', 'sequence_lead_2', 'sequence_lead_3',]].value_counts().head(10))","d1ee6cef":"pd.DataFrame(train_data[['sequence', 'structure']].value_counts())","cd4dcd35":"sequence_ = 'A'\nfeature = 'structure'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        show_data = show_data.loc[show_data['sequence'] == sequence_]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} {sequence_} in {feature_value}');","3fdba685":"sequence_ = 'C'\nfeature = 'structure'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        show_data = show_data.loc[show_data['sequence'] == sequence_]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} {sequence_} in {feature_value}');","36f0bb17":"sequence_ = 'G'\nfeature = 'structure'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        show_data = show_data.loc[show_data['sequence'] == sequence_]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} {sequence_} in {feature_value}');","31a67a40":"sequence_ = 'U'\nfeature = 'structure'\nfeature_values = [[val] for val in sorted(train_data[feature].unique())]\nfig, ax = plt.subplots(figsize = (22, 27))\ncolors = ['b', 'g', 'r', 'c' , 'm'] \nfor target_idx, target_ in enumerate(target_cols): \n    color = colors[target_idx]\n    for feature_idx, feature_value in enumerate(feature_values): \n        plt_idx = target_idx * len(feature_values) + feature_idx + 1\n        plt.subplot(len(target_cols), len(feature_values), plt_idx);\n        \n        show_data = train_data.loc[train_data[feature].isin(feature_value)]\n        show_data = show_data.loc[show_data['sequence'] == sequence_]\n        # filter SN_filter == 1\n        show_data = show_data.loc[show_data['SN_filter'] == 1]\n        # remove outlier (1%) to more visible plot\n        show_data = show_data.loc[(show_data[target_] > show_data[target_].quantile(0.01)) & \n                                  (show_data[target_] < show_data[target_].quantile(0.99))]\n        \n        sns.distplot(show_data[target_], color = color);\n        plt.title(f'{target_} distribution when {feature} {sequence_} in {feature_value}');","9ee341fe":"When the data include `SN_filter == 0`, all the target have very sharp spike on value `0` \nlets check the `value_counts`","2a825f43":"There are small amount of `SN_filter == 1` only `4.2%` while full the whole data, it is `66.2%`","9beffb05":"## lag 2","2f94b2c9":"# 7. sequence x structure vs target","f86f66e6":"## Structure of Seq A","939f5dab":"lets see if we add`SN_filter = 1` make more interesting insight","270b4cca":"well, by the shape of distribution `sequence = A` appear different than the rest\n\nbut by the scale, `A` and `G` has larger value than `C` and `U`","249338aa":"# 3. Structure vs Targets","9b85402e":"Should we investigate more on target value == 0 ?","05d66bca":"On Lead 2, `A` is very different than the others, its have long right tail. just like `G` in lag 1","7cfad0bb":"flattened the data from [artgor notebook](https:\/\/www.kaggle.com\/artgor\/openvaccine-eda-feature-engineering-and-modelling\/#data)","16df7cd0":"# TO BE CONTINUED","a6257d23":"Please Upvote if you like it or it is useful :D \n# CHEERS!!!","68f249a5":"To close `SN_filter vs targets` investigation, the first plot say that all of the target distribution on `SN_filter = 1` are  **positive skewed** and `target value = 0` hardly occured when `SN_filter = 1`","6adc1e67":"## Structure of Seq C","328e1d4e":"There are a lot more features we can play with:\n* `seq_order`\n\nor mix of it:\n* `structure__predicted_loop_type`, \n* `sequence__structure__predicted_loop_type`\n\nor making its like n grams\n* `sequence_2_before` -> ((G,A), (A,A)) \n* `sequence_2_after \n* `structure_2_before` \nand many more","81738b98":"there is lack of `SN_filter == 1` on the 20 random samples while `SN_filter == 1` is dominant in whole training dataset. \n\nthe proportion of `SN_filter == 1` and `SN_filter == 0` is 2:1\n\nthis might be explained by previous bar plot","899a35ec":"The last plot show that all the target is dominated by 0 value.\n\nBut 0 value is more dominant when `SN_filter = 0` about **20%** of the data while `SN_filter = 1` only about **3%**\n\n\n\n\n","f9e65ae5":"## Structure of Seq G","577adaef":"## Structure of Seq U","f1327883":"the plot without 0 value on target, really change the game on the `SN_filte = 0` which originally have two peaks become only one peak ","fc5605c4":"## lag 1","3fce4409":"# 5. Sequence Lags vs Targets","552ec920":"# 1. SN_filter vs Targets","10995077":"at the top 3, there are **7 consecutive `U`**\n\nand overall, A and G has good relation ","a079e48a":"`Lead` is more interesting than `lag`\n\nBy the scale, `sequence_lead_1` of A is similar with U, and C is similar with G\n\nWhile on `sequence` of A is similar with G, and C is similar with U","f72b4478":"Lets see how many 0 happen per target column","32d30434":"By pattern The `structure` affect a lot in `reactivity`, `deg_Mg_50C`, `deg_50C`, but at  `deg_Mg_pH10`, `deg_pH10` is relatively same\n\nBut see the scale on `structure = '.'` its **bigger for all targets**\n\nhence it is significant for all targets","32718919":"look at rows that has all zero, we might get interesthing pattern on that","3e50853f":"## lead 2","0649f9d4":"On Lead 3, still `A` is very different than the others, its have long right tail. just like G in lag 1","611a01aa":"Already blended on lag 2","b8b5f29d":"`G` tend to have longer right tail","a684a293":"interesting right? \n\njust a wild thought, if we only process non positive data, and play with log value, what is the impact.\n\nwe are going to lose 6.1 % of training rows","323e69a2":"# 4. Predicted Loop Type vs Targets","d685385a":"## See the lag and lead windows value_counts","c4562434":"lets plot without outlier ","a6976357":"Yup, like lag 2, its already blended, do not see the difference at glance","e4da346a":"## lag 3","f6670a1a":"if it more visible if we do **log transformation** before plot.\n","c9e96792":"# 6. Sequence Lead vs Target","6435b03b":"every target columns have different number of row of 0 value","0ed0ff18":"## lead 1","e3c60835":"# 2. sequence vs targets","993558c9":"Lets re-plot the distribution chart without 0 value"}}