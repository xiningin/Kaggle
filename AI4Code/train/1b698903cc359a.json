{"cell_type":{"10af65d2":"code","6141b824":"code","07e0e2a9":"code","0b49b791":"code","28444656":"code","4ebb6df7":"code","319445fc":"code","856d64d4":"code","fb49cb31":"code","a309e624":"code","2db5525b":"code","aee3cead":"code","9a2515d7":"code","3ccea071":"code","a3a5f6df":"code","ada40f43":"code","db2ef88f":"code","390a1571":"code","eb1a642d":"code","6b1a59cd":"code","d46b9534":"code","fbf612c5":"code","a96dcebd":"code","96b3ff1d":"markdown","79bd47ca":"markdown","b3bc9eee":"markdown","1207633c":"markdown","efefa7b0":"markdown","44385445":"markdown","fd47d038":"markdown","dea84439":"markdown","c198d759":"markdown"},"source":{"10af65d2":"import glob\nimport umap\nimport umap.plot\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom joblib import Parallel, delayed\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import minmax_scale\nfrom sklearn.decomposition import PCA\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom sklearn.cluster import KMeans, DBSCAN\nfrom sklearn.neighbors import NearestNeighbors,KNeighborsClassifier, NeighborhoodComponentsAnalysis, KNeighborsRegressor, LocalOutlierFactor\nfrom sklearn.cluster import AgglomerativeClustering\n\nimport plotly.io as plt_io\nimport plotly.graph_objects as go\n%matplotlib inline\n\n%config InlineBackend.figure_format = 'retina'","6141b824":"%%capture\n!pip install umap-learn[plot]","07e0e2a9":"df_target = pd.read_csv('\/kaggle\/input\/optiver-realized-volatility-prediction\/train.csv')\ndf_target = df_target.groupby('time_id').target.mean()","0b49b791":"!mkdir -p \/tmp\/pip\/cache\/\n!cp ..\/input\/hdbscan0827-whl\/hdbscan-0.8.27-cp37-cp37m-linux_x86_64.whl \/tmp\/pip\/cache\/\n!pip install --no-index --find-links \/tmp\/pip\/cache\/ hdbscan","28444656":"import hdbscan","4ebb6df7":"train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain_index_time_id = train.pivot(index='time_id', columns='stock_id', values='target')\ntrain_index_stock_id = train.pivot(index='stock_id', columns='time_id', values='target')\ntrain_index_time_id = train_index_time_id.fillna(0)\ntrain_index_stock_id = train_index_stock_id.fillna(0)\ntrain_index_time_id = pd.DataFrame(minmax_scale(train_index_time_id), index=train_index_time_id.index)\ntrain_index_stock_id = pd.DataFrame(minmax_scale(train_index_stock_id), index=train_index_stock_id.index)\n\ncorr_stock_id = train_index_time_id.corr()\ncorr_time_id = train_index_stock_id.corr()","319445fc":"neigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(train_index_stock_id)\ndistances, indices = nbrs.kneighbors(train_index_stock_id)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.figure(figsize=(20,10))\nplt.plot(distances)\nplt.title('K-distance Graph',fontsize=20)\nplt.xlabel('Data Points sorted by distance',fontsize=14)\nplt.ylabel('Epsilon',fontsize=14)\nplt.show()","856d64d4":"model = KMeans()\n# k is range of number of clusters.\nvisualizer = KElbowVisualizer(model, k=(2,10), timings= True)\nvisualizer.fit(train_index_stock_id)        # Fit data to visualizer\nvisualizer.show()   ","fb49cb31":"f = plt.figure(figsize=(19, 15))\nplt.matshow(corr_stock_id, fignum=f.number)\nplt.xticks(range(corr_stock_id.shape[1]), corr_stock_id.columns, fontsize=10, rotation=45)\nplt.yticks(range(corr_stock_id.shape[1]), corr_stock_id.columns, fontsize=10)\ncb = plt.colorbar()\ncb.ax.tick_params(labelsize=14)\nplt.title('Correlation Matrix', fontsize=16);","a309e624":"kmeans = KMeans(n_clusters=4, random_state=0).fit(train_index_stock_id.values)\nu, counts = np.unique(kmeans.labels_, return_counts=True)\nprint(u)\nprint(counts)","2db5525b":"kmeans = KMeans(n_clusters=4, random_state=0).fit(corr_stock_id.values)\nu, counts = np.unique(kmeans.labels_, return_counts=True)\nprint(u)\nprint(counts)","aee3cead":"clusterer = hdbscan.HDBSCAN(prediction_data=True,cluster_selection_epsilon=12.5, cluster_selection_method = 'eom').fit(corr_stock_id)\nu, counts = np.unique(clusterer.labels_, return_counts=True)\nprint(u)\nprint(counts)","9a2515d7":"reducer = umap.UMAP(random_state=42, n_components=2)\nembedding = reducer.fit_transform(corr_stock_id)\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(embedding)\ndistances, indices = nbrs.kneighbors(embedding)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.figure(figsize=(20,10))\nplt.plot(distances)\nplt.title('K-distance Graph',fontsize=20)\nplt.xlabel('Data Points sorted by distance',fontsize=14)\nplt.ylabel('Epsilon',fontsize=14)\nplt.show()","3ccea071":"clusterer2 = hdbscan.HDBSCAN(prediction_data=True,cluster_selection_epsilon=0.35, cluster_selection_method = 'eom').fit(embedding)\nu, counts = np.unique(clusterer2.labels_, return_counts=True)\nprint(u)\nprint(counts)\nplt.figure(figsize=(10, 8))\nplt.scatter(embedding[:, 0], embedding[:, 1], s=35, c=train_index_stock_id.index, edgecolors='none', cmap='jet', norm=mpl.colors.LogNorm());\n","a3a5f6df":"train_index_stock_id['label'] = clusterer2.labels_\nfor x in np.unique(clusterer2.labels_):\n    print(list(train_index_stock_id[train_index_stock_id['label'] == x].index))\n","ada40f43":"reducer = umap.UMAP(random_state=42, n_components=2)\nembedding = reducer.fit_transform(train_index_stock_id)\nneigh = NearestNeighbors(n_neighbors=2)\nnbrs = neigh.fit(embedding)\ndistances, indices = nbrs.kneighbors(embedding)\ndistances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.figure(figsize=(20,10))\nplt.plot(distances)\nplt.title('K-distance Graph',fontsize=20)\nplt.xlabel('Data Points sorted by distance',fontsize=14)\nplt.ylabel('Epsilon',fontsize=14)\nplt.show()","db2ef88f":"clusterer2 = hdbscan.HDBSCAN(prediction_data=True,cluster_selection_epsilon=0.3, cluster_selection_method = 'eom').fit(embedding)\nu, counts = np.unique(clusterer2.labels_, return_counts=True)\nprint(u)\nprint(counts)\nplt.figure(figsize=(10, 8))\nplt.scatter(embedding[:, 0], embedding[:, 1], s=35, c=train_index_stock_id.index, edgecolors='none', cmap='jet', norm=mpl.colors.LogNorm());\n","390a1571":"# y_train = train_index_stock_id.index\n# X_train = train_index_stock_id\n# nca = NeighborhoodComponentsAnalysis(random_state=42)\n# x_new = nca.fit_transform(X_train, y_train)","eb1a642d":"neigh = NearestNeighbors(n_neighbors=5)\nnbrs = neigh.fit(train_index_stock_id)\nneighb = nbrs.kneighbors(train_index_stock_id,  return_distance=False)","6b1a59cd":"neighb\nfor i,x in enumerate(train_index_stock_id.index):\n    print(neighb[i][0], neighb[i][1], neighb[i][2], neighb[i][3], neighb[i][4])","d46b9534":"lof = LocalOutlierFactor(n_neighbors=5)\nlof.fit_predict(train_index_stock_id)\ntrain_index_stock_id['test'] = lof.fit_predict(train_index_stock_id)\n","fbf612c5":"train_index_stock_id[train_index_stock_id['test']==-1].index","a96dcebd":"lof = LocalOutlierFactor(n_neighbors=5)\nlof.fit_predict(train_index_time_id)\ntrain_index_time_id['test'] = lof.fit_predict(train_index_time_id)\ntrain_index_time_id[train_index_time_id['test']==-1].index","96b3ff1d":"# KNN","79bd47ca":"stock_id","b3bc9eee":"# HDBSCAN solo","1207633c":"# KNN for outliers","efefa7b0":"# K-distance Graph between STOCK_ID","44385445":"# KMEANS","fd47d038":"time_id","dea84439":"# number of kmeans","c198d759":"# UMAP + HDBSCAN"}}