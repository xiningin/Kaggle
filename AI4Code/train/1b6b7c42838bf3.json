{"cell_type":{"7382cd21":"code","fc22627c":"code","0c430950":"code","2f7add8e":"code","c103f9af":"code","9c66c60d":"code","65976973":"code","9ad5fb5a":"code","0223c8d7":"code","e884cf32":"code","f63a1b94":"code","65e7eea2":"code","3f23caba":"code","0b17a1b1":"code","4c371cca":"code","8b59e7f4":"code","3dcff3e8":"code","347e9970":"code","09fd2709":"code","b510b67e":"code","db92677e":"code","754cc152":"code","885b7acf":"code","9bc6f124":"code","ea5a9252":"code","d27c1b71":"code","ddf50239":"code","2977d97f":"code","de416d06":"code","33af7417":"code","2f113475":"code","874f1194":"code","7f85ae26":"code","4880b2f9":"code","5baadeb7":"code","acdfe587":"code","7d34cd95":"code","f8999811":"code","b14623db":"code","61b46f8a":"code","195647cf":"code","7db41682":"markdown","5a7add6a":"markdown","408dbc11":"markdown","e0b1fe82":"markdown","fb697556":"markdown","6e80423f":"markdown","de4940d4":"markdown","1c261f9a":"markdown","b79cc165":"markdown","5ad820ee":"markdown","021463f9":"markdown","0e14a002":"markdown","23016f39":"markdown","4cf0c014":"markdown","548d2ff0":"markdown","6f908f11":"markdown","61509c08":"markdown","b96b030b":"markdown","94f650fa":"markdown","335128fb":"markdown","545b97da":"markdown","7625efab":"markdown","58bbb6b4":"markdown","089bd722":"markdown","3c828261":"markdown","0fc76e23":"markdown","9d07985a":"markdown","5f42112d":"markdown","0ba2ad4c":"markdown","19832f7d":"markdown","80765c02":"markdown","b0598d7c":"markdown","a946fc54":"markdown","14beef05":"markdown"},"source":{"7382cd21":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sns\nfrom bokeh.io import output_file,show,output_notebook,push_notebook\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\noutput_notebook()\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","fc22627c":"matches = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\ndeliveries = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\n","0c430950":"matches.head()","2f7add8e":"deliveries.head()","c103f9af":"matches.info()","9c66c60d":"# Unique Cities\nmatches['city'].unique()","65976973":"# Replace Bangalore to Bengaluru\nmatches.replace('Bangalore','Bengaluru',inplace = True)\n\nmatches['city'].unique()\n","9ad5fb5a":"# Unique Winners\nmatches['winner'].unique()","0223c8d7":"# replace  Delhi Daredevils to Delhi capitals and use Abbreviation team name\n\nTeam = ['Kolkata Knight Riders', 'Chennai Super Kings', 'Delhi Daredevils',\n       'Royal Challengers Bangalore', 'Rajasthan Royals',\n       'Kings XI Punjab', 'Deccan Chargers', 'Mumbai Indians',\n       'Pune Warriors', 'Kochi Tuskers Kerala',\n       'Sunrisers Hyderabad', 'Rising Pune Supergiants', 'Gujarat Lions',\n       'Rising Pune Supergiant', 'Delhi Capitals']\n\nAbbr = ['KKR','CSK','DC','RCB','RR','KXIP','DC','MI','PW','KTK','SRH','RPS','GL','RPS','DC']\n\nmatches.replace(Team, Abbr,inplace = True)","e884cf32":"matches['winner'].unique()","f63a1b94":"matches['venue'].unique()","65e7eea2":"# replace venue names for consistency\n\nmatches.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                     'M.Chinnaswamy Stadium':'M. Chinnaswamy Stadium',              \n                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',\n                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',\n                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',\n                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',\n                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},inplace=True)","3f23caba":"matches['venue'].unique()","0b17a1b1":"matches.isna().sum()","4c371cca":"matches.drop('method',axis =1,inplace = True)","8b59e7f4":"# replace winner, result and result margin missing values with no-result\n#matches[['winner','result_margin','result']].fillna('No-Result',inplace = True)\nmatches['eliminator'].fillna('mode',inplace = True)\nmatches['winner'].fillna('No-Result',inplace = True)\nmatches['result_margin'].fillna('No-Result',inplace = True)\nmatches['result'].fillna('No-Result',inplace = True)\nmatches['player_of_match'].fillna('No-Result',inplace = True)\nmatches['city'].fillna('Unknown',inplace = True)\n\n","3dcff3e8":"matches.isna().sum()","347e9970":"matches['date'] = pd.to_datetime(matches['date'])\nmatches['season'] = matches['date'].dt.year\n\nmatches.head()","09fd2709":"IplData = matches[['id','season','date']].merge(deliveries, left_on = 'id',right_on = 'id',how = 'left')\nIplData.head()","b510b67e":"winners = matches.groupby('winner').count().reset_index()\nTeam = list(winners['winner'])\nTotalWin = list(winners['id'])\n\nSortedTeam = sorted(Team,key = lambda x: TotalWin[Team.index(x)])\np = figure(x_range=SortedTeam, plot_height=450, title=\"Total Wins\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=Team, top=TotalWin, width=0.8)\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","db92677e":"toss_winner = matches['toss_winner'].value_counts().reset_index()\ntoss_winner\nsns.set(rc={'figure.figsize':(15,8)})\n\n\nax = plt.axes()\nax.set(facecolor = 'lightblue')\nplt.title(' Number Of Tosses Win By Team',fontsize = 20)\nsns.barplot(y = toss_winner['index'] ,x = toss_winner['toss_winner'],orient = 'h',palette = 'cubehelix')\nplt.xlabel('Total Toss Wins')\nplt.ylabel('Teams')\nplt.show()\n","754cc152":"df= IplData.groupby(['batsman'])['id'].nunique().sort_values(ascending = False)[:10]\n\nfig = px.bar(x = df.index, y =df.values,color = df.index,orientation=\"v\",text = df.values)\n\nfig.update_layout(\n    height=500,\n    width =800,\n    title_text='Most Matches in IPL Career(Top 10)',\n    xaxis =dict(title = 'Player'),\n    yaxis = dict(title = 'Total Matches'),\n    showlegend = False,\n    uniformtext_minsize=14\n    \n   )\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=14,uniformtext_mode='hide')\nfig.show()\n\n","885b7acf":"toss_decision = matches.groupby('toss_decision').count().reset_index()\nTossDecision = list(toss_decision['toss_decision'])\nTotalWin = list(toss_decision['id'])\n\np = figure(x_range=TossDecision, plot_height=450, title=\"Bat Or Field After Toss Win\",\n           toolbar_location=None, tools=\"\")\n\np.vbar(x=TossDecision, top=TotalWin, width=0.4)\np.xgrid.grid_line_color = None\np.y_range.start = 0\nshow(p)\n","9bc6f124":"plt.figure(figsize = (15,10))\nax = plt.axes()\nax.set(facecolor = 'magenta')\nax.grid(False)\nsns.countplot(data = matches,x = 'season',hue = 'toss_decision',palette = 'bone_r',linewidth=5)\nplt.xticks(rotation  = 90)\nplt.title('Toss decisions by season',fontsize = 20)\nplt.xlabel('Seasons')\nplt.ylabel('Count')\nplt.show()","ea5a9252":"plt.figure(figsize = (12,10))\nax = plt.axes()\nax.set(facecolor = 'magenta')\nax.grid(False)\nax = sns.countplot(data =matches, x = 'venue', order = matches['venue'].value_counts().index[0:10], palette = 'gnuplot',linewidth=5)\n\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=15, color='black', ha='center', va='bottom')\n\nplt.xlabel('Venues',fontsize = 15)\nplt.ylabel('Total Wins',fontsize = 15)\nplt.xticks(rotation = 90, fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('Top 10 host venues',fontsize = 20)\nplt.show()\n\n","d27c1b71":"final = matches.groupby('season').tail(1)\nfinal['winner'].value_counts()\n\nplt.figure(figsize=(10,8))\nax = plt.axes()\nax.set(facecolor = 'grey')\nax.grid(False)\n\n\nsns.countplot(x=final['winner'],order = final['winner'].value_counts().index, linewidth = 5, palette = 'gist_ncar')\nplt.title(\"IPL Champions\",fontsize=20)\nplt.xlabel('Teams',fontsize=20)\nplt.ylabel('No.of Trophy',fontsize=20)\nplt.xticks(rotation='60')\nplt.show()\n","ddf50239":"plt.figure(figsize=(20,10))\nsns.countplot(matches['season'],palette = 'magma')\nplt.xticks(rotation = 45,fontsize = 10)\nplt.yticks(fontsize =10)\nplt.title('Total Number of Matches Played Each Season',fontsize = 20)\nplt.ylabel('Total Matches')\nplt.xlabel('Season')\nplt.show()\n","2977d97f":"Total_runs_each_season = IplData.groupby('season')['total_runs'].sum().reset_index('season')\nruns = Total_runs_each_season.set_index('season')\n\n\nplt.figure(figsize = (20,8))\nax = plt.axes()\nax.set(facecolor = 'lavender')\nax.grid(False)\nsns.lineplot(data = runs, x = runs.index , y = 'total_runs',marker = 'o',color = 'red', linewidth =3.5, palette = 'CMRmap')\nplt.title('Total Runs Scored Each Season',fontsize = 20)\nplt.xlabel('Season')\nplt.ylabel('Runs')\nplt.show()","de416d06":"Total_match_each_season = matches.groupby('season')['id'].count().reset_index().set_index('season')\nTotal_runs_per_season = pd.concat([Total_match_each_season,runs],axis = 1)\nTotal_runs_per_season['avg_runs'] = Total_runs_per_season['total_runs']\/Total_runs_per_season['id']\n\n\n\nplt.figure(figsize = (20,8))\nax = plt.axes()\nax.set(facecolor= 'lightgrey')\nrc = {'lines.linewidth': 1, 'lines.markersize': 6}                  \nax.grid(False)\nsns.set_context(\"poster\", rc = rc)\nplt.title('Average Runs Per Match By Season', fontsize = 20)\nplt.xlabel('Season')\nplt.ylabel('Avg Runs')\nax = sns.lineplot(data = Total_runs_per_season['avg_runs'], marker = 'o',color = 'red', linewidth = 3.5 )\nplt.show()\n","33af7417":"bat_second = matches.venue[matches['result'] != 'runs'].value_counts()[0:5].reset_index()\nplt.figure(figsize = (10,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'lightblue')\nax = sns.barplot(data =bat_second, x = 'venue', y = 'index', palette = 'seismic',linewidth=5)\nplt.title('Top 5 venues to win games batting second')\nplt.xlabel('Total Wins')\nplt.ylabel('Venues')\nplt.show()","2f113475":"bat_first = matches.venue[matches['result'] != 'wickets'].value_counts()[0:5].reset_index()\nbat_first\n\nplt.figure(figsize = (10,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'grey')\nax = sns.barplot(data =bat_first, x = 'venue', y = 'index',linewidth=5)\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Top 5 venues to win games batting first')\nplt.xlabel('Total Wins')\nplt.ylabel('Venues')\nplt.show()","874f1194":"df = IplData[IplData['batsman_runs'] == 6]\nsixes_by_season = df.groupby('season')['batsman_runs'].count().reset_index()\n\n\nplt.figure(figsize = (12,10))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'grey')\nax = sns.barplot(data =sixes_by_season, x = 'season', y= 'batsman_runs',linewidth=3,color = '#007b7f')\n\nfor index, row in sixes_by_season.iterrows():\n    ax.text(row.name,row.batsman_runs, row.batsman_runs, color='purple', ha=\"center\",size = 20)\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.title('Total sixes by season')\nplt.xlabel('Season')\nplt.ylabel('Total Sixes')\n\n\nplt.show()","7f85ae26":"total_runs = IplData.groupby(['batting_team','season'])['total_runs'].sum().reset_index()\n\n#total_runs[total_runs['batting_team']== 'Kings XI Punjab']\n\n\nplt.figure(figsize = (12,8))\nax = plt.axes()\nax.set(facecolor = 'grey')\nax.grid(False)\nsns.boxplot(data = total_runs, x = 'batting_team' , y = 'total_runs', palette = 'prism')\nplt.title('Total Runs Scored(By Team) Each Season',fontsize = 20)\nplt.xlabel('Team')\nplt.xticks(rotation = 90, fontsize = 12)\nplt.ylabel('Runs')\nplt.show()\n","4880b2f9":"df = IplData[IplData['over']<=6].groupby(['id','batting_team'])['total_runs'].sum()\n\npp = df.groupby('batting_team').mean().sort_values(ascending = False)\n\nplt.figure(figsize = (15,8))\nax = plt.axes()\nax.set(facecolor = 'grey')\nax.grid(False)\n\nsns.barplot(y = pp,x = pp.index,linewidth=4, palette ='gist_stern' )\n\nplt.xticks(rotation = 90,fontsize = 12)\nplt.xlabel('Team')\nplt.ylabel('Runs')\nplt.title('Average Powerplay Runs by Each Team')\n\nplt.show()\n\n","5baadeb7":"sixes = IplData.batsman[IplData['batsman_runs'] == 6 ].value_counts()[0:5].reset_index()\n\nplt.figure(figsize = (8,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'black')\nax = sns.barplot(data = sixes, x = 'index', y = 'batsman', palette = 'spring',linewidth=5,)\n\nplt.ylabel('Total no. of Sixes')\nplt.xlabel('Batsman')\nplt.xticks(fontsize=12,rotation = 90)\nplt.yticks(fontsize=12)\nplt.title('Top 5 batsman with most no. of sixes')\n\n\nplt.show()","acdfe587":"fours = IplData.batsman[IplData['batsman_runs'] == 4 ].value_counts()[0:5].reset_index()\n\nplt.figure(figsize = (8,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'grey')\nax = sns.barplot(data = fours, x = 'index', y = 'batsman', palette = 'Oranges',linewidth=5,)\n\nplt.ylabel('Total no. of fours')\nplt.xlabel('Batsman')\nplt.xticks(fontsize=12,rotation = 90)\nplt.yticks(fontsize=12)\nplt.title('Top 5 batsman with most no. of fours')\n\n\nplt.show()","7d34cd95":"most_runs = IplData.groupby('batsman')['batsman_runs'].sum().sort_values(ascending = False)[0:10].reset_index()\nmost_runs\n\n\nplt.figure(figsize = (10,8), dpi=80)\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'lightblue')\nax = sns.barplot(data = most_runs, x = 'batsman_runs', y = 'batsman', palette = 'magma',linewidth=5,)\n\nplt.ylabel('Batsman')\nplt.xlabel('Total Runs')\nplt.xticks(fontsize=12,rotation = 90)\nplt.yticks(fontsize=12)\nplt.title('Top 10 batsman with most runs ')\n\n\nplt.show()","f8999811":"i_score = IplData.groupby(['batsman','date'])['batsman_runs'].sum().sort_values(ascending = False)[0:10].reset_index()\ni_score\n\nplt.figure(figsize = (10,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'pink')\n\nplt.barh(i_score.index,i_score.batsman_runs, align = 'center')\n\nplt.ylabel('Batsman',fontsize = 15)\nplt.xlabel('Highest Individual Score',fontsize = 15)\nplt.xticks(fontsize=12,rotation = 90)\nplt.yticks(i_score.index,i_score.batsman,fontsize=12)\nplt.title('Highest Individual Score(Top 10)')\nplt.show()","b14623db":"mom = matches['player_of_match'].value_counts()[0:10].reset_index()\n\nfig = px.bar(mom, x='player_of_match', y='index',color = 'index')\n\nfig.update_layout(\n    height=500,\n    width =800,\n    title_text='Most MOM Award',\n    xaxis =dict(title = 'Total Award'),\n    yaxis = dict(title = 'Player'),\n    showlegend = False\n)\n\n","61b46f8a":"data = IplData.groupby(['season','batsman'])['batsman_runs'].sum().reset_index()\ndata.sort_values('batsman_runs',ascending=False,inplace = True)\ndata.drop_duplicates(subset=[\"season\"],keep=\"first\",inplace = True)\n\nfig = px.bar(data, x='batsman', y='batsman_runs',text ='season',color = 'batsman')\n\nfig.update_layout(\n    height=500,\n    title_text='Orange Cap Winners',\n    xaxis =dict(title = 'Season'),\n    yaxis = dict(title = 'Runs'),\n)\nfig.show()\n","195647cf":"data = IplData.groupby(['id','batsman']).agg({'batsman_runs':'sum','ball':'count'}).reset_index()\ndata['strike_rate'] = round(data['batsman_runs']\/data['ball']*100,1)\nBest_strike_rate = data[data['ball']> 20].sort_values(by = 'strike_rate',ascending = False)[0:15].reset_index().drop(['id','index'],axis =1)\n\nplt.figure(figsize = (10,8))\nax = plt.axes()\nax.grid(False)\nax.set(facecolor = 'grey')\n\nplt.barh(Best_strike_rate.index,Best_strike_rate.strike_rate, align = 'center', color = 'lightgreen',linewidth =3)\n\n\nplt.yticks(Best_strike_rate.index,Best_strike_rate.batsman,fontsize=12)\nplt.gca().invert_yaxis()\nplt.ylabel('Batsman',fontsize = 15)\nplt.xlabel('Strike Rate',fontsize = 15)\nplt.title('Highest strike rate(Top 15) in an inning\\n'\n           'with more than 20 balls faced')\n\nplt.show()","7db41682":"#### Most successful Team in IPL","5a7add6a":"#### Team with maximum no. of tosses win?","408dbc11":"#### To Be Continued.......","e0b1fe82":"#### Handling Missing Values","fb697556":"### Teams Data Visualization","6e80423f":"#### Load the Dataset","de4940d4":"#### Orange cap winner each season\n","1c261f9a":"## Exploratory Data Analysis","b79cc165":"#### Top 5 Stadiums for winning games batting second","5ad820ee":"#### Team decision after winning the toss across Seasons","021463f9":"#### Top 5 Stadiums for winning games batting first","0e14a002":"#### Total Matches won by each team","23016f39":"#### Top 10 players with most IPL career matches","4cf0c014":"#### Total runs scored in each season","548d2ff0":"#### Most Man of the Match award","6f908f11":"#### Total no. of sixes by season","61509c08":"#### Total matches played each season","b96b030b":"## Batting Data Visualization","94f650fa":"#### Import Necessary Libraries","335128fb":"#### Team decision after winning the toss","545b97da":"## Visualization","7625efab":"<h1><center>IPL Data Analysis<\/center><\/h1>\n\n![ipl1.jpg](attachment:fd0b425f-c834-4beb-83d0-b2417425a3c0.jpg)\n\n","58bbb6b4":"#### Venues that hosted maximum number of matches (Top 10)","089bd722":"#### Top 10 players with most runs","3c828261":"#### Top 5 players with most fours","0fc76e23":"#### Average runs scored per match per season","9d07985a":"#### Create a new column Season","5f42112d":"#### Combine Both DataFrame","0ba2ad4c":"#### Total runs scored by team each season","19832f7d":"#### Highest Individual Score","80765c02":"#### Best Strike Rate More than 20 Balls Faced","b0598d7c":"#### Average Powerplay runs\n\n","a946fc54":"## Bowling Data Visualization","14beef05":"#### Top 5 players with most sixes"}}