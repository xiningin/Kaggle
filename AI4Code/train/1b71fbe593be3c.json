{"cell_type":{"879d6d3d":"code","3db7a36d":"code","a85fb5f3":"code","a0536ea0":"code","35452b7f":"code","475c1b52":"code","aeed067e":"code","5c083bfb":"code","15d7a13a":"code","f0cae9dc":"code","e229bd89":"code","3124ef1e":"code","c0ec6574":"code","29791c24":"code","bc00da84":"code","64d6fae9":"code","e81ded4c":"code","4e4245bf":"code","3da77dc7":"code","8c028625":"code","85281ada":"code","fba4b65c":"code","94982ccc":"code","543f1454":"code","a723bc50":"code","871983d3":"code","c751f39b":"code","ee5f7b27":"code","4c30f2e4":"code","7a89844b":"code","376e6b0a":"code","d4606985":"code","9cf04156":"code","d51fbebb":"code","4dc25cd5":"code","ebd3d889":"code","7dfc6462":"code","ac374d47":"code","f38d3a8a":"code","e59a3893":"code","a9731c3f":"code","38345b4c":"code","3dcf13f9":"code","1b5be707":"code","395ec36b":"code","717745fd":"code","1362c241":"code","b282b211":"code","a08825c8":"code","9d99fe66":"code","c98d22ef":"code","8c0fe2b2":"code","64172015":"code","ab88253e":"code","010a22ad":"code","5e5a0367":"code","82692b67":"code","98be5c97":"code","925e2517":"code","9fff1c57":"code","db6651d3":"code","073895d8":"code","3d8f9409":"code","9ca2637a":"code","69572607":"code","461d6ade":"code","d2339396":"code","737ecb15":"code","1964929c":"code","0f314034":"code","8d023f3c":"code","d0bfa059":"code","87cb4b84":"code","9313d9ea":"code","70970c34":"code","26955a36":"code","486968d3":"code","ee8a7932":"code","c4b0495f":"code","e260ff1c":"code","142b722b":"code","30f8f120":"code","210bf50e":"markdown","325717a8":"markdown","b5a1e8f0":"markdown","b8ad6e7f":"markdown","8e2fc8a1":"markdown","b7daf42b":"markdown","4334a368":"markdown","73b838ff":"markdown","6f25f1b6":"markdown","180fb786":"markdown","dbb46439":"markdown","16563e9e":"markdown","ea7d0d3d":"markdown","6bb27d23":"markdown","00de2f89":"markdown","be020f09":"markdown","05fab212":"markdown","1f7f3cc4":"markdown","90a09184":"markdown","5e754bd3":"markdown","4925bd23":"markdown","852171f5":"markdown","037d5805":"markdown","44c6a86a":"markdown","f2bd89ab":"markdown","9dbafa82":"markdown","ed5a70ea":"markdown","e8dedb65":"markdown","228f9fe7":"markdown"},"source":{"879d6d3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3db7a36d":"df = pd.read_csv('..\/input\/world-happiness\/2017.csv')","a85fb5f3":"df.info()","a0536ea0":"df = df.rename(columns={\n    \"Happiness.Rank\": \"Happiness_Rank\", \"Happiness.Score\": \"Happiness_Score\", \n    \"Whisker.high\": \"Whisker_high\", \"Whisker.low\": \"Whisker_low\", \n    \"Economy..GDP.per.Capita.\": \"Economy_GDP_per_Capita\",\n    \"Health..Life.Expectancy.\": \"Health_Life_Expectancy\",\n    \"Trust..Government.Corruption.\": \"Trust_Government_Corruption\",\n    \"Dystopia.Residual\": \"Dystopia_Residual\"\n})","35452b7f":"df.info()","475c1b52":"df.corr()","aeed067e":"f, ax = plt.subplots(figsize=(12, 12))\nsns.heatmap(df.corr(), annot=True, linewidth=5, fmt='.1f', ax=ax)\nplt.show()","5c083bfb":"df.head()","15d7a13a":"df.columns","f0cae9dc":"# Line Plot\ndf.Economy_GDP_per_Capita.plot(kind='line', color='r', label='GDP_per_Capita', linewidth=1.3, alpha=0.7, grid=True, linestyle=':')\ndf.Freedom.plot(kind='line', color='b', label='Freedom', linewidth=1.3, alpha=0.7, grid=True, linestyle='--')\nplt.legend(loc='upper right')\nplt.xlabel('Countries')\nplt.ylabel('GDP')\nplt.title('Line Plot of the Countries')\nplt.show()","e229bd89":"# Let's do Scatter plot\ndf.plot(kind='scatter', x='Economy_GDP_per_Capita', y='Generosity', alpha=0.5, color='g')\nplt.xlabel('GDP per Capita')\nplt.ylabel('Generosity')\nplt.title('GDP per Capita x  Generosity Scatter Plot')\nplt.show()","3124ef1e":"# Let's plot the Histogram\n# bins = number of bars\ndf.Health_Life_Expectancy.plot(kind='hist', bins=30, figsize=(7, 7))\nplt.xlabel('GDP per Capita')\nplt.show()","c0ec6574":"# Let's make a Dictionary\ndict1 = {'turkey' : 'try', 'usa' : 'usd', 'germany' : 'eur', 'uk' : 'gbp', 'denmark' : 'dkk', 'sweden' : 'sek',\n       'norway' : 'nok', 'japan' : 'jpn'}\nprint(dict1.keys())\nprint(dict1.values())","29791c24":"dict1['germany'] = 'euro'\nprint(dict1)","bc00da84":"dict1['turkey'] = 'lira'\nprint(dict1)","64d6fae9":"del dict1['usa']\nprint(dict1)","e81ded4c":"print('denmark' in dict1)","4e4245bf":"dict1.clear()\nprint(dict1)","3da77dc7":"del dict1\n#print(dict1)","8c028625":"series = df['Economy_GDP_per_Capita'] # We take the 'Country' column as series\nprint(type(series))","85281ada":"df2 = df[['Economy_GDP_per_Capita']] # We take the 'Country' column as dataframe\nprint(type(df2))","fba4b65c":"#1 Filtering the dataframe\nx = df['Economy_GDP_per_Capita'] > 1.4\ndf[x]","94982ccc":"#2 Filtering the Pandas dataframe using Numpy\ndf[np.logical_and(df['Economy_GDP_per_Capita']>1.4, df['Freedom']>.6)]","543f1454":"df[np.logical_or(df['Happiness_Score']>6.8, df['Economy_GDP_per_Capita']>1.7)]","a723bc50":"df[(df['Economy_GDP_per_Capita']>1.5) & (df['Trust_Government_Corruption']<0.4)]","871983d3":"i = 0\nwhile i !=11:\n    print('{}^2 is: {}'.format(i, i**2))\n    i = i+1\nprint(i-1, \"is reached\")","c751f39b":"lis = [1, 2, 3, 4, 5, 6, 7]\nfor i in lis:\n    print('i is: ', i)","ee5f7b27":"for index, value in enumerate(lis):\n    print(index, \":\", value)","4c30f2e4":"dict2 = {'turkey' : 'try', 'usa' : 'usd', 'germany' : 'eur', 'uk' : 'gbp'}\nfor key, value in dict2.items():\n    print(key, ':', value)","7a89844b":"for index, value in df[['Freedom']][0:5].iterrows():\n    print(index, \":\", value)","376e6b0a":"def tuble_ex():\n    \"\"\"return defined t tuble\"\"\"\n    t = (1, 2, 3)\n    return t\n\na, b, c = tuble_ex()\nprint(a,b,c)\nx,y,_ = tuble_ex()\nprint(x,y)","d4606985":"x = 2\n\ndef f():\n    x=3\n    return 3\nprint(x)\nprint(f())\nprint(x)","9cf04156":"x = 5\ndef a():\n    y = x**2\n    return y\nprint(a())","d51fbebb":"def square():\n    \"\"\"return square of value\"\"\"\n    def add():\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())","4dc25cd5":"# default arguments\ndef f(a, b=1, c=2):\n    y = a + b + c\n    return y\nprint(f(5))\n#or\nprint(f(5,4,3))","ebd3d889":"#flexible arquments\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint('')\nf(1,5,3)","7dfc6462":"# flexible arguments **kwargs that is dictionary\n\ndef f(**kwargs):\n    \"\"\"print key and value of dict\"\"\"\n    for key, value in kwargs.items():\n        print(key, \":\", value)\nf(country = 'spain', capital = 'madrid', population = 123456)\n","ac374d47":"#lambda function\nsquare = lambda x: x**2 # x is the argument\nprint(square(4))\n\ntot = lambda x,y,z: x+y+z\nprint(tot(1,2,3))","f38d3a8a":"num_list = [1,2,3]\ny = map(lambda x:x**2, num_list)\nprint(list(y))","e59a3893":"#iteration example\n\nname = 'ronaldo' # string can be made an iterable object.\nit = iter(name)  # make string an iterable object.\nprint(next(it))  # print next iteration\nprint(*it)       # print remaining iteration      ","a9731c3f":"# zip example zip(list)\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1, list2)\nprint(z) #z is an abject\nz_list = list(z) # z_list is an object\nprint(z_list)\n","38345b4c":"# unzip example zip(*list)\n\nun_zip = zip(*z_list)\nun_list1, un_list2 = list(un_zip)\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))\nprint(type(list(un_list2)))","3dcf13f9":"num1 = [1,2,3] # num1 is an iterable object\nnum2 = [i+1 for i in num1] # list comprehension,\n                           # iterate over an iterable with for loop\nprint(num2)","1b5be707":"# conditionals on iterable\n\nnum1 = [5, 10, 15]\nnum2 = [i**2 if i == 10 else i-5 if i<7 else i+5 for i in num1]\nprint(num2)","395ec36b":"# List comprehension example with Pandas.\n# We set a threshold which is the average speed.\n# Let's classify the countries according to their Happiness Scores.\n\nthreshold = sum(df.Generosity)\/len(df.Generosity)\n\n#we add a [\"Happiness_Level\"] feature\n\ndf[\"Generosity_Level\"] = [\"high\" if i > threshold else \"low\" for i in df.Generosity]\ndf.loc[:10, [\"Generosity_Level\", \"Generosity\"]]\n","717745fd":"df.columns","1362c241":"df.head()","b282b211":"df.columns","a08825c8":"df.shape","9d99fe66":"df.info()","c98d22ef":"print(df['Country'].value_counts(dropna=False))","8c0fe2b2":"df.describe()","64172015":"# df.boxplot(column='Happiness_Score', by = 'Family')\n# plt.show()\n# takes too much time to plot since it has to many values so I took it in a comment.","ab88253e":"df_new = df.head()\ndf_new","010a22ad":"#melting\n# id_vars is the base column.\n# value_vars are the variable columns.\n\nmelted = pd.melt(frame=df_new, id_vars = 'Country', value_vars = ['Happiness_Score', 'Freedom'])\nmelted","5e5a0367":"melted.pivot(index = 'Country', columns = 'variable', values = 'value')","82692b67":"data1 = df.head()\ndata2 = df.tail()\nconc_data_row = pd.concat([data1, data2], axis=0, ignore_index=True)\nconc_data_row","98be5c97":"data3 = df['Economy_GDP_per_Capita'].head()\ndata4 = df['Generosity'].head()\ndata5 = df['Freedom'].head()\nconc_data_col = pd.concat([data3, data4, data5], axis=1)\nconc_data_col","925e2517":"df.dtypes","9fff1c57":"df['Happiness_Rank'] = df['Happiness_Rank'].astype('float')","db6651d3":"df.dtypes","073895d8":"df.info()","3d8f9409":"df[\"Country\"].value_counts(dropna=False)","9ca2637a":"assert df['Freedom'].notnull().all()\n# it returns nothing since,\n# Freedom is notnull for all rows.","69572607":"# df['Freedom'].fillna('empty', inplace = True)\n# We could fill any blank rows with 'empty' if there were any.","461d6ade":"assert df.columns[1] == 'Happiness_Rank'","d2339396":"assert df.Happiness_Rank.dtypes == np.float64\n#returns nothing since the statement is true\ndf.Happiness_Rank.dtypes\n#returns dtype","737ecb15":"team = [\"FC Bayern\", \"Arsenal\"]\ncountry = [\"Germany\", \"UK\"]\nlist_label = [\"team\", \"country\"]\nlist_col = [team, country]\nzipped = list(zip(list_label, list_col))\ndata_dict = dict(zipped)\ndfz = pd.DataFrame(data_dict)\ndfz","1964929c":"# We can broadcast a value to all rows in a column\ndfz[\"league\"] = \"Europa\"\ndfz","0f314034":"data1 = df.loc[:, [\"Happiness_Score\", \"Economy_GDP_per_Capita\", \"Trust_Government_Corruption\"]]\ndata1.plot()\nplt.show()","8d023f3c":"# make subplots\ndata1.plot(subplots = True)\nplt.show()","d0bfa059":"# make scatter plots\ndata1.plot(kind='scatter', x = 'Economy_GDP_per_Capita', y = 'Trust_Government_Corruption')\nplt.show()","87cb4b84":"# make histogram plot\ndata1.plot(kind='hist', y='Economy_GDP_per_Capita', bins=30, range=(0, 2), density = True)\n# density: normalizes histogram\nplt.show()","9313d9ea":"fig, axes = plt.subplots(nrows = 2, ncols = 1)\ndata1.plot(kind='hist', y='Economy_GDP_per_Capita', bins=30, range=(0 ,2), density = True, ax=axes[0])\ndata1.plot(kind='hist', y='Economy_GDP_per_Capita', bins=30, range=(0 ,2), density = True, ax=axes[1], cumulative = True)\n# cumulative converges to 1 since it goes by summing all the previous values.\nplt.show()","70970c34":"df.describe()","26955a36":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # time_list is a string. We want it to be a datetime object\ndatetime_obj = pd.to_datetime(time_list)\nprint(type(datetime_obj))","486968d3":"data2 = df.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndate_time_obj = pd.to_datetime(date_list)\ndata2[\"date\"] = date_time_obj\ndata2 = data2.set_index(\"date\")\ndata2","ee8a7932":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","c4b0495f":"data2.resample(\"A\").mean()\n# We take the mean (average) of years","e260ff1c":"data2.resample(\"M\").mean()\n# We take the mean of every month in every year\n# There are NaN values since there are no values for those months.","142b722b":"data2.resample(\"M\").first().interpolate(\"linear\")\n# We begin from \"Iceland\" and go to \"Switzerland\", and fill the missing values linearly.","30f8f120":"data2.resample(\"M\").mean().interpolate(\"linear\")\n# We take the mean of every month individually, put those values in.\n# And then we begin from \"Iceland\" and go to \"Switzerland\", and fill the missing values linearly.","210bf50e":"### B. BUILDING DATAFRAMES FROM SCRATCH\n* We can build dataframes ourselves instead of CSV files.\n* 1. We make two 1 column arrays which is called a series.\n* 2. We label the columns of those. So we make another series on which we are going to put our labels.\n* 3. * We put our columns (which are series) together as list_col = [series1, series2] \n* 3. * We zip the label series and the new list together to make another list. (zip is an object.)\n* 3. * list(zip(list_label, list_col))\n* 4. We convert that list into a dictionary.\n* 5. Finally we convert dict to a dataframe.","325717a8":"### G. DATA TYPE\n* There are different data types: object(string), booleani integer, float and categorical\n* Conversions from one to another possible.\n\nWhy category is important?\n** make dataframe use less memory\n** can be utilized for analysis (for example: for sklearn )","b5a1e8f0":"We need to clean the data before we start exploring.\n\nExamples of unclean data\n* Columns names might have upper-lower case letter or space betwwen words.\n* missing data on rows.\n* different language\n* column names might have \".\" which can cause problems","b8ad6e7f":"### D. TIDY DATA\nWe tidy the data using melt() function.","8e2fc8a1":"### F. CONCATENATING DATA\n* We can concatenate 2 dataframes into 1","b7daf42b":"### C. VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots : visualize basic statistics like outliers, min\/max or quantiles","4334a368":"### H. MISSING DATA AND TESTING WITH ASSERT\n\nThere are couple of things we can do:\n\n* leave the row as it is\n* fill the missing values with fillna()\n* fill the missing values with test statistics (with mean)\n* 'assert' checks if the statement after is true.\n","73b838ff":"**B. Dictionaries**","6f25f1b6":"### F. RESAMPLING PANDAS TIME SERIES\n* Resampling   : A method performed over different time intervals. \"M\" = month, \"A\" = year\n* Downsampling : Decrease the datetime freq. from daily to weekly or monthly.\n* Upsampling   : Increase the datetime freq. from monthly to weekly or daily.\n* Interpolate  : Put values to rows that are missing values with interpolation.","180fb786":"* single column arrays are called \"series\".\n* Nan : Not a Number\n* dataframe.to_numpy : Return a Numpy representation of the DataFrame.","dbb46439":"### DEFAULT AND FLEXIBLE VARIABLES\n* Default argument example:\n<br> def (a, b=1):\n        b=1 is default argument if it's not given\n\n* Flexible argument example:\n<br> def(*args):\n        *args can be one or more\n<br>def f(**kwargs):\n        **kwargs is a dictionary","16563e9e":"### E. PIVOTING DATA\nReverse of melting","ea7d0d3d":"### E. INDEXING PANDAS TIME SERIES\n* datetime is an object.\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","6bb27d23":"### ANONYMOUS FUNCTION\nIt is like the Lambda function but it can take more than one argument.\n\n* map(func, list): applies that specific function to all items in the list\n                    and returns a list back.","00de2f89":"**E. While and For Loop **","be020f09":"### LIST  COMPREHENSION","05fab212":"### ITERATORS\n* Iterable is an object that can return an iterator back.\n* list, strings and dictionaries are iterable.\n* Iterables are generally objects that we can call a for loop on them.","1f7f3cc4":"* [i+1 for i in num1]: list of comprehension\n* i+1: list comprehension syntax\n* for i in num1: for loop syntax\n* i: iterator\n* num1: iterable object","90a09184":"### B. EXPLORATARY DATA ANALYSIS (EDA)\nvalue_counts(): counts the frequency of the condition\noutliers : the value that is extremely higher or lower than the rest of the data\n\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile Q1\n* 50%: median or second quantile Q2\n* 75%: third quantile Q3\n* max: maximum entry\n* Q1 - Q3 = IQR\n* Q1 - 1.5 * IQR = outlier\n* Q3 + 1.5 * IQR = outlier","5e754bd3":"# 3.CLEANING DATA","4925bd23":"**C. Pandas**\n\nCSV: comma-seperated values dosyalar\u0131n\u0131 almak i\u00e7in, \nPandas 2 \u00e7e\u015fit datatype'tan olu\u015fur.\n\n    -Seriler = data[]\n    -Dataframe = data[[]]","852171f5":"### D. STATISTICAL EXPLORATORY DATA ANALYSIS","037d5805":"### C. VISUAL EXPLORATORY ANALYSIS\n* Plot\n* Subplot\n* Histogram\n* 1. bins\n* 2. range\n* 3. normed\n* 4. cumulative","44c6a86a":"# 1. INTRO TO PYTHON\n\n**A. Matplotlib**","f2bd89ab":"### B. SCOPE\n* Global variables can be used everywhere\n* Functiopn variables can only be used in function","9dbafa82":"### LAMBDA FUNCTION\nFaster way of writing function","ed5a70ea":"# 2. PYTHON DATA SCIENCE TOOLBOX\n\n### A. USER DEFINED FUNCTION","e8dedb65":"### C. NESTED FUNCTION\n* Function inside function","228f9fe7":"# 4. PANDAS FOUNDATION\n### A. REVIEW OF PANDAS"}}