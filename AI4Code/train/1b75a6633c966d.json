{"cell_type":{"309b4c98":"code","ad5a7a56":"code","048fcb17":"code","17277117":"code","2bedb4eb":"code","76c46a5c":"code","d5ee0915":"code","bcfa93dd":"code","2c39ee58":"code","935f5656":"code","947afff7":"code","a8957a5e":"code","03dadf4c":"code","98e511b1":"code","586f30c4":"code","81649949":"code","684398c0":"code","090020b4":"code","4d2e81ec":"code","9622c8f2":"code","276c56a8":"code","e7b41db7":"code","d78d1af9":"code","d4462394":"code","a3a2b0c4":"code","f0227737":"code","50be4e44":"markdown","fe0ce636":"markdown"},"source":{"309b4c98":"import pandas as pd\nimport numpy as np\nimport cv2    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import f1_score\n\nfrom keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom keras import optimizers\nfrom keras.models import Sequential, Model \nfrom keras.layers import Dropout, Flatten, Dense, GlobalAveragePooling2D\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD\n\nfrom IPython.core.display import display, HTML\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\n\nplt.style.use('ggplot')\n\n%matplotlib inline","ad5a7a56":"import tensorflow as tf\nprint(tf.__version__)","048fcb17":"main_folder = '..\/input\/celeba-dataset\/'\nimages_folder = main_folder + 'img_align_celeba\/img_align_celeba\/'\n\nEXAMPLE_PIC = images_folder + '000506.jpg'\n\nTRAINING_SAMPLES = 10000\nVALIDATION_SAMPLES = 2000\nTEST_SAMPLES = 2000\nIMG_WIDTH = 178\nIMG_HEIGHT = 218\nBATCH_SIZE = 16\nNUM_EPOCHS = 20","17277117":"df_attr = pd.read_csv(main_folder + 'list_attr_celeba.csv')\ndf_attr.set_index('image_id', inplace=True)\ndf_attr.replace(to_replace=-1, value=0, inplace=True) #replace -1 by 0\ndf_attr.shape","2bedb4eb":"for i, j in enumerate(df_attr.columns):\n    print(i, j)","76c46a5c":"img = load_img(EXAMPLE_PIC)\nplt.grid(False)\nplt.imshow(img)\ndf_attr.loc[EXAMPLE_PIC.split('\/')[-1]][['Smiling','Male','Young']] #some attributes","d5ee0915":"# Feminino ou masculino\nplt.title('Female or Male')\nsns.countplot(y='Male', data=df_attr, color=\"c\")\nplt.show()","bcfa93dd":"df_partition = pd.read_csv(main_folder + 'list_eval_partition.csv')\ndf_partition.head()","2c39ee58":"df_partition['partition'].value_counts().sort_index()","935f5656":"\ndf_partition.set_index('image_id', inplace=True)\ndf_par_attr = df_partition.join(df_attr['Male'], how='inner')\ndf_par_attr.head()","947afff7":"def load_reshape_img(fname):\n    img = load_img(fname)\n    x = img_to_array(img)\/255.\n    x = x.reshape((1,) + x.shape)\n\n    return x\n\n\ndef generate_df(partition, attr, num_samples):\n    '''\n    partition\n        0 -> train\n        1 -> validation\n        2 -> test\n    \n    '''\n    \n    df_ = df_par_attr[(df_par_attr['partition'] == partition) \n                           & (df_par_attr[attr] == 0)].sample(int(num_samples\/2))\n    df_ = pd.concat([df_,\n                      df_par_attr[(df_par_attr['partition'] == partition) \n                                  & (df_par_attr[attr] == 1)].sample(int(num_samples\/2))])\n\n    # for Train and Valid\n    if partition != 2:\n        x_ = np.array([load_reshape_img(images_folder + fname) for fname in df_.index])\n        x_ = x_.reshape(x_.shape[0], 218, 178, 3)\n        y_ = np_utils.to_categorical(df_[attr],2)\n    # Test\n    else:\n        x_ = []\n        y_ = []\n\n        for index, target in df_.iterrows():\n            im = cv2.imread(images_folder + index)\n            im = cv2.resize(cv2.cvtColor(im, cv2.COLOR_BGR2RGB), (IMG_WIDTH, IMG_HEIGHT)).astype(np.float32) \/ 255.0\n            im = np.expand_dims(im, axis =0)\n            x_.append(im)\n            y_.append(target[attr])\n\n    return x_, y_","a8957a5e":"datagen =  ImageDataGenerator(\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True\n)\n\nimg = load_img(EXAMPLE_PIC)\nx = img_to_array(img)\/255.\nx = x.reshape((1,) + x.shape)\n\nplt.figure(figsize=(20,10))\nplt.suptitle('Data Augmentation', fontsize=28)\n\ni = 0\nfor batch in datagen.flow(x, batch_size=1):\n    plt.subplot(3, 5, i+1)\n    plt.grid(False)\n    plt.imshow( batch.reshape(218, 178, 3))\n    \n    if i == 9:\n        break\n    i += 1\n    \nplt.show()","03dadf4c":"# Train \nx_train, y_train = generate_df(0, 'Male', TRAINING_SAMPLES)\n\ntrain_datagen =  ImageDataGenerator(\n  preprocessing_function=preprocess_input,\n  rotation_range=30,\n  width_shift_range=0.2,\n  height_shift_range=0.2,\n  shear_range=0.2,\n  zoom_range=0.2,\n  horizontal_flip=True,\n)\n\ntrain_datagen.fit(x_train)\n\ntrain_generator = train_datagen.flow(\nx_train, y_train,\nbatch_size=BATCH_SIZE,\n)","98e511b1":"# Valid\nx_valid, y_valid = generate_df(1, 'Male', VALIDATION_SAMPLES)","586f30c4":"inc_model = InceptionV3(weights='..\/input\/inceptionv3\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5',\n                        include_top=False,\n                        input_shape=(IMG_HEIGHT, IMG_WIDTH, 3))\n\nprint(\"number of layers:\", len(inc_model.layers))","81649949":"x = inc_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\nx = Dense(512, activation=\"relu\")(x)\npredictions = Dense(2, activation=\"softmax\")(x)","684398c0":"model_ = Model(inputs=inc_model.input, outputs=predictions)\n\nfor layer in model_.layers[:52]:\n    layer.trainable = False\n\nmodel_.compile(optimizer=SGD(lr=0.0001, momentum=0.9)\n                    , loss='categorical_crossentropy'\n                    , metrics=['accuracy'])","090020b4":"checkpointer = ModelCheckpoint(filepath='weights.best.inc.male.hdf5', \n                               verbose=1, save_best_only=True)","4d2e81ec":"hist = model_.fit_generator(train_generator\n                     , validation_data = (x_valid, y_valid)\n                      , steps_per_epoch= TRAINING_SAMPLES\/BATCH_SIZE\n                      , epochs= NUM_EPOCHS\n                      , callbacks=[checkpointer]\n                      , verbose=1\n                    )","9622c8f2":"plt.figure(figsize=(18, 4))\nplt.plot(hist.history['loss'], label = 'train')\nplt.plot(hist.history['val_loss'], label = 'valid')\nplt.legend()\nplt.title('Loss Function')\nplt.show()","276c56a8":"plt.figure(figsize=(18, 4))\nplt.plot(hist.history['acc'], label = 'train')\nplt.plot(hist.history['val_acc'], label = 'valid')\nplt.legend()\nplt.title('Accuracy')\nplt.show()","e7b41db7":"model_.load_weights('weights.best.inc.male.hdf5')","d78d1af9":"# Test\nx_test, y_test = generate_df(2, 'Male', TEST_SAMPLES)\n\nmodel_predictions = [np.argmax(model_.predict(feature)) for feature in x_test ]\n\n\ntest_accuracy = 100 * np.sum(np.array(model_predictions)==y_test) \/ len(model_predictions)\nprint('Model Evaluation')\nprint('Test accuracy: %.4f%%' % test_accuracy)\nprint('f1_score:', f1_score(y_test, model_predictions))","d4462394":"gender_target = {0: 'Female'\n                , 1: 'Male'}\n\ndef img_to_display(filename):\n\n    \n    i = Image.open(filename)\n    i.thumbnail((200, 200), Image.LANCZOS)\n    \n    with BytesIO() as buffer:\n        i.save(buffer, 'jpeg')\n        return base64.b64encode(buffer.getvalue()).decode()\n    \n\ndef display_result(filename, prediction, target):\n    '''\n    Display the results in HTML\n    \n    '''\n\n    gender = 'Male'\n    gender_icon = \"https:\/\/i.imgur.com\/nxWan2u.png\"\n        \n    if prediction[1] <= 0.5:\n        gender_icon = \"https:\/\/i.imgur.com\/oAAb8rd.png\"\n        gender = 'Female'\n            \n    display_html = '''\n    <div style=\"overflow: auto;  border: 2px solid #D8D8D8;\n        padding: 5px; width: 420px;\" >\n        <img src=\"data:image\/jpeg;base64,{}\" style=\"float: left;\" width=\"200\" height=\"200\">\n        <div style=\"padding: 10px 0px 0px 20px; overflow: auto;\">\n            <img src=\"{}\" style=\"float: left;\" width=\"40\" height=\"40\">\n            <h3 style=\"margin-left: 50px; margin-top: 2px;\">{}<\/h3>\n            <p style=\"margin-left: 50px; margin-top: -6px; font-size: 12px\">{} prob.<\/p>\n            <p style=\"margin-left: 50px; margin-top: -16px; font-size: 12px\">Real Target: {}<\/p>\n            <p style=\"margin-left: 50px; margin-top: -16px; font-size: 12px\">Filename: {}<\/p>\n        <\/div>\n    <\/div>\n    '''.format(img_to_display(filename)\n               , gender_icon\n               , gender\n               , \"{0:.2f}%\".format(round(max(prediction)*100,2))\n               , gender_target[target]\n               , filename.split('\/')[-1]\n               )\n\n    display(HTML(display_html))","a3a2b0c4":"def gender_prediction(filename):\n    '''\n    predict the gender\n    \n    input:\n        filename: str of the file name\n        \n    return:\n        array of the prob of the targets.\n    \n    '''\n    \n    im = cv2.imread(filename)\n    im = cv2.resize(cv2.cvtColor(im, cv2.COLOR_BGR2RGB), (178, 218)).astype(np.float32) \/ 255.0\n    im = np.expand_dims(im, axis =0)\n    \n    result = model_.predict(im)\n    prediction = np.argmax(result)\n    \n    return result\n    ","f0227737":"df_to_test = df_par_attr[(df_par_attr['partition'] == 2)].sample(8)\n\nfor index, target in df_to_test.iterrows():\n    result = gender_prediction(images_folder + index)\n    \n    display_result(images_folder + index, result[0], target['Male'])","50be4e44":"### Segunda Lista de exerc\u00edcios Deep Learning","fe0ce636":"I hope you enjoyed this Notebook :) Please feel free to ask me question you may have or make improvements to the Notebook. Cheers!"}}