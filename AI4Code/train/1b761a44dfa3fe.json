{"cell_type":{"165bf1d3":"code","62430b81":"code","6b354194":"code","ec210e4b":"code","6cf91d4a":"code","989d9d99":"code","58a95927":"code","69aadfe4":"code","2df2abd3":"code","ab7ead6e":"code","7f70a1ed":"code","4abc9ae5":"code","7ff4e2e5":"code","197b14c9":"code","43329fea":"code","546cd13f":"markdown","6fd02b98":"markdown","be3d8d8f":"markdown","6d133e45":"markdown","5d9f138e":"markdown","3af4df78":"markdown","1a59f363":"markdown","cc7f16da":"markdown"},"source":{"165bf1d3":"import os\nimport sys\nfrom pathlib import Path\nfrom functools import partial\nfrom typing import Optional, Union, Tuple\n\nimport numpy as np\nimport pandas as pd\nimport category_encoders as ce\nfrom sklearn.model_selection import StratifiedKFold\n\nimport lightgbm as lgb","62430b81":"COMPETITION_NAME = \"titanic\"\nROOT = Path.cwd().parent\nINPUT_ROOT = ROOT \/ \"input\"\nRAW_DATA = INPUT_ROOT \/ COMPETITION_NAME\nWORK_DIR = ROOT \/ \"working\"\n# OUTPUT_ROOT = ROOT \/ \"output\"\nOUTPUT_ROOT = WORK_DIR \/ \"output\"\nPROC_DATA = ROOT \/ \"processed_data\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"\nRANDOM_SEED = 1086\nN_FOLD = 5\nNUM_THREADS = 4","6b354194":"for f in RAW_DATA.iterdir():\n    print(f.name)","ec210e4b":"train = pd.read_csv(RAW_DATA \/ \"train.csv\")\ntest = pd.read_csv(RAW_DATA \/ \"test.csv\")\nsample_sub = pd.read_csv(RAW_DATA \/ \"gender_submission.csv\")","6cf91d4a":"def binary_accuracy_for_lgbm(\n    preds: np.ndarray, data: lgb.Dataset, threshold: float=0.5,\n) -> Tuple[str, float, bool]:\n    \"\"\"Calculate Binary Accuracy\"\"\"\n    label = data.get_label()\n    weight = data.get_weight()\n    pred_label = (preds > threshold).astype(int)\n    acc = np.average(label == pred_label, weights=weight)\n\n    # # eval_name, eval_result, is_higher_better\n    return 'my_bin_acc', acc, True","989d9d99":"def binary_logloss_for_lgbm(preds: np.ndarray, data: lgb.Dataset) -> Tuple[str, float, bool]:\n    \"\"\"Calculate Binary Logloss\"\"\"\n    label = data.get_label()\n    weight = data.get_weight()\n    p_dash = (1 - label) + (2 * label - 1) * preds\n    loss_by_example = - np.log(p_dash)\n    loss = np.average(loss_by_example, weights=weight)\n\n    # # eval_name, eval_result, is_higher_better\n    return 'my_lnloss', loss, False","58a95927":"NOT_FEATURES = [ID, TARGET]\nUNUSE_COLUMNS = [\"Name\", \"Ticket\", \"Cabin\"]\n\ntest.insert(1, TARGET, -1)\nn_train = len(train)\nn_test = len(test)","69aadfe4":"all_data = pd.concat([train, test], axis=0, ignore_index=True)\nall_data.head()","2df2abd3":"ord_enc = ce.OrdinalEncoder(cols=[\"Sex\", \"Embarked\"])\nall_data = ord_enc.fit_transform(all_data)\nall_data.head()","ab7ead6e":"X = all_data[\n    list(filter(lambda x: x not in NOT_FEATURES + UNUSE_COLUMNS, all_data.columns))]\ny = all_data[TARGET].values\n\nX_tr_all, y_tr_all = X.iloc[:n_train].values, y[:n_train]\nX_te, y_te = X.iloc[n_train:], y[n_train:]\n\nkf = StratifiedKFold(n_splits=N_FOLD, shuffle=True, random_state=RANDOM_SEED)\ntrain_val_splits = list(kf.split(X_tr_all, y_tr_all))","7f70a1ed":"# # In this notebook, use fold 0.\ntrain_index, valid_index = train_val_splits[0]\nX_tr, y_tr = X_tr_all[train_index], y_tr_all[train_index]\nX_val, y_val = X_tr_all[valid_index], y_tr_all[valid_index]","4abc9ae5":"MODEL_PARAMS_LGB = {\n    \"objective\": \"binary\",  # <= set objective\n    \"eta\": 0.01,\n    \"max_depth\": -1,\n    \"seed\": RANDOM_SEED,\n    \"num_threads\": NUM_THREADS,\n    \"verbose\": -1\n}\nFIT_PARAMS_LGB = {\"num_boost_round\": 10000, \"early_stopping_rounds\": 100, \"verbose_eval\":100,}\n\nlgb_tr = lgb.Dataset(X_tr, y_tr)\nlgb_val = lgb.Dataset(X_val, y_val)\n\nmodel = lgb.train(\n    MODEL_PARAMS_LGB, lgb_tr, **FIT_PARAMS_LGB,\n    valid_names=['train', 'valid'], valid_sets=[lgb_tr, lgb_val],\n    fobj=None,\n    feval=binary_accuracy_for_lgbm  # <= set custom metric function\n)","7ff4e2e5":"MODEL_PARAMS_LGB = {\n    \"objective\": \"binary\",  # <= set objective\n    \"metric\" : \"None\",  # <= set None by `string`\n    \"eta\": 0.01,\n    \"max_depth\": -1,\n    \"seed\": RANDOM_SEED,\n    \"num_threads\": NUM_THREADS,\n    \"verbose\": -1\n}   \nFIT_PARAMS_LGB = {\"num_boost_round\": 10000, \"early_stopping_rounds\": 100, \"verbose_eval\":100}\n\nlgb_tr = lgb.Dataset(X_tr, y_tr)\nlgb_val = lgb.Dataset(X_val, y_val)\n\nmodel = lgb.train(\n    MODEL_PARAMS_LGB, lgb_tr, **FIT_PARAMS_LGB,\n    valid_names=['train', 'valid'], valid_sets=[lgb_tr, lgb_val],\n    fobj=None,\n    feval=binary_accuracy_for_lgbm  # <= set custom metric function\n)","197b14c9":"MODEL_PARAMS_LGB = {\n    \"objective\": \"binary\",  # <= set objective\n    \"first_metric_only\": True,  # <= set first_metric_only\n    \"eta\": 0.01,\n    \"max_depth\": -1,\n    \"seed\": RANDOM_SEED,\n    \"num_threads\": NUM_THREADS,\n    \"verbose\": -1\n}   \nFIT_PARAMS_LGB = {\"num_boost_round\": 10000, \"early_stopping_rounds\": 100, \"verbose_eval\":100}\n\nlgb_tr = lgb.Dataset(X_tr, y_tr)\nlgb_val = lgb.Dataset(X_val, y_val)\n\nmodel = lgb.train(\n    MODEL_PARAMS_LGB, lgb_tr, **FIT_PARAMS_LGB,\n    valid_names=['train', 'valid'], valid_sets=[lgb_tr, lgb_val],\n    fobj=None,\n    feval=binary_accuracy_for_lgbm  # <= set custom metric function\n)","43329fea":"MODEL_PARAMS_LGB = {\n    \"objective\": \"binary\",  # <= set objective\n    \"first_metric_only\": True,  # <= set first_metric_only\n    \"metric\" : \"None\",  # <= set `None` by `string`\n    \"eta\": 0.01,\n    \"max_depth\": -1,\n    \"seed\": RANDOM_SEED,\n    \"num_threads\": NUM_THREADS,\n    \"verbose\": -1\n}   \nFIT_PARAMS_LGB = {\"num_boost_round\": 10000, \"early_stopping_rounds\": 100, \"verbose_eval\":100}\n\nlgb_tr = lgb.Dataset(X_tr, y_tr)\nlgb_val = lgb.Dataset(X_val, y_val)\n\nmodel = lgb.train(\n    MODEL_PARAMS_LGB, lgb_tr, **FIT_PARAMS_LGB,\n    valid_names=['train', 'valid'], valid_sets=[lgb_tr, lgb_val],\n    fobj=None,\n    feval=lambda preds, data : [  # <= set custom metric functions\n        binary_accuracy_for_lgbm(preds, data),\n        binary_logloss_for_lgbm(preds, data)]\n)","546cd13f":"### set `first_metric_only = True` and set `feval`","6fd02b98":"### definition","be3d8d8f":"#### custom metric","6d133e45":"### set `metric = \"None\"` and set `feval`","5d9f138e":"### set `first_metric_only = True`, `metric = \"None\"` and set mutilple `feval`","3af4df78":"### Training","1a59f363":"### Feature Engineering","cc7f16da":"### just set `feval`"}}