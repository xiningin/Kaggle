{"cell_type":{"6c451436":"code","d7d57ed1":"code","abf26594":"code","804ed2c2":"code","a868be93":"code","c2c70bdb":"code","71559534":"code","bea95b91":"code","b406ef37":"code","6e79dd15":"code","8b66ea11":"code","43ca9c15":"code","277666d6":"code","6ca0cb40":"code","2a1b3083":"code","2b571392":"code","16003041":"code","2c6934bd":"code","6169a8e6":"code","8e3224aa":"code","b2520146":"code","f8ce92b2":"code","6a09ad1d":"code","249d179d":"code","618bafaa":"code","c111792a":"markdown","978dc395":"markdown","0a7d5c98":"markdown","10b1ba69":"markdown","f5084e77":"markdown","32ee401d":"markdown","83aa1478":"markdown","fd40faea":"markdown"},"source":{"6c451436":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d7d57ed1":"!nvidia-smi","abf26594":"!pip install catboost==0.22 --quiet","804ed2c2":"import os, sys, gc, warnings, random\nimport numpy as np \nimport pandas as pd \nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import preprocessing\nimport lightgbm as lgb  \nfrom catboost import CatBoostClassifier ,Pool\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import auc, classification_report, roc_auc_score\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","a868be93":"# Import libraries\nimport pandas as pd\npd.set_option('max_colwidth', 500)\nimport numpy as np","c2c70bdb":"train = pd.read_csv(\"\/kaggle\/input\/tabular-data-march-2021\/train(march).csv\")\ntrain.head()","71559534":"train.columns","bea95b91":"class CFG :\n  SEED = 42\n  n_splits = 10\n  catboost_params = {'learning_rate':0.05,'iterations':10000,'eval_metric':'AUC',\n                      'use_best_model' :True,'verbose':100,'random_seed': 0,\n                      'devices':'0:1','task_type':\"GPU\",}\n\n  lgb_params = {'boosting_type': 'gbdt','objective': 'binary','metric': 'auc',\n                'n_estimators': 1000,'sub_sample' : 0.7,'colsample_bytree' : 0.6,\n                'seed': SEED,'silent':False,'early_stopping_rounds': 100,\n               }\n  remove_features = ['id', 'cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7',\n       'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15',\n       'cat16', 'cat17', 'cat18','target']\n\n  categ_features = ['cat0_code', 'cat1_code', 'cat2_code', 'cat3_code', 'cat4_code', 'cat5_code',\n                    'cat6_code', 'cat7_code','cat8_code', 'cat9_code', 'cat10_code', 'cat11_code', \n                    'cat12_code', 'cat13_code', 'cat14_code', 'cat15_code','cat16_code', 'cat17_code',\n                    'cat18_code']\n\n  TARGET_COL = 'target'","b406ef37":"def seed_everything(seed):\n    random.seed(seed)\n    np.random.seed(seed)","6e79dd15":"train = pd.read_csv('\/kaggle\/input\/tabular-data-march-2021\/train(march).csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-data-march-2021\/test(march).csv')\nsamplesubmission = pd.read_csv('\/kaggle\/input\/tabular-data-march-2021\/sample_submission(march).csv')","8b66ea11":"seed_everything(CFG.SEED)","43ca9c15":"columns = test.columns[1:]\ncolumns","277666d6":"cat_features = columns[:19]\ncat_features","6ca0cb40":"def label_encode(train_df, test_df, column):\n    le = LabelEncoder()\n    new_feature = \"{}_code\".format(column)\n    le.fit(train_df[column].unique().tolist() + test_df[column].unique().tolist())\n    train_df[new_feature] = le.transform(train_df[column])\n    test_df[new_feature] = le.transform(test_df[column])\n    return new_feature","2a1b3083":"cat_cols = [col for col in columns if 'cat' in col]\ncont_cols = [col for col in columns if 'cont' in col]","2b571392":"le_cols = []\nfor feature in cat_cols:\n    le_cols.append(label_encode(train, test, feature))","16003041":"columns = le_cols + cont_cols","2c6934bd":"train.head()","6169a8e6":"train.columns","8e3224aa":"features_columns = [col for col in train.columns if col not in CFG.remove_features]\nlen(features_columns)","b2520146":"skf = StratifiedKFold(n_splits=CFG.n_splits,shuffle=True, random_state=CFG.SEED)\n\nX , y   = train[features_columns] , train[CFG.TARGET_COL]\n\noof_cat = np.zeros((train.shape[0],))\ntest['target'] = 0\ncat_preds= []\n\nfor fold_, (trn_idx, val_idx) in enumerate(skf.split(X, train.cat0)):\n    print(50*'-')\n    print('Fold:',fold_+1)\n    X_train, y_train = X.iloc[trn_idx,:], y[trn_idx] \n    X_test, y_test = X.iloc[val_idx,:], y[val_idx] \n       \n    estimator = CatBoostClassifier(**CFG.catboost_params)\n    estimator.fit(Pool(X_train,y_train,cat_features = CFG.categ_features),\n                  eval_set = Pool(X_test,y_test,cat_features = CFG.categ_features),\n                  early_stopping_rounds=200)\n    \n    y_pred_val = estimator.predict_proba(X_test)[:,1]\n    oof_cat[val_idx] = y_pred_val\n    y_pred_test = estimator.predict_proba(test[features_columns])[:,1]\n    cat_preds.append(y_pred_test)\n    print(50*'-')\n    print()\nprint('OOF score :',roc_auc_score(y, oof_cat))","f8ce92b2":"catboost_preds = np.mean(cat_preds,axis=0)   ","6a09ad1d":"skf = StratifiedKFold(n_splits=CFG.n_splits,shuffle=True, random_state=CFG.SEED)\n\nX , y   = train[features_columns] , train[CFG.TARGET_COL]\n\noof_lgb = np.zeros((train.shape[0],))\ntest['target'] = 0\nlgb_preds = []\n\nfor fold_, (trn_idx, val_idx) in enumerate(skf.split(X, train.cat0)):\n    print(50*'-')\n    print('Fold:',fold_+1)\n\n    tr_x, tr_y = X.iloc[trn_idx,:], y[trn_idx] \n    vl_x, vl_y = X.iloc[val_idx,:], y[val_idx] \n        \n    train_data = lgb.Dataset(tr_x, label=tr_y,categorical_feature=CFG.categ_features)\n    valid_data = lgb.Dataset(vl_x, label=vl_y,categorical_feature=CFG.categ_features)\n\n    estimator = lgb.train(CFG.lgb_params,train_data,valid_sets = [train_data,valid_data],verbose_eval = 100)\n    \n    y_pred_val = estimator.predict(vl_x,num_iteration=estimator.best_iteration)\n    oof_lgb[val_idx] = y_pred_val\n    \n    y_pred_test = estimator.predict(test[features_columns],num_iteration=estimator.best_iteration)\n    lgb_preds.append(y_pred_test)\n    print(50*'-')\n\nprint('OOF score :',roc_auc_score(y, oof_lgb))","249d179d":"lightgbm_preds = np.mean(lgb_preds,axis=0)","618bafaa":"test['target'] =catboost_preds*0.55 +  lightgbm_preds*0.45 \nsubmission = test[['id', 'target']]\nsubmission.to_csv('TB_mar21_solution.csv',index = False)    ","c111792a":"# 1.2 Process","978dc395":"# 0-Setup","0a7d5c98":"# Submission","10b1ba69":"# 2.1 Catboost","f5084e77":"# 2.2 LGBM","32ee401d":"# Label Encoding:","83aa1478":"# Modeling:","fd40faea":"# 1-Pre-Processing\n**1.1 Utils**"}}