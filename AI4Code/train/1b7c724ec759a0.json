{"cell_type":{"4c7d0c31":"code","82328a9c":"code","421ce791":"code","7f7b3e3d":"code","f526f6bd":"code","8516b68b":"code","c1c0806c":"code","b582574a":"code","ff8d9b16":"code","fffcce15":"code","6574ae7d":"code","021458b7":"code","3e6c0cd7":"code","083bd20a":"code","bd28cebe":"code","4bcf872c":"code","2a5571f8":"code","68b5278e":"code","788187f2":"code","88017734":"code","c8f61d7e":"code","94451ad1":"code","17c97226":"code","8d994feb":"code","fc227f0d":"code","06c58046":"code","9c6b787f":"code","29575d75":"code","ea7611a8":"code","1082c72d":"code","bb949acf":"code","2d3e8f4e":"code","4530c6bd":"code","4241929f":"code","654606fa":"code","2a528943":"code","adb9bc29":"code","24a456be":"code","6f502a22":"code","7f404e96":"code","f57fc656":"code","808fecdc":"code","ab33618e":"code","9441916a":"code","dd9ab84a":"code","9f2582ab":"code","abd75b17":"code","6b436803":"code","bb7f6290":"code","5c1943fb":"code","c416055b":"code","6e4c05b7":"code","9018ed2c":"code","403c7411":"code","d7e2b0d3":"code","1d882a13":"code","7be6fcd7":"code","677e607c":"code","2b3d7718":"code","53b4e319":"code","014099a4":"code","efc2b5f0":"code","33063ad9":"code","e25f705b":"code","2577484f":"markdown","cce79894":"markdown","f2f21123":"markdown","a46d5a48":"markdown","9133fd40":"markdown","26f25059":"markdown","b9e2fc57":"markdown","15110053":"markdown","976587fd":"markdown","a9d9316f":"markdown","a4e869e9":"markdown"},"source":{"4c7d0c31":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","82328a9c":"admission_df = pd.read_csv(\"..\/input\/admission-predict\/Admission_Predict.csv\")","421ce791":"admission_df.head()","7f7b3e3d":"admission_df.shape\n","f526f6bd":"# Droping the serial no. column\n\nadmission_df.drop(\"Serial No.\", axis= 1, inplace = True)\nadmission_df.head()","8516b68b":"#Checking for null values\n\nadmission_df.isnull().sum()\n\n\n# SO there is no null value in any column","c1c0806c":"#Statistical Summary of dataframe\n\nadmission_df.describe()","b582574a":"# Grouping by University Ranking\n\ndf_university = admission_df.groupby(by = 'University Rating').mean()\n\ndf_university","ff8d9b16":"admission_df.hist(bins = 30, figsize=(20,20), color = 'r')","fffcce15":"sns.pairplot(admission_df)","6574ae7d":"corr_matrix = admission_df.corr()\nplt.figure(figsize=(13,9))\nsns.heatmap(corr_matrix, annot=True)\nplt.show()","021458b7":"admission_df.columns\n","3e6c0cd7":"X = admission_df.drop(columns=['Chance of Admit'])","083bd20a":"X.head(1)","bd28cebe":"y = admission_df['Chance of Admit']","4bcf872c":"X.shape","2a5571f8":"y.shape","68b5278e":"X = np.array(X)\ny = np.array(y)","788187f2":"y = y.reshape(-1,1)","88017734":"y.shape","c8f61d7e":"X\n\n# UNSCALED","94451ad1":"# scaling the data before training the model\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nscaler_x = StandardScaler()\nX = scaler_x.fit_transform(X)","17c97226":"X\n\n#SCALED","8d994feb":"scaler_y = StandardScaler()\n\ny = scaler_y.fit_transform(y)","fc227f0d":"# Splitting the data into testing and training sets\n\nfrom sklearn.model_selection import train_test_split","06c58046":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20\n                                                    )","9c6b787f":"from sklearn.linear_model import LinearRegression","29575d75":"LinearRegression_model = LinearRegression()","ea7611a8":"LinearRegression_model.fit(X_train, y_train)","1082c72d":"# Evaluating\n\nfrom sklearn.metrics import mean_squared_error, accuracy_score","bb949acf":"accuracy_LinearRegression = LinearRegression_model.score(X_test, y_test)","2d3e8f4e":"accuracy_LinearRegression\n\n# around 87% accurate on the test date ie data never seen","4530c6bd":"import tensorflow as tf\nfrom tensorflow import keras\n#from tensorflow.keras.layers import Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam","4241929f":"ANN_model = tf.keras.models.Sequential([\n    \n    tf.keras.layers.Dense(50, input_dim = 7, activation='relu'),\n    tf.keras.layers.Dense(150, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(150, activation='relu'),\n    tf.keras.layers.Dropout(0.5),\n    tf.keras.layers.Dense(50, activation='linear'),\n    tf.keras.layers.Dense(1)\n    \n    ])","654606fa":"ANN_model.compile(loss = 'mse', optimizer = 'adam')","2a528943":"ANN_model.summary()","adb9bc29":"epochs_hist = ANN_model.fit(X_train,y_train, epochs = 100, batch_size = 20)","24a456be":"result = ANN_model.evaluate(X_test, y_test)","6f502a22":"accuracy_ANN_model = 1-result","7f404e96":"print(\"Accuracy :{}\".format(accuracy_ANN_model))\n\n#about 85% accurate","f57fc656":"epochs_hist.history.keys()","808fecdc":"plt.plot(epochs_hist.history['loss'])\nplt.title('Model Loss Progress During Training')\nplt.xlabel('Epoch')\nplt.ylabel('Training Loss')\nplt.legend(['Training Loss'])","ab33618e":"# Decision Tree\n\nfrom sklearn.tree import DecisionTreeRegressor","9441916a":"DecisionTree_model = DecisionTreeRegressor()","dd9ab84a":"DecisionTree_model.fit(X_train, y_train)","9f2582ab":"accuracy_DecisionTree = DecisionTree_model.score(X_test, y_test)","abd75b17":"accuracy_DecisionTree","6b436803":"# Random Forest\n\nfrom sklearn.ensemble import RandomForestRegressor\n","bb7f6290":"RandomForest_model = RandomForestRegressor(n_estimators=100, max_depth= 10)","5c1943fb":"RandomForest_model.fit(X_train, y_train)","c416055b":"accuracy_RandomForest = RandomForest_model.score(X_test, y_test)","6e4c05b7":"accuracy_RandomForest","9018ed2c":"print(\"Accuracy Score of Linear Regression model: {}\".format(accuracy_LinearRegression))\n\nprint(\"Accuracy Score of Artificial Neural Network model: {}\".format(accuracy_ANN_model))\n\nprint(\"Accuracy Score of Decision Tree model: {}\".format(accuracy_DecisionTree))\n\nprint(\"Accuracy Score of Random Forest model: {}\".format(accuracy_RandomForest))","403c7411":"# Plot for values after applying the Standard Scaler ie Scaled Values\n\ny_predict = LinearRegression_model.predict(X_test)","d7e2b0d3":"plt.plot(y_test, y_predict, '^', color ='orange')","1d882a13":"# Plot for origional values before applying Std Scaler ie Unscaled Values\n\ny_predict_orig = scaler_y.inverse_transform(y_predict)\ny_test_orig = scaler_y.inverse_transform(y_test)","7be6fcd7":"plt.plot(y_test_orig, y_predict_orig, '^', color = 'green')","677e607c":"# K and n are required to calculate errors \n# K is for R square Adjusted\n\n\nk = X_test.shape[1]  # no of independent variables\nn = len(X_test)      # no of samples\nn","2b3d7718":"from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nfrom math import sqrt","53b4e319":"MAE = mean_absolute_error(y_test_orig, y_predict_orig)\nprint(\"Mean Absolute Error = {} \". format(MAE))","014099a4":"MSE = mean_squared_error(y_test_orig, y_predict_orig)\nprint(\"Mean Squared Error = {} \". format(MSE))","efc2b5f0":"RMSE = np.sqrt(MSE)\nprint(\"Root Mean Squared Error = {} \". format(RMSE))","33063ad9":"r2 = r2_score(y_test_orig, y_predict_orig)\nprint(\"R Squared or Coefficient of determination = {} \". format(r2))","e25f705b":"adj_r2 = 1-(1-r2)*(n-1)\/(n-k-1)\nprint(\"Adjusted R Square = {} \". format(adj_r2))","2577484f":"## CALCUATING REGRESSION MODEL KPIs","cce79894":"![image.png](attachment:image.png)","f2f21123":"## CREATE TRAINING AND TESTING DATASET","a46d5a48":"## PERFORM EXPLORATORY DATA ANALYSIS","9133fd40":"## TRAIN AND EVALUATE A DECISION TREE AND RANDOM FOREST MODELS\n\n- Decision Tree builds regression or classification models in the form of a tree structure.\n- DT breaks down a dataset into smaller subsets \n- The final result is a tree with decision nodes and lead nodes\n\n- Many DTs make up a __Random Forest__ model which is an essemble model.\n- Predictions made by each DT are averaged to get the prediction of random forest model.\n- Random Forest Regressor fits a number of classifying DTs on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting","26f25059":"**Reference- Project Taught by Ryan Ahmed,Phd**","b9e2fc57":"# Here we see that Multiple Linear Regressor out-perform the non-linear complex models","15110053":"## IMPORT LIBRARIES AND DATASET","976587fd":"## PERFORM DATA VISUALIZATION","a9d9316f":"## TRAIN AND EVALUATE A LINEAR REGRESSION MODEL","a4e869e9":"## TRAIN AND EVALUATE AN ARTIFICIAL NEURAL NETWORK"}}