{"cell_type":{"a759fe59":"code","eb6cf926":"code","a4d75761":"code","1b02224e":"code","c7927f48":"code","1a1dbe1f":"code","c9393746":"code","6ca94142":"code","1e53b47e":"code","3ad04c1f":"code","94aa5ec9":"markdown","75b3b71c":"markdown","0726e21a":"markdown"},"source":{"a759fe59":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time # performace checking\nimport copy # data helpers","eb6cf926":"N_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\nN_CHOISES = 10\n\ndef penalty_f(c, n):\n    if c == 0:\n        return 0\n    elif c == 1:\n        return 50\n    elif c == 2:\n        return 50 + 9 * n\n    elif c == 3:\n        return 100 + 9 * n\n    elif c == 4:\n        return 200 + 9 * n\n    elif c == 5:\n        return 200 + 18 * n\n    elif c == 6:\n        return 300 + 18 * n\n    elif c == 7:\n        return 300 + 36 * n\n    elif c == 8:\n        return 400 + 36 * n\n    elif c == 9:\n        return 500 + 36 * n + 199 * n\n    else:\n        return 500 + 36 * n + 398 * n    ","a4d75761":"class OptimizedData:\n    def __init__(self):\n        s__ = time.time()\n        data = pd.read_csv('\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv')\n        self.pd_data = data\n        self.np_id_offset = 0\n        self.np_n_offset = 11\n        self.np_choise_offset = 1\n        self.np_data = np.array(data)\n        for i, r in enumerate(self.np_data):\n            if r[self.np_id_offset] != i:\n                raise 'Blah'\n                \n        choise_checker = [{r[self.np_choise_offset + i]: i for i in range(10)} for r in self.np_data]\n        self.which_shortcut = np.array([[\n            0 if d == 0 else choise_checker[f][d] if d in choise_checker[f] else 10\n            for f in range(self.families())] \n            for d in range(N_DAYS+1)])\n        self.penalty_shortcut = np.array([[\n            penalty_f(self.which_shortcut[d, f], self.n(f))\n            for f in range(self.families())] \n            for d in range(N_DAYS+1)])\n        print('Init Santas Data in', time.time() - s__, 'seconds')\n    def n(self, id_):\n        return self.np_data[id_, self.np_n_offset]\n    def choise(self, id_, i):\n        return self.np_data[id_, self.np_choise_offset + i]\n    def which(self, id_, i):\n        return self.which_shortcut[i, id_]\n    def families(self):\n        return len(self.np_data)\n    def penalty(self, id_, i):\n        return self.penalty_shortcut[i, id_]\ndata = OptimizedData()","1b02224e":"class OptimisedSubmission:\n    def __init__(self, pair_values_to_copy = None, list_values_to_copy = None, rhs = None):\n        if rhs is not None:\n            self.values = rhs.values.copy()\n            self.daily_occupancy = rhs.daily_occupancy.copy()\n            self.under_occuped = rhs.under_occuped\n            self.over_occuped = rhs.over_occuped\n            self.penalty = rhs.penalty\n            self.accounting_cost = rhs.accounting_cost\n            return\n        self.values = [0 for k in range(data.families())]\n        self.daily_occupancy = [0 for k in range(N_DAYS+1)]\n        self.under_occuped = N_DAYS\n        self.over_occuped = 0\n        self.penalty = 0\n        self.accounting_cost = 0\n        if pair_values_to_copy is not None:\n            for f, d in pair_values_to_copy:\n                self.set_f(f, d)\n        if list_values_to_copy is not None:\n            for f, d in enumerate(list_values_to_copy):\n                self.set_f(f, d)\n    \n    def copy(self):\n        lhs = OptimisedSubmission(rhs=self)\n        return lhs\n                \n    def __accounting_cost(self, d):\n        today_count = self.daily_occupancy[d]\n        if today_count <= 125:\n            return 0\n        yesterday_count = self.daily_occupancy[d+1] if d < N_DAYS else today_count\n        diff = abs(today_count - yesterday_count)\n        return (today_count-125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0)\n                \n    def __set_daily_delta(self, d, n):\n        b = self.daily_occupancy[d]\n        if b < MIN_OCCUPANCY:\n            self.under_occuped -= 1\n        if b > MAX_OCCUPANCY:\n            self.over_occuped -= 1\n        self.accounting_cost -= self.__accounting_cost(d-1)\n        self.accounting_cost -= self.__accounting_cost(d)\n        a = b + n\n        self.daily_occupancy[d] = a\n        self.accounting_cost += self.__accounting_cost(d)\n        self.accounting_cost += self.__accounting_cost(d-1)\n        if a < MIN_OCCUPANCY:\n            self.under_occuped += 1\n        if a > MAX_OCCUPANCY:\n            self.over_occuped += 1\n                \n    def set_f(self, f, i):\n        s = self.values[f]\n        if s == i:\n            return\n        n = data.n(f)\n        if s > 0: \n            self.__set_daily_delta(s, -n)\n            self.penalty -= data.penalty(f, s)\n        self.values[f] = i\n        if i > 0:\n            self.__set_daily_delta(i, n)\n            self.penalty += data.penalty(f, i)\n            \n    def is_valid(self):\n        return self.under_occuped == 0 and self.over_occuped == 0\n    \n    def cost_function(self):\n        if not self.is_valid():\n            raise('Blah')\n        return self.penalty + self.accounting_cost","c7927f48":"def complete_somehow(self):\n    residual = []\n    for f, d in enumerate(self.values):\n        if d < 1:\n            residual += [[data.n(f), f]]\n    daily_occupancy = [[self.daily_occupancy[k], k] for k in range(1, N_DAYS+1)]\n    residual = sorted(residual)[::-1]\n    for n, f in residual:\n        daily_occupancy=sorted(daily_occupancy)\n        self.set_f(f, daily_occupancy[0][1])\n        daily_occupancy[0][0] += n\n    return self\n\ns__ = time.time()\nprint('Some valid submission LB=', complete_somehow(OptimisedSubmission()).cost_function(), 'build in', (time.time() - s__), 'seconds')","1a1dbe1f":"def to_max_choise_k(self, limit, k_):\n    residual = [[] for k in range(N_DAYS+1)]\n    for f, d in enumerate(self.values):\n        if d < 1:\n            residual[data.choise(f, k_)] += [[data.n(f), f]]\n    for d in range(N_DAYS+1):\n        rday = sorted(residual[d])[::-1]\n        for n, f in rday:\n            if self.daily_occupancy[d] >= limit:\n                break\n            self.set_f(f, d)\n    return self\n\ndef to_max_choise(self, limit, k_=9):\n    for i in range(k_+1):\n        to_max_choise_k(self, limit, i)\n    return self\n\ndef some_optimized(self):\n    to_max_choise(self, MIN_OCCUPANCY)\n    to_max_choise(self, (3*MIN_OCCUPANCY+MAX_OCCUPANCY)\/\/4)\n    to_max_choise(self, (MIN_OCCUPANCY+MAX_OCCUPANCY)\/\/2)\n    to_max_choise(self, (MIN_OCCUPANCY+3*MAX_OCCUPANCY)\/\/4)\n    return self\n\ns__ = time.time()\npreoptimized = complete_somehow(some_optimized(OptimisedSubmission()))\nprint('Some resonable submission LB=', preoptimized.cost_function(), 'build in', (time.time() - s__), 'seconds')","c9393746":"def incremental_optimize_by_one_item(self):\n    best = self.cost_function()\n    for f in range(data.families()):\n        s = self.values[f]\n        for i in range(5):\n            self.set_f(f, data.choise(f, i))\n            c = self.penalty + self.accounting_cost\n            if c < best:\n                if self.is_valid():\n                    best = c\n                    s = data.choise(f, i)\n                    break\n        self.set_f(f, s)\n    return self\nincremental_optimize_by_one_item(preoptimized)\nprint('Optimised submission LB=', preoptimized.cost_function(), 'build in', (time.time() - s__), 'seconds')","6ca94142":"def optimize_by_sequential_pairs(self):\n    begin = time.time()\n    now = time.time()\n    for f1 in range(data.families()):\n        s1 = self.values[f1]\n        for f2 in range(data.families()):\n            s2 = self.values[f2]\n            i1 = data.which(f1, s2)\n            if (i1 >= 4 or s2 == s1) and f2 != f1:\n                continue\n            cp = self.copy()\n            cp.set_f(f1, s2)\n            for i2 in range(4):\n                pr = data.choise(f2, i2)\n                cp.set_f(f2, pr)\n                c = cp.penalty + cp.accounting_cost\n                if c < self.cost_function():\n                    if cp.is_valid():\n                        s1 = cp.values[f1]\n                        s2 = cp.values[f2]\n                        break\n            self.set_f(f1, s1)\n            self.set_f(f2, s2)\n            if time.time()>now+2:\n                now = time.time()\n                print('Keep computing, at', int(1000*f1\/data.families())\/10, '%, current cost_function is ', int(10*self.cost_function())\/10, end='   \\r')\n    now = time.time()\n    if now-begin > 2:\n        print()\n    return self\noptimize_by_sequential_pairs(preoptimized)\nprint('Optimised submission LB=', preoptimized.cost_function(), 'build in', (time.time() - s__), 'seconds')","1e53b47e":"# Uncomment to get LB=76168 in 2936 sec\ndef optimize_by_neighbouring_pairs(self):\n    begin = time.time()\n    now = time.time()\n    for f1 in range(data.families()):\n        s1 = self.values[f1]\n        for f2 in range(data.families()):\n            for d in range(-1, 2):\n                s2 = self.values[f2]\n                if s2+d < 1 or s2+d > N_DAYS:\n                    continue\n                i1 = data.which(f1, s2 + d)\n                if (i1 >= 4 or s2 == s1) and f2 != f1:\n                    continue\n                cp = self.copy()\n                cp.set_f(f1, s2 + d)\n                for i2 in range(4):\n                    pr = data.choise(f2, i2)\n                    cp.set_f(f2, pr)\n                    c = cp.penalty + cp.accounting_cost\n                    if c < self.cost_function():\n                        if cp.is_valid():\n                            s1 = cp.values[f1]\n                            s2 = cp.values[f2]\n                            break\n                self.set_f(f1, s1)\n                self.set_f(f2, s2)\n                if time.time()>now+5:\n                    now = time.time()\n                    print('Keep computing, at', int(1000*f1\/data.families())\/10, '%, current cost_function is ', int(10*self.cost_function())\/10, end='   \\r')\n    now = time.time()\n    if now-begin > 5:\n        print()\n    return self\n#optimize_by_neighbouring_pairs(preoptimized)\n#print('Optimised submission LB=', preoptimized.cost_function(), 'build in', (time.time() - s__), 'seconds')","3ad04c1f":"# Uncomment to get LB~74500 in another 40 mins\ndef optimize_by_rebalancing_hard_days(self):\n    begin = time.time()\n    now = time.time()        \n    for d in range(1, N_DAYS+1):\n        possible_options = dict()\n        positive_options = dict()\n        positive = 0\n        for f in range(data.families()):\n            s = self.values[f]\n            if s != d:\n                if data.which(f, d) >= 4:\n                    continue\n                if self.daily_occupancy[s] - data.n(f) < MIN_OCCUPANCY:\n                    continue\n                cp = self.copy()\n                cp.set_f(f, d)\n                delta = cp.penalty - self.penalty\n                possible_options[(f, d)] = delta\n                if delta < 0:\n                    positive_options[(f, d)] = delta\n            else:\n                cp = self.copy()\n                for i in range(4):\n                    t = data.choise(f, i)\n                    if t == d:\n                        continue\n                    if self.daily_occupancy[t] - data.n(f) > MAX_OCCUPANCY:\n                        continue\n                    cp.set_f(f, t)\n                    delta = cp.penalty - self.penalty\n                    possible_options[(f, t)] = delta\n                    if delta < 0:\n                        positive_options[(f, t)] = delta\n        pol = list(possible_options)\n        for f1, s1 in positive_options:\n            for i2 in range(len(pol)):\n                f2, s2 = pol[i2]\n                if (s1 == d) == (s2 == d):\n                    continue\n                if -positive_options[(f1, s1)] < possible_options[(f2, s2)]:\n                    continue\n                cf = self.cost_function()\n                cp = self.copy()\n                b1=cp.values[f1]\n                cp.set_f(f1, s1)\n                b2=cp.values[f2]\n                cp.set_f(f2, s2)\n                br = False\n                for f3, s3 in pol[i2:]:\n                    if -positive_options[(f1, s1)] < possible_options[(f3, s3)]:\n                        continue\n                    b3=cp.values[f3]\n                    cp.set_f(f3, s3)                \n                    if cp.is_valid() and cp.cost_function() < cf - 0.00001:\n                        self.set_f(f1, cp.values[f1])\n                        self.set_f(f2, cp.values[f2])\n                        self.set_f(f3, cp.values[f3])\n                        br = True\n                        break\n                    cp.set_f(f3, b3)\n                if br:\n                    break\n                cp.set_f(f2, b2)                    \n                cp.set_f(f1, b1)\n                if time.time()>now+5:\n                    now = time.time()\n                    print('Keep computing, current cost_function is ', int(10*self.cost_function())\/10, end='   \\r')\n    now = time.time()\n    if now-begin > 5:\n        print()\n    return self\n#optimize_by_rebalancing_hard_days(preoptimized)\n#print('Optimised submission LB=', preoptimized.cost_function(), 'build in', (time.time() - s__), 'seconds')","94aa5ec9":"Problem definition constants and functions in block bellow","75b3b71c":"OptimizedData class in block bellow\nProvides O(1) methods for:\n* Number of family members\n* Choise #K of families\n* If day is in family choises and its index\n* Penalty of day for family.","0726e21a":"OptimizedSubmission class in block bellow\nProvides O(1) method for cost function and components, while keeping modification operations also at O(1) cost.\nSupports fast clonning."}}