{"cell_type":{"7ec74303":"code","3c7e17ed":"code","9b075804":"code","b16a8252":"code","49598f8d":"code","79f0ce12":"code","0a38579e":"code","ffdbc754":"code","41453136":"code","cdfc1fa1":"markdown","492e022d":"markdown","043fdc91":"markdown","ce117902":"markdown","157356cd":"markdown","67ecb36b":"markdown","7f8b1999":"markdown"},"source":{"7ec74303":"!pip install kaggle-environments --upgrade -q","3c7e17ed":"%%writefile ucb_decay.py\n\nimport numpy as np\n\ndecay = 0.97\ntotal_reward = 0\nbandit = None\n\ndef agent(observation, configuration):\n    global reward_sums, n_selections, total_reward, bandit\n    \n    n_bandits = configuration.banditCount\n\n    if observation.step == 0:\n        n_selections, reward_sums = np.full((2, n_bandits), 1e-32)\n    else:\n        reward_sums[bandit] += decay * (observation.reward - total_reward)\n        total_reward = observation.reward\n\n    avg_reward = reward_sums \/ n_selections    \n    delta_i = np.sqrt(2 * np.log(observation.step + 1) \/ n_selections)\n    bandit = int(np.argmax(avg_reward + delta_i))\n\n    n_selections[bandit] += 1\n\n    return bandit","9b075804":"%%writefile bayesian_ucb.py\n\nimport numpy as np\nfrom scipy.stats import beta\n\npost_a, post_b, bandit = [None] * 3\ntotal_reward = 0\nc = 3\n\ndef agent(observation, configuration):\n    global total_reward, bandit, post_a, post_b, c\n\n    if observation.step == 0:\n        post_a, post_b = np.ones((2, configuration.banditCount))\n    else:\n        r = observation.reward - total_reward\n        total_reward = observation.reward\n        # Update Gaussian posterior\n        post_a[bandit] += r\n        post_b[bandit] += 1 - r\n    \n    bound = post_a \/ (post_a + post_b) + beta.std(post_a, post_b) * c\n    bandit = int(np.argmax(bound))\n    \n    return bandit","b16a8252":"from kaggle_environments import make\n\nenv = make(\"mab\", debug=True)","49598f8d":"env.reset()\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"ucb_decay.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","79f0ce12":"env.reset()\nenv.run([\"..\/input\/santa-2020\/submission.py\", \"bayesian_ucb.py\"])\nenv.render(mode=\"ipython\", width=800, height=500)","0a38579e":"def print_rounds(file1, file2, N=5):\n    env = make(\"mab\", debug=True)\n\n    for i in range(N):\n        env.run([file1, file2])\n        p1_score = env.steps[-1][0]['reward']\n        p2_score = env.steps[-1][1]['reward']\n        env.reset()\n        print(f\"Round {i+1}: {p1_score} - {p2_score}\")","ffdbc754":"print('Default vs UCB+decay')\nprint_rounds(\"..\/input\/santa-2020\/submission.py\", \"ucb_decay.py\")","41453136":"print('Default vs BayesianUCB')\nprint_rounds(\"..\/input\/santa-2020\/submission.py\", \"bayesian_ucb.py\")","cdfc1fa1":"## Bayesian UCB\n\nBased on Lilian's blog post.","492e022d":"Default vs bayesian UCB:","043fdc91":"Default vs UCB+Decay:","ce117902":"## Simulations","157356cd":"## UCB with Decay\n\nThe classic UCB implementation (derived from the original implementation) with a decay factor.","67ecb36b":"References:\n* [Santa 2020 starter](https:\/\/www.kaggle.com\/isaienkov\/santa-2020-starter\/): Re-used writefile magic command and make_env function for creating a simulation.  \n* [Lilian's blog post](https:\/\/lilianweng.github.io\/lil-log\/2018\/01\/23\/the-multi-armed-bandit-problem-and-its-solutions.html): Bayesian Implementation of UCB","7f8b1999":"## 5-round comparison"}}