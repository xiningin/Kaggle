{"cell_type":{"8469954b":"code","e2e0be8a":"code","eba9d070":"code","4a93aeab":"code","ffacf27d":"code","0743074e":"code","a1d8b305":"code","85be0e8e":"code","82d76fca":"code","207b0800":"code","9dd8d085":"code","f76c9936":"code","3fbdaf3b":"code","c025e773":"code","e00ec307":"code","ea1fc558":"code","1e763736":"code","490cb44d":"code","884a2108":"code","be662f3c":"code","29a3bc86":"code","63945a18":"code","77f8d512":"code","1578b886":"code","7e78ed7b":"code","81163eb0":"code","29272c82":"code","1d363022":"code","730d8305":"code","d41abf29":"code","8d65e434":"code","7f1dc804":"code","79e48f72":"code","29bb4155":"code","63d16f3c":"code","9c9dfaf4":"code","b18a9a39":"code","8c21807f":"code","3a1c06d0":"code","8c7174d8":"code","cc805050":"code","a7de279d":"code","ef836f62":"code","58d468f7":"markdown","0034bf74":"markdown","e7eb6c07":"markdown"},"source":{"8469954b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e2e0be8a":"CA = pd.read_csv('..\/input\/CAvideos.csv')\nCA.head()","eba9d070":"US = pd.read_csv('..\/input\/USvideos.csv')\n","4a93aeab":"# US.info()","ffacf27d":"#column name as string..\n#name of the Data Frame variable..\ndef numberOfUniqueValues(col_name, dataFrame):\n    print(\"There are {0} unique values.\".format((len(dataFrame[col_name].unique()))))\n    \nnumberOfUniqueValues('views', US)\n# len(US['views'].unique())","0743074e":"US.columns","a1d8b305":"print(\"VideoID:\")\nnumberOfUniqueValues('video_id', US)\n##\nprint(\"TrendingDates:\")\nnumberOfUniqueValues('trending_date', US)\n##\nprint(\"Video Title:\")\nnumberOfUniqueValues('title', US)\n##\nprint(\"Channels:\")\nnumberOfUniqueValues('channel_title', US)\n##\nprint(\"Tags:\")\nnumberOfUniqueValues('tags', US)\n##\n\n","85be0e8e":"#US['trending_date']\ntrending_date_unique = []\n      \n# function to get all the unique elemets of a column in a list.\n# listName will be an empty list which must be declared before hand\n# dataFrame is the name of the data-frame you need to calculate the unique values.\ndef uniqueValuesList(listName, columnName, dataFrame):\n    for data in dataFrame[columnName]:\n        if data not in listName:\n            listName.append(data)\n    return listName\n\n# lets try the function out\nuniqueValuesList(trending_date_unique, 'trending_date', US)","82d76fca":"#state mapping\n# create an empty dictionary\n# some = dict()\n# for xx in range(0,len(trending_date_unique)):\n#     some[trending_date_unique[xx]] = xx\n    ","207b0800":"def stateMapping(listName, dictionaryName, columnName, dataFrame):\n    for unique_names in range(0,len(listName)):\n        dictionaryName[listName[unique_names]] = unique_names\n    dataFrame[columnName] = dataFrame[columnName].map(dictionaryName)","9dd8d085":"trending_Date = dict()\nstateMapping(trending_date_unique, trending_Date, 'trending_date', US)","f76c9936":"US.head()","3fbdaf3b":"unique_video_id = []\nuniqueValuesList(unique_video_id, 'video_id', US)","c025e773":"video_mapping = dict()\nstateMapping(unique_video_id, video_mapping, 'video_id', US)","e00ec307":"unique_video_title = []\nuniqueValuesList(unique_video_title, 'title', US)","ea1fc558":"title_mapping = dict()\nstateMapping(unique_video_title, title_mapping, 'title', US)","1e763736":"unique_channels = []\nuniqueValuesList(unique_channels, 'channel_title', US)","490cb44d":"channels_mapping = dict()\nstateMapping(unique_channels, channels_mapping, 'channel_title', US)","884a2108":"unique_tags = []\nuniqueValuesList(unique_tags, 'tags', US)","be662f3c":"tags_mapping = dict()\nstateMapping(unique_tags, tags_mapping, 'tags', US)","29a3bc86":"US.head()","63945a18":"US.columns","77f8d512":"import numpy as np\nimport seaborn as sb\nimport matplotlib.pyplot as plt\ncols = ['trending_date', 'title', 'channel_title', 'category_id', 'tags' , 'views', 'likes', 'dislikes', 'comment_count']\ncm = np.corrcoef(US[cols].values.T)\nsb.set(font_scale=2)\nhm=sb.heatmap(cm,\n               cbar=True,\n               annot=True,\n               square=True,\n               fmt='.1f',\n               annot_kws={'size':9},\n               yticklabels=cols,\n               xticklabels=cols)\nplt.show()","1578b886":"# plotting the channels by likes and comment-counts\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter","7e78ed7b":"popular_channels_US = (US.groupby('channel_title')['likes', 'views', 'comment_count', 'dislikes'].agg({'likes': 'sum', 'views': 'sum', 'comment_count': 'sum', 'dislikes': 'sum'}).sort_values(by=\"views\", ascending=False))[:10].reset_index()","81163eb0":"popular_channels_US","29272c82":"plt.style.available","1d363022":"plt.style.use('seaborn-whitegrid')\npopular_channels_US.plot(kind='bar', x=\"channel_title\", y=['views','likes', 'dislikes'])","730d8305":"allPopularChannelsUS = US.groupby('channel_title')['likes', 'views', 'comment_count', 'dislikes'].agg({'likes': 'sum', 'views': 'sum', 'comment_count': 'sum', 'dislikes': ['max', 'min']})","d41abf29":"allPopularChannelsUS","8d65e434":"allPopularChannelsUS.columns","7f1dc804":"allPopularVideosUS = US.groupby('title')['views', 'likes', 'dislikes', 'comment_count'].agg({'views': 'sum', 'likes': 'sum', 'dislikes': ['max', 'min'], 'comment_count': 'sum'})","79e48f72":"allPopularVideosUS","29bb4155":"# sorting the data of Popular Videos in US by sum of views and man of dislikes\nallPopularVideosUS = allPopularVideosUS.sort_values([('views','sum'),('dislikes', 'max')], ascending=False)\n# allPopularVideosUS","63d16f3c":"allPopularVideosUS['views']['sum'][len(allPopularVideosUS)-1]","9c9dfaf4":"allPopularVideosUS.columns","b18a9a39":"for gen in range(0, len(allPopularVideosUS)):\n    some_args = {'rat': lambda rating: ((rating['likes']['sum'] - rating['dislikes']['max'])\/rating['views']['sum'])*((rating['comment_count']['sum']\/rating['views']['sum'])*100)}\n    allPopularVideosUS = allPopularVideosUS.assign(**some_args)","8c21807f":"# df['var2'] = pd.Series([round(val, 2) for val in df['var2']], index = df.index)\n# df['var3'] = pd.Series([\"{0:.2f}%\".format(val * 100) for val in df['var3']], index = df.index)\nallPopularVideosUS['rat'] = pd.Series([round(val, 4) for val in allPopularVideosUS['rat']], index=allPopularVideosUS.index)\n","3a1c06d0":"allPopularVideosUS","8c7174d8":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(allPopularVideosUS.loc[:, allPopularVideosUS.columns != 'rat'], allPopularVideosUS['rat'])\n\n","cc805050":"# from sklearn import preprocessing\n# from sklearn import utils\n\n# lab_enc = preprocessing.LabelEncoder()\n# y_train = lab_enc.fit_transform(y_train)\n# y_test = lab_enc.fit_transform(y_test)","a7de279d":"from sklearn import datasets, linear_model\nfrom sklearn.linear_model import LinearRegression\n\nregr = linear_model.LinearRegression()\nregr.fit(X_train, y_train)","ef836f62":"print(\"Training Socre:{:.4f}\".format(regr.score(X_train, y_train)*100))\nprint(\"Test Socre:{:.4f}\".format(regr.score(X_test, y_test)*100))\n","58d468f7":"# agg alias of aggregrate in pandas works as follows. \n# when given 'max' gives the column with the maximum values.\n# when given 'sum' counts the sum total value of the variable in every column.\n# when given 'count' displays the total number of times a channel is repeated.\n# a = 5023450 'max' likes -  'min' is also same \n# b = 96700818 'sum' likes\n# c = 25 'count' likes","0034bf74":"# The data frame allPopularVideosUS is a multi-index dataframe so we can acces the data using the following code\n# allPopularVideosUS['columnName']['indexName'][indexNumber]","e7eb6c07":"# lets have a generalized formula which will give a general rating to any video based on the views, likes, dislikes and comment counts\n# gen_formula = ((likes - dislikes)\/views)*((comment_count\/views)*100)\n# we will create a column \"Generalized Rating\" and using this rating we will do some predictions about the video rating.\n# gen_formula = ((rating['likes']['sum'] - rating['dislikes']['max'])\/rating['views']['sum'])*((rating['comment_count']['sum']\/rating['views']['sum'])*100) \n"}}