{"cell_type":{"3480d6af":"code","4d0bcc66":"code","b8558cd5":"code","cb717e77":"code","10ca059f":"code","5099cbc1":"code","23decd93":"code","bc65590e":"code","c7e8c7db":"code","a8224de5":"code","cc3a253c":"code","d1221450":"code","85cdc621":"code","318a5277":"code","036276f6":"code","61d8693e":"code","f9b1816f":"code","3e15b654":"markdown","7731f20d":"markdown","5a257342":"markdown","e707d287":"markdown","a466d0e8":"markdown","9b68a68d":"markdown","76f93471":"markdown","eff47e49":"markdown","0be2df93":"markdown","a09ca6fa":"markdown","0441a54d":"markdown","c801ae0d":"markdown","5f969203":"markdown","10d5f31c":"markdown"},"source":{"3480d6af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d0bcc66":"df = pd.read_csv('\/kaggle\/input\/taiwan-taipei-city-real-estate-transaction-records\/taipei_city_real_estate_transaction_v2.csv')","b8558cd5":"df.info()\ndf.head()","cb717e77":"# The notion of years below follows Taiwan local calendar\ndf['complete_year'].head()","10ca059f":"# change the calendar from Taiwan local calendar to Gregorian calendar\ndf['complete_year'] = df['complete_year'].astype(int) + 1911","5099cbc1":"type(df['complete_year'][0])","23decd93":"# convert data types\ndf['complete_year'] = df['complete_year'].astype(str)","bc65590e":"type(df['complete_year'][0])","c7e8c7db":"type(df['transaction_year'][0]), type(df['transaction_month'][0])","a8224de5":"# convert data types\ndf['transaction_year'] = df['transaction_year'].astype(str)\ndf['transaction_month'] = df['transaction_month'].astype(str)","cc3a253c":"df['num_partition'].head()","d1221450":"# some columns are not translated so replace them directly\ndf['num_partition'] = df['num_partition'].apply(lambda x: 1 if x == '\u6709' else 0)\ndf['management_org'] = df['management_org'].apply(lambda x: 1 if x == '\u6709' else 0)","85cdc621":"def change_word(x):\n    if  x == 'Address':\n        return 'Residence'\n    \n    elif x == 'Quotient':\n        return 'Business'\n    else:\n        return x\n\ndf['urban_land_use'] = df['urban_land_use'].apply(lambda x: change_word(x))","318a5277":"categorical_col = ['district', 'transaction_type', 'urban_land_use', 'main_use', 'main_building_material', \n                   'complete_year', 'transaction_year', 'transaction_month', 'carpark_category']","036276f6":"for ind, col in enumerate(categorical_col):\n    print(\"Unique values of {}: {} \\n\".format(col, set(df[col])))","61d8693e":"plt.figure(figsize = (20, 30))\nfor ind, col in enumerate(categorical_col):\n    plt.subplot(3, 3, ind+1)\n    df[col].value_counts().plot(kind='bar')\n    plt.xlabel(col, size=10)\n    plt.ylabel(\"counts\")\n    plt.tight_layout() # to avoid graph overlapping\n","f9b1816f":"# describe how an algorithm works in a simple way","3e15b654":"We have 24 column and 5,910 transaction records.\n\n**Categorical Variables:**\n1. district\n1. transaction_type\n1. urban_land_use\n1. main_use\n1. main_building_material\n1. complete_year\n1. carpark_category\n1. transaction_year\n1. transaction_month\n\n**Binary Variables:**\n1. management_org\n1. num_partition\n\n**Numerical Variables:**\n1. land_shift_area\n1. building_shift_total_area\n1. num_room\n1. num_hall\n1. num_toilet\n1. total_ntd\n1. unit_ntd\n1. carpark_shift_area\n1. carpark_ntd\n1. building_age\n1. number_of_land\n1. number_of_building\n1. number_of_carpark","7731f20d":"## Part 1: Change the Calendar of Data","5a257342":"Supply Station\n* What is Gregorian calendar? <br>\nSource: https:\/\/en.wikipedia.org\/wiki\/Gregorian_calendar#Beginning_of_the_year","e707d287":"# Inspect Categorical Data","a466d0e8":"## Part 3: Replace Characters with Numbers","9b68a68d":"# 1. Collect Our Raw Data","76f93471":"# 2. Observe the Dataset","eff47e49":"How about transaction_year and transaction_month?","0be2df93":"* How many columns?\n* How many rows?","a09ca6fa":"## Part 2: Convert Data Types","0441a54d":"Supply Station <br>\n[apply](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.apply.html): Apply a function along an axis of the DataFrame. <br>\n[lambda](https:\/\/www.w3schools.com\/python\/python_lambda.asp): A lambda function is a small anonymous function.","c801ae0d":"# 3. Time to Clean Data","5f969203":"Supply Station:\n* pandas: a data analysis library\n* numpy: a matrix computation\/mathematical library","10d5f31c":"Supply Station:\n\n* What is Dataframe?\n\n\"DataFrame is a **2-dimensional labeled data structure** with columns of potentially **different types**. \nYou can think of it like a spreadsheet or SQL table, or a dict of Series objects.\" <br>\n\nSource: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/getting_started\/dsintro.html"}}