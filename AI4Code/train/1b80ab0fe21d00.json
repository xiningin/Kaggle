{"cell_type":{"a79e1429":"code","469ce5bb":"code","ff03ee3d":"code","e5c2d7d8":"code","d6648416":"code","b28e9fb9":"code","7e237a2f":"code","6e266d75":"code","be7c3657":"code","e9d03dc8":"code","98ecec89":"code","6b81d1a5":"code","84845821":"code","548a65b6":"code","f10494a6":"code","3222744c":"code","dce7af3b":"code","06eee2b8":"code","1456917f":"code","619304eb":"code","e8331cd9":"code","2c28de18":"code","3e25df0e":"code","ceebdf6d":"code","004fbd31":"code","0141ad25":"code","ff731c6b":"code","d97579a8":"code","f84c53bd":"code","f895216f":"code","440a2fcc":"code","902cfc94":"code","0caae49c":"code","b78e7c65":"code","74c85bde":"code","7a261804":"code","8cd97976":"code","dc5410e2":"code","3d2a4a91":"code","7b5da754":"code","cc2758ed":"code","febe1bfe":"code","bb174028":"code","be628a6d":"markdown","a8225c0c":"markdown","fa8d3a00":"markdown","5c6f0597":"markdown","49b6782a":"markdown","739a1e54":"markdown","98c207cc":"markdown","004fabd5":"markdown","995e4ecb":"markdown","5ef12b5d":"markdown","cede08d3":"markdown","f0de052f":"markdown","a65fc041":"markdown","441c99d0":"markdown","dc573e23":"markdown","00f0416f":"markdown","6a67a46d":"markdown","b15cbd84":"markdown"},"source":{"a79e1429":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n","469ce5bb":"# Loading DataSet \n\nDF = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\nDF.head()","ff03ee3d":"DF.info()","e5c2d7d8":"DF.describe(include='all')","d6648416":"DF.isna().sum()\n","b28e9fb9":"# dropping Columns (Alley , FireplaceQu ,PoolQC,Fence,MiscFeature)\n\nDF.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'],axis='columns', inplace=True)\n\n\n","7e237a2f":"# Replace Categorical Values in Columns With Mode\n\n# First Column 'BsmtQual' \n\nDF[\"BsmtQual\"].mode()[0]\nBsmtQual_mode=DF[\"BsmtQual\"].mode()[0]\nDF[\"BsmtQual\"].fillna(BsmtQual_mode,inplace=True)\n\n#Second Column 'BsmtCond' \n\nDF[\"BsmtCond\"].mode()[0]\nBsmtCond_mode=DF[\"BsmtCond\"].mode()[0]\nDF[\"BsmtCond\"].fillna(BsmtCond_mode,inplace=True)\n\n#Third Column 'BsmtExposure' \n\nDF[\"BsmtExposure\"].mode()[0]\nBsmtExposure_mode=DF[\"BsmtExposure\"].mode()[0]\nDF[\"BsmtExposure\"].fillna(BsmtExposure_mode,inplace=True)\n\n# Fourth Column 'BsmtFinType1' \n\nDF[\"BsmtFinType1\"].mode()[0]\nBsmtFinType1_mode=DF[\"BsmtFinType1\"].mode()[0]\nDF[\"BsmtFinType1\"].fillna(BsmtFinType1_mode,inplace=True)\n\n# Fifth Column 'BsmtFinType2'\n\nDF[\"BsmtFinType2\"].mode()[0]\nBsmtFinType2_mode=DF[\"BsmtFinType2\"].mode()[0]\nDF[\"BsmtFinType2\"].fillna(BsmtFinType2_mode,inplace=True)\n\n#Sixth Column 'Electrical'\n\nDF[\"Electrical\"].mode()[0]\nElectrical_mode=DF[\"Electrical\"].mode()[0]\nDF[\"Electrical\"].fillna(Electrical_mode,inplace=True)\n\n# Seventh Column 'GarageType'\n\nDF[\"GarageType\"].mode()[0]\nGarageType_mode=DF[\"GarageType\"].mode()[0]\nDF[\"GarageType\"].fillna(GarageType_mode,inplace=True)\n\n# Eigth Cloumn 'GarageFinish'\n\nDF[\"GarageFinish\"].mode()[0]\nGarageFinish_mode=DF[\"GarageFinish\"].mode()[0]\nDF[\"GarageFinish\"].fillna(GarageFinish_mode,inplace=True)\n\n# Ninth Column 'GarageQual'\n\nDF[\"GarageQual\"].mode()[0]\nGarageQual_mode=DF[\"GarageQual\"].mode()[0]\nDF[\"GarageQual\"].fillna(GarageQual_mode,inplace=True)\n\n#Tenth Column 'GarageCond'\n\nDF[\"GarageCond\"].mode()[0]\nGarageCond_mode=DF[\"GarageCond\"].mode()[0]\nDF[\"GarageCond\"].fillna(GarageCond_mode,inplace=True)\n\n# Eleventh Cloumn 'MasVnrType'\n\nDF ['MasVnrType'].mode()[0]\nMasVnrType_mode=DF ['MasVnrType'].mode()[0]\nDF[\"MasVnrType\"].fillna(MasVnrType_mode,inplace=True)\n","6e266d75":"# Replace missing values in Collumns with numeric values by Mean (Average)\n\n#First Cloumn 'LotFrontage'\n\nLotFrontage_mean=DF[\"LotFrontage\"].mean()\nDF['LotFrontage'].fillna(LotFrontage_mean,inplace=True)\n\n#Second Column 'GarageYrBlt'\n\nGarageYrBlt_mean = DF['GarageYrBlt'].mean()\nDF['GarageYrBlt'].fillna(GarageYrBlt_mean,inplace=True)\n\n# Third Column 'MasVnrArea'\n\nMasVnrArea_mean = DF['MasVnrArea'].mean()\nDF['MasVnrArea'].fillna(MasVnrArea_mean,inplace=True)\n","be7c3657":"pd.set_option('display.max_rows', None)\n\nDF.isna().sum()","e9d03dc8":"# Representing the column 'MSZoning' Which Refers to the zoning classification of sale to See Which Zone Has A largest number Sale \n\nsns.countplot(x='MSZoning',data=DF)\n","98ecec89":"# Representing All Classifications with Comparing with Square Area \n\nsns.barplot(x='MSZoning',y='LotArea',data=DF,palette='Paired')\n","6b81d1a5":"# Representing \"Street\" To the Which Kind Of road to the Property is the most type \n\nsns.countplot(x='Street',data=DF)","84845821":"#Representing 'LotShape' to Show the General Shapes of each Property\nsns.countplot(x='LotShape',data=DF)\n","548a65b6":"# Reperesenting The Frequency Of the Physical Location for Each Property \n\nsns.countplot(x='Neighborhood',data=DF,palette='colorblind')\n\n\nsns.set(rc={'figure.figsize':(50,50)})","f10494a6":"from sklearn.preprocessing import StandardScaler","3222744c":"numeric_list = DF.select_dtypes(include = \"int64\" or \"float64\").columns\nprint (numeric_list)","dce7af3b":"scaler = StandardScaler()\nfor n in numeric_list :\n    DF[n]=scaler.fit_transform(DF[n].values.reshape(-1, 1))\n    ","06eee2b8":"from sklearn.preprocessing import LabelEncoder","1456917f":"objList = DF.select_dtypes(include = \"object\").columns\nprint (objList)","619304eb":"le = LabelEncoder()\n\nfor i in objList:\n    DF[i] = le.fit_transform(DF[i].astype(str))\n\n\n","e8331cd9":"DF.head()","2c28de18":"plt.figure(figsize=(20,15))\nsns.heatmap(DF.corr(),annot=True);","3e25df0e":"df_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_test.head()","ceebdf6d":"df_test.isna().sum()","004fbd31":"# Handing Missing Values as we Handel it in Training Data ","0141ad25":"# dropping Columns (Alley , FireplaceQu ,PoolQC,Fence,MiscFeature)\n\ndf_test.drop(['Alley','FireplaceQu','PoolQC','Fence','MiscFeature'],axis='columns', inplace=True)\n\n\n","ff731c6b":"# Replace Categorical Values in Columns With Mode\n\n# First Column 'BsmtQual' \n\ndf_test[\"BsmtQual\"].mode()[0]\nBsmtQual_mode=df_test[\"BsmtQual\"].mode()[0]\ndf_test[\"BsmtQual\"].fillna(BsmtQual_mode,inplace=True)\n\n#Second Column 'BsmtCond' \n\ndf_test[\"BsmtCond\"].mode()[0]\nBsmtCond_mode=df_test[\"BsmtCond\"].mode()[0]\ndf_test[\"BsmtCond\"].fillna(BsmtCond_mode,inplace=True)\n\n#Third Column 'BsmtExposure' \n\ndf_test[\"BsmtExposure\"].mode()[0]\nBsmtExposure_mode=df_test[\"BsmtExposure\"].mode()[0]\ndf_test[\"BsmtExposure\"].fillna(BsmtExposure_mode,inplace=True)\n\n# Fourth Column 'BsmtFinType1' \n\ndf_test[\"BsmtFinType1\"].mode()[0]\nBsmtFinType1_mode=df_test[\"BsmtFinType1\"].mode()[0]\ndf_test[\"BsmtFinType1\"].fillna(BsmtFinType1_mode,inplace=True)\n\n# Fifth Column 'BsmtFinType2'\n\ndf_test[\"BsmtFinType2\"].mode()[0]\nBsmtFinType2_mode=df_test[\"BsmtFinType2\"].mode()[0]\ndf_test[\"BsmtFinType2\"].fillna(BsmtFinType2_mode,inplace=True)\n\n#Sixth Column 'Exterior1st'\n\ndf_test[\"Exterior1st\"].mode()[0]\nExterior1st_mode=df_test[\"Exterior1st\"].mode()[0]\ndf_test[\"Exterior1st\"].fillna(Exterior1st_mode,inplace=True)\n\n# Seventh Column 'GarageType'\n\ndf_test[\"GarageType\"].mode()[0]\nGarageType_mode=df_test[\"GarageType\"].mode()[0]\ndf_test[\"GarageType\"].fillna(GarageType_mode,inplace=True)\n\n# Eigth Cloumn 'GarageFinish'\n\ndf_test[\"GarageFinish\"].mode()[0]\nGarageFinish_mode=df_test[\"GarageFinish\"].mode()[0]\ndf_test[\"GarageFinish\"].fillna(GarageFinish_mode,inplace=True)\n\n# Ninth Column 'GarageQual'\n\ndf_test[\"GarageQual\"].mode()[0]\nGarageQual_mode=df_test[\"GarageQual\"].mode()[0]\ndf_test[\"GarageQual\"].fillna(GarageQual_mode,inplace=True)\n\n#Tenth Column 'GarageCond'\n\ndf_test[\"GarageCond\"].mode()[0]\nGarageCond_mode=df_test[\"GarageCond\"].mode()[0]\ndf_test[\"GarageCond\"].fillna(GarageCond_mode,inplace=True)\n\n# Eleventh Cloumn 'MasVnrType'\n\ndf_test ['MasVnrType'].mode()[0]\nMasVnrType_mode=df_test['MasVnrType'].mode()[0]\ndf_test[\"MasVnrType\"].fillna(MasVnrType_mode,inplace=True)\n\n# Twelve Coloumn 'Exterior2nd'\n\ndf_test ['Exterior2nd'].mode()[0]\nExterior2nd_mode=df_test['Exterior2nd'].mode()[0]\ndf_test[\"Exterior2nd\"].fillna(Exterior2nd_mode,inplace=True)\n\n# Thirteen Column 'KitchenQual'\ndf_test ['KitchenQual'].mode()[0]\nKitchenQual_mode=df_test['KitchenQual'].mode()[0]\ndf_test[\"KitchenQual\"].fillna(KitchenQual_mode,inplace=True)\n\n# Fourteen Column 'SaleType'\ndf_test ['SaleType'].mode()[0]\nSaleType_mode=df_test['SaleType'].mode()[0]\ndf_test[\"SaleType\"].fillna(SaleType_mode,inplace=True)\n","d97579a8":"# Replace missing values in Collumns with numeric values by Mean (Average)\n\n#First Cloumn 'LotFrontage'\n\nLotFrontage_mean=df_test[\"LotFrontage\"].mean()\ndf_test['LotFrontage'].fillna(LotFrontage_mean,inplace=True)\n\n#Second Column 'GarageYrBlt'\n\nGarageYrBlt_mean = df_test['GarageYrBlt'].mean()\ndf_test['GarageYrBlt'].fillna(GarageYrBlt_mean,inplace=True)\n\n\n# Third Column 'MasVnrArea'\n\nMasVnrArea_mean = df_test['MasVnrArea'].mean()\ndf_test['MasVnrArea'].fillna(MasVnrArea_mean,inplace=True)\n\n# Fourth Column 'BsmtFinSF1'\n\nBsmtFinSF1_mean = df_test['BsmtFinSF1'].mean()\ndf_test['BsmtFinSF1'].fillna(BsmtFinSF1_mean,inplace=True)\n\n#fifth column 'BsmtFinSF2'\nBsmtFinSF2_mean = df_test['BsmtFinSF2'].mean()\ndf_test['BsmtFinSF2'].fillna(BsmtFinSF2_mean,inplace=True)\n# sixth Cloumn 'BsmtUnfSF'\nBsmtUnfSF_mean = df_test['BsmtUnfSF'].mean()\ndf_test['BsmtUnfSF'].fillna(BsmtUnfSF_mean,inplace=True)\n\n# Seventh cloumn 'TotalBsmtSF'\nTotalBsmtSF_mean = df_test['TotalBsmtSF'].mean()\ndf_test['TotalBsmtSF'].fillna(TotalBsmtSF_mean,inplace=True)\n# eighth Column 'BsmtFullBath'\nBsmtFullBath_mean = df_test['BsmtFullBath'].mean()\ndf_test['BsmtFullBath'].fillna(BsmtFullBath_mean,inplace=True)\n\n# ninth column 'BsmtHalfBath'\n\nBsmtHalfBath_mean = df_test['BsmtHalfBath'].mean()\ndf_test['BsmtHalfBath'].fillna(BsmtHalfBath_mean,inplace=True)\n\n# Tenth column 'GarageCars'\nGarageCars_mean = df_test['GarageCars'].mean()\ndf_test['GarageCars'].fillna(GarageCars_mean,inplace=True)\n\n#eleventh column 'GarageArea'\n\nGarageArea_mean = df_test['GarageArea'].mean()\ndf_test['GarageArea'].fillna(GarageArea_mean,inplace=True)","f84c53bd":"# scaling Numeric Data \n\nnumeric_list_test = df_test.select_dtypes(include = \"int64\" or \"float64\").columns\nprint (numeric_list_test)\n","f895216f":"for a in numeric_list_test :\n    df_test[a]=scaler.fit_transform(df_test[a].values.reshape(-1, 1))\n    ","440a2fcc":"# Applying label Encoder to categorical Data \n\nobjList_test = df_test.select_dtypes(include = \"object\").columns\nprint (objList_test)\n","902cfc94":"for s in objList_test:\n    df_test[s] = le.fit_transform(df_test[s].astype(str))\n","0caae49c":"df_test.head()","b78e7c65":"from sklearn.model_selection import train_test_split","74c85bde":"X_train=DF.drop('SalePrice',axis=1).values\nY_train=DF['SalePrice'].values","7a261804":"X_test = np.array(df_test)","8cd97976":"# Modeling \n\n\nfrom sklearn.linear_model import LinearRegression\n\nlr=LinearRegression().fit(X_train,Y_train)\n\nY_test = lr.predict(X_test)","dc5410e2":"from sklearn.metrics import  r2_score","3d2a4a91":"print('DecisionTreeRegressor Train Score is : ' , lr.score(X_train, Y_train))\nprint('DecisionTreeRegressor test Score is : ' , lr.score(X_test, Y_test))\n","7b5da754":"print('the prediction of test data : ' ,Y_test)","cc2758ed":"# Exporting The Submission File ","febe1bfe":"df_submission = (df_test['Id'] + Y_test)","bb174028":"df_submission","be628a6d":"# now both Data for Training & Testing Are Ready For Modeling ","a8225c0c":"# now we are going to Preprocessing data ","fa8d3a00":"Appling Label Encoder For Categorical Data As A Preparation for ML Model to can Understand Them ","5c6f0597":"Checking For Missing Values And Handling It\n","49b6782a":"So The Most Sale is in the 'RL' Classification which Refers to (Residential Low Density)","739a1e54":"# Evaluating our Regression Model ","98c207cc":"Checking for null values in testing data ","004fabd5":"So We After Enocding And Scaling Data We Will see our Data Correlation ","995e4ecb":"# now after Preparing Categorical Data , we will preparing Numerical Data by Scaling its features to optmize our ML Model ","5ef12b5d":"So I will Drop All Columns that have a huge number of missing Values ,\nand then Filling the others those have a little number of missing values ","cede08d3":"So That 'pave' which refers to Paved is the most frequent ","f0de052f":"Sarting Data Preprocessing  as a Preparation for Data Modeling ","a65fc041":"# Printing The Predicted Data ","441c99d0":"Now We will working For Preparing Test Data","dc573e23":"# Its Time to Split Our Data ","00f0416f":"Understanding Data ","6a67a46d":"# So Now There is no any missing Values \n# Lets Start Some Visualization To Understand Data More ","b15cbd84":"Ensure That All is Ready For Data Modeling "}}