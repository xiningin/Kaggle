{"cell_type":{"e419c872":"code","07582ca8":"code","4e6d0b54":"code","4a7a5356":"code","fcacbcb2":"code","9a738e50":"code","6baac9dd":"code","40564023":"code","a80333e5":"code","36ec7e49":"code","a2417cf8":"code","e95f8992":"code","67613b7b":"code","0e1aa8ca":"code","088aaad7":"code","83f6e5e4":"code","3eca5279":"code","a9042882":"code","08c7680e":"code","da100b62":"code","59233a56":"code","3736a230":"code","51633b7d":"code","b403207a":"code","33928051":"code","8cb4e49c":"code","35380c1e":"code","df2a2df9":"code","edb687df":"code","f93b2209":"code","8e32f1b4":"code","550237a6":"code","83b4d243":"code","bb9db371":"code","0aba7ed1":"code","37f66264":"code","a0b7429c":"code","326f7a53":"code","2828471c":"code","227e2698":"code","7f6fe865":"code","e4eb3a0c":"code","c08595f9":"code","f315e8cf":"code","635a457b":"code","ddb7a3f1":"code","d734f6d9":"code","b56f6ecc":"code","066f26a2":"code","49300c5d":"code","d5f78c13":"code","c121db72":"code","d75449d0":"code","dc2be0b4":"code","82de60d0":"code","58789ce0":"code","4d4d819c":"code","52351332":"code","3c70f50b":"markdown","7f57d728":"markdown","b12c5225":"markdown","f7157394":"markdown","14774fbf":"markdown","05ac15d6":"markdown","ec43ed18":"markdown","b313e62d":"markdown","d6c2517b":"markdown","aaa655c1":"markdown","4de16df6":"markdown","d946dccd":"markdown","fffc3656":"markdown","845baa09":"markdown","339951a5":"markdown","73d1dfbf":"markdown","84b2e0c8":"markdown","8c247d21":"markdown","0838303e":"markdown","d35bf045":"markdown","2fee21e9":"markdown","efbae20c":"markdown","9bd627dd":"markdown","9426b964":"markdown","baa3598b":"markdown","d07c21bb":"markdown","d2ba441e":"markdown","734f331d":"markdown","73ccd4f7":"markdown","c41e87cd":"markdown","9065d86f":"markdown","85cf4c3e":"markdown","2375c5b5":"markdown","4a62afc8":"markdown","54d25e51":"markdown"},"source":{"e419c872":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07582ca8":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\nimport zipfile\nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nprint(os.listdir(\"..\/input\"))","4e6d0b54":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","4a7a5356":"def extract_files(source_path, target_path):\n    zip_ref = zipfile.ZipFile(source_path,'r')\n    zip_ref.extractall(target_path)\n    zip_ref.close()","fcacbcb2":"extract_files('\/kaggle\/input\/dogs-vs-cats\/test1.zip','\/kaggle\/working\/')\nextract_files('\/kaggle\/input\/dogs-vs-cats\/train.zip','\/kaggle\/working\/')","9a738e50":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","6baac9dd":"df.head()","40564023":"df.tail()","a80333e5":"df['category'].value_counts().plot.bar()","36ec7e49":"sample = random.choice(filenames)\nimage = load_img(\"\/kaggle\/working\/train\/\"+sample)\nplt.imshow(image)","a2417cf8":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","e95f8992":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","67613b7b":"earlystop = EarlyStopping(patience=10)","0e1aa8ca":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","088aaad7":"callbacks = [earlystop, learning_rate_reduction]","83f6e5e4":"df[\"category\"] = df[\"category\"].replace({0: 'cat', 1: 'dog'}) ","3eca5279":"train_df, validate_df = train_test_split(df, test_size=0.20, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalidate_df = validate_df.reset_index(drop=True)","a9042882":"train_df['category'].value_counts().plot.bar()","08c7680e":"validate_df['category'].value_counts().plot.bar()","da100b62":"total_train = train_df.shape[0]\ntotal_validate = validate_df.shape[0]\nbatch_size=15","59233a56":"train_datagen = ImageDataGenerator(rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","3736a230":"validation_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_generator = validation_datagen.flow_from_dataframe(\n    validate_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical',\n    batch_size=batch_size\n)","51633b7d":"example_df = train_df.sample(n=1).reset_index(drop=True)\nexample_generator = train_datagen.flow_from_dataframe(\n    example_df, \n    \"\/kaggle\/working\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=IMAGE_SIZE,\n    class_mode='categorical'\n)","b403207a":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in example_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","33928051":"epochs=3 if FAST_RUN else 10\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size)","8cb4e49c":"model.save_weights(\"model.h5\")","35380c1e":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, epochs, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\nax1.legend()\n\nax2.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, epochs, 1))\nax2.legend()\n\nplt.tight_layout()\nplt.show()","df2a2df9":"test_filenames = os.listdir(\"\/kaggle\/working\/test1\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","edb687df":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"\/kaggle\/working\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=IMAGE_SIZE,\n    batch_size=batch_size,\n    shuffle=False\n)","f93b2209":"predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","8e32f1b4":"test_df['category'] = np.argmax(predict, axis=-1)","550237a6":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","83b4d243":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","bb9db371":"test_df['category'].value_counts().plot.bar()","0aba7ed1":"sample_test = test_df.head(18)\nres = predict[:, :19]\nplt.figure(figsize=(12, 24))\npred_dict = {0: 'cat', 1: 'dog'}\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"\/kaggle\/working\/test1\/\"+filename, target_size=IMAGE_SIZE)\n    plt.subplot(6, 3, index+1)\n    plt.imshow(img)\n    plt.title(pred_dict[np.argmax(res[index])])\nplt.tight_layout()\nplt.show()","37f66264":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename','category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","a0b7429c":"FAST_RUN = False\nIMAGE_WIDTH=128\nIMAGE_HEIGHT=128\nIMAGE_SIZE=(IMAGE_WIDTH, IMAGE_HEIGHT)\nIMAGE_CHANNELS=3","326f7a53":"filenames = os.listdir(\"\/kaggle\/working\/train\")\ncategories = []\nfor filename in filenames:\n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else:\n        categories.append(0)\n\ndf = pd.DataFrame({\n    'filename': filenames,\n    'category': categories\n})","2828471c":"resnet_weights_path = 'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","227e2698":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\nnum_classes = 2\nresnet_weights_path = 'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Indicate whether the first layer should be trained\/changed or not.\nmy_new_model.layers[0].trainable = False\n","7f6fe865":"my_new_model.compile(optimizer='sgd', \n                     loss='categorical_crossentropy', \n                     metrics=['accuracy'])","e4eb3a0c":"!ls images\/train\/upright","c08595f9":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('images\/kaggle\/input\/dogs-vs-cats\/train.zip')\nimg","f315e8cf":"from tensorflow.keras.preprocessing.image import load_img\nimg = load_img('\/kaggle\/input\/dogs-vs-cats\/test1.zip')\nimg","635a457b":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='images\/train',\n                                        target_size=(image_size, image_size),\n                                        batch_size=10,\n                                        class_mode='categorical')\n\n\n\nvalidation_generator = data_generator.flow_from_directory(\n                                        directory='images\/val',\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')\n\n\n\n# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)\n\n#step_4.check()","ddb7a3f1":"filenames = validation_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(validation_generator,steps = nb_samples)","d734f6d9":"import numpy as np\npred = np.argmax(predict, axis=1)","b56f6ecc":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","066f26a2":"accuracy_score(pred,test_generator.labels)","49300c5d":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img\n\nimage_size = 224\ndata_generator = ImageDataGenerator(preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='images\/train',\n                                        target_size=(image_size, image_size),\n                                        batch_size=10,\n                                        class_mode='categorical')\n\n\n\nvalidation_generator = data_generator.flow_from_directory(\n                                        directory='images\/val',\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')\n\n\n\n# fit_stats below saves some statistics describing how model fitting went\n# the key role of the following line is how it changes my_new_model by fitting to data\nfit_stats = my_new_model.fit_generator(train_generator,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator,\n                                       validation_steps=1)\n\n#step_4.check()","d5f78c13":"from tensorflow.python.keras.preprocessing.image import ImageDataGenerator\ndata_generator_with_aug = ImageDataGenerator(preprocessing_function=preprocess_input,\n                                   horizontal_flip=True,\n                                   width_shift_range = 0.2,\n                                   height_shift_range = 0.2)\n\ntrain_generator_aug = data_generator_with_aug.flow_from_directory(\n        'images\/train',\n        target_size=(image_size, image_size),\n        batch_size=24,\n        class_mode='categorical')","c121db72":"filenames = validation_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(validation_generator,steps = nb_samples)","d75449d0":"data_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input)\nvalidation_generator_no_aug = data_generator_no_aug.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        class_mode='categorical')","dc2be0b4":"fit_stats = my_new_model.fit_generator(train_generator_aug,\n                                       epochs=2,\n                                       steps_per_epoch=22,\n                                       validation_data=validation_generator_no_aug,\n                                       validation_steps=1)","82de60d0":"test_datagen = ImageDataGenerator(preprocess_input)\n\ntest_generator = test_datagen.flow_from_directory(\n        'images\/val',\n        target_size=(image_size, image_size),\n        color_mode=\"rgb\",\n        shuffle = False,\n        class_mode='categorical',\n        batch_size=1)\n\nfilenames = test_generator.filenames\nnb_samples = len(filenames)\n\npredict = my_new_model.predict_generator(test_generator,steps = nb_samples)","58789ce0":"import numpy as np\npred = np.argmax(predict, axis=1)","4d4d819c":"from sklearn.metrics import confusion_matrix,accuracy_score\nconfusion_matrix(pred,test_generator.labels)","52351332":"accuracy_score(pred,test_generator.labels)","3c70f50b":"Submission File Generation","7f57d728":"Early Stop","b12c5225":"Learning Rate Reduction","f7157394":"Prepare Testing Data","14774fbf":"Input Layer: It represent input image data. It will reshape image into single diminsion array. Example your image is 64x64 = 4096, it will convert to (4096,1) array.\nConv Layer: This layer will extract features from image.\nPooling Layer: This layerreduce the spatial volume of input image after convolution.\nFully Connected Layer: It connect the network from a layer to another layer\nOutput Layer: It is the predicted values layer.","05ac15d6":"Define Constants","ec43ed18":"Callbacks","b313e62d":"To prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased","d6c2517b":"Because we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","aaa655c1":"Importing the Required Libraries","4de16df6":"Predict","d946dccd":"Fit Model","fffc3656":"Prepare Traning Data","845baa09":"Traning Generator","339951a5":"See sample image","73d1dfbf":"From our prepare data part. We map data with {1: 'dog', 0: 'cat'}. Now we will map the result back to dog is 1 and cat is 0","84b2e0c8":"Prepare data","8c247d21":"Compile the Model","0838303e":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max\n\n","d35bf045":"Data Augumentation","2fee21e9":"See Total In count","efbae20c":"Build Model","9bd627dd":"Validation Generator","9426b964":"We will convert the predict category back into our generator classes by using train_generator.class_indices. It is the classes that image generator map while converting data into computer vision","baa3598b":"Virtaulize Result","d07c21bb":"We will reduce the learning rate when then accuracy not increase for 2 steps","d2ba441e":"See how our generator work","734f331d":"Save Model","73ccd4f7":"Visualize Training","c41e87cd":"Prepare Traning Data","9065d86f":"'https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","85cf4c3e":"Fit Model","2375c5b5":"See Total In count","4a62afc8":"See predicted result with images","54d25e51":"Create Testing Generator"}}