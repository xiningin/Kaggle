{"cell_type":{"fda1a923":"code","5311e41f":"code","a87e4131":"code","3caea420":"code","d551692e":"code","4858646f":"code","6d67fb43":"code","453a0117":"code","20aed3ec":"code","07630d17":"code","6e53ef9f":"markdown"},"source":{"fda1a923":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5311e41f":"import numpy as np\nimport torch\nimport torch.optim as optim\nimport pandas as pd\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import MinMaxScaler  # \ub370\uc774\ud130 \uc815\uaddc\ud654\nfrom sklearn import preprocessing\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nfrom torch.utils.data import  TensorDataset, DataLoader\nimport matplotlib.pyplot as plt","a87e4131":"device = torch.device('cuda') # \ub514\ubc14\uc774\uc2a4 GPU \uc124\uc815\ntorch.manual_seed(777)\nrandom.seed(777)\ntorch.cuda.manual_seed_all(777)\n\nlearning_rate = 0.001\ntraining_epochs = 1000\nbatch_size = 200\ndrop_prob = 0.3","3caea420":"xy_train = pd.read_csv('train.csv', header = None, skiprows=1)\nxy_train[0] = xy_train[0] % 10000 \/ 100\nx_data = xy_train.loc[:, 0:4]\ny_data = xy_train.loc[:, [5]]\nx_data = np.array(x_data)\ny_data = np.array(y_data)\n\nscaler = preprocessing.StandardScaler()\nx_data = scaler.fit_transform(x_data)\n\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device) ","d551692e":"train_dataset = TensorDataset(x_train, y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                           batch_size = batch_size, \n                                           shuffle = True, \n                                           drop_last = True)","4858646f":"linear1 = torch.nn.Linear(5, 8,bias=True)\nlinear2 = torch.nn.Linear(8, 16,bias=True)\nlinear3 = torch.nn.Linear(16, 32,bias=True)\nlinear4 = torch.nn.Linear(32, 32,bias=True)\nlinear5 = torch.nn.Linear(32, 32,bias=True)\nlinear6 = torch.nn.Linear(32, 32,bias=True)\nlinear7 = torch.nn.Linear(32, 32,bias=True)\nlinear8 = torch.nn.Linear(32, 16,bias=True)\nlinear9 = torch.nn.Linear(16, 8,bias=True)\nlinear10 = torch.nn.Linear(8, 1,bias=True)\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p = 0.3)\n\ntorch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)\ntorch.nn.init.xavier_uniform_(linear6.weight)\ntorch.nn.init.xavier_uniform_(linear7.weight)\ntorch.nn.init.xavier_uniform_(linear8.weight)\ntorch.nn.init.xavier_uniform_(linear9.weight)\ntorch.nn.init.xavier_uniform_(linear10.weight)\n\nmodel = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5, relu, dropout,\n                            linear6, relu, dropout,\n                            linear7, relu, dropout,\n                            linear8, relu, dropout,\n                            linear9, relu, dropout,\n                            linear10).to(device)","6d67fb43":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n\nlosses = []\nmodel_history = []\nerr_history = []\n\ntotal_batch = len(data_loader)\nmodel.train()\n\nfor epoch in range(training_epochs + 1):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n\n  model_history.append(model)\n  err_history.append(avg_cost)\n  \n  if epoch % 10 == 0:  \n    print('Epoch:', '%d' % (epoch + 1), 'Cost =', '{:.9f}'.format(avg_cost))\n  losses.append(cost.item())\nprint('Learning finished')","453a0117":"best_model = model_history[np.argmin(err_history)]","20aed3ec":"xy_test = pd.read_csv('test.csv', header = None, skiprows=1)\nxy_test[0] = xy_test[0] % 10000 \/ 100\nx_data = xy_test.loc[:, :]\nx_data = np.array(x_data)\nx_data = scaler.transform(x_data)\nx_test = torch.FloatTensor(x_data).to(device)\n\nwith torch.no_grad():\n    model.eval()  # \uc8fc\uc758\uc0ac\ud56d (dropout=False)\n    \n    predict = best_model(x_test)","07630d17":"submit = pd.read_csv('sample.csv')\nsubmit['Expected'] = submit['Expected'].astype(float)\nfor i in range(len(predict)):\n  submit['Expected'][i] = predict[i]\nsubmit.to_csv('submit.csv', mode = 'w', index = False, header = True)","6e53ef9f":"# \uacf5\uaca9\ucf54\ub4dc\uc640 \ub2e4\ub978\uc810\n* \ub808\uc774\uc5b4\uc218 7\uac1c -> 10\uac1c\n* xavier normal -> xavier uniform\n* input output\ubcc0\uacbd 5->8->16->32->16->8->1"}}