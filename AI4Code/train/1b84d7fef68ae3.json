{"cell_type":{"b27600aa":"code","3b5d60fe":"code","a14229d0":"code","8df9dabe":"code","b3deabde":"code","1f12aead":"code","7c2e9d9a":"code","5f39779f":"code","7d73ee14":"code","7f94bdd9":"code","1a9d100e":"code","b337a678":"code","625e0d19":"code","20e89c71":"code","4c860a87":"code","c48c3cca":"code","35321f46":"code","2ee10ce5":"code","1f02a63c":"code","5f5fef5c":"code","b9cf3084":"code","366f2f54":"code","78e46970":"code","0121b909":"code","b6b0d360":"code","a063b8e2":"code","0318f4a4":"code","b97db9cd":"code","8674c9ae":"code","fe006bc5":"code","b97799d4":"code","1364ace4":"code","0620a91a":"code","59576510":"code","3cf0d1e3":"code","e8ab6c6a":"code","d9a5b5ce":"code","2b7e657b":"code","d2262b32":"code","c0a5e30e":"code","52eb8329":"code","f67017f6":"code","5c08a916":"code","083f47f0":"code","1657b048":"code","da5be74e":"code","96210407":"code","f84697f8":"code","4e155ae0":"code","af6045b3":"markdown","6485cc43":"markdown","67b0585e":"markdown","9776fb78":"markdown","bbffa94e":"markdown","a8c9af7b":"markdown","09319aeb":"markdown","6b40fbe0":"markdown","672fc423":"markdown","485596dc":"markdown","39629991":"markdown","366950b3":"markdown","ffec782e":"markdown","71d8f139":"markdown","9fba516f":"markdown","70da37da":"markdown","aae26807":"markdown","63d6666b":"markdown","b1c6a5f7":"markdown","c0baf950":"markdown","07d8b58f":"markdown","1e06dc20":"markdown","f77dd1d4":"markdown","735f4cfb":"markdown","c51b2fe3":"markdown","52beefed":"markdown","81ce67c0":"markdown","2d6679b4":"markdown","5b0a9ce2":"markdown","877933e4":"markdown","0e936a2e":"markdown","8fc9612a":"markdown","1b30a1a1":"markdown"},"source":{"b27600aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b5d60fe":"df=pd.read_csv('..\/input\/hotel-booking-demand\/hotel_bookings.csv')\ndf.head()","a14229d0":"df.isnull().mean()\n#\u67e5\u770b\u6bcf\u5217\u7a7a\u503c\u5360\u6bd4","8df9dabe":"df.info()","b3deabde":"df.describe([0.01,0.05,0.1,0.25,0.5,0.75,0.99]).T","1f12aead":"df.hist(figsize=(20,15))\nplt.show()","7c2e9d9a":"plt.figure(figsize=(15,8))\nsns.countplot(x='hotel'\n             ,data=df\n             ,hue='is_canceled'\n             ,palette=sns.color_palette('Set2',2)\n            )","5f39779f":"hotel_cancel=(df.loc[df['is_canceled']==1]['hotel'].value_counts()\/df['hotel'].value_counts()).sort_values(ascending=False)\nprint('\u9152\u5e97\u53d6\u6d88\u7387'.center(20),hotel_cancel,sep='\\n')","7d73ee14":"city_hotel=df[(df['hotel']=='City Hotel') & (df['is_canceled']==0)]\nresort_hotel=df[(df['hotel']=='Resort Hotel') & (df['is_canceled']==0)]\nfor i in [city_hotel,resort_hotel]:\n    i.index=range(i.shape[0])","7f94bdd9":"city_month=city_hotel['arrival_date_month'].value_counts()\nresort_month=resort_hotel['arrival_date_month'].value_counts()\nname=resort_month.index\nx=list(range(len(city_month.index)))\ny=city_month.values\nx1=[i+0.3 for i in x]\ny1=resort_month.values\nwidth=0.3\nplt.figure(figsize=(15,8),dpi=80)\nplt.plot(x,y,label='City Hotel',color='lightsalmon')\nplt.plot(x1,y1,label='Resort Hotel',color='lightseagreen')\nplt.xticks(x,name)\nplt.legend()\nplt.xlabel('Month')\nplt.ylabel('Count')\nplt.title('Month Book')\nfor x,y in zip(x,y):\n    plt.text(x,y+0.1,'%d' % y,ha = 'center',va = 'bottom')\n    \nfor x,y in zip(x1,y1):\n    plt.text(x,y+0.1,'%d' % y,ha = 'center',va = 'bottom')","1a9d100e":"country_book=df['country'].value_counts()[:10]\ncountry_cancel=df[(df.country.isin (country_book.index)) & (df.is_canceled==1)]['country'].value_counts()\nplt.figure(figsize=(15,8))\nsns.countplot(x='country'\n              ,data=df[df.country.isin (country_book.index)]\n              ,hue='is_canceled'\n              ,palette=sns.color_palette('Set2',2)\n             )\nplt.title('Main Source of Guests')","b337a678":"country_cancel_rate=(country_cancel\/country_book).sort_values(ascending=False)\nprint('\u5404\u56fd\u5ba2\u6237\u53d6\u6d88\u7387'.center(10),country_cancel_rate,sep='\\n')","625e0d19":"city_customer=city_hotel.customer_type.value_counts()\nresort_customer=resort_hotel.customer_type.value_counts()\nplt.figure(figsize=(21,12),dpi=80)\nplt.subplot(1,2,1)\nplt.pie(city_customer,labels=city_customer.index,autopct='%.2f%%')\nplt.legend(loc=1)\nplt.title('City Hotel Customer Type')\nplt.subplot(1,2,2)\nplt.pie(resort_customer,labels=resort_customer.index,autopct='%.2f%%')\nplt.title('Resort Hotel Customer Type')\nplt.legend()\nplt.show()","20e89c71":"city_segment=city_hotel.market_segment.value_counts()\nresort_segment=resort_hotel.market_segment.value_counts()\nplt.figure(figsize=(21,12),dpi=80)\nplt.subplot(1,2,1)\nplt.pie(city_segment,labels=city_segment.index,autopct='%.2f%%')\nplt.legend()\nplt.title('City Hotel Market Segment')\nplt.subplot(1,2,2)\nplt.pie(resort_segment,labels=resort_segment.index,autopct='%.2f%%')\nplt.title('Resort Hotel Market Segment')\nplt.legend()\nplt.show()","4c860a87":"plt.figure(figsize=(15,8))\nsns.boxplot(x='customer_type'\n            ,y='adr'\n            ,hue='hotel'\n            ,data=df[df.is_canceled==0]\n            ,palette=sns.color_palette('Set2',2)\n           )\nplt.title('Average Daily Rate of Different Customer Type')","c48c3cca":"plt.figure(figsize=(15,8))\nsns.countplot(x='is_repeated_guest'\n              ,data=df\n              ,hue='is_canceled'\n              ,palette=sns.color_palette('Set2',2)\n             )\nplt.title('New\/Repeated Guest Amount')\nplt.xticks(range(2),['no','yes'])","35321f46":"guest_cancel=(df.loc[df['is_canceled']==1]['is_repeated_guest'].value_counts()\/df['is_repeated_guest'].value_counts()).sort_values(ascending=False)\nguest_cancel.index=['New Guest', 'Repeated Guest']\nprint('\u65b0\u8001\u5ba2\u53d6\u6d88\u7387'.center(15),guest_cancel,sep='\\n')","2ee10ce5":"print('\u4e09\u79cd\u62bc\u91d1\u65b9\u5f0f\u9884\u5b9a\u91cf'.center(15),df['deposit_type'].value_counts(),sep='\\n')","1f02a63c":"deposit_cancel=(df.loc[df['is_canceled']==1]['deposit_type'].value_counts()\/df['deposit_type'].value_counts()).sort_values(ascending=False)\nplt.figure(figsize=(8,5))\nx=range(len(deposit_cancel.index))\ny=deposit_cancel.values\nplt.bar(x,y,label='Cancel_Rate',color=['orangered','lightsalmon','lightseagreen'],width=0.4)\nplt.xticks(x,deposit_cancel.index)\nplt.legend()\nplt.title('Cancel Rate of Deposite Type')\nfor x,y in zip(x,y):\n    plt.text(x,y,'%.2f' % y,ha = 'center',va = 'bottom')","5f5fef5c":"plt.figure(figsize=(15,8))\nsns.countplot(x='assigned_room_type'\n              ,data=df\n              ,hue='is_canceled'\n              ,palette=sns.color_palette('Set2',2)\n             )\nplt.title('Book & Cancel Amount of Room Type')","b9cf3084":"room_cancel=df.loc[df['is_canceled']==1]['assigned_room_type'].value_counts()[:7]\/df['assigned_room_type'].value_counts()[:7]\nprint('\u4e0d\u540c\u623f\u578b\u53d6\u6d88\u7387'.center(5),room_cancel.sort_values(ascending=False),sep='\\n')","366f2f54":"df1=df.drop(labels=['reservation_status_date'],axis=1)","78e46970":"cate=df1.columns[df1.dtypes == \"object\"].tolist()\n#\u7528\u6570\u5b57\u8868\u73b0\u7684\u5206\u7c7b\u578b\u53d8\u91cf\nnum_cate=['agent','company','is_repeated_guest']\ncate=cate+num_cate","0121b909":"results={}\nfor i in ['agent','company']:\n    result=np.sort(df1[i].unique())\n    results[i]=result\nresults","b6b0d360":"# agent\u548ccompany\u5217\u7a7a\u503c\u5360\u6bd4\u8f83\u591a\u4e14\u65e00\u503c\uff0c\u6240\u4ee5\u75280\u586b\u8865\ndf1[['agent','company']]=df1[['agent','company']].fillna(0,axis=0)","a063b8e2":"df1.loc[:,cate].isnull().mean() ","0318f4a4":"# \u521b\u9020\u65b0\u53d8\u91cfin_company\u548cin_agent\u5bf9\u65c5\u5ba2\u5206\u7c7b,company\u548cagent\u4e3a0\u7684\u8bbe\u4e3aNO,\u975e0\u7684\u4e3aYES\ndf1.loc[df1['company'] == 0,'in_company']='NO'\ndf1.loc[df1['company'] != 0,'in_company']='YES'\ndf1.loc[df1['agent'] == 0,'in_agent']='NO'\ndf1.loc[df1['agent'] != 0,'in_agent']='YES'","b97db9cd":"#\u521b\u9020\u65b0\u7279\u5f81same_assignment,\u82e5\u9884\u8ba2\u7684\u623f\u95f4\u7c7b\u578b\u548c\u5206\u914d\u7684\u7c7b\u578b\u4e00\u81f4\u5219\u4e3ayes\uff0c\u53cd\u4e4b\u4e3ano\ndf1.loc[df1['reserved_room_type'] == df1['assigned_room_type'],'same_assignment']='Yes'\ndf1.loc[df1['reserved_room_type'] != df1['assigned_room_type'],'same_assignment']='No'","8674c9ae":"# \u5220\u9664'reserved_room_type','assigned_room_type','agent','company'\u56db\u4e2a\u7279\u5f81\ndf1=df1.drop(labels=['reserved_room_type','assigned_room_type','agent','company'],axis=1)","fe006bc5":"# \u91cd\u65b0\u8bbe\u7f6e'is_repeated_guest'\uff0c\u5e38\u5ba2\u6807\u4e3aYES\uff0c\u975e\u5e38\u5ba2\u4e3aNO\ndf1['is_repeated_guest'][df1['is_repeated_guest']==0]='NO'\ndf1['is_repeated_guest'][df1['is_repeated_guest']==1]='YES'","b97799d4":"df1['country']=df1['country'].fillna(df1['country'].mode()[0])","1364ace4":"for i in ['in_company','in_agent','same_assignment']:\n    cate.append(i)\n\nfor i in ['reserved_room_type','assigned_room_type','agent','company']:\n    cate.remove(i)\ncate","0620a91a":"# \u5bf9\u5206\u7c7b\u578b\u7279\u5f81\u8fdb\u884c\u7f16\u7801\nfrom sklearn.preprocessing import OrdinalEncoder\noe = OrdinalEncoder()\noe = oe.fit(df1.loc[:,cate])\ndf1.loc[:,cate] = oe.transform(df1.loc[:,cate])","59576510":"# \u7b5b\u9009\u51fa\u8fde\u7eed\u578b\u53d8\u91cf\uff0c\u9700\u8981\u5148\u5220\u9664'is_canceled'\u8fd9\u4e00\u6807\u7b7e\ncol=df1.columns.tolist()\ncol.remove('is_canceled')\nfor i in cate:\n    col.remove(i)\ncol","3cf0d1e3":"df1[col].isnull().sum()","e8ab6c6a":"# \u4f7f\u7528\u4f17\u6570\u586b\u8865xtrain children\u5217\u7684\u7a7a\u503c\ndf1['children']=df1['children'].fillna(df1['children'].mode()[0])","d9a5b5ce":"# \u8fde\u7eed\u578b\u53d8\u91cf\u8fdb\u884c\u65e0\u91cf\u7eb2\u5316\nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nss = ss.fit(df1.loc[:,col])\ndf1.loc[:,col] = ss.transform(df1.loc[:,col])","2b7e657b":"cor=df1.corr()\ncor=abs(cor['is_canceled']).sort_values()\ncor","d2262b32":"plt.figure(figsize=(8,15))\nx=range(len(cor.index))\nname=cor.index\ny=abs(cor.values)\nplt.barh(x,y,color='salmon')\nplt.yticks(x,name)\nfor x,y in zip(x,y):\n    plt.text(y,x-0.1,'%.2f' % y,ha = 'center',va = 'bottom')\nplt.xlabel('Corrleation')\nplt.ylabel('Varriance')\nplt.show()","c0a5e30e":"df2=df1.drop('reservation_status',axis=1)","52eb8329":"# \u5212\u5206\u7279\u5f81x\u548c\u6807\u7b7ey\nx=df2.loc[:,df2.columns != 'is_canceled' ]\ny=df2.loc[:,'is_canceled']\nfrom sklearn.model_selection import train_test_split as tts\nxtrain,xtest,ytrain,ytest=tts(x,y,test_size=0.3,random_state=90)\nfor i in [xtrain,xtest,ytrain,ytest]:\n    i.index=range(i.shape[0])","f67017f6":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score as cvs,KFold\nfrom sklearn.metrics import accuracy_score\nrfc=RandomForestClassifier(n_estimators=100,random_state=90)\ncv=KFold(n_splits=10, shuffle = True, random_state=90)\nrfc_score=cvs(rfc,xtrain,ytrain,cv=cv).mean()\nrfc.fit(xtrain,ytrain)\ny_score=rfc.predict_proba(xtest)[:,1]\nrfc_pred=rfc.predict(xtest)\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score as AUC\nFPR, recall, thresholds = roc_curve(ytest,y_score, pos_label=1)\nrfc_auc = AUC(ytest,y_score)","5c08a916":"# \u7ed8\u5236ROC\u66f2\u7ebf\nplt.figure(figsize=(8,8))\nplt.plot(FPR, recall, color='red',label='ROC curve (area = %0.2f)' % rfc_auc)\nplt.plot([0, 1], [0, 1], color='black', linestyle='--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('Recall')\nplt.title('Random Forest Classifier ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","083f47f0":"from xgboost import XGBClassifier\nxgbr=XGBClassifier(n_estimators=100,random_state=90)\nxgbr_score=cvs(xgbr,xtrain,ytrain,cv=cv).mean()\nxgbr.fit(xtrain,ytrain)\ny_score=xgbr.predict_proba(xtest)[:,1]\nxgbr_pred=xgbr.predict(xtest)\nFPR, recall, thresholds = roc_curve(ytest,y_score, pos_label=1)\nxgbr_auc = AUC(ytest,y_score)","1657b048":"plt.figure(figsize=(8,8))\nplt.plot(FPR, recall, color='red',label='ROC curve (area = %0.2f)' % xgbr_auc)\nplt.plot([0, 1], [0, 1], color='black', linestyle='--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('Recall')\nplt.title('XGBoost Classifier ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","da5be74e":"from sklearn.linear_model import LogisticRegression as LR\nlr = LR(penalty='l2',solver='liblinear',max_iter=1000) \nlr_score=cvs(lr,xtrain,ytrain,cv=cv).mean()\nlr.fit(xtrain,ytrain)\ny_score=lr.predict_proba(xtest)[:,1]\nlr_pred=lr.predict(xtest)\nFPR, recall, thresholds = roc_curve(ytest,y_score, pos_label=1)\nlr_auc = AUC(ytest,y_score)","96210407":"plt.figure(figsize=(8,8))\nplt.plot(FPR, recall, color='red',label='ROC curve (area = %0.2f)' % lr_auc)\nplt.plot([0, 1], [0, 1], color='black', linestyle='--')\nplt.xlim([-0.05, 1.05])\nplt.ylim([-0.05, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('Recall')\nplt.title('LogisticRegression ROC Curve')\nplt.legend(loc=\"lower right\")\nplt.show()","f84697f8":"# \u67e5\u770b\u5404\u6a21\u578bclassification_report\nfrom sklearn.metrics import classification_report as CR\nprint('\u968f\u673a\u68ee\u6797'.center(50), CR(ytest,rfc_pred),sep='\\n')\nprint('XGBoost'.center(55),CR(ytest,xgbr_pred),sep='\\n')\nprint('\u903b\u8f91\u56de\u5f52'.center(50),CR(ytest,lr_pred),sep='\\n')","4e155ae0":"score={'Model_score':[rfc_score,xgbr_score,lr_score],'Auc_area':[rfc_auc,xgbr_auc,lr_auc]}\nscore_com=pd.DataFrame(data=score,index=['RandomForest','XGBoost','LogisticRegression'])\nscore_com.sort_values(by=['Model_score'],ascending=False)","af6045b3":"# 1. \u63a2\u7d22\u6570\u636e","6485cc43":"### \u968f\u673a\u68ee\u6797\u548cXGBoost\u8fd9\u4e24\u4e2a\u6811\u6a21\u578b\u5728\u8be5\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u6700\u597d\uff0c\u968f\u673a\u68ee\u6797\u7684\u51c6\u786e\u5ea6\u8fbe\u5230\u4e8688.9%\uff0cAUC\u9762\u79ef\u4e5f\u67090.95\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u53c2\u6765\u7ee7\u7eed\u63d0\u5347\u6a21\u578b\u7684\u6548\u679c","67b0585e":"## 2.9\u623f\u95f4\u7c7b\u578b\u4e0e\u9884\u5b9a\u53d6\u6d88\u91cf","9776fb78":"## 2.4\u5ba2\u6237\u7c7b\u578b","bbffa94e":"## 2.3\u5ba2\u6e90\u5730\u4e0e\u9884\u8ba2\u53d6\u6d88\u7387","a8c9af7b":"### \u5728\u9884\u5b9a\u91cf\u524d7\u7684\u623f\u578b\u4e2d\uff0cA\u3001G\u623f\u578b\u7684\u53d6\u6d88\u7387\u5747\u9ad8\u4e8e\u5176\u4ed6\u623f\u578b\uff0cA\u623f\u578b\u7684\u53d6\u6d88\u7387\u66f4\u662f\u9ad8\u8fbe44.5%","09319aeb":"### \u5efa\u6a21\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u9884\u6d4b\u65c5\u5ba2\u662f\u5426\u4f1a\u53d6\u6d88\u9152\u5e97\u7684\u9884\u8ba2\uff0c\u540e\u7eed\u9700\u8981\u5c06'is_canceled'\u8bbe\u4e3a\u6807\u7b7ey\uff0c\u5176\u4f59\u4e3a\u7279\u5f81x\u3002\u65e5\u671f\u7279\u5f81'is_cance'reservation_status_date'\u4e0d\u4f1a\u76f4\u63a5\u5f71\u54cd\u6807\u7b7e\uff0c\u6240\u4ee5\u5220\u9664","6b40fbe0":"### \u65e0\u9700\u62bc\u91d1('No Deposit')\u662f\u9884\u5b9a\u91cf\u6700\u9ad8\u7684\u65b9\u5f0f\uff0c\u4e14\u53d6\u6d88\u7387\u8f83\u4f4e\uff0c\u800c\u4e0d\u9000\u62bc\u91d1(Non Refund)\u8fd9\u4e00\u7c7b\u578b\u7684\u53d6\u6d88\u9884\u8ba2\u7387\u9ad8\u8fbe99%\uff0c\u53ef\u4ee5\u51cf\u5c11\u8fd9\u4e00\u7c7b\u578b\u7684\u62bc\u91d1\u65b9\u5f0f\u4ee5\u51cf\u5c11\u5ba2\u6237\u53d6\u6d88\u7387","672fc423":"### \u4e24\u95f4\u9152\u5e97\u7684\u5ba2\u6e90\u4e3b\u8981\u6765\u81ea\u7ebf\u4e0a\u65c5\u6e38\u673a\u6784\uff0c\u5176\u5728City Hotel\u7684\u5360\u6bd4\u751a\u81f3\u8d85\u8fc75\u6210\uff1b\u7ebf\u4e0b\u65c5\u6e38\u673a\u6784\u7684\u6bd4\u91cd\u6b21\u4e4b\uff0c\u5747\u4e3a20%\u5de6\u53f3","485596dc":"## 2.6\u5404\u7c7b\u65c5\u5ba2\u65e5\u5747\u5f00\u9500","39629991":"### \u9884\u8ba2\u72b6\u6001\uff08'reservation_status')\u4e0e\u662f\u5426\u53d6\u6d88\u9884\u8ba2\u7684\u76f8\u5173\u6027\u6700\u9ad8\uff0c\u8fbe\u5230\u4e860.92\uff0c\u4f46\u8003\u8651\u5230\u540e\u7eed\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6a21\u578b\u8fc7\u62df\u5408\uff0c\u6240\u4ee5\u5220\u9664\uff1b\u62bc\u91d1\u7c7b\u578b('deposit_type')\u5219\u8fbe\u5230\u4e860.47\uff0c\u521b\u9020\u7684\u7279\u5f81\u9884\u8ba2\u548c\u5206\u914d\u623f\u578b\u662f\u5426\u4e00\u81f4('same_assignment')\u4e5f\u67090.25\u7684\u76f8\u5173\u6027","366950b3":"### \u9152\u5e97\u7684\u4e3b\u8981\u5ba2\u6237\u7c7b\u578b\u90fd\u662f\u6563\u5ba2(Transient)\uff0c\u5360\u6bd4\u5747\u4e3a70%\u5de6\u53f3","ffec782e":"## 3.1\u5904\u7406\u5206\u7c7b\u578b\u53d8\u91cf","71d8f139":"## 2.5\u9152\u5e97\u9884\u8ba2\u9014\u5f84","9fba516f":"## 3.2\u5904\u7406\u8fde\u7eed\u578b\u53d8\u91cf","70da37da":"## 4.2XGBoost","aae26807":"### 1.City Hotel\u7684\u9884\u5b9a\u91cf\u548c\u53d6\u6d88\u7387\u90fd\u8fdc\u9ad8\u4e8eResort Hotel\uff0c\u8be5\u9152\u5e97\u5e94\u5bf9\u5ba2\u6237\u5c55\u5f00\u8c03\u7814\uff0c\u6df1\u5165\u4e86\u89e3\u5bfc\u81f4\u5ba2\u6237\u6700\u7ec8\u653e\u5f03\u9884\u8ba2\u7684\u56e0\u7d20\u4ece\u800c\u964d\u4f4e\u5ba2\u6237\u7684\u53d6\u6d88\u7387\n### 2.\u9152\u5e97\u5e94\u5229\u7528\u597d\u6bcf\u5e747\u3001 8\u6708\u7684\u65c5\u6e38\u65fa\u5b63\uff0c\u53ef\u4ee5\u5728\u4fdd\u8bc1\u670d\u52a1\u8d28\u91cf\u7684\u540c\u65f6\u9002\u5f53\u63d0\u9ad8\u4ef7\u683c\u83b7\u53d6\u66f4\u591a\u5229\u6da6\uff0c\u5728\u6de1\u5b63\uff08\u51ac\u5b63\uff09\u7684\u65f6\u5019\u8fdb\u884c\u4f18\u60e0\u6d3b\u52a8\uff0c\u5982\u5723\u8bde\u5927\u4fc3\u548c\u65b0\u5e74\u6d3b\u52a8\uff0c\u51cf\u5c11\u9152\u5e97\u7a7a\u623f\u7387\n### 3.\u9152\u5e97\u9700\u5206\u6790\u6765\u81ea\u8461\u8404\u7259\u3001\u82f1\u56fd\u7b49\u4e3b\u8981\u5ba2\u6e90\u56fd\u7684\u5ba2\u6237\u753b\u50cf\uff0c\u4e86\u89e3\u8fd9\u4e9b\u5ba2\u6237\u7684\u5c5e\u6027\u6807\u7b7e\u3001\u504f\u597d\u4e0e\u6d88\u8d39\u7279\u5f81\uff0c\u63a8\u51fa\u4e13\u5c5e\u670d\u52a1\u4ece\u800c\u964d\u4f4e\u5ba2\u6237\u7684\u53d6\u6d88\u7387\n### 4.\u7531\u4e8e\u6563\u5ba2\u662f\u9152\u5e97\u7684\u4e3b\u8981\u5ba2\u6237\u7fa4\u4e14\u6d88\u8d39\u6c34\u5e73\u8f83\u9ad8\uff0c\u9152\u5e97\u53ef\u4ee5\u901a\u8fc7\u7ebf\u4e0a\u548c\u7ebf\u4e0b\u65c5\u6e38\u673a\u6784\u7684\u9014\u5f84\uff0c\u52a0\u5927\u5bf9\u81ea\u7531\u884c\u7684\u5ba3\u4f20\u8425\u9500\uff0c\u4ece\u800c\u5438\u5f15\u66f4\u591a\u8be5\u7c7b\u578b\u7684\u6e38\u5ba2\n### 5.\u65b0\u5ba2\u7684\u53d6\u6d88\u7387\u6bd4\u8001\u5ba2\u9ad824%\uff0c\u56e0\u6b64\uff0c\u9152\u5e97\u5e94\u91cd\u70b9\u5173\u6ce8\u65b0\u5ba2\u7684\u9884\u8ba2\u4e0e\u5165\u4f4f\u4f53\u9a8c\uff0c\u4e3a\u65b0\u5ba2\u63d0\u4f9b\u66f4\u591a\u6307\u5f15\u4e0e\u4f18\u60e0\uff0c\u5982\u4e3a\u9996\u6b21\u5165\u4f4f\u7684\u5ba2\u6237\u63d0\u4f9b\u6298\u6263\uff0c\u8c03\u7814\u65b0\u5ba2\u5bf9\u5165\u4f4f\u6ee1\u610f\u4e0e\u4e0d\u6ee1\u610f\u7684\u53cd\u9988\u4ee5\u63d0\u5347\u65e5\u540e\u670d\u52a1\uff0c\u540c\u65f6\u7ef4\u62a4\u597d\u8001\u5ba2\n### 6.\u4e0d\u9000\u62bc\u91d1(Non Refund)\u8fd9\u4e00\u7c7b\u578b\u7684\u53d6\u6d88\u9884\u8ba2\u7387\u9ad8\u8fbe99%\uff0c\u9152\u5e97\u5e94\u4f18\u5316\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5982\u8fd4\u8fd850%\u7684\u62bc\u91d1\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u53d6\u6d88\u8fd9\u4e00\u79cd\u65b9\u5f0f\uff0c\u4ece\u800c\u63d0\u9ad8\u5165\u4f4f\u7387\n### 7.A\u3001G\u623f\u578b\u7684\u53d6\u6d88\u7387\u8fdc\u9ad8\u4e8e\u5176\u4ed6\u623f\u578b\uff0c\u9152\u5e97\u65b9\u5e94\u5728\u5ba2\u6237\u5728\u9884\u8ba2\u7684\u65f6\u5019\u8ddf\u5ba2\u6237\u4ed4\u7ec6\u786e\u8ba4\u623f\u95f4\u4fe1\u606f\uff0c\u8ba9\u5ba2\u6237\u5bf9\u623f\u95f4\u60c5\u51b5\u6709\u5145\u5206\u4e86\u89e3\uff0c\u907f\u514d\u8ba4\u77e5\u9519\u8bef\uff0c\u540c\u65f6\u53ef\u4ee5\u5bf9\u623f\u95f4\u8bbe\u65bd\u8fdb\u884c\u4f18\u5316\u5e76\u63d0\u9ad8\u670d\u52a1\u6c34\u5e73","63d6666b":"## 4.5\u5c0f\u7ed3","b1c6a5f7":"# 2.\u6570\u636e\u53ef\u89c6\u5316\u5206\u6790","c0baf950":"### \u8001\u5ba2\u7684\u53d6\u6d88\u7387\u4e3a14.4%\uff0c\u800c\u65b0\u5ba2\u7684\u53d6\u6d88\u7387\u5219\u8fbe\u5230\u4e8637.8%\uff0c\u9ad8\u51fa\u8001\u5ba224\u4e2a\u767e\u5206\u70b9","07d8b58f":"## 2.2\u9152\u5e97\u5404\u6708\u4efd\u9884\u8ba2\u91cf","1e06dc20":"## 2.10 \u5206\u6790\u5c0f\u7ed3","f77dd1d4":"## 4.3\u903b\u8f91\u56de\u5f52","735f4cfb":"# 4\u5efa\u6a21\u9884\u6d4b","c51b2fe3":"### City Hotel\u7684\u9884\u5b9a\u91cf\u4e0e\u53d6\u6d88\u91cf\u90fd\u9ad8\u4e8eResort Hotel\uff0c\u4f46Resort Hotel\u53d6\u6d88\u7387\u4e3a27.8%\uff0c\u800cCity Hotel\u7684\u53d6\u6d88\u7387\u8fbe\u5230\u4e8641.7%\n","52beefed":"# 3.\u6570\u636e\u9884\u5904\u7406","81ce67c0":"## 2.8\u62bc\u91d1\u65b9\u5f0f\u4e0e\u9884\u5b9a\u53d6\u6d88\u7387","2d6679b4":"### 2.1\u9152\u5e97\u9884\u8ba2\u91cf\u548c\u53d6\u6d88\u91cf","5b0a9ce2":"## 4.1\u968f\u673a\u68ee\u6797","877933e4":"### Resort hotel\u548cCity hotel\u7684\u65fa\u5b63\u5747\u4e3a\u590f\u5b637\u30018\u6708\u4efd\uff0c\u4e14\u5ba2\u6e90\u4e3b\u8981\u4e3a\u6b27\u6d32\u56fd\u5bb6\uff0c\u7b26\u5408\u6b27\u6d32\u6e38\u5ba2\u504f\u7231\u590f\u5b63\u51fa\u6e38\u7684\u7279\u70b9\uff0c\u9700\u8981\u91cd\u70b9\u5173\u6ce8\u6765\u81ea\u8461\u8404\u7259(PRT)\u548c\u82f1\u56fd(BRT)\u7b49\u53d6\u6d88\u7387\u9ad8\u7684\u4e3b\u8981\u5ba2\u6e90","0e936a2e":"## 3.3\u5404\u53d8\u91cf\u7684\u76f8\u5173\u6027\u7cfb\u6570","8fc9612a":"### City Hotel\u5404\u7c7b\u5ba2\u6237\u7684\u65e5\u5747\u5f00\u9500\u5747\u9ad8\u4e8eResort Hotel\uff1b\u5728\u56db\u79cd\u7c7b\u578b\u7684\u5ba2\u6237\u4e2d\uff0c\u6563\u5ba2\uff08Transient\uff09\u7684\u6d88\u8d39\u6700\u9ad8\uff0c\u56e2\u4f53\u5ba2\uff08Group\uff09\u6700\u4f4e","1b30a1a1":"## 2.7\u65b0\u8001\u5ba2\u6570\u91cf\u4e0e\u53d6\u6d88\u9884\u8ba2\u7387"}}