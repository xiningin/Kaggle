{"cell_type":{"af1ec3fe":"code","23e6a909":"code","e3302c52":"code","12fe7ca6":"code","21ef7a0a":"code","5c0b560d":"code","84156709":"code","f84ff1d9":"code","111bc0d7":"code","7fe548a8":"code","375204bc":"code","8542822b":"code","64abbd5e":"code","c3fdbbe4":"code","13d6aa3c":"code","c1870e04":"code","2f11ad54":"code","370470dc":"code","948a7675":"code","de0018c0":"code","93c5a114":"code","d79fc021":"code","df9a6673":"code","bd7c46d8":"code","533071a7":"code","a4f354db":"code","55ba5854":"code","b853e569":"code","00b5892c":"code","76a5d614":"code","dd9607dc":"code","2c04c135":"code","33bd04c1":"code","dc735d9e":"code","418b1095":"code","42204bbd":"code","7371ed9d":"code","49ad2935":"code","c900a4fd":"code","008ba711":"code","a6d91f8d":"code","1c5acfc7":"code","658e3705":"code","b8af7ff6":"code","bb2e2828":"code","3f3ba28b":"code","1fdcc445":"code","7780b412":"code","3c6c89d2":"code","ec83013b":"code","91693c78":"code","acedfe26":"code","4357bad2":"code","343c3ec1":"code","4679015c":"code","2baa15f4":"code","e70a4a52":"code","a0eb8671":"code","7a48b0cc":"code","39ee865b":"code","434856f1":"code","1e9b283a":"code","108a82f7":"code","263bdb9d":"code","3fceecf6":"code","8d9dc0f4":"code","353df925":"code","d257371d":"code","60305b0d":"code","73df9b70":"code","8b82fe50":"code","0ec8395f":"code","c6a058ff":"code","8b265d02":"code","955b2b93":"code","cfae2df0":"code","c075f277":"code","0e1ae372":"code","cd435fa5":"code","f50fd8e0":"code","32f26bb6":"code","1dba8efc":"code","9ad0ca8d":"code","343052f7":"markdown","537e4b41":"markdown","3804b1ff":"markdown","5ad0ab66":"markdown","adda206c":"markdown","da24f109":"markdown","39813b3f":"markdown","33877549":"markdown","1697f8d5":"markdown","388b257d":"markdown","44dede12":"markdown","44e4fed0":"markdown","b4950b4f":"markdown","566a6ca2":"markdown","acd2442b":"markdown","057519f8":"markdown","31bf9ff2":"markdown","f3fe33c3":"markdown","6eae7612":"markdown","efb1e179":"markdown","a6edc63a":"markdown"},"source":{"af1ec3fe":"import pandas as pd\nimport numpy as np\nimport seaborn as sns #visualisation\nimport matplotlib.pyplot as plt #visualisation\n\n\nimport math, time, random, datetime\nimport seaborn as sns\nimport missingno\n\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn-whitegrid')\n%matplotlib inline \nsns.set(color_codes=True)\n","23e6a909":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e3302c52":"df_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ndf_gender_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","12fe7ca6":"df_train.head(10)","21ef7a0a":"df_test.head(10)","5c0b560d":"df_gender_sub.head(10)","84156709":"print(\"\\n Train Data  Shape\\n\", end = \" \")\nprint(df_train.shape)\nprint(\"\\n Train Data  Columns\\n\", end = \" \")\nprint(df_train.columns)\n","f84ff1d9":"\nprint(\"\\n Train Data Description\\n\", end = \" \")\ndf_train.describe()","111bc0d7":"print(\"\\n Data Frame Info\\n\", end = \" \")\ndf_train.info()","7fe548a8":"print(\"\\n Get the number of missing values from data frame\\n\")\ndf_train.isna().sum()\n#df_train.isnull().sum()","375204bc":"missingno.matrix(df_train, figsize=(30,10))","8542822b":"df_train.dtypes","64abbd5e":"df_train.head(10)","c3fdbbe4":"## To Perform Data analysis, let's create two new dataframes\n\ndf_bin = pd.DataFrame()\ndf_con = pd.DataFrame()\n","13d6aa3c":"df_train[\"Survived\"].value_counts().plot.barh()\nprint(df_train[\"Survived\"].value_counts())","c1870e04":"# Let's add this to our subset dataframes\ndf_bin['Survived'] = df_train['Survived']\ndf_con['Survived'] = df_train['Survived']","2f11ad54":"print(df_train[\"Pclass\"].value_counts())\ndf_train[\"Pclass\"].value_counts().plot.bar()\n","370470dc":"sns.distplot(df_train.Pclass)","948a7675":"df_train.Pclass.isna().sum()","de0018c0":"df_train.groupby(\"Pclass\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Pclass\")[\"Survived\"].value_counts())","93c5a114":"df_bin['Pclass'] = df_train['Pclass']\ndf_con['Pclass'] = df_train['Pclass']","d79fc021":"df_train[\"Name\"].value_counts()","df9a6673":"df_train[\"Name\"].isna().sum()","bd7c46d8":"df_train[\"Sex\"].value_counts().plot.barh()\nprint(df_train[\"Sex\"].value_counts())","533071a7":"df_bin['Sex'] = np.where(df_train['Sex'] == 'female', 1, 0)\ndf_con['Sex'] = df_train['Sex']","a4f354db":"sns.distplot(df_bin.Sex)","55ba5854":"df_train.groupby(\"Sex\")[\"Survived\"].value_counts().plot.bar()\n#df_train.groupby(\"Sex\")[\"Survived\"].value_counts().plot.pie()\n\nprint(df_train.groupby(\"Sex\")[\"Survived\"].value_counts())","b853e569":"df_train[\"Age\"].value_counts().plot.bar()\nprint(df_train[\"Age\"].value_counts())","00b5892c":"df_train[\"Age\"].isna().sum()","76a5d614":"df_train[\"SibSp\"].value_counts().plot.bar()\nprint(df_train[\"SibSp\"].value_counts())","dd9607dc":"df_train.groupby(\"SibSp\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"SibSp\")[\"Survived\"].value_counts())","2c04c135":"df_train[\"Parch\"].value_counts().plot.bar()\nprint(df_train[\"Parch\"].value_counts())","33bd04c1":"df_train.groupby(\"Parch\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Parch\")[\"Survived\"].value_counts())","dc735d9e":"df_train[\"Parch\"].isna().sum()","418b1095":"df_train.head()","42204bbd":"df_train[\"Ticket\"].value_counts().plot.bar()\nprint(df_train[\"Ticket\"].value_counts())","7371ed9d":"df_train.groupby(\"Ticket\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Ticket\")[\"Survived\"].value_counts())","49ad2935":"df_train[\"Ticket\"].isna().sum()","c900a4fd":"df_train[\"Fare\"].value_counts().plot.bar()\nprint(df_train[\"Fare\"].value_counts())","008ba711":"df_train.groupby(\"Fare\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Fare\")[\"Survived\"].value_counts())","a6d91f8d":"df_train[\"Fare\"].isna().sum()","1c5acfc7":"df_bin['Fare'] = pd.cut(df_train['Fare'], bins=5) ","658e3705":"df_train[\"Cabin\"].value_counts().plot.bar()\nprint(df_train[\"Cabin\"].value_counts())","b8af7ff6":"df_train.groupby(\"Cabin\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Cabin\")[\"Survived\"].value_counts())","bb2e2828":"df_train[\"Cabin\"].isna().sum()","3f3ba28b":"df_train[\"Embarked\"].value_counts().plot.bar()\nprint(df_train[\"Embarked\"].value_counts())","1fdcc445":"df_train.groupby(\"Embarked\")[\"Survived\"].value_counts().plot.bar()\n\nprint(df_train.groupby(\"Embarked\")[\"Survived\"].value_counts())","7780b412":"df_train[\"Embarked\"].isna().sum()","3c6c89d2":"df_bin[\"SibSp\"] = df_train[\"SibSp\"]\ndf_bin[\"Parch\"] = df_train[\"Parch\"]\ndf_bin[\"Embarked\"] = df_train[\"Embarked\"]","ec83013b":"df_bin.head()","91693c78":"df_con[\"SibSp\"] = df_train[\"SibSp\"]\ndf_con[\"Parch\"] = df_train[\"Parch\"]\ndf_con[\"Embarked\"] = df_train[\"Embarked\"]\ndf_con[\"Fare\"] = df_train[\"Fare\"]","acedfe26":"df_con.head()","4357bad2":"df_bin = df_bin.dropna(subset=[\"Embarked\"])\ndf_con = df_con.dropna(subset=[\"Embarked\"])","343c3ec1":"df_embarked_one_hot = pd.get_dummies(df_con['Embarked'], \n                                     prefix='embarked')\n\ndf_sex_one_hot = pd.get_dummies(df_con['Sex'], \n                                prefix='sex')\n\ndf_plcass_one_hot = pd.get_dummies(df_con['Pclass'], \n                                   prefix='pclass')","4679015c":"df_con_enc = pd.concat([df_con, \n                        df_embarked_one_hot, \n                        df_sex_one_hot, \n                        df_plcass_one_hot], axis=1)\n\n# Drop the original categorical columns (because now they've been one hot encoded)\ndf_con_enc = df_con_enc.drop(['Pclass', 'Sex', 'Embarked'], axis=1)","2baa15f4":"df_con_enc.head()","e70a4a52":"X_train = df_con_enc.drop(\"Survived\", axis=1)\ny_train = df_con_enc[\"Survived\"]","a0eb8671":"X_train.head()","7a48b0cc":"y_train.head()","39ee865b":"def ml_algorithm(algo, X_train, y_train, cv):\n\n  model = algo.fit(X_train, y_train)\n  acc = round(model.score(X_train, y_train)* 100, 2)\n\n  train_pred = model_selection.cross_val_predict(algo, \n                                                  X_train, \n                                                  y_train, \n                                                  cv=cv, \n                                                  n_jobs = -1)\n  \n  acc_cv = round(metrics.accuracy_score(y_train, train_pred) * 100, 2)\n    \n  return train_pred, acc, acc_cv\n","434856f1":"start_time = time.time()\ntrain_pred_log, acc_log, acc_cv_log = ml_algorithm(LogisticRegression(), \n                                                               X_train, \n                                                               y_train, \n                                                                    10)\nlog_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_log)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_log)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=log_time))","1e9b283a":"# k-Nearest Neighbours\nstart_time = time.time()\ntrain_pred_knn, acc_knn, acc_cv_knn = ml_algorithm(KNeighborsClassifier(), \n                                                  X_train, \n                                                  y_train, \n                                                  10)\nknn_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_knn)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_knn)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=knn_time))","108a82f7":"# Gaussian Naive Bayes\nstart_time = time.time()\ntrain_pred_gaussian, acc_gaussian, acc_cv_gaussian = ml_algorithm(GaussianNB(), \n                                                                      X_train, \n                                                                      y_train, \n                                                                           10)\ngaussian_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gaussian)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gaussian)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gaussian_time))","263bdb9d":"# Linear SVC\nstart_time = time.time()\ntrain_pred_svc, acc_linear_svc, acc_cv_linear_svc = ml_algorithm(LinearSVC(),\n                                                                X_train, \n                                                                y_train, \n                                                                10)\nlinear_svc_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_linear_svc)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_linear_svc)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=linear_svc_time))","3fceecf6":"# Stochastic Gradient Descent\nstart_time = time.time()\ntrain_pred_sgd, acc_sgd, acc_cv_sgd = ml_algorithm(SGDClassifier(), \n                                                  X_train, \n                                                  y_train,\n                                                  10)\nsgd_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_sgd)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_sgd)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=sgd_time))","8d9dc0f4":"# Decision Tree Classifier\nstart_time = time.time()\ntrain_pred_dt, acc_dt, acc_cv_dt = ml_algorithm(DecisionTreeClassifier(), \n                                                                X_train, \n                                                                y_train,\n                                                                10)\ndt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_dt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_dt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=dt_time))","353df925":"start_time = time.time()\ntrain_pred_gbt, acc_gbt, acc_cv_gbt = ml_algorithm(GradientBoostingClassifier(), \n                                                                       X_train, \n                                                                       y_train,\n                                                                       10)\ngbt_time = (time.time() - start_time)\nprint(\"Accuracy: %s\" % acc_gbt)\nprint(\"Accuracy CV 10-Fold: %s\" % acc_cv_gbt)\nprint(\"Running Time: %s\" % datetime.timedelta(seconds=gbt_time))","d257371d":"models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'Gradient Boosting Trees'],\n    'Score': [\n        acc_knn, \n        acc_log,  \n        acc_gaussian, \n        acc_sgd, \n        acc_linear_svc, \n        acc_dt,\n        acc_gbt\n    ]})\nprint(\"---Regular Accuracy Scores---\")\nmodels.sort_values(by='Score', ascending=False)","60305b0d":"cv_models = pd.DataFrame({\n    'Model': ['KNN', 'Logistic Regression', 'Naive Bayes', \n              'Stochastic Gradient Decent', 'Linear SVC', \n              'Decision Tree', 'Gradient Boosting Trees'],\n    'Score': [\n        acc_cv_knn, \n        acc_cv_log,      \n        acc_cv_gaussian, \n        acc_cv_sgd, \n        acc_cv_linear_svc, \n        acc_cv_dt,\n        acc_cv_gbt\n    ]})\nprint('---Cross-validation Accuracy Scores---')\ncv_models.sort_values(by='Score', ascending=False)\n","73df9b70":"\n# Feature Importance\ndef feature_importance(model, data):\n    \"\"\"\n    Function to show which features are most important in the model.\n    ::param_model:: Which model to use?\n    ::param_data:: What data to use?\n    \"\"\"\n    fea_imp = pd.DataFrame({'imp': model.feature_importances_, 'col': data.columns})\n    fea_imp = fea_imp.sort_values(['imp', 'col'], ascending=[True, False]).iloc[-30:]\n    _ = fea_imp.plot(kind='barh', x='col', y='imp', figsize=(20, 10))\n    return fea_imp","8b82fe50":"grad_boost_model = GradientBoostingClassifier()\ngrad_boost_model.fit(X_train, y_train)\n\nprint(\"Accuracy for GradBoost Algorithm is {}\".format(round(grad_boost_model.score(X_train, y_train)* 100, 2)))\n\ntrain_pred = model_selection.cross_val_predict(GradientBoostingClassifier(), \n                                                  X_train, \n                                                  y_train, \n                                                  cv=10, \n                                                  n_jobs = -1)\n  \nprint(\"Accuracy for GradBoost Algorithm using cross validation is {} \".format(round(metrics.accuracy_score(y_train, train_pred) * 100, 2)))\n","0ec8395f":"# Plot the feature importance scores\nfeature_importance(grad_boost_model, X_train)","c6a058ff":"df_test.head()","8b265d02":"df_embarked_one_hot = pd.get_dummies(df_test['Embarked'], \n                                     prefix='embarked')\n\ndf_sex_one_hot = pd.get_dummies(df_test['Sex'], \n                                prefix='sex')\n\ndf_plcass_one_hot = pd.get_dummies(df_test['Pclass'], \n                                   prefix='pclass')","955b2b93":"df_test_enc = pd.concat([df_test, \n                        df_embarked_one_hot, \n                        df_sex_one_hot, \n                        df_plcass_one_hot], axis=1)\n\n# Drop the original categorical columns (because now they've been one hot encoded)\ndf_test_enc = df_test_enc.drop(['Pclass', 'Sex', 'Embarked', 'Age', 'Name', 'Cabin', 'Ticket', 'PassengerId' ], axis=1)","cfae2df0":"df_test_enc.head()","c075f277":"df_test_enc.isna().sum()","0e1ae372":"df_test_enc[\"Fare\"]=df_test_enc[\"Fare\"].fillna(df_test_enc[\"Fare\"].mean())","cd435fa5":"df_test_enc.isna().sum()","f50fd8e0":"predictions = grad_boost_model.predict(df_test_enc)","32f26bb6":"submission = pd.DataFrame()\nsubmission['PassengerId'] = df_test['PassengerId']\nsubmission['Survived'] = predictions # our model predictions on the test dataset\nsubmission.head(10)","1dba8efc":"print(len(df_gender_sub))\nprint(len(df_test))","9ad0ca8d":"df_gender_sub.head(10)","343052f7":"Feature:  **Sex**\n\nDescribes the sex of the passenger","537e4b41":"**Target** Feature **Survived** Analysis\n\n**0 -- did not survive** \n\n**1 -- survived**","3804b1ff":"**Survival**: 0 = No, 1 = Yes\n\n**pclass (Ticket class)**: 1 = 1st, 2 = 2nd, 3 = 3rd\n\n**sex**: Sex\n\n**Age**: Age in years\n\n**sibsp**: number of siblings\/spouses aboard the Titanic\n\n**parch**: number of parents\/children aboard the Titanic\n\n**ticket**: Ticket number\n\n**fare**: Passenger fare\n\n**cabin**: Cabin number\n\n**embarked**: Port of Embarkation, C = Cherbourg, Q = Queenstown, S = Southampton","5ad0ab66":"Feature : **Cabin**\n\nThe feature tells about the cabin alloted to the passenger","adda206c":"Feature : **Embarked**\n\nThe location from where the passenger has started his journey","da24f109":"Feature : **Age**\n\nDescribe the age of the passenger","39813b3f":"**Submission** ","33877549":"**Logistic Regression**","1697f8d5":"**KNN Algorithm**","388b257d":"Feature : **SibSp**\n\nNumber of siblings\/spouses the passenger has aboard the titanic","44dede12":"**Decision Tree Classifier**","44e4fed0":"**Feature Importance**","b4950b4f":"**Support Vector Machines**","566a6ca2":"**Gaussian Naive Bayes**","acd2442b":"Feature : **Ticket**\n\nThe ticket number of the passenger","057519f8":"**Stochastic Gradient Descent**","31bf9ff2":"Feature **Pclass**\n\nKey: 1 = 1st, 2 = 2nd, 3 = 3rd\n\n**This feature is the class of the travel **","f3fe33c3":"**Gradient Boost Trees**","6eae7612":"Feature : **Parch**\n\nThe number of parents\/children the passenge has aboard","efb1e179":"Feature : **Fare**\n\nFare of the ticket","a6edc63a":"Feature - **Name**\n\nPost analysis there are **891 unique names**.\n\nThe Feature Name has **less significance in making the prediction**. "}}