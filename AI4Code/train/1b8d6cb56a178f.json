{"cell_type":{"cf3513ff":"code","d9e909ca":"code","c528631b":"code","4cc904e6":"code","7f3be3b1":"code","fbb9297b":"code","fda98870":"code","77f74e02":"code","01a1d913":"code","b900ff77":"code","b2aa014c":"code","3cffa435":"code","6c2e3318":"code","722226c2":"code","e67d0944":"code","908fcdd1":"code","be03ef2d":"code","511d4a32":"code","38a575cf":"code","4f872c81":"code","1367089b":"markdown"},"source":{"cf3513ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9e909ca":"import tensorflow as tf\nimport keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n#from imutils import paths\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport argparse\nimport os","c528631b":"imagePaths_mask = []\nimagePaths_nomask = []\nfor filename in os.listdir(\"..\/input\/face-mask-detection-dataset\/with_mask 1\/with_mask 1\"):\n  imagePaths_mask.append(filename)\nfor filename in os.listdir(\"..\/input\/face-mask-detection-dataset\/without_mask\/without_mask\"):\n  imagePaths_nomask.append(filename)","4cc904e6":"init_lr = 1e-4  # 0.0001\nepochs = 20\nbs = 32\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img","7f3be3b1":"data = []\nlabels = []\nfor img in imagePaths_mask:\n    label = 'with_mask'\n    image = load_img('..\/input\/face-mask-detection-dataset\/with_mask 1\/with_mask 1\/'+img,target_size=(224,224))\n    image = img_to_array(image)\n    image = preprocess_input(image)    \n    data.append(image)\n    labels.append(label)\nfor img in imagePaths_nomask:\n    label = 'without_mask'\n    image = load_img('..\/input\/face-mask-detection-dataset\/without_mask\/without_mask\/'+img,target_size=(224,224))\n    image = img_to_array(image)\n    image = preprocess_input(image)    \n    data.append(image)\n    labels.append(label)    \n    ","fbb9297b":"data = np.array(data, dtype=\"float32\")\nlabels = np.array(labels)","fda98870":"\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nprint(\"Text categories in number form: \\n\",labels)\nlabels = to_categorical(labels)\nprint(\"One Hot Encoding: \\n\",labels)","77f74e02":"(train_x,test_x,train_y,test_y) = train_test_split(data, labels, test_size = 0.20, stratify = labels, random_state = 42)\n","01a1d913":"train_generator = ImageDataGenerator(\n                    rotation_range = 20,\n                    zoom_range = 0.15,\n                    width_shift_range = 0.2,\n                    height_shift_range = 0.2,\n                    shear_range = 0.15,\n                    horizontal_flip = True,\n                    fill_mode=\"nearest\"\n                  )","b900ff77":"baseModel = MobileNetV2(input_tensor = tf.keras.layers.Input(shape = (224,224,3)),include_top = False, weights = 'imagenet')\n","b2aa014c":"baseModel.output ","3cffa435":"headModel = baseModel.output              # headModel input is Basemodel's output\nheadModel = tf.keras.layers.AveragePooling2D(pool_size = (7,7))(headModel)\nheadModel = tf.keras.layers.Flatten()(headModel)\nheadModel = tf.keras.layers.Dense(128, activation = 'relu')(headModel)\nheadModel = tf.keras.layers.Dropout(0.5)(headModel)\nheadModel = tf.keras.layers.Dense(2, activation = 'softmax')(headModel)","6c2e3318":"model = tf.keras.models.Model(inputs = baseModel.input, outputs = headModel)\nfor layers in baseModel.layers:\n  baseModel.trainable = False\n","722226c2":"opt = Adam(lr = init_lr, decay = init_lr\/epochs)\nmodel.compile(optimizer=opt, loss = 'binary_crossentropy',metrics = ['accuracy'])\n","e67d0944":"history = model.fit(train_generator.flow(train_x,train_y,batch_size=bs),\n                    steps_per_epoch = len(train_x)\/\/bs,\n                    validation_data = (test_x,test_y),\n                    validation_steps = len(test_x)\/\/bs,\n                    epochs = epochs,\n                    verbose = 1\n                    )\n","908fcdd1":"model_json = model.to_json()","be03ef2d":"with open(\"model.json\", \"w\") as json_file:\n    json_file.write(model_json)","511d4a32":"model.save_weights(\".\/model.h5\")\nprint(\"Saved model to disk\")","38a575cf":"from keras.models import model_from_json","4f872c81":"json_file = open('model.json', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"model.h5\")\nprint(\"Loaded model from disk\")","1367089b":"Here I use MobleNetV2's weights to detect layer and removed the top layer and defined my own top layer. Load this model on my PC to test this model on live videos. it works fine. "}}