{"cell_type":{"8bbf1d0a":"code","84eb73de":"code","0a26b497":"code","f66decaa":"code","dc056f3f":"code","cc62a2df":"code","428a60c1":"code","0664315f":"code","62100186":"code","60937928":"code","2c58bc34":"code","2325085b":"code","1cd4c8c2":"code","3a6f5a49":"code","d2eaef05":"code","6fb86517":"code","c7df232c":"code","d9792568":"code","bdb1740e":"code","8614ec31":"code","db71296a":"code","b29f5677":"code","81c925c9":"code","61c989f5":"code","cf9ea0c9":"code","9c84fb88":"code","3fa60bd8":"code","f9abc3ef":"code","4380458d":"code","26b3d4bf":"code","39f1ef65":"code","3393d342":"code","8e610ceb":"code","5e27f18c":"code","01a31f97":"code","ee791676":"code","c1cf2511":"markdown","17dd5fa5":"markdown","6ec63944":"markdown","83f89ba8":"markdown","f1c28216":"markdown","9a280481":"markdown","b219cf92":"markdown","8eb68c84":"markdown","0a1f4343":"markdown","e5156608":"markdown","b29eb7ce":"markdown","738fe76e":"markdown","b9fca11f":"markdown","6d2aac47":"markdown","892cc827":"markdown","dd7f50e3":"markdown","249c2868":"markdown","6ec0faf8":"markdown","508b1712":"markdown","10244c7a":"markdown","69658888":"markdown","fe4db108":"markdown","cb47f343":"markdown","7bef78ff":"markdown","2c20f449":"markdown","d9565e10":"markdown","96efc0de":"markdown","a982c6e3":"markdown","e211aed3":"markdown","ed1fe603":"markdown","3b5ea274":"markdown","172849d1":"markdown"},"source":{"8bbf1d0a":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport matplotlib.pylab as plt","84eb73de":"#!pip install tf-nightly-gpu\n!pip install tensorflow-gpu\n!pip install tensorflow-hub\nfrom tensorflow.keras import layers\nimport tensorflow as tf\nimport tensorflow_hub as hub","0a26b497":"classifier_url =\"https:\/\/tfhub.dev\/google\/tf2-preview\/mobilenet_v2\/classification\/2\" #@param {type:\"string\"}","f66decaa":"IMAGE_SHAPE = (224, 224)\n\nclassifier = tf.keras.Sequential([\n    hub.KerasLayer(classifier_url, input_shape=IMAGE_SHAPE+(3,))\n])","dc056f3f":"import numpy as np\nimport PIL.Image as Image\n\ngrace_hopper = tf.keras.utils.get_file('image.jpg','https:\/\/storage.googleapis.com\/download.tensorflow.org\/example_images\/grace_hopper.jpg')\ngrace_hopper = Image.open(grace_hopper).resize(IMAGE_SHAPE)\ngrace_hopper","cc62a2df":"grace_hopper = np.array(grace_hopper)\/255.0\ngrace_hopper.shape","428a60c1":"result = classifier.predict(grace_hopper[np.newaxis, ...])\nresult.shape","0664315f":"predicted_class = np.argmax(result[0], axis=-1)\npredicted_class","62100186":"labels_path = tf.keras.utils.get_file('ImageNetLabels.txt','https:\/\/storage.googleapis.com\/download.tensorflow.org\/data\/ImageNetLabels.txt')\nimagenet_labels = np.array(open(labels_path).read().splitlines())","60937928":"plt.imshow(grace_hopper)\nplt.axis('off')\npredicted_class_name = imagenet_labels[predicted_class]\n_ = plt.title(\"Prediction: \" + predicted_class_name.title())","2c58bc34":"data_root = tf.keras.utils.get_file(\n  'flower_photos','https:\/\/storage.googleapis.com\/download.tensorflow.org\/example_images\/flower_photos.tgz',\n   untar=True)","2325085b":"image_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1\/255)\nimage_data = image_generator.flow_from_directory(str(data_root), target_size=IMAGE_SHAPE)","1cd4c8c2":"for image_batch, label_batch in image_data:\n  print(\"Image batch shape: \", image_batch.shape)\n  print(\"Label batch shape: \", label_batch.shape)\n  break","3a6f5a49":"result_batch = classifier.predict(image_batch)\nresult_batch.shape","d2eaef05":"predicted_class_names = imagenet_labels[np.argmax(result_batch, axis=-1)]\npredicted_class_names","6fb86517":"plt.figure(figsize=(10,9))\nplt.subplots_adjust(hspace=0.5)\nfor n in range(30):\n  plt.subplot(6,5,n+1)\n  plt.imshow(image_batch[n])\n  plt.title(predicted_class_names[n])\n  plt.axis('off')\n_ = plt.suptitle(\"ImageNet predictions\")","c7df232c":"feature_extractor_url = \"https:\/\/tfhub.dev\/google\/tf2-preview\/mobilenet_v2\/feature_vector\/2\" #@param {type:\"string\"}","d9792568":"feature_extractor_layer = hub.KerasLayer(feature_extractor_url,\n                                         input_shape=(224,224,3))","bdb1740e":"feature_batch = feature_extractor_layer(image_batch)\nprint(feature_batch.shape)","8614ec31":"feature_extractor_layer.trainable = False","db71296a":"model = tf.keras.Sequential([\n  feature_extractor_layer,\n  layers.Dense(image_data.num_classes, activation='softmax')\n])\n\nmodel.summary()","b29f5677":"predictions = model(image_batch)","81c925c9":"predictions.shape","61c989f5":"model.compile(\n  optimizer=tf.keras.optimizers.Adam(),\n  loss='categorical_crossentropy',\n  metrics=['acc'])","cf9ea0c9":"class CollectBatchStats(tf.keras.callbacks.Callback):\n  def __init__(self):\n    self.batch_losses = []\n    self.batch_acc = []\n\n  def on_train_batch_end(self, batch, logs=None):\n    self.batch_losses.append(logs['loss'])\n    self.batch_acc.append(logs['acc'])\n    self.model.reset_metrics()","9c84fb88":"steps_per_epoch = np.ceil(image_data.samples\/image_data.batch_size)\n    \nbatch_stats_callback = CollectBatchStats()\n    \nhistory = model.fit_generator(image_data, epochs=2,\n                              steps_per_epoch=steps_per_epoch,\n                              callbacks = [batch_stats_callback])","3fa60bd8":"plt.figure()\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Training Steps\")\nplt.ylim([0,2])\nplt.plot(batch_stats_callback.batch_losses)","f9abc3ef":"plt.figure()\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Training Steps\")\nplt.ylim([0,1])\nplt.plot(batch_stats_callback.batch_acc)","4380458d":"class_names = sorted(image_data.class_indices.items(), key=lambda pair:pair[1])\nclass_names = np.array([key.title() for key, value in class_names])\nclass_names","26b3d4bf":"predicted_batch = model.predict(image_batch)\npredicted_id = np.argmax(predicted_batch, axis=-1)\npredicted_label_batch = class_names[predicted_id]","39f1ef65":"label_id = np.argmax(label_batch, axis=-1)","3393d342":"plt.figure(figsize=(10,9))\nplt.subplots_adjust(hspace=0.5)\nfor n in range(30):\n  plt.subplot(6,5,n+1)\n  plt.imshow(image_batch[n])\n  color = \"green\" if predicted_id[n] == label_id[n] else \"red\"\n  plt.title(predicted_label_batch[n].title(), color=color)\n  plt.axis('off')\n_ = plt.suptitle(\"Model predictions (green: correct, red: incorrect)\")","8e610ceb":"import time\nt = time.time()\n\nexport_path = \"\/tmp\/saved_models\/{}\".format(int(t))\nmodel.save(export_path)\n\nexport_path","5e27f18c":"reloaded = tf.keras.models.load_model(export_path, custom_objects={'KerasLayer':hub.KerasLayer})","01a31f97":"result_batch = model.predict(image_batch)\nreloaded_result_batch = reloaded.predict(image_batch)","ee791676":"abs(reloaded_result_batch - result_batch).max()","c1cf2511":"Now confirm that it can be reloaded it, and it still gives the same results:","17dd5fa5":"Add a batch dimension, and pass the image to the model.","6ec63944":"Freeze the variables in the feature extractor layer, so that the training only modifies the new classifier layer.","83f89ba8":"### Dataset\n\n For this example you will use the TensorFlow flowers dataset:","f1c28216":"Now check how these predictions line up with the images:","9a280481":"Now after, even just a few training iterations, it can already see that the model is making progress on the task.","b219cf92":"Using TF Hub it is simple to retrain the top layer of the model to recognize the classes in our dataset.","8eb68c84":"### Run it on a single image","0a1f4343":"The resulting object is an iterator that returns `image_batch, label_batch` pairs.","e5156608":"Now run the classifier on the image batch.","b29eb7ce":"### Train the model\n\nUse compile to configure the training process:","738fe76e":"Run the image batch through the model and convert the indices to class names.","b9fca11f":"### Run the classifier on a batch of images","6d2aac47":"Plot the result","892cc827":"### Download the classifier\n\nUse `hub.module` to load a mobilenet, and `tf.keras.layers.Lambda` to wrap it up as a keras layer. Any [TensorFlow 2 compatible image classifier URL](https:\/\/tfhub.dev\/s?q=tf2&module-type=image-classification) from tfhub.dev will work here.","dd7f50e3":"### Decode the predictions\n\nWe have the predicted class ID,\nFetch the `ImageNet` labels, and decode the predictions","249c2868":"It returns a 1280-length vector for each image:","6ec0faf8":"The simplest way to load this data into our model is using `tf.keras.preprocessing.image.ImageDataGenerator`,\n\nAll of TensorFlow Hub's image modules expect float inputs in the `[0, 1]` range. Use the `ImageDataGenerator`'s `rescale` parameter to achieve this.\n\nThe image size will be handled later.","508b1712":"### Attach a classification head\n\nNow wrap the hub layer in a `tf.keras.Sequential` model, and add a new classification layer.","10244c7a":"## Export your model\n\nNow that model is trained, export it as a saved model:","69658888":"This saved model can be loaded for inference later, or converted to [TFLite](https:\/\/www.tensorflow.org\/lite\/convert\/) or [TFjs](https:\/\/github.com\/tensorflow\/tfjs-converter).\n\n","fe4db108":"# Pre-trained computer vision model transfer learning with tensorFlow Hub\n\n","cb47f343":"Download a single image to try the model on.","7bef78ff":"### Download the headless model\n\nTensorFlow Hub also distributes models without the top classification layer. These can be used to easily do transfer learning.\n\nAny [Tensorflow 2 compatible image feature vector URL](https:\/\/tfhub.dev\/s?module-type=image-feature-vector&q=tf2) from tfhub.dev will work here.","2c20f449":"The result is a 1001 element vector of logits, rating the probability of each class for the image.\n\nSo the top class ID can be found with argmax:","d9565e10":"Create the feature extractor.","96efc0de":"The results are far from perfect, but reasonable considering that these are not the classes the model was trained for (except \"daisy\").","a982c6e3":"Now use the `.fit` method to train the model.\n\nTo keep this example short train just 2 epochs. To visualize the training progress, use a custom callback to log the loss and accuracy of each batch individually, instead of the epoch average.","e211aed3":"### Check the predictions\n\nTo redo the plot from before, first get the ordered list of class names:","ed1fe603":"[TensorFlow Hub](http:\/\/tensorflow.org\/hub) is a way to share pretrained model components. See the [TensorFlow Module Hub](https:\/\/tfhub.dev\/) for a searchable listing of pre-trained models. This tutorial demonstrates:\n\n1. How to use TensorFlow Hub with `tf.keras`.\n1. How to do image classification using TensorFlow Hub.\n1. How to do simple transfer learning.","3b5ea274":"## Setup","172849d1":"## Simple transfer learning"}}