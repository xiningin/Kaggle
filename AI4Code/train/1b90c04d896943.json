{"cell_type":{"97e429ad":"code","d66b51e6":"code","a6ab43ac":"code","fb9e17b0":"code","f97b8149":"code","f3c9068a":"code","656b0407":"code","b8a6562f":"code","cde37ff8":"code","439679a8":"code","a057a841":"code","dff59060":"code","857f5aa2":"code","956bf5cf":"code","26ab1fd9":"code","5c8bf87a":"code","b15745b7":"code","b19c57c8":"code","761d4e33":"code","2565c1ac":"code","556a4e52":"code","b908488d":"code","0467e062":"markdown","18b050eb":"markdown","dc364584":"markdown"},"source":{"97e429ad":"import numpy as np # linear algebra\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","d66b51e6":"with open('..\/input\/10-monkey-species\/monkey_labels.txt') as f:\n    print(\"\".join(f.readlines()))","a6ab43ac":"print(os.listdir(\"..\/input\/10-monkey-species\/training\/training\"))","fb9e17b0":"print(os.listdir(\"..\/input\/10-monkey-species\/training\/training\/n0\"))","f97b8149":"print(os.listdir(\"..\/input\/10-monkey-species\/validation\/validation\"))","f3c9068a":"# compute readable labels\nreal_labels = {\n    \"n0\": \"mantled_howler\",\n    \"n1\": \"patas_monkey\",\n    \"n2\": \"bald_uakari\",\n    \"n3\": \"japanese_macaque\",\n    \"n4\": \"pygmy_marmoset\",\n    \"n5\": \"white_headed_capuchin\",\n    \"n6\": \"silvery_marmoset\",\n    \"n7\": \"common_squirrel_monkey\",\n    \"n8\": \"black_headed_night_monkey\",\n    \"n9\": \"nilgiri_langur\"}","656b0407":"import random\nimport shutil","b8a6562f":"# separate validation data into test - validation\nnum_val_files = 16  # number of validation files per label\n\ntest_dir = '.\/10-monkey-species-test'\nval_dir = '.\/10-monkey-species-val'\norig_val_dir = '..\/input\/10-monkey-species\/validation\/validation'\nos.mkdir(test_dir)\nos.mkdir(val_dir)\n\nfor i in range(10):\n    folder_name = 'n{}'.format(i)  # subfolder name for the label\n    \n    src_folder = os.path.join(orig_val_dir, folder_name)\n    dst_val_dir = os.path.join(val_dir, folder_name)\n    dst_test_dir = os.path.join(test_dir, folder_name)\n    \n    # pick files:\n    # make a list and sort it randomly\n    files = os.listdir(src_folder)\n    random.shuffle(files)\n\n    os.mkdir(dst_val_dir)\n    for val_file in files[:num_val_files]:\n        src_file = os.path.join(src_folder, val_file)\n        dst_file = os.path.join(dst_val_dir, val_file)\n        shutil.copyfile(src_file, dst_file)\n    print(dst_val_dir, os.listdir(dst_val_dir))\n    \n    os.mkdir(dst_test_dir)\n    for test_file in files[num_val_files:]:\n        src_file = os.path.join(src_folder, test_file)\n        dst_file = os.path.join(dst_test_dir, test_file)\n        shutil.copyfile(src_file, dst_file)\n    print(dst_test_dir, os.listdir(dst_test_dir))","cde37ff8":"import tensorflow as tf\nfrom tensorflow import keras\n\nprint(\"TensorFlow\", tf.__version__)\nprint(\"Keras\", keras.__version__)","439679a8":"from tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D","a057a841":"from tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","dff59060":"from IPython import display","857f5aa2":"# display pictures\nfor i in range(4):\n    folder = '..\/input\/10-monkey-species\/training\/training\/n{}'.format(i)\n    first_image = os.listdir(folder)[0]\n    print(\"n{} {}\".format(i, real_labels[\"n{}\".format(i)]))\n    display.display(display.Image(os.path.join(folder, first_image)))","956bf5cf":"# construct the model\nnum_classes = 10\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\n# use Resnet without top for model\nmodel = Sequential()\nmodel.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\n# top layer\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Indicate whether the first layer should be trained\/changed or not.\nmodel.layers[0].trainable = False","26ab1fd9":"# describe the model\nmodel.summary()","5c8bf87a":"model.compile(\n    optimizer='sgd',\n    loss='categorical_crossentropy',\n    metrics=['accuracy'])","b15745b7":"# data augmentation\nimage_size = 224  # necessary for ResNet50\nnum_samples = 1098\nbatch_size = 20\n\ndata_generator = ImageDataGenerator(\n    preprocessing_function=preprocess_input,\n    rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n    zoom_range = 0.1, # Randomly zoom image\n    width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n    height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n    horizontal_flip=True,  # randomly flip images\n    vertical_flip=False)  # randomly flip images)\n\n# for validation and test only\ndata_generator_no_aug = ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntrain_generator = data_generator.flow_from_directory(\n                                        directory='..\/input\/10-monkey-species\/training\/training',\n                                        target_size=(image_size, image_size),\n                                        batch_size=batch_size,\n                                        class_mode='categorical')\n\nvalidation_generator = data_generator_no_aug.flow_from_directory(\n                                        directory=val_dir,\n                                        target_size=(image_size, image_size),\n                                        class_mode='categorical')","b19c57c8":"# train the model\nfit_stats = model.fit_generator(train_generator,\n                                steps_per_epoch=num_samples \/\/ batch_size,\n                                epochs=5,\n                                validation_data=validation_generator,\n                                validation_steps=1)","761d4e33":"import matplotlib.pyplot as plt","2565c1ac":"# display statistics\n# code inspired from Olga Belitskaya's notebook\n# https:\/\/www.kaggle.com\/olgabelitskaya\/handwritten-letters\nplt.figure(figsize=(18, 12))\n    \nplt.subplot(211)\nplt.plot(fit_stats.history['loss'], color='slategray', label = 'train')\nplt.plot(fit_stats.history['val_loss'], color='#4876ff', label = 'valid')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.title('Loss Function');  \n\nplt.subplot(212)\nplt.plot(fit_stats.history['acc'], color='slategray', label = 'train')\nplt.plot(fit_stats.history['val_acc'], color='#4876ff', label = 'valid')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")    \nplt.ylim(0.0, 1.0)\nplt.legend()\nplt.title('Accuracy');","556a4e52":"# evaluate on test data\ntest_generator = data_generator_no_aug.flow_from_directory(\n    directory=test_dir,\n    target_size=(image_size, image_size),\n    class_mode='categorical')\nscore = model.evaluate_generator(test_generator)\nprint(score)\nprint(\"Accuracy: {:.2f}%\".format(100 * score[1]))","b908488d":"# delete output data\nshutil.rmtree(val_dir)\nshutil.rmtree(test_dir)","0467e062":"Notice how the results are already moderately high at the first epoch. This is likely because our model has pre-trained weights for processing of photographs. This way we can achieve good results faster than if we trained our model from scratch.","18b050eb":"We are going to classify the monkey pictures using deep learning, transfer learning and data augmentation.\n\nWe will use a ResNet50 neural network, which is already trained to process photographs with subjects. We will use transfer learning to adapt this pre-trained model's results to our use case.\n\nData augmentation is potentially useful to generate more training data.\n\nThis notebook is based on the exercises for [Transfer Learning](https:\/\/www.kaggle.com\/dansbecker\/transfer-learning) and [Data Augmentation](https:\/\/www.kaggle.com\/dansbecker\/data-augmentation) from the [Deep Learning Course](https:\/\/www.kaggle.com\/learn\/deep-learning) on Kaggle by Dan Becker. Check those for more information.","dc364584":"The model gives fine accuracy, considering the conditions in which we trained it.\n\nAlso, keep in mind that we have a rather small set of data, especially for validation and evaluation. We would probably need more data to evaluate it better in real-world situation."}}