{"cell_type":{"cb336299":"code","3ff82609":"code","90842e33":"code","b0a1a01c":"code","d146d885":"code","512b30f6":"code","1719cecd":"code","4310f21b":"code","1ea16f1e":"code","2b8a2c6d":"code","92c3726a":"code","3fee64b6":"code","cf3f600d":"code","59bbd5ac":"code","a2e90426":"code","0552f699":"code","8efa8394":"code","07d04e1d":"markdown","0b2141fe":"markdown","462353c6":"markdown","a15068a6":"markdown","d1648111":"markdown","d7f939e1":"markdown","d1a47228":"markdown","4c0eafc5":"markdown","b911e108":"markdown","68604e34":"markdown"},"source":{"cb336299":"import pandas as pd\nmnist_test = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_test.csv\")\nmnist_train = pd.read_csv(\"..\/input\/mnist-in-csv\/mnist_train.csv\")","3ff82609":"X_train = mnist_train.drop(labels = [\"label\"],axis = 1) \ny_train = mnist_train[\"label\"]","90842e33":"X_test = mnist_test.drop(labels = [\"label\"],axis = 1) ","b0a1a01c":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")","d146d885":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","512b30f6":"X_test = X_test.values.reshape(-1,28,28,1)","1719cecd":"X_train = X_train.values.reshape(-1,28,28,1)","4310f21b":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\n\ny_train = to_categorical(y_train, num_classes = 10)","1ea16f1e":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=2)","2b8a2c6d":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","92c3726a":"optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","3fee64b6":"batch_size = 32","cf3f600d":"history = model.fit(X_train,y_train, batch_size = batch_size, epochs = 20, validation_data = (X_val,y_val),verbose = 2)","59bbd5ac":"import itertools\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","a2e90426":"labels = model.predict(X_test)","0552f699":"sample_submission","8efa8394":"sample_submission.to_csv('submission.csv', index=False)","07d04e1d":"# Testing data\nTesting data is completely seperated from trainig data as they can't be preproccessed together even if the preproccessing steps are the same, test data is considered as a data the model only sees in the final chapter of the modeling story not before that.","0b2141fe":"# Importing data\nImages data is imported in a csv form, however it can have several other formats like: \n\n - Normal format .jpg \/ .png\n - Excel \/ Csv files\n - hdf5","462353c6":"## One hot encoder","a15068a6":"As we are working with a csv data, we can't forget reshaping it to the images form (-1,28,28) in our case here, (28,28 ) is the dimension of the image and it can be anything depending on your dataset, an image can be RGB colored image which contains 3 dimensions and can be grayscale, that's why we put -1 in the begginning of the reshaping so we don't have to worry about either if it's 2d or 3d","d1648111":"# Sample Submission\nNow let's create the csv submission file","d7f939e1":" - Here we drop the label column from the X_train as we set it as training data; as we all know that the train data can't contain the trageted class on it, the y_train only contains the label column as it is the label to be predicted by the trained model.\n - The axis = 1 is a sign that we drop a column, if axis is set into 0 then we are dropping a row.","d1a47228":"# Normalization\nWe do normalization step to make it easy for the model to learn and converge without heavy computations needed for big numbers, this step sets a pixel range of values to be between float 0 and 1, instead of integer 0 to 255","4c0eafc5":"# Training data","b911e108":"One hot encoding is simply turning this form (7) into this form (0,0,0,0,0,0,0,1,0,0) \nand this (2) into (0,0,1,0,0,0,0,0,0,0) .. etc","68604e34":"## Reshape"}}