{"cell_type":{"1bd471ae":"code","9c2f31d7":"code","603e64ba":"code","ef827820":"code","56d61aef":"code","afa7fbde":"code","fc4f7bca":"code","1494f52d":"code","e7932a8b":"code","4972b8e6":"code","89f474a1":"code","0f44018b":"code","06cfe3bc":"code","5d7fd42e":"code","dbf9f090":"code","e125dd1e":"code","b4c111db":"code","8224435b":"code","bed210a7":"code","c736f106":"code","1c921e85":"code","35fc06a3":"code","80c0f008":"code","47886ecb":"code","ecf087ec":"code","c7151a02":"code","e29b2df1":"code","b90351e2":"code","ac5d6f38":"code","2a2e1223":"code","3c7bead9":"code","a8e77c3e":"code","06707dbd":"markdown","f5e59c8b":"markdown","82938756":"markdown","022989b7":"markdown","9cd6d9ca":"markdown","4ee08432":"markdown","bfdfd290":"markdown","0c22727c":"markdown","ac763a4a":"markdown","19b4de48":"markdown","32eaf8e8":"markdown","e518ef2c":"markdown","748fb8e2":"markdown","3700399a":"markdown","ef1ccaa2":"markdown","c369a56a":"markdown","119f4671":"markdown","de2d6a17":"markdown","7cb7b90b":"markdown","b09f7cbe":"markdown","54795eb0":"markdown","817e84f5":"markdown","7077bea7":"markdown","e2d74980":"markdown"},"source":{"1bd471ae":"import numpy as np \nimport pandas as pd \nimport plotly.offline as pyo\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport plotly.subplots as subplots\nimport cufflinks as cf\ncf.go_offline(connected=True)\n\npd.options.display.max_columns = None\npyo.init_notebook_mode(connected=True)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9c2f31d7":"matches = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\nballs = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')","603e64ba":"balls.head()","ef827820":"matches.head()","56d61aef":"data = pd.merge(left=matches, right=balls, on='id', how='right')\ndata.head()","afa7fbde":"print(matches.shape)\nprint(balls.shape)\nprint(data.shape)","fc4f7bca":"data.info()","1494f52d":"data['date'] = pd.to_datetime(data['date'])\ndata['year'] = pd.DatetimeIndex(data['date']).year","e7932a8b":"data.head()","4972b8e6":"runs_by_years = data.groupby(by='year').sum()['total_runs']\nruns_by_years = pd.DataFrame(runs_by_years)\nruns_by_years.reset_index(inplace=True)","89f474a1":"total_runs = go.Scatter(\n                    x=runs_by_years['year'],\n                    y=runs_by_years['total_runs'],\n                    mode='lines',\n                    name='runs')\n\ndata = [total_runs]\n\nlayout = go.Layout(title='Runs scored by year',\n                  xaxis = dict(title='Year'),\n                  yaxis = dict(title='Runs'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","0f44018b":"runs_by_years.iplot(kind='scatter', x='year', y='total_runs', title='Runs scored by year', \n                    xTitle='Year', yTitle='Runs')","06cfe3bc":"toss_decisions = matches.groupby(by='toss_decision').count()\ntoss_decisions = pd.DataFrame(toss_decisions['id'])\ntoss_decisions.reset_index(inplace=True)\ntoss_decisions","5d7fd42e":"toss_decision = go.Bar(\n                    x=toss_decisions['toss_decision'],\n                    y=toss_decisions['id']\n                )\n\ndata = [toss_decision]\n\nlayout = go.Layout(title='Toss decision',\n                  xaxis = dict(title='Decision'),\n                  yaxis = dict(title='count'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","dbf9f090":"toss_decisions.iplot(kind='bar', x='toss_decision', y='id', title='Toss Decision', \n                     xTitle='Decision', yTitle='count')","e125dd1e":"runs_and_wickets_by_over = balls.groupby(by='over').sum()\nruns_and_wickets_by_over = pd.DataFrame(runs_and_wickets_by_over[['total_runs', 'is_wicket']])\nruns_and_wickets_by_over.reset_index(inplace=True)\nruns_and_wickets_by_over","b4c111db":"runs_and_wickets_by_overs = go.Scatter(\n                    x=runs_and_wickets_by_over['over'],\n                    y=runs_and_wickets_by_over['total_runs'],\n                    text=runs_and_wickets_by_over['is_wicket'],\n                    mode='markers',\n                    marker=dict(size=runs_and_wickets_by_over['is_wicket']\/10,\n                               color=runs_and_wickets_by_over['total_runs']\/10,\n                               showscale=True)\n                )\n\ndata = [runs_and_wickets_by_overs]\n\nlayout = go.Layout(title='Runs and wicket by over',\n                  xaxis = dict(title='Over'),\n                  yaxis = dict(title='Runs'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","8224435b":"runs_and_wickets_by_over.iplot(kind='scatter', x='over', y='total_runs', mode='markers',\n                               title='Runs and wickets by over',\n                               xTitle='Over', yTitle='Runs', \n                               size=runs_and_wickets_by_over['is_wicket']\/10)","bed210a7":"balls = pd.read_csv('\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')\nruns_overs = balls[['total_runs', 'over']]\nruns_overs","c736f106":"runs_over = go.Box(\n                    x=runs_overs['over'],\n                    y=runs_overs['total_runs']\n                )\n\ndata = [runs_over]\n\nlayout = go.Layout(title='Runs distribution over wise',\n                  xaxis = dict(title='Over'),\n                  yaxis = dict(title='Runs'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","1c921e85":"runs_overs.iplot(kind='box', y='over',title='Runs distribution over wise', xTitle='Over', yTitle='Runs')","35fc06a3":"#runs_overs = balls[['total_runs', 'over']]\n#runs_overs.pivot(columns='over', values='total_runs').iplot(kind='box')","80c0f008":"runs_by_match = balls.groupby(by='id').sum()\nruns_by_match = pd.DataFrame(runs_by_match[['total_runs']])\nruns_by_match.reset_index(inplace=True)\nruns_by_match","47886ecb":"runs_by_match = go.Histogram(\n                    x=runs_by_match['total_runs']\n                )\n\ndata = [runs_by_match]\n\nlayout = go.Layout(title='Runs distribution match wise',\n                  xaxis = dict(title='Runs'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","ecf087ec":"data = pd.merge(left=matches, right=balls, on='id', how='right')\ndata['date'] = pd.to_datetime(data['date'])\ndata['year'] = pd.DatetimeIndex(data['date']).year\n\nruns_by_match_and_year = data.groupby(by=['id','year']).sum()\nruns_by_match_and_year = pd.DataFrame(runs_by_match_and_year[['total_runs']])\nruns_by_match_and_year.reset_index(inplace=True)\nruns_by_match_and_year","c7151a02":"year_2008 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2008]['total_runs'])\nyear_2009 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2009]['total_runs'])\nyear_2010 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2010]['total_runs'])\nyear_2011 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2011]['total_runs'])\nyear_2012 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2012]['total_runs'])\nyear_2013 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2013]['total_runs'])\nyear_2014 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2014]['total_runs'])\nyear_2015 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2015]['total_runs'])\nyear_2016 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2016]['total_runs'])\nyear_2017 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2017]['total_runs'])\nyear_2018 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2018]['total_runs'])\nyear_2019 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2019]['total_runs'])\nyear_2020 = go.Histogram(x=runs_by_match_and_year[runs_by_match_and_year['year']==2020]['total_runs'])\n\nfig=subplots.make_subplots(rows=13, cols=1, subplot_titles=['Year 2008', 'Year 2009', 'Year 2010', 'Year 2011',\n                                                        'Year 2012', 'Year 2013', 'Year 2014', 'Year 2015',\n                                                        'Year 2016', 'Year 2017', 'Year 2018', 'Year 2019',\n                                                        'Year 2020'],\n                       shared_xaxes=True)\n\nfig['layout'].update(title='Runs distribution match wise', width=800, height=5200, showlegend=False, \n                     xaxis=dict(title='Runs'), yaxis=dict(title='Count of matches'))\n\nfig.append_trace(year_2008,1,1)\nfig.append_trace(year_2009,2,1)\nfig.append_trace(year_2010,3,1)\nfig.append_trace(year_2011,4,1)\nfig.append_trace(year_2012,5,1)\nfig.append_trace(year_2013,6,1)\nfig.append_trace(year_2014,7,1)\nfig.append_trace(year_2015,8,1)\nfig.append_trace(year_2016,9,1)\nfig.append_trace(year_2017,10,1)\nfig.append_trace(year_2018,11,1)\nfig.append_trace(year_2019,12,1)\nfig.append_trace(year_2020,13,1)\n\npyo.iplot(fig)","e29b2df1":"balls['total_runs'].iplot(kind='hist', title='Runs balls wise distributions', xTitle='Runs', \n                          yTitle='Count')","b90351e2":"themes = cf.getThemes()\nthemes","ac5d6f38":"for theme in themes:\n    balls['total_runs'].iplot(kind='hist', theme=theme, \n                              title=theme+' :Runs balls wise distributions ', xTitle='Runs', \n                              yTitle='Count')","2a2e1223":"runs_by_ball_of_overs = balls.groupby(by=['ball', 'over']).sum()\nruns_by_ball_of_overs = pd.DataFrame(runs_by_ball_of_overs[['total_runs']])\nruns_by_ball_of_overs.reset_index(inplace=True)\nruns_by_ball_of_overs","3c7bead9":"runs_by_ball_of_over = go.Heatmap(\n                    x=runs_by_ball_of_overs['over'],\n                    y=runs_by_ball_of_overs['ball'],\n                    z=runs_by_ball_of_overs['total_runs']\n                )\n\ndata = [runs_by_ball_of_over]\n\nlayout = go.Layout(title='Runs distribution over and ball wise',\n                  xaxis = dict(title='Over'),\n                  yaxis = dict(title='Ball'))\n\nfig = go.Figure(data=data, layout=layout)\n\npyo.iplot(fig)","a8e77c3e":"runs_by_ball_of_overs.iplot(kind='heatmap', x='over', y='ball', z='total_runs',\n                           title='Runs distribution over and ball wise', xTitle='Over', \n                            yTitle='Ball')","06707dbd":"# Preferred toss decision","f5e59c8b":"### Using plotly","82938756":"# Extracting year from the date","022989b7":"### Using plotly","9cd6d9ca":"### Using cufflinks\n\nFailed to get colorscale in cufflinks","4ee08432":"# Runs by ball of the over","bfdfd290":"The below code gives the correct plot, however it's causing the whole notebook to slow down so I have commented it out.","0c22727c":"# Totals runs and wickets by over","ac763a4a":"### Using cufflinks","19b4de48":"# Loading the datasets","32eaf8e8":"# First look at the matches data","e518ef2c":"# Data visualisation using plotly and dash\n\nMy target for this notebook is to learn interactive data visualisation with plotly. I will try out various plots using plotly and finally try to put altogether in a dashboard. You migh find some plots to be 'forced', and this may be because I am trying out a plot which does not fit this IPL data. However, I will try my best to keep the plots sensible. \n\nI am not that much of a writing person as I believe the visualisation should be enough to tell the story, so don't expect a lot of notes here.\n\nEnough of talk, let's go straight to action! \n\n# Importing the libraries","748fb8e2":"### Using cufflinks","3700399a":"# Runs distribution over wise","ef1ccaa2":"### Testing the different themes","c369a56a":"### Using cufflinks\n\nA simple one-liner doesn't seem to work here.","119f4671":"### Using plotly","de2d6a17":"# Runs balls wise distributions","7cb7b90b":"# Sharing the experience of plotly and cufflinks\n\nI have covered some major plots using plotly in this notebook, however, the notebook has started to slow down now and I have decided to recreate the above plots using seaborn\/matplotlib libraries and create more plots. If there is any plot which I feel deserves interactivity, I will surely use plotly. \n\nThanks to Aditya Mishra for pointing me to the direction of cufflinks and all those who gave support and motivation\n\nI have still a lot to learn about plotly and dash and I believe this was a good start.\n\nI have not used Dash here, as I realised it can't work in Kaggle, but I am continuing with dash in my locally and will surely share the basic code in this very notebook as well.\n\nThanks for the support, and all criticsm as welcome! Feel free to leave any small point of improvement, however minor it may be, it will go a long way for me to improove myself. Do upvote if you liked even one thing about thing notebook.","b09f7cbe":"# Runs distribution match wise","54795eb0":"# Runs scored over the years","817e84f5":"### Using plotly","7077bea7":"# First look at the ball by ball data","e2d74980":"# Merging the two datasets"}}