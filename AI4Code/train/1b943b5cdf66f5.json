{"cell_type":{"4e0aaceb":"code","dead21fe":"code","42e15cd9":"code","a53bef72":"code","eaa7a8ca":"code","cb699a2e":"code","bf87bb1c":"code","055a0c0e":"code","8de95113":"code","bda2b5e5":"code","2318964f":"code","b9546ba4":"code","04f697b9":"code","fc812964":"code","fb113bb7":"code","50b8f0f9":"code","c8c5f8dc":"code","0aabce4f":"code","1a822937":"code","9cbbdb7c":"code","82efb2cc":"code","31fb4a5c":"code","2ce46897":"code","f46d8d10":"code","71e43a77":"code","03bed10b":"code","983de510":"code","691068a8":"code","919617e3":"code","097a30ea":"code","13ad4d17":"code","de78f11f":"code","8932501c":"code","d60daa8a":"code","3d6178e8":"code","560b30d3":"code","9c95ff9b":"code","fea74854":"code","d5b8291a":"code","199ffb61":"code","b6198581":"code","ece8d378":"code","788bc14d":"code","3ce267b5":"code","424b2f6b":"code","7458e2e1":"code","39d1eef4":"code","3d962fab":"code","d0047c64":"code","f6438462":"code","ccf4b3b7":"code","cf6d27cc":"markdown","c3f8e79d":"markdown","d1dce585":"markdown","6dd43e88":"markdown","bb7e2c77":"markdown","e080050b":"markdown","a94b849a":"markdown","76622642":"markdown","ff44588a":"markdown","f9555ee1":"markdown","134656df":"markdown","d4b03967":"markdown","3097b2b0":"markdown","de6dac25":"markdown","49c9e0a8":"markdown","dc704831":"markdown","4e42ea3b":"markdown","3fcc9257":"markdown","4c024f5e":"markdown","69272889":"markdown","454fcbf9":"markdown","7c04f97c":"markdown","3f0b4ab9":"markdown","5b6c2cfb":"markdown","31c0f973":"markdown","acda78e4":"markdown","070491a3":"markdown","85acc8e7":"markdown","7e62e1d2":"markdown","39e3b6d3":"markdown","22d4b06f":"markdown","f0dc84ff":"markdown","729ddfe1":"markdown","88918099":"markdown","a487d1df":"markdown","a7c97407":"markdown","41eb7ef5":"markdown","a6a9c22a":"markdown"},"source":{"4e0aaceb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.offline import iplot\n\npd.set_option(\"display.max_columns\", None)\npd.set_option(\"display.max_rows\", None)","dead21fe":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")","42e15cd9":"df = df.iloc[1:, :]\ndf.head()","a53bef72":"df = df[(df['Q3'] == 'India') & (df['Q5'] == 'Student')]\ndf.head()","eaa7a8ca":"print(f\"We have Data for {len(df)} Indian Students\")","cb699a2e":"temp_df = df[\"Q4\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = ['Bachelor\u2019s degree', 'Master\u2019s degree', \"Some college\/university without bachelor's degree\", 'Doctoral degree','I prefer not to answer','Professional degree','No formal education past high school'], #temp_df['index'],\n                y = temp_df['Q4'],\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q4'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'EDUCATION LEVEL OF INDIAN STUDENT KAGGLERS' , xaxis = dict(title = 'Education Level'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","bf87bb1c":"def pie_plot(cnt_srs, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value+label', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.6,\n                   showlegend=True,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    \n    return trace","055a0c0e":"trace = go.Pie(labels=['Bachelor\u2019s degree', 'Master\u2019s degree', 'Some college\/university without bachelor\u2019s degree',\n                       'Doctoral degree', 'I prefer not to answer', \"Professional degree\", 'No formal education past high school'], \n               values=df['Q4'].value_counts().values, \n               title=\"Education Level Distribution\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nfig=go.Figure(data=[trace])\nfig.show()","8de95113":"temp_df = df[\"Q2\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q2'],\n                marker = dict(color = 'rgb(250,13,92)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q2'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'GENDER DISTRIBUTION AMONG INDIAN STUDENTS ON KAGGLE' , xaxis = dict(title = 'Gender'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","bda2b5e5":"figure=go.Figure(data=[pie_plot(df['Q2'].value_counts(), 'Gender Distribution')])\niplot(figure)","2318964f":"temp_df = df[\"Q1\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q1'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q1'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'AGE DISTRIBUTION AMONG INDIAN STUDENTS ON KAGGLE' , xaxis = dict(title = 'Age Group'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","b9546ba4":"trace = go.Pie(labels=df['Q1'].value_counts().index, \n               values=df['Q1'].value_counts().values, \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nlayout = go.Layout(title=\"Age Group Distribution\")\nfig=go.Figure(data=[trace], layout=layout)\nfig.show()","04f697b9":"temp_df = df[\"Q6\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q6'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q6'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'CODING EXPERIENCE' , xaxis = dict(title = 'Years'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","fc812964":"Q7_options = []\nQ7_values = []","fb113bb7":"for col in df.columns:\n    if 'Q7' in col:\n        Q7_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q7_values.extend(df[col].value_counts().reset_index()[col].tolist())","50b8f0f9":"Q7_values, Q7_options = (list(t) for t in zip(*sorted(zip(Q7_values, Q7_options))))\ncolors = ['rgb(255,165,0)']*len(Q7_values)\ncolors[-1] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q7_values,\n                y = Q7_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=Q7_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PROGRAMMING LANGUAGES USED BY INDIAN STUDENTS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Language'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","c8c5f8dc":"temp_df = df[\"Q8\"].value_counts(normalize=True).reset_index()\n\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Q8'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q8'], textposition='outside', texttemplate='%{text:.3f}')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PROGRAMMING LANGUAGE RECOMMENDED TO LEARN FIRST' , xaxis = dict(title = 'Programming Language'), yaxis = dict(title = 'Percentage'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","0aabce4f":"Q9_options = []\nQ9_values = []","1a822937":"for col in df.columns:\n    if 'Q9' in col:\n        Q9_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q9_values.extend(df[col].value_counts().reset_index()[col].tolist())","9cbbdb7c":"Q9_values, Q9_options = (list(t) for t in zip(*sorted(zip(Q9_values, Q9_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['IDE', 'Count'], fill_color='yellow', line_color='darkslategray'),\n                 cells=dict(values=[Q9_options, Q9_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","82efb2cc":"colors = ['rgb(255,165,0)']*len(Q9_values)\ncolors[-1] = colors[-2] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q9_values,\n                y = Q9_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'IDE PREFERRED BY INDIAN STUDENTS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'IDE'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","31fb4a5c":"Q10_options = []\nQ10_values = []","2ce46897":"for col in df.columns:\n    if 'Q10' in col:\n        Q10_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q10_values.extend(df[col].value_counts().reset_index()[col].tolist())","f46d8d10":"Q10_values, Q10_options = (list(t) for t in zip(*sorted(zip(Q10_values, Q10_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Notebook Products', 'Count'], fill_color='lightskyblue', line_color='darkslategray'),\n                 cells=dict(values=[Q10_options, Q10_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","71e43a77":"colors = ['rgb(255,165,0)']*len(Q10_values)\ncolors[-1] = colors[-2] = 'rgb(255,0,0)'\n\ntrace1 = go.Bar(\n                x = Q10_values,\n                y = Q10_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'NOTEBOOK PRODUCTS PREFERRED BY INDIAN KAGGLERS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'NOTEBOOK PRODUCT'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","03bed10b":"temp_df = df[\"Q11\"].value_counts().reset_index()\n\ntrace1 = go.Bar(\n                x = ['Personal Computer', 'Cloud Computing Platform', 'None', 'Deep learning workstation', 'Other'],\n                y = temp_df['Q11'],\n                marker = dict(color = 'rgb(127, 16, 238)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text=temp_df['Q11'], textposition='outside')\nlayout = go.Layout(template= \"plotly_dark\",title = 'COMPUTING PLATFORM FREQUENTLY USED' , xaxis = dict(title = 'Computing Platform'), yaxis = dict(title = 'Count'), height=650)\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","983de510":"Q12_options = []\nQ12_values = []","691068a8":"for col in df.columns:\n    if 'Q12' in col:\n        Q12_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q12_values.extend(df[col].value_counts().reset_index()[col].tolist())","919617e3":"Q12_values, Q12_options = (list(t) for t in zip(*sorted(zip(Q12_values, Q12_options))))\n\ntrace1 = go.Bar(\n                x = Q12_values,\n                y = Q12_options,\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)')),\n                text=Q12_values, textposition='outside', orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'HARDWARE FREQUENTLY USED' , xaxis = dict(title = 'Count'), yaxis = dict(title = 'Hardware'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","097a30ea":"Q16_options = []\nQ16_values = []","13ad4d17":"for col in df.columns:\n    if 'Q16' in col:\n        Q16_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q16_values.extend(df[col].value_counts().reset_index()[col].tolist())","de78f11f":"Q16_values, Q16_options = (list(t) for t in zip(*sorted(zip(Q16_values, Q16_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Machine Learning Framework', 'Count'], fill_color='lightseagreen', line_color='darkslategray'),\n                 cells=dict(values=[Q16_options, Q16_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","8932501c":"colors = ['rgb(160, 50, 168)']*len(Q16_values)\ncolors[-1] = colors[-2] = 'rgb(222,13,69)'\n\ntrace1 = go.Bar(\n                x = Q16_values,\n                y = Q16_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE MACHINE LEARNING FRAMEWORK' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'ML Framework'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","d60daa8a":"Q17_options = []\nQ17_values = []","3d6178e8":"for col in df.columns:\n    if 'Q17' in col:\n        Q17_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q17_values.extend(df[col].value_counts().reset_index()[col].tolist())","560b30d3":"Q17_values, Q17_options = (list(t) for t in zip(*sorted(zip(Q17_values, Q17_options))))\nfig = go.Figure(data=[go.Table(header=dict(values=['Machine Learning Algorithm', 'Count'], fill_color='lightseagreen', line_color='darkslategray'),\n                 cells=dict(values=[Q17_options, Q17_values], fill_color='lavender', line_color='darkslategray'))\n                     ])\nfig.show()","9c95ff9b":"colors = ['rgb(125, 13, 222)']*len(Q17_values)\ncolors[-1] = colors[-2] = colors[-3] = 'rgb(222,13,69)'\n\ntrace1 = go.Bar(\n                x = Q17_values,\n                y = Q17_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE MACHINE LEARNING ALGORITHM' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'ML ALgorithm'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","fea74854":"Q18_options = []\nQ18_values = []","d5b8291a":"for col in df.columns:\n    if 'Q18' in col:\n        Q18_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q18_values.extend(df[col].value_counts().reset_index()[col].tolist())","199ffb61":"trace = go.Pie(labels=['General purpose image\/video tools', 'Image Segmentation methods', 'Object Detection methods',\n                       'Image Classification', 'Generative Networks', 'None', 'Other'], \n               values=Q18_values, \n               title=\"Computer Vision Applications\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nfig = go.Figure(data=[trace])\nfig.show()","b6198581":"Q19_options = []\nQ19_values = []","ece8d378":"for col in df.columns:\n    if 'Q19' in col:\n        Q19_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q19_values.extend(df[col].value_counts().reset_index()[col].tolist())","788bc14d":"trace = go.Pie(labels=Q19_options, \n               values=Q19_values, \n               title=\"NLP Methods\", \n               hoverinfo='percent+value+label', \n               textinfo='percent',\n               textposition='inside',\n               hole=0.6,\n               showlegend=True,\n               marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 28)),\n                           line=dict(color='#000000',\n                                     width=2),\n                          )\n                  )\nfig = go.Figure(data=[trace])\nfig.show()","3ce267b5":"Q14_options = []\nQ14_values = []","424b2f6b":"for col in df.columns:\n    if 'Q14' in col:\n        Q14_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q14_values.extend(df[col].value_counts().reset_index()[col].tolist())","7458e2e1":"Q14_values, Q14_options = (list(t) for t in zip(*sorted(zip(Q14_values, Q14_options))))\n\ncolors = ['rgb(125, 13, 222)']*len(Q14_values)\ncolors[-1] = colors[-2] = 'rgb(205, 0, 0)'\n\ntrace1 = go.Bar(\n                x = Q14_values,\n                y = Q14_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'FAVOURITE VISUALIZATION TOOLS' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Visualization Tool'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","39d1eef4":"Q36_cols = []\nfor col in df.columns:\n    if 'Q36' in col:\n        Q36_cols.append(col)","3d962fab":"df[Q36_cols].info()","d0047c64":"Q37_options = []\nQ37_values = []","f6438462":"for col in df.columns:\n    if 'Q37' in col:\n        Q37_options.extend(df[col].value_counts().reset_index()['index'].tolist())\n        Q37_values.extend(df[col].value_counts().reset_index()[col].tolist())","ccf4b3b7":"Q37_values, Q37_options = (list(t) for t in zip(*sorted(zip(Q37_values, Q37_options))))\nQ37_options = ['Fast.ai', 'None', 'Cloud-certification programs', 'LinkedIn Learning', 'Udacity', 'edX', 'Other', 'Datacamp', 'University Courses', 'Udemy', 'Kaggle Learn Courses', 'Coursera']\n\ncolors = ['rgb(125, 13, 222)']*len(Q37_values)\ncolors[-1] = 'rgb(205, 0, 0)'\n\ntrace1 = go.Bar(\n                x = Q37_values,\n                y = Q37_options,\n                marker = dict(color = colors,\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                orientation='h')\nlayout = go.Layout(template= \"plotly_dark\",title = 'PLATFORMS FOR DATA SCIENCE COURSES' , xaxis = dict(title = 'Count', automargin=True), yaxis = dict(title = 'Data Science Platform'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","cf6d27cc":"# IDE's Preferred","c3f8e79d":"# Gender Diversity","d1dce585":"# Platform to Share and Deploy Data Science Applications","6dd43e88":"### Scikit-learn, Tensorflow and Keras are the most preffered ML Frameworks","bb7e2c77":"# Computing Platform Frequently Used","e080050b":"### Word Embeddings, Encoder-Decoder models and Transformer models are the most frequently used NLP methods","a94b849a":"# Hardware Used on a Regular Basis","76622642":"### Almost 70% of the students are in the age group of 18-21 years","ff44588a":"### JupyterLabs\/Jupyter Notebooks is the first choice for Indian Students followed by VSCode","f9555ee1":"### Image Classification, Image Segmentation, General purpose tools and Object Detection are the Most Common applications of Computer Vision","134656df":"# Coding Experience","d4b03967":"# Natural Language Processing Methods Used Frequently","3097b2b0":"### Coursera is the most widely preffered platform for Data Science Courses ","de6dac25":"### Kaggle in largely dominated by Indian male students in terms of quantity","49c9e0a8":"### Maximum students prefer using their own Personal Computers as the preffered computing platform ","dc704831":"### Colab and Kaggle Notebooks are the most preffered Notebook Products","4e42ea3b":"## Consider Upvoting the kernel if you liked my Analysis :)","3fcc9257":"### Maximum Students prefer GPUs and CPUs on a regular basis","4c024f5e":"![](https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/4\/41\/Flag_of_India.svg\/1200px-Flag_of_India.svg.png)","69272889":"### More than 63% students are pursuing their Bachelor's Degree","454fcbf9":"# Programming Languages Used","7c04f97c":"### Linear\/Logistic Regression, Tree-based models and Convolutional Neural Networks are the most preffered ML Algorithms","3f0b4ab9":"# Notebook Products Preffered","5b6c2cfb":"### All the values are NaNs ","31c0f973":"### 85% of the students recommended to learn Python as the first language for an Aspiring Data Scientist","acda78e4":"# Favourite Machine Learning Framework","070491a3":"<head>\n<link rel=\"preconnect\" href=\"https:\/\/fonts.gstatic.com\">\n<link href=\"https:\/\/fonts.googleapis.com\/css2?family=Lobster&display=swap\" rel=\"stylesheet\">\n<link href=\"https:\/\/fonts.googleapis.com\/css2?family=Roboto&display=swap\" rel=\"stylesheet\">\n<\/head>\n\n<h1 style=\"color:blue; font-family: 'Roboto', sans-serif; text-align:center; font-size:30px\"> ANALYSIS OF INDIAN STUDENTS ON KAGGLE<\/h1>\n<hr>","85acc8e7":"<h2 style=\"text-align:center; font-family:Audiowide\"> The aim of this Notebook is to understand the behaviour of Indian Students on Kaggle. <\/h2>\n<h3 style=\"text-align:center\">Being an Indian student myself, I was inherently curious to know how other Indian Students were using Kaggle and proceeding in their Data Science Journey.<\/h3>\n<h2 style=\"text-align:center; font-family:'Lobster', cursive\">Let's Explore!<\/h2>","7e62e1d2":"# Programming Languages Recommended to learn first","39e3b6d3":"# Platforms for Data science courses","22d4b06f":"### As expected, most of the students have very less coding experience ","f0dc84ff":"### Matplotlib and seaborn are the most common plotting tools used","729ddfe1":"# Computer Vision Applications Used Frequently","88918099":"# Age Distribution","a487d1df":"# Favourite Visualization Tools","a7c97407":"# Favourite Machine Learning Algorithm","41eb7ef5":"# Education","a6a9c22a":"### Python is the most used programming language by Indian students"}}