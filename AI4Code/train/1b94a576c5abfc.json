{"cell_type":{"3f0a9c5c":"code","9269d275":"code","be508350":"code","83fc602f":"code","cfdddc8f":"code","bfb5019d":"code","d386e34d":"code","43c91054":"code","479d00d5":"code","b35e2daa":"code","8df1d3d7":"code","405c8f36":"code","599cc9a1":"code","7d568f9d":"code","a49a5dd3":"code","7d07cd17":"code","c17b91c9":"code","54e8ac5a":"code","2087619c":"code","4ce25de8":"code","e4b11304":"code","84189024":"code","8895c3b5":"code","455e8275":"code","9ef42f19":"code","0e9012a8":"code","c4516685":"code","3ffd2f11":"code","8e33e5cf":"code","e5dc18c0":"code","15f71af9":"code","35b64a86":"code","57db7e59":"code","902cb1df":"code","5d613d8c":"code","e9d062de":"code","17eb11e9":"code","5e53d2ce":"code","796e88d7":"code","2fcd3c60":"code","dd9e2e29":"code","ed7c7d8b":"code","3a1bfbef":"code","2c1eabb0":"code","ca1a438c":"code","fc6dae62":"code","af72c362":"code","c0fc8567":"code","401e6706":"code","f40a87a0":"code","61395bff":"code","54f3098f":"code","df1a32b2":"code","bd6a7819":"code","4d5aa05a":"code","d2323f11":"code","7048dba8":"code","f96a4dab":"code","f48c68b4":"code","b35a94c7":"code","dacd97c7":"code","8a567026":"code","8b75bee2":"code","9df85d6a":"code","50d4d40c":"code","e9078408":"code","3d8503b5":"code","13adefb1":"code","2e7e8e19":"code","413b621b":"code","a4345469":"code","2f089db7":"code","c2fbb55c":"code","804ee4dd":"code","3db53b9f":"code","101594e4":"code","986b6f6d":"code","4c0fded9":"code","7942a8e3":"code","d5b4e395":"code","0701f5fd":"code","1677e867":"code","b39f3185":"code","908c0205":"code","3b99d3e1":"code","454b35af":"code","769b6f44":"code","def9b180":"code","1df53631":"code","2c5d55ae":"code","c7080634":"code","fd9510b7":"code","9cbffcc1":"code","910f1b9b":"code","72d1ba06":"code","5b89b2b2":"code","05c85fef":"code","6b8b4f7b":"code","1491e111":"code","cf198bd8":"code","ee503ef8":"code","cf20d5b8":"code","d7c23103":"code","3bc70c7d":"code","b253e263":"code","e3a7f4d0":"code","af4a734a":"code","14ddf3aa":"code","f5bd9252":"code","61109e67":"code","e1854676":"code","7f1c79f5":"code","1c729b49":"code","00062daf":"code","cdab6d0e":"code","77bcc4c9":"code","7a6e76af":"code","64294d66":"code","25b87d0f":"code","5e1391b9":"code","ac890f71":"code","edbce6c9":"code","110d66c0":"code","92d5848a":"code","883c2025":"code","12ccd5f1":"code","a7cf3943":"code","c13cd049":"code","51e08fcf":"code","1fb799a0":"code","cd966cbd":"code","c10fb8e3":"code","010138c0":"code","fb340883":"code","defbe131":"code","59a663ef":"code","95d1c9c8":"code","8b4a4342":"code","61210a3e":"code","bae06fd4":"code","1b7f1a55":"code","7252e0de":"code","93f960e2":"code","5b8988a1":"code","0573a442":"code","922965eb":"code","1b143809":"code","10d89de6":"code","6fdb3375":"code","8dd2cde0":"code","e8652b90":"code","aeeebe30":"code","2d07f415":"code","8fd0ca53":"code","8358e618":"code","11bb2e63":"code","cffec20a":"code","63e6e190":"code","e2fc74d6":"code","58ac3ad3":"code","80784423":"code","bdc35da9":"code","e7cf05e6":"code","ab730bbe":"code","0bfc3295":"code","c35bdcad":"code","35c57bef":"code","0bb01814":"code","33839b91":"code","c0701321":"code","61f8c906":"code","7548c0b2":"code","82eafcc3":"code","871a8ad9":"code","3b24e037":"code","e885ae96":"code","8edcb81c":"code","2c26f377":"code","3e6bd22b":"code","7eff436a":"code","a9c8497f":"code","4aeff40c":"code","e068fb6f":"code","99540f94":"code","9c95833b":"code","4ab8d0d5":"code","06351839":"code","0cd02531":"code","088052f4":"code","8fdad070":"code","33a3720a":"code","e080cee7":"code","c36408ff":"code","3000a9e1":"code","8e3fd57c":"code","70d923d9":"code","19737b22":"code","ce9435cf":"code","d25da644":"code","b4f77622":"markdown","f5661f05":"markdown","8556f713":"markdown","9d65e40e":"markdown","6e666c36":"markdown","5e32a32f":"markdown","0e2f3575":"markdown","8085ef87":"markdown","4e213222":"markdown","fe8d34d1":"markdown","76c266ab":"markdown","109058e8":"markdown","3e46af6d":"markdown","6cebfdd5":"markdown","6a9ff3fc":"markdown","c1ae32bf":"markdown","c379ef9f":"markdown","5264a874":"markdown","a677d713":"markdown","32e8ce3f":"markdown","038a3bbc":"markdown","80d548ac":"markdown","b9fd45f4":"markdown","9a8bef0d":"markdown","78c4fa86":"markdown","f2fb5e84":"markdown","a8d25afe":"markdown","6716b738":"markdown","bf6492ba":"markdown","3c911201":"markdown","761c96c0":"markdown","4088fb02":"markdown","4b8c5aee":"markdown","6b85c7ba":"markdown","c472563f":"markdown","217b2cc4":"markdown","b79b1c97":"markdown","b7e0a2a8":"markdown","b50c3199":"markdown","378d36b8":"markdown","972e1206":"markdown","62a65feb":"markdown","0708118b":"markdown","2e802776":"markdown","976864a0":"markdown","427f5877":"markdown","b09f1121":"markdown","c8afab0e":"markdown","bbac4c2b":"markdown","a794589d":"markdown","74b39a97":"markdown","92344d1b":"markdown","3757280b":"markdown","79f0ccc9":"markdown","6c090ead":"markdown","4f7ab34f":"markdown","fa5bdd01":"markdown","487ed243":"markdown","9ba19c8b":"markdown","758bd861":"markdown","f72da7e9":"markdown","69ca9d5c":"markdown","a8fb4816":"markdown","f2a358e4":"markdown","c378470c":"markdown","0e0edd30":"markdown","e0421884":"markdown","9e9fc90b":"markdown","4dabc031":"markdown"},"source":{"3f0a9c5c":"from pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials","9269d275":"auth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)","be508350":"downloaded = drive.CreateFile({'id':\"1907ZpGGcxQx-ddQMk92E_dWZhSwNX9cH\"})   # replace the id with id of file you want to access\ndownloaded.GetContentFile('train.csv')        # replace the file name with your file","83fc602f":"downloaded = drive.CreateFile({'id':\"1T8OerWn18N0lL1Oo1Gb_ayjbWX01Z-Sg\"})   # replace the id with id of file you want to access\ndownloaded.GetContentFile('test.csv')        # replace the file name with your file","cfdddc8f":"downloaded = drive.CreateFile({'id':\"1ugSoizEczwmNhxwB4AeKHp8YH5lvsqR4\"})   # replace the id with id of file you want to access\ndownloaded.GetContentFile('sample_submission.csv')        # replace the file name with your file","bfb5019d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\n%matplotlib inline","d386e34d":"train_data=pd.read_csv('train.csv')\ntest_data=pd.read_csv('test.csv')","43c91054":"train_data=train_data.drop_duplicates()","479d00d5":"train_data.head()","b35e2daa":"train_data.shape","8df1d3d7":"train_data.info()","405c8f36":"train_data.FinelineNumber.value_counts()","599cc9a1":"train_data['FinelineNumber']=train_data['FinelineNumber'].fillna(8228)","7d568f9d":"train_data.info()","a49a5dd3":"train_data.dropna(inplace=True)","7d07cd17":"train_data.shape","c17b91c9":"train_data.head()","54e8ac5a":"sns.heatmap(train_data.isna())","2087619c":"train_data.TripType.nunique()","4ce25de8":"train_data.TripType.unique()","e4b11304":"plt.figure(figsize=(12,6))\nsns.countplot(train_data.TripType)","84189024":"plt.figure(figsize=(12,6))\nsns.distplot(train_data.TripType,hist=False)","8895c3b5":"train_data.VisitNumber.nunique()","455e8275":"train_data.shape[0]","9ef42f19":"plt.figure(figsize=(12,6))\nsns.distplot(train_data.VisitNumber)","0e9012a8":"train_data.head()","c4516685":"plt.figure(figsize=(12,6))\nsns.countplot(train_data.Weekday)","3ffd2f11":"train_data.groupby('Weekday')['Weekday'].count()","8e33e5cf":"def weekday_to_num(x):\n  if x=='Monday':\n    return 0\n  elif x=='Tuesday':\n    return 1\n  elif x=='Wednesday':\n    return 2\n  elif x=='Thursday':\n    return 3\n  elif x=='Friday':\n    return 4\n  elif x=='Saturday':\n    return 5\n  elif x=='Sunday':\n    return 6 ","e5dc18c0":"train_data['weekday_num']=train_data.Weekday.apply(weekday_to_num)","15f71af9":"train_data.head()","35b64a86":"train_data.Weekday.unique()","57db7e59":"fig,axs=plt.subplots(figsize=(10,6))\nsns.distplot(train_data['weekday_num'],ax=axs)\nticks=list(range(0,7))\naxs.set_xticks(ticks)\nx_tick_label=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']\naxs.set_xticklabels(x_tick_label)\nplt.show()","902cb1df":"train_data.ScanCount.nunique()","5d613d8c":"train_data.ScanCount.value_counts()","e9d062de":"train_data.min().ScanCount","17eb11e9":"train_data.max().ScanCount","5e53d2ce":"plt.figure(figsize=(12,8))\nsns.distplot(train_data.ScanCount,bins=39)","796e88d7":"plt.figure(figsize=(10,6))\nsns.distplot(train_data[train_data.ScanCount<=10].ScanCount)\n","2fcd3c60":"plt.figure(figsize=(10,6))\nsns.distplot(train_data[train_data.ScanCount>10].ScanCount,bins=4)\n","dd9e2e29":"plt.figure(figsize=(10,6))\nsns.countplot(train_data[train_data.ScanCount<=10].ScanCount)","ed7c7d8b":"plt.figure(figsize=(10,6))\nsns.countplot(train_data[train_data.ScanCount>10].ScanCount)","3a1bfbef":"train_data.head()","2c1eabb0":"train_data.DepartmentDescription.nunique()\t","ca1a438c":"train_data.DepartmentDescription.value_counts()\t","fc6dae62":"plt.figure(figsize=(12,8))\nsns.countplot(x='DepartmentDescription',data=train_data)\nplt.xticks(rotation=90)\nplt.show()","af72c362":"train_data.groupby('DepartmentDescription')['DepartmentDescription'].count()","c0fc8567":"department_list=list(train_data['DepartmentDescription'].unique())","401e6706":"department_enumerate=list(enumerate(department_list))","f40a87a0":"department_dict={v:k for k,v in department_enumerate}","61395bff":"department_dict.values()","54f3098f":"def department_num(x):\n  return department_dict[x]\n  ","df1a32b2":"train_data['Department_num']=train_data['DepartmentDescription'].apply(department_num)","bd6a7819":"train_data.head()","4d5aa05a":"fig,axs=plt.subplots(figsize=(18,8))\nsns.distplot(train_data['Department_num'],bins=68,ax=axs)\nticks=list(range(0,69))\naxs.set_xticks(ticks)\nx_tick_label=train_data.DepartmentDescription.unique()\t\naxs.set_xticklabels(x_tick_label)\nplt.xticks(rotation=90)\nplt.show()\n\n","d2323f11":"train_data.nunique().FinelineNumber","7048dba8":"plt.figure(figsize=(10,6))\nsns.distplot(train_data.FinelineNumber,hist=False)","f96a4dab":"train_data.Upc.nunique()","f48c68b4":"train_data.shape","b35a94c7":"plt.figure(figsize=(8,6))\nsns.distplot(train_data.Upc,hist=False)","dacd97c7":"train_data.head()","8a567026":"# seeing for each VisitNumber how many products were purchased based on Upc number of product purchased\nproducts_per_visit=train_data.groupby(['VisitNumber'])['Upc'].count()","8b75bee2":"products_per_visit_dict=dict(products_per_visit)","9df85d6a":"train_data['num_of_products_for_VisitNumber']=train_data['VisitNumber'].apply(lambda x:products_per_visit_dict.get(x,0))","50d4d40c":"# train_data.drop(columns=['num_of_products'],inplace=True)","e9078408":"train_data.head()","3d8503b5":"train_data.num_of_products_for_VisitNumber.nunique()","13adefb1":"plt.figure(figsize=(12,6))\nsns.distplot(train_data.num_of_products_for_VisitNumber,bins=99)","2e7e8e19":"plt.figure(figsize=(12,6))\nsns.distplot(np.log(train_data.num_of_products_for_VisitNumber),hist=False)","413b621b":"train_data.head()","a4345469":"sns.jointplot(y='num_of_products_for_VisitNumber',x='weekday_num',data=train_data)","2f089db7":"plt.figure(figsize=(8,8))\nsns.boxplot(x='weekday_num',y='num_of_products_for_VisitNumber',data=train_data)","c2fbb55c":"train_data.FinelineNumber.nunique()","804ee4dd":"train_data.Department_num.unique()","3db53b9f":"groupby_dept=train_data.groupby(['Department_num'])","101594e4":"fineline_dict={}\nfor i in range(68):\n  gr=groupby_dept.get_group(i)\n  c=gr['FinelineNumber'].count()\n  un=gr['FinelineNumber'].nunique()\n  #print(f\"group: {i}, unique FinelineNumber: {un}\")\n  fineline_dict[i]=un\n\n","986b6f6d":"sns.jointplot(y='num_of_products_for_VisitNumber',x='TripType',data=train_data[train_data['TripType']<900])","4c0fded9":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='num_of_products_for_VisitNumber',data=train_data)","7942a8e3":"train_data.head()","d5b4e395":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='Department_num',data=train_data)","0701f5fd":"weekday_num_of_products=dict(train_data.groupby('weekday_num')['Upc'].count())","1677e867":"train_data['num_of_products_for_weekday']=train_data['weekday_num'].apply(lambda x:weekday_num_of_products.get(x))","b39f3185":"train_data.head()","908c0205":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='num_of_products_for_weekday',data=train_data)","3b99d3e1":"train_data.drop(columns=['num_of_products_for_weekday'],inplace=True)","454b35af":"Department_num_of_products=dict(train_data.groupby('Department_num')['Upc'].count())","769b6f44":"train_data['num_of_products_for_department']=train_data['Department_num'].apply(lambda x:Department_num_of_products.get(x))","def9b180":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='num_of_products_for_department',data=train_data)","1df53631":"train_data.FinelineNumber.nunique()","2c5d55ae":"Fineline_num_of_products=dict(train_data.groupby('FinelineNumber')['Upc'].count())","c7080634":"train_data['num_of_products_for_fineline']=train_data['FinelineNumber'].apply(lambda x:Fineline_num_of_products.get(x))","fd9510b7":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='num_of_products_for_fineline',data=train_data)","9cbffcc1":"train_data.drop(columns=['num_of_products_for_fineline'],inplace=True)","910f1b9b":"train_data.head()","72d1ba06":"train_data.Weekday.value_counts()","5b89b2b2":"train_data.DepartmentDescription.value_counts()","05c85fef":"train_data.head()","6b8b4f7b":"one_hot_encoded_weekday=pd.get_dummies(train_data['Weekday'],drop_first=False)","1491e111":"one_hot_encoded_weekday.head()","cf198bd8":"train_data=pd.concat([train_data,one_hot_encoded_weekday],axis=1)","ee503ef8":"train_data.head()","cf20d5b8":"Y=train_data.TripType","d7c23103":"X=train_data.drop(columns=['TripType'])","3bc70c7d":"X['FinelineCat']=pd.cut(X['FinelineNumber'],bins=50,labels=False)","b253e263":"X.head()","e3a7f4d0":"Y.head()","af4a734a":"train_data.shape","14ddf3aa":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,stratify=Y,test_size=0.2)\nx_train,x_cv,y_train,y_cv=train_test_split(x_train,y_train,stratify=y_train,test_size=0.2)","f5bd9252":"print(x_train.shape,x_cv.shape,x_test.shape)","61109e67":"print(y_train.shape,y_cv.shape,y_test.shape)","e1854676":"x_train_res=x_train.copy()","7f1c79f5":"x_train_res['class']=y_train.values","1c729b49":"y_train.unique()","00062daf":"x_train_res.head()","cdab6d0e":"#function to get lookup dictionary based on train data only\nfrom tqdm import tqdm\ndef get_lookup_dict(alpha,feature):\n  value_count = x_train_res[feature].value_counts()\n  lookup_dict = dict()\n  for i, denominator in tqdm(value_count.items()):\n    vec = []\n    for k in y_train.unique():\n      cls_cnt = x_train_res.loc[(x_train_res['class']==k) & (x_train_res[feature]==i)]\n      vec.append((cls_cnt.shape[0] + alpha*10)\/ (denominator + 90*alpha))\n    \n    lookup_dict[i]=vec\n  \n  return lookup_dict\n","77bcc4c9":"from tqdm import tqdm\ndef get_encoded_feature(alpha,feature,df,lookup_dict):\n  #lookup_dict=get_lookup_dict(alpha,feature,df)\n  value_count = x_train_res[feature].value_counts()\n  gv_fea = []\n  for index, row in tqdm(df.iterrows()):\n\n    if row[feature] in dict(value_count).keys():\n        gv_fea.append(lookup_dict[row[feature]])\n    else:\n        gv_fea.append([1\/38]*38)\n#           gv_fea.append([-1,-1,-1,-1,-1,-1,-1,-1,-1])\n  \n  return gv_fea","7a6e76af":"lookup_dict_DD=get_lookup_dict(1,'DepartmentDescription')","64294d66":"alpha = 1\ntrain_department_feature_responseCoding=np.array(get_encoded_feature(alpha, \"DepartmentDescription\", x_train,lookup_dict_DD))","25b87d0f":"test_department_feature_responseCoding=np.array(get_encoded_feature(alpha, \"DepartmentDescription\", x_test,lookup_dict_DD))","5e1391b9":"cv_department_feature_responseCoding=np.array(get_encoded_feature(alpha, \"DepartmentDescription\", x_cv,lookup_dict_DD))","ac890f71":"train_department_feature_responseCoding.shape","edbce6c9":"test_department_feature_responseCoding.shape","110d66c0":"cv_department_feature_responseCoding.shape","92d5848a":"train_data.ScanCount.nunique()","883c2025":"lookup_dict_SS=get_lookup_dict(1,'ScanCount')","12ccd5f1":"train_ScanCount_feature_responseCoding=np.array(get_encoded_feature(alpha, \"ScanCount\", x_train,lookup_dict_SS))","a7cf3943":"test_ScanCount_feature_responseCoding=np.array(get_encoded_feature(alpha, \"ScanCount\", x_test,lookup_dict_SS))","c13cd049":"cv_ScanCount_feature_responseCoding=np.array(get_encoded_feature(alpha, \"ScanCount\", x_cv,lookup_dict_SS))","51e08fcf":"train_ScanCount_feature_responseCoding.shape","1fb799a0":"test_ScanCount_feature_responseCoding.shape","cd966cbd":"cv_ScanCount_feature_responseCoding.shape","c10fb8e3":"train_data.FinelineNumber.nunique()","010138c0":"train_data.FinelineNumber","fb340883":"train_data['FinelineCat']=pd.cut(train_data['FinelineNumber'],bins=50,labels=False)","defbe131":"plt.figure(figsize=(9,6))\nsns.distplot(train_data['FinelineCat'])","59a663ef":"plt.figure(figsize=(20,8))\nsns.boxplot(x='TripType',y='FinelineCat',data=train_data)","95d1c9c8":"lookup_dict_FNC=get_lookup_dict(1,'FinelineCat')","8b4a4342":"train_FinelineCat_feature_responseCoding=np.array(get_encoded_feature(alpha, \"FinelineCat\", x_train,lookup_dict_FNC))","61210a3e":"test_FinelineCat_feature_responseCoding=np.array(get_encoded_feature(alpha, \"FinelineCat\", x_test,lookup_dict_FNC))","bae06fd4":"cv_FinelineCat_feature_responseCoding=np.array(get_encoded_feature(alpha, \"FinelineCat\", x_cv,lookup_dict_FNC))","1b7f1a55":"train_FinelineCat_feature_responseCoding.shape","7252e0de":"test_FinelineCat_feature_responseCoding.shape","93f960e2":"cv_FinelineCat_feature_responseCoding.shape","5b8988a1":"x_train.shape","0573a442":"x_train.head()","922965eb":"x_train.drop(columns=['Weekday','Upc','DepartmentDescription','FinelineNumber','weekday_num','Department_num','FinelineCat'],inplace=True)","1b143809":"x_train.head()","10d89de6":"x_train.values","6fdb3375":"x_tr=np.hstack((x_train.values,train_ScanCount_feature_responseCoding,train_department_feature_responseCoding,train_FinelineCat_feature_responseCoding,))","8dd2cde0":"x_tr.shape","e8652b90":"y_train.shape","aeeebe30":"x_test.drop(columns=['Weekday','Upc','DepartmentDescription','FinelineNumber','weekday_num','Department_num','FinelineCat'],inplace=True)","2d07f415":"x_test.head()","8fd0ca53":"x_te=np.hstack((x_test.values,test_ScanCount_feature_responseCoding,test_department_feature_responseCoding,test_FinelineCat_feature_responseCoding,))","8358e618":"x_cv.drop(columns=['Weekday','Upc','DepartmentDescription','FinelineNumber','weekday_num','Department_num','FinelineCat'],inplace=True)","11bb2e63":"x_cv=np.hstack((x_cv.values,cv_ScanCount_feature_responseCoding,cv_department_feature_responseCoding,cv_FinelineCat_feature_responseCoding,))","cffec20a":"x_cv.shape","63e6e190":"y_cv.shape","e2fc74d6":"#np.save('x_train_final',x_tr)","58ac3ad3":"#np.save('x_test_final',x_te)","80784423":"#np.save('x_cv_final',x_cv)","bdc35da9":"#np.save('y_train_final',y_train.values)","e7cf05e6":"#np.save('y_test_final',y_test.values)","ab730bbe":"#np.save('y_cv_final',y_cv.values)","0bfc3295":"from google.colab import drive\ndrive.mount('\/content\/drive')","c35bdcad":"from scipy import sparse","35c57bef":"x_cv=sparse.csr_matrix(np.load('\/content\/drive\/My Drive\/x_cv_final.npy'))\n","0bb01814":"x_test=sparse.csr_matrix(np.load('\/content\/drive\/My Drive\/x_test_final.npy'))","33839b91":"x_train=sparse.csr_matrix(np.load('\/content\/drive\/My Drive\/x_train_final.npy'))","c0701321":"y_cv=np.load('\/content\/drive\/My Drive\/y_cv_final.npy')","61f8c906":"y_test=np.load('\/content\/drive\/My Drive\/y_test_final.npy')","7548c0b2":"y_train=np.load('\/content\/drive\/My Drive\/y_train_final.npy')","82eafcc3":"y_train.shape[0]+y_cv.shape[0]","871a8ad9":"x_train.shape[0]+x_cv.shape[0]","3b24e037":"print(x_train.shape,x_cv.shape,x_test.shape)","e885ae96":"print(y_train.shape,y_cv.shape,y_test.shape)","8edcb81c":"408621+102156","2c26f377":"408621+102156","3e6bd22b":"from scipy.sparse import vstack\n","7eff436a":"x_train=vstack((x_train,x_cv))","a9c8497f":"x_train.shape","4aeff40c":"y_train=np.vstack((y_train.reshape(-1,1),y_cv.reshape(-1,1)))","e068fb6f":"y_train.shape","99540f94":"y_train=y_train.astype('int')","9c95833b":"y_train.dtype","4ab8d0d5":"random_grid = {'max_depth': [None],\n               'min_samples_leaf': [100,1000],\n               'min_samples_split': [100,1000],\n               'n_estimators': [100,500]}","06351839":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier","0cd02531":"rf = RandomForestClassifier()\n# Random search of parameters, using 3 fold cross validation, \n# search across 100 different combinations, and use all available cores\nrf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, cv = 3, random_state=42, n_jobs = -1)\n# Fit the random search model\nrf_random.fit(x_tr, y_train)","088052f4":"rf_random.best_params_\n","8fdad070":"rf_random.best_estimator_","33a3720a":"from sklearn.metrics import log_loss","e080cee7":"from sklearn.calibration import CalibratedClassifierCV","c36408ff":"\nr_cfl=RandomForestClassifier(n_estimators=500,max_depth=None,min_samples_leaf=100,min_samples_split=100, random_state=42,n_jobs=-1)\nr_cfl.fit(x_train,y_train)\n","3000a9e1":"pred=r_cfl.predict(x_cv)","8e3fd57c":"sig_clf = CalibratedClassifierCV(r_cfl, method=\"sigmoid\")\nsig_clf.fit(x_train, y_train)\npredict_y = sig_clf.predict_proba(x_cv)\nloss=log_loss(y_cv, predict_y, labels=r_cfl.classes_, eps=1e-15)","70d923d9":"loss","19737b22":"#test_data_len = X_test.shape[0]\ncv_data_len = x_cv.shape[0]\n\n# we create a output array that has exactly same size as the CV data\ncv_predicted_y = np.zeros((cv_data_len,38))\nfor i in range(cv_data_len):\n    rand_probs = np.random.rand(1,38)\n    cv_predicted_y[i] = ((rand_probs\/sum(sum(rand_probs)))[0])\nprint(\"Log loss on Cross Validation Data using Random Model\",log_loss(y_cv,cv_predicted_y, eps=1e-15))","ce9435cf":"import pickle\n# save the model to disk\nfilename = 'rf_cv_log_loss_1.85.sav'\npickle.dump(r_cfl, open(filename, 'wb'))\n \n# some time later...\n \n# load the model from disk\n#loaded_model = pickle.load(open(filename, 'rb'))\n#result = loaded_model.score(X_test, Y_test)\n#print(result)","d25da644":"filename = 'rf_calibrated_cv_log_loss_1.85.sav'\npickle.dump(sig_clf, open(filename, 'wb'))","b4f77622":"### DepartmentDescription\t","f5661f05":"# Response encoding for rest of the rest of the categorical features","8556f713":"### FinelineNumber","9d65e40e":"### **Creating a new temporary dataframe from x_train and y_train for getting lookup table for response coding of some categorical features**","6e666c36":"##**Log-Loss for totally random model is 3.94 and for our RandomForestClassifier, log-loss is 1.84 i.e less than half of random model. Our model seems to be performing well.**","5e32a32f":"# Training CalibratedClassifier on top of our base Classifier to get calibrated probabilities","0e2f3575":"# Performing RandomSearchCv to check for best hyperparameters for RondomForestClassifier","8085ef87":"### **response encoding 'DepartmentDescription'**","4e213222":"# Stacking all featurized train, test and cv data and preparing final data.","fe8d34d1":"## Deduplication","76c266ab":"best parameters:","109058e8":"# **Walmart: Trip Type Classification**","3e46af6d":"## saving the three preprocessed and featurized train, test and cv datasets for future importing.","6cebfdd5":"## Data Description\n\n### **Problem statement**: categorizing shopping trip types based on the items that customers purchased. \nTo give a few hypothetical examples of trip types: a customer may make a small daily dinner trip, a weekly large grocery trip, a trip to buy gifts for an upcoming holiday, or a seasonal trip to buy clothes.\n\nWalmart has categorized the trips contained in this data into 38 distinct types using a proprietary method applied to an extended set of data. You are challenged to recreate this categorization\/clustering with a more limited set of features. This could provide new and more robust ways to categorize trips.\n\nThe training set (train.csv) contains a large number of customer visits with the TripType included. You must predict the TripType for each customer visit in the test set (test.csv). Each visit may only have one TripType. You will not be provided with more information than what is given in the data (e.g. what the TripTypes represent or more product information).\n\n### **Data fields**\n\n#### *TripType* - a categorical id representing the type of shopping trip the customer made. This is the ground truth that you are predicting. TripType_999 is an \"other\" category.\n#### *VisitNumber* - an id corresponding to a single trip by a single customer\n#### Weekday - the weekday of the trip\n#### *Upc* - the UPC number of the product purchased\n#### *ScanCount* - the number of the given item that was purchased. A negative value indicates a product return.\n#### *DepartmentDescription* - a high-level description of the item's department\n#### *FinelineNumber* - a more refined category for each of the products, created by Walmart","6a9ff3fc":"# Splitting data into X and Y and then into train and cross validation and test sets.","c1ae32bf":"***As we can see, there are visits for ScanCount of 1 the most. and as number of ScanCount increases, the count of data points decreases. Also not many data points for returned products, since negative ScanCounts are not much.***","c379ef9f":"num_of_products seem to increase as category number of TripType increase.","5264a874":"**'num_of_products_for weekday' does not seem to be much useful. removing it**","a677d713":"### **Functions for response encoding** ","32e8ce3f":"**adding 'FinelineCat' feature**","038a3bbc":"**Missing values in FinelineNumber are most. filling them with most frequent value in that column.**","80d548ac":"## Checking for duplication","b9fd45f4":"**Droping rest of the rows with missing values, which are very few compared to total size of dataset**","9a8bef0d":"Seems like num_of_products purchased shows lognormal distribution, checking for same.","78c4fa86":"38 different class labels ","f2fb5e84":"# Training a completely random model to check worst possible log-loss","a8d25afe":"### Weekday distribution ","6716b738":"### **response encoding 'ScanCount'**","bf6492ba":"we may say that this is a multimodal distribution. certain values appear more frequently than others.","3c911201":"we will need to add this feature to X first","761c96c0":"### VisitNumber","4088fb02":"**boxplots for various TripTypes for Department_num also don't fully overlap, hence num_of_products might prove to be an distinctive feature**","4b8c5aee":"'FinelineNumber' has too many categories. we will try to discretise it further into small number of categories","6b85c7ba":"**Imbalanced data**. distribution of target variable is right skewed. there are too many classes for which there are very few datapoints\nTripType 36 to 40 have most datapoints.","c472563f":"***ScanCount data is widely distributed between -12 to 71. 71 seems to be an outlier. so to get clearer view of the distribution plottting distribution in two parts***","217b2cc4":"### ScanCount","b79b1c97":"# saving the random forest models(calibrated and uncalibrated) in binary files.","b7e0a2a8":"### **response encoding 'FinelineCat'**","b50c3199":"As expected the distribution of number of products purchased for each VisitNumer is right skewed. there is more probability of buying less number of products","378d36b8":"# DATA","972e1206":"### Upc","62a65feb":"Checking if num_of_products is somehow related to the day on which shopping was done.","0708118b":"we will see if this new feature is useful in classification","2e802776":"***VisitNumber shows approximately uniform distribution***","976864a0":"# Importing files from google drive","427f5877":"***As Expected there is more probabilty of visits for weekends. Thursday is the day for lowest number of visits***","b09f1121":"Not much useful. but we will anyway respose encode this feature","c8afab0e":"### creating a new feature 'num_of_products' which shows number of products purchased for each 'VisitNumber' based on 'Upc' ","bbac4c2b":"## **the RandomForestClassifier with parameters: 'max_depth' = None, 'min_samples_leaf' = 100, 'min_samples_split' = 100, 'n_estimators' = 500 gives log-loss of 1.85 on cross validation data**","a794589d":"### TripType","74b39a97":"**We do see a trend here, boxplots for various TripTypes for num_of_products don't fully overlap, hence num_of_products might prove to be an**","92344d1b":"## loading .npy files","3757280b":"num_of_products does not show lognormal distribution.","79f0ccc9":"Distribution of DepartmentDescription in **skewed**, **PERSONAL CARE, DSD GROCERIES, DAIRY, PRODUCE, GROCERY DRY GOODS** these categories in DepartmentDescription dominate the data.","6c090ead":"On weekends and on mondays there seem to be more products bought per VisitNumber","4f7ab34f":"VisitNumber is a categorical variable","fa5bdd01":"Too many categories in FinelineNumber","487ed243":"# Training RandomForestClassifier with best parameters","9ba19c8b":"# Dealing with missing values","758bd861":"**'num_of_products_for_fineline' does not seem to be much useful removing it**","f72da7e9":"## Univariate analysis","69ca9d5c":"Joining train and cv datasets since we are going to use sklearn's cross validation implementation and not manual","a8fb4816":"fineline_dict is dictionary where key is Depart_num and value is unique number of FinelineNumber in that department ","f2a358e4":"## **worst possoble log-loss of a completely random model is 3.94**","c378470c":"# Exploring Data","0e0edd30":"# featurization","e0421884":"**'num_of_products_for_department' seems to be useful. keeping it.**","9e9fc90b":"### Reading data","4dabc031":"## **one hot encoding Weekdays**"}}