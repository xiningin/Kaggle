{"cell_type":{"20879533":"code","879782b5":"code","4fb0b98b":"code","c7b0a01e":"code","fed379e1":"code","314e5e20":"code","86793271":"code","9cda3032":"code","9933f618":"code","d0bf1604":"code","27d06d72":"code","92e34caf":"code","bb415ace":"code","42023562":"code","90125614":"code","12afa53f":"code","b45d19f3":"code","242834a0":"code","c166bf3b":"code","3bca2a57":"code","b7962ca1":"code","127fb364":"code","aaaec4c9":"code","bb1f2363":"code","0f2c3f21":"code","2efcb378":"code","ee83d0dd":"code","855a306b":"code","e286443d":"code","0904941f":"code","f34fee11":"code","1f76a1f0":"code","44189ecd":"code","7c19be34":"code","208b7d19":"code","95da8b8d":"code","360bf8f1":"code","c5024312":"code","1a2dfa90":"code","6a4e49ca":"code","a779d742":"code","39421560":"code","8fa98604":"code","470c7940":"code","0500e639":"code","ff5ca5af":"code","d95d36c2":"code","8d5f094f":"code","3fe4e3d1":"code","75f99bb8":"code","46f3c071":"code","5a6fafdd":"code","14337acf":"code","97e220d6":"code","5a6895b1":"code","73dc6760":"code","0cbbba8a":"code","f0ac44b7":"code","3ab3a684":"code","78965024":"code","ad5130a5":"code","d3a1da45":"code","d27ae4fc":"code","be778393":"code","3b1c0b3a":"code","202ec981":"code","01e1c14e":"code","13ee931e":"code","f7126d6b":"code","cdd9da11":"code","06e019ed":"code","ceef8228":"code","86d05c44":"markdown","4608b0d1":"markdown","425bef01":"markdown","25d91c50":"markdown","276eb04e":"markdown","8ad2d3fe":"markdown","31d159c7":"markdown","e62376fe":"markdown","c0e55069":"markdown","2fe88af3":"markdown","b650c611":"markdown","0ee7e331":"markdown"},"source":{"20879533":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","879782b5":"data = pd.read_csv(\"..\/input\/breastcancerdataset\/BRCA.csv\")","4fb0b98b":"data.head()","c7b0a01e":"data.shape","fed379e1":"data.isnull().sum()","314e5e20":"data_new=data.dropna()","86793271":"data_new.shape\n","9cda3032":"data_new","9933f618":"data_new.isnull().sum()","d0bf1604":"data_new.describe()","27d06d72":"data_new = data_new[data_new.Gender=='FEMALE']","92e34caf":"data_new.shape","bb415ace":"data_new.drop(['Patient_ID'],axis=1,inplace=True)","42023562":"data_new","90125614":"import plotly.express as px\nfig = px.scatter_matrix(data_new,\n    dimensions= ['Age','Protein1','Protein2','Protein3','Protein4'],\n    color = 'Patient_Status',color_continuous_scale= px.colors.sequential.Burg,template='ggplot2')\nfig.update_layout(\n    title='Relationship between Features',\n    width=900,\n    height=900,\n)\n\nfig.show()","12afa53f":"y = data_new['Patient_Status']","b45d19f3":"data_new.drop(['Gender','Histology'],axis=1,inplace=True)","242834a0":"data_new","c166bf3b":"data_new.drop(['Surgery_type','Date_of_Surgery','Date_of_Last_Visit'],axis=1,inplace=True)","3bca2a57":"data_new['Tumour_Stage'] = [0.75 if each == \"I\" else 2  for each  in data_new.Tumour_Stage]","b7962ca1":"data_remane=data_new.set_axis(['Age', 'Protein1', 'Protein2', 'Protein3', 'Protein4', 'Tumour_Stage','ER_status','PR_status','HER2_status','Patient_Status'], axis=1, inplace=True)\nprint('After:', data_new.columns)","127fb364":"data_new.head()","aaaec4c9":"data_new['ER_status'] = [1 if each == \"Positive\" else 0 for each  in data_new.ER_status]","bb1f2363":"data_new['PR_status'] = [1 if each == \"Positive\" else 0 for each  in data_new.PR_status]","0f2c3f21":"data_new['HER2_status'] = [1 if each == \"Positive\" else 0 for each  in data_new.HER2_status]","2efcb378":"data_new['Patient_Status'] = [1 if each == \"Alive\" else 0 for each  in data_new.Patient_Status]","ee83d0dd":"x1=data_new","855a306b":"data_new.head()","e286443d":"x=data_new","0904941f":"x","f34fee11":"plt.figure(figsize=(20, 8))\nsns.boxplot(data=x)\nplt.xticks(rotation =90)","1f76a1f0":"import matplotlib.pyplot as plt\nx.hist(bins=50, figsize=(20,15))\nplt.show()","44189ecd":"x.drop(['Patient_Status'],axis=1,inplace=True)","7c19be34":"x","208b7d19":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\n\n# split data train 72% and test 28%\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.28, random_state=42)\n\n#random forest classifier with n_estimators=10 (default)\nclf_rf = RandomForestClassifier(random_state=42)      \nclr_rf = clf_rf.fit(x_train,y_train)\nclr = clr_rf.predict(x_test)\nac = accuracy_score(y_test,clf_rf.predict(x_test))*100\nprint('Accuracy is: ',ac)\nprint(classification_report(y_test,clr, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\ncm = confusion_matrix(y_test,clf_rf.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","95da8b8d":"import xgboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nfrom sklearn.metrics import recall_score\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.28, random_state=42)\nxgb = xgboost.XGBClassifier(earning_rate=0.009, n_estimators=350, subsample=0.8, max_depth=7)\nxgb.fit(x_train,y_train)\nprediction_xgb = xgb.predict(x_test)\nprint(classification_report(y_test, prediction_xgb, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nlr_auc=metrics.plot_roc_curve(xgb, x_test, y_test)\n","360bf8f1":"print('Accuracy of XGB model is {}'.format(accuracy_score(y_test,prediction_xgb)*100))","c5024312":"cm = confusion_matrix(y_test,xgb.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","1a2dfa90":"from sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score,cross_val_predict\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30,random_state=42 )\nfor i in range(1,11):\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    cv = RepeatedKFold(n_splits=10, n_repeats=10, random_state=42)\n    scores = cross_val_score(neigh, x_test, y_test, scoring='accuracy', cv=cv)\n    print('k=%d : %.3f' % (i, (np.mean(scores))))","6a4e49ca":"from sklearn.linear_model import SGDClassifier\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.50, random_state=42)\nclassify = SGDClassifier()\nclassify.fit(x_train, y_train)\n\n\nprediction = classify.predict(x_test)\nprint(classification_report(y_test, prediction, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nmetrics.plot_roc_curve(classify, x_test, y_test)\n\n","a779d742":"print('Accuracy of SGDClassifier is {}'.format(accuracy_score(y_test,prediction)*100))","39421560":"from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.28, random_state=42)\ncl = SVC(kernel='sigmoid')\ncl.fit(x_train, y_train)\npred = cl.predict(x_test)\nprint(classification_report(y_test, pred, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nmetrics.plot_roc_curve(cl, x_test, y_test)\n\n","8fa98604":"print('Accuracy of SVM is {}'.format(accuracy_score(y_test,pred)*100))","470c7940":"data","0500e639":"data_set=data.dropna()","ff5ca5af":"data_set","d95d36c2":"count_class_0, count_class_1 =data_set['Patient_Status'].value_counts()\n\n# Divide by class\ndata_set_class_0 = data_set[data_set['Patient_Status'] == 'Alive']\ndata_set_class_1 = data_set[data_set['Patient_Status'] == 'Dead']\n\nprint(count_class_0)\nprint(count_class_1)","8d5f094f":"data_set_class_0_under = data_set_class_0.sample(count_class_1,random_state=42)\ndata_under = pd.concat([data_set_class_0_under, data_set_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(data_under['Patient_Status'].value_counts())\n\ndata_under['Patient_Status'].value_counts().plot(kind='bar', title='Count (target)');","3fe4e3d1":"data_under.head()","75f99bb8":"data_under.drop(['Date_of_Surgery','Date_of_Last_Visit','Histology','Patient_ID','Surgery_type','Gender'],axis=1,inplace=True)","46f3c071":"data_under","5a6fafdd":"data_remane=data_under.set_axis(['Age', 'Protein1', 'Protein2', 'Protein3', 'Protein4', 'Tumour_Stage','ER_status','PR_status','HER2_status','Patient_Status'], axis=1, inplace=True)\nprint('After:', data_new.columns)","14337acf":"data_under['ER_status'] = [1 if each == \"Positive\" else 0 for each  in data_under.ER_status]","97e220d6":"data_under['PR_status'] = [1 if each == \"Positive\" else 0 for each  in data_under.PR_status]","5a6895b1":"data_under['HER2_status'] = [1 if each == \"Positive\" else 0 for each  in data_under.HER2_status]","73dc6760":"data_under['Patient_Status'] = [1 if each == \"Alive\" else 0 for each  in data_under.Patient_Status]","0cbbba8a":"data_under['Tumour_Stage'] = [0.75 if each == \"I\" else 2  for each  in data_under.Tumour_Stage]","f0ac44b7":"data_under","3ab3a684":"y1 = data_under['Patient_Status']","78965024":"data_under.drop(['Patient_Status'],axis=1,inplace=True)","ad5130a5":"x1=data_under","d3a1da45":"x1","d27ae4fc":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\n\n# split data train 70% and test 30%\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.30, random_state=42)\n\n#random forest classifier with n_estimators=10 (default)\nclf_rf = RandomForestClassifier(random_state=42)      \nclr_rf = clf_rf.fit(x_train,y_train)\nclr = clr_rf.predict(x_test)\nac = accuracy_score(y_test,clf_rf.predict(x_test))*100\nprint('Accuracy is: ',ac)\nprint(classification_report(y_test,clr, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\ncm = confusion_matrix(y_test,clf_rf.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","be778393":"import xgboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import metrics\nfrom sklearn.metrics import recall_score\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.30, random_state=42)\nxgb = xgboost.XGBClassifier(earning_rate=0.009, n_estimators=350, subsample=0.8, max_depth=7)\nxgb.fit(x_train,y_train)\nprediction_xgb = xgb.predict(x_test)\nprint(classification_report(y_test, prediction_xgb, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nlr_auc=metrics.plot_roc_curve(xgb, x_test, y_test)\n","3b1c0b3a":"print('Accuracy of XGB model is {}'.format(accuracy_score(y_test,prediction_xgb)*100))","202ec981":"cm = confusion_matrix(y_test,xgb.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","01e1c14e":"from sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score,cross_val_predict\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.30,random_state=42 )\nfor i in range(1,16):\n    neigh = KNeighborsClassifier(n_neighbors=i)\n    cv = RepeatedKFold(n_splits=10, n_repeats=10, random_state=42)\n    scores = cross_val_score(neigh, x_test, y_test, scoring='accuracy', cv=cv)\n    print('k=%d : %.3f' % (i, (np.mean(scores))))","13ee931e":"from sklearn.linear_model import SGDClassifier\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.30, random_state=42)\nclassify = SGDClassifier()\nclassify.fit(x_train, y_train)\n\n\nprediction = classify.predict(x_test)\nprint(classification_report(y_test, prediction, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nmetrics.plot_roc_curve(classify, x_test, y_test)\n\n","f7126d6b":"print('Accuracy of SGDClassifier is {}'.format(accuracy_score(y_test,prediction)*100))","cdd9da11":"from sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nx_train, x_test, y_train, y_test = train_test_split(x1, y1, test_size=0.30, random_state=42)\ncl = SVC(kernel='linear')\ncl.fit(x_train, y_train)\npred = cl.predict(x_test)\nprint(classification_report(y_test, pred, \n                            target_names = ['Dead(Class 0)','Alive(Class 1)']))\nmetrics.plot_roc_curve(cl, x_test, y_test)\n\n","06e019ed":"print('Accuracy of SVM is {}'.format(accuracy_score(y_test,pred)*100))","ceef8228":"cm = confusion_matrix(y_test,cl.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","86d05c44":"# Importing Real Breast Cancer data set","4608b0d1":"**Taking only female data**","425bef01":"# Visualization of Data","25d91c50":"# Conclusion After Under-Sampling","276eb04e":"# Conclusion ","8ad2d3fe":"**Accuracy of Random Forest = 79.7% after 10 epochs**","31d159c7":"Stochastic Gradient Descent with an **Highest Accuracy of 80.89%.** But when we see Confusion matrix of XG boost we see it tough for Algo to predict Alive patient because data set is uneven so we do under sampling which will result in less accuracy but it will predict both class.","e62376fe":"# Classification Technic","c0e55069":"SVM (Linear) with the **highest Accuracy of 68.42%**","2fe88af3":"** Converting all the data which are Alphabets**","b650c611":"# **Under Sampling**","0ee7e331":"# **PRE-Processing**"}}