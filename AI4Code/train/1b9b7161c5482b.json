{"cell_type":{"9694148e":"code","4944cfab":"code","e6959607":"code","b02b49d5":"code","6cd718bb":"code","41e15ad7":"code","ea3388e8":"code","ee5dd8b3":"code","53e66f4b":"code","7232a63f":"code","4c737d00":"code","2660aef4":"code","aa0a14a7":"code","d719fbe6":"code","11764252":"code","d193430f":"code","25ea8bc4":"code","6c2e99ea":"code","9ce77e57":"code","21832cba":"code","7a1986b7":"code","9ad52588":"code","d2dd1237":"code","57753a88":"code","df68f8dd":"code","3d9cd4e5":"code","1dd2b708":"code","7e668ed4":"code","4e8f9a92":"code","852f8df2":"code","8a79a4c6":"code","260504b5":"code","11de396a":"code","a2f02c5e":"code","530a2982":"code","a195ef8e":"code","2eb551c8":"code","9ab74d0f":"code","a1b8f95a":"code","2b3ebedb":"code","99b600f3":"code","f1bbbec9":"code","b305d81d":"markdown","965ecedd":"markdown","ac1da55f":"markdown","d33fc03a":"markdown","b0982d78":"markdown","f1416e1d":"markdown","2c71fec1":"markdown","7135bb58":"markdown","e081fb9d":"markdown","983fe630":"markdown","5cc72d53":"markdown","65e7e721":"markdown","6dd9fc8b":"markdown","7319c0c6":"markdown","b8d4d6f5":"markdown","a92ba831":"markdown","7b08fc6c":"markdown","cb98b110":"markdown","391395fd":"markdown","7650efee":"markdown","689dfc6c":"markdown"},"source":{"9694148e":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport time\nimport re\nimport pickle","4944cfab":"reviews = pd.read_csv(\"..\/input\/amazon-fine-food-reviews\/Reviews.csv\")\nreviews.head()","e6959607":"reviews = reviews[['Text','Summary']]\nreviews.head()","b02b49d5":"reviews.shape","6cd718bb":"reviews = reviews.drop_duplicates(subset=['Summary'], keep='last')\nreviews.shape","41e15ad7":"#Random shuffling for sample balancing & keeping only 55104 , it's a good sample size for training and it's divisible by 64\n#64 is the batch size i will use\nreviews = reviews.sample(frac = 1)\nreviews = reviews[:55104]\nreviews.shape","ea3388e8":"#making sure that all data are strings\nreviews.Summary = reviews.Summary.apply(lambda x: str(x) )\nreviews.Text = reviews.Text.apply(lambda x: str(x) )","ee5dd8b3":"document = reviews['Text']\nsummary = reviews['Summary']","53e66f4b":"# For recognizing the start and end of target sequences,\n# we pad them with start (\u201c<go>\u201d) and end (\u201c<stop>\u201d) tokens.\n# for decoder sequence\nsummary = summary.apply(lambda x: '<go> ' + x + ' <stop>')\nsummary.head()","7232a63f":"oov_token = '<unk>'\nfilters = '!\"#$%&()*+,-.\/:;=?@[\\\\]^_`{|}~\\t\\n'\n\ndocument_tokenizer = tf.keras.preprocessing.text.Tokenizer(oov_token=oov_token)\nsummary_tokenizer = tf.keras.preprocessing.text.Tokenizer(filters=filters, oov_token=oov_token)\n\ndocument_tokenizer.fit_on_texts(document)\nsummary_tokenizer.fit_on_texts(summary)\n\ninputs = document_tokenizer.texts_to_sequences(document)\ntargets = summary_tokenizer.texts_to_sequences(summary)\n","4c737d00":"encoder_vocab_size = len(document_tokenizer.word_index) + 1\ndecoder_vocab_size = len(summary_tokenizer.word_index) + 1\n\n# vocab_size\nencoder_vocab_size, decoder_vocab_size","2660aef4":"document_lengths = pd.Series([len(x.split()) for x in document])\nsummary_lengths = pd.Series([len(x.split()) for x in summary])","aa0a14a7":"document_lengths.describe()","d719fbe6":"summary_lengths.describe()","11764252":"# taking values of 75th percentile\nencoder_maxlen = 106\ndecoder_maxlen = 8","d193430f":"inputs = tf.keras.preprocessing.sequence.pad_sequences(inputs, maxlen=encoder_maxlen, padding='post', truncating='post')\ntargets = tf.keras.preprocessing.sequence.pad_sequences(targets, maxlen=decoder_maxlen, padding='post', truncating='post')","25ea8bc4":"inputs = tf.cast(inputs, dtype=tf.int32)\ntargets = tf.cast(targets, dtype=tf.int32)","6c2e99ea":"BUFFER_SIZE = 20000\nBATCH_SIZE = 64\n\ndataset = tf.data.Dataset.from_tensor_slices((inputs, targets)).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)","9ce77e57":"def get_angles(position, i, d_model):\n    angle_rates = 1 \/ np.power(10000, (2 * (i \/\/ 2)) \/ np.float32(d_model))\n    return position * angle_rates\n  \ndef positional_encoding(position, d_model):\n    angle_rads = get_angles(\n        np.arange(position)[:, np.newaxis],\n        np.arange(d_model)[np.newaxis, :],\n        d_model\n    )\n\n    # apply sin to even indices in the array; 2i\n    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n\n    # apply cos to odd indices in the array; 2i+1\n    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n\n    pos_encoding = angle_rads[np.newaxis, ...]\n\n    return tf.cast(pos_encoding, dtype=tf.float32)","21832cba":"def create_padding_mask(seq):\n    seq = tf.cast(tf.math.equal(seq, 0), tf.float32)\n    return seq[:, tf.newaxis, tf.newaxis, :]\n\n  \ndef create_look_ahead_mask(size):\n    mask = 1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)\n    return mask\n","7a1986b7":"def scaled_dot_product_attention(q, k, v, mask):\n    matmul_qk = tf.matmul(q, k, transpose_b=True)\n\n    dk = tf.cast(tf.shape(k)[-1], tf.float32)\n    scaled_attention_logits = matmul_qk \/ tf.math.sqrt(dk)\n\n    if mask is not None:\n        scaled_attention_logits += (mask * -1e9)  \n\n    attention_weights = tf.nn.softmax(scaled_attention_logits, axis=-1)\n\n    output = tf.matmul(attention_weights, v)\n    return output, attention_weights\n","9ad52588":"class MultiHeadAttention(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads):\n        super(MultiHeadAttention, self).__init__()\n        self.num_heads = num_heads\n        self.d_model = d_model\n\n        assert d_model % self.num_heads == 0\n\n        self.depth = d_model \/\/ self.num_heads\n\n        self.wq = tf.keras.layers.Dense(d_model)\n        self.wk = tf.keras.layers.Dense(d_model)\n        self.wv = tf.keras.layers.Dense(d_model)\n\n        self.dense = tf.keras.layers.Dense(d_model)\n        \n    def split_heads(self, x, batch_size):\n        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))\n        return tf.transpose(x, perm=[0, 2, 1, 3])\n    \n    def call(self, v, k, q, mask):\n        batch_size = tf.shape(q)[0]\n\n        q = self.wq(q)\n        k = self.wk(k)\n        v = self.wv(v)\n\n        q = self.split_heads(q, batch_size)\n        k = self.split_heads(k, batch_size)\n        v = self.split_heads(v, batch_size)\n\n        scaled_attention, attention_weights = scaled_dot_product_attention(\n            q, k, v, mask)\n\n        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])\n\n        concat_attention = tf.reshape(scaled_attention, (batch_size, -1, self.d_model))\n        output = self.dense(concat_attention)\n            \n        return output, attention_weights","d2dd1237":"def point_wise_feed_forward_network(d_model, dff):\n    return tf.keras.Sequential([\n        tf.keras.layers.Dense(dff, activation='relu'),\n        tf.keras.layers.Dense(d_model)\n    ])","57753a88":"class EncoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        super(EncoderLayer, self).__init__()\n\n        self.mha = MultiHeadAttention(d_model, num_heads)\n        self.ffn = point_wise_feed_forward_network(d_model, dff)\n\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n    \n    def call(self, x, training, mask):\n        attn_output, _ = self.mha(x, x, x, mask)\n        attn_output = self.dropout1(attn_output, training=training)\n        out1 = self.layernorm1(x + attn_output)\n\n        ffn_output = self.ffn(out1)\n        ffn_output = self.dropout2(ffn_output, training=training)\n        out2 = self.layernorm2(out1 + ffn_output)\n\n        return out2","df68f8dd":"class DecoderLayer(tf.keras.layers.Layer):\n    def __init__(self, d_model, num_heads, dff, rate=0.1):\n        super(DecoderLayer, self).__init__()\n\n        self.mha1 = MultiHeadAttention(d_model, num_heads)\n        self.mha2 = MultiHeadAttention(d_model, num_heads)\n\n        self.ffn = point_wise_feed_forward_network(d_model, dff)\n\n        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n        self.layernorm3 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n\n        self.dropout1 = tf.keras.layers.Dropout(rate)\n        self.dropout2 = tf.keras.layers.Dropout(rate)\n        self.dropout3 = tf.keras.layers.Dropout(rate)\n    \n    \n    def call(self, x, enc_output, training, look_ahead_mask, padding_mask):\n        attn1, attn_weights_block1 = self.mha1(x, x, x, look_ahead_mask)\n        attn1 = self.dropout1(attn1, training=training)\n        out1 = self.layernorm1(attn1 + x)\n\n        attn2, attn_weights_block2 = self.mha2(enc_output, enc_output, out1, padding_mask)\n        attn2 = self.dropout2(attn2, training=training)\n        out2 = self.layernorm2(attn2 + out1)\n\n        ffn_output = self.ffn(out2)\n        ffn_output = self.dropout3(ffn_output, training=training)\n        out3 = self.layernorm3(ffn_output + out2)\n\n        return out3, attn_weights_block1, attn_weights_block2","3d9cd4e5":"class Encoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size, maximum_position_encoding, rate=0.1):\n        super(Encoder, self).__init__()\n\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(input_vocab_size, d_model)\n        self.pos_encoding = positional_encoding(maximum_position_encoding, self.d_model)\n\n        self.enc_layers = [EncoderLayer(d_model, num_heads, dff, rate) for _ in range(num_layers)]\n\n        self.dropout = tf.keras.layers.Dropout(rate)\n        \n    def call(self, x, training, mask):\n        seq_len = tf.shape(x)[1]\n\n        x = self.embedding(x)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n        x += self.pos_encoding[:, :seq_len, :]\n\n        x = self.dropout(x, training=training)\n    \n        for i in range(self.num_layers):\n            x = self.enc_layers[i](x, training, mask)\n    \n        return x","1dd2b708":"class Decoder(tf.keras.layers.Layer):\n    def __init__(self, num_layers, d_model, num_heads, dff, target_vocab_size, maximum_position_encoding, rate=0.1):\n        super(Decoder, self).__init__()\n\n        self.d_model = d_model\n        self.num_layers = num_layers\n\n        self.embedding = tf.keras.layers.Embedding(target_vocab_size, d_model)\n        self.pos_encoding = positional_encoding(maximum_position_encoding, d_model)\n\n        self.dec_layers = [DecoderLayer(d_model, num_heads, dff, rate) for _ in range(num_layers)]\n        self.dropout = tf.keras.layers.Dropout(rate)\n    \n    def call(self, x, enc_output, training, look_ahead_mask, padding_mask):\n        seq_len = tf.shape(x)[1]\n        attention_weights = {}\n\n        x = self.embedding(x)\n        x *= tf.math.sqrt(tf.cast(self.d_model, tf.float32))\n        x += self.pos_encoding[:, :seq_len, :]\n\n        x = self.dropout(x, training=training)\n\n        for i in range(self.num_layers):\n            x, block1, block2 = self.dec_layers[i](x, enc_output, training, look_ahead_mask, padding_mask)\n\n            attention_weights['decoder_layer{}_block1'.format(i+1)] = block1\n            attention_weights['decoder_layer{}_block2'.format(i+1)] = block2\n    \n        return x, attention_weights","7e668ed4":"class Transformer(tf.keras.Model):\n    def __init__(self, num_layers, d_model, num_heads, dff, input_vocab_size, target_vocab_size, pe_input, pe_target, rate=0.1):\n        super(Transformer, self).__init__()\n\n        self.encoder = Encoder(num_layers, d_model, num_heads, dff, input_vocab_size, pe_input, rate)\n\n        self.decoder = Decoder(num_layers, d_model, num_heads, dff, target_vocab_size, pe_target, rate)\n\n        self.final_layer = tf.keras.layers.Dense(target_vocab_size)\n    \n    def call(self, inp, tar, training, enc_padding_mask, look_ahead_mask, dec_padding_mask):\n        enc_output = self.encoder(inp, training, enc_padding_mask)\n\n        dec_output, attention_weights = self.decoder(tar, enc_output, training, look_ahead_mask, dec_padding_mask)\n\n        final_output = self.final_layer(dec_output)\n\n        return final_output, attention_weights","4e8f9a92":"# hyper-params\nnum_layers = 4\nd_model = 128\ndff = 512\nnum_heads = 8\nEPOCHS = 20","852f8df2":"class CustomSchedule(tf.keras.optimizers.schedules.LearningRateSchedule):\n    def __init__(self, d_model, warmup_steps=4000):\n        super(CustomSchedule, self).__init__()\n\n        self.d_model = d_model\n        self.d_model = tf.cast(self.d_model, tf.float32)\n\n        self.warmup_steps = warmup_steps\n    \n    def __call__(self, step):\n        arg1 = tf.math.rsqrt(step)\n        arg2 = step * (self.warmup_steps ** -1.5)\n\n        return tf.math.rsqrt(self.d_model) * tf.math.minimum(arg1, arg2)","8a79a4c6":"learning_rate = CustomSchedule(d_model)\n\noptimizer = tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-9)","260504b5":"loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True, reduction='none')","11de396a":"def loss_function(real, pred):\n    mask = tf.math.logical_not(tf.math.equal(real, 0))\n    loss_ = loss_object(real, pred)\n\n    mask = tf.cast(mask, dtype=loss_.dtype)\n    loss_ *= mask\n\n    return tf.reduce_sum(loss_)\/tf.reduce_sum(mask)","a2f02c5e":"train_loss = tf.keras.metrics.Mean(name='train_loss')","530a2982":"transformer = Transformer(\n    num_layers, \n    d_model, \n    num_heads, \n    dff,\n    encoder_vocab_size, \n    decoder_vocab_size, \n    pe_input=encoder_vocab_size, \n    pe_target=decoder_vocab_size,\n)","a195ef8e":"def create_masks(inp, tar):\n    enc_padding_mask = create_padding_mask(inp)\n    dec_padding_mask = create_padding_mask(inp)\n\n    look_ahead_mask = create_look_ahead_mask(tf.shape(tar)[1])\n    dec_target_padding_mask = create_padding_mask(tar)\n    combined_mask = tf.maximum(dec_target_padding_mask, look_ahead_mask)\n  \n    return enc_padding_mask, combined_mask, dec_padding_mask","2eb551c8":"checkpoint_path = \".\/checkpoints\"\n\nckpt = tf.train.Checkpoint(transformer=transformer, optimizer=optimizer)\n\nckpt_manager = tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep=5)\n\nif ckpt_manager.latest_checkpoint:\n    ckpt.restore(ckpt_manager.latest_checkpoint)\n    print ('Latest checkpoint restored!!')","9ab74d0f":"@tf.function\ndef train_step(inp, tar):\n    tar_inp = tar[:, :-1]\n    tar_real = tar[:, 1:]\n\n    enc_padding_mask, combined_mask, dec_padding_mask = create_masks(inp, tar_inp)\n\n    with tf.GradientTape() as tape:\n        predictions, _ = transformer(\n            inp, tar_inp, \n            True, \n            enc_padding_mask, \n            combined_mask, \n            dec_padding_mask\n        )\n        loss = loss_function(tar_real, predictions)\n\n    gradients = tape.gradient(loss, transformer.trainable_variables)    \n    optimizer.apply_gradients(zip(gradients, transformer.trainable_variables))\n\n    train_loss(loss)","a1b8f95a":"for epoch in range(EPOCHS):\n    start = time.time()\n\n    train_loss.reset_states()\n  \n    for (batch, (inp, tar)) in enumerate(dataset):\n        train_step(inp, tar)\n    \n        # 55k samples\n        # we display 3 batch results -- 0th, middle and last one (approx)\n        # 55k \/ 64 ~ 858; 858 \/ 2 = 429\n        if batch % 429 == 0:\n            print ('Epoch {} Batch {} Loss {:.4f}'.format(epoch + 1, batch, train_loss.result()))\n      \n    if (epoch + 1) % 5 == 0:\n        ckpt_save_path = ckpt_manager.save()\n        print ('Saving checkpoint for epoch {} at {}'.format(epoch+1, ckpt_save_path))\n    \n    print ('Epoch {} Loss {:.4f}'.format(epoch + 1, train_loss.result()))\n\n    print ('Time taken for 1 epoch: {} secs\\n'.format(time.time() - start))","2b3ebedb":"def evaluate(input_document):\n    input_document = document_tokenizer.texts_to_sequences([input_document])\n    input_document = tf.keras.preprocessing.sequence.pad_sequences(input_document,\n                                                                   maxlen=encoder_maxlen, padding='post',\n                                                                   truncating='post')\n\n    encoder_input = tf.expand_dims(input_document[0], 0)\n\n    decoder_input = [summary_tokenizer.word_index[\"<go>\"]]\n    output = tf.expand_dims(decoder_input, 0)\n    \n    for i in range(decoder_maxlen):\n        enc_padding_mask, combined_mask, dec_padding_mask = create_masks(encoder_input, output)\n\n        predictions, attention_weights = transformer(\n            encoder_input, \n            output,\n            False,\n            enc_padding_mask,\n            combined_mask,\n            dec_padding_mask\n        )\n\n        predictions = predictions[: ,-1:, :]\n        predicted_id = tf.cast(tf.argmax(predictions, axis=-1), tf.int32)\n\n        if predicted_id == summary_tokenizer.word_index[\"<stop>\"]:\n            return tf.squeeze(output, axis=0), attention_weights\n\n        output = tf.concat([output, predicted_id], axis=-1)\n\n    return tf.squeeze(output, axis=0), attention_weights","99b600f3":"def summarize(input_document):\n    # not considering attention weights for now, can be used to plot attention heatmaps in the future\n    summarized = evaluate(input_document=input_document)[0].numpy()\n    summarized = np.expand_dims(summarized[1:], 0)  # not printing <go> token\n    return summary_tokenizer.sequences_to_texts(summarized)[0]  # since there is just one translated document","f1bbbec9":"summarize(\"I have bought several of the Vitality canned cat food products and\\\nhave found them all to be of good quality. The product looks more like a stew than a processed meat and\\\nit smells better.My Labrador is finicky and she appreciates this product better than  most..\")","b305d81d":"## Training","965ecedd":"### Transformer","ac1da55f":"### The Encoder and Decoder Blocks","d33fc03a":"### The Actual Encoder and Decoder\nHere we integrate N\u2093 Encoder and Decoder blocks respectively.","b0982d78":"Padding\/Truncating sequences for identical sequence lengths","f1416e1d":"### Scaled Dot-Product","2c71fec1":"### Inference\nPredicting one word at a time at the decoder and appending it to the output; then taking the complete sequence as an input to the decoder and repeating until maxlen or stop keyword appears","7135bb58":"### Training steps\n","e081fb9d":"Creating dataset pipeline","983fe630":"### Masks","5cc72d53":"# preprocessing for transformer","65e7e721":"### Checkpoints","6dd9fc8b":"## Building The Model","7319c0c6":"### Positional Encodings\n","b8d4d6f5":"### Adam optimizer with custom learning rate scheduling\n","a92ba831":"### Defining losses and other metrics","7b08fc6c":"## Create the Transformer\nTransformer consists of the encoder, decoder and a final linear layer. The output of the decoder is the input to the linear layer and its output is returned.","cb98b110":"### Point-wise Feed-Forward Network","391395fd":"## Multi-head attention","7650efee":"Obtaining insights on lengths for defining maxlen\n","689dfc6c":"### Masking\n"}}