{"cell_type":{"0ab3d3e9":"code","07780d8c":"code","b244fb19":"code","a4143d79":"code","72b34477":"code","3b51cf43":"code","d44c8251":"code","61ae37d7":"code","ed387445":"code","177fc37e":"code","a31874fa":"code","f7924008":"code","44bf58c2":"code","7757cc5d":"code","bbc5ed5e":"code","d46c27fd":"code","441d5bd2":"code","b079813d":"code","97c9ca7d":"code","a2c3b140":"code","43fa2ac9":"code","3335c2c6":"code","d653d0d7":"code","c7d94ba2":"code","ceee4d88":"code","58a1fab0":"code","248e46ca":"code","a4a690ed":"code","6b52e95c":"code","a95591e7":"code","94786ee0":"code","14b699f9":"code","b22d4f9c":"code","e36cfc7a":"code","991e8c4b":"code","6bb045b7":"code","66daf148":"code","96b23534":"code","a325ca68":"code","f98a0d5a":"code","9f3d20b1":"code","1415f214":"code","5d275216":"code","8b96f99c":"code","d475ac64":"code","3acedecc":"code","c61261cf":"markdown","5245aed9":"markdown","d9717faa":"markdown","a427787e":"markdown","bf562ff9":"markdown","2aeff618":"markdown","135cece1":"markdown","ed21f067":"markdown","7b34254f":"markdown","f5c721ac":"markdown","2005cedf":"markdown","bc8a40d5":"markdown","c40196d9":"markdown","37112776":"markdown","7becb764":"markdown","a8b3904c":"markdown","2a1c91c9":"markdown","6b698480":"markdown","388d5040":"markdown","a6e03405":"markdown","f765c905":"markdown","c47b1e25":"markdown","523f0462":"markdown","399bd50b":"markdown","47a1a6b9":"markdown","f99272f7":"markdown","a060da45":"markdown","307e8994":"markdown","0abeda54":"markdown","6744e44e":"markdown","ca510824":"markdown","03e98ecb":"markdown","fa4a68db":"markdown","498d864b":"markdown","63816851":"markdown","5f5391b8":"markdown","2346efea":"markdown","c9c15e01":"markdown","fe8317f8":"markdown","a87009b8":"markdown","57094ca7":"markdown","4672e7df":"markdown","efe61e6d":"markdown"},"source":{"0ab3d3e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib as plt\nimport seaborn as sns\nimport matplotlib.cm as cm\nimport matplotlib.colors as colors\nimport json\nimport requests\nimport ipywidgets as widgets\nfrom pandas.io.json import json_normalize\nfrom geopy.distance import great_circle\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07780d8c":"df_delhi = pd.read_csv('\/kaggle\/input\/delhi-neighborhood-data\/delhi_dataSet.csv',index_col = 'Unnamed: 0')","b244fb19":"df_delhi.head()","a4143d79":"df_delhi.shape","72b34477":"df_delhi.isnull().sum()","3b51cf43":"df_present = df_delhi.where(df_delhi['latitude'].isnull() == False)\ndf_present.dropna(subset = ['Borough','Neighborhood'],inplace=True)\ndf_present.reset_index(inplace=True)\ndf_present.drop(['index'], axis=1,inplace=True)\ndf_present.head()","d44c8251":"df_missing = df_delhi.where(df_delhi['latitude'].isnull() == True)\ndf_missing.dropna(subset = ['Borough','Neighborhood'],inplace=True)\ndf_missing.reset_index(inplace=True)\ndf_missing.drop(['index'], axis=1,inplace=True)\ndf_missing.head()","61ae37d7":"df_missing['Neighborhood'].replace('Sundar Nagar[1]' ,'Sundar Nagar',inplace=True)\ndf_missing.head()","ed387445":"# defining series lat and lng for assigning the columns\nlat = pd.Series([],dtype=float)\nlng = pd.Series([],dtype=float)\n\n#Assigning the data\n\n#Bugum Pur\nlat[0], lng[0] = 28.727248, 77.064975 \n\n#Rohini Sub City\nlat[1],lng[1] = 28.741073, 77.082574\n\n#Ghantewala is a famous sweet shop, that got closed, so I am dropping this data\ndf_missing.drop([2],inplace=True)\n\n#Gulabi Bagh\nlat[3],lng[3] = 28.672190, 77.191620\n\n#Sadar Bazaar \nlat[4],lng[4] = 28.659395, 77.212782\n\n#Tees Hazari\nlat[5],lng[5] = 28.665682, 77.216413\n\n#New Usmanpur\nlat[6],lng[6] = 28.677737, 77.256637\n\n#Sadatpur\nlat[7],lng[7] = 28.726746, 77.261097\n\n#Rajender Nagar\nlat[8],lng[8] = 28.641024, 77.185038\n\n#Sadar Bazaar\nlat[9],lng[9] = 28.657305, 77.212750\n\n#Laxmibai Nagar\nlat[10],lng[10] = 28.575276, 77.209630\n\n#Silampur\nlat[11],lng[11] = 28.664181, 77.270916\n\n#Jamroodpur Village\nlat[12],lng[12] = 28.557592, 77.237061\n\n#Kotla Mubarakpur\nlat[13],lng[13] = 28.575783, 77.227396\n\n#Pulpehaladpur\nlat[14],lng[14] = 28.499831, 77.290347\n\n#Sundar Nagar\nlat[15],lng[15] = 28.601985, 77.243725\n\n#Dabri\nlat[16],lng[16] = 28.611823, 77.087268\n\n#Dwarka Sub City\nlat[17],lng[17] = 28.582154, 77.049576\n\n#Sagar Pur\nlat[18],lng[18] = 28.605670, 77.099189\n\n#Partap Nagar\ndf_missing.drop([19],inplace=True)\n\n#Tihar Village\nlat[20],lng[20] = 28.634353, 77.107331\n\n#Uttam Nagar\nlat[21],lng[21] = 28.619573, 77.054916","177fc37e":"df_missing['latitude_mod'] = lat\ndf_missing['longitude_mod'] = lng","a31874fa":"df_missing.reset_index(inplace=True)\ndf_missing.drop(columns=['latitude', 'longitude','index'],inplace=True)\ndf_missing.rename(columns={'latitude_mod' : 'latitude' , 'longitude_mod' : 'longitude' }, inplace=True)\ndf_missing.head()","f7924008":"frames = [df_missing,df_present]\ndf = pd.concat(frames)\ndf.head()","44bf58c2":"df2 = df[df['latitude'] < 30]","7757cc5d":"df1 = df[df['latitude']>30]\ndf1.reset_index(inplace = True)\ndf1.drop(['index'],axis=1,inplace=True)","bbc5ed5e":"cor_lat = pd.Series([],dtype = float)\ncor_lng = pd.Series([],dtype = float)\n\n#Assigning the data\n\n#Dhaka\ncor_lat[0], cor_lng[0] = 28.709278, 77.206249\n\n#Model Town\ncor_lat[1],cor_lng[1] = 28.720445, 77.192263\n\n#Pul Bangash\ncor_lat[2], cor_lng[2] = 28.666822, 77.206229\n\n#Shastri Nagar , ND\ncor_lat[3],cor_lng[3] = 28.675370, 77.181173\n\n#Gandhi Nagar\ncor_lat[4], cor_lng[4] = 28.666734, 77.274094 \n\n#Shastri Nagar , ED\ncor_lat[5],cor_lng[5] = 28.647588, 77.273977\n\n#Govindpuri\ncor_lat[6], cor_lng[6] = 28.535112, 77.263185 \n\n#Kalkaji\ncor_lat[7],cor_lng[7] = 28.540973, 77.259523\n\n#Ashok Nagar\ncor_lat[8], cor_lng[8] = 28.637112, 77.102459\n\n#Nehru Nagar\ncor_lat[9],cor_lng[9] = 28.663061, 77.169519","d46c27fd":"df1['latitude_mod'] = cor_lat\ndf1['longitude_mod'] = cor_lng\ndf1.drop(['latitude','longitude'],axis=1,inplace=True)\ndf1.rename(columns={'latitude_mod' : 'latitude' , 'longitude_mod' : 'longitude' }, inplace=True)\ndf1.head()","441d5bd2":"frames = [df1,df2]\ndf = pd.concat(frames)\ndf.reset_index(inplace=True)\ndf.drop(['index'],axis=1,inplace=True)\ndf.head()","b079813d":"df.shape\n#the dataframe has 183 rows with 4 columns","97c9ca7d":"df.columns\n#the column names are in order","a2c3b140":"df.isnull().sum()\n#there are no missing values","43fa2ac9":"CLIENT_ID = 'HSKSPYIMS3JWAL4IJ3IWQT1MOLT04ITR1UTIPF3OYZ220JXF' # Foursquare ID\nCLIENT_SECRET = 'YS1P0XFBMDIERG42KRRFGQHG4AYWYC4LBNIKTWLFXBLEKDKN' # Foursquare Secret\nVERSION = '20200515' # Foursquare API version\n\nprint('Your credentails:')\nprint('CLIENT_ID: ' + CLIENT_ID)\nprint('CLIENT_SECRET:' + CLIENT_SECRET)","3335c2c6":"def get_category_type(row):\n    try:\n        categories_list = row['categories']\n    except:\n        categories_list = row['venue.categories']\n        \n    if len(categories_list) == 0:\n        return None\n    else:\n        return categories_list[0]['name']","d653d0d7":"df_venues = pd.DataFrame(columns = ['Venue Category'])","c7d94ba2":"for j in range(0,183):\n    \n    try:\n        lat,lng = df.iloc[j][2] , df.iloc[j][3]\n        TIME = 'any'\n        radius = 1000\n        LIMIT = 50\n        url =  'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}&time={}&day={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT,\n            TIME,\n            TIME)\n\n        results = requests.get(url).json()\n        venues = results['response']['groups'][0]['items']\n        nearby_venues = pd.json_normalize(venues)\n        filtered_columns = ['venue.name', 'venue.categories']\n        nearby_venues =nearby_venues.loc[:, filtered_columns]\n        nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n        nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n        \n        l = nearby_venues.shape[0]    \n        for i in range(0,l):\n            df_venues = df_venues.append({'Venue Category' : nearby_venues.iloc[i][1]} , \n                                           ignore_index=True)\n    \n    except:\n        \n        continue\n\n","ceee4d88":"df_venues['frequency'] = 1\ndf_venues = df_venues.groupby('Venue Category').count()","58a1fab0":"df_venues.head()","248e46ca":"df_venues.drop(['ATM','Airport','Airport Terminal','Bus Station','Campground','College Cafeteria','Cricket Ground',\n                'Farmers Market','Historic Site','History Museum','IT Services','Lake','Light Rail Station',\n                'Molecular Gastronomy Restaurant','Museum','Park','Pool','Road',\n                'Stadium','Temple','Tourist Information Center','Trail','Train Station','University'], axis = 0,inplace = True)","a4a690ed":"df_venues.drop(['Metro Station','Other Great Outdoors','Nightlife Spot','Farm','Track','Astrologer','Zoo'], axis= 0,inplace= True)","6b52e95c":"df_venues.sort_values(['frequency'],axis=0,ascending = False,inplace=True)\ndf_venues.reset_index(inplace=True)\ndf_venues.head(10)","a95591e7":"#Merging Cafe and Coffee Shop into one and re-sorting the data\n\ndf_venues.replace({'Caf\u00e9' : 'Coffee Shop' , 202 : (202+132)} , inplace = True)\ndf_venues.drop([4],inplace=True)\ndf_venues.sort_values(['frequency'],axis=0,ascending = False,inplace=True)\ndf_venues.reset_index(inplace=True)\ndf_venues.drop(['index'],axis=1,inplace = True)\ndf_venues","94786ee0":"df_venues.shape\n# The dataframe has 182 rows with 2 columns","14b699f9":"df_venues.isnull().sum().sum()\n# The dataframe contains no missing values","b22d4f9c":"bor = 'North West Delhi'\ndrop_down = widgets.Dropdown(options=df['Borough'].unique(),\n                                description='Borough',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global bor\n    bor = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","e36cfc7a":"opt = []\nfor i in range(0,173):\n    if (df.iloc[i][0] == bor):\n        opt.append(df.iloc[i][1])\n\nngbor = ''\ndrop_down = widgets.Dropdown(options=opt,\n                                description='Neighborhood',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global ngbor\n    ngbor = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","991e8c4b":"for i in range(0,df.shape[0]):\n    if (df.iloc[i][0] == bor and df.iloc[i][1] == ngbor):\n        ven_lat = df.iloc[i][2]\n        ven_lng = df.iloc[i][3]","6bb045b7":"try:\n    cnt = 0\n    radius = 1000\n    LIMIT = 50\n    url =  'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n        CLIENT_ID, \n        CLIENT_SECRET, \n        VERSION, \n        ven_lat, \n        ven_lng, \n        radius, \n        LIMIT)\n\n    results = requests.get(url).json()\n    venues = results['response']['groups'][0]['items']\n    nearby_venues = pd.json_normalize(venues)\n    filtered_columns = ['venue.name', 'venue.categories']\n    nearby_venues =nearby_venues.loc[:, filtered_columns]\n    nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n    nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n\nexcept:\n    \n    cnt = 1","66daf148":"if(cnt == 0):\n    \n    ven_business = nearby_venues.categories.unique()\n    rcs = []\n    counter = 0\n\n    l = df_venues.shape[0]\n    vl = len(ven_business)\n    for i in range(0,l):\n        for j in range(0,vl):\n            if(df_venues.iloc[i][0] == ven_business[j]):\n                counter = 1 \n                break\n\n        if(counter == 0):\n            rcs.append(df_venues.iloc[i][0])\n        else:\n            counter = 0\n\nelse:\n    \n    cnt = 0\n    rcs = df_venues['Venue Category']","96b23534":"print(\"For the user selected neighborhood at - \" + bor + \", \" + ngbor + \" Following are the 10 best reccomendations for new business ideas that could be set up - \")\nprint()\n\nfor i in range(0,10):\n    print(rcs[i])","a325ca68":"a = 'Popular business ideas'\nb = 'Facny business ideas'\n\nchoice = a\ndrop_down = widgets.Dropdown(options= [a,b],\n                                description='Choose - ',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global choice\n    choice = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","f98a0d5a":"if(choice == a):\n    chc = df_venues[\"Venue Category\"][:25]\nelse:\n    chc = df_venues['Venue Category'][:-25:-1]","9f3d20b1":"b_choice = ''\ndrop_down = widgets.Dropdown(options= chc,\n                                description='Choose - ',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global b_choice\n    b_choice = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","1415f214":"bor = 'North West Delhi'\ndrop_down = widgets.Dropdown(options=df['Borough'].unique(),\n                                description='Borough',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global bor\n    bor = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","5d275216":"opt = []\nfor i in range(0,df.shape[0]):\n    if (df.iloc[i][0] == bor):\n        opt.append(df.iloc[i][1])\n\nngbor = ''\ndrop_down = widgets.Dropdown(options=opt,\n                                description='Neighborhood',\n                                disabled=False)\n\ndef dropdown_handler(change):\n    global ngbor\n    ngbor = change.new\n\ndrop_down.observe(dropdown_handler, names='value')\ndisplay(drop_down)","8b96f99c":"df_dis = pd.DataFrame(columns = ['Neighborhood','Distance in km' , 'latitude' , 'longitude'])\n\nfor i in range(0,df.shape[0]):\n    if (df.iloc[i][0] == bor and df.iloc[i][1] == ngbor):\n        ven_lat = df.iloc[i][2]\n        ven_lng = df.iloc[i][3]","d475ac64":"dis = []\nlat = []\nlng = []\nneighbor = pd.Series(opt,dtype = object)\ndf_dis['Neighborhood'] = neighbor\n\nfor i in range(0,df.shape[0]):\n    if(df.iloc[i][0] == bor):\n        it_neighborhood = (df.iloc[i][2] , df.iloc[i][3])\n        lat.append(df.iloc[i][2])\n        lng.append(df.iloc[i][3])\n        selected_neighborhood = (ven_lat, ven_lng) \n        dist = great_circle(it_neighborhood,selected_neighborhood).km\n        dist = format(dist, '.3f')\n        dis.append(dist)\n\ngeo_dist = pd.Series(dis,dtype = float)\ndf_dis['Distance in km'] = geo_dist\n\ndf_dis['latitude'] = pd.Series(lat,dtype=float)\ndf_dis['longitude'] = pd.Series(lng,dtype=float)\n        \ndf_dis.sort_values(['Distance in km'],axis = 0,ascending = True , inplace = True)\ndf_dis.reset_index(inplace = True)\ndf_dis.drop(['index'],axis=1,inplace=True)","3acedecc":"for j in range(0,df_dis.shape[0]):\n    \n    try:\n        counter = 0\n        radius = 1000\n        LIMIT = 50\n        ven_lat = df_dis.iloc[j][2]\n        ven_lng = df_dis.iloc[j][3]\n        url =  'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            ven_lat, \n            ven_lng, \n            radius, \n            LIMIT)\n\n        results = requests.get(url).json()\n        venues = results['response']['groups'][0]['items']\n        nearby_venues = pd.json_normalize(venues)\n        filtered_columns = ['venue.name', 'venue.categories']\n        nearby_venues =nearby_venues.loc[:, filtered_columns]\n        nearby_venues['venue.categories'] = nearby_venues.apply(get_category_type, axis=1)\n        nearby_venues.columns = [col.split(\".\")[-1] for col in nearby_venues.columns]\n        \n        ven_buss = pd.Series( (nearby_venues['categories'].unique()) ,dtype=object )\n        v_length = ven_buss.shape[0]\n        \n        for k in range(0,v_length):\n            if(b_choice == ven_buss[k]):\n                counter = 1\n                break\n        \n        if(counter == 0):\n            \n            print(\"The optimal place to start your business, \" + b_choice + \" is in - \" + df_dis.iloc[j][0] + \", \" + bor)\n            break\n        \n        \n    except:\n        \n        print(\"The optimal place to start your business, \" + b_choice + \" is in - \" + df_dis.iloc[j][0] + \", \" + bor)\n    ","c61261cf":"getting the latitude and longitude for the selected neighborhood","5245aed9":"Sorting the dataset to get the top venues","d9717faa":"Combining both the dataframes into a single dataframe.","a427787e":"Iterating through the data to get the set of all venue categories and storing it in a new dataframe","bf562ff9":"## Setting up the background data","2aeff618":"Choose the business","135cece1":"Verfying the data integrity of the final dataframe","ed21f067":"### Recommend a business according to the place of choice","7b34254f":"Choose the type of business  ","f5c721ac":"** We are done with the data cleaning, wrangling and preliminary Exploratory Data Analysis. Moving on the Foursquare API usage **","2005cedf":"The dataframe contains some incorrect values. Correcting them with the help of Google maps","bc8a40d5":"Manually using google maps and Open Street Maps to find the latitude and longitude of the places.\nThis process is being done manually because geopy doesn't do very well with locations of India. There are instances of incorrect data, so cleaning them is also required","c40196d9":"Arranging the data","37112776":"--------","7becb764":"There are 22 neighborhoods without latitude and longitude.","a8b3904c":"Manually dropping rows that are not business and cannot be independently set up","2a1c91c9":"Please select your Borough from the respective drop down list - ","6b698480":"Exploring the data to find missing values","388d5040":"--------","a6e03405":"-------------","f765c905":"## Using Foursquare API","c47b1e25":"Merging both the dataset together","523f0462":"**************************","399bd50b":"This project aims to provide new and upcoming business enthusiasts better options to leverage their capital in. This project uses DelhiNeighborhood dataset incorporated into kaggle by Kumar Shaswat, under the license CC BY-NC-SA 4.0. ","47a1a6b9":"Defining Foursquare API credentials","f99272f7":"comparing with the sorted dataset to find the best recommendations","a060da45":"Segregating the neighborhood without latitude and longitude data into a new dataframe and the rest into another dataframe","307e8994":"## Setting up the UI\/UX ","0abeda54":"### Recommend the optimal neighborhood for the business of choice","6744e44e":"Importing dependencies","ca510824":"There is a unwanted symbol set ( [1] ) in the 15th row. \nCleaning the data","03e98ecb":"Correcting the incorrect data","fa4a68db":"Reading the data","498d864b":"Defining a function the get the category of the venue","63816851":"Please select the Neighborhood from the drop down","5f5391b8":"Select your current borough and neighborhood.","2346efea":"-----------","c9c15e01":"using Foursquare API to get the existing business in the selected place ","fe8317f8":"Verifying the data integrity","a87009b8":"-------------------------------------------------------------------------------------     ","57094ca7":"------------------------------------------------------------------","4672e7df":"Dividing the dataframe into two parts - correct and incorrect","efe61e6d":"# ** Rec a Business **"}}