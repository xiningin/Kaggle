{"cell_type":{"3e01e2b2":"code","93fb3075":"code","e67cfbed":"code","54007a1b":"code","d4d33abb":"code","cec3ce07":"code","ddd90e7b":"code","0bed38e5":"code","9535f026":"code","869dd264":"code","80c99bc3":"code","941e11f6":"code","8730e920":"code","46fa2a2c":"code","21b82618":"code","91845b4a":"code","17756a69":"code","6e27deb1":"code","0d138084":"code","a80deb15":"code","59b63a30":"code","870a7038":"code","6f5321cb":"code","62780480":"code","7920e102":"code","f0fae473":"code","5088def8":"code","b1f053e4":"code","9e7f36e9":"code","ba0bb130":"code","7d170aa0":"code","00460e29":"code","a093e180":"code","29fc143f":"code","5f6eb8b9":"code","4cb03542":"code","29f0fc06":"markdown","be195e0d":"markdown","f0074690":"markdown","6d548e85":"markdown","8836f630":"markdown","c2e608da":"markdown","2caf06e4":"markdown","e2596f57":"markdown","da902adb":"markdown","24639274":"markdown","e904887d":"markdown","a7229807":"markdown","d6bdbb60":"markdown","76db8b02":"markdown","495a4c7b":"markdown","4d7a9e71":"markdown","e153d863":"markdown","7fa49ba9":"markdown","9bd05851":"markdown","ea94cc26":"markdown","f9d86b46":"markdown","c126d339":"markdown","ecedb5ab":"markdown","925fabd9":"markdown","4fc47f67":"markdown","6973d727":"markdown","9407444e":"markdown","de1798ee":"markdown","9b5c7225":"markdown","3eae9580":"markdown","b09cdf9d":"markdown","a8f5231b":"markdown","859b594d":"markdown","fbc00050":"markdown","97fbd032":"markdown","f13c274a":"markdown","1f647476":"markdown","80f229d6":"markdown","9892759b":"markdown"},"source":{"3e01e2b2":"# Untuk pengolahan data\nimport pandas as pd\nimport numpy as np\nfrom zipfile import ZipFile\nfrom pathlib import Path\n\n# Untuk visualisasi data\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nsns.set_palette('Set1')\nsns.set()\n\n# Untuk pemodelan\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Untuk menghilangkan warnings saat plotting seaborn\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Untuk mengupload file\nimport os","93fb3075":"# Upload semua dataset yang dipakai\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e67cfbed":"# Menyimpan masing-masing dataset kedalam variabel\n\nrating = pd.read_csv('\/kaggle\/input\/indonesia-tourism-destination\/tourism_rating.csv')\nplace = pd.read_csv('\/kaggle\/input\/indonesia-tourism-destination\/tourism_with_id.csv')\nuser = pd.read_csv('\/kaggle\/input\/indonesia-tourism-destination\/user.csv')","54007a1b":"# Melihat gambaran data place\n\nplace.head(2)","d4d33abb":"# Membuang kolom yang tidak dipakai\n\nplace = place.drop(['Unnamed: 11','Unnamed: 12'],axis=1)\nplace.head(2)","cec3ce07":"# Merubah data agar hanya dari Kota Bandung\n\nplace = place[place['City']=='Bandung']\nplace.head(2)","ddd90e7b":"place.info()","0bed38e5":"# Membuang kolom yang tidak dipakai\n\nplace = place.drop('Time_Minutes', axis=1)","9535f026":"# melihat gambaran data rating\n\nrating.head()","869dd264":"rating.info()","80c99bc3":"# Merubah data rating agar hanya berisi rating pada tempat wisata dari Kota Bandung\n\nrating = pd.merge(rating, place[['Place_Id']], how='right', on='Place_Id')\nrating.head()","941e11f6":"# Melihat ukuran dataset rating untuk Kota Bandung\n\nrating.shape","8730e920":"# Melihat gambaran data user\n\nuser.head()","46fa2a2c":"# Merubah data user agar hanya berisi user yang pernah megunjungi wisata di Kota Bandung\n\nuser = pd.merge(user, rating[['User_Id']], how='right', on='User_Id').drop_duplicates().sort_values('User_Id')\nuser.head()","21b82618":"# Melihat dataset user yang pernah memberi rating pada wisata di Kota Bandung\n\nuser.shape","91845b4a":"# Membuat dataframe berisi lokasi dengan jumlah rating terbanyak\ntop_10 = rating['Place_Id'].value_counts().reset_index()[0:10]\ntop_10 = pd.merge(top_10, place[['Place_Id','Place_Name']], how='left', left_on='index', right_on='Place_Id')\n\n# Membuat visualisasi wisata dengan jumlah rating terbanyak\nplt.figure(figsize=(8,5))\nsns.barplot('Place_Id_x', 'Place_Name', data=top_10)\nplt.title('Jumlah Tempat Wisata dengan Rating Terbanyak', pad=20)\nplt.ylabel('Jumlah Rating')\nplt.xlabel('Nama Lokasi')\nplt.show()","17756a69":"# Membuat visualisasi jumlah kategori wisata di Kota Bandung\n\nsns.countplot(y='Category', data=place)\nplt.title('Perbandingan Jumlah Kategori Wisata di Kota Bandung', pad=20)\nplt.show()","6e27deb1":"# Membuat visualisasi distribusi usia user\n\nplt.figure(figsize=(5,3))\nsns.boxplot(user['Age']);\nplt.title('Distribusi Usia User', pad=20)\nplt.show()","0d138084":"# Membuat visualisasi distribusi harga masuk tempat wisata\n\nplt.figure(figsize=(7,3))\nsns.boxplot(place['Price'])\nplt.title('Distribusi Harga Masuk Wisata di Kota Bandung', pad=20)\nplt.show()","a80deb15":"# Memfilter asal kota dari user\naskot = user['Location'].apply(lambda x : x.split(',')[0])\n\n# Visualisasi asal kota dari user\nplt.figure(figsize=(8,6))\nsns.countplot(y=askot)\nplt.title('Jumlah Asal Kota dari User')\nplt.show()","59b63a30":"# Membaca dataset untuk dilakukan encoding\n \ndf = rating.copy()\ndf.head()","870a7038":"def dict_encoder(col, data=df):\n\n  # Mengubah kolom suatu dataframe menjadi list tanpa nilai yang sama\n  unique_val = data[col].unique().tolist()\n\n  # Melakukan encoding value kolom suatu dataframe ke angka\n  val_to_val_encoded = {x: i for i, x in enumerate(unique_val)}\n\n  # Melakukan proses encoding angka ke value dari kolom suatu dataframe\n  val_encoded_to_val = {i: x for i, x in enumerate(unique_val)}\n  return val_to_val_encoded, val_encoded_to_val","6f5321cb":"# Encoding User_Id\nuser_to_user_encoded, user_encoded_to_user = dict_encoder('User_Id')\n\n# Mapping User_Id ke dataframe\ndf['user'] = df['User_Id'].map(user_to_user_encoded)","62780480":"# Encoding Place_Id\nplace_to_place_encoded, place_encoded_to_place = dict_encoder('Place_Id')\n\n# Mapping Place_Id ke dataframe place\ndf['place'] = df['Place_Id'].map(place_to_place_encoded)","7920e102":"# Mendapatkan jumlah user dan place\nnum_users, num_place = len(user_to_user_encoded), len(place_to_place_encoded)\n \n# Mengubah rating menjadi nilai float\ndf['Place_Ratings'] = df['Place_Ratings'].values.astype(np.float32)\n \n# Mendapatkan nilai minimum dan maksimum rating\nmin_rating, max_rating = min(df['Place_Ratings']), max(df['Place_Ratings'])\n \nprint(f'Number of User: {num_users}, Number of Place: {num_place}, Min Rating: {min_rating}, Max Rating: {max_rating}')","f0fae473":"# Mengacak dataset\ndf = df.sample(frac=1, random_state=42)\ndf.head(2)","5088def8":"# Membuat variabel x untuk mencocokkan data user dan place menjadi satu value\nx = df[['user', 'place']].values\n \n# Membuat variabel y untuk membuat rating dari hasil \ny = df['Place_Ratings'].apply(lambda x: (x - min_rating) \/ (max_rating - min_rating)).values\n \n# Membagi menjadi 80% data train dan 20% data validasi\ntrain_indices = int(0.8 * df.shape[0])\nx_train, x_val, y_train, y_val = (\n    x[:train_indices],\n    x[train_indices:],\n    y[:train_indices],\n    y[train_indices:]\n)","b1f053e4":"class RecommenderNet(tf.keras.Model):\n \n  # Insialisasi fungsi\n  def __init__(self, num_users, num_places, embedding_size, **kwargs):\n    super(RecommenderNet, self).__init__(**kwargs)\n    self.num_users = num_users\n    self.num_places = num_places\n    self.embedding_size = embedding_size\n    self.user_embedding = layers.Embedding( # layer embedding user\n        num_users,\n        embedding_size,\n        embeddings_initializer = 'he_normal',\n        embeddings_regularizer = keras.regularizers.l2(1e-6)\n    )\n    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias\n    self.places_embedding = layers.Embedding( # layer embeddings places\n        num_places,\n        embedding_size,\n        embeddings_initializer = 'he_normal',\n        embeddings_regularizer = keras.regularizers.l2(1e-6)\n    )\n    self.places_bias = layers.Embedding(num_places, 1) # layer embedding places bias\n \n  def call(self, inputs):\n    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1\n    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2\n    places_vector = self.places_embedding(inputs[:, 1]) # memanggil layer embedding 3\n    places_bias = self.places_bias(inputs[:, 1]) # memanggil layer embedding 4\n \n    dot_user_places = tf.tensordot(user_vector, places_vector, 2) \n \n    x = dot_user_places + user_bias + places_bias\n    \n    return tf.nn.sigmoid(x) # activation sigmoid","9e7f36e9":"model = RecommenderNet(num_users, num_place, 50) # inisialisasi model\n \n# model compile\nmodel.compile(\n    loss = tf.keras.losses.BinaryCrossentropy(),\n    optimizer = keras.optimizers.Adam(learning_rate=0.0004),\n    metrics=[tf.keras.metrics.RootMeanSquaredError()]\n)","ba0bb130":" class myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('val_root_mean_squared_error')<0.25):\n      print('Lapor! Metriks validasi sudah sesuai harapan')\n      self.model.stop_training = True","7d170aa0":"# Memulai training\n \nhistory = model.fit(\n    x = x_train,\n    y = y_train,\n    epochs = 100,\n    validation_data = (x_val, y_val),\n    callbacks = [myCallback()]\n)","00460e29":"# Menampilkan plot loss dan validation\n\nplt.plot(history.history['root_mean_squared_error'])\nplt.plot(history.history['val_root_mean_squared_error'])\nplt.title('model_metrics')\nplt.ylabel('root_mean_squared_error')\nplt.xlabel('epoch')\nplt.ylim(ymin=0, ymax=0.4)\nplt.legend(['train', 'test'], loc='center left')\nplt.show()","a093e180":"# Menyiapkan dataframe\nplace_df = place[['Place_Id','Place_Name','Category','Rating','Price']]\nplace_df.columns = ['id','place_name','category','rating','price']\ndf = rating.copy()","29fc143f":"# Mengambil sample user\nuser_id = df.User_Id.sample(1).iloc[0]\nplace_visited_by_user = df[df.User_Id == user_id]","5f6eb8b9":"# Membuat data lokasi yang belum dikunjungi user\nplace_not_visited = place_df[~place_df['id'].isin(place_visited_by_user.Place_Id.values)]['id'] \nplace_not_visited = list(\n    set(place_not_visited)\n    .intersection(set(place_to_place_encoded.keys()))\n)\n \nplace_not_visited = [[place_to_place_encoded.get(x)] for x in place_not_visited]\nuser_encoder = user_to_user_encoded.get(user_id)\nuser_place_array = np.hstack(\n    ([[user_encoder]] * len(place_not_visited), place_not_visited)\n)","4cb03542":"# Mengambil top 7 recommendation\nratings = model.predict(user_place_array).flatten()\ntop_ratings_indices = ratings.argsort()[-7:][::-1]\nrecommended_place_ids = [\n    place_encoded_to_place.get(place_not_visited[x][0]) for x in top_ratings_indices\n]\n \nprint('Daftar rekomendasi untuk: {}'.format('User ' + str(user_id)))\nprint('===' * 15,'\\n')\nprint('----' * 15)\nprint('Tempat dengan rating wisata paling tinggi dari user')\nprint('----' * 15)\n \ntop_place_user = (\n    place_visited_by_user.sort_values(\n        by = 'Place_Ratings',\n        ascending=False\n    )\n    .head(5)\n    .Place_Id.values\n)\n \nplace_df_rows = place_df[place_df['id'].isin(top_place_user)]\nfor row in place_df_rows.itertuples():\n    print(row.place_name, ':', row.category)\n\nprint('')\nprint('----' * 15)\nprint('Top 7 place recommendation')\nprint('----' * 15)\n \nrecommended_place = place_df[place_df['id'].isin(recommended_place_ids)]\nfor row, i in zip(recommended_place.itertuples(), range(1,8)):\n    print(i,'.', row.place_name, '\\n    ', row.category, ',', 'Harga Tiket Masuk ', row.price, ',', 'Rating Wisata ', row.rating,'\\n')\n\nprint('==='*15)","29f0fc06":"# Pendahuluan","be195e0d":"Sebelum bepergian, biasanya seseorang akan membuat rencana terlebih dahulu tentang lokasi yang akan dikunjungi dan waktu keberangkatannya. Hal ini dilakukan untuk perencanaan sebelum berwisata ke suatu Kota. \n\nKota Bandung memiliki daya tarik wisata yang cukup tinggi, namun dikutip dari humas.bandung.go.id\/ jumlah wisatawan ke Kota Bandung turun 50% pada tahun 2021. Tentunya angka ini wajar karena penyebaran Covid-19 yang mengkhawatirkan di Indonesia. \n\nUntuk periode Oktober 2021, sejumlah wisata di Kota Bandung sudah mulai beroperasi, ini akan menjadi momentum yang tepat untuk menggerakkan pariwisata kembali.\n\nPada projek ini, saya akan membuat sebuah sistem rekomendasi berbasis collaborative filtering untuk menampilkan top-n recommendation destinasi wisata di Kota Bandung berdasarkan data user, rating, dan place","f0074690":"#### 7.1 Menyiapkan DataFrame untuk Menampilkan Hasil Rekomendasi","6d548e85":"# Penutup","8836f630":"## 4. Eksplorasi Data","c2e608da":"* Seaborn : https:\/\/seaborn.pydata.org\/tutorial.html\n* Callback : https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/Callback\n* Lainnya:\n  * https:\/\/github.com\/AgungP88\/getloc-apps\/tree\/machine-learning\n  * https:\/\/www.kaggle.com\/ibtesama\/getting-started-with-a-movie-recommendation-system\n  * https:\/\/www.kaggle.com\/aprabowo\/indonesia-tourism-destination\n  * https:\/\/www.dicoding.com\/academies\/319","2caf06e4":"#### 6.2.1. Inisialisasi Fungsi","e2596f57":"### 5.1. Membuat Salinan Data rating","da902adb":"#### 6.2.3. Proses Training","24639274":"### 3.2 Eksplorasi Fitur-fitur pada Data","e904887d":"## 3. Data Understanding","a7229807":"#### 3.2.1. Data place","d6bdbb60":"### 6.1. Membagi data train dan test","76db8b02":"#### 6.2.2. Inisialisasi Model","495a4c7b":"## *Referensi*","4d7a9e71":"# Alur Proses","e153d863":"Model untuk menampilkan top 7 rekomendasi tempat wisata telah selesai dibuat dan model ini dapat digunakan untuk menampilkan rekomendasi kepada user yang harapannya dapat meningkatkan jumlah wisatawan di Kota Bandung. Namun demikian beberapa pengembangan lain masih dapat dilakukan agar dapat membuat model yang menampilkan rekomendasi yang lebih sesuai dengan kebiasaan pengguna, dll.","7fa49ba9":"## 5. Persiapan Data untuk Pemodelan","9bd05851":"#### 7.2.1 Mencari User","ea94cc26":"## 1. Mengimpor Library Python yang Dibutuhkan","f9d86b46":"#### 6.2.2. Inisialisasi Callbacks","c126d339":"## 6. Pemodelan Machine Learning dengan RecommenderNet","ecedb5ab":"### 3.1 Menyiapkan Data","925fabd9":"#### 5.2.1. Membuat Fungsi untuk Melakukan Encoding","4fc47f67":"#### 5.2.3. Encoding dan Mapping Kolom Place","6973d727":"#### 7.2.2. Mencari Lokasi yang belum Dikunjungi User","9407444e":"# Sistem Rekomendasi Destinasi Wisata Kota Bandung Berbasis Collaborative Filtering\n<hr>\n\n#### Sumber data: https:\/\/www.kaggle.com\/aprabowo\/indonesia-tourism-destination\n#### Oleh: [Rafka Imanda Putra](https:\/\/www.kaggle.com\/rafkaip)","de1798ee":"##### Keterangan:\n* tourism_with_id.csv - mengandung informasi tempak wisata di 5 kota besar di Indonesia (hanya kota Bandung yang dipakai)\n* user.csv - mengandung informasi pengguna untuk membuat rekomendasi fitur berdasar pengguna\n* tourism_rating.csv - mengandung informasi pengguna, tempat wisata, dan rating untuk membuat sistem rekomendasi berdasar rating\n","9b5c7225":"### 7.3. Menampilkan Hasil Rekomendasi untuk User","3eae9580":"#### 7.2. Menyiapkan contoh User untuk Menampilkan Rekomendasi","b09cdf9d":"#### 3.2.3. Data user","a8f5231b":"## 7. Memprediksi Top 7 Rekomendasi","859b594d":"### 5.2. Melakukan Encoding","fbc00050":"#### 5.2.2. Encoding dan Mapping Kolom User","97fbd032":"### 5.3. Melihat Gambaran Data untuk Pemodelan","f13c274a":"#### 3.2.2. Data rating","1f647476":"### 6.2. Menyiapkan Model","80f229d6":"## 2. Menyiapkan Dataset yang digunakan","9892759b":"<div>\n<img src=\"https:\/\/static.limakaki.com\/2017\/07\/slide_12.jpg\" width=\"900\";\/>\n<\/div>"}}