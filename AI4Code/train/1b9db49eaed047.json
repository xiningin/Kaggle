{"cell_type":{"40b7382d":"code","929aef1c":"code","b3cc35de":"code","202562d7":"code","35f27369":"code","a781abb1":"code","c84a0376":"code","16b3d2e6":"code","bb6fd040":"code","d1240861":"code","0aa95c69":"code","af98737a":"code","9982ff77":"code","008908bf":"code","13d4abde":"code","5a24e4fe":"code","e0c10b7a":"code","08a7065d":"markdown","f943c1e2":"markdown","e47a221f":"markdown","78122c7c":"markdown","746d0c69":"markdown","1b21ab55":"markdown","9bcdf043":"markdown","239d7fc7":"markdown","131dffd8":"markdown","baf55861":"markdown","04112d9e":"markdown","b9d07b9e":"markdown","f5df923e":"markdown","2a746d4c":"markdown","6c7628ce":"markdown","d1979596":"markdown","7ab00502":"markdown"},"source":{"40b7382d":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","929aef1c":"df = pd.read_csv('..\/input\/teleCust1000t (1).csv')\ndf.head()","b3cc35de":"df['custcat'].value_counts()","202562d7":"df.hist(column='income', bins = 50)","35f27369":"df.columns","a781abb1":"X = df[['region', 'tenure', 'age', 'marital', 'address', 'income', 'ed',\n       'employ', 'retire', 'gender', 'reside']].values\nX[0:5]","c84a0376":"y = df['custcat'].values\ny[0:5]","16b3d2e6":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","bb6fd040":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","d1240861":"from sklearn.neighbors import KNeighborsClassifier","0aa95c69":"k = 4\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh","af98737a":"yhat = neigh.predict(X_test)\nyhat[0:5]","9982ff77":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","008908bf":"k = 6\n\nneigh6 = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nyhat6 = neigh6.predict(X_test)\n\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh6.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat6))\n","13d4abde":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","5a24e4fe":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","e0c10b7a":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","08a7065d":"**About dataset**\n\nImagine a telecommunications provider has segmented its customer base by service usage patterns, categorizing the customers into four groups. If demographic data can be used to predict group membership, the company can customize offers for individual prospective customers. It is a classification problem. That is, given the dataset, with predefined labels, we need to build a model to be used to predict class of a new or unknown case. \nThe example focuses on using demographic data, such as region, age, and marital, to predict usage patterns. \nThe target field, called custcat, has four possible values that correspond to the four customer groups, as follows: 1- Basic Service 2- E-Service 3- Plus Service 4- Total Service\nOur objective is to build a classifier, to predict the class of unknown cases. We will use a specific type of classification called K nearest neighbour.\n\nLets download the dataset. To download the data, we will use !wget to download it from IBM Object Storage.\n\n**Load Data From CSV File**","f943c1e2":"**Training**\n\nLets start the algorithm with k=4 for now:","e47a221f":"**K-Nerest Neighbors**\n\nIn this Lab you will load a customer dataset, fit the data, and use K-Nearest Neighbors to predict a data point. But what is K-Nearest Neighbors?\n\nK-Nearest Neighbors is an algorithm for supervised learning. Where the data is 'trained' with data points corresponding to their classification. Once a point is to be predicted, it takes into account the 'K' nearest points to it to determine it's classification.","78122c7c":"What are our lables?","746d0c69":"In this case, we have data points of Class A and B. We want to predict what the star (test data point) is. If we consider a k value of 3 (3 nearest data points) we will obtain a prediction of Class B. Yet if we consider a k value of 6, we will obtain a prediction of Class A.\n\nIn this sense, it is important to consider the value of k. But hopefully from this diagram, you should get a sense of what the K-Nearest Neighbors algorithm is. It considers the 'K' Nearest Neighbors (points) when it predicts the classification of the test point.\n\n**Lets load requiered libraries**","1b21ab55":"![](https:\/\/static1.squarespace.com\/static\/55ff6aece4b0ad2d251b3fee\/t\/5752540b8a65e246000a2cf9\/1465017829684\/)","9bcdf043":"**Train Test Split**\n\nOut of Sample Accuracy is the percentage of correct predictions that the model makes on data that that the model has NOT been trained on. Doing a train and test on the same dataset will most likely have low out-of-sample accuracy, due to the likelihood of being over-fit.\n\nIt is important that our models have a high, out-of-sample accuracy, because the purpose of any model, of course, is to make correct predictions on unknown data. So how can we improve out-of-sample accuracy? One way is to use an evaluation approach called Train\/Test Split. Train\/Test Split involves splitting the dataset into training and testing sets respectively, which are mutually exclusive. After which, you train with the training set and test with the testing set.\n\nThis will provide a more accurate evaluation on out-of-sample accuracy because the testing dataset is not part of the dataset that have been used to train the data. It is more realistic for real world problems.","239d7fc7":"**Accuracy evaluation**\n\nIn multilabel classification, accuracy classification score function computes subset accuracy. This function is equal to the jaccard_similarity_score function. Essentially, it calculates how match the actual labels and predicted labels are in the test set.","131dffd8":"**Practice**\n\nCan you build the model again, but this time with k=6?","baf55861":"**What about other K?**\n\nK in KNN, is the number of nearest neighbors to examine. It is supposed to be specified by User. So, how we choose right K? The general solution is to reserve a part of your data for testing the accuracy of the model. Then chose k =1, use the training part for modeling, and calculate the accuracy of prediction using all samples in your test set. Repeat this process, increasing the k, and see which k is the best for your model.\n\nWe can calucalte the accuracy of KNN for different Ks.","04112d9e":"**Feature set**\n\nLets defind feature sets, X","b9d07b9e":"To use scikit-learn library, we have to convert the Pandas data frame to a Numpy array:","f5df923e":"**Classification**\n\nK nearest neighbor (K-NN)\n\nImport library\n\nClassifier implementing the k-nearest neighbors vote.","2a746d4c":"281 Plus Service, 266 Basic-service, 236 Total Service, and 217 E-Service customers\n\nYou can easily explore your data using visualization techniques:","6c7628ce":"**Data Visualization and Analysis**\n\nLets see how many each of calss is in our data set.","d1979596":"**Normalize Data**\n\nData Standardization give data zero mean and unit variance, it is good practice, especially for algorithms such as KNN which is based on distance of cases:","7ab00502":"**Predicting**\n\nwe can use the model to predict the test set:"}}