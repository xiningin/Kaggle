{"cell_type":{"77d2850e":"code","0ddd81c4":"code","2321420b":"code","d76e0d25":"code","d46b46af":"code","ccb0dea9":"code","44d4e3e0":"code","5e49786b":"code","28e72f0f":"code","f7f12769":"code","118ca378":"code","f9e4804c":"code","fc45abf5":"code","364fce20":"code","f8b1969b":"code","9e333f53":"code","377d48be":"code","4768704b":"code","c118b03d":"code","2802d418":"code","f5f33079":"code","1e74a96e":"code","2b8e182c":"code","6c4dd539":"code","e5733ee0":"code","0724e055":"code","9619ddd7":"code","b6ccab3a":"code","632c759a":"code","46f72392":"markdown","04d3a047":"markdown","ed4d8731":"markdown","3801fc4e":"markdown","2923a11d":"markdown","d12979f5":"markdown","5eb751c3":"markdown","8424f69c":"markdown","29d94f2d":"markdown","f616cc66":"markdown"},"source":{"77d2850e":"import pandas as pd\nimport numpy as np\nimport itertools\n\nfrom tensorflow.python import keras\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.python.keras.layers import Dense, Flatten, Conv2D, Dropout, BatchNormalization, MaxPool2D\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras import optimizers\nfrom tensorflow.keras.utils import to_categorical # convert to one-hot-encoding\nfrom tensorflow.keras.optimizers import RMSprop\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nnp.random.seed()\nsns.set(style='white', context='notebook', palette='deep')\n\nprint(\"Done\")","0ddd81c4":"# Load the training data\ndataset = pd.read_csv(\"..\/input\/train.csv\")\n\n#Load the test data for the competition submission\ncompetition_dataset = pd.read_csv(\"..\/input\/test.csv\")\n\ndataset.describe\n\n# Note that Tensorflow Keras nowadays has some readiliy available datasets (https:\/\/keras.io\/api\/datasets\/) \n# including the MNIST dataset. So, you could simply import it as:\n\n# (train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()","2321420b":"# A label is the thing we're predicting\nlabel = dataset[\"label\"]\n\n# A feature is an input variable, in this case a 28 by 28 pixels image\n# Drop 'label' column\nfeature = dataset.drop(labels = [\"label\"],axis = 1)\n\n# let's check we have a good distribution of the handwritten digits\ng = sns.countplot(label)\n\n","d76e0d25":"# free some space\ndel dataset \n\nprint(\"Done\")","d46b46af":"\"\"\" This shows 6 random images with their labels\"\"\"\nnrows = 2\nncols = 3\nfig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\nfor row in range(nrows):\n    for col in range(ncols):\n        rand_example = np.random.choice(feature.index)\n        ax[row,col].imshow(feature.loc[rand_example].values.reshape((28,28)), cmap='gray_r')\n        ax[row,col].set_title(\"Label: {}\".format(label.loc[rand_example]))","ccb0dea9":"# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])\nlabel = to_categorical(label, num_classes = 10)\n\n# Normalize between 0 and 1 the data (The pixel-value is an integer between 0 and 255)\nfeature = feature \/ 255.0\ncompetition_dataset = competition_dataset \/ 255.0\n\nprint(\"Done\")","44d4e3e0":"# Split the dataset into train and validation set\n# Keep 10% for the validation and 90% for the training\n# Stratify is argument to keep trainingset evenly balanced ofver the labels (eg validation set not only the digit 5)\n\nfeature_train, feature_val, label_train, label_val = train_test_split(feature, label, test_size = 0.1, stratify=label)","5e49786b":"\n# First model is a dense neural network model with 5 layers\ninputs = keras.Input(shape=(784,))\nx = layers.Dense(200, activation='relu')(inputs)\nx = layers.Dense(100, activation='relu')(x)\nx = layers.Dense(60, activation='relu')(x)\nx = layers.Dense(30, activation='relu')(x)\noutputs = layers.Dense(10, activation='softmax')(x)\nmodel_1 = keras.Model(inputs,outputs, name='Dense neural network')\n\n'''\n# Since this is a simple sequential model it could also have been specified as \nmodel_1 = Sequential()\nmodel_1.add(Dense(200, activation = \"relu\", input_shape = (784,)))\nmodel_1.add(Dense(100, activation = \"relu\"))\nmodel_1.add(Dense(60, activation = \"relu\"))\nmodel_1.add(Dense(30, activation = \"relu\"))\nmodel_1.add(Dense(10, activation = \"softmax\"))\n'''\n\n# Define the optimizer and compile the model\noptimizer = optimizers.SGD(lr=0.03, clipnorm=5.)\nmodel_1.compile(optimizer= optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\n# Print the model\nprint (model_1.summary())\n","28e72f0f":"# Or show the model in a plotted graph\nkeras.utils.plot_model(model_1, \"Dense Neural Network.png\",show_shapes=True)","f7f12769":"# With this model you should be able to achieve around 95.5% accuracy\n\nhistory = model_1.fit(feature_train, label_train, batch_size = 100, epochs = 8, \n          validation_data = (feature_val, label_val), verbose = 1)\n","118ca378":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f9e4804c":"# Look at confusion matrix, the visualization of the performance of an algorithm \n# SW gracefully copied from other notebooks on Kaggle\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Predict the values from the validation dataset\nY_pred = model_1.predict(feature_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(label_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","fc45abf5":"# First let's reshape the array into a 28*28 picture with 1 color channel (b\/w picture)\n#Take a random example to print it before and after the conversion\nrand_example = np.random.choice(1000)\n_, ax = plt.subplots()\nax.imshow(feature.loc[rand_example].values.reshape(28, 28), cmap='gray_r')\nax.set_title(\"Before\")\nax.grid(False)\n\nfeature = feature.values.reshape(-1,28,28,1)\ncompetition_dataset = competition_dataset.values.reshape(-1,28,28,1)\n\n_, ax = plt.subplots()\ng = plt.imshow(feature[rand_example][:,:,0], cmap='gray_r')\nax.set_title(\"After\")\nax.grid(False)\n","364fce20":"# Split the dataset into train and validation set\n# Keep 10% for the validation and 90% for the training\n# Stratify is argument to keep trainingset evenly balanced ofver the labels (eg validation set not only the digit 5)\n\nfeature_train, feature_val, label_train, label_val = train_test_split(feature, label, test_size = 0.1, stratify=label)","f8b1969b":"# Second model is a 3 layer convolutional network model with two dense layers at the end\n\ninputs = keras.Input(shape=(28,28,1))\nx = layers.Conv2D(filters = 4, kernel_size = (5,5), strides = 1, padding = 'Same', activation ='relu')(inputs)\nx = layers.Conv2D(filters = 8, kernel_size = (4,4), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.Conv2D(filters = 12, kernel_size = (4,4), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.Flatten()(x)\nx = layers.Dense(200, activation='relu')(x)\noutputs = layers.Dense(10, activation='softmax')(x)\nmodel_2 = keras.Model(inputs,outputs, name='Convolutional neural network')\n\n# Define the optimizer and compile the model\noptimizer = optimizers.SGD(lr=0.03, clipnorm=5.)\nmodel_2.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nprint (model_2.summary())\n","9e333f53":"# With this model you should be able to achieve around 98% accuracy\n\n\nhistory = model_2.fit(feature_train, label_train, batch_size = 100, epochs = 16, \n          validation_data = (feature_val, label_val), verbose = 1)\n","377d48be":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","4768704b":"# Look at confusion matrix, the visualization of the performance of an algorithm \n\n# Predict the values from the validation dataset\nY_pred = model_2.predict(feature_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(label_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","c118b03d":"# Generate 22 million more images by randomly rotating, scaling, and shifting 42,000 (-10% validation set) images\ndatagen = ImageDataGenerator(\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        featurewise_center=False,  # do not set input mean to 0 over the dataset\n        samplewise_center=False,  # do not set each sample mean to 0\n        featurewise_std_normalization=False,  # no divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # no divide each input by its std\n        zca_whitening=False,  # No ZCA whitening\n        horizontal_flip=False,  # no horizontal flip images\n        vertical_flip=False)  # no vertical flip images, no 6 and 9 mismatches :-)\n\ndatagen.fit(feature_train)\n\nprint(\"Done\")","2802d418":"# Third model is a 3 layer convolutional network model with one dense layer at the end, it contains more neurons, has dropout applied in the dense layer, \n# data augmentation and the adam optimizer\n\ninputs = keras.Input(shape=(28,28,1))\nx = layers.Conv2D(filters = 6, kernel_size = (6,6), strides = 1, padding = 'Same', activation ='relu')(inputs)\nx = layers.Conv2D(filters = 12, kernel_size = (5,5), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.Conv2D(filters = 24, kernel_size = (4,4), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.Flatten()(x)\nx = layers.Dense(200, activation='relu')(x)\nx = layers.Dropout(0.40)(x)\noutputs = layers.Dense(10, activation='softmax')(x)\nmodel_3 = keras.Model(inputs,outputs, name='Convolutional neural network with data augmentation')\n\n# Define the optimizer and compile the model\nmodel_3.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nprint (model_3.summary())","f5f33079":"# With this model you should be able to achieve around 99.3% accuracy\n# change epochs to 35 to have a full run\n\nhistory = model_3.fit(datagen.flow(feature_train,label_train, batch_size=100),\n                            epochs = 8, validation_data = (feature_val, label_val),\n                           verbose = 2)","1e74a96e":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['acc'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_acc'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","2b8e182c":"# Look at confusion matrix, the visualization of the performance of an algorithm \n\n# Predict the values from the validation dataset\nY_pred = model_3.predict(feature_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(label_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) ","6c4dd539":"# Fourth model with hyper parameter tuning \n\ninputs = keras.Input(shape=(28,28,1))\nx = layers.Conv2D(filters = 32, kernel_size = (5,5), strides = 1, padding = 'Same', activation ='relu')(inputs)\nx = layers.BatchNormalization()(x)\nx = layers.Conv2D(filters = 32, kernel_size = (5,5), strides = 1, padding = 'Same', activation ='relu')(x)\nx = layers.BatchNormalization()(x)\nx = layers.Dropout(0.40)(x)\nx = layers.Conv2D(filters = 64, kernel_size = (3,3), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.BatchNormalization()(x)\nx = layers.Conv2D(filters = 64, kernel_size = (3,3), strides = 2, padding = 'Same', activation ='relu')(x)\nx = layers.BatchNormalization()(x)\nx = layers.Dropout(0.40)(x)\nx = layers.Flatten()(x)\nx = layers.Dense(256, activation='relu')(x)\nx = layers.Dropout(0.40)(x)\noutputs = layers.Dense(10, activation='softmax')(x)\n\nmodel_4 = keras.Model(inputs,outputs, name='Convolutional neural network with hyper parameter tuning')\n\n# Define the optimizer and compile the model\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel_4.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\n# Set a learning rate annealer\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\nprint (model_4.summary())","e5733ee0":"# With this model you should be able to achieve around 99.6to 99.7% accuracy\n# change epochs to 35 to have a full run\n\nhistory = model_4.fit(datagen.flow(feature_train,label_train, batch_size=100),\n                            epochs = 35, validation_data = (feature_val, label_val),\n                           verbose = 2, callbacks=[learning_rate_reduction])","0724e055":"# # Look at confusion matrix, the visualization of the performance of an algorithm \n\n\n# Predict the values from the validation dataset\nY_pred = model_4.predict(feature_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(label_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nplot_confusion_matrix(confusion_mtx, classes = range(10)) \n","9619ddd7":"# Display some error results \n\n# Errors are difference between predicted labels and true labels\nerrors = (Y_pred_classes - Y_true != 0)\n\nY_pred_classes_errors = Y_pred_classes[errors]\nY_pred_errors = Y_pred[errors]\nY_true_errors = Y_true[errors]\nX_val_errors = feature_val[errors]\n\ndef display_errors(errors_index,img_errors,pred_errors, obs_errors):\n    \"\"\" This function shows 6 images with their predicted and real labels\"\"\"\n    n = 0\n    nrows = 2\n    ncols = 3\n    fig, ax = plt.subplots(nrows,ncols,sharex=True,sharey=True)\n    for row in range(nrows):\n        for col in range(ncols):\n            error = errors_index[n]\n            ax[row,col].imshow((img_errors[error]).reshape((28,28)), cmap='gray_r')\n            ax[row,col].set_title(\"Pred: {}; True: {}\".format(pred_errors[error],obs_errors[error]))\n            n += 1\n\n# Probabilities of the wrong predicted numbers\nY_pred_errors_prob = np.max(Y_pred_errors,axis = 1)\n\n# Predicted probabilities of the true values in the error set\ntrue_prob_errors = np.diagonal(np.take(Y_pred_errors, Y_true_errors, axis=1))\n\n# Difference between the probability of the predicted label and the true label\ndelta_pred_true_errors = Y_pred_errors_prob - true_prob_errors\n\n# Sorted list of the delta prob errors\nsorted_dela_errors = np.argsort(delta_pred_true_errors)\n\n# Top 6 errors \nmost_important_errors = sorted_dela_errors[-6:]\n\n# Show the top 6 errors\ndisplay_errors(most_important_errors, X_val_errors, Y_pred_classes_errors, Y_true_errors)","b6ccab3a":"# predict results\nresults = model_4.predict(competition_dataset)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","632c759a":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission_MNIST.csv\",index=False)\n","46f72392":"<a id='sec4'><\/a>\n# Hyper parameter tuning\nNotice that gap between training accuracy and validation accuracy is gone, in fact the validation accuracy outperforms nicely the training loss. Also from 98% to 99.3% is a big step, long live the data augmentation.  \nNext step is to tune the hyper parameters, how many layers? How many neurons in a layer? What type of optimizer? What learning rate? Levels of data augmentation? Etc etc\n\nThe hyperparameter tuning is still an \"art\" based on experience, best practices, etc. Some work is being do to automate this as well with eg auto-Keras\n\nSome practices I found on Kaggle and have applied below:  \n* Take more filters to have better feature extraction, higher deeper in the network\n* Batch normalization between convolution layers helps\n* Dropout between convolution layers helps, 40% seems to be a good choice\n* Take a double Conv2D layer e.g. Instead of a 5x5 Conv2D layer take 2 3*3 sequential Conv2D layers\n* Either use alternating convolution layers (Conv2D) with MaxPool2D layers, or use Conv2D with strides 2\n\nNote: training (convolutional) neural networks is a random process. Each time you train you get different results. That makes experiments difficult , you must run your experiments dozens of times and take an average. \n\n\n","04d3a047":"Let's check some of this data we got wrong. Below the code to get the confusion matrix ","ed4d8731":"Not that many mistakes (and take a look below in the type of mistakes, I would argue also human operators would have a hard time to read them right and some of the True labels I would dispute). Anyhow reading the confusion matrix:  9 and 4 got confused as well as 9 and 7, makes sense that these got confused more often. Food for thought for further analyses in case you want to go for the world record. I'll stop here for this notebook, showed in a number of steps to get a Neural Network to > 99.6%. Hope you enjoyed it, if so please vote-up the kernel (top-right of the screen).","3801fc4e":"<a id='sec3'><\/a>\n# Model 3 Overfitting\nNoticed the gap between accuracy in the test and validation data, test data even reaching 99.9%? The model is training so well on the test data that it overfits. It is becoming so well specialized to the input dataset, it is actually getting worse for examples outside the test dataset. Solution directions:  \n1) Need more data, Data augmentation with the Keras ImageGenerator to the rescue  \n2) Overfitting techniques, Dropout to the rescue, applied significant drop-out in the 200 neurons dense layer  \n3) More degrees of freedom, let's get a richer model  \nLastly, I also applied a more advanced optimizer: Adam optimizer in this case\n\n<img src=\"https:\/\/i.imgur.com\/q2AwcyU.jpg\" width=800>\n","2923a11d":"Let's submit the results to Kaggle.","d12979f5":"# Neural Networks by example\nWelcome to my first notebook on Kaggle. I did record my notes so it might help others in their journey to understand Neural Networks by examples (in this case using the famous MNIST handwritten digits example, the \"Hello world\" of Deep Learning.) After seeing many youtube video's and various courses on Neural Networks found the Kaggle Keras course and examples helping me a lot to move from powerpoint understanding to run my own Neural Networks. Many thanks to this community! The least I could do is to contribute back, hence this notebook.\n<center><img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/27\/MnistExamples.png\" width=400><\/center>\n<center>Image from Josef Steppan on  <a href=\"https:\/\/en.wikipedia.org\/wiki\/MNIST_database\"> Wikipedia<\/a>  <\/center> \n  \nFor starters would like to recommend a couple of video's:  \nFound these series of 3Blue1Brown videos that explain Neural Networks very nice using the handwritten digits recognition example  \n[https:\/\/www.youtube.com\/watch?v=aircAruvnKk!](https:\/\/www.youtube.com\/watch?v=aircAruvnKk!)  \nThere is also an online book available:  \n[http:\/\/neuralnetworksanddeeplearning.com\/chap1.html](http:\/\/neuralnetworksanddeeplearning.com\/chap1.html)  \nAlso watch this video \"Tensorflow without a PHD\", it is a long one (2.5 hours) and it gives you an fantastic overview (don't try to remember all details immediately), it inspired me in the steps taken in this blog:  \n[https:\/\/www.youtube.com\/watch?v=vq2nnJ4g6N0!](https:\/\/www.youtube.com\/watch?v=vq2nnJ4g6N0!)   \nAnd finally the deep learning course on Kaggle is fantastic and a must-do:  \n[https:\/\/www.kaggle.com\/learn\/deep-learning](https:\/\/www.kaggle.com\/learn\/deep-learning)  \nI would like to acknowledge this tutorial for providing ideas and code, learning by example:  \n[https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/notebook](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\/notebook)  \nAnd this notebook on CNN hyper parameter tuning:  \n[https:\/\/www.kaggle.com\/charel\/how-to-choose-cnn-architecture-mnist](https:\/\/www.kaggle.com\/charel\/how-to-choose-cnn-architecture-mnist)\n\n \n","5eb751c3":"<a id='sec2'><\/a>\n# Model 2 - Convolutional network\nStill only 95-96%, how come?  \nAnswer: because we have mapped a 2D picture to a single long array, therefor loosing critical information. Convolution networks to the rescue for 2D images\n\n<img src=\"https:\/\/i.imgur.com\/TcVDj57.jpg\" width=800>","8424f69c":"# Table of Contents  \n\nIn the examples below we move through various implementation solutions to improve accuracy.  \n1. [Dense Neural Network (95% accuracy)](#sec1)  \n1. [Convolutional Neural Network (98% accuracy)](#sec2)      \n1. [Convolutional Neural Network with data augmentation, dropout, etc (99.3% accuracy)](#sec3)   \n1. [Hyper parameter tuning (99.57% accuracy)](#sec4) \n","29d94f2d":"Hit the \"save version\" button at the top of your notebook screen and select \"Save & Run All (Commit)\". Wait for your kernel to complete it's run. View the newly created kernel (e.g. open it as a new notebook) and go to the tab output, there you will find the submit button.\n","f616cc66":"<a id='sec1'><\/a>\n# Model 1 - Dense Neural Network \n\n<img src=\"https:\/\/i.imgur.com\/fPa0I6C.jpg\" width=800>"}}