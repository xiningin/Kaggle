{"cell_type":{"f7292ddb":"code","18197766":"code","f5d2c41f":"code","da71b24b":"code","19e0a2f0":"code","4cf20e4f":"code","31cbec1e":"code","a32d7680":"code","e26bf1ff":"code","9d69040b":"code","e8e98749":"code","cd7d6100":"code","2cae18a9":"code","9c78a34d":"code","8ecd64f4":"code","8cb17e3e":"code","949cd179":"code","f238bf74":"code","c4e9f635":"code","f1763e55":"code","1f666d34":"code","95359371":"code","f640cce1":"code","7c9f93a2":"code","1582168e":"code","89fbb2f0":"code","5d1fde12":"code","48b27b38":"code","d65d3ce1":"code","229b98f3":"code","2252b2c3":"code","dc7e2a9f":"code","8e173894":"markdown","f99dfad0":"markdown","20377180":"markdown","d6b32911":"markdown","3e76e914":"markdown","dc51f33c":"markdown","21b9cb9d":"markdown","27cb10fd":"markdown","a02a2275":"markdown","65ee623d":"markdown","4f7d5e76":"markdown","e603099a":"markdown","6a542f85":"markdown","a4681d3c":"markdown","19da7b1b":"markdown","bf704e7c":"markdown","caebb41f":"markdown","c4bd2c2b":"markdown","a34b7661":"markdown"},"source":{"f7292ddb":"# Regular EDA (exploratory data analysis) and plotting libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n\n# Models from Scikit-learn\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Model Evaluations\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report","18197766":"df_raw = pd.read_csv(\"..\/input\/clothessizeprediction\/final_test.csv\")\ndf_raw","f5d2c41f":"df_raw.info()","da71b24b":"df_raw.describe()","19e0a2f0":"# Number of occurences for each size (target variable)\ndf_raw[\"size\"].value_counts()","4cf20e4f":"# Number of occurences for each size (target variable)\nsns.countplot(x=df_raw[\"size\"])","31cbec1e":"# Age distribution\nsns.displot(df_raw[\"age\"])","a32d7680":"# Weight distribution\nsns.displot(df_raw[\"weight\"])","e26bf1ff":"# height distribution\nsns.displot(df_raw[\"height\"])","9d69040b":"# Removing Outliers\ndfs = []\nsizes = []\nfor size_type in df_raw['size'].unique():\n    sizes.append(size_type)\n    ndf = df_raw[['age','height','weight']][df_raw['size'] == size_type]\n    zscore = ((ndf - ndf.mean())\/ndf.std())\n    dfs.append(zscore)\n    \nfor i in range(len(dfs)):\n    dfs[i]['age'] = dfs[i]['age'][(dfs[i]['age']>-3) & (dfs[i]['age']<3)]\n    dfs[i]['height'] = dfs[i]['height'][(dfs[i]['height']>-3) & (dfs[i]['height']<3)]\n    dfs[i]['weight'] = dfs[i]['weight'][(dfs[i]['weight']>-3) & (dfs[i]['weight']<3)]\n\nfor i in range(len(sizes)):\n    dfs[i]['size'] = sizes[i]\ndf_raw = pd.concat(dfs)\ndf_raw.head()","e8e98749":"# Check for missing values\ndf_raw.isna().sum()","cd7d6100":"# Filling missing data\ndf_raw[\"age\"] = df_raw[\"age\"].fillna(df_raw['age'].median())\ndf_raw[\"height\"] = df_raw[\"height\"].fillna(df_raw['height'].median())\ndf_raw[\"weight\"] = df_raw[\"weight\"].fillna(df_raw['weight'].median())","2cae18a9":"# Mapping clothes size from strings to numeric\ndf_raw['size'] = df_raw['size'].map({\"XXS\": 1,\n                                     \"S\": 2,\n                                     \"M\" : 3,\n                                     \"L\" : 4,\n                                     \"XL\" : 5,\n                                     \"XXL\" : 6,\n                                     \"XXXL\" : 7})","9c78a34d":"# Check for missing values\ndf_raw.isna().sum()","8ecd64f4":"df_raw","8cb17e3e":"df_raw[\"bmi\"] = df_raw[\"height\"]\/df_raw[\"weight\"]\ndf_raw[\"weight-squared\"] = df_raw[\"weight\"] * df_raw[\"weight\"]","949cd179":"df_raw","f238bf74":"corr = sns.heatmap(df_raw.corr(), annot=True)","c4e9f635":"# Features\nX = df_raw.drop(\"size\", axis=1)\n\n# Target\ny = df_raw[\"size\"]","f1763e55":"X.head()","1f666d34":"y.head()","95359371":"# Splitting data into training set and validation set\n\nX_train, X_test, y_train, y_test, = train_test_split(X,y, test_size=0.10)","f640cce1":"len(X_train), len(X_test)","7c9f93a2":"# Put models in a dictionary\nmodels = {\"Logistic Regression\": LogisticRegression(),\n         \"KNN\": KNeighborsClassifier(),\n         \"Random Forest\": RandomForestClassifier(),\n         \"Decision Tree\": DecisionTreeClassifier()}\n\n# Create a function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n   \n    \"\"\"\n   Fits and evaluates given machine learning models.\n   models: a dict of different Scikit_Learn machine learning models\n   X_train: training data (no labels)\n   X_test: testing data (no labels)\n   y_train: training labels\n   y_test: test labels\n   \"\"\" \n    # Set random seed\n    np.random.seed(18)\n    # Make a dictionary to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit model to data\n        model.fit(X_train, y_train)\n        # Evaluate model and append its score to model_scores\n        model_scores[name] = model.score(X_test, y_test)\n\n    return model_scores","1582168e":"# model_scores = fit_and_score(models,X_train,X_test,y_train,y_test)\n\n# model_scores","89fbb2f0":"# model_compare = pd.DataFrame(model_scores, index=[\"accuracy\"])\n# model_compare.T.plot.bar();","5d1fde12":"model = DecisionTreeClassifier()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n","48b27b38":"# Confusion matrix\nprint(confusion_matrix(y_test, y_pred))","d65d3ce1":"# Classification report\nprint(classification_report(y_test, y_pred))","229b98f3":"# Find feature importance of ideal model\nlen(model.feature_importances_)","2252b2c3":"model.feature_importances_","dc7e2a9f":"# Helper function for plotting feature importance\ndef plot_features(columns, importances,n=20):\n    df = (pd.DataFrame({\"features\": columns,\n                       \"feature_importances\": importances})\n         .sort_values(\"feature_importances\", ascending=False)\n         .reset_index(drop=True))\n    # Plot dataframe\n    fix, ax = plt.subplots()\n    ax.barh(df[\"features\"][:n], df[\"feature_importances\"][:20])\n    ax.set_ylabel(\"Features\")\n    ax.set_xlabel(\"Feature Importance\")\n    ax.invert_yaxis()\n    \nplot_features(X_train.columns, model.feature_importances_)","8e173894":"### Correlation matrix","f99dfad0":"### Import libraries","20377180":"Population weight and height seem to show reasonable normal distributions","d6b32911":"### Import data","3e76e914":"### Feature Importance","dc51f33c":"\n**Name:** Clothing Size Predictor\n\n**Author:** Sharome Burton\n\n**Date:** 07\/18\/2021\n\n**Description:** Machine learning model used to predict women's clothing sizes based on historical data on age, weight and height\n\n## 1. Problem definition\n> How well can we predict the appropriate clothing size of for an individual, given age, weight and height?\n\n## 2. Data\nThe data file for this project `final_test.csv` can be downloaded from the clothing-size prediction dataset on Kaggle : https:\/\/www.kaggle.com\/tourist55\/clothessizeprediction\n\n   \n## 3. Evaluation \n\n> **Goal:** Predict the clothing size of an individual with >95% accuracy\n\n## 4. Features\n\n* weight (kg)\n* age (years)\n* height (cm)","21b9cb9d":"`weight` seems to be an extremely significant determinant for the model relative to the other features","27cb10fd":"### Removing outliers (z-score)","a02a2275":"### Filling missing data","65ee623d":"### Exploratory data analysis (EDA)","4f7d5e76":"### Splitting data into training and validation datasets\nThe target variable is clothing `size`, and we will let the validation set be 10% of the total population.","e603099a":"### Feature Engineering\nWe will create two new features to help model training effectiveness:\n* `bmi` (body-mass index) - medically accepted measure of obesity\n* `weight-squared` - value increases exponentially with increase in `weight`","6a542f85":"Size `M` is the most common","a4681d3c":"### Model evaluation\nWe will continue with the DecisionTreeClassifier model, which scored highest in initial tests with `99.9749%` accuracy.\n","19da7b1b":"### Training Model\nWe will try:\n* Logistic Regression\n* K-Nearest Neighbors\n* Random Forest Classifier\n* Decision Tree Classifier","bf704e7c":"The trained model shows a weighted average accuracy of `99.9%`, so the evaluation metric of >95% has been met.","caebb41f":"Clothing `size` seems much more highly dependent on `weight` than `age` or `height`, and seems to be have a strong inverse correlation with `bmi`","c4bd2c2b":"Large fraction of population seems to be around the ages of `25 to 35 years old`","a34b7661":"### Conclusion"}}