{"cell_type":{"540bcc8b":"code","d89da85c":"code","3b739d14":"code","b5df4fd7":"code","76f9b57b":"code","db274426":"code","999a1750":"code","842d8d5d":"code","17788c23":"markdown","079369d2":"markdown","2d9673f2":"markdown"},"source":{"540bcc8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d89da85c":"train = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-4\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-4\/eval.csv')\n\nprint(train.head())\nprint(test.head())","3b739d14":"#Copy test id\ntestId = test['id']\n\n#drop id from sets\ntrain.drop('id', axis = 1, inplace= True)\ntest.drop('id', axis = 1, inplace= True)\n\nprint(train.info())\nprint(test.info())\nprint(train['label'].unique())","b5df4fd7":"from sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D,Flatten\nfrom keras.metrics import RootMeanSquaredError\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.utils import to_categorical\n\n\n#y= train['label']\ny = to_categorical(train.label)\nX = train.drop('label', axis = 1)\nZ = train.values[:,1::].reshape((-1, 28, 28, 1))\ntest3D = test.values.reshape((-1, 28, 28, 1))\n\nprint(y.shape)\nprint(X.shape)\nprint(Z.shape)\n\nXdata, Xtest, ydata, ytest = train_test_split(X, y, test_size= .25)\n\nprint(ydata.shape)\nprint(Xdata.shape)\n\nprint(ytest.shape)\nprint(Xtest.shape)\n\nZdata, Ztest, ydata, ytest = train_test_split(Z, y, test_size= .25)\n\nprint(ydata.shape)\nprint(Zdata.shape)\n\nprint(ytest.shape)\nprint(Ztest.shape)\n\n#Xtrain, Xval, ytrain, yval = train_test_split(Xdata, ydata, test_size= .25)\n","76f9b57b":"model1 = Sequential()\n\nmodel1.add(Dense(10, activation='relu', input_shape= (784,)))\nmodel1.add(Dense(10, activation='relu'))\nmodel1.add(Dense(10, activation= 'softmax'))\n          \nmodel1.compile(optimizer='adam', loss= 'categorical_crossentropy', metrics= ['accuracy'])\n\nmodel1.fit(Xdata, ydata, validation_split=0.2, epochs = 1)\n\n_, accuracy1 = model1.evaluate(Xtest, ytest)\n\nprint('Accuracy: ')\nprint(accuracy1)\n\npred1 = model1.predict(test)\n\nprint(pred1)","db274426":"#model3 = Sequential()\n\n#model3.add(Conv2D(10, kernel_size=3, activation='relu',input_shape=(28,28,1)),padding='valid')","999a1750":"def bestPrediction(accuracies):\n    bestAcc = accuracies[0]\n    bestPred = pred1\n    for accuracy in accuracies:\n        if bestAcc < accuracy:\n            bestPred = pred2\n    print(\"The best accuracy was: \")\n    print(bestAcc)\n    print()\n    return bestPred ","842d8d5d":"accuracies = [accuracy2,accuracy2]\n\npred = pred1\nprint(pred)\nhold = []\nprint(len(pred))\nfor i in range(10000):\n    print(i)\n    probs = pred[i]\n    print(probs)\n    bestProb = probs[0]\n    category = 0\n    for n in range(10):\n        if probs[n] > bestProb:\n            print(prob)\n            print(n)\n            bestProb = prob\n            category = n\n    hold.append(category)\n    \npred = hold\nprint(pred)\n\n\noutput = pd.DataFrame({'id': testId, 'label': pred})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\nprint(output)","17788c23":"Javier Torres's Notebook","079369d2":"model1 = Sequential()\n\nmodel1.add(Dense(10, activation='elu', input_shape= (784,)))\nmodel1.add(Dense(100, activation='elu'))\nmodel1.add(Dense(10, activation= 'softmax'))\n          \nmodel1.compile(optimizer='adam', loss= 'categorical_crossentropy', metrics= ['accuracy'])\n\nmodel1.fit(Xdata, ydata, validation_split=0.2, epochs = 3)\n\n_, accuracy1 = model1.evaluate(Xtest, ytest)\n\nprint('Accuracy: ')\nprint(accuracy1)\n\npred1 = model1.predict(test)","2d9673f2":"print(ydata.unique())\nprint(ytest.unique())\n\nydata = ydata.reshape(60000, 9)\nytest = ytest.reshape(10000, 9)\n\nydata = to_categorical(ydata, 9)\nytest = to_categorical(ytest, 9)"}}