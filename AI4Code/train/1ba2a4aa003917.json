{"cell_type":{"8416d665":"code","c460f937":"code","193ef458":"code","8d252af4":"code","16f1da98":"code","62016f9e":"code","db6425fc":"code","0a5c3c40":"code","d722a6f9":"code","4a2c016a":"code","a7c6ba37":"code","f17297f6":"code","1b415bf7":"code","b0fa14f0":"code","0c891d04":"code","e59ee7fa":"code","8962bc14":"code","98cc0360":"code","cd25b354":"code","2e84c654":"code","e7444f1c":"code","2224e638":"code","927a1e75":"code","a6e713a9":"code","7e804b07":"code","1c323992":"code","e96d7b88":"code","a850793c":"code","bbd5cabb":"code","c6fe23c0":"code","b1af713e":"code","c059e3af":"code","ebb3134a":"code","59ceb08a":"code","66395b3f":"code","8b10e53f":"code","a0113b28":"code","ea0bca04":"code","31b30984":"code","bcee1896":"markdown","7b2bd85d":"markdown","39114308":"markdown","ffb86806":"markdown","6bcff748":"markdown","06068f0f":"markdown","a62950f9":"markdown","8b1500f0":"markdown","55fd201d":"markdown","14e84a7d":"markdown","3ce58ba3":"markdown","7b040b28":"markdown","7db965b2":"markdown","fb5ea280":"markdown","d8c2f10c":"markdown","becbba20":"markdown","859c5640":"markdown","bd5478cc":"markdown","fc513684":"markdown"},"source":{"8416d665":"\n# ignnore warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=Warning)\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport plotly.express as px\nimport gc\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\n","c460f937":"products_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv\")\nproducts_df.head()","193ef458":"products_df.head().T","8d252af4":"#basic insight on our columns and understand their properties and datatypes\nproducts_df.info()","16f1da98":"products_df.isna().any()","62016f9e":"products_df.shape","db6425fc":"districts_df = pd.read_csv(\"..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv\")\ndistricts_df.head()","0a5c3c40":"#basic insight on our columns and understand their properties and datatypes\ndistricts_df.info()","d722a6f9":"districts_df.isna().any()","4a2c016a":"districts_df.shape","a7c6ba37":"path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \nall_files = glob.glob(path + \"\/*.csv\")\n\nli = []\n\nfor filename in all_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    district_id = filename.split(\"\/\")[4].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    li.append(df)\n    \nengagement_df = pd.concat(li)\nengagement_df = engagement_df.reset_index(drop=True)\nengagement_df.head()","f17297f6":"msno.bar(products_df,color='skyblue', sort=\"ascending\", figsize=(12,6), fontsize=12)\nplt.show()","1b415bf7":"msno.bar(districts_df,color='#4895ef', sort=\"ascending\", figsize=(12,6), fontsize=12)\nplt.show()","b0fa14f0":"msno.bar(engagement_df,color='blue', sort=\"ascending\", figsize=(12,6), fontsize=12)\nplt.show()","0c891d04":"pal1 = [\"#fec5bb\",\"#fcd5ce\",\"#fae1dd\",\"#f8edeb\",\"#e8e8e4\",\"#d8e2dc\",\"#ece4db\",\"#ffe5d9\",\"#ffd7ba\",\"#fec89a\"]\npal2 = [\"#ffcbf2\",\"#f3c4fb\",\"#ecbcfd\",\"#e5b3fe\",\"#e2afff\",\"#deaaff\",\"#d8bbff\",\"#d0d1ff\",\"#c8e7ff\",\"#c0fdff\"]\npal3 = [\"#d6d2d2\",\"#f1e4f3\",\"#f4bbd3\",\"#f686bd\",\"#fe5d9f\"]\npal4 = [\"#a09abc\",\"#b6a6ca\",\"#d5cfe1\",\"#e1dee9\",\"#d4bebe\"]","e59ee7fa":"#group by state\nplt.figure(figsize=(16, 10))\nsns.countplot(y=\"state\",data=districts_df,order=districts_df.state.value_counts().index,palette=\"Blues\",linewidth=3)\nplt.title(\"The number of Districts group by state\",font=\"Serif\", size=20)\nplt.show()","8962bc14":"#group by locale\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('The number of Districts group by locale', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05, 0.05)\nlabels = list(districts_df.locale.value_counts().index)\nsizes = districts_df.locale.value_counts().values\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.0f%%', pctdistance=0.7, colors=[\"#d45d00\",\"#ff9100\",\"#eaaa00\",\"#6d6875\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","98cc0360":"plt.figure(figsize=(16, 10))\nsns.countplot(y='Provider\/Company Name', data=products_df, order=products_df[\"Provider\/Company Name\"].value_counts().index[:10],palette = pal2)\nplt.title(\"Top 10 Provider\/Company Names\",font=\"Serif\", size=20)\nplt.show()","cd25b354":"c1=c2=c3=0\nfor s in products_df[\"Sector(s)\"]:\n    if(not pd.isnull(s)):\n        s = s.split(\";\")\n        for i in range(len(s)):\n            sub = s[i].strip()\n            if(sub == 'PreK-12'): c1+=1\n            if(sub == 'Higher Ed'): c2+=1\n            if(sub == 'Corporate'): c3+=1\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Sector Distribution', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05)\nlabels = ['PreK-12','Higher Ed','Corporate']\nsizes = [c1,c2, c3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=[\"#ff228a\",\"#20b1fd\",\"#ffb703\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","2e84c654":"primary_essential_main = []\nprimary_essential_sub = []\nfor s in products_df[\"Primary Essential Function\"]:\n    if(not pd.isnull(s)):\n        s1 = s.split(\"-\",1)[0].strip()\n        primary_essential_main.append(s1)\n    else:\n        primary_essential_main.append(np.nan)\n    \n    if(not pd.isnull(s)):\n        s2 = s.split(\"-\",1)[1].strip()\n        primary_essential_sub.append(s2)\n    else:\n        primary_essential_sub.append(np.nan)\n\nproducts_df[\"primary_essential_main\"] = primary_essential_main\nproducts_df[\"primary_essential_sub\"] = primary_essential_sub","e7444f1c":"c1=c2=c3=0\n\nfor s in products_df[\"primary_essential_main\"]:\n    if(not pd.isnull(s)):\n        c1 += s.count(\"CM\")\n        c2 += s.count(\"LC\")\n        c3 += s.count(\"SDO\")\n\nfig, ax  = plt.subplots(figsize=(16, 8))\nfig.suptitle('Primary Essential Function', size = 20, font=\"Serif\")\nexplode = (0.05, 0.05, 0.05)\nlabels = ['CM','LC','SDO']\nsizes = [c1, c2, c3]\nax.pie(sizes, explode=explode,startangle=60, labels=labels,autopct='%1.2f%%', pctdistance=0.7, colors=[\"#18ff9f\",\"#2cfbff\",\"#ffb703\"])\nax.add_artist(plt.Circle((0,0),0.4,fc='white'))\nplt.show()","2224e638":"plt.figure(figsize=(16, 20))\nsns.countplot(y='primary_essential_sub', data=products_df, order=products_df[\"primary_essential_sub\"].value_counts().index,color = pal2[6])\nplt.title(\"Primary Essential Function(Sub)\",font=\"Serif\", size=20)\nplt.show()","927a1e75":"locale_data=districts_df.groupby('locale')['district_id'].count().reset_index(name='totalcount')\nfig = px.bar(locale_data, x='locale', y='totalcount')\nfig.show()","a6e713a9":"districts_df","7e804b07":"ethinicity_data=districts_df.groupby(['state','pct_black\/hispanic'])['district_id'].count().reset_index(name='totalcount')\nfig = px.bar(ethinicity_data, x='state', y='totalcount', color='pct_black\/hispanic')\nfig.show()","1c323992":"lunch_data=districts_df.groupby(['state','pct_free\/reduced'])['district_id'].count().reset_index(name='totalcount')\nfig = px.bar(lunch_data, x='state', y='totalcount', color='pct_free\/reduced')\nfig.show()","e96d7b88":"connection_data=districts_df.groupby(['state','county_connections_ratio'])['district_id'].count().reset_index(name='totalcount')\nfig = px.bar(connection_data, x='state', y='totalcount', color='county_connections_ratio')\nfig.show()","a850793c":"lp_id_performance=engagement_df[(~(engagement_df['pct_access'].isnull())\n                                &(~(engagement_df['lp_id'].isnull())))].groupby(['time','lp_id'])['pct_access'].mean()\nlp_id_performance=lp_id_performance.reset_index(name='average_access')\nlp_id_performance['lp_id']=lp_id_performance['lp_id'].astype(int)","bbd5cabb":"ww=lp_id_performance['lp_id'].unique().tolist()\nwd=products_df['LP ID'].unique().tolist()\nprint(\"Products that are not present in the product df description\",len(list(set(ww).difference(wd))))\nprint(\"Total no of distinct products\",lp_id_performance['lp_id'].nunique())\n","c6fe23c0":"topproducts=lp_id_performance.groupby('lp_id')['average_access'].mean().reset_index(name='average_access')\ntopproducts=pd.merge(topproducts,products_df, how='left',\n                                 left_on='lp_id', right_on=['LP ID'])\ntopproducts=topproducts[~(topproducts['Product Name'].isnull())]\ntopproductslist=topproducts.sort_values('average_access', ascending=False).head(10)['lp_id'].tolist()","b1af713e":"lp_id_performance_filter=lp_id_performance[lp_id_performance['lp_id'].isin(topproductslist)]\nlp_id_performance_filter=pd.merge(lp_id_performance_filter,products_df, how='left',\n                                 left_on='lp_id', right_on=['LP ID'])\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"notebook\"\nfig = px.line(lp_id_performance_filter, x=\"time\", y=\"average_access\", color=\"Product Name\")\nfig.update_layout(\n    title_text=\"Average access for top performing educational products across timeline\",\n)\nfig.update_xaxes(title_text=\"Month-Year\")\nfig.update_yaxes(title_text=\"Average access\")\nfig.show()","c059e3af":"engagement_df['district_id']=engagement_df['district_id'].astype('int64')\nengagement_district_df=pd.merge(engagement_df, districts_df, how='left')","ebb3134a":"lp_id_performance=engagement_district_df[(~(engagement_district_df['pct_access'].isnull())\n                                &(~(engagement_district_df['lp_id'].isnull())))].groupby(['time','state','lp_id'])['pct_access'].mean()\nlp_id_performance=lp_id_performance.reset_index(name='average_access')\nlp_id_performance['lp_id']=lp_id_performance['lp_id'].astype(int)\ngc.collect()","59ceb08a":"topproducts=lp_id_performance.groupby(['lp_id','state'])['average_access'].mean().reset_index(name='average_access')\ntopproducts=pd.merge(topproducts,products_df, how='left',\n                                 left_on='lp_id', right_on=['LP ID'])\ntopproducts=topproducts[~(topproducts['Product Name'].isnull())]","66395b3f":"top_products_state=topproducts.groupby('state').apply(lambda x : x.sort_values(by = 'average_access', ascending = False).head(5).reset_index(drop = True))","8b10e53f":"import matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport seaborn as sns\nfor state in top_products_state['state'].unique().tolist():\n    state_list=lp_id_performance[(lp_id_performance['state']==state)&\n                                (lp_id_performance['lp_id'].isin(\n                                top_products_state[top_products_state['state']==state]['lp_id']\n                                ))]\n    state_list=pd.merge(state_list,products_df, how='left',\n                                 left_on='lp_id',right_on='LP ID')\n   \n    fig = go.Figure()\n    color=['#636EFA', '#EF553B',\n           '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3', '#FF6692', '#B6E880', '#FF97FF', '#FECB52']\n    for i,lp_id in enumerate(state_list['lp_id'].unique().tolist()):\n        fig.add_trace(go.Scatter(x=state_list[state_list['lp_id'] ==lp_id]['time'],\n                                 y=state_list[state_list['lp_id'] ==lp_id]['average_access'], \n                                 name=state+'_'+str(state_list[state_list['lp_id'] ==lp_id]['Product Name'].iloc[0]),\n                                 line=dict(color=color[i], width=2)))\n\n    fig.update_layout(title='Top products by usage in '+ state,\n                   xaxis_title='Month',\n                   yaxis_title='Average product Access')\n    fig.show()\n\n    gc.collect()","a0113b28":"product_engagement_merge=pd.merge(engagement_df,products_df, how='left',\n                                 left_on='lp_id', right_on=['LP ID'])\nproduct_engagement_merge=product_engagement_merge[~(product_engagement_merge['Sector(s)'].isnull())]\nproduct_engagement_merge['district_id']=product_engagement_merge['district_id'].astype('int64')\nproduct_state_data=pd.merge(product_engagement_merge,districts_df, how='left')\ngc.collect()","ea0bca04":"product_state_data_percentage=(product_state_data.groupby('state')['Sector(s)'].value_counts()\/\\\nproduct_state_data.groupby('state')['lp_id'].count()).reset_index(name='percentage_split')\n","31b30984":"fig = px.bar(product_state_data_percentage, x='state', y='percentage_split', color='Sector(s)')\nfig.show()","bcee1896":"# Visualize Missing values","7b2bd85d":"**Which educational sectors are prominent per state**","39114308":"# Engagement data","ffb86806":" Arizon and North Dakota uses a lot of educational products that fall under a combination of PreK-12; Higher Ed; Corporate","6bcff748":"# District information data","06068f0f":"**What the most used educational product across all the given districts as a function of time**\n","a62950f9":"The district file districts_info.csv includes information about the characteristics of school districts.","8b1500f0":"This is based on products data.I have excluded all the products that doesnt have a product name associated with them. From the graph we can see that google classroom and google docs where the mostly used products throughout the year. The dip in Jul and August is due to the school holidays.","55fd201d":"**Analyse the distribution of free\/reduced lunch per state**","14e84a7d":"# Exploratory Data Analysis","3ce58ba3":"# Product information data","7b040b28":"# Analyse the data\n","7db965b2":"The engagement data are aggregated at school district level, and each file in the folder engagement_data represents data from one school district","fb5ea280":"There are about 8277 product that are not present in the description. Below I have tried to evaluate the average performance","d8c2f10c":"**Analyse the distribution of ethinicity per state**","becbba20":"**Analyse the distribution of high speed lunch per state**","859c5640":" **Which educational products are popular per state across timeline given?**","bd5478cc":"The product file products_info.csv includes information about the characteristics of the top 372 products with most users in 2020.","fc513684":" **Analyse the distribution of locale in the district dataset**"}}