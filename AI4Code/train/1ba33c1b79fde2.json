{"cell_type":{"1d51ccd1":"code","df8974b4":"code","5f7d615f":"code","eee95906":"code","fd3d55fa":"code","7d815f77":"markdown","9576538e":"markdown","547d868c":"markdown","8d864e2f":"markdown"},"source":{"1d51ccd1":"# used for manipulating directory paths\nimport os\nimport shutil\nfrom os.path import isfile, join, abspath, exists, isdir, expanduser\nfrom os import listdir, makedirs, getcwd, remove\nfrom pathlib import Path\n\n# Data visualisation & manipulation\nimport pandas as pd \nimport seaborn as sns\n\n# Specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mimg\nimport numpy as np \n\n# Plotting library\nfrom mpl_toolkits.mplot3d import Axes3D  # needed to plot 3-D surfaces\n\n# dl libraries specifically for CNN\nfrom keras.preprocessing.image import ImageDataGenerator,load_img, img_to_array\nfrom keras import layers\nfrom keras import models\nfrom keras import optimizers\n\n# import the Image module of PIL into the shell:\n# pip install Pillow\n# pip install opencv-python\nfrom PIL import Image\nfrom skimage.io import imread\nimport cv2\n\n# tells matplotlib to embed plots within the notebook\n%matplotlib inline\n\nimport math","df8974b4":"# Original dataset folder\ninputPath = Path('\/kaggle\/input\/flowers-recognition\/flowers')\nflowersPath = inputPath \/ 'flowers'\n\n# Each species of flower is contained in a separate folder, & this is to get all the sub-directories\nflowers = os.listdir(flowersPath)\nprint(\"Number of types of flowers: \", len(flowers))\nprint(\"Types of flowers: \", flowers)\n\n# A list which contains tuples, the type of flower & the corresponding image path\nflowersList = []\n\n# For loop for getting all the file names & adding them to the list\nfor species in flowers:\n    allFlowers = os.listdir(flowersPath \/ species)          \n    for flower in allFlowers:\n        flowersList.append((species, str(flowersPath \/species) + '\/' + flower))\n        \n# Build a dataframe        \nflowersList = pd.DataFrame(data=flowersList, columns=['category', 'image'], index=None)\nflowersList.head()","5f7d615f":"# This is to check how many samples of each flower are present in the dataset\nprint(\"Total number of flowers in the dataset: \", len(flowersList))\nflowerNum = flowersList['category'].value_counts()\nprint(\"Flowers in each category: \")\nprint(flowerNum)\n\n# A list for storing names of some random samples from each category\nRanSamples = []\n\n# Get samples fom each category \nfor category in flowerNum.index:\n    samples = flowersList['image'][flowersList['category'] == category].sample(4).values\n    for sample in samples:\n        RanSamples.append(sample)\n\n# Plot the samples\nf, ax = plt.subplots(5,4, figsize=(15,10))\nfor i,sample in enumerate(RanSamples):\n    ax[i\/\/4, i%4].imshow(mimg.imread(RanSamples[i]))\n    ax[i\/\/4, i%4].axis('off')\nplt.show()    ","eee95906":"f, axe = plt.subplots(1,1,figsize=(14,6))\nsns.barplot(x = flowerNum.index, y = flowerNum.values, ax = axe, palette=\"rocket\")\naxe.set_title(\"Flowers count for each category\", fontsize=16)\naxe.set_xlabel('Category', fontsize=14)\naxe.set_ylabel('Count', fontsize=14)\nplt.show()","fd3d55fa":"# convert image to pixels, print the pixels\ndef convert_pix_matrix(imageUrl):\n    pix_val = imread(imageUrl)\n    return pix_val\n\ndef heightWidth(imageUrl,heightWidth):\n    im = Image.open(imageUrl)\n    h, w = im.size\n    if (heightWidth == \"width\"):\n        return w\n    else:\n        return h\n    \n# first example from rand sample\nprint(\"image width: \", heightWidth(RanSamples[0],\"width\"))\nprint(\"image height: \", heightWidth(RanSamples[0],\"height\"))\nprint(convert_pix_matrix(RanSamples[0]))\n\n# read the pixels and conver back to image\ndef readPixel(pixel):\n    img = Image.fromarray(pixel)\n    img.save('readPxielExample.png')\n    img.show()\n    \nreadPixel(convert_pix_matrix(RanSamples[1]))","7d815f77":"**Flower Classification using CNN \n**\n\nIsha Sharma, Lei Chan, Kandace Richards\n\n1. Introduction\n\nThere are millions of beautiful flowers bursting around every corner, & we've been constantly awed by the beauty & uniqueness of each flower. Classifiying different flowers from one another is indeed a challenging task, as there're a plethora of flowers to classify & flowers can appear similar to each other. However, classifiying different flowers species will be advantageous in the fields such as the pharmaceutical industry, botany, agricultural, & trade activities, which is why we thought of performing this task.\n\nThe main aim of this project is to solve a Supervised Image Classification problem of classifying the flower types - rose, chamomile, dandelion, sunflower, & tulip. In the end, we\u2019ll have a trained model, which can predict the class of the flower using a Machine Learning algorithm, the Convolutional Neural Networks (CNN). \n\n2. Source\n\nThe dataset used for this project was the Flowers Recognition dataset from Kaggle, which consists of 5 classes of flower species - rose, chamomile, dandelion, sunflower, & tulip, each having about 800 images. So, we\u2019ve a total of 4242 images to train our model with. \n\n3. Procedure\n\n3.1 Importing Libraries[](http:\/\/)\n\nThis code should only run once for the entire project because its purpose is to extract data and convert it into an npz file for use during the program. Once the npz file has been created, it does not need to be created multiple times since we hold a reference to these files.\n\nInitally, the following libraries were imported to use in the data conversion process:","9576538e":"After extracting all of the flower data from the file, we converted image to pixels & printed them out for all the random sampled images.","547d868c":"3.2  Reading the Dataset \n\nAfter importing the libraries, we began importing the flower data, using the os & pandas modules. We also, extracted & plotted few sample of different flowers for some visualisation.","8d864e2f":"This snippet is to visualise how many samples we've for each flower type in the bar chart."}}