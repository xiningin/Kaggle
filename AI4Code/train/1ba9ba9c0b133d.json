{"cell_type":{"a4aa62ef":"code","87c7371d":"code","6dd6e982":"code","2f45f79c":"code","a9e637c1":"code","2f8bb595":"code","057fe544":"code","d128ba43":"code","59e15e89":"code","626f9596":"code","83fb4d6a":"code","f1240565":"code","37b3de3d":"code","824ce28b":"code","f2f365bd":"code","f92d1b2c":"markdown","1afc69ce":"markdown","c8357649":"markdown","de438a27":"markdown","d6b78382":"markdown","5920decc":"markdown","b30db0be":"markdown","80bc70ca":"markdown"},"source":{"a4aa62ef":"import xarray as xr\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport pandas as pd","87c7371d":"zone = \"NW\"     #geographic zone (NW or SE)\nmodel = 'arpege' #weather model (arome or arpege)\nMODEL = 'ARPEGE' #weather model (AROME or ARPEGE)\nlevel = '2m'      #vertical level (2m, 10m, P_sea_level or PRECIP)\ndate = dt.datetime(2016, 2, 14,0,0) # Day example \n#parameter name in the file (cf cells below to know the parameter names -> exploration of metadata)\nif level == '2m':\n    param = 't2m'\nelif level == '10m':\n    param = 'u10'\nelif level == 'PRECIP':\n    param = 'tp'\nelse:\n    param = 'msl'","6dd6e982":"#### Model data 2m\ndirectory = '\/kaggle\/input\/meteonet\/' + zone + '_weather_models_2D_parameters_' + str(date.year) + str(date.month).zfill(2) + '\/' + str(date.year) + str(date.month).zfill(2) + '\/'\nfname = directory + f'{MODEL}\/{level}\/{model}_{level}_{zone}_{date.year}{str(date.month).zfill(2)}{str(date.day).zfill(2)}000000.nc'\ndata = xr.open_dataset(fname)  \n### Model data 10m\nlevel10m='10m'\nfname10m = directory + f'{MODEL}\/{level10m}\/{model}_{level10m}_{zone}_{date.year}{str(date.month).zfill(2)}{str(date.day).zfill(2)}000000.nc'\ndata10m = xr.open_dataset(fname10m) \n## Model data precip\nlevelprecip='PRECIP'\nfnameprecip = directory + f'{MODEL}\/{levelprecip}\/{model}_{levelprecip}_{zone}_{date.year}{str(date.month).zfill(2)}{str(date.day).zfill(2)}000000.nc'\ndataprecip = xr.open_dataset(fnameprecip)\n# Model data pmer\nlevelpmer='P_sea_level'\nfnamepmer = directory + f'{MODEL}\/{levelpmer}\/{model}_{levelpmer}_{zone}_{date.year}{str(date.month).zfill(2)}{str(date.day).zfill(2)}000000.nc'\ndatapmer = xr.open_dataset(fnamepmer)\n\n# Ground stations data\nyear = '2016'\nfname = '\/kaggle\/input\/meteonet\/'+zone+'_Ground_Stations\/'+zone+'_Ground_Stations\/'+zone+'_Ground_Stations_'+year+\".csv\"\ndf = pd.read_csv(fname,parse_dates=[4],infer_datetime_format=True)","2f45f79c":"# COLLECT LAT\/LON DES STATIONS.\nLat_station=df['lat'].unique()\nLon_station=df['lon'].unique()\n# RECUPERER LES COUPLES LAT\/LON\ndf_latlon=df.loc[:,['lat','lon','number_sta']]\nLatLonNumbersta=df_latlon.drop_duplicates(['number_sta'])","a9e637c1":"LatLonNumbersta.shape #262 NumberSta but more lat\/lon ??? 302 why\nLatLon=LatLonNumbersta.loc[:,['lat','lon']].values\nLatLon= np.around(LatLon,decimals=2)","2f8bb595":"#FILTER UNIQUE STATIONS\nStations= df[\"number_sta\"].unique()","057fe544":"Longitude_model=data[\"longitude\"].values#tolist().round()\nLongitude_model= np.around(Longitude_model,decimals=3) # Round because machine calcul","d128ba43":"Mid_point_lat=int(data.latitude.values.shape[0]\/2)\nMid_point_lon=int(data.longitude.values.shape[0]\/2)\nMid_lat=data.latitude.values[Mid_point_lat]\nMid_lon=data.longitude.values[Mid_point_lon]","59e15e89":"#FILTER THE NUMBER OF ARROWS\ndef filter_function_2D(Array,Step_filter_col,Step_filter_ligne):\n    dot_col= np.arange(0,Array.shape[1],step=Step_filter_col,dtype=int)\n    dot_ligne= np.arange(0,Array.shape[0],step=Step_filter_ligne,dtype=int)\n    Array_output= Array[:,dot_col]\n    Array_output= Array_output[dot_ligne,:]\n    return Array_output","626f9596":"# PREPARE THE DATA\nStep=0\nX,Y=np.meshgrid(data.longitude.values,data.latitude.values)\nU=data10m['u10'].values[Step,:,:]\nV=data10m['v10'].values[Step,:,:]\n\nU_filter= filter_function_2D(U,5,2)\nV_filter= filter_function_2D(V,5,2)\nX_filter= filter_function_2D(X,5,2)\nY_filter= filter_function_2D(Y,5,2)\nprint(U_filter.shape)\n\n# MAKE QUIVER PLOT\nimport matplotlib.pyplot as plt\nfig1, ax1 = plt.subplots()\n\nagg_filter= np.array([12.,45.,3.])\nkw=dict(alpha=0.8,pickradius=15,picker=10,animated=True)#,norm=Normalize)\nq=ax1.quiver(X_filter,Y_filter,U_filter,V_filter,**kw,scale=100,width=0.005)\nplt.show()\n\n## Export into GeoJson\nimport mplleaflet\ngj= mplleaflet.fig_to_geojson(fig=fig1)\n","83fb4d6a":"# USE OF COUNTOUR MAP\n!pip install --upgrade pip\n!pip install geojsoncontour\n\n# TEMPERATURE CHART\nimport geojsoncontour\n\nfig,ax=plt.subplots()\n\nDATA=data['t2m'].values[0,:,:] - 273.15\n\ncontourf= ax.contourf(X, Y,DATA, 8, alpha=1)\n#contourf=ax.clabel(contourf,inline=1,fontsize=10)# THIS IS NOTE UNDERSTANT BY THE CODE TRANSCRIPTION\n\n\n# Convert matplotlib contourf to geojson\ngeojson = geojsoncontour.contourf_to_geojson(\n    contourf=contourf,\n    unit='\u00b0C',\n    min_angle_deg=3.0,\n    ndigits=7,\n    stroke_width=5,\n    fill_opacity=0.1)","f1240565":"# TIME SLIDER WITH THOSE DATA? OR OTHER WAY TO DO THAT WITH \nDATAPRECIP=dataprecip['tp'][0,:,:]\nfig,ax=plt.subplots()\nCountourPRECIP= ax.contourf(X, Y,DATAPRECIP, levels= [1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2,2.2,2.4,2.5,2.7,3,3.5,4,4.5,4.7,5], alpha=1)\n\ngeojsonprecip = geojsoncontour.contourf_to_geojson(\n    contourf=CountourPRECIP,\n    unit='kg ms-2',\n    min_angle_deg=3.0,\n    ndigits=7,\n    stroke_width=5,\n    fill_opacity=1)\n#print(geojsonprecip)","37b3de3d":"DATAPMER= datapmer['msl'][0,:,:]\/100\nfig,ax=plt.subplots()\nCountourPmer= ax.contour(X, Y,DATAPMER,8, alpha=1,colors='black')\n\ngeojsonpmer = geojsoncontour.contour_to_geojson(\n    contour=CountourPmer,\n    unit='hpa',\n    min_angle_deg=3.0,\n    ndigits=7,\n    stroke_width=3)","824ce28b":"# MODULE TO DRAW THE CHART INSIDE THE POPUP STATION\n!pip install vega\n!pip install altair\nfrom altair import Chart\nimport altair as alt\nimport json\nimport folium\n# OTHER MODULE\nfrom folium.map import Popup\nfrom folium.plugins import MarkerCluster\nfrom altair import Chart\nimport folium.plugins\nfrom folium.plugins import MousePosition\nfrom folium.plugins import HeatMap\nfrom branca import colormap\nfrom folium import features","f2f365bd":"# DUAL MAP WITH m.m1 and m.m2 possibilites to make features groups\nm= folium.plugins.DualMap(location=[Mid_lat,Mid_lon],\n           tiles='Stamen Terrain',\n           zoom_start=5.5)\n\n\n\n#### ADD TOOLTIP T2M TO GEOJSON\ntooltip = folium.GeoJsonTooltip(\n    fields=[\"title\"],\n    localize=True,\n    sticky=True,\n    labels=False,\n    style=\"\"\"\n        font-size : 22px;\n        background-color: #F0EFEF;\n        border: 2px solid black;\n        border-radius: 3px;\n        box-shadow: 3px;\n    \"\"\",)\n# ADD T2M TEMPERATURE\nfolium.features.GeoJson(\n    geojson,\n    style_function=lambda x: {\n        'type':      x['geometry']['type'],  \n        'color':     x['properties']['stroke'],\n        'weight':    x['properties']['stroke-width'],\n    },\nname= 'T2m',\nshow=False,\ntooltip=tooltip).add_to(m)\n\n\n\n\n#### ADD TOOLTIP PRECIP TO GEOJSON\ntooltipprecip = folium.GeoJsonTooltip(\n    fields=[\"title\"],\n #   aliases=[\"T\u00b0\"],\n    localize=True,\n    sticky=True,\n    labels=False,\n    style=\"\"\"\n        font-size : 22px;\n        background-color: #F0EFEF;\n        border: 2px solid black;\n        border-radius: 3px;\n        box-shadow: 3px;\n    \"\"\",)\n#ADD PRECIPITATION\nfolium.features.GeoJson(\n    geojsonprecip,\n    style_function=lambda x: {\n        'type':      x['geometry']['type'],  \n        'color':     x['properties']['stroke'],\n        'weight':    x['properties']['stroke-width'],\n        'fillColor': x['properties']['fill'],\n        'fill-opacity':   1,\n    },\nname= 'PRECIP',\ntooltip=tooltipprecip\n).add_to(m)\n\n\n\n#### ADD TOOLTIP PMER TO GEOJSON\ntooltippmer = folium.GeoJsonTooltip(\n    fields=[\"title\"],\n    aliases=[\"T\u00b0\"],\n    localize=True,\n    sticky=True,\n    labels=False,\n    style=\"\"\"\n        font-size : 22px;\n        background-color: #F0EFEF;\n        border: 2px solid black;\n        border-radius: 3px;\n        box-shadow: 3px;\n    \"\"\",)\n#ADD Pmer\nfolium.features.GeoJson(\n    geojsonpmer,\n    style_function=lambda x: {\n        'type':      x['geometry']['type'],\n        'color':     x['properties']['stroke'],\n        'weight':    x['properties']['stroke-width'],\n    },\nname= 'Pmer',\ntooltip=tooltippmer\n).add_to(m)\n\n\n\n\n# ADD QUIVER BY USING MPLLEAFLET TRANSLATE TO MPLEATLET UNDERSTANDABLE\nWIND_FLOW=folium.FeatureGroup(name='quiver')\n\nfor feature in gj['features']:\n    if feature['geometry']['type']== 'Point':\n        lon_quiver,lat_quiver = feature['geometry']['coordinates'] # Coordinate of the point\n        div = feature['properties']['html'] # Property of the ICON to add\n        icon_anchor= (feature['properties']['anchor_x'],feature['properties']['anchor_y']) #The coordinates of the \u201ctip\u201d of the icon (relative to its top left corner).\n        icon = folium.features.DivIcon(html=div,icon_anchor=icon_anchor)\n        marker = folium.Marker([lat_quiver,lon_quiver],icon=icon,opacity=0.7)\n        WIND_FLOW.add_child(marker)\n\nWIND_FLOW.add_to(m)\n\n\n\n#ADD COORDINATE SHOW AT THE UPPER RIGHT\nformatter = \"function(num) {return L.Util.formatNum(num, 2);};\"\nMousePosition(\n    position='topright',\n    separator=' | ',\n    empty_string='NaN',\n    lng_first=True,\n    num_digits=20,\n    prefix='Coordinates:',\n    lat_formatter=formatter,\n    lng_formatter=formatter,\n).add_to(m)\n\n\n\n\n#ADD STATION CLUSTERING\nmarker_cluster = MarkerCluster(name='Station temperature').add_to(m)\n\n# PREPARE DATA STATION TO LOOP ON 24HOURS ON 2016-02-14\nHeures= np.arange(0,24)\nTAB_HEURES=[]\nfor h in Heures:\n    TAB_HEURES.append('2016-02-14 '+str(h)+':00:00')\n    \n# FILTER THE DATA\nHeures = df[df.date.isin(TAB_HEURES)]\nT2M_Format = Heures[\"t\"].apply(lambda x : x -273.15)\nHeures.loc[:,'t'] = T2M_Format\n\n# LOOP TO CUSTOMIZE EVERY STATIONS DATA\nfor latlon_loop in LatLon:\n    \n    # DRAW THE CHART INSIDE THE POPUP\n    Heures_station= Heures[ ( Heures.lat == latlon_loop[0]) & (Heures.lon == latlon_loop[1])]\n    chart=alt.Chart(Heures_station).mark_line().encode(alt.X('date'),alt.Y('t',scale=alt.Scale(domain=(0,25),clamp=True)))\n    Trend_json = chart.to_json() #CONVERT TO JSON\n    Trend_dict = json.loads(Trend_json) #CONVERT TO DICT\n    # ADD POPUP\n    popup = folium.Popup()\n    folium.VegaLite(Trend_dict, height=50, width=250).add_to(popup)\n    folium.Marker(\n    location=latlon_loop,\n    popup=popup,\n    icon=folium.Icon(icon=\"stats\",color='blue')).add_to(marker_cluster)\n\n\n    \n    \n    \n\n# ADD CONFIGURATION LAYERS...\nfolium.raster_layers.TileLayer(tiles='OpenStreetMap').add_to(m)\nfolium.raster_layers.TileLayer(tiles='stamentoner').add_to(m)\nfolium.raster_layers.TileLayer(tiles='stamentoner',overlay=True,show=True,control=False).add_to(m.m2)\nfolium.LayerControl().add_to(m)\n\n\n\n\nm\n\n# SAVE THE OUTPUT MAP\n#outfp = \"base_map.html\"\n#m.save(outfp)","f92d1b2c":"<h1 style=\"text-align: center\"> ADD MODEL AND OBSERVATION DATA TO OUR FINAL MAP <\/h1>\n<h1 style=\"text-align: center\"> OF 14\/02\/2020 00:00:00 <\/h1>\n<p> For display data on the map we will process data one by one and use two ways <\/p>\n <ul>\n  <li>Convert it to geojson by geojsoncontour function<\/li>\n  <li>Convert it with mpleaflet to create new object<\/li>\n<\/ul> \n<h2> QUIVER <\/h2>","1afc69ce":"# TO GO FURTHER\nIt is possible to add a time dimension with the class TimeStampedGeoJson and so display model data during all the day or maybe more.\n\nIt is also possible to display in different way the data on the map but it need further undertstanding of the folium class and would need much time more to append. In fact you will need to write close to entierly the leaflet-like object\n\nIt is possible to add in the tooltip every information of the station by using more complexe vegar chart or by using html","c8357649":"<h2> T2M <\/h2>","de438a27":"<h1> Let's create an awesome map with ground station and model <\/h1>","d6b78382":"<h2> PMER <\/h2>","5920decc":"<h2> PRECIPITATION <\/h2>","b30db0be":"<h2> Manage the data <\/h2>","80bc70ca":"<h2>PLOT IN TOOLTIP <\/h2>"}}