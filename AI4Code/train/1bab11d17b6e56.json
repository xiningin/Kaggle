{"cell_type":{"7c34f609":"code","0aa0eb0c":"code","4dbd05ad":"code","99cf1ac0":"code","a61bdcbb":"code","e160d202":"code","d6a871ba":"code","a8411ef7":"code","485188a8":"code","4e620683":"code","a3b7a182":"code","161d77cc":"code","db8aa08f":"code","0c04507f":"code","d7925452":"code","6db19c34":"code","73407e11":"code","241095e1":"code","43550fa8":"code","d719977e":"code","b42a21f7":"code","0ddb3d3c":"code","7c0452c0":"markdown","d30439e9":"markdown","57ddda6c":"markdown"},"source":{"7c34f609":"#this notebook compares m-encoding and simple encoding for categorical features in the\n#jan 2022 tabular playground competition\n#while simple-encoding gets a slightly better cross val score, m-encoding gets a better competition score\n#this is only a first submission - the next step is more complicated feature engineering","0aa0eb0c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","4dbd05ad":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nfrom datetime import datetime","99cf1ac0":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='row_id')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv', index_col='row_id')\n\ntrain.head()","a61bdcbb":"train.info()","e160d202":"train.isnull().sum()","d6a871ba":"train['date'] = pd.to_datetime(train.date, format='%Y-%m-%d')\ntest['date'] = pd.to_datetime(test.date, format='%Y-%m-%d')\n\ntrain","a8411ef7":"dayOfWeek={'Monday':0, 'Tuesday':1, 'Wednesday':2, 'Thursday':3, 'Friday':4, 'Saturday':5, 'Sunday':6}\nmonths={'January':0, 'February':1, 'March':2, 'April':3, 'May':4, 'June':5, 'July':6, 'August':7, 'September':8,\n       'October':9, 'November':10, 'December':11}\n\ntrain['day_of_week'] = train['date'].dt.day_name().map(dayOfWeek)\ntest['day_of_week'] = test['date'].dt.day_name().map(dayOfWeek)\n\ntrain['month'] = train['date'].dt.month_name().map(months)\ntest['month'] = test['date'].dt.month_name().map(months)\n\ntrain['is_wknd'] = [1 if n in [4,5,6] else 0 for n in train['day_of_week']]\ntest['is_wknd'] = [1 if n in [4, 5, 6] else 0 for n in test['day_of_week']]","485188a8":"train = train.drop(['date'], axis=1)\ntest = test.drop(['date'], axis=1)\n\ntrain.info()","4e620683":"train","a3b7a182":"test","161d77cc":"from category_encoders import MEstimateEncoder","db8aa08f":"# Encoding split\nX_encode = train.sample(frac=0.20, random_state=0)\ny_encode = X_encode.pop('num_sold')\n\n# Training split\nX_pretrain = train.drop(X_encode.index)\ny_train = X_pretrain.pop('num_sold')","0c04507f":"encoder = MEstimateEncoder(cols=['country', 'store', 'product'],\n                          m=0.5)\n\nencoder.fit(X_encode, y_encode)\n\nX_train = encoder.transform(X_pretrain)","d7925452":"m_model = XGBRegressor(n_estimators = 250, learning_rate = 0.02, random_state=0)\n\nm_scores = -1 * cross_val_score(m_model, X_train, y_train,\n                                cv=5,\n                                scoring='neg_root_mean_squared_error')\n\nprint(m_scores)\nprint('m encoding scores: ', m_scores.mean())","6db19c34":"m_model.fit(X_train, y_train)\n\nm_test = encoder.transform(test)\n\n#output of m_preds\n\nm_preds = m_model.predict(m_test)","73407e11":"m_output = pd.DataFrame({'row_id' : range(26298, 32868),\n                       'num_sold' : m_preds})\n\nm_output.to_csv('m_encode_submission.csv', index=False)","241095e1":"train[\"product\"]=train[\"product\"].replace({\"Kaggle Mug\":0,\"Kaggle Hat\":1,\"Kaggle Sticker\":2})\ntrain[\"store\"]=train[\"store\"].replace({\"KaggleMart\":0,\"KaggleRama\":1})\ntrain[\"country\"]=train[\"country\"].replace({\"Finland\":0,\"Norway\":1,\"Sweden\":2})\n\ntest[\"product\"]=test[\"product\"].replace({\"Kaggle Mug\":0,\"Kaggle Hat\":1,\"Kaggle Sticker\":2})\ntest[\"store\"]=test[\"store\"].replace({\"KaggleMart\":0,\"KaggleRama\":1})\ntest[\"country\"]=test[\"country\"].replace({\"Finland\":0,\"Norway\":1,\"Sweden\":2})","43550fa8":"y = train.num_sold\nX = train.drop(['num_sold'], axis=1)","d719977e":"s_model = XGBRegressor(n_estimators=175, learning_rate=0.2, random_state=0)\n\ns_scores = -1 * cross_val_score(s_model, X, y,\n                                cv=5,\n                                scoring='neg_root_mean_squared_error')\n\nprint(s_scores.mean())","b42a21f7":"s_model.fit(X, y)\n\n\ns_preds = s_model.predict(test)","0ddb3d3c":"s_output = pd.DataFrame({'row_id' : range(26298, 32868),\n                       'num_sold' : s_preds})\n\ns_output.to_csv('simple_submission.csv', index=False)","7c0452c0":"**M-Encoding**","d30439e9":"**Feature Engineering Based off of the Date**","57ddda6c":"**Simple Encoding**"}}