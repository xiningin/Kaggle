{"cell_type":{"87736cff":"code","089489ad":"code","971ad32e":"code","6db1f158":"code","20c2a6d9":"code","065d2ecd":"code","6df13d0d":"code","851a9299":"code","4e1049a2":"code","d39a51df":"code","dc162ae0":"code","043a11c9":"code","45f2a5f2":"code","f48707a0":"code","6b77c70b":"code","fc9b48af":"code","19c5d63f":"code","016b0a5d":"code","fbc3c1fd":"code","e262ed04":"code","bffa3fa5":"markdown","a9525422":"markdown","ddb7ea17":"markdown","3ec417e9":"markdown","ca2361e8":"markdown","cec093de":"markdown"},"source":{"87736cff":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set_context(\"notebook\")\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","089489ad":"data_all = pd.read_csv(\"..\/input\/covid19all\/time-series-19-covid-combined_csv.csv\")\n\nusa_df = data_all[data_all['Country\/Region']=='US']","971ad32e":"print(f'There are {usa_df.shape[0]} rows and {usa_df.shape[1]} columns in Daily Covid-19 in USA')\nusa_df","6db1f158":"print('Daily Covid-19 in USA check\\n')\nprint(usa_df.isna().sum())","20c2a6d9":"# Select Important columns\nusa_train= usa_df[['Date', 'Confirmed', 'Recovered', 'Deaths']] ","065d2ecd":"usa_train.reset_index(drop=True, inplace=True)\nusa_train.head()","6df13d0d":"usa_train.isna().sum()","851a9299":"# Describe the Data\nusa_train.describe()","4e1049a2":"sns.boxplot( x= usa_train.Confirmed)","d39a51df":"sns.boxplot( x= usa_train.Recovered)","dc162ae0":"sns.boxplot( x= usa_train.Deaths)","043a11c9":"plt.figure(figsize= (14,8))\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Recovered, Death in USA\" , fontsize = 20)\n\nax1 = plt.plot_date(data=usa_train,y= 'Confirmed',x= 'Date',label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(data=usa_train,y= 'Recovered',x= 'Date',label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(data=usa_train,y= 'Deaths',x= 'Date',label = 'Death',linestyle ='-',color = 'r')\nplt.legend();","45f2a5f2":"df1=usa_train.tail(50)\nplt.figure(figsize=(14,8))\nsns.barplot(data=df1,x='Date',y='Confirmed',color=sns.color_palette('Set3')[3],label='Confirmed')\nsns.barplot(data=df1,x='Date',y='Recovered',color=sns.color_palette('Set3')[4],label='Recovered')\nsns.barplot(data=df1,x='Date',y='Deaths',color=sns.color_palette('Set3')[5],label='Deaths')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.xticks(rotation = 90)\nplt.title(\"Total Confirmed, Recovered, Death in USA\" , fontsize = 20)\nplt.legend(frameon=True,fontsize=12);","f48707a0":"usa_train.loc[:,[\"Date\",\"Confirmed\"]]","6b77c70b":"#Model\npred_conf = usa_train.loc[:,[\"Date\",\"Confirmed\"]]\npr_data = pred_conf\npr_data.columns = ['ds','y']\nm=Prophet()\nm.fit(pr_data)\nfuture=m.make_future_dataframe(periods=22)\nforecast=m.predict(future)\n","fc9b48af":"import plotly.offline as py\n\nfig = plot_plotly(m, forecast)\npy.iplot(fig) \n\nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')\n","19c5d63f":"m.plot_components(forecast)","016b0a5d":"forecast.to_csv('PredictOutput.csv')","fbc3c1fd":"from datetime import datetime, timedelta\nfig1 = m.plot(forecast)\ndatenow = datetime(2020, 7, 27)\ndateend = datenow + timedelta(days=21)\ndatestart = datenow# dateend - timedelta(days=2)\nplt.xlim([datestart, dateend])\nplt.title(\"USA COVID-19 forecast\", fontsize=20)\nplt.xlabel(\"Date\", fontsize=20)\nplt.ylabel(\"Confirmed Count\", fontsize=20)\nplt.axvline(datenow, color=\"k\", linestyle=\":\")\nplt.show()","e262ed04":"forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']][-20:]","bffa3fa5":"# Load Data","a9525422":"# Check For Missing Values","ddb7ea17":"### Let's look at the data\n","3ec417e9":"**There are no missing Data and Outlier. Data is ready for model prepration.**","ca2361e8":"**From above we can say some Data are missing.**\nDrop the missing Data","cec093de":"# Import Libraries"}}