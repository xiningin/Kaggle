{"cell_type":{"0d306a15":"code","f8fb27d8":"code","6689958b":"code","36f61c54":"code","e85f9ad5":"code","9d7c48ed":"code","5cbd820e":"code","9e3ab0e2":"code","41a2eb3c":"code","ae850682":"code","47caf2b7":"code","3a7e12f9":"code","60272698":"code","4b59fdc0":"code","09d1de9c":"code","c10948e3":"code","e9b28ff8":"code","17592c63":"code","9a90de76":"markdown","b56cc348":"markdown","934615f7":"markdown","652bcfff":"markdown","14d04163":"markdown"},"source":{"0d306a15":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8fb27d8":"import spacy\nfrom tqdm.notebook import tqdm\nnlp = spacy.load('en_core_web_lg')","6689958b":"import re\ndef clean_text(text):\n    text= text.lower() # make text lowercase\n    text = text.replace(\"\\n\",\" \") #remove \\n from text\n#     text = re.sub('[^A-Za-z0-9., ], ' ', text)\n    return text","36f61c54":"train = pd.read_csv('..\/input\/commonlitreadabilityprize\/train.csv')\ntest = pd.read_csv('..\/input\/commonlitreadabilityprize\/test.csv')","e85f9ad5":"train['excerpt'] = train['excerpt'].apply(lambda x: clean_text(x))\ntest['excerpt'] = test['excerpt'].apply(lambda x: clean_text(x))","9d7c48ed":"#example of vstack\na = np.array([1, 2, 3])\nb = np.array([2, 3, 4])\nnp.vstack((a,b))","5cbd820e":"#nlp(text).vector returns  average of the token vectors as default\n#https:\/\/spacy.io\/api\/doc#vector\nprint(nlp(\"this is\").vector[0])\nprint((nlp(\"this\").vector[0] + nlp(\" \").vector[0]  + nlp(\"is\").vector[0] )\/2)","9e3ab0e2":"X_train = np.vstack([nlp(text).vector for text in tqdm(train['excerpt'])])\ny_train = train['target']\nprint(f'Shape of Train vectors: {X_train.shape}')","41a2eb3c":"X_test = np.vstack([nlp(text).vector for text in tqdm(test['excerpt'])])\nprint(f'Shape of Test vectors: {X_test.shape}')","ae850682":"from umap import UMAP\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","47caf2b7":"df = pd.DataFrame(X_train)\ndf.index= train.index\ndf['target'] = train['target']","3a7e12f9":"umap = UMAP(n_neighbors=20,random_state=0)\ndr = umap.fit_transform(df, df['target'])","60272698":"target = df['target']\nfig = plt.figure(figsize=(15, 10))\ngs = fig.add_gridspec(4, 6)\nax = fig.add_subplot(gs[:,:4])\nax.axis('off')\n\nax.scatter(x=dr[:,0], y=dr[:,1], s=10, c=target)\nax.set_title('Word 2 Vec Output', loc='left', fontsize=20, fontweight='bold')\n\nax_dist = fig.add_subplot(gs[:2,4:])\nax_dist.set_title('Target Distribution', loc='left', fontsize=15, fontweight='bold')\n\nsns.kdeplot(target, fill=True, alpha=0, linewidth=0, ax=ax_dist)\npath = ax_dist.collections[0].get_paths()[0]\npatch = mpl.patches.PathPatch(path, transform=ax_dist.transData)\n\nx = np.linspace(0, 1, 200)\n\n\nim = ax_dist.imshow(np.vstack([x, x]), \n               cmap=\"viridis\",\n               aspect=\"auto\",\n               extent=[*ax_dist.get_xlim(), *ax_dist.get_ylim()]\n              )\n\nim.set_clip_path(patch)\n\nqtile = target.quantile([0, .25, .5, .75, 1.])\n\nfor idx in range(4):\n    sub_ax = fig.add_subplot(gs[2+idx\/\/2,4+idx%2])\n    sub_ax.axis('off')\n    q_range = (target < qtile.iloc[idx+1]) & (target >= qtile.iloc[idx])\n    sub_ax.scatter(dr[:,0][q_range],\n                   dr[:,1][q_range],\n                   s=10, \n                   c=(target[q_range]-qtile.iloc[0])\/(qtile.iloc[-1]-qtile.iloc[0]), \n                   vmin=0, vmax=1\n                  )\n    sub_ax.set_title(f'Q{idx}', loc='left')\n\nfig.tight_layout()\nplt.show()","4b59fdc0":"from pathlib import Path\nfrom tqdm.notebook import tqdm\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.model_selection import train_test_split","09d1de9c":"X_train, X_val, y_train, y_val = train_test_split(X_train, train['target'], test_size=0.2, random_state=42)","c10948e3":"from sklearn.metrics import mean_squared_error","e9b28ff8":"for i in [1e-5,1e-4,1e-3,1e-2,1e-1,1,10,100]:\n    print(f' aplha {i}')\n    regressor = Ridge(alpha=i,fit_intercept=True, normalize=False)\n    regressor.fit(X_train,y_train)\n    print(f'Train Root mean squared error: {mean_squared_error(y_train,regressor.predict(X_train),squared=False)}')\n    print(f'Validation Root mean squared error: {mean_squared_error(y_val,regressor.predict(X_val),squared=False)}')","17592c63":"regressor = Ridge(alpha=1,fit_intercept=True, normalize=False) #aplha =1\nregressor.fit(X_train, y_train) \ntest['target'] = regressor.predict(X_test)\ntest[['id','target']].to_csv('.\/submission.csv', index=False)","9a90de76":"Notebook References:\n1. Inspiration to use Spacy: https:\/\/www.kaggle.com\/vigneshbaskaran\/commonlit-spacy-with-ridge-regression\n2. Inpiration to use Umap: https:\/\/www.kaggle.com\/subinium\/commonlit-how-to-visualize-text-dataset <br>\n**Please upvote if you find this useful, it helps in keeping the motivation levels high**","b56cc348":"# Model","934615f7":"# Visualize Data\nHow to read UMAP: https:\/\/pair-code.github.io\/understanding-umap\/","652bcfff":"Patterns in data can be observed as difficult excerpts with dark blue color are very much separated from easy excerpts with yellowish colors","14d04163":"# Create Vectors"}}