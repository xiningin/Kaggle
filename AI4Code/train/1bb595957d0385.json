{"cell_type":{"ed02a911":"code","3bc3c571":"code","cd51210d":"code","25efc874":"code","b60a9e23":"code","870bb87c":"code","a6d25c71":"code","4e596621":"code","9084e9e5":"code","a69b6197":"code","aa4b879f":"code","b4b01108":"code","b7d4d3b4":"code","bba50f8b":"code","05f82da0":"code","efd76d36":"code","27176550":"code","29208c2a":"code","ee8940dd":"code","655f55c7":"code","4ec956f0":"code","6512e8f7":"code","a07a6cbc":"code","fbade237":"code","e206a3fc":"code","c3034c3b":"code","febd571d":"code","290d7c3a":"code","c56d9f21":"code","3c7498fe":"code","d6fc51ae":"code","1b8e0755":"code","47c24374":"code","f2f2d43b":"code","28018587":"code","1f2b2d54":"code","cdd599ec":"code","07fb817d":"code","9e4ff598":"code","7b9afcb7":"markdown","74b09956":"markdown","b030694f":"markdown","299a0168":"markdown","870d7ad5":"markdown","60bd6a9d":"markdown","d6adac33":"markdown","2aaee2b5":"markdown","b59d8431":"markdown","004c9091":"markdown","211a5660":"markdown","a75bda88":"markdown","2107ae2c":"markdown","f3ac3ed5":"markdown","d6ef3215":"markdown","a35f0625":"markdown","6fbaedad":"markdown","c93de2ba":"markdown","471bf0df":"markdown","2984429a":"markdown","3c0a0371":"markdown","775c066a":"markdown","fab1258d":"markdown","00e0a5ec":"markdown","386ca8d7":"markdown","908cd801":"markdown","8867d731":"markdown","e6f59499":"markdown","f7819f84":"markdown","9dadfa03":"markdown","483204fe":"markdown","6e9055f6":"markdown","b444f4a1":"markdown","05637fb2":"markdown","4fc89cfb":"markdown","89db18f7":"markdown","3f3c5bdb":"markdown","5acca5bf":"markdown","5590c0f2":"markdown","559a8026":"markdown","922b03f5":"markdown","74695205":"markdown"},"source":{"ed02a911":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bc3c571":"#for data processing\nimport pandas as pd\nimport numpy as np\n\n#for visualizing\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n#make use of sns beautiful plots\nsns.set()\n\n\n#for MachineLearning\nfrom sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","cd51210d":"file_path= ('\/kaggle\/input\/nigerian-gradaute-report-2018\/Nigerian Graduates Destination Survey (2013 -2017) (Responses) - nigerian graduates survey 2018.csv')\ndata_original = pd.read_csv(file_path)\n#make a copy of data you can always come back to incase of mistakes\ndata = data_original","25efc874":"#Lets check the statistical summaries of both the categorical and numerical data\ndata.head()\ndata.describe(include = 'all')\n","b60a9e23":"#renaming columns\nold_columns = list(data.columns.values)\n#in order not to mess up the workspace, you display present column names, then rename them by slicing the list\n\nnew_columns=['Time','Gender','Grad_Y','Course','School','Highest_Q','Current_Stat','No_Of_Jobs','NYSC_cert','NYSC_Year',\n             'Through_NYSC','FJob_Level','FJob_Role','FJob_sector','FJ_Income_Level','FJ_Required_HQ','Reason_FJ',\n             'PJ_level', 'PJ_Role','PJ_Sector','PJ_Income','PJ_Required_HQ','Reason_PJ',\n            'Best_Employer','Reason_Best_Employer','Most_PS','Currency','Job_Hours','Most_Important_Qualification',\n             'Findout_Job','Worked_For_Employer',\n            'Transport_TW','Rent_Buy','CP_Job','CP_Further_Studies','Skills_Prepared']\ncolumns_dict = dict(zip(old_columns,new_columns))\nnew_data = data.rename(columns=columns_dict)\n\n","870bb87c":"#we call data.head() to confirm that our new_columns has been renamed accordingly\nnew_data.head()","a6d25c71":"#The columns has been renamed to shorter neater forms, but just in case, lets create a dataframe that can be used as dictionary\n#in case we forgot what the columns means\ndictionary = pd.DataFrame({'Column Names':[x for x in new_columns],'Meaning':[y for y in old_columns]})","4e596621":"#now before we move forward, lets examine each columns and see what explorations we can do.\n#lets start with the gender, to examine the balace in the gender of participant\nnew_data.Gender.unique()","9084e9e5":"#to check if they are moderately\/evenly distributed\nnew_data.Gender.value_counts()","a69b6197":"def get_percent_age(new_data):    \n    l = list(new_data.Gender.value_counts())\n    percent_male = l[0]*100\/sum(l)\n    percent_female = l[1]*100\/sum(l)\n    others = l[2]*100\/sum(l)\n    return percent_male,percent_female,others\n#percentages = get_percent_age(new_data)\n#print(percentages)","aa4b879f":"#dropping the 'Prefered Not to say'\nindex = new_data[new_data['Gender']=='Prefer not to say'].index\nnew_data.drop(index, axis = 0, inplace = True)","b4b01108":"#checking\nnew_data.Gender.unique()","b7d4d3b4":"#for Graduation year, lets check if there are any problems\nnew_data.Grad_Y.unique()","bba50f8b":"new_data.Course.value_counts()","05f82da0":"print(set(new_data.Course[200:500]))","efd76d36":"def pick_top(data,interest):\n    courses_counts = data[interest].value_counts() \n    low_courses=[]\n    low_courses_index=[]\n    for course, count in courses_counts.items():\n        if count<10:\n            low_courses.append(course)\n    for i in low_courses:\n        index = data[data[interest]==i].index\n        for i in index:\n            low_courses_index.append(i)\n    return low_courses_index","27176550":"dropped_courses_index= pick_top(new_data, 'Course')\nmajor_courses = new_data.drop(dropped_courses_index, axis=0)\ndata_copy = major_courses\n","29208c2a":"data_copy.School.value_counts()","ee8940dd":"dropped_schools_index = pick_top(data_copy, 'School')\nmajor_schools = data_copy.drop(dropped_schools_index, axis=0)","655f55c7":"major_schools.Highest_Q.value_counts()","4ec956f0":"major_schools.Current_Stat.value_counts()","6512e8f7":"#for currency\nmajor_schools.Currency.value_counts()","a07a6cbc":"major_schools.Job_Hours.isnull().sum()","fbade237":"major_schools['Job_Hours'] = major_schools['Job_Hours'].fillna(0)","e206a3fc":"major_schools.Most_Important_Qualification.value_counts()","c3034c3b":"low_qualifications = pick_top(major_schools,'Most_Important_Qualification')\nMost_qualifications = major_schools.drop(low_qualifications, axis = 0)","febd571d":"Most_qualifications.Findout_Job.value_counts()","290d7c3a":"Most_qualifications.CP_Further_Studies.value_counts()","c56d9f21":"#for option i, we have to do the following:\n#1. you pick the ones that are done with NYSC,as only those could be working, so we drop nysc option, using  the major schools\ndrop_nysc = major_schools[major_schools.Current_Stat !='Youth Corper (NYSC)']\n#so now we have a dataframe containig only people that have completed their NYSC","3c7498fe":"#2. generalise the group into two, employed and unemployed\n#next we seperate them into employed and unemployed, we will consider only employed, self employed as well as umemployed\ndata1=drop_nysc[drop_nysc.Current_Stat == 'Working full time (paid employment)']\ndata2=drop_nysc[drop_nysc.Current_Stat == 'Unemployed']\ndata3=drop_nysc[drop_nysc.Current_Stat == 'Self-employed\/freelance\/entrepreneur']\nframes = [data1,data2,data3]\nemployed_by_school = pd.concat(frames)\nemployed_by_school","d6fc51ae":"def final_table(data):\n    '''Returns the final data frame including students employability stats'''\n    school_ = data.groupby('School')['Current_Stat'].value_counts()\n    #which returns a key\/values pairs, we can get the name of school by\n\n    list_schools = list(school_.keys())\n    #then we extract only the names of schools\n    names_of_school = []\n    for i in range(len(list_schools)):\n        names_of_school.append(list_schools[i][0])\n    name_of_school = set(names_of_school)\n    \n    #create dataframe for the name of schools\n    name_of_schools_df = pd.DataFrame ({'Name_Of_School':[x for x in name_of_school]})\n    #sort it alphabetically\n    name_of_school_df = name_of_schools_df.sort_values(by='Name_Of_School', ascending=True)\n    name_of_school_df = name_of_school_df.reset_index(drop=True)\n    \n    \n    #Below is a list of the numbers for each school, it was computed manually, but there will research to see how it can be\n    #automatically computed\n    unemployed = [11,2,19,11,19,2,10,13,26,35,4,3,7,7,4,22,4,3,30,4,4,6,16,5,\n                  36,8,6,12,2,27,13,18,6,6,15,6,1,2,5,1,6,41,13,22,8,10,10,10,\n                  9,4,20,69,3,24,6,25,5,17,11,2,9,25,4,36,4,38,35,5,96,11,19,34,5,6,5,21]\n    working=[8,4,19,8,12,4,12,9,3,37,2,10,3,3,2,33,4,5,154,1,4,1,4,6,24,6,3,12,2,29,18,24,\n             0,6,15,3,4,4,4,1,2,24,12,31,6,9,5,6,9,3,21,101,6,21,11,43,17,11,6,7,7,26,1,50,\n             6,60,53,5,135,3,43,21,4,1,0,10]\n    self_employed=[5,3,0,5,10,1,10,1,8,14,3,3,\n                   3,2,2,10,4,0,49,4,0,1,9,2,20,8,1,13,4,13,10,11,2,1,3,5,5,2,4,3,3,16,8,19,2,\n                   2,0,2,3,0,6,33,2,7,3,15,1,5,5,9,7,16,4,15,3,20,17,4,62,4,64,15,6,2,2,6]\n    \n    \n    \n    #Add another column for unemployed, employed, self employed, sum of graduates, percentage unemployed, percentage employed\n    Unemployed_df = pd.DataFrame({'Unemployed':[x for x in unemployed]})\n    employed_df = pd.DataFrame({'Employed':[x for x in working]})\n    self_employed_df = pd.DataFrame({'Self_Employed':[x for x in self_employed]})\n   \n    #create a list of the dataframes\n    dataframes = [name_of_school_df,Unemployed_df,employed_df,self_employed_df]\n\n    #return a concatenated dataframe\n    Name_of_schools_df= pd.concat(dataframes,sort=False, axis = 1)\n    return Name_of_schools_df","1b8e0755":"final_dataframe= final_table(employed_by_school)\nfinal_dataframe","47c24374":"def calculate_summaries(data):\n    '''Calculates the percentage as well as the sum total of features'''\n    data['Total_Graduates']=data['Unemployed']+data['Employed']+data['Self_Employed']\n    data['Percentage_Employed']=(data['Employed']*100)\/(data['Unemployed']+data['Employed']+data['Self_Employed'])\n    data['Percentage_Unemployed']=(data['Unemployed']*100)\/(data['Unemployed']+data['Employed']+data['Self_Employed'])\n    data['Percentage_Self_Employed']=(data['Self_Employed']*100)\/(data['Unemployed']+data['Employed']+data['Self_Employed'])\n    data['Total_Working_Percentage']=data['Percentage_Self_Employed']+data['Percentage_Employed']\n    return data","f2f2d43b":"full_data_frame = calculate_summaries(final_dataframe)\nfull_data_frame","28018587":"full_data_frame.groupby(['Name_Of_School','Total_Graduates'])['Total_Working_Percentage'].agg(['max'])","1f2b2d54":"copy_for_use = full_data_frame","cdd599ec":"status = ['Government','Government','Government','Private','Government','Private','Government','Government','Government','Private',\n          'Government','Private','Private','Government','Private','Private','Private','Private','Private','Private','Private',\n          'Government','Government','Government','Government','Government','Government','Government','Government','Government',\n          'Government','Government','Government','Private','Government','Government','Government','Government','Government','Government',\n          'Government','Government','Government','Government','Private','Private','Government','Government','Government','Government',\n          'Government','Government','Government','Government','Government','Government','Government','Private','Government','Government',\n          'Government','Government','Government','Government','Government','Government','Government','Government','Government','Government',\n           'Government','Government','Government','Government',\n           'Private',\n          'Government']","07fb817d":"copy_for_use['Government_or_Private']=status\ncopy_for_use","9e4ff598":"copy_for_use.groupby(['Government_or_Private','Total_Graduates'])['Total_Working_Percentage'].agg(['max'])\n\n","7b9afcb7":"To get a much broader outloook, we can catgorize them based on maybe they are state\/federal owned or maybe they are private we add a column, indicating maybe they are privately owned or government owned","74b09956":"next we check what was most important to current employers about as far as  qualification is concerned","b030694f":"next we check the medium people found out about their job","299a0168":"# Inspirations\n\n1. Try to identify patterns from the data\n2. Predict the employability of a nigerian graduate\n3. Identify the most important factors that contribute to the employability of the Nigerian Graduate\n4. compare the employability of the Nigerian graduate from Public Universities to Private Universities\n    * This might increase as time goes on*","870d7ad5":"# explaining the datasets\n\nThe datasets was culled by Stutern. And the summary of the data origin is as follows\nA total of 5,219 Nigerian graduates completed the survey.\nThese graduates completed their degree within the last 5 years (2013 - 2017).\nThe survey was live from February 8 through May 15, 2018.\nThe survey was hosted using Google Forms and Stutern recruited respondents via email and social media sites.\nTo account for graduates in marginalized locations, tracking officers from BudgITCo conducted the offline version in 5 states (Edo, Enugu, Ibadan, Imo and Kaduna State).\nWe removed about 600 responses that were incomplete from the offline version of the survey before we arrived at 5,219 total responses.\nNot every question was shown to every respondent, as some questions were specifically for those who are employed or other cases as it may be.","60bd6a9d":"current status, which is a very important feature to us,","d6adac33":"we can sort the data by percentage of employability to get idea of the school, or\/and by total graduates by checking if they atleast started something(working\/self employed\/enterpreneur)","2aaee2b5":"we see that there are 127 unique courses with computer science, Accountancy and Economics being the highest, but that is \na pretty high number, we can examine the data closely to see if they are truly unique\n","b59d8431":"we have various categories, where working full time is major,1267 part of, people still serving are 790, nd self employed\/enterpreneurs are 790\nSide Note:we can derive insight from which schools breed enterpreneurs more, which schools produced the least employed and sort of","004c9091":"from the result we see that most of the answers tends towards the path of agreement","211a5660":"I will be updating the notebook with more analysis everyday as part of my data science journey\nI will also appreciate input from anyone pointing out what could be done or what could have been done better\nThank you for your time","a75bda88":"we discover that there are 2624 male respondents, 2592 female respondents and 3 people who prefered not to say. therefore gender is balanced as the male is 50.22 about percent and female 49.66 percent. Also we can afford to drop the other observations to make the data balanced\n","2107ae2c":"we see that 4,145 of the respondents have a bachelor degree, 285 has Master's degree and so on, it will be insightful to see\nSide Note: if higher degrees means higher employability","f3ac3ed5":"uncomment the bulk of code below to get the prcentage of each Gender class before we dropped 'Prefer not to say'","d6ef3215":"Get a copy of the data","a35f0625":"#lets examine the rows individualy\n1. The names of the columns(features) are too long and needs to reduced to a shorter yet meaningful size\n2. we can see that about 9 columns have 5219 cells which means they have no null values\n3. Timestamp has a unique value of 5205, meaning we will have to drop it for the first analysis for easier analysis.\n4. some data that should have only two answers, have more than two, meaning that there are some answers that are not valid in the category\n5. also, to avoid data leakage, we will have to exclude some replies that have to do with work experience as it will affect the analysis\n6. those are the noticeable insights for now, did you see any more?","6fbaedad":"'''we can see that there are three entries here, which is surprising, but apparently, some of the respondents chose a third option\nprefer not to say.'''","c93de2ba":"from here we can see that even though they are lower, the precentage employabilty of private schools are mostly higher\n\nmore analysis and visualiztions will be carried out on this part","471bf0df":"we can see that there are about 1635 null values, probably people that are currently unemployed, which we can replace with 0\n","2984429a":"Side Note:It will be insightful as we can now see the schools that has the highest employable graduates","3c0a0371":"from the result, we see that the questionnair was for only people who graduated between 2013 and 2017,\nwe check for the next feature","775c066a":"we can them group them by the status and see which schools perform better generally\n","fab1258d":"from here, we can decide to go with courses with more than 10 frequency","00e0a5ec":"interestingly, we saw that some people are paid in foreign currency, it will be interesting to know which companies they work for if they are self employed or otherwise\n","386ca8d7":"for the Highest Qualifications\n","908cd801":"Running this line of code gives us a summary of everything","8867d731":"# Importing Data","e6f59499":"this function adds Percentage, total to the dataframe","f7819f84":"for job hours","9dadfa03":"as usual, we can summarize others by getting only ones with more than 10 answers","483204fe":"shows that we now have two categories of gender","6e9055f6":"# Pre EDA corrections\/processing","b444f4a1":"from the table, we can check for which schools has the most self_employability rate which other insight can you derive from the table?","05637fb2":"we can see that most of the respondents were from university of lagos, we can take schools with atleast 10 responses to further get a good idea of the data","4fc89cfb":"we see that most people that are employed heard from their close contacts, family and friends, followed by social media and professional networking sites","89db18f7":"# EDA and Answering Questions","3f3c5bdb":"based on research, we gathered if a school was privately owned or otherwise, from there we have this","5acca5bf":"#Now that we have the dataframe containing people of interest, we can now create a dataframe to help summarize the data we have first we get the names of the schools\nThis function returns a dataframe with the names of schools, and statistics of interest","5590c0f2":"# for the schools, we have","559a8026":"we add this to a new column, 'Government_or_Private'","922b03f5":"next we check if their courses prepared them for further studies, meaning we can have courses that are most likely to further their studies and therefore also recognise if going for a further study guarantees having a job by checking people with higher than first degree in a course and the employability rate.","74695205":"We have a lot of questions to be answered by first we have to segment the data to make useful insights. first\n#1. Which schools provide the most employable graduates. Here we can do this on two basis:\n i. On school to school basis      ii. On privately owned vs Goverment\/state owned basis   iii. University vs Polytechnic"}}