{"cell_type":{"6aaf74b8":"code","9dae4611":"code","1b809b06":"code","e73e2227":"code","bbc32010":"code","8bc22e37":"code","38057213":"code","0261cbdf":"code","df1b3285":"code","a94e6e7e":"markdown","91ef39a2":"markdown","6c80bd2a":"markdown","80cd0861":"markdown"},"source":{"6aaf74b8":"# Familiar imports\nimport numpy as np\nimport pandas as pd\n\n# For ordinal encoding categorical variables, splitting data\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n# For training XGBoost model\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error","9dae4611":"# Load the training data\ntrain = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\", index_col=0)\ntest = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)\n\n# Preview the data\ntrain.head()","1b809b06":"train.info()","e73e2227":"y = train['target']\nfeatures = train.drop(['target'], axis=1)\n\nfeatures.head()","bbc32010":"# choose ordinal encode\nobject_cols = [col for col in features.columns if 'cat' in col]\n\n# ordinal-encode categorical columns\nX = features.copy()\nX_test = test.copy()\nordinal_encoder = OrdinalEncoder()\nX[object_cols] = ordinal_encoder.fit_transform(features[object_cols])\nX_test[object_cols] = ordinal_encoder.transform(test[object_cols])\n\n# Preview the ordinal-encoded features\nX.head()","8bc22e37":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=0)","38057213":"model = XGBRegressor(n_estimators=1000, learning_rate=0.01, n_jobs=4)\n# the data is large so n_jobs may work\nmodel.fit(X_train, y_train,\n          early_stopping_rounds=5,\n          eval_set=[(X_valid, y_valid)],\n          verbose=False)","0261cbdf":"preds_valid = model.predict(X_valid)\nprint(mean_squared_error(y_valid, preds_valid, squared=False))","df1b3285":"predictions = model.predict(X_test)\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","a94e6e7e":"## this is\n- Try to apply XGBoost to data with \"Getting Started with 30 Days of ML Competition\" notebooks' preprocessing\n- I also try to paramater tuning of XGboost","91ef39a2":"## modeling","6c80bd2a":"## preprocessing","80cd0861":"## Load the data"}}