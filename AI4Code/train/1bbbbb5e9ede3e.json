{"cell_type":{"6107d0e6":"code","94ab1875":"code","f4fc3ed1":"code","7d28a8fa":"code","506b603f":"code","36befab4":"code","c9e72715":"code","93c7eb51":"code","87713c50":"code","ae9a8d32":"code","44d06be8":"markdown","8eea91c1":"markdown","0085c21a":"markdown","22cd8ef7":"markdown","dbfb36c3":"markdown","aeb156c0":"markdown","42311a13":"markdown","1c41a4aa":"markdown","5b90e37e":"markdown"},"source":{"6107d0e6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt #for plotting out the graphs\n\nfrom sklearn import datasets  # used to load the dataset\nfrom sklearn import manifold  # for creating folds in the data\n\nfrom sklearn.cluster import KMeans # for applying Kmeans clustering\n\n%matplotlib inline","94ab1875":"data = datasets.fetch_openml(\n 'mnist_784',\n version=1,\n return_X_y=True\n)\npixel_values, targets = data\ntargets=targets.astype(int)","f4fc3ed1":"tsne=manifold.TSNE(n_components=2)\ntransformed_data = tsne.fit_transform(pixel_values[:3000, :])# only using the first 3000 images","7d28a8fa":"tsne_df = pd.DataFrame(\nnp.column_stack((transformed_data, targets[:3000])),\ncolumns=[\"x\", \"y\", \"targets\"]\n)\ntsne_df.loc[:, \"targets\"] = tsne_df.targets.astype(int)","506b603f":"tsne_df.x=tsne_df.x\/(max(tsne_df.x)) \ntsne_df.y=tsne_df.y\/(max(tsne_df.y)) # scaling the tsne data to 0-1\ntsne_df[:10]","36befab4":"grid = sns.FacetGrid(tsne_df, hue=\"targets\", size=8)\ngrid.map(plt.scatter, \"x\", \"y\").add_legend()\n","c9e72715":"X=tsne_df[['x','y']]\nX.x=X.x\/(max(X.x))\nX.y=X.y\/(max(X.y))","93c7eb51":"kmeans=KMeans(n_clusters=10, init='k-means++',random_state=4)\ny_pred=kmeans.fit_predict(X)","87713c50":"X=X.values\nplt.figure(figsize=(10,10))\nplt.scatter(X[y_pred==0,0],X[y_pred==0,1],c='red',label='cluster 0')\nplt.scatter(X[y_pred==1,0],X[y_pred==1,1],c='blue',label='cluster 1')\nplt.scatter(X[y_pred==2,0],X[y_pred==2,1],c='green',label='cluster 2')\nplt.scatter(X[y_pred==3,0],X[y_pred==3,1],c='yellow',label='cluster 3')\nplt.scatter(X[y_pred==4,0],X[y_pred==4,1],c='orange',label='cluster 4')\nplt.scatter(X[y_pred==5,0],X[y_pred==5,1],c='cyan',label='cluster5 ')\nplt.scatter(X[y_pred==6,0],X[y_pred==6,1],c='black',label='cluster 6')\nplt.scatter(X[y_pred==7,0],X[y_pred==7,1],c='magenta',label='cluster 7')\nplt.scatter(X[y_pred==8,0],X[y_pred==8,1],c='brown',label='cluster 8')\nplt.scatter(X[y_pred==9,0],X[y_pred==9,1],c='pink',label='cluster 9')\nplt.legend()\nplt.show()","ae9a8d32":"plt.figure(figsize=(10,10))\nplt.scatter(X[tsne_df.targets==0,0],X[tsne_df.targets==0,1],c='red')\nplt.scatter(X[tsne_df.targets==1,0],X[tsne_df.targets==1,1],c='blue')\nplt.scatter(X[tsne_df.targets==2,0],X[tsne_df.targets==2,1],c='green')\nplt.scatter(X[tsne_df.targets==3,0],X[tsne_df.targets==3,1],c='yellow')\nplt.scatter(X[tsne_df.targets==4,0],X[tsne_df.targets==4,1],c='orange')\nplt.scatter(X[tsne_df.targets==5,0],X[tsne_df.targets==5,1],c='cyan')\nplt.scatter(X[tsne_df.targets==6,0],X[tsne_df.targets==6,1],c='black')\nplt.scatter(X[tsne_df.targets==7,0],X[tsne_df.targets==7,1],c='magenta')\nplt.scatter(X[tsne_df.targets==8,0],X[tsne_df.targets==8,1],c='brown')\nplt.scatter(X[tsne_df.targets==9,0],X[tsne_df.targets==9,1],c='pink')\nplt.show()","44d06be8":"# Visualising with tsne","8eea91c1":"Here we are using 10 cluster, as we have 10 classes for the data.\nFor the full documentation go to [https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.cluster.KMeans.html](http:\/\/)","0085c21a":"# Using Kmeans algorithm on the data","22cd8ef7":"# Plotting our data","dbfb36c3":"# Importing the directories","aeb156c0":"# From Comparing both the above graphs\nWe can see that the Kmeans algorithm has done a good job in clustering although at parts where the data was too close it has some difficulties.\n* cluster red = 4\n* cluster blue = 3\n* cluster green = 1\n* cluster yellow = 5\n* cluster orange = 6\n* cluster cyan = 7\n* cluster black = 2 \n* cluster magenta = 8\n* cluster brown = 9\n* cluster pink = 0\n* **This analogy can go wrong, as this is what I am seeing and also your seed number may be different,so you can also try to match the labels**","42311a13":"# Loading the data","1c41a4aa":"# Plotting and comparing with matplotlib\nThe below graph is same as our tsne graph, drawn just for sanity check( you can clearly see the differnce between seaborn and matplotlib), where cluster number defines the class.","5b90e37e":"Plotting the data learnt from Kmeans Algorithm"}}