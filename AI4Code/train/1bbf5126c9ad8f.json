{"cell_type":{"f2b8b9f8":"code","0208cbbb":"code","d76b64e1":"code","90a09bee":"code","8943ced1":"code","89a1060e":"code","01e630b7":"code","4c47e2d9":"code","048c10d4":"code","1b33d9ca":"code","f531fecb":"code","9efb5c12":"code","f911063b":"code","fc5dee4f":"code","056a8a28":"code","eb79268c":"code","0496d5b8":"code","0c9b61e3":"code","d3833ba4":"code","57fdb34f":"code","7a1ffc01":"code","cbd3f252":"code","3f3b77bf":"code","0eaaa2e1":"code","1ad936dc":"code","a657bd08":"code","c9e295c8":"code","b8c38ec9":"code","9d23af74":"code","47b4f62a":"code","83302b44":"code","266844e2":"code","f68202ea":"code","e898b454":"code","a01813e2":"markdown","405f0a75":"markdown","5b3f3964":"markdown","6e82d344":"markdown","da564678":"markdown","127321a8":"markdown","c8f3fd0e":"markdown","d5b9755a":"markdown","152e0148":"markdown","16659b3b":"markdown","d258f93e":"markdown","3b03ecaa":"markdown","08d829fd":"markdown","265a3fe2":"markdown","3c03ab9c":"markdown","f16540a7":"markdown","ff7cac72":"markdown"},"source":{"f2b8b9f8":"# Import The Libraries\n\nimport numpy as np\nimport pandas as pd \nfrom keras.preprocessing.image import ImageDataGenerator, load_img\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport random\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0208cbbb":"!unzip \/kaggle\/input\/dogs-vs-cats\/train.zip -d train\n!unzip \/kaggle\/input\/dogs-vs-cats\/test1.zip -d test","d76b64e1":"## Prepare Traning Data","90a09bee":"filenames = os.listdir('train\/train')\ncategories = []\nfor filename in filenames: \n    category = filename.split('.')[0]\n    if category == 'dog':\n        categories.append(1)\n    else :\n        categories.append(0)\n\ndf= pd.DataFrame({'filename': filenames,\n                  'category': categories})","8943ced1":"df.head()","89a1060e":"df.tail()","01e630b7":"df.category.value_counts().plot.bar()","4c47e2d9":"# See Sample\nsample = random.choice(filenames)\nimage = load_img('train\/train\/'+sample)\nplt.imshow(image)","048c10d4":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n\ncnn = Sequential()\n\ncnn.add(Conv2D(32, (3, 3), activation = 'relu', input_shape = (128, 128, 3)))\ncnn.add(BatchNormalization())\ncnn.add(MaxPooling2D(pool_size= (2, 2)))\ncnn.add(Dropout(0.25))\n\ncnn.add(Conv2D(64, (3, 3), activation = 'relu'))\ncnn.add(BatchNormalization())\ncnn.add(MaxPooling2D(pool_size= (2, 2)))\ncnn.add(Dropout(0.25))\n\ncnn.add(Conv2D(128, (3, 3), activation = 'relu'))\ncnn.add(BatchNormalization())\ncnn.add(MaxPooling2D(pool_size= (2, 2)))\ncnn.add(Dropout(0.25))\n\ncnn.add(Flatten())\ncnn.add(Dense(512, activation = 'relu'))\ncnn.add(BatchNormalization())\ncnn.add(Dropout(0.5))\ncnn.add(Dense(2, activation = 'softmax'))","1b33d9ca":"cnn.compile(optimizer = 'rmsprop', loss = 'categorical_crossentropy', metrics = ['accuracy'])","f531fecb":"cnn.summary()","9efb5c12":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau","f911063b":"earlystop = EarlyStopping(patience=10)","fc5dee4f":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","056a8a28":"callbacks = [earlystop, learning_rate_reduction]","eb79268c":"df.category = df.category.replace({0 : 'cat', 1 : 'dog'})","0496d5b8":"train_df, test_df = train_test_split(df, test_size = 0.20, random_state= 42)\ntrain_df = train_df.reset_index(drop = True)\ntest_df = test_df.reset_index(drop = True)","0c9b61e3":"train_df.category.value_counts().plot.bar()","d3833ba4":"test_df.category.value_counts().plot.bar()","57fdb34f":"total_train = train_df.shape[0]\ntotal_test = test_df.shape[0]\nbatch_size=15","7a1ffc01":"train_datagen = ImageDataGenerator(\n    rotation_range=15,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1\n)\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"dataset\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(128, 128),\n    class_mode='categorical',\n    batch_size=batch_size\n)","cbd3f252":"test_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen.flow_from_dataframe(\n    test_df, \n    \"dataset\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(128, 128),\n    class_mode='categorical',\n    batch_size=batch_size\n)","3f3b77bf":"sample_df = train_df.sample(n= 1).reset_index(drop = True)\nsample_generator = train_datagen.flow_from_dataframe(\n    train_df, \n    \"train\/train\/\", \n    x_col='filename',\n    y_col='category',\n    target_size=(128, 128),\n    class_mode='categorical',\n)","0eaaa2e1":"plt.figure(figsize=(12, 12))\nfor i in range(0, 15):\n    plt.subplot(5, 3, i+1)\n    for X_batch, Y_batch in sample_generator:\n        image = X_batch[0]\n        plt.imshow(image)\n        break\nplt.tight_layout()\nplt.show()","1ad936dc":"FAST_RUN = False\nepochs=3 if FAST_RUN else 11\nhistory = cnn.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=test_generator,\n    validation_steps=total_test\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks\n    \n)","a657bd08":"!pip install PyYAML","c9e295c8":"model_yaml = cnn.to_yaml()\nwith open(\"model.yaml\", \"w\") as yaml_file:\n    yaml_file.write(model_yaml)\n# serialize weights to HDF5\ncnn.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","b8c38ec9":"test_filenames = os.listdir(\"dataset\/test\/\")\ntest_df = pd.DataFrame({\n    'filename': test_filenames\n})\nnb_samples = test_df.shape[0]","9d23af74":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n    test_df, \n    \"dataset\/test\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=(128, 128),\n    batch_size=batch_size,\n    shuffle=False\n)","47b4f62a":"predict = cnn.predict_generator(test_generator, steps=np.ceil(nb_samples\/batch_size))","83302b44":"test_df['category'] = np.argmax(predict, axis=-1)","266844e2":"label_map = dict((v,k) for k,v in train_generator.class_indices.items())\ntest_df['category'] = test_df['category'].replace(label_map)","f68202ea":"test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","e898b454":"sample_test = test_df.head(36)\nsample_test.head()\nplt.figure(figsize=(12, 20))\nfor index, row in sample_test.iterrows():\n    filename = row['filename']\n    category = row['category']\n    img = load_img(\"dataset\/test\/\"+filename, target_size=(128, 128))\n    plt.subplot(9, 4, index+1)\n    plt.imshow(img)\n    plt.xlabel(filename + '(' + \"{}\".format(category) + ')' )\nplt.tight_layout()\n\nplt.show()","a01813e2":"### Early Stop\n\nTo prevent over fitting we will stop the learning after 10 epochs and val_loss value not decreased ","405f0a75":"## Testing Generator ","5b3f3964":"## Build The CNN ","6e82d344":"### Learning Rate Reduction\n\nWe will reduce the learning rate when the accuracy not increase for 2 steps ","da564678":"## See how our generator work","127321a8":"Python notebook using data from https:\/\/www.kaggle.com\/c\/dogs-vs-cats\/data","c8f3fd0e":"## Prepare Testing Data","d5b9755a":"This Kernel for someone want to deep dive into image classification. I use CNN for classification model. ","152e0148":"For categoral classication the prediction will come with probability of each category. So we will pick the category that have the highest probability with numpy average max","16659b3b":"## Fit Model","d258f93e":"## See predicted result with images ","3b03ecaa":"## Predict ","08d829fd":"## Callbacks ","265a3fe2":"## Traning Generator ","3c03ab9c":"We will convert the predict category back into our generator classes by using train_generator.class_indices. It is the classes that image generator map while converting data into computer vision ","f16540a7":"### Prepare Data\nBecause we will use image genaretor with class_mode=\"categorical\". We need to convert column category into string. Then imagenerator will convert it one-hot encoding which is good for our classification.\n\nSo we will convert 1 to dog and 0 to cat","ff7cac72":"## Create Testing Generator "}}