{"cell_type":{"65f69316":"code","fa45b479":"code","76430a07":"code","3b1a8746":"code","a677ec88":"code","80a3b09a":"code","22e8bf4f":"code","a0c24605":"code","5725d31b":"code","051f7604":"code","c8b39856":"code","d6849806":"code","05e9561c":"code","64bf804e":"code","ad3aeab9":"code","e46584ac":"code","75c53245":"code","2664525f":"code","6bc5a14d":"code","6770a0e3":"code","46da7e0b":"code","275c58c1":"code","9b4b8775":"code","e50c67c1":"code","09b32155":"code","98932f92":"code","244f9a95":"code","d76c0000":"code","8b9e5798":"code","9cabebc7":"code","be9d1bbf":"code","369dcb1a":"code","16266ab9":"code","aeaec699":"code","53a8a4af":"code","7af687da":"code","168d5ea2":"code","943d96a5":"code","99893c5f":"code","32eab4d6":"code","dd9159a0":"code","c8999ca8":"code","2b5fabcd":"code","61fb642a":"code","f0a277c9":"code","943db726":"code","cf9d641b":"code","bdd2a95b":"code","478d45af":"code","cb14d0bc":"code","1b4e42ab":"code","908e281b":"code","de2b4a16":"code","9e2ba234":"code","ff16cd50":"code","aa3e9d59":"code","99fac55a":"code","9c5009da":"code","b154e06c":"code","903c03f0":"code","39790e49":"code","564e3114":"code","453b385a":"code","ee50e7e9":"code","c537b55c":"code","a4febb52":"code","1dd06152":"code","58a5ae2e":"code","f57ca642":"code","8104ac9f":"code","e5794219":"code","22275f71":"code","9c0110be":"code","116703b9":"code","3f2c79ee":"code","14f9f8e9":"code","732315d8":"code","159c2e39":"code","8c84d5a1":"code","6789436b":"code","5d25d632":"code","6c3d4f21":"code","854d6dfd":"markdown","0b7936f4":"markdown","11925f9b":"markdown","fb9a9193":"markdown","d5855aff":"markdown","c4ab4f8a":"markdown","1e53354c":"markdown","98b798c4":"markdown","6237b905":"markdown","237f16d7":"markdown","848a34dc":"markdown","914f5c73":"markdown","9aa69ca0":"markdown","24252bd5":"markdown","ea3ec1cc":"markdown","62520986":"markdown","984f8e42":"markdown","69d7400c":"markdown","f7b30c62":"markdown","213561a7":"markdown","fa2d7765":"markdown","04f787ad":"markdown","13ff6d72":"markdown","765a5375":"markdown","01c8e40e":"markdown","cbc30229":"markdown","b4240316":"markdown","2f7db069":"markdown","198254da":"markdown"},"source":{"65f69316":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fa45b479":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n","76430a07":"import warnings\nwarnings.filterwarnings('ignore')","3b1a8746":"matplotlib.rcParams.update({'font.size': 14})","a677ec88":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","80a3b09a":"TRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'","22e8bf4f":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df.tail()","a0c24605":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","5725d31b":"train_df.dtypes","051f7604":"train_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str)","c8b39856":"plt.figure(figsize = (10, 5))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')","d6849806":"train_df.nunique()","05e9561c":"train_df.describe()","64bf804e":"df_num_features = train_df.select_dtypes(include=['float64', 'int64'])\ndf_num_features.drop('Price', axis=1, inplace=True)\ndf_num_features.hist(figsize=(20,20), bins=20, grid=False)","ad3aeab9":"train_df['Rooms'].unique() \ntrain_df['Rooms'].value_counts()","e46584ac":"train_df['Square'].unique() \ntrain_df['Square'].value_counts()","75c53245":"train_df['LifeSquare'].unique() \ntrain_df['LifeSquare'].value_counts()","2664525f":"train_df['KitchenSquare'].unique() \ntrain_df['KitchenSquare'].value_counts()","6bc5a14d":"train_df['Floor'].unique() \ntrain_df['Floor'].value_counts()","6770a0e3":"train_df['HouseFloor'].unique() \ntrain_df['HouseFloor'].value_counts()","46da7e0b":"train_df['HouseYear'].unique() \ntrain_df['HouseYear'].value_counts()","275c58c1":"train_df['LifeSquare'].unique() \ntrain_df['LifeSquare'].value_counts()","9b4b8775":"train_df['LifeSquare'].unique() \ntrain_df['LifeSquare'].value_counts()","e50c67c1":"train_df.select_dtypes(include = 'object').columns.tolist()","09b32155":"train_df['DistrictId'].value_counts()","98932f92":"train_df['Ecology_2'].value_counts()","244f9a95":"train_df['Ecology_3'].value_counts()","d76c0000":"train_df['Shops_2'].value_counts()","8b9e5798":"train_df.isna().sum()[train_df.isna().sum() != 0]","9cabebc7":"train_df['LifeSquare_nan'] = train_df['LifeSquare'].isna() * 1\n\ncondition = (train_df['LifeSquare'].isna()) \\\n             & (~train_df['Square'].isna()) \\\n             & (~train_df['KitchenSquare'].isna())\n        \ntrain_df.loc[condition, 'LifeSquare'] = train_df.loc[condition, 'Square'] * 0.625","be9d1bbf":"train_df.drop('Healthcare_1', axis=1, inplace=True)","369dcb1a":"train_df['Rooms_outlier'] = 0\ntrain_df.loc[(train_df['Rooms'] == 0) | (train_df['Rooms'] >= 7), 'Rooms_outlier'] = 1\ntrain_df.head()","16266ab9":"train_df.loc[train_df['Rooms'] == 0, 'Rooms'] = 1\ntrain_df.loc[train_df['Rooms'] >= 7, 'Rooms'] = train_df['Rooms'].median()","aeaec699":"train_df['Rooms'].value_counts()","53a8a4af":"train_df['Square_outlier'] = 0\ntrain_df.loc[(train_df['Square'] == 0) | (train_df['Square'] >= 180), 'Rooms_outlier'] = 1\ntrain_df.head()","7af687da":"train_df.loc[train_df['Square'] == 0, 'Square'] = train_df['Square'].median()\ntrain_df.loc[train_df['Square'] >= 180, 'Square'] = train_df['Square'].median()","168d5ea2":"train_df['Square'].value_counts()","943d96a5":"train_df['LifeSquare_outlier'] = 0\ntrain_df.loc[(train_df['LifeSquare'] == 0) | (train_df['LifeSquare'] >= 120) | (train_df['LifeSquare'] <= 10), 'Rooms_outlier'] = 1\ntrain_df.head()","99893c5f":"train_df.loc[train_df['LifeSquare'] == 0, 'LifeSquare'] = train_df['Square'] * 0.625\ntrain_df.loc[train_df['LifeSquare'] >= 120, 'LifeSquare'] = train_df['Square'] * 0.625\ntrain_df.loc[train_df['LifeSquare'] <= 10, 'LifeSquare'] = train_df['Square'] * 0.625","32eab4d6":"train_df['LifeSquare'].value_counts()","dd9159a0":"train_df['KitchenSquare_outlier'] = 0\ntrain_df.loc[(train_df['KitchenSquare'] == 0) | (train_df['KitchenSquare'] >= 50) | (train_df['LifeSquare'] <= 4), 'KitchenSquare_outlier'] = 1\ntrain_df.head()","c8999ca8":"train_df.loc[train_df['KitchenSquare'] == 0, 'KitchenSquare'] = train_df['Square'] * 0.15\ntrain_df.loc[train_df['KitchenSquare'] >= 50, 'KitchenSquare'] = train_df['Square'] * 0.15\ntrain_df.loc[train_df['KitchenSquare'] <= 4, 'KitchenSquare'] = train_df['Square'] * 0.15","2b5fabcd":"train_df['KitchenSquare'].value_counts()","61fb642a":"train_df['HouseFloor'].sort_values().unique()","f0a277c9":"train_df['Floor'].sort_values().unique()","943db726":"(train_df['Floor'] > train_df['HouseFloor']).sum()","cf9d641b":"train_df['HouseFloor_outlier'] = 0\ntrain_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\ntrain_df.loc[train_df['Floor'] > train_df['HouseFloor'], 'HouseFloor_outlier'] = 1","bdd2a95b":"train_df.loc[train_df['HouseFloor'] == 0, 'HouseFloor'] = train_df['HouseFloor'].median()","478d45af":"floor_outliers = train_df.loc[train_df['Floor'] > train_df['HouseFloor']].index\nfloor_outliers","cb14d0bc":"train_df.loc[floor_outliers, 'Floor'] = train_df.loc[floor_outliers, 'HouseFloor']\\\n                                                .apply(lambda x: random.randint(1, x))","1b4e42ab":"(train_df['Floor'] > train_df['HouseFloor']).sum()","908e281b":"train_df['HouseYear'].sort_values(ascending=False)","de2b4a16":"train_df.loc[train_df['HouseYear'] > 2021, 'HouseYear'] = 2021","9e2ba234":"train_df['HouseYear'].value_counts()","ff16cd50":"class DataPreparation:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    \n    def __init__(self):\n        self.medians = None  # \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\n        \n    def fit(self, X):\n        self.medians = X.median()  # \u0440\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 7), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1 # \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Rooms\n        X.loc[X['Rooms'] >= 7, 'Rooms'] = X['Rooms'].median() # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 Rooms \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        \n        X['Square_outlier'] = 0\n        X.loc[(X['Square'] == 0) | (X['Square'] >= 180), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Square'] == 0, 'Square'] = X['Square'].median() # \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Square\n        X.loc[train_df['Square'] >= 180, 'Square'] = X['Square'].median() # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 Square \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        \n        X['LifeSquare_outlier'] = 0\n        X.loc[(train_df['LifeSquare'] == 0) | (X['LifeSquare'] >= 120) | (X['LifeSquare'] <= 10), 'Rooms_outlier'] = 1\n        \n        X.loc[train_df['LifeSquare'] == 0, 'LifeSquare'] = X['Square'] * 0.625 # \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 LifeSquare\n        X.loc[train_df['LifeSquare'] >= 120, 'LifeSquare'] = X['Square'] * 0.625 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 LifeSquare \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        X.loc[train_df['LifeSquare'] <= 10, 'LifeSquare'] = X['Square'] * 0.625 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 LifeSquare \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        \n        X['KitchenSquare_outlier'] = 0\n        X.loc[(train_df['KitchenSquare'] == 0) | (X['KitchenSquare'] >= 50) | (X['LifeSquare'] <= 4), 'KitchenSquare_outlier'] = 1\n        \n        X.loc[train_df['KitchenSquare'] == 0, 'KitchenSquare'] = X['Square'] * 0.15 # \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 KitchenSquare\n        X.loc[train_df['KitchenSquare'] >= 50, 'KitchenSquare'] = X['Square'] * 0.15 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 KitchenSquare \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        X.loc[train_df['KitchenSquare'] <= 4, 'KitchenSquare'] = X['Square'] * 0.15 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 KitchenSquare \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        \n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\\\n                                            .apply(lambda x: random.randint(1, x))\n        \n        X.loc[X['HouseYear'] > 2021, 'HouseYear'] = 2021 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 HouseYear \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0443\u0441\u043b\u043e\u0432\u0438\u044e\n        \n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) \\\n             & (~X['Square'].isna()) \\\n             & (~X['KitchenSquare'].isna())\n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] * 0.625 # \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 LifeSquare\n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","aa3e9d59":"binary_to_numbers = {'A': 0, 'B': 1}\n\ntrain_df['Ecology_2'] = train_df['Ecology_2'].replace(binary_to_numbers)\ntrain_df['Ecology_3'] = train_df['Ecology_3'].replace(binary_to_numbers)\ntrain_df['Shops_2'] = train_df['Shops_2'].replace(binary_to_numbers)","99fac55a":"train_df.head()","9c5009da":"district_size = train_df['DistrictId'].value_counts().reset_index()\\\n                    .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n\ndistrict_size.head()","b154e06c":"train_df = train_df.merge(district_size, on='DistrictId', how='left')\ntrain_df.head()","903c03f0":"def rooms_to_cat(X):\n\n    X['rooms_cat'] = 0\n\n    X.loc[X['Rooms'] <= 1, 'rooms_cat'] = 1  \n    X.loc[(X['Rooms'] > 1) & (X['Rooms'] <= 2), 'rooms_cat'] = 2\n    X.loc[(X['Rooms'] > 2) & (X['Rooms'] <= 3), 'rooms_cat'] = 3\n    X.loc[(X['Rooms'] > 3) & (X['Rooms'] <= 4), 'rooms_cat'] = 4\n    X.loc[X['Rooms'] > 4, 'rooms_cat'] = 5\n\n    return X\n\ndef year_to_cat(X):\n\n    X['year_cat'] = 0\n\n    X.loc[X['HouseYear'] <= 3, 'year_cat'] = 1  \n    X.loc[(X['HouseYear'] > 3) & (X['HouseYear'] <= 5), 'year_cat'] = 2\n    X.loc[(X['HouseYear'] > 5) & (X['HouseYear'] <= 9), 'year_cat'] = 3\n    X.loc[(X['HouseYear'] > 9) & (X['HouseYear'] <= 15), 'year_cat'] = 4\n    X.loc[X['HouseYear'] > 15, 'year_cat'] = 5\n\n    return X\n\n","39790e49":"train_df = rooms_to_cat(train_df)\ntrain_df = year_to_cat(train_df)\ntrain_df.head()","564e3114":"new_price_by_rooms_year = train_df.groupby(['rooms_cat', 'year_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'NewPriceByRoomsYear'})\nnew_price_by_rooms_year.head()","453b385a":"train_df = train_df.merge(new_price_by_rooms_year, on=['rooms_cat', 'year_cat'], how='left')\ntrain_df.head()","ee50e7e9":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.new_price_by_rooms_year = None\n        self.rooms_max = None\n        self.district_size = None\n        self.year_max = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        self.binary_to_numbers = {'A': 0, 'B': 1} # \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n        \n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'}) # \u041f\u0435\u0440\u0435\u0432\u043e\u0434 DistrictId\n        \n            \n            \n        df = X.copy()\n        \n        if y is not None:\n            self.rooms_max = df['Rooms'].max()\n            self.year_max = df['HouseYear'].max()\n            df['Price'] = y.values\n            df = self.rooms_to_cat(df)\n            df = self.year_to_cat(df)\n            self.new_price_by_rooms_year = df.groupby(['rooms_cat', 'year_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'NewPriceByRoomsYear'})\n            self.new_price_by_rooms_year_median = self.new_price_by_rooms_year['NewPriceByRoomsYear'].median()\n            \n            \n            \n    def transform(self, X):\n        \n        # \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.rooms_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 rooms_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.new_price_by_rooms_year is not None:\n            X = X.merge(self.new_price_by_rooms_year, on=['rooms_cat', 'year_cat'], how='left')\n            X.fillna(self.new_price_by_rooms_year_median, inplace=True)\n            \n        return X\n    \n    def rooms_to_cat(self, X):\n        bins = [0, 1, 2, 3, 4, X['Rooms'].max()]\n        X['rooms_cat'] = pd.cut(X['Rooms'], bins=bins, labels=False)\n        \n        X['rooms_cat'].fillna(-1, inplace=True)\n        return X\n    \n    def year_to_cat(self, X):\n        bins = [0, 1930, 1960, 1980, 1995, 2010, X['HouseYear'].max()]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n    \n        X['year_cat'].fillna(-1, inplace=True)\n        return X","c537b55c":"train_df.columns.tolist()","a4febb52":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['LifeSquare_nan', 'Rooms_outlier',\n                     'HouseFloor_outlier', 'DistrictSize',\n                      'year_cat', 'NewPriceByRoomsYear']\n\ntarget_name = 'Price'","1dd06152":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","58a5ae2e":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","f57ca642":"preprocessor = DataPreparation()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","8104ac9f":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","e5794219":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","22275f71":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","9c0110be":"modelGB = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=5,\n                                     min_samples_leaf=65,\n                                     random_state=20,  \n                                     n_estimators=200)\nmodelGB.fit(X_train, y_train)","116703b9":"y_train_preds = modelGB.predict(X_train)\ny_test_preds = modelGB.predict(X_valid)\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","3f2c79ee":"cv_score = cross_val_score(modelGB, X_train, y_train, scoring='r2', cv=KFold(n_splits=5, shuffle=True, random_state=42))\ncv_score","14f9f8e9":"cv_score.mean()","732315d8":"test_df.shape","159c2e39":"test_df","8c84d5a1":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","6789436b":"predictions = modelGB.predict(test_df)\npredictions","5d25d632":"submit['Price'] = predictions\nsubmit.head()","6c3d4f21":"submit.to_csv('rf_submit.csv', index=False)","854d6dfd":"#### \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f","0b7936f4":"#### Variable dummies","11925f9b":"#### \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","fb9a9193":"> #### DistrictSize, IsDistrictLarge","d5855aff":"### \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432","c4ab4f8a":"#### Rooms","1e53354c":"\u041d\u0430 \u044d\u0442\u0430\u043f\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043d\u044b \u0435\u0449\u0451 2 \u043c\u043e\u0434\u0435\u043b\u0438: \"\u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441\" \u0438 \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f. \u041c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:\n\nTrain R2: 0.96;\nTest R2: 0.755;\ncv_score.mean() 0.6989288677508397;\n                                                                                                   \nTrain R2: 0.934;\nTest R2: 0.746;\ncv_score.mean() 0.7281650711306904.","98b798c4":"#### NewPriceByRoomsYear","6237b905":"#### \u041f\u0443\u0442\u0438 \u043a \u0444\u0430\u0439\u043b\u0430\u043c \u0438 \u043f\u0430\u043f\u043a\u0430\u043c","237f16d7":" #### LifeSquare","848a34dc":"#### \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","914f5c73":"#### KitchenSquare","9aa69ca0":"#### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","24252bd5":"### \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","ea3ec1cc":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","62520986":"\u041f\u0440\u0438 \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u043a Healthcare_1, \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u043e\u0447\u0442\u0438 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0437\u0430\u043c\u0435\u043d\u044b \u043d\u0430 \"\u043c\u0435\u0434\u0438\u0430\u043d\u0443\", \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0430 \u0445\u0443\u0434\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0435\u043c \u043f\u0440\u0438 \u043f\u043e\u043b\u043d\u043e\u043c \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432\u044b\u0448\u0435\u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \u041f\u0440\u0438\u043d\u044f\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","984f8e42":"### \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test","69d7400c":"### \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","f7b30c62":"### \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 (EDA)","213561a7":"#### Floor, HouseFloor","fa2d7765":"### \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","04f787ad":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","13ff6d72":"\u041f\u043e\u0441\u043b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0435\u0441\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0438\u043d\u044f\u043b\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 \"\u0441\u0430\u043c\u044b\u0445 \u043d\u0443\u043b\u0435\u0432\u044b\u0445\". \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043b\u0443\u0447\u0448\u0435, \u0447\u0435\u043c \u0441 \"\u043f\u043e\u043b\u043d\u044b\u043c\" \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","765a5375":"### \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","01c8e40e":"### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432","cbc30229":"#### \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","b4240316":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445: LifeSquare \u0438 Healthcare_1.\n\u0423\u0441\u0442\u0440\u0430\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c\u043e \u043a LifeSquare. \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u0440\u044b\u043d\u043e\u043a \u043d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u0438, \u0441\u0434\u0435\u043b\u0430\u043b\u0438 \u0432\u044b\u0432\u043e\u0434 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0436\u0438\u043b\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0432 1,5 \u0440\u0430\u0437\u0430.","2f7db069":"#### HouseYear","198254da":"#### Square"}}