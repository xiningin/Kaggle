{"cell_type":{"af1515e4":"code","e828a697":"code","de3e907d":"code","731c20be":"code","60ee3fa2":"code","2b928aaf":"code","70a3383e":"code","41f80d49":"code","064c630a":"code","af6c1640":"code","f311bac6":"code","26001d03":"code","35dcd8fc":"code","0150087c":"code","c5ff7765":"code","412f7bf8":"code","3e5eb261":"code","9d4479ae":"code","ce2351c3":"code","058bf53f":"code","eb419e2f":"code","a84660f3":"code","caf6e41c":"code","fdc91e3f":"code","5bf0012d":"markdown","ccc3ee11":"markdown","42bcc8d2":"markdown","11b8e2f0":"markdown","cab4a16e":"markdown","1d33c5b9":"markdown","fa2293cb":"markdown","d428842c":"markdown","22968d53":"markdown"},"source":{"af1515e4":"# Import required libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom subprocess import check_output\nimport matplotlib.pyplot as plt\nfrom scipy.stats import bernoulli\nimport seaborn as sns\nimport cv2\nfrom glob import glob # handles pathnames \n%matplotlib inline\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom sklearn.manifold import TSNE\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\nfrom skimage import io\nimport tifffile\n\nimport os\nimport gc\nimport keras as k\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\nimport cv2\nfrom tqdm import tqdm\nfrom sklearn.metrics import fbeta_score","e828a697":"# Print filenames of input datasets\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","de3e907d":"labels_df = pd.read_csv('..\/input\/train_v2.csv')","731c20be":"# Pick nine images (jpg)\nall_image_paths_jpg = sorted(glob('..\/input\/train-jpg\/*.jpg'))\nnine_imgs_paths_jpg = []\nnine_imgs_paths_jpg.append(all_image_paths_jpg[11006])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[15000])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[4005])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[12007])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[8002])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[14001])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[16004])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[13003])\nnine_imgs_paths_jpg.append(all_image_paths_jpg[9006])\n\nnine_image_names = list(map(lambda row: row.split(\"\/\")[-1][:-4], nine_imgs_paths_jpg))\n\n# Plot them in a 3 by 3 grid\nplt.figure(figsize=(12,8))\nfor i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.subplots_adjust(top = 0.99, bottom=0.01, hspace=0.5, wspace=0.4)\n    plt.imshow(plt.imread(nine_imgs_paths_jpg[i]))\n    plt.title(str(labels_df[labels_df.image_name == nine_image_names[i]].tags.values))","60ee3fa2":"# Pick nine images (tif)\nall_image_paths_tif = sorted(glob('..\/input\/train-tif-v2\/*.tif'))\nnine_imgs_paths_tif = []\nnine_imgs_paths_tif.append(all_image_paths_tif[11006])\nnine_imgs_paths_tif.append(all_image_paths_tif[15000])\nnine_imgs_paths_tif.append(all_image_paths_tif[4005])\nnine_imgs_paths_tif.append(all_image_paths_tif[12007])\nnine_imgs_paths_tif.append(all_image_paths_tif[8002])\nnine_imgs_paths_tif.append(all_image_paths_tif[14001])\nnine_imgs_paths_tif.append(all_image_paths_tif[16004])\nnine_imgs_paths_tif.append(all_image_paths_tif[13003])\nnine_imgs_paths_tif.append(all_image_paths_tif[9006])\n\nnine_image_names = list(map(lambda row: row.split(\"\/\")[-1][:-4], nine_imgs_paths_tif))\n\n# Calculate NDVI\nimgs = [io.imread(path) \/ io.imread(path).max() for path in nine_imgs_paths_tif]\n#r, g, b, nir = img[:, :, 0], img[:, :, 1], img[:, :, 2], img[:, :, 3]\nndvis = [(img[:,:,3] - img[:,:,0])\/((img[:,:,3] + img[:,:,0])) for img in imgs]","2b928aaf":"# Plot RGB image and NDVI\nimg_id = 0\nplt.figure(figsize=(12,3.5))\nplt.subplot(121)\nplt.title(str(labels_df[labels_df.image_name == nine_image_names[img_id]].tags.values))\nplt.imshow(plt.imread(nine_imgs_paths_jpg[img_id]))\nplt.subplot(122)\nplt.title('NDVI index')\nplt.imshow(ndvis[img_id], cmap='jet')\nplt.colorbar()\nplt.show()","70a3383e":"# Plot RGB image and NDVI\nimg_id = 4\nplt.figure(figsize=(12,3.5))\nplt.subplot(121)\nplt.title(str(labels_df[labels_df.image_name == nine_image_names[img_id]].tags.values))\nplt.imshow(plt.imread(nine_imgs_paths_jpg[img_id]))\nplt.subplot(122)\nplt.title('NDVI index')\nplt.imshow(ndvis[img_id], cmap='jet')\nplt.colorbar()\nplt.show()","41f80d49":"# Plot RGB image and NDVI\nimg_id = 6\nplt.figure(figsize=(12,3.5))\nplt.subplot(121)\nplt.title(str(labels_df[labels_df.image_name == nine_image_names[img_id]].tags.values))\nplt.imshow(plt.imread(nine_imgs_paths_jpg[img_id]))\nplt.subplot(122)\nplt.title('NDVI index')\nplt.imshow(ndvis[img_id], cmap='jet')\nplt.colorbar()\nplt.show()","064c630a":"# Print shape\nprint(labels_df.shape)\n# How does the training labels file look like?\nlabels_df.head()\n#labels_df.tail()","af6c1640":"# Print all unique classes\nfrom itertools import chain\nlabels_list = list(chain.from_iterable([tags.split(\" \") \n                                        for tags in labels_df['tags'].values]))\nnum_labels = len(labels_list)\nuniq_labels = set(labels_list) \nnum_uniq_labels = len(uniq_labels) \nprint(\"There are {} labels in the training set\".format(num_labels))\nprint(\"distributed among {} classes:\".format(num_uniq_labels))\nprint(uniq_labels)","f311bac6":"# Histogram of label instances\nlabels_s = pd.Series(labels_list).value_counts() # To sort them by count\nfig, ax = plt.subplots(figsize=(16, 8))\nsns.barplot(x=labels_s, y=labels_s.index, orient='h')\nplt.show()","26001d03":"# Subset of images for clustering\nn_imgs = 350\nclust_imgs = []\nimage_paths = sorted(glob('..\/input\/train-jpg\/*.jpg'))[0:n_imgs]\n\n# Image preprocessing\nfor i in range(n_imgs):\n    img = plt.imread(image_paths[i])\n    img = cv2.resize(img, (100, 100), cv2.INTER_LINEAR).astype('float')\n#    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY).astype('float')\n    img = cv2.normalize(img, None, 0.0, 1.0, cv2.NORM_MINMAX)\n    img = img.reshape(1, -1)\n    clust_imgs.append(img)\n\n# Convert into a Numpy array\nimg_mat = np.vstack(clust_imgs)\n# Number of images, (100pix by 100pix) by 4 bands\nimg_mat.shape","35dcd8fc":"# Fit a t-SNE manifold to the subset of images\ntsne = TSNE(\n    n_components=2,\n    init='random', # pca\n    random_state=101,\n    method='barnes_hut',\n    n_iter=500,\n    verbose=2\n).fit_transform(img_mat)","0150087c":"# Plot the subset of images in a two dimensional representation\ndef imscatter(x, y, images, ax=None, zoom=0.1):\n    ax = plt.gca()\n    images = [OffsetImage(image, zoom=zoom) for image in images]\n    artists = []\n    for x0, y0, im0 in zip(x, y, images):\n        ab = AnnotationBbox(im0, (x0, y0), xycoords='data', frameon=False)\n        artists.append(ax.add_artist(ab))\n    ax.update_datalim(np.column_stack([x, y]))\n    ax.autoscale()\n\nplt.figure(figsize=(13,10))\nimscatter(tsne[0:n_imgs,0], tsne[0:n_imgs,1], [plt.imread(image_paths[i]) for i in range(n_imgs)])","c5ff7765":"# Preprocess labels\nx_train = []\nx_test = []\ny_train = []\n\ndf_train = pd.read_csv('..\/input\/train_v2.csv')\n\nflatten = lambda l: [item for sublist in l for item in sublist]\nlabels = list(set(flatten([l.split(' ') for l in df_train['tags'].values])))\n\nlabel_map = {l: i for i, l in enumerate(labels)}\ninv_label_map = {i: l for l, i in label_map.items()}","412f7bf8":"# Prepare array of images and vector representation of labels\nfor f, tags in tqdm(df_train.values, miniters=1000):\n    img = cv2.imread('..\/input\/train-jpg\/{}.jpg'.format(f))\n    targets = np.zeros(17)\n    for t in tags.split(' '):\n        targets[label_map[t]] = 1 \n    x_train.append(cv2.resize(img, (32, 32)))\n    y_train.append(targets)","3e5eb261":"# Maximum and minimum values in the array of training images\nmax_value = np.amax(x_train)\nmin_value = np.amin(x_train)\n\nprint('Min value in the training images array: ', min_value)\nprint('Max value in the training images array: ', max_value)","9d4479ae":"# Normalize images into the interval [0,1]\ny_train = np.array(y_train, np.uint8)\nx_train = np.array(x_train, np.float16) \/ 255.\nprint(\"Shape of the training images array is: \")\nprint(x_train.shape)\nprint(\"Shape of the training labels array is: \")\nprint(y_train.shape)","ce2351c3":"# Split between training and validation sets\nsplit = 35000 # Approx. 86% for training and 14% for validation\nx_train, x_valid, y_train, y_valid = (x_train[:split], x_train[split:], \n                                      y_train[:split], y_train[split:])","058bf53f":"# Create structure of Convolutional Neural Network\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(32, 32, 3)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(17, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', \n              # We NEED binary here, since categorical_crossentropy \n              # l1 norms the output before calculating loss.\n              optimizer='adam',\n              metrics=['accuracy'])","eb419e2f":"# Train model              \nhistory = model.fit(x_train, y_train,\n          batch_size=128,\n          epochs=12,\n          verbose=1,\n          validation_data=(x_valid, y_valid))","a84660f3":"# Plot model accuracy and loss\n\nfig, axs = plt.subplots(1, 2, figsize=(12, 3), sharey=False)\nplt.subplots_adjust(top = 0.99, bottom=0.01, hspace=0.5, wspace=0.4)\n\naxs[0].plot(history.history['acc'])\naxs[0].plot(history.history['val_acc'])\naxs[0].set_title('model accuracy')\naxs[0].set_ylabel('accuracy')\naxs[0].set_xlabel('epoch')\naxs[0].legend(['train', 'test'], loc='upper left')\n\naxs[1].plot(history.history['loss'])\naxs[1].plot(history.history['val_loss'])\naxs[1].set_title('model loss')\naxs[1].set_ylabel('loss')\naxs[1].set_xlabel('epoch')\naxs[1].legend(['train', 'test'], loc='upper left')\nplt.show()","caf6e41c":"# Use the model to predict\np_valid = model.predict(x_valid, batch_size=128)\n\n#np.set_printoptions(precision=2)\nnp.set_printoptions(formatter={'float': '{: 0.3f}'.format})\n\nprint(\"## For a sample of 3 images and the first 5 labels (of 17)\\n\")\nprint(\"True vectorized labels\")\nprint(np.round(y_valid[0:3,0:7]\/1.0,2))\nprint(\"-------------------------------------------------------\")\nprint(\"Predicted vectorized labels\")\nprint(np.round(p_valid[0:3,0:7],2))","fdc91e3f":"# Print validation accuracy\nprint(fbeta_score(y_valid, np.array(p_valid) > 0.2, beta=2, average='samples'))","5bf0012d":"## Preview some images\nMore than 40.000 images in the training set.","ccc3ee11":"### Using jpg images (RGB)","42bcc8d2":"## Image clustering\nUse a t-SNE plot to identify clusters of images. More details on t-SNE [here](https:\/\/lvdmaaten.github.io\/tsne\/).","11b8e2f0":"## Inspect labels","cab4a16e":"## Dataset: Satellite data from the Amazon rainforest\n\nSquare tiles (256x256pix.) of high-resolution, four band (RGB + IR) images from Planet Flock 2 Satellites. Each tile can have multiple (common and less common) labels, but only one of the cloud cover labels.\n\nCommon labels | Less Common Labels | Cloud Cover Labels\n------------ | ------------- | -------------\nPrimary Rain Forest | Slash and Burn | Clear\nWater (Rivers & Lakes) | Selective Logging | Partly cloudy\nHabitation | Blooming | Cloudy\nAgriculture | Conventional Mining | Haze\nRoad | Artisinal Mining |\nCultivation | Blow Down |\nBare Ground | |\n\nMore details about the dataset [here](https:\/\/www.kaggle.com\/c\/planet-understanding-the-amazon-from-space\/data)","1d33c5b9":"## Explore NDVI index for different classes\nThe Normalized Difference Vegetation Index (NDVI) help us to assess vegetation by using information from the Infrared band. More on the NDVI index [here](https:\/\/gisgeography.com\/ndvi-normalized-difference-vegetation-index\/).","fa2293cb":"## Basic image classification with Convolutional Neural Networks","d428842c":"## Import required libraries","22968d53":"# Data exploration and basic ConvNN for Image classification\n\n*University of Waterloo Geospatial Club - Winter 2019*\n\n## [Slides](http:\/\/bit.ly\/geoml-1) and [Kernel](https:\/\/www.kaggle.com\/jrmistry\/uwgeo-club-ml-for-vector-geodata-workshop-1) for the first workshop on Machine Learning for [Vector data](https:\/\/www.kaggle.com\/jrmistry\/killed-or-seriously-injured-ksi-toronto-clean).\n\nThe purpose of the workshop is to give the [UWaterloo](https:\/\/uwaterloo.ca\/) students and the members of the [Geospatial Club](http:\/\/bit.ly\/uwgeospatial) an introduction to the most recent Machine Learning tools for analysis of Geospatial data. The workshop is held in collaboration with the [Geospatial Centre at the University of Waterloo](https:\/\/uwaterloo.ca\/library\/geospatial\/).\n\nWe hope that you will learn something new from the content of this workshop. If you have questions after the workshop, then please feel free to message the Geospatial Club or the workshop presenters.\n\n* [Jaydeep Mistry](https:\/\/www.linkedin.com\/in\/jaydeep-mistry\/) at jaydeep.mistry@uwaterloo.ca\n\n* [Juan Carrillo](https:\/\/www.linkedin.com\/in\/jmcarrillog\/) at jmcarril@uwaterloo.ca\n\n\n\n| *References* |\n------------ |\n[[1]](https:\/\/www.kaggle.com\/c\/planet-understanding-the-amazon-from-space)  | Planet: Understanding the Amazon from Space. Featured Kaggle Competition.\n[[2]](https:\/\/www.kaggle.com\/philschmidt\/multilabel-classification-rainforest-eda) | Kernel by Philipp Schmidt\n[[3]](https:\/\/www.kaggle.com\/ekami66\/0-92837-on-private-lb-solution-with-keras) | Kernel by Tuatini Godard\n[[4]](https:\/\/www.kaggle.com\/anokas\/simple-keras-starter?fbclid=IwAR0ohl2rTL4jajyvL26SDKN8s4ZuZRSU2ir4KShM0Cw1-XRBH5DJ_6zTIpU) | Source code by Mikel Bober\n[[5]](https:\/\/machinelearningmastery.com\/display-deep-learning-model-training-history-in-keras\/) | Source code by Jason Brownlee\n[[6]](https:\/\/gisgeography.com\/ndvi-normalized-difference-vegetation-index\/) | Normalized Difference Vegetation Index (NDVI)\n[[7]](https:\/\/lvdmaaten.github.io\/tsne\/) | t-Distributed Stochastic Neighbor Embedding (t-SNE)\n[[8]](https:\/\/matplotlib.org\/) | Matplotlib documentation\n[[9]](https:\/\/tqdm.github.io\/) | tqdm documentation\n[[10]](https:\/\/docs.scipy.org\/doc\/) | Scipy documentation"}}