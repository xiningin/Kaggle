{"cell_type":{"6416d1e5":"code","8605880b":"code","a267cf35":"code","ab12c3a4":"code","8d77df1f":"code","702aa2fb":"code","471e471e":"code","16b8c230":"code","56e3036e":"code","22c10031":"code","07e20a88":"code","449e941b":"code","58169473":"code","91f86332":"markdown","00cdce88":"markdown","18bfd3de":"markdown","b091f6ac":"markdown","a22e26e0":"markdown"},"source":{"6416d1e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8605880b":"import torch\nimport numpy as np\nimport time\nfrom torchvision.transforms import transforms\nfrom torch.utils.data.sampler import SubsetRandomSampler\nfrom sklearn.model_selection import train_test_split\n\n\ntrain_data = pd.read_csv('..\/input\/digit-recognizer\/train.csv', dtype=np.float32)\ntest_data = pd.read_csv('..\/input\/digit-recognizer\/test.csv', dtype=np.float32)\n\nstart_time = time.time()","a267cf35":"train_Y = train_data['label']\ntrain_X = train_data.drop(labels=['label'], axis=1)\n\ntrain_X = torch.tensor(train_X.values)\ntrain_Y = torch.tensor(train_Y.values)\n\ntrain_set = torch.utils.data.TensorDataset(train_X, train_Y)","ab12c3a4":"num_workers = 0\nbatch_size = 64 # Tama\u00f1o del batch\nvalid_size = 0.2 # Porcentaje de los inputs de entrenamiento, que ser\u00e1n usados para la validaci\u00f3n \n\n# Se obtienen de los datos de entrenamiento, los \u00edndices de los datos que se utilizar\u00e1n para la validaci\u00f3n\nnum_train = len(train_X)\nindices = list(range(num_train))\nnp.random.shuffle(indices)\nsplit = int(np.floor(valid_size * num_train))\ntrain_idx, valid_idx = indices[split:], indices[:split]\n\ntrain_sampler = SubsetRandomSampler(train_idx)\nvalid_sampler = SubsetRandomSampler(valid_idx)\n\n# Se construyen las variables de datos, en base a los \u00edndices de entrenamiento y validaci\u00f3n obtenidos \ntrain_loader = torch.utils.data.DataLoader(train_set, batch_size=batch_size,\n                    shuffle=True, num_workers=num_workers)\nvalid_loader = torch.utils.data.DataLoader(train_set, batch_size=batch_size, \n                    shuffle=True, num_workers=num_workers)","8d77df1f":"import matplotlib.pyplot as plt\n%matplotlib inline\n    \n# Se obtiene un bacth de los datos de entrenamiento \ndataiter = iter(train_loader)\nimages, labels = dataiter.next()\nimages = images.numpy()\nimages = images.reshape(64, 1, 28, 28)\nprint(images.shape)\n\n# Se obtiene una imagen del batch de datos \nimg = np.squeeze(images[0])\n\n# Se imprime la imagen obtenida anteriormente\nfig = plt.figure(figsize = (5,5))\nax = fig.add_subplot(111)\nax.imshow(img, cmap='gray')","702aa2fb":"import torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\n\n\n# Arquitectura del Modelo\nclass Net(nn.Module):\n    \n    def __init__(self):\n        \n        super(Net, self).__init__()\n        \n        self.conv1 = nn.Conv2d(1, 4, 4, stride=1, padding=1)\n        self.bn1 = nn.BatchNorm2d(num_features=4)\n        self.conv2 = nn.Conv2d(4, 8, 4, stride=1, padding=1)\n        self.bn2 = nn.BatchNorm2d(num_features=8)\n        \n        self.fc1 = nn.Linear(8*6*6, 128)\n        self.bn3 = nn.BatchNorm1d(num_features=128)\n        self.fc2 = nn.Linear(128, 64)\n        self.bn4 = nn.BatchNorm1d(num_features=64)\n        self.fc3 = nn.Linear(64, 32)\n        self.bn5 = nn.BatchNorm1d(num_features=32)\n        self.fc4 = nn.Linear(32, 10)\n        \n        self.pool1 = nn.MaxPool2d(2, stride=2)\n        self.pool2 = nn.MaxPool2d(2, stride=2)\n        self.dropout = nn.Dropout(p=0.2)\n\n        \n    def forward(self, x):\n        \n        x = F.relu(self.conv1(x))\n        x = self.bn1(x)\n        x = self.pool1(x)\n        x = F.relu(self.conv2(x))\n        x = self.bn2(x)\n        x = self.pool2(x)\n        \n        x = x.view(-1, 8*6*6)\n        x = F.relu(self.fc1(x))\n        x = self.bn3(x)\n        x = self.dropout(x)\n        x = F.relu(self.fc2(x))\n        x = self.bn4(x)\n        x = self.dropout(x)\n        x = F.relu(self.fc3(x))\n        x = self.bn5(x)\n        x = self.dropout(x)\n        x = F.log_softmax(self.fc4(x), dim=1)\n        \n        return x\n    \n    \nmodel = Net() # Inicializaci\u00f3n del modelo\nprint(model) # Visualizaci\u00f3n del modelo","471e471e":"from torch.autograd import Variable\ntorch.manual_seed(1)\n\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.0005)\nepochs = 30\ntraining_losses, validation_losses, validation_accuracy_list, training_accuracy_list = [], [], [], []\n\nfor epoch in range(epochs):\n\n    training_loss = 0.0\n    validation_loss = 0.0\n    training_accuracy = 0.0\n    validation_accuracy = 0.0\n    \n    # Entrenamiento del Modelo    \n    for images, labels in train_loader:\n        \n        # Se \"limpian\" los gradientes que quedaron almacenados en memoria\n        optimizer.zero_grad()\n        \n        images = Variable(images.view(images.shape[0], 1, 28, 28))\n        labels = labels.type(torch.LongTensor)\n        \n        logps = model(images)\n        \n        # Se calcula el Loss de entrenamiento \n        loss = criterion(logps, labels)\n        \n        # Se aplica Backward Propagation\n        loss.backward()\n        \n        optimizer.step()\n        \n        training_loss += loss.item()\n        \n        # Se calcula el accuracy del entrenamiento\n        top_p, top_class = logps.topk(1, dim=1)\n        equals = top_class == labels.view(*top_class.shape)\n        training_accuracy += torch.mean(equals.type(torch.FloatTensor))\n        \n    else:\n        \n        with torch.no_grad():\n            \n            model.eval()\n            for images, labels in valid_loader:\n                \n                images = Variable(images.view(images.shape[0], 1, 28, 28))\n                labels = labels.type(torch.LongTensor)\n                \n                logps = model(images)\n                loss = criterion(logps, labels)\n                \n                validation_loss += loss.item()\n                \n                # Se calcula el accuracy con los datos usados para la validaci\u00f3n del modelo\n                top_p, top_class = logps.topk(1, dim=1)\n                equals = top_class == labels.view(*top_class.shape)\n                validation_accuracy += torch.mean(equals.type(torch.FloatTensor))\n                \n        training_loss = training_loss\/len(train_loader)\n        validation_loss = validation_loss\/len(valid_loader)\n        training_accuracy = training_accuracy\/len(train_loader)\n        validation_accuracy = validation_accuracy\/len(train_loader)\n        \n        # Se guardan los datos en listas para posteriormente graficarlos\n        training_losses.append(training_loss\/len(train_loader))\n        validation_losses.append(validation_loss\/len(valid_loader))\n        training_accuracy_list.append(training_accuracy*100)\n        validation_accuracy_list.append(validation_accuracy*100)\n        \n        model.train()\n\n    print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n        epoch, \n        training_loss,\n        validation_loss,\n        ))\n    \n    print(f'\\tTraining Accuracy: {training_accuracy*100}%')\n    print(f'\\tValidation Accuracy: {validation_accuracy*100}%')","16b8c230":"from matplotlib import pyplot\n\npyplot.plot(training_losses)\npyplot.plot(validation_losses)\npyplot.title('Train Loss vs Validation Loss')\npyplot.ylabel('Loss')\npyplot.xlabel('Epoch')\npyplot.legend(['Training Loss', 'Validation Loss'], loc='upper right')\npyplot.show()","56e3036e":"pyplot.plot(training_accuracy_list)\npyplot.plot(validation_accuracy_list)\npyplot.title('Train Accuracy vs Validation Accuracy')\npyplot.ylabel('Accuracy')\npyplot.xlabel('Epoch')\npyplot.legend(['Training Accuracy', 'Validation Accuracy'], loc='upper right')\npyplot.show()","22c10031":"test_X = test_data.loc[:,test_data.columns != \"label\"].values\n\ntest_set = torch.from_numpy(test_X)\n\ntest_loader = torch.utils.data.DataLoader(test_set, batch_size=batch_size, \n                    shuffle=False, num_workers=num_workers)","07e20a88":"predictions = []\n\nwith torch.no_grad():\n    \n    model.eval()\n\n    # Test del Modelo    \n    for images in test_loader:\n\n        images = Variable(images.view(images.shape[0], 1, 28, 28))\n        output = model(images)\n        ps = torch.exp(output)\n        top_p, top_class = ps.topk(1, dim=1)\n        predictions += top_class.numpy().tolist()\n\nresults = np.array(predictions).flatten()\nprint(len(results))","449e941b":"submissions = pd.DataFrame({'ImageId': list(range(1, len(results) + 1)),\n                            'Label': results})\n\nsubmissions.to_csv(\"my_submissions.csv\", index=False, header=True)","58169473":"print('Tiempo de Ejecuci\u00f3n del Notebook (en segundos): ', (time.time() - start_time))","91f86332":"**Resultado del Modelo**","00cdce88":"**Visualizaci\u00f3n los Datos**","18bfd3de":"**Arquitectura del Modelo**","b091f6ac":"**Preprocesamiento de Datos**","a22e26e0":"**Entrenamiento el Modelo**"}}