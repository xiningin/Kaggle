{"cell_type":{"16243b30":"code","217b7f30":"code","6b753aa1":"code","b453744e":"code","791ad834":"code","c89e7f94":"code","94742b44":"code","fe7d237c":"code","6ca17141":"code","ce49cd1b":"code","075f12c5":"code","c151429a":"code","2ab16042":"code","8b644fd4":"code","6ba585a0":"code","f70d3e11":"markdown","8adec737":"markdown","552d7e7c":"markdown","a1008f3c":"markdown"},"source":{"16243b30":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","217b7f30":"raw= pd.read_csv('\/kaggle\/input\/sales-performance-report-dqlab-store\/raw_data.csv')\nraw","6b753aa1":"raw.columns","b453744e":"raw[' order_id | order_status    | customer               | order_date | order_quantity | sales     | discount | discount_value | product_category | product_sub_category           |']","791ad834":"df=pd.DataFrame()\ndf['Order_id']=raw[' order_id | order_status    | customer               | order_date | order_quantity | sales     | discount | discount_value | product_category | product_sub_category           |']\ndf.head()","c89e7f94":"print(df['Order_id'][2:3])","94742b44":"### Droping 1st index as it has data different than rest of data set\n\ndf.drop(0, axis=0, inplace=True)","fe7d237c":"df['Order_id'].str.split('|',1).head()","6ca17141":"df= df['Order_id'].str.split('|',11,expand=True)\ndf.head()","ce49cd1b":"df.columns","075f12c5":"### Seperate the index\nindex= raw.columns.str.split('|',11,expand=True)\nk= index.tolist()\nprint(k,'\\n')\n# remove trailing white spaces\n'''k2 = k.strip()\nprint(k2)'''; \n### I tried to clean this list only so that I could rename the columns of dataframe directly through this \n### But I failed thus copied the elements manually and substitute it in df","c151429a":"### Droping all blank columns\ndf.drop({0,11}, axis=1, inplace=True)","2ab16042":"\nl=['order_id ', 'order_status', ' customer', ' order_date ', ' order_quantity ', ' sales', ' discount ', ' discount_value ', ' product_category ', ' product_sub_category']\n### upgrading column name through list [JUST MAKE SURE no of columns = elements in list]\ndf.columns= l","8b644fd4":"df","6ba585a0":"# Our Desired output was this \ndf1= pd.read_csv('..\/input\/sales-performance-report-dqlab-store\/clean_data.csv')\ndf1","f70d3e11":"#### Did u sea when we set n=1 we surpass 1 delimiter so lets try 10 as we know there are 10 columns\n\n* Series.str.split(pat=None, n=- 1, expand=False)\nSplits the string in the Series\/Index from the beginning, at the specified `delimiter string`. Equivalent to str.split().  \n* **pat**: str, optional\n    String or regular expression to split on. If not specified, split on whitespace.\n\n* **n**: int, default -1 (all)\n    Limit number of splits in output. None, 0 and -1 will be interpreted as return all splits.\n\n* **expand**: bool, default False\n    > Expand the split strings into separate columns.\n        If **True**, return DataFrame\/MultiIndex **expanding dimensionality**.\n        If **False**, return Series\/Index, containing lists of strings.\n\n**Returns**\nSeries, Index, DataFrame or MultiIndex  \nType matches caller unless expand=True   ","8adec737":"# Further we can **Automate column name though list** and also we can change 'order_date' dtype to datetime from obj","552d7e7c":"###  Ok we can see this has a strange column name with odd spacing and all, So I am thinking to `store this in new df` for my ease","a1008f3c":"## Oh yeah it was easy \n## Now we all we need to rename the column names and drop last column and we are done"}}