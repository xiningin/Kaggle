{"cell_type":{"27647c04":"code","86c0fee1":"code","b9ecfb39":"code","1d8a1726":"code","c8c2626f":"code","f423a26a":"code","88c4c9b4":"code","33b4c223":"code","851ba50e":"code","fcfc2973":"code","514b22f0":"code","87a3f039":"code","07d02222":"code","f3edf53a":"code","58ed7dd6":"code","dbd50dc1":"code","832d4f26":"code","45bbf16d":"code","5f9b5e75":"code","edbf470a":"code","870ed719":"code","819dbdf9":"code","91e6f9d1":"code","eeeff3a0":"code","d4fde44d":"code","6d288129":"code","6be696f3":"code","81ebc2b1":"code","41ca0709":"code","b25c7a30":"code","b6535403":"code","664cedc6":"code","acfa3132":"code","12e00688":"code","54b1ee5e":"code","fb19b90d":"code","87f5b12f":"code","8f73197c":"code","a4110be8":"code","ffd321bb":"code","b9748477":"code","cd7e514d":"code","fd703af9":"code","010f3267":"code","cbe58ef5":"code","b13ddf58":"code","1f246582":"code","d272e4c3":"code","8ea50e5c":"code","2e3678e1":"code","d2217b04":"code","2938f953":"code","a6948712":"code","3c2fcea0":"code","25a4f34a":"code","0e013017":"code","2bcbe9e5":"markdown","c5e56525":"markdown","50c4e8dd":"markdown","13691ccb":"markdown","2e7a839f":"markdown","3642e063":"markdown","1c13d351":"markdown","84ca853e":"markdown","9cc44838":"markdown","d132779c":"markdown","8e9dbaa7":"markdown","1c207165":"markdown","00bec550":"markdown","78e3e60d":"markdown","bcb2487b":"markdown","4c659845":"markdown","6245055e":"markdown","ea7568fc":"markdown","677b69ff":"markdown","07062c44":"markdown","fada16a6":"markdown","7e5e15ad":"markdown","414613ff":"markdown","3cea510c":"markdown","5a6c0a78":"markdown","c8f708b5":"markdown","b9dd24f9":"markdown","5c71a6e3":"markdown","40cc65a9":"markdown","ede37e88":"markdown","60aac337":"markdown","d9c39cbb":"markdown","a8d712e8":"markdown","17bacc8f":"markdown","09034e33":"markdown","67e7b30b":"markdown","3755732b":"markdown","08e10b7a":"markdown"},"source":{"27647c04":"#import warnings\nimport warnings\nwarnings.filterwarnings('ignore')","86c0fee1":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","b9ecfb39":"#read the file\nfish_data = pd.read_csv('..\/input\/fish-market\/Fish.csv')\nfish_data.head()","1d8a1726":"#shape of the df:\nfish_data.shape","c8c2626f":"#info of the df\nfish_data.info()","f423a26a":"fish_data.describe(percentiles = [0.05,0.10,0.25,0.50,0.75,0.90,0.99])","88c4c9b4":"#let us check for null\nfish_data.isnull().sum()","33b4c223":"fish_data.Species.value_counts()","851ba50e":"sns.countplot(data = fish_data, x = 'Species')","fcfc2973":"sns.pairplot(data= fish_data, x_vars = ['Length1','Length2','Length3','Height','Width'], y_vars = 'Weight', hue = 'Species')","514b22f0":"#let us check the correlation\nsns.heatmap(fish_data.corr(), annot = True)","87a3f039":"#Variable Weight\nsns.boxplot(fish_data['Weight'])","07d02222":"#checking outlier rows\nfish_weight = fish_data['Weight']\nQ3 = fish_weight.quantile(0.75)\nQ1 = fish_weight.quantile(0.25)\nIQR = Q3-Q1\nlower_limit = Q1 -(1.5*IQR)\nupper_limit = Q3 +(1.5*IQR)","f3edf53a":"weight_outliers = fish_weight[(fish_weight <lower_limit) | (fish_weight >upper_limit)]\nweight_outliers","58ed7dd6":"sns.boxplot(fish_data['Length1'])","dbd50dc1":"#checking outlier rows\nfish_Length1 = fish_data['Length1']\nQ3 = fish_Length1.quantile(0.75)\nQ1 = fish_Length1.quantile(0.25)\nIQR = Q3-Q1\nlower_limit = Q1 -(1.5*IQR)\nupper_limit = Q3 +(1.5*IQR)\nlength1_outliers = fish_Length1[(fish_Length1 <lower_limit) | (fish_Length1 >upper_limit)]\nlength1_outliers","832d4f26":"sns.boxplot(fish_data['Length2'])","45bbf16d":"#checking outlier rows\nfish_Length2 = fish_data['Length2']\nQ3 = fish_Length2.quantile(0.75)\nQ1 = fish_Length2.quantile(0.25)\nIQR = Q3-Q1\nlower_limit = Q1 -(1.5*IQR)\nupper_limit = Q3 +(1.5*IQR)\nlength2_outliers = fish_Length2[(fish_Length2 <lower_limit) | (fish_Length2 >upper_limit)]\nlength2_outliers","5f9b5e75":"sns.boxplot(fish_data['Length3'])","edbf470a":"#checking outlier rows\nfish_Length3 = fish_data['Length3']\nQ3 = fish_Length3.quantile(0.75)\nQ1 = fish_Length3.quantile(0.25)\nIQR = Q3-Q1\nlower_limit = Q1 -(1.5*IQR)\nupper_limit = Q3 +(1.5*IQR)\nlength3_outliers = fish_Length3[(fish_Length3 <lower_limit) | (fish_Length3 >upper_limit)]\nlength3_outliers","870ed719":"sns.boxplot(fish_data['Height'])","819dbdf9":"sns.boxplot(fish_data['Width'])","91e6f9d1":"fish_data[142:145]","eeeff3a0":"#let us drop these rows:\ndf = fish_data.drop([142,143,144])","d4fde44d":"# let us check our df after removal of outliers\ndf.describe(percentiles = [0.05,0.10,0.25,0.50,0.75,0.90,0.99])","6d288129":"#creating dummies - to handle categorical variable.\n#species_dummies = pd.get_dummies(df['Species'], prefix = 'Species' , drop_first = True)","6be696f3":"# final_df = pd.concat([df,species_dummies], axis =1)\n# final_df.head()","81ebc2b1":"#dropping the original column as we have created dummies\n#final_df = final_df.drop(['Species'], axis =1)","41ca0709":"#final_df.shape","b25c7a30":"df_train, df_test = train_test_split(df, train_size = 0.7, test_size = 0.3, random_state =100)","b6535403":"df_train.shape","664cedc6":"df_test.shape","acfa3132":"scaler = StandardScaler()","12e00688":"scaling_columns = ['Weight', 'Length1','Length2','Length3','Height','Width']\ndf_train[scaling_columns] = scaler.fit_transform(df_train[scaling_columns])\ndf_train.describe()","54b1ee5e":"y_train = df_train['Weight']\nX_train = df_train.iloc[:,2:7]","fb19b90d":"X_train.head()","87f5b12f":"X_train_sm = sm.add_constant(X_train)\nmodel1 = sm.OLS(y_train,X_train_sm).fit()","8f73197c":"print(model1.summary())","a4110be8":"VIF = pd.DataFrame()\nVIF['Features'] = X_train.columns\nVIF['vif'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nVIF['vif'] = round(VIF['vif'] ,2)\nVIF = VIF.sort_values(by='vif',ascending = False)\nVIF","ffd321bb":"X2 = X_train.drop(['Length2'], axis =1)\nX2_sm = sm.add_constant(X2)\n\nmodel2 = sm.OLS(y_train,X2_sm).fit()","b9748477":"print(model2.summary())","cd7e514d":"#vif\nVIF = pd.DataFrame()\nVIF['Features'] = X2.columns\nVIF['vif'] = [variance_inflation_factor(X2.values, i) for i in range(X2.shape[1])]\nVIF['vif'] = round(VIF['vif'] ,2)\nVIF = VIF.sort_values(by='vif',ascending = False)\nVIF","fd703af9":"X3 = X2.drop(['Length3'], axis =1)\nX3_sm = sm.add_constant(X3)\n\nmodel3 = sm.OLS(y_train,X3_sm).fit()","010f3267":"print(model3.summary())","cbe58ef5":"#vif\nVIF = pd.DataFrame()\nVIF['Features'] = X3.columns\nVIF['vif'] = [variance_inflation_factor(X3.values, i) for i in range(X3.shape[1])]\nVIF['vif'] = round(VIF['vif'] ,2)\nVIF = VIF.sort_values(by='vif',ascending = False)\nVIF","b13ddf58":"y_train_pred = model3.predict(X3_sm)\ny_train_pred.head()","1f246582":"residual = y_train - y_train_pred\nsns.distplot(residual)","d272e4c3":"#plotting y_train and y_train_pred\nc = [i for i in range(1,110,1)]\nplt.plot(c, y_train,color = 'Blue')\nplt.plot(c, y_train_pred,color = 'red')\nplt.title('Test(Blue) vs pred(Red)')","8ea50e5c":"# treating test columns same way as train dataset\ndf_test[scaling_columns] = scaler.transform(df_test[scaling_columns])\ndf_test.describe()","2e3678e1":"y_test = df_test['Weight']\nX_test = df_test.iloc[:,2:7]","d2217b04":"cols = X3.columns\ncols","2938f953":"# considering only those columns which was part of our model 3.\nX_test = X_test[cols]\nX_test.columns","a6948712":"#predicting\nX_test_sm = sm.add_constant(X_test)\ny_pred = model3.predict(X_test_sm)","3c2fcea0":"y_pred.head()","25a4f34a":"r_square = r2_score(y_test,y_pred)\nr_square","0e013017":"#plotting y_test and y_pred\nc = [i for i in range(1,48,1)]\nplt.plot(c, y_test,color = 'Blue')\nplt.plot(c, y_pred,color = 'red')\nplt.title('Test(Blue) vs pred(Red)')","2bcbe9e5":"As we see, our dependent variable-'weight' has linear relationship with all other variables.","c5e56525":"Model 3 has all significant variables. All the VIF values and p-values are in a good range. Also the Adjusted R-squared is 88.7%. This model is explaining most of the variance without being too complex.","50c4e8dd":"#### Model 3:","13691ccb":"So our equation is:","2e7a839f":"#### Making Predictions:","3642e063":"Let us drop the column Length3 as it has high VIF.","1c13d351":"We see three rows with outliers value.","84ca853e":"#### Data prepartion:","9cc44838":"6. `Height` column:","d132779c":"#### Model building:","8e9dbaa7":"Let us drop the column Length2 as it has high VIF and p-value.","1c207165":"We see few outliers. Let us check the row with outliers value:","00bec550":"7. `Width` column:","78e3e60d":"#### Evaluating:","bcb2487b":"We see some 7 variety of fish species.","4c659845":"1. `Species` column:","6245055e":"We see some high p-values. Certainly certain variables are insignificant. Let us calculate VIF.","ea7568fc":"The aim is to predict the weight of fish.","677b69ff":"Error term is normally distributed.","07062c44":"#### Model 1:","fada16a6":"#### Model 2:","7e5e15ad":"3. `Length1` column:","414613ff":"#### Rescaling the data:\nAs we see columns with different place value. Let us rescale it:","3cea510c":"#### Weight = 0.00000000000000000633 + 0.4184 * Length1 + Height * 0.2538 + Width * 0.3512","5a6c0a78":"We see that all the outliers of the data set line in the row 142 to 144.","c8f708b5":"Let us initial build the model with statsmodel.api :","b9dd24f9":"#### Let us understand the data given:","5c71a6e3":"## Multiple Linear Regression:","40cc65a9":"Looking at the graph we see that, the peak values are not explained properly by the model.","ede37e88":"5. `Length3` column:","60aac337":"From the above graph we see that- lower and upper tips are not predicted properly by the model.","d9c39cbb":"2. `Weight` column:","a8d712e8":"#### Residual analysis:","17bacc8f":"There is no null in the data set.","09034e33":"We see that there are high correlation between variables going on.","67e7b30b":"#### Let us split the data into train and test data:","3755732b":"Our Adj.R-square for train set is 88.7% and R-square for test set is 88.39%.","08e10b7a":"4. `Length2` column:"}}