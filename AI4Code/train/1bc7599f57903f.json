{"cell_type":{"a8e580a9":"code","cad2f028":"code","1dadff64":"code","5e2218bd":"code","daab5aaa":"code","df82146c":"code","36099916":"code","0b2adc40":"code","d32b9fa2":"code","e33f656e":"code","5bec08a2":"code","dd9f80f6":"code","ae754792":"code","4c901859":"code","b3d97b01":"code","a1d76b70":"markdown","293b51c9":"markdown","5fbb64a3":"markdown","d2fb531e":"markdown","08eaef22":"markdown","5c955215":"markdown","db706fd6":"markdown","4e7bf162":"markdown","7bd730fc":"markdown","23f9014d":"markdown","c1a0440f":"markdown","121e4cf1":"markdown","8ec0a9c7":"markdown"},"source":{"a8e580a9":"import numpy as np\nimport pandas as pd ","cad2f028":"train = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/test.csv\")","1dadff64":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\ntrain = reduce_memory_usage(train)\ntest = reduce_memory_usage(test)","5e2218bd":"train.head(10)","daab5aaa":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","df82146c":"train[\"target\"].unique()","36099916":" !pip install pycaret","0b2adc40":"import pycaret\nfrom pycaret.classification import *","d32b9fa2":"classification  = setup(data=train, \n             target = 'target',                # Use your target variable.\n             session_id=123, \n             log_experiment=True, \n             experiment_name='experiment1',     # Use any experiment name.\n             silent=True ,                      # Runs the command without user input. \n#              remove_outliers=True,\n             normalize=True,\n             transformation=True,\n             use_gpu = True\n#              pca = True,\n#              pca_components=200\n            )","e33f656e":"best = compare_models(sort = 'AUC',n_select=2, fold = 5,include = ['lightgbm','xgboost','catboost'])","5bec08a2":"print('Blending Models....')\nblended = blend_models(estimator_list= best,fold=5, optimize='AUC')","dd9f80f6":"pred_holdout = predict_model(blended)","ae754792":"final_model = finalize_model(blended)","4c901859":"print('Done...!!!')\npred_esb = predict_model(final_model, test)\npredictLabel = pred_esb['Label']","b3d97b01":"output = pd.read_csv(\"..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv\")\noutput[\"target\"] = predictLabel\noutput.to_csv('automl_submission.csv', index=False)","a1d76b70":"# load pycaret","293b51c9":"# load Data","5fbb64a3":"# check target data","d2fb531e":"# make pycaret model","08eaef22":"# delete id column","5c955215":"# import basic ","db706fd6":"# predict models","4e7bf162":"# install pycaret ","7bd730fc":"# submission","23f9014d":"# compare models\n","c1a0440f":"# blend models","121e4cf1":"# predict test data","8ec0a9c7":"# finalize model "}}