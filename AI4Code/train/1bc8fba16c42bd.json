{"cell_type":{"f6c1f4d4":"code","20a8c8ee":"code","57c76b54":"code","3d84963f":"code","f5d3a390":"code","2eb0858c":"code","e004eec5":"code","fb8ca6e3":"code","8b9cef85":"code","256b21c7":"code","294e8b01":"code","9c607101":"code","8de5205e":"code","76345ca2":"code","922fb26a":"code","62294634":"code","69e1ea72":"markdown","41a7c8d6":"markdown","7f8c5ae6":"markdown","d524abc7":"markdown","d7b04fc8":"markdown","3ad6b568":"markdown","3eddf8cd":"markdown","942a481b":"markdown","ea186cfb":"markdown","d3586ddc":"markdown","4de563bd":"markdown"},"source":{"f6c1f4d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sympy import isprime, primerange\nfrom math import sqrt\nfrom sklearn.neighbors import KDTree\nimport matplotlib.pyplot as plt\nfrom matplotlib.path import Path\n# For busy visualizations\nplt.rcParams['agg.path.chunksize'] = 10000\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","20a8c8ee":"# Loading cities and defining primes\ncities = pd.read_csv('..\/input\/traveling-santa-2018-prime-paths\/cities.csv', index_col=['CityId'])\nXY = np.stack((cities.X.astype(np.float32), cities.Y.astype(np.float32)), axis=1)\nis_not_prime = np.array([0 if isprime(i) else 1 for i in cities.index], dtype=np.int32)\nis_prime = np.array([1 if isprime(i) else 0 for i in cities.index], dtype=np.int32)","57c76b54":"# Using a KD Tree to identify nearest neighbours:\nkdt = KDTree(XY)","3d84963f":"# Find 3 nearest neighbors (including city itself)\ndists, neibs = kdt.query(XY, 3)","f5d3a390":"# List of neighbours\nneibs","2eb0858c":"# List of distances\ndists","e004eec5":"## Lower bound per city\narr_LB = 0.5 * (dists[:, 1] + dists[:, 2])","fb8ca6e3":"## Lower path distance\npath_LB_score = np.sum(arr_LB)\nprint('Theoretical Lower Bound path would score {}.'.format(path_LB_score))","8b9cef85":"# Loading a path from public kernels as an example\npath = np.array(pd.read_csv('..\/input\/dp-shuffle-by-blacksix\/DP_Shuffle.csv').Path)","256b21c7":"# Because I am not very efficient and piecing up parts of different kernels together I will reload primes\n# Load the prime numbers we need in a set with the Sieve of Eratosthenes\ndef eratosthenes(n):\n    P = [True for i in range(n+1)]\n    P[0], P[1] = False, False\n    p = 2\n    l = np.sqrt(n)\n    while p < l:\n        if P[p]:\n            for i in range(2*p, n+1, p):\n                P[i] = False\n        p += 1\n    return P\n\ndef load_primes(n):\n    return set(np.argwhere(eratosthenes(n)).flatten())\n\nPRIMES = load_primes(cities.shape[0])","294e8b01":"# Running the list of distances in & out for each city in the path (as well as overall score to double check)\ncoord = cities[['X', 'Y']].values\nscore = 0\narr_perfo = np.copy(arr_LB)\nfor i in range(1, len(path)):\n    begin = path[i-1]\n    end = path[i]\n    distance = np.linalg.norm(coord[end] - coord[begin])\n    if i%10 == 0:\n        if begin not in PRIMES:\n            distance *= 1.1\n    score += distance\n    arr_perfo[begin] -= distance\/2\n    arr_perfo[end] -= distance\/2\nprint('Path score: {}.'.format(score))","9c607101":"# This gives a list of \"inefficiencies\" per city\narr_perfo","8de5205e":"# Difference between \"Lower Bound\" path and current path\nnp.sum(arr_perfo)","76345ca2":"sq_perfo = arr_perfo * arr_perfo","922fb26a":"## Scatter Plot\ncities.plot.scatter(x='X', y='Y', s=sq_perfo , figsize=(15, 10), c=sq_perfo, cmap='Reds' )\nnorth_pole = cities.iloc[0]\nplt.scatter(north_pole.X, north_pole.Y, c='red', s=15)\nplt.axis('off')\nplt.show()","62294634":"# Loading a path from public kernels as an example\npath = np.array(pd.read_csv('..\/input\/lkh-solver-by-aguiar\/LKH_Solver.csv').Path)\nscore = 0\narr_perfo = np.copy(arr_LB)\n\nfor i in range(1, len(path)):\n    begin = path[i-1]\n    end = path[i]\n    distance = np.linalg.norm(coord[end] - coord[begin])\n    if i%10 == 0:\n        if begin not in PRIMES:\n            distance *= 1.1\n    score += distance\n    arr_perfo[begin] -= distance\/2\n    arr_perfo[end] -= distance\/2\nprint('Path score: {}.'.format(score))\n\nsq_perfo = arr_perfo * arr_perfo\n\n## Scatter Plot\ncities.plot.scatter(x='X', y='Y', s=sq_perfo , figsize=(15, 10), c=sq_perfo, cmap='Reds' )\nnorth_pole = cities.iloc[0]\nplt.scatter(north_pole.X, north_pole.Y, c='red', s=15)\nplt.axis('off')\nplt.show()","69e1ea72":"Path tested: DP Shuffle by blacksix","41a7c8d6":"In this kernel I will try to analyze path performance by establishing a lower bound and comparing paths against it. Ideally, this could be used to identify regions of the path with low performance and focus on them for optimization.","7f8c5ae6":"Interesting to see how similar are those red circles, isn't it ?\nNext step would be to focus on reducing their diameter \/ color...","d524abc7":"Data can then be used in a plot to illustrate cities where path is less efficient.\nPlot will represent absolute differences as a small improvement on a long leg is much more important than a great improvement on a short leg.\nI'm using the square \"efficiency\" to accentuate the differences.","d7b04fc8":"## Path evaluation","3ad6b568":"First step is to identify the 2 closest neighbours for each city.\nTo do so, I am honestly copying the methods from Kostya Atarik (thanks for sharing your work).","3eddf8cd":"I am calculating the Lower Bound for the total path as the sum for each city of the shortest way in and shortest way out divided by 2. It assumes only prime cities are visited on 10th step so penalties are not considered.","942a481b":"Quick check on a less efficient path: LKH Solver by Aguiar","ea186cfb":"## Lower Bound and Path Performance Indicator","d3586ddc":"Probably because of rounding issues, some cities have positive scores meaning they are beating the Lower Bound, which should not be possible.","4de563bd":"Based on this lower bound, path performance can be reviewed in terms of efficiency."}}