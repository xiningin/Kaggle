{"cell_type":{"2d009d92":"code","f5033368":"code","602ff069":"code","e25dee9a":"code","c577750b":"code","bf36e8e5":"code","1eadd34c":"code","a346a327":"code","648999bb":"code","9c648963":"code","23e9f93c":"code","644f561c":"code","2dc979c4":"code","1e4cc59b":"code","c175ca64":"code","d813670b":"markdown","4fded6fb":"markdown","8ddce33e":"markdown","22ba61d3":"markdown","3a951cc2":"markdown","945f1d8e":"markdown","97173119":"markdown","2dfbf20b":"markdown","486d3035":"markdown","a6df067e":"markdown","3bcb84c6":"markdown","00bca36d":"markdown"},"source":{"2d009d92":"import plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(\n    df, x='total_bill', y='tip', opacity=0.65,\n    trendline='ols', trendline_color_override='darkblue'\n)\nfig.show()","f5033368":"import plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_col=\"smoker\", color=\"sex\", trendline=\"ols\")\nfig.show()\n\nresults = px.get_trendline_results(fig)\nprint(results)\n\nresults.query(\"sex == 'Male' and smoker == 'Yes'\").px_fit_results.iloc[0].summary()","602ff069":"import plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", symbol=\"smoker\", color=\"sex\", trendline=\"ols\", trendline_scope=\"overall\")\nfig.show()","e25dee9a":"import plotly.express as px\n\ndf = px.data.tips()\nfig = px.scatter(df, x=\"total_bill\", y=\"tip\", facet_col=\"smoker\", color=\"sex\", \n                 trendline=\"ols\", trendline_scope=\"overall\", trendline_color_override=\"black\")\nfig.show()","c577750b":"import plotly.express as px\n\ndf = px.data.gapminder(year=2007)\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", \n                 trendline=\"ols\", trendline_options=dict(log_x=True),\n                 title=\"Log-transformed fit on linear axes\")\nfig.show()","bf36e8e5":"import plotly.express as px\n\ndf = px.data.gapminder(year=2007)\nfig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", log_x=True, \n                 trendline=\"ols\", trendline_options=dict(log_x=True),\n                 title=\"Log-scaled X axis and log-transformed fit\")\nfig.show()","1eadd34c":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"lowess\")\nfig.show()","a346a327":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"lowess\", trendline_options=dict(frac=0.1))\nfig.show()","648999bb":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", trendline_options=dict(window=5),\n                title=\"5-point moving average\")\nfig.show()","9c648963":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"ewm\", trendline_options=dict(halflife=2),\n                title=\"Exponentially-weighted moving average (halflife of 2 points)\")\nfig.show()","23e9f93c":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"expanding\", title=\"Expanding mean\")\nfig.show()","644f561c":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", trendline_options=dict(function=\"median\", window=5),\n                title=\"Rolling Median\")\nfig.show()","2dc979c4":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"expanding\", trendline_options=dict(function=\"max\"),\n                title=\"Expanding Maximum\")\nfig.show()","1e4cc59b":"import plotly.express as px\n\ndf = px.data.stocks(datetimes=True)\nfig = px.scatter(df, x=\"date\", y=\"GOOG\", trendline=\"rolling\", \n                 trendline_options=dict(window=5, win_type=\"gaussian\", function_args=dict(std=2)),\n                title=\"Rolling Mean with Gaussian Window\")\nfig.show()","c175ca64":"import plotly.express as px\n\ndf = px.data.stocks(indexed=True, datetimes=True)\nfig = px.scatter(df, trendline=\"rolling\", trendline_options=dict(window=5),\n                title=\"5-point moving average\")\nfig.data = [t for t in fig.data if t.mode == \"lines\"]\nfig.update_traces(showlegend=True) #trendlines have showlegend=False by default\nfig.show()","d813670b":"# Moving Averages\n> #### Plotly Express can leverage Pandas' rolling, ewm and expanding functions in trendlines as well, for example to display moving averages. \n> #### Values passed to trendline_options are passed directly to the underlying Pandas function (with the exception of the function and function_options keys, see below).","4fded6fb":"# OLS Parameters\n> #### OLS trendlines can be fit with log transformations to both X or Y data using the trendline_options argument, independently of whether or not the plot has logarithmic axes.","8ddce33e":"# Ordinary Least Square (OLS) with plotly.express\n> #### This example shows how to use plotly.express's trendline parameter to train a simply Ordinary Least Square (OLS) \n#### for predicting the tips waiters will receive based on the value of the total bill.[Click Here to Know More](https:\/\/plotly.com\/python\/linear-fits\/)","22ba61d3":"# Fitting multiple lines and retrieving the model parameters\n> ### Plotly Express will fit a trendline per trace, and allows you to access the underlying model parameters for all the models.","3a951cc2":"# Linear Regression\n> ### Linear Regression is a machine learning algorithm based on supervised learning.\n> ### Linear regression performs the task to predict a dependent variable value (y) based on a given independent variable (x).\n> ### So, this regression technique finds out a linear relationship between x (input) and y(output).","945f1d8e":"# Displaying a single trendline with multiple traces\n> #### To display a single trendline using the entire dataset, set the trendline_scope argument to \"overall\". \n> #### The same trendline will be overlaid on all facets and animation frames. The trendline color can be overridden with trendline_color_override.","97173119":"# [Link to Plottly Linear Plots](https:\/\/plotly.com\/python\/linear-fits\/)\n# [ML Regression in Python](https:\/\/plotly.com\/python\/ml-regression\/)","2dfbf20b":"The level of smoothing can be controlled via the frac trendline option, which indicates the fraction of the data that the LOWESS smoother should include. The default is a fairly smooth line with frac=0.6666 and lowering this fraction will give a line that more closely follows the data.","486d3035":"# Locally WEighted Scatterplot Smoothing (LOWESS)\n> #### Plotly Express also supports non-linear LOWESS trendlines. In order use this feature, you will need to install statsmodels and its dependencies.","a6df067e":"# Other Functions\n> #### The rolling, expanding and ewm trendlines support other functions than the default mean, enabling, for example, a moving-median trendline, or an expanding-max trendline.","3bcb84c6":"# Displaying only the trendlines\n> #### In some cases, it may be desirable to show only the trendlines, by removing the scatter points","00bca36d":"In some cases, it is necessary to pass options into the underying Pandas function, for example the std parameter must be provided if the win_type argument to rolling is \"gaussian\". This is possible with the function_args trendline option."}}