{"cell_type":{"3dac1781":"code","3dd92aa6":"code","1b78890b":"code","9403dd2b":"code","ea7b072e":"code","c773eaa5":"code","6a9a1b79":"code","8f456091":"code","caeb823d":"code","b8b8a452":"code","1ed64880":"code","2ce304c6":"code","9a04fdac":"code","ba77aa7f":"code","c2ff5c05":"code","2710edfa":"code","1281bebb":"code","674edb29":"code","5eb07c22":"code","7c3496d5":"code","19639187":"code","a069d4fa":"code","698d776a":"code","7cf1058f":"code","eb7d0b29":"code","1f004102":"code","6a9a049f":"code","9bb32241":"code","d62f7be9":"code","967816c7":"code","fc410b4b":"code","74b27262":"code","0e1ea4d0":"code","c2f4de4f":"code","8499feec":"code","07b10c47":"code","c0768ee9":"code","bbcd286c":"code","c8a41310":"code","a14c83a4":"code","226ff769":"code","13058253":"code","bd11db9c":"code","e2583243":"code","8f104259":"code","05bee032":"code","0ce9c578":"code","65330136":"code","bb6b63ca":"code","5e34ca49":"code","97e8b08b":"code","0afe1eaf":"code","bb683340":"code","392f8d61":"code","fd980933":"code","e22ad856":"code","0f997455":"code","dd556883":"code","577d25c8":"code","683cce36":"code","5475df96":"code","9bf1faf8":"code","9dfb801d":"code","12200916":"code","2c995735":"code","6430ca04":"code","80646c9c":"code","793aaef7":"code","65efa38d":"code","b45b72be":"code","3c21dee9":"code","6f338b79":"code","a26cda46":"code","919aeebf":"markdown","bb956674":"markdown","947c4d0e":"markdown","eb529a05":"markdown","6e1a7927":"markdown","0d94b956":"markdown","f513e11b":"markdown","b16d2676":"markdown","cadcba8a":"markdown","bd91c395":"markdown","0099bc28":"markdown","0ff801b2":"markdown","740eb74c":"markdown","cce14311":"markdown","ed4318be":"markdown","44d2ce85":"markdown","f5136469":"markdown","eb862686":"markdown","ab7926fa":"markdown","e46128df":"markdown","243a04b1":"markdown","5e616f62":"markdown"},"source":{"3dac1781":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3dd92aa6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","1b78890b":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf = train_df.append(test_df,ignore_index = True)","9403dd2b":"train_df.shape","ea7b072e":"test_df.shape","c773eaa5":"df.shape","6a9a1b79":"df.head()","8f456091":"df.describe()","caeb823d":"# Null investigate\nsns.heatmap(train_df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b8b8a452":"df.info()","1ed64880":"# Age: filling with average ages\ndf['Age']=df['Age'].fillna(df['Age'].mean())","2ce304c6":"# Fare: filling with average fare\ndf['Fare'] = df['Fare'].fillna(df['Fare'].mean())","9a04fdac":"# Embarked: filling with the most common departure place\ndf['Embarked'].value_counts()","ba77aa7f":"df['Embarked'] = df['Embarked'].fillna('S')","c2ff5c05":"# Cabin: filling with unknown item \"U\"\ndf['Cabin'] = df['Cabin'].fillna('U')","2710edfa":"df.info()","1281bebb":"df.head()","674edb29":"#Pclass\npclass_df=pd.DataFrame()\npclass_df=pd.get_dummies(df['Pclass'], prefix='Pclass')\npclass_df.head()","5eb07c22":"df = pd.concat([df,pclass_df],axis=1)\ndf.drop('Pclass',axis=1,inplace=True)\ndf.head()","7c3496d5":"# Sex\nsex_map={'male':1,'female':0}\ndf['Sex'] = df['Sex'].map(sex_map)\ndf.head()","19639187":"# Embarked\nembarked_df=pd.DataFrame()\nembarked_df=pd.get_dummies(df['Embarked'],prefix='Embarked')\nembarked_df.head()","a069d4fa":"df = pd.concat([df,embarked_df],axis=1)\ndf.drop('Embarked',axis=1,inplace=True)\ndf.head()","698d776a":"df['Name'][0:20]\n","7cf1058f":"df['Name'][0].split(',') #Split the last name and the title with first Name","eb7d0b29":"df['Name'][0].split(',')[1].split('.') #Splite the title from the [1] index","1f004102":"df['Name'][0].split(',')[1].split('.')[0].strip() #Remove any space","6a9a049f":"# Make a function\ndef get_title(name):\n    str1=name.split(',')[1]\n    str2=str1.split('.')[0]\n    str3=str2.strip()\n    return str3","9bb32241":"# Apply the function\ntitle_df=pd.DataFrame()\ntitle_df['Title'] = df['Name'].map(get_title)\ntitle_df.head()","d62f7be9":"title_df['Title'].unique()","967816c7":"title_map = {'Mr':'Mr',\n             'Mrs':'Mrs',\n             'Mme': 'Mrs',\n             'Ms':'Mrs',\n             'Miss':'Miss',\n             'Mlle':'Miss',\n             'Master':'Master',\n             'Rev':'Officer',\n             'Dr':'Officer',\n             'Major':'Officer',\n             'Col':'Officer',\n             'Capt':'Officer',\n             'Don':'Royalty',\n             'Lady':'Royalty',\n             'Sir':'Royalty',\n             'the Countess':'Royalty',\n             'Jonkheer':'Royalty',\n             'Dona':'Royalty'}","fc410b4b":"title_df['Title'] = title_df['Title'].map(title_map)\ntitle_df = pd.get_dummies(title_df['Title'])\ntitle_df.head()","74b27262":"df = pd.concat([df, title_df], axis=1)\n\ndf.drop('Name',axis=1, inplace=True)\ndf.head()","0e1ea4d0":"df['Cabin'].head(20)","c2f4de4f":"cabin_df = pd.DataFrame()\ndf['Cabin'] = df['Cabin'].map(lambda x : x[0])\ndf['Cabin'].head()\n","8499feec":"cabin_df = pd.get_dummies(df['Cabin'],prefix='Cabin')\ncabin_df.head()","07b10c47":"df = pd.concat([df, cabin_df], axis=1)\n\ndf.drop('Cabin',axis=1, inplace=True)\ndf.head()","c0768ee9":"# Ticket is uncorrelated with survival, so we can drop them\ndf['Ticket'].unique()","bbcd286c":"df = df.drop('Ticket', axis=1)","c8a41310":"family_df = pd.DataFrame()\nfamily_df['Family_Size'] = df['Parch'] + df['SibSp'] + 1","a14c83a4":"sns.countplot('Family_Size', data=family_df)","226ff769":"family_df['Single_Family'] = family_df['Family_Size'].map(lambda x : 1 if x==1 else 0)\nfamily_df['Small_Family'] = family_df['Family_Size'].map(lambda x : 1 if 2 <= x <= 4 else 0)\nfamily_df['Large_Family'] = family_df['Family_Size'].map(lambda x : 1 if 5 <= x else 0)\n\nfamily_df.head()","13058253":"df = pd.concat([df, family_df], axis=1)\n\ndf.drop(['SibSp','Parch'],axis=1, inplace=True)\ndf.head()","bd11db9c":"df.shape","e2583243":"# Correlation \ncorr_df = df.corr()\n\nplt.figure(figsize=(14,12))\n\ncolormap = sns.diverging_palette(220, 10, as_cmap = True)\n\nsns.heatmap(df.corr(), cmap= colormap, square=True, cbar_kws={'shrink':.9 }, linecolor='white')","8f104259":"corr_df['Survived'].sort_values(ascending =False)","05bee032":"df_x = pd.concat([title_df, pclass_df, family_df, df['Fare'],cabin_df,embarked_df,df['Sex']], axis=1)\n\ndf_x.head()","0ce9c578":"df_x.to_csv('\/kaggle\/working\/Titanic_train_cleaned.csv', index=False)","65330136":"df_x.info()","bb6b63ca":"X = df_x.loc[0:891-1,:]\n\ny = df.loc[0:891-1,'Survived']\n\npred_X = df_x.loc[891:,:]","5e34ca49":"X.shape","97e8b08b":"pred_X.shape","0afe1eaf":"from sklearn.model_selection import train_test_split","bb683340":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8)","392f8d61":"from sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)","fd980933":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,predictions))","e22ad856":"confusion_matrix(y_test,predictions)","0f997455":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=600)\nrfc.fit(X_train,y_train)\npredictions = rfc.predict(X_test)\nprint(classification_report(y_test,predictions))","dd556883":"print(confusion_matrix(y_test,predictions))","577d25c8":"from sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X_train,y_train)\npred = model.predict(X_test)","683cce36":"print(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))","5475df96":"from sklearn.model_selection import GridSearchCV\nparam_grid = {'C':[0.1,1,10,100,1000],'gamma':[1,.1,.01,.001,.0001]}\ngrid = GridSearchCV(SVC(),param_grid,verbose=3)\ngrid.fit(X_train,y_train)","9bf1faf8":"grid.best_params_","9dfb801d":"grid.best_estimator_","12200916":"grid_prediction = grid.predict(X_test)","2c995735":"print(confusion_matrix(y_test,grid_prediction))\nprint(classification_report(y_test,grid_prediction))","6430ca04":"# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nrandf_pred = random_forest.predict(X_test)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest","80646c9c":"# Decision Tree\nfrom sklearn.tree import DecisionTreeClassifier\n\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train, y_train)\ndtree_pred = dtree.predict(X_test)\nacc_dtree = round(dtree.score(X_train, y_train) * 100, 2)\nacc_dtree","793aaef7":"# KNN\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\nacc_knn","65efa38d":"knn_score = []\n\nfor i in range(1,40):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    knn_score.append(round(knn.score(X_train, y_train) * 100, 2))","b45b72be":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),knn_score,color='blue',linestyle= 'dashed',marker='o',\n        mfc='red',ms=10)\nplt.title('KNN Score vs K Value')\nplt.xlabel('K')\nplt.ylabel('KNN Score')","3c21dee9":"knn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nknn_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, y_train) * 100, 2)\nacc_knn","6f338b79":"# Logistic\nfrom sklearn.linear_model import LogisticRegression\n\nlogmodel.fit(X_train,y_train)\nlog_pred = logmodel.predict(X_test)\nacc_log = round(logmodel.score(X_train, y_train)*100, 2)\nacc_log","a26cda46":"# Support Vector Machines + GridSearchCV\nfrom sklearn.svm import SVC\n\nfrom sklearn.model_selection import GridSearchCV\nparam_grid = {'C':[0.1,1,10,100,1000],'gamma':[1,.1,.01,.001,.0001]}\n\ngrid = GridSearchCV(SVC(),param_grid,verbose=3)\ngrid.fit(X_train,y_train)\n\ngrid_pred = grid.predict(X_test)\nacc_svm = round(grid.score(X_train, y_train)*100, 2)\nacc_svm","919aeebf":"# ML Models Testing","bb956674":"## Extract titles from names","947c4d0e":"1. Index: PassengerId, Survived\n2. Continuous: Age, Sibsp, Parch, Fare \n3. Discrete:  Pclass, Sex, Embarked \n4. Need to Extract: Name, Ticket, Cabin \n","eb529a05":"### Set up Train_test_splt","6e1a7927":"# Need to Extract: \n1. Name\n2. Ticket\n3. Cabin ","0d94b956":"The family size distributed into a vast range from 1 to 11, which can be \ncategorized into 3 groups - Single Family, Small Family, and Large Family.","f513e11b":"## Fill Null Variables","b16d2676":"### Define the types of titles:\n* Mr: 'Mr'\n* Mrs: 'Mrs', 'Mme', 'Ms',\n* Miss: 'Miss', 'Mlle',\n* Master: 'Master',\n* Officer: 'Rev', 'Dr', 'Major', 'Col', 'Capt',\n* Royalty: 'Don', 'Lady', 'Sir', 'the Countess', 'Jonkheer', 'Dona'","cadcba8a":"# Discrete data categorization (one-hot encode)\n1. Pclass: 1=First Class, 2=Second Class, 3=Thrid Class \n2. Sex: Male, Female\n3. Embarked: S = Southampton, C = Cherbourg, Q = Queenstown ","bd91c395":"I assume that *single family* has one member; *small family* has 2 to 4 members; and *large family* as more than 4 members.","0099bc28":"First 891 data is our train data. We need to divided the congregated table \nto train and test tables.","0ff801b2":"* Mr.\n* Miss.\n* Mrs.\n* Master.\n\nWe can extract the title from their name by using split function.\n","740eb74c":"# Feature Selection","cce14311":"Extract the first letter from the string using lambda function.","ed4318be":"## Family Factor?\n### We knew the information about \"number of siblings \/ spouses aboard the Titanic\" and \"the number of parents \/ children aboard the Titanic\". So, the size of a family group = Sibsp + Parch + 1 (oneself)","44d2ce85":"### Extract Cabin Numbers","f5136469":"## Features Extraction","eb862686":"## Support Vector Machines ","ab7926fa":"## Load Data","e46128df":"## Logistic Regression","243a04b1":"# Test","5e616f62":"## Random Forests Model"}}