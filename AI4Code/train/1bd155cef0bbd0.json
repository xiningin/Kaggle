{"cell_type":{"12f3cf38":"code","cf6caef2":"code","b43fd506":"code","519a68fb":"code","3c6d2217":"code","9d18ca4a":"code","26e8dc2d":"code","c972859f":"code","26fe1337":"code","7fbccce3":"code","e8b20d2a":"code","0ce6d312":"code","64afb58c":"code","edf158fa":"code","351c2de2":"code","59d84571":"code","93ddc3f4":"code","a59061ba":"code","98ac0b6d":"code","7d13cde0":"code","9cbf820a":"code","31a9beac":"code","49b9e7f2":"code","5cd96b36":"code","86d4585d":"code","f3f97ab5":"code","61d0c649":"code","d73a2508":"code","d4c0dcdb":"code","a2e6aa9f":"code","17eb4be7":"code","235a2b16":"markdown","9512b6bc":"markdown","986d902e":"markdown","4373c000":"markdown","cfa7f219":"markdown","d5bf93d3":"markdown","452e766f":"markdown"},"source":{"12f3cf38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf6caef2":"#\ud559\uc2b5\ubaa8\ub378\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import VotingClassifier\n\n#\uc804\ucc98\ub9ac \ubc0f \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\n#\uacb0\uacfc\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\n\n#\uc2dc\uac01\ud654\n\nimport matplotlib.pylab as plt\n%matplotlib inline\n\n#tensorflow\nimport tensorflow as tf\nfrom tensorflow.keras import layers","b43fd506":"cancer = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","519a68fb":"cancer","3c6d2217":"cancer.info()","9d18ca4a":"cancer = cancer.drop(['Unnamed: 32'],axis=1)","26e8dc2d":"cancer.isnull().sum()","c972859f":"X = cancer.drop(['id','diagnosis'],axis=1)\ny = cancer['diagnosis']","26fe1337":"X.head()","7fbccce3":"y.head()","e8b20d2a":"#M :1 B : 0\ny.loc[y=='M'] = 1\ny.loc[y=='B'] = 0\ny","0ce6d312":"y =y.astype(int)","64afb58c":"#newline\nnp.bincount(y)","edf158fa":"X.describe()","351c2de2":"X = np.array(X)","59d84571":"plt.boxplot(X[:,])\nplt.show()","93ddc3f4":"scaler = StandardScaler() # \uc2a4\ucf00\uc77c\ub9c1\nx = scaler.fit_transform(X)","a59061ba":"x_train_all,x_test,y_train_all,y_test = train_test_split(x,y,test_size=0.3)\nx_train,x_val,y_train,y_val = train_test_split(x_train_all,y_train_all,test_size=0.3) # newline","98ac0b6d":"lr = LogisticRegression()\ndt = DecisionTreeClassifier()\nrf = RandomForestClassifier()\nnb = GaussianNB()\n\neclf_h =VotingClassifier(estimators = [('lr',lr),('dt',dt),('rf',rf),('nb',nb)],voting='hard')\neclf_s =VotingClassifier(estimators = [('lr',lr),('dt',dt),('rf',rf),('nb',nb)],voting='soft')\nmodels = [lr,dt,rf,nb,eclf_h,eclf_s]","7d13cde0":"y_train","9cbf820a":"for model in models:\n  model.fit(x_train,y_train)\n  predictions = model.predict(x_test)\n  score = model.score(x_test,y_test)\n  print(classification_report(y_test,predictions),'\\n')\n# lr,dt,rf,nb,eclf_h,eclf_s","31a9beac":"X_np = np.array(X)\nX_np","49b9e7f2":"model = tf.keras.Sequential([\n    layers.Input(shape=X_np[1].shape),\n    layers.Dense(12,activation='sigmoid'),\n    layers.Dense(8,activation='relu'),\n    layers.Dense(16,activation='sigmoid'),\n    layers.Dense(128,activation='relu'),\n    layers.Dense(64,activation='sigmoid'),\n    layers.Dense(32,activation='relu'),\n    layers.Dense(1,activation='sigmoid')    \n])\n\nmodel.compile(optimizer='Adam',loss='binary_crossentropy',metrics=['accuracy','BinaryCrossentropy'])\nhist = model.fit(x_train,y_train, epochs = 300, batch_size=32, validation_split=0.2, validation_data=(x_val,y_val))","5cd96b36":"model.evaluate(x_test,y_test)","86d4585d":"hist.history.keys()","f3f97ab5":"plt.plot(hist.history['loss'],'x--',label='loss')\nplt.plot(hist.history['val_loss'],'x--',label='val_loss')\nplt.legend()","61d0c649":"plt.plot(hist.history['accuracy'],'x--',label='accuracy')\nplt.plot(hist.history['val_accuracy'],'x--',label='val_accuracy')\nplt.legend()","d73a2508":"x_test","d4c0dcdb":"x_data = x_test[[range(1,20)]]","a2e6aa9f":"x_data.shape","17eb4be7":"pred =model.predict(x_data)\npred","235a2b16":"# \ubd84\uc11d\uc6a9\ub370\uc774\ud130\uad6c\ucd95_\uc774\uc900\uc624","9512b6bc":"# Classification","986d902e":"# \uc2dc\uac01\ud654","4373c000":"## preprocessing","cfa7f219":"# perceptron","d5bf93d3":"# \ub370\uc774\ud130\uc14b \uc77d\uc5b4\uc624\uae30","452e766f":"## \uc774\uc0c1 \ub3c5\ub9bd\ubcc0\uc218 \ud655\uc778"}}