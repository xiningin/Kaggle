{"cell_type":{"2d9b4bb8":"code","4abf819b":"code","7d22da74":"code","c56f6f39":"code","d27160cb":"code","8e78c0aa":"code","c03efd27":"code","5a7d3589":"code","49ef4a31":"code","777de5a5":"code","739f5b95":"code","9de51035":"code","220edbcf":"code","15f73a20":"code","d9d615b0":"code","dc6ec271":"code","42361a95":"code","19994c8f":"code","99b4911c":"code","d725aa59":"markdown","f5ee04a0":"markdown","2a91137a":"markdown","beb9f19f":"markdown","d804138c":"markdown","d04dc796":"markdown","227ec152":"markdown"},"source":{"2d9b4bb8":"import pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors\nimport matplotlib.pyplot as plt\nimport seaborn as sns","4abf819b":"movies=pd.read_csv(r\"..\/input\/movielens-dataset\/movies.csv\")","7d22da74":"movies.head()","c56f6f39":"ratings=pd.read_csv(r\"..\/input\/movielens-dataset\/ratings.csv\")","d27160cb":"ratings.head()","8e78c0aa":"final_dataset=ratings.pivot(index=\"movieId\",columns=\"userId\",values=\"rating\")\nfinal_dataset.head()","c03efd27":"final_dataset.fillna(0,inplace=True)\nfinal_dataset.head()","5a7d3589":"no_user_voted=ratings.groupby('movieId')['rating'].agg('count')\nno_movies_voted=ratings.groupby('userId')['rating'].agg('count')","49ef4a31":"f,ax=plt.subplots(1,1,figsize=(16,4))\n# ratings['rating'].plot(kind='hist')\nplt.scatter(no_user_voted.index,no_user_voted,color='mediumseagreen')\nplt.axhline(y=10,color='r')\nplt.xlabel('MovieId')\nplt.ylabel('No. of users voted')\nplt.show()","777de5a5":"final_dataset=final_dataset.loc[no_user_voted[no_user_voted > 10].index,:]\n","739f5b95":"f,ax = plt.subplots(1,1,figsize=(16,4))\nplt.scatter(no_movies_voted.index,no_movies_voted,color='mediumseagreen')\nplt.axhline(y=50,color='r')\nplt.xlabel('UserId')\nplt.ylabel('No. of votes by user')\nplt.show()","9de51035":"final_dataset=final_dataset.loc[:,no_movies_voted[no_movies_voted >50].index]\nfinal_dataset","220edbcf":"sample = np.array([[0,0,3,0,0],[4,0,0,0,2],[0,0,0,0,1]])\nsparsity = 1.0 - ( np.count_nonzero(sample) \/ float(sample.size) )\nprint(sparsity)","15f73a20":"csr_sample=csr_matrix(sample)\nprint(csr_sample)","d9d615b0":"csr_data=csr_matrix(final_dataset.values)\nfinal_dataset.reset_index(inplace=True)","dc6ec271":"knn=NearestNeighbors(metric='cosine',algorithm='brute',n_neighbors=20,n_jobs=-1)\nknn.fit(csr_data)","42361a95":"def get_movie_recommendation(movie_name):\n    n_movies_to_reccomend = 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]  \n    if len(movie_list):        \n        movie_idx= movie_list.iloc[0]['movieId']\n        movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]\n        distances , indices = knn.kneighbors(csr_data[movie_idx],n_neighbors=n_movies_to_reccomend+1)    \n        rec_movie_indices = sorted(list(zip(indices.squeeze().tolist(),distances.squeeze().tolist())),key=lambda x: x[1])[:0:-1]\n        recommend_frame = []\n        for val in rec_movie_indices:\n            movie_idx = final_dataset.iloc[val[0]]['movieId']\n            idx = movies[movies['movieId'] == movie_idx].index\n            recommend_frame.append({'Title':movies.iloc[idx]['title'].values[0],'Distance':val[1]})\n        df = pd.DataFrame(recommend_frame,index=range(1,n_movies_to_reccomend+1))\n        return df","19994c8f":"get_movie_recommendation('Iron Man')","99b4911c":"get_movie_recommendation('Memento')","d725aa59":"# Making the recommendation function","f5ee04a0":"# Removing sparsity","2a91137a":"# Making the movie recommendation system model","beb9f19f":"# Visualization","d804138c":"# Importing Libraries","d04dc796":"# Let\u2019s Recommend some movies!","227ec152":"# MOVIE RECOMMENDATION SYSTEM"}}