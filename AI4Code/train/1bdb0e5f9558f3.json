{"cell_type":{"6d721d4a":"code","3ee2995f":"code","444cbffd":"code","9838756e":"code","a2671e0c":"code","1c2a8b83":"code","aaa17864":"code","f7bc1ee8":"code","2f63ae8c":"code","8d1dbc82":"code","8526b687":"code","4d878d45":"code","41d711b6":"code","f3dbebcb":"code","51d1e4fb":"code","a089d752":"code","27e875ef":"code","b9e6b3a3":"code","c341549a":"code","3da71b2a":"code","4833b1ea":"code","1ef5204b":"code","2e34d3ca":"code","c2b9dbe1":"code","e52df208":"code","1288ec67":"code","18b25a8b":"code","b0050569":"code","cef2e227":"code","8f064f7b":"code","74c483fc":"code","9c6f70e9":"markdown","e1f2b794":"markdown","28b67153":"markdown","d7e32610":"markdown","30f0a5cb":"markdown","c2ff4f19":"markdown","ced22402":"markdown"},"source":{"6d721d4a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3ee2995f":"# Importing necessary paackages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.stem.wordnet import WordNetLemmatizer\nimport string\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score, f1_score\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nimport xgboost as xgb\nseed = 4353","444cbffd":"data = pd.read_csv('\/kaggle\/input\/amazon-music-reviews\/Musical_instruments_reviews.csv')\ndata.head()","9838756e":"data.columns = data.columns.str.lower()\ndata.columns","a2671e0c":"data.isnull().sum()","1c2a8b83":"print('The train dataset contans {} rows and {} columns'.format(data.shape[0], data.shape[1]))","aaa17864":"sns.countplot(data.overall)\nplt.xlabel('Overall ratings')","f7bc1ee8":"# replacing numerical values with categorical values to reduce the classes to sentiments\n\ndata['sentiment'] = data.overall.replace({\n    1:'negative',\n    2:'negative',\n    3:'neutral',\n    4:'positive',\n    5:'positive'\n})","2f63ae8c":"#Creating Train and Test datasets with only the product reviews (complete Review = reviewtext + summary)\n\nX_data = data['reviewtext'] + ' ' + data['summary']\ny_data = data['sentiment']","8d1dbc82":"# changing the datatype from object to string\n\nX_data = X_data.astype(str)","8526b687":"# creating new dataframe\n\nX_data_df = pd.DataFrame(data=X_data)\nX_data_df.columns = ['review']\nX_data_df.head()","4d878d45":"# creating functions for text processing\n\nstring.punctuation\ndef final(X_data_full):\n    \n    # function for removing punctuations\n    def remove_punct(X_data_func):\n        string1 = X_data_func.lower()\n        translation_table = dict.fromkeys(map(ord, string.punctuation),' ')\n        string2 = string1.translate(translation_table)\n        return string2\n    \n    X_data_full_clear_punct = []\n    for i in range(len(X_data_full)):\n        test_data = remove_punct(X_data_full[i])\n        X_data_full_clear_punct.append(test_data)\n        \n    # function to remove stopwords\n    def remove_stopwords(X_data_func):\n        pattern = re.compile(r'\\b(' + r'|'.join(stopwords.words('english')) + r')\\b\\s*')\n        string2 = pattern.sub(' ', X_data_func)\n        return string2\n    \n    X_data_full_clear_stopwords = []\n    for i in range(len(X_data_full)):\n        test_data = remove_stopwords(X_data_full[i])\n        X_data_full_clear_stopwords.append(test_data)\n        \n    # function for tokenizing\n    def tokenize_words(X_data_func):\n        words = nltk.word_tokenize(X_data_func)\n        return words\n    \n    X_data_full_tokenized_words = []\n    for i in range(len(X_data_full)):\n        test_data = tokenize_words(X_data_full[i])\n        X_data_full_tokenized_words.append(test_data)\n        \n    # function for lemmatizing\n    lemmatizer = WordNetLemmatizer()\n    def lemmatize_words(X_data_func):\n        words = lemmatizer.lemmatize(X_data_func)\n        return words\n    \n    X_data_full_lemmatized_words = []\n    for i in range(len(X_data_full)):\n        test_data = lemmatize_words(X_data_full[i])\n        X_data_full_lemmatized_words.append(test_data)\n        \n    # creating the bag of words model\n    cv = CountVectorizer(max_features=1000)\n    X_data_full_vector = cv.fit_transform(X_data_full_lemmatized_words).toarray()\n    \n    \n    tfidf = TfidfTransformer()\n    X_data_full_tfidf = tfidf.fit_transform(X_data_full_vector).toarray()\n    \n    return X_data_full_tfidf\n    ","41d711b6":"# running the function\n\ndata_X = final(X_data)\nX_train, X_test, y_train, y_test = train_test_split(data_X, y_data, test_size=0.25, random_state= seed)","f3dbebcb":"# Instatiation, fitting and prediction\n\nMNB = MultinomialNB()\nMNB.fit(X_train, y_train)\npredictions = MNB.predict(X_test)","51d1e4fb":"# Model evaluation\n\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\n\nMNB_f1 = round(f1_score(y_test, predictions, average='weighted'), 3)\nMNB_accuracy = round((accuracy_score(y_test, predictions)*100),2)\n\nprint(\"Accuracy : \" , MNB_accuracy , \" %\")\nprint(\"f1_score : \" , MNB_f1)","a089d752":"# Instatiation, fitting and predictions\n\nxgb_ = xgb.XGBClassifier(\n learning_rate =0.1,\n n_estimators=1000,\n max_depth=5,\n min_child_weight=1,\n gamma=0,\n subsample=0.8,\n colsample_bytree=0.8,\n objective= 'multi:softmax',\n nthread=4,\n scale_pos_weight=1,\n seed= seed)\n\nxgb_.fit(X_train, y_train)\npredictions = xgb_.predict(X_test)","27e875ef":"# Model evaluation\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\n\nxgb_f1 = round(f1_score(y_test, predictions, average= 'weighted'), 3)\nxgb_accuracy = round((accuracy_score(y_test, predictions) * 100), 2)\n\nprint(\"Accuracy : \" , xgb_accuracy , \" %\")\nprint(\"f1_score : \" , xgb_f1)","b9e6b3a3":"# Instatiation, fitting and predictions\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nrfc=RandomForestClassifier(n_estimators= 10, random_state= seed)\nrfc.fit(X_train, y_train)\npredictions = rfc.predict(X_test)","c341549a":"# Model evaluation\n\nprint(classification_report(y_test, predictions))\nprint(confusion_matrix(y_test, predictions))\n\nrfc_f1 = round(f1_score(y_test, predictions, average= 'weighted'), 3)\nrfc_accuracy = round((accuracy_score(y_test, predictions) * 100), 2)\n\nprint(\"Accuracy : \" , rfc_accuracy , \" %\")\nprint(\"f1_score : \" , rfc_f1)","3da71b2a":"# Instatiation and fitting\n\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import KFold\nsvc = SVC(random_state=seed)","4833b1ea":"# using KFold cross validation technique\nkf=  KFold(n_splits=5, random_state=seed)\n\n# Hyperparametric tuning using grid search\nparam_grid = [{'kernel':['rbf'],\n              'gamma':[1e-3, 1e-4],\n              'C':[1, 10, 100, 1000]},\n             {'kernel':['linear'],\n             'C':[1, 10, 100, 1000]}]\n\ngrid = GridSearchCV(estimator=svc, param_grid=param_grid, scoring='accuracy', cv=kf)\ngrid.fit(X_train, y_train)\n\nprint('Estimator: ', grid.best_estimator_)\nprint('Best params : \\n', grid.best_params_)\nprint('Output Classes: ', grid.classes_)\nprint('Training Accuracy: ', grid.best_score_)","1ef5204b":"# predictions\n\npredictions = grid.predict(X_test)\n\nprint(classification_report(y_test, predictions))\n\nsvc_f1 = round(f1_score(y_test, predictions, average='weighted'), 3)\nsvc_accuracy = round((accuracy_score(y_test, predictions)*100), 2)\n\nprint(\"Accuracy : \" , svc_accuracy , \" %\")\nprint(\"f1_score : \" , svc_f1)","2e34d3ca":"from keras import Sequential\nfrom keras.layers import Embedding, LSTM, Dense, Dropout\n\nembedding_size=32\nmax_words=5000\n\nmodel = Sequential()\nmodel.add(Embedding(max_words, embedding_size, input_length=X_train.shape[1]))\nmodel.add(LSTM(100))\nmodel.add(Dense(3,activation='softmax'))\n\nprint(model.summary())","c2b9dbe1":"model.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])","e52df208":"# converting categorical variables in y_train to numerical variables\ny_train_dummies = pd.get_dummies(y_train).values\nprint('Shape of Label tensor: ', y_train_dummies.shape)","1288ec67":"#train the model\nmodel.fit(X_train, y_train_dummies, epochs=5, batch_size=32)\n#model.sav('MusicalInstrumentReviews.h5')","18b25a8b":"model.save('MusicalInstrumentReviews.h5')","b0050569":"# converting categorical variables in y_train to numerical variables\ny_test_dummies = pd.get_dummies(y_test).values\nprint('Shape of Label tensor: ', y_test_dummies.shape)","cef2e227":"# model evaluation\nfrom keras.models import load_model\n\nmodel = load_model('MusicalInstrumentReviews.h5')\nscores = model.evaluate(X_test, y_test_dummies)\n\nLSTM_accuracy = scores[1]*100\n\nprint('Test accuracy: ', scores[1]*100, '%')","8f064f7b":"#Comapring the accuracy for various models\n\nmodel = ['MNB', 'Random Forest', 'XGBoost', 'SVM', 'LSTM']\nacc = [MNB_accuracy, rfc_accuracy, xgb_accuracy, svc_accuracy, LSTM_accuracy]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Test Accuracy %\")\nplt.xlabel(\"Machine Learning Model\")\nsns.barplot(x= model, y= acc)\nplt.show()","74c483fc":"# Comparing the f1-score for various models\nmodel = ['MNB', 'Random Forest', 'XGBoost', 'SVM']\nf1_score = [MNB_f1, rfc_f1, xgb_f1, svc_f1]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10,8))\nplt.yticks(np.linspace(0,1,21))\nplt.ylabel(\"f1-score\")\nplt.xlabel(\"Machine Learning Model\")\nsns.barplot(x= model,  y= f1_score)\nplt.show()","9c6f70e9":"Since the data is imbalanced, f1-score is better evaluation metric when compared to accuracy scores for classification problems","e1f2b794":"### Multinomial Naive Bayes","28b67153":"### Random Forest","d7e32610":"## Model Selection","30f0a5cb":"### LSTM ","c2ff4f19":"### **XGBoost**","ced22402":"### SVM"}}