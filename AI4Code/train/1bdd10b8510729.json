{"cell_type":{"d3846d9a":"code","1f4fe485":"code","2a2f5a4f":"code","e8ba6ddd":"code","9401cada":"code","59ebdf2a":"code","61ad18ba":"markdown","27dadfc8":"markdown","1b0c1b7a":"markdown","cecb2e7b":"markdown","a3dbefcc":"markdown"},"source":{"d3846d9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","1f4fe485":"from torch import nn, optim\nimport torch.nn.functional as F\nimport torch.utils.data as data\nimport torch\n\nclass MinstDataset(data.Dataset):\n    def __init__(self):\n        train = pd.read_csv(\"..\/input\/train.csv\")\n        train_labels = train['label'].values\n        train = train.drop(\"label\",axis=1).values.reshape(42000,1,28,28)\n        self.datalist = train\n        self.labels = train_labels\n    def __getitem__(self, index):\n        return torch.Tensor(self.datalist[index].astype(float)), self.labels[index]\n    def __len__(self):\n        return self.datalist.shape[0]\n\ntrain_Set = MinstDataset()\ntrainloader = torch.utils.data.DataLoader( dataset = train_Set , batch_size= 64 , shuffle = True)","2a2f5a4f":"class Classifier(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = nn.Linear(784, 512)\n        self.fc2 = nn.Linear(512, 256)\n        self.fc3 = nn.Linear(256, 128)\n        self.fc4 = nn.Linear(128, 10)\n        \n        self.dropout = nn.Dropout(p=0.2)\n        \n    def forward(self, x):\n        x = x.view(x.shape[0], -1)\n        \n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.dropout(F.relu(self.fc3(x)))\n        x = F.log_softmax(self.fc4(x), dim=1)\n        \n        return x","e8ba6ddd":"model = Classifier()\ncriterion = nn.NLLLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.003)","9401cada":"from torch.autograd import Variable\nfor epoch in range(20):\n    for i, (images, labels) in enumerate(trainloader):\n        images = Variable(images)\n        labels = Variable(labels)\n        \n        optimizer.zero_grad()\n        outputs = model(images)\n        \n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        \n        if (i+1) % 100 == 0:\n            print ('Epoch [%d\/%d], Iter [%d] Loss: %.4f' %(epoch+1, 10, i+1, loss.data[0]))\n","59ebdf2a":"model.eval()\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntest = test.values.reshape(28000,1,28,28).astype(float)\ntest = Variable(torch.Tensor(test))\n\npred = model(test)\n\n_, predlabel = torch.max(pred.data, 1)\npredlabel = predlabel.tolist()\n\npredlabel = pd.DataFrame(predlabel)\npredlabel.index = np.arange(28000) + 1\nid = np.arange(28000) + 1\nid = pd.DataFrame(id)\nid.index = id.index + 1\n\npredlabel = pd.concat([id,predlabel], axis=1)\npredlabel.columns = [\"ImageId\", \"Label\"]\n\npredlabel.to_csv('predict.csv', index= False)","61ad18ba":"**Traning the Neural Networks**","27dadfc8":"**Defining Network Architecture for Neural Networks**","1b0c1b7a":"**Evaluting test set and exporting csv**","cecb2e7b":"**Defining Loss Function criterion  and Optimizer **","a3dbefcc":"**Converting pandas Dataframe to Pytorch Tensor type **"}}