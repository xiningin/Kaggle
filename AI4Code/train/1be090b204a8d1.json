{"cell_type":{"39669f9d":"code","30cdbfc0":"code","274bed88":"code","ac0cc02e":"code","19dc41bd":"code","952ed0bb":"code","24c8a6ee":"code","519fe589":"code","4679090d":"code","a913cd7f":"code","d53a83ab":"code","b8e5ddda":"code","89bb2cfc":"code","257bfce2":"code","4901dfa1":"code","ea4008f5":"code","4ecdf648":"code","26cfdbef":"code","9d10042d":"code","9c0365df":"code","196fb0f7":"markdown","63ef554d":"markdown","a87c94c3":"markdown","ea1c85b4":"markdown","276aabab":"markdown"},"source":{"39669f9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\nplt.rcParams[\"figure.figsize\"] = (10,10)\n\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix, precision_recall_curve, roc_curve, roc_auc_score\nfrom sklearn.ensemble import RandomForestClassifier\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30cdbfc0":"df = pd.read_csv('..\/input\/beginners-classification-dataset\/classification.csv')\ndf.head()","274bed88":"df.success = df.success.astype('int')","ac0cc02e":"sc = StandardScaler()","19dc41bd":"X, y = df.iloc[:,:-1], df.iloc[:,-1]","952ed0bb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","24c8a6ee":"Xtrain_sc = sc.fit_transform(X_train)\nXtest_sc = sc.transform(X_test)","519fe589":"def accuracy_fun(model, X_test, y_test):\n    \n    y_pred = model.predict(X_test)\n    \n    print('Confusion matrix is : \\n', confusion_matrix(y_test, y_pred))\n    print(f'Accuracy : {accuracy_score(y_test, y_pred)}')\n    print('Classification report is : \\n', classification_report(y_test, y_pred))\n    \n    return y_pred\n\ndef prec_rec_thres_plots(pres, rec, thr):\n    plt.plot(thr, pres[:-1], label='Precision')\n    plt.plot(thr, rec[:-1], label='Recall')\n    plt.xlabel('Threshold')\n    plt.legend()\n    \ndef roc_plot(fpr, tpr, label=None):\n    plt.plot(fpr, tpr, label=label)\n    plt.ylabel('TPR (Recall)')\n    plt.xlabel('FPR')\n    plt.legend()\n","4679090d":"lr = LogisticRegression()\nscore = cross_val_score(lr, X=Xtrain_sc, y=y_train, cv=10)\nscore","a913cd7f":"lr.fit(Xtrain_sc, y_train)","d53a83ab":"y_pred = accuracy_fun(lr, Xtest_sc, y_test)","b8e5ddda":"sgd = SGDClassifier()\nscore = cross_val_score(sgd, X=Xtrain_sc, y=y_train, cv=10)\nscore","89bb2cfc":"decision_scores = cross_val_predict(sgd, X=Xtrain_sc, y=y_train, method='decision_function', cv=10)\nprecisions, recalls, thresholds = precision_recall_curve(y_train, decision_scores)","257bfce2":"prec_rec_thres_plots(precisions, recalls, thresholds)","4901dfa1":"sgd.fit(Xtrain_sc, y_train)\ny_pred = accuracy_fun(sgd, Xtest_sc, y_test)","ea4008f5":"fpr, tpr, threshold = roc_curve(y_train, decision_scores)","4ecdf648":"roc_plot(fpr, tpr)","26cfdbef":"roc_auc_score(y_train, decision_scores)","9d10042d":"rf = RandomForestClassifier()\nsgd = SGDClassifier()\n\ny_prob = cross_val_predict(rf, X=Xtrain_sc, y=y_train, cv=10, method='predict_proba')\ny_prob_sgd = cross_val_predict(sgd, X=Xtrain_sc, y=y_train, cv=10, method='decision_function')","9c0365df":"fpr, tpr, thr = roc_curve(y_train, y_prob[:,1])\n\nroc_plot(fpr, tpr, \"RandomForestClassifier\")\nrf_roc_score = roc_auc_score(y_train, y_prob[:,1])\n\nfpr, tpr, thr = roc_curve(y_train, y_prob_sgd)\nroc_plot(fpr, tpr, 'SGD')\nsgd_roc_score = roc_auc_score(y_train, y_prob_sgd)\nprint(f'\\n ROC-AUC Score for RF is {rf_roc_score} and for SGD is {sgd_roc_score}\\n\\n')","196fb0f7":"# Metric function","63ef554d":"# Logistic Regression","a87c94c3":"# SGD Classifier","ea1c85b4":"# Random Forest Classifier","276aabab":"# Preprocessing"}}