{"cell_type":{"80b2cb22":"code","983ff0e8":"code","dc42ee0b":"code","898988af":"code","12d9a24a":"markdown","1e0f2f78":"markdown","6433414c":"markdown","f0a34e26":"markdown","ddeef4f1":"markdown","0fce173d":"markdown"},"source":{"80b2cb22":"import ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual, GridspecLayout\n\nfrom matplotlib import pyplot as plt\nfrom matplotlib import colors\n\nimport numpy as np\n\nimport os\nimport json\n\n!jupyter nbextension enable --py widgetsnbextension","983ff0e8":"root_dir = '\/kaggle\/input\/abstraction-and-reasoning-challenge'\ntraining_files = sorted(os.listdir(f\"{root_dir}\/training\/\"))\nevaluation_files = sorted(os.listdir(f\"{root_dir}\/evaluation\/\"))\ntest_files = sorted(os.listdir(f\"{root_dir}\/test\/\"))","dc42ee0b":"arc_colors =  ['#000000', \"#0074D9\", \"#FF4136\", \"#2ECC40\", '#FFDC00', \"#AAAAAA\", '#F012BE', '#FF851B', '#7FDBFF', \"#870C25\"]\ncmap = colors.ListedColormap(arc_colors)\nnorm = colors.Normalize(vmin=0, vmax=9)\n\n# method called by the interact cell\ndef plot_data(path):\n    with open(path) as file:\n        data = json.load(file)\n        \n    n_train = len(data['train'])\n    fig, axs = plt.subplots(2, n_train+1, figsize=(8,4))\n    \n    for x in axs:\n        for y in x:    \n            y.grid(b=True)\n            y.tick_params(direction='out', length=0, width=0, colors='r',\n                          labelsize=0, grid_color='w', grid_alpha=0.5)\n\n    for i in range(0, n_train): \n        # Train Input\n        axs[0,i].imshow(data['train'][i]['input'], cmap=cmap, norm=norm)\n        # To fix misalignment of grid and image caused by the pixel snapping issue in matplotlib\n        axs[0,i].set_xticks(np.array(range(len(data['train'][i]['input'][0])))-0.5)\n        axs[0,i].set_yticks(np.array(range(len(data['train'][i]['input'])))-0.5)\n        # Train Output\n        axs[1,i].imshow(data['train'][i]['output'], cmap=cmap, norm=norm)\n        axs[1,i].set_xticks(np.array(range(len(data['train'][i]['output'][0])))-0.5)\n        axs[1,i].set_yticks(np.array(range(len(data['train'][i]['output'])))-0.5)\n    # Test Input\n    axs[0,n_train].imshow(data['test'][0]['input'], cmap=cmap, norm=norm)\n    axs[0,n_train].set_xticks(np.array(range(len(data['test'][0]['input'][0])))-0.5)\n    axs[0,n_train].set_yticks(np.array(range(len(data['test'][0]['input'])))-0.5)\n    # Test output\n    axs[1,n_train].imshow(data['test'][0]['output'], cmap=cmap, norm=norm)\n    axs[1,n_train].set_xticks(np.array(range(len(data['test'][0]['output'][0])))-0.5)\n    axs[1,n_train].set_yticks(np.array(range(len(data['test'][0]['output'])))-0.5)\n\n    # separator\n    axs[0,n_train].plot([-0.1, -0.1], [0,1], color='grey', lw=3, transform=axs[0,n_train].transAxes, clip_on=False)\n    axs[1,n_train].plot([-0.1, -0.1], [0,1], color='grey', lw=3, transform=axs[1,n_train].transAxes, clip_on=False)\n\n    axs[0,0].set_ylabel('input')\n    axs[1,0].set_ylabel('output')\n    \n    plt.show()","898988af":"data_type = widgets.ToggleButtons(\n    options=['training', 'evaluation'],\n    description='Data:',\n)\n\ninput_type = widgets.ToggleButtons(\n    options=['index', 'json'],\n    description='Input:',\n)\n\ntext_json = widgets.Text(\n    value='007bbfb7',\n    description='.JSON:',\n)\n\n@interact\ndef show_me_the_data(list_type = data_type, \n                     inp = input_type,\n                     index=(1, 400, 1),\n                     json_id = text_json):\n    \n    json_id = json_id+\".json\"\n    \n    if list_type == 'training':\n        if inp == 'index':\n            data = training_files[index-1]\n        elif json_id in training_files:\n            data = json_id\n        else:\n            print(u\"\\u274C\", \" check file id\")\n            return\n\n    elif list_type == \"evaluation\":\n        if inp  == 'index':\n            data = evaluation_files[index-1]\n        elif json_id in evaluation_files:\n            data = json_id\n        else:\n            print(u\"\\u274C\", \" check file id\")\n            return\n\n    print(list_type, index, data)\n    plot_data(f'{root_dir}\/{list_type}\/{data}')","12d9a24a":"## Plotting Method","1e0f2f78":"## Interactive visualization","6433414c":"[Simple interface](#Interactive-visualization) to visualize all tasks using ipywidgets.   \n \nThe motivation for this kernel : Since this competition is a bit different and so are all the tasks, it is nice to visualize all of them. However, lots of these visualizations make the kernel too long and hard to navigate. This interface can be used to quickly refer to any task in a click.     \n\n![demo.gif](attachment:demo.gif)\n\nFeel free to use it in your kernels directly and save space for better things you want to share. If you find it useful\/interesting, consider to upvote.   \n\nP.S The widgets as in the GIF above are visible, only when the kernel is running.","f0a34e26":"## Sort Files","ddeef4f1":"Discovered a task which is hard even for us humans? Please share. Have fun exploring! ","0fce173d":"#### Import libraries"}}