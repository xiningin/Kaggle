{"cell_type":{"7d5613b9":"code","1d50246d":"code","801e751a":"code","814e0466":"code","f7e99e91":"code","1d841019":"code","be64e578":"code","2d82fcbd":"code","1b816122":"markdown","8485d5eb":"markdown","ae4a3224":"markdown","9dbe3496":"markdown","425d585a":"markdown","18e94727":"markdown"},"source":{"7d5613b9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport pydicom\nimport matplotlib.pyplot as plt\nimport os\nfrom os import listdir\nfrom os.path import isfile, join\nimport json\nimport cv2","1d50246d":"# Load the image dataframe so we can get BB coords\nbase_path = \"\/kaggle\/input\/siim-covid19-detection\/\"\nimages_df = pd.read_csv(os.path.join(base_path,\"train_image_level.csv\"))","801e751a":"# Function to get the BB data from the images DF\ndef get_boxes(image_id):\n    image = image_id.replace('.dcm','_image')\n    ti = images_df[images_df['id'] == image]\n    bx = [[],[]]\n    bx[0] = [0,0,0,0,\"\"]\n    bx[1] = [0,0,0,0,\"\"]\n    \n    if str(ti['boxes'].values[0]) != \"nan\":\n        box = str(ti['boxes'].values[0]).replace(\"'\",\"\\\"\")\n        boxes = json.loads(box)\n        lab = ti['label'].values[0].split(\" \")\n        i = 0\n        for b in boxes:\n            bx[i] = [int(b['x']), int(b['y']), int(b['width']),int(b['height']),lab[0]]\n            i = i+1\n    return bx","814e0466":"# This function applies the crop offsets to BB coords\n# We just subtract the amount cropped from the top and left from the BB coords.\ndef crop_offset(x,y, offset):\n    x = [i - (offset[0] + offset[2]) for i in x]\n    y = [i - (offset[1] + offset[3]) for i in y]\n    return x, y","f7e99e91":"# This function draws boxes on images, one line at a time\ndef draw_boxes(boxes, z):\n\n    for i in boxes:     \n        # Top\n        x = [i[0] - z[0], i[0] + i[2] - z[0]]        # [ x1 , x2 ]\n        y = [i[1] - z[1], i[1] - z[1]]               # [ y1 , y2 ]\n        plt.plot(x,y, color='#ff8838', linewidth=2)\n        \n        # Bottom\n        y = [i[1] + i[3] - z[1], i[1] + i[3] - z[1]]\n        plt.plot(x,y, color='#ff8838', linewidth=2)\n        \n        # Left\n        x = [i[0] - z[0], i[0] - z[0]]\n        y = [i[1] - z[1], i[1] + i[3] - z[1]]\n        plt.plot(x,y, color='#ff8838', linewidth=2)\n\n        # Right         \n        x = [i[0] + i[2] - z[0], i[0] + i[2] - z[0]]\n        plt.plot(x,y, color='#ff8838', linewidth=2)","1d841019":"# Load a random DICOM file\nfilename = '..\/input\/siim-covid19-detection\/train\/00086460a852\/9e8302230c91\/65761e66de9f.dcm'\n    \nimg = pydicom.dcmread(filename)\npixels = img.pixel_array\n\n# Invert MONOCHROME1 the easy way for demo purposes\ncmap = \"gray\"\nif (img.PhotometricInterpretation == \"MONOCHROME1\"):\n    cmap = \"gray_r\"","be64e578":"# Make a cropped copy of the image\ncrop = [200,500,0,0]   # left, top, right, bottom\n\nw = pixels.shape[1] - (crop[0] + crop[2])\nh = pixels.shape[0] - (crop[1] + crop[3])\n\ncropped = pixels[crop[1]:crop[1] + h, crop[0]:crop[0] + w]\n\nprint(\"Orig size: \" + str(pixels.shape[1]) + \" x \" + str(pixels.shape[0]))\nprint(\"Crop size: \" + str(cropped.shape[1]) + \" x \" + str(cropped.shape[0]))","2d82fcbd":"# Get the BB coordinates\nboxes = get_boxes(str(os.path.basename(filename)))\n\nplt.figure(figsize=(15,5)) \n\n# Display the original image with no cropping\nplt.subplot(1, 2, 1)\nplt.title(\"Original: \" + str(pixels.shape[1]) + \" x \" + str(pixels.shape[0]))\n\n# Draw BB's. Pass the cropping values of zero.\ndraw_boxes(boxes, [0,0,0,0])\nplt.imshow(pixels,cmap=cmap)      \nplt.subplot(1, 2, 2)\n\n# Display the cropped image\nplt.title(\"Cropped: \" + str(cropped.shape[1]) + \" x \" + str(cropped.shape[0]))\n\n# Draw BB's, pass the 'crop' value we used earlier to crop the image\ndraw_boxes(boxes, crop)\nplt.imshow(cropped,cmap=cmap)\nplt.show()","1b816122":"#### Crop the left by 200 pixels and the top by 500 pixels","8485d5eb":"#### Load an image","ae4a3224":"<div class='alert alert-info' style='text-align: center'><h1>Bounding boxes on cropped images<\/h1>\n    - yet another chest x-ray processing notebook -\n<\/div>\n\n#### In this notebook, I'll show how to maintain BB placement when cropping images by subtracting the crop amounts from the BB coords.","9dbe3496":"#### Define some methods","425d585a":"#### As you can see, the BB's are still in the correct place even though we cropped the top and left side of the image.\n\n**Here are some other processing notebooks I made:**\n- Lung Segmentation Without CNN -> https:\/\/www.kaggle.com\/davidbroberts\/lung-segmentation-without-cnn\n- Applying filters to x-rays -> https:\/\/www.kaggle.com\/davidbroberts\/applying-filters-to-chest-x-rays\n- Rib supression on Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/rib-suppression-poc\n- Manual DICOM VOI LUT -> https:\/\/www.kaggle.com\/davidbroberts\/manual-dicom-voi-lut\n- Apply Unsharp Mask to Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/unsharp-masking-chest-x-rays\n- Cropping Chest X-Rays -> https:\/\/www.kaggle.com\/davidbroberts\/cropping-chest-x-rays\n- Visualizing Chest X-Ray bit planes -> https:\/\/www.kaggle.com\/davidbroberts\/visualizing-chest-x-ray-bitplanes\n- DICOM full range pixels as CNN input -> https:\/\/www.kaggle.com\/davidbroberts\/dicom-full-range-pixels-as-cnn-input","18e94727":"#### Grab the BB coordinates, apply the crop offsets and draw them on the images."}}