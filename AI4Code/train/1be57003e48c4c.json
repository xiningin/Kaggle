{"cell_type":{"15951628":"code","05ab26ec":"code","3bda8858":"code","ec86baef":"code","3280bc9b":"code","66027430":"code","da0b92f4":"code","42968e16":"code","0483ff09":"markdown","3adc3822":"markdown","1877e6e2":"markdown","9f8018c3":"markdown"},"source":{"15951628":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # data visualization\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","05ab26ec":"black, white, blue, red = (0.0,0.0,0.0), (1.0,1.0,1.0), (0.0,1.0,1.0), (1.0,0.0,0.0)\n","3bda8858":"# Define ChessBoard class and initialize board\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\nclass ChessBoard:\n\n    def __init__(self):\n        # initialize checkered board\n        grid = np.ones((8,8,3))\n        for i in range(8):\n            for j in range(8):\n                if (i % 2 != 0 and j % 2 == 0) or (i % 2 == 0 and j % 2 != 0):\n                    grid[i][j] = black\n        self.grid = grid\n    \n    def render(self):\n        plt.imshow(self.grid)\n    \n    def add_red(self, row, col):\n        self.grid[row][col] = red\n    \n    def add_blue(self, row, col):\n        self.grid[row][col] = blue\n    \n    def is_under_attack(self):\n        for i in range(8):\n            for j in range(8):\n                if tuple(self.grid[i][j]) == blue and self.attacker_in_position(i,j):\n                    return True\n        return False\n    \n    def attacker_in_position(self, row, col):\n        return self.attacker_in_row(row) or self.attacker_in_column(col) or self.attacker_in_diagonal(row,col)\n    \n    def attacker_in_row(self, row):\n        for rgb in self.grid[row]:\n            if tuple(rgb) == red:\n                return True\n        return False\n    \n    def attacker_in_column(self, column):\n        col = [row[column] for row in self.grid]\n        for rgb in col:\n            if tuple(rgb) == red:\n                return True\n        return False \n    \n    def attacker_in_diagonal(self, row, col):\n        N = len(self.grid)\n        for i in range(N):\n            # diagonal column\n            diag_col = i + col - row\n            \n            #reverse diagonal column\n            rev_diag_col =  row + col - i\n              \n            if diag_col > 0 and diag_col < N and tuple(self.grid[i][diag_col]) == red:\n                return True\n            elif rev_diag_col > 0 and rev_diag_col < N and tuple(self.grid[i][rev_diag_col]) == red:\n                return True\n        return False\n    ","ec86baef":"# Shows initial board\n\nboard = ChessBoard()\nboard.render()","3280bc9b":"board = ChessBoard()\nboard.add_red(5,5)\nboard.add_blue(5,1)\nif board.is_under_attack():\n    print('Our blue piece is under attack')\nelse:\n    print('Our blue piece is safe')\nboard.render()\n","66027430":"board = ChessBoard()\nboard.add_red(5,5)\nboard.add_blue(2,5)\nif board.is_under_attack():\n    print('Our blue piece is under attack')\nelse:\n    print('Our blue piece is safe')\nboard.render()\n","da0b92f4":"board = ChessBoard()\nboard.add_red(1,2)\nboard.add_blue(4,5)\nif board.is_under_attack():\n    print('Our blue piece is under attack')\nelse:\n    print('Our blue piece is safe')\nboard.render()","42968e16":"board = ChessBoard()\nboard.add_red(1,2)\nboard.add_red(7,3)\nboard.add_red(6,5)\nboard.add_red(2,5)\nboard.add_red(3,2)\nboard.add_blue(4,4)\nif board.is_under_attack():\n    print('Our blue piece is under attack')\nelse:\n    print('Our blue piece is safe')\nboard.render()","0483ff09":"# Scenario 4 - Not Under Attack #","3adc3822":"# Scenario 3 - Diagonal Attack","1877e6e2":"# Scenario 2 - Vertical Attack #\n","9f8018c3":"# Scenario 1 - Horizontal Attack #"}}