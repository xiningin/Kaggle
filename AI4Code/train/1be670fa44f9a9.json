{"cell_type":{"0ab0397e":"code","b7e18f1b":"code","a54c745a":"code","ac8f0506":"code","b267b35c":"code","5307cd95":"code","a2d69cec":"code","ba12f31b":"code","e3cac801":"code","1dc40516":"code","23f38153":"code","7874a9d8":"code","d3259f53":"code","44be87d7":"code","9bd76b4c":"code","ad44b64e":"code","e9f68e0a":"code","d893c324":"code","f3c248f1":"code","fca6c662":"code","418e1d17":"code","291e9d91":"code","c58270b0":"code","67d13038":"code","2e5a5d0e":"markdown","18c33a58":"markdown","80b429f7":"markdown","81c6b27b":"markdown","49161521":"markdown","bddf099f":"markdown","177a5d64":"markdown","a996c14c":"markdown","6c5801c4":"markdown","7586e35b":"markdown","3be32fd5":"markdown","6ca6b459":"markdown","6c4c242b":"markdown","03e95b4b":"markdown","634943a9":"markdown","b2b33ee9":"markdown","ae6572d4":"markdown","8803f28f":"markdown","ac6c1395":"markdown"},"source":{"0ab0397e":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\nimport re\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\n\nimport plotly.figure_factory as ff\nimport cufflinks as cf\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nsns.set_context(\"paper\")\nplt.style.use('seaborn')","b7e18f1b":"videos_df = pd.read_csv('..\/input\/youtube-new\/INvideos.csv')\n\ncategory_df = pd.read_json('..\/input\/youtube-new\/IN_category_id.json')\n\ndisplay(videos_df.info())\ndisplay(category_df.info())","a54c745a":"# Category data\ndisplay(category_df.sample(2))\n\ndisplay(category_df['items'][0])\n\n\n# Video data\ndisplay(videos_df.sample(2))","ac8f0506":"# Fetching id and titles from the category dataset\nlist_id =[]\nlist_title = []\n\nfor index,row in category_df.iterrows():\n    x = row['items']\n    list_id.append(x['id'])\n    list_title.append(x['snippet']['title'])\n    \n# Creating dataframe of id and title\n\ncategory_df = pd.DataFrame(zip(list_id,list_title),columns=['category_id','category'])\ncategory_df['category_id'] = category_df['category_id'].astype('int64')\ncategory_df.head(2)","b267b35c":"df = pd.merge(videos_df, category_df, on='category_id',how='inner')","5307cd95":"category_details = df.groupby(['category']).agg({'video_id':'count','views':'sum','likes':'sum','dislikes':'sum','comment_count':'sum'}).reset_index()\n\nfig =px.bar(data_frame=category_details.sort_values(by='video_id', ascending=False), \n           x='category', y='video_id',\n           template='plotly_white')\nfig.update_layout(\n    title={\n        'text': \"Number of trending videos by category\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})","a2d69cec":"data = [go.Pie(\n        labels = category_details['category'],\n        values = category_details['video_id'],\n        hoverinfo = 'label+value',\n        title = 'Percentage of Videos'\n    \n)]\n\nfig = plotly.offline.iplot(data, filename='category')","ba12f31b":"data = [go.Pie(\n        labels = category_details['category'],\n        values = category_details['views'],\n        hoverinfo = 'label+value',\n        title = '% of Views'\n    \n)]\n\nplotly.offline.iplot(data, filename='category')","e3cac801":"category_details.head(2)","1dc40516":"# Views\nviews = category_details['views']\nvideos = category_details['video_id']\n\naverage_views = views\/videos\n\n# Likes\nlikes = category_details['likes']\naverage_likes = np.round(likes\/average_views, 3)\n\n# Dislikes\ndislikes = category_details['dislikes']\naverage_dislikes = np.round(dislikes\/average_views, 3)\n\n# Comments\ncomments = category_details['comment_count']\naverage_comments = np.round(average_views\/comments, 3)\n\n\n\ncategory_details['average_views'] = average_views\ncategory_details['average_likes'] = average_likes\ncategory_details['average_dislikes'] = average_dislikes\ncategory_details['average_comments'] = average_comments\n\ncategory_details.head(2)","23f38153":"fig = plt.figure(figsize=(25,30))\n\nax1 = fig.add_subplot(411)\n_ = sns.barplot(data=category_details, x='category', y='average_views', palette='Paired', ax=ax1)\nxlabels = category_details['category'].to_list()\nylabels = category_details['average_views']\n_ = ax1.set_title('Average Views per Video', fontsize=30)\n_ = ax1.set_ylabel('Number of Views', fontsize=20)\n_ = ax1.set_xlabel('')\n_ = ax1.set_xticklabels(xlabels, rotation=30, fontsize=17)\n\n\nax2 = fig.add_subplot(412)\n_ = sns.barplot(data=category_details, x='category', y='average_likes', palette='Paired', ax=ax2)\nxlabels = category_details['category'].to_list()\nylabels = category_details['average_likes']\n_ = ax2.set_title('Average Likes per Video', fontsize=30)\n_ = ax2.set_ylabel('Number of Likes', fontsize=20)\n_ = ax2.set_xlabel('')\n_ = ax2.set_xticklabels(xlabels, rotation=30, fontsize=17)\n\n\nax3 = fig.add_subplot(413)\n_ = sns.barplot(data=category_details, x='category', y='average_dislikes', palette='Paired', ax=ax3)\nxlabels = category_details['category'].to_list()\nylabels = category_details['average_dislikes']\n_ = ax3.set_title('Average Dislikes per Video', fontsize=30)\n_ = ax3.set_ylabel('Number of Dislikes', fontsize=20)\n_ = ax3.set_xlabel('')\n_ = ax3.set_xticklabels(xlabels, rotation=30, fontsize=17)\n\nax4 = fig.add_subplot(414)\n_ = sns.barplot(data=category_details, x='category', y='average_comments', palette='Paired', ax=ax4)\nxlabels = category_details['category'].to_list()\nylabels = category_details['average_comments']\n_ = ax4.set_title('Average Comments per Video', fontsize=30)\n_ = ax4.set_ylabel('Number of Comments', fontsize=20)\n_ = ax4.set_xlabel('')\n_ = ax4.set_xticklabels(xlabels, rotation=30, fontsize=17)\n\nfig.tight_layout(pad=0.5)","7874a9d8":"# Creating a df of num_of trending videos per channel \ntrending_channels = df.groupby(['category','channel_title']).size().rename('num_videos').reset_index()\n\n# Picking out the channel with the highest number of trending videos in each category\nmost_trending = trending_channels[trending_channels.groupby('category')['num_videos'].transform(max) == trending_channels['num_videos']]\n\nmost_trending","d3259f53":"px.bar(data_frame=most_trending, \n           x='channel_title', y='num_videos',\n           template='ggplot2',\n           title='Channels with Highest no.of trending videos in each category')\n\n\nfig = sns.barplot(data=most_trending, x='channel_title', y='num_videos', palette='Paired')\nxlabels = (most_trending['category']+' \/ '+most_trending['channel_title']).to_list()\n_ = plt.title('Channels with Highest no.of trending videos in each category', fontsize=20)\n_ = plt.ylabel('Number of Videos', fontsize=20)\n_ = plt.xlabel('')\n_ = plt.xticks(np.arange(0,16),xlabels,rotation=270, fontsize=15)","44be87d7":"import spacy\nnlp = spacy.load('en_core_web_sm')\n\nstop_words = spacy.lang.en.stop_words.STOP_WORDS\n\ndef preprocess_text(text):\n    doc = nlp(text, disable=['ner','parser'])\n    lemmas = [token.lemma_ for token in doc]\n    a_lemmas = [lemma for lemma in lemmas if lemma.isalpha() and lemma not in stop_words]\n    return ' '.join(a_lemmas)","9bd76b4c":"categories_list = set(df['category'])\ntags_category_dict = {}\n\n# Create a dictionary of tags for each category\nfor category in categories_list:\n    print(category)\n    temp_tags_data = df[df['category'] == category]['tags']\n    temp_tags_str = temp_tags_data.apply(preprocess_text)\n    tags_category_dict[category] = temp_tags_str","ad44b64e":"tags_category_dict['Education'][:5]","e9f68e0a":"from wordcloud import WordCloud\nwc = WordCloud(background_color=\"black\", stopwords=['song'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Music'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d893c324":"wc = WordCloud(background_color=\"black\", stopwords=['song'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Gaming'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","f3c248f1":"wc = WordCloud(background_color=\"black\", stopwords=['comedy','video','funny'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Comedy'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","fca6c662":"wc = WordCloud(background_color=\"black\", stopwords=['new','news','live'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['News & Politics'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n\n","418e1d17":"wc = WordCloud(background_color=\"black\", stopwords=['sports'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Sports'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","291e9d91":"wc = WordCloud(background_color=\"black\", stopwords=['sports'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Science & Technology'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","c58270b0":"wc = WordCloud(background_color=\"black\", stopwords=['sports'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Autos & Vehicles'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","67d13038":"wc = WordCloud(background_color=\"black\", stopwords=['sports'],max_words=100, colormap=\"Set2\")\n\nstring = ' '.join(tags_category_dict['Education'])\nwc.generate(string.lower())\nplt.figure(figsize=(13, 13))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","2e5a5d0e":"Reading Youtube India data file","18c33a58":"### Channels","80b429f7":"### News and Politics","81c6b27b":"### Education","49161521":"### Average Viewership\/likes\/dislikes\/comments per video for each category","bddf099f":"### Science and Technology","177a5d64":"### Sports","a996c14c":"Channels having most number of trending videos per category","6c5801c4":"### Comedy","7586e35b":"Filtering out the category names with respoect to id from the category dataset","3be32fd5":"### Let's see what's trending ","6ca6b459":"### Games","6c4c242b":"### Working on TAGS","03e95b4b":"### Auto and Vehicles","634943a9":"### Exploring the dataset","b2b33ee9":"Merging the two dataframes","ae6572d4":"Observations :\n        1. Popular categories based on viwership are Gaming, Movies, Music, Film\n        2. People tend to hit the like button more often of trending videos in categories like Entertainment, Comedy, Music\n        3. Similar is the case for dislikes including category News & Politics\n        4. Most comments per video are for Movies followed by Travel&Events and Pet&Animals\n        \n* Entertainment category consists the most number of videos but has not performed well in viewvership \n* Gaming and Movies categories have one of the least trending videos in the dataset(India) but have performed well based on average viewership\n* Music Industry seems to have performed better in terms of number of trending videos and in viewership","8803f28f":"### Music","ac6c1395":"Famous Categories in which the videos got trended"}}