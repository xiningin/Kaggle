{"cell_type":{"ebdfb994":"code","40799c01":"code","7bb24eb1":"code","678b61f9":"code","45e5790e":"code","2b796990":"code","3edb6bbb":"code","34cdde09":"code","e7dbd3b4":"code","47762837":"code","429f71df":"code","e28b9f04":"code","00eb8b30":"code","9dd35351":"code","b391b868":"code","ec06defc":"code","3853946e":"code","c2d21d53":"code","31869ac4":"code","c5493cfc":"code","a189af50":"code","449525f2":"code","37af3a85":"code","c73ff3e1":"code","4ee7e682":"code","53aee5f2":"code","5ca5289a":"code","a859477d":"markdown","7ae71238":"markdown","27a037e2":"markdown","460cd457":"markdown","078706bc":"markdown","7dcfdf1e":"markdown","ee27ae95":"markdown","c864f738":"markdown","b47439b5":"markdown","93523d76":"markdown","5f55de1d":"markdown","195a934c":"markdown","f10d3b47":"markdown","4f27124e":"markdown","dd945bb5":"markdown","754c05b0":"markdown","70a5de2c":"markdown","cfe95f11":"markdown","2248f678":"markdown","b32ce651":"markdown","3592583f":"markdown","a963ee69":"markdown","bd9f9390":"markdown","e92b5bfa":"markdown","9f340c97":"markdown","e0fa2bbd":"markdown","68ee2c3d":"markdown","002dbb8d":"markdown","9bb7a0cd":"markdown","b790a259":"markdown","42d12ea7":"markdown","12e2e694":"markdown","2daabc79":"markdown","d74df5ca":"markdown","c532cee5":"markdown","a51e9831":"markdown","d66dd626":"markdown","3b7a04b2":"markdown","cb7d3870":"markdown","cb793c4c":"markdown","044d353c":"markdown"},"source":{"ebdfb994":"import matplotlib.pyplot as plt\n\nimport numpy as np\nx = np.linspace(0, 5, 11)\ny = x ** 2\n\n\nfig, axes = plt.subplots(1, 2, figsize=(10,4))\n      \naxes[0].plot(x, x**2, x, np.exp(x))\naxes[0].set_title(\"Normal scale\")\n\naxes[1].plot(x, x**2, x, np.exp(x))\naxes[1].set_yscale(\"log\")\naxes[1].set_title(\"Logarithmic scale (y)\");","40799c01":"fig, ax = plt.subplots(figsize=(10, 4))\n\nax.plot(x, x**2, x, x**3, lw=2)\n\nax.set_xticks([1, 2, 3, 4, 5])\nax.set_xticklabels([r'$\\alpha$', r'$\\beta$', r'$\\gamma$', r'$\\delta$', r'$\\epsilon$'], fontsize=18)\n\nyticks = [0, 50, 100, 150]\nax.set_yticks(yticks)\nax.set_yticklabels([\"$%.1f$\" % y for y in yticks], fontsize=18); # use LaTeX formatted labels","7bb24eb1":"fig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_title(\"scientific notation\")\n\nax.set_yticks([0, 50, 100, 150])\n\nfrom matplotlib import ticker\nformatter = ticker.ScalarFormatter(useMathText=True)\nformatter.set_scientific(True) \nformatter.set_powerlimits((-1,1)) \nax.yaxis.set_major_formatter(formatter) ","678b61f9":"# distance between x and y axis and the numbers on the axes\nplt.rcParams['xtick.major.pad'] = 5\nplt.rcParams['ytick.major.pad'] = 5\n\nfig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_yticks([0, 50, 100, 150])\n\nax.set_title(\"label and axis spacing\")\n\n# padding between axis label and axis numbers\nax.xaxis.labelpad = 5\nax.yaxis.labelpad = 5\n\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\");","45e5790e":"# restore defaults\nplt.rcParams['xtick.major.pad'] = 3\nplt.rcParams['ytick.major.pad'] = 3","2b796990":"fig, ax = plt.subplots(1, 1)\n      \nax.plot(x, x**2, x, np.exp(x))\nax.set_yticks([0, 50, 100, 150])\n\nax.set_title(\"title\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\n\nfig.subplots_adjust(left=0.15, right=.9, bottom=0.1, top=0.9);","3edb6bbb":"fig, axes = plt.subplots(1, 2, figsize=(10,3))\n\n# default grid appearance\naxes[0].plot(x, x**2, x, x**3, lw=2)\naxes[0].grid(True)\n\n# custom grid appearance\naxes[1].plot(x, x**2, x, x**3, lw=2)\naxes[1].grid(color='b', alpha=0.5, linestyle='dashed', linewidth=0.5)","34cdde09":"fig, ax = plt.subplots(figsize=(6,2))\n\nax.spines['bottom'].set_color('blue')\nax.spines['top'].set_color('blue')\n\nax.spines['left'].set_color('red')\nax.spines['left'].set_linewidth(2)\n\n# turn off axis spine to the right\nax.spines['right'].set_color(\"none\")\nax.yaxis.tick_left() # only ticks on the left side","e7dbd3b4":"fig, ax1 = plt.subplots()\n\nax1.plot(x, x**2, lw=2, color=\"blue\")\nax1.set_ylabel(r\"area $(m^2)$\", fontsize=18, color=\"blue\")\nfor label in ax1.get_yticklabels():\n    label.set_color(\"blue\")\n    \nax2 = ax1.twinx()\nax2.plot(x, x**3, lw=2, color=\"red\")\nax2.set_ylabel(r\"volume $(m^3)$\", fontsize=18, color=\"red\")\nfor label in ax2.get_yticklabels():\n    label.set_color(\"red\")","47762837":"fig, ax = plt.subplots()\n\nax.spines['right'].set_color('none')\nax.spines['top'].set_color('none')\n\nax.xaxis.set_ticks_position('bottom')\nax.spines['bottom'].set_position(('data',0)) # set position of x spine to x=0\n\nax.yaxis.set_ticks_position('left')\nax.spines['left'].set_position(('data',0))   # set position of y spine to y=0\n\nxx = np.linspace(-0.75, 1., 100)\nax.plot(xx, xx**3);","429f71df":"n = np.array([0,1,2,3,4,5])","e28b9f04":"fig, axes = plt.subplots(1, 4, figsize=(12,3))\n\naxes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))\naxes[0].set_title(\"scatter\")\n\naxes[1].step(n, n**2, lw=2)\naxes[1].set_title(\"step\")\n\naxes[2].bar(n, n**2, align=\"center\", width=0.5, alpha=0.5)\naxes[2].set_title(\"bar\")\n\naxes[3].fill_between(x, x**2, x**3, color=\"green\", alpha=0.5);\naxes[3].set_title(\"fill_between\");","00eb8b30":"fig, ax = plt.subplots()\n\nax.plot(xx, xx**2, xx, xx**3)\n\nax.text(0.15, 0.2, r\"$y=x^2$\", fontsize=20, color=\"blue\")\nax.text(0.65, 0.1, r\"$y=x^3$\", fontsize=20, color=\"green\");","9dd35351":"fig, ax = plt.subplots(2, 3)\nfig.tight_layout()","b391b868":"fig = plt.figure()\nax1 = plt.subplot2grid((3,3), (0,0), colspan=3)\nax2 = plt.subplot2grid((3,3), (1,0), colspan=2)\nax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)\nax4 = plt.subplot2grid((3,3), (2,0))\nax5 = plt.subplot2grid((3,3), (2,1))\nfig.tight_layout()","ec06defc":"import matplotlib.gridspec as gridspec","3853946e":"fig = plt.figure()\n\ngs = gridspec.GridSpec(2, 3, height_ratios=[2,1], width_ratios=[1,2,1])\nfor g in gs:\n    ax = fig.add_subplot(g)\n    \nfig.tight_layout()","c2d21d53":"fig, ax = plt.subplots()\n\nax.plot(xx, xx**2, xx, xx**3)\nfig.tight_layout()\n\n# inset\ninset_ax = fig.add_axes([0.2, 0.55, 0.35, 0.35]) # X, Y, width, height\n\ninset_ax.plot(xx, xx**2, xx, xx**3)\ninset_ax.set_title('zoom near origin')\n\n# set axis range\ninset_ax.set_xlim(-.2, .2)\ninset_ax.set_ylim(-.005, .01)\n\n# set axis tick locations\ninset_ax.set_yticks([0, 0.005, 0.01])\ninset_ax.set_xticks([-0.1,0,.1]);","31869ac4":"alpha = 0.7\nphi_ext = 2 * np.pi * 0.5\n\ndef flux_qubit_potential(phi_m, phi_p):\n    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)","c5493cfc":"phi_m = np.linspace(0, 2*np.pi, 100)\nphi_p = np.linspace(0, 2*np.pi, 100)\nX,Y = np.meshgrid(phi_p, phi_m)\nZ = flux_qubit_potential(X, Y).T","a189af50":"fig, ax = plt.subplots()\n\np = ax.pcolor(X\/(2*np.pi), Y\/(2*np.pi), Z, cmap=plt.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max())\ncb = fig.colorbar(p, ax=ax)","449525f2":"fig, ax = plt.subplots()\n\nim = ax.imshow(Z, cmap=plt.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])\nim.set_interpolation('bilinear')\n\ncb = fig.colorbar(im, ax=ax)","37af3a85":"fig, ax = plt.subplots()\n\ncnt = ax.contour(Z, cmap=plt.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])","c73ff3e1":"from mpl_toolkits.mplot3d.axes3d import Axes3D","4ee7e682":"fig = plt.figure(figsize=(14,6))\n\n# `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot\nax = fig.add_subplot(1, 2, 1, projection='3d')\n\np = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)\n\n# surface_plot with color grading and color bar\nax = fig.add_subplot(1, 2, 2, projection='3d')\np = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.coolwarm, linewidth=0, antialiased=False)\ncb = fig.colorbar(p, shrink=0.5)","53aee5f2":"fig = plt.figure(figsize=(8,6))\n\nax = fig.add_subplot(1, 1, 1, projection='3d')\n\np = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)","5ca5289a":"fig = plt.figure(figsize=(8,6))\n\nax = fig.add_subplot(1,1,1, projection='3d')\n\nax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)\ncset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=plt.cm.coolwarm)\ncset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=plt.cm.coolwarm)\ncset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=plt.cm.coolwarm)\n\nax.set_xlim3d(-np.pi, 2*np.pi);\nax.set_ylim3d(0, 3*np.pi);\nax.set_zlim3d(-np.pi, 2*np.pi);","a859477d":"To use 3D graphics in matplotlib, we first need to create an instance of the `Axes3D` class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a `projection='3d'` keyword argument to the `add_axes` or `add_subplot` methods.","7ae71238":"#### add_axes","27a037e2":"It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using `set_xscale` and `set_yscale` methods which accept one parameter (with the value \"log\" in this case):","460cd457":"#### imshow","078706bc":"### Twin axes","7dcfdf1e":"We can also change the properties of axis spines:","ee27ae95":"Manually adding axes with `add_axes` is useful for adding insets to figures:","c864f738":"#### pcolor","b47439b5":"With large numbers on axes, it is often better use scientific notation:","93523d76":"### Figures with multiple subplots and insets","5f55de1d":"Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps. For a list of pre-defined colormaps, see: http:\/\/www.scipy.org\/Cookbook\/Matplotlib\/Show_colormaps","195a934c":"We can explicitly determine where we want the axis ticks with `set_xticks` and `set_yticks`, which both take a list of values for where on the axis the ticks are to be placed. We can also use the `set_xticklabels` and `set_yticklabels` methods to provide a list of custom text labels for each tick location:","f10d3b47":"#### gridspec","4f27124e":"There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See http:\/\/matplotlib.org\/api\/ticker_api.html for details.","dd945bb5":"# Advanced Matplotlib Concepts Lecture\n\nIn this lecture we  cover some more advanced topics which you won't usually use as often. You can always reference the documentation for more resources!","754c05b0":"### Colormap and contour figures","70a5de2c":"#### subplots","cfe95f11":"In addition to the regular `plot` method, there are a number of other functions for generating different kind of plots. See the matplotlib plot gallery for a complete list of available plot types: http:\/\/matplotlib.org\/gallery.html. Some of the more useful ones are show below:","2248f678":"## 3D figures","b32ce651":"Annotating text in matplotlib figures can be done using the `text` function. It supports LaTeX formatting just like axis label texts and titles:","3592583f":"#### contour","a963ee69":"#### Surface plots","bd9f9390":"#### Coutour plots with projections","e92b5bfa":"* http:\/\/www.matplotlib.org - The project web page for matplotlib.\n* https:\/\/github.com\/matplotlib\/matplotlib - The source code for matplotlib.\n* http:\/\/matplotlib.org\/gallery.html - A large gallery showcaseing various types of plots matplotlib can create. Highly recommended! \n* http:\/\/www.loria.fr\/~rougier\/teaching\/matplotlib - A good matplotlib tutorial.\n* http:\/\/scipy-lectures.github.io\/matplotlib\/matplotlib.html - Another good matplotlib reference.\n","9f340c97":"### Placement of ticks and custom tick labels","e0fa2bbd":"### Axis spines","68ee2c3d":"### Axis number and axis label spacing","002dbb8d":"Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the `twinx` and `twiny` functions:","9bb7a0cd":"#### Axis position adjustments","b790a259":"### Axis grid","42d12ea7":"Axes can be added to a matplotlib Figure canvas manually using `fig.add_axes` or using a sub-figure layout manager such as `subplots`, `subplot2grid`, or `gridspec`:","12e2e694":"### Axes where x and y is zero","2daabc79":"## Further reading","d74df5ca":"#### Logarithmic scale","c532cee5":"#### subplot2grid","a51e9831":"### Text annotation","d66dd626":"#### Wire-frame plot","3b7a04b2":"Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using `subplots_adjust`:","cb7d3870":"#### Scientific notation","cb793c4c":"### Other 2D plot styles","044d353c":"With the `grid` method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the `plot` function:"}}