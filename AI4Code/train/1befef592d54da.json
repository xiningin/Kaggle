{"cell_type":{"f1873470":"code","8b1e0108":"code","5c4f49cc":"code","3402287f":"code","cccc9fad":"code","ddee9491":"code","723774cc":"code","bc21a998":"code","05618047":"code","d51999f8":"code","9ae891bd":"code","831f5e54":"code","7dca2384":"code","8edbebe5":"code","514f93a7":"code","3464a5ea":"code","6bf1d7fc":"code","a9818db8":"code","d3f8deda":"code","a81ae8bc":"code","9728e77f":"code","a3ef64b1":"code","1643dad2":"code","b95b392a":"code","aa6e1522":"code","56d84960":"code","4d2cc18d":"code","d5872498":"code","f7b3e378":"code","f647d647":"markdown","d951bf51":"markdown","974b35eb":"markdown","b39a37f4":"markdown","90c1037c":"markdown","79d98c03":"markdown","aee596f3":"markdown","e7113294":"markdown","eef1a5eb":"markdown","a547fcc5":"markdown","bf6a311b":"markdown","a0a6764b":"markdown","92698182":"markdown","ec25a891":"markdown"},"source":{"f1873470":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\n\nimport tensorflow as tf\nfrom functools import partial\nfrom tensorflow import keras\nimport keras.layers as L\n\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping, CSVLogger, LearningRateScheduler\n\nfrom kaggle_datasets import KaggleDatasets\n\nimport re","8b1e0108":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(\"Device:\", tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint(\"Number of replicas:\", strategy.num_replicas_in_sync)","5c4f49cc":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n\nGCS_DS_Path = KaggleDatasets().get_gcs_path('tpu-getting-started')\nprint(GCS_DS_Path)","3402287f":"IMAGE_SIZE = [512,512]\nEPOCHS = 22\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\n\nGCS_PATH = GCS_DS_Path + \"\/tfrecords-jpeg-512x512\"","cccc9fad":"train_files = tf.io.gfile.glob(GCS_PATH + \"\/train\/*.tfrec\")\nval_files = tf.io.gfile.glob(GCS_PATH + \"\/val\/*.tfrec\")\ntest_files = tf.io.gfile.glob(GCS_PATH + \"\/test\/*.tfrec\")","ddee9491":"print(\"Train TFRecord Files:\", len(train_files))\nprint(\"Validation TFRecord Files:\", len(val_files))\nprint(\"Test TFRecord Files:\", len(test_files))","723774cc":"def decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image","bc21a998":"def read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)","05618047":"def load_dataset(filenames, labeled = True, ordered = False):\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disables order , increases speed\n        \n    dataset = tf.data.TFRecordDataset(\n        filenames,\n        num_parallel_reads=AUTOTUNE\n    ) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(\n        ignore_order   \n    )  # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTOTUNE\n                         ) # returns a dataset of (image, label) pairs if labeled=True or just images if labeled=False\n    return dataset","d51999f8":"def data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    #image = tf.image.random_flip_up_down(image)\n    #image = tf.image.random_saturation(image, lower=0, upper=2)\n    #image = tf.image.rot90(image)\n    return image, label\n\ndef count_data_items(filenames):\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)","9ae891bd":"NUM_TRAIN_IMAGES = count_data_items(train_files)\nNUM_VAL_IMAGES = count_data_items(val_files)\nNUM_TEST_IMAGES = count_data_items(test_files)\nprint(f\"train : {NUM_TRAIN_IMAGES}, test : {NUM_TEST_IMAGES}, val : {NUM_VAL_IMAGES}\")","831f5e54":"def get_train_dataset(filenames, labeled = True, shuffle = True):\n    dataset = load_dataset(filenames, labeled = labeled)\n    dataset = dataset.map(data_augment, num_parallel_calls = AUTOTUNE)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n\ndef get_val_dataset(filenames, labeled = True, ordered = False):\n    dataset = load_dataset(filenames, labeled=labeled,ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset\n    \ndef get_test_dataset(filenames, labeled = False, ordered = False):\n    dataset = load_dataset(filenames, labeled=labeled, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTOTUNE)\n    return dataset","7dca2384":"train_dataset = get_train_dataset(filenames=train_files)\nval_dataset = get_val_dataset(filenames=val_files)","8edbebe5":"CLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']","514f93a7":"image_batch, label_batch = next(iter(val_dataset))\n\ndef show_batch(image_batch, label_batch):\n    plt.figure(figsize = [20,12])\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.imshow(image_batch[i])\n        plt.title(CLASSES[label_batch[i].numpy()])\n        plt.axis('off')\n    plt.show()","3464a5ea":"show_batch(image_batch, label_batch)","6bf1d7fc":"init_lr = 1e-4\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    init_lr, decay_steps=10_000, decay_rate=0.96, staircase=True\n)\n\n\nmy_callbacks = [ModelCheckpoint(\"flowers&flowers.h5\", save_best_only=True),\n               EarlyStopping(monitor=\"val_loss\", patience=4),\n               CSVLogger(\"train.log\")]","a9818db8":"def make_model():\n    base_model = tf.keras.applications.DenseNet121(\n        input_shape = [*IMAGE_SIZE, 3], include_top = False, \n        weights = \"imagenet\", pooling=\"avg\"\n    )\n    \n    base_model.trainable = True\n    \n    for layer in base_model.layers[:54]:\n        layer.trainable = False\n    \n    inputs = L.Input([*IMAGE_SIZE, 3])\n    #x = tf.keras.applications.densenet.preprocess_input(inputs)\n    x = base_model(inputs)\n    #x = L.Dense(256, activation = \"relu\")(x)\n    #x = L.Dropout(0.4)(x)\n    outputs = L.Dense(104, activation = \"softmax\")(x)\n    \n    model = tf.keras.models.Model(inputs, outputs)\n    \n    model.compile(\n        optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule),\n        loss = \"sparse_categorical_crossentropy\",\n        metrics = [\"sparse_categorical_accuracy\"]\n    )\n    \n    print(model.summary())\n    return model","d3f8deda":"with strategy.scope():\n    model = make_model()","a81ae8bc":"STEPS_PER_EPOCH = NUM_TRAIN_IMAGES \/\/ BATCH_SIZE","9728e77f":"history = model.fit(train_dataset,\n                    epochs = EPOCHS,\n                    steps_per_epoch = STEPS_PER_EPOCH,\n                    validation_data = val_dataset,\n                    callbacks = my_callbacks)","a3ef64b1":"plt.figure(figsize=(15,6))\n\nplt.subplot(1,2,1)\nplt.plot(history.epoch,history.history['sparse_categorical_accuracy'],label = 'Training')\nplt.plot(history.epoch,history.history['val_sparse_categorical_accuracy'],label = 'validation')\n\nplt.title(\"Accuracy\")\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.plot(history.epoch,history.history['loss'],label = 'Training')\nplt.plot(history.epoch,history.history['val_loss'],label = 'validation')\n\nplt.title(\"Loss\")\nplt.legend()\nplt.show()","1643dad2":"model = tf.keras.models.load_model(\".\/flowers&flowers.h5\")","b95b392a":"model.evaluate(val_dataset)","aa6e1522":"test_dataset = get_test_dataset(test_files, ordered = True)","56d84960":"def show_batch_predictions(image_batch):\n    plt.figure(figsize=(20, 12))\n    for n in range(25):\n        ax = plt.subplot(5, 5, n + 1)\n        plt.imshow(image_batch[0][n])\n        img_array = tf.expand_dims(image_batch[0][n], axis=0)\n        plt.title(CLASSES[np.argmax(model.predict(img_array)[0])])\n        plt.axis(\"off\")\n\n\nimage_batch = next(iter(test_dataset))\n\nshow_batch_predictions(image_batch)","4d2cc18d":"sample = pd.read_csv(\"..\/input\/tpu-getting-started\/sample_submission.csv\")","d5872498":"sample","f7b3e378":"print(\"Making Predictions....\")\n\ntest_images_ds = test_dataset.map(lambda image, idnum : image)\nprob = model.predict(test_images_ds)\npred = np.argmax(prob, axis = -1)\nprint(pred)\n\nprint(\"Generating CSV file....\")\n\ntest_ids_ds = test_dataset.map(lambda image, idnum : idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(7382))).numpy().astype(\"U\")\n\nprint(\"Saving CSV....\")\n\nnp.savetxt(\n    \"submission.csv\",\n    np.rec.fromarrays([test_ids, pred]),\n    fmt = ['%s', '%d'],\n    delimiter = \",\",\n    header = \"id,label\",\n    comments=\"\",\n)\nprint(\"Completed!\")","f647d647":"**LABELS**","d951bf51":"## **Defining Loading Models**","974b35eb":"**Accuracy \/ loss**","b39a37f4":"### **Define Callbacks**","90c1037c":"## **Data Configuration**","79d98c03":"## **MODEL**","aee596f3":"### **Submission.**","e7113294":"## **Visualize some Images**","eef1a5eb":"### **Training**","a547fcc5":"## **Importing Libraries.**","bf6a311b":"## **Test and Predictions.**","a0a6764b":"## **Device**","92698182":"### **Build the model.**","ec25a891":"## **Decoding the Data**"}}