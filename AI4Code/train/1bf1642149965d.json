{"cell_type":{"6c4a3cb7":"code","d1a24904":"code","e370d6fa":"code","8c2c932a":"code","2438a837":"code","12f42fa6":"code","2a678af2":"code","5d7414f7":"code","3a8512d4":"code","81fd2bbc":"code","69e61992":"code","58972587":"code","492fc80b":"code","6d29930a":"code","e2fed403":"code","485afb2e":"code","f438d198":"code","4cdc6ed3":"code","12778fea":"code","e6a4b2bc":"code","46d2b866":"code","6781bc99":"code","251e3826":"code","bf1b6945":"code","5eb67e05":"code","c701d333":"code","edf3ee5f":"code","67e25400":"code","902f3583":"code","fca77291":"code","d852a295":"code","0e022f6e":"code","c2a5f316":"code","82cc742a":"code","31fbdd8d":"code","54be6d2b":"code","88405f16":"code","9e1e9c47":"code","db933c3b":"code","8a70f780":"code","2dc0e005":"code","e598f4ed":"code","2da4300e":"code","15367612":"code","85aabcbb":"code","f258ebcd":"code","bc7840e2":"code","fe93ca54":"markdown","2196e4c5":"markdown","e25d15ac":"markdown","a3358d51":"markdown","bc0bd34e":"markdown","c7023b01":"markdown","0983a800":"markdown","636666b5":"markdown","a78a1331":"markdown","b37aba74":"markdown","2e4c7eb6":"markdown","113466d9":"markdown","7a23bf01":"markdown","1302bfe6":"markdown","27d5eadd":"markdown","473381da":"markdown","ec534ddd":"markdown","65dfcc1d":"markdown","2edfecd3":"markdown","89e9e476":"markdown","363bb328":"markdown","d6031b4e":"markdown","4f30cd43":"markdown","aa045288":"markdown","60cdbc04":"markdown","9cda13d6":"markdown","dd175a2d":"markdown","e8b84d24":"markdown"},"source":{"6c4a3cb7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","d1a24904":"confirmed = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_confirmed_global.csv')\ndeaths = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_deaths_global.csv')\nrecovered = pd.read_csv('..\/input\/covid-dataset\/time_series_covid19_recovered_global.csv')","e370d6fa":"confirmed.head()","8c2c932a":"world_confirmed = confirmed.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_confirmed.head()","2438a837":"dates = list(world_confirmed.columns)","12f42fa6":"world_confirmed_list = []\nfor col in world_confirmed:\n    world_confirmed_list.append(sum(world_confirmed[col]))","2a678af2":"dates_final, world_confirmed_finallist = [], []\nfor i in range(len(dates)):\n    if i%5==0:\n        dates_final.append(dates[i])\n        world_confirmed_finallist.append(world_confirmed_list[i])","5d7414f7":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 6))\nplt.plot(dates_final, world_confirmed_finallist, 'o-b')\nplt.xticks(fontsize=10, rotation=90)\nplt.xlabel('Dates')\nplt.ylabel('No. of Confirmed Cases')\nplt.title('World Confirmed Cases Analysis')\nplt.grid(True)\nplt.tight_layout()\nplt.show()","3a8512d4":"deaths.head()","81fd2bbc":"world_deaths = deaths.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_deaths.head()","69e61992":"dates = list(world_deaths.columns)","58972587":"world_deaths_list = []\nfor col in world_deaths:\n    world_deaths_list.append(sum(world_deaths[col]))","492fc80b":"dates_final, world_deaths_finallist = [], []\nfor i in range(len(dates)):\n    if i%5==0:\n        dates_final.append(dates[i])\n        world_deaths_finallist.append(world_deaths_list[i])","6d29930a":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 6))\nplt.plot(dates_final, world_deaths_finallist, 'o-b')\nplt.xticks(fontsize=10, rotation=90)\nplt.xlabel('Dates')\nplt.ylabel('No. of Deaths')\nplt.title('Death Analysis')\nplt.grid(True)\nplt.tight_layout()\nplt.show()","e2fed403":"recovered.head()","485afb2e":"world_recovered = recovered.drop(labels=['Province\/State', 'Lat', 'Long', 'Country\/Region'], axis=1)\nworld_recovered.head()","f438d198":"dates = list(world_recovered.columns)","4cdc6ed3":"world_recovered_list = []\nfor col in world_recovered:\n    world_recovered_list.append(sum(world_recovered[col]))","12778fea":"dates_final, world_recovered_finallist = [], []\nfor i in range(len(dates)):\n    if i%5==0:\n        dates_final.append(dates[i])\n        world_recovered_finallist.append(world_recovered_list[i])","e6a4b2bc":"plt.style.use('fivethirtyeight')\nplt.figure(figsize=(10, 5))\nplt.plot(dates_final, world_recovered_finallist, 'o-b')\nplt.xticks(fontsize=10, rotation=90)\nplt.xlabel('Dates')\nplt.ylabel('No. of Recoveries')\nplt.title('Recovery Analysis')\nplt.grid(True)\nplt.tight_layout()\nplt.show()","46d2b866":"confirmed.head()","6781bc99":"countries_confirmed = confirmed.drop(labels=['Province\/State', 'Lat', 'Long'], axis=1)\ncountries_confirmed.head()","251e3826":"countries_confirmed['Total'] = countries_confirmed['1\/22\/20']\nfor col in countries_confirmed.columns:\n    if col == 'Country\/Region' or col == '1\/22\/20':\n        continue\n    countries_confirmed['Total'] += countries_confirmed[col]","bf1b6945":"countries_confirmed.head()","5eb67e05":"countries_confirmed = countries_confirmed.groupby(['Country\/Region']).sum()\ncountries_confirmed.reset_index(inplace=True)\ncountries_confirmed_1 = countries_confirmed[['Country\/Region', 'Total']]\ncountries_confirmed_1 = countries_confirmed[countries_confirmed['Total'] > 5000000]\ncountries_confirmed_1.head()","c701d333":"countries = list(countries_confirmed_1['Country\/Region'])\nconfirmed_list = list(countries_confirmed_1.Total)\nprint(countries)\nprint(confirmed_list)","edf3ee5f":"plt.style.use('fivethirtyeight')\ny_pos = np.arange(len(countries))\nplt.figure(figsize=(10, 6))\nplt.barh(y_pos, confirmed_list, align='center')\nplt.yticks(ticks=y_pos, labels=countries, fontsize=9)\nplt.xlabel('No. of confirmed cases')\nplt.ylabel('Countries')\nplt.gca().invert_yaxis()\nplt.title('Confirmed cases')\nplt.grid(True)\nplt.show()","67e25400":"deaths.head()","902f3583":"countries_deaths = deaths.drop(labels=['Province\/State', 'Lat', 'Long'], axis=1)\ncountries_deaths.head()","fca77291":"countries_deaths['Total'] = countries_deaths['1\/22\/20']\nfor col in countries_deaths.columns:\n    if col == 'Country\/Region' or col == '1\/22\/20':\n        continue\n    countries_deaths['Total'] += countries_deaths[col]","d852a295":"countries_deaths.head()","0e022f6e":"countries_deaths = countries_deaths.groupby(['Country\/Region']).sum()\ncountries_deaths.reset_index(inplace=True)\ncountries_deaths_1 = countries_deaths[['Country\/Region', 'Total']]\ncountries_deaths_1 = countries_deaths[countries_deaths['Total'] > 50000]\ncountries_deaths_1.head()","c2a5f316":"countries = list(countries_deaths_1['Country\/Region'])\ndeath_list = list(countries_deaths_1.Total)\nprint(countries)\nprint(death_list)","82cc742a":"plt.style.use('fivethirtyeight')\ny_pos = np.arange(len(countries))\nplt.figure(figsize=(10, 8))\nplt.barh(y_pos, death_list, align='center')\nplt.yticks(ticks=y_pos, labels=countries, fontsize=8)\nplt.xlabel('No. of death cases')\nplt.ylabel('Countries')\nplt.gca().invert_yaxis()\nplt.title('Death cases')\nplt.grid(True)\nplt.show()","31fbdd8d":"recovered.head()","54be6d2b":"countries_recovered = recovered.drop(labels=['Province\/State', 'Lat', 'Long'], axis=1)\ncountries_recovered.head()","88405f16":"countries_recovered['Total'] = countries_recovered['1\/22\/20']\nfor col in countries_recovered.columns:\n    if col == 'Country\/Region' or col == '1\/22\/20':\n        continue\n    countries_recovered['Total'] += countries_recovered[col]","9e1e9c47":"countries_recovered.head()","db933c3b":"countries_recovered = countries_recovered.groupby(['Country\/Region']).sum()\ncountries_recovered.reset_index(inplace=True)\ncountries_recovered_1 = countries_recovered[['Country\/Region', 'Total']]\ncountries_recovered_1 = countries_recovered[countries_recovered['Total'] > 5000000]\ncountries_recovered_1.head()","8a70f780":"countries = list(countries_recovered_1['Country\/Region'])\nrecovered_list = list(countries_recovered_1.Total)\nprint(countries)\nprint(recovered_list)","2dc0e005":"plt.style.use('fivethirtyeight')\ny_pos = np.arange(len(countries))\nplt.figure(figsize=(10, 6))\nplt.barh(y_pos, recovered_list, align='center')\nplt.yticks(ticks=y_pos, labels=countries, fontsize=10)\nplt.xlabel('No. of recovered cases')\nplt.ylabel('Countries')\nplt.gca().invert_yaxis()\nplt.title('Recoveries cases')\nplt.grid(True)\nplt.show()","e598f4ed":"world_data = pd.merge(countries_confirmed, countries_deaths, on='Country\/Region')\nworld_data = pd.merge(world_data, countries_recovered, on='Country\/Region')\nworld_data = world_data[['Country\/Region', 'Total_x', 'Total_y', 'Total']]\nworld_data = world_data.rename(columns={'Total_x':'Confirmed', 'Total_y':'Deaths', 'Total':'Recovered'})","2da4300e":"world_data = world_data.set_index('Country\/Region')\nworld_data","15367612":"def print_pie(country, world_data=world_data):\n    slices = [int(world_data.loc[[country]].Confirmed),\n                  int(world_data.loc[[country]].Deaths),\n                  int(world_data.loc[[country]].Recovered)]\n    labels = ['Confirmed', 'Deaths', 'Recovered']\n    colors = ['#2EC6DE', '#C70D26', '#6EB323']\n    plt.pie(slices, labels=labels, colors=colors, autopct='%1.1f%%',\n            wedgeprops={'edgecolor': 'black', 'linewidth': 1})\n    plt.title(country+' Records')\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()","85aabcbb":"print_pie(input('Enter a country(first letter caps): '))","f258ebcd":"print_pie(input('Enter a country(first letter caps): '))","bc7840e2":"print_pie(input('Enter a country(first letter caps): '))","fe93ca54":"### Counting the total of each country","2196e4c5":"### A function is defined to draw the pie chart for the country user inputs","e25d15ac":"### Considering the dates after each 5 days to reduce the data as the output graph looks the same","a3358d51":"### Keeping threshold to reduce the congestion in the graph","bc0bd34e":"### Removing redundant columns","c7023b01":"### Counting the total of each country","0983a800":"### Summing up all nums for each date as its describing world","636666b5":"### Removing redundant columns","a78a1331":"### Summing up all nums for each date as its describing world","b37aba74":"# Countries Confirmed","2e4c7eb6":"# Country wise confirmed, deaths, recovery cases","113466d9":"### Counting the total of each country","7a23bf01":"### Considering the dates after each 5 days to reduce the data as the output graph looks the same","1302bfe6":"# Country specific Graph","27d5eadd":"### Removing redundant columns","473381da":"### Keeping threshold to reduce the congestion in the graph","ec534ddd":"### Removing redundant columns","65dfcc1d":"### Removing redundant columns","2edfecd3":"# World Deaths analysis","89e9e476":"### Keeping threshold to reduce the congestion in the graph","363bb328":"### Summing up all nums for each date as its describing world","d6031b4e":"### Considering the dates after each 5 days to reduce the data as the output graph looks the same","4f30cd43":"### Removing redundant columns","aa045288":"# World Recovered analysis","60cdbc04":"# World Confirmed analysis","9cda13d6":"# Countries Recoveries","dd175a2d":"### I have merged the dataset into one of countries their confirmed, deaths and recovered cases together","e8b84d24":"# Countries Deaths"}}