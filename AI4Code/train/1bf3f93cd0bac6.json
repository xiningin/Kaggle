{"cell_type":{"b595baa8":"code","5e194d5d":"code","849a7d64":"code","709115ed":"code","fa788918":"code","5faf7b4f":"code","7c711383":"code","222d8f82":"code","db21e06d":"code","970d3ccd":"code","49ee7e87":"code","a9a3fab0":"code","9d15c893":"code","ab74546c":"code","b2be7cae":"code","ea32fd0a":"code","e56b989e":"code","ca9b7faf":"code","a8501aef":"code","3ca6897d":"code","0f4448fd":"code","df379ba7":"code","d917f5c1":"code","237f8bf6":"code","a5df7be6":"code","065322eb":"code","7265b138":"code","f35c3ffa":"code","23a8ad6f":"code","2f2a9fdb":"markdown","fdcd1700":"markdown","58fd029d":"markdown","6544bd28":"markdown","7e249314":"markdown","ba4ffc14":"markdown","f8e72c6b":"markdown","fc4cfd4a":"markdown","73f98c46":"markdown","c7e3889a":"markdown","24b26c8a":"markdown","b635db27":"markdown","c88f3d11":"markdown","7289c89b":"markdown","1447240b":"markdown","c1096ad1":"markdown","93f37955":"markdown","3be95d8d":"markdown","c1ef46d3":"markdown","76ec8830":"markdown","4bb18421":"markdown","6f5c849a":"markdown","5f88a9cd":"markdown","cded64e4":"markdown","fbeb0ad8":"markdown"},"source":{"b595baa8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e194d5d":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import KFold\nimport warnings\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nwarnings.filterwarnings(\"ignore\")","849a7d64":"cs_training = pd.read_csv(\"\/kaggle\/input\/GiveMeSomeCredit\/cs-training.csv\")\ncs_test = pd.read_csv(\"\/kaggle\/input\/GiveMeSomeCredit\/cs-test.csv\")","709115ed":"cs_training.info()","fa788918":"fea_fw = cs_training.describe([0.01, 0.10, 0.25, 0.50, 0.75, 0.90, 0.99]).T\nfea_fw","5faf7b4f":"cs_training.isnull().mean()","7c711383":"sns.countplot('SeriousDlqin2yrs' ,data = cs_training)\nplt.show()","222d8f82":"#\u5206\u6876\u540e\u7684\u7279\u5f81\u4e0e\u6807\u7b7e\u7684\u5173\u8054\ndef fea_label_association(fea_name):\n    fea = cs_training[fea_name]\n    isnullrate = sum(fea.isnull()) \/ fea.shape[0]\n    print(fea_name, \"null rate:\", round(isnullrate, 3))\n    fea_cate = pd.qcut(fea, 10, duplicates='drop')\n    fea_cate_pd = pd.concat([fea_cate, cs_training['SeriousDlqin2yrs']], axis=1)\n    df = fea_cate_pd.groupby(fea_name)[\"SeriousDlqin2yrs\"].agg(['sum','count']).reset_index()\n    new_fea_name = '%s_stas'%(fea_name)\n    df.loc[:, new_fea_name] = df['sum'] \/ df['count']\n    random_death = sum(cs_training['SeriousDlqin2yrs']) \/ cs_training.shape[0]\n    fig,ax = plt.subplots(figsize=(10,5))\n\n    x = [str(i) for i in (list(df[fea_name].values))]\n    y = list(df['%s_stas'%(fea_name)].values)\n    x.append('random')\n    y.append(random_death)\n    ax.barh(x,y,orientation='horizontal')\n    #for a,b in zip()\n    for i, v in enumerate(y):\n        ax.text(v+0.01,i-0.1, np.round(v,3))\n    ax.set_xlim(0,max(y)+0.04)\n    plt.xlabel('rate')\n    plt.ylabel(fea_name)\n    plt.title('the assocation between %s and SeriousDlqin2yrs' % (fea_name))\n    plt.show()\n\n#\u672a\u5206\u6876\u540e\u7684\u7279\u5f81\u4e0e\u6807\u7b7e\u7684\u5173\u8054\ndef fea_label_association_null_bin(fea_name):\n    fea = cs_training[fea_name]\n    isnullrate = sum(fea.isnull()) \/ fea.shape[0]\n    print(fea_name, \"null rate:\", round(isnullrate, 3))\n    fea_cate = fea\n    fea_cate_pd = pd.concat([fea_cate, cs_training['SeriousDlqin2yrs']], axis=1)\n    df = fea_cate_pd.groupby(fea_name)[\"SeriousDlqin2yrs\"].agg(['sum','count']).reset_index()\n    new_fea_name = '%s_stas'%(fea_name)\n    df.loc[:, new_fea_name] = df['sum'] \/ df['count']\n    random_death = sum(cs_training['SeriousDlqin2yrs']) \/ cs_training.shape[0]\n    fig,ax = plt.subplots(figsize=(10,5))\n    x = [str(i) for i in (list(df[fea_name].values))]\n    y = list(df['%s_stas'%(fea_name)].values)\n    x.append('random')\n    y.append(random_death)\n    ax.barh(x,y,orientation='horizontal')\n    #for a,b in zip()\n    for i, v in enumerate(y):\n        ax.text(v+0.01,i-0.1, np.round(v,3))\n    ax.set_xlim(0,max(y)+0.04)\n    plt.xlabel('rate')\n    plt.ylabel(fea_name)\n    plt.title('the assocation between %s and SeriousDlqin2yrs' % (fea_name))\n    plt.show()","db21e06d":"fea_name = 'RevolvingUtilizationOfUnsecuredLines'\nfea_label_association(fea_name)","970d3ccd":"abnormal_num = fea_fw['99%'][fea_name]\n# cs_training = cs_training[cs_training[fea_name] <= abnormal_num] #\u53bb\u9664\u5f02\u5e38\u503c\ndef func(x, abnormal_num):\n    if x >=abnormal_num:\n        return abnormal_num\n    else:\n        return x\ncs_training[fea_name] = cs_training[fea_name].apply(lambda x:func(x, abnormal_num)) #\u4fee\u6539\u5f02\u5e38\u503c\ncs_test[fea_name] = cs_test[fea_name].apply(lambda x:func(x, abnormal_num)) #\u4fee\u6539\u5f02\u5e38\u503c","49ee7e87":"fea_name = 'age'\nfea_label_association(fea_name)","a9a3fab0":"plt.figure(figsize=[10, 8])\nplt.subplot(221)\nsns.boxplot(data=cs_training['age'])\nplt.ylabel('age') \nplt.subplot(222)\nsns.distplot(cs_training['age'])\nplt.xlabel('age')\nplt.show()","9d15c893":"fea_name = 'NumberOfTime30-59DaysPastDueNotWorse'\nfea_label_association(fea_name)","ab74546c":"fea_name = 'DebtRatio'\nfea_label_association(fea_name)","b2be7cae":"abnormal_num = fea_fw['99%'][fea_name]\n# cs_training = cs_training[cs_training[fea_name] <= abnormal_num] #\u53bb\u9664\u5f02\u5e38\u503c\ndef func(x, abnormal_num):\n    if x >=abnormal_num:\n        return abnormal_num\n    else:\n        return x\ncs_training[fea_name] = cs_training[fea_name].apply(lambda x:func(x, abnormal_num)) #\u4fee\u6539\u5f02\u5e38\u503c\ncs_test[fea_name] = cs_test[fea_name].apply(lambda x:func(x, abnormal_num)) #\u4fee\u6539\u5f02\u5e38\u503c","ea32fd0a":"fea_name = 'MonthlyIncome'\nfea_label_association(fea_name)\n\n#\u6708\u6536\u5165\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u53ef\u7528\u4e2d\u4f4d\u6570\u586b\u5145\n#cs_training.MonthlyIncome.fillna(value=cs_training.MonthlyIncome.median(), inplace=True)","e56b989e":"fea_name = 'NumberOfOpenCreditLinesAndLoans'\nfea_label_association(fea_name)","ca9b7faf":"print(cs_training[cs_training['NumberOfOpenCreditLinesAndLoans']==0]['SeriousDlqin2yrs'].mean())\nprint(cs_training[cs_training['NumberOfOpenCreditLinesAndLoans']==1]['SeriousDlqin2yrs'].mean())\nprint(cs_training[cs_training['NumberOfOpenCreditLinesAndLoans']==2]['SeriousDlqin2yrs'].mean())","a8501aef":"fea_name = 'NumberOfTimes90DaysLate'\nfea_label_association_null_bin(fea_name)","3ca6897d":"fea_name = 'NumberRealEstateLoansOrLines'\nfea_label_association(fea_name)","0f4448fd":"fea_name = 'NumberOfTime60-89DaysPastDueNotWorse'\nfea_label_association_null_bin(fea_name)","df379ba7":"fea_name = 'NumberOfDependents'\nfea_label_association_null_bin(fea_name)\n\n#\u7531\u4e8e\u501f\u8d37\u4eba\u5bb6\u5ead\u4eba\u6570\u5b58\u5728\u7f3a\u5931\u503c\uff0c\u53ef\u7528\u4e2d\u4f4d\u6570\u586b\u5145\n# cs_training.NumberOfDependents.fillna(value=cs_training.NumberOfDependents.median(), inplace=True)","d917f5c1":"cs_training['AllNumlate']=cs_training['NumberOfTime30-59DaysPastDueNotWorse']+cs_training['NumberOfTime60-89DaysPastDueNotWorse']+cs_training['NumberOfTimes90DaysLate']\ncs_training['Monthlypayment']=cs_training['DebtRatio']*cs_training['MonthlyIncome']\n\ncs_test['AllNumlate']=cs_test['NumberOfTime30-59DaysPastDueNotWorse']+cs_test['NumberOfTime60-89DaysPastDueNotWorse']+cs_test['NumberOfTimes90DaysLate']\ncs_test['Monthlypayment']=cs_test['DebtRatio']*cs_test['MonthlyIncome']","237f8bf6":"for i in cs_training.columns:\n    print(i,cs_training[i].dtype)\ncolumns = [col for col in cs_training.columns if col!='Unnamed: 0' and col != 'SeriousDlqin2yrs']\nprint(columns)","a5df7be6":"X = cs_training[columns]\nY = cs_training['SeriousDlqin2yrs']\nclf = lgb.LGBMClassifier(n_estimators=300,colsample_bytree=0.95,subsample=0.95, learning_rate=0.05)\nprint(clf)","065322eb":"train_auc_list = []\ntest_auc_list = []\nbest_iter_list = []\nkf = KFold(n_splits=5,shuffle=True, random_state=2021)\nfold_index = 0\nfor train_index, test_index in kf.split(X):\n    print(\"*\"*10,fold_index,\"*\"*10)\n    X_train,X_test,Y_train,Y_test = X.loc[train_index], X.loc[test_index], Y.loc[train_index], Y.loc[test_index]\n    print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)\n    clf.fit(X_train,Y_train,\n           eval_set=[(X_train, Y_train), (X_test, Y_test)],\n           verbose=100,\n           early_stopping_rounds=35)\n    print(\"best_iter:\",clf.best_iteration_)\n    train_pre = clf.predict_proba(X_train)[:,1]\n    test_pre = clf.predict_proba(X_test)[:,1]\n    train_auc = roc_auc_score(Y_train, train_pre)\n    test_auc = roc_auc_score(Y_test, test_pre)\n    print(\"train_auc:%.4f test_auc:%.4f\" % (train_auc, test_auc))\n    best_iter_list.append(clf.best_iteration_)\n    test_auc_list.append(test_auc)\n    fold_index += 1\n    col_importance = pd.DataFrame({'columns':columns,'importance':clf.feature_importances_}).sort_values(by='importance', ascending=False)\n    print(col_importance)","7265b138":"print(np.round(test_auc_list,4), np.round(np.mean(test_auc_list),4))\nprint(best_iter_list, np.mean(best_iter_list)) #0.8657","f35c3ffa":"clf = lgb.LGBMClassifier(n_estimators=int(np.mean(best_iter_list)),colsample_bytree=0.95,subsample=0.95, learning_rate=0.05)\nclf.fit(X,Y)\ntest_pre = clf.predict_proba(cs_test[columns])[:,1]","23a8ad6f":"res = pd.DataFrame({'Id':cs_test['Unnamed: 0'],'Probability':test_pre})\nres.to_csv(\"submission.csv\", index=None)","2f2a9fdb":"### NumberOfTime30-59DaysPastDueNotWorse int \u8fd1\u4e24\u5e74\u5185\u501f\u6b3e\u4eba\u903e\u671f30-59\u5929\u7684\u6b21\u6570\u8be5\u7279\u5f81\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u8fd1\u4e24\u5e74\u5185\u501f\u6b3e\u4eba\u903e\u671f30-59\u5929\u7684\u6b21\u6570\u8d8a\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b\u5c31\u8d8a\u5927","fdcd1700":"### NumberOfDependents int \u501f\u8d37\u4eba\u5bb6\u5ead\u4eba\u6570\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u501f\u8d37\u4eba\u5bb6\u5ead\u4eba\u6570\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u9ad8","58fd029d":"### \u6a21\u578b\u8bad\u7ec3\u597d\u4e4b\u540e\uff0c\u8fd8\u80fd\u770b\u5230\u7279\u5f81\u91cd\u8981\u6027\u6392\u540d\uff0c\u6392\u540d\u9760\u524d\u7684\u7279\u5f81\u4e3b\u8981\u662fage,RevolvingUtilizationOfUnsecuredLines,MonthlyIncome,DebtRatio\u7b49\uff0c\u4e0e\u524d\u6587\u6570\u636e\u5206\u6790\uff0c\u7279\u5f81\u4e0e\u6807\u7b7e\u7684\u5173\u7cfb\u975e\u5e38\u7b26\u5408","6544bd28":"#### \u6570\u636e\u8bfb\u53d6","7e249314":"### \u5bfc\u5165\u5e38\u7528\u5305","ba4ffc14":"### \u884d\u751f\u53d8\u91cf","f8e72c6b":"# 4.\u7ed3\u679c\u63d0\u4ea4","fc4cfd4a":"### \u8fd9\u662f\u4e00\u4e2a\u6837\u672c\u4e0d\u5e73\u8861\u7684\u95ee\u9898\uff0c\u672a\u6765\u4e24\u5e74\u5185\u51fa\u73b0\u4fe1\u8d37\u95ee\u9898\u7684\u7528\u6237\u5360\u7edd\u5c11\u6570\u3002","73f98c46":"### NumberOfTimes90DaysLate int \u501f\u6b3e\u4eba\u903e\u671f90\u5929\u4ee5\u4e0a\u7684\u6b21\u6570\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u501f\u6b3e\u4eba\u903e\u671f90\u5929\u4ee5\u4e0a\u7684\u6b21\u6570\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u9ad8","c7e3889a":"### NumberOfOpenCreditLinesAndLoans int \u672a\u507f\u8fd8\u8d37\u6b3e\u7b14\u6570\uff08\u8bf8\u5982\u8f66\u8d37\u6216\u62b5\u62bc\u8d37\u6b3e\u7b49\u5206\u671f\u8d37\u6b3e\uff09\u548c\u4e2a\u4eba\u4fe1\u7528\u8d37\uff08\u5982\u4fe1\u7528\u5361\uff09\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u672a\u507f\u8fd8\u8d37\u6b3e\u7b14\u6570\u8d8a\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u9ad8\uff0c\u4e5f\u5b58\u5728\u5f53\u8d37\u6b3e\u7b14\u6570\u4e3a0-3\u7684\u65f6\u5019\uff0c\u662f\u56e0\u4e3a\u4fe1\u8d37\u6b21\u6570\u6bd4\u8f83\u5c11\uff0c\u8fd8\u7f3a\u4e4f\u7ecf\u9a8c\uff0c\u4e0d\u4e86\u89e3\u81ea\u8eab\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b","24b26c8a":"### \u8be5\u7279\u5f81\u7684\u542b\u4e49\u4e3aRevolvingUtilizationOfUnsecuredLines float (\u4e2a\u4eba\u4fe1\u7528\u5361\u989d\u5ea6+\u4e2a\u4eba\u4fe1\u7528\u989d\u5ea6)\/\u4e2a\u4eba\u4fe1\u7528\u603b\u989d\u5ea6\u4ece\u4e0b\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\u8be5\u503c\u8d8a\u5927\uff0c\u672a\u6765\u4e24\u5e74\u7ecf\u6d4e\u56f0\u96be\u7684\u53ef\u80fd\u6027\u4e5f\u8d8a\u5927\uff0c\u8be5\u7279\u5f81\u548c\u6807\u7b7e\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u7279\u5f81\u4f46\u4e5f\u770b\u51fa\u4e86\u6709\u90e8\u5206\u7528\u6237\u5b58\u5728\u5f02\u5e38\u503c\uff0c\u6700\u5927\u7684\u503c\u5df2\u7ecf\u8fbe\u5230\u4e8650708\uff0c\u6b64\u65f6\u6709\u4e24\u79cd\u65b9\u6cd5\u5904\u7406\uff0c\u4e00\u79cd\u662f\u5206\u6876\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u53bb\u9664\u5f02\u5e38\u503c\u7684\u7528\u6237\uff0c\u6216\u8005\u5c06\u5f02\u5e38\u503c\u586b\u5145\u4e3a99%\u7684\u5206\u4f4d\u503c\uff0c1.092956\u8fd9\u6837\u5c31\u6bd4\u8f83\u5408\u7406","b635db27":"### \u67e5\u770b\u7f3a\u5931\u503c","c88f3d11":"### MonthlyIncome float \u6708\u6536\u5165\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6210\u53cd\u6bd4\u7684\u5173\u7cfb\uff0c\u6536\u5165\u8d8a\u4f4e\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u4f4e\uff0c\u6536\u5165\u8d8a\u9ad8\uff0c\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b\u8d8a\u9ad8\n### \u8be5\u7279\u5f81\u6700\u5927\u503c3008750\uff0c\u9ad8\u6536\u5165\u4eba\u7fa4\u4e5f\u5b58\u5728\u8fd9\u4e2a\u53ef\u80fd\u6027\uff0c\u53ef\u4ee5\u5206\u522b\u5c1d\u8bd5\u662f\u5426\u9700\u8981\u53bb\u9664\u79bb\u7fa4\u503c\u7684\u6548\u679c\u6bd4\u5bf9","7289c89b":"# 1.\u9898\u76ee\u7406\u89e3\n\u672c\u6b21\u6570\u636e\u96c6\u63d0\u4f9b\u4e8625\u4e07\u540d\u501f\u6b3e\u4eba\u7684\u5386\u53f2\u6570\u636e\uff0c\u8bad\u7ec3\u96c615\u4e07\uff0c\u6d4b\u8bd5\u96c610\u4e07\u3002\n\u901a\u8fc7\u8bad\u7ec3\u96c6\u8bad\u7ec3\uff0c\u6839\u636e\u4e2a\u4eba\u7279\u5f81\uff0c\u9884\u6d4b\u67d0\u4eba\u5728\u672a\u6765\u4e24\u5e74\u5185\u9047\u5230\u8d22\u52a1\u56f0\u5883\u7684\u53ef\u80fd\u6027\uff0c\u4ece\u800c\u51b3\u5b9a\u662f\u5426\u6388\u4e88\u8d37\u6b3e\u3002\n\u6c42\u6bcf\u4e2a\u4fe1\u8d37\u4eba\u8fdd\u7ea6\u7684\u6982\u7387\uff0c\u8bc4\u4ef7\u6307\u6807\u4e3aAUC\u3002","1447240b":"# 3.\u6a21\u578b\u6784\u5efa\u53ca\u9a8c\u8bc1","c1096ad1":"### NumberRealEstateLoansOrLines int \u62b5\u62bc\u8d37\u6b3e\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u6570\u91cf\uff0c\u5305\u62ec\u623f\u5c4b\u51c0\u503c\u4fe1\u8d37\u989d\u5ea6\u7b49\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u62b5\u62bc\u8d37\u6b3e\u548c\u623f\u5730\u4ea7\u8d37\u6b3e\u6570\u91cf\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u9ad8","93f37955":"### \u67e5\u770b\u53d8\u91cf\u7684\u5206\u4f4d\u6570\u7b49\u4fe1\u606f","3be95d8d":"# 2.\u6570\u636e\u9884\u5904\u7406\u53ca\u7279\u5f81\u5de5\u7a0b","c1ef46d3":"### \u67e5\u770b\u53d8\u91cf\u7684\u6570\u636e\u7ed3\u6784","76ec8830":"### \u9009\u62e9LGBMClassifier\uff0c\u901f\u5ea6\u5feb\uff0c\u51c6\u786e\u7387\u9ad8\uff0c\u53ef\u89e3\u91ca\u6027\u597d","4bb18421":"### Age int \u8be5\u7279\u5f81\u4e3a\u501f\u8d37\u4eba\u5e74\u9f84\uff0c\u5e74\u9f84\u5c0f\uff0c\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b\u5c0f\uff0c\u5e74\u9f84\u5927\uff0c\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b\u4e5f\u8d8a\u5927\uff0c\u662f\u6210\u53cd\u6bd4\u7684\u5173\u7cfb\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u597d\u7684\u7279\u5f81","6f5c849a":"### NumberOfTime60-89DaysPastDueNotWorse int \u501f\u6b3e\u4eba\u903e\u671f 60-89\u5929\u7684\u6b21\u6570\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u501f\u6b3e\u4eba\u903e\u671f 60-89\u5929\u7684\u6b21\u6570\u5c11\uff0c\u627f\u62c5\u98ce\u9669\u80fd\u529b\u8d8a\u9ad8","5f88a9cd":"# \u4e3b\u8981\u5206\u4e3a4\u4e2a\u6b65\u9aa4\n## 1.\u9898\u76ee\u7406\u89e3\n## 2.\u6570\u636e\u9884\u5904\u7406\u53ca\u7279\u5f81\u5de5\u7a0b\n## 3.\u6a21\u578b\u6784\u5efa\u53ca\u9a8c\u8bc1\n## 4.\u7ed3\u679c\u63d0\u4ea4","cded64e4":"### DebtRatio float \u8d1f\u503a\u7387=\uff08\u6bcf\u6708\u507f\u8fd8\u503a\u52a1+\u8d61\u517b\u8d39+\u751f\u6d3b\u8d39\u7528\uff09\/ \u6bcf\u6708\u603b\u6536\u5165\n### \u8be5\u7279\u5f81\u4e0e\u6807\u7b7e\u662f\u6574\u4f53\u6210\u6b63\u6bd4\u7684\u5173\u7cfb\uff0c\u5f53\u8d1f\u503a\u7387\u8d8a\u9ad8\uff0c\u63a5\u4e0b\u6765\u4e24\u5e74\u627f\u62c5\u98ce\u9669\u7684\u80fd\u529b\u5c31\u8d8a\u5c0f\uff0c\u4e5f\u5b58\u5728\u4e00\u4e9b\u5f02\u5e38\u503c\uff0c\u6700\u5927\u503c\u9ad8\u8fbe\u4e86329664","fbeb0ad8":"### \u6a21\u578b\u9a8c\u8bc1\uff0c\u9009\u62e9\u6700\u597d\u7684\u8fed\u4ee3\u6b21\u6570"}}