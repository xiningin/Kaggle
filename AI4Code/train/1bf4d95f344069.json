{"cell_type":{"13e710c5":"code","ab7338fc":"code","28fdaad5":"code","7e1605d1":"code","e03219ce":"code","01ac9898":"code","db77c39f":"code","92318969":"code","42a2e168":"code","e98b7c2d":"code","4b0956f5":"code","4de2a2dc":"code","5abf3bba":"code","6b3e234a":"code","ff9e0027":"code","e708eea0":"code","dba12eb8":"code","c360b091":"code","7fd42593":"code","57242ef7":"code","86517499":"code","0bae5543":"code","2f3eccd8":"code","bba57660":"code","b0fd0fdc":"code","f7e09cca":"code","4ea2ae54":"code","797a5e7b":"code","4ca4c235":"markdown"},"source":{"13e710c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib import rcParams\n# Standard plotly imports\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot, init_notebook_mode\n# Using plotly + cufflinks in offline mode\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ab7338fc":"data = pd.read_csv('..\/input\/zomato.csv')\ndata.head()\ndata.shape\n#data.tail()","28fdaad5":"data.columns","7e1605d1":"#data[['phone','name']][10:25]\n#data.loc[data['rest_type']=='Bar']","e03219ce":"data.describe()","01ac9898":"data.columns","db77c39f":"data.drop(['url'], inplace=True, axis=1)","92318969":"data['rate'].unique()","42a2e168":"data.head()","e98b7c2d":"data.loc[data['votes'] > 15000]","4b0956f5":"data['dish_liked'].unique()","4de2a2dc":"data['approx_cost(for two people)'].describe()","5abf3bba":"((data.isnull()|data.isna()).sum() *100\/data.index.size).round(2)","6b3e234a":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","ff9e0027":"data.head()","e708eea0":"data.drop(['address', 'phone','location'],inplace=True, axis=1)","dba12eb8":"data.head()","c360b091":"data.rename(columns ={'approx_cost(for two people)': 'average_cost', 'listed_in(city)': 'locality','listed_in(type)': 'restaurant_type'}, inplace = True)","7fd42593":"data.head()","57242ef7":"data.rate = data.rate.replace(\"NEW\", np.nan)\n#Drop rows where any cell in that row is NA\ndata.dropna(how ='any', inplace = True)","86517499":"data.shape","0bae5543":"X = data\nX.rate = X.rate.astype(str)\nX.rate = X.rate.apply(lambda x: x.replace('\/5',''))\nX.rate = X.rate.apply(lambda x: float(x))\nX.head()","2f3eccd8":"rcParams['figure.figsize'] = 15,7\ng = sns.countplot(x=\"locality\",data=data, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('locality',size = 20)","bba57660":"rcParams['figure.figsize'] = 15,7\ng = sns.countplot(x=\"rest_type\",data=data, palette = \"Set1\")\ng.set_xticklabels(g.get_xticklabels(), rotation=90, ha=\"right\")\ng \nplt.title('Type of Restaurant',size = 20)","b0fd0fdc":"plt.rcParams['figure.figsize'] = (3, 4)\nplt.style.use('_classic_test')\n\nX['online_order'].value_counts().plot.bar(color = 'cyan')\nplt.title('Online orders', fontsize = 20)\nplt.ylabel('Number of orders', fontsize = 15)\nplt.show()","f7e09cca":"plt.rcParams['figure.figsize'] = (15, 9)\nx = pd.crosstab(X['rate'], X['online_order'])\nx.div(x.sum(1).astype(float), axis = 0).plot(kind = 'bar', stacked = True,color=['red','yellow'])\nplt.title('online order vs rate', fontweight = 30, fontsize = 20)\nplt.legend(loc=\"upper right\")\nplt.show()","4ea2ae54":"data['online_order'].iplot(kind='hist', xTitle='online Order',\n                  yTitle='count', title='')","797a5e7b":"X.head()\nX.average_cost = X.average_cost.apply(lambda x: x.replace(',',''))\nX.average_cost = X.average_cost.astype(int)\nfig, ax = plt.subplots(figsize=[16,4])\nsns.distplot(X['average_cost'],ax=ax)\nax.set_title('Cost Distribution for all restaurants')","4ca4c235":"**> Find the percentage of null values in each of the columns**"}}