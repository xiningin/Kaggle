{"cell_type":{"7cc43257":"code","f9d84e5d":"code","9b54510a":"code","38be0963":"code","900fcc8a":"code","163c5be2":"code","67616943":"code","242d934a":"code","25d101b9":"code","2d093f40":"code","aea56bc5":"code","d39bf309":"code","02b766b2":"code","4587a920":"code","5245bd85":"code","34231bd0":"code","495df9ed":"code","f1ea04f8":"code","12aaf6ca":"code","b031b7e4":"code","0edcd34e":"code","558667d9":"code","91ae6efe":"code","f1fefdd4":"code","3035fb9e":"code","d3213ea3":"code","96c3ce29":"code","c21f9640":"code","dd0210d9":"code","90ac7a96":"code","b43fd512":"markdown","c5280c1e":"markdown","b9735479":"markdown","e2be186c":"markdown","fd38901a":"markdown","ce8d4aee":"markdown","384b6409":"markdown","679e8174":"markdown","67b13dbe":"markdown","b74064bb":"markdown","7bef4d9d":"markdown","87d8020b":"markdown","f151ed13":"markdown","5d31c9e5":"markdown","c229c0a0":"markdown","12c91ea5":"markdown","81a984de":"markdown"},"source":{"7cc43257":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","f9d84e5d":"all_data = pd.read_csv('..\/input\/online-chess-games\/lichess-08-2014.csv', index_col = 0)\nall_data['Rating White'] = all_data['Average Rating'] + all_data['Rating Difference']\/2\nall_data['Rating Black'] = all_data['Average Rating'] - all_data['Rating Difference']\/2\nall_data.head()","9b54510a":"print('Types of games:')\nprint(all_data['Mode'].unique())","38be0963":"#Only analyze the classical games\ndata = all_data[all_data['Mode'] == 'Classical']","900fcc8a":"plt.hist(data['Rating Difference'], bins = 30, log = True)\nplt.xlabel('Rating difference')\nplt.title('Rating difference distribution for classical games')\nplt.show()","163c5be2":"#Probe a reasonable range of rating differences\nbin_width = 50\nrating_difference_bins = [[x, x+bin_width] for x in np.arange(-800, 800, bin_width)]\nn_bins = len(rating_difference_bins)\n\n#Arrays to store results\nwhite_win_ratio = np.zeros(n_bins)\nblack_win_ratio = np.zeros(n_bins)\ndraw_ratio      = np.zeros(n_bins)\n\n#Uncertainties of the underlying Poisson process\nerr_white_win_ratio = np.zeros(n_bins)\nerr_black_win_ratio = np.zeros(n_bins)\nerr_draw_ratio      = np.zeros(n_bins)\n\n#Process bins one at the time\nfor bin_idx in range(n_bins):\n    games_in_bin = data[\n                    (data['Rating Difference'] >= rating_difference_bins[bin_idx][0])\n                    &\n                    (data['Rating Difference'] <  rating_difference_bins[bin_idx][1])\n                   ]\n    \n    #Statistics\n    num_white_wins = np.sum(games_in_bin['Result'] == 'White Wins')\n    num_black_wins = np.sum(games_in_bin['Result'] == 'Black Wins')\n    num_draws      = np.sum(games_in_bin['Result'] == 'Draw')\n    num_games      = len(games_in_bin)\n    \n    #Outcome probabilities\n    white_win_ratio[bin_idx] = num_white_wins\/num_games\n    black_win_ratio[bin_idx] = num_black_wins\/num_games\n    draw_ratio[bin_idx]      = num_draws\/num_games\n    \n    #Their uncertainties\n    err_white_win_ratio[bin_idx] = np.sqrt(white_win_ratio[bin_idx] \/ num_games)\n    err_black_win_ratio[bin_idx] = np.sqrt(black_win_ratio[bin_idx] \/ num_games)\n    err_draw_ratio[bin_idx]      = np.sqrt(draw_ratio[bin_idx]      \/ num_games)","67616943":"rating_difference_midpoint = np.array([\n                                (x[0] + x[1])\/2. \n                                for \n                                x in rating_difference_bins\n                            ])\n\nplt.errorbar(\n        rating_difference_midpoint, \n        white_win_ratio, \n        yerr = err_white_win_ratio,\n        color = 'orange',\n        label = 'White win'\n)\nplt.errorbar(\n        rating_difference_midpoint, \n        black_win_ratio, \n        yerr = err_black_win_ratio,\n        color = 'k',\n        label = 'Black win'\n)\nplt.errorbar(\n        rating_difference_midpoint, \n        draw_ratio, \n        yerr = err_draw_ratio,\n        color = 'g',\n        label = 'Draw'\n)\n\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('Probability')\nplt.ylim([0,1])\nplt.legend()\nplt.show()","242d934a":"def logistic_function(rating_difference, c0, c1):\n    \"\"\"\n    Logistic curve with a bias and slope\n    \"\"\"\n    return 1.\/(1. + np.exp(c0 + c1*rating_difference))","25d101b9":"from scipy.optimize import curve_fit","2d093f40":"white_win_fit = curve_fit(\n                    f = logistic_function, \n                    xdata = rating_difference_midpoint, \n                    ydata = white_win_ratio,\n                    sigma = err_white_win_ratio,\n                    p0 = (0, 0.1)\n                )\nprint(f'Best fit parameters (bias, slope): {white_win_fit[0]}')\nwhite_win_best_fit_values = logistic_function(\n                                rating_difference_midpoint, \n                                white_win_fit[0][0], \n                                white_win_fit[0][1]\n                            )","aea56bc5":"plt.errorbar(\n        rating_difference_midpoint, \n        white_win_ratio, \n        yerr = err_white_win_ratio,\n        color = 'orange',\n        label = 'Data'\n)\nplt.plot(\n    rating_difference_midpoint,\n    white_win_best_fit_values,\n    color = 'r',\n    ls = '--',\n    label = 'Best fit (logistic)'\n)\n\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('Probability of white win')\nplt.ylim([0,1])\nplt.legend()\nplt.show()","d39bf309":"plt.errorbar(\n        rating_difference_midpoint, \n        white_win_ratio - white_win_best_fit_values, \n        yerr = err_white_win_ratio,\n        color = 'orange',\n        label = 'Data'\n)\n\nplt.axhline(0, color = 'lightgray', ls = '--')\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('White Win Best Fit Residuals')\nplt.ylim([-0.05, 0.05])\nplt.legend()\nplt.show()","02b766b2":"plt.errorbar(\n        rating_difference_midpoint, \n        white_win_ratio, \n        yerr = err_white_win_ratio,\n        color = 'orange',\n        label = 'Data'\n)\nplt.plot(\n    rating_difference_midpoint,\n    white_win_best_fit_values,\n    color = 'r',\n    ls = '--',\n    label = 'Best fit'\n)\n\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('Probability of white win')\nplt.ylim([0.2,0.8])\nplt.xlim([-150, 150])\nplt.legend()\nplt.show()","4587a920":"black_win_fit = curve_fit(\n                    f = logistic_function, \n                    xdata = rating_difference_midpoint, \n                    ydata = black_win_ratio,\n                    sigma = err_black_win_ratio,\n                    p0 = (0, 0.1)\n                )\nprint(f'Best fit parameters (bias, slope): {black_win_fit[0]}')\nblack_win_best_fit_values = logistic_function(\n                                rating_difference_midpoint, \n                                black_win_fit[0][0], \n                                black_win_fit[0][1]\n                            )","5245bd85":"plt.errorbar(\n        rating_difference_midpoint, \n        black_win_ratio, \n        yerr = err_black_win_ratio,\n        color = 'k',\n        label = 'Data'\n)\nplt.plot(\n    rating_difference_midpoint,\n    black_win_best_fit_values,\n    color = 'r',\n    ls = '--',\n    label = 'Best fit (logistic)'\n)\n\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('Probability of black win')\nplt.ylim([0,1])\nplt.legend()\nplt.show()","34231bd0":"plt.errorbar(\n        rating_difference_midpoint, \n        black_win_ratio - black_win_best_fit_values, \n        yerr = err_black_win_ratio,\n        color = 'k',\n        label = 'Data'\n)\n\nplt.axhline(0, color = 'lightgray', ls = '--')\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = black advantage)')\nplt.ylabel('Black Win Best Fit Residuals')\nplt.ylim([-0.05, 0.05])\nplt.legend()\nplt.show()","495df9ed":"def draw_function(rating_difference, amplitude, std):\n    \"\"\"\n    Normal distribution with amplitude and standard deviation\n    \"\"\"\n    return amplitude*np.exp(-rating_difference**2\/2.\/std**2)","f1ea04f8":"draw_fit = curve_fit(\n                    f = draw_function, \n                    xdata = rating_difference_midpoint[1:-2], #Avoid bin without draws \n                    ydata = draw_ratio[1:-2],\n                    sigma = err_draw_ratio[1:-2],\n                    p0 = (0.04, 100)\n                )\nprint(f'Best fit parameters (amplitude, std): {draw_fit[0]}')\ndraw_best_fit_values = draw_function(\n                                rating_difference_midpoint[1:-2], \n                                draw_fit[0][0],\n                                draw_fit[0][1]\n                            )","12aaf6ca":"plt.errorbar(\n        rating_difference_midpoint, \n        draw_ratio, \n        yerr = err_draw_ratio,\n        color = 'g',\n        label = 'Draw'\n)\nplt.plot(\n    rating_difference_midpoint[1:-2],\n    draw_best_fit_values,\n    color = 'r',\n    ls = '--',\n    label = 'Best fit (normal)'\n)\n\nplt.axvline(0, color = 'lightgray', ls = '--')\n\nplt.xlabel('Player rating difference (positive = white advantage)')\nplt.ylabel('Probability of draw')\nplt.legend()\nplt.show()","b031b7e4":"prob_white_win_at_zero_rating_diff = logistic_function(\n                                0, \n                                white_win_fit[0][0], \n                                white_win_fit[0][1]\n                            )\nprob_black_win_at_zero_rating_diff = logistic_function(\n                                0, \n                                black_win_fit[0][0], \n                                black_win_fit[0][1]\n                            )\nwhite_advantage_at_zero_rating_diff = prob_white_win_at_zero_rating_diff - prob_black_win_at_zero_rating_diff\nprint(f'At zero rating difference, white has {100*white_advantage_at_zero_rating_diff:.1f}% advantage.')","0edcd34e":"plt.hist(data['Rating White'], bins = 30, log = True)\nplt.xlabel('Rating of white player')\nplt.title('Rating of the white player for classical games')\nplt.show()","558667d9":"#Probe a reasonable range of white ratings\nbin_width = 100\nwhite_rating_bins = [[x, x+bin_width] for x in np.arange(800, 2300, bin_width)]\nn_bins_adv = len(white_rating_bins)\n\n#Arrays to store results\nstarting_advantage = np.zeros(n_bins_adv)\n\n#Process bins one at the time\nfor bin_idx in range(n_bins_adv):\n    games_in_bin = data[\n                    (data['Rating White'] >= white_rating_bins[bin_idx][0])\n                    &\n                    (data['Rating White'] <  white_rating_bins[bin_idx][1])\n                   ]\n    \n    #Statistics\n    num_white_wins = np.sum(games_in_bin['Result'] == 'White Wins')\n    num_black_wins = np.sum(games_in_bin['Result'] == 'Black Wins')\n    num_draws      = np.sum(games_in_bin['Result'] == 'Draw')\n    num_games      = len(games_in_bin)\n    \n    #Outcome probabilities\n    starting_advantage[bin_idx] = (num_white_wins - num_black_wins)\/num_games","91ae6efe":"white_rating_midpoint = np.array([\n                                (x[0] + x[1])\/2. \n                                for \n                                x in white_rating_bins\n                        ])\n\nplt.errorbar(\n        white_rating_midpoint, \n        starting_advantage, \n        color = 'k'\n)\n\nplt.xlabel('White player rating')\nplt.ylabel('White win rate - black win rate')\nplt.legend()\nplt.show()","f1fefdd4":"data[\n    (data['Rating White'] >= 800) & (data['Rating White'] <  900)\n]['Result'].describe()","3035fb9e":"data[\n    (data['Rating White'] >= 2000)\n]['Result'].describe()","d3213ea3":"#Nearby ratings only\nprob_white_win_if_white_better = white_win_ratio[n_bins\/\/2]\nprob_white_win_if_black_better = white_win_ratio[n_bins\/\/2 - 1]\nprob_black_win_if_white_better = black_win_ratio[n_bins\/\/2]\nprob_black_win_if_black_better = black_win_ratio[n_bins\/\/2 - 1]\n\nprint(prob_white_win_if_white_better)\nprint(prob_white_win_if_black_better)\nprint(prob_black_win_if_white_better)\nprint(prob_black_win_if_black_better)","96c3ce29":"#Probe a reasonable range of white ratings\nbin_width = 100\nwhite_rating_bins = [[x, x+bin_width] for x in np.arange(900, 2300, bin_width)]\nn_bins_adv = len(white_rating_bins)\n\n#Arrays to store results\nexcess_starting_advantage = np.zeros(n_bins_adv)\n\n#Process bins one at the time\nfor bin_idx in range(n_bins_adv):\n    games_in_bin = data[\n                    (data['Rating White'] >= white_rating_bins[bin_idx][0])\n                    &\n                    (data['Rating White'] <  white_rating_bins[bin_idx][1])\n                    &\n                    (abs(data['Rating Difference']) <  50)\n                   ]\n    num_games_where_white_better = len(games_in_bin[games_in_bin['Rating Difference'] > 0])\n    num_games_where_black_better = len(games_in_bin[games_in_bin['Rating Difference'] < 0])\n    \n    #Statistics\n    num_white_wins = np.sum(games_in_bin['Result'] == 'White Wins')\n    num_black_wins = np.sum(games_in_bin['Result'] == 'Black Wins')\n    num_games      = len(games_in_bin)\n    \n    #Expected wins\n    num_expected_white_wins = (\n              num_games_where_white_better * prob_white_win_if_white_better\n                +\n              num_games_where_black_better * prob_white_win_if_black_better\n        )\n    num_expected_black_wins = (\n              num_games_where_white_better * prob_black_win_if_white_better\n                +\n              num_games_where_black_better * prob_black_win_if_black_better\n        )\n\n    expected_win_difference = num_expected_white_wins - num_expected_black_wins\n    actual_win_difference   = num_white_wins          - num_black_wins\n    \n    #Excess advantage\n    excess_starting_advantage[bin_idx] = (actual_win_difference - expected_win_difference)\/num_games","c21f9640":"white_rating_midpoint = np.array([\n                                (x[0] + x[1])\/2. \n                                for \n                                x in white_rating_bins\n                        ])\n\nplt.errorbar(\n        white_rating_midpoint, \n        excess_starting_advantage, \n        color = 'k'\n)\n\nplt.xlabel('White player rating')\nplt.ylabel('White win rate on top of a simple expectation')\nplt.show()","dd0210d9":"#Check the last data point is not a fluke\ndata[\n                    (data['Rating White'] >= 2200)\n                    &\n                    (data['Rating White'] <  2300)\n                    &\n                    (abs(data['Rating Difference']) <  50)\n                   ]","90ac7a96":"white_rating_midpoint = np.array([\n                                (x[0] + x[1])\/2. \n                                for \n                                x in white_rating_bins\n                        ])\n\nplt.errorbar(\n        white_rating_midpoint, \n        excess_starting_advantage, \n        color = 'k'\n)\n\nplt.xlabel('White player rating')\nplt.ylabel('White player win rate on top of a simple expectation')\nplt.ylim([-0.1,0.1])\nplt.axhline(0, color = 'lightgray', ls = '--')\nplt.show()","b43fd512":"# Investigate probability to win\/draw\/lose as function of rating difference between the players","c5280c1e":"We get a decent logistic fit, although there are hints that in games with rating difference between 50 and 100 white has an extra advantage. Zoom in:","b9735479":"## Fit black win ratio","e2be186c":"It is interesting to see that we find such a strong relationship. We rather check it is actually in the data and not a bug:","fd38901a":"On second thought, it makes sense - the higher our ranking, the more likely we will be matched up with a weaker opposition due to the underlying distribution of the player rankings (and vice versa).","ce8d4aee":"Let's only look at games where the players are of similar skill (rating difference less than 50).","384b6409":"## Find win\/draw ratios","679e8174":"## Fit draw ratio","67b13dbe":"We determine the probability of winning a chess game as a function of the rating difference between the two players. We find that probability for either white or black player to win is well described by a logistic function. Probability to draw decreases with the increasing rating difference between the players.\n\nIn the second part of the notebook we investigate the advantage player gets from starting the game as a function of their rating.","b74064bb":"Interestingly, black has surprisingly high chance of winning games in which they are massive underdog. Presumably because of a white blunder.","7bef4d9d":"# Load data, libraries","87d8020b":"## Plot","f151ed13":"## Correct for rating differences","5d31c9e5":"Interestingly, at high ratings, balanced games tend to go to the black player! But the sample size is quite small. Also, we see that two of the black wins were due to time forfeit.","c229c0a0":"# Investigate starting advantage","12c91ea5":"## Fit white win ratio","81a984de":"We again see the extra win probability for rating differences between 50 and 100."}}