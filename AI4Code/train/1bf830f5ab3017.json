{"cell_type":{"dffd41e8":"code","938e6e98":"code","fc5c5b40":"code","9b1bf2a5":"code","c6eb8d85":"code","b357e27b":"code","e42a2b12":"code","a8c40c59":"code","f65fb86b":"code","a7d2e58e":"code","04ba7c5f":"code","a120cc39":"code","393ba638":"code","4a99d02f":"code","b4139319":"code","c494013a":"code","04813da5":"code","8d869c35":"code","89c8cb1d":"code","b9a05427":"code","43e6d59c":"code","bdda60fc":"code","3cc30830":"code","47d5c579":"code","551e9349":"code","26bdcf3a":"code","7cd9a33d":"code","b84c30fa":"code","f3659c0c":"code","3cd08cf9":"code","235c7158":"code","eee78194":"code","3c2eef7e":"code","82c134c5":"code","ff85154d":"code","361e26b8":"code","a8ebb724":"code","2e40d28e":"code","c700c2d8":"code","66a6ed89":"code","dd02ef67":"code","f80c7e22":"code","49555196":"code","c1e775d5":"code","3957fb33":"code","8f464a7f":"code","30ef41a1":"code","dd3e4e1f":"code","f21bc850":"code","04a86caf":"code","c40a871f":"code","3e127a24":"code","0e8f1ddf":"code","85371b9d":"code","048ed8f8":"code","5c0a6699":"markdown","3b48a2ab":"markdown","b57688e2":"markdown","64e97df0":"markdown","32283537":"markdown","6cbfce6b":"markdown","0a3688ba":"markdown","3bf7dacb":"markdown","c3e29504":"markdown","954798e7":"markdown","ad51b767":"markdown","f09cd2e6":"markdown","2af990f7":"markdown","97949ca6":"markdown","c384ee42":"markdown","89efee08":"markdown","8221d9b2":"markdown","2566bc9a":"markdown","8cdc5d69":"markdown","d2e7d013":"markdown","546bb2e2":"markdown","33d46fb0":"markdown","0afaab64":"markdown","307225d0":"markdown","663b24d3":"markdown","e064e56f":"markdown","ccce8693":"markdown","bf12aff5":"markdown","ffcbaa43":"markdown","6fc7ff26":"markdown","a46da8fc":"markdown","3d0e02a9":"markdown","5ff7d609":"markdown","8f31de13":"markdown","c987efe8":"markdown","4643d533":"markdown","357deeee":"markdown","cd457fa1":"markdown","786c5c2c":"markdown","5449d7ed":"markdown","eee71b93":"markdown"},"source":{"dffd41e8":"!pip install chart_studio","938e6e98":"# Importing packages\n\nimport numpy as np\nimport pandas as pd\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True) \nimport plotly.express as px\nimport plotly.graph_objects as go\nimport chart_studio.plotly as py\nimport chart_studio\nfrom plotly.subplots import make_subplots\nchart_studio.tools.set_credentials_file(username='karthikcs', api_key='wP88IYO98oHtM1GWuofj')","fc5c5b40":"# Load data\ndf_country_summary = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nprint('Shape of the data: ', df_country_summary.shape)\nprint ('Last update: ' + str(df_country_summary.ObservationDate.max()))\ndf_country_summary = df_country_summary.rename(columns={\"ObservationDate\": \"Date\", \"Country\/Region\": \"Country\"})\n# df_country_summary.head()","9b1bf2a5":"def add_rates(df):\n    df['Confirmed Change'] = df['Confirmed'].diff()\n \n    df['Mortality Rate'] = df['Deaths'] \/ (df['Confirmed'] - df['Confirmed Change'])\n    df['Recovery Rate'] = df['Recovered'] \/ (df['Confirmed'] - df['Confirmed Change'])\n    df['Growth Rate'] = df['Confirmed Change'] \/ (df['Confirmed'] - df['Confirmed Change'])\n    df['Growth Rate Change'] = df['Growth Rate'].diff()\n    df['Growth Rate Accel'] = df['Growth Rate Change'] \/ (df['Growth Rate'] - df['Growth Rate Change'])\n    return df","c6eb8d85":"world_df = df_country_summary.groupby(['Date']).agg({'Confirmed': ['sum'], 'Recovered': ['sum'], 'Deaths': ['sum']}).reset_index()\nworld_df.columns = world_df.columns.get_level_values(0)\nworld_df = add_rates(world_df)\n# world_df.head()","b357e27b":"def plot_aggregate_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n    fig.update_layout(template='plotly_dark')\n#     fig.update_yaxes(type=\"log\")\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Confirmed'],\n                             mode='lines+markers',\n                             name='Confirmed',\n                             line=dict(color='Yellow', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Deaths'],\n                             mode='lines+markers',\n                             name='Deaths',\n                             line=dict(color='Red', width=2)\n                            ))\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recovered'],\n                             mode='lines+markers',\n                             name='Recovered',\n                             line=dict(color='Green', width=2)\n                            ))\n\n    return fig","e42a2b12":"fig = plot_aggregate_metrics(world_df)\nfig.update_layout(title = 'No. of Covid-19 cases| Growth since 22-Jan-2020 | Across the world')\nfig.show()\npy.plot(fig, filename='corona-worldwide')","a8c40c59":"# Worldwide Rates\ndef plot_diff_metrics(df, fig=None):\n    if fig is None:\n        fig = go.Figure()\n\n    fig.update_layout(template='plotly_dark')\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Mortality Rate'],\n                             mode='lines+markers',\n                             name='Mortality rate',\n                             line=dict(color='red', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Recovery Rate'],\n                             mode='lines+markers',\n                             name='Recovery rate',\n                             line=dict(color='Green', width=2)))\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                             y=df['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth rate confirmed',\n                             line=dict(color='Yellow', width=2)))\n    fig.update_layout(yaxis=dict(tickformat=\".2%\"))\n    \n    return fig","f65fb86b":"fig = plot_diff_metrics(world_df)\nfig.update_layout(title = 'World Metrics of Covid-19 Cases: Mortality Rate, Recovery Rate and New Cases rate')\nfig.show()","a7d2e58e":"# fig = go.Figure()\n\ntmp_df = world_df.copy()\ntmp_df = tmp_df[tmp_df['Growth Rate Accel'] < 10]\n\nfig = px.bar(tmp_df, x='Date', y='Growth Rate Accel')\nfig.update_layout(title = 'Daily Growth Rate Acceleration Worldwide', template='plotly_dark')\nfig.update_yaxes(title_text='% Growth Rate Acceleration')\nfig.update_layout(yaxis=dict(tickformat=\".2%\"))\nfig.show()","04ba7c5f":"confirmed_by_country_df = df_country_summary.groupby(['Date', 'Country']).sum().reset_index()\nby_country_df = confirmed_by_country_df.sort_values(['Country', 'Date'], ascending=[1,1])","a120cc39":"day_ctr = 0\ncurr_country = None \ncountry_100plus = []\nfor ind in by_country_df.index:    \n    i_confirmed = by_country_df['Confirmed'][ind]\n    i_country   = by_country_df['Country'][ind]\n    i_date      = by_country_df['Date'][ind]\n    if i_confirmed < 100:\n        continue    \n    if curr_country == None:\n        curr_country = i_country\n    elif curr_country != i_country:\n        # New country is found reset the day counter \n        day_ctr = 0\n        curr_country = i_country\n    else:\n        day_ctr += 1\n        \n    country_100plus.append([i_country, i_confirmed, day_ctr])\n    \ndf_country_100plus = pd.DataFrame(country_100plus, columns =['Country', 'Confirmed', 'Days'])","393ba638":"#Create dataframes for each country for more analysis\n# Try to get unique list of countries in the df\ncountries = by_country_df.Country.unique()\ncountry_df = []\nfor country in countries:\n    country_data = by_country_df[by_country_df['Country'] == country]\n    country_data = add_rates(country_data)\n    country_data['Days'] = 0\n    day_ctr = -1\n    for ind in country_data.index:\n        i_confirmed = by_country_df['Confirmed'][ind]\n        if i_confirmed < 100:\n#             country_data['Days'][ind] = day_ctr\n            country_data.loc[ind,'Days'] = day_ctr\n        else:\n            day_ctr += 1\n            country_data.loc[ind,'Days'] = day_ctr\n    \n    \n    country_df.append([country,country_data])\n    \ncountry_df = pd.DataFrame(country_df, columns = ['Country','Cases'])\ncountry_df = country_df.set_index(['Country'])","4a99d02f":"# df_population = pd.read_html('https:\/\/www.worldometers.info\/world-population\/population-by-country\/')\ndf_population = pd.read_csv('\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv')\n# df_population = df_population[0]\ndf_population = df_population.rename(columns={\"Country (or dependency)\": \"Country\", \"Population (2020)\": \"Population\"})\n# df_population.iloc[0]['Country'] = 'Mainland China'\ndf_population = df_population.replace(\"China\", \"Mainland China\")\ndf_population = df_population.replace(\"United States\", \"US\")  \ndf_population = df_population.replace(\"United Kingdom\", \"UK\")  \ndf_population = df_population.rename(columns={\"Density (P\/Km\u00b2)\": \"Density\"} )\n# df_population.sort_values(['Density (P\/Km\u00b2)'], ascending=False).head(10)\ndf_population.head()","b4139319":"def get_latest_confirmed(country):\n    df = country_df.loc[country]['Cases']\n    latest_date = df['Date'].max()\n    return df[df['Date'] == latest_date]['Confirmed'].iloc[0]\n\ndef get_population(country):\n    try :\n        population = df_population.query(\"Country == @country \")['Population'].iloc[0]\n\n    except :\n        population = -1\n    return population\n\ndef get_density(country):\n    try :\n        density = df_population.query(\"Country == @country \")['Density'].iloc[0]\n\n    except :\n        density = -1\n    return density","c494013a":"# df_population[df_population['Country'] == 'Iceland']['Population'].iloc[0]\\\ndf = country_df.reset_index()\ndf['Latest Confirmed'] = df['Country'].apply(get_latest_confirmed)\ndf['Population'] = df['Country'].apply(get_population)\ndf['Density'] = df['Country'].apply(get_density)\ndf['Cases per Million'] = round(df['Latest Confirmed'] \/ df['Population'] * 1000000, 2)\ncountry_df = df.set_index('Country')","04813da5":"df = country_df.nlargest(5,['Latest Confirmed'])\ntop_ctry = df.index.tolist()\ndf = confirmed_by_country_df[confirmed_by_country_df['Country'].isin(top_ctry) ]\n\ndf['Tag'] = 'Top Countries'\n\nindia_cases = country_df.loc['India']['Latest Confirmed']\n\ncountry_df = country_df.sort_values(['Latest Confirmed'], ascending = False)\ndf1 = country_df[country_df['Latest Confirmed'] <= india_cases].head(3)\ndf2 = country_df[country_df['Latest Confirmed'] > india_cases].tail(3)\ndf1 = df1.append(df2)\n\nctry_near_india = df1.index.tolist()\ndf1 = confirmed_by_country_df[confirmed_by_country_df['Country'].isin(ctry_near_india) ]\ndf1['Tag'] = 'Similar to India'\ndf = df.append(df1)\nscope_ctry = top_ctry + ctry_near_india","8d869c35":"fig = px.line(df, x='Date', y='Confirmed', color='Country', line_group=\"Tag\", labels = 'Tag', hover_name=\"Country\")\nfig.update_layout(template='plotly_dark')\nfig.show()","89c8cb1d":"df_country_100plus = df_country_100plus[df_country_100plus['Country'].isin(scope_ctry)]","b9a05427":"fig = px.line(df_country_100plus, x='Days', y='Confirmed', color='Country', line_group=\"Country\", hover_name=\"Country\")\nfig.update_layout(\n    template='plotly_dark',\n)\n\nfig.update_xaxes(title_text='No. of days since 100th case')\nfig.update_yaxes(title_text='No. of confirmed cases')\nfig.show()\npy.plot(fig, filename='countrywise-post100cases')","43e6d59c":"## How to load the figrure from some accoutn and display in the Jupyter\n# fig = py.get_figure('https:\/\/plot.ly\/~karthikcs\/10\/')  ## 1st way\n# fig = py.get_figure('karthikcs',10) ## 2nd Way to get figure from account\n# fig.show()","bdda60fc":"fig = plot_aggregate_metrics(country_df.loc['India']['Cases'])\nfig.update_layout(title='Aggregate cases in India')\nfig.show()\npy.plot(fig, filename='covid-india-cases')","3cc30830":"fig = plot_diff_metrics(country_df.loc['India']['Cases'])\nfig.update_layout(title = 'India Metrics: Mortality Rate, Recovery Rate and New Cases rate')\nfig.show()","47d5c579":"df1 = country_df.loc['India']['Cases']\ndf2 = country_df.loc['US']['Cases']\ndf3 = country_df.loc['Brazil']['Cases']\ndf4 = country_df.loc['Japan']['Cases']\ndf5 = country_df.loc['France']['Cases']\n\n# fig = px.line(df, x='Date', y='Growth Rate')\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df4['Date'], \n                             y=df4['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth Japan',\n                             line=dict(color='Pink', width=2)\n             ))\n\nfig.add_trace(go.Scatter(x=df5['Date'], \n                             y=df5['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth France',\n                             line=dict(color='Grey', width=2)\n             ))\n\nfig.add_trace(go.Scatter(x=df3['Date'], \n                             y=df3['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth Brazil',\n                             line=dict(color='Green', width=2)\n             ))\n\nfig.add_trace(go.Scatter(x=df1['Date'], \n                             y=df1['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth India',\n                             line=dict(color='Blue', width=2)\n             ))\nfig.add_trace(go.Scatter(x=df2['Date'], \n                             y=df2['Growth Rate'],\n                             mode='lines+markers',\n                             name='Growth US',\n                             line=dict(color='White', width=2)\n             ))\n\nfig.update_layout(title = 'Daily Growth Rate India compared with other few countries', template='plotly_dark')\nfig.update_yaxes(title_text=' Growth Rate % ')\nfig.update_layout(yaxis=dict(tickformat=\".2%\"))\nfig.show()","551e9349":"df = country_df.reset_index()\ndf['Cases per Million'] = df['Cases per Million'].apply(lambda x: 0 if( x<0 ) else x)","26bdcf3a":"\n# fig = px.scatter( df, x='Population', y='Cases per Million', log_y=True, color=\"Latest Confirmed\",\n#                  log_x=True,  hover_name='Country', hover_data=[\"Latest Confirmed\"]\n#                 )\n# fig.update_layout(template='plotly_dark', title='Covid Cases per Million Population for each country')\n# fig.show()","7cd9a33d":"df = df[df['Latest Confirmed'] >= 100]\ndf['Log Confirmed'] = df['Latest Confirmed'].apply(lambda x: np.log(x) )\ndf.head()","b84c30fa":"fig = px.scatter( df, x='Population', y='Latest Confirmed', log_y=True, size = 'Log Confirmed', color=\"Log Confirmed\",\n                 log_x=True,  hover_name='Country', hover_data=[\"Latest Confirmed\"]\n                )\nfig.update_layout(template='plotly_dark', title='Covid Cases vs population for each country')\nfig.show()","f3659c0c":"fig = px.scatter( df, x='Density', y='Latest Confirmed', log_y=True, size = 'Log Confirmed', color=\"Log Confirmed\",\n                 log_x=True,  hover_name='Country', hover_data=[\"Latest Confirmed\"]\n                )\nfig.update_layout(template='plotly_dark', title='Covid Cases vs population for each country')\nfig.show()","3cd08cf9":"latest_by_country = confirmed_by_country_df.groupby(['Country']).max()\nlatest_by_country.reset_index(inplace=True)\nlatest_by_country['Mortality Rate'] = latest_by_country['Deaths'] \/ latest_by_country['Confirmed']\nlatest_by_country['Recovery Rate'] = latest_by_country['Recovered'] \/ latest_by_country['Confirmed']\nlatest_by_country['Population'] = latest_by_country['Country'].apply(get_population)\nlatest_by_country.set_index('Country', inplace=True)\n# latest_by_country.loc['India']","235c7158":"death_rate = latest_by_country[latest_by_country['Confirmed'] >= 500 ]\ndeath_rate = death_rate.sort_values(['Mortality Rate','Confirmed'], ascending=False)\ndeath_rate = death_rate.reset_index()\n# death_rate.head()","eee78194":"fig = px.scatter( death_rate, x='Population', y='Confirmed', log_y=True, size = 'Mortality Rate', color = 'Mortality Rate',\n                 log_x=True,  hover_name='Country', hover_data=[\"Recovery Rate\"], \n                )\n                           \nfig.update_layout(template='plotly_dark', title='Country-wise Death Rate Analysis')\nfig.show()\n# py.plot(fig, filename='covid-country-deathrate')","3c2eef7e":"death_rate.head()[['Country','Mortality Rate']]","82c134c5":"max_xvalue = confirmed_by_country_df.Confirmed.max()\nmax_xvalue = np.log10(max_xvalue) + 1\n\nmax_yvalue = confirmed_by_country_df.Deaths.max()\nmax_yvalue = np.log10(max_yvalue) + 1\n\n\nfig = px.scatter( confirmed_by_country_df, x='Confirmed', y='Deaths', log_y=True,  size = 'Deaths', color = 'Deaths',\n                 log_x=True,  hover_name='Country', animation_frame=\"Date\", animation_group=\"Country\", text='Country',\n                )\n                           \nfig.update_layout(template='plotly_dark', title='Country-wise Death Rate Analysis', )\nfig.update_xaxes(range=[0, max_xvalue])\nfig.update_yaxes(range=[0, max_yvalue])\nfig.show()\n# py.plot(fig, filename='covid-deathrate-animation')","ff85154d":"fig = px.choropleth(death_rate, locations=\"Country\",locationmode='country names', color=\"Mortality Rate\",\n                     hover_name=\"Country\", color_continuous_scale = 'reds',\n                     projection=\"natural earth\",title='Death Rate each country')\npy.plot(fig, filename='covid-deathrate-heatmap')\nfig.show()","361e26b8":"death_rate = death_rate.sort_values('Recovery Rate', ascending = False)\n\ndeath_rate.head()","a8ebb724":"def plot_tipping_curve(df, color, fig=None, ):\n    if fig is None:\n        fig = go.Figure()\n        fig.update_layout(template='plotly_dark', xaxis_title=\"Confirmed cases\", yaxis_title=\"Daily New Cases\", title=\"Covid Cases: Tipping point analysis\",)\n        fig.update_layout(xaxis_type=\"log\")\n        fig.update_layout(yaxis_type=\"log\")\n\n    df1 = df[df['Confirmed Change'] > 0]\n    country = df1.iloc[0]['Country']\n    \n    fig.add_trace(go.Scatter(x=df1['Confirmed'], \n                             y=df1['Confirmed Change'],\n                             mode='lines+markers',\n                             name= country,\n                             line=dict(color=color, width=1)))\n\n    return fig","2e40d28e":"def plot_ratio_sma(df, color, fig, row=1, col=1):\n    df['ratio'] = np.log10(df['Confirmed Change']) \/ np.log10(df['Confirmed'])\n    df['sma'] = df.ratio.rolling(5).mean()\n    fig.append_trace(go.Scatter(x=df['Date'], \n                             y=df['ratio'],\n                             mode='lines',\n                             name= 'Ratio of New Cases \/ Cases',\n                             line=dict(color=color, width=1)), row=row, col=col)\n\n    fig.add_trace(go.Scatter(x=df['Date'], \n                                 y=df['sma'],\n                                 mode='lines+markers',\n                                 name= 'Moving avg of ratio',\n                                 line=dict(color=color, width=1)), row=row, col=col )\n    return fig\n    ","c700c2d8":"fig = make_subplots(rows=3, cols=2)\nfig.update_layout(template='plotly_dark', title=\"Covid Cases: New cases vs Total Cases Ratio and Moving Average\",showlegend=False, )\n\n\ndf = country_df.loc['India']['Cases']\nfig = plot_ratio_sma(df, 'blue', fig, 1,1)\nfig['layout']['xaxis1'].update(showticklabels=False)\nfig['layout']['yaxis1'].update(title='India')\n\ndf = country_df.loc['US']['Cases']\nfig = plot_ratio_sma(df, 'red', fig, 1,2)\nfig['layout']['xaxis2'].update(showticklabels=False)\nfig['layout']['yaxis2'].update(title='USA')\n\ndf = country_df.loc['Mainland China']['Cases']\nfig = plot_ratio_sma(df, 'white', fig, 2,1)\nfig['layout']['xaxis3'].update(showticklabels=False)\nfig['layout']['yaxis3'].update(title='China')\n\ndf = country_df.loc['Italy']['Cases']\nfig = plot_ratio_sma(df, 'grey', fig, 2,2)\nfig['layout']['xaxis4'].update(showticklabels=False)\nfig['layout']['yaxis4'].update(title='Italy')\n\n\ndf = country_df.loc['South Korea']['Cases']\nfig = plot_ratio_sma(df, 'green', fig, 3,1)\nfig['layout']['xaxis5'].update(showticklabels=False)\nfig['layout']['yaxis5'].update(title='S Korea')\n\ndf = country_df.loc['Philippines']['Cases']\nfig = plot_ratio_sma(df, 'magenta', fig, 3,2)\nfig['layout']['xaxis6'].update(showticklabels=False)\nfig['layout']['yaxis6'].update(title='Philippines')\n\n\nfig.show()\n\n","66a6ed89":"df = country_df.loc['India']['Cases']\nfig = plot_tipping_curve(df, color='blue')\n\ndf = country_df.loc['Japan']['Cases']\nfig = plot_tipping_curve(df,color='green', fig=fig)\n\ndf = country_df.loc['Mainland China']['Cases']\nfig = plot_tipping_curve(df,color='yellow', fig=fig)\n\ndf = country_df.loc['US']['Cases']\nfig = plot_tipping_curve(df,color='pink', fig=fig)\n\ndf = country_df.loc['South Korea']['Cases']\nfig = plot_tipping_curve(df,color='orange', fig=fig)\n\ndf = country_df.loc['Italy']['Cases']\nfig = plot_tipping_curve(df,color='red', fig=fig)\n\ndf = country_df.loc['Spain']['Cases']\nfig = plot_tipping_curve(df,color='brown', fig=fig)\n\nfig.update_layout( annotations=[\n                    dict(\n                        x=np.log10(16600),\n                        y=np.log10(4736),\n                        xref=\"x\",\n                        yref=\"y\",\n                        text=\"China Tipping\",\n                        showarrow=True,\n                        arrowhead=6,\n                        ax=0,\n                        ay=-40),\n    \n                    dict(\n                        x=np.log10(5186),\n                        y=np.log10(851),\n                        xref=\"x\",\n                        yref=\"y\",\n                        text=\"S. Korea Tipping\",\n                        showarrow=True,\n                        arrowhead=6,\n                        ax=0,\n                        ay=-40),\n                    dict(\n                        x=np.log10(53578),\n                        y=np.log10(6557),\n                        xref=\"x\",\n                        yref=\"y\",\n                        text=\"Italy Tipping\",\n                        showarrow=True,\n                        arrowhead=6,\n                        ax=0,\n                        ay=-40),\n                    ])\nfig.show()\npy.plot(fig, filename='covid-cases-tipping-downwards')","dd02ef67":"from sklearn import metrics, linear_model\nfrom sklearn.preprocessing import PolynomialFeatures, StandardScaler\nfrom sklearn.model_selection import train_test_split","f80c7e22":"df = country_df.loc['US']['Cases']\ndf = df.fillna(0)\nX = df[['Days']]\ny = df['Confirmed']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","49555196":"fig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"US new cases\", yaxis_title=\"New Cases\", xaxis_title=\"No. of days\",)\nfig.add_trace(go.Scatter(name='US New cases', x=df['Date'], y=y, mode='lines'))\nfig.show()","c1e775d5":"for i in range(1,10):\n    poly = PolynomialFeatures(degree = i)\n    regr = linear_model.LinearRegression()\n    X_ = poly.fit_transform(X_train)\n    regr.fit(X_, y_train)\n    X_ = poly.fit_transform(X_test)\n    results = regr.predict(X_)\n    score1 = metrics.mean_squared_error(y_test,results )\n    score2 = metrics.r2_score(y_test,results )\n    print('Model with Polynominal Degree', i, 'MSE: ',score1, '  R2 Score: ', score2)","3957fb33":"poly = PolynomialFeatures(degree = 6)\nregr = linear_model.LinearRegression()\nX_ = poly.fit_transform(X)\nregr.fit(X_, y)\nresults = regr.predict(X_)\n\nno_of_days = df['Days'].max() + 60\nX_plot=np.linspace(0,no_of_days,200).reshape(-1,1)\nX_plot_poly=poly.fit_transform(X_plot)\nfig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"Projection of US cases for next 30 days\", yaxis_title=\"Cases\", xaxis_title=\"No. of days\",)\nfig.add_trace(go.Scatter(name='Projection', x=X_plot_poly[:,1], y=regr.predict(X_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Current cases', x=df['Days'], y=y, mode='lines'))\nfig.update_yaxes(range=[0,1000000])\nfig.show()","8f464a7f":"df = country_df.loc['US']['Cases']\ndf = df.fillna(0)\nX = df[['Days']]\ny = df['Confirmed Change']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","30ef41a1":"fig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"US Daily New Cases\", yaxis_title=\"New Cases\", xaxis_title=\"Date\",)\nfig.add_trace(go.Scatter(name='US New cases', x=df['Date'], y=y, mode='lines'))\nfig.show()","dd3e4e1f":"for i in range(1,10):\n    poly = PolynomialFeatures(degree = i)\n    regr = linear_model.LinearRegression()\n    X_ = poly.fit_transform(X_train)\n    regr.fit(X_, y_train)\n    X_ = poly.fit_transform(X_test)\n    results = regr.predict(X_)\n    score1 = metrics.mean_squared_error(y_test,results )\n    score2 = metrics.r2_score(y_test,results )\n    print('Model with Polynominal Degree', i, 'MSE: ',score1, '  R2 Score: ', score2)","f21bc850":"poly = PolynomialFeatures(degree = 3)\nregr = linear_model.LinearRegression()\nX_ = poly.fit_transform(X)\nregr.fit(X_, y)\nresults = regr.predict(X_)\n\nno_of_days = df['Days'].max() + 30\nX_plot=np.linspace(0,no_of_days,200).reshape(-1,1)\nX_plot_poly=poly.fit_transform(X_plot)\nfig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"US: Projection of new cases for next 30 days\", yaxis_title=\"Cases\", xaxis_title=\"No. of days since 100th case\",)\nfig.add_trace(go.Scatter(name='Projection', x=X_plot_poly[:,1], y=regr.predict(X_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Current cases', x=df['Days'], y=df['Confirmed Change'], mode='lines'))\nfig.update_yaxes(range=[0,40000])\nfig.show()","04a86caf":"df = country_df.loc['India']['Cases']\ndf = df.fillna(0)\nX = df[['Days']]\ny = df['Confirmed']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","c40a871f":"for i in range(1,10):\n    poly = PolynomialFeatures(degree = i)\n    regr = linear_model.LinearRegression()\n    X_ = poly.fit_transform(X_train)\n    regr.fit(X_, y_train)\n    X_ = poly.fit_transform(X_test)\n    results = regr.predict(X_)\n    score1 = metrics.mean_squared_error(y_test,results )\n    score2 = metrics.r2_score(y_test,results )\n    print('Model with Polynominal Degree', i, 'MSE: ',score1, '  R2 Score: ', score2)","3e127a24":"poly1 = PolynomialFeatures(degree = 4)\nregr1 = linear_model.LinearRegression()\nX1_ = poly1.fit_transform(X)\nregr1.fit(X1_, y)\n# results = regr1.predict(X1_)\n\npoly2 = PolynomialFeatures(degree = 5)\nregr2 = linear_model.LinearRegression()\nX2_ = poly2.fit_transform(X)\nregr2.fit(X2_, y)\n\n\nno_of_days = df['Days'].max() + 60\nX1_plot=np.linspace(0,no_of_days,100).reshape(-1,1)\nX1_plot_poly=poly1.fit_transform(X1_plot)\n\nX2_plot=np.linspace(0,no_of_days,100).reshape(-1,1)\nX2_plot_poly=poly2.fit_transform(X2_plot)\n\n\nfig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"Projection of India Total cases for next 30 days\", yaxis_title=\"Cases\", xaxis_title=\"No. of days\")\nfig.add_trace(go.Scatter(name='Projection Degree 3', x=X1_plot_poly[:,1], y=regr1.predict(X1_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Projection Degree 4', x=X2_plot_poly[:,1], y=regr2.predict(X2_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Current cases', x=df['Days'], y=y, mode='lines'))\nfig.update_yaxes(range=[0,6000000])\nfig.show()\npy.plot(fig, filename='covid-india-projection-deg2')","0e8f1ddf":"df = country_df.loc['India']['Cases']\ndf = df.fillna(0)\nX = df[['Days']]\ny = df['Confirmed Change']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)","85371b9d":"for i in range(1,10):\n    poly = PolynomialFeatures(degree = i)\n    regr = linear_model.LinearRegression()\n    X_ = poly.fit_transform(X_train)\n    regr.fit(X_, y_train)\n    X_ = poly.fit_transform(X_test)\n    results = regr.predict(X_)\n    score1 = metrics.mean_squared_error(y_test,results )\n    score2 = metrics.r2_score(y_test,results )\n    print('Model with Polynominal Degree', i, 'MSE: ',score1, '  R2 Score: ', score2)","048ed8f8":"poly1 = PolynomialFeatures(degree = 2)\nregr1 = linear_model.LinearRegression()\nX1_ = poly1.fit_transform(df[['Days']])\nregr1.fit(X1_, df['Confirmed Change'])\n# results = regr1.predict(X1_)\n\npoly2 = PolynomialFeatures(degree = 4)\nregr2 = linear_model.LinearRegression()\nX2_ = poly2.fit_transform(df[['Days']])\nregr2.fit(X2_, df['Confirmed Change'])\n\n\nno_of_days = df['Days'].max() + 60\nX1_plot=np.linspace(0,no_of_days,100).reshape(-1,1)\nX1_plot_poly=poly1.fit_transform(X1_plot)\n\nX2_plot=np.linspace(0,no_of_days,100).reshape(-1,1)\nX2_plot_poly=poly2.fit_transform(X2_plot)\n\n\nfig=go.Figure()\nfig.update_layout(template='plotly_dark', title=\"Projection of India Daily cases for next 30 days\", yaxis_title=\"Cases\", xaxis_title=\"No. of days\")\nfig.add_trace(go.Scatter(name='Projection Degree 3', x=X1_plot_poly[:,1], y=regr1.predict(X1_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Projection Degree 4', x=X2_plot_poly[:,1], y=regr2.predict(X2_plot_poly), mode='markers'))\nfig.add_trace(go.Scatter(name='Current cases', x=df['Days'], y=df['Confirmed Change'], mode='lines'))\nfig.update_yaxes(range=[0,200000])\nfig.show()\npy.plot(fig, filename='covid-india-projection-deg2')","5c0a6699":"# Finding tipping points for countries\nNo. of daily cases vs Total no. of cases","3b48a2ab":"In the above graph we can see even though China started with a lot of cases how it has flattened the curved by 20th of Feb and since then the new cases are contained very well. <br>\nHowever cases in Italy and US are increasing heavily in a with a steep climb. <br>","b57688e2":"# Analysis of the cases around the World","64e97df0":"Let us now comapare India with other few countries which are of similar numbers with respect to Covid-19","32283537":"# Coronavirus(Covid-19) Data Analysis| World & India\n\nhttps:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019\n\nDate: 19-Mar-2020  (First version)\n\nAuthor: Karthik C Sunil\n\nOutbroke in Nov 2019 in Wuhan, Mainland China. Spread across the world. \n\nAs I am writing the desease is still spreding in India as well as entire world. \n\n<<<< STAY SAFE >>>>","6cbfce6b":"# Modelling data and Projection\n\nUsing Polynomial regression let us try to get the right model for different contries and project for next few days","0a3688ba":"# Cases in India","3bf7dacb":"# Death Rate Analysis\n\nLet us consider only contries with more than 500 cases.","c3e29504":"We can see that after 4-Mar-2020, the exponential increase of confirmed cases have started. We can observe the same in graph below <br>\n\nOn an average Cases are growing day by day with 9% to 12%.","954798e7":"In the next graph let us see the heat map of death rate on the world map","ad51b767":"By seeing above graphs, we can observe that before any country flattens the curve (a.k.a tip down), for ","f09cd2e6":"Looking at R2 Scores, we have best scrore at Degree 7. However, that will be overfittign the curve, which we should avoid. To get a simple model which generalizes the data points, we can choose Degree 3","2af990f7":"Projecting India Data","97949ca6":"Looking at R2 Scores, we have best scrore at Degree 4. However, that will be overfittign the curve, which we should avoid. To get a simple model which generalizes the data points, we can choose Degree 3","c384ee42":"# Cases vs Population","89efee08":"# Cases by Country\n\nTo make the visualization better, we will see only top countries and countries similar to India only","8221d9b2":"`17-Apr-2020`\n\nAs per above graph we can see the number of daily cases would start to decrease from Day 50 (from 100th Case), which is 8-May-2020. Then, it keeps reducing and by 30-Jun-2020, the Corona should be under control\n\n`12-Aug-2020`\nAll my predictions are gone for toss :) hahaa","2566bc9a":"Trying to understand data at that poing when the new cases go down. Let us calculate the ratio New Cases \/ Existing cases (Let us use log10 while dividing). Try to get the Moving Average graph of that data  to analyse further.","8cdc5d69":"US - Analysis of Daily new cases","d2e7d013":"```9-Apr-2020```\n\nWe can see that using Poly degree 3, India will have about 86,000 cases in next 60 days. If you observe in the projection. \nWith Poly degree 4, India will have about 173,000 cases in next 60 days. \n\n","546bb2e2":"Note: To visualize better population, Cases per million as well as no. of total cases all are shown in logorithmic scale.\nWe can see there is sligh correlation with population and confirmed cases. Let us now see how is it influenced by Density of population","33d46fb0":"Covid-19 affected cases per million people in each country. We can see that there are many countries who value for cases per million is too high just because their population is too low., e.g.s - **Holy See**: Cases per million is almost 4999. But if you observe the confirmed cases are only 4 (as of 27-Mar-2020). <br>\n\nSo let us remove all the countries whos are cases are less than 100. and observe the same information","0afaab64":"We can see that, Confirmed cases are growing exponentially with a daily increase of around 10 - 15% worldwide <br>\nWe can also notice that recoveries are also happening at around 25% (I am writing on 26-Mar-2020). But it may vary in later time<br>\nBut what gives some relaxation is that mortality rate is not that bad. Around 5%","307225d0":"``` 9-Apr-2020```\n\nWe can observe before cases get stabilized, the ration between new cases vs existing cases reduce constantly. Example: S Korea, Italy. But in case of India and USA we can see the cases are still growing and it will continue to grow\n","663b24d3":"Find which polynomial degreee suits the curve","e064e56f":"# Cases by no. of days\n\nTo get a better relative visualization, let me plot no. of cases against no. of days since 100th case for each country. Also it helps to see how each contry have contained the Covid-19 cases after they have witnessed 100th cases. \n\nTo visialize better, we consider only top countries and countries similar to numbers that of India","ccce8693":"Load the data `covid_19_data.csv`  from source below:\n\nOriginal  source is from https:\/\/github.com\/CSSEGISandData\/COVID-19\/tree\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\n\nThe Data is refreshed to this Kernel Data on a daily basis by the Data owner","bf12aff5":"We can see New Zealand has highest recovery rate with **97.2%**","ffcbaa43":"We can observe that South Korea and China have achieved tipping points. China have reached it once they hit around 60K confirmed cases. South Korea have reached tipping point when they were 7K cases. The common pattern what we can see is, at certain level, no. of new cases will not increase compared to total no. of cases. In China we can observe that no. of daily new cases started to decrease once they hit around 16K and slowly decreased and attained the tipping point. Same in case of S. Korea. \n\n```9-Apr-2020```\n\nWe can see that Italy is now getting same amount of cases even though total cases are increasing. That is  an indication that it has attained the tipping point","6fc7ff26":"Looking at R2 Scores, we have best scrore at Degree 7. However, that will be overfittign the curve, which we should avoid. To get a simple model which generalizes the data points, we can choose Degree 3","a46da8fc":"**NOTE** <br>\n*You can select individual country by double-clicking on the country name on the right*\n<br>\n*After that you can select more countries by single clicking on the country names on the legend*\n<br>\n*Once done with comparison, you can double click on legend to show all the countries again*","3d0e02a9":"India: Projecting Daily new Cases. This will allow us to know when the curve gets faltten","5ff7d609":"Looking at R2 Scores, we have best scrore at Degree 5. However, that will be overfittign the curve, which we should avoid. To get a simple model which generalizes the data points, we can choose Degree 3 to 4.","8f31de13":"**NOTE** <br>\n*You can select individual country by double-clicking on the country name on the right*\n<br>\n*After that you can select more countries by single clicking on the country names on the legend*\n<br>\n*Once done with comparison, you can double click on legend to show all the countries again*","c987efe8":"We can see that there is not direct correlation between density of the population and no. of cases","4643d533":"# Latest Data Update on","357deeee":"In the above graph we can see the death rate is denoted by the size and color for the countries whose Covid cases are more than 500. We can observe the India's death rate 2.75%. Italy's mortality case is 12.3% which is highest, followed by Algeria with 11.5% and UK which is 10.2%. Let us see top 5 countries with death rates","cd457fa1":"Find which polynomial degreee suits the curve","786c5c2c":"Let us now see the trends in these rates - New Confirmed Cases, Recovery rate as well as Mortality rate","5449d7ed":"Following are the countries with top recovery rates","eee71b93":"Projecting US Data - Total cases"}}