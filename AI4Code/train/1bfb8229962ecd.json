{"cell_type":{"b7d4e2a5":"code","e797f0c7":"code","bae8db22":"code","96772903":"code","fe05dc5f":"code","e19e2797":"code","32a43720":"code","e9e3a6ef":"code","66baeac9":"code","ffe2ab66":"code","2a3f7f9f":"code","ecb81098":"code","a1be76e2":"code","c95471be":"markdown"},"source":{"b7d4e2a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e797f0c7":"import cv2\nimport random","bae8db22":"PATHDIR = \"..\/input\/cat-and-dog\/\"\ncategories = [\"cats\",\"dogs\"]\n\nIMG_SIZE = 100\n\n\ndef create_training_data():\n    training_data = []\n    \n    for c in categories:\n        for img_name in os.listdir(os.path.join(PATHDIR,\"training_set\/training_set\",c)):\n            img_path = os.path.join(PATHDIR,\"training_set\/training_set\",c,img_name)\n            img_arr = cv2.imread(img_path,0)\n            try:\n                resized = cv2.resize(img_arr, (IMG_SIZE,IMG_SIZE))\n                norm_arr = resized\/255\n                training_data.append([norm_arr, categories.index(c)])\n            except Exception as e:\n                pass\n    random.shuffle(training_data)\n    return training_data\n\ntraining_data = create_training_data()","96772903":"X = []\ny = []\n\nfor f,l in training_data:\n    X.append(f)\n    y.append(l)\n    \nX = np.array(X).reshape(-1, IMG_SIZE,IMG_SIZE,1)\ny = np.array(y)","fe05dc5f":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout","e19e2797":"model = Sequential()\n\n#First Layer\nmodel.add(Conv2D(64, (3,3), input_shape = (IMG_SIZE,IMG_SIZE,1)))\nmodel.add(MaxPooling2D(pool_size= (2,2)))\nmodel.add(Flatten())\n\n#Second Layer\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dropout(0.2))\n\n#Output Layer\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.summary()","32a43720":"model.compile(optimizer = \"adam\",\n             loss =\"sparse_categorical_crossentropy\",\n             metrics = [\"accuracy\"])\n\nmodel.fit(X,y, epochs = 20)","e9e3a6ef":"def create_testing_data():\n    testing_data = []\n    \n    for c in categories:\n        for img_name in os.listdir(os.path.join(PATHDIR,\"training_set\/training_set\",c)):\n            img_path = os.path.join(PATHDIR,\"training_set\/training_set\",c,img_name)\n            img_arr = cv2.imread(img_path,0)\n            try:\n                resized = cv2.resize(img_arr, (IMG_SIZE,IMG_SIZE))\n                norm_arr = resized\/255\n                testing_data.append([norm_arr, categories.index(c)])\n            except Exception as e:\n                pass\n    random.shuffle(testing_data)\n    return testing_data\n\ntest_data = create_testing_data()","66baeac9":"X_test = []\ny_test = []\n\nfor f,l in test_data:\n    X_test.append(f)\n    y_test.append(l)\n    \nX_test = np.array(X_test).reshape(-1, IMG_SIZE, IMG_SIZE,1)\ny_test = np.array(y_test)","ffe2ab66":"model.evaluate(X_test, y_test)","2a3f7f9f":"import matplotlib.pyplot as plt","ecb81098":"img_path = \"..\/input\/cat-dataset\/CAT_00\/00000001_005.jpg\"\nimg_arr = cv2.imread(img_path,0)\nimg_arr = cv2.resize(img_arr, (IMG_SIZE,IMG_SIZE))\nnorm_arr = img_arr\/255\npred_img = (norm_arr)\n    \n    \npred_img = pred_img.reshape(100,100,1)","a1be76e2":"test_img = pred_img\ntest_img = test_img.reshape(1,IMG_SIZE,IMG_SIZE,1)\npredict_ = model.predict(test_img)[0]\n\nfor i in range(len(predict_)):\n    if(predict_[i] == max(predict_)):\n        if(i == 0):\n            print(\"This is a CAT!\")\n        else:\n            print(\"This is a DOG!\")\n        \nplt.imshow(test_img.reshape(IMG_SIZE,IMG_SIZE), cmap='gray')","c95471be":"# Cats vs Dogs\n\n## This notebook is just an extension of what I've learned for the MNIST dataset."}}