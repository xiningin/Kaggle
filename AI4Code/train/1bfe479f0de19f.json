{"cell_type":{"1cb57657":"code","17d6c0e5":"code","17044829":"code","3292f6ee":"code","3036d0bd":"code","e70c2046":"code","dc568852":"code","a4230d0f":"code","1ee58f04":"code","b65b1a4e":"code","2d26b56d":"code","72ee9942":"code","a1acce63":"code","1c6ca730":"code","cbc7b91b":"code","98039c8b":"code","0090c014":"markdown","8586ed8f":"markdown"},"source":{"1cb57657":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","17d6c0e5":"df = pd.read_csv('..\/input\/covid19-us\/us-counties.csv')\ndf['date'] = pd.to_datetime(df.date)\ndf['date1'] = df['date'].dt.strftime(\"%Y%m%d\").astype(int)\ndf2 = df","17044829":"df2a = df2[df2['date'] == df['date'].max()]","3292f6ee":"df2['State_County'] = df2['state'].astype(str) + \">\" + df2['county'].astype(str) ","3036d0bd":"State_Count_list = set()\nfor a in df2['State_County']:\n    State_Count_list.add(a)","e70c2046":"len_list = len(State_Count_list)\nprint(len_list)","dc568852":"import time\ndf3 = pd.DataFrame()\ncount = 0\ns = time.time()\n\nfor aa in State_Count_list:\n\n    dfa = df2[df2['State_County'] == aa][['fips','cases','deaths']].diff() \n    dfa[\"state_county\"] = aa\n    dfa['date'] = df2[df2['State_County'] == aa]['date']\n    df3 = pd.concat([df3,dfa])\n    \n    count+=1\n    if count % 500 == 0:\n        e = time.time()\n        print(\"Time: {} | Percent Done: {}: \".format((e-s)\/60,(count\/len_list)))","a4230d0f":"df3.tail()","1ee58f04":"df3a = pd.DataFrame()\n\ncount = 0\ns = time.time()\n\nfor aa in State_Count_list:\n    df = df3[df3['state_county'] == aa]\n    dfa = df[['cases','deaths']].rolling(window=3).sum()\n    dfa = dfa.rename(columns= {'cases': \"Cases_Sum3\", 'deaths': \"Deaths_Sum3\"})\n    dfb = df[['cases','deaths']].rolling(window=3).mean()\n    dfb = dfb.rename(columns= {'cases': \"Cases_Mean3\",'deaths':\"Deaths_Mean3\"})\n    \n    dfc = df[['cases','deaths']].rolling(window=6).sum()\n    dfc = dfc.rename(columns= {'cases': \"Cases_Sum6\", 'deaths': \"Deaths_Sum6\"})\n    dfd = df[['cases','deaths']].rolling(window=6).mean()\n    dfd = dfd.rename(columns= {'cases': \"Cases_Mean6\",'deaths':\"Deaths_Mean6\"})\n    \n    dfaa = pd.concat([dfa,dfb,dfc,dfd], axis = 1)\n    dfaa[['state_county','date']] = df3[df3['state_county'] == aa][['state_county','date']]\n    \n    df3a = pd.concat([df3a,dfaa])\n    count +=1\n    if count % 50 == 0:\n        e = time.time()\n        print(\"Time: {} Mins | Percent Done: {}: \".format(((e-s)\/60),(count\/len_list)))\nprint('Done | Time: {} Minutes'.format((e-s)\/60))","b65b1a4e":"df3a","2d26b56d":"df4 = pd.DataFrame()\ndf3aa = df3a[(df3a['date'] > '2021-07-20')]\nfor a in State_Count_list:\n    if a in df3aa['state_county'].unique():\n        df = df3aa[df3aa['state_county'] == a]\n        \n        df1 = df.mean(numeric_only = True)\n        df1['state_county'] = a\n        df1 = df1.to_frame().T\n        df1 = pd.DataFrame(df1)\n        df4 = pd.concat([df4,df1])","72ee9942":"df4.sort_values('Cases_Mean3',ascending = False).head(20)","a1acce63":"df4[['state_county','Cases_Mean3']].set_index('state_county').sort_values('Cases_Mean3',ascending = False).head(20).plot(kind = 'barh',figsize = (15,10), title = '20 Counties with Highest Cases last 3 days')\n\ndf4[['state_county','Cases_Mean6']].set_index('state_county').sort_values('Cases_Mean6',ascending = False).head(20).plot(kind = 'barh',figsize = (15,10), title = '20 Counties with Highest Cases last 6 days')\n","1c6ca730":"df4[['state_county','Deaths_Mean3']].set_index('state_county').sort_values('Deaths_Mean3',ascending = False).head(20).plot(kind = 'barh',figsize = (15,10), title = '20 Counties with Highest Deaths last 3 days')\n\ndf4[['state_county','Deaths_Mean6']].set_index('state_county').sort_values('Deaths_Mean6',ascending = False).head(20).plot(kind = 'barh',figsize = (15,10), title = '20 Counties with Highest Deaths last 6 days')\n","cbc7b91b":"df3.to_csv(\"Diff.csv\")","98039c8b":"df3a.to_csv(\"Wind_3.csv\")","0090c014":"## Difference Table for Each County","8586ed8f":"## Rolling Window (3day sum) Table for Each County"}}