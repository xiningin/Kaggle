{"cell_type":{"58629ed1":"code","54916388":"code","afa36bd3":"code","55756518":"code","18b9e2f2":"code","6ebc6a63":"code","adb2147b":"code","f248a9e6":"code","532c7479":"code","31dbeb9b":"code","f17a42b5":"code","8941e229":"code","de84a3ba":"code","aa43a590":"code","880456a2":"code","915e997e":"code","6febce6f":"code","bb168ede":"code","46918625":"code","a53ebf71":"code","588e6f35":"code","6a2ed8c4":"code","49e10858":"code","8b1d2b2a":"code","f71d0e8f":"code","ec82563f":"code","d040d297":"code","1242929e":"code","4895c676":"code","3e92c6d4":"code","055f93b5":"code","3a0a55cb":"code","ce4a7572":"code","fc7d0cb5":"code","d2954716":"code","6a49671f":"code","1b7221c7":"code","f4ea454e":"code","e88e0837":"code","27b81dc9":"code","d57771bf":"code","363d1b25":"code","7c29e642":"code","51243b20":"code","a712387f":"code","ef660194":"code","c834986d":"code","65e8e644":"code","c79dd986":"code","cc59713f":"code","3e19772e":"code","bbfab59e":"code","fcf9eee5":"code","ec7dcbdb":"code","a0be34ef":"code","28f6b74f":"code","13332747":"code","36ef4b03":"code","d2999ba3":"code","997bea84":"code","3f7c9be3":"code","774ab76f":"code","b0bde092":"code","9ae39fef":"code","4de4422c":"code","7f642701":"code","c867b3c6":"code","1d1d31e7":"code","3754effe":"code","ac5e3349":"code","32da8fee":"code","33331e61":"code","5ee1c284":"code","c4d2f66c":"code","4538b78e":"code","c0e1ddca":"code","170cde0d":"code","c5dc2de2":"code","f27ae437":"code","08c0a7ff":"code","14ede8f9":"code","c3f7be97":"code","2063b4bf":"code","17be2056":"code","5e83d5d7":"code","bd420573":"code","e8c5c6a5":"code","868a668a":"code","03e4d2ae":"code","0a747a2e":"code","5f0753a6":"code","6ea275c9":"code","f44aeb23":"code","12e6d28a":"code","30891c48":"code","59b1a1ba":"code","85bb9880":"code","be5a4002":"code","f5187ba7":"code","aa8b037e":"code","32572660":"code","46446990":"code","736cc92f":"code","d25b169e":"code","8accc87a":"code","c6bce319":"markdown","726c1b08":"markdown","4b2ef426":"markdown","574d92d0":"markdown","e17e8958":"markdown","e930e5f8":"markdown","ed2d80ba":"markdown","0ef0ae16":"markdown","6f2a6234":"markdown","aa89a16f":"markdown","730f15d8":"markdown","66948e81":"markdown","3516f74e":"markdown","06eed6cc":"markdown","1e7de54a":"markdown","29befe16":"markdown","3026afc8":"markdown","02421e87":"markdown","cca5e895":"markdown","213bb193":"markdown","9877acaa":"markdown","78f4b891":"markdown","ff95557f":"markdown","1044f7b6":"markdown","bcb676fa":"markdown","f6e19e1c":"markdown","73fdee15":"markdown","e1e2075f":"markdown"},"source":{"58629ed1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')","54916388":"hr = pd.read_csv('..\/input\/wns-inno\/train_LZdllcl.csv')\nhr.head()","afa36bd3":"hr.info()","55756518":"hr.isnull().sum()","18b9e2f2":"hr.describe(include=np.object)","6ebc6a63":"hr.education.unique()","adb2147b":"hrtest = pd.read_csv('..\/input\/wns-inno\/test_2umaH9m.csv')\nhrtest.head()","f248a9e6":"hrtest.info()","532c7479":"#hr[hr.education.isnull()]","31dbeb9b":"#hr[hr.department=='Legal']['education']","f17a42b5":"hr['education'].mode()[0]","8941e229":"hr['education'].fillna(hr['education'].mode()[0],inplace=True)","de84a3ba":"hrtest['education'].fillna(hrtest['education'].mode()[0],inplace=True)","aa43a590":"hr['previous_year_rating'].mode()[0]","880456a2":"hr['previous_year_rating'].fillna(hr['previous_year_rating'].mode()[0],inplace=True)","915e997e":"hrtest['previous_year_rating'].fillna(hrtest['previous_year_rating'].mode()[0],inplace=True)","6febce6f":"sns.pairplot(hr,diag_kind='kde',hue='is_promoted')","bb168ede":"from sklearn.preprocessing import LabelEncoder,Normalizer,PolynomialFeatures","46918625":"lc = LabelEncoder()","a53ebf71":"hr.education = lc.fit_transform(hr.education)","588e6f35":"hr.gender = lc.fit_transform(hr.gender)","6a2ed8c4":"hr.recruitment_channel = lc.fit_transform(hr.recruitment_channel)","49e10858":"hrtest.education = lc.fit_transform(hrtest.education)\nhrtest.gender = lc.fit_transform(hrtest.gender)\nhrtest.recruitment_channel = lc.fit_transform(hrtest.recruitment_channel)","8b1d2b2a":"plt.figure(figsize=(12,10))\nsns.countplot(hr.region)\nplt.xticks(rotation=90)","f71d0e8f":"plt.figure(figsize=(12,10))\nsns.countplot(hr.region,hue=hr.is_promoted)\nplt.xticks(rotation=90)","ec82563f":"plt.figure(figsize=(12,10))\nsns.heatmap(hr.corr(),annot=True)\nplt.xticks(rotation=90)","d040d297":"sns.countplot(hr.is_promoted)","1242929e":"regionlist = hr[~(hr.region.isin(['region_2','region_22']))].index","4895c676":"hr.loc[regionlist,'region'] = 'others'","3e92c6d4":"hr.region.unique()","055f93b5":"regionlisttest = hrtest[~(hrtest.region.isin(['region_2','region_22']))].index\nhrtest.loc[regionlisttest,'region'] = 'others'\nhrtest.region.unique()","3a0a55cb":"plt.figure(figsize=(12,10))\nsns.countplot(hr.region)\nplt.xticks(rotation=90)","ce4a7572":"hr.region = lc.fit_transform(hr.region)","fc7d0cb5":"hrtest.region = lc.fit_transform(hrtest.region)","d2954716":"hr.head()","6a49671f":"plt.figure(figsize=(12,10))\nsns.countplot(hr.department)\nplt.xticks(rotation=90)","1b7221c7":"dummydata = pd.get_dummies(hr.drop(['is_promoted','employee_id'],axis=1))\ndummydata.head()","f4ea454e":"nm = Normalizer()","e88e0837":"scaledData = pd.DataFrame(nm.fit_transform(dummydata),columns=dummydata.columns)\nscaledData.head()","27b81dc9":"dummydatatest = pd.get_dummies(hrtest.drop(['employee_id'],axis=1))\nscaledDatatest = pd.DataFrame(nm.fit_transform(dummydatatest),columns=dummydatatest.columns)\nscaledDatatest.head()","d57771bf":"from sklearn.cluster import KMeans","363d1b25":"x = scaledData\ny = hr['is_promoted']","7c29e642":"from scipy.cluster.hierarchy import dendrogram,linkage","51243b20":"klist = list(range(2,8))\ninertialist = []","a712387f":"for i in klist:\n    km = KMeans(n_clusters=i)\n    km.fit(x)\n    km.labels_\n    inertialist.append(km.inertia_)","ef660194":"plt.figure(figsize=(12,10))\nsns.lineplot(klist,inertialist,marker='o')","c834986d":"from sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.cm as cm\n\n\n# Generating the sample data from make_blobs\n# This particular setting has one distinct cluster and 3 clusters placed close\n# together.\nX  = x\n\nrange_n_clusters = [2,3,4,5,6]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.Spectral(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhouette score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.Spectral(cluster_labels.astype(float) \/ n_clusters)\n    ax2.scatter(X.iloc[:, 0], X.iloc[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\n    plt.show()","65e8e644":"km = KMeans(n_clusters=5)\nkm.fit(x)\nx['class'] = km.labels_\nkm.inertia_","c79dd986":"km = KMeans(n_clusters=5)\nkm.fit(scaledDatatest)\nscaledDatatest['class'] = km.labels_","cc59713f":"from sklearn.linear_model import LogisticRegression","3e19772e":"from sklearn.model_selection import train_test_split","bbfab59e":"from sklearn.metrics import accuracy_score,classification_report,f1_score","fcf9eee5":"#for i in range(7):\nxtrain,xtest,ytrain,ytest = train_test_split(x,y,random_state = 4)\nlr = LogisticRegression()\nlr.fit(xtrain,ytrain)\nypredsplit = lr.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit))\nprint('training score:',lr.score(xtrain,ytrain))\nprint('testing score:',lr.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit))\n#    print(i,'---------')","ec7dcbdb":"lr = LogisticRegression()\nlr.fit(x,y)\nypred1 = lr.predict(scaledDatatest)","a0be34ef":"ypred1[ypred1 == 1]","28f6b74f":"pd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred1}).to_csv('rahul1394lr.csv',index=False)","13332747":"from sklearn.tree import DecisionTreeClassifier","36ef4b03":"dt = DecisionTreeClassifier()\ndt.fit(xtrain,ytrain)\nypredsplit2 = dt.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit2))\nprint('training score:',dt.score(xtrain,ytrain))\nprint('testing score:',dt.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit2))","d2999ba3":"dt = DecisionTreeClassifier()\ndt.fit(x.drop(['age','length_of_service'],axis=1),y)\nypred2 = dt.predict(scaledDatatest.drop(['age','length_of_service'],axis=1))","997bea84":"pd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred2}).to_csv('rahul1394dt.csv',index=False)","3f7c9be3":"from sklearn.ensemble import RandomForestClassifier","774ab76f":"rf = RandomForestClassifier()\nrf.fit(xtrain,ytrain)\nypredsplit3 = rf.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit3))\nprint('training score:',rf.score(xtrain,ytrain))\nprint('testing score:',rf.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit3))","b0bde092":"rf = RandomForestClassifier()\nrf.fit(x,y)\nypred3 = rf.predict(scaledDatatest)\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","9ae39fef":"pd.Series(rf.feature_importances_,xtest.columns)","4de4422c":"from sklearn.decomposition import PCA","7f642701":"pca = PCA(n_components=2)\npcax = pca.fit_transform(x)","c867b3c6":"xtrain2,xtest2,ytrain2,ytest2 = train_test_split(pcax,y,random_state = 4)","1d1d31e7":"dt = RandomForestClassifier()\ndt.fit(xtrain2,ytrain2)\nypredsplit22 = dt.predict(xtest2)\nprint('accuracy_score:',accuracy_score(ytest2,ypredsplit22))\nprint('training score:',dt.score(xtrain2,ytrain2))\nprint('testing score:',dt.score(xtest2,ytest2))\nprint('f1score',f1_score(ytest2,ypredsplit22))","3754effe":"from sklearn.preprocessing import PolynomialFeatures","ac5e3349":"pf = PolynomialFeatures()","32da8fee":"pfx = pf.fit_transform(x)","33331e61":"xtrain3,xtest3,ytrain3,ytest3 = train_test_split(pfx,y,random_state = 4)\ndt = RandomForestClassifier()\ndt.fit(xtrain3,ytrain3)\nypredsplit23 = dt.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',dt.score(xtrain3,ytrain3))\nprint('testing score:',dt.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","5ee1c284":"from imblearn.under_sampling import NearMiss\nfrom imblearn.over_sampling import SMOTE","c4d2f66c":"sm = SMOTE()","4538b78e":"ux,uy = sm.fit_sample(x.drop(['recruitment_channel','class','gender'],axis=1),y)","c0e1ddca":"xtrain3,xtest3,ytrain3,ytest3 = train_test_split(ux,uy,random_state = 4)","170cde0d":"xtrain3,xtest3,ytrain3,ytest3 = train_test_split(ux,uy,random_state = 4)\ndt = RandomForestClassifier()\ndt.fit(xtrain3,ytrain3)\nypredsplit23 = dt.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',dt.score(xtrain3,ytrain3))\nprint('testing score:',dt.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","c5dc2de2":"rf = RandomForestClassifier()\nrf.fit(ux,uy)\nypred3 = rf.predict(scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1))\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","f27ae437":"nm = NearMiss()","08c0a7ff":"dx,dy = sm.fit_sample(x.drop(['recruitment_channel','class','gender'],axis=1),y)","14ede8f9":"xtrain2,xtest2,ytrain2,ytest2 = train_test_split(dx,dy,random_state = 4)","c3f7be97":"dt = RandomForestClassifier()\ndt.fit(xtrain2,ytrain2)\nypredsplit22 = dt.predict(xtest2)\nprint('accuracy_score:',accuracy_score(ytest2,ypredsplit22))\nprint('training score:',dt.score(xtrain2,ytrain2))\nprint('testing score:',dt.score(xtest2,ytest2))\nprint('f1score',f1_score(ytest2,ypredsplit22))","2063b4bf":"rf = RandomForestClassifier()\nrf.fit(dx,dy)\nypred3 = rf.predict(scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1))\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","17be2056":"dt = LogisticRegression()\ndt.fit(xtrain3,ytrain3)\nypredsplit23 = dt.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',dt.score(xtrain3,ytrain3))\nprint('testing score:',dt.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","5e83d5d7":"# lr = LogisticRegression()\n# lr.fit(ux,uy)\n# ypred1 = lr.predict(scaledDatatest.drop(['recruitment_channel','class'],axis=1))\n# pd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred1}).to_csv('rahul1394lr.csv',index=False)","bd420573":"from sklearn.neighbors import KNeighborsClassifier","e8c5c6a5":"knn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(xtrain,ytrain)\nypredsplit4 = knn.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit4))\nprint('training score:',knn.score(xtrain,ytrain))\nprint('testing score:',knn.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit4))","868a668a":"from sklearn.naive_bayes import GaussianNB","03e4d2ae":"nb = GaussianNB()\nnb.fit(xtrain,ytrain)\nypredsplit5 = nb.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit5))\nprint('training score:',nb.score(xtrain,ytrain))\nprint('testing score:',nb.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit5))","0a747a2e":"from sklearn.svm import SVC","5f0753a6":"sv = SVC(C=3,kernel='linear')\nsv.fit(xtrain,ytrain)\nypredsplit6 = sv.predict(xtest)\nprint('accuracy_score:',accuracy_score(ytest,ypredsplit6))\nprint('training score:',sv.score(xtrain,ytrain))\nprint('testing score:',sv.score(xtest,ytest))\nprint('f1score',f1_score(ytest,ypredsplit6))","6ea275c9":"from sklearn.model_selection import GridSearchCV","f44aeb23":"param_dt = {\n    'max_depth': [2, 3, 4],\n    'max_features': ['auto', 'sqrt', 'log2'],\n    'criterion': ['gini', 'entropy']\n}\nparam_rf = {\n    'max_depth': [2, 3, 4],\n    'bootstrap': [True, False],\n    'max_features': ['auto', 'sqrt', 'log2', None],\n    'criterion': ['gini', 'entropy']\n}","12e6d28a":"# gridDt = GridSearchCV(dt, cv = 10,param_grid=param_dt,scoring='f1_weighted')\n# gridDt.fit(x,y)\n# gridDt.best_params_","30891c48":"# gridRf = GridSearchCV(rf, cv = 10,param_grid=param_rf,scoring='f1')\n# gridRf.fit(x,y)\n# gridRf.best_params_","59b1a1ba":"import statsmodels.api as sms","85bb9880":"model = sms.Logit(y,x.drop(['recruitment_channel','class','gender'],axis=1)).fit()\nmodel.summary()","be5a4002":"from sklearn.ensemble import BaggingClassifier,AdaBoostClassifier,GradientBoostingClassifier","f5187ba7":"rf = RandomForestClassifier()\nbg = BaggingClassifier(base_estimator=rf,n_estimators=25)\nbg.fit(xtrain3,ytrain3)\nypredsplit23 = bg.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',bg.score(xtrain3,ytrain3))\nprint('testing score:',bg.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","aa8b037e":"rf = RandomForestClassifier()\nbg = BaggingClassifier(base_estimator=rf,n_estimators=25)\nbg.fit(ux,uy)\nypred3 = bg.predict(scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1))\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","32572660":"rf = RandomForestClassifier()\nbg = AdaBoostClassifier(base_estimator=rf,n_estimators=25)\nbg.fit(xtrain3,ytrain3)\nypredsplit23 = bg.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',bg.score(xtrain3,ytrain3))\nprint('testing score:',bg.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","46446990":"rf = RandomForestClassifier()\nbg = AdaBoostClassifier(base_estimator=rf,n_estimators=25)\nbg.fit(ux,uy)\nypred3 = bg.predict(scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1))\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","736cc92f":"rf = RandomForestClassifier()\nbg = GradientBoostingClassifier(n_estimators=25)\nbg.fit(xtrain3,ytrain3)\nypredsplit23 = bg.predict(xtest3)\nprint('accuracy_score:',accuracy_score(ytest3,ypredsplit23))\nprint('training score:',bg.score(xtrain3,ytrain3))\nprint('testing score:',bg.score(xtest3,ytest3))\nprint('f1score',f1_score(ytest3,ypredsplit23))","d25b169e":"bg = GradientBoostingClassifier(n_estimators=25)\nbg.fit(ux,uy)\nypred3 = bg.predict(scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1))\npd.DataFrame({'employee_id':hrtest['employee_id'],'is_promoted':ypred3}).to_csv('rahul1394rf.csv',index=False)","8accc87a":"plt.figure(figsize=(10,10))\npd.Series(bg.feature_importances_,scaledDatatest.drop(['recruitment_channel','class','gender'],axis=1).columns)\\\n.sort_values().plot.barh()","c6bce319":"# Near Miss","726c1b08":"# One hot encoding","4b2ef426":"## fill null values","574d92d0":"# Logit","e17e8958":"# Polynomial Features","e930e5f8":"# Naive Bayes","ed2d80ba":"# Label encode","0ef0ae16":"# Grid Search","6f2a6234":"# Check null values","aa89a16f":"# Import libraries and load dataset","730f15d8":"## pairplot","66948e81":"## Logistic Regression","3516f74e":"## Gradient Boosting Classifier","06eed6cc":"# KMeans Clustering","1e7de54a":"# Build Model ","29befe16":"# Scaling","3026afc8":"# PCA","02421e87":"# Heatmap","cca5e895":"# SMOTE","213bb193":"## Bagging Classifier","9877acaa":"## Ada Boost Classifier","78f4b891":"## Elbow plot","ff95557f":"## Random Forest Classifier","1044f7b6":"### check if imbalanced dataset","bcb676fa":"# KNeighbors Classifier","f6e19e1c":"## Decision Tree","73fdee15":"## Silhouette score","e1e2075f":"# Bagging Boosting"}}