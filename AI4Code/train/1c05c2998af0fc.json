{"cell_type":{"45426b56":"code","56ddc553":"code","9c593ec3":"code","33079c74":"code","96d8b709":"code","144e402c":"code","7c5edafd":"code","eb48c97f":"code","b9e6122c":"code","0429de9b":"code","e8c352d9":"code","fe2db32e":"code","991ed921":"markdown","ed6d8459":"markdown","35f1b9fc":"markdown","dd70fa1e":"markdown","6b6b641b":"markdown","3bdefc20":"markdown","c4794554":"markdown","ab855189":"markdown","d06e86a0":"markdown","8add3881":"markdown","8e44df99":"markdown","0b0ae615":"markdown"},"source":{"45426b56":"    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import matplotlib.ticker as mtick\n    import seaborn as sns\n    from sklearn import svm\n    %matplotlib inline\n    from IPython.core.display import display, HTML\n    import ipywidgets as ipyw","56ddc553":"def data_reading():\n        try:\n            data = pd.read_csv('https:\/\/www.kaggle.com\/blastchar\/telco-customer-churn#__sid=js0', encoding='latin1')\n            display(HTML('<\/br><h1><center> Initial Raw Data <\/center><\/h1><\/br>'))\n            display(data.head())\n            return data\n        except FileNotFoundError:\n            print('\\nFile not found exception occured while reading the data. Kindly check the location or name of the file!')\n            return","9c593ec3":"def data_cleaning(data):\n\n        # Replacing null values with NaN\n        data = data.replace(' ', np.nan)\n\n        # Droping all the null values \n        data = data.dropna()\n        \n        # Converting 'TotalCharges' into float\n        data['TotalCharges'] = data['TotalCharges'].astype(float)\n\n        # Assigning continuous values to the column SeniorCitizen\n        senior_mapping = {0: \"No\", 1: \"Yes\"}\n        data['SeniorCitizen'] = data['SeniorCitizen'].map(senior_mapping)\n\n        display(HTML('<\/br><h1><center> Processed Cleaned Data <\/center><\/h1><\/br>'))\n        display(data.head())\n\n        return data","33079c74":"def stat_analysis(data):\n    display(HTML('<hr class=\"new1\">'))\n    \n    # Correlation Matrix of Tenure, Monthly Charges, and Total Charges\n    display(HTML('<\/br><h1><center> Correlation between the numerical columns of the data <\/center><\/h1><\/br>'))\n    display(data.corr())\n    \n    # Box plots to check for outliers\n    display(HTML('<\/br><h1><center> Outlier Detection <\/center><\/h1><\/br>'))\n    fig, axes = plt.subplots(1,3, figsize=(10,6))\n    sns.boxplot(data=data['tenure'], orient='v', ax=axes[0])\n    sns.boxplot(data=data['MonthlyCharges'], orient='v', ax=axes[1], color='red')\n    sns.boxplot(data=data['TotalCharges'], orient='v', ax=axes[2], color='green')\n    plt.tight_layout()\n    axes[0].set_title('Tenure')\n    axes[1].set_title('Monthly Charges')\n    axes[2].set_title('Total Charges')\n    plt.show()\n    ","96d8b709":"def show_plots(data):\n    \n    display(HTML('<hr class=\"new1\">'))\n    \n    # Histogram using Seaborn (Tenure)\n    display(HTML('<\/br><h1><center> Histogram of Tenure <\/center><\/h1><\/br>'))\n    plt.figure(figsize=(12,6))\n    sns.set_style('whitegrid')\n    sns.distplot(data['tenure'], bins=35, kde=False)\n    plt.title('Histogram of Tenure')\n    plt.show()\n\n    # Histogram using Seaborn (Monthly Bills)\n    display(HTML('<\/br><h1><center> Cost of Monthly Bills <\/center><\/h1><\/br>'))    \n    plt.figure(figsize=(12,6))\n    sns.set_style('whitegrid')\n    sns.distplot(data['MonthlyCharges'], bins=35, kde=False, color='red')\n    plt.title('Histogram of Monthly Bills')\n    plt.show()\n\n    # Histogram using Seaborn (Total bills)\n    display(HTML('<\/br><h1><center> Total Bill <\/center><\/h1><\/br>'))\n    plt.figure(figsize=(12,6))\n    sns.set_style('whitegrid')\n    sns.distplot(data['TotalCharges'], bins=35, kde=False, color='green')\n    plt.title('Histogram of Total Charges')\n    plt.show()\n","144e402c":"def churn_analysis_plots(data):\n        \n    display(HTML('<hr class=\"new1\">'))\n    \n    # Count plot of total churned out cutomers\n    display(HTML('<\/br><h1><center> Churn Status <\/center><\/h1><\/br>'))\n    plt.figure(figsize=(10,6))\n    sns.countplot(x='Churn', data=data, palette='viridis')\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('Did the Customers leave?', fontsize=14)\n    plt.ylabel('Count', fontsize=14)\n    plt.title('Churn Status ', fontsize=16)\n    plt.show()\n    \n    # Count Plot displaying gender wise churned out customers\n    display(HTML('<\/br><h1><center> Churn Status per Gender <\/center><\/h1><\/br>'))\n    sns.set_style('darkgrid')\n    gender_churn_grp = data.groupby(['gender', 'Churn']).size().reset_index().pivot(columns='Churn', index='gender', values=0)\n    fig1 = gender_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                          colormap = 'viridis', \n                          rot = 0)\n    fig1.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['gender'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status per Gender', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Citizen type using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status per Citizen Type <\/center><\/h1><\/br>'))    \n    SeniorCitizen_churn_grp = data.groupby(['SeniorCitizen', 'Churn']).size().reset_index().pivot(columns='Churn', index='SeniorCitizen', values=0)\n    sns.set_style('darkgrid')\n    fig2 = SeniorCitizen_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                        colormap = 'coolwarm', \n                                        rot = 0)\n    fig2.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['SeniorCitizen'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(2), ('Young', 'Senior'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status per Citizen Type', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Partnership type using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Partnered Vs. Non-Partnered Customers <\/center><\/h1><\/br>'))\n    partner_churn_grp = data.groupby(['Partner', 'Churn']).size().reset_index().pivot(columns='Churn', index='Partner', values=0)\n    sns.set_style('darkgrid')\n    fig3 = partner_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                  colormap = 'Spectral', \n                                  rot = 0)\n    fig3.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['Partner'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(2), ('Non-Partner', 'Partner'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Partnered Vs. Non-Partnered Customers', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Dependency type using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Dependent Vs. Non-Dependent Customers <\/center><\/h1><\/br>'))\n    dependents_churn_grp = data.groupby(['Dependents', 'Churn']).size().reset_index().pivot(columns='Churn', index='Dependents', values=0)\n    sns.set_style('darkgrid')\n    fig4 = dependents_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                     colormap = 'PiYG', \n                                     rot = 0)\n    fig4.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['Dependents'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(2), ('Non-Dependent', 'Dependent'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Dependent Vs. Non-Dependent Customers', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Phone Service type using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Phone Service Vs. No Phone Service Customers <\/center><\/h1><\/br>'))\n    PhoneService_churn_grp = data.groupby(['PhoneService', 'Churn']).size().reset_index().pivot(columns='Churn', index='PhoneService', values=0)\n    sns.set_style('darkgrid')\n    fig5 = PhoneService_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                       colormap = 'Accent', \n                                       rot = 0)\n    fig5.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['PhoneService'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(2), ('No Phone Service', 'Phone Service'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Phone Service Vs. No Phone Service Customers', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Multiline Service Option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Different Multiline Services <\/center><\/h1><\/br>'))\n    MultipleLines_churn_grp = data.groupby(['MultipleLines', 'Churn']).size().reset_index().pivot(columns='Churn', index='MultipleLines', values=0)\n    sns.set_style('darkgrid')\n    fig6 = MultipleLines_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                        colormap = 'Set1', \n                                        rot = 0)\n    fig6.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['MultipleLines'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Multiline Service', 'No Phone Service', 'Multiline Service'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Different Multiline Services', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Internet Service option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Internet Services <\/center><\/h1><\/br>'))\n    InternetService_churn_grp = data.groupby(['InternetService', 'Churn']).size().reset_index().pivot(columns='Churn', index='InternetService', values=0)\n    sns.set_style('darkgrid')\n    fig7 = InternetService_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                          title = \"\", \n                                          colormap = 'tab20', \n                                          rot = 0)\n    fig7.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['InternetService'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('DSL', 'Fiber Optic', 'No Internet Service'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Internet Services', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Online Security option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with different Online Security <\/center><\/h1><\/br>'))\n    OnlineSecurity_churn_grp = data.groupby(['OnlineSecurity', 'Churn']).size().reset_index().pivot(columns='Churn', index='OnlineSecurity', values=0)\n    sns.set_style('darkgrid')\n    fig8 = OnlineSecurity_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                         colormap = 'rainbow', \n                                         rot = 0)\n    fig8.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['OnlineSecurity'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Online Security', 'No Phone Service', 'Online Security'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with different Online Security', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Device Protection Option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Device Protection Options <\/center><\/h1><\/br>'))\n    DeviceProtection_churn_grp = data.groupby(['DeviceProtection', 'Churn']).size().reset_index().pivot(columns='Churn', index='DeviceProtection', values=0)\n    sns.set_style('darkgrid')\n    fig9 = DeviceProtection_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                           colormap = 'Set3', \n                                           rot = 0)\n    fig9.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['DeviceProtection'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Device Protection', 'No Phone Service', 'Device Protection'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Device Protection Options', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Technical Support option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Technical Support <\/center><\/h1><\/br>'))\n    TechSupport_churn_grp = data.groupby(['TechSupport', 'Churn']).size().reset_index().pivot(columns='Churn', index='TechSupport', values=0)\n    sns.set_style('darkgrid')\n    fig10 = TechSupport_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                       colormap = 'tab20b', \n                                       rot = 0)\n    fig10.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['TechSupport'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Technical Support', 'No Phone Service', 'Technical Support'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Technical Support', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Streaming TV option using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Streaming TV Options <\/center><\/h1><\/br>'))\n    StreamingTV_churn_grp = data.groupby(['StreamingTV', 'Churn']).size().reset_index().pivot(columns='Churn', index='StreamingTV', values=0)\n    sns.set_style('darkgrid')\n    fig11 = StreamingTV_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                      colormap = 'jet', \n                                      rot = 0)\n    fig11.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['StreamingTV'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Streaming TV', 'No Phone Service', 'Streaming TV'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Streaming TV Options', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Streaming Movies Options using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Streaming Movies Options <\/center><\/h1><\/br>'))\n    StreamingMovies_churn_grp = data.groupby(['StreamingMovies', 'Churn']).size().reset_index().pivot(columns='Churn', index='StreamingMovies', values=0)\n    sns.set_style('darkgrid')\n    fig12 = StreamingMovies_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                           colormap = 'brg', \n                                           rot = 0)\n    fig12.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['StreamingMovies'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(3), ('No Streaming Movies', 'No Phone Service', 'Streaming Movies'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Streaming Movies Options', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per type of Contract using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with Different Types of Contract <\/center><\/h1><\/br>'))\n    Contract_churn_grp = data.groupby(['Contract', 'Churn']).size().reset_index().pivot(columns='Churn', index='Contract', values=0)\n    sns.set_style('darkgrid')\n    fig13 = Contract_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                    colormap = 'summer', \n                                    rot = 0)\n    fig13.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['Contract'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with Different Types of Contract', fontsize=16)\n    plt.show()\n\n    # Bar plot for Churn Status per Paperless Billing status using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with\/without Paperless Billing <\/center><\/h1><\/br>'))\n    PaperlessBilling_churn_grp = data.groupby(['PaperlessBilling', 'Churn']).size().reset_index().pivot(columns='Churn', index='PaperlessBilling', values=0)\n\n    sns.set_style('darkgrid')\n    fig14 = PaperlessBilling_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6), \n                                            colormap = 'copper', \n                                            rot = 0)\n    fig14.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['PaperlessBilling'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(np.arange(2), ('Physical Billing', 'Digital Billing'), fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with\/without Paperless Billing', fontsize=16)\n    plt.show()\n    \n    # Bar plot for Churn Status per Payment Methods using matplotlib\n    display(HTML('<\/br><h1><center> Churn Status for Customers with different Payment Methods <\/center><\/h1><\/br>'))\n    PaymentMethod_churn_grp = data.groupby(['PaymentMethod', 'Churn']).size().reset_index().pivot(columns='Churn', index='PaymentMethod', values=0)\n    sns.set_style('darkgrid')\n    fig15 = PaymentMethod_churn_grp.plot(kind='bar', stacked=True, figsize=(10,6),\n                                         colormap = 'Wistia', \n                                         rot = 0)\n    fig15.yaxis.set_major_formatter(mtick.PercentFormatter(xmax=data['PaymentMethod'].count()))\n    plt.legend(loc='upper right', bbox_to_anchor=(1.25, 1), title='Did the customer leave?', labels=gender_churn_grp.columns)\n    plt.xticks(fontsize=12)\n    plt.yticks(fontsize=12)\n    plt.xlabel('')\n    plt.title('Churn Status for Customers with different Payment Methods', fontsize=16)\n    plt.show()\n    ","7c5edafd":"def insert_dummies(data):\n\n    display(HTML('<hr class=\"new1\">'))\n    display(HTML('<\/br><h1><center> Total Churn Count <\/center><\/h1><\/br>'))\n    display(data['Churn'].value_counts())\n\n    # Convert Categorical Variables into dummies\n    data = pd.get_dummies(data, columns = ['gender', 'SeniorCitizen','Partner', 'Dependents','PhoneService','MultipleLines',\n                                           'InternetService','OnlineSecurity','OnlineBackup','DeviceProtection',\n                                           'TechSupport','StreamingTV','StreamingMovies','Contract','PaperlessBilling',\n                                           'PaymentMethod','Churn'], drop_first = True)\n\n    display(HTML('<\/br><h1><center> Dummie Values Added  <\/center><\/h1><\/br>'))\n    display(data.head())\n    return data","eb48c97f":"def naive_bayes_model(data):\n\n    from sklearn.naive_bayes import GaussianNB\n    from sklearn.metrics import confusion_matrix,accuracy_score\n    from sklearn import metrics\n    from sklearn.metrics import classification_report\n    from sklearn.tree import DecisionTreeClassifier\n\n    display(HTML('<hr class=\"new1\">'))\n    display(HTML('<\/br><h1><center> Naive Bayes Model  <\/center><\/h1><\/br>'))\n    clf = GaussianNB()\n    clf.fit(X_train, y_train.values.ravel())\n    GaussianNB()\n    predictions = clf.predict(X_test)\n\n    conf_matrix = confusion_matrix(y_test,predictions)\n\n    print(conf_matrix)\n    df_cm = pd.DataFrame(conf_matrix, columns=('No', 'Yes'), index=('No', 'Yes'))\n    df_cm.index.name = 'Actual Churn Status'\n    df_cm.columns.name = 'Predicted Churn Status'\n\n    # Print performance details\n    accuracy = \\\n    metrics.accuracy_score(y_test, predictions) # , normalize=True, sample_weight=None\n    print(\"Accuracy: \" +  str(accuracy))\n\n\n    print(classification_report(y_test, predictions))\n\n\n    # Print confusion matrix\n    print(\"Confusion Matrix\")\n    display(pd.crosstab(y_test, predictions, rownames=['True'], colnames=['Predicted'], margins=True))\n\n    plt.figure(figsize=(8,5))\n    sns.heatmap(df_cm, annot=True, fmt='d', cmap='RdBu')\n    plt.show()","b9e6122c":"def decision_tree_model(data):\n\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.metrics import confusion_matrix,accuracy_score\n    from sklearn import metrics\n    from sklearn.metrics import classification_report\n\n    # Create an object of the model\n    cdt = DecisionTreeClassifier()\n\n    display(HTML('<hr class=\"new1\">'))\n    display(HTML('<\/br><h1><center> Decision Tree Model  <\/center><\/h1><\/br>'))\n    display(cdt.fit(X_train, y_train))\n\n    # Predict the test data\n    cdt_pred = cdt.predict(X_test)\n\n    # Evaluate the prediction\n    print(\"Classification Metrics for Decision Tree are as follows:\")\n    print(accuracy_score(y_test, cdt_pred))\n    print('\\n')\n    print(confusion_matrix(y_test, cdt_pred))\n    print('\\n')\n    print(classification_report(y_test, cdt_pred))\n\n    # Plot Confusion Matrix\n    cm = confusion_matrix(y_test, cdt_pred)\n    df_cm = pd.DataFrame(cm, columns=('No', 'Yes'), index=('No', 'Yes'))\n    df_cm.index.name = 'Actual Churn Status'\n    df_cm.columns.name = 'Predicted Churn Status'\n    df_cm\n\n    plt.figure(figsize=(8,5))\n    sns.heatmap(df_cm, annot=True, fmt='d', cmap='RdBu')\n    plt.show()","0429de9b":"def random_forest_model(data):\n\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.metrics import confusion_matrix,accuracy_score\n    from sklearn import metrics\n    from sklearn.metrics import classification_report\n\n    display(HTML('<hr>'))\n    display(HTML('<\/br><h1><center> Random Forest Model  <\/center><\/h1><\/br>'))\n    # Create an object of the model\n    crf = RandomForestClassifier()\n    display(crf.fit(X_train, y_train))\n\n    # Predict test data\n    crf_pred = crf.predict(X_test)\n\n    # Evaluate the prediction\n    print(\"Classification Metrics of Random Forest are as follows:\")\n    print(accuracy_score(y_test, crf_pred))\n    print('\\n')\n    print(confusion_matrix(y_test, crf_pred))\n    print('\\n')\n    print(classification_report(y_test, crf_pred))\n\n    # Plot Confusion Matrix\n    cm = confusion_matrix(y_test, crf_pred)\n    df_cm = pd.DataFrame(cm, columns=('No', 'Yes'), index=('No', 'Yes'))\n    df_cm.index.name = 'Actual Churn Status'\n    df_cm.columns.name = 'Predicted Churn Status'\n    display(df_cm)\n\n    plt.figure(figsize=(8,5))\n    sns.heatmap(df_cm, annot=True, fmt='d', cmap='Spectral_r')\n    plt.show()","e8c352d9":"def logistic_regression_model(data):\n\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.metrics import confusion_matrix,accuracy_score\n    from sklearn import metrics\n    from sklearn.metrics import classification_report\n\n    display(HTML('<hr>'))\n    display(HTML('<\/br><h1><center> Logistic Regression Model  <\/center><\/h1><\/br>'))\n\n    classifier = LogisticRegression(random_state=101)\n    display(classifier.fit(X_train, y_train))\n\n    predictions = classifier.predict(X_test)\n    print(classification_report(y_test, predictions))\n    print(confusion_matrix(y_test, predictions))\n    print(accuracy_score(y_test, predictions))\n\n    sns.heatmap(pd.DataFrame(confusion_matrix(y_test,predictions)), annot=True, fmt='d')\n    plt.show()","fe2db32e":"if __name__ == \"__main__\":\n\n\n    data = data_reading()\n\n    if data is not None:\n        cleaned_data = data_cleaning(data)\n        stat_analysis(cleaned_data)\n        show_plots(cleaned_data)\n        churn_analysis_plots(cleaned_data)\n\n        data_with_dummies = insert_dummies(cleaned_data)\n\n        from sklearn.model_selection import train_test_split\n\n        X = data_with_dummies.drop(['customerID', 'Churn_Yes'], axis=1)\n        y = data_with_dummies['Churn_Yes']\n\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\n\n        naive_bayes_model(data_with_dummies)\n\n        decision_tree_model(data_with_dummies)\n\n        random_forest_model(data_with_dummies)\n\n        logistic_regression_model(data_with_dummies)\n","991ed921":"### Histograms","ed6d8459":"### Descriptive Analysis","35f1b9fc":"### Decision Tree:\nA decision tree is used to classify two or more categorical variabes or to estimate a continuous value. The training dataset is used to build a tree made up of nodes corresponding to splitters and split values used to branch the tree. Building a tree is an iterative process of splitting the training dataset into partitions till tthe subset becomes pure and belong to one class owner. ","dd70fa1e":"### Statistical Analysis","6b6b641b":"### Setting dummy continuous values","3bdefc20":"### Naive Bayes:\n\nNaive Bayes ia probablistic classification algorithm for binary and multiclass classification problems. It is based on bayes theorem. This algorithm assumes that each attribute value is independent in the given class.","c4794554":"### Random Forest:\nRandom Forest is a type of ensemble technique for training multiple independent decision trees in parallel to classify two or more categorical variabes or to estimate a continuous value. In this model, the training dataset is divided into boostrap samples of size m and each decision tree works on these bootsrtap samples individually to predict the class of data points. In the end, predictions of all trees are averaged to give the final output.","ab855189":"### Importing required libraries","d06e86a0":"### Logistic Regression \nLogistic Regression is one of popular machine learning algorithm used to solve classification problems. It uses similar techniques as linear regression for classification. It produces the best results when the dependent variable is dichotomous (binary), Yes\/No in our case. ","8add3881":"### Data pre-processing","8e44df99":"#### Main function","0b0ae615":"### Reading data\nThe Telco Customer Churn data is obtained from Kaggle: https:\/\/www.kaggle.com\/blastchar\/telco-customer-churn#__sid=js0"}}