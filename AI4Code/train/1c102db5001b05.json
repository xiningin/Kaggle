{"cell_type":{"b7096678":"code","0c5240db":"code","328827fb":"code","1520652c":"code","09a63e26":"code","09169924":"code","d8d30e93":"code","4d3e8dbe":"code","7ac14bbd":"code","dd911a35":"code","a98070ee":"code","3b392013":"code","976c60dc":"code","3b23790d":"code","f43e32d1":"code","c9343063":"code","020ed95c":"code","7eb95b98":"code","2fb1a375":"code","69f27c76":"code","b0a4cbf8":"code","effceb9b":"code","c638430d":"code","7e836c65":"code","c4a2ab38":"code","7810deab":"code","6ce1d9c0":"markdown","5f9a3d40":"markdown"},"source":{"b7096678":"import os\nimport pdb\nimport wandb\nimport argparse\nfrom dataclasses import dataclass, field\nfrom typing import Optional\nfrom collections import defaultdict\n\nimport torch\nfrom torch.nn.utils.rnn import pad_sequence\n\nimport numpy as np\nfrom tqdm import tqdm, trange\n\nfrom transformers import (\n    BertForSequenceClassification,\n    BertTokenizer,\n    AutoConfig,\n    AdamW\n)","0c5240db":"def make_id_file(task, tokenizer):\n    def make_data_strings(file_name):\n        data_strings = []\n        with open(os.path.join('..\/input\/goormtextclassificationproject', file_name), 'r', encoding='utf-8') as f:\n            id_file_data = [tokenizer.encode(line.lower()) for line in f.readlines()]\n        for item in id_file_data:\n            data_strings.append(' '.join([str(k) for k in item]))\n        return data_strings\n    \n    print('it will take some times...')\n    train_pos = make_data_strings('sentiment.train.1')\n    train_neg = make_data_strings('sentiment.train.0')\n    dev_pos = make_data_strings('sentiment.dev.1')\n    dev_neg = make_data_strings('sentiment.dev.0')\n\n    print('make id file finished!')\n    return train_pos, train_neg, dev_pos, dev_neg","328827fb":"tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')","1520652c":"train_pos, train_neg, dev_pos, dev_neg = make_id_file('yelp', tokenizer)","09a63e26":"train_pos[:10]","09169924":"class SentimentDataset(object):\n    def __init__(self, tokenizer, pos, neg):\n        self.tokenizer = tokenizer\n        self.data = []\n        self.label = []\n\n        for pos_sent in pos:\n            self.data += [self._cast_to_int(pos_sent.strip().split())]\n            self.label += [[1]]\n        for neg_sent in neg:\n            self.data += [self._cast_to_int(neg_sent.strip().split())]\n            self.label += [[0]]\n\n    def _cast_to_int(self, sample):\n        return [int(word_id) for word_id in sample]\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, index):\n        sample = self.data[index]\n        return np.array(sample), np.array(self.label[index])","d8d30e93":"train_dataset = SentimentDataset(tokenizer, train_pos, train_neg)\ndev_dataset = SentimentDataset(tokenizer, dev_pos, dev_neg)","4d3e8dbe":"for i, item in enumerate(train_dataset):\n    print(item)\n    if i == 10:\n        break","7ac14bbd":"def collate_fn_sentiment(samples):\n    input_ids, labels = zip(*samples)\n    max_len = max(len(input_id) for input_id in input_ids)\n    sorted_indices = np.argsort([len(input_id) for input_id in input_ids])[::-1]\n\n    input_ids = pad_sequence([torch.tensor(input_ids[index]) for index in sorted_indices],\n                             batch_first=True)\n    attention_mask = torch.tensor(\n        [[1] * len(input_ids[index]) + [0] * (max_len - len(input_ids[index])) for index in\n         sorted_indices])\n    token_type_ids = torch.tensor([[0] * len(input_ids[index]) for index in sorted_indices])\n    position_ids = torch.tensor([list(range(len(input_ids[index]))) for index in sorted_indices])\n    labels = torch.tensor(np.stack(labels, axis=0)[sorted_indices])\n\n    return input_ids, attention_mask, token_type_ids, position_ids, labels","dd911a35":"train_batch_size=64\neval_batch_size=64\n\ntrain_loader = torch.utils.data.DataLoader(train_dataset,\n                                           batch_size=train_batch_size,\n                                           shuffle=True, collate_fn=collate_fn_sentiment,\n                                           pin_memory=True, num_workers=4)\ndev_loader = torch.utils.data.DataLoader(dev_dataset, batch_size=eval_batch_size,\n                                         shuffle=False, collate_fn=collate_fn_sentiment,\n                                         num_workers=2)","a98070ee":"# random seed\nrandom_seed=42\nnp.random.seed(random_seed)\ntorch.manual_seed(random_seed)\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased')\nmodel.to(device)","3b392013":"model.train()\nlearning_rate = 5e-5\noptimizer = AdamW(model.parameters(), lr=learning_rate)","976c60dc":"def compute_acc(predictions, target_labels):\n    return (np.array(predictions) == np.array(target_labels)).mean()","3b23790d":"train_epoch = 1\nlowest_valid_loss = 9999.\nfor epoch in range(train_epoch):\n    with tqdm(train_loader, unit=\"batch\") as tepoch:\n        for iteration, (input_ids, attention_mask, token_type_ids, position_ids, labels) in enumerate(tepoch):\n            tepoch.set_description(f\"Epoch {epoch}\")\n            input_ids = input_ids.to(device)\n            attention_mask = attention_mask.to(device)\n            token_type_ids = token_type_ids.to(device)\n            position_ids = position_ids.to(device)\n            labels = labels.to(device, dtype=torch.long)\n\n            optimizer.zero_grad()\n\n            output = model(input_ids=input_ids,\n                           attention_mask=attention_mask,\n                           token_type_ids=token_type_ids,\n                           position_ids=position_ids,\n                           labels=labels)\n\n            loss = output.loss\n            loss.backward()\n\n            optimizer.step()\n\n            tepoch.set_postfix(loss=loss.item())\n            if iteration != 0 and iteration % int(len(train_loader) \/ 5) == 0:\n                # Evaluate the model five times per epoch\n                with torch.no_grad():\n                    model.eval()\n                    valid_losses = []\n                    predictions = []\n                    target_labels = []\n                    for input_ids, attention_mask, token_type_ids, position_ids, labels in tqdm(dev_loader,\n                                                                                                desc='Eval',\n                                                                                                position=1,\n                                                                                                leave=None):\n                        input_ids = input_ids.to(device)\n                        attention_mask = attention_mask.to(device)\n                        token_type_ids = token_type_ids.to(device)\n                        position_ids = position_ids.to(device)\n                        labels = labels.to(device, dtype=torch.long)\n\n                        output = model(input_ids=input_ids,\n                                       attention_mask=attention_mask,\n                                       token_type_ids=token_type_ids,\n                                       position_ids=position_ids,\n                                       labels=labels)\n\n                        logits = output.logits\n                        loss = output.loss\n                        valid_losses.append(loss.item())\n\n                        batch_predictions = [0 if example[0] > example[1] else 1 for example in logits]\n                        batch_labels = [int(example) for example in labels]\n\n                        predictions += batch_predictions\n                        target_labels += batch_labels\n\n                acc = compute_acc(predictions, target_labels)\n                valid_loss = sum(valid_losses) \/ len(valid_losses)\n                if lowest_valid_loss > valid_loss:\n                    print('Acc for model which have lower valid loss: ', acc)","f43e32d1":"import pandas as pd\ntest_df = pd.read_csv('..\/input\/goormtextclassificationproject\/test_no_label.csv')","c9343063":"test_dataset = test_df['Id']","020ed95c":"def make_id_file_test(tokenizer, test_dataset):\n    data_strings = []\n    id_file_data = [tokenizer.encode(sent.lower()) for sent in test_dataset]\n    for item in id_file_data:\n        data_strings.append(' '.join([str(k) for k in item]))\n    return data_strings","7eb95b98":"test = make_id_file_test(tokenizer, test_dataset)","2fb1a375":"test[:10]","69f27c76":"class SentimentTestDataset(object):\n    def __init__(self, tokenizer, test):\n        self.tokenizer = tokenizer\n        self.data = []\n\n        for sent in test:\n            self.data += [self._cast_to_int(sent.strip().split())]\n\n    def _cast_to_int(self, sample):\n        return [int(word_id) for word_id in sample]\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, index):\n        sample = self.data[index]\n        return np.array(sample)","b0a4cbf8":"test_dataset = SentimentTestDataset(tokenizer, test)","effceb9b":"def collate_fn_sentiment_test(samples):\n    input_ids = samples\n    max_len = max(len(input_id) for input_id in input_ids)\n    sorted_indices = np.argsort([len(input_id) for input_id in input_ids])[::-1]\n\n    input_ids = pad_sequence([torch.tensor(input_ids[index]) for index in sorted_indices],\n                             batch_first=True)\n    attention_mask = torch.tensor(\n        [[1] * len(input_ids[index]) + [0] * (max_len - len(input_ids[index])) for index in\n         sorted_indices])\n    token_type_ids = torch.tensor([[0] * len(input_ids[index]) for index in sorted_indices])\n    position_ids = torch.tensor([list(range(len(input_ids[index]))) for index in sorted_indices])\n\n    return input_ids, attention_mask, token_type_ids, position_ids","c638430d":"test_batch_size = 32\ntest_loader = torch.utils.data.DataLoader(test_dataset, batch_size=test_batch_size,\n                                          shuffle=False, collate_fn=collate_fn_sentiment_test,\n                                          num_workers=2)","7e836c65":"with torch.no_grad():\n    model.eval()\n    predictions = []\n    for input_ids, attention_mask, token_type_ids, position_ids in tqdm(test_loader,\n                                                                        desc='Test',\n                                                                        position=1,\n                                                                        leave=None):\n        input_ids = input_ids.to(device)\n        attention_mask = attention_mask.to(device)\n        token_type_ids = token_type_ids.to(device)\n        position_ids = position_ids.to(device)\n\n        output = model(input_ids=input_ids,\n                       attention_mask=attention_mask,\n                       token_type_ids=token_type_ids,\n                       position_ids=position_ids)\n\n        logits = output.logits\n        batch_predictions = [0 if example[0] > example[1] else 1 for example in logits]\n        predictions += batch_predictions","c4a2ab38":"test_df['Category'] = predictions","7810deab":"test_df.to_csv('submission.csv', index=False)","6ce1d9c0":"# 1. Preprocess","5f9a3d40":"# Import requirements"}}