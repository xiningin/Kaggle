{"cell_type":{"92f00685":"code","26db876f":"code","9aa9d172":"code","e4c51af3":"code","4ada9249":"code","f387ce53":"code","be9ffb0b":"code","750b6f4e":"code","d3d267f8":"code","890bf2e5":"code","f8871dbf":"code","d9c7dda6":"code","48c71d99":"code","6ba2011e":"code","1800c541":"code","23cdee7f":"code","dc37b881":"markdown","5aea4f81":"markdown","9558302f":"markdown","e571d21e":"markdown","707b308a":"markdown","dee0bc9a":"markdown","4f7805b0":"markdown","fcf0c166":"markdown","5fcf706a":"markdown","8fba55ac":"markdown","3cfaf366":"markdown","e4c51a41":"markdown","739b25e8":"markdown","5f2af05b":"markdown"},"source":{"92f00685":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","26db876f":"df = pd.read_csv('..\/input\/random-dataset\/data.csv')\ndf.head()","9aa9d172":"df.isnull().sum()","e4c51af3":"df.shape","4ada9249":"X = pd.DataFrame(df.iloc[:, 0:1])\ny = pd.DataFrame(df.iloc[:, 1:2])","f387ce53":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 1)","be9ffb0b":"X_train.shape","750b6f4e":"model = Sequential()\nmodel.add(Dense(400, input_dim=1, activation='relu'))\nmodel.add(Dense(200, input_dim=200, activation='relu'))\nmodel.add(Dense(200, input_dim=200, activation='relu'))\nmodel.add(Dense(1, activation='linear'))","d3d267f8":"keras.optimizers.Adam(lr=0.0001, beta_1=0.9, beta_2=0.999, amsgrad=False)\nmodel.compile(loss='mean_squared_error', optimizer='RMSprop', metrics=['mean_absolute_percentage_error'])","890bf2e5":"model.summary()","f8871dbf":"history = model.fit(X_train, y_train, epochs=500, batch_size=32,validation_split=0.15,validation_data=None,verbose=1)","d9c7dda6":"keras.backend.clear_session()","48c71d99":"y_pred = model.predict(X_test)","6ba2011e":"dfff = pd.DataFrame(np.c_[y_test, y_pred], columns = ['Actual', 'Predicted'])","1800c541":"dfff.head()","23cdee7f":"plt.plot(dfff['Actual'], color = 'Black', label = 'Actual')\nplt.plot(dfff['Predicted'], color = 'Red', label = 'Predicted', alpha = 0.6)\nplt.legend()\n\nplt.show()","dc37b881":"<br\/>\n\n## Sequential model build up through Keras\nmodel.add(Dense(400.... - There will be 400 neurons in a single layer  \ninput_dim = 1 - At a time there will entry one variable only  \n<br\/>\n\nmodel.add(Dense(1...... - As we will be predicting single value, in the last layer, there will be only one neuron.  \nactivation='linear' - For a regression problem, the last activation will always be 'linear'.  ","5aea4f81":"## Checking out if there are any missing values\nLuckily no missing vales has been found!","9558302f":"## Model summary\nfrom the summary we can see that there are three dense layers and the last layer is our expected output layer.","e571d21e":"<br\/>\n\n## Now time to train our data as well as model","707b308a":"## Load the dataset\nI think it's not a real world dataset and has any meaning. It's just created for practice purpose.\n<br\/>\n\nSource: [Dataset](https:\/\/github.com\/ShantanuVidwans\/sequential_regression_model\/blob\/master\/data.csv)","dee0bc9a":"<br\/>\n\n## Split into explanatory and response variable","4f7805b0":"<br\/>\n\n## Creating a pandas dataframe with the actual and predicted values","fcf0c166":"<br\/>\n\n## Clear Session\nIf we want to change something regarding model layers, first we will have to clear the previous session. Only after that the change will be worked out.","5fcf706a":"<br\/>\n\n## Plot the actual and predicted values","8fba55ac":"<br\/>\n\n## Split into train and test","3cfaf366":"<br\/>\n\n## Fitting the model","e4c51a41":"## Prediction","739b25e8":"## Shape of the dataset\nNumber of observations = 300  \nnumber of variables = 2","5f2af05b":"## Importing necessary libraries"}}