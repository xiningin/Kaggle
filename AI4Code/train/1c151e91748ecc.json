{"cell_type":{"2c66fa81":"code","d33cc005":"code","239d1cfb":"code","fa8e1092":"code","de36208a":"code","45e8d065":"code","82281cbb":"code","fe3f541e":"code","89e67146":"code","dd24d277":"code","77df6ddd":"code","7cac5fe6":"code","34b8f707":"code","9d500798":"code","b9f247de":"code","60f91eba":"code","0da8760a":"code","a45a6e86":"code","f99f03b8":"markdown","dda28655":"markdown","e428e856":"markdown","1a31b82f":"markdown","9a426fb7":"markdown","0bd24e57":"markdown","bc61c4bc":"markdown","e95ca178":"markdown","2a07aa90":"markdown","576f255c":"markdown"},"source":{"2c66fa81":"# Add the timm pytorch image model library from which we can extract CSPNet\nimport sys\nsys.path.append('..\/input\/timm-pytorch-image-models\/pytorch-image-models-master')\nimport timm","d33cc005":"# Software library written for data manipulation and analysis.\nimport pandas as pd\n\n# Python library to interact with the file system.\nimport os\n\n# Python library for image augmentation\nimport albumentations as A\n\n# fastai library for computer vision tasks\nfrom fastai.vision.all import *\n\n# Developing and training neural network based deep learning models.\nimport torch\nfrom torch import nn","239d1cfb":"# Define path to dataset, whose benefit is that this sample is more balanced than original train data.\npath = Path('..\/input\/hpa-cell-tiles-sample-balanced-dataset')","fa8e1092":"df = pd.read_csv(path\/'cell_df.csv')\ndf.head()","de36208a":"# extract the the total number of target labels\nlabels = [str(i) for i in range(19)]\nfor x in labels: df[x] = df['image_labels'].apply(lambda r: int(x in r.split('|')))","45e8d065":"# Here a sample of the dataset has been taken, change frac to 1 to train the entire dataset!\ndfs = df.sample(frac=0.1, random_state=42)\ndfs = dfs.reset_index(drop=True)\nlen(dfs)","82281cbb":"# obtain the input images.\ndef get_x(r): \n    return path\/'cells'\/(r['image_id']+'_'+str(r['cell_id'])+'.jpg')\n\n# obtain the targets.\ndef get_y(r): \n    return r['image_labels'].split('|')","fe3f541e":"'''AlbumentationsTransform will perform different transforms over both\n   the training and validation datasets ''' \nclass AlbumentationsTransform(RandTransform):\n    \n    '''split_idx is None, which allows for us to say when we're setting our split_idx.\n       We set an order to 2 which means any resize operations are done first before our new transform. '''\n    split_idx, order = None, 2\n    \n    def __init__(self, train_aug, valid_aug): store_attr()\n    \n    # Inherit from RandTransform, allows for us to set that split_idx in our before_call.\n    def before_call(self, b, split_idx):\n        self.idx = split_idx\n    \n    # If split_idx is 0, run the trainining augmentation, otherwise run the validation augmentation. \n    def encodes(self, img: PILImage):\n        if self.idx == 0:\n            aug_img = self.train_aug(image=np.array(img))['image']\n        else:\n            aug_img = self.valid_aug(image=np.array(img))['image']\n        return PILImage.create(aug_img)","89e67146":"def get_train_aug(size): \n    \n    return A.Compose([\n            # allows to combine RandomCrop and RandomScale\n            A.RandomResizedCrop(size,size),\n            \n            # Transpose the input by swapping rows and columns.\n            A.Transpose(p=0.5),\n        \n            # Flip the input horizontally around the y-axis.\n            A.HorizontalFlip(p=0.5),\n        \n            # Flip the input horizontally around the x-axis.\n            A.VerticalFlip(p=0.5),\n        \n            # Randomly apply affine transforms: translate, scale and rotate the input.\n            A.ShiftScaleRotate(p=0.5),\n        \n            # Randomly change hue, saturation and value of the input image.\n            A.HueSaturationValue(hue_shift_limit=0.2, sat_shift_limit=0.2, val_shift_limit=0.2, p=0.5),\n        \n            # Randomly change brightness and contrast of the input image.\n            A.RandomBrightnessContrast(brightness_limit=(-0.1,0.1), contrast_limit=(-0.1, 0.1), p=0.5),\n        \n            # CoarseDropout of the rectangular regions in the image.\n            A.CoarseDropout(p=0.5),\n        \n            # CoarseDropout of the square regions in the image.\n            A.Cutout(p=0.5) ])\n\ndef get_valid_aug(size): \n    \n    return A.Compose([\n    # Crop the central part of the input.   \n    A.CenterCrop(size, size, p=1.),\n    \n    # Resize the input to the given height and width.    \n    A.Resize(size,size)], p=1.)","dd24d277":"'''The first step item_tfms resizes all the images to the same size (this happens on the CPU) \n   and then batch_tfms happens on the GPU for the entire batch of images. '''\n# Transforms we need to do for each image in the dataset\nitem_tfms = [Resize(224), AlbumentationsTransform(get_train_aug(224), get_valid_aug(224))]\n\n# Transforms that can take place on a batch of images\nbatch_tfms = [Normalize.from_stats(*imagenet_stats)]\n\nbs=6","77df6ddd":"dblock = DataBlock(blocks=(ImageBlock, MultiCategoryBlock(vocab=labels)), # multi-label target\n                splitter=RandomSplitter(seed=42), # split data into training and validation subsets.\n                get_x=get_x, # obtain the input images.\n                get_y=get_y,  # obtain the targets.\n                item_tfms=item_tfms,\n                batch_tfms=batch_tfms\n                )\n\ndls = dblock.dataloaders(dfs, bs=bs)","7cac5fe6":"# We can call show_batch() to see what a sample of a batch looks like.\ndls.show_batch()","34b8f707":"class CSPNetModel(nn.Module):\n    \n    def __init__(self, num_classes=19, model_name='cspresnext50', pretrained=True):\n        super(CSPNetModel, self).__init__()\n        self.model = timm.create_model(model_name, pretrained=pretrained)\n        self.model.head.fc = nn.Linear(self.model.head.fc.in_features, num_classes)\n        \n    def forward(self, x):\n        x = self.model(x)\n        return x\n    \nmodel = CSPNetModel()\n","9d500798":"# Group together some dls, a model, and metrics to handle training\nlearn = Learner(dls, model, metrics= accuracy_multi)","b9f247de":"# Choosing a good learning rate\nlearn.lr_find()","60f91eba":"# We can use the fine_tune function to train a model with this given learning rate\nlearn.fine_tune(9,0.0012022644514217973)","0da8760a":"# Plot training and validation losses.\nlearn.recorder.plot_loss()","a45a6e86":"# Interpretation methods for classification models.\ninterp = ClassificationInterpretation.from_learner(learn)\n\n# Show images in top_losses along with their prediction, actual, loss, and probability of actual class.\ninterp.plot_top_losses(5, nrows=5)","f99f03b8":"<html>\n<body>\n\n<p><font size=\"6\" color=\"dodgerblue\">\n\ud83d\udc4d\ud83c\udffb Upvote the notebook if you find it insightful!\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n","dda28655":"<html>\n<body>\n\n<p><font size=\"5\" color=\"darkmagenta\">\n\ud83d\udcdd Data Preprocessing\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n\n","e428e856":"<html>\n<body>\n\n<p><font size=\"5\" color=\"mediumvioletred\">\n\ud83c\udf8a That's it for today's review of one of the latest breakthroughs in Computer Vision!! \ud83c\udf8a<br><br>\n\ud83d\udd25 Let me know in the comments below if you would like me to explain the latest innovations in deep learning in notebooks like these with implementation in fastai or pytorch \ud83d\udd25\n    \n<\/font><\/p>\n<\/body>\n<\/html>","1a31b82f":"<html>\n<body>\n\n<p><font size=\"5\" color=\"orangered\">\n\ud83c\udfaf CSPNET: A NEW BACKBONE THAT CAN ENHANCE LEARNING CAPABILITY OF CNN\n    \n<\/font><\/p>\n<\/body>\n<\/html>","9a426fb7":"![](https:\/\/miro.medium.com\/max\/2814\/1*h1ouOibp3Ry7vj4r16cyVQ.png)\n\n<html>\n<body>\n\n<p><font size=\"5\" color=\"darkcyan\">\n\nNeural networks have enabled state-of-the-art approaches to achieve incredible results on computer vision tasks such as object detection. However, such success greatly relies on costly computation resources, which hinders people with cheap devices from appreciating the advanced technology. \n\nCross Stage Partial Network (CSPNet) help mitigate the problem that previous works require heavy inference computations from the network architecture perspective. This is attributed to the problem to the duplicate gradient information within network optimization. \n\nThe proposed network respect the variability of the gradients by integrating feature maps from the beginning and the end of a network stage, which, in our experiments, reduces computations by 20% with equivalent or even superior accuracy on the ImageNet dataset.\n\nThe CSPNet is easy to implement and general enough to cope with architectures based on ResNet, ResNeXt, and DenseNet\n\n\ud83d\udd25To find out more :- https:\/\/arxiv.org\/pdf\/1911.11929.pdf \ud83d\udd25\n\n<\/font><\/p>\n<\/body>\n<\/html>","0bd24e57":"<html>\n<body>\n\n<p><font size=\"6\" color=\"darkmagenta\">\n\u231b\ufe0fModel Definition\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n\n<html>\n<body>\n\n<p><font size=\"5\" color=\"darkcyan\">\n\ud83d\udee0Cross Stage Partial Network (CSPNet) \ud83d\udee0<br>\n    \nThe main purpose of designing CSPNet is to enable this architecture to achieve a richer gradient combination while reducing the amount of computation. This aim is achieved by partitioning feature map of the base layer into two parts and then merging them through a proposed cross-stage hierarchy. <br>\n    \nThe main concept is to make the gradient flow propagate through different network paths\nby splitting the gradient flow. In this way, we have confirmed that the propagated gradient information can have a large correlation difference by switching concatenation and transition steps. In addition, CSPNet can greatly reduce the amount of computation, and improve inference speed as well as accuracy. <br>\n\nThe proposed CSPNet deals with the following three problems: <br>\n    \n1) Strengthening learning ability of a CNN The accuracy of existing CNN is greatly degraded after lightweightening,so we CSPNet can maintain sufficient accuracy while being lightweightening.\nThe proposed CSPNet can be easily applied to ResNet, ResNeXt, and DenseNet. After applying CSPNet on the\nabove mentioned networks, the computation effort can be reduced from 10% to 20%, but it outperforms ResNet,\nResNeXt, DenseNet <br>\n\n2) Removing computational bottlenecks Too high a computational bottleneck will result in more cycles to complete the inference process, or some arithmetic units will often idle. Therefore, we hope we can evenly distribute the amount of computation at each layer in CNN so that we can effectively upgrade the utilization rate of each computation unit and thus reduce unnecessary energy consumption. <br>\n    \n3) Reducing memory costs The wafer fabrication cost of Dynamic Random-Access Memory (DRAM) is very expensive,\nand it also takes up a lot of space. If one can effectively reduce the memory cost, he\/she will greatly reduce the cost of ASIC. In addition, a small area wafer can be used in a variety of edge computing devices. In reducing the use of memory usage, CSPNet adopt cross-channel pooling to compress the feature maps during the feature pyramid generating process. \n    \n<\/font><\/p>\n<\/body>\n<\/html>\n\n","bc61c4bc":"<html>\n<body>\n\n<p><font size=\"5\" color=\"darkcyan\">\n\ud83d\udda8 Albumentations:\nAlbumentations is a Python library for image augmentation. Image augmentation is used in deep learning and computer vision tasks to increase the quality of trained models. The purpose of image augmentation is to create new training samples from the existing data.\n\nAlbumentations supports all common computer vision tasks such as classification, semantic segmentation, instance segmentation, object detection, and pose estimation.\nThe library provides a simple unified API to work with all data types: images (RBG-images, grayscale images, multispectral images), segmentation masks, bounding boxes, and keypoints.\nThe library contains more than 70 different augmentations to generate new training samples from the existing data.\nAlbumentations is fast.\n\nInstallation:- pip install -U albumentations\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n","e95ca178":"![](https:\/\/storage.googleapis.com\/groundai-web-prod\/media%2Fusers%2Fuser_299233%2Fproject_400509%2Fimages%2Ffig%2Fio.png)\n\n\n<html>\n<body>\n\n<p><font size=\"5\" color=\"darkcyan\">\n\ud83c\udf89 The above figure shows the size of each layer of ResNeXt50 and the proposed CSPResNeXt50. The\nCIO of the proposed CSPResNeXt (32.6M) is lower than that of the original ResNeXt50 (34.4M). In addition, the CSPResNeXt50 removes the bottleneck layers in the ResXBlock and maintains the same numbers of the input channel\nand the output channel and will have the most efficient computation when FLOPs are fixed. The low CIO and FLOPs enable our CSPResNeXt50 to outperform the vanilla ResNeXt50 by 22% in terms of computations.\n    \n<\/font><\/p>\n<\/body>\n<\/html>","2a07aa90":"<html>\n<body>\n\n<p><font size=\"5\" color=\"darkmagenta\">\n\ud83d\udc89 Data Loading\n\nMajor credits to [Darek K\u0142eczek](https:\/\/www.kaggle.com\/thedrcat) for providing this dataset!\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n","576f255c":"<html>\n<body>\n\n<p><font size=\"5\" color=\"darkmagenta\">\n\ud83e\ude83 Fetch the required libraries\n    \n<\/font><\/p>\n<\/body>\n<\/html>\n"}}