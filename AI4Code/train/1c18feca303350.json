{"cell_type":{"0dbb4555":"code","f38c5412":"code","39e5e5ed":"code","6dfd37bf":"code","8ef6ff31":"code","10aa42ea":"code","fb9955d6":"code","0735ca86":"code","fc13957c":"code","065ed2d0":"code","2add3750":"code","c7b5d93e":"code","77b874d5":"code","bc2a0f40":"code","d1094522":"code","65e6866f":"code","fa9f9a06":"code","350239cc":"code","0a02702e":"code","06d67557":"code","3ff923e8":"code","f6cca23d":"code","cdf4de72":"code","c9597e6f":"code","f648a5b7":"code","825bd74c":"code","1b643b74":"code","020079d4":"code","04f94c78":"code","65e03c53":"code","a5051489":"code","9e64ccd0":"code","4ce7b8bb":"code","3d8a7121":"code","246b395e":"code","6b387c2b":"markdown","678f5b44":"markdown","d755b87a":"markdown","32a45002":"markdown","22ae7c14":"markdown"},"source":{"0dbb4555":"import pandas as pd\nimport numpy as np\n\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import metrics\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, skew\nplt.rc(\"font\", size=14)\n\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n","f38c5412":"warnings.filterwarnings(\"ignore\")\nempData=pd.read_csv(r\"..\/input\/HR-Employee-Attrition.csv\",header=0)\n#empData.head()\nempData.shape\n","39e5e5ed":"print(list(empData.columns))","6dfd37bf":"empData.head()","8ef6ff31":"#empData.drop(['EmployeeNumber'],axis=1,inplace=True)\n#Dropped Emp Number, which is not required for analysis","10aa42ea":"empData.describe().T","fb9955d6":"empData.columns.groupby(empData.dtypes)","0735ca86":"empData.info()","fc13957c":"\nisnaa=empData.isna().sum()\nisnaa\n\n\n","065ed2d0":"empData.duplicated().sum()","2add3750":"\"\"\"\n(mu, sigma) = norm.fit(empData.loc[empData['Attrition'] == 'Yes', 'Age'])\nprint(\"Ave age of emp left the organization : \",mu)\n(mu, sigma) = norm.fit(empData.loc[empData['Attrition'] == 'No', 'Age'])\nprint(\"Ave age of emp in the organization : \",mu)\n\"\"\"","c7b5d93e":"empData['EducationField'].unique()\n","77b874d5":"ed_field=empData['EducationField'].unique()\ned_field\nfor i in ed_field:\n    ratio = empData.loc[empData['EducationField'] == i,'Attrition'].shape[0]\/empData.loc[empData['Attrition'] == 'Yes'].shape[0]\n    print(\"Attrition Rate for EduField {0}:\\t {1}\".format(i,ratio))","bc2a0f40":"#empData.Gender.value_counts()\ned_field=empData['Gender'].unique()\ned_field\nfor i in ed_field:\n    ratio = (empData.loc[empData['Gender'] == i,'Attrition'].shape[0])\/(empData.loc[empData['Attrition'] == 'Yes'].shape[0])\n    print(\"Attrition Rate for {0}: {1}\".format(i,ratio))\n    \n# Changing the Attrition Rate \nempDataAna = empData.copy()\nempDataAna['Target'] = empDataAna['Attrition'].apply(\n    lambda x: 0 if x == 'No' else 1)    \n\n\n\n","d1094522":"empData.head()","65e6866f":"empData['JobSatisfaction'].value_counts()\n\n\n\n\n#for i in empData['EnvironmentSatisfaction'].unique():\n    #ratio = df_HR[(df_HR['EnvironmentSatisfaction']==field)&(df_HR['Attrition']==\"Yes\")].shape[0] \/ df_HR[df_HR['EnvironmentSatisfaction']==field].shape[0]\n    #ratio = empData.loc[empData['EnvironmentSatisfaction'] == i ,empData['Attrition'] == 'Yes'].shape(0) \/ empData.loc[empData['EnvironmentSatisfaction'] == i].shape(0)\n    \n #   empData[empData['EnvironmentSatisfaction'] == i ,'Attrition'].shape(0)\n    \n    \n    \n    ","fa9f9a06":"empDataAna.columns","350239cc":"# Dropping columns which are not significant\nempDataAna = empDataAna.drop(['Attrition', 'EmployeeCount', 'EmployeeNumber', 'StandardHours','Over18'], axis=1)\nempDataAna.head()\n\n\n","0a02702e":"empDataAna.corr()['Target'].sort_values()","06d67557":"num_cols = empDataAna.select_dtypes(include = np.number)\na = num_cols[num_cols.columns].hist(bins=15, figsize=(15,35), layout=(9,3),color = 'blue',alpha=0.6)","3ff923e8":"cat_cols = empDataAna.select_dtypes(exclude=np.number)","f6cca23d":"\"\"\"\nfig, ax = plt.subplots(4, 2, figsize=(20, 20))\nfor variable, subplot in zip(cat_col, ax.flatten()):\n    sns.countplot(empDataAna[variable], ax=subplot,palette = 'Set3')\n    for label in subplot.get_xticklabels():\n        label.set_rotation(360)\nplt.tight_layout()\n\"\"\"","cdf4de72":"\"\"\"\ncorr = data.drop(columns=['StandardHours','EmployeeCount']).corr()\ncorr.style.background_gradient(cmap='YlGnBu')\n\"\"\"","c9597e6f":"print(\"Cat Columns --- {0} and Count ---- {1} \".format(cat_cols.columns,cat_cols.columns.shape[0]))\n\n","f648a5b7":"num_cols = empDataAna.select_dtypes(include = np.number)\nprint(\"Num Columns --- {0} and Count ---- {1} \".format(num_cols.columns,num_cols.columns.shape[0]))","825bd74c":"# ENCODING CAT COLUMNS...\ncat_col_encoded = pd.get_dummies(cat_cols)\ncat_col_encoded.head()","1b643b74":"empDatafin = pd.concat([num_cols,cat_col_encoded,],axis=1)\nempDatafin.head()\n\n","020079d4":"x = empDatafin.drop(columns='Target')\ny = empDatafin['Target']","04f94c78":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)\n\nmLogReg = LogisticRegression()\nmLogReg.fit(x_train, y_train)","65e03c53":"train_predict = mLogReg.predict(x_train)\nmetrics.confusion_matrix(y_train,train_predict)","a5051489":"metrics.accuracy_score(y_train,train_predict)","9e64ccd0":"test_predict = mLogReg.predict(x_test)\nmetrics.confusion_matrix(y_test,test_predict)","4ce7b8bb":"metrics.accuracy_score(y_test,test_predict)","3d8a7121":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_predict))","246b395e":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, mLogReg.predict(x_test))\nfpr, tpr, thresholds = roc_curve(y_test, mLogReg.predict_proba(x_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","6b387c2b":"**Basic Infering with plots**","678f5b44":"**ROC CURVE**","d755b87a":"Correlation Between Target and other variables","32a45002":"**ENCODING**","22ae7c14":"**ANALYSIS**"}}