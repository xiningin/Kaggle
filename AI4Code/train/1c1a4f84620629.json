{"cell_type":{"3c4ae596":"code","439d5d73":"code","e0803afc":"code","c0d8214e":"code","82aa3eb8":"code","90e0a77d":"code","49c8ca54":"code","91f16c35":"code","38c9e660":"code","6c9a26ae":"code","833dc80f":"markdown","1bf2b54a":"markdown","f3febb5b":"markdown","ba9f9d39":"markdown","e915d823":"markdown","8d13cfe6":"markdown","b4f165b2":"markdown","cbb37c62":"markdown","5852c67b":"markdown"},"source":{"3c4ae596":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex4 import *\nprint(\"Setup Complete\")","439d5d73":"# Import the train_test_split function and uncomment\nfrom sklearn.model_selection import train_test_split\n\n# fill in and uncomment\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# Check your answer\nstep_1.check()","e0803afc":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()\n","c0d8214e":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\niowa_model = DecisionTreeRegressor(random_state=1)\n\n# Fit iowa_model with the training data.\niowa_model.fit(train_X, train_y)\n\n# Check your answer\nstep_2.check()","82aa3eb8":"# step_2.hint()\n# step_2.solution()","90e0a77d":"# Predict with all validation observations\nval_predictions = iowa_model.predict(val_X)\n\n# Check your answer\nstep_3.check()","49c8ca54":"# step_3.hint()\n# step_3.solution()","91f16c35":"# print the top few validation predictions\nprint(iowa_model.predict(val_X.head()))\n# print the top few actual prices from validation data\nprint(val_y.head().tolist())","38c9e660":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_y, val_predictions)\n\n# uncomment following line to see the validation_mae\nprint(val_mae)\n\n# Check your answer\nstep_4.check()","6c9a26ae":"# step_4.hint()\n# step_4.solution()","833dc80f":"---\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum\/161285) to chat with other Learners.*","1bf2b54a":"**This notebook is an exercise in the [Introduction to Machine Learning](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning) course.  You can reference the tutorial at [this link](https:\/\/www.kaggle.com\/dansbecker\/model-validation).**\n\n---\n","f3febb5b":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","ba9f9d39":"## Step 3: Make Predictions with Validation data\n","e915d823":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","8d13cfe6":"Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use (and improve) this number in the next step.\n\n# Keep Going\n\nYou are ready for **[Underfitting and Overfitting](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting).**\n","b4f165b2":"Inspect your predictions and actual values from validation data.","cbb37c62":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off.","5852c67b":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n"}}