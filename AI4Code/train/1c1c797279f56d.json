{"cell_type":{"3948c9cd":"code","e1cef026":"code","6178fc5f":"code","6a041e4e":"code","31fc630d":"code","eb326905":"code","3298a32d":"code","b17cef4d":"code","a33e1817":"code","c48b5e92":"code","f3695025":"code","22a2a34b":"code","ddcfa114":"code","4d3f72e3":"code","8a1b405d":"code","aa837229":"code","f44f84bb":"code","7d3413a5":"code","48f8da85":"code","048f27e8":"code","cbf636a6":"code","e6875689":"code","953e799f":"code","395ccae5":"code","f80dc08e":"code","b85688ea":"code","b3746b2d":"code","339b9330":"code","dbaa5500":"code","4aa66f9b":"code","8757504a":"code","0c670e39":"code","23a27546":"code","25d7a4fb":"code","77e464d8":"code","6462dfc5":"code","e3091ad5":"code","1b7b9e02":"code","9155f470":"code","8bdc8479":"code","6e234aab":"code","66707e91":"code","dae98615":"code","e1a301d6":"code","cd4afd19":"code","2bffb922":"code","88ed4ab4":"code","1d29a025":"code","a9015904":"code","714012f6":"code","f3da17d6":"code","3c524e20":"code","a337d08a":"code","8d46acf5":"code","c1b30fb0":"code","ba3cb7bd":"code","2e786709":"code","722eb01e":"code","38ee4eb4":"markdown"},"source":{"3948c9cd":" #...  I analyzed the data and built a prediction model with Tensorflow ... ","e1cef026":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sbn\nimport numpy as np","6178fc5f":"dataFrame = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/merc.csv\")","6a041e4e":"dataFrame.head()   # mil per galon   --> mpg","31fc630d":"# -- There are 6 features ","eb326905":"dataFrame.describe()","3298a32d":"# check null rows \ndataFrame.isnull().sum()    ","b17cef4d":"# graphical analysis\nplt.figure(figsize = (10,5))\nsbn.distplot(dataFrame[\"price\"])","a33e1817":"# Delete values that are far from the average distribution\nplt.figure(figsize = (15,5))\nsbn.countplot(dataFrame[\"year\"])","c48b5e92":"#  correlation\ndataFrame.corr()","f3695025":"#for only price \ndataFrame.corr()[\"price\"].sort_values()","22a2a34b":"sbn.scatterplot(x=\"year\" , y=\"price\", data=dataFrame)","ddcfa114":"sbn.scatterplot(x=\"mileage\" , y=\"price\", data=dataFrame)","4d3f72e3":"sbn.scatterplot(x=\"mpg\" , y=\"price\", data=dataFrame)","8a1b405d":"# most expensive cars\ndataFrame.sort_values(\"price\",ascending = False).head(20)","aa837229":" # cheap\ndataFrame.sort_values(\"price\",ascending = True).head(20)","f44f84bb":"len(dataFrame)","7d3413a5":"# There are 13119 rows in my dataFrame . to get rid of outliers i will use %99 of the data.\n # i ll delete %1 of rows (outliers)\nlen(dataFrame) * 0.01","48f8da85":"#  select rows after the first 131 rows with price descending\nnewDataFrame = dataFrame.sort_values(\"price\",  ascending= False ).iloc[131 : ]","048f27e8":"newDataFrame.describe()","cbf636a6":"plt.figure(figsize = (10,5))\nsbn.distplot(newDataFrame[\"price\"])","e6875689":"dataFrame.groupby(\"year\").mean()[\"price\"]","953e799f":"# We can see that 1970 has an outlier price mean. It may be a special car but it will negatively affect\n# our model. That's why I prefer to delete","395ccae5":"newDataFrame = newDataFrame[newDataFrame.year != 1970]\nnewDataFrame","f80dc08e":"newDataFrame.groupby(\"year\").mean()[\"price\"]","b85688ea":"newDataFrame.head()","b3746b2d":"newDataFrame = newDataFrame.drop(\"transmission\",axis =1)     # drop non numeric values\n\nnewDataFrame = newDataFrame.drop(\"model\", axis =1) \nnewDataFrame = newDataFrame.drop(\"fuelType\", axis =1) \n\nnewDataFrame","339b9330":"y  = newDataFrame[\"price\"].values\nx = newDataFrame.drop(\"price\",axis = 1).values \n# because if we drop the price, only features will remain","dbaa5500":"y","4aa66f9b":"x","8757504a":"from sklearn.model_selection import train_test_split","0c670e39":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 10)","23a27546":"len(x_train)","25d7a4fb":"len(x_test)","77e464d8":"from sklearn.preprocessing import MinMaxScaler\n","6462dfc5":"\nscaler =MinMaxScaler ()","e3091ad5":"x_train = scaler.fit_transform(x_train)","1b7b9e02":"x_test = scaler.fit_transform(x_test)","9155f470":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","8bdc8479":"x_train.shape","6e234aab":"model = Sequential ()","66707e91":"model.add(Dense(12,activation =\"relu\"))\nmodel.add(Dense(12,activation =\"relu\"))\nmodel.add(Dense(12,activation =\"relu\"))\nmodel.add(Dense(12,activation =\"relu\"))\n\nmodel.add(Dense(1))\n\nmodel.compile(optimizer =\"adam\", loss =\"mse\")","dae98615":"model.fit(x =x_train, y = y_train , validation_data = (x_test,y_test) , batch_size = 250, epochs = 300  )","e1a301d6":"lossData = pd.DataFrame(model.history.history)\n\nlossData.head()\n","cd4afd19":"lossData.plot()","2bffb922":"from sklearn.metrics import mean_squared_error , mean_absolute_error","88ed4ab4":"predictions = model.predict(x_test)","1d29a025":"predictions","a9015904":"mean_absolute_error(y_test,predictions)      # mean difference between predict and actual value","714012f6":"plt.scatter(y_test,predictions)\nplt.plot (y_test,y_test,\"r-*\")","f3da17d6":"newDataFrame.iloc[10]","3c524e20":"#test model , drop a real value and predict it ","a337d08a":"newCarDF  = newDataFrame.drop(\"price\",axis =1).iloc[10]","8d46acf5":"newCarDF","c1b30fb0":"newCarDF = scaler.transform(newCarDF.values.reshape(-1,5))","ba3cb7bd":"model.predict(newCarDF)","2e786709":"newCarDF","722eb01e":"# You saw the real price of the car then I deleted it and the model predicted \n# Compare the actual and predicted price and correct this model if you find it failing :)\n#","38ee4eb4":"**MODEL**"}}