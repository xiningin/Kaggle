{"cell_type":{"9be13e51":"code","c89fdabf":"code","38e39f1e":"code","eb7bce59":"code","147ca765":"code","53eea138":"markdown","6365ebfb":"markdown","400fa1ea":"markdown","ce257cd2":"markdown","8620c33a":"markdown","a2b80e23":"markdown"},"source":{"9be13e51":"from functools import partial\nfrom hyperopt import fmin, tpe, hp, STATUS_OK, space_eval\n\n\nclass DamageBonus:\n    def __init__(self, normal=0, charged=0, burst=0, elemental_geo=0, elemental_cyro=0, elemental_pyro=0,\n                 elemental_hydro=0, elemental_anemo=0, elemental_electro=0,\n                 physical=0, overall=0, crit_rate=0, crit_dmg=0, flat_atk=0, percentage_atk=0,\n                 is_gladiator=False, is_wanderer=False):\n        self.normal = normal\n        self.charged = charged\n        self.burst = burst\n        self.elemental_geo = elemental_geo\n        self.elemental_pyro = elemental_pyro\n        self.elemental_hydro = elemental_hydro\n        self.elemental_cyro = elemental_cyro\n        self.elemental_anemo = elemental_anemo\n        self.elemental_electro = elemental_electro\n        self.physical = physical\n        self.overall = overall\n        self.crit_rate = crit_rate\n        self.crit_dmg = crit_dmg\n        self.flat_atk = flat_atk\n        self.percentage_atk = percentage_atk\n        self.is_gladiator = is_gladiator\n        self.is_wanderer = is_wanderer\n\n    def get_stats(self):\n        return dict(normal=self.normal,\n                    charged=self.charged,\n                    burst=self.burst,\n                    elemental_geo=self.elemental_geo,\n                    elemental_pyro=self.elemental_pyro,\n                    elemental_cyro=self.elemental_cyro,\n                    elemental_anemo=self.elemental_anemo,\n                    elemental_hydro=self.elemental_hydro,\n                    elemental_electro=self.elemental_electro,\n                    physical=self.physical,\n                    crit_rate=self.crit_rate,\n                    crit_dmg=self.crit_dmg,\n                    flat_atk=self.flat_atk,\n                    percentage_atk=self.percentage_atk,\n                    is_gladiator=self.is_gladiator,\n                    is_wanderer=self.is_wanderer)\n\n\nclass BaseArtifact:\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0):\n        self.artifact_set = artifact_set\n        self.crit_rate = crit_rate\n        self.crit_dmg = crit_dmg\n        self.flat_atk = flat_atk\n        self.percentage_atk = percentage_atk\n\n    def get_stats(self):\n        return dict(artifact_set=self.artifact_set,\n                    crit_rate=self.crit_rate,\n                    crit_dmg=self.crit_dmg,\n                    flat_atk=self.flat_atk,\n                    percentage_atk=self.percentage_atk)\n\n    def __repr__(self):\n        return str(self.get_stats())\n\n\nclass Sand(BaseArtifact):\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0):\n        super().__init__(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk)\n\n\nclass Circlet(BaseArtifact):\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0):\n        super().__init__(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk)\n\n\nclass Goblet(BaseArtifact):\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0, elemental_geo=0, elemental_cyro=0, elemental_pyro=0,\n                 elemental_hydro=0, elemental_anemo=0, elemental_electro=0,\n                 physical=0):\n        super().__init__(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk)\n        self.elemental_geo = elemental_geo\n        self.elemental_pyro = elemental_pyro\n        self.elemental_hydro = elemental_hydro\n        self.elemental_cyro = elemental_cyro\n        self.elemental_anemo = elemental_anemo\n        self.elemental_electro = elemental_electro\n        self.physical = physical\n\n    def get_stats(self):\n        return dict(artifact_set=self.artifact_set,\n                    crit_rate=self.crit_rate,\n                    crit_dmg=self.crit_dmg,\n                    flat_atk=self.flat_atk,\n                    percentage_atk=self.percentage_atk,\n                    elemental_geo=self.elemental_geo,\n                    elemental_pyro=self.elemental_pyro,\n                    elemental_cyro=self.elemental_cyro,\n                    elemental_anemo=self.elemental_anemo,\n                    elemental_hydro=self.elemental_hydro,\n                    elemental_electro=self.elemental_electro,\n                    physical=self.physical)\n\n\nclass Flower(BaseArtifact):\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0):\n        super().__init__(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk)\n\n\nclass Feather(BaseArtifact):\n    def __init__(self, artifact_set, crit_rate=0, crit_dmg=0,\n                 flat_atk=0, percentage_atk=0):\n        super().__init__(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk)\n\n\nArtifactSets = {\n    \"Bloodstained Chivary\": {2: DamageBonus(physical=25), 4: None},\n    \"Gladiator's Finale\": {2: DamageBonus(percentage_atk=18), 4: DamageBonus(normal=35, is_gladiator=True)},\n    \"Wanderer's Troupe\": {2: None, 4: DamageBonus(charged=35, is_wanderer=True)},\n    \"Thundering Fury\": {2: DamageBonus(elemental_electro=15), 4: None},\n    \"Viridescent Venerer\": {2: DamageBonus(elemental_anemo=15), 4: None},\n    \"Archaic Petra\": {2: DamageBonus(elemental_geo=15), 4: None},\n    \"Crimson Witch Of Flames\": {2: DamageBonus(elemental_pyro=15), 4: DamageBonus(elemental_pyro=22.5)},\n    \"Noblesse Oblige\": {2: DamageBonus(burst=20), 4: DamageBonus(percentage_atk=20)},\n    \"Blizzard Strayer\": {2: DamageBonus(elemental_cyro=15), 4: DamageBonus(crit_rate=20)},\n    \"Heart Of Depth\": {2: DamageBonus(elemental_hydro=15), 4: DamageBonus(normal=30, charged=30)},\n    \"Retracing Boilde\": {2: None, 4: DamageBonus(overall=40)},\n    \"Thunder Soother\": {2: None, 4: DamageBonus(overall=35)},\n    \"Lava Walker\": {2: None, 4: DamageBonus(overall=35)}\n}","c89fdabf":"SANDS = [\n    Sand(\"Noblesse Oblige\", crit_dmg=26.4, flat_atk=35, percentage_atk=46.6),\n    Sand(\"Gladiator's Finale\", crit_rate=6.2, flat_atk=29, percentage_atk=46.6),\n    Sand(\"Noblesse Oblige\", crit_rate=7),\n]\n\nFLOWERS = [\n    Flower(\"Gladiator's Finale\", crit_dmg=28.7, flat_atk=18),\n    Flower(\"Gladiator's Finale\", crit_rate=10.5, crit_dmg=7, percentage_atk=9.3),\n    Flower(\"Gladiator's Finale\", crit_rate=6.6, crit_dmg=14.8),\n    Flower(\"Noblesse Oblige\", crit_rate=6.6, crit_dmg=7)\n]\n\nFEATHERS = [\n    Feather(\"Gladiator's Finale\", crit_rate=2.7, crit_dmg=21.0, flat_atk=311),\n    Feather(\"Blizzard Strayer\", crit_dmg=13.2, flat_atk=311, percentage_atk=15.8),\n\n]\n\nGOBLETS = [\n    Goblet(\"Blizzard Strayer\", crit_dmg=13.2, flat_atk=33, percentage_atk=15.7, elemental_cyro=46.6),\n]\n\nCIRCLETS = [\n    Circlet(\"Blizzard Strayer\", crit_rate=31.1, crit_dmg=14.0, percentage_atk=9.9),\n    Circlet(\"Blizzard Strayer\", crit_rate=2.7, crit_dmg=62.2, flat_atk=19),\n    Circlet(\"Heart Of Depth\", crit_rate=13.2, crit_dmg=62.2, percentage_atk=9.3),\n    Circlet(\"Gladiator's Finale\", crit_rate=31.1, percentage_atk=15.7),\n    Circlet(\"Gladiator's Finale\", crit_rate=9.3, crit_dmg=62.2, percentage_atk=8.7),\n]","38e39f1e":"BASE_ATK = 311 + 608\nADDITIONAL_CRIT_RATE = 5 + 35\nADDITIONAL_CRIT_DMG = 50 + 38.4\nADDITIONAL_FLAT_ATK = 0\nADDITIONAL_PERCENTAGE_ATK = 49.6\nSKILL_MUL = 218 + 370\nADDITIONAL_NORMAL_DMG_BONUS = 0\nADDITIONAL_CHARGED_DMG_BONUS = 0\nADDITIONAL_BURST_DMG_BONUS = 0\nADDITIONAL_ELEMENTAL_DMG_BONUS = 0\nADDITIONAL_PHYSICAL_DMG_BONUS = 0\nADDITIONAL_OVERALL_DMG_BONUS = 0\nCAN_USE_WANDERER_4 = True\nCAN_USE_GLADIATOR_4 = False\nOBJECTIVE_TYPE = \"charged\"\nDMG_TYPE = \"cyro\"\nMAX_EVALS = 500","eb7bce59":"def objective(space, objective_type, dmg_type, can_use_wanderer_4, can_use_gladiator_4, evaluate=False):\n    dictionary = dict(crit_rate=0, crit_dmg=0, flat_atk=0, percentage_atk=0,\n                      normal=0, charged=0, burst=0, elemental_geo=0, elemental_cyro=0,\n                      elemental_hydro=0, elemental_pyro=0, elemental_anemo=0, elemental_electro=0, physical=0,\n                      overall=0,\n                      is_gladiator=False, is_wanderer=False)\n    artifact_sets = {}\n    for _, value in space.items():\n        for stat, number in value.get_stats().items():\n            if stat == \"artifact_set\":\n                if number not in artifact_sets:\n                    artifact_sets[number] = 1\n                else:\n                    artifact_sets[number] += 1\n            else:\n                dictionary[stat] += number\n\n    for name, cnt in artifact_sets.items():\n        if cnt > 1:\n            artifact = ArtifactSets.get(name)\n            if cnt >= 2:\n                dmg_bonus = artifact[2]\n                if dmg_bonus is not None:\n                    for key, value in dmg_bonus.get_stats().items():\n                        dictionary[key] += value\n            if cnt >= 4:\n                dmg_bonus = artifact[4]\n                if dmg_bonus is not None:\n                    for key, value in dmg_bonus.get_stats().items():\n                        if key == \"is_gladiator\" and value is True:\n                            dictionary[key] = True\n                        elif key == \"is_wanderer\" and value is True:\n                            dictionary[key] = True\n                        else:\n                            dictionary[key] += value\n\n    dictionary[\"crit_rate\"] += ADDITIONAL_CRIT_RATE\n    dictionary[\"crit_dmg\"] += ADDITIONAL_CRIT_DMG\n    dictionary[\"flat_atk\"] += ADDITIONAL_FLAT_ATK\n    dictionary[\"percentage_atk\"] += ADDITIONAL_PERCENTAGE_ATK\n    dictionary[\"normal\"] += ADDITIONAL_NORMAL_DMG_BONUS\n    dictionary[\"charged\"] += ADDITIONAL_CHARGED_DMG_BONUS\n    dictionary[\"burst\"] += ADDITIONAL_BURST_DMG_BONUS\n    if dmg_type != \"physical\":\n        dictionary[\"elemental_\" + dmg_type] += ADDITIONAL_ELEMENTAL_DMG_BONUS\n    else:\n        dictionary[\"physical\"] += ADDITIONAL_PHYSICAL_DMG_BONUS\n    dictionary[\"overall\"] += ADDITIONAL_OVERALL_DMG_BONUS\n\n    if not can_use_wanderer_4 and dictionary[\"is_wanderer\"]:\n        dictionary[\"charged\"] -= 35\n    if not can_use_gladiator_4 and dictionary[\"is_gladiator\"]:\n        dictionary[\"normal\"] -= 35\n\n    ATK = BASE_ATK * (1 + dictionary[\"percentage_atk\"] \/ 100) + dictionary[\"flat_atk\"]\n\n    WITH_CRIT = ATK * SKILL_MUL \/ 100 * dictionary[\"crit_rate\"] \/ 100 * (dictionary[\"crit_dmg\"] \/ 100 + 1)\n    WITHOUT_CRIT = ATK * SKILL_MUL \/ 100 * (1 - dictionary[\"crit_rate\"] \/ 100)\n\n    DMG_TYPE_DICT = {}\n    for x in [\"geo\", \"anemo\", \"hydro\", \"pyro\", \"cyro\", \"physical\"]:\n        DMG_TYPE_DICT[x] = dict(normal=0, charged=0, burst=0)\n    for dmg_type in [\"geo\", \"anemo\", \"hydro\", \"pyro\", \"cyro\", \"physical\"]:\n        for atk_type in [\"normal\", \"charged\", \"burst\"]:\n            AVERAGE_DMG = (WITH_CRIT + WITHOUT_CRIT) * (dictionary[objective_type] \/ 100 + 1)\n            DMG_TYPE_DICT[dmg_type][atk_type] = AVERAGE_DMG\n\n    if evaluate:\n        print(f\"ATK: {ATK}\")\n        print(f\"STATS: {dictionary}\\n\")\n        print(f\"ARTIFACT SETS: {artifact_sets}\")\n        print(f\"AVERAGE DMG: {DMG_TYPE_DICT[dmg_type][objective_type]}\")\n        return None\n\n    return {\"loss\": -DMG_TYPE_DICT[dmg_type][objective_type], \"status\": STATUS_OK}\n\n\nspace = {\n    \"Sand\": hp.choice(\"Sands\", SANDS),\n    \"Flower\": hp.choice(\"Flowers\", FLOWERS),\n    \"Feather\": hp.choice(\"Feathers\", FEATHERS),\n    \"Goblet\": hp.choice(\"Goblets\", GOBLETS),\n    \"Circlet\": hp.choice(\"Circlets\", CIRCLETS),\n}\n\nfn = partial(objective, objective_type=OBJECTIVE_TYPE, dmg_type=DMG_TYPE, can_use_wanderer_4=CAN_USE_WANDERER_4,\n             can_use_gladiator_4=CAN_USE_GLADIATOR_4, evaluate=False)\nbest_params = fmin(fn=fn, space=space, algo=tpe.suggest, max_evals=MAX_EVALS)","147ca765":"objective(space_eval(space, best_params), OBJECTIVE_TYPE, DMG_TYPE, \n          CAN_USE_WANDERER_4, CAN_USE_GLADIATOR_4, evaluate=True)\nprint(\"ARTIFACT DETAILS: \")\nfor i in space_eval(space, best_params).items():\n    print(i)","53eea138":"## Constants declaration\nDeclare additional numbers here:\n- `BASE_ATK`: Character's base ATK + Weapon ATK\n- `ADDITIONAL_CRIT_RATE`: additional crit rate (from resonance, talent, etc)\n- `ADDITIONAL_CRIT_DMG`: character's base crit dmg + ascension crit dmg\n- `ADDITIONAL_FLAT_ATK`: additional Flat ATK from other sources (Bennet's ultimate for example)\n- `ADDITIONAL_PERCENTAGE_ATK`: additional ATK from other sources (like weapon's 2nd substat)\n- `SKILL_MUL`: skill dmg multiplier that we want to evaluate\n- `ADDITIONAL_X_DMG_BONUS`: additional X dmg type bonus from other sources (resonance, etc.)\n- `CAN_USE_WANDERER_4`: boolean, `True` if character can use Wanderer 4 set effect (Charged atk for Catalyst\/Bow user), else `False`\n- `CAN_USE_GLADIATOR_4`: boolean, `True` if character can use Gladiator 4 set effect(Normal atk for GS, Spear, Sword user), else `False`\n- `OBJECTIVE_TYPE`: string, one in `[\"normal\", \"charged\", \"burst\"]`\n- `DMG_TYPE`: string, one in `[\"geo\", \"anemo\", \"electro\", \"hydro\", \"cyro\", \"pyro\", \"physical\"]`\n- `MAX_EVALS`: number of iterations to find. The higher the better, but remember if there are few artifact combinations, raising this one will not help.\n\nA template for Ganyu is provided below, lv80 with Ascension 6","6365ebfb":"## Artifact declaration\nThe Artifact follows this parameters:\n`Artifact(artifact_set, crit_rate, crit_dmg, flat_atk, percentage_atk, dmg_bonus)`\n\nFor example, we have a Blizzard Strayer (Cyro goblet), with 10% crit rate, 12% crit dmg, 35 flat atk, 5% percentage atk and 46.6% (cyro) dmg bonus, we will declare it as:\n\n`Goblet(artifact_set = \"Blizzard Strayer\", crit_rate = 10, crit_dmg = 12, flat_atk = 35, percentage_atk = 5, dmg_bonus = 46.6)`\n\nTo declare multiple artifacts, use:\n```python\nFLOWERS = [\n    Flower(\"Gladiator's Finale\", crit_dmg=28.7, flat_atk=18),\n    Flower(\"Gladiator's Finale\", crit_rate=10.5, crit_dmg=7, percentage_atk=9.3),\n    Flower(\"Gladiator's Finale\", crit_rate=6.6, crit_dmg=14.8),\n    Flower(\"Noblesse Oblige\", crit_rate=6.6, crit_dmg=7)\n]\n```\n\nA sample is provided below. Here is the list of artifact names for `Ctrl-V` purpose:\n```python\n\"Bloodstained Chivary\"\n\"Gladiator's Finale\"\n\"Wanderer's Troupe\"\n\"Thundering Fury\"\n\"Viridescent Venerer\"\n\"Archaic Petra\"\n\"Crimson Witch Of Flames\"\n\"Noblesse Oblige\"\n\"Blizzard Strayer\"\n\"Heart Of Depth\"\n\"Retracing Boilde\"\n\"Thunder Soother\"\n\"Lava Walker\"\n\nBloodstained Chivary\nGladiator's Finale\nWanderer's Troupe\nThundering Fury\nViridescent Venerer\nArchaic Petra\nCrimson Witch Of Flames\nNoblesse Oblige\nBlizzard Strayer\nHeart Of Depth\nRetracing Boilde\nThunder Soother\nLava Walker\n```","400fa1ea":"## Let's find it, just run the below 2 cells!","ce257cd2":"# GENSHIN IMPACT NAIVE BEST ARTIFACT COMBINATION FINDER\n## Author: AerysS#5558\n\n**Last update: 14\/02\/2021**\n\nI make a simple best artifact finder using naive DMG calculation by this formula:\n\n`AVERAGE_DMG = ATK * SKILL_MUL * CritRate * (1 + CritDMG) * (1 + DMGBonus) + ATK * SKILL_MUL * (1 - CritRate) * (1+ DMGBonus)`\n\nwhere:\n\n- `ATK`: Character's ATK (Base ATK + Additional ATK)\n\n- `SKILL_MUL`: skill damage multiplier\n\n- `DMGBonus`: Damage bonus from ascension and\/or sets. Calculates Normal, Charged and Burst separately depends on your objective.\n\nI use `hyperopt` to find the optimized result. However, if there are very few artifact combinations, it is the same as doing a Grid Search.\n\nLimits:\n- Does not check if the value range is right\n- Does not check character's dmg type. For example, if you find it for Ganyu, assume that we only care about the cyro dmg output, so DO NOT PUT PHYSICAL GOBLET HERE PLEASE!\n- Does not consider Elemental Mastery\n- Does not consider resistance reduction\n- Does not consider some (useless\/underwhelming\/hard to do) stats:\n    - Elemental reaction dmg (of every type)\n    - Bloodstained Chivary 4 set\n    - Viridescent Venerer 4 set\n    - Icebreaker 4 set additional 20% crit rate to frozen enemies. However this is customizable.","8620c33a":"## Get the results~!","a2b80e23":"## Helper functions, skip this"}}