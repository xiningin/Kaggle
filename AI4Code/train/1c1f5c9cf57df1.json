{"cell_type":{"f761ca03":"code","e67a9f27":"code","96957e6e":"code","f9ff059d":"code","a935802a":"code","2d04eda5":"code","3f9d279d":"code","2b3bd387":"code","9f09f51c":"code","bcc791e3":"code","ff4f30ff":"code","dde34bc5":"code","7ac26531":"code","e18777a0":"code","8b46d805":"code","70deced1":"code","fbe45e90":"markdown","7d377d91":"markdown","e8918669":"markdown","df92d70c":"markdown","dc6c88e3":"markdown"},"source":{"f761ca03":"import numpy as np\nimport pandas as pd","e67a9f27":"from sklearn.datasets import load_iris\niris = load_iris()","96957e6e":"data = pd.DataFrame(iris.data,columns = iris.feature_names)\ndata['species'] = iris.target\ndata.head()","f9ff059d":"data.species.unique()","a935802a":"X = data[['petal length (cm)','petal width (cm)']].values","2d04eda5":"data.species.values","3f9d279d":"y = (data.species.values == 0)","2b3bd387":"y","9f09f51c":"y = (data.species.values == 0).astype(np.int)","bcc791e3":"y","ff4f30ff":"from sklearn.linear_model import Perceptron","dde34bc5":"per = Perceptron(random_state = 42)\nper.fit(X,y)","7ac26531":"y_pred = per.predict(X)\ny_pred","e18777a0":"from sklearn import metrics\nmetrics.accuracy_score(y,y_pred)","8b46d805":"per.coef_","70deced1":"per.intercept_","fbe45e90":"**Next converting True into '1' and False into '0'**\n\n* 1 - setosa\n* 0 - not setosa","7d377d91":"### Categories\n* 0 setosa\n* 1 versicolor\n* 2 virgnica","e8918669":"As Perceptron divides this classifier by linear regression line, the coefficient and intercepts can be accessed.","df92d70c":"## Artificial Neural Network\n\nANN is a computational model based on the structure and functions of **Biological Neural Networks**. Information that flows through the network affects the structure of the ANN, because a Neural Network changes or learns, in a sense based on **Input** and **Ouput**.\n\nANN's are considered as nonlinear statistical data modelling tools where the Complex relationships between Inputs and Outputs are modelled\/patterns are found.\n\n### Perceptron\n\nA single Neuron is called **Perceptron**. It consists a layer of Inputs(those corresponding to columns of DataFrame). Each Input has weight which controls the magnitude of an input. The summation of products of these Input values and **weights** is fed to the desired activation function (say **sigmoid**).\n* **\n* **Activation function :** The functions that perform a transformation on the input recieved to scaled the values in a finite range. These activation functions are in Hidden layers and Output layers, not in Input layers since the values in Input layers are appropriately scaled ones.\n* **\n\n## A brief journey through application of Perceptron on Iris data","dc6c88e3":"**We are converting 'setosa' to True and rest 'versicolor','virgnica' to False.**"}}