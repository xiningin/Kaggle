{"cell_type":{"3df4a059":"code","6404a6bf":"code","e52dce29":"code","1a79213b":"code","58726ced":"code","24985cfe":"code","b3f94fa6":"code","d6d67ffe":"code","25cfc00e":"code","feb33558":"code","14dbde08":"code","73f3b890":"code","d2312f33":"code","8996c480":"code","e0034098":"code","37cb42e0":"code","1e5cbeaa":"code","5a81cb33":"code","b195fd57":"code","c724f4db":"code","1f8c6d92":"code","6d409e1f":"code","9163a7e3":"code","92684354":"code","0dd43519":"code","0fb336b8":"code","e23e6d77":"code","25de7f17":"code","2a0ef680":"code","6986d47b":"code","670e43a4":"code","308fcbda":"code","e40c6e30":"code","bccf3d6f":"code","6315569e":"code","6b94e4af":"code","13f4bd38":"code","4d4a1f95":"code","ac829c58":"code","2e51185e":"code","8d0bff89":"code","6a025d36":"code","30a79ba8":"code","c287f66b":"code","f329480a":"code","420f9963":"code","858303d9":"code","8fce2d42":"code","d4fe62ec":"code","24eeddc0":"code","eae06f1d":"code","021bc6af":"code","cee36f16":"code","fa410225":"code","473e418a":"code","e3382c4a":"code","5122df7c":"code","bf259801":"code","c4683614":"code","ff3179c7":"code","9a85faea":"code","45ef3657":"code","ae45dbe1":"code","ccbea763":"code","11d888fc":"code","56b9e5e6":"code","ead08275":"code","b2375a74":"code","17372d3e":"code","cbb0a46d":"code","34f1c00e":"code","21388513":"code","849123b1":"code","435a088c":"code","0b4faa17":"code","79825dfc":"code","45fbae9c":"code","989467f8":"code","2f0fa2c9":"code","3c98b08a":"code","9ba309ee":"code","38baa528":"code","c47bf356":"code","1ecc00a9":"code","2848227c":"code","28a0c7eb":"code","e0fc5884":"code","f3f4784e":"code","35e277a8":"code","30557085":"code","04a83163":"code","bc62e53a":"code","dd81ce48":"code","0408b33e":"markdown","5f3c3387":"markdown","9d929eb2":"markdown","a14e0aa6":"markdown","ce31b8ce":"markdown","d5741a43":"markdown","e6ea6f24":"markdown","16a6f3cf":"markdown","37fda850":"markdown","f9cc3b72":"markdown","b74e3f2d":"markdown","099cb350":"markdown","cdba2dcd":"markdown","6644ad7b":"markdown","d9ef6b83":"markdown","4c3c56c1":"markdown","219f0eba":"markdown","4c25eedd":"markdown","78f1da9f":"markdown","f212a516":"markdown","55638861":"markdown","6696e651":"markdown","68b43469":"markdown","52220ee4":"markdown","418f205c":"markdown","c07cb6bb":"markdown","7309fcb0":"markdown","ee5a2c0c":"markdown","35b34497":"markdown","f82e5e21":"markdown","fadd880e":"markdown","15053bcf":"markdown"},"source":{"3df4a059":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, cross_val_score,KFold,StratifiedKFold, GridSearchCV\nfrom sklearn.metrics import confusion_matrix,accuracy_score,f1_score,average_precision_score,recall_score,roc_auc_score\nfrom sklearn.preprocessing import RobustScaler,StandardScaler,LabelEncoder,MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest,chi2\n\nfrom keras.models import Sequential\nfrom keras.layers import Activation,BatchNormalization\nfrom keras.layers.core import Dense,Dropout\nfrom keras.optimizers import Adam\nfrom keras.metrics import categorical_crossentropy\nfrom keras.callbacks import ReduceLROnPlateau,EarlyStopping","6404a6bf":"dados = pd.read_csv('..\/input\/cardiovascular-disease-dataset\/cardio_train.csv',sep=';')","e52dce29":"dados.head()","1a79213b":"dados = dados.drop('id',axis=1)","58726ced":"dados.head()","24985cfe":"dados.duplicated().sum()","b3f94fa6":"dados = dados.drop_duplicates()","d6d67ffe":"dados['age'] = dados['age']\/365","25cfc00e":"dados.head()","feb33558":"dados.info()","14dbde08":"dados.isna().sum()","73f3b890":"dados['bmi'] = dados[\"weight\"]\/(dados[\"height\"]\/100)**2","d2312f33":"#number of columns\nnum_colunas = dados.shape[1]","8996c480":"corr = dados.corr()","e0034098":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, annot=True, linewidths=.5, fmt= '.1f',ax=ax)","37cb42e0":"dados = dados[(dados[\"ap_hi\"]<=250) & (dados[\"ap_lo\"]<=200)]\ndados = dados[(dados[\"ap_hi\"] >= 0) & (dados[\"ap_lo\"] >= 0)]","1e5cbeaa":"corr = dados.corr()\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, annot=True, linewidths=.5, fmt= '.1f',ax=ax)","5a81cb33":"sns.countplot(x='cardio',data=dados)","b195fd57":"fig,ax = plt.subplots(2,3,figsize=(13,5))\nsns.countplot(x='gender',data=dados,ax=ax[0][0])\nsns.countplot(x='cholesterol',data=dados,ax=ax[0][1])\nsns.countplot(x='smoke',data=dados,ax=ax[0][2])\nsns.countplot(x='gluc',data=dados,ax=ax[1][0])\nsns.countplot(x='alco',data=dados,ax=ax[1][1])\nsns.countplot(x='active',data=dados,ax=ax[1][2])\nplt.tight_layout()","c724f4db":"print(\"Maximum age = \",dados['age'].max())\nprint(\"Minimum age = \",dados['age'].min())","1f8c6d92":"print(\"Maximum height = \",dados['height'].max())\nprint(\"Minimum height = \",dados['height'].min())","6d409e1f":"print(\"Maximum ap_high = \",dados['ap_hi'].max())\nprint(\"Minimum ap_high = \",dados['ap_hi'].min())","9163a7e3":"print(\"Maximum ap_low = \",dados['ap_lo'].max())\nprint(\"Minimum ap_low = \",dados['ap_lo'].min())","92684354":"dados_norm = dados.copy()","0dd43519":"colunas_normalizar = ['ap_hi','ap_lo','age','height','weight']\n\ntipo_scaler = 'MinMax'\nif(tipo_scaler=='Standard'):\n    scaler = StandardScaler((0,1))\nelif(tipo_scaler=='Robust'):\n    scaler = RobustScaler()\nelif(tipo_scaler=='MinMax'):\n    scaler = MinMaxScaler(feature_range=(0, 1))\n\nfor col in colunas_normalizar:\n    dados_norm[col] = scaler.fit_transform(dados_norm[col].values.reshape(-1,1))","0fb336b8":"dados_norm.head()","e23e6d77":"fig,ax = plt.subplots(1,2,figsize=(13,5))\nsns.boxplot(y=dados_norm['ap_hi'],x=dados_norm['cardio'],ax=ax[0])\nsns.boxplot(y=dados_norm['ap_lo'],x=dados_norm['cardio'],ax=ax[1])\nplt.tight_layout()","25de7f17":"fig,ax = plt.subplots(1,3,figsize=(13,5))\nsns.boxplot(y=dados_norm['age'],x=dados_norm['cardio'],ax=ax[0])\nsns.boxplot(y=dados_norm['height'],x=dados_norm['cardio'],ax=ax[1])\nsns.boxplot(y=dados_norm['weight'],x=dados_norm['cardio'],ax=ax[2])\nplt.tight_layout()","2a0ef680":"def remover_outlier(dados,coluna_input,coluna_output,tipo):\n    dados_tmp = dados[dados[coluna_output]==tipo]\n    q25, q75 = np.percentile(dados_tmp[coluna_input], 25), np.percentile(dados_tmp[coluna_input], 75)\n    iqr = q75 - q25\n    cut_off = iqr * 1.5\n    x_inferior, x_superior = q25 - cut_off, q75 + cut_off\n    outliers = [x for x in dados_tmp[coluna_input] if x < x_inferior or x > x_superior]\n    dados_novo = dados.drop(dados[(dados[coluna_input] > x_superior) | (dados[coluna_input] < x_inferior)].index)\n    return dados_novo","6986d47b":"dados_norm = remover_outlier(dados_norm,'ap_hi','cardio',1)","670e43a4":"fig,ax = plt.subplots(1,2,figsize=(13,5))\nsns.boxplot(y=dados_norm['ap_hi'],x=dados_norm['cardio'],ax=ax[0])\nsns.boxplot(y=dados_norm['ap_lo'],x=dados_norm['cardio'],ax=ax[1])\nplt.tight_layout()","308fcbda":"dados_norm = remover_outlier(dados_norm,'ap_lo','cardio',0)","e40c6e30":"fig,ax = plt.subplots(1,2,figsize=(13,5))\nsns.boxplot(y=dados_norm['ap_hi'],x=dados_norm['cardio'],ax=ax[0])\nsns.boxplot(y=dados_norm['ap_lo'],x=dados_norm['cardio'],ax=ax[1])\nplt.tight_layout()","bccf3d6f":"dados_norm = remover_outlier(dados_norm,'age','cardio',0)\ndados_norm = remover_outlier(dados_norm,'height','cardio',0)\ndados_norm = remover_outlier(dados_norm,'weight','cardio',0)","6315569e":"fig,ax = plt.subplots(1,3,figsize=(13,5))\nsns.boxplot(y=dados_norm['age'],x=dados_norm['cardio'],ax=ax[0])\nsns.boxplot(y=dados_norm['height'],x=dados_norm['cardio'],ax=ax[1])\nsns.boxplot(y=dados_norm['weight'],x=dados_norm['cardio'],ax=ax[2])\nplt.tight_layout()","6b94e4af":"sns.countplot(x='cardio',data=dados_norm)\nplt.tight_layout()","13f4bd38":"X = dados_norm.drop('cardio',axis=1).values\nY = dados_norm['cardio'].values","4d4a1f95":"X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20,random_state=42)","ac829c58":"#List to compute metrics\naccuracy = []\nprecision =[]\nrecall = []\nf1 = []\nroc = []","2e51185e":"#print(\"Logistic Regression\")\n#log_reg_params = {\"penalty\": ['l1', 'l2','elasticnet'], 'C': [1, 10], \n#                  'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']}\n#grid_log_reg = GridSearchCV(LogisticRegression(max_iter=10000), log_reg_params,n_jobs=-1,cv=10,scoring='roc_auc_ovo')\n#grid_log_reg.fit(X_train, y_train)\n#logreg = grid_log_reg.best_estimator_\n#print(logreg)","8d0bff89":"#Parameters have been choosing based on GridSearchCV\nlogreg = LogisticRegression(C=1,max_iter=10000,penalty='l1',solver='liblinear')\nlogreg.fit(X_train,y_train)","6a025d36":"log_reg_score = cross_val_score(logreg, X_train, y_train, cv=10,scoring='roc_auc_ovo')\nlog_reg_score_teste = cross_val_score(logreg, X_test, y_test, cv=10,scoring='roc_auc_ovo')\nprint('Score Regressao Logistica Treino: ', round(log_reg_score.mean() * 100, 2).astype(str) + '%')\nprint('Score Regressao Logistica Teste: ', round(log_reg_score_teste.mean() * 100, 2).astype(str) + '%')","30a79ba8":"Y_pred_logreg = logreg.predict(X_test)","c287f66b":"cm_logreg = confusion_matrix(y_test,Y_pred_logreg)","f329480a":"acc_score_logreg = accuracy_score(y_test,Y_pred_logreg)\nf1_score_logreg = f1_score(y_test,Y_pred_logreg)\nprecisao_logreg = average_precision_score(y_test,Y_pred_logreg)\nrecall_logreg = recall_score(y_test,Y_pred_logreg)\nroc_logreg = roc_auc_score(y_test,Y_pred_logreg,multi_class='ovo')\nprint('Acuracia Regress\u00e3o Logistica ',round(acc_score_logreg*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia Regress\u00e3o Logistica ',round(precisao_logreg*100,2).astype(str)+'%')\nprint('F1 Regress\u00e3o Logistica ',round(f1_score_logreg*100,2).astype(str)+'%')\nprint('Recall Regress\u00e3o Logistica ',round(recall_logreg*100,2).astype(str)+'%')\nprint('ROC Regress\u00e3o Logistica ',round(roc_logreg*100,2).astype(str)+'%')","420f9963":"accuracy.append(acc_score_logreg)\nprecision.append(precisao_logreg)\nrecall.append(recall_logreg)\nf1.append(f1_score_logreg)\nroc.append(roc_logreg)","858303d9":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_logreg, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"Regress\u00e3o Logistica \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","8fce2d42":"#print(\"KNN\")\n#knears_params = {\"n_neighbors\": list(range(20,30,1)),'leaf_size' : list(range(5,11,1)), 'weights': ['uniform', 'distance']}\n#grid_knears = GridSearchCV(KNeighborsClassifier(), knears_params,n_jobs=8,cv=10,scoring='roc_auc_ovo')\n#grid_knears.fit(X_train, y_train)\n#knn = grid_knears.best_estimator_\n#print(\"Best Estimator\")\n#print(knn)","d4fe62ec":"#Parameters have been choosing based on GridSearchCV\nknn = KNeighborsClassifier(weights='uniform',n_neighbors=27,leaf_size=6)\nknn.fit(X_train,y_train)","24eeddc0":"knears_score = cross_val_score(knn, X_train, y_train, cv=10,scoring='roc_auc_ovo')\nknears_score_teste = cross_val_score(knn, X_test, y_test, cv=10,scoring='roc_auc_ovo')\nprint('Score KNN Treino: ', round(knears_score.mean() * 100, 2).astype(str) + '%')\nprint('Score KNN Teste: ', round(knears_score_teste.mean() * 100, 2).astype(str) + '%')","eae06f1d":"Y_pred_knn = knn.predict(X_test)","021bc6af":"cm_knn = confusion_matrix(y_test,Y_pred_knn)","cee36f16":"acc_score_knn = accuracy_score(y_test,Y_pred_knn)\nf1_score_knn = f1_score(y_test,Y_pred_knn)\nprecisao_knn = average_precision_score(y_test,Y_pred_knn)\nrecall_knn = recall_score(y_test,Y_pred_knn)\nroc_knn = roc_auc_score(y_test,Y_pred_knn,multi_class='ovo')\nprint('Acuracia KNN ',round(acc_score_knn*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia KNN ',round(precisao_knn*100,2).astype(str)+'%')\nprint('F1 KNN ',round(f1_score_knn*100,2).astype(str)+'%')\nprint('Recall KNN ',round(recall_knn*100,2).astype(str)+'%')\nprint('ROC KNN ',round(roc_knn*100,2).astype(str)+'%')","fa410225":"accuracy.append(acc_score_knn)\nprecision.append(precisao_knn)\nrecall.append(recall_knn)\nf1.append(f1_score_knn)\nroc.append(roc_knn)","473e418a":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_knn, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"KNN \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","e3382c4a":"#print(\"Ada Boost Classifier\")\n#ada_params = {'n_estimators' : list(range(100,200))}\n#grid_ada = GridSearchCV(AdaBoostClassifier(), ada_params,n_jobs=8,cv=10,scoring='roc_auc_ovo')\n#grid_ada.fit(X_train, y_train)\n#ada = grid_ada.best_estimator_\n#print(\"Best Estimator\")\n#print(ada)","5122df7c":"#Parameters have been choosing based on GridSearchCV\nada = AdaBoostClassifier(n_estimators=102)\nada.fit(X_train,y_train)","bf259801":"ada_score = cross_val_score(ada, X_train, y_train, cv=10,scoring='roc_auc_ovo')\nada_score_teste = cross_val_score(ada, X_test, y_test, cv=10,scoring='roc_auc_ovo')\nprint('Score AdaBoost Treino: ', round(ada_score.mean() * 100, 2).astype(str) + '%')\nprint('Score AdaBoost Teste: ', round(ada_score_teste.mean() * 100, 2).astype(str) + '%')","c4683614":"Y_pred_ada = ada.predict(X_test)","ff3179c7":"cm_ada = confusion_matrix(y_test,Y_pred_ada)","9a85faea":"acc_score_ada = accuracy_score(y_test,Y_pred_ada)\nf1_score_ada = f1_score(y_test,Y_pred_ada)\nprecisao_ada = average_precision_score(y_test,Y_pred_ada)\nrecall_ada = recall_score(y_test,Y_pred_ada)\nroc_ada = roc_auc_score(y_test,Y_pred_ada,multi_class='ovo')\nprint('Acuracia ADA Boost ',round(acc_score_ada*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia Ada Boost ',round(precisao_ada*100,2).astype(str)+'%')\nprint('F1 Ada Boost ',round(f1_score_ada*100,2).astype(str)+'%')\nprint('Recall Ada Boost ',round(recall_ada*100,2).astype(str)+'%')\nprint('ROC Ada Boost ',round(roc_ada*100,2).astype(str)+'%')","45ef3657":"accuracy.append(acc_score_ada)\nprecision.append(precisao_ada)\nrecall.append(recall_ada)\nf1.append(f1_score_ada)\nroc.append(roc_ada)","ae45dbe1":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_ada, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"Ada Boost \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","ccbea763":"#print(\"Random Forest Classifier\")\n#forest_params = {\"max_depth\": list(range(10,50,1)),\"n_estimators\" : [350,400,450]}\n#forest = GridSearchCV(RandomForestClassifier(), forest_params,n_jobs=-1,cv=10,scoring='roc_auc_ovo')\n#forest.fit(X_train, y_train)\n#random_forest = forest.best_estimator_\n#print(\"Best Estimator\")\n#print(random_forest)","11d888fc":"#Parameters have been choosing based on GridSearchCV\nrandom_forest = RandomForestClassifier(max_depth=10,n_estimators=350)\nrandom_forest.fit(X_train,y_train)","56b9e5e6":"forest_score = cross_val_score(random_forest, X_train, y_train, cv=10,scoring='roc_auc_ovo')\nforest_score_teste = cross_val_score(random_forest, X_test, y_test, cv=10,scoring='roc_auc_ovo')\nprint('Score RFC Treino: ', round(forest_score.mean() * 100, 2).astype(str) + '%')\nprint('Score RFC Teste: ', round(forest_score_teste.mean() * 100, 2).astype(str) + '%')","ead08275":"Y_pred_rf = random_forest.predict(X_test)","b2375a74":"cm_rf = confusion_matrix(y_test,Y_pred_rf)","17372d3e":"acc_score_rf = accuracy_score(y_test,Y_pred_rf)\nf1_score_rf = f1_score(y_test,Y_pred_rf)\nprecisao_rf = average_precision_score(y_test,Y_pred_rf)\nrecall_rf = recall_score(y_test,Y_pred_rf)\nroc_rf = roc_auc_score(y_test,Y_pred_rf,multi_class='ovo')\nprint('Acuracia Random Forest ',round(acc_score_rf*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia Random Forest ',round(precisao_rf*100,2).astype(str)+'%')\nprint('F1 Random Forest ',round(f1_score_rf*100,2).astype(str)+'%')\nprint('Recall Random Forest ',round(recall_rf*100,2).astype(str)+'%')\nprint('ROC Random Forest ',round(roc_rf*100,2).astype(str)+'%')","cbb0a46d":"accuracy.append(acc_score_rf)\nprecision.append(precisao_rf)\nrecall.append(recall_rf)\nf1.append(f1_score_rf)\nroc.append(roc_rf)","34f1c00e":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_rf, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"Random Forest \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","21388513":"#print(\"Gradient Boost Classifier\")\n#grad_params = {'n_estimators' : [50,55,60,65,70,75,80,85,90],'max_depth' : list(range(3,11,1))}\n#grad = GridSearchCV(GradientBoostingClassifier(), grad_params,n_jobs=-1,cv=10,scoring='roc_auc_ovo')\n#grad.fit(X_train, y_train)\n#grad_boost = grad.best_estimator_\n#print(\"Best Estimator\")\n#print(grad_boost)","849123b1":"#Parameters have been choosing based on GridSearchCV\ngrad_boost = GradientBoostingClassifier(n_estimators=65,max_depth=4)\ngrad_boost.fit(X_train, y_train)","435a088c":"grad_score = cross_val_score(grad_boost, X_train, y_train, cv=10,scoring='roc_auc_ovo')\ngrad_score_teste = cross_val_score(grad_boost, X_test, y_test, cv=10,scoring='roc_auc_ovo')\nprint('Score GradBoost Treino: ', round(grad_score.mean() * 100, 2).astype(str) + '%')\nprint('Score GradBoost Teste: ', round(grad_score_teste.mean() * 100, 2).astype(str) + '%')","0b4faa17":"Y_pred_gb = grad_boost.predict(X_test)","79825dfc":"cm_gb = confusion_matrix(y_test,Y_pred_gb)","45fbae9c":"acc_score_gb = accuracy_score(y_test,Y_pred_gb)\nf1_score_gb = f1_score(y_test,Y_pred_gb)\nprecisao_gb = average_precision_score(y_test,Y_pred_gb)\nrecall_gb = recall_score(y_test,Y_pred_gb)\nroc_gb = roc_auc_score(y_test,Y_pred_gb,multi_class='ovo')\nprint('Acuracia Gradient Boosting ',round(acc_score_gb*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia Gradient Boosting  ',round(precisao_gb*100,2).astype(str)+'%')\nprint('F1 Gradient Boosting  ',round(f1_score_gb*100,2).astype(str)+'%')\nprint('Recall Gradient Boosting  ',round(recall_gb*100,2).astype(str)+'%')\nprint('ROC Gradient Boosting ',round(roc_gb*100,2).astype(str)+'%')","989467f8":"accuracy.append(acc_score_gb)\nprecision.append(precisao_gb)\nrecall.append(recall_gb)\nf1.append(f1_score_gb)\nroc.append(roc_gb)","2f0fa2c9":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_gb, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"Gradient Boosting  \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","3c98b08a":"resultados = [log_reg_score,knears_score,ada_score,forest_score,grad_score]\nresultados_teste = [log_reg_score_teste,knears_score_teste,ada_score_teste,forest_score_teste,grad_score_teste]\nnome_modelo = [\"Logistic Regression\",\"KNN\",\"AdaBoost\",\"RFC\",\"GradBoost\"]","9ba309ee":"fig,ax=plt.subplots(figsize=(10,5))\nax.boxplot(resultados)\nax.set_xticklabels(nome_modelo)\nplt.tight_layout()","38baa528":"fig,ax=plt.subplots(figsize=(10,5))\nax.boxplot(resultados_teste)\nax.set_xticklabels(nome_modelo)\nplt.tight_layout()","c47bf356":"n_inputs = X_train.shape[1]","1ecc00a9":"modelo = Sequential()\nmodelo.add(Dense(128, input_shape=(n_inputs, ), activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dense(256, activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dropout(0.5))\nmodelo.add(Dense(512, activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dense(512, activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dropout(0.5))\nmodelo.add(Dense(256, activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dense(128, activation='relu', kernel_initializer='glorot_uniform',bias_initializer='zeros'))\nmodelo.add(BatchNormalization())\nmodelo.add(Dropout(0.5))\nmodelo.add(Dense(2, activation='softmax', kernel_initializer='glorot_uniform',bias_initializer='zeros'))","2848227c":"reduce_lr = ReduceLROnPlateau(monitor='val_accuracy', patience=3, verbose=1, factor=0.5, mode='auto', min_delta=0.0001)\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=50)\ncallbacks_list = [reduce_lr,es]\nbsize = 2000","28a0c7eb":"modelo.compile(Adam(lr=0.01), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodelo.fit(X_train, y_train, batch_size=bsize, epochs=200, verbose=2, validation_data=(X_test,y_test),callbacks=callbacks_list)","e0fc5884":"Y_pred_keras = modelo.predict_classes(X_test, batch_size=bsize, verbose=0)","f3f4784e":"cm_keras = confusion_matrix(y_test,Y_pred_keras)\nacc_score_keras = accuracy_score(y_test,Y_pred_keras)\nf1_score_keras = f1_score(y_test,Y_pred_keras)\nprecisao_keras = average_precision_score(y_test,Y_pred_keras)\nrecall_keras = recall_score(y_test,Y_pred_keras)\nroc_keras = roc_auc_score(y_test,Y_pred_keras,multi_class='ovo')\nprint('Acuracia Keras ',round(acc_score_keras*100,2).astype(str)+'%')\nprint('Preci\u00e3o m\u00e9dia Keras  ',round(precisao_keras*100,2).astype(str)+'%')\nprint('F1 Keras  ',round(f1_score_keras*100,2).astype(str)+'%')\nprint('Recall Keras  ',round(recall_keras*100,2).astype(str)+'%')\nprint('ROC Keras ',round(roc_keras*100,2).astype(str)+'%')","35e277a8":"accuracy.append(acc_score_keras)\nprecision.append(precisao_keras)\nrecall.append(recall_keras)\nf1.append(f1_score_keras)\nroc.append(roc_keras)","30557085":"fig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(cm_keras, ax=ax, annot=True, cmap=plt.cm.copper)\nax.set_title(\"Keras  \\n Matriz de Confus\u00e3o\", fontsize=14)\nax.set_xticklabels(['B', 'M'], fontsize=14, rotation=0)\nax.set_yticklabels(['B', 'M'], fontsize=14, rotation=360)","04a83163":"nome_modelo = [\"Logistic Regression\",\"KNN\",\"AdaBoost\",\"RFC\",\"GradBoost\",\"Keras\"]\ndic_metrics = {'Model' : nome_modelo, 'Accuracy' : accuracy, 'Precision' : precision, 'Recall' : recall, 'F1' : f1, 'ROC' : roc}\ndataframe = pd.DataFrame(dic_metrics)","bc62e53a":"dataframe_sorted =  dataframe.sort_values(by=['ROC','Accuracy','Recall','F1','Precision'],ascending=False).reset_index().drop('index',axis=1)","dd81ce48":"dataframe_sorted","0408b33e":"Now the data values seem more reasonable","5f3c3387":"Defining X and Y variables","9d929eb2":"Function to remove outliers","a14e0aa6":"Checking the correlations","ce31b8ce":"Showing the first five lines","d5741a43":"# Ada Boost Classifier","e6ea6f24":"Converting age column to years","16a6f3cf":"Loading the dataset","37fda850":"Now the correlations look better and now there is correlations between high and low pressures","f9cc3b72":"# Deep Learning Model","b74e3f2d":"# Gradient Boost Classifier","099cb350":"# KNN ","cdba2dcd":"Removing duplicated data","6644ad7b":"# Random Forest Classifier","d9ef6b83":"As expected there are correlations among gender and height and a small correlation among smoke and alco","4c3c56c1":"Checking the new correlations","219f0eba":"The data is balanced. Now I am going to check for outliers in the other columns","4c25eedd":"Cardio is out output data. Checking the amount for each classes","78f1da9f":"The data is still balanced after removing outliers","f212a516":"Checking if there are NaNs","55638861":"It's known that blood pressures higher than 250 for high and 200 for low are outliers. These data will be removed","6696e651":"Checking the existence of outliers using boxplots","68b43469":"Checking the data info","52220ee4":"Adding BMI features since this is an important feature for heart diseases","418f205c":"Based on the values, columns 'ap_hi','ap_lo','age','height','weight' must be normalized. This will be done with MinMaxScaler","c07cb6bb":"Dropping id column","7309fcb0":"The data will be modeled using Logistic regression, KNN, Random Forest, AdaBoost and Gradient Boosting Classifiers","ee5a2c0c":"Checking for the normalization","35b34497":"# Logistic Regression","f82e5e21":"Defining the train and test samples","fadd880e":"From all models that have been testes Gradient Boosting Classifier had the best performance. RFC had a very similar behavior. Excepted KNN all other models had very similar accuracies and ROC score.","15053bcf":"Checking if there are duplicated data"}}