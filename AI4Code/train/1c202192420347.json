{"cell_type":{"497fe3c3":"code","6b12cbdb":"code","9c74b0e3":"code","9b88445a":"code","820945d1":"code","49027561":"code","b5f0dfcb":"code","60798333":"code","11faf28d":"code","9124536c":"code","26a199a0":"code","5b9068cd":"code","93afff13":"code","c17e9fab":"code","458312e3":"code","1c6121d3":"code","6647b352":"code","89ef25a1":"code","2c900b0f":"code","d0e466d3":"code","87f57677":"code","55801b85":"code","2d3d1868":"code","834febb6":"code","441aeabe":"code","de219004":"code","1c7284f0":"code","1eaec495":"code","8edb593f":"code","1063ef5d":"code","39ffbaf5":"code","e2919183":"code","7462ce94":"code","4eac2690":"code","560b227a":"code","e3ec8c1f":"code","4e105abf":"code","712814ad":"code","42393d86":"code","85c765ff":"code","3a757853":"code","ed48c839":"code","9b9aeeaf":"code","16b0762f":"code","09738ddd":"code","40c88953":"code","d32d6a6f":"code","e7a1ffbf":"code","c2676a5d":"code","0d992e75":"code","5ed09399":"code","92664224":"code","7003b7ba":"code","8d614fa6":"code","3147a6fd":"code","a9e5fbd7":"code","68baa56d":"code","d1765d4a":"code","9741d863":"code","e393f7f3":"code","e1973f68":"code","293168f8":"code","d26d7af7":"code","c08035ef":"code","8bc69154":"code","071bc5cd":"code","0a62b959":"code","58e0eb94":"code","497a8f0c":"code","05d6a10d":"code","bb6d21c1":"code","c1455d2a":"code","a82ee3c9":"code","a50841f5":"code","5a67723c":"code","814bac35":"markdown","b84d221b":"markdown","25402b5f":"markdown","0facc998":"markdown","63fd858d":"markdown","df0090fa":"markdown","00a4bb11":"markdown"},"source":{"497fe3c3":"# Importing Liberaries \nimport pandas as pd \nimport numpy as np\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib\nimport seaborn as sns\nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)","6b12cbdb":"# load Data Csv file in dataframe\ndf = pd.read_csv('..\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\ndf.head()","9c74b0e3":"df.shape","9b88445a":"df.info()","820945d1":"df.describe().T","49027561":"df['area_type'].unique()","b5f0dfcb":"df['area_type'].value_counts()","60798333":"plt.figure(figsize=(12,3))\ndf.area_type.value_counts().plot(kind='bar')","11faf28d":"plt.figure(figsize=(12,3))\ndf.bath.value_counts().plot(kind='bar')","9124536c":"plt.figure(figsize=(12,3))\ndf.balcony.value_counts().plot(kind='bar')","26a199a0":"#  drop some columns who are not usefull for build our model\ndf1 = df.drop(['balcony','area_type','society','availability'],axis='columns')\ndf1.head()","5b9068cd":"df1.isnull().sum()","93afff13":"df2 = df1.dropna()\ndf1.shape","c17e9fab":"df2.isnull().sum()","458312e3":"df2['size'].unique() # here bhk and bedrooms both are same ","1c6121d3":"df2['New_Size']=df2['size'].apply(lambda i: int(i.split(' ')[0]))\ndf2.head()","6647b352":"df2.New_Size.unique()","89ef25a1":"sns.catplot(x='New_Size',y='bath',data=df2,kind='bar',alpha=.6, height=6,ci=\"sd\");","2c900b0f":"df2.total_sqft.unique()  # 1133-1384 is a range ","d0e466d3":"# for convert all total_sqft features data in range\n\ndef convertFloat(i):\n    try:\n        float(i)\n    except:\n        return False\n    return True\n\ndf2[~df2['total_sqft'].apply(convertFloat)].head(10)","87f57677":"df2[~df2['total_sqft'].apply(convertFloat)].tail(10)","55801b85":"def convertInInt(i):\n    tokens = i.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    try:\n        return float(i)\n    except:\n        return None\n    \ndf2['total_sqft']= df['total_sqft'].apply(convertInInt)\ndf2.head()","2d3d1868":"df2.loc[12560]  # total_sqft is null in 12560, 12652 and many more","834febb6":"df2.isnull().sum()","441aeabe":"df2.shape","de219004":"df3 = df2.dropna()\ndf3.shape","1c7284f0":"df3.head(2)","1eaec495":"# we don't know what is the price of a square feet so make new feature that's call price_per_sqft\ndf3['price_per_sqft'] = df3['price']*100000\/df3['total_sqft']\ndf3.head()","8edb593f":"df4 = df3.copy()\ndf4['price_per_sqft'].describe()","1063ef5d":"df4.shape","39ffbaf5":"len(df4.location.unique())","e2919183":"df4.location.unique() # our location feature in to much unique values ","7462ce94":"df4.location = df4.location.apply(lambda i: i.strip()) \nlocationS = df4['location'].value_counts(ascending=False)\nlocationS","4eac2690":"locationS.values.sum()","560b227a":"len(locationS[locationS>10])","e3ec8c1f":"len(locationS[locationS<10])","4e105abf":"len(locationS[locationS<=10])","712814ad":"location_less_10 = locationS[locationS<=10]\nlocation_less_10","42393d86":"df4.location = df4.location.apply(lambda i : 'other' if i in location_less_10 else i)\nlen(df4.location.unique())  # Hurrah!","85c765ff":"# now we want to remove some outliers \ndf4[df4.total_sqft\/df4.New_Size<300].head()\n# now you can see in dataframe that 1020 sqft with 6 bedroom....My home is 900 sqft with 2 bedroom and thats both room are medium size\n# and another 600 sqft with 8 rooms and 9 bath..... haha its may be all baths no one room in home\n# so its all are conduct as a data error or outliers","3a757853":"print(len(df4[df4.total_sqft\/df4.New_Size<300]))","ed48c839":"df5 = df4[(df4.total_sqft\/df4.New_Size<300)]\ndf5.shape","9b9aeeaf":"df5 = df4[~(df4.total_sqft\/df4.New_Size<300)]\ndf5.shape","16b0762f":"df5.price_per_sqft.describe()","09738ddd":"def remove_pps_outliers(df):\n    df_out = pd.DataFrame()\n    for key, subdf in df.groupby('location'):\n        m = np.mean(subdf.price_per_sqft)\n        st = np.std(subdf.price_per_sqft)\n        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]\n        df_out = pd.concat([df_out,reduced_df],ignore_index=True)\n    return df_out\ndf6 = remove_pps_outliers(df5)\ndf6.shape","40c88953":"plt.figure(figsize=(20,10))\nfeatures = df6.columns\nfor i, j in enumerate(features):\n    plt.subplot(3,3,i+1)\n    plt.title(f'Histogram of {j}', fontsize= 15)\n    bins = len(df6[j].unique())\n    plt.hist(df6[j], bins=bins,rwidth=0.8,linewidth=2, edgecolor= 'y')\nplt.subplots_adjust(hspace=0.5)","d32d6a6f":"df6.New_Size.unique()","e7a1ffbf":"def plot_scatter(df,location):\n    bhk2 = df[(df.location==location) & (df.New_Size==2)]\n    bhk3 = df[(df.location==location)&(df.New_Size==3)]\n    bhk4 = df[(df.location==location)&(df.New_Size==4)]\n    matplotlib.rcParams['figure.figsize']=(10,8)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50, marker = '.')\n    plt.scatter(bhk3.total_sqft,bhk3.price,color='green',label='3 BHK', s=50, marker = '*')\n    plt.scatter(bhk4.total_sqft,bhk4.price,color='red',label='4 BHK', s=50, marker = '+')\n    plt.xlabel(\"Total Square Feet Area\")\n    plt.ylabel(\"Price (Lakh Indian Rupees)\")\n    plt.title(location)\n    plt.legend()\n\nplot_scatter(df6,'Whitefield')","c2676a5d":"plot_scatter(df6,'Thanisandra')","0d992e75":"def remove_outlier_bed(df):\n    exclude_indices = np.array([])\n    for location, location_df in df.groupby('location'):\n        bhk_stats = {}\n        for bhk, bhk_df in location_df.groupby('New_Size'):\n            bhk_stats[bhk] = {\n                'mean': np.mean(bhk_df.price_per_sqft),\n                'std': np.std(bhk_df.price_per_sqft),\n                'count': bhk_df.shape[0]\n            }\n        for bhk, bhk_df in location_df.groupby('New_Size'):\n            stats = bhk_stats.get(bhk-1)\n            if stats and stats['count']>5:\n                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(exclude_indices,axis='index')\n\ndf7 = remove_outlier_bed(df6)\ndf7.shape","5ed09399":"plot_scatter(df7,'Thanisandra')  # previous graph vs new graph can easily understand our outliers are removed","92664224":"matplotlib.rcParams[\"figure.figsize\"] = (10,4)\nplt.hist(df7.price_per_sqft,rwidth=0.8)\nplt.xlabel(\"Price Per Square Feet\")\nplt.ylabel(\"Count\")","7003b7ba":"df7.bath.unique()","8d614fa6":"df7[df7.bath>10]","3147a6fd":"df7[df7.bath>df7.New_Size+2]","a9e5fbd7":"df7.shape","68baa56d":"df8 = df7[df7.bath<df7.New_Size+2]\ndf8.shape","d1765d4a":"df8.head(2)","9741d863":"df9 = df8.drop(['size','price_per_sqft'], axis= 1)\ndf9.head(1)","e393f7f3":"# one hot encoding for locatin\ndummies = pd.get_dummies(df9.location)\ndummies.head(2)","e1973f68":"df10 = pd.concat([df9,dummies],axis=1)\ndf10 = df10.drop(['other','location'],axis=1)\ndf10.head(2)","293168f8":"x = df10.drop(['price'], axis=1)\ny = df10.price\nx.head(2)","d26d7af7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=10)","c08035ef":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train,y_train)\nlr.score(x_test,y_test)","8bc69154":"# use of k fold cross validation \nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import cross_val_score\n\ncv = ShuffleSplit(n_splits=5, random_state=10, test_size=0.2)\ncross_val_score(LinearRegression(),x,y,cv=cv)","071bc5cd":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\n\n","0a62b959":"def bestModel(x,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(x,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n\nbestModel(x,y)","58e0eb94":"# our first model give us best score \nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(x_train,y_train)\nlr.score(x_test,y_test)","497a8f0c":"# for prediction\nx.columns","05d6a10d":"type(np.where(x.columns=='bath'))","bb6d21c1":"type(np.where(x.columns=='bath')[0])","c1455d2a":"type(np.where(x.columns=='bath')[0][0])","a82ee3c9":"def predict_price(location,sqft,bath,bhk):    \n    loc_index = np.where(x.columns==location)[0][0]\n\n    X = np.zeros(len(x.columns))\n    X[0] = sqft\n    X[1] = bath\n    X[2] = bhk\n    if loc_index >= 0:\n        x[loc_index] = 1\n\n    return lr.predict([X])[0]","a50841f5":"predict_price('Vittasandra',1000, 2, 2)","5a67723c":"import pickle\nwith open('banglore_home_prices_prediction_model.pickle','wb') as f:\n    pickle.dump(lr,f)","814bac35":"#  Problem","b84d221b":"  Winner is LinearRegression with parameter Normalize = False","25402b5f":"Feature Engineering","0facc998":"Data Analysis","63fd858d":"Banglore House Price Data to find the approximate prize for the house","df0090fa":"GridSearch cv to find best model","00a4bb11":"# Model Building"}}