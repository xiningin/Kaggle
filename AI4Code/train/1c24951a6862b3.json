{"cell_type":{"2d174437":"code","69334b8b":"code","1df5586d":"code","d8bf3b58":"code","4464ac37":"code","7172bc24":"code","db5c4b9f":"code","b2e9669d":"code","2eefe1b9":"code","ddc27686":"code","402f2302":"code","7a816c12":"code","c9a0c9e4":"code","058128e8":"code","1e0bc614":"code","c3408ebe":"markdown","b53d01a4":"markdown","0b32c935":"markdown","bdbcf9fa":"markdown","46cde0b2":"markdown","bfbfb6a3":"markdown","94ceb2ff":"markdown","8204845f":"markdown"},"source":{"2d174437":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport matplotlib.colors as colors\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import scale \nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV \nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.decomposition import PCA\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","69334b8b":"df=pd.read_csv('..\/input\/heart-disease-uci\/heart.csv')\ndf.head()","1df5586d":"from pandas_profiling import ProfileReport\nprofile = ProfileReport(df, title=\"Pandas Profiling Report\", explorative=True)\nprofile","d8bf3b58":"df.dtypes","4464ac37":"df.describe()","7172bc24":"X=df.drop('target',axis=1).copy()\nX.head()","db5c4b9f":"y=df['target'].copy()","b2e9669d":"X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42)\nX_train_scaled=scale(X_train)\nX_test_scaled=scale(X_test)","2eefe1b9":"len(X_test_scaled)","ddc27686":"clf_svm=SVC(random_state=42)\nclf_svm.fit(X_train_scaled,y_train)","402f2302":"plot_confusion_matrix(clf_svm,X_test_scaled,y_test,display_labels=[\"Does not have Heart Disease\",\"Has HD\"])","7a816c12":"param_grid=[{'C':[0.1,1, 10, 100],'gamma':[1,0.1,0.01,0.001],'kernel':['rbf', 'poly', 'sigmoid']},]\noptimal_params=GridSearchCV(SVC(),param_grid,verbose=2)\noptimal_params.fit(X_train_scaled,y_train)\noptimal_params.best_params_","c9a0c9e4":"clf_svm=SVC(kernel='sigmoid',C= 100, gamma= 0.001)\nclf_svm.fit(X_train_scaled,y_train)\nplot_confusion_matrix(clf_svm,X_test_scaled,y_test,display_labels=[\"Does not have Heart Disease\",\"Has HD\"])","058128e8":"pca = PCA()\nX_train_pca = pca.fit_transform(X_train_scaled)\n\nper_var = np.round(pca.explained_variance_ratio_* 100, decimals=1)\n\nlabels = ['PC' + str(x) for x in range(1, len(per_var)+1)]\nplt.bar(x=range(1,len(per_var)+1), height=per_var, tick_label=labels)\nplt.ylabel('Percentage of Explained Variance')\nplt.xlabel('Principal Component')\nplt.title('Scree Plot')\nplt.show()","1e0bc614":"pc1 = X_train_pca[:, 0] \npc2 = X_train_pca[:, 1]\n#pc1 contains the x-axis coordinates of the data after PCA\n#pc2 contains the y-axis coordinates of the data after PCA\n\nclf_svm.fit(np.column_stack((pc1, pc2)), y_train)\n\n#Creating a matrix of points that can use to show the decision regions.\nx_min = pc1.min() - 1\nx_max = pc1.max() + 1\n\ny_min = pc2.min() - 1\ny_max = pc2.max() + 1\n\n\nxx, yy = np.meshgrid(np.arange(start=x_min, stop=x_max, step=0.1), np.arange(start=y_min, stop=y_max, step=0.1))\n\n#Classifying every point in that matrix with the SVM. Points on one side of the classification boundary will get 0, and points on the other side will get 1\nZ = clf_svm.predict(np.column_stack((xx.ravel(), yy.ravel())))\n\n#Reshaping so that each classification (0 or 1) corresponds to a specific point in the matrix.\nZ = Z.reshape(xx.shape)\n\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.contourf(xx, yy, Z, alpha=0.1)\n\n#Custom colors for the actual data points\ncmap = colors.ListedColormap(['#e41a1c', '#4daf4a'])\n \nscatter = ax.scatter(pc1, pc2, c=y_train, cmap=cmap, s=100, edgecolors='k', alpha=0.7)\n\nlegend = ax.legend(scatter.legend_elements()[0],scatter.legend_elements()[1],loc=\"upper right\")\nlegend.get_texts()[0].set_text(\"No HD\")\nlegend.get_texts()[1].set_text(\"Yes HD\")\n\nax.set_ylabel('PC2')\nax.set_xlabel('PC1')\nax.set_title('Decison surface using the PCA transformed\/projected features')\nplt.show()","c3408ebe":"Selecting Best Parameters\n\nC: 100\n\ngamma: 0.001\n\nkernel: sigmoid\n","b53d01a4":"The scree plot shows that the first principal component, PC1, accounts for a relatively large amount of variation in the raw data, and this means that it will be a good candidate for the x-axis in the 2-dimensional graph. Since PC2 accounts for the next largest amount of variance, can be used for the y-axis.","0b32c935":"## **Modeling**","bdbcf9fa":"\n# **Visualization**\n\nUsed PCA (Principal Component Analysis) to combine the 14 features into 2 orthogonal meta-features that can use as axes for a graph.\n","46cde0b2":"## **Feature Scaling**","bfbfb6a3":"**trestbps**, **chol** and **thalach** have different range values compare to other features, so need to apply a feature scaling technique, so it would scale all features so that they are in the same range, for example 0\u20131 or -1 to 1.","94ceb2ff":"# EDA using pandas_profiling","8204845f":"# Optimizing Parameters with Cross Validation"}}