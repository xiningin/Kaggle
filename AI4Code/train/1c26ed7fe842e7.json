{"cell_type":{"142419df":"code","ee3d795c":"code","4c5a3019":"code","35d987de":"code","44d277bd":"code","9b533771":"code","ead26052":"code","7cad4999":"code","927455c2":"code","1957c1f0":"code","ef4a3842":"code","2cbda9e8":"code","97b05e5a":"code","b0384771":"code","ac16e261":"code","6d255c29":"code","dd4ed0af":"code","d683e030":"code","03cbac20":"code","02468f1c":"code","ec0b14b4":"code","82de82dc":"code","4c00b7ae":"code","4c3bf0f5":"code","6b8e4938":"code","4f6baac0":"code","64e196bf":"code","4e8759cd":"code","3a4feaf4":"code","1c9f95c7":"code","e5a97070":"code","6f76240d":"code","1e6a4378":"code","7397759d":"code","68bfc2a4":"code","9307a23e":"code","c7cc1bf3":"code","af0150d2":"code","3eab291c":"code","f1b39538":"code","e3ad1aa5":"code","ac3b55e3":"code","ef272468":"code","4cbc9f8e":"markdown","60917f3c":"markdown","ee0953a2":"markdown","8e0052d3":"markdown","2781202e":"markdown","6ad7a444":"markdown","ca0f52c5":"markdown"},"source":{"142419df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ee3d795c":"df = pd.read_csv(\"\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv\", index_col = \"RowNumber\")","4c5a3019":"df.head()","35d987de":"df.shape","44d277bd":"df.isnull().sum()","9b533771":"df.Geography.unique()","ead26052":"df.Gender.unique()\n","7cad4999":"df.Tenure.unique()","927455c2":"df.describe()","1957c1f0":"df.info()","ef4a3842":"df.drop([\"CustomerId\",\"Surname\"], axis = 1, inplace = True)","2cbda9e8":"import seaborn as sns\nimport matplotlib.pyplot as plt","97b05e5a":"#Numerical Variables\nnum_var = [f for f in df.columns if df[f].dtype!='O']\nnum_var\n","b0384771":"#Discrete variables \ndis_var = [f for f in num_var if df[f].nunique() < 20]\ndis_var","ac16e261":"df.Tenure.nunique()","6d255c29":"#Continous variable\ncont_var = [f for f in num_var if f not in dis_var]\ncont_var","dd4ed0af":"#Categorical Variables\ncat_var = [f for f in df.columns if f not in num_var]\ncat_var\n","d683e030":"for var in dis_var:\n    sns.countplot(df[var])\n    plt.show()","03cbac20":"for var in cont_var:\n    sns.distplot(df[var], kde = False, color = \"green\")\n    plt.show()\n    sns.boxplot(df[var])\n    plt.show()","02468f1c":"for var in cat_var:\n    sns.countplot(df[var])\n    plt.show()","ec0b14b4":"plt.figure(figsize = (20,10))\nsns.heatmap(df.corr(), annot =True)","82de82dc":"plt.figure(figsize = (20,10))\nsns.pairplot(df)","4c00b7ae":"exited_yes = df[df[\"Exited\"]==1]\nexited_no = df[df[\"Exited\"]==0]","4c3bf0f5":"print(exited_yes.shape,exited_no.shape)","6b8e4938":"x = df.drop([\"Exited\"], axis = 1)\ny = df[\"Exited\"]","4f6baac0":"x.head()\ny.head()","64e196bf":"cat_1 = pd.get_dummies(df[\"Geography\"], drop_first = True)\ncat_2 = pd.get_dummies(df[\"Gender\"], drop_first = True)","4e8759cd":"x.head()","3a4feaf4":"x_t = pd.concat([x,cat_1],axis=1)\nx_t_f = pd.concat([x_t,cat_2],axis = 1)\nx_t_f.head()","1c9f95c7":"x_t_f = x_t_f.drop([\"Geography\",\"Gender\"],axis =1)","e5a97070":"x_t_f.head()","6f76240d":"y.head()","1e6a4378":"from imblearn.over_sampling import SMOTE\noversample = SMOTE(k_neighbors=4)\nx_res, y_res = oversample.fit_resample(x_t_f, y)","7397759d":"print(x_res.shape,y_res.shape)","68bfc2a4":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()","9307a23e":"x_res = scalar.fit_transform(x_res)","c7cc1bf3":"from sklearn.model_selection import train_test_split","af0150d2":"x_train,x_test,y_train,y_test = train_test_split(x_res,y_res,test_size = 0.25)","3eab291c":"params={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","f1b39538":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nclassifier = XGBClassifier()\nrandom_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)\nrandom_search.fit(x_train,y_train)","e3ad1aa5":"random_search.best_estimator_","ac3b55e3":"from xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nclf1 = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5, gamma=0.1, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.2, max_delta_step=0, max_depth=8,\n              min_child_weight=3, monotone_constraints='()',\n              n_estimators=100, n_jobs=4, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","ef272468":"clf1.fit(x_train,y_train)\nprint(clf1.score(x_test,y_test))\n","4cbc9f8e":"# EDA","60917f3c":"The target variable(exited) is \npositively correlated with - Age, Balance,Estimated Salary   (Weak)\n\nNegatively with - CreditScore,Tenure,NumofProducts,CreditCard,IsActiveMember","ee0953a2":"# Model Selection and HyperParamter Tuning","8e0052d3":"Inference : The Dataset is imbalanced (Exited column)\n","2781202e":"Inference : \n\nThe data does not follow any distribution (Need to convert to gaussian)\n\nThere are outliers in CreditScore and Age columns","6ad7a444":"# Scaling the features","ca0f52c5":"# Handling Imbalanced Dataset "}}