{"cell_type":{"7492cf98":"code","99d4bb7c":"code","d5a848e3":"code","c5b6a97b":"code","04d22d04":"code","1905de95":"code","4e6bae2f":"code","90813e05":"code","b038b887":"code","c6db1c80":"code","2982a085":"code","eecbcab1":"code","2a233751":"code","e68f45c1":"code","6132800c":"code","32a336c1":"code","349b64e0":"code","08eca650":"code","24031524":"code","c126ff26":"markdown","2629aac3":"markdown","4bf33f30":"markdown","d51bbdd2":"markdown","47a7be8f":"markdown","ca553847":"markdown","77b08520":"markdown","ca370c13":"markdown","eb0bbeee":"markdown","caabcedd":"markdown","7fc957b2":"markdown"},"source":{"7492cf98":"!pip install word2number","99d4bb7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport re\nimport os\nfrom datetime import datetime\nimport string\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom word2number import w2n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nprint(os.listdir(\"..\/input\/cityofla\/CityofLA\"))\n\n# Any results you write to the current directory are saved as output.","d5a848e3":"!ls ..\/input\/cityofla\/CityofLA\/Job\\ Bulletins","c5b6a97b":"!ls ..\/input\/cityofla\/CityofLA\/Additional\\ data","04d22d04":"import random\nimport os\nbulletins_dir = \"..\/input\/cityofla\/CityofLA\/Job Bulletins\"\nbulletins = os.listdir(\"..\/input\/cityofla\/CityofLA\/Job Bulletins\")\nprint(\"{} files\".format(len(bulletins)))\nfor i in range(1):\n    rand = random.randint(0, len(bulletins))\n    file = os.path.join(bulletins_dir, bulletins[rand])\n    with open(file) as f:\n        for x in f.readlines():\n            print(x)","1905de95":"from wand.image import Image as Img","4e6bae2f":"Img(filename='..\/input\/cityofla\/CityofLA\/Additional data\/PDFs\/2016\/April 2016\/PORT POLICE OFFICER 3221 Rev 041516.pdf', resolution=300)","90813e05":"additional = os.listdir(\"..\/input\/cityofla\/CityofLA\/Additional data\/\")\nprint(additional)","b038b887":"import pandas as pd\npath_additional = \"..\/input\/cityofla\/CityofLA\/Additional data\/\"\njob_titles = pd.read_csv(os.path.join(path_additional, 'job_titles.csv'))\nsample_job = pd.read_csv(os.path.join(path_additional, 'sample job class export template.csv'))\nkaggle_data = pd.read_csv(os.path.join(path_additional, 'kaggle_data_dictionary.csv'))","c6db1c80":"job_titles.head()","2982a085":"job_titles.shape","eecbcab1":"sample_job.head()","2a233751":"kaggle_data","e68f45c1":"kaggle_data.shape\n","6132800c":"sample_job.shape","32a336c1":"def process_bulletins(df, _bulletins):\n    \n    re_open_date = re.compile(r'(open date:)(\\s+)((\\d)?\\d-\\d\\d-\\d\\d)', re.IGNORECASE|re.MULTILINE) \n    re_class_code = re.compile(r'class code:(\\s+)([0-9a-z]+)', re.IGNORECASE|re.MULTILINE)\n    re_requirements = re.compile(r'(REQUIREMENTS?\/\\s?MINIMUM QUALIFICATIONS?)(.*)(PROCESS NOTE)', re.MULTILINE)\n    re_duties = re.compile(r'(DUTIES)(.*)(REQ[A-Z])', re.MULTILINE)\n    re_education_years = re.compile(r'(.*)college(.*)university(.*)\\s+(\\d+)\\s+(.*)(semester)', re.IGNORECASE|re.MULTILINE)\n    re_school_type = re.compile(r'(.*)qualifying(.*)education(.*)from(.*)accredited(.*)', re.IGNORECASE|re.MULTILINE)\n    re_edu_major = re.compile(r'(major|degree) in(.*)', re.IGNORECASE|re.MULTILINE)\n    re_exp_length = re.compile(r'(.*)years(.*)full(.*)experience(.*)', re.IGNORECASE|re.MULTILINE)\n    re_fulltime_parttime = re.compile(r'(.*)(full|part)(.*)experience(.*)', re.IGNORECASE|re.MULTILINE)\n    re_exp_job_class_title = re.compile(r'(.*)experience as(.*)', re.IGNORECASE|re.MULTILINE)\n    re_course_count = re.compile(r'(.*)completion of(.*)(course?)(.*)', re.IGNORECASE|re.MULTILINE)\n    re_drivers_license_req = re.compile(r'(.*driver\\'s(\\s*)license)', re.IGNORECASE|re.MULTILINE)\n    re_addtl_lic = re.compile(r'as a (licensed)(.+[;,.])', re.IGNORECASE|re.MULTILINE)\n    re_exam_type = re.compile(r'THIS EXAM( |INATION )IS TO BE GIVEN(.*)BASIS', re.IGNORECASE|re.MULTILINE)\n    re_entry_salary_gen = re.compile(r'(\\$\\d+,\\d+)((\\s(to|and)\\s)(\\$\\d+,\\d+))?')\n    re_entry_salary_dwp = (r' (Water and Power is) (\\$\\d+,\\d+)((\\s(to|and)\\s)(\\$\\d+,\\d+))?')\n    \n    for filename in _bulletins:\n        with open(bulletins_dir + \"\/\" + filename, 'r', errors='ignore') as f:\n            file = f.read().replace('\\t', '')\n            # job_class_title\n            position = [x for x in file.split('\\n') if x.isupper()][0]\n            \n            file = file.replace('\\n', ' ')\n            #file = ' '.join([x + '\\n' for x in file.split(' ') if x.isupper()])\n            #print(file)\n            # open_date\n            open_date_found = re.search(re_open_date, file)\n            if open_date_found is not None:\n                open_date = datetime.strptime(open_date_found.group(3), '%m-%d-%y')\n            else:\n                open_date = np.nan\n              \n            # job_class_no\n            class_no_found = re.search(re_class_code, file)\n            if class_no_found is not None:\n                class_no = class_no_found.group(2)\n            else:\n                class_no = np.nan\n                \n            # requirements\n            requirements_found = re.search(re_requirements, file)\n            if requirements_found is not None:\n                requirements = requirements_found.group(2)\n            else:\n                requirements = \"\"#re.search('(.*)NOTES?', re.findall(r'(REQUIREMENTS?)(.*)(NOTES?)', file)[0][1][:1200]).group(1)\n            #print(requirements)\n            \n            # job_duties\n            duties_found = re.search(re_duties, file)\n            if duties_found is not None:\n                duties = duties_found.group(2)\n            else:\n                duties = \"\"\n                \n            # education_years\n            education_years_found = re.search(re_education_years, requirements)\n            if education_years_found is not None:\n                education_years = education_years_found.group(4).strip()\n            else:\n                education_years = np.nan\n                \n            # school_type\n            school_type_found = re.search(re_school_type, file)\n            if school_type_found is not None:\n                school_type = school_type_found.group(4)\n                school_type = school_type.split('accredited')[0]\n            else:\n                school_type = ''\n                \n            # education_major\n            # course_subjects\n            course_subjects = []\n            education_major_found = re.search(re_edu_major, requirements)\n            if education_major_found is not None:\n                education_major = education_major_found.group(2)\n                education_major = education_major.strip().strip('.').split(';')[0]\n                education_major = education_major.replace('and\/or', 'or').replace('landscape', 'lnadscape').split('and')[0]\n                education_major = education_major.replace('lnadscape', 'landscape').split( 'or in' )[0]\n                education_major = education_major.split( 'or upon' )[0]\n                education_major = education_major.split( '.' )\n\n                education_major = string.capwords(education_major[0])\n\n                education_major_repl = education_major.replace(' or ', ',').replace(' Or ', ',').replace('A Related Field','').strip(',').split(',')\n                if 0 < len(education_major_repl):\n                    for major in education_major_repl:\n                        if 0 < len(major.split(' or')):\n                            for submajor in major.split(' or'):\n                                course_subjects.append(submajor.strip())\n                        else :\n                            course_subjects.append(major.strip())                   \n            else:\n                education_major = '-'\n                \n            # experience_length\n            experience_length_found = re.search(re_exp_length, file)\n            if experience_length_found is not None:\n                experience_length = experience_length_found.group(1).split()       \n                if len(experience_length) > 0:\n                    experience_length = experience_length[-1]\n                    if '.' in experience_length:\n                        experience_length = experience_length.split('.')[-1]\n                    try:\n                        experience_length = w2n.word_to_num(re.sub(r'[^a-zA-Z]+', '', experience_length))\n                    except:\n                        pass\n                else:\n                    experience_length = np.nan\n            else:\n                experience_length = np.nan\n            \n            # fulltime_parttime\n            fulltime_parttime_found = re.search(re_fulltime_parttime, requirements)\n            if fulltime_parttime_found is not None:\n                fulltime_parttime = fulltime_parttime_found.group(2)         \n                fulltime_parttime = (fulltime_parttime + '_TIME').upper()\n            else:\n                fulltime_parttime = None\n                \n            # exp_job_class_title\n            exp_job_class_title_found = re.search(re_exp_job_class_title, requirements)\n          \n            if exp_job_class_title_found is not None:\n\n                exp_job_class_title = exp_job_class_title_found.group(2)         \n                exp_job_class_title = exp_job_class_title.strip().strip('.').lstrip('a ').lstrip('an ')\n                broken = 0 \n                if len(exp_job_class_title.split(';')) > 0:\n                    for line in exp_job_class_title.split(';'):\n                        if len(line.split('with')) > 0:\n                            for sub_line in line.split('with'):\n                                if 'Los Angeles' not in sub_line:\n                                    sub_line = sub_line.strip().strip('.').lstrip('a ').lstrip('an ').split(' or in')\n                                    sub_line = sub_line[0]\n                                    if '.' not in sub_line:\n                                        exp_job_class_title = string.capwords(sub_line.strip().strip('.').strip(','))\n                                        exp_job_class_title = exp_job_class_title.split('.')\n                                        exp_job_class_title = exp_job_class_title[0]\n                                        broken = 1 \n                                        break\n                        if broken == 1:\n                            break\n                else: \n                    exp_job_class_title = '-'\n\n            # course_count\n            course_count_found = re.search(re_course_count, requirements)\n            course_count = 0\n            if course_count_found is not None:\n                course_count = course_count_found.group(2)        \n                course_count = course_count.split('course')[0]\n                \n                if len(course_count.strip().split(' ')) > 0:\n                    for line in course_count.split(' '):\n                        try:\n                            course_count = w2n.word_to_num(line)\n                            break\n                        except:\n                            continue\n    \n            # course_subject\n            course_subject = '|'.join(course_subjects)\n            \n            # drivers_license_req\n            drivers_license = []\n            drivers_license_req_found = re.search(re_drivers_license_req, file)\n            if drivers_license_req_found is not None:\n                drivers_license_req = drivers_license_req_found.group()\n                licenses = re.findall(r'([C,c]lass ([a-zA-Z]))', drivers_license_req)\n                if len(licenses) > 0:\n                    for license in licenses:\n                        drivers_license.append(license[1])\n\n                if('may' not in drivers_license_req and ('valid' in drivers_license_req or 'require' in drivers_license_req)):\n                    drivers_license_req = 'R'\n                elif('may' in drivers_license_req and ('valid' in drivers_license_req or 'require' in drivers_license_req)):\n                    drivers_license_req = 'P'\n            else:\n                drivers_license_req = ''\n            \n            # driv_lic_type\n            driv_lic_type = ','.join(set(drivers_license))\n            \n            # addtl_lic\n            addtl_lic_found = re.search(re_addtl_lic, file)\n            if addtl_lic_found is not None:\n                addtl_lic = addtl_lic_found.group(2)\n                addtl_lic = addtl_lic.strip().split('.')[0]\n                addtl_lic = addtl_lic.strip().split('issued')[0]\n                addtl_lic = addtl_lic.strip().split(';')[0]\n            else:\n                addtl_lic = np.nan\n                \n            # exam_type\n            exam_type = '-'\n            exam_types = []\n            exam_type_found = re.search(re_exam_type, file)\n            if exam_type_found is not None:\n                exam_type = exam_type_found.group(2).upper()\n                if('OPEN COMPETITIVE' in exam_type and 'INTERDEPARTMENTAL PROMOTION' in exam_type):\n                    exam_types.append('OPEN_INT_PROM')\n                else:    \n                    if('OPEN COMPETITIVE' in exam_type):\n                        exam_types.append('OPEN')\n                    if('INTERDEPARTMENTAL PROMOTION' in exam_type):\n                        exam_types.append('INT_DEPT_PROM')\n\n                if(' DEPARTMENTAL PROMOTION' in exam_type):\n                    exam_types.append('DEPT_PROM')\n            else:\n                exam_types.append('-')\n            exam_type = ','.join(exam_types)\n            \n            # entry_salary_gen\n            salary_gen = 0\n            try:\n                if re.search(re_entry_salary_gen, file).group():\n                    salary_gen = []\n                    if re.search(re_entry_salary_gen, file).group(1):\n                        salary_gen.append((re.search(re_entry_salary_gen, file).group(1)).strip())\n                    if re.search(re_entry_salary_gen, file).group(5):\n                        salary_gen.append(re.search(re_entry_salary_gen, file).group(5).strip())\n                    salary_gen = '-'.join(salary_gen)\n            except:\n                salary_gen = 0\n                \n            # entry_salary_dwp\n            salary_dwp = 0\n            try:\n                if re.search(re_entry_salary_dwp, file).group():\n                    salary_dwp = []\n                    if re.search(re_entry_salary_dwp, file).group(2):\n                        salary_dwp.append((re.search(re_entry_salary_dwp, file).group(2)).strip())\n                    if re.search(re_entry_salary_dwp, file).group(6):\n                        salary_dwp.append((re.search(re_entry_salary_dwp, file).group(6)).strip())\n                    salary_dwp = '-'.join(salary_dwp)\n            except:\n                salary_dwp = 0\n            \n            df = df.append({'FILE_NAME': filename, 'JOB_CLASS_TITLE': position, 'JOB_CLASS_NO': class_no, 'JOB_DUTIES': duties,\n                            'EDUCATION_YEARS': education_years, 'SCHOOL_TYPE': school_type, 'EDUCATION_MAJOR': education_major,\n                            'EXPERIENCE_LENGTH': experience_length, 'FULL_TIME_PART_TIME': fulltime_parttime, 'EXP_JOB_CLASS_TITLE': exp_job_class_title,\n                            'COURSE_COUNT': course_count, 'COURSE_SUBJECT': course_subject, 'DRIVERS_LICENSE_REQ': drivers_license_req,\n                            'DRIV_LIC_TYPE': driv_lic_type, 'ADDTL_LIC': addtl_lic, 'EXAM_TYPE': exam_type,\n                            'ENTRY_SALARY_GEN': salary_gen, 'ENTRY_SALARY_DWP': salary_dwp,\n                            'OPEN_DATE': open_date}, ignore_index=True)\n            \n            #break\n    return df","349b64e0":"df = pd.DataFrame(columns=['FILE_NAME', 'JOB_CLASS_TITLE', 'JOB_CLASS_NO', 'JOB_DUTIES',\n                            'EDUCATION_YEARS', 'SCHOOL_TYPE', 'EDUCATION_MAJOR', 'EXPERIENCE_LENGTH', 'FULL_TIME_PART_TIME', \n                           'EXP_JOB_CLASS_TITLE', 'COURSE_COUNT', 'COURSE_SUBJECT', 'DRIVERS_LICENSE_REQ', 'DRIV_LIC_TYPE', 'ADDTL_LIC',\n                           'EXAM_TYPE', 'ENTRY_SALARY_GEN', 'ENTRY_SALARY_DWP', 'OPEN_DATE'])\ndf = process_bulletins(df, bulletins)\ndf","08eca650":"df.to_csv(\"competition_output.csv\")\nkaggle_data.to_csv(\"data_dictionary.csv\")","24031524":"df.describe()","c126ff26":"PDF is the same data (?)","2629aac3":"**Check filenames**","4bf33f30":"Dictionary","d51bbdd2":"### Structuring the Job Bulletin Data into a CSV\n\nHere we're collecting data from all of the job bulletins and storing it in a CSV.\n\nThe code block below goes through all of the job bulletins, extracts data, and puts it in a DataFrame.","47a7be8f":"# City of Los Angeles: Job Bulletins into CSV \n\n### Introduction\n\nThe City of Los Angeles has a variety of job classes, but unfortunately much of the data regarding these classes is stored in free form job bulletins.\n\nWe see tremendous value in structuring this data as it could help us better understand our workforce, and  improve our hiring processes.","ca553847":"683 files\n667 job titles\n","77b08520":"**Additional Data**","ca370c13":"Print a single job bulletin","eb0bbeee":"We are now taking the data within the list, putting it in a dataframe so that we can conduct our analysis, and saving the dataframe as a CSV.","caabcedd":"Below is the standard Kaggle intro cell, which gives an explanation of the environment we're operating in as well as imports pandas, numpy, and os.","7fc957b2":"### Analysis\n\nNow that we have the data structured in a dataframe, we can conduct our analysis."}}