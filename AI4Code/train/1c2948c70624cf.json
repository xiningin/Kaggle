{"cell_type":{"6ff680e3":"code","476c7c5c":"code","f1c6b9f1":"code","50c42233":"code","68faa86a":"code","6237b20d":"code","a1215034":"code","3a3ba68e":"code","e9486c21":"code","5b8e487e":"code","ac85b049":"code","e2e66ad8":"code","898ed7d2":"code","549d463f":"code","e468ad1c":"code","99ecff6c":"code","30346804":"code","3cf2ebfe":"code","e624543e":"code","75ea7a59":"code","a83230f5":"code","e20e17e8":"code","3a2867a9":"code","9fded209":"code","7196efa7":"code","142bb6e2":"code","8e593436":"code","9a4614a5":"code","cc9395dd":"markdown","7bb55de4":"markdown","8763fdbf":"markdown"},"source":{"6ff680e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","476c7c5c":"#Importing required libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\nimport seaborn as sns","f1c6b9f1":"#Reading the data\napps=pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv', engine='python')\napps.head()","50c42233":"apps.info()","68faa86a":"apps['Category'].value_counts()","6237b20d":"#Checking for null values using a heatmap\nsns.heatmap(apps.isna())","a1215034":"#Imputing the null values in the rating column with the median of that column\napps['Rating'] = apps['Rating'].fillna(apps['Rating'].median())","3a3ba68e":"#Dropping the rest of the nulls and duplicates\napps.dropna(inplace = True) \napps.drop_duplicates(inplace=True) ","e9486c21":"#Converting Last Updated into a datetime type value\napps['Last Updated']=pd.to_datetime(apps['Last Updated'])\napps['before update']=apps['Last Updated'].max()-apps['Last Updated']","5b8e487e":"#Cleaning Installs for unnecessary characters\napps['Installs']=apps['Installs'].str.replace(',','').str.replace('+','').astype(int)\napps['Installs']","ac85b049":"#Converting Reviews to integer\napps['Reviews']=apps['Reviews'].astype(int)","e2e66ad8":"apps['Size']=apps['Size'].str.replace('M','e+6').str.replace('k','e+3').str.replace('Varies with device','0').astype('float')\napps['Price']=apps['Price'].str.replace('$','').astype('float')","898ed7d2":"apps.info()","549d463f":"#App distribution by category\nplt.figure(figsize=(40,12))\napps['Category'].value_counts().plot(kind='pie')","e468ad1c":"#Plotting the numerical values to find correlations\nsns.pairplot(apps, hue='Type')","99ecff6c":"#Average Rating of the Apps\napps['Rating'].plot(kind='hist', bins=20)","30346804":"#Content Rating Distribution\nplt.figure(figsize=(20,8))\napps['Content Rating'].value_counts().plot(kind='pie')","3cf2ebfe":"#Most Installed Category => Communication\nplt.figure(figsize=(40,20))\nsns.barplot(x='Category',y='Installs', data=apps)","e624543e":"#Average Rating by Category\ngroups = apps.groupby('Category').filter(lambda x: len(x) > 286).reset_index()\ncategoryrating = groups['Rating'].hist(by=groups['Category'], sharex=True, figsize=(20,20))","75ea7a59":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics","a83230f5":"#Separating Target Column\nX=apps[['Category','Reviews','Size','Installs','Type','Price','Content Rating','Genres','before update']]\ny=apps['Rating']\n\n#Scaling 'before update' column\nscaler=MinMaxScaler()\nscaler.fit(X[['before update']])\nX[['before update']]=scaler.transform(X[['before update']])\nX","e20e17e8":"#Encoding categorical values as model works with numerical data\nencoded_x=pd.get_dummies(X, columns=['Category',\"Content Rating\",\"Type\",\"Genres\"])\nencoded_x","3a2867a9":"#Splitting the cleaned and encoded data into training and testing sets\nX_train,X_test,y_train,y_test=train_test_split(encoded_x,y,test_size = 0.25, random_state = 10)","9fded209":"#Scaling data for better model score\nsc=StandardScaler()\nX_train=sc.fit_transform(X_train)\nX_test=sc.transform(X_test)\nX_train.shape,X_test.shape","7196efa7":"#Training the model\nrf= RandomForestRegressor(n_jobs=-1)\nrf.fit(X_train,y_train)","142bb6e2":"#Predictiong the ratings and checking model score\npredictions=rf.predict(X_test)\n'Training Score:', rf.score(X_train,y_train),'Testing Score:',rf.score(X_test,y_test)","8e593436":"'Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, predictions))","9a4614a5":"predict_dataframe = pd.DataFrame(data={\"Predicted\": predictions, \"Actual\": y_test})\npredict_dataframe","cc9395dd":"# **Data Cleaning**","7bb55de4":"# **Data Modeling**","8763fdbf":"# **Data Visualiztion**"}}