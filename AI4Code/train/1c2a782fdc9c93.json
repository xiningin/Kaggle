{"cell_type":{"6ff7527b":"code","2f9f2a46":"code","ecad4be2":"code","d040e5b7":"code","a17142e7":"code","caa28ef3":"code","1d6ad65f":"code","785ee21a":"code","ebe3a08e":"code","1b85470e":"code","e6452071":"code","f8805d0d":"code","7b07e3c5":"code","9dcf9634":"code","cf7abba5":"code","44cbe368":"code","07c3be21":"code","5d6ecee3":"code","994d8a7a":"code","647ee258":"code","8296b147":"code","1ab6cf5d":"code","103a5ca1":"code","44aa0156":"code","11de8efd":"code","35c6e102":"code","8695c8a6":"code","33e31872":"code","db3c5aeb":"code","7bcd89f1":"code","db16df32":"code","d2a54cde":"code","4cd0f43c":"code","bf00bae1":"code","cf3a250b":"code","e4db7e96":"code","f554b276":"code","95e2234e":"code","035bf4f6":"code","371a3b77":"code","e0cac238":"code","13c1fe8e":"code","46f2f6a1":"code","f51e045d":"code","35e0f9f3":"code","7098b469":"code","6c7fe79a":"code","7a4afe48":"code","d1006508":"code","54ca0699":"code","0ad444af":"code","a8ca9b21":"code","f238238d":"code","cd51fb4e":"code","e402eb8f":"code","46e6e54b":"code","28cc495f":"code","dcbab49e":"code","77134dd3":"markdown","3d952a9b":"markdown","66522e40":"markdown","f3c7b64e":"markdown","922c1f47":"markdown","148c7e06":"markdown","ea71036e":"markdown","4769a553":"markdown","b0d99349":"markdown","d72618dd":"markdown","935e1f9b":"markdown","a241b65b":"markdown","f775b459":"markdown","a621adea":"markdown","127d7838":"markdown","1322de4d":"markdown","b1051aa8":"markdown","fe66d22c":"markdown","5ec8f1f2":"markdown","8302e182":"markdown","7c3c6fed":"markdown","8d5d89e5":"markdown","4d89966e":"markdown","d59819b2":"markdown","52bfb265":"markdown","31ed2ecc":"markdown","05c4f4de":"markdown","f73d8d59":"markdown","4af3e287":"markdown","09774cdb":"markdown","6c73a061":"markdown","0936eb15":"markdown"},"source":{"6ff7527b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2f9f2a46":"data = pd.read_csv(\"..\/input\/WA_Fn-UseC_-HR-Employee-Attrition.csv\")","ecad4be2":"data.head()","d040e5b7":"data.describe()","a17142e7":"import seaborn as sns \nimport matplotlib.pyplot as plt ","caa28ef3":"sns.distplot(data['Age'])","1d6ad65f":"sns.set(style = 'whitegrid')\ndailyrate = sns.barplot(x='Department', y='DailyRate' , data = data , estimator = sum  )\n","785ee21a":"from numpy import mean , median \nsns.set(style = 'whitegrid')\navg = sns.barplot(x='Department', y='DailyRate' , data = data , estimator = np.median  )","ebe3a08e":"sns.set(style = 'whitegrid')\nsns.barplot(x='Department', y='DailyRate' , data = data , estimator = np.median, hue = data['Gender'])","1b85470e":"sns.barplot(x = data['BusinessTravel'] , y = data['EmployeeCount'],estimator = np.sum, hue = data['Attrition'])","e6452071":"sns.scatterplot(x= data['MonthlyIncome'], y = data['TotalWorkingYears'], hue = data['Attrition'])","f8805d0d":"sns.countplot(x= data['Attrition'], data = data, hue = data['Gender'])","7b07e3c5":"sns.countplot(x = data['MaritalStatus'],hue=data['Attrition'] , data = data)","9dcf9634":"sns.barplot(y=data['JobRole'], x=data['JobSatisfaction'],estimator = np.mean, data = data)","cf7abba5":"sns.set(style = 'white')\nsns.barplot(x=data['EducationField'], y=data['HourlyRate'], estimator = np.median, hue = data['Gender'])","44cbe368":"data.isnull().sum()","07c3be21":"data.dtypes","5d6ecee3":"data_replace = data.copy()","994d8a7a":"obj_df = data.select_dtypes(include=['object']).copy()\nobj_df.head()","647ee258":"obj_df[obj_df.isnull().any(axis=1)]","8296b147":"obj_df['BusinessTravel'].value_counts()","1ab6cf5d":"obj_df['BusinessTravel'] = obj_df['BusinessTravel'].astype('category')\nobj_df.dtypes","103a5ca1":"\ndata['BusinessTravel'] = obj_df['BusinessTravel'].cat.codes\ndata.head()","44aa0156":"obj_df['Department'] = obj_df['Department'].astype('category')\nobj_df['EducationField'] = obj_df['EducationField'].astype('category')\nobj_df['Gender'] = obj_df['Gender'].astype('category')\nobj_df['JobRole'] = obj_df['JobRole'].astype('category')\nobj_df['MaritalStatus'] = obj_df['MaritalStatus'].astype('category')\nobj_df['Over18'] = obj_df['Over18'].astype('category')\nobj_df['OverTime'] = obj_df['OverTime'].astype('category')\nobj_df['Attrition'] = obj_df['Attrition'].astype('category')","11de8efd":"data['Department'] = obj_df['Department'].cat.codes\ndata['EducationField'] = obj_df['EducationField'].cat.codes\ndata['Gender'] = obj_df['Gender'].cat.codes\ndata['JobRole'] = obj_df['JobRole'].cat.codes\ndata['MaritalStatus'] = obj_df['MaritalStatus'].cat.codes\ndata['Over18'] = obj_df['Over18'].cat.codes\ndata['OverTime'] = obj_df['OverTime'].cat.codes\ndata['Attrition'] = obj_df['Attrition'].cat.codes\n\ndata.head()","35c6e102":"data_model = data.copy()","8695c8a6":"data_model.head()","33e31872":"data_model.dtypes","db3c5aeb":"corr = data_model.corr()\nf,ax = plt.subplots(figsize=(16,9))\nsns.heatmap(corr, vmax = 0.8,square ='TRUE' )","7bcd89f1":"k=10\ncols=corr.nlargest(k,'Attrition')['Attrition'].index\ncm= np.corrcoef(data_model[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar = True ,annot = True,fmt ='.2f',annot_kws ={'size':10}, yticklabels=cols.values, xticklabels=cols.values )\n#annot_kws -  provides access to how annotations are displayed, rather than what is displayed\nplt.show()","db16df32":"import statsmodels.api as sm","d2a54cde":"x = data_model.drop(['Attrition'],axis=1)\ny = data_model['Attrition']","4cd0f43c":"#using backward elimination method \nX_1 = sm.add_constant(x)","bf00bae1":"#Fitting sm.OLS method \nmodel = sm.OLS(y,X_1).fit()\nmodel.pvalues","cf3a250b":"#Backward elimination \ncols = list(x.columns)\npmax = 1\nwhile (len(cols)>0):\n    p =[]\n    x_1 = x[cols]\n    x_1 = sm.add_constant(x_1)\n    model = sm.OLS(y,x_1).fit()\n    p= pd.Series(model.pvalues.values[:],index = cols)\n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if (pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break \n            \n        ","e4db7e96":"selected_features_BE = cols\nselected_features_BE","f554b276":"data_new = data_model[selected_features_BE]\ndata_new.head()","95e2234e":"#Logistic regression\n#x = data_model.drop(['Attrition'],axis=1)\n#x.head()\nX = data_new\n\n\n","035bf4f6":"X.shape","371a3b77":"Y = y\nY.head()","e0cac238":"\nfrom sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y = train_test_split(X,Y,test_size=0.25,random_state=0)","13c1fe8e":"from sklearn.linear_model import LogisticRegression \nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(train_x,train_y)","46f2f6a1":"y_pred = classifier.predict(test_x)","f51e045d":"from sklearn.metrics import confusion_matrix \ncm = confusion_matrix(test_y,y_pred)","35e0f9f3":"from sklearn.metrics import accuracy_score\naccu = accuracy_score(test_y,y_pred)\nprint(\"Logistic regression model accuracy is {}\".format(accu*100))","7098b469":"from sklearn.ensemble import RandomForestClassifier\n","6c7fe79a":"classifier = RandomForestClassifier(n_estimators = 15, criterion = 'entropy',random_state =0 )\nclassifier.fit(train_x,train_y)","7a4afe48":"y_random = classifier.predict(test_x)","d1006508":"cm_random = confusion_matrix (test_y,y_random)","54ca0699":"accu_random = accuracy_score(test_y,y_random)\nprint(\"Random Forest model accuracy is {}\".format(accu_random*100))","0ad444af":"from sklearn.tree import DecisionTreeClassifier\nclassifier_dec = DecisionTreeClassifier(criterion = 'entropy',random_state=0)\nclassifier_dec.fit(train_x,train_y)","a8ca9b21":"y_dec = classifier.predict(test_x)","f238238d":"cm = confusion_matrix(test_y,y_dec)\naccu_dec = accuracy_score(test_y,y_dec)\nprint(\"Decision tree model accuracy is {}\".format(accu_dec*100))","cd51fb4e":"from sklearn.metrics import mean_squared_error \nimport xgboost as xgb\nfrom math import sqrt \n","e402eb8f":"def rmse(test_y,y_xg):\n    return (np.sqrt(mean_squared_error(test_y,y_xg)))\n\nregr = xgb.XGBRegressor( colsample_bytree = 0.2, \n                        gamma = 0.0,\n                        learning_rate = 0.01,\n                        max_depth = 4,\n                        min_child_weight = 1.5,\n                        n_estimators = 7200, \n                        reg_alpha = 0.9 , \n                        reg_lambda = 0.6,\n                        subsample = 0.2,\n                        seed = 42, \n                        silent = 1 \n        )\n\nregr.fit(train_x, train_y )","46e6e54b":"y_xg = regr.predict(test_x)","28cc495f":"rmse(test_y,y_xg)","dcbab49e":"\nprint(\"XG boost model accuracy is {}\".format((1-rmse(test_y,y_xg))*100))","77134dd3":"**There is no missing values in any of the categorical values**","3d952a9b":"**How many of them satisfied with the job**","66522e40":"**No multicorrelated metrics- so ready to go for modeling  techniques**","f3c7b64e":"**Treat categorical labels and change into numeric  values**","922c1f47":"**Any missing values in the categorical columns**","148c7e06":"**Average daily rate by Department**","ea71036e":"****XG boost model****","4769a553":"**Feature selection:** *Using P-value*","b0d99349":"\n![Attrition](http:\/\/thecontextofthings.com\/wp-content\/uploads\/2017\/01\/employee-attrition.jpg)","d72618dd":"****Attrition based on business travel****","935e1f9b":"****Take top 10 correlated metrics****","a241b65b":"****Median daily rate by gender and**** department wise ","f775b459":"**Splitting the dataset into train and test**","a621adea":"**Checking for converting the categorical to numeric is successful. Now I can apply the same concept to the rest of the variables**","127d7838":"**Hourly rate with respect to education field and gender**","1322de4d":"****Correlation plot****","b1051aa8":"**Read the csv file**","fe66d22c":"**Introduction:** \n          In this attrition dataset, will perform the EDA to find out the most important metrics which are all playing major role in employee attrition. \n    \n    Basic things need to find out from this dataset would be : \n    1. How satisfied out employees \n    2. Hourly rate related with education and gender \n    3. How job invovlment correlated with job satisfaction ","5ec8f1f2":"****Decision tree model**** ","8302e182":"**Data overview**","7c3c6fed":"**Conclusion:****\n        Logistic regression is performing  better than other models. Statiscally analyzed the data and there is no missing values in this pre-defined non-null values dataset. Lot of things like missing values and outliers are not need in this, so after finishing the basic EDA - directly jump into modeling. \n         Welcoming thoughts on improving the analysis in the dataset!!! ","8d5d89e5":"**Fitting Logistic regression to the training set**","4d89966e":"**Proposition of attrition in this dataset**","d59819b2":"****#Find and Replace method in replacing categorical to numerics values** ","52bfb265":"Types of techniques for encoding the categorical data\n1. Replacing values\n2. Encoding labels\n3. One-Hot encoding\n4. Binary encoding\n5. Backward difference encoding\n6. Miscellaneous features","31ed2ecc":"**Total daily rate by department wise**","05c4f4de":"****How satisfied the employees are?****","f73d8d59":"**Any Missing values**","4af3e287":"****Random Forest classification model**","09774cdb":"**Making the confusion matrix** ","6c73a061":"**Predicting the test results**","0936eb15":"**How marital status impacts the attrition**"}}