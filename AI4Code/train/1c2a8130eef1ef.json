{"cell_type":{"68d1702e":"code","c6afffbb":"code","e4fbab32":"code","5148944a":"code","f83813a5":"code","15d83a69":"code","df4ca56f":"code","22517f97":"code","ec60b386":"code","63590dc9":"code","6e1d13bb":"code","67d545b2":"code","dc640dee":"code","23958f93":"markdown"},"source":{"68d1702e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c6afffbb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance  \n\n# Selection model\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score,GridSearchCV,StratifiedKFold \n\n# Metrics\nfrom sklearn.metrics import accuracy_score, roc_auc_score,f1_score, confusion_matrix, classification_report\n\n# Visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline","e4fbab32":"def evalua(y_pred,y_test):\n    \n    # Evaluate of predictions \n    accuracy = accuracy_score(y_test, y_pred) \n    roc = roc_auc_score(y_test, y_pred)\n    f1=f1_score(y_test, y_pred)\n\n    # Data test results\n    print('Evaluation of predictions: \\n')\n    print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n    print(\"Area ROC: %.2f%%\" % (roc * 100.0))\n    print(\"F1 Score: %.2f%%\" % (f1 * 100.0))","5148944a":"original = pd.read_excel('..\/input\/bank-loan-modelling\/Bank_Personal_Loan_Modelling.xlsx',\"Data\")","f83813a5":"original.head()","15d83a69":"original.info()","df4ca56f":"df = original\ndf.drop(['ID'],axis = 1, inplace = True)\nx = df.drop(['Personal Loan'], axis = 1)\ny = df['Personal Loan']","22517f97":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33)","ec60b386":"# Grid Search \nmodel = XGBClassifier() \n\nlearning_rate = [0.01, 0.1, 0.2] \nmax_depth=[6]\nbooster=['gbtree']\nn_estimators=[100]\nnthread=[6]\nmin_child_weight=[1,5,10,20,30]\n\nparam_grid = dict(min_child_weight=min_child_weight,nthread=nthread,learning_rate=learning_rate,max_depth=max_depth,booster=booster,n_estimators=n_estimators)\nkfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=7) \ngrid_search = GridSearchCV(model, param_grid, scoring=\"accuracy\", n_jobs = 10, cv=kfold) \ngrid_result = grid_search.fit(x_train, y_train)","63590dc9":"# Summarize results   \nprint(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\nmeans = grid_result.cv_results_['mean_test_score'] \nstds = grid_result.cv_results_['std_test_score'] \nparams = grid_result.cv_results_['params']","6e1d13bb":"# Evaluate of predictions \nmodel_best = grid_search.best_estimator_\ny_pred=model_best.predict(x_test)\nevalua(y_pred,y_test)\n\n# Plot feature importance \nplot_importance(model_best) \nplt.show()","67d545b2":"# Classification report\nprint('Classification Report:\\n')\nprint(classification_report(y_test, y_pred),'\\n')","dc640dee":"# Confusion matrix\ncm =confusion_matrix(y_test,y_pred)\n\nplt.clf()\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Wistia)\nclassNames = ['Negative','Positive']\nplt.title('Confusion Matrix - Test Data')\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\ntick_marks = np.arange(len(classNames))\nplt.xticks(tick_marks, classNames, rotation=45)\nplt.yticks(tick_marks, classNames)\ns = [['TN','FP'], ['FN', 'TP']]\n \nfor i in range(2):\n    for j in range(2):\n        plt.text(j,i, str(s[i][j])+\" = \"+str(cm[i][j]))\nplt.show()","23958f93":"## Features are detailed below:\n\n* Age: Customer's age\n* Experience: Number of years of professional experience\n* Income: Annual income of the customer\n* ZIPCode: Home Address ZIP code\n* Family: Family size of the customer\n* CCAvg: Average spending on credit cards per month\n* Education: 1: Undergrade; 2: Graduate; 3: Advanced\/Professional\n* Mortgage: Value of house mortgage if any\n* Securities Account: Does the customer have a securities account with the bank?\n* CD Account: Does the customer have a certificate of deposit (CD) account with the bank?\n* Online: Does the customer use internet banking facilities?\n* CreditCard: Does the customer uses a credit card issued by UniversalBank?\n* Personal Loan: Did this customer accept the personal loan offered in the last campaign?"}}