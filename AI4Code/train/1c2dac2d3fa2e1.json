{"cell_type":{"11727ffc":"code","efe10f92":"code","f7a36bdb":"code","3fba955d":"code","d84beaa7":"code","78090183":"code","0bfbf974":"code","4d7125ca":"code","57f8c9d9":"code","bb975b10":"code","e5ca1317":"code","81c75026":"code","fb331bbf":"code","ea22728c":"code","8227d788":"code","5845a24b":"code","de236e8d":"code","4b4675ed":"code","c8b79846":"code","e8abd093":"code","910aa467":"code","95d5353a":"code","573ce130":"code","dc6d144e":"code","8e319e83":"code","70460e9d":"code","eab95711":"code","49ca89ef":"code","3a48bd53":"code","81f7ea7d":"code","48748fae":"code","409fbb31":"code","b6548e8c":"code","4964044c":"code","a4733429":"code","d7407d82":"code","f7c5f0d8":"code","83f5f0ed":"code","bdba9665":"markdown","d7606d60":"markdown","af54ed2d":"markdown","8673807c":"markdown","1d312668":"markdown","f61c8f71":"markdown","90b2a9e0":"markdown","d72b0429":"markdown","ca8f753b":"markdown","8a6ca9c8":"markdown","06118af5":"markdown","a01c2c17":"markdown","55ed4bc8":"markdown"},"source":{"11727ffc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport matplotlib as mpl\nimport plotly.express as px\n### so that u dont have warnings\nfrom warnings import filterwarnings\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import mean_absolute_error \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import median_absolute_error\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.svm import SVR\nfrom sklearn.svm import SVC\nfilterwarnings('ignore')\n# Custom colors\nclass color:\n    S = '\\033[1m' + '\\033[93m'\n    E = '\\033[0m'\n    \nmy_colors = [\"#E7C84B\", \"#4EE4EA\", \"#4EA9EA\", \"#242179\", \"#AB51E9\", \"#E051E9\"]\nprint(color.S+\"Notebook Color Scheme:\"+color.E)\nsns.palplot(sns.color_palette(my_colors))\n\n# Set Style\nsns.set_style(\"white\")\nmpl.rcParams['xtick.labelsize'] = 16\nmpl.rcParams['ytick.labelsize'] = 16\nmpl.rcParams['axes.spines.left'] = False\nmpl.rcParams['axes.spines.right'] = False\nmpl.rcParams['axes.spines.top'] = False\nplt.rcParams.update({'font.size': 17})","efe10f92":"# Read in the training data\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\n\n# Print some useful information\nprint(color.S+\"Train Data has:\"+color.E, \"{:,}\".format(train.shape[0]), \"observations.\", \"\\n\" +\n      color.S+\"Number of Missing Values:\"+color.E, train.isna().sum()[0], \"\\n\" +\n      \"\\n\" +\n      color.S+\"Head of Training Data:\"+color.E)\ntrain.head(5)","f7a36bdb":"test_df = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\n\n# Print some useful information\nprint(color.S+\"Test Data has:\"+color.E, \"{:,}\".format(test_df.shape[0]), \"observations.\", \"\\n\" +\n      color.S+\"Number of Missing Values:\"+color.E, test_df.isna().sum()[0], \"\\n\" +\n      \"\\n\" +\n      color.S+\"Head of Training Data:\"+color.E)\ntest_df.head(5)","3fba955d":"train.isna()","d84beaa7":"train.info()","78090183":"train.shape","0bfbf974":"train.dtypes","4d7125ca":"train.describe().style.background_gradient(cmap = 'copper')","57f8c9d9":"train.drop(['date_time'],axis=1,inplace=True)","bb975b10":"train.head()","e5ca1317":"print('Heatmap')\nplt.figure(figsize=(15,10))\nsns.heatmap(train.corr(),annot=True,cmap='coolwarm')","81c75026":"sns.jointplot(x =train['deg_C'], y = train['target_benzene'], kind = 'hist',color = 'pink')\n","fb331bbf":"sns.jointplot(x = train['relative_humidity'], y = train['target_benzene'], kind = 'hex', color = 'red')\n","ea22728c":"sns.jointplot(x = train['absolute_humidity'], y = train['target_benzene'], kind = 'kde', color = 'grey')","8227d788":"fig = px.histogram(train, x=\"absolute_humidity\",color=\"target_benzene\",\n                   marginal=\"box\",\n                   hover_data=train.columns,\n                  color_discrete_sequence=['#f64c72','#85bfdc'])\nfig.update_layout(\n    title=\"Effict The Absolute_humidity\"\n)\nfig.show()","5845a24b":"train.head(0)","de236e8d":"px.parallel_coordinates(train, color=\"target_benzene\",) ","4b4675ed":"px.scatter_ternary(train, a=\"deg_C\", b=\"relative_humidity\", c=\"target_benzene\")","c8b79846":"train","e8abd093":"X=train.iloc[:,:-1]\ny=train.iloc[:,-1]","910aa467":"print(X.shape)","95d5353a":"y","573ce130":"from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp = imp.fit(X)\nX","dc6d144e":"scaler = StandardScaler()\nX=scaler.fit_transform(X)\nX","8e319e83":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)","70460e9d":"X_train","eab95711":"from sklearn.linear_model import LinearRegression\nLinearRegressionModel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\nLinearRegressionModel.fit(X_train, y_train)\n","49ca89ef":"#Calculating Details\nprint('Linear Regression Train Score is : ' , LinearRegressionModel.score(X_train, y_train))\nprint('Linear Regression Test Score is : ' , LinearRegressionModel.score(X_test, y_test))\nprint('Linear Regression Coef is : ' , LinearRegressionModel.coef_)\nprint('Linear Regression intercept is : ' , LinearRegressionModel.intercept_)\n","3a48bd53":"#Calculating Prediction\ny_pred = LinearRegressionModel.predict(X_test)\nprint(list(y_pred[:10]))","81f7ea7d":"#Calculating Mean Absolute Error\nMAEValue = mean_absolute_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Absolute Error Value is : ', MAEValue)\n","48748fae":"#Calculating Mean Squared Error\nMSEValue = mean_squared_error(y_test, y_pred, multioutput='uniform_average') # it can be raw_values\nprint('Mean Squared Error Value is : ', MSEValue)\n","409fbb31":"#Calculating Median Squared Error\nMdSEValue = median_absolute_error(y_test, y_pred)\nprint('Median Squared Error Value is : ', MdSEValue )\n","b6548e8c":"from sklearn.neural_network import MLPRegressor\nMLPRegressorModel = MLPRegressor(activation='tanh', # can be also identity , logistic , relu\n                                 solver='adam',  # can be also sgd , adam\n                                 learning_rate='constant', # can be also invscaling , adaptive\n                                 early_stopping= False,\n                                 alpha=0.0001 ,hidden_layer_sizes=(10000, ),random_state=33)\nMLPRegressorModel.fit(X_train, y_train)\n","4964044c":"#Calculating Details\nprint('MLPRegressorModel Train Score is : ' , MLPRegressorModel.score(X_train, y_train))\nprint('MLPRegressorModel Test Score is : ' , MLPRegressorModel.score(X_test, y_test))\nprint('MLPRegressorModel loss is : ' , MLPRegressorModel.loss_)\nprint('MLPRegressorModel No. of iterations is : ' , MLPRegressorModel.n_iter_)\nprint('MLPRegressorModel No. of layers is : ' , MLPRegressorModel.n_layers_)\nprint('MLPRegressorModel last activation is : ' , MLPRegressorModel.out_activation_)\n","a4733429":"from sklearn.svm import SVR\nSVRModel = SVR(C = 10000 ,epsilon=0.1,kernel = 'rbf') # it also can be : linear, poly, rbf, sigmoid, precomputed\nSVRModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('SVRModel Train Score is : ' , SVRModel.score(X_train, y_train))\nprint('SVRModel Test Score is : ' , SVRModel.score(X_test, y_test))\n","d7407d82":"#Calculating Prediction\ny_pred = SVRModel.predict(X_test)\ny_pred","f7c5f0d8":"from sklearn.tree import DecisionTreeRegressor\nDecisionTreeRegressorModel = DecisionTreeRegressor( max_depth=100,random_state=33)\nDecisionTreeRegressorModel.fit(X_train, y_train)\n\n#Calculating Details\nprint('DecisionTreeRegressor Train Score is : ' , DecisionTreeRegressorModel.score(X_train, y_train))\nprint('DecisionTreeRegressor Test Score is : ' , DecisionTreeRegressorModel.score(X_test, y_test))\n","83f5f0ed":"#Calculating Prediction\ny_pred = DecisionTreeRegressorModel.predict(X_test)\nprint('Predicted Value for DecisionTreeRegressorModel is :\\n ' ,list( y_pred[:10]))\n","bdba9665":"### using SimpleImputer to clean data","d7606d60":"###  SVR","af54ed2d":"#### **MLPRegressor**","8673807c":"#### Calculating Mean Squared Error","1d312668":"#### Calculating Prediction","f61c8f71":"### DecisionTreeRegressor","90b2a9e0":"### Calculating Median Squared Error","d72b0429":"### EDA","ca8f753b":"#### Make Standardization for data","8a6ca9c8":"### Using Heatmap","06118af5":"#### Calculating Mean Absolute Error","a01c2c17":"# If you enjoy this notebook, don't forget to vote\ud83d\ude4c\ud83d\ude04\u2600\ufe0f","55ed4bc8":"#### Apply ML ALGO"}}