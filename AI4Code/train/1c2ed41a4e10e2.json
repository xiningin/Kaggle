{"cell_type":{"d14b2589":"code","810963f4":"code","19647b56":"code","209cf5c2":"code","2fe68615":"code","285109e9":"code","cf30f1dc":"code","53d5e073":"code","870259d8":"code","5a560844":"code","6163aaf3":"code","624c8ddb":"code","0b129c3d":"code","c8699ded":"code","f747d3c7":"code","c513bf70":"code","8b7901e7":"code","bbdebd3a":"code","e2a53081":"code","1a4f13f3":"code","acaa2dbe":"code","8386464c":"code","48d79276":"code","c2541087":"code","43b7f6bb":"code","5b6088d4":"code","dee01730":"code","b5cd60d3":"code","b2b0410a":"code","4156eb35":"code","cbca5a1c":"code","054641a5":"markdown","9d42bc06":"markdown","bb6e53ec":"markdown","77299509":"markdown","981b4380":"markdown"},"source":{"d14b2589":"!pip3 install uproot\n","810963f4":"!pip3 install awkward","19647b56":"import uproot\nimport pandas as pd\nimport numpy as np","209cf5c2":"samples_dic= {'data': [['data', 'data_A'], \n                       ['data', 'data_B'], \n                       ['data', 'data_C'], \n                       ['data', 'data_D']],\n              'higgs': [['mc', 'mc_345060.ggH125_ZZ4lep'], \n                        ['mc', 'mc_344235.VBFH125_ZZ4lep']], \n              'zz': [['mc', 'mc_363490.llll']], \n              'other': [['mc', 'mc_361106.Zee'], \n                        ['mc', 'mc_361107.Zmumu']]}","2fe68615":"processes = samples_dic.keys()\nTuples={}\nsamples=[]\nfor p in processes:\n    for d in samples_dic[p]:\n        # Load the dataframes\n        sample = d[1] # Sample name\n        samples.append(sample)\n        DataUproot = uproot.open(f'\/kaggle\/input\/reducehiggs4lep\/samples_FilterGem_{sample}.root')\n        Tuples[sample] = DataUproot['myTree']","285109e9":"Tuples['data_A']","cf30f1dc":"list(Tuples['data_A'].keys())","53d5e073":"branches={}\nfor s in samples:\n    branches[s] = Tuples[s].arrays()","870259d8":"import matplotlib.pyplot as plt","5a560844":"plt.figure(figsize=(12,8))\nplt.title(\"First look to the samples\")\nplt.hist(branches['data_A']['m4l'])","6163aaf3":"import matplotlib\nmatplotlib.rcParams.update({'font.size': 20, 'font.family': 'serif'})","624c8ddb":"plt.figure(figsize=(12,8))\nplt.title(\"First look to the samples\")\nplt.hist(branches['data_A']['m4l'])","0b129c3d":"plt.figure(figsize=(12,8))\nplt.title(\"First look to the samples\")\nplt.hist(branches['mc_363490.llll']['m4l'], label=\"zz\", range=[0,200], bins=50)\nplt.legend()","c8699ded":"branches['data_A']['good_lep']","f747d3c7":"branches['data_A']['sum_good_lep']","c513bf70":"branches['data_A']['sum_good_lep'] == 4","8b7901e7":"sum_leptons_test = branches['data_A']['sum_good_lep'] == 4","bbdebd3a":"plt.figure(figsize=(12,8))\nplt.title(\"Cut\")\nplt.hist(branches['data_A']['sum_good_lep'], range=[0,10], bins=10, label='data A')\nplt.arrow(2, 10, 2, 0,width = 0.15,head_width = 0.4, length_includes_head=True, color=\"red\")\nplt.arrow(7, 10, -2, 0,width = 0.15,head_width = 0.4, length_includes_head=True, color=\"red\")\nplt.axvline(x=4, color='red')\nplt.axvline(x=5, color='red')\nplt.xlabel(\"sum good lep\")\nplt.ylabel(\"Events\")\nplt.legend(frameon=False)","e2a53081":"selection_events={}\nfor s in samples:\n    # trigger\n    trigger = ((branches[s]['trigM'] == True) | (branches[s]['trigE'] == True))\n    sum_leptons = branches[s]['sum_good_lep'] == 4\n    sum_charge = branches[s]['sum_lep_charge'] == 0\n    sum_types_ee = branches[s]['goodlep_sumtypes'] == 44\n    sum_types_mm = branches[s]['goodlep_sumtypes'] == 52\n    sum_types_em = branches[s]['goodlep_sumtypes'] == 48\n    sum_types_goodlep = (sum_types_ee | sum_types_mm | sum_types_em)\n    sum_lep_selection = (sum_leptons & sum_charge & sum_types_goodlep)\n    # Select leptons with high transverse momentum\n    pt_0_selection = ((branches[s]['lep_pt'][:,0] > 25000) & (branches[s]['good_lep'][:,0] == 1))\n    pt_1_selection = ((branches[s]['lep_pt'][:,1] > 15000) & (branches[s]['good_lep'][:,1] == 1))\n    pt_2_selection = ((branches[s]['lep_pt'][:,2] > 10000) & (branches[s]['good_lep'][:,2] == 1))\n    high_pt_selection = (pt_0_selection & pt_1_selection & pt_2_selection)\n    final_selection = trigger & sum_types_goodlep & sum_lep_selection & high_pt_selection\n    selection_events[s] = final_selection","1a4f13f3":"for s in samples:\n    print(s,'      Initial events: ', len(branches[s]['m4l']))","acaa2dbe":"for s in samples:\n    print(s,'      After selection: ', len(branches[s]['m4l'][selection_events[s]]))","8386464c":"mc_samples=list(processes)[1:]\nprint(mc_samples)","48d79276":"stack_mc_list_m4l = []\nstack_weights_list = []\nfor s in mc_samples:\n    list_sample_s = []\n    list_weight_s = []\n    for element in samples_dic[s]:\n        sample_s=element[1]\n        mc_selection_values = branches[sample_s]['m4l'][selection_events[sample_s]]\n        list_sample_s += list(mc_selection_values)\n        mc_selection_weight = branches[sample_s]['weight'][selection_events[sample_s]]\n        list_weight_s += list(mc_selection_weight)\n    stack_mc_list_m4l.append(list_sample_s)\n    stack_weights_list.append(list_weight_s)","c2541087":"for k in range(0,3):\n    print(len(stack_mc_list_m4l[k]), len(stack_weights_list[k]))","43b7f6bb":"var_name = 'm4l'\nunits = ' [GeV]'\nrangos = [[80,170]]\nbines = 24 ","5b6088d4":"fig, (plot_1, plot_2) = plt.subplots(1,2, figsize=[18,8])\nplot_1.set_title(\"MC samples without weights\")\nplot_1.hist(stack_mc_list_m4l, range=rangos[0], label=mc_samples, stacked=True, bins=bines)\nplot_1.set_ylabel('Events')\nplot_1.set_xlabel(var_name+units)\nplot_1.legend(frameon=False)\nplot_2.set_title(\"MC samples with weights\")\nplot_2.hist(stack_mc_list_m4l, range=rangos[0], label=mc_samples, stacked=True, weights=stack_weights_list, bins=bines)\nplot_2.set_ylabel('Events')\nplot_2.set_xlabel(var_name+units)\nplot_2.tick_params(which='both',direction='in',top=True,right=True, length=6, width=1)\nplot_2.legend(frameon=False)","dee01730":"stack_data_list_m4l=[]\nfor element in samples_dic['data']:\n    sample_d=element[1]\n    #print(sample_d)\n    data_list = list(branches[sample_d]['m4l'][selection_events[sample_d]])\n    stack_data_list_m4l += data_list\n    #print(sample_d,len(data_list))","b5cd60d3":"len(stack_data_list_m4l)","b2b0410a":"def plotData(data_var, range_ab, bins_samples):\n    data_hist,bins = np.histogram(data_var, range=range_ab, bins=bins_samples) \n    print(data_hist, bins)\n    data_hist_errors = np.sqrt( data_hist )\n    bin_center=(bins[1:]+bins[:-1])\/2\n    h0=plt.errorbar(x=bin_center, y=data_hist, yerr=data_hist_errors,fmt='ko', label='Data')","4156eb35":"plt.figure(figsize=(12,8))\nplotData(stack_data_list_m4l, rangos[0], bines)\nh1=plt.hist(stack_mc_list_m4l, range=rangos[0], label=mc_samples, stacked=True, weights=stack_weights_list, bins=bines)\nplt.ylabel('Events')\nplt.xlabel(var_name+units)\nplt.ylim(0,30)\nplt.legend(fontsize=18,frameon=False)","cbca5a1c":"plt.figure(figsize=(12,8))\nplotData(stack_data_list_m4l, rangos[0], bines)\nh1=plt.hist(stack_mc_list_m4l, range=rangos[0], label=mc_samples, stacked=True, weights=stack_weights_list, bins=bines)\nplt.ylabel('Events', loc='top')\nplt.xlabel(r'$m^{H \\rightarrow ZZ}_{4l}$'+units, loc='right')\nplt.tick_params(which='both', # ticks on both x and y axes\n                direction='in', # Put ticks inside and outside the axes\n                length=6, width=1)\nplt.text(80,28,\"ATLAS\",weight='bold')\nplt.text(93,28,\"Open Data\")\nplt.text(80,25,r\"$\\sqrt{s}$\"+\" = 13 TeV,\"+\" $\\int$Ldt = \"+\" 10 fb\"+r\"$^{-1}$\")\nplt.ylim(0,30)\nplt.legend(frameon=False)","054641a5":"To do this, we will select from all samples that the following:\n\n    - the leptons needed to activate either the muon or electron trigger,\n    - number of leptons in the final state should be 4,\n    - the total net charge should be zero,\n    - the sum of the types (11:e, 13:mu) can be 44 (eeee), 52 (mumumumu) or 48 (eemumu),\n    - good leptons with high transverse momentum\n","9d42bc06":"## All the selection for this analysis","bb6e53ec":"### Example of a simple selection","77299509":"# Selection","981b4380":"Primero leemos todas las branches que comiencen con `lep`"}}