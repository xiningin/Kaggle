{"cell_type":{"ed004a45":"code","81f8e141":"code","cbbfeb4d":"code","80b61693":"code","10d284cb":"code","5db0881a":"code","fa8415db":"code","b8a075f3":"code","f5d87b28":"code","63ad25b3":"code","a18ae1a2":"code","8e6a1205":"code","4a8a0d16":"code","d288a4aa":"code","ce7ea71c":"code","239f4036":"code","bbe5ff70":"code","5340ccd5":"code","701e9375":"code","b4fef199":"code","72fc6d70":"code","4a4a1ffe":"code","fbe3dc1f":"code","710af322":"code","91df8b62":"code","281faf66":"code","5603a32d":"code","79bf7f92":"code","61850aa8":"code","f716e450":"code","479d3daf":"code","f6d34653":"code","1dd34578":"code","0eafe3d3":"code","31c3229c":"code","21922367":"code","1f7216ab":"code","260f3639":"code","589c048f":"code","61132ee6":"code","39df86a0":"code","67967cd5":"code","d2a24518":"code","9883abbb":"code","aee0f1f1":"code","96b40219":"code","a2a7342a":"code","5273d2c5":"code","75e5d64b":"code","13aa9fe7":"code","f6415f30":"code","0f2c693a":"code","cbfc67ab":"code","a1c5174e":"code","28a00199":"code","c0b9dbb9":"code","00c55e5d":"code","3d8602d0":"code","a72b6a85":"code","07815879":"code","5226909a":"code","52aca2f5":"code","e4222738":"code","5e6dc2ce":"code","7d4141f0":"code","479258d3":"code","7bd9ff98":"code","3509b723":"code","bf61f7d8":"code","bf950484":"code","8bd276ac":"code","6e4a5344":"code","f6c1d374":"code","f4986ee1":"code","98750ebf":"code","c0853db7":"code","c10de898":"code","2ae32fd0":"code","30c4db9f":"code","9e837983":"code","ac045f71":"code","801ce1ce":"code","bc4cd487":"code","4db719d6":"code","e382397d":"code","9277aad1":"code","f51aec6d":"code","617fb733":"code","071ddaf7":"code","fd8b308d":"code","33e4d633":"code","676b3516":"code","78aeec7f":"code","d9ab3983":"code","4564dc02":"code","59e1d120":"code","2a075536":"code","a724c62f":"markdown","834b3af7":"markdown","180aa968":"markdown","8c63015a":"markdown","adfd08ce":"markdown","3ff81c75":"markdown","de29cec7":"markdown","f4e651f9":"markdown","96c508bc":"markdown","3c1aed64":"markdown","61311cb8":"markdown","705db582":"markdown","18ef8494":"markdown","16fe69ea":"markdown","5870c8ec":"markdown","27c2033f":"markdown","3fdbf1cd":"markdown","89e3902b":"markdown","1fb641ef":"markdown","5e138840":"markdown","62806b9d":"markdown","81744f28":"markdown","51930f79":"markdown","ac67a605":"markdown","d2094ea9":"markdown","ac7de4e3":"markdown","ed4c0555":"markdown","22e1259f":"markdown","af8fea0f":"markdown","3f6c80f3":"markdown","840aff44":"markdown","7ebd25c3":"markdown","36dd50dd":"markdown","147c5754":"markdown","55c33a4b":"markdown","eb2399c0":"markdown","ec27031e":"markdown","2ea1be9b":"markdown","274e584e":"markdown","6beb39ec":"markdown","c686ae6e":"markdown","ebbf5999":"markdown","e2691f50":"markdown","495a9a82":"markdown","af2b59aa":"markdown","2613eb76":"markdown","9f636e47":"markdown","b1add6ad":"markdown","b99ed5ae":"markdown","10a62d30":"markdown","6f8f3180":"markdown","51de2464":"markdown","e0fb8058":"markdown","bf68ecc6":"markdown","4b82645f":"markdown","ae439c67":"markdown","ee6f01b4":"markdown","a9b4a052":"markdown","e5cf7105":"markdown","0ce058a9":"markdown","05dc0769":"markdown","1e4763a1":"markdown","b38e626e":"markdown","e6c84da0":"markdown","7cab54c5":"markdown","90104aa9":"markdown","c0281ba1":"markdown","3a0dc0af":"markdown","00866f25":"markdown","01ee12dd":"markdown","081efa0d":"markdown"},"source":{"ed004a45":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81f8e141":"# import all libraries and dependencies for dataframe\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom datetime import datetime, timedelta\n\n# import all libraries and dependencies for data visualization\npd.options.display.float_format='{:.4f}'.format\nplt.rcParams['figure.figsize'] = [8,8]\npd.set_option('display.max_columns', 500)\npd.set_option('display.max_colwidth', -1) \nsns.set(style='darkgrid')\nimport matplotlib.ticker as ticker\nimport matplotlib.ticker as plticker","cbbfeb4d":"# Reading the automobile consulting company file on which analysis needs to be done\n\ndf_auto = pd.read_csv('\/kaggle\/input\/automobile-dataset\/AutoData.csv')\n\ndf_auto.head()","80b61693":"# shape of the data\ndf_auto.shape","10d284cb":"# information of the data\ndf_auto.info()","5db0881a":"# description of the data\ndf_auto.describe()","fa8415db":"# Calculating the Missing Values % contribution in DF\n\ndf_null = df_auto.isna().mean().round(4) * 100\n\ndf_null.sort_values(ascending=False).head()","b8a075f3":"# Datatypes\ndf_auto.dtypes","f5d87b28":" #Outlier Analysis of target variable with maximum amount of Inconsistency\n\noutliers = ['price']\nplt.rcParams['figure.figsize'] = [10,8]\nsns.boxplot(data=df_auto[outliers], orient=\"v\", palette=\"Set1\" ,whis=1.5,saturation=1, width=0.7)\nplt.title(\"Outliers Variable Distribution\", fontsize = 14, fontweight = 'bold')\nplt.ylabel(\"Price Range\", fontweight = 'bold')\nplt.xlabel(\"Continuous Variable\", fontweight = 'bold')\ndf_auto.shape","63ad25b3":"# Extracting Car Company from the CarName i.e, make as per direction in Problem \n\ndf_auto['make'] = df_auto['make'].str.split(' ',expand=True)","a18ae1a2":"# Unique Car company\n\ndf_auto['make'].unique()","8e6a1205":"# Renaming the typo errors in Car Company names\n\ndf_auto['make'] = df_auto['make'].replace({'maxda': 'mazda', 'nissan': 'Nissan', 'porcshce': 'porsche', 'toyouta': 'toyota', \n                            'vokswagen': 'volkswagen', 'vw': 'volkswagen'})","4a8a0d16":"# changing the datatype of symboling as it is categorical variable as per dictionary file\n\ndf_auto['symboling'] = df_auto['symboling'].astype(str)","d288a4aa":"# checking for duplicates\n\ndf_auto.loc[df_auto.duplicated()]","ce7ea71c":"# Segregation of Numerical and Categorical Variables\/Columns\n\ncat_col = df_auto.select_dtypes(include=['object']).columns\nnum_col = df_auto.select_dtypes(exclude=['object']).columns\ndf_cat = df_auto[cat_col]\ndf_num = df_auto[num_col]","239f4036":"# Visualizing the different car names available\n\nplt.rcParams['figure.figsize'] = [15,8]\nax=df_auto['make'].value_counts().plot(kind='bar',stacked=True, colormap = 'Set1')\nax.title.set_text('make')\nplt.xlabel(\"Names of the Car\",fontweight = 'bold')\nplt.ylabel(\"Count of Cars\",fontweight = 'bold')","bbe5ff70":"plt.figure(figsize=(8,8))\n\nplt.title('Car Price Distribution Plot')\nsns.distplot(df_auto['price'])","5340ccd5":"ax = sns.pairplot(df_auto[num_col])","701e9375":"plt.figure(figsize=(20, 15))\nplt.subplot(3,3,1)\nsns.boxplot(x = 'doornumber', y = 'price', data = df_auto)\nplt.subplot(3,3,2)\nsns.boxplot(x = 'fueltype', y = 'price', data = df_auto)\nplt.subplot(3,3,3)\nsns.boxplot(x = 'aspiration', y = 'price', data = df_auto)\nplt.subplot(3,3,4)\nsns.boxplot(x = 'carbody', y = 'price', data = df_auto)\nplt.subplot(3,3,5)\nsns.boxplot(x = 'enginelocation', y = 'price', data = df_auto)\nplt.subplot(3,3,6)\nsns.boxplot(x = 'drivewheel', y = 'price', data = df_auto)\nplt.subplot(3,3,7)\nsns.boxplot(x = 'enginetype', y = 'price', data = df_auto)\nplt.subplot(3,3,8)\nsns.boxplot(x = 'cylindernumber', y = 'price', data = df_auto)\nplt.subplot(3,3,9)\nsns.boxplot(x = 'fuelsystem', y = 'price', data = df_auto)\nplt.show()","b4fef199":"plt.figure(figsize=(25, 6))\n\nplt.subplot(1,3,1)\nplt1 = df_auto['cylindernumber'].value_counts().plot(kind = 'bar')\nplt.title('Number of cylinders')\nplt1.set(xlabel = 'Number of cylinders', ylabel='Frequency of Number of cylinders')\n\nplt.subplot(1,3,2)\nplt1 = df_auto['fueltype'].value_counts().plot(kind = 'bar')\nplt.title('Fuel Type')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of Fuel type')\n\nplt.subplot(1,3,3)\nplt1 = df_auto['carbody'].value_counts().plot(kind = 'bar')\nplt.title('Car body')\nplt1.set(xlabel = 'Car Body', ylabel='Frequency of Car Body')\n\nplt.show()","72fc6d70":"plt.figure(figsize = (10, 8))\nsns.boxplot(x = 'fuelsystem', y = 'price', hue = 'fueltype', data = df_auto)\nplt.show()","4a4a1ffe":"plt.figure(figsize = (10, 8))\nsns.boxplot(x = 'carbody', y = 'price', hue = 'enginelocation', data = df_auto)\nplt.show()","fbe3dc1f":"plt.figure(figsize = (10, 8))\nsns.boxplot(x = 'cylindernumber', y = 'price', hue = 'fueltype', data = df_auto)\nplt.show()","710af322":"plt.figure(figsize=(20, 6))\n\ndf_autox = pd.DataFrame(df_auto.groupby(['make'])['price'].mean().sort_values(ascending = False))\ndf_autox.plot.bar()\nplt.title('Car Company Name vs Average Price')\nplt.show()","91df8b62":"plt.figure(figsize=(20, 6))\n\ndf_autoy = pd.DataFrame(df_auto.groupby(['carbody'])['price'].mean().sort_values(ascending = False))\ndf_autoy.plot.bar()\nplt.title('Car Body Type vs Average Price')\nplt.show()","281faf66":"#Binning the Car Companies based on avg prices of each car Company.\n\ndf_auto['price'] = df_auto['price'].astype('int')\ndf_auto_temp = df_auto.copy()\nt = df_auto_temp.groupby(['make'])['price'].mean()\ndf_auto_temp = df_auto_temp.merge(t.reset_index(), how='left',on='make')\nbins = [0,10000,20000,40000]\nlabel =['Budget_Friendly','Medium_Range','TopNotch_Cars']\ndf_auto['Cars_Category'] = pd.cut(df_auto_temp['price_y'],bins,right=False,labels=label)\ndf_auto.head()","5603a32d":"sig_col = ['price','Cars_Category','enginetype','fueltype', 'aspiration','carbody','cylindernumber', 'drivewheel',\n            'wheelbase','curbweight', 'enginesize', 'boreratio','horsepower', \n                    'citympg','highwaympg', 'carlength','carwidth']","79bf7f92":"df_auto = df_auto[sig_col]","61850aa8":"sig_cat_col = ['Cars_Category','fueltype','aspiration','carbody','drivewheel','enginetype','cylindernumber']","f716e450":"# Get the dummy variables for the categorical feature and store it in a new variable - 'dummies'\n\ndummies = pd.get_dummies(df_auto[sig_cat_col])\ndummies.shape","479d3daf":"dummies = pd.get_dummies(df_auto[sig_cat_col], drop_first = True)\ndummies.shape","f6d34653":"# Add the results to the original dataframe\n\ndf_auto = pd.concat([df_auto, dummies], axis = 1)","1dd34578":"# Drop the original cat variables as dummies are already created\n\ndf_auto.drop( sig_cat_col, axis = 1, inplace = True)\ndf_auto.shape\n","0eafe3d3":"# import all libraries and dependencies for machine learning\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.base import TransformerMixin\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport statsmodels.api as sm\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.metrics import r2_score","31c3229c":"df_auto","21922367":"# We specify this so that the train and test data set always have the same rows, respectively\n# We divide the df into 70\/30 ratio\n\nnp.random.seed(0)\ndf_train, df_test = train_test_split(df_auto, train_size = 0.7, test_size = 0.3, random_state = 100)\n","1f7216ab":"df_train.head()","260f3639":"scaler = preprocessing.StandardScaler()","589c048f":"sig_num_col = ['wheelbase','carlength','carwidth','curbweight','enginesize','boreratio','horsepower','citympg','highwaympg','price']","61132ee6":"# Apply scaler() to all the columns except the 'dummy' variables\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf_train[sig_num_col] = scaler.fit_transform(df_train[sig_num_col])","39df86a0":"df_train.head()\n","67967cd5":"# Let's check the correlation coefficients to see which variables are highly correlated\n\nplt.figure(figsize = (20, 20))\nsns.heatmap(df_train.corr(), cmap=\"RdYlGn\")\nplt.show()","d2a24518":"col = ['highwaympg','citympg','horsepower','enginesize','curbweight','carwidth']","9883abbb":"# Scatter Plot of independent variables vs dependent variables\n\nfig,axes = plt.subplots(2,3,figsize=(18,15))\nfor seg,col in enumerate(col):\n    x,y = seg\/\/3,seg%3\n    an=sns.scatterplot(x=col, y='price' ,data=df_auto, ax=axes[x,y])\n    plt.setp(an.get_xticklabels(), rotation=45)\n   \nplt.subplots_adjust(hspace=0.5)\n","aee0f1f1":"y_train = df_train.pop('price')\nX_train = df_train\n","96b40219":"X_train_1 = X_train['horsepower']\n","a2a7342a":"# Add a constant\nX_train_1c = sm.add_constant(X_train_1)\n\n# Create a first fitted model\nlr_1 = sm.OLS(y_train, X_train_1c).fit()\n","5273d2c5":"# Check parameters created\n\nlr_1.params","75e5d64b":"# Let's visualise the data with a scatter plot and the fitted regression line\n\nplt.scatter(X_train_1c.iloc[:, 1], y_train)\nplt.plot(X_train_1c.iloc[:, 1], 0.8062*X_train_1c.iloc[:, 1], 'r')\nplt.show()","13aa9fe7":"# Print a summary of the linear regression model obtained\nprint(lr_1.summary())","f6415f30":"X_train_2 = X_train[['horsepower', 'curbweight']]\n","0f2c693a":"# Add a constant\nX_train_2c = sm.add_constant(X_train_2)\n\n# Create a second fitted model\nlr_2 = sm.OLS(y_train, X_train_2c).fit()","cbfc67ab":"print(lr_2.summary())","a1c5174e":"X_train_3 = X_train[['horsepower', 'curbweight', 'enginesize']]","28a00199":"# Add a constant\nX_train_3c = sm.add_constant(X_train_3)\n\n# Create a third fitted model\nlr_3 = sm.OLS(y_train, X_train_3c).fit()","c0b9dbb9":"lr_3.params","00c55e5d":"print(lr_3.summary())","3d8602d0":"# Running RFE with the output number of the variable equal to 15\nlm = LinearRegression()\nlm.fit(X_train, y_train)\n\nrfe = RFE(lm, 15)             \nrfe = rfe.fit(X_train, y_train)","a72b6a85":"list(zip(X_train.columns,rfe.support_,rfe.ranking_))","07815879":"# Selecting the variables which are in support\n\ncol_sup = X_train.columns[rfe.support_]\ncol_sup","5226909a":"# Creating X_train dataframe with RFE selected variables\n\nX_train_rfe = X_train[col_sup]","52aca2f5":"# Adding a constant variable and Build a first fitted model\nimport statsmodels.api as sm  \nX_train_rfec = sm.add_constant(X_train_rfe)\nlm_rfe = sm.OLS(y_train,X_train_rfec).fit()\n\n#Summary of linear model\nprint(lm_rfe.summary())","e4222738":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe.values, i) for i in range(X_train_rfe.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","5e6dc2ce":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe1 = X_train_rfe.drop('cylindernumber_twelve', 1,)\n\n# Adding a constant variable and Build a second fitted model\n\nX_train_rfe1c = sm.add_constant(X_train_rfe1)\nlm_rfe1 = sm.OLS(y_train, X_train_rfe1c).fit()\n\n#Summary of linear model\nprint(lm_rfe1.summary())","7d4141f0":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe1.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe1.values, i) for i in range(X_train_rfe1.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","479258d3":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe2 = X_train_rfe1.drop('cylindernumber_six', 1,)\n\n# Adding a constant variable and Build a third fitted model\n\nX_train_rfe2c = sm.add_constant(X_train_rfe2)\nlm_rfe2 = sm.OLS(y_train, X_train_rfe2c).fit()\n\n#Summary of linear model\nprint(lm_rfe2.summary())","7bd9ff98":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe2.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe2.values, i) for i in range(X_train_rfe2.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif\n","3509b723":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe3 = X_train_rfe2.drop('carbody_hardtop', 1,)\n\n# Adding a constant variable and Build a fourth fitted model\nX_train_rfe3c = sm.add_constant(X_train_rfe3)\nlm_rfe3 = sm.OLS(y_train, X_train_rfe3c).fit()\n\n#Summary of linear model\nprint(lm_rfe3.summary())","bf61f7d8":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe3.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe3.values, i) for i in range(X_train_rfe3.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","bf950484":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe4 = X_train_rfe3.drop('enginetype_ohc', 1,)\n\n# Adding a constant variable and Build a fifth fitted model\nX_train_rfe4c = sm.add_constant(X_train_rfe4)\nlm_rfe4 = sm.OLS(y_train, X_train_rfe4c).fit()\n\n#Summary of linear model\nprint(lm_rfe4.summary())","8bd276ac":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe4.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe4.values, i) for i in range(X_train_rfe4.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","6e4a5344":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe5 = X_train_rfe4.drop('cylindernumber_five', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe5c = sm.add_constant(X_train_rfe5)\nlm_rfe5 = sm.OLS(y_train, X_train_rfe5c).fit()\n\n#Summary of linear model\nprint(lm_rfe5.summary())","f6c1d374":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe5.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe5.values, i) for i in range(X_train_rfe5.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","f4986ee1":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe6 = X_train_rfe5.drop('enginetype_ohcv', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe6c = sm.add_constant(X_train_rfe6)\nlm_rfe6 = sm.OLS(y_train, X_train_rfe6c).fit()\n\n#Summary of linear model\nprint(lm_rfe6.summary())","98750ebf":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe6.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe6.values, i) for i in range(X_train_rfe6.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c0853db7":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe7 = X_train_rfe6.drop('curbweight', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe7c = sm.add_constant(X_train_rfe7)\nlm_rfe7 = sm.OLS(y_train, X_train_rfe7c).fit()\n\n#Summary of linear model\nprint(lm_rfe7.summary())","c10de898":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe7.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe7.values, i) for i in range(X_train_rfe7.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","2ae32fd0":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe8 = X_train_rfe7.drop('cylindernumber_four', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe8c = sm.add_constant(X_train_rfe8)\nlm_rfe8 = sm.OLS(y_train, X_train_rfe8c).fit()\n\n#Summary of linear model\nprint(lm_rfe8.summary())","30c4db9f":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe8.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe8.values, i) for i in range(X_train_rfe8.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","9e837983":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe9 = X_train_rfe8.drop('carbody_sedan', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe9c = sm.add_constant(X_train_rfe9)\nlm_rfe9 = sm.OLS(y_train, X_train_rfe9c).fit()\n\n#Summary of linear model\nprint(lm_rfe9.summary())","ac045f71":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe9.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe9.values, i) for i in range(X_train_rfe9.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","801ce1ce":"# Dropping highly correlated variables and insignificant variables\n\nX_train_rfe10 = X_train_rfe9.drop('carbody_wagon', 1,)\n\n# Adding a constant variable and Build a sixth fitted model\nX_train_rfe10c = sm.add_constant(X_train_rfe10)\nlm_rfe10 = sm.OLS(y_train, X_train_rfe10c).fit()\n\n#Summary of linear model\nprint(lm_rfe10.summary())","bc4cd487":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train_rfe10.columns\nvif['VIF'] = [variance_inflation_factor(X_train_rfe10.values, i) for i in range(X_train_rfe10.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","4db719d6":"# Predicting the price of training set.\ny_train_price = lm_rfe10.predict(X_train_rfe10c)","e382397d":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price), bins = 20)\nfig.suptitle('Error Terms Analysis', fontsize = 20)                   \nplt.xlabel('Errors', fontsize = 18)","9277aad1":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\ndf_test[sig_num_col] = scaler.transform(df_test[sig_num_col])\ndf_test.shape","f51aec6d":"y_test = df_test.pop('price')\nX_test = df_test","617fb733":"# Adding constant\nX_test_1 = sm.add_constant(X_test)\n\nX_test_new = X_test_1[X_train_rfe10c.columns]","071ddaf7":"# Making predictions using the final model\ny_pred = lm_rfe10.predict(X_test_new)","fd8b308d":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred)\nfig.suptitle('y_test vs y_pred', fontsize=20)   \nplt.xlabel('y_test ', fontsize=18)                       \nplt.ylabel('y_pred', fontsize=16)","33e4d633":"r2_score(y_test, y_pred)","676b3516":"# Predicting the price of training set.\ny_train_price2 = lm_rfe8.predict(X_train_rfe8c)","78aeec7f":"# Plot the histogram of the error terms\nfig = plt.figure()\nsns.distplot((y_train - y_train_price2), bins = 20)\nfig.suptitle('Error Terms Analysis', fontsize = 20)                   \nplt.xlabel('Errors', fontsize = 18)","d9ab3983":"X_test_2 = X_test_1[X_train_rfe8c.columns]","4564dc02":"# Making predictions using the final model\ny_pred2 = lm_rfe8.predict(X_test_2)","59e1d120":"# Plotting y_test and y_pred to understand the spread.\nfig = plt.figure()\nplt.scatter(y_test,y_pred2)\nfig.suptitle('y_test vs y_pred2', fontsize=20)   \nplt.xlabel('y_test ', fontsize=18)                       \nplt.ylabel('y_pred2', fontsize=16)    ","2a075536":"r2_score(y_test, y_pred2)","a724c62f":"**Insights:**\nJaguar, Buick and porsche seems to have the highest average price.","834b3af7":"Dropping cylindernumber_six beacuse its p-value is 0.493 and we want p-value less than 0.05 and hence rebuilding the model.","180aa968":"### Checking VIF\n\nVariance Inflation Factor or VIF, gives a basic quantitative idea about how much the feature variables are correlated with each other. It is an extremely important parameter to test our linear model.","8c63015a":"### Here, we are proposing Business 2 Models which can be used to predict the car prices.","adfd08ce":"# Building a Linear Model","3ff81c75":"### Predict automobile price using Machine Learning\n\nUse Machine learning to predict the price of a car based on several characteristics. The objective is to build a model to understand the factors that drive the car of the price. This will help your automobile company launch their new car in the market effectively by pricing it better. Tasks:\n\n* Perform EDA on the data\n* Perform data cleanup as required\n* Pick the best variable for making a simple linear regression model\n* Perform train test split\n* Build model using best variable and report the R2\n* Make a multiple regression model o Apply feature selection approaches discussed in the class\n* Final model should be interpretable o What is your understanding of the factors that drive price?","de29cec7":"**Insights**\n* The cars with fueltype as diesel are comparatively expensive than the cars with fueltype as gas.\n* All the types of carbody is relatively cheaper as compared to convertible carbody.\n* The cars with rear enginelocation are way expensive than cars with front enginelocation.\n* The price of car is directly proportional to no. of cylinders in most cases.\n* Enginetype ohcv comes into higher price range cars.\n* DoorNumber isn't affecting the price much.\n* HigerEnd cars seems to have rwd drivewheel\n","f4e651f9":"**Adding another variable**\n\nThe R-squared value obtained is 0.797. Since we have so many variables, we can clearly do better than this. So lets add another correlated variable, i.e. enginesize.","96c508bc":"**Rescaling the Features**\n\nFor Simple Linear Regression, scaling doesn't impact model. So it is extremely important to rescale the variables so that they have a comparable scale. If we don't have comparable scales, then some of the coefficients as obtained by fitting the regression model might be very large or very small as compared to the other coefficients. There are two common ways of rescaling:\n\n1. Min-Max scaling\n2. Standardisation (mean-0, sigma-1)\nHere, we will use Standardisation Scaling.","3c1aed64":"**Relationship between cylindernumber vs price with hue fueltype**","61311cb8":"### Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the model.","705db582":"### Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of it.","18ef8494":"**Insights:**\n* carwidth , carlength, curbweight ,enginesize ,horsepowerseems to have a positive correlation with price.\n* carheight doesn't show any significant trend with price.\n* citympg , highwaympg - seem to have a significant negative correlation with price.","16fe69ea":"Dropping enginetype_ohc beacuse its p-value is 0.110 and we want p-value less than 0.05 and hence rebuilding the model","5870c8ec":"**1. Reading and Understanding the Data**","27c2033f":"##  Closing Statement:\n\nBoth the models are good enough to predict the carprices which explains the variance of data upto 90% and the model is significant.","3fdbf1cd":"* The R squared value just dropped by 0.005.Hence we can proceed with dropping carbody_sedan.\n","89e3902b":"Dropping enginetype_ohcv beacuse its p-value is 0.180 and we want p-value less than 0.05 and hence rebuilding the model","1fb641ef":"Dropping cylindernumber_five beacuse its p-value is 0.104 and we want p-value less than 0.05 and hence rebuilding the model","5e138840":"# RFE\n\nLet's use Recursive feature elimination since we have too many independent variables","62806b9d":"Dropping curbweight beacuse its VIF is 8.1 and we want VIF less than 5 and hence rebuilding the model\n\n","81744f28":"We have achieved a R-squared of 0.819 by manually picking the highly correlated variables. Now lets use RFE to select the independent variables which accurately predicts the dependent variable price.","51930f79":"**Insights:**\n\nhardtop and convertible seems to have the highest average price.","ac67a605":"Now the VIFs and p-values both are within an acceptable range. So we can go ahead and make our predictions using model lm_rfe10 and lm_rfe8.","d2094ea9":"# Splitting the Data into Training and Testing Sets\n\nAs we know, the first basic step for regression is performing a train-test split.","ac7de4e3":"**Significant variables after Visualization**\n* Cars_Category , Engine Type, Fuel Type\n* Car Body , Aspiration , Cylinder Number\n* Drivewheel , Curbweight , Car Length\n* Car Length , Car width , Engine Size\n* Boreratio , Horse Power , Wheel base\n* citympg , highwaympg , symboling","ed4c0555":"## Model I Conclusions:\n\n* R-sqaured and Adjusted R-squared - 0.912 and 0.909 - 90% variance explained.\n\n* F-stats and Prob(F-stats) (overall model fit) - 284.8 and 1.57e-70(approx. 0.0) - Model fit is significant and explained 90%\n \n* variance is just not by chance.\n \n* p-values - p-values for all the coefficients seem to be less than the significance level of 0.05.\n \n-meaning that all the predictors are statistically significant.","22e1259f":"**Insights:**\n\n* Toyota seems to be the most favoured cars.\n* Mercury seems to be the least favoured cars.","af8fea0f":"**Relationship between fuelsystem vs price with hue fueltype**","3f6c80f3":"* We generally want a VIF that is less than 5. So there are clearly some variables we need to drop.","840aff44":"**Relationship between carbody vs price with hue enginelocation**","7ebd25c3":"**Equation of Line to predict the Car prices values**\n\nCarprice=0.2440+0.3599\u00d7horsepower+0.3652\u00d7carwidth+1.2895\u00d7Carscategorytopnotchcars\u22120.4859\u00d7carbodyhatchback\u22121.4450\u00d7enginetypedohcv\u22120.3518\u00d7carbodysedan\u22120.4023\u00d7carbodywagon","36dd50dd":"**Visualising Numeric Variables**\n\nPairplot of all the numeric variables\n\n","147c5754":"# RMSE Score","55c33a4b":"**The R2 score of Training set is 0.912 and Test set is 0.909 which is quite close. Hence, We can say that our model is good enough to predict the Car prices using below predictor variables**\n\n* horsepower\n* carwidth\n* Cars_Category_TopNotch_Cars\n* carbody_hatchback\n* enginetype_dohcv","eb2399c0":"**Insights:**\n* The number of cylinders used in most cars is four.\n* Number of Gas fueled cars are way more than diesel fueled cars.\n* Sedan is the most prefered car type.","ec27031e":"### RMSE Score","2ea1be9b":"* We can see there is a line we can fit in above plots","274e584e":"**Insights:**\nThere are some price ranges above 36000 which can be termed as outliers but lets not remove it rather we will use standarization scaling.","6beb39ec":"**The R2 score of Training set is 0.918 and Test set is 0.915 which is quite close. Hence, We can say that our model is good enough to predict the Car prices using below predictor variables**\n\n* horsepower\n* carwidth\n* Cars_Category_TopNotch_Cars\n* carbody_hatchback\n* enginetype_dohcv\n* carbody_sedan\n* carbody_wagon","c686ae6e":"**Let's see scatterplot for few correlated variables vs price.**","ebbf5999":"**Applying the scaling on the test sets**","e2691f50":"**Dummy Variables**\n\nThe variable carbody has five levels. We need to convert these levels into integer. Similarly we need to convert the categorical variables to numeric.\nFor this, we will use something called dummy variables.","495a9a82":"* The plots seems to be right skewed, the prices of almost all cars looks like less than 18000.","af2b59aa":"**Understanding the Dataframe**","2613eb76":"**Typo Error in Car Company name**\n* maxda = mazda\n* Nissan = nissan\n* porsche = porcshce\n* toyota = toyouta\n* vokswagen = volkswagen = vw","9f636e47":"* Looking at the p-values, it looks like some of the variables aren't really significant (in the presence of other variables) and we need to drop it","b1add6ad":"# MODEL II\n\n* With lm_rfe8 which has basically 7 predictor variables.","b99ed5ae":"**Derived Metrices**\n* Average Price","10a62d30":"### Dividing test set into X_test and y_test","6f8f3180":"* The R-squared incresed from 0.650 to 0.797","51de2464":"Dropping cylindernumber_four beacuse its VIF is 5.66 and we want VIF less than 5 and hence rebuilding the model","e0fb8058":"### Residual Analysis of the train data\n\nSo, now to check if the error terms are also normally distributed (which is infact, one of the major assumptions of linear regression), let us plot the histogram of it.","bf68ecc6":"**Visualising the Data**\n\nHere we will identify if some predictors directly have a strong association with the outcome variable price.","4b82645f":"## Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","ae439c67":"**Visualizing the distribution of car prices\u00b6\u00b6**","ee6f01b4":"Lets drop carbody_sedan and see if there is any drastic fall in R squared.If not we can drop carbody sedan. Our aim is to explain the maximum variance with minimum variable.","a9b4a052":"Dropping carbody_hardtop beacuse its p-value is 0.238 and we want p-value less than 0.05 and hence rebuilding the model","e5cf7105":"### Adding another variable\n\nThe R-squared value obtained is 0.65. Since we have so many variables, we can clearly do better than this. So let's go ahead and add the other highly correlated variable, i.e. curbweight.","0ce058a9":"### Making Predictions Using the Final Model\n\nNow that we have fitted the model and checked the normality of error terms, it's time to go ahead and make predictions using the final model.","05dc0769":"**Visualising few more Categorical Variables**\n\nBoxplot of all the categorical variables\n\n","1e4763a1":"## MODEL I\n\n* With lm_rfe10 which has basically 5 predictor variables.","b38e626e":"# Dropping the variable and updating the model\n\nDropping cylindernumber_twelve beacuse its p-value is 0.393 and we want p-value less than 0.05 and hence rebuilding the model","e6c84da0":"**Data Preparation**\u00b6","7cab54c5":"After passing the arbitary selected columns by RFE we will manually evaluate each models p-value and VIF value. Unless we find the acceptable range for p-values and VIF we keep dropping the variables one at a time based on below criteria.\n\n* High p-value High VIF : Drop the variable\n* High p-value Low VIF or Low p-value High VIF : Drop the variable with high p-value first\n* Low p-value Low VIF : accept the variable","90104aa9":"### Model II Conclusions:\n\n* R-sqaured and Adjusted R-squared - 0.918 and 0.915 - 90% variance explained.\n \n* F-stats and Prob(F-stats) (overall model fit) - 215.9 and 4.70e-70(approx. 0.0) - Model fit is significant and explained 90% variance is just not by chance.\n \n* p-values - p-values for all the coefficients seem to be less than the significance level of 0.05.\n \n* meaning that all the predictors are statistically significant.","c0281ba1":"# Model Evaluation\n\nLet's now plot the graph for actual versus predicted values.","3a0dc0af":"Dropping carbody_wagon beacuse its p-value is 0.315 and we want p-value less than 0.05 and hence rebuilding the model","00866f25":"# Dividing into X and Y sets for the model building","01ee12dd":"**Equation of Line to predict the Car prices values**\n\nCarprice=\u22120.0925+0.3847\u00d7horsepower+0.3381\u00d7carwidth+1.3179\u00d7Carscategorytopnotchcars\u22120.1565\u00d7carbodyhatchback\u22121.5033\u00d7enginetypedohcv","081efa0d":"**2. Cleaning the Data\u00b6**"}}