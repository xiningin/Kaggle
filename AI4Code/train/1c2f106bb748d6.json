{"cell_type":{"7ca156b6":"code","5e1dbce0":"code","9d5b1fc6":"code","805e17ed":"code","7f407146":"code","7d44a1b3":"code","1773dd56":"code","d94a6ab0":"code","8549fd79":"code","59650791":"code","da47effb":"code","0672fd73":"code","b7ad3b43":"code","ea095bcb":"code","2526d618":"code","2429f7fd":"code","e9b0c10b":"code","8a242aba":"code","d51b7543":"code","0e5482b0":"code","6fae78a0":"code","67bb9e0a":"code","0101ac7d":"code","e4acd917":"code","3e7703b7":"code","7d3b2b79":"code","7ca0d2ce":"code","a8b79a44":"code","dfe62c35":"code","f10bb7dc":"code","61493249":"code","6d6a1211":"code","bc59395f":"code","760f8309":"code","27fd181d":"code","7de485e6":"code","76c20b68":"code","0688fdfd":"code","4691bcec":"code","6a5db121":"markdown","258bb83a":"markdown","34e3a0c2":"markdown","99b94f93":"markdown","35b5b975":"markdown","0dc61457":"markdown","b10c0de2":"markdown","1ec7cc36":"markdown","ebbe38ec":"markdown"},"source":{"7ca156b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\nimport xgboost as xgb\nimport lightgbm as lgbm\nfrom sklearn.ensemble import RandomForestRegressor,RandomForestClassifier,GradientBoostingRegressor,GradientBoostingClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score,r2_score,roc_auc_score,precision_score,recall_score,f1_score\nfrom sklearn.model_selection import KFold,GridSearchCV,RandomizedSearchCV\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))","5e1dbce0":"columns=[\"id\",\"cycle\",\"op1\",\"op2\",\"op3\",\"sensor1\",\"sensor2\",\"sensor3\",\"sensor4\",\"sensor5\",\"sensor6\",\"sensor7\",\"sensor8\",\n         \"sensor9\",\"sensor10\",\"sensor11\",\"sensor12\",\"sensor13\",\"sensor14\",\"sensor15\",\"sensor16\",\"sensor17\",\"sensor18\",\"sensor19\"\n         ,\"sensor20\",\"sensor21\",\"sensor22\",\"sensor23\"]","9d5b1fc6":"train=pd.read_csv(\"..\/input\/train_FD001.txt\",sep=\" \",names=columns)\ntest=pd.read_csv(\"..\/input\/test_FD001.txt\",sep=\" \",names=columns)\ntest_results=pd.read_csv(\"..\/input\/RUL_FD001.txt\",sep=\" \",header=None)","805e17ed":"train.info()","7f407146":"test.info()","7d44a1b3":"train.head()","1773dd56":"print('Unique ID: ',train.id.unique())","d94a6ab0":"plt.style.use('dark_background')\nplt.figure(figsize=(20,50))\nax=train.groupby('id')['cycle'].max().plot(kind='barh',width=0.8, stacked=True,align='center',rot=0)\nplt.title('Engines LifeTime',fontweight='bold',size=35)\nplt.xlabel('Cycle Time',fontweight='bold',size=30)\nplt.xticks(size=25)\nplt.ylabel('Engine ID',fontweight='bold',size=30)\nplt.yticks(size=25)\nplt.grid(True)\nplt.tight_layout(True)\nplt.show()","8549fd79":"test_results.columns=[\"rul\",\"null\"]\ntest_results.head()","59650791":"test_results.drop([\"null\"],axis=1,inplace=True)\ntest_results['id']=test_results.index+1\ntest_results.head()","da47effb":"rul = pd.DataFrame(test.groupby('id')['cycle'].max()).reset_index()\nrul.columns = ['id', 'max']","0672fd73":"rul.head()","b7ad3b43":"test_results['rul_failed']=test_results['rul']+rul['max']\ntest_results.head()","ea095bcb":"test_results.drop([\"rul\"],axis=1,inplace=True)","2526d618":"test=test.merge(test_results,on=['id'],how='left')","2429f7fd":"test[\"remaining_cycle\"]=test[\"rul_failed\"]-test[\"cycle\"]\ntest.head()","e9b0c10b":"test.isnull().sum()","8a242aba":"df_train=train.drop([\"sensor22\",\"sensor23\"],axis=1)\ndf_test=test.drop([\"sensor22\",\"sensor23\"],axis=1)","d51b7543":"df_test.drop([\"rul_failed\"],axis=1,inplace=True)\ndf_test.columns","0e5482b0":"df_train['remaining_cycle'] = df_train.groupby(['id'])['cycle'].transform(max)-df_train['cycle']","6fae78a0":"df_train.head()","67bb9e0a":"cycle=30\ndf_train['label'] = df_train['remaining_cycle'].apply(lambda x: 1 if x <= cycle else 0)\ndf_test['label'] = df_test['remaining_cycle'].apply(lambda x: 1 if x <= cycle else 0)","0101ac7d":"op_set=[\"op\"+str(i) for i in range(1,4)]\nsensor=[\"sensor\"+str(i) for i in range(1,22)]","e4acd917":"test.id.unique()","3e7703b7":"plt.style.use('seaborn-dark')\nax=sb.pairplot(test.query(\"cycle\"),x_vars=op_set,y_vars=sensor,palette=\"husl\")","7d3b2b79":"df_train.label.unique()","7ca0d2ce":"df_test.head()","a8b79a44":"df_test.columns","dfe62c35":"df_test.drop([\"id\",\"cycle\",\"op3\",\"sensor1\",\"sensor5\",\"sensor6\",\"sensor10\",\"sensor16\",\"sensor18\",\"sensor19\"],axis=1,inplace=True)","f10bb7dc":"df_test.label.unique()","61493249":"x=df_train.drop([\"id\",\"cycle\",\"op3\",\"sensor1\",\"sensor5\",\"sensor6\",\"sensor10\",\"sensor16\",\"sensor18\",\"sensor19\",\"remaining_cycle\",\"label\"],axis=1)\ny=df_train.label\nprint('x shape : ',x.shape)\nprint('y shape : ',y.shape)","6d6a1211":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test=train_test_split(x,y, test_size=0.2, random_state=3)\n# gc.collect()  \nprint('X_train shape : ',X_train.shape)\nprint('X_test shape : ',X_test.shape)\nprint('y_train shape : ',y_train.shape)\nprint('y_test shape : ',y_test.shape)","bc59395f":"import lightgbm as lgb\nlgb_clss = lgb.LGBMClassifier(learning_rate=0.01,n_estimators=5000,num_leaves=100,objective='binary', metrics='auc',random_state=50,n_jobs=-1)\nlgb_clss.fit(X_train, y_train)\nlgb_clss.score(X_test, y_test)\npreds2 = lgb_clss.predict(X_test)\nprint('Acc Score: ',accuracy_score(y_test, preds2))\nprint('Roc Auc Score: ',roc_auc_score(y_test, preds2))\nprint('Precision Score: ',precision_score(y_test, preds2))\nprint('Recall Score: ',recall_score(y_test, preds2))\nprint('f1 score: ',f1_score(y_test, preds2,'binary'))","760f8309":"colors = [plt.cm.twilight_shifted(i\/float(len(x.columns)-1)) for i in range(len(x.columns))]\ncolumns_X_train=x.columns.tolist()\nX_train=pd.DataFrame(X_train)\nX_train.set_axis(columns_X_train, axis=1, inplace=True)\nfeat_importances = pd.Series(lgb_clss.feature_importances_, index=X_train.columns)\nplt.figure(figsize=(15,10))\nplt.rcParams.update({'font.size': 16})\nplt.title('Important Variables(16)',color='black',fontweight='bold',size=25)\nfeat_importances.nlargest(16).plot(kind='bar', color=colors, width=0.8, align='center')\nplt.ylabel('Features',color='black',fontweight='bold',size=15)\nplt.xlabel('Importance Scores',color='black',fontweight='bold',size=15)\nplt.tight_layout()\nplt.grid(True)\nplt.show()","27fd181d":"colors = [plt.cm.cool(i\/float(len(x.columns)-1)) for i in range(len(x.columns))]\nax = lgb.plot_importance(lgb_clss, max_num_features=16,figsize=(16,12),height=0.5,color=colors)\nax.set_title('Feature Importance',color='black',fontweight='bold',size=18)\nax.set_xlabel('Variable Point',color='black',fontweight='bold',size=14)\nax.set_xticks(np.arange(0,32501,2500))\nax.set_ylabel('Variables',color='black',fontweight='bold',size=14)","7de485e6":"from sklearn.model_selection import StratifiedKFold,RandomizedSearchCV\nstf_kf=StratifiedKFold(n_splits=5)\nimport xgboost as xgb\nxgb_classifier=xgb.XGBClassifier(n_estimators=725,n_jobs=-1)\nparams={\n         'learning_rate': np.arange(0.01, 0.11, 0.025),\n         'max_depth': np.arange(1, 10, 1),\n         'min_child_weight': np.arange(1, 10, 1), \n         'subsample': np.arange( 0.7, 1, 0.05), \n         'gamma': np.arange(0.5, 1, 0.1), \n         'colsample_bytree': np.arange( 0.1, 1, 0.05), \n         'scale_pos_weight': np.arange( 20, 200, 10)}\nrs_cv_classifier=RandomizedSearchCV(xgb_classifier,param_distributions=params,cv=stf_kf,n_jobs=-1)\nrs_cv_classifier.fit(X_train,y_train)\ny_pred=rs_cv_classifier.predict(X_test)\nprint(\"Best Parameter: \\n\",rs_cv_classifier.best_params_)\nprint(\"XGBClassifier Acc Score: \",accuracy_score(y_pred,y_test))","76c20b68":"df_test_pred = rs_cv_classifier.predict(df_test.drop(['remaining_cycle','label'],axis=1))\ncm=confusion_matrix(df_test.iloc[:,-1], df_test_pred, labels=None, sample_weight=None)","0688fdfd":"print(\"Test Accuracy Score: \", accuracy_score(df_test.iloc[:,-1],df_test_pred))","4691bcec":"plt.figure(figsize=(16,12))\nsb.heatmap(cm,annot=True,annot_kws={\"size\": 25},linewidths=0.7,linecolor=\"black\",cmap=\"winter_r\",fmt=\"d\")","6a5db121":"# Don't forget to upvote if you like my notebook.","258bb83a":"# Engine cycle lifetime","34e3a0c2":"# Let's look at the cycle of the motor with ID = 1","99b94f93":"![pw-gtf-geared-turbofan-engine-3d-model-max-obj-mtl-3ds-c4d-lwo-lw-lws-ma-mb.jpg](attachment:pw-gtf-geared-turbofan-engine-3d-model-max-obj-mtl-3ds-c4d-lwo-lw-lws-ma-mb.jpg)","35b5b975":"# Let's delete the useless variables","0dc61457":"# Create Model","b10c0de2":"# Read data and understanding data","1ec7cc36":"# Nasa Turbofan Engine Remaining Lifetime","ebbe38ec":"**Alternative - Simple plot_importance**"}}