{"cell_type":{"bb0844a2":"code","3303ac6a":"code","95aa2091":"code","e162152e":"code","4e0ac1a2":"code","4e299dd7":"code","6eee3aab":"code","d76dedda":"code","24671bb1":"code","dd0ab080":"code","d99571f8":"code","ca8a3ba7":"code","6d7f3309":"code","55f0d874":"code","ba810427":"code","0d4b3c51":"code","4eaf6b60":"code","ed230a5e":"code","007fb3a9":"code","619f7f9d":"code","24346f9d":"code","5e154ec8":"code","caefb396":"code","60baa675":"code","6807fab2":"code","6fb0f5ca":"code","df5ec88e":"code","1a187c11":"code","2cd24aef":"code","945c76fa":"code","a1f171e0":"code","15c69393":"code","a2051a67":"code","349780d3":"code","1190014f":"code","9021159f":"code","c7c14ebb":"code","92109203":"code","45344bda":"code","d78074ae":"code","842fb78b":"code","eb487ab2":"code","2c3e1fd8":"code","3dc7e43b":"code","9289c4a4":"code","28d5ebbb":"code","535699d6":"code","524e625f":"code","c2e7e6db":"code","a59ca170":"code","6801f9c8":"code","65f5c68e":"markdown","75fe88ba":"markdown","be3ff790":"markdown","75b1b48d":"markdown","eca95faf":"markdown","de708e2a":"markdown","39c9f2a3":"markdown","a316c60e":"markdown","1c3d5154":"markdown","6970e6ef":"markdown","8e0d7b99":"markdown","f2f26b37":"markdown","2565d9be":"markdown","5f8c7347":"markdown","ac4685e3":"markdown","2e72e3c1":"markdown","e65f089a":"markdown","9badcb3c":"markdown","1122b947":"markdown","3b56e1b2":"markdown","ce05d794":"markdown","c17c304a":"markdown","93c43283":"markdown","2c6b66ba":"markdown","ca86ea60":"markdown","12e04793":"markdown","ad4396d4":"markdown","6f5ebb9e":"markdown","30b80609":"markdown","4d6e999b":"markdown"},"source":{"bb0844a2":"!pip install bar_chart_race -q","3303ac6a":"import numpy as np\nimport pandas as pd\nimport math\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport squarify\nimport bar_chart_race as bcr\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pylab import *\nfrom plotly.subplots import make_subplots\nimport plotly as pt\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.graph_objects as pgo\nimport plotly.figure_factory as ff\nimport calendar\nfrom IPython.display import display\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\n\nfrom IPython.core.display import HTML\ndef css_styling():\n    styles = open(\"..\/input\/design-nb\/style.css\", \"r\").read()\n    return HTML(styles)\ncss_styling()","95aa2091":"# Load the data from the csv file to pandas DataFrame\ndf = pd.read_csv('..\/input\/data-on-covid19-coronavirus\/owid-covid-data.csv')\n\n# Convert the date column into Time Stamp\ndf['date'] = pd.to_datetime(df['date'])","e162152e":"print(f'The Dataset contains, Rows: {df.shape[0]} Columns: {df.shape[1]}')","4e0ac1a2":"# Compute the correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","4e299dd7":"def top_correlated_feature(target_feature, n=2, method='pearson', cmap='rainbow'):\n    cor_df = df.corr(method)\n    cardiovasc_death_rate_corr_df = pd.DataFrame(cor_df.loc[target_feature]).reset_index().rename(columns={'index':'Feature', target_feature:'Correlation Value'})\n    print('Following are most Correlated Features with ' + target_feature)\n    display(cardiovasc_death_rate_corr_df.sort_values(['Correlation Value'], ascending=False).reset_index(drop=True)[1:n].style.background_gradient(cmap=cmap))","6eee3aab":"df.describe().T.style.background_gradient(cmap='Pastel2')","d76dedda":"world_df = df[['location', 'gdp_per_capita']]\nworld_df = world_df.dropna()\nworld_df = pd.DataFrame(world_df.value_counts()).reset_index()\nworld_df.drop([0, 'gdp_per_capita'], axis=1, inplace=True)\nworld_df = world_df[world_df['location'] != 'World']\n\nworld_cases_list = [list(df[df['location']==i]['total_cases'])[-1] for i in list(world_df['location'])]\nworld_deaths_list = [list(df[df['location']==i]['total_deaths'])[-1] for i in list(world_df['location'])]\n\nworld_df['total_cases'] = world_cases_list\nworld_df['total_deaths'] = world_deaths_list\nworld_df = world_df.dropna()\n\nworld_case_death_df = df[df['location'] == 'World'][['date', 'new_cases', 'new_deaths']]","24671bb1":"top_correlated_feature('total_cases', 10, cmap='bwr')","dd0ab080":"fig = px.choropleth(data_frame= world_df, locations = 'location',locationmode = 'country names',\n                    color = 'total_cases', scope = 'world', color_continuous_scale=px.colors.sequential.Agsunset_r)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title={'font_size':25, 'text': \"<b>WORLD MAP OF TOTAL COVID-19 CASES<\/b> <br><sup>Total Covid Cases: <b>{}<\/b> Million<\/sup>\".format(round(sum(world_df['total_cases'])\/10**6, 1)),\n                         'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                 font=dict(family=\"Courier New, monospace\",color=\"RebeccaPurple\"))\n \nfig.show()","d99571f8":"ten_k_line_df = pd.DataFrame({'date': list(world_case_death_df['date']),'y':[10000 for i in range(world_case_death_df.shape[0])]})\nsix_m_line_df = pd.DataFrame({'date': list(world_case_death_df['date']),'y':[600000 for i in range(world_case_death_df.shape[0])]})\n\nplot = pgo.Figure(\n    data=[go.Scatter(name='Covid Cases',x=world_case_death_df['date'],y=world_case_death_df['new_cases'], line=dict(color='#984aff')),\n          go.Scatter(name='Covid Deaths',x=world_case_death_df['date'],y=world_case_death_df['new_deaths'], line=dict(color='#fc956d')),\n          go.Scatter(x=ten_k_line_df['date'], y=ten_k_line_df['y'],line=dict(color='#6f6dfc'), opacity=0.5),\n          go.Scatter(x=six_m_line_df['date'], y=six_m_line_df['y'], line=dict(color='#edff4f')),\n          \n])\n \nplot.update_layout(\n    xaxis=dict(\n        showline=True, showgrid=True, showticklabels=True,\n        linecolor='rgb(204, 204, 204)',linewidth=2, ticks='outside',\n        tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)',),\n    ),\n    yaxis=dict(\n        showline=True, showgrid=True, showticklabels=True,\n        linecolor='rgb(204, 204, 204)', linewidth=2, ticks='outside',\n        tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)',),   \n    ),\n    \n    showlegend=False,\n    plot_bgcolor='white'\n)\n\n# Add dropdown\nplot.update_layout(font=dict(family=\"Courier New, monospace\", size=16, color=\"RebeccaPurple\"),\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                dict(label=\"Both\",method=\"update\",\n                     args=[{\"visible\": [True, True, False, False]},\n                           {\"title\": \"<b>SPREAD OF COVID-19 CASES & DEATHS OVER THE TIME<\/b>\"}]),\n                dict(label=\"Covid Cases\",method=\"update\",\n                     args=[{\"visible\": [True, False, False, True]},\n                           {\"title\": \"<b>SPREAD OF COVID-19 CASES OVER THE TIME IN WHOLE WORLD<\/b>\",\n                            }]),\n                dict(label=\"Covid Deaths\",method=\"update\",\n                     args=[{\"visible\": [False, True, True, False]},\n                           {\"title\": \"<b>OCCURANCE OF DEATH CASES DUE TO COVID-19 OVER THE TIME<\/b>\",\n                            }]\n                    ),\n            ]),\n        )\n    ])\n\nplot.show()","ca8a3ba7":"fig = px.choropleth(data_frame= world_df, locations = 'location',locationmode = 'country names',\n                    color = 'total_deaths', scope = 'world', color_continuous_scale=px.colors.sequential.YlGnBu)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(title={'font_size':25, 'text': \"<b>DEATH ACROSS THE WORLD DUE TO COVID-19<\/b> <br><sup>Total Deaths: <b>{}<\/b> Million<\/sup>\".format(round(sum(world_df['total_deaths'])\/10**6, 1)),\n                         'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                 font=dict(family=\"Courier New, monospace\",color=\"RebeccaPurple\"))\nfig.show()","6d7f3309":"# list of continent names\ncontinents = ['Asia', 'Europe', 'North America', 'South America', 'Africa', 'Oceania']\n\n# Population\ncontinents_population = [list(df[df['location'] == i]['population'])[0] for i in continents]\ntotal_population = list(df[df['location'] == 'World']['population'])[0]\ncontinents_population_percentage = [round(i*100\/total_population) for i in continents_population]\n\n# Total Covid Cases\ncontinents_covid_cases = [list(df[df['location'] == i]['total_cases'])[-1] for i in continents]\ntotal_covid_cases = list(df[df['location'] == 'World']['total_cases'])[-1]\ncontinents_covid_case_percentage = [round(i*100\/total_covid_cases, 1) for i in continents_covid_cases]\n\n# Infected Percentage of Population\ninfected_percentage = [round(continents_covid_cases[i]*100\/continents_population[i]) for i in range(6)]\n\n# Full Vaccination\ncontinents_fully_vaccinated = [list(df[df['location'] == i]['people_fully_vaccinated'])[-2] for i in continents]\ncontinents_fully_vaccinated_percentage = [round(continents_fully_vaccinated[i]*100\/continents_population[i]) for i in range(6)]\n\n# Total Death\ncontinents_deaths = [list(df[df['location'] == i]['total_deaths'])[-1] for i in continents]\ncontinents_deaths_percentage = [round(continents_deaths[i]*100\/continents_population[i], 2) for i in range(6)]\n\n# Dataframe\ncontinent_df = pd.DataFrame({'Continent': continents,\n                             'Population_Percentage': continents_population_percentage,\n                             'Covid_Case_Percentage': continents_covid_case_percentage,\n                             'Infected_Percentage': infected_percentage,\n                             'Full Vaccination Percentage\\nof Population': continents_fully_vaccinated_percentage,\n                             'Total Death Percentage\\nof Population': continents_deaths_percentage})\n\n# \ncontinent_categories_one = continent_df.columns.tolist()[1:4]\n\n#\ncontinent_categories_two = continent_df.columns.tolist()[4:]","55f0d874":"fig = plt.figure(figsize=(16, 6))\ncolors = ['#ff5e36', '#e3eb42', '#646aed']\n\nfor i in range(len(continent_categories_one)):\n    ax = fig.add_subplot(1, 4, i+1)\n    ax.barh(continent_df['Continent'], continent_df[continent_categories_one[i]], color=colors[i])\n    \n    ax.tick_params(bottom=False, top=False, left=False, right=False)\n    \n    plt.xticks(continent_df[continent_categories_one[i]], '')\n    plt.yticks(fontsize=15, weight='bold')\n    \n    ax.set_title(' '.join(continent_categories_one[i].split('_'))+'\\n', fontsize=15, color='grey', weight='bold')\n    \n    for idx, value in continent_df[continent_categories_one[i]].iteritems():\n        ax.text(value+0.5, idx, str(value)+'%', va='center', fontsize=15, weight='bold')\n    if i>0:\n        ax.tick_params(labelleft = False)\n        \n    for pos, spine in ax.spines.items():\n        spine.set_visible(False)\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.suptitle('\\nCONTINENT WISE POPULATION & COVID CASES & INFECTED PERCENTAGE', fontsize=20, y=1, x=0.43, color='RebeccaPurple', weight='bold')\nfig.tight_layout(rect=[0, 0.05, 1, 0.95])\nplt.show()","ba810427":"continents_start_date = [list(df.loc[df['location'] == i]['date'])[0] for i in continents]\nfirst_started_continent = continents[continents_start_date.index(min(continents_start_date))]\n\nfirst_started_continent_df = df.loc[df['location'] == first_started_continent][['date', 'total_cases']].reset_index(drop=True).rename(columns={'total_cases':first_started_continent})\n\ncontinents_temp_list = continents.copy()\ncontinents_temp_list.remove(first_started_continent)\n\nstart_df = first_started_continent_df.copy()\nfor i in range(5):\n    temp_df = df.loc[df['location'] == continents_temp_list[i]][['date', 'total_cases']].reset_index(drop=True).rename(columns={'total_cases':continents_temp_list[i]})\n    continent_animation_df = pd.merge(start_df, temp_df, how='left', on='date')\n    start_df = continent_animation_df.copy()\n    \ncontinent_animation_df.set_index('date', inplace=True)\ncontinent_animation_df.fillna(0, inplace=True)","0d4b3c51":"bcr.bar_chart_race(df=continent_animation_df,\n                   filename=None,\n                   title= \"CONTINENT WISE COVID-19 SPREAD FROM JAN 2020 TO NOW\",\n                   fixed_order=False, \n                   steps_per_period=20, \n                   period_length=500,\n                   cmap = 'sunset',\n                   bar_kwargs={'alpha': .7},\n                   dpi=125)","4eaf6b60":"sns.set_style(\"whitegrid\")\nax = sns.displot(data=df[df['location'].isin(continents)][['location', 'total_cases']],x=\"total_cases\", hue=\"location\",kind=\"kde\", height=6, aspect=2,\n            multiple=\"fill\", clip=(0, None), palette=\"rainbow\");\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.suptitle('\\nCONDITIONAL KERNEL DENSITY ESTIMATION OF\\n TOTAL COVID-19 CASES ACROSS CONTINENTS\\n', fontsize=20, y=1.2, x=0.43, color='RebeccaPurple', weight='bold');","ed230a5e":"sns.set_style(\"white\")\nplt.figure(figsize=(15, 8))\nax = sns.histplot(df[df['location'].isin(continents)][['location', 'total_cases']],x=\"total_cases\", hue=\"location\",multiple=\"stack\",palette=\"rainbow\",\n                 edgecolor=\".3\",linewidth=.5,log_scale=True,);\n\nfor pos, spine in ax.spines.items():\n        spine.set_visible(False)\n        \nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]        \nplt.show()","007fb3a9":"colors = ['#4938ff', '#45ffab', '#ff8a65', '#ff2441', '#af4dff', '#ffc524']\nline_size = [3, 2, 2, 2, 2, 2.5]\nmode_size = [12, 8, 8, 8, 8, 8]\nfig = go.Figure()\n\nfor i in range(6):\n    fig.add_trace(go.Scatter(x=df[df['location'] == continents[i]]['date'],\n                             y=df[df['location'] == continents[i]]['total_cases'], \n                             mode='lines', name=continents[i],\n                             line=dict(color=colors[i], width=line_size[i]),\n                             connectgaps=True, opacity=0.6\n    ))\n    \n    fig.add_trace(go.Scatter(\n        x=[list(df[df['location'] == continents[i]]['date'])[0], list(df[df['location'] == continents[i]]['date'])[-1]],\n        y=[list(df[df['location'] == continents[i]]['total_cases'])[0], list(df[df['location'] == continents[i]]['total_cases'])[-1]],\n        mode='markers',\n        marker=dict(color=colors[i], size=mode_size[i])\n    ))\n    \n    \nfig.update_layout(\n    xaxis=dict(\n        showline=True, showgrid=False, showticklabels=True,\n        linecolor='rgb(204, 204, 204)',linewidth=2,ticks='outside',\n        tickfont=dict(family='Courier New, monospace', size=12, color='rgb(82, 82, 82)',),\n    ),\n    yaxis=dict(\n        title = 'Covid Cases', showline=False, showgrid=True, showticklabels=True,\n        ticks='outside',gridcolor = '#f0f0f0',gridwidth = 1,\n        titlefont = dict(family = 'Courier New, monospace', size = 18,color = 'grey'),\n        tickfont=dict(family='Courier New, monospace', size=12, color='rgb(82, 82, 82)',),   \n    ),\n    \n    showlegend=False,\n    plot_bgcolor='white'\n)\n\nannotations = []\n\ntemp_continents = ['Asia', 'Europe', 'North<br>America', 'South<br>America', 'Africa', 'Oceania']\n\n# Adding labels\ncount = 0\nfor case, continent, color in zip(continents_covid_cases, temp_continents, colors):\n    percentage = round(case*100\/total_covid_cases, 1)\n    \n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=case,\n                            xanchor='left', yanchor='middle',\n                            text= '<b>{} ({}%)<\/b>'.format(continent, percentage),\n                            font=dict(family='Courier New, monospace', size=14, color=colors[count]),\n                            showarrow=False))\n    count += 1\n \n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='<b>{}% OF GLOBAL COVID-19 CASES<br>ARE FROM ASIA & EUROPE<\/b>'.format(round(sum(list(continent_df['Covid_Case_Percentage'])[:2]), 1)),\n                              font=dict(family='Courier New, monospace',size=25),\n                              showarrow=False))\n    \nfig.update_layout(font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                  annotations=annotations)\n\nfig.show()","619f7f9d":"fig = plt.figure(figsize=(16, 6))\ncolors = ['#3bff89', '#ff763b']\n\nfor i in range(len(continent_categories_two)):\n    ax = fig.add_subplot(1, 3, i+1)\n    ax.barh(continent_df['Continent'], continent_df[continent_categories_two[i]], color=colors[i])\n    \n    ax.tick_params(bottom=False, top=False, left=False, right=False)\n    \n    plt.xticks(continent_df[continent_categories_two[i]], '')\n    plt.yticks(fontsize=15, weight='bold')\n    \n    ax.set_title(continent_categories_two[i]+'\\n', fontsize=15, color='grey', weight='bold')\n    \n    for idx, value in continent_df[continent_categories_two[i]].iteritems():\n        ax.text(value+0.01, idx, str(value)+'%', va='center', fontsize=15, weight='bold')\n    if i>0:\n        ax.tick_params(labelleft = False)\n        \n    for pos, spine in ax.spines.items():\n        spine.set_visible(False)\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.suptitle('\\nCONTINENT WISE FULL VACCINATION & DEATH PERCENTAGE', fontsize=20, y=1, x=0.4, color='RebeccaPurple', weight='bold')\nfig.tight_layout(rect=[0, 0.05, 1, 0.95])\nplt.show()","24346f9d":"# list of top 10 countries\ntop_ten_countries = ['India', 'United States', 'Brazil', 'Russia', 'Germany','Iran',\n                    'United Kingdom', 'France','Italy','Spain',]\n\n# Population\ncountries_population = [list(df[df['location'] == i]['population'])[0] for i in top_ten_countries]\ncountries_population_percentage = [round(i*100\/total_population, 1) for i in countries_population]\n\n# Total Covid Cases\ncountries_covid_cases = [list(df[df['location'] == i]['total_cases'])[-1] for i in top_ten_countries]\ncountries_covid_case_percentage = [round(i*100\/total_covid_cases, 1) for i in countries_covid_cases]\n\n# Infected\ncountries_infected_percentage = [round(countries_covid_cases[i]*100\/countries_population[i]) for i in range(10)]\n\n# Vaccination\ncountries_fully_vaccinated = [max([i for i in list(df[df['location'] == i]['people_fully_vaccinated']) if math.isnan(i) == False]) for i in top_ten_countries]\ncountries_fully_vaccinated_percentage = [round(countries_fully_vaccinated[i]*100\/countries_population[i]) for i in range(10)]\n\n# Total Deaths\ncountries_deaths = [list(df[df['location'] == i]['total_deaths'])[-1] for i in top_ten_countries]\ncountries_deaths_percentage = [round(countries_deaths[i]*100\/countries_population[i], 2) for i in range(10)]\n\n# Dataframe\ncountry_df = pd.DataFrame({'Countries': top_ten_countries,\n                           'Population_Percentage': countries_population_percentage,\n                           'Covid_Case_Percentage': countries_covid_case_percentage,\n                           'Infected_Percentage': countries_infected_percentage,\n                           'Full Vaccination Percentage\\nof Population': countries_fully_vaccinated_percentage,\n                           'Total Death Percentage\\nof Population': countries_deaths_percentage})\n\n# \ncountry_categories_one = country_df.columns.tolist()[1:4]\n\n#\ncountry_categories_two = country_df.columns.tolist()[4:]","5e154ec8":"countries_cases_in_million = [round(i, 1) for i in np.array(countries_covid_cases)\/10**6]\ncolors = [plt.cm.rainbow_r(i\/float(len(top_ten_countries))) for i in range(10)]\n\n# Draw Plot\nfig = plt.figure(figsize=(13,8), dpi= 80)\nax = squarify.plot(sizes=countries_covid_cases, color=colors, alpha=.8, pad = True)\n\nfontsizes = [25, 33, 20, 20, 12, 12, 11, 11, 9, 9]\nfont_colors = ['white', 'white', 'white', 'white', 'grey', 'grey', 'grey', 'black', 'black', 'black']\ncount = 0\n\nfor i, j in zip(ax.patches, countries_cases_in_million):\n    middle = i.get_x()+(i.get_width()\/7), i.get_y()+(i.get_height()\/2.5)\n    ax.text(middle[0], middle[1], top_ten_countries[count]+ '\\n' + str(j) + ' Million', \n            fontsize=fontsizes[count], weight='bold', color=font_colors[count])\n    count += 1\n    \nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.axis('off')\nplt.title('\\nTOP 10 COUNTRIES WITH MOST NO. OF COVID-19 CASES\\n', fontsize=20, color='RebeccaPurple', weight='bold')\nplt.show()","caefb396":"fig = plt.figure(figsize=(15, 8))\ncolors = ['magma_r', 'rainbow', 'cool']\n\nfor i in range(len(country_categories_one)):\n    ax = fig.add_subplot(1, 4, i+1)\n    sns.barplot(y=country_df['Countries'], x=country_df[country_categories_one[i]], palette=colors[i],)\n    \n    ax.tick_params(bottom=False, top=False, left=False, right=False)\n    \n    plt.xticks(country_df[country_categories_one[i]], '')\n    plt.yticks(fontsize=15, weight='bold')\n    plt.xlabel(\"\")\n    plt.ylabel(\"\")\n    \n    ax.set_title(' '.join(country_categories_one[i].split('_'))+'\\n', fontsize=15, color='grey', weight='bold')\n    \n    for idx, value in country_df[country_categories_one[i]].iteritems():\n        ax.text(value+0.5, idx, str(value)+'%', va='center', fontsize=15, weight='bold')\n    if i>0:\n        ax.tick_params(labelleft = False)\n        \n    for pos, spine in ax.spines.items():\n        spine.set_visible(False)\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.suptitle('\\nCOUNTRY WISE POPULATION & COVID CASES & INFECTED PERCENTAGE', fontsize=20, y=1, x=0.44, color='RebeccaPurple', weight='bold')\nfig.tight_layout(rect=[0, 0.05, 1, 0.95])\nplt.show()","60baa675":"# create a list with contries covid starting date\ncountries_starting_date = [list(df.loc[df['location'] == i]['date'])[0] for i in top_ten_countries]\nfirst_started_country = top_ten_countries[countries_starting_date.index(min(countries_starting_date))]\n\n# Dataframe of first_started_country\nfirst_started_country_df = df.loc[df['location'] == first_started_country][['date', 'total_cases']].reset_index(drop=True).rename(columns={'total_cases':first_started_country})\n\n# Copy the list & remove the first_started_country\ncountries_temp_list = top_ten_countries.copy()\ncountries_temp_list.remove(first_started_country)\n\n\nstart_df = first_started_country_df.copy()\nfor i in range(9):\n    temp_df = df.loc[df['location'] == countries_temp_list[i]][['date', 'total_cases']].reset_index(drop=True).rename(columns={'total_cases':countries_temp_list[i]})\n    countries_animation_df = pd.merge(start_df, temp_df, how='left', on='date')\n    start_df = countries_animation_df.copy()\n    \n# Set date column as the index\ncountries_animation_df.set_index(\"date\", inplace=True)\n\n# replace all the Nan value with 0\ncountries_animation_df.fillna(0, inplace=True)","6807fab2":"bcr.bar_chart_race(df=countries_animation_df,\n                   filename=None,\n                   title= \"TOP 10 Countries With highest number of COVID-19 Cases\",\n                   fixed_order=False, \n                   steps_per_period=20, \n                   period_length=500,\n                   cmap = 'thermal',\n                   bar_kwargs={'alpha': .7},\n                   dpi=125)","6fb0f5ca":"colors = ['#00bfff', '#00ffa6', '#2300b0', '#ffbf00', '#ff1745']\nline_size = [2, 3, 2, 2, 2]\nmode_size = [8, 12, 8, 8, 8]\n\nfig = go.Figure()\n\nfor i in range(5):\n    fig.add_trace(go.Scatter(x=df[df['location'] == top_ten_countries[i]]['date'],\n                             y=df[df['location'] == top_ten_countries[i]]['total_cases'], \n                             mode='lines', name=top_ten_countries[i],\n                             line=dict(color=colors[i], width=line_size[i]),\n                             connectgaps=True, opacity=0.6))\n    \n    fig.add_trace(go.Scatter(\n        x=[list(df[df['location'] == top_ten_countries[i]]['date'])[0], list(df[df['location'] == top_ten_countries[i]]['date'])[-1]],\n        y=[list(df[df['location'] == top_ten_countries[i]]['total_cases'])[0], list(df[df['location'] == top_ten_countries[i]]['total_cases'])[-1]],\n        mode='markers',marker=dict(color=colors[i], size=mode_size[i]) ))\n    \n    \nfig.update_layout(\n    xaxis = dict(showline=True, showgrid=False, showticklabels=True,\n               linecolor='rgb(204, 204, 204)',linewidth=2,ticks='outside',\n               tickfont=dict(family='Courier New, monospace', size=14, color='rgb(82, 82, 82)')),\n    \n    yaxis = dict(title = 'Covid Cases', showline=False, showgrid=True, showticklabels=True,\n                 ticks='outside',gridcolor = '#f0f0f0',gridwidth = 1,\n                 titlefont = dict(family = 'Courier New, monospace', size = 18,color = 'grey'),\n                 tickfont=dict(family='Courier New, monospace', size=14, color='rgb(82, 82, 82)')),\n    \n    showlegend=False,\n    plot_bgcolor='white')\n\nannotations = []\ntemp_top_ten_countries = ['India', 'United<br>States', 'Brazil', 'Russia', 'Germany','Iran',\n                    'United Kingdom', 'France','Italy','Spain']\n\n# Adding labels\ncount = 0\nfor case, country, color in zip(countries_covid_cases[:5], temp_top_ten_countries[:5], colors):\n    \n    percentage = round(case*100\/total_covid_cases, 1)\n    \n    # labeling the right_side of the plot\n    annotations.append(dict(xref='paper', x=0.95, y=case,xanchor='left', yanchor='middle',\n                            text= '<b>{}({}%)<\/b>'.format(country, percentage),\n                            font=dict(family='Courier New, monospace', size=15, color=colors[count]),\n                            showarrow=False))\n    count += 1\n \n\n# Title\nannotations.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,\n                              xanchor='left', yanchor='bottom',\n                              text='<b>{}% OF GLOBAL COVID-19 CASES ARE FROM <br> 5 COUNTRIES (USA, INDIA, BRAZIL, RUSSIA, GERMANY)<\/b>'.format(sum(list(country_df['Covid_Case_Percentage'])[:5])),\n                              font=dict(family='Courier New, monospace',size=25),\n                              showarrow=False))\n\n    \nfig.update_layout(font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                  annotations=annotations)\nfig.show()","df5ec88e":"fig = plt.figure(figsize=(15, 8))\ncolors = ['plasma_r', 'spring']\n\nfor i in range(len(country_categories_two)):\n    ax = fig.add_subplot(1, 3, i+1)\n    ax = sns.barplot(y=country_df['Countries'], x=country_df[country_categories_two[i]], palette=colors[i],)\n    \n    ax.tick_params(bottom=False, top=False, left=False, right=False)\n    \n    plt.xticks(country_df[country_categories_two[i]], '')\n    plt.yticks(fontsize=15, weight='bold')\n    plt.xlabel(\"\")\n    plt.ylabel(\"\")\n    \n    ax.set_title(' '.join(country_categories_two[i].split('_'))+'\\n', fontsize=15, color='grey', weight='bold')\n    \n    for idx, value in country_df[country_categories_two[i]].iteritems():\n        ax.text(value, idx, str(value)+'%', va='center', fontsize=15, weight='bold')\n    if i>0:\n        ax.tick_params(labelleft = False)\n        \n    for pos, spine in ax.spines.items():\n        spine.set_visible(False)\n\nplt.rcParams['font.family'] = \"Courier New, monospace\"\nplt.rcParams['font.serif'] = [\"Courier New, monospace\"]\nplt.suptitle('\\nCOUNTRY WISE FULL VACCINATION & DEATH PERCENTAGE', fontsize=20, y=1, x=0.4, color='RebeccaPurple', weight='bold')\nfig.tight_layout(rect=[0, 0.05, 1, 0.95])\nplt.show()","1a187c11":"France_df = df[df['location'] == 'France'][['new_cases', 'new_deaths', 'location']]\nFrance_df['new_cases'] = France_df['new_cases'].abs()\nFrance_df['new_deaths'] = France_df['new_deaths'].abs()\n\nSpain_df = df[df['location'] == 'Spain'][['new_cases',  'new_deaths','location']]\nSpain_df['new_cases'] = Spain_df['new_cases'].abs()\nSpain_df['new_deaths'] = Spain_df['new_deaths'].abs()","2cd24aef":"plot = pgo.Figure(\n    data=[go.Scatter(name='Covid Cases',x=df[df['location']=='India']['date'],y=df[df['location']=='India']['new_cases'], line=dict(color='#00ffa6')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='United States']['date'],y=df[df['location']=='United States']['new_cases'], line=dict(color='#00bfff')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Brazil']['date'],y=df[df['location']=='Brazil']['new_cases'], line=dict(color='#2300b0')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Russia']['date'],y=df[df['location']=='Russia']['new_cases'], line=dict(color='#ffbf00')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Germany']['date'],y=df[df['location']=='Germany']['new_cases'], line=dict(color='#ff1745')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Iran']['date'],y=df[df['location']=='Iran']['new_cases'], line=dict(color='#6bd694')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='United Kingdom']['date'],y=df[df['location']=='United Kingdom']['new_cases'], line=dict(color='#ded833')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='France']['date'],y=France_df['new_cases'], line=dict(color='#26916f')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Italy']['date'],y=df[df['location']=='Italy']['new_cases'], line=dict(color='#984aff')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Spain']['date'],y=Spain_df['new_cases'], line=dict(color='#fc956d'))  \n])\n \nplot.update_layout(\n    xaxis=dict(showline=True, showgrid=False, showticklabels=True,\n               linecolor='rgb(204, 204, 204)',linewidth=2,ticks='outside',\n               tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)')),\n    \n    yaxis=dict(showline=True, showgrid=False, showticklabels=True,\n               linecolor='rgb(204, 204, 204)', linewidth=2, ticks='outside',\n               tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)')),\n    showlegend=False,\n    plot_bgcolor='white')\n\n# Add dropdown\nplot.update_layout(font=dict(family=\"Courier New, monospace\", size=16, color=\"RebeccaPurple\"),\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                \n                dict(label=\"India\",method=\"update\",\n                     args=[{\"visible\": [True, False, False, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN INDIA<\/b>\"}]),\n                dict(label=\"United States\",method=\"update\",\n                     args=[{\"visible\": [False, True, False, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN United States<\/b>\"}]),\n                dict(label=\"Brazil\",method=\"update\",\n                     args=[{\"visible\": [False, False, True, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Brazil<\/b>\"}]),\n                dict(label=\"Russia\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, True, False, False, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Russia<\/b>\"}]),\n                dict(label=\"Germany\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, True, False, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Germany<\/b>\"}]),\n                dict(label=\"Iran\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, True, False, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Iran<\/b>\"}]),\n                dict(label=\"United Kingdom\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, True, False, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN United Kingdom<\/b>\"}]),\n                dict(label=\"France\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, True, False, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN France<\/b>\"}]),\n                dict(label=\"Italy\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, False, True, False]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Italy<\/b>\"}]),\n                dict(label=\"Spain\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, False, False, True]},\n                           {\"title\": \"<b>COVID-19 DAILY NEW CASES FROM JAN 2020 IN Spain<\/b>\"}])\n            ]),\n        )\n    ])\n  \n\nplot.show()","945c76fa":"plot = pgo.Figure(\n    data=[go.Scatter(name='Covid Cases',x=df[df['location']=='India']['date'],y=df[df['location']=='India']['new_deaths'], line=dict(color='#00ffa6')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='United States']['date'],y=df[df['location']=='United States']['new_deaths'], line=dict(color='#00bfff')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Brazil']['date'],y=df[df['location']=='Brazil']['new_deaths'], line=dict(color='#2300b0')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Russia']['date'],y=df[df['location']=='Russia']['new_deaths'], line=dict(color='#ffbf00')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Germany']['date'],y=df[df['location']=='Germany']['new_deaths'], line=dict(color='#ff1745')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Iran']['date'],y=df[df['location']=='Iran']['new_deaths'], line=dict(color='#6bd694')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='United Kingdom']['date'],y=df[df['location']=='United Kingdom']['new_deaths'], line=dict(color='#ded833')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='France']['date'],y=France_df['new_deaths'], line=dict(color='#26916f')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Italy']['date'],y=df[df['location']=='Italy']['new_deaths'], line=dict(color='#984aff')),\n          go.Scatter(name='Covid Cases',x=df[df['location']=='Spain']['date'],y=Spain_df['new_deaths'], line=dict(color='#fc956d'))  \n])\n \nplot.update_layout(\n    xaxis=dict(showline=True, showgrid=False, showticklabels=True,\n               linecolor='rgb(204, 204, 204)',linewidth=2,ticks='outside',\n               tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)')),\n    \n    yaxis=dict(showline=True, showgrid=False, showticklabels=True,\n               linecolor='rgb(204, 204, 204)', linewidth=2, ticks='outside',\n               tickfont=dict(family='Courier New, monospace', size=13, color='rgb(82, 82, 82)')),\n    showlegend=False,\n    plot_bgcolor='white')\n\n# Add dropdown\nplot.update_layout(font=dict(family=\"Courier New, monospace\", size=16, color=\"RebeccaPurple\"),\n    updatemenus=[\n        dict(\n            active=0,\n            buttons=list([\n                \n                dict(label=\"India\",method=\"update\",\n                     args=[{\"visible\": [True, False, False, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in India<\/b>\"}]),\n                dict(label=\"United States\",method=\"update\",\n                     args=[{\"visible\": [False, True, False, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in United States<\/b>\"}]),\n                dict(label=\"Brazil\",method=\"update\",\n                     args=[{\"visible\": [False, False, True, False, False, False, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Brazil<\/b>\"}]),\n                dict(label=\"Russia\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, True, False, False, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Russia<\/b>\"}]),\n                dict(label=\"Germany\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, True, False, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Germany<\/b>\"}]),\n                dict(label=\"Iran\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, True, False, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Iran<\/b>\"}]),\n                dict(label=\"United Kingdom\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, True, False, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in United Kingdom<\/b>\"}]),\n                dict(label=\"France\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, True, False, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in France<\/b>\"}]),\n                dict(label=\"Italy\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, False, True, False]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Italy<\/b>\"}]),\n                dict(label=\"Spain\",method=\"update\",\n                     args=[{\"visible\": [False, False, False, False, False, False, False, False, False, True]},\n                           {\"title\": \"<b>Daily number of death cases from Covid-19 in Spain<\/b>\"}])\n            ]),\n        )\n    ])\n  \n\nplot.show()","a1f171e0":"all_countries_million_per_cases = [list(df[df['location']==i]['total_cases_per_million'])[-1] for i in list(world_df['location'])]\nall_countries_million_per_deaths = [list(df[df['location']==i]['total_deaths_per_million'])[-1] for i in list(world_df['location'])]\n\nall_countries_million_per_cases_deaths_df = pd.DataFrame({'location':list(world_df['location']),\n                                                  'Cases Per Million': all_countries_million_per_cases,\n                                                  'Deaths Per Million':all_countries_million_per_deaths})\n\ntop_ten_countries_per_million_cases_df = all_countries_million_per_cases_deaths_df.sort_values(by='Cases Per Million', ascending=False)[:10][['location', 'Cases Per Million']].reset_index(drop=True)\ntop_ten_countries_per_million_deaths_df = all_countries_million_per_cases_deaths_df.sort_values(by='Deaths Per Million', ascending=False)[:10][['location', 'Deaths Per Million']].reset_index(drop=True)\n\ntop_ten_countries_per_million_cases_df['Cases Per Million'] = [round(i) for i in list(top_ten_countries_per_million_cases_df['Cases Per Million'])]\ntop_ten_countries_per_million_cases_df['infected_percentage'] = [round((i*100)\/10**6, 2) for i in top_ten_countries_per_million_cases_df['Cases Per Million']]\ntop_ten_countries_per_million_cases_df['diabetes_prevalence'] = [list(df[df['location']==i]['diabetes_prevalence'])[-1] for i in top_ten_countries_per_million_cases_df['location']]\ntop_ten_countries_per_million_cases_df['cardiovasc_death_rate'] = [list(df[df['location']==i]['cardiovasc_death_rate'])[-1] for i in top_ten_countries_per_million_cases_df['location']]\n\ntop_ten_countries_per_million_deaths_df['Deaths Per Million'] = [round(i) for i in list(top_ten_countries_per_million_deaths_df['Deaths Per Million'])]","15c69393":"fig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]],\n                    column_widths=[0.5, 0.5], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Top 10 Countries<br>\", \"Infected Percentage<br>\"))\n\ncmap = cm.get_cmap('rainbow', 10)   \nclrs = [matplotlib.colors.rgb2hex(cmap(i)) for i in range(cmap.N)]\n\nfig.add_trace(go.Bar(\n    x=top_ten_countries_per_million_cases_df['Cases Per Million'], \n    y=top_ten_countries_per_million_cases_df['location'], \n    marker=dict(color=clrs),text=top_ten_countries_per_million_cases_df['Cases Per Million'],\n    orientation='h'),row=1, col=1)\n\n\nfig.add_trace(go.Pie(\n    values=top_ten_countries_per_million_cases_df['infected_percentage'], \n    labels=top_ten_countries_per_million_cases_df['location'],\n    marker=dict(colors=clrs), hole=0.7,\n    hoverinfo='label+value', text=top_ten_countries_per_million_cases_df['infected_percentage'],\n    textinfo='value'), row=1, col=2)\n\n\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending', row=1, col=1)\nfig.update_yaxes(showgrid=False, ticksuffix=' ', categoryorder='total ascending', row=1, col=2)\n\nfig.update_traces(texttemplate='%{text}', textposition='inside', textfont_size=15, row=1, col=1)\nfig.update_traces(texttemplate='%{text}', textposition='inside', textfont_size=15, row=1, col=2)\nfig.update_xaxes(visible=False, row=1, col=1)\nfig.update_xaxes(visible=False, row=1, col=2)\n\nfig.update_layout(template=\"plotly_white\",showlegend=False,\n                  font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                  annotations=[dict(text='<b>INFECTED PERCENTAGE<\/b>', x=0.75, y=1.1, font_size=20, showarrow=False),\n                               dict(text='<b>TOP 10 COUNTRIES WITH MOST NO.OF<br>COVID-19 CASES PER MILLION<\/b>', x=0.22, y=1.1, font_size=20, showarrow=False)])\n\nfig.show()","a2051a67":"top_ten_countries_per_million_cases_df.style.background_gradient(cmap='viridis')","349780d3":"top_correlated_feature('diabetes_prevalence', 2)\ntop_correlated_feature('cardiovasc_death_rate', 2)","1190014f":"fig, ax = plt.subplots(figsize = (10,8), dpi = 80)\n\nax=sns.barplot(x=top_ten_countries_per_million_deaths_df['Deaths Per Million'], \n               y=top_ten_countries_per_million_deaths_df['location'], palette='autumn')\n\nfor p in ax.patches:\n    plt.text(p.get_width()-400, p.get_y()+0.45,\n            '{:,d}'.format(int(p.get_width())),ha='center', va='center', fontsize=15, color='white', weight='bold')\n\nplt.title('\\nTOP 10 COUNTRIES WITH MOST NO. OF \\nCOVID-19 DEATHS PER MILLION\\n', size=20, color='RebeccaPurple', weight='bold')\nplt.ylabel('\\nCountries\\n', fontsize=15, color='grey')\nplt.yticks(fontsize=14)\nax.axes.xaxis.set_visible(False)\n\nfor i in ['top', 'left', 'right', 'bottom']:\n    side = ax.spines[i]\n    side.set_visible(False)","9021159f":"life_expectancy_cases_df = df[['location', 'life_expectancy']]\nlife_expectancy_cases_df = life_expectancy_cases_df.dropna()\nlife_expectancy_cases_df = pd.DataFrame(life_expectancy_cases_df.value_counts()).reset_index()\nlife_expectancy_cases_df.drop(0, axis=1, inplace=True)\n\navg_lifeExp = list(life_expectancy_cases_df[life_expectancy_cases_df['location'] == 'World']['life_expectancy'])[0]\nlife_expectancy_cases_df = life_expectancy_cases_df[life_expectancy_cases_df['location'] != 'World']\n\nall_countries_cases_le = [list(df[df['location']==i]['total_cases'])[-1] for i in list(life_expectancy_cases_df['location'])]\n\nlife_expectancy_cases_df['total_cases'] = all_countries_cases_le\nlife_expectancy_cases_df = life_expectancy_cases_df.dropna()","c7c14ebb":"top_correlated_feature('life_expectancy', 10)","92109203":"fig = px.choropleth(data_frame= life_expectancy_cases_df, locations = 'location', locationmode = 'country names', \n                   color = 'life_expectancy', scope = 'world', color_continuous_scale=px.colors.sequential.YlGnBu_r)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(\n            title={'font_size':25, \n                   'text': \"<b>WORLD MAP OF LIFE EXPENTENCY IN 2021<\/b> <br><sup>Average Life Expectancy: <b>%.1f<\/b> years<\/sup>\"% avg_lifeExp,\n                   'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n            font=dict(family=\"Courier New, monospace\",color=\"RebeccaPurple\")\n)\nfig.show()","45344bda":"fig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"Histogram\"}, {\"type\": \"Scatter\"}]],\n                    column_widths=[0.5, 0.5], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Scatter Plot<br>\", \"Histogram<br>\"))\n\ncmap = cm.get_cmap('rainbow', 10)   \nclrs = [matplotlib.colors.rgb2hex(cmap(i)) for i in range(cmap.N)]\n\nfig.add_trace(go.Histogram(x=life_expectancy_cases_df['life_expectancy'], \n                           y=life_expectancy_cases_df['total_cases'],\n                           opacity=0.8, marker_color='#4aff7a'),row=1, col=2)\n\nfig.add_trace(go.Scatter(x=life_expectancy_cases_df[\"life_expectancy\"], \n                         y=life_expectancy_cases_df[\"total_cases\"],\n                         mode='markers', marker_color='#ff7029'), row=1, col=1)\n\n\nfig.update_layout(template=\"plotly_white\",showlegend=False,yaxis_title=\"Covid Cases\",\n                  title={'font_size':23, 'text': \"<b>LIFE EXPENTENCY  Vs  TOTAL COVID-19 CASES<\/b>\",\n                         'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                 font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                 annotations=[dict(x=0.5, y=-0.2,text='Life Expectency')])\n\nfig.show()","d78074ae":"hdi_cases_df = df[['location', 'human_development_index']]\nhdi_cases_df = hdi_cases_df.dropna()\n\nhdi_cases_df = pd.DataFrame(hdi_cases_df.value_counts()).reset_index()\nhdi_cases_df.drop(0, axis=1, inplace=True)\n\navg_hdi = list(hdi_cases_df[hdi_cases_df['location'] == 'World']['human_development_index'])[0]\nhdi_cases_df = hdi_cases_df[hdi_cases_df['location'] != 'World']\n\nall_countries_cases_hdi = [list(df[df['location']==i]['total_cases'])[-1] for i in list(hdi_cases_df['location'])]\nhdi_cases_df['total_cases'] = all_countries_cases_hdi\n\nhdi_cases_df = hdi_cases_df.dropna()","842fb78b":"top_correlated_feature('human_development_index', 10, cmap='YlOrRd')","eb487ab2":"fig = px.choropleth(data_frame= hdi_cases_df, locations = 'location', locationmode = 'country names', \n               color = 'human_development_index', scope = 'world', color_continuous_scale=px.colors.sequential.Aggrnyl)\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(\n            title={'font_size':25, \n                   'text': \"<b>WORLD MAP OF HUMAN DEVELOPMENT INDEX IN 2021<\/b> <br><sup>Average Human Development Index: <b>%.2f<\/b><\/sup>\"% avg_hdi,\n                   'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n            font=dict(family=\"Courier New, monospace\",color=\"RebeccaPurple\")\n)\nfig.show()","2c3e1fd8":"fig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"Histogram\"}, {\"type\": \"Scatter\"}]],\n                    column_widths=[0.5, 0.5], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Scatter Plot<br>\", \"Histogram<br>\"))\n\ncmap = cm.get_cmap('rainbow', 10)   \nclrs = [matplotlib.colors.rgb2hex(cmap(i)) for i in range(cmap.N)]\n\nfig.add_trace(go.Histogram(x=hdi_cases_df['human_development_index'], y=hdi_cases_df['total_cases'],\n                           opacity=0.7, marker_color='#f77239'),row=1, col=2)\n\nfig.add_trace(go.Scatter(x=hdi_cases_df[\"human_development_index\"], y=hdi_cases_df[\"total_cases\"],\n                         mode='markers', marker_color='#4f39f7'), row=1, col=1)\n\nfig.update_layout(template=\"plotly_white\",showlegend=False,yaxis_title=\"Covid Cases\",\n                  title={'font_size':23, 'text': \"<b>HUMAN DEVELOPMENT INDEX  Vs  TOTAL COVID-19 CASES<\/b>\",\n                         'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                 font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                 annotations=[dict(x=0.5, y=-0.2,text='Human Development Index')])\nfig.show()","3dc7e43b":"gdp_cases_df = df[['location', 'gdp_per_capita']]\ngdp_cases_df = gdp_cases_df.dropna()\n\ngdp_cases_df = pd.DataFrame(gdp_cases_df.value_counts()).reset_index()\ngdp_cases_df.drop(0, axis=1, inplace=True)\n\navg_gdp_per_capita = list(gdp_cases_df[gdp_cases_df['location'] == 'World']['gdp_per_capita'])[0]\ngdp_cases_df = gdp_cases_df[gdp_cases_df['location'] != 'World']\n\nall_countries_cases = [list(df[df['location']==i]['total_cases'])[-1] for i in list(gdp_cases_df['location'])]\ngdp_cases_df['total_cases'] = all_countries_cases\n\ngdp_cases_df = gdp_cases_df.dropna()","9289c4a4":"top_correlated_feature('human_development_index', 10, cmap='Wistia')","28d5ebbb":"fig = px.choropleth(data_frame= gdp_cases_df, locations = 'location', locationmode = 'country names', \n               color = 'gdp_per_capita', scope = 'world', color_continuous_scale=px.colors.sequential.Sunsetdark )\n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(\n            title={'font_size':25, \n                   'text': \"<b>WORLD MAP OF GDP PER CAPITA IN 2021<\/b> <br><sup>Average GDP Per Capita: <b>%.f<\/b><\/sup>\"% avg_gdp_per_capita,\n                   'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n            font=dict(family=\"Courier New, monospace\",color=\"RebeccaPurple\"))\n\nfig.show()","535699d6":"fig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"Histogram\"}, {\"type\": \"Scatter\"}]],\n                    column_widths=[0.5, 0.5], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Scatter Plot<br>\", \"Histogram<br>\"))\n\ncmap = cm.get_cmap('rainbow', 10)   \nclrs = [matplotlib.colors.rgb2hex(cmap(i)) for i in range(cmap.N)]\n\nfig.add_trace(go.Histogram(x=gdp_cases_df['gdp_per_capita'], y=gdp_cases_df['total_cases'],\n                           opacity=0.8, marker_color='#f7db39'),row=1, col=2)\n\nfig.add_trace(go.Scatter(x=gdp_cases_df[\"gdp_per_capita\"], y=gdp_cases_df[\"total_cases\"],\n                         mode='markers', marker_color='#d63dfc'), row=1, col=1)\n\nfig.update_layout(template=\"plotly_white\",showlegend=False,yaxis_title=\"Covid Cases\",\n                  title={'font_size':23, 'text': \"<b>GDP PER CAPITA  Vs  TOTAL COVID-19 CASES<\/b>\",\n                         'y':0.95,'x':0.5,'xanchor': 'center','yanchor': 'top'},\n                  font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                 annotations=[dict(x=0.5, y=-0.2,text='GDP Per Capita')])\nfig.show()","524e625f":"top_correlated_feature('icu_patients', 10, cmap='magma')","c2e7e6db":"all_countries_stringency_index = [list(df[df['location']==i]['stringency_index'])[0] for i in list(world_df['location'])]\nall_countries_stringency_index_df = pd.DataFrame({'location':list(world_df['location']),\n                                                  'stringency_index':all_countries_stringency_index})\n\ntop_ten_stringency_index_df = all_countries_stringency_index_df.sort_values(by='stringency_index', ascending=False)[:10].reset_index(drop=True)\ntop_ten_stringency_index_df['infected_percentage'] =  [round(list(df[df['location']==i]['total_cases_per_million'])[-1]*100\/10**6, 2) for i in top_ten_stringency_index_df['location']]","a59ca170":"top_correlated_feature('stringency_index', 6, cmap='cool')\ntop_correlated_feature('handwashing_facilities', 6, cmap='Set3')","6801f9c8":"fig = make_subplots(rows=1, cols=2, \n                    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}]],\n                    column_widths=[0.5, 0.5], vertical_spacing=0, horizontal_spacing=0.02,\n                    subplot_titles=(\"Top 10 Countries<br>\", \"Infected Percentage<br>\"))\n\ncmap = cm.get_cmap('viridis', 10)   \nclrs = [matplotlib.colors.rgb2hex(cmap(i)) for i in range(cmap.N)]\n\nfig.add_trace(go.Bar(\n    x=top_ten_stringency_index_df['stringency_index'], \n    y=top_ten_stringency_index_df['location'], \n    marker=dict(color=clrs),text=top_ten_stringency_index_df['stringency_index'],\n    orientation='h'),row=1, col=1)\n\nfig.add_trace(go.Bar(\n    x=top_ten_stringency_index_df['infected_percentage'], \n    y=top_ten_stringency_index_df['location'], \n    marker=dict(color=clrs),text=top_ten_stringency_index_df['infected_percentage'],\n    orientation='h'),row=1, col=2)\n\n\nfig.update_yaxes(showgrid=False, ticksuffix=' ', row=1, col=1)\nfig.update_yaxes(showgrid=False, ticksuffix=' ',  row=1, col=2)\n\nfig.update_traces(texttemplate='%{text}', textposition='inside', textfont_size=14, row=1, col=1)\nfig.update_traces(texttemplate='%{text}', textposition='outside', textfont_size=14, row=1, col=2)\n\nfig.update_xaxes(visible=False, row=1, col=1)\nfig.update_xaxes(visible=False, row=1, col=2)\nfig.update_yaxes(visible=False, row=1, col=2)\n\nfig.update_layout(template=\"plotly_white\",showlegend=False,\n                  font=dict(family=\"Courier New, monospace\",size=15,color=\"RebeccaPurple\"),\n                  annotations=[dict(text='<b>INFECTED PERCENTAGE<\/b>', x=0.75, y=1.1, font_size=20, showarrow=False),\n                               dict(text='<b>TOP 10 COUNTRIES WITH HIGHEST<br>STRINGENCY INDEX<\/b>', x=0.22, y=1.1, font_size=20, showarrow=False)])\n\nfig.show()","65f5c68e":"<p><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1lVTLqt_GOStlPUqRIt3IExBrivStJpm4\" align=\"left\" hspace=\"10px\" vspace=\"0px\" width=\"300\" height=\"600\"><\/p>\n\n<ul style=\"list-style-type:none;\">\n   <br>\n   <br>\n   <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:25px;color: #2027b0\">In COVID-19 all over the <span style=\"color:#7044eb;\">World<\/span>,<\/li>\n  <li style=\"font-weight: bold;font-family:'Courier New, monospace';font-size:40px;color:  #84b04d\">293.9 Million <span style=\"color:#2027b0;font-size:25px;\">People have been infected<\/span><\/li>\n  <li style=\"font-weight: bold;font-family:'Courier New, monospace';font-size:40px;color:  #a7c423\">5.4 Million <span style=\"color:#2027b0;font-size:25px;\">People have lost their lives<\/span><\/li>\n  \n<\/ul>","75fe88ba":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; 30.7% of Global COVID-19 Cases are only from Asia and around 2% people of total population of Asia have been infected.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; Infected percentage(11%) wise Europe is in the highest position.\n<\/div>","be3ff790":"<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1iEsrWeokFoL8V-IoVC7HzXtkIpefkHXa\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"500px\" height=\"350px\" ><\/center>","75b1b48d":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">Click On Show <b>hidden code<\/b>, To See the <b>Data Pre-Processing<\/b> for the <b>Country Wise Analysis<\/b><\/li>\n<\/ul>","eca95faf":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">Click On Show <b>hidden code<\/b>, To See the <b>Data Pre-Processing<\/b> for the <b>Animation<\/b><\/li>\n<\/ul>","de708e2a":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">Click On Show <b>hidden code<\/b>, To See the <b>Data Pre-Processing<\/b> for the <b>Continent Wise Analysis<\/b><\/li>\n<\/ul>","39c9f2a3":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">Click On Show <b>hidden code<\/b>, To See the <b>Data Pre-Processing<\/b> for the <b>Animation<\/b><\/li>\n<\/ul>","a316c60e":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; In United Kingdom around 16% of total population got infected in COVID-19.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; 31.3% of Global Covid-9 cases are only from USA & India.\n<\/div>","1c3d5154":"<br>\n<p><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1KMCBY2RZpfX8sSwcHWSLnEaYoFSMKDkk\" align=\"left\" hspace=\"10px\" vspace=\"0px\" width=\"250\" height=\"500\"><\/p>\n\n<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:40px;color: #ffa16b\">OBJECTIVE<\/li>\n    <br>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:20px;color:#7044eb\">This Notebook reveals various aspects of COVID-19 which the whole World witnessed in last one and half years.<\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:20px;color:#7044eb\">We're goning to explore how the pandemic affected from Country level to Continent using several <span style=\"color:#ffa16b;\">Data Visualization<\/span> & <span style=\"color:#ffa16b;\">EDA<\/span> Techniques<\/li>\n<\/ul>","6970e6ef":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:40px;color: #ffa16b\">THANK<span style=\"color:#7044eb;\"> YOU<\/span> <span style=\"color:black;\">!!<\/span><\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:30px;color: #ffa16b\">If you<span style=\"color:#7044eb;\"> Enjoyed<\/span> reading this <span style=\"color:#7044eb;\">Notebook<\/span><\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:30px;color: #7044eb\">UPVOTE<span style=\"color:black\"> !!<\/span> <\/li>\n<\/ul>\n\n<div class=insight style=\"font-size:10px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n<\/div>","8e0d7b99":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:50px;color: #ffa16b\">WORLD <span style=\"color:#7044eb;\">WIDE<\/span> ANALYSIS<\/li>\n<\/ul>\n\n<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1xR1Kd573evdBH6yfyI-txEHZ-K4ol_ZA\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"550\" height=\"200\" ><\/center>","f2f26b37":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; Above are the Diabetes Prevalence & Cardiovasc death rate for top 10 COVID-19 Cases\/million countries.\n<\/div>","2565d9be":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:40px;color: #ffa16b\">ACKNOWLEDGMENT<\/li>\n    <br>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:20px;color: #2027b0\"><a href=\"https:\/\/www.kaggle.com\/tunguz\" style=\"font-size:27px\">Bojan Tunguz<\/a> for the amazing Dataset<\/li>\n    <br>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:20px;color: #2027b0\">.. and ofcourse the kaggle community and kagglers\u2764\ufe0f<\/li>\n<\/ul>","5f8c7347":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; Peru is the country with highest(6,048) no. of death cases per million.\n<\/div>","ac4685e3":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">You can <b>select<\/b> differnet Countries in the <b>Dropdown<\/b> portion of the below plot<\/li>\n<\/ul>","2e72e3c1":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">To See all the <b>imported libraries<\/b>, Click On Show <b>hidden code<\/b><\/li>\n<\/ul>","e65f089a":"<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=14uXIH-3ITx9ZNtiwdXQMVH-bs-GRfiEU\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"650px\" height=\"650px\" ><\/center>","9badcb3c":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:50px;color: #ffa16b\">CONTINENT <span style=\"color:#7044eb;\">WISE<\/span> ANALYSIS<\/li>\n<\/ul>\n\n<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1Zy2zCiUz_EC_Yree5uGtBzlbSOJ6A-bD\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"400\" height=\"300\" ><\/center>","1122b947":"<div class=none style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   Above are the top 10 countries with highest no. of COVID-19 cases per million.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; Montenegro has the highest(2,54,599) no. of COVID-19 cases per million.\n<\/div>","3b56e1b2":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:50px;color: #ffa16b\">VARIOUS <span style=\"color:#7044eb;\">FACTOR<\/span> ANALYSIS<\/li>\n<\/ul>\n\n<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1EpPVfPCIcCqW4guj_ywxKON6Zhpr2To3\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"400\" height=\"200\" ><\/center>","ce05d794":"<p><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1dA4TrpVoP4KTIWODmMr8xA09Zr-XHgRQ\" align=\"left\" hspace=\"10px\" vspace=\"0px\" width=\"300\" height=\"650\"><\/p>\n\n<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:40px;color: #ffa16b\">MY <span style=\"color:#7044eb;\">OTHER<\/span> NOTEBOOKS<\/li>\n    <br>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:25px;color: #2027b0\">Have a <span style=\"color:#7044eb;\">Look<\/span> to my other Notebooks<\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:23px;color: #2027b0\"><a href=\"https:\/\/www.kaggle.com\/satyabrataroy\/60-insights-extraction-us-accident-analysis\">60+ Insights Extraction - US Accident Analysis<\/a><\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:23px;color: #2027b0\"><a href=\"https:\/\/www.kaggle.com\/satyabrataroy\/50-insights-kaggle-survey-analysis\">50+ Insights - Kaggle Survey Analysis<\/a><\/li>\n    <br>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:25px;color: #2027b0\">For <span style=\"color:#7044eb;\">Beginners,<\/span><\/li>\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:23px;color: #2027b0\"><a href=\"https:\/\/www.kaggle.com\/satyabrataroy\/40-insights-extraction-eda-titanic-dataset\">40+ Insights Extraction-EDA-Titanic Dataset<\/a><\/li>\n<\/ul>","c17c304a":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; From Continent wise analysis we can conclude that Oceania has the lowest(0.01%) death percentage and South America has the highest(0.27%) death percentage.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; In Africa only 8% prople of total population are fully vaccinated.\n<\/div>","93c43283":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:50px;color: #ffa16b\">COUNTRY <span style=\"color:#7044eb;\">WISE<\/span> ANALYSIS<\/li>\n<\/ul>\n\n<center><img alt=\"Insight logo\" src=\"https:\/\/drive.google.com\/uc?export=view&id=1I6PALPLvlsueVSj0IkMmHyjiz2jPt4m2\" align=\"center\" hspace=\"10px\" vspace=\"10px\" width=\"400\" height=\"300\" ><\/center>","2c6b66ba":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; From the above map, we can easily infer that maximum no. of COVID-19 cases found in United States, India, Brazil.\n<\/div>","ca86ea60":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:'Courier New, monospace';font-weight: bold;font-size:70px;color: #ffa16b\">COVID-19 <span style=\"color:#7044eb;\">CASE<\/span> STUDY<\/li>\n<\/ul>\n\n<div class=insight style=\"font-size:10px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n<\/div>","12e04793":"<ul style=\"list-style-type:none; text-align: center;\">\n    <li style=\"font-family:Courier New, monospace;font-size:20px;color: #6468e8\">You can <b>select<\/b> differnet Cases in the <b>Dropdown<\/b> portion of the below plot<\/li>\n<\/ul>","ad4396d4":"<div class=none style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\nAmong the top 10 countries with highest no. of total Covid cases,\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; Spain has the highest(81%) full vaccination percentage.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; In terms of covid death percentage Brazil comes in highest(0.29%) position.\n<\/div>","6f5ebb9e":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; We can observe a wave nature in the daily new COVID-19 Cases in whole world from Januray 2020 to now.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; From the 2nd Plot we can observe the overall decrement in daily no. of covid death cases.\n<\/div>","30b80609":"<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; In United States around 798K People lost their lives in COVID-19.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; With 616K Covid death cases Brazil records 2nd highest position.\n<\/div>\n<br>\n<div class=insight style=\"font-size:20px; font-family:Courier New, monospace; font-weight: bold;line-height: 1.7em;color:#0b086e\">\n   \u2705 &nbsp; India comes in the 3rd position with around 475K total COVID-19 deaths.\n<\/div>","4d6e999b":"<center>\n    <img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/c5\/Covid-19-curves-graphic-social-v3.gif\" height=\"600\" width=\"700\" \/>\n<\/center>"}}