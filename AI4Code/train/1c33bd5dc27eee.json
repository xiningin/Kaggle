{"cell_type":{"bed7aa49":"code","cc15997c":"code","0f439907":"code","36965036":"code","7611144b":"code","c4077b73":"markdown","bd020471":"markdown","5d8625a3":"markdown","f29edd72":"markdown","1330a3d9":"markdown"},"source":{"bed7aa49":"import os\nimport cv2\nimport numpy as np\nfrom time import time\nfrom tensorflow.keras import utils\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.applications import VGG16\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline","cc15997c":"train_dir = '..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train'\ntest_dir = '..\/input\/asl-alphabet\/asl_alphabet_test\/asl_alphabet_test'\nclasses = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', \n           'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', \n           'W', 'X', 'Y', 'Z', 'nothing', 'space', 'del']\nplt.figure(figsize=(11, 11))\nfor i in range (0,29):\n    plt.subplot(7,7,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    path = train_dir + \"\/{0}\/{0}1.jpg\".format(classes[i])\n    img = plt.imread(path)\n    plt.imshow(img)\n    plt.xlabel(classes[i])","0f439907":"def load_data(train_dir):\n    images = []\n    labels = []\n    size = 32,32\n    index = -1\n    for folder in os.listdir(train_dir):\n        index +=1\n        for image in os.listdir(train_dir + \"\/\" + folder):\n            temp_img = cv2.imread(train_dir + '\/' + folder + '\/' + image)\n            temp_img = cv2.resize(temp_img, size)\n            images.append(temp_img)\n            labels.append(index)\n    \n    images = np.array(images)\n    images = images.astype('float32')\/255.0\n    labels = utils.to_categorical(labels)\n    x_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.1)\n    \n    print('Loaded', len(x_train),'images for training,','Train data shape =', x_train.shape)\n    print('Loaded', len(x_test),'images for testing','Test data shape =', x_test.shape)\n    \n    return x_train, x_test, y_train, y_test\n\nstart = time()\nx_train, x_test, y_train, y_test = load_data(train_dir)\nprint('Loading:', time() - start)","36965036":"classes = 29\nbatch = 128\nepochs = 3\nlearning_rate = 0.0001\n\ndef results(model):\n  adam = Adam(lr=learning_rate)\n\n  model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])\n\n  start = time()\n  history = model.fit(x_train, y_train, batch_size=batch, epochs=epochs, validation_split=0.1, shuffle = True, verbose=1)\n  train_time = time() - start\n\n  model.summary()\n\n  plt.figure(figsize=(12, 12))\n  plt.subplot(3, 2, 1)\n  plt.plot(history.history['accuracy'], label = 'train_accuracy')\n  plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.subplot(3, 2, 2)\n  plt.plot(history.history['loss'], label = 'train_loss')\n  plt.plot(history.history['val_loss'], label = 'val_loss')\n  plt.xlabel('epoch')\n  plt.ylabel('accuracy')\n  plt.legend()\n  plt.show()\n\n  start = time()\n  test_loss, test_acc = model.evaluate(x_test, y_test)\n  test_time = time() - start\n  print('\\nTrain time: ', train_time)\n  print('Test accuracy:', test_acc)\n  print('Test loss:', test_loss)\n  print('Test time: ', test_time)","7611144b":"model = Sequential()\n\nmodel.add(VGG16(weights='imagenet', include_top=False, input_shape=(32,32,3)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='sigmoid'))\n\nmodel.add(Dense(29, activation='softmax'))\n\nresults(model)","c4077b73":"## Loading","bd020471":"# ASL Alphabet Classification with VGG","5d8625a3":"## Network","f29edd72":"## Configuration","1330a3d9":"## The data"}}