{"cell_type":{"3176d3f3":"code","a9b04067":"code","a67f8d23":"code","2a48d01b":"code","15e2721d":"code","7b84ed70":"code","7f2457d9":"code","cc54eab5":"code","602725be":"code","fd4b194f":"code","2883d8f0":"markdown","9a3f336e":"markdown","d2c943e4":"markdown","f3e9e994":"markdown","39563462":"markdown"},"source":{"3176d3f3":"import IPython.display as display\n\nimport glob\nfrom collections import Counter\n\nimport math\n\nimport librosa\nimport librosa.display\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport random\nimport torch\nimport torchaudio\nimport torch.optim as optim\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nfrom pathlib import Path\nfrom PIL import Image\n\nimport soundfile as sf\nfrom torch.utils.data import Dataset\nfrom torchvision import models, transforms\n\nfrom pathlib import Path\nimport shutil\n\nfrom joblib import Parallel, delayed\nimport multiprocessing\n","a9b04067":"path_main = '\/kaggle\/input\/environmental-sound-classification-50\/'\npath_audio = path_main+'audio\/audio\/44100\/'\nos.listdir(path_main)","a67f8d23":"path=Path('\/kaggle\/working')\nos.mkdir(path\/'train')\nos.mkdir(path\/'valid')\nos.mkdir(path\/'test')\n\nPATH_ESC50_TRAIN = \".\/train\/\"\nPATH_ESC50_VALID = \".\/valid\/\"\nPATH_ESC50_TEST = \".\/test\/\"","2a48d01b":"def precompute_spectrograms(path,kind='train', dpi=50):\n    if kind=='train':\n        files = Path(path).glob('[1-3]-*.wav')\n    if kind=='valid':\n        files = Path(path).glob('4-*.wav')\n    if kind=='test':\n        files = Path(path).glob('5-*.wav')\n        \n    def save_fig(filename):\n        audio_tensor, sr = librosa.load(filename, sr=None)\n        spectrogram = librosa.feature.melspectrogram(audio_tensor, sr=sr)\n        log_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)\n        librosa.display.specshow(log_spectrogram, sr=sr, x_axis='time', y_axis='mel')\n        if kind=='train':\n            plt.gcf().savefig(PATH_ESC50_TRAIN +\"{}_{}.png\".format(dpi,filename.name), dpi=dpi)\n        if kind=='valid':\n            plt.gcf().savefig(PATH_ESC50_VALID +\"{}_{}.png\".format(dpi,filename.name), dpi=dpi)\n        if kind==\"test\":\n            plt.gcf().savefig(PATH_ESC50_TEST +\"{}_{}.png\".format(dpi,filename.name), dpi=dpi)\n    Parallel(n_jobs=2)(delayed(save_fig)(filename)for filename in files)\n\n","15e2721d":"precompute_spectrograms(path_audio ,kind=\"train\")\n","7b84ed70":"precompute_spectrograms(path_audio ,kind=\"valid\")","7f2457d9":"precompute_spectrograms(path_audio ,kind=\"test\")","cc54eab5":"len(os.listdir('.\/train'))","602725be":"len(os.listdir('.\/valid'))","fd4b194f":"len(os.listdir('.\/test'))","2883d8f0":"## Check length of files in directories","9a3f336e":"## Make train\/valid\/test directory to save melspecs","d2c943e4":"# I tried creating Melspectogram faster by dividing task of saving the melspecs in 2 cores here is the step by step approach below:","f3e9e994":"## Creating and saving Melspecs","39563462":"<div class=\"alert alert-block alert-info\"> \ud83d\udccc here I used two cores by assigning n_jobs=2 you can use n_jobs=-1, in that case your system will use all the available cores and process will be more faster if you have more than two cores.<\/div>"}}