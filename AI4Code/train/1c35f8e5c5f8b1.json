{"cell_type":{"574b0926":"code","2e32cade":"code","76d0e182":"code","24a20ca1":"code","8d7f687b":"code","cee93b1a":"code","d622f20e":"code","e1ffb149":"code","b7cecedb":"code","c1344edb":"code","fb4bd1a2":"code","38a4451a":"code","341f0b67":"code","a7d2b95f":"code","d4ba0148":"code","2b1a85cb":"code","8ab42ab1":"code","772e7ae6":"code","65b5a3b3":"code","f8190934":"code","3ab6bfc2":"code","8f5c513b":"code","a3817f04":"code","58e48a66":"code","12a95c67":"code","7a339933":"code","ff1babb7":"code","524e82b6":"code","89a62e66":"code","83a8249b":"code","b7795ac1":"code","8a180329":"code","3f3d48e8":"code","459e7469":"code","92db7767":"code","2a3bf000":"code","c3a4b15b":"code","cbdca233":"code","00baeeb9":"code","733880cf":"code","5813a62b":"code","9ee14283":"code","631e950a":"code","ead06c7b":"code","3ce671bd":"code","825f1b46":"code","34d51b10":"code","94c2ebc0":"code","7db4b736":"code","fe983000":"code","b9228038":"code","c2ac4d42":"code","12e24b7f":"code","d0017999":"code","f00c7a7a":"markdown","69c462d0":"markdown","5f958c8b":"markdown","eafd9508":"markdown","dfbced84":"markdown","ed4bf72d":"markdown","4b59f07c":"markdown","7e5836c5":"markdown","f03ec050":"markdown","e9ac7f8d":"markdown","264a66de":"markdown","9b72ef11":"markdown","775785da":"markdown","0b25808b":"markdown","c095ad30":"markdown","61dec1d7":"markdown","bd6b34d3":"markdown","0bac6b18":"markdown","127f0b1e":"markdown","8e99b427":"markdown","e144f746":"markdown","166c797c":"markdown","2f04eb1f":"markdown","042478ee":"markdown","2f461d93":"markdown","011da74a":"markdown","71d43d91":"markdown","f397dad5":"markdown","3943b2ff":"markdown","3de2c409":"markdown","ca0aad5f":"markdown","69e95ec5":"markdown","2bca52a0":"markdown","ba848358":"markdown","d03ba629":"markdown","3dab23ee":"markdown"},"source":{"574b0926":"import pandas as pd","2e32cade":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","76d0e182":"data.head()","24a20ca1":"data.info()","8d7f687b":"data.dropna(inplace=True)","cee93b1a":"import seaborn as sns\nimport matplotlib.pyplot as plt","d622f20e":"ratingsdf = data['rating'].value_counts()","e1ffb149":"ratingsdf.columns=['Rating','Count']\ndf = pd.DataFrame(ratingsdf)\ndf['Count'] = df['rating']\ndf['Rating'] = df.index\ndf.reset_index(inplace=True)\ndf.drop(['index','rating'],axis=1,inplace=True)\ndf","b7cecedb":"plt.figure(figsize=(12,7))\nsns.barplot(data=df,x='Rating',y='Count')","c1344edb":"plt.figure(figsize=(12,7))\nsns.countplot(data=data,x='rating')","fb4bd1a2":"plt.figure(figsize=(12,7))\nsns.countplot(data=data[data['type']=='Movie'],x='rating')","38a4451a":"plt.figure(figsize=(12,7))\nsns.countplot(data=data[data['type']=='TV Show'],x='rating')","341f0b67":"data[data['type']=='TV Show']['rating'].unique()","a7d2b95f":"def Rate(cat,arg):\n    plt.figure(figsize=(12,7))\n    sns.countplot(data=data[data[cat]==arg],x='rating')","d4ba0148":"Rate('country','India')","2b1a85cb":"Rate('duration','1 Season')","8ab42ab1":"listeddf = data['listed_in'].value_counts()\nlisteddf.columns=['listed_in','Count']\ndf = pd.DataFrame(listeddf)\ndf['Count'] = df['listed_in']\ndf['Listed_in'] = df.index\ndf.reset_index(inplace=True)\ndf.drop(['index','listed_in'],axis=1,inplace=True)\ndf","772e7ae6":"plt.figure(figsize=(15,100))\nsns.barplot(data=df,y='Listed_in',x='Count')","65b5a3b3":"plt.figure(figsize=(20,100))\nsns.countplot(data=data,y='listed_in')","f8190934":"lists = []\nlisted = data['listed_in'].str.split(',')\nfor li in listed:\n    for l in li:\n        lists.append(l)\ndf= pd.DataFrame(data=lists,columns=['Genre'])\ndf","3ab6bfc2":"plt.figure(figsize=(10,35))\nsns.countplot(data=df,y='Genre')","8f5c513b":"def Genre(cat='all',arg='all'):\n    if cat == 'all' or arg=='all':\n        plt.figure(figsize=(10,35))\n        sns.countplot(data=df,y='Genre')\n    else:\n        lists = []\n        listed = data[data[cat]==arg]['listed_in'].str.split(',')\n        for li in listed:\n            for l in li:\n                lists.append(l)\n        df= pd.DataFrame(data=lists,columns=['Genre'])\n        df\n        plt.figure(figsize=(35,20))\n        sns.countplot(data=df,y='Genre')\nGenre('duration','1 Season')","a3817f04":"Genre('country','India')","58e48a66":"df = data['release_year'].value_counts()\ndf = pd.DataFrame(df)\ndf['Release_year'] = df.index\ndf['Count'] = df['release_year']\ndf.reset_index(inplace=True)\ndf.drop(['index','release_year'],inplace=True,axis=1)\ndf","12a95c67":"plt.figure(figsize=(12,15))\nsns.countplot(data=data,y='release_year')","7a339933":"def Year(cat='all',arg='all'):\n    if cat =='all' or arg=='all':\n        plt.figure(figsize=(12,15))\n        sns.countplot(data=data,y='release_year')\n    else:\n        df = data[data[cat]==arg]['release_year'].value_counts()\n        df = pd.DataFrame(df)\n        df['Release_year'] = df.index\n        df['Count'] = df['release_year']\n        df.reset_index(inplace=True)\n        df.drop(['index','release_year'],inplace=True,axis=1)\n        df\n        plt.figure(figsize=(30,15))\n        sns.barplot(data=df,x='Release_year',y='Count')","ff1babb7":"Year('country','India')","524e82b6":"country = data['country']","89a62e66":"count = country.str.split(',')","83a8249b":"country = []\nfor countie in count:\n    for c in countie:\n        country.append(c)","b7795ac1":"df = pd.DataFrame(data=country,columns=['Country'])","8a180329":"df = df['Country'].value_counts()\ndf = pd.DataFrame(df)\ndf['Count'] = df['Country']\ndf['Country'] = df.index\ndf.reset_index(inplace=True)\ndf.drop('index',axis=1,inplace=True)\ndf","3f3d48e8":"df[df['Country']=='India']","459e7469":"data['country'].values","92db7767":"plt.figure(figsize=(15,25))\n# plt.xlim(2000)\nsns.barplot(data=df[df['Count']>50],x='Count',y='Country')","2a3bf000":"plt.figure(figsize=(15,25))\n# plt.xlim(2000)\nsns.barplot(data=df[df['Count']<50],x='Count',y='Country')","c3a4b15b":"sns.countplot(data=data,x='type')","cbdca233":"plt.figure(figsize=(12,7))\nsns.countplot(data=data,x='rating',hue='type')","00baeeb9":"def Type(cat='all',arg='all'):\n    if cat =='all' or arg =='all':\n        sns.countplot(data=data,x='type')\n    else:\n        sns.countplot(data=data[data[cat]==arg],x='type')\nType('country','India')","733880cf":"plt.figure(figsize=(10,25))\nsns.countplot(data=data,y='release_year',hue='type')","5813a62b":"\nsns.countplot(data=data[data['country']=='India'],x='country',hue='type')","9ee14283":"df = data['director'].value_counts()\ndf.columns=['Director','count']\ndf = pd.DataFrame(df)\ndf['Count'] = df['director']\ndf['Director']=df.index\ndf.reset_index(inplace=True)\ndf.drop(['index','director'],axis=1,inplace=True)\ndf","631e950a":"plt.figure(figsize=(20,7))\nsns.barplot(data=df[:10],x='Director',y='Count')","ead06c7b":"data['duration'].nunique()","3ce671bd":"data.duration","825f1b46":"plt.figure(figsize=(15,35))\nsns.countplot(data=data,y='duration')","34d51b10":"tv=data[data['type']=='TV Show']","94c2ebc0":"plt.figure(figsize=(15,7))\nsns.countplot(data=tv,x='duration')","7db4b736":"data.info()","fe983000":"data['cast'].nunique()","b9228038":"casts = data['cast'].str.split(',')","c2ac4d42":"actors = []\nfor cast in casts:\n    for actor in cast:\n        actors.append(actor)","12e24b7f":"df = pd.DataFrame(actors,columns=['Actor'])\ndf = df['Actor'].value_counts()\ndf = pd.DataFrame(df)\ndf['Count'] = df['Actor']\ndf['Actor'] = df.index\ndf.reset_index(inplace=True)\ndf.drop('index',axis=1,inplace=True)\ndf","d0017999":"plt.figure(figsize=(20,7))\nsns.barplot(data=df[:10],x='Actor',y='Count')","f00c7a7a":"Now, let's see how many movies belongs to each ratings.","69c462d0":"By nature we have multiple category of same movie\/series. What we can do is seperate every genre seperately and see how many movie\/tv shows belong to which category.","5f958c8b":"Above shown are 14 rating criteria of Movies\/Series. What we are doing here is counting there occurence and ploting them to get insight of how many movies\/series belongs to particulary rating. Below is the overall representation of ratings.","eafd9508":"Common function for same to do analysis based on arguments we passed.","dfbced84":"United States, India and United Kingdom are countries with highest movies\/Tv shows released on. Above chart was for countries having Movies\/TV shows more than 50 count. And below graph represents Movies\/TV shows with less than 50 count of items.","ed4bf72d":"Lets check how many movies and TV shows are there in total.","4b59f07c":"Let's do this for Series","7e5836c5":"So our dataset contains following features:\n* Show_id : Show Id\n* type : Movies\/Series\n* title : Title \n* director : Director of it\n* cast : Casts of movie\/series\n* country : In which country it released\n* date_added : On which date movie added on Netflix\n* release_year : Year in which it released\n* rating : Rating of movies\/ series\n* duration : Runtime of movie and series\n* listed_in : Genre\n* description : Abstract idea of movie\/series\n","f03ec050":"First thing first,so let's begin with importing pandas.","e9ac7f8d":"## End Note:\n\nThis was some basic over view of EDA. We got some insights which are amazing. Please do share your valuable comments. I know there is little less explanation of some stuff. And, please do tell in comments if you want some details in this and part 2 of EDA in the same dataset. If you enjoy reading this please upvote it. Thank you :)","264a66de":"Let's begin with EDA process with rating.","9b72ef11":"Above, this table shows Listed in and its respective count. Below is its visualization.","775785da":"We can also do these plotting with single line of code. Shown below","0b25808b":"Right now we dont need null values it has void importance for us. So,Dropping Null values.","c095ad30":"Netflix have more Movies than TV shows. Lets check rating and type distribution.","61dec1d7":"Exploratory Data Analysis on this netflix data to get some meaningfull insights. There are tons of factor we can conider but this blog contains some of basic EDA.","bd6b34d3":"As we made a common funtion for ratings we can do the same for listed_in. With same idea and parameter.","0bac6b18":"## EDA","127f0b1e":"Importing Seaborn and Matplotlib for visualising data.","8e99b427":"This table represent Release_year with its number of releases.","e144f746":"So TV Show only have following ratings\n* TV-MA\n* TV-14\n* TV-G\n* TV-PG\n* TV-Y7\n* TV-Y\n* R","166c797c":"Netflix is one of the biggest video streaming platform worldwide. In recent time the lingo *Netflix and chill* got really famous so I thought let's do some Exploratry Data Analysis(EDA) on Netlfix data and find some insights if possible. So I found some of very intresting insights let's check it out.","2f04eb1f":"## Netflix and Chill","042478ee":"2017 has the highest number of releases followd by 2016 and 2018","2f461d93":"Now let's move forward with release_year. This feature basically tells us about when does this content was released in. We will follow same process as we did above.","011da74a":"Let's look into country wise analysis of ratings irrespective of its type.","71d43d91":"## Visualization","f397dad5":"In overall, most of the content is of TV-MA rating followed by TV-14.","3943b2ff":"Let's see which director has more movies on netflix","3de2c409":"uhm, Seems like Bollywood actors have more movies on netflix than other film industry.","ca0aad5f":"Let's move forward to country wise EDA","69e95ec5":"So, here what we are doing is, first we are seeing its distribution with grouped genre as given in dataset.","2bca52a0":"By doing data['ratings'].value_counts(), we are getting ratings and thier respective count in our entire dataset. This give us perfect data for ploting graph of their ratings.","ba848358":"Let's make a common function where user can pass argument like category as in feature by which they want to extract insights and argument as value they are searching for. For example :\n    *Rate('country','India')* when Rate function will be called it will treat 'country' as feature and 'India' as specific value of whose data is required.","d03ba629":"Let's move forward with other features. Now will try to take some insights from listed_in feature.","3dab23ee":"Let's make same common function for it."}}