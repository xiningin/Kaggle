{"cell_type":{"9a2cf0f2":"code","61c41fa0":"code","5bac4b24":"code","cd1d1654":"code","4554e55b":"code","0ddde69d":"code","4932780d":"code","2799948f":"code","a8b29e81":"code","b1ab6603":"code","21fca6c1":"code","7f46ca7c":"code","2bb9deb2":"code","54426623":"code","77fee4a1":"code","7674c092":"code","554a2a54":"code","4eb2812a":"code","f3a59639":"code","805148b9":"code","ea8e803d":"code","bd89f48f":"markdown","e89ca7af":"markdown","e82d83e0":"markdown","a8781adb":"markdown","7038cea4":"markdown","fb9e9d33":"markdown","2709a655":"markdown","3989f797":"markdown","ed89599d":"markdown","9f661aa4":"markdown","78cb9b73":"markdown","5fddb219":"markdown","8eae6139":"markdown","c043aff6":"markdown","678d4a3b":"markdown","c42f1cd5":"markdown","755889b7":"markdown","c4d5fc81":"markdown","e49ace8a":"markdown","b1331ed5":"markdown","bd9d90f6":"markdown","71ae0455":"markdown","4b412591":"markdown","51b0d6cb":"markdown","075a74fb":"markdown","e6d2cf9a":"markdown","69e0674f":"markdown","438157fd":"markdown","ea208cfb":"markdown","ab0a9162":"markdown","c25298e9":"markdown","307ae8bd":"markdown","7294cc82":"markdown","822a2394":"markdown","5bc95621":"markdown","8b84127b":"markdown","042abc8a":"markdown","b49d1eed":"markdown","0d14e1cf":"markdown"},"source":{"9a2cf0f2":"# import necessary modules\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # data visualisation\nimport matplotlib.pyplot as plt # plot\nimport os","61c41fa0":"# read csv file and EDA\nfifa19_df = pd.read_csv('..\/input\/data.csv')\n#fifa19_df = pd.read_csv('fifa19.csv')\nfifa19_df.head(5)","5bac4b24":"# convert values and wages columns to floats\nfifa19_df['Value_float'] = fifa19_df['Value'].str[1:].str.replace('M','e6').str.replace('K','e3').astype(float)\nfifa19_df['Wage_float'] = fifa19_df['Wage'].str[1:].str.replace('M','e6').str.replace('K','e3').astype(float)\nfifa19_df['Release_float'] = fifa19_df['Release Clause'].str[1:].str.replace('M','e6').str.replace('K','e3').astype(float)\nfifa19_df['Potential_rel'] = fifa19_df['Potential']-fifa19_df['Overall']","cd1d1654":"# order countries according to average values of 22 best players\ncountry_value = fifa19_df.pivot_table(index='Nationality',columns='Name',values='Overall')\ncountry_value['Mean_22pl'] = country_value.apply(lambda x: x.sort_values(ascending=False)[:22].mean(), axis=1)\ncountry_value['std_22pl'] = country_value.apply(lambda x: x.sort_values(ascending=False)[:22].std(), axis=1)\ncountry_value['Nplayers'] = country_value.count(axis=1)\ncountry_value = country_value.sort_values('Mean_22pl',ascending=False)#.reset_index(level=0, inplace=True)\ncountry_value.reset_index(level=0, inplace=True)\ncountry_value = country_value.drop(country_value[country_value['Nplayers'] < 23].index, axis=0)\n#\n# order teams according to average values of 22 best players\nteam_value = fifa19_df.pivot_table(index='Club',columns='Name',values='Overall')\nteam_value['Mean_whole'] = team_value.mean(axis=1)\nteam_value['Mean_22pl'] = team_value.apply(lambda x: x.sort_values(ascending=False)[:22].mean(), axis=1)\nteam_value['std_22pl'] = team_value.apply(lambda x: x.sort_values(ascending=False)[:22].std(), axis=1)\nteam_value['std_whole'] = team_value.std(axis=1)\nteam_value['Nplayers'] = team_value.count(axis=1)\nteam_value = team_value.sort_values('Mean_22pl',ascending=False)\nteam_value.reset_index(level=0, inplace=True)","4554e55b":"plt.figure(0,figsize=[15,5])\nsns.violinplot(x='Club', y='Overall', data=fifa19_df, size=4,jitter=True, orient='v',order=team_value.loc[:30,'Club'])\nsns.stripplot(x='Club', y='Overall', data=fifa19_df, size=4,jitter=True, orient='v',order=team_value.loc[:30,'Club'],color='k')\nplt.xticks(rotation = 90);","0ddde69d":"plt.figure(0, figsize=[18,4])\nplt.xscale('linear')\nplt.yscale('linear')\nplt.ylabel('Country property overall')\nplt.xlim(-1,len(country_value))\nplt.grid()\n#plt.scatter(range(len(country_value)), country_value['Mean_22pl'], marker='.') #, label=pos)\nplt.errorbar(range(len(country_value)), country_value['Mean_22pl'], yerr=country_value['std_22pl'], fmt='+')\nplt.xticks(range(len(country_value)), country_value['Nationality'], rotation=90);\n","4932780d":"logvalue = np.log10(country_value['Nplayers'])\nmeancountry = country_value['Mean_22pl']\nslope, inter = np.polyfit(logvalue, meancountry, 1)\npearson = np.corrcoef(logvalue, meancountry)[0, 1]\nplt.figure(figsize=[5,5]);\nplt.xscale('linear')\nplt.yscale('linear')\nplt.xlabel('log[$N_{players}$]')\nplt.ylabel('Country property overall')\nplt.scatter(logvalue, meancountry, marker='.', \\\n            label=('Pearson coef: %.2f \\nSlope, intercept: %.3f, %.3f)' % (pearson, slope, inter)))\nplt.plot([np.min(logvalue), np.max(logvalue)],\n         [np.min(logvalue)*slope+inter, np.max(logvalue)*slope+inter],ls='-',color='k')\nplt.legend();\n","2799948f":"# list of clubs of interest to compare \nlist_clubs = (fifa19_df.Club.unique().tolist())\nlist_countries = ['France', 'England', 'Spain', 'Germany', 'Italy']\n# Ligue 1 clubs and points\nclubs_fr = ['Amiens SC', 'Angers SCO', 'FC Girondins de Bordeaux', 'Stade Malherbe Caen', 'Dijon FCO', 'En Avant de Guingamp', 'LOSC Lille', 'Olympique Lyonnais', 'Olympique de Marseille', 'AS Monaco', 'Montpellier HSC', 'FC Nantes', 'OGC Nice', 'N\u00eemes Olympique', 'Paris Saint-Germain', 'Stade de Reims', 'Stade Rennais FC', 'AS Saint-\u00c9tienne', 'RC Strasbourg Alsace', 'Toulouse Football Club']\npoints_fr = np.array([28,35,33,20,21,19,57,50,47,27,42,31,40,36,74,43,40,43,38,31])\/29. # points divided by number of matches\ndf_clubs = pd.DataFrame({'Club' : clubs_fr, 'Points' : points_fr, 'Country' : 'France'})\n# Premier league clubs and points\nclubs_en = ['Arsenal', 'Bournemouth', 'Brighton & Hove Albion', 'Burnley', 'Cardiff City', 'Chelsea', 'Crystal Palace', 'Everton', 'Fulham', 'Huddersfield Town', 'Leicester City', 'Liverpool', 'Manchester City', 'Manchester United', 'Newcastle United', 'Southampton', 'Tottenham Hotspur', 'Watford', 'West Ham United', 'Wolverhampton Wanderers']\npoints_en = np.array([60, 38, 33, 30, 28, 57, 33, 40, 17, 14, 41, 76, 74, 58, 35, 30, 61, 43, 42, 44])\/31.\ndf_en = pd.DataFrame({'Club' : clubs_en, 'Points' : points_en, 'Country': 'England'})\ndf_clubs = df_clubs.append(df_en, ignore_index=True)\n# Liga clubs and points\nclubs_sp = ['Deportivo Alav\u00e9s', 'FC Barcelona', 'Real Betis', 'Athletic Club de Bilbao', 'RC Celta', 'SD Eibar', 'RCD Espanyol', 'Getafe CF', 'Girona FC', 'SD Huesca', 'CD Legan\u00e9s', 'Levante UD', 'Atl\u00e9tico Madrid', 'Real Madrid', 'Sevilla FC', 'Real Sociedad', 'Valencia CF', 'Real Valladolid CF', 'Rayo Vallecano', 'Villarreal CF']\npoints_sp = np.array([44, 66, 39, 37, 25, 35, 34, 46, 34, 22, 33, 31, 56, 54, 43, 36, 40, 29, 23, 29])\/28.\ndf_sp = pd.DataFrame({'Club' : clubs_sp, 'Points' : points_sp, 'Country': 'Spain'})\ndf_clubs = df_clubs.append(df_sp, ignore_index=True)\n# Serie A clubs and points\nclubs_it = ['Atalanta', 'Bologna', 'Cagliari', 'Empoli', 'Fiorentina', 'Frosinone', 'Genoa', 'Inter', 'Juventus', 'Lazio', 'Milan', 'Napoli', 'Parma', 'Roma', 'Sampdoria', 'Sassuolo', 'SPAL', 'Torino', 'Udinese', 'Chievo Verona']\npoints_it = np.array([45, 24, 30, 25, 37, 17, 33, 53, 75, 45, 51, 60, 33, 47, 42, 32, 26, 44, 25, 11])\/28.\ndf_it = pd.DataFrame({'Club' : clubs_it, 'Points' : points_it, 'Country': 'Italy'})\ndf_clubs = df_clubs.append(df_it, ignore_index=True)\n# Bundesliga clubs and points\nclubs_ge = ['FC Bayern M\u00fcnchen', 'Borussia Dortmund', 'RB Leipzig', 'FC Schalke 04','Bayer 04 Leverkusen', '1. FC N\u00fcrnberg', 'TSG 1899 Hoffenheim', 'Borussia M\u00f6nchengladbach', 'Hertha BSC', 'SV Werder Bremen', 'VfL Wolfsburg', 'VfB Stuttgart', 'Eintracht Frankfurt', '1. FSV Mainz 05', 'FC Augsburg', 'Fortuna D\u00fcsseldorf', 'Hannover 96', 'SC Freiburg']\npoints_ge = np.array([60, 60, 49, 23, 42, 13, 38, 47, 35, 39, 42, 20, 46, 30, 25, 31, 30, 31])\/26.\ndf_ge = pd.DataFrame({'Club' : clubs_ge, 'Points' : points_ge, 'Country' : 'Germany'})\ndf_clubs = df_clubs.append(df_ge, ignore_index=True)","a8b29e81":"# box plots for Ligue 1 teams\nclubs_all = [clubs_fr, clubs_en, clubs_sp, clubs_ge, clubs_it]\nplt.figure(0,figsize=[18,10])\nplt.subplots_adjust(wspace=0.3, hspace=0.98)\nfor ic, country in enumerate(list_countries):\n    plt.subplot(2,3,ic+1)\n    league_df = fifa19_df[fifa19_df['Club'].isin(clubs_all[ic])]\n    sns.boxplot(x='Club', y='Overall', data=league_df, orient='v',order=clubs_all[ic]) #team_value.loc[:10,'Club'])\n    sns.stripplot(x='Club', y='Overall', data=league_df, size=4,jitter=True, orient='v',order=clubs_all[ic]) #team_value.loc[:10,'Club'],color='k')\n    plt.title(country)\n    plt.xticks(rotation = 90);\n","b1ab6603":"# merge points and values dataframes\nteams_df = team_value[team_value['Club'].isin(df_clubs['Club'].tolist())][['Club','Nplayers','Mean_22pl','std_22pl']]\nteams_df = pd.merge(teams_df, df_clubs, on='Club')\n#\n# plot mean team values for each league\ncolorsc = ['salmon', 'royalblue', 'seagreen', 'gold', 'darkorange', 'violet', 'darkturquoise', 'darkcyan', 'turquoise']\nplt.figure(0,figsize=[5,5])\nplt.xlabel('Ranking')\nplt.ylabel('Property overall mean')\nfor ic, country in enumerate(list_countries):\n    plt.plot(np.arange(1,len(teams_df[teams_df['Country'] == country])+1,1), \n             teams_df[teams_df['Country'] == country].Mean_22pl,\n             color=colorsc[ic], marker='+', label=country)\n    plt.plot([1,20], \n             [teams_df[teams_df['Country'] == country].Mean_22pl.mean(), teams_df[teams_df['Country'] == country].Mean_22pl.mean()], \n             ls='--', color=colorsc[ic])\n    #plt.errorbar([1,20], \n    #             [teams_df[teams_df['Country'] == country].Mean_22pl.mean(), teams_df[teams_df['Country'] == country].Mean_22pl.mean()], \n    #             yerr=[teams_df[teams_df['Country'] == country].Mean_22pl.std(), teams_df[teams_df['Country'] == country].Mean_22pl.std()], \n    #             fmt='.', color=colorsc[ic])\n\nplt.legend();","21fca6c1":"plt.figure(0,figsize=[15,4])\nfor ic, country in enumerate(list_countries):\n    points = teams_df[teams_df['Country'] == country].Points\n    value_norm = teams_df[teams_df['Country'] == country].Mean_22pl\/teams_df[teams_df['Country'] == country].Mean_22pl.mean()\n    slope, inter = np.polyfit(value_norm, points, 1)\n    pearson = np.corrcoef(value_norm, points)[0, 1]\n    plt.subplot(1,len(list_countries),ic+1)\n    if ic == 0:\n        plt.ylabel('Points \/ Number of matches')\n    plt.xlabel('Team value \/ Mean(Team values)')\n    plt.scatter(value_norm, points, marker='+', color=colorsc[ic], label=country+(' (%.2f, %.1f)' % (pearson, slope)))\n    plt.plot([0.925,1.125],[0.925*slope+inter, 1.125*slope+inter],ls='-',color=colorsc[ic])\n    plt.legend(loc='upper left');\npoints_all = teams_df.Points\nvalue_norm_all = teams_df.Mean_22pl\/teams_df.Mean_22pl.mean()\nslope, inter = np.polyfit(points_all, value_norm_all, 1)\n","7f46ca7c":"list_prop = ['Crossing','Finishing','HeadingAccuracy','ShortPassing','Volleys','Dribbling',\n             'Curve','FKAccuracy','LongPassing','BallControl','Acceleration','SprintSpeed',\n             'Agility','Reactions','Balance','ShotPower','Jumping','Stamina','Strength','LongShots',\n             'Aggression','Interceptions','Positioning','Vision','Penalties','Composure',\n             'Marking','StandingTackle','SlidingTackle','GKDiving','GKHandling','GKKicking',\n             'GKPositioning','GKReflexes']\npos_dict = {'GK'  : ['GK'],\n            'DEF_CENT' : ['CB', 'RCB', 'LCB'],\n            'DEF_WING' : ['RB', 'RWB', 'LB', 'LWB'],\n            'MID_DEF' : ['CDM', 'CM', 'RCM', 'LCM', 'LDM', 'RDM'],\n            'MID_OFF' : ['CAM', 'RM', 'LM', 'RW', 'LW', 'LAM', 'RAM'],\n            'ATT' : ['CF', 'RF', 'LF', 'ST', 'RS', 'LS']}\nfifa19_df['Position2'] = fifa19_df['Position']\nlist_pos = fifa19_df['Position'].unique()\nfor key, value in pos_dict.items():\n    fifa19_df['Position2'] = fifa19_df['Position2'].apply(lambda x: key if x in value else x)\nlist_pos2 = fifa19_df['Position2'].unique()","2bb9deb2":"fifa19_df = fifa19_df.dropna(how='any', axis=0, subset=list_prop)\nfifa19_prop_df = fifa19_df.copy()\nfifa19_prop_df[list_prop] = fifa19_prop_df[list_prop].apply(lambda x: x\/x.mean() if x.mean() != 0 else 1, axis=1) #\/fifa19_df[list_prop].mean(axis=1)","54426623":"list_keyprop = ['Position2', 'Finishing', 'Dribbling', 'Stamina', 'ShortPassing', 'SlidingTackle', 'GKDiving']\ng = sns.pairplot(fifa19_prop_df[list_keyprop], \n                 diag_kind='kde', markers=\"+\",hue='Position2',\n                 plot_kws=dict(s=30, edgecolor=\"red\", linewidth=0.5),diag_kws=dict(shade=True)) #,xlim=([0,1],[10,25],[0,15]),ylim=([0,1],[10,25],[0,15])) #,xlim=","77fee4a1":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.cluster import KMeans \n\nlist_prop2 = list_prop#[0:2]\n\nscaler = StandardScaler()\nfifa19_scaled = scaler.fit_transform(fifa19_prop_df[list_prop2])  #fifa19_prop_df[list_prop2] # \n\nkmeans = KMeans(n_clusters=6)\nkmeans.fit(fifa19_scaled)\nkmeans_inertia = kmeans.inertia_\nlabels = kmeans.predict(fifa19_scaled)\ncluster_centers = kmeans.cluster_centers_\ncluster_centers_df = pd.DataFrame({prop : [cluster_centers[icl][iprop] for icl in range(6)] for iprop, prop in enumerate(list_prop)})\n#print(cluster_centers_df)\n\nfifa19_prop_df['label'] = labels\n\ncrosstab_df = pd.DataFrame({'labels': labels, 'positions': fifa19_prop_df['Position2'].tolist()})\nct = pd.crosstab(crosstab_df['labels'], crosstab_df['positions'])\nprint(ct)","7674c092":"fig = plt.figure(0,figsize=[18,5])\n#\nplt.subplot(1,3,1)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(50,95)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Overall')\nplt.ylabel('Value [\u20ac]')\nplt.scatter(fifa19_df['Overall'], fifa19_df['Value_float'], marker='.')\nplt.plot(fifa19_df.groupby(['Overall']).mean().index, \n         fifa19_df.groupby(['Overall']).mean()['Value_float'], ls='-',color='r')\nplt.fill_between(fifa19_df.groupby(['Overall']).mean().index, \n                 fifa19_df.groupby(['Overall']).mean()['Value_float']+fifa19_df.groupby(['Overall']).std()['Value_float'],\n                 fifa19_df.groupby(['Overall']).mean()['Value_float']-fifa19_df.groupby(['Overall']).std()['Value_float'], \n                 facecolor='crimson', alpha=0.5)\n#\nplt.subplot(1,3,2)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(15,45)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Age')\nplt.ylabel('Value [\u20ac]')\nplt.scatter(fifa19_df['Age'], fifa19_df['Value_float'], marker='.')\nplt.plot(fifa19_df.groupby(['Age']).mean().index, \n         fifa19_df.groupby(['Age']).mean()['Value_float'], ls='-',color='r')\n#\nplt.subplot(1,3,3)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(0,25)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Relative potential')\nplt.ylabel('Value [\u20ac]')\nplt.scatter(fifa19_df['Potential_rel'], fifa19_df['Value_float'], marker='.')\nplt.plot(fifa19_df.groupby(['Potential_rel']).mean().index, \n         fifa19_df.groupby(['Potential_rel']).mean()['Value_float'], ls='-',color='r');","554a2a54":"list_pos2 = fifa19_df['Position2'].unique()[:-1]\nlist_age = fifa19_df['Age'].unique()[:-1]#.sort_values()\nlist_overall = fifa19_df['Overall'].unique()[:-1]#.sort_values()\n#\nfig = plt.figure(0,figsize=[18,5])\n#\nplt.subplot(1,3,1)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(50,95)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Overall')\nplt.ylabel('Value [\u20ac]')\nfor ipos, pos in enumerate(list_pos2):\n    plt.plot(fifa19_df[(fifa19_df['Position2'] == pos)].groupby(['Overall']).mean().index, \n             fifa19_df[(fifa19_df['Position2'] == pos)].groupby(['Overall']).mean()['Value_float'], \n             ls='-',color=colorsc[ipos], label=pos)\nplt.legend()\n#\nplt.subplot(1,3,2)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(15,45)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Age')\nplt.ylabel('Value [\u20ac]')\nfor iov, over in enumerate(list_overall):\n    plt.plot(fifa19_df[fifa19_df['Overall'] == over].groupby(['Age']).mean().index, \n             fifa19_df[fifa19_df['Overall'] == over].groupby(['Age']).mean()['Value_float'], \n             ls='-',color=plt.cm.OrRd_r(iov\/len(list_overall))) #colorsc[iov])\n#\nplt.subplot(1,3,3)\nplt.xscale('linear')\nplt.yscale('log')\nplt.xlim(0,25)\nplt.ylim(1e4, 1.5e8)\nplt.xlabel('Relative potential')\nplt.ylabel('Value [\u20ac]')\nfor iov, over in enumerate(list_overall):\n    plt.plot(fifa19_df[fifa19_df['Overall'] == over].groupby(['Potential_rel']).mean().index, \n             fifa19_df[fifa19_df['Overall'] == over].groupby(['Potential_rel']).mean()['Value_float'], \n             ls='-',color=plt.cm.OrRd_r(iov\/len(list_overall))) ","4eb2812a":"list_pos2 = fifa19_df['Position2'].unique()[:-1]\nfig = plt.figure(0,figsize=[18,5])\n#\nfor ipos, pos in enumerate(list_pos2):\n    fifa19_2 = fifa19_df[(fifa19_df['Position2'] == pos)]\n    fifa19_2 = fifa19_2[(fifa19_2['Value_float'] > 0)]\n    overall = fifa19_2['Overall'].tolist() ; logvalue = np.log10(fifa19_2['Value_float']).tolist()\n    slope, inter = np.polyfit(overall, logvalue, 1)\n    pearson = np.corrcoef(overall, logvalue)[0, 1]\n    #print(ipos, pearson)\n    # plot\n    plt.subplot(1,len(list_pos2),ipos+1)\n    plt.xscale('linear')\n    plt.yscale('linear')\n    plt.xlim(45,95)\n    plt.ylim(3, 9)\n    plt.xlabel('Overall')\n    if ipos == 0:\n        plt.ylabel('log[Value [\u20ac]]')\n    else:\n        plt.ylabel(' ')\n    #print(fifa19_2.info())\n    plt.scatter(overall, logvalue, marker='.', c=colorsc[ipos], label=pos+('\\n (%.2f, %.3f, %.3f)' % (pearson, slope, inter)))\n    plt.plot([45,95],[45*slope+inter, 95*slope+inter],ls='-',color='k')\n    plt.legend()\n","f3a59639":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\nfifa19_pos = []\nreg = LinearRegression()\n#\nprint('log(Value) as function of property overall, age, and relative potential for the six positions')\nfor ipos, pos in enumerate(list_pos2):\n    fifa19_2 = fifa19_df[(fifa19_df['Position2'] == pos)]#[prop_pca]\n    fifa19_2 = fifa19_2[(fifa19_2['Value_float'] > 0)]\n    fifa19_2['logValue'] = np.log10(fifa19_2['Value_float'])\n    #\n    X_train, X_test, y_train, y_test = train_test_split(fifa19_2[['Overall', 'Age', 'Potential_rel']],\n                                                        fifa19_2['logValue'], test_size = 0.2, random_state=42)\n    reg.fit(X_train, y_train)\n    y_pred = reg.predict(X_test)\n    \n    print('%10s: log(Value) = %.4f*Overall + %.4f*Age + %.4f*Potential + %.4f' %\n         (pos, reg.coef_[0], reg.coef_[1], reg.coef_[2], reg.intercept_))\n    \n    fifa19_2['Valueratio'] = fifa19_2['logValue']\/reg.predict(fifa19_2[['Overall', 'Age', 'Potential_rel']])\n    fifa19_pos.append(fifa19_2)","805148b9":"fig = plt.figure(0,figsize=[18,5])\nplt.subplots_adjust(wspace=0.3, hspace=0.0)\nfor ipos, pos in enumerate(list_pos2):\n    plt.subplot(1,len(list_pos2),ipos+1)\n    plt.xscale('linear')\n    plt.yscale('linear')\n    #plt.xlim(45,95)\n    plt.ylim(0.9,1.1)\n    #plt.ylim(fifa19_pos[ipos]['Valueratio'].min(), fifa19_pos[ipos]['Valueratio'].max())\n    plt.xlabel('log[Value (\u20ac)]')\n    if ipos == 0:\n        plt.ylabel('Real\/Predicted Value')\n    else:\n        plt.ylabel(' ')\n    #print(fifa19_2.info())\n    plt.scatter(fifa19_pos[ipos]['logValue'], fifa19_pos[ipos]['Valueratio'], marker='.', c=colorsc[ipos], label=pos)\n    plt.legend()","ea8e803d":"budget = {'GK' : 1e7, 'DEF_CENT' : 1.25e7, 'DEF_WING' : 1.25e7, 'MID_DEF' : 2e7, 'MID_OFF' : 2e7, 'ATT' : 2.5e7}\neps = 0.3\n\nfor ipos, pos in enumerate(list_pos2):\n    print('%s: %i +- %i M\u20ac' % (pos, budget[pos]\/1e6, eps*budget[pos]\/1e6))\n    selection = ((fifa19_pos[ipos]['Value_float'] > budget[pos]*(1-eps)) & \n                (fifa19_pos[ipos]['Value_float'] < budget[pos]*(1+eps)) &\n                (fifa19_pos[ipos]['Age'] < 25.))\n    fifa19_pos_sel = fifa19_pos[ipos][selection].sort_values('Valueratio', ascending=False)\n    print('%i players in the database' % len(fifa19_pos_sel))\n    print(fifa19_pos_sel[['Name', 'Age', 'Nationality', 'Club', 'Value', 'Valueratio']].head(5))\n    print(' ')","bd89f48f":"At first glance, it seems that the property overall of players impacts the most their value. For a given property overall, the dispersion of values could be due to either the age, their potential, or their position. \n\nPlayers tend to be more expensive between 24 and 30 years old. Is it because they are simply better or because the clubs do not want to invest a lot of money if they are old? \n\nInterestingly, the player value seems to decrease with the relative potential. Is it because players with high relative potential have a low current property overall ?","e89ca7af":"Clearly, the GK position stands out from the others since it requires a very specific set of skills. The situation i less clear for others. Attackers seem to better at finishing and dribbling, but defenders are better at tackling.","e82d83e0":"We first normalise the player properties, before performing any clustering analysis so we can study the relative properties of each player, regardless its overall level, in order to determine the player positions.","a8781adb":"Now let's re-show the same correlations but with avering the curves for the different positions, and property overalls.","7038cea4":"The reservoir of players within the country impacts the level of the national country. A Pearson coefficient of 0.76 is found between the log value of the number of players and the mean value of the 23 best players. Note that there is a large dispersion around the fit due to the limited number of leagues included in FIFA19. Some weak leagues have been included, increasing the number of players with respect to their level (see Saudi Arabia, or China for instance). Other countries whose leagues are not included in FIFA19 can have nevertheless a good level (see Uruguay, or Croatia for instance).\n","fb9e9d33":"The plot above shows the normalized number of points at the end of March 2019 (number of points divided by the number of played games) as function of the normalised team property overall (team property overall divided by the mean within the corresponding league). The two values as the top of each plot are the Pearson coefficient and the slope of the fit. It can be seen that the Pearson coefficient is high ($> 0.80$) for all leagues but France, showing that the FIFA19 players model gives a good prediction of  the club ranking in real life. France, however, shows a low Pearson coefficient of 0.53 due to several surprising teams this year. Lille for instance has the 18th value in FIFA19 but is currently second in the league whereas Monaco which is fourth in FIFA19 is currently ranked 16th. ","2709a655":"#### Read csv file","3989f797":"We selected 6 clusters, equal to the number of positions (goalkeeper, central defender, wing defender, defensive midfielder, offensive midfilder, and attaquant). \n\nIt can be seen that every cluster corresponds to a well-defined position. All GK players lie in the same cluster for instance, while 77 \\% of the central defenders, and 80 \\% of the attackers lie in the same corresponding clusters. The situation is less clear for the wing defenders, and the defensive and offensive midfielders: only 68 \\%, 67 \\%, and 72 \\% lie in their corresponding cluster, respectively. The rest are located in other clusters. For instance, 15 \\% and 8 \\% of the offensive midfielders lie in the defensive midfielder cluster and the attacker cluster, respectively, 21 \\% of the defensive midfielders like in the wind defender cluster, and 28 \\% of the wing defenders lie in the defensive midfielder cluster. There is consequently a porosity between these three positions since a significant fraction of offensive midfielders and wing defenders could also play defensive midfielders.","ed89599d":"#### Create the list of player properties and a more simple list of positions.","9f661aa4":"# 2. Club ranking in each league\n<a name=\"2\">\nlink\n<\/a>\n\nWhat are the best clubs of each league for the top 5 countries (England, Spain, Germany, Italy, France) according to their best 22 players (i.e. professional squad) ? \n\nDoes the team property overall correlate with the current ranking in the championship ? That is, does the FIFA19 player property model predict well the league ranking in real-life ?","78cb9b73":"#### Start by creating the list of clubs and their number of points (as end of March 2018).","5fddb219":"#### Does the team property overall correlate with the current ranking in the championship ? That is, does the FIFA19 player property model predict well the league ranking in real-life ?","8eae6139":"#### Multi-variable linear regression of log(Value)","c043aff6":"#### Does the country property overall correlate with the reservoir of players ?","678d4a3b":"The plot shows the ratio between the real value given in FIFA19 and the value predicted by the linear regression model for each of the six positions. Note that for all positions, the ratio follows the same trend: it decreases between log(Value) of 5 and 6, then increases until log(Value) = 7, and then re-decreases.","c42f1cd5":"#### Scatter plot ranking the best countries","755889b7":"Now let's use the linear regression model to assess what are the players with the best quality\/value ratio.\n\nLet's take an example of a club manager who wants to hire 11 \"young\" (i.e. $< 25$ yr old) players to set up a new team. With his budget, he wants to spend $\\sim$ 10 M for a goalkeeper, $\\sim$ 50 M for four defenders, $\\sim$ 80 M for four midfielders, and $\\sim$ 50 M for two attackers. What are the best players to choose ?\n\nWe want to rank young players that correspond to the budget criteria (by let's say 20\\%) with the quality\/price ratio as given by our linear regression model. \n","c4d5fc81":"#### Use the linear regression model to assess what are the players with the best quality\/price ratio","e49ace8a":"Let's start by visualising the correlation between the player value, and the property overall, age, and relative potential for all players in the database","b1331ed5":"# 4. Quality\/price ratio\n<a name=\"4\">\nlink\n<\/a>  \n\nWhat are the best players to choose if I want to set up a squad with a limited budget ? ","bd9d90f6":"#### Parameters that impact the most the player value (\u20ac)","71ae0455":"As expected, England and Spain are the two best leagues with an average value of $\\sim 77.5$, followed by Germany and Italy with 76.0, and then France ($< 74$). The standard deviation are higher for England, Spain, and Italy than for France and Germany ($\\sim 3.5$ vs $2.9$). For these three championships, this is due to the high number of top teams with values higher than 79: 6 for Spain, Italy, and England, vs only 2 for Germany and 1 for France.","4b412591":"A clustering analysis of all the player properties is carried out with the K-means algorithm available in the sklearn package. We first scaled the player properties with StandardScaler()","51b0d6cb":"#### Create country and team dataframes giving the mean value of the 22 best players from the players database with a pivot_table.\n\nFor the country dataframe, we only select countries which have at least 22 players. ","075a74fb":"The player values are once again plotted against their property overall, age, and relative potential but this time only means are shown for each player position (left panel), and each player property overall for the middle and right panels (red color scale shows the property overall, yellow and red mean low and high overalls, resp.). \n\nIt can be noticed that the position plays a non-negligible role: attackers and offensive midfielders seem to be slightly more expensive for a given property overall, followed by defensive midfielders, wing defenders, center defenders, and finally goalkeepers.\n\nFor a given property overall, the player value seems to slowly decrease by a factor of 5 between 18 and 32 years old and then drops more sharply.\n\nFinally, for a given property overall, the player value slowly increases with the relative potential of the player by a factor of two. ","e6d2cf9a":"# EDA and clustering analysis of the FIFA19 players dataset\n\nAs a big fan of football and players statistics, I created this notebook in order to work on different aspects of data analysis, and data visualisation using the FIFA19 players database. I aim to answer the following questions:\n\n### [1. Best countries and teams](#1) \n\nWhat are the best teams when only the \"professional squad\" (i.e. the best 22 players) is included ? \n\nWhat are the best countries ? Does it correlate with total number of players in the country ?\n    \n### [2. Club ranking in each league](#2)\n\nWhat are the best clubs of each league for the top 5 countries (England, Spain, Germany, Italy, France) according to their best 22 players (i.e. professional squad) ? \n\nDoes the team property overall correlate with the current ranking in the championship ? That is, does the FIFA19 player property model predict well the ranking in real-life ?\n   \n   \n### [3. Player properties and position](#3)\n\nCan we determine the position of the players according to their properties ? \nDo we see any porosity\/link between the player positions ? \n\n\n### [4. Quality\/price ratio](#4)\n\nWhat are the best players to choose if I want to set up a squad with a limited budget ? \n","69e0674f":"#### Compare the evolution of the team property overall between the five leagues","438157fd":"#### Plot the levels of each team among the five leagues","ea208cfb":"This gives the list of players with the best quality\/value ratio for each of the six positions. ","ab0a9162":"#### Clustering the player properties with K-Means algorithm","c25298e9":"#### Violin plot showing the 30 best teams","307ae8bd":"This plot shows the log of players value as function of the property overall for each position. The Pearson coefficient, the slope, and the intercept are given in the legend of each panel. \n\nThe high Pearson coefficient for all positions suggests that the overall value is indeed the most important parameter for the price of a player. Although the most expensive players are attackers of offensive midfielders, the slope is roughly similar between the different positions, although the one for goalkeepers seems to be less pronounced. \n\nCan we now predict the player value from its property overall, position, age, and relative potential?","7294cc82":"#### Perform some dataframe manipulation \n\nThe value, wage, and release columns are string, they are therefore converted to float for subsequent data manipulation. I also created a relative potential feature from the \"absolute\" potential.","822a2394":"We first plot the correlation plots between selected key properties in order to see if the positions can be clustered by eye.","5bc95621":"#### First pairplot allowing us to visualize any correlation or cluster between selected properties ","8b84127b":"# 1. Best countries and teams\n<a name=\"1\">\nlink\n<\/a>\n\nWhat are the best teams when only the \"professional squad\" (i.e. the best 22 players) is included ? \n\nWhat are the best countries ? Does it correlate with total number of players in the country ?","042abc8a":"#### Normalize the player properties ","b49d1eed":"# 3. Player properties and position\n<a name=\"3\">\nlink\n<\/a>   \n\nCan we determine the position of the players according to their properties ? \n\nDo we see any porosity\/link between the player positions ? ","0d14e1cf":"#### 1D linear regression of log(Value)\n\nLet's perform a linear regression between the player value and the property overall, for each of the six defined positions. "}}