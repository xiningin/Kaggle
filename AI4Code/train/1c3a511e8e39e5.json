{"cell_type":{"3170dbb8":"code","7094cf38":"code","f5f82396":"code","8b4f2a29":"code","283b1bbf":"code","b2f9fcb9":"code","7af6f36e":"code","7182b530":"code","3fedb6b7":"code","9cda1e02":"code","eb9871a2":"code","3d63a586":"code","ae24ce04":"code","c5377941":"code","61a449b3":"code","6fd432ae":"code","832d4ffa":"code","434ba55d":"code","d8f5a2e8":"code","df7e409e":"code","f4e58396":"code","1829975b":"code","8c7f585c":"code","8f43034b":"code","109fe1c8":"code","14d10879":"code","79a0def4":"code","6f4018f3":"code","3f3d4086":"code","11cbca55":"code","ef8415a8":"code","e5850e46":"code","22d608d5":"markdown","6796523c":"markdown","b5764c0f":"markdown","d2ebd89e":"markdown","13490f42":"markdown","5a68c84b":"markdown","90599616":"markdown","a73c735a":"markdown","ef51d3ac":"markdown","b70fd481":"markdown","32a5d97c":"markdown","7e5f5912":"markdown","7eb8e8bb":"markdown","dc0c8b1b":"markdown","c0d36921":"markdown","eabbffdf":"markdown"},"source":{"3170dbb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7094cf38":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","f5f82396":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","8b4f2a29":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","283b1bbf":"m.shape\nm = m.transpose()\nm.shape","b2f9fcb9":"pData.head(2)","7af6f36e":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","7182b530":"df.describe()","3fedb6b7":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","9cda1e02":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","eb9871a2":"m2 = m.multiply( 1\/m.sum(axis=1))\nm2 = m2.tocsr()\nm2.data = np.log(1+m2.data)","3d63a586":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 =  m2.copy() # m2 != 0 #\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","ae24ce04":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 =  m2 != 0 #\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","c5377941":"fn = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\ngenes_selected = pd.read_csv(fn, header = None) \nprint( len(genes_selected[0]), len( set( genes_selected[0] ) & set(genes[1] )) )\ngenes_selected","61a449b3":"mask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\nv = m[:,IX].sum(axis = 0)\nv = np.asarray(v).ravel()\nprint( (v==0).sum() , ' count non expressed genes ' )\nfig = plt.figure(figsize = (20,5))\nplt.plot(np.sort(v),'*-')\nplt.xlabel('genes ordered')\nplt.ylabel('expression sum over cells')\nplt.grid()\nplt.show()\n\ns = genes.iloc[IX,:].copy()# pd.DataFrame()\ns['Expression'] = v\nv = (m!=0)[:,IX].sum(axis = 0)\nv = np.asarray(v).ravel()\ns['Expressed cells count'] = v\n\ns.sort_values('Expression', ascending = False).head(50)","6fd432ae":"s.sort_values('Expression', ascending = False).tail(30)","832d4ffa":"s.describe()","434ba55d":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\n# v = np.asarray(m2.sum(axis=0)).ravel()\n# IX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    m3 =  m2[:,IX].copy() # m2 != 0 #\n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","d8f5a2e8":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 0\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\n# v = np.asarray(m2.sum(axis=0)).ravel()\n# IX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","df7e409e":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 0\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\nm3 = m3 !=0\n# v = np.asarray(m2.sum(axis=0)).ravel()\n# IX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","f4e58396":"df[mask].groupby('drug')['drug'].count()","1829975b":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 0\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0,10,20,100]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","8c7f585c":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 100\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","8f43034b":"df[mask].groupby('drug')['drug'].count()","109fe1c8":"df[df['dose']==50].groupby('drug')['drug'].count()","14d10879":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 50\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","79a0def4":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nfor drug in ['BMS', 'Nutlin', 'SAHA', 'Dex']:\n    #BMS    143\n    #Dex       1131\n    #Nutlin     410\n    #SAHA \n    mask = (df['dose'] == 50 ) & (df['drug'] ==drug)\n    m3 =  m2[:,IX].copy() # m2 != 0 #\n    m3 = m3[np.where(mask.values==True)[0],:]\n\n    v = np.asarray(m3.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n\n    t00 = time.time()\n    for count_made_zeros in [0]: # range(10,100,10):\n\n\n        if count_made_zeros != 0:\n            #m3[:,IX[-count_made_zeros:]] = 0\n            m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n        else:\n            m4 = m3\n\n        t0 = time.time()\n        r = svd.fit_transform(m4)\n        print(time.time() - t0, 'seconds passed for svd')\n\n        r = reducer.fit_transform(r)\n        print(time.time() - t0, 'seconds passed for the second reducer')\n\n        fig = plt.figure(figsize = (20,12))\n        c = 0; \n\n        c+=1; fig.add_subplot(1, 1 , c)         \n        color_by = df['drug'][mask].copy()\n        sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 1)# , marker = '.')\n        plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n        print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","6f4018f3":"m2 = m.copy()\nm2.data = np.log(1+m2.data)\nm2 = m2.multiply( 1\/m2.sum(axis=1))\nm2 = m2.tocsr()\n","3f3d4086":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 50\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","11cbca55":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nfor drug in ['BMS', 'Nutlin', 'SAHA', 'Dex']:\n    #BMS    143\n    #Dex       1131\n    #Nutlin     410\n    #SAHA \n    mask = (df['dose'] == 50 ) & (df['drug'] ==drug)\n    m3 =  m2[:,IX].copy() # m2 != 0 #\n    m3 = m3[np.where(mask.values==True)[0],:]\n\n    v = np.asarray(m3.sum(axis=0)).ravel()\n    IX = np.argsort(v )\n\n    t00 = time.time()\n    for count_made_zeros in [0]: # range(10,100,10):\n\n\n        if count_made_zeros != 0:\n            #m3[:,IX[-count_made_zeros:]] = 0\n            m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n        else:\n            m4 = m3\n\n        t0 = time.time()\n        r = svd.fit_transform(m4)\n        print(time.time() - t0, 'seconds passed for svd')\n\n        r = reducer.fit_transform(r)\n        print(time.time() - t0, 'seconds passed for the second reducer')\n\n        fig = plt.figure(figsize = (20,12))\n        c = 0; \n\n        c+=1; fig.add_subplot(1, 1 , c)         \n        color_by = df['drug'][mask].copy()\n        sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 1)# , marker = '.')\n        plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n        print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","ef8415a8":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nmask = df['dose'] == 0\nm3 =  m2[:,IX].copy() # m2 != 0 #\nm3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 1 , c)         \n    color_by = df['drug'][mask].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","e5850e46":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer_type = 'UMAP'\nif reducer_type == 'UMAP':\n    reducer = umap.UMAP()\nelse:\n    reducer = ncvis.NCVis()\n    #reducer =  trimap.TRIMAP()\n    \nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\nmask = genes[1].isin(genes_selected[0].values)\nIX = np.where(mask == True)[0]\nprint( mask.sum(), type(IX), IX.shape )\n\nm3 =  m2[:,IX].copy() # m2 != 0 #\n\nif 0:\n    mask = df['dose'] == 0\n    m3 = m3[np.where(mask.values==True)[0],:]\n\nv = np.asarray(m3.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [0]: # range(10,100,10):\n\n    \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m4 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n    else:\n        m4 = m3\n        \n    t0 = time.time()\n    r = svd.fit_transform(m4)\n    print(time.time() - t0, 'seconds passed for svd')\n    \n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed for the second reducer')\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by drug. count_made_zeros='  +str( count_made_zeros ) )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.3, marker = '.')\n    plt.title(reducer_type+'. Color by log10 of dose. count_made_zeros='  +str( count_made_zeros ) )\n    plt.show()\n\n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')        ","22d608d5":"# UMAP standard  visualization","6796523c":"# All doses and drugs ","b5764c0f":"# Change order of log and normalize","d2ebd89e":"# Load count matrix and convert it to sparse matrix csr_matrix","13490f42":"# Load selected genes list and show stat on them ","5a68c84b":"# Dose 50 drugs on separate plots\n","90599616":"# What is about \n\nHere we analyse sciPlex2 subdataset making  visualizations\nusing some subsets of genes -  cell cylce related genes. \n\nUnfortunately we do not see some cicrle like structure \n\n\n\n------------------\n\nDataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n-----------\n\n","a73c735a":"# Visualization on selected genes","ef51d3ac":"# Create columns with information on each cell (drug, dose, etc)","b70fd481":"# Dose 50","32a5d97c":"# UMAP  visualization on binarized","7e5f5912":"# Load information files: genes annotations, cells info etc...","7eb8e8bb":"# Normalization and log ","dc0c8b1b":"# Dose 100","c0d36921":"# Dose zero","eabbffdf":"# dose zero, selected genes, binarized data "}}