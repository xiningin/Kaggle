{"cell_type":{"4c652e37":"code","d383b943":"code","73ca1a31":"code","4b5e87c9":"code","14861bf4":"code","fa9f2b7a":"code","e83869f6":"code","f7a1cb9e":"code","020e22b5":"code","50f0645f":"code","f298a142":"code","65d2924b":"code","5601cb35":"code","b823c52b":"code","d6d27736":"code","648159b4":"code","8a80fc3b":"code","5a528b1a":"code","f90b2048":"code","51f8878e":"code","43c09c2d":"code","f246e08b":"code","9b85d537":"code","209a04f9":"code","89839dcb":"code","dbd1f598":"code","cf33cb90":"code","258bce97":"code","e011d979":"code","aade028d":"code","2ff8902d":"code","fd952f6f":"code","115a5fd3":"code","60234270":"code","70e10916":"code","8860b835":"code","9ec9b1d8":"code","0af9a923":"markdown","ec3ae3db":"markdown"},"source":{"4c652e37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d383b943":"#Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\npd.pandas.set_option('display.max_columns',None)","73ca1a31":"data=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata.head()","4b5e87c9":"data.describe()","14861bf4":"#Identifying columns with missing values","fa9f2b7a":"features_nan=[features for features in data.columns if data[features].isnull().sum()>1]\n\nfor features in features_nan:\n    print(features,\" has \", np.round((data[features].isnull().mean())*100,4),\"% missing values\")","e83869f6":"# Identifying the relationship between missing values and target variable\n\nfor features in features_nan:\n    data_new=data.copy()\n    \n    data_new[features]=np.where(data_new[features].isnull(),1,0)\n    \n    data_new.groupby(features)['SalePrice'].mean().plot.bar()\n    plt.title(features)\n    plt.show()","f7a1cb9e":"#removing columns that are not required\n#data=data.drop('Id',axis=1,inplace=True)","020e22b5":"#identifying numerical features\nfeatures_num = [features for features in data.columns if data[features].dtypes != 'O']\nprint(len(features_num))\ndata[features_num].head()","50f0645f":"#Temporal Variable (Eg: Datetime)\nfeatures_yr=[features for features in features_num if 'Yr' in features or 'Year' in features]\nfeatures_yr","f298a142":"#exploring the content in the temporal features\nfor features in features_yr:\n    print(features, data[features].unique())","65d2924b":"#Relationship between Year Sold and Sales Price\ndata.groupby('YrSold')['SalePrice'].mean().plot()\nplt.xlabel('YrSold')\nplt.ylabel('Sales Price')\nplt.title('House Price vs. Year Sold')","5601cb35":"#average Sales Price is decreasing with time","b823c52b":"for features in features_yr:\n    if features != 'YrSold':\n        data_yr=data.copy()\n        data_yr[features]=data_yr['YrSold']-data_yr[features]\n        \n        plt.scatter(data_yr[features],data['SalePrice'])\n        plt.xlabel(features)\n        plt.ylabel('SalePrice')\n        plt.show()","d6d27736":"#Numerical variables are of two types 1. Discrete 2. Continuous\n\nfeatures_dis= [features for features in features_num if len(data[features].unique())<25 and features not in features_yr ]\nprint(\"Discrete Variables Count: {}\".format(len(features_dis)))","648159b4":"features_dis","8a80fc3b":"for a in features_dis:\n    data_dis=data.copy()\n    data_dis.groupby(a)['SalePrice'].median().plot.bar()\n    plt.xlabel(a)\n    plt.ylabel('Sales Price')\n    plt.title(a)\n    plt.show()   ","5a528b1a":"features_con=[features for features in features_num if features not in features_dis + features_yr+ ['Id']]\nprint(\"Continuous feature Count {}\".format(len(features_con)))","f90b2048":"features_con","51f8878e":"for feature in features_con:\n    data_con=data.copy()\n    data_con[feature].hist(bins=25)\n    plt.xlabel(feature)\n    plt.ylabel(\"Count\")\n    plt.title(feature)\n    plt.show()","43c09c2d":"#applying log transformation\nfor feature in features_con:\n    data_con=data.copy()\n    if 0 in data_con[feature].unique():\n        pass\n    else:\n        data_con[feature]=np.log(data_con[feature])\n        data_con['SalePrice']=np.log(data_con['SalePrice'])\n        plt.scatter(data_con[feature],data_con['SalePrice'])\n        plt.xlabel(feature)\n        plt.ylabel('SalesPrice')\n        plt.title(feature)\n        plt.show()","f246e08b":"for feature in features_con:\n    data_con=data.copy()\n    if 0 in data_con[feature].unique():\n        pass\n    else:\n        data_con[feature]=np.log(data_con[feature])\n        data_con.boxplot(column=feature)\n        plt.ylabel(feature)\n        plt.title(feature)\n        plt.show()","9b85d537":"features_cat=[feature for feature in data.columns if data[feature].dtype=='O']\nfeatures_cat","209a04f9":"for feature in features_cat:\n    print('{} contains {} unique values'.format(feature,len(data[feature].unique())))","89839dcb":"## Find out the relationship between categorical variable and dependent feature SalesPrice","dbd1f598":"for feature in features_cat:\n    data_cat=data.copy()\n    data_cat.groupby(feature)['SalePrice'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('SalePrice')\n    plt.title(feature)\n    plt.show()","cf33cb90":"#train data","258bce97":"dataset=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","e011d979":"dataset.head(5)","aade028d":"features_nan=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>0 and dataset[feature].dtypes == 'O']\n\nfor i in features_nan:\n    print(i,\" has\",np.round(dataset[i].isnull().mean()*100,0),\" % of null values\")","2ff8902d":"#replacing nans with \"missing\"\n\ndef replace_nan(dataset,features_nan):\n    data1=dataset.copy()\n    data1[features_nan]= data1[features_nan].fillna(\"Missing\")\n    return data1\n\ndataset=replace_nan(dataset,features_nan)\ndataset[features_nan].isnull().sum()","fd952f6f":"features_num_nan=[feature for feature in dataset.columns if dataset[feature].isnull().sum()>0 and dataset[feature].dtypes != 'O']\n\nfor i in features_num_nan:\n    print(\"{}:{}% missing values\".format(i,np.round(dataset[i].isnull().mean()*100,0)))","115a5fd3":"for i in features_num_nan:\n    median_value=dataset[i].median()\n    \n    dataset[i+'nan']=np.where(dataset[i].isnull(),1,0)\n    dataset[i].fillna(median_value,inplace=True)","60234270":"dataset.head(5)","70e10916":"features_temp= [feature for feature in dataset.columns if (dataset[feature].dtypes != 'O') and ('Yr' in feature or 'Year' in feature)]\nfeatures_temp","8860b835":"for i in features_temp:\n    dataset[i]=dataset['YrSold']-dataset[i]","9ec9b1d8":"dataset.head(5)","0af9a923":"# Feature Engineering","ec3ae3db":"### Outliers"}}