{"cell_type":{"b3744379":"code","42938dcd":"code","c68fda48":"code","14ee2499":"code","f191caae":"code","3159c792":"code","bcd7bb53":"code","3837350b":"code","346e7eef":"code","7e30ed12":"code","a2e39334":"code","bc68dc89":"code","b39a53e3":"code","1363673d":"code","8ef1c6b7":"code","26cb6835":"code","c6ebffba":"code","ca37186f":"code","2d5425e3":"code","3c438c85":"markdown","cb00eda7":"markdown","67ea1ae7":"markdown","5a974cb0":"markdown","eeeabdd6":"markdown"},"source":{"b3744379":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","42938dcd":"import matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, MaxPool2D, Conv2D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import classification_report, confusion_matrix","c68fda48":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","14ee2499":"df.head()","f191caae":"X = df.drop('label', axis=1).values\ny = df['label'].values","3159c792":"#reshape data to fit for images\nX = X.reshape(42000,28,28,1)\nX = X\/255","bcd7bb53":"#Split the data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","3837350b":"##create categorical values for my output\ny_train_cat = to_categorical(y_train)\ny_test_cat = to_categorical(y_test)","346e7eef":"###Create model and train it\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(4,4), activation='relu', input_shape=(28,28,1)))\nmodel.add(MaxPool2D(2,2))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\n","7e30ed12":"#Compile and train model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)\n\nmodel.fit(x=X_train, \n          y=y_train_cat, \n          epochs=10, \n          validation_data=(X_test, y_test_cat), \n          callbacks=[early_stop])\n","a2e39334":"evaluate = pd.DataFrame(model.history.history)","bc68dc89":"#loss\nevaluate[['loss', 'val_loss']].plot()\nplt.show()","b39a53e3":"#accuracy\nevaluate[['accuracy', 'val_accuracy']].plot()\nplt.show()","1363673d":"#predict\ny_pred = model.predict_classes(X_test)\n","8ef1c6b7":"#evaluate\nclassification = classification_report(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\n\nprint(classification)\nprint(cm)","26cb6835":"##Run with test data\ndf_validate = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","c6ebffba":"X_valid = df_validate.to_numpy()\nX_valid = X_valid.reshape(28000,28,28,1)\nX_valid = X_valid\/255","ca37186f":"###Predict\nprediction = model.predict_classes(X_valid)","2d5425e3":"#print to file\noutput = pd.DataFrame({'ImageId': list(df_validate.index.values+1) , 'Label': prediction})\noutput.to_csv('my_submission.csv', index=False)","3c438c85":"# Prediction","cb00eda7":"# Data preprocessing","67ea1ae7":"# Create model","5a974cb0":"# Load data","eeeabdd6":"# Evaluate the model"}}