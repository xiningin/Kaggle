{"cell_type":{"8cf4a0a2":"code","750910d6":"code","b9b967b5":"code","3ed9efa1":"code","5a7481d2":"code","041e8f85":"code","d4a8ab38":"code","dfffae5d":"code","a7f9c4a5":"code","103c674e":"code","1aa49fa8":"code","60de9435":"code","cc2af99c":"code","96401b1a":"code","e897e886":"code","d6653186":"code","f9e84748":"code","4de40065":"code","d6d8d168":"code","01aea0cd":"code","52e28c2f":"code","5675e712":"code","116e97a4":"code","24b61376":"code","9562586b":"code","9ec7abeb":"code","03837232":"code","86b731d3":"code","44ea43d4":"code","1e425c4a":"code","46454374":"code","37e6d2e5":"code","36366fd8":"code","8aebf428":"code","55bf5f08":"code","f5ab0dee":"code","201aa4bb":"code","f9db813b":"code","088bc852":"code","d028447f":"code","311d3b1c":"code","afa8a48e":"code","59c01e70":"code","5472f896":"code","1c499525":"code","976bad93":"code","a25d2ce8":"code","0747e73d":"code","342dc4b4":"markdown","ed973b91":"markdown","27e45fc2":"markdown","661c349e":"markdown","9ae1c5f1":"markdown","6ff0d390":"markdown","895a95cd":"markdown","bd54adfc":"markdown","2e92611f":"markdown","2ae649fb":"markdown","3c82e01e":"markdown","dc3bb7ff":"markdown","416dd8f1":"markdown","2e61b5bb":"markdown","c28951b5":"markdown"},"source":{"8cf4a0a2":"!pip install plotly","750910d6":"!pip install opencage","b9b967b5":"import numpy as np\nimport pandas as pd\nimport plotly.express as px","3ed9efa1":"matches = pd.read_csv(\"..\/input\/api-tokens\/matches_ipl.csv\")","5a7481d2":"matches.head()","041e8f85":"matches = matches.drop(columns  = ['umpire3'])\nmatches = matches.dropna().reset_index()","d4a8ab38":"fig = px.bar(x = matches['player_of_match'].value_counts().index.tolist()[:20],\n             y = matches['player_of_match'].value_counts().values.tolist()[:20], \n             title = \"top 20 players with most IPL MVPs (2008-2019)\",color =matches['player_of_match'].value_counts().index.tolist()[:20] )\nfig.update_xaxes(title = \"players\")\nfig.update_yaxes(title = \"NO.OF MVPs\")\nfig.show()","dfffae5d":"from opencage.geocoder import OpenCageGeocode\ngeo = OpenCageGeocode(open('..\/input\/api-tokens\/geo.txt').read())","a7f9c4a5":"latlong_dict = {}\nvisited = []\nfor index in matches['city'].value_counts().index.tolist():\n    if index not in visited:\n        call = geo.geocode(index)\n        latlong_dict[index] = [call[0]['geometry']['lat'],call[0]['geometry']['lng']]","103c674e":"hyd_re = geo.geocode(\"hyderabad, india\")\ndel latlong_dict['Hyderabad']\nlatlong_dict['Hyderabad'] = [hyd_re[0]['geometry']['lat'],hyd_re[0]['geometry']['lng']]","1aa49fa8":"matches['lat'] =[latlong_dict[index][0] for index in matches['city']]\nmatches['lng'] =[latlong_dict[index][1] for index in matches['city']]\nmatches['city_counts'] = [matches['city'].value_counts().to_dict()[index] for index in matches['city']]","60de9435":"px.set_mapbox_access_token(open('..\/input\/api-tokens\/map_token.txt').read())","cc2af99c":"fig = px.scatter_mapbox(lat=matches['lat'], lon=matches['lng'], color=matches['city'],size = matches['city_counts'],\n                  color_continuous_scale=px.colors.cyclical.IceFire,size_max=15, zoom=10,title = \"IPL venues (2007-2019)\",height = 700)\nfig.show()","96401b1a":"def win_trends(matches):\n    team_list = pd.DataFrame(columns = ['year','team','wins'])\n    for year in sorted(matches['season'].value_counts().index.tolist()):\n        year_list = matches[matches['season'] == year]\n        for team in year_list['winner'].value_counts().index.tolist():\n            team_list = team_list.append({\"year\":year,\"team\":team,\"wins\":year_list['winner'].value_counts()[team]},ignore_index = True)\n    return team_list","e897e886":"win_trends = win_trends(matches)\nwin_trends = win_trends.replace(to_replace = \"Rising Pune Supergiants\", value = \"Rising Pune Supergiant\")","d6653186":"fig = px.line(win_trends,x = \"year\",y =\"wins\",color = \"team\",\n              hover_name = \"team\", height = 500,width =1000 ,range_x=[2007,2020], title =\"win Trends of teams (2008 - 2019)\")\nfig.show()","f9e84748":"fig = px.bar(x = matches['winner'].value_counts().index,\n             y = matches['winner'].value_counts().values, \n             title = \"most IPL team wins (2008-2019)\",color =matches['winner'].value_counts().index )\nfig.update_xaxes(title = \"teams\")\nfig.update_yaxes(title = \"NO.OF Wins\")\nfig.show()","4de40065":"fig = px.bar(x = matches[matches['toss_winner'] == matches['winner']]['winner'].value_counts().index,\n             y = matches[matches['toss_winner'] == matches['winner']]['winner'].value_counts().values, \n             title = \"most IPL team wins given they won toss (2008-2019)\",\n             color =matches[matches['toss_winner'] == matches['winner']]['winner'].value_counts().index )\nfig.update_xaxes(title = \"teams\")\nfig.update_yaxes(title = \"NO.OF Wins\")\nfig.show()","d6d8d168":"toss_win_match_lose = matches[matches['toss_winner'] != matches['winner']]","01aea0cd":"fig = px.bar(x = toss_win_match_lose['toss_winner'].value_counts().index,\n             y = toss_win_match_lose['toss_winner'].value_counts().values, \n             title = \"most IPL team loss given they won toss (2008-2019)\",\n             color =toss_win_match_lose['toss_winner'].value_counts().index )\nfig.update_xaxes(title = \"teams\")\nfig.update_yaxes(title = \"NO.OF Wins\")\nfig.show()","52e28c2f":"toss_n_match_winners = matches[matches['toss_winner'] == matches['winner']]","5675e712":"import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows =8 ,cols = 1,\n                   specs = [[{\"type\":\"bar\",\"rowspan\":2}],\n                            [None],\n                            [{\"type\":\"bar\",\"rowspan\":2}],\n                            [None],\n                            [{\"type\":\"bar\",\"rowspan\":2}],\n                            [None],\n                            [{\"type\":\"bar\",\"rowspan\":2}],\n                            [None]])\nfig.add_trace(go.Bar(x = toss_n_match_winners[toss_n_match_winners['toss_decision'] == \"bat\"]['winner'].value_counts().index,\n                    y =toss_n_match_winners[toss_n_match_winners['toss_decision'] == \"bat\"]['winner'].value_counts().values,\n                     name = \"Wins if toss is won and choose to Bat first (2008-2019)\"),row =1 ,col =1 )\nfig.add_trace(go.Bar(x = toss_n_match_winners[toss_n_match_winners['toss_decision'] == \"field\"]['winner'].value_counts().index,\n                    y =toss_n_match_winners[toss_n_match_winners['toss_decision'] == \"field\"]['winner'].value_counts().values,\n                     name = \"Wins if toss is won and choose to field first (2008-2019)\"),row =3 ,col =1, )\nfig.add_trace(go.Bar(x = toss_win_match_lose[toss_win_match_lose['toss_decision'] == \"bat\"]['toss_winner'].value_counts().index,\n                    y =toss_win_match_lose[toss_win_match_lose['toss_decision'] == \"bat\"]['toss_winner'].value_counts().values,\n                     name = \"loss if toss is won and choose to bat first (2008-2019)\"),row =5 ,col =1 )\nfig.add_trace(go.Bar(x = toss_win_match_lose[toss_win_match_lose['toss_decision'] == \"field\"]['toss_winner'].value_counts().index,\n                    y =toss_win_match_lose[toss_win_match_lose['toss_decision'] == \"field\"]['toss_winner'].value_counts().values,\n                     name = \"loss if toss is won and choose to field first (2008-2019)\"),row =7 ,col =1 )\nfig.update_xaxes(showticklabels=False)\nfig.update_yaxes(showticklabels=False,title = \"wins\")\nfig.update_layout(title = \"no.of wins for each team based on conditions\")\nfig.update_xaxes(title = \"teams\")\nfig.show()","116e97a4":"fig = px.pie(names = matches['dl_applied'].value_counts().index, values= matches['dl_applied'].value_counts().values,title = \"percertage of matches, DL is applied for\")\nfig.show()","24b61376":"deliveries = pd.read_csv(\"..\/input\/api-tokens\/deliveries_ipl.csv\")","9562586b":"matches_2017 = matches[matches['season'] == 2017]\nmatches_2017.head()","9ec7abeb":"deliveries_2017 = deliveries[deliveries['match_id'].isin([*range(1,60)])]\ndeliveries_2017.head()","03837232":"fig = go.Figure(go.Pie(labels = deliveries['dismissal_kind'].value_counts().index, values =deliveries['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2017\",pull = [0,0.2,0,0.2,0,0,0.2]))\nfig.show()","86b731d3":"fig = px.bar(x = matches_2017['winner'].value_counts().index, y =  matches_2017['winner'].value_counts().values,color =  matches_2017['winner'].value_counts().index,\n            title = \"top IPL team wins in 2017\")\nfig.show()","44ea43d4":"from collections import defaultdict \ndef synergy_gen(data_frame):\n    current_field = [data_frame['batsman'][0],data_frame['non_striker'][0]]\n    countered_by = {}\n    synergy_dict = defaultdict(int)\n    for bat,non,runs,bowler in zip(data_frame['batsman'],data_frame['non_striker'],data_frame['total_runs'],data_frame['bowler']):\n        if bat and non in current_field:\n            synergy_dict[\"-\".join(current_field)] = synergy_dict[\"-\".join(current_field)] + runs\n        else:\n            current_field = [bat,non]\n            synergy_dict[\"-\".join(current_field)] = synergy_dict[\"-\".join(current_field)] + runs\n            countered_by[\"-\".join(current_field)] = bowler\n    return pd.DataFrame(sorted(synergy_dict.items(), key = lambda x : x[1],reverse = True))","1e425c4a":"synergy_2017 = synergy_gen(deliveries_2017) ","46454374":"fig = px.bar(y = synergy_2017[0].tolist()[:10],x = synergy_2017[1].tolist()[:10],\n                       title =\"top 10 synergies of 2017 IPL season\", orientation = \"h\",color = synergy_2017[0].tolist()[:10])\nfig.update_yaxes(title = \"synergies\")\nfig.update_xaxes(title = \"runs\")\nfig.show()","37e6d2e5":"matches_2017_top = deliveries_2017[deliveries_2017[\"batting_team\"].isin(matches_2017['winner'].value_counts().index.tolist()[:1])]","36366fd8":"matches_2017_top_synergy = synergy_gen(matches_2017_top.reset_index())","8aebf428":"fig = px.bar(y = matches_2017_top_synergy[0].tolist()[:10],x = matches_2017_top_synergy[1].tolist()[:10],\n                       title =f\"top 10 synergies of {matches_2017['winner'].value_counts().index.tolist()[:1]} - 2017 \", orientation = \"h\",color = matches_2017_top_synergy[0].tolist()[:10])\nfig.update_yaxes(title = \"synergies\")\nfig.update_xaxes(title = \"runs\")\nfig.show()","55bf5f08":"yearlist = sorted(matches['season'].value_counts().index.tolist())","f5ab0dee":"matches_first_split = matches[matches['season'].isin(yearlist[:6])]","201aa4bb":"matches_first_split.head()","f9db813b":"deliveries_2008 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2008]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2009 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2009]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2010 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2010]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2011 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2011]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2012 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2012]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2013 = deliveries[deliveries['match_id'].isin(sorted(matches_first_split[matches_first_split['season'] == 2013]['id'].value_counts().index.tolist()))].reset_index()","088bc852":"fig = make_subplots(rows =2 ,cols = 3,\n                   specs = [[{\"type\":\"pie\"},{\"type\":\"pie\"},{\"type\":\"pie\"}],\n                            [{\"type\":\"pie\"},{\"type\":\"pie\"},{\"type\":\"pie\"}]])\nfig.add_trace(go.Pie(labels = deliveries_2008['dismissal_kind'].value_counts().index, values =deliveries_2008['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2008\",pull = [0,0.2,0,0.2,0,0,0.2]),1,1)\nfig.add_trace(go.Pie(labels = deliveries_2009['dismissal_kind'].value_counts().index, values =deliveries_2009['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2009\",pull = [0,0.2,0,0.2,0,0,0.2]),1,2)\nfig.add_trace(go.Pie(labels = deliveries_2010['dismissal_kind'].value_counts().index, values =deliveries_2010['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2010\",pull = [0,0.2,0,0.2,0,0,0.2]),1,3)\nfig.add_trace(go.Pie(labels = deliveries_2011['dismissal_kind'].value_counts().index, values =deliveries_2011['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2011\",pull = [0,0.2,0,0.2,0,0,0.2]),2,1)\nfig.add_trace(go.Pie(labels = deliveries_2012['dismissal_kind'].value_counts().index, values =deliveries_2012['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2012\",pull = [0,0.2,0,0.2,0,0,0.2]),2,2)\nfig.add_trace(go.Pie(labels = deliveries_2013['dismissal_kind'].value_counts().index, values =deliveries_2013['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2013\",pull = [0,0.2,0,0.2,0,0,0.2]),2,3)\nfig.show()","d028447f":"fig = make_subplots(rows = 12,cols = 1, specs = [[{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],])\n\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2008]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2008]['winner'].value_counts().values,\n                     name = \"2008\",orientation = \"h\"),1,1)\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2009]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2009]['winner'].value_counts().values,\n                     name = \"2009\",orientation = \"h\"),3,1)\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2010]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2010]['winner'].value_counts().values,\n                     name = \"2010\",orientation = \"h\"),5,1)\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2011]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2011]['winner'].value_counts().values,\n                     name = \"2011\",orientation = \"h\"),7,1)\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2012]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2012]['winner'].value_counts().values,\n                     name = \"2012\",orientation = \"h\"),9,1)\nfig.add_trace(go.Bar(y = matches_first_split[matches_first_split['season'] == 2013]['winner'].value_counts().index, x = matches_first_split[matches_first_split['season'] == 2013]['winner'].value_counts().values,\n                     name = \"2013\",orientation = \"h\"),11,1)\nfig.update_xaxes(showticklabels=False,title = \"wins\")\nfig.update_yaxes(showticklabels=True,title = \"teams\")\nfig.update_layout(title = \"Most Team Wins\",height = 1200)\nfig.show()","311d3b1c":"fig = make_subplots(rows = 12,cols = 1, specs = [[{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],])\n\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2008)[0].tolist()[:10], x = synergy_gen(deliveries_2008)[1].tolist()[:10],\n                     name = \"2008\",orientation = \"h\"),1,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2009)[0].tolist()[:10], x = synergy_gen(deliveries_2009)[1].tolist()[:10],\n                     name = \"2009\",orientation = \"h\"),3,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2010)[0].tolist()[:10], x = synergy_gen(deliveries_2010)[1].tolist()[:10],\n                     name = \"2010\",orientation = \"h\"),5,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2011)[0].tolist()[:10], x = synergy_gen(deliveries_2011)[1].tolist()[:10],\n                     name = \"2011\",orientation = \"h\"),7,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2012)[0].tolist()[:10], x = synergy_gen(deliveries_2012)[1].tolist()[:10],\n                     name = \"2012\",orientation = \"h\"),9,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2013)[0].tolist()[:10], x = synergy_gen(deliveries_2013)[1].tolist()[:10],\n                     name = \"2013\",orientation = \"h\"),11,1)\nfig.update_xaxes(showticklabels=True)\nfig.update_yaxes(showticklabels=True,title = \"players\")\nfig.update_layout(title = \"Top 10 Synergies (w.r.t Season)\",height = 1300)\nfig.show()","afa8a48e":"matches_second_split = matches[matches['season'].isin(yearlist[6:])]","59c01e70":"matches_second_split = matches_second_split[matches_second_split['season'] != 2017].drop(columns = ['index']).reset_index()","5472f896":"matches_second_split = matches_second_split.drop(columns = ['index'])","1c499525":"deliveries_2014 = deliveries[deliveries['match_id'].isin(sorted(matches_second_split[matches_second_split['season'] == 2014]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2015 = deliveries[deliveries['match_id'].isin(sorted(matches_second_split[matches_second_split['season'] == 2015]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2016 = deliveries[deliveries['match_id'].isin(sorted(matches_second_split[matches_second_split['season'] == 2016]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2018 = deliveries[deliveries['match_id'].isin(sorted(matches_second_split[matches_second_split['season'] == 2018]['id'].value_counts().index.tolist()))].reset_index()\ndeliveries_2019 = deliveries[deliveries['match_id'].isin(sorted(matches_second_split[matches_second_split['season'] == 2019]['id'].value_counts().index.tolist()))].reset_index()","976bad93":"fig = make_subplots(rows =2 ,cols = 3,\n                   specs = [[{\"type\":\"pie\"},{\"type\":\"pie\"},{\"type\":\"pie\"}],\n                            [{\"type\":\"pie\"},None,{\"type\":\"pie\"}]])\nfig.add_trace(go.Pie(labels = deliveries_2014['dismissal_kind'].value_counts().index, values =deliveries_2014['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2014\",pull = [0,0.2,0,0.2,0,0,0.2]),1,1)\nfig.add_trace(go.Pie(labels = deliveries_2015['dismissal_kind'].value_counts().index, values =deliveries_2015['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2015\",pull = [0,0.2,0,0.2,0,0,0.2]),1,2)\nfig.add_trace(go.Pie(labels = deliveries_2016['dismissal_kind'].value_counts().index, values =deliveries_2016['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2016\",pull = [0,0.2,0,0.2,0,0,0.2]),1,3)\nfig.add_trace(go.Pie(labels = deliveries_2018['dismissal_kind'].value_counts().index, values =deliveries_2018['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2018\",pull = [0,0.2,0,0.2,0,0,0.2]),2,1)\nfig.add_trace(go.Pie(labels = deliveries_2019['dismissal_kind'].value_counts().index, values =deliveries_2019['dismissal_kind'].value_counts().values,\n             title= \"top OUT! reasons 2019\",pull = [0,0.2,0,0.2,0,0,0.2]),2,3)\nfig.show()","a25d2ce8":"fig = make_subplots(rows = 10,cols = 1, specs = [[{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None]])\n\nfig.add_trace(go.Bar(y = matches_second_split[matches_second_split['season'] == 2014]['winner'].value_counts().index, x = matches_second_split[matches_second_split['season'] == 2014]['winner'].value_counts().values,\n                     name = \"2014\",orientation = \"h\"),1,1)\nfig.add_trace(go.Bar(y = matches_second_split[matches_second_split['season'] == 2015]['winner'].value_counts().index, x = matches_second_split[matches_second_split['season'] == 2015]['winner'].value_counts().values,\n                     name = \"2015\",orientation = \"h\"),3,1)\nfig.add_trace(go.Bar(y = matches_second_split[matches_second_split['season'] == 2016]['winner'].value_counts().index, x = matches_second_split[matches_second_split['season'] == 2016]['winner'].value_counts().values,\n                     name = \"2016\",orientation = \"h\"),5,1)\nfig.add_trace(go.Bar(y = matches_second_split[matches_second_split['season'] == 2018]['winner'].value_counts().index, x = matches_second_split[matches_second_split['season'] == 2018]['winner'].value_counts().values,\n                     name = \"2018\",orientation = \"h\"),7,1)\nfig.add_trace(go.Bar(y = matches_second_split[matches_second_split['season'] == 2019]['winner'].value_counts().index, x = matches_second_split[matches_second_split['season'] == 2019]['winner'].value_counts().values,\n                     name = \"2019\",orientation = \"h\"),9,1)\nfig.update_xaxes(showticklabels=False,title = \"wins\")\nfig.update_yaxes(showticklabels=True,title = \"teams\")\nfig.update_layout(title = \"Most Team Wins\",height = 1200)\nfig.show()","0747e73d":"fig = make_subplots(rows = 10,cols = 1, specs = [[{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None],\n                                              [{'type':\"bar\",'rowspan':2}],\n                                              [None]])\n\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2014)[0].tolist()[:10], x = synergy_gen(deliveries_2014)[1].tolist()[:10],\n                     name = \"2014\",orientation = \"h\"),1,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2015)[0].tolist()[:10], x = synergy_gen(deliveries_2015)[1].tolist()[:10],\n                     name = \"2015\",orientation = \"h\"),3,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2016)[0].tolist()[:10], x = synergy_gen(deliveries_2016)[1].tolist()[:10],\n                     name = \"2016\",orientation = \"h\"),5,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2018)[0].tolist()[:10], x = synergy_gen(deliveries_2018)[1].tolist()[:10],\n                     name = \"2018\",orientation = \"h\"),7,1)\nfig.add_trace(go.Bar(y = synergy_gen(deliveries_2019)[0].tolist()[:10], x = synergy_gen(deliveries_2019)[1].tolist()[:10],\n                     name = \"2019\",orientation = \"h\"),9,1)\nfig.update_xaxes(showticklabels=True)\nfig.update_yaxes(showticklabels=True,title = \"players\")\nfig.update_layout(title = \"Top 10 Synergies (w.r.t Season)\",height = 1300)\nfig.show()","342dc4b4":"#### run all cells..there is chance that plots are not saved..because plotly is browser rendered and make sure u have all libs ","ed973b91":"## ------------------------------------global data analysis (2008- 2019)--------------------------------------","27e45fc2":"### excluding 2017 ^_^ (it received special test treatment)","661c349e":"### synergy of best team of 2017","9ae1c5f1":"#### disable and enable each trend by clicking on it in legend","6ff0d390":"## ---------------------------- season wide batch analytics split -2 (2014 - 2019)  ---------------------------","895a95cd":"#### make sure u have \"map_token.txt\" and \"geo.txt\" in current directory before running","bd54adfc":"#  Exploratory Data Analysis on IPL Data (2008-2019)","2e92611f":"## ---------------------------- season wide batch analytics split -1 (2008 - 2013) ---------------------------","2ae649fb":"#### check if plots are loaded..if not follow steps in next cell....if they are SCROLL AND ENJOY","3c82e01e":"###  zoom out of the map, if it is not auto scaled","dc3bb7ff":"#### hover over plots for values","416dd8f1":"### ------------------------------------------------------ EDA starts here---------------------------------------------------------","2e61b5bb":"#### library installations (run these here..)","c28951b5":"## -------------------------------------------season wide analysis (2017) ---------------------------------------"}}