{"cell_type":{"98d86458":"code","9ce09115":"code","97308cd3":"code","1497796a":"code","cfeee35e":"code","e049f4ba":"code","c63fb568":"code","e6ece1f1":"code","f9819709":"code","c8a682fe":"code","3e137991":"code","ef9ff53d":"code","c1d13a55":"code","938039fc":"code","5a28cf47":"code","ae304d51":"code","1c627da1":"code","59d23cd6":"code","678eb0a6":"code","5186b7ce":"code","2624e0c8":"code","b890abea":"code","c6884a29":"code","eec39e78":"code","98be896e":"code","f800ca2b":"code","94246536":"code","aa84900a":"code","934805c3":"code","6257f827":"code","1081663a":"code","19ad913b":"code","b3d19c3f":"code","1cdaec08":"code","a504de67":"code","a19cd9aa":"code","ecb9c425":"code","da899250":"code","dd10828d":"markdown","0ef8d728":"markdown","63bae834":"markdown","9080a5c2":"markdown","e09593a3":"markdown","1c8112d0":"markdown","59b70341":"markdown","35d157c8":"markdown","cf10d545":"markdown","819b6abf":"markdown","385c8a35":"markdown","46150a52":"markdown","af735e50":"markdown","bfb939db":"markdown","d24aabd9":"markdown","0ebbfdb4":"markdown","a023c832":"markdown","b77e5c89":"markdown"},"source":{"98d86458":"# Importing liberaries\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9ce09115":"df=pd.read_csv('..\/input\/talent-magnet-dataset\/imports-805.data',header=None) # Reading Data \npd.set_option('display.max_columns',None) # Display Max Columns\ndf.head()","97308cd3":"df.columns=['sympoling','normloss','make','fuel','aspiration','doorcount','style','drive','engine','wheelbase','lenght','width','hight','netweight','enginetype','cylcount','enginsize','fuelsys','bore','stroke','compratio','hp','rpm','city-mpg','hwy-mpg','price']\ndf.head() # Using Header Names For Columns","1497796a":"df.shape # getting data array (rows and columns)","cfeee35e":"df.isnull().sum() # ensure there are  NaN Values","e049f4ba":"df.duplicated().sum() # Is there any duplicated values","c63fb568":"df.info()","e6ece1f1":"df.describe() # Describtive statistics","f9819709":"df.replace('?',np.nan,inplace=True)  # Converting '?' to NaN , so we can deal with it .......\ndf.isnull().sum()","c8a682fe":"df['price']=df['price'].astype(float) # Converting 'Price' type from str to float .","3e137991":"df.dropna(subset=['price'],axis=0,inplace=True) # delete Missing or NaN values from 'price' column . \ndf.fillna(method='backfill',inplace=True)  # Fill missing Values in the rest columns  by backfill method.\ndf.isnull().sum() # checking Missing Values .","ef9ff53d":"df.info()","c1d13a55":"numerical=df[['sympoling','normloss','wheelbase','lenght','width','hight','netweight','enginsize','bore','stroke','compratio','hp','rpm','city-mpg','hwy-mpg','price']]\nnon_numerical=df[['make','fuel','aspiration','doorcount','style','drive','engine','enginetype','cylcount','fuelsys']]","938039fc":"non_numerical.head()","5a28cf47":"fig, ax = plt.subplots()\nfig.set_size_inches(20, 8.27)\nplt.title('Count of CarBrand')\nsns.countplot(x='make', data=df, order = df['make'].value_counts().index, ax=ax);","ae304d51":"sns.countplot(x=df['fuel'],data=df);\nplt.title('Count of fuel type');","1c627da1":"sns.countplot(x=df['aspiration'],data=df);\nplt.title('Count of fuel type');","59d23cd6":"sns.countplot(x=df['doorcount'],data=df);\nplt.title('Count of fuel type');","678eb0a6":"sns.countplot(x=df['style'],data=df);\nplt.title('Count according to style ');","5186b7ce":"sns.countplot(x=df['drive'],data=df);\nplt.title('Count of drive ');","2624e0c8":"sns.countplot(x=df['engine'],data=df);\nplt.title('Count according to engine');","b890abea":"sns.countplot(x=df['enginetype'],data=df);\nplt.title('Count according to engine type');","c6884a29":"sns.countplot(x=df['cylcount'],data=df);\nplt.title('Count according to cycle count ');","eec39e78":"sns.countplot(x=df['fuelsys'],data=df);\nplt.title('Count according to fuel system ');","98be896e":"numerical.head()","f800ca2b":"fig, ax = plt.subplots(figsize=(9,9))\nsns.heatmap(df.corr(),annot= True,fmt = \".2f\",ax=ax, cmap = \"BuPu\", cbar = False)\nplt.xticks(rotation=0)\nplt.yticks(rotation=0)\nplt.title('Correlation Map')\nplt.show()","94246536":"plt.figure();\nsns.pairplot(numerical);\nplt.title('All Over view ');\nplt.show();","aa84900a":"# Encoding Categorical Data \n\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nfor col in df.select_dtypes(include=object):\n    if col != 'make':\n        df[col] = le.fit_transform(df[col])\ndf","934805c3":"df= pd.get_dummies(df, drop_first=False)\ndf","6257f827":"x=df.drop(['price'],axis=1).values\ny=df['price'].values","1081663a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33, random_state=42)","19ad913b":"from sklearn.linear_model import LinearRegression\nreg = LinearRegression()\nreg.fit(x_train, y_train)","b3d19c3f":"y_pred=reg.predict(x_test)\nprint(y_pred)","1cdaec08":"reg.predict([[3,27,1,0,1,0,2,0,88.6,168.8,64.1,48.8,2548,0,2,130,5,23,4,9.0,5,10,21,27,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])","a504de67":"from sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","a19cd9aa":"## Plot Visualization .","ecb9c425":"plt.figure(figsize=(15,10))\nplt.scatter(y_test,y_pred)\nplt.xlabel('Acutal')\nplt.ylabel('Predicted')\nplt.title('Acutal VS Predicted')","da899250":"pred_y_df=pd.DataFrame({'Acutal Value': y_test,'Predicted Value': y_pred, 'Difference': y_test - y_pred })\npred_y_df[0:20]","dd10828d":"# **2.Data Cleaning .**","0ef8d728":"## Predicted Values","63bae834":"**Dataset shows**\n\n* Data have 205 rows and 26 columns .\n*  No Duplications .\n* No NaN but dataset show rows containg '?' that consider as missing value .\n* Some columns dtybe iare object(string ) although it contain numbers and it should be changed to (float) or (int) like Column 'price' is object that must be   changed to float .\n* There are  car brand names (In 'Make' column) that were written by mistake , but  i will ignore  them  as don't  affect the analysis .","9080a5c2":"# **1.Data Wrangling .**","e09593a3":"#### Notes","1c8112d0":"###  3.(a).Visualizing Categorical data .","59b70341":"## Train the model on the training set","35d157c8":"## Define x and y","cf10d545":"# Project: Investigate a Dataset - [Car_Price_prediction]\n\n## Table of Contents\n<ul>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#cleaning\">Data Cleaning<\/a><\/li>\n<li><a href=\"#visualizing\">Data Visualization<\/a><\/li> \n<li><a href=\"#regression\">Multiple Linear Regression<\/a><\/li>\n<\/ul>","819b6abf":"# Multiple Linear Regression","385c8a35":"## Evalute the model","46150a52":"* Correlation of price(dependent variable) with independent variables .\n1. Highly Positive correlation with wheelbase,carlength,carwidth,carweight and enginesize .\n2. Negative correlation with city_mpg and highyway_mpg","af735e50":"# **3.Data Visualization .**","bfb939db":" * Toyota is the most preferred car  .\n * Gas car are more popular than diesel cars with Std Aspiration type . \n * Fuel system (mpfi & 2bbl ) are the best .\n * Wagon ,Hardtop and Convertible  are not likable same sedan and hatchbag .\n * Cars have four door count shows best sells than two doors .\n * FWD (Front wheel drive) cars are preferred than  rwd and 4wd .\n * Front engine cars with Ohc engine and four cycle count are  considered the best seller .","d24aabd9":"### 3(b).Visualizing Numerical data .","0ebbfdb4":"## Splitting the data to train set and test set","a023c832":"#### Notes","b77e5c89":"## Predict the test set result"}}