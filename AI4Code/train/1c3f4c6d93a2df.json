{"cell_type":{"a6f2e565":"code","8201c54f":"code","bef4d8ca":"code","2f906be4":"code","257f078b":"code","7f814b7f":"code","38142981":"code","a92ef263":"code","730ebd55":"code","14e1d6ca":"code","a9434154":"code","1e7c1f0c":"code","51842cdf":"code","c3791389":"code","cf8f022d":"code","0f30db9e":"code","c8d8ebe4":"code","c7130f26":"code","ffe1baed":"code","0217e40f":"code","85dc5742":"code","54ca44bf":"code","8db922a1":"code","28bdc8ce":"code","00dadfdb":"code","3bb9e3c6":"code","80fe2519":"code","1db1b48a":"code","645eba18":"code","fe6ab545":"code","0796980f":"code","db9c00e8":"code","e5f44174":"code","ef67bce9":"code","3fb3eebd":"code","31c7d179":"markdown"},"source":{"a6f2e565":"import requests\nimport statsmodels.api as sm\nimport io\nimport pandas as pd\n# Load Dataset\nDATA_URL=\"http:\/\/robjhyndman.com\/tsdldata\/data\/nybirths.dat\"\nfopen = requests.get(DATA_URL).content\nds=pd.read_csv(io.StringIO(fopen.decode('utf-8')), header=None,\nnames=['birthcount'])\nprint(ds.head())\n# Add time index\ndate=pd.date_range(\"1946-01-01\", \"1959-12-31\", freq=\"1M\")\nds['Date']=pd.DataFrame(date)\nds = ds.set_index('Date')\n# decompose dataset\nres = sm.tsa.seasonal_decompose(ds.birthcount, model=\"additive\")\nresplot = res.plot()","8201c54f":"ds.head(3)","bef4d8ca":"import matplotlib.pyplot as plt\n# Function for Single exponential smoothing\ndef single_exp_smoothing(x, alpha):\n    F = [x[0]] # first value is same as series\n    for t in range(1, len(x)):\n        F.append(alpha * x[t] + (1 - alpha) * F[t-1])\n    return pd.DataFrame(F)\n\nalpha1 = single_exp_smoothing(ds['birthcount'],0.2).set_index(ds.index)\nplt.figure(figsize=(20,10))\n           \nplt.plot(alpha1,label = \"alpha = {}\".format(0.2))\nplt.plot(ds['birthcount'],label = 'original')\nplt.plot(single_exp_smoothing(ds['birthcount'],0.4).set_index(ds.index),label = 'alpha = {}'.format(0.4))\nplt.plot(single_exp_smoothing(ds['birthcount'],0.6).set_index(ds.index),label = 'alpha = {}'.format(0.6))\nplt.plot(single_exp_smoothing(ds['birthcount'],0.8).set_index(ds.index),label = 'alpha = {}'.format(0.8))\nplt.plot(single_exp_smoothing(ds['birthcount'],1).set_index(ds.index),label = 'alpha = {}'.format(1))\nplt.legend()\nplt.grid()","2f906be4":"plt.figure(figsize = (10,10))\nplt.plot(single_exp_smoothing(ds['birthcount'],0.6).set_index(ds.index),label = 'alpha = {}'.format(0.8))\nplt.plot(ds['birthcount'],label = 'original')\nplt.legend()\nplt.grid()","257f078b":"# Function for double exponential smoothing\ndef double_exp_smoothing(x, alpha, beta):\n    yhat = [x[0]] # first value is same as series\n    for t in range(1, len(x)):\n        if t==1:\n            F, T= x[0], x[1] - x[0]\n        F_n_1, F = F, alpha*x[t] + (1-alpha)*(F+T)\n        T=beta*(F-F_n_1)+(1-beta)*T\n        yhat.append(F+T)\n    return pd.DataFrame(yhat)\n\n","7f814b7f":"plt.figure(figsize = (10,10))\nplt.plot(ds['birthcount'],label = 'original')\nplt.plot(double_exp_smoothing(ds['birthcount'],0.2,0.2).set_index(ds.index),label = '(a,b) = ({},{})'.format(0.2,0.2))\nplt.plot(double_exp_smoothing(ds['birthcount'],0.6,0.7).set_index(ds.index),label = '(a,b) = ({},{})'.format(0.6,0.7))\nplt.plot(double_exp_smoothing(ds['birthcount'],1,1).set_index(ds.index),label = '(a,b) = ({},{})'.format(1,1))\nplt.legend()\nplt.grid()","38142981":"# Initialize trend value\ndef initialize_T(x, seasonLength):\n    total=0.0\n    for i in range(seasonLength):\n         total+=float(x[i+seasonLength]-x[i])\/seasonLength\n    return total\n\n# Initialize seasonal trend\ndef initialize_seasonalilty(x, seasonLength):\n    seasons={}\n    seasonsMean=[]\n    num_season=int(len(x)\/seasonLength)\n# Compute season average\n    for i in range(num_season):\n        seasonsMean.append(sum(x[seasonLength*i:seasonLength*i+seasonLength])\/float(seasonLength))\n# compute season intial values\n    for i in range(seasonLength):\n        tot=0.0\n        for j in range(num_season):\n            tot+=x[seasonLength*j+i]-seasonsMean[j]\n        seasons[i]=tot\/num_season\n    return seasons","a92ef263":"# Triple Exponential Smoothing Forecast\ndef triple_exp_smoothing(x, seasonLength, alpha, beta, gamma, h):\n    yhat=[]\n    S = initialize_seasonalilty(x, seasonLength)\n    for i in range(len(x)+h):\n        if i == 0:\n            F = x[0]\n            T = initialize_T(x, seasonLength)\n            yhat.append(x[0])\n            continue\n        if i >= len(x):\n              m = i - len(x) + 1\n              yhat.append((F + m*T) + S[i%seasonLength])\n        else:\n            obsval = x[i]\n            F_last, F= F, alpha*(obsval-S[i%seasonLength]) + (1-alpha)*(F+T)\n            T = beta * (F-F_last) + (1-beta)*T\n            S[i%seasonLength] = gamma*(obsval-F) + (1-gamma)*S[i%seasonLength]\n            yhat.append(F+T+S[i%seasonLength])\n    return pd.DataFrame(yhat)","730ebd55":"plt.figure(figsize = (10,10))\nplt.plot(ds['birthcount'],label = 'original')\n\nplt.plot(triple_exp_smoothing(ds['birthcount'], 12, 0, 0,1, 0).set_index(ds.index),label = '{},{},{}'.format(0,0,1))\nplt.plot(triple_exp_smoothing(ds['birthcount'], 12, 0.5, 0.5,1, 0).set_index(ds.index),label = '{},{},{}'.format(0.5,0.5,1))\nplt.plot(triple_exp_smoothing(ds['birthcount'], 12, 0.6, 0.6,0.6, 0).set_index(ds.index),label = '{},{},{}'.format(0.6,0.6,0.6))\nplt.grid()\nplt.legend()","14e1d6ca":"from statsmodels.tsa import seasonal\naddetive_model = seasonal.seasonal_decompose(ds['birthcount'].tolist(),period=12, model='additive')\nmultiplactive_model = seasonal.seasonal_decompose(ds['birthcount'].tolist(),period=12, model='multiplicative')","a9434154":"addetive_model.plot()","1e7c1f0c":"multiplactive_model = seasonal.seasonal_decompose(ds['birthcount'].tolist(),period=12, model='multiplicative')\nmultiplactive_model.plot()","51842cdf":"ds.head(3)","c3791389":"ds['Date'] = ds.index\nds.head(3)","cf8f022d":"sample = ds['birthcount'].resample('M')\nsample.mean()","0f30db9e":"import statsmodels.tsa.api as smtsa\n\nar1model = smtsa.ARMA(ds.birthcount.tolist(), order=(1, 0))\nar1=ar1model.fit(maxlag=30, method='mle', trend='nc')\nar1.summary()","c8d8ebe4":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nds['residual']=ds.birthcount-ds.birthcount.mean()\nds_df=ds.dropna()\nplot_acf(ds_df.residual, lags=50)\nplot_pacf(ds_df.residual, lags=50)","c7130f26":"data = ds.birthcount-ds.birthcount.shift()","ffe1baed":"# To get the optimal p and q orders for ARMA, a grid search is performed with AIC\n# minimization as the search criteria using the following script:\n# # Optimize ARMA parameters\naicVal=[]\nfor ari in range(1, 3):\n    for maj in range(1,3):\n        arma_obj = smtsa.ARMA(data.dropna(), order=(ari,maj)).fit(maxlag=30, method='mle', trend='nc',transparams=False)\n        aicVal.append([ari, maj, arma_obj.aic])","0217e40f":"pd.DataFrame(aicVal)","85dc5742":"# Building optimized model using minimum AIC\narma_obj_fin = smtsa.ARMA(ds.birthcount.tolist(), order=(1,2)).fit(maxlag=30, method='mle', trend='nc')\nds['ARMA12']=arma_obj_fin.predict()","54ca44bf":"arma_obj_fin = smtsa.ARMA(ds.birthcount.tolist(), order=(2,0)).fit(maxlag=30, method='mle', trend='nc')\nds['ARMA20']=arma_obj_fin.predict()","8db922a1":"ds.head(3)","28bdc8ce":"plt.figure(figsize = (10,10))\nplt.plot(ds['birthcount'].iloc[1:],label = 'original')\nplt.plot(ds['ARMA12'].iloc[1:],label = 'arma12')\nplt.plot(ds['ARMA20'].iloc[1:],label = 'arma20')\nplt.legend()","00dadfdb":"import seaborn as sns\nsns.regplot(ds.birthcount,ds.ARMA12)\nplt.grid()","3bb9e3c6":"sns.regplot(ds.birthcount,ds.ARMA20)\nplt.grid()","80fe2519":"ds.birthcount.shape","1db1b48a":"mean1, mean2 =ds.iloc[:84].birthcount.mean(),ds.iloc[84:].birthcount.mean()\nvar1, var2 = ds.iloc[:84].birthcount.var(), ds.iloc[84:].birthcount.var()\nprint('mean1=%f, mean2=%f' % (mean1, mean2))\nprint('variance1=%f, variance2=%f' % (var1, var2))","645eba18":"# ADF Test\nfrom statsmodels.tsa.stattools import adfuller\nadf_result= adfuller(ds.birthcount.tolist())\nprint('ADF Statistic: %f' % adf_result[0])\nprint('p-value: %f' % adf_result[1])","fe6ab545":"#Let us plot the original time series and first-differences\nfirst_order_diff = ds['birthcount'].diff(1)\nfig, ax = plt.subplots(2, sharex=True)\nfig.set_size_inches(5.5, 5.5)\nds['birthcount'].plot(ax=ax[0], color='b')\nax[0].set_title('birthcount')\nfirst_order_diff.plot(ax=ax[1], color='r')\nax[1].set_title('First-order differences ')","0796980f":"aicVal=[]\nd = 1\nfor d in range(0,3):\n    for ari in range(0, 3):\n        for maj in range(0,3):\n            try:\n            \n                 arma_obj = smtsa.ARIMA(data.dropna(), order=(ari,d,maj)).fit()\n                 aicVal.append([ari,d, maj, arma_obj.aic])\n            \n            except ValueError:\n                pass\n\npd.DataFrame(aicVal)","db9c00e8":"# Evaluating fit using optimal parameter\nimport numpy as np\narima_obj = smtsa.ARIMA(ds.birthcount.tolist(), order=(2,0,2))\narima_obj_fit = arima_obj.fit(disp=0)\narima_obj_fit.summary()\n# Evaluate prediction\npred = arima_obj_fit.fittedvalues.tolist()","e5f44174":"ds['ARIMA']=pred\n# diffval=np.append([0,24], arima_obj_fit.resid+arima_obj_fit.fittedvalues)\n# ds['diffval']=diffval\n# The comparison with the actual and forecasted values is obtained and visualized using the\n# following script:\n# # Plot the curves\nf, axarr = plt.subplots(1, sharex=True)\nf.set_size_inches(5.5, 5.5)\nds['ARIMA'].plot(color='r', linestyle = '--', ax=axarr)\nds['birthcount'].plot(color='b')\naxarr.set_title('ARIMA(2,0,2)')\nplt.xlabel('Index')\nplt.ylabel('birthcount')","ef67bce9":"import seaborn as sns\nsns.regplot(ds.birthcount,ds.ARIMA)\nplt.grid()","3fb3eebd":"f, err, ci=arima_obj_fit.forecast(40)\nplt.plot(f)\nplt.plot(ci)\nplt.grid()\nplt.xlabel('Forecasting Index')\nplt.ylabel('Forecasted value')","31c7d179":"# ARIMA"}}