{"cell_type":{"82937edc":"code","a6961140":"code","ef19e111":"code","acfc71e6":"code","c993116b":"code","1d1c53e6":"code","ff610abb":"code","543959b2":"code","d1f56485":"code","6331228a":"code","f7f19a49":"code","af11c1e8":"code","957d566a":"code","381aec5b":"code","11fb3f67":"code","44df7a0d":"code","3a069d0f":"code","7b744183":"code","a43c6eb8":"code","80c079d6":"code","340572c7":"code","5a4c1cc5":"code","a525f420":"code","f9d69215":"code","dd7af2aa":"code","ce8a8248":"code","33b36ecb":"code","483de8e9":"code","5825aa62":"code","d9c98764":"code","0f4b6a6e":"code","f6f74041":"code","872807a5":"code","22f91133":"code","1d229287":"code","b4edd6c6":"code","42e91091":"code","4fd092dd":"code","09c0a5a2":"code","bd9f8abd":"code","3b0fe5d8":"code","1a38a90f":"code","e8723c63":"code","3b726cc6":"code","c24763da":"code","eeb6acbb":"code","6f981d9c":"code","047d9210":"code","9a822cf6":"code","bb005167":"code","7fbbab4a":"code","6d7ba287":"code","2d9030a7":"code","22cf0463":"code","9018bf99":"code","70db804f":"code","f0f5a2e1":"code","7939b55f":"code","c8973c24":"code","fe08add9":"code","94ab180f":"code","7ee980d3":"code","791dbd63":"code","c2a6339b":"code","1fd6b3b6":"code","464bebf2":"code","3e47e97b":"code","ebe4bea2":"code","dc0fc933":"code","84a9f8be":"code","d6e504ee":"code","b8fa8bf3":"code","ea5273c0":"code","e5d36985":"code","30f20e1f":"code","c62f70cf":"code","1492a1ef":"code","02af7603":"code","833bfb19":"code","6fd507ba":"code","50d5111c":"code","2c38e681":"code","e308c5e0":"code","e4c65e06":"code","d883f2a5":"code","46f22059":"code","5cc4ad50":"code","49fa7543":"markdown","a4d1b9be":"markdown","0fddc4b1":"markdown","0ef95b97":"markdown","b78ae660":"markdown","abb4fc61":"markdown","8a75fe84":"markdown","c52857eb":"markdown","bbb00050":"markdown","d3a568a9":"markdown","e578ffeb":"markdown","2f6bbdbd":"markdown","0219844c":"markdown","a6f07e25":"markdown","82aa948d":"markdown","bebbde21":"markdown","5a06740f":"markdown","0f549945":"markdown","70770dd4":"markdown","76da246b":"markdown","7cf4daa8":"markdown","f6f7a501":"markdown","dd7c5141":"markdown","4d569992":"markdown","e0ea0554":"markdown","2f076d95":"markdown","863379ac":"markdown","8522a0eb":"markdown","80ec6472":"markdown","31eb5b56":"markdown","ab3dfa37":"markdown","fbbd4b0c":"markdown","d8752233":"markdown","55e1ec7a":"markdown","ffb13433":"markdown","81029568":"markdown","20a2d681":"markdown","45c60964":"markdown","2f78046c":"markdown","7416906b":"markdown","6b569606":"markdown","b0a7e77a":"markdown","c6b61be7":"markdown","cd9b713f":"markdown","f01d8700":"markdown","b4342303":"markdown","79eaeb4e":"markdown","c03ee749":"markdown","d2feaf86":"markdown","e29ccc8a":"markdown","13b9d238":"markdown","6007228e":"markdown","169a1af2":"markdown","1f806e03":"markdown","c09abfc9":"markdown","02704c1c":"markdown","6280d79d":"markdown","310dd769":"markdown","3fd9e5fd":"markdown","4d0f61a6":"markdown","ee88a824":"markdown","df1b6d50":"markdown"},"source":{"82937edc":"# Import required packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport requests\nimport datetime as dt\n\n# To plot visualizations inline with the notebook\n%matplotlib inline","a6961140":"# Load data from the file into DataFrame and print out a few lines. \ndf = pd.read_csv('..\/input\/no-show-appointments\/no_show_appointments.csv')\ndf.head()","ef19e111":"# Number of samples and features\nprint('Number of samples :', df.shape[0])\nprint('Number of features :', df.shape[1])","acfc71e6":"# Perform operations to inspect data types\ndf.dtypes","c993116b":"print('Gender :', type(df.Gender[0]))\nprint('ScheduledDay :', type(df.ScheduledDay[0]))\nprint('AppointmentDay :', type(df.AppointmentDay[0]))\nprint('Neighbourhood :', type(df.Neighbourhood[0]))","1d1c53e6":"# look for instances of missing or possibly errant data\ndf.info()","ff610abb":"# Look for instances of duplicates\ndf.duplicated().value_counts()","543959b2":"# Perform operations to inspect number of uniques values in each column\ndf.nunique()","d1f56485":"# Unique values in Handcap\ndf.Handcap.unique()","6331228a":"# Unique values in SMS_received\ndf.SMS_received.unique()","f7f19a49":"# Unique values in Gender\ndf.Gender.unique()","af11c1e8":"# Unique values in Age\ndf.Age.unique()","957d566a":"# Number of patients is of Age (102,115,100)\ncount = df.query('Age in [102,115,100]').Age.count()\ncount","381aec5b":"# Total samples\ntotal_samples = df.shape[0]\ntotal_samples","11fb3f67":"# Proportion of Age (102,115,100)\nproportion = count\/total_samples\nproportion","44df7a0d":"# Unique values in Scholarship\ndf.Scholarship.unique()","3a069d0f":"# Unique values in Hipertension\ndf.Hipertension.unique()","7b744183":"# Unique values in Diabetes\ndf.Diabetes.unique()","a43c6eb8":"# Unique values in Alcoholism\ndf.Alcoholism.unique()","80c079d6":"# Unique values in ScheduledDay\ndf.ScheduledDay.unique()","340572c7":"# Unique values in AppointmentDay\ndf.AppointmentDay.unique()","5a4c1cc5":"# Check columns before drop\nprint('Number of columns before drop :', df.shape[1])\ndf.columns","a525f420":"# Drop the columns from DataFrame\ndf.drop(['PatientId','AppointmentID'], axis=1, inplace=True)","f9d69215":"# Check whether the columns are dropped from DataFrame\ndf.columns.all() in ['PatientId', 'AppointmentID']  # should return false","dd7af2aa":"# Columns after drop\nprint('Number of columns after drop :', df.shape[1])\ndf.columns","ce8a8248":"# Renaming column names\ndf.rename(columns = {\n    'No-show' : 'no_show',\n    'Handcap' : 'handicap'\n}, inplace=True);","33b36ecb":"# Check whether the old name is not present\ndf.columns.all() in ['No-show', 'Handcap']  # should return false","483de8e9":"# columns names\ndf.columns","5825aa62":"# Check for the unique data, as we couldn't earlier (Because of naming conventions)\ndf.no_show.unique()","d9c98764":"# Column names\ndf.columns","0f4b6a6e":"# Rename columns names - to lowercase & insert underscore '_' before Day in ScheduledDay & AppointmentDay\ndf.rename(columns = lambda x : (x.split('Day')[0]+'_day').lower() if 'Day' in x else x.lower(), inplace=True)","f6f74041":"# Check whether the names are changed\ndf.columns","872807a5":"# Change datatype from string to timestamp using datetime package\ndf.scheduled_day = df.scheduled_day.apply(lambda x : dt.datetime.strptime(x,\"%Y-%m-%dT%H:%M:%SZ\"))\ndf.appointment_day = df.appointment_day.apply(lambda x : dt.datetime.strptime(x,\"%Y-%m-%dT%H:%M:%SZ\"))","22f91133":"# Check if the datatype is changed\ntype(df.scheduled_day[0]) , df.appointment_day[0]","1d229287":"# list out few lines\ndf.head()","b4edd6c6":"# Unique values in 'handicap' & 'sms_received' before swap\ndf.handicap.unique() , df.sms_received.unique()","42e91091":"# Swap by storing the copy of one column value temporarily\ntemp = df.handicap.copy()\ndf.handicap = df.sms_received\ndf.sms_received = temp","4fd092dd":"# Unique values after swap\ndf.handicap.unique() , df.sms_received.unique()","09c0a5a2":"# Number of samples\ndf.shape[0]","bd9f8abd":"# Counts of each age\ndf.age.value_counts()","3b0fe5d8":"# Number of inaccurate data\nprint('Number of inaccurate data for age[0,-1] :',df.query('age in [0,-1]').count().age)\n\n# Proportion of inaccurate data\nprint('Proportion of inaccurate data for age[0,-1] :',df.query('age in [0,-1]').count().age \/ df.shape[0])","1a38a90f":"# Change value of age in [0,-1] to age.mean\nmean_age = int(df.age.mean())\ndf.age = df.age.apply(lambda x : mean_age if x in [0,-1] else x)","e8723c63":"# The below query should be returned empty after drop\ndf.query('age in [0,-1]')","3b726cc6":"# number of samples after dropping the patient details\ndf.shape[0]","c24763da":"# Check that the column 'age' has no value of 0\/-1\ndf.age.all() in [0,-1]    # should return False","eeb6acbb":"# number of unique values in 'no_show' before change\ndf.no_show.value_counts()","6f981d9c":"# Change value 'No'=1 & 'Yes'=0 of type int\ndf.no_show = df.no_show.apply(lambda x : int(1) if x=='No' else int(0))","047d9210":"# Check the number of unique value after value change\ndf.no_show.value_counts()","9a822cf6":"# Check the datatype\ndf.no_show.dtype","bb005167":"# Difference between scheduled_day & appointment_day\ndf.scheduled_day - df.appointment_day","7fbbab4a":"# Feature creation\ndf['awaiting_days'] = abs(df.scheduled_day - df.appointment_day).dt.days","6d7ba287":"# Check if the feature is created\ndf.tail()","2d9030a7":"# Check the datatype of newly created feature\ntype(df.awaiting_days[0])","22cf0463":"df.to_csv('no_show_cleaned.csv', index=False)","9018bf99":"# Load cleaned data into the DataFrame\ndf = pd.read_csv('no_show_cleaned.csv',\n                 parse_dates=['scheduled_day', 'appointment_day'],\n                 infer_datetime_format=True)","70db804f":"# Diseases formed as an numpy array for further calculation\ndiseases = np.array(['alcoholism','diabetes','hipertension','handicap'])","f0f5a2e1":"# total number of patients appointments\ntotal_count = df.shape[0]\ntotal_count","7939b55f":"# total number of patients didn't show up for appointments\ntotal_noshowup = df.no_show.value_counts()[0]\n\n# total number of patients show up\ntotal_showup = df.no_show.value_counts()[1]","c8973c24":"# Function to calculate number\/proportions of patients having specific disease booked for an appointment\/noShow\/ShowUp\ndef patient_disease_count(df, diseases, case, divide=1):\n    result = []\n    \n    # number of patients having specific disease booked an appointment, divide=1 (default)\n    # proportions of patients having specific disease booked an appointment, when 'divide' is passed from func call\n    if case == 'total_count':\n        for disease in diseases:            \n            result.append(df[disease].value_counts()[1]\/divide)\n    \n    # number of patients didn't show, divide=1 (default)\n    # proportions of patients didn't show, when 'divide' is passed from func call\n    elif case == 'noshow_count':\n        for disease in diseases:\n            result.append(df.query('{}==1 and no_show==0'.format(disease)).shape[0]\/divide)\n            \n    # number of patients show up, divide=1 (default)\n    # proportions of patients show up, when 'divide' is passed from func call\n    else:\n        for disease in diseases:\n            result.append(df.query('{}==1 and no_show==1'.format(disease)).shape[0]\/divide)\n    return result","fe08add9":"# Create a DataFrame to store the values\ndf_dis = pd.DataFrame({\n    'disease' : diseases,\n    'patient_count' : np.array(patient_disease_count(df, diseases, 'total_count')),\n    'patient_proportion' : np.array(patient_disease_count(df, diseases, 'total_count', total_count)),\n    'no_show_count' : np.array(patient_disease_count(df, diseases, 'noshow_count')),\n    'no_show_proportion' : np.array(patient_disease_count(df, diseases, 'noshow_count', total_noshowup)),\n    'show_up_count' : np.array(patient_disease_count(df, diseases, 'show_count')),\n    'show_up_proportion' : np.array(patient_disease_count(df, diseases, 'show_count', total_showup))\n})\ndf_dis","94ab180f":"# Query for those who don't have any disease\nno_dis = df.query('hipertension==0 & diabetes==0 & alcoholism==0 & handicap==0')","7ee980d3":"# No_disease patients - show up & no show (value counts)\nno_dis.no_show.value_counts()","791dbd63":"# Adding the No_disease patient info as a row in df_dis DataFrame\ndf_dis.loc[len(df_dis.index)] = ['no_disease', \n                                 no_dis.shape[0], no_dis.shape[0]\/total_count,\n                                 no_dis.no_show.value_counts()[0], no_dis.no_show.value_counts()[0]\/total_noshowup,\n                                 no_dis.no_show.value_counts()[1], no_dis.no_show.value_counts()[1]\/total_showup]\ndf_dis","c2a6339b":"# set background theme as darkgrid\nsns.set_theme(style=\"darkgrid\")\n\n# set the figure size\nplt.figure(figsize=(20,5))\n\n# Plot the responses for patient counts\nplt.subplot(1,3,1)\nplt.title('Patient count booked for an appointment', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.patient_count, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.patient_count, palette=\"rocket\")\n\n# Plot the responses for show up count\nplt.subplot(1,3,2)\nplt.title('Show-Up count', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.show_up_count, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.show_up_count, palette=\"rocket\")\n\n# Plot the responses for no-show up count\nplt.subplot(1,3,3)\nplt.title('No Show-Up count', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.no_show_count, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.no_show_count, palette=\"rocket\");","1fd6b3b6":"# set the figure size\nplt.figure(figsize=(20,5))\n\n# Plot the responses for patient counts proportions\nplt.subplot(1,3,1)\nplt.title('Patient proportion booked for an appointment', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.patient_proportion, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.patient_proportion, palette=\"rocket\");\n\n# Plot the responses for show up proportions\nplt.subplot(1,3,2)\nplt.title('Show-Up proportions', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.show_up_proportion, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.show_up_proportion, palette=\"rocket\");\n\n# Plot the responses for no-show up count\nplt.subplot(1,3,3)\nplt.title('No Show-Up proportions', fontsize=14)\nsns.lineplot(x=df_dis.disease, y=df_dis.no_show_proportion, color='black')\nsns.barplot(x=df_dis.disease, y=df_dis.no_show_proportion, palette=\"rocket\");","464bebf2":"# Group the dataset, calculate propotion & load into dataframe\nsms_propor = pd.DataFrame((df.groupby(['sms_received','no_show']).size() \/ df.groupby('sms_received').size()).unstack(level=[1]))\nsms_propor","3e47e97b":"# Set the common column name as status & rename each column name\nsms_propor.columns.name = 'status'\nsms_propor.rename(columns={\n    sms_propor.columns[0] :'no_show',\n    sms_propor.columns[1] :'show_up'\n},inplace=True)\nsms_propor","ebe4bea2":"# Plot the response\nsms_propor.plot(kind='bar', color=['pink','green'], figsize=(10,6))\nplt.title('Proportions of Status of the appointments corresponding to Number of SMS received', fontsize=16)\nplt.ylim(0.1,1.0)\nplt.xlabel('SMS received')\nplt.ylabel('Status Proportion');","dc0fc933":"# Heatmap visualisation\nplt.figure(figsize=(9,5))\nsns.heatmap(sms_propor, annot=True, linewidths=.4)\nplt.title('HeatMap for Proportions of Status corresponding to Number of SMS received', fontsize=14);","84a9f8be":"# Proportion of no-show & show up by Gender\ngen = (df.groupby(['gender','no_show']).size() \/ df.groupby('gender').size()).reset_index()\n\n# Column names changing\ngen.columns = ['gender', 'status', 'proportion']\n\n# Converting 0 & 1 to corresponding status value\ngen.status = gen.status.apply(lambda x : 'no_show' if x==0 else 'show_up')\ngen","d6e504ee":"# Plot the responses using pointplot\nplt.figure(figsize=(10,5))\nsns.pointplot(data=gen, x='gender', y='proportion',hue='status', join=False, markers=\"d\", palatte='dark')\nplt.title('Proportion of show up & No-show by Gender', fontsize=14)\nplt.xlabel('Gender')\nplt.ylabel('Proportion of No Show Up & Show Up');","b8fa8bf3":"# Proportion of no-show & show up by scholarship\nscho = (df.groupby(['scholarship','no_show']).size() \/ df.groupby('scholarship').size()).reset_index()\n\n# Column names changing\nscho.columns = ['scholarship', 'status', 'proportion']\n\n# Converting 0 & 1 to corresponding status value\nscho.status = scho.status.apply(lambda x : 'no_show' if x==0 else 'show_up')\nscho.scholarship = scho.scholarship.apply(lambda x : 'No' if x==0 else 'Yes')\n\nscho","ea5273c0":"# Plot the responses using pointplot\nplt.figure(figsize=(10,5))\nsns.pointplot(data=scho, x='scholarship', y='proportion',hue='status', join=False, markers=\"d\", palatte='dark')\nplt.title('Proportion of show up & No-show by scholarship', fontsize=14)\nplt.xlabel('Scholarship')\nplt.ylabel('Proportion of No Show Up & Show Up');","e5d36985":"df.age.describe()","30f20e1f":"# categorize age\nbins = np.array([ 1, 15, 25, 65, 116])\ndf['age_category'] = pd.cut(df.age, bins=bins, labels=['children', 'youth', 'adult', 'senior'], right=False)","c62f70cf":"# Proportion calculation\nage_cat = (df.groupby(['age_category','gender', 'no_show']).size()\/df.groupby(['age_category','gender']).size()).reset_index()\n\n# Column names changing\nage_cat.columns = ['age_category', 'gender', 'status', 'proportion']\n\n# Converting 0 & 1 to corresponding status value\nage_cat.status = age_cat.status.apply(lambda x : 'no_show' if x==0 else 'show_up')\nage_cat","1492a1ef":"# Plot the responses using pointplot\nplt.figure(figsize=(10,5))\nsns.pointplot(data=age_cat, x='age_category', y='proportion',hue='status', markers=\"d\", palatte='dark')\nplt.title('Proportion of show up & No-show by Age Category', fontsize=14)\nplt.ylim(0.1, 1.0)\nplt.ylabel('Proportion of No Show-Up & Show-Up')\nplt.xlabel('Age Category');","02af7603":"# Plot with gender & age group details\nplt.figure(figsize=(10,7))\nsns.scatterplot(x=\"age_category\", y=\"proportion\",\n                hue=\"gender\", data=age_cat)\nplt.title('Proportion of show up by Age Category and Gender', fontsize=14)\nplt.ylim(0.7, 0.9)\nplt.ylabel('Proportion of Show-Up')\nplt.xlabel('Age Category');","833bfb19":"# Group by age\nage = (df.groupby(['age','gender','no_show']).size()\/df.groupby(['age','gender']).size()).reset_index()\n\n# Column names changing\nage.columns = ['age', 'gender', 'status', 'proportion']\n\n# Converting 0 & 1 to corresponding status value\nage.status = age.status.apply(lambda x : 'no_show' if x==0 else 'show_up')\nage","6fd507ba":"# Plot by Age and Gender\nplt.figure(figsize=(10,7))\n\n# Get current axes\nax = plt.gca()\nmale = sns.scatterplot(x=\"age\", y=\"proportion\",\n                hue=\"status\", palette=['orange','green'],\n                data=age.query('gender==\"M\"'), ax=ax)\n\nplt.ylabel('Proportion of No Show-Up & Show-Up')\nplt.xlabel('Age')\n\n# Create a twin axis - only use it  for the legend\nax2 = ax.twinx()\nfemale = sns.scatterplot(x=\"age\", y=\"proportion\",\n                hue=\"status\", palette=['red','blue'],\n                data=age.query('gender==\"F\"'), ax=ax2)\n\n# Remove the twin y-axis\nax2.get_yaxis().set_visible(False)\n\n# add both legends\nax.legend(loc='center left', bbox_to_anchor=(1, 0.4), title=\"Male\")\nax2.legend(loc='center left', bbox_to_anchor=(1, 0.6), title=\"Female\")\n\nplt.title('Proportion of show up & No-show by Age and Gender', fontsize=14)\nplt.ylim(0.0, 1.1);","50d5111c":"df.awaiting_days.describe()","2c38e681":"# Create bins from describe\nbins = df.awaiting_days.describe()[['min', '25%', '50%', '75%', 'max']].values\nbins[1] = 0.1   # because the 25% quantile is also 0.0 days, need to set to small number so that the cut works\n\n# Create column\ndf['awaiting_days_category'] = pd.cut(df.awaiting_days, bins=bins, labels=['no_gap', 'short', 'medium', 'long'], right=False)","e308c5e0":"# calculate the proportion of status of the appointment for each gap\ndays = (df.groupby(['awaiting_days_category','no_show']).size()\/df.groupby(['awaiting_days_category']).size()).reset_index()\n\n# Column names changing\ndays.columns = ['awaiting_days_category', 'status', 'proportion']\n\n# Converting 0 & 1 to corresponding status value\ndays.status = days.status.apply(lambda x : 'no_show' if x==0 else 'show_up')\ndays","e4c65e06":"# Plot the responses using pointplot\nplt.figure(figsize=(10,5))\nsns.pointplot(data=days, x='awaiting_days_category', y='proportion',hue='status', markers=\"d\")\nplt.title('Proportion of Show-Up & No Show-Up by Gap Categorization', fontsize=14);\nplt.ylim(0.0, 1.0)\nplt.ylabel('Proportion of No Show-Up & Show-Up')\nplt.xlabel('Awaiting Gap');","d883f2a5":"# create new column\ndf['appointment_weekday'] = df.appointment_day.dt.dayofweek\n\n# print out few lines\ndf[['appointment_day', 'appointment_weekday']].head()","46f22059":"# calculate the proportion of status of the appointment for each weekday\nweek_day = (df.groupby(['no_show','appointment_weekday']).size()\/df.groupby(['appointment_weekday']).size())\nweek_day","5cc4ad50":"# Plot the response\nplt.figure(figsize=(8,5))\nweek_day[0].plot(kind='bar', color='red', alpha=0.4)\nplt.title('No Show Rate by Day', fontsize=14)\n\n# As we have week day value 0-5\nlabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\nplt.xticks(ticks=range(6), labels=labels, rotation=0)\nplt.ylim(0.15, 0.24)\nplt.ylabel('Proportion of No Show-Up')\nplt.xlabel('Day');","49fa7543":"> - Further Visualisation using heat map","a4d1b9be":">**Note :** As we can see the result in previous step as,\n    > - Some results are positive, some are negative\n    > - So, create a column <i>'awaiting_days'<\/i>, which is the result of absolute difference between scheduled_day & appointment_day","0fddc4b1":"#### Test :","0ef95b97":"> We can classify the age groups as,\n    > - **children :** 1-14 years\n    > - **youth :** 15-24 years\n    > - **adult :** 25-64 years\n    > - **seniors :** above 65 years","b78ae660":"**Store the cleaned data in new file,**","abb4fc61":"**<i>Reference websites used in addition to course material,<\/i>**\n<ul>\n    <li><a>https:\/\/www.kaggle.com\/joniarroba\/noshowappointments<\/a><\/li>\n    <li><a>https:\/\/pandas.pydata.org<\/a><\/li>\n    <li><a>https:\/\/numpy.org\/doc\/stable\/contents.html<\/a><\/li>\n    <li><a>https:\/\/stackoverflow.com<\/a><\/li>\n    <li><a>https:\/\/github.com<\/a><\/li>\n    <li><a>https:\/\/seaborn.pydata.org\/index.html<\/a><\/li>\n<\/ul>","8a75fe84":"<a id='factors'><\/a>\n**So, What factors are important for us to know in order to predict if a patient will show up for their scheduled appointment?**\n> **Tentatively,**\n> - Awaiting days\n> - Week Day\n> - Age Group\n> - Type of disease\n> - No.of SMS\n> - Scholarship","c52857eb":"> - In adult & seniors, **Males** have **Show-Up** rate slightly higher than Females\n> - While in youth, **Males** have slightly lower **Show-Up** rate than Females","bbb00050":"#### Test :","d3a568a9":"#### Test :","e578ffeb":"> **conclusion :**\n> - We can see that patient's having Scholarship tends to have **higher** No Show-up rate","2f6bbdbd":"> - Let's plot the counts of patients for each disease and no disease\n> - show up & no show counts","0219844c":"<a id='wrangling'><\/a>\n## Data Wrangling","a6f07e25":"> **Conclusion :**\n> - We can see that proportion to No show-up rate decreases from Monday to Thursday and again starts increasing, and reach its peak on **Saturday**\n> - **Mid-week (Thursday)** is having lowest No show-up rate\n> - This may be because of the **higher workload** on initial & end of the week, lower workload in mid-week","82aa948d":"#### Test :","bebbde21":"### Issue 5\n#### Define :\n    Swap the values among 'handicap' & 'sms_received' columns\n#### Clean :","5a06740f":"<a id='intro'><\/a>\n## Introduction\n\nIn this project, I have analysed \"No show appointments\" dataset, which is available on Kaggle. This dataset collects information from 100k medical appointments in Brazil. \n\nThe dataset includes,\n- Patient details - Patient ID, Gender, Age, Neighbourhood, Scholarship, Whether the patient has Hipertension, Diabetes and Whether the patient is Alcoholic and Handicap \n- Appointment details - Appointment ID, Appointment Scheduled Day, Appointment Day, SMS_received and No-show (whether the patient showed up or not)       \n\n**Note**: Findings are <i><b>tentative<\/b><\/i> as inferential statistics or machine learning are not used to complete this project\n\n**Questions focused to be answered,**\n<ul>\n<li><a href=\"#disease\">Patients with which disease schedules appoinments and doesn't shows up the most?<\/a><\/li>\n<li><a href=\"#sms\">How does the number of SMS received affects the show-up for scheduled appoinments?<\/a><\/li>\n<li><a href=\"#gender\">How does Gender affects the No Show occurence?<\/a><\/li>\n<li><a href=\"#scholarship\">How does Scholarship affects the No Show occurence?<\/a><\/li>\n<li><a href=\"#age\">How does Age affects the No Show rate?<\/a><\/li>\n<li><a href=\"#gap\">Does the gap between scheduled date and appointment date affect patient's no-show rate?<\/a><\/li>\n<li><a href=\"#week_day\">Does the Day of the week affect patient no-show probability?<\/a><\/li>    \n<li><a href=\"#factors\">What factors are important for us to know in order to predict if a patient will show up for their scheduled appointment?<\/a><\/li>\n<\/ul>","0f549945":"<a id='disease'><\/a>\n### Research Question 1 : Patients with which disease schedules appoinments and doesn't shows up the most?","70770dd4":"### Issue 6\n#### Define :\n    Fill in inaccurate data in 'age' (0,-1) with age mean\n#### Clean :   ","76da246b":"### Test :","7cf4daa8":">**Note :** \n> - Wrong column naming conventions for \"No-show\" column name\n> - 'ScheduledDay' & 'AppointmentDay' is of type <i>string<\/i>\n> - 'Handicap' mispelled as 'Handcap'\n> - Lowercase columns names would be more easier during analysis","f6f7a501":"### Issue 4\n#### Define :\n    Change datatype of 'scheduled_day' & 'appointment_day', from string to Timestamp\n#### Clean :","dd7c5141":">**Note :** Age must be greater than 0\n> - (0,-1) inaccurate data\n> - Considering the Ages (102,115,100) as its proportion is too low and we know some humans live after 100 years old.","4d569992":"<a id='gap'><\/a>\n### Research Question 6 : Does the gap between scheduled date and appointment date affect patient's no-show rate?\n\n> **Process :**\n> - Let's describe the **awaiting_days** and categorize the gap\n> - Create a new column **awaiting_days_category** to store the gap categorizations\n> - Calculate the proportion of status of the appointment for each gap ","e0ea0554":"**Observations based on Assessing the dataset :**\n> **Columns :**\n    > - Unrequired columns, PatientId & AppointmentID\n    > - Wrong column naming conventions for \"No-show\" column name\n    > - 'Handicap' mispelled as 'Handcap'\n    > - Lowercase columns names would be more easier during analysis\n    \n> **Datatype :**\n    > - 'ScheduledDay' & 'AppointmentDay' is of type string, should be changed to DateTime\n    \n> **Data :**\n    > - It is clear that the Handcap & SMS_received column values may have swapped, as per the dataset definition in [Kaggle](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments)\n    > - Inaccurate data in Age (0,-1)\n    > - Because of wrong column name conventions, couldn't assess the unique values in 'no_show'. But column says \u2018No\u2019 if the patient showed up to their appointment, and \u2018Yes\u2019 if they did not show up, should be changed as, 'No'-1 & 'Yes'-0, as it is in encrypted form. Refer [here](https:\/\/s3.amazonaws.com\/video.udacity-data.com\/topher\/2018\/July\/5b57919a_data-set-options\/data-set-options.pdf)","2f076d95":"> **Conclusion :**\n> - **Youth** has the highest No Show-Up rate, as they may have higher immunity\n> - **Seniors** have the highest Show-Up rate, \n> - In adult & seniors, **Males** have **Show-Up** rate slightly higher than Females\n> - While in youth, **Males** have slightly lower **Show-Up** rate than Females\n> - Few patients of age between 95 and 115 have the 100% Show_Up","863379ac":"> **Conclusion :**\n> - As we can see, longer the gap between **scheduled_day** and **appointment_day**, no-show rate is **higher**\n> - The patients seems to Show Up immediately after booking the appointment, as **No Gap** has the highest show-up rate\n> - Even, the no show-up rate of short gap increased significantly compared to no_gap. This may be because patients have changed their mind \/ got cured","8522a0eb":"> **Note :** \nCalculating the proportion of Age (102,115,100) in order to decide whether it is normal","80ec6472":"> - checking the datatype of values which are of object in above step","31eb5b56":"### Issue 2\n#### Define :\n    Change the column name of 'No-show' - 'no_show' (Wrong naming convention) and 'Handcap' - 'handicap'\n#### Clean :","ab3dfa37":"> - **Youth** has the highest No Show-Up rate\n> - **Seniors** have the highest Show-Up rate\n\n> Now, let's plot with Gender details for each Age group","fbbd4b0c":"#### Test : ","d8752233":"### Issue 7\n#### Define :\n    Change the data in 'no_show' column as, 'No'-1 & 'Yes'-0 of integer type\n#### Clean :  ","55e1ec7a":"> **Note :** As the count vary in large amount for show-up and no-show, let us plot the proportions","ffb13433":"<a id='clean'><\/a>\n### Data Cleaning\n\n> **Columns :**\n    > - Drop Unrequired columns, 'PatientId' & 'AppointmentID'\n    > - Change the column name of <i>'No-show' - 'no_show'<\/i> and <i>'Handcap' - 'handicap'<\/i>\n    > - Change columns names to Lowercase & Insert _ before day in ScheduledDay & AppointmentDay\n    \n> **Datatype :**\n    > - Change datatype of 'ScheduledDay' & 'AppointmentDay', from <i>string<\/i> to <i>DateTime<\/i>\n    \n> **Data :**\n    > - Swap the values among 'handicap' & 'sms_received' columns\n    > - Fill in inaccurate data in 'age' (0,-1) with age mean\n    > - Change the value in 'no_show' column 'No'-1 & 'Yes'-0 of integer type, as it is in encrypted form. Refer [here](https:\/\/s3.amazonaws.com\/video.udacity-data.com\/topher\/2018\/July\/5b57919a_data-set-options\/data-set-options.pdf)\n    \n> **Feature Engineering :**\n    > - Create a column named 'awaiting_days' for easier analysis, which is the difference between scheduled & appointment day","81029568":">**Further Process :**\n> - The same process followed for those who didn't have any disease, but booked for an appointment ","20a2d681":"<a id='conclusions'><\/a>\n## Conclusions\n\n> **Note**: Findings are <i><b>tentative<\/b><\/i>. Not verified by the principles of statistics and machine learning.\n\n> - People with **no diseases** books for an appointment the most, followed by **handicap**\n> - However, **Handicaps** are those who fails to show up for an fixed appointment the most, as handicap is the only one having No Show-Up rate greater than the Show-Up rate. \n\n> - **1 SMS** has increased likelihood of patient showing up. However, the **increase** in number of SMS **decreased** the likelihood of patient showing up.\n\n> - 'Gender' **doesn't influence** the No Show occurence, as both no-show & show-up rate for 'Female' & 'Male' are almost **equal**\n\n> - Patient's having Scholarship tends to have **higher** No Show-up rate\n\n> - **Youth** has the highest No Show-Up rate, while **Seniors** have the highest Show-Up rate\n> - In **adult & seniors**, Males have Show-Up rate **slightly higher** than Females, while in **youth**, Males have slightly **lower** Show-Up rate than Females\n> - Few patients of age between 95 and 115 have the 100% Show_Up\n\n> - **Longer** the gap between **scheduled_day** and **appointment_day**, **higher** the no-show rate. **No Gap** has the highest show-up rate. Even, the no show-up rate of short gap increased significantly compared to no_gap.\n\n> - No show-up rate decreases from Monday to Thursday and again starts increasing, and reach its peak on **Saturday**. **Mid-week (Thursday)** is having lowest No show-up rate","45c60964":"<a id='scholarship'><\/a>\n### Research Question 4  : How does Scholarship affects the No Show occurence?\n\n> **Process :**\n> - Group by **scholarship** & **no_show** \n> - Calculate proportion of no_show","2f78046c":"# Project: Investigate a Dataset (No Show Medical Appointments in Brazil)\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li>\n    <a href=\"#wrangling\">Data Wrangling<\/a>\n    <ul>\n        <li><a href=\"#gather\">Data Gathering<\/a><\/li>\n        <li><a href=\"#assess\">Data Assessing<\/a><\/li>\n        <li><a href=\"#clean\">Data Cleaning<\/a><\/li>\n    <\/ul>\n<\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","7416906b":"**Checking the unique values in each column,**\n> - As per the dataset definition in [Kaggle](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments), Handcap must have values either True\/False. But in the assessed DataFrame, 5 unique values are found.\n> - And also, SMS_received can have more than 1 unique values.\n> - So, checking the unique values of each column for data consistency\n> - **Avoided columns :** PatientId & AppointmentID as it will be not used in analysis","6b569606":"### Issue 3\n#### Define :\n- Change columns names to Lowercase\n- Insert _ before day in ScheduledDay & AppointmentDay\n\n#### Clean :    ","b0a7e77a":"> **conclusion :**\n> - People with **no diseases** books for an appointment the most, has greater proportions in no-show up among others, followed by **handicap**\n> - However, **Handicaps** are those who fails to show up for an fixed appointment the most, as proportions of all disease and no-disease for show-up is more than no-show, except handicap. \n> - And also, there is a drastic difference between no-show & show-up proportion for 'handicap', where no-show occurence is greater","c6b61be7":"> **conclusion :**\n> - We can see that **1 SMS** has increased likelihood of patient showing up by **0.2%** (0.82) compared to No SMS (0.797) in proportion.\n> - However, the increase in number of SMS decreased the likelihood of patient showing up. Because they may have already decided not to show up","cd9b713f":"<a id='eda'><\/a>\n## Exploratory Data Analysis\n\n\n","f01d8700":"> Value of weekday corresponds as,\n> - 0 - Monday\n> - 1 - Tuesday\n> - 2 - Wednesday\n> - 3 - Thursday\n> - 4 - Friday\n> - 5 - Saturday\n> - 6 - Sunday","b4342303":"#### Test :","79eaeb4e":"<a id='gender'><\/a>\n### Research Question 3  : How does Gender affects the No Show occurence?\n\n> **Process :**\n> - Group by **gender** & **no_show** \n> - Calculate proportion of no_show","c03ee749":"<a id='age'><\/a>\n### Research Question 5  : How does Age affects the No Show rate?\n\n> **Process :**\n> - Categorize age into different groups\n> - Calculate the proportion for each age category","d2feaf86":"<a id='assess'><\/a>\n### Data Assessing\n> - Number of samples and features\n> - Perform operations to inspect data types\n> - Look for instances of missing or possibly errant data\n> - Look for instances of duplicates\n> - Perform operations to inspect number of uniques values in each column\n> - Perform operations to inspect uniques values in each column","e29ccc8a":"### Feature Engineering :\n#### Define :\n    Create a column named 'awaiting_days' for easier analysis, which is the difference between scheduled & appointment day\n#### Create :    ","13b9d238":"<a id='week_day'><\/a>\n### Research Question 7 : Does the Day of the week affect patient's no-show probability?\n\n> **Process :**\n> - Let's create a new column **appointment_weekday** to store the day of the week of **appointment_day**\n> - Calculate the proportion of status of the appointment for each weekday","6007228e":"> **conclusion :**\n> - We can see that Proportions of 'Female' & 'Male' for both no-show & show-up are almost **equal**\n> - It is clear that 'Gender' **doesn't influence** the No Show  occurence","169a1af2":">**Note :** \n> - Age 0 has sample count of 3539 out of 110527, which has a proportion of 0.0320\n> - As the proportion is low, fill in with mean age","1f806e03":">**Note :** \n> It is clear that the Handcap & SMS_received column values may have swapped, as per the dataset definition in [Kaggle](https:\/\/www.kaggle.com\/joniarroba\/noshowappointments)","c09abfc9":"<a id='gather'><\/a>\n### Data Gathering\n> - Download the [csv file (\"no_show_appointments\")](https:\/\/d17h27t6h515a5.cloudfront.net\/topher\/2017\/October\/59dd2e9a_noshowappointments-kagglev2-may-2016\/noshowappointments-kagglev2-may-2016.csv) from Kaggle\n> - Load the downloaded file into DataFrame","02704c1c":"> - Calculating the above said process by calling the function written above, and storing the values as a DataFrame","6280d79d":">**Process :**\n> - Now that, we have value of total number of patients, total no show & total show up\n> - We have to calculate number of patients, no show & show up counts specific for each disease\n> - Also, those who don't have any disease\n> - As, the count may vary rapidly, we have to calculate proportions for the same set of feature conditions","310dd769":"> - Calculate number and proportion for those who don't have any disease \n> - Add it to the DataFrame","3fd9e5fd":"> Since the min and the 25% quantile are both zero, we'll then make our lowest category to be no_gap. For the rest, we'll categorize the schedule gap as either short, medium, or long gap. The categorizations will then be as follows:\n\n> - no_gap: 0 days gap\n> - short: 1 to 3 days gap\n> - medium: 4 to 14 days gap\n> - long : 15 to 178 days gap\n","4d0f61a6":"#### Test :","ee88a824":"<a id='sms'><\/a>\n### Research Question 2  : How does the number of SMS received affects the show-up for scheduled appoinments?\n\n> **Process :**\n> - Let's group the dataset by **sms_received** & **no_show**\n> - Calculate proportions and load into a DataFrame","df1b6d50":"### Issue 1\n#### Define : \n    Drop unrequired columns, 'PatientId' & 'AppointmentID', as it will be not used in analysis\n#### Clean :"}}