{"cell_type":{"f766d07b":"code","5a4aae40":"code","d75a320f":"code","6a976e57":"code","1cb160f0":"code","66c58fe3":"code","dcf2fa16":"code","47204537":"code","77d53f92":"code","e54f9864":"code","7bc46ce4":"code","a744ad17":"code","2ab5bf8b":"code","017c0476":"code","3ba22312":"code","a6346e46":"code","875fd417":"code","9bc3fd87":"code","6202af0e":"markdown"},"source":{"f766d07b":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.neighbors import KNeighborsClassifier","5a4aae40":"dataset = pd.read_csv(\"..\/input\/blood-sugar\/Blood Sugar.csv\")","d75a320f":"dataset.head()","6a976e57":"dataset.info()","1cb160f0":"zero_not_accepted = ['Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'Insulin']","66c58fe3":"for column in zero_not_accepted:\n    dataset[column] = dataset[column].replace(0, np.NaN)\n    mean = int(dataset[column].mean(skipna=True))\n    dataset[column] = dataset[column].replace(np.NaN, mean)","dcf2fa16":"# split dataset\nX = dataset.iloc[:, 0:8]\ny = dataset.iloc[:, 8]\nsc_X = StandardScaler()\nX = sc_X.fit_transform(X)\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\n","47204537":"print(\"x_train\",len(X_train))\nprint(\"y_train\",len(y_train))","77d53f92":"params = {\n    'n_neighbors': list(range(1, 21)),\n    'metric': ['euclidean', 'manhattan'],\n    'weights': ['uniform', 'distance'],\n}\ngs = GridSearchCV(KNeighborsClassifier(), params, cv=10, scoring='accuracy')","e54f9864":"gs.fit(X, y)","7bc46ce4":"gs.best_params_","a744ad17":"classifier = KNeighborsClassifier(n_neighbors=12, metric=\"manhattan\", weights=\"uniform\")","2ab5bf8b":"classifier.fit(X_train, y_train)","017c0476":"classifier.score(X_train, y_train)","3ba22312":"classifier.score(X_test, y_test)","a6346e46":"y_pred = classifier.predict(X_test)\ny_pred","875fd417":"print(accuracy_score(y_test, y_pred))","9bc3fd87":"cm = confusion_matrix(y_test, y_pred)\nprint (cm)","6202af0e":"# KNN - Predict whether a person will have diabetes or not"}}