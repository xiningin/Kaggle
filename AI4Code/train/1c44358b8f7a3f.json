{"cell_type":{"140d87f7":"code","7bd37d10":"code","cccacdc3":"code","3e095853":"code","f06762ae":"code","bda49c15":"code","17dee8e9":"code","12c716d5":"code","14031c8e":"code","8c002c1e":"code","ca64974e":"code","bf0c7eea":"code","a1beb4d8":"code","12909324":"code","750963a3":"code","65ca2a54":"code","28300040":"code","23e2299b":"code","44684fe2":"code","1e018d10":"code","36ab85a9":"code","76da2c4f":"code","a234e8e9":"code","b4a3e4eb":"code","e07daffb":"code","60f16865":"code","e2e323c2":"code","aa5a4f2e":"code","5b7de5c1":"code","5b6d6efb":"code","42b9f164":"code","cde7d805":"code","39e7859f":"code","ca02a8d5":"markdown","8b7094e6":"markdown","eb00bd84":"markdown","984aecd0":"markdown","6d040a04":"markdown","c4ed05ca":"markdown","6aa9a8fe":"markdown","63a642a5":"markdown","022ae33a":"markdown","6693d063":"markdown","bd8740ec":"markdown","07b96343":"markdown","17d27b20":"markdown","f67ad9ef":"markdown","9890d80c":"markdown"},"source":{"140d87f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7bd37d10":"# Data Preprocessing\nimport pandas as pd \n\n# Data Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load sklearn digits dataset\nfrom sklearn.datasets import load_digits\n\n# import train test split\nfrom sklearn.model_selection import train_test_split\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\n\n# Machine Learning\nfrom sklearn.svm import SVC\n\n# Confusion Matrix and Classification Reports\nfrom sklearn.metrics import confusion_matrix,classification_report\n\n\n# Hyper Parameters Tunnings\nfrom sklearn.model_selection import GridSearchCV","cccacdc3":"import warnings\nwarnings.filterwarnings('ignore')","3e095853":"digits=load_digits() ","f06762ae":"digits.data.shape","bda49c15":"digits.data","17dee8e9":"digits.target","12c716d5":"digits.target_names","14031c8e":"digits.target[21]","8c002c1e":"plt.gray()\nplt.matshow(digits.images[21])\nplt.show()","ca64974e":"for i in range(10):\n    plt.gray()\n    plt.matshow(digits.images[i])\n    plt.show()","bf0c7eea":"df=pd.DataFrame(digits.data,columns=digits.feature_names)\ndf['target']=digits.target","a1beb4d8":"df.head() ","12909324":"df.info()","750963a3":"sns.pairplot(df.iloc[:,55:],hue='target',palette='deep')","65ca2a54":"colors = ['red','blue','green','yellow','black','skyblue','pink','orange','lime','#eb9605']\nmarkers = ['p','D',',','v','^','<','h','d','H','+']\nfor i,v in enumerate(df.drop(['pixel_7_2'],axis=1).columns[40:63]):\n    sns.set (style=\"darkgrid\")\n    g=sns.jointplot(\n        x=v,\n        y='pixel_7_2',\n        data=df,\n        hue='target',\n        color=colors[df.target[i]],\n        marker=markers[df.target[i]],\n        s=100, \n        palette='husl'\n    )\n    g.plot_joint(sns.kdeplot, color=\"r\", zorder=0, levels=6)\n    g.plot_marginals(sns.violinplot,palette='hls', clip_on=False)","28300040":"counts=df.target.value_counts()\ncounts","23e2299b":"sns.set(style='darkgrid')\nsns.countplot(x=df['target'],saturation=1,palette='husl')\nplt.title('CountPlot')\nplt.show()","44684fe2":"x=df\ny=digits.target","1e018d10":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.2,random_state=42)","36ab85a9":"xtrain.shape, xtest.shape , ytrain.shape, ytest.shape","76da2c4f":"svm=SVC()","a234e8e9":"svm.fit(xtrain,ytrain)\nsvm.score(xtest,ytest)","b4a3e4eb":"acc=[]\nfor i in range(1,50):\n    xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.2,random_state=i)\n    svm=SVC()\n    svm.fit(xtrain,ytrain)\n    print(f\"value={i} and accuracy={svm.score(xtest,ytest)}\")\n    acc.append(svm.score(xtest,ytest))\nmaxAcc=max(acc)\nrandom_state=acc.index(maxAcc)+1\nprint(\"=============================================================\")\nprint(\"=============================================================\")\nprint(f\"Best value={random_state} and Best accuracy={maxAcc}\")\nprint(\"=============================================================\")\nprint(\"=============================================================\")","e07daffb":"xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.33,random_state=random_state)","60f16865":"svm=SVC()\nsvm.fit(xtrain,ytrain)\nsvm.score(xtest,ytest)","e2e323c2":"pred=svm.predict(xtest)\npred[:20]","aa5a4f2e":"ytest[:20]","5b7de5c1":"print (\"Confusion matrix\")\nprint(confusion_matrix(ytest,pred))","5b6d6efb":"print(\"EVALUATION ON TESTING DATA\")\nprint(classification_report(ytest,pred))","42b9f164":"C= [0.1, 1, 10, 100, 1000]\ngamma= [1, 0.1, 0.01, 0.001, 0.0001]\nkernel= ['rbf']\n# defining parameter range\nparam_grid = {\n    'C':C,\n    'gamma':gamma,\n    'kernel':kernel\n }\n\ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n\n# fitting the model for grid search\ngrid.fit(xtrain, ytrain)","cde7d805":"# best parameter\nprint(grid.best_params_)\n\n# best estimator\nprint(grid.best_estimator_)\n\n# best score\nprint(grid.best_score_)\n\n\npred = grid.predict(xtest)\n\n# print classification report\nprint(confusion_matrix(ytest, pred))","39e7859f":"# print classification report\nprint(classification_report(ytest, pred))","ca02a8d5":"### Finding best values of random state for train_test_split","8b7094e6":"## Importing Important Libraries","eb00bd84":"# Task:=>","984aecd0":"### Convert datasets into Pandas DataFrame","6d040a04":"# SK-Learn Digits Datasets With SVM","c4ed05ca":"## Dividing Data into x and y & Split into train and test data","6aa9a8fe":"# Mohit Anand Srivastava\n# GO_STP_3020","63a642a5":"## Data Preprocessing","022ae33a":"## Creating Model for SVC() and train the model","6693d063":"## Hyper Parameters Tuning","bd8740ec":"### Avoid warnings","07b96343":"## Data Visualization","17d27b20":"Train SVM classifier using sklearn digits dataset (i.e. from sklearn.datasets import load_digits) and then,\n1. Measure accuracy of your model using different kernels such as rbf and linear.\n2. Tune your model further using regularization and gamma parameters and try to come up with highest accurancy score\n3. Use 80% of samples as training data size\n\n\nTask Link:-[GoEduHub Machine Learning With Python Summer Training](https:\/\/www.goeduhub.com\/11639\/support-vector-machine-classification-python-sklearn-dataset)","f67ad9ef":"## Load Datasets and collecting information from it","9890d80c":"## Confusion Matrix and Classification Report"}}