{"cell_type":{"67df448e":"code","e8f514e4":"code","7f1ad38c":"code","8b8113e2":"code","a188fbf1":"code","cb357710":"code","65f2129c":"code","15244286":"code","dfd36033":"code","65ff0f0e":"code","f23c55cd":"code","3e631b50":"code","6308b648":"code","9dc0c54e":"code","d34e3865":"code","a1a70237":"code","80af7f7c":"code","0b2cbe53":"code","fa209265":"code","f5b12d76":"code","00e9ae3f":"code","ef5ef4b9":"markdown","a25c991e":"markdown","31a03731":"markdown","582d2eea":"markdown"},"source":{"67df448e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.optimize import curve_fit\nfrom sklearn.linear_model import LinearRegression\nfrom datetime import datetime\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e8f514e4":"test = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv\")\nForecastId = pd.DataFrame({'ForecastId': submission['ForecastId']})\nForecastId.head(5)","7f1ad38c":"df = pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf.head(5)","8b8113e2":"df['Country_Region'].nunique()","a188fbf1":"region_list = df[['Province_State', 'Country_Region']].drop_duplicates()\nregion_list","cb357710":"def select_data(train):\n    confirm = train[['Date','ConfirmedCases']]\n    confirm = confirm.rename(columns={'ConfirmedCases': 'y_data'})\n    fatalty = train[['Date','Fatalities']]\n    fatalty = fatalty.rename(columns={'Fatalities': 'y_data'})\n    confirm.reset_index(drop=True, inplace=True)\n    confirm.index = confirm.index + 1\n    fatalty.reset_index(drop=True, inplace=True)\n    fatalty.index = fatalty.index + 1\n    return confirm, fatalty","65f2129c":"def exponential_growth_model(t, k, P0):\n    t=t\/365\n    return P0*np.exp(k*t)","15244286":"def logistic_growth_model(t, K, P0, r):\n    # t:time(yr)   t0:initial time    P0:initial_value    K:capacity  r:increase_rate\n    t0=0\n    t=t\/365\n    exp_value=np.exp(r*(t-t0))\n    return (K*exp_value*P0)\/(K+(exp_value-1)*P0)","dfd36033":"def linear_growth_model(t, k, P0):\n    t=t\/365\n    return k*t+P0","65ff0f0e":"def RMSLE(predict, actual):\n    rmsle = np.sqrt(np.mean(np.log((predict+1)\/(actual+1))))\n    return rmsle","f23c55cd":"def cal_date_interval(d_start, d_end):\n    date_format = \"%Y-%m-%d\"\n    a = datetime.strptime(d_start, date_format)\n    b = datetime.strptime(d_end, date_format)\n    delta = b - a\n    return delta.days","3e631b50":"def fit_pred(train):\n    t_train = np.linspace(1, len(train['Date']), num=len(train['Date']))\n    popt_exp, pcov_exp = curve_fit(exponential_growth_model, t_train, train['y_data'])\n    popt_log, pcov_log = curve_fit(logistic_growth_model, t_train, train['y_data'], maxfev=2500)\n    \n#     Using RMSLE score to decide choose Exponential or Logistic growth model\n    t_start = train[train['Date'].isin(['2020-04-02'])].index.tolist()[0]\n    t_public_end = t_start + 12\n    duration = 13\n    t_public_pred = np.linspace(t_start, t_public_end, duration)\n    y_actual = train['y_data'][train['Date']>='2020-04-02']\n    \n    y_exp_pred = exponential_growth_model(t_public_pred, *popt_exp)\n    y_log_pred = logistic_growth_model(t_public_pred, *popt_log)\n    eval_exp = RMSLE(y_exp_pred, y_actual)\n    eval_log = RMSLE(y_log_pred, y_actual)\n\n#     To get final prediction\n    t_end = t_start + 42\n    t_pred = np.linspace(t_start, t_end, 43)\n    if eval_exp < eval_log:\n        y_pred = exponential_growth_model(t_pred, *popt_exp)\n        eval_public = eval_exp\n    else:\n        y_pred = logistic_growth_model(t_pred, *popt_log)\n        eval_public = eval_log\n        \n#     plot(train['y_data'], logistic_growth_modellogistic_model(np.linspace(1, 107, 107), *popt))\n    return y_pred, eval_public","6308b648":"def unqualify_data(train):\n    '''\n    When report errors \n    RuntimeError: Optimal parameters not found: Number of calls to function has reached maxfev = 2500.\n    Using Linear Regression or Exponential to predict unqualified data\n    '''\n    \n    if (train['y_data'][train.Date == '2020-04-02'].values > 0)[0] == True:\n        train = train[train['y_data'] > 0]\n    else:\n        train = train[train['Date']>='2020-04-02']\n    train.reset_index(drop=True, inplace=True)\n    train.index = train.index + 1\n\n    t_train = np.linspace(1, len(train['Date']), num=len(train['Date']))\n    popt_exp, pcov_exp = curve_fit(exponential_growth_model, t_train, train['y_data'])\n    popt_lin, pcov_lin = curve_fit(linear_growth_model, t_train, train['y_data'])\n    \n#     Using RMSLE score to decide choose Exponential or Linear growth model\n    t_start = train[train['Date'].isin(['2020-04-02'])].index.tolist()[0]\n    t_public_end = train.index.values[-1]\n    duration = t_public_end - t_start + 1\n    t_public_pred = np.linspace(t_start, t_public_end, duration)\n    y_actual = train['y_data'][train['Date']>='2020-04-02']\n    \n    y_exp_pred = exponential_growth_model(t_public_pred, *popt_exp)\n    y_lin_pred = linear_growth_model(t_public_pred, *popt_lin)\n    eval_exp = RMSLE(y_exp_pred, y_actual)\n    eval_lin = RMSLE(y_lin_pred, y_actual)\n\n#     To get final prediction\n    interval = cal_date_interval('2020-04-02', '2020-05-14')\n    t_pred = np.linspace(t_start, t_start+interval, interval+1)\n    if eval_exp < eval_lin:\n        y_pred = exponential_growth_model(t_pred, *popt_exp)\n        eval_public = eval_exp\n    else:\n        y_pred = linear_growth_model(t_pred, *popt_lin)\n        eval_public = eval_lin\n    return y_pred, eval_public   ","9dc0c54e":"def plot(actual, pred):\n    plt.plot(np.linspace(1, len(actual), len(actual)), actual)\n    plt.plot(np.linspace(1, len(pred), len(pred)), pred)\n    plt.show()","d34e3865":"c_pred_global = pd.DataFrame(columns=None)\nf_pred_global = pd.DataFrame(columns=None)\nc_eval = pd.DataFrame(columns=None)\nf_eval = pd.DataFrame(columns=None)\n\nfor i in range(len(region_list)):\n#     train = df[np.logical_and(np.logical_or(pd.isnull(df['Province_State']), df['Province_State']==region_list.iloc[i][0]), \n#                           df['Country_Region']==region_list.iloc[i][1])]\n    train = df.iloc[84*i:84*(i+1), :]\n    confirm, fatalty = select_data(train)\n    \n    try: \n        confirm_pred, confirm_eval = fit_pred(confirm)\n    except:\n        confirm_pred, confirm_eval = unqualify_data(confirm)\n#     c_eval = c_eval.append(pd.DataFrame([confirm_eval],columns={'RMSLE'}, index=i))\n    c_eval = c_eval.append(pd.DataFrame([confirm_eval],columns={'RMSLE'}))\n    c_pred_global = c_pred_global.append(pd.DataFrame(confirm_pred), ignore_index=True)\n\n    try: \n        fatalty_pred, fatalty_eval = fit_pred(fatalty)\n    except:\n        fatalty_pred, fatalty_eval = unqualify_data(fatalty)\n#     f_eval = f_eval.append(pd.DataFrame([fatalty_eval],columns={'RMSLE'}, index=i))\n    f_eval = f_eval.append(pd.DataFrame([fatalty_eval],columns={'RMSLE'}))\n    f_pred_global = f_pred_global.append(pd.DataFrame(fatalty_pred), ignore_index=True)","a1a70237":"# Evalutaion of public data\nc_eval.sort_values(by=['RMSLE'])","80af7f7c":"f_eval.sort_values(by=['RMSLE'])","0b2cbe53":"c_pred_global = c_pred_global.rename(columns={0:'ConfirmedCases'})\nc_pred_global","fa209265":"f_pred_global = f_pred_global.rename(columns={0:'Fatalities'})\nf_pred_global","f5b12d76":"# when axis=1, concat horizontaly\noutput = pd.concat([c_pred_global, f_pred_global], axis=1) \noutput = pd.concat([ForecastId, output], axis=1) \noutput","00e9ae3f":"output.to_csv('submission.csv', header=True, index=False) ","ef5ef4b9":"Exponential growth function:  \n<center>$P(t)=P_0e^{kt}$<\/center>","a25c991e":"Logistic growth model:  \n    <center>$P(t)=\\frac{KP_0e^{rt}}{K+P_0(e^{rt}-1)}$<\/center>","31a03731":"root mean squared logarithmic error  \nRMSLE for a single column calculated as:  \n<center>$\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n}(log(p_i+1)-log(a_i+1))^2}$<\/center>","582d2eea":"Linear growth model:  \n<center>$P(t)=kt+P_0$<\/center>\n"}}