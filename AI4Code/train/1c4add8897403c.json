{"cell_type":{"2895850a":"code","6309de09":"code","a908de6b":"code","4837cb88":"code","7ed6924c":"code","c603fc06":"code","ac3af630":"code","79cd9633":"code","c73770be":"code","f4d098d5":"code","342e717e":"code","784cc8fa":"code","a2826c09":"code","bf38a3fe":"code","f71a334d":"code","24796fb2":"code","8b30b2be":"code","2874d3b4":"code","76c4dd9c":"code","cebf4e6f":"code","ff2b1dbd":"code","215dcb0f":"code","1849f63f":"code","5b64ac04":"code","39efcef9":"markdown","c8a5e95c":"markdown","24ae5a7e":"markdown","440b7b98":"markdown","b70f892e":"markdown","03e58084":"markdown","91278d39":"markdown","25e995d5":"markdown","960aa926":"markdown","ef67c41a":"markdown","263db94b":"markdown","5bc5441c":"markdown"},"source":{"2895850a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6309de09":"!pip install \"torch==1.4\" \"torchvision==0.5.0\"","a908de6b":"from fastai.vision import *\nfrom fastai.metrics import error_rate","4837cb88":"bs = 64\n# bs = 16   # uncomment this line if you run out of memory even after clicking Kernel->Restart","7ed6924c":"path = Path(\"..\/input\/10-monkey-species\")\npath","c603fc06":"path.ls()","ac3af630":"(path\/'training\/training').ls()","79cd9633":"data = ImageDataBunch.from_folder(path, train='training', valid='validation', ds_tfms=get_transforms(), bs = bs , size=224).normalize(imagenet_stats)","c73770be":"data.show_batch(rows=3, figsize=(7,6))","f4d098d5":"print(data.classes)\nlen(data.classes),data.c","342e717e":"learn = cnn_learner(data, models.resnet34, metrics=[error_rate,accuracy]);learn.model","784cc8fa":"learn.fit_one_cycle(4)","a2826c09":"learn.model_dir = \"\/kaggle\/working\" # Changing learn model_dir to \/kaggle\/working\nlearn.save('stage-1') #Saving model","bf38a3fe":"interp = ClassificationInterpretation.from_learner(learn)\n\nlosses,idxs = interp.top_losses()\n\nlen(data.valid_ds)==len(losses)==len(idxs)","f71a334d":"interp.plot_top_losses(9, figsize=(15,11))","24796fb2":"interp.plot_confusion_matrix(figsize=(12,12), dpi=60)","8b30b2be":"interp.most_confused(min_val=2)","2874d3b4":"learn.unfreeze()","76c4dd9c":"learn.fit_one_cycle(1)","cebf4e6f":"learn.load('stage-1')","ff2b1dbd":"learn.lr_find()","215dcb0f":"learn.recorder.plot()","1849f63f":"learn.unfreeze()","5b64ac04":"learn.fit_one_cycle(2, max_lr=slice(3e-5,3e-4))","39efcef9":"As you can see that the model is nearly 100% accurate. Let's plot the confusion matrix","c8a5e95c":"### Wow 99.63% accuracy!","24ae5a7e":"Our attempt to fine tune the model didn't work out(Accuracy drops to 96.32%) because by default it trains all layers at same speed; layers representing diagonal lines and color gradients and layers representing exact specifics of my face and we need to change that.\n\nLoading Stage 1 again and finding the learning rate.","440b7b98":"The confusion matrix traced a diagonal, meaning the model correctly recognized most of the characters, even those of the least popular ones (unbalanced classes), with only 20\u201340 images. This was made possible thanks to a technique called transfer learning.\n\nAlso if you see \n```interp.most_confused``` we have only **no** pair of species that got confused min 2 times. This is amazing!!!","b70f892e":"### Loading the Data","03e58084":"### Results","91278d39":"#### Pretty accurate model with ~ 99% accuracy","25e995d5":"### Unfreezing & fine tuning the model\n\nWe follow a two stage process, so when we did 'stage-1' we just fine tuned the extra layers added to our CNN and didn't train the whole model and basically due to that our model will basically never overfit. Now we are going to unfreeze, which basically says \"please train the whole model\".","960aa926":"### Importing Data","ef67c41a":"We will be training the model using CNN on resnet34 model\/architecture","263db94b":"Let's see where the confusion happened between predicted and actual and also plot the confusion matrix.","5bc5441c":"### Training the Model"}}