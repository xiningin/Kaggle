{"cell_type":{"77a58caa":"code","35dc2e9e":"code","c6fe14fd":"code","3d3d7329":"code","d44f014c":"code","c14251dc":"code","a8aefb74":"code","c7193ac4":"code","cafead12":"code","b2ba0faa":"code","c19c6101":"code","fadc2ed3":"code","035cf24d":"code","42e0a7dd":"code","d35280e9":"code","28a47e06":"code","c3dc0cb8":"code","885431ea":"code","6cd54cc6":"code","320478af":"code","7476e65d":"code","c83e4ea1":"code","4d7e2936":"code","081fe139":"code","da081f93":"code","b9822d23":"code","e3f48fb5":"code","dae777b1":"code","83e911f5":"code","46055441":"code","31e9b81c":"code","3ab0ac74":"code","d9ab3711":"code","5ed114ce":"code","92c47829":"code","1efd646a":"code","6eced19c":"code","f2fd3b4f":"code","79172e78":"markdown","cd076230":"markdown"},"source":{"77a58caa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 100) # Setting pandas to display a N number of columns\npd.set_option('display.max_rows', 10) # Setting pandas to display a N number rows\npd.set_option('display.width', 1000) # Setting pandas dataframe display width to N\nfrom scipy import stats # statistical library\nfrom statsmodels.stats.weightstats import ztest # statistical library for hypothesis testing\nimport plotly.graph_objs as go # interactive plotting library\nimport matplotlib.pyplot as plt # plotting library\nimport pandas_profiling # library for automatic EDA\n%pip install autoviz # installing and importing autoviz, another library for automatic data visualization\nfrom autoviz.AutoViz_Class import AutoViz_Class\nfrom IPython.display import display # display from IPython.display\nfrom itertools import cycle # function used for cycling over values\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nprint(\"\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35dc2e9e":"# Importing the data and displaying some rows\ndf = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\ndisplay(df.head(10))","c6fe14fd":"# The pandas profiling library is really useful on helping us understand the data we're working on.\n# It saves us some precious time on the EDA process.\nreport = pandas_profiling.ProfileReport(df)\n#display(report)","3d3d7329":"# Also, there is an option to generate an .HTML file containing all the information generated by the report.\nreport.to_file(output_file='report.html')","d44f014c":"# Another great library for automatic EDA is AutoViz.\n# With this library, several plots are generated with only 1 line of code.\n# When combined with pandas_profiling, we obtain lots of information in a\n# matter of seconds, using less then 5 lines of code.\nAV = AutoViz_Class()\n\n# Let's now visualize the plots generated by AutoViz.\nreport_2 = AV.AutoViz(\"\/kaggle\/input\/titanic\/train.csv\", \",\", \"Survived\")","c14251dc":"# Installing and loading the library\n!pip install dabl\n\nimport dabl","a8aefb74":"titanic_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntitanic_df_clean = dabl.clean(titanic_df, verbose=1)","c7193ac4":"types = dabl.detect_types(titanic_df_clean)\nprint(types) ","cafead12":"dabl.plot(titanic_df, target_col=\"Survived\")","b2ba0faa":"ec = dabl.SimpleClassifier(random_state=0).fit(titanic_df, target_col=\"Survived\") ","c19c6101":"df.info()\n# there are missing values and object(string)","fadc2ed3":"df.isnull().sum()\n# show count of missing value","035cf24d":"# fill median to missing values of Age\ndf[\"Age\"].fillna(df.Age.median(),inplace = True)\n\n# remove Cabin\ndf = df.drop(\"Cabin\", axis =1)","42e0a7dd":"# number of appearances for each values in Embarked\ndf['Embarked'].value_counts()","d35280e9":"# fill mode value to missing values of Embarked\ndf['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True) ","28a47e06":"df.info()\n# there are no missing values.\n# there are object(string)","c3dc0cb8":"# remove PassengerId, Name and Ticket\ndf = df.drop(\"PassengerId\", axis =1)\ndf = df.drop(\"Name\", axis =1)\ndf = df.drop(\"Ticket\", axis =1)\ndf.head()","885431ea":"# label-encode to Sex\ndf['Sex'].replace(['male', 'female'],[0,1], inplace =True)\ndf.head()","6cd54cc6":"# extract column 'Embarked' for one-hot encoding\nembarked = df['Embarked']\nembarked","320478af":"# crate one-hot dataframe for column 'Embarked'\nembarked_one_hot = pd.get_dummies(embarked)\nprint(embarked_one_hot)","7476e65d":"# drop column 'Embarked' and add it's one-hot encoded data\ndf = df.drop(\"Embarked\", axis =1)\ndf = pd.concat([df, embarked_one_hot], axis=1)\ndf.head()","c83e4ea1":"# split test data set\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\nX_train, X_test, y_train, y_test = train_test_split(\n    df.iloc[:, 1:], df.iloc[:, 0], test_size = 0.20, random_state=1)\nprint('X_train shape: ',X_train.shape,' y_train shape: ', y_train.shape,' X_test shape: ', X_test.shape,' y_test shape: ', y_test.shape)","4d7e2936":"# \u6c7a\u5b9a\u6728\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\nmodel = DecisionTreeClassifier(criterion='gini', max_depth=5,random_state=0)\n\n# \u30e2\u30c7\u30eb\u306e\u8a13\u7df4\nmodel.fit(X_train, y_train)","081fe139":"# predicted values\npredict_y = model.predict(X_test)\npredict_y","da081f93":"# correct values\nimport numpy as np\nnp.array(y_test)","b9822d23":"# culclate accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, predict_y)","e3f48fb5":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data","dae777b1":"# extract passenger_id for submission\ntest_passenger_id = test_data.iloc[:, :1]\ntest_passenger_id","83e911f5":"test_data.info()\n# there are missing values and object(string)","46055441":"test_data.isnull().sum()\n# show count of missing value","31e9b81c":"# fill median to missing values of Age\ntest_data[\"Age\"].fillna(test_data.Age.median(),inplace = True)\n\n# remove Cabin\ntest_data = test_data.drop(\"Cabin\", axis =1)\n\n# fill median to missing values of Age\ntest_data[\"Fare\"].fillna(test_data.Fare.median(),inplace = True)\n\n# fill mode value to missing values of Embarked\ntest_data['Embarked'].fillna(test_data['Embarked'].mode()[0], inplace=True) ","3ab0ac74":"test_data.info()\n# there are no missing values.\n# there are object(string)","d9ab3711":"# remove PassengerId, Name and Ticket\ntest_data = test_data.drop(\"PassengerId\", axis =1)\ntest_data = test_data.drop(\"Name\", axis =1)\ntest_data = test_data.drop(\"Ticket\", axis =1)\ntest_data.head()","5ed114ce":"# label-encode to Sex\ntest_data['Sex'].replace(['male', 'female'],[0,1], inplace =True)\ntest_data.head()","92c47829":"# extract column 'Embarked' for one-hot encoding\nembarked_test_data = test_data['Embarked']\n\n# crate one-hot dataframe for column 'Embarked'\nembarked_one_hot_test_data = pd.get_dummies(embarked_test_data)\n\n# drop column 'Embarked' and add it's one-hot encoded data\ntest_data = test_data.drop(\"Embarked\", axis =1)\ntest_data = pd.concat([test_data, embarked_one_hot_test_data], axis=1)\ntest_data.head()","1efd646a":"test_data.info()\n# there are no missing values and no object(string)","6eced19c":"predictions = model.predict(test_data.values)\npredictions","f2fd3b4f":"output = pd.DataFrame({'PassengerId': test_passenger_id.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","79172e78":"**EDA**","cd076230":"**Decision Tree Classification**"}}