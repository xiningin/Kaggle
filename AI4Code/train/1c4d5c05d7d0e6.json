{"cell_type":{"6965293b":"code","c9edaf17":"code","5b734272":"code","b5a08937":"code","160f2982":"code","ed60c1e3":"code","28fd8583":"code","ea0d9096":"code","ccd28540":"code","cfbb1b79":"code","cac1762f":"code","c929f649":"code","c1063787":"code","b7ceccba":"code","c16e07d7":"code","b093c025":"code","1368161b":"code","19bef1e2":"code","16c77984":"code","7c4d0489":"markdown","01f8d537":"markdown","30f68db4":"markdown","3fe875b9":"markdown","13ceec90":"markdown","4d7e6ffe":"markdown","59c2ed01":"markdown","5ded0274":"markdown","dbb8c5a1":"markdown","3e9a5472":"markdown","495a139c":"markdown","a09c76e0":"markdown","b5fedd94":"markdown","803ca515":"markdown"},"source":{"6965293b":"from sklearn.decomposition import PCA\nimport pandas as pd\nimport numpy as np\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c9edaf17":"model = Word2Vec.load('\/kaggle\/input\/covid19-challenge-trained-w2v-model\/covid.w2v')","5b734272":"model.wv.most_similar('coronavirus', topn=10)","b5a08937":"keywords = [\"infection\", \"cell\", \"protein\", \"virus\",\\\n            \"disease\", \"respiratory\", \"influenza\", \"viral\",\\\n            \"rna\", \"patient\", \"pathogen\", \"human\", \"medicine\",\\\n            \"cov\", \"antiviral\"]\n\nprint(\"Frequency of keyword & Most similar words\")\nprint(\"\")\n\n#top_words_list = []\nfor word in keywords:\n    top_words = model.wv.most_similar(word, topn=5)\n    print(word + \" - \" + \"frequency: \", model.wv.vocab[word].count)\n    for idx, top_word in enumerate(top_words):\n        print(str(idx+1) + \". \" + top_word[0])\n        #top_words_list.append(top_word[0])\n    print(\"\")","160f2982":"model['coronavirus'].shape","ed60c1e3":"words = [word for word in keywords]\nX = model[words]\nX.shape","28fd8583":"pca = PCA(n_components=2)\nresult = pca.fit_transform(X)\ndf = pd.DataFrame(result, columns=[\"Component 1\", \"Component 2\"])\ndf","ea0d9096":"df[\"Word\"] = words\ndf[\"Distance\"] = np.sqrt(df[\"Component 1\"]**2 + df[\"Component 2\"]**2)\ndf","ccd28540":"freq_list = []\nfor word in words:\n    freq_list.append(model.wv.vocab[word].count)\ndf['frequency'] = freq_list\ndf","cfbb1b79":"sns.scatterplot(data=df, x=\"Component 1\", y=\"Component 2\", \n                hue=\"Distance\",size=\"frequency\")","cac1762f":"fig = px.scatter(df, x=\"Component 1\", y=\"Component 2\", text=\"Word\", \n                 color=\"Distance\", size=\"frequency\", color_continuous_scale=\"agsunset\")\nfig.update_traces(textposition='top center')\nfig.layout.xaxis.autorange = True\nfig.data[0].marker.line.width = 1\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.update_layout(height=800, title_text=\"2D PCA of Word2Vec embeddings\", \n                  template=\"plotly_white\", paper_bgcolor=\"#f0f0f0\")\nfig.show()","c929f649":"def pca_2d_similar(keyword):\n    similar_words = model.wv.most_similar(keyword, topn=20)\n    df_similar_words = pd.DataFrame(similar_words, columns = ['word', 'dist'])\n    words = [word for word in df_similar_words['word'].tolist()]\n    X = model[words]\n    result = pca.fit_transform(X)\n    df = pd.DataFrame(result, columns=[\"Component 1\", \"Component 2\"])\n    df[\"Word\"] = df_similar_words['word']\n    word_emb = df[[\"Component 1\", \"Component 2\"]].loc[0]\n    df[\"Distance\"] = np.sqrt((df[\"Component 1\"] - word_emb[0])**2 + (df[\"Component 2\"] - word_emb[1])**2)\n    fig = px.scatter(df[2:], x=\"Component 1\", y=\"Component 2\", text=\"Word\", color=\"Distance\", color_continuous_scale=\"viridis\",size=\"Distance\")\n    fig.update_traces(textposition='top center')\n    fig.layout.xaxis.autorange = True\n    fig.data[0].marker.line.width = 1\n    fig.data[0].marker.line.color = 'rgb(0, 0, 0)'\n    fig.update_layout(height=800, title_text=\"2D PCA of words related to {}\".format(keyword), template=\"plotly_white\", paper_bgcolor=\"#f0f0f0\")\n    fig.show()\n    \npca_2d_similar('antiviral')","c1063787":"pca_2d_similar('antiretroviral')","b7ceccba":"pca_2d_similar('daas')","c16e07d7":"pca_2d_similar('cyclosporine')","b093c025":"pca_2d_similar('lamivudine')","1368161b":"pca_2d_similar('favipiravir')","19bef1e2":"pca_2d_similar('rna')","16c77984":"pca_2d_similar('dna')","7c4d0489":"#### Add distance","01f8d537":"## 2-D visualization of Word2Vec embeddings\nDenoting frequency by size & distance by color","30f68db4":"# COVID-19 papers Word2Vec model\n\nCreated by a TransUnion data scientist that believes that information can be used to change our world for the better. #InformationForGood\n\nModel built from the [CORD-19 research challenge](kaggle.com\/allen-institute-for-ai\/CORD-19-research-challenge) using [this](https:\/\/www.kaggle.com\/elsonidoq\/train-a-word2vec) notebook.\n\nThe approach has been adopted from [this](https:\/\/www.kaggle.com\/tarunpaparaju\/covid-19-dataset-gaining-actionable-insights) kernel.","3fe875b9":"#### Creating a function for this purpose","13ceec90":"## Let's pick a specific keyword","4d7e6ffe":"We'll use word similarity from the Word2Vec model","59c2ed01":"## 2-D PCA of keyword vectors","5ded0274":"## Let's look at cell structure","dbb8c5a1":"## Reduce dimensionality from 100 to 2 for visualization","3e9a5472":"#### No of keywords * 100 dim vectors","495a139c":"#### Let's add work frequencies as well","a09c76e0":"#### Sample length of each word vector","b5fedd94":"## Further similarities","803ca515":"#### Loading trained Word2Vec model"}}