{"cell_type":{"442b5fb4":"code","c7c4a526":"code","18c7fd08":"code","015621ed":"code","99e1e3a3":"code","063b69ca":"code","db6b2165":"code","a7a7fbbe":"code","64579e2e":"code","e305d061":"code","ba1ddb1b":"code","bbcfac1e":"code","856d9c95":"code","a38b390d":"code","6faa802c":"code","6be591df":"code","2237d6c4":"code","303aa2d5":"code","59f2c204":"code","c62b0a74":"code","c877b55b":"code","d7834343":"code","da3ea24e":"code","43b29399":"code","07a2c5ed":"code","6b4a0113":"code","def00d70":"code","cd3d39ae":"code","e982f9cd":"code","aff012bf":"code","d489c047":"code","62db4ad4":"code","b7b30db1":"code","9683af8a":"code","bdc6943e":"code","6e0dfaae":"code","8cc87d35":"code","5105151e":"code","d8e84328":"code","5affd5ca":"code","3f4f3317":"code","d990d0e1":"code","897d5dca":"code","3d57d4dd":"code","4ed05cd5":"code","c67d30ff":"code","a0484453":"code","9051a675":"code","8f3cdf7b":"code","bfc0f7eb":"code","2c15512d":"code","9a266d6e":"code","ffe1430b":"code","bc70bfbe":"code","869cdcd4":"code","981c467a":"code","c5dc8cf8":"code","a3d36340":"code","95107354":"code","c247b5a7":"code","785d45d4":"code","deb3622c":"code","fdcf4ce4":"code","ea3aee66":"code","e6afbb6a":"code","4162e225":"code","21a60e6b":"markdown","1ce0cead":"markdown","3e1f9fc2":"markdown","bc92c3b8":"markdown","06156fda":"markdown","9bca7c99":"markdown","f5660395":"markdown","12afc017":"markdown","72b17b31":"markdown","daeda659":"markdown"},"source":{"442b5fb4":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom yellowbrick.classifier import ConfusionMatrix\n\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n%matplotlib inline","c7c4a526":"train_csvfile = '..\/input\/titanic\/train.csv'\ntest_csvfile  = '..\/input\/titanic\/test.csv'","18c7fd08":"train_data = pd.read_csv(train_csvfile)\ntrain_data.head()","015621ed":"train_data.info()","99e1e3a3":"train_data['Survived'].value_counts() # 549 \/ 342 = 1,60","063b69ca":"train_data.isna().sum()","db6b2165":"train_data[train_data['Age'].isna()]['Survived'].value_counts() # 2,40","a7a7fbbe":"train_data[train_data['Pclass']==1]['Survived'].value_counts(sort=False) # 0,58","64579e2e":"train_data[train_data['Cabin'].isna()]['Survived'].value_counts(sort=False) # 3,12","e305d061":"train_data['Age'].fillna(value=train_data['Age'].notna().mean() ,inplace=True)","ba1ddb1b":"train_data.drop(train_data.loc[train_data['Embarked'].isna()].index, inplace=True)","bbcfac1e":"X = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].to_numpy()\ny = train_data['Survived'].to_numpy()","856d9c95":"gender_encoder = LabelEncoder()\nembarked_encoder = LabelEncoder()\n\nX[:, 1] = gender_encoder.fit_transform(X[:, 1])\nX[:, 6] = embarked_encoder.fit_transform(X[:, 6])","a38b390d":"scaler = StandardScaler()\nscaler.fit(X)\nX_scaled = scaler.transform(X)","6faa802c":"X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=0)","6be591df":"clf = GaussianNB()\nclf.fit(X_train, y_train)","2237d6c4":"y_pred = clf.predict(X_test)\naccuracy_score(y_test, y_pred)","303aa2d5":"cm = ConfusionMatrix(clf)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","59f2c204":"submission_data = pd.read_csv(test_csvfile)\nsubmission_data.info()","c62b0a74":"submission_data['Age'].fillna(value=submission_data['Age'].notna().mean() ,inplace=True)\nsubmission_data['Fare'].fillna(value=submission_data['Fare'].notna().mean(), inplace=True)\n\nX_sub = submission_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].to_numpy()\n\nX_sub[:, 1] = gender_encoder.transform(X_sub[:, 1])\nX_sub[:, 6] = embarked_encoder.transform(X_sub[:, 6])","c877b55b":"X_sub_scaled = scaler.transform(X_sub)","d7834343":"previsoes = clf.predict(X_sub)\n\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","da3ea24e":"clf_tree = DecisionTreeClassifier(criterion='entropy')\nclf_tree.fit(X_train, y_train)","43b29399":"y_pred = clf_tree.predict(X_test)\naccuracy_score(y_test, y_pred)","07a2c5ed":"cm = ConfusionMatrix(clf_tree)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","6b4a0113":"previsoes = clf_tree.predict(X_sub_scaled)\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","def00d70":"random_forest = RandomForestClassifier(n_estimators=10, criterion='entropy')\nrandom_forest.fit(X_train, y_train)","cd3d39ae":"y_pred = random_forest.predict(X_test)\naccuracy_score(y_test, y_pred)","e982f9cd":"cm = ConfusionMatrix(random_forest)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","aff012bf":"previsoes = random_forest.predict(X_sub)\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","d489c047":"bigger_forest = RandomForestClassifier(n_estimators=40, criterion='entropy')\nbigger_forest.fit(X_train, y_train)","62db4ad4":"y_pred = bigger_forest.predict(X_test)\naccuracy_score(y_test, y_pred)","b7b30db1":"cm = ConfusionMatrix(bigger_forest)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","9683af8a":"previsoes = bigger_forest.predict(X_sub)\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","bdc6943e":"congo_forest = RandomForestClassifier(n_estimators=80, criterion='entropy')\ncongo_forest.fit(X_train, y_train)","6e0dfaae":"y_pred = congo_forest.predict(X_test)\naccuracy_score(y_test, y_pred)","8cc87d35":"cm = ConfusionMatrix(congo_forest)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","5105151e":"previsoes = congo_forest.predict(X_sub)\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","d8e84328":"X = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].to_numpy()\ny = train_data['Survived'].to_numpy()","5affd5ca":"gender_encoder = LabelEncoder()\nembarked_encoder = LabelEncoder()\n\nX[:, 1] = gender_encoder.fit_transform(X[:, 1])\nX[:, 6] = embarked_encoder.fit_transform(X[:, 6])","3f4f3317":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","d990d0e1":"bigger_forest = RandomForestClassifier(n_estimators=40, criterion='entropy')\nbigger_forest.fit(X_train, y_train)","897d5dca":"y_pred = bigger_forest.predict(X_test)\naccuracy_score(y_test, y_pred)","3d57d4dd":"cm = ConfusionMatrix(bigger_forest)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","4ed05cd5":"submission_data['Age'].fillna(value=submission_data['Age'].notna().mean() ,inplace=True)\nsubmission_data['Fare'].fillna(value=submission_data['Fare'].notna().mean(), inplace=True)\n\nX_sub = submission_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']].to_numpy()\n\nX_sub[:, 1] = gender_encoder.transform(X_sub[:, 1])\nX_sub[:, 6] = embarked_encoder.transform(X_sub[:, 6])","c67d30ff":"previsoes = bigger_forest.predict(X_sub)\noutput_csv = '.\/submission.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","a0484453":"train_data['Survived'].value_counts()","9051a675":"train_data[train_data['Survived']==0]['Ticket'].value_counts(dropna=False)","8f3cdf7b":"train_data[train_data['Survived']==1]['Ticket'].value_counts(dropna=False)","bfc0f7eb":"train_data[train_data['Pclass']==1]['Name']","2c15512d":"train_data[train_data['Pclass']==2]['Name']","9a266d6e":"train_data[train_data['Pclass']==3]['Name']","ffe1430b":"train_data[train_data['Name'].str.contains('Mr.')]['Survived'].value_counts(sort=False)","bc70bfbe":"train_data[train_data['Name'].str.contains('Mrs.')]['Survived'].value_counts(sort=False)","869cdcd4":"train_data[train_data['Name'].str.contains('\\(')]['Survived'].value_counts(sort=False)","981c467a":"def contains_parentheses(row):\n    if '(' in row['Name']:\n        return 1\n    else:\n        return 0\n    \ntrain_data['Parentheses'] = train_data.apply(lambda row: contains_parentheses(row), axis=1)","c5dc8cf8":"def is_mrs(row):\n    if 'Mrs.' in row['Name']:\n        return 1\n    else:\n        return 0\n    \ntrain_data['IsMrs'] = train_data.apply(lambda row: is_mrs(row), axis=1)","a3d36340":"X = train_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Parentheses', 'IsMrs', 'Ticket']].to_numpy()\ny = train_data['Survived'].to_numpy()","95107354":"gender_encoder = LabelEncoder()\nembarked_encoder = LabelEncoder()\nticket_encoder = LabelEncoder()\n\nX[:, 1] = gender_encoder.fit_transform(X[:, 1])\nX[:, 6] = embarked_encoder.fit_transform(X[:, 6])\nX[:, 9] = ticket_encoder.fit_transform(X[:, 9])","c247b5a7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","785d45d4":"bigger_forest = RandomForestClassifier(n_estimators=40, criterion='entropy')\nbigger_forest.fit(X_train, y_train)","deb3622c":"y_pred = bigger_forest.predict(X_test)\naccuracy_score(y_test, y_pred)","fdcf4ce4":"cm = ConfusionMatrix(bigger_forest)\ncm.fit(X_train, y_train)\ncm.score(X_test, y_test);","ea3aee66":"submission_data = pd.read_csv(test_csvfile)\nsubmission_data.info()","e6afbb6a":"def ticket_unseen(row):\n    if row['Ticket'] not in ticket_encoder.classes_:\n        return ticket_encoder.classes_[0]\n    else:\n        return row['Ticket']\n\n\nsubmission_data['Age'].fillna(value=submission_data['Age'].notna().mean() ,inplace=True)\nsubmission_data['Fare'].fillna(value=submission_data['Fare'].notna().mean(), inplace=True)\nsubmission_data['Parentheses'] = submission_data.apply(lambda row: contains_parentheses(row), axis=1)\nsubmission_data['IsMrs'] = submission_data.apply(lambda row: is_mrs(row), axis=1)\nsubmission_data['Ticket'] = submission_data.apply(lambda row: ticket_unseen(row), axis=1)\n\nX_sub = submission_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Parentheses', 'IsMrs', 'Ticket']].to_numpy()\n\nX_sub[:, 1] = gender_encoder.transform(X_sub[:, 1])\nX_sub[:, 6] = embarked_encoder.transform(X_sub[:, 6])\nX_sub[:, 9] = ticket_encoder.transform(X_sub[:, 9])","4162e225":"previsoes = bigger_forest.predict(X_sub)\noutput_csv = '.\/submission_new_attrb.csv'\noutput_df = pd.DataFrame({'PassengerId': submission_data['PassengerId'].to_numpy(), 'Survived': previsoes})\noutput_df.to_csv(output_csv, index=False)","21a60e6b":"### Decision Tree - 74.7% on test split","1ce0cead":"### Loading and Peeking","3e1f9fc2":"### RandomForest - 73.5% on test split","bc92c3b8":"### RandomForest w\/ 80 Estimators - 74.15% on test split","06156fda":"### Preprocessing","9bca7c99":"### Non-Scaled - 75.2%","f5660395":"# Libraries & Preprocessing","12afc017":"### RandomForest w\/ 40 Estimators - 76.4% on test split","72b17b31":"### Bayesian Classifier - 70.2% on test split","daeda659":"### New Attributes (Ticket & Name) - 76.9%"}}