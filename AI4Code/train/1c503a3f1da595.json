{"cell_type":{"08b28069":"code","f41644d6":"code","ccb55964":"code","26ea9013":"code","09bb3b95":"code","66dc588b":"code","71ad3392":"code","1e9e66d9":"code","5f3b389e":"code","d4c9e41c":"code","e5556a43":"code","fc3289c5":"code","8706b9c0":"code","9753e46a":"code","d6952990":"code","98a2b766":"code","910dedf2":"code","ab01c3b1":"code","f6ce8bc9":"code","e524be96":"code","8bddb1cb":"code","6cdd150e":"code","f90c7882":"code","35b5c3fe":"code","59672f25":"code","bfacf805":"code","65b19ba7":"code","d3c7e68f":"code","a7f99dcb":"code","86f89cc1":"code","48c0b61d":"code","ffc38adb":"code","51ecd35a":"code","3ce64400":"code","4feac41e":"code","9e44353d":"code","8b75bc32":"code","d9c7064b":"code","30e173b1":"markdown","02faefaa":"markdown","c53c4f8b":"markdown","9e31a9fe":"markdown","22aa91b0":"markdown","f9792ff5":"markdown","d161def1":"markdown","4b133ede":"markdown"},"source":{"08b28069":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f41644d6":"person = {\n    \"name\":\"Prashant\",\n    \"age\":30,\n    \"programmer\":False,\n    \"city\":[\"Korba\",\"Bilaspur\",\"Raipur\"]\n}\nprint(type(person))\npersonJson = json.dumps(person)\nprint(personJson)","ccb55964":"personJson = json.dumps(person, indent=4, sort_keys=True)\n\nprint(personJson)","26ea9013":"with open(\"person.json\", \"w\") as file:\n    json.dump(personJson, file, indent=4)","09bb3b95":"# json string to convert python dectionary\npersonLoad = json.loads(personJson)\nprint(personLoad)","66dc588b":"import random","71ad3392":"# generate number 0 to 1 float value\na = random.random()\nprint(a)","1e9e66d9":"# select value range 1 to 10 in float\na = random.uniform(1, 10)\nprint(a)","5f3b389e":"a = random.randint(1, 10)\nprint(a)","d4c9e41c":"a = random.randrange(1, 10)\nprint(a)","e5556a43":"a = list(\"abcdefghijklmn\")\nprint(random.choice(a))","fc3289c5":"print(random.sample(a, 3))","8706b9c0":"print(random.choices(a, k=3))","9753e46a":"a1 = random.shuffle(a)\nprint(a)","d6952990":"random.seed(15)\na = random.randint(1, 10)\nprint(a)","98a2b766":"import secrets","910dedf2":"a = secrets.randbelow(10)\nprint(a)","ab01c3b1":"a = secrets.randbits(4)\nprint(a)","f6ce8bc9":"mylist = list(\"abcdefghijklmn\")\nprint(secrets.choice(mylist))","e524be96":"# using numpy\na = np.random.random(3)\nprint(a)","8bddb1cb":"a = np.random.rand(3,3)\nprint(a)","6cdd150e":"np.random.seed(30)\na = np.random.randint(3,10, (3,3))\nprint(a)","f90c7882":"def print_name():\n    print('Ravi')\n    \ndef start_end_decorator(func):\n    def wrapper():\n        print(\"Start\")\n        func()\n        print(\"End\")\n    return wrapper\n\nnew_fun = start_end_decorator(print_name)\nnew_fun()\n\n\n#This same things do in using decorators function\n@start_end_decorator\ndef print_city():\n    print(\"Raipur\")\n    \nprint(\"******************************\")\nprint_city()","35b5c3fe":"def mygenerators():\n    yield 1\n    yield 2\n    yield 3    ","59672f25":"gen_obj = mygenerators()\nprint(list(gen_obj))","bfacf805":"def mygenerators():\n    yield 1\n    yield 2\n    print(\"sencod statement\")\n    yield 3  ","65b19ba7":"gen_obj = mygenerators()\n\nvalue = next(gen_obj)\nprint(value)\nvalue = next(gen_obj)\nprint(value)\nvalue = next(gen_obj)\nprint(value)","d3c7e68f":"def mygenerators():\n    yield 1\n    yield 2\n    yield 3\n\ngen_obj = mygenerators()\nprint(sum(gen_obj))","a7f99dcb":"def fibonacci(limit):\n    a,b = 0,1\n    while a < limit:\n        yield a\n        a, b = a, a+b\n        \n#fib = fibonacci(30)\n#for i in fib:\n#   print(i)","86f89cc1":"import os\nfrom threading import Thread, Lock\nimport time","48c0b61d":"# Rece condition check\n# check how race condition occure\ndatabase_value = 0\n\ndef increase():\n    global database_value\n    local_copy = database_value\n    \n    # processing\n    local_copy += 1\n    time.sleep(0.1)\n    \n    database_value = local_copy\n    \n    \nif __name__ == \"__main__\":\n    \n    print('start value', database_value)\n    thread1 = Thread(target=increase)\n    thread2 = Thread(target=increase)\n    \n    thread1.start()\n    thread2.start()\n    \n    thread1.join()\n    thread2.join()\n    \n    print('end value', database_value)\n    \n    print('end main')","ffc38adb":"#Race condtion prevant using lock method\n\ndatabase_value = 0\n\ndef increase(lock):\n    global database_value\n    \n    lock.acquire()\n    local_copy = database_value\n    # processing\n    local_copy += 1\n    time.sleep(0.1)    \n    database_value = local_copy\n    lock.release()\n    \n    \nif __name__ == \"__main__\":\n    \n    lock = Lock()\n    \n    print('start value', database_value)\n    thread1 = Thread(target=increase, args =(lock, ))\n    thread2 = Thread(target=increase, args =(lock, ))\n    \n    thread1.start()\n    thread2.start()\n    \n    thread1.join()\n    thread2.join()\n    \n    print('end value', database_value)\n    \n    print('end main')","51ecd35a":"#Race condtion prevant using lock method\n\ndatabase_value = 0\n\ndef increase(lock):\n    global database_value\n    \n    with lock:\n        local_copy = database_value\n        local_copy += 1\n        time.sleep(0.1) \n        database_value = local_copy\n        \n    \n    \nif __name__ == \"__main__\":\n    \n    lock = Lock()\n    \n    print('start value', database_value)\n    thread1 = Thread(target=increase, args =(lock, ))\n    thread2 = Thread(target=increase, args =(lock, ))\n    \n    thread1.start()\n    thread2.start()\n    \n    thread1.join()\n    thread2.join()\n    \n    print('end value', database_value)\n    \n    print('end main')","3ce64400":"def print_name(name):# parameter\n    print(name)\n    \nprint_name(\"Ravi\")  # arguments","4feac41e":"# position argument and keyword argument\ndef add_number(a, b, c):\n    return a+b+c\n\nd = add_number(1, 2, 3) # position argument\nprint(d)\nd = add_number(a=1, b=2, c=3) # keyword argument\nprint(d)","9e44353d":"# default argument \n# default argument define must last position\ndef mul_number(a, b=5):\n    return a*b\n\nc = mul_number(a=3, b=7)\nprint(c)","8b75bc32":"def print_numbers(*args, **kwargs):\n    for i in args:\n        print(f\"args ={i}\")\n    for key, val in kwargs.items():\n        print(f\"key={key} and value={val}\")\n\nprint_numbers(1,2,3,4, a=19,b=20)\n","d9c7064b":"def print_numbers(a, b, c, d):\n    print(a,b,c,d)\n    \nmylist = [ 3, 4,5,6]\nprint_numbers(*mylist)\n#keyword argument use dictionary\nmyDict = {'a':29, 'b':12, 'c':13,'d':15}\nprint_numbers(**myDict)","30e173b1":"<p id=\"multiprocessing\"><\/p>\n<h1>Multprocessing<\/h1>","02faefaa":"<p id=\"threads\"><\/p>\n<h1>Threads<\/h1>","c53c4f8b":"[Reference](https:\/\/www.python-engineer.com\/courses\/advancedpython\/)","9e31a9fe":"I am learning python for my best. so this process i found one website but i know without practice only learning is not useful. That's why i have try every code. and shared. <br\/>\nI will update in future. <br\/>\nReference website is [python-engineer.com](https:\/\/www.python-engineer.com\/courses\/advancedpython\/18-function-arguments\/)<br\/>\n**[Kaggele Part-1](https:\/\/www.kaggle.com\/shivamanhar\/python-next-level-part-1\/)<br\/>\n[Kaggele Part-2](https:\/\/www.kaggle.com\/shivamanhar\/python-next-level-part-2\/)**<br\/>\n<ol>\n    <li><a href=\"#random_number\">Random numbers <\/a><\/li>\n    <li><a href=\"#decorator\">Decorators <\/a><\/li>\n    <li><a href=\"#generators\">Generators <\/a><\/li>\n    <li><a href=\"#threads\">Threads<\/a><\/li>\n    <li><a href=\"#multiprocessing\">Multiprocessing<\/a><\/li>\n    <li><a href=\"#fun_arguments\">Function arguments<\/a><\/li>\n<\/ol>","22aa91b0":"<p id=\"random_number\"><\/p>\n<h1>Rendom numbers<\/h1>","f9792ff5":"<p id=\"fun_arguments\"><\/p>\n<h1> Function Arguments<\/h1>","d161def1":"<p id=\"generators\"><\/p>\n<h1> Generators <\/h1>","4b133ede":"<p id=\"decorator\"><\/p>\n<h1> Decorators <\/h1>"}}