{"cell_type":{"f9b9364c":"code","f85a3587":"code","f019d889":"code","d383d564":"code","299285c5":"code","88b8f8ab":"code","8b88face":"code","889874bd":"code","1466f218":"code","41cf581f":"code","73bf1cd8":"code","0515ed55":"code","369211d5":"code","648bc573":"code","ba038be0":"code","e172d554":"code","09eb9dd3":"code","248233a2":"code","c19faef3":"code","c42e1370":"code","02730f65":"code","5a7f5b9c":"code","4ec879e9":"code","ff8f2fc9":"code","227b7e82":"code","7146cb62":"code","d1dcdcc0":"code","f349767f":"code","de8e7f78":"code","490f6231":"code","0d2f29d5":"code","23d8f18e":"code","b5053d06":"code","02b4fb44":"code","39422337":"code","10c3426d":"code","37262b3d":"code","475626d2":"code","97486283":"code","42fdd3dc":"code","f06a07c9":"code","e2476119":"code","50e3eedd":"code","8f9e1fed":"code","28718e27":"code","58ead0d2":"code","22de7051":"code","bcaf221f":"code","0bb8d7a4":"code","2c5804b7":"code","fcde1d1f":"code","680cc8dc":"code","1bacbf35":"code","c8470dd7":"code","a00085ed":"code","05a9950f":"code","9458d16f":"code","f9f3a250":"code","471df6bc":"code","80c14bf2":"code","e2e404e8":"code","b8962d5a":"code","8363bbaf":"code","ddb03a0f":"code","bd238c37":"code","53c10bed":"code","164cab97":"code","72b88757":"code","733f0add":"code","bf7d8de6":"code","cc631ec8":"code","1ae5254b":"code","e7083aac":"code","90655107":"code","74872bc6":"code","49862952":"code","cb32e7e0":"code","776f2649":"code","40780c20":"code","922815f0":"code","cb122452":"code","22889c2f":"code","71ce0a68":"code","800c690b":"code","5d4edca1":"code","0945106e":"code","d59d523a":"code","fe022c5f":"code","e3dce4d7":"code","9f7c3276":"code","d3be3dcd":"code","db6b88d3":"code","f718a3cd":"code","e21afa52":"code","999a890b":"code","fe015fd0":"code","beeba1cb":"code","30c12147":"code","f8e9dd73":"code","730aff93":"code","f4053d01":"code","b828403d":"code","2543e1c3":"code","066a410b":"code","c2b6c54f":"code","b89bd698":"code","96ba571a":"code","55573c73":"code","bf3ba01c":"code","267c4516":"code","8e4628ae":"code","cf6716c3":"code","e68efdc4":"code","e955e462":"code","5d8d0023":"code","7ade2090":"code","55615223":"code","c23b0fa7":"code","0cd0e710":"code","d27632a6":"code","2b23cf07":"code","a9a98eef":"code","1346b801":"code","c9f0fd52":"code","27cdee79":"code","2bcd33ab":"code","4675618e":"code","6cef4318":"code","0a189b62":"code","0e3f4b89":"markdown","35f0ff15":"markdown","12a1d00f":"markdown","c8b10b03":"markdown","50cb3c26":"markdown","857ecd0a":"markdown","b07b7151":"markdown","d38929bd":"markdown","d83eb54c":"markdown","340af4eb":"markdown","0cf633d0":"markdown","0f2b4cb6":"markdown","998293b9":"markdown","3e8e0cbb":"markdown","585f7011":"markdown","22526ce3":"markdown","000f4dd8":"markdown","371a85bc":"markdown","b95920f2":"markdown","344aecb4":"markdown","2ad7a759":"markdown","f6df87dd":"markdown","3c6fae24":"markdown","83eb2d64":"markdown","c16afe10":"markdown","07578af2":"markdown","c4b8d82c":"markdown","1971a0da":"markdown","98f3466b":"markdown","f0bf43a8":"markdown","1901ea0c":"markdown","635f8cd9":"markdown","c9d6cb50":"markdown","33acfe2d":"markdown","a8fdbf55":"markdown","a065fd6f":"markdown","8f698f26":"markdown","19b2b20e":"markdown","cb994a57":"markdown","eeef9cf7":"markdown","a09c271c":"markdown"},"source":{"f9b9364c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nfrom datetime import datetime, timedelta \nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nfrom geopy.geocoders import Nominatim\ngeolocator = Nominatim(user_agent=\"example app\")\nimport pycountry\nimport requests\nimport json\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f85a3587":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","f019d889":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","d383d564":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","299285c5":"df_train.info()","88b8f8ab":"df_train.head(5)","8b88face":"df_test.info()","889874bd":"df_test.head(5)","1466f218":"sample_submission.head(5)","41cf581f":"sample_submission.info()","73bf1cd8":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","0515ed55":"data.info()","369211d5":"data.sample(5)","648bc573":"for i in list(data.columns):\n    display(len(data[i].unique()))","ba038be0":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 DF \u0441\u043e\u0434\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 ID_TA\nduplicates=data[data.ID_TA.duplicated() == True].sort_values(by ='ID_TA')\nduplicates","e172d554":"duplicates.City.unique()","09eb9dd3":"difference_check = []\nfor i in list(duplicates.ID_TA):\n    # \u041d\u0438\u0436\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432\n    dif = list(data[data.ID_TA == i].Rating)[0] - list(data[data.ID_TA == i].Rating)[1]\n    difference_check.append(dif)\ndifference_check","248233a2":"duplicates.Rating.value_counts()","c19faef3":"data[data.ID_TA == duplicates.ID_TA.iloc[0]]","c42e1370":"data[data.ID_TA == duplicates.ID_TA.iloc[1]]","02730f65":"# \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u043c\u0438 \u043f\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043f\u0440\u0435\u0432\u044b\u0435 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b\ndata['1'] = data.ID_TA.duplicated(keep='first')\ndata['2'] = data.ID_TA.duplicated(keep='last')","5a7f5b9c":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0441\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u044e\u0446\u044b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 1 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0434\u0443\u0431\u043b\u0438\ndef duplicate(row):\n    result = 0\n    if row['1'] == True:\n        result = 1\n    elif row['2'] == True:\n        result = 1\n    return result","4ec879e9":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ndata['has_duplicate'] = data.apply(duplicate, axis = 1)","ff8f2fc9":"# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndata.drop(['1','2'], axis = 'columns', inplace = True)","227b7e82":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 ID \u0438 \u043a\u043e\u043b-\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\nid_vc = data.groupby(['Restaurant_id']).Ranking.count()\nid_vc","7146cb62":"# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 DF\ndata['id_amount'] = data.Restaurant_id.apply(lambda x: id_vc[x])","d1dcdcc0":"sns.scatterplot(x=\"id_amount\", y=\"Rating\",\n                sizes=(1, 8), linewidth=0,\n                data=data)","f349767f":"data['Price Range'].unique()","de8e7f78":"# \u041f\u043e\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndata['price_class_nan'] = pd.isna(data['Price Range']).astype('uint8')","490f6231":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u043e\u0440\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u0430 \u0446\u0435\u043d\u044b \u0432 \u0447\u0438\u0441\u043b\u043e, \u0433\u0434\u0435 1 - \u0441\u0430\u043c\u044b\u0435 \u0434\u0435\u0448\u0435\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\nmapping_dict = {data['Price Range'].unique()[0]: 2,\n                data['Price Range'].unique()[2]: 3,\n                data['Price Range'].unique()[3]: 1}","0d2f29d5":"# \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438\ndata['price_class'] = data['Price Range'].map(mapping_dict)","23d8f18e":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044e Ranking \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430\ndef main_price(city, i):\n    data_c = data[data.City == city]\n    result = data_c[(data_c.Ranking.quantile(i) <= data_c.Ranking) & (data_c.Ranking < data_c.Ranking.quantile(i+0.2))].price_class.dropna().mean()\n    return result","b5053d06":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u043a\u0440\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044f\ndef quantile(quantile):\n    series=[]\n    for i in data.City.unique():\n        series.append(main_price(i, quantile))\n    return series","02b4fb44":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 DF c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ncity_price = pd.DataFrame({'city': data.City.unique()})\nquantiles = [x\/10 for x in range(8, -1, -2)]\nfor i in quantiles:\n    city_price[i]=quantile(i)","39422337":"city_price","10c3426d":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a [\u0433\u043e\u0440\u043e\u0434-\u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044c],\n#\u0433\u0434\u0435 \u043f\u0440\u0435\u043e\u0431\u043b\u044f\u0434\u0430\u044e\u0442 \u0434\u0435\u0448\u0435\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\nclass1_price=[]\nfor i in quantiles:\n    for j in city_price[city_price[i]<1.5].city:\n        class1_price.append([j, i])\nclass1_price","37262b3d":"#\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nclass1_indexes=[]\nif len(class1_price)>0:\n    #\u0426\u0438\u043a\u043b \u0434\u043e\u0441\u0442\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0430\u0440\u0430\u043c [\u0433\u043e\u0440\u043e\u0434-\u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044c]\n    for pair in class1_price:\n        city = pair[0]\n        Q = pair[1]\n        df = data[(data.City == city) & (data[data.City == city].Ranking.quantile(Q) <= data.Ranking) & (data[data.City == city].Ranking < data.Ranking.quantile(Q+0.2))]\n        #\u0426\u0438\u043a\u043b \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0443\u0441\u0442\u044b\u0435 \u044f\u0447\u0435\u0439\u043a\u0438\n        for i in df[df.price_class.isna()].index:\n            class1_indexes.append(i)\n    #\u0426\u0438\u043a\u043b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    for i in class1_indexes:\n        data.xs(i)['price_class'] = 1   ","475626d2":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a [\u0433\u043e\u0440\u043e\u0434-\u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044c], \u0433\u0434\u0435 \u043f\u0440\u0435\u043e\u0431\u043b\u044f\u0434\u0430\u044e\u0442 \u0434\u043e\u0440\u043e\u0433\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b.\n#\u041d\u0435 \u0441\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0443\u0441\u0442, \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0430\u043a\u0442\u0443\u0430\u043b\u0435\u043d \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nclass3_price=[]\nfor i in quantiles:\n    for j in city_price[city_price[i]>=2.5].city:\n        class1_price.append([j, i])\nclass3_price","97486283":"#\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u0435\u0448\u0435\u0432\u044b\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\nclass3_indexes=[]\nif len(class3_price)>0:\n    for pair in class3_price:\n        city = pair[0]\n        Q = pair[1]\n        df = data[(data.City == city) & (data[data.City == city].Ranking.quantile(Q) <= data.Ranking) & (data[data.City == city].Ranking < data.Ranking.quantile(Q+0.2))]\n        for i in df[df.price_class.isna()].index:\n            class3_indexes.append(i)\n    for i in class3_indexes:\n        data.xs(i)['price_class'] = 1 ","42fdd3dc":"#\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u044f\u0447\u0435\u0435\u043a \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata.price_class.fillna(value = 2, inplace =True)","f06a07c9":"data.sample(5)","e2476119":"data['price_class'].hist()","50e3eedd":"sns.catplot(x='price_class', y='Rating',\n            kind=\"violin\", bw=.1, cut=0,\n            data=data)","8f9e1fed":"# \u041f\u043e\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndata['cuisine_nan'] = pd.isna(data['Cuisine Style']).astype('uint8')","28718e27":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438\ndata['Cuisine Style'] = data['Cuisine Style'].str.findall(r'\\w+\\s*\\w*\\s*\\w*\\s*\\w*\\s*\\w*')","58ead0d2":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0443\u044e \u043a\u0443\u0445\u043d\u044e \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n#\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \"European\" \u043e\u043f\u0443\u0449\u0435\u043d\u043e, \u0442.\u043a. \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0442\u043e\u0447\u043d\u043e\ndef popular_cuisine(city):\n    popular_values = pd.Series(data[data.City == city]['Cuisine Style'].dropna().sum()).value_counts()\n    if popular_values.index[0] != 'European':\n        result = popular_values.index[0]\n    else:\n        result = popular_values.index[1]\n    return result","22de7051":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e DF \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\ncity_cuisine = pd.DataFrame({'city': data.City.unique()})\ncity_cuisine['cuisine'] = city_cuisine.city.apply(popular_cuisine)\ncity_cuisine","bcaf221f":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430\ndef associated_cuisine(city):\n    result = city_cuisine[city_cuisine.city == city].iloc[0][1]\n    return result","0bb8d7a4":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\ndef making_list(cell):\n    if type(cell) == list:\n        result = cell\n    elif type(cell) == str:\n        result = re.findall(r'\\w+\\s*\\w*\\s*\\w*\\s*\\w*\\s*\\w*', cell)\n    return result","2c5804b7":"#\u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435\u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 + \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043a\u043e\u043b-\u0432\u0430 \u043a\u0443\u0445\u043e\u043d\u044c\ndata['Cuisine Style'].fillna(value=data.City.apply(associated_cuisine), inplace=True)\ndata['Cuisine Style'] = data['Cuisine Style'].apply(making_list)\ndata['cuisine_amount'] = data['Cuisine Style'].apply(lambda x: len(x))","fcde1d1f":"# \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432\u0441\u0435\u0433\u043e 2, \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u043c(\u043f\u0443\u0441\u0442\u044b\u043c \u0441\u043f\u0438\u0441\u043e\u043c) \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c\ndata.Reviews.fillna(data.Reviews.value_counts().index[0], inplace = True)","680cc8dc":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0439 \u0434\u0430\u0442\u044b \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime\ndef date_conversion(cell):\n    resulting_list=[]\n    for i in cell:\n        if int(i[:i.find('\/')])<=12:\n            converted_time = datetime.strptime(i, '%m\/%d\/%Y')\n            resulting_list.append(converted_time)\n        else:\n            if '\/' in i[-4:]:\n                converted_time = datetime.strptime(i, '%d\/%m\/%y')\n                resulting_list.append(converted_time)\n            else:\n                converted_time = datetime.strptime(i, '%d\/%m\/%Y')\n                resulting_list.append(converted_time)\n    return resulting_list","1bacbf35":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 review_dates \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['review_dates'] = data.Reviews.str.findall(r'\\d+\/\\d+\/\\d+')\ndata.review_dates = data.review_dates.dropna().apply(date_conversion)","c8470dd7":"# \u0424\u0443\u043d\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u0432\u044b\u043c \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c\ndef review_t_dif(cell):\n    if len(cell)>=2:\n        dif=max(cell)-min(cell)\n    else:\n        dif=timedelta(days = 0)\n    return dif","a00085ed":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 review_time_span \u043e\u0442\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0435\u0432\u044b\u043c \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c\ndata['review_time_span'] = data.review_dates.dropna().apply(review_t_dif)","05a9950f":"#\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u044b\ndata.review_time_span = data.review_time_span.apply(lambda x: x.total_seconds())","9458d16f":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 visible_reviews \u043e\u0442\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u0432\u0438\u0434\u0438\u043c\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['visible_reviews'] = data.review_dates.apply(lambda x: len(x))","f9f3a250":"data.sample(5)","471df6bc":"sns.scatterplot(x='review_time_span', y='Rating',\n                sizes=(1, 8), linewidth=0,\n                data=data)","80c14bf2":"data['visible_reviews'].hist()","e2e404e8":"sns.catplot(x='visible_reviews', y='Rating',\n            kind=\"violin\", bw=.1, cut=0,\n            data=data)","b8962d5a":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 review_wordbox \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043b\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0432 Reviews\ndata.Reviews = data.Reviews.apply(lambda x: x.lower())\ndata['review_wordbox'] = data.Reviews.str.findall(r'\\w[a-z]+')","8363bbaf":"# \u0412\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0431\u043e\u043b\u0435\u0435 2 \u0440\u0430\u0437 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442 4.5\nwordbox_positive = pd.Series(data[(data['sample'] == 1)&(data.Rating>=4.5)].review_wordbox.sum())\np_words = pd.DataFrame(wordbox_positive.value_counts())\np_words = p_words[p_words[0]>2]","ddb03a0f":"# \u0412\u0441\u0435 \u0441\u043b\u043e\u0432\u0430, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0431\u043e\u043b\u0435\u0435 2 \u0440\u0430\u0437 \u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043e 3.5\nwordbox_negative = pd.Series(data[(data['sample'] == 1)&(data.Rating<=3.5)].review_wordbox.sum())\nn_words = pd.DataFrame(wordbox_negative.value_counts())\nn_words = n_words[n_words[0]>2]","bd238c37":"# \u0421\u043b\u043e\u0432\u0430, \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c\npositive_review_predictors = []\nfor i in p_words.index:\n    if i not in list(n_words.index):\n        positive_review_predictors.append(i)","53c10bed":"# \u0421\u043b\u043e\u0432\u0430, \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441 \u043d\u0438\u0437\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c\nnegative_review_predictors = []\nfor i in n_words.index:\n    if i not in list(p_words.index):\n        negative_review_predictors.append(i)","164cab97":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0441\u043b\u043e\u0432\u0430\u043c. \u041d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 = 0.5\ndef valued_review_score(wordbox):\n    positives = 1\n    negatives = 1\n    for i in wordbox:\n        if i in positive_review_predictors:\n            positives += 1\n        elif i in negative_review_predictors:\n            negatives += 1\n    result = positives\/(positives + negatives)\n    return result","72b88757":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 valued_review \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u043d\u044b\u0439 \u043d\u0430 \u043e\u0441\u043e\u043d\u043e\u0432\u0435 \u0441\u043b\u043e\u0432, \u0441\u043e\u0434\u0435\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 Reviews\ndata['valued_review'] = data.review_wordbox.apply(valued_review_score)","733f0add":"sns.scatterplot(x='valued_review', y='Rating',\n                sizes=(1, 8), linewidth=0,\n                data=data)","bf7d8de6":"# \u041f\u043e\u043c\u0435\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438\ndata['NoF_nan'] = pd.isna(data['Number of Reviews']).astype('uint8')","cc631ec8":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u0438 \u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044e Ranking \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430\ndef avg_reviews(city, i):\n    data_c = data[data.City == city]\n    result = data_c[(data_c.Ranking.quantile(i) <= data_c.Ranking) & (data_c.Ranking < data_c.Ranking.quantile(i+0.2))]['Number of Reviews'].dropna().mean()\n    return result","1ae5254b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0430\u044f \u0441\u0435\u0440\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u0432\u0438\u043d\u0442\u0438\u043b\u044f\ndef quantile(quantile):\n    series=[]\n    for i in data.City.unique():\n        series.append(avg_reviews(i, quantile))\n    return series","e7083aac":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 DF c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ncity_rev = pd.DataFrame({'city': data.City.unique()})\nquantiles = [x\/10 for x in range(8, -1, -2)]\nfor i in quantiles:\n    city_rev[i]=quantile(i)","90655107":"city_rev","74872bc6":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 city_rev \u043f\u043e City \u0438 Ranking\ndef aprx_rev_amount(x):\n    d = data[data.City == x['City']]\n    quantiles = [n\/10 for n in range(8, -1, -2)]\n    for i in quantiles:\n        if d.Ranking.quantile(i) <= x['Ranking'] <= d.Ranking.quantile(i+0.2):\n            result = float(int(city_rev[city_rev.city == x['City']][i]))\n    return result","49862952":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 city_rev\n# fillna() \u043d\u0435 \u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b, \u0442.\u043a. \u0440\u0430\u0447\u0435\u0442\u044b \u0437\u0430\u043d\u0438\u043c\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\nreviews_for_nan = data[data['Number of Reviews'].isna() == True].apply(aprx_rev_amount, axis=1)","cb32e7e0":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c DF\nfor i in list(reviews_for_nan.index):\n    data['Number of Reviews'].loc[i] = reviews_for_nan[i]","776f2649":"# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0433\u043e \u043f\u0430\u0440\u044b \u0433\u043e\u0440\u043e\u0434: \u0434\u043b\u0438\u043d\u043d\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nv_lengths = {}\nfor i in list(data.City.unique()):\n    v_lengths[i] = np.linalg.norm(data[data.City == i].Ranking)","40780c20":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0436\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Ranking \u0438 \u0434\u043b\u0438\u043d\u043d\u044b \u0432\u0435\u043a\u0442\u043e\u0440\u0430 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ndef normalization(row):\n    result = row.Ranking\/v_lengths[row.City]\n    return result","922815f0":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 ranking_norm \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 Ranking\ndata['ranking_norm'] = data.apply(normalization, axis = 1)","cb122452":"sns.scatterplot(x='ranking_norm', y='Rating',\n                sizes=(1, 8), linewidth=0,\n                data=data)","22889c2f":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 City\ncity_state = pd.DataFrame({'city': data.City.unique()})","71ce0a68":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u0430\ndef country(city):\n    coordinates = geolocator.geocode(city)[1]\n    location = geolocator.reverse(coordinates, exactly_one=True)\n    address = location.raw['address']\n    country = address.get('country_code', '')\n    return country","800c690b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u0430 \u0438 \u043a\u043e\u0434\u0443 \u0441\u0442\u0440\u0430\u043d\u044b \ndef city_population(row):\n    city = row.city\n    country = row.country\n    tmp = 'https:\/\/public.opendatasoft.com\/api\/records\/1.0\/search\/?dataset=worldcitiespop&q=%s&sort=population&facet=country&refine.country=%s'\n    cmd = tmp % (city, country)\n    res = requests.get(cmd)\n    dct = json.loads(res.content)\n    info = dct['records'][0]['fields']\n    if 'population' in info.keys():\n        result = info['population']\n    else:\n        result = 0\n    return result","5d4edca1":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043a\u043e\u0434\u0430 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0432\u0435\u0440\u0445\u0433\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440, \u0437\u0430\u043c\u0435\u043d\u0430 \u043d\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043f\u043e \u043a\u043e\u0434\u0443\ncity_state['country'] = city_state.city.apply(country)\ncity_state['population'] = city_state.apply(city_population, axis = 1)\ncity_state.country = city_state.country.apply(lambda x: x.upper())\ncity_state.country = city_state.country.apply(lambda x: pycountry.countries.get(alpha_2=x).name)","0945106e":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0441 GIT, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043f\u0430\u0440\u044b \u0441\u0442\u0440\u0430\u043d\u0430, \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435\ndemonyms = pd.read_csv('\/kaggle\/input\/country-adjective-pairs\/demonyms.csv')","d59d523a":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0435\n# \u0415\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0430\u0449\u0430\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435\ndef adjectives(country):\n    result = list(demonyms[demonyms.Aalborg == country].Aalborgenser)\n    if len(result) == 0:\n        alternative = pycountry.countries.get(name=country).official_name\n        result = list(demonyms[demonyms.Aalborg == alternative].Aalborgenser)\n    return result","fe022c5f":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ncity_state['adjectives'] = city_state.country.apply(adjectives)","e3dce4d7":"city_state","9f7c3276":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 native_cuisine.\n# ==1, \u0435\u0441\u043b\u0438 \u043e\u0434\u0438\u043d \u0438\u0437 \u0442\u0435\u0433\u043e\u0432 Cuisine Style \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0433\u043e\u0440\u043e\u0434\u0430\ndef native(row):\n    result = 0\n    for i in city_state[city_state.city == row.City].adjectives.sum():\n        if i in row['Cuisine Style']:\n            result = 1\n    return result","d3be3dcd":"# \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 native_cuisine \u043e\u0442\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0435\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043a\u0443\u0445\u043d\u044f \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0439\ndata['native_cuisine'] = data.apply(native, axis = 1)","db6b88d3":"#\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u043e\u0440\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0438 \u0433\u043e\u0440\u043e\u0434 - \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\nmapping_population = {}\nfor i in city_state.index:\n    mapping_population[city_state.city[i]]=city_state.population[i]","f718a3cd":"# \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f\n# \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043e\u0442\u043d\u0430\u0448\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0440\u0430\u043d\u043a\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n# \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043e\u0431\u043b\u0430\u0434\u0430\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0440\u0430\u043d\u0433\u043e\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445\ndata['city_population'] = data.City.map(mapping_population)\ndata['feature_1']=data['city_population']\/data['Ranking']","e21afa52":"data.sample(5)","999a890b":"data['native_cuisine'].hist(bins=2)","fe015fd0":"sns.catplot(x='native_cuisine', y='Rating',\n            kind=\"violin\", bw=.1, cut=0,\n            data=data)","beeba1cb":"data['city_population'].hist(bins=10)","30c12147":"sns.scatterplot(x='feature_1', y='Rating',\n                sizes=(1, 8), linewidth=0,\n                data=data)","f8e9dd73":"data.info()","730aff93":"data.describe()","f4053d01":"correlation = data.corr()\nax = plt.subplots(figsize=(15, 15))\nsns.heatmap(correlation, annot=True, cmap='vlag', linewidths=1, center=0)","b828403d":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443\ndata = pd.get_dummies(data, columns=[ 'City'], dummy_na=False)","2543e1c3":"data.sample(3)","066a410b":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 Cuisine Style\ndef dummy_cuisine(cell):\n    if item in cell:\n        return 1\n    return 0","c2b6c54f":"# \u0421\u043f\u0438\u0441\u043e\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\nall_cuisines = pd.Series(data['Cuisine Style'].sum()).unique()","b89bd698":"# \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\nfor item in all_cuisines:\n    data[item] = data['Cuisine Style'].apply(dummy_cuisine)","96ba571a":"data.sample(3)","55573c73":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443\ndata = pd.get_dummies(data, columns=[ 'price_class'], dummy_na=False)","bf3ba01c":"data.sample(3)","267c4516":"object_columns = [s for s in data.columns if data[s].dtypes == 'object']","8e4628ae":"object_columns","cf6716c3":"data.drop(object_columns, axis = 1, inplace=True)","e68efdc4":"df_preproc = data\ndf_preproc.sample(5)","e955e462":"df_preproc.info()","5d8d0023":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","7ade2090":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","55615223":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","c23b0fa7":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","0cd0e710":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","d27632a6":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","2b23cf07":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","a9a98eef":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","1346b801":"test_data.sample(10)","c9f0fd52":"test_data = test_data.drop(['Rating'], axis=1)","27cdee79":"sample_submission","2bcd33ab":"predict_submission = model.predict(test_data)","4675618e":"predict_submission","6cef4318":"adjusted_submission=[]\nfor i in predict_submission:\n    if i%1>=0.75:\n        adjusted_submission.append(int(i)+1)\n    elif 0.75>i%1>=0.25:\n        adjusted_submission.append(int(i)+0.5)\n    else:\n        adjusted_submission.append(int(i))\nadjusted_submission","0a189b62":"sample_submission['Rating'] = adjusted_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","0e3f4b89":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","35f0ff15":"![](https:\/\/i.imgur.com\/mtimFxh.png)","12a1d00f":"### Restaurant_id","c8b10b03":"\u0412 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u0441\u0440\u0435\u0434\u043d\u0435\u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0430\u043c\u043e\u043c\u0443 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u0432 DF (\u0441\u0440\u0435\u0434\u043d\u0438\u0439). \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0438\u043c\u043c\u0435\u0442\u0441\u044f \u0440\u044f\u0434 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439.","50cb3c26":"\u0421\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0432\u043e\u0435\u043d\u043d\u043d\u044b \u043f\u043e City == Madrid|City == Warsaw","857ecd0a":"### 4. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","b07b7151":"# DATA","d38929bd":"### 10.1 City","d83eb54c":"## \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u043e\u0442 \u0441\u0442\u0440\u043e\u043a\/\u0441\u043f\u0438\u0441\u043a\u043e\u0432","340af4eb":"### 9. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043f. \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 City","0cf633d0":"### 2. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432","0f2b4cb6":"# \u041f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u0447\u043d\u044b\u0439 \u0438\u0442\u043e\u0433","998293b9":"\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u0432 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043c\u0435\u0436\u0434\u0443 \u0434\u0443\u0431\u043b\u044f\u043c\u0438 \u0432\u0430\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c \u0436\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435, \u0447\u0442\u043e \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0432 \u0441\u0440\u0435\u0437\u0435","3e8e0cbb":"### Ranking","585f7011":"## 10. Dummy-variables","22526ce3":"\u041d\u0435 \u0441\u0442\u0430\u043b \u043f\u0438\u0441\u0430\u0442\u044c \u0444\u0443\u0442\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438, \u0442.\u043a. \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432 \u0438 \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446.","000f4dd8":"## \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","371a85bc":"### Number of Reviews","b95920f2":"### City","344aecb4":"### 8. \u041d\u043e\u0440\u043c\u043e\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 City","2ad7a759":"# import","f6df87dd":"### Reviews","3c6fae24":"> # \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","83eb2d64":"### 7. \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","c16afe10":"### 5. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u043e\u043f. \u043f\u0430\u0440\u043c\u0435\u0442\u0440\u043e\u0432","07578af2":"### 10.2 Cuisine Style","c4b8d82c":"### Price Range","1971a0da":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","98f3466b":"## \u041f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 DF","f0bf43a8":"### 3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432","1901ea0c":"## \u0410\u043d\u0430\u043b\u0438\u0437, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","635f8cd9":"# Cleaning and Prepping Data \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","c9d6cb50":"### 10.3 Price Range","33acfe2d":"# Model \n\u0421\u0430\u043c ML","a8fdbf55":"### 1. \u041e\u0442\u043c\u0435\u0442\u043a\u0430 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432","a065fd6f":"\u0422\u0430\u043a \u043a\u0430\u043a \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 ID_TA \u0438 URL_TA \u043c\u0435\u043d\u044c\u0448\u0435 50,000, \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b","8f698f26":"### Cuisine Style","19b2b20e":"\u0414\u043b\u044f \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u0441\u0435\u0442\u0435\u0439 \u043d\u0438\u0436\u0435 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","cb994a57":"### 6. \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445","eeef9cf7":"\u0421\u0443\u0434\u044f \u043f\u043e \u0432\u0441\u0435\u043c\u0443, \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0434\u0443\u0431\u043b\u044f\u043c\u0438 \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0435\u0442\u0441\u044f \u0442\u0435\u043c, \u0447\u0442\u043e \u043e\u043d\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 kaggle_task \u0438 main_task.\n\n\u0418\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0443 \u0441\u0442\u0440\u043e\u043a\u0438 \u0435\u0441\u0442\u044c \u0434\u0443\u0431\u043b\u044c","a09c271c":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor"}}