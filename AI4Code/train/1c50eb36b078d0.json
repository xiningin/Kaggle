{"cell_type":{"5aaf7763":"code","ab1c7c0d":"code","79bf926c":"code","b7f0aa4d":"code","48ce10ce":"code","c40e65e4":"code","c7f6746b":"code","7722f9fb":"code","068718b1":"code","8faed04a":"code","bf025fa6":"code","5a3cbe8d":"code","075a5697":"code","3bd5b984":"code","314bd868":"code","02f96b7a":"code","406549ea":"code","0c9f9eeb":"code","4e5dee3b":"code","7ec92014":"code","dd8e13f1":"code","9f9bd9e3":"code","c069ba05":"code","54d0e287":"code","8175c9cd":"code","36fb88a6":"code","b3eee7cc":"code","b67755ae":"code","e7a167d8":"code","14dbd8f5":"code","05c09f14":"code","54b1e39a":"code","b4981505":"code","4ec5720a":"code","0c6c7981":"code","0715e3a7":"code","7fd074d2":"code","ff8e908a":"code","e660ab53":"code","5193ec8b":"code","ea86f896":"code","39fce25e":"code","98f0606c":"markdown","cecaf417":"markdown","ddb17176":"markdown","d895e7a6":"markdown","354d7307":"markdown","989f4aa2":"markdown","80de4f11":"markdown","d31409b7":"markdown","568e71a5":"markdown","a710f0e0":"markdown","d9a033ad":"markdown","d67ee419":"markdown","423070cf":"markdown"},"source":{"5aaf7763":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('ggplot')\nimport datetime as dt\nimport seaborn as sns\n%matplotlib inline","ab1c7c0d":"trend = pd.read_csv('..\/input\/coronavirusdataset\/trend.csv',parse_dates=['date'])\nroute = pd.read_csv('..\/input\/coronavirusdataset\/route.csv',parse_dates=['date'])\npatient = pd.read_csv('..\/input\/coronavirusdataset\/patient.csv',parse_dates=['confirmed_date'])\ntime=pd.read_csv('..\/input\/coronavirusdataset\/time.csv',parse_dates=['date'])","79bf926c":"plt.figure(figsize=(12,8))\nplt.plot(time['date'],time['new_confirmed'],'ro:')\n# sns.lineplot(data=time,x='date',y='new_confirmed',markers=True,dashes=True)\nplt.xticks(rotation=30)\nplt.title('How many COVID-19 confirmed peple')","b7f0aa4d":"fig,ax1=plt.subplots(figsize=(12,8))\nax2 = ax1.twinx()\nconfirmed_pivot = time.pivot_table(index='date',values='new_confirmed',aggfunc='sum').reset_index()\nsns.lineplot(x=confirmed_pivot['date'],y=confirmed_pivot['new_confirmed'].cumsum(),ax=ax1,label='confirmed')\nax1.set_ylim=[0,10000]\nax1.set_ylabel('Confirmation Count')\nax1.legend(loc='upper left')\nax1.tick_params(rotation=60)\n\ndeceased_pivot = time.pivot_table(index='date',values='new_deceased',aggfunc='sum').reset_index()\nsns.lineplot(x=deceased_pivot['date'],y=deceased_pivot['new_deceased'].cumsum(),color='blue',ax=ax2,label='deceased')\nax2.set_ylabel('Decease Count')\nax2.set_ylim=[0,100]\nax2.legend(loc='upper center')\nax2.tick_params(rotation=60)\n\n\nplt.title('Confirmation and Decease Accumulate Count')\nplt.show()","48ce10ce":"plt.figure(figsize=(12,8))\nreleased_pivot = time.pivot_table(index='date',values='new_released',aggfunc='sum').reset_index()\nsns.lineplot(x=released_pivot['date'],y=released_pivot['new_released'].cumsum(),label='released')\ndeceased_pivot = time.pivot_table(index='date',values='new_deceased',aggfunc='sum').reset_index()\nsns.lineplot(x=deceased_pivot['date'],y=deceased_pivot['new_deceased'].cumsum(),color='blue',label='deceased')\nplt.xticks(rotation=30)\nplt.legend(loc=0)\nplt.title('Released and Deceased accumulate Count')","c40e65e4":"fig, (ax1,ax2) = plt.subplots(ncols=2,figsize=(12,8))\nsns.countplot(patient['group'],ax=ax1)\nax1.tick_params(labelrotation=90)\nax1.set(title='Belonging to the infected')\nsns.countplot(patient['infection_reason'],ax=ax2)\nax2.tick_params(labelrotation=90)\nax2.set(title='Infection Reason')","c7f6746b":"idx= patient[patient['group'] == 'Shincheonji Church']['infection_reason'].isnull().index","7722f9fb":"patient['infection_reason'][idx] = 'visit to Shincheonji Church'","068718b1":"sns.countplot(patient['infection_reason'])\nplt.xticks(rotation=90)","8faed04a":"plt.figure(figsize=(12,8))\nsns.countplot(patient['region'])\nplt.xticks(rotation=90)\nplt.title('Where is most infected')","bf025fa6":"import folium\nsouthkorea_map = folium.Map(location=[36.55,126.983333 ], zoom_start=7,tiles='Stamen Toner')\n\nfor lat, lon,city in zip(route['latitude'], route['longitude'],route['city']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                      popup =('City: ' + str(city) + '<br>'),\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(southkorea_map)\nsouthkorea_map","5a3cbe8d":"import plotly.express as px\nstates = pd.DataFrame(patient[\"state\"].value_counts())\nstates[\"status\"] = states.index\nstates.rename(columns={\"state\": \"count\"}, inplace=True)\n\nfig = px.pie(states,\n             values=\"count\",\n             names=\"status\",\n             title=\"Current state of patients\",\n             template=\"seaborn\")\nfig.update_traces(rotation=90, pull=0.05, textinfo=\"value+percent+label\")\nfig.show()\n# Thanks for Vansh Jatana","075a5697":"col = [\"confirmed_date\", \"released_date\", \"deceased_date\"]\nfor i in col:\n    patient[i] = pd.to_datetime(patient[i])\npatient['country'].fillna(patient['country'].mode()[0],inplace=True)\npatient['confirmed_date'].fillna(dt.datetime(2020,2,2),inplace=True)\npatient['state'].fillna(patient['state'].mode()[0],inplace=True)","3bd5b984":"for i in range(patient.shape[0]):\n    if type(patient['deceased_date'][i]) == float:\n        if patient['state'][i] == 'released':\n            patient['deceased_date'][i] = 'survived'\n        elif patient['state'][i] == 'isolated':\n            patient['deceased_date'][i] = \"don't know\"\n    else:\n        continue\nfor i in range(patient.shape[0]):\n    if type(patient['released_date'][i]) == float:\n        if patient['state'][i] == 'deceased':\n            patient['released_date'][i] = 'deceased'\n        else:\n            patient['released_date'][i] = \"don't know\"\n    else:\n        continue","314bd868":"idx = patient[patient['group']=='Shincheonji Church'].index\npatient['infected_by'][idx] = 31.0\npatient['group'].fillna('None',inplace=True)\npatient['infection_order'] = patient['infection_order'].fillna(0.0).astype(int)","02f96b7a":"patient['birth_year'] = patient['birth_year'].fillna(0.0).astype(int)\npatient['birth_year'] = patient['birth_year'].apply(lambda x: x if x>0 else np.nan)\npatient['age'] = 2020-patient['birth_year'] + 1 # korean age\nimport math\ndef age_range(age):\n    if age >= 0: # not NaN\n        if age % 10 != 0:\n            lower = int(math.floor(age \/ 10.0)) * 10\n            upper = int(math.ceil(age \/ 10.0)) * 10 - 1\n            return f\"{lower}-{upper}\"\n        else:\n            lower = int(age)\n            upper = int(age + 9) \n            return f\"{lower}-{upper}\"\n    return \"Unknown\"\npatient['age_range'] = patient['age'].apply(lambda x: age_range(x))","406549ea":"patient['relased_time'] = patient['released_date'] - patient['confirmed_date']\npatient['deceased_time'] = patient['deceased_date'] - patient['confirmed_date']","0c9f9eeb":"tmp=[]\nidx = []\nfor i in range(patient.shape[0]):\n    if type(patient['sex'][i]) == str:\n        tmp.append(patient['age_range'][i]+'_'+patient['sex'][i])\n        idx.append(i)\n    else:\n        continue\npatient['age_sex']='None'\npatient['age_sex'][idx] = tmp","4e5dee3b":"patient.tail()","7ec92014":"released = patient[patient['state'] == 'released']\nfig,(ax1,ax2) = plt.subplots(ncols=2,figsize=(20,5))\nsns.countplot(released['age_range'].sort_values(),ax=ax1)\nsns.kdeplot(released['age'],shade=True,ax=ax2)","dd8e13f1":"tmp = pd.DataFrame(released['age_range'].value_counts()\/patient['age_range'].value_counts())\ntmp = tmp.dropna()\ntmp.plot(kind='bar')","9f9bd9e3":"deceased = patient[patient['state'] == 'deceased']\nfig,(ax1,ax2) = plt.subplots(ncols=2,figsize=(20,5))\nsns.countplot(deceased['age_range'].sort_values(),ax=ax1)\nax1.set(title='Deceased')\nsns.kdeplot(deceased['age'],shade=True,ax=ax2)","c069ba05":"tmp = pd.DataFrame(deceased['age_range'].value_counts()\/patient['age_range'].value_counts())\ntmp = tmp.dropna()\ntmp.plot(kind='bar')","54d0e287":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3,figsize=(20,8))\nsns.countplot(deceased['age_sex'].sort_values(ascending=True),ax=ax1)\nax1.tick_params(rotation=90)\nsns.countplot(deceased['age_range'],hue=deceased['sex'],ax=ax2)\nsns.countplot(deceased['sex'],ax=ax3)","8175c9cd":"sns.countplot(deceased['region'])","36fb88a6":"tmp=time['new_confirmed'].cumsum()\ndataset = pd.concat([time['date'],tmp],axis=1)\ndataset = dataset[30:]","b3eee7cc":"from fbprophet import Prophet","b67755ae":"prophet = pd.DataFrame(dataset)\nprophet.columns = ['ds','y']\nprophet","e7a167d8":"m=Prophet()\nm.fit(prophet)","14dbd8f5":"future = m.make_future_dataframe(periods=10)\nforecast = m.predict(future)\nforecast.tail(10)","05c09f14":"from fbprophet.plot import plot_plotly\nimport plotly.offline as py\nfig = plot_plotly(m, forecast)\npy.iplot(fig) \nfig = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","54b1e39a":"time.head()","b4981505":"daily_count = patient.groupby(patient.confirmed_date).id.count()\ndataset = daily_count.resample('D').first().fillna(0).cumsum()\ndataset = dataset[30:]","4ec5720a":"tmp=time['new_deceased'].cumsum()\ndeceased_prophet = pd.concat([time['date'],tmp],axis=1)\ndeceased_prophet.columns = ['ds','y']\ndeceased_prophet = deceased_prophet[35:]\ndeceased_prophet","0c6c7981":"n=Prophet()\nn.fit(deceased_prophet)\nfuture_deceased = n.make_future_dataframe(periods=10)\nforecast_deceased = n.predict(future_deceased)\nforecast_deceased.tail(10)","0715e3a7":"fig = plot_plotly(n, forecast_deceased)\npy.iplot(fig) \nfig = n.plot(forecast_deceased,xlabel='Date',ylabel='Deceased Count')","7fd074d2":"tmp=time['new_released'].cumsum()\nprophet_released = pd.concat([time['date'],tmp],axis=1)\nprophet_released.columns=['ds','y']\nprophet_released = prophet_released[40:]\nprophet_released","ff8e908a":"j=Prophet()\nj.fit(prophet_released)\nfuture_released = j.make_future_dataframe(periods=10)\nforecast_released = j.predict(future_released)\nforecast_released.tail(10)","e660ab53":"fig = plot_plotly(j, forecast_released)\npy.iplot(fig) \nfig = j.plot(forecast_released,xlabel='Date',ylabel='Released Count')","5193ec8b":"confirmed_forecast = forecast[['ds','trend']].tail(10)\nconfirmed_forecast.columns=['date','predict_confirmed']\nreleased_forecast = forecast_released[['ds','trend']].tail(10)\nreleased_forecast.columns=['date','predict_released']\nreleased_forecast['date'] = released_forecast['date'].astype(str)\ndeceased_forecast = forecast_deceased[['ds','trend']].tail(10)\ndeceased_forecast.columns = ['date','predict_deceased']\nfor i in [confirmed_forecast,released_forecast,deceased_forecast]:\n    i['date'] = i['date'].astype(str)\n","ea86f896":"fig,(ax1,ax2,ax3) = plt.subplots(ncols=3,figsize=(20,12))\nsns.pointplot(data=confirmed_forecast,x='date',y='predict_confirmed',color='purple',ax=ax1)\nax1.tick_params(rotation=60)\nax1.set(title='Predict confirmer 3.10~19')\n\nsns.pointplot(data=released_forecast,x='date',y='predict_released',color='blue',ax=ax2)\nax2.tick_params(rotation=60)\nax2.set(title='Predict to be released 3.10~19')\n\nsns.pointplot(data=deceased_forecast,x='date',y='predict_deceased',ax=ax3)\nax3.tick_params(rotation=60)\nax3.set(title='Predict dead 3.10~19')\n\nplt.legend(loc=0)","39fce25e":"for i in [confirmed_forecast,released_forecast,deceased_forecast]:\n    print(i.tail(1))","98f0606c":"# Modeling","cecaf417":"\uc804\uccb4 \ud655\uc9c4\uc790 \uc218 \ub300\ube44 \uc644\uce58\uc790 \uc218\ub97c \ube44\uad50\ud55c \uacb0\uacfc \uc5ed\uc2dc 50\ub300\uac00 \uac00\uc7a5 \ub9ce\uc558\ub2e4. \ud2b9\uc774\ud55c \uc810\uc740 10\ub300\uc758 \ube44\uc728\uc774 \uae09\uaca9\ud558\uac8c \uc0c1\uc2b9\ud588\ub2e4\ub294 \uac83\uc774\ub2e4.\n\nCompared to the total number of confirmed patients, 50s was the most frequent result. \nThe peculiarity is that the proportion of teenagers has risen sharply.","ddb17176":"3\uc6d4 19\uc77c\uc5d0\ub294 \ud655\uc9c4\uc790 13000\uba85 \uaca9\ub9ac \ud574\uc81c 309\uba85 \uc0ac\ub9dd\uc790 82\uba85\uc774 \ub420 \uac83\uc73c\ub85c \uc608\uc0c1\ud55c\ub2e4.\n\nOn March 19, 13,000 confirmed cases are expected to be removed, 309 from quarantine and 82 dead.\n\n\ud55c\uad6d \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc804 \uc138\uacc4\uc801\uc73c\ub85c COVID-19\uac00 \ubb38\uc81c\uac00 \ub418\uace0 \uc788\ub2e4.\n\nCOVID-19 is a problem not only in Korea but also around the world.\n\n\ud558\ub8e8 \ube68\ub9ac COVID-19 \uc0ac\ud0dc\uac00 \uc7a0\uc7a0\ud574\uc9c0\uae38 \ubc14\ub780\ub2e4.\n\nHopefully, the COVID-19 situation will calm down as soon as possible.\n\n\ub610\ud55c COVID-19\uc758 \ubc1c\uc6d0\uc9c0\ub294 \ud55c\uad6d\uc774 \uc544\ub2c8\ub77c \uc911\uad6d\uc784\uc744 \ub2e4\uc2dc \ud55c \ubc88 \uac15\uc870\ud55c\ub2e4.\n\nIt also stresses once again that the origin of COVID-19 is China, not South Korea.","d895e7a6":"# feature Enginerring","354d7307":"\uc0ac\ub9dd\uc790\uc758 \ub300\ubd80\ubd84\uc740 \ub300\uad6c\ub098 \uacbd\uc0c1\ubd81\ub3c4 \uc0ac\ub78c\uc774\ub2e4.\n\n\nMost of the dead live in Daegu or Gyeongsangbuk-do","989f4aa2":"\uc218\ub3c4\uad8c\uc5d0 \uc0ac\ub294 \uc0ac\ub78c\uc774 \uac00\uc7a5 \ub9ce\uc774 \ud655\uc9c4\uc774 \ub418\uc5c8\uace0 \uacbd\uc0c1\ubd81\ub3c4,\ub300\uad6c\uac00 \ub4a4\ub97c \uc774\uc5c8\ub2e4.\n\nPeople living in the capital area were the most confirmed, followed by Gyeongsangbuk-do and Daegu","80de4f11":"\uc2e0\ucc9c\uc9c0 \uad50\ud68c\uc758 \ubc29\ubb38\uc774 \ucf54\ub85c\ub098 \ud655\uc0b0\uc5d0 \ub9ce\uc740 \uae30\uc5ec\ub97c \ud588\uc73c\ubbc0\ub85c group\uc774 \uc2e0\ucc9c\uc9c0 \uad50\ud68c\uc778 \uc0ac\ub78c\ub4e4 \uc911 \uac10\uc5fc \uc774\uc720\uac00 \uacb0\uce21\uce58\uc778 \uc0ac\ub78c\ub4e4\uc744 \uc2e0\ucc9c\uc9c0 \uad50\ud68c \ubc29\ubb38\uc73c\ub85c \uacb0\uce21\uce58\ub97c \ub300\uccb4\ud558\uaca0\ub2e4.\n\nSince the visit of Shincheonji Church has contributed a lot to the spread of corona, we will replace the missing ones by visiting the Shincheonji church among those whose group is Shincheonji Church.","d31409b7":"\uc815\ub9ac\ud558\uc790\uba74 \ub300\uad6c\ub098 \uacbd\uc0c1\ubd81\ub3c4\uc5d0 \uac70\uc8fc\ud558\ub294 \uace0\ub839\uc758 \ub0a8\uc131\uc774 \uac00\uc7a5 \uc0ac\ub9dd\ud560 \ud655\ub960\uc774 \ub192\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4.\n\nIn summary, older men living in Daegu or Gyeongsangbuk-do are most likely to die.","568e71a5":"50\ub300\uc758 \uc644\uce58\uc790 \uc218 \uac00 \uac00\uc7a5 \ub9ce\ub2e4.\n\n\n50s had the highest number of released people","a710f0e0":"# Visualization - 2","d9a033ad":"\uc989, \ub098\uc774\uac00 \ub9ce\uace0 \ub0a8\uc790\uc77c \uc218\ub85d \uc0ac\ub9dd\ud560 \ud655\ub960\uc774 \ub192\ub2e4.\n\n\nIn other words, older and older men are more likely to die.","d67ee419":"# Visualization - 1 (EDA)","423070cf":"\ub098\uc774\uac00 \ub9ce\uc744\uc218\ub85d \uc0ac\ub9dd \ud655\ub960\uc774 \ub192\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\nThe older the confirmed person, the more likely it is to die.\n"}}