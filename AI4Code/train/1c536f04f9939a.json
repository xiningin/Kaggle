{"cell_type":{"5d852d94":"code","052fe1ac":"code","40380b01":"code","b5f4acec":"code","ccf1a793":"markdown","dace80c5":"markdown","0b45c1c5":"markdown"},"source":{"5d852d94":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport json\nimport plotly.graph_objects as go\nimport plotly.express as px","052fe1ac":"with open(\"\/kaggle\/input\/country-data\/country_data.json\") as response: \n    counties = json.load(response)\n\n\ndf1 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2016-08.csv\",            \n                   dtype={\"fips\": str})\ndf2 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2016-10.csv\",\n                 dtype={\"fips\": str})\ndf3 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2017-10.csv\",\n                   dtype={\"fips\": str})\ndf4 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2019-11.csv\",\n                   dtype={\"fips\": str})\ndf5 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2020-03.csv\",\n                   dtype={\"fips\": str})\ndf6 = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2020-07.csv\",\n                   dtype={\"fips\": str})\n\ndfus=pd.read_csv(\"\/kaggle\/input\/simple-map-us-cities-data\/uscities.csv\")\ndfin = pd.read_csv(\"\/kaggle\/input\/tx-county-income\/Untitled spreadsheet - TX Counties with FIPS.csv\")\n\n# for plotting major texas cities\nmask = dfus[\"state_id\"] == \"TX\"\ntexas_cities = dfus[mask]\nmask2 = texas_cities[\"population\"] > 200000\nbig_texas_cities = texas_cities[mask2]\ncities_for_map = big_texas_cities[[\"city\", \"lat\", \"lng\", \"population\"]]\n\n# show counties with percent score\nfig = px.choropleth(df3, geojson=counties, locations='fips', color='perc_calc_num',\n                         color_continuous_scale=\"Viridis\",\n                         range_color=(-1, 100),\n                         scope=\"usa\",\n                         custom_data=[\"overall_evaluation\"],\n                         labels={'perc_calc_num':'Website Score', 'fips':'County ID'},\n                         hover_name = 'county_name',\n                         hover_data=['overall_evaluation']\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n# to show texas cities on map by 100,000s\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    lon = cities_for_map['lng'],\n    lat = cities_for_map['lat'],\n    hoverinfo = 'text',\n    text = cities_for_map['city'],\n    name = \"Major Cities\",\n    mode = 'markers',\n    marker = dict(\n        size = cities_for_map[\"population\"]\/100000,\n        color = 'rgb(102,102,102)', \n        line = dict(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    )))\n# show income by $5,000s\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    lon = cities_for_map['lng'],\n    lat = cities_for_map['lat'],\n    hoverinfo = 'text',\n    text = cities_for_map['city'],\n    name = \"Income by 5,000\",\n    mode = 'markers',\n    marker = dict(\n        size = dfin[\"Dollars_2018\"]\/5000,\n        color = 'rgb(205,205,102)',\n        #colorbar=dict(\n         #       title = 'Income in 5,000s',\n          #      titleside = 'bottom',\n           #     tickmode = 'array',x=0),\n        line = dict(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    )))\nfig.update_geos(fitbounds=\"locations\")\nfig.layout.update(showlegend=False)\nfig.show()","40380b01":"# new dataframe with the all the shared columns\ndf_all = df1[['county_name', 'fips','date','perc_calc_na', 'perc_calc_num', 'overall_evaluation']]\ndf_all = df_all.append(df2[['county_name', 'fips','date','perc_calc_na', 'perc_calc_num', 'overall_evaluation']])\ndf_all = df_all.append(df3[['county_name', 'fips','date','perc_calc_na', 'perc_calc_num', 'overall_evaluation']])\ndf_all = df_all.append(df4[['county_name', 'fips','date','perc_calc_na', 'perc_calc_num', 'overall_evaluation']])\ndf_all = df_all.append(df5[['county_name', 'fips','date','perc_calc_na', 'perc_calc_num', 'overall_evaluation']])\n\n# county by percent of scores, animated by date\nfig = px.choropleth(df_all, geojson=counties, locations='fips', color='perc_calc_na',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 100),\n                           scope=\"usa\",\n                          labels={'fips':'County ID', \"perc_calc_na\":\"Website Score\", \"date\":\"Date\", \"overall_evaluation\":\"Overall Evaluation\"},\n                          hover_name = 'county_name',\n                          hover_data=['overall_evaluation'] \n                          ,animation_frame='date') \n\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","b5f4acec":"df = pd.read_csv(\"\/kaggle\/input\/lwv-oct-2017\/LWV_2016-08.csv\",\n                   dtype={\"fips\": str})\ndfus=pd.read_csv(\"\/kaggle\/input\/simple-map-us-cities-data\/uscities.csv\")\ndfin = pd.read_csv(\"\/kaggle\/input\/tx-county-income\/Untitled spreadsheet - TX Counties with FIPS.csv\")\ndfc = pd.read_csv(\"\/kaggle\/input\/centroids\/Texas_Counties_Centroid_Map.csv\")\n\n# counties ranked by income\nfig = px.choropleth(dfin, geojson=counties, locations='FIPS', color='Rank_in_state_dollars_2018',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(1, 254),\n                           scope=\"usa\",\n                            labels={'Rank_in_state_dollars_2018':\"Income Ranking by County\"}\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\n# join score and FIPS to the centroid data\ndf[['fips']] = df[['fips']].astype(int)\ndfc = dfc.merge(df[['fips','perc_calc_num']], how = \"left\", left_on = \"FIPS\", right_on = \"fips\")\n\n# Add centroids to show score\nfig.add_trace(go.Scattergeo(\n    locationmode = 'USA-states',\n    lat = dfc['Y (Long)'],\n    lon = dfc['X (Lat)'],\n    hoverinfo = 'text',\n    text = dfc['CNTY_NM'],\n    name = \"Score\",\n    mode = 'markers',\n    marker = dict(\n        size = np.sqrt(dfc[\"perc_calc_num\"]+1),\n        color = dfc[\"perc_calc_num\"],\n        colorscale=\"inferno\",\n        colorbar=dict(\n                title = 'Website Rating %',\n                titleside = 'top',\n                tickmode = 'array',x=-.1), # the x puts the colorbar on the left\n        line = dict(\n            width = 3,\n            color = 'rgba(68, 68, 68, 0)'\n        )\n    )))\nfig.update_geos(fitbounds=\"locations\")\nfig.show()","ccf1a793":"Sample visualization showing the 2017-10 data with the percent of total points represented in each county. The gray circles are populations in 100,000s and the yellow are incomes in 5,000s. \n\n* https:\/\/plotly.com\/python\/choropleth-maps\/ - general Choropleth info\n* https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/geojson-counties-fips.json - instead of the link, I copied the json into a file so I could use it in Kaggle\n* https:\/\/simplemaps.com\/data\/us-cities - County Populations & Income\n* https:\/\/www.dshs.texas.gov\/chs\/info\/info_txco.shtm - County FIPS\n* https:\/\/towardsdatascience.com\/how-to-build-an-immersive-geo-bubble-map-with-plotly-bb20eb70414f - Tutorial","dace80c5":"This shows the county scores without including any counties that did not have a voter website with an animation by date. Note the variance in scores across the different surveys and the increase in counties with voter websites. ","0b45c1c5":"This example is the rank in state income for the counties, and the 2016-08 data represented by the color of the circles at the centroids - the size is the sqare root of the percent of total points.\n\nCentroid data: https:\/\/data.texas.gov\/dataset\/Texas-Counties-Centroid-Map\/ups3-9e8m"}}