{"cell_type":{"c1247e80":"code","1ee1897f":"code","65b607e5":"code","a5bd649e":"code","f55b6e84":"code","fa39850c":"code","d41aecdf":"code","fb2058f5":"code","b44c674a":"code","14f6f9aa":"code","493cd2b3":"code","f4da61b7":"code","45289360":"code","83cc3d85":"code","ec97058e":"code","4ec9d5e5":"code","f08f5eb6":"code","78f6597b":"markdown","9bc225f0":"markdown"},"source":{"c1247e80":"import sys\n!curl -s https:\/\/course.fast.ai\/setup\/colab | bash\n!git clone https:\/\/github.com\/yabhi0807\/libml1.git \/kaggle\/tmp\/fastai # This is my repo with all the fastai(updated) libraries \nsys.path.append('\/kaggle\/tmp\/fastai')\n!mkdir \/kaggle\/tmp\/data\n!mkdir \/kaggle\/tmp\/data\/dogscats\n!ln -s \/kaggle\/tmp\/fastai \/kaggle\/working\/\n!ln -s \/kaggle\/tmp\/data \/kaggle\/working\/\n\n!wget -O \/kaggle\/tmp\/fastai\/weights.tgz http:\/\/files.fast.ai\/models\/weights.tgz\n!tar xvfz \/kaggle\/tmp\/fastai\/weights.tgz -C \/kaggle\/tmp\/fastai","1ee1897f":"!wget http:\/\/files.fast.ai\/data\/dogscats.zip \n!unzip dogscats.zip\n!mv dogscats\/* \/kaggle\/tmp\/data\/dogscats\n!rm -rf dogscats\n!rm -rf dogscats.zip\n!ls \/kaggle\/tmp\/data\/dogscats\/","65b607e5":"# Put these at the top of every notebook, to get automatic reloading and inline plotting\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","a5bd649e":"# This file contains all the main external libs we'll use\nfrom fastai.imports import *\n\nfrom fastai.transforms import *\nfrom fastai.conv_learner import *\nfrom fastai.model import *\nfrom fastai.dataset import *\nfrom fastai.sgdr import *\nfrom fastai.plots import *\n\nPATH = \"\/kaggle\/tmp\/data\/dogscats\/\"\nsz=299\narch=resnext50\nbs=28","f55b6e84":"tfms = tfms_from_model(arch, sz, aug_tfms=transforms_side_on, max_zoom=1.1)\ndata = ImageClassifierData.from_paths(PATH, tfms=tfms, bs=bs, num_workers=4)\nlearn = ConvLearner.pretrained(arch, data, precompute=True, ps=0.5)","fa39850c":"learn.fit(1e-2, 1)\nlearn.precompute=False","d41aecdf":"learn.fit(1e-2, 2, cycle_len=1)","fb2058f5":"learn.unfreeze()\nlr=np.array([1e-4,1e-3,1e-2])","b44c674a":"learn.fit(lr, 3, cycle_len=1)","14f6f9aa":"learn.save('224_all_50')","493cd2b3":"learn.load('224_all_50')","f4da61b7":"log_preds,y = learn.TTA()\nprobs = np.mean(np.exp(log_preds),0)\n\naccuracy_np(probs,y)","45289360":"preds = np.argmax(probs, axis=1)\nprobs = probs[:,1]\n\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y, preds)","83cc3d85":"plot_confusion_matrix(cm, data.classes)","ec97058e":"def rand_by_mask(mask): return np.random.choice(np.where(mask)[0], 4, replace=False)\ndef rand_by_correct(is_correct): return rand_by_mask((preds == data.val_y)==is_correct)\n\ndef plot_val_with_title(idxs, title):\n    imgs = np.stack([data.val_ds[x][0] for x in idxs])\n    title_probs = [probs[x] for x in idxs]\n    print(title)\n    return plots(data.val_ds.denorm(imgs), rows=1, titles=title_probs)\n\ndef plots(ims, figsize=(12,6), rows=1, titles=None):\n    f = plt.figure(figsize=figsize)\n    for i in range(len(ims)):\n        sp = f.add_subplot(rows, len(ims)\/\/rows, i+1)\n        sp.axis('Off')\n        if titles is not None: sp.set_title(titles[i], fontsize=16)\n        plt.imshow(ims[i])\n\ndef load_img_id(ds, idx): return np.array(PIL.Image.open(PATH+ds.fnames[idx]))\n\ndef plot_val_with_title(idxs, title):\n    imgs = [load_img_id(data.val_ds,x) for x in idxs]\n    title_probs = [probs[x] for x in idxs]\n    print(title)\n    return plots(imgs, rows=1, titles=title_probs, figsize=(16,8))\n\ndef most_by_mask(mask, mult):\n    idxs = np.where(mask)[0]\n    return idxs[np.argsort(mult * probs[idxs])[:4]]\n\ndef most_by_correct(y, is_correct): \n    mult = -1 if (y==1)==is_correct else 1\n    return most_by_mask((preds == data.val_y)==is_correct & (data.val_y == y), mult)","4ec9d5e5":"plot_val_with_title(most_by_correct(0, False), \"Most incorrect cats\")","f08f5eb6":"plot_val_with_title(most_by_correct(1, False), \"Most incorrect dogs\")","78f6597b":"## Analyzing results","9bc225f0":"## Dogs v Cats super-charged!"}}