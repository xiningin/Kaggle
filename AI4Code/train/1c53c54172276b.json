{"cell_type":{"de605ffb":"code","18924b5a":"code","7c1a9267":"code","cbbce0b7":"code","f513a0d3":"code","2ac07e8d":"code","3cd90014":"code","4e868245":"code","2b57c735":"code","f2f27753":"code","670bb35c":"code","8c643db9":"code","d1a91df1":"code","e6091037":"code","b0c0399b":"code","88971c8d":"code","c468a39a":"code","3b241218":"code","fcb1f067":"code","ee181293":"code","2bdd4ef0":"markdown","406a5b5d":"markdown","9c1e0aa5":"markdown","1526f826":"markdown","b821dce5":"markdown","ce378d30":"markdown"},"source":{"de605ffb":"import os\nimport re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport cv2\nfrom tqdm import tqdm\nfrom glob import glob\nfrom PIL import Image\nfrom skimage.transform import resize\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n\nK.set_image_data_format('channels_last')","18924b5a":"path = \"..\/input\/ultrasound-nerve-segmentation\/train\/\"\nfile_list = os.listdir(path)\nfile_list[:20]","7c1a9267":"train_image = []\ntrain_mask = glob(path + '*_mask*')\n\nfor i in train_mask:\n    train_image.append(i.replace('_mask', ''))\n        \nprint(train_image[:10],\"\\n\" ,train_mask[:10])","cbbce0b7":"# Display the first image and mask of the first subject.\nimage1 = np.array(Image.open(path+\"1_1.tif\"))\nimage1_mask = np.array(Image.open(path+\"1_1_mask.tif\"))\nimage1_mask = np.ma.masked_where(image1_mask == 0, image1_mask)\n\nfig, ax = plt.subplots(1,3,figsize = (16,12))\nax[0].imshow(image1, cmap = 'gray')\n\nax[1].imshow(image1_mask, cmap = 'gray')\n\nax[2].imshow(image1, cmap = 'gray', interpolation = 'none')\nax[2].imshow(image1_mask, cmap = 'jet', interpolation = 'none', alpha = 0.7)","f513a0d3":"width = 128\nheight = 128","2ac07e8d":"from tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras import Input\nfrom tensorflow.keras.layers import Input, Activation, BatchNormalization, Dropout, Lambda, Conv2D, Conv2DTranspose, MaxPooling2D, concatenate,add\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","3cd90014":"def dice_coef(y_true, y_pred):\n    smooth = 0.0\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef jacard(y_true, y_pred):\n\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum ( y_true_f * y_pred_f)\n    union = K.sum ( y_true_f + y_pred_f - y_true_f * y_pred_f)\n\n    return intersection\/union\n\n\ndef dice_coef_loss(y_true, y_pred):\n    return -dice_coef(y_true, y_pred)\n","4e868245":"from tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.layers import *\n\ndef res_block(inputs,filter_size):\n    \"\"\"\n    res_block -- Residual block for building res path\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for residual block\n    filter_size {int} -- convolutional filter size \n    \n    Returns:\n    add {<class 'tensorflow.python.framework.ops.Tensor'>} -- addition of two convolutional filter output  \n    \"\"\"\n    # First Conv2D layer\n    cb1 = Conv2D(filter_size,(3,3),padding = 'same',activation=\"relu\")(inputs)\n    # Second Conv2D layer parallel to the first one\n    cb2 = Conv2D(filter_size,(1,1),padding = 'same',activation=\"relu\")(inputs)\n    # Addition of cb1 and cb2\n    add = Add()([cb1,cb2])\n    \n    return add\n\ndef res_path(inputs,filter_size,path_number):\n    \"\"\"\n    res_path -- residual path \/ modified skip connection\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for res path\n    filter_size {int} -- convolutional filter size \n    path_number {int} -- path identifier \n    \n    Returns:\n    skip_connection {<class 'tensorflow.python.framework.ops.Tensor'>} -- final res path\n    \"\"\"\n    # Minimum one residual block for every res path\n    skip_connection = res_block(inputs, filter_size)\n    \n    # Two serial residual blocks for res path 2\n    if path_number == 2:\n        skip_connection = res_block(skip_connection,filter_size)\n    \n    # Three serial residual blocks for res path 1\n    elif path_number == 1:\n        skip_connection = res_block(skip_connection,filter_size)\n        skip_connection = res_block(skip_connection,filter_size)\n    \n    return skip_connection\n\ndef decoder_block(inputs, mid_channels, out_channels):\n    \n    \"\"\"\n    decoder_block -- decoder block formation\n    \n    Arguments:\n    inputs {<class 'tensorflow.python.framework.ops.Tensor'>} -- input for decoder block\n    mid_channels {int} -- no. of mid channels \n    out_channels {int} -- no. of out channels\n    \n    Returns:\n    db {<class 'tensorflow.python.framework.ops.Tensor'>} -- returning the decoder block\n    \"\"\"\n    conv_kwargs = dict(\n        activation='relu',\n        padding='same',\n        kernel_initializer='he_normal',\n        data_format='channels_last'  \n    )\n    \n    # Upsampling (nearest neighbor interpolation) layer\n    db = UpSampling2D(size=(2, 2))(inputs)\n    # First conv2D layer \n    db = Conv2D(mid_channels, 3, **conv_kwargs)(db)\n    # Second conv2D layer\n    db = Conv2D(out_channels, 3, **conv_kwargs)(db)\n\n    return db\n\ndef TransResUNet(input_size=(512, 512, 1)):\n    \"\"\"\n    TransResUNet -- main architecture of TransResUNet\n    \n    Arguments:\n    input_size {tuple} -- size of input image\n    \n    Returns:\n    model {<class 'tensorflow.python.keras.engine.training.Model'>} -- final model\n    \"\"\"\n    \n    # Input \n    inputs = Input(input_size)\n    inp = inputs\n    input_shape = input_size\n    \n    # Handling input channels \n    # input with 1 channel will be converted to 3 channels to be compatible with VGG16 pretrained encoder \n    if input_size[-1] < 3:\n        inp = Conv2D(3, 1)(inputs)                         \n        input_shape = (input_size[0], input_size[0], 3)  \n    else:\n        inp = inputs\n        input_shape = input_size\n\n    # VGG16 with imagenet weights\n    encoder = VGG16(include_top=False, weights='imagenet', input_shape=input_shape)\n       \n    # First encoder block\n    enc1 = encoder.get_layer(name='block1_conv1')(inp)\n    enc1 = encoder.get_layer(name='block1_conv2')(enc1)\n    # Second encoder block\n    enc2 = MaxPooling2D(pool_size=(2, 2))(enc1)\n    enc2 = encoder.get_layer(name='block2_conv1')(enc2)\n    enc2 = encoder.get_layer(name='block2_conv2')(enc2)\n    # Third encoder block\n    enc3 = MaxPooling2D(pool_size=(2, 2))(enc2)\n    enc3 = encoder.get_layer(name='block3_conv1')(enc3)\n    enc3 = encoder.get_layer(name='block3_conv2')(enc3)\n    enc3 = encoder.get_layer(name='block3_conv3')(enc3)\n    # Forth encoder block\n    enc4 = MaxPooling2D(pool_size=(2, 2))(enc3)\n    enc4 = encoder.get_layer(name='block4_conv1')(enc4)\n    enc4 = encoder.get_layer(name='block4_conv2')(enc4)\n    enc4 = encoder.get_layer(name='block4_conv3')(enc4)\n\n    # Center block\n    center = MaxPooling2D(pool_size=(2, 2))(enc4)\n    center = decoder_block(center, 512, 256)\n\n    # Decoder block corresponding to forth encoder\n    res_path4 = res_path(enc4,256,4)\n    dec4 = concatenate([res_path4, center], axis=3)\n    dec4 = decoder_block(dec4, 512, 64)\n    # Decoder block corresponding to third encoder\n    res_path3 = res_path(enc3,128,3)\n    dec3 = concatenate([res_path3, dec4], axis=3)\n    dec3 = decoder_block(dec3, 256, 64)\n    # Decoder block corresponding to second encoder\n    res_path2 = res_path(enc2,64,2)\n    dec2 = concatenate([res_path2, dec3], axis=3)\n    dec2 = decoder_block(dec2, 128, 64)\n    # Final Block concatenation with first encoded feature \n    res_path1 = res_path(enc1,32,1)\n    dec1 = concatenate([res_path1, dec2], axis=3)\n    dec1 = Conv2D(32, 3, padding='same', kernel_initializer='he_normal')(dec1)\n    dec1 = ReLU()(dec1)\n\n    # Output\n    out = Conv2D(1, 1)(dec1)\n    out = Activation('sigmoid')(out)  \n    \n    # Final model\n    model = Model(inputs=[inputs], outputs=[out])\n    \n    return model","2b57c735":"def train_generator(data_frame, batch_size, train_path, aug_dict,\n        image_color_mode=\"grayscale\",\n        mask_color_mode=\"grayscale\",\n        image_save_prefix=\"image\",\n        mask_save_prefix=\"mask\",\n        save_to_dir=None,\n        target_size=(256,256),\n        seed=1):\n    '''\n    can generate image and mask at the same time use the same seed for\n    image_datagen and mask_datagen to ensure the transformation for image\n    and mask is the same if you want to visualize the results of generator,\n    set save_to_dir = \"your path\"\n    '''\n    image_datagen = ImageDataGenerator(**aug_dict)\n    mask_datagen = ImageDataGenerator(**aug_dict)\n    \n    image_generator = image_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"filename\",\n        class_mode = None,\n        color_mode = image_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = image_save_prefix,\n        seed = seed)\n\n    mask_generator = mask_datagen.flow_from_dataframe(\n        data_frame,\n        directory = train_path,\n        x_col = \"mask\",\n        class_mode = None,\n        color_mode = mask_color_mode,\n        target_size = target_size,\n        batch_size = batch_size,\n        save_to_dir = save_to_dir,\n        save_prefix  = mask_save_prefix,\n        seed = seed)\n\n    train_gen = zip(image_generator, mask_generator)\n    \n    for (img, mask) in train_gen:\n        img, mask = adjust_data(img, mask)\n        yield (img,mask)\n\ndef adjust_data(img,mask):\n    img = img \/ 255\n    mask = mask \/ 255\n    mask[mask > 0.5] = 1\n    mask[mask <= 0.5] = 0\n    \n    return (img, mask)","f2f27753":"pos_mask = []\npos_img = []\nneg_mask = []\nneg_img = []\n\nfor mask_path, img_path in zip(train_mask, train_image):\n    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)\n    if np.sum(mask) == 0:\n        neg_mask.append(mask_path)\n        neg_img.append(img_path)\n    else:\n        pos_mask.append(mask_path)\n        pos_img.append(img_path)","670bb35c":"!mkdir generated\n!mkdir generated\/img","8c643db9":"def flip_up_down(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 0)\n\ndef flip_right_left(img):\n    newImg = img.copy()\n    return cv2.flip(newImg, 1)","d1a91df1":"gen_img = []\ngen_mask = []\n\nfor (img_path, mask_path) in tqdm(zip(pos_img, pos_mask)):\n    image_name = img_path.split('\/')[-1].split('.')[0]\n\n    uf_img_path = 'generated\/img\/'+image_name+'_uf.jpg'\n    uf_mask_path = 'generated\/img\/'+image_name+'_uf_mask.jpg'\n    rf_img_path = 'generated\/img\/'+image_name+'_rf.jpg'\n    rf_mask_path = 'generated\/img\/'+image_name+'_rf_mask.jpg'\n\n    img = cv2.imread(img_path)\n    mask = cv2.imread(mask_path)\n\n    uf_img = flip_up_down(img)\n    uf_mask = flip_up_down(mask)\n    rf_img = flip_right_left(img)\n    rf_mask = flip_right_left(mask)\n\n    cv2.imwrite(uf_img_path, uf_img)\n    cv2.imwrite(uf_mask_path, uf_mask)\n    cv2.imwrite(rf_img_path, rf_img)\n    cv2.imwrite(rf_mask_path, rf_mask)\n    \n    gen_img.append(uf_img_path)\n    gen_mask.append(uf_mask_path)\n    gen_img.append(rf_img_path)\n    gen_mask.append(rf_mask_path)","e6091037":"aug_img = gen_img + train_image\naug_mask = gen_mask + train_mask\n\ndf_ = pd.DataFrame(data={\"filename\": aug_img, 'mask' : aug_mask})\ndf = df_.sample(frac=1).reset_index(drop=True)\n\nkf = KFold(n_splits = 5, shuffle=False)","b0c0399b":"histories = []\nlosses = []\naccuracies = []\ndicecoefs = []\njacards = []\n\ntrain_generator_args = dict(rotation_range=0.2,\n                            width_shift_range=0.05,\n                            height_shift_range=0.05,\n                            shear_range=0.05,\n                            zoom_range=0.05,\n                            horizontal_flip=True,\n                            fill_mode='nearest')\n\nEPOCHS = 40\nBATCH_SIZE = 32\n\nfor k, (train_index, test_index) in enumerate(kf.split(df)):\n    train_data_frame = df.iloc[train_index]\n    test_data_frame = df.iloc[test_index]\n    \n    train_gen = train_generator(train_data_frame, BATCH_SIZE,\n                                None,\n                                train_generator_args,\n                                target_size=(height, width))\n\n    test_gener = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n\n    model = TransResUNet(input_size=(height,width, 1))\n    model.compile(optimizer=Adam(lr=2e-5), loss=dice_coef_loss, \\\n                      metrics=[jacard, dice_coef, 'binary_accuracy'])\n\n    model_checkpoint = ModelCheckpoint(str(k+1) + '_unet_ner_seg.hdf5', \n                                       verbose=1, \n                                       save_best_only=True)\n\n    history = model.fit(train_gen,\n                                  steps_per_epoch=len(train_data_frame) \/\/ BATCH_SIZE, \n                                  epochs=EPOCHS, \n                                  callbacks=[model_checkpoint],\n                                  validation_data = test_gener,\n                                  validation_steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    \n    model = load_model(str(k+1) + '_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'jacard': jacard, 'dice_coef': dice_coef})\n    \n    test_gen = train_generator(test_data_frame, BATCH_SIZE,\n                                None,\n                                dict(),\n                                target_size=(height, width))\n    results = model.evaluate(test_gen, steps=len(test_data_frame) \/\/ BATCH_SIZE)\n    results = dict(zip(model.metrics_names,results))\n    \n    histories.append(history)\n    accuracies.append(results['binary_accuracy'])\n    losses.append(results['loss'])\n    dicecoefs.append(results['dice_coef'])\n    jacards.append(results['jacard'])\n    ","88971c8d":"import pickle\n\nfor h, history in enumerate(histories):\n\n    keys = history.history.keys()\n    fig, axs = plt.subplots(1, len(keys)\/\/2, figsize = (25, 5))\n    fig.suptitle('No. ' + str(h+1) + ' Fold Results', fontsize=30)\n\n    for k, key in enumerate(list(keys)[:len(keys)\/\/2]):\n        training = history.history[key]\n        validation = history.history['val_' + key]\n\n        epoch_count = range(1, len(training) + 1)\n\n        axs[k].plot(epoch_count, training, 'r--')\n        axs[k].plot(epoch_count, validation, 'b-')\n        axs[k].legend(['Training ' + key, 'Validation ' + key])\n        \n    with open(str(h+1) + '_trainHistoryDict', 'wb') as file_pi:\n        pickle.dump(history.history, file_pi)","c468a39a":"print('average accuracy : ', np.mean(np.array(accuracies)), '+-', np.std(np.array(accuracies)))\nprint('average loss : ', np.mean(np.array(losses)), '+-', np.std(np.array(losses)))\nprint('average jacard : ', np.mean(np.array(jacards)), '+-', np.std(np.array(jacards)))\nprint('average dice_coe : ', np.mean(np.array(dicecoefs)), '+-', np.std(np.array(dicecoefs)))","3b241218":"model = load_model('1_unet_ner_seg.hdf5', custom_objects={'dice_coef_loss': dice_coef_loss, 'jacard': jacard, 'dice_coef': dice_coef})","fcb1f067":"for i in range(20):\n    index=np.random.randint(0,len(test_data_frame.index))\n    print(i+1, index)\n    img = cv2.imread(test_data_frame['filename'].iloc[index], cv2.IMREAD_GRAYSCALE)\n    img = cv2.resize(img, (height, width))\n    img = img[np.newaxis, :, :, np.newaxis]\n    img = img \/ 255\n    pred = model.predict(img)\n\n    plt.figure(figsize=(12,12))\n    plt.subplot(1,3,1)\n    plt.imshow(np.squeeze(img))\n    plt.title('Original Image')\n    plt.subplot(1,3,2)\n    plt.imshow(np.squeeze(cv2.resize(cv2.imread(test_data_frame['mask'].iloc[index]), (height, width))))\n    plt.title('Original Mask')\n    plt.subplot(1,3,3)\n    plt.imshow(np.squeeze(pred) > .5)\n    plt.title('Prediction')\n    plt.show()","ee181293":"!rm -r generated","2bdd4ef0":"Let's modularize this work.","406a5b5d":"**Sort the file list in ascending order and seperate it into images and masks**<br\/>\nEach file has the form of either \"subject_imageNum.tif\" or \"subject_imageNum_mask.tif\", so we can extract `subject` and `imageNum` from each file name by using regular expression. `\"[0-9]+\"` means to find the first consecutive number.<br\/>","9c1e0aa5":"## Building the training dataset.\nLet's look at the train image list","1526f826":"## How to deal with train_masks.csv ?","b821dce5":"Let's check that I did well","ce378d30":"Now, I try to load all image files and store them variables X and y. Afther doing this, I recognize that it takes very much memory.<br\/>\nPlease let me know if there are several efficient ways to store image file"}}