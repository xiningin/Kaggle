{"cell_type":{"586a132f":"code","fa0c2be3":"code","122c3e4c":"code","0726d503":"code","721fdcc9":"code","ebbbf8e9":"code","02de4dc3":"code","6b76b5b2":"code","561cabf0":"code","b8c8b64e":"code","65fac6e3":"code","38f02b10":"code","3da3b9ed":"code","b79e76c6":"code","711ef690":"code","59e02c79":"code","54e11c41":"code","ec738822":"code","b28d4ddf":"code","e7ceb15d":"code","ae682c20":"code","2e51655e":"code","4fab5137":"code","777758f5":"code","c57e6a89":"code","e2dc51a0":"code","75edb82c":"code","4cd6ee96":"code","50d395dc":"code","9be4060d":"code","e06aaf41":"code","733ed521":"code","81d713ae":"code","5860664b":"code","7a42d476":"code","37f37240":"code","f38fad4d":"code","5a71e853":"code","d9a85d23":"code","364d2d16":"code","eb382052":"code","a43b1698":"code","7ac5f340":"code","72db0413":"code","b1f58b81":"code","45a37750":"code","150150d1":"code","a593fd5e":"code","840bb11f":"code","3c358204":"code","eb3511f2":"code","f384c5ee":"code","1322a013":"code","728b95b9":"code","5359315d":"code","094adb23":"code","5bb46cec":"code","f75a7e02":"code","b56afb48":"code","ce883eca":"code","333adfff":"code","ba2d4491":"code","5e41c248":"code","39eb541e":"code","b0c2e5f6":"code","74360519":"code","eec46392":"code","4ad6814f":"code","a23b170e":"code","34f3edd4":"code","9da2ca6b":"code","3478ab69":"code","e1c3c2a7":"code","96296720":"code","7e3f8298":"code","beef607f":"code","faca17e3":"code","cfd45867":"code","561b5a25":"code","40bf2df6":"code","95cf296e":"code","813565e2":"code","5b1be8b4":"code","6765890c":"code","3935a308":"code","b5e5726b":"code","a074e4c2":"code","53f29ee5":"code","1d693a2f":"code","7873b155":"code","af2a5afc":"code","e7aa57c6":"code","cf49cf20":"code","23f00f5d":"code","939008a2":"code","f472dda8":"code","e9dc4290":"code","cd59cc87":"code","40f15b8d":"code","22147890":"code","574cff36":"code","529d7402":"code","7158c34d":"code","1ad3759a":"code","d98165b8":"code","ff3d86a6":"code","e5b168fb":"code","2d03adb8":"code","03558873":"code","f161b0ad":"code","a4aec81c":"markdown","667fa01d":"markdown","0326859b":"markdown","5962e29d":"markdown","1ca0d655":"markdown","702fb862":"markdown","9abddc48":"markdown","81fb27dc":"markdown","dbb97b45":"markdown","4217805c":"markdown","9e4e84df":"markdown","fddbf59d":"markdown","64546ed0":"markdown","d45ca13e":"markdown","162bb48e":"markdown","5d6ed380":"markdown","ac9810b7":"markdown","c13de049":"markdown","72ab0deb":"markdown","08a4fca8":"markdown","878c7ae2":"markdown","a3fa4071":"markdown","eedd71e5":"markdown","b29f172b":"markdown","dba42027":"markdown","308ff00a":"markdown","1aaf2978":"markdown","d81b7284":"markdown","7708b487":"markdown","b0484b7c":"markdown","982007bf":"markdown","f4c398e3":"markdown","1ec32e48":"markdown","e267d844":"markdown","f984bc9b":"markdown","b75a7522":"markdown","8f26f1df":"markdown","3364f434":"markdown","c2b0c8b0":"markdown","9e769c3e":"markdown","e8036342":"markdown","157fa6b5":"markdown","57d3762b":"markdown","7cb2fd50":"markdown","ecf4c7e6":"markdown","99453cae":"markdown"},"source":{"586a132f":"# \u0414\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom collections import Counter\nfrom datetime import datetime\nimport re\n\n# \u0414\u043b\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438:\nimport seaborn as sns \nimport missingno as missin\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams['figure.figsize'] = (10,7)\n\n# \u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# \u0414\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043f\u0443\u0442\u0438 \"..\/input\/\".\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fa0c2be3":"# \u0424\u0438\u043a\u0441\u0438\u0440\u0443\u044e RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0441\u0442\u0438.\nRANDOM_SEED = 42\n\n# \u0424\u0438\u043a\u0441\u0438\u0440\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","122c3e4c":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","0726d503":"# \u041f\u043e\u0434\u0432\u043e\u0436\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043f\u043e\u0434 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442 PEP-8 \nfor dataset in [df_train, df_test, sample_submission]:\n    dataset.columns = list(map(lambda x: (x.replace(' ', '_')).lower(), dataset.columns))","721fdcc9":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","ebbbf8e9":"data.info()","02de4dc3":"data.sample(5)","6b76b5b2":"cities = pd.read_csv('..\/input\/world-cities\/worldcities.csv')\ncities = cities[['city','country','population']].copy().set_index('city')\ncities.sample(10)","561cabf0":"countries = pd.read_csv('..\/input\/countries-of-the-world\/countries of the world.csv')\ncountries = countries[['Country','Coastline (coast\/area ratio)','GDP ($ per capita)','Phones (per 1000)','Agriculture', 'Service']].copy()\ncountries.columns = ['country','coastline','gdp','phones','agriculture','service']\ncountries = countries.set_index('country')\ncountries.index = countries.index.str.strip()\ncountries.sample(10)","b8c8b64e":"capitals = pd.read_csv('..\/input\/world-capitals-gps\/concap.csv')\ncapitals = capitals[['CountryName','CapitalName']]\ncapitals.columns  = ['country', 'capital']\ncapitals = capitals.set_index('country')\ncapitals.index = capitals.index.str.strip()\ncapitals","65fac6e3":"ta_data = pd.read_csv('..\/input\/trip-advisor-data\/ta_data.csv')","38f02b10":"# \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432\u0438\u0434 \u043a\u0443\u0445\u043d\u0438 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c \u0438\u043b\u0438 \u0433\u043e\u0440\u043e\u0434\u0430\u043c. \ndef common_cuisine(data, name, by_country = True):\n    x = 'country' if by_country else 'city'\n    \n    stats = data[data[x] == name]['cuisine_style'].value_counts()\n    cuisine = stats.index[0]\n    \n    perc = round(100 * stats.iloc[0]\/(stats.iloc[0] + stats.iloc[1] + stats.iloc[2]))\n    cuisine2 = stats.index[1]\n   \n    perc2 = round(100 * stats.iloc[1]\/(stats.iloc[0] + stats.iloc[1] + stats.iloc[2]))\n    \n    print(name)\n    print('\\t '  + ' ' + str(perc) + '%\\t' + cuisine)\n    print('\\t '  + ' ' + str(perc2) + '%\\t' + cuisine2)\n    pop_c1.append(cuisine)\n    prc_c1.append(perc)\n    pop_c2.append(cuisine2)\n    prc_c2.append(perc2)\n    \n    return cuisine ","3da3b9ed":"# \u041f\u0435\u0432\u0435\u0441\u0442\u0438 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u0430\u0442\u044b.\ndef to_date(*args):\n    res = list(map(lambda i: pd.to_datetime(i).date(), args)) \n    if len(res) == 0: \n        return None \n    else:\n        return res","b79e76c6":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438  \u0434\u0430\u0442\u0430\u043c\u0438. \ndef calculate_diff(*args):\n    try:\n        res = args[0] - args[1]\n        return  abs(res.days)\n    except:\n        return 0","711ef690":"fig,ax = plt.subplots(figsize=(8,8))\nmissin.matrix(data,ax=ax,sparkline=False)","59e02c79":"# \u041d\u0430\u0439\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\ncols_with_nans = (data.isnull().any()[lambda c: c]).index\ncols_with_nans","54e11c41":"# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.\nfor col in cols_with_nans:\n    new_col_name = col+'_isNAN'\n    data[new_col_name] = pd.isna(data[col]).astype('uint8')","ec738822":"# \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \nstats = data['cuisine_style'].isnull().value_counts()\nprint(stats)\nprint(100 * stats[1]\/(stats[0]+ stats[1]))","b28d4ddf":"df = pd.DataFrame(data['cuisine_style'])\ndf","e7ceb15d":"# \u041f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0430\u0442 \u044f\u0447\u0435\u0439\u043a\u0438 \u0438\u0437 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 \u043b\u0438\u0441\u0442\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u043a.\ndf['cuisine_style'] = df['cuisine_style'].str.strip('[]')\ndf['cuisine_style'] = df['cuisine_style'].str.replace('\\'','')\ndata['cuisine_style'] = df['cuisine_style'].str.split(', ')\ndata['cuisine_style'].iloc[0] ","ae682c20":"# \u041d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0432\u0438\u0434 \u043a\u0443\u0445\u043d\u0438. \nall_cuisine = ''\n\nfor x in list(df['cuisine_style'].dropna()):\n    all_cuisine = all_cuisine + x + ', '\n\nall_cuisine = all_cuisine.split(', ')\nall_cuisine = pd.DataFrame.from_dict(Counter(all_cuisine), orient='index').reset_index()\nall_cuisine.columns = ['name', 'count']\nall_cuisine.drop(all_cuisine[all_cuisine.name == ''].index, inplace = True)","2e51655e":"all_cuisine['perc'] = round(all_cuisine['count'] * 100\/all_cuisine['count'].sum(),1)\nstats = all_cuisine.sort_values(['count'], ascending = False).head(10)\n\nplot = stats.set_index('name').plot.bar(title='\u0421\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u0438\u0434\u044b \u043a\u0443\u0445\u043d\u0438')\n\nfor p, perc in zip(plot.patches,list(stats['perc'])):\n    plot.annotate(str(perc)+'%', (p.get_x() , p.get_height()), color='orange')","4fab5137":"# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a country \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435. \ndata['country'] = pd.Series(np.array([None]*data.shape[0]))","777758f5":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 country \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445. \nfor name in data.city.unique():\n    if name in cities.index:\n        try:\n            data.loc[(data.city == name), 'country'] = cities.loc[name].country\n        except:\n            data.loc[(data.city  == name), 'country'] = cities.loc[name].country.values[0]","c57e6a89":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d country \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \ndata[data.country.isnull()]","e2dc51a0":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\ndata.loc[(data.city == 'Oporto'), 'country'] = 'Portugal'\ndata.loc[(data.city == 'Zurich'), 'country'] = 'Switzerland'\ndata.loc[(data.city == 'Krakow'), 'country'] = 'Poland'","75edb82c":"tst = data.explode('cuisine_style')\ntst.sample(5)","4cd6ee96":"c = []\npop_c1 = []\npop_c2 = []\nprc_c1 = []\nprc_c2 = []\n\n# \u041d\u0430\u0439\u0442\u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.\nfor city in data['city'].unique():\n    c.append(city)\n    common_cuisine(tst, city,by_country = False)","50d395dc":"# \u0423\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0438 \u043f\u043e \u0432\u0438\u0434\u0430\u043c \u043a\u0443\u0445\u043d\u0438. \n# div = tst.groupby(['city','cuisine_style'])['reviews'].count()\n# div = pd.DataFrame(div)\n# div.columns = ['count']\n# div","9be4060d":"data[data.cuisine_style_isNAN == 1].head()","e06aaf41":"# \u0423\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0435\u0441\u043b\u0438 NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0433\u043e\u0440\u043e\u0434\u0430.\n# for city in data['country'].unique():\n#     c.append(city)\n#     common_cuisine(tst, city,by_country = True)\n\n# \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0441\u0442\u0440\u0430\u043d\u044b.\nfor name in data.country.unique():\n    data.loc[(data.country == name) & (data.cuisine_style_isNAN ==1),'cuisine_style'] = common_cuisine(tst, name,by_country = True)","733ed521":"data.cuisine_style_isNAN.value_counts()","81d713ae":"data.cuisine_style.isnull().value_counts()","5860664b":"data['cuisine_count'] = df['cuisine_style'].str.split(', ').apply(lambda x: 1 if str(x) == 'nan' else len(x))\ndata[['cuisine_style','cuisine_count']].head(10)","7a42d476":"stats = data.price_range.isna().value_counts()\nstats[1]*100\/(stats[0]+stats[1])","37f37240":"common_price = data.price_range.value_counts().index[0]","f38fad4d":"y = data.price_range.value_counts().values\ngraph = plt.bar(['\u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0446\u0435\u043d\u0430', '\u0414\u0435\u0448\u0435\u0432\u043e', '\u0414\u043e\u0440\u043e\u0433\u043e'], y, color = 'pink')","5a71e853":"data.price_range.fillna(common_price, inplace = True)","d9a85d23":"display(data[data['reviews_isNAN']==1])\nprint(data.reviews.iloc[1])\nprint(type(data.reviews.iloc[1]))","364d2d16":"data['reviews'] = data['reviews'].dropna(axis=0)","eb382052":"reviews = data['reviews']\nreviews = reviews.apply(lambda x: re.split('\\],\\s\\[',str(x)))\nreviews = reviews.apply(lambda x: re.findall('\\d+\/\\d+\/\\\\d+', str(x)))\nreviews.sample(10)","a43b1698":"dates = reviews.apply(lambda x: to_date(*x))\ndates","7ac5f340":"review_difference = dates.apply(lambda x: calculate_diff(*x) if x is not None else 0)","72db0413":"data['review_diff'] = review_difference.copy()\ndata['review_diff'].sort_values(ascending=False)","b1f58b81":"data[data['number_of_reviews_isNAN']==1].shape[0]\/data.shape[0] *100","45a37750":"sns.set(rc={'figure.figsize':(11,8)}, font_scale=1.5, style='whitegrid')\nprint(data.select_dtypes('number').corr().loc['number_of_reviews'].sort_values())\n\nsns.heatmap(data.select_dtypes('number').corr())","150150d1":"plt.scatter(data.number_of_reviews, data.ranking)\nplt.title(\"ranking vs number_of_reviews\")\nplt.xlabel(\"number_of_reviews\")\nplt.ylabel(\"ranking\")\nplt.show()","a593fd5e":"plt.scatter(data.cuisine_count, data.number_of_reviews)\nplt.title(\"cuisine_count vs number_of_reviews\")\nplt.xlabel(\"cuisine_count\")\nplt.ylabel(\"number_of_reviews\")\nplt.show()","840bb11f":"data.number_of_reviews.describe()","3c358204":"print(data.number_of_reviews.mean())\nprint(data.number_of_reviews.median())\nprint(data.number_of_reviews.std())","eb3511f2":"# \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0440\u0435\u0441\u0442\u0440\u043e\u0440\u0430\u043d\u043e\u0432, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438. \nreviews_count_data = pd.DataFrame(data.groupby('cuisine_count').median().number_of_reviews)\nplot = reviews_count_data.plot.bar(title='\u041c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438')\nfor p in plot.patches:\n    plot.annotate(str(int(p.get_height())), (p.get_x() , p.get_height()), color='purple')","f384c5ee":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e \u0433\u0440\u0443\u043f\u043f\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d. \ndata.number_of_reviews = data.apply(lambda row: (reviews_count_data.loc[row.cuisine_count])[0] if np.isnan(row.number_of_reviews) else row.number_of_reviews,axis=1)","1322a013":"# data = data.explode('cuisine_style')","728b95b9":"# \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b. \nnominative = data.select_dtypes('object')\nnominative.sample(3)","5359315d":"#\u0423\u0431\u0440\u0430\u0442\u044c \u043d\u0435\u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b.\nnominative.drop(['price_range','restaurant_id','url_ta','id_ta','reviews'], axis=1, inplace = True)","094adb23":"nominative","5bb46cec":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\n# pd.get_dummies(data, columns=['\u0441ity'])\n# pd.get_dummies(data, columns=[['cuisine_style','country ']],dummy_na=True)","f75a7e02":"data.price_range = data.price_range.map({'$': 0, '$$ - $$$': 1, '$$$$': 2})","b56afb48":"# \u0412\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b. \nnumerical = data.select_dtypes('number')\nnumerical.sample(3)","ce883eca":"numerical = numerical[['number_of_reviews','cuisine_count','review_diff']]","333adfff":"new_cols = ['country','capital','population','coastline','gdp','phones','agriculture','service']\nfor col in new_cols:\n    data[col] = pd.Series(np.array([None]*data.shape[0]))\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445. \nfor city_name in data.city.unique():\n    if city_name in cities.index:\n        try:\n            data.loc[(data.city == city_name), 'country'] = cities.loc[city_name].country\n            data.loc[(data.city == city_name), 'population'] = int(cities.loc[city_name].population)\n        except:\n            data.loc[(data.city  == city_name), 'country'] = cities.loc[city_name].country.values[0]\n            data.loc[(data.city == city_name), 'population'] = int(cities.loc[city_name].population.values[0])\n\nfor country_name in data.country.unique():\n    if country_name in capitals.index:\n            data.loc[data.country == country_name,'capital'] = capitals.loc[country_name].capital\n    if country_name in countries.index:\n        for col in ['coastline','gdp','phones','agriculture','service']:\n                data.loc[data.country == country_name, col] = countries.loc[country_name][col]\ndata[new_cols]","ba2d4491":"to_change = ['coastline','phones','agriculture','service','gdp']\nfor col in to_change: \n    data[col] = pd.to_numeric(data[col].astype(str).str.replace(',','.'), errors='coerce')","5e41c248":"data[new_cols]","39eb541e":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432 \u043a\u0430\u043a\u0438\u0445 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\nfig,ax = plt.subplots(figsize=(8,8))\nmissin.matrix(data,ax=ax,sparkline=False)","b0c2e5f6":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043e\u0442\u0441\u0442\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u0438 \u0438 \u0441\u0442\u0440\u0430\u043d.\ndata.loc[(data.city == 'Oporto'), 'population'] = 214349\ndata.loc[(data.city == 'Zurich'), 'population'] = 402762\ndata.loc[(data.city == 'Krakow'), 'population'] = 766683\n\ndata.loc[(data.city == 'Oporto'), 'country'] = 'Portugal'\ndata.loc[(data.city == 'Zurich'), 'country'] = 'Switzerland'\ndata.loc[(data.city == 'Krakow'), 'country'] = 'Poland'","74360519":"data[data.capital.isnull()]['country'].unique()","eec46392":"missing_info = {'Czechia': ['Prague', 23495, 0], 'Portugal': ['Lisbon', 23252, 0.98],'Poland': ['Warsaw', 15693, 0],'Switzerland': ['Bern', 81994,0]}","4ad6814f":"missing_info['Portugal']","a23b170e":"# \u041d\u0430\u0439\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u043d\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c,\u0432\u0432\u043f \u0438 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044e \u0431\u0435\u0440\u0435\u0433\u043e\u0432\u043e\u0439 \u043b\u0438\u043d\u0438\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e.\nmissing = data[data.capital.isnull()]['country'].unique()\nmissing_info = {'Czechia': ['Prague', 23495, 0], 'Portugal': ['Lisbon', 23252, 0.98],'Poland': ['Warsaw', 15693, 0],'Switzerland': ['Bern', 81994,0]}\n\nfor country in missing:\n    for i,col in zip([0,1,2], ['capital', 'gdp', 'coastline']):\n        data.loc[(data.country == country), col] = missing_info[country][i]","34f3edd4":"# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a is_capital\nnew_cols.append('is_capital')\ndata['is_capital'] = pd.Series(np.array([0]*data.shape[0]))\nfor capital_name in data.capital.unique():\n    data.loc[(data.city == capital_name), 'is_capital'] = 1","9da2ca6b":"data[['country','city','capital','is_capital']].sample(10)","3478ab69":"figure, axes = plt.subplots(2, 1, figsize=(15,15))\nfigure.tight_layout(pad=9.0)\n\ndata.groupby('country')['service','agriculture'].mean().plot.bar(ax = axes[0],rot = 90, title = '\u0420\u0430\u0437\u0432\u0438\u0442\u043e\u0441\u0442\u044c \u043f\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0443 vs \u0430\u0433\u0440\u043e\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0435 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c')\ndata.groupby('gdp')['service','agriculture'].mean().plot.bar(ax = axes[1],rot = 90, title = '\u0420\u0430\u0437\u0432\u0438\u0442\u043e\u0441\u0442\u044c \u043f\u043e \u0441\u0435\u0440\u0432\u0438\u0441\u0443 vs \u0430\u0433\u0440\u043e\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0435 \u043f\u043e \u0412\u0412\u041f')","e1c3c2a7":"data['service'].fillna(data['service'].mean(), inplace = True)\ndata['agriculture'].fillna(data['agriculture'].mean(), inplace = True)","96296720":"figure, axes = plt.subplots(2, 1, figsize=(15,15))\nfigure.tight_layout(pad=10)\ndata.groupby('country')['phones'].mean().plot.bar(ax = axes[0], rot = 90, title = '\u041a\u043e\u043b-\u0432\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u043d\u0430 1000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c', color='orange')\ndata.groupby('gdp')['phones'].mean().plot.bar(ax = axes[1],rot = 90, title = '\u041a\u043e\u043b-\u0432\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u043d\u0430 1000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u043e \u0412\u0412\u041f', color='purple')\nplt.show()","7e3f8298":"data['phones'].fillna(data['phones'].median(), inplace = True)","beef607f":"fig,ax = plt.subplots(figsize=(8,8))\nmissin.matrix(data,ax=ax,sparkline=False)","faca17e3":"data[data.isnull().any(axis=1)]","cfd45867":"# \u041f\u043e\u0441\u0442\u043e\u0440\u0438\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u043e\u043d\u043e\u0432 \u0432 \u043e\u0431\u0449\u0435\u043c.\ndata['ranking'].hist(bins=100)","561b5a25":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u043c\nfigure, axes = plt.subplots(1, 2, figsize=(15,15))\nfigure.tight_layout(pad=4)\ndata['city'].value_counts(ascending=True).plot(kind='barh',ax=axes[0])\ndata['country'].value_counts(ascending=True).plot(kind='barh',ax=axes[1])","40bf2df6":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043e\u0434\u043d\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430. \ndata['ranking'][data['city'] =='London'].hist(bins=100)","95cf296e":"def show_distr(n, by = 'city', of = 'ranking', title = ''):\n    top_n = (data[by].value_counts())[0:n].index\n    for x in top_n:\n        plot = data[of][data[by] == x].plot(kind='hist', legend=True, bins=100, title=title)\n    plot.legend(top_n)\n    plt.show()\n    \ndef normalise(data, by, feature):\n    feature_maxes = data.groupby(by)[feature].max()\n    return data[[by, feature]].apply(lambda row: row[feature] \/ feature_maxes.loc[row[by]], axis=1)\n\nshow_distr(10, title = '\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0430\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0442\u043e\u043f-10 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432')","813565e2":"# \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u043e\u0434\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0434 \u043e\u0434\u043d\u0443 \u0448\u043a\u0430\u043b\u0443 \u0440\u0430\u043d\u0433 \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\ndata['normalised_rank'] = data['ranking']\ndata['normalised_rank'] = normalise(data, 'city', 'ranking')\ndata['normalised_rank']","5b1be8b4":"# \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u043d\u0433. \nshow_distr(10, 'city', 'normalised_rank', title='\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0442\u043e\u043f\u0430-10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432')","6765890c":"# \u041f\u043e\u0441\u0442\u043e\u0438\u0442\u044c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432.\nstats = data['rating'].value_counts(ascending=True).sort_index()\nplot = stats.plot(kind='bar', color='orange', title = '\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432')\nfor p in plot.patches:\n    perc = round(int(p.get_height()) \/ sum(stats.values) * 100,1)\n    plot.annotate(str(perc)+'%', (p.get_x() , p.get_height()), color='purple')","3935a308":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0445\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043f\u043e\u043a\u0430\u0437\u0443\u0432\u0430\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0441\u0442\u043e\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c. \nfigure, axes = plt.subplots(2, 1, figsize=(15,15))\nfigure.tight_layout(pad=4)\n\n# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430.\nrating_is_5 = data['rating'] == 5\ngood_rating = data['rating'] >= 4\nis_capital = (data['is_capital']==1)\nconds = [\n    [is_capital & ~rating_is_5, ~is_capital & ~rating_is_5, is_capital & rating_is_5, ~is_capital & rating_is_5],\n    [is_capital & good_rating, is_capital & ~good_rating, ~is_capital & good_rating, ~is_capital & ~good_rating]\n        ]\n\n# \u0412\u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f.\nlegends=[['\u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433<5','\u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433<5', '\u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433=5','\u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433=5'],\n        ['\u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433>=4','\u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433<4','\u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433>=4','\u043d\u0435 \u0441\u0442\u043e\u043b\u0438\u0446\u0430, \u0440\u0435\u0439\u0442\u0438\u043d\u0433<4']]\n\n# \u041d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u0433\u0440\u0430\u0444\u0438\u043a\u0438\nfor i in range(2):\n    for cond,clr in zip(conds[i],['pink','orange','green', 'purple']):\n        other_tail= data[cond]['ranking'].plot(kind='hist', legend=True,ax=axes[i], bins=100,color=clr)\n    other_tail.legend(labels=legends[i])\n","b5e5726b":"ta_data.columns = ta_data.columns.str.strip()\nta_data = ta_data.drop(['ta_id'],axis=1)\n","a074e4c2":"ta_data.fillna(0, inplace=True)","53f29ee5":"ta_data","1d693a2f":"data = data.drop(['cuisine_style'],axis=1)\nmd = data.select_dtypes('number').drop_duplicates()","7873b155":"md = pd.concat([md, ta_data], axis=1)","af2a5afc":"md = md.drop(['cuisine_style_isNAN', 'price_range_isNAN', 'number_of_reviews_isNAN','reviews_isNAN'],axis=1)","e7aa57c6":"md","cf49cf20":"from sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\nscaled_md = md\nscaled_md.info()\n\nscaler = StandardScaler()\nscaled = scaler.fit_transform(scaled_md)\nscaled_md = pd.DataFrame(scaled)\nscaled_md.columns = md.columns\nscaled_md['sample'] = md['sample']","23f00f5d":"scaled_md['sample']","939008a2":"sns.heatmap(scaled_md.drop(['sample'], axis=1).corr(),)\n","f472dda8":"data.shape","e9dc4290":"scaled_md.columns","cd59cc87":"def prepare_model_data(md):\n    features = [\n                    'ranking', \n                    'price_range', \n                    'number_of_reviews', \n                    'cuisine_count', \n                    'review_diff',\n                    'population', \n                    'coastline', \n                    'gdp',\n                    'phones',\n                    'agriculture',\n                    'service', \n                    'is_capital', \n                    'normalised_rank',\n                    'food', \n                    'service', \n                    'value', \n                    'is_verified', \n                    'has_phone_number',\n                    'has_hours', \n                    'has_website',\n                    'has_menu',\n                    'distance', \n                    'has_tcAward',\n                    'atmosphere', \n                    'distance_isNAN',\n                    'ratings_summary',\n                    'sample', \n                    'rating',\n                ]\n    \n    result = md[features]\n#     to_encode = data['city']\n#     result = pd.concat([result, pd.get_dummies(to_encode)], axis=1)\n    result = result.apply(pd.to_numeric, errors='coerce')\n    for i in result.columns:\n        result.fillna(result[i].mean(),inplace=True)\n    return result","40f15b8d":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\nscaled_md = prepare_model_data(scaled_md)\ntrain_data = scaled_md.query('sample == 1').drop(['sample'], axis=1)\ntest_data = scaled_md.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['rating'], axis=1)","22147890":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","574cff36":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","529d7402":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","7158c34d":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","1ad3759a":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","d98165b8":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","ff3d86a6":"test_data.sample(10)","e5b168fb":"test_data = test_data.drop(['rating'], axis=1)","2d03adb8":"predict_submission = model.predict(test_data)","03558873":"predict_submission","f161b0ad":"sample_submission['rating'] = predict_submission\nsample_submission.to_csv('.\/submission1.csv', index=False)\nsample_submission.head(10)","a4aec81c":"### countries of the world.csv\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e \u0441\u0442\u0440\u0430\u043d\u0435.","667fa01d":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","0326859b":"\u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **country**. \u0417\u0430\u0442\u0435\u043c, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u0432 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 **city** \u0438\u043b\u0438 **country**, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 **cuisine_style**.","5962e29d":"\u0418\u0437 \u0445\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0438\u0436\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0442\u043e,\u0447\u0442\u043e \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u0435\u0439 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439, \u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u044b\u0439, \u0442\u043e \u0435\u0441\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. ","1ca0d655":"#### \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a reviews_diff\n\u0421\u043e\u0437\u0434\u0430\u044e \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, **review_diff**, \u0432\u044b\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0441\u0430\u043c\u044b\u043c \u043d\u0435\u0434\u0430\u0432\u043d\u0438\u043c \u0438 \u0441\u0442\u0430\u0440\u044b\u043c \u043e\u0442\u0437\u044b\u0432\u043e\u043c. ","702fb862":"### 1.3 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","9abddc48":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0438 \u0430\u0433\u0440\u043e\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430 \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u043d\u044f\u0442\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c \u0438\u043b\u0438 \u0412\u0412\u041f, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. ","81fb27dc":"# Submission\n","dbb97b45":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_style \u0438 \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 country \u0438 population\n\n**23% (11590) \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439** \n\n1. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0435 \u043a\u0430\u0436\u0434\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430 - \u0441\u0442\u0440\u043e\u043a\u0430, \u0445\u043e\u0442\u044c \u0438 \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043d\u0435\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438\u0441\u0442 \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e \u0444\u043e\u0440\u043c\u0430\u0442 \u044f\u0447\u0435\u0435\u043a \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043b\u0438\u0441\u0442 \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438. \n\n2. \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043a\u0443\u0445\u043e\u043d\u044c. \u0421\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438 \u043f\u043e \u0432\u0441\u0435\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443 ***Vegetarian Friendly*** (11.7%) \u0438 ***European*** (10.5%). ","4217805c":"### \u0410\u043d\u0430\u043b\u0438\u0437 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 **rating**","9e4e84df":"### \u0417\u0430\u0434\u0430\u0447\u0430: \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432\u00a0TripAdvisor.\n","fddbf59d":"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u0437\u0430\u043c\u0435\u043d\u044f\u044e \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439,\u0442\u0430\u043a \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c \u0438 \u0432\u0432\u043f \u0440\u0430\u0437\u043d\u044f\u0442\u0441\u044f.  ","64546ed0":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f ","d45ca13e":"## 0. \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 ","162bb48e":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 NaN \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n### 1.1 \u041f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN  \u0432\u044b\u043d\u043e\u0448\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.  ","5d6ed380":"# SkillFactory. Data Science. \u041f\u0440\u043e\u0435\u043a\u0442 \u21163.  \n","ac9810b7":"#### 1.3.2 \u041e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","c13de049":"\u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0430\u044f: \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0435 \u0441\u0438\u043b\u044c\u043d\u043e \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. ","72ab0deb":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","08a4fca8":"#### \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a cuisine_count\n\u0421\u043e\u0437\u0434\u0430\u044e \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0445 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 **cuisine_style** \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0442\u043e \u043f\u043e \u0434\u0435\u0444\u043e\u043b\u0442\u0443 **cuisine_count** \u0440\u0430\u0432\u0435\u043d 1. ","878c7ae2":"## Feature Engineering, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0420\u0410\u0414\n\n\u0421\u043e\u0437\u0434\u0430\u044e \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u0432, \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u043d\u0435\u0435. ","a3fa4071":"#### 1.3.3 \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","eedd71e5":"\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0430\u043c\u043e\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u043e\u0439 \u043a\u0443\u0445\u043d\u0435\u0439 \u0432 \u0441\u0442\u0440\u0430\u043d\u0435. ","b29f172b":"### \u041d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **capital**, **is_capital**, **population**, **coastline**, **gdp**, **phones**, **agriculture**, **service**","dba42027":"### worldcities.csv\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0430\u043a\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u043a\u0430\u043a \u0441\u0442\u0440\u0430\u043d\u0430 \u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u044f.","308ff00a":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a reviews\n**2 \u043d\u0435\u0437\u0438\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.**\n\n\u0422\u0430\u043a \u043a\u0430\u043a \u043e\u0431 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043c\u0430\u043b\u043e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438, \u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0435\u0441\u0442\u044c 3-4 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0443\u0434\u0430\u043b\u044f\u044e \u044d\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e.","1aaf2978":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a price_range \n\n**34.7% (17361) \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.** \n \n\u0422\u0430\u043a \u043a\u0430\u043a 70.6% \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0446\u0435\u043d\u043e\u0432\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442  10-999 \u0434\u043e\u043b\u043b\u0430\u0440\u043e\u0432, \u0442\u043e \u0432\u0441\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0431\u0443\u0434\u0443\u0442 \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u044d\u0442\u043e\u0442 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d. ","d81b7284":"### main_task.csv, kaggle_task.csv, sample_submission.csv \n \u041f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445. ","7708b487":"### 1.2 \u0420\u0430\u0437\u0431\u043e\u0440 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441 NaN \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438: \u0437\u0430\u043c\u0435\u043d\u0430 NaN \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u043e\u0431\u0446\u0430\u0445 **cuisine_style**, **price_range**, **number_of_reviews** \u0438 **reviews**. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u0432\u0430\u044e \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u043f\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0422\u0430\u043a\u0436\u0435, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u044e \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0442\u0430\u043a\u0438\u0435, \u043a\u0430\u043a **country**, **population**, **cuisine_count**. ","b0484b7c":"### ta_data.csv\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0441 TripAdvisor, \u0432\u0437\u044f\u0442\u044b\u0435 \u0441 https:\/\/github.com\/dkataiev\/skillfactory_rds\/blob\/master\/module_03\/data\/ta_data.csv.","982007bf":"> \u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u041c\u041b \u0434\u0430\u0436\u0435 \u0434\u043b\u044f \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c One-Hot Encoding, \u0438 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u043b\u0435\u0442\u0435\u0442\u044c.","f4c398e3":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430","1ec32e48":"# Model \n\u0421\u0430\u043c ML","e267d844":"\u0427\u0442\u043e\u0431\u044b \u043d\u0430\u0439\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0443\u044e\u0441\u044f \u043a\u0443\u0445\u043d\u044e \u043c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ***explode***. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u044e \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 tst, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u043f\u043e\u0432\u043b\u0438\u044f\u043b\u043e \u043d\u0430 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b. ","f984bc9b":"#### 1.3.1 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 (\u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435) \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","b75a7522":"#### \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c","8f26f1df":"#### \u0420\u0430\u0437\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* **city**: \u0413\u043e\u0440\u043e\u0434 \n* **cuisine_style**: \u041a\u0443\u0445\u043d\u044f\n* **ranking**: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* **price_range**: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* **number_of_reviews**: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* **reviews**: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* **url_ta**: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* **id_ta**: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* **rating**: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","3364f434":"### concap.csv\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u043d\u043e\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441\u0442\u043e\u043b\u0438\u0446\u044b.","c2b0c8b0":"\u041e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f **ranking**, **price_range**, **rating**, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e \u0441\u043c\u044b\u0441\u043b\u0443 \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e. ","9e769c3e":"# \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0420\u0410\u0414\n\n<!-- ![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png) -->","e8036342":"## \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","157fa6b5":"\u041e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u0434\u0432\u0430 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u043e \u0441 \u043d\u0438\u043c\u0438 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u044e, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 reviews, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u041c\u041e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f.","57d3762b":"## \u0414\u0430\u0442\u0430\u0441\u0435\u0442\u044b\n\n\u0417\u0430\u0433\u0440\u0443\u0436\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b:\n1. **df_train** - \u0434\u0430\u0442\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c. \n2. **df_test** - \u0434\u0430\u0442\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u0445, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c.\n3. **data** - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 df_train \u0438 df_test, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u044e, \u0447\u0438\u0449\u0443 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439.\n4. **sample_submission** - \u043f\u0440\u0438\u043c\u0435\u0440 \u0441\u0434\u0430\u0447\u0438???\n5. **cities**, **concap.csv**, **worlcities.csv** - \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u044b \u043e \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u0441 kaggle \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. \n6. **ta_data.csv**\n","7cb2fd50":"### \u0411\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 **ranking**, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","ecf4c7e6":"\u042f \u0443\u0431\u0438\u0440\u0430\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **restaurant_id**,**url_ta**,**id_ta**, **reviews** \u0442\u0430\u043a \u043a\u0430\u043a *one hot encoding* \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0441\u043b\u043e\u0436\u043d\u0438\u0442 \u0438 \u043d\u0430\u0433\u0440\u0443\u0437\u0438\u0442 \u0432\u0435\u0441\u044c \u0434\u0430\u0442\u0430\u0441\u0435\u0442. \n\n\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u0437 **reviews** \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0440\u0434\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0432 \u0442\u0435\u043a\u0441\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u0435, \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u043b\u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043b\u0438 \u043e\u0442\u0437\u044b\u0432\u044b. \n\n**price_range** \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e\/\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e. ","99453cae":"#### \u041f\u0440\u0438\u0437\u043d\u0430\u043a number_of_reviews\n6.4% (3200) \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \n\n\u041c\u0435\u0436\u0434\u0443 **number_of_reviews** \u0438 **cuisine_count** \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f 0.4. \u0422\u0430\u043a\u0436\u0435, \u043c\u0435\u0436\u0434\u0443 **number_of_reviews** \u0438 **ranking** \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u043b\u0430\u0431\u0430\u044f \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f -0.2. \u0413\u0440\u0430\u0444\u0438\u043a \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b-\u0432\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0442\u043e, \u0447\u0442\u043e \u0432 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0440\u0430\u0437\u043d\u0438\u0442\u0441\u044f \u043c\u0435\u0436\u0434\u0443 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\u043c\u0438, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0449\u0438\u043c\u0438 \u0440\u0430\u0437\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c. \u0412 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0442\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0432\u0438\u0434\u043e\u0432 \u043a\u0443\u0445\u043d\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u043d \u043a\u0432\u0430\u043b\u0438\u0444\u0438\u0446\u0438\u0440\u0443\u0435\u0442\u0441\u044f. "}}