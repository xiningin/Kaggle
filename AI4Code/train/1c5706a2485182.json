{"cell_type":{"6f46d6cd":"code","9969ce97":"code","b692a317":"code","1f7fdccc":"code","94bc1d09":"code","a916d1d6":"code","965712fc":"code","7554de67":"markdown","ffd22efd":"markdown","3488cdec":"markdown","91766d8a":"markdown","9c1b7486":"markdown","28208b58":"markdown","e4343590":"markdown"},"source":{"6f46d6cd":"%%writefile setup.py\n\nfrom distutils.core import setup, Extension\n\nsetup(name='myspam',\n      version='0.0.1',\n      description='Trivial python module written in C++',\n      ext_modules=[\n          Extension('myspam', ['spam.cpp'],\n                    extra_compile_args = ['-std=c++11'])\n      ]\n)","9969ce97":"%%writefile spam.cpp\n\n#include <cstdlib>\n#include \"Python.h\"\n\n\/\/ C++ funcutions here\nPyObject* myrand(PyObject *self, PyObject *args)\n{\n  return Py_BuildValue(\"i\", rand() % 4);\n}\n\n\/\/ List the functions accessible from Python\nstatic PyMethodDef methods[] = {\n  {\"myrand\", myrand, METH_VARARGS, \"return random integer 0-3\"},\n  {NULL, NULL, 0, NULL}\n};\n\nstatic struct PyModuleDef module = {\n  PyModuleDef_HEAD_INIT,\n  \"myspam\",               \/\/ name of this module\n  \"C++ module example\",   \/\/ Doc String\n  -1,\n  methods\n};\n\nPyMODINIT_FUNC\nPyInit_myspam(void) {  \n  return PyModule_Create(&module);\n}\n","b692a317":"!python3 setup.py build_ext --inplace","1f7fdccc":"! ls","94bc1d09":"# You can use the module in the notebook like this,\n# but submission.py probably cannot access this file\nimport myspam\nmyspam.myrand()","a916d1d6":"import base64\n\nwith open('myspam.cpython-37m-x86_64-linux-gnu.so', 'rb') as f:\n    encoded_string = base64.b64encode(f.read())\n\nwith open('submission.py', 'w') as f:\n    f.write(f'module_str={encoded_string}')","965712fc":"%%writefile -a submission.py\n\nimport base64\nimport kaggle_environments.envs.halite.helpers as hh\nwith open('myspam.cpython-37m-x86_64-linux-gnu.so', 'wb') as f:\n    f.write(base64.b64decode(module_str))\nimport myspam\n\nactions = [hh.ShipAction.NORTH, hh.ShipAction.EAST,\n           hh.ShipAction.SOUTH, hh.ShipAction.WEST]\n\n# Trivial Halite agent randomly walking\ndef agent(obs, config):\n    board = hh.Board(obs, config)\n    me = board.current_player\n\n    for ship in me.ships:\n        i = myspam.myrand()  # Use the C++ code\n        ship.next_action = actions[i]\n    \n    return me.next_actions","7554de67":"## 3. In submission.py\n\n- Decode the module file,\n- write it to file,\n- and import","ffd22efd":"## 4. Submit submission.py\n\nThe agent is superweak, of course, but it works.","3488cdec":"## 2. Convert the module to a string and embed in submission.py\n","91766d8a":"We are [allowed](https:\/\/www.kaggle.com\/c\/halite\/discussion\/159283) to use C++ in Halite competion. However, I am not sure how to do that technically. We cannot access external files; we even need to embed binary pretrained weights to the submission python script (many thanks to [Nail](https:\/\/www.kaggle.com\/c\/connectx\/discussion\/126678) and [higepon](https:\/\/www.kaggle.com\/c\/halite\/discussion\/164005) for sharing how to do that). This is my attempt; let me know if you know a better way.\n\n1. Write a C\/C++ extension module for Python as usual; compile it in this Notebook;\n2. convert the module file to a string with base64 and paste it to `submission.py`;\n3. decode the string and recover the module file in submission.py;\n4. import the module.","9c1b7486":"## 1. Create the module with C\/C++ and compile\n\nWe need at least two files:\n- `spam.cpp`: code in C\/C++\n- `setup.py`: script to compile\n\nYou can `+Add data` or access internet if you want in this step.","28208b58":"### Compile","e4343590":"We can find `myspam.cpython-37m-x86_64-linux-gnu.so`."}}