{"cell_type":{"a239d80c":"code","0ade7dad":"code","70448426":"code","de034ba7":"code","58c245d6":"code","685081bc":"code","93791f0f":"code","6e62015e":"code","fa4df2b7":"code","e5946c0e":"code","07b8f79f":"code","43f3e477":"code","15f86574":"code","2a1acdc1":"code","c88e934b":"code","37adde3a":"code","542b8f04":"markdown","ff503983":"markdown","3433f37f":"markdown","0d39a3fa":"markdown","50a9c4a8":"markdown","b9544562":"markdown"},"source":{"a239d80c":"import pandas as pd\nimport re","0ade7dad":"f = open('..\/input\/chai-time-data-science\/Raw Subtitles\/E75.txt')","70448426":"f.readline()","de034ba7":"f.readline()","58c245d6":"f.readline()","685081bc":"def extract_transcript(fn, save=False, save_path=''):\n    \"Takes transcript and converts it to `DataFrame`\"\n    pat = r'([A-Za-z]|\\s+)\\s([0-9]{0,2}:{0,1}[0-9]{1,2}:[0-9][0-9])'\n    f = open(fn, \"r\")\n    t = True\n    df = pd.DataFrame(columns = ['Time', 'Speaker', 'Text'])\n    i = 0\n    first = True\n    while t:\n        line = f.readline()\n        if line == '': t = False\n        i += 1\n        line = re.split(pat, line[:-1])\n        if len(line) == 4:\n            is_new = 1\n            speak = line[0]\n            time = line[2]\n        while is_new == 1:\n            if first:\n                line = f.readline()\n                for i in range(6):\n                    l_c = f.readline()\n                    if speak not in l_c and time not in l_c:\n                        line += l_c\n                i += 1\n                first = False\n            else:\n                line = f.readline()\n                i += 1\n            if len(line) > 2 and line != '\\n':\n                line = line[:-1]\n                df.loc[i] = [time, speak, line]\n                df.reset_index()\n            else:\n                is_new = 0\n    df.reset_index(drop=True, inplace=True)\n    df['Text'] = df['Text'].replace('\\n', '')\n    if save:\n        df.to_csv(save_path+fn.name[:-3] + 'csv', index=False, sep='|')\n    return df","93791f0f":"df = extract_transcript('..\/input\/chai-time-data-science\/Raw Subtitles\/E73.txt')","6e62015e":"df.head()","fa4df2b7":"df.tail()","e5946c0e":"from fastai.vision import *","07b8f79f":"path = Path('..\/input\/chai-time-data-science\/Raw Subtitles\/')","43f3e477":"path.ls()[:5]","15f86574":"for fn in path.ls():\n    extract_transcript(fn, '..\/output\/kaggle\/working\/')","2a1acdc1":"df = pd.read_csv('.\/E70.csv', delimiter='|')","c88e934b":"df.head()","37adde3a":"df.tail()","542b8f04":"So we can see that we've got the speaker, a timestamp, and the text, before a `\\n` at the end. So let's write a function to do this:","ff503983":"In our function we're using regex to extract the speaker name and the time, and if it's the first row, we grab the next 6 `readlines` due to how Sanyam has his wonderful interviews formatted. Let's try that one:\n\n> Also, do note the seperator for our `csv`'s are a pipe (|), this is due to how we have many commas in our transcripts, so NumPy won't play nice","3433f37f":"# Generating Data from the Chai\n\nWhile helping out Sanyam with this dataset, I wrote a little script that converts our raw text into something that can work for ML frameworks, so let's get into it!","0d39a3fa":"Let's take a look at some of the files we're working with. We'll use the raw `.txt`'s:","50a9c4a8":"So now we have an annotated format! Let's convert all of them:\n\nWe'll use `fastai`'s helpful additions to pathlib as well:","b9544562":"And now we have working CSV's for the entire dataset, have fun!"}}