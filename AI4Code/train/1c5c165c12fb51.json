{"cell_type":{"d683d44c":"code","ce9cbce9":"code","d3d35ea9":"code","07060dd1":"code","2ca41f2e":"code","6302cd05":"code","8e30fee9":"code","e088ae32":"code","a9e23252":"code","47018004":"code","099fcd32":"code","a19f4d53":"code","229fd2e6":"code","77e79d17":"code","31274f79":"markdown","1fe74146":"markdown","1fe068b1":"markdown","e7604596":"markdown","e030a1d8":"markdown","ac4a0771":"markdown","9fcb457d":"markdown","84ce485d":"markdown","c910efcd":"markdown","60e2d25f":"markdown","47d3d557":"markdown","a4503677":"markdown","1f8eaa02":"markdown","8d6f56aa":"markdown"},"source":{"d683d44c":"import json\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ce9cbce9":"with open(\"..\/input\/mobile-phones-tablets-wearables-19942019\/data.json\") as dataset_file:\n    json_data = json.load(dataset_file)","d3d35ea9":"member = json_data[0]\n[f\"{key}->{type(member[key]).__name__}\" for key in member.keys()]","07060dd1":"member = json_data[0][\"devices\"][0]\n[f\"{key}->{type(member[key]).__name__}\" for key in member.keys()]","2ca41f2e":"member = json_data[0][\"devices\"][0][\"info\"]\n[f\"{key}->{type(member[key]).__name__}\" for key in member.keys()]","6302cd05":"df = pd.json_normalize(json_data, 'devices', ['name', 'url'], meta_prefix='manufacturer_')\ndf","8e30fee9":"def get_year(s):\n    try:\n        year = int(s.strip()[:4])\n        return year\n    except:\n        pass\n\nplt.figure(figsize=(30, 10))\nsns.histplot(data=df, x=df[\"info.Launch.Announced\"].apply(get_year), bins=25)","e088ae32":"plt.figure(figsize=(30, 10))\nsns.histplot(data=df, x=\"manufacturer_name\")\n_=plt.xticks(rotation = 90) ","a9e23252":"df[\"info.title\"].apply(lambda t: t[t.rfind(\"-\") + 2:]).unique()","47018004":"def assume_device_type(row):\n    if \"Full tablet specification\" in row[\"info.title\"]:\n        return \"tablet\"\n    elif \"wear\" in row[\"info.title\"].lower() or \"watch\" in row[\"info.title\"].lower():\n        return \"watch\"\n    elif \"Galaxy Camera\" in row[\"info.title\"] or \"Lumix Smart Camera\" in row[\"info.title\"]:\n        return \"camera\"\n    else:\n        return \"phone\"\n\ndf[\"type\"] = df.apply(assume_device_type, axis=1)","099fcd32":"sns.countplot(data=df, x=\"type\")","a19f4d53":"def get_weight(weight):\n    try:\n        return float(weight[:weight.index(\"g\")].strip())\n    except:\n        return None\n\nplt.figure(figsize=(30, 10))\nsns.lineplot(data=df, \n             x=df[\"info.Launch.Announced\"].apply(get_year), \n             y=df[df.type == \"phone\"][\"info.Body.Weight\"].apply(get_weight))","229fd2e6":"def get_screen_size(weight):\n    try:\n        return float(weight[:weight.index(\" \")].strip())\n    except:\n        return None\n\nplt.figure(figsize=(30, 10))\nsns.lineplot(data=df, \n             x=df[df.type == \"phone\"][\"info.Launch.Announced\"].apply(get_year), \n             y=df[df.type == \"phone\"][\"info.Display.Size\"].apply(get_screen_size))","77e79d17":"plt.figure(figsize=(30, 10))\nsns.lineplot(data=df, \n             x=df[df.type == \"tablet\"][\"info.Launch.Announced\"].apply(get_year), \n             y=df[df.type == \"tablet\"][\"info.Display.Size\"].apply(get_screen_size))","31274f79":"But there's a catch: If we look closely we will see that Smartwatches and some exotic devices such as the [Samsung Galaxy Camera ](http:\/\/www.gsmarena.com\/samsung_galaxy_camera_2_gc200-5928.php) are listed as phones. So, let's come up with some basic filter classifier based on the title:","1fe74146":"So, finally let's explore the `info` dict. As you can see it has multiple entries on all kinds of technical parameters of this device. Note that these keys may be different from one device to another, and, some entries might be new dicts! ","1fe068b1":"How about something more advanced? Let's see how the weight of obile phones has changed over time.","e7604596":"You may be wondering how we can split the dataset and just filter out phones for example. Unfortunately, there is no such field in our table. \nWe could try to classify a device by it's properties: A phone will always have GSM and will be smaller than a tablet. Also, it will only run specific OS. Using this information we could write a rather noisy classifier - but there is actually a way nicer solution! Look at the `info->title` property of each device. It says  \"[...] - Full **phone** specifications\" for phones and \"[...] - Full **tablet** specifications\" for tablets - so we can mine the device type from the name!","e030a1d8":"Okay, so now we take a closer look at `devices` by plotting its keys and we see that it also has a meta info such as `url` and `name` but also another dict that contains all technical parameters about this model called `info`.","ac4a0771":"Let's get a feeling for the dataset by plotting the distribution over time. We can see that there was a peak in models (not necessarily sales!) in 2014.\n\nThe way we are parsing the date here is super lazy but does the trick - I am sure you can come up with soemthing better!","9fcb457d":"We can see that the screen size increased rapidly after 2007, but it seems to be quite constant in the years before. Do we see the same trend in tablets?","84ce485d":"There is also an increasing trend for tablet screen sizes. There was a longer period where 8in phablets seem to have dominated the market which seems to have shifted towards 10in tablets in recent years. Interestingly the variance (i.e. many choices) has decreased until 2013. It seems like most of the tablets released that year were 8in tall. But after 2013 variance has steadily increased.","c910efcd":"Load the json dataset. Note that the records are grouped by manufacturer. Also, they are not very homogenous. So, expect different keys for the same information on various records. ","60e2d25f":"Looks like phone weight has been steadily declining up until 2002 and then started increasing again. If that that trend continues we will be back where we started in a few year. Is that correlated to the screen size?","47d3d557":"Let's look at the json format. We can see that the top element is an array of manufacturers. Each manufacturer has a `url`  and `name` fiels aswell as an `devices` entry (another dict) that holds all the devices of this manufacturer.","a4503677":"We can work on the raw and nested json or simply convert it to a pandas DataFrame. Pandas provides the `json_normalize()` function that flattens the json tree and creates a dataframe.  ","1f8eaa02":"And how many device do we have for each manufacturer?","8d6f56aa":"We can see that Samsung has the most models in our data, followed by LG which has roughly half as many."}}