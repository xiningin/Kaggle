{"cell_type":{"a5c388ad":"code","1c6f2cc1":"code","385e6ce3":"code","e8e62232":"code","4fb64d7e":"code","17d5a7dc":"code","14bd67e9":"markdown","395d645f":"markdown","bb885f10":"markdown","1caeb99c":"markdown","f96ad017":"markdown","733f64a4":"markdown","54bea70b":"markdown","3a0961cc":"markdown","548decc4":"markdown"},"source":{"a5c388ad":"import torch\nimport torchvision","1c6f2cc1":"vgg16 = torchvision.models.vgg16(num_classes=6)","385e6ce3":"# First load and preprocess the dataset\ntrans = torchvision.transforms.Compose([                       # Order matters!\n    torchvision.transforms.CenterCrop(100),                    # Crop img to 100 x 100 px\n    torchvision.transforms.PILToTensor(),                      # Turn image into tensor\n    torchvision.transforms.ConvertImageDtype(torch.float),     # Turn into float\n    torchvision.transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n])\n\ntrain_data = torchvision.datasets.ImageFolder(\"..\/input\/intel-image-classification\/seg_train\/seg_train\", transform=trans)\ntrain_loader = torch.utils.data.DataLoader(dataset=train_data, shuffle=True)","e8e62232":"# Next create an optimisation loop\ndef gradient_descent(learning_rate):\n    opt = torch.optim.Adam(params=vgg16.parameters(), lr=learning_rate)\n    \n    for x, y in train_loader:\n        print(\".\", end=\"\")\n        pred = vgg16(x)\n        loss = torch.nn.functional.cross_entropy(pred, y)\n    \n        loss.backward()                     # Backpropagation\n        opt.step()                          # Update parameters\n        opt.zero_grad()                     # Reset gradient computation\n        \ngradient_descent(0.1)","4fb64d7e":"vgg16_pretrained = torchvision.models.vgg16(pretrained=True)\ncustom = torch.nn.Sequential(\n    torch.nn.Linear(1000,100),\n    torch.nn.ReLU(),\n    torch.nn.Linear(100,6),\n    torch.nn.Sigmoid(),\n)","17d5a7dc":"# Next create an optimisation loop\ndef gradient_descent(learning_rate):\n    opt = torch.optim.Adam(params=custom.parameters(), lr=learning_rate)\n    \n    for x, y in train_loader:\n        print(\".\", end=\"\")\n        feature = vgg16_pretrained(x)                          # Take output from pretrained VGG\n        pred = custom(feature)                                 # Pass it into our custom model\n        loss = torch.nn.functional.cross_entropy(pred, y)\n    \n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n        \ngradient_descent(0.1)","14bd67e9":"I can see the [source code](https:\/\/pytorch.org\/vision\/stable\/_modules\/torchvision\/models\/vgg.html) for the model to check the available methods I can use.","395d645f":"After this, we'd do what we did in the last lesson: graph results, change hyperparameters, check for bias vs. variance...\n\nBut NOT try to adjust the model architecture as much. That's the benefit of transfer learning!","bb885f10":"![cat meme](https:\/\/i.kym-cdn.com\/entries\/icons\/original\/000\/026\/638\/cat.jpg)\n![radiology scan](https:\/\/cdn.pixabay.com\/photo\/2020\/02\/09\/07\/06\/xray-4832140_1280.jpg)\n![transfer model](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/a\/ab\/Transfer_Learning.png)\n![transfer model diagram](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6a\/Transfer_Learning_Neural_Network_Diagram.png)","1caeb99c":"This notebook is accompanied by a video tutorial. If you'd like to see me explain the code, [here's](https:\/\/youtu.be\/CvogUl_5eGs) the video!","f96ad017":"## Train the model ourself\n[Docs](https:\/\/pytorch.org\/vision\/stable\/datasets.html#torchvision.datasets.ImageFolder) on `ImageFolder` class.\n\n[Docs](https:\/\/discuss.pytorch.org\/t\/how-to-preprocess-input-for-pre-trained-networks\/683\/2) on how to normalize images for Pytorch pretrained models.","733f64a4":"Outline:\n- When to use transfer learning (little data, little computational resources for training)\n- Concept of transfer learning (use existing architecture, then change output layers)\n- Benefits\/drawbacks of transfer learning.\n- How to find a transfer learning model. \n- How to import a transfer learning model.\n- How to train a transfer learning model.","54bea70b":"## Get a pretrained model","3a0961cc":"![VGG 16 picture diagram](https:\/\/neurohive.io\/wp-content\/uploads\/2018\/11\/vgg16-1-e1542731207177.png)\n![VGG 16 concise diagram](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/2\/24\/VGG16.png)","548decc4":"### Find common pretrained models [here](https:\/\/pytorch.org\/vision\/stable\/models.html)\nFind many other pretrained ML models [here](https:\/\/modelzoo.co\/)\nOr just turn to [research papers](https:\/\/github.com\/xaliceli\/lemotif)"}}