{"cell_type":{"d5d14aa1":"code","c33abc73":"code","60e86623":"code","e518c605":"code","015b229d":"code","adec52f1":"code","6ef08038":"code","e11d8009":"code","827b1714":"code","833f781a":"code","0ad3d422":"code","6855aae0":"code","5c06c676":"code","cecb1ff6":"code","9bcb2e10":"code","f26278d6":"code","a4302185":"code","18f391c9":"code","dfb82278":"code","4dc8aa72":"code","3314ee5b":"code","f0f96896":"code","4ea08a29":"code","1a35ca31":"code","f0b761b6":"code","3df6ea49":"code","0bf9f4b9":"code","daac8620":"markdown","8f0bab91":"markdown","696c48fb":"markdown","4340aa95":"markdown","ffca820b":"markdown","2206e96b":"markdown","5758c7db":"markdown","8378586f":"markdown","9738735a":"markdown","c696701c":"markdown","49a19c1b":"markdown","f4c5ba3a":"markdown","4f6abd09":"markdown","8c19e96f":"markdown","a9aba016":"markdown","bb4cae66":"markdown","a74b1f1a":"markdown","36a97394":"markdown","35017ab2":"markdown","6dc1009a":"markdown","346adb72":"markdown","f3e999d7":"markdown","d3d9129c":"markdown","9759ca30":"markdown","c4e84b2d":"markdown","fa084ea9":"markdown","c087952d":"markdown","0b9874c9":"markdown"},"source":{"d5d14aa1":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","c33abc73":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","60e86623":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","e518c605":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","015b229d":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)","adec52f1":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","6ef08038":"fig = data.Passengers.hist(figsize = (20,5))","e11d8009":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","827b1714":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","833f781a":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","0ad3d422":"data['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","6855aae0":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","5c06c676":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","cecb1ff6":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\ndata['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","9bcb2e10":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","f26278d6":"data_boxcox_diff.dropna(inplace=True)","a4302185":"data_boxcox_diff.tail()","18f391c9":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","dfb82278":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","4dc8aa72":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","3314ee5b":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","f0f96896":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","4ea08a29":"train_data_boxcox_diff[:5]","1a35ca31":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(train_data_boxcox_diff, order=(0, 0, 1)) \nmodel_fit = model.fit()\nprint(model_fit.params)","f0b761b6":"y_hat_ma = data_boxcox_diff.copy()\ny_hat_ma['ma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox_diff'].cumsum()\ny_hat_ma['ma_forecast_boxcox'] = y_hat_ma['ma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_ma['ma_forecast'] = np.exp(y_hat_ma['ma_forecast_boxcox'])","3df6ea49":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data['Passengers'][:train_len], label='Train')\nplt.plot(data['Passengers'][train_len:], label='Test')\nplt.plot(y_hat_ma['ma_forecast'][test.index.min():], label='Moving average forecast')\nplt.legend(loc='best')\nplt.title('Moving Average Method')\nplt.show()","0bf9f4b9":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_ma['ma_forecast'][test.index.min():])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_ma['ma_forecast'][test.index.min():])\/test['Passengers'])*100,2)\n\nresults =  pd.DataFrame({'Method':['Moving Average (MA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","daac8620":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","8f0bab91":"# Time series analysis","696c48fb":"# Initial setup","4340aa95":"## Moving average method (MA)","ffca820b":"### Box plot and interquartile range","2206e96b":"### Recover original time series","5758c7db":"## Time series Decomposition","8378586f":"## Import time series data: Airline passenger traffic","9738735a":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","c696701c":"### Plot train, test and forecast","49a19c1b":"### Augmented Dickey-Fuller (ADF) test","f4c5ba3a":"## Missing value treatment","4f6abd09":"## Outlier detection","8c19e96f":"## Partial autocorrelation function (PACF)","a9aba016":"# Auto Regressive methods","bb4cae66":"## Import required packages","a74b1f1a":"### Histogram plot","36a97394":"## Plot time series data","35017ab2":"## Split time series data into training and test set","6dc1009a":"### Box Cox transformation to make variance constant","346adb72":"### Differencing to remove trend","f3e999d7":"### Multiplicative seasonal decomposition","d3d9129c":"### Additive seasonal decomposition","9759ca30":"### Augmented Dickey-Fuller (ADF) test","c4e84b2d":"### Calculate RMSE and MAPE","fa084ea9":"## Autocorrelation function (ACF)","c087952d":"## Stationarity vs non-stationary time series","0b9874c9":"# Build and evaluate time series forecast"}}