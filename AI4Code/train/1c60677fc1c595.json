{"cell_type":{"ae57ece0":"code","194d1ab5":"code","9bedffd4":"code","b6051867":"code","d0597c50":"code","17ec18a6":"code","491ac56b":"code","9566ac20":"code","e26513ab":"code","7f9d545c":"code","af1ceafb":"code","abeb9425":"code","4c3d2c34":"code","45678617":"code","913b02ff":"code","ee899bf4":"code","7951025e":"code","baa8a5a6":"code","0540de7a":"code","38cd2829":"code","62e5b9d4":"code","d4ba7659":"code","785e5085":"code","00d6c9b7":"code","3aced7f6":"markdown","c4aca592":"markdown","6267c6ef":"markdown","f0815ec7":"markdown","6c2358cb":"markdown","720bd9d5":"markdown","9015825c":"markdown","6a0b9228":"markdown","8d474312":"markdown","dfd6980c":"markdown","a9d6d6e4":"markdown","83e0f623":"markdown","1d4a7fca":"markdown"},"source":{"ae57ece0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","194d1ab5":"df=pd.read_csv(\"\/kaggle\/input\/russian-passenger-air-service-20072020\/russian_air_service_CARGO_AND_PARCELS.csv\")\ndf.head()","9bedffd4":"df.describe()","b6051867":"df.info()","d0597c50":"print('Number of rows:', df.shape[0])\nprint('Number of Airports:', df['Airport name'].nunique())\nprint('First Year:', df['Year'].min())\nprint('Last Year:', df['Year'].max())","17ec18a6":"months = df.columns[~df.columns.isin([\n    'Airport name',\n    'Airport coordinates',\n    'Whole year', 'Year'\n])]\nmapping= {v: k for k,v in enumerate(months, start=1)} ","491ac56b":"time_series = df.melt(\n    id_vars=['Airport name', 'Year'],\n    value_vars=months,\n    var_name='Month',\n    value_name=\"cargo_&_parcel\"\n)\ntime_series.head()","9566ac20":"time_series['date'] = time_series.apply(lambda x: f\"{x['Year']}-{mapping[x['Month']]:02d}\", axis=1)\n\ntime_series['date'] = pd.to_datetime(time_series['date']) ","e26513ab":"\n# Covert type\ntime_series = (\n    time_series\n    .rename(columns={'Airport name': 'airport', 'value': 'cargo_&_parcel'})\n    .drop(columns=['Year', 'Month'])\n)\ntime_series.head()","7f9d545c":"rpass=time_series.groupby([\"date\"])[\"cargo_&_parcel\"].sum().loc[:'2020-01-01'] \nrpass.head()","af1ceafb":"import plotly.express as px\nfig = px.line(rpass.reset_index(),x=\"date\",y=\"cargo_&_parcel\",title=\"TREND OF AIRLINES IN RUSSIA\")\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","abeb9425":"plt.figure(figsize=(20,7))\nrpassrolling=time_series.groupby([\"date\"])[\"cargo_&_parcel\"].sum().loc[:'2019-12-01'] \nrolmean = rpassrolling.rolling(window=13).mean()\nrolstd = rpassrolling.rolling(window=13).std()\noriginal=plt.plot(rpassrolling,color=\"blue\",label=\"Original\")\nmean=plt.plot(rolmean,color=\"red\",label=\"Mean\")\nstd=plt.plot(rolstd,color=\"black\",label=\"Std\")\nplt.legend()\nplt.title(\"ROLLING TEST\")\nplt.show()","4c3d2c34":"from statsmodels.tsa.stattools import adfuller\ndef adfuller_test(passenger):\n    res=adfuller(passenger)\n    labels=[\"ADF TEST STATISTICS\",\"P-VALUE\",\"LAGS USED\",\"NUMBER OF OBSERVATION USED\"]\n    for value,label in zip(res,labels):\n        print(label+' : '+str(value))\n    if(res[1]<=0.05):\n        print(\"Stationary\")\n    else:\n        print(\"Not Stationary\")\nadfuller_test(rpass.reset_index()[\"cargo_&_parcel\"].dropna())","45678617":"rpass=rpass.reset_index()\nrpass[\"seasonal difference\"]=rpass[\"cargo_&_parcel\"]-rpass[\"cargo_&_parcel\"].shift(13)\nrpass.tail()","913b02ff":"plt.figure(figsize=(20,5))\nadfuller_test(rpass.reset_index()[\"seasonal difference\"].dropna())\npx.line(rpass,y=\"seasonal difference\",x=\"date\",title=\"TREND AFTER SHIFTING\")","ee899bf4":"plt.figure(figsize=(10,5))\nfrom pandas.plotting import autocorrelation_plot\nautocorrelation_plot(rpass[\"cargo_&_parcel\"])\nplt.show()","7951025e":"import statsmodels as sm\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf","baa8a5a6":"fig=plt.figure(figsize=(12,8))\nax1=fig.add_subplot(211)\nfig=plot_acf(rpass[\"seasonal difference\"].dropna(),lags=40,ax=ax1)\nax2=fig.add_subplot(212)\nfig=plot_pacf(rpass[\"seasonal difference\"].dropna(),lags=40,ax=ax2)","0540de7a":"#p=0,q=10,d=1\nfrom statsmodels.tsa.arima_model import ARIMA","38cd2829":"#rpass.set_index(\"date\",inplace=True)\nimport statsmodels.api as sm\nmodel=sm.tsa.statespace.SARIMAX(rpass[\"cargo_&_parcel\"],order=(0,1,10),seasonal_order=(0,1,10,12))\nresults=model.fit()","62e5b9d4":"rpass[\"Future Prediction\"]=results.predict(start=130,end=154,dynamic=True)\nrpass[[\"cargo_&_parcel\",\"Future Prediction\"]].plot(figsize=(20,8))\nplt.title(\"TESTING PREDICTED VALUE WITH DATASET\")","d4ba7659":"from pandas.tseries.offsets import DateOffset\nfuture_dates=[rpass.index[-1]+ DateOffset(months=x) for x in range(0,24)]","785e5085":"future_datest_df=pd.DataFrame(index=future_dates[1:],columns=rpass.columns)\nfuture_datest_df.tail()","00d6c9b7":"future_df=pd.concat([rpass,future_datest_df])\nfuture_df['Future Prediction']=results.predict(start=156,end=200,dynamic=True)\nfuture_df[[\"cargo_&_parcel\",\"Future Prediction\"]].plot(figsize=(20,8))","3aced7f6":"# EDA","c4aca592":"# **DATA PREPROCESSING**","6267c6ef":"Now It is time for making prediction","f0815ec7":"# Dicky Fuller Test\n\nThis is the similar test for Rolling test\nfrom this using P-value we can confirm wheather our data is stationary or not\nIf p-value<0.05 data is stationary","6c2358cb":"FROM AUTOCORRELATION we will find upto which lag exponential decrease is there\nfor this case it is 10\nSo P=10\nFROM PARTIAL AUTOCORRELATION we find shutdown point\nhere q=0","720bd9d5":"**This is a Time Analysis Model of Russian Airlines**\nThis dataset contains Yearwise number of passenger,cargo & parcels traveled over Russian Airlines.\n\n# Content:\n* Cargo and Parcel dataset Preprocessing\n* Exploratory Data Analysis\n* Visualizing the trend of Airlines over Russia\n* Rolling Test & visualization for checking stationarity of the data\n* Dicky Fuller Test\n* Shifting of Data to reduce Seasonality\n* Autocorrelation And Partial Autocorrelation \n* Taking required data for proper implementation of ARIMA model\n* Implementing SEASONAL ARIMA MODEL\n* Testing our prediction with previous data\n* Making Future Prediction for 2021","9015825c":"# Autocorrelation And Partial Autocorrelation","6a0b9228":"***This is our dataset for RUSSIAN AIR SERVICE CARGO AND PARCELS***","8d474312":"ROLLING TEST\n\nThis test is to check stationarity of the Data\n1. If Mean & Standard deviation both are straight then the data will be stationary\n2. If any one of those are not straight then data the will be Not stationary\n\nAs per the visualization \n* Mean is not straight\n* Std is straight\nSo overall the data is Not stationary","dfd6980c":"So our data is not stationary and now we have to make our data stationary\nFor that we will be using Differencing or Shifting Method over a prefferable Time window","a9d6d6e4":"We will make a list of months & map those with corresponding Values","83e0f623":"# USE THE SLIDER FOR DETAIL VIEW","1d4a7fca":"# **Differencing**"}}