{"cell_type":{"a21b87ed":"code","3fb2eda7":"code","169f024e":"code","9f652e41":"code","8b0b587b":"code","50b7ff9a":"code","66ff8683":"code","96cb92d0":"code","e4f8a5c0":"code","804ec1ba":"code","815fec0d":"code","2aa3cc47":"code","82b3abee":"code","d5fe3d77":"code","e121588b":"code","229fe1f8":"code","eb83a5a5":"code","dabfd5b7":"code","b51ab6e1":"code","5ff1e955":"code","da894c76":"markdown","9f0e3aa5":"markdown","8cdfabf9":"markdown","8c60209e":"markdown","2f2efe49":"markdown","a9806064":"markdown","b9eb746f":"markdown","ebf43080":"markdown","bbbdf894":"markdown","4ccb2c24":"markdown","0c50423a":"markdown","dd6c581d":"markdown","2261c48e":"markdown"},"source":{"a21b87ed":"import pandas as pd\nimport numpy as np\nimport os\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.utils import to_categorical,plot_model\n\nfrom keras.models import Input,Model,Sequential\nfrom keras.layers import LSTM,Embedding,Dropout,Activation,Reshape,Dense,GRU,Add,Flatten,concatenate,Bidirectional\n\nfrom keras.preprocessing.text import one_hot\nfrom keras.preprocessing.sequence import pad_sequences\n\nfrom keras.utils import to_categorical,plot_model\nimport matplotlib.pyplot as plt\nfrom keras.callbacks import ModelCheckpoint\n","3fb2eda7":"DATASET_PATH = \"..\/input\/fake-news-challenge\/\"\n\ntrain_bodies = pd.read_csv(os.path.join(DATASET_PATH,'train_bodies.csv'))\n# train_bodies.head()\ntrain_stance = pd.read_csv(os.path.join(DATASET_PATH,'train_stances.csv'))","169f024e":"# Run commented code to combine the two csv file{train_bodies.csv,train_stances.csv} into data_combined.csv file\nfrom tqdm.notebook import tqdm\ncount=0\nfor i in tqdm(range(train_stance.shape[0])):\n    for j in range(train_bodies.shape[0]):\n        if train_bodies.loc[j,'Body ID']==train_stance.loc[i,'Body ID']:\n            train_stance.loc[i,'articleBody'] = train_bodies.loc[j,'articleBody']\n\n\ntrain_stance.to_csv(os.path.join(os.getcwd(),'data_combined.csv'),index=False)","9f652e41":"data = pd.read_csv(os.path.join(os.getcwd(),'data_combined.csv'))#generated from Fake News stanford.ipynb\ndata.head()","8b0b587b":"data['stance_cat'] = data['Stance'].map({'agree':0,'disagree':1,'discuss':2,'unrelated':3}).astype(int)\ndata['Stance'].value_counts()","50b7ff9a":"corpus = np.r_[data['Headline'].values,data['articleBody'].values]\nprint(49972*2)\nprint(len(corpus)) # first 49972 contains the Headline and next 49972 contains the articleBody\n\nvocabulary = []\nfor sentence in corpus:\n    vocabulary.extend(sentence.split(' '))\n\nvocabulary = list(set(vocabulary))\nvocab_length = len(vocabulary)\nprint(\"Vocabulary Length is {0}\".format(vocab_length))\n","66ff8683":"max_features = 5000\nMAX_NB_WORDS = 24000\nEMBEDDING_DIM = 50\nMAX_SEQUENCE_LENGTH = 64","96cb92d0":"GLOVE_DIR = \"..\/input\/glove50d\/\"\ndef setup_embedding_index():\n    embedding_index=dict()\n    f = open(os.path.join(GLOVE_DIR,\"glove.6B.50d.txt\"),encoding='utf-8')\n    for line in f:\n        values = line.split()\n        word = values[0]\n        coefs = np.array(values[1:],dtype='float32')\n        embedding_index[word] = coefs\n    f.close()\n    return embedding_index\nembeddings_index = setup_embedding_index()","e4f8a5c0":"tokenizer_headline = Tokenizer(num_words=max_features, split=' ')\ntokenizer_headline.fit_on_texts(data.loc[:,'Headline'].values)\nvocab_headline_length = len(tokenizer_headline.word_index)+1\n\nencoded_docs_headline = tokenizer_headline.texts_to_sequences(data.loc[:,'Headline'])\npadded_docs_headline = pad_sequences(encoded_docs_headline, maxlen=16, padding='post')\n\nprint(vocab_headline_length)\nword_index_headline = tokenizer_headline.word_index\n\nNUM_WORDS_HEADLINE = vocab_headline_length","804ec1ba":"tokenizer_body = Tokenizer(num_words=max_features, split=' ')\ntokenizer_body.fit_on_texts(data.loc[:,'articleBody'].values)\nvocab_body_length = len(tokenizer_body.word_index)+1\n\nencoded_docs_body = tokenizer_body.texts_to_sequences(data.loc[:,'articleBody'])\npadded_docs_body = pad_sequences(encoded_docs_body, maxlen=48, padding='post')\n\nprint(vocab_body_length)\nword_index_body = tokenizer_body.word_index\n\n\nNUM_WORDS_BODY = vocab_body_length\nprint(NUM_WORDS_BODY)","815fec0d":"\nembedding_matrix_headline = np.zeros((NUM_WORDS_HEADLINE, EMBEDDING_DIM))\n\nfor word, i in tokenizer_headline.word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix_headline[i] = embedding_vector\ndims = len(embedding_matrix_headline[0])\n\nprint(dims)","2aa3cc47":"\nembedding_matrix_body = np.zeros((NUM_WORDS_BODY, EMBEDDING_DIM))\n\nfor word, i in tokenizer_body.word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix_body[i] = embedding_vector\ndims = len(embedding_matrix_body[0])\n\nprint(dims)","82b3abee":"print(padded_docs_headline.shape)\nprint(padded_docs_body.shape)","d5fe3d77":"input_headline = Input(shape=16,name='input_headline')\nembedding_layer_headline = Embedding(input_dim = vocab_headline_length,output_dim = 50,\n                                     weights=[embedding_matrix_headline],\n                                     input_length = 16,trainable=True)(input_headline)\n\n# lstm_headline = LSTM(units=16)(embedding_layer_headline)\n\ninput_body = Input(shape=48,name='input_body')\nembedding_layer_body = Embedding(input_dim = vocab_body_length,output_dim = 50,weights = [embedding_matrix_body],\n                                 input_length=48,trainable = True)(input_body)\nlstm_body = LSTM(units=48)(embedding_layer_body)\n\naddition_layer = concatenate([embedding_layer_headline,embedding_layer_body],axis=1)\n\n# addition_layer = concatenate([lstm_headline,lstm_body],axis=1)\nlstm = LSTM(units=64,)(addition_layer)\ndrop = Dropout(0.25)(lstm)\n# dense = Dense(64,activation='relu')(drop)\n# flatten = Flatten()(addition_layer)\n\noutput = Dense(4,activation='sigmoid')(drop)\n\nmodel = Model(inputs=[input_headline,input_body],outputs=output)\n# from keras.optimizers import SGD\n# sgd = SGD(lr=0.0001, decay=1e-6, momentum=0.9, nesterov=True)\n\n# model.compile(loss = \"categorical_crossentropy\", optimizer = sgd,metrics = ['accuracy'])\n\nmodel.compile(optimizer = 'adam',loss ='categorical_crossentropy',metrics = ['accuracy'])\n","e121588b":"model.summary()","229fe1f8":"plot_model(model, to_file='model_glove_lstm.png', show_shapes=True, show_layer_names=True)","eb83a5a5":"padded_docs_headline_train = padded_docs_headline[:int(len(padded_docs_headline)*0.9),:]\npadded_docs_headline_test = padded_docs_headline[int(len(padded_docs_headline)*0.9):,:]\n\npadded_docs_body_train = padded_docs_body[:int(len(padded_docs_body)*0.9),:]\npadded_docs_body_test = padded_docs_body[int(len(padded_docs_body)*0.9):,:]\n\nlabels = to_categorical(data.loc[:,'stance_cat'])\n\nlabels_train = labels[:int(len(labels)*0.9),:]\nlabels_test = labels[int(len(labels)*0.9):,:]\n","dabfd5b7":"# MODELS_DIR = os.path.join(\"\/home\/abhinav\/fake_news_challenge\/model\/glove_lstm\")\nfilepath = os.path.join(os.getcwd(),\"{epoch:02d}-{val_accuracy:.2f}.hdf5\")\ncheckpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')","b51ab6e1":"model_history = model.fit([padded_docs_headline_train,padded_docs_body_train],labels_train,epochs=40,shuffle=True,verbose=1,\n                          validation_data=([padded_docs_headline_test,padded_docs_body_test],labels_test),\n                                          callbacks=[checkpoint])","5ff1e955":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\nax1.plot(model_history.history['loss'], color='b', label=\"Training loss\")\nax1.plot(model_history.history['val_loss'], color='r', label=\"validation loss\")\nax1.set_xticks(np.arange(1, 40, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\n\nax2.plot(model_history.history['accuracy'], color='b', label=\"Training accuracy\")\nax2.plot(model_history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nax2.set_xticks(np.arange(1, 40, 1))\n\nlegend = plt.legend(loc='best', shadow=True)\nplt.tight_layout()\nplt.show()","da894c76":"# Combining the CSV\n\nI am preparing a final csv in each row will correspond to a unique entry\ni.e each row will correspond to a unique combination of headline,bodyid and article body \n\nThe above is needed for making simplicity in further data preparation steps we need to execute\n","9f0e3aa5":"## Importing Libraries","8cdfabf9":"## Dataset Preparation\n\n**train_bodies.csv** contains body id and article body for training  \n**train_stances.csv** contains headlines corresponding to body id and associated labelled stance with it\n","8c60209e":"## Model Architecture","2f2efe49":"## Padding headline and body \n\nWe pad the headline into length of 16 as headline is of shorter length and body into length of 48 as observed best performing parameter for body is 48.","a9806064":"# Dataset understanding\nThe train_bodies contain the entries for the body id and associated article Body\nThe train_stances contain the entries for the headlines associated with the particular body id and its labelled stance\nOne body present in train_bodies can have multiple associated headlines present in train_stances and it's corresponding stance label\n1683 :- Number of article Body present\n49972 number of total headlines present for the 1683 different article body","b9eb746f":"# Problem Statement","ebf43080":"## Creating Embedding Matrix For Headline and Body\n\nWe create Emebdding Matrix for headline and Body to be served as a first layer of Deep learning Model","bbbdf894":"## Model Training History","4ccb2c24":"# Model Training","0c50423a":"1. We are given a dataset consisting of two csv files train_bodies.csv which contains the set of news articles bodies,while train-stances.csv resembles the articles for each of these bodies being identified using the body id.\n\n2. After training from these samples we need to detect whether the given headline agrees,disagrees,discusses,unrelated with the body id\n","dd6c581d":"## Creating Checkpoints \n\nFor saving the latest model trained after every epoch","2261c48e":"## Model Training Parameters"}}