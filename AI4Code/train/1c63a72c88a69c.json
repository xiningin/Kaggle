{"cell_type":{"438654ca":"code","45c20fd3":"code","4b6dc08b":"code","cd2e32af":"code","0cfc0f43":"code","7eea1f2c":"code","9590b8dd":"code","4d6a864a":"code","c76fa0dc":"code","61453800":"code","9a07e13b":"code","87844cfe":"code","babb1f79":"code","967387ba":"code","1518584e":"code","67101c79":"code","e5819caf":"code","dc66618d":"code","4fe2d33f":"code","3297e73a":"code","1fbca21b":"code","ee7bf484":"code","88dce1b2":"code","49e9a12f":"code","1393ecad":"code","62873f31":"code","73cd9879":"code","98d37a8a":"code","9459f530":"code","d6b13e35":"code","9053a5b5":"code","bca63936":"markdown","40aaf27b":"markdown","de515a87":"markdown","20e7c192":"markdown","cd7fc77a":"markdown","deec8e25":"markdown","04162e93":"markdown","a6f72740":"markdown","828eed0a":"markdown","3af357cd":"markdown","c8b59f05":"markdown","1637592a":"markdown","bd1f9b55":"markdown","a21526be":"markdown","798c87af":"markdown","eadbe93c":"markdown","00a45584":"markdown","d2c0f345":"markdown","595aedc5":"markdown","d054fed2":"markdown","fa9e8425":"markdown","9975aa7a":"markdown","8543982c":"markdown","a00d1460":"markdown","773e6cfa":"markdown"},"source":{"438654ca":"import numpy as np \nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nimport warnings \nwarnings.filterwarnings('ignore')","45c20fd3":"'''load training dataset'''\ntrain_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\nsubdf = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","4b6dc08b":"sub_df = subdf.drop(['PassengerId'],axis =1)\ntest_df =pd.concat([test_df,sub_df],axis = 1)\ndf = pd.concat([train_df,test_df],axis =0)\ndf.head()","cd2e32af":"list(df.columns.values)","0cfc0f43":"df = df[['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Survived']]\ndf.head()","7eea1f2c":"df.shape","9590b8dd":"df.describe()","4d6a864a":"print(df.isnull().sum())\nsns.heatmap(df.isnull(),cbar=False, cmap='viridis')","c76fa0dc":"df['Survived'].value_counts()\nsns.countplot(df['Survived'])","61453800":"corr_matrix = df.corr()\ncmap = sns.diverging_palette(230, 20, as_cmap=True) \nsns.heatmap(corr_matrix, annot=None ,cmap=cmap)","9a07e13b":"corr_matrix.nlargest(5, 'Survived')['Survived'].index","87844cfe":"lis=['Cabin','Name']\ndf= df.drop(lis ,axis=1)\ndf.head()","babb1f79":"sns.set_style('whitegrid')\nsns.countplot(x=df['Survived'],hue=df['Sex'],data=df)","967387ba":"for i in df[['Age' ,'Pclass' ,'Fare','Parch']] :\n    print(i,'&','Survived')\n    df.hist(column=i, by='Survived')","1518584e":"cleaning = df.drop(['Survived'],axis = 1)\nSurvived = df['Survived']\nnumerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric_cols = cleaning.select_dtypes(include=numerics)\nnumeric_cols = numeric_cols.fillna(numeric_cols.mean())","67101c79":"categorical = ['object']\ncategorical_cols = cleaning.select_dtypes(include=categorical)\ncategorical_cols = categorical_cols.fillna('none')\ncategorical_cols = pd.get_dummies(categorical_cols )","e5819caf":"cleaned = pd.concat([numeric_cols,categorical_cols],axis= 1)\ndf = pd.concat([cleaned,Survived],axis = 1)\ndf.head()","dc66618d":"test_dfn = df.iloc[ 891 : ,:-1]\ntest_df = df.iloc[ 891 : ,:-1].values\ntest_dfn","4fe2d33f":"test_df","3297e73a":"X = df.iloc[:,:-1].values\ny = df['Survived'].values","1fbca21b":"scl = MinMaxScaler(feature_range = (0, 1))\nX = scl.fit_transform(X) \ntest_df = scl.fit_transform(test_df) ","ee7bf484":"X_train ,X_test ,y_train ,y_test = train_test_split(X, y , test_size = 0.3, random_state = 44)","88dce1b2":"#lgm = LogisticRegression()\n#lgm = lgm.fit(X_train,y_train)\n#y_tpred = lgm.predict(X_train)\n#y_pred = lgm.predict(X_test)\n# print('train score :',accuracy_score(y_train ,y_tpred ))\n#print('test score :',accuracy_score(y_test , y_pred))\n# print('con matrix :',confusion_matrix(y_test, y_pred))\n#print('report :',classification_report(y_test, y_pred ))\n                                                                                      # SCORE : 0.85","49e9a12f":"# rnc = RandomForestClassifier(n_estimators=100, max_depth=4,random_state=0)\n# rnc = rnc.fit(X_train,y_train)\n# y_tpred = rnc.predict(X_train)\n# y_pred = rnc.predict(X_test)\n# print('train score :',accuracy_score(y_train ,y_tpred ))\n# print('test score :',accuracy_score(y_test , y_pred))\n# print('con matrix :',confusion_matrix(y_test, y_pred))\n# print('report :',classification_report(y_test, y_pred ))\n                                                                                     # SCORE : 0.87","1393ecad":"# gbc = GradientBoostingClassifier(n_estimators=100, learning_rate=0.5,max_depth=3, random_state=140)\n# gbc = gbc.fit(X_train,y_train)\n# y_tpred = gbc.predict(X_train)\n# y_pred = gbc.predict(X_test)\n# print('train score :',accuracy_score(y_train ,y_tpred ))\n# print('test score :',accuracy_score(y_test , y_pred))\n# print('con matrix :',confusion_matrix(y_test, y_pred))\n# print('report :',classification_report(y_test, y_pred ))\n                                                                                   # SCORE : 0.85","62873f31":"# svc = SVC()\n# svc = svc.fit(X_train,y_train)\n# y_tpred = svc.predict(X_train)\n# y_pred = svc.predict(X_test)\n# print('train score :',accuracy_score(y_train ,y_tpred))\n# print('test score :',accuracy_score(y_test , y_pred))\n# print('con matrix :',confusion_matrix(y_test, y_pred))\n# print('report :',classification_report(y_test, y_pred ))\n                                                                                   # SCORE : 0.86","73cd9879":"#v1 = LogisticRegression(solver='lbfgs', multi_class='multinomial',random_state=1 , C = 0.5 , tol = 0.001)\n#v2 = RandomForestClassifier(n_estimators=100, max_depth= 5,random_state=144)\n#v3 = SVC()\n#eclf = VotingClassifier(estimators=[('lr', v1), ('rf', v2), ('gnb', v3)],voting='hard')\n\n#for clf, label in zip([v1, v2, v3, eclf], ['Logistic Regression', 'Random Forest', 'SVC ', 'Ensemble ']): \n #   scores = cross_val_score(clf, X, y, cv=5, scoring='accuracy')\n  #  print(\"Accuracy: %0.2f (+\/- %0.2f) [%s]\" % (scores.mean(), scores.std(), label))","98d37a8a":"svc = SVC()\nsvc = svc.fit(X_train,y_train)\ny_train_pred = svc.predict(X_train)\ny_test_pred = svc.predict(X_test)\nprint('train score :',accuracy_score(y_train ,y_train_pred ))\nprint('test score :',accuracy_score(y_test , y_test_pred))\nprint('con matrix :',confusion_matrix(y_test, y_test_pred))\nprint('report :',classification_report(y_test, y_test_pred ))\ncon = confusion_matrix(y_test,y_test_pred)\nhmap =sns.heatmap(con,annot=True,fmt=\"d\")\nprint ('Confusion Matrix',hmap)","9459f530":"labels = np.arange(2)\nclf_report = classification_report(y_test,y_test_pred,labels=labels,target_names=('died','survived'), output_dict=True)\nhmap1 = sns.heatmap(pd.DataFrame(clf_report).iloc[:-1, :].T, annot=True)\nprint ('Classification Report',hmap1)","d6b13e35":"y_pred = svc.predict(test_df)\nsubmission = pd.DataFrame({ 'PassengerId': test_dfn['PassengerId'],\n                            'Survived': y_pred })\nsubmission.to_csv(\"submission.csv\", index=False)","9053a5b5":"submission.head()","bca63936":"# **Voting Classifier**","40aaf27b":"# **Load Libraries And Data**","de515a87":"**Regrouping the data into a single file and splitting it to pass it to the model**","20e7c192":"# **Train & Test Split**","cd7fc77a":"# **Data cleaning**","deec8e25":"**X ,y Split**","04162e93":"**Logistic Regression**","a6f72740":"# **Machine Learning Models**","828eed0a":"# **Submission**","3af357cd":"**Aggregate data into a single file for easy handling in analysis and cleaning**","c8b59f05":"**missing values**","1637592a":"**largest 4 correlation with y**","bd1f9b55":"**First ,dealing with numerics data**","a21526be":"**Test Data as Dataframe and array**","798c87af":"**SVC**","eadbe93c":"**Rearrange df colmun to get 'Survived' to end of df**","00a45584":"# **Feature Scaling**","d2c0f345":"**Survival rate analysis for both sexes**","595aedc5":"**Correlation between features**","d054fed2":"**drop smallest Correlation features, most missing values in features and less important features**","fa9e8425":"**Then ,dealing with numerics categorical data**","9975aa7a":"**Random Forest Classifier**","8543982c":"# **EDA and Visualization**","a00d1460":"**Gradient Boosting Classifier**","773e6cfa":"**Survival rate analysis relation with Age ,Pclass ,Fare,Parch**"}}