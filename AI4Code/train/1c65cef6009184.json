{"cell_type":{"7779a49c":"code","ad158426":"code","9f4f9b50":"code","9dec6ccb":"code","4c908edd":"code","933fbc6f":"code","5468d9f1":"code","52d270fd":"code","ee90553b":"code","f422bfdb":"code","c3822d2c":"code","ba315e13":"code","4c36bce5":"code","89db408c":"code","e5b9159c":"code","e0eddc0f":"code","1999b814":"code","6699cd19":"code","13cd0b19":"code","5bf157c3":"code","919168fb":"code","6d811106":"code","48167353":"code","66149475":"code","c3010956":"code","d33c8c66":"code","3eff6996":"code","dc0824b0":"markdown","6f9bb438":"markdown","fadd087e":"markdown","24653c9c":"markdown","bfb88269":"markdown","2348c394":"markdown","d47b9098":"markdown","5c545da0":"markdown","9742f911":"markdown","e7a100ef":"markdown","b257dc6e":"markdown","3b37534c":"markdown","adeba99c":"markdown","a57cf32c":"markdown","397f4b5e":"markdown","68aed048":"markdown","cb3a8f35":"markdown","9d323939":"markdown","28f8b117":"markdown","1a6bc467":"markdown","9da66550":"markdown","d78285c6":"markdown","43bdf7f6":"markdown","2c9ced34":"markdown","a54c6a9f":"markdown","a55ee22d":"markdown","6cd047b1":"markdown","956a8b77":"markdown"},"source":{"7779a49c":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_colwidth', -1)","ad158426":"data = pd.read_csv('\/kaggle\/input\/airline-passenger-traffic\/airline-passenger-traffic(1).csv', header = None)\ndata.columns = ['Month','Passengers']\ndata['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')\ndata = data.set_index('Month')\ndata.head(12)","9f4f9b50":"data.plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","9dec6ccb":"data = data.assign(Passengers_Linear_Interpolation=data.Passengers.interpolate(method='linear'))\ndata[['Passengers_Linear_Interpolation']].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic: Linear interpolation')\nplt.show(block=False)","4c908edd":"data['Passengers'] = data['Passengers_Linear_Interpolation']\ndata.drop(columns=['Passengers_Linear_Interpolation'],inplace=True)","933fbc6f":"import seaborn as sns\nfig = plt.subplots(figsize=(20, 5))\nax = sns.boxplot(x=data['Passengers'],whis=1.5)","5468d9f1":"fig = data.Passengers.hist(figsize = (20,5))","52d270fd":"from pylab import rcParams\nimport statsmodels.api as sm\nrcParams['figure.figsize'] = 20, 10\ndecomposition = sm.tsa.seasonal_decompose(data.Passengers, model='additive') # additive seasonal index\nfig = decomposition.plot()\nplt.show()","ee90553b":"decomposition = sm.tsa.seasonal_decompose(data.Passengers, model='multiplicative') # multiplicative seasonal index\nfig = decomposition.plot()\nplt.show()","f422bfdb":"train_len = 120\ntrain = data[0:train_len] # first 120 months as training set\ntest = data[train_len:] # last 24 months as out-of-time test set","c3822d2c":"data['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.legend(loc='best')\nplt.title('Airline passenger traffic')\nplt.show(block=False)","ba315e13":"from statsmodels.tsa.stattools import adfuller\nadf_test = adfuller(data['Passengers'])\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","4c36bce5":"from statsmodels.tsa.stattools import kpss\nkpss_test = kpss(data['Passengers'])\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","89db408c":"from scipy.stats import boxcox\ndata_boxcox = pd.Series(boxcox(data['Passengers'], lmbda=0), index = data.index)\n\ndata['Passengers'].plot(figsize=(20, 5))\nplt.grid()\nplt.plot(data_boxcox, label='After Box Cox tranformation')\nplt.legend(loc='best')\nplt.title('After Box Cox transform')\nplt.show()","e5b9159c":"data_boxcox_diff = pd.Series(data_boxcox - data_boxcox.shift(), data.index)\nplt.figure(figsize=(20,5))\nplt.grid()\nplt.plot(data_boxcox_diff, label='After Box Cox tranformation and differencing')\nplt.legend(loc='best')\nplt.title('After Box Cox transform and differencing')\nplt.show()","e0eddc0f":"data_boxcox_diff.dropna(inplace=True)","1999b814":"data_boxcox_diff.tail()","6699cd19":"adf_test = adfuller(data_boxcox_diff)\n\nprint('ADF Statistic: %f' % adf_test[0])\nprint('Critical Values @ 0.05: %.2f' % adf_test[4]['5%'])\nprint('p-value: %f' % adf_test[1])","13cd0b19":"kpss_test = kpss(data_boxcox_diff)\n\nprint('KPSS Statistic: %f' % kpss_test[0])\nprint('Critical Values @ 0.05: %.2f' % kpss_test[3]['5%'])\nprint('p-value: %f' % kpss_test[1])","5bf157c3":"from statsmodels.graphics.tsaplots import plot_acf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_acf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","919168fb":"from statsmodels.graphics.tsaplots import plot_pacf\nplt.figure(figsize=(20,5))\nplt.grid()\nplot_pacf(data_boxcox_diff, ax=plt.gca(), lags = 30)\nplt.show()","6d811106":"train_data_boxcox = data_boxcox[:train_len]\ntest_data_boxcox = data_boxcox[train_len:]\ntrain_data_boxcox_diff = data_boxcox_diff[:train_len-1]\ntest_data_boxcox_diff = data_boxcox_diff[train_len-1:]","48167353":"train_data_boxcox_diff[:5]","66149475":"from statsmodels.tsa.arima_model import ARIMA\nmodel = ARIMA(train_data_boxcox_diff, order=(1, 0, 1))\nmodel_fit = model.fit()\nprint(model_fit.params)","c3010956":"y_hat_arma = data_boxcox_diff.copy()\ny_hat_arma['arma_forecast_boxcox_diff'] = model_fit.predict(data_boxcox_diff.index.min(), data_boxcox_diff.index.max())\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox_diff'].cumsum()\ny_hat_arma['arma_forecast_boxcox'] = y_hat_arma['arma_forecast_boxcox'].add(data_boxcox[0])\ny_hat_arma['arma_forecast'] = np.exp(y_hat_arma['arma_forecast_boxcox'])","d33c8c66":"plt.figure(figsize=(20,5))\nplt.grid()\nplt.plot( data['Passengers'][:train_len-1], label='Train')\nplt.plot(data['Passengers'][train_len-1:], label='Test')\nplt.plot(y_hat_arma['arma_forecast'][test.index.min():], label='ARMA forecast')\nplt.legend(loc='best')\nplt.title('ARMA Method')\nplt.show()","3eff6996":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(test['Passengers'], y_hat_arma['arma_forecast'][train_len-1:])).round(2)\nmape = np.round(np.mean(np.abs(test['Passengers']-y_hat_arma['arma_forecast'][train_len-1:])\/test['Passengers'])*100,2)\n\nresults = pd.DataFrame({'Method':['Autoregressive moving average (ARMA) method'], 'RMSE': [rmse],'MAPE': [mape] })\nresults = results[['Method', 'RMSE', 'MAPE']]\nresults","dc0824b0":"# Auto Regressive methods","6f9bb438":"## Outlier detection","fadd087e":"## Auto regression moving average method (ARMA)","24653c9c":"## Import time series data: Airline passenger traffic","bfb88269":"# Initial setup","2348c394":"# Time series analysis","d47b9098":"### Additive seasonal decomposition","5c545da0":"### Box plot and interquartile range","9742f911":"## Stationarity vs non-stationary time series","e7a100ef":"# Build and evaluate time series forecast","b257dc6e":"### Histogram plot","3b37534c":"### Augmented Dickey-Fuller (ADF) test","adeba99c":"## Plot time series data","a57cf32c":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","397f4b5e":"### Box Cox transformation to make variance constant","68aed048":"### Augmented Dickey-Fuller (ADF) test","cb3a8f35":"### Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test","9d323939":"### Multiplicative seasonal decomposition","28f8b117":"## Missing value treatment","1a6bc467":"## Partial autocorrelation function (PACF)","9da66550":"### Calculate RMSE and MAPE","d78285c6":"### Recover original time series","43bdf7f6":"## Time series Decomposition","2c9ced34":"### Differencing to remove trend","a54c6a9f":"## Autocorrelation function (ACF)","a55ee22d":"### Plot train, test and forecast","6cd047b1":"## Split time series data into training and test set","956a8b77":"## Import required packages"}}