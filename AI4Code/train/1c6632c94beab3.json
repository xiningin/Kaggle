{"cell_type":{"80675df2":"code","6a7fdbb7":"code","38acbae9":"code","6b2cfb79":"code","3d7db8fe":"code","a8dfeae3":"code","60c80367":"code","63949185":"code","45b78d84":"code","d6fe3004":"code","490e782d":"code","55464fbf":"code","ec02038a":"markdown"},"source":{"80675df2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os # provides functions for interacting with the operating system","6a7fdbb7":"# Kaggle provide us a two folders \n\ninputfolder = '\/kaggle\/input\/'\nworkingfolder = '\/kaggle\/working\/'","38acbae9":"# Before we start, we must clean the files inside the working folder\n# Let us create a function that deletes all files under working folder\n\ndef clearworkingfolder():\n    for dirname, _, filenames in os.walk(workingfolder):\n        for filename in filenames:\n            os.remove(os.path.join(dirname, filename))","6b2cfb79":"# After processing the single txt file into multiple txt files, \n# inside the working folder there will be some empty txt files. \n# Those empty files must be deleted before we start \n# converting txt files into csv files\n# Let us create a function that will delete all files with size is zero \n# inside the working folder\n\ndef removeemptyfiles():\n    for dirname, _, filenames in os.walk(workingfolder):\n        for filename in filenames:\n            fullname = os.path.join(dirname, filename)\n            try:                \n                if os.path.getsize(fullname) == 0:\n                    os.remove(fullname)\n            except Exception as e:\n                print(e)","3d7db8fe":"# Let us create a simple function that read the contents of txt file \n# inside the input folder and convert the contents to list of lines \n# This function will take filename as parameter and return list of lines\n\ndef readinputfile(filename):\n    try:\n        lines = []\n        with open(filename, \"rt\") as filehandler:\n            lines = filehandler.readlines()\n    except Exception as e:\n        print(\"Something went wrong: \", e)\n    return lines","a8dfeae3":"# Input file has many section such as \n# CTP Test_Sequence_Header, \n# Test_Header: Seek Time Measurement, \n# Table_Header: SeekTimeMeasurement, \n# Table_Data: SeekTimeMeasurement, \n# Table_Header: SeekTimeMeasurementSummary, \n# Table_Data: SeekTimeMeasurementSummary,\n# Table_Header: SeekTimeMeasurementByHead, \n# Table_Data: SeekTimeMeasurementByHead,\n# Table_Header: SeekTimeMeasurementSummary2, \n# Table_Data: SeekTimeMeasurementSummary2\n# under each section we have plenty of data.\n\n# The idea is to convert every single section into a seperate txt file. \n# Definitely we need file names for every single section. Thie function \n# will take the section name and remove the special characters, \n# spaces and convert it to a proper file name\n\ndef removespecialcharacater(filename):\n    filenamecharacters = [char for char in filename if char.isalnum()]\n    newfilename = ''.join(filenamecharacters)\n    return workingfolder + newfilename + \".txt\"","60c80367":"# After reading the content from the input text file into list of line,\n# the list of lines are passed to the following function\n\n# This function looks for any line that starts with '----------' and \n# identify that as a new section. When a new section is identified \n# we create a new file with write mode and start appending the lines \n# inside that new file\n\ndef convertcontenttofiles(content):\n    section = False\n    filehandler = None\n    for line in content:\n        if line.startswith('---------------'):\n            section = True if (section == False) else False\n            continue\n        if section == True:\n            if (filehandler != None): filehandler.close()\n            filehandler = open(removespecialcharacater(line), \"wt\")\n        else:\n            if (line.strip() != ''):\n                filehandler.write(line.strip() + '\\n')","63949185":"# we have created enough functions\n# now let us start calling them one by one\n\nclearworkingfolder() # delete all the files inside the working folder\nfor dirname, _, filenames in os.walk(inputfolder):\n    for filename in filenames:\n        content = readinputfile(os.path.join(dirname, filename))\n        convertcontenttofiles(content) \nremoveemptyfiles() # delete all files with no data (filesize == 0)","45b78d84":"# Let us create function that reads data in txt file and converts to csv\n# The data in the txt file are splitted using \"not equal spaces\"\n# Let us read line by line and split the content using split method \n# and then join them using # as delimiter\n\ndef converttxttocsv(inputfile, outputfile):\n    try:\n        lines = []\n        with open(inputfile, \"rt\") as filehandler:\n            lines = filehandler.readlines()\n        with open(outputfile, \"wt\") as filehandler:\n            for line in lines:\n                data = line.split() # split the data using spaces\n                data = ','.join(data) # , as delimiter inside csv file\n                filehandler.write(data + '\\n')\n    except Exception as e:\n        print(\"Something went wrong: \", e)","d6fe3004":"# Read all the files inside the working folder\n# If the file ends with txt then process the file\nfor dirname, _, filenames in os.walk(workingfolder):\n    for name in filenames:\n        if name.endswith(\".txt\"):\n            inputfile = os.path.join(dirname, name)\n            outputfile = workingfolder + name.split('.')[0] + '.csv'\n            converttxttocsv(inputfile, outputfile)","490e782d":"data_file = workingfolder + 'TableDataSeekTimeMeasurement.csv'\nheader_file = workingfolder + 'TableHeaderSeekTimeMeasurement.csv'","55464fbf":"data = pd.read_csv(data_file, header=None)\ndata","ec02038a":"<h2>Introduction<\/h2>\n<p>The dataset is in txt format. The dataset was produced by a Harddisk testing software.<\/p>\n<p>Tasks to be done:<\/p>\n<ol>\n    <li>Split the data inside the single txt file into multiple txt files based on section headers<\/li>\n    <li>Convert the generated multiple txt files to multiple csv files<\/li>\n    <li>Load multiple csv files into multiple dataframes<\/li>\n    <li>Finally analyze the data loaded in multiple dataframes<\/li>\n<\/ol>"}}