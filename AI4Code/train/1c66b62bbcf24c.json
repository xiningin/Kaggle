{"cell_type":{"15fdbf6f":"code","5339417f":"code","71fb4b03":"code","6003afc5":"code","10657e29":"code","ca37b3a8":"code","ddba88ad":"code","14c92ad5":"code","c4960249":"code","99967b35":"code","b01a7e65":"code","4e208a7e":"code","87e5c30e":"code","42e29edc":"code","bd42c156":"code","96f77c4f":"code","94127536":"code","ad19958e":"code","25ae77e3":"code","762390f4":"code","cf0cadc8":"code","d2028f95":"code","78717445":"code","66f3fc18":"code","22767d6d":"code","4f2426c8":"code","43077148":"code","308e98a6":"code","88a042fe":"code","b199fe5a":"code","9c8025b0":"code","7409f153":"code","a2b9f8ca":"code","8dae0b91":"code","0f0a055b":"code","dbb360e9":"code","b5dd67f6":"code","db4369ee":"code","84b8406d":"code","0f0778e1":"code","2a2f544a":"code","0bc0a039":"code","8124aab3":"code","31e67b36":"code","5ca0ee18":"code","626f88bb":"code","240646d9":"code","3fc9e072":"code","198dd5a3":"code","6d585ee7":"code","38ee1231":"code","56dea0ad":"code","ff780979":"code","57ef32a1":"code","cbeca037":"code","df6265c4":"code","4b5e8053":"code","e216dc02":"code","48324c0f":"code","72e0fc91":"code","8d086f2c":"code","3281cf23":"code","ce49957f":"code","09206112":"code","4f249a51":"code","1c60448d":"code","63cfcdef":"code","fe0b27a2":"code","61bc823e":"code","a34e26e8":"code","fba96b5b":"code","8add1d05":"code","2b3bc74d":"code","05174d85":"code","3039e772":"code","ae5f4a9e":"code","50cc2dfc":"code","ac970f6f":"code","97362626":"code","94e9f524":"code","0b682b09":"code","d4f36449":"code","7eebde17":"code","362971c6":"code","260c0df6":"code","38df93c4":"code","9ffe8ca3":"code","ed0d57d9":"code","9dabdf01":"code","4f4ee6c0":"code","7dd50ded":"code","0987ed5c":"code","501dbc5c":"code","c3868cbe":"code","708423c8":"code","5a728ac5":"code","8982f202":"code","aceed41a":"code","d3a0ad6f":"code","ae995d55":"code","8160e820":"code","508db232":"code","b1171b37":"code","9dbccd68":"code","46d7bea0":"code","313edeba":"code","b861cfc8":"code","4eb0ac6b":"code","d6d563ec":"code","b0710c9c":"markdown","41a8d6e9":"markdown","4e5386f1":"markdown","e77dcaeb":"markdown","5b331276":"markdown","18b20534":"markdown","373ded38":"markdown","948a6cdd":"markdown","dde6acd2":"markdown","620a664b":"markdown","3df30fb1":"markdown"},"source":{"15fdbf6f":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import f1_score, roc_auc_score, cohen_kappa_score, precision_score, recall_score, accuracy_score, confusion_matrix\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model, Sequential\nfrom keras.applications.xception import Xception\nfrom keras.applications import *\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom PIL import Image\nimport os\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier \nfrom keras.callbacks import EarlyStopping\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA","5339417f":"colon_aca = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/colon_aca\/\"\n\nplt.subplot(121)\nimg = cv2.imread(colon_aca + os.listdir(colon_aca)[0])\nplt.title('Colon ACA')\nplt.imshow(img)\n\nplt.subplot(122)\ncolon_n = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/colon_n\/\"\nimg = cv2.imread(colon_n + os.listdir(colon_n)[0])\nplt.title('Colon N')\nplt.imshow(img)\nplt.show()","71fb4b03":"data_dir = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/\"\nSIZE_X = SIZE_Y = 128\n\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(validation_split = 0.3)\n\ntrain_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X,SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='training',\n                                       seed = 42)\n\nvalidate_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X, SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='validation',\n                                       seed = 42)","6003afc5":"def get_features(base_model, train, validate):\n    X_train = base_model.predict(train)\n    y_train = train.classes\n\n    X_val = base_model.predict(validate)\n    y_val = validate.classes\n\n    X_val, X_test, y_val, y_test = train_test_split(X_val, y_val, test_size = 0.5, shuffle = True)\n    print('Shape of X_train----->', str(X_train.shape))\n    print('Shape of X_val----->', str(X_val.shape))\n    print('Shape of X_test----->', str(X_test.shape))\n    return (X_train, X_val, X_test, y_train, y_val, y_test)","10657e29":"def get_models():\n    ANN = Sequential()\n    ANN.add(Dense(128, input_dim = X_train.shape[1], activation = 'relu'))\n    ANN.add(BatchNormalization())\n    ANN.add(Dropout(0.2))\n    ANN.add(Dense(64, activation='relu'))\n    ANN.add(Dense(32, activation='relu'))\n    ANN.add(Dense(16, activation='relu'))\n    ANN.add(Dense(8, activation='relu'))\n    ANN.add(Dense(2, activation='softmax'))\n    ANN.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    \n    KNN = KNeighborsClassifier()\n    \n    SVM = SVC(kernel = 'linear')\n    \n    RF = RandomForestClassifier(n_estimators = 50)\n    \n    ADB = AdaBoostClassifier()\n    \n    XGB = XGBClassifier(n_estimators = 50, use_label_encoder=False)\n    \n    print(\"Defined------->\")\n    print(\"ANN -------->\", \"(128x64x32x16x8)\")\n    print(\"KNeighborsClassifier()\")\n    print(\"SVC(kernel = 'linear')\")\n    print(\"RandomForestClassifier(n_estimators = 50)\")\n    print(\"AdaBoostClassifier()\")\n    print(\"XGBClassifier(n_estimators = 50)\")\n    \n    return (ANN, KNN, SVM, RF, ADB, XGB)","ca37b3a8":"def reshape_data(X_train, X_val, X_test):\n    X_train = X_train.reshape(7000, -1)\n    X_val = X_val.reshape(1500, -1)\n    X_test = X_test.reshape(1500, -1)\n\n    print(\"Shape after reshaping------->\")\n    print(\"X train------->\", str(X_train.shape))\n    print(\"X val-------->\", str(X_val.shape))\n    print(\"X test-------->\", str(X_test.shape))\n    \n    return (X_train, X_val, X_test)","ddba88ad":"def fit_ANN(model, X_train, y_train, X_val, y_test):\n    es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\n    history = model.fit(X_train, y_train, validation_data=(X_val, y_test), epochs=10, verbose=1, callbacks=[es])\n    return model\n\ndef fit_model(model, X_train, y_train):\n    model.fit(X_train, y_train)\n    return model\n\ndef get_accuracy_metrics_for_ANN(model, X_train, y_train, X_val, y_val, X_test, y_test):\n    print(\"Train accuracy Score------------>\")\n    print (\"{0:.3f}\".format(accuracy_score(y_train, np.argmax(model.predict(X_train), axis = 1))*100), \"%\")\n    \n    print(\"Val accuracy Score--------->\")\n    val_pred = np.argmax(model.predict(X_val), axis = 1)\n    print(\"{0:.3f}\".format(accuracy_score(y_val, val_pred)*100), \"%\")\n    \n    predicted =  np.argmax(model.predict(X_test), axis = 1)\n    print(\"Test accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_test, predicted)*100), \"%\")\n    \n    print(\"F1 Score--------------->\")\n    print(\"{0:.3f}\".format(f1_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Cohen Kappa Score------------->\")\n    print(\"{0:.3f}\".format(cohen_kappa_score(y_test, predicted)*100), \"%\")\n    \n    print(\"Recall-------------->\")\n    print(\"{0:.3f}\".format(recall_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Precision-------------->\")\n    print(\"{0:.3f}\".format(precision_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    cf_matrix_test = confusion_matrix(y_test, predicted)\n    cf_matrix_val = confusion_matrix(y_val, val_pred)\n    \n    plt.figure(figsize = (12, 6))\n    plt.subplot(121)\n    sns.heatmap(cf_matrix_val, annot=True, cmap='Blues')\n    plt.title(\"Val Confusion matrix\")\n    \n    plt.subplot(122)\n    sns.heatmap(cf_matrix_test, annot=True, cmap='Blues')\n    plt.title(\"Test Confusion matrix\")\n    \n    plt.show()","14c92ad5":"def fit_KNN_metrics(model, X_train, y_train, X_val, y_val, X_test, y_test):\n    pca = PCA(n_components=7000)\n    if(X_train.shape[1] > 10000):\n        X_train = pca.fit_transform(X_train)\n        X_val = pca.transform(X_val)\n        X_test = pca.transform(X_test)\n\n    model.fit(X_train, y_train)\n    get_accuracy_metrics(model, X_train, y_train, X_val, y_val, X_test, y_test)\n    \ndef get_accuracy_metrics(model, X_train, y_train, X_val, y_val, X_test, y_test):\n    print(\"Train accuracy Score------------>\")\n    print (\"{0:.3f}\".format(accuracy_score(y_train, model.predict(X_train))*100), \"%\")\n    \n    print(\"Val accuracy Score--------->\")\n    val_pred = model.predict(X_val)\n    print(\"{0:.3f}\".format(accuracy_score(y_val, val_pred)*100), \"%\")\n    \n    predicted =  model.predict(X_test)\n    print(\"Test accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_test, predicted)*100), \"%\")\n    \n    print(\"F1 Score--------------->\")\n    print(\"{0:.3f}\".format(f1_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Cohen Kappa Score------------->\")\n    print(\"{0:.3f}\".format(cohen_kappa_score(y_test, predicted)*100), \"%\")\n    \n    print(\"Recall-------------->\")\n    print(\"{0:.3f}\".format(recall_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Precision-------------->\")\n    print(\"{0:.3f}\".format(precision_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    cf_matrix_test = confusion_matrix(y_test, predicted)\n    cf_matrix_val = confusion_matrix(y_val, val_pred)\n    \n    plt.figure(figsize = (12, 6))\n    plt.subplot(121)\n    sns.heatmap(cf_matrix_val, annot=True, cmap='Blues')\n    plt.title(\"Val Confusion matrix\")\n    \n    plt.subplot(122)\n    sns.heatmap(cf_matrix_test, annot=True, cmap='Blues')\n    plt.title(\"Test Confusion matrix\")\n    \n    plt.show()","c4960249":"base_model = VGG16(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nVGG16 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nVGG16.summary()","99967b35":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(VGG16, train_it, validate_it)","b01a7e65":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)","4e208a7e":"get_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","87e5c30e":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","42e29edc":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","bd42c156":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","96f77c4f":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","94127536":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","ad19958e":"del base_model, VGG16, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","25ae77e3":"base_model = VGG19(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nVGG19 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nVGG19.summary()","762390f4":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(VGG19, train_it, validate_it)","cf0cadc8":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)","d2028f95":"get_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","78717445":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","66f3fc18":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","22767d6d":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","4f2426c8":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","43077148":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","308e98a6":"del base_model, VGG19, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","88a042fe":"base_model = ResNet50(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nResNet50 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nResNet50.summary()","b199fe5a":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(ResNet50, train_it, validate_it)","9c8025b0":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)","7409f153":"get_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","a2b9f8ca":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","8dae0b91":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","0f0a055b":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","dbb360e9":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","b5dd67f6":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","db4369ee":"del base_model, ResNet50, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","84b8406d":"base_model = ResNet101(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nResNet101 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nResNet101.summary()","0f0778e1":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(ResNet101, train_it, validate_it)","2a2f544a":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)","0bc0a039":"get_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","8124aab3":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","31e67b36":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","5ca0ee18":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","626f88bb":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","240646d9":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","3fc9e072":"del base_model, ResNet101, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","198dd5a3":"base_model = MobileNetV2(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nMobileNetV2 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nMobileNetV2.summary()","6d585ee7":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(MobileNetV2, train_it, validate_it)","38ee1231":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","56dea0ad":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","ff780979":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","57ef32a1":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","cbeca037":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","df6265c4":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","4b5e8053":"del base_model, MobileNetV2, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","e216dc02":"base_model = MobileNet(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nMobileNet = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nMobileNet.summary()","48324c0f":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(MobileNet, train_it, validate_it)","72e0fc91":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","8d086f2c":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","3281cf23":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","ce49957f":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","09206112":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","4f249a51":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","1c60448d":"del base_model, MobileNet, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","63cfcdef":"base_model = InceptionV3(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nInceptionV3 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nInceptionV3.summary()","fe0b27a2":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(InceptionV3, train_it, validate_it)","61bc823e":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","a34e26e8":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","fba96b5b":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","8add1d05":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","2b3bc74d":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","05174d85":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","3039e772":"del base_model, InceptionV3, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","ae5f4a9e":"base_model = InceptionResNetV2(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nInceptionResNetV2 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nInceptionResNetV2.summary()","50cc2dfc":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(InceptionResNetV2, train_it, validate_it)","ac970f6f":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","97362626":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","94e9f524":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","0b682b09":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","d4f36449":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","7eebde17":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","362971c6":"del base_model, InceptionResNetV2, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","260c0df6":"base_model = DenseNet169(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nDenseNet169 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nDenseNet169.summary()","38df93c4":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(DenseNet169, train_it, validate_it)","9ffe8ca3":"X_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","ed0d57d9":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","9dabdf01":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","4f4ee6c0":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","7dd50ded":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","0987ed5c":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","501dbc5c":"del base_model, DesnseNet169, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","c3868cbe":"base_model = DenseNet121(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nDenseNet121 = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nDenseNet121.summary()","708423c8":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(DenseNet121, train_it, validate_it)\n\nX_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","5a728ac5":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","8982f202":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","aceed41a":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","d3a0ad6f":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","ae995d55":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","8160e820":"del base_model, DesnseNet121, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","508db232":"base_model = Xception(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\n\nfor layer in base_model.layers:\n    layer.trainable = False\n                   \nXception = Model(inputs=base_model.input, outputs=base_model.layers[-1].output)\nXception.summary()","b1171b37":"X_train, X_val, X_test, y_train, y_val, y_test = get_features(Xception, train_it, validate_it)\n\nX_train, X_val, X_test = reshape_data(X_train, X_val, X_test)\nANN, KNN, SVM, RF, ADB, XGB = get_models()\n\nANN = fit_ANN(ANN, X_train, y_train, X_val, y_val)\n\nget_accuracy_metrics_for_ANN(ANN, X_train, y_train, X_val, y_val, X_test, y_test)","9dbccd68":"scaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_val_scaled = scaler.transform(X_val)\nX_test_scaled = scaler.transform(X_test)\n\nfit_KNN_metrics(KNN, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","46d7bea0":"SVM = fit_model(SVM, X_train_scaled, y_train)\nget_accuracy_metrics(SVM, X_train_scaled, y_train, X_val_scaled, y_val, X_test_scaled, y_test)","313edeba":"RF = fit_model(RF, X_train, y_train)\nget_accuracy_metrics(RF,  X_train, y_train, X_val, y_val, X_test, y_test)","b861cfc8":"ADB = fit_model(ADB, X_train, y_train)\nget_accuracy_metrics(ADB,  X_train, y_train, X_val, y_val, X_test, y_test)","4eb0ac6b":"XGB = fit_model(XGB, X_train, y_train)\nget_accuracy_metrics(XGB,  X_train, y_train, X_val, y_val, X_test, y_test)","d6d563ec":"del base_model, Xception, X_train, X_val, X_test, y_train, y_val, y_test, ANN, KNN, SVM, RF, ADB, XGB, X_train_scaled, X_val_scaled, X_test_scaled","b0710c9c":"# MobileNet","41a8d6e9":"# DenseNet 121","4e5386f1":"# DenseNet 169","e77dcaeb":"# Xception ","5b331276":"# VGG 16","18b20534":"# ResNet101 ","373ded38":"# ResNet50","948a6cdd":"# MobileNetV2","dde6acd2":"# VGG 19","620a664b":"# InceptionResNet V2","3df30fb1":"# InceptionV3"}}