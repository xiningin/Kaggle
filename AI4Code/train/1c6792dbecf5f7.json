{"cell_type":{"ef10738a":"code","e33dcfd6":"code","c559ad69":"code","9b996176":"code","7d1a2008":"code","a52e6107":"code","1ec7fd3a":"code","37d9ab5d":"code","70492c18":"code","740845c7":"markdown"},"source":{"ef10738a":"import os\nimport re\nimport json\nimport heapq\nimport nltk\nimport spacy\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS \n\nnlp_data= ''\ntraversed_files = []\nnlp = spacy.load(\"en_core_web_sm\")\npunctuations = '!\"#$%&\\'()*+,-\/:;<=>?@[\\\\]^_`{|}~\u00a9'\n\nREQUIRED_KEY = 'text'\nSTOPWORDS = stopwords.words('english')\nREAD_SAVED_FILE = '\/kaggle\/input\/covid-data\/clean_data.txt'\nWRITE_OUTPUT_FILE = '\/kaggle\/working\/result.txt'\n\n","e33dcfd6":"\ndef write_file(nlp_data):\n    \"\"\" \n    Write clean data  and  save it result.txt file . \n    \"\"\"\n    with open(WRITE_OUTPUT_FILE,'w+') as f:\n        for line in nlp_data:\n            f.write(line)\n            \ndef read_file():\n    \"\"\" \n    Read clean data  from the saved file.\n    \"\"\"\n    count=0\n    with open(READ_SAVED_FILE,'r') as f:\n        data = f.read()\n    return data","c559ad69":"\ndef process_file():\n    \"\"\"\n    Call this function to get the data from the kaggle data . The resultant data will be stored to \n    \"\"\"\n    count=0\n    FILE_COUNT = 9\n    for dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n        for filename in filenames:\n            if(filename.endswith('json') and count <=FILE_COUNT and filename not in traversed_files):\n                count+=1\n                traversed_files.append(filename)\n                with open(os.path.join(dirname, filename)) as data :\n                    data = json.load(data)\n                    get_data_from_files_recursively(data)\n                    \n    write_file(nlp_data)\n    # Any results you write to the current directory are saved as output in result.txt file.","9b996176":"def get_data_from_files_recursively(obj): \n    \"\"\"\n    Read the input file and extract specific data based on the specific key in the json . \n    \"\"\"\n    if type(obj) is dict:\n        for key,value in obj.items():\n            if(key== REQUIRED_KEY):\n                global nlp_data\n                nlp_data+=value\n            get_data_from_files_recursively(obj[key])\n    elif type(obj) is list: \n        for each in obj:\n            get_data_from_files_recursively(each)\n    else:\n        return     \n    ","7d1a2008":"def cleanup_text(docs, logging=False):\n    \"\"\"\n        Tokenize the data and remove the stop words . \n    \"\"\"    \n    texts = []\n    sentence_list=[]\n    \n    docs =   docs.replace(\"\\n\", \"\") # We dont need to understand the line breaks.Thus removing     \n    doc = nlp(docs)\n#     tokens = [tok.lemma_.lower().strip() for tok in doc if tok.lemma_ != '-PRON-']\n    for idx, sentence in enumerate(doc.sents): # we are using spacy for sentence tokenization\n        sentence_list.append(re.sub(r'[^\\w\\s]','',str(sentence)))\n    \n    tokens = [tok for tok in sentence_list if tok not in STOPWORDS and tok not in punctuations]\n    return ''.join(tokens)\n","a52e6107":"def show_word_cloud(data):\n    tokens = data.split()\n    stopwords = set(STOPWORDS) \n    stopwords.add('may')\n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n    wordcloud = WordCloud(width = 800, height = 800, \n                    background_color ='white', \n                    stopwords = stopwords, \n                    min_font_size = 10).generate(' '.join(tokens)) \n\n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show() \n    return wordcloud\nshow_word_cloud(cleanup_text(read_file()[:100000]))","1ec7fd3a":"def generate_summary(text_without_removing_dot, cleaned_text):\n    \"\"\"\n    1. create a word frequency probability list \n    2. On the basis of max frequencey of words filter the sentences which has these words .\n    \"\"\"\n    doc = nlp(text_without_removing_dot)\n    cleaned_text = cleaned_text.split()\n    word_frequencies = {}  \n\n    for word in cleaned_text:  \n        if word not in word_frequencies.keys():\n            word_frequencies[word] = 1\n        else:\n            word_frequencies[word] += 1\n    maximum_frequncy = max(word_frequencies.values())\n\n    for word in word_frequencies.keys():  \n        word_frequencies[word] = (word_frequencies[word]\/maximum_frequncy) \n    \n    #as we need actual sentences we need to parse initial_data before cleanup\n    sentence_scores = {} \n    frequency_keys=  list(word_frequencies.keys())\n    for sent in doc.sents:\n        for word in str(sent):\n            if word in frequency_keys:\n                if sent not in sentence_scores.keys():\n                    sentence_scores[sent] = word_frequencies[word]\n                else:\n                    sentence_scores[sent] += word_frequencies[word]\n    \n    tup = list(sentence_scores.items())\n    tup.sort(key = lambda x: x[1],reverse=True)  \n    return tup\n","37d9ab5d":"initial_text = read_file()[:100000]\ncleaned_text = cleanup_text(initial_text)\ntup = generate_summary(initial_text,cleaned_text)\nresult=''.join([str(tup[i][0]) for i in range(8) ])\n","70492c18":"result","740845c7":"1. "}}