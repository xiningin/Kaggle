{"cell_type":{"9ce93951":"code","00df6152":"code","38f1e269":"code","06a51b86":"code","c74df6b8":"code","cfbb2638":"code","b4e7097d":"code","0d5b0b24":"code","d346793c":"code","771f5ea3":"code","aa7ac790":"code","af14c5a0":"code","2ea11bec":"code","abb8d77f":"code","b1d508df":"code","9f5b990b":"code","bc69c77e":"code","8b9766d7":"code","dc8172d2":"code","49bdb9d6":"code","ce541ba5":"code","562d6aa1":"code","98281bf3":"code","74ea5a54":"code","c32983d4":"code","ff53a5b7":"code","ee9eb121":"code","2ccaa67b":"code","d40dc3c2":"code","f1113f1f":"code","a7a7919b":"code","771e23fd":"code","59fd8c04":"code","213468cb":"code","080d422a":"code","808475c0":"code","ac1cc62b":"code","a41200d5":"code","a9167bd9":"code","9cd608b8":"code","0a0d34fe":"markdown","5bc3fd84":"markdown","8c3b434a":"markdown","29d7e710":"markdown","42eaa62f":"markdown","ed8b3e31":"markdown","9ea653e9":"markdown","72695ec8":"markdown","f985a260":"markdown","09a56e58":"markdown","1ebf767f":"markdown","5f0e58cd":"markdown","b3c5dafc":"markdown","2c13e20e":"markdown","4eaccb80":"markdown","6f4f9cd6":"markdown","2067af22":"markdown","02a94998":"markdown","4f7e4bd0":"markdown","934d8796":"markdown","3e6017ec":"markdown","64ca52eb":"markdown","f06ee8c0":"markdown","d58f36c1":"markdown"},"source":{"9ce93951":"# Data Visualization\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Modeling\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.linear_model import SGDClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import roc_curve, auc, accuracy_score, roc_auc_score, f1_score, recall_score, precision_score\n\n\nfrom sklearn.model_selection import RandomizedSearchCV","00df6152":"df_train = pd.read_csv('..\/input\/dataset\/train.csv')\ndf_test = pd.read_csv('..\/input\/dataset\/test.csv')\nsample_submission = pd.read_csv('..\/input\/sample\/sample_submission.csv')\n\n","38f1e269":"df_train.head()","06a51b86":"df_test.head()","c74df6b8":"df_train.describe()","cfbb2638":"df_train.info()","b4e7097d":"df_train.isna().sum()","0d5b0b24":"df_test.isna().sum()","d346793c":"df_train['Gender'].value_counts()","771f5ea3":"df_train = df_train.drop(['id'], axis=1)\ndf_test = df_test.drop(['id'], axis=1)\ndf_train.head()","aa7ac790":"df_train['Response'].value_counts()\n","af14c5a0":"R_plot = sns.countplot(x='Response', data=df_train)\nR_plot.set_title(\"Response distribution\", fontsize=15)\nplt.xlabel(\"0 = Not interested, 1 = Interested\")\nR_plot.set_ylabel(\"Count\", fontsize=15);","2ea11bec":"pd.crosstab(df_train['Response'], df_train['Gender'], margins=True, margins_name='Totals')","abb8d77f":"pd.crosstab(df_train['Response'], df_train['Gender']).plot(kind=\"bar\", figsize=(8,4), color=[\"dodgerblue\", \"orange\"])\n\nplt.title(\"Response distribution by Gender\")\nplt.xlabel(\"0 = Not interested, 1 = Interested\")\nplt.ylabel(\"Count\")\nplt.legend([\"Female\", \"Male\"])","b1d508df":"df_train['Driving_License'].value_counts()","9f5b990b":"df_train = df_train.drop(\"Driving_License\", axis=1)\ndf_test = df_test.drop(\"Driving_License\",axis=1)\ndf_train.head()","bc69c77e":"pd.crosstab(df_train['Response'], df_train['Previously_Insured'],margins=True, margins_name='Total')","8b9766d7":"pd.crosstab(df_train['Response'], df_train['Previously_Insured']).plot(kind=\"bar\", figsize=(10,6), color=sns.color_palette(\"colorblind\"))\n\nplt.title(\"Response distribution for Previously_Insured\")\nplt.xlabel(\"0 = Not interested, 1 = Interested\")\nplt.ylabel(\"Count\")\nplt.legend([\"Customer has no Vehicle Insurance Subscription\", \"Customer has Vehicle Insurance Subscription \"])\nplt.xticks(rotation=0);","dc8172d2":"pd.crosstab(df_train['Response'], df_train['Vehicle_Age'], margins=True, margins_name='Total')","49bdb9d6":"pd.crosstab(df_train['Response'], df_train['Vehicle_Age']).plot(kind=\"bar\", figsize=(10,6), color=sns.color_palette(\"colorblind\"))\n\nplt.title(\"Response distribution by Vehicle Age\")\nplt.xlabel(\"0 = Not interested, 1 = Interested\")\nplt.ylabel(\"Count\")\nplt.legend([\"1-2 Year\", \"< 1 Year\", \"> 2 Years\"])\nplt.xticks(rotation=0);","ce541ba5":"pd.crosstab(df_train['Response'], df_train['Vehicle_Damage'], margins=True, margins_name='Total')","562d6aa1":"pd.crosstab(df_train['Response'], df_train['Vehicle_Damage']).plot(kind=\"bar\", figsize=(10,6), color=sns.color_palette(\"colorblind\"))\n\nplt.title(\"Response distribution by Vehicle_Damage\")\nplt.xlabel(\"0 = Not interested, 1 = Interested\")\nplt.ylabel(\"Count\")\nplt.legend([\"Vehicle Damage\", \"No Vehicle Damage\"])\nplt.xticks(rotation=0);","98281bf3":"pd.crosstab(df_train['Previously_Insured'], df_train['Vehicle_Damage'], margins=True, margins_name='Total')","74ea5a54":"pd.crosstab(df_train['Previously_Insured'], df_train['Vehicle_Damage']).plot(kind=\"bar\", figsize=(10,6), color=sns.color_palette(\"colorblind\"))\n\nplt.title(\"Previously Insured vs Vehicle_Damage\")\nplt.xlabel(\"0 = Not Insured, 1 = Insured\")\nplt.ylabel(\"Count\")\nplt.legend([\"Vehicle Damage\", \"No Vehicle Damage\"])\nplt.xticks(rotation=0);","c32983d4":"df_train['Annual_Premium'].describe()","ff53a5b7":"df_train['Policy_Sales_Channel'].describe()","ee9eb121":"df_train['Vintage'].describe()","2ccaa67b":"df_train.info()","d40dc3c2":"#Convert datatypes\ndf_test['Vehicle_Age']=df_test['Vehicle_Age'].replace({'< 1 Year':0,'1-2 Year':1,'> 2 Years':2})\ndf_test['Gender']=df_test['Gender'].replace({'Male':1,'Female':0})\ndf_test['Vehicle_Damage']=df_test['Vehicle_Damage'].replace({'Yes':1,'No':0})\n\ndf_train['Vehicle_Age']=df_train['Vehicle_Age'].replace({'< 1 Year':0,'1-2 Year':1,'> 2 Years':2})\ndf_train['Gender']=df_train['Gender'].replace({'Male':1,'Female':0})\ndf_train['Vehicle_Damage']=df_train['Vehicle_Damage'].replace({'Yes':1,'No':0})\n\n\ndf_train['Region_Code']=df_train['Region_Code'].astype(int)\ndf_test['Region_Code']=df_test['Region_Code'].astype(int)\ndf_train['Policy_Sales_Channel']=df_train['Policy_Sales_Channel'].astype(int)\ndf_test['Policy_Sales_Channel']=df_test['Policy_Sales_Channel'].astype(int)","f1113f1f":"len(df_test)\/(len(df_test)+len(df_train))","a7a7919b":"from sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, random_state=0)\neval_set = [(X_train, y_train), (X_test, y_test)]\nprint(len(train_set), \"train + \", len(test_set), \"test\")","771e23fd":"from xgboost import XGBClassifier\nxgboost=XGBClassifier()\nxgboost=xgboost.fit(X_train,y_train, eval_metric=[\"error\", \"logloss\"], eval_set=[(X_train, y_train), (X_test, y_test)], verbose=False)","59fd8c04":"col_1=['Gender', 'Age', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage', 'Annual_Premium', 'Policy_Sales_Channel', 'Vintage']","213468cb":"cat_col=['Gender', 'Previously_Insured', 'Vehicle_Age', 'Vehicle_Damage','Policy_Sales_Channel']","080d422a":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = xgboost.predict(X_test)\nxgboost=xgboost.fit(X_train,y_train, eval_metric=[\"error\", \"logloss\"], eval_set=[(X_train, y_train), (X_test, y_test)], verbose=False)\nprobs_y_train = xgboost.predict_proba(X_train)[:, 1]\nprobs_y_test = xgboost.predict_proba(X_test)[:, 1]\n# evaluate predictions\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","808475c0":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = xgboost, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy:{:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation:{:.2f} %\".format(accuracies.std()*100))","ac1cc62b":"results = xgboost.evals_result()\nepochs = len(results['validation_0']['error'])\nx_axis = range(0, epochs)\n","a41200d5":"\nfrom matplotlib import pyplot\n\n# plot log loss\nfig, ax = pyplot.subplots(figsize=(12,12))\nax.plot(x_axis, results['validation_0']['logloss'], label='Train')\nax.plot(x_axis, results['validation_1']['logloss'], label='Test')\nax.legend()\npyplot.ylabel('Log Loss')\npyplot.title('XGBoost Log Loss')\npyplot.show()\n\n# plot classification error\nfig, ax = pyplot.subplots(figsize=(12,12))\nax.plot(x_axis, results['validation_0']['error'], label='Train')\nax.plot(x_axis, results['validation_1']['error'], label='Test')\nax.legend()\npyplot.ylabel('Classification Error')\npyplot.title('XGBoost Classification Error')\npyplot.show()","a9167bd9":"Important_features = pd.Series(xgboost.feature_importances_, index=X_t.columns)\nImportant_features.nlargest(15).plot(kind='barh')\nplt.show()","9cd608b8":"y_pred= xgboost.predict_proba(df_test)[:, 1]\npredictions = [round(value) for value in y_pred]\nsample_submission['Response']=predictions\nsample_submission.to_csv(\"Predictions.csv\", index = False)","0a0d34fe":"Annual Premium Analysis","5bc3fd84":"# Import Libraries","8c3b434a":"There are no missing values","29d7e710":"# **Making the Confusion Matrix for XGBoost**","42eaa62f":"# **Train_Test Split**","ed8b3e31":"Only few of those that without a current vehicle insurance subscription are interested","9ea653e9":"Response by Vehicle_Age","72695ec8":"Majority of thos with vehicles less than 2 years old are not interested","f985a260":"# Retrieve performance metrics\n","09a56e58":"Very few of customers with vehicle damage are interested","1ebf767f":"Gender analysis","5f0e58cd":"**Check for missing values**","b3c5dafc":"# Change Data Types","2c13e20e":"# **MODEL**","4eaccb80":"# **Applying the K-Fold Cross Validation for XGBoost**","6f4f9cd6":"# SUBMMISSION FOR JANATAHACK: CROSS-SELLING PREDICTION","2067af22":"Majority of the customers are not interested","02a94998":"Response by Gender","4f7e4bd0":"# Plot results","934d8796":"# Exploratory Data Analysis","3e6017ec":"Driving license is not so significant, so we drop it","64ca52eb":"Policy Sales Channel Analysis","f06ee8c0":"Response by Vehicle_Damage","d58f36c1":"# Load Dataset"}}