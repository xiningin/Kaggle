{"cell_type":{"29a95cdd":"code","885ebf19":"code","4cc5c3cb":"code","515b2f79":"code","e7cd5f8a":"code","a3bd7e60":"code","a8888c09":"code","f64e80fa":"code","98731b07":"code","f501e2c0":"code","67555e82":"code","f49c2a4c":"code","f7604dbd":"markdown","f6541b9e":"markdown","ab385023":"markdown","aa0df37b":"markdown","96b97532":"markdown","ec81a7fc":"markdown","fd2ca5ff":"markdown"},"source":{"29a95cdd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\nimport cv2\nimport seaborn\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","885ebf19":"pd.options.display.float_format = '{:.2f}'.format\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.metrics import precision_recall_curve","4cc5c3cb":"df = pd.read_csv('\/kaggle\/input\/ai4all-project\/data\/swab_gene_counts.csv')\ndf.head()","515b2f79":"from sklearn import preprocessing\nencoder = preprocessing.LabelEncoder()\ndf[\"Unnamed: 0\"] = encoder.fit_transform(df[\"Unnamed: 0\"].fillna('Nan'))\n#df[\"Unnamed: 0\"] = encoder.fit_transform(df[\"Unnamed: 0\"].fillna('Nan'))\ndf.head()","e7cd5f8a":"# features | label \nX = df.drop('RR057e_00287', axis=1)\ny = df['RR057e_00287']\n\n\n# spliting \nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=42)","a3bd7e60":"from sklearn.metrics import classification_report, f1_score, confusion_matrix\n\ndef predict(model, X):\n    y = model.predict(X)\n    return y\n\ndef metrics(y_true, y_pred):\n    print('F1 Score :', f1_score(y_true, y_pred, average='macro'))\n    print(classification_report(y_true, y_pred))\n\n    cm = confusion_matrix(y_true, y_pred)\n    cm = pd.DataFrame(cm, [1,2,3,4,5], [1,2,3,4,5])\n\n    sns.heatmap(cm, annot=True, cmap=\"YlGnBu\", fmt=\"d\")\n    plt.show()","a8888c09":"from sklearn.naive_bayes import MultinomialNB\nclf = MultinomialNB()\nclf.fit(X_train, y_train)","f64e80fa":"y_train_pred = predict(clf, X_train)\nmetrics(y_train, y_train_pred)","98731b07":"y_test_pred = predict(clf, X_test)\n\ndf_submission = pd.concat([df['RR057e_00287'], pd.Series(y_test_pred, name='Unnamed: 0')], axis=1)\ndf_submission.to_csv('submission_MultinomialNB.csv', index=False)\n\ndf_submission","f501e2c0":"from sklearn.naive_bayes import ComplementNB\nclf = ComplementNB()\nclf.fit(X_train, y_train)","67555e82":"y_train_pred = predict(clf, X_train)\nmetrics(y_train, y_train_pred)","f49c2a4c":"y_test_pred = predict(clf, X_test)\n\ndf_submission = pd.concat([df['RR057e_00287'], pd.Series(y_test_pred, name='Unnamed: 0')], axis=1)\ndf_submission.to_csv('submission_ComplementNB.csv', index=False)\n\ndf_submission","f7604dbd":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTV4CVfuZxv8RAeiDKdJtl65WU8EhUVbrrEEg&usqp=CAU)afpp.org.uk","f6541b9e":"The code below was suppose to be clf.fit(X_train, y_train, class_weight). I deleted class_weight and got NO Confusion Matrix","ab385023":"#Label Encoding from Danai Avgerinou https:\/\/www.kaggle.com\/danavg\/dummy-variables-vs-label-encoding-approach","aa0df37b":"#MultinomialNB","96b97532":"#Codes from Sandy Khosasi https:\/\/www.kaggle.com\/ilosvigil\/scl-2020-6-scikit-learn\/comments","ec81a7fc":"The code below should be clf.fit(X_train, y_train, class_weight). I deleted class weight. I got No Confusion Matrix","fd2ca5ff":"#ComplementNB"}}