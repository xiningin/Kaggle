{"cell_type":{"4e8a8173":"code","22c98ad3":"code","b135a915":"code","3d290f14":"code","28a269c7":"code","63adcc34":"code","3ea8f0dd":"code","1d4253db":"code","13a517ed":"code","ac0ed3d3":"code","1dde3ce2":"code","edd40ff1":"code","751f5537":"code","53e4cd8e":"code","b0507f95":"code","9dbe1a6e":"code","777fda66":"code","99d19421":"code","7977449b":"code","043828d5":"code","e6124d29":"code","f21e9a52":"code","ea0f1a8c":"code","ef40e1df":"code","ac9d0cf9":"code","20c06fef":"code","f5de4bbb":"code","8a19b045":"code","612f8e73":"code","5451d5c4":"code","bd30ed37":"code","6f5fc7f9":"code","21770072":"code","ac1bc424":"code","3d0e6020":"code","f4686387":"code","ed2828ae":"code","2e228828":"markdown","2aab474a":"markdown","d656fd88":"markdown","6cdefbd7":"markdown","3e440696":"markdown","e0ad1420":"markdown","92958ae1":"markdown","0353a814":"markdown","a8083509":"markdown","3b0a8eb1":"markdown","b924e05a":"markdown","1c2630d9":"markdown","9d59f8b2":"markdown","8b4a3a67":"markdown","cff9bbfb":"markdown"},"source":{"4e8a8173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","22c98ad3":"df = pd.read_csv(\"..\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Measurement_summary.csv\")","b135a915":"df.head()","3d290f14":"df['Station code'].unique()","28a269c7":"table = df.Address.groupby(df.Address, as_index=True)\nprint(\"The dataset contains \",len(table), \"different addresses\")\ntable1 = df.Latitude.groupby(df.Latitude, as_index=True)\nprint(\"The dataset contains \",len(table1), \"different Latitudes\")\ntable2 = df.Longitude.groupby(df.Longitude, as_index=True)\nprint(\"The dataset contains \",len(table2), \"different Longitudes\")","63adcc34":"df.drop(\"Address\", axis=1, inplace=True)","3ea8f0dd":"df['Measurement date'] = pd.to_datetime(df['Measurement date'])","1d4253db":"polluents = {'SO2':[0.02,0.05,0.15,1],'NO2':[0.03,0.06,0.2,2],'CO':[2,9,15,50],'O3':[0.03,0.09,0.15,0.5],'PM2.5':[15,35,75,500],'PM10':[30,80,150,600]}\nquality = ['Good','Normal','Bad','Very Bad']\nseoul_standard = pd.DataFrame(polluents, index=quality)\nseoul_standard","13a517ed":"df_101 = pd.DataFrame(df.loc[(df['Station code']==101)])","ac0ed3d3":"df_101.head()","1dde3ce2":"df_101.drop(\"Station code\", axis=1, inplace=True)","edd40ff1":"import plotly\nimport plotly.graph_objs as go\nimport plotly.offline as py","751f5537":"plotly.offline.init_notebook_mode(connected=True)","53e4cd8e":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['SO2'])]\n       \n##layout object\nlayout = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","b0507f95":"print(\"We have\", df_101['SO2'].loc[(df_101['SO2']<0)].count(),\"negative values for SO2\")","9dbe1a6e":"print(\"We have\", df_101['NO2'].loc[(df_101['NO2']<0)].count(),\"negative values for NO2\")","777fda66":"print(\"We have\", df_101['O3'].loc[(df_101['O3']<0)].count(),\"negative values for O3\")","99d19421":"print(\"We have\", df_101['CO'].loc[(df_101['CO']<0)].count(),\"negative values for CO\")","7977449b":"print(\"We have\", df_101['PM2.5'].loc[(df_101['PM2.5']<0)].count(),\"negative values for PM2.5\")","043828d5":"print(\"We have\", df_101['PM10'].loc[(df_101['PM10']<0)].count(),\"negative values for PM10\")","e6124d29":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['SO2'], name='SO2'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['NO2'], name='NO2'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['CO'], name='CO'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['O3'], name='O3')]\n       \n##layout object\nlayout = go.Layout(title='Gases Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","f21e9a52":"to_drop = df_101.loc[(df_101['SO2']<0) | (df_101['NO2']<0) | (df_101['CO']<0) | (df_101['O3']<0)]\nto_drop","ea0f1a8c":"df_101.drop(to_drop.index, axis=0, inplace=True)","ef40e1df":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['SO2'], name='SO2'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['NO2'], name='NO2'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['CO'], name='CO'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['O3'], name='O3')]\n       \n##layout object\nlayout = go.Layout(title='Gases Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","ac9d0cf9":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM2.5'], name='PM2.5'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM10'], name='PM10'),\n        ]\n       \n##layout object\nlayout = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","20c06fef":"to_drop_PM = df_101.loc[(df_101['PM2.5']<0) | (df_101['PM10']<0) | (df_101['PM2.5']==0) | (df_101['PM10']==0)]\nto_drop_PM","f5de4bbb":"df_101.drop(to_drop_PM.index, axis=0, inplace=True)","8a19b045":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM2.5'], name='PM2.5'),\n        go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM10'], name='PM10'),\n        ]\n       \n##layout object\nlayout = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","612f8e73":"df_101.head(2)","5451d5c4":"df_101.tail(2)","bd30ed37":"seoul_standard","6f5fc7f9":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['SO2'])]\n       \n##layout object\nlayout = go.Layout(title='SO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[0.15, 0.2],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.02,\n            x1='2019-12-31 23:00:00',\n            y1=0.02,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.05,\n            x1='2019-12-31 23:00:00',\n            y1=0.05,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","21770072":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['NO2'])]\n       \n##layout object\nlayout = go.Layout(title='NO2 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[0.15, 0.2],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.03,\n            x1='2019-12-31 23:00:00',\n            y1=0.03,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.06,\n            x1='2019-12-31 23:00:00',\n            y1=0.06,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","ac1bc424":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['CO'])]\n       \n##layout object\nlayout = go.Layout(title='CO Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[10, 15],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=2,\n            x1='2019-12-31 23:00:00',\n            y1=2,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=9,\n            x1='2019-12-31 23:00:00',\n            y1=9,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","3d0e6020":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['O3'])]\n       \n##layout object\nlayout = go.Layout(title='O3 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[0.15, 0.2],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.03,\n            x1='2019-12-31 23:00:00',\n            y1=0.03,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=0.09,\n            x1='2019-12-31 23:00:00',\n            y1=0.09,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","f4686387":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM2.5'])]\n       \n##layout object\nlayout = go.Layout(title='PM2.5 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[200,300],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=15,\n            x1='2019-12-31 23:00:00',\n            y1=15,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=35,\n            x1='2019-12-31 23:00:00',\n            y1=35,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","ed2828ae":"data = [go.Scatter(x=df_101['Measurement date'],\n                   y=df_101['PM10'])]\n       \n##layout object\nlayout = go.Layout(title='PM10 Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n    \n\n##Adding the text and positioning it\nfig.add_trace(go.Scatter(\n    x=['2017-07-31 00:00:00', '2017-07-31 23:00:00'],\n    y=[200, 300],\n    text=[\"Safe Level - Green\", \"Normal Level - Orange\"],\n    mode=\"text\",\n            ))\n\n##Adding horizontal line\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=30,\n            x1='2019-12-31 23:00:00',\n            y1=30,\n            line=dict(\n                color=\"Green\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\nfig.add_shape(\n        # Line Horizontal\n            type=\"line\",\n            x0='2017-01-01 00:00:00',\n            y0=80,\n            x1='2019-12-31 23:00:00',\n            y1=80,\n            line=dict(\n                color=\"Orange\",\n                width=4,\n                dash=\"dashdot\",\n            ))\n\n\n## Plotting\npy.iplot(fig)","2e228828":"Despite having more cases than the gases, we already deleted some of the lines when we got rid of the lines with negative values from gases. So, it makes sense this table be smaller.","2aab474a":"This dataset deals with air pollution measurement information in Seoul, South Korea.\nSeoul Metropolitan Government provides many public data, including air pollution information, through the 'Open Data Plaza'\nI made a structured dataset by collecting and adjusting various air pollution related datasets provided by the Seoul Metropolitan Government\n\nContent\nThis data provides average values for six pollutants (SO2, NO2, CO, O3, PM10, PM2.5).\n\nData were measured every hour between 2017 and 2019.\nData were measured for 25 districts in Seoul.\nThis dataset is divided into four files.\nMeasurement info: Air pollution measurement information\n\n1 hour average measurement is provided after calibration\nInstrument status:\n0: Normal, 1: Need for calibration, 2: Abnormal\n4: Power cut off, 8: Under repair, 9: abnormal data\nMeasurement item info: Information on air pollution measurement items\n\nMeasurement station info: Information on air pollution instrument stations\n\nMeasurement summary: A condensed dataset based on the above three data.\n\nAcknowledgements\nData is provided from here.\n\nhttps:\/\/data.seoul.go.kr\/dataList\/OA-15526\/S\/1\/datasetView.do\nhttps:\/\/data.seoul.go.kr\/dataList\/OA-15516\/S\/1\/datasetView.do\nhttps:\/\/data.seoul.go.kr\/dataList\/OA-15515\/S\/1\/datasetView.do\nThank you to Seoul City, Seoul Open Data Plaza, and Air Quality Analysis Center for providing data.","d656fd88":"This is my first dataset that uses Plotly after studying for a few days. If you like these visualisations, please give me a upvote or leave a comment, so I can see they're appropriate :)","6cdefbd7":"It's pretty clear that these values are high in number and -1 is clearly wrong. Let's check their data.\n\nAlso, if you take a deeper look, you'll also notice some values that are 0. We'll check for those too.","3e440696":"Wow, we can see that SO2, NO2, O3 and CO contain the same amount of negative values. Let's try to plot them and check if they happen at the same day","e0ad1420":"As we can see by this cool iterative graph, the points are at the same day. Something weird happened on those days. Let's drop them from the dataset.","92958ae1":"We'll start with Station 101","0353a814":"From the graphs we can see that these parameters are mostly normal or good\n\n        SO2 and CO\n\nHowever, we can see that levels of these parameters are often going beyong the normal level\n        \n        NO2\n        O3\n        PM2.5\n        PM10\n        \nI'm not an expert on air quality, so I'll leave solutions to this for those who knows better. For better understanding of air quality, you can check the following links:\n\nhttps:\/\/www.eea.europa.eu\/themes\/air\/air-quality-concentrations\/air-quality-standards\n\nhttps:\/\/www.epa.gov\/criteria-air-pollutants\/naaqs-table\n\n\nFinally, it would be very interesting to have data up to today as well. AS the corona virus outbreak continue, air quality is improving in many cities, data for this period would be extremely helpful to extract insights and make notes and extra visualisations:\n\nhttps:\/\/www.france24.com\/en\/20200322-air-quality-is-improving-in-countries-coronavirus-quarantine-pollution-environment","a8083509":"If you want to see more in depth thoughts on this analysis, please visit my blog: https:\/\/datasciencerecruit.com\/","3b0a8eb1":"According to the Data, these are the levels for air quality:\n        \n        We'll use these values to plot interesting data","b924e05a":"We can see that there are some -1 negative values on this data. Since I believe this is not possible, we'll search this lines and drop then from the dataset. Maybe this is a wrong reading of the instrument used to measure polluent levels.\n\nThis won't affect much our data, since only a few data points are negative.\n\nAs this may have also happened for other columns, we'll first count the negative elements, then delete them.","1c2630d9":"Now that we removed undesired data from our dataset, let's take a individual look at each column.","9d59f8b2":"Now that we got rid of these wrong values for gases. Let's take a look on PM2.5 and PM10 values, as they had more negative values than the others","8b4a3a67":"You can see on the data, that most of them are from one sequence of measurements. From Day 02\/05\/2017 up to 02\/07\/2017. Also there are some other spare wrong measurements.","cff9bbfb":"By checking the columns of this dataset, it's probably worth dropping the Address feature, since data was collected from 25 different districts, so we only have 25 different address. It'll be more useful to use Latitude and Longitude, so we can probably plot this data into a x-y graph later."}}