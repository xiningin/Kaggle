{"cell_type":{"ce4f1ba6":"code","e1b16470":"code","bf5181fe":"code","0c7727ed":"code","55c6a20a":"code","e7f92791":"code","567e2a65":"code","269f26d6":"code","51090ec2":"code","c65d3d05":"code","4e30103b":"code","c5939da0":"code","f7d141d1":"code","fc74d4a0":"code","b24020cc":"code","47a9a0c2":"code","40c7817f":"code","e08f4e59":"markdown","c5274d3b":"markdown"},"source":{"ce4f1ba6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e1b16470":"# Initially we will build some Binary Classification for each Asanas\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport os\nimport re\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split","bf5181fe":"# EDA\n!ls ..\/input\/yoga-pose-image-classification-dataset\/dataset","0c7727ed":"# Finding out the Number of Asanas\nfor dirpath,dirnames,filenames in os.walk(\"..\/input\/yoga-pose-image-classification-dataset\/dataset\"):\n    print(f\"There are {len(dirnames)} asanas in the '{dirpath}'\")\n    ","55c6a20a":"# EDA  for any Asana\nanantasana=len(os.listdir(\"..\/input\/yoga-pose-image-classification-dataset\/dataset\/anantasana\"))\nanantasana\n# 43 Images so we wont be splitting it to Train Test and Rather Make Predictions of Custom Images\n","e7f92791":"import pathlib\ndata_dir=pathlib.Path(\"..\/input\/yoga-pose-image-classification-dataset\/dataset\")\nclass_names=np.array(sorted([item.name for item in data_dir.glob(\"*\")]))\nclass_names\n# Creating an array of Classes for Predictions\n","567e2a65":"train_dir=\"..\/input\/yoga-pose-image-classification-dataset\/dataset\"\n","269f26d6":"# Data Pre Processing\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n# Reescaling the Data\ntrain_datagen=  ImageDataGenerator(rescale=1\/255.)","51090ec2":"# Loading the Data from the dirs and turnit into Batches\ntrain_data=train_datagen.flow_from_directory(train_dir,target_size=(224,224),batch_size=32,class_mode=\"categorical\")","c65d3d05":"# Importing the Libraries\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Activation","4e30103b":"# Creating a CNN Model for Training \n# Creating the Model\nmodel=Sequential([Conv2D(10,3,input_shape=(224,224,3)),\n                  Activation(activation=\"relu\"),\n                  Conv2D(10,3,activation=\"relu\"),\n                  MaxPool2D(),\n                  Conv2D(10,3,activation=\"relu\"),\n                  Conv2D(10,3,activation=\"relu\"),\n                  MaxPool2D(),\n                  Flatten(),\n                  Dense(107,activation='softmax')\n                 ])\nmodel.compile(loss=\"categorical_crossentropy\",optimizer=tf.keras.optimizers.Adam(),metrics=[\"accuracy\"])\n","c5939da0":"# Over Fitting the Model to the Dataset\nhistory=model.fit(train_data,epochs=10,steps_per_epoch=len(train_data))","f7d141d1":"# Evaluating the Model\ntestdata=\"..\/input\/testdata1\"\nfrom PIL import Image\ntest_data=train_datagen.flow_from_directory(testdata,target_size=(224,224),class_mode=\"categorical\")\n# np_img = np_img[np.newaxis,:,:]\n","fc74d4a0":"pred=model.predict(test_data)","b24020cc":"import matplotlib.image as mpimg\n# Create a function to import and image and resize it to be able to be used with our model\ndef load_and_prep_image(filename, img_shape=224):\n \n  # Read in the image\n  img = tf.io.read_file(filename)\n  # Decode the read file into a tensor\n  img = tf.image.decode_image(img)\n  # Resize the image\n  img = tf.image.resize(img, size=[img_shape, img_shape])\n  # Rescale the image (get all values between 0 and 1)\n  img = img\/255.\n  return img","47a9a0c2":"def pred_and_plot(model, test_img, class_names=class_names):\n \n  # Import the target image and preprocess it\n#   img = load_and_prep_image(filename)\n\n  # Make a prediction\n  pred = model.predict(tf.expand_dims(test_img, axis=0))\n\n  # Add in logic for multi-class & get pred_class name\n  if len(pred[0]) > 1:\n    pred_class = class_names[tf.argmax(pred[0])]\n  else:\n    pred_class = class_names[int(tf.round(pred[0]))]\n\n  # Plot the image and predicted class\n  plt.imshow(img)\n  plt.title(f\"Prediction: {pred_class}\")\n  plt.axis(False);\n","40c7817f":"pred_and_plot(model=model,\n              test_img=test_data,\n              class_names=class_names)","e08f4e59":"End to End Model Building with Input Layer -->  Convolution Layer --> Hidden Activation --> Pooling Layer --> Connected Layer --> Output Activation and Layer\nWith multiple Pooling and Convolution Layers","c5274d3b":"Making a Dense Net CNN with Tensorflow to make Classification of Yoga Poses\nI will be making a Multi Class Image Classification Problem"}}