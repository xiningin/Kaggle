{"cell_type":{"11b9db7c":"code","cd90e923":"code","427d5f64":"code","f4d535a0":"code","bbf4bac5":"code","b19c47c6":"code","0b6e18c0":"code","b1ce3283":"code","4edce1b4":"code","2323c056":"code","f013bdff":"code","f39c5f28":"code","2d0f5ee9":"code","49e60680":"code","f9d06b36":"markdown","74ae4860":"markdown","f0e7daa7":"markdown","52bc2bee":"markdown"},"source":{"11b9db7c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cd90e923":"train=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv\")\nsubmission=pd.read_csv(\"\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv\")\n","427d5f64":"print(train.shape)\ntrain.head()","f4d535a0":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nitaly=train[train[\"Country\/Region\"]==\"Italy\"]\nplt.figure(figsize=(20,15))\nax = sns.lineplot(x=\"Date\", y=\"Fatalities\", data=italy)\n","bbf4bac5":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nturkey=train[train[\"Country\/Region\"]==\"Turkey\"]\nplt.figure(figsize=(15,30))\nax = sns.lineplot(x=\"Date\", y=\"Fatalities\", data=turkey)","b19c47c6":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\njapan=train[train[\"Country\/Region\"]==\"Japan\"]\nplt.figure(figsize=(15,30))\nax = sns.lineplot(x=\"Date\", y=\"Fatalities\", data=japan)","0b6e18c0":"import plotly.express as px\nfig = px.choropleth(train, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\", \n                    color=\"Fatalities\", \n                    hover_name='Country\/Region', \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Corona Spreading',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\nfig","b1ce3283":"set(train['Country\/Region'])","4edce1b4":"import plotly.express as px\nfig = px.choropleth(train, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\", \n                    color='ConfirmedCases', \n                    hover_name='Country\/Region', \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Corona Spreading',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\nfig","2323c056":"fig = px.choropleth(train, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\", \n                    color='ConfirmedCases',\n                    range_color=(0,6000),\n                    hover_name='Country\/Region', \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Corona Spreading',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\nfig","f013bdff":"fig = px.choropleth(train[train[\"Date\"]==\"2020-03-02\"],\n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    range_color=(0,50),\n                    color=\"ConfirmedCases\",\n                    hover_name=\"Country\/Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig","f39c5f28":"fig = px.choropleth(train[train[\"Date\"]==\"2020-03-10\"],\n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\",\n                    range_color=(0,50),\n                    color=\"ConfirmedCases\",\n                    hover_name=\"Country\/Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig","2d0f5ee9":"fig = px.choropleth(train, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\", \n                    color='ConfirmedCases',\n                    range_color=(0,2000),\n                    hover_name='Country\/Region', \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Corona Spreading',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\nfig","49e60680":"fig = px.choropleth(train, \n                    locations=\"Country\/Region\", \n                    locationmode = \"country names\", \n                    color='ConfirmedCases',\n                    range_color=(0,40),\n                    hover_name='Country\/Region', \n                    animation_frame=\"Date\"\n                   )\n\nfig.update_layout(\n    title_text = 'Corona Spreading',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\nfig","f9d06b36":"Fatalities is too small to examine with plot. Confirmed cases world map is have to be better.","74ae4860":"It is too early for Turkey.","f0e7daa7":"With Agressive range color. (0.50) map is looks better. However bigger values has only yellow not a shade of yellow.","52bc2bee":"Okay this plots looks disgusting. I make plotly world map with plotly."}}