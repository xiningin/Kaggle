{"cell_type":{"4aa4a970":"code","830f1484":"code","9e9aa41a":"code","cd0bbd80":"code","1378a9e2":"code","de5a4079":"code","6779e5ea":"code","d4254290":"code","99fbde14":"code","33dd9668":"code","64efea99":"code","3920a26a":"code","73ed0841":"code","e410aba4":"code","9f60fa9f":"code","d67ab8f8":"code","d8918633":"code","09099ae3":"code","849a5ef0":"code","08aab231":"code","b65ecfb5":"code","817a4f71":"code","09299ddd":"code","ff6c6711":"code","9bb85f9c":"code","0f7eae9a":"code","97227d12":"code","37c3012c":"code","bf2d17c9":"code","f86b71e8":"code","82fcab33":"code","e9896dac":"code","13822390":"code","486b8a3b":"code","9592e0e6":"code","acf9f55f":"code","028a43b0":"code","53d7b173":"code","329703e6":"code","e26d4173":"code","91f4cc94":"code","c0025aa0":"code","5467dbaf":"code","effdd65e":"code","c1ba491d":"code","78231153":"code","0a320c7c":"code","510bb325":"code","53d957fc":"code","c221c48c":"code","c3442b37":"code","cafbce1a":"code","c65122fe":"code","2ad4a34c":"code","a2516371":"code","2b8c578e":"code","e8862442":"code","55e05baa":"code","d0aeef37":"code","e625e84c":"code","62ade344":"code","12435409":"code","bccfc304":"code","8391a275":"code","97ad03b7":"code","7eb39624":"code","416648d1":"code","afa4c051":"code","105982e7":"code","278d3d46":"code","c5cfa1ac":"code","b49a743c":"code","0bdeb1e9":"code","2a510e1e":"code","2294db29":"code","f5225117":"code","7f8652ab":"code","ca864d30":"code","eff878e6":"code","1ca55456":"code","a5179aac":"code","2bc517a7":"code","b4d2a20c":"markdown","0d8b152b":"markdown","ed67fe59":"markdown","8644033b":"markdown","05d30a38":"markdown","69abb3f3":"markdown","81836433":"markdown","07df7ce5":"markdown","8137ca8c":"markdown","1331aabf":"markdown","2673e266":"markdown","06cc6ff8":"markdown","2f31d683":"markdown","8160ce3d":"markdown","bad9b3a9":"markdown","6aeddc5c":"markdown","d4ac7841":"markdown","e20be525":"markdown","93083059":"markdown","2d201d8a":"markdown","b738c385":"markdown","b03c012b":"markdown","44bb1e1c":"markdown","07579f21":"markdown","8bc8d9fe":"markdown","f2c2ec71":"markdown","1f36343a":"markdown","a88763d9":"markdown","f2bf6002":"markdown","dab72b1a":"markdown","bf00129c":"markdown","fdc8dec2":"markdown","9d10eab5":"markdown","8e524ff8":"markdown","a3acf5f5":"markdown","cfe2742e":"markdown","cc3cccf5":"markdown","24b9a0c5":"markdown","b1bcaf80":"markdown","ead3a018":"markdown","e8fe4fa9":"markdown","d9dc9457":"markdown","d1f16054":"markdown","a69ed808":"markdown","e5a475ae":"markdown","ffb57215":"markdown"},"source":{"4aa4a970":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","830f1484":"plt.style.available","9e9aa41a":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId= test_df[\"PassengerId\"]","cd0bbd80":"train_df.columns\ntrain_df.head()","1378a9e2":"train_df.describe()","de5a4079":"train_df.info()","6779e5ea":"def bar_plot(variable):\n    \"\"\"\n         input: variable ex:\"Sex\"\n         output: bar plot & value count\n    \"\"\"\n    #get feature\n    var=train_df[variable]\n    #count number of categorical variable\n    varValue= var.value_counts()\n    #visulation\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","d4254290":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)\n","99fbde14":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","33dd9668":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable])\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","64efea99":"numericVar=[\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)\n","3920a26a":"#Pclass VS Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","73ed0841":"#Sex VS Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","e410aba4":"#SibSp VS Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","9f60fa9f":"#Parch VS Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","d67ab8f8":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st Quartile:\n        Q1=np.percentile(df[c],25)\n        #3rd Quartile:\n        Q3=np.percentile(df[c],25)\n        #IQR:\n        IQR=Q3-Q1\n        #Outlier Step:\n        outlier_step=IQR*1.5\n        #Detect Outlier and Their \u0130ndices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]>Q3+outlier_step)].index\n        #Store Indeces\n        outlier_indices.extend(outlier_list_col)\n    outlier_indices=Counter(outlier_indices)\n    multiplt_outliers=list(i for i , v in outlier_indices.items() if v>2)\n    return multiplt_outliers\n        ","d8918633":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","09099ae3":"#Drop Outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","849a5ef0":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","08aab231":"train_df.head()","b65ecfb5":"train_df.columns[train_df.isnull().any()]","817a4f71":"train_df.isnull().sum()","09299ddd":"train_df[train_df[\"Embarked\"].isnull()]","ff6c6711":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","9bb85f9c":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","0f7eae9a":"train_df[train_df[\"Fare\"].isnull()]","97227d12":"np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"])","37c3012c":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","bf2d17c9":"train_df[train_df[\"Fare\"].isnull()]","f86b71e8":"list1=[\"SibSp\" ,\"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True, fmt='.3f')\nplt.show()","82fcab33":"g=sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind='bar',size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e9896dac":"g=sns.factorplot(x=\"Parch\",y=\"Survived\",kind='bar',data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","13822390":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind='bar',size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","486b8a3b":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","9592e0e6":"g=sns.FacetGrid(train_df,col=\"Survived\",row=\"Pclass\")\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","acf9f55f":"g=sns.FacetGrid(train_df,row=\"Embarked\")\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","028a43b0":"g=sns.FacetGrid(train_df,col=\"Survived\",row=\"Embarked\")\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","53d7b173":"train_df[train_df[\"Age\"].isnull()]","329703e6":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","e26d4173":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","91f4cc94":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","c0025aa0":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]]","5467dbaf":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","effdd65e":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med\n\n        ","c1ba491d":"train_df[train_df[\"Age\"].isnull()]","78231153":"train_df[\"Name\"].head(10)","0a320c7c":"name=train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]\ntrain_df[\"Title\"].head(10)","510bb325":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","53d957fc":"# Convert to Categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","c221c48c":"g=sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"other\"])\ng.set_ylabels(\"Survived Probability\")\nplt.show()","c3442b37":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","cafbce1a":"train_df.head()","c65122fe":"train_df=pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","2ad4a34c":"train_df[\"Fsize\"]=train_df[\"SibSp\"]+train_df[\"Parch\"]+1","a2516371":"train_df.head()","2b8c578e":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e8862442":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","55e05baa":"train_df.head(20)","d0aeef37":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","e625e84c":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","62ade344":"train_df=pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","12435409":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","bccfc304":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","8391a275":"train_df[\"Ticket\"].head(20)","97ad03b7":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]) \n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets","7eb39624":"train_df[\"Ticket\"].head(20)","416648d1":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(20)","afa4c051":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","105982e7":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head(20)","278d3d46":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head(20)","c5cfa1ac":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","b49a743c":"train_df.columns","0bdeb1e9":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","2a510e1e":"train_df_len","2294db29":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)\ntest.head()","f5225117":"train=train_df[:train_df_len]\nX_train=train.drop(labels=[\"Survived\"],axis=1)\ny_train=train[\"Survived\"]\nX_train,X_test,y_train,y_test=train_test_split(X_train,y_train,test_size=0.33,random_state=42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","7f8652ab":"logreg=LogisticRegression()\nlogreg.fit(X_train,y_train)\nacc_log_train=round(logreg.score(X_train,y_train)*100,2)\nacc_log_test=round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","ca864d30":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid={\"min_samples_split\": range(10,500,20),\n              \"max_depth\": range(1,20,2)}\n\nsvm_param_grid={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n               \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}\nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\n                  \"penalty\":[\"l1\",\"l2\"]}\nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10,dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\n               \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param=[dt_param_grid,svm_param_grid,rf_param_grid,logreg_param_grid,knn_param_grid]\n\n","eff878e6":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])\n    ","1ca55456":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVC\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","a5179aac":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                    (\"rfc\",best_estimators[2]),\n                                    (\"lr\",best_estimators[3])],\n                                    voting=\"soft\",n_jobs=-1)\nvotingC=votingC.fit(X_train,y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","2bc517a7":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","b4d2a20c":"Lets check Can we use Sex feature for fill Age feature","0d8b152b":"<a id=\"22\"><\/a>\n## Name--Title\n","ed67fe59":"<a id=\"33\"><\/a>\n## Ensemble Modeling","8644033b":"<a id=\"34\"><\/a>\n## Modeling: Prediction and Submission","05d30a38":"<a id=\"20\"><\/a>\n## Fill Missing: Age Feature","69abb3f3":"<a id=\"7\"><\/a>\n\n## Outlier Detection","81836433":"<a id=\"5\"><\/a>\n### Numerical Variable","07df7ce5":"<a id=\"25\"><\/a>\n## Ticket","8137ca8c":"<a id=\"13\"><\/a>\n### SibSp--Survived","1331aabf":"Fare feature seems to have correlation with Survived feature (0.277)","2673e266":"Passengers in 1st class are older than 2nd class and Passenger in 2nd class are older than 3rd class","06cc6ff8":"* When Age<=10 has a high survival rate\n* Oldest passengers (80) survived","2f31d683":"<a id=\"23\"><\/a>\n## Family Size","8160ce3d":"<a id=\"16\"><\/a>\n\n### Age--Survived","bad9b3a9":"* Small families have more chance to survive.\n* SibSp and Parch can be used for new feature extraction with th=3","6aeddc5c":"<a id=\"1\"><\/a>\n## Load and Check Data","d4ac7841":"<a id=\"11\"><\/a>\n\n# Visualization","e20be525":"<a id=\"2\"><\/a>\n\n## Variable Description\n\n\n1. PassengerId: Specific ID number for each passenger\n1.    Survived: Passenger alive(1) or died(0)\n1.    Pclass: Passenger class\n1.    Name: Name of passengers\n1.    Sex: Gender of passengers\n1.    Age: Age of passengers\n1.    Sibsp: Number of siblins\/spouses\n1.    Parch: Number of parents\/children\n1. Ticket: Ticket number\n1.    Fare: Cost of ticket\n1. Cabin: Category of cabin\n1. Embarked: Harbour where passengers embarked \n(C=Cherbourg, Q=Queenstown, S=Southampton)","93083059":"<a id=\"26\"><\/a>\n## Pclass","2d201d8a":"<a id=\"4\"><\/a>\n\n### Categorical Variable \n","b738c385":"<a id=\"15\"><\/a>\n### Pclass--Survived","b03c012b":"Age is correlated with Parch, SibSp and Pclass but not correlated with Sex","44bb1e1c":"* float64(2): Age and Fare\n* int64(5): PassengerId,Survived,Pclass,SibSp and Parch\n* object(5): Name,Sex,Ticket,Cabin and Embarked","07579f21":"<a id=\"3\"><\/a>\n\n## Univariate Variable Analysis\n* Categorical Variable: Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp and Parch\n* Numerical Variable: Fare,Age and Passenger","8bc8d9fe":"<a id=\"24\"><\/a>\n## Embarked","f2c2ec71":"<a id=\"8\"><\/a>\n\n## Missing Value\n* Find Missing Value\n* Fill Missing Value","1f36343a":"Small familes have more chance to survive than large families.","a88763d9":"<a id=\"17\"><\/a>\n### Pclass-Age--Survived","f2bf6002":"<a id=\"18\"><\/a>\n### Embarked -- Sex -- Pclass -- Survived","dab72b1a":"* Having a lot of SibSp have less chance to survive\n* If SibSp==0,1 or 2 passenger has more chance to survive","bf00129c":"<a id=\"12\"><\/a>\n### Correlation Between SibSp--Parch--Age--Fare--Survived","fdc8dec2":"<a id=\"32\"><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\n\nWe will compare 5 ML classifier and evaluate Mean Accuracy of each of them by Stratified Cross Validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","9d10eab5":"<a id=\"14\"><\/a>\n### Parch--Survived","8e524ff8":"<a id=\"28\"><\/a>\n## Drop Passenger ID and Cabin","a3acf5f5":"<a id=\"27\"><\/a>\n## Sex\n","cfe2742e":"We create a new feature using Name feature. This new feature's name is Title. So we dont need Name feature anymore","cc3cccf5":"<a id=\"29\"><\/a>\n\n# Modelling","24b9a0c5":"<a id=\"10\"><\/a>\n\n### Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","b1bcaf80":"<a id=\"6\"><\/a>\n## Basic Data Analysis\n* Pclass-Survived\n* Sex-Survived\n* SibSp-Survived\n* Parch-Survived","ead3a018":"<a id=\"21\"><\/a>\n# Feature Engineering","e8fe4fa9":"<a id=\"31\"><\/a>\n## Simple Logistic Regression","d9dc9457":"Sex feature not informative for Age. Their median score are close each other","d1f16054":"# INTRODUCTION\n\nThe submergence of Titanic is one of the horrible accident. Although all people belive that this ship cannot sinking, Titanic go down. This accident cause dead of 1502 passengers and crew.\n\n<font color='blue'>\n      \n      \nContent:\n\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n1. [Univariate Variable Analysis](#3)\n      * [Categorical Variable](#4)\n      * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp--Parch--Age--Fare--Survived](#12)\n    * [SibSp--Survived](#13)\n    * [Parch--Survived](#14)\n    * [Pclass--Survived](#15)\n    * [Age--Survived](#16)\n    * [Pclass-Age--Survived](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing: Age Feature](#20)\n1. [Feature Engineering](#21)\n    * [Name--Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop Passenger ID and Cabin](#28)\n1. [Modelling](#29)\n    * [Train - Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Modeling: Prediction and Submission](#34)","a69ed808":"<a id=\"30\"><\/a>\n## Train - Test Split","e5a475ae":"<a id=\"19\"><\/a>\n### Embarked -- Sex -- Fare -- Survived","ffb57215":"<a id=\"9\"><\/a>\n\n### Find Missing Value"}}