{"cell_type":{"0b17d45b":"code","d48aac67":"code","3dcdf270":"code","fbe7bb13":"code","45560fad":"code","0b071608":"code","0a440b9f":"code","9979f6b8":"code","93454ced":"code","6a283f8a":"code","69cf1f4d":"code","8105a8ec":"code","671ae871":"markdown","dcd6ae4b":"markdown","fba085e2":"markdown","bdc5aefc":"markdown","f80b8c86":"markdown","43609935":"markdown","ff37c0c5":"markdown","8139cb7a":"markdown","47dfa3d7":"markdown"},"source":{"0b17d45b":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n\nimport pandas as pd\nimport numpy as np\nimport gc\n\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras.models import *\nimport tensorflow as tf\nfrom tensorflow import keras","d48aac67":"fold = 5","3dcdf270":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","fbe7bb13":"train = reduce_memory_usage(pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv'))\ntest = reduce_memory_usage(pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv'))\nss = reduce_memory_usage(pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv'))\ntrain","45560fad":"train['std'] = train.std(axis=1)\ntrain['min'] = train.min(axis=1)\ntrain['max'] = train.max(axis=1)\n\ntest['std'] = test.std(axis=1)\ntest['min'] = test.min(axis=1)\ntest['max'] = test.max(axis=1)","0b071608":"train2 = train.drop(columns = ['id', 'target'])\ntest2 = test.drop(columns = ['id'])\ny = train['target']\ntrain2","0a440b9f":"rs = RobustScaler()\n\nrs.fit(train2)\n\ntrain2 = rs.transform(train2)\ntest2 = rs.transform(test2)\n\ntrain2 = train2.astype(np.float32)\ntest2 = test2.astype(np.float32)\n\ngc.collect()","9979f6b8":"train2 = train2.reshape(-1, 1, train2.shape[-1])\ntest2 = test2.reshape(-1, 1, test2.shape[-1])","93454ced":"def get_model():\n    model = Sequential()\n    model.add(Input(shape = train2.shape[-2:]))\n    model.add(Bidirectional(LSTM(512, return_sequences = True)))\n    model.add(Bidirectional(LSTM(256, return_sequences = True)))\n    model.add(Bidirectional(GRU(128, return_sequences = True)))\n    model.add(Bidirectional(GRU(64, return_sequences = True)))\n    model.add(Dense(100, activation = 'selu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n    model.add(Dense(50, activation = 'swish'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.2))\n    model.add(Dense(1, activation = 'sigmoid'))\n    return model","6a283f8a":"tf.keras.utils.plot_model(get_model())","69cf1f4d":"stk = StratifiedKFold(n_splits = fold, random_state = 42, shuffle = True)\nresults = 0\n\nfor counter, (train_index, valid_index) in enumerate(stk.split(train2, y)):\n    x_train, y_train = train2[train_index], y[train_index]\n    x_valid, y_valid = train2[valid_index], y[valid_index]\n\n    model = get_model()\n\n    model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['AUC'])\n\n    es = EarlyStopping(patience = 3,\n                       verbose = 1,\n                       restore_best_weights = True)\n\n    print('------------ Fold', counter+1, 'Start! ------------')\n\n    model.fit(x_train, y_train,\n              validation_data = (x_valid, y_valid),\n              callbacks = [es],\n              batch_size = 256,\n              epochs = 50)\n\n    results += model.predict(test2) \/ fold\n\n    print('------------ Fold', counter+1, 'Done! ------------')\n\n    del x_train, y_train, x_valid, y_valid, model\n    gc.collect()","8105a8ec":"sub = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsub['target'] = results.squeeze()\nsub.to_csv('sub.csv', index = 0)\nsub","671ae871":"### Plot Model","dcd6ae4b":"# Train & Predict","fba085e2":"# Scaling","bdc5aefc":"# Reshape for LSTM","f80b8c86":"# Load Data","43609935":"# Submit","ff37c0c5":"# Simple Feature Generation","8139cb7a":"# Build Model","47dfa3d7":"# Memory reduce\n\n### Thanks a lot for sharing\n- https:\/\/www.kaggle.com\/hrshuvo\/tps-oct-21-lgbm-kfold?scriptVersionId=76104876"}}