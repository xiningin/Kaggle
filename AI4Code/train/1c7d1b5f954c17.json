{"cell_type":{"bbe2b7ec":"code","47638d0a":"code","dd7594e8":"code","319cd152":"code","6aba932c":"code","e2e7ec19":"code","6b215245":"code","4f6e62ae":"code","c646dd9c":"code","63a1c67c":"code","0c8431db":"markdown","54a38c0a":"markdown","1c4d9dac":"markdown"},"source":{"bbe2b7ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.callbacks import EarlyStopping\nfrom keras import losses\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, max_error, f1_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","47638d0a":"df = pd.read_csv('\/kaggle\/input\/dollar-prices-and-infos\/database_15min.csv')\ndf.set_axis(\n        ['Date', 'OpenP', 'MaxP', 'MinP', 'CloseP', 'Volume', 'fin', 'negociation', 'mme13', 'mme72', 'high_mean',\n         'low_mean', 'diffmacd', 'deamacd', 'macdlh', 'difflh', 'dealh', 'Result'], axis=1, inplace=True)\ndf.head()","dd7594e8":"eps = 0.001  # prevent form log(0)\ndf['finantial'] = np.log(df.pop('fin') + eps)\n\n\ndf['vol_open'] = np.log(df['Volume']) * df['OpenP']\ndf['negoc_close'] = np.log(df['negociation']) * df['CloseP']","319cd152":"df['Result Class'] = 0 # 'DO NOTHING'\ndf['diffence'] = df['OpenP'] - df['Result']\n\ndf.loc[df['diffence'] > 6.5, 'Result Class'] = 1 # 'BUY'\ndf.loc[df['diffence'] < -6.5, 'Result Class'] = 2 # 'SELL'\n\ndf = df.drop(['Date', 'Result', 'diffence'], axis=1) # remove columns useless to the model\ndf.head()","6aba932c":"X = shuffle(df.iloc[:20000, :])\nX_train = X.iloc[:, :-1]\ny_train = X.iloc[:, -1]\nX_val = df.iloc[20000:, :-1]\ny_val = df.iloc[20000:, -1]","e2e7ec19":"def get_class_weight(classes, exp=1):\n    '''\n    Weight of the class is inversely proportional to the population of the class.\n    There is an exponent for adding more weight.\n    '''\n    hist, _ = np.histogram(classes, bins=np.arange(4)-0.5)\n    class_weight = hist.sum()\/np.power(hist, exp)\n    \n    return class_weight\n\nclass_weight = get_class_weight(y_train)\nprint(class_weight)","6b215245":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\n\nmodel = Sequential()\nmodel.add(Dense(units=500, activation='relu', input_dim=18))\nmodel.add(Dense(units=500, activation='relu'))\nmodel.add(Dense(units=314, activation='relu'))\nmodel.add(Dense(units=314, activation='relu'))\nmodel.add(Dense(units=314, activation='relu'))\nmodel.add(Dense(units=314, activation='relu'))\nmodel.add(Dense(units=195, activation='relu'))\nmodel.add(Dense(units=120, activation='relu'))\nmodel.add(Dense(units=1, activation='softmax'))\n\n\nmodel.compile(loss='mse', optimizer='adam',\n              metrics=['mae', 'mse'])\n\nprint(model.summary())\n","4f6e62ae":"def plot_history(history):\n    hist = pd.DataFrame(history.history)\n    hist['epoch'] = history.epoch\n\n    plt.figure()\n    plt.xlabel('Epoch')\n    plt.ylabel('Mean Abs Error')\n    plt.plot(hist['epoch'], hist['mae'],\n             label='Train Error')\n    plt.plot(hist['epoch'], hist['val_mae'],\n             label='Val Error')\n    plt.legend()\n    plt.show()","c646dd9c":"EPOCHS = 1000\nearly_stop = EarlyStopping(monitor='val_loss', patience=50)\n\ntrain_history = model.fit(X_train, y_train, epochs=EPOCHS,\n                          validation_split=0.2, verbose=1, callbacks=[early_stop], class_weight=class_weight)\n\nmodel.save('tf_classicator.h5')\n\nplot_history(train_history)","63a1c67c":"X_val = scaler.transform(X_val)\n\npreds = model.predict(X_val)\n\nmae = mean_absolute_error(y_val, preds)\n\nprint(mae)\n","0c8431db":"### Changing the Target\n#### Turning a Regression target to a Classification target","54a38c0a":"### Little bit of FE","1c4d9dac":"### Load the Data"}}