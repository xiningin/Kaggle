{"cell_type":{"2c1beae1":"code","d317ac48":"code","e6935523":"code","f7e41e1f":"code","7c31588a":"code","314d1fe4":"code","3e4e7c1c":"code","cfc0ae0f":"code","8f5199b1":"code","a8889763":"code","bc850e00":"code","f83837f8":"code","a724dd32":"code","4b5374f9":"code","b3e33403":"code","e14a509c":"markdown","7f6ff7b2":"markdown","b7c4def9":"markdown","c527ff56":"markdown","70b4d14e":"markdown","3dba48ca":"markdown","87a61d53":"markdown","a9563678":"markdown","67ed7585":"markdown","a355ed0b":"markdown","1082c8c5":"markdown","b160c099":"markdown","959c5526":"markdown"},"source":{"2c1beae1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d317ac48":"df = pd.read_csv('\/kaggle\/input\/aiosogbo-certification-competition\/Train.csv')","e6935523":"perishable = [\"Breads\", \"Breakfast\", \"Dairy\", \"Fruits and Vegetables\",\n              \"Meat\", \"Seafood\", 'Snack Foods']\n\nnon_perishable = [\"Baking Goods\", \"Canned\",\"Frozen Foods\", \"Hard Drinks\",\n                  \"Health and Hygeine\", \"Household\", \"Soft Drinks\"]\n\n# create a new feature 'Item_Type_new'\nItem_Type_new = []\nfor item in df['Item_Type']:\n    if item in perishable:\n        Item_Type_new.append('perishable')\n    elif item in non_perishable:\n        Item_Type_new.append('non_perishable')\n    else:\n        Item_Type_new.append('not_sure')","f7e41e1f":"# create a new feature 'Item_Type_new'\ndf['Item_Type_new'] = Item_Type_new","7c31588a":"# create a new feature 'Outlet_Years' from 'Outlet_Establishment_Year'\n\ndf['Outlet_Years'] = 2013 - df['Outlet_Establishment_Year']\ndf['Outlet_Years'].head()","314d1fe4":"# create a new feature 'Price_Per_Unit_wt'\ndf['Price_Per_Unit_wt'] = df['Item_MRP'] \/ df['Item_Weight']\ndf['Price_Per_Unit_wt'].head()","3e4e7c1c":"\n# create a new feature 'Item_MRP_Clusters'\n# 'Item_MRP_Clusters' this feature will group expensive products and the less expensive ones. This will inform the model of product that fall in the range of higher prices and product within the lower price \n# df['Item_MRP_Clusters']\nItem_MRP_Clusters = []\nfor item in df['Item_MRP']:\n    if item < 69:\n        Item_MRP_Clusters.append(1)\n    elif item >= 69 and item < 136:\n        Item_MRP_Clusters.append(2)\n    elif item >=136 and item < 203:\n        Item_MRP_Clusters.append(3)\n    else:\n        Item_MRP_Clusters.append(4)\ndf['Item_MRP_Clusters'] = Item_MRP_Clusters\n","cfc0ae0f":"################################ Using Label Code Encoder ###############################\nOutlet_Size_num = []\nfor item in df['Outlet_Size']:\n    if item == 'Small':\n        Outlet_Size_num.append(0)\n    elif item == 'Medium':\n        Outlet_Size_num.append(1)\n    else:\n        Outlet_Size_num.append(2)\ndf['Outlet_Size_num'] = Outlet_Size_num\ndf['Outlet_Size_num'].head()","8f5199b1":"Outlet_Location_Size_num = []\nfor item in df['Outlet_Location_Type']:\n    if item == 'Tier 3':\n        Outlet_Location_Size_num.append(3)\n    elif item == 'Tier 2':\n        Outlet_Location_Size_num.append(2)\n    else:\n        Outlet_Location_Size_num.append(0)\ndf['Outlet_Location_Size_num'] = Outlet_Location_Size_num\ndf['Outlet_Location_Size_num'].head()","a8889763":"outlet_Type = pd.DataFrame(df['Outlet_Type'])\nfe = outlet_Type.groupby('Outlet_Type').size() \/ len(outlet_Type)\noutlet_Type.loc[:, 'Outlet_Type_fe'] = outlet_Type['Outlet_Type'].map(fe)\n\ndf['Outlet_Type'] = outlet_Type['Outlet_Type_fe']","bc850e00":"# removing categorical variable after label encoding\ndf = df.drop(['Outlet_Location_Type', 'Outlet_Size'], axis=1)\ndf.columns","f83837f8":"################################# One Nice Hot Encoding -- Baba Dummy ###############################\n\ndummy_cols = ['Item_Type']\ncombi_cat = pd.get_dummies(df[dummy_cols])\ncombi_cat.head()","a724dd32":"# Let combine the dummy dataframe and the other dataframe while dropping the affected column 'Item_Type'\ndf_new = df.drop(dummy_cols, axis=1)\ndf = df_new.join(combi_cat)\ndf.head()","4b5374f9":"import matplotlib.pyplot as plt\nItem_Visibility = df['Item_Visibility']\nfig, ax = plt.subplots()\nax.hist(Item_Visibility.dropna(), color='green', bins=80, alpha=0.9)\nplt.xlabel('Item_Visibility')\nplt.ylabel('count')\nplt.title('Histogram of Item_Visibility')\n","b3e33403":"# Removing Skewness by taking logs\ndf['Item_Visibility'] = np.log(df['Item_Visibility'] + 1) # log + 1 to avoid division by zero\ndf['Price_Per_Unit_wt'] = np.log(df['Price_Per_Unit_wt'] + 1)","e14a509c":"**Remove the category types**","7f6ff7b2":" **There are many options to this** <br>\n * label encoder -- most useful for ordinal categorical variables <br>\n * one hot encodeing -- to get binary form of variables value = 1 where it is True else 0\n ","b7c4def9":"**Feature Engineering**","c527ff56":"In the previous Notebook on EDA we found out that a column is skewed","70b4d14e":"**Using One Hot Encoding Technics**","3dba48ca":"There other columns that needs to be dropped to. Please figure them Out also You can still improve the feature engineering by thinking out of what i have done and apply your methods. <br>\nOne can still improve this by doing proper feature selection","87a61d53":"Let fix THAT","a9563678":"Also note that sklearn provides the class to achieve the OneHotEncoding Technics","67ed7585":"**Using Mean Encoding to Encode** <br>\nIt can be achieved by groupby the affected column on the target column and calculating the mean","a355ed0b":"## Encoding Categorical Variables ","1082c8c5":"I hope we have learn and can continue to improve the model see you on the leader board <br>\nAlso please leave an upvote if this kernal is useful <br>\nThank you and cheers <br>","b160c099":"Note that Sklearn also provides a library to do this. <br>\nit can be gotten with the code  `from sklearn.preprocessing import LabelEncoder`","959c5526":"**Encoding Outlet_Location_Size**"}}