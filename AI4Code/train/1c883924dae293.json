{"cell_type":{"36918d9b":"code","2d139ad8":"code","1cf9378d":"code","23e10e31":"code","79489b2b":"code","3bf96da4":"code","311346b6":"code","76530d00":"code","55344608":"code","9ca5ea56":"code","241f37aa":"code","651a5a0b":"code","8ac3d9f9":"code","141034c6":"code","f17d1842":"code","c7d3b2e4":"code","78d770e7":"code","08a01e7e":"code","1278c0d5":"code","61fcad9a":"code","95d348c6":"code","138052e3":"code","81503747":"code","026932a8":"code","03d93002":"code","44a97d9c":"code","719a5ee5":"code","e9157e80":"code","afdefd26":"code","a623cff7":"code","a1dc788b":"code","242f0de3":"markdown"},"source":{"36918d9b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport calendar\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d139ad8":"df = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/bike-sharing-demand\/test.csv\")","1cf9378d":"\ndf.head()","23e10e31":"df.info()","79489b2b":"df.isnull().sum()","3bf96da4":"sns.heatmap(df.isnull());","311346b6":"list(df.dtypes)","76530d00":"df[\"hour\"] = [t.hour for t in pd.DatetimeIndex(df.datetime)]\ndf[\"day\"] = [t.dayofweek for t in pd.DatetimeIndex(df.datetime)]\ndf[\"month\"] = [t.month for t in pd.DatetimeIndex(df.datetime)]\ndf['year'] = [t.year for t in pd.DatetimeIndex(df.datetime)]\ndf['year'] = df['year'].map({2011:0, 2012:1})\ndf.head()","55344608":"test[\"hour\"] = [t.hour for t in pd.DatetimeIndex(test.datetime)]\ntest[\"day\"] = [t.dayofweek for t in pd.DatetimeIndex(test.datetime)]\ntest[\"month\"] = [t.month for t in pd.DatetimeIndex(test.datetime)]\ntest['year'] = [t.year for t in pd.DatetimeIndex(test.datetime)]\ntest['year'] = test['year'].map({2011:0, 2012:1})\ntest.head()","9ca5ea56":"df.drop('datetime',axis=1,inplace=True)\ndf.head()","241f37aa":"df.drop(['casual','registered'],axis=1,inplace=True)","651a5a0b":"df.season.value_counts()","8ac3d9f9":"df.weather.value_counts()","141034c6":"corr = df[[\"temp\",\"atemp\",\"humidity\",\"windspeed\",\"count\"]].corr()\nplt.figure(figsize=(12,9))\nsns.heatmap(corr,annot=True,square=True,linewidths=.5,cmap=\"Greens\")\nplt.show()","f17d1842":"plt.figure(figsize=(7,5))\nsns.factorplot(x='holiday',data=df,kind='count',size=5,aspect=1)\nplt.show()","c7d3b2e4":"plt.figure(figsize=(7,5))\nsns.countplot(x='workingday',data=df)\nplt.show()","78d770e7":"plt.figure(figsize=(10,6))\nsns.boxplot(data=df[['temp','atemp', 'windspeed', 'count']])","08a01e7e":"plt.figure(figsize=(12,6))\nsns.barplot(x=\"hour\",y=\"count\",data=df);","1278c0d5":"plt.figure(figsize=(12,4))\nsns.barplot(x=\"month\",y=\"count\",data=df);","61fcad9a":"plt.figure(figsize=(22,4))\nsns.barplot(x=\"humidity\",y=\"count\",data=df);","95d348c6":"plt.figure(figsize=(18,4))\nsns.barplot(x=\"windspeed\",y=\"count\",data=df);","138052e3":"plt.figure(figsize=(18,4))\nsns.distplot(df.windspeed);","81503747":"plt.figure(figsize=(18,4))\nsns.distplot(df.hour);","026932a8":"plt.scatter(x=\"temp\",y=\"count\",data=df,color=\"Green\");","03d93002":"plt.scatter(x=\"hour\",y=\"count\",data=df,color=\"Green\");","44a97d9c":"plt.figure(figsize=(10,6))\nsns.factorplot(x=\"day\",y='count',kind='bar',data=df);","719a5ee5":"df.head()","e9157e80":"season=pd.get_dummies(df['season'],prefix='season')\ndf=pd.concat([df,season],axis=1)\nseason=pd.get_dummies(test['season'],prefix='season')\ntest=pd.concat([test,season],axis=1)\n\nweather=pd.get_dummies(df['weather'],prefix='weather')\ndf=pd.concat([df,weather],axis=1)\nweather=pd.get_dummies(test['weather'],prefix='weather')\ntest=pd.concat([test,weather],axis=1)","afdefd26":"df.columns","a623cff7":"test.head()","a1dc788b":"df.columns.to_series().groupby(df.dtypes).groups","242f0de3":"* Data Fields\n* datetime - hourly date + timestamp\n* season - 1 = spring, 2 = summer, 3 = fall, 4 = winter\n* holiday - whether the day is considered a holiday\n* workingday - whether the day is neither a weekend nor holiday\n* weather -\n* 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n* 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n* 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n* 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n* temp - temperature in Celsius\n* atemp - \"feels like\" temperature in Celsius\n* humidity - relative humidity\n* windspeed - wind speed\n* casual - number of non-registered user rentals initiated\n* registered - number of registered user rentals initiated\n* count - number of total rentals (Dependent Variable)"}}