{"cell_type":{"5f4a1704":"code","dfbca41d":"code","23575421":"code","30b4171d":"code","245411d0":"code","149f1cba":"code","b0074f20":"code","52b35999":"code","7fb40c16":"code","75f7308a":"code","a9d66065":"code","ca0914f2":"code","8527f6eb":"code","33bb04de":"code","8ab59fcd":"markdown","89ca9bfc":"markdown","303e1a2b":"markdown"},"source":{"5f4a1704":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dfbca41d":"pd.set_option('max_rows',100)\ndf=pd.read_csv(\"\/kaggle\/input\/us-counties-covid-19-dataset\/us-counties.csv\")\n\ndf['date']=pd.to_datetime(df['date'],yearfirst=True)\ndf.set_index('date',inplace=True)\ndf.head(100)","23575421":"total_cases=df.loc[pd.Timestamp('2020-07-09')]\ntotal_cases.head(10)","30b4171d":"total=total_cases.groupby(['state']).agg({'cases':['sum']})\ntotal.columns=['total_cases']","245411d0":"cases=total.nlargest(10,['total_cases'])\nplt.figure(figsize=(8,8))\n\nsns.barplot(x='total_cases',y=cases.index,data=cases,orient='h')\nplt.title('Top 10 States in terms of number of cases')\nplt.ylabel('State')\nplt.xlabel('Total number of Cases')\nax=plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","149f1cba":"death=total_cases.groupby(['state']).agg({'deaths':['sum']})\ndeath.columns=['total_deaths']\ndeath.head(10)","b0074f20":"deaths=death.nlargest(10,['total_deaths'])\nplt.figure(figsize=(8,8))\n\nsns.barplot(x='total_deaths',y=deaths.index,data=deaths,orient='h')\nplt.title('Top 10 States in terms of number of deaths')\nplt.ylabel('State')\nplt.xlabel('Total number of deaths')\nax=plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","52b35999":"dates=[]\ndata=[]\ndates.append('January')\ndata.append(df.loc[df.index==pd.Timestamp('2020-01-31')]['cases'].sum())\n\ndates.append('February')\ndata.append(df.loc[df.index==pd.Timestamp('2020-02-29')]['cases'].sum()-data[0])\n\ndates.append('March')\ndata.append(df.loc[df.index==pd.Timestamp('2020-03-31')]['cases'].sum()-data[1])\n\ndates.append('April')\ndata.append(df.loc[df.index==pd.Timestamp('2020-04-30')]['cases'].sum()-data[2])\n\ndates.append('May')\ndata.append(df.loc[df.index==pd.Timestamp('2020-05-31')]['cases'].sum()-data[3])\n\ndates.append('June')\ndata.append(df.loc[df.index==pd.Timestamp('2020-06-30')]['cases'].sum()-data[4])\n\ndates.append('July')\ndata.append(df.loc[df.index==pd.Timestamp('2020-07-09')]['cases'].sum()-data[5])","7fb40c16":"plt.figure(figsize=(8,8))\n\nsns.barplot(x=dates,y=data)\nplt.xlabel('Month')\nplt.ylabel('Total number of cases')\nplt.title('Cases per Month')\n\nfor i in range(7):\n    plt.text(x=i,y=data[i]+10000,s=data[i],ha='center')\n    \n    \nax=plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","75f7308a":"dates1=[]\ndata1=[]\ndates1.append('January')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-01-31')]['deaths'].sum())\n\ndates1.append('February')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-02-29')]['deaths'].sum()-data1[0])\n\ndates1.append('March')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-03-31')]['deaths'].sum()-data1[1])\n\ndates1.append('April')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-04-30')]['deaths'].sum()-data1[2])\n\ndates1.append('May')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-05-31')]['deaths'].sum()-data1[3])\n\ndates1.append('June')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-06-30')]['deaths'].sum()-data1[4])\n\ndates1.append('July')\ndata1.append(df.loc[df.index==pd.Timestamp('2020-07-09')]['deaths'].sum()-data1[5])","a9d66065":"plt.figure(figsize=(8,8))\nsns.barplot(x=dates1,y=data1)\nplt.xlabel('Month')\nplt.ylabel('Total number of deaths')\n#plt.ylim(0,30000)\nplt.title('Deaths per month')\n\nfor i in range(7):\n    plt.text(x=i,y=data1[i]+1000,s=data1[i],ha='center')\n    i+=1\n    \nax=plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","ca0914f2":"df.reset_index(inplace=True)\ndate=df.groupby(pd.Grouper(key='date',freq='1D')).agg({'cases':['sum'],'deaths':['sum']})\ndate.columns=['total_cases','total_deaths']\n#date['total_cases']=np.cumsum(date['total_cases'])\n#date['total_deaths']=np.cumsum(date['total_deaths'])\ndate","8527f6eb":"plt.figure(figsize=(12,12))\n\nsns.lineplot(x=date.index,y='total_cases',data=date)\nplt.title('Number of cases up till now')\nplt.xticks(np.array(pd.date_range('2020-01-21','2020-07-09',freq='5D')),rotation=90)\nplt.xlabel('Date')\nplt.ylabel('Number of Cases')\nax=plt.gca()\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)","33bb04de":"counties=total_cases.groupby(['county']).agg({'cases':['max']})\ncounties.columns=['total_cases']\ncounties","8ab59fcd":"**I have grouped data by State and calculated the total deaths each State uptil 2020-07-09**","89ca9bfc":"**I have grouped data by State and calculated the total cases of each State up till 2020-07-09**","303e1a2b":"# Data of US corona virus cases uptil 2020-07-09"}}