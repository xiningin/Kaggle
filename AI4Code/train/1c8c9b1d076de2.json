{"cell_type":{"3a9b9e44":"code","6b43f8d1":"code","1a415415":"code","23f61155":"code","27fad51f":"code","cdb2cc11":"code","75b7bbda":"code","3d76aba7":"code","ad8fbf93":"code","de41d50a":"code","a23a05eb":"code","6b481302":"code","3fb67447":"code","b80ed879":"code","1fb6d88c":"code","a8af193c":"code","812ecf97":"code","67068968":"code","e3320482":"code","cd3001ad":"code","21cf210c":"code","a2873f0f":"code","5cd98dc6":"code","d846c6c2":"code","48f4b597":"code","eaeb0ce3":"code","a1c6a781":"code","6c046e38":"code","231ad0b0":"code","ecbbc944":"code","552cfc29":"code","95c128c0":"code","69728afa":"code","4567d8e5":"markdown","ac09419f":"markdown","cd6e72ee":"markdown","52070fc2":"markdown","8a2c9b1c":"markdown","3ec30a88":"markdown","dcdf0341":"markdown","b8f2f30d":"markdown","71d5d9a9":"markdown","45c79052":"markdown","755d4f56":"markdown","c55b8112":"markdown","2cb093b8":"markdown","90b9f1e5":"markdown","9ae9350d":"markdown","4606d0db":"markdown","81c6ec64":"markdown","ee314275":"markdown","7443a4b5":"markdown","cd6ed436":"markdown","3ad7bb60":"markdown","123e3fd6":"markdown","d40052c2":"markdown","0634ce35":"markdown","ca5a32af":"markdown","6fa7eaf7":"markdown"},"source":{"3a9b9e44":"import warnings\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras import optimizers\nfrom keras.utils import plot_model\nfrom keras.models import Sequential, Model\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D\nfrom keras.layers import Dense, LSTM, RepeatVector, TimeDistributed, Flatten\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\n\n# Set seeds to make the experiment more reproducible.\nfrom tensorflow import set_random_seed\nfrom numpy.random import seed\nset_random_seed(1)\nseed(1)","6b43f8d1":"train = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv', parse_dates=['date'])\ntest = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/test.csv', parse_dates=['date'])","1a415415":"train.describe()","23f61155":"train.head()","27fad51f":"print('Min date from train set: %s' % train['date'].min().date())\nprint('Max date from train set: %s' % train['date'].max().date())","cdb2cc11":"lag_size = (test['date'].max().date() - train['date'].max().date()).days\nprint('Max date from train set: %s' % train['date'].max().date())\nprint('Max date from test set: %s' % test['date'].max().date())\nprint('Forecast lag size', lag_size)","75b7bbda":"daily_sales = train.groupby('date', as_index=False)['sales'].sum()\nstore_daily_sales = train.groupby(['store', 'date'], as_index=False)['sales'].sum()\nitem_daily_sales = train.groupby(['item', 'date'], as_index=False)['sales'].sum()","3d76aba7":"daily_sales_sc = go.Scatter(x=daily_sales['date'], y=daily_sales['sales'])\nlayout = go.Layout(title='Daily sales', xaxis=dict(title='Date'), yaxis=dict(title='Sales'))\nfig = go.Figure(data=[daily_sales_sc], layout=layout)\niplot(fig)","ad8fbf93":"store_daily_sales_sc = []\nfor store in store_daily_sales['store'].unique():\n    current_store_daily_sales = store_daily_sales[(store_daily_sales['store'] == store)]\n    store_daily_sales_sc.append(go.Scatter(x=current_store_daily_sales['date'], y=current_store_daily_sales['sales'], name=('Store %s' % store)))\n\nlayout = go.Layout(title='Store daily sales', xaxis=dict(title='Date'), yaxis=dict(title='Sales'))\nfig = go.Figure(data=store_daily_sales_sc, layout=layout)\niplot(fig)","de41d50a":"item_daily_sales_sc = []\nfor item in item_daily_sales['item'].unique():\n    current_item_daily_sales = item_daily_sales[(item_daily_sales['item'] == item)]\n    item_daily_sales_sc.append(go.Scatter(x=current_item_daily_sales['date'], y=current_item_daily_sales['sales'], name=('Item %s' % item)))\n\nlayout = go.Layout(title='Item daily sales', xaxis=dict(title='Date'), yaxis=dict(title='Sales'))\nfig = go.Figure(data=item_daily_sales_sc, layout=layout)\niplot(fig)","a23a05eb":"train = train[(train['date'] >= '2017-01-01')]","6b481302":"train_gp = train.sort_values('date').groupby(['item', 'store', 'date'], as_index=False)\ntrain_gp = train_gp.agg({'sales':['mean']})\ntrain_gp.columns = ['item', 'store', 'date', 'sales']\ntrain_gp.head()","3fb67447":"def series_to_supervised(data, window=1, lag=1, dropnan=True):\n    cols, names = list(), list()\n    # Input sequence (t-n, ... t-1)\n    for i in range(window, 0, -1):\n        cols.append(data.shift(i))\n        names += [('%s(t-%d)' % (col, i)) for col in data.columns]\n    # Current timestep (t=0)\n    cols.append(data)\n    names += [('%s(t)' % (col)) for col in data.columns]\n    # Target timestep (t=lag)\n    cols.append(data.shift(-lag))\n    names += [('%s(t+%d)' % (col, lag)) for col in data.columns]\n    # Put it all together\n    agg = pd.concat(cols, axis=1)\n    agg.columns = names\n    # Drop rows with NaN values\n    if dropnan:\n        agg.dropna(inplace=True)\n    return agg","b80ed879":"window = 29\nlag = lag_size\nseries = series_to_supervised(train_gp.drop('date', axis=1), window=window, lag=lag)\nseries.head()","1fb6d88c":"last_item = 'item(t-%d)' % window\nlast_store = 'store(t-%d)' % window\nseries = series[(series['store(t)'] == series[last_store])]\nseries = series[(series['item(t)'] == series[last_item])]","a8af193c":"columns_to_drop = [('%s(t+%d)' % (col, lag)) for col in ['item', 'store']]\nfor i in range(window, 0, -1):\n    columns_to_drop += [('%s(t-%d)' % (col, i)) for col in ['item', 'store']]\nseries.drop(columns_to_drop, axis=1, inplace=True)\nseries.drop(['item(t)', 'store(t)'], axis=1, inplace=True)","812ecf97":"# Label\nlabels_col = 'sales(t+%d)' % lag_size\nlabels = series[labels_col]\nseries = series.drop(labels_col, axis=1)\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(series, labels.values, test_size=0.4, random_state=0)\nprint('Train set shape', X_train.shape)\nprint('Validation set shape', X_valid.shape)\nX_train.head()","67068968":"epochs = 40\nbatch = 256\nlr = 0.0003\nadam = optimizers.Adam(lr)","e3320482":"model_mlp = Sequential()\nmodel_mlp.add(Dense(100, activation='relu', input_dim=X_train.shape[1]))\nmodel_mlp.add(Dense(1))\nmodel_mlp.compile(loss='mse', optimizer=adam)\nmodel_mlp.summary()","cd3001ad":"mlp_history = model_mlp.fit(X_train.values, Y_train, validation_data=(X_valid.values, Y_valid), epochs=epochs, verbose=2)","21cf210c":"X_train_series = X_train.values.reshape((X_train.shape[0], X_train.shape[1], 1))\nX_valid_series = X_valid.values.reshape((X_valid.shape[0], X_valid.shape[1], 1))\nprint('Train set shape', X_train_series.shape)\nprint('Validation set shape', X_valid_series.shape)","a2873f0f":"model_cnn = Sequential()\nmodel_cnn.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(X_train_series.shape[1], X_train_series.shape[2])))\nmodel_cnn.add(MaxPooling1D(pool_size=2))\nmodel_cnn.add(Flatten())\nmodel_cnn.add(Dense(50, activation='relu'))\nmodel_cnn.add(Dense(1))\nmodel_cnn.compile(loss='mse', optimizer=adam)\nmodel_cnn.summary()","5cd98dc6":"cnn_history = model_cnn.fit(X_train_series, Y_train, validation_data=(X_valid_series, Y_valid), epochs=epochs, verbose=2)","d846c6c2":"model_lstm = Sequential()\nmodel_lstm.add(LSTM(50, activation='relu', input_shape=(X_train_series.shape[1], X_train_series.shape[2])))\nmodel_lstm.add(Dense(1))\nmodel_lstm.compile(loss='mse', optimizer=adam)\nmodel_lstm.summary()","48f4b597":"lstm_history = model_lstm.fit(X_train_series, Y_train, validation_data=(X_valid_series, Y_valid), epochs=epochs, verbose=2)","eaeb0ce3":"subsequences = 2\ntimesteps = X_train_series.shape[1]\/\/subsequences\nX_train_series_sub = X_train_series.reshape((X_train_series.shape[0], subsequences, timesteps, 1))\nX_valid_series_sub = X_valid_series.reshape((X_valid_series.shape[0], subsequences, timesteps, 1))\nprint('Train set shape', X_train_series_sub.shape)\nprint('Validation set shape', X_valid_series_sub.shape)","a1c6a781":"model_cnn_lstm = Sequential()\nmodel_cnn_lstm.add(TimeDistributed(Conv1D(filters=64, kernel_size=1, activation='relu'), input_shape=(None, X_train_series_sub.shape[2], X_train_series_sub.shape[3])))\nmodel_cnn_lstm.add(TimeDistributed(MaxPooling1D(pool_size=2)))\nmodel_cnn_lstm.add(TimeDistributed(Flatten()))\nmodel_cnn_lstm.add(LSTM(50, activation='relu'))\nmodel_cnn_lstm.add(Dense(1))\nmodel_cnn_lstm.compile(loss='mse', optimizer=adam)","6c046e38":"cnn_lstm_history = model_cnn_lstm.fit(X_train_series_sub, Y_train, validation_data=(X_valid_series_sub, Y_valid), epochs=epochs, verbose=2)","231ad0b0":"fig, axes = plt.subplots(2, 2, sharex=True, sharey=True,figsize=(22,12))\nax1, ax2 = axes[0]\nax3, ax4 = axes[1]\n\nax1.plot(mlp_history.history['loss'], label='Train loss')\nax1.plot(mlp_history.history['val_loss'], label='Validation loss')\nax1.legend(loc='best')\nax1.set_title('MLP')\nax1.set_xlabel('Epochs')\nax1.set_ylabel('MSE')\n\nax2.plot(cnn_history.history['loss'], label='Train loss')\nax2.plot(cnn_history.history['val_loss'], label='Validation loss')\nax2.legend(loc='best')\nax2.set_title('CNN')\nax2.set_xlabel('Epochs')\nax2.set_ylabel('MSE')\n\nax3.plot(lstm_history.history['loss'], label='Train loss')\nax3.plot(lstm_history.history['val_loss'], label='Validation loss')\nax3.legend(loc='best')\nax3.set_title('LSTM')\nax3.set_xlabel('Epochs')\nax3.set_ylabel('MSE')\n\nax4.plot(cnn_lstm_history.history['loss'], label='Train loss')\nax4.plot(cnn_lstm_history.history['val_loss'], label='Validation loss')\nax4.legend(loc='best')\nax4.set_title('CNN-LSTM')\nax4.set_xlabel('Epochs')\nax4.set_ylabel('MSE')\n\nplt.show()","ecbbc944":"mlp_train_pred = model_mlp.predict(X_train.values)\nmlp_valid_pred = model_mlp.predict(X_valid.values)\nprint('Train rmse:', np.sqrt(mean_squared_error(Y_train, mlp_train_pred)))\nprint('Validation rmse:', np.sqrt(mean_squared_error(Y_valid, mlp_valid_pred)))","552cfc29":"cnn_train_pred = model_cnn.predict(X_train_series)\ncnn_valid_pred = model_cnn.predict(X_valid_series)\nprint('Train rmse:', np.sqrt(mean_squared_error(Y_train, cnn_train_pred)))\nprint('Validation rmse:', np.sqrt(mean_squared_error(Y_valid, cnn_valid_pred)))","95c128c0":"lstm_train_pred = model_lstm.predict(X_train_series)\nlstm_valid_pred = model_cnn.predict(X_valid_series)\nprint('Train rmse:', np.sqrt(mean_squared_error(Y_train, lstm_train_pred)))\nprint('Validation rmse:', np.sqrt(mean_squared_error(Y_valid, lstm_valid_pred)))","69728afa":"cnn_lstm_train_pred = model_cnn_lstm.predict(X_train_series_sub)\ncnn_lstm_valid_pred = model_cnn_lstm.predict(X_valid_series_sub)\nprint('Train rmse:', np.sqrt(mean_squared_error(Y_train, cnn_lstm_train_pred)))\nprint('Validation rmse:', np.sqrt(mean_squared_error(Y_valid, cnn_lstm_valid_pred)))","4567d8e5":"### Transform the data into a time series problem","ac09419f":"### CNN for Time Series Forecasting\n\n* For the CNN model we will use one convolutional hidden layer followed by a max pooling layer. The filter maps are then flattened before being interpreted by a Dense layer and outputting a prediction.\n* The convolutional layer should be able to identify patterns between the timesteps.\n* Input shape **[samples, timesteps, features]**.\n\n#### Data preprocess\n* Reshape from [samples, timesteps] into [samples, timesteps, features].\n* This same reshaped data will be used on the CNN and the LSTM model.","cd6e72ee":"### Loading data","52070fc2":"### Train\/validation split","8a2c9b1c":"### LSTM for Time Series Forecasting\n\n* Now the LSTM model actually sees the input data as a sequence, so it's able to learn patterns from sequenced data (assuming it exists) better than the other ones, especially patterns from long sequences.\n* Input shape **[samples, timesteps, features]**.","3ec30a88":"### Daily sales by item","dcdf0341":"#### MLP on train and validation","b8f2f30d":"#### Remove unwanted columns","71d5d9a9":"### Conclusion\n\nHere you could see some approaches to a time series problem, how to develop and the differences between them, this is not meant to have a great performance, so if you want better results, you are more than welcomed to try a few different hyper-parameters, especially the window size and the networks topology, if you do, please let me know the results.\n\nI hope you learned a few things here, leave a feedback and if you liked what you saw make sure to check the [article](https:\/\/machinelearningmastery.com\/how-to-get-started-with-deep-learning-for-time-series-forecasting-7-day-mini-course\/) that I used as source.\n\nIf you want to check out how you can use LSTM as autoencoders and create new features that represent a time series take a look at my other kernel [Time-series forecasting with deep learning & LSTM autoencoders](https:\/\/www.kaggle.com\/dimitreoliveira\/time-series-forecasting-with-lstm-autoencoders\/data).","45c79052":"### Basic EDA\n\nTo explore the time series data first we need to aggregate the sales by day","755d4f56":"### Daily sales by store","c55b8112":"### CNN-LSTM for Time Series Forecasting\n* Input shape **[samples, subsequences, timesteps, features]**.\n\n#### Model explanation from the [article](https:\/\/machinelearningmastery.com\/how-to-get-started-with-deep-learning-for-time-series-forecasting-7-day-mini-course\/)\n> \"The benefit of this model is that the model can support very long input sequences that can be read as blocks or subsequences by the CNN model, then pieced together by the LSTM model.\"\n>\n> \"When using a hybrid CNN-LSTM model, we will further divide each sample into further subsequences. The CNN model will interpret each sub-sequence and the LSTM will piece together the interpretations from the subsequences. As such, we will split each sample into 2 subsequences of 2 times per subsequence.\"\n>\n> \"The CNN will be defined to expect 2 timesteps per subsequence with one feature. The entire CNN model is then wrapped in TimeDistributed wrapper layers so that it can be applied to each subsequence in the sample. The results are then interpreted by the LSTM layer before the model outputs a prediction.\"\n\n#### Data preprocess\n* Reshape from [samples, timesteps, features] into [samples, subsequences, timesteps, features].","2cb093b8":"### Overall daily sales","90b9f1e5":"#### Let's find out what's the time gap between the last day from training set from the last day of the test set, this will be out lag (the amount of day that need to be forecast)","9ae9350d":"#### CNN on train and validation","4606d0db":"### Rearrange dataset so we can apply shift methods","81c6ec64":"### Time period of the train dataset","ee314275":"#### We will use the current timestep and the last 29 to forecast 90 days ahead","7443a4b5":"#### LSTM on train and validation","cd6ed436":"#### Sub-sample train set to get only the last year of data and reduce training time","3ad7bb60":"#### Drop rows with different item or store values than the shifted columns","123e3fd6":"<h2><center>Deep Learning for Time Series Forecasting<\/center><\/h2>\n\n<img src=\"https:\/\/raw.githubusercontent.com\/dimitreOliveira\/MachineLearning\/master\/Kaggle\/Store%20Item%20Demand%20Forecasting%20Challenge\/time-series%20graph.png\" width=\"800\">\n\n### The goal of this notebook is to develop and compare different approaches to time-series problems.\n\n#### Content:\n* [Time series visualization with ploty](#Basic-EDA).\n* [How to transform a time series dataset into a supervised learning problem](#Transform-the-data-into-a-time-series-problem).\n* [How to develop a Multilayer Perceptron model for a univariate time series forecasting problem](#MLP-for-Time-Series-Forecasting).\n* [How to develop a Convolutional Neural Network model for a univariate time series forecasting problem](#CNN-for-Time-Series-Forecasting).\n* [How to develop a Long Short-Term Memory network model for a univariate time series forecasting problem](#LSTM-for-Time-Series-Forecasting).\n* [How to develop a Hybrid CNN-LSTM model for a univariate time series forecasting problem](#CNN-LSTM-for-Time-Series-Forecasting).\n\n#### The content here was inspired by this article at **machinelearningmastery.com**, [How to Get Started with Deep Learning for Time Series Forecasting (7-Day Mini-Course)](https:\/\/machinelearningmastery.com\/how-to-get-started-with-deep-learning-for-time-series-forecasting-7-day-mini-course\/)\n\n#### Dependencies","d40052c2":"#### CNN-LSTM on train and validation","0634ce35":"### Comparing models","ca5a32af":"### MLP for Time Series Forecasting\n\n* First we will use a Multilayer Perceptron model or MLP model, here our model will have input features equal to the window size.\n* The thing with MLP models is that the model don't take the input as sequenced data, so for the model, it is just receiving inputs and don't treat them as sequenced data, that may be a problem since the model won't see the data with the sequence patter that it has.\n* Input shape **[samples, timesteps]**.","6fa7eaf7":"### Train set"}}