{"cell_type":{"188d703e":"code","9d579d77":"code","6746a235":"code","02256f5e":"code","a5579990":"code","ad7aa376":"code","5f2becda":"code","243f53e2":"code","da9df69d":"code","0538061d":"code","23f30f77":"code","14c674e8":"code","cc684b6c":"code","32e6a5ad":"code","cb73fda8":"code","4b9598f2":"code","7887ee17":"code","73070fa2":"code","006dc422":"code","4c1e6ea8":"code","9b4719fc":"code","c3d08ec8":"code","1edfb0e0":"code","356115fe":"code","8e78da03":"code","fa9eca60":"code","4f9dfbe8":"code","71b3d59e":"code","307a0c42":"code","0e3d3357":"code","461be937":"code","bcbf1360":"code","11cb884f":"code","99f305d5":"markdown","e131396f":"markdown","da21b947":"markdown","0aade200":"markdown","353d4296":"markdown","9207f07a":"markdown","2e5fee89":"markdown"},"source":{"188d703e":"!pip install kaggle","9d579d77":"!pip install optuna","6746a235":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\n# import lightgbm as lgb\n# import optuna\nimport optuna.integration.lightgbm as lgb_o\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","02256f5e":"from google.colab import files\n\nuploaded = files.upload()\n\nfor fn in uploaded.keys():\n    print('User uploaded file \"{name}\" with length {length} bytes'.format(\n        name=fn, length=len(uploaded[fn])))\n\n# Then move kaggle.json into the folder where the API expects to find it. ##\n!mkdir -p ~\/.kaggle\/ && mv kaggle.json ~\/.kaggle\/ && chmod 600 ~\/.kaggle\/kaggle.json","a5579990":"!kaggle competitions list","ad7aa376":"!kaggle competitions download -c ventilator-pressure-prediction","5f2becda":"DEBUG = False","243f53e2":"train = pd.read_csv(r'..\/content\/train.csv.zip')\ntest  = pd.read_csv(r'..\/content\/test.csv.zip')\nsubmission = pd.read_csv(r'..\/content\/sample_submission.csv.zip')","da9df69d":"# train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\n# test  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n# submission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","0538061d":"if DEBUG:\n    train = train[:80*1000]","23f30f77":"train.shape, test.shape, submission.shape","14c674e8":"train","cc684b6c":"train.describe()","32e6a5ad":"test['pressure'] = 0","cb73fda8":"test","4b9598f2":"test.describe()","7887ee17":"def add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df = df.fillna(0)\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    \n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df = pd.get_dummies(df)\n    return df","73070fa2":"train = add_features(train)\ntest = add_features(test)","006dc422":"train","4c1e6ea8":"train.shape","9b4719fc":"test","c3d08ec8":"test.shape","1edfb0e0":"X, y = train.drop('pressure', axis=1), train['pressure']\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state = 0)\nX_test, y_test = test.drop('pressure', axis=1), test['pressure']","356115fe":"import lightgbm as lgbm\n\n# lightGBM\u7528\u306e\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3059\u308b\ntrains = lgbm.Dataset(X_train, y_train, free_raw_data=False)\nvalids = lgbm.Dataset(X_val, y_val, free_raw_data=False)\ntests  = lgbm.Dataset(X_test, y_test, free_raw_data=False)","8e78da03":"params = {\n    'objective': 'regression',\n    'metric': 'mae'\n}","fa9eca60":"best_params = {}\nmodel = lgb_o.train(params, trains, valid_sets = valids,\n                    verbose_eval = False,\n                    num_boost_round = 100,\n                    early_stopping_rounds = 5,\n                    #best_params = best_params,\n                    #tuning_history = tuning_history,\n)","4f9dfbe8":"best_params = model.params\nbest_params","71b3d59e":"# \u8abf\u6574\u5f8c\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u306e\u5b9f\u884c\nimport lightgbm as lgb_original\n\nmodel = lgb_original.train(best_params, trains, num_boost_round=100)\npredicts = model.predict(X_test)\n#best_r2 = r2_score(y_test, predicts)","307a0c42":"predicts","0e3d3357":"submission['pressure'] = predicts","461be937":"submission.to_csv('.\/submission.csv', index = False)\nprint('.\/submission.csv')","bcbf1360":"submission","11cb884f":"!kaggle competitions submit -c ventilator-pressure-prediction -f submission.csv -m \"Message\"","99f305d5":"## Export","e131396f":"## Light GBM && Optuna","da21b947":"### Prediction","0aade200":"![best_params.PNG](attachment:2f96a087-322e-453e-884c-f939f6d152bc.PNG)","353d4296":"## Libraries","9207f07a":"![sub.PNG](attachment:04ed86ff-b98a-4168-9d4e-722385f8cb03.PNG)","2e5fee89":"## Add Feature"}}