{"cell_type":{"c608829b":"code","ca9f26c5":"code","4d1feb98":"code","0ba5e3f0":"code","12c6df36":"code","3edee7d7":"code","dbe2cea4":"code","e7fff9a0":"code","54e3f8bf":"code","c07a1b5f":"markdown","c996dd06":"markdown","4d7e7288":"markdown","449a9fc7":"markdown","70d928c3":"markdown","b00ccb09":"markdown","f000a11d":"markdown"},"source":{"c608829b":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.simplefilter('ignore')","ca9f26c5":"filepath = '..\/input\/weather-dataset-rattle-package\/weatherAUS.csv'\ndf = pd.read_csv(filepath, index_col='Date')\n\ndf.head()","4d1feb98":"df.info()","0ba5e3f0":"null_cols = []\n\nfor col in df:\n    null_values = df[col].isnull().sum()\n    print(f\"Null values in {col}: {null_values}\")\n    if null_values > 30000:\n        null_cols.append(col)\n    \nprint(f\"\\n{null_cols}\")\ndf.drop(null_cols, axis=1, inplace=True)","12c6df36":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\nnumerical_cols = [col for col in df if df[col].dtype in ['int64', 'float64']]\ncategorical_cols = [col for col in df if df[col].dtype == 'object']\n\ncolumns = df.columns\nimputer = SimpleImputer(strategy='most_frequent')\ndf = pd.DataFrame(imputer.fit_transform(df))\ndf.columns = columns\n\nencoder = LabelEncoder()\nfor col in df:\n    if col in categorical_cols:\n        df[col] = encoder.fit_transform(df[col])\n        df[col].astype('int64')\n    elif col in numerical_cols:\n        df[col] = df[col].infer_objects()\n    \ndf.info()","3edee7d7":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n\ndef get_mae(model, X_train, X_test, y_train, y_test):\n    \"\"\"A function that returns the Mean Absolute Error\"\"\"\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    mae = mean_absolute_error(preds, y_test)\n    return mae","dbe2cea4":"from sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\nmodel_1 = RandomForestClassifier(n_estimators=50, random_state=0)\nmodel_2 = RandomForestClassifier(n_estimators=100, random_state=0)\nmodel_3 = RandomForestClassifier(n_estimators=150, random_state=0)\nmodel_4 = XGBClassifier(n_estimators=100, learning_rate=0.05)\nmodel_5 = XGBClassifier(n_estimators=300, learning_rate=0.05)\nmodel_6 = XGBClassifier(n_estimators=600, learning_rate=0.05)\n\nmodels = [model_1, model_2, model_3, model_4, model_5, model_6]","e7fff9a0":"from sklearn.model_selection import train_test_split\n\ny = df['RainTomorrow']\nfeatures = ['Location', 'MinTemp', 'MaxTemp', 'Rainfall', 'WindGustDir', \n            'WindGustSpeed', 'WindDir9am', 'WindDir3pm', 'WindSpeed9am', \n            'WindSpeed3pm', 'Humidity9am', 'Humidity3pm', 'Pressure9am', \n            'Pressure3pm', 'Temp9am', 'Temp3pm', 'RainToday']\nX = df[features]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8)\n\ni = 1\nfor model in models:\n    score = get_mae(model, X_train, X_test, y_train, y_test)\n    print(f\"Score for model {i}: {score}\")\n    i += 1","54e3f8bf":"from sklearn.metrics import classification_report\n\nmodel = XGBClassifier(n_estimators=600, learning_rate=0.05)\n\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\nprint(classification_report(y_test, preds))\n\noutput = pd.DataFrame({'Rarin_data': y_test.iloc[:], 'Rain_preds': preds})\noutput.to_csv('output.csv', index=False)","c07a1b5f":"# Null values","c996dd06":"# Tests","4d7e7288":"# Models","449a9fc7":"# Final model","70d928c3":"# Importing data","b00ccb09":"# Preprocessing","f000a11d":"**Mean Absolute Error**"}}