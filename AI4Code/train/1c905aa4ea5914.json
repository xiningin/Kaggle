{"cell_type":{"2b1cdfc7":"code","c28e8945":"code","cf458b6c":"code","a5b4935d":"code","b84fb608":"code","14882ada":"code","1767ce9e":"code","3f411715":"code","e29b2d62":"code","7180b2a7":"markdown"},"source":{"2b1cdfc7":"# You may need to uncomment and run the conda install. Then restart the notebook if GDCM pukes.\n#!conda install gdcm -c conda-forge -y","c28e8945":"import os\nfrom os import path\nimport numpy as np\nimport pydicom\nfrom IPython.display import clear_output\nimport cv2\nfrom skimage.filters import unsharp_mask\nfrom skimage import exposure","cf458b6c":"img_size = 512\nbase_path = \"..\/input\/siim-covid19-detection\"\noutput_path = \".\/siim-covid19-detection-processed-512\"","a5b4935d":"def make_dirs():\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n        \n    if not os.path.exists(output_path + \"\/test\"):\n        os.makedirs(output_path + \"\/test\")\n\n    if not os.path.exists(output_path + \"\/train\"):\n        os.makedirs(output_path + \"\/train\")","b84fb608":"# Apply unsharp mask and hist eq\ndef process_image(pixels):\n\n    unsharp_image = unsharp_mask(pixels, radius=5, amount=1)\n    equalized_image = exposure.equalize_hist(pixels)\n    \n    return equalized_image","14882ada":"# Get a DICOM file and apply stuff to the pixels\ndef load_image(file_in, file_out):\n    \n    clear_output(wait=True)\n    img = pydicom.dcmread(file_in)   \n    \n    pixels = img.pixel_array            \n    if img.PhotometricInterpretation == \"MONOCHROME1\":\n        pixels = np.amax(pixels) - pixels\n        \n    pixels = remove_borders(pixels)\n    pixels = unsharp_image(pixels)\n    pixels = pixels - np.min(pixels)\n    pixels = pixels \/ np.max(pixels)\n    pixels = (pixels * 255).astype(np.uint8)\n    \n    print(\": \" + file_out)\n    cv2.imwrite(file_out, pixels)","1767ce9e":"# Function to remove borders\ndef remove_borders(pixels):\n    \n    img_orig = pixels\n\n    x = 0\n    y = 0\n    w = pixels.shape[1]\n    h = pixels.shape[0]\n\n    for i in range(h):\n        if not np.all(pixels[i] == pixels[i][0]):\n            y = i\n            break\n              \n    for i in range(h-1, 0, -1):\n        if not np.all(pixels[i] == pixels[i][0]):\n            h = i\n            break\n            \n    pixels = pixels[y:h,x:w] \n    pixels = np.rot90(pixels)\n    \n    w = pixels.shape[1]\n    h = pixels.shape[0]\n\n    for i in range(h):\n        if not np.all(pixels[i] == pixels[i][0]):\n            y = i\n            break\n              \n    for i in range(h-1, 0, -1):\n        if not np.all(pixels[i] == pixels[i][0]):\n            h = i\n            break\n            \n    pixels = pixels[y:h,x:w]\n    img_cropped = np.rot90(pixels, 3)\n    return img_cropped","3f411715":"# Loop through the directories and grab the images\ndef export_images():\n    \n    for tt in ['train', 'test']:\n        count = 0\n        \n        for study_dir in os.listdir(base_path + \"\/\" + tt):\n\n            if not os.path.exists(output_path + \"\/\" + tt + \"\/\" + study_dir):       \n                os.makedirs(output_path + \"\/\" + tt + \"\/\" + study_dir)\n\n            for series_dir in os.listdir(base_path + \"\/\" + tt + \"\/\" + study_dir):\n\n                if not os.path.exists(output_path + \"\/\" + tt + \"\/\" + study_dir + \"\/\" + series_dir):       \n                    os.makedirs(output_path + \"\/\" + tt + \"\/\" + study_dir + \"\/\" + series_dir)\n\n                for image in os.listdir(base_path + \"\/\" + tt + \"\/\" + study_dir + \"\/\" + series_dir):\n                    im = image.split(\".\")\n\n                    file_in = base_path + \"\/\" + tt + \"\/\" + study_dir + \"\/\" + series_dir + \"\/\" + image\n                    file_out = output_path + \"\/\" + tt + \"\/\" + study_dir + \"\/\" + series_dir + \"\/\" + im[0] + \".jpg\"\n                    \n                    img = pydicom.dcmread(file_in)\n                    pixels = img.pixel_array        \n                    \n                    if img.PhotometricInterpretation == \"MONOCHROME1\":\n                        pixels = np.amax(pixels) - pixels\n                    \n                    # Apply some processing\n                    pixels = remove_borders(pixels)      \n                    pixels = process_image(pixels)\n                    pixels = pixels - np.min(pixels)\n                    pixels = (pixels * 255).astype(np.uint8)\n\n                    cv2.imwrite(file_out, pixels)\n\n                    clear_output(wait=True)\n                    print(str(count) + \": \" + file_out)\n                    count += 1\n            \n    print(\"Done exporting \" + str(count) + \" \" + tt + \" images.\")","e29b2d62":"#make_dirs()\n#export_images()","7180b2a7":"<div class=\"alert alert-info\">\n    <h1 align=\"center\">DICOM-2-JPEG 512px (with processing)<\/h1>\n<\/div>\n\n#### This notebook exports the SIIM-Covid19-Detection train and test DICOM datasets to JPG\n- Image output dimension: 512\n- Exported to same directory structure as original files\n- Filter applied: Unsharp mask\n- Reshaping: Border cropping\n- Leveling: Histogram Equalization\n\nThis notebook explains the process -> https:\/\/www.kaggle.com\/davidbroberts\/standardizing-cxr-datasets\n\nI commented out the `make_dirs()` and `export_images()` method calls at the bottom for saving purposes. Uncomment them to write files to your `\/kaggle\/working\/` directory.\n\nWith an image size setting of 512, this will create just under 19.5G of data. Any bigger and you'll have to upgrade google storage.\n\nHere's a dataset I exported with this notebook -> https:\/\/www.kaggle.com\/davidbroberts\/siimcovid-jpg-512-processed\n\nYou'll need to add BB scaling to use these images for object detection. This notebook explains how to do it -> https:\/\/www.kaggle.com\/davidbroberts\/bounding-boxes-on-cropped-images\n\n... And this is what the exported images look like ..\n\n#### Before processing\n![export1.jpg](attachment:c11ccf4e-589e-464e-a656-27d47a4543ee.jpg)\n\n#### After processing\n![export2.jpg](attachment:9c022646-1bc6-4c5a-ad30-e5b8299fff46.jpg)\n"}}