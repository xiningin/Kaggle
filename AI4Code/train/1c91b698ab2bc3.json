{"cell_type":{"355190c7":"code","f5bdd0c6":"code","57c93b22":"code","906f3c31":"code","dbc59e70":"code","5c4a663a":"code","7f59ee90":"code","76af3f99":"code","85036345":"code","4206eaf8":"code","65440247":"code","ba30dc16":"code","fc631b38":"code","9fe3cdc2":"code","a77d3080":"code","688e92ef":"code","19fe4e82":"code","7069a59e":"code","9b53235d":"code","89b488ed":"markdown","6232d65e":"markdown","3a0f2055":"markdown","5bfe8422":"markdown","112c758c":"markdown","3d690eca":"markdown","42ace595":"markdown","48ad4d10":"markdown","3e3f38ea":"markdown","22646a1d":"markdown"},"source":{"355190c7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f5bdd0c6":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\nfrom plotly.offline import init_notebook_mode\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n!pip install catboost","57c93b22":"dataset = pd.read_csv(\n    \"\/kaggle\/input\/car-evaluation-data-set\/car_evaluation.csv\",\n    header=None,\n    names=[\"buying price\", \"maintenance cost\", \"number of doors\", \"number of persons\", \"lug_boot\", \"safety\", \"decision\"])\ndataset.head()","906f3c31":"dataset.info()","dbc59e70":"dataset.isnull().sum()","5c4a663a":"for col in dataset.columns:\n    print(dataset[col].value_counts())\n    print(\"-\" * 40)","7f59ee90":"sns.countplot(x=\"buying price\", hue=\"decision\", data=dataset)","76af3f99":"sns.countplot(x=\"safety\", hue=\"decision\", data=dataset)","85036345":"dataset.head()","4206eaf8":"X = dataset.drop(\"decision\", axis=1)\ny = dataset.decision","65440247":"X = pd.get_dummies(X)\nX.head()","ba30dc16":"y = y.replace(\n    {\n        \"unacc\" : 0,\n        \"acc\" : 1,\n        \"good\" : 2,\n        \"vgood\" : 3\n    }\n)\ny.value_counts()","fc631b38":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)","9fe3cdc2":"from sklearn import svm, tree, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","a77d3080":"MLA = [\n    #Ensemble Methods\n    ensemble.AdaBoostClassifier(),\n    ensemble.BaggingClassifier(),\n    ensemble.ExtraTreesClassifier(),\n    ensemble.GradientBoostingClassifier(),\n    ensemble.RandomForestClassifier(),\n\n    #Gaussian Processes\n    gaussian_process.GaussianProcessClassifier(),\n    \n    #GLM\n    linear_model.PassiveAggressiveClassifier(),\n    linear_model.RidgeClassifierCV(),\n    linear_model.SGDClassifier(),\n    linear_model.Perceptron(),\n    \n    #Navies Bayes\n    naive_bayes.BernoulliNB(),\n    naive_bayes.GaussianNB(),\n    \n    #Nearest Neighbor\n    neighbors.KNeighborsClassifier(),\n    \n    #SVM\n    svm.SVC(probability=True),\n    svm.LinearSVC(),\n    \n    #Trees    \n    tree.DecisionTreeClassifier(),\n    tree.ExtraTreeClassifier(),\n    \n    #Discriminant Analysis\n    discriminant_analysis.LinearDiscriminantAnalysis(),\n    discriminant_analysis.QuadraticDiscriminantAnalysis(),\n\n    XGBClassifier(),\n    CatBoostClassifier()  \n    ]","688e92ef":"row_num = 0\nMLA_compare = pd.DataFrame()\n\nfor classifier in MLA:\n  classifier.fit(X_train, y_train) # Training Classifier with Default Hyperparameters\n\n  y_pred = classifier.predict(X_test) # Getting Prediction for testing data\n  classifier_accuracy_score = accuracy_score(y_test, y_pred) # Calculating Accuracy Score for test Predictions\n\n  kfold_accuracy = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10) # Using crossvalscore for unbaised Accuracy Score\n\n  # Adding the above gatthered data into a pandas DataFrame\n  MLA_name = classifier.__class__.__name__\n  MLA_compare.loc[row_num, 'MLA Name'] = MLA_name\n  MLA_compare.loc[row_num, 'Accuracy Score'] = classifier_accuracy_score*100\n  MLA_compare.loc[row_num, 'K-Fold Accuracy'] = kfold_accuracy.mean()*100\n\n  print(MLA_name, \"Done\")\n  row_num+=1","19fe4e82":"# Viewing Accuracy Scores in Descending Order of K-Fold Accuracy\nMLA_compare = MLA_compare.sort_values(by=\"K-Fold Accuracy\", ascending=False).reset_index(drop=True) \nMLA_compare[:10]","7069a59e":"import plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Bar(\n    x = MLA_compare[\"MLA Name\"],\n    y = MLA_compare[\"Accuracy Score\"],\n))\nfig.update_layout(\n  title=\"Comparing Accuracy Scores of Machine Learning Models\",\n  xaxis_title=\"Machine Learning Algorithm\",\n  yaxis_title=\"Accuracy Score\"\n)","9b53235d":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    x = MLA_compare[\"MLA Name\"],\n    y = MLA_compare[\"K-Fold Accuracy\"],\n))\nfig.update_layout(\n  title=\"Comparing K-Fold Accuracy Scores of Machine Learning Models\",\n  xaxis_title=\"Machine Learning Algorithm\",\n  yaxis_title=\"K_Fold Accuracy Score\"\n)","89b488ed":"## Splitting Data into Training and Testing set","6232d65e":"# Data Preprocessing","3a0f2055":"## Preparing Data for Model","5bfe8422":"## Testing Multiple Classification Models","112c758c":"## Importing Libraries","3d690eca":"# Model","42ace595":"### Count of Buying Prices seperated by Decision","48ad4d10":"### Count of Safety seperated by Decision","3e3f38ea":"## Checking for Null Values","22646a1d":"## EDA"}}