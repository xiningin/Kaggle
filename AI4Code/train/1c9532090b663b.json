{"cell_type":{"2891e1cd":"code","da9d3fe1":"code","a4f733ae":"code","ab1b47dd":"code","3a2a8582":"code","9a198931":"code","b72d50ec":"code","39ad36ca":"code","463a9f41":"code","993b0ed1":"code","aff64e4d":"code","c7c942a7":"code","1513c316":"code","ec78afef":"code","724c87c8":"code","ee1c6ca5":"code","e5640626":"code","11432ed7":"code","0f14fa87":"code","1e9a832c":"code","59d91b18":"code","05f35b73":"code","4edd4915":"code","4ca2578a":"code","832f253b":"code","a7d036b8":"code","2686e76c":"code","d028e3de":"code","ee457cea":"code","9adeb9c1":"code","d5ca630a":"code","e4d9b2e6":"code","734ed42e":"code","6b0fa297":"code","a203fd7c":"code","5472d5d9":"code","302e218a":"code","76cc7603":"code","14dc8476":"code","3ca34e66":"code","a07db970":"code","852be89e":"code","b426556b":"code","a4deb1ba":"code","6d7ad804":"code","0dc031b7":"code","6b1e9a37":"code","e59cbf41":"code","f800309f":"code","d89af641":"code","8994fd4b":"code","95381ac9":"code","b758b473":"code","4e56a55d":"code","dacc86b2":"code","cc9fdfe1":"code","203ee378":"code","cc017c8c":"code","aad99a1e":"code","ad5f3112":"code","29f6a4e2":"code","09c53841":"markdown","ff704d91":"markdown","68377805":"markdown","0279ab80":"markdown","604c34be":"markdown","8843156b":"markdown","f4a109ed":"markdown","5f08e1b0":"markdown","9422b1c8":"markdown","235f3e24":"markdown","c0ff575e":"markdown","e8068d70":"markdown","b61c4196":"markdown","ca8d4cb0":"markdown","0863bb56":"markdown","d276a730":"markdown","d7f9766a":"markdown","c739ffa2":"markdown","9f445c4c":"markdown","b2be7917":"markdown","31e777a1":"markdown","a2a9a2b7":"markdown","776f1938":"markdown","b7b4a495":"markdown","fdbe80b4":"markdown","a51e142d":"markdown"},"source":{"2891e1cd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","da9d3fe1":"!pip install seaborn --upgrade ","a4f733ae":"import numpy as np\nimport pandas as pd\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport glob\nimport seaborn as sns\nimport optuna\nfrom optuna.samplers import TPESampler\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, roc_auc_score\nfrom sklearn import metrics\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\n","ab1b47dd":"train = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/train.csv\")\nsample_submission = pd.read_csv(\"..\/input\/health-insurance-cross-sell-prediction\/sample_submission.csv\")","3a2a8582":"train","9a198931":"train.isnull().sum()","b72d50ec":"train.loc[(train['Gender'] ==\"Male\"), 'Gender'] = 0.0\ntrain.loc[(train['Gender'] ==\"Female\"), 'Gender'] = 1.0\ntrain.loc[(train['Vehicle_Age'] ==\"< 1 Year\"), 'Vehicle_Age'] = 0.0\ntrain.loc[(train['Vehicle_Age'] ==\"1-2 Year\"), 'Vehicle_Age'] = 1.0\ntrain.loc[(train['Vehicle_Age'] ==\"> 2 Years\"), 'Vehicle_Age'] = 2.0\ntrain.loc[(train['Vehicle_Damage'] ==\"No\"), 'Vehicle_Damage'] = 0.0\ntrain.loc[(train['Vehicle_Damage'] ==\"Yes\"), 'Vehicle_Damage'] = 1.0\n\ntrain=train.drop(['id'],axis=1)\ntrain[\"Vehicle_Damage\"] = pd.to_numeric(train[\"Vehicle_Damage\"])\ntrain[\"Vehicle_Age\"] = pd.to_numeric(train[\"Vehicle_Age\"])\ntrain[\"Gender\"] = pd.to_numeric(train[\"Gender\"])","39ad36ca":"train.head()","463a9f41":"total = float(len(train)) \nax = sns.countplot(x=\"Response\", data=train, palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","993b0ed1":"total = float(len(train)) \nax = sns.countplot(x=\"Gender\", data=train,hue=\"Response\", palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","aff64e4d":"total = float(len(train)) \nax = sns.countplot(x=\"Driving_License\", data=train,hue=\"Response\", palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","c7c942a7":"train['Driving_License'].value_counts()\n","1513c316":"total = float(len(train)) \nax = sns.countplot(x=\"Previously_Insured\", data=train,hue=\"Response\", palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","ec78afef":"total = float(len(train)) \nax = sns.countplot(x=\"Vehicle_Age\", data=train,hue=\"Response\", palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","724c87c8":"total = float(len(train)) \nax = sns.countplot(x=\"Vehicle_Damage\", data=train,hue=\"Response\", palette=\"tab10\") \nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}'.format(height\/total),\n            ha=\"center\") ","ee1c6ca5":"ContV= pd.concat([train['Age'], train['Annual_Premium'],train['Policy_Sales_Channel'],train['Vintage'],train['Region_Code'],train['Response']], axis=1)","e5640626":"sns.pairplot(ContV.sample(10000, random_state=0), hue=\"Response\", height=2.5)\n","11432ed7":"plt.figure(figsize=(16, 6))\nheatmap = sns.heatmap(train.corr(), vmin=-1, vmax=1, annot=True)\nheatmap.set_title('Correlation Heatmap', fontdict={'fontsize':12}, pad=12);","0f14fa87":"X=train.drop(['Response'],axis=1)\ny=train['Response']","1e9a832c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=12345)","59d91b18":"model_LR = LogisticRegression(random_state=12345)\nmodel_LR.fit(X_train, y_train)\npred_LR = model_LR.predict(X_test)\n","05f35b73":"print(accuracy_score(y_test, pred_LR))\nprint(f1_score(y_test, pred_LR))","4edd4915":"LR_score=accuracy_score(y_test, pred_LR)","4ca2578a":"# calculate the fpr and tpr for all thresholds of the classification\nprobs = model_LR.predict_proba(X_test)\npredp_LR = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, predp_LR)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","832f253b":"roc_auc_score(y_test,predp_LR)","a7d036b8":"sampler = TPESampler(seed=0)\ndef create_modelRF(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 20)\n    n_estimators = trial.suggest_int(\"n_estimators\", 2, 300)\n    min_samples_leaf = trial.suggest_int(\"min_samples_leaf\", 1, 10)\n    min_samples_split = trial.suggest_int(\"min_samples_split\", 2, 10)\n    model = RandomForestClassifier(min_samples_leaf=min_samples_leaf,\n                                   n_estimators=n_estimators, max_depth=max_depth, random_state=0)\n    return model\n\ndef objective(trial):\n    model = create_modelRF(trial)\n    model.fit(X_train, y_train)\n    probs = model.predict_proba(X_test)\n    predp_LR = probs[:,1]\n    score = roc_auc_score(y_test, predp_LR)\n    return score","2686e76c":"'''study = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=100)\nparams_rf = study.best_params'''\n\n","d028e3de":"params_rf={'max_depth': 15,\n 'n_estimators': 208,\n 'min_samples_leaf': 10,\n 'min_samples_split': 9}","ee457cea":"model_rf = RandomForestClassifier(**params_rf)\nmodel_rf.fit(X_train,y_train)\npred_rf = model_rf.predict(X_test)\nprint('Optimized RF accuracy: ', accuracy_score(y_test, pred_rf))\nprint('Optimized RF f1-score:', f1_score(y_test, pred_rf))","9adeb9c1":"rf_score=accuracy_score(y_test, pred_rf)","d5ca630a":"# calculate the fpr and tpr for all thresholds of the classification\nprobs = model_rf.predict_proba(X_test)\npredp_rf = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, predp_rf)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","e4d9b2e6":"roc_auc_score(y_test,predp_rf)","734ed42e":"sampler = TPESampler(seed=0)\ndef create_modelada(trial):\n    n_estimators = trial.suggest_int(\"n_estimators\", 2, 300)\n    model = AdaBoostClassifier(n_estimators=n_estimators, random_state=0)\n    return model\n\ndef objective(trial):\n    model = create_modelada(trial)\n    model.fit(X_train, y_train)\n    probs = model.predict_proba(X_test)\n    predp_ada = probs[:,1]\n    score = roc_auc_score(y_test, predp_ada)\n    return score","6b0fa297":"'''study = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=100)\nparams_ada = study.best_params'''\n","a203fd7c":"params_ada={'n_estimators': 210}\n","5472d5d9":"model_ada = AdaBoostClassifier(**params_ada)\nmodel_ada.fit(X_train, y_train)\npred_ada=model_ada.predict(X_test)","302e218a":"print('Optimized RF accuracy: ', accuracy_score(y_test, pred_ada))\nprint('Optimized RF f1-score:', f1_score(y_test, pred_ada))","76cc7603":"ada_score= accuracy_score(y_test, pred_ada)","14dc8476":"# calculate the fpr and tpr for all thresholds of the classification\nprobs = model_ada.predict_proba(X_test)\npredp_ada = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, predp_ada)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","3ca34e66":"roc_auc_score(y_test,predp_ada)","a07db970":"def create_modelLGBM(trial):\n    num_leaves = trial.suggest_int(\"num_leaves\", 2, 31)\n    n_estimators = trial.suggest_int(\"n_estimators\", 50, 300)\n    max_depth = trial.suggest_int('max_depth', 3, 8)\n    min_child_samples = trial.suggest_int('min_child_samples', 100, 1200)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0001, 0.99)\n    model = LGBMClassifier(\n        num_leaves=num_leaves,\n        n_estimators=n_estimators, \n        max_depth=max_depth, \n        min_child_samples=min_child_samples, \n        learning_rate=learning_rate,\n        random_state=0\n    )\n    return model\n\ndef objective(trial):\n    model = create_modelLGBM(trial)\n    model.fit(X_train, y_train)\n    probs = model.predict_proba(X_test)\n    predp_LGBM = probs[:,1]\n    score = roc_auc_score(y_test, predp_LGBM)\n    return score","852be89e":"'''study = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=500)\nparams_LGBM = study.best_params'''\n","b426556b":"params_LGBM={'num_leaves': 12,\n 'n_estimators': 279,\n 'max_depth': 7,\n 'min_child_samples': 411,\n 'learning_rate': 0.0966077053983753}","a4deb1ba":"model_LGBM = LGBMClassifier(**params_LGBM)\nmodel_LGBM.fit(X_train, y_train)\n\npred_LGBM = model_LGBM.predict(X_test)\nprint('Simple LGBM accuracy: ', accuracy_score(y_test, pred_LGBM))\nprint('Simple LGBM Regression f1_score: ', f1_score(y_test, pred_LGBM))","6d7ad804":"LGBM_score=accuracy_score(y_test, pred_LGBM)","0dc031b7":"# calculate the fpr and tpr for all thresholds of the classification\nprobs = model_LGBM.predict_proba(X_test)\npredp_LGBM = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, predp_LGBM)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","6b1e9a37":"roc_auc_score(y_test,predp_LGBM)","e59cbf41":"sampler = TPESampler(seed=0)\n\ndef create_modelXGB(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 20)\n    n_estimators = trial.suggest_int(\"n_estimators\", 1, 400)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0000001, 1)\n    gamma = trial.suggest_uniform('gamma', 0.0000001, 1)\n    scale_pos_weight = trial.suggest_int(\"scale_pos_weight\", 1, 20)\n    model = XGBClassifier(learning_rate=learning_rate, n_estimators=n_estimators, \n                          max_depth=max_depth, gamma=gamma, scale_pos_weight=scale_pos_weight, random_state=0)\n    return model\n\ndef objective(trial):\n    model = create_modelXGB(trial)\n    model.fit(X_train, y_train)\n    probs = model.predict_proba(X_test)\n    predp_XGM = probs[:,1]\n    score = roc_auc_score(y_test, predp_XGM)\n    return score\n","f800309f":"'''study = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=500)\nparams_xgb = study.best_params'''\n","d89af641":"params_xgb={'max_depth': 3, 'n_estimators': 317, 'learning_rate': 0.14077264483362187, 'gamma': 0.15676425072562297, 'scale_pos_weight': 3}","8994fd4b":"model_xgb = XGBClassifier(**params_xgb)\nmodel_xgb.fit(X_train, y_train)\npred_xgb = model_xgb.predict(X_test)\nprint('Optimized XGBClassifier accuracy: ', accuracy_score(y_test, pred_xgb))\nprint('Optimized XGBClassifier f1-score', f1_score(y_test, pred_xgb))","95381ac9":"xgb_score=accuracy_score(y_test, pred_xgb)","b758b473":"# calculate the fpr and tpr for all thresholds of the classification\nprobs = model_xgb.predict_proba(X_test)\npredp_xgb = probs[:,1]\nfpr, tpr, threshold = metrics.roc_curve(y_test, predp_xgb)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","4e56a55d":"roc_auc_score(y_test,predp_xgb)","dacc86b2":"total_score=xgb_score+LGBM_score+ada_score+LR_score+rf_score","cc9fdfe1":"g_xgb=(1-xgb_score\/total_score)\ng_LGB=(1-LGBM_score\/total_score)\ng_ada=(1-ada_score\/total_score)\ng_LR=(1-LR_score\/total_score)\ng_rf=(1-rf_score\/total_score)","203ee378":"f_pred=1\/4*(g_xgb*pred_xgb+g_rf*pred_rf+g_LR*pred_LR+g_LGB*pred_LGBM+g_ada*pred_ada)","cc017c8c":"f_predp=1\/4*(g_xgb*predp_xgb+g_rf*predp_rf+g_LR*predp_LR+g_LGB*predp_LGBM+g_ada*predp_ada)","aad99a1e":"accuracy_score(y_test, np.round(f_predp))","ad5f3112":"\nfpr, tpr, threshold = metrics.roc_curve(y_test, f_predp)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","29f6a4e2":"roc_auc_score(y_test,f_predp)","09c53841":" ### Changing labels\n","ff704d91":"### Essembling by score","68377805":"###  LightGBM ","0279ab80":"<a id=\"2\"><\/a>\n<h2 style='background:lightblue; border:0; color:black'><center>2. Modelling<center><h2>","604c34be":"### Customers by vehicle age","8843156b":"<a id=\"1\"><\/a>\n<h2 style='background:lightblue; border:0; color:black'><center>1. Exploratory Data Analysis<center><h2>\n","f4a109ed":"### Customers by previously insured","5f08e1b0":"### Percentage of customers insured","9422b1c8":"\n\nGender-> Male=0, Female=1\n\nVehicle_Age-> <1 Year=0, 1-2 Year=1,>2 Years=2\n\nVehicle_Damage->0=No Yes=1","235f3e24":"### Adaboost","c0ff575e":"<center><img src=\"https:\/\/www.royalsundaram.in\/html\/files\/tips\/vehicle-insurance-types-and-how-to-claim-it.png\"><\/center>","e8068d70":"Search the best parameters","b61c4196":"### Random forest","ca8d4cb0":"<h1 style='background:lightblue; border:0; color:black'><center>Understanding the problem.<\/center><\/h1>\n","0863bb56":"### Correlation","d276a730":"### Customers by vehicle damage","d7f9766a":"### Load the data","c739ffa2":"### Looking for missing values","9f445c4c":"<h1 style='background:lightblue; border:0; color:black'><center>Health Insurance Cross Sell Prediction.<\/center><\/h1>\n\n","b2be7917":"### Preparing the training a test set","31e777a1":"### Continuous variables\n","a2a9a2b7":"### Customers by gender","776f1938":"### The logistic regression","b7b4a495":"### XGBoost","fdbe80b4":"### Customers by Driving License","a51e142d":"Our goal is to find a model to an insurance company that has provided Health Insurance to its customers. now they want build a model to predict whether the policyholders (customers) from past year will also be interested in Vehicle Insurance provided by the company. \n\nAn insurance policy is an arrangement by which a company undertakes to provide a guarantee of compensation for specified loss, damage, illness, or death in return for the payment of a specified premium. A premium is a sum of money that the customer needs to pay regularly to an insurance company for this guarantee.\n\nThere is vehicle insurance where every year customer needs to pay a premium of certain amount to insurance provider company so that in case of unfortunate accident by the vehicle, the insurance provider company will provide a compensation (called \u2018sum assured\u2019) to the customer.\n\nBuilding a model to predict whether a customer would be interested in Vehicle Insurance is extremely helpful for the company because it can then accordingly plan its communication strategy to reach out to those customers and optimise its business model and revenue.\n\nNow, in order to predict, whether the customer would be interested in Vehicle insurance, you have information about demographics (gender, age, region code type), Vehicles (Vehicle Age, Damage), Policy (Premium, sourcing channel) etc."}}