{"cell_type":{"c3d13826":"code","cfee1487":"code","71a327ab":"code","a43c1ed5":"code","d7ca869f":"code","c252a3f4":"code","30c0df19":"code","40962bab":"code","b8a8114d":"code","6f8ffd34":"code","9a159389":"code","e5dbef3a":"code","d2152de9":"code","8a581917":"code","bb08ce7f":"code","a4531fa5":"code","29d6b90a":"code","d0c07936":"code","5355983f":"code","f4714989":"code","01811b74":"code","cf4a7f5d":"code","d22ebe8d":"code","d6eb60f5":"code","231ca711":"code","3756ad29":"code","32506c03":"markdown","5560cf64":"markdown","b98bd7d1":"markdown","10296474":"markdown","7b2e195b":"markdown","37a30519":"markdown","5126d2d5":"markdown","fa4c7c7b":"markdown","e331c423":"markdown","220df1c4":"markdown","3ffbbdf3":"markdown"},"source":{"c3d13826":"# libraries\nimport os\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\nfrom geopandas import GeoDataFrame\nimport seaborn as sns\nimport matplotlib.pyplot as plt","cfee1487":"# load the tables\n\n# cutaneous leishmaniasis (CL)\nCL_local = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Number_of_cases_of_cutaneous_leishmaniasis_reported.csv\")\nCL_imported = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Number_of_imported_cases_of_cutaneous_leishmaniasis_reported.csv\")\nCL_endemicity = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Status_of_endemicity_of_cutaneous_leishmaniasis.csv\")\n# visceral leishmaniasis (VL)\nVL_local = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Number_of_cases_of_visceral_leishmaniasis_reported.csv\")\nVL_imported = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Number_of_imported_cases_of_visceral_leishmaniasis_reported.csv\")\nVL_endemicity = pd.read_csv(\"..\/input\/neglected-tropical-diseases-leishmaniasis\/Status_of_endemicity_of_visceral_leishmaniasis.csv\")\n\n# show example table\nprint(CL_local.head(), \"\\n\")","71a327ab":"# group by region and year (ParentLocation, Period), CL local cases\n# we could also use mean() instead of sum() to report the average number of cases instead\nCL_local_summary = CL_local.groupby([\"ParentLocation\",\"Period\"], as_index=False)[\"Value\"].sum()\nprint(CL_local_summary.head(), \"\\n\")","a43c1ed5":"# visualize annual trend per region, CL local cases\nplt.figure(figsize=(15,8))\nsns.lineplot(\n    data=CL_local_summary,\n    x=\"Period\", y=\"Value\", hue=\"ParentLocation\", style=\"ParentLocation\",\n    markers=True, dashes=False, legend=\"full\"\n)\nplt.title(\"CL local cases by region\")\nplt.show()","d7ca869f":"# group by region and year (ParentLocation, Period), VL local cases\n# we could also use mean() instead of sum() to report the average number of cases instead\nVL_local_summary = VL_local.groupby([\"ParentLocation\",\"Period\"], as_index=False)[\"Value\"].sum()\nprint(VL_local_summary.head(), \"\\n\")","c252a3f4":"# visualize annual trend per region, VL local cases\nplt.figure(figsize=(15,8))\nsns.lineplot(\n    data=VL_local_summary,\n    x=\"Period\", y=\"Value\", hue=\"ParentLocation\", style=\"ParentLocation\",\n    markers=True, dashes=False, legend=\"full\"\n)\nplt.title(\"VL local cases by region\")\nplt.show()","30c0df19":"# group by region and year (ParentLocation, Period), CL imported cases\n# we could also use mean() instead of sum() to report the average number of cases instead\nCL_imported_summary = CL_imported.groupby([\"ParentLocation\",\"Period\"], as_index=False)[\"Value\"].sum()\nprint(CL_imported_summary.head(), \"\\n\")","40962bab":"# visualize annual trend per region, CL imported cases\nplt.figure(figsize=(15,8))\nsns.lineplot(\n    data=CL_imported_summary,\n    x=\"Period\", y=\"Value\", hue=\"ParentLocation\", style=\"ParentLocation\",\n    markers=True, dashes=False, legend=\"full\"\n)\nplt.title(\"CL imported cases by region\")\nplt.show()","b8a8114d":"# group by region and year (ParentLocation, Period), VL imported cases\n# we could also use mean() instead of sum() to report the average number of cases instead\nVL_imported_summary = VL_imported.groupby([\"ParentLocation\",\"Period\"], as_index=False)[\"Value\"].sum()\nprint(VL_imported_summary.head(), \"\\n\")","6f8ffd34":"# visualize annual trend per region, CL imported cases\nplt.figure(figsize=(15,8))\nsns.lineplot(\n    data=VL_imported_summary,\n    x=\"Period\", y=\"Value\", hue=\"ParentLocation\", style=\"ParentLocation\",\n    markers=True, dashes=False, legend=\"full\"\n)\nplt.title(\"VL imported cases by region\")\nplt.show()","9a159389":"# group by  year (Period) to find the max. Value and country, CL local cases\nCL_local_max_per_year = CL_local.groupby([\"Period\"], as_index=False)[\"Value\"].max()\ncountries_maxvalues_CL1 = CL_local[ (CL_local[\"Period\"].isin(CL_local_max_per_year[\"Period\"].tolist())) & (CL_local[\"Value\"].isin(CL_local_max_per_year[\"Value\"].tolist())) ].sort_values(by=\"Period\")\ncountries_maxvalues_CL1 = countries_maxvalues_CL1[ [\"Period\", \"Location\", \"Value\"] ]\ncountries_maxvalues_CL1.rename(columns = {'Period':'Year', 'Location':'Country', 'Value':'Max_Value'}, inplace = True)\nprint(countries_maxvalues_CL1, \"\\n\")","e5dbef3a":"# group by  year (Period) to find the max. Value and country, VL local cases\nVL_local_max_per_year = VL_local.groupby([\"Period\"], as_index=False)[\"Value\"].max()\ncountries_maxvalues_VL1 = VL_local[ (VL_local[\"Period\"].isin(VL_local_max_per_year[\"Period\"].tolist())) & (VL_local[\"Value\"].isin(VL_local_max_per_year[\"Value\"].tolist())) ].sort_values(by=\"Period\")\ncountries_maxvalues_VL1 = countries_maxvalues_VL1[ [\"Period\", \"Location\", \"Value\"] ]\ncountries_maxvalues_VL1.rename(columns = {'Period':'Year', 'Location':'Country', 'Value':'Max_Value'}, inplace = True)\nprint(countries_maxvalues_VL1, \"\\n\")","d2152de9":"# group by  year (Period) to find the max. Value and country, CL imported cases\nCL_imported_max_per_year = CL_imported.groupby([\"Period\"], as_index=False)[\"Value\"].max()\ncountries_maxvalues_CL2 = CL_imported[ (CL_imported[\"Period\"].isin(CL_imported_max_per_year[\"Period\"].tolist())) & (CL_imported[\"Value\"].isin(CL_imported_max_per_year[\"Value\"].tolist())) ].sort_values(by=\"Period\")\ncountries_maxvalues_CL2 = countries_maxvalues_CL2[ [\"Period\", \"Location\", \"Value\"] ]\ncountries_maxvalues_CL2.rename(columns = {'Period':'Year', 'Location':'Country', 'Value':'Max_Value'}, inplace = True)\nprint(countries_maxvalues_CL2, \"\\n\")","8a581917":"# group by  year (Period) to find the max. Value and country, CL imported cases\nVL_imported_max_per_year = VL_imported.groupby([\"Period\"], as_index=False)[\"Value\"].max()\ncountries_maxvalues_VL2 = VL_imported[ (VL_imported[\"Period\"].isin(VL_imported_max_per_year[\"Period\"].tolist())) & (VL_imported[\"Value\"].isin(VL_imported_max_per_year[\"Value\"].tolist())) ].sort_values(by=\"Period\")\ncountries_maxvalues_VL2 = countries_maxvalues_VL2[ [\"Period\", \"Location\", \"Value\"] ]\ncountries_maxvalues_VL2.rename(columns = {'Period':'Year', 'Location':'Country', 'Value':'Max_Value'}, inplace = True)\nprint(countries_maxvalues_VL2, \"\\n\")","bb08ce7f":"# load world map from geopandas\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\nprint(world.head(), world.shape, \"\\n\" )","a4531fa5":"# change iso_a3 column name in order to match dataset column names\nworld.rename(columns={'iso_a3': 'SpatialDimValueCode'}, inplace=True)\nprint(world.head(), \"\\n\" )","29d6b90a":"# merge CL endemicty table with world table\nCL_endemicity_updated = CL_endemicity.merge(world,on='SpatialDimValueCode')\nCL_endemicity_updated = GeoDataFrame(CL_endemicity_updated)\nprint(CL_endemicity_updated.head(), CL_endemicity_updated.shape, \"\\n\")","d0c07936":"# plot endemicity map, CL\nplt.rcParams[\"figure.figsize\"] = (18,9)\nax=CL_endemicity_updated.plot(\"Value\", categorical=True, cmap=\"Paired\", legend=True)\nax.set_axis_off()\nplt.show()\n","5355983f":"# CL endemicity counts as shown in map\nCL_endemicity_updated[\"Value\"].value_counts()","f4714989":"# note that because not all countries in the dataset match \n# the country codes in the world map, row numbers differ: \nprint(CL_endemicity.shape, CL_endemicity_updated.shape, \"\\n\")","01811b74":"# actual endemicity counts, CL\nCL_endemicity[\"Value\"].value_counts()","cf4a7f5d":"# merge VL endemicty table with world table (use the same world map above)\nVL_endemicity_updated = VL_endemicity.merge(world,on='SpatialDimValueCode')\nVL_endemicity_updated = GeoDataFrame(VL_endemicity_updated)\nprint(VL_endemicity_updated.head(), VL_endemicity_updated.shape, \"\\n\")","d22ebe8d":"# plot endemicity map, VL\nplt.rcParams[\"figure.figsize\"] = (18,9)\nax=VL_endemicity_updated.plot(\"Value\", categorical=True, cmap=\"Paired\", legend=True)\nax.set_axis_off()\nplt.show()\n","d6eb60f5":"# VL endemicity counts as shown in map\nVL_endemicity_updated[\"Value\"].value_counts()","231ca711":"# note that because not all countries in the dataset match \n# the country codes in the world map, row numbers differ: \nprint(VL_endemicity.shape, VL_endemicity_updated.shape, \"\\n\")","3756ad29":"# actual endemicity counts, VL\nVL_endemicity[\"Value\"].value_counts()","32506c03":"<a id=\"section-5\"><\/a>\n## 5. Generate a map for CL status of endemicity","5560cf64":"<a id=\"section-3\"><\/a>\n### 3. For each year, find the country with maximum number of local reported cases","b98bd7d1":"<a id=\"section-8\"><\/a>\n### 8. References","10296474":"<a id=\"section-6\"><\/a>\n### 6. Generate a map for VL status of endemicity","7b2e195b":"<a id=\"section-7\"><\/a>\n### 7. Summary","37a30519":"<a id=\"section-1\"><\/a>\n### 1. Visualize annual trends of reported local cases per region","5126d2d5":"<a id=\"section-2\"><\/a>\n### 2. Visualize annual trends of imported cases per region","fa4c7c7b":"1. [Neglected tropical diseases: Leishmaniasis. The Global Health Observatory](https:\/\/www.who.int\/data\/gho\/data\/themes\/topics\/gho-ntd-leishmaniasis).\n2. [Data repository: Leishmaniasis. The Global Health Observatory (WHO)](https:\/\/www.who.int\/data\/gho\/data\/themes\/topics\/indicator-groups\/indicator-group-details\/GHO\/leishmaniasis).\n3. [Dataset banner image: *Leishmania tropica*, Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Leishmania#\/media\/File:Leishmania_tropica_7.jpg).\n","e331c423":"1. In this notebook we only provided basic examples on how to use the dataset, but any new ideas or suggestions are welcome. \n2. You can use [geopandas](https:\/\/geopandas.org\/) to summarize the data in a world map.\n3. For map visualization you could also use [geoplot](https:\/\/residentmario.github.io\/geoplot\/index.html) or [folium](https:\/\/python-visualization.github.io\/folium\/).","220df1c4":"<a id=\"section-4\"><\/a>\n### 4. For each year, find the country with maximum number of imported cases","3ffbbdf3":"## Leishmaniasis reported cases worldwide from 2005 to 2020\n\nDisease type reported: cutaneous and visceral leishmaniasis (CL and VL respectively).\n\nPeriod: 2005 - 2020. \n\nArea\/Geography: Worldwide.  \n\nContents: \n\n[1. Visualize annual trends of reported local cases per region.](#section-1)\n\n[2. Visualize annual trends of imported cases per region.](#section-2)\n\n[3. For each year, find the country with maximum number of local reported cases.](#section-3)\n\n[4. For each year, find the country with maximum number of imported cases.](#section-4)\n\n[5. Generate a map for CL status of endemicity.](#section-5)\n\n[6. Generate a map for VL status of endemicity.](#section-6)\n\n[7. Summary.](#section-7)\n\n[8. References.](#section-8)"}}