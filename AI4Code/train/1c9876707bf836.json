{"cell_type":{"10ce367b":"code","19aa16d1":"code","882aa4d5":"code","238425cb":"code","9c3bce2f":"code","60708fec":"code","c298fc90":"code","6dc9d3f3":"code","2c6b88f9":"code","420cedf7":"code","41a0b1c5":"code","945c90cf":"code","a82ea2d6":"code","5719a6a7":"code","96cc6c14":"code","17508bf8":"code","93a28807":"code","6422a532":"code","8d83c0b8":"code","be887d63":"code","0cd31ac5":"markdown","e964aa33":"markdown"},"source":{"10ce367b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","19aa16d1":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport string\nfrom string import punctuation, digits\nfrom nltk.corpus import stopwords\nfrom wordcloud import WordCloud, STOPWORDS\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n","882aa4d5":"data = pd.read_csv('\/kaggle\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')","238425cb":"data.head()","9c3bce2f":"data.info()","60708fec":"data.isnull().sum()","c298fc90":"data.columns","6dc9d3f3":"data.drop(['id', 'user_name','user_location', 'user_description', 'user_created',\n       'user_followers', 'user_friends', 'user_favourites', 'user_verified',\n       'date', 'hashtags', 'source', 'retweets', 'favorites',\n       'is_retweet'],axis=1,inplace=True)","2c6b88f9":"text = data['text']\ntext","420cedf7":"def process_text(text):\n    \"\"\"\n    process the text by removing extra words, punctuations, \n    numbers and tokenize the word vector\n    \"\"\"\n    \n    words = '' \n    ############################################################################\n    for val in text:\n        \n        #remove numbers\n        rm_num = ''.join(char for char in val if not char.isdigit())\n        #remove puntuations\n        rm_pun = ''.join(char for char in rm_num if char not in punctuation)\n        \n        # split the value \n        tokens = rm_pun.split() \n    \n        # Converts each token into lowercase \n        for i in range(len(tokens)):\n            tokens[i] = tokens[i].lower() \n    \n        #exclude the extra words\n        words += \" \".join(word for word in tokens if word not in stopwords.words('english'))+\" \"\n    ###############################################################################\n    return words","41a0b1c5":"tweets = process_text(text)","945c90cf":"stopwords = set(STOPWORDS)\nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='black', colormap = 'coolwarm',\n                stopwords = stopwords, \n                min_font_size = 10).generate(tweets) \n  ","a82ea2d6":"plt.figure(figsize = (16, 10), facecolor = 'blue') \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","5719a6a7":"SIA = SentimentIntensityAnalyzer()\ndata['scores'] = data['text'].apply(lambda text: SIA.polarity_scores(text))","96cc6c14":"data","17508bf8":"def compute_score(c):\n    if c > 0.0:\n        return 'positive'\n    elif c == 0:\n        return 'neutral'\n    else:\n        return 'negative'","93a28807":"data['compound']  = data['scores'].apply(lambda score_dict: score_dict['compound'])                                           \n","6422a532":"data['compound_score'] = data['compound'].apply(lambda c :compute_score(c))","8d83c0b8":"data.head()","be887d63":"plt.figure(figsize = (8,8), facecolor = 'white') \nsns.countplot(data['compound_score'])","0cd31ac5":"# Text Processsing","e964aa33":"# VADER Sentiment Analyser"}}