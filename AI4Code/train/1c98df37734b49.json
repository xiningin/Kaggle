{"cell_type":{"1013dcd2":"code","107e6237":"code","954f8f94":"code","64760325":"code","ce099e6d":"code","48ba7822":"code","ef2609d0":"code","cafdd680":"code","d2a0c997":"code","27b02521":"code","89a4c621":"code","2775de37":"code","6855c2d5":"code","638a349d":"code","af66b80b":"code","f25ab9ff":"code","73813dc9":"code","1fbe895c":"code","a9a0a7b6":"code","5e339352":"code","9a6c1c22":"code","b39d024f":"code","2e0f10bb":"code","5cd3b269":"code","f24345bc":"code","a991b470":"code","f5e4dc24":"code","cad61851":"code","364425d3":"code","77060b06":"code","5d1899e8":"markdown","ae01764e":"markdown","ee5e8ee2":"markdown","51b676dd":"markdown","fa4ed7ba":"markdown","8c72a9ea":"markdown","0a9ebc20":"markdown","3d455f08":"markdown"},"source":{"1013dcd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","107e6237":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","954f8f94":"from fastai import *\nfrom fastai.vision import *","64760325":"path = Path('..\/input\/withwithout-mask\/maskdata\/maskdata')","ce099e6d":"path.ls()","48ba7822":"data = (ImageList.from_folder(path)\n       .split_by_folder(train='train',valid='test')\n       .label_from_folder()\n       .transform(get_transforms(),size=224)\n       .databunch(bs=10))","ef2609d0":"data.classes","cafdd680":"data.show_batch()","d2a0c997":"learn = cnn_learner(data,models.resnet34,metrics=[accuracy])","27b02521":"learn.fit_one_cycle(4)","89a4c621":"m=learn.model.eval()","2775de37":"idx=0\nx,y = data.train_ds[idx]\nx.show()\ndata.valid_ds.y[idx]","6855c2d5":"xb,_ = data.one_item(x)\nxb_im = Image(xb.view(3,224,224))\nxb = xb.cuda()","638a349d":"xb_im.shape","af66b80b":"from fastai.callbacks.hooks import *","f25ab9ff":"def hooked_backward(cat=y):\n    with hook_output(m[0]) as hook_a: \n        with hook_output(m[0], grad=True) as hook_g:\n            preds = m(xb)\n            preds[0,int(cat)].backward()\n    return hook_a,hook_g","73813dc9":"hook_a,hook_g = hooked_backward()","1fbe895c":"acts  = hook_a.stored[0].cpu()\nacts.shape","a9a0a7b6":"avg_acts = acts.mean(0)\navg_acts.shape","5e339352":"def show_heatmap(hm):\n    _,ax = plt.subplots()\n    xb_im.show(ax)\n    ax.imshow(hm, alpha=0.6, extent=(0,224,224,0),\n              interpolation='bilinear', cmap='magma');","9a6c1c22":"show_heatmap(avg_acts)","b39d024f":"interp = ClassificationInterpretation.from_learner(learn)","2e0f10bb":"interp.plot_confusion_matrix()","5cd3b269":"learn.model_dir='\/kaggle\/working'","f24345bc":"img=open_image('..\/input\/withwithout-mask\/masks2.0\/masks\/test\/0\/1.jpg')","a991b470":"learn.predict(img)","f5e4dc24":"import cv2","cad61851":"import torch\ntorch.__version__\n","364425d3":"color_dict ={0:(0,255,0),1:(255,0,0)}\nlabels_dict=['With Mask','Without Mask']\nface_clsfr=cv2.CascadeClassifier('haarcascade_frontalface_default.xml')\nsource=cv2.VideoCapture(0)\n# learn =load_learner('','export.pkl')\nwhile True:\n    ret,img=source.read()\n    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n    faces=face_clsfr.detectMultiScale(gray,1.3,5)\n\n    for (x,y,w,h) in faces:\n\n        face_img=gray[y:y+w,x:x+w]\n        # resized=cv2.resize(face_img,(100,100))\n        # normalized=resized\/255.0\n        # reshaped=np.reshape(normalized,(1,100,100,1))\n        # result=model.predict(reshaped)\n        img_t = pil2tensor(face_img, np.float32)\n        image = Image(img_t)\n        label = learn.predict(image)[0]\n        # label=np.argmax(result,axis=1)[0]\n\n        cv2.rectangle(img,(x,y),(x+w,y+h),color_dict[label],2)\n        cv2.rectangle(img,(x,y-40),(x+w,y),color_dict[label],-1)\n        cv2.putText(img, labels_dict[label], (x, y-10),cv2.FONT_HERSHEY_SIMPLEX,0.8,(255,255,255),2)\n\n\n    cv2.imshow('LIVE',img)\n    key=cv2.waitKey(1)\n\n    if(key=='q'):\n        break\n\ncv2.destroyAllWindows()\nsource.release()","77060b06":"learn.export(Path('\/kaggle\/working\/export.pkl'))","5d1899e8":"# Import Libraries","ae01764e":"# Visualizing Result","ee5e8ee2":"# Generating Heatmap Of Features ","51b676dd":"# Display Batch","fa4ed7ba":"# Training Model","8c72a9ea":"# Loading Data","0a9ebc20":"# Testing on Unseen Data","3d455f08":"# Exporting Model"}}