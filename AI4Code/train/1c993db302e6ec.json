{"cell_type":{"084b13ea":"code","dc4fa9db":"code","96818e11":"code","a8800367":"code","99ee942e":"code","0cc6ce63":"code","0e988f9f":"code","a42e6b05":"code","45316a6b":"code","9e9d96b1":"code","06233c6c":"code","00e43632":"code","27017d18":"code","23b93e6f":"markdown","fcd82647":"markdown","0e1ea45d":"markdown","f41dbbe8":"markdown","c74095eb":"markdown","8c5227ba":"markdown","0447b5e2":"markdown","ed3e72c9":"markdown","1e891cd4":"markdown","fd8bfd02":"markdown","008938ec":"markdown","e8d38225":"markdown","5682b33a":"markdown","f963a2e2":"markdown","054c9ce7":"markdown","530aaed2":"markdown","1c332b06":"markdown"},"source":{"084b13ea":"import os\nos.listdir('..\/input\/')","dc4fa9db":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/sms-spam-collection-dataset\/spam.csv\", encoding = \"latin-1\")\ndata = data[['v1', 'v2']]\ndata = data.rename(columns = {'v1': 'label', 'v2': 'text'})","96818e11":"data.head()","a8800367":"data.label.value_counts()","99ee942e":"def review_messages(msg):\n    # converting messages to lowercase\n    msg = msg.lower()\n    return msg","0cc6ce63":"from nltk.stem import WordNetLemmatizer\nfrom nltk.corpus import stopwords\n\nlemmatizer = WordNetLemmatizer()\nstopwords = set(stopwords.words('english'))\ndef alternative_review_messages(msg):\n    # converting messages to lowercase\n    msg = msg.lower()\n    # removing stopwords \n    msg = [word for word in msg.split() if word not in stopwords]\n    # using a lemmatized \n    msg = \" \".join([lemmatizer.lemmatize(word) for word in msg])\n    return msg","0e988f9f":"data['text'] = data['text'].apply(review_messages)","a42e6b05":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size = 0.1, random_state = 1)\n# training the vectorizer \nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)","45316a6b":"from sklearn import svm\nsvm = svm.SVC(C=1000)\nsvm.fit(X_train, y_train)","9e9d96b1":"from sklearn.metrics import confusion_matrix\nX_test = vectorizer.transform(X_test)\ny_pred = svm.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))","06233c6c":"def pred(msg):\n    msg = vectorizer.transform([msg])\n    prediction = svm.predict(msg)\n    return prediction[0]","00e43632":"pred(\"How are You ?\")","27017d18":"pred(\"You HAVE won 20 million CASH PRIZE\")","23b93e6f":"**As per Wikipedia:**\n\nText normalisation is the process of transforming text into a single canonical form that it might not have had before.\nWhen used correctly, it reduces noise, groups terms with similar semantic meanings and reduces computational costs by giving us a smaller matrix to work with.\n\nI will go through several common methods of normalisation, but keep in mind that it is not always a good idea to use them. Reserving the judgement for when to use what is the human component in data science.\n\n**[No Free Lunch Theorem:](https:\/\/en.wikipedia.org\/wiki\/No_free_lunch_theorem) ** there is never one solution that works well with everything. Try it with your data set to determine if it works for your special use case.","fcd82647":"## Happy Learning","0e1ea45d":"**For reference, this function does case normalisation, removing stop words and lemmatising.**","f41dbbe8":"The results aren\u2019t bad at all! We have no false positives and around 15% false negatives.\n\nLet\u2019s test it against a few new examples.","c74095eb":"### Removing stop words\n\nSome commonly agreed upon stop words from the English language:\n\n- I\n- a\n- because\n- to\n\nThere is a lot of debate over when removing stop words is a good idea. This practice is used in many information retrieval tasks (such as search engine querying), but can be detrimental when syntactical understanding of language is required.\n\n### Removing punctuations, special symbols\n\nOnce again, we must consider the importance of punctuation and special symbols to our classifier\u2019s predictive capabilities. We must also consider the importance of each symbol\u2019s functionality. For example, the apostrophe allows us to define contractions and differentiate between words like it\u2019s and its.\n\n### Lemmatising\/Stemming\n\nBoth of these techniques reduce inflection forms to normalise words with the same lemma. The difference between lemmatising and stemming is that lemmatising performs this reduction by considering the context of the word while stemming does not. The drawback is that there is currently no lemmatiser or stemmer with a very high accuracy rate.","8c5227ba":"### Let\u2019s begin!\nAfter importing the data, I changed the column names to be more descriptive.","0447b5e2":"We apply the first function to normalise the text messages.","ed3e72c9":"- In this part, we will go through an end to end walk through of building a very simple text classifier. \n- We will be using the SMS Spam Collection Dataset which tags 5,574 text messages based on whether they are \u201cspam\u201d or \u201cham\u201d (not spam).\n- Our goal is to build a predictive model which will determine whether a text message is spam or ham. For the code, see here.","1e891cd4":"Looks like it works perfectly on the sample data set. Use your custom text and test the model","fd8bfd02":"Less common normalisation techniques include error correction, converting words to their parts of speech or mapping synonyms using a synonym dictionary. With the exception of error correction and synonym mapping, there are many pre-built tools for the other normalisation techniques, all of which can be found in the [nltk library.](https:\/\/www.nltk.org\/)\n\nFor this particular classification problem, we will only use case normalisation. The rationale is that it will be hard to apply a stemmer or lemmatiser onto colloquial English and that since the text messages are so short, removing stop words might not leave us with much to work with.","008938ec":"### Data Cleaning\nCleaning textual data is a little different than regular data cleaning. There is a much heavier emphasis on text normalisation than removing outliers or leverage points.","e8d38225":"Now, let\u2019s test it.","5682b33a":"### Building and Testing the Classifier\nThe next step is to select the type of classifier to use. Typically in this step, we will choose several candidate classifiers and evaluate them against the testing set to see which one works the best. However, for our purposes, we can assume that a Support Vector Machine works well enough.\n\nA larger value of C represents a smaller hyperplane. Parameters such as this can be precisely tuned via grid search.","f963a2e2":"From briefly exploring our data, we gain some insight into the text that we are working with: colloquial English. This particular data set also has 87% messages labelled as \u201cham\u201d and 13% messages labelled as \u201cspam\u201d. The class imbalance will become important later when assessing the strength of our classifier.","054c9ce7":"After settling with TF-IDF, we must decide the granularity of our vectorizer. A popular alternative to assigning each word as its own term is to use a tokenizer. A tokenizer splits documents into tokens (thus assigning each token to its own term) based on white space and special characters.\n\nFor example, the phrase what\u2019s going on might be split into what, \u2018s, going, on.\n\nThe tokenizer is able to extract more information than word level analysers. However, tokenizers do not work well with colloquial English and may encounter issues splitting URLs or emails. As such, we will use a word level analyser, which assigns each word to its own term.\n\nBefore training the vectorizer, we split our data into a training set and a testing set. 10% of our data is allocated for testing.","530aaed2":"Reffered from [Spam or Ham: Introduction to Natural Language Processing Part 2](https:\/\/towardsdatascience.com\/spam-or-ham-introduction-to-natural-language-processing-part-2-a0093185aebd)","1c332b06":"### Vectorizing the Text\n\nwe will use the TF-IDF vectorizer (Term Frequency\u200a\u2014\u200aInverse Document Frequency), a similar embedding technique which takes into account the importance of each term to document.\n\nWhile most vectorizers have their unique advantages, it is not always clear which one to use. In our case, the TF-IDF vectorizer was chosen for its simplicity and efficiency in vectorizing documents such as text messages.\n\nTF-IDF vectorizes documents by calculating a TF-IDF statistic between the document and each term in the vocabulary. The document vector is constructed by using each statistic as an element in the vector."}}