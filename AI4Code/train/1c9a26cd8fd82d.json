{"cell_type":{"004cc140":"code","60502a8a":"code","6382436c":"code","7c2afdf0":"code","2df023e0":"code","1b131c54":"code","e848bacd":"markdown","838ca74c":"markdown"},"source":{"004cc140":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly.plotly as ply\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()\n\nimport sys\n!{sys.executable} -m pip install csvvalidator\nfrom csvvalidator import *\n\nimport csv\nfrom io import StringIO\n\ntoday = pd.Timestamp.now(tz='America\/Los_Angeles')","60502a8a":"# CSV Validation\nfield_names = ('DATETIMEINIT',\n               'REQCATEGORY',\n               'REQADDRESS',\n               'STATUS',\n               'DATETIMECLOSED',\n               )\nvalidator = CSVValidator(field_names)\n\nvalidator.add_value_check('REQCATEGORY', # the name of the field\n                          str, # a function that accepts a single argument and \n                               # raises a `ValueError` if the value is not valid.\n                               # Here checks that \"key\" is an integer.\n                          'EX1', # code for exception\n                          'Category must be a string'# message to report if error thrown\n                         )\nvalidator.add_value_check('REQADDRESS', # the name of the field\n                          str, # a function that accepts a single argument and \n                               # raises a `ValueError` if the value is not valid.\n                               # Here checks that \"key\" is an integer.\n                          'EX2', # code for exception\n                          'Address must be a string'# message to report if error thrown\n                         )\nvalidator.add_value_check('STATUS', # the name of the field\n                          enumeration('OPEN', 'CLOSED', 'CANCEL','PENDING'), # a function that accepts a single argument and \n                               # raises a `ValueError` if the value is not valid.\n                               # Here checks that \"key\" is an integer.\n                          'EX3', # code for exception\n                          'Status not recognized'# message to report if error thrown\n                         )\n\n# sample csv\ngood_data = StringIO(\"\"\"DATETIMEINIT,REQCATEGORY,REQADDRESS,STATUS,DATETIMECLOSED\n2017-06-05 11:43:13,ROW,Some long address,CLOSED,2017-06-17 13:40:55\n\"\"\")\n# read text in as a csv\ntest_csv = csv.reader(good_data)\n# validate our good csv\nvalidator.validate(test_csv)\n\ncc = pd.read_csv('..\/input\/service-requests-received-by-the-oakland-call-center.csv', parse_dates = ['DATETIMEINIT', 'DATETIMECLOSED'])","6382436c":"def process_data(raw_data):\n    #Data processing goes here\n    processed_data = raw_data\n    processed_data.DATETIMEINIT = processed_data.DATETIMEINIT.dt.tz_localize('America\/Los_Angeles', ambiguous=True)\n    processed_data.DATETIMECLOSED = processed_data.DATETIMECLOSED.dt.tz_localize('America\/Los_Angeles')\n    processed_data['DAYSOPEN'] = pd.to_timedelta((processed_data.DATETIMECLOSED - processed_data.DATETIMEINIT).dt.round('h')).astype('timedelta64[D]')\n    return processed_data\n\n\ndef lat(x):\n    s = x.split(\"'\")\n    for i in range(0, len(s)):\n        if (s[i] == 'latitude'):\n            return float(s[i+2])\n    return np.NaN\n\n\ndef lon(x):\n    s = x.split(\"'\")\n    for i in range(0, len(s)):\n        if (s[i] == 'longitude'):\n            return float(s[i+2])\n    return np.NaN\n\ntest_data = StringIO(\"\"\"DATETIMEINIT,REQCATEGORY,REQADDRESS,STATUS,DATETIMECLOSED\n2017-06-05 11:43:13,ROW,Some long address,OPEN,2017-06-17 13:40:55\n\"\"\")\ntest_csv = pd.read_csv(test_data)  \n\noutput_data_correct = StringIO(\"\"\"DATETIMEINIT,REQCATEGORY,REQADDRESS,STATUS,DATETIMECLOSED\n2017-06-05 11:43:13,ROW,Some long address,OPEN,2017-06-17 13:40:55\n\"\"\")\noutput_csv_correct = pd.read_csv(output_data_correct)\n\n#pd.testing.assert_frame_equal(output_csv_correct, process_data(test_csv))\ncc = process_data(cc)","7c2afdf0":"gdf = cc\n\n# Trim to requests made in the past 7 days and add column with no. of days open\ngdf = gdf[pd.to_timedelta((today - gdf['DATETIMEINIT']).dt.round('d')).astype('timedelta64[D]') < 8]\ngdf.loc[pd.isnull(gdf.DAYSOPEN),'DAYSOPEN'] = pd.to_timedelta((today - gdf.DATETIMEINIT).dt.round('h')).astype('timedelta64[D]')\n\n# Drop unnecessary columns and then drop rows with NaN values, in that order!\ngdf = gdf[['REQCATEGORY', 'REQADDRESS', 'DAYSOPEN', 'DATETIMEINIT', 'DESCRIPTION']].dropna()\n\n# Parse latitude and longitude values from address\ngdf.loc[:,'latitude'] = gdf.REQADDRESS.apply(lat)\ngdf.loc[:,'longitude'] = gdf.REQADDRESS.apply(lon)","2df023e0":"# Plot with plotly and Mapbox\nmapbox_access_token = 'pk.eyJ1Ijoid3RzY290dCIsImEiOiJjangwa2UyOGkxOHQ5M3lvNWppaDY1cTN4In0.DrkJn6BRhRkDmjrzFjbf7Q'\n\ndata = [\n    go.Scattermapbox(\n        lat=gdf.latitude,\n        lon=gdf.longitude,\n        mode='markers',\n        text=gdf.DESCRIPTION,\n        marker=dict(\n            size=7,\n            color=gdf.DAYSOPEN,\n            colorscale='Bluered',\n            reversescale=True,\n            colorbar=dict(\n                title='DAYS OPEN'\n            )\n        ),\n    )\n]\n\nlayout = go.Layout(\n    autosize=True,\n    hovermode='closest',\n    title='Oakland Service Requests Opened in the Past 7 Days, Updated ' + str(today.date()),\n    mapbox=dict(\n        accesstoken=mapbox_access_token,\n        bearing=0,\n        center=dict(\n            lat=37.805,\n            lon=-122.250\n        ),\n        pitch=0,\n        zoom=11\n    ),\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, filename='Oakland Mapbox')","1b131c54":"# Plot data with plotly\ndf = cc.dropna(subset=['DAYSOPEN'])\ndf = pd.DataFrame(df.groupby('REQCATEGORY')['DAYSOPEN'].mean()).reset_index()\ndf.sort_values(by='DAYSOPEN', inplace=True)\n\ndata = [go.Bar(y=df.DAYSOPEN, x=df.REQCATEGORY)]\nlayout = dict(title = 'How Long Are Requests Open, on Average?', \n              xaxis = dict(title = 'Request Category', ticklen=5, automargin=True, tickangle=45),\n              yaxis = dict(title = 'Avg. Days to Close', automargin=True))\nfig = dict(data = data, layout = layout)\niplot(fig)","e848bacd":"## Maintainence Update, 6\/13\/19:\nMapbox authentication is failing, disabling rendering of the scatter map. I hope to resolve this soon.","838ca74c":"**[Dashboarding with Scheduled Notebooks:](https:\/\/www.kaggle.com\/rtatman\/dashboarding-with-notebooks-day-5)**<br>\n\n<h1>Service Requests Received by the Oakland Call Center<\/h1>\nThis is a scheduled notebook that is updated daily at 12:00am Pacific Standard Time by Google Cloud Services.<br>\n[Dataset page here](https:\/\/www.kaggle.com\/cityofoakland\/oakland-call-center-public-work-service-requests) "}}