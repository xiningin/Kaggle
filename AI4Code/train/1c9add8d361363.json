{"cell_type":{"d504f753":"code","246c1768":"code","dbfc4194":"code","c1fcd41c":"code","e88a4a38":"code","b7b56b18":"code","b8d675f0":"code","057abc59":"code","c1e83be0":"code","3717d11b":"code","d5af142b":"code","2adbcfee":"code","9468128e":"code","da0a68f4":"code","99f99cf9":"code","1c9395c7":"code","5cead73c":"code","6a881453":"code","5b601496":"code","a0746682":"code","9c13e53b":"markdown","3c1ef03c":"markdown","40c9ef30":"markdown","59f28da2":"markdown","68f18e9d":"markdown","ed8b1eac":"markdown","bab2d637":"markdown","25b3c04e":"markdown","1fd8b6c0":"markdown","4864d770":"markdown"},"source":{"d504f753":"#!pip install sidetable\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n#import sidetable\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder","246c1768":"# read an example file - 2020\/10\/01\ndf = pd.read_csv('\/kaggle\/input\/luflow-network-intrusion-detection-data-set\/2021\/01\/2021.01.20\/2021.01.20.csv')\n# first glance\ndf.head()","dbfc4194":"df.info()","c1fcd41c":"df.isna().mean()*100","e88a4a38":"import missingno as msno\n%matplotlib inline\nmsno.matrix(df)","b7b56b18":"df.dropna(axis=0,inplace=True,how=\"any\")","b8d675f0":"df.nunique()","057abc59":"df.count()","c1e83be0":"df.drop([\"src_ip\",\"dest_ip\",\"time_end\",\"time_start\"],axis=1,inplace=True)","3717d11b":"df.count()","d5af142b":"\n\ndf.corr()\n\n","2adbcfee":"sns.heatmap(df.corr(),\n            xticklabels=df.columns,\n            yticklabels=df.columns\n           )\n","9468128e":"x=df[['avg_ipt', 'bytes_in','bytes_out','dest_port','entropy','num_pkts_out','num_pkts_in','proto','src_port','total_entropy','duration']]\n\ny=df['label']","da0a68f4":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nn_neighbors=30\nscores=[]\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=30)\nfor k in range(1,10):\n    knn=KNeighborsClassifier(n_neighbors-k)\n    knn.fit(x_train,y_train)\n    y_pred=knn.predict(x_test)\n    print('Accuracy=',accuracy_score(y_pred,y_test))","99f99cf9":"df_metrics=df.loc[:, df.columns != 'label']","1c9395c7":"from sklearn.preprocessing import MinMaxScaler\n\nvalues = df_metrics.values\n\nscaler = MinMaxScaler(feature_range=(0, 1))\n\nscaledData = scaler.fit_transform(values)","5cead73c":"from pandas import DataFrame\n\ndf_scaled= DataFrame(scaledData)","6a881453":"df_scaled.head()","5b601496":"x_scaled=df_scaled\ny=df['label']","a0746682":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\nn_neighbors=30\nscores=[]\nx_train,x_test,y_train,y_test=train_test_split(x_scaled,y,test_size=0.2,random_state=30)\nfor k in range(1,10):\n    knn=KNeighborsClassifier(n_neighbors-k)\n    knn.fit(x_train,y_train)\n    y_pred=knn.predict(x_test)\n    print('Accuracy=',accuracy_score(y_pred,y_test))","9c13e53b":"Let's scale the data and see whether we can get more precise prediction","3c1ef03c":"we run again KNN neighbors ML algorithm applied this time on scaled data","40c9ef30":"inspect number of unique values for each column","59f28da2":"based on the two commands above written, I will remove  columns \"time_end\" and \"time_start\" as they have high variability (see number of unique values) \nI will also remoce \"src_ip\" and \"dest_ip\" as they have alwyws the same value for all rows","68f18e9d":"inspect the dataframe","ed8b1eac":"Pecentage of empty values","bab2d637":"We will scale all metrics' data between 0 and 1","25b3c04e":"\"src_port\" and \"dest_port\" have some empty values. So let's remove rows with empty values for \"src_port\" and \"dest_port\"","1fd8b6c0":"Read one csv file","4864d770":"we provide below the scaled data in dataframe format"}}