{"cell_type":{"389335b8":"code","61ece334":"code","eaa7b153":"code","c6e75e58":"code","396766cf":"code","2b956d84":"code","c6e4013c":"code","5e6c426b":"code","fec5529f":"code","76bcab43":"code","23a1066a":"code","5da4eef4":"code","7f1de4d6":"code","8dc3089b":"code","dd4c8b12":"code","df89a551":"code","b17b9d6c":"code","58054d4e":"code","edd65e19":"code","be3fecb4":"code","ab8ae2f0":"code","36c5c2e7":"code","958f7078":"code","d1986fc5":"code","cec5512f":"code","a92a8922":"code","02725108":"markdown","bf0ff572":"markdown","3358bb68":"markdown","1030527f":"markdown","a8528b1e":"markdown","988dc542":"markdown","f07b9249":"markdown","4ff43262":"markdown"},"source":{"389335b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n# Set your own project id here\n#PROJECT_ID = 'Titanic_Learning'\n#from google.cloud import storage\n#storage_client = storage.Client(project=PROJECT_ID)\n#from google.cloud import bigquery\n#bigquery_client = bigquery.Client(project=PROJECT_ID)'''","61ece334":"#\u8bfb\u53d6\u6570\u636e\nimport pandas as pd\nimport numpy as np\ntrain_data=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ngender_data=pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\nfull_data=[train_data,test_data]","eaa7b153":"#\u67e5\u770b\u6570\u636e \u641e\u6e05\u6570\u636e\u7c7b\u578b\n#train_data.info()\n#train_data.columns.values\n#test_data.head()\n\ntrain_data.tail()\n#train_data.describe()\n#train_data.describe(include=['O'])#\u7edf\u8ba1categorical\u7c7b\u578b\u7684\u7279\u5f81\uff0c\u4e09\u4e2a\u53c2\u6570percentile\uff0cinclude\uff0cexclude\uff0c\n#train_data.sample(6)\n#import pandas_profiling\n#train_data.profile_report()#\u5f3a\u5927\u7684\u6570\u636e\u60c5\u51b5\u5c55\u793a\u5e93\n#train_data[train_data.Ticket.values=='113572']","c6e75e58":"#\u6570\u636e\u6e05\u6d17\uff0c\u5904\u7406\u7f3a\u5931\u503c\n#train_data.isnull().sum()\n#Embarked\u7684\u7f3a\u5931\u503c\ntrain_data[\"Embarked\"].value_counts() #S \u6700\u591a\uff0c\u628a\u4e24\u4e2a\u7f3a\u5931\u503c\u7528S\u4ee3\u66ff\ntrain_data[train_data.Embarked.isnull()] #\u67e5\u770b\u7f3a\u5931\u503c\ntrain_data.Embarked.fillna('C',inplace=True)#\u7f3a\u5931\u503c\u7528C\u6765\u4ee3\u66ff\uff0c\u7ecf\u8fc7\u4e0b\u8fb9\u7684\u53ef\u89c6\u5316\u5f97\u6765\u7684\ntest_data.Embarked.fillna('C',inplace=True)","396766cf":"#\u5bf9Cabin\u7684\u5904\u7406\u4e0d\u5408\u9002\n#survivers=train_data.Survived\n#train_data.drop(['Survived'],axis=1,inplace=True)\n#all_data=pd.concat([train_data,test_data],ignore_index=False)\n#all_data.Cabin.fillna('N',inplace=True)","2b956d84":"'''all_data.Cabin=[i[0] for i in all_data.Cabin]#\u628a\u8239\u8231\u7684\u9996\u5b57\u6bcd\u7559\u4e0b\uff0c\u820d\u53bb\u6ca1\u6709\u610f\u4e49\u7684\u6570\u5b57\ndef cabin_estimator(i):\n    \"\"\"Grouping cabin feature by the first letter\"\"\"\n    a = 0\n    if i<16:\n        a = \"G\"\n    elif i>=16 and i<27:\n        a = \"F\"\n    elif i>=27 and i<38:\n        a = \"T\"\n    elif i>=38 and i<47:\n        a = \"A\"\n    elif i>= 47 and i<53:\n        a = \"E\"\n    elif i>= 53 and i<54:\n        a = \"D\"\n    elif i>=54 and i<116:\n        a = 'C'\n    else:\n        a = \"B\"\n    return a\nwith_N = all_data[all_data.Cabin == \"N\"]\nwithout_N = all_data[all_data.Cabin != \"N\"]\n##applying cabin estimator function. \nwith_N['Cabin'] = with_N.Fare.apply(lambda x: cabin_estimator(x))\n## getting back train. \nall_data = pd.concat([with_N, without_N], axis=0)\n## PassengerId helps us separate train and test. \nall_data.sort_values(by = 'PassengerId', inplace=True)\n## Separating train and test from all_data. \ntrain_data=all_data[:891]\ntest_data = all_data[891:]\n# adding saved target variable with train. \ntrain_data['Survived'] = survivers'''","c6e4013c":"#all_data.Fare.isnull().sum() \u5c31\u4e00\u4e2a\u7f3a\u5931\u503c\n#all_data[all_data.Fare.isnull()] \u770b\u770b\u8fd9\u4e00\u4e2a\u7f3a\u5931\u503c\u957f\u4ec0\u4e48\u6837\u5b50\nmissing_value = test_data[(test_data.Pclass == 3) & (test_data.Embarked == \"S\") & (test_data.Sex == \"male\")].Fare.mean()\n## replace the test.fare null values with test.fare mean\ntest_data.Fare.fillna(missing_value, inplace=True)","5e6c426b":"###\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u62e5\u5747\u503c\u65b9\u5dee\u7b49\u6765\u4ee3\u66ff\n#for dataset in full_data:\n#    age_avg \t   = dataset['Age'].mean()\n#   age_std \t   = dataset['Age'].std()\n#    age_null_count = dataset['Age'].isnull().sum()\n    \n#    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n#    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n#    dataset['Age'] = dataset['Age'].astype(int)\n    \n#train['CategoricalAge'] = pd.cut(train['Age'], 5)\n###\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u7528\u968f\u673a\u68ee\u6797\u6cd5\u5219\u6765\u63a8\u6d4b\u5e74\u9f84\u503c \u5728\u4e0b\u8fb9\u7684\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u5c55\u793a","fec5529f":"#\u6570\u636e\u53ef\u89c6\u5316\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('darkgrid')\nfig, ax = plt.subplots(figsize=(16,12),ncols=2)\nax1 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=train_data, ax = ax[0]);\nax2 = sns.boxplot(x=\"Embarked\", y=\"Fare\", hue=\"Pclass\", data=test_data, ax = ax[1]);\nax1.set_title(\"Training Set\", fontsize = 18)\nax2.set_title('Test Set',  fontsize = 18)\n# ## Fixing legends\n# leg_1 = ax1.get_legend()\n# leg_1.set_title(\"PClass\")\n# legs = leg_1.texts\n# legs[0].set_text('Upper')\n# legs[1].set_text('Middle')\n# legs[2].set_text('Lower')\nfig.show()  #\uff08\u67e5\u770bEmbarked \u548cPclass\uff0cFare\u7684\u5173\u7cfb\uff0c\u586b\u5145\u7f3a\u5931\u503c\uff09","76bcab43":"pal = {'male':\"green\", 'female':\"Pink\"}\nsns.set(style=\"darkgrid\")\nplt.subplots(figsize = (15,8))\nax = sns.barplot(x = \"Sex\", \n                 y = \"Survived\", \n                 data=train_data, \n                 palette = pal,\n                 linewidth=5,\n                 order = ['female','male'],\n                 capsize = .05)\n\nplt.title(\"Survived\/Non-Survived Passenger Gender Distribution\", fontsize = 25,loc = 'center')\nplt.ylabel(\"% of passenger survived\", fontsize = 15, )\nplt.xlabel(\"Sex\",fontsize = 15);","23a1066a":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","5da4eef4":"grid = sns.FacetGrid(train_data, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","7f1de4d6":"grid = sns.FacetGrid(train_data, row='Embarked', size=2.2, aspect=1.6)\ngrid.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', palette='deep')\ngrid.add_legend()","8dc3089b":"grid = sns.FacetGrid(train_data, row='Embarked', col='Survived', size=2.2, aspect=1.6)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","dd4c8b12":"fig = plt.figure(figsize=(15,8),)\nax=sns.kdeplot(train_data.loc[(train_data['Survived'] == 0),'Fare'] , color='gray',shade=True,label='not survived')\nax=sns.kdeplot(train_data.loc[(train_data['Survived'] == 1),'Fare'] , color='g',shade=True, label='survived')\nplt.title('Fare Distribution Survived vs Non Survived', fontsize = 25)\nplt.ylabel(\"Frequency of Passenger Survived\", fontsize = 15, labelpad = 20)\nplt.xlabel(\"Fare\", fontsize = 15, labelpad = 20);","df89a551":"#\u5bf9Full_data\u505a\u53d8\u5316\uff0ctrain_data,test_data\u540c\u6b65\u53d8\u5316\nfull_data=[train_data,test_data]\nfor dataset in full_data:\n    dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1\nprint(train_data[['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).mean())\nfor dataset in full_data:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\nprint (train_data[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())\nfor dataset in full_data:\n    # Mapping Sex\n    dataset['Sex'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)","b17b9d6c":"for dataset in full_data:\n    age_avg = dataset['Age'].mean()\n    age_std = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \ntrain_data['CategoricalAge'] = pd.cut(train_data['Age'], 5)\n\nprint (train_data[['CategoricalAge', 'Survived']].groupby(['CategoricalAge'], as_index=False).mean())","58054d4e":"import re\ndef get_title(name):\n\ttitle_search = re.search(' ([A-Za-z]+)\\.', name)\n\t# If the title exists, extract and return it.\n\tif title_search:\n\t\treturn title_search.group(1)\n\treturn \"\"\n\nfor dataset in full_data:\n    dataset['Title'] = dataset['Name'].apply(get_title)\n\nprint(pd.crosstab(train_data['Title'], train_data['Sex']))","edd65e19":"test_data.Cabin.value_counts()","be3fecb4":"# Mapping Cabin\n    #dataset['Cabin'] = dataset['Cabin'].map( {'G':0,'F':1,'T':4,'A':6,'E':5,'D':7,'C':2,'B':3} ).astype(int)\n#train_data['Has_Cabin'] = train_data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n#test_data['Has_Cabin'] = test_data[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\nfor dataset in full_data:\n    # Mapping titles\n    title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n    \n    # Mapping Embarked\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n    \n    \n    \n    # Mapping Fare\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] \t\t\t\t\t\t        = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] \t\t\t\t\t\t\t        = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] \t\t\t\t\t       = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']                           = 4","ab8ae2f0":"drop_elements = ['PassengerId', 'Name','Ticket', 'SibSp','Cabin',\\\n                 'Parch', 'FamilySize']\ntrain_data = train_data.drop(drop_elements, axis = 1)\ntrain_data = train_data.drop(['CategoricalAge'], axis = 1)\n\ntest_data  = test_data.drop(drop_elements, axis = 1)\n\ntrain_labels=train_data.Survived.values\ntrain=train_data.drop('Survived',axis=1).values\ntest  = test_data.values","36c5c2e7":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n\tAdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression(),\n    XGBClassifier()]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog \t = pd.DataFrame(columns=log_cols)\n\nsss = StratifiedShuffleSplit(n_splits=10, test_size=0.1, random_state=0)\n\nX = train\ny = train_labels\n\nacc_dict = {}\n\nfor train_index, test_index in sss.split(X, y):\n\tX_train, X_test = X[train_index], X[test_index]\n\ty_train, y_test = y[train_index], y[test_index]\n\t\n\tfor clf in classifiers:\n\t\tname = clf.__class__.__name__\n\t\tclf.fit(X_train, y_train)\n\t\ttrain_predictions = clf.predict(X_test)\n\t\tacc = accuracy_score(y_test, train_predictions)\n\t\tif name in acc_dict:\n\t\t\tacc_dict[name] += acc\n\t\telse:\n\t\t\tacc_dict[name] = acc\n\nfor clf in acc_dict:\n\tacc_dict[clf] = acc_dict[clf] \/ 10.0\n\tlog_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n\tlog = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")","958f7078":"candidate_classifier = XGBClassifier()\ncandidate_classifier.fit(train, train_labels)\nresult = candidate_classifier.predict(test)\n","d1986fc5":"StackingSubmission = pd.DataFrame({ 'PassengerId':gender_data.PassengerId.values,\n                            'Survived': result })\nStackingSubmission.to_csv(\"HS_Submission.csv\", index=False)","cec5512f":"colormap = plt.cm.RdBu\nplt.figure(figsize=(14,12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(train_data.astype(float).corr(),linewidths=0.1,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True)","a92a8922":"g = sns.pairplot(train_data[[u'Survived', u'Pclass', u'Sex', u'Age', u'Parch', u'Fare', u'Embarked',\n       u'FamilySize', u'Title']], hue='Survived', palette = 'seismic',size=1.2,diag_kind = 'kde',diag_kws=dict(shade=True),plot_kws=dict(s=10) )\ng.set(xticklabels=[])","02725108":"### \u6027\u522b\u548c\u5b58\u6d3b","bf0ff572":"## \u501f\u52a9Titanic\u8fd9\u4e2a\u6bd4\u8d5b\uff0c\u7ed3\u5408\u5176\u4ed6\u7684notebook\uff0c\u628a\u5e38\u89c1\u7684\u65b9\u6cd5\u603b\u7ed3\u4e0b\u6765\uff0c\u4ee5\u4fbf\u540e\u7eed\u6bd4\u8d5b\u4f7f\u7528\u3002<br>\nhttps:\/\/www.kaggle.com\/masumrumi\/a-statistical-analysis-ml-workflow-of-titanic#Part-2:-Overview-and-Cleaning-the-Data<br>\nhttps:\/\/kaggle.com\/sinakhorami\/titanic-best-working-classifier<br>\nhttps:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python","3358bb68":"## \u7279\u5f81\u5de5\u7a0b","1030527f":"### Fare\u7279\u5f81\n\u5c31\u4e00\u4e2a\u7f3a\u5931\u503c\uff0c\u7528\u540cpclass\uff0cembarked\uff0csex\u7684\u6570\u636e\u7684\u5e73\u5747\u503c\u6765\u8fdb\u884c\u66ff\u6362","a8528b1e":"## \u6570\u636e\u53ef\u89c6\u5316","988dc542":"## \u6a21\u578b\u9009\u62e9","f07b9249":"### Age\u7279\u5f81","4ff43262":"## 1.\u67e5\u770b\u6570\u636e\n\u83b7\u53d6\u6570\u636e \u67e5\u770b\u6570\u636e \u6570\u636e\u5206\u7c7b \u6e05\u6d17\u6570\u636e \u6570\u636e\u4e4b\u95f4\u7684\u76f8\u5173\u5ea6 \u53ef\u89c6\u5316\u6570\u636e"}}