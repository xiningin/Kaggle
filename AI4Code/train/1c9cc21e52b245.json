{"cell_type":{"3a4126d8":"code","817e2357":"code","31c3aeee":"code","802f6657":"code","99e1e3d7":"code","61631ae9":"code","509b394a":"code","74ea9895":"code","0765c98a":"code","6ec139c2":"code","18bc7680":"code","12b7c216":"code","47311b90":"code","d15b03d2":"code","72a1ac6b":"code","202764f7":"code","93639102":"code","ea7bc7ff":"code","b70d045b":"code","ebcbb8e9":"code","1ce81a15":"code","44335743":"code","4be5983b":"code","ae6d568b":"code","639a7904":"code","aad9d2a1":"code","ab9ef3c0":"code","75121604":"code","24c50558":"code","e9ae23ff":"code","1eb323b8":"markdown","40db24bd":"markdown","a1a65e25":"markdown","524282ae":"markdown","584fa536":"markdown","fa997e0b":"markdown","f146cb50":"markdown","d5118e38":"markdown","e55c4b1e":"markdown","f04e8140":"markdown","2e420342":"markdown","99290c58":"markdown","bbd025b4":"markdown","1c52ca94":"markdown","3520ad58":"markdown","6f4cadaf":"markdown","f06c2229":"markdown","fd4aee33":"markdown","98a41d35":"markdown","05ed3f09":"markdown","c87dcfce":"markdown","01e86a40":"markdown","5b41e596":"markdown","b36a55c3":"markdown","38dd2a8f":"markdown","d821c4dd":"markdown","1288a304":"markdown","1a5ad418":"markdown","0607cb00":"markdown","851e855a":"markdown","5b5be802":"markdown","222cd5d3":"markdown","a9b281e5":"markdown","6ec1123b":"markdown","1ed9b3f8":"markdown","e35cbdf5":"markdown","b185d992":"markdown","bc204520":"markdown","c1b76779":"markdown","32f081ac":"markdown","a12a0b84":"markdown","c6b44785":"markdown","34d430cb":"markdown","8c921bba":"markdown"},"source":{"3a4126d8":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","817e2357":"x = np.array([1,2,3,4,5,6,7,8,9,10])\ny = x\n\nplt.figure()\nplt.scatter(x,y);","31c3aeee":"colors = ['blue']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y, c = colors, s = 80)","802f6657":"colors = ['blue']*(len(x))\ncolors[-1] = 'red'\n\nplt.figure()\nplt.scatter(x,y, c = colors, s = 80)\nplt.xlabel('X Label') # 'X Label' can be changed accordingly to the data.\nplt.ylabel('Y Label') # 'Y Label' can be changed accordingly to the data.\nplt.legend()\nplt.title('Sample Scatter Plot');","99e1e3d7":"plt.figure()\nplt.scatter(x[:-1], y[:-1], c = 'blue', s = 80, label = 'Positive')\nplt.scatter(x[-1], y[-1], c = 'red', s = 80, label = 'Negative')\nplt.xlabel('X Label')\nplt.ylabel('Y Label')\nplt.legend(loc = \"upper left\", fontsize = 10)\nplt.title('Sample Scatter Plot');","61631ae9":"line_plot = np.array([1,2,3,4,5,6,7,8,9,10])\nexponential_data = line_plot**2\n\n# plot the linear data and the exponential data\nplt.plot(line_plot, '-o', exponential_data, '-o')","509b394a":"plt.plot(line_plot, '-o', exponential_data, '-o')\n\nplt.xlabel('X-axis')\nplt.ylabel('y-axis')\nplt.title('Line Plot vs Exponential')\n# add a legend with legend entries (because we didn't have labels when we plotted the data series)\nplt.legend(['Line Plot', 'Exponential'])\n\nplt.fill_between(range(len(line_plot)), \n                       line_plot, exponential_data, \n                       facecolor='pink', \n                       alpha=0.35);","74ea9895":"ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]\npython = [45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640]\njava = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583]\nothers = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752]\n\nplt.plot(ages_x, python, color = '#800010', linewidth = 3, label = 'Python')   \nplt.plot(ages_x, java, color = '#40E0D0', linewidth = 3, label = 'Java')\nplt.plot(ages_x, others, color = '#FF0000', linestyle='--', label = 'All Devs')\n\nplt.title('Median Salary by Age')\nplt.xlabel('Ages')\nplt.ylabel('Median Salary')\nplt.legend(fontsize=12);   # It is necessary to give labels to the line \/ You can also pass label as argument inside legend.","0765c98a":"linear_data = np.array([1,2,3,4,5,6,7,8])\nexponential_data = linear_data**2\nxvalues = range(len(linear_data))\nxvalues1 = []\nfor item in xvalues:\n    xvalues1.append(item+0.3) #Because width of first bar is 0.3\n    \nplt.bar(xvalues, linear_data, width = 0.3, color = 'red', label = 'Linear')\nplt.bar(xvalues1, exponential_data, width = 0.3, color = 'green', label = 'Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize = 10);","6ec139c2":"plt.bar(xvalues, linear_data, width = 0.3, color='red', label = 'Linear')\nplt.bar(xvalues, exponential_data, width = 0.3, bottom = linear_data, color = 'green', label = 'Exponential')\nplt.title('Linear vs Exponential')\nplt.legend(fontsize=13);","18bc7680":"languages =['Python', 'SQL', 'Java', 'C++', 'JavaScript']\npos = np.arange(len(languages))\npopularity = [56, 39, 34, 34, 29]\n\nplt.bar(pos, popularity, align='center', color = 'red')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha = 0.8);","12b7c216":"# Change the bar colors to be light green\nbars = plt.bar(pos, popularity, align = 'center', linewidth = 0, color = 'lightgreen')\n\n# Make one bar, the python bar, a contrasting color\nbars[0].set_color('red')\n\n# Soften all labels by turning grey\nplt.xticks(pos, languages, alpha = 0.5)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha = 0.5)\n\n# Remove ytick labels\nplt.tick_params(top = False, bottom = False, left = False, right = False, labelleft = False, labelbottom = True)\n\n# Remove the frame of the chart\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\n\n# Direct label each bar with Y axis values\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                   ha = 'center', color = 'black', fontsize = 10)","47311b90":"plt.figure(figsize=(10,5))\n\nplt.subplot(1,2,1) # Number of rows, number of columns, current position\nplt.bar(pos, popularity, align = 'center', color = 'red')\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha = 0.8)\n\nplt.subplot(1,2,2) #number of rows, number of columns, current position\nbars = plt.bar(pos, popularity, align = 'center', linewidth = 0, color = 'lightgreen')\nbars[0].set_color('red')\nplt.xticks(pos, languages, alpha = 0.5)\nplt.title('Top 5 Languages for Math & Data \\nby % popularity on Stack Overflow', alpha = 0.5)\nplt.tick_params(top = False, bottom = False, left = False, right = False, labelleft = False, labelbottom = True)\nfor spine in plt.gca().spines.values():\n    spine.set_visible(False)\nfor bar in bars:\n    plt.gca().text(bar.get_x() + bar.get_width()\/2, bar.get_height() - 5, str(int(bar.get_height())) + '%', \n                 ha = 'center', color = 'black', fontsize = 10)\n    \nplt.tight_layout(pad = 5)","d15b03d2":"# Import the iris dataset\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\ndf = pd.DataFrame(data= np.c_[iris['data'], iris['target']],\n                     columns= iris['feature_names'] + ['target'])\ndf.head()","72a1ac6b":"plt.figure(figsize=(11,7))\n\nfor i in range(1, len(df.columns)):\n    plt.subplot(2, 2, i)\n    plt.scatter(df.iloc[:,i-1], df['target'], color = 'red')\n    plt.title(df.columns[i-1])\n    plt.ylabel('Target')\n    \nplt.tight_layout(pad=3)","202764f7":"import seaborn as sns\nsns.pairplot(data = df, x_vars = 'sepal length (cm)', y_vars = 'sepal width (cm)', hue='target');","93639102":"g = sns.pairplot(data=df, x_vars=df.columns[:-1], y_vars=df.columns[:-1], hue='target')\ng.fig.suptitle('Relationship Among Features', y=1.08, fontsize=20);","ea7bc7ff":"sns.boxplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set1\")","b70d045b":"sns.boxplot(data=df.drop(columns='target'), orient=\"v\", palette=\"Set1\")","ebcbb8e9":"sns.swarmplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set1\")","1ce81a15":"sns.swarmplot(data=df.drop(columns='target'), orient=\"v\", palette=\"Set1\")","44335743":"sns.violinplot(data=df.drop(columns='target'), orient=\"h\", palette=\"Set1\")","4be5983b":"sns.violinplot(data=df.drop(columns='target'), orient=\"v\", palette=\"Set1\")","ae6d568b":"plt.figure(figsize = (10,5))\n\nplt.subplot(1,2,1)\nsns.regplot(df['petal length (cm)'], df['petal width (cm)'])\n\nplt.subplot(1,2,2)\nsns.regplot(df['sepal length (cm)'], df['sepal width (cm)'])\n\nplt.tight_layout(pad = 3)","639a7904":"sns.countplot(x='target', data=df);","aad9d2a1":"list1 = np.random.randint(2, size = 50)\ntest = pd.DataFrame(list1, columns=['int'])\n\nsns.countplot(x ='int', data = test);","ab9ef3c0":"speed = [0.1, 17.5, 40, 48, 52, 69, 88]\nlifespan = [2, 8, 70, 1.5, 25, 12, 28]\nindex = ['snail', 'pig', 'elephant', 'rabbit', 'giraffe', 'coyote', 'horse']\ndf1 = pd.DataFrame({'speed': speed, 'lifespan': lifespan}, index = index)\nax = df1.plot.bar(rot = 0)","75121604":"sns.heatmap(df.corr(), annot=True);","24c50558":"df.iloc[0,0] = np.NaN\ndf.iloc[10,0] = np.NaN\ndf.iloc[20,0] = np.NaN\ndf.iloc[30,0] = np.NaN\ndf.iloc[32,0] = np.NaN\ndf.iloc[34,0] = np.NaN\ndf.iloc[35,0] = np.NaN\ndf.iloc[36,0] = np.NaN\n\ndf.iloc[10,2] = np.NaN\ndf.iloc[110,2] = np.NaN\ndf.iloc[120,2] = np.NaN\ndf.iloc[130,2] = np.NaN\ndf.iloc[132,2] = np.NaN\ndf.iloc[134,2] = np.NaN\ndf.iloc[135,2] = np.NaN\ndf.iloc[136,2] = np.NaN","e9ae23ff":"sns.heatmap(df.isnull(), yticklabels=False, cmap='plasma')","1eb323b8":"Here, the area between the two lines can be shown accordingly.","40db24bd":"The yellow lines indicate the null values.","a1a65e25":"The above plot is a stacked bar plot.","524282ae":"The above figure is just a simple scatter plot.","584fa536":"This indicates that the data is in equal proportion","fa997e0b":"### Import the required libraries:","f146cb50":"# **Table of Contents:**\n* Scatter Plots.\n* Line Plots.\n* Bar Plots.\n* Sub Plots.\n* Pair Plots.\n* Box Plots.\n* Swarm Plots.\n* Violin Plots.\n* Regression Plots.\n* Count Plots.\n* HeatMap.","d5118e38":"Generally used to describe correlation among data.","e55c4b1e":"## Violin Plots","f04e8140":"### Data from stackoverflow survey:","2e420342":"## HeatMap","99290c58":"* From this file, you will learn about simple plotting techniques.\n\n* Also, you will learn about how and when to use each of the plotting techniques efficiently.","bbd025b4":"## Box Plots","1c52ca94":"The above plot is representation of Regression plot.","3520ad58":"The above plot is vertical representation of Violin plot.","6f4cadaf":"The above figure is a scatter plot where you can highlight any point in the data seperately alongwith the scatter points size is variable.","f06c2229":"The above plot can also be used to analyze null values.","fd4aee33":"The above plot is horizontal representation of Swarm plot.","98a41d35":"## Conclusion:\n* The above file was just about simple plotting techniques.\n* Also, you may have learned about how and when to use each of the plotting techniques efficiently using the 10 rules.","05ed3f09":"#### Rule 1: Know Your Audience:\n> Your plot has to be designed in such a way of keeping your audience in mind. It\u2019s not the same to communicate with professional scientists, upper management, or the general public.\n> Remember this first when you are thinking about plotting data.\n\n#### Rule 2: Identify Your Message:\n> Your plot must contain a message to be successful. Take your time to think about the message you want to send, and once it\u2019s clear for you, start developing the plot.\n\n#### Rule 3: Adapt The Figure To The Support Medium:\n> This is a more practical rule. Know where your plots will be presented and adapt the plots accordingly.\n> It\u2019s not the same if the figure will be in a powerpoint, journal, or an email.\n> If it\u2019s part of a more significant presentation, make the lines bolder, the plot more straightforward so that the viewer can instantly understand it.\n\n#### Rule 4: Captions Are Not Optional:\n> Provide additional information or data to facilitate the comprehension of the plot.\n> In a bar chart, if it\u2019s relevant, add the numbers to facilitate the comparison.\n> If needed, add an example about how to read the plot.\n\n#### Rule 5: Do Not Trust The Defaults:\n> The defaults of any plotting library are good enough for any plot, but they are best for none.\n> Adjust the color palletes, the font size, title, spines, axis, and so on for the figure.\n> To make it more readable and more superior to look at.\n\n#### Rule 6: Use Color Effectively:\n> The feelings associate completely with specific colors, so use them accordingly.\nThere are three color maps. Use the most relevant for your data:\n> 1. Sequential: One variation of a unique color, used for quantitative data varying from low to high.\n> 2. Diverging: Variation from one color to another, used to highlight deviation from a median value.\n> 3. Qualitative: Rapid variation of colors, used mainly for discrete or categorical data.\n\n#### Rule 7: Do Not Mislead The Reader:\n> Try to show the data as objectively as possible. Some tools are terrible by nature like pie charts or 3D charts when comparing quantities.\n> As a rule of thumb, make sure to use the simplest type of plots that can convey your message, and make sure to use labels, ticks, title, and the full range of values when relevant.\n\n#### Rule 8: Avoid \u201cChartjunk\u201d:\n> Chartjunk refers to all the unnecessary or confusing visual elements found in a figure that does not improve the message (in the best case) or add confusion (in the worst case). \n> For example, chartjunk may include too many colors, too many labels, gratuitously colored backgrounds, useless grid lines, etc.\n\n#### Rule 9: Message Vs. Beauty:\n> In science, the figure's message and readability is the most crucial aspect while beauty is only an option.\n\n#### Rule 10: Get The Right Tool:\n> There are a lot of libraries that you can use to make plots and figures. You have plenty of libraries in Python, R, Javascript, Matlab, Excel, Tableau, and others.\n> Use the right tool for each plot.","c87dcfce":"## Scatter Plots","01e86a40":"## Sub Plots","5b41e596":"### Pair Plots for iris_dataset","b36a55c3":"## Swarm Plots","38dd2a8f":"The above plot is a combined bar plot.","d821c4dd":"**Let's compare two figure we just created above with Subplot**","1288a304":"## Line Plots","1a5ad418":"# 10 Simple Rules for Better Plotting","0607cb00":"The above plot Contains lots of junk, such as:\n\n* No X-labels.\n* Graph is about % popularity so need of Y-labels.\n* Same color bars.\n* Plot looks heavier.","851e855a":"<center><h1 style=\"color:red\">Simple Plotting Techniques in Python<\/h1><\/center>","5b5be802":"## Regression Plots","222cd5d3":"The above plot is horizontal representation of Box plot.","a9b281e5":"The above plot is vertical representation of Box plot.","6ec1123b":"## Bar Plots","1ed9b3f8":"The above plot is horizontal representation of Violin plot.","e35cbdf5":"The above figure is a scatter plot where you add labels on the plot.","b185d992":"## Count Plots","bc204520":"The above graph helps to determine the relationship between two sets of values, with one data set always being dependent on the other set.","c1b76779":"### **Subplots for iris_datasets**","32f081ac":"## Count plot to comapre two feature","a12a0b84":"#### Let's dejunkify the plot.","c6b44785":"The above plot is vertical representation of Swarm plot.","34d430cb":"From the above figure the second one looks better than first in terms of getting insights lot more easier.","8c921bba":"The above figure is a scatter plot where you add legend on the plot."}}