{"cell_type":{"575c0850":"code","1418a294":"code","e3b597e3":"code","20b27cba":"code","0907e5dd":"code","e21ff853":"code","2bc8afdc":"code","3455cc91":"code","657c77d2":"markdown","4dc3eff2":"markdown","be49662a":"markdown","46f46ebb":"markdown","8bc1b7a0":"markdown","fe18147a":"markdown","2624fd8b":"markdown","314d166a":"markdown","f70c295b":"markdown"},"source":{"575c0850":"from sklearn import datasets\nfrom sklearn import model_selection\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","1418a294":"iris = datasets.load_iris()","e3b597e3":"X_train, X_test, y_train, y_test = model_selection.train_test_split(iris.data, iris.target, test_size=0.2, random_state=0)","20b27cba":"model = tf.keras.models.Sequential([tf.keras.layers.Dense(4, activation=tf.nn.relu), tf.keras.layers.Dense(3, activation=tf.nn.softmax)])","0907e5dd":"model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])","e21ff853":"model.fit(X_train, y_train, epochs=1000)","2bc8afdc":"pred = model.predict(X_test).argmax(axis=1)\npred","3455cc91":"(pred == y_test).sum()\/len(pred)","657c77d2":"**Wonderful! Achived 100% accuracy!**","4dc3eff2":"Load iris dataset","be49662a":"Build a neural network model","46f46ebb":"Start to train the model.","8bc1b7a0":"Evalute the prediction result.","fe18147a":"Make prediction.","2624fd8b":"Compile the model","314d166a":"Load libraries","f70c295b":"Split dataset into train dataset and test dataset"}}