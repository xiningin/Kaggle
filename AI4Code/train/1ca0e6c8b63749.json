{"cell_type":{"bc2aae2d":"code","33bd590c":"code","f8178e15":"code","7467a3d5":"code","db461a8c":"code","c167181d":"code","3f793e77":"code","20387af3":"code","f52572a2":"code","3d2dbb59":"code","1c39e394":"code","02d33a74":"code","adec330c":"code","413d4cff":"code","2e498975":"code","2c6c03a9":"code","dab50ace":"code","72d65725":"code","8c89e419":"code","19b89b7e":"code","bc8b71ae":"code","14553a16":"code","45843b35":"code","38ac9d2c":"code","e2f2c0f2":"code","3b0a58ae":"code","44ec7e10":"code","32368c30":"code","006f1cd1":"code","9fae882c":"code","e2b6df4d":"code","8814e9b1":"code","cb93db2b":"code","0fc5f611":"markdown","85ede789":"markdown","7c674a07":"markdown","89971404":"markdown"},"source":{"bc2aae2d":"from IPython.core.display import display, HTML\nfrom multiprocessing import Pool\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nfrom PIL import ImageDraw","33bd590c":"# Bounding boxes from this kernel (@suicaokhoailang ran Martin Piotte's model on the current competition dataset)\n# https:\/\/www.kaggle.com\/suicaokhoailang\/generating-whale-bounding-boxes\nbb_df = pd.read_csv('..\/input\/boundingbox\/bounding_boxes.csv')","f8178e15":"DATA_DIR = Path('\/kaggle\/input\/humpback-whale-identification\/')\nTRAIN_DIR = DATA_DIR \/ 'train'\nTEST_DIR =  DATA_DIR \/ 'test'\n\ntrain_df = pd.read_csv(DATA_DIR \/ 'train.csv')\ntest_df = pd.read_csv(DATA_DIR \/ 'sample_submission.csv')","7467a3d5":"w, h = (bb_df.x1 - bb_df.x0), (bb_df.y1 - bb_df.y0)\nbb_df['crop_size'] = w * h\nbb_df['crop_ratio'] = w \/ h","db461a8c":"bb_df.head()","c167181d":"train_df['freq'] = train_df.groupby('Id')['Id'].transform('count')\ntrain_df['set'] = 'train'\ntrain_df = train_df.sort_values('freq', ascending=False)","3f793e77":"test_df['Id'] = 'unknown'\ntest_df['freq'] = 1\ntest_df['set'] = 'test'","20387af3":"df = pd.concat([train_df, test_df]).reset_index(drop=True)","f52572a2":"df = pd.merge(df, bb_df, on='Image')","3d2dbb59":"# Add image ratio data\ndef ratio(row):\n    im_path = TRAIN_DIR \/ row.Image if 'train' in row.set else TEST_DIR \/ row.Image\n    im = Image.open(im_path)\n    return im.width \/ im.height\n\ndef total_size(row):\n    im_path = TRAIN_DIR \/ row.Image if 'train' in row.set else TEST_DIR \/ row.Image\n    im = Image.open(im_path)\n    return im.width * im.height","1c39e394":"def draw_bb(row):\n    im_path = TRAIN_DIR \/ row.Image if 'train' in row.set else TEST_DIR \/ row.Image\n    im = Image.open(im_path)\n    bb = row.x0, row.y0, row.x1, row.y1\n    draw = ImageDraw.Draw(im) \n    draw.rectangle(bb, outline=255)\n    im.save(Path('\/kaggle\/working\/draw_crops\/') \/ row.Image)\n    return True","02d33a74":"p = Pool()","adec330c":"%%time\ndf['ratio'] = p.map(ratio, [x[1] for x in list(df.iterrows())]) #df.apply(ratio, axis=1)\ndf['total_size'] = p.map(ratio, [x[1] for x in list(df.iterrows())]) #df.apply(total_size, axis=1)","413d4cff":"df['crop_perc'] = df.crop_size \/ df.total_size","2e498975":"df[::3000]","2c6c03a9":"# !mkdir draw_crops","dab50ace":"# %%time\n# p.map(draw_bb, [x[1] for x in list(df.iterrows())])","72d65725":"df = df.drop(['x0', 'x1', 'y0', 'y1'], axis=1)","8c89e419":"df['x_rand'] = np.random.random(len(df))\ndf['y_rand'] = np.random.random(len(df))","19b89b7e":"!git clone https:\/\/github.com\/PAIR-code\/facets.git","bc8b71ae":"# If anybody is interested in building Facets themselves this might be useful. Turns out I didn't need to build Atlasmaker since it is just three Python modules.\n\n# !pip install -r facets\/facets_atlasmaker\/requirements.txt\n# !apt-get install -y pkg-config zip g++ zlib1g-dev unzip python\n# !curl -LOk https:\/\/github.com\/bazelbuild\/bazel\/releases\/download\/0.21.0\/bazel-0.21.0-installer-linux-x86_64.sh\n# !chmod +x bazel-0.21.0-installer-linux-x86_64.sh\n# !bash bazel-0.21.0-installer-linux-x86_64.sh\n\n# cd \/kaggle\/working\/facets\/facets_atlasmaker\/\n# %%time\n# !bazel build :atlasmaker\n\n# cd \/kaggle\/working\/facets\/bazel-bin\/facets_atlasmaker\/","14553a16":"cd \/kaggle\/working\/facets\/facets_atlasmaker\/","45843b35":"# Does anybody use Python 2 anymore?\n!sed -i 's\/from urlparse import urlparse\/from urllib.parse import urlparse\/g' atlasmaker_io.py\n# Let's pretend tensorflow isn't available to avoid another Python 2 problem \n!sed -i 's\/import tensorflow as tf\/import tensorflop\/g' atlasmaker_io.py","38ac9d2c":"#df.apply(lambda x: str(Path('\/kaggle\/working\/draw_crops\/') \/ x.Image), axis=1).to_csv('absolute_paths.csv', index=False)\ndf.apply(lambda x: str(TRAIN_DIR \/ x.Image) if 'train' in x.set else str(TEST_DIR \/ x.Image), axis=1).to_csv('absolute_paths.csv', index=False)","e2f2c0f2":"df.ratio.mean()","3b0a58ae":"%%time\n!python atlasmaker.py --sourcelist=absolute_paths.csv --image_width=58 --image_height=29 --output_dir=\/kaggle\/working\/","44ec7e10":"#Image.open('\/kaggle\/working\/spriteatlas.png').convert('L').save('\/kaggle\/working\/spriteatlas.png', optimize=True)","32368c30":"cd \/kaggle\/working\/","006f1cd1":"sprite_width, sprite_height = 58, 29\natlas_path = 'spriteatlas.png'\njsonstr = df.to_json(orient='records')\nhtml = f\"\"\"<link rel=\"import\" href=\"https:\/\/raw.githubusercontent.com\/PAIR-code\/facets\/master\/facets-dist\/facets-jupyter.html\">\n           <facets-dive atlas-url=\"{atlas_path}\" fit-grid-aspect-ratio-to-viewport=\"true\" sprite-image-width=\"{sprite_width}\" sprite-image-height=\"{sprite_height}\" height=\"800\" id=\"elem\"><\/facets-dive>\n           <script>document.querySelector(\"#elem\").data = {jsonstr};<\/script>\"\"\"\ndisplay(HTML(html))","9fae882c":"html = f\"\"\"<link rel=\"import\" href=\"https:\/\/raw.githubusercontent.com\/PAIR-code\/facets\/master\/facets-dist\/facets-jupyter.html\">\n           <facets-dive atlas-url=\"{atlas_path}\" fit-grid-aspect-ratio-to-viewport=\"true\" cross-origin=\"anonymous\" sprite-image-width=\"{sprite_width}\" sprite-image-height=\"{sprite_height}\" id=\"elem\"><\/facets-dive>\n           <script>document.querySelector(\"#elem\").data = {jsonstr};<\/script>\"\"\"","e2b6df4d":"with open('facets_static.html', 'w') as out_file:\n    out_file.write(html)","8814e9b1":"!(jupyter notebook list | grep http | awk '{printf $1}'; printf \"files\/facets_static.html\") | sed \"s\/http:\\\/\\\/localhost:8888\/https:\\\/\\\/www\\.kaggleusercontent\\.com\/\"","cb93db2b":"!rm -rf facets\/\n!rm -rf draw_crops\/\n!rm im_paths.csv\n!rm mani","0fc5f611":"# Google PAIR Facets\n#### https:\/\/github.com\/PAIR-code\/facets\n\nThis notebooks uses `Facets` to visualize the 33,321 images in dataset. Basics steps to do this:\n    1. Create dataframe with all image paths and any interesting metadata\n    2. Feed this dataframe to the `Atlasmaker` tool to create a montage of all the images\n    3. Use example Jupyter Notebook snippet to display HTML of visualization (https:\/\/colab.research.google.com\/github\/PAIR-code\/facets\/blob\/master\/colab_facets.ipynb)\n    \nIdeas for additional faceting visualizations:\n    - Visuals groups of incorrectly labelled images in validation. Could scatter by distance from threshold.\n    - Draw bounding boxes to verify generalization of segmentation model\n    - Use bounding box data to add fluke size and then use this to scatter images across an axis\n    - Add B&W \/ RGB column\n    - Add image ratio, image sizes to scatter on or group by\n    - Add corner cases column with labels like \"heavily occluded\", \"image with text\", etc.\n    - If doing metric learning reduce dimensionality with PCA \/ tSNE and plot the images in that space\n    \nIt takes a minute to load completely (~100MB), but you can view this full screen here: https:\/\/davidwagnerkc.github.io\/\n\nGlad I finally got to try Facets out. It needs a pip installable package with a one liner to get from DataFrame to notebook output. ","85ede789":"# View full screen from Kaggle kernel","7c674a07":"# To host locally\n\n1. Download facets_static.html and spriteatlas.png and make a folder structure like this:\n        facets_server\/\n                facets_static.html\n                spriteatlas.png\n2. cd to facets_server\/ and run this command `python -m http.server`\n3. Access locally @ `localhost:8000`","89971404":"# View in notebook"}}