{"cell_type":{"69c56c6e":"code","44f70d3c":"code","22ac5a4c":"code","9b2b43db":"code","63906c41":"code","318d3362":"code","bd36d37d":"code","a36a7940":"code","071e9ccb":"code","c9197773":"code","cfc44c32":"code","374aa66b":"code","e2087e13":"code","6748ae44":"code","cb218f82":"code","a797ddb9":"code","26407069":"code","39d60df7":"code","bfe3676a":"code","13b9903d":"code","72e549b3":"code","8ceba742":"code","ff62d031":"code","6e37e9dd":"code","e2f80b92":"code","7fac0a8e":"code","9aa10647":"code","3b4e1e63":"code","ef6d548b":"code","07be13f1":"code","a30a7506":"code","dc98aef1":"markdown","5a48fb97":"markdown","f1674ba9":"markdown","4dea54f8":"markdown","fad684fd":"markdown","fa9bd512":"markdown","f2c94ce2":"markdown","de2a8883":"markdown","5dd5d6a6":"markdown","8a91b313":"markdown","e7225622":"markdown","3ed4331a":"markdown","31123920":"markdown","f389fec9":"markdown","31cea254":"markdown","b82fe081":"markdown"},"source":{"69c56c6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","44f70d3c":"dataset=pd.read_csv(\"..\/input\/anime-recommendations-database\/anime.csv\")","22ac5a4c":"dataset","9b2b43db":"dataset.isnull().sum()","63906c41":"dataset=dataset.dropna()\n","318d3362":"dataset","bd36d37d":"dataset.shape","a36a7940":"dataset.info()","071e9ccb":"rating_df = pd.read_csv('..\/input\/anime-recommendations-database\/rating.csv')\nrating_df","c9197773":"rating_df.shape","cfc44c32":"df_merge=pd.merge(dataset, rating_df, on = 'anime_id')","374aa66b":"df_merge.shape","e2087e13":"df_merge.rating_x.min()","6748ae44":"df_merge = df_merge[df_merge.rating_y != -1]","cb218f82":"df_merge.shape","a797ddb9":"sample = df_merge.sample(frac=.25)\nsample.shape","26407069":"sample.dtypes","39d60df7":"sample['rating_x'] = sample['rating_x'].astype(int)","bfe3676a":"sample.dtypes","13b9903d":"ratings_x = sample['rating_x'].value_counts() #continuous\nratings_y = sample['rating_y'].value_counts() #discrete\nprint(ratings_x)\nprint(ratings_y)","72e549b3":"sample.rating_x = sample.rating_x.apply(round) ","8ceba742":"sample.head()","ff62d031":"sample.shape","6e37e9dd":"import matplotlib.pyplot as plt\nratings_sorted = sorted(list(zip(ratings_y.index, ratings_y)))\nplt.bar([r[0] for r in ratings_sorted], [r[1] for r in ratings_sorted], color='blue')\nplt.xlabel(\"Rating\")\nplt.ylabel(\"# of Ratings\")\nplt.title(\"Distribution of Ratings\")\nplt.show()","e2f80b92":"import seaborn as sns\nfig = plt.figure(figsize=(12\n                          ,5))\nsns.countplot(sample['type'], palette='gist_rainbow')\nplt.title(\"Most Viewed Anime on Type\", fontsize=20)\nplt.xlabel(\"Types\", fontsize=20)\nplt.ylabel(\"Number of Views with Reviews\", fontsize = 20)\nplt.grid()\nplt.show()","7fac0a8e":"from surprise import Reader\nfrom surprise import Dataset\ndata = sample[['user_id', 'anime_id', 'rating_x']] #may need to do rating_x rounded and then use rating_y\nreader = Reader(line_format='user item rating', sep='')","9aa10647":"anime = Dataset.load_from_df(data, reader)","3b4e1e63":"#train_test_split\nfrom surprise.model_selection import train_test_split\nfrom surprise.model_selection import GridSearchCV\nfrom surprise.model_selection import cross_validate\nfrom surprise.prediction_algorithms import KNNWithMeans, KNNBasic, KNNBaseline\nfrom surprise.prediction_algorithms import knns\nfrom surprise.prediction_algorithms import SVD\nfrom surprise.similarities import cosine, msd, pearson\nfrom surprise import accuracy\ntrainset, testset = train_test_split(anime, test_size=.2)","ef6d548b":"#INSTANTIATE the SVD and fit only the train set\nsvd = SVD()\nsvd.fit(trainset)","07be13f1":"predictions = svd.test(testset) \naccuracy.rmse(predictions)","a30a7506":"#","dc98aef1":"Lets Convert","5a48fb97":"I have decided to take out the columns with no ratings, that are represented as -1","f1674ba9":"First thing\u2019s first! Do a base model. I started with transforming my data.","4dea54f8":"Lets Check the 2nd dataset also","fad684fd":"Important thing for SVD is to make your variables discreet, otherwise, it\u2019ll take alot more of your time.","fa9bd512":"As i am going to use SVD so it cannot handle this much data. So lets reduce it ","f2c94ce2":"As both Anime and rating have same column that is anime_id, **So join them**","de2a8883":"Still too large so i convert it into small size","5dd5d6a6":"As you see it almost remove the 1 lakh rows from dataset","8a91b313":"it seems that the rating dataframe is based on each user and their individual rating for each anime id, whereas the anime dataframe is an average overall rating from all of its viewers.\n**we are going to look at how many times each rating appears in a column**","e7225622":"Check if some null values are here or not.","3ed4331a":"As we see a very less null values inside the dataset let say:\n> in Genre only 0.5% are null values\n> In type only 0.2%\n> In ratings 1.8%\n> So remove the null values","31123920":"****EDA****","f389fec9":"This is what i have made .\n> I know this is not the great accuracy can anyone suggest some other methods so i can try those.\n>> thanks in advance","31cea254":"**Analysis Part**","b82fe081":"What each column represents:\n> user_id: non-identifiable randomly generated user-id\n> > anime_id: the anime that the user has rated\n> > > rating: rating out of 10 this user has assigned (-1 if the user watched it but didn\u2019t assign a rating)"}}