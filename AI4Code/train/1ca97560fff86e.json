{"cell_type":{"44361ebd":"code","60c709ae":"code","aadb2f68":"code","1554425a":"code","3d83e958":"code","b7316827":"code","8d5f3de1":"code","e26ed7cd":"code","cb1b5e89":"code","0be01322":"code","da54471a":"code","d659467b":"markdown"},"source":{"44361ebd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60c709ae":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ndf_train.head()","aadb2f68":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ndf_train.tail()","1554425a":"df_test = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\ndf_test.head()","3d83e958":"#check the missing values\nprint(df_train.isnull().sum())\n\n\nprint(df_test.isnull().sum())","b7316827":"df_train.describe()","8d5f3de1":"df_train['date'] = pd.to_datetime(df_train['date'])\ndf_test['date'] = pd.to_datetime(df_test['date'])","e26ed7cd":"df_train.info","cb1b5e89":"#Monthly trend\ndf_train.monthly = df_train.set_index('date').groupby([pd.Grouper(freq = 'M')])[['num_sold']].mean()\n\nplt.figure(figsize = (12, 7))\nsns.lineplot(x = 'date', y = 'num_sold', data = df_train, label = 'daily')\nsns.lineplot(x = 'date', y = 'num_sold', data = df_train.monthly, label = 'monthly mean', color = 'red')\nplt.title('Monthly Trend')\nplt.grid(alpha = 0.5)\nplt.show()","0be01322":"# day of week\ndf_train['dayofweek'] = df_train['date'].dt.dayofweek\ndf_test['dayofweek'] = df_test['date'].dt.dayofweek","da54471a":"df_train['weekend'] = df_train['dayofweek'].apply(lambda x : x >= 5)\ndf_test['weekend'] = df_train['dayofweek'].apply(lambda x : x >= 5)\ndf_train.weekend = df_train.set_index('date').groupby([pd.Grouper(freq = 'M'), 'weekend'])[['num_sold']].mean()\n\nplt.figure(figsize = (10, 7))\nsns.lineplot(x = 'date', y = 'num_sold', hue = 'weekend', data = df_train.weekend)\nplt.title('Weekend vs. Weekday Trend Comparison')\nplt.grid(alpha = 0.5)\nplt.show()","d659467b":"**DATA VISUALIZATION**"}}