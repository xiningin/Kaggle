{"cell_type":{"803674f0":"code","a6fdab32":"code","5bc819cd":"code","ae9d9b3b":"code","4441a7fa":"code","abf2bb5e":"code","49abdacb":"code","b03c12ca":"code","af6747d1":"code","0d897845":"code","35cee890":"code","c2a8b053":"code","242f6189":"code","952a625d":"code","82f0d749":"code","3857f6d8":"code","85b4ea60":"code","a1fd4ed0":"code","eef6318a":"code","645997df":"code","09aac373":"code","1ca6acf2":"code","d97267b3":"code","0acee135":"code","cad3b21d":"code","f7dcdbfa":"code","07c5a019":"code","1692a533":"code","75c012d8":"code","139ab37b":"code","9e305025":"code","b7cc68ce":"code","e69505bc":"code","254948d2":"code","360aa929":"code","b9bdcfe3":"code","bcca2423":"code","60c6f844":"markdown","63e70ce2":"markdown","8374805d":"markdown","64a95159":"markdown","70dd5699":"markdown"},"source":{"803674f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a6fdab32":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics as metrics\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance","5bc819cd":"#Data Preprocessing ","ae9d9b3b":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","4441a7fa":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","abf2bb5e":"\n\ntrain_data.dtypes","49abdacb":"train_data.columns","b03c12ca":"train_data.describe(include='all')","af6747d1":"test_data.columns","0d897845":"target= train_data['Survived']\ntarget.shape","35cee890":"train_data.drop(['Survived'], axis=1, inplace = True)","c2a8b053":"train_data.shape","242f6189":"train1=train_data\ntest1=test_data\n\nprint('Ready to concatinate!')","952a625d":"df = pd.concat([train1, test1], axis=0,sort=False)\ndf.shape","82f0d749":"df.isnull().sum()","3857f6d8":"PassengerId=test_data.PassengerId\nPassengerId.shape","85b4ea60":"df.drop(['PassengerId','Name','Ticket','Cabin'], axis=1, inplace=True)\n","a1fd4ed0":"df.shape","eef6318a":"\ndf.fillna(df.median(), inplace=True)","645997df":"df.describe(include='all')","09aac373":"df.isnull().sum()","1ca6acf2":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)","d97267b3":"df.isnull().sum()","0acee135":"df = pd.get_dummies(df, columns=['Pclass', 'Sex', 'SibSp', 'Parch','Embarked'])\n","cad3b21d":"df.columns","f7dcdbfa":"df.head()","07c5a019":"df_train = df.iloc[:891,:]\n\ndf_test = df.iloc[891:,:]\n\nprint(\"Shape of new dataframes - {} , {}\".format(df_train.shape, df_test.shape))","1692a533":"from sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics as metrics","75c012d8":"df_train = preprocessing.StandardScaler().fit(df_train).transform(df_train)\ndf_train[0:5]","139ab37b":"x_train,x_test,y_train,y_test = train_test_split(df_train,target,test_size=0.33,random_state=0)","9e305025":"print(x_train)\nx_train.dtype","b7cc68ce":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\n\nparameter_grid = {'C': [0.0001, 0.001, 0.01, 0.1], 'gamma' : [00.1, 0.10, 1, 10]}\n\n\ngrid_search = GridSearchCV(SVC(kernel='rbf'), cv=10, param_grid = parameter_grid)\n\ngrid_search.fit(x_train, y_train)\n\nprint (\"Best Score: {}\".format(grid_search.best_score_))\nprint (\"Best params: {}\".format(grid_search.best_params_))","e69505bc":"SVC_model = SVC(C=0.1, gamma=0.1, kernel='rbf')\nSVC_model.fit(x_train, y_train)\n","254948d2":"\nperm = PermutationImportance(SVC_model).fit(x_test, y_test)\neli5.show_weights(perm, feature_names = df.columns.tolist())","360aa929":"\ndf_test = preprocessing.StandardScaler().fit(df_test).transform(df_test)\ndf_test[0:5]","b9bdcfe3":"SVC_model.fit(df_train,target)\nprediction=SVC_model.predict(df_test)","bcca2423":"output = pd.DataFrame({'PassengerId': PassengerId, 'Survived': prediction})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","60c6f844":"Interpreting Permutation Importances\nThe importance of the features decreases down the table, with the top values being the most important ones.\n\nThis shows that sex is the most important factor which determines the survival or otherwise of the passangers.","63e70ce2":"It is important to check that the correct data types are used.","8374805d":"Data Preprocessing","64a95159":"From the counts, it is aparent that there are missing scores. Ther are various ways to take care of this but mean would be used.\n\nThe missing data for 'Cabin' is too huge: 77.1%. Hence, the column will be dropped.","70dd5699":"Then, lets take care of the missing values."}}