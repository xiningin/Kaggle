{"cell_type":{"99589ea6":"code","de4968ff":"code","17dd1d7e":"code","3aec3f1d":"code","e56b4fe5":"code","33bd46d4":"code","bd179aea":"code","66633bca":"code","dc4d2419":"code","a727901f":"code","c383aedb":"code","4ddf3dd3":"code","c70165f6":"code","cef5d2d6":"code","a5256fe4":"code","7a8283bf":"code","b3884bb9":"code","2d1237b9":"code","d270d7a2":"code","9a750b26":"code","f22e10c3":"code","dc85a696":"code","9c0a7117":"code","a0178db8":"code","83f2dec6":"code","737dacb0":"code","5a3ff220":"code","6a8f9e8b":"code","f977e17b":"code","7c29bf99":"code","fb01611b":"code","4fb0f2dd":"code","38a68443":"code","353f29e6":"code","76487b0b":"code","be8b0ea2":"code","d79c14c0":"code","d74b4d6f":"code","0f2fa49a":"code","7c481e7c":"code","bd6f94c6":"code","aa06f8ad":"code","39bc6ed1":"code","03058265":"code","87a36d30":"code","6b3a6f5b":"code","e9f0ea99":"code","166c4bdc":"code","ee5cf956":"code","6cda7065":"code","6de48a72":"code","93beb69b":"code","41024f79":"code","9c17ee82":"code","f3fdd731":"code","b6fd2ef0":"code","6a79f274":"code","dad5754a":"code","b23a0361":"code","c31b1733":"code","93812665":"code","bd504970":"code","2c583ac3":"code","8a3d8a17":"code","c9a49c92":"code","959a83c2":"code","b1454e80":"code","2e23ce00":"code","4861c92f":"code","59a0d2de":"code","20cfeb97":"code","8ef47b9e":"code","fe96aa9e":"code","72d12c5e":"code","20409223":"code","f6d3a5fb":"code","d2dfd7c0":"code","2c436eda":"markdown","0aa8c981":"markdown","60fc833f":"markdown","ce9209b1":"markdown","5cf231bb":"markdown","40f3756a":"markdown","56e46afe":"markdown","02958aff":"markdown","de495306":"markdown","af95d6d7":"markdown","f81b8f87":"markdown","102473c3":"markdown","f07f460a":"markdown","2aebefdb":"markdown","ead40402":"markdown","bfd0d335":"markdown","8031bba8":"markdown","6116fb96":"markdown","a690f485":"markdown","13a3964e":"markdown","0f989ae7":"markdown","4b483255":"markdown","96f4a2e3":"markdown"},"source":{"99589ea6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n# LIKE US ON FB: https:\/\/www.facebook.com\/codemakerz\n# Any results you write to the current directory are saved as output.","de4968ff":"# load data\ndf = pd.read_csv(\"..\/input\/googleplaystore.csv\", encoding='utf-8')","17dd1d7e":"# So we got our dataset\ndf.head() \n# Here in our dataset we can see Result = 0, 1 that mean 1 mean selected celebrity has cancer and 0 means no cancer","3aec3f1d":"# you can also mention the number of rows\ndf.head(7)","e56b4fe5":"# so before visualization lets do some EDA. Exploratory data analysis.","33bd46d4":"# Lets find is there any missing values?\ndf.isnull().sum() # We can see in Rating we have 1474 missing values & 1 value in Type, 1 in content rating and others also","bd179aea":"# Lets see the all columns names\ndf.columns","66633bca":"# Find the datatype of all the columns \ndf.dtypes","dc4d2419":"# total number of records in dataset\ndf.count()","a727901f":"# Summary statistics. It will show you the summary statistic for all the numerical values\ndf.describe()","c383aedb":"# info is also used to see some important statistics for dataset.\ndf.info()","4ddf3dd3":"# This will show you top 5 Name columns. As head return top 5\ndf.App.head()","c70165f6":"# you can also do above same thing with array type\ndf[[\"App\"]].head()","cef5d2d6":"# show multiple columns\ndf[[\"App\", \"Rating\"]].head()","a5256fe4":"# you can also watch below 5 using tail\ndf[[\"App\", \"Rating\"]].tail()","7a8283bf":"# Basic statistics\nprint(\"Mean Age: \", df.Rating.mean())\nprint(\"Median Age: \", df.Rating.median())\nprint(\"Variance Age: \", df.Rating.var())\nprint(\"Standard Deviation Age: \", df.Rating.std())\nprint(\"25th Percentile of Age: \", df.Rating.quantile(.25))\nprint(\"50th Percentile of Age: \", df.Rating.quantile(.5))\nprint(\"75th Percentile of Age: \", df.Rating.quantile(.75))","b3884bb9":"# position based indexing\n# We use iloc for this. Here we mention [row, cols] like this.\n# : as row means all the rows & 1:4 as columns means 1st index(2nd columns aqs index start from 0), 3rd column and 4th column. 4th index will not included\/\ndf.iloc[:, 1:4].head()","2d1237b9":"# name based indexing\n# in below example we are using all the rows(:) and only Name and Age column.\n# you can use any indexing method but i usually prefer iloc. As i am more comfortable with indices.\ndf.loc[:,[\"App\", \"Rating\"]].head()","d270d7a2":"# lets find out different type of Type column\ndf.Type.value_counts()\n# we can see the number of free and paid apps","9a750b26":"# Plot Univariate distribution for Ratings using histogram. It will show the total number or app according to the ratings.\n# Total number of app acccording to  the ratings\nplt.figure(figsize= (15, 10));\n#plt.hist(x=df.Rating, color='c');\ndf.Rating.plot(kind=\"hist\", bins=30, color='c')\nplt.title(\"Univariate: Rating Histogram\");\nplt.xlabel(\"Rating\");\nplt.ylabel(\"Total Counts\");\nplt.xlim(right=6)\nplt.plot();","f22e10c3":"# lets see how many categories are there and total number of apps grouped by category\ndf.Category.value_counts()\n# So it clearly show the count of apps for a particular category. value_counts() is very handly function for this.","dc85a696":"# but really saying this data is not convincing... we can make it more appealing by plotting it.\n# lets plot it.\nplt.figure(figsize=(15,10))\ndf.Category.value_counts().plot(kind=\"bar\", rot=0, title=\"Pclass Vs Count\", color='c', );\nplt.xticks(rotation='vertical');\nplt.title(\"Category Vs App Count\")\nplt.xlabel(\"Category Name\")\nplt.ylabel(\"Count\")\nplt.plot();","9c0a7117":"# So now from above example we can see that mostly apps belongs to the family, games , tool category.\n# and beauty categroy app is least in number.","a0178db8":"# Lets plot the average rating of eah category.\ndf.groupby([\"Category\"]).Rating.mean()\n# We can see 1.9 category has a rating of 19.0.. which is not possible as our rating is out of 5.\n# So definitly it may be some data issue. Now what to do?","83f2dec6":"df[df[\"Category\"] == '1.9'] # We can see Rating has a value of 19.0, which is not possible.\n# So we have two choices:\n# 1. Either we remove this row\n# 2. Correct this value.\n# i will not prefer removing row as it is the only row related to the category 1.9.\n# lets replace this value with average rating.","737dacb0":"# inplace will save your change to the original dataframe\ndf[\"Rating\"].replace(19.0, df.Rating.mean(), inplace=True)","5a3ff220":"# now lets check again\ndf[df[\"Category\"] == '1.9'] # So we have finally replaced it to the average value","6a8f9e8b":"df.groupby([\"Category\"]).Rating.mean() # So we can see now average values are correct for all categries","f977e17b":"plt.figure(figsize=(15,10))\ndf.groupby([\"Category\"]).Rating.mean().plot(kind=\"bar\", rot=0, title=\"Pclass Vs Count\");\nplt.xticks(rotation='vertical');\nplt.xlabel(\"Category Name\")\nplt.ylabel(\"Avg. Rating\")\nplt.title(\"Category Vs Avg. Rating\")\nplt.plot();","7c29bf99":"# so now we can see the average rating. As per our data average rating is almost same for all so bars are almost equal.","fb01611b":"df.groupby([\"Category\", \"Installs\"]).Rating.mean()","4fb0f2dd":"# Lets find out how many apps are paid or free.\ndf.Type.value_counts()","38a68443":"plt.figure(figsize=(15, 10));\ndf.Type.value_counts().plot(kind=\"bar\");\nplt.xlabel(\"License Type\");\nplt.ylabel(\"Counts\")\nplt.title(\"License Type Vs Counts\")\nplt.plot();","353f29e6":"#So from our above diagrame we can see we have huge number of free apps.","76487b0b":"# Lets try to find out the content rating.. that mean how many adult apps are there or how many non-adult apps.\ndf.columns # it will select content rating column\n","be8b0ea2":"df['Content Rating'].value_counts() # you can see we have 6 categories in content rating.","d79c14c0":"plt.figure(figsize=(15, 10), dpi=100, );\ndf[\"Content Rating\"].value_counts().plot(kind=\"bar\");\nplt.title(\"Content Vs Total Count\");\nplt.xlabel(\"Content Type\");\nplt.ylabel(\"Count\");\nplt.ylim(bottom=-10);\nplt.plot();","d74b4d6f":"# Actually you can see last two bars are almost hidden because the value is very less.","0f2fa49a":"# now lets see apps grouped by os version \ndf[\"Android Ver\"].value_counts()","7c481e7c":"df[df[\"Android Ver\"] == '1.0 and up'] # we can verify the above data by using this command. You can\n# simply replace the value of OS and get the number.","bd6f94c6":"plt.figure(figsize=(15, 10));\nplt.xlabel(\"Anroid Version\");\nplt.ylabel(\"Total Apps\");\nplt.title(\"Android Version Vs Total Conts\");\ndf[\"Android Ver\"].value_counts().plot(kind=\"bar\");\nplt.plot();","aa06f8ad":"df[\"Android Ver\"].value_counts(normalize=True) # You can get the percentage","39bc6ed1":"df[\"Genres\"].value_counts() # here can find all the genres.. Try its plot yourself","03058265":"# Lets plot top 10 genres\nplt.figure(figsize=(15, 10));\ndf[\"Genres\"].value_counts().head(10).plot(kind=\"bar\");\n#df.groupby([\"Genres\"])..head(10).plot(kind=\"bar\");\nplt.title(\"Top 10 Genres\");\nplt.xlabel(\"Genres\");\nplt.ylabel(\"Count\");\nplt.plot();","87a36d30":"# you can verify using below statement.\n# So found the genre wise installs\ndf[df[\"Genres\"] == 'Video Players & Editors;Music & Video']","6b3a6f5b":"# We need to change the dtype of review but there is one column whih contains 3.0M\ndf.Reviews.replace(\"3.0M\", '3000000', inplace=True)\ndf[df.Reviews == \"3.0M\"]","e9f0ea99":"df.Reviews = df.Reviews.astype(\"float\") # lets change the datatype of Ratings","166c4bdc":"\ndf_new = df.groupby([\"Genres\", \"Category\"], as_index=False).sum()[[\"Genres\", \"Category\", \"Reviews\"]].sort_values(by=\"Reviews\", ascending=False).head(10)\n","ee5cf956":"df_new","6cda7065":"# Below diagram shows the ;top 10 famous genres as per there review counts\nplt.figure(figsize=(15, 10));\nplt.title(\"Top 10 Most Reviewed Genres\");\nplt.xlabel(\"Genres\");\nplt.ylabel(\"Count\");\ndf_new.groupby(\"Genres\").Reviews.sum().sort_values(ascending=False).plot(kind='bar');\nplt.plot();","6de48a72":"# lets find out category wise application type, how many free and paid apps are there in a category.\npd.crosstab(df[\"Category\"], df[\"Type\"]).apply(lambda r: r\/r.sum(), axis=1)","93beb69b":"# AS we can see there is one app with type 0, which is obviously not the proper type. Lets fetch that row.\nindexNames = df[df[\"Type\"]== '0'].index # find the index\n# So we can see its pricing is also not there(everything) and installs section is free. So in this case this data seems to be improper.\n# as it doesnt have any exceptional infomrmation so we can remove this.\n# Delete these row indexes from dataFrame\ndf.drop(indexNames , inplace=True) # delete the row","41024f79":"pd.crosstab(df[\"Category\"], df[\"Type\"]).plot(kind=\"bar\",figsize=(15, 10));\nplt.plot();\n","9c17ee82":"# Handle missing values\ndf.isnull().sum() # we can see 4 columns have missing values. Lets start with Type","f3fdd731":"df[df.Type.isnull()] # lets fetch first","b6fd2ef0":"# As we can clearly see, its price is 0 that mean it is from free type. So we can replace it.\ndf.Type.fillna(\"Free\", inplace=True) # replaced","6a79f274":"df[df.Type.isnull()]  # No null values","dad5754a":"# now lets handle android version column missing values\ndf[df['Android Ver'].isnull()]","b23a0361":"# We can see we have android ver for both of the records. Lets see a crosstab for android ver and current ver\npd.crosstab(df[(df['Current Ver'] == '4.4')]['Current Ver'], df[(df['Current Ver'] == '4.4')][\"Android Ver\"])","c31b1733":"pd.crosstab(df[(df['Current Ver'] == '4.4')]['Current Ver'], df['Android Ver']).plot(kind='bar', figsize=(15, 10))","93812665":"# We can see there is last updated column, we canuse it to extact year and then we can find out which Andriod Version was popular at that time.\n# Seems like a good finding.\n# Lets create one function to extract year from the Last Updated.\ndef get_year(date):\n    year = date.split(',')[1]\n    year = year.strip()\n    return year","bd504970":"df[\"Last Updated\"].map(lambda x: get_year(x)) # we get the year","2c583ac3":"# lets create a new column for year\ndf[\"Year\"] = df[\"Last Updated\"].map(lambda x: get_year(x))","8a3d8a17":"df.head()","c9a49c92":"# now lets plot crosstab for year and android ver\npd.crosstab(df[df[\"Year\"] == '2018'].Year, df[\"Android Ver\"])","959a83c2":"pd.crosstab(df[df[\"Year\"] == '2018'].Year, df[\"Android Ver\"]).plot(kind='bar', figsize=(15, 10))","b1454e80":"# so we can see in year 2018 mostly app were using android version 4.1 and up. So this seems a fair analysis. Let replace with this value.\nmost_frequent_andoid = df['Android Ver'].value_counts().idxmax()\ndf[\"Android Ver\"].fillna(most_frequent_andoid, inplace=True)","2e23ce00":"# lets check again for null values in android version\ndf[df[\"Android Ver\"].isnull()] # So no records... its done.","4861c92f":"# lets check again for null values in whole data frame\ndf.isnull().sum() # so we can see rating has a big number of missing values. Lets deal with it.","59a0d2de":"pd.options.display.max_rows  = 15  # it will display always 15 rows.","20cfeb97":"# lets fetch all the missing value rows for Rating\ndf[df[\"Rating\"].isnull()] # there are total 1474 rows","8ef47b9e":" #Lets get the median review according to genre and category\ndf.groupby([\"Genres\", \"Category\"]).Rating.median()","fe96aa9e":"df.groupby([\"Genres\", \"Category\"]).Rating.median().plot(kind=\"bar\", figsize=(30, 10));\n# so we can see Ratings for all the genres and category are simillar. ","72d12c5e":"# lets find out the median rating of total df\ndf.Rating.median() # in this case our median is also simillar to category and genres wise grouped data. so lets replace with this data only.","20409223":"median_rating = df.Rating.median()\ndf.Rating.fillna(median_rating, inplace = True)","f6d3a5fb":"df[df.Rating.isnull()] # so finally we replaced all the missing values. Lets check it","d2dfd7c0":"df.isnull().sum() # so finally we got rid of missing values.","2c436eda":" ## Handle Missing Values","0aa8c981":"#### Select Multiple Columns","60fc833f":"## Describe() - Descriptive Statistic for Dataframe","ce9209b1":"## Get Different Value Counts for Categorical Features","5cf231bb":"## Location Base Indexing","40f3756a":"## Get Column wise Record Count","56e46afe":"## Info Function to Get General Column Information","02958aff":"### Thank you for visting my code. If there is anything missing or wrong, please feel free to inform me. Also like my page on fb: https:\/\/www.facebook.com\/codemakerz\n\n\n#### Stay tuned for the more updates in the same notebook.","de495306":"## Pandas Crosstabs","af95d6d7":"## Top n Columns using head()","f81b8f87":"## Select Last 5 Records for Selected Columns (Use it same as head())","102473c3":"## Find Out How Many Missing Values are There?","f07f460a":"#### Select Single Column","2aebefdb":"## Visualizations","ead40402":"## Get All the Column Names","bfd0d335":"#### Handle Missing Values in Rating Column","8031bba8":"### Thank you for visting my code. If there is anything missing or wrong, please feel free to inform me. Also like my page on fb: https:\/\/www.facebook.com\/codemakerz","6116fb96":"## General Statistic - Mean, Median, Standard Deviation, Variance and Percentiles.","a690f485":"#### Handle Missing Values in Type Column","13a3964e":"## Crosstab Plot","0f989ae7":"## Selection & Indexing","4b483255":"#### Handle Missing Values in \"Android Ver\" Column","96f4a2e3":"## Get All Column Datatypes"}}