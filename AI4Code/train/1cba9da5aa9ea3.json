{"cell_type":{"7571e23b":"code","399b5ae7":"code","92276735":"code","712bb792":"code","2a937f4d":"code","d0583405":"code","452bf628":"code","64f4f263":"code","75369359":"code","175b77bd":"code","04662990":"code","f0d7b19e":"code","0f29d17a":"code","18363fff":"code","3fdf600b":"code","e99b7ffc":"code","e0c548dd":"code","ee0e09ec":"code","9a492746":"code","b31d4e6a":"code","8fb3ae62":"code","8c9c445d":"code","1ca571f1":"code","baeb4948":"code","ccfec14a":"code","db1a0ca5":"code","9b052e5f":"code","38b544f2":"code","40e03cba":"code","74a74faa":"code","0cd795f4":"code","6201b7cb":"code","bba578b2":"code","153fb73c":"code","0ab57728":"code","dfb98de3":"code","249bfbd1":"code","538f0b6e":"code","769ba9a5":"code","f20ba71f":"code","b2ed675b":"code","ea302aef":"code","81f7aade":"code","3a1fba6a":"code","0dc5c072":"code","3344bfc4":"code","27c3c6b5":"code","0cc209d0":"code","4d24175d":"code","951727fc":"code","05d71543":"code","3c2d1f96":"code","329b5e59":"code","355adbfb":"code","08df287b":"code","c4147e99":"code","288e6b95":"code","c2ac5bcf":"code","260da775":"code","8428231e":"code","fbcaf7b0":"code","72bd06b0":"code","91ee3ef9":"code","7240377d":"code","aa93ad11":"code","4c4ee3ef":"code","23aa804b":"code","6e486dfb":"code","18737675":"code","3dab745f":"code","2c2d1327":"code","1946e2bc":"code","997d2693":"code","35db00a3":"code","171e3a74":"code","5c12a2eb":"code","2dfebf77":"code","91b9a84b":"code","05de431a":"code","c441958a":"code","af9b3940":"code","df78aa01":"code","772c6ced":"code","b0e05b58":"code","ef38da15":"code","8c7d47b2":"markdown","93e0ff31":"markdown","47b5de9c":"markdown","d990b4a8":"markdown","27160ac5":"markdown","b5db22be":"markdown","41b2b471":"markdown"},"source":{"7571e23b":"import pandas as pd\n#import matplotlib.pyplot as plt\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","399b5ae7":"train.head(80)","92276735":"test.head()","712bb792":"train.shape","2a937f4d":"test.shape","d0583405":"train.info()","452bf628":"test.info()","64f4f263":"train.isnull().sum()","75369359":"test.isnull().sum()","175b77bd":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","04662990":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","f0d7b19e":"bar_chart('Sex')","0f29d17a":"bar_chart('Pclass')","18363fff":"bar_chart('SibSp')","3fdf600b":"bar_chart('Parch')","e99b7ffc":"bar_chart('Embarked')","e0c548dd":"train.head()","ee0e09ec":"train.head(10)","9a492746":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","b31d4e6a":"train['Title'].value_counts()","8fb3ae62":"test['Title'].value_counts()","8c9c445d":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","1ca571f1":"train.head()","baeb4948":"test.head()","ccfec14a":"bar_chart('Title')","db1a0ca5":"# delete unnecessary feature from dataset\ntrain.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)","9b052e5f":"train.head()","38b544f2":"test.head()","40e03cba":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","74a74faa":"bar_chart('Sex')","0cd795f4":"train.head(100)","6201b7cb":"# fill missing age with median age for each title (Mr, Mrs, Miss, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"mean\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"mean\"), inplace=True)","bba578b2":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"mean\")","153fb73c":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show() ","0ab57728":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","dfb98de3":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","249bfbd1":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","538f0b6e":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","769ba9a5":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","f20ba71f":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","b2ed675b":"train.info()","ea302aef":"test.info()","81f7aade":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","3a1fba6a":"train.head()","0dc5c072":"bar_chart('Age')","3344bfc4":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","27c3c6b5":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","0cc209d0":"train.head()","4d24175d":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","951727fc":"# fill missing Fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"mean\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"mean\"), inplace=True)\ntrain.head(50)","05d71543":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()  ","3c2d1f96":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","329b5e59":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","355adbfb":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","08df287b":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","c4147e99":"train.head()","288e6b95":"train.Cabin.value_counts()","c2ac5bcf":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","260da775":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","8428231e":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","fbcaf7b0":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","72bd06b0":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","91ee3ef9":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","7240377d":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","aa93ad11":"train.head()","4c4ee3ef":"train.head()","23aa804b":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","6e486dfb":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","18737675":"train_data.head(10)","3dab745f":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","2c2d1327":"train.info()","1946e2bc":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","997d2693":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","35db00a3":"# kNN Score\nround(np.mean(score)*100, 2)","171e3a74":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","5c12a2eb":"# decision tree Score\nround(np.mean(score)*100, 2)","2dfebf77":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","91b9a84b":"# Random Forest Score\nround(np.mean(score)*100, 2)","05de431a":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","c441958a":"# Naive Bayes Score\nround(np.mean(score)*100, 2)","af9b3940":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","df78aa01":"round(np.mean(score)*100,2)","772c6ced":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","b0e05b58":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","ef38da15":"submission = pd.read_csv('submission.csv')\nsubmission.head()","8c7d47b2":"The Chart confirms **Women** more likely survivied than **Men**","93e0ff31":"There are 177 rows with missing *Age*, 687 rows with missing *Cabin* and 2 rows with missing *Embarked* information.","47b5de9c":"### import python lib for visualization","d990b4a8":"We can see that *Age* value is missing for many rows. \n\nOut of 891 rows, the *Age* value is present only in 714 rows.\n\nSimilarly, *Cabin* values are also missing in many rows. Only 204 out of 891 rows have *Cabin* values.","27160ac5":"The Chart confirms **1st class** more likely survivied than **other classes**  \nThe Chart confirms **3rd class** more likely dead than **other classes**","b5db22be":"#### Title map\nMr : 0  \nMiss : 1  \nMrs: 2  \nOthers: 3\n","41b2b471":"### 4.3 Sex\n\nmale: 0\nfemale: 1"}}