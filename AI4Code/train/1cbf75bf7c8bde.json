{"cell_type":{"598b69a3":"code","24042804":"code","a26ce093":"code","131d6b87":"code","a0da39a4":"code","e912813b":"code","27256dbb":"code","80ff3574":"code","1b10c368":"code","03d3ab12":"code","0000bceb":"code","5c78e2eb":"code","c2492463":"code","3b86d1e2":"code","260b2213":"code","1e248b03":"code","282aabec":"code","bc2e802f":"code","347ed967":"markdown","11876364":"markdown","38d1274c":"markdown","42c1963a":"markdown","f3d7510f":"markdown","e88e80b2":"markdown","45fbe354":"markdown","c227a5ca":"markdown","46ee7b0d":"markdown","8187c2ba":"markdown","bdc365e6":"markdown","a2f8c384":"markdown","8d0fa451":"markdown"},"source":{"598b69a3":"import glob\nimport numpy as np\nimport pandas as pd\nimport json\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array","24042804":"train_csv_path = '..\/input\/cassava-leaf-disease-classification\/train.csv'\njson_path = '..\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json'\nimg_dir = '..\/input\/cassava-leaf-disease-classification\/train_images\/'","a26ce093":"with open (json_path, 'r') as file:\n    class_names = json.load(file)\n\n#print id and class_names \nclass_names","131d6b87":"train_data = pd.read_csv(train_csv_path)\ntrain_data.head()","a0da39a4":"lc = train_data.label.value_counts()\nclass_count={}\nfor i in range(len(lc)):\n  class_count[i] = lc[i]\nprint(class_count)","e912813b":"print('total images-', train_data.shape[0])\nplt.bar(class_count.keys(),class_count.values())\nplt.xlabel('class id')\nplt.ylabel('number of images')","27256dbb":"train_data.label = train_data.label.astype('str')\nprint(train_data.dtypes)","80ff3574":"def visualize_images(data,row=1,col=3):\n    fig = plt.figure(figsize=(10,10))\n#     row, col = 3,3\n    for i in range(row*col):\n        fig.add_subplot(row, col, i+1).set_title(class_names[data.label[i]])\n        img = load_img(img_dir + data.image_id[i])\n        img = img_to_array(img, dtype = np.uint8)\n        plt.imshow(img)\n    plt.show()","1b10c368":"random_data = train_data.sample(10).reset_index(drop=True)\n# class_0 = train_data[train_data.label == \"0\"].sample(10).reset_index(drop=True)","03d3ab12":"visualize_images(random_data,1,3)\n# visualize_images(class_0,1,3)","0000bceb":"IMG_SIZE = 512\nbatch_size = 64","5c78e2eb":"train_generator = ImageDataGenerator(\n                                    rotation_range=90,\n#                                     width_shift_range=0.2,\n#                                     height_shift_range=0.2,\n#                                     brightness_range=[0.1,0.9],\n                                    shear_range=25,\n#                                     zoom_range=0.3,\n#                                     channel_shift_range=0.2,\n#                                     horizontal_flip=True,\n#                                     vertical_flip=True,\n                                    validation_split=0.1,\n) \\\n        .flow_from_dataframe(\n                            dataframe = train_data,\n                            directory = img_dir,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            target_size = (IMG_SIZE, IMG_SIZE),\n                            class_mode = \"categorical\",\n                            batch_size = batch_size,\n                            shuffle = True,\n                            subset = \"training\")","c2492463":"val_generator = ImageDataGenerator(\n                                    validation_split = 0.1\n) \\\n        .flow_from_dataframe(\n                            dataframe= train_data,\n                            directory = img_dir,\n                            x_col = \"image_id\",\n                            y_col = \"label\",\n                            target_size = (IMG_SIZE, IMG_SIZE),\n                            class_mode = \"categorical\",\n                            batch_size = batch_size,\n                            shuffle = True,\n                            subset = \"validation\")","3b86d1e2":"img_, label_ = val_generator.next()\nprint(img_.shape, label_.shape)","260b2213":"def visualize_images_from_datagen(data, label_data,row=1,col=3):\n    fig = plt.figure(figsize=(10,10))\n#     row, col = 3,3\n    for i in range(row*col):\n#         print(label_data[i])\n        label = int(np.argmax([label_data[i]], axis =1))\n#         print(label)\n        fig.add_subplot(row, col, i+1).set_title(class_names[str(label)])\n        img = data[i]\n        img = np.uint8(img)#.astpye(np.uint8)\n        plt.imshow(img)\n    plt.show()","1e248b03":"img_data = img_[0:10]\nlabel_data =label_[0:10]\n# img_data.shape\nvisualize_images_from_datagen(img_data, label_data, row=3,col=3)","282aabec":"img_, label_ = train_generator.next()\nprint(img_.shape, label_.shape)\nimg_data = img_[0:10]\nlabel_data =label_[0:10]\n# img_data.shape\nvisualize_images_from_datagen(img_data, label_data, row=3,col=3)","bc2e802f":"# for i, img in enumerate(img_):\n#     plt.imshow(np.uint8(img))\n#     plt.show()\n#     if(i==15):\n#         break","347ed967":"Select some images for visualization","11876364":"Define funtion to visualize generated images with label","38d1274c":"Load class name and id of the dataset","42c1963a":"load images from validation generator to check","f3d7510f":"Read all data from csv file","e88e80b2":"Select few random\/class-wise data for visualization","45fbe354":"General data analysis, total number of images and number of images class-wise","c227a5ca":"Visualize images generated by ImageDataGenerator","46ee7b0d":"Define funtion to visualize random \/ class-wise images","8187c2ba":"Visualize Augmented images and their labels from train generator","bdc365e6":"Deine train and validation image generator using flow_from_dataframe. Apply augmentation accordingly, ","a2f8c384":"Change label data type from int to str for ImageGeneretor","8d0fa451":"Visualize images"}}