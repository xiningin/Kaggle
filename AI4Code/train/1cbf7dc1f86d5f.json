{"cell_type":{"8221a42e":"code","c50e25a8":"code","9fe446ec":"code","091792e5":"code","fc452049":"code","cea72293":"code","6c07aaee":"code","19af9984":"code","b6e8f234":"code","19c07692":"code","26b13632":"code","88ab48e0":"code","fb43e0de":"code","54c385d2":"code","e550d870":"code","c8c6760d":"code","313d7f69":"code","d692dfe2":"code","95447519":"code","35589922":"code","6b552411":"code","ad48ac70":"code","c4e028af":"code","f45d8ec3":"code","7f61a7f1":"code","bccd394e":"code","5e2c96fe":"markdown","f1d4b873":"markdown","98707ff1":"markdown","c9f8d4a3":"markdown","12aec00b":"markdown","92d5f385":"markdown","af3b66e9":"markdown","1e2605a8":"markdown","dcf8583c":"markdown","6da48fa3":"markdown","3b056b05":"markdown","62248934":"markdown","fbc26dc7":"markdown","d02a797a":"markdown","10227229":"markdown","b97dfcc7":"markdown","bb127748":"markdown","81a6802a":"markdown","c5705625":"markdown","5751dd14":"markdown","7a713a72":"markdown"},"source":{"8221a42e":"import numpy as np \nimport pandas as pd\nimport re\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n%matplotlib inline","c50e25a8":"data=pd.read_csv('\/kaggle\/input\/tv-series-dataset\/series_data.csv')","9fe446ec":"data.head()","091792e5":"data.dtypes","fc452049":"data.info()","cea72293":"ratings=data.sort_values(['No_of_Votes'],ascending=False)\nimdb=data.sort_values(['IMDB_Rating'],ascending=False)","6c07aaee":"fig,axs=plt.subplots(figsize=(20,5))\ng=sns.barplot(x=ratings['Series_Title'][:10],y=ratings['No_of_Votes'][:10])\ng.set_title(\"Top Voted Series\")\nplt.show()\nfig,axs=plt.subplots(figsize=(20,5))\ng=sns.barplot(x=ratings['Series_Title'][:10],y=ratings['IMDB_Rating'][:10])\ng.set_title(\"Top Rated Series\")\nplt.show()\nplt.tight_layout()","19af9984":"fig,axs=plt.subplots(figsize=(20,5))\ng=sns.barplot(x=data['Runtime_of_Series'].value_counts()[:10].index,y=data['Runtime_of_Series'].value_counts()[:10])\ng.set_title(\"Runtime of Series\")\ng.set_xlabel(\"Years\")\nplt.show()","b6e8f234":"duration=[]\nfor x in data[\"Runtime_of_Series\"]:\n    p=re.compile('\\d+')\n    j=p.findall(x)\n    if len(j)==2:\n        duration.append(int(j[1])-int(j[0])+1)\n    else:\n        duration.append(2021-int(j[0])+1)\ndata['duration']=duration","19c07692":"fig,axs=plt.subplots(figsize=(20,5))\ng=sns.kdeplot(data['duration'])\ng.set_title(\"Duration of series\")","26b13632":"#As there are a lots of NaN values in the Certificate Column, renaming it to 'Not Rated'\ndata['Certificate']=data['Certificate'].fillna('Not Rated')\n\n#Visualizing all the certificates except 'Not Rated' category\nratings=data[data['Certificate']!='Not Rated']['Certificate']\nfig,axs=plt.subplots(figsize=(20,5))\nsns.set_style('darkgrid')\ng=sns.countplot(ratings)\ng.set_title(\"Count of Certificates provided\")\nplt.show()","88ab48e0":"run_inmin=data['Runtime_of_Episodes'].apply(lambda x:str(x).split(\" \")[0])\nfig,axs=plt.subplots(figsize=(20,5))\ng=sns.barplot(x=run_inmin.value_counts()[:10].index,y=run_inmin.value_counts()[:10])\ng.set_xlabel(\"Duration of one Episode\")\ng.set_title(\"Top Ten Runtime of one Episode\")\nplt.show()","fb43e0de":"# Creating a list of all the Genres\ngenre=[]\nfor x in data['Genre']:\n    for y in x.split(','):\n        genre.append(y.strip().lower())\n# Finding the Count of these Genres\ncount=Counter(genre)\ncount=count.most_common()[:10]\nx,y=map(list,zip(*count))\n# Visualizing the plot\nfig,axs=plt.subplots(figsize=(20,5))\ng=sns.barplot(y,x)\ng.set_ylabel(\"Genres\")\ng.set_title(\"Top Ten Genres\")\nplt.show()","54c385d2":"from wordcloud import WordCloud\ntext=set(genre)\nwordc=WordCloud(max_words=1500,background_color='black').generate(str(text))\nfig,axs=plt.subplots(figsize=(20,20))\nsns.set_style('dark')\nplt.imshow(wordc)","e550d870":"fig,axs=plt.subplots(figsize=(20,5))\ng=sns.distplot(data['IMDB_Rating'],bins=30)\ng.set_title(\"Distribution of Ratings\")\nplt.show()","c8c6760d":"stars=['Star1','Star2','Star3','Star4']\nfig,axs=plt.subplots(4,1,figsize=(20,7))\nax=0\nfor x in stars:\n    axs[ax].bar(data[x].value_counts()[:10].index,data[x].value_counts()[:10])\n    axs[ax].set_title(x)\n    axs[ax].set_ylabel(\"Appearances\")\n    ax+=1\n    plt.tight_layout()","313d7f69":"stars=['Star1','Star2','Star3','Star4']\nfig,axs=plt.subplots(4,1,figsize=(17,7))\nax=0\nfor x in stars:\n    s=data.groupby([x]).sum().reset_index()\n    d=s.sort_values(['No_of_Votes'],ascending=False)[:10]\n    axs[ax].bar(d[x],d['No_of_Votes'])\n    axs[ax].set_title(x)\n    axs[ax].set_ylabel(\"Appearances\")\n    ax+=1\n    plt.tight_layout()","d692dfe2":"#Importing TfidVectorizer and to generate the matrix\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ncv=TfidfVectorizer(stop_words='english')\ncvm=cv.fit_transform(data['Overview'])\ncvm.shape","95447519":"#Importing linear_kernel to find the similarity of the data\nfrom sklearn.metrics.pairwise import linear_kernel\nsim=linear_kernel(cvm,cvm)","35589922":"indices=pd.Series(data.index,index=data['Series_Title']).drop_duplicates()","6b552411":"def get_recommendations(title, sim=sim):\n    idx = indices[title]\n    \n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n    \n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return data['Series_Title'].iloc[movie_indices]","ad48ac70":"get_recommendations('Friends')","c4e028af":"get_recommendations('Breaking Bad')","f45d8ec3":"get_recommendations('The Boys')","7f61a7f1":"get_recommendations('Sacred Games')","bccd394e":"get_recommendations('Tokyo Ghoul')","5e2c96fe":"Objective:\n1. EDA\n2. Content Based Recommender System","f1d4b873":"Top ten Runtime_of_Episodes","98707ff1":"Counting the frequency of various certificates provided to these series","c9f8d4a3":"Word Cloud of the Genres","12aec00b":"Here, The Cosine similarity score is used since it is independent of magnitude and is relatively easy and fast to calculate.\n![image.png](attachment:image.png)","92d5f385":"Lets sort the data based on No_of_Votes and IMDB_Ratings","af3b66e9":"Importing dataset","1e2605a8":"Calculation of the duration of a Series from Runtime_of_Series","dcf8583c":"# If you find this Notebook Helpful, please upvote and comment the possible improvements ","6da48fa3":"Importing the required Libraries","3b056b05":"KDE plot of duration calculated","62248934":"Distribution of IMDb Ratings of the Series","fbc26dc7":"Lets check the results of the function","d02a797a":"Most Occurence of Stars","10227229":"Most Common Genres of Series","b97dfcc7":"Stars of Top Voted Series","bb127748":"Most Runtime_of_Series visualization","81a6802a":"Recommendation System (Content Based)\u00b6\n\n![image.png](attachment:image.png)\n\nThe TF-IDF(Term Frequency-Inverse Document Frequency (TF-IDF) ) score is the frequency of a word occurring in a document, down-weighted by the number of documents in which it occurs. This is done to reduce the importance of words that occur frequently in plot overviews and therefore, their significance in computing the final similarity score.","c5705625":"**TV Series has always been a great source of entertainment. This is an EDA or a story telling through its data along with a content-based recommendation system and a wide range of different graphs and visuals.**","5751dd14":"Top Voted and Top Rated Series","7a713a72":"# **TV Series Visualizations, Recommendation, EDA\ud83c\udf7f**"}}