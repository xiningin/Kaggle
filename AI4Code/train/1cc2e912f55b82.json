{"cell_type":{"82e082ea":"code","d489e6c4":"code","de924747":"code","9dff0ae7":"code","f67bd4fd":"code","b799df33":"code","d4314883":"code","87b6edb7":"code","c7bf7288":"code","d41942b9":"code","97f67171":"code","ec2132a4":"code","bd206870":"code","dcf42577":"code","92bf64e0":"code","68a6931d":"code","6bef9c74":"code","7867a5c3":"code","e22cb109":"code","9643a37e":"code","3635129b":"code","5a1c09f0":"code","33977f61":"code","c07eead3":"code","1f7ff0b5":"code","4e82c320":"code","ccf72430":"code","d76417fd":"code","fc556871":"code","5c52ba2c":"code","dda6cc02":"code","d4fcd9fd":"code","2f8a0668":"code","542610f1":"code","57443525":"markdown","3faeb6e8":"markdown","d0c8fe88":"markdown","9f43860d":"markdown","b290f997":"markdown","2c3a5c74":"markdown","08fc4a37":"markdown","d2b49791":"markdown","3faca270":"markdown","04ddd950":"markdown","5522bd29":"markdown","3b88adca":"markdown","0453cf49":"markdown","c02832f0":"markdown","3a9eb4f6":"markdown","96b2d1fa":"markdown","f852b035":"markdown","c019b717":"markdown","2a7003a8":"markdown","4c3abd4c":"markdown","34406bd0":"markdown","6513d574":"markdown"},"source":{"82e082ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d489e6c4":"data = pd.read_csv('..\/input\/2016.csv')\ndata.head()","de924747":"data = data.set_index('Happiness Rank')\ndata.head()","9dff0ae7":"data['Happiness Score'][1]","f67bd4fd":"data.Region[10]","b799df33":"data.loc[1,['Region']]","d4314883":"data[['Region', 'Happiness Score']]","87b6edb7":"print(type(data[\"Region\"]))     # series\nprint(type(data[[\"Region\"]]))   # data frames","c7bf7288":"data.loc[1:10,\"Region\":\"Freedom\"] ","d41942b9":"data.loc[10:1:-1,\"Region\":\"Freedom\"] ","97f67171":"data.loc[1:10,\"Trust (Government Corruption)\":] #From a column to end","ec2132a4":"boolean = data['Happiness Score'] > 7.000\ndata[boolean]","bd206870":"boolean1 = data['Region'] == 'Western Europe'\nboolean2 = data['Freedom'] < 0.5\ndata[boolean1 & boolean2]","dcf42577":"data.Region[data.Generosity < 0.1]","92bf64e0":"# Plain python functions\ndef div(n):\n    return n\/2\ndata['Happiness Score'].apply(div)","68a6931d":"#lambda function\ndata['Generosity'].apply(lambda n : n\/2)","6bef9c74":"# Defining column using other columns\ndata[\"Confidence\"] = (data['Lower Confidence Interval'] + data['Upper Confidence Interval']) \/ 2\ndata.head()","7867a5c3":"# our index name is this:\nprint(data.index.name)\n# lets change it\ndata.index.name = \"index_name\"\ndata.head()","e22cb109":"# Overwrite index\n# if we want to modify index we need to change all of them.\ndata.head()\n# first copy of our data to data3 then change index \ndata1 = data.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata1.index = range(100,257,1)\ndata1.head()","9643a37e":"# lets read data frame one more time to start from beginning\ndata = pd.read_csv('..\/input\/2016.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","3635129b":"# Setting index : type 1 is outer type 2 is inner index\ndata1 = data.set_index([\"Happiness Score\",\"Family\"]) \ndata1.head(100)\n# data1.loc[\"Fire\",\"Flying\"] # howw to use indexes","5a1c09f0":"dic = {\"cure\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response to cure\":[10,45,5,9],\"age\":[23,18,53,49]}\ndf = pd.DataFrame(dic)\ndf","33977f61":"# pivoting\ndf.pivot(index=\"cure\",columns = \"gender\",values=\"response to cure\")","c07eead3":"df1 = df.set_index([\"cure\",\"gender\"])\ndf1\n# lets unstack it","1f7ff0b5":"df1.unstack(level=0)","4e82c320":"df1.unstack(level=1)","ccf72430":"# change inner and outer level index position\ndf2 = df1.swaplevel(0,1)\ndf2","d76417fd":"df","fc556871":"# df.pivot(index=\"cure\",columns = \"gender\",values=\"response to cure\")\npd.melt(df,id_vars=\"cure\",value_vars=[\"age\",\"response to cure\"])","5c52ba2c":"df","dda6cc02":"# according to cure take means of other features\ndf.groupby(\"cure\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","d4fcd9fd":"df.groupby(\"cure\").age.max() ","2f8a0668":"df.groupby(\"cure\")[[\"age\",\"response to cure\"]].min() ","542610f1":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\ndf[\"gender\"] = df[\"gender\"].astype(\"category\")\ndf[\"cure\"] = df[\"cure\"].astype(\"category\")\ndf.info()","57443525":"So when we want to use ' Loc ' accessor :","3faeb6e8":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","d0c8fe88":"### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","9f43860d":"There is the reverse version of slicing : ","b290f997":"Combining two different filter.","2c3a5c74":"### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","08fc4a37":"### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label","d2b49791":"We can only choose one of the feature.","3faca270":"### MELTING DATA FRAMES\n* Reverse of pivoting","04ddd950":"There is a different way to use column attributes and row label.","5522bd29":"Difference between selecting columns: series and dataframes","3b88adca":"### Manipulating Data Frames with Pandas\n* Indexing data frames\n* Slicing data frames\n* Filtering data frames\n* Transforming data frames\n* Index objects and labeled data\n*  Hierarchical indexing\n* Pivoting data frames\n* Stacking and unstacking data frames\n* Melting data frames\n* Categoricals and groupby","0453cf49":"### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","c02832f0":"### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","3a9eb4f6":"When we want to focus especially some columns, we can use this term :","96b2d1fa":"Indexing using square brackets. We can access a value of what we entered an index","f852b035":"Filtering column based antoher column.","c019b717":"### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","2a7003a8":"Slicing and indexing series : ","4c3abd4c":"Or we can choose multiple features.","34406bd0":"### HIERARCHICAL INDEXING\n* Setting indexing","6513d574":"\nPIVOTING DATA FRAMES\n\n * Pivoting: reshape tool\n\n"}}