{"cell_type":{"6b54d9ca":"code","e573eddb":"code","b3926ed7":"code","21d43b9f":"code","1f236800":"code","a4a73839":"code","17dd7b28":"code","8b4ce6af":"code","46c6c3bc":"code","c260cced":"code","00d7fc5a":"code","406fd2d7":"code","878cbe8f":"code","1bc3837d":"code","4643ec4b":"code","fa3b58f4":"code","f6f97fe9":"code","1bfb4f62":"code","0f8eb80e":"code","7263aeed":"code","d651ff94":"code","ba1a6285":"markdown","fb5b0085":"markdown","0fe4ba4a":"markdown","30e5ea25":"markdown"},"source":{"6b54d9ca":"#Import some packages to use\nimport cv2\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\n#To see our directory\nimport os\nimport random\nimport gc   #Gabage collector for cleaning deleted data from memory\n","e573eddb":"\ntrain_dir = '..\/input\/train'\ntest_dir = '..\/input\/test'\n\ntrain_dogs = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'dog' in i]  #get dog images\ntrain_cats = ['..\/input\/train\/{}'.format(i) for i in os.listdir(train_dir) if 'cat' in i]  #get cat images\n\ntest_imgs = ['..\/input\/test\/{}'.format(i) for i in os.listdir(test_dir)] #get test images\n\ntrain_imgs = train_dogs[:2000] + train_cats[:2000]  # slice the dataset and use 2000 in each class\nrandom.shuffle(train_imgs)  # shuffle it randomly\n\n#Clear list that are useless\ndel train_dogs\ndel train_cats\ngc.collect()   #collect garbage to save memory","b3926ed7":"# import matplotlib.image as mpimg\n# for ima in train_imgs[0:3]:\n#     img=mpimg.imread(ima)\n#     imgplot = plt.imshow(img)\n#     plt.show()","21d43b9f":"#Lets declare our image dimensions\n#we are using coloured images. \nnrows = 150\nncolumns = 150\nchannels = 3  #change to 1 if you want to use grayscale image\n\n\n#A function to read and process the images to an acceptable format for our model\ndef read_and_process_image(list_of_images):\n    \"\"\"\n    Returns two arrays: \n        X is an array of resized images\n        y is an array of labels\n    \"\"\"\n    X = [] # images\n    y = [] # labels\n    \n    for image in list_of_images:\n        X.append(cv2.resize(cv2.imread(image, cv2.IMREAD_COLOR), (nrows,ncolumns), interpolation=cv2.INTER_CUBIC))  #Read the image\n        #get the labels\n        if 'dog' in image:\n            y.append(1)\n        elif 'cat' in image:\n            y.append(0)\n    \n    return X, y","1f236800":"#get the train and label data\nX, y = read_and_process_image(train_imgs)","a4a73839":"#Lets view some of the pics\nplt.figure(figsize=(20,10))\ncolumns = 5\nfor i in range(columns):\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.imshow(X[i])\n","17dd7b28":"import seaborn as sns\ndel train_imgs\ngc.collect()\n\n#Convert list to numpy array\nX = np.array(X)\ny = np.array(y)\n\n#Lets plot the label to be sure we just have two class\nsns.countplot(y)\nplt.title('Labels for Cats and Dogs')","8b4ce6af":"print(\"Shape of train images is:\", X.shape)\nprint(\"Shape of labels is:\", y.shape)","46c6c3bc":"#Lets split the data into train and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=2)\n\nprint(\"Shape of train images is:\", X_train.shape)\nprint(\"Shape of validation images is:\", X_val.shape)\nprint(\"Shape of labels is:\", y_train.shape)\nprint(\"Shape of labels is:\", y_val.shape)","c260cced":"#clear memory\ndel X\ndel y\ngc.collect()\n\n#get the length of the train and validation data\nntrain = len(X_train)\nnval = len(X_val)\n\n#We will use a batch size of 32. Note: batch size should be a factor of 2.***4,8,16,32,64...***\nbatch_size = 32 \n","00d7fc5a":"from keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array, load_img\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))  #Dropout for regularization\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))  #Sigmoid function at the end because we have just two classes","406fd2d7":"#Lets see our model\nmodel.summary()","878cbe8f":"#We'll use the RMSprop optimizer with a learning rate of 0.0001\n#We'll use binary_crossentropy loss because its a binary classification\nmodel.compile(loss='binary_crossentropy', optimizer=optimizers.RMSprop(lr=1e-4), metrics=['acc'])","1bc3837d":"#Lets create the augmentation configuration\n#This helps prevent overfitting, since we are using a small dataset\ntrain_datagen = ImageDataGenerator(rescale=1.\/255,   #Scale the image between 0 and 1\n                                    rotation_range=40,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,)\n\nval_datagen = ImageDataGenerator(rescale=1.\/255)  #We do not augment validation data. we only perform rescale","4643ec4b":"#Create the image generators\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)","fa3b58f4":"#The training part\n#We train for 64 epochs with about 100 steps per epoch\nhistory = model.fit_generator(train_generator,\n                              steps_per_epoch=ntrain \/\/ batch_size,\n                              epochs=64,\n                              validation_data=val_generator,\n                              validation_steps=nval \/\/ batch_size)","f6f97fe9":"#Save the model\nmodel.save_weights('model_wieghts.h5')\nmodel.save('model_keras.h5')","1bfb4f62":"#lets plot the train and val curve\n#get the details form the history object\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc) + 1)\n\n#Train and validation accuracy\nplt.plot(epochs, acc, 'b', label='Training accurarcy')\nplt.plot(epochs, val_acc, 'r', label='Validation accurarcy')\nplt.title('Training and Validation accurarcy')\nplt.legend()\n\nplt.figure()\n#Train and validation loss\nplt.plot(epochs, loss, 'b', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and Validation loss')\nplt.legend()\n\nplt.show()\n","0f8eb80e":"#Now lets predict on the first 10 Images of the test set\nX_test, y_test = read_and_process_image(test_imgs[0:10]) #Y_test in this case will be empty.\nx = np.array(X_test)\ntest_datagen = ImageDataGenerator(rescale=1.\/255) ","7263aeed":"i = 0\ntext_labels = []\nplt.figure(figsize=(30,20))\nfor batch in test_datagen.flow(x, batch_size=1):\n    pred = model.predict(batch)\n    if pred > 0.5:\n        text_labels.append('dog')\n    else:\n        text_labels.append('cat')\n    plt.subplot(5 \/ columns + 1, columns, i + 1)\n    plt.title('This is a ' + text_labels[i])\n    imgplot = plt.imshow(batch[0])\n    i += 1\n    if i % 10 == 0:\n        break\nplt.show()","d651ff94":"\n\n#lets save our prediction and submit\n# counter = range(1, len(test_imgs) + 1)\n# df_solution = pd.DataFrame({\"id\": counter, \"label\":list(pred)})\n# cols = ['label']\n\n# for col in cols:\n#     df_solution[col] = df_solution[col].map(lambda x: str(x).lstrip('[').rstrip(']')).astype(float)\n\n# df_solution.to_csv(\"submissiondogsVScats.csv\", index = False)","ba1a6285":"In this kernel, we will train a Convnet from scratch using keras and achieve an accuracy of about 80%  on the Dog VS. Cat classification challenge","fb5b0085":"**here is a [link](https:\/\/medium.com\/@risingdeveloper\/dog-vs-cats-detection-in-keras-beginner-super-friendly-intermediate-refreshing-expert-boring-f314872006c9) to my Medium post with full explanation of the code**","0fe4ba4a":"The train data contains 25,000 images of both dogs and cats. We are going to sample a small portion of  the data for training because of memory and Ram limits on kaggle kernels. So therefore, we will use Data Augmentation to reduce overfitting.","30e5ea25":"Now lets create our model."}}