{"cell_type":{"8b8d4b2e":"code","31349f42":"code","f4d89567":"code","4815f6fc":"code","23786b84":"code","0d7aad86":"code","0acb4bd1":"code","90596872":"code","d55fbb91":"code","f89b5800":"code","f6fa7817":"code","a4c64cb7":"code","c1a70e4d":"code","24d1265f":"code","ee310902":"markdown","6559a939":"markdown","690a5b53":"markdown","5d6ef880":"markdown","9559e26d":"markdown","a02f17d6":"markdown","d426f042":"markdown","f51c61dd":"markdown"},"source":{"8b8d4b2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31349f42":"pd.read_csv(\"\/kaggle\/input\/kickstarter-projects\/ks-projects-201801.csv\")","f4d89567":"ds = pd.read_csv(\"\/kaggle\/input\/kickstarter-projects\/ks-projects-201801.csv\")\nds.info()","4815f6fc":"[\"main_category\",\"state\"]","23786b84":"ds[[\"main_category\",\"state\"]]","0d7aad86":"ds[\"state\"].value_counts()","0acb4bd1":"ds[(ds[\"state\"] != \"undefined\") & (ds[\"state\"] != \"live\")]","90596872":"compProj = ds[(ds[\"state\"] != \"undefined\") & (ds[\"state\"] != \"live\")]","d55fbb91":"compProj[\"state\"].value_counts()","f89b5800":"ds[\"main_category\"].value_counts()","f6fa7817":"totProjCount = ds[\"main_category\"].value_counts()\nprint(totProjCount)","a4c64cb7":"susProj = compProj[compProj[\"state\"] == \"successful\"]\nsusProjCount = susProj[\"main_category\"].value_counts()\nprint(susProjCount)","c1a70e4d":"susProjCount\/totProjCount * 100","24d1265f":"percentSuccess = susProjCount\/totProjCount * 100\npercentSuccess.sort_values()","ee310902":"**Lessons**\n* Data Cleaning\n","6559a939":"# Adapted from: [Girls Who Code - Data Playground](https:\/\/drive.google.com\/file\/d\/1gtaqNmhYasuomvqMlRApxjuGpDn4EYmj\/view)","690a5b53":"**Lessons**\n* Python Conditionals\n * !=\n * undefined vs null\n * & vs ||","5d6ef880":"**Lessons**\n* Reflecting on Results\n* Presenting Results","9559e26d":"# Data Project Lifecycle","a02f17d6":"**Extension**\n* [Replacing Values](https:\/\/datatofish.com\/replace-values-pandas-dataframe\/)","d426f042":"**Lessons**\n* Define Problem Statement\n* Decomposing the Problem","f51c61dd":"**Lessons**\n* Analyzing Data\n"}}