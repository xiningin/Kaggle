{"cell_type":{"72d0ca9f":"code","28d95b63":"code","b831e7cc":"code","a3309b5d":"code","3967fb5d":"code","a89e732b":"code","275e7970":"code","584da661":"code","7ba15e7f":"code","2a1e68cc":"code","b090610b":"code","f55a352c":"code","020b53af":"code","8affacce":"code","cb01ac55":"code","dc133d67":"code","4d293d4d":"code","3e56f967":"code","6b0de2c1":"code","c1fe77a8":"markdown","af399a76":"markdown","0515e0c3":"markdown","ea631797":"markdown","9e1c0a4a":"markdown","aaf215f2":"markdown","4705129e":"markdown","44557aae":"markdown"},"source":{"72d0ca9f":"from keras.datasets import cifar10\nfrom keras.layers import Input, Dense,Conv2D,MaxPooling2D,UpSampling2D,BatchNormalization\nfrom keras.models import Model,Sequential\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport cv2\nfrom os import listdir\n\nfrom keras.preprocessing.image import img_to_array\nfrom sklearn.model_selection import train_test_split","28d95b63":"import os\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","b831e7cc":"default_image_size = tuple((480, 480))\nimage_size = 0\ndirectory_root = '..\/input\/aliabhatt\/'\nwidth=480\nheight=480\ndepth=3","a3309b5d":"def convert_image_to_array(image_dir):\n    try:\n        image = cv2.imread(image_dir)\n        if image is not None :\n            image = cv2.resize(image, default_image_size)   \n            return img_to_array(image)\n        else :\n            return np.array([])\n    except Exception as e:\n        print(f\"Error : {e}\")\n        return None\n","3967fb5d":"image_list = []\ntry:\n    print(\"[INFO] Loading images ...\")\n    root_dir = listdir(directory_root)\n    \n    for image_file in root_dir:\n        print(f\"[INFO] Processing {image_file} ...\")\n        image_file_image = listdir(f\"{directory_root}\/{image_file}\/\")\n        \n        for images_item in image_file_image:\n            image_file_imag = f\"{directory_root}\/{image_file}\/{images_item}\"\n            if image_file_imag.endswith(\".jpg\") == True or image_file_imag.endswith(\".JPG\") == True:\n                    image_list.append(convert_image_to_array(image_file_imag))  \n                    print(f\"[INFO] {image_file_imag}\")  \n                \nexcept Exception as e:\n    print(f\"Error : {e}\")","a89e732b":"print(len(image_list))","275e7970":"np_image_list = np.array(image_list, dtype=np.float32) \/255","584da661":"print(\"[INFO] Spliting data to train, test\")\nX_train, X_test = train_test_split(np_image_list, test_size=0.2, random_state = 42) ","7ba15e7f":"noise_factor = 0.5\nx_train_noisy = X_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=X_train.shape)\nx_test_noisy = X_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=X_test.shape)\nx_train_noisy = np.clip(x_train_noisy, 0., 1.)\nx_test_noisy = np.clip(x_test_noisy, 0., 1.)","2a1e68cc":"X_train = X_train.reshape(len(x_train_noisy),x_train_noisy.shape[1],x_train_noisy.shape[2],3)\nX_test = X_test.reshape(len(x_test_noisy), x_test_noisy.shape[1],x_test_noisy.shape[2],3)\nprint(X_train.shape)\nprint(X_test.shape)","b090610b":"input_img = Input(shape=(480,480,3))\n\n#Encoder\nx = Conv2D(16,(3,3), activation='relu', padding='same')(input_img)\nx = MaxPooling2D((2,2), padding='same')(x)\n\nx = Conv2D(8,(3,3), activation='relu', padding='same')(x)\nx = MaxPooling2D((2,2), padding='same')(x)\n\nx = Conv2D(8,(3,3), activation='relu', padding='same')(x)\nencoded = MaxPooling2D((2,2), padding='same', name='encoder')(x)\n\n#Decoder\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)\nx = UpSampling2D((2, 2))(x)\n\nx = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\nx = Conv2D(16, (3, 3), activation='relu',padding='same')(x)\nx = UpSampling2D((2, 2))(x)\n\ndecoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.compile(optimizer='adam', loss='mse')","f55a352c":"model = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu', input_shape=(480, 480, 3)))\nmodel.add(BatchNormalization())     # 32x32x32\nmodel.add(Conv2D(32, kernel_size=3, strides=2, padding='same', activation='relu'))      # 16x16x32\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu'))      # 16x16x32\nmodel.add(BatchNormalization())     # 16x16x32\nmodel.add(UpSampling2D())\nmodel.add(Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu'))      # 32x32x32\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(3,  kernel_size=1, strides=1, padding='same', activation='sigmoid'))   # 32x32x3\n\nmodel.compile(optimizer='adam', metrics=['accuracy'], loss='mean_squared_error')\nmodel.summary()","020b53af":"model.fit(x_train_noisy, X_train, epochs=20, batch_size=8,\n            shuffle=True, validation_data=(x_test_noisy, X_test))","8affacce":"#encoded_imgs = model.predict(X_test)\npredicted = model.predict(X_test)","cb01ac55":"plt.figure(figsize=(80,10))\nfor i in range(4):\n    # display original images\n    ax = plt.subplot(3, 20, i + 1)\n    plt.imshow(X_test[i].reshape(480, 480,3))\n    #plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    \n    # display reconstructed images\n    ax = plt.subplot(3, 20, 2*20 +i+ 1)\n    plt.imshow(predicted[i].reshape(480, 480,3))\n    #plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n  \n    \nplt.show()","dc133d67":"def single_test(image_data):\n    image_array = convert_image_to_array(image_data)\/255.0\n    x_enpanded = image_array.reshape(1, X_test.shape[1],X_test.shape[2],3)\n    y_pred = model.predict(x_enpanded)\n    return y_pred,image_array","4d293d4d":"image_url = \"..\/input\/testblack\/testbalck\/katrina.jpg\"\npred,realimage = single_test(image_url)","3e56f967":"print(check_output([\"ls\", \"..\/input\/testblack\/testbalck\/\"]).decode(\"utf8\"))","6b0de2c1":"plt.figure(figsize=(80,10))\n\n# display original images\nax = plt.subplot(3, 20, 1)\nplt.imshow(realimage.reshape(480, 480,3))\n#plt.gray()\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n    \n# display reconstructed images\nax = plt.subplot(3, 20, 41)\nplt.imshow(pred.reshape(480, 480,3))\n#plt.gray()\nax.get_xaxis().set_visible(False)\nax.get_yaxis().set_visible(False)\n    \nplt.show()","c1fe77a8":"Adding Noise to data","af399a76":"\n\nFunction to convert images to array\n","0515e0c3":"Image Normalization ","ea631797":"Splitting images into train and test","9e1c0a4a":"* Images other than from other dataset","aaf215f2":"Good for Minist Dataset","4705129e":"Good for coloured Image","44557aae":"\n\nFetch images from directory\n"}}