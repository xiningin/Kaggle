{"cell_type":{"af583b3e":"code","e782cdb7":"code","592aa725":"code","b06e7740":"code","419887dc":"code","43c0318b":"code","a3e8dd64":"code","3fb9c9a2":"code","dc8054d4":"code","7fb148ea":"code","87f68f71":"code","e1ee0c74":"code","5d341488":"code","2ecd600f":"code","eccf32de":"code","62ba3ef7":"code","53d33f77":"code","65b1b553":"code","8fca0701":"code","a3aeabeb":"code","bcbb025b":"code","15103ba6":"code","f559af1f":"code","d1226991":"code","9e8aabdd":"code","20d827b1":"code","123ea48f":"code","3b5a7319":"code","8d56d2c4":"code","0550624e":"code","56da3536":"code","7217daa2":"code","596fbfdb":"code","ef417cd4":"markdown"},"source":{"af583b3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/celeba-dataset\/list_attr_celeba.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e782cdb7":"import pandas as pd\nimport numpy as np ","592aa725":"d1= pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_landmarks_align_celeba.csv')\nd2= pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_eval_partition.csv')\nd3= pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_attr_celeba.csv')\nd4= pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_bbox_celeba.csv')\n\n","b06e7740":"\npath_dir= r'..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba'\n","419887dc":"from  matplotlib import pyplot as plt\nimport matplotlib.image as mpimg\nimport random","43c0318b":"for i in range(5):\n    img=mpimg.imread('..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/00000'+ str(i+1)+'.jpg')\n    ax=plt.subplot(1,5,i+1)\n    plt.imshow(img)","a3e8dd64":"from keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\ndataset = pd.read_csv('\/kaggle\/input\/celeba-dataset\/list_attr_celeba.csv')\npath_dir= r'..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba'","3fb9c9a2":"from PIL import Image\n\nim = Image.open('..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/000001.jpg')\nwidth, height = im.size","dc8054d4":"print(width, height)","7fb148ea":"from PIL import Image\n\nim = Image.open('..\/input\/celeba-dataset\/img_align_celeba\/img_align_celeba\/000030.jpg')\nwidth1, height = im.size","87f68f71":"print(width, height)","e1ee0c74":"d1.head()","5d341488":"d1.shape","2ecd600f":"d2.head()","eccf32de":"d2.shape","62ba3ef7":"d3.head()","53d33f77":"d3.shape","65b1b553":"d4.head()","8fca0701":"d4.shape","a3aeabeb":"d3.corr()","bcbb025b":"import seaborn as sns\nsns.boxplot(x=d3['Arched_Eyebrows'])","15103ba6":"d3[\"Arched_Eyebrows\"].replace({-1: 0, 1: 1}, inplace=True)\n\nd3[\"Arched_Eyebrows\"].head()","f559af1f":"d3[\"Arched_Eyebrows\"].value_counts()","d1226991":"d=pd.DataFrame(dataset.iloc[:150000])\n#d=pd.DataFrame(dataset)","9e8aabdd":"#cols = list(dataset.columns[1:])\n#cols= d['Arched_Eyebrows']\n\ntrain_df, val_df = train_test_split(d, test_size=.2)\n\n\n\ntrain_datagen = ImageDataGenerator(\n            rescale=1.\/255,\n    width_shift_range=.18,\n    height_shift_range=.18,\n            shear_range=0.5,\n            zoom_range=0.6,\n     horizontal_flip=True,\nfill_mode= 'nearest')\nval_datagen = ImageDataGenerator(rescale=1.\/255)\ntrain_data = train_datagen.flow_from_dataframe(\n            dataframe=train_df,\n            directory=path_dir,\n            x_col=\"image_id\",\n            y_col=\"Arched_Eyebrows\",\n            target_size=(170, 170),\n            batch_size=52,\n            class_mode='raw')\n\nval_data = val_datagen.flow_from_dataframe(\n            dataframe=val_df,\n            directory=path_dir,\n            x_col=\"image_id\",\n            y_col=\"Arched_Eyebrows\",\n            target_size=(170, 170),\n            batch_size=52,\n            class_mode='raw')\n","20d827b1":"from sklearn.preprocessing import LabelBinarizer\nfrom keras.utils import to_categorical\nlabel_binarizer = LabelBinarizer()\n","123ea48f":"d['Arched_Eyebrows'] = label_binarizer.fit_transform(d['Arched_Eyebrows'])\nd['Arched_Eyebrows'] = to_categorical(d['Arched_Eyebrows'])\n","3b5a7319":"from keras.applications.nasnet import NASNetLarge\nfrom keras.models import Model\nfrom tensorflow.keras import layers","8d56d2c4":"resnet=NASNetLarge(include_top=False,weights='imagenet',input_tensor=layers.Input(shape=(170,170, 3)))\nfor layer in resnet.layers:\n    layer.trainable = False #true\n\nresnet.summary()","0550624e":"from tensorflow import keras\nmodel = keras.Sequential(\n    [keras.Input(shape=(170, 170, 3)),\n     resnet,\n     #keras.layers.MaxPooling2D(pool_size=(2,2)),\n     keras.layers.Dense(780, activation=\"relu\"),#780\n     keras.layers.Dense(512, activation=\"relu\"),\n      \n     keras.layers.Dropout(0.2),\n     keras.layers.Flatten(),\n     keras.layers.Dense(units=1,activation=\"sigmoid\")\n     ]\n)","56da3536":"model.summary()","7217daa2":"from tensorflow.keras.optimizers import Adam\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer= Adam(lr=1e-4),\n              metrics=['accuracy'])","596fbfdb":"history = model.fit(\n      train_data,\n      steps_per_epoch=100,  #200\n      epochs=5,\n      verbose=1,\n      validation_data = val_data,\n      validation_steps=100)","ef417cd4":"To read and check all the data in provided dataset"}}