{"cell_type":{"5ba50594":"code","d4d6baa0":"code","5f84bc5b":"code","c6518d53":"code","dd8f5417":"code","24c85e52":"code","662d0b51":"code","517ec7ed":"code","de90ca5b":"code","51edbaad":"code","eab4f144":"code","829bc4a4":"code","731d886c":"code","118f14d7":"code","b84b21e8":"code","24a4bca4":"code","a63cbfdd":"code","687f4159":"code","0130798e":"code","d7432e56":"code","7d3eff32":"code","d44fc27b":"code","d28ca58c":"code","43ea30e9":"code","7e664bf1":"code","bb1e63ef":"code","6bc4d46b":"code","c00c0a8c":"code","f0e7644d":"code","eddde4c2":"code","eee3082c":"code","91891542":"code","39da4f0c":"code","995186d6":"code","13cfca2a":"code","6e441d9b":"code","432a7ab1":"code","9a213b61":"code","6b9ad6ee":"code","8b06ef0b":"code","6e0e9769":"code","e7eabbb5":"code","85359017":"code","77ea9bba":"code","9eea3330":"code","37281142":"code","0852a374":"code","c4044113":"code","5ec415b0":"code","5ff8708e":"code","7aab200a":"code","176e9832":"code","79b03526":"code","3919e2dd":"code","e70f4136":"code","f25474e6":"code","6c3a7d9b":"code","7b1f4a8b":"code","8fca9973":"code","62a417d3":"code","6eec5181":"code","1f11bc0c":"code","e7082ff4":"code","77817c47":"code","5da7418a":"code","e9efeb09":"code","d4e9fb0e":"code","c43e40f2":"code","91c392d0":"code","0b12b030":"code","1b9479d0":"code","efb00c96":"code","e451309a":"code","b177bf4f":"code","acd2c36f":"code","b08b29fd":"code","20e34584":"code","714732c9":"code","cafb91c1":"code","1b2415b4":"code","8a128490":"code","8f11f7d8":"code","867a7826":"code","a6fbd611":"code","16304832":"code","b675b1cc":"code","ce192d08":"code","0eaf7aed":"code","4405f7a4":"code","be014789":"code","ecb109a2":"code","134263ea":"code","b44d301a":"code","83b1c4fb":"code","db752cc5":"code","10f7cfe2":"code","e14e136f":"code","d0a95dd2":"code","690a56d4":"code","4e9648e2":"code","476642e2":"code","c6595e6f":"code","52ab9870":"code","d954d729":"code","00bb14ad":"code","324eef6a":"code","876cfbe3":"code","fa9448d0":"code","815c0d9f":"code","61354477":"code","1345d17d":"code","c4930580":"code","c4d34b35":"code","4a4753db":"code","b3e5c95c":"code","354fc5cf":"code","3cd4fd25":"code","0de34da4":"code","f040ad6d":"code","837e1f21":"code","e5868fda":"code","03dc4863":"code","e7ce6e55":"code","7d2a1862":"code","5e0008b3":"code","87e3f4b6":"code","947fe2c1":"code","697e736a":"code","0d115585":"code","ff8eee81":"code","43d807de":"code","80112ec2":"code","c50e38c2":"code","ed0213f6":"code","9cd4c388":"code","fc02954f":"code","bcb23953":"code","256a93bf":"code","b89d094d":"code","2f5d6f32":"code","4d10cb33":"markdown","6162e66c":"markdown","1b1e8783":"markdown","846c840d":"markdown","e1ac2149":"markdown","c33ad7fe":"markdown","e84b9142":"markdown","1a05ee1b":"markdown","faf5b18f":"markdown","f0baec18":"markdown","abf03304":"markdown","7b88e835":"markdown","8dc81fd7":"markdown","135963ef":"markdown","0a82e5c5":"markdown","573185dd":"markdown","2faeccfd":"markdown","a0701178":"markdown","5d5889cb":"markdown","d9151ee1":"markdown","9a0c9bca":"markdown","fe702e0f":"markdown","cb672604":"markdown","bfec9c14":"markdown","1d7b98a7":"markdown","bc0dd3bc":"markdown","43b58806":"markdown","69e52d87":"markdown","15670c9b":"markdown","1b39d49d":"markdown","db5f77df":"markdown","7c4ecf52":"markdown","96b732a0":"markdown","cc05fefd":"markdown","c3fda7db":"markdown","108d2e63":"markdown","6aed44f9":"markdown","f76ccea0":"markdown","2ebd7498":"markdown","9927a79c":"markdown","49d9a7a6":"markdown","09cb743c":"markdown","0e8bc514":"markdown","947a237a":"markdown","e9da99c9":"markdown","3774a99f":"markdown","db0c1afb":"markdown","6c1d21d1":"markdown","1dae3e6e":"markdown","968151e0":"markdown","605e2e67":"markdown","ff69bcf8":"markdown","97d7fa33":"markdown","98bdf19b":"markdown","edbc116f":"markdown","4864c459":"markdown","b5d8da9f":"markdown","7e76bbf0":"markdown","5361ae49":"markdown","00ca83cf":"markdown","0f13ede6":"markdown","26bce061":"markdown","01983fa9":"markdown","4634aac5":"markdown","208035c0":"markdown","68e2712d":"markdown","e2685839":"markdown","59ab7641":"markdown","95672165":"markdown","4c05b63a":"markdown","f7466378":"markdown","d81c73c6":"markdown","bd89073f":"markdown","e3713534":"markdown","9df55c69":"markdown","94750358":"markdown","d3037ed2":"markdown","cd15a703":"markdown","a8b955e0":"markdown","0770cd65":"markdown","05ddb1e0":"markdown","199f32b3":"markdown","cd64c9b9":"markdown","58da03b6":"markdown","bc55fff6":"markdown","189bc770":"markdown","c2f961bb":"markdown","4288293c":"markdown","58605034":"markdown","4094143f":"markdown","5ce3dfbd":"markdown"},"source":{"5ba50594":"# !pip install jyquickhelper\n# from jyquickhelper import add_notebook_menu\n# add_notebook_menu()","d4d6baa0":"# Chargement des librairies\nimport datetime\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\nimport sys\nimport missingno\nimport geopandas as gpd\nimport IPython as ip\nfrom IPython.display import display\nimport matplotlib.patches as mpatches\nimport matplotlib.gridspec as gridspec\nimport statsmodels as stat\nfrom statsmodels.tsa.api import Holt\nimport warnings\nfrom statsmodels.tools.sm_exceptions import ConvergenceWarning\n# import jyquickhelper\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler, PowerTransformer\nfrom math import pi\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nwarnings.simplefilter('ignore', ConvergenceWarning)\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\n\n# Versions\nprint('Version des librairies utilis\u00e9es :')\nprint('Python        : ' + sys.version)\nprint('NumPy         : ' + np.version.full_version)\nprint('Pandas        : ' + pd.__version__)\nprint('Matplotlib    : ' + mpl.__version__)\nprint('Seaborn       : ' + sns.__version__)\nprint('Sklearn       : ' + sklearn.__version__)\nprint('Geopandas     : ' + sns.__version__)\nprint('IPython       : ' + ip.__version__)\nprint('statsmodels   : ' + stat.__version__)\n\nnow = datetime.datetime.now().isoformat()\nprint('Lanc\u00e9 le           : ' + now)","5f84bc5b":"pd.set_option('display.max_row', 200)\npd.set_option('display.max_column', 70)\npd.set_option('display.precision', 5)","c6518d53":"# --------------------------------------------------------------------\n# -- TYPES DES VARIABLES\n# --------------------------------------------------------------------\ndef get_types_variables(df_work, types, type_par_var, graph):\n    \"\"\" Permet un aper\u00e7u du type des variables\n    Parameters\n    ----------\n    @param IN : df_work : dataframe, obligatoire\n                types : Si True lance dtypes, obligatoire\n                type_par_var : Si True affiche tableau des types de\n                               chaque variable, obligatoire\n                graph : Si True affiche pieplot de r\u00e9partition des types\n    @param OUT :None.\n    \"\"\"\n\n    if types :\n        # 1. Type des variables\n        print(\"-------------------------------------------------------------\")\n        print(\"Type de variable pour chacune des variables\\n\")\n        display(df_work.dtypes)\n\n    if type_par_var :\n        # 2. Compter les types de variables\n        #print(\"R\u00e9partition des types de variable\\n\")\n        values = df_work.dtypes.value_counts()\n        nb_tot = values.sum()\n        percentage = round((100 * values \/ nb_tot),2)\n        table = pd.concat([values, percentage], axis=1)\n        table.columns = ['Nombre par type de variable'\n                         , '% des types de variable']\n        display(table[table['Nombre par type de variable'] != 0]\n                .sort_values('% des types de variable', ascending = False)\n                .style.background_gradient('Greens'))\n\n    if graph :\n        # 3. Sch\u00e9ma des types de variable\n        #print(\"\\n----------------------------------------------------------\")\n        #print(\"R\u00e9partition sch\u00e9matique des types de variable \\n\")\n        # R\u00e9partition des types de variables\n        df_work.dtypes.value_counts().plot.pie()\n        plt.ylabel('')\n        plt.show()","dd8f5417":"# ---------------------------------------------------------------------------\n# -- VALEURS MANQUANTES\n# ---------------------------------------------------------------------------\n\n# Afficher des informations sur les valeurs manquantes\ndef get_missing_values(df_work, pourcentage, heatmap):\n    \"\"\"Indicateurs sur les variables manquantes\n       @param in : df_work dataframe obligatoire\n                   pourcentage : boolean si True affiche le nombre heatmap\n                   heatmap : boolean si True affiche la heatmap\n       @param out : none\n    \"\"\"\n\n    # 1. Nombre de valeurs manquantes totales\n    nb_nan_tot=df_work.isna().sum().sum()\n    nb_donnees_tot=np.product(df_work.shape)\n    pourc_nan_tot=round((nb_nan_tot\/nb_donnees_tot)*100,2)\n    print(f'Valeurs manquantes :{nb_nan_tot} NaN pour {nb_donnees_tot} donn\u00e9es ({pourc_nan_tot} %)')\n\n    if pourcentage:\n        print(\"-------------------------------------------------------------\")\n        print(\"Nombre et pourcentage de valeurs manquantes par variable\\n\")\n        # 2. Visualisation du nombre et du pourcentage de valeurs manquantes par variable\n        values = df_work.isnull().sum()\n        percentage = 100 * values \/ len(df_work)\n        table = pd.concat([values, percentage.round(2)], axis=1)\n        table.columns = ['Nombres de valeurs manquantes'\n                         ,'% de valeurs manquantes']\n        display(table[table['Nombres de valeurs manquantes'] != 0]\n                .sort_values('% de valeurs manquantes', ascending = False)\n                .style.background_gradient('Greens'))\n\n    if heatmap:\n        print(\"-------------------------------------------------------------\")\n        print(\"Heatmap de visualisation des valeurs manquantes\")\n        # 3. Heatmap de visualisation des valeurs manquantes\n        plt.figure(figsize=(20, 10))\n        sns.heatmap(df_work.isna(), cbar=False)\n        plt.show()","24c85e52":"# ---------------------------------------------------------------------------\n# -- EDA DES TIME SERIES\n# ---------------------------------------------------------------------------\ndef time_series_plot(df_work):\n    \"\"\"Given dataframe, generate times series plot of numeric data by daily,\n       monthly and yearly frequency\"\"\"\n    print(\"\\nTo check time series of numeric data  by daily, monthly and yearly frequency\")\n    if len(df_work.select_dtypes(include='datetime64').columns)>0:\n        for col in df_work.select_dtypes(include='datetime64').columns:\n            for plotting in ['D', 'M', 'Y']:\n                if plotting=='D':\n                    print(\"Plotting daily data\")\n                elif plotting=='M':\n                    print(\"Plotting monthly data\")\n                else:\n                    print(\"Plotting yearly data\")\n                for col_num in df_work.select_dtypes(include=np.number).columns:\n                    __ = df_work.copy()\n                    __ = __.set_index(col)\n                    transp = __.resample(plotting).sum()\n                    axes = transp[[col_num]].plot()\n                    axes.set_ylim(bottom=0)\n                    axes.get_yaxis().set_major_formatter(\n                    matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\n                    plt.show()","662d0b51":"# --------------------------------------------------------------------------\n# -- EDA DES VARIABLES QUANTITATIVES\n# --------------------------------------------------------------------------\n\n# G\u00e9n\u00e8re EDA pour les variables quantitatives du dataframe transmis\ndef numeric_eda(df_work, hue=None):\n    \"\"\"G\u00e9n\u00e8re EDA pour les variables quantitatives du dataframe transmis\n       @param in : df_work dataframe obligatoire\n                   hue non obigatoire\n       @param out : none\n    \"\"\"\n    print(\"----------------------------------------------------\")\n    print(\"\\nEDA variables quantitatives : \\nDistribution des variables quantitatives\\n\")\n    print(df_work.describe().T)\n    columns = df_work.select_dtypes(include=np.number).columns\n    figure = plt.figure(figsize=(20, 10))\n    figure.add_subplot(1, len(columns), 1)\n    for index, col in enumerate(columns):\n        if index > 0:\n            figure.add_subplot(1, len(columns), index + 1)\n        sns.boxplot(y=col, data=df_work, boxprops={'facecolor': 'None'})\n    figure.tight_layout()\n    plt.show()\n\n    if len(df_work.select_dtypes(include='category').columns) > 0:\n        for col_num in df_work.select_dtypes(include=np.number).columns:\n            for col in df_work.select_dtypes(include='category').columns:\n                fig = sns.catplot(x=col, y=col_num, kind='violin', data=df_work, height=5, aspect=2)\n                fig.set_xticklabels(rotation=90)\n                plt.show()\n\n    # Affiche le pairwise joint distributions\n    print(\"\\nAffiche pairplot des variables quantitatives\")\n    if hue is None:\n        sns.pairplot(df_work.select_dtypes(include=np.number))\n    else:\n        sns.pairplot(df_work.select_dtypes(include=np.number).join(df_work[[hue]]), hue=hue)\n    plt.show()","517ec7ed":"# --------------------------------------------------------------------------\n# -- EDA DES VARIABLES QUALITATIVES\n# --------------------------------------------------------------------------\n\n# Top 5 des modalit\u00e9s uniques par variable qualitative\ndef top5(df_work):\n    \"\"\"Affiche le top 5 des modalit\u00e9s uniques par variables qualitatives\n       @param in : df_work dataframe obligatoire\n       @param out : none\n    \"\"\"\n    print(\"----------------------------------------------------\")\n    columns = df_work.select_dtypes(include=['object', 'category']).columns\n    for col in columns:\n        print(\"Top 5 des modalit\u00e9s uniques de : \" + col)\n        print(df_work[col].value_counts().reset_index()\n              .rename(columns={\"index\": col, col: \"Count\"})[\n              :min(5, len(df_work[col].value_counts()))])\n        print(\" \")\n","de90ca5b":"# G\u00e9n\u00e8re EDA pour les variables qualitatives du dataframe transmis\ndef categorical_eda(df_work, hue=None):\n    \"\"\"G\u00e9n\u00e8re EDA pour les variables qualitatives du dataframe transmis\n       @param in : df_work dataframe obligatoire\n                   hue non obigatoire\n       @param out : none\n    \"\"\"\n    print(\"----------------------------------------------------\")\n    print(\"\\nEDA variables qualitatives : \\nDistribution des variables qualitatives\")\n    print(df_work.select_dtypes(include=['object', 'category']).nunique())\n    top5(df_work)\n    # Affiche count distribution des variables qualitatives\n    for col in df_work.select_dtypes(include='category').columns:\n        fig = sns.catplot(x=col, kind=\"count\", data=df_work, hue=hue)\n        fig.set_xticklabels(rotation=90)\n        plt.show()","51edbaad":"# ---------------------------------------------------------------------------\n# -- EDA DE TOUTES LES VARIABLES : QUANTITATIVES, QUALITATIVES\n# ---------------------------------------------------------------------------\ndef eda(df_work):\n    \"\"\"G\u00e9n\u00e8re l'analyse exploratoire du dataframe transmis pour toutes les variables\"\"\"\n\n    print(\"----------------------------------------------------\")\n\n    # Controle que le param\u00e8tre transmis est un dataframe pandas\n    # if type(df_work) != pd.core.frame.DataFrame:\n    if isinstance(df_work, pd.core.frame.DataFrame):\n        raise TypeError(\"Seul un dataframe pandas est autoris\u00e9 en entr\u00e9e\")\n\n    # Remplace les donn\u00e9es avec vide ou espace par NaN\n    df_work = df_work.replace(r'^\\s*$', np.nan, regex=True)\n\n    print(\"----------------------------------------------------\")\n    print(\"3 premi\u00e8res lignes du jeu de donn\u00e9es:\")\n    print(df_work.head(3))\n\n    print(\"----------------------------------------------------\")\n    print(\"\\nEDA des variables: \\n (1) Total du nombre de donn\u00e9es \\n  \\\n          (2) Types ds colonnes \\n (3) Any null values\\n\")\n    print(df_work.info())\n\n    # Affichage des valeurs manquantes\n    if df_work.isnull().any(axis=None):\n        print(\"----------------------------------------------------\")\n        print(\"\\nPr\u00e9visualisation des donn\u00e9es avec valeurs manquantes:\")\n        print(df_work[df_work.isnull().any(axis=1)].head(3))\n        missingno.matrix(df_work)\n        plt.show()\n\n    get_missing_values(df_work, True, True)\n\n    print(\"----------------------------------------------------\")\n    # Statitstique du nombre de donn\u00e9es dupliqu\u00e9es\n    if len(df_work[df_work.duplicated()]) > 0:\n        print(\"\\n***Nombre de donn\u00e9es dupliqu\u00e9es : \", len(df_work[df_work.duplicated()]))\n        print(df_work[df_work.duplicated(keep=False)].sort_values(by=list(df_work.columns)).head())\n    else:\n        print(\"\\nAucune donn\u00e9e dupliqu\u00e9e trouv\u00e9e\")\n\n    # EDA des variables qualitatives\n    print(\"----------------------------------------------------\")\n    print('-- EDA DES VARIABLES QUALITATIVES')\n    categorical_eda(df_work)\n\n    # EDA des variables quantitatives\n    print(\"----------------------------------------------------\")\n    print('-- EDA DES VARIABLES QUANTITATIVES')\n    numeric_eda(df_work)\n\n    # Affiche les Plot time series plot des variables quantitatives\n    time_series_plot(df_work)\n","eab4f144":"# ---------------------------------------------------------------------------\n# -- Graph densit\u00e9 pour 1 ou plusieurs colonne d'un dataframe\n# ---------------------------------------------------------------------------\ndef plot_graph(df_work):\n    \"\"\"Graph densit\u00e9 pour 1 ou plusieurs colonne d'un dataframe\n       @param in : df_work dataframe obligatoire\n       @param out : none\n    \"\"\"\n\n    plt.figure(figsize=(10,5))\n    axes = plt.axes()\n\n    label_patches = []\n    colors=['Crimson','SeaGreen','Sienna','DodgerBlue','Purple']\n\n    i=0\n    for col in df_work.columns:\n        label=col\n        sns.kdeplot(df_work[col])\n        label_patch = mpatches.Patch(\n            color=colors[i],\n            label=label)\n        label_patches.append(label_patch)\n        i+=1\n    plt.xlabel('')\n    plt.legend(handles=label_patches, bbox_to_anchor=(1.05, 1)\n               , loc=2, borderaxespad=0., facecolor='white')\n    plt.grid(False)\n    axes.set_facecolor('white')\n\n    plt.show()\n","829bc4a4":"import os\nprint(os.listdir('..\/input\/education-statistics\/edstats-csv-zip-32-mb-\/'))\nos.chdir('..\/input\/education-statistics\/edstats-csv-zip-32-mb-\/')","731d886c":"# Chargement du jeu de donn\u00e9es\ncountry = pd.read_csv('EdStatsCountry.csv', delimiter=',')","118f14d7":"# Contenu des 3 premi\u00e8res lignes\ncountry.head(3)","b84b21e8":"# Nom des colonnes\ncountry.columns","24a4bca4":"# R\u00e9sum\u00e9 des variables qualitatives\ncountry.describe(exclude=[np.number])","a63cbfdd":"# R\u00e9sum\u00e9 des variables quantitatives\ncountry.describe()","687f4159":"# Taille : nombre de lignes\/colonnes\nnRow, nCol = country.shape\nprint(f'Le jeu de donn\u00e9es contient {nRow} lignes et {nCol} colonnes.')","0130798e":"# Types des variables\nget_types_variables(country, False, False, True)","d7432e56":"# Valeurs manquantes\nget_missing_values(country, False, True)","7d3eff32":"# Doublons?\ndoublons = country[country.duplicated(['Country Code'], keep=False)]\nnb_doublons_code_pays = doublons.shape[0]\nprint(f'Nombre de doublons sur le code pays : {nb_doublons_code_pays}')","d44fc27b":"# Remplacer la r\u00e9gion 'NaN' par 'Autres'\ncountry['Region'] = country['Region'].replace(np.nan, 'A Completer')\nprint('R\u00e9gions :\\n', country['Region'].unique())\n# Remplacer le groupe de revenus 'NaN' par 'Autres'\ncountry['Income Group'] = country['Income Group'].replace(\n    np.nan, 'A Completer')\nprint('\\nGroupes de revenus :\\n', country['Income Group'].unique())","d28ca58c":"# Regroupement des pays\/r\u00e9gions\/groupes de revenus\n\nfig = plt.figure(figsize=(15, 10))\ngrid = plt.GridSpec(2, 2, wspace=0.8, hspace=0.3)\n\n# Graphique ligne 1, colonne 1 ------------------\nplt.subplot(grid[0, 0])\n# Regroupement des pays par r\u00e9gions\nnb_pays_par_region = country.groupby('Region')[['Short Name']].count(\n).reset_index().sort_values(by='Short Name', ascending=False)\ncolors = ['Coral', 'Peru', 'HotPink', 'PowderBlue',\n          'Khaki', 'LightGreen', 'RoyalBlue', 'Cyan']\nsns.barplot(nb_pays_par_region['Short Name'].sort_values(\n), nb_pays_par_region['Region'], palette=colors,)\nplt.xlabel('Nombre de pays', fontsize=12)\nplt.ylabel('R\u00e9gion', fontsize=12)\nplt.title('Nombre de pays par R\u00e9gion', fontsize=14)\n\n# Graphique ligne 1, colonne 2 ------------------\nplt.subplot(grid[0, 1])\n# Regroupement des pays par groupe de revenus\nnb_pays_par_groupe_revenu = country.groupby('Income Group')[['Short Name']].count(\n).reset_index().sort_values(by='Short Name', ascending=False)\ncolors = ['FireBrick', 'RoyalBlue', 'MediumPurple',\n          'MediumSeaGreen', 'SandyBrown', 'Khaki']\nsns.barplot(nb_pays_par_groupe_revenu['Short Name'].sort_values(\n), nb_pays_par_groupe_revenu['Income Group'], palette=colors)\nplt.xlabel('Nombre de pays', fontsize=12)\nplt.ylabel('Groupe de revenus', fontsize=12)\nplt.title('Nombre de pays par groupe de revenus', fontsize=14)\n\n# Graphique ligne 2, sur les 2 colonnes ------------------\nplt.subplot(grid[1, :])\n# Regroupement des pays par groupe de revenus\ncolors = ['HotPink', 'PowderBlue', 'Peru', 'Coral',\n          'Khaki', 'LightGreen', 'RoyalBlue', 'Cyan']\nsns.countplot(y='Income Group', hue='Region', data=country, orient='h',\n              order=['High income: OECD', 'High income: nonOECD',\n                     'Upper middle income', 'Lower middle income', 'Low income'],\n              palette=colors)\nplt.xlabel('Nombre de pays', fontsize=12)\nplt.ylabel('Groupe de revenus', fontsize=12)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., fontsize=12)\nplt.title('Nombre de pays par groupe de revenus par r\u00e9gion', fontsize=14)\nplt.grid(False)\n\nplt.show()","43ea30e9":"# Chargement du jeu de donn\u00e9es\ncountry_series = pd.read_csv('EdStatsCountry-Series.csv', delimiter=',')","7e664bf1":"# Contenu des 3 premi\u00e8res lignes\ncountry_series.head(3)","bb1e63ef":"# Contenu des 3 derni\u00e8res colonnes\ncountry_series.tail(3)","6bc4d46b":"# Nom des colonnes\ncountry_series.columns.to_list()","c00c0a8c":"# R\u00e9sum\u00e9 des variables qualitatives\ncountry_series.describe(exclude=[np.number])","f0e7644d":"# R\u00e9sum\u00e9 des variables quantitatives\ncountry_series.describe()","eddde4c2":"# Taille : nombre de lignes\/colonnes\nnRow, nCol = country_series.shape\nprint(f'Le jeu de donn\u00e9es contient {nRow} lignes et {nCol} colonnes.')","eee3082c":"# Types des variables\nget_types_variables(country_series, False, False, True)","91891542":"# Valeurs manquantes\nget_missing_values(country_series, False, True)","39da4f0c":"# Doublon ? avec toutes les colonnes du dataframe\ncountry_series[country_series.duplicated(keep=False)].shape[0]","995186d6":"# Doublons sur les 2 colonnes CountryCode et SeriesCode\ncountry_series[country_series.duplicated(\n    ['CountryCode', 'SeriesCode'], keep=False)].shape[0]","13cfca2a":"# Doublons sur les 3 colonnes CountryCode, SeriesCode et DESCRIPTION\ncountry_series[country_series.duplicated(\n    ['CountryCode', 'SeriesCode', 'DESCRIPTION'], keep=False)].shape[0]","6e441d9b":"# Le nombre de code ISO aplha 3 ne correspond pas au code ISO alpha 3 du jeu de donn\u00e9es EdStatsCountry.csv.\ncountry['Country Code'].nunique() == country_series['CountryCode'].nunique()","432a7ab1":"# Recherche des noms des pays n'apparaissant pas dans le jeu de donn\u00e9es EdStatsCountry-Series.csv\ncountry[~country['Country Code'].isin(country_series['CountryCode'])][[\n    'Short Name']].sort_values(by='Short Name')","9a213b61":"# Regroupement des pays par code indicateur et des pays par description\n\nfig, ax = plt.subplots(1, 2, figsize=(15, 5))\n\n# Graphique ligne 1, colonne 1 ------------------\n# Regroupement des pays par code indicateur\nserie_code = country_series.groupby('SeriesCode')[['CountryCode']].count(\n).reset_index().sort_values(by='CountryCode')['SeriesCode']\nnb_pays_par_serie_code = country_series.groupby(\n    'SeriesCode')[['CountryCode']].count()['CountryCode'].sort_values()\nax1 = ax[0]\nax1.barh(y=serie_code, width=nb_pays_par_serie_code, color='SteelBlue')\nfor i, v in enumerate(nb_pays_par_serie_code):\n    ax1.text(v + 3, i - .22, str(v), color='SteelBlue',\n             fontsize=10, fontweight='bold')\nax1.set_title('Nombre de pays par code indicateur', fontsize=12)\nax1.set_xlabel('Nombre de pays', fontsize=10)\nax1.set_ylabel('Codes indicateurs', fontsize=10)\nax1.tick_params(labelsize=10)\nax1.set_xlim([0, 250])\nax1.grid(False)\n\n# Graphique ligne 1, colonne 2 ------------------\n# Regroupement des pays par les 10 descriptions des sources des indicateurs les plus fr\u00e9quentes\ndescription = country_series.groupby('DESCRIPTION')[['CountryCode']].count(\n).reset_index().sort_values(by='CountryCode')['DESCRIPTION'].tail(10)\nnb_pays_par_description = country_series.groupby(\n    'DESCRIPTION')[['CountryCode']].count()['CountryCode'].sort_values().tail(10)\nax2 = ax[1]\nax2.barh(y=description, width=nb_pays_par_description, color='SteelBlue')\nfor i, v in enumerate(nb_pays_par_description):\n    ax2.text(v + 3, i + .01, str(v), color='SteelBlue',\n             fontsize=10, fontweight='bold')\nax2.set_title('Nombre de pays pour les tops 10 descriptions', fontsize=12)\nax2.set_xlabel('Nombre de pays', fontsize=10)\nax2.set_ylabel('Sources des codes indicateurs', fontsize=10)\nax2.tick_params(labelsize=10)\nax2.set_xlim([0, 180])\nax2.grid(False)\n\nfig.tight_layout()\nplt.show()","6b9ad6ee":"# Chargement du jeu de donn\u00e9es\nfoot_note = pd.read_csv('EdStatsFootNote.csv', delimiter=',')","8b06ef0b":"# Contenu des 3 premi\u00e8res lignes\nfoot_note.head(3)","6e0e9769":"# Contenu des 3 derni\u00e8res colonnes\nfoot_note.tail(3)","e7eabbb5":"# Nom des colonnes\nfoot_note.columns.to_list()","85359017":"# R\u00e9sum\u00e9 des variables qualitatives\nfoot_note.describe(exclude=[np.number])","77ea9bba":"# R\u00e9sum\u00e9 des variables quantitatives\nfoot_note.describe()","9eea3330":"# Taille : nombre de lignes\/colonnes\nnRow, nCol = foot_note.shape\nprint(f'Le jeu de donn\u00e9es contient {nRow} lignes et {nCol} colonnes.')","37281142":"# Types des variables\nget_types_variables(foot_note, False, False, True)","0852a374":"# Valeurs manquantes\nget_missing_values(foot_note, False, True)","c4044113":"# Doublon avec toutes les colonnes du dataframe\nfoot_note[foot_note.duplicated(keep=False)].shape[0]","5ec415b0":"# Doublons sur les 2 colonnes CountryCode et SeriesCode\ndoublons_deux = foot_note[foot_note.duplicated(\n    ['CountryCode', 'SeriesCode'], keep=False)]\nprint(f'Nombre de doublons code pays\/indicateur: {doublons_deux.shape[0]}.')\ndoublons_deux\n# ==> Plusieurs ann\u00e9es de r\u00e9f\u00e9rence pour un ou plusieurs code(s) indicateur(s) par code ISO-3166-alpha-3.","5ff8708e":"# Doublons sur la colonne CountryCode\ndoublons_1 = foot_note[foot_note.duplicated(['DESCRIPTION'], keep=False)]\nprint(doublons_1.shape)\nfoot_note['DESCRIPTION'].nunique()\n# ==> Plusieurs description de l'incertitude, des exceptions, des modes de mise \u00e0 jour des codes indicateurs par ann\u00e9e par pays.","7aab200a":"# Le nombre de code ISO alpha 3 ne correspond pas au code ISO alpha 3 du jeu de donn\u00e9es EdStatsCountry-Series.csv.\ncountry['Country Code'].nunique() == foot_note['CountryCode'].nunique()","176e9832":"# Recherche des noms des pays n'apparaissant pas dans le jeu de donn\u00e9es EdStatsCountry-Series.csv\ncountry[~country['Country Code'].isin(foot_note['CountryCode'])][[\n    'Short Name']].sort_values(by='Short Name')\n# ==> Les pays en plus dans le jeu de donn\u00e9es EdStatsFootNote.csv sont des noms des pays devenus autonomes (Saint Martin, Groenland).","79b03526":"# Regroupement des pays par code indicateur et des pays par description\n\nplt.figure(figsize=(16, 10))\nG = gridspec.GridSpec(2, 2)\n\n# Graphique ligne 1, colonne 1 ------------------\nax1 = plt.subplot(G[0, 0])\n# Top 10 du nombre de pays par code indicateur\nserie_code = foot_note.groupby('SeriesCode')[['CountryCode']].count(\n).reset_index().sort_values(by='CountryCode')['SeriesCode'].tail(20)\nnb_pays_par_serie_code = foot_note.groupby('SeriesCode')[['CountryCode']].count()[\n    'CountryCode'].sort_values().tail(20)\nax1.barh(y=serie_code, width=nb_pays_par_serie_code, color='SteelBlue')\nfor i, v in enumerate(nb_pays_par_serie_code):\n    ax1.text(v + 3, i - .2, str(v), color='SteelBlue',\n             fontweight='bold', fontsize='12')\nax1.set_title('Top 10 du nombre de pays par code indicateur', fontsize=14)\nax1.set_xlabel('Nombre de pays', fontsize='12')\nax1.set_ylabel('Code indicateur', fontsize='12')\nax1.tick_params(labelsize=12)\nax1.grid(False)\nax1.set_xlim([0, 10800])\n\n# Graphique ligne 1, colonne 2 ------------------\nax2 = plt.subplot(G[0, 1])\n# Top 10 du nombre de pays par description\ndescription = foot_note.groupby('DESCRIPTION')[['CountryCode']].count(\n).reset_index().sort_values(by='CountryCode')['DESCRIPTION'].tail(20)\nnb_pays_par_description = foot_note.groupby('DESCRIPTION')[['CountryCode']].count()[\n    'CountryCode'].sort_values().tail(20)\nax2.barh(y=description, width=nb_pays_par_description, color='SteelBlue')\nfor i, v in enumerate(nb_pays_par_description):\n    ax2.text(v + 10, i - .3, str(v), color='SteelBlue',\n             fontweight='bold', fontsize='12')\nax2.set_title('Top 10 du nombre de pays par description', fontsize='14')\nax2.set_xlabel('Nombre de pays', fontsize='12')\nax2.set_ylabel('Description', fontsize='12')\nax2.tick_params(labelsize=12)\nax2.grid(False)\nax2.set_xlim([0, 245000])\n\n# Graphique ligne 2, sur les 2 colonnes ------------------\nax3 = plt.subplot(G[1, :])\n# Pour plus de lisibilit\u00e9, transformer par exemple 'YR2001' en '2001'\nfoot_note['Annee'] = [row[-4:] for row in foot_note['Year']]\n# Nombre de pays avec des mises \u00e0 jour d'indicateur par ann\u00e9es\nax3.set_title(\n    'Nombre de pays avec des mises \u00e0 jour de codes indicateurs par ann\u00e9es', size=15)\nax3 = sns.barplot(y='CountryCode', x='Annee', data=foot_note.groupby(\n    'Annee').count().reset_index(), color='SteelBlue')\nax3.set_xticklabels(labels=foot_note.groupby(\n    'Annee').count().reset_index()['Annee'], rotation=90, size=12)\nax3.set_xlabel('Ann\u00e9e de mise \u00e0 jour')\nax3.set_ylabel('Nombre de pays avec codes indicateurs mis \u00e0 jour')\n\nplt.tight_layout()\nplt.show()","3919e2dd":"# Chargement du jeu de donn\u00e9es\nseries = pd.read_csv('EdStatsSeries.csv', delimiter=',')","e70f4136":"# Contenu des 3 premi\u00e8res lignes\nseries.head(3)","f25474e6":"# Contenu des 3 derni\u00e8res colonnes\nseries.tail(3)","6c3a7d9b":"# Nom des colonnes\nseries.columns.to_list()","7b1f4a8b":"# R\u00e9sum\u00e9 des variables qualitatives\nseries.describe(exclude=[np.number])","8fca9973":"# R\u00e9sum\u00e9 des variables quantitatives\nseries.describe()","62a417d3":"# Taille : nombre de lignes\/colonnes\nnRow, nCol = series.shape\nprint(f'Le jeu de donn\u00e9es contient {nRow} lignes et {nCol} colonnes.')","6eec5181":"# Types des variables\nget_types_variables(series, False, False, True)","1f11bc0c":"# Valeurs manquantes\nget_missing_values(series, False, True)","e7082ff4":"# Doublon avec toutes les colonnes du dataframe\nseries[series.duplicated(keep=False)].shape[0]","77817c47":"# Nombre de th\u00e8mes\nunique = series['Topic'].nunique()\nprint(f'{unique} th\u00e8mes regroupant les indicateurs')","5da7418a":"# Regroupement des pays par code indicateur et des pays par description\n\nfig, ax = plt.subplots(1, 2, figsize=(15, 6))\n\n# Graphique ligne 1, colonne 1 ------------------\n# Top 10 des th\u00e8mes les plus fr\u00e9quents\ntheme = series.groupby('Topic')[['Series Code']].count(\n).reset_index().sort_values(by='Series Code')['Topic'].tail(10)\nnb_code_par_theme = series.groupby('Topic')[['Series Code']].count()[\n    'Series Code'].sort_values().tail(10)\nax1 = ax[0]\nax1.barh(y=theme, width=nb_code_par_theme, color='SteelBlue')\nfor i, v in enumerate(nb_code_par_theme):\n    ax1.text(v + 3, i - .2, str(v), color='SteelBlue',\n             fontweight='bold', fontsize=12)\nax1.set_title(\n    'Nombre d\\'indicateurs pour les 10 th\u00e8mes les plus fr\u00e9quents', fontsize=14)\nax1.set_xlabel('Nombre de codes indicateurs', fontsize=12)\nax1.set_ylabel('Th\u00e8me', fontsize=12)\nax1.tick_params(labelsize=12)\nax1.grid(False)\nax1.set_xlim([0, 2000])\n\n# Graphique ligne 1, colonne 2 ------------------\n# last 27 th\u00e8mes les moins fr\u00e9quents\ntheme_moins = series.groupby('Topic')[['Series Code']].count(\n).reset_index().sort_values(by='Series Code')['Topic'].head(27)\nnb_code_par_theme_moins = series.groupby('Topic')[['Series Code']].count()[\n    'Series Code'].sort_values().head(27)\nax2 = ax[1]\nax2.barh(y=theme_moins, width=nb_code_par_theme_moins, color='SteelBlue')\nfor i, v in enumerate(nb_code_par_theme_moins):\n    ax2.text(v + 1, i - .25, str(v), color='SteelBlue',\n             fontweight='bold', fontsize=12)\nax2.set_title(\n    'Nombre d\\'indicateurs pour les 27 th\u00e8mes les moins fr\u00e9quents', fontsize=14)\nax2.set_xlabel('Nombre de codes indicateurs', fontsize=12)\nax2.set_ylabel('Th\u00e8me', fontsize=12)\nax2.tick_params(labelsize=12)\nax2.grid(False)\nax2.set_xlim([0, 50])\n\nfig.tight_layout()\nplt.show()","e9efeb09":"# Extraction des nom courts et longs des indicateurs pour analyser EdStatsData.csv\ndf_tmp = series[['Series Code', 'Indicator Name',\n                 'Short definition', 'Long definition']]\n# df_tmp.to_csv('Indicateurs.txt', header=True, index=None, sep=',', mode='w')","d4e9fb0e":"# Chargement du jeu de donn\u00e9es\ndata = pd.read_csv('EdStatsData.csv', delimiter=',', low_memory=False)","c43e40f2":"# 3 lignes au hasard\ndata.sample(3)","91c392d0":"# Contenu des 3 premi\u00e8res lignes\ndata.head(3)","0b12b030":"# Contenu des 3 derni\u00e8res colonnes\ndata.tail(3)","1b9479d0":"# Nom des colonnes\ndata.columns","efb00c96":"# R\u00e9sum\u00e9 des variables qualitatives\ndata.describe(exclude=[np.number])","e451309a":"# R\u00e9sum\u00e9 des variables quantitatives\ndata.describe()","b177bf4f":"# Taille : nombre de lignes\/colonnes\nnRow, nCol = data.shape\nprint(f'Le jeu de donn\u00e9es contient {nRow} lignes et {nCol} colonnes.')","acd2c36f":"# Types de variable\nget_types_variables(data, False, True, True)","b08b29fd":"get_missing_values(data, True, True)","20e34584":"# Doublon avec toutes les colonnes du dataframe\ndata[data.duplicated(keep=False)].shape[0]","714732c9":"# Doublons sur les 2 colonnes Country Code et Indicator Code\ndata[data.duplicated(['Country Code', 'Indicator Code'], keep=False)].shape[0]","cafb91c1":"# Le nombre de code ISO alpha 3 ne correspond pas au code ISO alpha 3 du jeu de donn\u00e9es EdStatsCountry.csv.\ndata['Country Code'].nunique() == country['Country Code'].nunique()","1b2415b4":"# Recherche du pays pr\u00e9sent dansEdStatsData.csv mais pas dans EdStatsCountry-Series.csv\ndf_pays_plus = data[~data['Country Code'].isin(\n    country['Country Code'])][['Country Name']]\ndf_pays_plus.drop_duplicates(inplace=True)\ndf_pays_plus\n# ==> Le pays en plus dans le jeu de donn\u00e9es EdStatsData.csv est 'British Virgin Islands'.","8a128490":"# Le nombre de code ISO alpha 3 ne correspond pas au code ISO alpha 3 du jeu de donn\u00e9es EdStatsCountry-Series.csv.\ndata['Country Code'].nunique() == country_series['CountryCode'].nunique()","8f11f7d8":"# Recherche du pays pr\u00e9sent dansEdStatsData.csv mais n'apparaissant pas dans le jeu de donn\u00e9es EdStatsCountry-Series.csv\ndf_pays_plus2 = data[~data['Country Code'].isin(country_series['CountryCode'])][[\n    'Country Name']].sort_values(by='Country Name')\ndf_pays_plus2.drop_duplicates(inplace=True)\ndf_pays_plus2\n# ==> Les pays en plus dans le jeu de donn\u00e9es EdStatsData.csv sont : des noms de r\u00e9gion, ou des noms de regroupement de revenus\n# ou certains regroupement de pays (European Union, North America..) et certains pays devenus autonomes (Cura\u00e7ao).","867a7826":"plt.figure(figsize=(15, 10))\nG = gridspec.GridSpec(2, 2)\n\n# Graphique ligne 1, sur les 2 colonnes ------------------\nax1 = plt.subplot(G[0, :])\n# R\u00e9partition du nombre de donn\u00e9es renseign\u00e9es par ann\u00e9es pour tous les indicateurs et tous les pays\npresent = data.loc[:, '1970':'2100'].notnull().sum()\nax1 = present.plot(kind='bar', color='SteelBlue')\nax1.set_title('R\u00e9partition du nombre de donn\u00e9es par ann\u00e9es')\nax1.set_ylabel('Nombre de donn\u00e9es')\nax1.grid(False)\n\n# Graphique ligne 2, colonne 1 ------------------\nax2 = plt.subplot(G[1, 0])\n# Regroupement du nombre de donn\u00e9es par d\u00e9cennie, les ann\u00e9es 70, 80...\ndecade = data.loc[:, '1970':'2020'].copy().count()\nans = ['1970s', '1980s', '1990s', '2000s', '2010s']\nfor i in range(5):\n    j = i*10\n    k = j+10\n    decade[ans[i]] = decade[j:k, ].sum()\n# Affihage de la r\u00e9partitions des donn\u00e9es exploitables par d\u00e9cennie\nwidth = 0.4\nax2.bar(decade[ans].index, decade[ans].values, width, color='SteelBlue')\n# ax2 = sns.barplot(y = decade[ans].values, x = decade[ans].index, color='SteelBlue')\nax2.set_xlabel('D\u00e9c\u00e9nnies')\nax2.set_ylabel('Nombre de donn\u00e9es')\nax2.set_title('Nombre de donn\u00e9es par d\u00e9cennie', size=12)\nax2.grid(False)\n\n# Graphique ligne 2, colonne 2 ------------------\nax3 = plt.subplot(G[1, 1])\n# Nombre de donn\u00e9es totales\nnb_tot = data.shape[0]\n# Nombre de donn\u00e9es non nulles par ann\u00e9e de la d\u00e9c\u00e9nnie 2010\nannees = ['2010', '2011', '2012', '2013', '2015', '2016', '2017']\nnb_nonnul = data.copy()[annees].count()\ndf_2010s = pd.DataFrame(\n    {'annee': nb_nonnul.index, 'nb_nonnul': nb_nonnul.values})\n# Taux de donn\u00e9es non nulles par ann\u00e9e de la d\u00e9c\u00e9nnie 2010\ndf_2010s['%_nonnul'] = round((df_2010s['nb_nonnul'])*100\/nb_tot, 2)\n# Nombre de NaN par ann\u00e9e de la d\u00e9c\u00e9nnie 2010\ndf_2010s['%_nan'] = round(100-df_2010s['%_nonnul'], 2)\nwidth = 0.35\nannes = df_2010s.index\ntaux_remplissage = df_2010s['%_nonnul']\ntaux_nan = df_2010s['%_nan']\nax3.bar(annees, taux_remplissage, width, label='Donn\u00e9es', color='SteelBlue')\nax3.bar(annees, taux_nan, width, bottom=taux_remplissage,\n        label='NaN', color='PeachPuff')\nax3.set_ylabel('%')\nax3.set_title('Taux de remplissage entre 2010 et 2017')\nax3.legend(bbox_to_anchor=(1.05, 1), loc=2)\nax3.grid(False)\n\nplt.tight_layout()\nplt.show()","a6fbd611":"cols_annees = data.columns[44:-20].tolist()","16304832":"# Recherche des codes pays des regroupements de pays\ndf_pays_en_trop = data[~data['Country Code'].isin(country_series['CountryCode'])][[\n    'Country Name', 'Country Code']].sort_values(by='Country Name')\ndf_pays_en_trop.drop_duplicates(inplace=True)\ndf_pays_en_trop\niso3_a_suppr = df_pays_en_trop['Country Code'].to_list()\niso3_a_suppr.remove('VGB')\niso3_a_suppr.remove('CUW')\niso3_a_suppr.remove('NRU')\niso3_a_suppr.remove('SXM')\niso3_a_suppr.remove('SSD')\niso3_a_suppr.remove('MAF')\n# df_pays=df_pays[~df_pays['Country Code'].isin(iso3_a_suppr)]\nprint(f'Pays hors norme ISO : {iso3_a_suppr}')","b675b1cc":"# -------------------------------------------------------------------------------------------------------------\n# R\u00e9partition du nombre de donn\u00e9es manquantes par ann\u00e9es pour tous les indicateurs et tous les pays\n# -------------------------------------------------------------------------------------------------------------\n# Dataframe de travail\ndf_taux_indicateurs = data.copy()\ndf_taux_indicateurs = df_taux_indicateurs[~df_taux_indicateurs['Country Code'].isin(\n    iso3_a_suppr)]\n# Compte le nombre de chaque indicateur par ann\u00e9e\ndf_taux_indicateurs = df_taux_indicateurs.groupby('Indicator Code')[\n    cols_annees].count()\ndf_taux_indicateurs = df_taux_indicateurs.reset_index()\n# La variable 'TOT' est le nombre de donn\u00e9es par indicateur pour tous les pays pour toutes les ann\u00e9es.\ndf_taux_indicateurs['TOT'] = df_taux_indicateurs[cols_annees].sum(axis=1)\n# La variable '%' est le taux de remplissage de chaque indicateur pour tous les pays pour toutes les ann\u00e9es.\n# Chaque indicateur peut \u00eatre associ\u00e9 \u00e0 242 pays pour chaque ann\u00e9e (6 ann\u00e9es) : 242*6=1452\ndf_taux_indicateurs['%'] = round((df_taux_indicateurs['TOT'])*100\/1452, 2)\n# Indicateurs statistiques\ndisplay(df_taux_indicateurs[['TOT', '%']].describe().T)\nquantile_80 = df_taux_indicateurs[['%']].quantile(0.8).to_string()\nprint(f'Qantile 80% : {quantile_80}')\nquantile_90 = df_taux_indicateurs[['%']].quantile(0.9).to_string()\nprint(f'Qantile 90% : {quantile_90}')\n# Analyse du taux de remplissage des indicateurs pour toutes les ann\u00e9es pour trouver le seuil\nsns.kdeplot(df_taux_indicateurs['%'])\nplt.grid(False)\nplt.xlim([0, 100])\nplt.title('Taux de remplissage des indicateurs')\nplt.show()\n\ndf_indic_reduit = df_taux_indicateurs[df_taux_indicateurs['%'] > 50]\nprint(f'Indicateurs restants : {df_indic_reduit.shape[0]}')","ce192d08":"# Ajout du nom court de l'indicateur pour plus de compr\u00e9hension\ndf_work_indic = series[['Series Code',\n                        'Indicator Name', 'Topic', 'Long definition']]\ndf_work_indic.drop_duplicates(inplace=True)\ndf_indic_reduit = pd.merge(df_indic_reduit, df_work_indic,\n                           how='left', left_on='Indicator Code', right_on='Series Code')\ndf_indic_reduit.drop(columns=['Series Code'], inplace=True)","0eaf7aed":"# Cible : lyc\u00e9ens 15-19 ans\npd.set_option('max_colwidth', None)\nliste_mot_cle_15 = [\n    row for row in df_indic_reduit['Indicator Code'] if ('15') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_15)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","4405f7a4":"# Cible : universitaires 20-24 ans\nliste_mot_cle_20 = [\n    row for row in df_indic_reduit['Indicator Code'] if ('20') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_20)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","be014789":"# Cible : \u00e9ducation lyc\u00e9e\nliste_mot_cle_sec = [\n    row for row in df_indic_reduit['Indicator Code'] if ('SEC') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_sec)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","ecb109a2":"# Cible : \u00e9ducation enseignement sup\u00e9rieur\nliste_mot_cle_ter = [\n    row for row in df_indic_reduit['Indicator Code'] if ('TER') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_ter)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","134263ea":"# Cible : moyen de communication internet\nliste_mot_cle_it = [\n    row for row in df_indic_reduit['Indicator Code'] if ('IT') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_it)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","b44d301a":"# Cible : \u00e9nergie, acc\u00e8s \u00e0 l'\u00e9l\u00e9ctricit\u00e9\nliste_mot_cle_ene = [\n    row for row in df_indic_reduit['Indicator Code'] if ('EG') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_ene)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","83b1c4fb":"# Cible : \u00e9conomie\nliste_mot_cle_eco = [\n    row for row in df_indic_reduit['Indicator Code'] if ('NY') in row]\ndf_indic_reduit[df_indic_reduit['Indicator Code'].isin(liste_mot_cle_eco)][[\n    'Indicator Code', 'Indicator Name', 'Topic', 'Long definition']]","db752cc5":"# Taux de remplissage sur 2010-2015\nindicateurs_retenus = ['SP.POP.1524.TO.UN', 'SE.SEC.ENRR',\n                       'SE.TER.ENRR', 'IT.NET.USER.P2', 'NY.GNP.PCAP.PP.CD']\nmask = df_indic_reduit['Indicator Code'].isin(indicateurs_retenus)\ncols = ['Indicator Code', 'Indicator Name', '%']\ndf_indic_reduit[mask][cols]","10f7cfe2":"# dataframe pour l'analyse des indicateurs par pays sans pr\u00e9dictions\ndf_pays = data.copy()\ndf_pays.drop(columns=['Unnamed: 69'], inplace=True)\ndf_pays.shape\nprint(f'Nombre de lignes \u00e0 l\\'origine : {df_pays.shape[0]}')","e14e136f":"cols_a_supr = data.columns[4:44].to_list()\ncols_a_supr.extend(data.columns[50:-1].to_list())\ndf_pays.drop(columns=cols_a_supr, inplace=True)","d0a95dd2":"# Liste des indicateurs pertinents \u00e0 conserver\nindicateurs_a_garder = ['SP.POP.1524.TO.UN', 'SE.SEC.ENRR',\n                        'SE.TER.ENRR', 'IT.NET.USER.P2', 'IT.CMP.PCMP.P2', 'NY.GNP.PCAP.PP.CD']\n# On ne conserve que les lignes donnant des informations sur les indicateurs retenus\ndf_pays = df_pays[df_pays['Indicator Code'].isin(indicateurs_a_garder)]\nprint(f'Nombre de lignes restantes : {df_pays.shape[0]}')","690a56d4":"# Recherche des codes pays des regroupements de pays\ndf_pays_en_trop = df_pays[~df_pays['Country Code'].isin(country_series['CountryCode'])][[\n    'Country Name', 'Country Code']].sort_values(by='Country Name')\ndf_pays_en_trop.drop_duplicates(inplace=True)\niso3_a_suppr = df_pays_en_trop['Country Code'].to_list()\niso3_a_suppr.remove('VGB')\niso3_a_suppr.remove('CUW')\niso3_a_suppr.remove('NRU')\niso3_a_suppr.remove('SXM')\niso3_a_suppr.remove('SSD')\niso3_a_suppr.remove('MAF')\ndf_pays = df_pays[~df_pays['Country Code'].isin(iso3_a_suppr)]\nng_lignes = df_pays.shape[0]\nprint(f'Nombre de lignes restantes : {ng_lignes}')","4e9648e2":"df_pays.dropna(thresh=5, inplace=True)\npourc_rgpt_non_chiffre = round(((ng_lignes-df_pays.shape[0])*100)\/ng_lignes, 2)\nprint(\n    f'% de lignes sans indicateurs chiffr\u00e9s supprim\u00e9es : {pourc_rgpt_non_chiffre}')\nprint(f'Nombre de lignes restantes : {df_pays.shape[0]}')","476642e2":"plt.figure(figsize=(20, 10))\ndf_tmp = df_pays.set_index('Country Name')\nsns.heatmap(df_tmp.isna(), cbar=False)\nplt.show()","c6595e6f":"# Variable 'Region' et 'Income Group' du jeu de donn\u00e9es EdStatsCountry.csv en supprimant les donn\u00e9es dupliqu\u00e9es\ncountries_income = pd.DataFrame({'Country_Code': country['Country Code'].unique(),\n                                 'Region': country['Region'],\n                                 'Income Group': country['Income Group']})\ndf_pays = pd.merge(df_pays, countries_income,\n                   left_on='Country Code', right_on='Country_Code', how='left')\ndf_pays.drop(columns=['Country_Code'], inplace=True)\ndf_pays.columns","52ab9870":"df_pays['Region'].unique()","d954d729":"df_pays[df_pays['Region'].isna()]","00bb14ad":"# Le pays British Virgin Islands appartient \u00e0 la r\u00e9gion 'Latin America & Caribbean'\ndf_pays.loc[[117, 118], 'Region'] = [\n    'Latin America & Caribbean', 'Latin America & Caribbean']","324eef6a":"df_pays['Income Group'].unique()","876cfbe3":"df_pays[df_pays['Income Group'].isna()]","fa9448d0":"# Le pays British Virgin Islands appartient au groupe de revenus 'High income: nonOECD'\ndf_pays.loc[[117, 118], 'Income Group'] = [\n    'High income: nonOECD', 'High income: nonOECD']","815c0d9f":"# Propagation des valeurs non nulles de 2010 vers 2015 pour travailler sur derni\u00e8re valeur connue non nulle la plus r\u00e9cente en 2015\ndf_pays_fillna = df_pays.copy()\ncols_to_interpolate = df_pays_fillna.columns[4:-2].tolist()\n#  Variables quantitatives\ndf_numeric = df_pays_fillna[cols_to_interpolate]\n# Variables qualitatives\ndf_categ = df_pays_fillna.loc[:, ['Country Name', 'Country Code',\n                                  'Indicator Name', 'Indicator Code', 'Income Group', 'Region']]\ndf_numeric.fillna(method='ffill', axis=1, inplace=True)\ndf_pays_fillna = pd.concat([df_categ, df_numeric], axis=1)\nnb_pays = df_pays_fillna['Country Name'].nunique()\nprint(f'Nombre de pays : {nb_pays}')\n# On ne conserve que la derni\u00e8re ann\u00e9e totalement remplie : 2015\ndf_pays_1an = df_pays_fillna[['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code', 'Region',\n                              'Income Group', '2015']]\n# # Derni\u00e8re colonne remplie renomm\u00e9e en 'Last info'\ndf_pays_1an.rename(columns={'2015': 'Last info'}, inplace=True)\n# # La m\u00e9thode fillna transforme tous les types en object ==> retransformer la derni\u00e8re colonne en num\u00e9rique\ndf_pays_1an = df_pays_1an.astype({'Last info': 'float64'})\ndf_pays_1an","61354477":"# Graphiques statistiques sur les 3 indicateurs\nplt.figure(figsize=(15, 20))\n\n# ------------------------------------------------------------------------------------\n# Indicateur d\u00e9mographique : SP.POP.1524.TO.UN\n# ------------------------------------------------------------------------------------\ndf_pop = df_pays_1an[df_pays_1an['Indicator Code'] == 'SP.POP.1524.TO.UN']\n\nplt.subplot(5, 2, 1)\nsns.boxplot(x=df_pop['Indicator Code'],\n            y=df_pop['Last info'], width=0.5, color='SteelBlue')\nplt.title('Indicateur d\u00e9mographique')\nplt.ylabel('Nombre de 15-24 ans')\n\nplt.subplot(5, 2, 2)\nsns.histplot(df_pop['Last info'], kde=True, color='SteelBlue')\nplt.title('Indicateur d\u00e9mographique')\nplt.xlabel('SP.POP.1524.TO.UN')\n\n# ------------------------------------------------------------------------------------\n# Indicateur \u00e9conomique : NY.GNP.PCAP.PP.CD\n# ------------------------------------------------------------------------------------\ndf_eco = df_pays_1an[df_pays_1an['Indicator Code'] == 'NY.GNP.PCAP.PP.CD']\n\nplt.subplot(5, 2, 3)\nsns.boxplot(x=df_eco['Indicator Code'],\n            y=df_eco['Last info'], width=0.5, color='SteelBlue')\nplt.title('Indicateur \u00e9conomique')\nplt.ylabel('RNB\/habitant, PPA ($)')\n\nplt.subplot(5, 2, 4)\nsns.histplot(df_eco['Last info'], kde=True, color='SteelBlue')\nplt.title('Indicateur \u00e9conomique')\nplt.xlabel('NY.GNP.PCAP.PP.CD')\n\n# ------------------------------------------------------------------------------------\n# Indicateur \u00e9ducatif lyc\u00e9e : SE.SEC.ENRR\n# ------------------------------------------------------------------------------------\ndf_edu_sec = df_pays_1an[df_pays_1an['Indicator Code'] == 'SE.SEC.ENRR']\n\nplt.subplot(5, 2, 5)\nsns.boxplot(x=df_edu_sec['Indicator Code'],\n            y=df_edu_sec['Last info'], width=0.5, color='SteelBlue')\nplt.title('Indicateur \u00e9ducatif lyc\u00e9e')\nplt.ylabel('Taux scolaris\u00e9 lyc\u00e9e (%)')\n\nplt.subplot(5, 2, 6)\nsns.histplot(df_edu_sec['Last info'], kde=True, color='SteelBlue')\nplt.title('Indicateur \u00e9ducatif lyc\u00e9e')\nplt.xlabel('SE.SEC.ENRR')\n\n# ------------------------------------------------------------------------------------\n# Indicateur \u00e9ducatif lyc\u00e9e : SE.TER.ENRR\n# ------------------------------------------------------------------------------------\ndf_edu_ter = df_pays_1an[df_pays_1an['Indicator Code'] == 'SE.TER.ENRR']\n\nplt.subplot(5, 2, 7)\nsns.boxplot(x=df_edu_ter['Indicator Code'],\n            y=df_edu_ter['Last info'], width=0.5, color='SteelBlue')\nplt.title('Indicateur \u00e9ducatif ens. sup.')\nplt.ylabel('Taux scolaris\u00e9 ens. sup. (%)')\n\nplt.subplot(5, 2, 8)\nsns.histplot(df_edu_ter['Last info'], kde=True, color='SteelBlue')\nplt.title('Indicateur \u00e9ducatif ens. sup.')\nplt.xlabel('SE.TER.ENRR')\n\n# ------------------------------------------------------------------------------------\n# Indicateur num\u00e9rique : SE.TER.ENRR\n# ------------------------------------------------------------------------------------\ndf_num = df_pays_1an[df_pays_1an['Indicator Code'] == 'IT.NET.USER.P2']\n\nplt.subplot(5, 2, 9)\nsns.boxplot(x=df_num['Indicator Code'],\n            y=df_num['Last info'], width=0.5, color='SteelBlue')\nplt.title('Indicateur num\u00e9rique')\nplt.ylabel('Taux d\\'tilisateur d\\'internet (%)')\n\nplt.subplot(5, 2, 10)\nsns.histplot(df_num['Last info'], kde=True, color='SteelBlue')\nplt.title('Indicateur num\u00e9rique')\nplt.xlabel('IT.NET.USER.P2')\n\nplt.tight_layout()","1345d17d":"# Statistiques descriptives\nmean_num = df_num['Last info'].mean()\nmean_eco = df_eco['Last info'].mean()\nmean_edu_sec = df_edu_sec['Last info'].mean()\nmean_edu_ter = df_edu_ter['Last info'].mean()\nmean_pop = df_pop['Last info'].mean()\n\nmedian_num = df_num['Last info'].median()\nmedian_eco = df_eco['Last info'].median()\nmedian_edu_sec = df_edu_sec['Last info'].median()\nmedian_edu_ter = df_edu_ter['Last info'].median()\nmedian_pop = df_pop['Last info'].median()\n\nvar_num = df_num['Last info'].var(ddof=0)\nvar_eco = df_eco['Last info'].var(ddof=0)\nvar_edu_sec = df_edu_sec['Last info'].var(ddof=0)\nvar_edu_ter = df_edu_ter['Last info'].var(ddof=0)\nvar_pop = df_pop['Last info'].var(ddof=0)\n\nstd_num = df_num['Last info'].std(ddof=0)\nstd_eco = df_eco['Last info'].std(ddof=0)\nstd_edu_sec = df_edu_sec['Last info'].std(ddof=0)\nstd_edu_ter = df_edu_ter['Last info'].std(ddof=0)\nstd_pop = df_pop['Last info'].std(ddof=0)\n\nskew_num = df_num['Last info'].skew()\nskew_eco = df_eco['Last info'].skew()\nskew_edu_sec = df_edu_sec['Last info'].skew()\nskew_edu_ter = df_edu_ter['Last info'].skew()\nskew_pop = df_pop['Last info'].skew()\n\nkurtosis_num = df_num['Last info'].kurtosis()\nkurtosis_eco = df_eco['Last info'].kurtosis()\nkurtosis_edu_sec = df_edu_sec['Last info'].kurtosis()\nkurtosis_edu_ter = df_edu_ter['Last info'].kurtosis()\nkurtosis_pop = df_pop['Last info'].kurtosis()\n\ndata_stats = [['mean', mean_num, mean_eco, mean_edu_sec, mean_edu_ter, mean_pop],\n              ['median', median_num, median_eco,\n                  median_edu_sec, median_edu_ter, median_pop],\n              ['var', var_num, var_eco, var_edu_sec, var_edu_ter, var_pop],\n              ['std', std_num, std_eco, std_edu_sec, std_edu_ter, std_pop],\n              ['skew', skew_num, skew_eco, skew_edu_sec, skew_edu_ter, skew_pop],\n              ['kurtosis', kurtosis_num, kurtosis_eco, kurtosis_edu_sec, kurtosis_edu_ter, kurtosis_pop]]\ndf_stat = pd.DataFrame(data_stats, columns=[\n                       'Desc', 'Stat_num', 'Stat_eco', 'Stat_edu_sec', 'Stat_edu_ter', 'Stat_pop'])\ndf_stat","c4930580":"# Interpolation des valeurs par r\u00e9gression lin\u00e9aire\ndf_interpolna = df_pays.copy()\ncols_to_interpolate = df_interpolna.columns[4:-2].tolist()\n#  Variables quantitatives\ndf_numeric = df_interpolna[cols_to_interpolate]\n# Variables qualitatives\ndf_categ = df_interpolna.loc[:, ['Country Name', 'Country Code',\n                                 'Indicator Name', 'Indicator Code', 'Income Group', 'Region']]\ndf_numeric.interpolate(method='linear', axis=1, inplace=True)\ndf_pays_all = pd.concat([df_categ, df_numeric], axis=1)\nnb_pays = df_pays_all['Country Name'].nunique()\nprint(f'nombre de pays : {nb_pays}')","c4d34b35":"# on ne conserve que les 5 indicateurs avec, pour chaque indicateur et pays, la derni\u00e8re information r\u00e9elle ou interpol\u00e9e de 2015\ndf_score = df_pays_all.pivot_table(\n    index=['Country Name'], columns=\"Indicator Code\")['2015']\ndf_score.shape","4a4753db":"plt.figure(figsize=(20, 10))\nsns.heatmap(df_score.isna(), cbar=False)\nplt.show()","b3e5c95c":"# Liste des pays avec au moins un indicateur manquant\ns_pays_indic_manquant = df_score.notnull().sum(axis=1)\ni_pays_indic_manquant = s_pays_indic_manquant[s_pays_indic_manquant < 5].index\nprint(f'Nombre de pays \u00e0 retirer : {len(i_pays_indic_manquant)}')\ndf_pays_retires = df_score.loc[i_pays_indic_manquant, :].sort_values(\n    by='SP.POP.1524.TO.UN', ascending=False)\ndf_pays_retires","354fc5cf":"# On ne conserve que les pays avec les 5 indicateurs renseign\u00e9s\ndf_score.dropna(thresh=5, inplace=True)\nprint(f'Nombre de pays restant : {df_score.shape[0]}')","3cd4fd25":"cols = ['IT.NET.USER.P2', 'NY.GNP.PCAP.PP.CD',\n        'SE.SEC.ENRR', 'SE.TER.ENRR', 'SP.POP.1524.TO.UN']","0de34da4":"scaler_std = StandardScaler()\nscaled_df_std = scaler_std.fit_transform(df_score[cols])\nscaled_df_std = pd.DataFrame(scaled_df_std, columns=cols)\nplot_graph(scaled_df_std)","f040ad6d":"# Une transformation de Box Cox est une transformation d'une variable \n# d\u00e9pendante non normale en une forme normale.\n\nscaler_pow = PowerTransformer(method='box-cox')\ndf_score_scaled = scaler_pow.fit_transform(df_score[cols])\ndf_score_scaled = pd.DataFrame(df_score_scaled, columns=cols)\nplot_graph(df_score_scaled)","837e1f21":"# Calcul du score pour chaque pays en fonction des pond\u00e9rations de chaque indicateur\n#  num, eco, ed_sec, ed_ter et pop\ndf_score_scaled['Country Name'] = df_score.index\ndf_score_scaled['Score'] = [(row[0] * 4 + row[1] * 1 + row[2] * 2 + row[3] * 3 + row[4]*4) for row in zip(df_score_scaled['IT.NET.USER.P2'],\n                                                                                                          df_score_scaled['NY.GNP.PCAP.PP.CD'], df_score_scaled['SE.SEC.ENRR'], df_score_scaled['SE.TER.ENRR'], df_score_scaled['SP.POP.1524.TO.UN'])]\ndf_score_scaled.sort_values(by='Score', ascending=False).head(10)","e5868fda":"# Ajout de la r\u00e9gion et du groupe de revenus\nregion_income = pd.DataFrame({'Country_Name': df_pays['Country Name'],\n                              'Region': df_pays['Region'],\n                              'Income Group': df_pays['Income Group']})\ndf_score_scaled_region = pd.merge(\n    df_score_scaled, region_income, left_on='Country Name', right_on='Country_Name', how='inner')\ndf_score_scaled_region.drop(columns=['Country_Name'], inplace=True)\ndf_score_scaled_region.drop_duplicates(inplace=True)\ndf_score_scaled_region.sort_values(by='Score', ascending=False).head(10)\n\n# Constitution du dataframe de visualisation du regroupement par pays\ndf_score_region = df_score_scaled_region.groupby('Region').mean()\ndf_score_region = df_score_region.rename(columns={'IT.NET.USER.P2': 'num',\n                                                  'NY.GNP.PCAP.PP.CD': 'eco',\n                                                  'SE.SEC.ENRR': 'edu_sec',\n                                                  'SE.TER.ENRR': 'edu_ter',\n                                                  'SP.POP.1524.TO.UN': 'pop'})\ndf_score_region = df_score_region.sort_values(by='Score', ascending=False)","03dc4863":"df_plot = df_score_region[['num', 'eco', 'edu_sec', 'edu_ter', 'pop']]\nplt.rc('axes', facecolor='Gainsboro')\n\n# number of variable\ncategories = list(df_plot.columns)\n\nN = len(categories)\n\n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\n\n\nfig = plt.figure(1, figsize=(20, 18))\n\ncolors = ['PowderBlue', 'Coral', 'HotPink',\n          'LightGreen', 'Cyan', 'RoyalBlue', 'Peru']\n\nfor i, region in enumerate(df_plot.index):\n\n    ax = fig.add_subplot(3, 3, i+1, polar=True)\n\n    ax.set_theta_offset(2*pi\/3)\n    ax.set_theta_direction(-1)\n    ax.set_rlabel_position(0)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles, categories, size=8)\n    plt.yticks(color=\"grey\", size=2)\n    values = df_plot.iloc[i].values\n    ax.plot(angles, values, 'o-', linewidth=1, linestyle='solid')\n    ax.fill(angles, values, colors[i], alpha=0.55)\n    ax.set_xticks(angles)\n    ax.set_xticklabels(categories, fontsize=12)\n    ax.set_title(region, size=20, color=colors[i])\n    ax.grid(True)\n    plt.grid(True)\n    plt.ylim(-2, 2)\n\nplt.show()","e7ce6e55":"fig = plt.figure(1, figsize=(7, 7))\nres = sns.heatmap(df_score_region, square=True,\n                  linewidths=0.1, cmap='coolwarm')\nres.set_yticklabels(res.get_ymajorticklabels(), fontsize=18)\nres.set_xticklabels(res.get_xmajorticklabels(), fontsize=13)\nplt.show()","7d2a1862":"df_score_income = df_score_scaled_region.groupby('Income Group').mean()\ndf_score_income = df_score_income.rename(columns={'IT.NET.USER.P2': 'num',\n                                                  'NY.GNP.PCAP.PP.CD': 'eco',\n                                                  'SE.SEC.ENRR': 'edu_sec',\n                                                  'SE.TER.ENRR': 'edu_ter',\n                                                  'SP.POP.1524.TO.UN': 'pop'})\n\ndf_score_income = df_score_income.sort_values(by='Score', ascending=False)","5e0008b3":"df_plot = df_score_income[['num', 'eco', 'edu_sec', 'edu_ter', 'pop']]\n\nplt.rc('axes', facecolor='Gainsboro')\n\n# number of variable\ncategories = list(df_plot.columns)\nN = len(categories)\n\n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\n\n\nfig = plt.figure(1, figsize=(20, 13))\n\ncolors = ['SandyBrown', 'MediumPurple',\n          'MediumSeaGreen', 'LightGreen', 'FireBrick']\n\nfor i, region in enumerate(df_plot.index):\n\n    ax = fig.add_subplot(2, 3, i+1, polar=True)\n\n    ax.set_theta_offset(2*pi\/3)\n    ax.set_theta_direction(-1)\n    ax.set_rlabel_position(0)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles, categories, size=16)\n    plt.yticks(color=\"grey\", size=2)\n    values = df_plot.iloc[i].values\n    ax.plot(angles, values, 'o-', linewidth=1, linestyle='solid')\n    ax.fill(angles, values, colors[i], alpha=0.55)\n    ax.set_xticks(angles)\n    ax.set_xticklabels(categories, fontsize=12)\n    ax.set_title(region, size=20, color=colors[i])\n    ax.grid(True)\n    plt.grid(True)\n    plt.ylim(-2, 2)\n\nplt.show()","87e3f4b6":"fig = plt.figure(1, figsize=(7, 7))\nax = sns.heatmap(df_score_income, square=True, linewidths=0.1, cmap='coolwarm')\nax.tick_params(axis='x', labelsize=13)\nax.tick_params(axis='y', labelsize=18)\nplt.show()","947fe2c1":"# Importation du dataset des pays du monde de geopandas\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n\n# Dataset geopandas : code ISO-3166 alpha 3 et Nom court\ndf1 = world.sort_values(by=['iso_a3'])\ndf1 = df1.loc[:, ['iso_a3', 'name']]\ndf1 = df1.rename(columns={'iso_a3': 'ISO'})\ndf1 = df1.set_index('ISO')\n\n#  Dataset EdStatsCountry.csv : code ISO-3166 alpha 3 et Nom court\ndf2 = country.sort_values(by=['Country Code'])\ndf2 = df2.loc[:, ['Country Code', 'Short Name']]\ndf2 = df2.rename(columns={'Country Code': 'ISO'})\ndf2 = df2.set_index('ISO')\n\n# Fusion des 2 dataframes\ndf_comp_nom_pays = pd.merge(df1, df2, on='ISO', how='left')\ndf_comp_nom_pays.reset_index(inplace=True)\n\n# Recherche des noms de pays diff\u00e9rents entre geopandas et notre jeu de donn\u00e9es\nrows = df_comp_nom_pays[df_comp_nom_pays['name']\n                        != df_comp_nom_pays['Short Name']]\nrows.drop([0, 1, 2, 3, 4], inplace=True)\ndf_comp = rows[rows['Short Name'].notnull()].sort_values(by='ISO')\nnoms_a_changer = df_comp['Short Name'].tolist()\ncodes_iso = df_comp['ISO'].tolist()\n\n# R\u00e9cup\u00e9ration des index geopandas des noms de pays \u00e0 changer\nindex_geo = world[world['iso_a3'].isin(codes_iso)].index\n# R\u00e9cup\u00e9ration des codes ISO 3 de geopandas\ncodes_isoa3 = world.loc[index_geo, 'iso_a3'].tolist()\n# Parcours les codes ISO 3 pour avoir une liste de noms de pays dans l'ordre des index geopandas\nnoms_a_changer = []\n[noms_a_changer.append(df_comp[df_comp['ISO'] == iso]\n                       ['Short Name'].tolist()[0]) for iso in codes_isoa3]\n# Changement du libell\u00e9 des noms courts des pays de geopandas par ceux de notre jeux de donn\u00e9es\nworld.loc[world.index[index_geo.tolist()], 'name'] = noms_a_changer\n\n# Pays \u00e9cart\u00e9s repr\u00e9sent\u00e9s en blanc sur la carte\ndf_pays_ecartes = pd.DataFrame(\n    {'Country Name': df_pays_retires.index, 'Score': np.zeros((70,), dtype=int)})\ndf_pays_ecartes.drop(index=[20, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n                            48, 49, 50, 52, 53, 55, 56, 57, 59, 61, 63, 65, 67, 68, 69], inplace=True)\ndf_pays_ecartes.loc[3, 'Country Name'] = 'Venezuela'\ndf_pays_ecartes.loc[34, 'Country Name'] = 'The Bahamas'\ndf_pays_ecartes.loc[6, 'Country Name'] = 'Dem. People\\'s Rep. Korea'\ndf_pays_ecartes.loc[47, 'Country Name'] = 'Dominican Republic'\ndf_pays_ecartes.shape","697e736a":"df_score_geo = world.merge(df_score_scaled, left_on='name', right_on='Country Name')[\n    ['geometry', 'Country Name', 'Score']]\ndf_pays_ecartes_geo = world.merge(df_pays_ecartes, left_on='name', right_on='Country Name')[\n    ['geometry', 'Country Name', 'Score']]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(30, 18)\n\nax.set_facecolor('xkcd:white')\n\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"2%\", pad=0.1)\ndf_score_geo.plot(column=df_score_geo['Score'], legend=True, ax=ax,\n                  cax=cax, cmap='RdYlGn', linestyle=\":\", edgecolor='black')\ndf_pays_ecartes_geo.plot(column=df_pays_ecartes['Score'], legend=True,\n                         ax=ax, cax=cax, color='white', linestyle=\":\", edgecolor='black')\n\nplt.show()","0d115585":"df_top10_prov = df_score_scaled[['Country Name', 'Score']].sort_values(\n    by='Score', ascending=False).head(10)\ndf_top10_prov['Place Provisoire'] = np.arange(1, 11, 1)\ndf_top10_prov.rename(columns={'Country Name': 'Pays'}, inplace=True)\ndf_top10_prov.set_index('Place Provisoire')","ff8eee81":"df_top10_region = df_pays[df_pays['Country Code'].isin(\n    ['AUS', 'USA', 'GBR', 'JAP', 'KOR', 'BEL', 'ESP', 'NDL', 'DEU', 'RUS'])][['Country Name', 'Region', 'Income Group']]\ndf_top10_region.drop_duplicates(inplace=True)\ndf_top10_region.set_index('Country Name', inplace=True)\ndf_top10_region.sort_values(by='Region', inplace=True)\ndf_top10_region","43d807de":"# Donn\u00e9es de pr\u00e9dictions existent pour nos pays Top10 pour les ann\u00e9es 2020-2040?\ndf_score_pred = data.copy()\ndf_score_pred = df_score_pred[['Country Name', 'Country Code',\n                               'Indicator Name', 'Indicator Code', '2020', '2025', '2030', '2035', '2040']]\n# Filtre par codes indicateurs retenus\ncols = ['IT.NET.USER.P2', 'NY.GNP.PCAP.PP.CD',\n        'SE.SEC.ENRR', 'SE.TER.ENRR', 'SP.POP.1524.TO.UN']\nmask_indic = df_score_pred['Indicator Code'].isin(cols)\n# Filtre par les pays Top 10\npays_top10 = df_top10_prov['Pays'].tolist()\nmask_top10 = df_score_pred['Country Name'].isin(pays_top10)\n# Dataframe avec les donn\u00e9es de pr\u00e9dictions\ndf_score_pred = df_score_pred[mask_indic][mask_top10]","80112ec2":"df_score_pred[['2020', '2025', '2030', '2035', '2040']].isna().sum().sum() == 0","c50e38c2":"# Donn\u00e9es de pr\u00e9dictions existent pour nos pays Top10 pour les ann\u00e9es 2020-2040?\ndf_score_holt = data.copy()\ndf_score_holt = df_score_holt[['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code', '2000', '2001',\n                               '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016']]\n#  Variables quantitatives\ndf_numeric = df_score_holt[['2000', '2001', '2002', '2003', '2004', '2005', '2006',\n                            '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016']]\n# Variables qualitatives\ndf_categ = df_score_holt.loc[:, ['Country Name',\n                                 'Country Code', 'Indicator Name', 'Indicator Code']]\ndf_numeric.interpolate(method='linear', axis=1, inplace=True)\ndf_score_holt = pd.concat([df_categ, df_numeric], axis=1)\n# Filtre par codes indicateurs retenus\ncols = ['IT.NET.USER.P2', 'NY.GNP.PCAP.PP.CD',\n        'SE.SEC.ENRR', 'SE.TER.ENRR', 'SP.POP.1524.TO.UN']\nmask_indic = df_score_holt['Indicator Code'].isin(cols)\n# Filtre par les pays Top 10\npays_top10 = df_top10_prov['Pays'].tolist()\nmask_top10 = df_score_holt['Country Name'].isin(pays_top10)\n# Dataframe avec les donn\u00e9es de pr\u00e9dictions\ndf_score_holt = df_score_holt[mask_indic][mask_top10]\ndf_score_holt","ed0213f6":"cols_holt = ['2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007',\n             '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016']\nx_index = pd.date_range(start='2000', end='2017', freq='A')\n\n# ----------------------------------------------------------------------------------------------------------------------\n# Indicateurs \u00e9conomique - NY.GNP.PCAP.PP.CD\n# -----------------------------------------------------------------------------------------------------------------------\n\n# Pr\u00e9paration du jeu de donn\u00e9es\ndf_holt_eco = df_score_holt[df_score_holt['Indicator Code']\n                            == 'NY.GNP.PCAP.PP.CD'][cols_holt]\n# Australie\nind_eco_aus = df_holt_eco[df_score_holt['Country Name'] == 'Australia'].values.tolist()[\n    0]\ny_eco_aus = pd.Series(ind_eco_aus, x_index)\n# Belgique\nind_eco_bel = df_holt_eco[df_score_holt['Country Name'] == 'Belgium'].values.tolist()[\n    0]\ny_eco_bel = pd.Series(ind_eco_bel, x_index)\n# Allemagne\nind_eco_deu = df_holt_eco[df_score_holt['Country Name'] == 'Germany'].values.tolist()[\n    0]\ny_eco_deu = pd.Series(ind_eco_deu, x_index)\n# Japon\nind_eco_jpn = df_holt_eco[df_score_holt['Country Name'] == 'Japan'].values.tolist()[\n    0]\ny_eco_jpn = pd.Series(ind_eco_jpn, x_index)\n# Cor\u00e9e du Sud\nind_eco_kor = df_holt_eco[df_score_holt['Country Name']\n                          == 'Korea, Rep.'].values.tolist()[0]\ny_eco_kor = pd.Series(ind_eco_kor, x_index)\n# Pays-bas\nind_eco_nld = df_holt_eco[df_score_holt['Country Name']\n                          == 'Netherlands'].values.tolist()[0]\ny_eco_nld = pd.Series(ind_eco_nld, x_index)\n# Russie\nind_eco_rus = df_holt_eco[df_score_holt['Country Name']\n                          == 'Russian Federation'].values.tolist()[0]\ny_eco_rus = pd.Series(ind_eco_rus, x_index)\n# Espagne\nind_eco_esp = df_holt_eco[df_score_holt['Country Name'] == 'Spain'].values.tolist()[\n    0]\ny_eco_esp = pd.Series(ind_eco_esp, x_index)\n# Royaume-Unis\nind_eco_gbr = df_holt_eco[df_score_holt['Country Name']\n                          == 'United Kingdom'].values.tolist()[0]\ny_eco_gbr = pd.Series(ind_eco_gbr, x_index)\n# Etats-Unis\nind_eco_usa = df_holt_eco[df_score_holt['Country Name']\n                          == 'United States'].values.tolist()[0]\ny_eco_usa = pd.Series(ind_eco_usa, x_index)\n\n# Entrainement du mod\u00e8le\nfit1 = Holt(y_eco_aus, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast1 = fit1.forecast(3).rename('Australia')\nfit2 = Holt(y_eco_bel, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast2 = fit2.forecast(3).rename('Belgique')\nfit3 = Holt(y_eco_deu, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast3 = fit3.forecast(3).rename('Allemagne')\nfit4 = Holt(y_eco_jpn, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast4 = fit4.forecast(3).rename('Japon')\nfit5 = Holt(y_eco_kor, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast5 = fit5.forecast(3).rename('Cor\u00e9e Sud')\nfit6 = Holt(y_eco_nld, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast6 = fit6.forecast(3).rename('Pays-Bas')\nfit7 = Holt(y_eco_rus, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast7 = fit7.forecast(3).rename('Russie')\nfit8 = Holt(y_eco_esp, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast8 = fit8.forecast(3).rename('Espagne')\nfit9 = Holt(y_eco_gbr, exponential=True,\n            initialization_method='estimated').fit(optimized=True)\nfcast9 = fit9.forecast(3).rename('Royaume-Unis')\nfit10 = Holt(y_eco_usa, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast10 = fit10.forecast(3).rename('Etats-Unis')\n\n# Sauvegarde de la pr\u00e9diction \u00e9co pour scoring\ndf_prediction = pd.DataFrame(index=np.arange(0, 50), columns=(\n    'Country Name', 'Indicator Code', '2017', '2018', '2019'))\ndf_prediction.loc[0] = ['Australia',\n                        'NY.GNP.PCAP.PP.CD', fcast1[0], fcast1[1], fcast1[2]]\ndf_prediction.loc[1] = ['Belgium', 'NY.GNP.PCAP.PP.CD',\n                        fcast2[0], fcast2[1], fcast2[2]]\ndf_prediction.loc[2] = ['Germany', 'NY.GNP.PCAP.PP.CD',\n                        fcast3[0], fcast3[1], fcast3[2]]\ndf_prediction.loc[3] = ['Japan', 'NY.GNP.PCAP.PP.CD',\n                        fcast4[0], fcast4[1], fcast4[2]]\ndf_prediction.loc[4] = ['Korea, Rep.',\n                        'NY.GNP.PCAP.PP.CD', fcast5[0], fcast5[1], fcast5[2]]\ndf_prediction.loc[5] = ['Netherlands',\n                        'NY.GNP.PCAP.PP.CD', fcast6[0], fcast6[1], fcast6[2]]\ndf_prediction.loc[6] = ['Russian Federation',\n                        'NY.GNP.PCAP.PP.CD', fcast7[0], fcast7[1], fcast7[2]]\ndf_prediction.loc[7] = ['Spain', 'NY.GNP.PCAP.PP.CD',\n                        fcast8[0], fcast8[1], fcast8[2]]\ndf_prediction.loc[8] = ['United Kingdom',\n                        'NY.GNP.PCAP.PP.CD', fcast9[0], fcast9[1], fcast9[2]]\ndf_prediction.loc[9] = ['United States',\n                        'NY.GNP.PCAP.PP.CD', fcast10[0], fcast10[1], fcast10[2]]\n\n# -----------------------------------------------------------------------------------------------------------------------\n# Indicateurs d\u00e9mographique - SP.POP.1524.TO.UN\n# -----------------------------------------------------------------------------------------------------------------------\n\n# Pr\u00e9paration du jeu de donn\u00e9es\ndf_holt_pop = df_score_holt[df_score_holt['Indicator Code']\n                            == 'SP.POP.1524.TO.UN'][cols_holt]\n# Australie\nind_pop_aus = df_holt_pop[df_score_holt['Country Name'] == 'Australia'].values.tolist()[\n    0]\ny_pop_aus = pd.Series(ind_pop_aus, x_index)\n# Belgique\nind_pop_bel = df_holt_pop[df_score_holt['Country Name'] == 'Belgium'].values.tolist()[\n    0]\ny_pop_bel = pd.Series(ind_pop_bel, x_index)\n# Allemagne\nind_pop_deu = df_holt_pop[df_score_holt['Country Name'] == 'Germany'].values.tolist()[\n    0]\ny_pop_deu = pd.Series(ind_pop_deu, x_index)\n# Japon\nind_pop_jpn = df_holt_pop[df_score_holt['Country Name'] == 'Japan'].values.tolist()[\n    0]\ny_pop_jpn = pd.Series(ind_pop_jpn, x_index)\n# Cor\u00e9e du Sud\nind_pop_kor = df_holt_pop[df_score_holt['Country Name']\n                          == 'Korea, Rep.'].values.tolist()[0]\ny_pop_kor = pd.Series(ind_pop_kor, x_index)\n# Pays-bas\nind_pop_nld = df_holt_pop[df_score_holt['Country Name']\n                          == 'Netherlands'].values.tolist()[0]\ny_pop_nld = pd.Series(ind_pop_nld, x_index)\n# Russie\nind_pop_rus = df_holt_pop[df_score_holt['Country Name']\n                          == 'Russian Federation'].values.tolist()[0]\ny_pop_rus = pd.Series(ind_pop_rus, x_index)\n# Espagne\nind_pop_esp = df_holt_pop[df_score_holt['Country Name'] == 'Spain'].values.tolist()[\n    0]\ny_pop_esp = pd.Series(ind_pop_esp, x_index)\n# Royaume-Unis\nind_pop_gbr = df_holt_pop[df_score_holt['Country Name']\n                          == 'United Kingdom'].values.tolist()[0]\ny_pop_gbr = pd.Series(ind_pop_gbr, x_index)\n# Etats-Unis\nind_pop_usa = df_holt_pop[df_score_holt['Country Name']\n                          == 'United States'].values.tolist()[0]\ny_pop_usa = pd.Series(ind_pop_usa, x_index)\n\n# Entrainement du mod\u00e8le\nfit11 = Holt(y_pop_aus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast11 = fit11.forecast(3).rename('Australia')\nfit12 = Holt(y_pop_bel, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast12 = fit12.forecast(3).rename('Belgique')\nfit13 = Holt(y_pop_deu, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast13 = fit13.forecast(3).rename('Allemagne')\nfit14 = Holt(y_pop_jpn, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast14 = fit14.forecast(3).rename('Japon')\nfit15 = Holt(y_pop_kor, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast15 = fit15.forecast(3).rename('Cor\u00e9e Sud')\nfit16 = Holt(y_pop_nld, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast16 = fit16.forecast(3).rename('Pays-Bas')\nfit17 = Holt(y_pop_rus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast17 = fit17.forecast(3).rename('Russie')\nfit18 = Holt(y_pop_esp, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast18 = fit18.forecast(3).rename('Espagne')\nfit19 = Holt(y_pop_gbr, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast19 = fit19.forecast(3).rename('Royaume-Unis')\nfit20 = Holt(y_pop_usa, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast20 = fit20.forecast(3).rename('Etats-Unis')\n\n# Sauvegarde de la pr\u00e9diction pop pour scoring\ndf_prediction.loc[10] = ['Australia', 'SP.POP.1524.TO.UN',\n                         fcast11[0], fcast11[1], fcast11[2]]\ndf_prediction.loc[11] = ['Belgium', 'SP.POP.1524.TO.UN',\n                         fcast12[0], fcast12[1], fcast12[2]]\ndf_prediction.loc[12] = ['Germany', 'SP.POP.1524.TO.UN',\n                         fcast13[0], fcast13[1], fcast13[2]]\ndf_prediction.loc[13] = ['Japan', 'SP.POP.1524.TO.UN',\n                         fcast14[0], fcast14[1], fcast14[2]]\ndf_prediction.loc[14] = ['Korea, Rep.',\n                         'SP.POP.1524.TO.UN', fcast15[0], fcast15[1], fcast15[2]]\ndf_prediction.loc[15] = ['Netherlands',\n                         'SP.POP.1524.TO.UN', fcast16[0], fcast16[1], fcast16[2]]\ndf_prediction.loc[16] = ['Russian Federation',\n                         'SP.POP.1524.TO.UN', fcast17[0], fcast17[1], fcast17[2]]\ndf_prediction.loc[17] = ['Spain', 'SP.POP.1524.TO.UN',\n                         fcast18[0], fcast18[1], fcast18[2]]\ndf_prediction.loc[18] = ['United Kingdom',\n                         'SP.POP.1524.TO.UN', fcast19[0], fcast19[1], fcast19[2]]\ndf_prediction.loc[19] = ['United States',\n                         'SP.POP.1524.TO.UN', fcast20[0], fcast20[1], fcast20[2]]\n\n# -----------------------------------------------------------------------------------------------------------------------\n# Indicateurs \u00e9ducatif lyc\u00e9e - SE.SEC.ENRR\n# -----------------------------------------------------------------------------------------------------------------------\n\n# Pr\u00e9paration du jeu de donn\u00e9es\ndf_holt_edu_sec = df_score_holt[df_score_holt['Indicator Code']\n                                == 'SE.SEC.ENRR'][cols_holt]\n# Australie\nind_edu_sec_aus = df_holt_edu_sec[df_score_holt['Country Name'] == 'Australia'].values.tolist()[\n    0]\ny_edu_sec_aus = pd.Series(ind_edu_sec_aus, x_index)\n# Belgique\nind_edu_sec_bel = df_holt_edu_sec[df_score_holt['Country Name'] == 'Belgium'].values.tolist()[\n    0]\ny_edu_sec_bel = pd.Series(ind_edu_sec_bel, x_index)\n# Allemagne\nind_edu_sec_deu = df_holt_edu_sec[df_score_holt['Country Name'] == 'Germany'].values.tolist()[\n    0]\ny_edu_sec_deu = pd.Series(ind_edu_sec_deu, x_index)\n# Japon\nind_edu_sec_jpn = df_holt_edu_sec[df_score_holt['Country Name'] == 'Japan'].values.tolist()[\n    0]\ny_edu_sec_jpn = pd.Series(ind_edu_sec_jpn, x_index)\n# Cor\u00e9e du Sud\nind_edu_sec_kor = df_holt_edu_sec[df_score_holt['Country Name'] == 'Korea, Rep.'].values.tolist()[\n    0]\ny_edu_sec_kor = pd.Series(ind_edu_sec_kor, x_index)\n# Pays-bas\nind_edu_sec_nld = df_holt_edu_sec[df_score_holt['Country Name'] == 'Netherlands'].values.tolist()[\n    0]\ny_edu_sec_nld = pd.Series(ind_edu_sec_nld, x_index)\n# Russie\nind_edu_sec_rus = df_holt_edu_sec[df_score_holt['Country Name'] == 'Russian Federation'].values.tolist()[\n    0]\ny_edu_sec_rus = pd.Series(ind_edu_sec_rus, x_index)\ny_edu_sec_rus = y_edu_sec_rus.fillna(80)\n# Espagne\nind_edu_sec_esp = df_holt_edu_sec[df_score_holt['Country Name'] == 'Spain'].values.tolist()[\n    0]\ny_edu_sec_esp = pd.Series(ind_edu_sec_esp, x_index)\n# Royaume-Unis\nind_edu_sec_gbr = df_holt_edu_sec[df_score_holt['Country Name'] == 'United Kingdom'].values.tolist()[\n    0]\ny_edu_sec_gbr = pd.Series(ind_edu_sec_gbr, x_index)\n# Etats-Unis\nind_edu_sec_usa = df_holt_edu_sec[df_score_holt['Country Name'] == 'United States'].values.tolist()[\n    0]\ny_edu_sec_usa = pd.Series(ind_edu_sec_usa, x_index)\n\n# Entrainement du mod\u00e8le\nfit21 = Holt(y_edu_sec_aus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast21 = fit21.forecast(3).rename('Australia')\nfit22 = Holt(y_edu_sec_bel, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast22 = fit22.forecast(3).rename('Belgique')\nfit23 = Holt(y_edu_sec_deu, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast23 = fit23.forecast(3).rename('Allemagne')\nfit24 = Holt(y_edu_sec_jpn, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast24 = fit24.forecast(3).rename('Japon')\nfit25 = Holt(y_edu_sec_kor, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast25 = fit25.forecast(3).rename('Cor\u00e9e Sud')\nfit26 = Holt(y_edu_sec_nld, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast26 = fit26.forecast(3).rename('Pays-Bas')\nfit27 = Holt(y_edu_sec_rus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast27 = fit27.forecast(3).rename('Russie')\nfit28 = Holt(y_edu_sec_esp, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast28 = fit28.forecast(3).rename('Espagne')\nfit29 = Holt(y_edu_sec_gbr, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast29 = fit29.forecast(3).rename('Royaume-Unis')\nfit30 = Holt(y_edu_sec_usa, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast30 = fit30.forecast(3).rename('Etats-Unis')\n\n# Sauvegarde de la pr\u00e9diction \u00e9du_sec pour scoring\ndf_prediction.loc[20] = ['Australia', 'SE.SEC.ENRR',\n                         fcast21[0], fcast21[1], fcast21[2]]\ndf_prediction.loc[21] = ['Belgium', 'SE.SEC.ENRR',\n                         fcast22[0], fcast22[1], fcast22[2]]\ndf_prediction.loc[22] = ['Germany', 'SE.SEC.ENRR',\n                         fcast23[0], fcast23[1], fcast23[2]]\ndf_prediction.loc[23] = ['Japan', 'SE.SEC.ENRR',\n                         fcast24[0], fcast24[1], fcast24[2]]\ndf_prediction.loc[24] = ['Korea, Rep.',\n                         'SE.SEC.ENRR', fcast25[0], fcast25[1], fcast25[2]]\ndf_prediction.loc[25] = ['Netherlands',\n                         'SE.SEC.ENRR', fcast26[0], fcast26[1], fcast26[2]]\ndf_prediction.loc[26] = ['Russian Federation',\n                         'SE.SEC.ENRR', fcast27[0], fcast27[1], fcast27[2]]\ndf_prediction.loc[27] = ['Spain', 'SE.SEC.ENRR',\n                         fcast28[0], fcast28[1], fcast28[2]]\ndf_prediction.loc[28] = ['United Kingdom',\n                         'SE.SEC.ENRR', fcast29[0], fcast29[1], fcast29[2]]\ndf_prediction.loc[29] = ['United States',\n                         'SE.SEC.ENRR', fcast30[0], fcast30[1], fcast30[2]]\n\n# -----------------------------------------------------------------------------------------------------------------------\n# Indicateurs \u00e9ducatif enseignement sup\u00e9rieur - SE.TER.ENRR\n# -----------------------------------------------------------------------------------------------------------------------\n\n# Pr\u00e9paration du jeu de donn\u00e9es\ndf_holt_edu_ter = df_score_holt[df_score_holt['Indicator Code']\n                                == 'SE.TER.ENRR'][cols_holt]\n# Australie\nind_edu_ter_aus = df_holt_edu_ter[df_score_holt['Country Name'] == 'Australia'].values.tolist()[\n    0]\ny_edu_ter_aus = pd.Series(ind_edu_ter_aus, x_index)\n# Belgique\nind_edu_ter_bel = df_holt_edu_ter[df_score_holt['Country Name'] == 'Belgium'].values.tolist()[\n    0]\ny_edu_ter_bel = pd.Series(ind_edu_ter_bel, x_index)\n# Allemagne\nind_edu_ter_deu = df_holt_edu_ter[df_score_holt['Country Name'] == 'Germany'].values.tolist()[\n    0]\ny_edu_ter_deu = pd.Series(ind_edu_ter_deu, x_index)\ny_edu_ter_deu = y_edu_ter_deu.fillna(60)\n# Japon\nind_edu_ter_jpn = df_holt_edu_ter[df_score_holt['Country Name'] == 'Japan'].values.tolist()[\n    0]\ny_edu_ter_jpn = pd.Series(ind_edu_ter_jpn, x_index)\n# Cor\u00e9e du Sud\nind_edu_ter_kor = df_holt_edu_ter[df_score_holt['Country Name'] == 'Korea, Rep.'].values.tolist()[\n    0]\ny_edu_ter_kor = pd.Series(ind_edu_ter_kor, x_index)\n# Pays-bas\nind_edu_ter_nld = df_holt_edu_ter[df_score_holt['Country Name'] == 'Netherlands'].values.tolist()[\n    0]\ny_edu_ter_nld = pd.Series(ind_edu_ter_nld, x_index)\n# Russie\nind_edu_ter_rus = df_holt_edu_ter[df_score_holt['Country Name'] == 'Russian Federation'].values.tolist()[\n    0]\ny_edu_ter_rus = pd.Series(ind_edu_ter_rus, x_index)\n# Espagne\nind_edu_ter_esp = df_holt_edu_ter[df_score_holt['Country Name'] == 'Spain'].values.tolist()[\n    0]\ny_edu_ter_esp = pd.Series(ind_edu_ter_esp, x_index)\n# Royaume-Unis\nind_edu_ter_gbr = df_holt_edu_ter[df_score_holt['Country Name'] == 'United Kingdom'].values.tolist()[\n    0]\ny_edu_ter_gbr = pd.Series(ind_edu_ter_gbr, x_index)\n# Etats-Unis\nind_edu_ter_usa = df_holt_edu_ter[df_score_holt['Country Name'] == 'United States'].values.tolist()[\n    0]\ny_edu_ter_usa = pd.Series(ind_edu_ter_usa, x_index)\n\n# Entrainement du mod\u00e8le\nfit31 = Holt(y_edu_ter_aus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast31 = fit31.forecast(3).rename('Australia')\nfit32 = Holt(y_edu_ter_bel, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast32 = fit32.forecast(3).rename('Belgique')\nfit33 = Holt(y_edu_ter_deu, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast33 = fit33.forecast(3).rename('Allemagne')\nfit34 = Holt(y_edu_ter_jpn, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast34 = fit34.forecast(3).rename('Japon')\nfit35 = Holt(y_edu_ter_kor, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast35 = fit35.forecast(3).rename('Cor\u00e9e Sud')\nfit36 = Holt(y_edu_ter_nld, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast36 = fit36.forecast(3).rename('Pays-Bas')\nfit37 = Holt(y_edu_ter_rus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast37 = fit37.forecast(3).rename('Russie')\nfit38 = Holt(y_edu_ter_esp, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast38 = fit38.forecast(3).rename('Espagne')\nfit39 = Holt(y_edu_ter_gbr, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast39 = fit39.forecast(3).rename('Royaume-Unis')\nfit40 = Holt(y_edu_ter_usa, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast40 = fit40.forecast(3).rename('Etats-Unis')\n\n# Sauvegarde de la pr\u00e9diction \u00e9duc_ter pour scoring\ndf_prediction.loc[30] = ['Australia', 'SE.TER.ENRR',\n                         fcast31[0], fcast31[1], fcast31[2]]\ndf_prediction.loc[31] = ['Belgium', 'SE.TER.ENRR',\n                         fcast32[0], fcast32[1], fcast32[2]]\ndf_prediction.loc[32] = ['Germany', 'SE.TER.ENRR',\n                         fcast33[0], fcast33[1], fcast33[2]]\ndf_prediction.loc[33] = ['Japan', 'SE.TER.ENRR',\n                         fcast34[0], fcast34[1], fcast34[2]]\ndf_prediction.loc[34] = ['Korea, Rep.',\n                         'SE.TER.ENRR', fcast35[0], fcast35[1], fcast35[2]]\ndf_prediction.loc[35] = ['Netherlands',\n                         'SE.TER.ENRR', fcast36[0], fcast36[1], fcast36[2]]\ndf_prediction.loc[36] = ['Russian Federation',\n                         'SE.TER.ENRR', fcast37[0], fcast37[1], fcast37[2]]\ndf_prediction.loc[37] = ['Spain', 'SE.TER.ENRR',\n                         fcast38[0], fcast38[1], fcast38[2]]\ndf_prediction.loc[38] = ['United Kingdom',\n                         'SE.TER.ENRR', fcast39[0], fcast39[1], fcast39[2]]\ndf_prediction.loc[39] = ['United States',\n                         'SE.TER.ENRR', fcast40[0], fcast40[1], fcast40[2]]\n\n# -----------------------------------------------------------------------------------------------------------------------\n# Indicateurs num\u00e9rique - IT.NET.USER.P2\n# -----------------------------------------------------------------------------------------------------------------------\n\n# Pr\u00e9paration du jeu de donn\u00e9es\ndf_holt_num = df_score_holt[df_score_holt['Indicator Code']\n                            == 'IT.NET.USER.P2'][cols_holt]\n# Australie\nind_num_aus = df_holt_num[df_score_holt['Country Name'] == 'Australia'].values.tolist()[\n    0]\ny_num_aus = pd.Series(ind_num_aus, x_index)\n# Belgique\nind_num_bel = df_holt_num[df_score_holt['Country Name'] == 'Belgium'].values.tolist()[\n    0]\ny_num_bel = pd.Series(ind_num_bel, x_index)\n# Allemagne\nind_num_deu = df_holt_num[df_score_holt['Country Name'] == 'Germany'].values.tolist()[\n    0]\ny_num_deu = pd.Series(ind_num_deu, x_index)\n# Japon\nind_num_jpn = df_holt_num[df_score_holt['Country Name'] == 'Japan'].values.tolist()[\n    0]\ny_num_jpn = pd.Series(ind_num_jpn, x_index)\n# Cor\u00e9e du Sud\nind_num_kor = df_holt_num[df_score_holt['Country Name']\n                          == 'Korea, Rep.'].values.tolist()[0]\ny_num_kor = pd.Series(ind_num_kor, x_index)\n# Pays-bas\nind_num_nld = df_holt_num[df_score_holt['Country Name']\n                          == 'Netherlands'].values.tolist()[0]\ny_num_nld = pd.Series(ind_num_nld, x_index)\n# Russie\nind_num_rus = df_holt_num[df_score_holt['Country Name']\n                          == 'Russian Federation'].values.tolist()[0]\ny_num_rus = pd.Series(ind_num_rus, x_index)\n# Espagne\nind_num_esp = df_holt_num[df_score_holt['Country Name'] == 'Spain'].values.tolist()[\n    0]\ny_num_esp = pd.Series(ind_num_esp, x_index)\n# Royaume-Unis\nind_num_gbr = df_holt_num[df_score_holt['Country Name']\n                          == 'United Kingdom'].values.tolist()[0]\ny_num_gbr = pd.Series(ind_num_gbr, x_index)\n# Etats-Unis\nind_num_usa = df_holt_num[df_score_holt['Country Name']\n                          == 'United States'].values.tolist()[0]\ny_num_usa = pd.Series(ind_num_usa, x_index)\n\n# Entrainement du mod\u00e8le\nfit41 = Holt(y_num_aus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast41 = fit41.forecast(3).rename('Australia')\nfit42 = Holt(y_num_bel, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast42 = fit42.forecast(3).rename('Belgique')\nfit43 = Holt(y_num_deu, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast43 = fit43.forecast(3).rename('Allemagne')\nfit44 = Holt(y_num_jpn, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast44 = fit44.forecast(3).rename('Japon')\nfit45 = Holt(y_num_kor, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast45 = fit45.forecast(3).rename('Cor\u00e9e Sud')\nfit46 = Holt(y_num_nld, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast46 = fit46.forecast(3).rename('Pays-Bas')\nfit47 = Holt(y_num_rus, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast47 = fit47.forecast(3).rename('Russie')\nfit48 = Holt(y_num_esp, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast48 = fit48.forecast(3).rename('Espagne')\nfit49 = Holt(y_num_gbr, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast49 = fit49.forecast(3).rename('Royaume-Unis')\nfit50 = Holt(y_num_usa, exponential=True,\n             initialization_method='estimated').fit(optimized=True)\nfcast50 = fit50.forecast(3).rename('Etats-Unis')\n\n# Sauvegarde de la pr\u00e9diction num pour scoring\ndf_prediction.loc[40] = ['Australia', 'IT.NET.USER.P2',\n                         fcast41[0], fcast41[1], fcast41[2]]\ndf_prediction.loc[41] = ['Belgium', 'IT.NET.USER.P2',\n                         fcast42[0], fcast42[1], fcast42[2]]\ndf_prediction.loc[42] = ['Germany', 'IT.NET.USER.P2',\n                         fcast43[0], fcast43[1], fcast43[2]]\ndf_prediction.loc[43] = ['Japan', 'IT.NET.USER.P2',\n                         fcast44[0], fcast44[1], fcast44[2]]\ndf_prediction.loc[44] = ['Korea, Rep.',\n                         'IT.NET.USER.P2', fcast45[0], fcast45[1], fcast45[2]]\ndf_prediction.loc[45] = ['Netherlands',\n                         'IT.NET.USER.P2', fcast46[0], fcast46[1], fcast46[2]]\ndf_prediction.loc[46] = ['Russian Federation',\n                         'IT.NET.USER.P2', fcast47[0], fcast47[1], fcast47[2]]\ndf_prediction.loc[47] = ['Spain', 'IT.NET.USER.P2',\n                         fcast48[0], fcast48[1], fcast48[2]]\ndf_prediction.loc[48] = ['United Kingdom',\n                         'IT.NET.USER.P2', fcast49[0], fcast49[1], fcast49[2]]\ndf_prediction.loc[49] = ['United States',\n                         'IT.NET.USER.P2', fcast50[0], fcast50[1], fcast50[2]]","9cd4c388":"# Visualisation des pr\u00e9dictions\nplt.figure(figsize=(12, 8))\nax = plt.axes()\n\nplt.plot(y_pop_aus, marker='o', color='SteelBlue')\nline11, = plt.plot(fcast11, marker='o', color='SteelBlue')\nplt.plot(y_pop_bel, marker='o', color='Crimson')\nline12, = plt.plot(fcast12, marker='o', color='Crimson')\nplt.plot(y_pop_deu, marker='o', color='HotPink')\nline13, = plt.plot(fcast13, marker='o', color='HotPink')\nplt.plot(y_pop_jpn, marker='o', color='Peru')\nline14, = plt.plot(fcast14, marker='o', color='Peru')\nplt.plot(y_pop_kor, marker='o', color='SeaGreen')\nline15, = plt.plot(fcast15, marker='o', color='SeaGreen')\nplt.plot(y_pop_nld, marker='o', color='Orange')\nline16, = plt.plot(fcast16, marker='o', color='Orange')\nplt.plot(y_pop_rus, marker='o', color='Cyan')\nline17, = plt.plot(fcast17, marker='o', color='Cyan')\nplt.plot(y_pop_esp, marker='o', color='MediumPurple')\nline18, = plt.plot(fcast18, marker='o', color='MediumPurple')\nplt.plot(y_pop_gbr, marker='o', color='DimGray')\nline19, = plt.plot(fcast19, marker='o', color='DimGray')\nplt.plot(y_pop_usa, marker='o', color='Navy')\nline20, = plt.plot(fcast20, marker='o', color='Navy')\n\nplt.legend([line11, line12, line13, line14, line15, line16, line17, line18, line19, line20],\n           [fcast11.name, fcast12.name, fcast13.name, fcast14.name, fcast15.name,\n               fcast16.name, fcast17.name, fcast18.name, fcast19.name, fcast20.name],\n           facecolor='white',\n           bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nax.set_facecolor('white')\nplt.title(\n    'Pr\u00e9diction de l\\'indicateur d\u00e9mographique SP.POP.1524.TO.UN pour les top 10 pays')\nplt.show()\n\n# Visualisation des pr\u00e9dictions\nplt.figure(figsize=(12, 8))\nax = plt.axes()\n\nplt.plot(y_eco_aus, marker='o', color='SteelBlue')\nline1, = plt.plot(fcast1, marker='o', color='SteelBlue')\nplt.plot(y_eco_bel, marker='o', color='Crimson')\nline2, = plt.plot(fcast2, marker='o', color='Crimson')\nplt.plot(y_eco_deu, marker='o', color='HotPink')\nline3, = plt.plot(fcast3, marker='o', color='HotPink')\nplt.plot(y_eco_jpn, marker='o', color='Peru')\nline4, = plt.plot(fcast4, marker='o', color='Peru')\nplt.plot(y_eco_kor, marker='o', color='SeaGreen')\nline5, = plt.plot(fcast5, marker='o', color='SeaGreen')\nplt.plot(y_eco_nld, marker='o', color='Orange')\nline6, = plt.plot(fcast6, marker='o', color='Orange')\nplt.plot(y_eco_rus, marker='o', color='Cyan')\nline7, = plt.plot(fcast7, marker='o', color='Cyan')\nplt.plot(y_eco_esp, marker='o', color='MediumPurple')\nline8, = plt.plot(fcast8, marker='o', color='MediumPurple')\nplt.plot(y_eco_gbr, marker='o', color='DimGray')\nline9, = plt.plot(fcast9, marker='o', color='DimGray')\nplt.plot(y_eco_usa, marker='o', color='Navy')\nline10, = plt.plot(fcast10, marker='o', color='Navy')\n\nplt.legend([line1, line2, line3, line4, line5, line6, line7, line8, line9, line10],\n           [fcast1.name, fcast2.name, fcast3.name, fcast4.name, fcast5.name,\n               fcast6.name, fcast7.name, fcast8.name, fcast9.name, fcast10.name],\n           facecolor='white',\n           bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nax.set_facecolor('white')\nplt.title(\n    'Pr\u00e9diction de l\\'indicateur \u00e9conomique NY.GNP.PCAP.PP.CD pour les top 10 pays')\nplt.show()\n\n\n# Visualisation des pr\u00e9dictions\nplt.figure(figsize=(12, 8))\nax = plt.axes()\n\nplt.plot(y_edu_sec_aus, marker='o', color='SteelBlue')\nline21, = plt.plot(fcast21, marker='o', color='SteelBlue')\nplt.plot(y_edu_sec_bel, marker='o', color='Crimson')\nline22, = plt.plot(fcast22, marker='o', color='Crimson')\nplt.plot(y_edu_sec_deu, marker='o', color='HotPink')\nline23, = plt.plot(fcast23, marker='o', color='HotPink')\nplt.plot(y_edu_sec_jpn, marker='o', color='Peru')\nline24, = plt.plot(fcast24, marker='o', color='Peru')\nplt.plot(y_edu_sec_kor, marker='o', color='SeaGreen')\nline25, = plt.plot(fcast25, marker='o', color='SeaGreen')\nplt.plot(y_edu_sec_nld, marker='o', color='Orange')\nline26, = plt.plot(fcast26, marker='o', color='Orange')\nplt.plot(y_edu_sec_rus, marker='o', color='Cyan')\nline27, = plt.plot(fcast27, marker='o', color='Cyan')\nplt.plot(y_edu_sec_esp, marker='o', color='MediumPurple')\nline28, = plt.plot(fcast28, marker='o', color='MediumPurple')\nplt.plot(y_edu_sec_gbr, marker='o', color='DimGray')\nline29, = plt.plot(fcast29, marker='o', color='DimGray')\nplt.plot(y_edu_sec_usa, marker='o', color='Navy')\nline30, = plt.plot(fcast30, marker='o', color='Navy')\n\nplt.legend([line21, line22, line23, line24, line25, line26, line27, line28, line29, line30],\n           [fcast21.name, fcast22.name, fcast23.name, fcast24.name, fcast25.name,\n               fcast26.name, fcast27.name, fcast28.name, fcast29.name, fcast30.name],\n           facecolor='white',\n           bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nax.set_facecolor('white')\nplt.title(\n    'Pr\u00e9diction de l\\'indicateur \u00e9ducatif lyc\u00e9e SE.SEC.ENRR pour les top 10 pays')\nplt.show()\n\n# Visualisation des pr\u00e9dictions\nplt.figure(figsize=(12, 8))\nax = plt.axes()\n\nplt.plot(y_edu_ter_aus, marker='o', color='SteelBlue')\nline31, = plt.plot(fcast31, marker='o', color='SteelBlue')\nplt.plot(y_edu_ter_bel, marker='o', color='Crimson')\nline32, = plt.plot(fcast32, marker='o', color='Crimson')\nplt.plot(y_edu_ter_deu, marker='o', color='HotPink')\nline33, = plt.plot(fcast33, marker='o', color='HotPink')\nplt.plot(y_edu_ter_jpn, marker='o', color='Peru')\nline34, = plt.plot(fcast34, marker='o', color='Peru')\nplt.plot(y_edu_ter_kor, marker='o', color='SeaGreen')\nline35, = plt.plot(fcast35, marker='o', color='SeaGreen')\nplt.plot(y_edu_ter_nld, marker='o', color='Orange')\nline36, = plt.plot(fcast36, marker='o', color='Orange')\nplt.plot(y_edu_ter_rus, marker='o', color='Cyan')\nline37, = plt.plot(fcast37, marker='o', color='Cyan')\nplt.plot(y_edu_ter_esp, marker='o', color='MediumPurple')\nline38, = plt.plot(fcast38, marker='o', color='MediumPurple')\nplt.plot(y_edu_ter_gbr, marker='o', color='DimGray')\nline39, = plt.plot(fcast39, marker='o', color='DimGray')\nplt.plot(y_edu_ter_usa, marker='o', color='Navy')\nline40, = plt.plot(fcast40, marker='o', color='Navy')\n\nplt.legend([line31, line32, line33, line34, line35, line36, line37, line38, line39, line40],\n           [fcast31.name, fcast32.name, fcast33.name, fcast34.name, fcast35.name,\n               fcast36.name, fcast37.name, fcast38.name, fcast39.name, fcast40.name],\n           facecolor='white',\n           bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nax.set_facecolor('white')\nplt.title('Pr\u00e9diction de l\\'indicateur \u00e9ducatif enseignement sup\u00e9rieur SE.TER.ENRR pour les top 10 pays')\nplt.show()\n\n# Visualisation des pr\u00e9dictions\nplt.figure(figsize=(12, 8))\nax = plt.axes()\n\nplt.plot(y_num_aus, marker='o', color='SteelBlue')\nline41, = plt.plot(fcast41, marker='o', color='SteelBlue')\nplt.plot(y_num_bel, marker='o', color='Crimson')\nline42, = plt.plot(fcast42, marker='o', color='Crimson')\nplt.plot(y_num_deu, marker='o', color='HotPink')\nline43, = plt.plot(fcast43, marker='o', color='HotPink')\nplt.plot(y_num_jpn, marker='o', color='Peru')\nline44, = plt.plot(fcast44, marker='o', color='Peru')\nplt.plot(y_num_kor, marker='o', color='SeaGreen')\nline45, = plt.plot(fcast45, marker='o', color='SeaGreen')\nplt.plot(y_num_nld, marker='o', color='Orange')\nline46, = plt.plot(fcast46, marker='o', color='Orange')\nplt.plot(y_num_rus, marker='o', color='Cyan')\nline47, = plt.plot(fcast47, marker='o', color='Cyan')\nplt.plot(y_num_esp, marker='o', color='MediumPurple')\nline48, = plt.plot(fcast48, marker='o', color='MediumPurple')\nplt.plot(y_num_gbr, marker='o', color='DimGray')\nline49, = plt.plot(fcast49, marker='o', color='DimGray')\nplt.plot(y_num_usa, marker='o', color='Navy')\nline50, = plt.plot(fcast50, marker='o', color='Navy')\n\nplt.legend([line41, line42, line43, line44, line45, line46, line47, line48, line49, line50],\n           [fcast41.name, fcast42.name, fcast43.name, fcast44.name, fcast45.name,\n               fcast46.name, fcast47.name, fcast48.name, fcast49.name, fcast50.name],\n           facecolor='white',\n           bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n\nax.set_facecolor('white')\nplt.title('Pr\u00e9diction de l\\'indicateur num\u00e9rique IT.NET.USER.P2 pour les top 10 pays')\nplt.show()","fc02954f":"# Constitution du datframe des pr\u00e9dictions pour \u00e9tablir le score en 2018\ndf_prediction = df_prediction.astype(\n    {'2017': 'float64', '2018': 'float64', '2019': 'float64'})\ndf_score_prediction = df_prediction.pivot_table(\n    index=['Country Name'], columns=['Indicator Code'], values='2018')","bcb23953":"# Mise \u00e0 l'\u00e9chelle\ncols = ['IT.NET.USER.P2', 'NY.GNP.PCAP.PP.CD',\n        'SE.SEC.ENRR', 'SE.TER.ENRR', 'SP.POP.1524.TO.UN']\nscaler_pow_pred = PowerTransformer(method='box-cox')\ndf_score_prediction_scaled = scaler_pow_pred.fit_transform(\n    df_score_prediction[cols])\ndf_score_prediction_scaled = pd.DataFrame(\n    df_score_prediction_scaled, columns=cols)","256a93bf":"# Calcul du score\ndf_score_prediction_scaled['Country Name'] = df_score_prediction.index\ndf_score_prediction_scaled['Score'] = [(row[0] * 4 + row[1] * 1 + row[2] * 2 + row[3] * 3 + row[4]*4) for row in zip(df_score_prediction_scaled['IT.NET.USER.P2'],\n                                                                                                                     df_score_prediction_scaled['NY.GNP.PCAP.PP.CD'], df_score_prediction_scaled['SE.SEC.ENRR'], df_score_prediction_scaled['SE.TER.ENRR'], df_score_prediction_scaled['SP.POP.1524.TO.UN'])]\ndf_score_prediction_scaled.sort_values(by='Score', ascending=False)","b89d094d":"# Top10 des pays avec donn\u00e9es pr\u00e9dites\ndf_top10_pred = df_score_prediction_scaled[['Country Name', 'Score']].sort_values(\n    by='Score', ascending=False).head(10)\ndf_top10_pred['Place Pr\u00e9visionnelle'] = np.arange(1, 11, 1)\ndf_top10_pred.rename(\n    columns={'Country Name': 'Pays', 'Score': 'Score Pr\u00e9dit'}, inplace=True)\ndf_top10_pred.set_index('Pays')","2f5d6f32":"# Comparaison des scores sur les donn\u00e9es r\u00e9elles et pr\u00e9dites\ndf_top10_final = pd.merge(df_top10_prov, df_top10_pred,\n                          how='left', left_on='Pays', right_on='Pays')\ndf_top10_final['Score Finale'] = [((row[0]*5 + row[1])\/4)\n                                  for row in zip(df_top10_final['Score'], df_top10_final['Score Pr\u00e9dit'])]\ndf_top10_final = df_top10_final.set_index('Pays')\ndf_top10_final.sort_values(by='Score Finale', ascending=False, inplace=True)\n# df_top10_final['Place Finale']=np.arange(1, 11, 1)\n# Moyenne des 2 places pour classement final\ndf_top10_final","4d10cb33":"***\n**Bilan sur le jeu de donn\u00e9es EdStatsCountry-Series.csv** : \n***\n\n-  Le jeu de donn\u00e9es contient les **r\u00e9f\u00e9rences des sources de certains indicateurs par pays** pr\u00e9sents dans le jeu de donn\u00e9es EdStatsCountry.csv.\n-  Le jeu de donn\u00e9es contient **613 lignes et 4 colonnes**. \n-  Nombre de **valeurs manquantes** totales : 613 NaN pour 2452 donn\u00e9es (**25.0 %**), les 3 premi\u00e8res colonnes ('Country Code', 'Serie Code' et 'Description') n\u2019ont pas de valeurs manquantes.\n\n***\n*Notes : \u00e0 garder en m\u00e9moire si on utilise ce jeu de donn\u00e9es*\n***\n\n-  Les **pays en plus** (241 dans EdStatsCountry.csv et de 211 dans le jeu de donn\u00e9es EdStatsCountry-Series.csv) sont des noms de r\u00e9gion ou de regroupement de revenus ou certains regroupement de pays (European Union, Arab world..) et certains pays devenus autonomes (Cura\u00e7ao).\n-  La derni\u00e8re variables **Unnamed: 3** est enti\u00e8rement **vide**, inexploitable donc \u00e0 nettoyer.","6162e66c":"<span style='background:PowderBlue'>**Constitution du dataframe pour \u00e9tablir un score**<\/span>","1b1e8783":"**Pays pr\u00e9sents dans EdStatsCountry.csv mais pas dans ce jeu de donn\u00e9es EdStatsCountry-Series.csv**","846c840d":"**Comparaison des pays pr\u00e9sents dans EdStatsData.csv et EdStatsCountries.csv**","e1ac2149":"**Pays \/ Code indicateur \/ Description**","c33ad7fe":"<span style='background:PowderBlue'>**Recherche par mots cl\u00e9s correspondant \u00e0 la cible**<\/span>","e84b9142":"**Conclusion :**\n***\n\nLes **Etats-Unis** se classe en premi\u00e8re place et le score pr\u00e9visionnelle le place en quatri\u00e8me place. Les graphiques montrent que la population des 15-24 ans a une tendance d\u00e9croissante (comme presque tous les pays),le taux d'utilisateur d'internet a une tendance croissante faible, le taux de scolarisation au niveau lyc\u00e9e stagne mais est compens\u00e9 par le taux de scolarisation dans l'enseignement sup\u00e9rieur.\n\nPour la seconde place, le score pr\u00e9dit pour le Royaume-Uni est plus \u00e9lev\u00e9 que celui de l'Australie, la population de 15-24 ans est 2 fois plus importante donc un vivier plus grand d'\u00e9l\u00e8ve. Le potentiel du taux de scolarisation dans le secondaire est favorable pour le Royaume-Uni, stagne dans l'enseignement sup\u00e9rieur alors que la tendance est croissante pour l'Australie.\nLe **Royaume-Uni** sera prvil\u00e9gi\u00e9.\n\nPour la troisi\u00e8me place, le score pr\u00e9dit pour la Cor\u00e9e du Sud, montre un plus fort potentiel que celui de l'Australie, la population cible est 2 fois sup\u00e9rieure, les taux de scolarisation sont forts pour les les deux pays. Comme les Etats-Unis, le Royaume-Uni et l'Australie ont la m\u00eame langue commune, le choix de l'**Australie** sera privil\u00e9gi\u00e9. Il faudrait recueillir des donn\u00e9es sur la concurrence d\u00e9j\u00e0 pr\u00e9sente en Cor\u00e9e du Sud, pouvoir pr\u00e9dire si les formations en anglais ne seraient pas un frein ou si notre entreprise souhaite donner des cours dans plusieurs langues.\n\n- **1. Etats-Unis**\n- **2. Royaume-Uni**\n- **3. Australie**\n\n***\n*Notes* :\n***\n- A noter le fort potentiel d'\u00e9volution de la Cor\u00e9e du Sud et la pr\u00e9sence du Japon en quatri\u00e8me position. Ces pays repr\u00e9sentant la r\u00e9gion 'East Asia & Pacific' pourront \u00eatre des pays \u00e0 fort potentiel sur le plus long terme, \u00e0 garder en m\u00e9moire pour la deuxi\u00e8me phase de l'expansion commerciale.\n- Le Canada a \u00e9t\u00e9 \u00e9cart\u00e9 lors de la s\u00e9lection des indicateurs puisque l'indicateur du taux de scolarisation dans l'enseignement sup\u00e9rieur n'\u00e9tait pas renseign\u00e9, une deuxi\u00e8me pr\u00e9-analyse ne tenant pas compte de cet indicateur pourrait \u00eatre envisag\u00e9e apr\u00e8s discussion aupr\u00e8s des d\u00e9cideurs de notre entreprise, pour savoir si l'entreprise souhaite \u00eatre pr\u00e9sente sur les 2 volets enseignement secondaire et tertiaire ou si elle souhaite trouver le plus grand nombre d'\u00e9tudiants.","1a05ee1b":"### <span style='background:PowderBlue'>2.5. Analyse du jeu de donn\u00e9es EdStatsData.csv<\/span>","faf5b18f":"### <span style='background:PowderBlue'>2.2. Analyse du jeu de donn\u00e9es EdStatsCountry-Series.csv<\/span>","f0baec18":"<span style='background:PowderBlue'>**Suppression des pays hors norme ISO-3166-alpha 3**<\/span>","abf03304":"Ajout des variables **R\u00e9gion** et **Groupe de revenus** au jeu de donn\u00e9es de base. Ces variables nous permettront d'effectuer des statistiques et des graphiques pour les diff\u00e9rentes r\u00e9gions ou les groupes de revenus.","7b88e835":"Plus l'aire dans le graphique est grande, plus le groupe de revenu a du potentiel.","8dc81fd7":"La cible de notre entreprise :\n- la population des 15-24 ans, \n- le nombre d'\u00e9tudiants scolaris\u00e9s au niveau lyc\u00e9e et universit\u00e9s.\n- le niveau de vie des habitants comparable par pays\n- les moyens de communication (acc\u00e8s \u00e0 l'\u00e9lectricit\u00e9, acc\u00e8s au r\u00e9seau internet, possession d'un ordinateur personnel).\n\nEn parcourant le site de la banque mondiale:\n\n- les diff\u00e9rents groupes d'indicateur \u00e0 \u00e9tudier sont :\n    \n    - **SE** : Social Education\n    - **SP** : Social Population\n    - **IT** : Infrastructure\n    - **NY** : National Accounts, produits int\u00e9rieurs et nationaux\n    - **EG** : Energie\n\n- les diff\u00e9rents mots cl\u00e9s \u00e0 rechercher :\n    - **15** : pour la cible de la population des 15-19 ans\n    - **20** : pour la cible de la population des 20-24 ans\n    - **SEC** : pour les regroupements par lyc\u00e9ens\n    - **TER** : pour les regroupements par \u00e9tudiants de l'enseignement sup\u00e9rieur\n    - **IT** : pour l'acc\u00e8s aux infrastructures techniques\n    - **EG** : pour l'acc\u00e8s aux informations sur l'\u00e9nergie","135963ef":"## <span style='background:Thistle'>4. R\u00e9duction du jeu de donn\u00e9es<\/span>","0a82e5c5":"<span style='background:PowderBlue'>**Suppression des indicateurs des pays avec aucune donn\u00e9e pour toutes les ann\u00e9es**<\/span>","573185dd":"## <span style='background:Thistle'>8. Pr\u00e9dictions<\/span>","2faeccfd":"Les 10 pays les plus attractifs font bien parties des 3 r\u00e9gions :\n- East Asia & Pacific,\n- Europe & Central Asia,\n- North America\t\n\net des 2 groupes de revenus :\n- High income: OECD,\n- High income: nonOECD\n\nnot\u00e9s lors de l'analyse des indicateurs retenus.","a0701178":"**Bilan : Top 10 des pays attractifs**","5d5889cb":"<span style='background:PowderBlue'>**Filtre avec les indicateurs pertinents**<\/span>","d9151ee1":"<span style='background:PowderBlue'>**Pond\u00e9ration\/Score d'attractivit\u00e9**<\/span>","9a0c9bca":"### <span style='background:PowderBlue'>2.1. Analyse du jeu de donn\u00e9es EdStatsCountry.csv<\/span>","fe702e0f":"<span style='background:PowderBlue'>**Suppression de la variable 'Unnamed: 69' vide**<\/span> ","cb672604":"***\n**Bilan sur le jeu de donn\u00e9es EdStatsSeries.csv** : \n***\n\n- Le jeu de donn\u00e9es permet de conna\u00eetre le **th\u00e8me des indicateurs**, les **descriptions longues et les sources**. Il donne des informations sur les indicateurs socio-\u00e9duco-\u00e9conomique class\u00e9s en 37 th\u00e8mes.\n- Le jeu de donn\u00e9es contient **3665 lignes et 21 colonnes**.\n- Nombre de **valeurs manquantes** totales 55203 NaN pour 76965 donn\u00e9es (**71.72 %**).\n- Aucun doublon.\t\n\n***\n*Notes : \u00e0 garder en m\u00e9moire si on utilise ce jeu de donn\u00e9es*\n***\n\n- Les 5 colonnes principales, le code indicateur, le nom, la description longue et la r\u00e9f\u00e9rence de l\u2019indicateur sont 100% compl\u00e8tes.\n- Le reste des variables est tr\u00e8s peu renseign\u00e9 (>85% de valeurs manquantes) et 6 variables sont compl\u00e8tement vides (donc \u00e0 supprimer).","bfec9c14":"**Nombre de donn\u00e9es par ann\u00e9e \/ par d\u00e9c\u00e9nnie**","1d7b98a7":"# D\u00e9finition des fonctions utilis\u00e9es dans ce notebook","bc0dd3bc":"<span style='background:PowderBlue'>**Indicateurs manquants par pays**<\/span>","43b58806":"<span style='background:PowderBlue'>**Imputation des valeurs manquantes**<\/span>","69e52d87":"Seulement 25% des indicateurs ont un taux de remplissage sup\u00e9rieur \u00e0 23%, et 10% des indicateurs ont un taux de remplissage sup\u00e9rieur \u00e0 48%.\n\n**==> seuil de taux de remplissage des indicateurs fix\u00e9s \u00e0 50% : il reste 359 indicateurs \u00e0 analyser**.","15670c9b":"<span style='background:PowderBlue'>**Score d'attractivit\u00e9 repr\u00e9sent\u00e9 sur une carte du monde**<\/span>","1b39d49d":"**Codes indicateurs\\ Top 10 th\u00e8mes \\ Last 27 th\u00e8mes**","db5f77df":"3 r\u00e9gions se distinguent :\n\n- 'North America', \n- 'Europe & Central Asia'\n- et East Asia & Pacific'.","7c4ecf52":"- On observe un pic de donn\u00e9es tous les 5 ans.\n- Les donn\u00e9es sont doubl\u00e9es tous les 10 ans \u00e0 partir de 1990.\n- La derni\u00e8re ann\u00e9e exploitable est 2015.\n- Les ann\u00e9es 2020 \u00e0 2100 sont des ann\u00e9es de pr\u00e9diction.\n- Les ann\u00e9es 2010 sont les ann\u00e9es avec le plus de donn\u00e9es significatives et parmi cette d\u00e9cennie l'ann\u00e9e 2010 est la plus fournie avec seulement 27% de donn\u00e9es.\n- Les ann\u00e9es 2016 et 2017, les plus proches de l'ann\u00e9e courante (2021) contiennent moins de 2 % de variables et sont donc inexploitables.","96b732a0":"**PowerTransformer**","cc05fefd":"Nombreuses valeurs manquantes (en saumon).","c3fda7db":"Aucun indicateur permettant de conna\u00eetre les informations sur l'acc\u00e8s \u00e0 l'\u00e9lectricit\u00e9.","108d2e63":"**Pays\\Top 10 Code indicateur mis \u00e0 jour - Top 10 des descriptions - Nombre de pays avec des mises \u00e0 jour d'indicateur par ann\u00e9es**","6aed44f9":"**Groupes de revenus 'NaN'**","f76ccea0":"Les 4 premi\u00e8res variables sont 100% renseign\u00e9es ==> thresh=4+1 pour conserver une des ann\u00e9es avec au moins un chiffre significatif","2ebd7498":"## <span style='background:Thistle'>6. Analyse des indicateurs retenus<\/span>","9927a79c":"**Pond\u00e9ration**\n                             \n| Nature | Nom indicateur | Pond\u00e9ration |\n| --- | --- | --- |\n| d\u00e9mographique | SP.POP.1524.TO.UN | 4 |\n| \u00e9conomique | NY.GNP.PCAP.PP.CD | 1 |\n| \u00e9ducatif | SE.SEC.ENRR | 2 |\n| \u00e9ducatif | SE.TER.ENRR | 3 |\n| num\u00e9rique | IT.NET.USER.P2 | 4 |\n","49d9a7a6":"Indicateur retenu : **SE.SEC.ENRR** taux brut de scolarisation dans le secondaire, pour les deux sexes (%) .\n\nNombre total d'inscriptions dans l'enseignement secondaire, quel que soit l'\u00e2ge, exprim\u00e9 en pourcentage de la population ayant l'\u00e2ge officiel de fr\u00e9quenter l'enseignement secondaire. Le TBS peut d\u00e9passer 100 % en raison de l'inclusion d'\u00e9l\u00e8ves trop \u00e2g\u00e9s ou trop jeunes en raison d'une entr\u00e9e pr\u00e9coce ou tardive \u00e0 l'\u00e9cole et du redoublement.","09cb743c":"***\n**Bilan sur le jeu de donn\u00e9es EdStatsCountry.csv**: <\/span>\n***\n\n-\tLe dataset contient des informations g\u00e9ographiques sur les pays (**codes ISO-3166 alpha 3 et 2**, code WB-2 et 3, les **noms des pays**, les regroupements pour 7 **r\u00e9gions,** par **groupe de revenus**\u2026), des donn\u00e9es \u00e9conomiques globales et des dates de r\u00e9f\u00e9rence des derni\u00e8res \u00e9tudes.\n-\tLe jeu de donn\u00e9es contient **241 lignes et 32 colonnes**.\n-\tNombre de **valeurs manquantes** totales : 2354 NaN pour 7712 observations (**30.52 %**).\n-\tPas de doublons.\n-\tAucune dobservation dupliqu\u00e9e sur les noms des pays et les codes pays. \n-\tToutes les r\u00e9gions du monde sont repr\u00e9sent\u00e9es.\n\n***\n*Notes :* \u00e0 garder en m\u00e9moire si on utilise ce jeu de donn\u00e9es\n***\n\n-\tCertaines colonnes sont en float et contiennent des dates (ann\u00e9es) : \u00e0 transformer.\n-\tLa colonne **Unnamed:31** est vide et devra \u00eatre supprim\u00e9e.\n-\tToutes les r\u00e9gions du monde sont repr\u00e9sent\u00e9es.","0e8bc514":"**R\u00e9gions 'NaN'**","947a237a":"### <span style='background:PowderBlue'>2.3.  Analyse du jeu de donn\u00e9es EdStatsFootNote.csv<\/span>","e9da99c9":"## <span style='background:Thistle'>5. Fusion des donn\u00e9es n\u00e9cessaires des diff\u00e9rents datasets<\/span>","3774a99f":"### <span style='background:PowderBlue'>2.4. Analyse du jeu de donn\u00e9es EdStatsSeries.csv<\/span>","db0c1afb":"Indicateur d\u00e9mographique retenu : **SP.POP.1524.TO.UN** Population, ages 15-24, total is the total population age 15-24","6c1d21d1":"Plus l'aire dans le graphique est grande, plus la r\u00e9gion a du potentiel.","1dae3e6e":"Indicateur retenu : **IT.NET.USER.P2** Utilisateurs d'Internet (pour 100 personnes).\n\nLes internautes sont des personnes qui ont utilis\u00e9 l'internet (de n'importe quel endroit) au cours des trois derniers mois. L'internet peut \u00eatre utilis\u00e9 via un ordinateur, un t\u00e9l\u00e9phone portable, un assistant num\u00e9rique personnel, une machine de jeux, la t\u00e9l\u00e9vision num\u00e9rique, etc.\n\n*Note :* Aucun indicateur sur la d\u00e9tention d'un ordinateur personnel.","968151e0":"Indicateur retenu : **NY.GDP.PCAP.PP.CD** RNB par habitant, PPA ($ international actuel).\n    \nG\u00e9n\u00e9ralement, les pays \u00e0 revenu \u00e9lev\u00e9 ont des niveaux de prix plus \u00e9lev\u00e9s, tandis que les pays \u00e0 faible revenu ont des niveaux de prix plus bas (effet Balassa-Samuelson). Les comparaisons entre pays bas\u00e9es sur les taux de change du march\u00e9 pour les composantes du PIB li\u00e9es aux d\u00e9penses refl\u00e8tent \u00e0 la fois les diff\u00e9rences de production \u00e9conomique (volumes) et de prix. \u00c9tant donn\u00e9 les diff\u00e9rences de niveaux de prix, la taille des pays \u00e0 revenu \u00e9lev\u00e9 est gonfl\u00e9e, tandis que la taille des pays \u00e0 faible revenu est r\u00e9duite dans la comparaison. Les comparaisons entre pays bas\u00e9es sur les PPA du PIB au niveau de ses composantes de d\u00e9penses refl\u00e8tent uniquement les diff\u00e9rences de production \u00e9conomique (volume), car les PPA contr\u00f4lent les diff\u00e9rences de niveau de prix entre les pays. Ainsi, la comparaison refl\u00e8te la taille r\u00e9elle des pays. ","605e2e67":"Les groupes de revenus les plus attractifs sont :\n- High income OECD et non OECD.\n- Upper middle income","ff69bcf8":"**Pays \/ R\u00e9gions \/ Groupes de revenus**","97d7fa33":"## <span style='background:Thistle'>2. Description des jeux de donn\u00e9es mis \u00e0 disposition<\/span>","98bdf19b":"**Comparaison des pays pr\u00e9sents dans EdStatsData.csv et EdStatsCountries-Series.csv**","edbc116f":"<span style='background:PowderBlue'>**Bilan : indicateurs retenus**<\/span>","4864c459":"## <span style='background:Thistle'>3. S\u00e9lection des indicateurs pertinents<\/span>","b5d8da9f":"<span style='background:PowderBlue'>**R\u00e9duction temporelle**<\/span>\n\nD'apr\u00e8s la description des donn\u00e9es de EdStastsData.csv, la d\u00e9c\u00e9nnie 2010 est la plus fournie en donn\u00e9es sur la p\u00e9riode 2010-2015 (plus de 94% de NaN pour 2016-2017) : **Plage temporelle** retenue : **2010-2015**.    ","7e76bbf0":"Indicateur retenu : **SE.TER.ENRR** taux brut de scolarisation dans l'enseignement sup\u00e9rieur, pour les deux sexes (%).\n\nNombre total d'inscriptions dans l'enseignement sup\u00e9rieur (CITE 5 \u00e0 8), quel que soit l'\u00e2ge, exprim\u00e9 en pourcentage de la population totale du groupe d'\u00e2ge de cinq ans suivant la fin de l'enseignement secondaire.","5361ae49":"- Ces jeux de donn\u00e9es seront conserv\u00e9s pour la pr\u00e9-analyse  :\n\n    - ***EdStatsData.csv*** : qui contient la **target nom de pays** (= variable 'Country Name') et l'\u00e9volution des variables quantitatives des indicateurs par pays par ann\u00e9es.\n    - ***EdStatsCountry.csv*** : qui contient la **target nom de pays** (= variable 'Short Name') et les r\u00e9gions et les groupes de revenus permettant de faire des r\u00e9groupements.\n\n*Notes :*    \n***\n\n- Le jeu de donn\u00e9es **EdStatsSeries.csv** contient le **th\u00e8me des indicateurs et leurs descriptions longues** qui pourra \u00eatre utile lors de la s\u00e9lection des indicateurs pertinents.    ","00ca83cf":"***\n**Bilan sur le jeu de donn\u00e9es EdStatsData.csv :** \n***\n\n- Ce jeu de donn\u00e9es donne l'**\u00e9volution de plusieurs indicateurs sur une p\u00e9riode de 1970 \u00e0 2017 pour tous les pays du monde** et certaines **macros r\u00e9gions du monde**, avec des **pr\u00e9dictions** pour les ann\u00e9es 2020 - 2100, il semble donc tr\u00e8s **int\u00e9ressant pour notre probl\u00e9matique**.\n- Le jeu de donn\u00e9es contient **886930 lignes et 70 colonnes**.\n- Nombre de **valeurs manquantes** totales : 53455179 NaN pour 62085100 donn\u00e9es possibles (**86.1 %**).\n- Aucun doublon.\n- Les ann\u00e9es 2020 \u00e0 2010 sont des ann\u00e9es de pr\u00e9dictions non exploitables pour notre mission.\n- Les variables des code\/nom des pays et des code\/nom des indicateurs sont 100% compl\u00e8tes.\n- Tr\u00e8s peu de donn\u00e9es sont exploitables sur la p\u00e9riode 1970-1997 et 2016-2017 (>94% de valeurs manquantes).\n- L'ann\u00e9e comportant le maximum de donn\u00e9es est l'ann\u00e9e 2010 mais avec 27% de donn\u00e9es seulement.\n- L'ann\u00e9e la moins renseign\u00e9e est l'ann\u00e9e 2017 (99,98% de valeurs manquantes) donc inexploitable.\n- L'ann\u00e9e 2015 est exploitable et est l'ann\u00e9e la plus proche de l'ann\u00e9e en cours (2021).\n\n***\n*Notes : \u00e0 garder en m\u00e9moire si on utilise ce jeu de donn\u00e9es*\n***\n\n- La variable 'Country Name' semble avoir des donn\u00e9es autres que des noms de pays :\n    - des noms de r\u00e9gion, \n    - ou des noms de regroupement de revenus,\n    - ou certains regroupement de pays (European Union, North America..)\n  qui devront \u00eatre nettoy\u00e9es du jeu de donn\u00e9es pour la pr\u00e9-analyse.","0f13ede6":"<span style='background:PowderBlue'>**Mise \u00e0 l'\u00e9chelle des donn\u00e9es**<\/span>","26bce061":"**Score d'attractivit\u00e9 par groupe de revenus**","01983fa9":"**Score d'attractivit\u00e9**","4634aac5":"Le jeu de donn\u00e9es EdStatsData.csv comporte les indications chiffr\u00e9es par ann\u00e9e par indicateur par pays. Il constituera notre jeu de donn\u00e9e de base. On se base sur le bilan de ce jeu de donn\u00e9es analyser au chapitre '2' pour nettoyer\/r\u00e9duire le jeu de donn\u00e9es.","208035c0":"<span style='background:PowderBlue'>**M\u00e9thode de Holt's**<\/span>","68e2712d":"Les statistiques descriptives des indicateurs ont montr\u00e9 la pr\u00e9sence de courbes asym\u00e9triques (\u00e9tal\u00e9es \u00e0 droite ou \u00e0 gauche), les courbes de l'indicateur d\u00e9mographique et \u00e9conomique ont des observations plus concentr\u00e9es et une variance \u00e9lev\u00e9e, avec des outliers. \n\n**La mise \u00e0 l'\u00e9chelle sera effectu\u00e9e avec PowerTransformer()**.","e2685839":"### <span style='background:PowderBlue'>2.6. Conclusions sur les jeux de donn\u00e9es<\/span>","59ab7641":"**StandardScaler**","95672165":"***\n**Bilan sur le jeu de donn\u00e9es EdStatsFootNote.csv** : \n***\n\n- Le jeu de donn\u00e9es contient les **ann\u00e9es de r\u00e9f\u00e9rences de mises \u00e0 jour des indicateurs par pays** et la **description des incertitudes, exceptions**, remarques sur les mises \u00e0 jour.\n- Le jeu de donn\u00e9es contient **643638 lignes et 5 colonnes**.\n- Nombre de **valeurs manquantes** totales : 643638 NaN pour 3218190 donn\u00e9es (**20.0 %** : variable Unnamed: 4).\n- Plusieurs dates ou description de mise \u00e0 jour pour chacun des indicateurs possibles par pays.\n\n***\n*Notes : \u00e0 garder en m\u00e9moire si on utilise ce jeu de donn\u00e9es*\n***\n\n- Les pays non pr\u00e9sents dans le jeu de donn\u00e9es EdStatsFootNote.csv mais pr\u00e9sents dans le jeu de donn\u00e9es EdStatsCountry-Series.csv sont : \n    - Saint Martin,\n    - Groenland.\n- La variable **Unnamed: 4** est vide, elle pourra \u00eatre supprim\u00e9e si le jeu de donn\u00e9e est utilis\u00e9.","4c05b63a":"- La moyenne de la population des 15-24 ans pour l'ensemble des pays est d'environ 6 655 000, la majorit\u00e9 des pays n'ayant pas les 5 indicateurs renseign\u00e9s sont des pays \u00e0 faible potentiel de population cible des 15-24 ans.\n- Exception faite pour les pays comme l'Iraq, le Vietnam et le Kenya mais le niveau de vie est faible en dessous de la moyenne (19043 $ internationnaux), le pourcentage des utilisateurs d'internet est en dessous de la moyenne (48%) et le taux de scolarisation n'est pas connu.\n\n*Note* :\n***\n- le Canada est \u00e9cart\u00e9, p\u00e9nalis\u00e9 par l'absence du taux de scolarisation dans l'enseignement sup\u00e9rieur alors que les indicateurs num\u00e9rique, \u00e9conomique et \u00e9ducatif niveau lyc\u00e9e sont \u00e9lev\u00e9s. \n\n**Conclusion** : **on retire ces pays** avec au moins un indicateur manquant.","f7466378":"Le nombre de mise \u00e0 jour des indicateurs semble r\u00e9gulier entre 1970 \u00e0 1990, suivi d'une l\u00e9g\u00e8re augmentation entre 1991 et 1997, une acc\u00e9l\u00e9ration entre 1998 et 2013 puis de nouveau une chute des mises \u00e0 jour qui sont presques nulles en 2017 et entre 2020 et 2050 (les ann\u00e9es de pr\u00e9dictions).","d81c73c6":"## <span style='background:Thistle'>7. Score<\/span>","bd89073f":"<span style='background:PowderBlue'>**Suppression des pays hors regroupement et des groupes de revenus**<\/span>","e3713534":"**<span style='background:PowderBlue'>R\u00e9duction par seuil du taux de remplissage des 3665 indicateurs possibles<\/span>**","9df55c69":"- d\u00e9mographique : \n    - **SP.POP.1524.TO.UN**\n- \u00e9conomique : \n    - **NY.GNP.PCAP.PP.CD** \n- \u00e9ducation : \n    - **SE.SEC.ENRR** \n    - **SE.TER.ENRR**\n- num\u00e9rique : \n    - **IT.NET.USER.P2** ","94750358":"## <span style='background:Thistle'>1. Introduction<\/span>\n\n**Academy**\n*****\n\nAcademy est notre entreprise, une start-up de la EdTech qui propose des **formations en ligne pour les lyc\u00e9ens et les enseignements sup\u00e9rieurs**.\n\n**Mission**\n*****\n\nA partir des donn\u00e9es de la Banque mondiale, r\u00e9aliser une pr\u00e9-analyse exploratoire permettant de r\u00e9pondre aux interrogations suivantes :\n\n- Quels sont les **pays avec un fort potentiel** de clients pour nos services ?\n- Pour chacun de ces pays, quelle sera **l\u2019\u00e9volution de ce potentiel** de clients ?\n- Dans quels pays l'entreprise doit-elle **op\u00e9rer en priorit\u00e9** ?\n\n**Source**\n*****\n\n[Banque mondiale](http:\/\/datatopics.worldbank.org\/education\/)\n\n**Processus-Strat\u00e9gie**\n***\n\n- Analyse des donn\u00e9es (**qualit\u00e9**, **quantit\u00e9**, **coh\u00e9rence des donn\u00e9es**)\n- S\u00e9lection des **indicateurs** les plus **pertinents** pour notre cible :\n    - d\u00e9mographique : une population des 15-24 ans \u00e9lev\u00e9e,\n    - \u00e9ducatif : pour la tranche 15-24 ans des niveaux lyc\u00e9e et enseignements sup\u00e9rieurs,\n    - \u00e9conomique : v\u00e9rifier les niveaux de vie de la population,\n    - num\u00e9rique : acc\u00e8s \u00e0 internet inidspensable pour les formations, la propriet\u00e9 d'un ordinateur ou d'une tablette , l'acc\u00e8s \u00e0 l'\u00e9lectricit\u00e9...\n- **Score** pour classer le potentiel des pays\n- **Pr\u00e9dictions** \n- **Conclusions**","d3037ed2":"*Notes :*\n***\n\n- Le taux de scolarisation dans l'enseignement sup\u00e9rieur est plus in\u00e9gal entre les pays que le taux de scolarisation au niveau lyc\u00e9e.\n- Pour l'indicateur num\u00e9rique, forme bimodale, on distingue 3 groupes de pays r\u00e9partis autour de 20%, 65% et 85%.\n- Pr\u00e9sence d'outliers pour les indicateurs d\u00e9mographique, \u00e9conomique et \u00e9ducatif au niveau lyc\u00e9e.    ","cd15a703":" **Conclusion** : aucune donn\u00e9es pour nos pays dans le top 10 sur les ann\u00e9es de pr\u00e9dictions 2020-2040","a8b955e0":"# <span style='color:SteelBlue'>P2 - Analyse des donn\u00e9es des syst\u00e8mes \u00e9ducatifs<\/span>","0770cd65":"<span style='background:PowderBlue'>**Score pr\u00e9visionnel pour l'ann\u00e9e 2018**<\/span>","05ddb1e0":"![image.png](attachment:image.png)\n\n## <span style='background:Thistle'>Sommaire du notebook<\/span> ","199f32b3":"<span style='background:PowderBlue'>**Utilisation des pr\u00e9dictions de EdStatsData.csv**<\/span>","cd64c9b9":"Aucun indicateur retenu","58da03b6":"<span style='background:PowderBlue'>**R\u00e9duction temporelle**<\/span>\n\nD'apr\u00e8s la description des donn\u00e9es de EdStastsData.csv, la d\u00e9c\u00e9nnie 2010 est la plus fournie en donn\u00e9es sur la p\u00e9riode 2010-2015 (plus de 94% de NaN pour 2016-2017).\n\n- **Plage temporelle** retenue : **2010-2015**.    ","bc55fff6":"Economie, population : s\u00e9rie temporelle avec tendance mais sans saisonnalit\u00e9 ==> m\u00e9thode Holt's de la librairie statsmodels","189bc770":"- Toutes les variables 'ann\u00e9e' contiennent des donn\u00e9es quantitatives exploitables.\n- La variable **Unnamed: 69** est **vide** et devra \u00eatre supprim\u00e9e.","c2f961bb":"- Les courbes des indicateurs d\u00e9mographiques et \u00e9conomique sont \u00e9tal\u00e9es \u00e0 droite (skewness positif), moins aplaties que la distribution normale (kurtosis empirique positif, observations plus concentr\u00e9e, leur variance est \u00e9lev\u00e9e.\n- La courbe de l'indicateur \u00e9ducatif du niveau lyc\u00e9e est bimodale, \u00e9tal\u00e9e \u00e0 gauche (skewness n\u00e9gatif), plus aplatie que la distribution normale (kurtosis empirique n\u00e9gatif).\n- La courbe de l'indicateur \u00e9ducatif de l'enseignement sup\u00e9rieur est bimodale, \u00e9tal\u00e9e \u00e0 droite (skewness positif), plus aplatie que la distribution normale (kurtosis empirique n\u00e9gatif).  \n- La courbe de l'indicateur num\u00e9rique est bimodale et plus aplatie que la distribution normale (kurtosis empirique n\u00e9gatif).","4288293c":"**Score d'attractivit\u00e9 par r\u00e9gion**","58605034":"Les pays en plus dans le jeu de donn\u00e9es EdStatsCountry.csv sont :\n- des noms de r\u00e9gion, \n- ou des noms de regroupement de revenus, \n- ou certains regroupement de pays (European Union, Arab World..),\n- et des pays (Cura\u00e7ao).","4094143f":"## <span style='background:Thistle'>9. Conclusion<\/span>","5ce3dfbd":"Autant de codes pays que de noms de pays et tous les indicateurs comportent un nom."}}