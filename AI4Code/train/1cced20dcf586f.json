{"cell_type":{"38dac3e0":"code","d3ef8506":"code","1e355d61":"code","f74a68c9":"code","bc8eb84e":"code","6df222d1":"code","fd6a8245":"code","492ea646":"code","3797d13d":"code","3560eaae":"code","d984b1f9":"code","af1f1824":"code","888d3400":"code","5b8aa54b":"code","43d8e577":"code","2194b476":"code","5113ab98":"code","57ea146c":"code","4afabc07":"code","c12bcd4b":"code","5cca9a30":"code","3733f37f":"code","5018be2a":"code","d4c17d09":"markdown","7bb74969":"markdown","0c588e7a":"markdown","b96bf47d":"markdown","027eaf63":"markdown","b4202829":"markdown","1738793a":"markdown","4aa42433":"markdown","65c0f727":"markdown","1d62cfdf":"markdown","b282d039":"markdown","3ef63f05":"markdown","1189b004":"markdown","b4534cbb":"markdown","311b025e":"markdown"},"source":{"38dac3e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d3ef8506":"X_train = pd.read_csv('..\/input\/hsemath2020flights\/flights_train.csv')\nX_test = pd.read_csv('..\/input\/hsemath2020flights\/flights_test.csv')","1e355d61":"X_train.head(5)","f74a68c9":"y_train = pd.DataFrame()\ny_train['target'] = np.where(X_train['dep_delayed_15min'], 1, 0)\ndel X_train['dep_delayed_15min']","bc8eb84e":"def month(x: str):\n    return int(x.split('-')[1])\n\nX_train['MONTH'] = X_train['DATE'].apply(month)\nX_test['MONTH'] = X_test['DATE'].apply(month)","6df222d1":"X_train = X_train[['MONTH', 'DISTANCE', 'DEPARTURE_TIME']]\nX_test = X_test[['MONTH', 'DISTANCE', 'DEPARTURE_TIME']]","fd6a8245":"X_train.head(5)","492ea646":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","3797d13d":"X_train[['DISTANCE', \"DEPARTURE_TIME\"]].describe()","3560eaae":"plt.figure(figsize=(5, 4))\nsns.distplot(X_train['DISTANCE'], color='g', bins=100, hist_kws={'alpha': 0.4});\nplt.title(\"\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 distance\")\nplt.ylabel('\u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')\n\nplt.figure(figsize=(5, 4))\nsns.distplot(X_train['DEPARTURE_TIME'], color='g', bins=100, hist_kws={'alpha': 0.4});\nplt.title(\"\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 departure_time\")\nplt.ylabel('\u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')","d984b1f9":"plt.figure(figsize=(5, 4))\nsns.distplot(X_train['MONTH'], color='g', bins=100, hist_kws={'alpha': 0.4});\nplt.title(\"\u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 month\")\nplt.ylabel('\u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')","af1f1824":"X_train['dep_delayed_15min'] = y_train","888d3400":"correlation = X_train.corr()\ncorrelation","5b8aa54b":"sns.heatmap(correlation, cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,annot=True, annot_kws={\"size\": 8}, square=True);","43d8e577":"mean_target_by_month = X_train.groupby('MONTH').mean()['dep_delayed_15min']\n\ncolumns = np.arange(1, 13)\ndata = np.array(mean_target_by_month)\n\nplt.bar(columns, data, align='center', alpha=0.8, color = 'gold')\nplt.xticks(columns)\nplt.ylabel('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 dep_delayed_15min')\nplt.title('\u0421\u0440\u0435\u0434\u043d\u0435\u0435 dep_delayed_15min \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430')\n\nplt.show()","2194b476":"del X_train['dep_delayed_15min']","5113ab98":"from sklearn import model_selection","57ea146c":"train, test, ytrain, ytest = model_selection.train_test_split(X_train, y_train, test_size=0.3)","4afabc07":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics","c12bcd4b":"random_forest = RandomForestClassifier(random_state=0, n_jobs = -1, criterion= 'entropy', max_features='auto')\n\n#\u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nall_params = grid = np.arange(40, 110, 10)\n#\u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u043e\u043b\u0434\u043e\u0432 \u043f\u0440\u0438 cv = 4\ngrid = {'n_estimators' : all_params}\ngrid_search = GridSearchCV(random_forest, grid, scoring = 'roc_auc', cv = 4)\ngrid_search.fit(np.array(train), np.array(ytrain).ravel())\n\nprint(\"\u041b\u0443\u0447\u0448\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440:{} \\n \".format(grid_search.best_params_))","5cca9a30":"best_model = grid_search.best_estimator_\npredict_proba_test = best_model.predict_proba(test)\n\n#\u0441\u0447\u0438\u0442\u0430\u0435\u043c roc auc \u043d\u0430 \u043d\u0430\u0448\u0435\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435\nroc_auc_test = metrics.roc_auc_score(ytest,predict_proba_test[:,1])\n# \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0449\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438\nroc_auc_train = grid_search.best_score_\n\nprint('ROC AUC: \u0434\u043b\u044f train:{}, \u0434\u043b\u044f test: {}'.format(roc_auc_train, roc_auc_test))","3733f37f":"mean_test_score = grid_search.cv_results_['mean_test_score']\n\nplt.figure(figsize=(5, 4))\nplt.plot(all_params, mean_test_score, marker='o', color = 'orange')\nplt.ylabel('roc_auc')\nplt.xlabel('n_estimators')\nplt.title('\u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u0440\u0438 \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442 n_estimators')\nplt.show()","5018be2a":"final_prediction = best_model.predict_proba(X_test)[:, 1]\n\ndfpred = pd.DataFrame()\ndfpred['Id'] = np.arange(len(final_prediction))\ndfpred['dep_delayed_15min'] = final_prediction\ndfpred.to_csv('predict.csv', index = False)","d4c17d09":"### \u041e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f -- MONTH, DISTANCE \u0438 DEPARTURE_TIME","7bb74969":"### \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 MONTH, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u0441\u044f\u0446 \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 DATE:","0c588e7a":"## \u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u043c \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e.\n#### \u0420\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043f\u0443\u043b \u043d\u0430 \u0434\u0432\u0435 \u0447\u0430\u0441\u0442\u0438.","b96bf47d":"## \u0412\u043e\u0442 \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043d\u0430\u0448\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438. \u0412\u044b\u043d\u0435\u0441\u0435\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \"dep_delayed_15min\" \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443.","027eaf63":"### \u0418 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438\u0445 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f","b4202829":"### \u0412\u044b\u0432\u0435\u0434\u0435\u043c \u043e\u0431\u0449\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 \u0434\u043b\u044f \u0434\u0432\u0443\u0445 \u043d\u0435\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","1738793a":"## \u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e: 0.67409","4aa42433":"## \u0427\u0438\u0442\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:","65c0f727":"## \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435","1d62cfdf":"### \u0411\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \u0438 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 n_estimators ","b282d039":"\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435","3ef63f05":"## \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435.","1189b004":"### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a MONTH. \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e dep_delayed_15min \u043e\u0442 \u043c\u0435\u0441\u044f\u0446\u0430:","b4534cbb":"## \u0423\u0437\u043d\u0430\u0435\u043c, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","311b025e":"#### \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438: "}}