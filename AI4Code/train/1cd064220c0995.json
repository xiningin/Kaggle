{"cell_type":{"e3996ed5":"code","b62744fb":"code","f937b46e":"code","d97d4f5f":"code","2c079784":"markdown","4c646c26":"markdown","22713f0f":"markdown","33d3002c":"markdown","9adc59d5":"markdown"},"source":{"e3996ed5":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# for selecting w\/o replacement\nfrom numpy.random import default_rng\nrng = default_rng()\n\nnp.random.seed(123)","b62744fb":"# gen some disribution w\/ finite mu, sigma\ndistribution = np.array([])\nfor _part_mu in range(0, 100, 10):\n    _part_sigma = np.random.choice(30)\n    _part_dist = np.random.normal(_part_mu, _part_sigma, 1000)\n    distribution = np.append(distribution, _part_dist)\n\nold_mu = np.mean(distribution)\nold_var = pow(np.std(distribution), 2)\n\n# plot\nsns.distplot(distribution)\nplt.title(f\"Distribution\\nmu: {old_mu:.2f}\\n var: {old_var:.2f}\")\nplt.show()","f937b46e":"def CLT(rvs, k=10000, n=50, replacement=True):\n    m = len(rvs)\n    if n>m: raise(\"n should be <= m\")\n    \n    # 1. gen k random samples of size n\n    random_samples = []\n    if replacement is True:\n        for _ in range(0,k):\n            sample_idxs = np.random.choice(m, size=n) # with replacement\n            sample = rvs[sample_idxs]\n            random_samples.append(sample)\n    elif replacement is False:\n        for _ in range(0,k):\n            sample_idxs = rng.choice(m, size=n, replace=False) # without replacement\n            sample = rvs[sample_idxs]\n            random_samples.append(sample)\n    \n    # 2. gen k number of means --  sampling distribution of sample means\n    normal_dist = []\n    for sample in random_samples:\n        normal_dist.append(np.mean(sample))\n        \n    new_mu    = np.mean(normal_dist) # almost same as old mu (depending on k and n)\n    new_var   = pow(np.std(normal_dist), 2) # same as old_var\/n\n    \n    # Note: we are checking only errors due to sampling here (large k and n values => errors converge to 0)\n    print(\"DELTAS\")\n    print(f\"mu: \\t before: {old_mu} \\t after:{new_mu} \\t error: {np.abs(old_mu-new_mu)}\")\n    print(f\"var: \\t before: {old_var\/n} \\t after:{new_var} \\t error: {np.abs((old_var\/n)-new_var)}\")\n    \n    return normal_dist","d97d4f5f":"to_guass = CLT(distribution)\nmu  = np.mean(to_guass)\nvar = pow(np.std(to_guass),2)\n\n\n# plot\nsns.distplot( to_guass )\n\nplt.title(f'Same distibution after CLT\\nmu: {mu:.2f}\\nvar: {var:.2f}')\nplt.show()","2c079784":"> *Any **finite ($\\mu ,\\sigma$)** distribution can be converted to normal distribution (of means)*","4c646c26":"- $\\mu$ does  not change because sampling distribution is of sample means\n- $var$ reduces by factor of sampling size `n`\n\n**Why is variance being reduced by factor of sampling size `n`?**\n> $var$ indicates the amount of spead of rvs. Original rvs have size `m`(>=n). They are being compressed into sampling size `n`. Hence, the old variance is being reduced by a factor of `n` i.e ${\\sigma^{2}}_{new} = \\frac{{\\sigma^{2}}_{old}}{n}$","22713f0f":"**CLT Implementation**","33d3002c":"# Central Limit Theorem","9adc59d5":"**Procedure:**\n\n- Take `k` number of `n` sized samples of of `m` sized $distribution D(\\mu, \\sigma^{2})$ w\/ rvs   \n- For `k` number of samples, find `k` means\n- This new distribution of means --> guassian noraml distibution $N(\\mu, \\frac{\\sigma^{2}}{n})$\n\n\n- **NOTE**\n    \n    - Not applicable to infinite $\\mu ,\\sigma^{2}$\n    - Sampling should be random and independant of each other (i.e sampling **with replacement**) [source](https:\/\/stats.stackexchange.com\/questions\/175588\/do-we-draw-samples-with-or-without-replacement-when-we-state-the-central-limit-t)\n        - Sample size should **not** be more than 10% of the population when sampling is done **without replacement**\n    - Rule of thumb: **n>=30**"}}