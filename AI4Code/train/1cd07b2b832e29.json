{"cell_type":{"6f4f707e":"code","334a3530":"code","a1807e60":"code","2266efe9":"code","4ba60723":"code","ee6420a4":"code","e7f787f7":"code","d1d5a6a3":"code","45b4cebb":"code","bb40773a":"code","225cf555":"code","bc8d366b":"code","d34a68aa":"code","1d2eaa2a":"code","2845521b":"code","75bc4a0f":"code","d7c066ec":"code","0583c038":"code","5f90fbc3":"code","9cca7cd8":"code","935d12d0":"markdown","88d6640b":"markdown","9c05dcb8":"markdown","b85432bb":"markdown","d0fc61c9":"markdown","cb0a074f":"markdown","c9bfadd4":"markdown","e0c6ad38":"markdown","b427c737":"markdown","def83d26":"markdown","c00f6781":"markdown","2bd42399":"markdown","d1601093":"markdown","265324ee":"markdown","b41e45fc":"markdown","923b7942":"markdown","8eb23c7c":"markdown","97ed32da":"markdown","1265e8fc":"markdown","c77e0076":"markdown","59ad61f9":"markdown","bf2d8c91":"markdown","fc2602dc":"markdown","832b2d51":"markdown","2b595bd8":"markdown"},"source":{"6f4f707e":"# Imports -- get these out of the way\n# It's considered good Pythonic practice to put imports at top\n\nfrom random import randint\nimport os\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport numpy as np\n\nfrom IPython.display import display\n\n\n#--> This is a python-converted set of dictionaries from 'dictionary.txt' that I made\nfrom events_dict import *  ","334a3530":"# Get Data and local file dictionaries\nevents = pd.read_csv(\"events.csv\")\ngames = pd.read_csv(\"ginf.csv\")","a1807e60":"shots = events[events['event_type']==1 ]","2266efe9":"goals_winning_team = []\n\n# go row by row (don't think a one liner would work)\nfor I,game in games.iterrows():\n    if game['fthg'] > game['ftag']:\n        goals_winning_team.append(game['fthg'])\n    elif game['fthg'] < game['ftag']:\n        goals_winning_team.append(game['ftag'])\n        \navg_goals = np.mean(goals_winning_team)\nstd_goals = np.std(goals_winning_team)\n        \nprint(\"Average Goals Per Game from Winning Team: %0.3f\" % avg_goals)\nprint(\"Std. of Goals per game from winning team: %0.3f\" % std_goals)\nprint(\"%% Deviation: +\/- %0.3f%%\" % ((std_goals\/avg_goals)*100))","4ba60723":"# plot this as a histogram\nplt.hist(goals_winning_team, bins=10, normed=True)\nplt.show()","ee6420a4":"print(\"Shots: %d\" % shots.shape[0])\nprint(\"Goals: %d\" % shots[shots['is_goal']==True].shape[0])\nprint(\"Shots that convert: %0.3f%%\" % (100*(shots[shots['is_goal']==True].shape[0]\/shots[shots['event_type']==1].shape[0])))","e7f787f7":"shots = shots[ shots['location']!=19. ] ","d1d5a6a3":"shots.replace({'location': location_dict, \n               'shot_place': shot_place_dict, \n               'bodypart': bodypart_dict, \n               'assist_method': assist_method_dict, \n               'situation': situation_dict}, inplace=True)","45b4cebb":"shots['uc'] = shots['location'] + ', ' + shots['shot_place'] + ', ' + \\\n    shots['bodypart'] + ', ' + shots['assist_method'] + ', ' + \\\n    shots['situation']","bb40773a":"unique_combos = shots['uc'].value_counts().to_dict()\nunique_combos_that_scored = shots[ shots['is_goal']==True ]['uc'].value_counts().to_dict()\n\nprint(\"Total Unique Combos: %d\" % len(unique_combos))\n\n# Filter out keys that did not score\nscoring_keys = [k for k in unique_combos.keys() if k in unique_combos_that_scored.keys()]\nunique_combos = {key:unique_combos[key] for key in scoring_keys}\n\nprint(\"Total Unique Combos that Scored: %d\" % len(unique_combos))\n\n# Filter out keys that don't have at least 100 occurrences\nunique_combos = {key:value for key,value in unique_combos.items() if value > 100}\nprint(\"Number of Unique Combos: %d\" % len(unique_combos))\n\nitems = sorted(unique_combos.items(), key=lambda x: x[1], reverse=True)\n\n# Plot the data\nplt.bar(range(len(unique_combos)), [i[1] for i in items], align='center')\nplt.show()\n\n# Print out most frequent shot type\nprint(\"Most Common Shot Taken => %r: %d occurences\" % (items[0][0],items[0][1]))","225cf555":"shots_per_uc = unique_combos\ngoals_per_uc = shots[ shots['is_goal']==True ]['uc'].value_counts().to_dict()\n\nl = [];\n\nfor k in shots_per_uc.keys():\n    s = shots_per_uc[k]\n    g = goals_per_uc[k]\n    f = float(g\/s)\n    \n    split_uc = k.split(\", \")\n    location = split_uc[0]\n    shot_place = split_uc[1]\n    bodypart = split_uc[2]\n    assist_method = split_uc[3]\n    situation = split_uc[4]\n    \n    l.append([location,\n              shot_place,\n              bodypart,\n              assist_method,\n              situation,\n              s,g,f])\n\n\n# While the 'uc' column makes typing out easier, display is better if\n# we return to the original columnar display\ndf = pd.DataFrame(l,columns=['location',\n                             'shot_place',\n                             'bodypart',\n                             'assist_method',\n                             'situation',\n                             'shots',\n                             'goals',\n                             'percentage_conversion'])\n\n# Finally, we sort the dataframe by the highest conversion rate\ndf.sort_values(axis=0, by=['percentage_conversion'],\n               ascending=False, inplace=True)\n","bc8d366b":"# Display the dataframe itself\ndisplay(df)","d34a68aa":"# Rename the DF from before\nevents = df\n\n# Rebuild the unique column up\nevents['key'] = events['location']+'\/'+events['shot_place']+'\/'+events['bodypart']+'\/'+events['assist_method']+'\/'+events['situation']\n\nother_conversions = pd.Series(events['percentage_conversion'].values,index=events['key']).to_dict()\n\n# Then we'll rank all the other events as zero as there's \n# insufficient information to make a judgement -- this works out in the calculations\nshots['key'] = shots['location']+'\/'+shots['shot_place']+'\/'+shots['bodypart']+'\/'+shots['assist_method']+'\/'+shots['situation']\nconversions = pd.Series([0 for i in range(shots['key'].shape[0])], index=shots['key']).to_dict()\n\n# Then we combine them \nconversions.update(other_conversions)","1d2eaa2a":"# We assign value to every contribution\nshots['value'] = shots['key'].apply(lambda x: conversions[x])\n\n# Get all players into a list -- players who are not mention (i.e. NaN) are dropped\nplayers = shots['player'].dropna().unique().tolist()\nplayer_contributions_per_game = {}\nplayer_games_number = {}","2845521b":"for player in players:\n    A = shots[ shots['player']==player ]\n    games_played = A['id_odsp'].unique().tolist()\n\n    contributions = 0\n    for game in games_played:\n        contributions += A[ A['id_odsp']==game ]['value'].sum()\n        \n    # We normalize the contribution such that it's _per-game_\n    player_contributions_per_game[player] = float(contributions\/len(games_played))\n    player_games_number[player] = len(games_played);\n","75bc4a0f":"anonymous_contributions = list(player_contributions_per_game.values())\nplt.hist(anonymous_contributions,bins='auto')\nplt.show()","d7c066ec":"A = [x for x in list(player_contributions_per_game.values()) if x > 0.0]\n\nplt.hist(A, bins='auto')\nplt.show()","0583c038":"war = np.median(anonymous_contributions)\nprint(\"Median Player's Contribution: %f\" % war)\nprint(\"Mean Player's Contribution: %f\" % np.mean(anonymous_contributions))\nprint(\"Mean Player's Contribution (zeros dropped): %f\" % np.mean(A))","5f90fbc3":"# Let's look at the top players in terms of contributions \nB = [(v,k) for k,v in player_contributions_per_game.items()]\nB = sorted(B, key=lambda x: x[0], reverse=True)\nl = []\n\nfor i in B:\n    \n    if player_games_number[i[1]] < 10:\n        continue\n\n    l.append([i[1],i[0],player_games_number[i[1]]])\n    #print(\"%r: %f, played %d games\" % (i[1],i[0],player_games_number[i[1]]));\n    \ndf = pd.DataFrame(l,\n                 columns=['player','contribution_per_game','games_played']\n                )\n","9cca7cd8":"# Display the data\ndisplay(df);","935d12d0":"I like [Pandas](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.html) for data manipulations done locally, so I'll be using that. They work similar to R dataframes.","88d6640b":"## First Steps\n\nFirst we need to import all of our data. I'll assumed you grabbed [the data from Kaggle](https:\/\/www.kaggle.com\/secareanualin\/football-events), you'll [need an account to do so](https:\/\/www.kaggle.com\/?login=true). \n\nKeep in mind that I turned the `dictionary.txt` into a file of dictionaries. I was creating multiple notebooks for analysis so I wanted something I could import multiple times. Therefore, they are not included in this. ","9c05dcb8":"So how can we interpret this data? A few ideas come to mind.\n\nOne is that it can influences play. A coach may want to orient players to pursue higher scoring opportunities (e.g. ones that will more likely convert into a goal).\n\nAnother is to evaluate players by their abilities to make these situations happen. Which leads us to the next section...\n","b85432bb":"## Analyzing Players\n\nLet's use this data to evaluate players. \n\nWe'll assume that _only goals matter_ which will leave out defensive players. ","d0fc61c9":"Finally, we'll plot the value of each player. This will likely be a pareto distribution. with the vast majority of players contributing very little in value, especially as defensive players will tend towards zero. ","cb0a074f":"Now that we have the data, we can start to pull out the information we want. \n\nWhen looking at a game, taking just the goal information is often insufficient. There are not enough goal events to make this a significant aspect to look at. \n\nWhat's better is to use shots on goal. Taking a cue from the [Corsi metric](https:\/\/hockeynumbers.blogspot.com\/2007\/11\/corsi-numbers.html) used in Hockey, we can instead look at shots on goal. \n\nWe'll coax those out first.","c9bfadd4":"## Final Thoughts\n\nSo there you have it: a full data analysis of the top offensive players and the best places to take shots on goal. \n\nIt's neat if imperfect. More thorough analysis would want to look at defensive players. If I had the data, I'd use possession time as the baseline metric, again taking inspiration from Hockey statistics. \n\nAlso, it would be helpful to look at players' net shot conversions to see what types of players they are. Perhaps they convert more often on certain shots than the typical average. However, I'm not 100% convinced there's enough data in this set to support such an analysis. \n\nThoughts? Questions? Feel free to shoot me an email at [vincent@saulys.me](mailto:vincent@saulys.me).","e0c6ad38":"Next, we'll get the value of each shot by converting it through a dictionary","b427c737":"We also need a baseline number of comparisons for a particularly unique shot. After all, shots that don't occur often can't be evaluated on the same level as shots that never occur. \n\nAll shots that are low occurrence will be evaluated at zero for the sole purpose of being able to have a clean print out sheet. In practice, you would want to ignore them anyway. \n\nWe'll then plot the distribution of occurrences of unique shot types. I could put the shot type in the x axis, but experience has told me that a cluttered visualization is worse than no visualization. Therefore, I'll drop it. It's mostly to show the distribution of shot types that get taken.\n\nFor curiosity sake, we'll print out the most common shot taken. ","def83d26":"We'll filter out players who provide no value (e.g. defensive players) and plot that as a distribution. ","c00f6781":"To start, we'll recreate the unique combo column like before and get the number of occurences for each player. That means that if player X takes unique position Y to score a goal W times, we want that tally of W times the percentage it converts. \n\nThis will make more sense as we go along. \n\nNote that I originally ran this as two separate sheets, which explains why we have to rebuild the uniqueness column.","2bd42399":"We'll create a new column that takes in the different strings. This will make for a unique key we can get all the shots on.\n\nIf you're curious why the new column is called 'uc', it's short for 'unique column' and it easier to type out. ","d1601093":"Now that we have a unique shot column, we can start to look at conversion percentages. This will be how often that shot converts into a goal expressed as a percentage. \n\nWe can use this as a percentage of contribution of a goal. That means a shot on goal that converts 60% of the time will be put down as 0.6 goals. We'll give ourself two significant figures as we looked at occurrences of at least 100 times. ","265324ee":"One interesting number we'll want to tease out is how many goals the average winning team has. My gut feeling says this will be a [gaussian distribution](https:\/\/en.wikipedia.org\/wiki\/Normal_distribution).\n\nIf we have a narrow enough distribution, we'll be able to say how many games a team will win with a particular player by the number of goals he creates. This is very similar to the [wins above replacement](https:\/\/en.wikipedia.org\/wiki\/Wins_Above_Replacement) used in Baseball statistics where players are evaluated by the number of wins they bring over the average player. ","b41e45fc":"Sabermetrics is baseball statistics taken to an extreme, leveraging computers to evaluate players and teams in often unconventional ways. You can see this in the Oakland A\u2019s 2002 season when they won an at-the-time record of 20 wins. The team and their approach is immortalized in the book Moneyball by Michael Lewis.\n\nLooking at Association Football or Soccer\u200a\u2014\u200aas I\u2019ll call it\u200a\u2014\u200aoften has these stats being left out in favor of more traditional methods of evaluating players. I decided to crack open a recent Kaggle dataset and take a deeper look at trying to evaluate these players.\n\nFirst, we\u2019ll start with goals\n\nTracking the number of goals scored is an important starting point, but it doesn\u2019t happen enough in a game to be statistically significant. A top ranking team in the English Premier League like Manchester City only scored 80 goals in the entire 2016\u20132017 season. That comes out to ~2.11 goals a game. Given the size of a squad, evaluating players solely on their goal production seems an inefficient way to judge them, especially if they don\u2019t score often.\n\nA better way to evaluate a player is to look at how often he attempts a goal and how often that particular shot-on-goal converts into a real goal. There should be enough data on attempts on goal to make this a meaningful number. It\u2019s similar to the Corsi statistic used in evaluating hockey players.\n\nSo this is a two fold notebook: first is to look at how shots convert into goals (and goals into games). Second is to look at what types of shots on goal resulted in goals what percentage of time.\n\nFrom this, I could evaluate players based on their ability to take those types of shot. My intuition was that players who take shots on goal that rarely convert into goals are to be valued less than players who take shots on goal that are likely to convert.\n\nNote that this is far from a perfect analysis. For instance, defensive players are not evaluated here (the data I have does not record defensive maneuvers so they are more difficult to evaluate). I also took a lot of assumptions in order to make this work, which I\u2019ll note when I can as the analysis progresses.\n\nThus, don\u2019t take it as an end-all-be-all of soccer offensive player analysis, but instead take it as a starting place to look at player contributions in soccer teams.","923b7942":"The pareto distribution indicates to me that soccer is game of finding superstars. This does not surprise me; most sports are a [winner-takes-all market](https:\/\/www.investopedia.com\/terms\/w\/winner-takes-all-market.asp) with a few superstars dominating the game.","8eb23c7c":"Finally, we loop through each player and tally up the the type of shot taken by it's \"goal worth\" or the percentage of times it converts into a goal. ","97ed32da":"Next, we'll look at the the baseline player to compare against to see what kind of an outlier a player ends up being. Normally this is average, but that will probably be less useful as outliers will lopside the distribution. ","1265e8fc":"# What is the Value of a Player's Contribution?\n\nWhose really the best in soccer? For a sport as popular as association football is, I\u2019m surprised there isn\u2019t a lot of numbers being used in its analysis. So I\u2019ve gone ahead and tried my best impersonation of Bill James in coming up with one way to evaluate players.\n\n*Note: This won't run as I use a couple of bespoke files. You'll have to download the data and keep it in the same directory to run this notebook.*","c77e0076":"This passes the sniff test. Cristiano Ronaldo [is considered by many to be the best ever](https:\/\/www.quora.com\/Is-Cristiano-Ronaldo-the-best-soccer-player-of-all-time) so having him at the top makes a lot of sense. The other players are also of similar caliber. None of them are defensive players, which again makes a lot of sense. \n\nThe one outlier of [Jorginho Frello](https:\/\/en.wikipedia.org\/wiki\/Jorginho_(footballer,_born_1991)) having played only 11 games in this dataset makes sense as he doesn't have enough data to properly train. I actually find it surprising he's the _only_ outlier here. We could adjust for the minimum number of games a player needs to be in in order to appear, but 10 feels fair given the typical soccer league has ~40 games in a season. That means a player needs to appear in a quarter of the games in order to be here, which feels fair (though admittedly gut-feeling). ","59ad61f9":"Ok, so the standard deviation on this is really high.\n\nEvaluating a socccer player by the number of wins he contributes looks to be a crapshoot. There's too much variance in the number of goals a team needs to win to make this a meaningful statistic.\n\nWe'll plot the histogram to get a feel for how much like a gaussian this looks.","bf2d8c91":"Next, we'll use the dictionaries I translated into python (called `dictionary.txt` from the Kaggle download) to replace all the data. \n\nYou may be curious why I didn't do this earlier. The reason is that string comparisons take more computation than integer or float comparisons. So I tend to translate into strings towards the end and not the beginning. ","fc2602dc":"This gives a baseline of the shots that convert into goals. However, we can do better.\n\nNot all shots on goal are the same. We can slice up the data more finely by looking at the kinds of shot taken. The dataset we have allows us to split up the data by the location the shot was taken, where in the net it was aimed, the body part used, the context (e.g. was it a penalty shot?), and if anybody was assisting. \n\nSo let's try that. \n\nFirst, we'll have to remove the shots where location is not recorded. ","832b2d51":"The distribution is a skewed gaussian. This makes sense: soccer is fundamentally a low scoring game. \n\nNext, we'll look at the average number of shots that convert into goals. This gets a feel for the number of shots a player needs to takae in order for a goal to result. Players that hustle and take a lot of shots intuitively should be evaluated more highly.","2b595bd8":"Now for fun, let's look at the top players by contribution! \n\nWe'll filter out people who have played less than 10 games as they likely have insufficient data to properly judge. "}}