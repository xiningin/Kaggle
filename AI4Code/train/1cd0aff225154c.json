{"cell_type":{"a479f9a3":"code","4a0ce2e3":"code","c2c747ca":"code","9ed47215":"code","3b61d056":"code","fd80d423":"code","cce7b239":"code","6d287471":"code","6fbed3eb":"code","b9479ad4":"code","0f9690d9":"code","32de805c":"markdown","66a8222e":"markdown","e65cc205":"markdown","689d660d":"markdown","f42d9ce3":"markdown","71ce27b2":"markdown","082659a7":"markdown","b24d0b12":"markdown","9adcd8d9":"markdown","733744dc":"markdown","60202eb5":"markdown","4f055232":"markdown","2d3f201e":"markdown"},"source":{"a479f9a3":"import itertools\nword = 'BREAKDOWN'","4a0ce2e3":"letterset = {letter for letter in word}\nprint(letterset)","c2c747ca":"data = itertools.combinations(letterset, 4)\nsubsets = set(data)\nprint(subsets)","9ed47215":"numberOfSubsets = len(subsets)\nprint(numberOfSubsets)","3b61d056":"vowels = {'A','E','I','O','U'}\nmyset = {'B','F','I','Z','A'}\nvowelsInSet = myset.intersection(vowels)\nprint(vowelsInSet)\nprint(len(vowelsInSet))","fd80d423":"set1 ={'A','E'}\nset2 = {}\nprint(min(len(set1),1))\nprint(min(len(set2),1))","cce7b239":"biglist = [min(len(set(choice).intersection(vowels)),1) for choice in subsets]\nprint(biglist)","6d287471":"numberWithVowels = sum(biglist)\nprint(numberWithVowels)","6fbed3eb":"print(numberWithVowels,'\/',numberOfSubsets)","b9479ad4":"def probabilityOfVowel(word,subsetlength):\n    word = word.upper()\n    letterset = {letter for letter in word}\n    data = itertools.combinations(letterset, subsetlength)\n    subsets = set(data)\n    numberOfSubsets = len(subsets)\n    vowels = {'A','E','I','O','U'}\n    numberWithVowels = sum([min(len(set(choice).intersection(vowels)),1) for choice in subsets])\n    answer = str(numberWithVowels)+'\/'+str(numberOfSubsets)\n    return answer","0f9690d9":"print(probabilityOfVowel('BREAKDOWN',4))\nprint(probabilityOfVowel('PythonJapes',5))","32de805c":"Finally, a question. What goes wrong with this approach when the word contains repeated letters?","66a8222e":"Actually, we could tidy this all up by making a function:","e65cc205":"There are a lot of subsets! We don't need to see them all, just to know how many:","689d660d":"Now let's count how many have vowels. To do this we can use the set intersection function. Here is an illustration:","f42d9ce3":"#  Combinatorics","71ce27b2":"Next we can use a clever function to get all possible subsets of length 4. The result is not a set so we convert it. The ```print``` function lets us see the result.","082659a7":"now add up to get the number with vowels:","b24d0b12":"Finally, we can print the answer:","9adcd8d9":"now we can try the function on different words:","733744dc":"As you can see, we can now count the number of vowels in each subset. Unfortunately, that's not what we need. We just need to know if there *are* any vowels. To do this we can use some more trickery. Use the `min` function to give 0 if the intersection is empty and 1 if not.","60202eb5":"The next step is to turn our word into a set of letters (I could have just typed it in as a set!).\nThe ```print``` statement is added so you can see the result","4f055232":"Now we can go through the whole collection of subsets and check if each has any vowels. We make a list of 1s and 0s.\nWE go through the collection with a `for` loop. An added complication is that the objects in the collection are not themselves sets, they are *tuples*. We convert to sets as we go:","2d3f201e":"This is just a trial notebook to solve a simple combinatorics problem. The problem (from Miss Cave) is:\n>Four letters are picked from the word BREAKDOWN.  What is the probability that there is at least one vowel among the letters?\n\nWe need to use a library of useful functions called  ```python itertools``` and the *set* datastructure.\nFirst we do the setup:"}}