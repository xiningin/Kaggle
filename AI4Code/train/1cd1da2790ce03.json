{"cell_type":{"df6cf618":"code","43844185":"code","eb42863c":"code","f5d3b45a":"code","ef46bdad":"code","7df64272":"code","8982e2eb":"code","b266f74e":"markdown"},"source":{"df6cf618":"name = 'shapes_rotation'\nT_r = 50","43844185":"import os, gc, glob\nimport torch \ngpu = torch.cuda.is_available()\nif gpu:\n    print('GPU is ON, use CuPy')\n    import cupy as np\nelse:\n    print('GPU is OFF, use NumPy')\n    import numpy as np\nimport pandas as pd\nimport datatable as dtable\nfrom numba import njit\nfrom tqdm.notebook import tqdm\nfrom scipy.io import savemat","eb42863c":"file = dtable.fread(f'..\/input\/davis-240c-datasets\/{name}\/events.txt', sep = ' ').to_pandas()\nfile.columns = ['timestamp', 'x', 'y', 'polarity']\nfile = file[['x', 'y', 'timestamp', 'polarity']]\nfile['polarity'] *= 1\nfile.head()","f5d3b45a":"print(f'Number of events in {name}:', file.shape[0])","ef46bdad":"def event_agg(timestamp, x, y, polarity, T_r, M, N):\n    T_r \/= 1000\n    T_seq = timestamp.max()\n    T_frames = int((T_seq \/\/ T_r)) + 1\n    \n    frames_0 = np.zeros((T_frames, M, N)) # polarity == 0\n    frames_1 = np.zeros((T_frames, M, N)) # polarity == 1\n    \n    for i in tqdm(range(T_frames)):\n        idx_0 = np.where((timestamp >= i * T_r) & (timestamp < i * T_r + T_r) & (polarity == 0))[0]\n        if len(idx_0) > 0:\n            frames_0[i] = np.bincount(N * x[idx_0] + y[idx_0], minlength = M * N).reshape(M, N)\n        \n        idx_1 = np.where((timestamp >= i * T_r) & (timestamp < i * T_r + T_r) & (polarity == 1))[0]\n        if len(idx_1) > 0:\n            frames_1[i] = np.bincount(N * x[idx_1] + y[idx_1], minlength = M * N).reshape(M, N)\n    \n    superframes = np.concatenate((frames_0, frames_1), axis = -1)\n    print('generated superframes with size:', superframes.shape)\n    return superframes","7df64272":"timestamp = np.array(file['timestamp'].values)\ntimestamp -= timestamp.min()\nx = np.array(file['x'].values)\ny = np.array(file['y'].values)\npolarity = np.array(file['polarity'].values)\nM = 240\nN = 180","8982e2eb":"superframes = event_agg(timestamp, x, y, polarity, T_r, M, N)\nif gpu:\n    superframes = superframes.get()\nsavemat(f'{name}_{int(T_r)}ms.mat', {'data': superframes})","b266f74e":"# Instructions\n\n1. Change 'name' to generate different superframes\n2. Change 'T_r' (in milliseconds) for different time-aggregation intervals\n3. Turn on GPU for acceleration\n4. The result is saved in the 'data' section of '{name}_{T_r}ms.mat' file, e.g., shapes_rotation_50ms.mat"}}