{"cell_type":{"36aea3d5":"code","95326442":"code","a9efbceb":"code","a8a0f860":"markdown","b99535b7":"markdown","f879f971":"markdown","92ac5676":"markdown","49f25d0c":"markdown","bd13fc92":"markdown","28bc825b":"markdown","60d301ee":"markdown","ee787b53":"markdown","7880ed95":"markdown"},"source":{"36aea3d5":"import sys\nsys.path.append('..\/input')\nfrom flight_revenue_simulator import simulate_revenue, score_me\n","95326442":"def pricing_function(days_left, tickets_left, demand_level):\n    \"\"\"Sample pricing function\"\"\"\n    # When there are more than 3 days before the departure, the time constraint doesn't do much\n    if days_left > 3:\n        if demand_level >= 195: price = demand_level - 19\n        elif 190 <= demand_level < 195: price = demand_level - 14\n        elif 180 <= demand_level < 190: price = demand_level - 12\n        elif 175 <= demand_level < 180: price = demand_level - 9\n        elif 170 <= demand_level < 175: price = demand_level - 7\n        else: price = demand_level - 0.5\n            \n    # On three days before the departure, the tickets_left has to be considered in order to sell a part of them\n    elif days_left == 3:\n        if demand_level > 180 : price = demand_level - 0.8 *tickets_left\n        elif 150 <= demand_level <= 180 : price = demand_level - 0.5 *tickets_left\n        else: price = demand_level - 1\n    \n    # On the two days before the departure\n    elif days_left == 2:\n        if demand_level > 170 : price = demand_level - tickets_left\n        elif 150 <= demand_level <= 180 : price = demand_level - 0.8 *tickets_left\n        else: price = demand_level - 1\n            \n    #On the last day, selling all tickets is the best way to capture the most profits\n    else: price = demand_level - tickets_left\n    return price\n\nscore_me(pricing_function)","a9efbceb":"# Look at one of the scenario\nsimulate_revenue(days_left=7, tickets_left=50, pricing_function=pricing_function, verbose=True)","a8a0f860":"# Solution:\n\n### Four or more days before the departure: \nAt that point, the thread of timing is not important. Even though it is possible of having the demand_level higher than 190, it's more pragmatic to leave some for the rest three days to capture more profits. Moreover, the highest profit that the business can get is when the demand_level is 200 and the tickets_left is 50, making the total revenue as (200-50) * 50 = 7500, but the potential amount of money will be limited if this happen since the -50 on the demand_level make the multiplier not efficient. \n\nAfter some trial and error on keeping the highest amount of revenue, the most efficient pricing is using the price discrimination, or the more demand_level it is in that day, the higher price the business should charge.\n\n### Three days before the departure:\nWhen there are three days left, considering the number of tickets should be started from the time limit. I used the same principle as the four or more days that the more demand_level appears, the higher price can be charged. Therefore, I used the equation that regard the price based on the remaining ticket. At the demand_level higher than 180, the price should be 80% of the tickets_left, while when the demand level is between 150 to 180, the price should be 50% of tickets_left. With this approach, the ticket that left from the first three days will have a chance to be released, especially when the demand is high.\n\n### Two days before the departure:\nUSe the same principle as the \"Three days before the departure\", but with more percentage to harvest more profits. For the demand level higher than 180, all tickets should be sold by this point because it has low chance for the last day to have the demand_level higher than 180, and even if it is, the profit from this is high enough for the price discrimination. If the demand_level is lower than 180, the tickets should be left for the last day for the chance of having higher demand_level.\n\n### One days before the departure:\nAll of tickets have to be released in order not to have a non-value ticket left. So, price = demand_level - tickets_left have to be applied.","b99535b7":"In case you want to check your understanding of the simulator logic, here is a simplified version of some of the key logic (leaving out the code that prints your progress). If you feel you understand the description above, you can skip reading this code.\n\n```\ndef _tickets_sold(p, demand_level, max_qty):\n        quantity_demanded = floor(max(0, p - demand_level))\n        return min(quantity_demanded, max_qty)\n\ndef simulate_revenue(days_left, tickets_left, pricing_function, rev_to_date=0, demand_level_min=100, demand_level_max=200):\n    if (days_left == 0) or (tickets_left == 0):\n        return rev_to_date\n    else:\n        demand_level = uniform(demand_level_min, demand_level_max)\n        p = pricing_function(days_left, tickets_left, demand_level)\n        q = _tickets_sold(demand_level, p, tickets_left)\n        return _total_revenue(days_left = days_left-1, \n                              tickets_left = tickets_left-q, \n                              pricing_function = pricing_function, \n                              rev_to_date = rev_to_date + p * q,\n                              demand_level_min = demand_level_min,\n                              demand_level_max = demand_level_max\n                             )\n```","f879f971":"---\n**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n\n*Want to discuss your solution or hear what others have done?  Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/general\/62469) to chat with other Learners.*","92ac5676":"To see a small example of how your code works, test it with the following function:","49f25d0c":"# Price Discrimination:\n\n(Adapted from an article \"Price Discrimination\" https:\/\/www.investopedia.com\/terms\/p\/price_discrimination.asp)\n\nPrice discrimination is a selling strategy that charges customers different prices for the same product or service based on what the seller thinks they can get the customer to agree to. In pure price discrimination, the seller charges each customer the maximum price he or she will pay. In more common forms of price discrimination, the seller places customers in groups based on certain attributes and charges each group a different price.\n\nTo consider price discrimination, the planner has to consider each customer's price elasticity to capture highest profits possible. Price elasticity is the measurement of the temptation for each customer to pay for the goods by considering how much quantity the customer would change purchasing (as a percentage) when the price changes (as a percentage).\n\n![image.png](attachment:image.png)\n(picture from https:\/\/www.tutor2u.net\/economics\/reference\/monopoly-price-discrimination)\n\nIn the actual business, the price discrimination is limited into some dicision. For example, the change of airplane tickets price based on the time before the departure or the type of the seats.\n\nHowever, this question can approach the perfect price discrimination by giving the demand price instead of the data of people who wants to buy the tickets to decrease the amount of data to consider","bd13fc92":"# Intro\n\nData scientists tend to focus on **prediction** because that's where conventional machine learning excels. But real world decision-making involves both prediction and **optimization**.  After predicting what will happen, you decide what to do about it.\n\nOptimization gets less attention than it deserves. So this micro-challenge will test your optimization skills as you write a function to improve how airlines set prices.\n\n![Imgur](https:\/\/i.imgur.com\/AKrbLMR.jpg)\n\n\n# The Problem\n\nYou recently started Aviato.com, a startup that helps airlines set ticket prices. \n\nAviato's success will depend on a function called `pricing_function`.  This notebook already includes a very simple version of `pricing_function`.  You will modify `pricing_function` to maximize the total revenue collected for all flights in our simulated environment.\n\nFor each flight, `pricing_function` will be run once per (simulated) day to set that day's ticket price. The seats you don't sell today will be available to sell tomorrow, unless the flight leaves that day.\n\nYour `pricing_function` is run for one flight at a time, and it takes following inputs:\n- **Number of days until the flight**\n- **Number of seats they have left to sell**\n- **A variable called `demand_level` that determines how many tickets you can sell at any given price. **\n\nThe quantity you sell at any price is:\n> quantity_sold = demand_level - price\n\nTicket quantities are capped at the number of seats available.\n\nYour function will output the ticket price.\n\nYou learn the `demand_level` for each day at the time you need to make predictions for that day. For all days in the future, you only know `demand_level` will be drawn from the uniform distribution between 100 and 200.  So, for any day in the future, it is equally likely to be each value between 100 and 200.\n\nIn case this is still unclear, some relevant implementation code is shown below.\n\n# The Simulator\nWe will run your pricing function in a simulator to test how well it performs on a range of flight situations.  **Run the following code cell to set up your simulation environment:**","28bc825b":"Below is one of the example scenarion which may answer some decision in the \"Solution\" Part","60d301ee":"You can try simulations for a variety of values.\n\nOnce you feel good about your pricing function, run it with the following cell to to see how it performs on a wider range of flights.","ee787b53":"**[Microchallenges Home Page](https:\/\/www.kaggle.com\/learn\/microchallenges)**\n\n---\n","7880ed95":"# Knowledge for this question"}}