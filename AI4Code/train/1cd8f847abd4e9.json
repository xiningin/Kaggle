{"cell_type":{"4d239fa9":"code","6ca48331":"code","fa3112db":"code","56c91740":"code","9b66d156":"code","f7a904ea":"code","af92cfb9":"code","d036d4fa":"code","b4831f11":"code","3e918c58":"code","b7bd6c45":"code","359da7a6":"code","95c95880":"code","3d544d7b":"code","8024fafa":"code","eca0a371":"code","c64e7296":"code","68a64991":"code","48d1b22b":"code","5f06d7ef":"code","8e2ee93a":"markdown","467f3f5f":"markdown","b03a3011":"markdown","c8f18fd6":"markdown","8c943353":"markdown","93756082":"markdown","799f2cf2":"markdown","b3343336":"markdown","bc84af92":"markdown","d165e18d":"markdown","8e78fe29":"markdown","cfc18e3e":"markdown","d141d387":"markdown","118ae9b2":"markdown","ff9cfa57":"markdown","2e28e54f":"markdown","e1ef0a4f":"markdown","17ebffff":"markdown","2df098a6":"markdown","03ca5474":"markdown","ff33fd74":"markdown","872a48d3":"markdown"},"source":{"4d239fa9":"from sklearn import ensemble, model_selection, datasets, metrics, tree, linear_model, preprocessing \nimport xgboost as xgb\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n%matplotlib inline","6ca48331":"test = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ntest = test[test.Date > \"2020-04-14\"]\nall_data = pd.concat([train, test],ignore_index=True).sort_values(by=['Country_Region','Province_State','Date'])\nall_data['ConfirmedCases'] = all_data['ConfirmedCases'].fillna(-1)\nall_data['Fatalities'] = all_data['Fatalities'].fillna(-0)\ncountries = pd.read_csv(\"..\/input\/countries\/countries.csv\")\ncountries.drop(['iso_alpha3','iso_numeric','official_name','name','iso_alpha2'], axis='columns',inplace=True)\n#\u041a\u0430\u0440\u0430\u043d\u0442\u0438\u043d\ndata_quarantine = pd.read_csv(\"..\/input\/countries\/quarantine_dates.csv\")\ndata_quarantine = data_quarantine.groupby(\"Country\").max().loc[:,\"Start date\"]\ndata_quarantine.loc[\"Russia\"] = \"2020-03-30\"\ncountries = countries.set_index(\"ccse_name\", drop=True)\ncountries[\"Quarantine\"] = data_quarantine\n#countries = countries.rename(columns={\"ccse_name\": \"countries\"})\ncountries_mean = countries.mean()\nall_data = all_data.merge(countries, how =\"left\" , left_on=\"Country_Region\", right_on='ccse_name')\nall_data['fertility_rate'] = all_data['fertility_rate'].fillna(countries_mean['fertility_rate'])\nall_data['median_age'] = all_data['median_age'].fillna(countries_mean['median_age'])\nall_data['migrants'] = all_data['migrants'].fillna(countries_mean['migrants'])\nall_data['urban_pop_rate'] = all_data['urban_pop_rate'].fillna(countries_mean['urban_pop_rate'])\nall_data['density'] = all_data['density'].fillna(countries_mean['density'])\nall_data['land_area'] = all_data['land_area'].fillna(countries_mean['land_area'])\nall_data['population'] = all_data['population'].fillna(countries_mean['population'])\nall_data['world_share'] = all_data['world_share'].fillna(countries_mean['world_share'])\nall_data['Quarantine'] = all_data['Quarantine'].fillna(\"2020-04-01\")\n\nall_data.drop(['Id'], axis='columns',inplace=True)\nall_data['Province_State'] = all_data['Province_State'].fillna(\"zzz\")","fa3112db":"data2 = all_data\n\n#\u0423\u0434\u0430\u043b\u0438\u043c \u0434\u043d\u0438 \u0431\u0435\u0437 \u0431\u043e\u043b\u044c\u043d\u044b\u0445\ndata2 = data2[data2.ConfirmedCases != 0]\ndata2.loc[data2.ConfirmedCases == -1,\"ConfirmedCases\"] = 0\n# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u043d\u0438 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u043d\u043e\u0433\u043e\ndata2[\"Date\"] = pd.to_datetime(data2.Date)\n#data2 = data2[(data2[\"Date\"]<pd.to_datetime(\"2020-05-1\")) & ((data2[\"Date\"]>pd.to_datetime(\"2020-04-1\")) | (data2.ConfirmedCases !=-1))]\ndata4 = data2[[\"Country_Region\",\"Date\"]].groupby(\"Country_Region\").min()\ndata4.columns = [\"Date_min\"]\ndata2 = data2.merge(data4, how = 'left', left_on='Country_Region', right_on='Country_Region')\ndata2[\"days\"] = (data2.Date - data2.Date_min).dt.days\ndata2[\"days_mart\"] = (data2.Date - pd.to_datetime(\"2020-03-1\")).dt.days\ndata2[\"days_after_Quarantine\"] = (data2.Date - pd.to_datetime(data2.Quarantine)).dt.days\ndata2.drop(['Date_min'], axis='columns',inplace=True)\ndata2.Date = data2[\"Date\"].apply(lambda x: pd.Series(x.strftime(\"%m-%d\")))\ndata2 = data2.rename(columns={\"ConfirmedCases\": \"confirmed\",\"Fatalities\":\"deaths\",\"Country_Region\":\"countries\"})\ndata2[data2.countries == \"Russia\"].iloc[0:70]","56c91740":"data2[data2.countries == \"Russia\"]","9b66d156":"data2.confirmed = np.log10(data2.confirmed+1)\ndata2.deaths = np.log10(data2.deaths+1)\nold_con = data2[\"confirmed\"].iloc[:-1]\nold_con2 = data2[\"deaths\"].iloc[:-1]\ndata2 = data2.iloc[1:]\ndata2[\"pred_conf\"] = old_con.values\ndata2[\"pred_deaths\"] = old_con2.values\ndata2 = data2.iloc[1:]\ndata2[\"delta_conf1\"] = old_con.values[1:] - old_con.values[:-1]\ndata2[\"delta_deaths1\"] = old_con2.values[1:] - old_con2.values[:-1]\ndata2 = data2.iloc[1:]\ndata2[\"delta_conf2\"] = old_con.values[1:-1] - old_con.values[:-2]\ndata2[\"delta_deaths2\"] = old_con2.values[1:-1] - old_con2.values[:-2]\ndata2 = data2.iloc[1:]\ndata2[\"delta_conf3\"] = old_con.values[1:-2] - old_con.values[:-3]\ndata2[\"delta_deaths3\"] = old_con2.values[1:-2] - old_con2.values[:-3]\ndata2 = data2.iloc[1:]\ndata2[\"delta_conf4\"] = old_con.values[1:-3] - old_con.values[:-4]\ndata2[\"delta_deaths4\"] = old_con2.values[1:-3] - old_con2.values[:-4]\ndata2.confirmed = data2.confirmed - data2[\"pred_conf\"]\ndata2.deaths = data2.deaths - data2[\"pred_deaths\"]\ndata2[data2.countries == \"Russia\"].iloc[0:70]","f7a904ea":"data2[data2.countries == \"Russia\"].iloc[70:80,10:25]","af92cfb9":"#\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0435\u043d\u044c \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 1 \u043c\u0430\u0440\u0442\u0430\ndays_x = 45\nmodel_Confirmed, model_Death = {}, {}\n\n#\u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0438\u0447\u0438\n#data3 = data2.drop(['Quarantine','world_share','urban_pop_rate','population', 'migrants','median_age','land_area','fertility_rate','density','delta_deaths2','delta_deaths1','pred_deaths','date','Date_min'], axis='columns')\ndata3 = data2.drop(['Quarantine','world_share', 'migrants','median_age','land_area','fertility_rate','density','Date'], axis='columns')\n#data3 = data2.drop(['Quarantine','delta_deaths2','delta_deaths1','pred_deaths','date','Date_min'], axis='columns')\ndata3.population = data3.population\/10**6\n\n#\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0448\u0442\u0430\u0442 \u0432 one_hot\none_hot = pd.get_dummies(data3['Province_State'])\ndata3 = data3.join(one_hot)\n\n\n#\u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u043f\u0430\u0440\u0443 \u0441\u0442\u0440\u0430\u043d \u043d\u0430 \u0442\u0435\u0441\u0442\ndata_Korea = data3[(data3.countries == 'Korea, South') & (data3.confirmed > 0)]\ndata_Russia = data3[(data3.countries == 'Russia') & (data3.confirmed > 0)]\n\n#\u041f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nnew_data = data3[data2.days_mart >= days_x]\nold_data = data3[data2.days_mart < days_x]\n#old_data = old_data[(old_data.countries != 'Russia')&(old_data.countries != 'Korea, South')]\n\n#\u041b\u043e\u0433\u043e\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\n#old_data[\"confirmed\"] = log(old_data.confirmed) \n\n#\u0423\u0431\u0438\u0440\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\ntrain_labels = old_data.confirmed\ntrain_death = old_data.deaths\ntrain_data = old_data.drop(['Province_State', 'ForecastId','confirmed','countries','deaths'], axis='columns')\ntrain_data","d036d4fa":"def pred_score(models, data, death = False, plot = 0):\n  predictions_all = 0\n  plt.rcParams['figure.figsize'] = [20, len(models)*10]\n  data = data[(data.confirmed > 0)]\n  death_labels = 10**(data.deaths + data.pred_deaths)- 1\n  labels = 10**(data.confirmed + data.pred_conf )- 1\n  data = data.drop(['Province_State','ForecastId','confirmed','countries','deaths'], axis='columns')  \n  for i, model in enumerate(models):\n    if model == \"reg\":\n      predictions = models[model].predict(scaler.transform(data))\n    else:\n      predictions = models[model].predict(data)\n    if death:\n      predictions = predictions + data.pred_deaths.values\n    else:\n      predictions = predictions + data.pred_conf.values    \n    predictions = 10**predictions - 1\n    predictions_all = predictions_all + predictions\n    if death:\n      print(\"\u041e\u0448\u0438\u0431\u043a\u0430 MALE \u043f\u043e \u0441\u043c\u0435\u0440\u0442\u044f\u043c\", model, np.mean(np.abs(np.log10((predictions+1)\/(death_labels+1)))))\n    else:\n      print(\"\u041e\u0448\u0438\u0431\u043a\u0430 MALE \u043f\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\", model, np.mean(np.abs(np.log10((predictions+1)\/(labels+1)))))\n    if plot:\n      plt.subplot(len(models), 1, i+1)\n      if plot==1:\n        plt.plot(predictions, label = \"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\") \n        if death:\n          plt.plot(death_labels.values, label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")\n          plt.gca().set(xlabel='\u0414\u043d\u0438 \u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f', ylabel='\u0421\u043c\u0435\u0440\u0442\u0438')\n        else:\n          plt.plot(labels.values, label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")  \n          plt.gca().set(xlabel='\u0414\u043d\u0438 \u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f', ylabel='\u0417\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f')\n      if plot==2:\n        plt.scatter(np.arange(0,len(predictions),1), predictions, s = 1, label = \"\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\") \n        if death:\n          plt.scatter(np.arange(0,len(predictions),1), death_labels.values, s = 1,  label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")\n          plt.gca().set(xlabel='\u0414\u043d\u0438 \u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f', ylabel='\u0421\u043c\u0435\u0440\u0442\u0438')\n        else:\n          plt.scatter(np.arange(0,len(predictions),1), labels.values, s = 1,  label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")  \n          plt.gca().set(xlabel='\u0414\u043d\u0438 \u043e\u0442 \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f', ylabel='\u0417\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f')      \n      plt.title(model)\n      plt.grid(True)\n      plt.legend() \n  predictions_all = predictions_all\/len(models)\n  if death:\n    print(\"\u041e\u0448\u0438\u0431\u043a\u0430 MALE \u043f\u043e \u0441\u043c\u0435\u0440\u0442\u044f\u043c \u0441\u0440\u0435\u0434\u043d\u044f\u044f\", np.mean(np.abs(np.log10((predictions_all+1)\/(death_labels+1)))))\n  else:\n    print(\"\u041e\u0448\u0438\u0431\u043a\u0430 MALE \u043f\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c \u0441\u0440\u0435\u0434\u043d\u044f\u044f\", np.mean(np.abs(np.log10((predictions_all+1)\/(labels+1)))))      ","b4831f11":"treeDepth = 30\nmdl = tree.DecisionTreeRegressor(max_depth=treeDepth)\nparam_grid = {\n    'n_estimators': [100],\n    'learning_rate': [0.0002],\n    'loss' : [\"exponential\"]\n                }\nregrMdl = ensemble.AdaBoostRegressor(base_estimator=mdl)\nmodel_Confirmed[\"Adaboost\"] = model_selection.RandomizedSearchCV(estimator = regrMdl, param_distributions = param_grid, n_iter = 100, \n                                         cv = 3, verbose=0, random_state=42, n_jobs = -1).fit(train_data, train_labels)\nmodel_Death[\"Adaboost\"] = model_selection.RandomizedSearchCV(estimator = regrMdl, param_distributions = param_grid, n_iter = 100, \n                                         cv = 3, verbose=0, random_state=42, n_jobs = -1).fit(train_data, train_death)","3e918c58":"\nmodel_Confirmed[\"RandomForest\"]  = ensemble.RandomForestRegressor(n_estimators=200, max_depth=30, random_state=42,\n                                                                  n_jobs = -1).fit(train_data, train_labels)\nmodel_Death[\"RandomForest\"] = ensemble.RandomForestRegressor(n_estimators=200, max_depth=30, random_state=42,\n                                                            n_jobs = -1).fit(train_data, train_death)\n                                                            ","b7bd6c45":"\nmodel_Confirmed[\"Xgboost\"] = xgb.XGBRegressor(objective ='reg:squarederror',n_estimators=200, max_depth=20, random_state=42,\n                                              n_jobs = -1).fit(train_data, train_labels)\nmodel_Death[\"Xgboost\"] = xgb.XGBRegressor(objective ='reg:squarederror',n_estimators=200, max_depth=20, random_state=42,\n                                          n_jobs = -1).fit(train_data, train_death)","359da7a6":"#model_Confirmed[\"new\"] = \n#model_Death[\"new\"] = ","95c95880":"#del model_Confirmed[\"Ridge\"] \n#del model_Death[\"Ridge\"] ","3d544d7b":"# \u0414\u0430\u043d\u043d\u044b\u0435 new_data - \u043d\u043e\u0432\u044b\u0435 \u0441 \u0434\u043d\u044f \u0425, \n# data_Russia - \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0420\u043e\u0441\u0441\u0438\u0438\n# data_Korea  - \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0424\u0440\u0430\u043d\u0446\u0438\u0438\ndata_pred = data_Korea \n\n# \u0422\u0438\u043f \u0433\u0440\u0430\u0444\u0438\u043a\u0430 0 - \u0431\u0435\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n# 1 - plot\n# 2 - scatter\nplot_type = 1\n\n#\u0421\u0442\u0440\u043e\u0438\u043c \u0434\u043b\u044f \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0438\u043b\u0438 \u0441\u043c\u0435\u0440\u0442\u0435\u0439\ndeath_bool = False \nif death_bool:\n  model = model_Death\nelse:\n  model = model_Confirmed","8024fafa":"pred_score(model, data_pred, death_bool, plot_type)","eca0a371":"# \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c?\ndays_prog = 30\n\nMatrix_confirmed,Matrix_Death ={},{}\nfor model_name in model_Confirmed:\n  new_data_list = new_data[new_data.days_mart == days_x]\n  labels = new_data_list.countries\n  #predictions_confirmed = [(10**new_data_list.pred_conf - 1).tolist()]\n  #predictions_Death = [(10**new_data_list.pred_deaths - 1).tolist()]\n  predictions_confirmed = []\n  predictions_Death = []\n  new_data_list = new_data_list.drop(['Province_State', 'ForecastId','confirmed','countries','deaths'], axis='columns')\n  for _ in range(days_prog):\n    #print(data.iloc[-10:-7,-5:])\n    prediction_confirmed = model_Confirmed[model_name].predict(new_data_list)\n    prediction_Death = model_Death[model_name].predict(new_data_list)\n\n    prediction_confirmed = prediction_confirmed*(0.95**(new_data_list.days_after_Quarantine.values\/10 - 1.4))\n    prediction_Death = prediction_Death*(0.95**(new_data_list.days_after_Quarantine.values\/10  - 1.4))\n    \n    prediction_confirmed = prediction_confirmed + new_data_list.pred_conf.values\n    prediction_Death = prediction_Death + new_data_list.pred_deaths.values\n    \n    \"\"\"bad_confirmed = prediction_confirmed<new_data_list[\"pred_conf\"]\n    prediction_confirmed[bad_confirmed] = new_data_list[bad_confirmed][\"pred_conf\"]+np.round(new_data_list[bad_confirmed][\"delta_conf1\"]*0.9)\n    bad_Death = prediction_Death<new_data_list[\"pred_deaths\"]\n    prediction_Death[bad_Death] = new_data_list[bad_Death][\"pred_deaths\"]+np.round(new_data_list[bad_Death][\"delta_deaths1\"]*0.9)\"\"\"\n    new_data_list[\"delta_conf2\"] = new_data_list[\"delta_conf1\"]\n    new_data_list[\"delta_conf1\"] = prediction_confirmed - new_data_list[\"pred_conf\"] \n    new_data_list[\"pred_conf\"] = prediction_confirmed\n\n    new_data_list[\"delta_deaths2\"] = new_data_list[\"delta_deaths1\"]\n    new_data_list[\"delta_deaths1\"] = prediction_Death - new_data_list[\"pred_deaths\"] \n    #data[data[\"delta_conf1\"] < 0].loc[:,\"delta_conf1\"] = 0\n    new_data_list[\"pred_deaths\"] = prediction_Death  \n    prediction_Death = 10**prediction_Death - 1\n    prediction_confirmed = 10**prediction_confirmed - 1  \n    new_data_list[[\"days_mart\", \"days\"]] += 1\n    \n    predictions_Death.append(np.round(prediction_Death))\n    predictions_confirmed.append(np.round(prediction_confirmed))\n  data_list = pd.date_range('2020-04-'+str(days_x-30), periods = days_prog, freq ='d')\n  data_list = data_list.strftime('%#m-%#d') \n  Matrix_confirmed[model_name] = pd.DataFrame(predictions_confirmed,columns = labels,index = data_list)\n  Matrix_Death[model_name] = pd.DataFrame(predictions_Death,columns = labels,index = data_list)\nMatrix_confirmed[\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435\"] = (Matrix_confirmed[\"Xgboost\"] + Matrix_confirmed[\"RandomForest\"] + Matrix_confirmed[\"Adaboost\"])\/\/3\nMatrix_Death[\"\u0421\u0440\u0435\u0434\u043d\u0435\u0435\"] = (Matrix_Death[\"Xgboost\"] + Matrix_Death[\"RandomForest\"] + Matrix_Death[\"Adaboost\"])\/\/3","c64e7296":"def plot_new(list_countries, Matrix, Death = False,subplot_x = 2):\n  dat2 = data2.copy()  \n  plt.rcParams['figure.figsize'] = [20, len(list_countries)*20\/subplot_x**2]\n  dat2.deaths = 10**(dat2.deaths + dat2.pred_deaths)- 1\n  dat2.confirmed = 10**(dat2.confirmed + dat2.pred_conf )- 1\n  for i, Country in enumerate(list_countries):\n    plt.subplot(len(list_countries)\/\/ subplot_x + 1, subplot_x, i+1)\n    yyy = dat2[(dat2.countries == Country)&(dat2.confirmed>0)&(dat2.days_mart>=days_x - 10)]\n    \n    if Death:\n      plt.plot(yyy.Date, yyy.deaths, label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")\n      plt.gca().set(xlabel='\u0414\u0430\u0442\u0430', ylabel='\u0421\u043c\u0435\u0440\u0442\u0438')\n    else:\n      plt.plot(yyy.Date, yyy.confirmed, label = \"\u0418\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\")\n      plt.gca().set(xlabel='\u0414\u0430\u0442\u0430', ylabel='\u0417\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u044f')\n    for name in Matrix:\n      yyy2 = Matrix[name][[Country]]\n      plt.plot(yyy2, label = name)\n    plt.title(Country)\n    plt.xticks(np.arange(0, (10+days_prog), ((10+days_prog)\/\/14)*subplot_x))\n    #plt.yticks(np.linspace(0,10+days_prog,30\/\/subplot_x))\n    plt.grid(True)\n    plt.legend()","68a64991":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u0430\u043d\nlist_countries = countries.index.to_list()[66:70]\n#list_countries = []\nlist_countries.extend([\"Russia\", \"Italy\"])\n\n# \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\nsubplot_x = 2\n\n#\u0421\u0442\u0440\u043e\u0438\u043c \u0434\u043b\u044f \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0438\u043b\u0438 \u0441\u043c\u0435\u0440\u0442\u0435\u0439\ndeath_bool = False \nif death_bool:\n  Matrix = Matrix_Death\nelse:\n  Matrix = Matrix_confirmed","48d1b22b":"plot_new(list_countries,Matrix,death_bool,subplot_x)","5f06d7ef":"ans = Matrix_confirmed[\"Adaboost\"].stack().reset_index()\nans_Death = Matrix_Death[\"Adaboost\"].stack().reset_index()\nans[\"prediction_deaths\"] = ans_Death[0]\nans[\"Province_State\"] =  new_data.groupby([\"countries\", \"Province_State\"]).max().reset_index()[\"Province_State\"].tolist()*30\nans.columns = ['Date','Country_Region','ConfirmedCases', 'Fatalities',\"Province_State\"]\nans['Date'] = '2020-'+ans['Date']\n\ntrain2 = train[(train.Date >= \"2020-04-02\")]\ntrain2['Province_State'] = train2['Province_State'].fillna(\"zzz\")\ntrain2.drop(['Id'], axis='columns',inplace=True)\nans = pd.concat([train2, ans],ignore_index=True)\nans['ConfirmedCases'] = ans['ConfirmedCases']\nans['Fatalities'] = ans['Fatalities']\nans = ans.sort_values(by=['Country_Region','Province_State','Date'])\nans['ForecastId'] = np.arange(1,len(ans)+1)\nans = ans[['ForecastId','ConfirmedCases','Fatalities']]\nans.to_csv('submission.csv', index=False)","8e2ee93a":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0443 \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438","467f3f5f":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c xgboost","b03a3011":"# \u041c\u043e\u0434\u0435\u043b\u0438","c8f18fd6":"## \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430 \u043f\u0440\u043e\u0448\u043b\u044b\u0439 \u0434\u0435\u043d\u044c","8c943353":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0441\u0432\u043e\u044e \u043c\u043e\u0434\u0435\u043b\u044c","93756082":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441","799f2cf2":"## \u0421\u0442\u0440\u043e\u0438\u043c","b3343336":"## \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","bc84af92":"# \u041e\u0442\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442","d165e18d":"# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","8e78fe29":"## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","cfc18e3e":"## \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","d141d387":"## \u0424\u0443\u043d\u043a\u0446\u0438\u044f. \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0438 \u0441\u0447\u0438\u0442\u0430\u0435\u043c MALE \u043e\u0448\u0438\u0431\u043a\u0443","118ae9b2":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0438 \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438","ff9cfa57":"## \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","2e28e54f":"# \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435","e1ef0a4f":"## \u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a","17ebffff":"## \u041e\u0431\u0443\u0447\u0430\u0435\u043c Adaboost Regressor","2df098a6":"# \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437","03ca5474":"# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435","ff33fd74":"## \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0433\u043e","872a48d3":"## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"}}