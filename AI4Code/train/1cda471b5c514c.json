{"cell_type":{"5f3f5688":"code","8153fe58":"code","66b04e72":"code","806a9893":"code","3d1ac094":"code","3ece22bb":"code","f5e4e416":"code","59366d57":"code","ef1b38b6":"code","4acb002d":"code","f0a23c9c":"code","56f29c54":"code","133c2d99":"code","9d7f6138":"code","fbdeace7":"code","fe3d00eb":"code","e90b762a":"code","f598eb4c":"code","826bae32":"code","9cfb4384":"code","d6cfa466":"code","e888b107":"code","25151870":"code","c7fa28b0":"code","ade1e37a":"code","4baf767c":"code","4edb3b40":"code","6e13e418":"code","30afc09d":"code","177a3086":"code","85ad2067":"code","af7200db":"code","029fc98f":"code","c40ce15e":"code","c35ac440":"code","bdf3d273":"code","fc34668e":"code","06003277":"code","b5759b01":"code","956ffa1b":"code","50b33970":"code","b64a9a7d":"code","1433fcb5":"code","6cdbff6c":"code","a9e35a81":"code","34226210":"code","ec816c85":"code","7e5798d2":"code","2048172a":"code","aa3dcd4c":"code","0854089b":"code","baa8b2eb":"code","a55e3a2a":"code","f12e356d":"code","c71f0bb1":"code","d97c2f95":"code","e2b1712b":"code","bc313383":"code","3b8eeee2":"code","b00b15b8":"code","a45d997b":"code","f721c5b3":"code","1145c7a6":"code","b1fc5d17":"code","103f3740":"code","0bc1ff70":"code","e816bf6f":"code","2d0ebd6a":"code","92e663dd":"code","5ad04c4c":"code","d844a47b":"code","0ab9f583":"code","2e4d302c":"code","4f7b5456":"code","25d6327d":"code","a31948ab":"code","7bf150d2":"code","15efcf8c":"code","c9fe77cd":"markdown","9c1696da":"markdown","d8f49ef6":"markdown","61b17bf7":"markdown","9b6f1d4e":"markdown","781f04fb":"markdown","f6599718":"markdown","e6bb1e6a":"markdown","f7ca36fb":"markdown","71f5663a":"markdown","7c7dd425":"markdown","3813daa4":"markdown","423d5a3a":"markdown","08a9ebf7":"markdown","9cf02ed3":"markdown","828894f0":"markdown","44e66599":"markdown","b9ca1782":"markdown","25d329a9":"markdown","840e65e0":"markdown","72f792e8":"markdown","cb260170":"markdown","3227e668":"markdown","45a5e1e9":"markdown"},"source":{"5f3f5688":"import numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline ","8153fe58":"#Graph Styling\n# https:\/\/tonysyu.github.io\/raw_content\/matplotlib-style-gallery\/gallery.html\nplt.style.use('seaborn-darkgrid')","66b04e72":"# By default Plot() function will draw a line chart.\nx = np.array([1,2,3,4,5,6])\ny = np.power(x,3)\nplt.plot(x,y)\nplt.show()","806a9893":"x = np.linspace(0, 10, 1000) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y)\nplt.show()","3d1ac094":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)","3ece22bb":"x = np.linspace(0, 10, 1000) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y)\nplt.show()","f5e4e416":"plt.style.use('seaborn-darkgrid')\n%matplotlib inline ","59366d57":"plt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 1000) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y)\nplt.show()","ef1b38b6":"# Solid blue line will be plotted using the argument \"b-\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 1000) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'b-')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","4acb002d":"# Solid red line will be plotted using the argument \"r-\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 1000) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'r-')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","f0a23c9c":"# Plot green dots using the argument \"go\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'go')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","56f29c54":"# Plotting red dots using the argument \"ro\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'ro')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","133c2d99":"# Plotting traingular dots using the argument \"r^\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'r^')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","9d7f6138":"# Plotting traingular dots using the argument \"rv\"\nplt.figure(figsize=(10,5))\nx = np.linspace(0, 10, 40) \ny = np.sin(x) # Sine Graph\nplt.plot(x,y,'rv')\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.show()","fbdeace7":"#Plotting multiple sets of data\nplt.figure(figsize=(10,5))\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends \nplt.plot(x,y2, \"r-\" ,label ='$y2 = x^3$')   # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend()\nplt.tight_layout()\nplt.show()","fe3d00eb":"#Plotting multiple sets of data\nx = np.linspace(0, 10, 2000)  \nplt.figure(figsize=(10,6))\nplt.plot(x,np.sin(x) , label = '$Sin(X)$')\nplt.plot(x,np.cos(x) , label = '$cos(X)$')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $  $ & $  $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right') # Legend will be placed at upper right position\nplt.show()","e90b762a":"#Changing the line style\nplt.figure(figsize=(10,5))\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends \nplt.plot(x, y2,color='red',linewidth=1.0,linestyle='--')   # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend(loc='upper center', fontsize='large')\nplt.show()","f598eb4c":"# Line Styling\nx = np.linspace(0, 10, 2000)  \nplt.figure(figsize=(16, 9))\nplt.plot(x,np.sin(x) , label = '$Sin(X) $  $ Dashed $' , linestyle='dashed')\nplt.plot(x+1,np.sin(x) , label = '$Sin(X) $  $ Dashdot  $' , linestyle='dashdot')\nplt.plot(x,np.cos(x) , label = '$cos(X) $ $ Solid $' , linestyle='solid')\nplt.plot(x+1,np.cos(x) , label = '$cos(X)$ $ Dotted $' , linestyle='dotted')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $  $ & $  $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right' , fontsize = 14 , bbox_to_anchor=(1.2, 1.0)) # Legend will be placed at upper right position\nplt.show()","826bae32":"# Line Styling\nx = np.linspace(0, 10, 2000)  \nplt.figure(figsize=(16, 9))\nplt.plot(x,np.sin(x) , label = '$Sin(X) $  $ Dashed $' , linestyle='--')\nplt.plot(x+1,np.sin(x) , label = '$Sin(X) $  $ Dashdot  $' , linestyle='-.')\nplt.plot(x,np.cos(x) , label = '$cos(X) $ $ Solid $' , linestyle='-')\nplt.plot(x+1,np.cos(x) , label = '$cos(X)$ $ Dotted $' , linestyle=':')\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $  $ & $  $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'upper right' , fontsize = 14 , bbox_to_anchor=(1.2, 1.0)) # Legend will be placed at upper right position\nplt.show()","9cfb4384":"# Shading Regions with fill_between() function\nx = np.linspace(0, 10, 2000)  \nplt.figure(figsize=(10,6))\nplt.plot(x,np.sin(x) , label = '$Sin(X)$')\nplt.plot(x,np.cos(x) , label = '$cos(X)$')\nplt.fill_between(x,0,np.sin(x))\nplt.fill_between(x,0,np.cos(x))\nplt.xlabel(r'$X$' , fontsize = 18)\nplt.ylabel(r'$Y$' , fontsize = 18)\nplt.title(\"$Sin(x) $  $ & $  $ Cos(x)$\" ,fontsize = 14)\nplt.legend(loc = 'lower left') # Legend will be placed at lower left position\nplt.show()","d6cfa466":"#Changing Legend position & font\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.plot(x,y1, \"b-\" , label = '$y1 = x^2$') # Setting up legends \nplt.plot(x,y2, \"r-\" ,label ='$y2 = x^3$')   # Setting up legends\nplt.xlabel(\"X - Axis\")\nplt.ylabel(\"Y - Axis\")\nplt.legend(loc='upper center', fontsize='large')\nplt.show()","e888b107":"# Changing line width\nplt.figure(figsize=(10,6))\nx= [1,2,3,4,5,6,7,8,9] \ny= [7,8,9,10,7,11,12,13,14]\ny2 = [7,7,7,7,7,7,7,7,7]\nplt.plot(x , y, linewidth = 4 ,label = 'Line -1')  # Changing line width\nplt.plot(x , y2, linewidth = 3,label = 'Line - 2')\nplt.xlabel('X Axis Label')\nplt.ylabel('Y Axis Label')\nplt.title ('Line Graph')\nplt.legend()\nplt.show()","25151870":"# Plot with Grid Lines\nplt.figure(figsize=(10,6))\nx= [1,2,3,4,5,6,7,8,9] \ny= [7,8,9,10,7,11,12,13,14]\ny2 = [7,7,7,7,7,7,7,7,7]\nplt.plot(x , y, linewidth = 4 ,label = 'Line -1')  # Changing line width\nplt.plot(x , y2, linewidth = 3,label = 'Line - 2')\nplt.xlabel('X Axis Label')\nplt.ylabel('Y Axis Label')\nplt.title ('Line Graph')\nplt.legend()\nplt.grid(b=True , linestyle = '-' , which = 'major' , color = 'grey') # Grid Lines\nplt.show()","c7fa28b0":"# Setting the background color\nx = np.array([1,2,3,4,5,6])\ny1 = np.power(x,2)\ny2 = np.power(x,3)\nplt.figure(figsize=(12,5)) # Setting the figure size\nax = plt.axes()\nax.set_facecolor(\"darkgrey\") # Setting the background color by using Hex code\nplt.plot(x,y1,\"bo-\", x,y2, \"ro-\")\nplt.xlabel(\"X - Axis\") \nplt.ylabel(\"Y - Axis\")\nplt.show()","ade1e37a":"# Display multiple plots in one figure (1 row & 2 columns)\nplt.figure(figsize=(14,6))\nx = np.linspace(0, 10, 100) \ny1 = np.sin(x) # Sine Graph\ny2 = np.cos(x) # cosine graph\nplt.subplot(1,2,1)\nplt.plot(x,y1)\nplt.subplot(1,2,2)\nplt.plot(x,y2)\nplt.show()","4baf767c":"# Display multiple plots in one figure (2 row & 1 columns)\n\nplt.figure(figsize=(12,6))\nx = np.linspace(0, 10, 100) \ny1 = np.sin(x) # Sine Graph\ny2 = np.cos(x) # cosine graph\n\nplt.subplot(2,1,1)\nplt.plot(x,y1, \"b-\")\n\nplt.subplot(2,1,2)\nplt.plot(x,y2, \"r-\")\nplt.tight_layout()\nplt.show()","4edb3b40":"# # Display multiple plots in one figure using subplots()\nx = np.arange(-50,50)\ny1 = np.power(x,2)\ny2 = np.power(x,3)\ny3 = np.sin(x)\ny4 = np.cos(x)\ny5 = np.tan(x)\ny6 = np.tanh(x)\ny7 = np.sinh(x)\ny8 = np.cosh(x)\ny9 = np.exp(x)\n\nfig1 , ax1 = plt.subplots(nrows=3,ncols=3 , figsize = (20,20)) # Create a figure and subplots\nax1[0,0].plot(x,y1,\"tab:blue\") # set the color of the line chart\nax1[0,0].set_title(\"Square Function\") # setting title of subplot\nax1[0,0].set_xlabel(r'$X$' , fontsize = 18) #Set the label for the x-axis\nax1[0,0].set_ylabel(r'$Y$' , fontsize = 18) #Set the label for the y-axis\n\n\nax1[0,1].plot(x,y2,\"tab:orange\")\nax1[0,1].set_title(\"Cubic Function\")\nax1[0,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[0,1].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[0,2].plot(x,y3,\"tab:green\")\nax1[0,2].set_title(\"Sine Function\")\nax1[0,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[0,2].set_ylabel(r'$Y$' , fontsize = 18)\n\n\nax1[1,0].plot(x,y4,\"b-\")\nax1[1,0].set_title(\"Cosine Function\")\nax1[1,0].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,0].set_ylabel(r'$Y$' , fontsize = 18)\n\n\nax1[1,1].plot(x,y5,\"r-\")\nax1[1,1].set_title(\"Tangent Function\")\nax1[1,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,1].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[1,2].plot(x,y6,\"g-\")\nax1[1,2].set_title(\"Hyperbolic Tangent\")\nax1[1,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[1,2].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[2,0].plot(x,y7,\"m-\")\nax1[2,0].set_title(\"Hyperbolic Sine\")\nax1[2,0].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,0].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[2,1].plot(x,y8,\"y-\")\nax1[2,1].set_title(\"Hyperbolic Cosine\")\nax1[2,1].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,1].set_ylabel(r'$Y$' , fontsize = 18)\n\nax1[2,2].plot(x,y9,\"k-\")\nax1[2,2].set_title(\"Exponential Function\")\nax1[2,2].set_xlabel(r'$X$' , fontsize = 18)\nax1[2,2].set_ylabel(r'$Y$' , fontsize = 18)\n\nplt.show()","6e13e418":"y = [[1,2,3,4,5] , [10,20,30,40,50],[60,70,80,90,100] ]\ncnt =0\nplt.figure(figsize=(10,6))\nfor i in y:\n    x1 = [10,20,30,40,50]\n    cnt +=1\n    print ('iteration Number :- {}'.format(cnt))\n    print ('X1 Value :- {}'.format(x1))\n    print('Y value (i) :- {}'.format(i))\n    plt.plot(x1,i)\nplt.show()","30afc09d":"id1 = np.arange(1,10)\nscore = np.arange(20,110,10)\nplt.bar(id1,score)\nplt.xlabel('Student ID')\nplt.ylabel('Score')\nplt.show()","177a3086":"id1 = np.arange(1,10)\nscore = np.arange(20,110,10)\nplt.figure(figsize=(8,5)) # Setting the figure size\nax = plt.axes()\nax.set_facecolor(\"#ECF0F1\") # Setting the background color by specifying the HEX Code\nplt.bar(id1,score,color = '#FFA726')\nplt.xlabel(r'$Student $ $ ID$')\nplt.ylabel(r'$Score$')\nplt.show()","85ad2067":"#Plotting multiple sets of data\nx1= [1,3,5,7] \nx2=[2,4,6,8]\ny1 = [7,7,7,7]\ny2= [17,18,29,40]\nplt.figure(figsize=(8,6))\nax = plt.axes()\nax.set_facecolor(\"white\")\nplt.bar(x1,y1,label = \"First\",color = '#42B300') # First set of data\nplt.bar(x2,y2,label = \"Second\",color = '#94E413') # Second set of data\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","af7200db":"# Horizontal Bar Chart\nAge = [28,33,43,45,57]\nName = [\"Asif\", \"Steve\", 'John', \"Ravi\", \"Basit\"]\nplt.barh(Name,Age, color =\"yellowgreen\")\nplt.show()","029fc98f":"# Changing the width of Bars\nnum1 = np.array([1,3,5,7,9])\nnum2 = np.array([2,4,6,8,10])\nplt.figure(figsize=(8,4))\nplt.bar(num1, num1**2, width=0.2 , color = '#FF6F00')\nplt.bar(num2, num2**2, width=0.2 , color = '#FFB300')\nplt.plot()","c40ce15e":"# Displaying values at the top of vertical bars\nnum1 = np.array([1,3,5,7,9])\nnum2 = np.array([2,4,6,8,10])\nplt.figure(figsize=(10,6))\nplt.bar(num1, num1**2, width=0.3 , color = '#FF6F00')\nplt.bar(num2, num2**2, width=0.3 , color = '#FFB300')\nfor x,y in zip(num1,num1**2):\n    plt.text(x, y+0.05, '%d' % y, ha='center' , va= 'bottom')\nfor x,y in zip(num2,num2**2):\n    plt.text(x, y+0.05, '%d' % y, ha='center' , va= 'bottom')\nplt.plot()","c35ac440":"x = np.arange(1,21)\nplt.figure(figsize=(16,8))\ny1 = np.random.uniform(0.1,0.7,20)\ny2 = np.random.uniform(0.1,0.7,20)\n\n\nplt.bar(x, +y1, facecolor='#C0CA33', edgecolor='white') #specify edgecolor by name\nplt.bar(x, -y2, facecolor='#FF9800', edgecolor='white')\n\nfor x,y in zip(x,y1):\n    plt.text(x, y+0.05, '%.2f' % y, ha='center' , va= 'bottom', fontsize = 10)\n    \nplt.xlim(0,21)\nplt.ylim(-1.25,+1.25)\nplt.show()","bdf3d273":"plt.style.use('seaborn-darkgrid')\nx1= ['Asif','Basit','Ravi','Minil'] \ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Open Tickets\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Closed Tickets\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","fc34668e":"plt.style.use('seaborn-darkgrid')\nx1= ['Asif','Basit','Ravi','Minil'] \ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Open Tickets\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Closed Tickets\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.bar(x1,y3,label = \"Cancelled Tickets\",width = 0.5 ,bottom = y1+y2 , color = '#F7DC6F')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","06003277":"# Grouped Bar Chart\n\nplt.figure(figsize=(7,9))\n\n# set width of bar\nbarWidth = 0.25\n \n# set height of bar\ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\n \n# Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\n\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Open')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Closed')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='Cancelled')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Assignee', fontweight='bold')\nplt.ylabel('Number of Tickets', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], ['Asif', 'Basit', 'Ravi', 'Minil'])\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()\nnp.arange(len(y1))","b5759b01":"plt.style.use('seaborn-darkgrid')\nx1= ['Asif','Basit','Ravi','Minil'] \ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(8,5))\nplt.barh(x1,y1,label = \"Open Tickets\",color = '#FF6F00')\nplt.barh(x1,y2,label = \"Closed Tickets\", left = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","956ffa1b":"# Displaying values in the stacked vertical bars using plt.text()\nplt.style.use('seaborn-darkgrid')\nx1= ['Asif','Basit','Ravi','Minil'] \ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(5,7))\nplt.bar(x1,y1,label = \"Open Tickets\",width = 0.5,color = '#FF6F00')\nplt.bar(x1,y2,label = \"Closed Tickets\",width = 0.5 ,bottom = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\nplt.title ('$Bar $ $ Chart$')\nfor x,y in zip(x1,y1):\n    plt.text(x, y-10, '%d' % y, ha='center' , va= 'bottom')\n\nfor x,y,z in zip(x1,y2,y1):\n    plt.text(x, y+z-10, '%d' % y, ha='center' , va= 'bottom')\n    \nplt.legend()\nplt.show()","50b33970":"# Displaying values in the stacked horizontal bars using plt.text()\nplt.style.use('seaborn-darkgrid')\nx1= ['Asif','Basit','Ravi','Minil'] \ny1= [17,18,29,40]\ny2 = [20,21,22,23]\nplt.figure(figsize=(8,5))\nplt.barh(x1,y1,label = \"Open Tickets\",color = '#FF6F00')\nplt.barh(x1,y2,label = \"Closed Tickets\", left = y1 , color = '#FFB300')\nplt.xlabel('$X$')\nplt.ylabel('$Y$')\n\nfor x,y in zip(x1,y1):\n    plt.text(y-10, x, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y,z in zip(x1,y2,y1):\n    plt.text(y+z-10, x, '%d' % y, ha='center' , va= 'bottom')\n    \nplt.title ('$Bar $ $ Chart$')\nplt.legend()\nplt.show()","b64a9a7d":"# Displaying values at the top of the Grouped Bar Chart using plt.text()\nplt.figure(figsize=(7,9))\n\n# set width of bar\nbarWidth = 0.25\n \n# set height of bar\ny1= np.array([17,18,29,40])\ny2 =np.array([20,21,22,23])\ny3 =np.array([5,9,11,12])\n \n# Set position of bar on X axis\npos1 = np.arange(len(y1))\npos2 = [x + barWidth for x in pos1]\npos3 = [x + barWidth for x in pos2]\n\n# Make the plot\nplt.bar(pos1, y1, color='#FBC02D', width=barWidth, label='Open')\nplt.bar(pos2, y2, color='#F57F17', width=barWidth, label='Closed')\nplt.bar(pos3, y3, color='#E65100', width=barWidth, label='Cancelled')\n\n# Add xticks on the middle of the group bars\nplt.xlabel('Assignee', fontweight='bold')\nplt.ylabel('Number of Tickets', fontweight='bold')\nplt.xticks([i + barWidth for i in range(len(y1))], ['Asif', 'Basit', 'Ravi', 'Minil'])\n\nfor x,y in zip(pos1,y1):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n    \nfor x,y in zip(pos2,y2):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nfor x,y in zip(pos3,y3):\n    plt.text(x, y, '%d' % y, ha='center' , va= 'bottom')\n\nplt.title ('$Grouped $  $ Bar $  $ Chart$')\n\n# Create legend & Show graphic\nplt.legend()\nplt.show()","1433fcb5":"x1 = np.array([250,150,350,252,450,550,455,358,158,355])\ny1 =np.array([40,50,80, 90, 100,50,60,88,54,45])\n\n\nx2 = np.array([200,100,300,220,400,500,450,380,180,350])\ny2 = np.array([400,500,800, 900, 1000,500,600,808,504,405])\n\n#Graph - 1\nplt.scatter(x1,y1)\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.show()\n\n#Graph - 2\nplt.scatter(x2,y2 ,color = 'r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.show()\n\n#Graph - 3\nplt.scatter(x1,y1 ,label = 'Class 1')\nplt.scatter(x2,y2 ,label = 'Class 2',color ='r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.legend()\nplt.show()\n\n#Graph - 4\nplt.scatter(x1,y1 ,label = 'Class 1',marker='o' , color = 'm')\nplt.scatter(x2,y2 ,label = 'Class 2',marker='v',color ='r')\nplt.xlabel('$Time $ $ Spent$' , fontsize = 12)\nplt.ylabel('$Score$' , fontsize = 12)\nplt.title ('Scatter Graph')\nplt.legend()\nplt.show()","6cdbff6c":"plt.figure(figsize=(10,6))\nx = np.random.normal(0,10,1000)\ny = np.random.normal(0,10,1000)\nplt.scatter(x,y)\nplt.show()","a9e35a81":"plt.figure(figsize=(8,6))\nx = np.random.random(10)\ny = np.random.random(10)\n# \"alpha\" is used for softnening colors\nplt.scatter(np.random.random(10),np.random.random(10),c='r', s=50 , alpha=0.6 , label = 'One' )\nplt.scatter(np.random.random(10),np.random.random(10),c='b', s=100 , alpha=0.6 , label = 'Two')\nplt.scatter(np.random.random(10),np.random.random(10),c='g', s=150 , alpha=0.6 , label = 'Three')\nplt.scatter(np.random.random(10),np.random.random(10),c='y', s=200 , alpha=0.6 , label = 'Four')\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='x-large')\nplt.show()","34226210":"# Changing label color\nplt.figure(figsize=(8,6))\nx = np.random.random(10)\ny = np.random.random(10)\n# \"alpha\" is used for softnening colors\nplt.rcParams['text.color'] = 'red' # Label Color\nplt.scatter(np.random.random(10),np.random.random(10),c='r', s=50 , alpha=0.6 , label = 'One' )\nplt.scatter(np.random.random(10),np.random.random(10),c='b', s=100 , alpha=0.6 , label = 'Two')\nplt.scatter(np.random.random(10),np.random.random(10),c='g', s=150 , alpha=0.6 , label = 'Three')\nplt.scatter(np.random.random(10),np.random.random(10),c='y', s=200 , alpha=0.6 , label = 'Four')\nplt.legend(bbox_to_anchor=(1.0, 1.0) , shadow=True, fontsize='x-large')\nplt.show()","ec816c85":"# Recover default matplotlib settings\nmpl.rcParams.update(mpl.rcParamsDefault)\n%matplotlib inline \nplt.style.use('seaborn-darkgrid')","7e5798d2":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45)\nplt.show()","2048172a":"# Display percentage in Pie Chart using autopct='%1.1f%%' \nplt.figure(figsize=(8,8))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , shadow='true', autopct='%1.1f%%', explode=[0,0 , 0 , 0])\nplt.show()","aa3dcd4c":"plt.figure(figsize=(8,8))\ntickets = [48 , 30 , 20 , 15]\ntotal = np.sum(tickets)\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\n\ndef val_per(x): \n    return '{:.2f}%\\n({:.0f})'.format(x, total*x\/100)\n\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , shadow='true', autopct=val_per, explode=[0,0 , 0 , 0])\nplt.show()","0854089b":"#Explode 4th Slice\nplt.figure(figsize=(8,8))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#7CB342','#C0CA33','#FFB300','#F57C00']\n# explode = [0,0,0,0.1] will explode the fourth slice\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%' , shadow='true', explode=[0,0 , 0 , 0.1])\nplt.show()","baa8b2eb":"#Explode 3rd & 4th Slice\nplt.figure(figsize=(8,8))\ntickets = [48 , 30 , 20 , 15]\nlabel = ['Low' , 'Medium' , 'High' , 'Critical']\ncolor = ['#7CB342','#C0CA33','#FFB300','#F57C00']\n# explode = [0,0,0.1,0.1] will explode the 3rd & 4th slice\nplt.pie (tickets , labels= label , colors= color , startangle=45 ,autopct='%1.1f%%', shadow='true', explode=[0,0 , 0.1 , 0.1])\nplt.legend()\nplt.show()","a55e3a2a":"fig = plt.figure(figsize=(20,6))\ntickets = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\n\nplt.subplot(1,3,1)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45)\n\n\nplt.subplot(1,3,2)\nplt.pie (tickets , labels= status , colors= colors , startangle=45)\n\n\nplt.subplot(1,3,3)\nplt.pie (tickets , labels= company , colors= colors , startangle=45)\n\n\nplt.show()","f12e356d":"fig = plt.figure(figsize=(20,13))\ntickets = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\n\n\nplt.subplot(2,3,1)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45 , autopct='%1.1f%%')\n\n\nplt.subplot(2,3,2)\nplt.pie (tickets , labels= status , colors= colors , startangle=45 , autopct='%1.1f%%')\n\n\nplt.subplot(2,3,3)\nplt.pie (tickets , labels= company , colors= colors , startangle=45 , autopct='%1.1f%%')\n\n\n\nplt.subplot(2,3,4)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45, autopct='%1.1f%%')\n\n\nplt.subplot(2,3,5)\nplt.pie (tickets , labels= status , colors= colors , startangle=45 ,autopct='%1.1f%%')\n\n\nplt.subplot(2,3,6)\nplt.pie (tickets , labels= company , colors= colors , startangle=45, autopct='%1.1f%%')\n\n\nplt.show()","c71f0bb1":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","d97c2f95":"# Changing background color\nfig = plt.figure(figsize=(9,9))\nfig.patch.set_facecolor('#DADADA') # Changing background color of donut chart\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='#DADADA') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","e2b1712b":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , explode=[0,0 , 0.0 , 0.1])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","bc313383":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , explode=[0,0 , 0.1 , 0.1])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","3b8eeee2":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , explode=[0.03,0.03 , 0.03 , 0.03])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","b00b15b8":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%', explode=[0,0 , 0 , 0])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","a45d997b":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , autopct='%1.1f%%', pctdistance=0.85 ,explode=[0,0 , 0 , 0])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","f721c5b3":"plt.figure(figsize=(9,9))\ntickets = [48 , 30 , 20 , 15]\ntotal = np.sum(tickets)\n\ndef val_per(x): \n    return '{:.2f}%\\n({:.0f})'.format(x, total*x\/100)\n\nlabels = ['Low' , 'Medium' , 'High' , 'Critical']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\nplt.pie (tickets , labels= labels , colors= colors , startangle=45 , autopct=val_per, pctdistance=0.85 ,explode=[0,0 , 0 , 0])\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","1145c7a6":"fig = plt.figure(figsize=(20,6))\ntickets = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\n\nplt.subplot(1,3,1)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(1,3,2)\nplt.pie (tickets , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(1,3,3)\nplt.pie (tickets , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()\n","b1fc5d17":"fig = plt.figure(figsize=(20,13))\ntickets = [48 , 30 , 20 , 15]\npriority = ['Low' , 'Medium' , 'High' , 'Critical']\nstatus = ['Resolved' , 'Cancelled' , 'Pending' , 'Assigned']\ncompany = ['IBM' , 'Microsoft', 'BMC' , 'Apple']\ncolors = ['#8BC34A','#D4E157','#FFB300','#FF7043']\n\nplt.subplot(2,3,1)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(2,3,2)\nplt.pie (tickets , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(2,3,3)\nplt.pie (tickets , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\n\nplt.subplot(2,3,4)\nplt.pie (tickets , labels= priority , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(2,3,5)\nplt.pie (tickets , labels= status , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.subplot(2,3,6)\nplt.pie (tickets , labels= company , colors= colors , startangle=45)\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()\n","103f3740":"x = np.random.normal(size = 2000)\nplt.hist(x, bins=40, color='yellowgreen')\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","0bc1ff70":"x = np.random.rand(2000)\nplt.hist(x, bins=30 ,color='#D4AC0D')\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","e816bf6f":"# Using Edge Color for readability\nplt.figure(figsize=(10,8))\nx = np.random.normal(size = 2000)\nplt.hist(x, bins=40, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","2d0ebd6a":"# Binning\nplt.figure(figsize=(10,8))\nx = np.random.normal(size = 2000)\nplt.hist(x, bins=30, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()\n\nplt.figure(figsize=(10,8))\nplt.hist(x, bins=20, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()\n\nplt.figure(figsize=(10,8))\nplt.hist(x, bins=10, color='yellowgreen' , edgecolor=\"#6A9662\")\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()\n","92e663dd":"plt.figure(figsize=(8,11))\nx = np.random.normal(-4,1,size = 800)\ny = np.random.normal(0,1.5,size = 800)\nz = np.random.normal(3.5,1,size = 800)\nplt.hist(x, bins=30, color='yellowgreen' , alpha=0.6)\nplt.hist(y, bins=30, color='#FF8F00' , alpha=0.6)\nplt.hist(z, bins=30, color='blue' , alpha=0.6)\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","5ad04c4c":"# Using Histogram to plot a cumulative distribution function\nplt.figure(figsize=(10,8))\nx = np.random.rand(2000)\nplt.hist(x, bins=30 ,color='#ffa41b' , edgecolor=\"#639a67\",cumulative=True)\nplt.gca().set(title='Histogram', ylabel='Frequency')\nplt.show()","d844a47b":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\nplt.plot(x,y)\nplt.fill_between(x, y)\nplt.show()","0ab9f583":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\n\nplt.fill_between( x, y, color=\"#baf1a1\")  # #Changing Fill color\nplt.plot(x, y, color='#7fcd91') # Color on edges\n \nplt.title(\"$ Area $  $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\n\n\nplt.show()","2e4d302c":"x = np.arange(1,31)\ny = np.random.normal(10,11,size=30)\ny = np.square(y)\nplt.figure(figsize=(16,6))\n\nplt.fill_between( x, y, color=\"#C8D700\" , alpha = 0.3) # Changing transperancy using Alpha parameter\nplt.plot(x, y, color='#36BD00')\n \nplt.title(\"$ Area $  $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\n\nplt.show()","4f7b5456":"x = np.arange(1,51)\ny = np.random.normal(1,5,size=50)\ny = np.square(y)\n\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#5ac8fa\", alpha=0.4)\nplt.plot(x, y, color=\"blue\", alpha=0.6) # Bold line on edges\nplt.title(\"$ Area $  $ chart $\" , fontsize = 16)\nplt.xlabel(\"$X$\" , fontsize = 16)\nplt.ylabel(\"$Y$\" , fontsize = 16)\nplt.show()\n\nplt.figure(figsize=(16,6))\nplt.fill_between( x, y, color=\"#5ac8fa\", alpha=0.4)\nplt.plot(x, y, color=\"blue\", alpha=0.2) # Less stronger line on edges\nplt.title(\"$ Area $  $ chart $\" , fontsize = 14)\nplt.xlabel(\"$X$\" , fontsize = 14)\nplt.ylabel(\"$Y$\" , fontsize = 14)\nplt.show()","25d6327d":"x=np.arange(1,6)\ny1 =  np.array([1,5,9,13,17])\ny2 = np.array([2,6,10,14,16])\ny3 = np.array([3,7,11,15,19])\ny4 = np.array([4,8,12,16,20])\n\nplt.figure(figsize=(8,6))\nplt.stackplot(x,y1,y2,y3,y4, labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()\n","a31948ab":"x=np.arange(1,6)\ny=[ [1,5,9,13,17], [2,6,10,14,16], [3,7,11,15,19] , [4,8,12,16,20] ]\nplt.figure(figsize=(8,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()","7bf150d2":"x=np.arange(1,7)\ny=[ [1,5,9,3,17,1], [2,6,10,4,16,2], [3,7,11,5,19,1] , [4,8,12,6,20,2] ]\nplt.figure(figsize=(10,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'])\nplt.legend(loc='upper left')\nplt.show()","15efcf8c":"x=np.arange(1,7)\ny=[ [1,5,9,3,17,1], [2,6,10,4,16,2], [3,7,11,5,19,1] , [4,8,12,6,20,2] ]\n\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y , labels=['Y1','Y2','Y3','Y4'] , colors= [\"#00b159\" , \"#ffc425\", \"#f37735\", \"#ff3b30\"])\nplt.legend(loc='upper left')\nplt.show()\n\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y, labels=['Y1','Y2','Y3','Y4'], colors= [\"#00b159\" , \"#ffc425\", \"#f37735\", \"#ff3b30\"], alpha=0.7 )\nplt.legend(loc='upper left')\nplt.show()\n\nplt.figure(figsize=(11,6))\nplt.stackplot(x,y, labels=['Y1','Y2','Y3','Y4'], colors= [\"#00b159\" , \"#ffc425\", \"#f37735\", \"#ff3b30\"], alpha=0.5 )\nplt.legend(loc='upper left')\nplt.show()","c9fe77cd":"#### Display multiple pie plots in one figure","9c1696da":"# Area Plot","d8f49ef6":"### Displaying values in Bar Charts","61b17bf7":"#### Plotting Multiple Histograms","9b6f1d4e":"#### Display multiple Donut plots in one figure","781f04fb":"# Scatter Graphs","f6599718":"# Donut plot","e6bb1e6a":"#### Display percentage and actual value in Pie Chart","f7ca36fb":"#### Changing Fill Color and its transperancy in Stacked Plot","71f5663a":"# Line Graphs","7c7dd425":"# Bar Graphs","3813daa4":"#### Changing Fill Color and its transperancy","423d5a3a":"#### Stacked Area plot","08a9ebf7":"### Binning","9cf02ed3":"# END","828894f0":"#### Changing Fill Color","44e66599":"### Stacked Vertical Bar","b9ca1782":"### Stacked Vertical Bar","25d329a9":"#### Explode Slice in Pie Chart","840e65e0":"#### Displaying percentage and actual values in Donut Chart","72f792e8":"### Grouped Bar Chart","cb260170":"# Pie Charts","3227e668":"# Histogram","45a5e1e9":"#### Explode Slice in Donut Chart"}}