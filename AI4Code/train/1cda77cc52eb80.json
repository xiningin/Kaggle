{"cell_type":{"aba77107":"code","c8ea699c":"code","eea0f042":"code","5e74db14":"code","27350d1f":"code","23b5369c":"code","4c68c3ee":"code","40531fb9":"code","d8303dac":"code","eb7381ea":"code","3b8a3ab7":"code","b37aa453":"code","53787cc7":"code","a5e4617b":"code","2a6af563":"code","8b494025":"code","e9a66c40":"code","ec000e77":"code","09c3ff2c":"code","101e43b0":"code","1c9fd321":"code","9bb3c904":"code","8122dad0":"markdown","56f4d420":"markdown","1c26fb7a":"markdown","c00902a0":"markdown","ea3d69d8":"markdown","9c0de3fc":"markdown","800725fd":"markdown","97b6d5a7":"markdown"},"source":{"aba77107":"# importing the essential libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ast\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error","c8ea699c":"train_data = pd.read_csv('\/kaggle\/input\/tmdb-box-office-prediction\/train.csv')\ntrain_data.head()","eea0f042":"# let us see the types of data in the training set\ntrain_data.dtypes","5e74db14":"training_data = train_data.drop(['id', 'belongs_to_collection', 'homepage', 'imdb_id', 'original_title',\n                                'overview', 'poster_path', 'release_date', 'tagline', 'title',\n                                'Keywords', 'cast', 'crew'], axis = 1)\ntraining_data.head()","27350d1f":"# checking the missing values\ntraining_data.isnull().sum()","23b5369c":"# filling the missing values\ntraining_data = training_data.fillna('0')\ntraining_data.isnull().sum()","4c68c3ee":"def feature_engineering(series):\n    # Feature engineering for genres\n    string_list = []\n    for i in series:\n        string = []\n        if (i != '0'):\n            o = ast.literal_eval(i)\n            for i in o:\n                for j in i.items():\n                    if (j[0] == 'name'):\n                        string.append(j[1])\n        string_list.append(' + '.join(string))\n    return LabelEncoder().fit_transform(string_list)","40531fb9":"# Feature Engineering\ntraining_data.index = train_data['id']\ntraining_data['genres'] = feature_engineering(training_data['genres'])\ntraining_data['production_companies'] = feature_engineering(training_data['production_companies'])\ntraining_data['production_countries'] = feature_engineering(training_data['production_countries'])\ntraining_data['spoken_languages'] = feature_engineering(training_data['spoken_languages'])\ntraining_data['original_language'] = LabelEncoder().fit_transform(training_data['original_language'])\ntraining_data['status'] = LabelEncoder().fit_transform(training_data['status'])","d8303dac":"training_data.head()","eb7381ea":"sns.heatmap(training_data.corr())","3b8a3ab7":"plt.plot(training_data['revenue'], training_data['budget'], 'o', label = 'revenue VS budget')\nplt.legend()","b37aa453":"plt.plot(training_data['revenue'], training_data['popularity'], 'o', label = 'revenue VS popularity')\nplt.legend()","53787cc7":"X = training_data.drop(['revenue'], axis = 1)\ny = training_data['revenue']\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2, random_state = 101)","a5e4617b":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\nvalidations = model.predict(X_val)\n\nprint(np.sqrt(mean_squared_error(validations, y_val)))","2a6af563":"test_data = pd.read_csv('\/kaggle\/input\/tmdb-box-office-prediction\/test.csv')\ntest_data.head()","8b494025":"testing_data = test_data.drop(['id', 'belongs_to_collection', 'homepage', 'imdb_id', 'original_title',\n                                'overview', 'poster_path', 'release_date', 'tagline', 'title',\n                                'Keywords', 'cast', 'crew'], axis = 1)","e9a66c40":"# filling the missing values\ntesting_data = testing_data.fillna('0')\ntesting_data.isnull().sum()","ec000e77":"# Feature Engineering\ntesting_data.index = test_data['id']\ntesting_data['genres'] = feature_engineering(testing_data['genres'])\ntesting_data['production_companies'] = feature_engineering(testing_data['production_companies'])\ntesting_data['production_countries'] = feature_engineering(testing_data['production_countries'])\ntesting_data['spoken_languages'] = feature_engineering(testing_data['spoken_languages'])\ntesting_data['original_language'] = LabelEncoder().fit_transform(testing_data['original_language'])\ntesting_data['status'] = LabelEncoder().fit_transform(testing_data['status'])","09c3ff2c":"testing_data.head()","101e43b0":"predictions = model.predict(testing_data)","1c9fd321":"# Now creating a dataset and submitting\nsubmission = pd.DataFrame({'id' : test_data['id'], 'revenue' : predictions})\nsubmission.head()","9bb3c904":"submission.to_csv('submission.csv', index = False)","8122dad0":"We can apply this logic to the dictionary values and convert them into numeric data using Label Encoder. \nI prefer to use Label Encoder instead of one hot encoder (get dummies) because label encoder uses a single feature and adds numbers in it. on the other hand get_dummies will create new columns.","56f4d420":"Hi, We will try how to do different methods of feature selection in this kernel. Thanks for your upvotes.","1c26fb7a":"Looks like we have a lot of feature engineering to do. \n1. the columns belongs to collectoins, imdb_id, homepage, original_title, overview, poster_path, realese_date, tagline, title, keywords, cast and crew can be removed (for now). We can deal with it later. \n2. We have features with values of dictionary. So we have to convert the dictionary with some other specific format.","c00902a0":"Budget and popularity are the most correlated features with the revenue. Let us see some more plotting (scatter)","ea3d69d8":"Thank you for viewing my kernel. Appreciate your time and encouragement. :)","9c0de3fc":"Looks like we need to handle outliers too. (I will work on it in the next version)","800725fd":"Now we will import test data","97b6d5a7":"Now we will visualize few features"}}