{"cell_type":{"efb34736":"code","23fa7d2b":"code","4c26f7be":"code","fdd2d9a2":"code","ce0fd709":"code","48e1e8fb":"code","70931653":"code","2a205e55":"code","c293f38c":"code","baa2bb3e":"code","c7bcf02c":"code","596a36b7":"code","1ce88518":"code","3e0bcefd":"code","4522e5a9":"code","ee0584a1":"code","467f1d4e":"code","88374a8a":"code","636559a7":"code","2e2945d3":"code","45c1150a":"code","42489223":"code","ab573c7a":"code","46391a4d":"code","413afd12":"code","04d19a45":"code","96ea8a40":"code","117676f8":"code","e910ae8c":"code","85f9a2a5":"code","41e8ab56":"code","5a84684a":"code","5a92b887":"code","d4de3309":"code","f51ada6c":"code","b31a708c":"code","f920fb34":"code","a4155ce4":"markdown","154d9712":"markdown","781220ea":"markdown","7d7e2cb5":"markdown","7f0caf63":"markdown","b636e287":"markdown","6afc5e23":"markdown","1c0ce989":"markdown"},"source":{"efb34736":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","23fa7d2b":"!pip install imutils","4c26f7be":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.layers import AveragePooling2D\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import img_to_array\nfrom tensorflow.keras.preprocessing.image import load_img\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom imutils import paths\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport os","fdd2d9a2":"INIT_LR = 1e-4\nEPOCHS = 14\nBS = 32","ce0fd709":"print(os.listdir(\"..\/input\"))","48e1e8fb":"imagePaths = list(paths.list_images('..\/input\/mask-dataset\/dataset\/with_mask'))\n\nprint(len(imagePaths))\n","70931653":"imagePaths = list(paths.list_images('..\/input\/mask-dataset\/dataset\/without_mask'))\n\nprint(len(imagePaths))\n","2a205e55":"imagePathsMask = list(paths.list_images('..\/input\/mask-dataset\/dataset\/with_mask'))\n\nprint(type(imagePathsMask))","c293f38c":"imagePathsWoMask = list(paths.list_images('..\/input\/mask-dataset\/dataset\/without_mask'))\n\nprint(type(imagePathsWoMask))","baa2bb3e":"import matplotlib.pyplot as plt\nk=1\nplt.figure(figsize=(16,16))\nsub=\"20\"\nfor x in range(0,5):\n  for y in range(0,4):\n    plt.subplot(5,4,k)\n    plt.title('Image'+str(k))\n    t=plt.imread(imagePathsMask[k])\n    plt.imshow(t)\n    k+=1","c7bcf02c":"import matplotlib.pyplot as plt\nk=1\nimagenumber=50\nplt.figure(figsize=(16,16))\nsub=\"20\"\nfor x in range(0,5):\n  for y in range(0,4):\n    plt.subplot(5,4,k)\n    plt.title('Image'+str(k))\n    t=plt.imread(imagePathsWoMask[imagenumber])\n    plt.imshow(t)\n    k+=1\n    imagenumber+=1","596a36b7":"data = []\nlabels = []","1ce88518":"print(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images('..\/input\/mask-dataset\/dataset\/with_mask'))\n# loop over the image paths\nfor imagePath in imagePaths:\n\t# label\n\tlabel =\"with\"\n\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\n\t# update the data and labels lists, respectively\n\tdata.append(image)\n\tlabels.append(label)\n\n","3e0bcefd":"print(\"[INFO] loading images...\")\nimagePaths = list(paths.list_images('..\/input\/mask-dataset\/dataset\/without_mask'))\n\nprint(len(imagePaths))\n# loop over the image paths\nfor imagePath in imagePaths:\n\t# extract the class label from the filename\n\tlabel =\"without\"# imagePath.split(os.path.sep)[-2]\n\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\n\t# update the data and labels lists, respectively\n\tdata.append(image)\n\tlabels.append(label)\n\n","4522e5a9":"# convert the data and labels to NumPy arrays\ndata = np.array(data, dtype=\"float32\")\nlabels = np.array(labels)","ee0584a1":"print(len(data))\nprint(len(labels))","467f1d4e":"lb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)","88374a8a":"labels.shape","636559a7":"# partition the data into training and testing splits using 75% of\n# the data for training and the remaining 25% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels,test_size=0.25, stratify=labels, random_state=42)\n","2e2945d3":"# construct the training image generator for data augmentation\naug = ImageDataGenerator(\n\trotation_range=20,\n\tzoom_range=0.15,\n\twidth_shift_range=0.2,\n\theight_shift_range=0.2,\n\tshear_range=0.15,\n\thorizontal_flip=True,\n\tfill_mode=\"nearest\")\n","45c1150a":"from tensorflow.keras.applications import VGG16\n# load the MobileNetV2 network, ensuring the head FC layer sets are\n# left off\nbaseModel = VGG16(weights='..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False,\n\tinput_tensor=Input(shape=(224, 224, 3)))\n\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False\n","42489223":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ 10)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=10)","ab573c7a":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\ntrainlabels=[]\nfor x,y in trainY:\n    if(x==1):\n        trainlabels.append(0)\n    else:\n        trainlabels.append(1)\n        \ntestlabels=[]\nfor x,y in testY:\n    if(x==1):\n        testlabels.append(0)\n    else:\n        testlabels.append(1)\n\nfrom sklearn.metrics import confusion_matrix,f1_score\nprint(confusion_matrix(testlabels, predIdxs))\nprint(\"f1_score\",f1_score(testlabels, predIdxs))\n        ","46391a4d":"# load the MobileNetV2 network, ensuring the head FC layer sets are\n# left off\nbaseModel = MobileNetV2(weights=\"imagenet\", include_top=False,\n\tinput_tensor=Input(shape=(224, 224, 3)))\n\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(7, 7))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False\n","413afd12":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ 10)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=10)","04d19a45":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\ntrainlabels=[]\nfor x,y in trainY:\n    if(x==1):\n        trainlabels.append(0)\n    else:\n        trainlabels.append(1)\n        \ntestlabels=[]\nfor x,y in testY:\n    if(x==1):\n        testlabels.append(0)\n    else:\n        testlabels.append(1)\n        \nfrom sklearn.metrics import confusion_matrix,f1_score\nprint(confusion_matrix(testlabels, predIdxs))\nprint(\"f1 score\",f1_score(testlabels, predIdxs))","96ea8a40":"from tensorflow.keras.applications.inception_v3 import InceptionV3\nimport tensorflow.keras.layers as layers\n# load the MobileNetV2 network, ensuring the head FC layer sets are\n# left off\nbaseModel = InceptionV3(weights='..\/input\/inceptionv3\/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5', include_top=False,\n\tinput_tensor=Input(shape=(224, 224, 3)))\n\n# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = layers.Flatten()(baseModel.output)\nheadModel = Dense(128, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(2, activation=\"softmax\")(headModel)\n\n# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)\n\n# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the first training process\nfor layer in baseModel.layers:\n\tlayer.trainable = False\n","117676f8":"# compile our model\nprint(\"[INFO] compiling model...\")\nopt = Adam(lr=INIT_LR, decay=INIT_LR \/ 10)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt,\n\tmetrics=[\"accuracy\"])\n\n# train the head of the network\nprint(\"[INFO] training head...\")\nH = model.fit(\n\taug.flow(trainX, trainY, batch_size=BS),\n\tsteps_per_epoch=len(trainX) \/\/ BS,\n\tvalidation_data=(testX, testY),\n\tvalidation_steps=len(testX) \/\/ BS,\n\tepochs=10)","e910ae8c":"# make predictions on the testing set\nprint(\"[INFO] evaluating network...\")\npredIdxs = model.predict(testX, batch_size=BS)\n\n# for each image in the testing set we need to find the index of the\n# label with corresponding largest predicted probability\npredIdxs = np.argmax(predIdxs, axis=1)\n\ntrainlabels=[]\nfor x,y in trainY:\n    if(x==1):\n        trainlabels.append(0)\n    else:\n        trainlabels.append(1)\n        \ntestlabels=[]\nfor x,y in testY:\n    if(x==1):\n        testlabels.append(0)\n    else:\n        testlabels.append(1)\n        \nfrom sklearn.metrics import confusion_matrix,f1_score\nprint(confusion_matrix(testlabels, predIdxs))\nprint(\"f1 score\",f1_score(testlabels, predIdxs))","85f9a2a5":"yt=model.predict(trainX, batch_size=BS)\nyt=np.argmax(yt,axis=1)","41e8ab56":"#roc_auc curve for training data\nimport sklearn.metrics as metrics\nfpr, tpr, threshold = metrics.roc_curve(trainlabels,yt )\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nimport matplotlib.pyplot as plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","5a84684a":"#roc_auc curve for test data\nimport sklearn.metrics as metrics\nfpr, tpr, threshold = metrics.roc_curve(testlabels, predIdxs)\nroc_auc = metrics.auc(fpr, tpr)\n\n# method I: plt\nimport matplotlib.pyplot as plt\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","5a92b887":"data=[]\ntest_image_path=list(paths.list_images('..\/input\/group-member'))\nprint(test_image_path)\nfor imagePath in test_image_path:\n\t# load the input image (224x224) and preprocess it\n\timage = load_img(imagePath, target_size=(224, 224))\n\timage = img_to_array(image)\n\timage = preprocess_input(image)\n\t# update the data and labels lists, respectively\n\tdata.append(image)\n","d4de3309":"data=np.array(data,dtype='float32')","f51ada6c":"pred=model.predict(data, batch_size=32)\npred = np.argmax(pred, axis=1)","b31a708c":"print(pred)","f920fb34":"import matplotlib.pyplot as plt\nk=1\nimagenumber=0\nplt.figure(figsize=(16,16))\nsub=\"20\"\nfor x in range(0,3):\n  for y in range(0,2):\n    plt.subplot(3,2,k)\n    s=\"\"\n    if(pred[k-1]==0):\n      s=\"Mask\"\n      c='g'\n    else:\n      s=\"NO Mask!!\"\n      c='r'\n    pob=plt.title(s)\n    plt.setp(pob,color=c)\n    t=plt.imread(test_image_path[imagenumber])\n    plt.imshow(t)\n    k+=1\n    imagenumber+=1\n","a4155ce4":"# Data Augmentation","154d9712":"Detecting mask is a must in the current world and can be deployed in biometrics automating different services avoiding the spread of coronavirus.\n\n\nA Mask Detector using different CNN Architectures and comparison of accuracies for different architectures.\n","781220ea":"![image.png](attachment:image.png)","7d7e2cb5":"# InceptionV3","7f0caf63":"# MobileNetv2","b636e287":"# VGG16","6afc5e23":"Inceptionv3 with pretained weights worked best with approx 0.99 f1 score.","1c0ce989":"# Evaluation of MobileNetV2 using Graphs"}}