{"cell_type":{"2a861868":"code","15f6eec6":"code","30070c02":"code","2b5a1cd7":"code","21b0d840":"code","b5ec19cb":"code","9d231e4a":"code","8372cc6a":"code","14d4d66c":"code","b72c6ef7":"code","bd0102c9":"code","96b6329b":"code","d68a7261":"code","4e58c871":"code","c45398ef":"code","a2989eb3":"code","e95d2ac1":"code","7cc029d9":"code","5036b213":"code","d929f793":"code","89dc4ee7":"code","43090580":"code","b1cfc929":"code","e1674cc1":"markdown","3b6786c6":"markdown","443c42c0":"markdown","52aed34e":"markdown","aa7b9f33":"markdown","d525116b":"markdown","03b83405":"markdown","e25ab6ef":"markdown","5ffcd376":"markdown"},"source":{"2a861868":"!ls ..\/input\/gan-getting-started","15f6eec6":"import os\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport cv2\nimport matplotlib.pyplot as plt","30070c02":"class ResidualBlock(nn.Module):\n    def __init__(self, in_channels):\n        super(ResidualBlock, self).__init__()\n        \n        self.block = nn.Sequential(\n            nn.ReflectionPad2d(1),\n            nn.Conv2d(in_channels, in_channels, 3), # \u0442\u043e\u0442 \u0436\u0435 \u0440\u0430\u0437\u043c\u0435\u0440 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435, \u0447\u0442\u043e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n            nn.InstanceNorm2d(in_channels),\n            nn.ReLU(inplace=True),\n            nn.ReflectionPad2d(1),\n            nn.Conv2d(in_channels, in_channels, 3),\n            nn.InstanceNorm2d(in_channels)\n        )\n    def forward(self, x):\n        return x + self.block(x)","2b5a1cd7":"class GeneratorResNet(nn.Module):\n    def __init__(self, in_channels, num_residual_blocks = 9):\n        super(GeneratorResNet, self).__init__()\n        \n#         initial convolution 3 * 256 * 256 -> 64 * 256 * 256\n        out_channels = 64\n        \n        self.conv = nn.Sequential(\n            nn.ReflectionPad2d(in_channels), # \u0447\u0442\u043e\u0431 \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0442\u0430\u043a\u0438\u043c \u0436\u0435 \u043f\u043e\u0441\u043b\u0435 \u0441\u043b\u0435\u0434 conv \u0441\u043b\u043e\u044f\n            nn.Conv2d(in_channels, out_channels, 2*in_channels + 1),\n            nn.InstanceNorm2d(out_channels),\n            nn.ReLU(inplace=True)\n        )\n        channels = out_channels\n        \n#         downsampling 64 * 256 * 256 -> 128 * 128 * 128 -> 256 * 64 * 64\n        self.down = []\n        for _ in range(2):\n            out_channels = channels * 2\n            self.down += [\n                nn.Conv2d(channels, out_channels, 3, stride = 2, padding = 1),\n                nn.InstanceNorm2d(out_channels),\n                nn.ReLU(inplace=True)\n            ]\n            channels = out_channels\n        self.down = nn.Sequential(*self.down)\n        \n#         transformation (ResNet) 256 * 64 * 64\n        self.trans = [ResidualBlock(channels) for _ in range(num_residual_blocks)]\n        self.trans = nn.Sequential(*self.trans)\n        \n        # upsamping 256 * 64 * 64 -> 128 * 128 * 128 -> 64 * 256 * 256\n        self.up = []\n        \n        for _ in range(2):\n            out_channels = channels \/\/ 2\n            self.up += [\n                nn.Upsample(scale_factor = 2),\n                nn.Conv2d(channels, out_channels, 3, stride= 1, padding = 1),\n                nn.InstanceNorm2d(out_channels),\n                nn.ReLU(inplace=True)\n            ]\n            channels = out_channels\n        self.up = nn.Sequential(*self.up)\n        \n        # Out layer  64*256*256 -> 3*256*256\n        self.out = nn.Sequential(\n            nn.ReflectionPad2d(in_channels),\n            nn.Conv2d(channels, in_channels, 2*in_channels+1),\n            nn.Tanh()\n        )\n        \n    def forward(self, x):\n        x = self.conv(x)\n        x = self.down(x)\n        x = self.trans(x)\n        x = self.up(x)\n        x = self.out(x)\n        \n        return x","21b0d840":"class Discriminator(nn.Module):\n    def __init__(self, in_channels):\n        super(Discriminator, self).__init__()\n        \n        self.model = nn.Sequential(\n#         why normalize = False?\n            *self.block(in_channels, 64, normalize = False), # 3 * 256 * 256 -> 64*128*128\n            *self.block(64, 128), # 64 * 128 * 128 -> 128*64*64\n            *self.block(128, 256),\n            *self.block(256, 512), # 256 * 32 * 32 -> 512*16*16\n            \n#             why padding = first then convolution?\n            nn.ZeroPad2d((1, 0, 1, 0)), # 512 * 16 * 16 -> 512 * 17 * 17\n            nn.Conv2d(512, 1, 4, padding = 1) # 512 * 17 * 17 -> 1 * 16 * 16\n        )\n        self.scale_factor = 16\n        \n    @staticmethod\n    def block(in_channels, out_channels, normalize = True):\n        layers = [nn.Conv2d(in_channels, out_channels, 4 , stride = 2, padding = 1)]\n        if normalize:\n            layers.append(nn.InstanceNorm2d(out_channels))\n        layers.append(nn.LeakyReLU(0.2, inplace=True))\n        \n        return layers\n    \n    def forward(self, x):\n        return self.model(x)","b5ec19cb":"criterion_GAN = nn.MSELoss()\ncriterion_cycle = nn.L1Loss()\ncriterion_identity = nn.L1Loss()","9d231e4a":"G_AB = GeneratorResNet(3, num_residual_blocks=9)\nD_B  = Discriminator(3)\n\nG_BA = GeneratorResNet(3, num_residual_blocks=9)\nD_A = Discriminator(3)","8372cc6a":"cuda = torch.cuda.is_available()\nprint('cuda:', cuda)\nif cuda:\n    G_AB = G_AB.cuda()\n    G_BA = G_BA.cuda()\n    \n    D_A = D_A.cuda()\n    D_B = D_B.cuda()\n    \n    criterion_GAN = criterion_GAN.cuda()\n    criterion_cycle = criterion_cycle.cuda()\n    criterion_identity = criterion_identity.cuda()","14d4d66c":"import itertools\nlr = 0.0002\nb1 = 0.5\nb2 = 0.999\n\noptimizer_G = torch.optim.Adam(\n    itertools.chain(G_AB.parameters(), G_BA.parameters()), lr=lr, betas=(b1, b2)\n)\n\noptimizer_D_A = torch.optim.Adam(\n    D_A.parameters(), lr=lr, betas=(b1, b2)\n)\n\noptimizer_D_B = torch.optim.Adam(\n    D_B.parameters(), lr=lr, betas=(b1, b2)\n)","b72c6ef7":"n_epoches = 100\ndecay_epoch = 20\n\nlambda_func = lambda epoch: 1 - max(0, epoch-decay_epoch)\/(n_epoches-decay_epoch)\n\nlr_scheduler_G = torch.optim.lr_scheduler.LambdaLR(optimizer_G, lr_lambda=lambda_func)\n\nlr_scheduler_D_A = torch.optim.lr_scheduler.LambdaLR(optimizer_D_A, lr_lambda=lambda_func)\nlr_scheduler_D_B = torch.optim.lr_scheduler.LambdaLR(optimizer_D_B, lr_lambda=lambda_func)","bd0102c9":"from torch.utils.data import Dataset, DataLoader\nfrom PIL import Image\n\n\nclass ImageDataset(Dataset):\n    def __init__(self, data_dir, mode='train', transforms=None):\n        A_dir = os.path.join(data_dir, 'monet_jpg')\n        B_dir = os.path.join(data_dir, 'photo_jpg')\n        \n        if mode == 'train':\n            self.files_A = [os.path.join(A_dir, name) for name in sorted(os.listdir(A_dir))[:250]]\n            self.files_B = [os.path.join(B_dir, name) for name in sorted(os.listdir(B_dir))[:250]]\n        elif mode == 'test':\n            self.files_A = [os.path.join(A_dir, name) for name in sorted(os.listdir(A_dir))[250:]]\n            self.files_B = [os.path.join(B_dir, name) for name in sorted(os.listdir(B_dir))[250:301]]\n        \n        self.transforms = transforms\n        \n    def __len__(self):\n        return len(self.files_A)\n    \n    def __getitem__(self, index):\n        file_A = self.files_A[index]\n        file_B = self.files_B[index]\n        \n        img_A = Image.open(file_A)\n        img_B = Image.open(file_B)\n        \n        if self.transforms is not None:\n            img_A = self.transforms(img_A)\n            img_B = self.transforms(img_B)\n        \n        return img_A, img_B\n    ","96b6329b":"import torchvision.transforms as transforms\n\ndata_dir = '\/kaggle\/input\/gan-getting-started'\n\ntransforms_ = transforms.Compose([\n   # transforms.Resize(int(256*1.12), Image.BICUBIC),\n    #transforms.RandomCrop(256, 256),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])\nbatch_size = 5\n\ntrainloader = DataLoader(\n    ImageDataset(data_dir, mode='train', transforms=transforms_),\n    batch_size = batch_size,\n    shuffle = True,\n    num_workers = 2\n)\n\ntestloader = DataLoader(\n    ImageDataset(data_dir, mode='test', transforms=transforms_),\n    batch_size = batch_size,\n    shuffle = False,\n    num_workers = 2\n)","d68a7261":"from torchvision.utils import make_grid\n\nTensor = torch.cuda.FloatTensor if cuda else torch.Tensor\n\ndef sample_images(real_A, real_B, figside=1.5):\n    assert real_A.size() == real_B.size(), 'The image size for two domains must be the same'\n    \n    G_AB.eval()\n    G_BA.eval()\n    \n    real_A = real_A.type(Tensor)\n    fake_B = G_AB(real_A).detach()\n    real_B = real_B.type(Tensor)\n    fake_A = G_BA(real_B).detach()\n    \n    nrows = real_A.size(0)\n    real_A = make_grid(real_A, nrow=nrows, normalize=True)\n    fake_B = make_grid(fake_B, nrow=nrows, normalize=True)\n    real_B = make_grid(real_B, nrow=nrows, normalize=True)\n    fake_A = make_grid(fake_A, nrow=nrows, normalize=True)\n    \n    image_grid = torch.cat((real_A, fake_B, real_B, fake_A), 1).cpu().permute(1, 2, 0)\n    \n    plt.figure(figsize=(figside*nrows, figside*4))\n    plt.imshow(image_grid)\n    plt.axis('off')\n    plt.show()","4e58c871":"real_A, real_B = next(iter(testloader))\nsample_images(real_A, real_B)","c45398ef":"real_A.size()","a2989eb3":"out_shape = [real_A.size(0), 1, real_A.size(2)\/\/D_A.scale_factor, real_A.size(3)\/\/D_A.scale_factor]","e95d2ac1":"real_A.size()","7cc029d9":"out_shape","5036b213":"for epoch in range(n_epoches):\n    for i, (real_A, real_B) in enumerate(trainloader):\n        real_A, real_B = real_A.type(Tensor), real_B.type(Tensor)\n        \n        # groud truth\n        \n        valid = torch.ones(out_shape).type(Tensor)\n        fake = torch.zeros(out_shape).type(Tensor)\n        \n        \"\"\"Train Generators\"\"\"\n        # set to training mode in the begining, beacause sample_images will set it to eval mode\n        G_AB.train()\n        G_BA.train()\n        \n        optimizer_G.zero_grad()\n        \n        fake_B = G_AB(real_A)\n        fake_A = G_BA(real_B)\n        \n        # identity loss\n        loss_id_A = criterion_identity(fake_B, real_A)\n        loss_id_B = criterion_identity(fake_A, real_B)\n        loss_identity = (loss_id_A + loss_id_B) \/ 2\n        \n        # GAN loss, train G to make D think it's true\n        loss_GAN_AB = criterion_GAN(D_B(fake_B), valid) \n        loss_GAN_BA = criterion_GAN(D_A(fake_A), valid)\n        loss_GAN = (loss_GAN_AB + loss_GAN_BA) \/ 2\n        \n        # cycle loss\n        recov_A = G_BA(fake_B)\n        recov_B = G_AB(fake_A)\n        loss_cycle_A = criterion_cycle(recov_A, real_A)\n        loss_cycle_B = criterion_cycle(recov_B, real_B)\n        loss_cycle = (loss_cycle_A + loss_cycle_B) \/ 2\n        \n        # G totol loss\n        loss_G = 5.0*loss_identity + loss_GAN + 10.0*loss_cycle\n        \n        loss_G.backward()\n        optimizer_G.step()\n        \n        \"\"\"Train Discriminator A\"\"\"\n        optimizer_D_A.zero_grad()\n        \n        loss_real = criterion_GAN(D_A(real_A), valid)\n        loss_fake = criterion_GAN(D_A(fake_A.detach()), fake)\n        loss_D_A = (loss_real + loss_fake) \/ 2\n        \n        loss_D_A.backward()\n        optimizer_D_A.step()\n        \n        \"\"\"Train Discriminator B\"\"\"\n        optimizer_D_B.zero_grad()\n        \n        loss_real = criterion_GAN(D_B(real_B), valid)\n        loss_fake = criterion_GAN(D_B(fake_B.detach()), fake)\n        loss_D_B = (loss_real + loss_fake) \/ 2\n        \n        loss_D_B.backward()\n        optimizer_D_B.step()\n    \n    lr_scheduler_G.step()\n    lr_scheduler_D_A.step()\n    lr_scheduler_D_B.step()\n    \n    # test\n    if (epoch+1) % 10 == 0:\n        test_real_A, test_real_B = next(iter(testloader))\n        sample_images(test_real_A, test_real_B)\n\n        loss_D = (loss_D_A + loss_D_B) \/ 2\n        print(f'[Epoch {epoch+1}\/{n_epoches}]')\n        print(f'[G loss: {loss_G.item()} | identity: {loss_identity.item()} GAN: {loss_GAN.item()} cycle: {loss_cycle.item()}]')\n        print(f'[D loss: {loss_D.item()} | D_A: {loss_D_A.item()} D_B: {loss_D_B.item()}]')   ","d929f793":"photo_dir = os.path.join(data_dir, 'photo_jpg')\nfiles = [os.path.join(photo_dir, name) for name in os.listdir(photo_dir)]\nlen(files)","89dc4ee7":"save_dir = '..\/images'\nif not os.path.exists(save_dir):\n    os.makedirs(save_dir)","43090580":"generate_transforms = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n])\n\nto_image = transforms.ToPILImage()\n\nG_BA.eval()\nfor i in range(0, len(files), batch_size):\n    # read images\n    imgs = []\n    for j in range(i, min(len(files), i+batch_size)):\n        img = Image.open(files[j])\n        img = generate_transforms(img)\n        imgs.append(img)\n    imgs = torch.stack(imgs, 0).type(Tensor)\n    \n    # generate\n    fake_imgs = G_BA(imgs).detach().cpu()\n    \n    # save\n    for j in range(fake_imgs.size(0)):\n        img = fake_imgs[j].squeeze().permute(1, 2, 0)\n        img_arr = img.numpy()\n        img_arr = (img_arr - np.min(img_arr)) * 255 \/ (np.max(img_arr) - np.min(img_arr))\n        img_arr = img_arr.astype(np.uint8)\n        \n        img = to_image(img_arr)\n        _, name = os.path.split(files[i+j])\n        img.save(os.path.join(save_dir, name))","b1cfc929":"import shutil\nshutil.make_archive(\"\/kaggle\/working\/images\", 'zip', \"\/kaggle\/images\")","e1674cc1":"\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440","3b6786c6":"step 3. Define loss ","443c42c0":"Step 7. DataLoader","52aed34e":"step 4. Initialize G and D","aa7b9f33":"Step 6. Learning Rate Scheduler Setting","d525116b":"Step 5. Configure Optimizers","03b83405":"step 9. Training","e25ab6ef":"Step 10. Generate Images","5ffcd376":"Step 8. Sample images to show"}}