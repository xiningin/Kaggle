{"cell_type":{"b4199216":"code","eb349481":"code","129c6c34":"code","739aa1e1":"code","56653072":"code","0c9bfd27":"code","308bf43b":"code","a6ee459b":"code","075ee041":"code","243232a4":"code","f3b80991":"code","633d3d67":"code","64d987eb":"code","f703f3b1":"code","d09e12ce":"code","f78b6576":"code","07969858":"code","78039866":"code","24315037":"code","73220563":"code","b5f0e627":"code","3d7fae4e":"code","c60aa0a0":"code","7e9c94bf":"code","75ea618f":"code","eb07cada":"code","0648e7be":"code","da2d61ac":"code","37f21fee":"code","ac78f7fc":"code","304843ce":"code","f93d1df5":"code","ae2d9102":"code","5699388e":"code","79d245b9":"code","ed6436cf":"code","c1f82da7":"code","344109d6":"code","f05d4dd2":"code","a5c63567":"code","62f45efe":"code","08915665":"markdown","d800d209":"markdown","d3c439f9":"markdown","1ad4f3ea":"markdown"},"source":{"b4199216":"import pandas as pd\nimport numpy as np\nimport random as rnd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier","eb349481":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ncombine = [train_df,test_df]","129c6c34":"train_df.head()","739aa1e1":"train_df.info()","56653072":"train_df.describe()","0c9bfd27":"train_df.describe(include=['O'])","308bf43b":"train_df[['Pclass', 'Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by='Survived',ascending=False)","a6ee459b":"train_df[['Sex', 'Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by='Survived',ascending=False)","075ee041":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","243232a4":"train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)","f3b80991":"age_factor = sns.FacetGrid(train_df, col = 'Survived')\nage_factor.map(plt.hist,'Age',bins=20)","633d3d67":"port_factor = sns.FacetGrid(train_df, row = 'Embarked', size=3.2, aspect=1.6)\nport_factor.map(sns.pointplot,'Pclass','Survived','Sex',palette = 'deep')\nport_factor.add_legend()","64d987eb":"fare_factor = sns.FacetGrid(train_df, row=\"Embarked\", col=\"Survived\", size=2.2, aspect=1.6)\nfare_factor.map(sns.barplot, 'Sex', 'Fare', alpha=.5,ci=None)\nfare_factor.add_legend()","f703f3b1":"train_df.head()","d09e12ce":"train_df = train_df.drop(['Ticket','Cabin'],axis=1)\ntest_df = test_df.drop(['Ticket','Cabin'],axis=1)\ncombine = [train_df,test_df]","f78b6576":"for dataset in combine:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.',expand=False)\n\npd.crosstab(train_df['Title'],train_df['Sex'])","07969858":"for dataset in combine:\n    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col',\\\n \t'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Other')\n    \n    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n\ntrain_df[['Title','Survived']].groupby(['Title'],as_index = False).mean()","78039866":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\n\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","24315037":"train_df.head(20)","73220563":"train_df = train_df.drop(['Name','PassengerId'],axis=1)\ntest_df = test_df.drop(['Name'],axis=1)\ncombine = [train_df,test_df]\ntrain_df.shape, test_df.shape","b5f0e627":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\ntrain_df.head()","3d7fae4e":"age_factor = sns.FacetGrid(train_df, row = 'Pclass', col='Sex', size=2.2, aspect=1.6)\nage_factor.map(plt.hist,'Age',alpha=.5, bins=20)\nage_factor.add_legend()","c60aa0a0":"guess_ages = np.zeros((2,3))\n\nfor dataset in combine:\n    for i in range(0, 2):\n        for j in range(0, 3):\n            guess_df = dataset[(dataset['Sex'] == i) & \\\n                                  (dataset['Pclass'] == j+1)]['Age'].dropna()\n\n            # age_mean = guess_df.mean()\n            # age_std = guess_df.std()\n            # age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std)\n\n            age_guess = guess_df.median()\n\n            # Convert random age float to nearest .5 age\n            guess_ages[i,j] = int( age_guess\/0.5 + 0.5 ) * 0.5\n            \n    for i in range(0, 2):\n        for j in range(0, 3):\n            dataset.loc[ (dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1),\\\n                    'Age'] = guess_ages[i,j]\n\n    dataset['Age'] = dataset['Age'].astype(int)\n\ntrain_df.head()","7e9c94bf":"train_df['AgeBand'] = pd.cut(train_df['Age'],5)\ntrain_df[['AgeBand','Survived']].groupby(['AgeBand'],as_index = False).mean().sort_values(by = 'AgeBand', ascending = True)","75ea618f":"for dataset in combine:    \n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age']\ntrain_df.head()","eb07cada":"train_df = train_df.drop(['AgeBand'], axis = 1)\ncombine = [train_df, test_df]\ntrain_df.head()","0648e7be":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp']+dataset['Parch']+1\n\ntrain_df[['FamilySize','Survived']].groupby(['FamilySize'],as_index = False).mean().sort_values(by = 'FamilySize', ascending = False)","da2d61ac":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n\ntrain_df[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean()","37f21fee":"train_df = train_df.drop(['FamilySize','SibSp','Parch'], axis = 1)\ntest_df = test_df.drop(['FamilySize','SibSp','Parch'], axis = 1)\ncombine = [train_df, test_df]\ntrain_df.head()","ac78f7fc":"freq_port = train_df.Embarked.dropna().mode()[0]\nfreq_port","304843ce":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n    ","f93d1df5":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\n\ntrain_df.head()","ae2d9102":"test_df['Fare'].fillna(test_df['Fare'].dropna().median(),inplace = True)\ntest_df.describe()","5699388e":"train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\ntrain_df[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean().sort_values(by='FareBand', ascending=True)","79d245b9":" for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)\n\ntrain_df = train_df.drop(['FareBand'], axis=1)\ncombine = [train_df, test_df]\n    ","ed6436cf":"train_df.head()","c1f82da7":"test_df.head()","344109d6":"X_train = train_df.drop(['Survived'],axis = 1)\nY_train = train_df['Survived']\nX_test = test_df.drop(['PassengerId'],axis=1)\nX_train.shape, X_test.shape, Y_train.shape","f05d4dd2":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train,Y_train)\nmodel.score(X_train,Y_train)","a5c63567":"Y_pred = model.predict(X_test)\nY_pred","62f45efe":"submission = pd.DataFrame({\"PassengerId\":test_df['PassengerId'],\"Survived\":Y_pred})\nsubmission.to_csv('MySubmission.csv',index = False)","08915665":"### The Random Forest Classifier\n\nRandom forest, like its name implies, consists of a large number of individual decision trees that operate as an ensemble. Each individual tree in the random forest spits out a class prediction and the class with the most votes becomes our model\u2019s prediction.\n\nA large number of relatively uncorrelated models (trees) operating as a committee will outperform any of the individual constituent models.","d800d209":"# Creating Model","d3c439f9":"# Correcting data","1ad4f3ea":" # Completing features with missing or null values\n \n More accurate way of guessing missing values is to use other correlated features. In our case we note correlation among Age, Gender, and Pclass. Guess Age values using median values for Age across sets of Pclass and Gender feature combinations. So, median Age for Pclass=1 and Gender=0, Pclass=1 and Gender=1, and so on..."}}