{"cell_type":{"6152e7a5":"code","d4508271":"code","0429e50e":"code","9cde6071":"code","cf1ffbab":"code","6d8912b2":"code","e46051f8":"code","d491d385":"code","75fc57f2":"code","d30b8a4d":"code","258ae4bf":"code","b7bababd":"code","db3de9a1":"code","db5bf0f4":"code","d0b71c67":"code","e032431f":"code","59b9d79c":"code","677133f4":"markdown","0332baff":"markdown","10359997":"markdown","0e30f285":"markdown","6bba7a56":"markdown","e1bc583c":"markdown","dd644cfb":"markdown"},"source":{"6152e7a5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d4508271":"import matplotlib.pyplot as plt\nimport seaborn as sns","0429e50e":"df_train = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/30-days-of-ml\/test.csv\")","9cde6071":"df_train.head()","cf1ffbab":"df_train.info(), df_test.info()","6d8912b2":"# Comparing the datasets length\nfig, ax = plt.subplots(figsize=(5, 5))\npie = ax.pie([len(df_train), len(df_test)],\n             labels=[\"Train dataset\", \"Test dataset\"],\n             colors=[\"lightblue\", \"green\"],\n             textprops={\"fontsize\": 15},\n             autopct='%1.1f%%')\nax.set_title(\"Dataset length comparison\", fontsize=18)\n\nplt.show()","e46051f8":"obj_col = df_train.select_dtypes(['object']).columns","d491d385":"for col in obj_col:\n    print(df_train[col].unique())","75fc57f2":"for col in obj_col:\n    print(df_test[col].unique())","d30b8a4d":"# Bars position should be numerical because there will be arithmetical operations with them\nbars_pos = np.arange(len(obj_col))\n\nwidth=0.3\nfig, ax = plt.subplots(figsize=(10, 4))\n# Making two bar objects. One is on the left from bar position and the other one is on the right\nbars1 = ax.bar(bars_pos-width\/2,\n               df_train[obj_col].nunique().values,\n               width=width,\n               color=\"darkblue\", edgecolor=\"black\")\nbars2 = ax.bar(bars_pos+width\/2,\n               df_test[obj_col].nunique().values,\n               width=width,\n               color=\"steelblue\", edgecolor=\"black\")\nax.set_title(\"Amount of values in categorical features Train and Test\", fontsize=12, pad=15)\nax.set_xlabel(\"Categorical feature\", fontsize=12, labelpad=15)\nax.set_ylabel(\"Amount of values\", fontsize=12, labelpad=15)\nax.set_xticks(bars_pos)\nax.set_xticklabels(obj_col, fontsize=12)\nax.tick_params(axis=\"y\", labelsize=12)\nax.grid(axis=\"y\")\nplt.margins(0.01, 0.05)","258ae4bf":"for col in obj_col:\n    fig, ax = plt.subplots(figsize=(10, 4))\n    sns.set_style('darkgrid')\n    sns.countplot(data= df_train, x=col)\n    ax.set_ylabel(\"Amount of values\", fontsize=14, labelpad=15)\n    ax.set_xlabel(col, fontsize=14, labelpad=10)\n    ax.margins(0.025, 0.12)\n    ax.grid(axis=\"y\")\n    plt.show()","b7bababd":"df_train.describe().T","db3de9a1":"# Plot dataframe\ndf = df_train.drop(\"id\", axis=1)\n\n# Encoding categorical features with OrdinalEncoder\nfor col in obj_col:\n    encoder = OrdinalEncoder()\n    df[col] = encoder.fit_transform(np.array(df[col]).reshape(-1, 1))\n\n# Calculatin correlation values\ndf = df.corr().round(2)\n\n# Mask to hide upper-right part of plot as it is a duplicate\nmask = np.zeros_like(df)\nmask[np.triu_indices_from(mask)] = True\n\n# Making a plot\nplt.figure(figsize=(14,14))\nax = sns.heatmap(df, annot=True, mask=mask, cmap=\"RdBu\", annot_kws={\"weight\": \"normal\", \"fontsize\":9})\nax.set_title(\"Feature correlation heatmap\", fontsize=17)\nplt.setp(ax.get_xticklabels(), rotation=90, ha=\"right\",\n         rotation_mode=\"anchor\", weight=\"normal\")\nplt.setp(ax.get_yticklabels(), weight=\"normal\",\n         rotation_mode=\"anchor\", rotation=0, ha=\"right\")\nplt.show();","db5bf0f4":"fig, ax = plt.subplots(figsize=(16, 8))\nsns.set_style('darkgrid')\nsns.histplot(x=df_train[\"target\"], bins=50, kde=True)\nax.set_title(\"Target distribution\", fontsize=20, pad=15)\nax.set_ylabel(\"Amount of values\", fontsize=14, labelpad=15)\nax.set_xlabel(\"Target value\", fontsize=14, labelpad=10)\nax.margins(0.025, 0.12)\nax.grid(axis=\"y\")\nplt.show()","d0b71c67":"fig, ax = plt.subplots(figsize=(16, 8))\nsns.histplot(data=df_train.iloc[:,11:24], bins=10)\nax.set_title(\"Cont Features distribution\", fontsize=20, pad=15)\nax.set_ylabel(\"Amount of values\", fontsize=14, labelpad=15)\nax.set_xlabel(\"values\", fontsize=14, labelpad=15)\nax.margins(0.025, 0.12)\nax.grid(axis=\"y\")\nplt.show()","e032431f":"fig, ax = plt.subplots(figsize=(10, 5))\nbars = sns.boxplot(data=df_train[\"target\"], orient='h')\nax.set_title(\"Target distribution\", fontsize=20, pad=15)\nax.set_ylabel(\"Amount of values\", fontsize=14, labelpad=15)\nax.set_xlabel(\"Target value\", fontsize=14, labelpad=10)\nax.margins(0.025, 0.12)\nax.grid(axis=\"y\")\nplt.show()","59b9d79c":"fig = plt.figure(figsize = (15, 8))\nax = sns.boxplot(data=df_train.drop(['id', 'target'], axis=1),palette='pastel')\nax.set_xticklabels(ax.get_xticklabels(),rotation=-90,  fontsize = 10)\nplt.xlabel('Continuous Features')\nplt.ylabel('Values')","677133f4":"The correlation beteween target is very low","0332baff":"target, cont0, cont6, cont8 have some outliers","10359997":"**Distribituion of data**","0e30f285":"**There are two types of data and no missing values, both in train and test data:**\n* Categorical \n* Numeric\n","6bba7a56":"# Load the Data","e1bc583c":"The categorical features have the same amount of values in train and test data, but the values are different","dd644cfb":"# EDA"}}