{"cell_type":{"03a53f9d":"code","a2997db8":"code","9d78d485":"code","54e124ab":"code","44ed79e3":"code","285ab409":"code","05554bd6":"code","001bc8ac":"code","985ac6c4":"code","a976b599":"code","c3e8760d":"code","b528970b":"code","5512866d":"code","b0cfed55":"code","f176946f":"code","170f538e":"code","eefb1c08":"code","ca9d8450":"code","c2122c3c":"code","30727aca":"code","bd261dc3":"code","fa2ffb16":"code","f52a4424":"code","0a8469c9":"code","a4e6a9e4":"code","60ec5c9c":"code","d3e5b44a":"code","cdb26360":"code","8537eac1":"code","4b36dcfa":"code","a4f8ae05":"code","27f721c0":"markdown","abbc6097":"markdown","8f1f5a86":"markdown","6a75004b":"markdown","3c421d0b":"markdown","957e7db9":"markdown","7e2e2b75":"markdown","a1ce92f6":"markdown","63d875fc":"markdown"},"source":{"03a53f9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a2997db8":"df=pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')","9d78d485":"df.head()","54e124ab":"df.shape","44ed79e3":"df.isnull().sum().sum()","285ab409":"df.corr()","05554bd6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(16,9))\nsns.heatmap(df.corr(),annot=True,cmap='RdYlGn')","001bc8ac":"X=df.iloc[:,3:13]\nY=df.iloc[:,13]","985ac6c4":"geography=pd.get_dummies(X['Geography'],drop_first=True)#drop_first=True skips first column","a976b599":"geography","c3e8760d":"gender=pd.get_dummies(X['Gender'],drop_first=True)\ngender","b528970b":"X=X.drop(['Geography','Gender'],axis=1)\nX.head()","5512866d":"X=pd.concat([X,geography,gender],axis=1)\nX.head()","b0cfed55":"params={\n    'learning_rate':[0.05,0.1,0.15,0.2,0.25,0.3],\n    'max_depth':[3,4,5,6,8,10,12,15],\n    'min_child_weight':[1,3,5,7],\n    'gamma':[0.0,0.1,0.2,0.3,0.4],\n    'colsample_bytree':[0.1,0.4,0.5,0.7]\n}","f176946f":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom xgboost import XGBClassifier","170f538e":"from datetime import datetime\ndef timer(start_time=None):\n    if not start_time:\n        start_time=datetime.now()\n        return start_time\n    elif start_time:\n        thour,temp_sec=divmod((datetime.now()-start_time).total_seconds(),3600)\n        tmin,tsec=divmod(temp_sec,60)\n        print('\\n Time taken: %i hours, %i mins and %s secs'%(thour,tmin,round(tsec,2)))","eefb1c08":"clf=XGBClassifier()","ca9d8450":"random_search=RandomizedSearchCV(clf,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=1)","c2122c3c":"start_time=timer(None)\nrandom_search.fit(X,Y)\ntimer(start_time)","30727aca":"random_search.best_estimator_","bd261dc3":"random_search.best_params_","fa2ffb16":"clf=XGBClassifier(min_child_weight= 5,\n max_depth= 5,\n learning_rate= 0.15,\n gamma= 0.0,\n colsample_bytree= 0.5)","f52a4424":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(clf,X,Y,cv=10)","0a8469c9":"score","a4e6a9e4":"score.mean()","60ec5c9c":"from sklearn.model_selection import cross_val_score\nscore=cross_val_score(clf,X,Y,cv=10)","d3e5b44a":"score","cdb26360":"score.mean()","8537eac1":"X.shape,Y.shape","4b36dcfa":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import accuracy_score\naccuracy=[]\nskf=StratifiedKFold(n_splits=10,random_state=None)\nskf.split(X,Y)\nfor train_index,test_index in skf.split(X,Y):\n    print(\"Train: \",train_index,\"Validation: \",test_index)\n    x1_train,x1_test=X.iloc[train_index],X.iloc[test_index]\n    y1_train,y1_test=Y.iloc[train_index],Y.iloc[test_index]\n    clf.fit(x1_train,y1_train)\n    predictions=clf.predict(x1_test)\n    score=accuracy_score(predictions,y1_test)\n    accuracy.append(score)\nprint(accuracy)","a4f8ae05":"# skf.split()\nimport numpy as np\nnp.array(accuracy).mean()","27f721c0":"**Load the Dataset**","abbc6097":"**Stratified K fold Cross Validation**","8f1f5a86":"### **Conversion of Categorical to Numerical**","6a75004b":"**K-Fold**","3c421d0b":"### **Missing Values**","957e7db9":"### **Hyperparameter Tuning**","7e2e2b75":"# **Cross Validation**","a1ce92f6":"### **Spliting of Data**","63d875fc":"There is no missing value"}}