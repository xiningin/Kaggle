{"cell_type":{"00c67974":"code","90a9bfcf":"code","49c71716":"code","dbbf6fbf":"code","71e37d3a":"code","91a6f635":"code","4573a883":"code","89fab42f":"code","c5739fc4":"code","f15047d1":"code","51265f47":"code","396bb76d":"code","2f575073":"code","838e62fe":"code","89e6c863":"code","0aa29bae":"code","05a9126f":"code","ff36a70d":"code","de7c656d":"code","fa8b94da":"code","d2871e7a":"code","d3d7ac2d":"code","7e28dfe7":"code","c721387a":"code","b982a978":"code","23a4ebc6":"code","16b3d0a5":"code","a2806461":"code","e21c02c6":"code","3cd59a8a":"code","c32539b5":"code","edfc055d":"code","2b843b9d":"code","5986318a":"code","f79283bc":"code","aeb6a803":"markdown","17639eb7":"markdown","1d16e614":"markdown"},"source":{"00c67974":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","90a9bfcf":"from sklearn.linear_model import LinearRegression\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","49c71716":"train_data = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")","dbbf6fbf":"train_data['batting_points'] = train_data['Runs'] + train_data['Boundaries'] + 2 * train_data['Six'] + 8 * train_data['Fifty'] + 16 * train_data['Hundred'] - 2 * train_data['Duck']\ntrain_data['bowling_points'] = 25 * train_data['Wickets'] + 8 * train_data['4W_Haul'] + 16 * train_data['5W_Haul'] + 8 * train_data['Maidens']\ntrain_data['total'] = train_data['batting_points'] + train_data['bowling_points']\ntrain_data","71e37d3a":"train_data.isnull().value_counts","91a6f635":"train_data.shape","4573a883":"import seaborn as sns \nimport matplotlib.pyplot as plt \nplt.figure(figsize = (15,10))\nsns.scatterplot(x ='Batting_Points', y = 'Bowling_Points', data=train_data)","89fab42f":"m20 = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2020.csv\")\nm20 = m20[['match_id', 'city', 'date']]\nm20.head()","c5739fc4":"m0819 = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Matches IPL 2008-2019.csv\")\nm0819 = m0819[['match_id', 'city', 'date']]\nm0819.head()","f15047d1":"matches = pd.merge(m0819, m20, on = 'match_id', how = 'outer' )\nmatches","51265f47":"train_data[['match_id','Player_name']] = train_data['Id'].str.split('_',expand = True) \ntrain_data['match_id'] = train_data['match_id'].astype(int)\ntrain_data = pd.merge(train_data, matches, on = 'match_id', how = 'inner')\ntrain_data","396bb76d":"d1 = train_data[(train_data['Player_name'] == 'Bipul Sharma')]\nd1","2f575073":"train_data.shape","838e62fe":"d2 = train_data.groupby(['match_id','Player_name'])['total'].sum().reset_index()\nd2","89e6c863":"d2 = d2[(d2['Player_name'] == 'Bipul Sharma')]\nd2","0aa29bae":"pi_p = train_data[['Player_name','match_id','total']]\npi_p = pi_p.groupby(['Player_name','match_id']).sum().reset_index()\npi_p","05a9126f":"pi_p[pi_p['Player_name'] == 'TA Boult'].head()","ff36a70d":"pi_l = train_data[['match_id','Player_name','Total Points']]\npi_l = pi_l.groupby(['match_id','Player_name']).sum().reset_index()\npi_l","de7c656d":"#calculate RMSE\nrmse = sqrt(mean_squared_error(pi_l['Total Points'], pi_p['total'] )) ","fa8b94da":"rmse","d2871e7a":"train_data1= pd.read_csv(\"..\/input\/ipl-2020-player-performance\/Training.csv\")","d3d7ac2d":"\nx = np.array(train_data1.iloc[:,1:-1])\ny = np.array(train_data1.iloc[:,-1])","7e28dfe7":"x","c721387a":"\ntrain_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.2,random_state=0)\nsc = StandardScaler()\nsc.fit(train_x)\ntrain_x = sc.transform(train_x)\ntest_x = sc.transform(test_x)","b982a978":"\nlr = LinearRegression()\nlr.fit(train_x,train_y)","23a4ebc6":"y_pred = lr.predict(test_x)\nrmse = np.sqrt(mean_squared_error(y_pred,test_y))\nrmse","16b3d0a5":"y_pred = np.round(y_pred)\ny_pred","a2806461":"sample = pd.read_csv(\"..\/input\/ipl-2020-player-performance\/sample_submission.csv\")\nsample[['match_id', 'Player_name']] = sample['Id'].str.split(\"_\", expand = True)\nsample","e21c02c6":"sample['Player_name'].isnull().values.sum()","3cd59a8a":"players = sample['Player_name'].unique().tolist()\ndf2 = pi_p[pi_p['Player_name'].isin(players)]\ndf2\n","c32539b5":"df = pd.DataFrame()\ndf['match_id'] = sample['match_id']\ndf['Player_name'] = sample['Player_name']\ndf['Total Points'] = pi_l[\"Total Points\"]\ndf['Id'] = df['match_id']+'_'+df['Player_name']\ndf","edfc055d":"df.isnull().values.sum()","2b843b9d":"dt=pd.DataFrame()\ndt['Id'] = df['Id']\ndt['Total Points'] = df['Total Points'] \ndt","5986318a":"#print(dt[(dt['Id' ]== '1216519_AM Rahane')])\n","f79283bc":"dt.to_csv('score.csv', index=False)","aeb6a803":"**Predicted Value**","17639eb7":"The **train_data** now contain players who played in IPL 2020 only!!!!","1d16e614":"**Root Mean Square **"}}