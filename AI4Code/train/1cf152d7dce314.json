{"cell_type":{"9794bd61":"code","fe6733ba":"code","13b34eb6":"code","64ed1855":"code","ed211fb6":"code","7921f394":"code","9626be71":"code","a816829e":"code","87d179df":"code","c14ee6c9":"code","6ec6e6ef":"code","90ec9fe7":"code","f1e1214b":"code","9ed3ee7c":"code","5eec061a":"code","1ec58004":"code","7297c17c":"code","da412201":"code","0d4cc8fa":"code","d719ed9b":"code","2502628f":"code","dbacbe41":"code","b5a7191f":"code","ef74fa70":"code","0574c5db":"code","63ba616a":"code","69337892":"code","1d745185":"code","067a1a36":"code","078f43bd":"code","9511dfee":"code","ce8459ce":"code","f4cefbc9":"code","cb33d074":"code","a7502e1c":"code","c5895375":"code","903c775d":"code","a0bfed37":"code","2aa4dd99":"code","03d8d5a2":"code","dadc0fc9":"code","4f9d9709":"code","7545db8f":"code","bca28c82":"code","5c9efebc":"code","45fa70c6":"code","5a692bab":"code","147b8c1b":"code","e42b9431":"code","78314889":"code","48f36d1b":"code","18172f62":"code","a9ab6159":"markdown","59d5e07e":"markdown","e71024ce":"markdown","bb2496f4":"markdown","1656d6d3":"markdown","dba48878":"markdown","a2e58475":"markdown","815e0c8f":"markdown","eb0de2db":"markdown"},"source":{"9794bd61":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fe6733ba":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nsns.set_style(style='darkgrid')\npd.set_option('display.max_columns',None)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","13b34eb6":"train = pd.read_csv('..\/input\/bank-loan2\/madfhantr.csv')\ntest = pd.read_csv('..\/input\/bank-loan2\/madhante.csv')","64ed1855":"train.head()","ed211fb6":"train_og = train.copy()\ntest_og = test.copy()","7921f394":"train.columns","9626be71":"test.columns","a816829e":"train.info()","87d179df":"print('Train:',train.shape)\nprint('Test:',test.shape)","c14ee6c9":"train['Loan_Status'].value_counts(normalize=True)","6ec6e6ef":"train['Loan_Status'].value_counts(normalize=True).plot.bar()","90ec9fe7":"sns.countplot(train['Loan_Status'])","f1e1214b":"fts = train.select_dtypes('object')\nfts.columns","9ed3ee7c":"for col in ['Gender', 'Married', 'Dependents', 'Education','Self_Employed','Property_Area']:\n    train[col].value_counts(normalize=True).plot.bar(title=col)\n    plt.show()","5eec061a":"sns.distplot(train['ApplicantIncome']);","1ec58004":"train['ApplicantIncome'].plot.box(figsize=(15,10))","7297c17c":"train.boxplot(column='ApplicantIncome',by = 'Education')\nplt.suptitle('')\nplt.show()","da412201":"train.boxplot(column='ApplicantIncome',by = 'Gender')\nplt.suptitle('')\nplt.show()","0d4cc8fa":"sns.distplot(train['CoapplicantIncome']);","d719ed9b":"train.boxplot(column='LoanAmount',by = 'Education')\nplt.suptitle('')\nplt.show()","2502628f":"gender = pd.crosstab(train['Gender'],train['Loan_Status'])\ngender","dbacbe41":"gender.div(gender.sum(1).astype(float),axis=0)","b5a7191f":"gender.div(gender.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True);","ef74fa70":"married = pd.crosstab(train['Married'],train['Loan_Status'])\ndependents = pd.crosstab(train['Dependents'],train['Loan_Status'])\nedu = pd.crosstab(train['Education'],train['Loan_Status'])\ns_employed = pd.crosstab(train['Self_Employed'],train['Loan_Status'])\nmarried.div(married.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()\ndependents.div(dependents.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()\nedu.div(edu.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()\ns_employed.div(s_employed.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()","0574c5db":"credit_hist = pd.crosstab(train['Credit_History'],train['Loan_Status'])\nproperty_area = pd.crosstab(train['Property_Area'],train['Loan_Status'])\ncredit_hist.div(credit_hist.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()\nproperty_area.div(property_area.sum(1),axis=0).plot(kind='bar',stacked=True);\nplt.show()","63ba616a":"train.groupby('Loan_Status')['ApplicantIncome'].mean().plot.bar();","69337892":"bins =[0,2500,4000,6000,81000]\ngroup = ['Low','Average','High','Very High']\ntrain['Income_bin'] = pd.cut(train['ApplicantIncome'],bins,labels=group)","1d745185":"train.sample(5)","067a1a36":"income_bin = pd.crosstab(train['Income_bin'],train['Loan_Status'])\nincome_bin.div(income_bin.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True);\nplt.xlabel('Applicant Income')\nplt.ylabel('Percentage');","078f43bd":"bins =[0,1000,3000,42000]\ngroup = ['Low','Average','High']\ntrain['Coapplicant_income'] = pd.cut(train['CoapplicantIncome'],bins,labels=group)","9511dfee":"train.sample(5)","ce8459ce":"coapp_income = pd.crosstab(train['Coapplicant_income'],train['Loan_Status'])\ncoapp_income.div(coapp_income.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True);\nplt.xlabel('CoApplicant Income')\nplt.ylabel('Percentage');","f4cefbc9":"train['Total_Income']=train['ApplicantIncome']+train['CoapplicantIncome']\nbins=[0,2500,4000,6000,81000]\ngroup=['Low','Average','High', 'Very high']\ntrain['Total_Income_bin']=pd.cut(train['Total_Income'],bins,labels=group)\nTotal_Income_bin=pd.crosstab(train['Total_Income_bin'],train['Loan_Status'])\nTotal_Income_bin.div(Total_Income_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\nplt.xlabel('Total_Income')\nP = plt.ylabel('Percentage')","cb33d074":"bins=[0,100,200,700]\ngroup=['Low','Average','High']\ntrain['LoanAmount_bin']=pd.cut(train['LoanAmount'],bins,labels=group)\nLoanAmount_bin=pd.crosstab(train['LoanAmount_bin'],train['Loan_Status'])\nLoanAmount_bin.div(LoanAmount_bin.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True)\nplt.xlabel('LoanAmount')\nP = plt.ylabel('Percentage')","a7502e1c":"train.columns","c5895375":"train=train.drop(['Income_bin', 'Coapplicant_income', 'LoanAmount_bin', 'Total_Income_bin', 'Total_Income'], axis=1)\ntrain['Dependents'].replace('3+', 3,inplace=True) \ntest['Dependents'].replace('3+', 3,inplace=True)\ntrain['Loan_Status'].replace('N', 0,inplace=True) \ntrain['Loan_Status'].replace('Y', 1,inplace=True)","903c775d":"matrix = train.corr()\nf, ax = plt.subplots(figsize=(9, 6))\nsns.heatmap(matrix, vmax=.8, square=True, cmap=\"BuPu\");","a0bfed37":"train.isnull().sum()","2aa4dd99":"train['Gender'].fillna(train['Gender'].mode()[0], inplace=True)\ntrain['Married'].fillna(train['Married'].mode()[0], inplace=True)\ntrain['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)\ntrain['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)\ntrain['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)","03d8d5a2":"train['Loan_Amount_Term'].value_counts()","dadc0fc9":"train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)","4f9d9709":"train['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)","7545db8f":"train.isnull().sum()","bca28c82":"test['Gender'].fillna(train['Gender'].mode()[0], inplace=True)\ntest['Dependents'].fillna(train['Dependents'].mode()[0], inplace=True)\ntest['Self_Employed'].fillna(train['Self_Employed'].mode()[0], inplace=True)\ntest['Credit_History'].fillna(train['Credit_History'].mode()[0], inplace=True)\ntest['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mode()[0], inplace=True)\ntest['LoanAmount'].fillna(train['LoanAmount'].median(), inplace=True)","5c9efebc":"train['LoanAmount_log'] = np.log(train['LoanAmount'])\ntrain['LoanAmount_log'].hist(bins=20)\ntest['LoanAmount_log'] = np.log(test['LoanAmount'])","45fa70c6":"train=train.drop('Loan_ID',axis=1) \ntest=test.drop('Loan_ID',axis=1)","5a692bab":"X = train.drop('Loan_Status',1) \ny = train.Loan_Status","147b8c1b":"X=pd.get_dummies(X) \ntrain=pd.get_dummies(train) \ntest=pd.get_dummies(test)","e42b9431":"from sklearn.model_selection import train_test_split\nx_train, x_cv, y_train, y_cv = train_test_split(X,y, test_size =0.3)","78314889":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score\nmodel = LogisticRegression() \nmodel.fit(x_train, y_train)","48f36d1b":"pred_cv = model.predict(x_cv)","18172f62":"accuracy_score(y_cv,pred_cv)","a9ab6159":"It can be inferred that the proportion of male and female applicant is more or less same for both approved and unapproved loans","59d5e07e":"We see that the most correlated variables are (ApplicantIncome - LoanAmount) and (Credit_History - Loan_Status). LoanAmount is also correlated with CoapplicantIncome.","e71024ce":"# Bivariate Analysis","bb2496f4":"It can be seen that the proportion of approved loans is higher for Low and Average Loan Amount as compared to that of High Loan Amount which supports our hypothesis in which we considered that the chances of loan approval will be high when the loan amount is less.","1656d6d3":"We can see that Proportion of loans getting approved for applicants having low Total_Income is very less as compared to that of applicants with Average, High and Very High Income.","dba48878":"### Categorical Values","a2e58475":"# Univariate Analysis","815e0c8f":"### Numeric values","eb0de2db":"We don't see any change in the mean income so we'll try to make some bins"}}