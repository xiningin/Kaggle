{"cell_type":{"c55f30d3":"code","ccf543c5":"code","e7453ca0":"code","805a365a":"code","e9baafee":"code","c4a8147c":"code","d8f0fe10":"code","29e2d03e":"code","779723ca":"code","e6597c8d":"code","7f4e3f06":"code","bdec882a":"code","279bc682":"code","0e75187b":"code","f712664a":"code","690d7089":"code","40ae29c3":"code","57758208":"code","008b27c3":"code","f54c32b4":"code","e74f01ce":"code","cc808743":"code","8cbb2c56":"code","1bc0a722":"code","60992eb3":"code","9e51ef97":"code","0d39e47a":"code","d4702ce0":"code","4cd758d0":"code","e4ca4e40":"code","41b96272":"code","d773bd2c":"code","447696a6":"code","ffe182ea":"code","1676d79e":"code","e9ffc5a1":"code","1a3bed67":"code","770ba417":"code","ff323f5f":"code","163e850b":"markdown","6821c11f":"markdown","db5a6c12":"markdown","aa2432ff":"markdown","59fce602":"markdown","3bef7d6b":"markdown","4ce84593":"markdown","63bdcdee":"markdown","5b869fcc":"markdown","36ce4dee":"markdown","701ba8f5":"markdown","83dc6fdc":"markdown","afbc534d":"markdown","7006de72":"markdown"},"source":{"c55f30d3":"import pandas as pd\nimport numpy as np\n\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","ccf543c5":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv',header=0)\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', header = 0)\nsample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv',header = 0)","e7453ca0":"pd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)","805a365a":"train.head()","e9baafee":"test.head()","c4a8147c":"sample_submission.head()","d8f0fe10":"print(train.shape)\nprint(test.shape)\nprint(sample_submission.shape)","29e2d03e":"train['SalePrice'].describe()","779723ca":"#histogram\nsns.distplot(train['SalePrice']);","e6597c8d":"#scatter plot grlivarea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","7f4e3f06":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","bdec882a":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","279bc682":"var = 'YearBuilt'\ndata = pd.concat([train['SalePrice'], train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","0e75187b":"sns.set(font_scale=1)\ncorrelation_train=train.corr()\nplt.figure(figsize=(30,20))\nsns.heatmap(correlation_train,annot=True,fmt='.1f')","f712664a":"train.corr()","690d7089":"#scatterplot\nsns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train[cols], size = 2.5)\nplt.show();","40ae29c3":"#missing data\ntrain_total = train.isnull().sum().sort_values(ascending=False)\ntrain_percent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\ntrain_missing_data = pd.concat([train_total, train_percent], axis=1, keys=['Total', 'Percent'])\ntrain_missing_data.head(20)","57758208":"#missing data in test\ntest_total = test.isnull().sum().sort_values(ascending=False)\ntest_percent = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\ntest_missing_data = pd.concat([test_total, test_percent], axis=1, keys=['Total', 'Percent'])\ntest_missing_data.head(35)","008b27c3":"# Train Data Imputation\n\nfor col in ('PoolQC','MiscFeature','Alley','Fence','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n            'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType','MSSubClass','FireplaceQu'):\n    train[col] = train[col].fillna('None')\n    \n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF',\n            'BsmtFullBath', 'BsmtHalfBath','MasVnrArea'):\n    train[col] = train[col].fillna(0)\n    \n\ntrain[\"LotFrontage\"] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\n\ntrain[\"Functional\"] = train[\"Functional\"].fillna(\"Typ\")\n\ntrain['MSZoning'] = train['MSZoning'].fillna(train['MSZoning'].mode()[0])\ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical'].mode()[0])\ntrain['KitchenQual'] = train['KitchenQual'].fillna(train['KitchenQual'].mode()[0])\ntrain['Exterior1st'] = train['Exterior1st'].fillna(train['Exterior1st'].mode()[0])\ntrain['Exterior2nd'] = train['Exterior2nd'].fillna(train['Exterior2nd'].mode()[0])\ntrain['SaleType'] = train['SaleType'].fillna(train['SaleType'].mode()[0])\n\n\ntrain = train.drop(['Utilities'], axis=1)","f54c32b4":"train_total = train.isnull().sum().sort_values(ascending=False)\ntrain_percent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\ntrain_missing_data = pd.concat([train_total, train_percent], axis=1, keys=['Total', 'Percent'])\ntrain_missing_data.head(5)","e74f01ce":"# Test Data Imputation\n\nfor col in ('PoolQC','MiscFeature','Alley','Fence','GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n            'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType','MSSubClass','FireplaceQu'):\n    test[col] = test[col].fillna('None')\n    \n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars','BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF',\n            'BsmtFullBath', 'BsmtHalfBath','MasVnrArea'):\n    test[col] = test[col].fillna(0)\n    \n\ntest[\"LotFrontage\"] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\n\ntest[\"Functional\"] = test[\"Functional\"].fillna(\"Typ\")\n\ntest['MSZoning'] = test['MSZoning'].fillna(test['MSZoning'].mode()[0])\ntest['Electrical'] = test['Electrical'].fillna(test['Electrical'].mode()[0])\ntest['KitchenQual'] = test['KitchenQual'].fillna(test['KitchenQual'].mode()[0])\ntest['Exterior1st'] = test['Exterior1st'].fillna(test['Exterior1st'].mode()[0])\ntest['Exterior2nd'] = test['Exterior2nd'].fillna(test['Exterior2nd'].mode()[0])\ntest['SaleType'] = test['SaleType'].fillna(test['SaleType'].mode()[0])\n\n\ntest = test.drop(['Utilities'], axis=1)","cc808743":"#missing data in test\ntest_total = test.isnull().sum().sort_values(ascending=False)\ntest_percent = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\ntest_missing_data = pd.concat([test_total, test_percent], axis=1, keys=['Total', 'Percent'])\ntest_missing_data.head(5)","8cbb2c56":"train.head(5)","1bc0a722":"test.head(5)","60992eb3":"# Print the number of unique levels in train and test data\ntrain_unique = train.nunique().sort_values(ascending=False)\ntest_unique = test.nunique().sort_values(ascending=False)\nunique_data = pd.concat([train_unique, test_unique], axis=1, keys=['Train', 'Test'],join=\"inner\")\nunique_data.head(100)","9e51ef97":"# Train data\ntrain['LotFrontage'] = train['LotFrontage'].astype('int64')\ntrain['MasVnrArea'] = train['MasVnrArea'].astype('int64')\ntrain['GarageYrBlt'] = train['GarageYrBlt'].astype('int64')\n# Test Data\ntest['LotFrontage'] = test['LotFrontage'].astype('int64')\ntest['MasVnrArea'] = test['MasVnrArea'].astype('int64')\ntest['GarageYrBlt'] = test['GarageYrBlt'].astype('int64')\ntest['BsmtFinSF1'] = test['BsmtFinSF1'].astype('int64')\ntest['BsmtFinSF2'] = test['BsmtFinSF2'].astype('int64')\ntest['BsmtUnfSF'] = test['BsmtUnfSF'].astype('int64')\ntest['TotalBsmtSF'] = test['TotalBsmtSF'].astype('int64')\ntest['GarageArea'] = test['GarageArea'].astype('int64')\ntest['BsmtFullBath'] = test['BsmtFullBath'].astype('int64')\ntest['BsmtHalfBath'] = test['BsmtHalfBath'].astype('int64')","0d39e47a":"for col in ('Alley','BldgType','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtQual',\n            'CentralAir','Condition1','ExterCond','ExterQual','Fence','FireplaceQu','Foundation',\n            'Functional','GarageCond','GarageFinish','GarageType','HeatingQC','KitchenQual',\n            'LandContour','LandSlope','LotConfig','LotShape','MasVnrType','MSZoning',\n            'Neighborhood','PavedDrive','RoofStyle','SaleCondition','SaleType','Street',\n           'OverallQual','OverallCond','BsmtFullBath','BsmtHalfBath','HalfBath','TotRmsAbvGrd',\n           'MoSold','YrSold') :\n    train[col] = train[col].astype('category')\n    test[col] = test[col].astype('category')\n","d4702ce0":"# Train data\ntrain.drop(['Condition2','Electrical','Exterior1st','Exterior2nd','GarageQual',\n            'Heating','HouseStyle','MiscFeature','PoolQC','RoofMatl',\n           'MSSubClass','LowQualFinSF','FullBath','BedroomAbvGr','KitchenAbvGr',\n            'Fireplaces','GarageCars','3SsnPorch','PoolArea','MiscVal','Id'], axis=1, inplace=True)\n# Test data\ntest.drop(['Condition2','Electrical','Exterior1st','Exterior2nd','GarageQual',\n            'Heating','HouseStyle','MiscFeature','PoolQC','RoofMatl',\n           'MSSubClass','LowQualFinSF','FullBath','BedroomAbvGr','KitchenAbvGr',\n            'Fireplaces','GarageCars','3SsnPorch','PoolArea','MiscVal','Id'], axis=1, inplace=True)","4cd758d0":"train.shape","e4ca4e40":"test.shape","41b96272":"train.head()","d773bd2c":"test.head()","447696a6":"categorical_features_indices = np.where(train.dtypes != np.int64)[0]","ffe182ea":"categorical_features_indices","1676d79e":"from sklearn.model_selection import train_test_split\n\ny = train[\"SalePrice\"]\nX = train.drop('SalePrice', axis=1)\nX_train, X_validation, y_train, y_validation = train_test_split(X, y, train_size=0.75, random_state=789)","e9ffc5a1":"from catboost import CatBoostRegressor","1a3bed67":"model_1=CatBoostRegressor(loss_function='RMSE')\nmodel_1.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_validation, y_validation),plot=True)","770ba417":"pred =model_1.predict(test)","ff323f5f":"submission = pd.DataFrame()\nsubmission['Id'] = sample_submission.Id\nsubmission['SalePrice'] = pred\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head(5)","163e850b":"## Model - CatBoostRegressor","6821c11f":"### Drop the columns because the unique levels are different with train and test","db5a6c12":"### Scatter plots between 'SalePrice' and correlated variables","aa2432ff":"## Problem Description:\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, **this competition challenges to predict the final price of each home.**\n\n## About Data:\n* train.csv - the training set\n* test.csv - the test set\n* data_description.txt - full description of each column, originally prepared by Dean De Cock but lightly edited to match the column names used here\n* sample_submission.csv - a benchmark submission from a linear regression on year and month of sale, lot square footage, and number of bedrooms\n\n## Data Description:\n\n* SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n* MSSubClass: The building class\n* MSZoning: The general zoning classification\n* LotFrontage: Linear feet of street connected to property\n* LotArea: Lot size in square feet\n* Street: Type of road access\n* Alley: Type of alley access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* Utilities: Type of utilities available\n* LotConfig: Lot configuration\n* LandSlope: Slope of property\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating\n* YearBuilt: Original construction date\n* YearRemodAdd: Remodel date\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* MasVnrArea: Masonry veneer area in square feet\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* Foundation: Type of foundation\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinSF1: Type 1 finished square feet\n* BsmtFinType2: Quality of second finished area (if present)\n* BsmtFinSF2: Type 2 finished square feet\n* BsmtUnfSF: Unfinished square feet of basement area\n* TotalBsmtSF: Total square feet of basement area\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* 1stFlrSF: First Floor square feet\n* 2ndFlrSF: Second floor square feet\n* LowQualFinSF: Low quality finished square feet (all floors)\n* GrLivArea: Above grade (ground) living area square feet\n* BsmtFullBath: Basement full bathrooms\n* BsmtHalfBath: Basement half bathrooms\n* FullBath: Full bathrooms above grade\n* HalfBath: Half baths above grade\n* Bedroom: Number of bedrooms above basement level\n* Kitchen: Number of kitchens\n* KitchenQual: Kitchen quality\n* TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n* Functional: Home functionality rating\n* Fireplaces: Number of fireplaces\n* FireplaceQu: Fireplace quality\n* GarageType: Garage location\n* GarageYrBlt: Year garage was built\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageArea: Size of garage in square feet\n* GarageQual: Garage quality\n* GarageCond: Garage condition\n* PavedDrive: Paved driveway\n* WoodDeckSF: Wood deck area in square feet\n* OpenPorchSF: Open porch area in square feet\n* EnclosedPorch: Enclosed porch area in square feet\n* 3SsnPorch: Three season porch area in square feet\n* ScreenPorch: Screen porch area in square feet\n* PoolArea: Pool area in square feet\n* PoolQC: Pool quality\n* Fence: Fence quality\n* MiscFeature: Miscellaneous feature not covered in other categories\n* MiscVal: Value of miscellaneous feature\n* MoSold: Month Sold\n* YrSold: Year Sold\n* SaleType: Type of sale\n* SaleCondition: Condition of sale\n\n## Note:\n* While reading the data set we have considered 'NaN' as NAs.\n\n## Evaluation Metric:\n* The evaluation metric is **Root-Mean-Squared-Error (RMSE)**","59fce602":"## Imputing missing values\nWe impute them by proceeding sequentially through features with missing values\n* **PoolQC** : data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general.\n* **MiscFeature** : data description says NA means \"no misc feature\".\n* **Alley** : data description says NA means \"no alley access\".\n* **Fence** : data description says NA means \"no fence\".\n* **FireplaceQu** : data description says NA means \"no fireplace\".\n* **GarageType, GarageFinish, GarageQual and GarageCond** : Replacing missing data with None\n* **LotFrontage** : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can **fill in missing values by the median LotFrontage of the neighborhood.**\n* **GarageYrBlt, GarageArea and GarageCars** : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n* **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** : missing values are likely zero for having no basement.\n* **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** : For all these categorical basement-related features, NaN means that there is no basement.\n* **MasVnrArea and MasVnrType** : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type.\n* **MSZoning (The general zoning classification)** : 'RL' is by far the most common value. So we can fill in missing values with 'RL'.\n* **Functional** : data description says NA means typical.\n* **Electrical** : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n* **KitchenQual**: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent) for the missing value in KitchenQual.\n* **Exterior1st and Exterior2nd** : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string.\n* **SaleType** : Fill in again with most frequent which is \"WD\".\n* **MSSubClass** : Na most likely means No building class. We can replace missing values with None\n\n\n* **Utilities** : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . Since the house with 'NoSewa' is in the training set, **this feature won't help in predictive modelling**. We can then safely remove it.","3bef7d6b":"* Deviate from the normal distribution.\n* Have appreciable positive skewness.\n* Show peakedness.","4ce84593":"'TotalBsmtSF' and 'SalePrice' are also in Liner relation","63bdcdee":"It seems that 'SalePrice' and 'GrLivArea' are in linear relationship.","5b869fcc":"## Split the data","36ce4dee":"### Select Categorical Feature Indices","701ba8f5":"## Missing Data","83dc6fdc":"### Converting the data into 'int' and 'category'","afbc534d":"### Relationship with numerical variables","7006de72":"### Relationship with categorical features"}}