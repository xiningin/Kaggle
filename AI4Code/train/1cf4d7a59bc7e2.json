{"cell_type":{"a2bd30ce":"code","0098cc6d":"code","f9880314":"code","7855ee78":"code","70556f3b":"code","f25d7f82":"code","1f3fc703":"code","ba3fc737":"code","9da0ffc9":"code","eb3f3163":"code","9a0a78cf":"code","ca090a1f":"code","9c542913":"code","1818d533":"code","c765d41e":"code","0f9e2616":"code","07a08875":"code","8c91412c":"code","dc8644f1":"code","2facd95b":"code","bbdea095":"code","b69ef9bb":"code","123f9762":"code","527471a1":"code","5d1dc987":"code","5a3116d9":"code","8d3a6bc5":"code","54cb8cb4":"code","3535560b":"code","c4076304":"code","10ec72ca":"code","e908bfe8":"code","51c29f7a":"code","5d9abfc5":"code","fd2976c3":"code","8c06954a":"code","5b4f3312":"code","152daa73":"code","1900bbda":"code","af8c96af":"code","e95b33f3":"code","0308a96e":"code","1ba44ab5":"code","482ac4d5":"code","f7f54600":"code","aca4121b":"code","e258248f":"code","30081f80":"code","a8ff8f82":"code","313e2e01":"code","7dbe1241":"code","48a5563d":"code","66979d3a":"code","70f24366":"code","33fbccf2":"code","af24dc33":"code","967cfe46":"code","cc2cf88f":"code","4bd3b514":"code","31125dca":"code","c7af6576":"code","d0e062ee":"code","f1f7c9ad":"code","49cb2ca3":"code","c675a084":"code","31b45a09":"code","429b6914":"code","a3459a86":"code","74217755":"code","91f86db6":"code","1f80499a":"code","39407a2f":"code","e2673344":"code","59e323cd":"code","f2c5ac7d":"code","b7807c62":"code","95077a71":"code","5b9d3cec":"code","107c4c25":"code","86ad5219":"code","bf4b4a01":"code","5346729c":"markdown","d4b930a1":"markdown","23305c21":"markdown","aab53ec3":"markdown","f76bcd5f":"markdown","5ccbf5be":"markdown","7a0ebf7b":"markdown"},"source":{"a2bd30ce":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","0098cc6d":"df_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f9880314":"titanic_data = [df_train , df_test]\ntitanic_data = pd.concat(titanic_data)","7855ee78":"titanic_data.head()","70556f3b":"print(titanic_data['Embarked'].unique())\nprint(titanic_data['Parch'].unique())\nprint(titanic_data['SibSp'].unique())\nprint(titanic_data['Pclass'].unique())","f25d7f82":"titanic_data.columns.values","1f3fc703":"#Find the null value in dataset\ndf_train.isnull().sum()","ba3fc737":"df_test.isnull().sum()","9da0ffc9":"#Pclass Vs Survived\ndf_train.Pclass.value_counts()","eb3f3163":"df_train.groupby('Pclass').Survived.value_counts()","9a0a78cf":"df_train[['Pclass','Survived']].groupby(['Pclass'], as_index=False).mean()","ca090a1f":"sns.barplot(x='Pclass',y='Survived',data=df_train)","9c542913":"g = sns.FacetGrid(df_train, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","1818d533":"#Comparsion Survived,Pclass with the Age\ngrid = sns.FacetGrid(df_train, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","c765d41e":"df_train.Sex.value_counts()","0f9e2616":"df_train.groupby('Sex').Survived.value_counts()","07a08875":"df_train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean()","8c91412c":"sns.barplot(x='Sex',y='Survived',data=df_train)","dc8644f1":"tab = pd.crosstab(df_train['Pclass'], df_train['Sex'])\ntab","2facd95b":"sns.factorplot('Sex', 'Survived', hue='Pclass', size=4, aspect=2, data=df_train)","bbdea095":"df_train.Embarked.value_counts()","b69ef9bb":"df_train.groupby('Embarked').Survived.value_counts()","123f9762":"df_train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean()","527471a1":"sns.barplot(x='Embarked',y='Survived',data=df_train)","5d1dc987":"df_train.groupby(['Embarked','Pclass','Survived']).Sex.value_counts()","5a3116d9":"sns.barplot(x='Embarked',y='Survived',hue='Sex',data=df_train)","8d3a6bc5":"df_train.Parch.value_counts()","54cb8cb4":"df_train.groupby('Parch').Survived.value_counts()","3535560b":"df_train[['Parch','Survived']].groupby(['Parch'],as_index=False).mean()","c4076304":"sns.barplot(x='Parch',y='Survived',data=df_train)","10ec72ca":"df_train.SibSp.value_counts()","e908bfe8":"df_train.groupby('SibSp').Survived.value_counts()","51c29f7a":"df_train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean()","5d9abfc5":"sns.barplot(x='SibSp',y='Survived',data=df_train)","fd2976c3":"plt.figure(figsize=(15,6))\nsns.heatmap(df_train.drop('PassengerId',axis=1).corr(), vmax=0.6, square=True, annot=True)\n","8c06954a":"train_test_data = [df_train, df_test]\nfor dataset in train_test_data:\n    dataset['Title'] = dataset.Name.str.extract(' ([A-Za-z]+)\\.')","5b4f3312":"df_train.head()","152daa73":"pd.crosstab(df_train['Title'], df_train['Sex'])","1900bbda":"for dataset in train_test_data:\n    \n        dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n        dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n        dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n        dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n","af8c96af":"pd.crosstab(df_train['Title'], df_train['Sex'])","e95b33f3":"df_train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","0308a96e":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Other\": 5}\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)","1ba44ab5":"df_train.head()","482ac4d5":"df_train = df_train.drop(['Name', 'PassengerId','Ticket', 'Cabin'], axis=1)\ndf_test = df_test.drop(['Name','Ticket', 'Cabin'], axis=1)\ncombine = [df_train, df_test]","f7f54600":"for dataset in combine:\n    dataset['Sex'] = dataset['Sex'].map( {'female': 1, 'male': 0} ).astype(int)","aca4121b":"df_train.head()","e258248f":"df_train.Embarked.unique()\n","30081f80":"df_train.Embarked.value_counts()","a8ff8f82":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","313e2e01":"df_train.isnull().sum()","7dbe1241":"for dataset in combine:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","48a5563d":"df_train.head()","66979d3a":"sns.displot(df_train['Age'],kde = True)","70f24366":"df_train['Age'].mean()","33fbccf2":"for dataset in combine:\n    age_mean = dataset['Age'].mean()\n    age_std =  dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    age_null_random_list = np.random.randint(age_mean- age_std, age_mean + age_std, size=age_null_count)\n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)","af24dc33":"df_train['Age'].isnull().sum()","967cfe46":"df_train['AgeBin'] = pd.cut(df_train['Age'], 5)\n","cc2cf88f":"df_train.head()","4bd3b514":"print (df_train[['AgeBin', 'Survived']].groupby(['AgeBin'], as_index=False).mean())","31125dca":"for dataset in combine:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4","c7af6576":"df_train.head()","d0e062ee":"df_train['Fare'].isnull().sum()","f1f7c9ad":"for dataset in combine:\n    dataset['Fare'] = dataset['Fare'].fillna(df_train['Fare'].median())","49cb2ca3":"df_train['FareBin'] = pd.qcut(df_train['Fare'], 4)\nprint (df_train[['FareBin', 'Survived']].groupby(['FareBin'], as_index=False).mean())","c675a084":"df_train.head()","31b45a09":"for dataset in combine:\n    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n    dataset['Fare'] = dataset['Fare'].astype(int)","429b6914":"df_train.head()","a3459a86":"for dataset in combine:\n    dataset['FamilySize'] = dataset['SibSp'] +  dataset['Parch'] + 1\n","74217755":"print (df_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())\n","91f86db6":"for dataset in combine:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\n    \nprint (df_train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","1f80499a":"df_train.head(10)","39407a2f":"features_drop = ['SibSp', 'Parch','FamilySize']","e2673344":"df_train = df_train.drop(features_drop, axis=1)\ndf_test = df_test.drop(features_drop, axis=1)","59e323cd":"df_train = df_train.drop(['AgeBin', 'FareBin'], axis=1)","f2c5ac7d":"df_train.head(20)","b7807c62":"df_test.head()","95077a71":"X_train = df_train.drop('Survived', axis=1)\ny_train = df_train['Survived']\nX_test = df_test.drop(\"PassengerId\", axis=1).copy()\n\nX_train.shape, y_train.shape, X_test.shape","5b9d3cec":"from sklearn.ensemble import RandomForestClassifier","107c4c25":"clf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (acc_random_forest)","86ad5219":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X_train, y_train)\ny_pred_random_forest_training_set = clf.predict(X_train)\nacc_random_forest = round(clf.score(X_train, y_train) * 100, 2)\nprint (\"Accuracy: %i %% \\n\"%acc_random_forest)\n\nclass_names = ['Survived', 'Not Survived']\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_train, y_pred_random_forest_training_set)\nnp.set_printoptions(precision=2)\n\nprint ('Confusion Matrix in Numbers')\nprint (cnf_matrix)\n\ncnf_matrix_percent = cnf_matrix.astype('float') \/ cnf_matrix.sum(axis=1)[:, np.newaxis]\n\nprint ('Confusion Matrix in Percentage')\nprint (cnf_matrix_percent)\nprint ('')\n\ntrue_class_names = ['True Survived', 'True Not Survived']\npredicted_class_names = ['Predicted Survived', 'Predicted Not Survived']\n\ndf_cnf_matrix = pd.DataFrame(cnf_matrix, \n                             index = true_class_names,\n                             columns = predicted_class_names)\n\ndf_cnf_matrix_percent = pd.DataFrame(cnf_matrix_percent, \n                                     index = true_class_names,\n                                     columns = predicted_class_names)\n\nplt.figure(figsize = (15,5))\n\nplt.subplot(121)\nsns.heatmap(df_cnf_matrix, annot=True, fmt='d')\n\nplt.subplot(122)\nsns.heatmap(df_cnf_matrix_percent, annot=True)","bf4b4a01":"submission = pd.DataFrame({\n        \"PassengerId\": df_test[\"PassengerId\"],\n        \"Survived\": y_pred_random_forest\n    })\n\nsubmission.to_csv('submission.csv', index=False)","5346729c":"# ActualPositiveActualNegativePredictedPositiveTPFPPredictedNegativeFNTN \nIn our (Titanic problem) case:\n\nTrue Positive: The classifier predicted Survived and the passenger actually Survived.\n\nTrue Negative: The classifier predicted Not Survived and the passenger actually Not Survived.\n\nFalse Postiive: The classifier predicted Survived but the passenger actually Not Survived.\n\nFalse Negative: The classifier predicted Not Survived but the passenger actually Survived.","d4b930a1":"# **Converting a categorical feature**\nNow we can convert features which contain strings to numerical values. This is required by most model algorithms. Doing so will also help us in achieving the feature completing goal.\n\n","23305c21":"# **Relationship between Features and Survival**\nIn this section, we analyze relationship between different features with respect to Survival. We see how different feature values show different survival chance. We also plot different kinds of diagrams to visualize our data and findings.","aab53ec3":"# From the above plot:\n\nWomen from 1st and 2nd Pclass have almost 100% survival chance.\nMen from 2nd and 3rd Pclass have only around 10% survival chance.","f76bcd5f":"**Acquire data**\nThe Python Pandas packages helps us work with our datasets. We start by acquiring the training and testing datasets into Pandas DataFrames. We also combine these datasets to run certain operations on both datasets together.\n\n","5ccbf5be":"# HANDLE MISSING VALUE\nAge Feature\nWe first fill the NULL values of Age with a random number between (mean_age - std_age) and (mean_age + std_age).\nWe then create a new column named AgeBand. This categorizes age into 5 different age range.","7a0ebf7b":"About data shows that:\n\nHaving FamilySize upto 4 (from 2 to 4) has better survival chance.\nFamilySize = 1, i.e. travelling alone has less survival chance.\nLarge FamilySize (size of 5 and above) also have less survival chance.\nLet's create a new feature named IsAlone. This feature is used to check how is the survival chance while travelling alone as compared to travelling with family."}}