{"cell_type":{"b604ae08":"code","d301b1b5":"code","751493d1":"code","96fcf2ad":"code","1cef86a0":"code","dfc41f53":"code","6491a658":"code","f9422f3f":"code","b57a5b93":"code","be0522cf":"code","33fa6d5d":"code","e6f93beb":"code","b4e213fc":"code","734a09df":"code","7355567c":"code","73ef67bc":"code","3783bf2a":"code","1cefaf44":"code","5675cb3e":"code","4afe720b":"code","0834e2d1":"code","948a3f78":"code","90ab6807":"code","1e96753c":"code","cafd7ae1":"code","819d593c":"code","55157bbf":"code","baac78ec":"code","de590ab8":"code","aa630bf4":"code","abc1a8ad":"code","1beb111f":"code","a3a6a7cd":"code","ded84665":"code","4f42ad60":"code","8fdde6fc":"code","4b6e37e5":"code","f1c539ab":"code","d02ac3d0":"code","db84fd57":"code","fd22caf3":"code","c1b5a61a":"code","83315941":"code","ec18e521":"code","aed1110e":"code","5fdc37f4":"code","9f754e7e":"code","7b8ce5d1":"code","9d622e0b":"code","dd1c8792":"code","195f4834":"code","865dab51":"code","e4eb2c32":"code","653daff8":"code","56661fca":"code","47b20b46":"code","b31a7982":"code","8dd1153c":"code","46c47d56":"code","622e5c89":"code","266a93ed":"code","94cdff21":"code","c30d3a8c":"code","15494fb4":"code","82f171a7":"code","86c9e820":"code","39c527c5":"code","9220b942":"code","849d3351":"code","7509e1d3":"code","c5b0b4f4":"code","0e83a697":"code","3832be6b":"code","d293ffc5":"markdown","8cc99073":"markdown","06ce5400":"markdown","90f2ae9e":"markdown","08b8e12a":"markdown","be8839f4":"markdown","1648fbcb":"markdown","bbb368a7":"markdown","74d6e855":"markdown","cfc5ea5b":"markdown","e5a9c8ca":"markdown","4f772cfb":"markdown","50a9dcce":"markdown","d92e97d3":"markdown","04ff9f7f":"markdown","70b6de0b":"markdown","659c261e":"markdown","8b5bfe8e":"markdown"},"source":{"b604ae08":"pip install pmdarima","d301b1b5":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom sklearn.linear_model import Ridge\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess, Fourier\n%matplotlib inline\n\n# Load specific forecasting tools\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf # for determining (p,q) orders\nfrom statsmodels.tsa.seasonal import seasonal_decompose      # for ETS Plots\nfrom pmdarima import auto_arima                              # for determining ARIMA orders\n\n# Ignore harmless warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Load dataset\npath = '..\/input\/store-sales-time-series-forecasting\/'\n","751493d1":"path = '..\/input\/store-sales-time-series-forecasting\/'\ndf_oil = pd.read_csv(path + 'oil.csv',parse_dates =['date'], infer_datetime_format=True, index_col='date')\npx.line(df_oil,title = 'OIL PRICE') \n# Column Interperitation: Crude Oil Prices: West Texas Intermediate (WTI) - Cushing, Oklahoma (DCOILWTICO)","96fcf2ad":"# Create full date\ncalendar = pd.DataFrame(index=pd.date_range('2013-01-01', '2017-08-31'))\n\n# Calculate moving average\ndf_oil['ma_oil'] = df_oil['dcoilwtico'].rolling(7).mean()\n\n# Merge\ncalendar = calendar.merge(df_oil, how='left', left_index = True, right_index=True)\n\n# Fill Nan \ncalendar['ma_oil'].fillna(method='ffill',inplace=True)\ncalendar['ma_oil'].fillna(calendar['dcoilwtico'],inplace=True)\ncalendar['ma_oil'].fillna(method='bfill',inplace=True)\n\n# Day of week\ncalendar['dofw'] = calendar.index.day_of_week\n\npx.line(calendar[['dcoilwtico','ma_oil']])","1cef86a0":"# Check missing data\nprint(calendar.isna().sum())\ncalendar.head()","dfc41f53":"df_hev = pd.read_csv(path + 'holidays_events.csv', parse_dates=['date'], infer_datetime_format=True)\n\n# 'Good Friday' mistake correction\ndf_hev['date'] = df_hev['date'].replace({'2013-04-29' : pd.to_datetime('2013-03-29')})\n\n# Set Index\ndf_hev = df_hev.set_index('date').sort_index()\n\n# National level only for simplicity\ndf_hev = df_hev[df_hev.locale == 'National'] \nde_hev = df_hev.groupby(df_hev.index).first()","6491a658":"# Check missing data\nprint(df_hev.isna().sum())\ndf_hev.head()","f9422f3f":"# Set Work days\ncalendar['wd'] = True\ncalendar.loc[calendar.dofw > 4, 'wd'] = False\n# Merge canlendar with events\ncalendar = calendar.merge(df_hev, how='left', left_index=True, right_index=True)\n\ncalendar.loc[calendar.type == 'Bridge'  , 'wd'] = False\ncalendar.loc[calendar.type == 'Work Day', 'wd'] = True\ncalendar.loc[calendar.type == 'Transfer', 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == False), 'wd'] = False\ncalendar.loc[(calendar.type == 'Holiday') & (calendar.transferred == True ), 'wd'] = True\n\n# Drop extra columns\ncalendar = calendar.drop(['dcoilwtico','locale','locale_name','description'],axis = 1)","b57a5b93":"print(calendar.isna().sum())\ncalendar.head()","be0522cf":"df_train = pd.read_csv(path + 'train.csv',\n                       usecols=['store_nbr', 'family', 'date', 'sales'],\n                       dtype={'store_nbr': 'category', 'family': 'category', 'sales': 'float32'},\n                       parse_dates=['date'], infer_datetime_format=True)","33fa6d5d":"print(df_train.isna().sum())\ndf_train.head()","e6f93beb":"# plot sum sales across all stores\npx.line(df_train.groupby('date').sum(),title = 'Total Sales')","b4e213fc":"# set index\ndf_train = df_train.set_index(['store_nbr', 'family', 'date']).sort_index()\ndf_train.index.freq = 'D'\ndf_train.head()","734a09df":"# unstack the dataset and set as dependent variable\ny = df_train.unstack(['store_nbr', 'family'])\ny.head()","7355567c":"# same logic as train data\ndf_test = pd.read_csv(path + 'test.csv',\n                      usecols=['store_nbr', 'family', 'date'],\n                      dtype={'store_nbr': 'category', 'family': 'category'},\n                      parse_dates=['date'], infer_datetime_format=True)","73ef67bc":"df_test.head()","3783bf2a":"df_test.info()","1cefaf44":"# set index\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()\ndf_test.index.freq = 'D'","5675cb3e":"df_test.head()","4afe720b":"# Set X\nfourier = CalendarFourier(freq='W', order=4)\n\ndp = DeterministicProcess(index=y.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX = dp.in_sample()\nX","0834e2d1":"# Choose the lenth of X as standard\nprint(len(X),len(calendar))","948a3f78":"# Add other dependent varibales\nlength = len(X)\nX['oil'] = calendar['ma_oil'].head(length).values\nX['dofw'] = calendar['dofw'].head(length).values\nX['wd']   = calendar['wd'].head(length).values\nX['type'] = calendar['type'].head(length).values\n\nX = pd.get_dummies(X, columns=['dofw'], drop_first=True)\nX = pd.get_dummies(X, columns=['type'], drop_first=False)\n\nX.fillna(method='bfill',inplace=True)\nX.head()","90ab6807":"# Build the rig model and make predictions\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.5, normalize=True)\nmodel.fit(X, y)","1e96753c":"# Test predictions\n\nstest = '2017-08-16'\netest = '2017-08-31'\n\nX_test = dp.out_of_sample(steps=16)\n\n# Extentions\n\nX_test['oil']  = calendar.loc[stest:etest]['ma_oil'].values\nX_test['dofw'] = calendar.loc[stest:etest]['dofw'].values\nX_test['wd']   = calendar.loc[stest:etest]['wd'].values\n\nX_test = pd.get_dummies(X_test, columns=['dofw'], drop_first=True)\n\n# No national level events in this period\nX_test[['type_Additional', 'type_Event', 'type_Holiday', 'type_Transfer']] = 0\n\nsales_pred = pd.DataFrame(model.predict(X_test), index=X_test.index, columns=y.columns)\nsales_pred = sales_pred.stack(['store_nbr', 'family'])\n\nsales_pred[sales_pred < 0] = 0. # Sales should be >= 0","cafd7ae1":"# Submission\n\ndf_sub = pd.read_csv(path + 'sample_submission.csv', index_col='id')\ndf_sub.sales = sales_pred.values\ndf_sub.to_csv('submission_2.0.csv', index=True)","819d593c":"from sklearn.linear_model import MultiTaskElasticNetCV","55157bbf":"elastic_model = MultiTaskElasticNetCV(l1_ratio=[.1, .5, .7,.9, .95, .99, 1],tol=0.01)","baac78ec":"elastic_model.fit(X,y)","de590ab8":"elastic_model.l1_ratio_","aa630bf4":"# Test predictions\n\nstest = '2017-08-16'\netest = '2017-08-31'\n\nX_test = dp.out_of_sample(steps=16)\n\n# Extentions\n\nX_test['oil']  = calendar.loc[stest:etest]['ma_oil'].values\nX_test['dofw'] = calendar.loc[stest:etest]['dofw'].values\nX_test['wd']   = calendar.loc[stest:etest]['wd'].values\n\nX_test = pd.get_dummies(X_test, columns=['dofw'], drop_first=True)\n\n# No national level events in this period\nX_test[['type_Additional', 'type_Event', 'type_Holiday', 'type_Transfer']] = 0","abc1a8ad":"X","1beb111f":"X_test","a3a6a7cd":"ooo =X.iloc[1:2]","ded84665":"ii = elastic_model.predict(ooo)","4f42ad60":"sales_pred = pd.DataFrame(elastic_model.predict(X_test), index=X_test.index, columns=y.columns)\nsales_pred = sales_pred.stack(['store_nbr', 'family'])","8fdde6fc":"df_test","4b6e37e5":"# Submission\n\ndf_sub = pd.read_csv(path + 'sample_submission.csv', index_col='id')\ndf_sub.sales = sales_pred.values\ndf_sub.to_csv('submission.csv', index=True)","f1c539ab":"elastic_modeltic_model()","d02ac3d0":"sdate = '2013-01-01'\nedate = '2017-07-15'","db84fd57":"X_train = X.loc[sdate:edate]\ny_train = y.loc[sdate:edate]\nX_test = X.loc[edate:]\ny_test = y.loc[edate]","fd22caf3":"#","c1b5a61a":"sdate = '2013-01-01'\nedate = '2017-06-15'","83315941":"# Set y_train\ny_train = y.loc[sdate:edate]","ec18e521":"# Set X_train\nfourier = CalendarFourier(freq='W', order=4)\n\ndp = DeterministicProcess(index=y_train.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX_train = dp.in_sample()\nX_train","aed1110e":"# Add other dependent varibales\nlength = len(X_train)\nX_train['oil'] = calendar['ma_oil'].head(length).values\nX_train['dofw'] = calendar['dofw'].head(length).values\nX_train['wd']   = calendar['wd'].head(length).values\nX_train['type'] = calendar['type'].head(length).values\n\nX_train = pd.get_dummies(X_train, columns=['dofw'], drop_first=True)\nX_train = pd.get_dummies(X_train, columns=['type'], drop_first=False)\nX_train.head()","5fdc37f4":"# Check which column has Nan\nX_train.columns[X_train.isna().any()].tolist()","9f754e7e":"X_train.fillna(method='bfill',inplace=True)","7b8ce5d1":"# Check which column has Nan again\nX_train.columns[X_train.isna().any()].tolist()","9d622e0b":"# Build the rig model and make predictions\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.5, normalize=True)\nmodel.fit(X_train, y_train)\ny1_pred = pd.DataFrame(model.predict(X_train), index=X.index, columns=y1.columns)","dd1c8792":"y1_pred","195f4834":"sdate = '2013-06-16'\nedate = '2017-08-15'","865dab51":"error1 = mean_squared_error(test['Employees'], predictions)","e4eb2c32":"y1_pred","653daff8":"y1_pred","56661fca":"y_pred","47b20b46":"y = df_train.unstack(['store_nbr', 'family']).loc[sdate:edate]\n\nfourier = CalendarFourier(freq='W', order=4)\n\ndp = DeterministicProcess(index=y.index,\n                          constant=False,\n                          order=1,\n                          seasonal=False,\n                          additional_terms=[fourier],\n                          drop=True)\nX = dp.in_sample()\n\n# Extentions\n\nX['oil']  = calendar.loc[sdate:edate]['ma_oil'].values\nX['dofw'] = calendar.loc[sdate:edate]['dofw'].values\nX['wd']   = calendar.loc[sdate:edate]['wd'].values\nX['type'] = calendar.loc[sdate:edate]['type'].values\n\nX = pd.get_dummies(X, columns=['dofw'], drop_first=True)\nX = pd.get_dummies(X, columns=['type'], drop_first=False)\n\nmodel = Ridge(fit_intercept=True, solver='auto', alpha=0.5, normalize=True)\nmodel.fit(X, y)\ny_pred = pd.DataFrame(model.predict(X), index=X.index, columns=y.columns)","b31a7982":"df_test = pd.read_csv(path + 'test.csv',\n                      usecols=['store_nbr', 'family', 'date'],\n                      dtype={'store_nbr': 'category', 'family': 'category'},\n                      parse_dates=['date'], infer_datetime_format=True)\n\ndf_test.date = df_test.date.dt.to_period('D')\ndf_test = df_test.set_index(['store_nbr', 'family', 'date']).sort_index()","8dd1153c":"df_test","46c47d56":"# find missing values\ndf.isna().sum()","622e5c89":"# find min and max date\ndf.tail()","266a93ed":"# filter data\ndf = df_train[(df_train['family'] == 'GROCERY I') & (df_train['store_nbr'] == 1)]\ncols = ['id','store_nbr','family','onpromotion']\ndf = df.drop(cols,axis =1)\ndf.head()\ndf.tail()","94cdff21":"idx = pd.period_range('2017-08-11', '2017-08-15')\ndf.reindex(idx, fill_value=0)\n","c30d3a8c":"df = df.resample('D').sum().fillna(0)","15494fb4":"df","82f171a7":"# check continuity\ndf.index.freq = 'D'\ndf.sales.isnull().sum()","86c9e820":"px.line(df['sales'])","39c527c5":"result = seasonal_decompose(df['sales'])\nresult.plot();","9220b942":"import matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 18,8\n\ndecomposition = seasonal_decompose(df,model='additive')\nfig = decomposition.plot()\nplt.show()","849d3351":"# for testing purpose using pdq =(1,10), seasonal_order= (1,1,0,12)\nmod =SARIMAX(df,\n    order=(1, 1, 0),\n    seasonal_order=(1, 1, 0, 7),\n    enforce_stationarity=False,\n    enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","7509e1d3":"# investigateing any unusual behaviour\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()","c5b0b4f4":"#One step forcasting and validating\npred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\nax = df['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('automotive')\nplt.legend()\nplt.show()","0e83a697":"y_forecasted = pred.predicted_mean\ny_truth = df['2017-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","3832be6b":"# df_train.loc['5','AUTOMOTIVE']","d293ffc5":"## Oil Price Data","8cc99073":"# **Data Exploration**","06ce5400":"# Test the model","90f2ae9e":"# **Test Data**","08b8e12a":"# **Build Rig Model**","be8839f4":"  Notice: There are missing dates","1648fbcb":"# **Build Rig Model**","bbb368a7":"Notice on the first day each year, the total sales drops dramasticly","74d6e855":"# Draft Below","cfc5ea5b":"## Run an ETS Decomposition","e5a9c8ca":"# Predict Grocery I Sales First","4f772cfb":"Notice the date range is **2013-01-01** to **2017-08-15**","50a9dcce":"# Train and Test Split","d92e97d3":"# **Train Data**","04ff9f7f":"# Build Elastic Net Model","70b6de0b":"## Events Data","659c261e":"# Import Libraies and data","8b5bfe8e":"NOTE: A magnitude 7.8 earthquake struck Ecuador on April 16, 2016. People rallied in relief efforts donating water and other first need products which greatly affected supermarket sales for several weeks after the earthquake. \n"}}