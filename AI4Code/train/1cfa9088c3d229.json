{"cell_type":{"918ce34a":"code","a36f24b9":"code","43cfd91c":"code","121efaf4":"code","3867d0ee":"code","618626ae":"code","4cf18f84":"code","f61d0477":"code","dd090228":"code","caebd4f6":"code","05aaa516":"code","1e4c20a6":"code","8992fc61":"code","cdc7414c":"code","94f6a338":"code","ffb245b3":"code","e178880c":"code","f354a9ad":"code","7a7c20e3":"code","52b51127":"code","cb109f51":"code","ac6cf58f":"code","e5707424":"code","bb8a9f59":"code","4fc05757":"code","e3f92c10":"code","4b6bb92d":"code","e13b7d30":"code","3ed21d03":"code","37858cc6":"code","64e926e9":"code","97a53bd4":"code","e969f042":"code","296dc049":"code","54017ef8":"code","b426bf93":"code","e2c6f66a":"code","2675d5d7":"code","e031541c":"code","1f758a14":"code","27706337":"code","690ccbde":"code","e138b483":"code","ec93086f":"code","bb3d5e67":"code","76e0c780":"code","9ca0bbc0":"code","a2d009dd":"code","39e1f8cc":"code","e7d19e0d":"code","2f3f6b5d":"code","9153eea9":"code","190dd151":"code","95aa8b8c":"code","cdc860b0":"code","b4f61c71":"code","b75f1744":"code","15be4445":"code","fbdae00e":"code","0a97ee7c":"code","b931f7e1":"code","323b8a79":"code","e29ad2dc":"code","fd9aab35":"code","94bbefa2":"code","5d51a1bd":"code","f1a431e3":"code","78068264":"code","ddd1aba2":"code","02c1d9b7":"code","ee2af785":"code","3242987f":"code","28348422":"code","c0b16995":"code","0afc6cb6":"code","c6e84384":"code","c4b42230":"code","8bf705be":"code","a8e80fc1":"code","99a333ae":"code","0bb0dc90":"code","776db608":"code","200b7078":"code","2746e43d":"code","50392517":"code","faeaa20f":"code","46d9eec1":"code","0665671f":"code","2fc8e7de":"code","c7d99a9a":"code","0ebf6af2":"code","f9573acc":"code","392c7337":"code","dd110581":"code","eabc1c66":"code","123c0f91":"code","444ab8e2":"code","687a5598":"code","d2f18f69":"code","b86c5989":"code","aa3b22a7":"code","c5f3648b":"code","2f0e9ca1":"code","321c5438":"code","7bb3b99c":"code","25b4e298":"code","3638e2f9":"code","739ac2c9":"code","d24a9326":"code","93ac2f0b":"code","dbdcdfc9":"code","c7c4fe03":"code","87881647":"code","94f2b446":"code","425a9fdc":"code","3f93a666":"code","1e975ffb":"markdown"},"source":{"918ce34a":"import pandas as pd, numpy as np\nfrom matplotlib import pyplot as plt\n\nimport scipy.stats  as stats","a36f24b9":"pd.options.display.max_columns = 50","43cfd91c":"import os\nos.listdir('..\/input\/mym5files\/')","121efaf4":"# best = pd.read_csv(\"..\/input\/accuracy-best-public-lbs\/kkiller_first_public_notebook_under050_v5.csv\")\n# best = pd.read_csv(\"..\/input\/mym5files\/WA3lgb1keras_m103.csv\")\n# best = pd.read_csv(\"..\/input\/mym5files\/GM3lgb1keras_m104.csv\")\n# best = pd.read_csv(\"..\/input\/mym5files\/WA3lgb1keras_m97_no.csv\")\n# best = pd.read_csv(\"..\/input\/mym5files\/GM3lgb1keras_m99_no.csv\")###\n\n# best = pd.read_csv(\"..\/input\/mym5files\/GM3lgb1keras_m99_no.csv\")\n# best2 = pd.read_csv(\"..\/input\/mym5files\/GM3lgb1keras_m104.csv\")\n\n# best.iloc[:30490,1:]=(best.iloc[:30490,1:]+best2.iloc[:30490,1:])\/2\n# best = pd.read_csv(\"..\/input\/mym5files\/lgb3anddnn_fake_valid_day_to_day2\/lgb3anddnn_fake_valid_day_to_day2.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/3of3perstoreAND1All800ANDvalid_day_to_day2.csv\")\n\n\n# best = pd.read_csv(\"..\/input\/mym5files\/lgbmsubm.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/lgbmsubm_GMnasScos.csv\")###\nbest = pd.read_csv(\"..\/input\/mym5files\/GMmasmodels_v2.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/newEns6keras.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/newEnsCliped.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/lgbm_final_VER4again.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/newEns.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/GM3models_nofastai.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/GM3models_nolgbcos.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/GMmasmodels_v1.csv\")###\n# best = pd.read_csv(\"..\/input\/mym5files\/GMallmodels_v1.csv\")\n\n\nbest.head()","3867d0ee":"# best.iloc[30490:,1:]=best.iloc[:30490,1:].values\nbest.iloc[:30490,1:]=best.iloc[30490:,1:].values","618626ae":"best.tail()","4cf18f84":"# best.iloc[:,1:]=best.iloc[:,1:]*0.97#9#\nbest.head()","f61d0477":"c=0.04\nbest.iloc[:,1:]=best.iloc[:,1:].ewm(com=c,axis=1).mean().values","dd090228":"best.head()","caebd4f6":"sales = pd.read_csv(\"..\/input\/m5-forecasting-uncertainty\/sales_train_validation.csv\")\nsalesids=sales.id.values\nsales = pd.read_csv(\"..\/input\/m5-forecasting-uncertainty\/sales_train_evaluation.csv\")\nsales.id=salesids\nsales.head()","05aaa516":"sub = best.merge(sales[[\"id\", \"item_id\", \"dept_id\", \"cat_id\", \"store_id\", \"state_id\"]], on = \"id\")\nsub[\"_all_\"] = \"Total\"\nsub.shape","1e4c20a6":"sub.head()","8992fc61":"qs = np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995])\nqs.shape\n\n\ndef get_ratios(coef=0.15):\n    qs2 = np.log(qs\/(1-qs))*coef\n    ratios = stats.norm.cdf(qs2)\n    ratios \/= ratios[4]\n    ratios = pd.Series(ratios, index=qs)\n    return ratios.round(3)\n\ndef get_ratios(coef=0.15):\n    qs2 = np.log(qs\/(1-qs))*coef\n    ratios = stats.norm.cdf(qs2)\n    ratios \/= ratios[4]\n    ratios = pd.Series(ratios, index=qs)\n    return ratios.round(3)\n\ndef get_ratios(coef=0.15):\n    qs2 = np.log(qs\/(1-qs))*coef\n    ratios = stats.norm.cdf(qs2)\n    ratios \/= ratios[4]\n#     ratios[-2] *= 1.01\n#     ratios[0] *= 0.99\n    ratios[-1] *= 1.03\n    ratios = pd.Series(ratios, index=qs)\n    return ratios.round(3)\n\ndef get_ratios2(coef=0.15, a=1.2):\n    qs2 = np.log(qs\/(1-qs))*coef\n    ratios = stats.skewnorm.cdf(qs2, a)\n    ratios \/= ratios[4]\n    ratios[-1] *= 1.02\n    ratios = pd.Series(ratios, index=qs)\n    return ratios.round(3)\n\ndef get_ratios3(coef=0.15, c=0.5, s=0.1):\n#     qs2 = np.log(qs\/(1-qs))*coef\n    qs2 = qs*coef\n    ratios = stats.powerlognorm.ppf(qs2, c, s)\n    ratios \/= ratios[4]\n    ratios[0] *= 0.25\n    ratios[-1] *= 1.02\n    ratios = pd.Series(ratios, index=qs)\n    return ratios.round(3)\n\ndef widen(array, pc):\n    #array : array of df\n    #pc: per cent (0:100)\n    array[array<1]=array[array<1] * (1 - pc\/100)\n    array[array>1]=array[array>1] * (1 + pc\/100)\n    return array\n#coef between 0.05 and 0.24 is used, probably suboptimal values for now\n# get_ratios2(coef=0.3)\n# get_ratios3(coef=.7, c=0.1, s=0.65)\nwiden_coef=0.5#5\nlevel_coef_dict = {\"id\": widen((get_ratios2(coef=0.3)+get_ratios3(coef=.3, c=0.04, s=0.9))\/2, pc=widen_coef), \"item_id\": widen(get_ratios2(coef=0.18, a=0.4),pc=widen_coef),\n                   \"dept_id\": widen(get_ratios(coef=0.04),widen_coef), \"cat_id\": widen(get_ratios(coef=0.03),widen_coef),\n                   \"store_id\": widen(get_ratios(coef=0.035),widen_coef), \"state_id\": widen(get_ratios(coef=0.03),widen_coef), \n                   \"_all_\": widen(get_ratios(coef=0.025),widen_coef),\n                   (\"state_id\", \"item_id\"): widen(get_ratios2(coef=0.21, a=0.75),pc=widen_coef),  (\"state_id\", \"dept_id\"): widen(get_ratios(coef=0.05),widen_coef),\n                    (\"store_id\",\"dept_id\") : widen(get_ratios(coef=0.07),widen_coef), (\"state_id\", \"cat_id\"): widen(get_ratios(coef=0.04),widen_coef),\n                    (\"store_id\",\"cat_id\"): widen(get_ratios(coef=0.055),widen_coef)\n                  }\n\n# #################################################\n# def get_ratios(coef=0.15):\n#     qs2 = np.log(qs\/(1-qs))*coef\n#     ratios = stats.norm.cdf(qs2)\n#     ratios \/= ratios[4]\n# #     ratios[-2] *= 1.01\n# #     ratios[0] *= 0.99\n# #     ratios[-1] *= 1.03\n#     ratios = pd.Series(ratios, index=qs)\n#     return ratios.round(3)\n\n# def get_ratios2(coef=0.15, a=1.2):\n#     qs2 = np.log(qs\/(1-qs))*coef\n#     ratios = stats.skewnorm.cdf(qs2, a)\n#     ratios \/= ratios[4]\n# #     ratios[-1] *= 1.02\n#     ratios = pd.Series(ratios, index=qs)\n#     return ratios.round(3)\n\n# def get_ratios3(coef=0.15, c=0.5, s=0.1):\n# #     qs2 = np.log(qs\/(1-qs))*coef\n#     qs2 = qs*coef\n#     ratios = stats.powerlognorm.ppf(qs2, c, s)\n#     ratios \/= ratios[4]\n#     ratios[0] *= 0.25\n# #     ratios[-1] *= 1.02\n#     ratios = pd.Series(ratios, index=qs)\n#     return ratios.round(3)\n# #################################################\n\n\n\n# # level_coef_dict = {\"id\": (get_ratios2(coef=0.3)+get_ratios3(coef=.3, c=0.04, s=0.9))\/2, \"item_id\": get_ratios2(coef=0.18, a=0.4),\n# #                    \"dept_id\": get_ratios(coef=0.04), \"cat_id\": get_ratios(coef=0.03),\n# #                    \"store_id\": get_ratios(coef=0.035), \"state_id\": get_ratios(coef=0.03), \n# #                    \"_all_\": get_ratios(coef=0.025),\n# #                    (\"state_id\", \"item_id\"): get_ratios2(coef=0.21, a=0.75),  (\"state_id\", \"dept_id\"): get_ratios(coef=0.05),\n# #                     (\"store_id\",\"dept_id\") : get_ratios(coef=0.07), (\"state_id\", \"cat_id\"): get_ratios(coef=0.04),\n# #                     (\"store_id\",\"cat_id\"): get_ratios(coef=0.055)\n# #                   }\n\n# level_coef_dict = {\"id\": get_ratios(coef=0.3), \"item_id\": get_ratios(coef=0.19),\n#                    \"dept_id\": get_ratios(coef=0.05), \"cat_id\": get_ratios(coef=0.035),\n#                    \"store_id\": get_ratios(coef=0.04), \"state_id\": get_ratios(coef=0.035), \"_all_\": get_ratios(coef=0.025),\n#                    (\"state_id\", \"item_id\"): get_ratios(coef=0.19),  (\"state_id\", \"dept_id\"): get_ratios(coef=0.05),\n#                     (\"store_id\",\"dept_id\") : get_ratios(coef=0.06), (\"state_id\", \"cat_id\"): get_ratios(coef=0.04),\n#                     (\"store_id\",\"cat_id\"): get_ratios(coef=0.05)\n#                   }","cdc7414c":"# (get_ratios2(coef=0.3)+get_ratios3(coef=.3, c=0.04, s=0.9))\/2","94f6a338":"a=((get_ratios2(coef=0.3)+get_ratios3(coef=.3, c=0.04, s=0.9))\/2).values\nnp.where(a==1)[0][0]","ffb245b3":"widen(((get_ratios2(coef=0.3)+get_ratios3(coef=.3, c=0.04, s=0.9))\/2), 1)","e178880c":"a[a<1]*0.99,a[a>1]*1.01","f354a9ad":"a","7a7c20e3":"# get_ratios2(coef=0.15, a=1.2)","52b51127":"# get_ratios(coef=0.025)","cb109f51":"# def get_ratios3(coef=0.15, c=0.5, s=0.1):\n# #     qs2 = np.log(qs\/(1-qs))*coef\n#     qs2 = qs*coef\n#     ratios = stats.powerlognorm.ppf(qs2, c, s)\n#     ratios \/= ratios[4]\n# #     ratios[0] *= 0.25\n#     ratios[-1] *= 1.04\n#     ratios = pd.Series(ratios, index=qs)\n#     return ratios.round(3)\n# get_ratios3(coef=.5, c=0.4, s=0.07)","ac6cf58f":"# get_ratios3(coef=.7, c=0.1, s=0.65)","e5707424":"# plt.plot(abs(1-get_ratios(coef=0.025)))\n# plt.show()\n# get_ratios(coef=0.025)","bb8a9f59":"# 1.105*1.025","4fc05757":"# plt.plot(abs(1-get_ratios(coef=0.025)))\n# plt.show()\n# get_ratios(coef=0.025)","e3f92c10":"# plt.plot(abs(1-get_ratios2(coef=0.21, a=0.75)))\n# plt.show()\n# get_ratios2(coef=0.21, a=0.75)","4b6bb92d":"# (30490+3049+7+3+10+3+1)*9","e13b7d30":"# 30k, 1, 0.3\n# 3000, 10, 0.19----0.18\n# 7, 10, 0.05-----0.055\n# 3, 10, 0.035\n# 10, 10, 0.04\n# 3, 3-4, 0.035\n# 1, 1, 0.025\n# 9000, 3-4, 0.19-----0.21\n# 21, 3-4, 0.05---0.07\n# 70, 1, 0.06---0.09\n# 9, 3-4, 0.04\n# 30, 1, 0.05","3ed21d03":"# (30490+3049+7+3+10+1)*9","37858cc6":"# import numpy as np\n# import matplotlib.pyplot as plt\n# a=np.array([30000, 3000, 7, 3, 10, 3, 1, 9000, 21, 70, 9, 30])\n# b=np.array([0.3, 0.17, 0.055, 0.035, 0.04, 0.035, 0.025, 0.22, 0.07, 0.09, 0.04, 0.05])\n# plt.plot(a,b,'.')\n# plt.show()\n# plt.plot(a[a<3000],b[a<3000],'.')\n# plt.show()","64e926e9":"# # def get_ratios2(coef=0.15, a=0.05):\n# #     qs2 = np.log(qs\/(1-qs))*coef\n# #     ratios = stats.skewnorm.cdf(qs2, a)\n# #     ratios \/= ratios[4]\n# #     ratios = pd.Series(ratios, index=qs)\n# #     return ratios.round(3)\n\n# # get_ratios2(coef=0.3)\n# level_coef_dict[\"item_id\"]","97a53bd4":"# level_coef_dict[\"id\"]","e969f042":"# level_coef_dict[\"_all_\"]","296dc049":"\n\ndef quantile_coefs(q, level):\n    ratios = level_coef_dict[level]\n               \n    return ratios.loc[q].values\n\ndef get_group_preds(pred, level):\n    df = pred.groupby(level)[cols].sum()\n    q = np.repeat(qs, len(df))\n    df = pd.concat([df]*9, axis=0, sort=False)\n    df.reset_index(inplace = True)\n    df[cols] *= quantile_coefs(q, level)[:, None]\n    if level != \"id\":\n        df[\"id\"] = [f\"{lev}_X_{q:.3f}_validation\" for lev, q in zip(df[level].values, q)]\n    else:\n        df[\"id\"] = [f\"{lev.replace('_validation', '')}_{q:.3f}_validation\" for lev, q in zip(df[level].values, q)]\n    df = df[[\"id\"]+list(cols)]\n    return df\n\ndef get_couple_group_preds(pred, level1, level2):\n    df = pred.groupby([level1, level2])[cols].sum()\n    q = np.repeat(qs, len(df))\n    df = pd.concat([df]*9, axis=0, sort=False)\n    df.reset_index(inplace = True)\n    df[cols] *= quantile_coefs(q, (level1, level2))[:, None]\n    df[\"id\"] = [f\"{lev1}_{lev2}_{q:.3f}_validation\" for lev1,lev2, q in \n                zip(df[level1].values,df[level2].values, q)]\n    df = df[[\"id\"]+list(cols)]\n    return df\n\nlevels = [\"id\", \"item_id\", \"dept_id\", \"cat_id\", \"store_id\", \"state_id\", \"_all_\"]\ncouples = [(\"state_id\", \"item_id\"),  (\"state_id\", \"dept_id\"),(\"store_id\",\"dept_id\"),\n                            (\"state_id\", \"cat_id\"),(\"store_id\",\"cat_id\")]\ncols = [f\"F{i}\" for i in range(1, 29)]\n\ndf = []\nfor level in levels :\n    df.append(get_group_preds(sub, level))\nfor level1,level2 in couples:\n    df.append(get_couple_group_preds(sub, level1, level2))\ndf = pd.concat(df, axis=0, sort=False)\ndf.reset_index(drop=True, inplace=True)\ndf = pd.concat([df,df] , axis=0, sort=False)\ndf.reset_index(drop=True, inplace=True)\ndf.loc[df.index >= len(df.index)\/\/2, \"id\"] = df.loc[df.index >= len(df.index)\/\/2, \"id\"].str.replace(\n                                    \"_validation$\", \"_evaluation\")\n\ndf.shape\n\ndf.head()\n\n# df.to_csv(\"submission01.csv\", index = False)","54017ef8":"# salesGitem=sales.groupby('item_id')[['item_id']+[f\"d_{i}\" for i in range(914, 1914)]].sum()\nsalesGitem=sales.groupby('item_id')[['item_id']+[f\"d_{i}\" for i in range(942, 1942)]].sum()","b426bf93":"salesGitem.shape","e2c6f66a":"df.head()","2675d5d7":"df.tail()","e031541c":"df.shape","1f758a14":"sales.sort_values('id',inplace=True)\nsales.reset_index(drop=True, inplace = True)","27706337":"sales.iloc[:,-28:]","690ccbde":"# quantsales=sales.iloc[:,-1000:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n# quantsales=sales.iloc[:,-366:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n# quantsales=(sales.iloc[:,-28:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T).values\n# quantsales=((sales.iloc[:,-366:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T +\n# #             sales.iloc[:,-366-365:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T +    \n#             sales.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n#             )\/2)\n# quantsales=np.mean(np.stack((sales.iloc[:,-366:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n#             sales.iloc[:,-28:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n# #             sales.iloc[:,-366-365:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n# #             sales.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n#             )),0)\nquantsales=np.average(np.stack((\n            sales.iloc[:,-364:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n#             sales.iloc[:,-2*366:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n            sales.iloc[:,-28:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n#             sales.iloc[:,-366-365:].quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T ,\n#             sales.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n            )),axis=0,weights=[1,1.75])\nquantsales.shape, quantsales[:6,:]#, quantsales.head()","e138b483":"quantsales.shape, np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1).shape","ec93086f":"sales.iloc[:,-366:]","bb3d5e67":"sales.shape","76e0c780":"quantsales.shape","9ca0bbc0":"quantsalesW=[]\nfor i in range(7):\n#     quantsalesW.append(np.expand_dims((sales.iloc[:,np.arange(-28*13+i,0,7)].quantile(np.array(\n#         [0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T).values.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1) )\n    quantsalesW.append( \n        np.expand_dims(\n        np.average(\n            np.stack(\n        ((sales.iloc[:,np.arange(-28*13+i,0,7)].quantile(np.array(\n        [0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T).values.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),\n        (sales.iloc[:,np.arange(-28*3+i,0,7)].quantile(np.array(\n        [0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T).values.reshape(quantsales.shape[0]*quantsales.shape[1], order='F')) \n         ,-1   ),axis=-1), -1)\n                      )\nquantsalesW=np.hstack(quantsalesW)","a2d009dd":"quantsalesW.shape","39e1f8cc":"quantsalesW","e7d19e0d":"# a=(sales.iloc[:,np.arange(-28*13+i,0,7)].quantile(np.array(\n#         [0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T).values.reshape(quantsales.shape[0]*quantsales.shape[1], order='F')\n# np.average(np.stack((a,a),-1),-1)#.shape","2f3f6b5d":"quantsalesW","9153eea9":"quantsalesW=np.tile(quantsalesW,4)\nquantsalesW.shape","190dd151":"quantsalesW","95aa8b8c":"quantsalesW","cdc860b0":"quantsales","b4f61c71":"quantsales.shape","b75f1744":"quantsales","15be4445":"medians=np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== 0.5)[0]\nnotmedian=np.array([x for x in np.arange(274410) if x not in medians])","fbdae00e":"# out1 = np.array([0.25, 0.75])\n","0a97ee7c":"medians.shape,notmedian.shape","b931f7e1":"df.head()","323b8a79":"df.iloc[notmedian,1:] = (0.2*df.iloc[notmedian,1:] + 0.7*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[notmedian,:]\n                       + 0.1*quantsalesW[notmedian,:])\n\ndf.iloc[medians,1:] = (0.8*df.iloc[medians,1:] + 0.2*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[medians,:]\n                       )\n\n# # qs = np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995])\n# out1 = np.array([0.25, 0.75])\n# out2 = np.array([0.165, 0.835])\n# out3 = np.array([0.025, 0.975])\n# out4 = np.array([0.005, 0.995])\n\n# out1_indexes = np.concatenate((np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out1[0])[0],np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out1[1])[0]))\n# out2_indexes = np.concatenate((np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out2[0])[0],np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out2[1])[0]))\n# out3_indexes = np.concatenate((np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out3[0])[0],np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out3[1])[0]))\n# out4_indexes = np.concatenate((np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out4[0])[0],np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[:274410,0]] )== out4[1])[0]))\n# df.iloc[out1_indexes,1:] = (0.175*df.iloc[out1_indexes,1:] + 0.725*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[out1_indexes,:]\n#                        + 0.1*quantsalesW[out1_indexes,:])\n# df.iloc[out2_indexes,1:] = (0.2*df.iloc[out2_indexes,1:] + 0.7*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[out2_indexes,:]\n#                        + 0.1*quantsalesW[out2_indexes,:])\n# df.iloc[out3_indexes,1:] = (0.225*df.iloc[out3_indexes,1:] + 0.675*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[out3_indexes,:]\n#                        + 0.1*quantsalesW[out3_indexes,:])\n# df.iloc[out4_indexes,1:] = (0.25*df.iloc[out4_indexes,1:] + 0.65*np.repeat(np.expand_dims(quantsales.reshape(quantsales.shape[0]*quantsales.shape[1], order='F'),-1),28,1)[out4_indexes,:]\n#                        + 0.1*quantsalesW[out4_indexes,:])\n","e29ad2dc":"df.head()","fd9aab35":"# df","94bbefa2":"# quantsalesdf=pd.DataFrame(quantsales)\n# quantsalesdf['item_id']=sales['item_id'].values\n# quantsalesdfGB=quantsalesdf.groupby('item_id',as_index=False).mean().iloc[:,1:]\n# quantsalesdfGB","5d51a1bd":"# df.iloc[274410:274410+quantsalesdfGB.shape[0]*9,1:]","f1a431e3":"# quantsalesdfGB.values.reshape(quantsalesdfGB.shape[0]*quantsalesdfGB.shape[1], order='F').shape","78068264":"\n# notmedian.shape","ddd1aba2":"# salesGitemQ=salesGitem.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n# salesGitemQ=salesGitemQ.values.reshape(salesGitemQ.shape[0]*salesGitemQ.shape[1], order='F')\n# salesGitemQ=np.repeat(np.expand_dims(salesGitemQ,-1),28,1)\n\n# # salesGitemQ=quantsalesdfGB.values.reshape(quantsalesdfGB.shape[0]*quantsalesdfGB.shape[1], order='F')\n# # salesGitemQ=np.repeat(np.expand_dims(salesGitemQ,-1),28,1)\n\n# # df.iloc[274410:274410+salesGitemQ.shape[0],1:] = 0.9*df.iloc[274410:274410+salesGitemQ.shape[0],1:]  +0.1*salesGitemQ\n# medians=np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[274410:274410+salesGitemQ.shape[0],0]] )== 0.5)[0]\n# notmedian=np.array([x for x in np.arange(274410,274410+salesGitemQ.shape[0]) if x not in medians+274410])\n# df.iloc[notmedian,1:] = 0.9*df.iloc[notmedian,1:]  +0.1*salesGitemQ[notmedian-274410,:]\n# # salesGitemQ.shape","02c1d9b7":"quantsales.shape","ee2af785":"df.iloc[:274410,1].shape,quantsales.shape","3242987f":"# quantsales","28348422":"# df.iloc[:274410,1].values.reshape(30490,9, order='F')","c0b16995":"quantsalesdf=pd.DataFrame(quantsales)\n# quantsalesdf=pd.DataFrame(df.iloc[:274410,1].values.reshape(30490,9, order='F'))\nquantsalesdf['item_id']=sales['item_id'].values\nquantsalesdf['state_id']=sales['state_id'].values\n# quantsalesdfGB=(quantsalesdf.groupby(['state_id','item_id'],as_index=False).median().iloc[:,2:]+quantsalesdf.groupby(['state_id','item_id'],as_index=False).mean().iloc[:,2:])\/2\nquantsalesdfGB=quantsalesdf.groupby(['state_id','item_id'],as_index=False).mean().iloc[:,2:]\n# quantsalesdfGB=quantsalesdfGB.sort_values(['state_id','item_id'])\nquantsalesdfGB","0afc6cb6":"salesGitemQ=quantsalesdfGB.values.reshape(quantsalesdfGB.shape[0]*quantsalesdfGB.shape[1], order='F')\nsalesGitemQ=np.repeat(np.expand_dims(salesGitemQ,-1),28,1)\nsalesGitemQ.shape","c6e84384":"\n# df.iloc[274410:274410+salesGitemQ.shape[0],1:] = 0.9*df.iloc[274410:274410+salesGitemQ.shape[0],1:]  +0.1*salesGitemQ\nmedians=np.where(np.array([float(x.split('_')[-2]) for x in df.iloc[302067:302067+3049*3*9,0]] )== 0.5)[0]\nnotmedian=np.array([x for x in np.arange(302067,302067+3049*3*9) if x not in medians+302067])\ndf.iloc[notmedian,1:] = 0.91*df.iloc[notmedian,1:]  +0.09*salesGitemQ[notmedian-302067,:]\n\n# df.iloc[medians,1:] = 0.98*df.iloc[medians,1:]  +0.02*salesGitemQ[medians-302067,:]","c4b42230":"# salesGitemQ[notmedian-302067,:].shape","8bf705be":"df.iloc[302067:302067+3049*3*9,:]#.shape","a8e80fc1":"# df.iloc[274410:274410+salesGitemQ.shape[0],:]","99a333ae":"# salesStateitem=sales.groupby(['item_id','state_id'])[['item_id','state_id']+[f\"d_{i}\" for i in range(914, 1914)]].sum()","0bb0dc90":"# salesStateitem","776db608":"# plt.hist(np.log1p(salesStateitem.values.flatten()),50)\n# plt.show()","200b7078":"# salesStateitemQ=np.log1p(salesStateitem.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T)\n# # salesStateitemQ=(salesStateitem.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T)\n# # salesStateitemQ=salesStateitemQ.values.reshape(salesStateitemQ.shape[0]*salesStateitemQ.shape[1], order='F')\n# salesStateitemQ","2746e43d":"# # salesStateitemQ=salesStateitem.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T\n# salesStateitemQ=np.log1p(salesStateitem.quantile(np.array([0.005,0.025,0.165,0.25, 0.5, 0.75, 0.835, 0.975, 0.995]), axis=1).T)\n# salesStateitemQ=salesStateitemQ.values.reshape(salesStateitemQ.shape[0]*salesStateitemQ.shape[1], order='F')\n# salesStateitemQ=np.repeat(np.expand_dims(salesStateitemQ,-1),28,1)\n\n# df.iloc[302067:302067+salesStateitemQ.shape[0],1:] = 0.6*df.iloc[302067:302067+salesStateitemQ.shape[0],1:]+0.4* salesStateitemQ","50392517":"# salesStateitemQ.shape","faeaa20f":"# df.iloc[302067:302067+salesStateitemQ.shape[0],:] ","46d9eec1":"# salesStateitemQ","0665671f":"# salesStateitemQ.shape","2fc8e7de":"df.head()","c7d99a9a":"qals=np.array([float(x.split('_')[-2]) for x in df.id])","0ebf6af2":"qals","f9573acc":"df.shape, df.iloc[qals<0.5,1:8].shape, df.iloc[qals>0.5,1:8].shape, df.iloc[qals<0.5,8:15].shape","392c7337":"# df.iloc[qals<0.5,1:15] =  df.iloc[qals<0.5,1:15]*1.01\n# df.iloc[qals>0.5,1:15] =  df.iloc[qals>0.5,1:15]*0.99\n\n# df.iloc[qals<0.5,15:] =  df.iloc[qals<0.5,15:]**1.0012 #- df.iloc[qals<0.5,15:]\/1000##<------------------\n# df.iloc[qals>0.5,15:] =  df.iloc[qals>0.5,15:]**1.001 #- df.iloc[qals>0.5,15:]\/1000##<------------------","dd110581":"# df.iloc[qals<0.5,15:] =  0.9*df.iloc[qals<0.5,15:].values+0.1*df.iloc[qals<0.5,1:15].values\n# df.iloc[qals>0.5,15:] =  0.9*df.iloc[qals>0.5,15:].values+0.1*df.iloc[qals>0.5,1:15].values","eabc1c66":"df.iloc[qals<0.5,1:15].shape, df.iloc[qals>0.5,15:].shape","123c0f91":"df.tail()","444ab8e2":"df.head()","687a5598":"df.iloc[:,1:].mean().mean()","d2f18f69":"# np.clip(df.iloc[:,1:].values,0.0001,None).mean().mean()","b86c5989":"# df.iloc[:,1:]=np.clip(df.iloc[:,1:],0.0001,None)","aa3b22a7":"# df.iloc[:,1:].mean().mean()","c5f3648b":"# len(df.iloc[:,1:].values[df.iloc[:,1:].values<=0.0001]),len(df.iloc[:,1:].values)","2f0e9ca1":"plt.plot(df.iloc[:,1:].mean())\nplt.show()\ndf.iloc[:,1:].mean()","321c5438":"np.min(df)","7bb3b99c":"np.max(df)","25b4e298":"int(df.shape[0]\/2)","3638e2f9":"df.iloc[int(df.shape[0]\/2):,1:]=df.iloc[:int(df.shape[0]\/2),1:].values","739ac2c9":"df.to_csv(\"submission01.csv\", index = False)","d24a9326":"df.shape","93ac2f0b":"# df.iloc[302066:302066+82323,:]","dbdcdfc9":"# df.loc[df.index >= len(df.index)\/\/2, \"id\"] = df.loc[df.index >= len(df.index)\/\/2, \"id\"].str.replace(\n#                                     \"_validation$\", \"_evaluation\")","c7c4fe03":"df.shape","87881647":"42000*9*2","94f2b446":"df.iloc[:int(771120\/2),1:].values-df.iloc[int(771120\/2):,1:].values","425a9fdc":"np.sum(df.iloc[:int(771120\/2),1:].values-df.iloc[int(771120\/2):,1:].values)","3f93a666":"df","1e975ffb":"## Different ratios for different aggregation levels\n\nThe higher the aggregation level, the more confident we are in the point prediction --> lower coef, relatively smaller range of quantiles"}}