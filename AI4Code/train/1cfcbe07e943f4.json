{"cell_type":{"c33a168d":"code","d1620bc3":"code","8fe4fde7":"code","da1c2994":"code","392a014d":"code","8334ef11":"code","bdbd1048":"code","221bee20":"code","0618f89c":"code","3bc404ab":"code","38cb3096":"code","29ce62db":"code","d9095443":"code","d04cde6f":"code","429c9763":"code","650100a7":"code","f8141ebb":"code","26e6d920":"code","eafd610c":"code","89adf21d":"code","1b2e2edd":"code","16a1ebd5":"code","64954e2d":"code","a47f7516":"code","49465570":"code","3f9a812c":"code","cc867940":"code","26eeae37":"code","d91210c5":"code","1b545614":"code","313d77be":"code","eaf95195":"code","86191d52":"code","7ebf4d00":"code","2f1ce6b8":"code","ed529d51":"code","7b4cbc17":"code","d2cdbb16":"code","ab76c8e4":"code","3ece8ef6":"code","1c1cc64f":"code","2219748c":"code","e6fb4413":"code","989bd8ce":"code","301e8536":"code","fb2d9767":"code","7b383b5e":"code","d8cb336e":"code","ec4fa380":"code","ef6f1cec":"code","0b2d7a81":"code","d4adbb60":"code","44c4ae92":"code","54acd564":"code","71e14e9a":"code","fc217303":"code","3d9f5ebc":"code","38cf09b2":"code","45140e86":"code","50ab7e35":"code","b6bd5649":"code","bb09ad68":"code","56703d4b":"code","942214e7":"code","18b39ed0":"code","7d8bf909":"code","0fc18f5f":"code","3d087c58":"code","c9a06931":"code","ce1ec66f":"code","abec471a":"code","903f2a6b":"code","d36fa3e2":"code","3db9763b":"code","7de54e98":"code","a38eba7d":"code","de47e1d5":"code","f60433c3":"code","564978b7":"code","de3c1a7d":"code","b36ae003":"code","382c5ede":"code","ddb99efc":"code","53d5c63f":"code","58678a2d":"code","d2bf1dc2":"code","8c476b69":"code","c2c09642":"code","f5a058f6":"code","6cd051cb":"code","bee52613":"code","b9c53795":"code","af36005d":"code","84d46601":"code","5097685c":"code","b1d4a14c":"code","782ea180":"code","238dbdb9":"code","c6dee35a":"code","e418d892":"code","77bf3dab":"code","a609ab32":"code","1e5ea6f1":"code","dc281a94":"code","635e301d":"code","db09359c":"code","c76fc40a":"code","c5df6dca":"code","d9fdc6f0":"code","1282e6cc":"code","e90fcf3a":"code","54ab80f7":"code","31037738":"code","6eacb1e5":"code","893dc2e3":"code","3c3741c8":"code","287a292b":"code","c37f8661":"markdown","5d85c594":"markdown","9824ed01":"markdown","82f7111c":"markdown","a92c8777":"markdown"},"source":{"c33a168d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1620bc3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\nimport sklearn.linear_model as lm","8fe4fde7":"data=pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv',header=1)\ndata=data.rename(columns={'Unnamed: 2':'DateReported' ,'Unnamed: 7':'DependentsOther', 'Unnamed: 11' : 'DaysWorkedPerWeek'})\ndata.head()","da1c2994":"test=pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv')\ntest.head()","392a014d":"test.shape","8334ef11":"data.info()","bdbd1048":"num_data=data.select_dtypes(include=[float,int])","221bee20":"cat_data=data.select_dtypes(exclude=[float,int])","0618f89c":"num_data.head()","3bc404ab":"cat_data.head()","38cb3096":"num_data.describe()","29ce62db":"cat_data.describe()","d9095443":"data.isnull().sum()","d04cde6f":"test.isnull().sum()","429c9763":"dat1=data.copy()\ndat1.head()","650100a7":"data.drop('ClaimNumber',axis=1,inplace=True)","f8141ebb":"test.drop('ClaimNumber',axis=1,inplace=True)","26e6d920":"data['MaritalStatus']=data['MaritalStatus'].fillna('U')\ndata['WeeklyWages']= data['WeeklyWages'].fillna(int(data['WeeklyWages'].mean()))\ndata['HoursWorkedPerWeek']= data['HoursWorkedPerWeek'].fillna(int(data['HoursWorkedPerWeek'].mean()))\ndata.isnull().sum()","eafd610c":"test['MaritalStatus']=test['MaritalStatus'].fillna('U')\ntest.isnull().sum()","89adf21d":"test.describe()","1b2e2edd":"data.apply(pd.Series.nunique)","16a1ebd5":"num_data.plot.box(figsize=(18,6))","64954e2d":"data['DependentChildren'].value_counts()","a47f7516":"test['DependentChildren'].value_counts()","49465570":"data['DependentsOther'].value_counts()","3f9a812c":"test['DependentsOther'].value_counts()","cc867940":"data['DaysWorkedPerWeek'].value_counts()","26eeae37":"test['DaysWorkedPerWeek'].value_counts()","d91210c5":"data.skew()","1b545614":"test.skew()","313d77be":"#print(data['DependentsOther'].quantile(0.50))\n#print(data['DependentsOther'].quantile(0.95))\ndata['DependentsOther'] = np.where(data['DependentsOther'] >= 2, 1, data['DependentsOther'])\ndata['DependentsOther'].skew()","eaf95195":"#print(test['DependentsOther'].quantile(0.50))\n#print(test['DependentsOther'].quantile(0.95))\ntest['DependentsOther'] = np.where(test['DependentsOther'] >= 2 , 1, test['DependentsOther'])\ntest['DependentsOther'].skew()","86191d52":"data['DependentChildren'] = np.where(data['DependentChildren'] >= 4, 3, data['DependentChildren'])\ndata['DependentChildren'].skew()","7ebf4d00":"test['DependentChildren'] = np.where(test['DependentChildren'] >= 4, 3, test['DependentChildren'])\ntest['DependentChildren'].skew()","2f1ce6b8":"sns.boxplot(data=data,x='HoursWorkedPerWeek')","ed529d51":"print(data['HoursWorkedPerWeek'].quantile(0.10))\nprint(data['HoursWorkedPerWeek'].quantile(0.90))\ndata[\"HoursWorkedPerWeek\"] = np.where(data[\"HoursWorkedPerWeek\"] <35, 35,data['HoursWorkedPerWeek'])\ndata[\"HoursWorkedPerWeek\"] = np.where(data[\"HoursWorkedPerWeek\"] >40, 40,data['HoursWorkedPerWeek'])\nprint(data['HoursWorkedPerWeek'].skew())","7b4cbc17":"print(test['HoursWorkedPerWeek'].quantile(0.10))\nprint(test['HoursWorkedPerWeek'].quantile(0.90))\ntest[\"HoursWorkedPerWeek\"] = np.where(test[\"HoursWorkedPerWeek\"] <33, 33,test['HoursWorkedPerWeek'])\ntest[\"HoursWorkedPerWeek\"] = np.where(test[\"HoursWorkedPerWeek\"] >40, 40,test['HoursWorkedPerWeek'])\nprint(test['HoursWorkedPerWeek'].skew())","d2cdbb16":"sns.boxplot(data=data,x='WeeklyWages')","ab76c8e4":"print(data['WeeklyWages'].quantile(0.10))\nprint(data['WeeklyWages'].quantile(0.90))\ndata[\"WeeklyWages\"] = np.where(data[\"WeeklyWages\"] <200, 200,data['WeeklyWages'])\ndata[\"WeeklyWages\"] = np.where(data[\"WeeklyWages\"] >680, 680,data['WeeklyWages'])\nprint(data['WeeklyWages'].skew())","3ece8ef6":"print(test['WeeklyWages'].quantile(0.10))\nprint(test['WeeklyWages'].quantile(0.90))\ntest[\"WeeklyWages\"] = np.where(test[\"WeeklyWages\"] <200, 200,test['WeeklyWages'])\ntest[\"WeeklyWages\"] = np.where(test[\"WeeklyWages\"] >684, 684,test['WeeklyWages'])\nprint(test['WeeklyWages'].skew())","1c1cc64f":"#print(data['DaysWorkedPerWeek'].quantile(0.10))\n#print(data['DaysWorkedPerWeek'].quantile(0.90))\ndata[\"DaysWorkedPerWeek\"] = np.where(data[\"DaysWorkedPerWeek\"] <=2, 3,data['DaysWorkedPerWeek'])\ndata[\"DaysWorkedPerWeek\"] = np.where(data[\"DaysWorkedPerWeek\"] >=7, 6,data['DaysWorkedPerWeek'])\nprint(data['DaysWorkedPerWeek'].skew())","2219748c":"#print(test['DaysWorkedPerWeek'].quantile(0.10))\n#print(test['DaysWorkedPerWeek'].quantile(0.90))\ntest[\"DaysWorkedPerWeek\"] = np.where(test[\"DaysWorkedPerWeek\"] <=2, 3,test['DaysWorkedPerWeek'])\ntest[\"DaysWorkedPerWeek\"] = np.where(test[\"DaysWorkedPerWeek\"] >=7, 6,test['DaysWorkedPerWeek'])\nprint(test['DaysWorkedPerWeek'].skew())","e6fb4413":"print(test['InitialIncurredCalimsCost'].quantile(0.10))\nprint(test['InitialIncurredCalimsCost'].quantile(0.90))\ntest[\"InitialIncurredCalimsCost\"] = np.where(test[\"InitialIncurredCalimsCost\"] <500, 500,test['InitialIncurredCalimsCost'])\ntest[\"InitialIncurredCalimsCost\"] = np.where(test[\"InitialIncurredCalimsCost\"] >19000, 19000,test['InitialIncurredCalimsCost'])\nprint(test['InitialIncurredCalimsCost'].skew())","989bd8ce":"print(data['InitialIncurredCalimsCost'].quantile(0.10))\nprint(data['InitialIncurredCalimsCost'].quantile(0.90))\ndata[\"InitialIncurredCalimsCost\"] = np.where(data[\"InitialIncurredCalimsCost\"] <500, 500,data['InitialIncurredCalimsCost'])\ndata[\"InitialIncurredCalimsCost\"] = np.where(data[\"InitialIncurredCalimsCost\"] >18000, 18000,data['InitialIncurredCalimsCost'])\nprint(data['InitialIncurredCalimsCost'].skew())","301e8536":"#dat1['WeeklyWagesBins']=pd.cut(dat1['WeeklyWages'],bins=[0,275,475,7497], labels=['Low_wage','Avg_wage','High_wage'])\n#dat1['AgeBins']=pd.cut(dat1['Age'],bins=[10,23,32,43,80], labels=['youth','middle_age','Sen_Ctzn1','Sen_Ctzn2'])\n#dat1['InitialIncurredCalimsCostBins']=pd.cut(dat1['InitialIncurredCalimsCost'],bins=[1,1000,7000,830000], labels=['Low_cost','Avg_cost','High_cost'])","fb2d9767":"#test1['WeeklyWagesBins']=pd.cut(test1['WeeklyWages'],bins=[0,275,475,7497], labels=['Low_wage','Avg_wage','High_wage'])\n#test1['AgeBins']=pd.cut(test1['Age'],bins=[10,23,32,43,80], labels=['youth','middle_age','Sen_Ctzn1','Sen_Ctzn2'])","7b383b5e":"#dat1['WeeklyWagesBins'].value_counts().plot.bar()","d8cb336e":"#dat1['AgeBins'].value_counts().plot.bar()","ec4fa380":"#['InitialIncurredCalimsCostBins'].value_counts().plot.bar()","ef6f1cec":"data['YearOfAccident']  = pd.DatetimeIndex(data['DateTimeOfAccident']).year\n#data['MonthOfAccident']  = pd.DatetimeIndex(data['DateTimeOfAccident']).month\ndata['DayOfAccident']  = pd.DatetimeIndex(data['DateTimeOfAccident']).day\n#data['WeekdayOfAccident']  = pd.DatetimeIndex(data['DateTimeOfAccident']).day_name()\ndata['YearReported']  = pd.DatetimeIndex(data['DateReported']).year\ndata['DaysDelayed'] = pd.DatetimeIndex(data['DateReported']).date - pd.DatetimeIndex(data['DateTimeOfAccident']).date","0b2d7a81":"test['YearOfAccident']  = pd.DatetimeIndex(test['DateTimeOfAccident']).year\n#test['MonthOfAccident']  = pd.DatetimeIndex(test['DateTimeOfAccident']).month\ntest['DayOfAccident']  = pd.DatetimeIndex(test['DateTimeOfAccident']).day\n#test['WeekdayOfAccident']  = pd.DatetimeIndex(test['DateTimeOfAccident']).day_name()\ntest['YearReported']  = pd.DatetimeIndex(test['DateReported']).year\ntest['DaysDelayed'] = pd.DatetimeIndex(test['DateReported']).date - pd.DatetimeIndex(test['DateTimeOfAccident']).date","d4adbb60":"data.head()","44c4ae92":"num_dat1=data.select_dtypes(include=[float,int])\nnum_dat1.info()","54acd564":"cat_dat1=data.select_dtypes(exclude=[float,int])\ncat_dat1.info()","71e14e9a":"sns.boxplot(data=data,x='Age')","fc217303":"sns.boxplot(data=data,x='WeeklyWages')","3d9f5ebc":"sns.boxplot(data=data,x='HoursWorkedPerWeek')","38cf09b2":"sns.boxplot(data=data,x='InitialIncurredCalimsCost')","45140e86":"sns.boxplot(data=data,x='UltimateIncurredClaimCost')","50ab7e35":"sns.countplot(data=data,x='Gender')","b6bd5649":"sns.countplot(data=data,x='MaritalStatus')","bb09ad68":"sns.countplot(data=data,x='PartTimeFullTime')","56703d4b":"sns.catplot(x='Gender',y='UltimateIncurredClaimCost',data=data,kind='bar')","942214e7":"sns.catplot(x='MaritalStatus',y='UltimateIncurredClaimCost',data=data,kind='bar')","18b39ed0":"sns.catplot(x='PartTimeFullTime',y='UltimateIncurredClaimCost',data=data,kind='bar')","7d8bf909":"list_data=['Age', 'DependentChildren','DependentsOther', 'WeeklyWages', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek', 'InitialIncurredCalimsCost', \n           'UltimateIncurredClaimCost']\nsns.pairplot(data=data[list_data])","0fc18f5f":"sns.scatterplot(data=data, x=\"InitialIncurredCalimsCost\",y=\"UltimateIncurredClaimCost\")","3d087c58":"sns.catplot(data=data,x='UltimateIncurredClaimCost', col='PartTimeFullTime',kind='box')","c9a06931":"#sns.countplot(data=data,x='Gender',hue='WeeklyWagesBins')","ce1ec66f":"#sns.countplot(data=data,x='MaritalStatus',hue='AgeBins')","abec471a":"#sns.countplot(data=data,x='Gender',hue='AgeBins')","903f2a6b":"#sns.countplot(data=data,x='MaritalStatus',hue='WeeklyWagesBins')","d36fa3e2":"sns.countplot(data=data,x='YearOfAccident')","3db9763b":"#sns.countplot(data=data,x='WeekdayOfAccident')","7de54e98":"sns.catplot(data=data,x='YearOfAccident',y='UltimateIncurredClaimCost',kind='bar')","a38eba7d":"#sns.catplot(data=data,x='WeekdayOfAccident',y='UltimateIncurredClaimCost',kind='bar')","de47e1d5":"list = ['UltimateIncurredClaimCost','ClaimDescription']\ndata[list].sort_values(by='UltimateIncurredClaimCost', ascending=False).head(10)","f60433c3":"corr = data.corr()\n\n# Draw the heatmap \nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corr, annot=True, square=True, cmap='rainbow')\nplt.show()","564978b7":"dat2=data.copy()\ndat2.drop(['DateTimeOfAccident','DateReported','ClaimDescription'],axis=1,inplace= True)\n","de3c1a7d":"dat2.head()","b36ae003":"test2=test.copy()\ntest2.drop(['DateTimeOfAccident','DateReported','ClaimDescription'],axis=1,inplace= True)\n","382c5ede":"test2.head()","ddb99efc":"dat2.select_dtypes(include='object').columns.tolist()","53d5c63f":"le=pre.LabelEncoder()","58678a2d":"dat2.info()\n#'Gender','MaritalStatus','PartTimeFullTime','ClaimDescription','WeekdayOfAccident','WeeklyWagesBins','AgeBins','DaysDelayed'","d2bf1dc2":"test2.info()","8c476b69":"for x in dat2.select_dtypes(include=['object','category','timedelta64[ns]']).columns.tolist():\n    dat2[x]=le.fit_transform(dat2[x])","c2c09642":"for x in test2.select_dtypes(include=['object','category','timedelta64[ns]']).columns.tolist():\n    test2[x]=le.fit_transform(test2[x])","f5a058f6":"dat2.info()","6cd051cb":"test2.info()","bee52613":"X_scale=pre.minmax_scale(dat2.drop(['UltimateIncurredClaimCost'],axis=1))","b9c53795":"X_test_scale=pre.minmax_scale(test2)","af36005d":"Y=dat2['UltimateIncurredClaimCost']","84d46601":"x_train,x_val,y_train,y_val=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234556)","5097685c":"x_train.shape,x_val.shape,y_train.shape,y_val.shape","b1d4a14c":"glm=lm.LinearRegression()","782ea180":"glm.fit(x_train,y_train)","238dbdb9":"glm.score(x_val,y_val)","c6dee35a":"glm.score(x_train,y_train)","e418d892":"import sklearn.metrics as mt\na=mt.mean_squared_error(y_pred=glm.predict(x_val),y_true=y_val)","77bf3dab":"import math\nmath.sqrt(a)","a609ab32":"import sklearn.neighbors as NN","1e5ea6f1":"KNN=NN.KNeighborsRegressor(n_neighbors=10)","dc281a94":"KNN.fit(x_train,y_train)","635e301d":"KNN.predict(x_val)","db09359c":"KNN.score(x_val,y_val)","c76fc40a":"KNN.score(x_train,y_train)","c5df6dca":"dat2.info()","d9fdc6f0":"test2.info()","1282e6cc":"glm.predict(x_val)","e90fcf3a":"y_pred=glm.predict(X_test_scale)\ny_pred","54ab80f7":"y_pred.shape","31037738":"y_val.shape","6eacb1e5":"csv = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv[\"UltimateIncurredClaimCost\"]=y_pred","893dc2e3":"csv.to_csv(\"20BDA39_4.csv\", index = False)","3c3741c8":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators = 1000, random_state = 42351)\nrf.fit(x_train,y_train);","287a292b":"predictions = rf.predict(x_val)\nfrom sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y_val,predictions))","c37f8661":"# Random Forest","5d85c594":"# KNN","9824ed01":"# EDA","82f7111c":"# Data Processing","a92c8777":"# Data Engineering"}}