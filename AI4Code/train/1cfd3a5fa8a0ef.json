{"cell_type":{"95bcdb2b":"code","9abee124":"code","bca17c2c":"code","1f9e9f33":"code","1e799bc7":"code","98918009":"code","4cd49c74":"code","51cf7f8c":"code","d72bab1c":"code","6ec3c700":"code","028e5e7e":"code","0006a781":"code","d548b2c8":"code","64b701ae":"code","66a508ee":"code","8f115989":"code","a68b19a1":"code","4e266c65":"code","9b4794a1":"code","fbb2585f":"code","3789c0d3":"code","2ed565c3":"code","a1465f48":"code","6ce2e28e":"code","5e3e68f3":"code","5edc25fb":"code","35ad4689":"code","f00f2bf6":"code","6f796440":"code","85303ad8":"code","56dcb58e":"code","331c3c1b":"code","2fb48535":"code","a514d9d3":"code","527bb0f2":"code","b53cac30":"code","db0310b5":"code","3c74beab":"code","d16caf1c":"code","68a3dc72":"code","66f8a9b7":"markdown","3585a19c":"markdown","aefff7f6":"markdown","f83829b1":"markdown","b1732ab6":"markdown","01489b95":"markdown","3f5b4b6b":"markdown","921c56c4":"markdown","7e10c4de":"markdown","2416774e":"markdown","1ef8fee5":"markdown","c9f8f648":"markdown","71c69db1":"markdown","e5acbb8e":"markdown","3238e332":"markdown","0e28637b":"markdown","11e29182":"markdown","92851550":"markdown","10bbca02":"markdown","2165a83a":"markdown","9b3056af":"markdown","b3221691":"markdown","22948d93":"markdown"},"source":{"95bcdb2b":"\nimport numpy as np\nimport pandas as pd\ndata = pd.read_csv('\/content\/drive\/My Drive\/ImageMining\/train.csv') \ndatatest=pd.read_csv('\/content\/drive\/My Drive\/ImageMining\/test.csv') ","9abee124":"y_train=data['label']","bca17c2c":"y_test=datatest","1f9e9f33":"data.drop(columns=data.columns[0], \n        axis=1, \n        inplace=True)","1e799bc7":"\nx_train=data\nx_train.head","98918009":"print(np.min(x_train))","4cd49c74":"df = x_train.loc[:, (x_train != 0).any(axis=0)]\ndf2=y_test.loc[:, (x_train != 0).any(axis=0)]","51cf7f8c":"df2.shape   #80 columns deleted","d72bab1c":"mean_px = df.mean().astype(np.float32)\nstd_px = df.std().astype(np.float32)\nnormalXtrain = (df - mean_px)\/(std_px)\n\n","6ec3c700":"mean_px = df2.mean().astype(np.float32)\nstd_px = df2.std().astype(np.float32)\nnormalXtest = (df2 - mean_px)\/(std_px)","028e5e7e":"normalXtrain= normalXtrain.replace(np.nan,0)\n\n","0006a781":"normalXtest= normalXtest.replace(np.nan,0)","d548b2c8":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly'  ,probability=True,C=50,gamma=0.05)#\n\nxtrain, xtest, ytrain, ytest = train_test_split(normalXtrain, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\nprint(model.predict(xtest))\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\nprint('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\nprint('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))","64b701ae":"#predictions=model.predict(normalXtest)\nid_list = list(range(1,28001))\ndf = pd.DataFrame({'ImageId':id_list , 'Label':predictions })\ndf.to_csv('\/content\/Lamgarraj.csv',index=False)","66a508ee":"log_X_train = np.log(normalXtrain)\nlog_X_train= log_X_train.replace(np.nan,0)\nprint(log_X_train)","8f115989":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly'  ,probability=True,C=50,gamma=0.05)\n\nxtrain, xtest, ytrain, ytest = train_test_split(log_X_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n#print('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\nprint('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))\n\n\n","a68b19a1":"from sklearn.preprocessing import scale\n#x= x_train\/255.0\nX_scaled = scale(normalXtrain)","4e266c65":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(C=10, gamma=0.001, kernel=\"rbf\")\nxtrain, xtest, ytrain, ytest = train_test_split(X_scaled, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\n#print(\"\\n Model score is :   \",model.score(xtest,ytest))\n#print('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\nprint('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))","9b4794a1":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nSc_X_train = sc.fit_transform(normalXtrain)","fbb2585f":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\nSc_X_train=Sc_X_train\/255.0\nxtrain, xtest, ytrain, ytest = train_test_split(Sc_X_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n#print('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\n#print('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))","3789c0d3":"\n#predictions=model.predict(normalXtest)\n\nid_list = list(range(1,28001))\ndf = pd.DataFrame({'ImageId':id_list , 'Label':predictions })\ndf.to_csv('\/content\/Lamgarraj2.csv',index=False)\n#df.to_csv(r'lmgrjDigits.csv',sep=';',encoding=\"utf-8\",columns=['Label'],index=True)","2ed565c3":"from sklearn.preprocessing import MinMaxScaler\n# define min max scaler\nscaler = MinMaxScaler()\n# transform data\nscaled = scaler.fit_transform(normalXtrain)\nprint(scaled)","a1465f48":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(scaled, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n#print('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\n#print('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))","6ce2e28e":"from sklearn.feature_selection import chi2\nfrom sklearn.feature_selection import SelectKBest\ntest = SelectKBest(score_func=chi2, k=300)\nchi2_train = test.fit_transform(np.absolute(x_train), y_train)\nfit2=test.fit(np.absolute(fit), y_train)\nfit2.scores_","5e3e68f3":"x_train.shape","5edc25fb":"chi2_train.shape","35ad4689":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(chi2_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n#print('Accuracy Score on train data: ', accuracy_score(y_true=ytrain, y_pred=model.predict(xtrain)))\n#print('Accuracy Score on test data: ', accuracy_score(y_true=ytest, y_pred=model.predict(xtest)))","f00f2bf6":"from sklearn.preprocessing import MinMaxScaler\n# define min max scaler\nscaler = MinMaxScaler()\n# transform data\nscaledLog = scaler.fit_transform(log_X_train) #logxtrain est le resultats de transformation logarithmique\nprint(scaled)","6f796440":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(scaledLog, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))","85303ad8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nstandartLogtrain = sc.fit_transform(log_X_train)","56dcb58e":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(standartLogtrain, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))","331c3c1b":"\n!pip install sklearn-relief==1.0.0b2\nimport sklearn_relief as relief\n\nr = relief.Relief(\n    n_features=10 # Choose the best 10 features\n) \nr2 = relief.Relief(\n    n_features=100 # Choose the best 100 features\n) \n\n\nrfetarin=r.fit_transform(normalXtrain, y_train)\nrfetarin2=r2.fit_transform(normalXtrain, y_train)\n#rfetarin.scores_\n\nfit2.shape","2fb48535":"from sklearn.decomposition import PCA\npca = PCA(n_components=673)#71\npca_train = pca.fit_transform(normalXtrain)\npca_train.shape\n# summarize components\n#print(\"Explained Variance: %s\" % fit.explained_variance_ratio_)\n#print(fit.components_)","a514d9d3":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nmodel = DecisionTreeClassifier()\n\nxtrain, xtest, ytrain, ytest = train_test_split(pca_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n","527bb0f2":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\nxtrain, xtest, ytrain, ytest = train_test_split(pca_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)                                                                                                                                                                                                                                                         \nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest)) #Model score is :    0.9682142857142857","b53cac30":"from sklearn.feature_selection import VarianceThreshold\n\nvar_thr = VarianceThreshold(threshold = 0.99) #Removing both constant and quasi-constant\nvar_train=var_thr.fit_transform(normalXtrain)\n\nvar_thr.get_support()","db0310b5":"var_train.shape\n#traindata.shape","3c74beab":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(var_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))\n","d16caf1c":"\nfrom sklearn.feature_selection import RFE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nclf_lr=LogisticRegression()\n\n#rfe = RFE(estimator=DecisionTreeClassifier(), n_features_to_select=10)#10 featurs\nrfe2 = RFE(estimator=clf_lr, step=1, n_features_to_select=100) #100 features\n#rfe_Train=rfe.fit_transform(normalXtrain, y_train)\nrfe2_Train=rfe2.fit_transform(normalXtrain, y_train)\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","68a3dc72":"from sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nmodel = SVC(kernel='poly',C=50,gamma='scale',probability=True)\n\nxtrain, xtest, ytrain, ytest = train_test_split(var_train, y_train,\n    test_size=0.2, shuffle = True, random_state = 8)\nmodel.fit(xtrain,ytrain)\n\nprint(\"\\n Model score is :   \",model.score(xtest,ytest))","66f8a9b7":"# **TL + Standarisation**","3585a19c":"# **@author**","aefff7f6":"training model","f83829b1":"# **CHi2**","b1732ab6":"# **Standart Scaller**","01489b95":"<h3> LAMGARRAJ Mohamed<\/h3>\n\n---\n\n\nUSMBA_FSDM_FES ---> Master: Web Intelligence and Data Science(WISD)\n\n\n\n---\n\n\n\nUSPN_Paris ---> Master: Exploration Informatique des Donn\u00e9es et D\u00e9cisionnel(EID2)\n\n\n\n---\n\n\n\nlinkedin: https:\/\/www.linkedin.com\/in\/mohamed-lamgarraj-61b3341a3\/\n\nkaggle: https:\/\/www.kaggle.com\/mohamedlamgarraj\n\ngithub: https:\/\/github.com\/lmgrj","3f5b4b6b":"# **Variance**","921c56c4":"# **Transformation Logarithmique**","7e10c4de":"# **TL + Normalisation**","2416774e":"nrmalisation","1ef8fee5":"Scalling data","c9f8f648":"# **Construction de Matrice des caract\u00e9ristiques initial**","71c69db1":"delete columns with zeros in all images","e5acbb8e":"# **MinMax scaller normalisation**","3238e332":"standarisation des donn\u00e9es","0e28637b":"# **Brute**","11e29182":"# **Scal**","92851550":"# **RFE**","10bbca02":"<center> <h1>Digits Recognizer<\/h1>\n\n\n\n---\n\n<h2>By : Lamgarraj Mohamed <\/h2>\n","2165a83a":"# **PCA**","9b3056af":"training model","b3221691":"data normalisation","22948d93":"# **Relif**"}}