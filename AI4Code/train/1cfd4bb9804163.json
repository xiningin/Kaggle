{"cell_type":{"2c2af01e":"code","4386567b":"code","53a37344":"code","621b1bfc":"code","29dc90cc":"code","2a70d436":"code","32ba19ab":"code","b1d7416e":"code","3e309d75":"code","44d1c71b":"code","44eb6d85":"code","713b9451":"code","752f2a4c":"code","88f08e4c":"code","ee29fc64":"code","be94b0b6":"code","a2fbc588":"code","8a7716d6":"code","7d68d369":"code","8a94f541":"code","e654ca2e":"code","132e87a6":"code","18a6a9bf":"code","ff0fc178":"code","64aaea6f":"code","839aaee8":"code","d44ef2a4":"code","b6189594":"code","b9b0a1cd":"code","d9b90346":"code","1864aa50":"code","d42e614c":"code","39024340":"code","aed4efac":"code","073eda32":"code","bdcf8e3b":"code","7e55b272":"code","414d6235":"code","7446cb50":"markdown","5b599b96":"markdown","7e01d2da":"markdown","6eae4424":"markdown","49c354d8":"markdown","423552b5":"markdown","227cac51":"markdown","404c467a":"markdown","6f161b21":"markdown","8da72d35":"markdown"},"source":{"2c2af01e":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\n\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn import model_selection\nfrom sklearn import metrics\nimport pylab as pl\nimport random  \nimport warnings\nwarnings.filterwarnings('ignore')","4386567b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","53a37344":"traind = pd.read_csv('..\/input\/titanic\/train.csv')","621b1bfc":"testd = pd.read_csv('..\/input\/titanic\/test.csv')","29dc90cc":"testd.shape","2a70d436":"traind.shape","32ba19ab":"traind.head()","b1d7416e":"testd.head()","3e309d75":"# to know the total non-null values in each columns\ntraind.info()","44d1c71b":"# to know the total null values in each columns\nprint('Train columns with null values : {} \\n '.format(traind.isnull().sum()))\nprint('Test columns with null values : {} '.format(testd.isnull().sum()))","44eb6d85":"traind.describe()","713b9451":"testd.describe()","752f2a4c":"traind['Age'].fillna(traind['Age'].median(), inplace = True)\ntraind['Embarked'].fillna(traind['Embarked'].mode()[0], inplace = True)\ntraind['Fare'].fillna(traind['Fare'].median(), inplace = True)\n\ntestd['Age'].fillna(testd['Age'].median(), inplace = True)\ntestd['Embarked'].fillna(testd['Embarked'].mode()[0], inplace = True)\ntestd['Fare'].fillna(testd['Fare'].median(), inplace = True)","88f08e4c":"print('Train columns with null values : {} \\n'.format(traind.isnull().sum()))\nprint('Test columns with null values : {} \\n'.format(testd.isnull().sum()))","ee29fc64":"# Now deleting the columns from tables\ndrop_columns = ['Ticket', 'Cabin']\ntraind.drop(drop_columns, axis = 1, inplace = True)\ntestd.drop(drop_columns, axis = 1, inplace = True)","be94b0b6":"traind.head()","a2fbc588":"testd.head()","8a7716d6":"alltables = [traind,testd]\nfor test in alltables:\n    test['FamilySize'] = test['SibSp'] + test['Parch'] + 1\n    \n    test['IsAlone'] = 1\n    test['IsAlone'].loc[test['FamilySize'] > 1] = 0\n     \n    test['Title'] = test['Name'].str.split(', ', expand = True)[1].str.split('.',expand = True)[0]\n    \n    test['AgeBand'] = pd.cut(test['Age'], 5)\n    test['AgeBand'] = pd.cut(test['Age'], 5)\n\n    test['AgeBand'] = test['AgeBand'].astype('category').cat.codes\n    test['AgeBand'] = test['AgeBand'].astype('category').cat.codes\nstat_min = 10\ntitle_names = (traind['Title'].value_counts() < stat_min)\n    \ntraind['Title'] = traind['Title'].apply(lambda x: 'Misc' if title_names.loc[x] == True else x)\nprint(traind['Title'].value_counts())\nprint(\"----------\")\n    \ntraind.info()\ntestd.info()\ntraind.head()","7d68d369":"plt.title('1st Graph')\nsns.countplot(x = 'Survived', data = traind)","8a94f541":"fig, seas = plt.subplots(2, 2, figsize = (16,12))\n\nsns.countplot(x = 'Survived', hue = 'Embarked', data = traind, ax = seas[0,0])\nsns.countplot(x = 'Survived', hue = 'IsAlone', data = traind, ax = seas[0,1])\nsns.countplot(x = 'Survived', hue = 'Pclass', data = traind, ax = seas[1,0])\nsns.countplot(x = 'Survived', hue = 'Sex', data = traind, ax = seas[1,1])","e654ca2e":"fig, (axis1, axis2, axis3) = plt.subplots(1, 3, figsize = (14,12))\n\nsns.boxplot(x = 'Pclass',y = 'Fare', hue = 'Survived', data = traind, ax = axis1)\naxis1.set_title('Pclass VS. Fare')\nsns.violinplot(x = 'Pclass',y = 'Age', hue = 'Survived', data = traind, split = True, ax = axis2)\naxis2.set_title('Pclass VS. Age')\nsns.boxplot(x = 'Pclass',y = 'FamilySize', hue = 'Survived', data = traind, ax = axis3)\naxis3.set_title('Pclass VS. FamilySize')","132e87a6":"a = sns.FacetGrid(traind, hue = 'Survived', aspect=4)\na.map(sns.kdeplot, 'Age',shade= True )\na.set(xlim=(0 ,traind['Age'].max()))\na.add_legend()","18a6a9bf":"# to know the correlation between each columns\nplt.subplots(figsize = (14, 12))\ncorrelation = traind.corr()\nsns.heatmap(correlation, annot = True, cmap = 'coolwarm')","ff0fc178":"\nSex_dummy = pd.get_dummies(traind['Sex'],prefix=\"Sex\")\ntraind = pd.concat([traind,Sex_dummy],axis=1)\ntraind.drop(\"Sex\",axis=1,inplace=True)\n\nEmbarked_dummy = pd.get_dummies(traind['Embarked'],prefix=\"Embarked\")\ntraind = pd.concat([traind,Embarked_dummy],axis=1)\ntraind.drop(\"Embarked\",axis=1,inplace=True)\n\nTitle_dummy = pd.get_dummies(traind['Title'],prefix=\"Title\")\ntraind = pd.concat([traind,Title_dummy],axis=1)\ntraind.drop(\"Title\",axis=1,inplace=True)\n\nAgeBand_dummy = pd.get_dummies(traind['AgeBand'],prefix=\"AgeBand\")\ntraind = pd.concat([traind,AgeBand_dummy],axis=1)\ntraind.drop(\"AgeBand\",axis=1,inplace=True)\n\nFamilySize_dummy = pd.get_dummies(traind['FamilySize'],prefix=\"FamilySize\")\ntraind = pd.concat([traind,FamilySize_dummy],axis=1)\ntraind.drop(\"FamilySize\",axis=1,inplace=True)\n\nPclass_dummy = pd.get_dummies(traind['Pclass'],prefix=\"Pclass\")\ntraind = pd.concat([traind,Pclass_dummy],axis=1)\ntraind.drop(\"Pclass\",axis=1,inplace=True)\n\nTarget = ['Survived']\ndrop_columns = ['Name','Age','Fare']\ntraind.drop(drop_columns, axis = 1, inplace = True)\ntestd.drop(drop_columns, axis = 1, inplace = True)\n\n    ","64aaea6f":"traind.head()","839aaee8":"Sex_dummy = pd.get_dummies(testd['Sex'],prefix=\"Sex\")\ntestd = pd.concat([testd,Sex_dummy],axis=1)\ntestd.drop(\"Sex\",axis=1,inplace=True)\n\nEmbarked_dummy = pd.get_dummies(testd['Embarked'],prefix=\"Embarked\")\ntestd = pd.concat([testd,Embarked_dummy],axis=1)\ntestd.drop(\"Embarked\",axis=1,inplace=True)\n\nTitle_dummy = pd.get_dummies(testd['Title'],prefix=\"Title\")\ntestd = pd.concat([testd,Title_dummy],axis=1)\ntestd.drop(\"Title\",axis=1,inplace=True)\n\nAgeBand_dummy = pd.get_dummies(testd['AgeBand'],prefix=\"AgeBand\")\ntestd = pd.concat([testd,AgeBand_dummy],axis=1)\ntestd.drop(\"AgeBand\",axis=1,inplace=True)\n\nFamilySize_dummy = pd.get_dummies(testd['FamilySize'],prefix=\"FamilySize\")\ntestd = pd.concat([testd,FamilySize_dummy],axis=1)\ntestd.drop(\"FamilySize\",axis=1,inplace=True)\n\nPclass_dummy = pd.get_dummies(testd['Pclass'],prefix=\"Pclass\")\ntestd = pd.concat([testd,Pclass_dummy],axis=1)\ntestd.drop(\"Pclass\",axis=1,inplace=True)\n","d44ef2a4":"testd.head()","b6189594":"#After converting to categorical testd contains four extra column so in next step those columns will remove from testd\ntraind.info()\ntestd.info()","b9b0a1cd":"drop_col = ['Title_Col' ,'Title_Dona' ,'Title_Dr','Title_Rev']\ntestd.drop(drop_col,axis = 1,inplace=True)","d9b90346":"X_t = traind.drop(['Survived'], axis = 1)\nY_t = traind['Survived']","1864aa50":"x_train, x_test, y_train, y_test = train_test_split(X_t ,Y_t, test_size = 0.3)","d42e614c":"x_train.shape","39024340":"x_test.shape","aed4efac":"y_train.shape","073eda32":"y_test.shape","bdcf8e3b":"# LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nModel = LogisticRegression()\nhistory = Model.fit(x_train, y_train)\ntrain_acc = accuracy_score(y_train, Model.predict(x_train))\ntest_acc = accuracy_score(y_test, Model.predict(x_test))\nprint('train accuracy: '+str(train_acc))\nprint('test accuracy: '+str(test_acc))\n","7e55b272":"y_predict = Model.predict(testd)","414d6235":"out = pd.DataFrame({'PassengerId': testd['PassengerId'], 'Survived': y_predict})\nout.to_csv('submission.csv', index=False,header=True)","7446cb50":"**1. Import Libraries**","5b599b96":"**3. Visualization Of Data**","7e01d2da":"**4. Filling the Missing Values**","6eae4424":"**Titanic Machine Learning Using Logistic Regression **\n\n> 1. Import Libraries\n> 2. Load Data\n> 3. Visualization Of Data\n> 4. Filling the Missing Values\n> 5. Feature Engineering\n> 6. Visualization by the Graph\n> 7. Convert To Categorical\n> 8. Prepare Train And Test Data\n> 9. Run the Model","49c354d8":"**2. Load Data**","423552b5":"**6. Visualization by the Graph**","227cac51":"**5. Feature Engineering**","404c467a":"**8. Prepare Train And Test Data**","6f161b21":"**7. Convert To Categorical**","8da72d35":"**9. Run the Model**"}}