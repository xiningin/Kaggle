{"cell_type":{"3bb8dca1":"code","f4b10845":"code","321f9227":"code","9222f820":"code","19c0f8bf":"code","522aefaa":"code","dfe3f89a":"code","040afbf3":"code","c5503162":"code","2490f9a8":"code","d43aadf9":"code","d6d40636":"code","5246e923":"code","3ddab3ce":"code","062624a4":"code","675b44eb":"code","31b3469a":"code","3f99046c":"code","fd53fb11":"code","1008e26a":"code","e477efb8":"code","29bf3a63":"code","2f59b17d":"code","77f41928":"code","8600588c":"code","d90a8780":"code","9daee248":"code","38b9fd9c":"code","4cf85cd9":"code","dc8eafb0":"code","c035b78e":"code","577e6ce2":"code","09d553b9":"code","f2fb6ac9":"code","2ff7ec35":"code","10b2d942":"code","0628197c":"code","db32da9f":"code","3dc84cfb":"code","6327b6a2":"code","fa91979b":"code","74af2eba":"code","024205d8":"code","ecd6637b":"code","69a9491a":"code","3be41806":"code","a5839b88":"code","55cd8b87":"code","725b87d3":"code","9646938d":"code","4a47d2f5":"code","ca8fc57a":"code","0d3e5b69":"code","e67ec8b8":"code","11223d0d":"code","f10e6625":"code","0fce1526":"code","2b6fe515":"code","169ce3d4":"code","cb3bf7f3":"code","87bf62c9":"code","247d408b":"code","75a9c9f5":"code","3e1996bf":"code","5a6ed54f":"code","76e39adb":"code","7eac45b6":"code","fbf3e348":"code","1ad01972":"code","92ff2681":"code","43583dc6":"code","aedb5a14":"code","4d593103":"code","304eb2d0":"code","c7ad3929":"code","1b4f3a4a":"code","a2895892":"code","25a1b950":"code","1879c75c":"code","05f3debf":"code","3496473e":"code","c4d8f438":"code","2e613d16":"code","a5d83a8a":"code","84a27898":"code","cddba044":"markdown"},"source":{"3bb8dca1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4b10845":"import seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.base import TransformerMixin,BaseEstimator","321f9227":"train = pd.read_csv('..\/input\/titanic\/train.csv',index_col='PassengerId')\n# y = train.pop('Survived')\ntest = pd.read_csv('..\/input\/titanic\/test.csv',index_col='PassengerId')","9222f820":"train.head()","19c0f8bf":"train.isna().sum()","522aefaa":"train['HasCabin'] = np.where(train['Cabin'].isna(),1,0)\ntest['HasCabin'] = np.where(test['Cabin'].isna(),1,0)","dfe3f89a":"train['IsAlone'] = np.where((train['SibSp']+train['Parch'])==0,1,0)\ntest['IsAlone'] = np.where((test['SibSp']+test['Parch'])==0,1,0)","040afbf3":"train['FamilySize'] = train['SibSp']+train['Parch']\ntest['FamilySize'] = test['SibSp']+test['SibSp']","c5503162":"train['FamilySize'] = train['FamilySize'].astype('object')\ntest['FamilySize'] = test['FamilySize'].astype('object')","2490f9a8":"train['Pclass'] = train['Pclass'].astype('object')\ntest['Pclass'] = test['Pclass'].astype('object')","d43aadf9":"sns.distplot(train['Survived'],kde=False)","d6d40636":"sns.barplot(x = 'IsAlone',y = 'Survived',data= train)","5246e923":"sns.barplot(x='HasCabin',y='Survived',data=train)","3ddab3ce":"sns.barplot(x='Sex',y='Survived',data=train)","062624a4":"sns.barplot(x='Embarked',y='Survived',data=train)","675b44eb":"sns.barplot(x='FamilySize',y='Survived',data=train)","31b3469a":"train['Embarked'].fillna('C',inplace=True)\ntest['Embarked'].fillna('C',inplace=True)","3f99046c":"train['Title'] = pd.DataFrame(((pd.DataFrame((train['Name'].str.split(', ')).tolist(),index=train.index)[1]).str.split(' ')).tolist(),index=train.index)[0]","fd53fb11":"test['Title'] = pd.DataFrame(((pd.DataFrame((test['Name'].str.split(', ')).tolist(),index=test.index)[1]).str.split(' ')).tolist(),index=test.index)[0]","1008e26a":"train['Title'].value_counts()","e477efb8":"train['Title'] = np.where(train['Title']=='Mr.','Mr','').astype('object')+np.where(train['Title']=='Mrs.','Mrs','').astype('object')+np.where(train['Title']=='Miss.','Miss','').astype('object')+np.where(train['Title']=='Master.','Master','').astype('object')","29bf3a63":"test['Title'] = np.where(test['Title']=='Mr.','Mr','').astype('object')+np.where(test['Title']=='Mrs.','Mrs','').astype('object')+np.where(test['Title']=='Miss.','Miss','').astype('object')+np.where(test['Title']=='Master.','Master','').astype('object')","2f59b17d":"np.where(train['Title']=='')","77f41928":"train['Title'] = train['Title'].replace(r'','Others')","8600588c":"test['Title'] = test['Title'].replace(r'','Others')","d90a8780":"sns.barplot(x='Title',y='Survived',data=train)","9daee248":"train['Age'].fillna(train['Age'].mode()[0],inplace=True)","38b9fd9c":"test['Age'].fillna(test['Age'].mode()[0],inplace=True)","4cf85cd9":"train['AgeGroup'] = np.where(train['Age']<=3,'Babies','').astype('object')+np.where((train['Age']>3) & (train['Age']<=16),'Children','').astype('object')+np.where((train['Age']>16) & (train['Age']<=30),'Young Adults','').astype('object')+np.where((train['Age']>30) & (train['Age']<=60),'Middle Aged','').astype('object')+np.where(train['Age']>60,'Senior Citizen','').astype('object')","dc8eafb0":"test['AgeGroup'] = np.where(test['Age']<=3,'Babies','').astype('object')+np.where((test['Age']>3) & (test['Age']<=16),'Children','').astype('object')+np.where((test['Age']>16) & (test['Age']<=30),'Young Adults','').astype('object')+np.where((test['Age']>30) & (test['Age']<=60),'Middle Aged','').astype('object')+np.where(test['Age']>60,'Senior Citizen','').astype('object')","c035b78e":"sns.barplot(x='AgeGroup',y='Survived',data=train)","577e6ce2":"train['Fare'].value_counts().iloc[0:50]","09d553b9":"train['Fare'].isna().sum()","f2fb6ac9":"train['FareGroup'] = pd.cut(train['Fare'],[-1,10,50,100,200,1000],labels=['Low','Mid','UpperMid','High','VeryHigh'])","2ff7ec35":"test['FareGroup'] = pd.cut(test['Fare'],[-1,10,50,100,200,1000],labels=['Low','Mid','UpperMid','High','VeryHigh'])","10b2d942":"sns.barplot(x='FareGroup',y='Survived',data=train)","0628197c":"train['SexCode'] = np.where(train['Sex']=='male',1,0)","db32da9f":"test['SexCode'] = np.where(test['Sex']=='male',1,0)","3dc84cfb":"train.head(3)","6327b6a2":"test.head()","fa91979b":"X = train[['Pclass','Embarked','HasCabin','IsAlone','Title','AgeGroup','FareGroup','SexCode','FamilySize']]\ny = train['Survived']","74af2eba":"predict = test[['Pclass','Embarked','HasCabin','IsAlone','Title','AgeGroup','FareGroup','SexCode','FamilySize']]","024205d8":"from sklearn.model_selection import train_test_split,GridSearchCV,StratifiedKFold,cross_val_score\nfrom sklearn.base import TransformerMixin,BaseEstimator,RegressorMixin\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder,OneHotEncoder,PolynomialFeatures,StandardScaler, MinMaxScaler\nfrom sklearn.pipeline import Pipeline,FeatureUnion\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier,RidgeClassifierCV,LassoCV,LogisticRegressionCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC \nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.naive_bayes import BernoulliNB,GaussianNB,ComplementNB,CategoricalNB\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.pipeline import Pipeline\nimport category_encoders as ce\nfrom sklearn.preprocessing import PolynomialFeatures","ecd6637b":"seed = 64\nrfc = RandomForestClassifier(n_jobs=-1,random_state=seed)\nabc = AdaBoostClassifier(random_state=seed,n_estimators=250)\ngbc = GradientBoostingClassifier(random_state=seed)\nlr = LogisticRegression(random_state=seed,max_iter=5000)\nlrcv = LogisticRegressionCV(random_state=seed)\nrc = RidgeClassifier(random_state=seed)\nrccv = RidgeClassifierCV()\nlc = LassoCV(random_state=seed,n_jobs=-1)\ndtc = DecisionTreeClassifier(random_state=seed)\nknc = KNeighborsClassifier(n_jobs=-1)\nsvc = SVC(random_state=seed)\nmlp = MLPClassifier(random_state=-1)\nbnb = BernoulliNB()\ngnb = GaussianNB()\ncnb = ComplementNB()\ncanb = CategoricalNB()\nlgbm = LGBMClassifier(random_state=seed,n_jobs=-1)\nxgb = XGBClassifier(random_state=seed,n_jobs=-1)\nss = StandardScaler()","69a9491a":"cen = ce.WOEEncoder()\nX_coded = cen.fit_transform(X,y)","3be41806":"ss = MinMaxScaler()\nX_coded = ss.fit_transform(X_coded)","a5839b88":"predict_coded = ss.transform(cen.transform(predict))","55cd8b87":"X_train,X_test,y_train,y_test = train_test_split(X_coded,y,test_size=0.1,random_state =seed)","725b87d3":"model = [rfc,abc,gbc,lr ,lrcv ,rc,rccv,lc,dtc,knc,svc,lgbm,xgb]\ntraining_score = []","9646938d":"def modelselect(model):\n    model.fit(X_train,y_train)\n    return model.score(X_test,y_test)","4a47d2f5":"for i in model:\n    training_score.append(modelselect(i))\ntraining_score","ca8fc57a":"cv = StratifiedKFold(n_splits=5,shuffle=True,random_state=seed)","0d3e5b69":"parameters = {'hyperthread':[4],\n#               'objective':['binary:logistic'],\n              'learning_rate': [0.05,0.01,0.1,1], \n              'max_depth': [2,4,6,8,10],\n              'min_child_weight': [8,10,12,14,16],\n              'silent': [1],\n              'subsample': [0.8],\n              'colsample_bytree': [0.7],\n              'n_estimators': [250,500,1000,2000],\n              'missing':[-999],\n              'seed': [1337]}","e67ec8b8":"grid = GridSearchCV(lgbm,parameters,n_jobs=-1,cv=cv,verbose=1,scoring='roc_auc')","11223d0d":"# grid = XGBClassifier(base_score=0.5, booster=None, colsample_bylevel=1,\n#               colsample_bynode=1, colsample_bytree=0.7, gamma=0, gpu_id=-1,\n#               hyperthread=4, importance_type='gain',\n#               interaction_constraints=None, learning_rate=1, max_delta_step=0,\n#               max_depth=2, min_child_weight=16, missing=-999,\n#               monotone_constraints=None, n_estimators=500, n_jobs=-1,\n#               num_parallel_tree=1, objective='binary:logistic', random_state=64,\n#               reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=1337,\n#               silent=1, subsample=0.8, tree_method=None,\n#               validate_parameters=False, verbosity=None)","f10e6625":"grid.fit(X_train,y_train)","0fce1526":"grid.best_estimator_","2b6fe515":"best_lgbm = grid.best_estimator_","169ce3d4":"grid.best_score_","cb3bf7f3":"best_lgbm.score(X_test,y_test)","87bf62c9":"cross_val_score(best_lgbm,X_coded,y,cv=cv,scoring='roc_auc',verbose=2,n_jobs=-1)","247d408b":"pre = best_lgbm.predict(predict_coded)","75a9c9f5":"pd.DataFrame({'PassengerId':test.index,'Survived':pre}).to_csv('submission.csv',index=False)","3e1996bf":"from keras import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom sklearn.preprocessing import StandardScaler","5a6ed54f":"X.shape","76e39adb":"classifier = Sequential()\nclassifier.add(Dense(5,activation='relu',kernel_initializer='uniform',input_dim=9))\nclassifier.add(Dense(8,activation='relu',kernel_initializer='uniform'))\nclassifier.add(Dense(5,activation='relu',kernel_initializer='uniform'))\nclassifier.add(Dense(1,activation='sigmoid',kernel_initializer='uniform'))","7eac45b6":"opt = Adam(learning_rate=0.01)","fbf3e348":"classifier.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])","1ad01972":"hist = classifier.fit(X_train,y_train,epochs=8,validation_data=(X_test,y_test))","92ff2681":"import matplotlib.pyplot as plt","43583dc6":"plt.plot(hist.history['val_loss'],label='val')\nplt.plot(hist.history['loss'],label='loss')","aedb5a14":"plt.plot(hist.history['val_accuracy'],label='val')\nplt.plot(hist.history['accuracy'],label='loss')","4d593103":"X_train.shape","304eb2d0":"X_train = X_train.reshape(801,3,3,1)\nX_test = X_test.reshape(-1,3,3,1)","c7ad3929":"from keras import Sequential\nfrom keras.layers import Dense,Conv2D,Flatten,MaxPool2D","1b4f3a4a":"classifier = Sequential()\nclassifier.add(Conv2D(64,(1,1),activation='relu',input_shape=(3,3,1)))\nclassifier.add(Conv2D(64,(1,1),activation='relu'))\nclassifier.add(Flatten())\nclassifier.add(Dense(1,activation='sigmoid'))","a2895892":"classifier.compile(opt,'binary_crossentropy',['accuracy'])","25a1b950":"hist = classifier.fit(X_train,y_train,epochs=15,batch_size=1,validation_data=(X_test,y_test))","1879c75c":"plt.plot(hist.history['val_loss'],label='val')\nplt.plot(hist.history['loss'],label='loss')","05f3debf":"plt.plot(hist.history['val_accuracy'],label='val')\nplt.plot(hist.history['accuracy'],label='loss')","3496473e":"pred = ss.transform(cen.transform(predict))","c4d8f438":"pred = pred.reshape(-1,3,3,1)","2e613d16":"pre = classifier.predict_classes(pred)","a5d83a8a":"pre.reshape(-1,)","84a27898":"# pd.DataFrame({'PassengerId':test.index,'Survived':pre.reshape(-1,)}).to_csv('submission.csv',index=False)","cddba044":"# **ACCURACIES** - \n# 1.   LightGBM - 0.81791831\n# 2.   ANN - 0.7889\n# 3.   CNN - 0.8111"}}