{"cell_type":{"3b1b517d":"code","3c3b4d4a":"code","6bb2fef5":"code","72b689df":"code","6893e97f":"code","931dbd9b":"code","dd080602":"code","f83848e7":"code","53f84aae":"code","dd7183c2":"code","ca69b5b0":"code","662bf695":"code","5da523ad":"code","476516d6":"code","9027e2be":"code","b9c13e0e":"code","50f16000":"code","f97f9d84":"code","d25dfca4":"code","2d86586c":"code","71cffbac":"code","a94a1ab1":"code","60f8d52d":"code","a4cb1230":"code","ef80e885":"code","f82c1bf9":"code","b02eba4d":"code","8ad99596":"code","ecdbb0ef":"code","72f95c97":"markdown","8adb29fe":"markdown","04ad8734":"markdown","e6307fbf":"markdown","a63b18f9":"markdown","97e8185b":"markdown","d078a970":"markdown","21af67ad":"markdown","9ca65ef8":"markdown","6b0371d1":"markdown","270f3641":"markdown","42191482":"markdown","3b4ea2e7":"markdown","daea14b5":"markdown","3f25fc75":"markdown","85f9161c":"markdown","e0340a78":"markdown","6a822739":"markdown","e046ce8e":"markdown","bf722df3":"markdown"},"source":{"3b1b517d":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","3c3b4d4a":"np.random.seed(123)","6bb2fef5":"#Intializing steps\nstep = 50","72b689df":"#Throwing a die\ndice = np.random.randint(1,7)","6893e97f":"# Satisfying the condition\nif dice <= 2 :\n    step = step - 1\nelif dice < 6 and dice > 2 :\n    step += 1\nelse :\n    step = step + np.random.randint(1,7)\nprint(dice,step)","931dbd9b":"random_walk = [0]\n# Complete the ___\nfor x in range(100) :\n    # Set step: last element in random_walk\n    step = random_walk[-1]\n\n    # Roll the dice\n    dice = np.random.randint(1,7)\n\n    # Determine next step\n    if dice <= 2:\n        step = step - 1\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    # append next_step to random_walk\n    random_walk.append(step)\n\n# Print random_walk\nprint(random_walk)","dd080602":"# Initialize random_walk\nrandom_walk = [0]\n\nfor x in range(100) :\n    step = random_walk[-1]\n    dice = np.random.randint(1,7)\n\n    if dice <= 2:\n        # Replace below: use max to make sure step can't go below 0\n        step = max(0, step - 1)\n    elif dice <= 5:\n        step = step + 1\n    else:\n        step = step + np.random.randint(1,7)\n\n    random_walk.append(step)\n\nprint(random_walk)","f83848e7":"plt.plot(random_walk)\nplt.show()","53f84aae":"# Initialize all_walks\nall_walks = []\n\n# Simulate random walk 10 times\nfor i in range(10) :\n\n    # Code from before\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        random_walk.append(step)\n\n    # Append random_walk to all_walks\n    all_walks.append(random_walk)\n\n# Print all_walks\nprint(all_walks)","dd7183c2":"# Convert all_walks to Numpy array\n\nnp_all_walks = np.array(all_walks)","ca69b5b0":"print(np_all_walks)","662bf695":"print(np_all_walks.shape)","5da523ad":"plt.plot(np_all_walks)\nplt.show()","476516d6":"# Transpose np_all_walks\nnp_all_walks_transpose = np.transpose(np_all_walks)","9027e2be":"print(np_all_walks_transpose)","b9c13e0e":"print(np_all_walks_transpose.shape)","50f16000":"plt.plot(np_all_walks_transpose)\nplt.show()","f97f9d84":"# Simulate random walk 250 times\nall_walks = []\nfor i in range(250) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n\n        # Implement clumsiness\n        if np.random.rand() <= 0.001:\n            step = 0\n\n        random_walk.append(step)\n    all_walks.append(random_walk)","d25dfca4":"np_all_walks_transpose = np.transpose(np.array(all_walks))\nplt.plot(np_all_walks_transpose)\nplt.show()","2d86586c":"# Select last row from transposed matrix\nends = np.array(np_all_walks_transpose[-1])\nends","71cffbac":"# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()","a94a1ab1":"np.random.seed(123)\n# Simulate random walk 500 times\nall_walks = []\nfor i in range(500) :\n    random_walk = [0]\n    for x in range(100) :\n        step = random_walk[-1]\n        dice = np.random.randint(1,7)\n        if dice <= 2:\n            step = max(0, step - 1)\n        elif dice <= 5:\n            step = step + 1\n        else:\n            step = step + np.random.randint(1,7)\n        if np.random.rand() <= 0.001 :\n            step = 0\n        random_walk.append(step)\n    all_walks.append(random_walk)\n","60f8d52d":"# Create and plot np_aw_t\nnp_all_walks_transpose = np.transpose(np.array(all_walks))","a4cb1230":"plt.plot(np_all_walks_transpose)\nplt.show()","ef80e885":"# Select last row from transposed np array\nends = np.array(np_all_walks_transpose[-1])\n\n# Plot histogram of ends, display plot\nplt.hist(ends)\nplt.show()","f82c1bf9":"ends","b02eba4d":"np.count_nonzero(ends)","8ad99596":"np.count_nonzero(ends>=60)","ecdbb0ef":"print((np.count_nonzero(ends>=60)\/len(ends))*100)","72f95c97":"> # Visualize a Random Walk","8adb29fe":"# Performing 500 random walks","04ad8734":"> # Visualize all walks","e6307fbf":"# Imagine the following\n## You are walking up the Empire State Building and you are playing a game with a friend, you throw a die 100 times.\n* If its 1 or 2, you go one stem down.\n* If its 3, 4 or 5, you go one step up.\n* If its 6, you throw the die again and walk the resulting number of steps.\n* Offcourse you can go bellow step 0.\n* There is a 0.1% chance of you falling down the stairs.\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/1\/10\/Empire_State_Building_%28aerial_view%29.jpg\/250px-Empire_State_Building_%28aerial_view%29.jpg)\n\n","a63b18f9":"### A random walk refers to any process in which there is no observable pattern or trend; that is, where the movements of an object, or the values taken by a certain variable, are completely random. Certain real-life scenarios that could be modeled as random walks could be:\n\n* The movements of an animal foraging for food in the wilderness.\n* The path traced by a molecule as it moves through a liquid or a gas (diffusion).\n* The price of a stock as it moves up and down.\n* The path of a drunkard wandering through Greenwich Village.\n* The financial status of a gambler at the roulette wheel in Las Vegas.\n\n\n![Example](https:\/\/miro.medium.com\/max\/1114\/1*LnGhX3L7_argzItsGru_nQ.jpeg)","97e8185b":"> ## To answer this we will simulate this process many times, hence will be performing random walks. ","d078a970":"# You bet your friend that you will reach 60 steps higher.\n\n# What are the chances, that you win this bet?\n","21af67ad":"# ------------------------------------------------------------------","9ca65ef8":"> # Calculate the odds\n> ### The histogram of the previous exercise was created from a Numpy array ends, that contains 500 integers. Each integer represents the end point of a random walk. To calculate the chance that this end point is greater than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 500, the total number of simulations.\n\n> ### Well then, what's the estimated chance that you'll reach 60 steps high if you play this Empire State Building game?","6b0371d1":"# Chaos\n\n","270f3641":"> ### Randomness has many uses in science, art, statistics, cryptography, gaming, gambling, and other fields. You're going to use randomness to simulate a game.","42191482":"## In the early 19th century, a botanist by the name of Robert Brown had been analyzing pollen and concluded that the pollen grains moved in such a mad way that it could only be random. Known as the Brownian motion, Albert Einstein later discovered that it was the movement of energy of millions of microscopic particles.\n## Meanwhile in 1900, the French mathematician Louis Bachelier likened the Brownian motion to bond prices; that is, patterns of bond prices moved identical to the pollen grains that Brown had analyzed. He created a formula to capture the movement of bonds, and it became known as the random walk or drunkard\u2019s walk.\n\n   ![](https:\/\/miro.medium.com\/max\/1204\/1*BZIjaRH06st7P14txMO3fA.png)\n\n## Since then, financial theorists and investors either follow the random walk theory, where the efficient market hypothesis holds and that it is impossible to outperform the market, or are critics of the theory, where there are inefficiencies in the market and price trends and the possibility to outperform the market exists.\n","3b4ea2e7":"> ## Things are shaping up nicely! You already have code that calculates your location in the Empire State Building after 100 dice throws. However, there's something we haven't thought about - you can't go below 0!","daea14b5":"# It seems like you have a pretty high chance of winning the bet.\n## You have approximately *78.4%* chance of winning the bet.\n","3f25fc75":"> # Initializing","85f9161c":"## Similar to the movements in life, we make countless decisions at every moment \u2014 whether major, such as moving to a new city, or minor, such as answering that phone call from Aunt Catherine.\n## Although there may be some patterns to the decisions we make, having been ordained as natural creatures of habit, would our decisions look a lot like the jiggling of the pollen grains and the movement of bond prices?\n## Prices of bonds are predominantly affected by changes in interest rates. Other factors including the yield curve and credit quality also influence them.\n\n![](https:\/\/miro.medium.com\/max\/1400\/1*O09cH3zO7Ts2xV3oGFX-6A.png)\n\n## Though bond pricing can be seemingly complex, elements stimulating our decisions are decidedly more elaborate, taking into account the history of our experiences, outcomes of previous decisions, the current environment in which the decision is taking place, our moods at the time, and the relative positions of the sun, Earth, and moon.\n## Okay, perhaps the alignment of certain celestial bodies may not be a dominant factor when considering the detailed course of our lives, but these random variables invariably do influence the continuous time series that organize the course of events that take place while we are present.\n## Understanding these different components and their effects, is it possible to predict our future decisions?\n## Or do our decisions evolve according to a random walk and thus, can never be predicted?\n## How do we ensure that our decisions will reflect the objectives we are seeking to fulfill?","e0340a78":"# Random","6a822739":"> # Simulating a single Random walk","e046ce8e":"> # Implement Clumsiness","bf722df3":"> # Simulate Multiple Walks "}}