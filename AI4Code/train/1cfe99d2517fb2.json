{"cell_type":{"225e76ab":"code","37a49dcc":"code","e8aefc95":"code","6d8b84aa":"code","e395b923":"code","8481a618":"code","02e03364":"code","1f651d82":"code","9cbc6a02":"code","a0e7f83c":"code","fed58c2a":"code","e6360968":"code","54b60c41":"code","de896a70":"code","3f2fe425":"code","40d6cb7c":"code","295b1d65":"code","58957d4a":"code","553f0e11":"code","6b7786f9":"code","2ed1d879":"code","dd1390a9":"code","1c4cf6c6":"code","68d7afe5":"code","b7b81282":"code","fc8b8e53":"code","84c39ae5":"code","03c945d3":"code","d64a5fc0":"code","0187ca6e":"code","d6ed1d4c":"markdown","1e7402c1":"markdown","c939fed0":"markdown"},"source":{"225e76ab":"import numpy as np\nimport pandas as pd\nimport pydicom\nimport os\nimport random\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import KFold","37a49dcc":"import tensorflow as tf\n#import tensorflow.keras.backend as K\n#import tensorflow.keras.layers as L\n#import tensorflow.keras.models as M","e8aefc95":"def seed_everything(seed=2020):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    \nseed_everything(42)","6d8b84aa":"ROOT = \"..\/input\/osic-pulmonary-fibrosis-progression\"\nDESIRED_SIZE = 256\nBATCH_SIZE=128","e395b923":"tr = pd.read_csv(f\"{ROOT}\/train.csv\")\ntr.drop_duplicates(keep=False, inplace=True, subset=['Patient','Weeks'])\nchunk = pd.read_csv(f\"{ROOT}\/test.csv\")\n\nprint(\"add infos\")\nsub = pd.read_csv(f\"{ROOT}\/sample_submission.csv\")\nsub['Patient'] = sub['Patient_Week'].apply(lambda x:x.split('_')[0])\nsub['Weeks'] = sub['Patient_Week'].apply(lambda x: int(x.split('_')[-1]))\nsub =  sub[['Patient','Weeks','Confidence','Patient_Week']]\nsub = sub.merge(chunk.drop('Weeks', axis=1), on=\"Patient\")","8481a618":"tr['WHERE'] = 'train'\nchunk['WHERE'] = 'val'\nsub['WHERE'] = 'test'\ndata = tr.append([chunk, sub])","02e03364":"data['min_week'] = data['Weeks']\ndata.loc[data.WHERE=='test','min_week'] = np.nan\ndata['min_week'] = data.groupby('Patient')['min_week'].transform('min')","1f651d82":"base = data.loc[data.Weeks == data.min_week]\nbase = base[['Patient','FVC']].copy()\nbase.columns = ['Patient','min_FVC']\nbase['nb'] = 1\nbase['nb'] = base.groupby('Patient')['nb'].transform('cumsum')\nbase = base[base.nb==1]\nbase.drop('nb', axis=1, inplace=True)","9cbc6a02":"data = data.merge(base, on='Patient', how='left')\ndata['base_week'] = data['Weeks'] - data['min_week']\ndel base","a0e7f83c":"COLS = ['Sex','SmokingStatus'] #,'Age'\nFE = []\nfor col in COLS:\n    for mod in data[col].unique():\n        FE.append(mod)\n        data[mod] = (data[col] == mod).astype(int)\n#=================","fed58c2a":"#\ndata['age'] = (data['Age'] - data['Age'].min() ) \/ ( data['Age'].max() - data['Age'].min() )\ndata['BASE'] = (data['min_FVC'] - data['min_FVC'].min() ) \/ ( data['min_FVC'].max() - data['min_FVC'].min() )\ndata['week'] = (data['base_week'] - data['base_week'].min() ) \/ ( data['base_week'].max() - data['base_week'].min() )\ndata['percent'] = (data['Percent'] - data['Percent'].min() ) \/ ( data['Percent'].max() - data['Percent'].min() )\nFE += ['age','week','BASE'] #,'percent'","e6360968":"\"\"\"\nDEGS = [2,3,4,5] #,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\nfor deg in DEGS:\n    col = f\"age_{deg}\"\n    data[col] = data[\"age\"]**deg\n    data[col] = (data[col] - data[col].min() ) \/ ( data[col].max() - data[col].min() )\n    FE.append(col)\n#=============================================#\nfor deg in DEGS:\n    col = f\"week_{deg}\"\n    data[col] = data[\"week\"]**deg\n    data[col] = (data[col] - data[col].min() ) \/ ( data[col].max() - data[col].min() )\n    FE.append(col)\n#=============================================#\n\"\"\"","54b60c41":"tr = data.loc[data.WHERE=='train']\nchunk = data.loc[data.WHERE=='val']\nsub = data.loc[data.WHERE=='test']\ndel data","de896a70":"def metric( trueFVC, predFVC, predSTD ):\n    \n    clipSTD = np.clip( predSTD, 70 , 9e9 )  \n    \n    deltaFVC = np.clip( np.abs(trueFVC-predFVC), 0 , 1000 )  \n\n    return np.mean( -1*(np.sqrt(2)*deltaFVC\/clipSTD) - np.log( np.sqrt(2)*clipSTD ) )\n#","3f2fe425":"y = tr['FVC'].values\nz = tr[FE].values\nze = sub[FE].values","40d6cb7c":"z.shape","295b1d65":"from sklearn.linear_model import Ridge, ElasticNet\nfrom sklearn.ensemble import RandomForestClassifier","58957d4a":"NFOLD = 10\nkf = KFold(n_splits=NFOLD)","553f0e11":"#%%time\ncnt = 0\n#clf = ElasticNet(alpha=0.3, l1_ratio = 0.7)\nclf = Ridge(alpha=0.05)\n#clf  = RandomForestClassifier(max_depth=4, random_state=777, n_estimators=50)\n\npe = np.zeros((ze.shape[0], 2))\npred = np.zeros((z.shape[0], 2))\n\nfor tr_idx, val_idx in kf.split(z):\n    cnt += 1\n    print(f\"FOLD {cnt}\")\n    clf.fit(z[tr_idx], y[tr_idx]) #\n    #print(\"predict val...\")\n    pred[val_idx, 0] = clf.predict(z[val_idx])\n    pred_std = np.mean(np.abs(y[val_idx] - pred[val_idx, 0])) * np.sqrt(2)\n    pred[val_idx, 1] = pred_std\n    print(\"val\", metric(y[val_idx], pred[val_idx, 0], pred[val_idx, 1]))\n    #print(\"predict test...\")\n    pe[:, 0] += clf.predict(ze) \/ NFOLD\n    pe[:, 1] += pred_std \/ NFOLD\n#==============\nprint(\"oof\", metric(y, pred[:, 0], pred[:, 1]))","6b7786f9":"print(\"OOF uncertainty\", np.unique(pred[:, 1]))\nprint(\"TEST uncertainty\", np.unique(pe[:, 1]))","2ed1d879":"idxs = np.random.randint(0, y.shape[0], 80)\nplt.plot(y[idxs], label=\"ground truth\")\nplt.plot(pred[idxs, 0], label=\"prediction\")\nplt.legend(loc=\"best\")\nplt.show()","dd1390a9":"sub.head()","1c4cf6c6":"sub['FVC1'] = pe[:, 0]\nsub['Confidence1'] = pe[:, 1]","68d7afe5":"subm = sub[['Patient_Week','FVC','Confidence','FVC1','Confidence1']].copy()","b7b81282":"subm.loc[~subm.FVC1.isnull()].head(10)","fc8b8e53":"subm.loc[~subm.FVC1.isnull(),'FVC'] = subm.loc[~subm.FVC1.isnull(),'FVC1']\nsubm.loc[~subm.FVC1.isnull(),'Confidence'] = subm.loc[~subm.FVC1.isnull(),'Confidence1']","84c39ae5":"subm.head()","03c945d3":"subm.describe().T","d64a5fc0":"otest = pd.read_csv('..\/input\/osic-pulmonary-fibrosis-progression\/test.csv')\nfor i in range(len(otest)):\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'FVC'] = otest.FVC[i]\n    subm.loc[subm['Patient_Week']==otest.Patient[i]+'_'+str(otest.Weeks[i]), 'Confidence'] = 0.1","0187ca6e":"subm[[\"Patient_Week\",\"FVC\",\"Confidence\"]].to_csv(\"submission.csv\", index=False)","d6ed1d4c":"### Prediction","1e7402c1":"### Data Processing","c939fed0":"### Model"}}