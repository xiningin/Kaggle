{"cell_type":{"07cc2005":"code","3198bb01":"code","9c762ed7":"code","d30617a0":"code","04982017":"code","5d9023ee":"code","16963a7a":"code","76bc3c42":"code","4f476fea":"code","3d6a2bd4":"code","1d4d6012":"code","bae714b7":"markdown","7129c5bb":"markdown","bf53c63e":"markdown","f66ed63e":"markdown","dff65189":"markdown","ea999b68":"markdown"},"source":{"07cc2005":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as pl\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.utils import shuffle\nfrom sklearn.metrics import roc_curve, auc\nrandom_state = np.random.RandomState(0)","3198bb01":"data = pd.read_csv('..\/input\/handson-pima\/Hands on Exercise Feature Engineering_ pima-indians-diabetes (1).csv')\ndata.head()","9c762ed7":"data.info()","d30617a0":"#Extracting all the values in the data as array\narray = data.values\nX = array[:, 0:8]\ny = array[:,8]","04982017":"#Prepare train, test data\n#Apply 2 algorithms Logistic Regression, SVM\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.50, random_state = 1)\nclassifier1 = LogisticRegression()\nclassifier2 = svm.SVC(kernel = 'linear', probability = True)\nprobas1_ = classifier1.fit(X_train, y_train).predict_proba(X_test) #This will be help to detect probability\nprobas2_ = classifier2.fit(X_train,y_train).predict_proba(X_test)","5d9023ee":"#Compute ROC curve and AOC for logistic\n\nfpr1,tpr1, thresholds1 = roc_curve(y_test, probas1_[:,1])\nroc_auc1 = auc(fpr1,tpr1)\nprint(\"Area under ROC curve: %f\" % roc_auc1)","16963a7a":"#Compute ROC curve and AOC for SVM\n\nfpr2,tpr2, thresholds2 = roc_curve(y_test, probas2_[:,1])\nroc_auc2 = auc(fpr2,tpr2)\nprint(\"Area under ROC curve: %f\" % roc_auc2)","76bc3c42":"#Plot the ROC Curve\n#What to plot\npl.clf()\npl.plot(fpr1, tpr1, label = 'ROC Curve for logistic (area = %0.2f)' %roc_auc1)\npl.plot(fpr2, tpr2, label = 'ROC Curve for SVM (area = %0.2f)' %roc_auc2)\n#How to plot\npl.plot([0,1],[0,1], 'k--')\npl.xlim([0.0, 1.0])\npl.ylim([0.0, 1.0])\n#Legends\npl.xlabel('False Positive Rate')\npl.ylabel('True Positive Rate')\npl.title('Receiver rating characteristic example ')\npl.legend(loc = \"lower right\")\npl.show()","4f476fea":"i = np.arange(len(tpr1)) # index for df\nroc1 = pd.DataFrame({'fpr1' : pd.Series(fpr1, index=i),'tpr1' : pd.Series(tpr1, index = i), '1-fpr1' : pd.Series(1-fpr1, index = i), 'tf1' : pd.Series(tpr1 - (1-fpr1), index = i), 'thresholds1' : pd.Series(thresholds1, index = i)})\nprint(roc1.loc[(roc1.tf1-0).abs().argsort()[:1]])\n\ni = np.arange(len(tpr2)) # index for df\nroc2 = pd.DataFrame({'fpr2' : pd.Series(fpr2, index=i),'tpr2' : pd.Series(tpr2, index = i), '1-fpr2' : pd.Series(1-fpr2, index = i), 'tf2' : pd.Series(tpr2 - (1-fpr2), index = i), 'thresholds2' : pd.Series(thresholds2, index = i)})\nprint(roc2.loc[(roc2.tf2-0).abs().argsort()[:1]])","3d6a2bd4":"roc1.head()","1d4d6012":"roc2.head()","bae714b7":"# 1. Load packages and observe dataset","7129c5bb":"# 6. Watch the arrays in ROC1, ROC2","bf53c63e":"# 5. Find FPR,TPR, 1-FPR,TF1, threshold values","f66ed63e":"# 2. Prepare data and apply algorithms and detect probabilities","dff65189":"# 3. Compute AUC, ROC Curve","ea999b68":"# 4. Plot the ROC"}}