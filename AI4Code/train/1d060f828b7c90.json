{"cell_type":{"312092fc":"code","03ca5dfb":"code","21f8cb51":"code","8388926b":"code","f738df07":"code","16b7571b":"code","84b85aaa":"code","4f0cedb7":"code","44732263":"code","c3dc364c":"code","b96d0a3d":"code","5755c3ac":"code","375da710":"code","fb6be727":"code","ec1196e7":"code","2825822e":"code","8d8c859f":"code","e157c2cb":"code","8779b214":"code","d7484096":"code","ce3d1de7":"code","25a4bb66":"code","a0dc274c":"code","58f6b195":"code","9c8a4f49":"code","8d9fcc7b":"code","1184462f":"code","d61a0cc5":"code","53d442bd":"code","cc828896":"markdown","fec2edcb":"markdown","0f405be6":"markdown","26f45fe0":"markdown","6d509787":"markdown","c7d89acf":"markdown","e11031ea":"markdown","2138eb91":"markdown","4bdddaf7":"markdown","b049df7f":"markdown","9e0fd651":"markdown","29df9c05":"markdown","6dcd1b38":"markdown","dfa697db":"markdown","0468b1bb":"markdown","ca7b43cf":"markdown","2416a06c":"markdown","33a455f6":"markdown","cb128c49":"markdown","9e7deffe":"markdown","270d4256":"markdown","5e701ab2":"markdown","fd6ee302":"markdown","6723dc68":"markdown","4c3271ec":"markdown","ee4d82d9":"markdown","a77fb8ee":"markdown","9aa342fa":"markdown","864e5f5e":"markdown","9092f5c4":"markdown","fce91323":"markdown","1e9493ee":"markdown","afe46330":"markdown","910d6245":"markdown","0b0dba47":"markdown","51466199":"markdown","7b9a3cdf":"markdown","762712c1":"markdown"},"source":{"312092fc":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nplt.style.use('fivethirtyeight')","03ca5dfb":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\nprint('Training Data')\nprint(df_train.info(),'\\n')\nprint('Test Data')\nprint(df_test.info())","21f8cb51":"# Passenger ID\nprint('PassengerId is a unique ID given to every passenger on board\\n')\n# Passenger Class\nprint('Pclass is the class of the purchased ticket')\nprint(sorted(df_train['Pclass'].unique()),'\\n')\n# Name\nprint('Name is the name of the passenger\\n')\n# Sex\nprint('Sex is the gender of the passenger\\n')\n# Age\nprint('Age is the age of the passenger\\n')\n# Siblings and Spouses\nprint('SibSp is the number of siblings and spouses of the passenger on board')\nprint(sorted(df_train['SibSp'].unique()),'\\n')\n# Parents and Children\nprint('Parch is the number of parents and children of the passenger on board')\nprint(sorted(df_train['Parch'].unique()),'\\n')\n# Ticket Number\nprint('Ticket is the ticket number of the passenger\\n')\n# Fare\nprint('Fare is the price of the ticket of the passenger\\n')\n# Cabin\nprint('Cabin is the cabin number of the passenger\\n')\n# Embarked\nprint('Embarked is the port of embarkation of the passenger')\nprint(sorted(df_train['Embarked'].dropna().unique()))","8388926b":"df_miss_train = pd.DataFrame(((len(df_train)-df_train.count())*100\/len(df_train)).round(1), columns = ['Missing Training Data%'])\ndf_miss_train = df_miss_train.drop('Survived')\ndf_miss_test = pd.DataFrame(((len(df_test)-df_test.count())*100\/len(df_test)).round(1), columns = ['Missing Test Data%'])\ndf_miss_train_test = pd.concat([df_miss_train, df_miss_test], axis = 1)\ndf_miss_train_test","f738df07":"# Drop Cabin from both train and test data\ndf_train = df_train.drop('Cabin', axis=1)\ndf_test = df_test.drop('Cabin', axis=1)","16b7571b":"# Plot the correlation of Age with other features\ndf_train.corr()['Age'].sort_values()[:-1].plot(kind='bar')\nplt.show()","84b85aaa":"df_mean_age_pclass = df_train.groupby('Pclass').mean()['Age']\n\n# Create function to calculate mean Age per Pclass\ndef mean_age_pclass(features):\n    age = features[0]\n    pclass = features[1]\n    if pd.isnull(age):\n        return df_mean_age_pclass.loc[pclass]\n    else:\n        return age\n\n# Apply mean age to missing rows in training data\ndf_train['Age'] = df_train[['Age','Pclass']].apply(mean_age_pclass, axis=1)","4f0cedb7":"# Apply mean age(from training set) to missing rows in test data\ndf_test['Age'] = df_test[['Age','Pclass']].apply(mean_age_pclass, axis=1)","44732263":"# Find Pclass of passenger with missing fare info\nmrow_pclass = df_test[df_test['Fare'].isnull()]['Pclass'].iloc[0]\n# Find mean fare for mrow_pclass\nmrow_fare = df_test.groupby('Pclass').mean()['Fare'].loc[mrow_pclass]\n# Fill missing row with mrow_fare\ndf_test['Fare'].fillna(value=mrow_fare, inplace=True)","c3dc364c":"plt.figure(figsize=(10,6))\nsns.countplot(df_train['Survived'],palette='pastel')\nplt.title('Total count of passengers who survived')\nplt.show()","b96d0a3d":"plt.figure(figsize=(10,6))\nsns.countplot(df_train['Survived'],palette='pastel',hue=df_train['Sex'])\nplt.title('Total count of men and women who survived')\nplt.show()","5755c3ac":"plt.figure(figsize=(6,6))\ncolors = ['royalblue','orange','darkgreen']\nplt.pie(df_train[df_train['Survived'] == 1]['Pclass'].value_counts()\/df_train['Pclass'].value_counts(),\n        autopct = '%.1f%%',\n        colors = colors,\n        shadow = True\n       )\n# labels\npclass_labels = (df_train[df_train['Survived'] == 1]['Pclass'].value_counts()\/df_train['Pclass'].value_counts()).index\npclass_label_dict = {\"1\":\"1st class\",\n                     \"2\":\"2nd class\",\n                     \"3\":\"3rd class\"\n                    }\npclass_labels = [pclass_label_dict[str(value)] for value in pclass_labels]\nplt.legend(pclass_labels, bbox_to_anchor=(-0.1, 1.),\n           fontsize=10)\nplt.title('Percentage of passengers per class who survived')\nplt.tight_layout()\nplt.show()","375da710":"# Combining two features into one\ndf_train['Relatives'] = df_train['SibSp'] + df_train['Parch']\ndf_test['Relatives'] = df_test['SibSp'] + df_test['Parch']\n\n# Count plot of total relatives on board of passenges who survived\nplt.figure(figsize=(14,6))\nsns.countplot(df_train['Relatives'], palette='viridis', alpha=0.75, hue = df_train['Survived'])\n# sns.countplot(df_train[df_train['Survived']==1]['Relatives'], palette='viridis')\nplt.title('Total Relatives on board of passengers who survived')\nplt.show()","fb6be727":"# Drop SibSp and Parch column from Training Data\ndf_train = df_train.drop(['SibSp','Parch'],axis=1)\n\n# Drop SibSp and Parch column from Test Data\ndf_test = df_test.drop(['SibSp','Parch'],axis=1)","ec1196e7":"plt.figure(figsize=(12,6))\nsns.boxplot(x='Survived', y='Fare', data=df_train, linewidth=1.5, palette='Set3')\nplt.title('Box plot of fares of passengers who survived')\nplt.show()","2825822e":"plt.figure(figsize=(14,6))\nsns.countplot(df_train['Embarked'], palette='GnBu', hue=df_train['Survived'])\nplt.title('Count of port of embarkation of passengers who survived')\nplt.show()","8d8c859f":"# Drop Embarked columns from Training Data\ndf_train = df_train.drop('Embarked', axis=1)\n\n# Drop Embarked columns from Test Data\ndf_test = df_test.drop('Embarked', axis=1)","e157c2cb":"# Drop from training data\ndf_train = df_train.drop(['Name','PassengerId','Ticket'],axis=1)\n\n# Drop from test data\ndf_test_PassId = df_test['PassengerId'] # Needed for submission\ndf_test = df_test.drop(['Name','PassengerId','Ticket'],axis=1)","8779b214":"print('Training Data')\nprint(df_train.columns)\nprint('Number of Observations: ',len(df_train),'\\n')\nprint('Test Data')\nprint(df_test.columns)\nprint('Number of Observations: ',len(df_test))","d7484096":"X_train = df_train.drop('Survived',axis=1)\ny_train = df_train['Survived']\nX_test = df_test","ce3d1de7":"# Convert Sex to dummy variable\nX_train = pd.concat([X_train, pd.get_dummies(X_train['Sex'], drop_first=True)], axis=1)\nX_train = X_train.drop('Sex',axis=1)\n\nX_test = pd.concat([X_test, pd.get_dummies(X_test['Sex'], drop_first=True)], axis=1)\nX_test = X_test.drop('Sex',axis=1)\n\n# Convert Embarked to dummy variable\n# X_train = pd.concat([X_train, pd.get_dummies(X_train['Embarked'], drop_first=True)], axis=1)\n# X_train = X_train.drop('Embarked',axis=1)\n\n# X_test = pd.concat([X_test, pd.get_dummies(X_test['Embarked'], drop_first=True)], axis=1)\n# X_test = X_test.drop('Embarked',axis=1)","25a4bb66":"# Apply StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","a0dc274c":"# Import Grid Search and Random Forest Classifiers\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\n# Grid Search\nparameters = [{'n_estimators': [10,50,100,150,200,250,300] , 'criterion': ['entropy', 'gini'], 'max_features': ['sqrt','log2'] ,'n_jobs': [-1]}]\nclassifier = RandomForestClassifier()\ngrid_search = GridSearchCV(estimator = classifier,\n                           param_grid = parameters,\n                           scoring = 'accuracy')\n# Fit on training set\ngrid_search.fit(X_train, y_train)","58f6b195":"grid_search.best_params_","9c8a4f49":"rf_classifier = grid_search.best_estimator_\n# Fit on training data\nrf_classifier.fit(X_train,y_train)","8d9fcc7b":"# Import k-fold cross validation\nfrom sklearn.model_selection import cross_validate\nscore = cross_validate(estimator=rf_classifier,\n                       X=X_train,\n                       y=y_train,\n                       cv=10,\n                       scoring = ['accuracy','f1'],\n                       n_jobs=-1\n                      )","1184462f":"print('Mean Accuracy: ',(score['test_accuracy'].mean()*100).round(2),'%\\n')\nprint('Standard Deviation Accuracy: ',(score['test_accuracy'].std()*100).round(1),'%')","d61a0cc5":"predictions = rf_classifier.predict(X_test)","53d442bd":"output = pd.DataFrame({'PassengerId': df_test_PassId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint('Your submission was successfully saved!')","cc828896":"#### 3.2.4 Use grid search results and fit final model","fec2edcb":"#### 2.5.5 Did price of ticket affect survival chance?","0f405be6":"#### 2.4.4 Fare is missing in only 1 row in the test data. We will again use Pclass to determine mean fare to fill the missing row.","26f45fe0":"#### 3.2.1 Converting categorical features to dummy variables\n\nSince Pclass is already [1,2,3] and the relationship to survival rate depends on the value of Pclass, we will treat Pclass like a numerical feature instead of categorical feature","6d509787":"As seen from the plot, fare is an important feature in survival chance. This is expected from the relationship between Pclass and Survival. Pclass and fare have a linear relationship and it is logical that fare is also an important feature.","c7d89acf":"### 2.5 Feature Selection","e11031ea":"#### 2.4.1 Percentage missing data in both training and test data","2138eb91":"# 1 Introduction\n\nThis kernel focuses on EDA, data preprocessing, feature selection, modeling and predicting. The model I will use is RandomForest which is an ensemble of decision trees.","4bdddaf7":"#### 2.5.6 Does port of embarkation have an effect on survival chance?","b049df7f":"### 2.3 Feature Overview","9e0fd651":"#### 2.5.1 Total count of passengers who survived","29df9c05":"# 4 Submission","6dcd1b38":"Grid search results","dfa697db":"#### 3.2.3 Applying grid search on random forest classifier and fit on training set","0468b1bb":"#### 2.5.7 Name, Ticket number & PassengerID\n\nWe will drop these features which are unique to each passenger.","ca7b43cf":"### 2.4 Missing Data","2416a06c":"#### 2.4.3 Age feature is missing about 20% in both training and test data. Since it's a significant amount, we will fill the missing data instead of dropping the rows with missing data. We will first correlate Age with other features. We will then use the feature(s) with the strongest correlation to fill missing rows.","33a455f6":"Let's look at list of all features that will be used in the model","cb128c49":"Cross validation results","9e7deffe":"#### 3.2.5 Validate classifier using k-fold cross validation","270d4256":"Most passengers had no relatives on board. People with 1-3 relatives had a higher chance of survival than those without relatives or more than 3 relatives on board. However there is no clear pattern to survival rate. We will still keep the Relatives in the model and drop SibSp and Parch.","5e701ab2":"# 2 EDA","fd6ee302":"1st class and 2nd class passengers had a higher chance of survival over 3rd class passengers. We will keep this feature in the model.","6723dc68":"Most passengers embarked at Southampton and hence most survivals are also passengers of the same port of embarkation. There is no distinct pattern and we will drop port of embarkation in the model.","4c3271ec":"Majority of females on board survived. This is an important feature to keep in the model for prediction","ee4d82d9":"### 2.1 Training Data\n\n* 891 observations, 11 features and 1 target variable\n* Features - Age, Cabin and Embarked contain missing data","a77fb8ee":"#### 2.5.2 Total count of men and women who survived ","9aa342fa":"#### 3.2.2 Feature scaling","864e5f5e":"# 3 Model","9092f5c4":"#### 2.4.2 Cabin feature will be dropped as it is missing about 80% of the observations in both training and test data. Cabin is the cabin number of the passenger and is likely given based on the Pclass and Fare. Since we have Pclass and Fare, we can safely drop Cabin.","fce91323":"Pclass has the strongest correlation to Age and it makes sense. An older person probably has more money to buy a higher class ticket. We will find the mean Age per passenger class and then use Pclass information in the missing row to fill Age as mean Age for that Pclass.","1e9493ee":"For simplicity, we will combine the two features SibSp and Parch into one feature called Relatives","afe46330":"### 3.2 Data Preprocessing","910d6245":"#### 2.5.3 How many passengers from each passenger class survived?","0b0dba47":"### 2.2 Test Data\n\n* 418 observations and 11 features\n* Features - Age, Fare and Cabin contain missing data","51466199":"#### 2.5.4 Effect of siblings, spouses, parents and children on board to survival chance","7b9a3cdf":"### 3.3 Prediction","762712c1":"### 3.1 Split data into input matrix and output vector"}}