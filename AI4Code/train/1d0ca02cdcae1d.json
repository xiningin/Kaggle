{"cell_type":{"79898545":"code","af8fa5e6":"code","f9bded44":"code","51f12725":"code","a92ca776":"code","325f4c02":"code","40403b5a":"code","21c4b7d8":"code","472a0899":"code","8e040fda":"code","d3b4fe12":"code","8c216350":"code","ce54a92d":"code","5919b8f1":"code","954f8a26":"code","ffec32b8":"code","101c618a":"code","10322342":"code","42f0d4fd":"code","74a4b243":"code","d43dbecf":"code","a28ce64c":"code","6b94df1c":"code","4e3c359b":"code","797d10bc":"code","2287bc19":"code","8bb7762a":"code","fa55f17d":"code","c49b67b1":"code","d45583b4":"code","413182f2":"code","1744359c":"code","565ca232":"code","d9c22ec8":"code","6d141eb0":"code","0d5bec26":"code","d38b13c8":"code","dece1f4c":"code","8ffd89a3":"markdown","71cd56ff":"markdown","03bb4824":"markdown","270b20cf":"markdown","cdbbdb0b":"markdown","8ea02356":"markdown","27b9da55":"markdown","1a2e7ffd":"markdown"},"source":{"79898545":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af8fa5e6":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly import tools\nfrom plotly.subplots import make_subplots","f9bded44":"df = pd.read_csv('\/kaggle\/input\/insurance\/insurance.csv')\ndf.head()","51f12725":"df.shape","a92ca776":"df.info()","325f4c02":"df.describe()","40403b5a":"df.isna().sum()","21c4b7d8":"sns.distplot(x=df['age'])","472a0899":"fig = go.Figure()\n\nfig.add_traces(go.Histogram(x=df['age'],\n                           xbins=dict(\n                           size=2),\n                           opacity=1))\n\nfig.update_layout(title_text='Age Distribution',\n                 xaxis_title='Age',\n                 yaxis_title='Count',\n                 xaxis={'showgrid':False},\n                 yaxis={'showgrid':False},\n                 bargap=0.5,\n                 template='ggplot2',\n                 height=500,\n                 width=900)\nfig.show()","8e040fda":"trace0 = go.Bar(x=df['sex'].value_counts().index, y=df['sex'].value_counts(), text=(df['sex'].value_counts()\/len(df['sex'])*100))\n\ntrace1 = go.Bar(x=df['smoker'].value_counts().index, y=df['smoker'].value_counts(), text=(df['smoker'].value_counts()\/len(df['smoker'])*100))\n\ntrace2 =go.Bar(x=df['region'].value_counts().index, y=df['region'].value_counts(), text=(df['region'].value_counts()\/len(df['region'])*100))\n\ntrace3 =go.Bar(x=df['children'].value_counts().index, y=df['children'].value_counts(), text=(df['children'].value_counts()\/len(df['children'])*100))\n\nfig = make_subplots(rows=2, cols=2, specs=[[{'type':'bar'},{'type':'bar'}],\n                                          [{'type':'bar'},{'type':'bar'}]],\n                   subplot_titles=['Male  VS  Female','Smoker  VS NoN-Smoker', 'Regions', 'Childern'])\n\nfig.append_trace(trace0,1,1)\nfig.append_trace(trace1,1,2)\nfig.append_trace(trace2,2,1)\nfig.append_trace(trace3,2,2)\n\nfig.update_traces(marker_color=['lightblue','lightpink','aquamarine','silver','snow','slategray'],textposition='outside', texttemplate= '%{text:.4s}%')\nfig['layout'].update(height=1000, width=1200, title='Univariate Analysis')\n\nfig.show()","d3b4fe12":"sns.distplot(x = df['bmi'])","8c216350":"fig= go.Figure()\nfig.add_traces(go.Histogram(x=df['bmi'],\n                 xbins=dict(\n                 size=2),\n                 opacity=1))\n\nfig.update_layout(title_text='BMI Distribution',\n                 xaxis_title='BMI',\n                 yaxis_title='Count',\n                 xaxis = {'showgrid':False},\n                 yaxis= {'showgrid':False},\n                 template='seaborn',\n                 bargap=0.5,\n                 height=500,\n                 width=600)\n\nfig.show()","ce54a92d":"sns.distplot(x=df['charges'])","5919b8f1":"fig = px.histogram(df,x='charges', title='Charges', nbins=200)\nfig.show()","954f8a26":"fig = px.box(df ,x='age', y='charges', title='Medical Charges According To Age')\nfig.show()","ffec32b8":"ax = df.groupby('age')['charges'].mean().reset_index().sort_values(by='charges', ascending=False)\nax.plot(kind='bar', figsize=(15,7), color='lightgreen')\nplt.xlabel('Age', fontsize=12)\nplt.ylabel('Average Charges', fontsize=12)\nplt.title('Average Charges According To Age', fontsize=17)","101c618a":"fig = px.box(x=df['sex'], y=df['charges'], height=500, width=700)\nfig.show()","10322342":"gen =df.groupby('sex')['charges'].mean().reset_index()\nfig = px.bar(x=gen['sex'], y=gen['charges'], height=500, width=600, title='Average Medical Charges of Male and Female')\nfig.update_traces(marker_color=['lightpink','lightblue'])\nfig.show()","42f0d4fd":"fig = px.box(df, x='children', y='charges')\nfig.show()","74a4b243":"child = df.groupby('children')['charges'].mean().reset_index().sort_values(by='charges',ascending=False)\nfig = px.bar(x=child['children'], y=child['charges'], height=500, width=700, title='Average Medical Charges With Children')\nfig.update_traces(marker_color=['teal','darkcyan','cadetblue','lightseagreen','darkturquoise','mediumturquoise'])\nfig.show()","d43dbecf":"fig = px.box(df, x='smoker', y='charges', title='Medical Charges Of Smoker VS NoN-Smoker', height=500, width=600)\nfig.show()","a28ce64c":"smoker = df.groupby('smoker')['charges'].mean().reset_index()\n\nfig = px.bar(x=smoker['smoker'], y=smoker['charges'], height=500, width=600, title='Average Medical Charges OF Smoker VS NoN-Smoker')\nfig.update_traces(marker_color=['gainsboro','gray '])","6b94df1c":"fig = px.box(df, x='region', y='charges', height=500, width=700, title='Medical Charges In US Regions')\nfig.show()","4e3c359b":"regions = df.groupby('region')['charges'].mean().reset_index()\n\nfig = px.bar(x=regions['region'], y=regions['charges'], height=500, width=700, title='Average Medical Charges In US Regions')\nfig.update_traces(marker_color=['darkorange','orange','gold','orangered','tomato'])\nfig.show()","797d10bc":"fig =px.scatter(df, x='bmi', y='charges', height=500, width=700, title='Medical Charges Of Different BMI')\nfig.show()","2287bc19":"avg_bmi = df.groupby('bmi')['charges'].mean().reset_index()\n\nfig =px.scatter(x=avg_bmi['bmi'], color=avg_bmi['charges'],y=avg_bmi['charges'])\nfig.show()","8bb7762a":"categorical = df.select_dtypes(exclude=['int64','float64']).columns\ncategorical","fa55f17d":"for i in categorical:\n    df[i]=pd.factorize(df[i])[0]","c49b67b1":"df.head(3)","d45583b4":"x = df.drop('charges',1)\ny = df['charges']","413182f2":"print(x.shape)\nprint(y.shape)","1744359c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline","565ca232":"x_train, x_test, y_train, y_test = train_test_split(x,y, random_state=101, test_size=0.2)","d9c22ec8":"lin = make_pipeline(StandardScaler(), LinearRegression())\n\nlaso = make_pipeline(StandardScaler(), Lasso())\n\ndt = make_pipeline(StandardScaler(), DecisionTreeRegressor())\n\nrfr = make_pipeline(StandardScaler(), RandomForestRegressor())\n","6d141eb0":"lin.fit(x_train, y_train)\n\nprint('Score of Linear Regression Model is: ',lin.score(x_test, y_test))\n\ny_pred=lin.predict(x_test)\n\nprint('MAE Of Linear Regression Model is: ',mean_absolute_error(y_pred, y_test))","0d5bec26":"laso.fit(x_train, y_train)\n\nprint('Score of Lasso Regression Model is: ', laso.score(x_test, y_test))\n\ny_pred1 = laso.predict(x_test)\n\nprint('MAE of Lasso Regression Model is: ', mean_absolute_error(y_pred1, y_test))","d38b13c8":"dt.fit(x_train, y_train)\n\nprint('Score Of DecisionTree Regressor Model is: ', dt.score(x_test, y_test))\n\ny_pred2 =dt.predict(x_test)\n\nprint('MAE of DecisionTree Regressor Model is: ', mean_absolute_error(y_pred2, y_test))","dece1f4c":"rfr.fit(x_train, y_train)\n\nprint('Score Of RandomForestRegressor Model is: ', dt.score(x_test, y_test))\n\ny_pred3 =dt.predict(x_test)\n\nprint('MAE of RandomForest Regressor Model is: ', mean_absolute_error(y_pred3, y_test))","8ffd89a3":"# Bivariate Analysis","71cd56ff":"# Data Preprocessing","03bb4824":"# DecisionTree Regressor","270b20cf":"# Pipeline","cdbbdb0b":"# Univariate Analysis","8ea02356":"# RandomForest Regressor","27b9da55":"# Lasso Regressor","1a2e7ffd":"# Linear Regressor "}}