{"cell_type":{"ea4552da":"code","6d8349d8":"code","566ca2bb":"code","3f8daf55":"code","75ec3891":"code","4f37fff0":"code","2cb88cf5":"code","b4976783":"code","d7e3edcb":"code","3327b932":"code","c318f12f":"code","78977c50":"code","89d180c2":"code","1c5e8527":"code","81a7caec":"code","5dbe8bee":"code","b2f7bffb":"code","ac16d49a":"code","ee9ff6fa":"code","66b37284":"code","2cfd455b":"code","34dd171e":"code","91762a6e":"code","accf11fa":"code","7fb78aa6":"code","df2ba5cd":"code","c286e2c0":"code","09da1945":"code","b665fd90":"code","8fbe59be":"code","6da5d620":"code","e2ba4871":"code","92c36104":"code","82a7d277":"code","4b947724":"code","5b1ef296":"code","171e9df6":"code","c12fd0b5":"code","b45b928d":"code","3d18ac65":"code","f9335bdb":"code","06801e5b":"code","e37c4e15":"code","251b4ac2":"markdown","0073c02a":"markdown","1cfac6a3":"markdown","6e5a01c5":"markdown","0ea5c099":"markdown","327ab48a":"markdown","f6a900b0":"markdown","bc700dc2":"markdown","b52b1b44":"markdown","4cb7fdd2":"markdown","24619320":"markdown","0d21b298":"markdown"},"source":{"ea4552da":"# Importing the dataset\n\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\nsns.set_style('whitegrid')\nplt.rc('patch', edgecolor='black')\nsns.set_context(\"notebook\", font_scale=1.3, rc={\"lines.linewidth\": 1.5})","6d8349d8":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ndata.head()","566ca2bb":"data.shape","3f8daf55":"data.drop(['Ticket','Cabin'], axis = 1, inplace = True)","75ec3891":"data.info()","4f37fff0":"#number of missing values\n\ndata.isna().sum()","2cb88cf5":"f,ax=plt.subplots(1,3,figsize=(18,6))\nsns.countplot(data.Survived,ax=ax[0])\nax[0].set_title('Survived')\nsns.countplot(data.Sex,hue=data.Survived,ax=ax[1])\nax[1].set_title('Sex <--> Survived')\nsns.countplot(data.Pclass,hue=data.Survived,ax=ax[2])\nax[2].set_title('Pclass <--> Survived')","b4976783":"t1 = pd.crosstab([data.Sex,data.Pclass],data.Survived.round(3)*100,margins = True).style.background_gradient(vmin=0)","d7e3edcb":"t2 = pd.crosstab([data.Embarked,data.Pclass],data.Survived.round(3)*100,margins = True).style.background_gradient(vmin=0)","3327b932":"t3 = pd.pivot_table(data, 'Fare','Pclass',aggfunc=['count', 'sum', 'mean']).style.background_gradient(vmin=0)","c318f12f":"from IPython.core.display import HTML\n\ndef multi_table(table_list):\n    return HTML(\n        f\"<table><tr> {''.join(['<td>' + table._repr_html_() + '<\/td>' for table in table_list])} <\/tr><\/table>\")\n\nmulti_table([t1, t2, t3])","78977c50":"sns.boxplot(data.Fare)","89d180c2":"data[data.Fare > 500]","1c5e8527":"sns.jointplot('Age','Fare',data)","81a7caec":"#exclude PassengerId from pairplot\n\nsns.pairplot(data.iloc[:,1:])","5dbe8bee":"plt.figure(figsize=(8,6))\nsns.violinplot('Sex','Age',hue = 'Survived',data=data,split=True)","b2f7bffb":"plt.figure(figsize=(8,6))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=data,split=True)","ac16d49a":"f,ax=plt.subplots(1,2,figsize=(18,6))\nsns.countplot(data.Survived,hue=data.SibSp,ax=ax[0])\nax[0].set_title('Survived <--> SibSp')\nsns.countplot(data.Survived,hue=data.Parch,ax=ax[1])\nax[1].set_title('Survived <--> Parch')","ee9ff6fa":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nX = data[['SibSp', 'Parch']]\n# VIF dataframe\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = X.columns\n  \n# calculating VIF for each feature\nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i)\n                          for i in range(len(X.columns))]\n  \nprint(vif_data)","66b37284":"from scipy.stats import pearsonr\n\npearsonr(data.SibSp, data.Parch)","2cfd455b":"data['Number_of_relatives'] = data.SibSp + data.Parch\ndata.drop(data[['SibSp','Parch']],axis = 1, inplace = True)","34dd171e":"sns.countplot(data['Number_of_relatives'])","91762a6e":"data.nunique()","accf11fa":"data.value_counts('Embarked')","7fb78aa6":"sns.factorplot('Embarked','Survived',data=data)","df2ba5cd":"print('Oldest Passenger was of:',data['Age'].max(),'Years')\nprint('Youngest Passenger was of:',data['Age'].min(),'Years')\nprint('Average Age on the ship:',data['Age'].mean(),'Years')","c286e2c0":"plt.figure(figsize=(7,7))\nsns.heatmap(data.corr(), square=True, mask = np.triu(data.corr()), cmap= \"coolwarm\",linewidths=0.2, annot = True,fmt='.2f',annot_kws={'size':9})","09da1945":"data.query('Pclass == 1').groupby('Pclass').agg({'Fare':'mean'})","b665fd90":"data.Embarked.fillna('S', inplace = True)","8fbe59be":"data.isna().sum()","6da5d620":"age_mean = data['Age'].mean()\nage_std = data['Age'].std()\nnull_values_count = data['Age'].isnull().count()\nage_null_random_list = np.random.randint(age_mean-age_std,age_mean+age_std,size = null_values_count)\nage_null_random_list","e2ba4871":"data['Age'][np.isnan(data['Age'])] = age_null_random_list\ndata['CategoricalAge'] = pd.cut(data['Age'], 5, precision=0)\ndata[[\"CategoricalAge\", \"Survived\"]].groupby('CategoricalAge', as_index = False).mean().sort_values(by='Survived', ascending=False)","92c36104":"data['Fare'] = data['Fare'].fillna(data['Fare'].median()) #\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439\ndata['CategoricalFare'] = pd.qcut(data['Fare'], 4, precision=0)\ndata[[\"CategoricalFare\", \"Survived\"]].groupby(\"CategoricalFare\").mean().sort_values(by = 'Survived', ascending = False)","82a7d277":"def rightValue(interval):\n  return interval.right\n\ndata['CategoricalAge'] = data['CategoricalAge'].apply(rightValue)\ndata['CategoricalFare'] = data['CategoricalFare'].apply(rightValue)\ndata.head()","4b947724":"sns.factorplot('CategoricalAge','Survived',data=data,col='Pclass')","5b1ef296":"data.drop(['Name','Age','Fare'], axis = 1, inplace = True)","171e9df6":"data.isna().sum()","c12fd0b5":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\n\nfor feature in ['CategoricalFare','CategoricalAge']:\n    data[feature]=encoder.fit_transform(data[feature])","b45b928d":"data.head()","3d18ac65":"data.Sex = data.Sex.astype('category').cat.codes","f9335bdb":"data = pd.get_dummies(data, columns = [\"Embarked\"])","06801e5b":"X = data.drop('Survived',axis = 1)\ny = data['Survived']","e37c4e15":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nclassifiers = [\n    KNeighborsClassifier(5),\n    SVC(probability=True, kernel='rbf'),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    GaussianNB(),\n    LogisticRegression(solver = 'liblinear'),\n]\n\nlog_cols = [\"Classifier\", \"Accuracy\"]\nlog = pd.DataFrame(columns=log_cols)\n\nacc_dict = {}\n\nfor clf in classifiers:\n    name = clf.__class__.__name__\n    clf.fit(X_train, y_train)\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    if name in acc_dict:\n        acc_dict[name] += acc\n    else:\n        acc_dict[name] = acc\n\nfor clf in acc_dict:\n    acc_dict[clf] = acc_dict[clf]\n    log_entry = pd.DataFrame([[clf, acc_dict[clf]]], columns=log_cols)\n    log = log.append(log_entry)\n\nplt.xlabel('Accuracy')\nplt.title('Classifier Accuracy')\n\nsns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log.sort_values(by='Accuracy'), color=\"b\")","251b4ac2":"**Thus, RandomForestClassifier and GaussianNB have the best accuracy score.\nI will use RandomForestClassifier for submissions.**","0073c02a":"**3 of 12 columns contain null values. We'll fix it!**","1cfac6a3":"**By the fact, these people, whose Fare was enormous, are:**\n* https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/annie-moore-ward.html\n* https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/thomas-cardeza.html\n* https:\/\/www.encyclopedia-titanica.org\/titanic-survivor\/gustave-lesueur.html","6e5a01c5":"**We'll dpop \"Cabin\" and \"Ticket\" because these columns are meaningless for analysis**","0ea5c099":"**No, \"Parch\" and \"SibSp\" are not multicollinear. However, we can slill unite these features into one \"Number_of_relatives\"**","327ab48a":"# **ML models**","f6a900b0":"**Let's check if \"Parch\" and \"SibSp\" are multicollinear**","bc700dc2":"#  Feature Engineering","b52b1b44":"**We will try to use different models to find the best one**","4cb7fdd2":"# Hi!)\n\n**Hope you'll find this notebook usefull ^_^**","24619320":"**You see, people from Cherbourg had a much higher chance to survive!**","0d21b298":"# Exploratory Data Analysis"}}