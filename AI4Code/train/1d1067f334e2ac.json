{"cell_type":{"19ef2ae2":"code","4be87f58":"code","96c9ddd7":"code","f8a2c3a1":"code","34809676":"code","e7e448f1":"code","343c0420":"code","307dab20":"code","283f99f5":"code","6dcc7092":"code","d8ccf5a2":"code","f66bc1ec":"code","ac20b954":"code","a71dfcc8":"code","765b2e93":"code","251b3fab":"code","c6b9a86b":"code","8414cc19":"code","fc3e7c18":"markdown","e330315c":"markdown","9f848fee":"markdown","027471e4":"markdown","f154b1e5":"markdown","b00216e8":"markdown","5607f97b":"markdown","92d89966":"markdown","b6cd5d53":"markdown","381c2d50":"markdown","3145c746":"markdown","6128f0d7":"markdown","9a4f4c65":"markdown"},"source":{"19ef2ae2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4be87f58":"def tublee():\n    \"\"\"return tub\"\"\"\n    tub = ('dog','cat','horse')\n    tub2 = (4,5,6)\n    return tub,tub2\nprint(tublee())","96c9ddd7":"r = 5       #global scope\ndef calculating_circle_area():\n    r = 7           #local scope\n    pi = 3.14       \n    area = pi*r*r\n    return area\nprint(calculating_circle_area())","f8a2c3a1":"r = 5\ndef calculating_circle_area():      \n    pi = 3.14       \n    area = pi*r*r\n    return area\nprint(calculating_circle_area())","34809676":"import builtins\ndir(builtins)","e7e448f1":"def circle_area():\n    r = 5\n    def result():\n        pi = 3.14\n        a = pi*r*r\n        return a\n    return result()\nprint(circle_area())","343c0420":"def triangel_area(a ,h = 5):\n    calculate = (a*h)\/2\n    return calculate\nprint(triangel_area(2))\n# what if we want to change default arguments\nprint(triangel_area(7,5))","307dab20":"def f(*args):\n    for i in args:\n        i = i*i*i\n        print(i)\nf(5)\nf(6,2,1)","283f99f5":"def f(**kwargs):\n    for key, value in kwargs.items():\n        print(key,\" \",value)\nf(color = 'black', mean = 'siyah', feature = 'color of darkness')","6dcc7092":"circle_area = lambda pi,r : pi*r*r\nprint(circle_area(3.14,4))","d8ccf5a2":"square = lambda x : x**2\nprint(square(7))","f66bc1ec":"date_of_birth = [1994,1995,1996,1997]\na = map(lambda x:x+7, date_of_birth)\nprint(list(a))","ac20b954":"country = \"T\u00dcRK\u0130YE\"\nmy_country = iter(country)\nprint(next(my_country))\nprint(next(my_country))\nprint(next(my_country))\nprint(next(my_country))\nprint(next(my_country))\nprint(next(my_country))\nprint(next(my_country))","a71dfcc8":"country = \"T\u00dcRK\u0130YE\"\nmy_country = iter(country)\nprint(*my_country)","765b2e93":"list1 = ['black','purple','pink']\nlist2 = ['siyah','mor','pembe']\nz = zip(list1,list2)\nprint(z)\nz_list=list(z)\nprint(z_list)","251b3fab":"un_zip = zip(*z_list)\nun_zip1,un_zip2 = list(un_zip)\nprint(un_zip1)\nprint(un_zip2)\nprint(type(un_zip2))","c6b9a86b":"list1 = [1,2,3,4,5]\nlist2 = [i*2 for i in list1]\nprint(list1,list2)","8414cc19":"list1 = [1,2,3,4,5]\nlist2 = [i*2 if i<3 else i-3 if i==3 else i\/2 for i in list1]\nprint(list2)","fc3e7c18":"**Lambda Function**\n\nlambda arguments: expression\n\nLambda functions can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can be used wherever function objects are required.\n\n","e330315c":"**List Comprehension**\n\nList comprehensions provide a concise way to create lists.\n","9f848fee":"**Flexible Arg\u00fcments**\n\nIn Python, the single-asterisk form of *args can be used as a parameter to send a non-keyworded variable-length argument list to functions.\n\nThe double asterisk form of **kwargs is used to pass a keyworded, variable-length argument dictionary to a function.","027471e4":"**Scope**\n\nVariables can only reach the area in which they are defined, which is called scope. Think of it as the area of code where variables can be used. Python supports global variables (usable in the entire program) and local variables.\n","f154b1e5":"**Iterators**\n\nIterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","b00216e8":"**Anonymous Function**\n\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list","5607f97b":"Well! How can we learn what is built in scope","92d89966":"In here local scope didn't defined. Python uses global scope.","b6cd5d53":"**Default arg\u00fcments**\n\nDefault values indicate that the function argument will take that value if no argument value is passed during function call.\n","381c2d50":"**Nested Function**\n\nA function defined inside another function is called a nested function. Nested functions can access variables of the enclosing scope.\nA nested function can access a non-local variable.","3145c746":"**Zip lists**\nThe zip() function take iterables (can be zero or more), makes iterator that aggregates elements based on the iterables passed, and returns an iterator of tuples.\n","6128f0d7":"In here, local scope defined. Python used local scope.","9a4f4c65":"**Docstrings**\n\n   Python documentation strings (or docstrings) provide a convenient way of associating documentation with Python modules, functions, classes, and methods.  An object's docsting is defined by including a string constant as the first statement in the object's definition. It's specified in source code that is used, like a comment, to document a specific segment of code.\n   \n   **Tuble**\n   \n   In Python programming, a tuple is similar to a list. The difference between the two is that we cannot change the elements of a tuple once it is assigned whereas in a list, elements can be changed.\n   \n "}}