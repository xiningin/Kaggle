{"cell_type":{"e4ef75bd":"code","a485832f":"code","0ba0dc31":"code","d48db0bd":"code","4e2a69f9":"code","39652520":"code","e7d2550f":"code","094e29bf":"code","89d6e9d3":"code","a47d5bbc":"code","4976fb37":"code","e93606ed":"code","1a19d9b0":"code","e2f155dd":"code","c463a247":"code","a28717a8":"code","705a9ed1":"code","2879ffce":"code","6581ba1c":"code","cbdc61a1":"code","913eaced":"code","88cbb093":"code","f1496095":"code","2008e907":"code","d4d23c88":"code","ea8368ac":"code","031b4672":"code","3c6f6da3":"code","16c21693":"code","711a171a":"code","cc091c47":"code","71316957":"code","8761298b":"code","4123c400":"code","15eb34ce":"code","dc7a1b97":"code","2ea98a49":"code","6289e54b":"code","af5b42ae":"code","776d5364":"markdown","180234e2":"markdown","43ae65f8":"markdown","1be9a988":"markdown","3b71a270":"markdown","77c5b193":"markdown","0820adb3":"markdown"},"source":{"e4ef75bd":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n# import urllib.request\n# import re\n# import requests\n# from bs4 import BeautifulSoup as bs\n\n\n# For transformations and predictions\n# from sklearn.preprocessing import FunctionTransformer, OrdinalEncoder\nfrom sklearn.linear_model import LinearRegression\n# from scipy.optimize import curve_fit\n# from sklearn.neighbors import KNeighborsRegressor\n# from sklearn.preprocessing import MinMaxScaler\n# from sklearn.metrics import pairwise_distances\nfrom sklearn.tree import DecisionTreeRegressor\n\n# For scoring\n# from sklearn.metrics import mean_squared_log_error as msle\nfrom sklearn.metrics import mean_squared_error as mse\n\n# For validation\nfrom sklearn.model_selection import train_test_split as split","a485832f":"df_booking = pd.read_csv(\"..\/input\/hotel-booking-demand\/hotel_bookings.csv\")\nprint(df_booking.shape)\ndf_booking.sample(5)","0ba0dc31":"# To find NaN-containing columns:\n\npd.isnull(df_booking).sum() > 0","d48db0bd":"# Replace NaN in 'children':\n\ndf_booking.children.fillna(0, inplace=True)","4e2a69f9":"# Create 'total_guests' column: \n\ndf_booking['total_guests']=df_booking['adults'] + df_booking['children'] + df_booking['babies']","39652520":"# Create 'total_nights' column: \n\ndf_booking['total_nights']=df_booking['stays_in_weekend_nights'] + df_booking['stays_in_week_nights']","e7d2550f":"# Replace month name with number:\n\ndf_booking['arrival_date_month_number'] = df_booking['arrival_date_month'].replace(['January', 'February', 'March', 'April', 'May', 'June', 'July'\n                                                                                  ,'August', 'September', 'October', 'November', 'December']\n                                                                                   , [1,2,3,4,5,6,7,8,9,10,11,12]).astype(str).astype(int)","094e29bf":"# Create binary columns for City\/Resort hotel and Portugal\/International:\n\ndf_booking['hotel_type'] = df_booking['hotel'].replace(['Resort Hotel', 'City Hotel'], [0,1])\ndf_booking['country_type'] = df_booking['country']\ndf_booking.loc[(df_booking['country_type'] != 'PRT'), 'country_type'] = 'International'\ndf_booking['country_type'] = df_booking['country_type'].replace(['International', 'PRT'], [0,1])","89d6e9d3":"# Check for outliers in average daily rate (adr) column:\n\noutlier_adr = df_booking.groupby(['adr']).size()\noutlier_adr","a47d5bbc":"# Consequently removing outliers:\n\nmask= (df_booking['adr']>400) | (df_booking['adr'] <= 0) \ndf_booking.loc[mask]\nprint(df_booking.shape)\ndf_booking = df_booking.loc[~mask, :]\nprint(df_booking.shape)","4976fb37":"# Removing total_guests outliers:\n\nmask = (df_booking['total_guests']>=10) | ((df_booking['adults'] == 0) & (df_booking['children'] == 0)) | (df_booking['babies']>=8) \nprint(df_booking.shape)\ndf_booking = df_booking.loc[~mask, :]\nprint(df_booking.shape)","e93606ed":"# Selecting columns for Regression:\n\ndf_booking_full = df_booking[['hotel_type', 'country_type',\n                            'arrival_date_month_number', 'stays_in_weekend_nights', 'total_nights',\n                            'stays_in_week_nights', 'adults', 'children', 'babies', 'total_guests', 'meal', \n                            'reserved_room_type', 'adr',\n                            'total_of_special_requests']].copy()\nprint(df_booking_full.shape)\ndf_booking_full.sample(5)","1a19d9b0":"# Meals - for Linear Regression will use dummies (see below); for Decision Tree will use scaling:\n# SC and Undefined are distinct string values but according to article are the same, therefore combined. \n\ndf_booking_full.loc[(df_booking_full['meal'] == 'SC')| (df_booking_full['meal'] == 'Undefined'), 'meal'] = 'SC_Undefined'\n\n# Scaling - to run before Decision Tree Regression:\n\n# meal_order = ['SC_Undefined', 'BB', 'HB', 'FB']\n# meal_map = dict(zip(meal_order, range(len(meal_order))))\n# df_booking_full.loc[:, 'meal'] = df_booking_full['meal'].map(meal_map)","e2f155dd":"# Scaling of room types (reserved and assigned):\n\nreserved_room_type_order = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'L']\nreserved_room_type_map = dict(zip(reserved_room_type_order, range(len(reserved_room_type_order))))\n\ndf_booking_full.loc[:, 'reserved_room_type'] = df_booking_full['reserved_room_type'].map(reserved_room_type_map)","c463a247":"df_booking_full.sample(5)","a28717a8":"df_booking_for_lr = df_booking_full[['hotel_type', 'country_type','arrival_date_month_number'\n                            , 'stays_in_weekend_nights', 'stays_in_week_nights'\n                            , 'adults', 'children', 'babies', 'total_guests', 'total_nights'\n                            , 'meal', 'reserved_room_type', 'adr'\n                            , 'total_of_special_requests'\n                            ]].copy()","705a9ed1":"# Categorizing months into seasons:\n\ndef season(x):\n    if x in (11, 12, 1, 2, 3):\n        x = 'winter'\n    elif x in (4, 5, 6, 7, 8):\n        x = 'summer'\n    else:\n        x = 'fall'\n    return (x)\n\ndf_booking_for_lr['season'] = df_booking_for_lr['arrival_date_month_number'].apply(season)","2879ffce":"# Categorizing adults, children, babies into is_family:\n\ndef is_family(X):\n    if ((X.adults > 0) & (X.children > 0)):\n        fam = 1\n    elif ((X.adults > 0) & (X.babies > 0)):\n        fam = 1\n    else:\n        fam = 0\n    return fam\n\ndf_booking_for_lr['is_family'] = df_booking_for_lr.apply(is_family, axis = 1)","6581ba1c":"# Categorizing long_stay:\n\ndef long_stay(X):\n    if (X.total_nights > 7):\n        stay = 1\n    else:\n        stay = 0\n    return stay\n\ndf_booking_for_lr['long_stay'] = df_booking_for_lr.apply(long_stay, axis = 1)","cbdc61a1":"# Categorizing is_weekend:\n\ndef is_weekend(X):\n    if (X.stays_in_weekend_nights != 0):\n        we = 1\n    else:\n        we = 0\n    return we\n\ndf_booking_for_lr['is_weekend'] = df_booking_for_lr.apply(is_weekend, axis = 1)","913eaced":"# And droping pre-scaling columns:\n\ndf_booking_for_lr = df_booking_for_lr.drop(['adults', 'children', 'babies', 'arrival_date_month_number'], axis = 1)\n\ndf_booking_for_lr = df_booking_for_lr.drop(['stays_in_weekend_nights', 'stays_in_week_nights'], axis = 1)\n\n# if nights_combination_index is merged, then 'count' should also dropped:\n# df_booking_for_lr = df_booking_for_lr.drop(['count'], axis = 1)","88cbb093":"            # To create 'stays_in_weekend_nights', 'stays_in_week_nights' combinations, followed by indexing. \n            # This will allow us to use the index as measure for number of weekend vs. week nights:\n\n            nights = df_booking_for_lr.groupby(['stays_in_weekend_nights', 'stays_in_week_nights']).size().reset_index().rename(columns={0:'count'})\n            print(nights.shape)\n            nights['nights_combination_index'] = nights.index.values\n\n            # Joining nights DataFrame with df_booking to create a column for the weekend\/week nights combinations:\n\n            df_booking_for_lr = pd.merge(df_booking_for_lr, nights , on=['stays_in_weekend_nights', 'stays_in_week_nights'])","f1496095":"# Linear Regression - \n\n# 1. Creating dummies for Meals and Season: \n\ndf_booking_for_lr_with_dummies = pd.get_dummies(df_booking_for_lr, drop_first = True)\nprint(df_booking_for_lr_with_dummies.shape)\ndf_booking_for_lr_with_dummies.sample(5)","2008e907":"# 2. Split:\n\nX = df_booking_for_lr_with_dummies.drop('adr', axis = 1)\ny = df_booking_for_lr_with_dummies.adr\n\nX_train, X_test, y_train, y_test = split(X, y, train_size = 0.7, random_state = 142857)\n\n\n# 3. Fit:\n\nlinear_model_1 = LinearRegression().fit(X_train, y_train)\n\n\n# 4. Predict:\n\ny_train_pred = linear_model_1.predict(X_train)\n\n# 5. Visualize:\n\nax = sns.scatterplot(x=y_train, y=y_train_pred, color = 'purple' )\nax.plot(y_train, y_train, 'purple')\nax.set_xlabel('y_train')\nax.set_ylabel('y_train_pred')","d4d23c88":"# 6. Inspect:\n\nlist(zip(X_train.columns, linear_model_1.coef_))","ea8368ac":"# 7. Score:\n\nlinear_model_1_train_mse = np.sqrt(mse(y_train, y_train_pred)).round(2)","031b4672":"# 8. Validate:\n\nprint('linear_model_1_train_mse is ', linear_model_1_train_mse)\n\ny_test_pred = linear_model_1.predict(X_test)\nlinear_model_1_test_mse= np.sqrt(mse(y_test, y_test_pred)).round(2)\n\nprint('linear_model_1_test_mse is ', linear_model_1_test_mse)","3c6f6da3":"# Creating Model Regressor for Hotels and Families: \n\nclass HotelFamilyModel:\n    def __init__(self):\n        self.city_adults_lm = LinearRegression()\n        self.city_families_lm = LinearRegression()\n        self.resort_adults_lm = LinearRegression()\n        self.resort_families_lm = LinearRegression()\n\n\n    def fit(self, X, y=None):\n        # Fitting the city_adults model\n        self.city_adults_lm.fit(X.loc[((X.hotel_type == 1) & (X.is_family == 0)), :], y.loc[((X.hotel_type == 1) & (X.is_family == 0))])\n        \n        # Fitting the city_families model\n        self.city_families_lm.fit(X.loc[((X.hotel_type == 1) & (X.is_family == 1)), :], y.loc[((X.hotel_type == 1) & (X.is_family == 1))])\n        \n        # Fitting the resort_adults model\n        self.resort_adults_lm.fit(X.loc[((X.hotel_type == 0) & (X.is_family == 0)), :], y.loc[((X.hotel_type == 0) & (X.is_family == 0))])\n        \n        # Fitting the resort_families model\n        self.resort_families_lm.fit(X.loc[((X.hotel_type == 0) & (X.is_family == 1)), :], y.loc[((X.hotel_type == 0) & (X.is_family == 1))])\n        return self\n\n    def predict(self, X):\n        city_adults_df = X.loc[((X.hotel_type == 1) & (X.is_family == 0)), :]\n        y_city_adults_pred = pd.Series(self.city_adults_lm.predict(city_adults_df), index=city_adults_df.index)\n\n        city_families_df = X.loc[((X.hotel_type == 1) & (X.is_family == 1)), :]\n        y_city_families_pred = pd.Series(self.city_families_lm.predict(city_families_df), index=city_families_df.index)\n        \n        resort_adults_df = X.loc[((X.hotel_type == 0) & (X.is_family == 0)), :]\n        y_resort_adults_pred = pd.Series(self.resort_adults_lm.predict(resort_adults_df), index=resort_adults_df.index)\n        \n        resort_families_df = X.loc[((X.hotel_type == 0) & (X.is_family == 1)), :]\n        y_resort_families_pred = pd.Series(self.resort_families_lm.predict(resort_families_df), index=resort_families_df.index)\n\n        return pd.concat([y_city_adults_pred, y_city_families_pred, y_resort_adults_pred, y_resort_families_pred])","16c21693":"hotel_family_model = HotelFamilyModel()\n\nX = df_booking_for_lr_with_dummies.drop('adr', axis = 1)\ny = df_booking_for_lr_with_dummies.adr\n\nX_train, X_test, y_train, y_test = split(X, y, train_size = 0.7, random_state = 142857)\n\nhotel_family_model.fit(X_train, y_train)\n\ny_train_pred = hotel_family_model.predict(X_train).reindex(y_train.index)\n\nax = sns.scatterplot(x=y_train, y=y_train_pred)\nax.plot(y_train, y_train, 'b')\nax.set_xlabel('y_train')\nax.set_ylabel('y_train_pred')","711a171a":"print('linear_model_1_train_rmse is ', linear_model_1_train_mse)\nprint('linear_model_1_test_rmse is ', linear_model_1_test_mse)\nprint('hotel_family-model train rmse is ', np.sqrt(mse(y_train, y_train_pred)).round(2))\n\ny_test_pred = hotel_family_model.predict(X_test).reindex(y_test.index)\n\nprint('hotel_family-model test rmse is ', np.sqrt(mse(y_test, y_test_pred)).round(2))","cc091c47":"df_booking_full.loc[(df_booking_full['meal'] == 'SC')| (df_booking_full['meal'] == 'Undefined'), 'meal'] = 'SC_Undefined'\nmeal_order = ['SC_Undefined', 'BB', 'HB', 'FB']\nmeal_map = dict(zip(meal_order, range(len(meal_order))))\ndf_booking_full.loc[:, 'meal'] = df_booking_full['meal'].map(meal_map)","71316957":"print(df_booking_full.shape)\ndf_booking_full.loc[(df_booking_full['meal'] == 'SC')| (df_booking_full['meal'] == 'Undefined'), 'meal'] = 'SC_Undefined'\nmeal_order = ['SC_Undefined', 'BB', 'HB', 'FB']\nmeal_map = dict(zip(meal_order, range(len(meal_order))))\ndf_booking_full.loc[:, 'meal'] = df_booking_full['meal'].map(meal_map)","8761298b":"df_booking_dt = df_booking_full[['hotel_type', 'country_type'\n                            , 'arrival_date_month_number'\n                            , 'stays_in_weekend_nights', 'stays_in_week_nights'\n                            , 'total_guests'\n                            , 'meal', 'reserved_room_type', 'total_of_special_requests'\n                            , 'adr'\n                            ]].copy()\ndf_booking_dt.sample(5)","4123c400":"# 1. Split:\n\nX = df_booking_dt.drop('adr', axis=1)\ny = df_booking_dt.adr\n\nX_train, X_test, y_train, y_test = split(X, y, random_state=312150)\n\n# 2. Assign and Fit:\n\ndt_model = DecisionTreeRegressor(max_leaf_nodes=100)\n\ndt_model.fit(X_train, y_train)","15eb34ce":"!pip install pydot\nimport pydot\nfrom IPython.display import Image\nfrom sklearn.externals.six import StringIO\nfrom sklearn.tree import export_graphviz","dc7a1b97":"# 3. Modeling the Tree:\n\ndot_data = StringIO()  \nexport_graphviz(dt_model, out_file=dot_data, feature_names=X.columns, leaves_parallel=True)  \ngraph = pydot.graph_from_dot_data(dot_data.getvalue())[0]  \nImage(graph.create_png(), width=750) ","2ea98a49":"# Features Importance:\n\nfor feature, importance in zip(X.columns, dt_model.feature_importances_):\n    print(f'{feature:12}: {importance}')","6289e54b":"# 4. Predict:\n\ny_train_pred = dt_model.predict(X_train)\n\n# 5. Visualize:\n\nax = sns.scatterplot(x=y_train, y=y_train_pred)\nax.plot(y_train, y_train, 'r')","af5b42ae":"# 6. Score:\n\nRMSE_train = np.sqrt(mse(y_train, y_train_pred)).round(3)\n\n# Validate:\n\ny_test_pred = dt_model.predict(X_test)\n\nRMSE_test = np.sqrt(mse(y_test, y_test_pred)).round(3)\n\nprint('Decision Tree train RMSE is ', RMSE_train)\nprint('Decision Tree test RMSE is ', RMSE_test)","776d5364":"#### Using hotel_family model we get mild improvement of MSE\n#### Predictions using: ADR processing, nights combination index, staying periods did not improve MSE","180234e2":"### Conclusions for Linear Regression:","43ae65f8":"## Decision Tree predicts ADR better than Linear Models","1be9a988":"### Decision Tree:\n(Zohar Hirsch contribution)","3b71a270":"### ML to Predict ADR will be done using the following models:\n1. Linear Regression\n2. Decision Tree","77c5b193":"### df_booking_for_lr (df_booking_full columns adaptation):","0820adb3":"#### Code that was not used:"}}