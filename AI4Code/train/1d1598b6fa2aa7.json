{"cell_type":{"c2704e60":"code","23924f57":"code","512ed786":"code","976e216b":"code","dcc85915":"code","e74fcda7":"code","adbc9edd":"code","a59adc93":"code","25e0fbc2":"code","1781417b":"code","dd889e7a":"code","030488fe":"code","953aba6a":"code","73a7f3dc":"code","b876a57e":"code","76b748f6":"markdown","32a0dce6":"markdown","70bc071d":"markdown","07d976a4":"markdown","45784444":"markdown","11290343":"markdown","912d63c5":"markdown","427d1639":"markdown","42cb8d64":"markdown","114cfc2d":"markdown","626b0c54":"markdown","3fdddcfc":"markdown","2602896b":"markdown","fe454fa9":"markdown","d46451b0":"markdown","d84ac152":"markdown","9c40262e":"markdown","5996f6ce":"markdown","fc88897a":"markdown"},"source":{"c2704e60":"import time\nimport numpy as np\nimport pandas as pd\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom skimage import io\nfrom ipywidgets import widgets","23924f57":"import plotly.express as px\nimport plotly.graph_objs as go","512ed786":"df = px.data.iris()\n\nfig = px.scatter(df,\n                 x='sepal_width',\n                 y='sepal_length'\n)\n\nfig.show()","976e216b":"fig = px.scatter(df,\n                 x=\"sepal_width\",\n                 y=\"sepal_length\",\n                 color=\"species\",\n                 size='petal_length',\n                 hover_data=['petal_width'])\nfig.show()","dcc85915":"x = np.linspace(-0.5, 0.5, 1000)\n\nfig = px.line(x=x,\n              y=x*np.cos(1\/x),\n              labels={'x':'x',\n                      'y':'y',}\n)\n\nfig.show()","e74fcda7":"t = np.linspace(0, 4*np.pi, 400)\n\nfig = go.Figure([\n    go.Scatter(name='Cos(t)', x=t, y=np.cos(t),\n               mode='lines', line=dict(color='blue')\n    ),\n    go.Scatter(name='Sin(t)', x=t, y=np.sin(t),\n               mode='lines', line=dict(color='red')\n    )\n])\n\nfig.show()","adbc9edd":"df = px.data.gapminder().query(\"continent == 'Europe' and year == 2007 and pop > 2.e6\")\n\nfig = px.bar(df, y='pop', x='country', text='pop')\n\nfig.update_traces(texttemplate='%{text:.2s}',\n                  textposition='outside')\n\nfig.update_layout(uniformtext_minsize=8,\n                  uniformtext_mode='hide')\n\nfig.show()","a59adc93":"df = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"),\n                 x=\"gdpPercap\",\n                 y=\"lifeExp\",\n                 size=\"pop\",\n                 color=\"continent\",\n                 hover_name=\"country\",\n                 log_x=True,\n                 size_max=60\n)\n\nfig.show()","25e0fbc2":"import plotly.figure_factory as ff\n\nx = np.random.randn(1000)\n\nfig = ff.create_distplot([x], ['distplot'])\n\nfig.show()","1781417b":"df = px.data.tips()\n\nfig = px.box(df, x=\"time\", y=\"total_bill\")\n\nfig.show()","dd889e7a":"df = px.data.iris()\nfig = px.scatter_3d(df, x='sepal_length', y='sepal_width', z='petal_width',\n              color='species')\nfig.show()","030488fe":"z_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/api_docs\/mt_bruno_elevation.csv')\n\nz = z_data.values\nsh_0, sh_1 = z.shape\n\nx, y = np.linspace(0, 1, sh_0), np.linspace(0, 1, sh_1)\n\nfig = go.Figure([\n    go.Surface(z=z,\n               x=x,\n               y=y\n    )\n])\n\nfig.update_layout(title='Mt Bruno Elevation',\n                  autosize=False,\n                  width=500,\n                  height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\nfig.show()","953aba6a":"# load dataset\ndf = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/volcano.csv\")\n\n# Create figure\nfig = go.Figure()\n\n# Add surface trace\nfig.add_trace(\n    go.Heatmap(z=df.values.tolist(),\n               colorscale=\"Viridis\"\n    )\n)\n\n# Update plot sizing\nfig.update_layout(\n    width=800,\n    height=900,\n    autosize=False,\n    margin=dict(t=100, b=0, l=0, r=0),\n)\n\n# Update 3D scene options\nfig.update_scenes(\n    aspectratio=dict(x=1, y=1, z=0.7),\n    aspectmode=\"manual\"\n)\n\n# Add drowdowns\n# button_layer_1_height = 1.08\nbutton_layer_1_height = 1.12\nbutton_layer_2_height = 1.065\n\nfig.update_layout(\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"colorscale\", \"Viridis\"],\n                    label=\"Viridis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Cividis\"],\n                    label=\"Cividis\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Blues\"],\n                    label=\"Blues\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"colorscale\", \"Greens\"],\n                    label=\"Greens\",\n                    method=\"restyle\"\n                ),\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.1,\n            xanchor=\"left\",\n            y=button_layer_1_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[\"reversescale\", False],\n                    label=\"False\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[\"reversescale\", True],\n                    label=\"True\",\n                    method=\"restyle\"\n                )\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.13,\n            xanchor=\"left\",\n            y=button_layer_2_height,\n            yanchor=\"top\"\n        ),\n        dict(\n            buttons=list([\n                dict(\n                    args=[{\"contours.showlines\": False, \"type\": \"contour\"}],\n                    label=\"Hide lines\",\n                    method=\"restyle\"\n                ),\n                dict(\n                    args=[{\"contours.showlines\": True, \"type\": \"contour\"}],\n                    label=\"Show lines\",\n                    method=\"restyle\"\n                ),\n            ]),\n            type = \"buttons\",\n            direction=\"right\",\n            pad={\"r\": 10, \"t\": 10},\n            showactive=True,\n            x=0.5,\n            xanchor=\"left\",\n            y=button_layer_2_height,\n            yanchor=\"top\"\n        ),\n    ]\n)\n\nfig.update_layout(\n    annotations=[\n        dict(text=\"colorscale\", x=0, xref=\"paper\", y=1.1, yref=\"paper\",\n                             align=\"left\", showarrow=False),\n        dict(text=\"Reverse<br>Colorscale\", x=0, xref=\"paper\", y=1.06,\n                             yref=\"paper\", showarrow=False),\n        dict(text=\"Lines\", x=0.47, xref=\"paper\", y=1.045, yref=\"paper\",\n                             showarrow=False)\n    ])\n\nfig.show()","73a7f3dc":"df = px.data.gapminder()\npx.scatter(df,\n           x=\"gdpPercap\",\n           y=\"lifeExp\",\n           animation_frame=\"year\",\n           animation_group=\"country\",\n           size=\"pop\",\n           color=\"continent\",\n           hover_name=\"country\",\n           log_x=True,\n           size_max=55,\n           range_x=[100,100000],\n           range_y=[25,90]\n)","b876a57e":"vol = io.imread(\"https:\/\/s3.amazonaws.com\/assets.datacamp.com\/blog_assets\/attention-mri.tif\")\nvolume = vol.T\nr, c = volume[0].shape\n\nnb_frames = 68\n\nfig = go.Figure(frames=[go.Frame(data=go.Surface(\n    z=(6.7 - k * 0.1) * np.ones((r, c)),\n    surfacecolor=np.flipud(volume[67 - k]),\n    cmin=0, cmax=200\n    ),\n    name=str(k) # you need to name the frame for the animation to behave properly\n    )\n    for k in range(nb_frames)])\n\n# Add data to be displayed before animation starts\nfig.add_trace(go.Surface(\n    z=6.7 * np.ones((r, c)),\n    surfacecolor=np.flipud(volume[67]),\n    colorscale='Gray',\n    cmin=0, cmax=200,\n    colorbar=dict(thickness=20, ticklen=4)\n    ))\n\n\ndef frame_args(duration):\n    return {\n            \"frame\": {\"duration\": duration},\n            \"mode\": \"immediate\",\n            \"fromcurrent\": True,\n            \"transition\": {\"duration\": duration, \"easing\": \"linear\"},\n        }\n\nsliders = [\n            {\n                \"pad\": {\"b\": 10, \"t\": 60},\n                \"len\": 0.9,\n                \"x\": 0.1,\n                \"y\": 0,\n                \"steps\": [\n                    {\n                        \"args\": [[f.name], frame_args(0)],\n                        \"label\": str(k),\n                        \"method\": \"animate\",\n                    }\n                    for k, f in enumerate(fig.frames)\n                ],\n            }\n        ]\n\n# Layout\nfig.update_layout(\n         title='Slices in volumetric data',\n         width=600,\n         height=600,\n         scene=dict(\n                    zaxis=dict(range=[-0.1, 6.8], autorange=False),\n                    aspectratio=dict(x=1, y=1, z=1),\n                    ),\n         updatemenus = [\n            {\n                \"buttons\": [\n                    {\n                        \"args\": [None, frame_args(50)],\n                        \"label\": \"&#9654;\", # play symbol\n                        \"method\": \"animate\",\n                    },\n                    {\n                        \"args\": [[None], frame_args(0)],\n                        \"label\": \"&#9724;\", # pause symbol\n                        \"method\": \"animate\",\n                    },\n                ],\n                \"direction\": \"left\",\n                \"pad\": {\"r\": 10, \"t\": 70},\n                \"type\": \"buttons\",\n                \"x\": 0.1,\n                \"y\": 0,\n            }\n         ],\n         sliders=sliders\n)\n\nfig.show()","76b748f6":"Let's plot two functions on an one plot.","32a0dce6":"### Line Charts\n\nWe can also plot not only points, but also lines. Let's plot function below:\n\n$$y = x \\cos(\\frac{1}{x})$$","70bc071d":"### Displot\n\nAnd displot! More information - https:\/\/plotly.com\/python\/distplot\/","07d976a4":"## Basic Charts","45784444":"As you can see, this chart is fully interactive. We can use the toolbar on the top-right to perform various operations on the data: zooming and panning, for example. When we hover over a data point, we get a tooltip. We can even save the plot as a PNG image.","11290343":"### 3D Plots\n\nOfcourse you can create a 3D plots - https:\/\/plotly.com\/python\/#3d-charts","912d63c5":"### Scatter Plots\n\nWe will start by creating a basic scatter plot.\nMore information - https:\/\/plotly.com\/python\/line-and-scatter\/","427d1639":"### Box Plot\n\nBox plot - https:\/\/plotly.com\/python\/box-plots\/","42cb8d64":"On the second chart, we have already used the ```plotly.graph_objs``` instead of the ```plotly.express```, which allows us to fine-tune the charts.\n\nMore information - https:\/\/plotly.com\/python\/line-charts\/","114cfc2d":"### Animated figures","626b0c54":"```plotly.graph_objs``` figures support an ```update_traces()``` method that may be used to update multiple nested properties of one or more of a figure's traces.\n\nAlso ```plotly.graph_objs``` figures support an ```update_layout()``` method that may be used to update multiple nested properties of a figure's layout.\n\nMore information about Bar charts - https:\/\/plotly.com\/python\/bar-charts\/\n\n\n","3fdddcfc":"### Bubble Charts\n\nAlso Bubble Charts\n\nMore information - https:\/\/plotly.com\/python\/bubble-charts\/","2602896b":"![](https:\/\/revistas.isfodosu.edu.do\/public\/enlaceinteres\/Plotly-logo-01-square.png)\n\n## Introduction to Plotly\n\n**[Plot.ly](http:\/\/https:\/\/plotly.com\/)** - is a Python graphing library makes interactive, publication-quality graphs and plots. Plotly is free and open source and you can view the source, report issues or contribute on [GitHub](http:\/\/https:\/\/github.com\/plotly). You can use it for Python without signing up to any service, use it in offline, without being connected to the internet, use Dash is for free. Plotly also has commercial offerings, such as Dash Enterprise and Chart Studio Enterprise.\n\n### Goal\n\nThis is a kernel for showing the awesome capabilities of the popular visualiztion library. We will start from simple charts and goes to more difficult examples. The main goal is to get you interested in trying to use this library in your projects.\n\n### Why Plotly?\n\n*- We have ```matplotlib``` and ```seaborn```, why do we need to use one more library?*\n\n**Plotly** provides a wide range of interactive plotting options and is one of the most interactive python visualization libraries. It can be used not only in Jupyter Notebooks but you can deploy it on web sites using Dash. Dash is a productive Python framework for building web analytic applications. On the other hand, ```matplotlib``` and ```seaborn``` focus on bulding \"static\" visualisations without interactive elements. The real beauty of interactive plots is that they provide a user interface for detailed data exploration. For example, you can see exact numerical values by mousing over points, hide uninteresting series from the visualization, zoom in onto a specific part of the plot, etc.\n\nThe analogue of **Plotly** is **Bokeh**. It is another library for creating interactive visualizations for Python. But **Plotly** has advantages, it is ease of learning and use. \n\nBegin with importing necessary modules.","fe454fa9":"### Demo assignment and useful resources\n\n- **[Plotly Python Open Source Graphing Library Basic Charts](https:\/\/plotly.com\/python\/basic-charts\/)**.\n\n- **[Fundamentals Plotly Examples](https:\/\/plotly.com\/python\/#fundamentals)**\n\n- **[Plotly Examples for AI and ML](https:\/\/plotly.com\/python\/#ai_ml)**\n\n- **[Dash is the most downloaded, trusted framework for building machine learning web apps in Python.](https:\/\/plotly.com\/building-machine-learning-web-apps-in-python\/)**\n\n- **[Plotly tutorial for beginners](https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners)**\n\n- **[Earthquake Animation with Plotly](https:\/\/www.kaggle.com\/kanncaa1\/earthquake-animation-with-plotly)**\n\n\n","d46451b0":"### Visualizing MRU Volume slices","d84ac152":"#### Difference between ```express``` and ```graph_objects```\n\n**Plotly Express** is the easy-to-use, high-level interface to **Plotly**, which operates on a variety of types of data and produces easy-to-style figures. \n\nIf **Plotly Express** does not provide a good starting point, it is possible to use the more generic, for example ```go.Scatter``` class from ```plotly.graph_objects```. ```go.Scatter``` have more opportunities for styling and alignments plots.","9c40262e":"### Conclusions\n\nPlotly is very powerfull instrument for visualising data which more flexiable and interactive.","5996f6ce":"### Custom Buttons in Python","fc88897a":"### Bar charts\n\n```plotly``` also supports bar charts."}}