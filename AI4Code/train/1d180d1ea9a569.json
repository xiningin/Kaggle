{"cell_type":{"23c0d0b0":"code","edf60cf0":"code","37d3141a":"code","94079982":"code","1f94096f":"code","ce910d51":"code","f5e77d0f":"code","89a0cd97":"code","b5826bb2":"code","ffc99de9":"code","cbdbf874":"code","a85c2049":"code","0910d67c":"code","4b4b6bfe":"code","e156f186":"code","a2f39ae8":"code","983a6d6a":"code","f76ca749":"code","d96cc6ff":"code","1f8ba1cb":"code","675e7a18":"code","b4720f5c":"code","7c3f9c51":"code","8ccb946a":"code","69d91f71":"code","e41211d0":"code","76793957":"code","b6b2e14c":"code","8bc18169":"code","fe2b1bf3":"code","46a9fac8":"code","05d89d97":"code","ffa58444":"code","6a26aa8a":"code","37aa4cec":"code","4503b47b":"code","9cd7381b":"code","62e87424":"code","4f9896a6":"code","6c92263f":"code","e7e2fff8":"code","6c1e2fc4":"code","b167cab3":"code","9a96851d":"code","eb410100":"code","89ad1841":"code","a19140e3":"code","2a72b7e7":"code","a97f3687":"code","c88e4c33":"markdown","353a7922":"markdown","0182985d":"markdown","9f26ff04":"markdown","84f25b04":"markdown","def39978":"markdown","34c170a9":"markdown","b0799755":"markdown","63aa140d":"markdown","ea2e6a27":"markdown","e20015f4":"markdown","ee2f28c9":"markdown","551f122b":"markdown"},"source":{"23c0d0b0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport datetime as dt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nfrom yellowbrick.cluster import KElbowVisualizer\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\n","edf60cf0":"from shutil import copyfile\n\ncopyfile(src= \"..\/input\/helpers\/data_prep.py\", dst=\"..\/working\/data_prep.py\")\ncopyfile(src= \"..\/input\/helpers\/eda.py\", dst=\"..\/working\/eda.py\")\ncopyfile(src= \"..\/input\/helpers\/helper.py\", dst=\"..\/working\/eda.py\")\nfrom data_prep import*\nfrom eda import*\nfrom helper import *","37d3141a":"df=pd.read_csv(\"\/kaggle\/input\/online-retail-ii-uci\/online_retail_II.csv\")","94079982":"check_df(df)","1f94096f":"#There are invoice number with C which represents the returs \n#so we wil eliminate them and postage rows \nprint(len(df[df[\"Invoice\"].str.contains(\"C\", na=False)]))\nprint(len(df[df[\"Description\"].str.contains(\"POSTAGE\", na=False)]))","ce910d51":"df = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]","f5e77d0f":"df = df[~df[\"Description\"].str.contains(\"POSTAGE\", na=False)]","89a0cd97":"#Check the data gaian, there are still negative values in quantity and price columns\ncheck_df(df)","b5826bb2":"print(len(df[df[\"Quantity\"]<0]))\nprint(len(df[df[\"Price\"]<0]))","ffc99de9":"missing_values_table(df) #132220","cbdbf874":"df.dropna(inplace=True)\n","a85c2049":"#After dropping the NA rows the Quantity and Price negative values also eliminated\nprint(len(df[df[\"Quantity\"]<0]))\nprint(len(df[df[\"Price\"]<0]))","0910d67c":"#Cat_cols: categoric variable\n#Num_cols: numeric variable\n#Cat_but_car: categoric but cardinal\ncat_cols, num_cols, cat_but_car = grab_col_names(df) ","4b4b6bfe":"num_cols #We need to eliminate Custoer Id","e156f186":"num_cols=[col for col in num_cols if col not in [\"Customer ID\"]]","a2f39ae8":"num_cols #check again","983a6d6a":"#Lets check the nnumeric values distribution \ndef graphbybox(dataframe,colname):\n    \"\"\"\n\n    Parameters\n    ----------\n    dataframe: dataframe of the variable will be plotted\n    colname: columns name of the variable\n\n    Returns\n    -------\n    draws boxplot of the given variable\n\n    \"\"\"\n    plt.boxplot(dataframe[colname],vert=False )\n    plt.title(colname)\n    plt.show()\n","f76ca749":"for col in num_cols:\n    graphbybox(df,col)","d96cc6ff":"#Needed to check numeric variables detailly \n","1f8ba1cb":"# %99 of the Price variable changes between 0 - 12.75 but there are some outlier values\ndf[\"Price\"].describe([0, 0.25, 0.50,0.75, 0.95, 0.99, 1]).T","675e7a18":"df[\"Quantity\"].describe([0, 0.25, 0.50,0.75, 0.95, 0.99, 1]).T","b4720f5c":"#We can hold down the outlier values and take our thresholds small","7c3f9c51":"#use my function to hold down the outlier values\nfor col in num_cols:\n    replace_with_thresholds(df, col,q1=0.01, q3=0.99)","8ccb946a":"#check if there is left any outlier\nfor col in num_cols:\n    print(col, check_outlier(df, col,q1=0.10, q3=0.99))","69d91f71":"#Add the total amount of purchase\ndf[\"TotalPrice\"]=df[\"Quantity\"]*df[\"Price\"] ","e41211d0":"len(df[df[\"TotalPrice\"]<0]) # no 0 amount in data","76793957":"print(df[\"InvoiceDate\"].max())  #2011-12-09 12:50:00\ntoday_date=dt.datetime(2011, 12, 11) #determine the analyse date","b6b2e14c":"df[\"InvoiceDate\"]= pd.to_datetime(df[\"InvoiceDate\"])","8bc18169":"new_df= df.groupby('Customer ID').agg({'InvoiceDate': lambda InvoiceDate: (today_date - InvoiceDate.max()).days,\n                                                                        'Invoice': lambda Invoice: Invoice.nunique(),\n                                                                        'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n","fe2b1bf3":"new_df.head()","46a9fac8":"new_df.columns = [\"Recency\",\"Frequency\",\"Monetary\"]","05d89d97":"new_df.head()","ffa58444":"dff=new_df.copy()","6a26aa8a":"\nsc = MinMaxScaler((0, 1)) \ndff= sc.fit_transform(dff)\n","37aa4cec":"dff[0:5]","4503b47b":"kmeans = KMeans()\nssd = []  #sum os squarred distance\nK = range(1, 30)\n","9cd7381b":"for k in K:\n    kmeans = KMeans(n_clusters=k).fit(dff)\n    ssd.append(kmeans.inertia_)","62e87424":"plt.plot(K, ssd, \"bx-\")\nplt.xlabel(\"Distance Residual Sums Against Different K Values\")\nplt.title(\"Optimal Cluster Numbers\")\nplt.show()\n#in the figure we see after 5 the SSE decrease slows down\n#Iwe may choose a value between 5-10","4f9896a6":"kmeans = KMeans(n_clusters=10).fit(dff)\n","6c92263f":"kumeler = kmeans.labels_","e7e2fff8":"len(kumeler)","6c1e2fc4":"new_df.shape","b167cab3":"segmented_customers=pd.DataFrame({\"Customer ID\":new_df.index,\"Clusters\":kumeler,\"Recency\":new_df.Recency,\"Frequency\":new_df.Frequency,\"Monetary\":new_df.Monetary})","9a96851d":"segmented_customers.head()","eb410100":"pd.set_option('display.float_format', lambda x: '%.2f' % x)","89ad1841":"x=segmented_customers[[\"Clusters\",\"Recency\",\"Frequency\",\"Monetary\"]].groupby(\"Clusters\").agg([\"min\",\"max\",\"mean\"])","a19140e3":"x","2a72b7e7":"#Cluster 8. seemds best , recency is low so means these customers shopped recently,\n#Monetary is teh biggest and also teh frequency.\n","a97f3687":"x.sort_values(by=\"Monetary\")","c88e4c33":"# **3.Data Preview**","353a7922":"# **5. Standardization**","0182985d":"Missing Values","9f26ff04":"# **4.Feature Engineering**","84f25b04":"<font color ='red'> **Introduction**\n\nOnline Retail II data set contains all the transactions  between 01\/12\/2009 and 09\/12\/2011 for different countries.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n<font color ='red'>**Features**\n    \n1.<font color ='red'> Invoice Number: <font color ='black'> The unique invoice number for each transaction.\n    \n2.<font color ='red'> StockCode: <font color ='black'> Product code. Unique number for each product.\n    \n3.<font color ='red'> Description: <font color ='black'> Product name\n    \n4.<font color ='red'> Quantity: <font color ='black'> Number of products. It expresses how many of the products on the invoices have  been sold.\n    \n5.<font color ='red'> InvoiceDate: <font color ='black'> Invoice date and time.\n    \n6.<font color ='red'> UnitPrice: <font color ='black'> Product unit price .\n    \n7.<font color ='red'> CustomerID: <font color ='black'> Unique customer number.\n    \n8.<font color ='red'> Country: <font color ='black'> Country where the customer lives.\n","def39978":"# **2.Load Data**","34c170a9":"**###Checking Descriptive Statistics###**","b0799755":"![online_retail.jpg](attachment:d7389ae8-6b4f-4d41-9a31-03add0fd4901.jpg)","63aa140d":"   \n\n<font color ='red'>**Content:**\n      \n1. [<font color ='black'>Import Libraries & Modules](#1)\n    \n1. [<font color ='black'>Load Data](#2)\n    \n1. [<font color ='black'>Data Preview](#3)\n    * [<font color ='black'>Checking Descriptive Statistics](#4)\n    * [<font color ='black'>Data Cleaning](#5)\n        \n1. [<font color ='black'>Feature Engineering](#6)\n    \n1. [<font color ='black'>Standardization](#7)\n    \n1. [<font color ='black'>K-Means](#8)\n    \n1. [<font color ='black'>Final Clustering](#9)\n","ea2e6a27":"\n<font color ='red'>**ONLINE RETA\u0130L CLUSTERING BY K-MEANS**","e20015f4":"**### Data Cleaning ###**","ee2f28c9":"# **1.Import Libararies and Modules**","551f122b":"#Recency: analysis date -last shopping date\n#Frequeny: number of shopping\n#Monetory:total amount of invoices"}}