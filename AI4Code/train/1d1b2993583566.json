{"cell_type":{"ead35cce":"code","4b70b653":"code","b34df5b8":"code","95d1cf40":"code","cd5357c7":"code","4bd5bf1e":"code","7564895c":"code","a5af98fa":"code","0918d48a":"code","5021936e":"code","bdccb914":"code","ba026b7f":"code","1911ef38":"code","5248bfb8":"code","85ab1bfc":"code","a115d171":"code","8a34dfcb":"code","9718fdf1":"code","e15cd301":"code","ed87f5fa":"code","41ea55d9":"code","3cd6cce9":"code","94140a40":"code","497b4276":"code","35bb4488":"code","e1ae2209":"code","9e3837bd":"code","5dc972f8":"code","25d68824":"code","c603dfce":"code","75f95aab":"code","fb1d9089":"code","6d72dbf7":"code","14561771":"code","ab469d4d":"code","183aa12a":"code","d5130b36":"code","c6b45173":"code","9a313513":"code","95155e6e":"code","8f06049b":"code","2cd5d99c":"code","764cba05":"code","3de672ce":"code","11c436aa":"code","e41e3838":"code","962fc530":"code","429a06d8":"code","c451412d":"code","b04faee3":"code","a0a912d1":"code","69f66a1a":"code","c4fede20":"code","a3bf31a7":"code","135b02e3":"code","94efd504":"code","6a45efbf":"code","ee55e24f":"code","726bd5dd":"code","d69214db":"code","29d1cf40":"code","4febb8d3":"code","b52a782e":"code","cad0080d":"code","aaa1c1e8":"code","a7a025b3":"code","85e829ad":"code","6da9cfee":"code","07279a38":"code","33323b15":"code","fbadcf05":"code","8cb4d96e":"code","9271c341":"markdown","07cff470":"markdown","48c9e7cf":"markdown","8ae3b4ff":"markdown","347e862b":"markdown","c03c1b9b":"markdown","ba2abf62":"markdown","caa7a230":"markdown","45e52a7a":"markdown","194b183d":"markdown","41907cd8":"markdown","d6fc20b0":"markdown","1099bfff":"markdown","2fdd0eff":"markdown","bf5bde6b":"markdown","59a4d327":"markdown","95cda1dd":"markdown","24221293":"markdown","4629b393":"markdown","3acde557":"markdown","ffc416aa":"markdown","a264aeee":"markdown","e418a6ae":"markdown","592147ff":"markdown","553262e1":"markdown","ab7f9abd":"markdown","a82d7af4":"markdown","2dc0c4fd":"markdown","2d641d66":"markdown","2b912aff":"markdown","474ec368":"markdown","3db9da5d":"markdown","6dd92dc8":"markdown","fefb6551":"markdown","1e63c2c4":"markdown","fe393c90":"markdown","db424d25":"markdown","1ebf343b":"markdown","b8cfe52b":"markdown","c8ff8790":"markdown","c015cfab":"markdown","1ad204d0":"markdown","51ec95dc":"markdown","8e18bdee":"markdown","05ee69d1":"markdown","9a8f3fd6":"markdown","3f94f8eb":"markdown","34cbe858":"markdown","92586da9":"markdown","f624f563":"markdown","15c4d7eb":"markdown","e447e038":"markdown","6de79c69":"markdown"},"source":{"ead35cce":"#data preprocessing\nimport pandas as pd         #for dataframe \nimport numpy as np          #for linear algebra\n\n#visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n#Showing Working directory for files\nimport os\nfor dirname,_,filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname,filename))","4b70b653":"f = open('\/kaggle\/input\/house-prices-advanced-regression-techniques\/data_description.txt','r')\n#print(f.read())","b34df5b8":"df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\nprint(\"Total rows :\" , df.shape[0])\nprint(\"Total columns :\" , df.shape[1])","95d1cf40":"#Setting the no of rows to displays in result\npd.set_option('display.max_rows',df.shape[1]+1)   \n\n#Head of the data in transpose form\ndf.head().T ","cd5357c7":"#Columns name of the data\ndf.columns","4bd5bf1e":"#For Basic summary statistics :\npd.set_option('display.max_rows',df.shape[1]+1)\ndf.describe().T\n\n#Summary statistics in long form.","7564895c":"#Info about the data : variables names and their data type and non null count\ndf.info()","a5af98fa":"int_to_obj = []\nfor i in df.columns:\n    if df.loc[:,i].dtype == 'int64':\n        if len(df.loc[:,i].unique()) < 15:\n            print(i)\n            print(len(df.loc[:,i].unique()))\n            int_to_obj.append(i)\n\ndate_var = ['MoSold','YrSold','YearRemodAdd','YearBuilt'] \nint_to_obj = set(int_to_obj) - set(date_var)   #check this\nint_to_obj = ['MSSubClass','OverallQual','OverallCond','GarageCars']\nfor i in int_to_obj:\n    df[i] = df[i].astype(object)","0918d48a":"#droping the id columns\ndf = df.drop('Id',axis = 1)","5021936e":"#Total no of missing values\ndf.isna().sum().sum()","bdccb914":"#Variables which have missing values\ndict = {\"variable\" : [],\"Count\" : []}\nfor var in df.columns:\n   if df.loc[:,var].isna().sum() > 0:\n    #print(var,\":\",df.loc[:,var].isna().sum())\n    dict[\"variable\"].append(var)\n    dict[\"Count\"].append(df.loc[:,var].isna().sum())\n#Making data frame and sorting them\nmis_data = pd.DataFrame(dict).sort_values('Count',ascending =  False)\nmis_data.style.background_gradient(cmap = 'Blues')","ba026b7f":"#Visualization\nmis_plot = px.bar(mis_data.sort_values('Count'),x = 'Count',y = 'variable',\n            color= 'Count',orientation= 'h',height=700,width=850,title= \"Missing Value\")\nmis_plot.show()","1911ef38":"df[list(mis_data['variable'])].info()","5248bfb8":"#Missing inputation : \ndict1 = {\"variable\" : [],\"Miss_count\" : [],\"Miss_prop\" : [],\"mean\" : [],\"median\" : [],\"skew\":[]}\nfor var in mis_data.variable:\n    if df[var].dtype == 'float64':\n        dict1[\"variable\"].append(var)\n        dict1[\"Miss_count\"].append(df[var].isna().sum())\n        dict1[\"Miss_prop\"].append(df[var].isna().sum()\/df.shape[0])\n        dict1[\"mean\"].append(df[var].mean())\n        dict1[\"median\"].append(df[var].median())\n        dict1['skew'].append(df[var].skew())\nprint(pd.DataFrame(dict1))\n\n#Adjustment for gridSpace\nfrom matplotlib.gridspec import GridSpec\n\n#Size of plots\nfig = plt.figure(constrained_layout = True,figsize = (15,5))\ngs = GridSpec(2, 3, figure=fig)     #No of grid and plots positions\n\n#Distribution plot\ni = 0\ncol = ['red','blue','green']\nfor var in list(dict1[\"variable\"]):\n    plt.subplot(gs[0,i])\n    sns.distplot(df[var],color= col[i])\n    i= i+1\n\n#Boxplot\ni = 0\nfor var in list(dict1[\"variable\"]):\n    plt.subplot(gs[1,i])\n    sns.boxplot(df[var],color = col[i],orient='v')\n    i= i+1","85ab1bfc":"#Repalcement of NA's\nfor var in mis_data.variable:\n    if df[var].dtype == 'float64':\n        df[var] = df[var].fillna(df[var].median())\n        ","a115d171":"#Missing inputation : \ndict2 = {\"variable\" : [],\"Miss_count\" : [],\"Miss_prop\" : [],\"mode\" : [],\"mode_freq\" : []}\nfor var in mis_data.variable:\n    if df[var].dtype == 'object':\n        dict2[\"variable\"].append(var)\n        dict2[\"Miss_count\"].append(df[var].isna().sum())\n        dict2[\"Miss_prop\"].append(df[var].isna().sum()\/df.shape[0])\n        dict2[\"mode\"].append(df[var].value_counts().index[0])\n        dict2[\"mode_freq\"].append(df[var].value_counts().values[0])\nprint(pd.DataFrame(dict2))\n","8a34dfcb":"df.drop([\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\"],axis = 1,inplace=True)","9718fdf1":"#Checking the Basement fetures\ndf[df[\"BsmtCond\"].isnull()][[\"BsmtExposure\",\"BsmtFinType2\",\"BsmtFinType1\",\"BsmtCond\",\"BsmtQual\",\n   'BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']]","e15cd301":"basement_features= [\"BsmtExposure\",\"BsmtFinType2\",\"BsmtFinType1\",\"BsmtCond\",\"BsmtQual\"]\nfor var in basement_features:\n    df[var] = df[var].fillna(\"No Basement\")","ed87f5fa":"#Checking the garage features\ndf[df[\"GarageType\"].isnull()][[\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\",\n             'GarageYrBlt','GarageCars', 'GarageArea']]","41ea55d9":"garage_features = [\"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\"]\nfor var in garage_features:\n    df[var] = df[var].fillna(\"No Garage\")","3cd6cce9":"#For fire features\ndf[df[\"FireplaceQu\"].isna()][[\"Fireplaces\",\"FireplaceQu\"]]","94140a40":"df['FireplaceQu'].fillna(\"No Fire\",inplace = True)\ndf[\"MasVnrType\"].fillna(df[\"MasVnrType\"].value_counts().index[0],inplace = True)\ndf[\"Electrical\"].fillna(df[\"Electrical\"].value_counts().index[0],inplace = True)","497b4276":"#Sanity Check : Whether there is any remaining NA's are not. \ndf.isna().sum().sum()","35bb4488":"print(\"Total Columns in Train data set:\",df.shape[1])\n#Loading Test data set\ntest_df = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\nprint(\"Total rows :\" , test_df.shape[0])\nprint(\"Total columns :\" , test_df.shape[1])","e1ae2209":"#First will take only those columns presnt in train data set.\ncol_in_train = df.columns.tolist()\ntest_df = test_df[list(set(col_in_train) - set([\"SalePrice\"]))]\nprint(\"train shape\",df.shape)\nprint(\"test shape\",test_df.shape)","9e3837bd":"#Displaying Side By Side Data frame\nfrom IPython.display import display_html\ndef display_side_by_side(*args):\n    html_str=''\n    for df in args:\n        html_str+=df.to_html()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)","5dc972f8":"#Over all \nprint(\"Over all NA's Count in test = \",test_df.isna().sum().sum())\nmis_data_test = {\"Variables\" : [],\"Count\" : [],\"dtype\":[]}\nfor var in test_df.columns:\n    if test_df.loc[:,var].isna().sum() > 0:\n        mis_data_test[\"Variables\"].append(var)\n        mis_data_test[\"Count\"].append(test_df.loc[:,var].isna().sum())\n        mis_data_test[\"dtype\"].append(test_df[var].dtype)\nmis_data_test = pd.DataFrame(mis_data_test).sort_values(\"Count\",ascending= False)\n\n#Missing Info in train and test\nprint(\"No of variables having Missing values in Train data set = \",mis_data.shape[0])\nprint(\"No of variables having Missing values in Test data set = \",mis_data_test.shape[0])\ncom_var = list(set(mis_data['variable']).intersection(set(mis_data_test['Variables'])))\nprint(\"No of comman variables in both = \",len(com_var))\nnew_var = list(set(mis_data_test['Variables']) - set(mis_data['variable']))\nprint(\"No of new variable having NA's = \",len(new_var))\n\n#will show side by side variables missing df for train and test\ndisplay_side_by_side(mis_data.reset_index(),mis_data_test.reset_index(),\n                     mis_data_test.loc[mis_data_test[\"Variables\"].isin(new_var),].reset_index())\n\nmis_data_test.dtype.value_counts()","25d68824":"#[1] For numerical variables\nvar_done = []\nfor var in mis_data_test.Variables:\n    if test_df[var].dtype == 'float64':\n        test_df[var] = test_df[var].fillna(test_df[var].median())\n        var_done.append(var)\nprint(len(var_done))\n#[2] Same treatment for matching categorical variables.\n#[a] basement features\nfor var in list(set(basement_features).intersection(set(mis_data_test.Variables))):\n    test_df[var] = test_df[var].fillna(\"No Basement\")\n    var_done.append(var)\nprint(len(var_done))\n#[b] garage features\nfor var in list(set(garage_features).intersection(set(mis_data_test.Variables))):\n    test_df[var] = test_df[var].fillna(\"No Garage\")\n    var_done.append(var)\nprint(len(var_done))\n#[c] others\ntest_df['FireplaceQu'].fillna(\"No Fire\",inplace = True)\ntest_df[\"MasVnrType\"].fillna(test_df[\"MasVnrType\"].value_counts().index[0],inplace = True)\nvar_done.extend(['FireplaceQu',\"MasVnrType\"])\nprint(len(var_done))\n#Remaining Variables\nremain_var = set(mis_data_test.Variables) - set(list(var_done))\n\nprint(\"Remaing variables : \",\"\\n\",mis_data_test[mis_data_test.Variables.isin(remain_var)])","c603dfce":"print(len(var_done))\nfor var in remain_var:\n    test_df[var].fillna(test_df[var].value_counts().index[0],inplace= True)\n    var_done.append(var)\nprint(\"Total no of var for which replacement is done : \",len(var_done))\nprint(\"Total no of remainning var having NA's :\",mis_data_test.shape[0]- len(var_done))\nprint(\"\\n\",\"Total no of NA's in Train : \",df.isna().sum().sum())\nprint(\"\\n\",\"Total no of NA's in Test : \",test_df.isna().sum().sum())","75f95aab":"#Converting some  of int to object\nint_to_obj = ['MSSubClass','OverallQual','OverallCond','GarageCars']\nfor var in int_to_obj:\n    test_df[var] = test_df[var].astype(object)","fb1d9089":"print(\"Summary : \\n\",df['SalePrice'].describe())\nprint(\"\\n Skewness of Sale Price Data = \",df['SalePrice'].skew())\nprint(\"\\n Median of Sale Price Data = \",df['SalePrice'].median())","6d72dbf7":"#Visualization.\nfrom matplotlib.gridspec import GridSpec\nfig = plt.figure(constrained_layout = True, figsize = (15,7))\ngs = GridSpec(2,2,figure=fig)\nplt.subplot(gs[0,:])\nsns.distplot(df['SalePrice'],color=\"red\",)      #Distribution plot\nplt.title(\"Distrution Plot\")\nplt.subplot(gs[1,0])\nsns.boxplot(df['SalePrice'],color=\"orange\",orient='h')   #Boxplot\nplt.title(\"Bar Plot\")\nplt.subplot(gs[1,1])\nsns.violinplot(df['SalePrice'],color = \"pink\")           #Violin\nplt.title(\"Violin Plot\")\nplt.show()","14561771":"print(\"Total No of Var in Train = \",df.shape[1])\n#Categorical Variables\ncat_var = df.select_dtypes(include = \"object\")\nprint(\"Total No of categorical variables = \", cat_var.shape[1])\n\n#Numerical Variables\nnum_int_date_var = df.select_dtypes(exclude = \"object\")\nprint(\"Total No of num_int_date variables = \", num_int_date_var.shape[1])\n\n#Date variables\ndate_var = df[['MoSold', 'YrSold', 'YearRemodAdd', 'YearBuilt','GarageYrBlt']]\nprint(\"Total No of date variables = \",date_var.shape[1])\n\n#Integer variables which have unique less than 15 values : descrete\ndesc_var = []\nfor var in num_int_date_var:\n    if df[var].dtypes == 'int64' and var not in list(date_var.columns) and len(df[var].unique()) < 15:\n        desc_var.append(var)\ndesc_var = df[desc_var]\nprint(\"Total No of descrete Variables = \",desc_var.shape[1])\n\n#Actual Continuous variables\ncon_var = set(num_int_date_var.columns) - set(date_var.columns) - set(desc_var.columns)\ncon_var = df[con_var]\nprint(\"Total No of Countinuous Variables = \",con_var.shape[1])","ab469d4d":"cat_var.columns","183aa12a":"#First convert the meaning description of int values:\nprint(\"Unique Values: \", df[\"MSSubClass\"].unique())\nreplace_dict = {\n        20 : '1-STORY 1946 & NEWER ALL STYLES',\n        30: '1-STORY 1945 & OLDER',\n        40: '1-STORY W\/FINISHED ATTIC ALL AGES',\n        45: '1-1\/2 STORY - UNFINISHED ALL AGES',\n        50: '1-1\/2 STORY FINISHED ALL AGES',\n        60: '2-STORY 1946 & NEWER',\n        70: '2-STORY 1945 & OLDER',\n        75: '2-1\/2 STORY ALL AGES',\n        80: 'SPLIT OR MULTI-LEVEL',\n        85: 'SPLIT FOYER',\n        90: 'DUPLEX - ALL STYLES AND AGES',\n       120: '1-STORY PUD (Planned Unit Development) - 1946 & NEWER',\n       150: '1-1\/2 STORY PUD - ALL AGES',\n       160: '2-STORY PUD - 1946 & NEWER',\n       180: 'PUD - MULTILEVEL - INCL SPLIT LEV\/FOYER',\n       190: '2 FAMILY CONVERSION - ALL STYLES AND AGES'\n}\ncat_var[\"MSSubClass\"] = cat_var[\"MSSubClass\"].replace(replace_dict)\nprint(\"Unique Values: \", cat_var[\"MSSubClass\"].unique())\n#For over all data frame\ndf[\"MSSubClass\"] = df[\"MSSubClass\"].replace(replace_dict)\n#For test\ntest_df[\"MSSubClass\"] = test_df[\"MSSubClass\"].replace(replace_dict)","d5130b36":"fig = plt.figure(figsize = (15,5))\n#to order this need refrence table\ntab = df.groupby(['MSSubClass'],as_index = False)['SalePrice'].median().sort_values(\"SalePrice\",ascending=False)\nmx = sns.boxplot(x = cat_var['MSSubClass'], y = df['SalePrice'],order = tab.MSSubClass)\nmx.set_xticklabels(mx.get_xticklabels(),rotation = 75)\nfig.suptitle(\"Category : Type of dewelling\",fontsize = 15)\nfig.show()","c6b45173":"import warnings\nwarnings.filterwarnings('ignore')\ntab = df.groupby(['MSSubClass'])['MSSubClass','SalePrice'].agg({'MSSubClass':'count','SalePrice':'median'})\ntab.sort_values('SalePrice',ascending = False).style.background_gradient(cmap = 'Reds')\n","9a313513":"cat_b = ['MSZoning','Street','LotShape','LandContour','LotConfig','LandSlope']\n\n#Will try with box plot,boxen plot and distribution plot.\nfig = plt.figure(constrained_layout = True,figsize = (20,28))\ngs = GridSpec(4,2,figure = fig)\nfor var in cat_b:\n    print(var)\n    print(df[var].unique())\n#Box plots\ni=0\nfor var in  ['MSZoning','LotConfig']:\n    plt.subplot(gs[0,i])\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.boxenplot(data = df, x = var,y = 'SalePrice',order = table.iloc[:,0])\n    plot.set_xticklabels(plot.get_xticklabels(),rotation = 90)\n    i = i+1\ni=0\nfor var in  ['LandContour','LotShape']:\n    plt.subplot(gs[1,i])\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.boxplot(data = df, x = var,y = 'SalePrice',order = table.iloc[:,0])\n    plot.set_xticklabels(plot.get_xticklabels(),rotation = 90)\n    i = i+1\ni=2\nfor var in ['Street','LandSlope']:\n    plt.subplot(gs[i,:])\n    i = i+1\n    unique_vals = df[var].unique()\n    targets = [df.loc[df[var] == val] for val in unique_vals]\n    for target in targets:\n        plot = sns.distplot(target[['SalePrice']])\n    plot.legend('upper right',labels = unique_vals)\n    plt.xlabel(\"SalePrice\")\n    plt.title(var)\n\nplt.suptitle(\"Category_B : Structure of Land and Property\",fontsize = 20)\nplt.show()","95155e6e":"print(\"Street \\n\",df['Street'].value_counts())\nprint(\"LandSlop \\n\",df['LandSlope'].value_counts())","8f06049b":"cat_c =  ['Neighborhood','Condition1','Condition2','Utilities','BldgType','HouseStyle','PavedDrive']\nfor var in cat_c:\n    print(var)\n    print(df[var].unique())\n#will plot box plot, violin plot, boxen plot and strip plot\n#Box plot\nfig = plt.figure(constrained_layout= True, figsize = (20,20))\ngs = GridSpec(4,3, figure = fig)\ni = 0 \nfor var in ['Neighborhood','HouseStyle']:\n    plt.subplot(gs[i,:])\n    if i == 1:\n        plt.subplot(gs[i,:-1])\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.boxplot(data = df , x = var, y = 'SalePrice',orient = 'v',order = table.iloc[:,0])\n    i = i+1\ni = 0\nfor var in ['Condition1','Condition2']:\n    plt.subplot(gs[2:4,i])\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.boxenplot(data = df , y = var, x = 'SalePrice',orient = 'h',order = table.iloc[:,0])\n    i = i+1\ni = 1\nfor var in ['Utilities','BldgType','PavedDrive']:\n    plt.subplot(gs[i,-1])\n    if i == 1:\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.stripplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    else:\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.violinplot(data = df , y = var, x = 'SalePrice',orient = 'h',order = table.iloc[:,0])\n    i = i+1\nplt.suptitle(\"CAT_C : Style, location and Outdoors\",fontsize = 25)","2cd5d99c":"cat_d =  ['ExterQual','ExterCond','KitchenQual','FireplaceQu','Functional','Heating','HeatingQC','CentralAir','Electrical','RoofStyle','RoofMatl','Exterior1st','Exterior2nd',\n         'MasVnrType','Foundation']\nfor var in cat_d:\n    print(var,\":\",len(df[var].unique()))\n    \n#will plot box , violin and stripplot \nfig = plt.figure(constrained_layout = True, figsize = (20,24))\ngs = GridSpec(6,4,figure = fig)\n\n#distribution plot\ni = 0\nfor var in ['ExterQual','KitchenQual','MasVnrType','CentralAir']:\n    plt.subplot(gs[0,i])\n    unique_vals = df[var].unique()\n    targets = [df.loc[df[var] == val] for val in unique_vals]\n    for target in targets:\n        plot = sns.distplot(target[['SalePrice']])\n    plot.legend('upper right',labels = unique_vals)\n    plt.xlabel(\"SalePrice\")\n    plt.title(var)\n    i = i+1\n\ni = 3\nfor var in ['Exterior1st','Exterior2nd']:\n    plt.subplot(gs[1:,i])\n    i = i - 1\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.boxenplot(y = var, x = 'SalePrice',order = table.iloc[:,0],data = df ,orient='h')\n\ni = 1\nfor var in ['ExterCond','HeatingQC','Electrical','FireplaceQu','RoofMatl']:\n    if i == 5:\n        plt.subplot(gs[i,:-2])\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.boxplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    else:\n        plt.subplot(gs[i,0])\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.boxplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    i = i+1\ni = 1        \nfor var in ['Heating','RoofStyle','Foundation','Functional']:\n    plt.subplot(gs[i,1])\n    table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n    plot = sns.violinplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    i = i+1\n    \nplt.suptitle(\"CAT_C : Style, location and Outdoors\",fontsize = 25)","764cba05":"cat_e =  ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','GarageType','GarageFinish','GarageCars','GarageQual','GarageCond']\nfor var in cat_e:\n    print(var,\":\",len(df[var].unique()))\n    print(df[var].unique())\n\nfig = plt.figure(constrained_layout = True,figsize = (20,15))\ngs = GridSpec(6,4, figure = fig)\n\nplt.subplot(gs[0,:-2])\ntable = df.groupby(['BsmtFinType1'],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\nplot = sns.violinplot(x = 'BsmtFinType1', y = 'SalePrice',order = table.iloc[:,0],data = df )\nplot.set_xticklabels(plot.get_xticklabels(),rotation = 90);\n\nplt.subplot(gs[0,2:])\ntable = df.groupby(['BsmtFinType2'],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\nplot = sns.violinplot(x = 'BsmtFinType2', y = 'SalePrice',order = table.iloc[:,0],data = df )\nplot.set_xticklabels(plot.get_xticklabels(),rotation = 90);\n\nplt.subplot(gs[1:3,0:2])\nvar = 'BsmtQual'\nunique_vals = df[var].unique()\ntargets = [df.loc[df[var] == val] for val in unique_vals]\nfor target in targets:\n    plot = sns.distplot(target[['SalePrice']])\nplot.legend('upper right',labels = unique_vals);\nplt.xlabel(\"SalePrice\");\nplt.title(var);\n\nplt.subplot(gs[1:3,2:3])\ntable = df.groupby(['BsmtCond'],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\nplot = sns.boxenplot(x = 'BsmtCond', y = 'SalePrice',order = table.iloc[:,0],data = df )\nplot.set_xticklabels(plot.get_xticklabels(),rotation = 90);\n\nplt.subplot(gs[1:3,3:])\ntable = df.groupby(['BsmtExposure'],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\nplot = sns.boxenplot(x = 'BsmtExposure', y = 'SalePrice',order = table.iloc[:,0],data = df )\nplot.set_xticklabels(plot.get_xticklabels(),rotation = 90);","3de672ce":"fig = plt.figure(constrained_layout=True,figsize=(20,15))\ngs = GridSpec(3, 3, figure=fig)\n\nplt.subplot(gs[0,:])\na1 = sns.boxenplot(data=df,x=\"GarageType\",y=\"SalePrice\")\na1.set_xticklabels(a1.get_xticklabels(), rotation=90);\n\nplt.subplot(gs[1,:-1])\nvar = \"GarageFinish\"\nunique_vals = df[var].unique()\ntargets = [df.loc[df[var] == val] for val in unique_vals]\nfor target in targets:\n    plot = sns.distplot(target[['SalePrice']])\nplot.legend('upper right',labels = unique_vals);\nplt.xlabel(\"SalePrice\");\nplt.title(\"GarageFinish\")\n\nplt.subplot(gs[1:,-1])\na1 = sns.boxplot(data=df,x=\"GarageCars\",y=\"SalePrice\")\na1.set_xticklabels(a1.get_xticklabels(), rotation=90);\n\nplt.subplot(gs[-1,0])\na1 = sns.stripplot(data=df,x=\"GarageQual\",y=\"SalePrice\")\na1.set_xticklabels(a1.get_xticklabels(), rotation=90);\n\nplt.subplot(gs[-1,-2])\na1 = sns.stripplot(data=df,x=\"GarageCond\",y=\"SalePrice\")\na1.set_xticklabels(a1.get_xticklabels(), rotation=90);","11c436aa":"cat_f =  ['SaleType','SaleCondition','OverallQual','OverallCond']\nfor var in cat_f:\n    print(var,\":\",len(df[var].unique()))\n    print(df[var].unique())\n\nrep_dict = {10:'Very Exc',9:'Exc',8:'VG',7:'Good',6:'Abv Avg',5:'Avg',4:'Bel Avg',3:'Fair',2:'Poor',1:'Very Poor'}\nfor var in ['OverallQual','OverallCond']:\n    df[var] = df[var].replace(rep_dict)\n    cat_var[var] = df[var].replace(rep_dict)\n    test_df[var] = test_df[var].replace(rep_dict)\n\nfig = plt.figure(constrained_layout= True,figsize = (20,16))\ngs = GridSpec(4,1,figure=fig)\ni = 0\nfor var in cat_f:\n    plt.subplot(gs[i,:])\n    if i > 1:\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.boxenplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    else:\n        table = df.groupby([var],as_index=False)['SalePrice'].median().sort_values('SalePrice',ascending = False)\n        plot = sns.boxplot(x = var, y = 'SalePrice',order = table.iloc[:,0],data = df )\n    i = i+1","e41e3838":"for var in list(desc_var.columns):\n    print(df[var].unique())\ndesc_var.columns\n\nfrom numpy import median\nfig = plt.figure(constrained_layout = True,figsize = (20,15))\ngs = GridSpec(5,3,figure = fig)\ni = 0\nfor var in ['BsmtFullBath', 'BsmtHalfBath', 'FullBath']:\n    plt.subplot(gs[0,i])\n    plot = sns.barplot(data = df, x =var,y = 'SalePrice',estimator = median)\n    i = i+1\ni = 0\nfor var in ['HalfBath','KitchenAbvGr', 'Fireplaces']:\n    plt.subplot(gs[1,i])\n    plot = sns.barplot(data = df, x =var,y = 'SalePrice',estimator = median)\n    i = i+1\ni = 2\nfor var in ['PoolArea','TotRmsAbvGrd','BedroomAbvGr']:\n    plt.subplot(gs[i,:])\n    plot = sns.barplot(data = df, x =var,y = 'SalePrice',estimator = median)\n    i = i+1","962fc530":"for var in date_var.columns:\n    plot_tab = df.groupby([var])['SalePrice'].median().plot()\n    plt.ylabel(\"Median Sale Price\")\n    plt.show()","429a06d8":"df[list(con_var.columns) + ['SalePrice']].corr()","c451412d":"#creating a duplicate data set for this section.\nimport copy\ndata = df.copy()\ndate_var.columns.tolist()","b04faee3":"#getting skewed features\nskewed_var = []\nfor var in con_var.columns:\n    if data[var].skew() > 0 or data[var].skew() < 0:\n        skewed_var.append(var)\n\n#final list of variables for log transformation\nskewed_var_1 = []\nfor var in skewed_var:\n    if 0 not in data[var].unique() and var not in date_var.columns.tolist():\n        skewed_var_1.append(var)\n        print(var)\n\n#Applying the log transformation.\nvalues_check = {\"Variables\" : [],\"Before_Skewness\" : [],\"After_Skewness\" : []}\nfor var in skewed_var_1:\n    values_check[\"Variables\"].append(var)\n    values_check[\"Before_Skewness\"].append(data[var].skew())\n    data[var] = np.log(data[var])\n    values_check[\"After_Skewness\"].append(data[var].skew())\npd.DataFrame(values_check)","a0a912d1":"#Check the districution of above 5 variables\nfig = plt.figure(constrained_layout = True,figsize = (15,15))\nfrom matplotlib.gridspec import GridSpec\ngs =  GridSpec(5,1,figure = fig)\ni = 0\nfor var in skewed_var_1:\n    plt.subplot(gs[i,0])\n    sns.distplot(data[var])\n    i = i+1","69f66a1a":"from sklearn.preprocessing import LabelEncoder\nlabelenco = LabelEncoder()\n\nfor var in cat_var.columns:\n    data[var] = labelenco.fit_transform(data[var])                  #for train\n    test_df[var] = labelenco.fit_transform(test_df[var])            #for test","c4fede20":"#Now dependent and independent variables\ny = data['SalePrice']\nX = data.drop(['SalePrice'],axis = 1)\n\ncol_x = X.columns\n\nfrom sklearn.preprocessing import MinMaxScaler\nscale = MinMaxScaler()\nX = pd.DataFrame(scale.fit_transform(X),columns = [col_x])            # for train data set\n\ncol_test = test_df.columns                                            # for test data set\ntest_df = pd.DataFrame(scale.fit_transform(test_df),columns = [col_test])","a3bf31a7":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 100)","135b02e3":"from sklearn.linear_model import Lasso\nfrom sklearn.feature_selection import SelectFromModel\n\nfeat_sel = SelectFromModel(Lasso(alpha = 0.005,random_state = 100))\nfeat_sel.fit(X_train,y_train)\n\n#Getting selected features\nsel_feat = X_train.columns[(feat_sel.get_support())]\nprint(sel_feat)","94efd504":"#Dropping all others remainnig features\nX_train = X_train[sel_feat].reset_index(drop = True)","6a45efbf":"X_train.head()","ee55e24f":"#Similarly for testing dataset\nX_test = X_test[sel_feat]\nX_test.head()","726bd5dd":"#for Final test data set for submission\ntest_df = test_df[sel_feat]\ntest_df.head()","d69214db":"#Importing the files\nfrom sklearn.linear_model import LinearRegression         #for modeling\nfrom sklearn import metrics                               #for metrices\n\nlm = LinearRegression()\n\n#Fitting the model\nlm.fit(X_train,y_train)\n\n#Prediction for test data set\nlm_predict = lm.predict(X_test)\n\n#Scatter Plot : Between Y_test and Y_test_prediction\nfig = plt.figure(figsize = (15,10))\nplt.scatter(y_test,lm_predict)\nplt.xlabel(\"Y_test\",fontsize = 15); plt.ylabel(\"Y_test_predict\",fontsize = 15)\nplt.show()\n\n#Model Evaluation : will check with RMSE, MSE, MAE and Accuracy\nprint(\"Mean Absolute Error : \",metrics.mean_absolute_error(y_test,lm_predict))\nprint(\"Mean Squared Error : \",metrics.mean_squared_error(y_test,lm_predict))\nprint(\"Root Mean Absolute Error : \",np.sqrt(metrics.mean_squared_error(y_test,lm_predict)))\n\n#Model Accuracy : with lm.score()\nprint(\"\\nAccuracy of Linear Regression Model : \",round(lm.score(X_test,y_test)*100),'%')\n","29d1cf40":"from sklearn.ensemble import GradientBoostingRegressor             #GBM Algorithm\nfrom sklearn.model_selection import cross_val_score,GridSearchCV   \n\n#For Metrices \nfrom sklearn.metrics import mean_absolute_error as MAE\nfrom sklearn.metrics import mean_squared_error as MSE\n\n#Definning User Define fuction for the Model simulation\ndef model_fit(algorithm,train_set,train_y,test_set,test_y,\n             perform_CV = True,print_FeaturesImportance = True,cv_folds = 5):     #setting some of by default values\n    #Fitting the Model\n    algorithm.fit(train_set,train_y)     \n    \n    #Prediction\n    train_pred = algorithm.predict(train_set)\n    test_pred = algorithm.predict(test_set)\n    \n    #Model Evaluation Reports\n    print(\"Model Evaluation Reports\/Metrices : \")\n    model_eval = pd.DataFrame({\"Evaluation Metrices\" : [],\"Train\" :[],\"Test\":[]})\n    model_eval[\"Evaluation Metrices\"] = [\"MAE\",\"MSE\",\"RMSE\",\"Accuracy\"]\n    model_eval[\"Train\"] = [MAE(train_y,train_pred),MSE(train_y,train_pred),np.sqrt(MSE(train_y,train_pred)),algorithm.score(train_set,train_y)]\n    model_eval[\"Test\"] = [MAE(test_y,test_pred),MSE(test_y,test_pred),np.sqrt(MSE(test_y,test_pred)),algorithm.score(test_set,test_y)]\n    print(model_eval)\n    \n    #Cross Validation\n    if perform_CV :\n        cv_score = cross_val_score(algorithm,train_set,train_y,cv = cv_folds)\n        print(\"\\nCV Scores :\",cv_score)\n        print(\"Min: \",np.min(cv_score));print(\"Max: \",np.max(cv_score));print(\"Mean: \",np.mean(cv_score));print(\"Std: \",np.std(cv_score))\n    \n    #Printing features Importance\n    if print_FeaturesImportance :\n        feat_imp = algorithm.feature_importances_\n        feat_col = list(train_set.columns)\n        feat_df = pd.DataFrame({\"Features\" : feat_col,\"Importance\" : feat_imp})\n        feat_df = feat_df.sort_values(\"Importance\",ascending = False)\n        \n        #Plot them\n        fig = plt.figure(figsize = (15,15))\n        fig = sns.barplot(data = feat_df,x = 'Features',y = 'Importance')\n        plt.xlabel(\"Features\",fontsize = 15);plt.ylabel(\"Importance\",fontsize=15);plt.title(\"Features Importance\",fontsize = 20)\n        plt.xticks(rotation = 90)\n        plt.show()\n    ","4febb8d3":"#First Model : Baseline Model\ngbm_1 = GradientBoostingRegressor(random_state=5)\nmodel_fit(gbm_1,X_train,y_train,X_test,y_test)","b52a782e":"#Tuning the number of estimators\nparam1 = {'n_estimators': range(1000,4000,1000)}\n\n#Putting the parameters\nG_search1 = GridSearchCV(estimator= GradientBoostingRegressor(learning_rate = 0.05,min_samples_split = 10,min_samples_leaf = 15,\n                                                             max_depth = 4,max_features = 'sqrt', random_state = 5),\n                        param_grid = param1,iid = False,cv = 5)\n\n#Fitting the Model\nG_search1.fit(X_train,y_train)\n\n#Printing results\nG_search1.cv_results_","cad0080d":"#Printing Best Parameters\nprint(G_search1.best_params_)\n\n#Printing Best Score\nprint(G_search1.best_score_)","aaa1c1e8":"#We can tune others parameter to get good accuracy\ngbm_2 = GradientBoostingRegressor(n_estimators=1000,learning_rate=0.05,max_depth=9,min_samples_split=17,max_features='sqrt',\n                                 min_samples_leaf=13,loss='huber',random_state=5)\n\n#Check this model\nmodel_fit(gbm_2,X_train,y_train,X_test,y_test)","a7a025b3":"#Submission with Gradient Boosting Regressor\ngbm_prediction = gbm_2.predict(test_df)\ngbm_prediction","85e829ad":"from xgboost import XGBRegressor\n\nxgb_1 = XGBRegressor(n_estimators=1000,learning_rate=0.05,gamma=0,subsample=0.75,\n                    max_depth=7,random_state=5,min_child_weight=1,colsample_bytree=0.8)\n\nmodel_fit(xgb_1,X_train,y_train,X_test,y_test)","6da9cfee":"#Submission with XGBoosting \nxgb_prediction = xgb_1.predict(test_df)\nxgb_prediction = np.exp(xgb_prediction)\nxgb_prediction","07279a38":"sample_submission = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")","33323b15":"sample_submission['SalePrice'] = xgb_prediction\nsample_submission.to_csv(\"final_submission.csv\",index = False)","fbadcf05":"sample_submission","8cb4d96e":"test_df.shape","9271c341":"**Will check the NA's in Test data set.**","07cff470":"### *First : Numerical Variables*","48c9e7cf":"### CAT_C : Style, location and Outdoors [4,11]\n* Neighborhood: Physical locations within Ames city limits\n* Condition1: Proximity to main road or railroad\n* Condition2: Proximity to main road or railroad (if a second is present)\n* Utilities: Type of utilities available\n* BldgType: Type of dwelling\n* HouseStyle: Style of dwelling\n* PavedDrive: Paved driveway","8ae3b4ff":"### CAT_A : MSSubClass = Identifies the type of dwelling involved in the sale.","347e862b":"* Since these plots are in decsending order of median from left to right, so we can see that avg sale price is quite high in left categories of type of dewelling.\n* And There are non-uniformity of the sale price as we can see the size of box plot.","c03c1b9b":"Since the mean values of variable is affected by outliers\/ extream values, hence it will be a good choice to use median to replace missing values in numeric variable. Which is justified by skewness values and outliers in boxplot,  \n1. if the skewness = 0 , symetric distributed.\n2. if skewness < 0 , negative skewed or left skewed.\n3. if skewness > 0 , positive skewed or right skewed.   \nIn above plots the two are positive skewed except \"GarageYrBlt\" var and it's left skewed. As we can see in ManVnrArea plot how the mean (central tendency) value is affecting by longer right tail\/skewness.\nSo we will replace NA's in numeric data with median values.","ba2abf62":"# Bivariate Analysis :\n**We can check the degree of relationship of independent variables and dependent variable with some visual plots and with some of statistical metric.**\n* Will divide the features into two subsets one for numerical features and another for categorical features.\n* Since numerical varibles of two type continuous and discrete, will consider discrete as categorical variables.","caa7a230":"## Step_3 : Features Scaling\nThere are two types of features scaling methods  \n* Standard Scaler : use normal distribution properties.\n* MinMaxScaler : shrink the range for a variables in 0 to 1.","45e52a7a":"**So, Basically there are 43 categorical, 4 date, 9 descrete and 20 continuous variables. And will proceed analysis as below**\n* Categorical var: will plot bar plot,box plot and distribution plot with saleprice.\n* Date var : will plot bar and trend plot with saleprice.\n* Descrete var: will treat same as categorical var with sale price.\n* Continuous var : will check correlation metric with saleprice.\n","194b183d":"There are some of numerical variables and categorical variables having missing values.  \n\nLet's handle them....","41907cd8":"From above we can see that the variability of subcategories of categorical variable for saleprice.   \nMSZoning having good variability, as Floating Village residential zone have max saleprice and commercial zones have lowest sale price. This is good variable as there is significant difference among the subcategories.   \nLotConfig (configuration of the lot) having not enough variation across its sub categories for salesprice.   \nLandcontour its also have some varibility.   \nLotshape having subcategory as regular which is low in price as compared to others with iregular shape house.     \nStreet, this is not good variables for our prediction because have very less point for one subcategory.(See below)   \nLandslop having gental slop with lowest price as compared to others subcategories. (see below) \n","d6fc20b0":"### 1. Categorical Variables & Sale price","1099bfff":"## Step_6 : Model Building \n(a). Linear Regression\n(b). Gradient Boosting\n(c). XGBoost Regressor","2fdd0eff":"# File Submission :","bf5bde6b":"### 2. Descrete Variables and SalePrice\nThere are 9 variable and wil vizualise through bar plots.","59a4d327":"* We can see the Saleprice of 2-story and 1-story Pud is quiet high.\n* some of sub categories of 1-story have less sales values.\n* this variables have non-uniformity of sale price in sub categories, therefore it is a good variables to predict sale price.","95cda1dd":"### [b] Gradient Boosting Regressor","24221293":"**Now there is no Na's in trainning and testing data set.**","4629b393":"* Have replaced the NA's of variables (mathcing with trainning data set).\n* will replaced remaining categorical variables with mode.","3acde557":"### [a] Linear Regression","ffc416aa":"# **Project Description :**\n\nAsk a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\n\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","a264aeee":"Form above info, there are three different type of features.\n* Object : total 43 variables\n* int64 : total 35 variables\n* float64 : total 64 variables  \nAlso there are missing values are in some of the variables as non_null count of variable is less than total rows.\n\n\nAlso some of the variables are misclassified as numerical with int64 datatype, have to convert them in categorical variables and date.","e418a6ae":"### CAT_D : Exterior Condition and quality,Internal Quality, Roofing, Foundation and housing exterior [6,9,8,5]\n* ExterQual: Exterior material quality\n* ExterCond: Present condition of the material on the exterior\n* KitchenQual: Kitchen quality\n* FireplaceQu: Fireplace quality\n* Functional: Home functionality rating\n* Heating: Type of heating\n* HeatingQC: Heating quality and condition\n* CentralAir: Central air conditioning\n* Electrical: Electrical system\n* RoofStyle: Type of roof\n* RoofMatl: Roof material\n* Exterior1st: Exterior covering on house\n* Exterior2nd: Exterior covering on house (if more than one material)\n* MasVnrType: Masonry veneer type\n* Foundation: Type of foundation\n\n","592147ff":"### 4. Continuous Variables and SalePrice\n\nThere are 20 date variables will plot scatter and correlation.","553262e1":"## Step_1 : Log Transformation of Skewed values.","ab7f9abd":"Since, in basement features, where there are NA's all other info about basement is 0. It means there is no basement in house. So will fill with Category as : \"No Basement\"","a82d7af4":"**So, there are no more NA's in the data.**\n\n* Now will check for **Test data** set and take required columns.\n","2dc0c4fd":"## Approach note\nMachine Learning Model for kaggle Compitetion.   \n**Objective: Will build a Model to predict the sale price for the house based on their attributes\/features.**  \n\nThe following cycle\/stage will be covered during this analysis. \n* Data loading\n* Data Preprocessing (Analysis and feature engneering)\n    1. Missing values analysis.\n    2. Outliers\/extream values analysis.\n    3. Variables distribution analysis. (For : Numerical, Ordinal, Nominal and categorical)\n    4. Independent Variables relationship. (Bivariate and multivariate analysis)\n    5. Relationship between predictor and response variables.\n* Feature selection\n* Model Building\n* Model Evaluation ","2d641d66":"### Traget variable in trainning Data set.","2b912aff":"So, variables have missing values are:\n* Numeric = 3 : MasVnrArea, GarageYrBlt and LotFrontage\n* categorical = 16 : restof variables in mis_data except above three","474ec368":"Since there is no fire place for 690 case will replaced Na's with \"No fire\" category. And for \"MasVnrType\",\"Electrical\" will use mode to fill it.","3db9da5d":"[<img alt=\"Machine Learning Project: Predicting Boston House Prices With ...\" class=\"n3VNCb\" src=\"https:\/\/miro.medium.com\/max\/402\/1*2foyXif7hwkO8wWB5T9KtQ.png\" data-noaft=\"1\" jsname=\"HiaYvf\" jsaction=\"load:XAeZkd;\" style=\"width: 900px; height: 400px; margin: 0px;\">]","6dd92dc8":"# Univariate Analysis :","fefb6551":"* So, There are total 15 extra variable having missing values as their count of NA's are less so will replace NA's with mode for Categorical and median for numerical variables.  \n* And will replace in comman variables with same logic as applied for train.\n* Also there are 18 categorical variables and 11 numerical variables.","1e63c2c4":"### 3. Date Variables and SalePrice\n\nThere are four date variables will plot trends and barplot.","fe393c90":"## Step_4 : Spliting the data into Train and test","db424d25":"### Link for Data Description and Data Set :\nData overview : [https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview]  \nData description\/ download : [https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/data]","1ebf343b":"# Predictive Modeling :","b8cfe52b":"# Importing Data Set :","c8ff8790":"# Thanks You for Reading !!\n\nIts great for me that you have read this notebook and would like to know about yours feedback for improvements as i believe sharing of knowledge will make you more powerful. Also it will be a kind help to know your comments and please do upvote, thank you very much.\n\n<img alt=\"Emoticon Thank You Stock Illustrations \u2013 132 Emoticon Thank You ...\" class=\"n3VNCb\" src=\"https:\/\/thumbs.dreamstime.com\/b\/cute-blushing-yellow-emoticon-banner-illustration-thanks-quote-thank-you-greeting-card-concept-cute-yellow-d-smiley-face-159876347.jpg\" data-noaft=\"1\" jsname=\"HiaYvf\" jsaction=\"load:XAeZkd;\" style=\"width: 381px; height: 162.877px; margin: 28.0613px 0px;\">\n","c015cfab":"### [c] XGBoost Regressor","1ad204d0":"### CAT_E : Basements and Garage [7,10]\n* BsmtQual: Height of the basement\n* BsmtCond: General condition of the basement\n* BsmtExposure: Walkout or garden level basement walls\n* BsmtFinType1: Quality of basement finished area\n* BsmtFinType2: Quality of second finished area (if present)\n* GarageType: Garage location\n* GarageFinish: Interior finish of the garage\n* GarageCars: Size of garage in car capacity\n* GarageQual: Garage quality\n* GarageCond: Garage condition","51ec95dc":"### CAT_F : Sale Type and Sale Condition, Overall Quality and Condition [12,3]\n* SaleType : Type of sale\n* SaleCondition: Condition of sale\n* OverallQual: Overall material and finish quality\n* OverallCond: Overall condition rating","8e18bdee":"* Since, there are 4 variables having missing values more than 70%, hence will drop these columns.   \n* Also there are 5 variables having the information about Basement features as \"BsmtExposure\",\"BsmtFinType2\",\"BsmtFinType1\",\"BsmtCond\",\"BsmtQual\" and also have same count of missing values.  \n* Also there are 4 variables having the information about Garage features as  \"GarageType\",\"GarageFinish\",\"GarageQual\",\"GarageCond\"\n","05ee69d1":"## Step_2 : Label encoding for Categorical Variables","9a8f3fd6":"# Required Libraries :","3f94f8eb":"### *Second : Categorical Variables*","34cbe858":"As there are 81 missing values are in garage variables and also other garage featutes are zero and we do not have the info about that. So we will fill it by \"No Garage\" and fill with mode.","92586da9":"## Step_5 : Features Selection \nWill use *SelectFromModel* with *lasso* from selecting best features.","f624f563":"#### Hyperparameter tunning","15c4d7eb":"### CAT_b : Structure of Land and Property\n* MSZoning: The general zoning classification\n* Street: Type of road access\n* LotShape: General shape of property\n* LandContour: Flatness of the property\n* LotConfig: Lot configuration\n* LandSlope: Slope of property","e447e038":"* The saleprice have values in between **34,900** and **75,50,00**. \n* Its mean value is **1,80,921**. Also data is right skewed.\n* And median value is **1,63,000**, which is less than the mean value.","6de79c69":"## Missing Values Treatment :"}}