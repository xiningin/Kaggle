{"cell_type":{"e99f5303":"code","2eb4e4b0":"code","f147a222":"code","dd465f8a":"code","c1f8ffec":"code","6196fea6":"code","01de38ea":"code","bb27e533":"code","4c1b262f":"code","8fd2c052":"code","89204fde":"code","6fe3b0e2":"code","162846f9":"code","311059e8":"code","4116962e":"code","a6709e29":"code","8b0f6bba":"code","07fa391f":"code","2f650f2b":"markdown","df69269a":"markdown","d86f9bdf":"markdown","3e2ba522":"markdown","3b3d96bc":"markdown","ddf7fe8a":"markdown"},"source":{"e99f5303":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport glob\nimport plotly.express as px\nimport warnings\nimport plotly as py\nimport plotly.graph_objs as go\nimport collections\nimport seaborn as sns\nfrom datetime import datetime\nfrom statsmodels.tsa.stattools import adfuller\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.metrics import mean_squared_error,classification_report\nimport statsmodels.api as sm\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\n\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\n# Local server SQL database\nimport sqlite3 as sq\n\nimport sys\n\nimport pandas_datareader.data as web\nimport statsmodels.formula.api as smf\nimport statsmodels.tsa.api as smt\nimport statsmodels.api as sm\nimport scipy.stats as scs\nimport matplotlib as mpl\np = print\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2eb4e4b0":"import warnings\nwarnings.filterwarnings('ignore')","f147a222":"!pip install xlrd==1.2.0\n!pip install openpyxl","dd465f8a":"con = sq.connect('project1.db')\ncur = con.cursor()","c1f8ffec":"path = '..\/input\/test-daraz'\nall_files = glob.glob(path + \"\/*.xlsx\")\nfor file in all_files: # For all files in our directory\n    df = pd.read_excel(file, index_col=0,skiprows=3) # Read each CSV file\n    df.to_sql(file, con) # Create the read file as a table in the database.","6196fea6":"rename_tables_query1 = '''ALTER TABLE \"..\/input\/test-daraz\/Data Analyst Test - Dataset.xlsx\" RENAME TO \"customers_dataset\" '''\nrename_tables1 = pd.read_sql(rename_tables_query1, con)","01de38ea":"df=pd.read_excel(\"..\/input\/test-daraz\/Data Analyst Test - Dataset.xlsx\", index_col=0,skiprows=3)","bb27e533":"df.columns","4c1b262f":"df.head()","8fd2c052":"q1 = '''SELECT `Shop Id`,count(category) AS N_category\n        FROM customers_dataset\n        GROUP BY `Shop Id` \n        ORDER BY N_category DESC\n        '''\nr1 = pd.read_sql(q1, con)\nr1.head()","89204fde":"q2 = '''SELECT category ,count(1) AS product_NUM\n        FROM customers_dataset\n        GROUP BY category  \n        ORDER BY product_NUM DESC\n        '''\nr2 = pd.read_sql(q2, con)\nr2.head()","6fe3b0e2":"fig1 = px.bar(r2, x=\"product_NUM\", y=\"category\", orientation='h', hover_data=['product_NUM'], color='product_NUM', title='Top categories of product')\nfig1.update_layout(yaxis={'categoryorder':'total ascending'})\nfig1.show()","162846f9":"q3 = '''SELECT Item_Name ,SUM(sold_count) AS sold_product_num\n        FROM customers_dataset\n        GROUP BY Item_Name\n        ORDER BY sold_product_num DESC\n        '''\nr3 = pd.read_sql(q3, con)\nr3.head()","311059e8":"q4 = ('''\n      SELECT strftime(\"%Y\", item_creation_time) as year, SUM(price)*sold_count as REVENUE\n      FROM customers_dataset\n      WHERE sold_count>0\n      GROUP BY year\n       \n     ''' )\n\nr4 = pd.read_sql(q4, con)\n\nfig4 = px.pie(r4, values='REVENUE', names='year', title='Revenue generated in year')\niplot(fig4)","4116962e":"q5 = ('''\n      SELECT strftime(\"%m\", item_creation_time) as month, SUM(price)*sold_count as REVENUE\n      FROM customers_dataset\n      WHERE sold_count>0\n      GROUP BY month\n      ORDER BY month\n       \n     ''' )\n\nr5 = pd.read_sql(q5, con)\n\nfig5 = px.pie(r5, values='REVENUE', names='month', title='Revenue generated in months throughout year')\niplot(fig5)","a6709e29":"df.price.describe()","8b0f6bba":"q6 = ('''\n      SELECT category, SUM(stock) as total_stocks\n      FROM customers_dataset\n      GROUP BY category\n      ORDER BY total_stocks DESC\n       \n     ''' )\n\nr6 = pd.read_sql(q6, con)\n\nr6","07fa391f":"fig6 = px.bar(r6, x=\"total_stocks\", y=\"category\", orientation='h', barmode=\"group\",title='Categories having highest stocks')\nfig6.update_layout(yaxis={'categoryorder':'total ascending'})\niplot(fig6)\n","2f650f2b":"# Top selling items","df69269a":"# Shops with highest category item","d86f9bdf":"# Categories having highest stocks","3e2ba522":"# Revenue generated in months throughout year","3b3d96bc":"# Price range of product","ddf7fe8a":"# Revenue generated in year"}}