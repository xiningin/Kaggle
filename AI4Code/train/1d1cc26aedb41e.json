{"cell_type":{"e7542d38":"code","a71a4cb5":"code","cbafda56":"code","0cfb99c7":"code","c4beece0":"code","1b1f4e15":"code","a0bd3b3b":"code","53df2ebc":"code","3d13393a":"code","d9317085":"code","c1b6c089":"code","a409aeb2":"code","fab85c86":"code","4ae5f232":"code","dfbb3a21":"code","e3315d1c":"code","8f9e568c":"code","c5e84a6f":"code","08198fba":"code","d75afdf0":"code","3107ddd8":"code","38d9a8f4":"code","5ccbee05":"code","81c80ec5":"code","9399d89c":"code","cb5b8c68":"code","3b844316":"code","9981665f":"code","9eb4eaf7":"code","f54772f0":"code","d5ef1e44":"code","ed49bc75":"code","4bb743d3":"code","daa2cd8b":"code","4eb091cf":"code","42d43423":"code","a3fef875":"code","0af20e98":"code","b82d49eb":"code","c44eaa5e":"code","f9a71e21":"code","9dc8654e":"code","ef7a4cf8":"code","431a62ff":"code","472a83df":"code","ee3f948e":"code","f794dbcd":"code","9516180f":"code","1e9f365b":"code","02e0bca5":"code","2b011a52":"code","cd1f1a4a":"code","a02d42c3":"code","3c0c5c70":"code","5cb26267":"code","c926e9ae":"code","adaca5e2":"code","4ddb64ac":"code","d516af7e":"code","f9444449":"code","027b6127":"code","0f832db9":"code","13a436b0":"code","ccf8f41e":"code","a96c3841":"code","eeb3a3c8":"code","150fe501":"code","529b01db":"code","a23149e3":"code","9882d0ed":"code","95530b49":"code","3f13c01a":"code","c502e01e":"code","6bc72949":"code","e4797cf1":"code","668470fb":"code","a00687f8":"code","3a89d674":"code","65692acd":"code","f3b8c64e":"code","3fc45a2b":"code","c6b04112":"code","7a81ab41":"code","df1c4c0e":"code","51a16c20":"code","a2b42392":"code","24798a40":"code","ac24e7e3":"code","d1742384":"code","eea2912e":"code","24737459":"code","224f6ee1":"code","82779a7f":"code","aa37c55c":"code","058039f9":"code","e303aeb6":"code","e76fca65":"code","479a68f8":"code","f08d0670":"code","b0404ba9":"code","b72a09bb":"code","d837cee0":"code","7b3b47ff":"code","a42c18ef":"code","f445273e":"code","d82b3cfe":"code","8dbc63bf":"code","cc64a3fe":"code","11270454":"code","60b6015f":"code","9c11f88a":"code","1afd6ae4":"code","ea3d89b6":"code","0e15668f":"code","49a69fca":"code","a38c0256":"code","d8e4d3da":"code","49a2588b":"code","d24adad2":"code","dc3fbb35":"code","6bc37e07":"code","47343f5b":"code","e32ce0e2":"code","7b4bc44b":"code","01f67eb0":"code","d4427442":"code","97de6f72":"code","ae2f6cb2":"code","a1325ab7":"code","e4c679ae":"code","fa70efa8":"code","0c6d8807":"code","c86c5a12":"code","33f12efc":"code","f49b0b15":"code","23678a07":"code","e9b4fb1f":"code","aa0851ce":"code","e5c85388":"code","d7741505":"code","2fa2356c":"code","e2b08803":"code","d4c3cfe7":"code","a4dfa779":"code","fabc0378":"code","095f759f":"code","edc0045a":"code","142eddfd":"code","cef04ace":"code","ce6946b6":"markdown","e431f367":"markdown","45047c40":"markdown","dc7dbadd":"markdown","06401b8b":"markdown","b4bf6b25":"markdown","c891d84c":"markdown","4a5b1850":"markdown","ae7abaac":"markdown","0531c883":"markdown","891695a0":"markdown","f499c6b5":"markdown","099f5dc0":"markdown","e3886b83":"markdown","4f96e2fe":"markdown","a1b3cc76":"markdown","257481f8":"markdown","9e0fb182":"markdown"},"source":{"e7542d38":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 2000)","a71a4cb5":"h_train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\")\nh_train.head()","cbafda56":"h_train.dtypes.head()","0cfb99c7":"h_train.isnull().sum().head()","c4beece0":"total_missing=h_train.isnull().sum().sort_values()\npercMissing = h_train.isnull().sum() \/ h_train.isnull().count().sort_values()*100\nmissing = pd.concat([total_missing, percMissing], axis = 1, keys = ['total #', '%'])\nmissing[missing['total #'] > 0]","1b1f4e15":"## as we can see there are 4 features having  more than 80% null value it's better to drop that features rather than try to fill them\n\nh_train.drop([\"PoolQC\",\"MiscFeature\",\"Fence\",\"Alley\"],axis=1,inplace=True)","a0bd3b3b":"h_train['SalePrice'].describe()","53df2ebc":"sns.distplot(h_train['SalePrice']);","3d13393a":"#skewness and kurtosis\nprint(\"Skewness: %f\" % h_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % h_train['SalePrice'].kurt())","d9317085":"#scatter plot GrLivArea\/saleprice\nvar = 'GrLivArea'\ndata = pd.concat([h_train['SalePrice'], h_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","c1b6c089":"#scatter plot totalbsmtsf\/saleprice\nvar = 'TotalBsmtSF'\ndata = pd.concat([h_train['SalePrice'], h_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","a409aeb2":"# Relationship with categorical features\nsns.barplot(h_train.OverallQual,h_train.SalePrice)","fab85c86":"plt.subplots(figsize=(12, 9))\nsns.heatmap(h_train.corr())","4ae5f232":"#'SalePrice' correlation matrix (zoomed heatmap style) take only those columns from upper heatmap\ncol=h_train[['SalePrice','GarageYrBlt','OverallQual','GarageCars','GrLivArea','GarageArea','TotalBsmtSF','1stFlrSF','YearBuilt','TotRmsAbvGrd']]\ncol.corr()\n","dfbb3a21":"h_train.shape","e3315d1c":"print(\"Find most important features relative to target\")\ncorr = h_train.corr()\ncorr.sort_values([\"SalePrice\"], ascending = False, inplace = True)\nprint(corr.SalePrice)","8f9e568c":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(h_train[cols], size = 2.5)\nplt.show();","c5e84a6f":"h_train[['FireplaceQu','LotFrontage','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n        'BsmtQual','Electrical','GarageCond','GarageFinish','GarageQual','GarageType','GarageYrBlt','MasVnrArea','MasVnrType']].dtypes","08198fba":"h_train.shape","d75afdf0":"h_train[['LotFrontage','SalePrice']].corr()","3107ddd8":"sns.scatterplot(x = 'SalePrice', y = 'LotFrontage', data = h_train)","38d9a8f4":"h_train[['GarageYrBlt','SalePrice']].corr()","5ccbee05":"sns.scatterplot(x = 'SalePrice', y = 'GarageYrBlt', data = h_train)","81c80ec5":"h_train[['MasVnrArea','SalePrice']].corr()","9399d89c":"sns.scatterplot(x = 'SalePrice', y = 'MasVnrArea', data = h_train)","cb5b8c68":"h_train['LotFrontage'].replace(np.nan,h_train.LotFrontage.mean(),inplace=True)","3b844316":"h_train['GarageYrBlt'].replace(np.nan,h_train.GarageYrBlt.mean(),inplace=True)","9981665f":"h_train['MasVnrArea'].replace(np.nan,h_train.MasVnrArea.mean(),inplace=True)","9eb4eaf7":"h_train.isnull().sum()","f54772f0":"h_train.drop(h_train.loc[h_train['Electrical'].isnull()].index,inplace=True)","d5ef1e44":"h_train['Electrical'].isnull().sum()","ed49bc75":"h_train.shape","4bb743d3":"# h_train['Alley'].unique()","daa2cd8b":"# h_train['Alley'].replace(np.nan,'No_alley_access',inplace=True)\n\n# sns.countplot(data=h_train,x='Alley')\n\n# #nan replaced with No alley access as per the Data Dictionary","4eb091cf":"#BsmtQual\nh_train['BsmtQual'].unique()\n\n\n# as per the Data Dictionary nan stands for \"No Basement\"\n#so,\nh_train['BsmtQual'].replace(np.nan,'No_Basement',inplace=True)\n","42d43423":"sns.countplot(data=h_train,x='BsmtQual')","a3fef875":"#BsmtCond\nh_train['BsmtCond'].unique()\n\n# as per the Data Dictionary nan stands for \"No Basement\"\n#so,\nh_train['BsmtCond'].replace(np.nan,'No_Basement',inplace=True)\n\nsns.countplot(data=h_train,x='BsmtCond')","0af20e98":"#BsmtExposure\nh_train['BsmtExposure'].unique()\n\n# as per the Data Dictionary nan stands for \"No Basement\"\n#so,\nh_train['BsmtExposure'].replace(np.nan,'No_Basement',inplace=True)\n\nsns.countplot(data=h_train,x='BsmtExposure')","b82d49eb":"#BsmtFinType1\nh_train['BsmtFinType1'].unique()\n\n# as per the Data Dictionary nan stands for \"No Basement\"\n#so,\nh_train['BsmtFinType1'].replace(np.nan,'No_Basement',inplace=True)\n\nsns.countplot(data=h_train,x='BsmtFinType1')","c44eaa5e":"#BsmtFinType2\nh_train['BsmtFinType2'].unique()\n\n# as per the Data Dictionary nan stands for \"No Basement\"\n#so,\nh_train['BsmtFinType2'].replace(np.nan,'No_Basement',inplace=True)\n\nsns.countplot(data=h_train,x='BsmtFinType2')","f9a71e21":"#FireplaceQu\nh_train['FireplaceQu'].unique()\n\n# as per the Data Dictionary nan stands for \"No Fireplace\"\n#so,\nh_train['FireplaceQu'].replace(np.nan,'No_Fireplace',inplace=True)\n\nsns.countplot(data=h_train,x='FireplaceQu')","9dc8654e":"#GarageType\nh_train['GarageType'].unique()\n\n# as per the Data Dictionary nan stands for \"No Garage\"\n#so,\nh_train['GarageType'].replace(np.nan,'No_Garage',inplace=True)\n\nsns.countplot(data=h_train,x='GarageType')","ef7a4cf8":"#GarageFinish\nh_train['GarageFinish'].unique()\n\n# as per the Data Dictionary nan stands for \"No Garage\"\n#so,\nh_train['GarageFinish'].replace(np.nan,'No_Garage',inplace=True)\n\nsns.countplot(data=h_train,x='GarageFinish')\n","431a62ff":"#GarageQual\nh_train['GarageQual'].unique()\n\n# as per the Data Dictionary nan stands for \"No Garage\"\n#so,\nh_train['GarageQual'].replace(np.nan,'No_Garage',inplace=True)\n\nsns.countplot(data=h_train,x='GarageQual')","472a83df":"#GarageCond\nh_train['GarageCond'].unique()\n\n# as per the Data Dictionary nan stands for \"No Garage\"\n#so,\nh_train['GarageCond'].replace(np.nan,'No_Garage',inplace=True)\n\nsns.countplot(data=h_train,x='GarageCond')","ee3f948e":"# #PoolQC\n# h_train['PoolQC'].unique()\n\n# # as per the Data Dictionary nan stands for \"No Pool\"\n# #so,\n# h_train['PoolQC'].replace(np.nan,'No_Pool',inplace=True)\n\n# sns.countplot(data=h_train,x='PoolQC')","f794dbcd":"# #Fence\n# h_train['Fence'].unique()\n\n# # as per the Data Dictionary nan stands for \"No Fence\"\n# #so,\n# h_train['Fence'].replace(np.nan,'No_Fence',inplace=True)\n\n# sns.countplot(data=h_train,x='Fence')\n","9516180f":"# #MiscFeature\n# h_train['MiscFeature'].unique()\n\n# # as per the Data Dictionary nan stands for \"None\"\n# #so,\n# h_train['MiscFeature'].replace(np.nan,'None',inplace=True)\n\n# sns.countplot(data=h_train,x='MiscFeature')","1e9f365b":"h_train.shape","02e0bca5":"#MasVnrType\nh_train['MasVnrType'].unique()\n\n#in this there is no designation for nan so we are removing the nan values\nh_train.drop(h_train.loc[h_train['MasVnrType'].isnull()].index,inplace=True)","2b011a52":"sns.heatmap(h_train.isnull())","cd1f1a4a":"# #standardizing data\n# saleprice_scaled = StandardScaler().fit_transform(h_train['SalePrice'][:,np.newaxis]);\n# low_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\n# high_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\n# print('outer range (low) of the distribution:')\n# print(low_range)\n# print('\\nouter range (high) of the distribution:')\n# print(high_range)","a02d42c3":"# sns.distplot(h_train['SalePrice'], fit=norm);\n# fig = plt.figure()\n# res = stats.probplot(h_train['SalePrice'], plot=plt)","3c0c5c70":"# h_train['SalePrice'].quantile([0.1,0.2,0.3,0.4])\n# ### as we can see from above graph there is one outlier at -3 std and 2 at +3 std and same we can see below also\n","5cb26267":"# h_train['SalePrice'].quantile([0.97,0.98,0.99,1])","c926e9ae":"# #applying log transformation\n# h_train['SalePrice'] = np.log(h_train['SalePrice'])","adaca5e2":"# #transformed histogram and normal probability plot\n# sns.distplot(h_train['SalePrice'], fit=norm);\n# fig = plt.figure()\n# res = stats.probplot(h_train['SalePrice'], plot=plt)","4ddb64ac":"# h_train['SalePrice'].quantile([0.1,0.2,0.3,0.4])","d516af7e":"# h_train['SalePrice'].quantile([0.97,0.98,0.99,1])","f9444449":"# h_train.drop(h_train[h_train['SalePrice']<11.728037].index,axis=0,inplace=True)","027b6127":"# h_train.drop(h_train[h_train['SalePrice']>12.993142].index,axis=0,inplace=True)","0f832db9":"# h_train=h_train.drop('Id',axis=1)","13a436b0":"# h_train.shape","ccf8f41e":"# #LotFrontage\n# sns.distplot(h_train['LotFrontage'], fit=norm);\n# fig = plt.figure()\n# res = stats.probplot(h_train['LotFrontage'], plot=plt)","a96c3841":"# h_train['LotFrontage'].quantile([0.1,0.2,0.3,0.4])","eeb3a3c8":"# h_train['LotFrontage'].quantile([0.96,0.97,0.98,0.99,1])","150fe501":"# h_train.drop(h_train[h_train['LotFrontage']>139.2].index,axis=0,inplace=True)","529b01db":"# h_train.shape","a23149e3":"# #LotArea\n# sns.distplot(h_train['GrLivArea'], fit=norm);\n# fig = plt.figure()\n# res = stats.probplot(h_train['GrLivArea'], plot=plt)","9882d0ed":"# h_train['GrLivArea'].quantile([0.1,0.2,0.3,0.4])","95530b49":"# h_train['GrLivArea'].quantile([0.97,0.98,0.99,1])","3f13c01a":"# h_train.drop(h_train[h_train['GrLivArea']>2931.84].index,axis=0,inplace=True)","c502e01e":"# h_train.shape","6bc72949":"# sns.distplot(h_train['TotalBsmtSF'], fit=norm);\n# fig = plt.figure()\n# res = stats.probplot(h_train['TotalBsmtSF'], plot=plt)","e4797cf1":"# h_train['TotalBsmtSF'].quantile([0.1,0.2,0.3,0.4])","668470fb":"# h_train['TotalBsmtSF'].quantile([0.97,0.98,0.99,1])","a00687f8":"# h_train.drop(h_train[h_train['TotalBsmtSF']<814.0].index,axis=0,inplace=True)","3a89d674":"# h_train.drop(h_train[h_train['TotalBsmtSF']>2077.84].index,axis=0,inplace=True)","65692acd":"# h_train.shape","f3b8c64e":"h_train.drop('Id',axis=1,inplace=True)","3fc45a2b":"h_train.corr()","c6b04112":"h1_train=h_train[[\"SalePrice\",\"OverallQual\",\"YearBuilt\",\"TotalBsmtSF\",\"1stFlrSF\",\"GrLivArea\",\"FullBath\",\"GarageCars\",\"GarageArea\",\"TotRmsAbvGrd\"]]","7a81ab41":"# These are the best correlation with saleprice\n# OverallQual      0.790982\n# GrLivArea        0.708624\n# GarageCars       0.640409\n# GarageArea       0.623431\n# TotalBsmtSF      0.613581\n# 1stFlrSF         0.605852\n# FullBath         0.560664\n# TotRmsAbvGrd     0.533723\n# YearBuilt        0.522897","df1c4c0e":"h1_train.shape","51a16c20":"h1_train['TotRmsAbvGrd'].dtype","a2b42392":"h1_train_dum=pd.get_dummies(h1_train,drop_first=True)","24798a40":"h1_train_dum.shape","ac24e7e3":"x=h1_train_dum.drop(['SalePrice'],axis=1)\ny=h1_train_dum['SalePrice']","d1742384":"x.shape","eea2912e":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x, y , test_size=0.2 , random_state=21 )","24737459":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics","224f6ee1":"clf = RandomForestRegressor()\n\nparam_dist = {\"n_estimators\": [50, 100, 150,200]}\n\nclf.fit(x_train, y_train)","82779a7f":"y_pred=clf.predict(x_test)","aa37c55c":"print('MAE:',metrics.mean_absolute_error(y_test,y_pred))\n\nprint('*'*20)\n\n\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\nprint('*'*20)\n\n\nr2_score=metrics.r2_score(y_test,y_pred)\nprint('r2_score:',r2_score)","058039f9":"from sklearn.linear_model import LinearRegression","e303aeb6":"clf_lr=LinearRegression()\n\nclf_lr.fit(x_train,y_train)","e76fca65":"y_pred_lr=clf_lr.predict(x_test)","479a68f8":"print('MAE:',metrics.mean_absolute_error(y_test,y_pred_lr))\n\nprint('*'*20)\n\n\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred_lr)))\nprint('*'*20)\n\n\nr2_score=metrics.r2_score(y_test,y_pred_lr)\nprint('r2_score:',r2_score)","f08d0670":"from sklearn.model_selection import cross_val_score,KFold","b0404ba9":"kf=KFold(n_splits=5)\nRFRegressor=RandomForestRegressor(random_state=5)\n\nscore=cross_val_score(RFRegressor,x,y,cv=kf,scoring='neg_mean_squared_error')\n\nr=score.mean()\nprint(r)","b72a09bb":"from math import sqrt\n\nsqrt(-r)","d837cee0":"## use this\nkf=KFold(n_splits=5)\nLRegressor=LinearRegression()\n\nscore=cross_val_score(LRegressor,x,y,cv=kf,scoring='neg_mean_squared_error')\n\nr=score.mean()\nprint(r)","7b3b47ff":"from math import sqrt\n\nsqrt(-r)","a42c18ef":"import xgboost as xgb","f445273e":"model = xgb.XGBRegressor()\n\nmodel.fit(x_train,y_train)","d82b3cfe":"y_pred_xgb=model.predict(x_test)\n\ny_pred_xgb","8dbc63bf":"print('MAE:',metrics.mean_absolute_error(y_test,y_pred_xgb))\n\nprint('*'*20)\n\n\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test,y_pred_xgb)))\nprint('*'*20)\n\n\nr2_score=metrics.r2_score(y_test,y_pred_xgb)\nprint('r2_score:',r2_score)","cc64a3fe":"kf=KFold(n_splits=5)\nxgbRegressor=xgb.XGBRegressor()\n\nscore=cross_val_score(xgbRegressor,x,y,cv=kf,scoring='neg_mean_squared_error')\n\nr=score.mean()\nprint(r)","11270454":"from math import sqrt\n\nsqrt(-r)","60b6015f":"h_test=pd.read_csv(\"test.csv\")\nh_test.head()","9c11f88a":"h_test.shape","1afd6ae4":"total_missing_t=h_test.isnull().sum().sort_values()\npercMissing_t = h_test.isnull().sum() \/ h_test.isnull().count().sort_values()*100\nmissing_t = pd.concat([total_missing_t, percMissing_t], axis = 1, keys = ['total #', '%'])\nmissing_t[missing_t['total #'] > 0]","ea3d89b6":"# h_test['Alley'].replace(np.nan,'No_alley_access',inplace=True)\n\n# #sns.countplot(data=h_train,x='Alley')","0e15668f":"#BsmtCond\n# h_test['BsmtCond'].replace(np.nan,'No_Basement',inplace=True)","49a69fca":" #BsmtExposure\n# h_test['BsmtExposure'].replace(np.nan,'No_Basement',inplace=True)","a38c0256":"h1_test=h_test[[\"OverallQual\",\"YearBuilt\",\"TotalBsmtSF\",\"1stFlrSF\",\"GrLivArea\",\"FullBath\",\"GarageCars\",\"GarageArea\",\"TotRmsAbvGrd\"]]","d8e4d3da":"h1_test.isnull().sum()","49a2588b":"#GarageCars\nh1_test.dtypes\n# h_test['GarageCars'].replace(np.nan,'No_Basement',inplace=True)","d24adad2":"h1_test.drop(h1_test.loc[h1_test['GarageCars'].isnull()].index,inplace=True)","dc3fbb35":"h1_test.drop(h1_test.loc[h1_test['TotalBsmtSF'].isnull()].index,inplace=True)","6bc37e07":"h1_test_dum=pd.get_dummies(h1_test,drop_first= True)","47343f5b":"y_pred_xgb_test=model.predict(h1_test_dum)","e32ce0e2":"y_pred_xgb_test=pd.DataFrame(y_pred_xgb_test)","7b4bc44b":"y_pred_xgb_test.head()","01f67eb0":"sample=pd.read_csv('sample_submission.csv')","d4427442":"sample.head()","97de6f72":"submit=pd.concat([sample.Id,y_pred_xgb_test],axis=1)","ae2f6cb2":"submit.head()","a1325ab7":"submit.columns=[\"Id\",\"SalePrice\"]","e4c679ae":"# sns.lmplot(\"Id\",\"SalePrice\",data=submit,fit_reg=True)","fa70efa8":"submit.to_csv(\"Submission_HLP_kaggle.csv\",index=False)","0c6d8807":"submit.shape","c86c5a12":"submit.loc[submit[\"SalePrice\"].isnull()]","33f12efc":"from sklearn.model_selection import RandomizedSearchCV\nfrom numpy import nan","f49b0b15":"import xgboost as xgb\nmodel = xgb.XGBRegressor()\n\nmodel.fit(x_train,y_train)","23678a07":"Booster=[\"gbtree\",\"gblinear\"]\nbase_score=[0.25,0.50,0.75,1]","e9b4fb1f":"n_estimators=[100,500,900,1000,1500]\nmax_depth=[2,3,5,10,15]\nBooster=[\"gbtree\",\"gblinear\"]\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\nhyperparameter_grid={\n    \"n_estimators\":n_estimators,\n    \"max_depth\":max_depth,\n    \"Booster\":Booster,\n    \"learning_rate\":learning_rate,\n    \"min_child_weight\":min_child_weight,\n    \"base_score\":base_score\n    \n}\n","aa0851ce":"random_cv=RandomizedSearchCV(estimator=model,\n                            param_distributions=hyperparameter_grid,\n                            cv=5,n_iter=50,\n                            scoring=\"neg_mean_absolute_error\",n_jobs=4,\n                            verbose=5,\n                            return_train_score=True,\n                            random_state=42)","e5c85388":"random_cv.fit(x_train,y_train)","d7741505":"random_cv.best_estimator_","2fa2356c":"regressor=xgb.XGBRegressor(Booster='gbtree', base_score=0.5, booster=None,\n             colsample_bylevel=1, colsample_bynode=1, colsample_bytree=1,\n             gamma=0, gpu_id=-1, importance_type='gain',\n             interaction_constraints=None, learning_rate=0.15, max_delta_step=0,\n             max_depth=2, min_child_weight=2, missing=nan,\n             monotone_constraints=None, n_estimators=100, n_jobs=0,\n             num_parallel_tree=1, objective='reg:squarederror', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method=None, validate_parameters=False, verbosity=None)","e2b08803":"regressor.fit(x_train,y_train)","d4c3cfe7":"y_pred_ran=regressor.predict(h1_test_dum)","a4dfa779":"y_pred_ran","fabc0378":"y_pred_ran=pd.DataFrame(y_pred_ran)","095f759f":"submit_ran=pd.concat([sample.Id,y_pred_ran],axis=1)","edc0045a":"submit_ran.head()","142eddfd":"submit_ran.columns=[\"Id\",\"SalePrice\"]","cef04ace":"submit_ran.to_csv(\"Submission_HLP_ran_kaggle.csv\",index=False)","ce6946b6":"#### linear relationship","e431f367":"#### We have positive skewness.","45047c40":"#### As we can see TotRmsAbvGrd,1stFlrSF and GarageYrBlt are less correlated","dc7dbadd":"## Cross validation","06401b8b":"## XGB with CV","b4bf6b25":"Ok, 'SalePrice' is not normal. It shows 'peakedness', positive skewness and does not follow the diagonal line.\n\nBut everything's not lost. A simple data transformation can solve the problem. This is one of the awesome things you can learn in statistical books: in case of positive skewness, log transformations usually works well. When I discovered this, I felt like an Hogwarts' student discovering a new cool spell.\n","c891d84c":"## Now its for model building","4a5b1850":"### As we can see only three variable are float so we can check their corelation with SalePrice","ae7abaac":"# Hyperparameter Tuning","0531c883":"### Now its for outliers","891695a0":"### analysing 'SalePrice","f499c6b5":"#### As we can see that higher the Quality higher the price","099f5dc0":"### As we can see there is a correlation with SalePrice so we can not simply delete null values so we can replace null with median so spread will not change","e3886b83":"#### Now we handle numerical values so its time to fill categorical values","4f96e2fe":"# Test data","a1b3cc76":"#### linear but not as above","257481f8":"##### Now we are clear with the Nan values present in Dataset","9e0fb182":"###  These all the columns which have null values\n###  Take one coloumn at a time for missing values"}}