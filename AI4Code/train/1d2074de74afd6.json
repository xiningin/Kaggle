{"cell_type":{"3fa2ce6d":"code","b00ac421":"code","618b9ba1":"code","4b22c3fc":"code","b877c55f":"code","be3680f0":"code","916ddff9":"code","40764cba":"code","0a14702a":"code","25622871":"code","fe93b4bf":"code","c5eb7ab8":"code","849aa514":"code","843c9ca6":"code","2ec03e0c":"code","862bef25":"code","7a984ee7":"code","cde5a1e0":"code","e4536dee":"code","0a148e52":"code","00be2bb6":"code","45b94097":"code","ca45963f":"code","acfb3adb":"code","6317b8e2":"code","46ba7076":"code","bed4b2f5":"code","af7cd573":"code","0e2dd5c2":"code","c847be5f":"code","e6c817d3":"code","5d6cb9d9":"code","1b064021":"markdown","37c4647b":"markdown","fc4f7742":"markdown","2772c74c":"markdown","4654db20":"markdown","9ddfe09f":"markdown","48a42786":"markdown","bde03226":"markdown","9d15914a":"markdown","33c222dd":"markdown","544e190b":"markdown","ae73a400":"markdown","451cedf3":"markdown","25968b83":"markdown","194858ae":"markdown","4288083a":"markdown","c5770047":"markdown"},"source":{"3fa2ce6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b00ac421":"df = pd.read_csv('..\/input\/train.csv')\ndf[:3].T","618b9ba1":"df.isnull().sum()","4b22c3fc":"df.groupby('Sex')['Survived'].mean()","b877c55f":"def kill(d):\n    if d['Sex'] == 'male':\n        return 1\n    return 0","be3680f0":"criteria = list(df.columns)\ncriteria","916ddff9":"useless = ['Name', # \uadc0\ucc2e\uc544\n           'PassengerId', # \ud544\uc694\uc5c6\uc5b4\n           'Survived', # ??\n           'Ticket', # \uadc0\ucc2e\uc544\n           'Sex', # \uc544\uae4c \uc8fd\uc600\uc5b4\n           'Cabin' # null\uc774 \ub108\ubb34 \ub9ce\uc544\n          ]\nfor criterion in useless:\n    criteria.remove(criterion)","40764cba":"for criterion in criteria:\n    print(criterion)\n    print(df.groupby(criterion)['Survived'].mean())","0a14702a":"df['Age'].hist(bins=20)","25622871":"df.groupby(df['Age'].isnull())['Survived'].mean()","fe93b4bf":"# \uc74c... Age\uac00 Nan\uc774\ub77c\uace0 \uc8fd\uc774\ub294 \uac8c \ub9de\uc744\uae4c\uc694? \uc77c\ub2e8 \ud574\ubd05\uc2dc\ub2e4.\ndef kill2(d):\n    if kill(d) or np.isnan(d['Age']):\n        return 1\n    return 0","c5eb7ab8":"df[df['Age'].isnull()][:3].apply(kill2, axis=1)","849aa514":"df[df['Age'].isnull()==False][:3]","843c9ca6":"df[df['Age'].isnull()==False][:3].apply(kill2, axis=1)","2ec03e0c":"df['Age_bin'] = df['Age'].apply(lambda x:x\/\/10)\ndf[:3]","862bef25":"df['Fare'].hist(bins=20, range=(0,200))","7a984ee7":"df['Fare_bin'] = df['Fare'].apply(lambda x:x\/\/10)","cde5a1e0":"criteria.remove('Fare')\ncriteria.remove('Age')\ncriteria += ['Fare_bin','Age_bin']","e4536dee":"for criterion in criteria:\n    print(criterion)\n    print(df.groupby(criterion)['Survived'].mean())","0a148e52":"def kill3(d):\n    if kill2(d) or d['SibSp'] > 4 or d['Parch'] > 3 or d['Fare_bin'] < 1:\n        return 1\n    return 0","00be2bb6":"1 - df.apply(kill3, axis=1).mean()","45b94097":"df['Survived'].mean()","ca45963f":"df['Predicted'] = df.apply(lambda x: 1-kill3(x), axis=1)\nnp.mean(df['Predicted'] == df['Survived'])","acfb3adb":"def kill4(d):\n    if kill(d) or d['SibSp'] > 4 or d['Parch'] > 3 or d['Fare_bin'] < 1:\n        return 1\n    return 0","6317b8e2":"df['Predicted'] = df.apply(lambda x: 1-kill4(x), axis=1)\nnp.mean(df['Predicted'] == df['Survived'])","46ba7076":"df_test = pd.read_csv('..\/input\/test.csv')","bed4b2f5":"df_test['Predicted'] = df_test.apply(kill4, axis=1)","af7cd573":"def kill5(d):\n    if kill(d) or d['SibSp'] > 4 or d['Parch'] > 3 or d['Fare'] < 5:\n        return 1\n    return 0","0e2dd5c2":"df_test['Survived'] = df_test.apply(kill5, axis=1)","c847be5f":"df_test[:3]","e6c817d3":"df_test[['PassengerId','Survived']].to_csv('znmean.csv', index=False)","5d6cb9d9":"print(df_test[['PassengerId','Survived']].to_csv(index=False))","1b064021":"## \ub204\uad74 \uc8fd\uc77c\uc9c0 \uc880 \ubd05\uc2dc\ub2e4.","37c4647b":"# \ud544\uc0dd\uc989\uc0ac\uc758 \ub9c8\uc74c\uc744 \ub2f4\uc544 \uacb0\uacfc\ub97c \uc62c\ub9bd\ub2c8\ub2e4.","fc4f7742":"## \uc544 \uc7a0\uae50... \ub610 \ub204\uad74 \uc8fd\uc774\uc9c0?","2772c74c":"## \ub370\uc774\ud130 \uad6c\uacbd\ud558\uae30","4654db20":"### \uc544 \ub9de\ub2e4 Fare_bin\uc744 \uc37c\uc8e0. \uadc0\ucc2e\uc73c\ub2c8\uae4c \uc870\uac74\uc744 \ubc14\uafc9\uc2dc\ub2e4.","9ddfe09f":"## \uc694\uae08\uc744 \ubd05\uc2dc\ub2e4.","48a42786":"### \ud14c\uc2a4\ud2b8","bde03226":"### \ub05d!!","9d15914a":"### \uc544, \uc544\uae4c age\uac00 Nan\uc774\ub77c\uace0 \uc8fd\uc778 \uc0ac\ub78c\ub4e4\uc774 \uc788\ub294\ub370\uc694.\n\uc774 \uc0ac\ub78c\ub4e4\uc744 \uc0b4\ub9ac\uba74 \uc5b4\ub5bb\uac8c \ub418\ub098 \ubd05\uc2dc\ub2e4.","33c222dd":"## \uadf8\ub7fc \uc9c4\uc9dc\ub85c \uc8fd\uc5ec\ubcfc\uae4c\uc694.","544e190b":"## \ub370\uc774\ud130\uac00 \uc5bc\ub9c8\ub098 \uae68\ub057\ud55c\uc9c0 \uc880 \ubd05\uc2dc\ub2e4.","ae73a400":"## \ub0b4\uac00 \ub354 \ub9ce\uc774 \uc8fd\uc600\ub124?\n\uadf8\uac74 \uc911\uc694\ud55c \uac8c \uc544\ub2cc\ub370... \uc5bc\ub9c8\ub098 \ub9de\ucdc4\ub098 \ubd05\uc2dc\ub2e4.","451cedf3":"## \uc77c\ub2e8 \ub0a8\uc790\ub97c \uc880 \uc8fd\uc5ec\ubcfc\uae4c \uc2f6\uc740\ub370\uc694","25968b83":"## Age, Fare\ub294 \uc815\ub9ac\uac00 \ud544\uc694\ud574\ubcf4\uc774\ub124\uc694.","194858ae":"### \ud2b8\ub808\uc774\ub2dd\uc14b\uc5d0\uc120 \uc880 \ub0ab\ub124\uc694. \uadf8\ub7fc \uc774\ub300\ub85c \ud14c\uc2a4\ud2b8\uc14b\uc5d0 \ub3cc\ub824\uc11c \uacb0\uacfc\ub97c \uc62c\ub824\ubcfc\uae4c\uc694?","4288083a":"# Brute Force Attack\n\ubb34\uc790\ube44\ud55c \ud798(=\ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c, \ub300\ucda9 \ud569\ub2c8\ub2e4.)\uc73c\ub85c \uc2b9\uac1d\ub4e4\uc744 \uacf5\uaca9\ud558\uc5ec \uc8fd\uc5ec\ubd05\uc2dc\ub2e4.  \n\uc0ac\uc2e4 plot\uc6a9\uc73c\ub85c pyplot\uc744 \uc501\ub2c8\ub2e4. pandas\uc5d0\ub3c4 \ub4e4\uc5b4\uc788\uc73c\ub2c8\uae4c \uc774\uac74 \ubd10\uc8fc\uc138\uc694.","c5770047":"## \uc798\ub410\ub124? \uadf8\ub7fc \ub0a8\uc790\ub97c \uc8fd\uc774\uc9c0 \ubb50"}}