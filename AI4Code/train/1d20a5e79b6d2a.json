{"cell_type":{"04ccaa0e":"code","7ef89e55":"code","a6fb2613":"code","d9c4ea37":"code","10748093":"code","4e6b62cf":"code","91b2a4fb":"code","c2262d9d":"code","53f8cbf4":"markdown","17c0a6ae":"markdown","ebb897e0":"markdown","3f82314a":"markdown","7c9e57ab":"markdown"},"source":{"04ccaa0e":"from learntools.core import binder\nbinder.bind(globals())\nfrom learntools.game_ai.ex2 import *","7ef89e55":"# TODO: Assign your values here\nA = 100000000\nB = 2\nC = 1\nD = -2\nE = -10000\n\n# Check your answer (this will take a few seconds to run!)\nq_1.check()","a6fb2613":"# Lines below will give you a hint or solution code\n#q_1.hint()\n#q_1.solution()","d9c4ea37":"q_2.hint()","10748093":"# Check your answer (Run this code cell to receive credit!)\nq_2.solution()","4e6b62cf":"def my_agent(obs, config):\n    valid_moves = [col for col in range(config.columns)]\n    grid = np.asarray(obs.board).reshape(config.rows,config.columns)\n    scores = dict(zip(valid_moves,[score_move(grid,col, obs.mark, config) for col in valid_moves]))\n    max_cols = [key for key in scores.keys() if scores[key]==max(scores.values)==max(scores.values())]\n    return random.choice(max_cols)\n","91b2a4fb":"# Run this code cell to get credit for creating an agent\nq_3.check()","c2262d9d":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","53f8cbf4":"### 1) A more complex heuristic\n\nThe heuristic from the tutorial looks at all groups of four adjacent grid locations on the same row, column, or diagonal and assigns points for each occurrence of the following patterns:\n\n<center>\n<img src=\"https:\/\/i.imgur.com\/vzQa4ML.png\" width=60%><br\/>\n<\/center>\n\nIn the image above, we assume that the agent is the red player, and the opponent plays yellow discs.\n\nFor reference, here is the `get_heuristic()` function from the tutorial:\n```python\ndef get_heuristic(grid, mark, config):\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    score = num_threes - 1e2*num_threes_opp + 1e6*num_fours\n    return score\n```\n\nIn the `get_heuristic()` function, `num_fours`, `num_threes`, and `num_threes_opp` are the number of windows in the game grid that are assigned 1000000, 1, and -100 point(s), respectively. \n    \nIn this tutorial, you'll change the heuristic to the following (where you decide the number of points to apply in each of `A`, `B`, `C`, `D`, and `E`).  You will define these values in the code cell below.\n\n<center>\n<img src=\"https:\/\/i.imgur.com\/FBoWr2f.png\" width=80%><br\/>\n<\/center>\n    \n\nTo check your answer, we use your values to create a heuristic function as follows:\n\n```python\ndef get_heuristic_q1(grid, col, mark, config):\n    num_twos = count_windows(grid, 2, mark, config)\n    num_threes = count_windows(grid, 3, mark, config)\n    num_fours = count_windows(grid, 4, mark, config)\n    num_twos_opp = count_windows(grid, 2, mark%2+1, config)\n    num_threes_opp = count_windows(grid, 3, mark%2+1, config)\n    score = A*num_fours + B*num_threes + C*num_twos + D*num_twos_opp + E*num_threes_opp\n    return score\n```\n\nThis heuristic is then used to create an agent, that competes against the agent from the tutorial in 50 different game rounds.  In order to be marked correct, \n- your agent must win at least half of the games, and\n- `C` and `D` must both be nonzero.","17c0a6ae":"### 3) Submit to the competition\n\nNow, it's time to submit an agent to the competition!  Use the next code cell to define an agent.  (You can see an example of how to write a valid agent in **[this notebook](https:\/\/www.kaggle.com\/alexisbcook\/create-a-connectx-agent)**.)\n\nYou're encouraged to use what you learned in the first question of this exercise to write an agent.  Use the code from the tutorial as a starting point. ","ebb897e0":"# Introduction\n\nIn the tutorial, you learned how to define a simple heuristic that the agent used to select moves.  In this exercise, you'll check your understanding and make the heuristic more complex.\n\nTo get started, run the code cell below to set up our feedback system.","3f82314a":"Run the next code cell to convert your agent to a submission file.","7c9e57ab":"### 2) Does the agent win?\n\nConsider the game board below.  \n\n<center>\n<img src=\"https:\/\/i.imgur.com\/AlnaQ3J.png\" width=30%><br\/>\n<\/center>\n\nSay the agent uses red discs, and it's the agent's turn.  \n- If the agent uses the heuristic **_from the tutorial_**, does it win or lose the game?\n- If the agent uses the heuristic **_that you just implemented_**, does it win or lose the game?"}}