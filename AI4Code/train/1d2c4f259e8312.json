{"cell_type":{"5a91b9e8":"code","02de5a18":"code","9db0e610":"code","63afbcad":"code","3cf9afbe":"code","b5fe3c0b":"code","2f1420a4":"code","54fa8fc1":"code","88b2987e":"code","3b6b3863":"code","8a5f0623":"code","ea208a4f":"code","4161c2e8":"code","9d0fff38":"code","ea6abeb9":"code","e74179ad":"code","767ec672":"markdown","779b968e":"markdown","b39d3f56":"markdown","98e59b2a":"markdown","e5f1b493":"markdown"},"source":{"5a91b9e8":"%%time\nimport sys\n!cp -f ..\/input\/rapids\/rapids.21.06 \/opt\/conda\/envs\/rapids.tar.gz\n!cd -f \/opt\/conda\/envs\/ && tar -xzvf rapids.tar.gz\nsys.path = [\"\/opt\/conda\/envs\/rapids\/lib\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\"] + [\"\/opt\/conda\/envs\/rapids\/lib\/python3.7\/site-packages\"] + sys.path\n!cp -f \/opt\/conda\/envs\/rapids\/lib\/libxgboost.so \/opt\/conda\/lib\/","02de5a18":"# Importing core libraries\nimport numpy as np\nimport pandas as pd\nfrom time import time\nimport os\nimport pprint\nimport joblib\nfrom functools import partial\n\n# Suppressing warnings because of skopt verbosity\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Regressors\nimport lightgbm as lgb\n\n# Model selection\nfrom sklearn.model_selection import KFold, StratifiedKFold\n\n# Metrics\nfrom sklearn.metrics import mean_squared_error\n\n# Data processing\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n# \nimport cudf, cuml\nimport cupy as cp\nfrom cuml.manifold import TSNE, UMAP\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import ylim, xlim\n%matplotlib inline","9db0e610":"# Loading data \nX_train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\nX_test = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")","63afbcad":"# Preparing data as a tabular matrix\ny = X_train.claim\nX_train = X_train.set_index('id').drop('claim', axis='columns')\nX_test = X_test.set_index('id')","3cf9afbe":"# Elaborating missing indicators\nX = X_train.isna().astype(int).append(X_test.isna().astype(int))","b5fe3c0b":"tsne = TSNE(n_components=2, perplexity=10, n_neighbors=100)\nprojection_2D = tsne.fit_transform(X)","2f1420a4":"projection_2D_train = projection_2D[:len(X_train), :]\nprojection_2D_test = projection_2D[len(X_train):, :]","54fa8fc1":"valid_0 = (projection_2D_train[:,0] < 300) & (projection_2D_train[:,0] >-300)\nvalid_1 = (projection_2D_train[:,1] < 300) & (projection_2D_train[:,1] >-300)\nvalid = valid_0 & valid_1","88b2987e":"plt.figure(figsize=(15, 15))\nplt.scatter(projection_2D_train[valid, 0], projection_2D_train[valid, 1],\n            c=y.values[valid],\n            edgecolor='none', \n            alpha=0.80, \n            s=10)\nplt.axis('off')\nplt.show();","3b6b3863":"X_train['t_sne_0'] = projection_2D_train[:, 0]\nX_test['t_sne_0'] = projection_2D_test[:, 0]\n\nX_train['t_sne_1'] = projection_2D_train[:, 1]\nX_test['t_sne_1'] = projection_2D_test[:, 1]","8a5f0623":"# UMAP\numap = UMAP(n_components=2, n_neighbors=70)\nprojection_2D = umap.fit_transform(X)","ea208a4f":"projection_2D_train = projection_2D[:len(X_train), :]\nprojection_2D_test = projection_2D[len(X_train):, :]","4161c2e8":"valid_0 = (projection_2D_train[:,0] < 2000) & (projection_2D_train[:,0] >-2000)\nvalid_1 = (projection_2D_train[:,1] < 2000) & (projection_2D_train[:,1] >-2000)\nvalid = valid_0 & valid_1","9d0fff38":"plt.figure(figsize=(15, 15))\nplt.scatter(projection_2D_train[valid, 0], projection_2D_train[valid, 1],\n            c=y.values[valid],\n            edgecolor='none', \n            alpha=0.80, \n            s=10)\nplt.axis('off')\nplt.show();","ea6abeb9":"X_train['t_umap_0'] = projection_2D_train[:, 0]\nX_test['t_umap_0'] = projection_2D_test[:, 0]\n\nX_train['t_umap_1'] = projection_2D_train[:, 1]\nX_test['t_umap_1'] = projection_2D_test[:, 1]","e74179ad":"# Saving the t-SNE and UMAP coordinates as feature\nX_train['claim'] = y\nX_train.reset_index().to_csv(\"train.csv\", index=False)\nX_test.reset_index().to_csv(\"test.csv\", index=False)","767ec672":"Uhmmm...this start shaped result is quite uncommon, I wonder if it can be useful...anyway this is the first time I see this shape!","779b968e":"You can use the coordinates elaborated by t-SNE and UMAP as features. By making them interact you could even use them for linear models and neural networks, making them even more effective.","b39d3f56":"T-SNE (https:\/\/lvdmaaten.github.io\/tsne\/) and UMAP (https:\/\/github.com\/lmcinnes\/umap) are two technicalities, often used by data scientists, that allow to project multivariate data into lower dimensions. They are often used to find clusters in data. I used the fast t-SNE and UMAP implementations offered by Rapids (they require GPU access). ","98e59b2a":"Bingo! The positive claims are segregated into a specific area, meaning they are predictable based on the missing patterns.","e5f1b493":"# When stuff is not missing at random\nIn the discussion https:\/\/www.kaggle.com\/c\/tabular-playground-series-sep-2021\/discussion\/270206, Ryan Holbrook from Kaggle staff, remarked that missingness is the magic feature because they intentionally correlated missingness with the claim target. That's why summing the number of missing features per case is such a predictive feature :-)\n\nAnyway, is it just the number of missing features per case or we can extract further information from missin cases, such as specific patterns?\n\nIn this notebook, t-SNE and UMAP are used to try to extract further features from missing cases. In particular t-SNE seems able to extract an almost complete separation between claims and it could be useful as a predictive feature."}}