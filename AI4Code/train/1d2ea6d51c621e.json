{"cell_type":{"6edec9f4":"code","67e58b51":"code","8f06814f":"code","e85f1c25":"code","5cb62562":"code","d6452599":"code","8d0223f6":"code","47259f6d":"code","345959c9":"code","709b4428":"code","2fda09a4":"code","e6ed898b":"code","366ad007":"code","3e71ff7f":"code","d76cbf4c":"code","5cd8e9e4":"code","06c0cc77":"code","f3ac58e9":"code","c228340e":"code","4f4d4c8c":"code","38e8f65d":"code","7dcc0161":"code","0331ae64":"code","3cafb002":"code","3d06b3d5":"code","6c900b88":"code","54b80bc5":"code","490f6a0a":"code","8aa53f0e":"code","1f9bbe91":"code","4bd7b9c8":"code","af57c961":"code","da716d87":"code","c23deb86":"code","a0d394be":"markdown","f64fd176":"markdown","2f804931":"markdown","b4ffd800":"markdown","0f3ca8a8":"markdown","edd8fe1e":"markdown","c4a400f6":"markdown","e4b12242":"markdown","b481adc0":"markdown","b66ac998":"markdown","6b3de8eb":"markdown","3cf90934":"markdown","0317d84b":"markdown","3c8e841b":"markdown"},"source":{"6edec9f4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","67e58b51":"arr = np.array([[[3, 4, 5], [8, 2, 5], [1, 9, 5],[3, 4, 5], [8, 2, 5], [1, 9, 5]],\n               [[3, 0, 1], [0, 0, 0], [1, 10, 3],[3, 4, 5], [8, 20, 5], [1, 9, 5]],\n               [[35, 50, 51], [8, 52, 57], [20, 20, 20],[3, 4, 11], [12, 2, 5], [1, 9, 5]],\n               [[3, 0, 1], [8, 2, 7], [1, 10, 3],[3, 4, 5], [14, 2, 20], [1, 9, 5]],\n               [[3, 0, 1], [8, 2, 7], [20, 20, 21],[3, 4, 5], [16, 2, 18], [1, 9, 5]],\n               [[3, 0, 1], [13, 19, 16], [1, 10, 3],[5, 4, 6], [9, 2, 10], [1, 9, 5]]])\narr.shape","8f06814f":"plt.imshow(arr)\nplt.show()","e85f1c25":"arr[:,:,0] *= 10 ","5cb62562":"plt.imshow(arr)\nplt.show()","d6452599":"arr[:,:,1] *= 7","8d0223f6":"plt.imshow(arr)\nplt.show()","47259f6d":"arr1 = np.copy(arr)","345959c9":"np.random.seed(5)\nnp.random.shuffle(arr1)\nplt.imshow(arr1)\nplt.show()","709b4428":"_,(ax) = plt.subplots(ncols=3, figsize=(16,5)) \nax[0].hist(arr1[:,:,0],bins=10)\nax[1].hist(arr1[:,:,1],bins=10)\nax[2].hist(arr1[:,:,2],bins=10)\nplt.show()","2fda09a4":"arr2 = arr1[:,:,0]+arr1[:,:,0]\nplt.imshow(arr2)\nplt.show()","e6ed898b":"red1 = np.concatenate((arr1[:,:,0], arr1[:,:,0]), axis=0)\ngreen1 = np.concatenate((arr1[:,:,1], arr1[:,:,1]), axis=0)\nblue1 = np.concatenate((arr1[:,:,2], arr1[:,:,2]), axis=0)","366ad007":"red1","3e71ff7f":"_,(ax) = plt.subplots(ncols=3, figsize=(16,5)) \nax[0].imshow(red1)\nax[1].imshow(green1)\nax[2].imshow(blue1)\nplt.show()","d76cbf4c":"image = cv2.merge((red1,green1, blue1))\nplt.imshow(image)\nplt.show()","5cd8e9e4":"image_rotation = np.rot90(image)\nplt.imshow(image_rotation)\nplt.show()","06c0cc77":"image_flip = np.fliplr(image)\nplt.imshow(image_flip)\nplt.show()","f3ac58e9":"img_rec = np.copy(image)","c228340e":"img_rec[1,:,0] = 0\nimg_rec[1,:,1] = 50\nimg_rec[1,:,2] = 150","4f4d4c8c":"plt.imshow(img_rec)\nplt.show()","38e8f65d":"img_rec[:,3,0] = 0\nimg_rec[:,3,1] = 50\nimg_rec[:,3,2] = 150\nplt.imshow(img_rec)\nplt.show()","7dcc0161":"ogrid_x, ogrid_y = np.ogrid[0:10, 0:5]","0331ae64":"ogrid_x","3cafb002":"ogrid_img = ogrid_x+ogrid_y\nprint(ogrid_img)\nplt.imshow(ogrid_img)\nplt.show()","3d06b3d5":"ogrid_img = ogrid_img.T\nplt.imshow(ogrid_img)\nplt.show()","6c900b88":"YY, XX = np.mgrid[10:40:10, 1:4]\nZZ = XX + YY \nZZ","54b80bc5":"circle_mask = 5**2 + 7**2 <= 100**2\ncircle_mask","490f6a0a":"demo_image = plt.imread('\/kaggle\/input\/sample-images-for-kaggle-demos\/1928768_1035869614877_9398_n.jpg')\nplt.imshow(demo_image)\nplt.show()","8aa53f0e":"# Get the dimensions\nn,m,d = demo_image.shape\nprint(n,m,d)","1f9bbe91":"# Create an open grid for our image\nx,y = np.ogrid[0:n,0:m]","4bd7b9c8":"#copy image\ncopyImg = demo_image.copy()\n\n#get the x and y center points of our image\ncenter_x = n\/2\ncenter_y = m\/2\nprint(\"Center x and Center y\", center_x, center_y)\n\n#create a circle mask which is centered in the middle of the image\ncircle_mask = (x-center_x)**2+(y-center_y)**2 <= 8000\n\ncopyImg[circle_mask] = [0, 0,0]\n\nplt.imshow(copyImg)\nplt.show()\n","af57c961":"square_mask = (x<200)&(x>100)&(y<500)&(y>400)\n\ncopyImg[square_mask] = [255, 0,0]\n\nplt.imshow(copyImg)\nplt.show()","da716d87":"copyImg = demo_image.copy()\n\ncopyImg = demo_image[x, -y]\n\nplt.imshow(copyImg)\nplt.show()","c23deb86":"copyImg = demo_image.copy()\n\ncopyImg = demo_image[-x, y]\n\nplt.imshow(copyImg)\nplt.show()","a0d394be":"We should know about multidimensional array concept if you work in image processing. So am learning and also share my code for all. This code we will learn how to create image through numpy array and aslo apply basic operation. I have not explain, because my english not very good.  If it useful please upvote me.<br\/>\n**Thanks**","f64fd176":"We are get x and y axes index values through <code> ogrid <\/code> method. It is most importent task to get x and y index values in array. We are used this in add geometric shapes and also use rotation.\nNote: Predefined functions have available in **numpy** and **opencv** for image processing.","2f804931":"Thank you for visting. Happy to receive any comments :) <br\/><br\/>\n**References**\n\nhttps:\/\/towardsdatascience.com\/the-little-known-ogrid-function-in-numpy-19ead3bdae40","b4ffd800":"### Create a square mask\n\n","0f3ca8a8":"### Add geometric shapes","edd8fe1e":"### Open grid in numpy","c4a400f6":"### Meshgrid","e4b12242":"### Image flip","b481adc0":"### Rotation\n","b66ac998":"### Multply 10 in Red channel value","6b3de8eb":"### Image rotation using numpy","3cf90934":"### Multply 7 in Red channel value","0317d84b":"### Transpose ","3c8e841b":"### Create image in numpy"}}