{"cell_type":{"d909a9b1":"code","f354974e":"code","07f33de5":"code","cbd6b350":"code","d83b31a9":"code","ffa2b23a":"code","6ee3da0b":"code","9e1b8b4f":"code","ec7c2b8e":"code","0a54715d":"code","a4cd9d24":"code","6b438e3f":"code","c1e53d73":"code","bc1418b6":"code","c41e2ab1":"code","fe47069e":"code","fc481a22":"code","b7340608":"code","8965a773":"code","d8fe4d2d":"markdown","db99351b":"markdown","27fa84b0":"markdown","17461b93":"markdown","2aa300a1":"markdown","e7a43f82":"markdown"},"source":{"d909a9b1":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn import preprocessing\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import r2_score,mean_squared_error\nfrom sklearn.model_selection import train_test_split,KFold,cross_val_score,GridSearchCV,RandomizedSearchCV\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nsns.set(rc={'figure.figsize':(8,8)})\nimport scipy.stats as stats","f354974e":"data=pd.read_csv('..\/input\/car-price-prediction\/CarPrice_Assignment.csv')","07f33de5":"data.head()","cbd6b350":"data['CarName'] = data['CarName'].replace({'maxda': 'mazda', 'nissan': 'Nissan', 'porcshce': 'porsche', 'toyouta': 'toyota', \n                            'vokswagen': 'volkswagen', 'vw': 'volkswagen'})","d83b31a9":"quantitative = [f for f in data.columns if data.dtypes[f] != 'object']  ## Quantitative variables\nquantitative.remove('price')\nquantitative.remove('car_ID')\nqualitative = [f for f in data.columns if data.dtypes[f] == 'object']  ## Categorial variables","ffa2b23a":"missing = data.isnull().sum()  ##data is pandas data frame \nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\n#missing.plot.bar()  #here none of the values are missing otherwise uncomment this line\nprint (missing)","6ee3da0b":"import scipy.stats as st\ny=data['price']\nplt.figure(1); plt.title('Johnson SU')\nsns.distplot(y, kde=False, fit=st.johnsonsu)\nplt.figure(2); plt.title('Normal')\nsns.distplot(y, kde=False, fit=st.norm)\nplt.figure(3); plt.title('Log Normal')\nsns.distplot(y, kde=False, fit=st.lognorm)\n","9e1b8b4f":"f = pd.melt(data, value_vars=quantitative)\ng = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False)\ng = g.map(sns.distplot, \"value\")","ec7c2b8e":"def boxplot(x, y, **kwargs):\n    sns.boxplot(x=x, y=y)\n    x=plt.xticks(rotation=90)","0a54715d":"f = pd.melt(data, id_vars=['price'], value_vars=qualitative)\n","a4cd9d24":"g = sns.FacetGrid(f, col=\"variable\",  col_wrap=2, sharex=False, sharey=False, size=5)\ng = g.map(boxplot, \"value\", \"price\")","6b438e3f":"def anova(frame):\n    anv = pd.DataFrame()\n    anv['feature'] = qualitative\n    pvals = []\n    for c in qualitative:\n        samples = []\n        for cls in frame[c].unique():\n            s = frame[frame[c] == cls]['price'].values\n            samples.append(s)\n        pval = stats.f_oneway(*samples)[1]\n        pvals.append(pval)\n    anv['pval'] = pvals\n    return anv.sort_values('pval')","c1e53d73":"a = anova(data)\na['disparity'] = np.log(1.\/a['pval'].values)\nsns.barplot(data=a, x='feature', y='disparity')\nx=plt.xticks(rotation=90)","bc1418b6":"def encode(frame, feature):\n    ordering = pd.DataFrame()\n    ordering['val'] = frame[feature].unique()  ## ALl unique values of categorial variables\n    ordering.index = ordering.val\n    ordering['spmean'] = frame[[feature, 'price']].groupby(feature).mean()['price']  ## Group feature by mean sale price\n    ordering = ordering.sort_values('spmean')  ## Sort feature by mean saleprice\n    ordering['ordering'] = range(1, ordering.shape[0]+1)\n    ordering = ordering['ordering'].to_dict()\n    \n    for cat, o in ordering.items():\n        frame.loc[frame[feature] == cat, feature+'_E'] = o\n","c41e2ab1":"qual_encoded = []\nfor q in qualitative:  \n    encode(data, q)\n    qual_encoded.append(q+'_E')\nprint(qual_encoded)","fe47069e":"def spearman(frame, features):\n    spr = pd.DataFrame()\n    spr['feature'] = features\n    spr['spearman'] = [frame[f].corr(frame['price'], 'spearman') for f in features]  #Correlation of all features with Price\n    spr = spr.sort_values('spearman')\n    plt.figure(figsize=(6, 0.25*len(features)))\n    sns.barplot(data=spr, y='feature', x='spearman', orient='h')  ## Horizontal bar plot of comparison of all correlation\n    ","fc481a22":"features = quantitative + qual_encoded\nspearman(data, features)","b7340608":"plt.figure(1)\ncorr = data[quantitative+['price']].corr()  # Correlation of numberical\nsns.heatmap(corr)\nplt.figure(2)\ncorr = data[qual_encoded+['price']].corr()  # Correlation of categorial \nsns.heatmap(corr)\nplt.figure(3)\ncorr = pd.DataFrame(np.zeros([len(quantitative)+1, len(qual_encoded)+1]), index=quantitative+['price'], columns=qual_encoded+['SalePrice'])\nfor q1 in quantitative+['price']:\n    for q2 in qual_encoded+['price']:\n        corr.loc[q1, q2] = data[q1].corr(data[q2])\nsns.heatmap(corr)","8965a773":"pair = sns.pairplot(data[quantitative])  ","d8fe4d2d":"**Spearman plot** provides the importance by means of correlation\nHere, important thing to mark is *more negatively correlated is also a good correlation* ","db99351b":"Now, let's check the distribution of all other numerical parameters with their respective values","27fa84b0":"Hence this shows that  Cylinder number, Car name, Width, length Wheelbase, fuelsystem... etc are good paramters to look at for car price prediction which makes sense even\n\nWhere as number of doors, stroke and engine location would not be that important","17461b93":"Similarly, One more good way **Boxplot** of representation of categorial variable with respect to prediction paramter which is price in our case can be found below","2aa300a1":"**Heatmap** plot is another good way to represent the correlations\n\nBelow we're showing three different plots as below\n1. Numerical correlation with price\n2. Categorial correlation with price\n3. Major parameters correlation with price","e7a43f82":"Johnson SU is best fit"}}