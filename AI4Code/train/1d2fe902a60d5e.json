{"cell_type":{"74f58f40":"code","4fbfa525":"code","e1fa7edd":"code","c5345471":"code","d4cd8050":"code","6db1fbfe":"markdown","1760e799":"markdown","57fcc02d":"markdown","edfd80ac":"markdown","57b43720":"markdown","85fe19f4":"markdown"},"source":{"74f58f40":"import numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","4fbfa525":"def check_overlap(msk):\n    msk = msk.astype(np.bool).astype(np.uint8)\n    return np.any(np.sum(msk, axis=-1)>1)\n\ndef fix_overlap(msk):\n    \"\"\"\n    Args:\n        mask: multi-channel mask, each channel is an instance of cell, shape:(520,704,None)\n    Returns:\n        multi-channel mask with non-overlapping values, shape:(520,704,None)\n    \"\"\"\n    msk = np.array(msk)\n    msk = np.pad(msk, [[0,0],[0,0],[1,0]])\n    ins_len = msk.shape[-1]\n    msk = np.argmax(msk,axis=-1)\n    msk = tf.keras.utils.to_categorical(msk, num_classes=ins_len)\n    msk = msk[...,1:]\n    msk = msk[...,np.any(msk, axis=(0,1))]\n    return msk","e1fa7edd":"mask = np.zeros((520, 704, 5))\n\n# Before Fix\nplt.figure(figsize=(5*5, 5))\nfor idx in range(5):\n    mask[idx*50+50:(idx*50+200), idx*50+50:(idx*50+200), idx] = idx+1 # probabilistic mask isntead of binary mask\n    plt.subplot(1, 5, idx+1)\n    plt.imshow(mask[...,idx]);\n    plt.axis('OFF')\n    plt.title(f'instance: {idx}', fontsize=15)\nplt.tight_layout()\nplt.show()\n\n## After Fix\nplt.figure(figsize=(5*5, 5))\nfixed_mask = fix_overlap(mask)\nfor idx in range(5):\n    plt.subplot(1, 5, idx+1)\n    plt.imshow(fixed_mask[...,idx]);\n    plt.axis('OFF')\n    plt.title(f'instance: {idx}', fontsize=15)\nplt.tight_layout()\nplt.show()","c5345471":"plt.figure(figsize=(2*10, 10))\noverlap_mask = np.sum(mask, axis=-1)\nplt.subplot(1, 2, 1); \nplt.imshow(overlap_mask); plt.title('Overlapping Mask', fontsize=20); plt.axis('OFF')\n\nplt.subplot(1, 2, 2); \nfixed_mask = fix_overlap(mask)\nfixed_mask = np.pad(fixed_mask, [[0,0],[0,0],[1,0]]) # to plot first channel, otherwise it'll mix with background(0)\nfixed_mask = np.argmax(fixed_mask, axis=-1)[...,1:]\nplt.imshow(fixed_mask); plt.title('Fixed Mask', fontsize=20); plt.axis('OFF')\nplt.tight_layout()\nplt.savefig('remove-mask.png',dpi=600);\nplt.show();","d4cd8050":"print(f'Mask       - Overlap: {check_overlap(mask)}')\nprint(f'Fixed_Mask - Overlap: {check_overlap(fix_overlap(mask))}')","6db1fbfe":"# Install Libraries","1760e799":"# Example","57fcc02d":"# Remove Overlap\n* It will take max pixels from overlapping mask instances hence there will be less chance of pixel loss\n* You can try it with as many as possible mask instances. \n* You can also run it with **GPU** with `cupy`\n\n## Notebook\n* Train: [Sartorius: MMDetection [Train]](https:\/\/www.kaggle.com\/awsaf49\/sartorius-mmdetection-train)\n* Infer: [Sartorius: MMDetection [Infer]](https:\/\/www.kaggle.com\/awsaf49\/sartorius-mmdetection-infer) `LB: 0.265`\n\n\nPlease **do upvote** if you find this useful.","edfd80ac":"# Helper Function","57b43720":"# Fix Mask","85fe19f4":"# Check Overlap"}}