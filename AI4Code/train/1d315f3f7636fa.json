{"cell_type":{"d5711183":"code","ecf37712":"code","2f889dee":"code","26af2c5b":"code","2a54b979":"code","8d8fbfc4":"code","c51e6719":"code","9648c348":"code","8d08c716":"code","7710adbb":"code","22651820":"code","b2848e6e":"code","308005ff":"code","eb860a72":"code","4da22c89":"code","eb1517fd":"code","8eb0bae1":"code","57f8083a":"code","5d69d5fb":"code","edad70d0":"code","66039faf":"code","dfe56d34":"code","c4bfcc49":"code","2912177d":"code","e495529f":"code","12855bf4":"code","edbfb187":"code","3ce75c53":"code","8c9cb1fa":"code","a1bdaf64":"code","6892c8a6":"code","ce9b40fe":"code","2263c7ab":"code","35658a7d":"code","f87a772f":"code","efe87d33":"code","f931079b":"code","4141aecc":"code","c3ce8f6e":"code","ae322eb5":"code","b32f7ebd":"code","05337c8b":"code","49b945e6":"code","a7403469":"code","ac03a0b5":"code","3509b4d7":"code","f6e2573a":"code","82345281":"code","377f5d3d":"code","98724166":"code","6b166158":"code","0c1c9718":"code","8325afeb":"code","c66abb72":"code","2e8d79f4":"code","eff9142d":"code","99b6a75d":"code","2aa48199":"code","b034538f":"code","afa72e2f":"code","78d3e9b5":"code","27b72bb9":"code","3f1e5302":"code","c0396956":"code","85e719b9":"code","24f69351":"code","436f716d":"code","ab386fd0":"code","a6dd190a":"code","0db9a9ae":"code","fbc1b040":"code","82eb3321":"code","6451a22e":"code","8738d953":"code","9f3e19de":"code","01f26f1c":"code","02c1da36":"code","345a1154":"code","cd341fad":"code","311f23d3":"code","9296d7e9":"code","fe0a14d3":"code","9c218996":"code","f91f458d":"code","891a1396":"code","36632b22":"code","58cf7fff":"code","08c9af39":"code","ac38cc24":"code","bbab8474":"code","cf248dad":"code","e02b3bb7":"code","65be8031":"markdown","e915c6c4":"markdown","d20bf1ad":"markdown"},"source":{"d5711183":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ecf37712":"data=pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","2f889dee":"data.info()","26af2c5b":"data.head(30)","2a54b979":"data.columns","8d8fbfc4":"data.corr() #gives the relationship between numerical data","c51e6719":"f,ax=plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(),annot=True,linewidths=.5,fmt='.1f',ax=ax)\nplt.show  # a kind of relation map, which shows the most related data in light colors ","9648c348":"#Annual Income and Age plot of customers\ndata.Age.plot(kind = 'line', color = 'r',label = 'Age',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata['Annual Income (k$)'].plot(kind = 'line', color = 'g',label = 'Annual Income',linewidth=1,alpha = 0.5,grid = True,linestyle = '-')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.title('Line Plot')            # title of the plot\nplt.show()","8d08c716":"data['Annual Income (k$)'].plot(kind = 'hist',bins = 50 ,figsize = (11,11))\nplt.show()  #histagram diagram of Annual Income of customers","7710adbb":"data.head(10)","22651820":"dict1=data.iloc[1:3,1:3] #selecting from 1 to 3rd rows and columns 1 to 2\ndictionary = dict1.to_dict(\"list\")\nprint(dictionary)  #  creating dictionary from dict1","b2848e6e":"series = data['Age']>20       # creating series from Age column\nprint(type(series))\nprint(series)\n\n","308005ff":"x=data[np.logical_and(data['Age']>35, data['Annual Income (k$)']>100)]\nprint(x)  #filtering the customers elder than 35 and annaul income bigger then 100K$","eb860a72":"lis=data['Age'].tolist()\nprint(type(lis))\nprint(lis)       #creating list ","4da22c89":"count=0   #sum the values in list\nfor i in lis:\n    count=count+i\nprint(count)","eb1517fd":"max_value = 1\nfor i in lis:\n    if i > max_value: \n        max_value = i   \nprint(max_value)","8eb0bae1":"#Tupple examples: tupples are very similar to lists, the only difference is tupples cannot be changed or updated\ndataset=data[\"Age\"].iloc[0:5]\ndef tuple1(x): \n    return [tuple(x) for x in dataset.to_numpy()]\ntuple1()  #####bak\u0131lacakkkk","57f8083a":"#Scope: global value\nx=5                # x is define globallay\ndef f():           #No local value is identified\n    y = (x**2)-(x)       \n    return y*3\nprint(f())         #result will be calculated by the global value of x\n\ndef g(): \n    x=3            #x is locally identified\n    y=x**2\n    return y\nprint(g())  ","5d69d5fb":"#Nested Function\ndataset=data[\"Age\"].iloc[0:5].tolist()  \ndef multiply():\n    \"\"\" return multiply of value \"\"\"\n    def add():\n        b=sum(dataset)  #sum of the values in dataset\n        return b\n    return add()*2\nprint(multiply())\nprint(dataset)","edad70d0":"#Default Arguments:\ndataset=data[\"Age\"].iloc[0:5].tolist()\ndef f(a,b=5,c=4,d=1):        #default values are: b,c,d\n    y=(a*b)+c-d\n    return y\nprint(f(dataset[0]))         #assigning the 0th index of dataset to 'a'","66039faf":"#Flexible Arguments\ndataset=data[\"Age\"].iloc[0:5].tolist()\ndef f(*args):\n    for i in args:\n        print(i)\nprint(f(dataset))   #print the values in the list dataset \n\n\n\n","dfe56d34":"def f(**kwargs):  #kwargs used for dictionaries\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               \n        print(key, \" \", value)\nprint(f(Gender= ['Male', 'Female'], Age= [21, 20]))","c4bfcc49":"# Lambda function\na=data[\"Age\"].iloc[0:5].tolist()\nsquare = lambda x: x**2\nb= [square(i) for i in a]\n\nprint(b)\n","2912177d":"# Map Funtion\na=data[\"Age\"].iloc[0:5].tolist()\nb= map(lambda x: x**2,a) #map function works as iterator in a list\n\nprint(list(b))  ","e495529f":"a=data[\"Age\"].iloc[0:5].tolist()\nb=data[\"Age\"].iloc[5:10].tolist()\nprint('a:',a)\nprint('b:',b)\nz=list(zip(a,b))  #zip used to join the lists\nprint('a+b=z:',z)    ","12855bf4":"unzip=zip(*z)\na,b=list(unzip)\nprint(a)\nprint(b)","edbfb187":"data.info() #gives general info about the dataframe\ndata.tail() #brings the last 5 row\ndata.head() #bring the first 5 rows","3ce75c53":"data.shape # gives the #of columns and rows\n","8c9cb1fa":"print(data['Gender'].value_counts(dropna =False)) #gives the # of the categories in Gender column including the non-values","a1bdaf64":"data.describe()","6892c8a6":"data.columns","ce9b40fe":"data.boxplot(column='Annual Income (k$)',by = 'Gender') # drawa boxplot for annual income according to gender","2263c7ab":"subdata=data.head(10) #takes the first 10 row of the data\nprint(subdata)","35658a7d":"meltsubdata=pd.melt(frame=subdata,id_vars = 'CustomerID', value_vars= ['Age','Gender'])\nmeltsubdata","f87a772f":"meltsubdata.pivot(index = 'CustomerID', columns = 'variable',values='value')","efe87d33":"#create 2 different dataframe and then we will concatenate them vertically\ndata1 = data.head(10)\ndata2= data.tail(10)\nconcatdata = pd.concat([data1,data2],axis =0,ignore_index =True) \nprint(concatdata) ","f931079b":"#we will take 2 different columns from data and then concatenate them horizontally \ndata1 = data['Gender'].head(10)  \ndata2 = data['Age'].head(10)\nconcatdata2 = pd.concat([data1,data2],axis =1) \nconcatdata2","4141aecc":"data.dtypes  #gives us the columns by their type","c3ce8f6e":"# lets convert object(str) to categorical and int to float.\ndata['Gender'] = data['Gender'].astype('category')\ndata['Annual Income (k$)'] = data['Annual Income (k$)'].astype('float')","ae322eb5":"data.dtypes","b32f7ebd":"#what do we do with missing data, first lets check the data\ndata.info()","05337c8b":"#In out data there is no missing value but if we had,\n#we would fill it with fillna() or drop them or fill the with the mean","49b945e6":"#the can count the non values\ndata['Gender'].value_counts(dropna =False) #counts the different values\n","a7403469":"data[\"Gender\"].isnull().sum().sum() #counts only non values","ac03a0b5":"#here you count the different values of Age column\ndata['Age'].nunique() \n#gives us 51 different values\n","3509b4d7":"#assert check the statement you write and gives true\/false\nassert  data['Gender'].notnull().all() #returns nothing because we dont have any nan values","f6e2573a":"data.head()","82345281":"# we will create a dataframe from dictionary according to our data\ncountry = \"Turkey\"\ncity = [\"Istanbul\",\"Kocaeli\",\"Adapazar\u0131\",\"Bursa\",\"\u00c7anakkale\"]\nlist_label = [\"country\",\"city\"]\nlist_column = [country,city]\nziplist = list(zip(list_label,list_column))\ndictionary = dict(ziplist)\ndataf = pd.DataFrame(dictionary)\ndataf","377f5d3d":"dataf[\"Age Group\"]=['young','young','young','young','young'] #creating a new data\ndataf\n#dataf[\"Age Group\"]=\"young\" #better way of giving the same values to the entire column","98724166":"\ndata.columns","6b166158":"# Plotting first 100 data \ndatag = data.loc[0:100,[\"Annual Income (k$)\",\"Spending Score (1-100)\"]]\ndatag.plot()\n","0c1c9718":"datag.plot(subplots=True)#you can see the 2 columns in separate graphs\nplt.show()  ","8325afeb":"# scatter plot  \ndatag.plot(kind = \"scatter\",x=\"Annual Income (k$)\",y = \"Spending Score (1-100)\")\nplt.show()\n","c66abb72":"fig,axes=plt.subplots(nrows=2,ncols=2) #we will place the graps,2 rows, 2 columns\n\ndatag.plot(kind = \"hist\",y = \"Annual Income (k$)\",bins = 50,range= (0,80),ax=axes[0,0])\n\ndatag.plot(kind = \"hist\",y = \"Annual Income (k$)\",bins = 50,range= (0,80),ax=axes[0,1],cumulative = True)\n\ndatag.plot(kind = \"hist\",y = \"Spending Score (1-100)\",bins = 50,range= (0,100),ax=axes[1,0])\n\ndatag.plot(kind = \"hist\",y = \"Spending Score (1-100)\",bins = 50,range= (0,100),ax=axes[1,1],cumulative = True)\n\nplt.savefig('graph.png')\nplt.show","2e8d79f4":"time_list = [\"2020-01-01\",\"2020-01-15\",\"2020-04-01\",\"2020-02-15\",\"2020-06-01\"] #we crate a list of date\ndatetime_object=pd.to_datetime(time_list) #convert teh string to dates\ndata1=data.head() #we create a new dateframe from first 5 rows\ndata1[\"Date\"]=datetime_object #add the dates to the new dataframe\ndata1=data1.set_index(\"Date\")\ndata1","eff9142d":"print(data1.loc['2020-01-01']) #filtering according to date\nprint(data1.loc['2020-01-01':'2020-02-15'])","99b6a75d":"data1.resample(\"A\").mean() #we calculate the mean of the data by year\n","2aa48199":"data1.resample(\"M\").mean()","b034538f":"data1.resample(\"M\").first().interpolate(\"linear\") #we fill the missing months","afa72e2f":"data.columns","78d3e9b5":"data=pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndata=data.set_index('CustomerID') # we set the customerid as a index\ndata.head()","27b72bb9":"data['Gender'][3] #will give us the Gender column 3rd row","3f1e5302":"data.Gender[3] #gives the same as previous","c0396956":"data.info()","85e719b9":"data.loc[1:5,[\"Gender\"]] #give us first 5 row of the Gender column","24f69351":"data[[\"Gender\",\"Age\",\"Annual Income (k$)\"]] #calling the columns","436f716d":"print(data[[\"Age\"]])  #dataframe:two dimension, dataframe has a column name\/header","ab386fd0":"print(data[\"Age\"]) #series :one dimension,dont have any column name","a6dd190a":"data.loc[1:15,\"Gender\":\"Annual Income (k$)\"] #gives rows 1 t0 15 of columns from Gender to Annual Income ","0db9a9ae":"data.loc[15:1:-1,\"Gender\":\"Annual Income (k$)\"]  #same as previous but reverse","fbc1b040":"# From something to end ,first 10 rows\ndata.loc[1:10,\"Gender\":]","82eb3321":"#Filtereing Data\nboolean = data.Age >67\ndata[boolean]","6451a22e":"#For 2 or more conditions\nfilter1= data.Age >67\nfilter2= data.Gender =='Male'\nfilter3=data['Annual Income (k$)']>45\ndata[filter1&filter2&filter3]","8738d953":"#Filtering data column according to another condition\ndata.Age[data.Gender=='Female']","9f3e19de":"data['Annual Income (k$)'].loc[data.Age>68]","01f26f1c":"def multply(m):  #we define a fuction\n    return m*1000\ndata['Annual Income (k$)'].apply(multply) #we apply the function to column Annual Income\n","02c1da36":"data['Annual Income (k$)'].apply(lambda n : n*1000)","345a1154":"# Defining column using other columns\ndata[\"Unitscore\"] = data['Spending Score (1-100)'] \/data['Annual Income (k$)']\ndata.head()","cd341fad":"print(data.index.name) #finding the index column","311f23d3":"data3=data.copy()\ndata3.index=range(100,300,1) #index will:100 to 300, increasing 1 by 1\ndata3.head()","9296d7e9":"# hierarchical indexing\ndataX=data.set_index([\"Gender\",\"Age\"])\ndataX.head()\n\n","fe0a14d3":"#dictionary\ndata.head()","9c218996":"predict=data.iloc[0:5,0:4]        #we create a dictionary from data\ndictionary=predict.to_dict(\"list\")\ndf=pd.DataFrame(dictionary)\ndf","f91f458d":"#pivoting the dataframe\ndf.pivot(index=\"Gender\",columns =\"CustomerID\",values=\"Annual Income (k$)\")","891a1396":"# multi indexing\ndf1=df.set_index([\"Gender\",\"CustomerID\"])\ndf1","36632b22":"df1.unstack(level=0)  #level=0 will unstack the Gender index","58cf7fff":"df1.unstack(level=1) #level=0 will unstack the CustomerID index","08c9af39":"#reverse of pivot\n#df.pivot(index=\"Gender\",columns =\"CustomerID\",values=\"Annual Income (k$)\")\npd.melt(df,id_vars=\"Gender\",value_vars=[\"CustomerID\",\"Annual Income (k$)\"])","ac38cc24":"df","bbab8474":"df.groupby(\"Gender\").mean() #we gruop by gender and take the mean of numeric columns","cf248dad":"#another example of group by this time will take the max\ndf.groupby(\"Gender\").max()","e02b3bb7":"#group by gender and min of age and annual income columns\ndf.groupby(\"Gender\")[[\"Age\",\"Annual Income (k$)\"]].min()","65be8031":"## 2.PYTHON DATA SCIENCE TOOLBOX","e915c6c4":"# 3.CLEANING DATA","d20bf1ad":"#4.BUILDING DATA FRAMES FROM SCRATCH"}}