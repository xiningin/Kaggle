{"cell_type":{"7940e7a6":"code","7057ad9a":"code","ba2ff4a3":"code","b27582a1":"code","208e6997":"code","c1a8183f":"code","565f01db":"code","2ac72991":"code","bad26312":"code","2155fa9f":"code","2c60b7e3":"code","c2ab2ae3":"code","1562adba":"code","9606c9f5":"code","80df7d23":"code","d6cf666f":"code","09baab9f":"code","ebbe571d":"code","d3e0fc3f":"code","fcf19bfc":"code","a7a5e339":"code","62d8f3f3":"code","e93049f9":"code","a3fdfecc":"code","ef095d9a":"code","fa5ce183":"code","7cf05092":"code","5fc2a6b8":"code","81a54b0a":"code","72103f19":"code","f588f376":"code","c18cb9d1":"code","9ab9b5c2":"code","3c91248e":"code","d7ea7195":"markdown","4c53a8be":"markdown","789325e4":"markdown","9e91ce20":"markdown","e9fe8155":"markdown","42b4268a":"markdown","2e75d05f":"markdown","3c4e8175":"markdown","d21a73d0":"markdown","c809738a":"markdown","a1dd0c33":"markdown","55c04e6c":"markdown","1a816d9e":"markdown","14555475":"markdown","db4b9171":"markdown","386152ad":"markdown","45d115cc":"markdown","1a3e1782":"markdown","8ebd1b35":"markdown"},"source":{"7940e7a6":"import math\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport pandas_datareader as pdr\nfrom sklearn.preprocessing import MinMaxScaler\n\n# for stacked LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\n\n# for performance metrics\nfrom sklearn.metrics import mean_squared_error\ntf.__version__","7057ad9a":"key = 'get_your_api_key_from_tiingo'","ba2ff4a3":"df = pdr.get_data_tiingo('AAPL', api_key = key)\ndf.to_csv('AAPL.csv')","b27582a1":"df = pd.read_csv('AAPL.csv')","208e6997":"df.tail()","c1a8183f":"df1 = df.reset_index()['close']\ndf1.shape","565f01db":"plt.plot(df1)","2ac72991":"scaler = MinMaxScaler(feature_range=(0,1))\ndf1 = scaler.fit_transform(np.array(df1).reshape(-1,1))","bad26312":"df1.shape","2155fa9f":"print(df1) # all value between 0 and 1","2c60b7e3":"# Spliting dataset into train and test split\ntraining_size = int(len(df1)*0.65)\ntest_size = len(df1) - training_size\ntrain_data, test_data = df1[0:training_size, :], df1[training_size: len(df1), :1]","c2ab2ae3":"train_data.shape, test_data.shape","1562adba":"#convert and array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    dataX, dataY=[],[]\n    for i in range(len(dataset)-time_step-1):\n        a = dataset[i:(i+time_step), 0]\n        dataX.append(a)\n        dataY.append(dataset[i+time_step, 0])\n    return np.array(dataX), np.array(dataY)","9606c9f5":"# reshape into X = t, t+1, t+2, t+3 and Y=t+4\ntime_steps = 100\nX_train, y_train = create_dataset(train_data, time_steps)\nX_test, y_test = create_dataset(test_data, time_steps)","80df7d23":"train_data.shape, X_train.shape, y_train.shape","d6cf666f":"test_data.shape, X_test.shape, y_test.shape","09baab9f":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)","ebbe571d":"X_train.shape, X_test.shape","d3e0fc3f":"model = Sequential()\nmodel.add(LSTM(50, return_sequences=True, input_shape=(100,1)))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')","fcf19bfc":"model.summary()","a7a5e339":"model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=64, verbose=1)","62d8f3f3":"# let's do the prediction and check performance metrics\ntrain_predict = model.predict(X_train)\ntest_predict = model.predict(X_test)","e93049f9":"# transform back to original form\ntrain_predict = scaler.inverse_transform(train_predict)\ntest_predict = scaler.inverse_transform(test_predict)","a3fdfecc":"# calculate RMSE performacne metrics\nmath.sqrt(mean_squared_error(y_train, train_predict))","ef095d9a":"# test data RMSE\nmath.sqrt(mean_squared_error(y_test, test_predict))","fa5ce183":"# shift train predictions for plotting\nlook_back = 100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:,:] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:,:] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","7cf05092":"len(test_data)","5fc2a6b8":"x_input = test_data[340:].reshape(1, -1)\nx_input.shape","81a54b0a":"# converted x_input from numpy array to list object\ntemp_input = list(x_input)\ntemp_input = temp_input[0].tolist()","72103f19":"# demonstrate prediction for next 30 days\nlst_output = []\nn_steps = 100\ni = 0\nwhile(i<30):\n    \n    if(len(temp_input) > 100):\n        x_input = np.array(temp_input[1:])\n        print(\"\\n{} day input:\\n{}\".format(i+1, x_input))\n        x_input = x_input.reshape(1, -1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        yhat = model.predict(x_input, verbose=0)\n        print(\"\\n{} day output: {}\".format(i+1, yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input = temp_input[1:]\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1,n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(\"\\nyhat[0]: \", yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(\"\\nlen(temp_input): \", len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n\nprint(\"\\nOutput for 30 days: \\n\", lst_output)","f588f376":"day_new = np.arange(1, 101)\nday_pred = np.arange(101, 131)","c18cb9d1":"len(df1)","9ab9b5c2":"plt.plot(day_new, scaler.inverse_transform(df1[1157:])) #took data from 1157 since length df1 is 1257\nplt.plot(day_pred, scaler.inverse_transform(lst_output))","3c91248e":"df3 = df1.tolist()\ndf3.extend(lst_output)\nplt.plot(scaler.inverse_transform(df3[1000:]))","d7ea7195":"1. We will get latest data for apple stock from tiingo website\n2. But we need **API key** to fetch data.\n3. So, signup to https:\/\/www.tiingo.com\/ \n4. Go to API and generate API Key for yourself.\n\n**NOTE**: Daily api call limit is 50 for tiingo","4c53a8be":"# Stock Prediction And Forecasting Using Stacked LSTM","789325e4":"LSTM are sensitive to the scale of the data. so applying MinMax scaler will be nice option.","9e91ce20":"# 1. Data Collection - AAPL","e9fe8155":"we going to take last 100 days close price data to predict next day value","42b4268a":"**NOTE:**\nIn case of **timeseries** data,\nnormal techinque for train and test split are not going to work well here like (cross validation, random seeds)\ndata split need to happen based on date. Cause, next data alway depends on previous data","2e75d05f":"**Step we going to perform**\n1. We will collect the stock data - AAPL (Apple stock)\n2. Preprocess the data - Train and Test\n3. Create stacked LSTM model\n4. Predict the test data and plot the output\n5. Predict the future 30 days and plot the output","3c4e8175":"- **Blue line**  : actual data\n- **Orange line**: prediction on train data\n- **Green line** : prediction on test data","d21a73d0":"Now we going to plot the data","c809738a":"# 4. Predict the test data and plot the output","a1dd0c33":"- **Blue line**   : Recent 100 days close price value\n- **Orange line** : Next 30 days close price prediction","55c04e6c":"# Thank You !!!\n[`Saurabh Zinjad`](https:\/\/www.kaggle.com\/ztrimus)","1a816d9e":"## 4.1 Predict the test data","14555475":"## 4.2 Plot the output","db4b9171":"# 3. Create Stacked LSTM Model","386152ad":"# 2. Preprocessing the data - Train and Test","45d115cc":"Now we going to create inputs and outputs for our dataset.\nlet assume our timeseries data - close prices on which we going to work\n\n120, 122, 120, 125, 127, 123, 135, 137, 138, 139, 143, 145, 142, 147\n\nafter train-test split <br>\ntrain: 120, 122, 120, 125, 127, 123, 135, 137, 138<br>\ntest:  139, 143, 145, 142, 147<br>\n\nlet consider of timesteps = 3 <br>\nmeans, we going to consider 3 input close price data to predict next value\n\n - x-train: f1, f2, f3\n - y-train: o\/p\n\n| f1 |  f2 |  f3 | o\/p |\n|----|-----|-----|-----|\n|120 | 122 | 120 | 125 |\n|122 | 120 | 125 | 127 |\n|120 | 125 | 127 | 123 |\n\n","1a3e1782":"# 5. Predict the future 30 days and plot the output","8ebd1b35":"We are going to consider close column for our predictions"}}