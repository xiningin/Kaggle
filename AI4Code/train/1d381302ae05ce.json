{"cell_type":{"24d3faea":"code","9e1d8fd2":"code","608e3cde":"code","c26d9edf":"code","41b828bf":"code","961e67f0":"code","bf95db6f":"code","298a2402":"code","f55015ad":"code","c1a428e8":"code","4a3632ac":"code","b8620433":"code","c13bd03a":"code","6388cf18":"code","080fadc9":"code","a74ec219":"markdown","808dbee8":"markdown","66096c68":"markdown"},"source":{"24d3faea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd \nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport math\n\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9e1d8fd2":"import pandas as pd\n\ndata = pd.read_csv('\/kaggle\/input\/forest-fires-in-brazil\/amazon.csv'\n                     , encoding='latin1')\n\n","608e3cde":"data.head()","c26d9edf":"print(\"year : \", data['year'].unique())","41b828bf":"print(\"state : \", data['state'].unique())","961e67f0":"print(\"month : \", data['month'].unique())","bf95db6f":"#creating a dictionary with translations of months\nmonth_map={'Janeiro': 'January', 'Fevereiro': 'February', 'Mar\u00e7o': 'March', 'Abril': 'April', 'Maio': 'May',\n          'Junho': 'June', 'Julho': 'July', 'Agosto': 'August', 'Setembro': 'September', 'Outubro': 'October',\n          'Novembro': 'November', 'Dezembro': 'December'}\n#mapping our translated months\ndata['month']=data['month'].map(month_map)\n#checking the month column for the second time after the changes were made\ndata.month.unique()","298a2402":"data.head()","f55015ad":"# Define the dataset and the columns\ndataset = data\nx_column = 'month'\ny_column = 'number'\nbubble_column = 'state'\ntime_column = 'year'","c1a428e8":"# Get the years in the dataset\nyears = dataset[time_column].unique()\n\n# Make the grid\ngrid = pd.DataFrame()\ncol_name_template = '{year}+{header}_grid'\nfor year in years:\n    dataset_by_year = dataset[(dataset['year'] == int(year))]\n    for col_name in [x_column, y_column, bubble_column]:\n        # Each column name is unique\n        temp = col_name_template.format(\n            year=year, header=col_name\n        )\n        if dataset_by_year[col_name].size != 0:\n            grid = grid.append({'value': list(dataset_by_year[col_name]), 'key': temp}, \n                               ignore_index=True)\n\ngrid.sample(10)","4a3632ac":"\n# Define figure\nfigure = {\n    'data': [],\n    'layout': {},\n    'frames': []\n}\n\n# Get the earliest year\nyear = min(years)\n\n# Make the trace\ntrace = {\n    'x': grid.loc[grid['key']==col_name_template.format(\n        year=year, header=x_column\n    ), 'value'].values[0], \n    'y': grid.loc[grid['key']==col_name_template.format(\n        year=year, header=y_column\n    ), 'value'].values[0],\n    'mode': 'markers',\n    'text': grid.loc[grid['key']==col_name_template.format(\n        year=year, header=bubble_column\n    ), 'value'].values[0]\n}\n# Append the trace to the figure\nfigure['data'].append(trace)\n\n# Plot the figure\niplot(figure, config={'scrollzoom': True})","b8620433":"\n\n# Modify the layout\nfigure['layout']['xaxis'] = {'title': 'Month'}   \nfigure['layout']['yaxis'] = {'title': 'Fires in numbers'} \nfigure['layout']['title'] = 'Forest Fires in Brazil(1998-2018)'\nfigure['layout']['showlegend'] = False\nfigure['layout']['hovermode'] = 'closest'\niplot(figure, config={'scrollzoom': True})","c13bd03a":"#Adding animated time frames\n\n#Next we add frames for each year resulting in an animated graph, though not interactive yet.\n\nfor year in years:\n    # Make a frame for each year\n    frame = {'data': [], 'name': str(year)}\n    \n    # Make a trace for each frame\n    trace = {\n        'x': grid.loc[grid['key']==col_name_template.format(\n            year=year, header=x_column\n        ), 'value'].values[0],\n        'y': grid.loc[grid['key']==col_name_template.format(\n            year=year, header=y_column\n        ), 'value'].values[0],\n        'mode': 'markers',\n        'text': grid.loc[grid['key']==col_name_template.format(\n            year=year, header=bubble_column\n        ), 'value'].values[0],\n        'type': 'scatter'\n    }\n    # Add trace to the frame\n    frame['data'].append(trace)\n    # Add frame to the figure\n    figure['frames'].append(frame) \n\niplot(figure, config={'scrollzoom': True})\n\n#The animation happened only once, right after executing the code. To be able to make it interactive, we add a slider bar for the time.","6388cf18":"#Adding Play and Pause Button\nfigure['layout']['updatemenus'] = [\n    {\n        'buttons': [\n            {\n                'args': [None, {'frame': {'duration': 500, 'redraw': False},\n                         'fromcurrent': True, 'transition': {'duration': 300, \n                                                             'easing': 'quadratic-in-out'}}],\n                'label': 'Play',\n                'method': 'animate'\n            },\n            {\n                'args': [[None], {'frame': {'duration':0, 'redraw': False}, 'mode': 'immediate',\n                'transition': {'duration': 0}}],\n                'label': 'Pause',\n                'method': 'animate'\n            }\n        ],\n        'direction': 'left',\n        'pad': {'r': 10, 't': 87},\n        'showactive': False,\n        'type': 'buttons',\n        'x': 0.1,\n        'xanchor': 'right',\n        'y': 0,\n        'yanchor': 'top'\n    }\n]\niplot(figure, config={'scrollzoom': True})","080fadc9":"import plotly.graph_objects as go\n\ndataset = data\n\nyears =  [\"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\",\n \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"]\n\n# make list of states\nstates = []\nfor state in dataset[\"state\"]:\n    if state not in states:\n        states.append(state)\n# make figure\nfig_dict = {\n    \"data\": [],\n    \"layout\": {},\n    \"frames\": []\n}\n\n# fill in most of layout\nfig_dict[\"layout\"][\"xaxis\"] = {\"title\": \"Month\"}\nfig_dict[\"layout\"][\"yaxis\"] = {\"title\": \"Fires in Numbers\"}\nfig_dict[\"layout\"][\"hovermode\"] = \"closest\"\nfig_dict[\"layout\"][\"sliders\"] = {\n    \"args\": [\n        \"transition\", {\n            \"duration\": 400,\n            \"easing\": \"cubic-in-out\"\n        }\n    ],\n    \"initialValue\": \"1998\",\n    \"plotlycommand\": \"animate\",\n    \"values\": years,\n    \"visible\": True\n}\nfig_dict[\"layout\"][\"updatemenus\"] = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 500, \"redraw\": False},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 300,\n                                                                    \"easing\": \"quadratic-in-out\"}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": False,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }\n]\n\nsliders_dict = {\n    \"active\": 0,\n    \"yanchor\": \"top\",\n    \"xanchor\": \"left\",\n    \"currentvalue\": {\n        \"font\": {\"size\": 20},\n        \"prefix\": \"Year:\",\n        \"visible\": True,\n        \"xanchor\": \"right\"\n    },\n    \"transition\": {\"duration\": 300, \"easing\": \"cubic-in-out\"},\n    \"pad\": {\"b\": 10, \"t\": 50},\n    \"len\": 0.9,\n    \"x\": 0.1,\n    \"y\": 0,\n    \"steps\": []\n}\n\n# make data\nyear = 1998\nfor state in states:\n    dataset_by_year = dataset[dataset[\"year\"] == year]\n    dataset_by_year_and_cont = dataset_by_year[\n        dataset_by_year[\"state\"] == state]\n\n    data_dict = {\n        \"x\": list(dataset_by_year_and_cont[\"month\"]),\n        \"y\": list(dataset_by_year_and_cont[\"number\"]),\n        \"mode\": \"markers\",\n        \"text\": list(dataset_by_year_and_cont[\"state\"]),\n        \"marker\": {\n            \"sizemode\": \"area\",\n            \"sizeref\": 2,\n            \"size\": list(dataset_by_year_and_cont[\"number\"]\n            )\n        },\n        \"name\": state\n    }\n    fig_dict[\"data\"].append(data_dict)\n\n# make frames\nfor year in years:\n    frame = {\"data\": [], \"name\": str(year)}\n    for state in states:\n        dataset_by_year = dataset[dataset[\"year\"] == int(year)]\n        dataset_by_year_and_cont = dataset_by_year[\n            dataset_by_year[\"state\"] == state]\n\n        data_dict = {\n            \"x\": list(dataset_by_year_and_cont[\"month\"]),\n            \"y\": list(dataset_by_year_and_cont[\"number\"]),\n            \"mode\": \"markers\",\n            \"text\": list(dataset_by_year_and_cont[\"state\"]),\n            \"marker\": {\n                \"sizemode\": \"area\",\n                \"sizeref\": 2,\n            \"size\": list(dataset_by_year_and_cont[\"number\"]\n                )\n            },\n            \"name\": state\n        }\n        frame[\"data\"].append(data_dict)\n\n    fig_dict[\"frames\"].append(frame)\n    slider_step = {\"args\": [\n        [year],\n        {\"frame\": {\"duration\": 300, \"redraw\": False},\n         \"mode\": \"immediate\",\n         \"transition\": {\"duration\": 400}}\n    ],\n        \"label\": year,\n        \"method\": \"animate\"}\n    sliders_dict[\"steps\"].append(slider_step)\n\n\nfig_dict[\"layout\"][\"sliders\"] = [sliders_dict]\n\nfig = go.Figure(fig_dict)\n\nfig.show()\n\n","a74ec219":"Now,checking our data","808dbee8":"Converting Brazil's Month name to standard Month Name","66096c68":"Adding a Slider Bar for Years and icluding the different states with colors"}}