{"cell_type":{"76637096":"code","dc93c181":"code","e1b3a9c1":"code","7861e769":"code","61c48616":"code","2b305f73":"code","4f24dfe6":"code","179ad976":"code","a39a72ec":"code","44b7f87c":"code","5d103678":"code","e16adcc6":"code","4587f9f6":"code","5583e7fb":"code","f0a3b78c":"code","23290de1":"code","2e674a5a":"code","2bddf945":"code","96acf273":"code","e9917fe3":"code","30d5dcf6":"code","8ce45847":"code","a9fcab9f":"code","c1c90c80":"markdown","5a9d6a0b":"markdown","be822ebb":"markdown","cd214e0b":"markdown","e9615573":"markdown","cba4bb6d":"markdown","4bdb40bb":"markdown","6c1a1774":"markdown","6bc39d35":"markdown","7a5dc25a":"markdown","c1ec0c39":"markdown"},"source":{"76637096":"# Tuple\nt1 = 12, 23, 34, 45, 21, 89\nprint (t1)","dc93c181":"t2 = (12, 23, 34, 45, 21, 89)\nprint(t2)","e1b3a9c1":"# List\nl1 = [12, 23, 34, 45, 21, 89]\nprint(l1)","7861e769":"l1[:]","61c48616":"len(l1)","2b305f73":"type(l1)","4f24dfe6":"# Applying conditions on list\/tuple\nl1 = [12, 13, 134, 43, 65, 76, 34, 87, 98, 65, 42, 94, 50]","179ad976":"for x in range(0, len(l1)):\n    if l1[x] > 50:\n        print (l1[x])","a39a72ec":"print(l1)\nprint(t1)","44b7f87c":"l1[2] = 99\nprint(l1)\n# value of third position changed to 99","5d103678":"t1[2] = 99","e16adcc6":"# Functions of Tuple and list can be found using below\n# print (dir(t1))\n# print (dir(l1))","4587f9f6":"print(dir(l1))","5583e7fb":"# Dictionary (Associated with ('key' and 'values'))\ndict = {\"Empid\": \"1234\", \"EName\": \"Pavan\", \"Salary\": 60000, \"Email\": \"pavan@123.com\"}\ndict","f0a3b78c":"dict['Empid']","23290de1":"def Add(x, y):\n    return(x + y)","2e674a5a":"# Passing positional arguments - args\nAdd(2, 7) ","2bddf945":"# Passing Named arguments\/key-word arguments - kwargs\nAdd(y = 20, x = 30)","96acf273":"# We can also give default values to the arguments in function definition\ndef Add_any(x = 0, y = 0):\n    return(x, y)","e9917fe3":"# Only positional arguments accepted, no named arguments allowed\ndef MyFunc(*args):\n    print (args)","30d5dcf6":"# function for addition of n arguments\ndef MyFunc1(*args):\n    Sum = 0\n    for i in args:\n        Sum += i\n    return (Sum)","8ce45847":"MyFunc1(1,2,3)","a9fcab9f":"# only named arguments accepted, no positional arguments allowed\ndef Myfunc2(**kwargs):\n    print(kwargs)","c1c90c80":"All base data structures available in python are 1D and hetrogenous. \n\nTypes of DS available in python:\n1. Tuple\n2. List\n3. Dictionary","5a9d6a0b":"A data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.\n\nThey can be classified into two types based on the content they can have:\n\n* Homogeneous: All datapoints of same datatype\n* Hetrogenous: All datapints in the data structure are not of same data type.","be822ebb":"**Set of instructions that can perform some set task and may or may not return a value - They are reffered by a name**\n* def -> Keyword to create a UDF\n* return -> will provide the output from the function\n* Arguments -> Inputs given to a function. (Positional\/Named)\n* Function is available in currect session\n\n* Syntax:\n\ndef FunctionName():\n\nSet of operations\n\n.\n\nreturn(value)","cd214e0b":"**Argument overloading in functions:**\n* If we are not sure how many arguments we will pass to a function; we can use - args or kwargs instaed of giving argument names\n* args will convert the values passed to a function into a tuple\n* kwargs will convert values passed to a function into a dictionary (key-value pair)","e9615573":"**This notebook covers **\n* Data Structures\n* User Defined functions","cba4bb6d":"**Common used functions which are associated with list are,** \n* count: return number of occurrences of value << count(value)>>\n* index: return the index\/position of first occurance of the given value << index(value) >>\n* append: append object to end << append(value) >>\n* insert: insert object before index << index(pos, value)>>\n* extend: extend list by appending elements from the iterable << extend(iterable) >>\n* pop: remove and return item at index (default last) << pop() >> or << pop(pos) >>\n* remove: remove first occurrence of value. << remove(value) >>\n* reverse: reverse the position of the values IN PLACE\n* sort: arrange the values in asc or desc << sort(reverse = False) >>","4bdb40bb":"# Functions (user defined)","6c1a1774":"**Difference between tuple and list**\n* Tuples are immuatable and Lists are mutable\n\n**for example,** \n* Values inside a list can be reassigned Valid: l1[2] = 99\n* values in the tuple are fixed and can't be changed Invalid: t1[2] = 99","6bc39d35":"**Rules for dictionary DS**\n* Key should be unique.\n* A key must be simple i.e. str\/int\/float\n* A value can be ANYTHING!\n* To access the values in dictionary, we can't use index or position values.\n* Get the values from dict using the keys","7a5dc25a":"**Both Tuple and List are accessed using [] brackets; where these square brackets will take one or more numbers as input**\n\n* These numbers are Indexes from range 0 till length - 1\n* colon : is used to create the range\n* We may use range function to generate the range of numbers\n* len() function gets the len of the Tuple or List\n* Type() function to get type of data structure","c1ec0c39":"# Data Structures"}}