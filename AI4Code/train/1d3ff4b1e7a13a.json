{"cell_type":{"029f8110":"code","9f5b468c":"code","ac9e0388":"code","6607e3ba":"code","4e5eb27c":"code","cd48af54":"code","63e3c017":"code","19b94268":"code","ba29013c":"code","035f14b4":"code","8d9c3ffa":"code","b8232829":"code","6fa59377":"code","17e62ab2":"code","31dcfe74":"code","76d4d56e":"code","766ac917":"code","5eafa717":"code","b2989cc5":"code","f4d5efb2":"code","288a53ae":"code","f9c2b476":"code","5cce0052":"code","37218405":"code","1064ce2e":"code","8c545026":"code","a9dc2376":"code","51de692d":"code","0dfdd890":"code","a1cec327":"code","9fe24e26":"code","b863c455":"code","0eff21d2":"code","be259a80":"code","6ab6ef75":"code","a524fe89":"code","2817dad0":"code","510c2c08":"code","7a9b64bd":"code","1a02e405":"code","4e52b598":"code","51461954":"code","f19f3f18":"code","76c5c9ff":"code","7abe4c59":"code","2bd9ac56":"code","3f6020fd":"code","5130f70e":"code","78884579":"code","33535e3d":"code","dc8ec125":"code","509e8c50":"code","f09fe6d4":"code","a1467b42":"code","8cbc6316":"code","7ea62bb1":"code","84c20564":"code","1d3b269b":"code","b460bf76":"code","28e42493":"code","e7bf3725":"code","65d2a171":"code","8f3eb8e7":"code","7f52d442":"code","3dcb59f5":"code","4c970b0c":"code","3cb543e9":"code","10ea4864":"code","99e43739":"code","76575108":"code","cc45537b":"code","b5e3a174":"code","10e61e50":"code","43fd34ad":"code","f7a1ecc5":"code","3b41f4f5":"code","6102a277":"code","f4d8b859":"code","e333d143":"code","a580abd3":"code","6ddd9e8f":"code","325b1a19":"code","a1bbfa72":"code","36015261":"code","71e158c6":"code","ae95917f":"code","c7d4d439":"code","c9475cd3":"code","66c44178":"code","69191ca5":"code","db37a3e3":"code","e5a18a7f":"code","61cef638":"code","da472a6a":"code","dded8180":"code","b75ef8bb":"code","0744a3e8":"code","98bf1c3b":"code","5ae43e65":"code","f30b40f0":"code","56eb2788":"code","d18e178c":"code","ac5bbdeb":"code","8245cb2e":"code","455a06e1":"markdown","698beddf":"markdown","3f9077bd":"markdown","dcebcfcf":"markdown","270161bd":"markdown","ff490aaa":"markdown","d48fc280":"markdown","00665ef7":"markdown","968f46a0":"markdown","8f1258f7":"markdown","640c8af3":"markdown","728eac51":"markdown","426df9f4":"markdown","8fda378e":"markdown","8c0e3813":"markdown","65d288ae":"markdown","f1936bb5":"markdown","eef5b5ea":"markdown","54e09287":"markdown","13215ce3":"markdown","d00d235c":"markdown","4874890c":"markdown","ee504196":"markdown","246a3970":"markdown","a003fab3":"markdown","046897fa":"markdown","99d67066":"markdown","b8ad7b45":"markdown","25270663":"markdown","d7f7b9f6":"markdown","b8af01d4":"markdown","acc5224f":"markdown","0f710c35":"markdown","b0d72569":"markdown","9bb0580c":"markdown","a2f2284a":"markdown","f16976b8":"markdown","0c439484":"markdown"},"source":{"029f8110":"import sys\nimport keyword\nimport operator\nfrom datetime import datetime\nimport os","9f5b468c":"# Create a class with property \"var1\"\nclass myclass:\n    var1 = 10\n    \nobj1 = myclass() # Create an object of class \"myclass()\"\nprint(obj1.var1)","ac9e0388":"# Create an employee class\nclass Employee:\n  def __init__(self, name, empid): # __init__() function is used to assign values for name and empid\n    self.name = name\n    self.empid = empid\n  def greet(self): # Class Method\n    print(\"Thanks for joining ABC Company {}!!\".format(self.name))\n\nemp1 = Employee(\"Asif\", 34163)  # Create an employee object\n\nprint('Name :- ',emp1.name)\nprint('Employee ID :- ',emp1.empid)\nemp1.greet()","6607e3ba":"emp1.name = 'Basit' # Modify Object Properties\nemp1.name","4e5eb27c":"del emp1.empid   # Delete Object Properties\nemp1.empid","cd48af54":"del emp1 # Delete the object\nemp1","63e3c017":"emp2 = Employee(\"Michael\", 34162)  # Create an employee object\n\nprint('Name :- ',emp2.name)\nprint('Employee ID :- ',emp2.empid)\nemp2.greet()","19b94268":"emp2.country = 'India' #instance variable can be created manually\nemp2.country","ba29013c":"class person:   # Parent Class\n    def __init__(self, name , age , gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def PersonInfo(self):\n        print('Name :- {}'.format(self.name))\n        print('Age :- {}'.format(self.age))\n        print('Gender :- {}'.format(self.gender))\n\n        \n        \n        \nclass student(person): # Child Class\n    def __init__(self,name,age,gender,studentid,fees):\n        person.__init__(self,name,age,gender)\n        self.studentid = studentid\n        self.fees = fees\n    \n    def StudentInfo(self):\n        print('Student ID :- {}'.format(self.studentid))\n        print('Fees :- {}'.format(self.fees))\n        \n\n        \nclass teacher(person): # Child Class\n    def __init__(self,name,age,gender,empid,salary):\n        person.__init__(self,name,age,gender)\n        self.empid = empid\n        self.salary = salary\n    \n    def TeacherInfo(self):\n        print('Employee ID :- {}'.format(self.empid))\n        print('Salary :- {}'.format(self.salary))\n\n\n        \nstud1 = student('Asif' , 24 , 'Male' , 123 , 1200)\nprint('Student Details')\nprint('---------------')\nstud1.PersonInfo()    # PersonInfo() method presnt in Parent Class will be accessible by child class\nstud1.StudentInfo()\nprint()\n\n\n\nteacher1 = teacher('Basit' , 36 , 'Male' , 456 , 80000)\nprint('Employee Details')\nprint('---------------')\nteacher1.PersonInfo()    # PersonInfo() method presnt in Parent Class will be accessible by child class\nteacher1.TeacherInfo()","035f14b4":"class person:   # Parent Class\n    def __init__(self, name , age , gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def PersonInfo(self):\n        print('Name :- {}'.format(self.name))\n        print('Age :- {}'.format(self.age))\n        print('Gender :- {}'.format(self.gender))\n\n        \n        \n        \nclass student(person): # Child Class\n    def __init__(self,name,age,gender,studentid,fees):\n        person.__init__(self,name,age,gender)\n        self.studentid = studentid\n        self.fees = fees\n    \n    def StudentInfo(self):\n        print('Student ID :- {}'.format(self.studentid))\n        print('Fees :- {}'.format(self.fees))\n        \n        \nstud1 = student('Asif' , 24 , 'Male' , 123 , 1200)\nprint('Student Details')\nprint('---------------')\nstud1.PersonInfo()    # PersonInfo() method presnt in Parent Class will be accessible by child class\nstud1.StudentInfo()\nprint()","8d9c3ffa":"# super() builtin function allows us to access methods of the base class.\n\nclass person:   # Parent Class\n    def __init__(self, name , age , gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def PersonInfo(self):\n        print('Name :- {}'.format(self.name))\n        print('Age :- {}'.format(self.age))\n        print('Gender :- {}'.format(self.gender))\n\n        \n        \n        \nclass student(person): # Child Class\n    def __init__(self,name,age,gender,studentid,fees):\n        super().__init__(name,age,gender)  \n        self.studentid = studentid\n        self.fees = fees\n    \n    def StudentInfo(self):\n        super().PersonInfo()\n        print('Student ID :- {}'.format(self.studentid))\n        print('Fees :- {}'.format(self.fees))\n        \nstud = student('Asif' , 24 , 'Male' , 123 , 1200)\nprint('Student Details')\nprint('---------------')\nstud.StudentInfo()","b8232829":"class person:   # Parent Class\n    def __init__(self, name , age , gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n    \n    def PersonInfo(self):\n        print('Name :- {}'.format(self.name))\n        print('Age :- {}'.format(self.age))\n        print('Gender :- {}'.format(self.gender))\n\n        \n        \n        \nclass employee(person): # Child Class\n    def __init__(self,name,age,gender,empid,salary):\n        person.__init__(self,name,age,gender)\n        self.empid = empid\n        self.salary = salary\n    \n    def employeeInfo(self):\n        print('Employee ID :- {}'.format(self.empid))\n        print('Salary :- {}'.format(self.salary))\n        \n        \n\n        \nclass fulltime(employee): # Grand Child Class\n    def __init__(self,name,age,gender,empid,salary,WorkExperience):\n        employee.__init__(self,name,age,gender,empid,salary)\n        self.WorkExperience = WorkExperience\n    \n    def FulltimeInfo(self):\n        print('Work Experience :- {}'.format(self.WorkExperience))\n        \n        \n        \n\nclass contractual(employee): # Grand Child Class\n    def __init__(self,name,age,gender,empid,salary,ContractExpiry):\n        employee.__init__(self,name,age,gender,empid,salary)\n        self.ContractExpiry = ContractExpiry\n    \n    def ContractInfo(self):\n        print('Contract Expiry :- {}'.format(self.ContractExpiry))\n\n        \nprint('Contractual Employee Details')\nprint('****************************')\ncontract1 = contractual('Basit' , 36 , 'Male' , 456 , 80000,'21-12-2021')\ncontract1.PersonInfo()\ncontract1.employeeInfo()\ncontract1.ContractInfo()\n\nprint('\\n \\n')\n\nprint('Fulltime Employee Details')\nprint('****************************')\nfulltim1= fulltime('Asif' , 22 , 'Male' , 567 , 70000, 12)\nfulltim1.PersonInfo()\nfulltim1.employeeInfo()\nfulltim1.FulltimeInfo()","6fa59377":"# Super Class\nclass Father:\n    def __init__(self):\n        self.fathername = str()\n\n    \n# Super Class\nclass Mother:\n    def __init__(self):\n        self.mothername = str()\n    \n    \n# Sub Class\nclass Son(Father, Mother):\n    name = str()\n    def show(self):\n        print('My Name :- ',self.name)\n        print(\"Father :\", self.fathername)\n        print(\"Mother :\", self.mothername)\n \n \ns1 = Son()\ns1.name = 'Bill'\ns1.fathername = \"John\"\ns1.mothername = \"Kristen\"\ns1.show()","17e62ab2":"class Date:\n    def __init__(self,date):\n        self.date = date    \n        \nclass Time:\n    def __init__(self,time):\n        self.time = time\n\nclass timestamp(CurrentDate,CurrentTime):\n    def __init__(self,date,time):\n        CurrentDate.__init__(self,date)\n        CurrentTime.__init__(self,time)\n        DateTime = self.date + ' ' + self.time\n        print(DateTime)\n\ndatetime1 = timestamp( '2020-08-09', '23:48:55')","31dcfe74":"class person:   # Parent Class\n    def __init__(self, name , age , gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n        \n    def greet(self):\n        print(\"Hello Person\")\n        \n        \n        \nclass student(person): # Child Class\n    def __init__(self,name,age,gender,studentid,fees):\n        person.__init__(self,name,age,gender)\n        self.studentid = studentid\n        self.fees = fees\n\n    def greet(self):\n        print(\"Hello Student\")\n        \n    \nstud = student('Gabriel' , 56 , 'Male' , 45 , 345678)\nstud.greet() # greet() method defined in subclass will be triggered as \"stud\" is an object of child class\n\nperson1 = person('Gabriel' , 56 , 'Male')\nperson1.greet() # greet() method defined in superclass will be triggered because \"person1\" is an object of parent class","76d4d56e":"list1 = ['asif' , 'john' , 'Michael' , 'Basit']\n\n'asif' in list1  # Membership check using 'in' operator","766ac917":"assert 'john' in list1  # If the condition returns true the program does nothing and move to the next line of code","5eafa717":"assert 'john1' in list1 # If the condition returns false, Assert will stop the program and throws an AssertionError.","b2989cc5":"mydict = {'Name':'Asif' , 'ID': 12345 , 'DOB': 1991 , 'Address' : 'Hilsinki'}\nmydict","f4d5efb2":"'Asif' in mydict # Dictionary membership will always check the keys","288a53ae":"'Name' in mydict # Dictionary membership will always check the keys","f9c2b476":"'DOB' in mydict","5cce0052":"mystr = 'asifbhat'\n\n'as' in mystr  # Check if substring is present","37218405":"mylist = ['Asif' , 'Basit' , 'John' , 'Michael']\nlist_iter = iter(mylist) # Create an iterator object using iter()\nprint(next(list_iter))  # return first element in the iterator stream\nprint(next(list_iter))  # return next element in the iterator stream\nprint(next(list_iter))\nprint(next(list_iter))\nprint(next(list_iter))","1064ce2e":"mylist = ['Asif' , 'Basit' , 'John' , 'Michael']\nlist_iter = iter(mylist)     # Create an iterator object using iter()\nprint(list_iter.__next__())  # return first element in the iterator stream\nprint(list_iter.__next__())  # return next element in the iterator stream\nprint(list_iter.__next__())\nprint(list_iter.__next__())","8c545026":"mylist = ['Asif' , 'Basit' , 'John' , 'Michael']\nlist_iter = iter(mylist)     # Create an iterator object using iter()\nfor i in list_iter:\n    print(i)","a9dc2376":"# Looping Through an Iterable (list) using for loop\n\nmylist = ['Asif' , 'Basit' , 'John' , 'Michael']\n\nfor i in mylist:\n    print(i)","51de692d":"# Looping Through an Iterable (tuple) using for loop\n\nmytuple = ('Asif' , 'Basit' , 'John' , 'Michael')\n\nfor i in mytuple:\n    print(i)","0dfdd890":"# Looping Through an Iterable (string) using for loop\n\nmystr = \"Hello Python\"\n\nfor i in mystr:\n    print(i)","a1cec327":"# This iterator produces all natural numbers from 1 to 10.\nclass myiter:\n     def __init__(self):\n            self.num = 0\n     \n     def __iter__(self):\n            self.num = 1\n            return self\n     \n     def __next__(self):\n        if self.num <= 10:\n            val = self.num\n            self.num += 1\n            return val\n        else:\n            raise StopIteration\n\nmynum = myiter()\niter1 = iter(mynum)\nfor i in iter1:\n    print(i)","9fe24e26":"# This iterator will produce odd numbers\nclass myiter:\n     def __init__(self):\n            self.num = 0\n     \n     def __iter__(self):\n            self.num = 1\n            return self\n     \n     def __next__(self):\n        if self.num <= 20 :\n            val = self.num\n            self.num += 2\n            return val\n        else:\n            raise StopIteration\n\nmyodd = myiter()\niter1 = iter(myodd)\nfor i in iter1:\n    print(i)","b863c455":"# This iterator will produce fibonacci numbers\n\nclass myfibonacci:\n     def __init__(self):\n            self.prev = 0\n            self.cur = 0\n     \n     def __iter__(self):\n            self.prev = 0\n            self.cur = 1\n            return self\n     \n     def __next__(self):\n        if self.cur <= 50:\n            val = self.cur\n            self.cur += self.prev\n            self.prev = val\n            return val\n        else:\n            raise StopIteration\n\nmyfibo = myfibonacci()\niter1 = iter(myfibo)\nfor i in iter1:\n    print(i)","0eff21d2":"# Simple generator function that will generate numbers from 1 to 5.\ndef mygen():\n    n = 1\n    yield n\n\n    n += 1\n    yield n\n\n    n += 1\n    yield n\n\n    n += 1\n    yield n\n    \n    n += 1\n    yield n\n    \nmygen1 = mygen()\n\nprint(next(mygen1))\nprint(next(mygen1))\nprint(next(mygen1))\nprint(next(mygen1))\nprint(next(mygen1)) #Function will terminate here as all 5 values have been returned. \nprint(next(mygen1)) # As function is already terminated, StopIteration is raised automatically.","be259a80":"# Simple generator function that will generate natural numbers from 1 to 20.\ndef mygen():\n    for i in range(1,20):\n        yield i\n\n    \nmygen1 = mygen()\n\nfor i in mygen1:\n    print(i)","6ab6ef75":"num = list(mygen()) # Store all values generated by generator function in a list\nnum","a524fe89":"# Simple generator function that will generate even numbers from 1 to 20.\ndef mygen():\n    for i in range(1,20):\n        if i%2 == 0:\n            yield i\n\n    \nmygen1 = mygen()\n\nfor i in mygen1:\n    print(i)","2817dad0":"# This Generator function will generate ten numbers of fibonacci series.\ndef myfibo():\n    num1 , num2 = 0,1\n    count = 0\n    while count < 10:\n            yield num1\n            num1,num2 = num2,num1+num2\n            count+=1\n\n            \nfibo = myfibo()\n\nfor i in fibo:\n    print(i)","510c2c08":"list1 = list(myfibo()) # Store the fibonacci series in a list\nlist1","7a9b64bd":"list2 = [i**2 for i in range(10)]  # List comprehension\nlist2","1a02e405":"gen2 = (i**2 for i in range(10)) # Generator expression\ngen2","4e52b598":"print(next(gen2))\nprint(next(gen2))\nprint(next(gen2))\nprint(next(gen2))\nprint(next(gen2))","51461954":"gen2 = (i for i in range(40) if i%2 == 0) # Generator expression to generate even numbers \ngen2\n\nfor i in gen2:\n    print(i)","f19f3f18":"def subtract(num1 , num2):\n    res = num1 - num2\n    print('Result is :- ', res)\n    \nsubtract(4,2)\nsubtract(2,4)","76c5c9ff":"''' We now want subtract() function to always subtract lower number from higher one without modifying this function.\n    So when we pass (2,4) it should perform 4-2 not 2-4. To acheive this we will create a decorator function'''\n    \n\ndef sub_decorator(func):\n    def wrapper(num1,num2):\n        if num1 < num2:\n            num1,num2 = num2,num1\n            return func(num1,num2)\n    return wrapper\n            \nsub = sub_decorator(subtract)\n\nsub(2,4)","7abe4c59":"@sub_decorator   # we can use @ syntax for decorating a function in one step\ndef subtract(num1 , num2):\n    res = num1 - num2\n    print('Result is :- ', res)\nsubtract(2,4)","2bd9ac56":"def InstallLinux():\n    print('Linux installation has started \\n')\n    \ndef InstallWindows():\n    print('Windows installation has started \\n')\n    \ndef InstallMac():\n    print('Mac installation has started \\n')\n\n    \nInstallLinux()\nInstallWindows()\nInstallMac()\n\nprint()\n\n\n''' Now suppose if we want to print message :- \"Please accept terms & conditions\" before every installation \n    then easy way will be to create one decorator function which will present this message instead of modifying all functions'''\n  \n    \n\ndef InstallDecorator(func):\n    def wrapper():\n        print('Please accept terms & conditions')\n        return func()\n    return wrapper()\n\n@InstallDecorator    # we can use @ syntax for decorating a function in one step\ndef InstallLinux():\n    print('Linux installation has started \\n')\n  \n@InstallDecorator\ndef InstallWindows():\n    print('Windows installation has started \\n ')\n \n@InstallDecorator\ndef InstallMac():\n    print('Mac installation has started \\n')","3f6020fd":"# Apply multiple decorator on a single function\n\ndef InstallDecorator1(func):\n    def wrapper():\n        print('Please accept terms & conditions...\\n')\n        func()\n    return wrapper\n\ndef InstallDecorator2(func):\n    def wrapper():\n        print('Please enter correct license key...\\n')\n        return func()\n    return wrapper\n\n\ndef InstallDecorator3(func):\n    def wrapper():\n        print('Please enter partitioning choice...\\n')\n        return func()\n    return wrapper\n\n@InstallDecorator1\n@InstallDecorator2\n@InstallDecorator3\ndef InstallLinux():\n    print('Linux installation has started \\n')\n\nInstallLinux()","5130f70e":"fileobj = open('test1.txt')  # Open file in read\/text mode","78884579":"fileobj = open('test1.txt', 'r') # Open file in read mode","33535e3d":"fileobj = open('test1.txt', 'w') # Open file in write mode","dc8ec125":"fileobj = open('test1.txt', 'a') # Open file in append mode","509e8c50":"fileobj.close()","f09fe6d4":"fileobj = open('test1.txt') ","a1467b42":"fileobj.read() #Read whole file","8cbc6316":"fileobj.read() #File cursor is already at the end of the file so it won't be able to read anything.","7ea62bb1":"fileobj.seek(0) # Bring file cursor to initial position.\nfileobj.read()  ","84c20564":"fileobj.seek(7) # place file cursor at loc 7\nfileobj.read()","1d3b269b":"fileobj.seek(0)\n\nfileobj.read(16) # Return the first 16 characters of the file","b460bf76":"fileobj.tell() # Get the file cursor position","28e42493":"fileobj.seek(0)\n\nprint(fileobj.readline()) # Read first line of a file.\n\nprint(fileobj.readline()) # Read second line of a file.\n\nprint(fileobj.readline()) # Read third line of a file.","e7bf3725":"fileobj.seek(0)\n\nfileobj.readlines() # Read all lines of a file.            ","65d2a171":"# Read first 5 lines of a file using readline()\nfileobj.seek(0)\n\ncount = 0\nfor i in range(5):\n    if (count < 5):\n        print(fileobj.readline())\n    else:\n        break\n    count+=1","8f3eb8e7":"# Read first 5 lines of a file using readlines()\nfileobj.seek(0)\n\ncount = 0\nfor i in fileobj.readlines():\n    if (count < 5):\n        print(i)\n    else:\n        break\n    count+=1","7f52d442":"fileobj = open('test1.txt', 'a')\n\nfileobj.write('THIS IS THE NEW CONTENT APPENDED IN THE FILE') # Append content to the file\n\nfileobj.close()\n\nfileobj = open('test1.txt')\n\nfileobj.read()","3dcb59f5":"fileobj = open(\"test1.txt\", \"w\")\n\nfileobj.write(\"NEW CONTENT ADDED IN THE FILE. PREVIOUS CONTENT HAS BEEN OVERWRITTEN\") # overwrite the content in the file\n\nfileobj.close()\n\nfileobj = open('test1.txt')\n\nfileobj.read()","4c970b0c":"fileobj = open(\"test2.txt\", \"w\") # Create a new file\n\nfileobj.write(\"First Line\\n\") \nfileobj.write(\"Second Line\\n\")\nfileobj.write(\"Third Line\\n\") \nfileobj.write(\"Fourth Line\\n\")\nfileobj.write(\"Fifth Line\\n\")\nfileobj.close()\n\nfileobj = open('test2.txt')\n\nfileobj.readlines()","3cb543e9":"os.remove(\"test3.txt\") # Delete file","10ea4864":"os.remove(\"test3.txt\")","99e43739":"os.rmdir('folder1\/')  # Delete folder","76575108":"os.rmdir('folder1\/')","cc45537b":"try:\n    print(100\/0) # ZeroDivisionError will be encountered here. So the control will pass to except block\n    \nexcept:\n    print(sys.exc_info()[1] , 'Exception occured') # This statement will be executed \n    \nelse:\n    print('No exception occurred') # This will be skipped as code block inside try encountered an exception\n\nfinally:\n    print('Run this block of code always') # This will be always executed \n    ","b5e3a174":"try:\n    print(x)  # NameError exception will be encountered as variable x is not defined                               \n\nexcept:\n    print('Variable x is not defined')","10e61e50":"try:\n    os.remove(\"test3.txt\") # FileNotFoundError will be encountered as \"test3.txt\" is not present in the directory\n    \nexcept:                     # Below statement will be executed as exception occured.          \n    print(\"BELOW EXCEPTION OCCURED\") \n    print(sys.exc_info()[1])\n    \nelse:\n    print('\\nNo exception occurred')\n\nfinally:\n    print('\\nRun this block of code always')","43fd34ad":"# Handling specific exceptions\ntry:\n    x = int(input('Enter first number :- '))\n    y =  int(input('Enter first number :- '))  # If input entered is non-zero the control will move to next line\n    print(x\/y)\n    os.remove(\"test3.txt\")\n\nexcept NameError:\n    print('NameError exception occurred')\n\nexcept FileNotFoundError:\n    print('FileNotFoundError exception occurred')\n    \nexcept ZeroDivisionError:\n    print('ZeroDivisionError exception occurred')  ","f7a1ecc5":"# Handling specific exceptions\ntry:\n    x = int(input('Enter first number :- '))\n    y =  int(input('Enter first number :- ')) # If the input entered is zero the control will move to except block.\n    print(x\/y)\n    os.remove(\"test3.txt\")\n\nexcept NameError:\n    print('NameError exception occurred')\n\nexcept FileNotFoundError:\n    print('FileNotFoundError exception occurred')\n    \nexcept ZeroDivisionError:\n    print('ZeroDivisionError exception occurred') ","3b41f4f5":"try:\n    x = int(input('Enter first number :- '))\n    if x > 50:\n        raise ValueError(x) # If value of x is greater than 50 ValueError exception will be encountered.\nexcept:\n    print(sys.exc_info()[0])","6102a277":"# OverflowError - This exception is raised when the result of a numeric calculation is too large\n\ntry:  \n    import math\n    print(math.exp(1000))\nexcept OverflowError:  \n        print (sys.exc_info())\nelse:  \n    print (\"Success, no error!\")","f4d8b859":"# ZeroDivisionError - This exception is raised when the second operator in a division is zero\n\ntry:\n    x = int(input('Enter first number :- '))\n    y =  int(input('Enter first number :- '))\n    print(x\/y)\n    \nexcept ZeroDivisionError:\n    print('ZeroDivisionError exception occurred')","e333d143":"# NameError - This exception is raised when a variable does not exist\n\ntry:\n    print(x1)\n\nexcept NameError:\n    print('NameError exception occurred')","a580abd3":"# AssertionError - This exception is raised when an assert statement fails\n\ntry:  \n    a = 50\n    b = \"Asif\"\n    assert a == b\nexcept AssertionError:  \n        print (\"Assertion Exception Raised.\")","6ddd9e8f":"# ModuleNotFoundError - This exception is raised when an imported module does not exist\n\ntry:\n    import MyModule\n\nexcept ModuleNotFoundError:  \n        print (\"ModuleNotFoundError Exception Raised.\")","325b1a19":"# KeyError - This exception is raised when key does not exist in a dictionary\n\ntry:\n    mydict = {1:'Asif', 2:'Basit', 3:'Michael'}\n    print (mydict[4])\n\nexcept KeyError:\n     print (\"KeyError Exception Raised.\")","a1bbfa72":"# IndexError - This exception is raised when an index of a sequence does not exist.\n\ntry:\n    mylist = [1,2,3,4,5,6]\n    print (mylist[10])\n\nexcept IndexError:\n     print (\"IndexError Exception Raised.\")","36015261":"# TypeError - This exception is raised when two different datatypes are combined\n\ntry:  \n    a = 50\n    b = \"Asif\"\n    c = a\/b\nexcept TypeError:  \n        print (\"TypeError Exception Raised.\")","71e158c6":"# AttributeError: - This exception is raised when attribute reference or assignment fails\n\ntry:  \n    a = 10\n    b = a.upper()\n    print(b)\nexcept AttributeError:  \n        print (\"AttributeError Exception Raised.\")","ae95917f":"try:\n    x = input('Enter first number :- ')\n\n    \nexcept:\n    print('ZeroDivisionError exception occurred')","c7d4d439":"### Examples","c9475cd3":"# Print all prime numbers betweem 1 - 20\nfor i in range(1, 20):\n    flag = True\n    for j in range(2,i):\n        if i % j == 0:\n            flag = False\n            break   \n    if flag :\n        print(i,end=',')","66c44178":"# Calculate factorial using recursion\ndef fact(n):\n    if n>0:\n        return n*fact(n-1)\n    else:\n        return 1\n    \nfact(4) , fact(3) , fact(5)","69191ca5":"# Calculate factorial\ndef fact(n):\n    fact1 = 1\n    for i in range(1,n+1):\n        fact1 *=i\n    return fact1\n\n    \nfact(4) , fact(3) , fact(5)","db37a3e3":"# Intersection of two lists or common elements between two lists\nmy_all_friends = ['userid1','userid2','userid3','userid4']\nprofile_friends = ['userid3','userid4','userid5','userid6']\n\nmutual_friends = [i for i in my_all_friends if i in profile_friends]\nprint('Mutual Friends :-',mutual_friends)\n\n# OR\n\nmy_all_friends = ['userid1','userid2','userid3','userid4']\nprofile_friends = ['userid3','userid4','userid5','userid6']\n\nmy_all_friends = set(['userid1','userid2','userid3','userid4'])\nprofile_friends =set(['userid3','userid4','userid5','userid6'])\n\nmutual_friends = my_all_friends & profile_friends\nmutual_friends","e5a18a7f":"# Switch Case in Python\ndef mapper(choice,a,b):\n    operation_dict ={1: a+b,\n                     2: a-b ,\n                     3: a*b,\n                     4: a\/b}\n    return operation_dict[choice]\n\na = int(input('Enter first number :-'))\nb = int(input('Enter second number :-'))\noperation = 0\nwhile True:\n    operation = int(input('''Please choice the operation: \\n\n                        1 : Addition\\n \n                        2 : Subtraction\\n \n                        3 : Multiplication\\n\n                        4 : Division\\n\n                        5 : Exit\\n'''))\n    if operation == 5:\n        break\n    else:\n        print(mapper(operation,a,b)) ","61cef638":"#### Shadow Copying\nl1 = ['Asif' , 'Basit' , 'Arun' , 'Sajad']\nl2 = l1\nprint(l1,'\\n',l2)\n\nl1[0] = 'John'\nprint(l1,'\\n',l2)","da472a6a":"# Split String at special character loc\nIam=\"I,am!currently$ enrolled%in,data!science ^ course^Conducted  @UpGrad@IITB^Banglore^Karnataka\"\nspec_char = \"@[_!#$%^&*()<>?\/|,}{~:]\"\nindex_list = []\nfor i in range(len(Iam)):\n    if Iam[i] in spec_char:\n        index_list.append(i)\nfinal_list = []\n\nfor i in range(len(index_list)):\n    if (i < 1):\n        final_list.append(Iam[0:index_list[i]].strip())\n    else:\n        final_list.append(Iam[index_list[i-1]+1:index_list[i]].strip())\nfinal_list.append(Iam[index_list[i]+1:len(Iam)])    \nfinal_list","dded8180":"#Vowel Test\nvowels = \"AaEeIiOoUu\"\ninput_str = input(\"Enter String: \")\nif (input_str[0] in vowels):\n    print(\"YES\")\nelse:\n    print('NO')","b75ef8bb":"# Reverse Number\n#take input of the number here\nn = int(input())\n\n#write code to reverse the number here\nr= 0\nwhile (n>0):\n    r = r*10 +n%10\n    n = n\/\/10\nprint(r)\n","0744a3e8":"# Armstrong number Test\nn=int(input())\nsum = 0\ndiv=n \nwhile (div>0):\n    r= div%10\n    sum+=r**3\n    div = int(div\/10)\nprint(sum==n)","98bf1c3b":"# Fibonacci Series\nn=int(input())\n#write your code here\nprev = 0\nnxt =1\nif n > 0:\n    print(0)\nif n > 1:\n    print(1)\nif n > 2:\n    for i in range(3,n+1):\n        nxt=prev+nxt\n        print(nxt)\n        prev = nxt-prev","5ae43e65":"# Sum of prime numbers from 2 to n \nn=int(input())\nsum= 0\nfor i in range(2,n+1):\n    flag=True\n    for j in range(2,int(n\/2)+1):\n        if i%j ==0 and i!=j:\n            flag=False\n            break\n    if flag:\n        sum+=i\nprint(sum)","f30b40f0":"# Fenced Matrix\nimport ast\nmylist= ast.literal_eval(input())\nrows, cols = (mylist[0],mylist[1]) \ndlist = [[0 for i in range(cols)] for j in range(rows)]\nfor i in range(rows):\n    for j in range(cols):\n        if i ==0 or j==0 or i ==rows-1 or j == cols-1:\n            dlist[i][j]=1\n\n\nfor i in range(rows):\n    print(dlist[i])","56eb2788":"# Pascal's Triangle\nfrom math import factorial \nn=int(input())\nprint([factorial(i)\/\/(factorial(k)*factorial(i-k)) for i in range(n)  if i == n-1 for k in range(i+1)])","d18e178c":"# Second largest number\nmylist = [10,5,5,6,7,8,9,3,8,8,8,9,9,10,10]\nsecond_largest = list(sorted(set(mylist)))[-2]\nprint('Second Largest Number :- ',second_largest)","ac5bbdeb":"# Palindrome\ns = input()\n\nprint(s.lower() == s[::-1].lower())","8245cb2e":"# Reverse sentence\n\nsentence=input()\nlist1 = sentence.split(' ')\nlist1.reverse()\nprint(' '.join(list1))","455a06e1":"# Iterable & Iterator","698beddf":"### Read File","3f9077bd":"![image.png](attachment:85e73117-c110-46b3-af4e-32ec88421c6e.png)","dcebcfcf":"### Method Overriding","270161bd":"- A Class is an object constructor or a \"blueprint\" for creating objects.\n\n- Objects are nothing but an encapsulation of variables and functions into a single entity. \n\n- Objects get their variables and functions from classes.\n\n- To create a class we use the keyword __class__.\n\n- The first string inside the class is called docstring which gives the brief description about the class.\n\n- All classes have a function called $____init____()$ which is always executed when the class is being initiated.\n\n- We can use $____init____()$ function to assign values to object properties or other operations that are necessary to perform when the object is being created\n\n- The __self__ parameter is a reference to the current instance of the class and is used to access class variables.\n\n- __self__ must be the first parameter of any function in the class\n\n- The __super()__ builtin function returns a temporary object of the superclass that allows us to access methods of the base class.\n\n- __super()__ allows us to avoid using the base class name explicitly and to enable multiple inheritance.\n\n\n__Syntax__","ff490aaa":"![image.png](attachment:b4a6285f-2527-4a0b-9af5-e9d41e09982f.png)","d48fc280":"### Write File","00665ef7":"- Inheritance is a powerful feature in object oriented programming.\n\n\n- Inheritance provides code reusability in the program because we can use an existing class (Super Class\/ Parent Class \/ Base Class)  to create a new class (Sub Class \/ Child Class \/ Derived Class) instead of creating it from scratch.\n\n\n- The child class inherits data definitions and methods from the parent class which facilitates the reuse of features already available. The child class can add few more definitions or redefine a base class method.\n\n\n- Inheritance comes into picture when a new class possesses the '__IS A__' relationship with an existing class. E.g Student is a person. Hence person is the base class and student is derived class.","968f46a0":"## Inheritance","8f1258f7":"- Python generators are easy way of creating iterators. It generates values one at a time from a given sequence instead of returning the entire sequence at once.  \n\n\n- It is a special type of function which returns an iterator object.\n\n\n- In a generator function, a __yield__ statement is used rather than a __return__ statement.\n\n\n- The generator function cannot include the return keyword. If we include it then it will terminate the execution of the function. \n\n\n- The difference between __yield__ and __return__ is that once yield returns a value the function is paused and the control is transferred to the caller.Local variables and their states are remembered between successive calls. In case of  the return statement value is returned and the execution of the function is terminated.\n\n\n- Methods like ____iter__()__ and ____next__()__ are implemented automatically in generator function. \n\n\n- Simple generators can be easily created using __generator expressions__. Generator expressions create anonymous generator functions like lambda.\n\n\n- The syntax for generator expression is similar to that of a list comprehension but the only difference is square brackets are replaced with round parentheses. Also list comprehension produces the entire list while the generator expression produces one item at a time which is more memory efficient than list comprehension.","640c8af3":"![image.png](attachment:cacf533e-544c-48b3-9692-c77e0d122eb0.png)","728eac51":"### Multi-level Inheritance","426df9f4":"# Container","8fda378e":"- Overriding is a very important part of object oreinted programming because it makes inheritance exploit its full power. \n\n\n- Overriding is the ability of a class (Sub Class \/ Child Class \/ Derived Class) to change the implementation of a method provided by one of its parent classes.\n\n\n- When a method in a subclass has the same name, same parameter and same return type as a method in its super-class, then the method in the subclass is said to override the method in the super-class.\n\n\n- The version of a method that is executed will be determined by the object that is used to invoke it. \n\n- If an object of a parent class is used to invoke the method, then the version in the parent class will be executed, but if an object of the subclass is used to invoke the method, then the version in the child class will be executed.","8c0e3813":"![image.png](attachment:d4c29d18-84b7-4387-8100-22db9712085a.png)\n![image.png](attachment:ee74f47f-3008-47fb-b1ed-565fe7baf831.png)","65d288ae":"# Classes & Objects","f1936bb5":"# Decorator","eef5b5ea":"![image.png](attachment:432d4802-ae1b-41bb-8e5c-20a6902bef4a.png)","54e09287":"### Multiple Inheritance","13215ce3":"### Open File","d00d235c":"- Containers are data structures that hold data values. \n\n\n- They support membership tests which means we can check whether a value exists in the container or not. \n\n\n- Generally containers provide a way to access the contained objects and to iterate over them.\n\n\n- Examples of containers include tuple, list, set, dict, str","4874890c":"<!DOCTYPE html>\n<html>\n<body>\n<div align=\"center\">\n<h2>Prepared by Asif Bhat<\/h2>\n    \n<h1>Python Tutorial<\/h1>\n<\/div>\n<\/body>\n<\/html>","ee504196":"- In this type of inheritance, a class can inherit from a child class or derived class. \n\n- Multilevel Inheritance can be of any depth in python","246a3970":"### Built-in Exceptions","a003fab3":"# End","046897fa":"### Python has several built-in modules and functions for creating, reading, updating and deleting files.","99d67066":"# Generator","b8ad7b45":"### Delete file","25270663":"__Decorator__ is very powerful and useful tool in Python as it allows us to wrap another function in order to extend the behavior of wrapped function without permanently modifying it.\n\n\nIn Decorators functions are taken as the argument into another function and then called inside the wrapper function.\n\n__Advantages__ - \n - Logging & debugging\n \n - Access control and authentication","d7f7b9f6":"- Python has many built-in exceptions (ArithmeticError, ZeroDivisionError, EOFError, IndexError, KeyError, SyntaxError, IndentationError, FileNotFoundError etc) that are raised when your program encounters an error.\n\n\n- When the exception occurs Python interpreter stops the current process and passes it to the calling process until it is handled. If exception is not handled the program will crash.\n\n\n- Exceptions in python can be handled using a __try__ statement. The __try__ block lets you test a block of code for errors.\n \n\n- The block of code which can raise an exception is placed inside the try clause. The code that will handle the exceptions is written in the __except__ clause.\n \n \n- The __finally__ code block will execute regardless of the result of the try and except blocks.\n\n\n- We can also use the __else__ keyword to define a block of code to be executed if no exceptions were raised.\n\n\n- Python also allows us to create our own exceptions that can be raised from the program using the __raise__ keyword and caught using the __except__ clause. We can define what kind of error to raise, and the text to print to the user.","b8af01d4":"# File Management","acc5224f":"### Close File","0f710c35":"- An __iterable__ is an object that can be iterated upon. It can return an iterator object with the purpose of traversing through all the elements of an iterable. \n\n\n- An iterable object implements ____iter__()__ which is expected to return an iterator object. The iterator object uses the ____next__()__ method. Every time __next()__ is called next element in the iterator stream is returned. When there are no more elements available __StopIteration exception__ is encountered. So any object that has a ____next__()__ method is called an __iterator__.\n\n\n\n- Python lists, tuples, dictionaries and sets are all examples of iterable objects.","b0d72569":"- Multiple inheritance is a feature in which a class (derived class) can inherit attributes and methods from more than one parent class.\n\n- The derived class inherits all the features of the base case.","9bb0580c":"# END","a2f2284a":"# Error & Exception Handling","f16976b8":"![image.png](attachment:7ca612dc-4f4a-4ade-90f6-5de25d90a505.png)","0c439484":"![image.png](attachment:1ed641ad-9de8-4964-a6d3-e06b29a6f9d4.png)"}}