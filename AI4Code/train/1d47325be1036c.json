{"cell_type":{"c54084b0":"code","ced41402":"code","34e62f63":"code","b7ad679a":"code","e2372f4b":"code","a2451cc3":"code","ff1dc249":"code","78144743":"code","6570dd4f":"code","9d404020":"code","90303aa3":"code","c83a6fc2":"code","2f0e2284":"code","6380f1c5":"code","2ee37d27":"code","294092f2":"code","20f25fcd":"code","adb78aaa":"code","200e3d4b":"code","21f9b75a":"code","7a43963f":"code","3f0b8874":"code","80696161":"code","060460de":"markdown","05ec0599":"markdown","818abf1c":"markdown","ca04333e":"markdown","4a2999d1":"markdown","7f263754":"markdown","ec01ba1e":"markdown"},"source":{"c54084b0":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport os\nimport tensorflow as tf\nfrom tensorflow import keras as ks\n\nfrom keras.utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split","ced41402":"df = pd.read_csv('..\/input\/pokemon-images-and-types\/pokemon.csv')\ndf.shape","34e62f63":"df.head()","b7ad679a":"df2 = df.sort_values(by=['Name'], ascending=True).reset_index(drop=True)\ndf2.head()","e2372f4b":"type1 = df['Type1'].tolist()\ntype2 = df['Type2'].tolist()\n\ntypo = type1 + type2\n\nplt.figure(figsize=(14, 6))\n\nsns.countplot(x=typo)\nplt.title('Types of pokemon')\nplt.show()","a2451cc3":"x1 = df.Type1.value_counts().keys()\ny1 = df.Type1.value_counts().values\nx2 = df.Type2.value_counts().keys()\ny2 = df.Type2.value_counts().values","ff1dc249":"xy1 = pd.DataFrame({'x1':x1, 'y1':y1})\nxy2 = pd.DataFrame({'x2':x2, 'y2': y2})\nxy1.sort_values(by=['x1'],ascending=True, inplace=True)\nxy2.sort_values(by=['x2'],ascending=True, inplace=True)","78144743":"plt.style.use('ggplot')\nplt.figure(figsize=(30, 7))\ngspec = gridspec.GridSpec(2, 2)\ntp = plt.subplot(gspec[0, 1])\nbt = plt.subplot(gspec[1, 1:])\n\ntp.bar(xy1.x1,xy1.y1, color=['blue', 'green', 'red',\n                             'yellow', 'cyan', 'purple',\n                             'pink', '#135688', '#002255',\n                             '#532819', '#381526', '#256789',\n                            '#784512', '#859674'])\nbt.bar(xy2.x2, xy2.y2, color=['blue', 'green', 'red',\n                             'yellow', 'cyan', 'purple',\n                             'pink', '#135688', '#002255',\n                             '#532819', '#381111', '#256789',\n                            '#784512', '#859674'])\nbt.invert_yaxis()\nbt.set_xticks([])\nplt.tight_layout()\ntp.set_title('Pokemon based on Type1 and Type2')\nplt.show()","6570dd4f":"path = '..\/input\/pokemon-images-and-types\/images\/images\/'\nfig,((ax1, ax2, ax3, ax4),(ax5, ax6, ax7, ax8)) = plt.subplots(2, 4, figsize=(12, 10))\nax = [ax1, ax2, ax3, ax4, ax5, ax6, ax7, ax8]\nfor i in range(8):\n    img = mpimg.imread(path+df['Name'][i**3]+'.png')\n    ax[i].imshow(img)\n    ax[i].set_title(df['Name'][i**3])\n    ax[i].axis('off')\nplt.tight_layout()\nplt.show()\n    ","9d404020":"path='..\/input\/pokemon-images-and-types\/images\/images\/'\nimg_name = sorted(os.listdir('..\/input\/pokemon-images-and-types\/images\/images\/'))\nimg_paths = []\nfor i in img_name:\n    img_paths.append(path + i)","90303aa3":"df2['filepath'] = img_paths","c83a6fc2":"poke_type = []\ncode = []\n\nfor i in range(df2.shape[0]):\n    if (df2.iloc[i]['Type1']=='Grass') or (df2.iloc[i]['Type2']=='Grass'):\n        poke_type.append('Grass')\n        code.append(1)\n    elif (df2.iloc[i]['Type1']=='Water') or (df2.iloc[i]['Type2']=='Water'):\n        poke_type.append('Water')\n        code.append(2)\n    elif (df2.iloc[i]['Type1']=='Fire') or (df2.iloc[i]['Type2']=='Fire'):\n        poke_type.append('Fire')\n        code.append(3)\n    else:\n        poke_type.append('NaN')\n        code.append('NaN')","2f0e2284":"df2['type'] = poke_type\ndf2['code'] = code\nnew_df = df2.drop(['Type1', 'Type2', 'Name'], axis=1)\nnew_df = new_df[new_df['type']!='NaN']\nnew_df.reset_index(drop=True, inplace=True)\n","6380f1c5":"new_df.head(2)","2ee37d27":"sns.countplot(x=new_df.type)\nplt.title('Pokemons going for training')\nplt.ylabel('Number of images')","294092f2":"train_datagen = ImageDataGenerator(\n    \n    rescale=1.\/255, \n    rotation_range=40, \n    width_shift_range=0.2, \n    height_shift_range=0.2, \n    shear_range=.2, \n    zoom_range=0.2,\n    horizontal_flip=True, \n    fill_mode='nearest',\n    validation_split=0.1\n)\n\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    new_df, \n    x_col='filepath', y_col='type',\n    target_size=(120, 120), \n    color_mode='rgba', \n    class_mode='categorical', \n    batch_size=32, \n    shuffle=True, \n    seed=1,\n    subset='training'\n)\n\nvalidation_generator = train_datagen.flow_from_dataframe(\n    new_df , x_col='filepath', y_col='type',\n    target_size=(120, 120),\n    color_mode='rgba', \n    class_mode='categorical', \n    batch_size=4, \n    shuffle=True,\n    seed=1, \n    subset='validation'\n)","20f25fcd":"image_sample = train_generator.next()[0]\n\nplt.figure(figsize=(10, 10))\n\nfor i in range(9):\n    plt.subplot(3, 3, i+1)\n    plt.imshow(image_sample[i, :, :, :])\n    plt.axis('off')\nplt.show()","adb78aaa":"model = ks.models.Sequential()\n\nmodel.add(ks.layers.Dense(4, input_shape=(120, 120, 4)))\n\nmodel.add(ks.layers.Conv2D(64, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\nmodel.add(ks.layers.Conv2D(128, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\n\nmodel.add(ks.layers.Conv2D(256, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\n#model.add(ks.layers.Dropout(0.2))\n\nmodel.add(ks.layers.Conv2D(512, (7, 7), activation='relu'))\nmodel.add(ks.layers.MaxPooling2D(2, 2))\nmodel.add(ks.layers.Dropout(0.2))\n\n\nmodel.add(ks.layers.Flatten())\n\nmodel.add(ks.layers.Dense(1024, activation='relu'))\n\nmodel.add(ks.layers.Dense(3, activation='softmax'))\n\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['acc'])","200e3d4b":"model.summary()","21f9b75a":"model.layers","7a43963f":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('acc')>0.7) and (logs.get('val_acc')>0.7):\n            print('\\n reached 70% accuarcy so stopping training')\n            self.model.stop_training = True\ncallbacks = myCallback()\n","3f0b8874":"history = model.fit(\n    train_generator, \n    validation_data=validation_generator,\n    batch_size=20, \n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.ReduceLROnPlateau(), \n        callbacks\n    ]\n    \n)\n","80696161":"plt.style.use('ggplot')\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, acc, 'r', label='training_accuracy')\nplt.plot(epochs, val_acc, 'b', label='validation_accuracy')\nplt.title('Training and Validation Accuarcy')\nplt.xlabel('-----epochs--->')\nplt.ylabel('Accuracy')\nplt.legend()\n\nplt.figure(figsize=(6, 5))\n\nplt.plot(epochs, loss, 'r', label='training_loss')\nplt.plot(epochs, val_loss, 'b', label='validation_loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('----epochs--->')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.show()","060460de":"### Callback to stop the training when a particular accuarcy is reached","05ec0599":"### lets sort the pokemons names in order to keep in match with the available image files","818abf1c":"## Model","ca04333e":"### Image Path Dataframe ","4a2999d1":"## Augmentation","7f263754":"### Importing libraries and read csv","ec01ba1e":"# Pokemon Grass vs Water vs Fire Classifier"}}