{"cell_type":{"527cc1e1":"code","59a8765e":"code","89511c6b":"code","d196b2e2":"code","5eb246f2":"code","0c7d9bce":"code","e6397568":"code","21fd2a7e":"code","7b55a8b5":"code","cc0c0dd3":"code","fd9c438a":"code","0ebdb591":"code","874e6181":"code","1fecfc69":"code","e490e08d":"code","82b9d3bf":"code","292f03e5":"code","3284c88c":"code","623f5e49":"code","5086ac49":"code","87ab2c83":"code","f292bc64":"code","a5535ebf":"code","43842ef7":"code","047cb76b":"code","292ec37b":"code","9d2c965e":"code","ce66043e":"code","6ffed51c":"code","56de2c28":"code","f76c9056":"code","7b4609b3":"code","d733d73c":"code","ef1ddef4":"code","d281d6b6":"code","8a7f9f4c":"code","843153a4":"code","5d738777":"code","8f00ee4a":"markdown","28a8cd39":"markdown","04ddd949":"markdown","7c63b605":"markdown"},"source":{"527cc1e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","59a8765e":"data = pd.read_csv(os.path.join('..\/input','diabetes.csv'))","89511c6b":"data.head()","d196b2e2":"data.shape","5eb246f2":"data['Pregnancies'].hist()","0c7d9bce":"max(data['Pregnancies'])","e6397568":"data[data['Pregnancies']==17]","21fd2a7e":"data['Outcome'].hist()","7b55a8b5":"from sklearn.linear_model import LogisticRegression","cc0c0dd3":"import matplotlib.pyplot as plt\n%matplotlib inline","fd9c438a":"print(data.columns)","0ebdb591":"print(\"dimension of data: {}\".format(data.shape))","874e6181":"print(data.groupby('Outcome').size())","1fecfc69":"import seaborn as sns","e490e08d":"sns.countplot(data['Outcome'],label=\"Count\")","82b9d3bf":"data.info()","292f03e5":"from sklearn.model_selection import train_test_split","3284c88c":"X_train, X_test, y_train, y_test = train_test_split(data.loc[:,data.columns!='Outcome'],\n                                                   data['Outcome'],\n                                                   stratify=data['Outcome'],\n                                                   random_state=66)","623f5e49":"X_train.shape","5086ac49":"X_test.shape","87ab2c83":"y_train.hist()","f292bc64":"y_test.hist()","a5535ebf":"from sklearn.neighbors import KNeighborsClassifier\n\ntraining_accuracy = []\ntest_accuracy = []\n# try n_neighbours from 1 to 10\nneighbours_settings = range(1,11)\n\nfor n_neighbours in neighbours_settings:\n    #build the model\n    knn = KNeighborsClassifier(n_neighbors=n_neighbours)\n    knn.fit(X_train,y_train)\n    #record training set accuracy\n    training_accuracy.append(knn.score(X_train,y_train))\n    #record test set accuracy\n    test_accuracy.append(knn.score(X_test,y_test))\n","43842ef7":"plt.plot(neighbours_settings,training_accuracy,label=\"Training accuracy\")\nplt.plot(neighbours_settings, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"n_neighbors\")\nplt.legend()","047cb76b":"knn = KNeighborsClassifier(n_neighbors=8)\nknn.fit(X_train,y_train)\n\nprint('Accuracy of K-NN classifier on training set: {:.2f}'.format(knn.score(X_train, y_train)))\nprint('Accuracy of K-NN classifier on test set: {:.2f}'.format(knn.score(X_test, y_test)))\n","292ec37b":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression().fit(X_train, y_train)","9d2c965e":"print(\"Training set score: {:.3f}\".format(logreg.score(X_train, y_train)))\nprint(\"Test set score: {:.3f}\".format(logreg.score(X_test, y_test)))","ce66043e":"logreg001 = LogisticRegression(C=0.01).fit(X_train, y_train)\nprint(\"Training set accuracy: {:.3f}\".format(logreg001.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg001.score(X_test, y_test)))","6ffed51c":"logreg100 = LogisticRegression(C=100).fit(X_train, y_train)\nprint(\"Training set accuracy: {:.3f}\".format(logreg100.score(X_train, y_train)))\nprint(\"Test set accuracy: {:.3f}\".format(logreg100.score(X_test, y_test)))","56de2c28":"from sklearn.tree import DecisionTreeClassifier","f76c9056":"tree = DecisionTreeClassifier(random_state=0)\ntree.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","7b4609b3":"tree = DecisionTreeClassifier(max_depth=3, random_state=0)\ntree.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","d733d73c":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=100, random_state=0)\nrf.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(rf.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(rf.score(X_test, y_test)))","ef1ddef4":"rf1 = RandomForestClassifier(max_depth=3, n_estimators=100, random_state=0)\nrf1.fit(X_train, y_train)\nprint(\"Accuracy on training set: {:.3f}\".format(rf1.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(rf1.score(X_test, y_test)))","d281d6b6":"from sklearn.naive_bayes import GaussianNB","8a7f9f4c":"gnb = GaussianNB()","843153a4":"gnb.fit(X_train,y_train)","5d738777":"print(\"Accuracy on training set: {:.3f}\".format(gnb.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(gnb.score(X_test, y_test)))","8f00ee4a":"# Logistic Regression","28a8cd39":"# Random Forest","04ddd949":"# Decision Tree","7c63b605":"# K-Nearest Neighbors"}}