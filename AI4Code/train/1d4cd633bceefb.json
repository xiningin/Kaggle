{"cell_type":{"e67df50b":"code","243c4ae9":"code","9aac67cc":"code","38265ecc":"code","e878408d":"code","562e0325":"code","50dd5e7e":"code","5670c1c4":"code","cdd69717":"code","e8d57b11":"code","8456f034":"code","8633f874":"code","6c264ff7":"code","879e522a":"code","9b6d4160":"code","79bbfa79":"code","0c17eef7":"code","3184a967":"code","f1abbc7d":"code","583a405a":"code","8e713b58":"markdown","276c928f":"markdown","6931e978":"markdown","9d554186":"markdown","406bc937":"markdown","98e991f1":"markdown","1128eaf9":"markdown","f01a6dc2":"markdown","b4142b8d":"markdown","0b929678":"markdown","a30a4255":"markdown","af5855bc":"markdown","f84d0bd7":"markdown","ff66ab64":"markdown"},"source":{"e67df50b":"# To prevent the annoyning Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","243c4ae9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('darkgrid')\ncmap = sns.cm.mako_r\n\n%matplotlib inline","9aac67cc":"netflix = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","38265ecc":"netflix.head()","e878408d":"netflix.info()","562e0325":"plt.figure(figsize=(4, 5))\n\nx_axis = netflix.value_counts('type').index\ny_axis = netflix.value_counts('type').values\n\nsns.barplot(x=x_axis, y=y_axis)\n\nplt.xlabel('Type of Content')\nplt.ylabel('Count')\nplt.show()","50dd5e7e":"plt.figure(figsize=(10, 6))\n\nx_axis = netflix.value_counts('country')[:10].values\ny_axis = netflix.value_counts('country')[:10].index\n\nsns.barplot(x=x_axis, y=y_axis)\n\nplt.xlabel('Count')\nplt.ylabel('Country')\nplt.show()","5670c1c4":"plt.figure(figsize=(10, 6))\n\nx_axis = netflix.value_counts('rating')[:10].index\ny_axis = netflix.value_counts('rating')[:10].values\n\nsns.barplot(x=x_axis, y=y_axis)\n\nplt.xlabel('Rating Type')\nplt.ylabel('Count')\nplt.show()","cdd69717":"# Adding month as release_month column\n\ndef get_month(date):\n    try:\n        return date.strip().split(' ')[0]\n    except:\n        return date\n    \n\nnetflix['release_month'] = netflix['date_added'].apply(lambda x : get_month(x)).astype('category')\n\n# At last converting the date_added to DateTime Type\nnetflix['date_added'] = pd.to_datetime(netflix['date_added'])","e8d57b11":"month_order = ['January', 'February', 'March', 'April', \n               'May', 'June', 'July','August', 'September', \n               'October', 'November', 'December']\n\nnetflix_2000_plus = netflix[netflix['release_year'] >= 2000]\n\npivot_table = netflix_2000_plus.pivot_table(values='show_id', index='release_month', \n                                  columns='release_year', aggfunc='count').reindex(month_order)\n\npivot_table.fillna(0)\n\nplt.figure(figsize=(16, 8))\n\nsns.heatmap(pivot_table, linewidths=1, cmap=cmap)\n\nplt.xlabel('Year of Release')\nplt.ylabel('Month')\nplt.title(\"Heatmap for Contents released each Month\")\n\nplt.show()","8456f034":"def get_minutes(duration):\n    try:\n        return int(duration.strip().split(' ')[0])\n    except:\n        return 0\n\ndef get_seasons(season):\n    try:\n        return int(season.strip().split(' ')[0])\n    except:\n        return 0\n    \nnetflix_movies = netflix[netflix['type'] == 'Movie']\nnetflix_tvshows = netflix[netflix['type'] == 'TV Show']\n\nmovies_time_distribution = [get_minutes(duration) for duration in netflix_movies['duration']]\ntvshows_time_distribution = [get_minutes(duration) for duration in netflix_tvshows['duration']]","8633f874":"fig, (axis1, axis2) = plt.subplots(1,2, figsize=(14,6))\n\nsns.histplot(movies_time_distribution, bins=50, kde=True, ax=axis1)\nsns.histplot(tvshows_time_distribution, bins=40, kde=True, ax=axis2)\n\naxis1.set_xlabel(\"Duration (in Minutes)\")\naxis2.set_xlabel(\"Duration (in Seasons)\")\n\nplt.show()","6c264ff7":"genre_set = set()\n\nfor genres in netflix['listed_in']:\n    try:\n        listed_in = [genre.strip() for genre in genres.split(',')]\n        genre_set.update(listed_in)\n    except:\n        pass\n\ngenre_dictionary = {}\n    \nfor genre in genre_set:\n    for genre_list in netflix['listed_in']:\n        try:\n            listed_in = [genre.strip() for genre in genre_list.split(',')]\n            if genre in listed_in:\n                if genre in genre_dictionary.keys():\n                    genre_dictionary[genre] = genre_dictionary[genre] + 1\n                else:\n                    genre_dictionary[genre] =1\n        except:\n            pass\n        \ngenre_list_with_counts = sorted(genre_dictionary.items(), key=lambda x: x[1], reverse=True)","879e522a":"!pip install squarify","9b6d4160":"import squarify\n\nplt.figure(figsize=(18, 12))\n\nlabels = [genre_counts[0] for genre_counts in genre_list_with_counts[:20]]\nsizes = [genre_counts[1] for genre_counts in genre_list_with_counts[:20]]\n\nsquarify.plot(sizes=sizes, label=labels, color=[\"#63D1F4\",\"#8FDEF7\",\"#BBEBFA\"])\n\nplt.axis('off')\nplt.show()","79bbfa79":"import re\nfrom nltk import word_tokenize, corpus\nfrom nltk.stem import PorterStemmer\nfrom wordcloud import WordCloud, STOPWORDS\n\nword_tokens = [word_tokenize(text) for text in netflix.description]\n\nlisted_in_string = \"\"\n\nfor word_list in word_tokens:\n    for word in word_list:\n            listed_in_string += word + \" \"\n            \ndescription_stopwords = set(STOPWORDS)\ndescription_stopwords.update([\"S\", \"new\"])\n\nmy_word_cloud = WordCloud(background_color='white', stopwords=description_stopwords).generate(listed_in_string)\nplt.figure(figsize=(16,22))\nplt.imshow(my_word_cloud, interpolation='bilinear')\nplt.title(\"Word Cloud for Description\", fontsize=30)\nplt.axis('off')\nplt.show()","0c17eef7":"from sklearn.metrics.pairwise import linear_kernel\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nnetflix['description'] = netflix['description'].fillna('')\n\ntfidf = TfidfVectorizer(stop_words='english')\ntfidf_matrix = tfidf.fit_transform(netflix['description'])\n\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n\nindices = pd.Series(netflix.index, index=netflix['title']).drop_duplicates()\n\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return netflix['title'].iloc[movie_indices]","3184a967":"get_recommendations('The Circle')","f1abbc7d":"get_recommendations('The Invisible Guest')","583a405a":"get_recommendations(\"The Queen's Gambit\")","8e713b58":"---\n**WordCloud for the Description**","276c928f":"---\n**Plotting a Bar graph for Top 10 Countries with most Content released**","6931e978":"**Importing the CSV file using pandas read_csv()**","9d554186":"---\n**Year and Month where Most Contents were Released**","406bc937":"**Calling the head() and info() to get an initial idea on the Data**","98e991f1":"---\n**Plotting a KDE for Duration of the Movies and TV Shows**","1128eaf9":"---\n**Plotting a Bar graph for Top 10 Rating**","f01a6dc2":"# Thanks a lot for showing interest in My Notebook","b4142b8d":"---\n**Plotting a Bar graph for the Type of content**","0b929678":"# Netflix EDA and Recommender System","a30a4255":"---\n**Importing the required packages**","af5855bc":"---\n**Displaying the Top 20 Genre in Netflix using the Squarify**","f84d0bd7":"---\n\n**Recommender System which will display similar movies to the one we provide based on the description.**\n\nI have no experience in designing a 'Recommender System', I have used the code from the below provided notebook. Please look into that notebook as it contains a more accurate one.\n\n<a href=\"https:\/\/www.kaggle.com\/niharika41298\/netflix-visualizations-recommendation-eda\">Click here to navigate to Notebook from Niharika Pandit<\/a>","ff66ab64":"Current I have just focused on Contents which were released either in the year 2000 or more. "}}