{"cell_type":{"c0734bc1":"code","b4dbba87":"code","0ff6eda3":"code","89197cd7":"code","9bff4dd5":"code","e1cd5c36":"code","e13616df":"code","0c2b4b2b":"code","5e503f38":"code","6a602c8b":"code","a790587e":"code","dedd8ffa":"code","c6fbe983":"code","8c8a78bb":"code","0e65fbee":"code","a42ba7ab":"code","5291b62e":"code","f9a54cd8":"code","600f2c46":"code","40483670":"code","7e4cced7":"code","4048e627":"code","30960e7b":"code","79170d7e":"markdown"},"source":{"c0734bc1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b4dbba87":"import matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelBinarizer, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score as score\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score","0ff6eda3":"\ntrain_data =pd.read_csv(\"..\/input\/san-francisco-crime-classification\/train.csv\", parse_dates =['Dates'])\ntest_data = pd.read_csv(\"..\/input\/sf-crime\/test.csv\", parse_dates =['Dates'])\nprint(\"The size of the train data is:\", train_data.shape)\nprint(\"The size of the test data is:\", test_data.shape)","89197cd7":"train_data.head()","9bff4dd5":"test_data.head()","e1cd5c36":"train_data.dtypes.value_counts()","e13616df":"test_data.dtypes.value_counts()\n","0c2b4b2b":"train_data.isnull().sum()","5e503f38":"test_data.isnull().sum()","6a602c8b":"train_data.columns","a790587e":"test_data.columns","dedd8ffa":"train_data.Category.value_counts()","c6fbe983":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ntrain_data['Category'] = le.fit_transform(train_data.Category)\ntrain_data.Category.head()","8c8a78bb":"train_data.PdDistrict.value_counts()","0e65fbee":"feature_cols =['DayOfWeek', 'PdDistrict']\ntrain_data = pd.get_dummies(train_data, columns=feature_cols)\ntest_data = pd.get_dummies(test_data, columns=feature_cols)\n\ntrain_data","a42ba7ab":"test_data","5291b62e":"for x in [train_data, test_data]:\n    x['years'] = x['Dates'].dt.year\n    x['months'] = x['Dates'].dt.month\n    x['days'] = x['Dates'].dt.day\n    x['hours'] = x['Dates'].dt.hour\n    x['minutes'] = x['Dates'].dt.minute\n    x['seconds'] = x['Dates'].dt.second","f9a54cd8":"train_data.head()","600f2c46":"test_data.head()","40483670":"train_data = train_data.drop(['Dates', 'Address','Resolution'], axis = 1)\ntrain_data = train_data.drop(['Descript'], axis = 1)\ntrain_data.head()","7e4cced7":"test_data = test_data.drop(['Dates', 'Address'], axis = 1)\ntest_data.head()","4048e627":"feature_cols = [x for x in train_data if x!='Category']\nX = train_data[feature_cols]\ny = train_data['Category']\nX_train, x_test,y_train, y_test = train_test_split(X, y)","30960e7b":"DTC = DecisionTreeClassifier(criterion = 'gini', max_features = 10, max_depth = 5)\nDTC = DTC.fit(X_train, y_train)\ny_pred_DTC = DTC.predict(x_test)\ny_pred_test_DTC = DTC.predict(X_train)\n\nprint(\"score is {:.3f}\".format (score(y_test, y_pred_DTC, average = 'micro')*100))\nprint(\"Accuracy for the test data is {:.3f} \".format (accuracy_score(y_test, y_pred_DTC)*100))\nprint(\"Accuracy for the train data is {:.3f} \".format (accuracy_score(y_train, y_pred_test_DTC)*100))","79170d7e":"I am getting an accuracy of around 24 both for test and train data."}}