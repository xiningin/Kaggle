{"cell_type":{"759a9831":"code","0f52c42e":"code","237bcaf6":"code","92761987":"code","bcab6493":"code","e389f0cf":"code","2f3d33dd":"code","1c052f4e":"code","7d883f44":"code","5f1b63c5":"code","93f1b18e":"code","04dda80f":"code","e302fef8":"code","3bcbf3af":"code","af18171b":"code","a30e479f":"code","6634c35a":"code","a78dc767":"code","f2c7b302":"code","a7c1816b":"code","92113360":"code","51be6de9":"code","6e26d10c":"code","34d6fb74":"code","3b1cadc0":"code","76e02273":"code","ec61c4d8":"code","749190f3":"code","26502bfc":"code","62613c58":"code","a91a7038":"code","413f9102":"code","650f30a9":"code","c29c8acd":"code","570acf86":"code","cf02d9a5":"code","fe756fe4":"code","15bc00ea":"code","0347712d":"code","fdc104a2":"code","6c690e0b":"code","6921172e":"code","98bea233":"code","039be433":"code","5266df71":"code","1256f36d":"code","373502f5":"code","2be4af39":"markdown","e638a349":"markdown","583a8af0":"markdown","303b3c06":"markdown","316d3757":"markdown","1da3ee15":"markdown"},"source":{"759a9831":"import pandas as pd\nimport random as rd\nimport math as math\nimport numpy as np\n\nimport warnings\nwarnings.simplefilter('ignore')","0f52c42e":"import os\nfor dirname, _, filenames in os.walk('\/kaggle'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","237bcaf6":"df1 = pd.read_csv('..\/input\/neutron-moderator\/neutron_moderator.csv')","92761987":"df1.head()","bcab6493":"df1.shape","e389f0cf":"df1.info()","2f3d33dd":"df1['colisions'] = df1['colisions'].astype('int64')\ndf1['target'] = df1['target'].astype('int64')\ndf1['time, 10^(-5) c'] = df1['time, 10^(-5) c'].astype('float64')\n\ndf1.info()","1c052f4e":"df1.describe()","7d883f44":"df1['colisions'] = df1['colisions'].astype('int8')\ndf1['target'] = df1['target'].astype('int8')\ndf1['time, 10^(-5) c'] = df1['time, 10^(-5) c'].astype('float64')\n\ndf1.info()","5f1b63c5":"df1.describe(include=['object'])","93f1b18e":"df1['target'].value_counts()","04dda80f":"df1['target'].value_counts(normalize=True)","e302fef8":"columns_to_show = ['time, 10^(-5) c', 'colisions']\ndf1.groupby(['target'])[columns_to_show].describe(percentiles=[0.25, 0.50, 0.99])","3bcbf3af":"df1.groupby(['target'])[columns_to_show].agg([np.mean, np.std, np.min, np.max])","af18171b":"df1.pivot_table(['colisions', 'time, 10^(-5) c'], ['target'], aggfunc='mean').head(10)","a30e479f":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%config InlineBackend.figure_format = 'svg'\n\nimport matplotlib as mpl\nmpl.rcParams[\"xtick.bottom\"] = True\n\nflatui = [\"red\", \"green\", \"blue\"]\nsns.palplot(sns.color_palette(flatui))\n\nsns.set(font_scale = 1.5,\n       style='white',\n       palette=flatui,\n       )\n\nsns.set_style(\"ticks\", {\"xtick.bottom\": True})","6634c35a":"sns.boxplot(y=\"colisions\", x=\"target\",\n            data=df1)","a78dc767":"sns.boxplot(y=\"time, 10^(-5) c\", x=\"target\",\n            data=df1)","f2c7b302":"df1['colisions'] = df1['colisions']\/100\ndf1.rename(columns={'colisions': 'colisions, 10^2'}, inplace=True)","a7c1816b":"sns.set(font_scale = 1.5,\n       style='white',\n       )\n\ng = sns.PairGrid(df1[['time, 10^(-5) c','colisions, 10^2', 'Material']],\n                 hue='Material',\n                 height=5.5,\n                 palette= flatui,\n                 despine = False,\n                 hue_kws={\n                     \"marker\": [\"o\", \"o\", \"o\"]\n                 })\n\ng.map_diag(sns.distplot, norm_hist = True, bins = np.linspace(0.0, 2.4, num=(6*4*10), endpoint=True))\ng.map_upper(sns.kdeplot, shade=False, shade_lowest=False)\ng.map_lower(plt.scatter, s = 35, alpha=0.3, linewidth=1.5, edgecolor=\"black\")\ng.fig.set_size_inches(10, 10)\n\n\nplt.legend(loc='upper center', bbox_to_anchor=(1, 1.25), ncol=3) #vertical legend\n\n# \u041f\u043e\u0434\u043f\u0438\u0441\u0438 \u043a \u043e\u0441\u044f\u043c\ng.axes[0,0].yaxis.set_label_text(r'$\\rho (t) $')\ng.axes[0,0].xaxis.set_label_text('$t, 10^{-5} c$')\ng.axes[1,1].yaxis.set_label_text(r'$\\rho (colisions) $')\ng.axes[1,1].xaxis.set_label_text('$colisions, 10^{2}$')\ng.axes[1,0].yaxis.set_label_text('$colisions, 10^{2}$')\ng.axes[1,0].xaxis.set_label_text('$t, 10^{-5} c$')\ng.axes[0,1].yaxis.set_label_text('$t, 10^{-5} c$')\ng.axes[0,1].xaxis.set_label_text('$colisions, 10^{2}$')\n\n# \u0422\u0438\u043a\u0438 \u0432\u0438\u0434\u043d\u044b \u043d\u0430 y\ng.axes[0,0].yaxis.set_tick_params(labelleft=False)\ng.axes[1,1].yaxis.set_tick_params(labelleft=False)\ng.axes[1,0].yaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\ng.axes[0,1].yaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\n\n# \u0422\u0438\u043a\u0438 \u0432\u0438\u0434\u043d\u044b \u043d\u0430 x\ng.axes[0,0].xaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\ng.axes[1,1].xaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\ng.axes[1,0].xaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\ng.axes[0,1].xaxis.set_tick_params(labelleft=True, bottom = True, direction = 'in')\n\n#\u041b\u0438\u043c\u0438\u0442\u044b \u0442\u0438\u043a\u043e\u0432 \u043d\u0430 x\ng.axes[1,0].set_xlim(0, 2.5)\ng.axes[0,1].set_xlim(0, 0.6)\n\n#\u041b\u0438\u043c\u0438\u0442\u044b \u0442\u0438\u043a\u043e\u0432 \u043d\u0430 y\ng.axes[1,0].set_ylim(0.00001, 0.6)\ng.axes[0,0].set_ylim(0.00001, 2.5)\n\nplt.subplots_adjust(hspace=0.5, wspace=0.2)","92113360":"from sklearn import model_selection\nfrom sklearn import metrics\nfrom sklearn import linear_model","51be6de9":"train_data, test_data, train_labels, test_labels = model_selection.train_test_split(\n    df1[['time, 10^(-5) c', 'colisions, 10^2']], df1[['target']],\n    test_size = 0.3, random_state = 0)","6e26d10c":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_text\ndecision_tree = DecisionTreeClassifier(random_state=0, max_depth=2)\ndecision_tree = decision_tree.fit(train_data, train_labels)","34d6fb74":"r = export_text(decision_tree, feature_names=list(train_data))\nprint(r)","3b1cadc0":"import matplotlib.style\nimport matplotlib as mpl\nmpl.style.use('seaborn-dark')","76e02273":"import matplotlib.pyplot as plt\n\nfrom sklearn.tree import plot_tree\n\nmpl.style.use('classic')\nmpl.rcParams['figure.facecolor'] = 'white'\n\nplt.figure(figsize=(7.5,7.5), dpi=80)\n\nplot_tree(decision_tree,\n          class_names  = True,\n          label = 'all',\n          filled=True,\n          node_ids = True,\n          proportion = True,\n          feature_names=list(train_data))\nplt.show()","ec61c4d8":"model_predictions = decision_tree.predict(test_data)\nprint(metrics.accuracy_score(test_labels, model_predictions))\nprint(metrics.classification_report(test_labels, model_predictions))","749190f3":"mpl.style.use('classic')\n\nfont = {'family': 'serif',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 12,\n        }\n\nmpl.rcParams[\"xtick.top\"] = False\nmpl.rcParams[\"ytick.right\"] = False\nmpl.rcParams['figure.facecolor'] = 'white'\n\nfrom matplotlib.colors import ListedColormap\ncolors = ListedColormap(['red', 'green','blue'])","26502bfc":"new_df = test_data\nnew_df","62613c58":"new_df['target'] = test_labels\nnew_df","a91a7038":"new_df_0 = new_df\nnew_df_1 = new_df\nnew_df_2 = new_df","413f9102":"new_df_0 = new_df_0.drop(new_df_0[new_df_0.target != 0].index)\nnew_df_1 = new_df_1.drop(new_df_1[new_df_1.target != 1].index)\nnew_df_2 = new_df_2.drop(new_df_2[new_df_2.target != 2].index)\ndisplay(new_df.head(5))\ndisplay(new_df_0.head(5))\ndisplay(new_df_1.head(5))\ndisplay(new_df_2.head(5))","650f30a9":"new_df_0['target'].value_counts()","c29c8acd":"new_df_1['target'].value_counts()","570acf86":"new_df_2['target'].value_counts()","cf02d9a5":"new_df['target'].value_counts()","fe756fe4":"error = [] # 1, if error, 0 true\ntime = []\ncolisions = []\n\nnp_test_labels = test_labels['target'].to_numpy()\nnp_test_time = test_data['time, 10^(-5) c'].to_numpy()\nnp_test_colisions = test_data['colisions, 10^2'].to_numpy()\n\nfor i in range(len(np_test_labels)):\n    if np_test_labels[i] == model_predictions[i]:\n        error.append(0)\n    else:\n        error.append(1)\n        \nfor i in range(len(error)):\n    if error[i] == 1:\n        time.append(np_test_time[i])\n        colisions.append(np_test_colisions[i])   ","15bc00ea":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12,16))\n\n#  \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0431\u043b\u0430\u0441\u0442\u0438 Figure:\nfig.suptitle('Decision tree',\n             y= 0.95,\n             fontsize = 20)\n\nplt.subplots_adjust(wspace=0.15, hspace=0.2)\n\nax_1 = fig.add_subplot(3, 2, 1)\nax_2 = fig.add_subplot(3, 2, 4)\nax_3 = fig.add_subplot(3, 2, 3)\nax_4 = fig.add_subplot(3, 2, 2)\n\nax_1.set_xlim(0, 3)\nax_1.set_ylim(0, 0.7)\nax_2.set_xlim(0, 3)\nax_2.set_ylim(0, 0.7)\nax_3.set_xlim(0, 3)\nax_3.set_ylim(0, 0.7)\nax_4.set_xlim(0, 3)\nax_4.set_ylim(0, 0.7)\n\nax_1.set(title = 'Model')\ndef get_grid():\n    x_min, x_max = 0, 4\n    y_min, y_max = 0, 1\n    return np.meshgrid(np.arange(x_min, x_max, 0.025),\n                         np.arange(y_min, y_max, 0.025))\nxx, yy = get_grid()\npredicted = decision_tree.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)\nax_1.pcolormesh(xx, yy, predicted, cmap=colors)\nax_1.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=test_labels['target'], s=15,\n             cmap=colors, edgecolors='black', linewidth=1.5)\nax_1.set_ylabel('colisions, 10^2')\nax_1.set_xlabel('time, 10^(-5) c')\n\n\nax_2.scatter(new_df_0['time, 10^(-5) c'], new_df_0['colisions, 10^2'], c='red',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Water')\nax_2.scatter(new_df_1['time, 10^(-5) c'], new_df_1['colisions, 10^2'], c='green',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Plexiglass')\nax_2.scatter(new_df_2['time, 10^(-5) c'], new_df_2['colisions, 10^2'], c='blue',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Water')\nax_2.set_ylabel('colisions, 10^2')\nax_2.set_xlabel('time, 10^(-5) c')\nax_2.set_title('test data')\nax_2.set_xlim(left = 0)\nax_2.legend()\n\nax_3.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=model_predictions, cmap=colors, s = 15\n            , edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_3.set_ylabel('colisions, 10^2')\nax_3.set_xlabel('time, 10^(-5) c')\nax_3.set_title('Predictions')\nax_3.set_xlim(left = 0)\n\nax_4.pcolormesh(xx, yy, predicted, cmap=colors)\nax_4.scatter(time, colisions, c='yellow',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_4.set_ylabel('colisions, 10^2')\nax_4.set_xlabel('time, 10^(-5) c')\nax_4.set_title('Errors')\nax_4.set_xlim(left = 0)\nax_4.set_xlim(right = 3)\nax_4.set_ylim(bottom = 0)\nax_4.set_ylim(top = 0.7)\nplt.show()\n\nprint(metrics.classification_report(test_labels, model_predictions))","0347712d":"display(train_data.head(2))\ndisplay(test_data.head(2))\ndisplay(train_labels.head(2))\ndisplay(test_labels.head(2))","fdc104a2":"test_data.drop(['target'], axis='columns', inplace=True)\ndisplay(train_data.head(2))\ndisplay(test_data.head(2))\ndisplay(train_labels.head(2))\ndisplay(test_labels.head(2))","6c690e0b":"from sklearn.neighbors import KNeighborsClassifier\nneigh = KNeighborsClassifier(n_neighbors=15)\nneigh.fit(train_data, train_labels)","6921172e":"model_predictions_knn = neigh.predict(test_data)\nprint(metrics.accuracy_score(test_labels, model_predictions_knn))\nprint(metrics.classification_report(test_labels, model_predictions_knn))","98bea233":"error = []\ntime = []\ncolisions = []\n\n\nfor i in range(len(np_test_labels)):\n    if np_test_labels[i] == model_predictions_knn[i]:\n        error.append(0)\n    else:\n        error.append(1)\n        \nfor i in range(len(error)):\n    if error[i] == 1:\n        time.append(np_test_time[i])\n        colisions.append(np_test_colisions[i]) ","039be433":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12,16))\n\n#  \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u043e\u0431\u043b\u0430\u0441\u0442\u0438 Figure:\nfig.suptitle('knn',\n             y= 0.95,\n             fontsize = 20)\n\nplt.subplots_adjust(wspace=0.15, hspace=0.2)\n\nax_1 = fig.add_subplot(3, 2, 1)\nax_2 = fig.add_subplot(3, 2, 4)\nax_3 = fig.add_subplot(3, 2, 3)\nax_4 = fig.add_subplot(3, 2, 2)\n\nax_1.set_xlim(0, 3)\nax_1.set_ylim(0, 0.7)\nax_2.set_xlim(0, 3)\nax_2.set_ylim(0, 0.7)\nax_3.set_xlim(0, 3)\nax_3.set_ylim(0, 0.7)\nax_4.set_xlim(0, 3)\nax_4.set_ylim(0, 0.7)\n\nax_1.set(title = 'Model')\ndef get_grid():\n    x_min, x_max = 0, 4\n    y_min, y_max = 0, 1\n    return np.meshgrid(np.arange(x_min, x_max, 0.025),\n                         np.arange(y_min, y_max, 0.025))\nxx, yy = get_grid()\npredicted = neigh.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)\nax_1.pcolormesh(xx, yy, predicted, cmap=colors)\nax_1.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=test_labels['target'], s=15,\n             cmap=colors, edgecolors='black', linewidth=1.5)\nax_1.set_ylabel('colisions, 10^2')\nax_1.set_xlabel('time, 10^(-5) c')\n\n\nax_2.scatter(new_df_0['time, 10^(-5) c'], new_df_0['colisions, 10^2'], c='red',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Water')\nax_2.scatter(new_df_1['time, 10^(-5) c'], new_df_1['colisions, 10^2'], c='green',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Plexiglass')\nax_2.scatter(new_df_2['time, 10^(-5) c'], new_df_2['colisions, 10^2'], c='blue',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Water')\nax_2.set_ylabel('colisions, 10^2')\nax_2.set_xlabel('time, 10^(-5) c')\nax_2.set_title('Test data')\nax_2.set_xlim(left = 0)\nax_2.legend()\n\nax_3.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=model_predictions_knn, cmap=colors, s = 15\n            , edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_3.set_title('Predictions')\nax_3.set_xlim(left = 0)\nax_3.set_ylabel('colisions, 10^2')\nax_3.set_xlabel('time, 10^(-5) c')\n\nax_4.pcolormesh(xx, yy, predicted, cmap=colors)\nax_4.scatter(time, colisions, c='yellow',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_4.set_title('Errors')\nax_4.set_xlim(left = 0)\nax_4.set_xlim(right = 3)\nax_4.set_ylim(bottom = 0)\nax_4.set_ylim(top = 0.7)\nax_4.set_ylabel('colisions, 10^2')\nax_4.set_xlabel('time, 10^(-5) c')\n\nplt.show()\n\nprint(metrics.classification_report(test_labels, model_predictions_knn))","5266df71":"model_SGD = linear_model.SGDClassifier(alpha=0.0003, random_state = 1)\nmodel_SGD.fit(train_data, train_labels)\nmodel_predictions_SGD = model_SGD.predict(test_data)\nprint(\"accurancy = \", metrics.accuracy_score(test_labels, model_predictions_SGD))\nprint(metrics.classification_report(test_labels, model_predictions_SGD))","1256f36d":"error = []\ntime = []\ncolisions = []\n\n\nfor i in range(len(np_test_labels)):\n    if np_test_labels[i] == model_predictions_SGD[i]:\n        error.append(0)\n    else:\n        error.append(1)\n        \nfor i in range(len(error)):\n    if error[i] == 1:\n        time.append(np_test_time[i])\n        colisions.append(np_test_colisions[i]) ","373502f5":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(12,16))\n\nfig.suptitle('SGD',\n             y= 0.95,\n             fontsize = 20)\n\nplt.subplots_adjust(wspace=0.15, hspace=0.2)\n\nax_1 = fig.add_subplot(3, 2, 1)\nax_2 = fig.add_subplot(3, 2, 4)\nax_3 = fig.add_subplot(3, 2, 3)\nax_4 = fig.add_subplot(3, 2, 2)\n\nax_1.set_xlim(0, 3)\nax_1.set_ylim(0, 0.7)\nax_2.set_xlim(0, 3)\nax_2.set_ylim(0, 0.7)\nax_3.set_xlim(0, 3)\nax_3.set_ylim(0, 0.7)\nax_4.set_xlim(0, 3)\nax_4.set_ylim(0, 0.7)\n\nax_1.set(title = 'Model')\ndef get_grid():\n    x_min, x_max = 0, 4\n    y_min, y_max = 0, 1\n    return np.meshgrid(np.arange(x_min, x_max, 0.02),\n                         np.arange(y_min, y_max, 0.02))\nxx, yy = get_grid()\npredicted = model_SGD.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)\nax_1.pcolormesh(xx, yy, predicted, cmap=colors)\nax_1.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=test_labels['target'], s=15,\n             cmap=colors, edgecolors='black', linewidth=1.5)\nax_1.set_ylabel('colisions, 10^2')\nax_1.set_xlabel('time, 10^(-5) c')\n\nax_2.scatter(new_df_0['time, 10^(-5) c'], new_df_0['colisions, 10^2'], c='red',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Water')\nax_2.scatter(new_df_1['time, 10^(-5) c'], new_df_1['colisions, 10^2'], c='green',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Plexiglass')\nax_2.scatter(new_df_2['time, 10^(-5) c'], new_df_2['colisions, 10^2'], c='blue',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5, label = 'Heavy Water')\nax_2.set_ylabel('colisions, 10^2')\nax_2.set_xlabel('time, 10^(-5) c')\nax_2.set_title('test data')\nax_2.set_xlim(left = 0)\nax_2.legend()\n\nax_3.scatter(test_data['time, 10^(-5) c'], test_data['colisions, 10^2'], c=model_predictions_SGD, cmap=colors, s = 15\n            , edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_3.set_ylabel('colisions, 10^2')\nax_3.set_xlabel('time, 10^(-5) c')\nax_3.set_title('Predictions')\nax_3.set_xlim(left = 0)\n\nax_4.pcolormesh(xx, yy, predicted, cmap=colors)\nax_4.scatter(time, colisions, c='yellow',\n               s = 15, edgecolors = 'black', linewidths = 1, alpha = 0.5)\nax_4.set_ylabel('colisions, 10^2')\nax_4.set_xlabel('time, 10^(-5) c')\nax_4.set_title('Errors')\nax_4.set_xlim(left = 0)\nax_4.set_xlim(right = 3)\nax_4.set_ylim(bottom = 0)\nax_4.set_ylim(top = 0.7)\n\n\nplt.show()\n\nprint(metrics.classification_report(test_labels, model_predictions_SGD))","2be4af39":"### visualization of predictions ###","e638a349":"## Decision tree ##","583a8af0":"# Classification #","303b3c06":"### knn ###","316d3757":"# visualization of data  #","1da3ee15":"### SGD ###"}}