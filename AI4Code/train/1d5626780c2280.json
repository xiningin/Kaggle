{"cell_type":{"d295a85b":"code","ea91dd57":"code","32c0b736":"code","ad627176":"code","524bc504":"code","7c3e7a50":"code","c1226e7e":"code","5cc1b34e":"code","1c640ccd":"code","185f480e":"code","479ee654":"code","924e9621":"code","8c87bc81":"code","f29a6d66":"code","4fdae55a":"code","9ecde357":"code","60ce901d":"code","3ce642c0":"code","c76c7356":"code","5e728ea7":"code","9fd0eda8":"code","e8fcad2c":"code","35c1a40f":"code","4df7cddf":"code","797e523d":"code","1224836d":"code","7c98ff1d":"code","5ec52b58":"code","6a12f237":"code","fd2d17d4":"code","36bc8484":"code","cc71ad71":"code","6d6f3100":"code","f845df4b":"code","610816aa":"code","d63a30bc":"code","a6401250":"code","16243e79":"code","ac606942":"code","411f4b34":"code","6974c509":"markdown","bf64794e":"markdown","de0f8cf6":"markdown","4c1e447a":"markdown","f88fef4a":"markdown","376cac8b":"markdown","8b7f2c08":"markdown"},"source":{"d295a85b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport time\nfrom sklearn.metrics import accuracy_score\nfrom kaggle.competitions import twosigmanews\n\n\n#***********************************import keras\nfrom keras import initializers\nfrom keras import regularizers\nfrom keras import constraints\nfrom keras.utils import conv_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.engine.topology import get_source_inputs\nfrom keras.engine import InputSpec\nfrom keras import backend as K\nfrom keras.layers import LeakyReLU\nfrom keras.layers import ZeroPadding2D\nfrom keras.losses import binary_crossentropy\nimport keras.callbacks as callbacks\nfrom keras.callbacks import Callback\nfrom keras.applications.xception import Xception\nfrom keras.layers import multiply\n\nimport keras\nfrom keras import optimizers\nfrom keras.legacy import interfaces\nfrom keras.utils.generic_utils import get_custom_objects\n\nfrom keras.engine.topology import Input\nfrom keras.engine.training import Model\nfrom keras.layers.convolutional import Conv2D, UpSampling2D, Conv2DTranspose\nfrom keras.layers.core import Activation, SpatialDropout2D\nfrom keras.layers.merge import concatenate\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers import Input,Dropout,BatchNormalization,Activation,Add\nfrom keras.regularizers import l2\nfrom keras.layers.core import Dense, Lambda\nfrom keras.layers.merge import concatenate, add\nfrom keras.layers import GlobalAveragePooling2D, Reshape, Dense, multiply, Permute\nfrom keras.optimizers import SGD","ea91dd57":"env = twosigmanews.make_env()\n(market_train, _) = env.get_training_data()","32c0b736":"cat_cols = ['assetCode']\nnum_cols = ['volume', 'close', 'open', 'returnsClosePrevRaw1', 'returnsOpenPrevRaw1', 'returnsClosePrevMktres1',\n                    'returnsOpenPrevMktres1', 'returnsClosePrevRaw10', 'returnsOpenPrevRaw10', 'returnsClosePrevMktres10',\n                    'returnsOpenPrevMktres10']\n\n","ad627176":"from sklearn.model_selection import train_test_split\n\ntrain_indices, val_indices = train_test_split(market_train.index.values,test_size=0.25, random_state=23)\n","524bc504":"def encode(encoder, x):\n    len_encoder = len(encoder)\n    try:\n        id = encoder[x]\n    except KeyError:\n        id = len_encoder\n    return id\n\nencoders = [{} for cat in cat_cols]\n\n\nfor i, cat in enumerate(cat_cols):\n    print('encoding %s ...' % cat, end=' ')\n    encoders[i] = {l: id for id, l in enumerate(market_train.loc[:, cat].astype(str).unique())}\n    market_train[cat] = market_train[cat].astype(str).apply(lambda x: encode(encoders[i], x))\n    print('Done')\n\nembed_sizes = [len(encoder) + 1 for encoder in encoders] #+1 for possible unknown assets\n","7c3e7a50":"#market_train['timess'] =market_train.time.dt.strftime(\"%Y%m%d\").astype(int)\n#market_train = market_train.loc[market_train['timess'] > 20110000]","c1226e7e":"market_train.head()\nmarket_train.shape[0]","5cc1b34e":"types = market_train['assetCode'].unique()\nd = {type: market_train[market_train['assetCode'] == type] for type in types} #creating dataframes for each unique assetCode","1c640ccd":"market_train.tail()","185f480e":"a=0\nfor type in types:\n    a=a+d[type].shape[0]\na    ","479ee654":"market_train.shape[0]","924e9621":"d[0]","8c87bc81":"#Setting quantiles and outlier borders\n\nlow = .25\nhigh = .75\n\nbounds = {}\nfor type in types:\n    filt_df = d[type].loc[:, d[type].columns != 'assetCode']# Remove 'Type' Column\n    filt_df = filt_df.loc[:, filt_df.columns != 'universe']\n    quant_df = filt_df.quantile([low, high])\n    IQR = quant_df.iloc[1,:]-  quant_df.iloc[0,:]\n    quant_df.iloc[0,:] = quant_df.iloc[0,:] - 1.5*IQR\n    quant_df.iloc[1,:] = quant_df.iloc[1,:] + 1.5*IQR\n    bounds[type] = quant_df\n    bounds[type] = bounds[type].reset_index()\n    bounds[type] = bounds[type].drop(\"index\", axis=1)\nbounds[1]","f29a6d66":"bounds[1].loc[1,\"volume\"]","4fdae55a":"market_train.head()","9ecde357":"#data_add=market_train.iloc[\"time\"]\n#data_add.head() \n#data_add=data_add.reset_index()\n\n#data_add=data_add.rename(columns={'index':'level_1'})\n#data_add","60ce901d":"market_train1=pd.DataFrame()\nfor type in types:\n    for column in num_cols:\n        d[type] = d[type].loc[d[type][column]>=bounds[type].loc[0,column]]\n        d[type] = d[type].loc[d[type][column]<=bounds[type].loc[1,column]]\n    market_train1=pd.concat([market_train1,d[type]], ignore_index=True)\n","3ce642c0":"orig_len=market_train.shape[0]\nnew_len = market_train1.shape[0]\nrmv_len1 = np.abs(orig_len-new_len)\nprint('There were %i lines removed' %rmv_len1)","c76c7356":"market_train1['close_open_ratio'] = np.abs(market_train1['close']\/market_train1['open'])\nmarket_train1 = market_train1.loc[market_train1['close_open_ratio'] < 1.4]\nmarket_train1 = market_train1.loc[market_train1['close_open_ratio'] > 0.4]\n#market_train1 = market_train1.drop(columns=['close_open_ratio'])\n\nnewer_len=market_train1.shape[0]\nrmv_len2 = np.abs(new_len-newer_len)\nprint('There were %i lines removed additionally' %rmv_len2)","5e728ea7":"market_train.head()","9fd0eda8":"market_train1=market_train1.dropna()\nrmv_len3 = np.abs(newer_len-market_train1.shape[0])\nprint('There were %i lines removed additionally' %rmv_len3)\ndeleted_rows=rmv_len1+rmv_len2+rmv_len3\nprint('There were %i lines in total removed' %deleted_rows)","e8fcad2c":"\nmarket_train1['average'] = (market_train1['close'] + market_train1['open'])\/2\nmarket_train1['pricevolume'] = market_train1['volume'] * market_train1['close']","35c1a40f":"market_train1.shape[0]","4df7cddf":"num_cols = ['volume', 'close', 'open', 'returnsClosePrevRaw1', 'returnsOpenPrevRaw1', 'returnsClosePrevMktres1',\n                    'returnsOpenPrevMktres1', 'returnsClosePrevRaw10', 'returnsOpenPrevRaw10', 'returnsClosePrevMktres10',\n                    'returnsOpenPrevMktres10','close_open_ratio','average','pricevolume']","797e523d":"market_train=market_train1.copy()","1224836d":"train_indices, val_indices = train_test_split(market_train.index.values,test_size=0.25, random_state=23)","7c98ff1d":"from sklearn.preprocessing import StandardScaler\n \nmarket_train[num_cols] = market_train[num_cols].fillna(0)\nprint('scaling numerical columns')\n\nscaler = StandardScaler()\n\n#col_mean = market_train[col].mean()\n#market_train[col].fillna(col_mean, inplace=True)\nscaler = StandardScaler()\nmarket_train[num_cols] = scaler.fit_transform(market_train[num_cols])\n","5ec52b58":"market_train\n","6a12f237":"from keras.models import Model\nfrom keras.layers import Input, Dense, Embedding, Concatenate, Flatten, BatchNormalization\nfrom keras.losses import binary_crossentropy, mse\n\ncategorical_inputs = []\nfor cat in cat_cols:\n    categorical_inputs.append(Input(shape=[1], name=cat))\n\ncategorical_embeddings = []\nfor i, cat in enumerate(cat_cols):\n    categorical_embeddings.append(Embedding(embed_sizes[i], 10)(categorical_inputs[i]))\n\n#categorical_logits = Concatenate()([Flatten()(cat_emb) for cat_emb in categorical_embeddings])\ncategorical_logits = Flatten()(categorical_embeddings[0])\n#categorical_logits = Dense(32,activation='relu')(categorical_logits)\n#categorical_logits =Dropout(0.5)(categorical_logits)\n#categorical_logits =BatchNormalization()(categorical_logits)\ncategorical_logits = Dense(32,activation='relu')(categorical_logits)\n\na=len(num_cols)\nnumerical_inputs = Input(shape=(a,), name='num')\nnumerical_logits = numerical_inputs\nnumerical_logits = BatchNormalization()(numerical_logits)\n\nnumerical_logits = Dense(128,activation='relu')(numerical_logits)\n#numerical_logits=Dropout(0.3)(numerical_logits)\n#numerical_logits = BatchNormalization()(numerical_logits)\n#numerical_logits = Dense(128,activation='relu')(numerical_logits)\nnumerical_logits = Dense(64,activation='relu')(numerical_logits)\n\nlogits = Concatenate()([numerical_logits,categorical_logits])\nlogits = Dense(64,activation='relu')(logits)\nout = Dense(1, activation='sigmoid')(logits)\n\nmodel = Model(inputs = categorical_inputs + [numerical_inputs], outputs=out)\nmodel.compile(optimizer='adam',loss=binary_crossentropy)","fd2d17d4":"# Lets print our model\nmodel.summary()","36bc8484":"def get_input(market_train, indices):\n    X_num = market_train.loc[indices, num_cols].values\n    X = {'num':X_num}\n    for cat in cat_cols:\n        X[cat] = market_train.loc[indices, cat_cols].values\n    y = (market_train.loc[indices,'returnsOpenNextMktres10']>=0).values\n    r = market_train.loc[indices,'returnsOpenNextMktres10'].values\n    u = market_train.loc[indices, 'universe']\n    d = market_train.loc[indices, 'time'].dt.date\n    return X,y,r,u,d\n\n# r, u and d are used to calculate the scoring metric\nX_train,y_train,r_train,u_train,d_train = get_input(market_train, train_indices)\nX_valid,y_valid,r_valid,u_valid,d_valid = get_input(market_train, val_indices)","cc71ad71":"market_train.head()\n","6d6f3100":"class SnapshotCallbackBuilder:\n    def __init__(self, nb_epochs, nb_snapshots, init_lr=0.1):\n        self.T = nb_epochs\n        self.M = nb_snapshots\n        self.alpha_zero = init_lr\n\n    def get_callbacks(self, model_prefix='Model'):\n\n        callback_list = [\n            callbacks.ModelCheckpoint(\"model.hdf5\",monitor='val_my_iou_metric', \n                                   mode = 'max', save_best_only=True, verbose=1),\n            swa,\n            callbacks.LearningRateScheduler(schedule=self._cosine_anneal_schedule)\n        ]\n\n        return callback_list\n\n    def _cosine_anneal_schedule(self, t):\n        cos_inner = np.pi * (t % (self.T \/\/ self.M))  # t - 1 is used when t has 1-based indexing.\n        cos_inner \/= self.T \/\/ self.M\n        cos_out = np.cos(cos_inner) + 1\n        return float(self.alpha_zero \/ 2 * cos_out)","f845df4b":"from keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau\n\n\"\"\"\nepochs = 10\nsnapshot = SnapshotCallbackBuilder(nb_epochs=epochs,nb_snapshots=1,init_lr=1e-3)\nbatch_size = 32\nswa = SWA('model_swa.hdf5',6)\nhistory = model.fit(X_train,y_train.astype(int),\n                    validation_data=(X_valid,y_valid.astype(int)),\n                    epochs=epochs,\n                    #batch_size=batch_size,\n                    callbacks=snapshot.get_callbacks(),shuffle=True,verbose=2)\n                    \nearly_stop = EarlyStopping( mode = 'max',patience=15, verbose=1)\ncheck_point = ModelCheckpoint('model.hdf5', mode = 'max', save_best_only=True, verbose=1)\nreduce_lr = ReduceLROnPlateau( mode = 'max',factor=0.5, patience=5, min_lr=0.0001, verbose=1)\n#check_point = ModelCheckpoint('model.hdf5',verbose=True, save_best_only=True)\n#early_stop = EarlyStopping(patience=5,verbose=True)\nmodel.fit(X_train,y_train.astype(int),\n                    validation_data=(X_valid,y_valid.astype(int)), \n                    epochs=15,\n                    callbacks=[check_point,reduce_lr,early_stop], \n                    verbose=2)\n\nmodel.fit(X_train,y_train.astype(int),\n          validation_data=(X_valid,y_valid.astype(int)),\n          epochs=10,\n          verbose=True,\n          callbacks=[early_stop,check_point]) \n\"\"\"\n\n\ncheck_point = ModelCheckpoint('model.hdf5',verbose=True, save_best_only=True)\nearly_stop = EarlyStopping(patience=5,verbose=True)\nmodel.fit(X_train,y_train.astype(int),\n          validation_data=(X_valid,y_valid.astype(int)),\n          epochs=5,\n          verbose=True,\n          callbacks=[early_stop,check_point]) ","610816aa":"\"\"\"\ntry:\n    print('using swa weight model')\n    model.load_weights('model_swa.hdf5')\nexcept:\n    model.load_weights('model.hdf5')\n\"\"\"","d63a30bc":"# distribution of confidence that will be used as submission\nmodel.load_weights('model.hdf5')\nconfidence_valid = model.predict(X_valid)[:,0]*2 -1\nprint(accuracy_score(confidence_valid>0,y_valid))\nplt.hist(confidence_valid, bins='auto')\nplt.title(\"predicted confidence\")\nplt.show()","a6401250":"# calculation of actual metric that is used to calculate final score\nr_valid = r_valid.clip(-1,1) # get rid of outliers. Where do they come from??\nx_t_i = confidence_valid * r_valid * u_valid\ndata = {'day' : d_valid, 'x_t_i' : x_t_i}\ndf = pd.DataFrame(data)\nx_t = df.groupby('day').sum().values.flatten()\nmean = np.mean(x_t)\nstd = np.std(x_t)\nscore_valid = mean \/ std\nprint(score_valid)","16243e79":"days = env.get_prediction_days()","ac606942":"n_days = 0\nprep_time = 0\nprediction_time = 0\npackaging_time = 0\npredicted_confidences = np.array([])\nfor (market_obs_df, news_obs_df, predictions_template_df) in days:\n    n_days +=1\n    print(n_days,end=' ')\n    \n    t = time.time()\n\n    market_obs_df['assetCode_encoded'] = market_obs_df[cat].astype(str).apply(lambda x: encode(encoders[i], x))\n    market_obs_df['close_open_ratio'] = np.abs(market_obs_df['close']\/market_obs_df['open'])\n    market_obs_df['average'] = (market_obs_df['close'] + market_obs_df['open'])\/2\n    market_obs_df['pricevolume'] = market_obs_df['volume'] * market_obs_df['close']\n    market_obs_df[num_cols] = market_obs_df[num_cols].fillna(0)\n    market_obs_df[num_cols] = scaler.transform(market_obs_df[num_cols])\n    X_num_test = market_obs_df[num_cols].values\n    X_test = {'num':X_num_test}\n    X_test['assetCode'] = market_obs_df['assetCode_encoded'].values\n    \n    prep_time += time.time() - t\n    \n    t = time.time()\n    market_prediction = model.predict(X_test)[:,0]*2 -1\n    predicted_confidences = np.concatenate((predicted_confidences, market_prediction))\n    prediction_time += time.time() -t\n    \n    t = time.time()\n    preds = pd.DataFrame({'assetCode':market_obs_df['assetCode'],'confidence':market_prediction})\n    # insert predictions to template\n    predictions_template_df = predictions_template_df.merge(preds,how='left').drop('confidenceValue',axis=1).fillna(0).rename(columns={'confidence':'confidenceValue'})\n    env.predict(predictions_template_df)\n    packaging_time += time.time() - t\n\nenv.write_submission_file()\ntotal = prep_time + prediction_time + packaging_time\nprint(f'Preparing Data: {prep_time:.2f}s')\nprint(f'Making Predictions: {prediction_time:.2f}s')\nprint(f'Packing: {packaging_time:.2f}s')\nprint(f'Total: {total:.2f}s')","411f4b34":"# distribution of confidence as a sanity check: they should be distributed as above\nplt.hist(predicted_confidences, bins='auto')\nplt.title(\"predicted confidence\")\nplt.show()","6974c509":"# Prediction","bf64794e":"Todo: add explanaition of architecture","de0f8cf6":"# Train NN model","4c1e447a":"# Handling categorical variables","f88fef4a":"# Define NN Architecture","376cac8b":"# Handling numerical variables","8b7f2c08":"# Evaluation of Validation Set"}}