{"cell_type":{"b087f49b":"code","a1f1a80f":"code","1364693d":"code","c7acd52a":"code","b1699371":"code","37fbf311":"code","1b2d1fc4":"code","4a37b038":"code","a1de726d":"code","906da01d":"code","f00c51bf":"code","5de01ed9":"code","319d473c":"code","71e15093":"code","b09fa5fc":"code","2e6f0fb2":"code","b8236251":"code","53a78963":"code","516fd655":"code","71c3c5ce":"code","81616dbe":"code","bf56d75f":"code","a1223b47":"code","e203b51b":"code","0cbcff06":"code","9f3a564f":"code","d07d8854":"code","27cb278e":"code","17371083":"code","30f5e779":"code","5b10d622":"code","81ef6e36":"code","6a9729a1":"code","4f4edbde":"code","bf3f3929":"code","ab985b8b":"code","57729886":"code","289f63a8":"code","d16f85c0":"code","e17a496b":"code","f6b1aa63":"code","bb2daaf7":"code","91491c6b":"code","4623ac16":"code","e7a1fdce":"code","6af362f6":"code","888d1b0d":"code","232eeeb7":"code","9762a34b":"code","795056fc":"code","e622d42c":"code","f0ff48c8":"code","1adcc2f7":"code","65f4d337":"code","24ca26e9":"code","7f285a50":"code","022faa91":"code","b0a0277e":"code","fe543249":"code","084bdf9c":"code","d708ccbc":"code","6560864e":"code","132d2d2f":"code","22a82d4a":"code","dfc1d96c":"code","5f97d18f":"code","f09c718f":"code","f389f125":"code","9a8e69ac":"code","d2577ebd":"code","508658db":"code","83392690":"code","64915fd7":"markdown","dc1a1560":"markdown","bffd208b":"markdown","792a2aaa":"markdown","5b265d5f":"markdown","464dc072":"markdown","56806161":"markdown","b5a8716f":"markdown","19ead8b1":"markdown","54e8de5b":"markdown","0dc05d2d":"markdown","21647810":"markdown","c9c1347b":"markdown","4748a3cf":"markdown","e7772c62":"markdown","acbfa6c6":"markdown","78fcdb20":"markdown","de860f78":"markdown"},"source":{"b087f49b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport re # regex\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt # charting\n\nfrom wordcloud import WordCloud # word cloud\nfrom sklearn.feature_extraction.text import CountVectorizer # convert text to token counts\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a1f1a80f":"# Read and print first 5 rows of data\ndf = pd.read_csv('..\/input\/startup_funding.csv')\ndf.head()","1364693d":"df.dtypes","c7acd52a":"# Set SNo as Index\ndf = df.set_index(df['SNo'])\ndf = df.drop('SNo', axis=1) # Drop SNo column\ndf.head()","b1699371":"# Convert Date to datetime format\n\n# Running \n# df['Date'] = pd.to_datetime(df['Date'], infer_datetime_format=True)\n# gives ValueError: ('Unknown string format:', '12\/05.2015')\n\n# Look at the values with '.'\ndf['Date'].loc[df['Date'].str.contains('\\.')]","37fbf311":"# Replace '.' with '\/'\ndf['Date'] = df['Date'].str.replace('\\.', '\/')\n\n# Check if replaced, should return nothing\ndf['Date'].loc[df['Date'].str.contains('\\.')]","1b2d1fc4":"# Running\n# df['Date'] = pd.to_datetime(df['Date'], infer_datetime_format=True)\n# again gives ValueError: ('Unknown string format:', '22\/01\/\/2015')\n\n# Look at the values with '.'\ndf['Date'].loc[df['Date'].str.contains('\/\/.')]","4a37b038":"# Replace '\/\/' with '\/'\ndf['Date'] = df['Date'].str.replace('\/\/', '\/')\n\n# Check if replaced, should return nothing\ndf['Date'].loc[df['Date'].str.contains('\/\/')]","a1de726d":"# Convert date\ndf['Date'] = pd.to_datetime(df['Date'], infer_datetime_format=True)\ndf['Date'].dtype","906da01d":"# Convert AmountInUSD\n\n# Remove commas\ndf['AmountInUSD'] = df['AmountInUSD'].str.replace(',', '')\n\ndf['AmountInUSD'] = df['AmountInUSD'].astype(float)\ndf['AmountInUSD'].dtype","f00c51bf":"# Double check all data types\ndf.dtypes","5de01ed9":"df.info()","319d473c":"df.describe()","71e15093":"df.shape","b09fa5fc":"print('The funding dates are between', df['Date'].min(), 'and', df['Date'].max())\n\ndf['Date'].value_counts().plot.line(color='navy')\nplt.title('Number of Funding Across Time')\nplt.xlabel('Date')\nplt.ylabel('Time')\nplt.show()","2e6f0fb2":"df['Date'].value_counts().sort_index().cumsum().plot.line(color='navy')\nplt.title('Cumulative Funding Across Time')\nplt.xlabel('Date')\nplt.ylabel('Cumulative Funding')\nplt.show()","b8236251":"print('Top number of fundings')\ndf['StartupName'].value_counts().head()","53a78963":"print('On average, each startup got funded', df['StartupName'].value_counts().mean(), 'times')","516fd655":"print('Number of unique Industry Verticals:', df['IndustryVertical'].nunique())","71c3c5ce":"df['IndustryVertical'].value_counts()[:20]","81616dbe":"df['IndustryVertical'].value_counts()[:20].plot.bar(color='navy')\nplt.title('Top 20 Industry Verticals')\nplt.xlabel('Industry Vertical')\nplt.ylabel('Count')\nplt.show()","bf56d75f":"wordcloud = WordCloud(collocations=False) # Disable collocations (bigrams) of two words\nwordcloud.generate(df['IndustryVertical'].str.cat(sep=' '))\nplt.imshow(wordcloud) # 'Plot' wordcloud\nplt.axis('off') # Hide axes\nplt.title('Single Word Trends')\nplt.show()","a1223b47":"wordcloud = WordCloud()\nwordcloud.generate(df['IndustryVertical'].str.cat(sep=' '))\nplt.imshow(wordcloud) # 'Plot' wordcloud\nplt.axis('off') # Hide axes\nplt.title('Single and Double Words Trends')\nplt.show()","e203b51b":"print('Number of unique Sub Verticals:', df['SubVertical'].nunique())","0cbcff06":"df['SubVertical'].value_counts()[:20]","9f3a564f":"wordcloud = WordCloud(collocations=False) # Disable collocations (bigrams) of two words\nwordcloud.generate(df['SubVertical'].str.cat(sep=' '))\nplt.imshow(wordcloud) # 'Plot' wordcloud\nplt.axis('off') # Hide axes\nplt.title('Single Word Trends')\nplt.show()","d07d8854":"wordcloud = WordCloud()\nwordcloud.generate(df['SubVertical'].str.cat(sep=' '))\nplt.imshow(wordcloud) # 'Plot' wordcloud\nplt.axis('off') # Hide axes\nplt.title('Single and Double Words Trends')\nplt.show()","27cb278e":"df['CityLocation'].nunique()","17371083":"df['CityLocation'].value_counts().head(20)","30f5e779":"df['CityLocation'].dropna().loc[df['CityLocation'].dropna().str.contains('\/')][:5]","5b10d622":"# Separate locations\n# Drop nulls, split location and flatten 2D array to 1D array\ncity_locations = df['CityLocation'].dropna() \\\n                                   .map(lambda location: \n                                        [l.strip() for l in location.split('\/')]) \\\n                                   .sum()\npd.Series(city_locations).value_counts()[:20]","81ef6e36":"pd.Series(city_locations).value_counts()[:20].plot.bar(color='navy')\nplt.title('Top 20 Indian Startup Locations')\nplt.xlabel('Country')\nplt.ylabel('Count')\nplt.show()","6a9729a1":"df['InvestorsName'].unique()[:20]","4f4edbde":"# Separate investor names\n# Drop nulls, split location and flatten 2D array to 1D array\ninvestors_names = df['InvestorsName'].dropna() \\\n                                    .map(lambda investors: \n                                         [i.strip().title() for i in investors.split(',')]) \\\n                                    .sum()\n\n# Remove empty names\npd.Series(investors_names) \\\n    .replace('', np.nan) \\\n    .dropna() \\\n    .value_counts()[:20]","bf3f3929":"# Remove empty names and plot\npd.Series(investors_names) \\\n    .replace('', np.nan) \\\n    .dropna() \\\n    .value_counts()[:20] \\\n    .plot.bar(color='navy')\n\nplt.title('Top 20 Investors')\nplt.xlabel('Investor Name')\nplt.ylabel('Count')\nplt.show()","ab985b8b":"df['InvestmentType'].unique()","57729886":"# Remove spaces and make everything lower case\ndf['InvestmentType'] = df['InvestmentType'].str.replace(' ', '').str.lower()\n\ndf['InvestmentType'].unique()","289f63a8":"df['InvestmentType'].value_counts()","d16f85c0":"df['InvestmentType'].value_counts().plot.bar(color='navy')\nplt.title('Fundings by Investment Type')\nplt.xlabel('Investment Type')\nplt.ylabel('Count')\nplt.show()","e17a496b":"df['AmountInUSD'].describe()","f6b1aa63":"df['AmountInUSD'].plot.box(color='navy')\nplt.show()","bb2daaf7":"df['AmountInUSD'].plot.hist(color='navy')\nplt.show()","91491c6b":"print('Top Investments')\ndf.iloc[df['AmountInUSD'].nlargest(10).index]","4623ac16":"# Number of investors over time\ndf.groupby(pd.Grouper(key='Date', freq='Q'))['InvestorsName'] \\\n    .agg(lambda investors_series: investors_series.tolist()) \\\n    .apply(lambda investors_list: ','.join(filter(lambda investors: type(investors) is str, investors_list))) \\\n    .apply(lambda investors: len(set([investor.strip().title() for investor in investors.split(',')])))","e7a1fdce":"df.groupby(pd.Grouper(key='Date', freq='Q'))['InvestorsName'] \\\n    .agg(lambda investors_series: investors_series.tolist()) \\\n    .apply(lambda investors_list: ','.join(filter(lambda investors: type(investors) is str, investors_list))) \\\n    .apply(lambda investors: len(set([investor.strip().title() for investor in investors.split(',')]))) \\\n    .plot.line(color='navy')\nplt.title('Estimated Number of Distinct Investors over Time')\nplt.xlabel('Quarter')\nplt.ylabel('Distinct Number of Investors')\nplt.show()","6af362f6":"# Average funding per city\n\n# Vectorize CityLocation, as one startup can have zero to many of them\nvectorizer = CountVectorizer(tokenizer=(lambda locations: [location.strip() for location in locations.split('\/')]), lowercase=False)\n\nvectorized_df = pd.DataFrame(vectorizer.fit_transform(df['CityLocation'].replace(np.nan, 'Unknown')).toarray(), \n                             columns=vectorizer.get_feature_names())\n\nvectorized_df.head()","888d1b0d":"# Join and randomly check for accuracy\njoined_df = df[['CityLocation', 'AmountInUSD']].join(vectorized_df)\njoined_df['SumCityLocation'] = joined_df[vectorizer.get_feature_names()].sum(axis=1)\n\njoined_df[['CityLocation', 'SumCityLocation']].loc[joined_df['SumCityLocation'] > 1].sample(5)","232eeeb7":"average_funding_per_citylocation = \\\n    pd.Series([joined_df.loc[joined_df[citylocation] == 1]['AmountInUSD'].mean() for citylocation in vectorizer.get_feature_names()], \n              index=vectorizer.get_feature_names())\n\naverage_funding_per_citylocation.head()","9762a34b":"# Double check NaN values\njoined_df.loc[joined_df['Agra'] == 1]","795056fc":"plt.figure(figsize=(20, 7))\naverage_funding_per_citylocation.dropna() \\\n                                .sort_values(ascending=False) \\\n                                .plot.bar(color='navy')\nplt.title('Average Funding per City\/Location')\nplt.xlabel('City\/Location')\nplt.ylabel('Average Funding (10 million USD)')\nplt.show()","e622d42c":"# Average funding per industry\n\nprint('Data without SubVertical')\ndf.loc[df['SubVertical'].isna()]['Date'].describe()","f0ff48c8":"print('Data with SubVertical')\ndf.loc[df['SubVertical'].isna() == False]['Date'].describe()","1adcc2f7":"df.loc[df['SubVertical'].isna() == False]['IndustryVertical'].value_counts()","65f4d337":"# Standardise industry verticals\nindustry_verticals = {\n    'ECommerce': 'eCommerce',\n    'Ecommerce': 'eCommerce',\n    'Ecommerce': 'eCommerce',\n    'ecommerce': 'eCommerce',\n    'Food & Beverages': 'Food & Beverage',\n    'healthcare': 'Healthcare',\n    'Consumer Interne': 'Consumer Internet'\n}\n\ndf.loc[df['SubVertical'].isna() == False]['IndustryVertical'].map(lambda iv: industry_verticals[iv] if iv in industry_verticals else iv).value_counts()","24ca26e9":"df.loc[df['SubVertical'].isna() == False] \\\n    .groupby(df['IndustryVertical'].map(lambda iv: \n                                        industry_verticals[iv] if iv in industry_verticals else iv))['AmountInUSD'] \\\n    .mean() \\\n    .sort_values(ascending=False) \\\n    .plot.bar(color='navy')\nplt.title('Average Funding per Industry Vertical (from 2016 onward)')\nplt.xlabel('Industry Vertical')\nplt.ylabel('Average Funding (10 million USD)')\nplt.show()","7f285a50":"# Number of investments per investor\n\n# Vectorize InvestorsName, as one startup can have zero to many of them\nvectorizer = CountVectorizer(tokenizer=(lambda investors: [investor.strip() for investor in re.split('\\.|,|&', investors)]), \n                             lowercase=False)\n\n# Replace null values with 'Others', remove remarks enclosed in brackets (parentheses) and titlecase each investor\nvectorized_df = pd.DataFrame(vectorizer.fit_transform(df['InvestorsName'].replace(np.nan, 'Undisclosed Investors')\n                                                                         .map(lambda investor: \n                                                                              investor.split('(')[0]\n                                                                              .strip().title()))\n                                       .toarray(), \n                             index=df.index,\n                             columns=vectorizer.get_feature_names())\n\nvectorized_df.head()","022faa91":"joined_df = df.join(vectorized_df)\njoined_df.head()","b0a0277e":"# Join and randomly check for accuracy\njoined_df.loc[joined_df['Sequoia Capital'] == 1]['InvestorsName'].sample(5).tolist()","fe543249":"num_investments = list()\n\nfor investor in vectorizer.get_feature_names():\n    num_investments.append(joined_df.loc[joined_df[investor] == 1]['AmountInUSD'].count())\n\nnum_investments = pd.Series(num_investments, index=vectorizer.get_feature_names())\nnum_investments = num_investments.drop('') \\\n                                 .loc[num_investments.isna() == False]\nnum_investments.head()","084bdf9c":"num_investments.sort_values(ascending=False)[:10]","d708ccbc":"plt.figure(figsize=(20, 5))\nnum_investments.sort_values(ascending=False)[:50].plot.bar(color='navy')\nplt.title('Top 50 Investments per Investor')\nplt.xlabel('Investor')\nplt.ylabel('Number of Investments Made')\nplt.show()","6560864e":"investments_by_startup = df.groupby('StartupName')['AmountInUSD'].sum()\ninvestments_by_startup = investments_by_startup.loc[investments_by_startup > 0]\ninvestments_by_startup.describe()","132d2d2f":"plt.figure(figsize=(20, 5))\ninvestments_by_startup.plot.hist(bins=20, color='navy')\nplt.title('Distribution of Total Investments per Startup')\nplt.show()","22a82d4a":"std_dev = investments_by_startup.std()\nmean = investments_by_startup.mean()\n\nplt.figure(figsize=(20, 5))\ninvestments_by_startup.loc[investments_by_startup <= 1000000] \\\n                      .plot.hist(bins=100, color='navy')\nplt.title('Distribution of Total Investments per Startup (\u22641 million USD)')\nplt.show()","dfc1d96c":"std_dev = investments_by_startup.std()\nmean = investments_by_startup.mean()\n\nplt.figure(figsize=(20, 5))\ninvestments_by_startup.loc[investments_by_startup >= 1000000] \\\n                      .plot.hist(bins=100, color='navy')\nplt.title('Distribution of Total Investments per Startup (\u22651 million USD)')\nplt.show()","5f97d18f":"# Average days between investments per investor\n\n# Vectorize InvestorsName, as one startup can have zero to many of them\nvectorizer = CountVectorizer(tokenizer=(lambda investors: [investor.strip() for investor in re.split('\\.|,|&', investors)]), \n                             lowercase=False)\n\n# Replace null values with 'Others', remove remarks enclosed in brackets (parentheses) and titlecase each investor\nvectorized_df = pd.DataFrame(vectorizer.fit_transform(df['InvestorsName'].replace(np.nan, 'Undisclosed Investors')\n                                                                         .map(lambda investor: \n                                                                              investor.split('(')[0]\n                                                                              .strip().title()))\n                                       .toarray(), \n                             index=df.index,\n                             columns=vectorizer.get_feature_names())\n\nvectorized_df.head()","f09c718f":"joined_df = df.join(vectorized_df)\njoined_df.head()","f389f125":"# Join and randomly check for accuracy\njoined_df.loc[joined_df['Sequoia Capital'] == 1]['InvestorsName'].sample(5).tolist()","9a8e69ac":"# Sample investors who made >=30 investments\nsampled_investors = [investor for investor in vectorizer.get_feature_names() if joined_df[investor].sum() >= 30]\nsampled_investors[:5]","d2577ebd":"average_days = list()\n\nfor investor in sampled_investors:\n    date_series = joined_df.loc[joined_df[investor] == 1]['Date'].sort_values()\n    average = (date_series - date_series.shift(1)).mean()\n    average_days.append(average)\n    \nactive_investors_series = pd.Series(average_days, index=sampled_investors)\nactive_investors_series.head()","508658db":"active_investors_series.sort_values()","83392690":"active_investors_series.sort_values().plot.bar(color='navy')\nplt.show()","64915fd7":"## Industry Vertical\n\n- 744 industry verticals\n- Technology based solutions are the majority\n- Words like \"consumer\", \"internet\", \"technology\" and \"ecommerce\" are trending","dc1a1560":"## Funding by Date\n\n- About 2 years 11 months worth of data\n- Pretty consistent pattern (seasonality) - likely due to weekdays\/weekends\n- Overall, slightly lesser investments per day in 2017 as compared to 2015 and 2016\n- Number of fundings are plateauing","bffd208b":"# EDA","792a2aaa":"## City Location\n\n- Startup can be in multiple locations, separated by slashes\n- Most startups are based in Indian cities","5b265d5f":"## Who are the most active investors?\n- Sequoia Capital, Accel Partners and Saif Partners are the most active, investing on an average of 14, 18 and 19 days apart respectively","464dc072":"## Sub-Vertical Trends\n\n- 1385 Sub-Verticals\n- Trending words include \"online\", \"solution\", \"app\", \"marketplace\", \"platform\", \"service\", \"mobile\", \"discovery\"","56806161":"## Who are the important investors in the Indian Ecosystem?\n\n- Investor names are not exactly the same, and standardising them individually can be a lot of work, so a general approach is done instead\n- Most important investors include Sequoia Capital, Accel Partners, SAIF Partners, Kalaari Capital, Blume Ventures, Tiger Global, Indian Angel Network and Nexus Venture Partners","b5a8716f":"# Questions","19ead8b1":"# Self-Created Questions","54e8de5b":"## Funding by Startup\n\n- Swiggy got the largest number of funding (does not equate to largest total - requires more analysis)\n- On average, each startup got 1.185 fundings - not bad actually!","0dc05d2d":"## Amount in USD\n\n- 1525 investments\n- Min USD 16000, max USD 1.4B\n- Extremely right skewed distribution\n- Startup names are not standardised (e.g. Ola, Olacabs and Ola Cabs are probably the same company)","21647810":"## Which industries are favored by investors for funding?\n\n- Looking at all the industry verticals, it looks very segmented with over 700 unique values. I found out that filtering for non-null industry verticals results in cleaner industry vertical categories, but at the expense of not analysing data before 2016.\n- eCommerce startups get more than double the average funding as compared to all other industries","c9c1347b":"## How much funds does startups generally get in India?\n\n- Even though the startup names are not exactly the same, standardising them can be a lot of work, so a general analysis is done instead\n- On average, each startup gets 13.9 million USD, but the distribution is very right skewed with the median at 1 million USD\n- Analysing the startups with less than 1 million USD (the left half), most of them has 500,000 USD or less","4748a3cf":"## Do cities play a major role in funding?\n\n- Yes, startups with a presence in the US and Bangalore markets get more funding on average\n","e7772c62":"# View Dataset","acbfa6c6":"## Investment Type\n\n- There are only 4 investment types - standardisation has been done\n- In this case, data standardisation can be done by removing spaces and making all letters lowercase\n- Most investments are seed funding and private equity, whereas crowd funding and debt funding are extremely rare","78fcdb20":"## How does the funding ecosystem change with time?\n\n- Number of investors who invested in startups plummeted in 2017\n  - Did India lose its attractiveness in the startup ecosystem?","de860f78":"## Investors Name\n\n- Investors' names are separated by commas\n- Investment companies make more investments than individuals"}}