{"cell_type":{"72624521":"code","3f9b6b03":"code","2b9653ab":"code","532d0122":"code","0399c818":"code","4ff2753a":"code","b1d7f6cd":"code","c71ae3d4":"code","1fa3cce5":"code","d51e1511":"code","203e9219":"code","8b55a63b":"code","3cf348e1":"code","c38cb08d":"code","381586ea":"markdown"},"source":{"72624521":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfrom matplotlib import pyplot as plt\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nfrom tensorflow.keras.layers import LeakyReLU\nimport cv2\nfrom tqdm import tqdm\nimport random\nimport math\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical  \n","3f9b6b03":"EPOCHS = 70\nBATCH_SIZE = 32","2b9653ab":"dataframe = pd.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","532d0122":"index = 5005\nimage = np.fromstring(dataframe['pixels'][index], sep = ' ', dtype = np.uint8).reshape((48,48))\nplt.title(dataframe['ethnicity'][index])\nplt.imshow(image, cmap =\"gray\")\nplt.show()","0399c818":"class CustomDataGen(tf.keras.utils.Sequence):\n    \n    def __init__(self, df,\n                 batch_size = 32,\n                 input_size=(48, 48, 3),\n                 shuffle=True,\n                 data_augmentation = False):\n        self.df = df\n        self.batch_size = batch_size\n        self.input_size = input_size\n        self.data_augmentation = data_augmentation\n        self.var = 1\n        \n        self.imageGenerator = ImageDataGenerator(\n            horizontal_flip = True,\n            #vertical_flip = True,\n            fill_mode = 'nearest',\n            zoom_range = (1, 1.1),\n            width_shift_range = 0.1,\n            height_shift_range = 0.1,\n            rotation_range = 10\n        )\n        \n        self.images = []\n        self.age_labels = []        \n        self.ethnicity_labels = []\n        self.gender_labels = []\n        \n        for index, row in tqdm(df.iterrows()):\n            image = np.fromstring(row['pixels'], sep = ' ', dtype = np.uint8).reshape((48,48))\n            image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)\n            \n            self.images.append(image)\n            \n            self.age_labels.append(row['age'])\n            self.ethnicity_labels.append(row['ethnicity'])\n            self.gender_labels.append(row['gender'])\n            \n            \n        self.images = np.array(self.images)\n        self.age_labels = np.array(self.age_labels).astype(np.float32)\n        self.ethnicity_labels = np.array(self.ethnicity_labels).astype(np.float32)\n        self.gender_labels = np.array(self.gender_labels).astype(np.float32)\n        \n        p = np.random.permutation(len(self.age_labels))\n        self.images = self.images[p]\n        self.age_labels = self.age_labels[p]\n        self.ethnicity_labels = to_categorical(self.ethnicity_labels[p], num_classes=5)\n        self.gender_labels = self.gender_labels[p]\n        \n        self.n = len(self.df)\n        \n    \n    def __getitem__(self, index):\n        images = []\n        \n        for i in range(self.batch_size):\n            image = self.images[index * self.batch_size + i]\n            \n            if self.data_augmentation:                \n                image = self.imageGenerator.random_transform(image)\n                \n            images.append(image)\n            \n        s = slice(self.batch_size * index, (index + 1) * self.batch_size)\n        return np.array(images), (self.age_labels[s], self.ethnicity_labels[s], self.gender_labels[s])\n    \n    def __len__(self):\n            \n        return self.n \/\/ self.batch_size\n    \n    def on_epoch_end(self):\n        \n        #Random permutation\n        p = np.random.permutation(len(self.age_labels))\n        self.images = self.images[p]\n        self.age_labels = self.age_labels[p]\n        self.ethnicity_labels = self.ethnicity_labels[p]\n        self.gender_labels = self.gender_labels[p]","4ff2753a":"#Divide into train and validation\nmsk = np.random.rand(len(dataframe)) < 0.8\ntrain = dataframe[msk]\nval = dataframe[~msk]\n\ntrain_dataset = CustomDataGen(train, data_augmentation = True)\nval_dataset = CustomDataGen(val)","b1d7f6cd":"train_dataset.on_epoch_end()\nx, y = train_dataset[450]\nprint(x[21].max())\nprint(y[0][0], y[1][0], y[2][0])\nplt.imshow(x[0])","c71ae3d4":"def build_model(input_shape = (48,48,3)):\n    \n    i = tf.keras.layers.Input(input_shape, dtype = tf.uint8)\n    x = tf.cast(i, tf.float32)\n    x = tf.keras.applications.vgg16.preprocess_input(x)\n    \n    backbone = tf.keras.applications.vgg16.VGG16(\n                include_top=False, weights='imagenet',\n                input_tensor=x\n            )\n    output_layer = backbone.get_layer(\"block5_conv3\").output    \n    \n    \n    def build_age_branch(input_tensor): \n        x = tf.keras.layers.Dense(1024, activation = LeakyReLU(alpha=0.3))(input_tensor)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Dropout(0.2)(x)\n        x = tf.keras.layers.Dense(1, activation = None, name = 'age_output')(x)\n    \n        return x\n    \n    def build_etchnicity_branch(input_tensor): \n        x = tf.keras.layers.Dense(500, activation = LeakyReLU(alpha=0.3))(input_tensor)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Dropout(0.2)(x)\n        x = tf.keras.layers.Dense(5, activation = 'softmax', name = 'ethnicity_output')(x)\n    \n        return x\n    \n    def build_gender_branch(input_tensor): \n        x = tf.keras.layers.Dense(500, activation = LeakyReLU(alpha=0.3))(input_tensor)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Dropout(0.2)(x)\n        x = tf.keras.layers.Dense(1, activation = 'sigmoid', name = 'gender_output')(x)\n    \n        return x\n    \n    x = tf.keras.layers.Flatten()(output_layer)       \n    output_age = build_age_branch(x)\n    output_ethnicity = build_etchnicity_branch(x)\n    output_gender = build_gender_branch(x)\n    model = tf.keras.Model(i, [output_age, output_ethnicity, output_gender])\n    \n    return model\n    ","1fa3cce5":"model = build_model()\nmodel.summary()","d51e1511":"model.compile(tf.keras.optimizers.Adam(learning_rate=1e-4), loss = ['mse', 'categorical_crossentropy', 'binary_crossentropy'], loss_weights = [0.001,0.5,0.5], \n              metrics = {'age_output': 'mean_absolute_error', 'ethnicity_output': 'accuracy', 'gender_output': 'accuracy'})\n\nplateau = tf.keras.callbacks.ReduceLROnPlateau(\n      monitor='val_loss', factor=0.3, patience=2, verbose = 1\n)\nes = tf.keras.callbacks.EarlyStopping(monitor='val_loss', mode='min', verbose=1,\n                                      patience=5)  # Early stopping (stops training when validation doesn't improve for {patience} epochs)\nsave_best = tf.keras.callbacks.ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True,\n                                            mode='min', save_weights_only = True)  # Saves the best version of the model to disk (as measured on the validation data set)\nremote_monitor_callback = tf.keras.callbacks.RemoteMonitor(\n    root='https:\/\/dweet.io', path='\/dweet\/for\/multitask',\n    send_as_json=False, field = 'data'\n)     \n\nhistory = model.fit(train_dataset,\n            epochs=EPOCHS,\n            batch_size = BATCH_SIZE,\n            validation_data=val_dataset,\n            callbacks = [es, save_best, plateau, remote_monitor_callback])\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.yscale('log')\nplt.show()\n","203e9219":"model.load_weights('weights.h5')\nmodel.evaluate(val_dataset)","8b55a63b":"names_ethnicity = ['white', 'black', 'asian', 'indian', 'other']\nname_genders = ['male', 'female']","3cf348e1":"images, labels = val_dataset[22]\nindex = 0\n\np = model.predict(images)\n\ngender_predictions = tf.where(p[2] > 0.5, 1, 0)\nplt.title(f'Prediction: {p[0][index].astype(np.int)[0]} years, {names_ethnicity[p[1][index].argmax()]}, {name_genders[gender_predictions[index][0]]}\\n'+\n         f'Real: {int(labels[0][index])} years, {names_ethnicity[labels[1][index].argmax()]}, {name_genders[int(labels[2][index])]}')\nplt.imshow(images[index])\nplt.show()","c38cb08d":"\nplt.imshow(val_dataset)","381586ea":"## Model"}}