{"cell_type":{"df050432":"code","53fbcf5c":"code","312edc2e":"code","ecda0235":"code","842db4c4":"code","d8e929fb":"code","0479ccb1":"code","b70d1702":"code","f335c714":"code","a7b4635d":"code","d0c9f5b9":"code","fbcdb620":"markdown","d31e5d60":"markdown","e95f92ca":"markdown"},"source":{"df050432":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tqdm import tqdm_notebook\n\nfrom sklearn import svm, neighbors, linear_model, neural_network\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.decomposition import PCA, TruncatedSVD, KernelPCA\n\nfrom sklearn.mixture import GaussianMixture as GMM\nfrom sklearn.metrics import silhouette_score\n\n\nimport lightgbm as lgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn import preprocessing\nfrom sklearn import svm, neighbors, linear_model\nimport gc\nwarnings.filterwarnings('ignore')\n\n\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB, BernoulliNB\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import Matern, RationalQuadratic\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.decomposition import FastICA, TruncatedSVD, PCA\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cat\n\nfrom tqdm import *","53fbcf5c":"%%time\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","312edc2e":"train_columns = [c for c in train_df.columns if c not in ['id','target','wheezy-copper-turtle-magic']]\n\nmagic_variance_over2 = {}\nfor magic in sorted(train_df['wheezy-copper-turtle-magic'].unique()):\n    temp = train_df.loc[train_df['wheezy-copper-turtle-magic']==magic]\n    std = temp[train_columns].std()\n    magic_variance_over2[magic] = list(std.index.values[np.where(std >2)])","ecda0235":"from sklearn.neighbors import KNeighborsClassifier, RadiusNeighborsClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.naive_bayes import GaussianNB, MultinomialNB, BernoulliNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.linear_model import Lasso, LassoLars","842db4c4":"random_state = 42\ndebug = True\ndebug = False","d8e929fb":"import hashlib\n# CREATE LIST PUBLIC DATASET IDS\npublic_ids = []\nfor i in range(256*512+1):\n    st = str(i)+\"test\"\n    public_ids.append( hashlib.md5(st.encode()).hexdigest() )\n# SPLIT DATA\npublic = test_df[ test_df['id'].isin(public_ids) ].copy()\nprivate = test_df[ ~test_df.index.isin(public.index) ].copy()","0479ccb1":"public_count = public[public['wheezy-copper-turtle-magic']==0].shape[0]\nprivate_count = private[private['wheezy-copper-turtle-magic']==0].shape[0]","b70d1702":"max_magic0_private_count = 281\nmin_magic0_private_count = 200\n\nprivate_proving_range = max_magic0_private_count - min_magic0_private_count\n\nmin_start_magic = 100 \nmagic_iter_range = 512 - min_start_magic\nmin_step = int(magic_iter_range\/private_proving_range)\n\nmagic_iter_num = 1\nprivate_error_flag = False\nif private_count < 201:\n    magic_iter_num = 1\nelif private_count > 281:\n    private_error_flag = True\n    magic_iter_num = 1\nelse:\n    magic_iter_num = (private_count - min_magic0_private_count)*min_start_magic+min_start_magic","f335c714":"oof_qda_pseudo = np.zeros(len(train_df))\npreds_qda_pseudo = np.zeros(len(test_df))\n\ncols = [c for c in train_df.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\n\nfor i in tqdm_notebook(range(magic_iter_num)):\n\n    # each magic\n    train = train_df[train_df['wheezy-copper-turtle-magic'] == i]\n    test = test_df[test_df['wheezy-copper-turtle-magic'] == i]\n\n    # for oof\n    train_idx_origin = train.index\n    test_idx_origin = test.index\n\n    # start point\n    # new cols\n    cols = magic_variance_over2[i]\n\n    X_train = train.reset_index(drop=True)[cols].values\n    y_train = train.reset_index(drop=True).target\n\n    X_test = test[cols].values\n\n    # vstack\n    data = np.vstack([X_train, X_test])\n\n    # STANDARD SCALER\n    data = StandardScaler().fit_transform(data)\n\n    # new train\/test\n    X_train = data[:X_train.shape[0]]\n    X_test = data[X_train.shape[0]:]\n\n    fold = StratifiedKFold(n_splits=5, random_state=random_state)\n    for tr_idx, val_idx in fold.split(X_train, y_train):\n        # qda 3\n        clf = QuadraticDiscriminantAnalysis(reg_param=0.111)\n        clf.fit(X_train[tr_idx], y_train[tr_idx])\n        oof_qda_pseudo[train_idx_origin[val_idx]] = clf.predict_proba(X_train[val_idx])[:,1]\n        preds_qda_pseudo[test_idx_origin] += clf.predict_proba(X_test)[:,1] \/ fold.n_splits\n    print(i, roc_auc_score(y_train,oof_qda_pseudo[train_idx_origin]))","a7b4635d":"print(roc_auc_score(train_df['target'],oof_qda_pseudo))","d0c9f5b9":"submit = pd.read_csv('..\/input\/sample_submission.csv')\nsubmit[\"target\"] = preds_qda_pseudo\nif private_error_flag is True:\n    submit.to_csv(\"submission.csv\") # raise error\nelse:    \n    submit.to_csv(\"submission.csv\", index=False)","fbcdb620":"# Pseudo ","d31e5d60":"- V1 : LGBM STACKING \n- V2 : LGBM, MLP16 STACKING\n- V3 : V2 + pred 5 score 3","e95f92ca":"https:\/\/www.kaggle.com\/c\/instant-gratification\/discussion\/93080#latest-554239"}}