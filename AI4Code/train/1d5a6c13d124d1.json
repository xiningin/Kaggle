{"cell_type":{"823cb7ea":"code","9875d3c4":"code","863780c4":"code","cc133311":"code","3da79d25":"code","b10a4b50":"code","5bb5dce8":"code","fd70eab6":"code","74ba827b":"code","bd30354d":"code","669069ac":"code","f4d8ebc5":"code","27c2cd54":"code","34fa1875":"code","64b8e9ea":"code","e15f4266":"code","1c7933c5":"code","12c62155":"code","37c40064":"code","be4fd203":"code","ae3c470a":"code","72da803c":"code","1a59f213":"code","b4c36edd":"code","5908664b":"code","a3027d26":"code","3ee72846":"code","535171fb":"markdown","8fe2eb30":"markdown","00951b48":"markdown","70209be6":"markdown","613306c3":"markdown","528f1c54":"markdown","64756bed":"markdown","1b2b2277":"markdown","76ddec80":"markdown","7add50ed":"markdown","aefadb09":"markdown","941e9bf1":"markdown","fb0c69ed":"markdown","56a78b52":"markdown","d8ef1685":"markdown","9d73bf73":"markdown","081f84b3":"markdown","ab1478e4":"markdown","0c70e354":"markdown","9abdf44a":"markdown"},"source":{"823cb7ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n      #  print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9875d3c4":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nfrom scipy import stats\nimport cv2\nimport glob\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import MobileNetV2\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense\nfrom keras import Model\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.models import load_model\nfrom tensorflow.keras.applications.xception import Xception\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import GlobalAveragePooling2D\nimport tensorflow as tf\nfrom functools import partial \nimport keras","863780c4":"\ntrain_df=pd.read_csv(\"..\/input\/cassava-leaf-disease-classification\/train.csv\")","cc133311":"train_df.head()","3da79d25":"plt.figure(figsize=[15,7])\nsns.distplot(train_df['label'])\nplt.xlabel('label')\nplt.title('distribution of images')","b10a4b50":"image_count=pd.value_counts(train_df[\"label\"])\nimage_count=image_count.reset_index()","5bb5dce8":"image_count.rename(columns={\"index\":'labels','label':'count'},inplace=True)","fd70eab6":"image_count.head()","74ba827b":"fig=px.pie(image_count,values='count',names='labels',title='percentage of images related to each disease')\nfig.show()","bd30354d":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print(\"Device:\", tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint(\"Number of replicas:\", strategy.num_replicas_in_sync)","669069ac":"train_list = glob.glob('..\/input\/cassava-leaf-disease-classification\/train_images\/*')","f4d8ebc5":"train_tfrec = tf.io.gfile.glob('..\/input\/cassava-leaf-disease-classification\/train_tfrecords\/*')","27c2cd54":"split_ind = int(0.9 * len(train_tfrec))\nTRAINING_FILENAMES, VALID_FILENAMES = train_tfrec[:split_ind], train_tfrec[split_ind:]","34fa1875":"print(\"Train TFRecord Files:\", len(TRAINING_FILENAMES))\nprint(\"Validation TFRecord Files:\", len(VALID_FILENAMES))","64b8e9ea":"AUTOTUNE = tf.data.experimental.AUTOTUNE\n\nBATCH_SIZE = 8\nIMAGE_SIZE = [512,512]\n","e15f4266":"def decode_image(image):\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.cast(image, tf.float32)\n    image = tf.reshape(image, [*IMAGE_SIZE, 3])\n    return image\n","1c7933c5":"def read_tfrecord(example, labeled):\n    tfrecord_format = (\n        {\n            \"image\": tf.io.FixedLenFeature([], tf.string),\n            \"target\": tf.io.FixedLenFeature([], tf.int64),\n        }\n        if labeled\n        else {\"image\": tf.io.FixedLenFeature([], tf.string),}\n    )\n    example = tf.io.parse_single_example(example, tfrecord_format)\n    image = decode_image(example[\"image\"])\n    \n    if labeled != False:\n        label = tf.cast(example[\"target\"], tf.int32)\n        return image, label\n    return image\n    \n","12c62155":"def load_dataset(filenames, labeled=True):\n    ignore_order = tf.data.Options()\n    ignore_order.experimental_deterministic = False  # disable order, increase speed\n    dataset = tf.data.TFRecordDataset(\n        filenames\n    )  # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(\n        ignore_order\n    )  # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(\n        partial(read_tfrecord, labeled=labeled), num_parallel_calls=AUTOTUNE\n    )\n    # returns a dataset of (image, label) pairs if labeled=True or just images if labeled=False\n    return dataset\n","37c40064":"def get_dataset(filenames, labeled=True):\n    dataset = load_dataset(filenames, labeled=labeled)\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.prefetch(buffer_size=AUTOTUNE)\n    dataset = dataset.batch(BATCH_SIZE)\n    return dataset\n","be4fd203":"train_dataset = get_dataset(TRAINING_FILENAMES)\nvalid_dataset = get_dataset(VALID_FILENAMES)\n\n\nimage_batch, label_batch = next(iter(train_dataset))\n\n\ndef show_batch(image_batch, label_batch):\n    plt.figure(figsize=(10, 10))\n    for n in range(7):\n        ax = plt.subplot(5, 5, n + 1)\n        plt.imshow(image_batch[n] \/ 255.0)\n        if (label_batch[n] !=4):\n            plt.title(label_batch[n])\n        else:\n            plt.title(\"healthy\")\n        plt.axis(\"off\")\n\n\nshow_batch(image_batch.numpy(), label_batch.numpy())\n","ae3c470a":"initial_learning_rate = 0.01\nlr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate, decay_steps=20, decay_rate=0.96, staircase=True\n)\n\ncheckpoint_cb = tf.keras.callbacks.ModelCheckpoint(\n    \"cassava_model.h5\", save_best_only=True\n)\n\nearly_stopping_cb = tf.keras.callbacks.EarlyStopping(\n    patience=10, restore_best_weights=True\n)\n","72da803c":"weigths_Xce = \"..\/input\/keras-pretrained-models\/xception_weights_tf_dim_ordering_tf_kernels_notop.h5\"\ndef make_model():\n    base_model = tf.keras.applications.Xception(\n        input_shape=(*IMAGE_SIZE, 3), include_top=False, weights=weigths_Xce\n    )\n\n    base_model.trainable = False\n\n    inputs = tf.keras.layers.Input([*IMAGE_SIZE, 3])\n    x = tf.keras.applications.xception.preprocess_input(inputs)\n    x = base_model(x)\n    x = tf.keras.layers.GlobalAveragePooling2D()(x)\n \n    outputs = tf.keras.layers.Dense(5, activation=\"softmax\")(x)\n\n    model = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n    model.compile(\n        optimizer=tf.keras.optimizers.Adam(learning_rate=lr_schedule),\n        loss=\"sparse_categorical_crossentropy\",\n        metrics=\"accuracy\",\n    )\n\n    return model\n","1a59f213":" \nwith strategy.scope():\n    model = make_model()\n    \nhistory = model.fit(\n    train_dataset,\n    epochs=4,\n    validation_data=valid_dataset,\n    callbacks=[checkpoint_cb, early_stopping_cb],\n)","b4c36edd":"TEST_FILENAMES = tf.io.gfile.glob(\"..\/input\/cassava-leaf-disease-classification\/test_tfrecords\/*\")\ntest_dataset = get_dataset(TEST_FILENAMES, labeled=False)\n\ndef show_batch_predictions(image_batch):\n    plt.figure(figsize=(10, 10))\n    for n in range(1):\n        ax = plt.subplot(5, 5, n + 1)\n        plt.imshow(image_batch[n])\n        img_array = tf.expand_dims(image_batch[n], axis=0)\n        plt.title(model.predict(img_array)[0])\n        plt.axis(\"off\")\n\n\nimage_batch = next(iter(test_dataset))\n\nshow_batch_predictions(image_batch)\n","5908664b":"model = keras.models.load_model('..\/input\/cassava-model\/cassava_model.h5')\n","a3027d26":"ss = pd.read_csv(os.path.join(\"..\/input\/cassava-leaf-disease-classification\/sample_submission.csv\"))\nss\n","3ee72846":"preds = []\nimg_array = tf.expand_dims(image_batch[0], axis=0)\n\npreds.append(np.argmax(model.predict(img_array)[0]))\nss['label'] = preds\nss\nss.to_csv('submission.csv', index = False)\n\n","535171fb":"## Training\n","8fe2eb30":" <div id=\"LoadDataset\">\n <\/div>","00951b48":"## Loading Model and weights\n\nWe are loading Xception network weights traind on image net without the last layer.\nA final softmax layer of 5 is added since we have 5 labels.\n","70209be6":"The dataframe has image id and corrsponding labels","613306c3":"<div id=\"img_label\"><\/div>","528f1c54":" \n## Load Dataset\n  ","64756bed":"<div id =\"train\"><\/div>","1b2b2277":"<div id=\"mod_weights\"><\/div>","76ddec80":"## EDA\n","7add50ed":"## Introduction","aefadb09":"<div id=\"tfRec\"><\/div>","941e9bf1":"![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUTExMVFhUXGhgaGhkZGRcXHxoaGhgXFxgXGh4YHSggGh0mHRUVIjIiJiotLy8vGCA1OTQtOCguLy0BCgoKDw0PHBAQGy0nISc1LTItMjUtLy0vNTUvLS0tLS0tLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIALcBEwMBIgACEQEDEQH\/xAAbAAACAgMBAAAAAAAAAAAAAAAFBgMEAAIHAf\/EAD0QAAECBAQEBAQEBQMEAwAAAAECEQADBCEFEjFBBlFhcRMigZEyobHRFELB8CNSYuHxFTNyB1OCkiSi0v\/EABoBAAMBAQEBAAAAAAAAAAAAAAIDBAUBAAb\/xAAtEQACAgEEAQMDAwQDAAAAAAABAgARAwQSITFBEyJRMmFxI4HwFDOR0QWhwf\/aAAwDAQACEQMRAD8AYxSp5R4ZbaaRJMnOLRNJZIcx83kwoe54rcEyZF1KO5t2ES4jgSjNkT0vyWeXKJ11ksqKkkOnXlE9HiK5l0G0ID5MDbwOIvYBwZZkz7sReCtDOZCytXYQuongLI31IghRTUlSiWJZ\/wC0cwltpv8AeMUwbWkrcQZoJpyhKh5WgJUOS4Dl9BBSlp5qUZj6CH5dOXx7uqnR3BeN1BKgBpGtPPdJYuRtFavTMUWytGtIoSyUZC51VBb2ZfvAg+vnzVuMvyeKkqdPljKxbtBupnLQbLS3pF6jrkrQyijNDlNLyJwYyT5gqXjc8IAAYxUlVdVmzAEl4JzEsvzqAHRKvtGqMUCCWQtQ5s31h6BTwxhjEbsmEqFMyYMywxgbxXTZEhYsRY+sXJOPFj\/BmN0EUK3ieWsGXNlKS+7QzHS9G4T1VXKnCi1LLHRJf1hqmqaFzhhaErmMfKTZ7PBTEcVlIspV+QvHMql+p1B7ZFUSvOFbGLJByKB0ihS4iqYbSVFPM+WLGICaogApQP5R5j7xnZ8Q3qxIgbK5ipUK\/ieWGfC54SPMRC1UZ0rynn7weNFLRJUtSX8pN4LVIntHMUoAPcUuIKxMyeoJAKR9dzFY0\/lYW58ovcN4MZmdSrJZ35nlBSfVJMoSsgsbkbtGiGCUALMXtvmVeH5sqSrMslugg3MxaQ6lpQtUw\/Bm2HNtBAWlw4rVmysBoNh1J3MFKMyZZdwWLFWvsIU7IHscsYwfAEin4plIM6Z5jcSxt3gDi9euoUy5hCRokWH9zBXE1Ucwkh8+x5mFqam8GuFb3XZ\/nU8DC+Byly0zlSnKghO22YP8oGUyiVE2HPvvDZwRPcTxqooU3\/qW+cLsyUkFR0JLkcjyjuOt\/wB4OQcgxspeE1rpRPCii\/ws\/lO\/vAjFsOQ8uRNmOtb+GtQbKRogn+VWnQtHT+EJiJuHoCSSyCkvspI0+kce44mFVSeSAB+sNbCd4cGMKgLchVRmWoS50skpc67HcEbGDcn\/AKfGdIM6mmhe3hrGVTjUO7HbvFTDK38SjLMYrTz1UOaTz5+8HsAxaZRAskqkrVcbggbH2gw1GLAF8xMm4BXJJSaefb+gn5iMjpK69CznTNUyri5HyeMg9yfH8\/xPbZvYRXq0qWGEH8PppEpjVKSlZuEF2HR9CYYZFRJHwhA7ACIU0q7rZpSD5nJK+UqRKJAIKi1xsYJUhCJSMln1jpdWJc0FBCCeSgD8jCdxFTypMvK2ZYBPk8qU+l7CHZ8G7EUU9xeT3G4FpqX+IZge4vEhrUoJFnO+p+UBqfFUMQqYQ+xOvtFnApybrGUse8QYcLIaYH4nlKgRskYvKlSTlkTVLI+IpCR7k6QLm11Q4QyUk3ckqi7WVeeWR0hdqqibLGZKSVKScp2SNH76tFOrwM6gLz4nDkrqEqumIYzakJUdgAIopkSCSVTFKGzk6+loAVFRMuJiVEm7qDHuLcu4jz8U3O7eveJf6bKq7YBzN4EPKmUqLkpY2Y3PtFilmKlqE2SLc2hTxSahcsKbzKIA255j12iPCa0y3SpVr9WOyv3tBY8BC7rP4nlykTp1NxNm8sxCFHkQ0Wz+HmDzSlIfdMc4VPUpBUvQEBKtCbXNtRyhlwOuV4YOZwPlAP6l2pB+x\/3GrkDGjC6zLQQiWtSn2IIihj2EFUolSGsS7Q04NSJXL8SYAX0HbcxLXT0ZShgxDNFmHCWx7mG0xwTeKE4ilC5ikSkWJNjD7gvDaJQzTPOvmf0imeGxLqUTpKnQFeZCviHUH8whpRcw5x4EEYWXhhKU1ISdLRSnMS42ghWz5Y8pUH5bxAmQoiycoO51iVtMWhjFcF1dGlagojTeI69YWgoCSQ1+0Fvwo3cmAvElf4aMqbEwGXCQw4i8qhRcCVdaGyJskWYQUpZMpEsKVcs5G8AKaiWUZ8pIJZ4bJOHtKIZyRcwWbESoJPcSpLCRSErqLJQEyRy1PeBWKYHkU6Lp3EMuDHJ5CWBiY0OcljGfpspOTYOoQTdEVdCUnMkOI0RhK5iwEp1vDnWUBljMdN4hrV+EhCkEEk27c4pfLlxnb5glCvcE8J4cqWqdMWCAlJDCxfT7wBxdistuSYZRUEomuXtmIHMKGnvCrPOZTvvd\/SHaUs2TeYDGPH\/TDEynxJRIykBXZiEqPsR7Qucd0YFSSPhX+loG4ZPKKhBSqxISegJDxZ4vxYqnrQwKUFkkbvvGg1giEptJNwfRJXVSh+VJKj6Q7Y+qmUoU4DFTrU1gSzBusIvDWICTPQpgQry\/+394IcS1aZsx02mJZimwtt36wvfR2mdFbbkRwOYLJmDLs5L+sZG0nH0pATMQc41+8ZDKaBQnaawJUguAocixHzhPmzZbnIAE8uXSKtRxClSZglklKVEBwzgh3AHqPSBNIZipjgeXTv8AaCye5bHccHowpVYXKX5rpVzBMCajDZ6ASVlcs2Ic\/OCKZx5xbk1KWKTcGJAWA4hlAwnNZ8nw1klOugiiZygMoJHb5x02vo5RRoCSd9oTccwrKp0ix2j2n16u+zIKaSMlGVsDxlcpbElSFMCPt1joeJVEiU4XdSQAkfT9Y5vhk6XLnImLBUlBzZbAki6bnQO3tGV2NTVzzNXcG+XYDp16xbm3Ff0+54GhOmyJEubK8Xw0tqyrxQqcAp5wcy8qiXdKiLnobRc4VqBMpjuFXEVU4wJasqw12jK0mdiSHbmVLsoboqY3w+qQfKfEQA97EXe9\/mIAVqgvzfCS9iPod946djCfERnSbpuIU8XwtKvMkBIUOrPy6Xi4ZFDUf2gnASxCC4sy8TUhIQsONne24PzgnhVcoKKklgp0jrbyluWnvAyspVp+JJKeevqCNIoS88u6SW5t63G2kMbArA7e4kqQee507CuLZngZCLp0Vsb\/AA\/8rxVmYytRJcvCrS1nieU+VIupILdm94JzqkKR4gYMwuRcaepB+R6RMrsjbWmlotVR9N6\/MKJxRbi8XkYutacgUEKJ+KFmVPB3iaTMDvFI5mllRSKjdQ0Ilqf4lbqN4NrWWhewrFgpkrYEb\/eGRKg12jokDqRIRK5wmcY05TMD6EQ31mJypSSpRsNhc9mhKxvGZVTNCQSjSytX9HhWU3wO5HqGBFQ1gxEyWmWlOVCWfqYKEsW2gHTYpLkeRLMkeZSrkqfQBOg7k+ke1nEU0BJSJaQXu7n2F4k9QA0\/c4jKBRMk\/DKM0q8zPBWTPQFOlaQN7wIFfKqUeSdMRMGqFfCrsRpvrEH4qVJLKKeu\/wA4kOErlDAGdBRDYjDVVUuYkpcqfkIWcSSUlKEgjZ1aAQYoccp1OELSTy0gbXTjMWEhjyi3MtjmMyEMJVVLVJlzZgKHyoSC1nK08+gMLeOYgpasxCcwABYMH594J8Q17NKAzZS7DdemY\/0i4HO8B6Gk3Wp3Nx+pj2nTau95C5JMscN0BWTNKbAHKOavsIHYugpnErHxF2aHzB6IoTYunZuUe8UYSmZJzAAKQcz9NxHcWoOXIx8Rq4yVifh9WmWpMxaHSPy\/QiLVQ6l52ASXbtAcEqmkO6evaL0yYSkh7AQ1rioK\/wBVmiwVbZwDGREFp5RkO4nbjx+P8hCUAasQWzGzOff3i5IqFoAFgr829uQgAKmQMsuSokJF1F7qNy3QAAekb0tUsrcE6fpZhHt3u4nLjUlBLEbxtKpVA3NoVcKx1cqefEJMtZ5fDsCI6Sn8LlCjNUqzshP6wLADk8SvGwIi1WKImAD1gbxGVZQwg+vGKRKiUU5WrnMV+kBeJ8fWtITkQlOoyhvnGKMd5bJsyZqN2ZSwOjQpKhNAbmfvHknCZPiN4gSkXvd\/6Yn4dqEqSVLS\/UxlTKSpZIHpGgjv6pHNAftHYMQc0JnDOJqkBYSklOclI6QWxGRMnjP4aUjvACjQozciEkj93g5Oq1S0qlqLMIl1GM7t6VZ7hZMfpja0IcMYPPnApKwiUmxIDk9A8HarhaUEFKVTPVQIfqGivwNiSfwQJVcKXm7u4+TR5X8RAOxjUxopQbuTKNPidqYTmGMqXInGXMGU7HYiBNUkk5kF+n71EM3F078QLjTQ7iE2lqChWRWmxjqe2aGrwrlFngzaYgqIUk5VDb6tFiXiKlSylRFrNpY2+0S1EgKDjXmP15xUUQ7KsefPvDSFfuYebA2M8yWmmGWrKo\/vaGGRPBAEK1bMKtdtO3ffvE9BiGQ5VHsYEgjkzR0mbcm09iNSTuIsT8dPh+G4JFyr\/tgchuo7QCVXhnftAhEmYtR1GYue+w9I6ULCL1eahtEN4hizozJVztdwo2Cidyz3gZQrW+cC46bmz94vnCxLSnOqUSoA\/FmPcJS594acIw0hAUJaVW+JaWb\/AMVFhE5OPTrxyZnDE1XUXv8ATJwcpZztq6dyesE6PAKtZzBORADBRBNt2G56w1S5igm4V6I\/UCLVFXAoyOXHN\/1hIYZOxH4tKHPJiVP4eyBlTQjdiGcnf4o0lcO5ym+ZgA+YHTfSLfGSH\/PflCZJUUmxI7EiCQOh7l5\/4xdtqY3\/AOiISpCVpIbTKRzvFirnU1MsKE0qUNcozM\/NrAwFoK4hOVQzoOqT9RyMRAy5StP4SudyOccyBqsi5Jn0rYRY5EYZpp6mV\/CbM\/Jj3gbV4KuWlwHG8UaiSKeYmbJU6CxtpD7heJyp0sGznURzHjRRVnmLVVfg9wBgVYvKUi4AibEqpaqaakpYs0G6HDUy1rUkWVAvi5KkyywtvADE+Jtw6MLaUWIVBS5CSdTtBWmoTMcJDmIMNpVTZiUjUmOpcP4dKphdis6w+i71J0F9zhlTSFKlC4Y6R7HdazDJMxZWZSXV0HJoyKfT+896ZnMp2Ey86vDJyvbtzPKIZyzTzEqspL3Yv6t7xHPlzMwKkquBo9xrf3jfFQVSrg2a+m7W94zMDsCLNiIUwnik+StLgAEi4bX+8EuEZ6lyCk\/kJA7agQkz8QOUJLEhnI3szv2EHuCK0vMSNGCvUFvoflGifoNynEw3y6ZTKL8zG+J0JmybDzDSLNVKLlYFosYfM5x82xYZBXzEBKfaZSwukMqUEqTe8X8MwjMfFWHQNh+sT4hOSQwiHAuIxToMqYkqBJIPTkY33uquaZvGg2y3NrKaXMzeIkMPhA1gBMmCdNWT+bTttA7GMU\/F1OZCAkJDBt+8XcPUyjzESPi2iT5QQQDPcKK5apkoPlP12MaT1FyDF6jOdZUnUawQxugSuWJySEkDzAkB+ofeG6bISCDLNFn2jaeorTbwDxOiCgbXg6VpJYKfsCf7RdpsIe+Vz1vft0i0C4\/NrMY4BuIlLVqlnKt25xYqZqVC146NM4NlTLLlnNlfMk5QO7W9NYSsQppcpSkIUF5T8RFra\/5g1UXIMmrYiqlGjlghspV0OnvqItyqCSSHDdMz\/pFRVQ++b6fKDXDuHmdMlpZy4dhsTr6CPHkmpOUZRuPENyMNBZCack7eUknsTaCFHgyUDxalpEpJAIUzl9Ab2e8Wscr1UM2lkBhJXmzKNy7tmfZiXI6walVaJ4VKWAV\/DdmUdClQNjCAzQtlUWlGYunmg+BPCALNK8MMOrAn3gfLoFS15vGVMTuF5VJbvZjCxxPgfgrM6R5Am5CSfLs6Ty6bRFT8QTFgkKaYACptCAbqA67j7wpsVx5BVd6mxHyeiU3kCUq1GUsYqmSspKwouB+Ym\/qITpOIZwpSQAdFDmdXHXy6RpQ8TTZIKSpMxOwuC3QmBbT2OuYg5QYTnSPFLLYnmk3H39YGVfD6kgkTEW2U6T2uGf1ivLxELUZiCRuRoR\/aDtNPWpLzAkvoWe3XnCAMqnj\/ABNDBlylP0mv7H\/yLaaGoGstaU7qILenPvFoyApOXpF9alJZnYaEFXyvaLaVGczoBPMEAj7+sUDUBR7xEtq7O3IIm0lWpK\/AVdJLNyMFB4lMtrgaiJsewFSmmS2zjUDdvorpFsqNVSgt\/El2PpBMoI46MlOPwP2jZw3iBno6iCeMURXJUGu0c\/4NxIypwSXvaOnqmOnuIJLYFTH4zvTmc1wtKpU1LBlPDCjEFKnFL3tFSYEqnkbpiXDqb+OVRKGKPRiK8RplUiyAc0ZEqJMxgxDRkXessKpxjGcamDyuxFiQ4s2hHYRGjEc8rwy9\/taLHEuG5lKWHc5VBtL2PzEUpNEEi6mI\/Y9YjwLi2ChzIgKlEoKXD2f5w9cJ02S5Y+TbkS+vpCOJpSSDzchoe+B6gKlLC9QQH6bAQ3XMVwkw07jPLlJCHPwmBcxICmTvBVU5HhEDaI+HKVMwqWrbSMLHhXbvJjyAaEimIs7QFmUJmqLdYcp0hLGBNEAFqAjZ0qALLMdAcxPwfCTKmTCrRonw6Z\/EUCL8oaMR\/hjNleFHGq5QWoISJZbKtZYHNugElgBYFrvB5kJNRGr+rdLRxZNMpZDKmEWSXygndTXPYe4gBiGKCckCYtRUCT8JAG\/lA0DxXXKS2YqdzsCp7OQScvaLmD4OJqrBZSG2SH6fFDMWFRz5knLcQtwvh6TlWkpY6OC\/K1u8O3D\/AA2tYdZySgSzfEsHU\/0jZ94l4W4UTJQlUwFhcILO5v5m+kXuJMe8KWUySnObAC+XqftFF1yY7Hjs1APH+MokJEiSSFNcD8qfuY5NWKUqwsPr3hkxOUpRKlElRuSecCFU\/tCg9zTGkVOT3BFBIUFgfle\/SO5cD4ciQiW\/+7NHiHmlOWwb\/wAo5FTSwuYEJ1v7tHTeCMUCliWv45UspL6m419od9KzPyZNz18Tf\/q1ThVJLmJ0lzG9FhvqBAGmripSNlKRLVmfcoSSrpd794dcbqZM+TMp5gV5wRtY\/lV3BAjlMtCkJCVFloUuUf8AiCFhunnV6QBFm\/mec2n4jxiE7xEBSQHYhQAGu+u33jnlbhvhqzy7auBdubdINYPiBSpabkEC50BH6s9ukVq9as5AUHO32eAVKO0wFyFeRBcqSVoPhkheYEgHkCLDfWIqoHKXGU76AkbnvElVLKCFpcfIhXSK9TPMzzEuoa\/\/AK+d4MEg0Yb4gV3p1NUVGQOlI0a24hk4VqgtKpdyBoeXQ7+sLM1BSoFn3Bez\/wBo1lS5iFJmFRABHm5325xxlBnNNlOJw07BgmBS1P5VKJ1N0pHrvFPirAZkgeIma6Tb+Uj7wd4S4wpakJlJVkmgAZFMHt+U6GKX\/U+sAkJl7qL+ghZxKVsjmWmtTkqKElakBSyEkbvbM\/Jt+sEMFrpKVOUsmZ8RfRWl\/vCHJxSYgsXUjk9x2+0G6SdKmBwSbMWsexEJAbF3JGVsLV2IxVuEiTVy1hPkUoabEw7zkAJ9ID8LYjLmU4lzCFTEaE6qA+EkbKFn94uy1rmKIbSGr3YhowviJKklFQtR30g5QgFLuxgnV8LmYoKKsvaPaikp6ZHnVE2fEzUbqovoy1JK8ovHkD5eLymDG20ZBUIdGKy8C\/FynSXmygrKNArcg\/pCFOC1lPlIA20Zixf2h6w7FfCmBaPhP1gBXTlzJk2YyUhSlMBa51PS8K07spoyNqNVA0whavp9I6dwfQhFKhTAlRJPZ7fIRzvAMHVPmBLeUHzK2A+8dTXK8oSgMEgAdhaHa\/GXQYwIzEp+qVsVkuFkBgbBo2oKkSJV7WjJaVFkmKWNUYBGdXZI3jJw4yp2t4MKiDYmk3FZk0eWwgtguBTWzrOQHddvaI+H6oy9JaBsCq5HYR5xVXBvDUvNOWwYuyUq1JOibet9Ir3sW7P7ePyZ6iPcxlDibHmdFMoKyAEzbXP8qHs2l4R61GdRUElRJd1bOXsTY3Jj2sqVIJSCEl2ZIAsDa+vziuhC5ig4US9tSXPeNHDjJ91xBcseZYoKVXiBAA8xAABBd9NI6vg1JJopQmTigFP5Rdj16wOwbh5NFIM+YkrqSk5U65HDW69doAV9YZwD2A\/KNjuep6x7LlIfatX5lulwjI1E1CWLcdzFr\/hJCZfW5V9hFzB66RNswSo7GE5cmI7puNRHACTc2WwYwu0CMeO4d4an1SdPsYWMWWEoKv2+whzwmqTPkpTNLqZi+\/L10hQ42w0ycgKvKSWO+jN84NVthJsuYpjIPcWsOqjLmJmJ+IEH\/H3h8p0ZPEqJTg+VwT8QIJN\/URz+Qgbm3t6Q9cLVryJgcm7aAslgzeu5irJMNYcw6sC2UAgkjQ7dfnC1xMvLPngDVMpTf1WD89DBTBKRaagqZ0EWbb03JMUOMwBUo5LRkP8AySp0v28l4Vk4HEao3WPtFWqnKBQU\/kL5Q+v5lHmT9GgrWL8viJBuQx0u14DVCSTlBDvyD949SVEAZiQlwb2LXfs1vSOr1cUDDwpwZDqIUoguzWbQczC3SrZTiCuF1YKmFyW+LbsRpBDE8FdCpyElKkB1p6fzDkd25QBvzKcD0aPRgatQMudJYaKB0D6KEV5k1RQBchP15mLFGoFQSr4V+U9jaJ6GflKkgJANjzbQse30jxPF11BzJsPEF0iA+cryKBf9X6GD1ZxEuqYTVZlJDP8AzAb9+cLU1LnKLX5RaRJRLUHV25vHWrzDwZjjaxLwlPHqJBScySQRyixJTF5MkERwrc0SA3czCsTXnfRaSD3\/AHyjoeEcSeIrLkY8+cc1lJEualWz3hqNXLWM0tQTNGhFn6GJz7OBJMmAg2sb8QnzHCgtraQFxJCJ\/wDuvblENPjPiJZVljXr1EEcHw0znJLCO+nu5uBtWrgb\/T0iyVBtnMZDmMDkjUPHkc9KDuESaHA0BBdWt+0KkzCyupWgfzew1vDBQ4hbKskHrEZl5arxEl0zEl+40hOmxtjJLNcUcYoVLlAUSU5EsAPn1MEqapJClD4UhyYAVRFzr2iCTnUNSEnUc4YcnxyY7dt4hSoxkrUEo8o\/m+0WJUyWi91KP5jc\/wBo9w9CT5SkR7PoPOnlEK6r9UqRzALk8wpQoCJSqhbOAco2fb5tCDiU+ZNVmWczkkm4J02Hpv6Q4Y7UnySUpUq2ZTFgkEeTMTYXv6QiYhWrJ8MZVbkpy2+XUXeK1RncUOJPlNmDZkwuQXCrMzD3YXjo3CmACnQmpnpBnqDy0EWQNlqH8371gNwFgkta1TprmXKY30Ktco6DU+nOHEV3iFRO5t2ivJkCEJfJh4Us8z3\/AFNQUVG76vCXjifDmFaR8R07w3JkhQhV4hABKQdIzmwMmTcDwY7KCvIkSQCHiFcjMekSUk1JSne4eCNVRlIcHMnny7w\/Dnvhu5dp9Z6opu4EmzVI0LQC4jr1zVIzH4QR2D3MMFci0KmLK0Tycn1uItSt1wdYax8yAEqvpDFwrWiWTnIyqcchoCP31hcRNGV78gOZ+0XqdOdAvl8x+iYc3IqZF+Z0eZUZ3Tn8oNmZIBHNrtC9xwlkyWIJdWnYXHSJsCnZyGPQ7vz94i46lZBJTdznI6p8rGFOKFSnBy4i9OlgtNYMXSeimuD3H1MRUswErSGfXS3l1+RVE9I3hzQQ\/wABALtYqBNt2VG1FJlhlgqHlU4PqGttrfqOcK3ADmLzIEcgSlIyImtnI\/4p35C8Pc+oSmQoJIKspyhTsXDKzc3Fo51NBSonViz+sE6KYpRzJu4ZidBu\/TtD2UkcGCDXUpzE5VNo9+3MekG6ynR4ciqsfEKkTE\/1IIzH1CgfWKeI0pVLM0CwUz6u+\/76RJhYM2X4TE5VFXbMln90phTHaJUTvx3B9TJPiKKAoJBKh2H+YpzJwPmI8zixPz7wQVMIlgF3SflA2evOdOgP3glHzJ4doJmYA84MSkwCwEWa7g8mhllJghNbE25AZWmyXinWymZQcQVmCCuHS0qkqGUFSVD5j+0JyLZgajGWWx4inT4hMQQdWhtwni+YhLDKX2b5Qu4qlWcuAnpHtIkSklYKStszH8o0fvCd+3uZu9gaMfpOPTlAK8NF+ao9jlf+vEWJU\/cxkH7vj\/uF6n2jRRVMsAkkqfo31i3TU2d1HyjYCE5U9RNy3SDvDFWQooVcavE2ZmCEic9XxCtagS5ZO0V8PGcApD8gLwwYrw\/MmSmSO0QT6GZT07KCJbJY5NSeZJcwjDgbZbEi4JBuU6mrRIIUp8\/\/AG03Ue+yfX2iOm4kXmKvwimYtmLX7qYfKA1PRzJqic6gnlcW5eUiHvBqGmTdMopVzYK9iS4ilcOmXs8\/JnlDGAsFp51YFJmJKXUSWBsOqjpv8LwyTeGKKSnxJyUWFyo5U9zfzHu8Q1fFcuXnkyJbLQNVgelgbxzWqxabUTh+ImFZB0NgOgAsIpGfGPak4SB3zG7G8YQUiXISEykl2SMoPVuUSYa605tIGCjKwCLAxaryZCW6WjFzb2yi+zOgkGzCKVF4q4tg\/iJKkjzfWKuB4+lKgZunIBzDRh9WahZSlpKSHGhUf0EabUFAlVhhRiRR8PTU+dZTKTzUf0i8uuP+3T\/xOajYRrj1IuXUlJzLDaqLwN\/EeEo3Z4Q4s2o5ETwv0iTqoFlKipizktZhqYQ6uaVzFEAAH5AW9YchjQIUhnzJUPcGE3Ll2IJD\/YRdiJrnudz5i4A+JrNlqAdhl2\/QRLJBKAxA8yvomKyAbqLty6wSw5XlOYkB9hpYae0VWQJKYzcELSjxcziySO7t+oiLj2dmVJcMoIV7ZrfQxUwerMuch7hSspe7hX7eNuMZJFQXLjKkDsP2\/rE73u5lOk+qBaaeUF\/ccxuIJ1VZ4YBQkAJBYi7hVx8jAlUuDM2gSaWXN1+KWpr5VJJUh+6S3oIU6g0TH6xLUNANYgqIUBqHPT92PrE+E+RyogbC+nWMnzAEkpIPMX7faKIU4sejc4qU2KkMZDNSQooJX5cpBV5QN7C3rA\/D61VOorSSkkZX5O142wIAkk2FhffUlI5Ow15wd4up1ro5a15QpMxkgAaLS6gSAHbKm\/WFlATtPUYjMAQIFr1JUSUOxe3L+z3gTKWwUlgSbbaxcpi6cpbTn8oGVcplHX7waoPpnBfmMGCoKSc58z\/LpB94U8BCjMB1sf8AJhrRpHOuJq6U3jnqouYbOUCcuhZ4oLmxdwjMpRA6PC35EdkHtqa8RSSoJUE6G8JtbWFSlJSDcm3PaOtijC0FDhyCzxy6jEyRMXlACwogqLHfaBAFzK1C0ZkjhipUkKEssedo8hgl1lSQ\/jm\/SMhnqGKoQbxGlCJpWkgomedLclX9IIcHVtOnMZyilVmtYiEyRVJIAL2tzi5KIGxhT6YMCDFA0bnZsM4rkLUUJWx2zWftA\/iGgM5K1mYSQHAe1ukczE07JMMCOIpq0CWJIJAZgC5gtlLUP1L7mmF8Q+GQlaAoDlDDTYwVqJTZO0I9QFOT4ZTzBBH1i5hhmL\/2wXESahFZaHEEZW6hPEgiXOE0qJc3gBj0pJqMyN2LCCE+aWKZjGIZEvOhS06Js8Kw4jjosZ3bfJ4liRiakSghWqS49Ip4nxIqcHUXy25RSny1ZTMJ8oijWIAklXOKmPI4nDkrhZdw6vzrENsifMHnBIKNISeGqEkGYTYaQ1YTPK1KQ9iIHIosrBUm4brJ6pxCjqRrCnitHlJIJMNFCHlFtQSIBVyTmIN94y9O7K5FxjE+Yt+KyVKFyAQ3cEfeB6U3DkgDfX96wRrkAZm3a3aIJCylxkzAa2jdxN7LigeJBNSXb6aW\/SLlECUkBzcE9mNh8ogqJgcpSMoJduvL0izh5yuenbf6RRZ2zsuzZJ8NShbJlZu+r7nSC\/EhEyTTr\/MoEk9GFveI+HcSlha5akZvEQUts5000YnWN8WkZMsoXEpISDzJ8yj2dVugETsaoHuVaJLyXAMqVFynUfDmS7scqmdrpJD+yvlGyZTRgdJChqC8cIsVNPLi3qVi\/OSoKINrkfM+8QMQb3g5j1MUrCg+SYM6X\/8Asl+YLj\/MDJ0lZaz22h6GgJjFa4m9CtlhQu2ze\/yeHLF1omU+XMlIBAHr5hvtrCZToykuWIHK\/aDfDs5c5RlHzeU5Uts\/0ELzgn3DxOAkHiL05JBIO0MmDYSmqpFm5XKVcf0kOCOov3gbjOHmWr5HvF7gjGzST1HLmStBS39WqT9feOXYsS5velwfgEoomv8A8hblo8MyVNCvw8SZyieR9yf8w2CGsOZVo\/7ciUHu0V5GIKQtRRozR5Wzi+ROu55CI0ywE2gdtioWXkVGLC8aceb4oB02FmZUTXUNXAi3gxQfKqytusVMSXMk1PkFyB7RAoyKxB6mU6uPqjJTYUrKLtGQCm43MfX9tGQe6DxEaQQlTGza7RelTgrRUbLpUzUZm84uQPzf3gbKXlNk9Is6MVDCJytvrFmlxOZLUFJJcGBkhAJa78oeMJ4YRToFRXqKU6pkj4l8s38ogi4HcJULdRmwKtNbLzLp0JliylqIA0u0KVdNlomTESFAIHLVXaPMV4xVNUJaEhElPwy02T6trAyoxZZdkyw\/JMJbGHPUYWC\/mbJKJgKUqyk89Y0qKGbKlFCF2dzA1SiDm94tyqtTEOWIiY6dlb2nj7yfkm5VxUFMlKQtwo3EB69ZCQl7QanynAGwgTXU6iseU3sIaPq5nD3GvCqT\/wCOkDfUxfo5ISbdngnh2GjwJaDZTB\/aMxCdKkqQk6Ah4y8mc5HpPmGUM0okGXMKD+a4iljWYTGUnL1iWpxJK6qWsDypMVeNsSE5TJs28NTTqXLXCPUBVNMWUdh5geogYokbnbXc9o3pqhYVlUqyre9o0mA5iWLDrd\/2BGii0KMXNEBrkdhzPXpElIp1F3uDeMKeeg\/f1+sTU9lJDd+j294qu56T0aAJyCm3mFuh5e8M+K0hCiXccx8oUlJKSNtwf1ENH4wrSHb+IHT0Umyvr8oVlXkGOw5TjaxKgEQTEF49RMIUUm42+3W\/6RYSxhXImxizrkHEirJ+ajXLI80taZiD0+GYOzEH0gAmcpz5mt82hnp5YzgH4TZXZQIV8iYU6uSULy7A2MGrAmpDrECvY8yFKVO9y+8X5NHMSy0EoOjuUgvsGjBPyPZ9xp848l5ptiTZz76\/SDLE\/iSSzNmqUrIpT235gbHnEMmUygeUWKWnDu+YA\/P9IISKXMcp3t7wm64mjok3I1yngVM2ZXO3tBWXMKnSn\/2+0UJaChIlj4lEu2w5xffKkJTYmw+8NB3cynH7cSgSNUoDyj1MRLLlhoPrF+QpIsQ409efWJKlckvkllIAtd36q5mGQaguaL2iCvmzpigsrJUAB3A0ghKl2fcx4um3jxAIicmPdA34k7i8ZBMyhyjIR\/TiI9Ixew6Y14kVIc+Ud\/ePYyGOPMiqOFHMp8PlpnEeLVKFiR5ZfZ9T1hWxHGJs+YVzFEk84yMhK9XH5fb7RKoU5i3SIKlZRGRkMyGlJiJL+FUk+bT3i5W4aUoExxlPKMjIjy5m9p+858ynKvDRhtInw0lQcpLx7GRPrmO0QQeYQrqoJRn3EBMSxFE4Pl03jIyJtLxjP5jWYwRh2IpEwWfaI8RmHMTzjIyNDogCB4gaew10MS1HmUFNsPkPvGRkWr0DAMyUWHX5f5ciJFSsqmuDr7a6RkZDAaM9LsxAIPuOn7tFqTKIpyM10LSodiGMZGQp2NVOr3Nq4F0qJZxf99m9oHzZqkTCxLEsx30vGRkLxEk0YyyrWJcRXDMEmyiAR20e3YxVxenJyqToDcct48jI70bl2Q+ph3N2JRQsnzEWH66xGNSUajbkNPWMjIf4kQ6hTDFJB6nXvt+sFp0zIkka7d9oyMhDdzW0P9pv54nlOjWYpnID+zARlOSolZ7CMjINOBUb0okjXjYJ2jIyGiBNkoiVRDRkZBTk1EgRkZGR6eqf\/9k=)","fb0c69ed":"We have 5 labels\n\n0. Cassava Bacterial Blight \n1. Cassava Brown Streak Disease (CBSD)\n2. Cassava Green Mottle (CGM)\n3. Cassava Mosaic Disease (CMD)\n4. Healthy\n\nFrom distribution it can be observed that label3 ie CBSD has the highest occurence among the diseases or it could be result of a skew in the data.","56a78b52":"* <div id=\"predict\"><\/div>","d8ef1685":"## Load Tf Records\n\nLoad images and label from tf records for more information on this refer https:\/\/keras.io\/examples\/keras_recipes\/tfrecord\/\n\n","9d73bf73":"## Index\n\n1. [Load Dataset](#LoadDataset)\n2. [EDA](#EDA)\n3. [Load Tf Records](#tfRec)\n4. [View Images and labels](#img_labels)\n5. [Loading Model and Weigths](#mod_weights)\n6. [Training](#train)\n7. [Predicting](#Predict)","081f84b3":"Cassava is the third-largest source of food carbohydrates in the tropics, after rice and maize. Cassava is a major staple food in the developing world, providing a basic diet for over half a billion people. It is one of the most drought-tolerant crops, capable of growing on marginal soils.\n\nEven though they are such tough plants they often suffer from diseases, which migh result in loss for farmers and even starvation.Existing methods of disease detection require farmers to solicit the help of government-funded agricultural experts to visually inspect and diagnose the plants. This suffers from being labor-intensive, low-supply and costly. As an added challenge, effective solutions for farmers must perform well under significant constraints, since African farmers may only have access to mobile-quality cameras with low-bandwidth.\n\nIn this notebook we attemp to classify images of cassava plants into four most commonly occuring diseases and healhty plants as healthy , we are using a dataset of 21,367 labeled images collected during a regular survey in Uganda. Most images were crowdsourced from farmers taking photos of their gardens, and annotated by experts at the National Crops Resources Research Institute (NaCRRI) in collaboration with the AI lab at Makerere University, Kampala.\n","ab1478e4":"<div id=\"EDA\"><\/div>","0c70e354":"## Predicting\n","9abdf44a":"## Images and Labels\n\nLets take a look at the images and labels to get an idea of samples"}}