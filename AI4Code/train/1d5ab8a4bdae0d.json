{"cell_type":{"284193b9":"code","cd22c05c":"code","1e184e75":"code","4d5638b8":"code","82c81172":"code","bf7d65c8":"code","c7923f97":"code","29ccf9a6":"code","f29c851f":"code","6433c9cd":"markdown"},"source":{"284193b9":"import os\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm as lgb\n\nSEED = 1380","cd22c05c":"train = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/test.csv\")\n\nX = train.drop([\"id\", \"target\"], axis=1)\ny = train.target\nX_test = test.drop([\"id\"], axis=1)\n\nprint(X.shape, y.shape, X_test.shape)","1e184e75":"le = LabelEncoder()\n\nX_all = pd.concat([X, X_test], axis=0)\n\ncat_columns = [f\"cat{i}\" for i in range(19)]\n\nfor col in cat_columns:\n    X_all[col] = le.fit_transform(X_all[col])\n    \nX_all","4d5638b8":"X = X_all.iloc[:len(train), :]\nX_test = X_all.iloc[len(train):, :]","82c81172":"kf = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)","bf7d65c8":"params = {\n    \"task\": \"train\",\n    \"boosting_type\": \"gbdt\",\n    \"objective\": \"binary\",\n    \"metric\": \"auc\",\n    \"learning_rate\": 0.03,\n    \"num_leaves\": 31,\n    \"feature_fraction\": 0.25,\n    \"bagging_fraction\": 0.85,\n    \"verbosity\": -1,\n    \"seed\": SEED\n}\n\npreds = pd.DataFrame()\n\nfor k, (tr_id, vl_id) in enumerate(kf.split(X, y)):\n    print(\"=\"*70)\n    print(f\"              KFOLD{k+1}\")\n    print(\"=\"*70)\n    \n    X_train, X_valid = X.iloc[tr_id, :], X.iloc[vl_id, :]\n    y_train, y_valid = y.iloc[tr_id], y.iloc[vl_id]\n    \n    l_train = lgb.Dataset(X_train, y_train)\n    l_valid = lgb.Dataset(X_valid, y_valid)\n    \n    model = lgb.train(params=params,\n                      num_boost_round=10000,\n                      early_stopping_rounds=200,\n                      train_set=l_train,\n                      valid_sets=(l_train, l_valid),\n                      verbose_eval=500)\n    pred = model.predict_proba(X_test, num_iteration=model.best_iteration)[:, 1]\n    pred = pd.Series(pred)\n    preds = pd.concat([preds, pred], axis=1)","c7923f97":"pred = preds.mean(axis=1)","29ccf9a6":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-mar-2021\/sample_submission.csv\")\n\nsubmission.target = pred\nsubmission","f29c851f":"submission.to_csv(\"baseline.csv\", index=False)","6433c9cd":"# Submission"}}