{"cell_type":{"182d913c":"code","10d1628d":"code","c4aa9b99":"code","aae29f1f":"code","36b5b2cf":"code","b0e1dc31":"code","4a483f52":"code","44bb7af5":"markdown","f46a70bf":"markdown","0a1d15c1":"markdown","65de2460":"markdown","452ee1d1":"markdown","bf36d8ce":"markdown","370be191":"markdown"},"source":{"182d913c":"# Install the bitfinex_api package\n!pip install bitfinex-tencars","10d1628d":"import bitfinex\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport time\nimport os\n\nimport matplotlib.pyplot as plt","c4aa9b99":"# Create a function to fetch the data\ndef fetch_data(start=1364767200000, stop=1545346740000, symbol='btcusd', interval='1m', tick_limit=1000, step=60000000):\n    # Create api instance\n    api_v2 = bitfinex.bitfinex_v2.api_v2()\n\n    data = []\n    start = start - step\n    while start < stop:\n\n        start = start + step\n        end = start + step\n        res = api_v2.candles(symbol=symbol, interval=interval, limit=tick_limit, start=start, end=end)\n        data.extend(res)\n        print('Retrieving data from {} to {} for {}'.format(pd.to_datetime(start, unit='ms'),\n                                                            pd.to_datetime(end, unit='ms'), symbol))\n        time.sleep(1.5)\n    return data","aae29f1f":"# Define query parameters\npair = 'BTCUSD' # What is the currency pair we are interested in\nbin_size = '1m' # This is the resolution at which we request the data\nlimit = 1000 # How many data points per call are we asking for\ntime_step = 1000 * 60 * limit # From the above calulate the size of each sub querry\n\n# Fill in the start and end time of interest and convert it to timestamps\nt_start = datetime.datetime(2019, 10, 1, 0, 0)\nt_start = time.mktime(t_start.timetuple()) * 1000\n\nt_stop = datetime.datetime(2019, 10, 20, 23, 59)\nt_stop = time.mktime(t_stop.timetuple()) * 1000\n\n# Create an bitfinex_api instance\napi_v1 = bitfinex.bitfinex_v1.api_v1()\n\n# Collect the data\npair_data = fetch_data(start=t_start, stop=t_stop, symbol=pair, interval=bin_size, tick_limit=limit, step=time_step)","36b5b2cf":"# Remove error messages\nind = [np.ndim(x) != 0 for x in pair_data]\npair_data = [i for (i, v) in zip(pair_data, ind) if v]\n\n# Create pandas data frame and clean data\nnames = ['time', 'open', 'close', 'high', 'low', 'volume']\ndf = pd.DataFrame(pair_data, columns=names)\ndf.drop_duplicates(inplace=True)\ndf.set_index('time', inplace=True)\ndf.sort_index(inplace=True)","b0e1dc31":"df.index = pd.to_datetime(df.index, unit='ms')\n\nfig, ax = plt.subplots(1, 1, figsize=(18, 5))\n\nax.plot(df['close'])\nax.set_xlabel('date', fontsize=16)\nax.set_ylabel('BTC price [USD]', fontsize=16)\nax.set_title('Bitcoin closing price from {} to {}'.format(df.index[0], df.index[-1]))\nax.grid()\n\nplt.show()","4a483f52":"# Path to the old data from the 400+ crypto currency pairs at 1-minute resolution dataset\npath_name = ('..\/input\/392-crypto-currency-pairs-at-minute-resolution\/cryptominuteresolution\/btcusd.csv')\n\n# Load the data\ndf_old = pd.read_csv(path_name, index_col='time')\n\n# Convert timestamp to datetime\ndf_old.index = pd.to_datetime(df_old.index, unit='ms')\n\n# Append the new data to the old data set\ndf_old = df_old.append(df)\n\n# Remove duplicates and sort the data\ndf_old.drop_duplicates(inplace=True)\ndf_old.sort_index(inplace=True)","44bb7af5":"The data we receive may need to be cleaned, e.g. removal of error messages in case of connection problems.\nAlso, the data is in a format that is not very convenient to use so we will in addition move everything to a pandas data frame.","f46a70bf":"Next we import all libraries required for acquiring the data.","0a1d15c1":"Alright looks like we got what we wanted. So if we want to get data for a different time interval or currency pair we can easily do this now by changing the query parameters above accordingly.\nNow finally we can combine ","65de2460":"Retrieving data from the Bitfinex API is straight forward. However, there is one detail we have to be aware of:\nThe API will only return 1000 data points in one query call. \nThis means, if we want Bitcoin data at 1-minute resolution for the last 6 months we will only get data for 1000 minutes instead. To get around this limitation we simply split the larger query into many smaller queries that stay within the 1000 data point limit. Now this comes with another caveat: we are only allowed to make a certain amount of calls to the API otherwise we get blocked. The solution to this is to wait for 1 to 2 seconds after each call and then continue.\nThe function below takes care of all these details. It allows us to specify from when to where, at what resolution and for which crypto currency pair we want to retrieve data.","452ee1d1":"So let's give it a run and download the BTCUSD price data for the first 20 days in October 2019.  ","bf36d8ce":"The [400+ crypto currency pairs at 1-minute resolution](https:\/\/www.kaggle.com\/tencars\/392-crypto-currency-pairs-at-minute-resolution) dataset is updated once per month. However in the fast paced world of crypto currencies this comes close to eternity.\nSo instead of waiting weeks for the next update to backtest your trading strategy with the latest bitcoin price data you can fill the gaps yourself.\nIn the following it is outlined how to do so. We will start by installing a Python library that allows us to interact with the [Bitfinex API](https:\/\/bitfinex.com). If you want more information about the Bitfinex Python library that is used here, have a look at the [GitHub repository](https:\/\/github.com\/akcarsten\/bitfinex_api).","370be191":"So now that we collected & cleaned the data we can have a look at the closing price by plotting it over time."}}