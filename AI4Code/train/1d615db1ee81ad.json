{"cell_type":{"3ea887b9":"code","3642ec61":"code","b819661e":"code","f5f3d0e8":"code","9d03bf91":"code","772b53ef":"code","d83547b2":"code","4cb28436":"code","88637afa":"code","f2613eca":"code","122805b6":"code","9640975e":"code","b5750eee":"code","d2e101b0":"code","e9cb919d":"code","cd677d86":"code","5f90d728":"code","c12e2d89":"code","18aeb7f4":"code","041f145a":"code","aec2ca00":"code","68e87ea3":"code","f64ef117":"code","1f05dc57":"code","dfcccf7c":"code","c3ae941a":"code","ec66e472":"code","bd50ad94":"code","19b24f90":"code","46e0e6d2":"code","e0ac0912":"code","7dd5bb75":"code","790aec2e":"code","1e570dc9":"code","90011115":"code","1ec3b588":"code","e21686a5":"code","6e95e0be":"code","41fee53c":"code","89f965ac":"code","b91c0646":"code","a79bca1e":"code","b5a58be7":"code","1cc9ce07":"code","1f859593":"code","e0cf1248":"code","5444ad20":"code","11ed094e":"code","644b2c27":"code","2dff7014":"code","a6e7a297":"code","254a4695":"code","dc714982":"code","fc0f0adc":"code","9607733c":"code","c125e463":"code","a88ef252":"code","2ad318c2":"code","8d2f9be8":"code","f08c6172":"code","b4002659":"code","a10b7a21":"code","8dfd7c9e":"code","59eda6bf":"code","74c568e0":"code","4018fbda":"code","d7e349d4":"code","59ae1733":"code","7a1aeb42":"code","752cc9eb":"code","d13b60e7":"markdown","b6182719":"markdown","b09e78e4":"markdown","e2e288e1":"markdown","09a7590d":"markdown","6fd85e16":"markdown","fff84d61":"markdown","a3c880c7":"markdown","5dde8bbb":"markdown","0dc61ee9":"markdown","b61b6b58":"markdown","d4b7af7c":"markdown","c228dca8":"markdown","77ec1a42":"markdown","8dfe1c98":"markdown","bfc1fd60":"markdown","a78062cf":"markdown","ed29f09c":"markdown","af009518":"markdown","8855d039":"markdown","f0d53d84":"markdown","6801164c":"markdown","0fdcf25d":"markdown","8068bedb":"markdown","064a1b3c":"markdown","96b43018":"markdown","d14698d3":"markdown","d0232e7b":"markdown","cf4aa741":"markdown","acb86657":"markdown","f18f8f32":"markdown","08b0b94e":"markdown","e833b68b":"markdown","4475399f":"markdown","ebfd151b":"markdown","2bf9400d":"markdown","3b2fd236":"markdown","cb53fb77":"markdown","b56e8da6":"markdown","fb7087cf":"markdown","611947d7":"markdown","6c06a0dd":"markdown","97c909de":"markdown","0115d3b1":"markdown","378a5a88":"markdown","58a5e290":"markdown","70c38518":"markdown","1146303d":"markdown","e24d6194":"markdown","b05fd28f":"markdown","4420e592":"markdown","e444dc60":"markdown","db84425f":"markdown","28b453d2":"markdown","ee75cb5d":"markdown","9767a4f8":"markdown","c869d026":"markdown"},"source":{"3ea887b9":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport time\nimport datetime\nfrom datetime import date\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport lightgbm as lgb\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport warnings\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline\npd.set_option('display.max_columns', None)","3642ec61":"df = pd.read_csv('..\/input\/apartment-rental-offers-in-germany\/immo_data.csv')","b819661e":"df.head(10)","f5f3d0e8":"df.info()","9d03bf91":"df.describe()","772b53ef":"print(f'Number of columns is:',df.shape[1],'and rows is:',df.shape[0])","d83547b2":"def missing_values(df,norows):   # input by the df and the number of rows that you want to show\n    total = df.isnull().sum().sort_values(ascending=False)\n    percent = ((df.isnull().sum().sort_values(ascending=False)\/df.shape[0])*100).sort_values(ascending=False)\n    missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    return(missing_data.head(norows))\n","4cb28436":"missing_values(df,20) # we use the df and the number of rows to show is 20","88637afa":"missing_data = missing_values(df,20)\n# drop the data where the columns contains more than 30%\ndf = df.drop((missing_data[missing_data['Percent'] > 30]).index,1)","f2613eca":"df.dropna(subset=['totalRent'],inplace=True)","122805b6":"df.head()","9640975e":"df.drop(columns=['livingSpaceRange','street','description','facilities','geo_krs','geo_plz','scoutId','regio1','telekomUploadSpeed','telekomTvOffer','pricetrend','regio3','noRoomsRange','picturecount','geo_bln','date',\\\n    'houseNumber','streetPlain','firingTypes','yearConstructedRange'],inplace=True)","b5750eee":"missing_values(df,10)","d2e101b0":"df['condition'].fillna(\"Other\", inplace=True) # fill the NA by Other\ndf['condition'].value_counts()","e9cb919d":"otherscondition = df['condition'].value_counts().tail(3).index\n\nothersregion = list(df['condition'].value_counts().tail(3).index)\ndef editcondition(dflist):\n    if dflist in otherscondition:\n        return 'Other'\n    else:\n        return dflist\n\ndf['condition'] =df['condition'].apply(editcondition)\ndf['condition'].value_counts()","cd677d86":"df[\"yearConstructed\"] = df['yearConstructed'].fillna(df.groupby('condition')['yearConstructed'].transform('mean')).round(0)","5f90d728":"df['numberOfYear'] = date.today().year - df[\"yearConstructed\"]\n","c12e2d89":"othersregion = list(df['regio2'].value_counts().iloc[20:,].index)\ndef edit_region(dflist):\n    if dflist in othersregion:\n        return 'Other'\n    else:\n        return dflist\n\ndf['regio2'] =df['regio2'].apply(edit_region)\ndf['regio2'].value_counts()","18aeb7f4":"regionlist = list(df['regio2'].value_counts().head(25).index)\nregionlist # top 20 city that contains the most data counts","041f145a":"df = df[pd.DataFrame(df['regio2'].tolist()).isin(regionlist).any(1).values]\ndf['regio2'].value_counts()","aec2ca00":"df['baseRent'].describe().round(2)","68e87ea3":"df['totalRent'].describe().round(2)","f64ef117":"df = df[(df['baseRent'] > 200) & (df['baseRent'] < 8000)]\ndf = df[(df['totalRent'] > 200) & (df['totalRent'] < 9000)]\ndf = df[(df['totalRent'] > df['baseRent'])]\ndf = df[(df['totalRent'] - df['baseRent']) < 500]\n","1f05dc57":"fig = px.scatter(df, x='totalRent', y='baseRent')\nfig.show()","dfcccf7c":"df['livingSpace'].describe()","c3ae941a":"df = df[(df['livingSpace'] > 10) & (df['livingSpace'] < 400)]\n","ec66e472":"fig = px.scatter(df, x='baseRent', y='livingSpace')\nfig.show()","bd50ad94":"df['Pricepm2'] = df['baseRent'] \/ df['livingSpace']\ndf['additioncost'] = df['totalRent'] - df['baseRent']","19b24f90":"fig = px.scatter(df, x='totalRent', y='Pricepm2')\nfig.show()","46e0e6d2":"df['serviceCharge'].describe()","e0ac0912":"df = df[(df['serviceCharge'] < 1000)]\n","7dd5bb75":"fig = px.scatter(df, x='totalRent', y='serviceCharge')\nfig.show()","790aec2e":"df = df[(df['floor'] >= -1) & (df['floor'] <= 20)] # Floor should contain only basement - 20th floor\ndf['heatingType'].fillna(df['heatingType'].mode()[0], inplace=True)\ndf['typeOfFlat'].fillna(df['typeOfFlat'].mode()[0], inplace=True)","1e570dc9":"heatinglist = list(df['heatingType'].value_counts().head(10).index)\ndf = df[pd.DataFrame(df['heatingType'].tolist()).isin(heatinglist).any(1).values]","90011115":"df.head()","1ec3b588":"for cols in df.columns:\n    if df[cols].dtype == 'int64' or df[cols].dtype == 'float64':\n        upper_range = df[cols].mean() + 3 * df[cols].std()\n        lower_range = df[cols].mean() - 3 * df[cols].std()\n        \n        indexs = df[(df[cols] > upper_range) | (df[cols] < lower_range)].index\n        df = df.drop(indexs)","e21686a5":"df.drop(['baseRent'],axis=1,inplace=True)","6e95e0be":"missing_values(df,5)","41fee53c":"df.head()","89f965ac":"f, ax = plt.subplots(figsize=(12, 12))\n\nsns.heatmap(df.corr().sort_values(by='totalRent',ascending=False), square = True,fmt='.2f' ,annot = True)","b91c0646":"df.drop(['cellar','floor','garden'],axis=1,inplace=True)","a79bca1e":"fig,ax = plt.subplots(figsize=(10,6))\nsns.distplot(df['totalRent'],fit=norm)","b5a58be7":"fig,ax = plt.subplots(figsize=(10,6))\nsns.distplot(df['livingSpace'],fit=norm)","1cc9ce07":"df.head()","1f859593":"countpie = df['regio2'].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": countpie.index,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"City\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Pie chart of all the City ratio in the dataset\",\n    }\n}\niplot(fig)","e0cf1248":"countpie = df['regio2'].value_counts().iloc[1:,]\n\nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": countpie.index,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"City\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Pie chart of all the City ratio in the dataset exclude 'Other'\",\n    }\n}\niplot(fig)","5444ad20":"plotter = df.groupby('regio2')['totalRent'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['regio2'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['regio2'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['regio2'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average rental per month\", \n                   xaxis=dict(title='City'),\n                   yaxis=dict(title='Cost of rental')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","11ed094e":"rentmean = df.groupby(['regio2'])['totalRent'].mean().sort_index()\n\nfig = px.histogram(x = df['regio2'].value_counts().sort_index().index,\n                   y = rentmean,\n                   color= df['regio2'].value_counts().sort_index().index\n             )\nfig.update_xaxes(title=\"City\")\nfig.update_yaxes(title = \"Average rental per month\")\nfig.show()","644b2c27":"plotter = df.groupby('regio2')['Pricepm2'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['regio2'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['regio2'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['regio2'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average rental per month compare by area per square meter\", \n                   xaxis=dict(title='City'),\n                   yaxis=dict(title='Euro\/square meter')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","2dff7014":"plotter = df.groupby('condition')['totalRent'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['condition'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['condition'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['condition'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average rental per month group by apartment condition\", \n                   xaxis=dict(title='Apartment Condition'),\n                   yaxis=dict(title='Cost of rental')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","a6e7a297":"plotter = df.groupby('regio2')['livingSpace'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['regio2'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['regio2'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['regio2'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average living space group by city\", \n                   xaxis=dict(title='City'),\n                   yaxis=dict(title='Average Living Space')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","254a4695":"countpie = df['heatingType'].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": countpie.index,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"City\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Pie chart of all the City ratio in the dataset\",\n    }\n}\niplot(fig)","dc714982":"plotter = df.groupby('heatingType')['totalRent'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['heatingType'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['heatingType'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['heatingType'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average rental group by heating type\", \n                   xaxis=dict(title='Heating Type'),\n                   yaxis=dict(title='Average Rental Cost')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","fc0f0adc":"countpie = df['newlyConst'].value_counts()\ncountpie = countpie.sort_index() \nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": ['False','True'],\n      \"domain\": {\"x\": [0, .5]},\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Percentage of the residence is newly constructed or not\",\n    }\n}\niplot(fig)","9607733c":"constructmean = df.groupby(['newlyConst'])['totalRent'].mean().sort_index()\n\nfig = px.histogram(x = df['newlyConst'].value_counts().sort_index().index,\n                   y = constructmean,\n                   color= df['newlyConst'].value_counts().sort_index().index\n             )\nfig.update_xaxes(title=\"Newly construct or not\")\nfig.update_yaxes(title = \"Rental Cost\")\nfig.show()","c125e463":"plotter = df.groupby('regio2')['additioncost'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['regio2'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['regio2'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['regio2'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Average Addition Cost Per Month (Warmmiete - Kaltmiete)\", \n                   xaxis=dict(title='City'),\n                   yaxis=dict(title='Additional Cost per month')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","a88ef252":"plotter = df.groupby('typeOfFlat')['totalRent'].agg(['mean'])\nplotter.columns = [\"mean\"]\nplotter['typeOfFlat'] = plotter.index\n\ndata = [\n    {\n        'x': plotter['typeOfFlat'],\n        'y': plotter['mean'],\n        'mode': 'markers+text',\n        'text' : plotter['typeOfFlat'],\n        'textposition' : 'bottom center',\n        'marker': {  \n            'size': 20,\n        }\n    }\n]\n\nlayout = go.Layout(title=\"Type of Apartment and Average Rental Cost Per Month\", \n                   xaxis=dict(title='Type Of Rental'),\n                   yaxis=dict(title='Average rental type cost per month')\n                  )\nfig = go.Figure(data = data, layout = layout)\niplot(fig, filename='scatter0')","2ad318c2":"countpie = df['hasKitchen'].value_counts()\n\nfig = {\n  \"data\": [\n    {\n      \"values\": countpie.values,\n      \"labels\": countpie.index,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"City\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .7,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Pie chart of the Apartment has kitchen or not\",\n    }\n}\niplot(fig)","8d2f9be8":"constructmean = df.groupby(['hasKitchen'])['totalRent'].mean().sort_index()\n\nfig = px.histogram(x = df['hasKitchen'].value_counts().sort_index().index,\n                   y = constructmean,\n                   color= df['hasKitchen'].value_counts().sort_index().index\n             )\n             \nfig.update_xaxes(title=\"Has Kitchen\")\nfig.update_yaxes(title = \"Cost of Rental\")\nfig.show()","f08c6172":"predict_df = df.copy()\npredict_df.head()","b4002659":"predict_df.drop(columns=['yearConstructed'],inplace=True)","a10b7a21":"for cols in predict_df.columns:\n    if predict_df[cols].dtype == 'int64' or predict_df[cols].dtype == 'float64':\n        if cols != 'totalRent':\n            predict_df[cols] = ((predict_df[cols] - predict_df[cols].mean())\/(predict_df[cols].std()))\n\npredict_df            ","8dfd7c9e":"columns = []\nfor cols in predict_df.columns:\n    if predict_df[cols].dtype == 'object' or predict_df[cols].dtype == 'bool':\n        columns.append(cols)\n        \ndummies_feature = pd.get_dummies(predict_df[columns])\ndummies_feature.head()","59eda6bf":"predict_df = pd.concat([predict_df, dummies_feature], axis=1)\npredict_df = predict_df.drop(columns=columns)\npredict_df.head()","74c568e0":"move = predict_df['totalRent']\npredict_df.drop(labels=['totalRent'], axis=1,inplace = True)\npredict_df.insert(0, 'totalRent', move)\npredict_df.head()","4018fbda":"X = predict_df.iloc[:,1:].values # Select all the columns, that's not totalRent\ny = predict_df.iloc[:,0].values # Select only totalRent\n\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 123)","d7e349d4":"d_train = lgb.Dataset(x_train, label=y_train) # Load the dataset and test\n\n# parameters for this model\nparams = {\n        'n_estimators': 10000,\n        'objective': 'regression',\n        'metric': 'rmse',\n        'boosting_type': 'gbdt',\n        'max_depth': -1,\n        'learning_rate': 0.01,\n        'subsample': 0.72,\n        'subsample_freq': 4,\n        'feature_fraction': 0.4,\n        'lambda_l1': 1,\n        'lambda_l2': 1,\n        'seed': 46,\n        }\n\nclf = lgb.train(params, d_train, 100)","59ae1733":"y_pred = clf.predict(x_test)\ny_pred","7a1aeb42":"def compute_rmse(model, X, y_true, name):\n    y_pred = model.predict(X)\n    mse = mean_squared_error(y_true, y_pred)\n    rmse = pow(mse,0.5)\n    print(f'Root Mean Squared Error for {name}: {rmse}')","752cc9eb":"compute_rmse(clf, x_train, y_train, 'Training Set')\ncompute_rmse(clf, x_test, y_test, 'Test Set')","d13b60e7":"## Outliers","b6182719":"### Simple Inspection","b09e78e4":"### Feature Engineering\nWe've already created some columns already such as 'numberOfYears'. However, now I'm trying to create more variables for inspect and building a model from new variables later.","e2e288e1":"### Service Charge","09a7590d":"### Other region\nIn other region, It might not have sufficient data so I group them together and put it in Other variable.","6fd85e16":"Because I want to predict rental price ('totalRent') so I should drop all the rows that doesn't consist totalRent","fff84d61":"## Purpose from this kernel.","a3c880c7":"I love to use correlation map to inspect the dataset. Which  variables has the more correlation to the variables that we want to predict.","5dde8bbb":"### Delete columns that doesn't contain useful information","0dc61ee9":"### Selecting only highest 20 city by quantity of data\nI choose only 20 because below that it contains less data to predict anything so I should choose only the top 20 of the number of data","b61b6b58":"What we should focus in the first is the data that we want to predict and what relavance most which is 'KaltMiete' and 'WarmMiete'","d4b7af7c":"## Dealing with the missing values","c228dca8":"I want to normalization the columns that's int or float type","77ec1a42":"This is the end of the kernel, if you love this kernel or could study something from this please upvote! it means a lot for my future opportunity. Moreover, feel free to comment on my mistakes because it would be surely help me to improve my mistakes.\n\nThanks for viewing!","8dfe1c98":"### Spliting the data into train and test","bfc1fd60":"So the difference between refurbrished or newly construct have more rental earning per month at 600 Euro.","a78062cf":"# Germany Rental Prediction - Cleaning, EDA and Prediction","ed29f09c":"Fill NA of 'yearConstructed' with the mean of each type of condition 'condition' because from my perspective if the apartment is not fully_renovated or refurbished it means that it should have a lot of usage year.","af009518":"M\u00fcnchen, Frankfurt am Main, Hamburg, D\u00fcsseldorf, Berlin and K\u00f6ln seem to be the highest rental city","8855d039":"Create a new columns for the price per square meter","f0d53d84":"I've travel from SEA and I don't know how much apartment in the Berlin should cost and it's really tough to find an apartment while I'm staying in Germany for my Master Degree. Furthermore, I need something for my Data Science Portfolio for the job application after graduation. So why not build something from the scratch with the dataset on the Kaggle\n\nSo this kernel will be well written than my previous kernel for other people and using what I've learnt in my master course and other online resources to produce something that will be practical for the real environment.","6801164c":"# Data Virtualization","0fdcf25d":"Now we're finished with Data Cleaning Job so we could virtualization to have a better understanding of our dataset.","8068bedb":"## What we expected from this kernel.\n- Data cleaning to clear the outliers and remove columns that doesn't have high correlation to the prediction\n- Create virtualization to have a better understanding of the data of the rental in Germany.\n- Feature engineering from the original variable to create a better model\n- Create a tool that estimate the house cost predicted by many variables","064a1b3c":"Further opinion, we could create more meaningful virtualization such as seperate rental types or others to make it clearer for the trend of rental cost in Germany","96b43018":"Most of the apartment are newly constructed. Then, I want to know the difference of a price between refurbrished are having a big gap or not","d14698d3":"If it's an object or bool type (True,False). Code below will create the dummies for all of the categorical.","d0232e7b":"### Start with the ratio of each city","cf4aa741":"Checking for the last time, we don't have any missing data left","acb86657":"From the dataset, variables that irrelevant to 'totalRent' are 'cellar','floor' and 'garden' so I would consider drop it.","f18f8f32":"Import all important libraries in this kernel","08b0b94e":"When we're working on any datasets, we need to check on the missing values to make sure the data is ready or not for further analyzation and virutalization.","e833b68b":"The last 3 is not the good condition for the apartnebt fubder so I will group it in 'Other'","4475399f":"Drop the 'baseRent' columns because it has a lot of correlation to 'totalRent'","ebfd151b":"# Cleaning Job\n\nThe boring part of this kernel. It might a bit confuse but what we're trying in this section is dealing with many things such as\n- Outliers\n- Missing Data\n- Drop columns\n- Etc.\nThe result of this part is we will have a better dataset to analyze, virtualization and making a prediction.","2bf9400d":"## Light Gradient Boost\nI've found this model is like Xgboost and it's run much faster, so now I'm trying as much as I could to use this libraries to improve my skills","3b2fd236":"The result of the LGBM is working pretty well and we could use for this model in real life situation and help the other to know how much money their should pay for the apartment they're looking for.","cb53fb77":"### Other condition\nTake a deeper analysis in the condition variable and I fill all of the missing value into 'Other'","b56e8da6":"Move the 'totalRent' column to the first column to make it easier for split the data.","fb7087cf":"Let's check the missing data in this dataframe again before making any other decision.","611947d7":"### Drop and delete what we wouldn't use","6c06a0dd":"Load the dataset to the kernel","97c909de":"Combine those columns together and drop the categorical columns that we created the dummies","0115d3b1":"# Preparing the Data for Machine Learning","378a5a88":"Create the function to show the top 20 missing values by include number of missing values and percentage of it.","58a5e290":"Create the new variables to tell the duration since last renovated or built til the today","70c38518":"# Summary","1146303d":"We might want to seperate the type of rental kind because some of it cost very high per month.","e24d6194":"Check the data is what'we expected or not.","b05fd28f":"Copying the data","4420e592":"Most of the place is not inclde kitchen","e444dc60":"Create the RMSE function to check the score.","db84425f":"# Basic data handling and inspection","28b453d2":"### Basic inspection to check the kurtosis and skewness of the data","ee75cb5d":"As we can see it contains a lot of missing value in some columns so I decide to remove all of the columns that contain missing value more than 20%","9767a4f8":"## Fill all the missing values","c869d026":"Code below I filter and plot the graph repeatly to see the best result and try to remove the outliers that doesn't make sense to the df"}}