{"cell_type":{"0e90dc2a":"code","18b90e6c":"code","71972c2a":"code","51ed7f97":"code","f4218a43":"code","db9f9681":"code","f3c4065b":"code","75d7a930":"code","b50bc8ab":"code","1d9f91f3":"code","c0f1a5aa":"code","119618c9":"code","8c893bdc":"code","cb36ac22":"code","a1a82f1e":"code","0ca3c8be":"code","ec3865ff":"code","6ac3cb48":"code","4ce98814":"code","9f256f08":"code","b078aa16":"code","f675612b":"code","d7ada521":"code","04399aa2":"markdown","80f9b6db":"markdown","d67a1292":"markdown"},"source":{"0e90dc2a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans","18b90e6c":"import warnings\nwarnings.filterwarnings('ignore')","71972c2a":"data = pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndata.head()","51ed7f97":"#find the number of rows and columns\ndata.shape","f4218a43":"#check the information about dataset\ndata.info()","db9f9681":"#check for missing values\ndata.isnull().sum()","f3c4065b":"#remove unnecessary features \ndata.drop(['CustomerID'],axis = 1,inplace=True)","75d7a930":"data.head()","b50bc8ab":"plt.figure(1, figsize=(15,10))\nn = 0\nfor x in ['Age','Annual Income (k$)','Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1,3,n)\n    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n    sns.distplot(data[x],bins=20)\n    plt.title(\"Distplot of {}\".format(x))\nplt.show()","1d9f91f3":"plt.figure(figsize=(15,8))\nsns.countplot(y='Gender',data=data)\nplt.show()","c0f1a5aa":"plt.figure(1, figsize=(15,8))\nn = 0\nfor cols in ['Age','Annual Income (k$)','Spending Score (1-100)']:\n    n += 1\n    plt.subplot(1,3,n)\n    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n    sns.violinplot(x = cols, y='Gender', data = data)\n    plt.title(\"ViolinPlot of {}\".format(cols))\nplt.show()","119618c9":"#Summary of dataset\ndata.describe()","8c893bdc":"age_18_25 = data.Age[(data.Age>=18)&(data.Age<=25)]\nage_26_35 = data.Age[(data.Age>=26)&(data.Age<=35)]\nage_36_45 = data.Age[(data.Age>=36)&(data.Age<=45)]\nage_46_55 = data.Age[(data.Age>=46)&(data.Age<=55)]\nage_55above = data.Age[data.Age >=56]\n\nagex = ['18-25','26-35','36-45','46-55','55+']\nagey = [len(age_18_25.values),len(age_26_35.values),len(age_36_45.values),len(age_46_55.values),len(age_55above.values)]\n\nplt.figure(figsize=(15,8))\nsns.barplot(x=agex, y=agey, palette='mako')\nplt.title('No. of Customers and Ages')\nplt.xlabel('Age')\nplt.ylabel('Number of Customers')\nplt.show()","cb36ac22":"ss_1_20 = data['Spending Score (1-100)'][(data['Spending Score (1-100)']>=1)&(data['Spending Score (1-100)']<=20)]\nss_21_40 = data['Spending Score (1-100)'][(data['Spending Score (1-100)']>=21)&(data['Spending Score (1-100)']<=40)]\nss_41_60 = data['Spending Score (1-100)'][(data['Spending Score (1-100)']>=41)&(data['Spending Score (1-100)']<=60)]\nss_61_80 = data['Spending Score (1-100)'][(data['Spending Score (1-100)']>=61)&(data['Spending Score (1-100)']<=80)]\nss_81_100 = data['Spending Score (1-100)'][(data['Spending Score (1-100)']>=81)&(data['Spending Score (1-100)']<=100)]\n\nssx = ['1-20','21-40','41-60','61-80','81-100']\nssy = [len(ss_1_20.values),len(ss_21_40.values),len(ss_41_60.values),len(ss_61_80.values),len(ss_81_100.values)]\n\nplt.figure(figsize=(15,8))\nsns.barplot(x=ssx, y=ssy, palette='rocket')\nplt.title('Spending Score')\nplt.xlabel('Score')\nplt.ylabel('Number of Customers having score')\nplt.show()","a1a82f1e":"al_0_30 = data['Annual Income (k$)'][(data['Annual Income (k$)']>=0)&(data['Annual Income (k$)']<=30)]\nal_31_60 = data['Annual Income (k$)'][(data['Annual Income (k$)']>=31)&(data['Annual Income (k$)']<=60)]\nal_61_90 = data['Annual Income (k$)'][(data['Annual Income (k$)']>=61)&(data['Annual Income (k$)']<=90)]\nal_91_120 = data['Annual Income (k$)'][(data['Annual Income (k$)']>=91)&(data['Annual Income (k$)']<=120)]\nal_121_150 = data['Annual Income (k$)'][(data['Annual Income (k$)']>=121)&(data['Annual Income (k$)']<=150)]\n\nalx = ['$ 0-30,000','$ 30,001-60,000','$ 60,001-90,000','$ 90,001-120,000','$ 120,001-150,000']\naly = [len(al_0_30.values),len(al_31_60.values),len(al_61_90.values),len(al_91_120.values),len(al_121_150.values)]\n\nplt.figure(figsize=(15,8))\nsns.barplot(x=alx, y=aly, palette='Spectral')\nplt.title('Annual Incomes')\nplt.xlabel('Income')\nplt.ylabel('Number of Customers')\nplt.show()","0ca3c8be":"#choose the AnnualIncome column and SpendingScore column\n\nX = data.iloc[:,[2,3]].values\nprint(X)","ec3865ff":"#choose number of clusters\n#WCSS --> Within clusters sum of squares\n#find wcss value fro different number of clusters\nwcss = []\nfor i in range(1,11):\n    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n    kmeans.fit(X)\n    \n    wcss.append(kmeans.inertia_)","6ac3cb48":"#plot elbow garph\n\nsns.set()\nplt.plot(range(1,11),wcss,linewidth=2,color='red',marker='8')\nplt.title('Elbow Point Graph')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","4ce98814":"kmeans = KMeans(n_clusters=5,init='k-means++',random_state=42)","9f256f08":"#return a label for each data point based on their cluster\nY = kmeans.fit_predict(X)\nprint(Y)","b078aa16":"# Calculate Silhoutte Score\nfrom sklearn.metrics import silhouette_samples,silhouette_score\nscore = silhouette_score(X, kmeans.labels_, metric='euclidean')\n#\n# Print the score\n#\nprint('Silhouetter Score: %.3f' % score)","f675612b":"from yellowbrick.cluster import silhouette_visualizer\nplt.figure(figsize=(10,8))\nsilhouette_visualizer(KMeans(n_clusters=5, random_state=42), X, colors='yellowbrick')","d7ada521":"#plot all the cluster and their centroids\n\nplt.figure(figsize=(10,8))\nplt.scatter(X[Y==0,0],X[Y==0,1],s=50,c='yellow',label='Cluster 1')\nplt.scatter(X[Y==1,0],X[Y==1,1],s=50,c='cyan',label='Cluster 2')\nplt.scatter(X[Y==2,0],X[Y==2,1],s=50,c='orange',label='Cluster 3')\nplt.scatter(X[Y==3,0],X[Y==3,1],s=50,c='red',label='Cluster 4')\nplt.scatter(X[Y==4,0],X[Y==4,1],s=50,c='violet',label='Cluster 5')\n\n#plot the centroids\nplt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1], s=100, c='black', label='Centroids')\n\nplt.title('Customer Groups')\nplt.xlabel('Annual Income')\nplt.ylabel('Spending Score')\nplt.show()","04399aa2":"## Import the dependencies","80f9b6db":"#### Optimum Number of clusters = 5","d67a1292":"## Data Collection"}}