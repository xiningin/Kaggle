{"cell_type":{"759457fd":"code","79e6f977":"code","3278cab8":"code","d6ff3b30":"code","c880336d":"code","2f61427b":"code","561ea782":"code","d7090154":"code","e5cf4600":"code","641cc775":"code","6b68dc63":"code","b457973a":"code","eb1b9d62":"code","1c23a41e":"code","59979289":"code","6f002cfc":"code","fc6261d6":"code","dafe8410":"code","d0f0ff0e":"code","52f82abf":"code","4c5dc5f6":"code","1ff7b110":"code","dfb449d6":"code","e39bfdb9":"code","050c59f5":"code","eafecf06":"code","a6277809":"code","3b1c8fc1":"code","3f988255":"code","38879d2b":"code","5059a3ca":"code","856fe723":"code","db4995f2":"code","a916251c":"code","4027d105":"code","70b80205":"code","9598f72a":"code","ab8951e4":"code","423c3be7":"code","2cc2c865":"code","b14b429c":"code","bef2e108":"code","3a85b13b":"code","a4c3e086":"code","809f6605":"code","a7d3d374":"code","36bb4f6e":"code","9008f3a3":"code","31d5eada":"code","713cea81":"code","bdd4c183":"code","4722dcd4":"code","cce83f38":"code","0e538c9e":"code","8cca3863":"code","bceb940c":"code","ebd5817d":"code","b719dc62":"code","51ae35fc":"code","ce470b16":"code","bceb4553":"code","d2aac491":"code","032aeec7":"markdown","e437bc86":"markdown","d32f7283":"markdown","8ff7d8e6":"markdown","6dce0fbb":"markdown","2b0c7377":"markdown","a19d26e1":"markdown","399279d6":"markdown","4d42a29a":"markdown","3ee5df11":"markdown","753782bc":"markdown","9fd14805":"markdown","57c63759":"markdown","11c32fd8":"markdown","9003e901":"markdown","cab3e996":"markdown","9fa16cd1":"markdown","e3a9824f":"markdown","66c1e561":"markdown","088e6eb7":"markdown","607d2b2d":"markdown","790a5c99":"markdown","c12ca75b":"markdown","7288f8cc":"markdown","62a90a9e":"markdown","0f95fb60":"markdown","b25f8530":"markdown","9462a2a8":"markdown","29443d6d":"markdown","c3e2f6ea":"markdown","6a132559":"markdown","d8c081bd":"markdown","e015d6dd":"markdown","83f5ecc3":"markdown","86f840da":"markdown","6445b5cf":"markdown","b301ecdb":"markdown"},"source":{"759457fd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","79e6f977":"matches = pd.read_csv('..\/input\/sport-data-set\/matches.csv')\nmatches.head()","3278cab8":"deliveries = pd.read_csv('..\/input\/sport-data-set\/deliveries.csv')\ndeliveries.head()","d6ff3b30":"matches.shape","c880336d":"matches.columns","2f61427b":"matches = matches.drop(['umpire1','umpire2','umpire3'],axis = 1)","561ea782":"matches.columns","d7090154":"matches.info()","e5cf4600":"matches.describe()","641cc775":"matches.isna().sum()","6b68dc63":"matches['city'].unique()","b457973a":"matches[matches.city.isnull()][['city','date']]","eb1b9d62":"matches.city = matches.city.fillna('Dubai')\nmatches.isna().sum()","1c23a41e":"matches[matches.winner.isnull()][['winner','player_of_match','result']]","59979289":"deliveries.head()","6f002cfc":"deliveries.shape","fc6261d6":"deliveries.columns","dafe8410":"deliveries.info()","d0f0ff0e":"deliveries.describe()","52f82abf":"#merging the 2 datasets\nmerge_df = pd.merge(deliveries,matches, left_on='match_id', right_on ='id')\nmerge_df.head(5)","4c5dc5f6":"merge_df.info()","1ff7b110":"merge_df.describe()\n","dfb449d6":"#matches.id.is_unique\n","e39bfdb9":"#matches.set_index('id', inplace=True)\n","050c59f5":"#Summary statistics of matches data\nmatches.describe(include = 'all')","eafecf06":"toss_decision = matches['toss_decision'].value_counts()\ntoss_decision","a6277809":"matches['toss_decision'].value_counts().plot(kind='pie', fontsize=14, autopct='%3.1f%%', \n                                               figsize=(10,10), shadow=True, startangle=135, legend=True, cmap='PiYG')\n\nplt.ylabel('Toss Decision')\nplt.title('Decision taken by captains after winning tosses')","3b1c8fc1":"toss_win = matches['toss_winner'].value_counts()\ntoss_win","3f988255":"matches['toss_winner'].replace(to_replace='Rising Pune Supergiant', value = 'Rising Pune Supergiants', inplace = True)","38879d2b":"toss_win = matches['toss_winner'].value_counts()\ntoss_win","5059a3ca":"plt.figure(figsize = (25,10))\nsns.countplot('toss_winner', data = matches, hue = 'toss_decision')\nplt.title(\"Teams decision to bat first or second after winning toss\", size = 30, fontweight = 'bold')\nplt.xticks(size = 10)\nplt.yticks(size = 15)\nplt.xlabel(\"Toss Winner\", size = 35)\nplt.ylabel(\"Count\", size = 35)","856fe723":"teams = matches['winner'].value_counts()\nteams","db4995f2":"matches['winner'].replace(to_replace='Rising Pune Supergiant', value = 'Rising Pune Supergiants', inplace = True)","a916251c":"teams = matches['winner'].value_counts()\nteams","4027d105":"len(teams) #total number of teams","70b80205":"teams = matches['winner'].value_counts()\nteams","9598f72a":"teams = teams.plot.barh(figsize=(15,8), color = 'blue', fontsize = 15)\n\nteams.set_title('Teams with number of wins\\n', fontsize=15, fontweight='bold')\nteams.set_xlabel('Number of matche win\\n', fontsize=15, fontweight='bold')\n\nteams.invert_yaxis()\n\nfor i in teams.patches:\n    teams.text(i.get_width()+0.5, i.get_y()+.35, i.get_width(), fontsize=15, fontweight='bold', color = 'white')","ab8951e4":"matches['win_by_runs'].max()","423c3be7":"matches.iloc[matches['win_by_runs'].idxmax()]","2cc2c865":"matches['win_by_wickets'].max()","b14b429c":"matches.iloc[matches['win_by_wickets'].idxmax()]","bef2e108":"winbywickets = matches[matches.win_by_wickets==10]\nwinbywickets","3a85b13b":"winbywickets['winner'].value_counts()","a4c3e086":"batting_teams_win = matches.winner[matches.win_by_runs!=0].value_counts()\nbatting_teams_win","809f6605":"batting_teams_win = batting_teams_win.plot(kind = 'barh', figsize = (12,8), color = 'goldenrod', fontsize = 15)\nplt.style.use('dark_background')\n\nbatting_teams_win.set_title('Teams with maximum wins while batting first\\n', fontsize=15, fontweight='bold')\nbatting_teams_win.set_xlabel('Number fo wins\\n', fontsize=15, fontweight='bold')\n\n\nbatting_teams_win.invert_yaxis()\n\nfor i in batting_teams_win.patches:\n    batting_teams_win.text(i.get_width()+0.5, i.get_y()+.40, i.get_width(), fontsize=15, fontweight='bold', color = 'green')","a7d3d374":"batting_teams_win_second = matches.winner[matches.win_by_wickets!=0].value_counts()\nbatting_teams_win_second","36bb4f6e":"batting_teams_win_second = batting_teams_win_second.plot(kind = 'barh', figsize = (12,8), color = 'goldenrod', fontsize = 15)\nplt.style.use('dark_background')\n\nbatting_teams_win_second.set_title('Teams with maximum wins while batting second\\n', fontsize=15, fontweight='bold')\nbatting_teams_win_second.set_xlabel('Number of wins\\n', fontsize=15, fontweight='bold')\n\n\nbatting_teams_win_second.invert_yaxis()\n\nfor i in batting_teams_win_second.patches:\n    batting_teams_win_second.text(i.get_width()+0.5, i.get_y()+.40, i.get_width(), fontsize=15, fontweight='bold', color = 'green')","9008f3a3":"#creating a dataframe with season and winner columns\nwinning_teams = matches[['season','winner']]\n\n#dictionaries to get winners to each season\nwinners_ipl_team = {}\nfor i in sorted(winning_teams.season.unique()):\n    winners_ipl_team[i] = winning_teams[winning_teams.season == i]['winner'].tail(1).values[0]\n    \nwinners_of_IPL = pd.Series(winners_ipl_team)\nwinners_of_IPL = pd.DataFrame(winners_of_IPL, columns=['team'])\n\n\nwinners_of_IPL['team'].value_counts().plot(kind = 'barh', figsize = (15,5), color = 'darkblue')\nplt.title(\"Win most IPL titles\",fontsize=18,fontweight=\"bold\")\nplt.ylabel(\"Teams\", size = 25)\nplt.xlabel(\"Number of titles\", size = 25)\nplt.xticks(size = 15)\nplt.yticks(size = 15)","31d5eada":"mom = matches['player_of_match'].value_counts()[0:10]\nmom","713cea81":"mom = mom.plot(kind = 'bar', figsize = (12,8), color = 'goldenrod', fontsize = 15)\nplt.style.use('dark_background')\n\nmom.set_title('Top 10 playes with MoM award \\n', fontsize=15, fontweight='bold')\nmom.set_xlabel('Number of Awards\\n', fontsize=15, fontweight='bold')\n\n\n\nfor i in mom.patches:\n    mom.text(i.get_x()+.10, i.get_height()+.2, i.get_height(), fontsize=15, fontweight='bold', color = 'white')","bdd4c183":"top_playes = deliveries.groupby('batsman')['batsman_runs'].sum().sort_values(ascending = False)[0:15]\ntop_playes","4722dcd4":"extra_runs = deliveries.groupby('bowler')['extra_runs'].sum().sort_values(ascending = False)[0:15]\nextra_runs","cce83f38":"extra_runs = extra_runs.plot(kind = 'bar', figsize = (12,8), color = 'Grey', fontsize = 15)\nplt.style.use('dark_background')\n\nextra_runs.set_title('Top 10 playes who conceded Most extra runs\\n', fontsize=15, fontweight='bold')\nextra_runs.set_xlabel('Name of playes\\n', fontsize=15, fontweight='bold')\n\n\n\nfor i in extra_runs.patches:\n    extra_runs.text(i.get_x()+.10, i.get_height()+.2, i.get_height(), fontsize=15, fontweight='bold', color = 'white')","0e538c9e":"venue = matches.groupby('venue')['city'].value_counts().sort_values(ascending = False)[0:15]\nvenue","8cca3863":"#city has 33 distinct values while we have 35 venues.\n#Let's find out venues grouped by cities to see which cities have multiple venues\n\ncity_venue = matches.groupby(['city','venue']).count()['season']\ncity_venue_df = pd.DataFrame(city_venue)\ncity_venue_df","bceb940c":"season_matches = matches['season'].value_counts()\nseason_matches","ebd5817d":"season_matches = season_matches.plot(kind = 'bar', figsize = (12,8), color = 'Grey', fontsize = 15)\nplt.style.use('dark_background')\n\nseason_matches.set_title('Season wise total number of matches\\n', fontsize=15, fontweight='bold')\nseason_matches.set_xlabel('Name of matches\\n', fontsize=15, fontweight='bold')\n\n\n\nfor i in season_matches.patches:\n    extra_runs.text(i.get_x()+.5, i.get_height()+.35, i.get_height(), fontsize=15, fontweight='bold', color = 'white')","b719dc62":"result = matches['result'].value_counts()\nresult","51ae35fc":"result = result.plot(kind = 'bar', figsize = (12,8), color = 'purple', fontsize = 15)\nplt.style.use('dark_background')\n\nresult.set_title('match result\\n', fontsize=15, fontweight='bold')\nresult.set_ylabel('% Count of Matches\\n', fontsize=15, fontweight='bold')\n\ntotals = []\n\nfor i in result.patches:\n    totals.append(i.get_height())\n    \ntotal = sum(totals)\n\n\n\nfor i in result.patches:\n    result.text(i.get_x()+.10, i.get_height()+.01, \n                str(round((i.get_height()\/total)*100,2))+'%',\n                fontsize=15, fontweight='bold', color = 'white')","ce470b16":"merge_df.groupby('bowler')['player_dismissed'].count().sort_values(ascending = False).head(10).plot(kind = 'bar', \n                                                color = 'purple', figsize = (15,5))\nplt.title(\"Top Wicket Takers of IPL\", fontsize = 20, fontweight = 'bold')\nplt.xlabel(\"Bowler\", size = 25)\nplt.ylabel(\"Total Wickets Taken\", size = 25)\nplt.xticks(size = 12)\nplt.yticks(size = 12)","bceb4553":"#We will consider players who have played 10 or more seasons\nno_of_balls = pd.DataFrame(merge_df.groupby('batsman')['ball'].count()) #total number of matches played by each batsman\nruns = pd.DataFrame(merge_df.groupby('batsman')['batsman_runs'].sum()) #total runs of each batsman\nseasons = pd.DataFrame(merge_df.groupby('batsman')['season'].nunique()) #season = 1 implies played only 1 season\n\nbatsman_strike_rate = pd.DataFrame({'balls':no_of_balls['ball'],'run':runs['batsman_runs'],'season':seasons['season']})\nbatsman_strike_rate.reset_index(inplace = True)\n\nbatsman_strike_rate['strike_rate'] = batsman_strike_rate['run']\/batsman_strike_rate['balls']*100\nhighest_strike_rate = batsman_strike_rate[batsman_strike_rate.season.isin([10,11])][['season','batsman','strike_rate']].sort_values(by = 'strike_rate',\n                                                                                                            ascending = False)\n\nhighest_strike_rate.head(10)","d2aac491":"plt.figure(figsize = (15,6))\nsns.barplot(x='batsman', y='strike_rate', data = highest_strike_rate.head(10), hue = 'season')\nplt.title(\"Highest strike rates in IPL\",fontsize= 30, fontweight = 'bold')\nplt.xlabel(\"Player\", size = 25)\nplt.ylabel(\"Strike Rate\", size = 25)\nplt.xticks(size = 14)\nplt.yticks(size = 14)","032aeec7":"# Does teams choosed to bat or field first, after winning toss?\n","e437bc86":"MOM awards","d32f7283":"# Individual teams decision to choose bat or field after winning toss.\n","8ff7d8e6":"# Import Data set","6dce0fbb":"Extra Runs in the matches","2b0c7377":"Here, we can see that the missing values of 'player_of_match' and 'winner' column corresponds to result column when there is \nno result of the match.","a19d26e1":"# Analysis of Players","399279d6":"Task-5  EDA-Sports","4d42a29a":"7 Missing values in city and 4 in winner and 4 in playes of match","3ee5df11":"61.2% times teams who have won tosses and have decided to field first","753782bc":"In this database 7 columns are missing in city in 2014 year. ","9fd14805":"# Now, we see match result","57c63759":"Here, again we can see that Rising Pune Supergiantsreted twice so firstly we fix it.","11c32fd8":"# Analysis of IPL team","9003e901":"# Which bowlers have performed the best?\n","cab3e996":"# how manay time teams were won the matches.","9fa16cd1":"# Which team Won most IPL title","e3a9824f":"# GRIP-The Sparks Foundation\n\nData Science and Business Analyts Internship","66c1e561":"# Now, deal with second dataset","088e6eb7":"Dataset = Sports","607d2b2d":"Author:- Prit Rameshbhai Sheta","790a5c99":"MI and CSK have both won 109 and 100 matches\nkochi and delhi won 6 and 10 matches\n","c12ca75b":"# Now, We will merge the 2 datasets for better insights from the data\n","7288f8cc":"Which team won toss maximum times","62a90a9e":"Match when team won by maximum runs and wickets","0f95fb60":"# Analysis of the IPL matches","b25f8530":"Here, we can see that Rising Pune Supergiantsreted twice so firstly we fix it.","9462a2a8":"First batting order","29443d6d":"# checking missing values ","c3e2f6ea":"Maximum wickets","6a132559":"second batting order","d8c081bd":"# Teams Winning by Batting firts and second","e015d6dd":"# Top 15 Playes with MOst Runs In the IPL","83f5ecc3":"# Data preprocessing steps","86f840da":"We can see city column does not contain any missing values","6445b5cf":"Now, we check which teams won the matche by 10 wickets","b301ecdb":"Top 10 venue Details"}}