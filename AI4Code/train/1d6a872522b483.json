{"cell_type":{"d92d1bad":"code","c1d78036":"code","e583bf45":"code","c2568bb5":"code","4b7a69fb":"code","571a66f3":"code","08096150":"code","d966f2fa":"markdown","80b33eb6":"markdown","4a358d7c":"markdown","09dee45e":"markdown","1a6acc11":"markdown","3416cbaf":"markdown","ba610e9d":"markdown"},"source":{"d92d1bad":"import numpy as np \nimport matplotlib.pyplot as plt\nimport cv2\nimport os\nimage_paths = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        image_paths.append(os.path.join(dirname, filename))","c1d78036":"def checkCircularity(image,colored_image):\n    \"\"\"\n    - Yuvarlakl\u0131k test eder.\n    - \"Yol yok\" tabelas\u0131nda yuvarlakl\u0131k olmad\u0131\u011f\u0131ndan kolayca ayr\u0131\u015ft\u0131r\u0131r.\n    - \"10Km\" tabelas\u0131ndaki yuvarlakl\u0131\u011f\u0131n yar\u0131\u00e7ap\u0131 \u00e7ok daha b\u00fcy\u00fck oldu\u011fundan dolay\u0131 ayr\u0131\u015ft\u0131r\u0131r.\n    - \"10km\",\"yolyok\",\"Digerleri\" olmak \u00fczere bilgi d\u00f6nd\u00fcr\u00fcr. \n    - \"Digerleri\": \"Sa\u011fa D\u00f6n\",\"Stop\",\"D\u00fcz Git\" tabelalar\u0131\n    - Ayr\u0131ca \u00e7ember \u00e7izilmi\u015f g\u00f6rsel ve \u00e7emberin orta noktalar\u0131 d\u00f6nd\u00fcr\u00fcr\n    \"\"\"\n    signs = [\"10\",\"Digerleri\",\"Yolyok\"]\n    returned_value = None\n    points = None\n    # \u00c7emberi bulan method\n    circles_sign_1 = cv2.HoughCircles(image,cv2.HOUGH_GRADIENT,1,20,\n                            param1=100,param2=30,minRadius=450,maxRadius=452)\n    if circles_sign_1 is not None:\n        returned_value = signs[0]\n        circles_sign_1 = np.uint16(np.around(circles_sign_1))\n        for i in circles_sign_1[0,:]:\n            # D\u0131\u015f \u00c7ember\n            cv2.circle(colored_image,(i[0],i[1]),i[2],(0,255,0),2)\n            # Orta Nokta\n            cv2.circle(colored_image,(i[0],i[1]),2,(0,0,255),3)\n            # Noktalar tutulur\n            points = [i[0],i[1],i[2]]\n        del circles_sign_1\n    \n    circles_sign_2 = cv2.HoughCircles(image,cv2.HOUGH_GRADIENT,1,20,\n                            param1=100,param2=30,minRadius=187,maxRadius=192)\n    if circles_sign_2 is not None:\n        returned_value = signs[1]\n        circles_sign_2 = np.uint16(np.around(circles_sign_2))\n        for i in circles_sign_2[0,:]:\n            # D\u0131\u015f \u00c7ember\n            cv2.circle(colored_image,(i[0],i[1]),i[2],(0,255,0),2)\n            # Orta Nokta\n            cv2.circle(colored_image,(i[0],i[1]),2,(0,0,255),3)\n            # Noktalar tutulur\n            points = [i[0],i[1],i[2]]\n        del circles_sign_1\n    \n    if returned_value == None:\n        # E\u011fer \u00e7ember yok ise \"Yolyok\" tabelas\u0131d\u0131r.\n        returned_value = signs[2]\n    return returned_value,colored_image,points","e583bf45":"def checkColours(image):\n    \"\"\"\n    - Tabelan\u0131n k\u0131rm\u0131z\u0131 m\u0131 mavi mi i\u00e7erdi\u011fini hesaplayan bir fonksiyon\n    - HSV uzay\u0131na \u00e7ekip filtreler\n    - G\u00f6rselin hangi renkte oldu\u011funa d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n    returned_value = None\n\n    image_ = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n    # K\u0131rm\u0131z\u0131 birinci threshold; Hue (0 - 10)\n    lower1 = np.array([0, 100, 20])\n    upper1 = np.array([10, 255, 255])\n    \n    # K\u0131rm\u0131z\u0131 ikinci threshold; Hue (160 - 180)\n    lower2 = np.array([160,100,20])\n    upper2 = np.array([179,255,255])\n    \n    lower_mask = cv2.inRange(image_, lower1, upper1)\n    upper_mask = cv2.inRange(image_, lower2, upper2)\n    \n    full_mask = lower_mask + upper_mask;\n    # K\u0131rm\u0131z\u0131l\u0131k kontrol\u00fc\n    result_red = cv2.bitwise_and(image_, image_, mask=full_mask)\n    result_red[np.where(full_mask==0)] = 0\n    result_red = cv2.cvtColor(result_red,cv2.COLOR_BGR2GRAY).flatten().sum()\n    if result_red > 5000000:\n        returned_value = \"Kirmizi\"\n\n    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\n     \n    # Mavi Filtre\n    lower_blue = np.array([60, 35, 140])\n    upper_blue = np.array([180, 255, 255])\n \n    # Mavi MAske\n    mask = cv2.inRange(hsv, lower_blue, upper_blue)\n     \n    # MAvilik kontrol\u00fc\n    result_blue = cv2.bitwise_and(hsv, hsv, mask=mask)\n    result_blue[np.where(mask==0)] = 0\n    result_blue = cv2.cvtColor(result_blue,cv2.COLOR_BGR2GRAY).flatten().sum()\n    if result_blue > 5000000:\n        returned_value = \"Mavi\"\n    \n    if returned_value is None:\n        returned_value = 'RenksizYolyok'\n    return returned_value","c2568bb5":"def checkRightOrStraight(image):\n    \"\"\"\n    - Tabelan\u0131n sa\u011fa d\u00f6n\u00fc\u015f m\u00fc d\u00fcz git mi oldu\u011funu ayr\u0131\u015ft\u0131r\u0131r\n    - CannyHarris ile corner noktalar\u0131 \u00e7\u0131kart\u0131l\u0131r.\n    - \"Sa\u011fa d\u00f6n\u00fc\u015f\" noktas\u0131na ait ilk iki nokta ona ait bir \u00f6zellik oldu\u011fundan dolay\u0131 \"D\u00fcz Git\" tabelas\u0131ndan ayr\u0131\u015ft\u0131r\u0131r.\n    - Y\u00f6n bilgisi d\u00f6nd\u00fcr\u00fcr.\n    \"\"\"\n    returned_value = None\n    gray = np.float32(image)\n    dst = cv2.cornerHarris(gray,5,3,0.04)\n    ret, dst = cv2.threshold(dst,0.1*dst.max(),255,0)\n    dst = np.uint8(dst)\n    ret, labels, stats, centroids = cv2.connectedComponentsWithStats(dst)\n    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.001)\n    corners = cv2.cornerSubPix(gray,np.float32(centroids),(5,5),(-1,-1),criteria)\n    if int(corners[1][1]) == int(corners[2][1]):\n        returned_value = 'Saga'\n    else:\n        returned_value = 'Duz'\n    return returned_value","4b7a69fb":"def pointComputer(points):\n    \"\"\"\n    - \u00c7ember Orta noktas\u0131 ile yaz\u0131 yaz\u0131lan b\u00f6lgeyi hesaplayan bir fonksiyon.\n    \"\"\"\n    if points is not None:\n        points[1] = int(points[1]-(points[2]-20))\n        points[0] = int(points[0])\n        points = tuple(points[:2])\n    else:\n        height, width = img.shape[:2]\n        center_y = int(height\/2)\n        center_x = int(width\/2)\n        points = (center_x-60,center_y-230)\n    return points","571a66f3":"image_paths","08096150":"f = plt.figure(figsize=(15,15))\nfor i in range(len(image_paths)):\n    img = cv2.imread(image_paths[i])  # G\u00f6r\u00fcnt\u00fc Okunur\n    g_img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY) # G\u00f6r\u00fcnt\u00fc gri skalaya \u00e7ekilir\n    img_b = cv2.medianBlur(g_img,5) # G\u00f6r\u00fcnt\u00fc blurlan\u0131r.\n    colored_image = img.copy()\n    sign,colored_image,points = checkCircularity(img_b,colored_image) # \u00c7emberlik bulur\n    print('Dairesellik: ',sign)\n    renk = checkColours(img) # Renk bulur\n    print('REnk :',renk)\n    yon = checkRightOrStraight(g_img) # Sa\u011f m\u0131 d\u00fcz m\u00fc tabela bulur\n    points = pointComputer(points) # Nokta hesaplar\n    # Bu b\u00f6lgede \u00e7\u0131kard\u0131\u011f\u0131m\u0131z \u00f6znitelikler birle\u015fitirerek ko\u015ful yap\u0131s\u0131lya s\u0131n\u0131fland\u0131r\u0131l\u0131r.\n    if sign == \"10\" :\n        print('10KM TABELASI')\n        cv2.putText(colored_image, '10KM', points, cv2.FONT_ITALIC, 3, (255, 0, 0), 5)\n    elif sign == \"Digerleri\" and renk ==\"Kirmizi\":\n        print(\"STOP TABELASI\")\n        cv2.putText(colored_image, 'STOP AMBLEM\u0130', points, cv2.FONT_ITALIC, 1, (255, 0, 0), 3)\n    elif sign == \"Digerleri\" and renk == \"Mavi\" and yon == \"Saga\":\n        print('SAGA DON TABELASI')\n        cv2.putText(colored_image, 'SAGA DON', points, cv2.FONT_ITALIC, 1, (0, 0, 255), 3)\n    elif sign == \"Digerleri\" and renk == \"Mavi\" and yon == \"Duz\":\n        print('DUZ G\u0130T TABELASI')\n        cv2.putText(colored_image, 'DUZ GIT', points, cv2.FONT_ITALIC, 1, (0, 0, 255), 3)\n    elif sign == \"Yolyok\":\n        print('YOL YOK TABELASI')\n        cv2.putText(colored_image, 'YOL YOK', points, cv2.FONT_ITALIC, 1, (0, 0, 255), 3)\n    f.add_subplot(1,5, i+1)\n    plt.imshow(cv2.cvtColor(colored_image,cv2.COLOR_BGR2RGB))","d966f2fa":"### - Bu fonksiyon sayesinde tabelalar\u0131n renkleri s\u0131n\u0131fland\u0131rlabilmektedir.\n### - \"10KM\" ve \"STOP\" tabelas\u0131 k\u0131rm\u0131z\u0131d\u0131r. \"Sa\u011fa D\u00f6n\" ve \"D\u00fcz Git\" tabelalar\u0131 mavidir. \"Yol Yok\" tabelas\u0131 ise siyah beyaz oldu\u011fundan dolay\u0131 \u00fc\u00e7 farkl\u0131 s\u0131n\u0131fa ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.","80b33eb6":"### - \u00d6ncelikle g\u00f6rselle\u015ftirme i\u00e7in matplotlib fig\u00fcr\u00fc tan\u0131mlanm\u0131\u015ft\u0131r.\n### - G\u00f6r\u00fcnt\u00fc dizinleri olan liste for d\u00f6ng\u00fcs\u00fc kullan\u0131larak d\u00f6nd\u00fcr\u00fclm\u00fc\u015f s\u0131ras\u0131yla a\u015fa\u011f\u0131daki i\u015flemler ger\u00e7ekle\u015ftirilmi\u015ftir:\n#### 1 - G\u00f6r\u00fcnt\u00fc Okunur\n#### 2 - G\u00f6r\u00fcnt\u00fc \u00f6nce gri skalaya \u00e7ekilip daha sonra blurlan\u0131r. Yuvarlakl\u0131\u011f\u0131 alg\u0131lamam\u0131z\u0131 sa\u011flayan \"hough transform\" methodu bu \u015fekilde input almaktad\u0131r.\n#### 3 - Yuvarlakl\u0131k test edilir. \u00c7\u0131kt\u0131lar \"sign\", \u00e7\u0131kt\u0131 g\u00f6rseller \"colored_image\", noktalar ise \"points\" de\u011fi\u015fkeninde tutulmaktad\u0131r.\n#### 4 - Devam\u0131nda renk testi uygulan\u0131r. Renk testi \u00e7\u0131kt\u0131s\u0131 \"renk\" de\u011fi\u015fkeninde tutulur.\n#### 5 - Bu a\u015famada \"D\u00fcz\" ve \"Sa\u011fa D\u00f6n\" testi yap\u0131l\u0131r. \u00c7\u0131kt\u0131lar \"yon\" de\u011fi\u015fkeninde tutulur\n#### 6 - Yuvarlakl\u0131k testinde ortaya \u00e7\u0131kan \u00e7ember verileri, resim \u00fczerine yaz\u0131 yazmak i\u00e7in \u00e7ember \u00fcst noktas\u0131 hesaplan\u0131r.\n#### 7 - Devam\u0131nda ko\u015ful yap\u0131s\u0131 kullan\u0131larak farkl\u0131 g\u00f6r\u00fcnt\u00fcler s\u0131n\u0131fland\u0131r\u0131l\u0131r. Her bir g\u00f6r\u00fcnt\u00fc fig\u00fcr \u00fczerine g\u00f6rselle\u015ftirilir.","4a358d7c":"### - Levhalar\u0131n yuvarlakl\u0131\u011f\u0131n\u0131 \u00f6l\u00e7en bir fonksiyon. \n### - \"Yolyok\" tabelas\u0131nda yuvarlakl\u0131k olmad\u0131\u011f\u0131 i\u00e7in kolayca di\u011ferlerinden ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r.\n### - \"10KM\" tabelas\u0131 di\u011fer tabelalara g\u00f6re farkl\u0131 boyutlarda oldu\u011fu i\u00e7in yar\u0131\u00e7ap\u0131 ve \u00e7ember \u00fczerindeki noktalar\u0131 di\u011fer g\u00f6r\u00fcnt\u00fclere g\u00f6re daha b\u00fcy\u00fck oldu\u011fundan ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r\n### - \"Sa\u011fa D\u00f6n\", \"D\u00fcz Git\" ve \"Stop\" tabelalar\u0131 benzer yuvarlakl\u0131k ve yar\u0131\u00e7apa sahip oldu\u011fundan bu a\u015famada s\u0131n\u0131fland\u0131r\u0131lmam\u0131\u015flard\u0131r.\n### - Ayr\u0131ca alg\u0131lanan tabelalar\u0131n etraf\u0131na \u00e7ember \u00e7izilmi\u015f, \u00e7emberin orta noktas\u0131 ve yar\u0131\u00e7ap\u0131 verileri d\u00f6nd\u00fcr\u00fclm\u00fc\u015ft\u00fcr.","09dee45e":"# G\u00f6r\u00fcnt\u00fc \u0130\u015fleme \u0130le Trafik Levhas\u0131 Tespiti\n### - Bu projede g\u00f6r\u00fcnt\u00fc i\u015fleme teknikleri kullan\u0131larak farkl\u0131 tabelalar birbirinden ay\u0131rt edilmeye a\u00e7l\u0131\u015f\u0131lm\u0131\u015ft\u0131r.\n### - Elimde veriseti olmad\u0131\u011f\u0131 i\u00e7in g\u00f6r\u00fcnt\u00fcler ve tabelalarda birbirinden ayr\u0131\u015ft\u0131r\u0131c\u0131 unsurlar(\u00f6znitelikler) ortaya \u00e7\u0131kar\u0131larak tespit, s\u0131n\u0131fland\u0131rma sa\u011flanm\u0131\u015ft\u0131r.\n### - S\u0131n\u0131fland\u0131rma sa\u011flanmas\u0131 i\u00e7in tabela rengi, tabeladaki noktalar\u0131n birbirine g\u00f6re durumu, yuvarlakl\u0131k \u00f6zellikleri kullan\u0131lm\u0131\u015ft\u0131r.\n#### \u00d6ncelikle k\u00fct\u00fcphaneleri tan\u0131mlay\u0131p, g\u00f6r\u00fcnt\u00fcleri bir liste i\u00e7inde tutal\u0131m.","1a6acc11":"### G\u00f6r\u00fcnt\u00fc dizinlerini g\u00f6rselle\u015ftirelim.","3416cbaf":"### - \u00c7ember orta noktas\u0131 ve yar\u0131\u00e7ap\u0131 kullan\u0131larak \u00e7ember \u00fcs\u00fctne yaz\u0131 yaz\u0131lacak yeri hesaplayan bir fonksiyon","ba610e9d":"## - MAvi renkte olan \"Sa\u011fa D\u00f6n\" ve \"D\u00fcz Git\" tabelalar\u0131n\u0131 s\u0131n\u0131fland\u0131rmak i\u00e7in tasarlanm\u0131\u015ft\u0131r. \n## - CannyHarris ile oklardaki k\u00f6\u015feler alg\u0131lanm\u0131\u015ft\u0131r.\n## - K\u00f6\u015fe noktalar\u0131 aras\u0131ndaki farka bak\u0131larak \"D\u00fcz\" ve \"Sa\u011fa git\" i\u015faretleri ayr\u0131\u015ft\u0131r\u0131lm\u0131\u015ft\u0131r."}}