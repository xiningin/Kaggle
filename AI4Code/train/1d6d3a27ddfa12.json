{"cell_type":{"cf92242f":"code","65975482":"code","b831e421":"code","c8b90660":"code","a313e9bc":"code","48e37724":"code","6eb82f6f":"code","3519021a":"code","f80e55c5":"code","8c6cb84c":"code","4e0f2da8":"code","5db7305f":"code","44c4f245":"code","702da453":"code","b7741f1c":"code","26855ff4":"code","b29528da":"code","13ceaa5d":"code","d78bcd30":"code","c91f242c":"code","e962f3f5":"code","cf6d0e90":"code","01f91f57":"code","a642b029":"code","e5afd6f2":"code","fce0a892":"code","0ac2c22f":"code","7d20dd42":"code","b7b3633e":"code","0c3e408d":"code","f0ab7007":"code","effc0689":"code","79a45313":"code","25cb3969":"code","2fb20bf3":"code","fd45b2c9":"code","ff11746d":"code","964e2e08":"code","409e264f":"code","d533a623":"code","3ce7e60d":"code","ed43f550":"markdown","dac56201":"markdown","ef87e0f5":"markdown","3a2434ee":"markdown","0b2c216b":"markdown","a0122b4a":"markdown","595e5f63":"markdown","a19132e9":"markdown","3ae12700":"markdown","db19313e":"markdown","9f3b35e9":"markdown","897f9c20":"markdown","b433f460":"markdown","538454b1":"markdown","b7dcb77b":"markdown","de2f0b98":"markdown","ca2dc8c0":"markdown","8e2ff17f":"markdown","01febe80":"markdown","703019dd":"markdown","4b8dd7da":"markdown","d78997a3":"markdown","c0f0f4c6":"markdown"},"source":{"cf92242f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","65975482":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest  = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmit = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","b831e421":"df = pd.concat([train, test])","c8b90660":"df.tail()","a313e9bc":"df.describe(percentiles=[.1,.2,.3,.4,.5,.6,.7,.8,.9])","48e37724":"df.describe(include=\"O\")","6eb82f6f":"!pip install japanize_matplotlib\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport japanize_matplotlib\n\nsns.countplot(x=\"Survived\", data=train)\nplt.title(\"\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\u306e\u5272\u5408\", size=25)\n\nplt.xticks([0, 1],[\"\u6b7b\u4ea1\u8005\",\"\u751f\u5b58\u8005\"], size=15)\nplt.yticks(size=15)\n\nplt.xlabel(\"Survived\", size=20)\nplt.ylabel(\"\u4eba\u6570\", size=20, rotation=0, labelpad=30)\n\ndisplay(train[\"Survived\"].value_counts())\ndisplay(train[\"Survived\"].value_counts(normalize=True))","3519021a":"sns.countplot(x=\"Sex\", hue=\"Survived\", data=train)\n\nplt.title(\"\u7537\u5973\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005\", size=25)\nplt.legend([\"\u6b7b\u4ea1\",\"\u751f\u5b58\"])\n\nplt.xlabel(\"Sex\", size=20)\nplt.ylabel(\"\u4eba\u6570\", size=20, rotation=0, labelpad=30)\n\nplt.xticks(size=15)\nplt.yticks(size=15)\n\ndisplay(pd.crosstab(train[\"Sex\"], train[\"Survived\"]).rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))\ndisplay(pd.crosstab(train[\"Sex\"], train[\"Survived\"], normalize=\"index\").rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))","f80e55c5":"sns.countplot(x=\"Pclass\", hue=\"Survived\", data=train)\nplt.legend([\"\u6b7b\u4ea1\",\"\u751f\u5b58\"])\n\nplt.xlabel(\"\u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\", size=20)\nplt.ylabel(\"\u4eba\u6570\", size=20, rotation=0, labelpad=30)\n\nplt.xticks(size=15)\nplt.yticks(size=15)\n\ndisplay(pd.crosstab(train[\"Pclass\"], train[\"Survived\"]).rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))\ndisplay(pd.crosstab(train[\"Pclass\"], train[\"Survived\"], normalize=\"index\").rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))","8c6cb84c":"sns.distplot(train[\"Age\"].dropna(), kde=False, bins=50, label=\"\u5168\u4f53\")\nsns.distplot(train[train[\"Survived\"]==0][\"Age\"].dropna(), kde=False, bins=50, label=\"\u6b7b\u4ea1\")\nsns.distplot(train[train[\"Survived\"]==1][\"Age\"].dropna(), kde=False, bins=50, label=\"\u751f\u5b58\")\n\nplt.title(\"\u4e57\u8239\u5ba2\u306e\u5e74\u9f62\u306e\u5206\u5e03\", size=25)\nplt.xlabel(\"Age\", size=20)\nplt.legend();","4e0f2da8":"# \u5e74\u9f62\u309210\u7b49\u5206\u3057\u3066\u65b0\u3057\u3044\u5909\u6570\u3092\u4f5c\u6210\ntrain[\"CutAge\"] = pd.cut(train[\"Age\"], 10)\ntest[\"CutAge\"] = pd.cut(test[\"Age\"], 10)\n\ndisplay(pd.crosstab(train[\"CutAge\"], train[\"Survived\"]))\ndisplay(pd.crosstab(train[\"CutAge\"], train[\"Survived\"], normalize=True))\ndisplay(pd.crosstab(train[\"CutAge\"], train[\"Survived\"], normalize=\"index\"))","5db7305f":"sns.countplot(x=\"SibSp\", data=train)\nplt.title(\"\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\", size=20);","44c4f245":"# \uff13\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u3057\u305f\u4eba\u306e\u30c7\u30fc\u30bf\u3092\u300c\uff12\u300d\u306b\u307e\u3068\u3081\u308b\ntrain[\"SibSp_0_1_2over\"] = [i if i <= 1 else 2 for i in train[\"SibSp\"]]\ntest[\"SibSp_0_1_2over\"] = [i if i <= 1 else 2 for i in test[\"SibSp\"]]","702da453":"# \u300c\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\u300d \u3068 \u300c\u751f\u5b58\u30fb\u6b7b\u4ea1\u300d\u306e\u95a2\u4fc2\n\nsns.countplot(x=\"SibSp_0_1_2over\", hue=\"Survived\", data=train)\nplt.legend([\"\u6b7b\u4ea1\", \"\u751f\u5b58\"])\nplt.xticks([0,1,2],[\"0\u4eba\",\"1\u4eba\",\"2\u4eba\u4ee5\u4e0a\"], size=12)\nplt.title(\"\u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\u5225\u306e\u6b7b\u4ea1\u8005\u30fb\u751f\u5b58\u8005\u306e\u6570\", size=20)\n\nplt.xlabel(\"\u540c\u4e57\u8005\u6570\", size=20)\nplt.ylabel(\"\u4eba\u6570\", size=20)\n\ndisplay(pd.crosstab(train[\"SibSp_0_1_2over\"], train[\"Survived\"]).rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))\ndisplay(pd.crosstab(train[\"SibSp_0_1_2over\"], train[\"Survived\"], normalize=\"index\").rename(columns={0: \"\u6b7b\u4ea1\u8005\", 1: \"\u751f\u5b58\u8005\"}))","b7741f1c":"sns.countplot(x=\"Parch\", data=train)\nplt.title(\"\u540c\u4e57\u3057\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570\");","26855ff4":"# 0\u4eba\u301c\uff12\u4eba\u306f\u305d\u306e\u307e\u307e\u3001\uff13\u4eba\u4ee5\u4e0a\u306f\u307e\u3068\u3081\u308b\ntrain[\"Parch_0_1_2_3over\"] = [i if i <= 2 else 3 for i in train[\"Parch\"]]\ntest[\"Parch_0_1_2_3over\"] = [i if i <= 2 else 3 for i in test[\"Parch\"]]","b29528da":"sns.countplot(x=\"Parch_0_1_2_3over\", hue=\"Survived\", data=train)\nplt.title(\"\u540c\u4e57\u3057\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u6570\u5225\u306e\u751f\u5b58\u30fb\u6b7b\u4ea1\u8005\u6570\", size=20)\nplt.legend([\"\u6b7b\u4ea1\u8005\",\"\u751f\u5b58\u8005\"])\nplt.xticks([0,1,2,3],[\"\uff10\u4eba\",\"1\u4eba\",\"2\u4eba\",\"3\u4eba\"])\nplt.xlabel(\"Parch\", size=15)\nplt.ylabel(\"count\", size=15)\n\ndisplay(pd.crosstab(train[\"Parch_0_1_2_3over\"], train[\"Survived\"]).rename(columns={0:\"\u6b7b\u4ea1\u8005\u6570\", 1:\"\u751f\u5b58\u8005\u6570\"}))\ndisplay(pd.crosstab(train[\"Parch_0_1_2_3over\"], train[\"Survived\"], normalize=\"index\").rename(columns={0:\"\u6b7b\u4ea1\u8005\u6570\", 1:\"\u751f\u5b58\u8005\u6570\"}))","13ceaa5d":"# train\ntrain[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\n\ntrain[\"IsAlone\"] = 0\ntrain.loc[train[\"FamilySize\"] >= 2, \"IsAlone\"] = 1\n\n# test\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1\n\ntest[\"IsAlone\"] = 0\ntest.loc[train[\"FamilySize\"] >= 2, \"IsAlone\"] = 1","d78bcd30":"sns.countplot(x=\"IsAlone\", hue=\"Survived\",data=train)\nplt.xticks([0,1],[\"\uff11\u4eba\",\"\uff12\u4eba\u4ee5\u4e0a\"])\n\nplt.legend([\"\u6b7b\u4ea1\u8005\",\"\u751f\u5b58\u8005\"])\nplt.title(\"\uff11\u4eba or \uff12\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u5225\u306e\u6b7b\u4ea1\u8005\u6570\u3068\u751f\u5b58\u8005\u6570\")\n\ndisplay(pd.crosstab(train[\"IsAlone\"], train[\"Survived\"]).rename(columns={0:\"\u6b7b\u4ea1\u8005\", 1:\"\u751f\u5b58\u8005\"}))\ndisplay(pd.crosstab(train[\"IsAlone\"], train[\"Survived\"], normalize=\"index\").rename(columns={0:\"\u6b7b\u4ea1\u8005\", 1:\"\u751f\u5b58\u8005\"}))","c91f242c":"sns.distplot(train[\"Fare\"].dropna(), kde=True, hist=True)\nplt.title(\"\u904b\u8cc3\u306e\u5206\u5e03\");\n\n# \u904b\u8cc3\u306f 0 \u301c 50 \u3042\u305f\u308a\u306b\u56fa\u307e\u3063\u3066\u3044\u308b","e962f3f5":"# 4\u30ab\u30c6\u30b4\u30ea\u306e\u4eba\u6570\u3092\u7b49\u3057\u304f\u3059\u308b\ntrain[\"CategoricalFare\"] = pd.qcut(train[\"Fare\"], 4)\ntest[\"CategoricalFare\"] = pd.qcut(test[\"Fare\"], 4)","cf6d0e90":"train[[\"CategoricalFare\", \"Survived\"]].groupby([\"CategoricalFare\"], as_index=False).mean()\n\n# Fare\u304c\u9ad8\u3044\u65b9\u304c\u751f\u5b58\u7387\u304c\u9ad8\u3044","01f91f57":"display(pd.crosstab(train[\"CategoricalFare\"], train[\"Survived\"]).rename(columns={0:\"\u6b7b\u4ea1\u8005\", 1:\"\u751f\u5b58\u8005\"}))\ndisplay(pd.crosstab(train[\"CategoricalFare\"], train[\"Survived\"], normalize=\"index\").rename(columns={0:\"\u6b7b\u4ea1\u8005\", 1:\"\u751f\u5b58\u8005\"}))","a642b029":"# \u656c\u79f0\u62bd\u51fa\u3001set\u3067\u91cd\u8907\u306a\u3057\nset(train[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False))","e5afd6f2":"# \u656c\u79f0\u30ab\u30a6\u30f3\u30c8\ntrain[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False).value_counts()","fce0a892":"train[\"Title\"] = train[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False)\ntest [\"Title\"] = test [\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False)","0ac2c22f":"# Title\u3054\u3068\u306e\u5e73\u5747\u5e74\u9f62\ntrain.groupby(\"Title\").mean()[\"Age\"]\n\n# 4.5\u306e \u300cmaster\u300d \u306f\u5b50\u4f9b\u306e\u656c\u79f0\u3068\u63a8\u6e2c","7d20dd42":"# \u5404\u656c\u79f0\u306b\u3088\u308b\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\n\ndef title_no_num(title):\n    if title == \"Master\":\n        return 1\n    elif title == \"Miss\":\n        return 2\n    elif title == \"Mr\":\n        return 3\n    elif title == \"Mrs\":\n        return 4\n    else:\n        return 5\n\ntrain[\"Title_num\"] = [title_no_num(i) for i in train[\"Title\"]]\ntest [\"Title_num\"] = [title_no_num(i) for i in test [\"Title\"]]","b7b3633e":"set(train[\"Name\"].str.extract(\"([A-Za-z]+)\\.\", expand=False))","0c3e408d":"# Sex \u3068 Embarked \u3092 One-Hot\ntrain = pd.get_dummies(train, columns=[\"Sex\",\"Embarked\"])\ntest = pd.get_dummies(test, columns=[\"Sex\",\"Embarked\"])\n\n# drop\ntrain.drop([\"PassengerId\",\"Name\",\"Cabin\",\"SibSp\",\"Parch\",\"Ticket\",\"CutAge\",\"CategoricalFare\",\"Title\"], axis=1, inplace=True)\ntest.drop([\"PassengerId\",\"Name\",\"Cabin\",\"SibSp\",\"Parch\",\"Ticket\",\"CutAge\",\"CategoricalFare\",\"Title\"], axis=1, inplace=True)","f0ab7007":"X = train.drop([\"Survived\"], axis=1)\nY = train[\"Survived\"]","effc0689":"from sklearn.model_selection import train_test_split\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(X, Y, random_state=0, test_size=0.3)","79a45313":"import lightgbm as lgb\n\nlgb_train = lgb.Dataset(train_x, train_y)\nlgb_valid = lgb.Dataset(valid_x, valid_y)\n\nlgb_params = {\"object\": \"binary\",\n              \"metric\":\"binary_logloss\",\n              \"learning_rate\": 0.2}\n\nevals_result = {}\n\nmodel = lgb.train(params=lgb_params,\n                  train_set=lgb_train,\n                  valid_sets=[lgb_train, lgb_valid],\n                  verbose_eval=10,\n                  early_stopping_rounds=20,\n                  evals_result=evals_result\n                 )","25cb3969":"# valid_x \u306e \u63a8\u8ad6\noof = (model.predict(valid_x) > 0.5).astype(int)\noof","2fb20bf3":"from sklearn.metrics import accuracy_score\n\n# \u4e88\u6e2c\nprint(\"score\uff1a\", round(accuracy_score(valid_y, oof)*100, 2), \"%\")","fd45b2c9":"plt.plot(evals_result[\"training\"][\"binary_logloss\"], label=\"train_loss\")\nplt.plot(evals_result[\"valid_1\"][\"binary_logloss\"], label=\"valid_loss\")\nplt.legend();","ff11746d":"pred = (model.predict(test, num_iteration=model.best_iteration) > 0.5).astype(int)\nsubmit[\"Survived\"] = pred\n\nsubmit.to_csv(\"submission_hold_out.csv\", index=False)","964e2e08":"import lightgbm as lgb\nfrom sklearn.model_selection import KFold\n\n# 5\u5206\u5272\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nkf = KFold(n_splits=5, shuffle=True, random_state=0)\n\n# \u30b9\u30b3\u30a2\nscores = []\n\n# \u30e2\u30c7\u30eb\nmodels = []\n\n# \uff15\u56de\u691c\u8a3c\nfor i, (tr_idx, vl_idx) in enumerate(kf.split(X, Y)):\n    print(f\"fold:{i + 1}\")\n    \n    # \u5206\u5272\n    train_x, valid_x = X.iloc[tr_idx], X.iloc[vl_idx]\n    train_y, valid_y = Y.iloc[tr_idx], Y.iloc[vl_idx]\n    \n    # lgb.Dataset\n    lgb_train = lgb.Dataset(train_x, train_y)\n    lgb_valid = lgb.Dataset(valid_x, valid_y)\n\n    # parameter\n    lgb_params = {\"object\": \"binary\",\n                  \"metric\":\"binary_logloss\",\n                  \"learning_rate\": 0.2}\n    \n    # learning\n    model = lgb.train(params=lgb_params,\n                      train_set=lgb_train,\n                      valid_sets=[lgb_train, lgb_valid],\n                      early_stopping_rounds=20,\n                      verbose_eval=10\n                     )\n    \n    oof = (model.predict(valid_x) > 0.5).astype(int)\n    \n    scores.append(round(accuracy_score(valid_y, oof)*100, 2))\n    \n    models.append(model)\n    \n    print(\"-\"*82)\n\nprint(scores, \"\u5e73\u5747score:\", round(np.mean(scores), 2))","409e264f":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ntest_pred = np.zeros((len(test), 5))\n\nfor i, model in enumerate(models):\n    pred = (model.predict(test, num_iteration=model.best_iteration) > 0.5).astype(int)\n    test_pred[:, i] = pred","d533a623":"test_pred[:,4]","3ce7e60d":"pred = (np.mean(test_pred, axis=1) > 0.5).astype(int)\n\nsubmit[\"Survived\"] = pred\nsubmit.to_csv(\"submission_crossvalidate.csv\", index=False)","ed43f550":"# \u7537\u5973\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005","dac56201":"# \u540c\u4e57\u3057\u3066\u3044\u308b\u5144\u5f1f\u30fb\u914d\u5076\u8005\u306e\u6570\uff08\u6a2a\u306e\u95a2\u4fc2\uff09","ef87e0f5":"- \uff11\u4eba\u3067\u4e57\u8239\u3057\u305f\u4eba\u306f\u7d04600\u4eba\n- \u5144\u5f1f\u30fb\u914d\u5076\u8005\uff11\u4eba\u3068\u4e00\u7dd2\u306b\u4e57\u8239\u3057\u305f\u4eba\u306f\u7d04200\u4eba\n- \uff13\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u3057\u305f\u4eba\u306f\u5c11\u306a\u3044","3a2434ee":"# \u540d\u524d","0b2c216b":"- \u540c\u4e57\u8005\uff10\u4eba\u304c700\u4eba\u5f31\n- \u540c\u4e57\u8005\uff11\u4eba\u304c\u7d04100\u4eba\n- \u540c\u4e57\u8005\uff12\u4eba\u304c100\u4eba\u5f31\n- \u540c\u4e57\u8005\uff13\u4eba\u4ee5\u4e0a\u306f\u3001\u307b\u3068\u3093\u3069\u3044\u306a\u3044","a0122b4a":"-  0 \u301c  8\uff1a\u6b7b\u4ea1\u738732%\n-  8 \u301c 16\uff1a\u6b7b\u4ea1\u738758%\n- 16 \u301c 24\uff1a\u6b7b\u4ea1\u738764%\n- 24 \u301c 32\uff1a\u6b7b\u4ea1\u738761%\n- 32 \u301c 40\uff1a\u6b7b\u4ea1\u738755%\n- 40 \u301c 48\uff1a\u6b7b\u4ea1\u738765%\n- 48 \u301c 56\uff1a\u6b7b\u4ea1\u738753%\n- 56 \u301c 64\uff1a\u6b7b\u4ea1\u738762%\n- 64 \u301c 72\uff1a\u6b7b\u4ea1\u7387100%\n- 72 \u301c 80\uff1a\u6b7b\u4ea1\u738750%\n- --\n- \uff11\u756a\u82e5\u3044\u968e\u7d1a\u304c\u751f\u5b58\u7387\u304c\u9ad8\u3044","595e5f63":"-\u3000\u304a\u3088\u305d \u6b7b\u4ea1\u8005\uff16\u3000\uff1a\u3000\u751f\u5b58\uff14","a19132e9":"# \u30c1\u30b1\u30c3\u30c8\u30af\u30e9\u30b9\u5225\u306e\u6b7b\u4ea1\u8005\u3068\u751f\u5b58\u8005","3ae12700":"- 1st\u30af\u30e9\u30b9\u306f\u751f\u5b58\u7387\u306e\u65b9\u304c\u9ad8\u3044\n- 1st\u30af\u30e9\u30b9\u306e\u6b7b\u4ea1\u7387\u306f \u7d0437\uff05\n- --\n\n- 2nd\u30af\u30e9\u30b9\u306f\u6b7b\u4ea1\u7387\u3068\u751f\u5b58\u7387\u306f\u304a\u3088\u305d\u540c\u3058\n- 2nd\u30af\u30e9\u30b9\u306e\u6b7b\u4ea1\u7387\u306f \u7d0452%\n- --\n\n- 3rd\u30af\u30e9\u30b9\u306f\u4eba\u6570\u304c\u4e00\u756a\u591a\u3044\n- 3rd\u30af\u30e9\u30b9\u306e\u6b7b\u4ea1\u7387\u306f \u7d0475%","db19313e":"# \u524d\u51e6\u7406\uff08\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5909\u63db\uff09","9f3b35e9":"# EDA \u3068 \u7279\u5fb4\u62bd\u51fa","897f9c20":"# \u30db\u30fc\u30eb\u30c9\u30fb\u30a2\u30a6\u30c8","b433f460":"- 15 \u301c 40 \u6b73\u304f\u3089\u3044\u306b\u4eba\u6570\u304c\u96c6\u4e2d\u3057\u3066\u3044\u308b","538454b1":"# \u5e74\u9f62","b7dcb77b":"- \u7537\u306e\u6b7b\u4ea1\u7387\u3000\u3000\u7d0480%\n- \u5973\u306e\u6b7b\u4ea1\u7387\u3000\u3000\u7d0425\uff05\n- \u5168\u4f53\u306e\u6b7b\u4ea1\u7387\u3000\u7d0440\uff05","de2f0b98":"# \u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306b\u4e57\u3063\u3066\u3044\u308b\u4e21\u89aa\u30fb\u5b50\u4f9b\u306e\u6570\uff08\u7e26\u306e\u95a2\u4fc2\uff09","ca2dc8c0":"- 1\u4eba\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u4eba\u306e\u6b7b\u4ea1\u7387\u306f\u751f\u5b58\u7387\u306e\u7d04\uff12\u500d\n- \uff12, 3\u4eba\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u4eba\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044\uff0855%\u300150%\uff09","8e2ff17f":"# \u904b\u8cc3","01febe80":"# K\u5206\u5272\u4ea4\u5dee\u691c\u8a3c","703019dd":"- \uff12\u4eba\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u4eba\u306e\u751f\u5b58\u7387\u304c\u9ad8\u3044\uff0853.5%\uff09","4b8dd7da":"# \uff11\u4eba\u3067\u4e57\u8239\u3057\u3066\u308b\u304b\u3001\uff12\u4eba\u4ee5\u4e0a\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u304b","d78997a3":"- \u5358\u8eab\u8005\u306f\u6b7b\u4ea1\u7387\u304c\u751f\u5b58\u7387\u306e\uff12\u500d\u4ee5\u4e0a\n- \uff12\u4eba\u4ee5\u4e0a\u306f\u534a\u3005","c0f0f4c6":"# \u751f\u5b58\u8005"}}