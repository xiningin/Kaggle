{"cell_type":{"284c1c25":"code","090abea9":"code","d0030359":"code","60d6dea1":"code","32a7bbe2":"code","8b51aea2":"code","4bba57b8":"code","f7d6d181":"code","bf0058df":"code","d62718af":"code","afec8e60":"code","1ec7b961":"code","11c85272":"code","0460890c":"code","eba278e5":"code","2171c826":"code","137bdf7b":"code","e2180669":"code","172fea44":"code","ee55f433":"code","9ca6777f":"code","af2cbf01":"code","0b56bc46":"code","a73f3ba3":"code","846f1fc9":"code","e7bbe5cb":"code","58813213":"code","32d2d3bd":"code","e50501c3":"code","8c9315e1":"code","979f9b2b":"code","b1f832c9":"code","0ac4d241":"code","fc6f1ead":"code","55937df8":"code","b1a77baf":"code","7649a6df":"code","c2a7ce34":"code","34eb22de":"code","74f7c126":"code","7e5de334":"code","6fcf0fac":"code","cd60cb51":"code","96343b24":"code","69654efd":"code","02185e7e":"code","b0907a87":"code","237055e7":"code","1ad40b90":"code","fd7f4f20":"code","a029056d":"code","eaad0618":"code","4411f646":"code","aff3aff3":"code","ce3db861":"code","4e23a926":"code","c5e92ae3":"code","db133e85":"code","d2aa9608":"code","9cdadd42":"code","669f305c":"code","c2ae24cb":"code","a684605e":"code","c7734280":"code","e531e230":"code","64752cdc":"code","afe2c994":"code","e26b31ff":"code","4e794ba3":"code","3ff5f993":"code","59702af0":"code","13391aeb":"code","9f5c1d3c":"code","f1b45b77":"code","bbc21f72":"code","82d60014":"code","68024719":"code","d081329f":"code","c2624791":"code","e8aba5a9":"code","0084100f":"code","a3a569db":"code","566a1f8c":"code","1e271837":"code","9e30865b":"code","368c3dda":"code","6646a4e2":"code","b5f9c89e":"code","4ae12daa":"code","e432ed89":"code","b8b34c59":"code","c3a83c9e":"code","e1b064b9":"code","3129bd43":"code","a1497a64":"code","5c856ccb":"code","e5da3410":"code","51e17700":"code","1d1822d3":"code","40732b97":"code","abb026cc":"code","209609a2":"markdown","eb22eebb":"markdown","77d561aa":"markdown","4ab9c1df":"markdown","c31aa404":"markdown","c04efbf2":"markdown","c8c11cc2":"markdown","29777c31":"markdown","7d6baa9d":"markdown","3e7d60bb":"markdown","b1fa7726":"markdown","67be44d0":"markdown","5b56f75c":"markdown","166289a9":"markdown","3c4e33c9":"markdown","2c0bbf7d":"markdown","a545486c":"markdown","47ba56ce":"markdown","5cb1e0bf":"markdown","07293823":"markdown","d7ef2b80":"markdown","333cb39c":"markdown","00691a0f":"markdown","246fe21c":"markdown","e6e8c9b0":"markdown","b65fa6bd":"markdown","893660cf":"markdown","a8943cfc":"markdown","ee0407b2":"markdown","d53f02b2":"markdown","3e158377":"markdown","0e478da2":"markdown","dc3c169a":"markdown","119c7e0d":"markdown","e19d0c66":"markdown","094bb0fd":"markdown","35ef88d0":"markdown","e26e189c":"markdown","7055ba46":"markdown","b02a176b":"markdown","60eb99c1":"markdown","ef59ad31":"markdown","363d907a":"markdown","f74bf5c2":"markdown","8a7324b1":"markdown","a6a94ff2":"markdown","beaf84ff":"markdown","26538647":"markdown","085abd9a":"markdown","d8d5f15a":"markdown","bd71a682":"markdown","cf85a81a":"markdown","ecc18bf1":"markdown","0b8ca1ea":"markdown","f484b32e":"markdown","e96793be":"markdown","e2cabf05":"markdown","3cccab14":"markdown","c36c2792":"markdown","bf0eaaeb":"markdown","1b995788":"markdown","982038ee":"markdown","988b4bcd":"markdown","3c02e6b2":"markdown","c9f8d597":"markdown","c8aeb97a":"markdown","caefe984":"markdown","3f1a4f31":"markdown","a44e2e3f":"markdown","3cdf90de":"markdown","e8427ab3":"markdown","936b5202":"markdown","9cc0226f":"markdown","725a729e":"markdown","4498f3a4":"markdown","f6a495b9":"markdown","87311459":"markdown","02d24172":"markdown","7ce0dc5c":"markdown","7bc91430":"markdown","f36646a4":"markdown","e354c82e":"markdown","a8c1bd0d":"markdown","ad1d5ab5":"markdown","6b6d35d3":"markdown","5bb253c7":"markdown","1b9a6fbc":"markdown","ee50b955":"markdown","bcea2728":"markdown","21c08901":"markdown","85b5448b":"markdown","b13db7a0":"markdown","9e5dc17f":"markdown","411592d5":"markdown","01586e79":"markdown","388871e6":"markdown","5fcce473":"markdown","bc12fb09":"markdown","f887fbfe":"markdown","e03c566d":"markdown","7bc47b8f":"markdown","354c0015":"markdown","4d9fdef8":"markdown","cdd2eb91":"markdown","a66819ef":"markdown","9c801c95":"markdown","4b49c4ac":"markdown","3262db82":"markdown","49e34228":"markdown","91b92041":"markdown","a4a8b315":"markdown","7ac24b90":"markdown","8feaacdb":"markdown","0b870a33":"markdown","fe834793":"markdown","4eae6dbf":"markdown","72a0c55d":"markdown","5ab062bc":"markdown","428bfd9f":"markdown","cdef6aeb":"markdown","aa4cc02a":"markdown","1c911691":"markdown","ce46db1e":"markdown","bf129236":"markdown","2193ea30":"markdown","7b898e27":"markdown","5e5e4e92":"markdown","2deeb465":"markdown","4490a670":"markdown","dcbaffdd":"markdown","04f25e60":"markdown","4ef4e703":"markdown","6e530880":"markdown"},"source":{"284c1c25":"print(\"This line will be printed.\")","090abea9":"print(\"Hello World\")","d0030359":"x = 1\nif x == 1:\n    # Indented four spaces\n    print(\"x is 1.\")","60d6dea1":"# Modify below to print \"Hello, World\"\nprint(\"Goodbye, World!\")","32a7bbe2":"# Comments are added to code to explain or add content to your code. They are ignored by the complier.\nprint ('Hello World!') # You can even add them to the end of a line. The code before the comment will still be executed.\n\n\"\"\"\nYou\ncan\neven\ndo\nmulti-line\ndocstrings\n\"\"\"\n# These are compiled but are just printed out as strings to the console","8b51aea2":"myint = 7\nprint(myint)","4bba57b8":"myfloat = 7.0\nprint(myfloat)\nmyfloat = float(7)\nprint(myfloat)","f7d6d181":"mystring = 'hello'\nprint(mystring)\nmystring = \"hello\"\nprint(mystring)","bf0058df":"mystring = \"Don't worry about apostrophes\"\nprint(mystring)","d62718af":"one = 1\ntwo = 2\nthree = one + two\nprint(three)\n\nhello = \"hello\"\nworld = \"world\"\nhelloworld = hello + \" \" + world\nprint(helloworld)","afec8e60":"a, b = 3, 4\nprint(a, b)","1ec7b961":"# This will not work!\none = 1\ntwo = 2\nhello = \"hello\"\n\nprint(one + two + hello)","11c85272":"# Change this code\nmystring = None\nmyfloat = None\nmyint = None\n\n# Testing code\nif mystring == \"hello\":\n    print(\"String: %s\" % mystring)\nif isinstance(myfloat, float) and myfloat == 10.0:\n    print(\"Float: %f\" % myfloat)\nif isinstance(myint, int) and myint == 20:\n    print(\"Integer: %d\" % myint)","0460890c":"mylist = []\nmylist.append(1)\nmylist.append(2)\nmylist.append(3)\nprint(mylist[0]) # prints 1\nprint(mylist[1]) # prints 2\nprint(mylist[2]) # prints 3\n\n# Prints out 1, 2, 3\nfor x in mylist:\n    print(x)","eba278e5":"mylist = [1, 2, 3]\nprint(mylist[10])","2171c826":"list_len = len(mylist)\nprint(list_len)","137bdf7b":"list_min = min(mylist)\nlist_max = max(mylist)\nprint(list_min)\nprint(list_max)","e2180669":"mylist.insert(3, 2.5)\nprint(mylist)","172fea44":"mylist.pop(3)\nprint(mylist)","ee55f433":"mylist.remove(2)\nprint(mylist)","9ca6777f":"mylist.extend([6, 7, 8])\nprint(mylist)","af2cbf01":"list_sum = sum(mylist)\nprint(list_sum)","0b56bc46":"print(mylist)\nmylist.sort(reverse=True)\nprint(mylist)\nmylist.sort(reverse=False)\nprint(mylist)","a73f3ba3":"numbers = []\nstrings = []\nnames = [\"John\", \"Eric\", \"Jessica\"]\n\n# Write your code here\nsecond_name = None\n\n\n# This code should write out the filled arrays and the second name in the names list (Eric).\nprint(numbers)\nprint(strings)\nprint(\"The second name on the names list is %s\" % second_name)","846f1fc9":"number = 1 + 2 * 3 \/ 4.0\nprint(number)","e7bbe5cb":"int_div = 5 \/\/ 3\nreal_div = 5.0 \/ 3\nprint(int_div)\nprint(real_div)","58813213":"remainder = 11 % 3\nprint(remainder)","32d2d3bd":"squared = 7 ** 2\ncubed = 2 ** 3\nprint(squared)\nprint(cubed)","e50501c3":"helloworld = \"hello\" + \" \" + \"world\"\nprint(helloworld)","8c9315e1":"lotsofhellos = \"hello\" * 10\nprint(lotsofhellos)","979f9b2b":"even_numbers = [2, 4, 6, 8]\nodd_numbers = [1, 3, 5, 7]\nall_numbers = odd_numbers + even_numbers\nprint(all_numbers)","b1f832c9":"print([1, 2, 3] * 3)","0ac4d241":"x = object()\ny = object()\n\n# TODO: change this code\nx_list = [x]\ny_list = [y]\nbig_list = []\n\nprint(\"x_list contains %d objects\" % len(x_list))\nprint(\"y_list contains %d objects\" % len(y_list))\nprint(\"big_list contains %d objects\" % len(big_list))\n\n# Testing code\nif x_list.count(x) == 10 and y_list.count(y) == 10:\n    print(\"Almost there...\")\nif big_list.count(x) == 10 and big_list.count(y) == 10:\n    print(\"Great!\")","fc6f1ead":"# This prints out \"Hello, John!\"\nname = \"John\"\nprint(\"Hello, %s!\" % name)","55937df8":"# This prints out \"John is 23 years old.\"\nname = \"John\"\nage = 23\nprint(\"%s is %d years old.\" % (name, age))\nprint(\"%s is %03d years old.\" % (name, age))\nprint(\"%s is %3d years old.\" % (name, age))\nprint(\"%s is %2.2f years old.\" % (name, age))","b1a77baf":"# This prints out: A list: [1, 2, 3]\nmylist = [1, 2, 3]\nprint(\"A list: %s\" % mylist)","7649a6df":"# This prints out \"Hello, John!\"\nname = \"John\"\nprint(\"Hello, {}!\".format(name))","c2a7ce34":"# This prints out \"John is 23 years old.\"\nname = \"John\"\nage = 23\nprint(\"{0} is {1:0=2d} years old.\".format(name, age))\nprint(\"{0} is {1:0=3d} years old.\".format(name, age))\nprint(\"{0} is {1:=3d} years old.\".format(name, age))\nprint(\"{0} is {1:=2.2f} years old.\".format(name, age))","34eb22de":"# This prints out: A list: [1, 2, 3]\nmylist = [1, 2, 3]\nprint(\"A list: {}\".format(mylist))","74f7c126":"data = (\"John\", \"Doe\", 53.44)\nformat_string = \"Hello\"\n\nprint(format_string % data)","7e5de334":"astring = \"Hello world!\"\nastring2 = 'Hello world!'","6fcf0fac":"astring = \"Hello world!\"\nprint(\"single quotes are ' '\")\n\nprint(len(astring))","cd60cb51":"astring = \"Hello world!\"\nprint(astring.index(\"o\"))","96343b24":"astring = \"Hello world!\"\nprint(astring.count(\"l\"))","69654efd":"astring = \"Hello world!\"\nprint(astring[3:7])","02185e7e":"astring = \"Hello world!\"\nprint(astring[3:7:2])","b0907a87":"astring = \"Hello world!\"\nprint(astring[3:7])\nprint(astring[3:7:1])","237055e7":"astring = \"Hello world!\"\nprint(astring[::-1])","1ad40b90":"astring = \"Hello world!\"\nprint(astring.upper())\nprint(astring.lower())","fd7f4f20":"astring = \"Hello world!\"\nprint(astring.startswith(\"Hello\"))\nprint(astring.endswith(\"asdfasdfasdf\"))","a029056d":"astring = \"Hello world!\"\nafewwords = astring.split(\" \")","eaad0618":"s = \"Hey there! what should this string be?\"\n# Length should be 20\nprint(\"Length of s = %d\" % len(s))\n\n# First occurrence of \"a\" should be at index 8\nprint(\"The first occurrence of the letter a = %d\" % s.index(\"a\"))\n\n# Number of a's should be 2\nprint(\"a occurs %d times\" % s.count(\"a\"))\n\n# Slicing the string into bits\nprint(\"The first five characters are '%s'\" % s[:5]) # Start to 5\nprint(\"The next five characters are '%s'\" % s[5:10]) # 5 to 10\nprint(\"The thirteenth character is '%s'\" % s[12]) # Just number 12\nprint(\"The characters with odd index are '%s'\" % s[1::2]) #(0-based indexing)\nprint(\"The last five characters are '%s'\" % s[-5:]) # 5th-from-last to end\n\n# Convert everything to uppercase\nprint(\"String in uppercase: %s\" % s.upper())\n\n# Convert everything to lowercase\nprint(\"String in lowercase: %s\" % s.lower())\n\n# Check how a string starts\nif s.startswith(\"Str\"):\n    print(\"String starts with 'Str'. Good!\")\n\n# Check how a string ends\nif s.endswith(\"ome!\"):\n    print(\"String ends with 'ome!'. Good!\")\n\n# Split the string into three separate strings, each containing only a word\nprint(\"Split the words of the string: %s\" % s.split(\" \"))\n\n# Reverse the string\ns_list = list(s)\ns_reversed = ''.join(s_list[::-1])\nprint(\"Reversed string: %s\" % s_reversed)","4411f646":"x = 2\nprint(x == 2) # prints out True\nprint(x == 3) # prints out False\nprint(x < 3) # prints out True","aff3aff3":"name = \"John\"\nage = 23\nif name == \"John\" and age == 23:\n    print(\"Your name is John, and you are also 23 years old.\")\n\nif name == \"John\" or name == \"Rick\":\n    print(\"Your name is either John or Rick.\")\n    \nif type(name) == str:\n    print (\"It is a string!\")\n    \nif isinstance(age,int):\n    print (\"It is an int!\")","ce3db861":"name = \"John\"\nif name in [\"John\", \"Rick\"]:\n    print(\"Your name is either John or Rick.\")","4e23a926":"statement = False\nanother_statement = True\nif statement is True:\n    # Do something\n    pass\nelif another_statement is True: # else if\n    # Do something else\n    pass\nelse:\n    # Do another thing\n    pass","c5e92ae3":"x = 2\nif x == 2:\n    print(\"x equals two!\")\nelse:\n    print(\"x does not equal to two.\")","db133e85":"x = [1, 2, 3]\ny = [1, 2, 3]\nprint(x == y) # prints out True\nprint(x is y) # prints out False","d2aa9608":"print(not False) # prints out True\nprint((not False) == (False)) # prints out False","9cdadd42":"# Change this code\nnumber = 10\nsecond_number = 10\nfirst_array = []\nsecond_array = [1, 2, 3]\n\nif number > 15:\n    print(\"1\")\n\nif first_array:\n    print(\"2\")\n\nif len(second_array) == 2:\n    print(\"3\")\n\nif len(first_array) + len(second_array) == 5:\n    print(\"4\")\n\nif first_array and first_array[0] == 1:\n    print(\"5\")\n\nif not second_number:\n    print(\"6\")","669f305c":"primes = [2, 3, 5, 7]\nfor prime in primes:\n    print(prime)","c2ae24cb":"# Prints out the numbers 0, 1, 2, 3, 4\nfor x in range(5):\n    print(x)\n\n# Prints out 3, 4, 5\nfor x in range(3, 6):\n    print(x)\n\n# Prints out 3, 5, 7\nfor x in range(3, 8, 2):\n    print(x)","a684605e":"# Prints out 0, 1, 2, 3, 4\n\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1  # this is the same as count = count + 1","c7734280":"# Prints out 0, 1, 2, 3, 4\n\ncount = 0\nwhile True:\n    print(count)\n    count += 1\n    if count >= 5:\n        break\n\n# Prints out only odd numbers - 1, 3, 5, 7, 9\nfor x in range(10):\n    # Check if x is even\n    if x % 2 == 0:\n        continue\n    print(x)","e531e230":"# Prints out 0, 1, 2, 3, 4 and then it prints \"count value reached 5\"\n\ncount = 0\nwhile(count < 5):\n    print(count)\n    count +=1\nelse:\n    print(\"count value reached %d\" % count)\n\n# Prints out 1, 2, 3, 4\nfor i in range(1, 10):\n    if(i % 5 == 0):\n        break\n    print(i)\nelse:\n    print(\"this is not printed because for loop is terminated because of break but not due to fail in condition\")","64752cdc":"numbers = [\n    951, 402, 984, 651, 360, 69, 408, 319, 601, 485, 980, 507, 725, 547, 544,\n    615, 83, 165, 141, 501, 263, 617, 865, 575, 219, 390, 984, 592, 236, 105, 942, 941,\n    386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,\n    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,\n    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,\n    958, 609, 842, 451, 688, 753, 854, 685, 93, 857, 440, 380, 126, 721, 328, 753, 470,\n    743, 527\n]\n\n# Your code goes here","afe2c994":"block_head:\n    1st block line\n    2nd block line\n    ...","e26b31ff":"def my_function():\n    print(\"Hello From My Function!\")","4e794ba3":"def my_function_with_args(username, greeting):\n    print(\"Hello, %s , From My Function!, I wish you %s\" % (username, greeting))","3ff5f993":"def sum_two_numbers(a, b):\n    return a + b","59702af0":"# Define our 3 functions\ndef my_function():\n    print(\"Hello From My Function!\")\n\ndef my_function_with_args(username, greeting):\n    print(\"Hello, %s, From My Function! I wish you %s\" % (username, greeting))\n\ndef sum_two_numbers(a, b):\n    return a + b\n\n# Prints a simple greeting\nmy_function()\n\n# Prints \"Hello, John Doe, From My Function!, I wish you a great year!\"\nmy_function_with_args(\"John Doe\", \"a great year!\")\n\n# After this line x will hold the value 3!\nx = sum_two_numbers(1, 2)","13391aeb":"# Modify this function to return a list of strings as defined above\ndef list_benefits():\n    pass\n\n# Modify this function to concatenate to each benefit - \" is a benefit of functions!\"\ndef build_sentence(benefit):\n    pass\n\ndef name_the_benefits_of_functions():\n    list_of_benefits = list_benefits()\n    for benefit in list_of_benefits:\n        print(build_sentence(benefit))\n\nname_the_benefits_of_functions()","9f5c1d3c":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")","f1b45b77":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")\n\nmyobjectx = MyClass()","bbc21f72":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")\n\nmyobjectx = MyClass()\n\nmyobjectx.variable","82d60014":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")\n\nmyobjectx = MyClass()\n\nprint(myobjectx.variable)","68024719":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")\n\nmyobjectx = MyClass()\nmyobjecty = MyClass()\n\nmyobjecty.variable = \"yackity\"\n\n# Then print out both values\nprint(myobjectx.variable)\nprint(myobjecty.variable)","d081329f":"class MyClass:\n    variable = \"blah\"\n\n    def function(self):\n        print(\"This is a message inside the class.\")\n\nmyobjectx = MyClass()\n\nmyobjectx.function()","c2624791":"# Define the Vehicle class\nclass Vehicle:\n    name = \"\"\n    kind = \"car\"\n    color = \"\"\n    value = 100.00\n    def description(self):\n        desc_str = \"%s is a %s %s worth $%.2f.\" % (self.name, self.color, self.kind, self.value)\n        return desc_str\n# Your code goes here\n\n# Test code\nprint(car1.description())\nprint(car2.description())","e8aba5a9":"phonebook = {}\nphonebook[\"John\"] = 938477566\nphonebook[\"Jack\"] = 938377264\nphonebook[\"Jill\"] = 947662781\nprint(phonebook)","0084100f":"phonebook = {\n    \"John\" : 938477566,\n    \"Jack\" : 938377264,\n    \"Jill\" : 947662781\n}\nprint(phonebook)","a3a569db":"phonebook = {\"John\" : 938477566,\"Jack\" : 938377264,\"Jill\" : 947662781}\nfor name, number in phonebook.items():\n    print(\"Phone number of %s is %d\" % (name, number))","566a1f8c":"phonebook = {\n   \"John\" : 938477566,\n   \"Jack\" : 938377264,\n   \"Jill\" : 947662781\n}\ndel phonebook[\"John\"]\nprint(phonebook)","1e271837":"phonebook = {\n   \"John\" : 938477566,\n   \"Jack\" : 938377264,\n   \"Jill\" : 947662781\n}\nphonebook.pop(\"John\")\nprint(phonebook)","9e30865b":"phonebook = {\n    \"John\" : 938477566,\n    \"Jack\" : 938377264,\n    \"Jill\" : 947662781\n}\n\n# Write your code here\n\n\n# Testing code\nif \"Jake\" in phonebook:\n    print(\"Jake is listed in the phonebook.\")\nif \"Jill\" not in phonebook:\n    print(\"Jill is not listed in the phonebook.\")","368c3dda":"mygame\/\nmygame\/game.py\nmygame\/draw.py","6646a4e2":"# game.py\n\n# Import the draw module\nimport draw\n\ndef play_game():\n    ...\n\ndef main():\n    result = play_game()\n    draw.draw_game(result)\n\n# This means that if this script is executed, then main() will be executed\nif __name__ == '__main__':\n    main()","b5f9c89e":"# draw.py\n\ndef draw_game():\n    ...\n\ndef clear_screen(screen):\n    ...","4ae12daa":"# game.py\n\n# Import the draw module\nfrom draw import draw_game\n\ndef main():\n    result = play_game()\n    draw_game(result)","e432ed89":"# game.py\n\n# Import the draw module\nfrom draw import *\n\ndef main():\n    result = play_game()\n    draw_game(result)","b8b34c59":"# game.py\n\n# Import the draw module\nif visual_mode:\n    # In visual mode, we draw using graphics\n    import draw_visual as draw\nelse:\n    # In textual mode, we print out text\n    import draw_textual as draw\n\ndef main():\n    result = play_game()\n    # This can either be visual or textual depending on visual_mode\n    draw.draw_game(result)","c3a83c9e":">>> PYTHONPATH=\/foo python game.py","e1b064b9":"import os\nos.environ['PYTHONPATH']='\/foo'\nimport foo","3129bd43":"import sys\nsys.path.append('\/foo')","a1497a64":"# Import the library\nimport urllib\n\n# Use it\nx = urllib.request.urlopen('https:\/\/www.google.com\/')\nprint(x.read())","5c856ccb":"import urllib\ndir(urllib)","e5da3410":"help(urllib.error)","51e17700":"import foo.bar","1d1822d3":"from foo import bar","40732b97":"__init__.py:\n\n__all__ = [\"bar\"]","abb026cc":"import re\n\n# Your code goes here","209609a2":"![](https:\/\/i.imgur.com\/XpVb37e.jpg)","eb22eebb":"### **Exercise**\n\nAdd <span style=\"color:green\">\"Jake\"<\/span> to the phonebook with the phone number <span style=\"color:orangered\">938273443<\/span>, and remove <span style=\"color:green\">\"Jill\"<\/span> from the phonebook.","77d561aa":"Function **<span style=\"color:purple\">insert<\/span>** inserts an element at specified position.","4ab9c1df":"## **Iterating over dictionaries**\n\nDictionaries can be iterated over, just like lists. However, a dictionary, unlike a list, does not keep the order of the values stored in it. To iterate over key-value pairs, use the following syntax:","c31aa404":"### **Exercise**\n\nThe target of this exercise is to create a string, an integer, and a floating point number. The string should be named <span style=\"color:orangered\">mystring<\/span> and should contain the word \"hello\". The floating point number should be named <span style=\"color:orangered\">myfloat<\/span> and should contain the number 10.0, and the integer should be named <span style=\"color:orangered\">myint<\/span> and should contain the number 20.","c04efbf2":"But what about Hello World?","c8c11cc2":"![](https:\/\/i.imgur.com\/Ccy4Nll.jpg?1)","29777c31":"# **Hello World**\n\nPython is a very simple language, and has a very straightforward syntax. It encourages programmers to program without boilerplate (prepared) code. The simplest directive in Python is the **<span style=\"color:purple\">print<\/span>** directive - it simply prints out a line (and also includes a newline, unlike in C).\n","7d6baa9d":"There is another way to format strings in Python. Using the **<span style=\"color:purple\">format<\/span>** method of the string class is an alternative to the **<span style=\"color:purple\">%<\/span>** operator. Below you can find out how the same tasks can be implemented using the **<span style=\"color:purple\">format<\/span>** method.","3e7d60bb":"## **Comments**","b1fa7726":"When we find the function in the module we want to use, we can read about it more using the **<span style=\"color:purple\">help<\/span>** function, inside the Python interpreter:","67be44d0":"Function **<span style=\"color:purple\">len<\/span>** outputs the lenght of a list.","5b56f75c":"Function **<span style=\"color:purple\">extend<\/span>** adds contents of the second list to the end of the first list.","166289a9":"## **Strings**\n\nStrings are defined either with a single quote or a double quotes.","3c4e33c9":"## **Extending module load path**\n\nThere are a couple of ways we could tell the Python interpreter where to look for modules, aside from the default, which is the local directory and the built-in modules. You could either use the environment variable **<span style=\"color:purple\">PYTHONPATH<\/span>** to specify additional directories to look for modules in, like this:","2c0bbf7d":"![image.png](attachment:image.png)","a545486c":"# **Lists**\n\nLists are very similar to arrays. They can contain any type of variable, and they can contain as many variables as you wish. Lists can also be iterated over in a very simple manner. Here is an example of how to build a list.","47ba56ce":"![](https:\/\/i.imgur.com\/DgFQmF3.jpg)","5cb1e0bf":"### **Exercise**\n\nThe target of this exercise is to create two lists called <span style=\"color:orangered\">x_list<\/span> and <span style=\"color:orangered\">y_list<\/span>, which contain 10 instances of the variables <span style=\"color:orangered\">x<\/span> and <span style=\"color:orangered\">y<\/span>, respectively. You are also required to create a list called <span style=\"color:orangered\">big_list<\/span>, which contains the variables <span style=\"color:orangered\">x<\/span> and <span style=\"color:orangered\">y<\/span>, 10 times each, by concatenating the two lists you have created.","07293823":"Every block line consists of more Python code (even another block), and the block head is of the following format: <span style=\"color:red\">block_keyword block_name(argument1, argument2, ...)<\/span>. Block keywords you already know are **<span style=\"color:purple\">if<\/span>**, **<span style=\"color:purple\">for<\/span>**, and **<span style=\"color:purple\">while<\/span>**.\n\nFunctions in python are defined using the block keyword **<span style=\"color:purple\">def<\/span>**, followed with the function's name as the block's name. For example:","d7ef2b80":"There are two major Python versions, Python 2 and Python 3. Python 2 and 3 are quite different. This tutorial uses Python 3, because it more semantically correct and supports newer features.\n\nFor example, one difference between Python 2 and 3 is the **<span style=\"color:purple\">print<\/span>** statement. In Python 2, the **<span style=\"color:purple\">print<\/span>** statement is not a function, and therefore it is invoked without parentheses. However, in Python 3, it is a function, and must be invoked with parentheses.\n\nhttps:\/\/www.learnpython.org\/en\/Hello%2C_World%21\n\nTo print a string in Python 3, just write:","333cb39c":"That prints out 12, because <span style=\"color:green\">\"Hello world!\"<\/span> is 12 characters long, including punctuation and spaces.","00691a0f":"## **The <span style=\"color:purple\">break<\/span> and <span style=\"color:purple\">continue<\/span> statements**\n\nThe **<span style=\"color:purple\">break<\/span>** command is used to exit a **<span style=\"color:purple\">for<\/span>** loop or a **<span style=\"color:purple\">while<\/span>** loop, whereas **<span style=\"color:purple\">continue<\/span>** is used to skip the current block, and return to the **<span style=\"color:purple\">for<\/span>** or **<span style=\"color:purple\">while<\/span>** statement. A few examples:","246fe21c":"These make a new string with all letters converted to uppercase and lowercase, respectively.","e6e8c9b0":"Alternatively, a dictionary can be initialized with the same values in the following notation:","b65fa6bd":"## **Can we use an <span style=\"color:purple\">else<\/span> clause for loops?**\n\nUnlike languages like C, CPP, etc. we can use **<span style=\"color:purple\">else<\/span>** for loops. When the loop condition of a **<span style=\"color:purple\">for<\/span>** or **<span style=\"color:purple\">while<\/span>** statement fails then code part in **<span style=\"color:purple\">else<\/span>** is executed. If a **<span style=\"color:purple\">break<\/span>** statement is executed inside the **<span style=\"color:purple\">for<\/span>** loop then the **<span style=\"color:purple\">else<\/span>** part is skipped. Note that the **<span style=\"color:purple\">else<\/span>** part is executed even if there is a **<span style=\"color:purple\">continue<\/span>** statement.\n\nHere are a few examples:","893660cf":"This will execute <span style=\"color:red\">game.py<\/span>, and will enable the script to load modules from the <span style=\"color:red\">foo<\/span> directory as well as the local directory.\n\nAnother method is the **<span style=\"color:purple\">sys.path.append<\/span>** function. You may execute it before running an **<span style=\"color:purple\">import<\/span>** command:","a8943cfc":"There are additional variations on defining strings that make it easier to include things such as carriage returns, backslashes and Unicode characters. These are beyond the scope of this tutorial, but are covered in the [Python documentation](https:\/\/docs.python.org\/tutorial\/introduction.html#strings).\n\nSimple operators can be executed on numbers and strings:","ee0407b2":"In this example, the <span style=\"color:magenta\">game<\/span> module imports the <span style=\"color:magenta\">draw<\/span> module, which enables it to use functions implemented in that module. The <span style=\"color:orangered\">main<\/span> function would use the local function <span style=\"color:orangered\">play_game<\/span> to run the game, and then draw the result of the game using a function implemented in the <span style=\"color:magenta\">draw<\/span> module called <span style=\"color:orangered\">draw_game<\/span>. To use the function <span style=\"color:orangered\">draw_game<\/span> from the <span style=\"color:magenta\">draw<\/span> module, we would need to specify in which module the function is implemented, using the dot operator. To reference the <span style=\"color:orangered\">draw_game<\/span> function from the <span style=\"color:magenta\">game<\/span> module, we would need to import the <span style=\"color:magenta\">draw<\/span> module and only then call <span style=\"color:orangered\">draw.draw_game()<\/span>.\n\nWhen the **<span style=\"color:purple\">import draw<\/span>** directive will run, the Python interpreter will look for a file in the directory which the script was executed from, by the name of the module with a <span style=\"color:red\">.py<\/span> prefix, so in our case it will try to look for <span style=\"color:red\">draw.py<\/span>. If it will find one, it will import it. If not, it will continue to look for built-in modules.\n\nYou may have noticed that when importing a module, a <span style=\"color:red\">.pyc<\/span> file appears, which is a compiled Python file. Python compiles files into Python bytecode so that it won't have to parse the files each time modules are loaded. If a <span style=\"color:red\">.pyc<\/span> file exists, it gets loaded instead of the <span style=\"color:red\">.py<\/span> file, but this process is transparent to the user.\n\n## **Importing module objects to the current namespace**\n\nWe may also import the function <span style=\"color:orangered\">draw_game<\/span> directly into the main script's namespace, by using the **<span style=\"color:purple\">from<\/span>** command.","d53f02b2":"# **Variables and Types**\n\nPython is completely object oriented, and not \"statically typed\". You do not need to declare variables before using them, or declare their type. Every variable in Python is an object.\n\nThis tutorial will go over a few basic types of variables.","3e158377":"## **Arithmetic Operators**\n\nJust as any other programming languages, the addition, subtraction, multiplication, and division operators can be used with numbers.","0e478da2":"# **Functions**\n\n## **What are Functions?**\n\nFunctions are a convenient way to divide your code into useful blocks, allowing us to order our code, make it more readable, reuse it and save some time. Also functions are a key way to define interfaces, so programmers can share their code.","dc3c169a":"If a list consists of integer or real numbers, functions **<span style=\"color:purple\">min<\/span>** and **<span style=\"color:purple\">max<\/span>** find the smallest and largest numbers in the list, respectively.","119c7e0d":"**Exercise**","e19d0c66":"## **Writing modules**\n\nModules in Python are simply Python files with a <span style=\"color:red\">.py<\/span> extension. The name of the module will be the name of the file. A Python module can have a set of functions, classes or variables defined and implemented. In the example above, we will have two files:","094bb0fd":"Function **<span style=\"color:purple\">sum<\/span>** calculates the sum of all the elements of a list.","35ef88d0":"Try to predict what the answer will be. Does python follow order of operations?\n\nAnother operator available is the modulo **<span style=\"color:purple\">%<\/span>** operator, which returns the integer remainder of the division. Recall that <span style=\"color:red\">dividend % divisor = remainder<\/span>.","e26e189c":"![](https:\/\/i.imgur.com\/5RuCpWd.jpg)","7055ba46":"## **The <span style=\"color:purple\">not<\/span> operator**\n\nUsing **<span style=\"color:purple\">not<\/span>** before a boolean expression inverts it:","b02a176b":"# **Basic Operators**\n\nThis section explains how to use basic operators in Python.","60eb99c1":"You may have noticed that in this example, <span style=\"color:orangered\">draw_game<\/span> does not precede with the name of the module it is imported from, because we've specified the module name in the **<span style=\"color:purple\">import<\/span>** command.\n\nThe advantages of using this notation is that it is easier to use the functions inside the current module because you don't need to specify which module the function comes from. However, any namespace cannot have two objects with the exact same name, so the **<span style=\"color:purple\">import<\/span>** command may replace an existing object in the namespace.\n\n## **Importing all objects from a module**\n\nWe may also use the **<span style=\"color:purple\">import *<\/span>** command to import all objects from a specific module, like this:","ef59ad31":"## **Using Operators with Lists**\n\nLists can be joined with the addition operators:","363d907a":"## **Numbers**","f74bf5c2":"![](https:\/\/i.imgur.com\/RsXL5vw.jpg)","8a7324b1":"# **Dictionaries**\n\nA dictionary is a data type similar to arrays, but works with keys and values instead of indices. Each value stored in a dictionary can be accessed using a key, which is any type of object (a string, a number, a list, etc.) instead of using its index to address it.","a6a94ff2":"A very basic class would look something like this:","beaf84ff":"Notice that variable assignment is done using a single equals operator **<span style=\"color:purple\">=<\/span>**, whereas comparison between two variables is done using the double equals operator **<span style=\"color:purple\">==<\/span>**. The \"not equals\" operator is marked as **<span style=\"color:purple\">!=<\/span>**.\n\n## **Boolean operators**\n\nThe **<span style=\"color:purple\">and<\/span>** and **<span style=\"color:purple\">or<\/span>** boolean operators allow building complex boolean expressions, for example:","26538647":"# **Conditions**\n","085abd9a":"This is used to determine whether the string starts with something or ends with something, respectively. The first one will print <span style=\"color:blue\">True<\/span>, as the string starts with <span style=\"color:green\">\"Hello\"<\/span>. The second one will print <span style=\"color:blue\">False<\/span>, as the string certainly does not end with <span style=\"color:green\">\"asdfasdfasdf\"<\/span>.","d8d5f15a":"Functions may also receive arguments (variables passed from the caller to the function). For example:","bd71a682":"* Python is open source\n* Python community\n* How to install python\n* What is foss\n* Notebook: Markdown vs. Code\n* Markdown syntax: https:\/\/support.squarespace.com\/hc\/en-us\/articles\/206543587-Markdown-cheat-sheet\n","cf85a81a":"To define a floating point number, you may use one of the following notations:","ecc18bf1":"### **Exercise**\n\nChange the variables in the first section, so that each **<span style=\"color:purple\">if<\/span>** statement resolves as <span style=\"color:blue\">True<\/span>.","0b8ca1ea":"The **<span style=\"color:purple\">for<\/span>** loops can iterate over a sequence of numbers using the **<span style=\"color:purple\">range<\/span>** and **<span style=\"color:purple\">xrange<\/span>** functions. The difference between **<span style=\"color:purple\">range<\/span>** and **<span style=\"color:purple\">xrange<\/span>** is that the **<span style=\"color:purple\">range<\/span>** function returns a new list with numbers of that specified range, whereas **<span style=\"color:purple\">xrange<\/span>** returns an iterator, which is more efficient (Python 3 uses the **<span style=\"color:purple\">range<\/span>** function, which acts like **<span style=\"color:purple\">xrange<\/span>**). Note that the **<span style=\"color:purple\">range<\/span>** function is zero based.","f484b32e":"# **Modules and Packages**\n\nIn programming, a module is a piece of software that has a specific functionality. For example, when building a ping pong game, one module would be responsible for the game logic, and\nanother module would be responsible for drawing the game on the screen. Each module is a different file, which can be edited separately.","e96793be":"The Python script <span style=\"color:red\">game.py<\/span> will implement the game. It will use the function <span style=\"color:orangered\">draw_game<\/span> from the file <span style=\"color:red\">draw.py<\/span>, or in other words, the <span style=\"color:magenta\">draw<\/span> module, that implements the logic for drawing the game on the screen.\n\nModules are imported from other modules using the **<span style=\"color:purple\">import<\/span>** command. In this example, the <span style=\"color:red\">game.py<\/span> script may look something like this:","e2cabf05":"Just as in strings, Python supports forming new lists with a repeating sequence using the multiplication operator:","3cccab14":"## **Writing packages**\n\nPackages are namespaces which contain multiple packages and modules themselves. They are simply directories, but with a twist.\n\nEach package in Python is a directory which MUST contain a special file called <span style=\"color:red\">\\_\\_init\\_\\_.py<\/span>. This file can be empty, and it indicates that the directory it contains is a Python package, so it can be imported the same way a module can be imported.\n\nIf we create a directory called <span style=\"color:red\">foo<\/span>, which marks the package name, we can then create a module inside that package called <span style=\"color:magenta\">bar<\/span>. We also must not forget to add the <span style=\"color:red\">\\_\\_init\\_\\_.py<\/span> file inside the <span style=\"color:red\">foo<\/span> directory.\n\nTo use the module <span style=\"color:magenta\">bar<\/span>, we can import it in two ways:","c36c2792":"![](https:\/\/i.imgur.com\/ToBWS0Q.jpg)","bf0eaaeb":"![](https:\/\/i.imgur.com\/LTMEw7x.jpg)","1b995788":"or:","982038ee":"Now the variable <span style=\"color:orangered\">myobjectx<\/span> holds an object of the class <span style=\"color:navy\">MyClass<\/span> that contains the variable and the function defined within the class called <span style=\"color:navy\">MyClass<\/span>.\n\n## **Accessing Object Variables**\n\nTo access the variable inside of the newly created object <span style=\"color:orangered\">myobjectx<\/span> you would do the following:","988b4bcd":"Note that both of them produce same output\n\nThere is no function like **<span style=\"color:purple\">strrev<\/span>** in C to reverse a string. But with the above mentioned type of slice syntax you can easily reverse a string like this","3c02e6b2":"The above would print out the message <span style=\"color:green\">\"This is a message inside the class.\"<\/span>\n\n### **Exercise**\n\nWe have a class defined for vehicles. Create two new vehicles called <span style=\"color:orangered\">car1<\/span> and <span style=\"color:orangered\">car2<\/span>. Set <span style=\"color:orangered\">car1<\/span> to be a red convertible worth <span style=\"color:red\">\\$60,000.00<\/span> with a name of <span style=\"color:red\">Fer<\/span>, and <span style=\"color:orangered\">car2<\/span> to be a blue van named <span style=\"color:blue\">Jump<\/span> worth <span style=\"color:blue\">\\$10,000.00<\/span>.","c9f8d597":"![](https:\/\/i.imgur.com\/r0fay3y.jpg)","c8aeb97a":"![](https:\/\/i.imgur.com\/sVpMK95.jpg)","caefe984":"Let's say you have a variable called <span style=\"color:orangered\">name<\/span> with your user name in it, and you would then like to print out a greeting to that user.","3f1a4f31":"Python uses indentation to define code blocks, instead of brackets. The standard Python indentation is 4 spaces, although tabs and any other space size will work, as long as it is consistent. Notice that code blocks do not need any termination.\n\nHere is an example for using Python's **<span style=\"color:purple\">if<\/span>** statement using code blocks:","a44e2e3f":"This splits the string into a bunch of strings grouped together in a list. Since this example splits at a space, the first item in the list will be <span style=\"color:green\">\"Hello\"<\/span>, and the second will be <span style=\"color:green\">\"world!\"<\/span>.","3cdf90de":"We can look for which functions are implemented in each module by using the **<span style=\"color:purple\">dir<\/span>** function:","e8427ab3":"## **How do you call functions in Python?**\n\nSimply write the function's name followed by **<span style=\"color:purple\">()<\/span>**, placing any required arguments within the brackets. For example, let's call the functions written above (in the previous example):","936b5202":"Python supports two types of numbers - integers and floating point numbers. (It also supports complex numbers, which will not be explained in this tutorial).\n\nTo define an integer, use the following syntax:","9cc0226f":"# **Loops**\n\nThere are two types of loops in Python, **<span style=\"color:purple\">for<\/span>** and **<span style=\"color:purple\">while<\/span>**.","725a729e":"### **Useful list functions and methods**\n\nThere are some popular functions and methods used with lists.","4498f3a4":"### **Excercise**\n\nIn this exercise, you will need to add numbers and strings to the correct lists using the **<span style=\"color:purple\">append<\/span>** list method. You must add the numbers 1,2, and 3 to the <span style=\"color:orangered\">numbers<\/span> list, and the words <span style=\"color:green\">'hello'<\/span> and <span style=\"color:green\">'world'<\/span> to the strings variable.\n\nYou will also have to fill in the variable <span style=\"color:orangered\">second_name<\/span> with the second name in the names list, using the brackets operator **<span style=\"color:purple\">[]<\/span>**. Note that the index is zero-based, so if you want to access the second item in the list, its index will be 1.","f6a495b9":"## **The <span style=\"color:purple\">while<\/span> loop**","87311459":"For example:","02d24172":"## **Exercise**\n\nIn this exercise, you will need to print an alphabetically sorted list of all functions in the <span style=\"color:magenta\">re<\/span> module, which contain the word <span style=\"color:green\">\"find\"<\/span>.","7ce0dc5c":"Function **<span style=\"color:purple\">pop<\/span>** deletes one or more elements by using their indices.","7bc91430":"## **The **<span style=\"color:purple\">for<\/span>** loop**","f36646a4":"To use two or more argument specifiers, use a tuple (parentheses):","e354c82e":"So for instance the below would output the string <span style=\"color:green\">\"blah\"<\/span>:","a8c1bd0d":"## **Module initialization**\n\nThe first time a module is loaded into a running Python script, it is initialized by executing the code in the module once. If another module in your code imports the same module again, it will not be loaded twice but once only - so local variables inside the module act as a \"singleton\" - they are initialized only once.\n\nThis is useful to know, because this means that you can rely on this behavior for initializing objects.","ad1d5ab5":"Strings are bits of text. They can be defined as anything between quotes:","6b6d35d3":"Using two multiplication symbols makes a power relationship.","5bb253c7":"![image.png](attachment:image.png)","1b9a6fbc":"## **Accessing Object Functions**\n\nTo access a function inside of an object you use notation similar to accessing a variable:","ee50b955":"Function **<span style=\"color:purple\">sort<\/span>** sorts a list in either accending or descending order.","bcea2728":"A statement is evaluated as true if one of the following is correct: \n1. The <span style=\"color:blue\">True<\/span> boolean variable is given, or calculated using an expression, such as an arithmetic comparison. \n2. An object which is not considered \"empty\" is passed.\n\nHere are some examples for objects which are considered as empty: \n1. An empty string: <span style=\"color:green\">\"\"<\/span> \n2. An empty list: <span style=\"color:orangered\">[]<\/span> \n3. The number zero: <span style=\"color:orangered\">0<\/span> \n4. The false boolean variable: <span style=\"color:blue\">False<\/span>\n\n## **The <span style=\"color:purple\">is<\/span> operator**\n\nUnlike the double equals operator **<span style=\"color:purple\">==<\/span>**, the **<span style=\"color:purple\">is<\/span>** operator does not match the values of the variables, but the instances themselves. For example:","21c08901":"## **How do you write functions in Python?**\n\nAs we have seen on previous tutorials, Python makes use of blocks.\n\nA block is an area of code written in the format of:","85b5448b":"Be careful while using the division **<span style=\"color:purple\">\/<\/span>** operator . Some versions of Python implement integer division when applied to two integer numbers. In order to perform real division, specify one of the numbers as float. If you want to make sure integer division is performed, use **<span style=\"color:purple\">\/\/<\/span>** instead of **<span style=\"color:purple\">\/<\/span>**.","b13db7a0":"### **Exercise**\n\nTry to fix the code to print out the correct information by changing the string.","9e5dc17f":"## **Indentation**\n\nPython uses indentation for blocks, instead of curly braces. Both tabs and spaces are supported, but the standard indentation requires standard Python code to use four spaces. For example:","411592d5":"## **Removing a value**\n\nTo remove a specified index, use either one of the following notations:","01586e79":"Python also supports multiplying strings to form a string with a repeating sequence:","388871e6":"You can create multiple different objects that are of the same class (have the same variables and functions defined). However, each object contains independent copies of the variables defined in the class. For instance, if we were to define another object with the <span style=\"color:navy\">MyClass<\/span> class and then change the string in the variable above:","5fcce473":"Assignments can be done on more than one variable \"simultaneously\" on the same line like this","bc12fb09":"![](https:\/\/i.imgur.com\/um3q7oa.jpg)","f887fbfe":"This prints the characters of string from 3 to 7 skipping one character. This is extended slice syntax. The general form is <span style=\"color:orangered\">[start:stop:step]<\/span>.","e03c566d":"![](https:\/\/i.imgur.com\/IfdEwo7.jpg)","7bc47b8f":"The **<span style=\"color:purple\">for<\/span>** loops iterate over a given sequence. Here is an example:","354c0015":"For example, a database of phone numbers could be stored using a dictionary like this:","4d9fdef8":"This will add the <span style=\"color:red\">foo<\/span> directory to the list of paths to look for modules in as well.\n\n## **Exploring built-in modules**\n\nCheck out the full list of built-in modules in the Python standard library here.\n\nTwo very important functions come in handy when exploring modules in Python - the **<span style=\"color:purple\">dir<\/span>** and **<span style=\"color:purple\">help<\/span>** functions.\n\nIf we want to import the module **<span style=\"color:purple\">urllib<\/span>**, which enables us to read data from URLs, we simply import the module:","cdd2eb91":"In the first method, we must use the <span style=\"color:orangered\">foo<\/span> prefix whenever we access the module <span style=\"color:magenta\">bar<\/span>. In the second method, we don't, because we import the module to our module's namespace.\n\nThe <span style=\"color:red\">\\_\\_init\\_\\_.py<\/span> file can also decide which modules the package exports as the API, while keeping other modules internal, by overriding the <span style=\"color:red\">\\_\\_all\\_\\_<\/span> variable, like so:","a66819ef":"A **<span style=\"color:purple\">while<\/span>** loop repeats as long as a certain boolean condition is met. For example:","9c801c95":"This might be a bit risky as changes in the module might affect the module which imports it, but it is shorter and also does not require you to specify which objects you wish to import from the module.\n\n## **Custom import name**\n\nWe may also load modules under any name we want. This is useful when we want to import a module conditionally to use the same name in the rest of the code.\n\nFor example, if you have two <span style=\"color:orangered\">draw<\/span> modules with slighty different names - you may do the following:","4b49c4ac":"### **Exercise**\n\nLoop through and print out all even numbers from the <span style=\"color:orangered\">numbers<\/span> list in the same order they are received. Don't print any numbers that come after <span style=\"color:orangered\">237<\/span> in the sequence.","3262db82":"### **Exercise**\n\nIn this exercise you'll use an existing function, and while adding your own to create a fully functional program.\n\nAdd a function named <span style=\"color:orangered\">list_benefits<\/span> that returns the following list of strings: <span style=\"color:green\">\"More organized code\"<\/span>, <span style=\"color:green\">\"More readable code\"<\/span>, <span style=\"color:green\">\"Easier code reuse\"<\/span>, <span style=\"color:green\">\"Allowing programmers to share and connect code together\"<\/span>.\n\nAdd a function named <span style=\"color:orangered\">build_sentence<\/span> which receives a single argument containing a string and returns a sentence starting with the given string and ending with the string <span style=\"color:green\">\" is a benefit of functions!\"<\/span>.\n\nRun and see all the functions work together!","49e34228":"We'll explain why you have to include that **<span style=\"color:purple\">self<\/span>** as a parameter a little bit later. First, to assign the above class (template) to an object you would do the following:","91b92041":"That prints out 4, because the location of the first occurrence of the letter <span style=\"color:green\">o<\/span> is 4 characters away from the first character. Notice how there are actually two <span style=\"color:green\">o<\/span>'s in the phrase - this method only recognizes the first.\n\nBut why didn't it print out 5? Isn't <span style=\"color:green\">o<\/span> the fifth character in the string? To make things more simple, Python (and most other programming languages) start things at 0 instead of 1. So the index of <span style=\"color:green\">o<\/span> is 4.","a4a8b315":"# **Basic String Operations**","7ac24b90":"or","8feaacdb":"Here are some basic argument specifiers you should know:\n\n<span style=\"color:purple\">%s - string (or any object with a string representation, like numbers)<\/span>\n\n<span style=\"color:purple\">%d - integers<\/span>\n\n<span style=\"color:purple\">%f - floating point numbers<\/span>\n\n<span style=\"color:purple\">%.[number of digits]f - floating point numbers with a fixed amount of digits to the right of the dot.<\/span>\n\n<span style=\"color:purple\">%x\/%X - integers in hex representation (lowercase\/uppercase)<\/span>","0b870a33":"# **String Formatting**\n\nPython uses C-style string formatting to create new, formatted strings. The **<span style=\"color:purple\">%<\/span>** operator is used to format a set of variables enclosed in a <span style=\"color:red\">tuple<\/span> (a fixed size list), together with a format string, which contains normal text together with \"argument specifiers\", special symbols like **<span style=\"color:purple\">%s<\/span>** and **<span style=\"color:purple\">%d<\/span>**.","fe834793":"![](https:\/\/i.imgur.com\/CWrPWdb.jpg)","4eae6dbf":"## **Using Operators with Strings**\n\nPython supports concatenating strings using the addition operator **<span style=\"color:purple\">+<\/span>**:","72a0c55d":"Functions may return a value to the caller, using the keyword **<span style=\"color:purple\">return<\/span>** . For example:","5ab062bc":"This prints a slice of the string, starting at index 3, and ending at index 6. But why 6 and not 7? Again, most programming languages do this - it makes doing math inside those brackets easier.\n\nIf you just have one number in the brackets, it will give you the single character at that index. If you leave out the first number but keep the colon, it will give you a slice from the start to the number you left in. If you leave out the second number, it will give you a slice from the first number to the end.\n\nYou can even put negative numbers inside the brackets. They are an easy way of starting at the end of the string instead of the beginning. This way, -3 means \"3rd character from the end\".","428bfd9f":"![](https:\/\/i.imgur.com\/D9rWjEs.jpg)","cdef6aeb":"## **The <span style=\"color:purple\">in<\/span> operator**\n\nThe **<span style=\"color:purple\">in<\/span>** operator could be used to check if a specified object exists within an iterable object container, such as a list:","aa4cc02a":"![](https:\/\/i.imgur.com\/CBvBkQm.jpg)","1c911691":"Mixing operators between numbers and strings is not supported:","ce46db1e":"### **Exercise**\n\nYou will need to write a format string which prints out the data using the following syntax: <span style=\"color:red\">Hello John Doe. Your current balance is $53.44<\/span>.","bf129236":"or:","2193ea30":"For those of you using silly fonts, that is a lowercase <span style=\"color:green\">L<\/span>, not a number one. This counts the number of <span style=\"color:green\">l<\/span>'s in the string. Therefore, it should print 3.","7b898e27":"# **Classes and Objects**\n\nObjects are an encapsulation of variables and functions into a single entity. Objects get their variables and functions from classes. Classes are essentially a template to create your objects.\n","5e5e4e92":"Python uses boolean variables to evaluate conditions. The boolean values <span style=\"color:blue\">True<\/span> and <span style=\"color:blue\">False<\/span> are returned when an expression is compared or evaluated. For example:","2deeb465":"Any object which is not a string can be formatted using the **<span style=\"color:purple\">%s<\/span>** operator as well. The string which returns from the **<span style=\"color:purple\">repr<\/span>** method of that object is formatted as the string. For example:","4490a670":"Accessing an index which does not exist generates an exception (an error).","dcbaffdd":"Function **<span style=\"color:purple\">remove<\/span>** deletes a specified element.","04f25e60":"The difference between the two is that using double quotes makes it easy to include apostrophes (whereas these would terminate the string if using single quotes)","4ef4e703":"The <span style=\"color:magenta\">draw<\/span> module may look something like this:","6e530880":"As you can see, the first thing you learned was printing a simple sentence. This sentence was stored by Python as a string. However, instead of immediately printing strings out, we will explore the various things you can do to them. You can also use single quotes to assign a string. However, you will face problems if the value to be assigned itself contains single quotes. For example, to assign the string in these bracket (single quotes are <span style=\"color:purple\">**' '**<\/span>) you need to use double quotes only like this"}}