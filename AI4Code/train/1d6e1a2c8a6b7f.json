{"cell_type":{"95e44d6b":"code","e23055fd":"code","866e3ffe":"code","f0fdb9f7":"code","651b97f1":"code","cfd8b20f":"code","59d875fa":"code","e8e57d67":"code","b9852765":"code","f701a6a9":"code","046c4721":"code","6d90a3b3":"code","10691d05":"code","164b69cb":"code","ea6077e7":"code","69c9bcb1":"code","370f314b":"code","38be1473":"code","cd245ab6":"code","f8a5fb3c":"code","d01a6ea9":"code","c93f41d6":"code","dc200cb3":"code","20e28e8e":"code","04355727":"code","3b70b0aa":"code","acd2891b":"code","aed821a1":"code","e1814987":"code","1c8fda29":"code","4357f697":"code","8c4dc6f9":"markdown","45ac0724":"markdown","efcbaa3c":"markdown","97edc3f4":"markdown","a7ba3dfa":"markdown","c63d474d":"markdown","221f72cd":"markdown","423fd69f":"markdown","8a780bbd":"markdown","b96dc3da":"markdown","9c7d416c":"markdown","2caf302b":"markdown","40288dd7":"markdown"},"source":{"95e44d6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e23055fd":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\ndata = pd.read_csv('\/kaggle\/input\/predict-test-scores-of-students\/test_scores.csv')","866e3ffe":"data.columns","f0fdb9f7":"data.describe()","651b97f1":"data.head()","cfd8b20f":"data.shape","59d875fa":"data.dtypes","e8e57d67":"data.isnull().sum()","b9852765":"sns.distplot(data['posttest'])","f701a6a9":"data_corr = data.corr()\nfig, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(data_corr, annot=True)","046c4721":"# Categorical columns and their unique values\nnon_num = [data.columns[index] for index, dtype in enumerate(data.dtypes) if dtype == 'object']\nfor column in non_num:\n    print(f\"{column}: {data[column].unique()}\")","6d90a3b3":"non_num","10691d05":"fig, ax = plt.subplots(figsize=(15,15))\nsns.boxplot(x='school', y='posttest', data=data)","164b69cb":"fig, ax = plt.subplots(figsize=(8,8))\nsns.boxplot(x='school_setting', y='posttest', data=data)","ea6077e7":"fig, ax = plt.subplots(figsize=(8,8))\nsns.boxplot(x='school_type', y='posttest', data=data)","69c9bcb1":"fig, ax = plt.subplots(figsize=(20,20))\nsns.boxplot(x='classroom', y='posttest', data=data)","370f314b":"fig, ax = plt.subplots(figsize=(8,8))\nsns.boxplot(x='teaching_method', y='posttest', data=data)","38be1473":"fig, ax = plt.subplots(figsize=(8,8))\nsns.boxplot(x='gender', y='posttest', data=data)","cd245ab6":"fig, ax = plt.subplots(figsize=(8,8))\nsns.boxplot(x='lunch', y='posttest', data=data)","f8a5fb3c":"data.head()","d01a6ea9":"dummies_1 = pd.concat([pd.get_dummies(data['school'])], axis =1)\ndata = pd.concat([data, dummies_1], axis=1)\ndata.drop(['school'], axis=1, inplace=True)\n\ndummies_2 = pd.concat([pd.get_dummies(data['school_setting'])], axis =1)\ndata = pd.concat([data, dummies_2], axis=1)\ndata.drop(['school_setting'], axis=1, inplace=True)\n\ndummies_3 = pd.concat([pd.get_dummies(data['classroom'])], axis =1)\ndata = pd.concat([data, dummies_3], axis=1)\ndata.drop(['classroom'], axis=1, inplace=True)","c93f41d6":"# Label encoder\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\n\ndata['school_type'] = label_encoder.fit_transform(data['school_type']) \ndata['teaching_method'] = label_encoder.fit_transform(data['teaching_method']) \ndata['gender'] = label_encoder.fit_transform(data['gender']) \ndata['lunch'] = label_encoder.fit_transform(data['lunch']) ","dc200cb3":"data.head()","20e28e8e":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score","04355727":"def evaluating(y_act,y_pred):\n    MAE = mean_absolute_error(y_act, y_pred)\n    MSE = mean_squared_error(y_act, y_pred)\n    r2 = r2_score(y_act, y_pred)\n    eval_values = {'MAE': round(MAE,3), 'MSE' : round(MSE,3), 'r2' : round(r2,3)}\n    print('Results:\\n Mean absolute error = ', round(MAE,3),'\\n Mean squared error = ', round(MSE,3),'\\n R2 = ', round(r2,3))\n\n    return eval_values","3b70b0aa":"# Split training and testing dataset\nX = data.drop(['student_id', 'posttest', 'gender'], axis=1)\ny = data['posttest']\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","acd2891b":"# Standard scale the numerical data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n\nX_test = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)\nX_train = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)","aed821a1":"# Split training and testing dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","e1814987":"model_lin= LinearRegression()\nmodel_lin.fit(X_train, y_train)\npredictions_lin = model_lin.predict(X_test)\nscore_lim = evaluating(y_test,predictions_lin)","1c8fda29":"from sklearn.linear_model import LogisticRegression\nmodel_log= LogisticRegression(solver='liblinear')\nmodel_log.fit(X_train, y_train)\npredictions_log = model_log.predict(X_test)\nscore_log = evaluating(y_test,predictions_log)","4357f697":"print(\"Linear Regression: \", score_lim)\nprint(\"Logistic Regression: \", score_log)","8c4dc6f9":"# Load dataset and packages","45ac0724":"##### Check for any missing values","efcbaa3c":"## Model training","97edc3f4":"# Basic information about the data","a7ba3dfa":"#### Numercial values","c63d474d":"##### Looks like there's quite a bit of categorical features inside the dataset.","221f72cd":"## Exploratory Data Analysis","423fd69f":"##### Making a function to print and create a dictionary with errors and r2 score:","8a780bbd":"##### Dummy values approach for categorical features with multiple unique values","b96dc3da":"##### Let's look at some the relationship between the categorical values and the post test score","9c7d416c":"#### Linear Regression","2caf302b":"#### Logistic Regression","40288dd7":"##### Good news! There are no missing values inside the data. let's plot a histogram of the post test results."}}