{"cell_type":{"a32f19af":"code","225b5f3d":"code","89774054":"code","239069f7":"code","b7abc933":"code","ccc01ed9":"code","10ff5b5f":"code","b6b76d42":"code","6bef9909":"code","b46b4026":"code","93999881":"code","5f8bbd52":"code","51c46239":"code","6b111d7e":"code","72bd338f":"code","20fa1a48":"code","aa8e1924":"code","da22723d":"code","2fa629fe":"code","24cb1646":"code","55f518e6":"markdown","5e02dbbe":"markdown","17d39057":"markdown","94053abc":"markdown","3e9aad02":"markdown","560e5226":"markdown","17703440":"markdown","7d6b714e":"markdown","2c707395":"markdown","7aee8d8a":"markdown","acafea57":"markdown","57c242da":"markdown","f9f1fee7":"markdown","378935cb":"markdown"},"source":{"a32f19af":"import pandas as pd\nimport numpy as np\nimport librosa\nimport librosa.display\nimport IPython.display\nimport matplotlib.pyplot as plt\nimport math\n\n\nimport os \nos.chdir(\"\/kaggle\/input\/hah-data-science-challenge\/\")","225b5f3d":"#\u30e1\u30bf\u30c7\u30fc\u30bf\u6574\u5f62\u95a2\u6570\n#from notebook\u300cCorrections to notation errors and EDA for META\u300d\n#https:\/\/www.kaggle.com\/ryoichi0917\/corrections-to-notation-errors-and-eda-for-meta\ndef meta_define():\n    \"\"\"\n    input : none\n    output : Corrected metadata\n    \"\"\"\n    import pandas as pd\n    import os \n    os.chdir(\"\/kaggle\/input\/hah-data-science-challenge\/\")\n    df_train = pd.read_csv(\"train.csv\", index_col=False)\n    df_test = pd.read_csv(\"test.csv\", index_col=False)\n    \n    ##################################################\n    #\u4ee5\u4e0b\u8f9e\u66f8\u3084\u5909\u6570\u306e\u5b9a\u7fa9\n    #\u5404\u30c7\u30fc\u30bf\u4fee\u6b63\u7528\u306e\u8f9e\u66f8\n    bolt_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    plate_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    record_dict = {\n        'PC\u5185\u81d3':\"pc_built_in\",\n        'PC\u5185\u8535':\"pc_built_in\",\n        'USB1':\"usb1\", \n        'USB2':\"usb2\", \n        'USB3':\"usb3\", \n        'USB4':\"usb4\", \n        '\u30b9\u30de\u30db':\"smart_phone\",\n        '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0':\"smart_phone\",\n        '\u5185\u8535\u30de\u30a4\u30af':\"pc_built_in\",\n        }\n\n    distance_dict = {\n        '10cm': 0.1, \n        '10\u339d': 0.1, \n        '1M': 1.0, \n        '20cm': 0.2, \n        '20\u339d': 0.2, \n        '2M': 2.0, \n        '2m': 2.0, \n        '30cm': 0.3, \n        '30cn': 0.3, \n        '30\u339d': 0.3, \n        '3m': 3.0, \n        '40cm': 0.4, \n        '40\u339d': 0.4, \n        '50cm': 0.5, \n        '50\u339d': 0.5, \n        '5cm': 0.05,\n        '8cm': 0.08, \n        '\uff11\uff2d': 1.0   \n    }\n\n    cvt_dict = {\n        \"\u306d\u3058\" : bolt_dict, \n        '\u30d7\u30ec\u30fc\u30c8' : plate_dict, \n        '\u9332\u97f3\u65b9\u6cd5' : record_dict, \n        '\u30de\u30a4\u30af\u8ddd\u96e2' : distance_dict\n    }\n    \n    #df_train\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_train = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file', 'target']\n    #df_test\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_test = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file']\n    \n    tgt_col = [\"\u306d\u3058\", '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2']\n    ##################################################\n    \n    for col in tgt_col:#Target\u306f\u5909\u63db\u5bfe\u8c61\u5916\n        df_train[col] = df_train[col].map(cvt_dict[col])\n        df_test[col] = df_test[col].map(cvt_dict[col])\n        \n    df_train.columns = col_train\n    df_test.columns = col_test\n    \n    return df_train, df_test","89774054":"df_train, df_test = meta_define()\nprint(\"df_train.shape :\", df_train.shape)\nprint(\"df_test.shape :\", df_test.shape)","239069f7":"#\u7570\u5e38\u30c7\u30fc\u30bf\u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\ndf_anormal = df_train[df_train[\"target\"]==1]\ndf_anormal","b7abc933":"#\u5f53\u8a72\u306e\u97f3\u58f0\u3092\u78ba\u8a8d\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_anormal.iloc[0][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","ccc01ed9":"#id:482\u3068\u540c\u3058\u6761\u4ef6\u306e\u30ec\u30b3\u30fc\u30c9\u3067\u6b63\u89e3\u30e9\u30d9\u30eb\u304c\u4ed8\u4e0e\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u78ba\u8a8d\u3059\u308b\ndf_train.query(f\"bolt == '{df_anormal.iloc[0]['bolt']}' and \\\n               plate == '{df_anormal.iloc[0]['plate']}' and \\\n               record == '{df_anormal.iloc[0]['record']}' and \\\n               mic_dist == {df_anormal.iloc[0]['mic_dist']} and \\\n               target == 0.0\")\n#\u306a\u3044\u3001\u3001\u3001\u306e\u304b\uff1f","10ff5b5f":"#\u5ff5\u306e\u70ba\u3001\u3082\u3046\u4e00\u5ea6\u78ba\u8a8d\ndf_train_same_482 = df_train.query(f\"bolt == '{df_anormal.iloc[0]['bolt']}' and \\\n               plate == '{df_anormal.iloc[0]['plate']}' and \\\n               record == '{df_anormal.iloc[0]['record']}' and \\\n               mic_dist == {df_anormal.iloc[0]['mic_dist']}\")\n\nprint(\"df_train_same_482.target.unique() :\", df_train_same_482.target.unique())\n\ndf_train_same_482.head()\n#\u672c\u5f53\u306b\u306a\u3055\u305d\u3046...\u3002","b6b76d42":"#\u7570\u5e38\u30c7\u30fc\u30bf\u30ec\u30b3\u30fc\u30c9\u306e\u78ba\u8a8d\"\n#id:785\u3068\u540c\u3058\u6761\u4ef6\u306e\u30ec\u30b3\u30fc\u30c9\ndf_train_same_785 = df_train.query(f\"bolt == '{df_anormal.iloc[1]['bolt']}' and \\\n               plate == '{df_anormal.iloc[1]['plate']}' and \\\n               record == '{df_anormal.iloc[1]['record']}' and \\\n               mic_dist == {df_anormal.iloc[1]['mic_dist']} and target == 0.0\")\n\nprint(\"id:785\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30ec\u30b3\u30fc\u30c9\u6570 :\", len(df_train_same_785))\ndf_train_same_785","6bef9909":"#\u7570\u5e38\u97f3\u58f0\u3092\u78ba\u8a8d\n#anormaly\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_anormal.iloc[1][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","b46b4026":"#\u7570\u5e38\u97f3\u58f0\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u97f3\u58f0\u306e\u78ba\u8a8d(\u305d\u306e\uff11)\n#normal1\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_train_same_785.iloc[0][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","93999881":"#\u7570\u5e38\u97f3\u58f0\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u97f3\u58f0\u306e\u78ba\u8a8d(\u305d\u306e2)\n#normal2\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_train_same_785.iloc[1][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","5f8bbd52":"#\u7570\u5e38\u97f3\u58f0\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u97f3\u58f0\u306e\u78ba\u8a8d(\u305d\u306e3)\n#normal3\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_train_same_785.iloc[2][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","51c46239":"#\u7570\u5e38\u97f3\u58f0\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u97f3\u58f0\u306e\u78ba\u8a8d(\u305d\u306e4)\n#normal4\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_train_same_785.iloc[3][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","6b111d7e":"#\u7570\u5e38\u97f3\u58f0\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u97f3\u58f0\u306e\u78ba\u8a8d(\u305d\u306e5)\n#normal5\nwav,sr=librosa.load(os.path.join(\"train\/train\", df_train_same_785.iloc[4][\"file\"]), sr=None)\nIPython.display.Audio(wav,rate=sr)","72bd338f":"#\u6bd4\u8f03\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u3092df\u306b\u7d50\u5408\u3059\u308b\ndf_tgt = pd.concat([pd.DataFrame(df_anormal.iloc[1]).T, df_train_same_785])\ndf_tgt","20fa1a48":"#\u30c7\u30fc\u30bf\u5168\u4f53\u3092\u53ef\u8996\u5316\ndata_num = len(df_tgt)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num in range(data_num):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(os.path.join(\"train\/train\", df_tgt.iloc[num][\"file\"]),sr=None)\n    \n    time_ax = np.linspace(0, len(wav) * 1\/sr, len(wav))\n    ax.plot(time_ax, wav)\n    if \"785\" in df_tgt.iloc[num][\"file\"]:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ ANORMAL!!')\n    \n    else:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ normal')","aa8e1924":"data_num = len(df_tgt)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num in range(data_num):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(os.path.join(\"train\/train\", df_tgt.iloc[num][\"file\"]), sr=None)\n    wav = wav[:int(sr\/2)]#\u306f\u3058\u3081\u304b\u30890.5\u307e\u3067\u3092\u5207\u308a\u51fa\u3057\n    \n    time_ax = np.linspace(0, len(wav) * 1\/sr, len(wav))\n    ax.plot(time_ax, wav)\n    if \"785\" in df_tgt.iloc[num][\"file\"]:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ ANORMAL!!')\n    \n    else:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ normal')","da22723d":"  def decide_nfft(win_length):\n    \"\"\"\n    \u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u5f8c\u306e\u6700\u7d42\u7684\u306awindow_size\u3092\u6c7a\u5b9a\u3059\u308b\u95a2\u6570\n    \"\"\"\n    n = 1\n    n_fft = 0\n    while win_length > n_fft:\n        n_fft = 2**n\n        n += 1\n    return n_fft","2fa629fe":"data_num = len(df_tgt)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num in range(data_num):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(os.path.join(\"train\/train\", df_tgt.iloc[num][\"file\"]), sr=None)\n\n    win_length = int(sr\/8)\n    hop_length = int(win_length\/8)\n    \n    fft = librosa.stft(y=wav,\n                       n_fft=decide_nfft(win_length),#n_fft:\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u5f8c\u306e\u6700\u7d42\u7684\u306awindow_size\n                       win_length=win_length,#win_length:\u5404\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u6295\u5165\u3059\u308b\u5b9f\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\n                       hop_length=hop_length,#hop_length:\u5404\u7a93\u306e\u30b9\u30e9\u30a4\u30c9\u91cf\n                      )\n    fft, _ = librosa.magphase(fft, power=1)#\u632f\u5e45\u30b9\u30da\u30af\u30c8\u30eb\u306b\u5909\u63db\n    fft = librosa.amplitude_to_db(fft)#db\u5909\u63db\n    \n    librosa.display.specshow(fft,\n                         sr=sr,\n                         hop_length=hop_length,\n                         x_axis=\"time\",\n                         y_axis=\"log\",\n                         cmap='jet',\n                         ax=ax)\n    \n    if \"785\" in df_tgt.iloc[num][\"file\"]:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ ANORMAL!!')\n    \n    else:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ normal')","24cb1646":"data_num = len(df_tgt)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\nfor num in range(data_num):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    wav,sr=librosa.load(os.path.join(\"train\/train\", df_tgt.iloc[num][\"file\"]),sr=None)\n\n    win_length = int(sr\/8)\n    hop_length = int(win_length\/8)\n    \n    fft = librosa.feature.melspectrogram(y=wav,\n                                         n_fft=decide_nfft(win_length),#n_fft:\u30bc\u30ed\u30d1\u30c7\u30a3\u30f3\u30b0\u5f8c\u306e\u6700\u7d42\u7684\u306awindow_size\n                                         win_length=win_length,#win_length:\u5404\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u6295\u5165\u3059\u308b\u5b9f\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\n                                         hop_length=hop_length,#hop_length:\u5404\u7a93\u306e\u30b9\u30e9\u30a4\u30c9\u91cf\n                                         power=1\n                                          )\n    fft = librosa.amplitude_to_db(fft)#db\u5909\u63db\n    \n    librosa.display.specshow(fft,\n                         sr=sr,\n                         hop_length=hop_length,\n                         x_axis=\"time\",\n                         y_axis=\"mel\",\n                         cmap='jet',\n                         ax=ax)\n    \n    if \"785\" in df_tgt.iloc[num][\"file\"]:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ ANORMAL!!')\n    \n    else:\n        ax.set_title(f'{df_tgt.iloc[num][\"file\"]} \/ normal')","55f518e6":"### Normal data with the same metadata as id785.\n### id785\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u30c7\u30fc\u30bf\n- \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b5\u30ec\u30b3\u30fc\u30c9\u306e\u30c7\u30fc\u30bf\u3042\u308a","5e02dbbe":"#### Visualization of the entire data.\n#### \u30c7\u30fc\u30bf\u5168\u4f53\u3092\u53ef\u8996\u5316","17d39057":"#### Visualize the first 0.5 seconds of data.\n#### \u30c7\u30fc\u30bf\u306e\u5192\u982d0.5\u79d2\u3092\u53ef\u8996\u5316","94053abc":"### Normal data with the same metadata as id785.\n### id785\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u30c7\u30fc\u30bf\n- \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b5\u30ec\u30b3\u30fc\u30c9\u306e\u30c7\u30fc\u30bf\u3042\u308a","3e9aad02":"#### Visualizing  Spectrogram\n#### \u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306e\u53ef\u8996\u5316","560e5226":"## Run the script for metadata preprocessing.\n## \u30e1\u30bf\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u7528\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c","17703440":"#### Visualizing  melspectrogram\n#### \u30e1\u30eb\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306e\u53ef\u8996\u5316","7d6b714e":"#### Compare anornaly sound with normal sound having the same metadata.\n#### \u7570\u5e38\u306a\u97f3\u3068\u3001\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u306a\u97f3\u3092\u8074\u304d\u6bd4\u3079\u308b\n- It's distinctly different when I hear it. \/ \u8033\u3067\u805e\u304f\u3068\u660e\u78ba\u306b\u9055\u3046\n- Does the anormaly sound include a crunchy sound? \/ \u7570\u5e38\u97f3\u306f\u30b7\u30e3\u30ea\u30b7\u30e3\u30ea\u97f3\u304c\u5165\u3063\u3066\u3044\u308b\uff1f","2c707395":"## Check for labeled normal data that has the same metadata as the abnormal data.\n## \u7570\u5e38\u30c7\u30fc\u30bf\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u30e9\u30d9\u30eb\u4ed8\u304d\u6b63\u5e38\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d","7aee8d8a":"### summary \/ \u307e\u3068\u3081\n\n- In this time, there was a large difference in the low frequency range in the raw data, spectrogram, and mel spectrogram.\/ \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u3067\u306f\u3001\u751f\u30c7\u30fc\u30bf\u30fb\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u30fb\u30e1\u30eb\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306b\u304a\u3044\u3066\u3001\u4f4e\u5468\u6ce2\u57df\u306b\u5927\u304d\u306a\u9055\u3044\u304c\u898b\u3089\u308c\u307e\u3057\u305f\u3002(This may not be true for all data.\/ \u4ee5\u4e0b\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u306b\u5f53\u3066\u306f\u307e\u308b\u8a33\u3067\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002)","acafea57":"### Normal data with the same metadata as id482.\n### id482\u3068\u540c\u3058\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u6301\u3064\u6b63\u5e38\u30c7\u30fc\u30bf\n- \u8a13\u7df4\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u5f53\u8a72\u306e\u30c7\u30fc\u30bf\u306f\u306a\u3055\u305d\u3046","57c242da":"#### Visualization in the time domain.\n#### \u6642\u9593\u9818\u57df\u3067\u306e\u53ef\u8996\u5316","f9f1fee7":"#### Visualization in the time domain.\n#### \u5468\u6ce2\u6570\u9818\u57df\u3067\u306e\u53ef\u8996\u5316","378935cb":"# Compare normal data with anormaly data \/ \u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u3068\u7570\u5e38\u306a\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\n- I used the following Notebook as a reference. \/ \u4ee5\u4e0b\u306eNotebook\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\n    - https:\/\/www.kaggle.com\/t88take\/eda-mfcc\n- Compare anormal data with normal data to understand the characteristics of the data. \/ \u30c7\u30fc\u30bf\u306e\u7279\u6027\u3092\u77e5\u308b\u305f\u3081\u306b\u3001\u7570\u5e38\u30c7\u30fc\u30bf\u3068\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\u3092\u884c\u3046]\n- If you don't mind, I'd really appreciate your advice!\u3000\/ \u305c\u3072\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u9802\u304d\u305f\u3044\u3067\u3059\u3002\n\n"}}