{"cell_type":{"ba4ab83d":"code","d8ccc56f":"code","e59dc1b4":"code","72bacb02":"code","6bb6d9ed":"code","ca7e3965":"code","88482cb6":"code","b2203dae":"code","71b305a6":"code","10ac1f8f":"code","38f01e2b":"code","dfd1dfa0":"code","26c6c67f":"code","61332917":"code","dec720a2":"code","89fa97c0":"markdown","f6a4aaa8":"markdown","7a0ad6a0":"markdown","d16ae63a":"markdown","3e68635d":"markdown","aea626c3":"markdown","870d67b7":"markdown","0ed14a74":"markdown","acfad434":"markdown","54ee6405":"markdown","818a4ee4":"markdown"},"source":{"ba4ab83d":"#importing libraries\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visualization library\nfrom sklearn.model_selection import train_test_split # training and splitting data\n\nimport tensorflow as tf #tensorflow\n\nimport os\nprint(os.listdir(\"..\/input\"))","d8ccc56f":"#loading training and testing dataframes\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')","e59dc1b4":"train_df.columns","72bacb02":"test_df.columns","6bb6d9ed":"# seperating labels and images [X_train = images, Y_train = numbers on respective image]\nX_train = train_df.drop(labels = [\"label\"],axis = 1) # contains values of digits in 255 range\nY_train = train_df['label'] # contains digits\nX_train = X_train.values.reshape(-1,28,28,1)\/ 255 # reshaping arrays in tensors","ca7e3965":"# creating common method to display image\ndef displayImage(image):\n    plt.imshow(image[:,:,0], cmap=plt.cm.binary)\n    \ndef displayImageWithPredictedValue(image, prediction):\n    print('Predicted output image is ', np.argmax(prediction))\n    plt.imshow(image[:,:,0], cmap=plt.cm.binary)","88482cb6":"# displaying first first value\ndisplayImage(X_train[0])","b2203dae":"model = tf.keras.models.Sequential() # creating Sequential model\nmodel.add(tf.keras.layers.Flatten()) # flattening the input arrays\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu)) # using relu activation function\nmodel.add(tf.keras.layers.Dense(64, activation=tf.nn.relu)) # using relu activation function\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax)) # activation function to get number of output\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # compiling model\n\nmodel.fit(X_train, Y_train.values, epochs=5) # training model and fitting data","71b305a6":"model.summary()","10ac1f8f":"# splitting data to evalueate model\nX_train, X_val, Y_train, Y_val = train_test_split(X_train,\n                                              Y_train, \n                                              test_size=0.20,\n                                              random_state=42,\n                                              shuffle=True,\n                                              stratify=Y_train)","38f01e2b":"val_loss , val_accuracy = model.evaluate(X_val, Y_val) # evaluating performance of the model\nprint(val_loss, val_accuracy)","dfd1dfa0":"predictions = model.predict([X_val])\ndisplayImageWithPredictedValue(X_val[12], predictions[12])","26c6c67f":"test_df = test_df.values.reshape(-1,28,28,1)\/255","61332917":"predictions = model.predict([test_df])\ndisplayImageWithPredictedValue(test_df[10], predictions[10])","dec720a2":"# creating array of outputs, to add into submission.csv file\nresults = np.argmax(predictions,axis = 1)\n# creating submission.csv file\nsubmission = pd.DataFrame(data={'ImageId': (np.arange(len(predictions)) + 1), 'Label': results})\nsubmission.to_csv('submission.csv', index=False)","89fa97c0":"We have total three csv files in this dataset. As the name suggests, `train.csv` and `test.csv` contains training images and testing images respectively. We have `sample_submission.csv` file to create csv file for submission. So here we loading the data for training and testing images.","f6a4aaa8":"# MNIST Digit Recognization","7a0ad6a0":"### 3. Creating Sample Submission File","d16ae63a":"![](http:\/\/i.imgur.com\/E07YqHb.png)","3e68635d":"### 4. Conclusion:\n\nI created model that can predict the correct number values from the images with accuray 0.96614. This dataset can be further explored by applying classification methods such as SVM and K-nearest neighbors.\n\nYou can upvote this kernel to help others to learn it. Thank you :)","aea626c3":"### 1. Preprocessing data","870d67b7":"### Index\n1. Preprocessing data\n2. Creating Model\n3. Creating Sample Submission File\n4. Conclusion","0ed14a74":"We have `28*28` = `784` pixels of the images. In `training.csv` we have the correct digit of the number. We will create model based on the `training.csv` file and will submit the output of the predicted values on `testing.csv` file.","acfad434":"I am using [Sequential model](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/models\/Sequential) and used **Flatten** layer to convert tensors into arrays. Using [relu activation](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/nn\/relu)(REctified Linear Units) with different input image parameters, I degraded features vectors to 64. Lastly, I used [Softmax function](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/nn\/softmax) with 10 output entries (0 to 9). I compiled model with adam optimzer and used loss function as sparse_categorical_crossentropy. At the end I trained model using data with 2 epochs. Epoch is training loop (forward and backward) to train model.","54ee6405":"### 2. Creating Model","818a4ee4":"MNIST (Modified National Institute of Standards and Technology) is the hello world program for the Computer Vision. This is my second competition and first kernel using Tensorflow. In this Kernel I have used tensorflow sequential model to predict the number from the image."}}