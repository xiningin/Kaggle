{"cell_type":{"507c7c7b":"code","3613e348":"code","847317a0":"code","713a07a4":"code","6cf6da48":"code","0d4327e5":"code","052fceb1":"code","ef34f79e":"code","247dbf32":"code","3046bf5d":"code","c737111f":"code","64d351cb":"code","cbdb8d43":"code","8c184737":"code","a3a68705":"code","1d55d4bf":"code","8b513f2c":"code","8fba2127":"code","cca4c13b":"code","6f3cf75b":"code","a2aa700d":"code","48ff07a6":"code","e1762691":"code","742f6379":"code","56c1d4dc":"code","25e6ae34":"code","362ed523":"code","08fd624b":"code","60a071a5":"markdown","e4e34a5e":"markdown"},"source":{"507c7c7b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3613e348":"df = pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\npd.set_option('display.max_columns', None)\ndf.head()","847317a0":"df.describe()","713a07a4":"df.isnull().sum()","6cf6da48":"y = df.diagnosis","0d4327e5":"x =df.drop(['Unnamed: 32','id','diagnosis'], axis=1)","052fceb1":"import matplotlib.pyplot as plt\nimport seaborn as sns","ef34f79e":"sns.countplot(y)","247dbf32":"df.columns","3046bf5d":"pair_plot_features = ['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean','concavity_mean','concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\ndata_std = (x - x.mean()) \/ (x.std())              # standardization\nplot_df = pd.concat([y,data_std[pair_plot_features]],axis=1)\nplot_df.head(5)\n# data_std.describe()","c737111f":"g = sns.pairplot(plot_df, hue='diagnosis',height=1.5)\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")","64d351cb":"pair_plot2_features = ['radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se']\nplot2_df = pd.concat([y,data_std[pair_plot2_features]],axis=1)\nplot2_df.head(5)","cbdb8d43":"g = sns.pairplot(plot2_df, hue='diagnosis',height=1.5)\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")","8c184737":"pair_plot3_features = ['radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\nplot3_df = pd.concat([y,data_std[pair_plot3_features]],axis=1)\nplot3_df.head(5)","a3a68705":"g = sns.pairplot(plot2_df, hue='diagnosis',height=1.5)\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")","1d55d4bf":"plt.figure(figsize=(12,12))\ndata = pd.melt(plot_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nsns.violinplot(x= 'features', y= 'value',hue= 'diagnosis', data = data,split=True, inner=\"quart\")\nplt.xticks(rotation = 90)","8b513f2c":"plt.figure(figsize=(12,12))\ndata = pd.melt(plot2_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nsns.violinplot(x= 'features', y= 'value',hue= 'diagnosis', data = data,split=True, inner=\"quart\")\nplt.xticks(rotation = 90)","8fba2127":"plt.figure(figsize=(12,12))\ndata = pd.melt(plot3_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nsns.violinplot(x= 'features', y= 'value',hue= 'diagnosis', data = data,split=True, inner=\"quart\")\nplt.xticks(rotation = 90)","cca4c13b":"sns.set(style=\"dark\", palette=\"bright\")\ndata = pd.melt(plot_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(15,15))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\n\nplt.xticks(rotation=90)","6f3cf75b":"sns.set(style=\"dark\", palette=\"bright\")\ndata = pd.melt(plot2_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(15,15))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\n\nplt.xticks(rotation=90)","a2aa700d":"sns.set(style=\"dark\", palette=\"bright\")\ndata = pd.melt(plot3_df,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(15,15))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\n\nplt.xticks(rotation=90)","48ff07a6":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data_std.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","e1762691":"drop_list = ['perimeter_mean','radius_mean','compactness_mean','concave points_mean','radius_se','perimeter_se','radius_worst','perimeter_worst','compactness_worst','concave points_worst','compactness_se','concave points_se','texture_worst','area_worst','concavity_worst','fractal_dimension_mean','area_se','smoothness_worst','fractal_dimension_worst','concavity_se','symmetry_worst','concavity_mean']\nx_1 = data_std.drop(drop_list,axis = 1 )        # do not modify x, we will use it later \nx_1.head()","742f6379":"f,ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(x_1.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","56c1d4dc":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import f1_score,confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\n# split data train 70 % and test 30 %\nx_train, x_test, y_train, y_test = train_test_split(x_1, y, test_size=0.3, random_state=42)\n\n#random forest classifier with n_estimators=10 (default)\nclf_rf = RandomForestClassifier(random_state=43)      \nclr_rf = clf_rf.fit(x_train,y_train)\n\nac = accuracy_score(y_test,clf_rf.predict(x_test))\nprint('Accuracy is: ',ac)\ncm = confusion_matrix(y_test,clf_rf.predict(x_test))\nsns.heatmap(cm,annot=True,fmt=\"d\")","25e6ae34":"from sklearn.feature_selection import RFE\n# Create the RFE object and rank each pixel\nclf_rf_3 = RandomForestClassifier()      \nrfe = RFE(estimator=clf_rf_3, n_features_to_select=5, step=1)\nrfe = rfe.fit(x_train, y_train)","362ed523":"print('Chosen best 5 feature by rfe:',x_train.columns[rfe.support_])","08fd624b":"from sklearn.feature_selection import RFECV\n\n# The \"accuracy\" scoring is proportional to the number of correct classifications\nclf_rf_4 = RandomForestClassifier() \nrfecv = RFECV(estimator=clf_rf_4, step=1, cv=5,scoring='accuracy')   #5-fold cross-validation\nrfecv = rfecv.fit(x_train, y_train)\n\nprint('Optimal number of features :', rfecv.n_features_)\nprint('Best features :', x_train.columns[rfecv.support_])","60a071a5":"**Recursive feature elimination (RFE) with random forest**","e4e34a5e":"**Feature selection with correlation and random forest classification**"}}