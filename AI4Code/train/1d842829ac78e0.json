{"cell_type":{"bb4d302a":"code","8e0283e2":"code","a3fe05c2":"code","3fabdc06":"code","db62cdee":"code","3023d2d1":"code","18236a01":"code","9fdf6d34":"code","c673c1a0":"code","50af670e":"code","ed673a33":"code","30de40ed":"code","136c15d6":"code","ff3d9487":"code","576a7afc":"code","91803e49":"code","d7712517":"code","4acfb09f":"code","b86f8a25":"code","8ef0bcc1":"code","1e78dea2":"code","4ef38c9f":"code","354437fc":"code","522a64be":"code","99f5c403":"code","d1a5eb7a":"code","0e376779":"code","c0488587":"code","068555bf":"code","efe7fe6f":"code","1c4965c7":"code","49ac3aca":"code","9d55f574":"code","f3c52329":"code","e486f1dc":"code","17305981":"code","63ae5a76":"code","e2e1f454":"markdown","c3f2260c":"markdown","0dee4574":"markdown","0832484d":"markdown","1ba3a649":"markdown","baa29f7b":"markdown","81afcd56":"markdown","d2511a73":"markdown","74463544":"markdown","4a7c4782":"markdown","4b48dcfa":"markdown","aede0964":"markdown","ef6f4b65":"markdown","2cc65c34":"markdown","f3d71f92":"markdown","1b3faeca":"markdown","c1cd7059":"markdown","91a54972":"markdown","52ec18e2":"markdown","d74f0be1":"markdown","ca4c07fb":"markdown","de1021a2":"markdown","eb3c60ea":"markdown","854ceca0":"markdown","cc1c9d8c":"markdown","b9800a2e":"markdown","3d301eb0":"markdown","c31d5bfb":"markdown","da329add":"markdown"},"source":{"bb4d302a":"import os\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom scipy.io import loadmat\nfrom keras.utils import to_categorical\nimport itertools\n\nimport warnings\nwarnings.simplefilter('ignore')","8e0283e2":"# Thanks to https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist\ndef load_mnist_dataset():\n    \"\"\"\n    Load MNIST-original dataset\n\n    Returns:\n    - mnist_data -- an array of arrays in the shape of (784,)\n    - mnist_label -- an array of labels\n    - classes -- array of labels classes(a set of labels)\n    - shape -- shape of data item\n    - channels_count -- channel count of data images\n    \"\"\"\n\n    mnist = loadmat(\"..\/input\/mnist-original\/mnist-original.mat\")\n    mnist_data = mnist[\"data\"].T\n    mnist_data = mnist_data.reshape(len(mnist_data), 28, 28, 1)\n    mnist_label = mnist[\"label\"][0]\n    count = len(set(mnist_label))\n    return mnist_data, mnist_label, count, (28, 28, 1)","a3fe05c2":"# Download data from MNIST-original dataset\ndata, labels, classes_count, data_shape = load_mnist_dataset()\n\nprint(\"data shape: \" + str(data.shape))\nprint(\"labels shape: \" + str(labels.shape))\nprint(\"classes count: \" + str(classes_count))","3fabdc06":"def plot_images_sample(X, Y):\n    # Draw plot for images sample\n    \n    plt.figure(figsize=(10,10))\n    rand_indicies = np.random.randint(len(X), size=25)\n    for i in range(25):\n        plt.subplot(5,5,i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        index = rand_indicies[i]\n        plt.imshow(np.squeeze(X[index]), cmap=plt.cm.binary)\n        plt.xlabel(Y[index])\n    plt.show()","db62cdee":"# Draw plot for images sample\nplot_images_sample(data, labels)","3023d2d1":"def fe_data(df, target):\n    # FE: scaling data ant transform target to categorical\n    df = df \/ 255.\n    target = to_categorical(target)\n    return df, target","18236a01":"# FE and data splitting\ntest_size_part = 0.15\nx_train_orig, x_test_orig, y_train_orig, y_test_orig = train_test_split(data, labels, test_size=test_size_part, shuffle=True)\nX_train, Y_train = fe_data(x_train_orig, y_train_orig)\nX_test, Y_test = fe_data(x_test_orig, y_test_orig)","9fdf6d34":"# Thanks to https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist\n# Model building\nmodel = models.Sequential([\n        layers.Conv2D(16, kernel_size=(4, 4), strides=(1, 1), padding='same', activation='relu', input_shape=data_shape),\n        layers.Conv2D(16, kernel_size=(2, 2), strides=(1, 1), padding='same', activation='relu'),\n        layers.MaxPooling2D((4, 4), padding='same'),\n        layers.Dropout(0.25),\n    \n        layers.Flatten(),\n        layers.Dense(classes_count)\n    ])\n\nmodel.summary()","c673c1a0":"# Model training\nepochs_num = 20\nvalidation_split_part = 0.25\nmodel.compile(optimizer='adam',\n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(X_train, Y_train, epochs=epochs_num, validation_split=validation_split_part)","50af670e":"# Draw plot for CNN training\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.5, 1])\nplt.legend(loc='lower right')\nplt.show()","ed673a33":"\ntest_loss, test_acc = model.evaluate(X_test, Y_test, verbose=2)\nprint(\"test accuracy: \" + str(test_acc))","30de40ed":"def get_predictions(X_test):\n \n    predictions = model.predict(X_test)\n    predictions = np.argmax(predictions, axis=1)\n    \n    return predictions","136c15d6":"\npredictions = get_predictions(X_test)\nplot_images_sample(X_test, predictions)","ff3d9487":"# Thanks to https:\/\/www.kaggle.com\/vbmokin\/tensorflow-keras-gpu-for-chinese-mnist-prediction\ndef create_trace(x,y,ylabel,color):\n        trace = go.Scatter(\n            x = x,y = y,\n            name=ylabel,\n            marker=dict(color=color),\n            mode = \"markers+lines\",\n            text=x\n        )\n        return trace\n    \ndef plot_accuracy_and_loss(train_model):\n    hist = train_model.history\n    acc = hist['accuracy']\n    val_acc = hist['val_accuracy']\n    loss = hist['loss']\n    val_loss = hist['val_loss']\n    epochs = list(range(1,len(acc)+1))\n    #define the traces\n    trace_ta = create_trace(epochs,acc,\"Training accuracy\", \"Green\")\n    trace_va = create_trace(epochs,val_acc,\"Validation accuracy\", \"Red\")\n    trace_tl = create_trace(epochs,loss,\"Training loss\", \"Blue\")\n    trace_vl = create_trace(epochs,val_loss,\"Validation loss\", \"Magenta\")\n    fig = tools.make_subplots(rows=1,cols=2, subplot_titles=('Training and validation accuracy',\n                                                             'Training and validation loss'))\n    #add traces to the figure\n    fig.append_trace(trace_ta,1,1)\n    fig.append_trace(trace_va,1,1)\n    fig.append_trace(trace_tl,1,2)\n    fig.append_trace(trace_vl,1,2)\n    #set the layout for the figure\n    fig['layout']['xaxis'].update(title = 'Epoch')\n    fig['layout']['xaxis2'].update(title = 'Epoch')\n    fig['layout']['yaxis'].update(title = 'Accuracy', range=[0,1])\n    fig['layout']['yaxis2'].update(title = 'Loss', range=[0,1])\n    #plot\n    iplot(fig, filename='accuracy-loss')","576a7afc":"\nplot_accuracy_and_loss(history)","91803e49":"def plot_cm(train, target_train):\n# Look at confusion matrix \n# Thanks to https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6\n\n    def plot_confusion_matrix(cm, classes,\n                              normalize=False,\n                              title='Confusion matrix',\n                              cmap=plt.cm.Blues):\n        \"\"\"\n        This function prints and plots the confusion matrix.\n        Normalization can be applied by setting `normalize=True`.\n        \"\"\"\n        plt.imshow(cm, interpolation='nearest', cmap=cmap)\n        plt.title(title)\n        plt.colorbar()\n        tick_marks = np.arange(len(classes))\n        plt.xticks(tick_marks, classes, rotation=45)\n        plt.yticks(tick_marks, classes)\n\n        if normalize:\n            cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n        thresh = cm.max() \/ 2.\n        for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n            plt.text(j, i, cm[i, j],\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n        plt.tight_layout()\n        plt.ylabel('True label')\n        plt.xlabel('Predicted label')\n\n    # Predict the values from the validation dataset\n    Y_pred = model.predict(train)\n    # Convert predictions classes to one hot vectors \n    Y_pred_classes = np.argmax(Y_pred,axis = 1) \n    # Convert validation observations to one hot vectors\n    Y_true = np.argmax(target_train,axis = 1) \n    # compute the confusion matrix\n    confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n    # plot the confusion matrix\n    plot_confusion_matrix(confusion_mtx, classes = range(10)) ","d7712517":"# Draw confusing matrix for training data\nplot_cm(X_train, Y_train)","4acfb09f":"# Draw confusing matrix for test data\nplot_cm(X_test, Y_test)","b86f8a25":"def pred_wrong_display_MNIST_dataset(X_test, predictions, Y_test):\n    # Displays misclassified digits from MNIST dataset\n    \n    X_test_wrong = []\n    predictions_wrong = []\n    Y_test_pred = []\n    for i in range(len(X_test)):\n        Y_test_pred.append(np.argmax(Y_test[i]))\n        if predictions[i] != Y_test_pred[i]:\n            #print(i, predictions[i], Y_test_pred[i])\n            X_test_wrong.append(X_test[i])\n            predictions_wrong.append(predictions[i])\n\n    plot_images_sample(X_test_wrong, predictions_wrong)\n        \n    print('Accuracy is', round(accuracy_score(Y_test_pred, predictions),3))\n    \n    return Y_test_pred","8ef0bcc1":"# Displays misclassified digits from MNIST\nY_test_pred = pred_wrong_display_MNIST_dataset(X_test, predictions, Y_test)","1e78dea2":"# Find all images in input folder\ndata_files = []\nfor dirname, _, filenames in os.walk('..\/input'):\n    for filename in filenames:\n        data_files.append(os.path.join(dirname, filename))\ndata_files","4ef38c9f":"# Download data\n#image_file = data_files[1]\nimage_file = '..\/input\/typographic-digits-first-10-fonts\/Franklin_Gothic_Book_italic.png'\nprint(image_file[image_file.rfind('\/')+1:-4])\nimage_test = cv2.imread(image_file)\nplt.imshow(image_test)\nplt.show()","354437fc":"erode_kernel = 5\nthreshold_basic = 120","522a64be":"def digits_finder(image_file: str, out_size=28):\n    # Find digits on the image_file and transform it to [-1, out_size, out_size, 1]\n    \n    image_test = cv2.imread(image_file)\n    gray_test = cv2.cvtColor(image_test, cv2.COLOR_BGR2GRAY)\n    ret, thresh = cv2.threshold(gray_test, threshold_basic, 255, cv2.THRESH_BINARY)\n    image_erode = cv2.erode(thresh, np.ones((erode_kernel, erode_kernel), np.uint8), iterations=1)\n\n    # Find contours\n    contours, hierarchy = cv2.findContours(image_erode, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n    output = image_test.copy()\n\n    digits = []\n    j = 0\n    labels = []\n    for idx, contour in enumerate(contours):\n        (x, y, w, h) = cv2.boundingRect(contour)\n        if (hierarchy[0][idx][3] == 0):\n            cv2.rectangle(output, (x, y), (x + w, y + h), (70, 0, 0), 1)\n            digit_crop = gray_test[y:y + h, x:x + w]\n\n            # Resize digit canvas to square\n            size_max = max(w, h)\n            print(j, w*h)\n            digit_square = 255 * np.ones(shape=[size_max, size_max], dtype=np.uint8)\n            if w > h:\n                y_pos = size_max\/\/2 - h\/\/2\n                digit_square[y_pos:y_pos + h, 0:w] = digit_crop\n            elif w < h:\n                x_pos = size_max\/\/2 - w\/\/2\n                digit_square[0:h, x_pos:x_pos + w] = digit_crop\n            else:\n                digit_square = digit_crop\n            \n            # Resize digit to 28x28 and add digit and its X-coordinate\n            digits.append((x,(cv2.resize(digit_square, (out_size, out_size), interpolation=cv2.INTER_AREA))))\n            labels.append(str(j))\n            j += 1\n            \n\n    # Sort array in place by X-coordinate\n    digits.sort(key=lambda x: x[0], reverse=False)\n    \n    # Tranform digits to tensor\n    digits_new =[]\n    for i in range(len(digits)):\n        digits_new.append(digits[i][1])\n    digits_res = np.reshape(digits_new, (10, 28, 28, 1))\n\n    return digits_res, labels","99f5c403":"# Preprocessing data\nX_user_test, Y_user_test = digits_finder(image_file)","d1a5eb7a":"def plot_images_test(X, Y):\n    # Draw plot for images sample\n    \n    plt.figure(figsize=(10,10))\n    plt.gray()\n    for i in range(len(Y)):        \n        plt.subplot(1,len(Y),i+1)\n        plt.xticks([])\n        plt.yticks([])\n        plt.grid(False)\n        plt.imshow(np.squeeze(X[i]))\n        plt.xlabel(Y[i])\n    plt.show()","0e376779":"# Draw plot for images sample\nplot_images_test(X_user_test, Y_user_test)","c0488587":"# FE\nX_user_test, Y_user_test = fe_data(X_user_test, Y_user_test)","068555bf":"# Color inversion \nX_user_test = 1-X_user_test","efe7fe6f":"# Prediction and display it\npredictions_user = get_predictions(X_user_test)\nplot_images_test(X_user_test, predictions_user)","1c4965c7":"plot_cm(X_user_test, Y_user_test)","49ac3aca":"def pred_wrong_display_for_user_dataset(X_test, predictions, Y_test):\n    # Displays misclassified digits from user's dataset\n    \n    X_test_wrong = []\n    predictions_wrong = []\n    Y_test_pred = []\n    for i in range(len(X_test)):\n        Y_test_pred.append(np.argmax(Y_test[i]))\n        if predictions[i] != Y_test_pred[i]:\n            #print(i, predictions[i], Y_test_pred[i])\n            X_test_wrong.append(X_test[i])\n            predictions_wrong.append(predictions[i])\n\n    plot_images_test(X_test_wrong, predictions_wrong)\n        \n    print('Accuracy is', round(accuracy_score(Y_test_pred, predictions),3))\n    \n    return Y_test_pred","9d55f574":"Y_user_test_pred = pred_wrong_display_for_user_dataset(X_user_test, predictions_user, Y_user_test)","f3c52329":"X_train[100][10]","e486f1dc":"X_user_test[0][6]","17305981":"X_user_test[1][6]","63ae5a76":"X_user_test[9][6]","e2e1f454":"### 3.2. Preprocessing<a class=\"anchor\" id=\"3.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","c3f2260c":"### 3.1. Download data<a class=\"anchor\" id=\"3.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","0dee4574":"\n## Thanks to Kaggle GM, Prof. [@vbmokin](https:\/\/www.kaggle.com\/vbmokin)","0832484d":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [MNIST-digits model training](#2)\n    - [Download data](#2.1)\n    - [EDA & FE](#2.2)\n    - [Model training](#2.3)\n    - [Prediction](#2.4)    \n    - [Results visualization: plotting the loss error, confusing matrix, outliers](#2.5)\n1. [User-digits prediction and analyze](#3)\n    - [Download data](#3.1)\n    - [Preprocessing](#3.2)\n    - [EDA & FE](#3.3)\n    - [Prediction](#3.4) \n    - [Results visualization: confusing matrix, outliers](#3.5)","1ba3a649":"### Tensor values output","baa29f7b":"## 3. User-digits prediction and analyze<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","81afcd56":"**TASKS**: Experiment with parameters:\n* erode_kernel\n* threshold_basic","d2511a73":"### Outliers analysis","74463544":"**TASK**: Experiment with different images (fonts) - see in dataset [MNIST models testing: typographic digits](https:\/\/www.kaggle.com\/vbmokin\/typographic-digits-first-10-fonts)","4a7c4782":"### 2.2. EDA & FE<a class=\"anchor\" id=\"2.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","4b48dcfa":"User's dataset","aede0964":"### 3.5. Results visualization: confusing matrix, outliers<a class=\"anchor\" id=\"3.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","ef6f4b65":"### 2.4. Prediction<a class=\"anchor\" id=\"2.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","2cc65c34":"### Confuse matrix","f3d71f92":"MNIST","1b3faeca":"### 3.4. Prediction<a class=\"anchor\" id=\"3.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","c1cd7059":"**TASKS**: Experiment with CNN architecture and parameters:\n* number of layers\n* Conv2D parameters in each layers: number of neurons, kernel_size, strides, padding, activation functions\n* MaxPooling2D parameters\n* Dropout (add or no)\n* Softmax (add or no)\n* etc.","91a54972":"### 2.5. Results visualization: plotting the loss error, confusing matrix, outliers<a class=\"anchor\" id=\"2.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","52ec18e2":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","d74f0be1":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","ca4c07fb":"## Dataset [MNIST models testing: typographic digits](https:\/\/www.kaggle.com\/vbmokin\/typographic-digits-first-10-fonts)\n\n\nMy changes:\n* layers of the CNN\n* epochs_num, validation_split_part\n* different font used for recognition (Franklin_Gothic_Book_italic.png)\n* epochs_num, validation_split_part","de1021a2":"### 2.1. Download data<a class=\"anchor\" id=\"2.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","eb3c60ea":"## 2. MNIST-digits model training<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","854ceca0":"### 2.3. Model training<a class=\"anchor\" id=\"2.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","cc1c9d8c":"### Acknowledgements:\n* dataset [MNIST Original](https:\/\/www.kaggle.com\/avnishnish\/mnist-original)\n* [CNN over MNIST](https:\/\/www.kaggle.com\/mosius\/cnn-over-mnist)\n* [Data Science for tabular data: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-for-tabular-data-advanced-techniques)\n* [Data Science with DL & NLP: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-with-dl-nlp-advanced-techniques)\n* [AI-ML-DS Training. L3AT: NH4 - NN models](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-l3at-nh4-nn-models)\n* [Introduction to CNN Keras - 0.997 (top 6%)](https:\/\/www.kaggle.com\/yassineghouzam\/introduction-to-cnn-keras-0-997-top-6)\n* [Tensorflow\/Keras\/GPU for Chinese MNIST Prediction](https:\/\/www.kaggle.com\/gpreda\/tensorflow-keras-gpu-for-chinese-mnist-prediction)","b9800a2e":"### Plotting the loss error (Plotly)","3d301eb0":"### 3.3. EDA & FE<a class=\"anchor\" id=\"3.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","c31d5bfb":"**TASK**: Experiment with:\n* epochs_num\n* validation_split_part (optional)","da329add":"**TASK**: Experiment with test_size_part"}}