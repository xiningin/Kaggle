{"cell_type":{"ca4139ec":"code","c394ee9f":"code","6cc0ce5c":"code","06bb333c":"code","91f0b6bc":"code","d2829199":"code","ed3e6b58":"code","9c3be290":"code","7aeb6300":"code","30320dbc":"code","67576bdd":"code","4b70da7c":"code","3ca0d3ce":"code","ed9b8f4a":"code","46779946":"code","71c4f573":"code","73a68e93":"code","56a528ef":"code","52d0a950":"code","509f9e0b":"code","051cfaae":"code","e9c5a366":"code","d2214b89":"code","63cf144d":"code","22962fd0":"code","40ee4be1":"code","19f0c03c":"code","3d3d0485":"code","7743ad12":"code","08388ead":"code","dea5159c":"code","6362d5d2":"code","9b1d9827":"code","57f915f7":"code","9b346a71":"code","9899d1c4":"code","bc0184ee":"code","5997f8db":"code","ef5e7d8b":"code","c07047f9":"code","7e6e828c":"code","3f4d229d":"code","f07a2268":"code","2090aeac":"code","59049ac1":"code","2fb3c169":"code","e088e7c5":"code","11964bb6":"code","b4889f12":"code","70df286d":"code","9d92997c":"code","093bf8f0":"code","a79ac5a0":"code","98bfce14":"code","0b437e67":"code","250532c0":"code","c9b2626b":"code","05aa4f04":"code","860e5040":"code","37343594":"code","161b210e":"code","821f78e6":"code","7ed2c5cb":"code","3a1c6529":"code","95edbbfc":"code","72c9fc98":"code","9518dd61":"code","1f113a38":"code","0cf2fd44":"code","e7a05d89":"code","c02cd8cf":"code","6266eec5":"code","5256e91e":"code","7351eb60":"code","e74d9064":"code","2a743ad2":"code","bfb8c8b3":"code","f832ee0e":"code","78112697":"code","62437e56":"code","490c696d":"code","be122203":"code","648005b3":"code","ff530fc9":"code","43b0e7a6":"code","47f83d97":"code","f34c4d5e":"code","37134646":"code","b29426a1":"code","260f2844":"code","7fffb313":"code","08592f8b":"code","04bb9d4c":"code","0f2ca4b9":"code","615c0f4f":"code","101dac0c":"markdown","37087858":"markdown","3c5c7f49":"markdown"},"source":{"ca4139ec":"import warnings\nimport numpy as np\nimport math\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras import optimizers\nfrom keras.utils import plot_model\nfrom keras.models import Sequential, Model\nfrom keras.layers.convolutional import Conv1D, MaxPooling1D\nfrom keras.layers import Dense, LSTM, RepeatVector, TimeDistributed, Flatten\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\n'''\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\n'''\nimport tensorflow\nfrom numpy.random import seed\ntensorflow.random.set_seed(1)\nseed(1)","c394ee9f":"dataset = pd.read_csv('..\/input\/temperature\/climate_hour.csv',index_col=0,header=0)\n#dataset = dataset.sort_values('Date Time')\ndataset.index = pd.to_datetime(dataset.index, format=\"%d.%m.%Y %H:%M:%S\")\ndataset.index","6cc0ce5c":"def series_to_supervised(data, window=1, lag=1, dropnan=True, simple=True, single=True):\n    cols, names = list(), list()\n    # Input sequence (t-n, ... t-1)\n    for i in range(window, 0, -1):\n        cols.append(data.shift(i))\n        names += [('%s(t-%d)' % (col, i)) for col in data.columns]\n    # Current timestep (t=0)\n    \n    cols.append(data)\n    names += [('%s(t)' % (col)) for col in data.columns]\n    if simple == False:\n        # Target timestep (t=lag)\n        if single == True:\n            cols.append(data.shift(-lag))\n            names += [('%s(t+%d)' % (col, lag)) for col in data.columns]\n        if single == False:\n            for j in range(1, lag+1, 1):\n                cols.append(data.shift(-j))\n                names += [('%s(t+%d)' % (col, j)) for col in data.columns]\n\n    # Put it all together\n    agg = pd.concat(cols, axis=1)\n    agg.columns = names\n    agg.index = data.index\n    # Drop rows with NaN values\n    if dropnan:\n        agg.dropna(inplace=True)\n    return agg","06bb333c":"y_origine = dataset.loc['01.01.2015 01:00:00':'2017-01-01 00:00:00']\ny_origine = y_origine.values\ny_origine = y_origine[:,1]","91f0b6bc":"values = dataset.values","d2829199":"i = 1\nplt.figure()\nfor feature in range(0,14):\n    plt.subplot(14, 1, i)\n    plt.subplots_adjust(top = 20, bottom = 10.9)\n    plt.plot(values[:,feature])\n    plt.title(dataset.columns[feature], y=.8, loc='right')\n    i += 1\nplt.show()","ed3e6b58":"print(np.argmin(values[:,11]))\nprint(values[57208:57211,11])\nvalues[57208:57211,11] = 0\nprint(values[57208:57211,11])","9c3be290":"i = 1\nplt.figure()\nfor feature in range(0,14):\n    plt.subplot(14, 1, i)\n    plt.subplots_adjust(top = 20, bottom = 10.9)\n    plt.plot(values[:,feature])\n    plt.title(dataset.columns[feature], y=.8, loc='right')\n    i += 1\nplt.show()","7aeb6300":"print(np.argmin(values[:,12]))\nprint(values[57207:57211,12])\nvalues[57207:57211,12] = 0\nprint(values[57207:57211,12])","30320dbc":"i = 1\nplt.figure()\nfor feature in range(0,14):\n    plt.subplot(14, 1, i)\n    plt.subplots_adjust(top = 20, bottom = 10.9)\n    plt.plot(dataset.values[:,feature])\n    plt.title(dataset.columns[feature], y=.8, loc='right')\n    i += 1\nplt.show()","67576bdd":"normalized_y = MinMaxScaler(feature_range=(-1,1))\ny_norm = values[:,1]\ny_norm = y_norm.reshape(-1,1) \ny_norm = normalized_y.fit_transform(y_norm)\nnormalized = MinMaxScaler(feature_range=(-1,1))\ndata_normalized = normalized.fit_transform(values)\ndataset_normalized = pd.DataFrame(data_normalized,columns=dataset.columns,index=dataset.index)\ny_normaliz = pd.DataFrame(y_norm,index=dataset.index)","4b70da7c":"dataset_normalized.head()","3ca0d3ce":"window = 24\nseries = series_to_supervised(dataset_normalized, window=window)\nseries.head()","ed9b8f4a":"y = series['T (degC)(t)']\ny.shape\nseries.drop(['p (mbar)(t)','T (degC)(t)', 'Tpot (K)(t)','Tdew (degC)(t)','rh (%)(t)','VPmax (mbar)(t)','VPact (mbar)(t)','VPdef (mbar)(t)','sh (g\/kg)(t)','H2OC (mmol\/mol)(t)','rho (g\/m**3)(t)','wv (m\/s)(t)','max. wv (m\/s)(t)','wd (deg)(t)'], axis=1, inplace=True)\nseries.head()","46779946":"series.shape","71c4f573":"series  = series.sort_values('Date Time')\nX_train = series.loc['2009-01-02 01:00:00':'01.01.2015 00:00:00']\nX_valid = series.loc['01.01.2015 01:00:00':'2017-01-01 00:00:00']\nY_train = y_normaliz.loc['2009-01-02 01:00:00':'01.01.2015 00:00:00']\nY_valid = y_normaliz.loc['01.01.2015 01:00:00':'2017-01-01 00:00:00']\ny_index_valid = Y_valid.index\nprint(X_train.shape,X_valid.shape,Y_train.shape,Y_valid.shape)","73a68e93":"X_train = X_train.values\nY_train = Y_train.values\nX_valid = X_valid.values\nY_valid = Y_valid.values\nY_train = Y_train.reshape(-1,1)\nY_valid = Y_valid.reshape(-1,1)\nprint(X_train.shape,X_valid.shape,Y_train.shape,Y_valid.shape)","56a528ef":"timesteps = 24\nndim = 14\nX_train_reformer = X_train.reshape(X_train.shape[0],timesteps,ndim)\nX_valid_reformer = X_valid.reshape(X_valid.shape[0],timesteps,ndim)\nY_train = Y_train.reshape(Y_train.shape[0],)\nY_valid = Y_valid.reshape(Y_valid.shape[0],)\nprint(X_train_reformer.shape,X_valid_reformer.shape,Y_train.shape,Y_valid.shape)\n\n","52d0a950":"mlp_model = Sequential()\nmlp_model.add(Dense(336, activation='relu', input_dim=X_train.shape[1]))\nmlp_model.add(Dense(100, activation='relu'))\nmlp_model.add(Dense(20, activation='relu'))\nmlp_model.add(Dense(1))\nmlp_model.compile(loss='mae',optimizer='adam', metrics=['mse'])\nmlp_model.summary()\nmlp_history = mlp_model.fit(X_train,Y_train, validation_data=(X_valid,Y_valid),epochs=10,verbose=2)","509f9e0b":"\nmae_train_mlp, mae_val_mlp, mse_train_mlp, mse_val_mlp, mae_mlp, mse_mlp, mae_mlp_nn, mse_mlp_nn = [],[],[],[],[],[],[],[]","051cfaae":"'''resultat = pd.DataFrame({'temp_true':y_origine,'temp_pred':lstm_valid_pred_nn.ravel()},index=y_index_valid)\nresultat.to_csv('resultat.csv')'''","e9c5a366":"print(mlp_history.history['loss'][-1],mlp_history.history['val_loss'][-1])\nmae_train_mlp.append(mlp_history.history['loss'][-1]) \nmae_val_mlp.append(mlp_history.history['val_loss'][-1]) \nmse_train_mlp.append(math.sqrt(mlp_history.history['mse'][-1])) \nmse_val_mlp.append(math.sqrt(mlp_history.history['val_mse'][-1]))","d2214b89":"mlp_valid_pred = mlp_model.predict(X_valid)\nMAE = mean_absolute_error(Y_valid, mlp_valid_pred, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(Y_valid, mlp_valid_pred, sample_weight=None, multioutput='uniform_average')\nprint(MAE, MSE)\nmae_mlp.append(MAE)\nmse_mlp.append(math.sqrt(MSE))","63cf144d":"mlp_valid_pred_nn = normalized_y.inverse_transform(mlp_valid_pred)\nMAE = mean_absolute_error(y_origine, mlp_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(y_origine, mlp_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nprint(MAE,MSE)\nmae_mlp_nn.append(MAE)\nmse_mlp_nn.append(math.sqrt(MSE))","22962fd0":"len(mae_mlp)","40ee4be1":"Y_valid_inv = normalized_y.inverse_transform(Y_valid.reshape(-1,1))\nnormalized_mlp_predictions = pd.DataFrame(Y_valid_inv, columns=['Temperature'])\nnormalized_mlp_predictions.index = y_index_valid \nnormalized_mlp_predictions['Predicted Temperature'] = mlp_valid_pred_nn\nnormalized_mlp_predictions.head()","19f0c03c":"normalized_mlp_predictions.plot()","3d3d0485":"print(np.mean(mae_train_mlp),\"\/\",min(mae_train_mlp))\nprint(np.mean(mae_val_mlp),\"\/\",min(mae_val_mlp))\nprint(np.mean(mae_mlp),\"\/\",min(mae_mlp))\nprint(np.mean(mae_mlp_nn),\"\/\",min(mae_mlp_nn))","7743ad12":"print(np.mean(mse_train_mlp),\"\/\",min(mse_train_mlp))\nprint(np.mean(mse_val_mlp),\"\/\",min(mse_val_mlp))\nprint(np.mean(mse_mlp),\"\/\",min(mse_mlp))\nprint(np.mean(mse_mlp_nn),\"\/\",min(mse_mlp_nn))","08388ead":"plt.plot(mlp_history.history['loss'])\nplt.plot(mlp_history.history['val_loss'])\nplt.title('model MLP')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","dea5159c":"mae_train_cnn, mae_val_cnn, mse_train_cnn, mse_val_cnn, mae_cnn, mse_cnn, mae_cnn_nn, mse_cnn_nn = [],[],[],[],[],[],[],[]","6362d5d2":"model_cnn = Sequential()\nmodel_cnn.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(timesteps,ndim)))\nmodel_cnn.add(MaxPooling1D(pool_size=2))\nmodel_cnn.add(Flatten())\nmodel_cnn.add(Dense(24, activation='relu'))\nmodel_cnn.add(Dense(1))\nmodel_cnn.compile(loss='mae', optimizer='adam', metrics=['mse'])\nmodel_cnn.summary()","9b1d9827":"cnn_history = model_cnn.fit(X_train_reformer,Y_train,validation_data=(X_valid_reformer,Y_valid),epochs=10,verbose=2)","57f915f7":"print(cnn_history.history['loss'][-1],cnn_history.history['val_loss'][-1])\n\nmae_train_cnn.append(cnn_history.history['loss'][-1]) \nmae_val_cnn.append(cnn_history.history['val_loss'][-1]) \nmse_train_cnn.append(math.sqrt(cnn_history.history['mse'][-1])) \nmse_val_cnn.append(math.sqrt(cnn_history.history['val_mse'][-1]))\n","9b346a71":"cnn_valid_pred = model_cnn.predict(X_valid_reformer)\nMAE = mean_absolute_error(Y_valid, cnn_valid_pred, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(Y_valid, cnn_valid_pred, sample_weight=None, multioutput='uniform_average')\nprint(MAE,MSE)\nmae_cnn.append(MAE)\nmse_cnn.append(math.sqrt(MSE))","9899d1c4":"cnn_valid_pred_nn = normalized_y.inverse_transform(cnn_valid_pred)\nMAE = mean_absolute_error(y_origine, cnn_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(y_origine, cnn_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nprint(MAE,MSE)\nmae_cnn_nn.append(MAE)\nmse_cnn_nn.append(math.sqrt(MSE))","bc0184ee":"normalized_cnn_predictions = pd.DataFrame(Y_valid_inv, columns=['Temperature'])\nnormalized_cnn_predictions.index = y_index_valid \nnormalized_cnn_predictions['Predicted Temperature'] = cnn_valid_pred_nn\nnormalized_cnn_predictions.head()","5997f8db":"normalized_cnn_predictions.plot()","ef5e7d8b":"len(mae_cnn_nn)","c07047f9":"print(np.mean(mae_train_cnn),\"\/\",min(mae_train_cnn))\nprint(np.mean(mae_val_cnn),\"\/\",min(mae_val_cnn))\nprint(np.mean(mae_cnn),\"\/\",min(mae_cnn))\nprint(np.mean(mae_cnn_nn),\"\/\",min(mae_cnn_nn))","7e6e828c":"print(np.mean(mse_train_cnn),\"\/\",min(mse_train_cnn))\nprint(np.mean(mse_val_cnn),\"\/\",min(mse_val_cnn))\nprint(np.mean(mse_cnn),\"\/\",min(mse_cnn))\nprint(np.mean(mse_cnn_nn),\"\/\",min(mse_cnn_nn))","3f4d229d":"mae_train_lstm, mae_val_lstm, mse_train_lstm, mse_val_lstm, mae_lstm, mse_lstm, mae_lstm_nn, mse_lstm_nn = [],[],[],[],[],[],[],[]","f07a2268":"lstm_model = Sequential()\nlstm_model.add(LSTM(50, input_shape=(timesteps,ndim)))\nlstm_model.add(Dense(1))\nlstm_model.compile(loss='mae', optimizer='adam', metrics=['mse'])\nlstm_model.summary()\nlstm_history = lstm_model.fit(X_train_reformer,Y_train,validation_data=(X_valid_reformer,Y_valid),epochs=10,verbose=2)","2090aeac":"plt.plot(lstm_history.history['loss'])\nplt.plot(lstm_history.history['val_loss'])\nplt.title('model LSTM')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","59049ac1":"print(lstm_history.history['loss'][-1],lstm_history.history['val_loss'][-1])\n#print(math.sqrt(lstm_history.history['mse'][-1]),math.sqrt(lstm_history.history['val_mse'][-1]))\nmae_train_lstm.append(lstm_history.history['loss'][-1]) \nmae_val_lstm.append(lstm_history.history['val_loss'][-1]) \nmse_train_lstm.append(math.sqrt(lstm_history.history['mse'][-1])) \nmse_val_lstm.append(math.sqrt(lstm_history.history['val_mse'][-1]))\n","2fb3c169":"lstm_valid_pred = lstm_model.predict(X_valid_reformer)\nMAE = mean_absolute_error(Y_valid, lstm_valid_pred, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(Y_valid, lstm_valid_pred, sample_weight=None, multioutput='uniform_average'))\nprint(MAE,RMSE)\nmae_lstm.append(MAE)\nmse_lstm.append(math.sqrt(MSE))","e088e7c5":"lstm_valid_pred_nn = normalized_y.inverse_transform(lstm_valid_pred)\nMAE = mean_absolute_error(y_origine, lstm_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(y_origine, lstm_valid_pred_nn, sample_weight=None, multioutput='uniform_average'))\nprint(MAE, RMSE)\nmae_lstm_nn.append(MAE)\nmse_lstm_nn.append(math.sqrt(MSE))","11964bb6":"resultat = pd.DataFrame({'temp_true':y_origine,'temp_pred':lstm_valid_pred_nn.ravel()},index=y_index_valid)\nresultat.to_csv('resultat.csv')","b4889f12":"import matplotlib.dates as mdates\nfig = plt.figure(figsize=(14, 5))\nformat_date = mdates.DateFormatter('%d\/%m\/%y')\nax = fig.add_subplot(111)\nax.plot(y_index_valid,y_origine, label='observed')\nax.plot(y_index_valid,lstm_valid_pred_nn.ravel(), label='predicted')\nax.xaxis.set_major_formatter(format_date)\nax.set_title(\"Prediction vs Observation\")\nax.set_xlabel(\"data\")\nax.set_ylabel(\"Temperature (C\u00b0)\")\nax.legend()\nax.tick_params(axis='x', rotation=70)\nplt.show()","70df286d":"normalized_lstm_predictions = pd.DataFrame(Y_valid_inv, columns=['Temperature'])\nnormalized_lstm_predictions.index = y_index_valid \nnormalized_lstm_predictions['Predicted Temperature'] = lstm_valid_pred_nn\nnormalized_lstm_predictions.head()","9d92997c":"normalized_lstm_predictions.plot()","093bf8f0":"len(mae_lstm_nn)","a79ac5a0":"print(np.mean(mae_train_lstm),\"\/\",min(mae_train_lstm))\nprint(np.mean(mae_val_lstm),\"\/\",min(mae_val_lstm))\nprint(np.mean(mae_lstm),\"\/\",min(mae_lstm))\nprint(np.mean(mae_lstm_nn),\"\/\",min(mae_lstm_nn))","98bfce14":"print(np.mean(mse_train_lstm),\"\/\",min(mse_train_lstm))\nprint(np.mean(mse_val_lstm),\"\/\",min(mse_val_lstm))\nprint(np.mean(mse_lstm),\"\/\",min(mse_lstm))\nprint(np.mean(mse_lstm_nn),\"\/\",min(mse_lstm_nn))","0b437e67":"subsequences = 14\ntimesteps = 24 #X_train_series.shape[1]\/\/subsequences\nX_train_series_sub = X_train_reformer.reshape((X_train_reformer.shape[0], subsequences, timesteps, 1))\nX_valid_series_sub = X_valid_reformer.reshape((X_valid_reformer.shape[0], subsequences, timesteps, 1))\nprint('Train set shape', X_train_series_sub.shape)\nprint('Validation set shape', X_valid_series_sub.shape)","250532c0":"mae_train_cnn_lstm, mae_val_cnn_lstm, mse_train_cnn_lstm, mse_val_cnn_lstm, mae_cnn_lstm, mse_cnn_lstm, mae_cnn_lstm_nn, mse_cnn_lstm_nn = [],[],[],[],[],[],[],[]","c9b2626b":"model_cnn_lstm = Sequential()\nmodel_cnn_lstm.add(TimeDistributed(Conv1D(filters=64, kernel_size=1, activation='relu'), input_shape=(None, X_train_series_sub.shape[2], X_train_series_sub.shape[3])))\nmodel_cnn_lstm.add(TimeDistributed(MaxPooling1D(pool_size=2)))\nmodel_cnn_lstm.add(TimeDistributed(Flatten()))\nmodel_cnn_lstm.add(LSTM(50, activation='relu'))\nmodel_cnn_lstm.add(Dense(1))\nmodel_cnn_lstm.compile(loss='mae', optimizer='adam', metrics=['mse'])","05aa4f04":"cnn_lstm_history = model_cnn_lstm.fit(X_train_series_sub, Y_train, validation_data=(X_valid_series_sub, Y_valid), epochs=10, verbose=2)","860e5040":"print(cnn_lstm_history.history['loss'][-1],cnn_lstm_history.history['val_loss'][-1])\nmae_train_cnn_lstm.append(cnn_lstm_history.history['loss'][-1]) \nmae_val_cnn_lstm.append(cnn_lstm_history.history['val_loss'][-1]) \nmse_train_cnn_lstm.append(math.sqrt(cnn_lstm_history.history['mse'][-1])) \nmse_val_cnn_lstm.append(math.sqrt(cnn_lstm_history.history['val_mse'][-1]))","37343594":"cnn_lstm_valid_pred = model_cnn_lstm.predict(X_valid_series_sub)\nMAE = mean_absolute_error(Y_valid, cnn_lstm_valid_pred, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(Y_valid, cnn_lstm_valid_pred, sample_weight=None, multioutput='uniform_average')\nprint(MAE,MSE)\nmae_cnn_lstm.append(MAE)\nmse_cnn_lstm.append(math.sqrt(MSE))","161b210e":"cnn_lstm_valid_pred_nn = normalized_y.inverse_transform(cnn_lstm_valid_pred)\nMAE = mean_absolute_error(y_origine, cnn_lstm_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nMSE = mean_squared_error(y_origine, cnn_lstm_valid_pred_nn, sample_weight=None, multioutput='uniform_average')\nprint(MAE,MSE)\nmae_cnn_lstm_nn.append(MAE)\nmse_cnn_lstm_nn.append(math.sqrt(MSE))","821f78e6":"normalized_cnn_lstm_predictions = pd.DataFrame(Y_valid_inv, columns=['Temperature'])\nnormalized_cnn_lstm_predictions.index = y_index_valid \nnormalized_cnn_lstm_predictions['Predicted Temperature'] = cnn_lstm_valid_pred_nn\nnormalized_cnn_lstm_predictions.head()","7ed2c5cb":"normalized_cnn_lstm_predictions.plot()","3a1c6529":"len(mse_cnn_lstm_nn)","95edbbfc":"print(np.mean(mae_train_cnn_lstm),\"\/\",min(mae_train_cnn_lstm))\nprint(np.mean(mae_val_cnn_lstm),\"\/\",min(mae_val_cnn_lstm))\nprint(np.mean(mae_cnn_lstm),\"\/\",min(mae_cnn_lstm))\nprint(np.mean(mae_cnn_lstm_nn),\"\/\",min(mae_cnn_lstm_nn))","72c9fc98":"print(np.mean(mse_train_cnn_lstm),\"\/\",min(mse_train_cnn_lstm))\nprint(np.mean(mse_val_cnn_lstm),\"\/\",min(mse_val_cnn_lstm))\nprint(np.mean(mse_cnn_lstm),\"\/\",min(mse_cnn_lstm))\nprint(np.mean(mse_cnn_lstm_nn),\"\/\",min(mse_cnn_lstm_nn))","9518dd61":"window=24\nlag=24","1f113a38":"series_single = series_to_supervised(dataset_normalized, window=window, lag=lag, simple=False)\nseries_single.head()","0cf2fd44":"print(series_single.shape)","e7a05d89":"y_single = series_single['T (degC)(t+24)']\nseries_single.drop(['p (mbar)(t+24)','T (degC)(t+24)', 'Tpot (K)(t+24)','Tdew (degC)(t+24)','rh (%)(t+24)','VPmax (mbar)(t+24)','VPact (mbar)(t+24)','VPdef (mbar)(t+24)','sh (g\/kg)(t+24)','H2OC (mmol\/mol)(t+24)','rho (g\/m**3)(t+24)','wv (m\/s)(t+24)','max. wv (m\/s)(t+24)','wd (deg)(t+24)'], axis=1, inplace=True)\nseries_single.head()","c02cd8cf":"print(y_single.shape)","6266eec5":"series_single  = series_single.sort_values('Date Time')\nX_train_single = series_single.loc['02-01-2009 01:00:00':'01.01.2015 00:00:00']\nX_valid_single = series_single.loc['01.01.2015 01:00:00':'31-12-2016 00:00:00']\nY_train_single = y_normaliz.loc['02-01-2009 01:00:00':'01.01.2015 00:00:00']\nY_valid_single = y_normaliz.loc['01.01.2015 01:00:00':'31-12-2016 00:00:00']\ny_index_valid_single = Y_valid_single.index\nprint(X_train_single.shape,X_valid_single.shape,Y_train_single.shape,Y_valid_single.shape)","5256e91e":"X_train_single = X_train_single.values\nY_train_single = Y_train_single.values\nX_valid_single = X_valid_single.values\nY_valid_single = Y_valid_single.values\nY_train_single = Y_train_single.reshape(-1,1)\nY_valid_single = Y_valid_single.reshape(-1,1)\nprint(X_train_single.shape,X_valid_single.shape,Y_train_single.shape,Y_valid_single.shape)","7351eb60":"timesteps = 25\nndim = 14\nX_train_single_reformer = X_train_single.reshape(X_train_single.shape[0],timesteps,ndim)\nX_valid_single_reformer = X_valid_single.reshape(X_valid_single.shape[0],timesteps,ndim)\nY_train_single = Y_train_single.reshape(Y_train_single.shape[0],)\nY_valid_single = Y_valid_single.reshape(Y_valid_single.shape[0],)\nprint(X_train_single_reformer.shape,X_valid_single_reformer.shape,Y_train_single.shape,Y_valid_single.shape)","e74d9064":"lstm_model_single = Sequential()\nlstm_model_single.add(LSTM(50, input_shape=(25,14)))\nlstm_model_single.add(Dense(1))\nlstm_model_single.compile(loss='mae', optimizer='adam', metrics=['mse'])\nlstm_model_single.summary()\nlstm_history_single = lstm_model_single.fit(X_train_single_reformer,Y_train_single,validation_data=(X_valid_single_reformer,Y_valid_single),epochs=10,verbose=2)","2a743ad2":"plt.plot(lstm_history_single.history['loss'])\nplt.plot(lstm_history_single.history['val_loss'])\nplt.title('model LSTM Single Step')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","bfb8c8b3":"print(lstm_history_single.history['loss'][-1],lstm_history_single.history['val_loss'][-1])\nprint(math.sqrt(lstm_history_single.history['mse'][-1]),math.sqrt(lstm_history_single.history['val_mse'][-1]))","f832ee0e":"lstm_valid_single_pred = lstm_model_single.predict(X_valid_single_reformer)\nMAE = mean_absolute_error(Y_valid_single, lstm_valid_single_pred, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(Y_valid_single, lstm_valid_single_pred, sample_weight=None, multioutput='uniform_average'))\nprint(MAE,RMSE)","78112697":"lstm_valid_single_pred_nn = normalized_y.inverse_transform(lstm_valid_single_pred)\nMAE = mean_absolute_error(y_origine[24:], lstm_valid_single_pred_nn, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(y_origine[24:], lstm_valid_single_pred_nn, sample_weight=None, multioutput='uniform_average'))\nprint(MAE, RMSE)","62437e56":"import matplotlib.dates as mdates\nfig = plt.figure(figsize=(14, 5))\nformat_date = mdates.DateFormatter('%d\/%m\/%y')\nax = fig.add_subplot(111)\nax.plot(y_index_valid_single,y_origine[24:], label='observed')\nax.plot(y_index_valid_single,lstm_valid_single_pred_nn.ravel(), label='predicted')\nax.xaxis.set_major_formatter(format_date)\nax.set_title(\"Prediction vs Observation\")\nax.set_xlabel(\"data\")\nax.set_ylabel(\"Temperature (C\u00b0)\")\nax.legend()\nax.tick_params(axis='x', rotation=70)\nplt.show()","490c696d":"window = 24\nlag =24","be122203":"series_multi = series_to_supervised(dataset_normalized, window=window, lag=lag, simple=False, single=False)\nseries_multi.head()","648005b3":"print(series_multi.shape)","ff530fc9":"features = [('T (degC)(t+%d)' % (i)) for i in range(1, lag+1)]\ny_multi = series_multi[features]\nplus = [('%s(t+%d)' % (f,k)) for f in dataset.columns for k in range(1,lag+1)]\nseries_multi.drop(plus, axis=1, inplace=True)\nseries_multi.head()","43b0e7a6":"print(y_multi.shape)","47f83d97":"series_multi  = series_multi.sort_values('Date Time')\nX_train_multi = series_multi.loc['02-01-2009 01:00:00':'01.01.2015 00:00:00']\nX_valid_multi = series_multi.loc['01.01.2015 01:00:00':'31-12-2016 00:00:00']\nY_train_multi = y_multi.loc['02-01-2009 01:00:00':'01.01.2015 00:00:00']\nY_valid_multi = y_multi.loc['01.01.2015 01:00:00':'31-12-2016 00:00:00']\ny_index_valid_multi = Y_valid_multi.index\nprint(X_train_multi.shape,X_valid_multi.shape,Y_train_multi.shape,Y_valid_multi.shape)","f34c4d5e":"X_train_multi = X_train_multi.values\nY_train_multi = Y_train_multi.values\nX_valid_multi = X_valid_multi.values\nY_valid_multi = Y_valid_multi.values\nY_train_multi = Y_train_multi.reshape(-1,24)\nY_valid_multi = Y_valid_multi.reshape(-1,24)\nprint(X_train_multi.shape,X_valid_multi.shape,Y_train_multi.shape,Y_valid_multi.shape)","37134646":"timesteps = 25\nndim = 14\nX_train_multi_reformer = X_train_multi.reshape(X_train_multi.shape[0],timesteps,ndim)\nX_valid_multi_reformer = X_valid_multi.reshape(X_valid_multi.shape[0],timesteps,ndim)\nY_train_multi = Y_train_multi.reshape(Y_train_multi.shape[0],24)\nY_valid_multi = Y_valid_multi.reshape(Y_valid_multi.shape[0],24)\nprint(X_train_multi_reformer.shape,X_valid_multi_reformer.shape,Y_train_multi.shape,Y_valid_multi.shape)","b29426a1":"lstm_model_multi = Sequential()\nlstm_model_multi.add(LSTM(50, input_shape=(25,14)))\nlstm_model_multi.add(Dense(24))\nlstm_model_multi.compile(loss='mae', optimizer='adam', metrics=['mse'])\nlstm_model_multi.summary()\nlstm_history_multi = lstm_model_multi.fit(X_train_multi_reformer,Y_train_multi,validation_data=(X_valid_multi_reformer,Y_valid_multi),epochs=10,verbose=2)","260f2844":"plt.plot(lstm_history_multi.history['loss'])\nplt.plot(lstm_history_multi.history['val_loss'])\nplt.title('model LSTM Multi Step')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","7fffb313":"print(lstm_history_multi.history['loss'][-1],lstm_history_multi.history['val_loss'][-1])\nprint(math.sqrt(lstm_history_multi.history['mse'][-1]),math.sqrt(lstm_history_multi.history['val_mse'][-1]))","08592f8b":"lstm_valid_multi_pred = lstm_model_multi.predict(X_valid_multi_reformer)\nMAE = mean_absolute_error(Y_valid_multi, lstm_valid_multi_pred, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(Y_valid_multi, lstm_valid_multi_pred, sample_weight=None, multioutput='uniform_average'))\nprint(MAE,RMSE)","04bb9d4c":"y_true = normalized_y.inverse_transform(Y_valid_multi)","0f2ca4b9":"lstm_valid_multi_pred_nn = normalized_y.inverse_transform(lstm_valid_multi_pred)\nMAE = mean_absolute_error(y_true, lstm_valid_multi_pred_nn, sample_weight=None, multioutput='uniform_average')\nRMSE = math.sqrt(mean_squared_error(y_true, lstm_valid_multi_pred_nn, sample_weight=None, multioutput='uniform_average'))\nprint(MAE, RMSE)","615c0f4f":"import matplotlib.dates as mdates\nimport matplotlib.patches as mpatches\nfig = plt.figure(figsize=(14, 5))\nformat_date = mdates.DateFormatter('%d\/%m\/%Y')\nax = fig.add_subplot(111)\nax.plot(y_index_valid_multi,lstm_valid_multi_pred_nn, label='predicted', color='green')\nax.plot(y_index_valid_multi,y_true, label='observed', color='red')\nax.xaxis.set_major_formatter(format_date)\nax.set_title(\"Prediction vs Observation\")\nax.set_xlabel(\"data\")\nax.set_ylabel(\"Temperature (C\u00b0)\")\n#ax.legend(lines[:2], ['first', 'second']);\nred_patch = mpatches.Patch(color='red', label='observed')\nvert_patch = mpatches.Patch(color='green', label='predicted')\nax.legend(handles=[red_patch, vert_patch], loc='lower left', frameon=False, ncol=2)\nax.tick_params(axis='x', rotation=70)\nplt.show()","101dac0c":"# Single Step","37087858":"# Simple RNN","3c5c7f49":"# Multi Step"}}