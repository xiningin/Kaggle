{"cell_type":{"44a652c7":"code","a4d46df1":"code","5a52f886":"code","b4587a6d":"code","9249e72d":"code","2a1c8a3b":"code","974ad718":"code","c7ddfc96":"code","17b6c18c":"code","49e79df6":"code","1be8e705":"code","724233b2":"code","4bf4ec53":"code","ade88eb4":"code","c03811df":"code","69075297":"markdown","7600e3ff":"markdown","f39e08f3":"markdown","cd7de9ea":"markdown"},"source":{"44a652c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4d46df1":"import tensorflow as tf\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport re","5a52f886":"trainData = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntestData = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsampleData = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","b4587a6d":"trainData.head()","9249e72d":"pd.unique(trainData[\"keyword\"])[:10]","2a1c8a3b":"def save(pred):\n    d = {\n        \"id\" : testData[\"id\"],\n        \"target\" : pred\n    }\n    pd.DataFrame(d).to_csv(\"\/kaggle\/working\/submit.csv\", index=False)","974ad718":"# May be this get 1st positon in leaderboard.\nrand = np.random.randint(0, 2, size = len(testData)).tolist()\nsave(rand)\n# score .50444 :(","c7ddfc96":"# Trying some trick\nprediction = [0 if k is np.nan else 1 for k in testData[\"keyword\"]]\nsave(prediction)\n# score .42782 :@ unexpected","17b6c18c":"# Apply some If else intersection\n \ntrainKeyword = pd.unique(trainData[\"keyword\"].fillna(\"\").values).tolist() # Unique keywords of train-set\ntestKeyword = pd.unique(testData[\"keyword\"].fillna(\"\").values).tolist() # Unique keywords of test-set\nallKeyword = \" \".join(pd.unique(trainKeyword+testKeyword)).lower() \nallKeyword = re.sub(r\"[^a-zA-Z ]+\", \" \", allKeyword).strip().split() # Removing !alpha char\n# Thats all I need\nprint(allKeyword[:10])","49e79df6":"# Cleaning testData and spliting\ntestDataCleanText = testData[\"text\"].apply(lambda x: re.sub(r\"[^a-zA-Z]+\", \" \", x).lower().split())\n# Finding count of keyword common in both list \nintersection = testDataCleanText.apply(lambda x: list(set(x).intersection(allKeyword)))\nprint(intersection[:8])\nprediction = [0 if len(i) <2 else 1 for i in intersection]\nsave(prediction)\n# score .64633 :) above random","1be8e705":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression","724233b2":"# Some preprocessing\nallText = \" \".join(trainData[\"text\"].apply(lambda x: re.sub(r\"[^a-zA-Z]+\", \" \", x).lower()))\nallText += \" \".join(testData[\"text\"].apply(lambda x: re.sub(r\"[^a-zA-Z]+\", \" \", x).lower()))\nallText = allText.split()\n\nprint(\"This will be the size of training vector\", end=\" \")\nprint(len(trainData), len(np.unique(allText)))\n\n# Using CountVectorizer\ncountVector = CountVectorizer().fit(allText)","4bf4ec53":"# Training Vector\nfeatureCol = trainData[\"text\"].apply(lambda x: re.sub(r\"[^a-zA-Z]+\", \" \", x).lower())\ntarget = trainData[\"target\"]\ntrainVector = countVector.transform(featureCol).toarray()","ade88eb4":"# Using Logistic regression\nclf = LogisticRegression().fit(trainVector, target)\nprediction = clf.predict(trainVector)\nprint(\"Training Report:\")\nprint(classification_report(prediction, target))\nprint(\"Confusion Metrix:\")\nprint(confusion_matrix(prediction, target))\n# Results looking good","c03811df":"# Test prediction\ntestFeatureCol = testData[\"text\"].apply(lambda x: re.sub(r\"[^a-zA-Z]+\", \" \", x).lower())\ntestVector = countVector.transform(testFeatureCol)\ntestPrediction = clf.predict(testVector)\nsave(testPrediction)\n# score 0.79865 not bad, expected more with above result","69075297":"Using classification model\n\n\nTrying with CountVectorizer","7600e3ff":" A random prediction\n","f39e08f3":"Using keyword feature \n","cd7de9ea":"Rule based modeling"}}