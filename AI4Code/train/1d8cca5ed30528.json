{"cell_type":{"1e034c85":"code","535b8871":"markdown","0eaaa6c3":"markdown"},"source":{"1e034c85":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf,plot_pacf\n\n\nbeer_data=pd.read_csv(\"..\/input\/time-series-datasets\/monthly-beer-production-in-austr.csv\")\nbeer_data\nfig,ax=plt.subplots()\nax.plot(beer_data[\"Month\"][0:20],beer_data[\"Monthly beer production\"][0:20])\nax.set_xticklabels(beer_data[\"Month\"],rotation=90)\nplt.title(\" First 20 record plots of Monthly Beer Production\")\nplt.show()\n#print(type(beer_data))\n#print(beer_data.info())\nbeer_data[\"Month\"]=pd.to_datetime(beer_data[\"Month\"]).dt.date\n\nbeer_data.set_index(\"Month\")\nbeer_data1 = beer_data\n\n\n#Plotting a 3 day moving average\n\nrolling= beer_data1[\"Monthly beer production\"].rolling(window=3)\nrolling_mean = rolling.mean()\nprint(rolling_mean.head(10))\n# plot original and transformed dataset\nfig,ax=plt.subplots()\nfig.set_size_inches(14,12, forward=True)\nax.plot(beer_data1[\"Month\"],rolling_mean,color=\"red\")\nax.plot(beer_data1[\"Month\"],beer_data1[\"Monthly beer production\"],color=\"Blue\")\nax.set_xticklabels(beer_data[\"Month\"],rotation=90)\nplt.title(\" 3 day moving average for Monthly Berr Production\")\nplt.show()\n\n\n\n#Using beer_data to check for stationarity usinf adfuller test\ntest_result=adfuller(beer_data[\"Monthly beer production\"])\nprint(\" Printing AD-Fuller Test results for Monthly Berr Production: \\n\")\nfor name,rez in zip([\"ADF Test Stat\",\"p-value\",\"#Lags used\",\"# of obs. used\"],test_result):\n    print(name,\" :\" +str(rez))\n    \n#Since p-value is greater than 0.05, we accept the null hypothesis that the TS is non-stationary\n\n#Making non stationary into stationary:\n#Differencing:\n\nbeer_data[\"First diff\"]=beer_data[\"Monthly beer production\"]-beer_data[\"Monthly beer production\"].shift(12)\nprint(\" Beer Data after First Difference: \\n\")\nprint(beer_data.head(15))\n\n#Adfuller retest\ntest_result1=adfuller(beer_data[\"First diff\"].dropna())\nprint(\"\\n\\n\")\nfor name,rez in zip([\"ADF Test Stat\",\"p-value\",\"#Lags used\",\"# of obs. used\"],test_result1):\n    print(name,\" :\" +str(rez))\n\n#P value<0.05 hence Ho rejected. TS is NOW stationary\n#Plotting autocorrelation \n\n\n\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.subplot(211)\nplot_acf(beer_data[\"First diff\"].iloc[12:], ax=plt.gca())\nplt.subplot(212)\nplot_pacf(beer_data[\"First diff\"].iloc[12:], ax=plt.gca())\nplt.show()\n\n##p=1,d=1,q=1\n\n##ARIMA model\nfrom statsmodels.tsa.arima_model import ARIMA\n\nmodel=ARIMA(beer_data[\"Monthly beer production\"].iloc[12:],order=(1,1,1))\nmodel_fit=model.fit()\nmodel_fit.summary()\nfig,ax=plt.subplots()\nfig.set_size_inches(14,12, forward=True)\n##\nax.plot(beer_data[\"Month\"][12:],beer_data[\"First diff\"][12:],color=\"blue\")\nax.plot(beer_data[\"Month\"][13:],model_fit.fittedvalues, color= 'red')\nax.set_xticklabels(beer_data[\"Month\"],rotation=90)\nplt.title(\" Predicted VS Actual Values for ARIMA\")\nplt.show()\n\n\n#Actual prediction:\n'''from pandas.tseries.offsets import DateOffset\nfuture_dates=[beer_data[\"Month\"][-1:0] +DateOffset(months=x) for x in range(0,20)]\nfuture_dates'''\n\n## Appending Dates for predictions first\nbeer_data[\"Month\"].tail()\ndate=pd.date_range(start='09\/01\/1995',periods=15, freq='MS')\n\nbeer_data[\"Month\"].tail()\nprod=np.zeros(15)\ndata=pd.DataFrame({\"Month\":date,\n                   \"Monthly beer production\":prod})\n\nfuture_data=pd.concat([beer_data,data],ignore_index=True)\n\n#print(future_data)\nfuture_data.set_index('Month')\nprint(future_data.head())\n#uture_data[\"Predict\"]=model_fit.predict(start=475,end=490,dynamic=True)\n#uture_data\n#rint(dir(model_fit))\nstart = 2\nend = len(future_data)- 1\nfuture_data[\"Predict\"]=model_fit.predict(start,end,dynamic=True)\nfuture_data\nfuture_data.set_index('Month')\nfig,ax=plt.subplots()\nax.plot(future_data[\"Month\"],future_data[\"Predict\"],color=\"Red\")\nax.plot(future_data[\"Month\"],future_data[\"Monthly beer production\"],color=\"Blue\")\nplt.show()\n\nprint(\"date index\")\nfuture_data.set_index('Month')\nprint(future_data.index)\n\n#SARIMA\n\nimport statsmodels.api as sm\nmodel=sm.tsa.statespace.SARIMAX(beer_data[\"Monthly beer production\"],order=(1,1,1),seasonal_order=(1,1,1,12))\nresults=model.fit()\nbeer_data[\"fore\"]=results.predict(start=350,end=475,dynamic=True)\n#eer_data[[\"Monthly beer production\",\"fore\"]].plot(figsize=(12,8))\nprint(results.summary())\n\nfig,ax=plt.subplots()\nax.plot(beer_data[\"Month\"],beer_data[\"Monthly beer production\"],color=\"blue\",label=\"original\")\nax.plot(beer_data[\"Month\"],beer_data[\"fore\"],color=\"red\",label=\"ori=pred\")\nax.set_xticklabels(beer_data[\"Month\"],rotation=90)\nplt.title(\" Actual VS Predicted plot for SARIMAX\")\nplt.show()\n\n\n#Actual pred\nstart=2\nend = len(future_data)- 1\nfuture_data[\"Predict\"]=results.predict(start=476,end=490,dynamic=True,exog=None)\nfuture_data\nprint(\"prediction\")\nfig,ax=plt.subplots()\nax.plot(future_data[\"Month\"],future_data[\"Predict\"],color=\"Red\")\nax.plot(future_data[\"Month\"][0:476],future_data[\"Monthly beer production\"][0:476],color=\"Blue\")\nax.set_xticklabels(future_data[\"Month\"],rotation=90)\nplt.title(\" Actual AND Predicted plot for SARIMAX\")\nplt.show()\n#print(future_data.index)","535b8871":"**The DataSet consists of Seasonality and Trend.\nThe aim of this experiment was to compare the forecasting abilities of ARIMA and SARIMAX for seasonal and trend exhibiting data.**\n\nTopics Covered:\n* Detrending data\n* Handling Seasonality\n* Computing Autocorrelation and Partial Correlation\n* Deciding the p,d,q values\n* Testing your prediction against actual known outcomes by holding out on some of the test data\n* Finally, forecasting future values\n","0eaaa6c3":"# **Comparison Between ARIMA and SARIMAX on a dataset capturing Monthly Beer Production"}}