{"cell_type":{"0d0fa917":"code","61ef8da1":"code","e66157e8":"code","5317fff4":"code","f95a5c67":"markdown"},"source":{"0d0fa917":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n","61ef8da1":"# load the two reference submissions \n#xf1 = pd.read_csv('..\/input\/hypercolumns-pneumothorax-fastai-0-831-lb\/submission.csv')\nxf2 = pd.read_csv('..\/input\/lungv1\/leaky_unet_submission.csv')\nxf1 = pd.read_csv('..\/input\/unet-with-efficientnet-encoder-in-keras\/orig_submission.csv')\n","e66157e8":"# align indices\nxf1.columns = ['ImageId', 'enc1']\nxf2.columns = ['ImageId', 'enc2']\n\nxf3 = pd.merge(left = xf1, right = xf2, on = 'ImageId', how = 'inner')\nprint(xf1.shape, xf2.shape, xf3.shape)\n\n# identify the positions where xf1 has empty predictions but xf2 does not\nxf3[xf3['enc1'] != xf3['enc2']]\nid1 = np.where(xf3['enc1'] == '-1')[0]\nid2 = np.where(xf3['enc2'] != '-1')[0]\nidx = np.intersect1d(id1,id2)\n\n# map non-empty xf2 slots to empty ones in xf1\nxf3['EncodedPixels'] = xf3['enc1']\nxf3['EncodedPixels'][idx] = xf3['enc2'][idx]","5317fff4":"xf3[['ImageId','EncodedPixels']].to_csv('hybrid_1_2.csv', index = False)","f95a5c67":"This kernel is created to see if other top scores can boost results.\nkernal used\n1. https:\/\/www.kaggle.com\/konradb\/rather-silly-1am-ensemble\n2. https:\/\/www.kaggle.com\/meaninglesslives\/unet-with-efficientnet-encoder-in-keras\n3. https:\/\/www.kaggle.com\/iafoss\/hypercolumns-pneumothorax-fastai-0-831-lb\n\n>  Its rather really silly to emsemble it just gives you nearly mean of two scores rather Increasing it.\n\nI have done ensemble in both possible ways\n1. **Left = xf1 , Right = xf2**   which gives \n![](https:\/\/i.imgur.com\/ICPWjg8.png)\n2.** Left = xf2 , Right= xf1**   which gives \n![](https:\/\/i.imgur.com\/AfIi8hH.png)\n\nNo change using sample submission leak kernal to\nhttps:\/\/www.kaggle.com\/raddar\/sample-submission-leak\n"}}