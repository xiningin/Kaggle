{"cell_type":{"8f511de1":"code","2ead8d3c":"code","d61e345a":"code","ea1b8b70":"code","a9132e63":"code","3864f4b3":"code","c990e027":"code","3f09f8db":"code","69fe5852":"code","0e11cb33":"code","bcb5676b":"code","3d057e65":"code","e531dcd6":"code","cf54277d":"code","c038e6d8":"code","91bc2807":"code","902e8653":"markdown","d871de21":"markdown","1d2be773":"markdown","ce95304c":"markdown"},"source":{"8f511de1":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestClassifier\n","2ead8d3c":"# Download files and put into dataframes\n\ndata = pd.read_csv('\/kaggle\/input\/income-adult\/adult_data.csv')\ndf = pd.DataFrame(data)\n\ndata_test = pd.read_csv('\/kaggle\/input\/income-adult\/adult_test.csv')\ndf_test = pd.DataFrame(data_test)","d61e345a":"df","ea1b8b70":"# Needed to rename the columns so that they didnt have ' ' in front of each column name\n\nold_col_names = df.columns.to_list()\nnew_col_names = [i.strip() for i in old_col_names]\nrenaming = dict(zip(old_col_names, new_col_names))\n\n\ndf = df.rename(columns = renaming )\ndf_test = df_test.rename(columns = renaming)","a9132e63":"df.info()","3864f4b3":"# Categorical data\n\nfor i in new_col_names:\n    if df.dtypes[i]==np.object:\n        y1 = dict(df[ df['salary']==' <=50K'][i].value_counts())\n        y2 = dict(df[ df['salary']==' >50K'][i].value_counts())\n        x = y1.keys() if len(y1.keys()) >= len(y2.keys()) else y2.keys()\n        if len(y1.keys()) != len(y2.keys()):\n            for i in x:\n                if i not in y2.keys():\n                    y2[i] = 0\n                if i not in y1.keys():\n                    y1[i] = 0\n        \n        plt.bar(x, list(y1.values()), color='r', label = 'Lower Salary')\n        plt.bar(x, list(y2.values()), bottom=list(y1.values()), color='b', label = 'Upper Salary')\n        plt.xticks(rotation=90)\n        plt.legend()\n        plt.title(i)\n        plt.show()","c990e027":"# continuous data\nfor i in new_col_names:\n    if df.dtypes[i]!=np.object:\n        plt.hist(df[i],bins=20)\n        plt.title(i)\n        plt.show()","3f09f8db":"df.info()","69fe5852":"# Will now en code the cat data so that I can perform a corrilation heatmap\n# Will store all cat codes into a dict so that they can be used on the test data\n\ncodes = {}\nfor i in new_col_names:\n    curr_codes = dict()\n    if df.dtypes[i]==np.object:\n        curr_codes = dict(enumerate(df[i].astype('category').cat.categories))\n        df[i] = df[i].astype('category').cat.codes\n        curr_codes = dict([(value, key) for key, value in curr_codes.items()])\n        codes[i] = curr_codes","0e11cb33":"sns.heatmap(df.corr())","bcb5676b":"y = df.salary\nX = df.drop(columns=['salary'])\n\nclf = RandomForestClassifier(max_depth=2, random_state=0)\nclf.fit(X,y)","3d057e65":"# All of the test data salarys had a '.' on the end, so had to remove\n\ndf_test.salary = [i[:-1] for i in df_test.salary]","e531dcd6":"# en coded the data so that it is the same as the training data\nfor i in new_col_names:\n    if df_test.dtypes[i]==np.object:\n        df_test[i] = df_test[i].map(codes[i])","cf54277d":"# Find predictions\ny_test = df_test.salary\nX_test = df_test.drop(columns=['salary'])\n\npred = clf.predict(X_test)","c038e6d8":"# find the score\nclf.score(X_test,y_test)","91bc2807":"fig, ax = plt.subplots(1,2, figsize=(10,5))\nax[0].hist(pred);\nax[0].set_title('Predictions')\nax[1].hist(y_test);\nax[1].set_title('Test values')","902e8653":"## Basic graphing of the data\n\nIn this section I will graph the categorical and continuous data so that it is easier to visualise","d871de21":"# Income Analysis\n\nIn this project I will perform a basic analysis of the incomes based off the input data","1d2be773":"## Model\n\nFor now I will build a Random Forest model and test withe the test data provided","ce95304c":"While this model gives a fairly high score, it can easly be seen that this is a product of the higher proportion of lower salarys to higher salarys.\n\nI hope to improve this score with new models and perhaps adjusting the training preporsions between lower and upper salarys"}}