{"cell_type":{"58141ea5":"code","236e928e":"code","cc97b13d":"code","f80251cd":"code","781c4c38":"code","08802a88":"code","78cbcbb4":"code","2a588eda":"code","1796826e":"code","bbae35be":"code","540ee7c7":"code","ce07fe1b":"code","8a9f741d":"code","8cea2adb":"code","de045c49":"code","a03490c4":"code","fc2dcb7c":"code","85c52ec9":"code","301c96bf":"code","3dc80fa2":"code","c7532eab":"code","4a1c1bd6":"code","dbc0fc51":"code","e7ecb47f":"code","cd2c927b":"code","99e967bf":"code","9de18966":"markdown","bb044165":"markdown"},"source":{"58141ea5":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","236e928e":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","cc97b13d":"from sklearn.utils import compute_class_weight\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import plot_precision_recall_curve\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score","f80251cd":"data = pd.read_csv(\"..\/input\/glass\/glass.csv\")","781c4c38":"data.head()","08802a88":"features = data.iloc[:,np.r_[0:9]]\nlabels = data.iloc[:,9]","78cbcbb4":"features.head()","2a588eda":"labels.unique()","1796826e":"data.Type.value_counts()","bbae35be":"data['Type'].unique()","540ee7c7":"X_train, X_test, y_train, y_test = train_test_split(features, labels, random_state=20, test_size=0.3)","ce07fe1b":"class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(data['Type']), y=data['Type'])\nclass_weights_dict = dict(enumerate(class_weights))\nclass_weights_dict","8a9f741d":"old_keys = [0,1,2,3,4,5]\nnew_keys = [1,2,3,5,6,7]\nweights_final = dict(zip(new_keys, list(class_weights_dict.values()))) \n#class_weights_dict[new_keys] = class_weights_dict.pop(old_keys)\n#class_weights_dict.keys()\nweights_final","8cea2adb":"rf_classifier = RandomForestClassifier()\n\nparam_grid = [\n    {'n_estimators': [10, 20, 30, 50, 70, 80, 100, 120, 150, 180, 200, 220, 280, 320], \n     'max_features': ['auto','sqrt','log2'], \n      'oob_score':[True, False], 'bootstrap':[True, False], \n     'class_weight':[None, 'balanced'], 'criterion':['gini', 'entropy']}\n] # a list of dictionaries\n\ngrid_search = GridSearchCV(rf_classifier, param_grid, cv=5, return_train_score=True, n_jobs=-1)\ngrid_search.fit(X_train, y_train)","de045c49":"grid_search.best_params_","a03490c4":"grid_search.best_score_","fc2dcb7c":"best_param_classifier_1 = RandomForestClassifier(bootstrap=False, n_estimators=150, max_features='log2', \n                                               oob_score=False, class_weight= 'balanced',\n                                                criterion='entropy')\nbest_param_classifier_1.fit(X_train, y_train)","85c52ec9":"rf_prediction_test = best_param_classifier_1.predict(X_test)\naccuracy_score(y_test, rf_prediction_test)","301c96bf":"rf_prediction_train = best_param_classifier_1.predict(X_train)\naccuracy_score(y_train, rf_prediction_train)","3dc80fa2":"precision_score(y_test, rf_prediction_test, average=None)","c7532eab":"recall_score(y_test, rf_prediction_test, average=None)","4a1c1bd6":"f1_score(y_test, rf_prediction_test, average=None) # indicates how well the model performs on minority class","dbc0fc51":"plot_confusion_matrix(best_param_classifier_1, X_test, y_test)","e7ecb47f":"plot_confusion_matrix(best_param_classifier_1, X_train, y_train)","cd2c927b":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, rf_prediction_test))","99e967bf":"best_param_classifier_1.feature_importances_","9de18966":"____","bb044165":"_____"}}