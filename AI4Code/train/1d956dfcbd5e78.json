{"cell_type":{"bc9fcd34":"code","48f7690e":"code","642cdc09":"code","caea3fee":"code","b13dca4d":"code","da2389c4":"code","d1fd391f":"code","9224f095":"code","5e26ea23":"code","3eb8f7a7":"code","4d875097":"code","400112e6":"code","6174e9da":"code","dea1509f":"code","462bdbf3":"code","ede34bbf":"code","4e852545":"code","8a4edd7d":"code","20ab0b4c":"code","c7923eb5":"code","63715b54":"code","7d1eb0bb":"code","9603fb1a":"code","36972c8b":"code","ef15aace":"code","2cbeb684":"code","658a15d4":"code","e12770fd":"code","90f2eb7d":"code","c4e9beaa":"code","3c080751":"markdown","ef1e6509":"markdown","31407125":"markdown","491a7b7b":"markdown"},"source":{"bc9fcd34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48f7690e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nparams={'figure.figsize': [8,6], \n        'figure.dpi' : 150,\n        'axes.labelsize': 'large'\n        }\nplt.rcParams.update(params)\n\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nsns.set(style='whitegrid', palette='dark')","642cdc09":"data=pd.read_csv('..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')\ndata.head()","caea3fee":"# checking for null values\ndata.isnull().sum()","b13dca4d":"data.describe()","da2389c4":"# Let's remove CustomerID column\ndata.drop('CustomerID', axis=1, inplace=True)","d1fd391f":"data.head()","9224f095":"plt.figure(figsize=(18,8))\nplt.subplot(1,2,1)\nsns.distplot(data['Age'], color='green')\n\nplt.subplot(1,2,2)\nsns.distplot(data['Annual Income (k$)'], color='orange')\nplt.tight_layout()","5e26ea23":"sns.pairplot(data)","3eb8f7a7":"sns.catplot('Gender',data=data, kind='count')","4d875097":"sns.catplot('Gender', 'Spending Score (1-100)', data=data, kind='violin')","400112e6":"data.head()","6174e9da":"# Let's encode the data\ndata=pd.get_dummies(data, drop_first=True)","dea1509f":"data.head()","462bdbf3":"from sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.decomposition import PCA","ede34bbf":"data_tx=StandardScaler().fit_transform(data)","4e852545":"k_inertia=[]\n\nfor i in range(1, 11):\n    km=KMeans(n_clusters=i, n_init=10, init='k-means++')\n    km.fit(data_tx)\n    k_inertia.append(km.inertia_)\n    ","8a4edd7d":"plt.plot(range(1,11), k_inertia)","20ab0b4c":"# as seen above no. of clusters should be either 4 or 5","c7923eb5":"km=KMeans(n_clusters=5)","63715b54":"km.fit(data_tx)","7d1eb0bb":"cluster_centers=km.cluster_centers_\ncluster_centers","9603fb1a":"clusters=km.predict(data_tx)\nclusters","36972c8b":"pca=PCA(n_components=2)\nreduced_data=pca.fit_transform(data_tx)","ef15aace":"reduced_data","2cbeb684":"reduced_data.shape, data.shape, clusters.shape","658a15d4":"reduced_data=pd.DataFrame(reduced_data, columns=['PC1', 'PC2'])\nreduced_data.head()","e12770fd":"reduced_data['clusters']=clusters\nreduced_data.head()","90f2eb7d":"reduced_data['clusters'].value_counts()","c4e9beaa":"plt.figure(figsize=(6,4))\nsns.scatterplot(reduced_data.loc[reduced_data['clusters']==0, 'PC1'], reduced_data.loc[reduced_data['clusters']==0, 'PC2'],color='pink')\nsns.scatterplot(reduced_data.loc[reduced_data['clusters']==1, 'PC1'], reduced_data.loc[reduced_data['clusters']==1, 'PC2'],color='red')\nsns.scatterplot(reduced_data.loc[reduced_data['clusters']==2, 'PC1'], reduced_data.loc[reduced_data['clusters']==2, 'PC2'],color='orange')\nsns.scatterplot(reduced_data.loc[reduced_data['clusters']==3, 'PC1'], reduced_data.loc[reduced_data['clusters']==3, 'PC2'],color='blue')\nsns.scatterplot(reduced_data.loc[reduced_data['clusters']==4, 'PC1'], reduced_data.loc[reduced_data['clusters']==4, 'PC2'],color='violet')\n\nplt.legend(loc='best', bbox_to_anchor=(1.5, 1.5))\nplt.show()","3c080751":"#### Let's check the distribution of the features","ef1e6509":"Let's plot the data and visualize the number of clusters","31407125":"Let's check best K using elbow method","491a7b7b":"#### Let's reduce the dimensions of the data"}}