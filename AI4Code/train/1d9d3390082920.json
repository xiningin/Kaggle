{"cell_type":{"9748fc82":"code","ece16ab7":"code","991c6ac4":"code","26771e24":"code","9e9ede09":"code","a2a990a6":"code","5656829d":"code","28805645":"code","35b5af06":"code","1396f14b":"code","5edafc15":"code","7e7a0d8e":"code","3766b980":"code","41d7baba":"code","26327e1a":"code","b7e14157":"code","75250277":"code","2505a0eb":"code","b01ad003":"code","d11d299f":"code","cc24a4aa":"code","e3ed2811":"code","e1b665ab":"code","17ce1ad8":"code","4a71829c":"code","39626200":"code","cfc7369f":"markdown","2c2ba27d":"markdown","d6bf3315":"markdown","c656a7a1":"markdown","04b41ea5":"markdown","aa3337d3":"markdown"},"source":{"9748fc82":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport matplotlib.pyplot as plt\nimport seaborn as sns               # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nfrom subprocess import check_output\n\nimport warnings                                            # Ignore warning related to pandas_profiling\nwarnings.filterwarnings('ignore') \n\ndef annot_plot(ax,w,h):                                    # function to add data to plot\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    for p in ax.patches:\n        ax.annotate('{0:.1f}'.format(p.get_height()), (p.get_x()+w, p.get_height()+h))\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ece16ab7":"df = pd.read_csv('..\/input\/train.csv')","991c6ac4":"df.columns","26771e24":"df['target'].count()","9e9ede09":"df[df['target']==1].count()","a2a990a6":"percentage_of_target_0 = ((df[df['target']==0].count())\/df['target'].count())*100\npercentage_of_target_1 = ((df[df['target']==1].count())\/df['target'].count())*100\nprint(percentage_of_target_0['target'],'%')\nprint(percentage_of_target_1['target'],'%')","5656829d":"\nax = sns.countplot('target', data = df)\nannot_plot(ax,0.08,1)","28805645":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\ny = df['target']\nX = df.drop(['id','target'], axis = 1)\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42 )\n\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)\ny_pred = model.predict(X_test)","35b5af06":"print(accuracy_score(y_test,y_pred)*100)","1396f14b":"from sklearn.metrics import confusion_matrix\nprint(confusion_matrix(y_test,y_pred))","5edafc15":"model.fit(X_train[['ps_calc_01']],y_train)\ny_pred = model.predict(X_test[['ps_calc_01']])\n\nprint(accuracy_score(y_test,y_pred)*100)","7e7a0d8e":"# Class count\ncount_class_0, count_class_1 = df.target.value_counts()\n\n# Divide by class\ndf_class_0 = df[df['target'] == 0]\ndf_class_1 = df[df['target'] == 1]","3766b980":"df_class_0_under = df_class_0.sample(count_class_1)\ndf_test_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(df_test_under.target.value_counts())\ndf_test_under.target.value_counts().plot(kind='bar',title = 'count(target)')","41d7baba":"df_class_1_over = df_class_1.sample(count_class_0, replace=True)\ndf_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n\nprint('Random over-sampling:')\nprint(df_test_over.target.value_counts())\n\ndf_test_over.target.value_counts().plot(kind='bar', title='Count (target)');","26327e1a":"import imblearn","b7e14157":"from sklearn.datasets import make_classification\n\nX, y = make_classification(\n    n_classes=2, class_sep=1.5, weights=[0.9, 0.1],\n    n_informative=3, n_redundant=1, flip_y=0,\n    n_features=20, n_clusters_per_class=1,\n    n_samples=100, random_state=10\n)\n\ndf = pd.DataFrame(X)\ndf['target'] = y\ndf.target.value_counts().plot(kind='bar', title='Count (target)');","75250277":"def plot_2d_space(X, y, label='Classes'):   \n    colors = ['#1F77B4', '#FF7F0E']\n    markers = ['o', 's']\n    for l, c, m in zip(np.unique(y), colors, markers):\n        plt.scatter(\n            X[y==l, 0],\n            X[y==l, 1],\n            c=c, label=l, marker=m\n        )\n    plt.title(label)\n    plt.legend(loc='upper right')\n    plt.show()","2505a0eb":"from sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\nX = pca.fit_transform(X)\n\nplot_2d_space(X, y, 'Imbalanced dataset (2 PCA components)')","b01ad003":"from imblearn.under_sampling import RandomUnderSampler\n\nrus = RandomUnderSampler(return_indices=True)\nX_rus, y_rus, id_rus = rus.fit_sample(X, y)\n\nprint('Removed indexes:', id_rus)\n\nplot_2d_space(X_rus, y_rus, 'Random under-sampling')","d11d299f":"from imblearn.over_sampling import RandomOverSampler\n\nros = RandomOverSampler()\nX_ros, y_ros = ros.fit_sample(X, y)\n\nprint(X_ros.shape[0] - X.shape[0], 'new random picked points')\n\nplot_2d_space(X_ros, y_ros, 'Random over-sampling')","cc24a4aa":"from imblearn.under_sampling import TomekLinks\n\ntl = TomekLinks(return_indices=True, ratio='majority')\nX_tl, y_tl, id_tl = tl.fit_sample(X, y)\n\nprint('Removed indexes:', id_tl)\n\nplot_2d_space(X_tl, y_tl, 'Tomek links under-sampling')","e3ed2811":"from imblearn.under_sampling import ClusterCentroids\n\ncc = ClusterCentroids(ratio={0: 10})\nX_cc, y_cc = cc.fit_sample(X, y)\n\nplot_2d_space(X_cc, y_cc, 'Cluster Centroids under-sampling')","e1b665ab":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(ratio='minority')\nX_sm, y_sm = smote.fit_sample(X, y)\n\nplot_2d_space(X_sm, y_sm, 'SMOTE over-sampling')","17ce1ad8":"len(X_sm), len(y_sm)","4a71829c":"from imblearn.combine import SMOTETomek\n\nsmt = SMOTETomek(ratio='auto')\nX_smt, y_smt = smt.fit_sample(X, y)\n\nplot_2d_space(X_smt, y_smt, 'SMOTE + Tomek links')","39626200":"len(X_smt), len(y_smt)","cfc7369f":"## Random over-sampling","2c2ba27d":"## Over-sampling: SMOTE\nSMOTE (Synthetic Minority Oversampling TEchnique) consists of synthesizing elements for the minority class, based on those that already exist. It works randomly picingk a point from the minority class and computing the k-nearest neighbors for this point. The synthetic points are added between the chosen point and its neighbors.","d6bf3315":"## Random under-sampling:","c656a7a1":"## Random under-sampling and over-sampling with imbalanced-learn","04b41ea5":"## Python imbalanced-learn module\nA number of more sophisticated resapling techniques have been proposed in the scientific literature.\n\nFor example, we can cluster the records of the majority class, and do the under-sampling by removing records from each cluster, thus seeking to preserve information. In over-sampling, instead of creating exact copies of the minority class records, we can introduce small variations into those copies, creating more diverse synthetic samples.\n\nLet's apply some of these resampling techniques, using the Python library imbalanced-learn. It is compatible with scikit-learn and is part of scikit-learn-contrib projects.","aa3337d3":"## Over-sampling followed by under-sampling"}}