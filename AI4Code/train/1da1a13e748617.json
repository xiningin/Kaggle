{"cell_type":{"276bd482":"code","acfe2b6c":"code","24611a53":"code","43d8bbe9":"code","0083dc48":"code","02ecd79c":"code","7f75edd8":"code","a721882f":"code","6a0cefdd":"code","a3a359bb":"code","09341aad":"code","a2167965":"code","73744029":"code","fac84a3a":"code","40ca4bc0":"code","21c53018":"code","d7f95799":"code","da5e3a87":"code","a8be6b14":"code","d5bd1bf4":"code","3bd6fe2a":"code","5f5643ae":"code","5aecc6aa":"code","6303c8f9":"code","c5870b7b":"code","118b91f6":"code","43c695db":"code","29dc3759":"code","b73ab7ce":"markdown","47baa01d":"markdown"},"source":{"276bd482":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acfe2b6c":"import lightgbm as lgb\nimport optuna.integration.lightgbm as oplgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport category_encoders as ce\nimport seaborn as sns","24611a53":"df_train = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/train.csv\")\ndf_test = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/test.csv\")\ndf_sample = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-feb-2021\/sample_submission.csv\")","43d8bbe9":"df_train","0083dc48":"df_test","02ecd79c":"train_id = df_train[\"id\"]\ntest_id = df_test[\"id\"]\n\ndf_train.drop(\"id\", axis=1, inplace=True)\ndf_test.drop(\"id\", axis=1, inplace=True)","7f75edd8":"cat_features = [f\"cat{i}\" for i in range(9 + 1)]","a721882f":"ordinal_encoder = ce.ordinal.OrdinalEncoder()\nordinal_encoder.fit(pd.concat([df_train[cat_features], df_test[cat_features]], axis=0))\ntrain_or = ordinal_encoder.transform(df_train[cat_features])\ntest_or = ordinal_encoder.transform(df_test[cat_features])\ntrain_or.columns = [f\"OR_{col}\" for col in train_or]\ntest_or.columns = [f\"OR_{col}\" for col in test_or]","6a0cefdd":"numerical_features = [f\"cont{i}\" for i in range(13 + 1)]","a3a359bb":"train_x = pd.concat([\n    df_train[numerical_features],\n    train_or\n], axis=1)","09341aad":"test_x = pd.concat([\n    df_test[numerical_features],\n    test_or\n], axis=1)","a2167965":"train_y = df_train[\"target\"]","73744029":"train_x","fac84a3a":"test_x","40ca4bc0":"oplgb_train_data = oplgb.Dataset(train_x, train_y)","21c53018":"oplgb_params = {\n    \"objective\": \"regression\",\n    \"metric\": \"root_mean_squared_error\",\n    \"verbosity\": -1,\n    \"learning_rate\": 0.01\n}","d7f95799":"folds = KFold(n_splits=5, shuffle=True, random_state=2021)","da5e3a87":"tuner_cv = oplgb.LightGBMTunerCV(oplgb_params, oplgb_train_data, num_boost_round=1000, early_stopping_rounds=100, folds=folds, verbose_eval=100, time_budget=21600)\ntuner_cv.run()","a8be6b14":"tuner_cv.best_params","d5bd1bf4":"class FoldsAverageLGBM:\n    def __init__(self, folds):\n        self.folds = folds\n        self.models = []\n        \n    def fit(self, lgb_params, train_x, train_y):\n        oof_preds = np.zeros_like(train_y)\n        \n        self.train_x = train_x\n        self.train_y = train_y.values\n        \n        for tr_idx, va_idx in tqdm(folds.split(train_x)):\n            tr_x, va_x = self.train_x.iloc[tr_idx], self.train_x.iloc[va_idx]\n            tr_y, va_y = self.train_y[tr_idx], self.train_y[va_idx]\n            \n            lgb_train_dataset = lgb.Dataset(tr_x, tr_y)\n            lgb_valid_dataset = lgb.Dataset(va_x, va_y)\n            model = lgb.train(lgb_params, lgb_train_dataset, valid_sets=[lgb_valid_dataset], verbose_eval=100)\n            self.models.append(model)\n            \n            oof_pred = model.predict(va_x)\n            oof_preds[va_idx] = oof_pred\n            \n        self.oof_preds = oof_preds\n        \n    def predict(self, test_x):\n        preds = []\n        for model in tqdm(self.models):\n            pred = model.predict(test_x)\n            preds.append(pred)\n        preds = np.mean(preds, axis=0)\n        return preds\n    \n    def get_feature_importance(self, importance_type=\"gain\"):\n        feature_names = self.models[0].feature_name()\n        feature_importances_list = [model.feature_importance(importance_type) for model in self.models]\n        \n        out_df = pd.DataFrame()\n        for i, name in enumerate(feature_names):\n            out_df[name] = [v[i] for v in feature_importances_list]\n        return out_df","3bd6fe2a":"def plot_importance(importance_df, max_features=100):\n    feature_order = list(importance_df.mean().sort_values(ascending=False).index[:max_features])\n    target_data = importance_df[feature_order]\n    sns.boxenplot(data=target_data, orient=\"h\", order=feature_order)","5f5643ae":"lgb_params = dict(tuner_cv.best_params)\nlgb_params[\"learning_rate\"] = 0.005\nlgb_params[\"early_stopping_round\"] = 200\nlgb_params[\"num_iterations\"] = 20000","5aecc6aa":"folds_average_lgbm = FoldsAverageLGBM(folds)","6303c8f9":"folds_average_lgbm.fit(lgb_params, train_x, train_y)","c5870b7b":"plt.figure(figsize=(20, 20))\nimportance_df = folds_average_lgbm.get_feature_importance()\nplot_importance(importance_df)","118b91f6":"np.sqrt(mean_squared_error(df_train.target, folds_average_lgbm.oof_preds))","43c695db":"y_pred = folds_average_lgbm.predict(test_x)","29dc3759":"sub = df_sample.copy()\nsub[\"target\"] = y_pred\n\nsub.to_csv(\"submission_optuna_lgbm_or_v1.csv\", index=False)\n\nsub.head()","b73ab7ce":"# OrdinalEncoder","47baa01d":"# Optuna"}}