{"cell_type":{"ed02c57a":"code","d5e47a50":"code","80c16b81":"code","f4e99ba5":"code","0ef011dd":"code","8cc3ab51":"code","745aba5c":"code","5dc85b8d":"code","531eed3e":"code","d0453b7e":"code","949d408b":"code","8bc348b1":"code","8a161dec":"code","3d998846":"markdown"},"source":{"ed02c57a":"import numpy as np \nimport pandas as pd \ndf=pd.read_csv('..\/input\/train.csv')\ndf.head()","d5e47a50":"df.isnull().values.any()\ndf.isnull().sum()\n#=df.drop(['PoolQC','Fence','MiscFeature','Alley','Street'], axis=1)","80c16b81":"df=df[[\"Id\",\"MSSubClass\",\"LotFrontage\",\"LotArea\",\"HouseStyle\",\"OverallQual\",\"Foundation\",\"RoofStyle\",\"OverallCond\",\n\"BldgType\",\"Neighborhood\",\"TotalBsmtSF\",\"1stFlrSF\",\"2ndFlrSF\",\"Heating\",\"CentralAir\",\"YearBuilt\",\"MasVnrArea\",\n\"GrLivArea\",\"BedroomAbvGr\",\"KitchenAbvGr\",\"TotRmsAbvGrd\",\"Fireplaces\",\"Electrical\",\"GarageArea\",\"GarageYrBlt\",\n\"GarageCars\",\"PoolArea\",\"YrSold\",\"WoodDeckSF\",\"OpenPorchSF\",\"3SsnPorch\",\"MiscVal\",\"MoSold\",\"BsmtFullBath\",\n\"BsmtHalfBath\",\"SaleCondition\",\"SalePrice\"]]","f4e99ba5":"import random\ndf=df.fillna({'LotFrontage' :50})\ndf=df.fillna({'GarageYrBlt' :random.randint(1879,2010)})\ndf=df.fillna({'Electrical' :'SBrkr'})\ndf=df.fillna({'MasVnrArea' :0})\ndf.isnull().sum()\ndf.isnull().values.any()","0ef011dd":"X=df.loc[:,['MSSubClass','LotArea','TotalBsmtSF','1stFlrSF','2ndFlrSF','OverallQual','OverallCond','CentralAir','Heating','RoofStyle','Foundation',\n'YearBuilt','MasVnrArea','GrLivArea','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd','Fireplaces','WoodDeckSF','OpenPorchSF',\n'3SsnPorch','GarageArea','MiscVal','MoSold','BsmtFullBath','BsmtHalfBath','PoolArea','YrSold']]\nX = pd.get_dummies(X, columns=['CentralAir','Heating','RoofStyle','Foundation'])\nX.head()\nY=df.loc[:,'SalePrice']","8cc3ab51":"import numpy as np\nfeature_list=list(X.columns)\nX=np.array(X)\ny=np.array(Y)","745aba5c":"from sklearn.ensemble import RandomForestRegressor\nnum_training = int(0.8 * len(X))\nX_train, y_train = X[:num_training], y[:num_training]\nX_test, y_test = X[num_training:], y[num_training:]","5dc85b8d":"RF_regressor = RandomForestRegressor(max_depth=30, random_state=7,n_estimators=1000)\nRF_regressor.fit(X_train, y_train)","531eed3e":"# extracting feature importances\nimportances=list(RF_regressor.feature_importances_)\nfeature_importances=[(feature,round(importance,2)) for feature, importance in zip(feature_list, importances)]\n# SORTED the feature_imprtances \nfeature_importances = sorted(feature_importances, key = lambda x: x[1], reverse = True)\nfor feature, importance in feature_importances:\n    print('Variable:', feature, end='')\n    print(' importance:', importance)","d0453b7e":"# extract the names of the most important features\nimportant_feature_names=[feature[0] for feature in feature_importances[:16]] # 16: all these important features have been selected\n#Select the important indices \nimportant_indices=[feature_list.index(feature) for feature in important_feature_names]","949d408b":"#Re-training using our new features\nnum_training = int(0.8 * len(X))\nX_train_important, y_train_important = X[:num_training, important_indices], y[:num_training]\nX_test_important, y_test_important = X[num_training:, important_indices], y[num_training:]","8bc348b1":"RF_regressor = RandomForestRegressor(max_depth=100, random_state=7,n_estimators=700)\nRF_regressor.fit(X_train_important, y_train_important)\ny_test_pred = RF_regressor.predict(X_test_important)","8a161dec":"# Evaluate the model using RMSLE\nfrom sklearn.metrics import mean_squared_log_error\nprint(\"Root Mean Squared Logarithmic Score:\", np.sqrt(mean_squared_log_error( y_test_important, y_test_pred)))","3d998846":"According to this training model, i'm going to extract the important features to be performed in the next model. By the way,i used feature_importances_ to detect all these features."}}