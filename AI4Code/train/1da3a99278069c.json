{"cell_type":{"778c14a9":"code","b5d44bd2":"code","86ca753b":"code","1151300c":"code","0702f17f":"code","06693804":"code","3ffd113d":"code","a0845e05":"code","c98ccefe":"code","56df1549":"code","e73c5843":"code","f8b6eee1":"code","ff42f995":"code","4cb0d8cf":"code","86655997":"code","759827dd":"code","8b91532d":"code","d830542c":"code","0457e0e0":"code","383a718f":"markdown","7b186541":"markdown","3df041c2":"markdown","2da3beaf":"markdown","8b753aac":"markdown","1ffb5c4c":"markdown","7f794d05":"markdown","4500e5ec":"markdown","b48c9a26":"markdown","ac3eb99a":"markdown"},"source":{"778c14a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5d44bd2":"products = pd.read_csv('\/kaggle\/input\/flipkart-products\/flipkart_com-ecommerce_sample.csv')","86ca753b":"products.head()","1151300c":"len(products['product_name'])","0702f17f":"len(products['product_name'].unique()),len(products['uniq_id'].unique())","06693804":"products.shape","3ffd113d":"products.info()","a0845e05":"products.isna().sum()","c98ccefe":"products['description'][0]","56df1549":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfv = TfidfVectorizer(max_features=None,\n                     strip_accents='unicode',\n                     analyzer='word',\n                     min_df=10,\n                     token_pattern=r'\\w{1,}',\n                     ngram_range=(1,3),#take the combination of 1-3 different kind of words\n                     stop_words='english')#removes all the unnecessary characters like the,in etc.\nproducts['description'] = products['description'].fillna('')","e73c5843":"#fitting the description column.\ntfv_matrix = tfv.fit_transform(products['description'])#converting everythinng to sparse matrix.","f8b6eee1":"tfv_matrix","ff42f995":"tfv_matrix.shape","4cb0d8cf":"from sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix,tfv_matrix)#how description of first product is related to first product and so on.","86655997":"sig[0]","759827dd":"indices = pd.Series(products.index,index=products['product_name']).drop_duplicates()","8b91532d":"indices.head(20)","d830542c":"def product_recommendation(title,sig=sig):\n    indx = indices[title]\n    \n    #getting pairwise similarity scores\n    sig_scores = list(enumerate(sig[indx]))\n    \n    #sorting products\n    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)\n    \n    #10 most similar products score\n    sig_scores = sig_scores[1:11]\n    \n    #product indexes\n    product_indices = [i[0] for i in sig_scores]\n    \n    #Top 10 most similar products\n    return products['product_name'].iloc[product_indices]","0457e0e0":"n=input(\"Enter the name of the product: \")\nprint(\"\\nTop Recommended products are: \\n\")\nprint(product_recommendation(n).unique())\n","383a718f":"Total number of products that we have in our dataset is exactly 2000. So it is not easy for use to know every individual products looking directly to them.","7b186541":"Checking at our dataset some of the columns are null. Since we are only dealing with columns `product_name` and `description` we no need to play with the rest of the colums. so they can be dropped from our data set.","3df041c2":"Here we can clearly see that most of the values are in the object form.","2da3beaf":"\n## Recommendation Systems\n\nAccording to the wikipedia definition recommendation system is a subclass of information filtering system that seeks to predict the \"rating\" or \"preference\" a user would give to an item.\n\n\n\n\n\n## Content Based Recommendation System.\n\n\n\n----\n\n<img src=\"https:\/\/www.analyticsvidhya.com\/wp-content\/uploads\/2015\/08\/3.jpg\">\n\n----\n\nIn this notebook I have used the Flipkart sales dataset. The main goal of the notebook is to design the recommendation system based on the description of the products.\n","8b753aac":"This is just a simple recommendation system developed using the flipkart dataset.","1ffb5c4c":"Here we have 2000 rows and 15 columns. The next step is to look at the state of our data column.","7f794d05":"Looking at the above outcome, we can clearly see that our all values are converted into the spase matrix.","4500e5ec":"This is the description of the very first product in our dataset.","b48c9a26":"Looking at the first five rows of the data set we can find our data set is too lengthy.","ac3eb99a":"Products are repeated in our dataset. By using the above line of code we can see that our data set have  12676 unique products and 20000 unique id's."}}