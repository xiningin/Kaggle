{"cell_type":{"d9308ac3":"code","4989f5c3":"code","d0111742":"code","f85f896b":"code","57cfb2bf":"code","b233589b":"code","0a9edcd4":"code","5b3daf07":"code","1934a41e":"code","3743753e":"code","b4c8b3f2":"code","36143f3b":"code","d198e952":"code","10b44479":"code","e7a10716":"code","11329e6e":"code","52b5e8f5":"code","1ebbab97":"code","427ede3b":"code","8adb5a72":"markdown","08c3684e":"markdown","918a9515":"markdown","b26eb0a5":"markdown"},"source":{"d9308ac3":"import matplotlib.pyplot as plt \nfrom PIL import Image \nimport seaborn as sns\nimport pandas as pd \nimport numpy as np \nimport os\n\n# Get the categories for each label\n\ndata_path = \"..\/input\/sample-fruit-set\/sample_training\/sample_training\"\nCATEGORIES = []\n\nfor filename in os.listdir(data_path):\n    CATEGORIES.append(filename)\nprint(CATEGORIES)       \n","4989f5c3":"#Number of different fruits\nlen(CATEGORIES)","d0111742":"# Loading Training data\nfrom keras.preprocessing import image\n\ntraining_data=[]\nn_categories=[]\n\ndef create_training_data():\n    for category in CATEGORIES:\n        folder_path = os.path.join(data_path, category).replace(\"\\\\\",\"\/\")\n        class_num = CATEGORIES.index(category)\n        counter = 0\n        for i in os.listdir(folder_path):\n            try:\n                img_path = os.path.join(folder_path, i).replace(\"\\\\\",\"\/\")\n                img = image.load_img(img_path, target_size=(224, 224))\n                img = image.img_to_array(img)\n                training_data.append([img, class_num])\n                counter += 1\n            except Exception as e:\n                pass\n        n_categories.append(counter)\ncreate_training_data()","f85f896b":"%matplotlib inline \nplt.figure(figsize=(10,10))\nplt.bar(CATEGORIES, n_categories)\nplt.xticks(CATEGORIES, rotation=30)","57cfb2bf":"print(n_categories)","b233589b":"sum(n_categories)","0a9edcd4":"end_tail=0\nfor i in range(12,3,-1):\n   end_tail+= n_categories[i]\n\nfront_slice=490\nfor i in range(3):\n    front_slice+=n_categories[i]\n\ntraining_front_slice = training_data[:front_slice]\ntraining_end_slice =  training_data[-end_tail:]\n\ntraining_data = training_front_slice + training_end_slice","5b3daf07":"len(training_data)","1934a41e":"from itertools import groupby\n\ncat=[]\nfor i in training_data:\n    cat.append(i[1])    \nn_categories_balance= [len(list(group)) for key, group in groupby(cat)]\n\nplt.figure(figsize=(10,10))\nplt.bar(CATEGORIES, n_categories_balance)\nplt.xticks(CATEGORIES, rotation=30)","3743753e":"# Now that data is balanced, it is time to shuffle training data.\nimport random\nrandom.shuffle(training_data)","b4c8b3f2":"# Preparing training data for CNN\nX_train = []\nY_train = []\nfor img, class_num in training_data:\n    X_train.append(img)\n    Y_train.append(class_num)\n\nX_train = np.array(X_train).reshape(-1, 224, 224, 3)\nY_train = np.array(Y_train)\nX_train.shape","36143f3b":"# Generate Test data\ntesting_data = []\nn_test_categories = []\ntest_path = \"..\/input\/sample-fruit-set\/sample_test\/sample_test\"\ntest_CATEGORIES = []\n\nfor filename in os.listdir(test_path):\n    test_CATEGORIES.append(filename)      \n\ndef create_test_data():\n    for category in test_CATEGORIES:\n        folder_path = os.path.join(test_path, category).replace(\"\\\\\",\"\/\")\n        class_num = test_CATEGORIES.index(category)\n        counter = 0\n        for i in os.listdir(folder_path):\n            try:\n                img_path = os.path.join(folder_path, i).replace(\"\\\\\",\"\/\")\n                img = image.load_img(img_path, target_size=(224, 224))\n                img = image.img_to_array(img)\n                testing_data.append([img, class_num])\n                counter += 1\n            except Exception as e:\n                pass\n        n_test_categories.append(counter)\ncreate_test_data()\n\nplt.figure(figsize=(10,10))\nplt.bar(test_CATEGORIES, n_test_categories)\nplt.xticks(test_CATEGORIES, rotation=30)","d198e952":"# Prepare test data\nrandom.shuffle(testing_data)\nX_test = []\nY_test = []\nfor img, class_num in testing_data:\n    X_test.append(img)\n    Y_test.append(class_num)\n\nX_test = np.array(X_test).reshape(-1, 224, 224, 3)\nX_test.shape","10b44479":"len(n_test_categories)","e7a10716":"from keras import utils\nY_train = utils.to_categorical(Y_train, num_classes=len(n_categories))\nY_test = utils.to_categorical(Y_test, num_classes=len(n_test_categories))","11329e6e":"# Normalization of data for CNN\nX_train_ = X_train\/255\nX_test_ = X_test\/255","52b5e8f5":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.optimizers import SGD, Adam\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\n\ndef baseline_model():\n    model=Sequential()\n    model.add(Conv2D(filters=8, kernel_size=(3,3), padding=\"same\", activation=\"relu\" , input_shape=(224,224,3)))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(filters=16, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n    #model.add(Conv2D(filters=64, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.25))\n\n    model.add(Conv2D(filters=32, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n    #model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n    #model.add(Conv2D(filters=128, kernel_size=(3,3), padding=\"same\", activation=\"relu\"))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    \n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(13, activation='softmax'))\n\n    sgd = SGD(lr=0.01)\n    adam = Adam(lr=0.01, beta_1=0.9, beta_2=0.999)\n\n    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n    return model\n\n\nmodel = baseline_model()\nes = EarlyStopping(monitor='val_acc', mode='max', min_delta=0.01)\nmc = ModelCheckpoint(\"best_fruit_classifier.h5\", monitor=\"val_acc\", mode=\"max\", save_best_only=True)\nhistory = model.fit(X_train_, Y_train, validation_data=(X_test_, Y_test),  batch_size=10, epochs=150, callbacks=[es, mc])\n\n# summarize history for accuracy\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","1ebbab97":"from keras.models import load_model\nfruitmodel = load_model(\"best_fruit_classifier.h5\")\nfruitmodel.summary()","427ede3b":"from PIL import Image\nimport seaborn as sns\n\n#Create a new sample data\nsample_data = testing_data\nrandom.shuffle(sample_data)\nsample_data = sample_data[0:4]\n\nX_sample = []\nY_sample = []\n\nfor img, class_num in sample_data:\n    X_sample.append(img)\n    Y_sample.append(class_num)\n\n# Prepare sample data for prediction\nX_sample_array = np.array(X_sample).reshape(-1, 224, 224, 3)\nX_sample_array_ = X_sample_array\/255 \n\n#Plot images of sample data\nf, ax = plt.subplots(1, 4)\nf.set_size_inches(20,20)\nfor i in range(4):\n    img = Image.fromarray(X_sample_array[i].astype('uint8'))\n    ax[i].imshow(img)\n    ax[i].set_title(CATEGORIES[Y_sample[i]])\nplt.show()\n\n# Plot the predictions made for the sample data\nf, axes = plt.subplots(1, 4)\nf.set_size_inches(80,20)\npreds  = fruitmodel.predict(X_sample_array_)\nfor i in range(len(preds)):    \n    arr= np.array(preds[i])\n    arr = arr.argsort()[-3:][::-1]\n    xplot = [preds[i][c] for c in arr]\n    yplot = [CATEGORIES[c] for c in arr]\n    b = sns.barplot(y=yplot, x=xplot, color=\"gray\", ax=axes[i])\n    b.tick_params(labelsize=55)\n    f.tight_layout()","8adb5a72":"The sample data shows a good prediction, with an overall 94.45% of val_acc during the training phase.\n\nThanks for reading this Kernel!","08c3684e":"Now that the CNN is trained it's time to explore some predictions","918a9515":"This objective of this kernel is to use Convolutional neural network to classify the fruits. \n\nThe data used in this Kernel is a sample of 13 categories from the Fruit 360 data.","b26eb0a5":"So the training data has an imbalance for the Tomato 1 category. Since is only for one category I will simply remove some instances in order to have all classes balanced."}}