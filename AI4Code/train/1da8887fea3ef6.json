{"cell_type":{"41b9ce90":"code","2fd94ef3":"code","350df934":"code","53391102":"code","807ced47":"code","5b88b113":"markdown"},"source":{"41b9ce90":"import os\nprint(os.listdir(\"..\/input\/sohan-dataset-new\/augmented asl 3\/Augmented ASL 3\"))\n    \n    ","2fd94ef3":"from tensorflow.python.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\n\nimage_size = 64\n\ndata_generator_with_aug = ImageDataGenerator(\n                                    samplewise_center=True, \n                                    samplewise_std_normalization=True,\n                                   width_shift_range = 0.1,\n                                   height_shift_range = 0.1,\n                                   validation_split = 0.1, rotation_range = 10,\n                                   zoom_range = 0.1)\n\n\ntrain_generator = data_generator_with_aug.flow_from_directory(\n        '..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train',\n        target_size=(image_size, image_size),\n        batch_size=64,\n        class_mode='categorical', subset = 'training')\n\nvalidation_generator = data_generator_with_aug.flow_from_directory(\n        '..\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train',\n        target_size=(image_size, image_size),\n        class_mode='categorical', subset = 'validation')\n\n","350df934":"from tensorflow.python.keras.applications import ResNet50\nfrom tensorflow.python.keras.models import Sequential\nfrom tensorflow.python.keras.layers import Dense, Flatten, GlobalAveragePooling2D\n\nnum_classes = 29\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nmy_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\n\n# Say not to train first layer (ResNet) model. It is already trained\nmy_new_model.layers[0].trainable = False\n\nmy_new_model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])","53391102":"my_new_model.fit_generator(\n        train_generator,\n        steps_per_epoch=10,\n        epochs=6,\n        validation_data=validation_generator, validation_steps = 20)","807ced47":"my_new_model.save(\"trial.hdf5\")","5b88b113":"# Fitting a Model With Data Augmentation"}}