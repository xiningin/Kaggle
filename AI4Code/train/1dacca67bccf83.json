{"cell_type":{"b8759009":"code","2b50d9c6":"code","5de27fe0":"code","44ef1063":"code","3be02570":"code","fc7fbde0":"code","51423fec":"code","368d6227":"code","db10ff28":"code","e8b2c333":"code","0865f0f7":"code","d56c022a":"code","8105dd84":"code","0631a8b9":"code","5e8876b6":"code","3dc321dd":"code","262c1eb5":"markdown"},"source":{"b8759009":"import pandas as pd\nimport numpy as np\nfrom lightgbm import LGBMRegressor\nimport gresearch_crypto\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nVALIDATION_CSV = '..\/input\/g-research-crypto-forecasting\/supplemental_train.csv'\nTRAIN_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/train.csv'\nTEST_CSV = '..\/input\/g-research-crypto-forecasting\/example_test.csv'\nASSET_DETAILS_CSV = '\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv'","2b50d9c6":"# data Load\ntrain_df = pd.read_csv(TRAIN_CSV)\ntest_df = pd.read_csv(TEST_CSV)\nval_df = pd.read_csv(VALIDATION_CSV)","5de27fe0":"train_df.head()","44ef1063":"test_df.head()","3be02570":"val_df.head()","fc7fbde0":"## data type  \n# object -> category\ntrain_df = train_df.astype({'Asset_ID': 'category'})\ntest_df = test_df.astype({'Asset_ID': 'category'})\nval_df = val_df.astype({'Asset_ID': 'category'})","51423fec":"train_df.info()","368d6227":"x_train = train_df.drop('Target', axis=1)\ny_train = train_df['Target']","db10ff28":"x_valid = val_df.drop('Target', axis=1)\ny_valid = val_df['Target']","e8b2c333":"lgbm_model = LGBMRegressor(random_state=0)","0865f0f7":"df_asset_details = pd.read_csv(ASSET_DETAILS_CSV).sort_values(\"Asset_ID\")\ndf_asset_details","d56c022a":"def get_features(df):\n    df_feat = df[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    return df_feat","8105dd84":"def get_Xy_and_model_for_asset(train_df, asset_id):\n    df = train_df[train_df[\"Asset_ID\"] == asset_id]\n    \n    # TODO: Try different features here!\n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n    \n    \n    model = LGBMRegressor(random_state=0)\n    model.fit(X, y)\n    return X, y, model","0631a8b9":"Xs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y, model = get_Xy_and_model_for_asset(train_df, asset_id)    \n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model","5e8876b6":"x = get_features(train_df.iloc[1])\ny_pred = models[0].predict([x])\ny_pred[0]","3dc321dd":"env = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j , row in df_test.iterrows():\n        \n        model = models[row['Asset_ID']]\n        x_test = get_features(row)\n        y_pred = model.predict([x_test])[0]\n        \n        df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        \n        # Print just one sample row to get a feeling of what it looks like\n        if i == 0 and j == 0:\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        display(df_pred)\n\n    # Send submissions\n    env.predict(df_pred)","262c1eb5":"# References \n1. [Detailed API Introduction](https:\/\/www.kaggle.com\/sohier\/detailed-api-introduction)\n2. [Basic Submission Template](https:\/\/www.kaggle.com\/sohier\/basic-submission-template)"}}