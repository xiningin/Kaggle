{"cell_type":{"87d7813d":"code","274bfb75":"code","0bc709ad":"code","5bec5d61":"code","7070ebdd":"code","7c66e9b5":"code","e4c7c2c6":"code","5875bb62":"code","48a69290":"code","c60dc21e":"code","49dd3735":"code","a9e2377f":"code","43f70137":"code","49257f39":"code","103c1b91":"code","164075c3":"code","6ef12817":"code","dd562bea":"code","406a2981":"code","1833bdf5":"code","aaba2d19":"markdown","66fc4fcf":"markdown","631503ce":"markdown","de2e37ed":"markdown","34beb2ed":"markdown","5d5c4c29":"markdown","e3b1073c":"markdown","ba9fc664":"markdown","58deabe1":"markdown","dd16af2e":"markdown","d6717ebb":"markdown","16d71930":"markdown","d59fc8f4":"markdown","1142ef70":"markdown"},"source":{"87d7813d":"!pip install jovian --upgrade --quiet","274bfb75":"import numpy as np\nimport math as m\n","0bc709ad":"m=int(input('Enter the value of m:-'))\nn=int(input('Enter the value of n:-'))","5bec5d61":"alphabets=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']","7070ebdd":"x=m*n\nfirst_array=[]\nfinal_array=[]\nfor i in range(x):\n        y=input('Enter the {}-th character:-'.format(i))\n        first_array.append(y.upper())\n        for j in alphabets:\n            if y.upper()==j:\n                final_array.append(alphabets.index(j))\n                break\n            else:\n                continue\n \narr1=np.array(first_array)\narr2=np.array(final_array)\narr3=np.reshape(arr2,(m,n))\narr4=np.transpose(arr3)","7c66e9b5":"arr4","e4c7c2c6":"arr5=np.reshape(arr1,(m,n))\nplain_text=np.transpose(arr5)\nplain_text\n\n","5875bb62":"key_matrix_1=np.array([[8,16,5],\n                     [9,5,7],\n                     [2,3,21]])\n\ndet=np.linalg.det(key_matrix_1)\ny=float(det%26)\ny\n\n","48a69290":"def modInverse(a, m) : \n    a = a % m; \n    for x in range(1, m) : \n        if ((a * x) % m == 1) : \n            return x \n    return 1","c60dc21e":"modInverse(det,26)","49dd3735":"arr4","a9e2377f":"x=m*n\nkey_array=[]\nfor i in range(x):\n        y=int(input('Enter the {}-th key element:-'.format(i)))\n        key_array.append(y)\n\nmat1=np.array(key_array)\npre_key_matrix=np.reshape(mat1,(m,n))\n\nkey_matrix=np.transpose(pre_key_matrix)\n\n","43f70137":"key_matrix","49257f39":"multiplied_matrix=np.matmul (arr4,key_matrix)\nmultiplied_matrix","103c1b91":"np.mod(multiplied_matrix,26)","164075c3":"key_matrix_1=np.array([[8,16,5],\n                     [9,5,7],\n                     [2,3,21]])\nC=(key_matrix_1 @ arr4)%26\nC","6ef12817":"transpose=np.transpose(C)\ncipher_array=np.reshape(transpose,(1,m*n))\ncipher_list=cipher_array.tolist()\ncipher_list1=cipher_list[0]\ncipher_list1\n\nfor i in cipher_list1:\n    print(alphabets[i],end='')","dd562bea":"inverse_key_matrix=np.array([[10,11,15],\n                            [3,12,25],\n                            [11,22,0]])\n","406a2981":"P=(inverse_key_matrix @ C)%26\nP","1833bdf5":"transpose=np.transpose(P)\nplain_array=np.reshape(transpose,(1,m*n))\nplain_list=plain_array.tolist()\nplain_list1=plain_list[0]\nplain_list1\n\nfor i in plain_list1:\n    print(alphabets[i],end='')","aaba2d19":"#### Plain Text Matrix:-","66fc4fcf":"## key_matrix\n","631503ce":"# INVERSE OF DETERMINANT","de2e37ed":"# CIPHER TEXT TO PLAIN TEXT\n### P=inverse(k)C mod 26","34beb2ed":"# DETERMINANT OF A MATRIX","5d5c4c29":"   # MATRIX MULTIPLICATION","e3b1073c":"(After Modulus)","ba9fc664":"# PLAIN TEXT MATRIX TO EQUIVALENT NUMERIC MATRIX","58deabe1":"Numerical Equivalent of the Matrix:-","dd16af2e":"# NUMERIC ENCODING (Plain Text to Cipher Text)\n## C=KP mod 26","d6717ebb":"Cipher Text (Numeric to Text):-\n","16d71930":"#### Numeric matrix of the plain text matrix:-","d59fc8f4":"Enter the value of m x n(Size):","1142ef70":"### Matrix Multiplication of Plain text(Numeric) and Key Matrix :-\n\n(Before Modulus)"}}