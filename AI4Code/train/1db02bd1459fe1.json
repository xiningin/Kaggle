{"cell_type":{"6b151e83":"code","19269b40":"code","3f28236c":"code","ab3a2b61":"markdown","642b7a47":"markdown","44750b7b":"markdown","6c21117f":"markdown","563a4cf4":"markdown","2b648bf3":"markdown","3b961a7a":"markdown","9dc84b0e":"markdown","dc2a8f6a":"markdown","a4b9d8ae":"markdown","8a852495":"markdown","baaac197":"markdown","06e390ae":"markdown","8844c2ed":"markdown","88de1f0c":"markdown","5eeb60e5":"markdown","11ee4dba":"markdown","f0f24521":"markdown","6ae528cb":"markdown","36a6c234":"markdown"},"source":{"6b151e83":"# Work with Data - the main Python libraries\nimport numpy as np\nimport pandas as pd\n\n# import OpenCV\nimport cv2\n\n# Visualization\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.simplefilter('ignore')","19269b40":"# Set up lower and upper bound for color range of orange\nlow_bound = np.array([10, 100, 20])\nup_bound = np.array([25, 255, 255])","3f28236c":"# Thanks to https:\/\/opencv-python-tutroals.readthedocs.io\/en\/latest\/py_tutorials\/py_gui\/py_video_display\/py_video_display.html\n# Thanks to https:\/\/docs.opencv.org\/3.4\/da\/d97\/tutorial_threshold_inRange.html\n#\n# Reads the image from the laptop camera and what is blue (color mask you can be changed), replaces with white. \n# Both images show side by side. \n# For the exit press key \"q\".\n\n# cap = cv2.VideoCapture(0)\n# if(cap.isOpened()):\n#     print(\"webCam opened\")\n#     while(cv2.waitKey(3) != ord('q')):\n#         ret, frame = cap.read()\n\n#         # Convert color from BGR to HSV\n#         # Please see detail in https:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV\n#         hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)     \n        \n#         # Filtering by color\n#         mask = cv2.inRange(hsv, low_bound, up_bound)\n        \n#         # Image dilation\n#         kernel = np.ones((5,5), np.uint8)\n#         mask = cv2.dilate(mask, kernel, iterations = 1)\n        \n#         # Combined two images (filtering image and original image) in an one window\n#         h1, w1 = mask.shape\n#         h2, w2, d2 = frame.shape\n#         imgCom = np.zeros((max([h1, h2]), w1 + w2, 3), dtype='uint8')\n#         imgCom[:h1,:w1, 0] = mask\n#         imgCom[:h1,:w1, 1] = mask\n#         imgCom[:h1,:w1, 2] = mask\n#         imgCom[:h2, w1:w1+w2, :] = np.dstack([frame])\n        \n#         # Image resize\n#         imgCom = cv2.resize(imgCom, (w1, h1), interpolation=cv2.INTER_LINEAR)\n#         cv2.imshow(\"webCam\", imgCom)\n# else:\n#     print(\"Something is wrong\")\n    \n# cap.release()\n# cv2.destroyAllWindows()","ab3a2b61":"In progress...","642b7a47":"In progress...","44750b7b":"In progress...","6c21117f":"## 5. Prediction & Visualization<a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","563a4cf4":"## 4. Modeling<a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","2b648bf3":"Thanks to https:\/\/stackoverflow.com\/questions\/10948589\/choosing-the-correct-upper-and-lower-hsv-boundaries-for-color-detection-withcv\/48367205#48367205\n\n![image.png](attachment:image.png)\n\nTo find the orange color, we look up for the map, and find the best range: H :[10, 25], S: [100, 255], and V: [20, 255]. So the mask is cv2.inRange(hsv,(10, 100, 20), (25, 255, 255))","3b961a7a":"I hope you find this notebook useful and enjoyable.\n\nYour comments and feedback are most welcome.\n\n[Go to Top](#0)","9dc84b0e":"**TASK: Try select other color masks.**","dc2a8f6a":"## 2. Download data<a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","a4b9d8ae":"## 1. Import libraries<a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","8a852495":"In progress...","baaac197":"## Acknowledgements\n\n- [Data Science with DL & NLP: Advanced Techniques](https:\/\/www.kaggle.com\/vbmokin\/data-science-with-dl-nlp-advanced-techniques)\n- [Learn OpenCV by Examples - with Python](https:\/\/www.kaggle.com\/bulentsiyah\/learn-opencv-by-examples-with-python)\n- [Face Detection with OpenCV](https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv)\n- https:\/\/opencv-python-tutroals.readthedocs.io\/en\n- https:\/\/opencv-python-tutroals.readthedocs.io\/en\/latest\/py_tutorials\/py_gui\/py_video_display\/py_video_display.html","06e390ae":"## 3. EDA & FE<a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","8844c2ed":"Thanks to https:\/\/www.kaggle.com\/bulentsiyah\/learn-opencv-by-examples-with-python\n\n### Background Subtraction Methods Output\n![](https:\/\/iili.io\/JMXhdv.gif)\n\n### Funny Mirrors Using OpenCV Output\n![](https:\/\/iili.io\/JMw3qF.png)\n\n### Some pictures from content\n![](https:\/\/iili.io\/JMXPkl.png)","88de1f0c":"## Example with OpenCV<a class=\"anchor\" id=\"example\"><\/a>\n\n[Back to Table of Contents](#0.1)","5eeb60e5":"<a class=\"anchor\" id=\"0\"><\/a>\n# [AI-ML-DS : Training for beginners](https:\/\/www.kaggle.com\/vbmokin\/ai-ml-ds-training-for-beginners-in-kaggle). Level 1 (very simple). 2020\n## Kaggle GM, Prof. [@vbmokin](https:\/\/www.kaggle.com\/vbmokin)\n### [Vinnytsia National Technical University](https:\/\/vntu.edu.ua\/), Ukraine\n#### [Chair of the System Analysis and Information Technologies](http:\/\/mmss.vntu.edu.ua\/index.php\/ua\/)","11ee4dba":"# Important\n### The notebook is dedicated to demonstrating the capabilities of library OpenCV. I will add a dataset and demonstrate that on it. It is in progress.\n\n### While there is a code to run on a local laptop - copy, deselect as a comment and run - reads the image from the laptop camera and what is blue (color mask you can be changed), replaces with white. Both images show side by side.","f0f24521":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Example with OpenCV](#example)\n1. [Download data](#2)\n1. [EDA & FE](#3)\n1. [Modeling](#4)\n1. [Prediction & Visualization](#5)","6ae528cb":"Copy the all cells with Python code in this section \"1. Import libraries\" to your local laptop (or PC) with web-camera, deselect it as a comment and to run.","36a6c234":"## OpenCV (in progress)"}}