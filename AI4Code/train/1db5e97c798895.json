{"cell_type":{"3a9db39f":"code","5d6829eb":"code","6e93ce6a":"code","151e64c0":"code","4d0a521f":"code","d8077b72":"code","29d6b974":"code","024cc626":"code","ef754dff":"code","c50ee749":"code","3f96db00":"code","26d7cceb":"code","55ce8639":"code","cb66b71d":"code","fbf316cf":"code","8266a1ed":"code","9388b5a0":"code","838f935f":"code","9105c968":"code","60a6649f":"code","cbf579cc":"code","49479310":"code","f7ca3e72":"code","e4d5d742":"code","8b032d3c":"code","ca972854":"code","0f5efdac":"code","da559333":"code","67bfdb8a":"code","e6be673b":"code","f36daff0":"code","8357d114":"code","0d7a46b1":"code","b1cfe601":"code","8e2a29f4":"code","41ea9c17":"code","63b33317":"code","e3d2b134":"code","3cb2aa23":"code","723d2ccc":"code","7f614b8f":"code","d2306284":"code","9582ddf9":"code","27770e7a":"code","b442ee22":"code","7edd0d5b":"code","3e34542c":"code","4fc1be46":"code","ff70e2ed":"code","c97b8101":"code","6ad4756e":"code","1e1319f6":"code","ae169886":"code","b7a2bdab":"code","e556441d":"code","6e611665":"code","0dec511c":"code","ad396d40":"code","adbf0654":"code","21f328a3":"code","f4bfe01f":"markdown","fd564fdf":"markdown","bc4b95ce":"markdown","d9119727":"markdown","4b0bcbfd":"markdown","9e4c1676":"markdown","682acfa8":"markdown","3678141b":"markdown","0d2fb52d":"markdown","7de6a359":"markdown","c83253c5":"markdown","73552a7c":"markdown","76d2f787":"markdown","8a8f940c":"markdown","856e75ce":"markdown"},"source":{"3a9db39f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n###### Uncomment the code below if required #########\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n #   for filename in filenames:\n  #      print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5d6829eb":"# usual imports #\nimport os\nimport numpy as np\nimport pandas as pd\n\n# visualization imports #\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\n%matplotlib inline\n\n# consistent plots #\nfrom pylab import rcParams\nrcParams['figure.figsize']= 12,5\nrcParams['xtick.labelsize']= 12\nrcParams['ytick.labelsize']= 12\nrcParams['axes.labelsize']= 12\n\n# ignore unwanted warnings #\nimport warnings\nwarnings.filterwarnings(action='ignore',message='^internal gelsd')","6e93ce6a":"# designate directory to save the images #\nROOT_DIR = '\/kaggle\/input\/day-3-kaggle-competition'\n","151e64c0":"DATA_PATH = os.path.join(ROOT_DIR , 'data_comp\/data_comp')\nTRAIN_PATH = os.path.join(DATA_PATH,'train')\nTEST_PATH = os.path.join(DATA_PATH + '\/' + 'test')","4d0a521f":"# check the files or directories in the training path #\nos.listdir(TRAIN_PATH)","d8077b72":"rand = np.random.randint(len(os.listdir(TRAIN_PATH)))\nfurniture_title = os.listdir(TRAIN_PATH)[rand]","29d6b974":"furniture_path = os.path.join(TRAIN_PATH,furniture_title)\nfurniture_images  = os.listdir(furniture_path)","024cc626":"n_rows = 2\nn_cols = 4\n\nfor row in range(n_rows):\n    for col in range(n_cols):\n        index = n_cols * row + col\n        plt.subplot(n_rows,n_cols,index+1)\n        sample_image_path = os.path.join(furniture_path + '\/',furniture_images[index])\n        furniture = imread(sample_image_path)\n        plt.imshow(furniture,cmap='binary',interpolation='nearest')\n        plt.axis('off')\n        plt.title(furniture_title,fontsize=10)  ","ef754dff":"num_images = 0\nfor folder in os.listdir(TRAIN_PATH):\n    num_images = num_images + len(os.listdir(os.path.join(TRAIN_PATH + '\/' + folder)))    \nprint ('Total number of images in the train dir = {}'.format(num_images))","c50ee749":"# check the dimension of each training image and calculate the mean shape #\ndim1 = []\ndim2 = []\n\nfor folder in os.listdir(TRAIN_PATH):\n    for image_filename in os.listdir(TRAIN_PATH + '\/' + folder):\n        img = imread(os.path.join(TRAIN_PATH,folder,image_filename))\n        #print(os.path.join(TRAIN_PATH,folder,image_filename))\n        d1,d2 = img.shape[0],img.shape[1]\n        dim1.append(d1)\n        dim2.append(d2)\nprint (np.mean(dim1),np.mean(dim2))\n","3f96db00":"IMAGE_SHAPE = (int(np.mean(dim1)),int(np.mean(dim2)),3)\n","26d7cceb":"# image shape with the color channel to be later fed into the model #\nIMAGE_SHAPE","55ce8639":"# import the image data generator \nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","cb66b71d":"# generate images using the data generator --> check help(ImageDataGenerator) #\nimage_gen = ImageDataGenerator(rotation_range=90,\n                               width_shift_range=0.10, \n                               height_shift_range=0.10,\n                               rescale=1.\/255,\n                               shear_range=0.1,\n                               zoom_range=0.1,\n                               horizontal_flip=True,\n                               fill_mode='nearest',\n                               vertical_flip=False,\n                               validation_split=0.3)  ","fbf316cf":"# visualize one of the original image of a furniture #\nfurniture_orig = imread(sample_image_path)\nplt.imshow(furniture_orig)\nplt.axis('off')\nplt.title('Original Image');","8266a1ed":"# visualize one the randomly generated image by the image generator of the same fruit #\nplt.imshow(image_gen.random_transform(furniture_orig))\nplt.axis('off')\nplt.title('Image Generated using Data Generator');","9388b5a0":"image_gen.flow_from_directory(TRAIN_PATH)","838f935f":"# import the libraries #\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D,Dense,Flatten,MaxPooling2D,Dropout\nfrom tensorflow import keras","9105c968":"# clear the session #\nkeras.backend.clear_session()\nnp.random.seed(42)","60a6649f":"# create a sequential model #\nmodel = Sequential()\n\n# convolutional and max pool layer #\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',strides=(1,1),\n                activation='relu',input_shape=IMAGE_SHAPE))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',strides=(1,1),\n                activation='relu',input_shape=IMAGE_SHAPE))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters=128,kernel_size=(3,3),padding='same',strides=(1,1),\n                activation='relu',input_shape=IMAGE_SHAPE))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n\n# flatten the layer before feeding into the dense layer #\nmodel.add(Flatten())\n\n# dense layer together with dropout to prevent overfitting #\nmodel.add(Dense(units=128,activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dense(units=64,activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(units=32,activation='relu',kernel_initializer='he_normal'))\nmodel.add(Dropout(0.5))\n\n# there are 5 classes, hence 5 neurons in the final layer #\nmodel.add(Dense(units=5,activation='softmax'))\n\n# compile the model #\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])","cbf579cc":"# check the model summary # \nmodel.summary()","49479310":"#model.layers","f7ca3e72":"# import early stopping and model checkpoint #\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping","e4d5d742":"early_stop = EarlyStopping(monitor='val_loss',patience=5,restore_best_weights=True)","8b032d3c":"BATCH_SIZE = 16\nIMAGE_SHAPE[:2]","ca972854":"train_image_gen = image_gen.flow_from_directory(TRAIN_PATH,target_size=IMAGE_SHAPE[:2],\n                                               color_mode='rgb',batch_size=BATCH_SIZE,\n                                               class_mode='categorical',seed=1,subset='training')","0f5efdac":"validation_image_gen = image_gen.flow_from_directory(TRAIN_PATH,target_size=IMAGE_SHAPE[:2],\n                                               color_mode='rgb',batch_size=BATCH_SIZE,\n                                               class_mode='categorical', shuffle=False,subset='validation',\n                                               seed=1)","da559333":"# check the class indices #\ntrain_image_gen.class_indices","67bfdb8a":"# fit the model and train with early stop enabled #\nepoch = 30\nhistory=model.fit(train_image_gen,\n                  validation_data = validation_image_gen,\n                  epochs = epoch,callbacks=[early_stop])","e6be673b":"# create dataframe of the loss and accuracy of the train and validation data #\ndf_loss = pd.DataFrame(model.history.history)\ndf_loss.head()","f36daff0":"df_loss[['loss','accuracy','val_loss','val_accuracy']].plot()\nplt.xlabel('epochs')\nplt.ylabel('loss')","8357d114":"model.evaluate(validation_image_gen)","0d7a46b1":"test_image_gen = ImageDataGenerator(rescale=1.\/255)   \n","b1cfe601":"os.makedirs('\/kaggle\/test',exist_ok=True)","8e2a29f4":"from distutils.dir_util import copy_tree","41ea9c17":"TEST_PATH","63b33317":"src = TEST_PATH\ndest = '\/kaggle\/test\/test'","e3d2b134":"copy_tree(src,dest)\n#test_path = '\/kaggle\/test'","3cb2aa23":"test_path = '\/kaggle\/test'","723d2ccc":"test_generator = test_image_gen.flow_from_directory(directory=test_path,\n                                                 target_size=IMAGE_SHAPE[:2],\n                                                 color_mode='rgb',\n                                                 batch_size=BATCH_SIZE,\n                                                 class_mode=None,\n                                                  shuffle=False)","7f614b8f":"pred = model.predict(test_generator,steps=len(test_generator),verbose=1)","d2306284":"predicted_class_indices=np.argmax(pred,axis=1)","9582ddf9":"labels = (train_image_gen.class_indices)\nlabels = dict((v,k) for k,v in labels.items())\npredictions = [labels[k] for k in predicted_class_indices]","27770e7a":"# get filenames \nfilenames=test_generator.filenames\nresults=pd.DataFrame({\"Filename\":filenames,\n                      \"Predictions\":predictions})","b442ee22":"results","7edd0d5b":"results.head()","3e34542c":"def file_name(st):\n    x = st.split('\/')\n    y = x[1].split('.')\n    return y[0]","4fc1be46":"results['image'] = results['Filename'].apply(file_name)","ff70e2ed":"results.head()","c97b8101":"results.drop('Filename',axis=1,inplace=True)","6ad4756e":"results.head(5)","1e1319f6":"def pred(st):\n    if st=='chair':\n        return 1\n    elif st == 'swivelchair':\n        return 3\n    elif st == 'bed':\n        return 0\n    elif st == 'table':\n        return 4\n    else:\n        return 2\n        \n    \n    ","ae169886":"results['target'] = results['Predictions'].apply(pred)","b7a2bdab":"results.head(100)","e556441d":"results.drop('Predictions',axis=1,inplace=True)","6e611665":"results.head(10)","0dec511c":"results.to_csv('furn30_submission_2.csv',index=False)","ad396d40":"os.listdir('\/kaggle\/working')","adbf0654":"results.head()","21f328a3":"type(results['image'][0])","f4bfe01f":"## Data Exploration \nSelect any random directory and view one of the images from the training folder","fd564fdf":"## Early Stopping","bc4b95ce":"## Prepare the data for Deep Learning Model \n\nMore than 6000 images is too much data to read all at once in memory. The better strategy would be to use some built in functions in Keras to automatically process the data, generate a flow of batches from a directory, and also manipulate the images.\n\n### Image Manipulation\n\nIts usually a good idea to manipulate the images with rotation, resizing, and scaling so the model becomes more robust to different images that our data set doesn't have. We can use the **ImageDataGenerator** to do this automatically for us. ","d9119727":"## Data for training the Model","4b0bcbfd":"## Train the Model","9e4c1676":"### Generating many manipulated images from directory","682acfa8":"Clearly \n- These are colored 3D images of the furnitures\n- The same furniture can be presented in any orientation and can have varying size\n- The brightness varies etc\n\nHene the model should be good enough to be able to identify the furniture type \nwhen it is shown in different angles. ","3678141b":"***Check the dimension of these images***\nCalculate the mean dimension to set as the input_shape\n","0d2fb52d":"***Validation Image***","7de6a359":"## Environment Set up","c83253c5":"***Train Image***","73552a7c":"### Arrange the test folder in teh required dir needed to use the image generator test\/test\/files","76d2f787":"***Use the ImageDataGenerator to generate images by using the following parameters***\n- rotate_range --> rotate images by 20%\n- width_shift_range --> shift the width by 10%\n- height_shift_range --> shift the height by 10%\n- rescale --> rescale the image to be between 0 and 1 \n- shear_range --> cut off by a certain percentage 10%\n- zoom_range --> zoom the image by 10%\n- horizontal_flip --> flip the image horizontally\n- fill_mode --> fill the empty pixel based on the values of the nearest pixel in original image\n- vertical_flip --> flip the image vertically (upside down)\n- validation_split --> use 30% of the data in training folder for validation","8a8f940c":"## Model Creation\n\n***Use combination of Covolutional, Pooling Layer and finally Dense Layer***","856e75ce":"***Check the number of images in the training folder***"}}