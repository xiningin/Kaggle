{"cell_type":{"820daac7":"code","ef508134":"code","5c5daeeb":"code","ba2ce274":"code","40853d6a":"code","f3692c32":"code","19bfc817":"code","34e554e7":"code","831841c9":"code","d168e5a8":"code","9d49532f":"code","5dad595e":"code","59f4f5c9":"code","d2f07b31":"code","e3d6a229":"code","89d9a0ec":"code","bdea72f8":"code","081f7585":"code","c2e930db":"code","f1f9fcbe":"code","0e8fb11e":"code","9d03586d":"code","3fecca00":"code","75d63b85":"code","09649a2c":"code","a9e462fd":"code","44b02aed":"code","aa7a82f9":"code","906e252d":"code","5c587685":"code","0d242f50":"code","cfa419d4":"code","ea05a1df":"code","03e863c7":"code","1d695959":"code","a01946ca":"code","a93471e0":"code","f37a48e7":"code","d4291b25":"code","05e4db44":"code","b1e77a01":"code","1415bd52":"code","0313df93":"code","133d91ec":"code","1bde6cb3":"code","e3db9435":"code","8556eb1d":"code","5424afeb":"code","4b657239":"code","4851a664":"code","8d2fb437":"code","ab89a20f":"code","f1b469c5":"code","04fd574f":"code","420b7759":"code","be6dafae":"code","4ac7bb1b":"code","ea8b5c35":"code","711c634b":"code","ab7f69eb":"code","4d9cbefa":"code","af12fc1c":"code","cef79b7c":"code","f7a86ce0":"code","8920d4cc":"code","2c70ac1a":"code","d4ecf24e":"code","e96aa798":"code","4705b71e":"markdown","ccfe6194":"markdown","4820ac39":"markdown","b7b9590a":"markdown","18f71c71":"markdown","f606adbd":"markdown","8e329a5a":"markdown","c1b24d19":"markdown","c61edcd0":"markdown","962806ce":"markdown","4102d0c5":"markdown","239b09bd":"markdown","68071634":"markdown","46c4704a":"markdown","08eaeaba":"markdown","da4e8080":"markdown","891a6f72":"markdown","9314e571":"markdown","73165e9e":"markdown","80c96f76":"markdown","eea8ce8e":"markdown","39f287c2":"markdown","a8e3f400":"markdown","881a29e2":"markdown","c19fc0ef":"markdown","217e1633":"markdown","539d612d":"markdown","e9a6f60f":"markdown","bf8bfe67":"markdown","6549a228":"markdown","0802bb4e":"markdown","61bddd45":"markdown","d59f7150":"markdown","8dae0d39":"markdown","665cc87f":"markdown","673a4f16":"markdown","bbe44b88":"markdown","7d4afe04":"markdown","308fc13f":"markdown","52d5046d":"markdown","2c4ccdbf":"markdown","357baa99":"markdown","6f4e36db":"markdown","b1319a85":"markdown","854f232f":"markdown","c98b5ed9":"markdown","a124e886":"markdown","e0a6f875":"markdown","2cd014ff":"markdown","dfab6355":"markdown","d8bf6985":"markdown","1d8e75bc":"markdown","e3665ec4":"markdown","631c638a":"markdown","6c924f62":"markdown"},"source":{"820daac7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom surprise import KNNWithMeans\nfrom surprise import Dataset\nfrom surprise import accuracy\nfrom surprise.model_selection import train_test_split as surprise_train_test_split\nfrom sklearn.model_selection import train_test_split as train_test_split\nfrom surprise import Reader\nimport scipy.sparse\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.linalg import svds\nimport warnings; warnings.simplefilter('ignore')","ef508134":"cols=['userId','productId','Rating','timestamp']\ndata=pd.read_csv(\"http:\/\/snap.stanford.edu\/data\/amazon\/productGraph\/categoryFiles\/ratings_Electronics.csv\",names=cols)","5c5daeeb":"data.head(10)","ba2ce274":"data.dtypes","40853d6a":"data=data.drop(['timestamp'],axis=1)","f3692c32":"data.info()","19bfc817":"na_values=data.isna().sum()\nprint(na_values)","34e554e7":"data.describe().T","831841c9":"#Find the minimum and maximum ratings\nprint('Minimum rating is: %d' %(data.Rating.min()))\nprint('Maximum rating is: %d' %(data.Rating.max()))","d168e5a8":"sns.countplot(data['Rating'])","9d49532f":"print(\"Total number of records with unique users and products\")\nprint(\"*\"*100)\nprint(\"The total number of records in the data-set are:\", data.shape[0])\nprint(\"The total number of unique users in the data-set are:\", len(np.unique(data.userId)))\nprint(\"The total number of unique products in the data-set are:\", len(np.unique(data.productId)))","5dad595e":"data_no_of_ratings_userId=data.groupby(by='userId')['Rating'].count().sort_values(ascending=False)","59f4f5c9":"data_no_of_ratings_userId.head()","d2f07b31":"data_no_of_ratings_productId=data.groupby(by='productId')['Rating'].count().sort_values(ascending=False)  ","e3d6a229":"data_no_of_ratings_productId.head()","89d9a0ec":"#data_subset=data[data.groupby('userId')['userId'].transform('size')>50]\ncounts = data['userId'].value_counts()\ndata_subset = data[data['userId'].isin(counts[counts >= 50].index)]","bdea72f8":"##### data_subset=data_subset[data_subset.groupby('productId')['productId'].transform('size')>50]\ncounts = data_subset['productId'].value_counts()\ndata_subset = data_subset[data_subset['productId'].isin(counts[counts >= 100].index)]\n","081f7585":"data_subset.head()","c2e930db":"data_subset.shape","f1f9fcbe":"print(\"Total number of records with unique users and products\")\nprint(\"*\"*100)\nprint(\"The total number of records in the data-set are:\", data_subset.shape[0])\nprint(\"The total number of unique users in the data-set are:\", len(np.unique(data_subset.userId)))\nprint(\"The total number of unique products in the data-set are:\", len(np.unique(data_subset.productId)))","0e8fb11e":"final_ratings_matrix = data_subset.pivot(index = 'userId', columns ='productId', values = 'Rating').fillna(0)\nprint('Shape of final_ratings_matrix: ', final_ratings_matrix.shape)\n\ngiven_num_of_ratings = np.count_nonzero(final_ratings_matrix)\nprint('given_num_of_ratings = ', given_num_of_ratings)\npossible_num_of_ratings = final_ratings_matrix.shape[0] * final_ratings_matrix.shape[1]\nprint('possible_num_of_ratings = ', possible_num_of_ratings)\ndensity = (given_num_of_ratings\/possible_num_of_ratings)\ndensity *= 100\nprint ('density: {:4.2f}%'.format(density))","9d03586d":"final_ratings_matrix.head()","3fecca00":"data_PBR=data_subset","75d63b85":"data_PBR.groupby('productId')['Rating'].mean().head(10)","09649a2c":"data_PBR.groupby('productId')['Rating'].mean().sort_values(ascending=False).head(10)","a9e462fd":"data_PBR.groupby('productId')['Rating'].count().sort_values(ascending=False).head(10)","44b02aed":"mean_count_ratings=pd.DataFrame(data_PBR.groupby('productId')['Rating'].mean())","aa7a82f9":"mean_count_ratings['Rating counts']=data_PBR.groupby('productId')['Rating'].count()","906e252d":"recommended_products=mean_count_ratings[(mean_count_ratings['Rating']>4.5) & (mean_count_ratings['Rating counts']>50)]","5c587685":"recommended_products","0d242f50":"#Split the data randomnly into train and test datasets into 70:30 ratio\ntrain_data, test_data = train_test_split(data_subset, test_size = 0.3, random_state=0)\ntrain_data.head()","cfa419d4":"print('Shape of training data: ',train_data.shape)\nprint('Shape of testing data: ',test_data.shape)","ea05a1df":"train_data_grouped = train_data.groupby('productId').agg({'userId': 'count'}).reset_index()\ntrain_data_grouped.rename(columns = {'userId': 'score'},inplace=True)\ntrain_data_grouped.head()","03e863c7":"#Sort the products on recommendation score \ntrain_data_sort = train_data_grouped.sort_values(['score', 'productId'], ascending = [0,1]) \n      \n#Generate a recommendation rank based upon score \ntrain_data_sort['rank'] = train_data_sort['score'].rank(ascending=0, method='first') \n          \n#Get the top 5 recommendations \npopularity_recommendations = train_data_sort.head(5) \npopularity_recommendations","1d695959":"def recommend(user_id):     \n    user_recommendations = popularity_recommendations \n          \n    #Add user_id column for which the recommendations are being generated \n    user_recommendations['userId'] = user_id \n      \n    #Bring user_id column to the front \n    cols = user_recommendations.columns.tolist() \n    cols = cols[-1:] + cols[:-1] \n    user_recommendations = user_recommendations[cols] \n          \n    return user_recommendations","a01946ca":"find_recom = [11,123,290]   # This list is user choice.\nfor i in find_recom:\n    print(\"The list of recommendations for the userId: %d\\n\" %(i))\n    print(recommend(i))    \n    print(\"\\n\")","a93471e0":"reader = Reader(rating_scale=(1, 5))","f37a48e7":"data_CFBR=data_subset\ndata_CFBR = Dataset.load_from_df(data_CFBR[['userId', 'productId', 'Rating']], reader)","d4291b25":"trainset, testset = surprise_train_test_split(data_CFBR, test_size=.3)","05e4db44":"CF_Model = KNNWithMeans(k=50, sim_options={'name': 'pearson_baseline', 'user_based': False})\nCF_Model.fit(trainset)","b1e77a01":"#Prediction on the testset\ntest_pred = CF_Model.test(testset)","1415bd52":"test_pred","0313df93":"#RMSE\nprint(\"Item-based Model : Train Set\")\naccuracy.rmse(test_pred, verbose=True)\n","133d91ec":"CF_Model = KNNWithMeans(k=50, sim_options={'name': 'pearson_baseline', 'user_based': True})\nCF_Model.fit(trainset)","1bde6cb3":"#Getting predictions\ntest_pred = CF_Model.test(testset)","e3db9435":"test_pred","8556eb1d":"# get RMSE\nprint(\"Item-based Model : Train Set\")\naccuracy.rmse(test_pred, verbose=True)\n","5424afeb":"pivot_df = data_subset.pivot(index = 'userId', columns ='productId', values = 'Rating').fillna(0)\npivot_df.head()","4b657239":"print('Shape of the pivot table: ', pivot_df.shape)","4851a664":"pivot_df['user_index'] = np.arange(0, pivot_df.shape[0], 1)\npivot_df.head()","8d2fb437":"pivot_df.set_index(['user_index'], inplace=True)\n# Actual ratings given by users\npivot_df.head()","ab89a20f":"# Singular Value Decomposition\nU, sigma, Vt = svds(pivot_df, k = 10)","f1b469c5":"print('Left singular matrix: \\n',U)","04fd574f":"print('Sigma: \\n',sigma)","420b7759":"# Construct diagonal array in SVD\nsigma = np.diag(sigma)\nprint('Diagonal matrix: \\n',sigma)","be6dafae":"print('Right singular matrix: \\n',Vt)","4ac7bb1b":"#Predicted ratings\nall_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt) \n# Convert predicted ratings to dataframe\npreds_df = pd.DataFrame(all_user_predicted_ratings, columns = pivot_df.columns)\npreds_df.head()","ea8b5c35":"\ndef recommend_items(userID, pivot_df, preds_df, num_recommendations):\n    # index starts at 0  \n    user_idx = userID-1 \n    # Get and sort the user's ratings\n    sorted_user_ratings = pivot_df.iloc[user_idx].sort_values(ascending=False)\n    #sorted_user_ratings\n    sorted_user_predictions = preds_df.iloc[user_idx].sort_values(ascending=False)\n    #sorted_user_predictions\n    temp = pd.concat([sorted_user_ratings, sorted_user_predictions], axis=1)\n    temp.index.name = 'Recommended Items'\n    temp.columns = ['user_ratings', 'user_predictions']\n    temp = temp.loc[temp.user_ratings == 0]   \n    temp = temp.sort_values('user_predictions', ascending=False)\n    print('\\nBelow are the recommended items for user(user_id = {}):\\n'.format(userID))\n    print(temp.head(num_recommendations))","711c634b":"userID = 50\nnum_recommendations = 5\nrecommend_items(userID, pivot_df, preds_df, num_recommendations)","ab7f69eb":"userID = 5\nnum_recommendations = 5\nrecommend_items(userID, pivot_df, preds_df, num_recommendations)","4d9cbefa":"userID = 8\nnum_recommendations = 5\nrecommend_items(userID, pivot_df, preds_df, num_recommendations)","af12fc1c":"final_ratings_matrix.head()","cef79b7c":"final_ratings_matrix.mean().head()","f7a86ce0":"preds_df.head()","8920d4cc":"\npreds_df.mean().head()","2c70ac1a":"rmse_df = pd.concat([final_ratings_matrix.mean(), preds_df.mean()], axis=1)\nrmse_df.columns = ['Avg_actual_ratings', 'Avg_predicted_ratings']\nprint(rmse_df.shape)\nrmse_df['item_index'] = np.arange(0, rmse_df.shape[0], 1)\nrmse_df.head()","d4ecf24e":"RMSE = round((((rmse_df.Avg_actual_ratings - rmse_df.Avg_predicted_ratings) ** 2).mean() ** 0.5), 5)\nprint('\\nRMSE SVD Model = {} \\n'.format(RMSE))","e96aa798":"userID = 9\nnum_recommendations = 5\nrecommend_items(userID, pivot_df, preds_df, num_recommendations)","4705b71e":"##### As sigma is not in diagonal matrix, we need conversion","ccfe6194":"#### Analyzing the rating","4820ac39":"##### There are no null values in this data-set","b7b9590a":"### Exploratory Data Analytics","18f71c71":"#### Creating the model and fitting the train-set","f606adbd":"#### \u25cf userId   : Every user identified with a unique id\n#### \u25cf productId : Every product identified with a unique id\n#### \u25cf Rating : Rating of the corresponding product by the corresponding user\n#### \u25cf timestamp : Time of the rating","8e329a5a":"#### Identifying the popular products with Mean Rating greater than 4.5 and atleast 50 ratings","c1b24d19":"#### RMSE of Collabrative Model","c61edcd0":"##### RMSE score obtained is 0.89","962806ce":"##### Sorting the user ID's in decending order based on the ratings they have provided","4102d0c5":"##### There are nearly 78,24,482 records in the data-set, we are going to reduce the records in the datset for our analysis","239b09bd":"### Singular Value Decomposition","68071634":"### Surprise Library-Collabrative Filtering Recomendation Model: User-User Recomendation","46c4704a":"##### RMSE score obtained is 0.95","08eaeaba":"\nThe Popularity-based recommender system is a non-personalised recommender system and these are based on frequecy counts, which may be not suitable to the user.We can see the differance above for the user id's, The Popularity based model has recommended the same set of 5 products to all but Collaborative Filtering based model has recommended entire different list based on the user past purchase history.\n\nModel-based Collaborative Filtering is a personalised recommender system, the recommendations are based on the past behavior of the user and it is not dependent on any additional information.","da4e8080":"### Building a proper Popularity Recommendation Model","891a6f72":"### Reading and understanding the data-set","9314e571":"#### Average actual rating for each item\n","73165e9e":"#### Average Predicted rating for each item\n","80c96f76":"#### Creating model and fitting the trainset","eea8ce8e":"#### Initializing the reader","39f287c2":"### Taking a subset of the dataset to make it less sparse\/denser","a8e3f400":"#### Sorting the products with highest rating in decending order","881a29e2":"#### Check for any null values in the data","c19fc0ef":"#### Spliting the data","217e1633":"##### The above shows it is a sparce matrix","539d612d":"### Simple Popularity Based Recomendation System","e9a6f60f":"##### We now have a data-set with just 6234 records","bf8bfe67":"#### Checking the head of the data-set","6549a228":"##### Since, it is a Collaborative recommender model, so, all the three users are given different recommendations based on users past behaviour.\n","0802bb4e":"##### UserId and ProductId are objects where as Ratings and timestamp are intergers","61bddd45":"### Importing Necessary Libraries","d59f7150":"### Evaluation of Collabrative recommendation model","8dae0d39":"##### Mean Rating is around 4 with a standard deviation of 1.4","665cc87f":"#### Enter 'userID' and 'num_recommendations' for the user #\n","673a4f16":"##### Above are some of the popular products available","bbe44b88":"#### Checking the data-types of the data","7d4afe04":"#### Checking the information of the data","308fc13f":"##### More number of users have rated 5 for a products compared to other ratings\n##### Ratings are in the scale of 1-5","52d5046d":"#### Splitting the data","2c4ccdbf":"### Surprise Library-Collabrative Filtering Recomendation Model: Item-Item Recomendation","357baa99":"#### Creating the data-set\n","6f4e36db":"#### Predicted ratings \n","b1319a85":"#### Use popularity based recommender model to make predictions","854f232f":"#### Unique Users and products","c98b5ed9":"#### Visualizing the Ratings attribute","a124e886":"#### Final Ratings Matrix","e0a6f875":"#### Timestamp is not necessary for this recommendation model approach and hence droping the same","2cd014ff":"##### Sorting the Product ID's in decending order based on the ratings they have received","dfab6355":"#### Mean Ratings for Each Product","d8bf6985":"#### Creating a new data-frame with the following conditions\n##### - Only users who has given more than 50 ratings\n##### - Only products which has received more than 100 ratings","1d8e75bc":"### User Based Collaborative Filtering model\n#### Matrix with row per 'user' and column per 'item' \n","e3665ec4":"##### Since, this is a Popularity recommender model, all the three users are given the same recommendations. Here, we predict the products based on the popularity. It is not personalized to particular user. It is a non-personalized recommender system.","631c638a":"#### Function to Recommend the items to the users with the highest predicted ratings","6c924f62":"#### Sorting the products with highest number of ratings in decending order"}}