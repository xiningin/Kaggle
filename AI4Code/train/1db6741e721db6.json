{"cell_type":{"a451948c":"code","a0be9a22":"code","9258572f":"code","34ac3972":"code","d5bf2659":"code","e6ed587d":"markdown","961272e0":"markdown","4909fe57":"markdown","0b430781":"markdown","0c1dbef8":"markdown"},"source":{"a451948c":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n#Some helper functions for plotting and drawing lines\n\ndef plot_points(X, y):\n    admitted = X[np.argwhere(y==1)]\n    rejected = X[np.argwhere(y==0)]\n    plt.scatter([s[0][0] for s in rejected], [s[0][1] for s in rejected], s = 25, color = 'blue', edgecolor = 'k')\n    plt.scatter([s[0][0] for s in admitted], [s[0][1] for s in admitted], s = 25, color = 'red', edgecolor = 'k')\n\ndef display(m, b, color='g--'):\n    plt.xlim(-0.05,1.05)\n    plt.ylim(-0.05,1.05)\n    x = np.arange(-10, 10, 0.1)\n    plt.plot(x, m*x+b, color)","a0be9a22":"data = pd.read_csv('..\/input\/data.csv', header=None)\nX = np.array(data[[0,1]])\ny = np.array(data[2])\nplot_points(X,y)\nplt.show()","9258572f":"# Implement the following functions\n\n# Activation (sigmoid) function\ndef sigmoid(x):\n    return 1 \/ (1 + np.exp(-x))\n\n# Output (prediction) formula\ndef output_formula(features, weights, bias):\n    return sigmoid(np.dot(features, weights) + bias)\n\n# Error (log-loss) formula\ndef error_formula(y, output):\n    return - y*np.log(output) - (1 - y) * np.log(1-output)\n\n# Gradient descent step\ndef update_weights(x, y, weights, bias, learnrate):\n    output = output_formula(x, weights, bias)\n    d_error = y - output\n    weights += learnrate * d_error * x\n    bias += learnrate * d_error\n    return weights, bias","34ac3972":"np.random.seed(44)\n\nepochs = 100\nlearnrate = 0.01\n\ndef train(features, targets, epochs, learnrate, graph_lines=False):\n    \n    errors = []\n    n_records, n_features = features.shape\n    last_loss = None\n    weights = np.random.normal(scale=1 \/ n_features**.5, size=n_features)\n    bias = 0\n    for e in range(epochs):\n        del_w = np.zeros(weights.shape)\n        for x, y in zip(features, targets):\n            output = output_formula(x, weights, bias)\n            error = error_formula(y, output)\n            weights, bias = update_weights(x, y, weights, bias, learnrate)\n        \n        # Printing out the log-loss error on the training set\n        out = output_formula(features, weights, bias)\n        loss = np.mean(error_formula(targets, out))\n        errors.append(loss)\n        if e % (epochs \/ 10) == 0:\n            print(\"\\n========== Epoch\", e,\"==========\")\n            if last_loss and last_loss < loss:\n                print(\"Train loss: \", loss, \"  WARNING - Loss Increasing\")\n            else:\n                print(\"Train loss: \", loss)\n            last_loss = loss\n            predictions = out > 0.5\n            accuracy = np.mean(predictions == targets)\n            print(\"Accuracy: \", accuracy)\n        if graph_lines and e % (epochs \/ 100) == 0:\n            display(-weights[0]\/weights[1], -bias\/weights[1])\n            \n\n    # Plotting the solution boundary\n    plt.title(\"Solution boundary\")\n    display(-weights[0]\/weights[1], -bias\/weights[1], 'black')\n\n    # Plotting the data\n    plot_points(features, targets)\n    plt.show()\n\n    # Plotting the error\n    plt.title(\"Error Plot\")\n    plt.xlabel('Number of epochs')\n    plt.ylabel('Error')\n    plt.plot(errors)\n    plt.show()","d5bf2659":"train(X, y, epochs, learnrate, True)","e6ed587d":"# Implementing the Gradient Descent Algorithm\n\nIn this lab, we'll implement the basic functions of the Gradient Descent algorithm to find the boundary in a small dataset. First, we'll start with some functions that will help us plot and visualize the data.","961272e0":"## Reading and plotting the data","4909fe57":"## Time to train the algorithm!\nWhen we run the function, we'll obtain the following:\n- 10 updates with the current training loss and accuracy\n- A plot of the data and some of the boundary lines obtained. The final one is in black. Notice how the lines get closer and closer to the best fit, as we go through more epochs.\n- A plot of the error function. Notice how it decreases as we go through more epochs.","0b430781":"## TODO: Implementing the basic functions\nHere is your turn to shine. Implement the following formulas, as explained in the text.\n- Sigmoid activation function\n\n$$\\sigma(x) = \\frac{1}{1+e^{-x}}$$\n\n- Output (prediction) formula\n\n$$\\hat{y} = \\sigma(w_1 x_1 + w_2 x_2 + b)$$\n\n- Error function\n\n$$Error(y, \\hat{y}) = - y \\log(\\hat{y}) - (1-y) \\log(1-\\hat{y})$$\n\n- The function that updates the weights\n\n$$ w_i \\longrightarrow w_i + \\alpha (y - \\hat{y}) x_i$$\n\n$$ b \\longrightarrow b + \\alpha (y - \\hat{y})$$","0c1dbef8":"## Training function\nThis function will help us iterate the gradient descent algorithm through all the data, for a number of epochs. It will also plot the data, and some of the boundary lines obtained as we run the algorithm."}}