{"cell_type":{"66206cfb":"code","10150744":"code","10ba0eee":"code","fb1118b3":"code","e5ac6b66":"code","30fb7ce9":"code","92b32b19":"code","df30714d":"code","c157c130":"code","2c4680cb":"code","30440072":"code","4a1e1f03":"code","eb7f119c":"code","71a2001e":"code","5743afda":"code","42a137de":"code","aad23d44":"code","cd822324":"code","b6444554":"code","67c844b6":"code","d84dd005":"code","171ae227":"code","f8f242f9":"code","57b6d337":"code","6e3d4050":"code","d100355d":"code","8bd8b9d0":"code","5286aace":"code","6b0c4bb8":"code","e2d7c469":"code","e52f1afe":"markdown","902abb5f":"markdown","5c29eb5f":"markdown","c9717133":"markdown","05be20b9":"markdown","8d27ac1d":"markdown","b9dc7774":"markdown"},"source":{"66206cfb":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\n\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold","10150744":"data0 = pd.read_csv(\"..\/input\/yacht-hydrodynamics-data-set\/yacht_hydro.csv\")\ndata0[0:2].T","10ba0eee":"data0.columns","fb1118b3":"data0.info()","e5ac6b66":"data0.columns","30fb7ce9":"target=['Rr']\ndataY0=data0[target]\ndataX=data0.drop([target[0]],axis=1)","92b32b19":"df_columns = list(dataX.columns)\nprint(df_columns)","df30714d":"dataX=np.array(dataX)\ndataY0=np.array(dataY0)","c157c130":"m=len(data0)\nprint(m)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\ntestX=dataX[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","2c4680cb":"print(len(trainX))\nprint(len(testX))","30440072":"train_df=pd.DataFrame(trainX)\ntest_df=pd.DataFrame(testX)","4a1e1f03":"train_df.columns=df_columns\ntest_df.columns=df_columns","eb7f119c":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","71a2001e":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","5743afda":"def to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","42a137de":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","aad23d44":"train_feat_df","cd822324":"test_feat_df","b6444554":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","67c844b6":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","d84dd005":"y = trainY0\nprint(y.shape)","171ae227":"ydf=pd.DataFrame(y)\nydf","f8f242f9":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_xlabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(y,oof)","57b6d337":"print(target)","6e3d4050":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print(order[0:5].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","d100355d":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","8bd8b9d0":"orders=['Fr', 'B\/Dr', 'PC', 'L\/D', 'L\/B']","5286aace":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(orders[0]+' vs '+target[0],fontsize=20)\nax.set_ylabel(target[0],fontsize=12)\nax.set_xlabel(orders[0],fontsize=12)\nax.scatter(data0[orders[0]],data0[target[0]],)","6b0c4bb8":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(orders[1]+' vs '+target[0],fontsize=20)\nax.set_ylabel(target[0],fontsize=12)\nax.set_xlabel(orders[1],fontsize=12)\nax.scatter(data0[orders[1]],data0[target[0]],)","e2d7c469":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(orders[2]+' vs '+target[0],fontsize=20)\nax.set_ylabel(target[0],fontsize=12)\nax.set_xlabel(orders[2],fontsize=12)\nax.scatter(data0[orders[2]],data0[target[0]],)","e52f1afe":"# Model","902abb5f":"![https:\/\/www.neuraldesigner.com\/images\/yacht-resistance.jpeg](https:\/\/www.neuraldesigner.com\/images\/yacht-resistance.jpeg)","5c29eb5f":"# Data preparation","c9717133":"# Target setting","05be20b9":"# Visualize Importance","8d27ac1d":"# Yacht Hydrodynamics","b9dc7774":"### Attribute Information:\n#### Variations concern hull geometry coefficients and the Froude number:\n\n* Longitudinal position of the center of buoyancy [LC], adimensional.\n* Prismatic coefficient [PC], adimensional.\n* Length-displacement ratio [L\/D], adimensional.\n* Beam-draught ratio [B\/Dr], adimensional.\n* Length-beam ratio [L\/B], adimensional.\n* Froude number [Fr], adimensional.\n\n#### The measured variable is the residuary resistance per unit weight of displacement:\n\n* Residuary resistance per unit weight of displacement [Rr], adimensional."}}