{"cell_type":{"813d45ec":"code","37111bbe":"code","738812a5":"code","77d1bc82":"code","af5b239f":"code","e9d67779":"code","eeae32fb":"code","ecd5f8a3":"code","48065d9c":"code","b95e68ef":"code","d783dc0c":"code","e9d951c1":"code","4a4d556f":"code","2ab0c942":"code","a34c5fac":"code","cfa0b806":"code","3f1060a7":"code","5a488e16":"code","a2e21aa8":"code","d255b7e8":"code","84fddf7e":"code","812d2ae8":"code","a2562abf":"code","e53d83a8":"code","20bdbfde":"code","b16bee6e":"code","59ac6810":"code","b7d8ef66":"code","5b24cc75":"code","07c71778":"code","4723b160":"code","a67ab8bb":"code","03e47106":"code","c061c056":"code","837fe2df":"code","fb99d789":"code","f7668054":"code","097dbf81":"code","e3522c36":"code","2909ae4f":"markdown","00de7924":"markdown","ceba9e77":"markdown","b6fb866a":"markdown","c520ba19":"markdown","4101dcd7":"markdown","6c672dc9":"markdown","d37dbd3e":"markdown","9bbacadb":"markdown","dca6287e":"markdown","427c12e1":"markdown","ace6bc64":"markdown","464bb7f9":"markdown","7030890a":"markdown","feef51e0":"markdown","be11c85b":"markdown","5d1efd12":"markdown"},"source":{"813d45ec":"###\n# yfinance is natively available on neither Colab nor Kaggle\n# So, we need to install the package\n!pip install yfinance\n###","37111bbe":"import pandas\npandas.options.display.float_format = '{:,.4f}'.format\nimport matplotlib.pyplot as plt\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","738812a5":"###\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport datetime as dt\nimport yfinance as yf\n\n# find the symbol (i.e., google the instrument + \"yahoo finance\") to any data series you are interested at \n# e.g., market\/sector index ETF for your chosen country and various asset classes (e.g., Comex Gold's symbol is \"GC=F\")\n#symbols_list = [\"BTC-USD\"]\n\n#symbols_list = [\"INX\"]\n\nstart = dt.datetime(2020,1,1)\nend = dt.datetime(2020,11,8)\n#asset = yf.download(symbols_list, start=start, end=end)\n\nSGD_per_USD = yf.download(\"SGD=X\", start=start, end=end)\nMYR_per_USD = yf.download(\"MYR=X\", start=start, end=end)\nHKD_per_USD = yf.download(\"HKD=X\", start=start, end=end)\n\n\n\n\n\nkimly = yf.download(\"1D0.SI\", start=start, end=end)\nkimly['Adj Close'] = kimly['Adj Close'] \/ SGD_per_USD['Adj Close']\nkimly['Return'] = kimly['Adj Close'].pct_change()\nkimly = kimly [1:]\nkimly = kimly[[\"Adj Close\"]] \n\nneo = yf.download(\"5UJ.SI\", start=start, end=end)\nneo['Adj Close'] = neo['Adj Close'] \/ SGD_per_USD['Adj Close']\nneo['Return'] = neo['Adj Close'].pct_change()\nneo = neo [1:]\nneo = neo[[\"Adj Close\"]] \n\nshengsiong = yf.download(\"OV8.SI\", start=start, end=end)\nshengsiong['Adj Close'] = shengsiong['Adj Close'] \/ SGD_per_USD['Adj Close']\nshengsiong['Return'] = shengsiong['Adj Close'].pct_change()\nshengsiong = shengsiong [1:]\nshengsiong = shengsiong[[\"Adj Close\"]] \n\nQAF= yf.download(\"Q01.SI\", start=start, end=end)\nQAF['Adj Close'] = QAF['Adj Close'] \/ SGD_per_USD['Adj Close']\nQAF['Return'] = QAF['Adj Close'].pct_change()\nQAF = QAF [1:]\nQAF = QAF[[\"Adj Close\"]] \n\nthaibeverage = yf.download(\"Y92.SI\", start=start, end=end)\nthaibeverage['Adj Close'] = thaibeverage['Adj Close'] \/ SGD_per_USD['Adj Close']\nthaibeverage['Return'] = thaibeverage['Adj Close'].pct_change()\nthaibeverage = thaibeverage [1:]\nthaibeverage = thaibeverage[[\"Adj Close\"]] \n\nhanwell = yf.download(\"DM0.SI\", start=start, end=end)\nhanwell['Adj Close'] = hanwell['Adj Close'] \/ SGD_per_USD['Adj Close']\nhanwell['Return'] = hanwell['Adj Close'].pct_change()\nhanwell = hanwell [1:]\nhanwell = hanwell[[\"Adj Close\"]]\n\nfrasers = yf.download(\"J69U.SI\", start=start, end=end)\nfrasers['Adj Close'] = frasers['Adj Close'] \/ SGD_per_USD['Adj Close']\nfrasers['Return'] = frasers['Adj Close'].pct_change()\nfrasers = frasers [1:]\nfrasers = frasers[[\"Adj Close\"]]\n\nsinpost = yf.download(\"S08.SI\", start=start, end=end)\nsinpost['Adj Close'] = sinpost['Adj Close'] \/ SGD_per_USD['Adj Close']\nsinpost['Return'] = sinpost['Adj Close'].pct_change()\nsinpost = sinpost [1:]\nsinpost = sinpost[[\"Adj Close\"]]\n\nkeppel = yf.download(\"AJBU.SI\", start=start, end=end)\nkeppel['Adj Close'] = keppel['Adj Close'] \/ SGD_per_USD['Adj Close']\nkeppel['Return'] = keppel['Adj Close'].pct_change()\nkeppel = keppel [1:]\nkeppel = keppel[[\"Adj Close\"]]\n\nmapletree = yf.download(\"ME8U.SI\", start=start, end=end)\nmapletree['Adj Close'] = mapletree['Adj Close'] \/ SGD_per_USD['Adj Close']\nmapletree['Return'] = mapletree['Adj Close'].pct_change()\nmapletree = mapletree [1:]\nmapletree = mapletree[[\"Adj Close\"]]\n\nwayfair = yf.download(\"W\", start=start, end=end)\nwayfair['Return'] = wayfair['Adj Close'].pct_change()\nwayfair = wayfair [1:]\nwayfair = wayfair[[\"Adj Close\"]]\n\nazn = yf.download(\"AZN\", start=start, end=end)\nazn['Return'] = azn['Adj Close'].pct_change()\nazn = azn [1:]\nazn = azn[[\"Adj Close\"]]\n\nmrna = yf.download(\"MRNA\", start=start, end=end)\nmrna['Return'] = mrna['Adj Close'].pct_change()\nmrna = mrna [1:]\nmrna = mrna[[\"Adj Close\"]]\n\nuniongas = yf.download(\"1F2.SI\", start=start, end=end)\nuniongas['Adj Close'] = uniongas['Adj Close'] \/ SGD_per_USD['Adj Close']\nuniongas['Return'] = uniongas['Adj Close'].pct_change()\nuniongas = uniongas [1:]\nuniongas = uniongas[[\"Adj Close\"]] \n\nrs = yf.download(\"AP4.SI\", start=start, end=end)\nrs['Adj Close'] = rs['Adj Close'] \/ SGD_per_USD['Adj Close']\nrs['Return'] = rs['Adj Close'].pct_change()\nrs = rs [1:]\nrs = rs[[\"Adj Close\"]] \n\ntopglove = yf.download(\"BVA.SI\", start=start, end=end)\ntopglove['Adj Close'] = topglove['Adj Close'] \/ SGD_per_USD['Adj Close']\ntopglove['Return'] = topglove['Adj Close'].pct_change()\ntopglove = topglove [1:]\ntopglove = topglove[[\"Adj Close\"]] \n\npropnex = yf.download(\"OYY.SI\", start=start, end=end)\npropnex['Adj Close'] = propnex['Adj Close'] \/ SGD_per_USD['Adj Close']\npropnex['Return'] = propnex['Adj Close'].pct_change()\npropnex = propnex [1:]\npropnex = propnex[[\"Adj Close\"]] \n\npfizer = yf.download(\"PFE\", start=start, end=end)\npfizer['Return'] = pfizer['Adj Close'].pct_change()\npfizer = pfizer [1:]\npfizer = pfizer[[\"Adj Close\"]]\n\nsea = yf.download(\"SE\", start=start, end=end)\nsea['Return'] = sea['Adj Close'].pct_change()\nsea = sea [1:]\nsea = sea[[\"Adj Close\"]]\n\nspy = yf.download(\"SPY\", start=start, end=end)\nspy['Return'] = spy['Adj Close'].pct_change()\nspy = spy [1:]\nspy = spy[[\"Adj Close\"]]\n\nsti = yf.download(\"ES3.SI\", start=start, end=end)\nsti['Adj Close'] = sti['Adj Close'] \/ SGD_per_USD['Adj Close']\nsti['Return'] = sti['Adj Close'].pct_change()\nsti = sti [1:]\nsti = sti[[\"Adj Close\"]]","77d1bc82":"\n\nstocks = pandas.concat([kimly,neo,shengsiong,QAF,thaibeverage,hanwell,frasers,sinpost,keppel,mapletree,wayfair,azn,mrna,uniongas,rs,topglove,propnex,pfizer,sea,spy], axis=1)\n\nstocks.columns = ['kimly','neo','shengsiong','QAF','thaibeverage','hanwell','frasers','sinpost','keppel','mapletree','wayfair','azn','mrna','uniongas','rs','topglove','propnex','pfizer','sea','spy']\nportfolio = [kimly,neo,shengsiong,QAF,thaibeverage,hanwell,frasers,sinpost,keppel,mapletree,wayfair,azn,mrna,uniongas,rs,topglove,propnex,pfizer,sea,spy]\n\nname = ['kimly','neo','shengsiong','QAF','thaibeverage','hanwell','frasers','sinpost','keppel','mapletree','wayfair','azn','mrna','uniongas','rs','topglove','propnex','pfizer','sea','spy']\nstocks = stocks.fillna(method='ffill')","af5b239f":"for index, stock in enumerate(portfolio):\n    stock['normalized_retuns'] = stock['Adj Close']\/stock.iloc[0]['Adj Close']","e9d67779":"for stock, allocation in zip(portfolio, [.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,.05,]):\n    stock['allocation'] = stock['normalized_retuns']*allocation","eeae32fb":"capital = 100000000\n\nfor index, stock in enumerate(portfolio):\n    stock['position_'+str(name[index])] = stock.allocation*capital","ecd5f8a3":"portfolio_positions = pandas.concat([kimly.position_kimly,\n                                    neo.position_neo,\n                                    shengsiong.position_shengsiong,\n                                    QAF.position_QAF,\n                                    thaibeverage.position_thaibeverage,\n                                    hanwell.position_hanwell,\n                                    frasers.position_frasers,\n                                    sinpost.position_sinpost,\n                                    keppel.position_keppel,\n                                    mapletree.position_mapletree,\n                                    wayfair.position_wayfair,\n                                    azn.position_azn,\n                                    mrna.position_mrna,\n                                    uniongas.position_uniongas,\n                                    rs.position_rs,\n                                    topglove.position_topglove,\n                                    propnex.position_propnex,\n                                    pfizer.position_pfizer,\n                                    sea.position_sea,\n                                    spy.position_spy,\n                                    ]\n                                   , axis=1)","48065d9c":"portfolio_positions = portfolio_positions.fillna(method='ffill')\nportfolio_positions['total_position']= portfolio_positions.sum(axis=1)","b95e68ef":"portfolio_positions.head()","d783dc0c":"sti['normalized_retuns'] = sti['Adj Close']\/sti.iloc[0]['Adj Close']\nsti['position_sti'] = sti['normalized_retuns']*capital\nsti.head() ","e9d951c1":"portfolio_positions.total_position.plot(figsize=(12,8), lw=1.8, c='blue');\nsti['position_sti'].plot(figsize=(12,8), lw=1.8, c='red');\nplt.title('Total Positions');","4a4d556f":"portfolio_positions.drop('total_position', axis=1).plot(figsize=(12,8), lw=1);\nplt.title('Individual Positions');","2ab0c942":"portfolio_positions['daily_return'] = portfolio_positions.total_position.pct_change(1)\nportfolio_positions.head()","a34c5fac":"Rp = portfolio_positions.daily_return.mean()","cfa0b806":"std = portfolio_positions.daily_return.std()","3f1060a7":"portfolio_positions.daily_return.plot(kind='hist', bins=200, figsize=(12,8));","5a488e16":"cumulative_return = (portfolio_positions.total_position[-1]\/portfolio_positions.total_position[0]-1)*100","a2e21aa8":"Rf=0.01\nRp = portfolio_positions.daily_return.mean() *252\nVolatitily = portfolio_positions.daily_return.std() * 252 ** 0.5\nSR = (Rp-Rf)\/Volatitily\n\nSR","d255b7e8":"stocks.head()","84fddf7e":"## mean returns\npandas.options.display.float_format = '{:,.6f}'.format\nstocks.pct_change(1).mean()","812d2ae8":"## lets see correlation between stock returns\nstocks.pct_change(1).corr()","a2562abf":"log_returns = np.log(stocks\/stocks.shift(1))\nlog_returns.head()","e53d83a8":"log_returns.hist(bins=150, figsize=(10,10));","20bdbfde":"log_returns.cov() # daily ","b16bee6e":"log_returns.cov() * 252 # annualized ","59ac6810":"log_returns.mean()","b7d8ef66":"np.random.seed(42)\nprint(stocks.columns)\nw= np.random.random(20)\nw = w \/np.sum(w)\nw","5b24cc75":"# expected weighted return Rp = [r1,r2.....][w1,w2......].T\nRp = (log_returns.mean()*252*w).sum()\nRp","07c71778":"#from IPython.display import Image\n#Image(filename='image.GIF') \n#Unable to Run this","4723b160":"# expected volatily\nvariance = np.dot(w.T, np.dot(log_returns.cov()*252,w))  # 252 trading days\nvolatility = variance**.5","a67ab8bb":"# sharpe ratio\nRf=0.01\nSR = (Rp-Rf)\/volatility\nSR","03e47106":"np.random.seed(42)\n\nn=5000 # total portfolios\n# w-weights, Rp-daily returns  \nW = np.zeros((n,len(stocks.columns))) \nRp = np.zeros(n)\nRf=0.01\nstd = np.zeros(n)\nSR = np.zeros(n)\n    \nfor i in range(n):\n    w= np.random.random(20)\n    w = w \/np.sum(w)        \n    W[i,:] = w\n    \n    Rp[i] = (log_returns.mean()*252*w).sum()        \n    std[i] = np.sqrt(np.dot(w.T, np.dot(log_returns.cov()*252,w)))\n        \n    SR[i] = (Rp[i]-Rf)\/std[i]\n        \nRp_montecarlo = Rp.copy()   \nstd_montecarlo = std.copy()\nSR_montecarlo = SR.copy()","c061c056":"SR_max = SR.max()\nSR_max","837fe2df":"W","fb99d789":"SR_max_index = SR.argmax() # index location of max element in the numpy array\nSR_max_index","f7668054":"W[SR_max_index,:] # optimum allocation ","097dbf81":"SR","e3522c36":"fig, ax = plt.subplots(figsize=(12,8))\nplt.scatter(std,Rp, c=SR,edgecolors='white');\nplt.colorbar(label='Sharpe ratio');\nplt.xlabel('std');\nplt.ylabel('expected returns');\nplt.scatter(std[SR_max_index], Rp[SR_max_index], c='r', s=50);","2909ae4f":"****Sharpe ratio****","00de7924":"**cumulative return**","ceba9e77":"https:\/\/finpy.org\/2019-07-22-portfolio-allocation-optimization-with-python\/#cumulative-returns","b6fb866a":"mean daily returns","c520ba19":"daily standard deviation \/ volatility","4101dcd7":"**efficient frontier**","6c672dc9":"**log returns**","d37dbd3e":"**Total Position**","9bbacadb":"**efficient frontier**","dca6287e":"**Portfolio allocations**","427c12e1":"**Total positions**","ace6bc64":"**simulation of 5000 portfolio with random weights allocated**","464bb7f9":"**plot periodical positions**","7030890a":"**paiwise covarience of log returns**","feef51e0":"sharpe ratio > 1 means the portfolio has out performed the market","be11c85b":"**sharpe ratio**","5d1efd12":"**Individual Positions**"}}