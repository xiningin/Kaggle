{"cell_type":{"b88f1a0b":"code","96508074":"code","827c8cdf":"code","41919c00":"code","05e3817f":"code","386c9bdc":"code","be7a46ed":"code","f849bc5b":"code","2b69e9c7":"code","ad7a4bbc":"code","abbd0245":"code","d4aa7d2c":"code","527cde77":"code","98e24a21":"code","20a04690":"code","9188cdbb":"code","487d61b7":"code","a095a926":"code","cf25e0a3":"code","c62da345":"code","bce7cd8c":"code","c2efb04d":"markdown","c7e79708":"markdown","ddff5bf7":"markdown","fbaa8a07":"markdown","590a8705":"markdown","4ae75487":"markdown","fd7599f2":"markdown","c4bc43c7":"markdown","2c109763":"markdown","31b27284":"markdown","04a593cc":"markdown","e1e90bef":"markdown","bde632a1":"markdown"},"source":{"b88f1a0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","96508074":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport pycountry\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)\n%matplotlib inline","827c8cdf":"path = '..\/input\/covid19-global-forecasting-week-4\/'\nos.listdir(path)","41919c00":"data = pd.read_csv(path + \"train.csv\")\ndata.head()","05e3817f":"data.info()","386c9bdc":"subset_by_max_date = data[data['Date'] == data['Date'].max()]\nsubset_by_max_date.head()","be7a46ed":"country_wise_case = subset_by_max_date.groupby(by = 'Country_Region')['ConfirmedCases'].agg([np.sum]).reset_index().\\\nrename(columns = {'Country_Region': 'Country', 'sum': 'confirmed'})\ncountry_wise_case.head()","f849bc5b":"X = country_wise_case['Country'].values\nY = country_wise_case['confirmed'].values\nbar = go.Bar(x = Y, y = X, marker=dict(color=Y, colorscale='Reds', showscale=True), orientation = 'h')\nlayout = go.Layout(title = dict(text = 'Total no of confirmed cases country wise', x = 0.5), \n                   yaxis = dict(title = \"Countries\"),\n                   xaxis = dict(title = \"Confirmed Case\"), height = 1500)\nfig = go.Figure(data=[bar], layout = layout)\npy.iplot(fig)","2b69e9c7":"country_wise_case.sort_values('confirmed', ascending = False, inplace = True)\nX = country_wise_case['Country'].values[:20]\nY = country_wise_case['confirmed'].values[:20]\nbar = go.Bar(x = X, y = Y, marker = dict(color = Y, colorscale = 'Reds', showscale = True))\nlayout = go.Layout(title = dict(text = \"Top 20 countries with most confirmed cases\", x = 0.3), \n                   yaxis = dict(title = 'Confirmed Cases'), \n                  xaxis = dict(title = 'Country Names'))\nfig = go.Figure(data = [bar], layout = layout)\npy.iplot(fig)","ad7a4bbc":"usa = data[data['Country_Region'] == 'US']\nusa.head()","abbd0245":"# No null column\nusa.info()","d4aa7d2c":"province_wise_case = usa.groupby(by = 'Province_State')['ConfirmedCases'].agg([np.max]).reset_index()\\\n                        .rename(columns = {'Province_State': 'Province', 'amax':'Confirmed'}).sort_values('Confirmed', ascending = False)","527cde77":"labels = province_wise_case['Province'].values[:10]\nvalues = province_wise_case['Confirmed'].values[:10]\npie = go.Pie(labels = labels, values = values, name = \"Provinces\", \n             hole = 0.4, domain = {'x': [0, 0.5]})\nlayout = dict(title = dict(text = 'Province wise distribution', x = 0.3, xanchor = 'center', yanchor = 'top'), \n              legend = dict(orientation = 'h'), \n              annotations = [dict(x = 0.2, y = 0.5, text='Provinces', showarrow=False, font=dict(size=20))])\nfig = go.Figure(data = [pie], layout = layout)\npy.iplot(fig)","98e24a21":"new_york = usa[usa['Province_State'] == 'New York']\nnew_york.head()","20a04690":"X = new_york['Date']\nY_confirm = new_york['ConfirmedCases']\nY_death = new_york['Fatalities']\nline_confirm = go.Scatter(x = X, y = Y_confirm, mode = \"lines+markers\", \n                          name = \"Confirmed\", line = dict(color = 'firebrick', width = 4))\nline_death = go.Scatter(x = X, y = Y_death, mode = \"lines\", \n                        name = \"Fatalities\", line = dict(color = 'royalblue', width = 2))\n\nlayout = dict(title = dict(text = 'Growth Line Graph of confirmed cases and fatalities in NY', x = 0.2), \n              xaxis = dict(title = \"Days\"),\n              yaxis = dict(title = \"People\"))\n\nfig = go.Figure(data = [line_confirm, line_death], layout = layout)\npy.iplot(fig)","9188cdbb":"X = new_york['Date']\nY_confirm = np.log10(new_york['ConfirmedCases'].values + 1)\nY_death = np.log10(new_york['Fatalities'].values + 1)\nline_confirm = go.Scatter(x = X, y = Y_confirm, mode = \"lines+markers\", \n                          name = \"Confirmed\", line = dict(color = 'firebrick', width = 4))\nline_death = go.Scatter(x = X, y = Y_death, mode = \"lines\", \n                        name = \"Fatalities\", line = dict(color = 'royalblue', width = 2))\n\nlayout = dict(title = dict(text = 'Growth Line Graph of confirmed cases and fatalities in NY (on log scale)', x = 0.2), \n              xaxis = dict(title = \"Days\"),\n              yaxis = dict(title = \"People\"))\n\nfig = go.Figure(data = [line_confirm, line_death], layout = layout)\npy.iplot(fig)","487d61b7":"country_wise_death = subset_by_max_date.groupby(by = 'Country_Region')['Fatalities'].agg([np.sum]).reset_index().\\\nrename(columns = {'Country_Region': 'Country', 'sum': 'Deaths'})\ncountry_wise_death.head()","a095a926":"X = country_wise_death['Country'].values\nY = country_wise_death['Deaths'].values\nbar = go.Bar(x = Y, y = X, marker=dict(color=Y, colorscale='Reds', showscale=True), orientation = 'h')\nlayout = go.Layout(title = 'Total no of Deaths country wise', yaxis = dict(title = \"Countries\"),\n                   xaxis = dict(title = \"Deaths\"), height = 1500)\nfig = go.Figure(data=[bar], layout = layout)\npy.iplot(fig)","cf25e0a3":"country_wise_death.sort_values('Deaths', ascending = False, inplace = True)\nX = country_wise_death['Country'].values[:20]\nY = country_wise_death['Deaths'].values[:20]\nbar = go.Bar(x = X, y = Y, marker = dict(color = Y, colorscale = 'Reds', showscale = True))\nlayout = go.Layout(title = \"Top 20 countries with most Deaths\", yaxis = dict(title = 'Deaths'), \n                  xaxis = dict(title = 'Country Names'))\nfig = go.Figure(data = [bar], layout = layout)\npy.iplot(fig)","c62da345":"province_wise_case = usa.groupby(by = 'Province_State')['Fatalities'].agg([np.max]).reset_index()\\\n                        .rename(columns = {'Province_State': 'Province', 'amax':'Deaths'}).sort_values('Deaths', ascending = False)","bce7cd8c":"labels = province_wise_case['Province'].values[:10]\nvalues = province_wise_case['Deaths'].values[:10]\npie = go.Pie(labels = labels, values = values, name = \"Provinces\", \n             hole = 0.4, domain = {'x': [0, 0.5]})\nlayout = dict(title = dict(text = 'Province wise distribution', x = 0.3, xanchor = 'center', yanchor = 'top'), \n              legend = dict(orientation = 'h'), \n              annotations = [dict(x = 0.2, y = 0.5, text='Provinces', showarrow=False, font=dict(size=20))])\nfig = go.Figure(data = [pie], layout = layout)\npy.iplot(fig)","c2efb04d":"## Since the plot is not much visible let's focus on only top 20 countries with most Deaths","c7e79708":"# Importing Necessary libraries","ddff5bf7":"## USA has the most confirmed cases\n\n### Let's Focus more on USA","fbaa8a07":"## Similarly Let's Check for fatalities","590a8705":"### Let's check for Top 10 Province wise distribution","4ae75487":"## Let's check the growth rate of confirmed cases and death rate in New York","fd7599f2":"## Rate of spread is exponential whereas rate of fatalities is almost linear\n\n### Let's check it on log scale","c4bc43c7":"## Not suprisingly USA has more deaths as well\n\n### Let's Focus more on Provinces","2c109763":"## New York has much more death rate as compared to other provinces","31b27284":"* ## Plotting countries with confirmed cases","04a593cc":"### Let's check for Top 10 Province wise distribution","e1e90bef":"## Since the plot is not much visible let's focus on only top 20 countries with most confirmed cases","bde632a1":"## The most affected state turned out to be new york"}}