{"cell_type":{"39e2360d":"code","79d0f4ea":"code","790e3460":"code","7b6817da":"code","7f49de50":"code","87e33ed2":"code","a6da1360":"code","1b4c754e":"code","c2ab9d5e":"code","425060d2":"code","ae2f367f":"code","92df76ee":"code","d5e1c555":"code","1f2cece3":"code","41f1bf88":"code","2afaa8a9":"code","57ff074b":"code","f5364477":"code","4c89729b":"code","b45a101f":"code","762ceaa4":"code","850693d5":"code","238a648e":"code","a3b2e09b":"code","c77b8183":"code","aebdfd98":"code","c94cbd01":"code","85495fa4":"code","67d4a6da":"code","69f04502":"code","902d735e":"code","30237f20":"code","0c0b3485":"code","e8ae133c":"code","5d839ec7":"code","9c8e9e81":"code","cc1b1837":"code","63580550":"code","440b4cce":"markdown","4ad30bb9":"markdown","de78f99e":"markdown","f7881a82":"markdown","ce521f95":"markdown","2344cafc":"markdown","eb3b2362":"markdown","33b03a36":"markdown","94735b4d":"markdown","b0bd53b8":"markdown","94437bb5":"markdown","a17d95d8":"markdown","311c4ad8":"markdown","482e8180":"markdown","3e6f35eb":"markdown","df7a8282":"markdown","a5f16a05":"markdown","4fd67263":"markdown","84b89e6c":"markdown","4f89c596":"markdown","04bcc136":"markdown","62a905b8":"markdown","5d8e3d56":"markdown","f4bf7868":"markdown","a0a569ea":"markdown","bb85cfd9":"markdown","71c97dcd":"markdown","e950feae":"markdown","2341c42d":"markdown","b028d5ad":"markdown","61e203d4":"markdown","8ca227ce":"markdown","3fc21bfd":"markdown","689771bd":"markdown","f363b53a":"markdown","42f56b63":"markdown","6792bfb2":"markdown","7e0ec3d3":"markdown","25ddd1d0":"markdown"},"source":{"39e2360d":"COMPUTE_CV = False #\u306a\u304b\u306a\u304b\u3059\u3054\u3044\u3067\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u3063\u3066\u3042\u308b\u7a0b\u5ea6\u3001\u8907\u6570\u306e\u8ab2\u984c\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\nEDA_DEMO = False\nALL_BLENDED = False\nBASELINE_HELPING = False\nMATCH_ONLY = False\nMLM_ONLY = False\nKEN_MATCHING = True\nBS_CLEANING = False\nTHEO_MERGE = False\nSEED = 40 #\u7e01\u8d77\u304c\u60aa\u3044\u6570\u5b57\u3060\u3063\u305f\u306e\u3067\u5909\u3048\u3066\u307f\u308b","79d0f4ea":"!pip install datasets --no-index --find-links=file:\/\/\/kaggle\/input\/coleridge-packages\/packages\/datasets #\u3053\u308c\u3092\u3084\u308b\u3068\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3092\u307f\u306b\u3044\u304b\u306a\u304f\u306e\u308b\u306e\u304b\u306a\uff1f\n!pip install ..\/input\/coleridge-packages\/seqeval-1.2.2-py3-none-any.whl\n!pip install ..\/input\/coleridge-packages\/tokenizers-0.10.1-cp37-cp37m-manylinux1_x86_64.whl\n!pip install ..\/input\/coleridge-packages\/transformers-4.5.0.dev0-py3-none-any.whl\n\nfrom IPython.display import clear_output\nclear_output()","790e3460":"import os\nimport re\nimport json\nimport time\nimport random\nimport glob\nimport importlib\n\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm.autonotebook import tqdm\n\nimport torch\nfrom datasets import load_dataset\nfrom transformers import AutoTokenizer, DataCollatorForLanguageModeling, \\\nAutoModelForMaskedLM, Trainer, TrainingArguments, pipeline\n\nfrom typing import List\nimport string\nfrom functools import partial\nimport warnings\nwarnings.filterwarnings(\"ignore\", 'This pattern has match groups')\n\nrandom.seed(SEED)\nnp.random.seed(SEED)\ntorch.manual_seed(SEED)\ntorch.backends.cudnn.deterministic = True #torch.backends.cudnn.deterministic = True \u3068\u3059\u308b\u3068\u6c7a\u5b9a\u8ad6\u7684\u632f\u308b\u821e\u3044\u3092\u3059\u308b\u3089\u3057\u3044\u3067\u3059\u3002\ntorch.backends.cudnn.benchmark = False # torch.backends.cudnn.benchmark = True \u306f\u3053\u3053\u66f0\u304f\u3001CNN\u306e\u69d8\u306binput_size\u304c\u56fa\u5b9a\u306a\u3089\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u308b\u3089\u3057\u3044\n\nsample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\nif len(sample_submission) > 4: COMPUTE_CV = False\nif COMPUTE_CV: \n    print('this submission notebook will compute CV score but commit notebook will not')\nelse:\n    print('this submission notebook will only be used to submit result')","7b6817da":"train_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train.csv'\ntrain_files_path = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\ntrain = pd.read_csv(train_path)\n\nif COMPUTE_CV: \n    sample_submission = train\n    paper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/train'\n    test_files_path = paper_test_folder\nelse: #\u3053\u3061\u3089\u304c\u52d5\u304f\n    sample_submission = pd.read_csv('..\/input\/coleridgeinitiative-show-us-the-data\/sample_submission.csv')\n    paper_test_folder = '..\/input\/coleridgeinitiative-show-us-the-data\/test'\n    test_files_path = paper_test_folder\nadnl_govt_labels_path = '..\/input\/govt-dataset-list\/data_set_800.csv'","7f49de50":"train","87e33ed2":"papers = {}\nfor paper_id in tqdm(sample_submission['Id']):\n    with open(f'{paper_test_folder}\/{paper_id}.json', 'r') as f:\n        paper = json.load(f)\n        papers[paper_id] = paper","a6da1360":"if EDA_DEMO:\n    df_input = pd.DataFrame(columns=['id','section_title','text','data_label'])\n    for id in tqdm(train['Id'].values):\n        df=pd.read_json('..\/input\/coleridgeinitiative-show-us-the-data\/train\/{}.json'.format(id))   \n        #train\u306eid\u306f\u540c\u3058\u3082\u306e\u304c\u8907\u6570\u3042\u308b\u306e\u3067\u305d\u308c\u3092\u307e\u3068\u3081\u3066\u3001\u305d\u3057\u3066dataset_label\u304c\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u63a2\u3059\u3002\n        for data_label in train[train['Id']==id]['dataset_label'].values:        \n            new_df=df[df['text'].str.contains(data_label)].copy(deep=True) #json\u30d5\u30a1\u30a4\u30eb\u306e'text'\u306b train\u306edatalabel\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u30b3\u30d4\u30fc\u3059\u308b\n            new_df.loc[:,['data_label']] = data_label\n            new_df.loc[:,['id']] = id\n            new_df.reset_index(inplace=True,drop=True)\n            df_input=pd.concat([df_input, new_df], ignore_index=True)\n            df_input.reset_index(inplace=True,drop=True)\nelse: df_input = None\n    \n#train\ndf_input","1b4c754e":"train[train['Id']==id]['dataset_label'].values #train id\u306f\u540c\u3058\u3060\u304cdataset_label\u306f\u7570\u306a\u308b\u3002","c2ab9d5e":"if EDA_DEMO: df_input = df_input[ df_input['section_title'] != '' ]\n\ndf_input","425060d2":"all_labels = set()\n\nfor label_1, label_2, label_3 in train[['dataset_title', 'dataset_label', 'cleaned_label']].itertuples(index=False):\n    all_labels.add(str(label_1).lower())\n    all_labels.add(str(label_2).lower())\n    all_labels.add(str(label_3).lower())\n    \nprint(f'No. different labels: {len(all_labels)}')","ae2f367f":"a=0\nfor i in all_labels:\n    print(i)\n    a+=1\n    if a==10:\n        break","92df76ee":"adnl_govt_labels = pd.read_csv(adnl_govt_labels_path)\n\nfor l in adnl_govt_labels.title:\n    \n  all_labels.add(l)\nprint(f'No. different labels: {len(all_labels)}')","d5e1c555":"add_labels = open('..\/input\/jelaladdtxt\/data.txt', 'r')\ndata = add_labels.read()\n#add_labels.close()\n\n\nfor l in data:\n    all_labels.add(l)\n    \nall_labels = set(all_labels)\nprint(f'No. different labels: {len(all_labels)}')","1f2cece3":"def clean_text(txt):\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower()).strip()\n\n\ndef totally_clean_text(txt):\n    txt = clean_text(txt)\n    txt = re.sub(' +', ' ', txt)\n    return txt\n\nif not BS_CLEANING:\n    def text_cleaning(text):\n        '''\n        \u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3001\u7279\u6b8a\u6587\u5b57\u3001\u7d75\u6587\u5b57\u3001\u8907\u6570\u306e\u30b9\u30da\u30fc\u30b9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8 - \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u306a\u6587\n        '''\n        text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n        text = re.sub(' +', ' ', text)\n        emoji_pattern = re.compile(\"[\"\n                                   u\"\\U0001F600-\\U0001F64F\"  # \u9854\u6587\u5b57\n                                   u\"\\U0001F300-\\U0001F5FF\"  # \u8a18\u53f7\u3068\u7d75\u6587\u5b57\n                                   u\"\\U0001F680-\\U0001F6FF\"  # \u4ea4\u901a\u53ca\u3073\u5730\u56f3\u8a18\u53f7\n                                   u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                                   \"]+\", flags=re.UNICODE)\n        text = emoji_pattern.sub(r'', text)\n        return text\nelse:\n    def text_cleaning(text):\n        '''\n        \u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3001\u7279\u6b8a\u6587\u5b57\u3001\u7d75\u6587\u5b57\u3001\u8907\u6570\u306e\u30b9\u30da\u30fc\u30b9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8 - \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u306a\u6587\n        '''\n        text = ''.join([k for k in text if k not in string.punctuation])\n        text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n        # text = re.sub(\"\/'+\/g\", ' ', text)\n        return text\n\n\ndef read_json_pub(filename, train_data_path=train_files_path, output='text'):\n    json_path = os.path.join(train_data_path, (filename+'.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title'))\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data","41f1bf88":"if not KEN_MATCHING and not MLM_ONLY: #\u52d5\u304b\u306a\u3044\n    literal_preds = []\n    for paper_id in tqdm(sample_submission['Id']):\n        paper = papers[paper_id]\n        text_1 = '. '.join(section['text'] for section in paper).lower()\n        text_2 = totally_clean_text(text_1)\n\n        labels = set()\n        for label in all_labels:\n            if label in text_1 or label in text_2:\n                labels.add(clean_text(label))\n\n        literal_preds.append('|'.join(labels))\n    literal_preds[:5]","2afaa8a9":"literal_preds = []\n\nif KEN_MATCHING and not MLM_ONLY:\n    literal_preds = []\n    to_append = []\n    for index, row in tqdm(sample_submission.iterrows()):\n        to_append = [row['Id'],'']\n        large_string = str(read_json_pub(row['Id'], test_files_path))\n        clean_string = text_cleaning(large_string)\n        #print(clean_string)\n        for index, row2 in adnl_govt_labels.iterrows():\n            query_string = str(row2['title'])\n            if query_string in clean_string:\n              #if query_string !='progress in international reading literacy study': @@\n                #print('+',query_string)\n                if to_append[1] != '' and clean_text(query_string) not in to_append[1]:\n                    to_append[1] = to_append[1] + '|' + clean_text(query_string)\n                if to_append[1] == '':\n                    to_append[1] = clean_text(query_string)\n        #print(to_append)\n        literal_preds.append(*to_append[1:])\n\nelif MLM_ONLY:\n    print('This kernel will only use MLM model to predict.')","57ff074b":"clean_text(query_string)","f5364477":"to_append[1]","4c89729b":"#literal_preds #\u3053\u308c\u3060\u3068\u3069\u3046\u306a\u308b\u3093\u3060\u308d\u3046\uff1f","b45a101f":"sample_submission['PredictionString'] = literal_preds\nsample_submission[['Id', 'PredictionString']].to_csv('submission2.csv', index=False)\n","762ceaa4":"if not MATCH_ONLY:\n    PRETRAINED_PATH = '..\/input\/coleridge-bert-mlmv4\/output-mlm\/checkpoint-48000' ##checkpoint-48000\u3092\u5909\u3048\u3066\u307f\u305f\u304c\u30b9\u30b3\u30a2\u304c\u304a\u3061\u305f\u306e\u3067\u3082\u3068\u306b\u3082\u3069\u3057\u307e\u3057\u305f\u3002\n    TOKENIZER_PATH = '..\/input\/coleridge-bert-mlmv4\/model_tokenizer'\n\n    MAX_LENGTH = 64\n    OVERLAP = 20\n\n    PREDICT_BATCH = 32 # GPU\u306e\u30e1\u30e2\u30ea\u4e0a\u3053\u306e\u3042\u305f\u308a\u304c\u9650\u754c\u304b\n\n    DATASET_SYMBOL = '$' # this symbol represents a dataset name\n    NONDATA_SYMBOL = '#' # this symbol represents a non-dataset name","850693d5":"if not MATCH_ONLY:\n    tokenizer = AutoTokenizer.from_pretrained(TOKENIZER_PATH, use_fast=True)\n    model = AutoModelForMaskedLM.from_pretrained(PRETRAINED_PATH)\n\n    mlm = pipeline( \n        'fill-mask', \n        model=model,\n        tokenizer=tokenizer,\n        device=0 if torch.cuda.is_available() else -1\n    )\n    \n#from transformers import AutoTokenizer, DataCollatorForLanguageModeling, \\   pipeline\u306ftransformers\u304b\u3089import\u3057\u3066\u3044\u308b\u3002\n#AutoModelForMaskedLM, Trainer, TrainingArguments, pipeline","238a648e":"def jaccard_similarity(s1, s2):\n    l1 = s1.split(\" \")\n    l2 = s2.split(\" \")    \n    intersection = len(list(set(l1).intersection(l2))) #intersection\u3067\u914d\u5217\u540c\u58eb\u306e\u91cd\u8907\u3092\u96c6\u5408\u3055\u305b\u308b\uff08\u7a4d\u96c6\u5408\uff09\u3000\u540c\u3058\u3082\u306e\u304c\u3042\u308c\u3070\u62bd\u51fa\u306e\u610f\u5473\u306e\u3088\u3046\u3067\u3059\u3002\n    union = (len(l1) + len(l2)) - intersection\n    return float(intersection) \/ union #\u3053\u308c\u3067\u4f55\u304c\u308f\u304b\u308b\u306e\u304b\uff1f\u985e\u4f3c\u6027\u304c\u308f\u304b\u308b\uff1f\n\ndef clean_paper_sentence(s):\n    \"\"\"\n   \u3053\u306e\u95a2\u6570\u306f\u3001\u57fa\u672c\u7684\u306b\u5c0f\u6587\u5b57\u306e\u306a\u3044 clean_text \u3067\u3059\u3002\n    \"\"\"\n    s = re.sub('[^A-Za-z0-9]+', ' ', str(s)).strip()\n    s = re.sub(' +', ' ', s)\n    return s\n\ndef shorten_sentences(sentences):\n    \"\"\"\n    MAX_LENGTH\u5358\u8a9e\u4ee5\u4e0a\u306e\u6587\u306f\u5206\u5272\u3055\u308c\u307e\u3059\n     \u91cd\u8907\u3057\u3066\u8907\u6570\u306e\u6587\u306b\u3002\n    \"\"\"\n    short_sentences = []\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > MAX_LENGTH:\n            for p in range(0, len(words), MAX_LENGTH - OVERLAP):\n                short_sentences.append(' '.join(words[p:p+MAX_LENGTH]))\n        else:\n            short_sentences.append(sentence)\n    return short_sentences\n\n#\u5909\u3048\u3066\u307f\u308b\nconnection_tokens = {'s', 'of', 'and', 'in', 'on', 'for', 'data', 'dataset'} #\u306a\u3093\u3067\u3053\u308c\u306b\u3057\u3066\u3044\u308b\uff1f\ud83d\udccc\n#connection_tokens= {'ourselves', 'hers','the','of','and','in', 'between', 'yourself', 'but', 'again','of', 'there', 'about', 'once', 'during', 'out', 'very', 'having', 'with', 'they', 'own', 'an', 'be', 'some', 'for', 'do', 'its', 'yours', 'such', 'into', 'of', 'most', 'itself', 'other', 'off', 'is', 's', 'am', 'or', 'who', 'as', 'from', 'him', 'each', 'the', 'themselves', 'until', 'below', 'are', 'we', 'these', 'your', 'his', 'through', 'don', 'nor', 'me', 'were', 'her', 'more', 'himself', 'this', 'down', 'should', 'our', 'their', 'while', 'above', 'both', 'up', 'to', 'ours', 'had', 'she', 'all', 'no', 'when', 'at', 'any', 'before', 'them', 'same', 'and', 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then', 'that', 'because', 'what', 'over', 'why', 'so', 'can', 'did', 'not', 'now', 'under', 'he', 'you', 'herself', 'has', 'just', 'where', 'too', 'only', 'myself', 'which', 'those', 'i', 'after', 'few', 'whom', 't', 'being', 'if', 'theirs', 'my', 'against', 'a', 'by', 'doing', 'it', 'how', 'further', 'was', 'here', 'than'}\n    \ndef find_mask_candidates(sentence):\n    \"\"\"\n   \u3000\u6307\u5b9a\u3055\u308c\u305f $sentence \u304b\u3089 Masked Dataset Modeling \u306e\u30de\u30b9\u30ad\u30f3\u30b0\u5019\u88dc\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n     \u5019\u88dc\u306f\u3001\u5c11\u306a\u304f\u3068\u3082 2 \u5358\u8a9e\u306e\u9023\u7d9a\u3059\u308b\u3082\u306e\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n     \u3053\u308c\u3089\u306e\u5404\u5358\u8a9e\u306f\u3001\u6700\u521d\u306e\u6587\u5b57\u304c\u5927\u6587\u5b57\u3067\u3042\u308b\u304b\u3001\u6b21\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002\n     \u63a5\u7d9a\u30ef\u30fc\u30c9 ($connection_tokens)\u3002 \u3055\u3089\u306b\u3001\u63a5\u7d9a\u306f\n     \u30c8\u30fc\u30af\u30f3\u306e\u6700\u521d\u3068\u6700\u5f8c\u306b\u51fa\u73fe\u3059\u308b\u3053\u3068\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n     \u30b7\u30fc\u30b1\u30f3\u30b9\u3002 \n    \"\"\"\n    def candidate_qualified(words):\n        while len(words) and words[0].lower() in connection_tokens: #\ud83d\udccc\n            words = words[1:]\n        while len(words) and words[-1].lower() in connection_tokens: #\ud83d\udccc\n            words = words[:-1]\n        \n        return len(words) >= 2\n    \n    candidates = []\n    \n    phrase_start, phrase_end = -1, -1 #-1\u304c\u5165\u3063\u3066\u308b\u3002\n    for id in range(1, len(sentence)):\n        word = sentence[id]\n        if word[0].isupper() or word in connection_tokens:\n            if phrase_start == -1:\n                phrase_start = phrase_end = id\n            else:\n                phrase_end = id\n        else:\n            if phrase_start != -1:\n                if candidate_qualified(sentence[phrase_start:phrase_end+1]):\n                    candidates.append((phrase_start, phrase_end))\n                phrase_start = phrase_end = -1\n    \n    if phrase_start != -1:\n        if candidate_qualified(sentence[phrase_start:phrase_end+1]):\n            candidates.append((phrase_start, phrase_end))\n    \n    return candidates","a3b2e09b":"if not MATCH_ONLY:\n    mask = mlm.tokenizer.mask_token\n    all_test_data = []\n    \n    for paper_id in tqdm(sample_submission['Id']):\n        # load paper\n        paper = papers[paper_id]\n\n        # extract sentences\n        sentences = set([clean_paper_sentence(sentence) for section in paper #\u4f5c\u3063\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308b\u3002\n                         for sentence in section['text'].split('.')\n                        ])\n        sentences = shorten_sentences(sentences) # \u4f5c\u3063\u305f\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u308b\u3002\n        sentences = [sentence for sentence in sentences if len(sentence) > 1] # length\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3060\u3051\u62bd\u51fa\u3002\uff11\u306f\u62bd\u51fa\u3057\u306a\u3044\u3002\n        sentences = [sentence for sentence in sentences if any(word in sentence.lower() for word in ['data', 'study'])] #\u5c0f\u6587\u5b57\u306b\u5909\u63db\n        sentences = [sentence.split() for sentence in sentences] # sentece\u3092split\u3067\u5206\u5272\u3057\u3066\u3044\u308b\u3002\n\n        # mask\n        test_data = []\n        for sentence in sentences:\n            for phrase_start, phrase_end in find_mask_candidates(sentence): \n                dt_point = sentence[:phrase_start] + [mask] + sentence[phrase_end+1:]\n                test_data.append((' '.join(dt_point), ' '.join(sentence[phrase_start:phrase_end+1]))) \n\n        all_test_data.append(test_data)","c77b8183":"mask ","aebdfd98":"sentences[0]","c94cbd01":"if not MATCH_ONLY:\n    pred_mlm_labels = []\n\n    for test_data in tqdm(all_test_data):\n        pred_bag = set()\n\n        if len(test_data):\n            texts, phrases = list(zip(*test_data))\n            mlm_pred = []\n            for p_id in range(0, len(texts), PREDICT_BATCH):\n                batch_texts = texts[p_id:p_id+PREDICT_BATCH]\n                batch_pred = mlm(list(batch_texts), targets=[f' {DATASET_SYMBOL}', f' {NONDATA_SYMBOL}'])\n\n                if len(batch_texts) == 1:\n                    batch_pred = [batch_pred]\n\n                mlm_pred.extend(batch_pred)\n\n            for (result1, result2), phrase in zip(mlm_pred, phrases):\n                if (result1['score'] > result2['score']*2 and result1['token_str'] == DATASET_SYMBOL) or\\\n                   (result2['score'] > result1['score']*2 and result2['token_str'] == NONDATA_SYMBOL):\n                    pred_bag.add(clean_text(phrase))\n\n        # filter labels by jaccard score \n        filtered_labels = []\n\n        for label in sorted(pred_bag, key=len, reverse=True): #jaccard_similarity\u304c0.75\u672a\u6e80\u3068\u306a\u3063\u3066\u3044\u308b\u3002\u306a\u305c\u3067\u3057\u3087\u3046\u3002\u8a55\u4fa1\u57fa\u6e96\u3069\u304a\u308a0.5\u306b\u3057\u3088\u3046\u3002@\n            if len(filtered_labels) == 0 or all(jaccard_similarity(label, got_label) < 0.5 for got_label in filtered_labels):\n                filtered_labels.append(label)\n\n        pred_mlm_labels.append('|'.join(filtered_labels))\n    \n    pred_mlm_labels[:5]","85495fa4":"pred_mlm_labels[:5]","67d4a6da":"def read_append_return(filename, train_files_path=train_files_path, output='text'):\n    \"\"\"\n    Function to read json file and then return the text data from them and append to the dataframe\n    \"\"\"\n    json_path = os.path.join(train_files_path, (filename+'.json'))\n    headings = []\n    contents = []\n    combined = []\n    with open(json_path, 'r') as f:\n        json_decode = json.load(f)\n        for data in json_decode:\n            headings.append(data.get('section_title')) #json\u306e\u5f62\u5f0f\u306f\u3001\u3053\u306e\u3068\u304a\u308a\u3002\n            contents.append(data.get('text'))\n            combined.append(data.get('section_title'))\n            combined.append(data.get('text'))\n    \n    all_headings = ' '.join(headings)\n    all_contents = ' '.join(contents)\n    all_data = '. '.join(combined)\n    \n    if output == 'text':\n        return all_contents\n    elif output == 'head':\n        return all_headings\n    else:\n        return all_data\n    \n    \ndef text_cleaning(text):\n    '''\n    \u3059\u3079\u3066\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u3001\u7279\u6b8a\u6587\u5b57\u3001\u7d75\u6587\u5b57\u3001\u8907\u6570\u306e\u30b9\u30da\u30fc\u30b9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u30c6\u30ad\u30b9\u30c8 - \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u304c\u5fc5\u8981\u306a\u6587\n    '''\n    text = ''.join([k for k in text if k not in string.punctuation])\n    text = re.sub('[^A-Za-z0-9]+', ' ', str(text).lower()).strip()\n    # text = re.sub(\"\/'+\/g\", ' ', text)\n    return text","69f04502":"if BASELINE_HELPING or ALL_BLENDED: #\u52d5\u3044\u3066\u306a\u3044\n    tqdm.pandas()\n\n    train['text'] = train['Id'].progress_apply(read_append_return)\n\n    if not COMPUTE_CV:\n        sample_submission['text'] = sample_submission['Id'].progress_apply(partial(read_append_return, train_files_path=test_files_path))","902d735e":"train.head()","30237f20":"if BASELINE_HELPING or ALL_BLENDED:\n    tqdm.pandas()\n    \n    train['text'] = train['text'].progress_apply(text_cleaning)","0c0b3485":"if BASELINE_HELPING or ALL_BLENDED:\n    temp_1 = [x.lower() for x in train['dataset_label'].unique()]\n    temp_2 = [x.lower() for x in train['dataset_title'].unique()]\n    temp_3 = [x.lower() for x in train['cleaned_label'].unique()]\n\n    existing_labels = set(temp_1 + temp_2 + temp_3)\n\n    print(f'len(temp_1) = {len(temp_1)}')\n    print(f'len(temp_2) = {len(temp_2)}')\n    print(f'len(temp_3) = {len(temp_3)}')\n    print(f'len(existing_labels) = {len(existing_labels)}')\n\n    id_list = []\n    lables_list = []\n    for index, row in tqdm(sample_submission.iterrows()):\n        sample_text = row['text']\n        row_id = row['Id']\n        temp_df = train[train['text'] == text_cleaning(sample_text)]\n        cleaned_labels = temp_df['cleaned_label'].to_list()\n\n        for known_label in existing_labels:\n            if known_label in sample_text.lower():\n                cleaned_labels.append(clean_text(known_label))\n\n        cleaned_labels = [clean_text(x) for x in cleaned_labels]\n        cleaned_labels = set(cleaned_labels)\n        lables_list.append('|'.join(cleaned_labels))\n        id_list.append(row_id)","e8ae133c":"pred_mlm_labels","5d839ec7":"final_predictions = []\n\nif ALL_BLENDED: #false\n    for literal_match, mlm_pred, lables_match in zip(literal_preds, pred_mlm_labels, lables_list):\n        temp = [literal_match, mlm_pred, lables_match]\n        temp = [pred for pred in temp if pred]\n        temp = ('|').join(temp)\n        final_predictions.append(temp)\n        \nelif BASELINE_HELPING: #false\n    for literal_match, mlm_pred, lables_match in zip(literal_preds, pred_mlm_labels, lables_list):\n        if literal_match:\n            final_predictions.append(literal_match)\n        elif lables_match:\n            final_predictions.append(lables_match)\n        else:\n            final_predictions.append(mlm_pred)\n\nelif MATCH_ONLY: #false\n    final_predictions = literal_preds\n\nelif MLM_ONLY: #false\n    final_predictions = pred_mlm_labels\n\nelif THEO_MERGE: #false\n    for i in range(len(literal_preds)):\n        pred_naive = literal_preds[i].split('|')\n        pred_model = pred_mlm_labels[i].split('|')\n        pred_model_kept = []\n        for pred_m in pred_model:\n            kept = True\n            for pred_n in pred_naive:\n                if pred_m in pred_n or pred_n in pred_m:\n                    kept = False\n            if kept:\n                pred_model_kept.append(pred_m)\n        final_predictions.append(\"|\".join(pred_naive + pred_model_kept))\n\nelse:\n    for literal_match, mlm_pred in zip(literal_preds, pred_mlm_labels):\n        if literal_match:\n            final_predictions.append(literal_match)\n        else:\n            final_predictions.append(mlm_pred)\n\nsample_submission['PredictionString'] = final_predictions","9c8e9e81":"mlm_pred","cc1b1837":"literal_match","63580550":"sample_submission[['Id', 'PredictionString']].to_csv('submission.csv', index=False)\n\n#sample_submission","440b4cce":"# <\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u30d2\u30f3\u30c8><br>\n\u30fb\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u76ee\u7684\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d6\u308a\u5dfb\u304f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3059 (\u3053\u308c\u304c\u3001\u793e\u5185\u3067\u7af6\u5408\u3092\u300c\u30ea\u30c3\u30c1 \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u300d\u3068\u547c\u3093\u3067\u3044\u308b\u7406\u7531\u3067\u3059)\u3002 \u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u7814\u7a76\u8005\u304c\u65b0\u305f\u306b\u51fa\u73fe\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u3069\u306e\u3088\u3046\u306b\u53c2\u7167\u3059\u308b\u304b\u3092\u7279\u5b9a\u3059\u308b\u306e\u306b\u3082\u5f79\u7acb\u3061\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\u65b0\u305f\u306b\u51fa\u73fe\u3057\u305f\u6570\u306e COVID \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u7528\u3055\u308c\u308b\u591a\u304f\u306e\u7570\u306a\u308b\u540d\u524d\u306a\u3069\u3067\u3059\u3002<br>\n\u30fb\u91cd\u8981\u306a\u306e\u306f\u3001\u4e21\u65b9\u306e\u540d\u524d\u304c\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u308c\u306b\u5fdc\u3058\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002 \u5de8\u5927\u306a\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\u3092\u63a8\u5968\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u8b58\u5225\u3092\u63a8\u5968\u3057\u307e\u3059\u3002<br>\n\u30fb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30e9\u30d9\u30eb\u306f\u30ce\u30a4\u30ba\u304c\u591a\u304f\u3001\u3055\u307e\u3056\u307e\u306a\u5f62\u5f0f\u306e\u300c\u30e1\u30f3\u30b7\u30e7\u30f3\u300d\u3092\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6b63\u3057\u304f\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001AGID\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3001\u300c\uff08AGID\uff09\u300d\u306a\u3057\u3067\u4ed6\u306e\u5834\u6240\u3067\u8a00\u53ca\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u305d\u306e\u4e00\u610f\u306e\u6587\u5b57\u5217\u306b\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u5b66\u7fd2\u3059\u308b\u3060\u3051\u3067\u306f\u3001\u30bf\u30b9\u30af\u3092\u89e3\u6c7a\u3059\u308b\u306b\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002<br>\n\u30fb\u3053\u3053\u3067\u3001\u3059\u3079\u3066\u306e\uff08\u8907\u6570\u306e\uff09\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u305f\u30e9\u30d9\u30eb\u306f\u3001\u540c\u3058\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u3064\u307e\u308a\u300c\u56fd\u7acb\u7a7a\u9593\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u6240\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u300d\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002<br>\n\u30fbtrain\u30c7\u30fc\u30bf\u306b\u306f\u540c\u3058\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8907\u6570\u306e\u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u306f\u3059\u3067\u306b\u308f\u304b\u3063\u3066\u3044\u307e\u3059<br>\n\u30fb\u7d4c\u9a13\u79d1\u5b66\u306e\u51fa\u7248\u7269\u3067\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u6a19\u6e96\u7684\u3067\u3059\u3002 \u5b9f\u969b\u3001\u3053\u308c\u306f\u653f\u5e9c\u6a5f\u95a2\u304c\u95a2\u5fc3\u3092\u6301\u3063\u3066\u3044\u308b\u6307\u6a19\u306e1\u3064\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u7d4c\u9a13\u7684\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306b\u3069\u306e\u3088\u3046\u306b\u9069\u5408\u3059\u308b\u304b\u3092\u7406\u89e3\u3057\u3066\u3044\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u51fa\u7248\u7269\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u5171\u53c2\u7167\u306f\u975e\u5e38\u306b\u6709\u7528\u306a\u7d50\u679c\u306e\u5c3a\u5ea6\u3067\u3059<br>\n\u30fb\u30bf\u30b9\u30af\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a00\u53ca\u306e\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u306f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3067\u306f\u307e\u3063\u305f\u304f\u8868\u793a\u3055\u308c\u306a\u3044\u975e\u5e38\u306b\u591a\u304f\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3001\u304a\u3088\u3073\u30d1\u30d6\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30e2\u30c7\u30eb\u304c\u3046\u307e\u304f\u6a5f\u80fd\u3059\u308b\u306b\u306f\u3001\u30bf\u30b9\u30af\u306b\u4e00\u822c\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002<br>\n\u30fb\u3053\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u8ab2\u984c\u306e1\u3064\u306f\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u9577\u3055\u3067\u3059\u3002 \u307b\u3068\u3093\u3069\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f512\u30c8\u30fc\u30af\u30f3\u3088\u308a\u9577\u304f\u3001\u3053\u308c\u306f\u5f93\u6765\u306e\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30de\u30fc\u306e\u5236\u9650\u3067\u3059\u3002<br>\n\u30fb\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u306f\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306f\u3042\u307e\u308a\u6b63\u78ba\u3067\u306f\u306a\u304f\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306f\u5b8c\u5168\u306bIMO\u3068\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u653f\u5e9c\u306e\u30c7\u30fc\u30bf\u3067\u3042\u308a\u3001\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u305f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08\u591a\u304f\u3092\u624b\u4f5c\u696d\u3067\u30c1\u30a7\u30c3\u30af\uff09\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002 \u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u300cisin\u300d\u30c6\u30b9\u30c8\u306b\u8ffd\u52a0\u3059\u308b\u3068\u3001\u30b9\u30b3\u30a2\u304c70\uff05\u304b\u308967\uff05\u306b\u4f4e\u4e0b\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u304c\u30c6\u30b9\u30c8\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e00\u90e8\u3092\u691c\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306f\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3067\u306f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u3002 \u660e\u3089\u304b\u306b\u3001\u3053\u308c\u3089\u306e\u4e00\u90e8\u304c\u9069\u5207\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u30bf\u30a4\u30c8\u30eb\u306a\u3069\u3067\u306f\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u3059\u3079\u3066\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3069\u306e\u3088\u3046\u306b\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u305f\u304b\u3068\u3044\u3046\u70b9\u3092\u793a\u3057\u3066\u3044\u307e\u3059-\u5fb9\u5e95\u7684\u306a\u30e9\u30d9\u30ea\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u304c\u79c1\u305f\u3061\u304c\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002 \u305d\u308c\u3067\u3001\u5f7c\u3089\u304c\u305d\u308c\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u306a\u3089\u3001\u306a\u305c\u5f7c\u3089\u306f\u79c1\u305f\u3061\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u3067\u3059\u304b\uff1f \u5f7c\u3089\u304c\u624b\u4f5c\u696d\u3067\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3092\u884c\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u304c\u3059\u3079\u3066\u306e\u653f\u5e9c\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u5f15\u7528\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u30ad\u30e3\u30c3\u30c1\u3057\u3066\u3044\u308b\u3068\u306f\u8003\u3048\u306b\u304f\u3044\u3067\u3059\u3002<br>\n\u30fb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306b\u306f\u3001\u982d\u5b57\u8a9e\u306e\u307f\u3067\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u5834\u5408\u3082\u3042\u308c\u3070\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u540d\u3067\u30e9\u30d9\u30eb\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002 \u6642\u306b\u306f\u4e21\u65b9\u3002 \u5168\u304f\u5206\u304b\u3089\u306a\u3044\u3002<br>\n\u30fb\u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u306f\u3001\u72af\u7f6a\u3068\u5b89\u5168\u306b\u95a2\u3059\u308b\u5b66\u6821\u306e\u8abf\u67fb\u3092\u898b\u843d\u3068\u3057\u3066\u3044\u305f\u3088\u3046\u3067\u3059\u3002 \u7533\u3057\u8a33\u3042\u308a\u307e\u305b\u3093\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u57fa\u672c\u7684\u306b\u3001\u72af\u7f6a\u3068\u5b89\u5168\u6027\u306b\u95a2\u3059\u308b\u8abf\u67fb\u3082\u7167\u5408\u3059\u308b\u3068\u3001\u91cd\u8907\u304c\u8ffd\u52a0\u3055\u308c\u3001\u30b9\u30b3\u30a2\u304c\u4f4e\u304f\u306a\u308a\u307e\u3059\u3002 \u7406\u306b\u304b\u306a\u3063\u3066\u3044\u307e\u3059\u3002<br>\n\u30fb\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u5185\u306e\u4efb\u610f\u306e\u30e9\u30d9\u30eb\u3067\u3001\u30b8\u30e3\u30ab\u30fc\u30c9\u304c0.5\u4ee5\u4e0a\u306e\u4e88\u6e2c\u30e9\u30d9\u30eb\u3092\u3059\u3079\u3066\u524a\u9664\u3057\u307e\u3057\u305f\u304b\uff1f=>\u4fee\u6b63\u3057\u307e\u3057\u305f<br>\n\u30fb\u30b9\u30af\u30e9\u30d4\u30f3\u30b0\u30c4\u30fc\u30eb\u3092\u4f5c\u6210\u3057\u3066\u4e0a\u7d1a\u8005\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u308b\u3002<br>\n\u3000https:\/\/www.kaggle.com\/chienhsianghung\/web-scraping-for-bigger-govt-dataset-list\n  https:\/\/www.kaggle.com\/mlconsult\/100000-govt-datasets-api-json-to-df?scriptVersionId=64010594\n\u30fb\u7279\u5b9a\u306e\u51fa\u7248\u7269\u306b\u3064\u3044\u3066\u3001\u8457\u8005\u304c\u305d\u306e\u7814\u7a76\u8ad6\u6587\u3067\u4f7f\u7528\u3057\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u898b\u3064\u3051\u308b\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\u3053\u308c\u3089\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u8a00\u53ca\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u51fa\u7248\u7269\u304b\u3089\u306e\u77ed\u3044\u629c\u7c8b\u3067\u3059\u3002 \u30d1\u30d6\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53c2\u7167\u3067\u304d\u308b\u305f\u3081\u3001\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u540d\u524d\u3092 '|\u3067\u533a\u5207\u3063\u3066\u542b\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 '\u3002 \u540c\u69d8\u306b\u3001\u51fa\u7248\u7269\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3067\u3055\u3048\u3001\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u7279\u5b9a\u306e\u30d1\u30d6\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u3001\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u30e9\u30d9\u30eb\u3068\u3068\u3082\u306b\u300c|\u300d\u3067\u533a\u5207\u3089\u308c\u305f\u4e00\u9023\u306e\u4e88\u6e2c\u304c\u3042\u308a\u307e\u3059\uff08\u73fe\u5728\u3001\u5358\u4e00\u306e\u30d1\u30d6\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306etrain.csv\u306b\u8907\u6570\u306e\u30a8\u30f3\u30c8\u30ea\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u63db\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u540c\u3058\u5f62\u5f0f\uff09\u3002\u7279\u5b9a\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306e\u985e\u4f3c\u5ea6\u30b9\u30b3\u30a2\u304c\u6700\u3082\u9ad8\u3044\u4e88\u6e2c\u306f\u3001\u305d\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002 \u305d\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306e\u4ed6\u306e\u4e88\u6e2c\u306f\u3001\u6bd4\u985e\u306e\u306a\u3044\u3082\u306e\u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u6700\u9ad8\u306e\u985e\u4f3c\u6027\u30b9\u30b3\u30a2\u306b\u540c\u70b9\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u4e88\u6e2c\u6587\u5b57\u5217\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u66ff\u3048\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3055\u308c\u307e\u3059\u3002F0.5\u30b9\u30b3\u30a2\uff1aF 0.5\u306f\u3001F1\uff08\u9069\u5408\u7387\u3068\u518d\u73fe\u7387\u3092\u7b49\u3057\u304f\u91cd\u307f\u4ed8\u3051\u3059\u308b\uff09\u3068F0\uff08\u9069\u5408\u7387\uff09\u306e\u9593\u306e\u5c3a\u5ea6\u3067\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002 F 0.5\u306f\uff08F0\u3068\u306f\u7570\u306a\u308a\uff09False Negatives\u3092\u8003\u616e\u306b\u5165\u308c\u307e\u3059\u304c\u3001\u7cbe\u5ea6\u306b\u504f\u308a\u307e\u3059\u3002<br>\n\u30fbtest\u30c7\u30fc\u30bf\u3067\u306f\u3001\u307e\u3063\u305f\u304f\u8a00\u53ca\u3055\u308c\u3066\u3044\u306a\u3044\u30e9\u30d9\u30eb\u304c\u591a\u6570\u3042\u308a\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u30bf\u30b9\u30af\u306f\u6587\u5b57\u5217\u3092\u7167\u5408\u3059\u308b\u3053\u3068\u3067\u306f\u306a\u304f\u3001\u300c\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u7279\u5b9a\u3067\u304d\u307e\u3059\u304b\u300d\u3068\u3044\u3046\u554f\u984c\u3092\u4e00\u822c\u5316\u3059\u308b\u305f\u3081\u306eNLP\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002<br>\n\u30fb\n\n","4ad30bb9":"### Load model and tokenizer\ud83c\udf89","de78f99e":"\ud83c\udf89\u4e00\u65e6\u306f\u305a\u3059\n@ mlconsult\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u305f\u5143\u306edata_set_800\u306b\u8ffd\u52a0\u3055\u308c\u305fData.gov\u304b\u3089\u3001\u4eba\u6c17\u306e\u3042\u308b\u4e0a\u4f4d22,000\u306egov_dataset\u3092\u53ce\u96c6\u3057\u307e\u3057\u305f(discussion\u3088\u308a\uff09<br>\n\u3053\u308c\u304c\u4e3b\u50ac\u8005\u306e\u6c42\u3081\u308b\u3082\u306e\u306a\u306e\u304b\u3069\u3046\u304b\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002<br>","f7881a82":"# Baseline Model\ud83d\udccc","ce521f95":"\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u76ee\u7684\u306f\u3001\u79d1\u5b66\u51fa\u7248\u7269\u5185\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8a00\u53ca\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3042\u306a\u305f\u306e\u4e88\u6e2c\u306f\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u51fa\u7248\u7269\u304b\u3089\u306e\u77ed\u3044\u629c\u7c8b\u3067\u3059\u3002\u30d1\u30d6\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8b58\u5225\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b\u6b63\u78ba\u306a\u5358\u8a9e\u3068\u3088\u308a\u6b63\u78ba\u306b\u4e00\u81f4\u3059\u308b\u4e88\u6e2c\u306f\u3001\u3088\u308a\u9ad8\u3044\u30b9\u30b3\u30a2\u306b\u306a\u308a\u307e\u3059\u3002\u4e88\u6e2c\u306f\u3001\u9069\u5207\u306b\u4e00\u81f4\u3059\u308b\u3088\u3046\u306b\u3001\u8a55\u4fa1\u30da\u30fc\u30b8\u306eclean_text\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ndef jaccard(str1, str2): <br>\n    a = set(str1.lower().split()) <br>\n    b = set(str2.lower().split())<br>\n    c = a.intersection(b)<br>\n    return float(len(c)) \/ (len(a) + len(b) - len(c))<br>\n    \ndef clean_text(txt):<br>\n    return re.sub('[^A-Za-z0-9]+', ' ', str(txt).lower())<br>\n    \n\u63d0\u51fa\u7269\u306f\u3001\u4e88\u6e2c\u30c6\u30ad\u30b9\u30c8\u3068\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u30c6\u30ad\u30b9\u30c8\u306e\u9593\u306eJaccard\u30d9\u30fc\u30b9\u306eFBeta\u30b9\u30b3\u30a2\u3067\u8a55\u4fa1\u3055\u308c\u3001\u30d9\u30fc\u30bf= 0.5\uff08\u30de\u30a4\u30af\u30edF0.5\u30b9\u30b3\u30a2\uff09\u3067\u3059\u3002 \u8907\u6570\u306e\u4e88\u6e2c\u306f\u3001\u9001\u4fe1\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30d1\u30a4\u30d7\uff08|\uff09\u6587\u5b57\u3067\u793a\u3055\u308c\u307e\u3059\u3002","2344cafc":"### Paths and Hyperparameters","eb3b2362":"\u5f97\u305f\u3044\u306e\u77e5\u308c\u306a\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u8eab\u3002\u3053\u308c\u304c\u672c\u6587\u4e2d\u306b\u3042\u308c\u3070\u3001\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u308c\u308b\u304b\u3067\u304d\u307e\u3063\u3066\u304f\u308b\u3002\u3069\u3046\u3084\u3063\u3066\u3064\u304f\u308b\u3093\u3060\u308d\u3046\u3002![image.png](attachment:8c3d9c4b-f9aa-4f3a-b093-9c3cf80dc3b1.png)","33b03a36":"\ud83c\udf89\u5404\u5909\u6570\u306e\u5024\u3092\u307f\u3066\u307f\u308b\u3002","94735b4d":"![image.png](attachment:85661b74-5e5a-4abf-9064-d2c77718e6e3.png)","b0bd53b8":"# \u30d1\u30e9\u30e1\u30bf","94437bb5":"## \u6700\u7d42\u4e88\u6e2c\u3092\u96c6\u7d04\u3057\u3001\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059  ![image.png](attachment:fb6e8785-27e2-41fb-835b-3ec97dcb7d46.png)","a17d95d8":"### Create a Knowledge Bank","311c4ad8":"PubMed\uff08\u30d1\u30d6\u30e1\u30c9\uff09\u306f\u751f\u547d\u79d1\u5b66\u3084\u751f\u7269\u533b\u5b66\u306b\u95a2\u3059\u308b\u53c2\u8003\u6587\u732e\u3084\u8981\u7d04\u3092\u63b2\u8f09\u3059\u308bMEDLINE\u306a\u3069\u3078\u306e\u7121\u6599\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3067\u3042\u308b\u3002 \u30a2\u30e1\u30ea\u30ab\u56fd\u7acb\u885b\u751f\u7814\u7a76\u6240\u306e\u30a2\u30e1\u30ea\u30ab\u56fd\u7acb\u533b\u5b66\u56f3\u66f8\u9928\uff08NLM\uff09\u304c\u60c5\u5831\u691c\u7d22Entrez\u30b7\u30b9\u30c6\u30e0\u306e\u4e00\u90e8\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u904b\u7528\u3057\u3066\u3044\u308b\u3002","482e8180":"\ud83c\udf89train\u30c7\u30fc\u30bf\u306ejson\u30d5\u30a1\u30a4\u30eb\u3092pandas\u3078\u8aad\u307f\u8fbc\u3080\u3002<br>\n\ud83c\udf89copy(deep=True)\u306e\u6307\u5b9a\u3082\u3067\u304d\u308b\u3093\u3060\u3002","3e6f35eb":"\u3053\u306e\u6587\u5b57\u5217\u306fto_append\u306b\u8ffd\u52a0\u3057\u3066\u3044\u306a\u3044\u3002\u3053\u308c\u306f\u3001clean_string(json\u306e\u6587\u7ae0\u306b\u306a\u3044\uff09\u306b\u306a\u304b\u3063\u305f\u304b\u3089\u3002","df7a8282":"# Masked Dataset Modeling\ud83d\udd0e","a5f16a05":"\u3053\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\u306f\u3001<br>\n\u201d\u7c21\u5358\u306b\u8a00\u3048\u3070\u3001\u5b66\u8853\u8ad6\u6587\u306e\u5168\u6587\u7ae0\u5185\u5bb9\u304b\u3089\u3001dataset_label\u3068\u3044\u3046\u4f55\u306b\u3064\u3044\u3066\u66f8\u304b\u308c\u3066\u3044\u308b\u304b\u306e\u5206\u985e\u5206\u3051\u3092\u3059\u308b\u30b3\u30f3\u30da\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u201d<br>\nhttps:\/\/www.kaggle.com\/chumajin\/coleridge-initiative-eda-for-biginner\u3000\u3088\u308a\u5f15\u7528\u3002\u306a\u308b\u307b\u3069\u3002<br>\n\u3053\u308c\u3060\u3051\u3060\u3068\u5168\u54e1\u540c\u3058\u30b9\u30b3\u30a2\u306b\u306a\u308b\u306e\u3067\u3001\u5916\u90e8\u30c7\u30fc\u30bf\uff08\u79d1\u5b66\u51fa\u7248\u7269\u306e\u30c7\u30fc\u30bf\uff09\u3092\u53d6\u308a\u8fbc\u3080\u3053\u3068\u304c\u5fc5\u8981\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n![image.png](attachment:ace3b875-68f2-4920-b13a-ac7e40bae5fb.png)","4fd67263":"### Auxiliary functions\ud83c\udf89","84b89e6c":"# Literal Matching","4f89c596":"\u4e00\u65e6\u306f\u305a\u3059\nhttps:\/\/www.kaggle.com\/mlconsult\/100000-govt-datasets-api-json-to-df\/output?scriptVersionId=64010594&select=datasets.csv","04bcc136":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u63a8\u8ad6\u306b\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u512a\u308c\u305f\u7c21\u5358\u306a\u65b9\u6cd5\u3067\u3059\u3002 \u3053\u308c\u3089\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u8907\u96d1\u306a\u30b3\u30fc\u30c9\u306e\u307b\u3068\u3093\u3069\u3092\u62bd\u8c61\u5316\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u540d\u524d\u4ed8\u304d\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u8a8d\u8b58\u3001\u30de\u30b9\u30af\u3055\u308c\u305f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u3001\u611f\u60c5\u5206\u6790\u3001\u7279\u5fb4\u62bd\u51fa\u3001\u8cea\u554f\u5fdc\u7b54\u306a\u3069\u3001\u3044\u304f\u3064\u304b\u306e\u30bf\u30b9\u30af\u5c02\u7528\u306e\u30b7\u30f3\u30d7\u30eb\u306a API \u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002<br>\nModelWithLMHead \u3092\u4f7f\u7528\u3057\u305f\u30de\u30b9\u30af\u3055\u308c\u305f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u4e88\u6e2c\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3002 <br>\n\u3053\u306e\u30de\u30b9\u30af\u5145\u586b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306f\u3001\u73fe\u5728\u3001\u6b21\u306e\u30bf\u30b9\u30af\u8b58\u5225\u5b50\u3092\u4f7f\u7528\u3057\u3066 pipeline() \u304b\u3089\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059: \"fill-mask\"\u3002<br>\n\u3053\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u4f7f\u7528\u3067\u304d\u308b\u30e2\u30c7\u30eb\u306f\u3001\u30de\u30b9\u30af\u3055\u308c\u305f\u8a00\u8a9e\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u76ee\u7684\u3067\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u30e2\u30c7\u30eb\u3067\u3059\u3002\u3053\u308c\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u53cc\u65b9\u5411\u30e2\u30c7\u30eb\u304c\u542b\u307e\u308c\u307e\u3059<br>\n\n\u96e3\u3057\u3044\u3002\u3002\u3002\u3002","62a905b8":"### Matching on test data","5d8e3d56":"#### \ud83d\udccc\u4ef6\u6570\u304c\u3059\u3054\u3044\u5897\u3048\u3066\u3044\u308b\u304b\u3089\u3053\u308c\u304c\u3053\u306enotebook\u306e\u30ad\u30fc\u304b\u3002ken\u3055\u3093\u3068\u3044\u3046\u4eba\u304c\u4f5c\u3063\u3066\u3044\u308b\u3082\u306e\u3002","f4bf7868":"0.577","a0a569ea":"\u3053\u306e\u6587\u5b57\u5217\u304cto_append\u306b\u306a\u3051\u308c\u3070\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u3001\u6700\u5f8c\u306e\u30eb\u30fc\u30d7\u3067\u306e\u7d50\u679c\u3002","bb85cfd9":"# Import","71c97dcd":"\n![image.png](attachment:e918ff72-313f-484b-b6f0-4ce1554335da.png)","e950feae":"\ud83c\udf89test\u30d5\u30a9\u30eb\u30c0\u306ejson\u30d5\u30a1\u30a4\u30eb\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3080\u3002","2341c42d":"\ud83d\udccc1\u884c\u305a\u3064\u53d6\u308a\u51fa\u3059\u30e1\u30bd\u30c3\u30c9\u306b\u306fiterrows()\u3068itertuples()\u304c\u3042\u308b\u3002itertuples()\u306e\u307b\u3046\u304c\u9ad8\u901f\u3060\u305d\u3046\u3067\u3059\u3002","b028d5ad":"<br>\n\u521d\u3081\u3066\u307e\u3068\u3082\u306b\u5411\u304b\u3044\u3042\u3044\u307e\u3057\u305f\u304c\u3001\u624b\u3082\u8db3\u3082\u3067\u306a\u3044\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3057\u305f\u3002<br>\u7d50\u679c\u304c\u3067\u307e\u3057\u305f\u3002\uff15\uff10\uff10\u4f4d\u306b\u3082\u5c4a\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\ud83d\ude2d<br>\nBert\u3092\u3082\u3063\u3068\u52c9\u5f37\u3057\u306a\u304d\u3083\u3002","61e203d4":"discusstion\u306b\u3042\u3063\u305flabel\u3092\u8ffd\u52a0","8ca227ce":"### Transform","3fc21bfd":"#### \u8ffd\u52a0\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u672c\u6587\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\ud83d\ude37","689771bd":"180\u7a2e\u985e\u3042\u308b\u300210\u4ef6\u3060\u3051\u51fa\u529b\u3057\u3066\u307f\u308b\u3002\u30bf\u30a4\u30c8\u30eb\u3068\u3057\u3066\u306f\u9577\u3044\u3088\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\ud83c\udfa8","f363b53a":"# Bert\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","42f56b63":"# Load data","6792bfb2":"##  EDA","7e0ec3d3":"\u5404\u51fa\u7248\u7269\u306e\u4e00\u9023\u306e\u4e88\u6e2c\u306b\u3064\u3044\u3066\u3001\u30c8\u30fc\u30af\u30f3\u30d9\u30fc\u30b9\u306eJaccard\u30b9\u30b3\u30a2\u304c\u3001\u6f5c\u5728\u7684\u306a\u4e88\u6e2c\/\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306e\u30da\u30a2\u3054\u3068\u306b\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002 \u7279\u5b9a\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306e\u30b9\u30b3\u30a2\u304c\u6700\u3082\u9ad8\u3044\u4e88\u6e2c\u306f\u3001\u305d\u306e\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\n\u5404\u51fa\u7248\u7269\u306e\u4e88\u6e2c\u6587\u5b57\u5217\u306f\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3001\u305d\u306e\u9806\u5e8f\u3067\u51e6\u7406\u3055\u308c\u307e\u3059\u3002 \u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u306e\u540c\u70b9\u306f\u3001\u305d\u306e\u30bd\u30fc\u30c8\u306b\u57fa\u3065\u3044\u3066\u89e3\u6c7a\u3055\u308c\u307e\u3059\u3002\nJaccard\u30b9\u30b3\u30a2\u304c\u3057\u304d\u3044\u50240.5\u3092\u6e80\u305f\u3059\u304b\u8d85\u3048\u308b\u4e00\u81f4\u3057\u305f\u4e88\u6e2c\u306f\u3001\u771f\u967d\u6027\uff08TP\uff09\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u3001\u6b8b\u308a\u306f\u507d\u967d\u6027\uff08FP\uff09\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\n\u4e00\u81f4\u3057\u306a\u3044\u4e88\u6e2c\u306f\u3001\u8aa4\u691c\u77e5\uff08FP\uff09\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\n\u6700\u3082\u8fd1\u3044\u4e88\u6e2c\u304c\u306a\u3044\u30b0\u30e9\u30a6\u30f3\u30c9\u30c8\u30a5\u30eb\u30fc\u30b9\u306f\u3001\u30d5\u30a9\u30fc\u30eb\u30b9\u30cd\u30ac\u30c6\u30a3\u30d6\uff08FN\uff09\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u3059\u3079\u3066\u306eTP\u3001FP\u3001\u304a\u3088\u3073FN\u3092\u4f7f\u7528\u3057\u3066\u3001\u6700\u7d42\u7684\u306a\u30de\u30a4\u30af\u30edF0.5\u30b9\u30b3\u30a2\u304c\u8a08\u7b97\u3055\u308c\u307e\u3059\u3002 \uff08\u30de\u30a4\u30af\u30edF\u30b9\u30b3\u30a2\u306f\u3053\u308c\u3092\u6b63\u78ba\u306b\u5b9f\u884c\u3057\u3001\u4e88\u6e2c\u306e\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308bTP\u3001FP\u3001\u304a\u3088\u3073FN\u306e1\u3064\u306e\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09","25ddd1d0":"### Predict"}}