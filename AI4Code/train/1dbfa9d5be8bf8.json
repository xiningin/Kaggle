{"cell_type":{"b0919eb7":"code","d3f953a5":"code","7737f814":"code","c399423c":"code","cf745486":"code","94f637a9":"code","7e2557a3":"code","e18a07b2":"code","dd00fb82":"code","eb41fa86":"code","9e104371":"code","6812370d":"markdown","c100d3f9":"markdown","f3eaffaf":"markdown","f3614a58":"markdown","18ec10c7":"markdown","5022384a":"markdown","53a9e4c6":"markdown","8f546d57":"markdown","01c2bce2":"markdown","127d3faf":"markdown"},"source":{"b0919eb7":"import pandas as pd\nimport numpy as np\nimport csv\nimport networkx\nfrom networkx.algorithms.components.connected import connected_components\n\ndata = pd.read_json('..\/input\/scl-2021-da\/contacts.json')","d3f953a5":"email = dict(list(data.groupby(['Email'])))\nphone = dict(list(data.groupby(['Phone'])))\norderid = dict(list(data.groupby(['OrderId'])))\nlist(email.values())[1]","7737f814":"def get_index(mydict, mylist):\n    for key,values in mydict.items():\n        if key != '':\n            mylist.append(list(values.index))\n            \nstorage = []\n\nget_index(email, storage)\nget_index(phone, storage)\nget_index(orderid, storage)","c399423c":"storage[9]","cf745486":"k = np.zeros((500000,20))\n\nfor item in storage:\n    for element1 in item:\n        i = 0\n        for element2 in item:\n            while(k[element1,i] != 0):\n                i +=1\n            k[element1,i] = element2+1\n\nnew = list(k)\n\nfor i in range(len(new)):\n    new[i] = list(set(new[i]))\n    new[i].remove(0)\n    new[i].sort()\n    for j in range(len(new[i])):\n        new[i][j] = int(new[i][j] - 1)\n        new[i][j] = str(new[i][j])","94f637a9":"new[9]","7e2557a3":"def to_graph(l):\n    G = networkx.Graph()\n    for part in l:\n        G.add_nodes_from(part)\n        G.add_edges_from(to_edges(part))\n    return G\n\ndef to_edges(l):\n    it = iter(l)\n    last = next(it)\n\n    for current in it:\n        yield last, current\n        last = current  ","e18a07b2":"G = to_graph(new)\ncontact = data['Contacts'].to_numpy()\nnewlist = []\n\nfor item in connected_components(G):\n    item = list(item)\n    item.sort(key = lambda x:int(x))\n    newlist.append(item)\n    contact[list(map(int, item))] = sum(data.loc[int(x),'Contacts'] for x in item)","dd00fb82":"finalarr = np.empty((500000,2),dtype=object)\n\nfor item in newlist:\n    mystr = '-'.join(element for element in item)\n    mystr = mystr +', ' + str(contact[int(item[0])])\n    for element in item:\n        element = int(element)\n        finalarr[element,0] = str(element)\n        finalarr[element,1] = mystr\n\nfinal = pd.DataFrame(finalarr,columns = ['ticket_id','ticket_trace\/contact'])","eb41fa86":"final","9e104371":"final.to_csv('.\/output.csv', index=False)","6812370d":"Let us first do some processing, so that we can convert them into strings, and also allign them up, such that nth row -> value we are going to put into the nth index on the csv file.","c100d3f9":"First, we will import the json file using pandas and then do a groupby to immediately obtain the items that are suppose to be grouped together.","f3eaffaf":"The storage thus now contains a list of lists, where each list represents entries that share something in common.","f3614a58":"Our immediate task now becomes simple, merge lists based on common elements they share, i.e. if two lists share common items, merge them. This is when we can make use of graph theory, treating each entry as a node, and then make edges between nodes in the same list. The code below is taken from stackexchange and I did not write it myself.","18ec10c7":"We will now merge the lists, and at the same time add the contacts up.","5022384a":"We will use the pandas groupby function, and then turn the grouped table into a dictionary so that we can access the values- which are the entries sharing common email\/phone\/order-id.","53a9e4c6":"A simple function can be written to extract the entries into lists.","8f546d57":"AND VOILA! We are done.","01c2bce2":"This code is something I worked on individually after the competition and was not used for submission. It incorporates the use of graph theory to produce a complete csv output in a rather short period of time.","127d3faf":"In this final step, we just need to do some simple processing such that it is in the format required by Shopee."}}