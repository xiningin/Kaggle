{"cell_type":{"ff0567a4":"code","84dc9677":"code","a9936c9c":"code","2c42bf0b":"code","2340ebbf":"code","9fde20a4":"code","00557850":"code","cb84bfa7":"code","2cb8881e":"markdown","db536f22":"markdown","1afc8e52":"markdown","e79fdc20":"markdown","1ed673b4":"markdown","bd01fe1d":"markdown","1ee7f881":"markdown","dc3aadc2":"markdown","51f41b95":"markdown","b92752e0":"markdown","ba320a79":"markdown","be3ab020":"markdown","d93d3e71":"markdown","00fc97ed":"markdown"},"source":{"ff0567a4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","84dc9677":"from datetime import datetime\ndf = pd.read_csv('\/kaggle\/input\/bitcoin-price-usd\/main.csv')\ndf['Open Time'] = df['Open Time'] \/\/ 1000\ndf['Open Time'] = df['Open Time'].apply(datetime.fromtimestamp)\ndf['Close Time'] = df['Close Time'] \/\/ 1000\ndf['Close Time'] = df['Close Time'].apply(datetime.fromtimestamp)\ndf.head()","a9936c9c":"#df.count()\ndf.isnull().sum()","2c42bf0b":"import matplotlib.pyplot as plt\n# Volume Plain plot\ndf = df[:360]\nplt.figure(figsize=(10,10))\nplt.plot(df['Close Time'], df['Close'])\nplt.xlabel(\"date\")\nplt.ylabel(\"$ price\")\nplt.title(\"BTC Price 2021\/01\/01(1minute timeframe)\")","2340ebbf":"df['SMA1'] = df['Close'].rolling(window=20).mean()\ndf['SMA2'] = df['Close'].rolling(window=50).mean()\n#df['SMA'].head(10)","9fde20a4":"plt.figure(figsize=(10,10))\nplt.plot(df['SMA1'],'g--',label=\"SMA1\")\nplt.plot(df[\"SMA2\"], 'r--', label=\"SMA2\")\nplt.plot(df[\"Close\"], label=\"Close\")\nplt.legend()\nplt.show()","00557850":"df['middle_band'] = df['Close'].rolling(window=20).mean()\ndf['upper_band'] = df['Close'].rolling(window=20).mean() + df['Close'].rolling(window=20).std()*2\ndf['lower_band'] = df['Close'].rolling(window=20).mean() - df['Close'].rolling(window=20).std()*2","cb84bfa7":"plt.figure(figsize=(10,10))\nplt.plot(df['upper_band'], 'g--', label=\"upper\")\nplt.plot(df['middle_band'], 'r--', label=\"middle\")\nplt.plot(df['lower_band'], 'y--', label=\"lower\")\nplt.plot(df['Close'], label=\"close\")\nplt.legend()\nplt.show()","2cb8881e":"# Check missing values","db536f22":"**We can see some golden cross and death cross**","1afc8e52":"**Plot the moving averange**","e79fdc20":"# Visualize The Data","1ed673b4":"Show","bd01fe1d":"## Calculate Bollinger Bands Indicator ","1ee7f881":"**Only take 360 first instaces**","dc3aadc2":"*Thank you for your attention. *","51f41b95":"More detail about [Bollinger Bands](https:\/\/en.wikipedia.org\/wiki\/Bollinger_Bands)","b92752e0":"Moving average 5,20,50,200 are the most commonly use in technical analysis","ba320a79":"### shows Bollinger Bands","be3ab020":"# Read The Data","d93d3e71":"# Basic Coins \/ Stock \/ Forex Visualization \n1. Read The Data\n2. Check Missing Values\n3. Visualize \n    1. Simple Moving Average (SMA)    \n    2. Bollinger Bands (BB)","00fc97ed":"## Calculate Simple Moving Average "}}