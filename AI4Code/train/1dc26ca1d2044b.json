{"cell_type":{"4161ea69":"code","afbfa5a7":"code","fe4d43a3":"code","4d9cf99e":"code","80cf5ca6":"code","d2fd190c":"code","b17e90d4":"code","8a237161":"code","868ba182":"code","aa733a9f":"code","85a372b3":"code","5578cd89":"code","dbcf6f63":"code","056c87cd":"code","aa4fdd52":"code","5ed74b86":"code","9b64ab44":"code","55458250":"code","ec58c782":"code","bde8608f":"code","beddeb9b":"code","5902d97a":"code","65cd1360":"code","7f0c3338":"code","71f4f08b":"code","7b3f17ab":"code","a69d59a8":"code","a6bb4259":"markdown","59c0bcd1":"markdown","c799b78b":"markdown","9acf0330":"markdown","99f9d19c":"markdown","4843bc0d":"markdown"},"source":{"4161ea69":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n","afbfa5a7":"df=pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ndf=df.drop(['id'],axis=1)\ndf.head(2)","fe4d43a3":"df.breath_id.unique().shape[0]","4d9cf99e":"time_idx=df['time_step'][df['time_step']==0].index\n\n\ntime_idx","80cf5ca6":"for i,t in enumerate(time_idx[:10]):\n    plt.plot(df['time_step'][t:t+80], df['pressure'][t:t+80], lw=2, label=f\"sample{i}\")\n    plt.xlabel('time step')\n    plt.ylabel('pressure')\nplt.legend()\nplt.show()\n\n\n#pressure seems be effected by other feature ","d2fd190c":"df['time_step'][1],df['time_step'][81],df['time_step'][161]  # unequal time_step of each data","b17e90d4":"#series number\n\n#each data pass 80 time steps \nlen(time_idx)","8a237161":"df=df.drop(['time_step','breath_id'],axis=1)","868ba182":"import tensorflow as tf\nimport tensorflow_datasets as tfds\nfrom tensorflow.keras.layers import GRU,LSTM,Dense,Bidirectional","aa733a9f":"batch_size=128\nepochs=200\nlr=0.001\ntime_slice=80\nunits=512\nunits_dense=256\n\nm=df.shape[0]\n\ntrain_size=int(m*0.7) #if m's first number is 0 , then m*0.7=int(m\/80)*0.7*80 is valid","85a372b3":"def build_ds(X,y):\n    \n    X=(X-X.mean(axis=0))\/X.std(axis=0)\n    ds_X=tf.keras.preprocessing.timeseries_dataset_from_array(\n      data=X,\n      targets=tf.ones((X.shape[0])),\n      sequence_length=time_slice,\n      sequence_stride=time_slice,\n      shuffle=False,\n      batch_size=batch_size\n    ).map(lambda x,y : x)\n\n    ds_Y=tf.keras.preprocessing.timeseries_dataset_from_array(\n      data=y,\n      targets=tf.ones((y.shape[0])),\n      sequence_length=time_slice,\n      sequence_stride=time_slice,\n      shuffle=False,\n      batch_size=batch_size\n    ).map(lambda x,y : x)\n    ds=tf.data.Dataset.zip((ds_X,ds_Y))\n    ds=ds.map(lambda x,y:(tf.cast(x,'float32'),y))\n    ds=ds.prefetch(tf.data.experimental.AUTOTUNE)\n    return ds","5578cd89":"x_train=df.drop(['pressure'],axis=1)[:train_size]\ny_train=df.pressure[:train_size]\nx_val=df.drop(['pressure'],axis=1)[train_size:]\ny_val=df.pressure[train_size:]\n\n\n\nds_train=build_ds(x_train,y_train)\nds_val=build_ds(x_val,y_val)","dbcf6f63":"model=tf.keras.Sequential([GRU(units=units,return_sequences=True),\n                              #recurrent_dropout=0.5),\n                           GRU(units=units,return_sequences=True,\n                               dropout=0.5,),\n                           GRU(units=units,return_sequences=True,\n                               dropout=0.5,),\n                              #recurrent_dropout=0.5),\n                           Dense(units=units_dense,activation='relu'),\n                           Dense(units=1,activation=None)\n                          ])\n'''\nmodel=tf.keras.Sequential([Bidirectional(LSTM(units=units,return_sequences=True,\n                              recurrent_dropout=0.2)),\n                           Bidirectional(LSTM(units=units,return_sequences=True,\n                               recurrent_dropout=0.2)),\n                           Dense(units=units_dense,activation='relu'),\n                           Dense(units=1,activation=None)\n                          ])\n''''\n\n\n\nopt=tf.keras.optimizers.Adam(learning_rate=lr)\nmodel.compile(optimizer=opt,\n              loss='mse',metrics=['mse','mae'])","056c87cd":"ckpt = tf.train.Checkpoint(opt=opt, model=model)\nmanager = tf.train.CheckpointManager(ckpt, '.\/ckpt', max_to_keep=1)","aa4fdd52":"def scheduler(epoch, lr):\n    return lr * tf.math.exp(-0.01)","5ed74b86":"#manager.restore(manager.latest_checkpoint)","9b64ab44":"model.fit(ds_train,\n          epochs=epochs,\n          verbose=1,\n          validation_data=ds_val,\n          validation_batch_size=batch_size,\n          callbacks=[tf.keras.callbacks.LearningRateScheduler(scheduler)],\n          use_multiprocessing=True)\n\nmanager.save()","55458250":"model.save('.\/gru.pt')","ec58c782":"df_=pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\n\nid_=df_.id\n\ndf_=df_.drop(['id','breath_id','time_step'],axis=1)\ndf_.head(2)","bde8608f":"ds=build_ds(df_,df_)","beddeb9b":"pred=[]\nfor x,_ in ds:\n    pred.append(model(x,training=False))","5902d97a":"import shutil\nshutil.make_archive('params', 'zip', '.\/')","65cd1360":"sub","7f0c3338":"pred=tf.reshape(tf.concat(pred,axis=0),(-1)).numpy()\npred.shape","71f4f08b":"sub=pd.DataFrame(np.vstack([id_,pred]).T,columns=['id','pressure'])","7b3f17ab":"sub['id']=sub['id'].astype('int64')","a69d59a8":"sub.to_csv('.\/sub.csv',index=False)","a6bb4259":"# Modeling Series","59c0bcd1":"* For each series\n\n * x size :(1,80,4)\n \n * batch size :1\n\n * series length:80\n\n * dimension : 6(drop time_step\u3001breath_id)-->4\n \n   * R\n   * C\n   * u_in\n   * u_out\n   \n   \n   \n* Model \n * Type : Many to many(input 4 dim output pressure)\n","c799b78b":"* Only use 1 direction rnn because inverse prediction of pressure is not reasonable","9acf0330":"* Read 80 data , and slide 80 data","99f9d19c":"# How many Series ","4843bc0d":"# Sub"}}