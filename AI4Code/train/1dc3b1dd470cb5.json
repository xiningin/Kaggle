{"cell_type":{"411636b9":"code","1193c44b":"code","468ab059":"code","da21cda3":"code","18134ef0":"code","e2f0972b":"code","5d0a15bd":"code","7729c330":"code","306d049e":"code","579f03a1":"code","c35e360e":"code","b9495d09":"markdown","6f8d4681":"markdown","77a5ea46":"markdown","06f682d0":"markdown","eaffff5a":"markdown","b1ea807c":"markdown","4331de4e":"markdown","1c5cf0a2":"markdown","fa3890a3":"markdown","208fa971":"markdown","1a18386c":"markdown","cfad83f7":"markdown","23c0938c":"markdown"},"source":{"411636b9":"!pip3 install fbprophet","1193c44b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport matplotlib.font_manager as fm\n\nfrom fbprophet import Prophet\n\ntrain = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\nfont = fm.FontProperties(fname='..\/input\/acmeregular\/Acme-Regular.ttf')\nsample = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\")\n\ntrain = train.drop('row_id',axis=1)\ntest = test.drop('row_id',axis=1)","468ab059":"train.info()","da21cda3":"test.info()","18134ef0":"fig, ax = plt.subplots(figsize=(25,10),facecolor=\"white\")\nax.patch.set_facecolor('white')\nax.axis(\"off\")\n\nspec = gridspec.GridSpec(ncols=12, nrows=1, figure=fig)\nax1 = fig.add_subplot(spec[0, :4],facecolor=\"white\")\nax2 = fig.add_subplot(spec[0, 4:8],facecolor=\"white\")\nax3 = fig.add_subplot(spec[0, 8:],facecolor=\"white\")\n\nexplode = [0.05, 0.05, 0.05]\nax1.pie([*train['country'].value_counts()],explode=explode, shadow=True, startangle=90,colors=['#93BFFF','#D4CF7D','#F0B3AA'])\nax1.axis(\"off\")\n\ncountry = [*train['country'].value_counts().keys()]\nx = [-0.5, 0.5, 0]\ny = [0.6, 0.6, -0.4]\nfor index, con in enumerate(country):\n    ax1.text(s=f\"{con}\", x= x[index], y= y[index], va='center', ha='center', font=font, fontsize=30, color='#61727A')\n    ax1.text(s=f\"{round([*train['country'].value_counts()][index]\/sum([*train['country'].value_counts()])*100,1)}%\",\n             x= x[index], y= y[index]-0.3, va='center', ha='center', font=font, fontsize=50, color='#61727A')\n    \nexplode = [0.05, 0.05]\nax2.pie([*train['store'].value_counts()],explode=explode, shadow=True, startangle=90,colors=['#FFC2C8','#2CAEB8'])\nax2.axis(\"off\")\nstore = [*train['store'].value_counts().keys()]\nx = [-0.5, 0.5]\ny = [0.1, 0.1]\nfor index, store in enumerate(store):\n    ax2.text(s=f\"{store}\", x= x[index], y= y[index], va='center', ha='center', font=font, fontsize=30, color='#61727A')\n    ax2.text(s=f\"{round([*train['store'].value_counts()][index]\/sum([*train['store'].value_counts()])*100,1)}%\",\n             x= x[index], y= y[index]-0.3, va='center', ha='center', font=font, fontsize=50, color='#61727A')\n    \nexplode = [0.05, 0.05, 0.05]\nax3.pie([*train['product'].value_counts()],explode=explode, shadow=True, startangle=90,colors=['#FFDFC2','#EAE3FF','#D1FFD5'])\nax3.axis(\"off\")\nproduct = [*train['product'].value_counts().keys()]\nx = [-0.5, 0.5, 0]\ny = [0.6, 0.6, -0.4]\nfor index, pro in enumerate(product):\n    ax3.text(s=f\"{pro}\", x= x[index], y= y[index], va='center', ha='center', font=font, fontsize=25, color='#61727A')\n    ax3.text(s=f\"{round([*train['product'].value_counts()][index]\/sum([*train['product'].value_counts()])*100,1)}%\",\n             x= x[index], y= y[index]-0.3, va='center', ha='center', font=font, fontsize=50, color='#61727A')\n    \nax.text(s=\"The dataset's count percentage\", x= 0.5, y= 0.9, font=font, fontsize=50, ha='center')\n\nplt.show()","e2f0972b":"train['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\n\nfig, ax = plt.subplots(figsize=(25,10),facecolor=\"white\")\n\ncolor = ['#93BFFF','#D4CF7D','#F0B3AA']\ntext_position = [900,1000,950]\nfor index, country in enumerate(train['country'].unique()):\n    tmp = train[train['country']==country].groupby('date').mean()\n    tmp = tmp.resample('1W').mean()\n    plt.plot(tmp, lw = 3, color = color[index] )\n    plt.text(s=country, x=pd.to_datetime(\"2015- 02-01\"),y=text_position[index], font=font, fontsize=25,color=color[index])\n    \n    \nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nax.set_xticks([])\nax.set_yticks([])\nax.set_xlim(pd.to_datetime(\"2015-01-01\"),)\n\nfor date in pd.date_range(start=\"2015-01-01\",end=\"2018-12-31\",freq='6M'):\n    ax.text(s=date.strftime('%Y-%m-%d'), x=date, y=170, font=font, fontsize=20, va='center', ha='center')\n    \nfor num in range(200, 1200, 200):\n    ax.text(s=num, x=pd.to_datetime(\"2014-12-15\"), y=num, font=font, fontsize=20, va='center', ha='right')\n    \nplt.show()","5d0a15bd":"fig, ax = plt.subplots(figsize=(25,10),facecolor=\"white\")\n\ncolor = ['#FFC2C8','#2CAEB8']\ntext_position = [900,950]\nfor index, country in enumerate(train['store'].unique()):\n    tmp = train[train['store']==country].groupby('date').mean()\n    tmp = tmp.resample('1W').mean()\n    plt.plot(tmp, lw = 3, color = color[index] )\n    plt.text(s=country, x=pd.to_datetime(\"2015- 02-01\"),y=text_position[index], font=font, fontsize=25,color=color[index])\n    \nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_xticks([])\nax.set_yticks([])\nax.set_xlim(pd.to_datetime(\"2015-01-01\"),)\nfor date in pd.date_range(start=\"2015-01-01\",end=\"2018-12-31\",freq='6M'):\n    ax.text(s=date.strftime('%Y-%m-%d'), x=date, y=170, font=font, fontsize=20, va='top', ha='center')\n    \nfor num in range(200, 1200, 200):\n    ax.text(s=num, x=pd.to_datetime(\"2014-12-15\"), y=num, font=font, fontsize=20, va='center', ha='right')\n    \nplt.show()","7729c330":"fig, ax = plt.subplots(figsize=(25,10),facecolor=\"white\")\n\ncolor = ['#FFDFC2','#EAE3FF','#D1FFD5']\ntext_position = [1100,1200,1150]\nfor index, country in enumerate(train['product'].unique()):\n    tmp = train[train['product']==country].groupby('date').mean()\n    tmp = tmp.resample('1W').mean()\n    plt.plot(tmp, lw = 3, color = color[index] )\n    plt.text(s=country, x=pd.to_datetime(\"2015- 02-01\"),y=text_position[index], font=font, fontsize=25,color=color[index])\n    \nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_xticks([])\nax.set_yticks([])\nax.set_xlim(pd.to_datetime(\"2015-01-01\"),)\nfor date in pd.date_range(start=\"2015-01-01\",end=\"2018-12-31\",freq='6M'):\n    ax.text(s=date.strftime('%Y-%m-%d'), x=date, y=60, font=font, fontsize=20, va='center', ha='center')\n    \nfor num in range(200, 1400, 200):\n    ax.text(s=num, x=pd.to_datetime(\"2014-12-15\"), y=num, font=font, fontsize=20, va='center', ha='right')\n    \nplt.show()","306d049e":"country = train['country'].unique()\nstore = train['store'].unique()\nproduct = train['product'].unique()\n\narr = []\n\nfor i in range(3):\n    for j in range(2):\n        for k in range(3):\n            arr.append([country[i], store[j], product[k]])\n            \nm = [Prophet() for i in range(0,18)]","579f03a1":"pred = []\n\nfor index, com in enumerate(arr):\n    tmp = train[(train['country'] == com[0]) & (train['store'] == com[1]) & (train['product'] == com[2])][['date','num_sold']]\n    tmp.columns=['ds','y']\n    m[index].fit(tmp)\n    future = m[index].make_future_dataframe(periods=365)\n    forecast = m[index].predict(future)[['ds', 'yhat']].tail(365)\n    pred.append(forecast)    ","c35e360e":"for i in range(18):\n    pred[i]['country'] = arr[i][0]\n    pred[i]['store'] = arr[i][1]\n    pred[i]['product'] = arr[i][2]\n    pred[i].columns = ['date',f'yhat_{i}','country','store','product']\n    \nfor i in range(18):\n    test = pd.merge(test, pred[i],on = ['date','country','store','product'],how='outer')\n    \ntest = test.fillna(0)\ntest['target'] = test['yhat_0'] +test['yhat_1'] +test['yhat_2'] +test['yhat_3'] +test['yhat_4'] + \\\n                test['yhat_5'] +test['yhat_6'] +test['yhat_7'] + test['yhat_8'] +test['yhat_9'] + \\\n                test['yhat_10'] +test['yhat_11'] +test['yhat_12'] +test['yhat_13'] +test['yhat_14'] + \\\n                test['yhat_15'] + test['yhat_16']+test['yhat_17']\n\nsample['num_sold'] = test['target']\nsample.to_csv(\"submit.csv\", index=None)","b9495d09":"Luckly, we have same size dataset \n\nFirst, Countries. It has 'Finland', 'Norway', 'Sweden'\n\nSecond, Store, It has 'KaggleMart', 'KaggleRama'\n\nLastly, Product, It has 'Kaggle Mug', 'Kaggle Hat', 'Kaggle Sticker'","6f8d4681":"![](https:\/\/miro.medium.com\/max\/964\/0*tVCene42rgUTNv9Q.png)\n\nHello, Kaggler. Happy New year ! \n\nIt's my first work in 2022.\nThis time, I try Simple EDA and Facebook Prophet","77a5ea46":"Now, Make Model and predict\n\nAs you know fbprophet need only datetime and target value\n\nSo, we need to classification to use fbprophet","06f682d0":"Store also, show difference. \n\nKaggleRama is more higher than KaggleMart","eaffff5a":"# Install fbprophet\n\nyou should install it first. !","b1ea807c":"# Import Libraries and Load dataset","4331de4e":"I use pandas and Prophet to predict. \n\nAnd others to visualization! If you want only predict, Use only pandas and Prophet.","1c5cf0a2":"# Check dataset !","fa3890a3":"And then predict use prophet. \n\nIt didn't perform well, but it's simple and useful for visualization.","208fa971":"I made 18 models. that mean I made all type <country, store, product> ","1a18386c":"# Make Model","cfad83f7":"Products also recorded another sold amount.\n\nKaggle Hat > Kaggle Sticker > Kaggle Mug","23c0938c":"If you see this chart, We can know that, the product's sold size is Norway > Sweden > Finland"}}