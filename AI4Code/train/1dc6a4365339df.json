{"cell_type":{"fd826a41":"code","bb0c2200":"code","a35402d8":"code","e97d5168":"code","51fb48bb":"code","854c81ea":"code","4adff23c":"code","00053de9":"code","69ed7994":"code","1d4f3e28":"code","8a9af2a0":"code","87c38602":"code","8e9b72f7":"code","cda2ece1":"code","413d1a63":"code","42ede984":"code","1c87784b":"code","99d4056a":"code","57de0af6":"code","d7e9261b":"code","7f966ac5":"code","8e98d4d8":"code","82203870":"code","42862a52":"code","04ec3488":"code","f34fe044":"code","048a3fef":"code","d7e1a815":"code","5317e745":"code","b87ef286":"code","2e694902":"code","d9ebba60":"code","82b936ec":"code","1b48d87a":"code","ab447810":"code","dc335a6e":"code","03eeb170":"code","50594733":"code","2ad99e5c":"code","2b34a5fe":"code","ba371c00":"code","283c86e8":"code","45720b43":"code","a29947eb":"code","a3feee58":"code","b38019da":"code","69312b3e":"code","91272b6a":"code","964d1846":"code","f6731573":"code","75d18157":"code","c6b98b72":"code","40d50be4":"code","921bc710":"code","6ecf6f45":"code","1c95a3fc":"code","c674c9fd":"code","3f7b12df":"code","5077e76b":"code","494f6428":"code","19528ec0":"code","4bf0ed8c":"code","90b3e3b7":"code","3fc0b847":"code","2874b34f":"markdown","081840e8":"markdown","397168b5":"markdown","aaa0449e":"markdown","4b7e3983":"markdown","924dd96a":"markdown","2c99c0e2":"markdown","1aff5e2e":"markdown","baf026d6":"markdown","06f2b216":"markdown"},"source":{"fd826a41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.\n\n","bb0c2200":"df = pd.read_csv('..\/input\/iris-dataset\/iris.data.csv', header=None)\n","a35402d8":"df.head()","e97d5168":"df.tail()","51fb48bb":"y = df.iloc[:,4].values","854c81ea":"np.unique(y)","4adff23c":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()","00053de9":"le = le.fit(y)","69ed7994":"y = le.transform(y)","1d4f3e28":"y","8a9af2a0":"le.classes_","87c38602":"X = df.iloc[:,[2,3]].values","8e9b72f7":"X","cda2ece1":"X.shape, y.shape","413d1a63":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1, stratify=y)","42ede984":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","1c87784b":"print('Labels counts in y:', np.bincount(y))\nprint('Labels counts in y_train:', np.bincount(y_train))\nprint('Labels counts in y_test:', np.bincount(y_test))","99d4056a":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","57de0af6":"X_train_std","d7e9261b":"X_test_std","7f966ac5":"from sklearn.linear_model import Perceptron\n\nppn = Perceptron(max_iter=40, eta0=0.1, random_state=1)\nppn.fit(X_train_std, y_train)","8e98d4d8":"y_pred = ppn.predict(X_test_std)","82203870":"y_pred","42862a52":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","04ec3488":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","f34fe044":"from matplotlib.colors import ListedColormap\nimport matplotlib.pyplot as plt\n\n\ndef plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):\n\n    # setup marker generator and color map\n    markers = ('s', 'x', 'o', '^', 'v')\n    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')\n    cmap = ListedColormap(colors[:len(np.unique(y))])\n\n    # plot the decision surface\n    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),\n                           np.arange(x2_min, x2_max, resolution))\n    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)\n    Z = Z.reshape(xx1.shape)\n    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)\n    plt.xlim(xx1.min(), xx1.max())\n    plt.ylim(xx2.min(), xx2.max())\n\n    for idx, cl in enumerate(np.unique(y)):\n        plt.scatter(x=X[y == cl, 0], \n                    y=X[y == cl, 1],\n                    alpha=0.8, \n                    c=colors[idx],\n                    marker=markers[idx], \n                    label=cl, \n                    edgecolor='black')\n\n    # highlight test samples\n    if test_idx:\n        # plot all samples\n        X_test, y_test = X[test_idx, :], y[test_idx]\n\n        plt.scatter(X_test[:, 0],\n                    X_test[:, 1],\n                    c='',\n                    edgecolor='black',\n                    alpha=1.0,\n                    linewidth=1,\n                    marker='o',\n                    s=100, \n                    label='test set')","048a3fef":"X_combined_std = np.vstack((X_train_std, X_test_std))\ny_combined = np.hstack((y_train, y_test))","d7e1a815":"X_combined_std.shape, y_combined.shape","5317e745":"y_train.shape, y_test.shape","b87ef286":"plot_decision_regions(X=X_combined_std, y=y_combined,\n                      classifier=ppn, test_idx=range(105, 150))\nplt.xlabel('petal length [standardized]')\nplt.ylabel('petal width [standardized]')\nplt.legend(loc='upper left')\nplt.show()","2e694902":"x1_min, x1_max = X_combined_std[:, 0].min() - 1, X_combined_std[:, 0].max() + 1\nx2_min, x2_max = X_combined_std[:, 1].min() - 1, X_combined_std[:, 1].max() + 1","d9ebba60":"x1_min, x1_max, x2_min, x2_max","82b936ec":"xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, 0.02),np.arange(x2_min, x2_max, 0.02))","1b48d87a":"xx1.shape, xx2.shape","ab447810":"nx, ny = (3, 3)\nx = np.linspace(0, 2, nx)\ny = np.linspace(0, 1, ny)","dc335a6e":"x","03eeb170":"y","50594733":"xv, yv = np.meshgrid(x, y)","2ad99e5c":"xv","2b34a5fe":"yv","ba371c00":"xv.ravel()","283c86e8":"(np.array([xx1.ravel(), xx2.ravel()]).T).shape","45720b43":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression(random_state=0, solver='lbfgs',multi_class='multinomial').fit(X_train_std, y_train)\ny_pred = clf.predict(X_test_std)\n","a29947eb":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","a3feee58":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","b38019da":"from sklearn.svm import SVC\nclf = SVC(gamma='auto')\nclf.fit(X_train_std, y_train) \nSVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n    decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n    max_iter=-1, probability=False, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)\ny_pred = clf.predict(X_test_std)\n\n","69312b3e":"print('Misclassified samples: %d' % (y_test != y_pred).sum())","91272b6a":"from sklearn.metrics import accuracy_score\n\nprint('Accuracy: %.2f' % accuracy_score(y_test, y_pred))","964d1846":"from io import StringIO\ncsv_data = \\\n'''A,B,C,D\n1.0,2.0,3.0,4.0\n5.0,6.0,,8.0\n10.0,11.0,12.0,'''\ndf = pd.read_csv(StringIO(csv_data))\ndf","f6731573":"# remove rows that contain missing values\n\ndf.dropna(axis=0)","75d18157":"# remove columns that contain missing values\n\ndf.dropna(axis=1)","c6b98b72":"# only drop rows where all columns are NaN\n\ndf.dropna(how='all')","40d50be4":"# drop rows that have less than 3 real values \n\ndf.dropna(thresh=4)","921bc710":"# only drop rows where NaN appear in specific columns (here: 'C')\n\ndf.dropna(subset=['C'])","6ecf6f45":"# impute missing values via the column mean\n\nfrom sklearn.preprocessing import Imputer\n\nimr = Imputer(missing_values='NaN', strategy='mean', axis=0)\nimr = imr.fit(df.values)\nimputed_data = imr.transform(df.values)\nimputed_data","1c95a3fc":"import pandas as pd\n\ndf = pd.DataFrame([['green', 'M', 10.1, 'class2'],\n                   ['red', 'L', 13.5, 'class1'],\n                   ['blue', 'XL', 15.3, 'class2']])\n\ndf.columns = ['color', 'size', 'price', 'classlabel']\ndf","c674c9fd":"from sklearn.preprocessing import LabelEncoder\nX = df[['color', 'size', 'price']].values\n\ncolor_le_1 = LabelEncoder()\nX[:, 0] = color_le_1.fit_transform(X[:, 0])\nX","3f7b12df":"color_le_2 = LabelEncoder()\nX[:, 1] = color_le_2.fit_transform(X[:, 1])\nX","5077e76b":"from sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(\n    [('oh_enc', OneHotEncoder(sparse=False), [0, 1]),], remainder='passthrough')","494f6428":"ct.fit_transform(X)","19528ec0":"df_wine = pd.read_csv('..\/input\/wine-quality\/winequalityN.csv')","4bf0ed8c":"df_wine","90b3e3b7":"np.unique(df_wine['type'])","3fc0b847":"from IPython.display import Image\nImage(\"..\/input\/percetron-image\/Perceptron.PNG\")","2874b34f":"# Encoding (One Hot Encoding)","081840e8":"# Part-2 Data Manipulation","397168b5":"# Task 2 Apply different kind of filtering to clean the data","aaa0449e":"# Wine Dataset","4b7e3983":"# Assignment - Implement a perceptron from scratch and apply it to iris dataset given here.","924dd96a":"# Imputing missing values","2c99c0e2":"# Part-1 Applying Different Estimators For Simple Classification Problem","1aff5e2e":"# Task 1 Use Classifiers: Logistic Regression, SVM and Decision Tree from sklearn","baf026d6":"# Eliminating samples or features with missing values","06f2b216":"# Training a perceptron via scikit-learn"}}