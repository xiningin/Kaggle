{"cell_type":{"63424f94":"code","bd321911":"code","5ffab418":"code","1d6adf22":"code","8ff3d53a":"code","e9322704":"code","62ff54e7":"code","048b45a7":"code","de316bf5":"code","329a9d70":"code","9172a34d":"code","109ed3b6":"code","6a9f0032":"code","86bd3bd3":"code","2fea0fac":"code","19af2deb":"code","e52c2b9a":"code","f4788763":"code","0df8e0ce":"code","3badbfb7":"code","bea65beb":"code","a40c82b9":"code","91a72f7a":"code","a1096a86":"code","b2e6da93":"code","4be2c3e4":"code","0f5d004e":"code","ae7547c4":"code","a69296c3":"code","b01de87b":"code","6c477e38":"code","d8006cef":"code","185cad92":"code","2eea679c":"code","80b90d45":"code","6727ca0a":"code","1da6640c":"code","f73486c6":"code","b98d6a91":"code","807266b9":"code","19e4f08e":"code","b20d966e":"code","f4e20e8b":"code","6c3acd88":"code","ddbeb641":"code","c9e4f934":"code","5a74ee7d":"code","ea1fabd6":"code","c607b0e0":"code","b0dc7380":"code","c4efbf5a":"code","02196953":"code","9dc460f4":"code","d4356082":"code","7389d3fd":"code","80fae3c1":"code","bd26034d":"markdown","b1f91116":"markdown","713bf613":"markdown","3fa88fd0":"markdown","adbce729":"markdown","0108faf4":"markdown","c54e7711":"markdown"},"source":{"63424f94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd321911":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport ggplot\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error,r2_score,mean_squared_log_error\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV","5ffab418":"train=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\n","1d6adf22":"train.head(20)","8ff3d53a":"train=train.loc[~(train['date_time']=='2011-01-01 00:00:00')].reset_index(drop=True)\n","e9322704":"train.info()","62ff54e7":"test.head()","048b45a7":"test.info()","de316bf5":"train.isnull().sum()","329a9d70":"train.describe().T","9172a34d":"all_data = pd.concat([train, test])\n# convert to datatime format\nall_data['date_time'] = pd.to_datetime(all_data['date_time'])\nall_data.head()","109ed3b6":"all_data.tail()","6a9f0032":"all_data.shape","86bd3bd3":"import math\n\ndef pb_add(X):\n    X['day'] = X.date_time.dt.weekday\n    is_odd = (X['sensor_4'] < 646) & (X['absolute_humidity'] < 0.238)\n    X['is_odd'] = is_odd\n    diff = X['date_time'] - min(X['date_time'])\n    trend = diff.dt.days\n    X['f1s'] = np.sin(trend * 2 * math.pi \/ (365 * 1)) \n    X['f1c'] = np.cos(trend * 2 * math.pi \/ (365 * 1))\n    X['f2s'] = np.sin(2 * math.pi * trend \/ (365 * 2)) \n    X['f2c'] = np.cos(2 * math.pi * trend \/ (365 * 2)) \n    X['f3s'] = np.sin(2 * math.pi * trend \/ (365 * 3)) \n    X['f3c'] = np.cos(2 * math.pi * trend \/ (365 * 3)) \n    X['f4s'] = np.sin(2 * math.pi * trend \/ (365 * 4)) \n    X['f4c'] = np.cos(2 * math.pi * trend \/ (365 * 4)) \n    X['fh1s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh1c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh2s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh2c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh3s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    X['fh3c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    \n    sensor_features = [\n        'deg_C', \n        'relative_humidity', 'absolute_humidity', \n        'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5' ]\n    \n    lags = [-1, -4, -24, -7 * 24]  # last 4 hours, last 2 days, last 4 weeks\n    for sensor_feature in sensor_features:\n        this = X[sensor_feature]\n        # look back\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(lag)}b'\n            this_f = X[sensor_feature].shift(lag)\n            X[feature] = (this_f - this).fillna(0)\n        # look forwards\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(-lag)}f'\n            this_f = X[sensor_feature].shift(-lag)\n            X[feature] = (this_f - this).fillna(0)\n            \n    return X","2fea0fac":"# The months will be used for folds split\nmonths = all_data[\"date_time\"].dt.month[:len(train)]\n## New idea\nall_data[\"hour\"] = all_data[\"date_time\"].dt.hour\nall_data[\"working_hours\"] =  all_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_data[\"is_weekend\"] = (all_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nall_data['hr'] = all_data.date_time.dt.hour*60+all_data.date_time.dt.minute\nall_data['satday'] = (all_data.date_time.dt.weekday==5).astype(\"int\")\nall_data[\"SMC\"] = (all_data[\"absolute_humidity\"] * 100) \/ all_data[\"relative_humidity\"]\nall_data.drop(columns = 'hour', inplace = True)\nall_data","19af2deb":"# The months will be used for folds split\nmonths = all_data[\"date_time\"].dt.month[:len(train)]\n## New idea\nall_data[\"hour\"] = all_data[\"date_time\"].dt.hour\nall_data[\"working_hours\"] =  all_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_data[\"is_weekend\"] = (all_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nall_data['hr'] = all_data.date_time.dt.hour*60+all_data.date_time.dt.minute\nall_data['satday'] = (all_data.date_time.dt.weekday==5).astype(\"int\")\nall_data[\"SMC\"] = (all_data[\"absolute_humidity\"] * 100) \/ all_data[\"relative_humidity\"]\nall_data.drop(columns = 'hour', inplace = True)\n\n\n# convert datetime to timestamp(s)\n# included::: all_data['time'] = all_data['date_time'].astype(np.int64)\/\/10**9\n\nall_data = pb_add(all_data.copy())\n\nall_data.drop(columns = 'date_time', inplace = True)","e52c2b9a":"all_data","f4788763":"df_train=all_data.iloc[:len(train),:]","0df8e0ce":"df_train","3badbfb7":"#sns.histplot?","bea65beb":"plt.figure(figsize=(20,10))\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.5)\nfor i,trgt in enumerate(train.columns[1:]):\n    plt.subplot(4,3,i+1)\n    sns.histplot(train[trgt],kde=True,color='r') \n","a40c82b9":"#df_train=train.drop('date_time',axis=1)","91a72f7a":"abs(df_train.corr()[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']])","a1096a86":"sns.heatmap(abs(df_train.corr()[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]),center=0,annot=True, fmt=\".3f\",linewidths=.5)\nsns.set(rc={'figure.figsize':(40,40)})","b2e6da93":"df_train","4be2c3e4":"'''\nimport statsmodels.api as sm\nx=df_train.iloc[:,:-3]\ny1=df_train['target_carbon_monoxide']\ny2=df_train['target_benzene']\ny3=df_train['target_nitrogen_oxides']\n\nlm1=sm.OLS(y1,x).fit()\nlm2=sm.OLS(y2,x).fit()\nlm3=sm.OLS(y3,x).fit() \n\n'''\n","0f5d004e":"#lm1.summary().tables[1]","ae7547c4":"#lm2.summary().tables[1]","a69296c3":"#lm3.summary().tables[1]","b01de87b":"#df_train.columns[:-3]","6c477e38":"#dum=abs(df_train.corr()[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']])\n","d8006cef":"\n#plt.figure(figsize=(15,15))\n#plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.5)\n#for i,trgt in enumerate(['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']):\n    \n#    plt.subplot(2,2,i+1)\n#    plt.title(trgt+' corr')\n#    ax=sns.barplot(x=dum.index,y=trgt,data=dum)\n#    ax.set_xticklabels(labels=ax.get_xticklabels(), rotation=90);\n    \n    ","185cad92":"#we dropped the following columns because of they have little effects on targets\n#df_train=df_train.drop(['deg_C','relative_humidity','absolute_humidity'],axis=1)","2eea679c":"# function for cleaning outlier \ndef cleanOutlier(data):\n    \n    for feature in data.columns:\n         if feature not in ['target_carbon_monoxide', 'target_benzene','target_nitrogen_oxides']:\n            q1=data[feature].quantile(0.25)\n            q3=data[feature].quantile(0.75)\n            iqr=q3-q1\n            floor=q1-1.5*iqr\n            ceiling=q3+1.5*iqr\n            data[feature][data[feature]>ceiling]=ceiling\n            data[feature][data[feature]<floor]=floor  \n        \n    return data\n\ndum2=cleanOutlier(df_train.copy())","80b90d45":"#now improving our own model","6727ca0a":"df_train=dum2.copy()\n","1da6640c":"df_train","f73486c6":"sc=StandardScaler()\n","b98d6a91":"X=df_train.copy().drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],axis=1)\ndf_test=all_data.iloc[len(train):,:].drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'],axis=1)\ny_tcm=df_train['target_carbon_monoxide']\ny_tb=df_train['target_benzene']\ny_tno=df_train['target_nitrogen_oxides']","807266b9":"X","19e4f08e":"df_test","b20d966e":"sc=StandardScaler()\nX_=sc.fit_transform(X)\ndf_test=sc.transform(df_test)\n\ntcm_train,tcm_val,y_tcm_train,y_tcm_val=train_test_split(X_,y_tcm,test_size=0.25,random_state=42)\ntb_train,tb_val,y_tb_train,y_tb_val    =train_test_split(X_,y_tb, test_size=0.25,random_state=32)\ntno_train,tno_val,y_tno_train,y_tno_val=train_test_split(X_,y_tno,test_size=0.25,random_state=52)\n\n#tcm_train=sc.fit_transform(tcm_train)\n#tcm_val=sc.transform(tcm_val)\n\n#tb_train=sc.fit_transform(tb_train)\n#tb_val=sc.transform(tb_val)\n\n#tno_train=sc.fit_transform(tno_train)\n#tno_val=sc.transform(tno_val)\n\nprint('tcm_train shape: {}, tcm_val shape: {}, y_tcm_train shape: {}, y_tcm_val shape: {}'.format(tcm_train.shape,tcm_val.shape,y_tcm_train.shape,y_tcm_val.shape))\nprint('tb_train shape:  {}, tb_val shape:  {}, y_tb_train shape:  {}, y_tb_val shape:  {}'.format(tb_train.shape,tcm_val.shape,y_tb_train.shape,y_tb_val.shape))\nprint('tno_train shape: {}, tno_val shape: {}, y_tno_train shape: {}, y_tno_valshape:  {}'.format(tno_train.shape,tno_val.shape,y_tno_train.shape,y_tno_val.shape))\n","f4e20e8b":"# from sklearn.metrics import SCORERS\n# list(SCORERS.keys())","6c3acd88":"model_tcm=xgb.XGBRegressor(    seed=42,\n                               learning_rate=0.1,\n                               max_debth=5,\n                               reg_lamba=0.1,\n                               subsample=0.9,\n                               max_leaves=10,\n                               colsample_bytree=0.5,\n                               n_estimators=100\n                               ).fit(tcm_train,y_tcm_train,\n                                     verbose=True,\n                                     early_stopping_rounds=5,\n                                     eval_metric='rmse',\n                                     eval_set=[(tcm_val,y_tcm_val)])\n\nmodel_tcm_train_pred=model_tcm.predict(tcm_train)\nmodel_tcm_val_pred=model_tcm.predict(tcm_val)\nmodel_test_pred=model_tcm.predict(df_test)\n\n\nprint('---target_carbon_monoxide---')\n\nprint('train_rmse : {}'.format(np.sqrt(mean_squared_error(model_tcm_train_pred,y_tcm_train))))\nprint('train_r2   : {}'.format(                  r2_score(model_tcm_train_pred,y_tcm_train)))\nprint('val_rmse   : {}'.format(np.sqrt(mean_squared_error(model_tcm_val_pred,y_tcm_val))))\nprint('val_r2     : {}'.format(                  r2_score(model_tcm_val_pred,y_tcm_val)))\n\nprint('RMLSE      : {}'.format(np.sqrt(mean_squared_log_error(model_tcm_val_pred,y_tcm_val))))\n\n\n","ddbeb641":"residual=model_tcm_val_pred-y_tcm_val\ndf_dum=pd.DataFrame(np.vstack([model_tcm_val_pred,y_tcm_val,residual]).T,columns=['Pred','True','Residual'])\ndf_dum ","c9e4f934":"plt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\nplt.title('Pred and True')\nsns.scatterplot(x='Pred',y='True',data=df_dum);\nplt.subplot(2,2,2)\nplt.title('Residual')\nsns.scatterplot(x=df_dum.index,y='Residual',data=df_dum);","5a74ee7d":"#grid.best_params_","ea1fabd6":"model_tb=xgb.XGBRegressor(   \n                            reg_alpha =8,\n                            colsample_bytree = 0.9,\n                            max_leaves=5,\n                            n_estimators=200,\n                            learning_rate=0.1,\n                            gamma=7,\n                            max_depth=15 ,\n                            random_state=42).fit(tb_train,y_tb_train,verbose=True)\n\n\n\n\n\nmodel_tb_train_pred=model_tb.predict(tb_train)\nmodel_tb_val_pred=model_tb.predict(tb_val)\nmodel_test_pred=model_tb.predict(df_test)\n\nprint('---target_benzene---')\nprint('train_rmse : {}'.format(np.sqrt(mean_squared_error(model_tb_train_pred,y_tb_train))))\nprint('train_r2   : {}'.format(                  r2_score(model_tb_train_pred,y_tb_train)))\nprint('val_rmse  : {}'.format(np.sqrt(mean_squared_error(model_tb_val_pred,y_tb_val))))\nprint('val_r2    : {}'.format(                  r2_score(model_tb_val_pred,y_tb_val)))\nprint('RMLSE      : {}'.format(np.sqrt(mean_squared_log_error(model_tb_val_pred,y_tb_val))))","c607b0e0":"residual=model_tb_val_pred-y_tb_val\ndum2=pd.DataFrame(np.vstack([model_tb_val_pred,y_tb_val,residual]).T,columns=['pred','true','residual'])\ndum2","b0dc7380":"plt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\nplt.title('pred and true')\nsns.scatterplot(x='pred',y='true',data=dum2);\nplt.subplot(2,2,2)\nplt.title('Residual')\nsns.scatterplot(x=dum2.index,y='residual',data=dum2);","c4efbf5a":"\nmodel_tno=xgb.XGBRegressor( reg_lambda=0.9,\n                            colsample_bytree = 0.5,\n                            max_leaves=8,\n                            n_estimators=200,\n                            learning_rate=0.1,\n                            gamma=10,\n                            max_depth=10 ,\n                            random_state=42).fit(tno_train,y_tno_train,verbose=True)\n\n\n\n\n\nmodel_tno_train_pred=model_tno.predict(tno_train)\nmodel_tno_val_pred=model_tno.predict(tno_val)\nmodel_test_pred=model_tno.predict(df_test)\n\n\nprint('---target_nitrogen_oxides---')\nprint('train_rmse : {}'.format(np.sqrt(mean_squared_error(model_tno_train_pred,y_tno_train))))\nprint('train_r2   : {}'.format(                  r2_score(model_tno_train_pred,y_tno_train)))\nprint('val_rmse   : {}'.format(np.sqrt(mean_squared_error(model_tno_val_pred,y_tno_val))))\nprint('val_r2     : {}'.format(                  r2_score(model_tno_val_pred,y_tno_val)))\n\nprint('RMLSE      : {}'.format(np.sqrt(mean_squared_log_error(model_tno_val_pred,y_tno_val))))\n","02196953":"residual=model_tno_val_pred-y_tno_val\ndf_dum=pd.DataFrame(np.vstack([model_tno_val_pred,y_tno_val,residual]).T,columns=['Pred','True','Residual'])\ndf_dum","9dc460f4":"plt.figure(figsize=(15,15))\nplt.subplot(2,2,1)\nplt.title('Pred and True')\nsns.scatterplot(x='Pred',y='True',data=df_dum);\nplt.subplot(2,2,2)\nplt.title('Residual')\nsns.scatterplot(x=df_dum.index,y='Residual',data=df_dum);","d4356082":"sample_submission['target_carbon_monoxide']=model_tcm.predict(df_test)\nsample_submission['target_benzene']=model_tb.predict(df_test)\nsample_submission['target_nitrogen_oxides']=model_tno.predict(df_test)","7389d3fd":"sample_submission","80fae3c1":"sample_submission.to_csv('\/kaggle\/working\/submission.csv', index=False)\n","bd26034d":"# target_carbon_monoxide","b1f91116":"#visualization of outlier of features\nplt.figure(figsize=(200,75))\nplt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=None, hspace=0.5)\n\nfor i,col in enumerate(df_train.columns):\n\n    plt.subplot(33,3,i+1)\n    sns.boxplot(x=col,data=df_train,color='g')","713bf613":"plt.figure(figsize=(10,10))\nfor i,col in enumerate(dum2.columns):\n\n    plt.subplot(5,3,i+1)\n    sns.boxplot(x=col,data=dum2,color='g')","3fa88fd0":"from sklearn.metrics import mean_squared_error,r2_score\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nmodel_params= { \n     'colsample_bytree': [0.4, 0.5,0.6],   # A\u011fac ba\u015f\u0131na de\u011fi\u015fkenlerden al\u0131nacak olan \u00f6rnek say\u0131s\u0131\n     'max_depth': [2,3,4],\n     'max_leaves':[5,10,20],\n     'reg_alpha':[0.1,0.2,0.8],\n}\nmodel=xgb.XGBRegressor()\ngrid=GridSearchCV(model,model_params,cv=10,n_jobs = -1, verbose = 2).fit(tb_train,y_tb_train)\ngrid","adbce729":"\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nparams= { \n     'colsample_bytree': [0.4, 0.5,0.8],   # A\u011fac ba\u015f\u0131na de\u011fi\u015fkenlerden al\u0131nacak olan \u00f6rnek say\u0131s\u0131\n     'max_depth': [2,3,4,20],\n     'max_leaves':[5,10,20],\n     'gamma':[0,0.25,10],\n     'reg_alpha':[0.1,0.2,0.8],\n}\nmodel_tcm=xgb.XGBRegressor()\noptimal_params=GridSearchCV(model_tcm,params,cv=3,n_jobs = -1, verbose = 2,scoring='neg_root_mean_squared_error').fit(tcm_train,y_tcm_train)\noptimal_params.best_params_\n\n","0108faf4":"# target_benzene","c54e7711":"# target_nitrogen_oxides"}}