{"cell_type":{"8a845577":"code","b93aed4c":"code","84795afe":"code","bdf2ace3":"code","2b6747a6":"code","adc7fa52":"code","bca5f392":"code","7b264629":"code","702d38b0":"code","0b12ad7d":"code","fc9b7efc":"code","a31e8ea0":"code","7745bd11":"code","b096fa1f":"code","316a66b6":"code","61c23dc8":"code","78f6f806":"code","c8122169":"code","ece7ede0":"code","849e7405":"code","5ad6a1fa":"code","cdf67fd2":"code","3d988538":"code","f0b4728c":"code","c042c4b9":"code","769d8f36":"code","54261783":"code","d4b3d49b":"code","aca68fa9":"code","6b93d7f7":"code","d8a8a78a":"markdown","65dbc140":"markdown","5d3cba18":"markdown","48b0e08a":"markdown","1cabd529":"markdown","1c005ed7":"markdown","61adb8bf":"markdown","c21d42db":"markdown","35c49c1e":"markdown","090a6218":"markdown","c194dd91":"markdown","e50020d1":"markdown","a98de9eb":"markdown","d5e10198":"markdown","c089f214":"markdown","2e0b0927":"markdown","04add56c":"markdown","21621043":"markdown"},"source":{"8a845577":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nimport time\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom yellowbrick.cluster import KElbowVisualizer\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Configs\npd.options.display.float_format = '{:,.3f}'.format\nsns.set(style=\"whitegrid\")\nplt.style.use('seaborn')\nseed = 42\nnp.random.seed(seed)","b93aed4c":"file_path = '\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv'\ndf = pd.read_csv(file_path)\n\nprint(\"DataSet = {} rows and {} columns\".format(df.shape[0], df.shape[1]))\n\nquantitative = [f for f in df.columns if df.dtypes[f] != 'object']\nqualitative = [f for f in df.columns if df.dtypes[f] == 'object']\n\nprint(\"\\nQualitative Variables: (Numerics)\", \"\\n=>\", quantitative,\n      \"\\n\\nQuantitative Variable: (Strings)\\n=>\", qualitative )\n\ndf.head()","84795afe":"# No Missing Data\ndf.isnull().sum().max()","bdf2ace3":"# Restructure DataFrame\ndict_rename = {'Gender': 'gender', 'Age': 'age', 'Annual Income (k$)': 'income', 'Spending Score (1-100)': 'spending_score'}\ndf = df.rename(dict_rename, axis=1).drop(['CustomerID'], axis =1)\ndf.describe()","2b6747a6":"def eda_categ_feat_desc_plot(series_categorical, title = \"\"):\n    series_name = series_categorical.name\n    val_counts = series_categorical.value_counts()\n    val_counts.name = 'quantity'\n    val_percentage = series_categorical.value_counts(normalize=True)\n    val_percentage.name = \"percentage\"\n    val_concat = pd.concat([val_counts, val_percentage], axis = 1)\n    val_concat.reset_index(level=0, inplace=True)\n    val_concat = val_concat.rename( columns = {'index': series_name} )\n    \n    fig, ax = plt.subplots(figsize = (12,4), ncols=2, nrows=1) # figsize = (width, height)\n    if(title != \"\"):\n        fig.suptitle(title, fontsize=18)\n        fig.subplots_adjust(top=0.8)\n\n    s = sns.barplot(x=series_name, y='quantity', data=val_concat, ax=ax[0])\n    for index, row in val_concat.iterrows():\n        s.text(row.name, row['quantity'], row['quantity'], color='black', ha=\"center\")\n\n    s2 = val_concat.plot.pie(y='percentage', autopct=lambda value: '{:.2f}%'.format(value),\n                             labels=val_concat[series_name].tolist(), legend=None, ax=ax[1],\n                             title=\"Percentage Plot\")\n\n    ax[1].set_ylabel('')\n    ax[0].set_title('Quantity Plot')\n\n    plt.show()","adc7fa52":"def eda_numerical_feat(series, title=\"\", with_label=True, number_format=\"\"):\n    f, (ax1, ax2) = plt.subplots(ncols=2, figsize=(16, 5), sharex=False)\n    if(title != \"\"):\n        f.suptitle(title, fontsize=18)\n    sns.distplot(series, ax=ax1)\n    sns.boxplot(series, ax=ax2)\n    if(with_label):\n        describe = series.describe()\n        labels = { 'min': describe.loc['min'], 'max': describe.loc['max'], \n              'Q1': describe.loc['25%'], 'Q2': describe.loc['50%'],\n              'Q3': describe.loc['75%']}\n        if(number_format != \"\"):\n            for k, v in labels.items():\n                ax2.text(v, 0.3, k + \"\\n\" + number_format.format(v), ha='center', va='center', fontweight='bold',\n                         size=10, color='white', bbox=dict(facecolor='#445A64'))\n        else:\n            for k, v in labels.items():\n                ax2.text(v, 0.3, k + \"\\n\" + str(v), ha='center', va='center', fontweight='bold',\n                     size=10, color='white', bbox=dict(facecolor='#445A64'))\n    plt.show()","bca5f392":"df['age_cat'] = np.nan\nlst = [df]\n\nfor col in lst:\n    col.loc[(col['age'] >= 0) & (col['age'] <= 30), 'age_cat'] = 'Young Adult'\n    col.loc[(col['age'] >  30) & (col['age'] <= 50), 'age_cat'] = 'Adult'\n    col.loc[(col['age'] >  50) & (col['age'] <= 60), 'age_cat'] = 'Senior'\n    col.loc[ col['age'] >  60, 'age_cat'] = 'Elder'\n    \ndf.head()","7b264629":"eda_categ_feat_desc_plot(df['gender'])","702d38b0":"eda_numerical_feat(df['age'])","0b12ad7d":"eda_numerical_feat(df['income'])","fc9b7efc":"eda_numerical_feat(df['spending_score'])","a31e8ea0":"fig, ((ax1, ax2), (ax3,ax4), (ax5, ax6)) = plt.subplots(\n    figsize = (16,14), ncols=2, nrows=3, sharex=False, sharey=False)\n\n# age\nsns.violinplot(x=\"gender\", y=\"age\", data=df, ax=ax1)\nsns.swarmplot(x=\"gender\", y=\"age\", data=df, ax=ax1, palette='rocket')\nsns.distplot(df[ df['gender'] == 'Male']['age'], ax=ax2, label=\"Male\")\nsns.distplot(df[ df['gender'] == 'Female']['age'], ax=ax2, label=\"Female\")\n\n# income\n# sns.boxplot(x=\"gender\", y=\"income\", data=df, ax=ax3)\nsns.violinplot(x=\"gender\", y=\"income\", data=df, ax=ax3)\nsns.swarmplot(x=\"gender\", y=\"income\", data=df, ax=ax3, palette='rocket')\nsns.distplot(df[ df['gender'] == 'Male']['income'], ax=ax4, label=\"Male\")\nsns.distplot(df[ df['gender'] == 'Female']['income'], ax=ax4, label=\"Female\")\n\n# spending_score\nsns.violinplot(x=\"gender\", y=\"spending_score\", data=df, ax=ax5)\nsns.swarmplot(x=\"gender\", y=\"spending_score\", data=df, ax=ax5, palette='rocket')\nsns.distplot(df[ df['gender'] == 'Male']['spending_score'], ax=ax6, label=\"Male\")\nsns.distplot(df[ df['gender'] == 'Female']['spending_score'], ax=ax6, label=\"Female\")\n\n# Config Titles\nfig.suptitle('Features by gender', fontsize=20)\nfont_size = 16\nax1.set_title('age by gender')\nax2.set_title('age by gender')\nax3.set_title('income by gender')\nax4.set_title('income by gender')\nax5.set_title('spending_score by gender')\nax6.set_title('spending_score by gender')\n\nplt.legend();\nplt.show()","7745bd11":"fig, (ax1, ax2) = plt.subplots(figsize = (16,4), ncols=2, sharex=False, sharey=False)\n\nsns.scatterplot(x=\"age\", y=\"income\", data=df, ax=ax1)\nsns.scatterplot(x=\"age\", y=\"spending_score\", data=df, ax=ax2)\nax1.set_title(\"Income by age\")\nax2.set_title('spending_score by age')\nplt.show()","b096fa1f":"fig, ax1 = plt.subplots(figsize = (8,4))\n\nsns.scatterplot(x=\"spending_score\", y=\"income\", data=df, ax=ax1)\nax1.set_title('score by income')\nplt.show()","316a66b6":"fig, (ax1, ax2) = plt.subplots(figsize = (16,4), ncols=2, sharex=False, sharey=False)\n\nsns.scatterplot(x=\"spending_score\", y=\"income\", hue='gender', data=df, ax=ax1, alpha = 0.8)\nax1.set_title('score by income and gender')\n\nsns.scatterplot(x=\"spending_score\", y=\"income\", hue='age_cat', data=df, ax=ax2, alpha = 0.8)\nax2.set_title('score by income and gender')\n\nplt.show()","61c23dc8":"# Convert Gender to LabelEnconder: 0\/1\nlabel_encoder = LabelEncoder()\ndf_pre_processing = df.drop('age_cat',axis=1)\ndf_pre_processing['gender'] = label_encoder.fit_transform(df['gender'])\n\nX0 = df_pre_processing.values\nX0[0]","78f6f806":"map_labels = {0: 'g1', 1: 'g2', 2: 'g3', 3: 'g4', 4: 'g5', 5: 'g6', 6: 'g7',\n               7: 'g8', 8: 'g9', 9: 'g10', 10: 'g11', 11: 'g12', 12: 'g13'}","c8122169":"df.head()","ece7ede0":"fig, (ax1, ax2, ax3) = plt.subplots(figsize = (8,13), nrows=3, sharex=False, sharey=False)\n\nX1 = df[['age','spending_score']].values\nX2 = df[['income','spending_score']].values\nX3 = df[['income','age']].values\n\nmodel = KMeans()\n\nviz1 = KElbowVisualizer(model, k=(3,12), ax=ax1)\nviz1.fit(X1)\nviz1.finalize()\nax1.set_title('Best K to Kmeans: age x spending_score')\n\nviz2 = KElbowVisualizer(model, k=(3,12), ax=ax2)\nviz2.fit(X2)\nviz2.finalize()\nax2.set_title('Best K to Kmeans: income x spennding_score')\n\nviz3 = KElbowVisualizer(model, k=(3,12), ax=ax3)\nviz3.fit(X3)\nviz3.finalize()\nax3.set_title('Best K to Kmeans: income x age')\n\nplt.show()","849e7405":"fig, (ax1, ax2, ax3) = plt.subplots(figsize = (18,4), ncols=3)\n\n# K-MEANS-01\n\nX, f1, f2, clusters = X1, 'age', 'spending_score', 4\n\nkmeans = KMeans(n_clusters = clusters ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan')\nkmeans.fit(X)\nlabels, centroids = [map_labels[label_num] for label_num in kmeans.labels_], kmeans.cluster_centers_\n\nsns.scatterplot(x =f1 ,y = f2 , data=df, hue=labels, ax=ax1)\nsns.scatterplot(x = centroids[: , 0] , y =  centroids[: , 1] ,\n                palette = 'Set2' , alpha = 0.5, s=400, ax=ax1)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) # legend outside\nax1.set_title('Kmeans: {} groups: {} x {}'.format(str(clusters), f1, f2), fontsize=16)\n\n# K-MEANS-02\n\nX, f1, f2, clusters = X2, 'income', 'spending_score', 5\nkmeans = KMeans(n_clusters = clusters ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan')\nkmeans.fit(X)\nlabels, centroids = [map_labels[label_num] for label_num in kmeans.labels_], kmeans.cluster_centers_\n\nsns.scatterplot(x =f1 ,y = f2 , data=df, hue=labels, ax=ax2)\nsns.scatterplot(x = centroids[: , 0] , y =  centroids[: , 1] ,\n                palette = 'Set3' , alpha = 0.5, s=400, ax=ax2)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) # legend outside\nax2.set_title('Kmeans: {} groups: {} x {}'.format(str(clusters), f1, f2), fontsize=16)\n\n# K-MEANS-03\n\nX, f1, f2, clusters = X3, 'income', 'age', 6\nkmeans = KMeans(n_clusters = clusters ,init='k-means++', n_init = 10 ,max_iter=300, \n                        tol=0.0001,  random_state= 111  , algorithm='elkan')\nkmeans.fit(X)\nlabels, centroids = [map_labels[label_num] for label_num in kmeans.labels_], kmeans.cluster_centers_\n\nsns.scatterplot(x =f1 ,y = f2 , data=df, hue=labels, ax=ax3)\nsns.scatterplot(x = centroids[: , 0] , y =  centroids[: , 1] ,\n                palette = 'Set3' , alpha = 0.5, s=400, ax=ax3)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) # legend outside\nax3.set_title('Kmeans: {} groups: {} x {}'.format(str(clusters), f1, f2), fontsize=16)\n\nplt.show()","5ad6a1fa":"!pip install pycaret\nfrom pycaret.clustering import *","cdf67fd2":"df.head()","3d988538":"pycaret_cluster_setup = setup(df, normalize = True,\n                              categorical_features = ['gender'],\n                              ignore_features = ['age_cat'],\n                              session_id = 42)","f0b4728c":"kmeans = create_model('kmeans')","c042c4b9":"kmean_results = assign_model(kmeans)\nkmean_results.head()","769d8f36":"plot_model(kmeans)","54261783":"plot_model(kmeans, plot = 'elbow')","d4b3d49b":"plot_model(kmeans, plot = 'silhouette')","aca68fa9":"plot_model(kmeans, plot = 'distribution') #to see size of clusters","6b93d7f7":"fig, (ax1, ax2, ax3) = plt.subplots(figsize = (18,4), ncols=3)\nfig.suptitle('Evaluate pycaret cluster by feature pairs')\n\nsns.scatterplot(data=kmean_results, x=\"age\", y=\"spending_score\", hue=\"Cluster\", ax=ax1)\nax1.set_title('Compare pycaret clusters by age and score')\n\nsns.scatterplot(data=kmean_results, x=\"income\", y=\"spending_score\", hue=\"Cluster\", ax=ax2)\nax2.set_title('Compare pycaret clusters by income and score')\n\nsns.scatterplot(data=kmean_results, x=\"income\", y=\"age\", hue=\"Cluster\", ax=ax3)\nax3.set_title('Compare pycaret clusters by income and age')\n\nplt.show()","d8a8a78a":"### Groups Interpreting <a id='index11'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\nAs Clustering is an unsupervised task, it is necessary to specify each group\n\nGrouping by income and age: 6 groups\n+ g1: Customers with income and age between 40\n+ g2: Customers with an income above about 95\n+ g3: Customers with income between 0 and 45 and age over 40\n+ g4: Customers with income between 40 and 70 and age over 45\n+ g5: Customers with income between 70 and 85\n+ g6: Customers with income between 45 and 75 and age up to 40\n\nGrouping by income and score: 5 groups\n+ g1: Customers with income and score above 70\n+ g2: Customers with income and scores between 40 and 60\n+ g3: Customers with income from 0 to 40 and scores above 60\n+ g4: Customers with income above 70 and score up to 40\n+ g5: Customers with income from 0 to 40 and score from 0 to 40\n\nGrouping by age and score: 4 groups\n+ g1: Customers over 45 and with a score between 40 and 60\n+ g2: Customers under 45 years old and with scores between 40 and 60\n+ g3: Customers with scores between 0 and 35\n+ g4: Customers aged between 20 and 40 and scores between 70 and 100","65dbc140":"### Cross all features <a id='index06'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","5d3cba18":"## Pre-Processing <a id='index07'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","48b0e08a":"## Best K with elbow method <a id='index09'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\n\n[Elbow Method of yellowbrick](https:\/\/www.scikit-yb.org\/en\/latest\/api\/cluster\/elbow.html)\n\nthe \u201celbow\u201d method to help data scientists select the optimal number of clusters by fitting the model with a range of values for \ud835\udc3e. If the line chart resembles an arm, then the \u201celbow\u201d (the point of inflection on the curve) is a good indication that the underlying model fits best at that point. In the visualizer \u201celbow\u201d will be annotated with a dashed line.","1cabd529":"### Cross two features <a id='index05'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","1c005ed7":"## Clustering with K-Means <a id='index08'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","61adb8bf":"## Clustering by pycaret <a id='index13'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\nhttp:\/\/www.pycaret.org\/tutorials\/html\/CLU101.html\n","c21d42db":"## Snippets <a id='index02'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","35c49c1e":"The pycaret clusters were made using PCA a dimensionality reduction technique, reducing the 3 numerical variables to two (PCA1, PCA2).\n\nComparing with the previous Kmeans models, this technique obtained a good result since, when evaluating each pair of numerical features, we can see that it grouped well with a little mixture (which is evident to be seen since in the elbows tests for each pair, identified the best k as 4 or higher).\n\nFinally, the clusters made by pycaret are good choices, since reducing to PCA1 and PCA2 was able to separate each customer well.\n\n<!-- \nOs clusters do pycaret foram feito usando PCA uma t\u00e9cnica de redu\u00e7\u00e2o de dimensionalidade, reduzindo as 3 vari\u00e1veis n\u00famerias para duas (PCA1, PCA2).\n\nComparando com os modelos de Kmeans anteior, essa t\u00e9cnica obteve bom resultado j\u00e1 que ao avaliar cada par de features num\u00e9ricas, podemos ver que agrupou bem com umpouco de mistura (o que \u00e9 evidente de se constatar j\u00e1 que nos testes de elbows para cada par, identificava o melhor k como 4 ou maior).\n\nPor fim, os clusters feito pelo pycaret s\u00e3o boas escolhas, j\u00e1 que ao reduzir para PCA1e PCA2 foi capaz de separar bem cada customer.\n-->","090a6218":"## Conclusion <a id='index12'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>\n\nThree groupings were made using the k-means algorithm each using two features.\n\nThis is my first grouping kernel, tips and ideas for enhancing are welcome.","c194dd91":"## EDA <a id='index04'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","e50020d1":"### Each feature individually","a98de9eb":"## Import Libs and DataSet <a id='index01'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","d5e10198":"### Execute KMeans <a id='index10'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","c089f214":"## Table Of Contents (TOC) <a id=\"top\"><\/a>\n\n+ [Import Libs and DataSet](#index01) \n+ [Snippets](#index02)\n+ [Feature engineering](#index03)\n+ [EDA](#index04)\n  - [Each feature individually](#index04)\n  - [Cross two features](#index05)\n  - [Cross all features](#index06)\n+ [Pre-Processing](#index07)\n+ [Clustering with K-Means](#index08)\n  - [Best K with elbow method](#index09)\n  - [Execute KMeans](#index10)\n  - [Groups Interpreting](#index11)\n+ [Clustering by pycaret](#index13)\n+ [Conclusion](#index12)","2e0b0927":"## Feature engineering <a id='index03'><\/a> <a href=\"#top\" class=\"btn btn-primary btn-sm\" role=\"button\" aria-pressed=\"true\" style=\"color:white; margin-left: 20px;\" data-toggle=\"popover\">Go to TOC<\/a>","04add56c":"<h1 align=\"center\"> Mall Customers: Clustering <\/h1>\n\n<img src=\"https:\/\/gd-disneyeorlando.sfo2.cdn.digitaloceanspaces.com\/2016\/02\/shopping-altamonte-mall-em-orlando.jpg\" width=\"50%\" \/>\n\nCreated: 2020-09-04\n\nLast updated: 2020-09-19\n\nKaggle Kernel made by \ud83d\ude80 <a href=\"https:\/\/www.kaggle.com\/rafanthx13\"> Rafael Morais de Assis<\/a>\n","21621043":"## Problem Description\n\nDataSet Link: https:\/\/www.kaggle.com\/vjchoudhary7\/customer-segmentation-tutorial-in-python\n\n**Content**\n\nYou are owing a supermarket mall and through membership cards , you have some basic data about your customers like Customer ID, age, gender, annual income and spending score.\nSpending Score is something you assign to the customer based on your defined parameters like customer behavior and purchasing data.\n\n**Problem Statement**\n\nYou own the mall and want to understand the customers like who can be easily converge [Target Customers] so that the sense can be given to marketing team and plan the strategy accordingly.\n\n**Inspiration**\n\nBy the end of this case study , you would be able to answer below questions.\n1. How to achieve customer segmentation using machine learning algorithm (KMeans Clustering) in Python in simplest way.\n2. Who are your target customers with whom you can start marketing strategy [easy to converse]\n3. How the marketing strategy works in real world\n\n## DataSet Description\n\n\n| Column         | Description                                                                   | Values                           |\n|----------------|-------------------------------------------------------------------------------|----------------------------------|\n| Gender         | Gender of the customer                                                        | string :: 'Male' <br>or 'Female' |\n| Age            | Age of the customer                                                           | int :: [18, 70]                  |\n| Annual Income  | Annual Income of the customer.<br> Measure in k$                              | int :: [15, 137]                 |\n| Spending Score | Score assigned by the mall based <br>on customer behavior and spending nature | int :: [1, 99]                   |"}}