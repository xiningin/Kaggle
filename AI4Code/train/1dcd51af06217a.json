{"cell_type":{"51fab60f":"code","9b1d25aa":"code","91095299":"code","5897b93f":"code","ddaddc68":"code","755e4a4c":"code","23cba30b":"code","ef6cb065":"code","7a162f50":"code","ea57543e":"code","cd06fa45":"code","f7be5b2f":"code","cf9bb128":"code","e30cb4d3":"code","dfd17eff":"code","df2f2469":"code","550e7ec3":"code","e20a8744":"code","549f3c9f":"code","5e80f30f":"code","47387ca5":"code","684997bd":"code","14a5a703":"code","63122822":"code","5a71ba56":"code","c13161c2":"code","e71dbbc7":"code","2e20b977":"code","74194913":"code","5bf8b6a8":"code","8d8cc7fe":"code","faa64ce8":"markdown","4d4d116c":"markdown","ef121227":"markdown","a80accf3":"markdown","76d9a8ad":"markdown","04cbe82c":"markdown"},"source":{"51fab60f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","9b1d25aa":"df=pd.read_csv('..\/input\/creditcardfraud\/creditcard.csv')","91095299":"df.head()","5897b93f":"df.info()","ddaddc68":"df.describe()","755e4a4c":"sns.histplot(x=df['Amount'],bins=10)","23cba30b":"sns.countplot(df['Class'])","ef6cb065":"X=df.iloc[:,:-1].values\ny=df['Class'].values","7a162f50":"from imblearn.over_sampling import SMOTE","ea57543e":"X, y = SMOTE().fit_resample(X,y)\ny = y.reshape(-1,1)","cd06fa45":"y_un,count = np.unique(y,return_counts=True)\nplt.title(\"Class Balancing\")\nplt.xlabel(\"Class\")\nplt.ylabel(\"Count\")\nplt.bar([str(i) for i in y_un],count)\nplt.show()","f7be5b2f":"from sklearn.model_selection import train_test_split","cf9bb128":"X_train, X_, y_train, y_ = train_test_split(X, y, test_size=0.30, random_state=101)","e30cb4d3":"X_val, X_test, y_val, y_test = train_test_split(X_, y_, test_size=0.30, random_state=101)","dfd17eff":"from sklearn.preprocessing import StandardScaler","df2f2469":"scaler=StandardScaler()","550e7ec3":"X_train=scaler.fit_transform(X_train)","e20a8744":"X_val=scaler.fit_transform(X_val)","549f3c9f":"X_test=scaler.transform(X_test)","5e80f30f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier","47387ca5":"log_model=LogisticRegression(solver='liblinear')\nlog_model.fit(X_train,y_train)","684997bd":"rfc_model=RandomForestClassifier()\nrfc_model.fit(X_train,y_train)","14a5a703":"gbc_model=GradientBoostingClassifier()\ngbc_model.fit(X_train,y_train)","63122822":"ada_model=AdaBoostClassifier()\nada_model.fit(X_train,y_train)","5a71ba56":"from sklearn.metrics import plot_confusion_matrix,classification_report,plot_precision_recall_curve,plot_roc_curve","c13161c2":"def report(model):\n    preds = model.predict(X_val)\n    print(classification_report(preds,y_val))\n    plot_confusion_matrix(model,X_val,y_val)\n    plot_precision_recall_curve(model,X_val,y_val)\n    plot_roc_curve(model,X_val,y_val)","e71dbbc7":"print(\"LOGISTIC REGRESSION MODEL\")\nreport(log_model)","2e20b977":"print(\"RANDOM FOREST CLASSIFIER MODEL\")\nreport(rfc_model)","74194913":"print(\"GRADIENT BOOSTING CLASSIFIER MODEL\")\nreport(gbc_model)","5bf8b6a8":"print(\"ADA BOOST CLASSIFIER MODEL\")\nreport(ada_model)","8d8cc7fe":"preds = rfc_model.predict(X_test)\nprint(classification_report(preds,y_test))\nplot_confusion_matrix(rfc_model,X_test,y_test)\nplot_precision_recall_curve(rfc_model,X_test,y_test)\nplot_roc_curve(rfc_model,X_test,y_test)","faa64ce8":"##### About\nThe dataset contains transactions made by credit cards in September 2013 by European cardholders.\nThis dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.\n\nIt contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, \u2026 V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-sensitive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.","4d4d116c":"###### Modelling","ef121227":"###### Data Preprocessing","a80accf3":"###### EDA & Data Visualization","76d9a8ad":"##### Final Predictions","04cbe82c":"##### Resampling"}}