{"cell_type":{"6101b562":"code","4db8192c":"code","ee876f6c":"code","d4e95735":"code","f47fbfbf":"code","10afaacc":"code","153c8179":"code","cb981682":"code","d0fbc4fd":"code","3583fc8a":"code","78401d95":"code","a14e090d":"markdown","4542bb6b":"markdown","02b7686e":"markdown","848144bc":"markdown","350e7aac":"markdown","d1c221d3":"markdown","650fb5fe":"markdown"},"source":{"6101b562":"from keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nimport os\nimport cv2\nimport numpy as np","4db8192c":"# Defining initial variables\nparasitized_input_dir = os.listdir('..\/input\/cell_images\/cell_images\/Parasitized') \nuninfected_input_dir = os.listdir('..\/input\/cell_images\/cell_images\/Uninfected')\nimg_height = 50\nimg_width = 50\nbatch_size = 32\nno_of_epochs = 20","ee876f6c":"image_data = [] \nlabels = []\n# for reading images of parasitized cells\nfor p in parasitized_input_dir:\n    try:\n        img = cv2.imread('..\/input\/cell_images\/cell_images\/Parasitized\/' + p)\n        img = cv2.resize(img, (img_width, img_height)) # all images will be resized to 50*50\n        image_data.append(img)\n        labels.append(1)\n    except:\n        print(\"Error!!\") # if the input data is not in desired format it will generate an error","d4e95735":"# for reading images of Uninfected cells\nfor u in uninfected_input_dir:\n    try:\n        img = cv2.imread('..\/input\/cell_images\/cell_images\/Uninfected\/' + u)\n        img = cv2.resize(img, (img_width, img_height))\n        image_data.append(img)\n        labels.append(0)\n    except:\n        print(\"Error!!\")","f47fbfbf":"image_data = np.array(image_data)\nlabels = np.array(labels)","10afaacc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split(image_data, labels, test_size=0.2, random_state=101)","153c8179":"train_datagen = ImageDataGenerator(rescale=1.\/255, rotation_range=15, shear_range=0.2, zoom_range=0.2)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","cb981682":"train_datagen.fit(X_train)\ntest_datagen.fit(X_test)","d0fbc4fd":"# Defining the NN Architecture\nmodel = Sequential()\nmodel.add(Conv2D(16, (3, 3), input_shape=(img_height, img_width, 3)))\nmodel.add(Conv2D(16, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_height, img_width, 3)))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_height, img_width, 3)))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))","3583fc8a":"# Compiling the model\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\nmodel.summary()","78401d95":"model.fit_generator(train_datagen.flow(X_train, Y_train), \n                    steps_per_epoch=len(X_train)\/\/batch_size,\n                    epochs=no_of_epochs,\n                    validation_data=test_datagen.flow(X_test, Y_test),\n                    validation_steps=len(X_test)\/\/batch_size\n                   )","a14e090d":"### Creating the Model","4542bb6b":"In this kernel we will build an Image classifier using Keras to classify cell images which are infected by Malaria from uninfected ones","02b7686e":"### Using ImageDataGenerator","848144bc":"### Generating Data ","350e7aac":"### Importing Dependencies","d1c221d3":"# Malaria Cell Detection","650fb5fe":"### Splitting Data into Train and Test Set"}}