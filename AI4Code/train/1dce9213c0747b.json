{"cell_type":{"b8ca247a":"code","1550b740":"code","3353a266":"code","9f122a54":"code","e4301033":"code","ceacee9e":"code","abf8fc89":"code","9e828f7a":"code","b8b171fc":"code","06fe49e1":"markdown","7592bdbb":"markdown","55e62eab":"markdown","b7b54066":"markdown","5015cb18":"markdown","af9d3d5e":"markdown","745c49a2":"markdown","e1a0c0fd":"markdown","29ac65cb":"markdown","73878af5":"markdown","907739f1":"markdown"},"source":{"b8ca247a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom PIL import Image\nimport glob\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout, BatchNormalization\nfrom keras.callbacks import Callback\n\ndata = []\nlabels = []\nsize = (30,30)\nclasses = len(glob.glob('..\/input\/gtsrb-german-traffic-sign\/Meta\/*.png'))\nfor i in range(classes):\n    path = \"..\/input\/gtsrb-german-traffic-sign\/Train\/\" +str(i)\n    images = os.listdir(path)\n    for a in images:\n        try:\n            image = Image.open(path + '\/'+ a)\n            image = image.resize(size)\n            image = np.array(image) \/255.0\n            data.append(image)\n            labels.append(i)\n        except:\n            print(\"Error loading image\")","1550b740":"data = np.array(data)\nlabels = np.array(labels)","3353a266":"X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.1, random_state=42)","9f122a54":"#building the model\nimport keras\nmodel = Sequential()\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu', input_shape=X_train.shape[1:]))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.25))\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size=(2, 2)))\nmodel.add(Dropout(rate=0.5))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu',))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(rate=0.7))\nmodel.add(Dense(classes, activation='softmax'))\n#Compilation of the model\nmodel.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","e4301033":"class MyCallback(Callback):\n\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('val_accuracy') > 0.9995  and logs.get('accuracy') > 0.995) :\n                print(\"val_accurcy more than 99.95% and accuracu more than 99.5%\")\n                self.model.stop_training = True\nmcallback = MyCallback()\n\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=20, validation_data=(X_test, y_test), callbacks = [mcallback])","ceacee9e":"plt.figure(0)\nplt.plot(history.history['accuracy'], label='training accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.title('Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\nplt.legend()\nplt.show()\nplt.figure(1)\nplt.plot(history.history['loss'], label='training loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.title('Loss')\nplt.xlabel('epochs')\nplt.ylabel('loss')\nplt.legend()\nplt.show()","abf8fc89":"test_set = pd.read_csv('\/kaggle\/input\/gtsrb-german-traffic-sign\/Test.csv')\nlabels = test_set[\"ClassId\"].values\nimgs = test_set[\"Path\"].values\ntest_data=[]\nfor img in imgs:\n    image = Image.open('\/kaggle\/input\/gtsrb-german-traffic-sign\/'+img)\n    image = image.resize(size)\n    test_data.append(np.array(image)\/255.0)\ntest=np.array(test_data)\npred = model.predict_classes(test)\n#Accuracy with the test data\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(labels, pred))","9e828f7a":"#model.save(\"simple_traffic_signs_classifier.h5\")","b8b171fc":"from keras.models import load_model\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport glob\nimport numpy\n\nclassifier = load_model('simple_traffic_signs_classifier.h5')\n\nsigns = { 1:'Speed limit (20km\/h)',\n            2:'Speed limit (30km\/h)', \n            3:'Speed limit (50km\/h)', \n            4:'Speed limit (60km\/h)', \n            5:'Speed limit (70km\/h)', \n            6:'Speed limit (80km\/h)', \n            7:'End of speed limit (80km\/h)', \n            8:'Speed limit (100km\/h)', \n            9:'Speed limit (120km\/h)', \n            10:'No passing', \n            11:'No passing veh over 3.5 tons', \n            12:'Right-of-way at intersection', \n            13:'Priority road', \n            14:'Yield', \n            15:'Stop', \n            16:'No vehicles', \n            17:'Veh > 3.5 tons prohibited', \n            18:'No entry', \n            19:'General caution', \n            20:'Dangerous curve left', \n            21:'Dangerous curve right', \n            22:'Double curve', \n            23:'Bumpy road', \n            24:'Slippery road', \n            25:'Road narrows on the right', \n            26:'Road work', \n            27:'Traffic signals', \n            28:'Pedestrians', \n            29:'Children crossing', \n            30:'Bicycles crossing', \n            31:'Beware of ice\/snow',\n            32:'Wild animals crossing', \n            33:'End speed + passing limits', \n            34:'Turn right ahead', \n            35:'Turn left ahead', \n            36:'Ahead only', \n            37:'Go straight or right', \n            38:'Go straight or left', \n            39:'Keep right', \n            40:'Keep left', \n            41:'Roundabout mandatory', \n            42:'End of no passing', \n            43:'End no passing veh > 3.5 tons' }\n\nfor filename in glob.glob('..\/input\/testing\/*'):\n    img = Image.open(filename)\n    img = img.resize((30,30))\n    plt.imshow(img)\n    plt.show()\n    img = numpy.array(img)\n    img = img[...,:3]\n    img = img\/255.0\n    img = numpy.expand_dims(img, axis=0)\n    \n    print('your image shape should be (1, 30, 30, 3)',img.shape)\n    pred = classifier.predict_classes([img])[0]\n    sign = signs[pred+1]\n    print(sign)\n\n\n","06fe49e1":"we split data to training and validation","7592bdbb":"convert the list into numpy to feed to the model.\nthe shape of our data now is (39209, 30, 30, 3)","55e62eab":"**We achieved a 98.68% (0.9868566904196358) accuracy**","b7b54066":"We **iterate** over all the classes, **open** image content into an **array** with The PIL library . and append **resized** images and their respective labels in the data and labels list","5015cb18":"you can upload yor own images. all you need to do is click on add data (top right) and within tap upload then you can choose as many images as you want (just make sure the images are not over 256*256 for good result). after you successfuly load your images make sure to name the dataset 'testing' or change in the path below","af9d3d5e":"Traffic signs that can be successfully classified are the following : \n* 'Speed limit (20km\/h)', \n* 'Speed limit (30km\/h)', \n* 'Speed limit (50km\/h)', \n* 'Speed limit (60km\/h)', \n* 'Speed limit (70km\/h)', \n* 'Speed limit (80km\/h)', \n* 'End of speed limit (80km\/h)', \n* 'Speed limit (100km\/h)', \n* 'Speed limit (120km\/h)', \n* 'No passing',\n* 'No passing veh over 3.5 tons', \n* 'Right-of-way at intersection', \n* 'Priority road', \n* 'Yield', \n* 'Stop', \n* 'No vehicles', \n* 'Veh > 3.5 tons prohibited', \n* 'No entry', \n* 'General caution', \n* 'Dangerous curve left', \n* 'Dangerous curve right', \n* 'Double curve', \n* 'Bumpy road', \n* 'Slippery road', \n* 'Road narrows on the right', \n* 'Road work', \n* 'Traffic signals', \n* 'Pedestrians', \n* 'Children crossing', \n* 'Bicycles crossing', \n* 'Beware of ice\/snow',\n* 'Wild animals crossing', \n* 'End speed + passing limits', \n* 'Turn right ahead', \n* 'Turn left ahead',\n* 'Ahead only', \n* 'Go straight or right', \n* 'Go straight or left', \n* 'Keep right', \n* 'Keep left', \n* 'Roundabout mandatory', \n* 'End of no passing', \n* 'End no passing veh > 3.5 tons'\n\nImages of the traffic signs that can be successfully classified  are present in \/kaggle\/input\/gtsrb-german-traffic-sign\/Meta folder","745c49a2":"**building and compiling the model + training**","e1a0c0fd":"In a test.csv file, we have the details related to the image path and their respective class labels. we extract images ane their labels and do the same prepocessing as before","29ac65cb":"# This project classify traffic signs present in an image.","73878af5":"Plotting the graph for accuracy and the loss","907739f1":"  **To have a fully self-driving car, it is necessary for vehicules to understand and follow traffic signs.**"}}