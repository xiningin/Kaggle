{"cell_type":{"946d8d80":"code","908d0abf":"code","53d2ab45":"code","c58cd502":"code","88b2efa6":"code","e328d93f":"markdown","70c643c2":"markdown","b19b37d3":"markdown","85e9ca78":"markdown","0f1fd67c":"markdown","2b8f0417":"markdown","ebbe2044":"markdown","5069b618":"markdown"},"source":{"946d8d80":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Dataset verisi\ndf = pd.DataFrame({\n    'x': [12, 20, 28, 18, 29, 33, 24, 45, 45, 52, 51, 52, 55, 53, 55, 61, 64, 69, 72],\n    'y': [39, 36, 30, 52, 54, 46, 55, 59, 63, 70, 66, 63, 58, 23, 14, 8, 19, 7, 24]\n})\n\n\nnp.random.seed(200)\nk = 3\n# centroids[i] = [x, y] olacak \u015fekilde noktalar belirleniyor.\ncentroids = {\n    i+1: [np.random.randint(0, 80), np.random.randint(0, 80)]\n    for i in range(k)\n}\n    \nfig = plt.figure(figsize=(5, 5))\nplt.scatter(df['x'], df['y'], color='k')\ncolmap = {1: 'r', 2: 'g', 3: 'b'}\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i]) #renklendirmeler veriliyor.\nplt.xlim(0, 80)\nplt.ylim(0, 80)\nplt.show()","908d0abf":"def assignment(df, centroids):\n    #Noktalar\u0131n centroidlere olan uzakl\u0131klar\u0131 hesaplan\u0131yor.\n    for i in centroids.keys():\n        # sqrt((x1 - x2)^2 - (y1 - y2)^2)\n        df['distance_from_{}'.format(i)] = (\n            np.sqrt(\n                (df['x'] - centroids[i][0]) ** 2\n                + (df['y'] - centroids[i][1]) ** 2\n            )\n        )\n    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]\n    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)\n    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('distance_from_')))\n    df['color'] = df['closest'].map(lambda x: colmap[x])\n    return df\n\ndf = assignment(df, centroids)\nprint(df.head()) # Noktalar\u0131n centroidlere olan uzakl\u0131klar\u0131 ekrana bast\u0131r\u0131l\u0131yor.\n\n#Ekranda grafik olarak g\u00f6sterilme i\u015flemi\nfig = plt.figure(figsize=(5, 5))\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\nplt.xlim(0, 80)\nplt.ylim(0, 80)\nplt.show()","53d2ab45":"import copy\n\nold_centroids = copy.deepcopy(centroids)\n\ndef update(k):\n    for i in centroids.keys():\n        centroids[i][0] = np.mean(df[df['closest'] == i]['x'])\n        centroids[i][1] = np.mean(df[df['closest'] == i]['y'])\n    return k\n\ncentroids = update(centroids)\n    \nfig = plt.figure(figsize=(5, 5))\nax = plt.axes()\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\nplt.xlim(0, 80)\nplt.ylim(0, 80)\nfor i in old_centroids.keys():\n    old_x = old_centroids[i][0]\n    old_y = old_centroids[i][1]\n    dx = (centroids[i][0] - old_centroids[i][0]) * 0.75\n    dy = (centroids[i][1] - old_centroids[i][1]) * 0.75\n    ax.arrow(old_x, old_y, dx, dy, head_width=2, head_length=3, fc=colmap[i], ec=colmap[i])\nplt.show()","c58cd502":"df = assignment(df, centroids)\n\n# Plot results\nfig = plt.figure(figsize=(5, 5))\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\nplt.xlim(0, 80)\nplt.ylim(0, 80)\nplt.show()","88b2efa6":"while True:\n    closest_centroids = df['closest'].copy(deep=True)\n    centroids = update(centroids)\n    df = assignment(df, centroids)\n    if closest_centroids.equals(df['closest']):\n        break\n\nfig = plt.figure(figsize=(5, 5))\nplt.scatter(df['x'], df['y'], color=df['color'], alpha=0.5, edgecolor='k')\nfor i in centroids.keys():\n    plt.scatter(*centroids[i], color=colmap[i])\nplt.xlim(0, 80)\nplt.ylim(0, 80)\nplt.show()","e328d93f":"**Not: ** bir k\u0131rm\u0131z\u0131 \u015fimdi ye\u015fil ve bir mavi \u015fimdi k\u0131rm\u0131z\u0131\nK\u00fcmelerin hi\u00e7birinde hi\u00e7bir de\u011fi\u015fiklik yap\u0131lmayana kadar tekrar ediyoruz.","70c643c2":"### K\u00fcmelerin hi\u00e7birinde hi\u00e7bir de\u011fi\u015fiklik yap\u0131lmayana kadar devam ettirilir.","b19b37d3":"### Ayn\u0131 \u0130\u015flemlerin Tekrarlanmas\u0131 A\u015famas\u0131","85e9ca78":"- 3 tane net k\u00fcmemiz olu\u015ftu. K\u00fcmelerin tam ortas\u0131nda merkezleri belirlendi.","0f1fd67c":"### Kurulum a\u015famas\u0131","2b8f0417":"### Atama a\u015famas\u0131","ebbe2044":"# K-means S\u0131n\u0131fland\u0131r\u0131c\u0131 Algoritmas\u0131\n- T\u00fcm g\u00f6zlemlerin k adet s\u0131n\u0131fland\u0131r\u0131c\u0131ya b\u00f6l\u00fcnme i\u015flemi\n\n## K-means S\u0131n\u0131fland\u0131rma Algoritmam\u0131z 3 b\u00f6l\u00fcmden olu\u015fuyor.\n\n- Kurulum a\u015famas\u0131 : K adet centroid olu\u015fturulur ve merkezleri rastgele atan\u0131r.\n- Atama a\u015famas\u0131: K k\u00fcmeleri, her bir g\u00f6zlemi en yak\u0131n centroid ile ili\u015fkilendirerek olu\u015fturulur.\n- G\u00fcncelleme : K\u00fcmelerin centroidleri yeni ortalama olur.\n\nAtama ve G\u00fcncelleme i\u015flemleri yak\u0131nsamaya kadar tekrarlan\u0131r.\n\nSonu\u00e7ta, kare hatalar\u0131n toplam\u0131, noktalar ve kendi centroidleri aras\u0131nda en aza indirilir.\n\nk=3 olarak alarak yapal\u0131m.","5069b618":"### G\u00fcncelleme A\u015famas\u0131"}}