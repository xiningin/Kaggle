{"cell_type":{"8e419ded":"code","68f6b79a":"code","db1d419a":"code","9315ab32":"code","d6ef3b97":"code","741e77d4":"code","2dbac81b":"code","2a122c91":"code","003ed223":"code","62398cb6":"code","b8608c98":"code","4243f822":"code","29e359a8":"code","dd6cb4c6":"code","e6090db0":"code","4897bdb9":"code","2a55fbef":"code","a6e8bc12":"code","819a7131":"code","7c26d807":"code","72ea62b8":"code","4e63ae3b":"code","c9b6c06d":"code","da5e23fb":"code","8b98f880":"code","82fcc345":"markdown","d8ff9af6":"markdown","e3709ca9":"markdown","e14d3863":"markdown","47258751":"markdown","20425601":"markdown","123a6760":"markdown","90aa3752":"markdown","2a7ca9b5":"markdown","70ddfe3a":"markdown","61c5112d":"markdown","8b8dbe67":"markdown","4d1e42fe":"markdown","429eb458":"markdown","be12642b":"markdown","9bc05a15":"markdown","650dc72b":"markdown"},"source":{"8e419ded":"from __future__ import print_function\nimport os\ndata_path = ['https:\/\/raw.githubusercontent.com\/mannmoshe\/machine-learning\/main\/Data']\nprint (data_path)","68f6b79a":"import numpy as np\nimport pandas as pd\n\nfilepath = os.sep.join(data_path + ['Iris_Data.csv'])\nprint(filepath)\ndata = pd.read_csv(filepath)\ndata.head()","db1d419a":"# Number of rows\nprint(data.shape[0])\n\n# Column names\nprint(data.columns.tolist())\n\n# Data types\nprint(data.dtypes)\n","9315ab32":"# The str method maps the following function to each entry as a string\ndata['species'] = data.species.str.replace('Iris-', '')\n# alternatively\n# data['species'] = data.species.apply(lambda r: r.replace('Iris-', ''))\n\ndata.head()","d6ef3b97":"#Student writes code here","741e77d4":"print(data['species'].value_counts())","2dbac81b":"def describe_iris(df):\n    df1 = df.describe(exclude=[object])\n    df1.loc[\"range\"] = df1.loc['max'] - df1.loc['min']\n    return df1\n","2a122c91":"print(describe_iris(data))","003ed223":"# The mean calculation\ndata.groupby('species').mean()","62398cb6":"# The median calculation\ndata.groupby('species').median()","b8608c98":"# applying multiple functions at once - 2 methods\n\ndata.groupby('species').agg(['mean', 'median'])  # passing a list of recognized strings\ndata.groupby('species').agg([np.mean, np.median])  # passing a list of explicit aggregation functions","4243f822":"# If certain fields need to be aggregated differently, we can do:\nfrom pprint import pprint\n\nagg_dict = {field: ['mean', 'median'] for field in data.columns if field != 'species'}\nagg_dict['petal_length'] = 'max'\npprint(agg_dict)\ndata.groupby('species').agg(agg_dict)","29e359a8":"import matplotlib.pyplot as plt\n%matplotlib inline","dd6cb4c6":"# A simple scatter plot with Matplotlib\nax = plt.axes()\n\nax.scatter(data.sepal_length, data.sepal_width)\n\n# Label the axes\nax.set(xlabel='Sepal Length (cm)',\n       ylabel='Sepal Width (cm)',\n       title='Sepal Length vs Width');","e6090db0":"#Student writes code here","4897bdb9":"fig, axs = plt.subplots(1, 2, figsize=(8, 5))\naxs[0].hist(data['sepal_length'], bins=20)\naxs[0].set_title('sepal')\naxs[1].hist(data['petal_length'], bins=20)\naxs[1].set_title('petal')\n\nfor ax in axs.flat:\n    ax.set(xlabel='length (cm)', ylabel='frequency')","2a55fbef":"fig, axs = plt.subplots(1, 2, figsize=(8, 5))\naxs[0].hist(data['sepal_width'], bins=20)\naxs[0].set_title('sepal')\naxs[1].hist(data['petal_width'], bins=20)\naxs[1].set_title('petal')\n\nfor ax in axs.flat:\n    ax.set(xlabel='width (cm)', ylabel='frequency')","a6e8bc12":"import seaborn as sns\n\nsns.set_context('notebook')\n\n# This uses the `.plot.hist` method\nax = data.plot.hist(bins=25, alpha=0.5)\nax.set_xlabel('Size (cm)');","819a7131":"# To create four separate plots, use Pandas `.hist` method\naxList = data.hist(bins=25)\n\n# Add some x- and y- labels to first column and last row\nfor ax in axList.flatten():\n    if ax.is_last_row():\n        ax.set_xlabel('Size (cm)')\n        \n    if ax.is_first_col():\n        ax.set_ylabel('Frequency')","7c26d807":"#Student writes code here","72ea62b8":"data.boxplot(column=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])","4e63ae3b":"# First we have to reshape the data so there is \n# only a single measurement in each column\n\nplot_data = (data\n             .set_index('species')\n             .stack()\n             .to_frame()\n             .reset_index()\n             .rename(columns={0:'size', 'level_1':'measurement'})\n            )\n\nplot_data.head()","c9b6c06d":"# Now plot the dataframe from above using Seaborn\n\nsns.set_style('white')\nsns.set_context('notebook')\nsns.set_palette('dark')\n\nf = plt.figure(figsize=(6,4))\nsns.boxplot(x='measurement', y='size', \n            hue='species', data=plot_data);","da5e23fb":"#Student writes code here","8b98f880":"sns.pairplot(data[:-1])","82fcc345":"*I used [this link](https:\/\/towardsdatascience.com\/7-ways-to-load-external-data-into-google-colab-7ba73e7d5fc7) to build the data_path.*","d8ff9af6":"## Question 6\n\nMake a histogram of any one of the four features. Label axes and title it as appropriate. ","e3709ca9":"## Question 10\n\nMake a [pairplot](http:\/\/seaborn.pydata.org\/generated\/seaborn.pairplot.html) with Seaborn to examine the correlation between each of the measurements.\n\n*Hint:* this plot may look complicated, but it is actually only a single line of code. This is the power of Seaborn and dataframe-aware plotting! See the lecture notes for reference.","e14d3863":"## Question 2\n\nExamine the species names and note that they all begin with 'Iris-'. Remove this portion of the name so the species name is shorter. \n\n*Hint:* there are multiple ways to do this, but you could use either the [string processing methods](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/text.html) or the [apply method](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.apply.html).","47258751":"<a href=\"https:\/\/colab.research.google.com\/github\/mannmoshe\/machine-learning\/blob\/main\/Week1_Introduction_to_Machine_Learning_and_Toolkit_HW.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","20425601":"## Introduction\n\nWe will be using the iris data set for this tutorial. This is a well-known data set containing iris species and sepal and petal measurements. The data we will use are in a file called `Iris_Data.csv` found in the [data](..\/..\/data) directory.","123a6760":"## Question 8\n\nUsing Pandas, make a boxplot of each petal and sepal measurement. Here is the documentation for [Pandas boxplot method](http:\/\/pandas.pydata.org\/pandas-docs\/version\/0.18.1\/visualization.html#visualization-box).","90aa3752":"## Question 7\n\nNow create a single plot with histograms for each feature (`petal_width`, `petal_length`, `sepal_width`, `sepal_length`) overlayed. If you have time, next try to create four individual histogram plots in a single figure, where each plot contains one feature.\n\nFor some hints on how to do this with Pandas plotting methods, check out the [visualization guide](http:\/\/pandas.pydata.org\/pandas-docs\/version\/0.18.1\/visualization.html) for Pandas.","2a7ca9b5":"# Introduction to Machine Learning and Toolkit Exercises ","70ddfe3a":"*I found [here](https:\/\/stackoverflow.com\/questions\/48595445\/is-it-possible-to-add-range-ie-max-min-to-the-pandas-describe-function-in-py) how to add the ranges to the describe function.*","61c5112d":"## Question 5\n\nMake a scatter plot of `sepal_length` vs `sepal_width` using Matplotlib. Label the axes and give the plot a title.","8b8dbe67":"## Question 3\n\nDetermine the following:  \n* The number of each species present. (*Hint:* check out the series `.value_counts` method.)\n* The mean, median, and quantiles and ranges (max-min) for each petal and sepal measurement.\n\n*Hint:* for the last question, the `.describe` method does have median, but it's not called median. It's the *50%* quantile. `.describe` does not have range though, and in order to get the range, you will need to create a new entry in the `.describe` table, which is `max - min`.","4d1e42fe":"## Question 4\n\nCalculate the following **for each species** in a separate dataframe:\n\n* The mean of each measurement (sepal_length, sepal_width, petal_length, and petal_width).\n* The median of each of these measurements.\n\n*Hint:* you may want to use Pandas [`groupby` method](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.groupby.html) to group by species before calculating the statistic.\n\nIf you finish both of these, try calculating both statistics (mean and median) in a single table (i.e. with a single groupby call). See the section of the Pandas documentation on [applying multiple functions at once](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/groupby.html#applying-multiple-functions-at-once) for a hint.","429eb458":"*I was helped by this links: [subplots](https:\/\/matplotlib.org\/devdocs\/gallery\/subplots_axes_and_figures\/subplots_demo.html), [histogram](https:\/\/matplotlib.org\/stable\/gallery\/statistics\/hist.html) and [figsize](https:\/\/matplotlib.org\/stable\/api\/_as_gen\/matplotlib.pyplot.figure.html).*","be12642b":"## Question 9\n\nNow make a single boxplot where the features are separated in the x-axis and species are colored with different hues. \n\n*Hint:* you may want to check the documentation for [Seaborn boxplots](http:\/\/seaborn.pydata.org\/generated\/seaborn.boxplot.html). \n\nAlso note that Seaborn is very picky about data format--for this plot to work, the input dataframe will need to be manipulated so that each row contains a single data point (a species, a measurement type, and the measurement value). Check out Pandas [stack](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.stack.html) method as a starting place.\n\nHere is an example of a data format that will work:\n\n|   | species | measurement  | size |\n| - | ------- | ------------ | ---- |\n| 0\t| setosa  | sepal_length | 5.1  |\n| 1\t| setosa  | sepal_width  | 3.5  |","9bc05a15":"## Question 1\n\nLoad the data from the file using the techniques learned today. Examine it.\n\nDetermine the following:\n\n* The number of data points (rows). (*Hint:* check out the dataframe `.shape` attribute.)\n* The column names. (*Hint:* check out the dataframe `.columns` attribute.)\n* The data types for each column. (*Hint:* check out the dataframe `.dtypes` attribute.)","650dc72b":"***All italic notes and student's code written by Moshe Mann.***"}}