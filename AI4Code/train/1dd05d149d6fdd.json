{"cell_type":{"e8f82a2f":"code","5bd64b8d":"code","50baf42a":"code","cd55acfe":"code","b78a57f5":"code","a302454c":"code","d15a8874":"code","33dad6fd":"code","0eb7dd45":"code","f241e541":"code","8d34c9d7":"code","972ef2de":"code","27711a71":"code","c768d6d0":"code","6fea4e4b":"code","13bd684f":"code","a7d38c41":"code","597ca920":"code","e1da83ce":"code","2d6bcd68":"code","7d349e74":"code","dcb82848":"code","0fed2875":"code","c842082a":"code","e281c5e2":"code","178530ae":"code","1044a29c":"code","6a86a583":"code","f119a299":"code","142e13a8":"code","c38271c8":"code","a140571d":"code","a759c5ac":"code","1947681a":"code","1f210b8a":"code","45307e08":"code","c4b2a8f3":"code","bfa7f485":"code","b90e4f67":"code","5fcdb810":"code","d492bd37":"code","e8398d53":"code","a6024c86":"code","0516f6ff":"code","48ef3cab":"code","8b9a0eff":"markdown","03a3dbb9":"markdown","bb4165f5":"markdown","2ebeb5fa":"markdown","19cc034b":"markdown","70e53996":"markdown","390e2b68":"markdown","62a90316":"markdown","157138a5":"markdown","c3a751e8":"markdown","d28514e3":"markdown","d69c3b25":"markdown","1a7a6c85":"markdown","65dfd96d":"markdown","0bbef247":"markdown","6af6ad02":"markdown","749b8d10":"markdown","6dfd4f65":"markdown","7a841549":"markdown","104b2fa8":"markdown"},"source":{"e8f82a2f":"# basic libraries\nimport pandas as pd\nimport numpy as np\n# basic libraries for data visualisation\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# libraries for widgets\nimport ipywidgets as widgets\nfrom ipywidgets import interact\nfrom ipywidgets import interact_manual\n# for interactive shells\nfrom IPython.display import display\n# for setting background for graph\nplt.rcParams[\"figure.figsize\"] = (16,8)\nplt.style.use(\"fivethirtyeight\")\n# for removing error\nimport warnings\nwarnings.filterwarnings('ignore')","5bd64b8d":"# reading dataset\ndata = pd.read_csv(\"..\/input\/movies-meta-data\/movie_metadata.csv\")","50baf42a":"# printing first five line \ndata.head(5)","cd55acfe":"# checking shape of our dataset\nprint(data.shape)","b78a57f5":"# printing inforamtion of our dataset\ndata.info()","a302454c":"# removing unnecassary columns form our dataset\ndata = data.drop([\"color\",\"director_facebook_likes\",\"actor_3_facebook_likes\",\"cast_total_facebook_likes\",\n                 \"facenumber_in_poster\",\"content_rating\",\"country\",\"movie_imdb_link\",\"aspect_ratio\",\"plot_keywords\"],\n                axis=1)\ndata.columns","d15a8874":"# checking the rows having high percentage of missing values in our dataset\nround(100*(data.isnull().sum()\/len(data.index)),2)","33dad6fd":"# since gross and budget columns having large number of nan value so we will remove these two columns from our dataset\ndata=data[~np.isnan(data[\"gross\"])]\ndata = data[~np.isnan(data[\"budget\"])]","0eb7dd45":"# again checking the nan values\ndata.isnull().sum()","f241e541":"# the rows foe which the sum of nan is less than two are retained\ndata = data[data.isnull().sum(axis=1) <=2]\ndata.isnull().sum()","8d34c9d7":"# lets fill the nan values\n# we are remvoving nan value of numerical columns by mean\ndata[\"num_critic_for_reviews\"].fillna(data[\"num_critic_for_reviews\"].mean(),inplace=True)\n# we are remvoving nan value of categorical columns by mode\ndata[\"duration\"].fillna(data[\"duration\"].mean(),inplace=True)\n# we know that we can not use statistical values for removing the missing \ndata[\"language\"].fillna(data[\"language\"].mode()[0],inplace =True)\ndata[\"actor_3_name\"].fillna(\"Unknown Actor\",inplace = True)\ndata.isnull().sum().sum()","972ef2de":"# here we are convert the gross and budget from $ to million $ to make our analysis easier\ndata[\"gross\"] = data[\"gross\"]\/1000000\ndata[\"budget\"] = data[\"budget\"]\/1000000","27711a71":"# here we are creating a profit column using thr bydget and gross\ndata[\"profit\"] = data[\"gross\"] - data[\"budget\"]\n# here we are checking the name of top 10 profitable movies\ndata[[\"profit\",\"movie_title\"]].sort_values(by = \"profit\",ascending=False).head(10)","c768d6d0":"# by looking at the above result we can easily analyze that there are some duplicate\n# here we are printing the no.of rows before removing duplicates\nprint(\"No of rows before removing duplicates:\", data.shape[0])\n# here we are removing all the duplicates from the data\ndata.drop_duplicates(subset = None,keep=\"first\",inplace=True)\n# here we are printing the no.of rows after removing duplicates\nprint(\"No of rows after removing duplicates:\", data.shape[0])","6fea4e4b":"# here we are checking top 10 profitable movies again\ndata[[\"movie_title\",\"profit\"]].sort_values(by =\"profit\",ascending = False).head(10)","13bd684f":"# here we are checking the values in the language column\ndata[\"language\"].value_counts()","a7d38c41":"# looking at the above output we can easily observe that out of 3500 movies only 150 movies are of other than english\n# so it is better to keep only two languages that is english and foregin\ndef language(x):\n    if x == \"English\":\n        return \"English\"\n    else:\n        return \"Foregin\"\n# here we are applying the function on the language column\ndata['language'] = data[\"language\"].apply(language)\n# here we checking values again\ndata[\"language\"].value_counts()","597ca920":"# the duration of movies is not varying a lot but we know that most of the users either like watching long or short duration movie.\n# duration movies we can categorise the movie in two part i.e. short and long\n# here we are defining a function for categorizing duration of movies\ndef duration(x):\n    if x <= 120:\n        return \"short\"\n    else:\n        return \"Long\"\n# here we are applying this function on the duration column\ndata[\"duration\"] = data[\"duration\"].apply(duration)\n# here er are checking the values of duration column\ndata['duration'].value_counts()","e1da83ce":"# here we are spliting genres\ndata[\"genres\"].str.split(\"|\")[0]","2d6bcd68":"# we can see from the above cell that most of the movies are having a lot of genres\n# also a movie can have so many genres so lets keep four genres\ndata[\"Moviegenres\"] = data[\"genres\"].str.split(\"|\")\ndata['genres1'] = data[\"Moviegenres\"].apply(lambda x: x[0])\n# some of the movies have only one genre in such case assign the some genres to genres_2 as well\ndata['genres2'] = data[\"Moviegenres\"].apply(lambda x: x[1] if len(x) > 1 else x[0])\ndata['genres3'] = data[\"Moviegenres\"].apply(lambda x:x[2] if len(x) > 2 else x[0])\ndata['genres4'] = data[\"Moviegenres\"].apply(lambda x:x[3] if len(x) > 3 else x[0])\n# here we are checking the head of the data\ndata[[\"genres\",\"genres1\",\"genres2\",\"genres3\",\"genres4\"]].head(5)","7d349e74":"# here we are calculating the social media popularity of movie\n# to calculate popularity of a movie we can aggregate no of voted users no of users for reviews and facebook\ndata[\"Social_Media_Popularity\"] = (data[\"num_user_for_reviews\"]\/\n                                   data[\"num_voted_users\"])*data[\"movie_facebook_likes\"]\n# here we are checking top 10 most popular movies on social media\nx = data[[\"movie_title\",'Social_Media_Popularity']].sort_values(by = \"Social_Media_Popularity\",\n                                                               ascending=False).head(10).reset_index()\nprint(x)\nsns.barplot(x[\"movie_title\"],x[\"Social_Media_Popularity\"],palette=\"magma\")\nplt.title(\"top 10 most popular movies on social medai\",fontsize=20)\nplt.xticks(rotation=90,fontsize=14)\nplt.xlabel(\" \")\nplt.show()","dcb82848":"# here we are comparing the gross with genres\n# first group the genres and get max,min and avg gross of the movies of that genres\ndisplay(data[[\"genres1\",\"gross\",]].groupby([\"genres1\"]).agg([\"max\",'mean',\"min\"]).style.background_gradient(cmap=\"Blues\"))\n# here we are ploting these values using lineplot\ndata[[\"genres1\",\"gross\",]].groupby([\"genres1\"]).agg([\"max\",'mean',\"min\"]).plot(kind=\"line\",color =[\"red\",\"black\",\"blue\"])\nplt.title(\"Which Genre is most Bankable?\", fontsize=20)\nplt.xticks(np.arange(17),[\"Action\",\"Adventure\",\"Animation\",\"Biography\",\"comedy\",'crime',\n                          \"Documentry\",\"Drama\",\"Family\",\"Fantasy\",\"Horror\",\"Musical\",\n                          \"Mystery\",\"Romance\",\"Sci-Fi\",\"Thriller\",\"Western\"],rotation=90,fontsize=15)\nplt.ylabel(\"Gross\",fontsize=15)\nplt.xlabel(\" \")\nplt.show()\nprint(\"The most profitable movie from each genre\")\ndisplay(data.loc[data.groupby(data[\"genres1\"])[\"profit\"].idxmax()][[\"genres1\",\n                                                                  \"movie_title\",\"gross\"]].style.background_gradient(cmap=\"copper\"))","0fed2875":"# here we are converting year into integer\ndata['title_year'] = data[\"title_year\"].astype(\"int\")\nprint('most profitable years in box office')\ndisplay(data[[\"title_year\",'language','profit']].groupby([\"language\",\n                                                         \"title_year\"]).agg(\"sum\").sort_values(by=\"profit\",\n                                                          ascending = False).head(10).style.background_gradient(cmap='Greens'))\n# here we are plotting them\nsns.lineplot(data[\"title_year\"],data['profit'],hue=data[\"language\"])\nplt.title(\"time series for box office profit for english vs forigen language\",fontsize=20)\nplt.xticks(fontsize=18)\nplt.xlabel(\" \")\nplt.show()\nprint(\"movies that msde huge losses\")\ndisplay(data[data[\"profit\"]< -2000][[\"movie_title\",\n                                    \"language\",\"profit\"]].style.background_gradient(cmap=\"Reds\"))","c842082a":"display(data[data[\"duration\"]==\"Long\"][[\"movie_title\",\"duration\",\"gross\",\n                                       \"profit\"]].sort_values(by=\"profit\", ascending= False).head(5).style.background_gradient(cmap=\"spring\"))\ndisplay(data[data[\"duration\"]==\"short\"][[\"movie_title\",\"duration\",\"gross\",\n                                       \"profit\"]].sort_values(by=\"profit\", ascending= False).head(5).style.background_gradient(cmap=\"spring\"))\nsns.barplot(data[\"duration\"],data[\"gross\"],hue= data[\"language\"],palette=\"spring\")\nplt.title(\"gross comparsion\")","e281c5e2":"print(\"average IMDB score for long duration movie is {0:.2f}\".format(data[data[\"duration\"]==\"Long\"][\"imdb_score\"].mean()))\nprint(\"average TMDB score for short duration movie is {0:.2f}\".format(data[data[\"duration\"]== \"short\"][\"imdb_score\"].mean()))\nprint(\"\\nhightest rated long duration movie\\n\",\n     data[data[\"duration\"]==\"Long\"][[\"movie_title\",\"imdb_score\"]].sort_values(by=\"imdb_score\",ascending=False).head(1))\nprint(\"\\nhightest rated short duration movie\\n\",\n     data[data[\"duration\"]==\"short\"][[\"movie_title\",'imdb_score']].sort_values(by=\"imdb_score\",ascending=False).head(1))\nsns.boxplot(data[\"imdb_score\"],data[\"duration\"],palette=\"copper\")\nplt.title(\"imdb rating vs gross\", fontsize=20)\nplt.xticks(rotation=90)\nplt.show()","178530ae":"def query_actors(x):\n    a = data[data[\"actor_1_name\"]==x]\n    b = data[data[\"actor_2_name\"]==x]\n    c = data[data[\"actor_3_name\"]==x]\n    x = a.append(b)\n    y = x.append(c)\n    y = y[[\"movie_title\",\n          \"budget\",\n          \"gross\",\n          \"title_year\",\n          \"genres\",\n          \"language\",\n          \"imdb_score\",\n          ]]\n    return y","1044a29c":"query_actors(\"Meryl Streep\")","6a86a583":"def actors_report(x):\n    a = data[data[\"actor_1_name\"]==x]\n    b = data[data[\"actor_2_name\"]==x]\n    c = data[data[\"actor_3_name\"]==x]\n    x = a.append(b)\n    y = x.append(c)\n    print(\"Time:\",y[\"title_year\"].min(),y[\"title_year\"].max())\n    print(\"Max Gross:{0:.2f} Millions\".format(y[\"gross\"].max()))\n    print(\"Avg gross:{0:.2f} Millions\".format(y[\"gross\"].mean()))\n    print(\"Min Gross:{0:.2f} Millions\".format(y[\"gross\"].min()))\n    print(\"number of 100 Millions Movies:\",y[y[\"gross\"]>100].shape[0])\n    print(\"Aug IMDB Score: {0:.2f}\".format(y[\"imdb_score\"].mean()))\n    print(\"most common Genres:\\n\",y[\"genres1\"].value_counts().head())\nactors_report(\"Meryl Streep\")","f119a299":"# here we are comparing brad pitt, leonardo caprio, and Tom cruise\ndef critically_acclaimed_actors(x):\n    a = data[data[\"actor_1_name\"]==x]\n    b = data[data[\"actor_2_name\"]==x]\n    c = data[data[\"actor_3_name\"]==x]\n    x = a.append(b)\n    y = x.append(c)\n    return y[\"num_critic_for_reviews\"].sum().astype(\"int\")\nprint(\"number of critic reviews for brad pitt\")\ndisplay(critically_acclaimed_actors(\"Brad Pitt\"))\nprint(\"number of critic reviews for Tom Cruise\")\ndisplay(critically_acclaimed_actors(\"Tom Cruise\"))\nprint(\"number of critic reviews for Leonardo DiCaprio\")\ndisplay(critically_acclaimed_actors(\"Leonardo DiCaprio\"))","142e13a8":"# here we are printing movie based of imdb score using jypter widgets\n@interact\ndef show_movies_more_than(columns=\"imdb_score\",score=9.0):\n    x = data.loc[data[columns]>score][[\"title_year\",\"movie_title\",\n                                    \"director_name\",\n                                    \"actor_1_name\",\n                                     \"actor_2_name\",\n                                     \"actor_3_name\",\n                                     \"profit\",\n                                     \"imdb_score\",\n                                     ]]\n    x = x.sort_values(by = \"imdb_score\",ascending=False)\n    x = x.drop_duplicates(keep=\"first\")\n    return x","c38271c8":"pd.set_option(\"max_rows\",30000)\n@interact\ndef show_articles_more_than(column=[\"budget\",\"gross\"],x=1000):\n    return data.loc[data[column]>x][[\"movie_title\",\"duration\",\"gross\",\"profit\",\"imdb_score\"]]","a140571d":"def recommend_lang(x):\n    y = data[[\"language\",'movie_title',\"imdb_score\"]][data[\"language\"] == x]\n    y = y.sort_values(by=\"imdb_score\",ascending=False)\n    return y.head(15)","a759c5ac":"recommend_lang(\"Foregin\")","1947681a":"recommend_lang(\"English\")","1f210b8a":"def recommend_movies_on_actors(x):\n    a = data[[\"movie_title\",\"imdb_score\"]][data[\"actor_1_name\"]==x]\n    b = data[[\"movie_title\",\"imdb_score\"]][data[\"actor_2_name\"]==x]\n    c = data[[\"movie_title\",\"imdb_score\"]][data[\"actor_3_name\"]==x]\n    a = a.append(b)\n    a = a.append(c)\n    a = a.sort_values(by = \"imdb_score\",ascending=False)\n    return a.head(15)","45307e08":"recommend_movies_on_actors(\"Tom Cruise\")","c4b2a8f3":"from mlxtend.preprocessing import TransactionEncoder\nx = data[\"genres\"].str.split(\"|\")\nte = TransactionEncoder()\nx = te.fit_transform(x)\nx = pd.DataFrame(x,columns=te.columns_)\nx.head()","bfa7f485":"genres = x.astype(\"int\")\ngenres.head()","b90e4f67":"genres.insert(0, \"movie_title\",data[\"movie_title\"])\ngenres.head(8)","5fcdb810":"genres = genres.set_index(\"movie_title\")\ngenres.head()","d492bd37":"def recommendation_genres(gen):\n    gen = genres[gen]\n    similar_genres = genres.corrwith(gen)\n    similar_genres = similar_genres.sort_values(ascending=False)\n    similar_genres = similar_genres.iloc[1:]\n    return similar_genres.head(3)","e8398d53":"recommendation_genres(\"Action\")","a6024c86":"x = genres.transpose()\nx.head()","0516f6ff":"def recommendation_movie(movie):\n    movie = x[movie+'\\xa0']\n    similar_movies = x.corrwith(movie)\n    similar_movies = similar_movies.sort_values(ascending=False)\n    similar_movies = similar_movies.iloc[1:]\n    return similar_movies.head(20)","48ef3cab":"recommendation_movie(\"The Expendables\")","8b9a0eff":"# Recommending movies on similar genres","03a3dbb9":"# Data Visualisation","bb4165f5":"# Introduction","2ebeb5fa":"![image.png](attachment:image.png)","19cc034b":"# Missing values imputation","70e53996":"# Recommending Movies Based on Actor","390e2b68":"Thanks for reading. I hope you like my recoomendation and visualization found it to be helpful. If you have any questions or suggestions, feel free to write them down in the comment section.","62a90316":"# Importing Important Libraries","157138a5":"1. Introduction\n2. What is a Recommendation System?\n3. Importing important libraries\n4. Reading dataset\n5. Missing values imputation\n6. Feature Engineering\n7. Visualisation\n8. Recommending Movies Based on Languages\n9. Recommending Movies Based on Actor\n10. Recommending movies on similar genres\n11. Recommending Similar Movies\n12. Conclusion","c3a751e8":"# Conclusion","d28514e3":"A recommendation system provides suggestions to the users through a filtering process that is based on user preferences and browsing history. A recommendation system is a platform that provides its users with various contents based on their preferences and likings. A recommendation system takes the information about the user as an input.\n\n\n","d69c3b25":"# Contents","1a7a6c85":"The main goal of this machine learning project is to build a recommendation engine that recommends movies to users.This python project is designed to help you understand the functioning of how a recommendation system works.","65dfd96d":"![image.png](attachment:image.png)","0bbef247":"#  Recommending Similar Movies","6af6ad02":"# What is a Recommendation System?","749b8d10":"# Feature Engineering","6dfd4f65":"# Reading Dataset","7a841549":"# Recommending Movies Based on Languages","104b2fa8":"# MOVIE RECOMMENDATION"}}