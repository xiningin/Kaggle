{"cell_type":{"1759c955":"code","ca03c8f6":"code","642e51ce":"code","2f5d9d5b":"code","2f47a7f8":"code","3cf8eb28":"code","01f481a4":"code","d17a29e3":"code","24621377":"code","cd42fb82":"code","fdb36747":"code","99c82fa9":"code","4848cfc7":"code","e203a0d8":"code","1fc8a627":"code","65b035c6":"code","71a96ab1":"code","1c28b2a6":"code","0d50927c":"code","fd72b5c3":"code","86de29af":"code","0caae61e":"code","c9325d66":"code","98de498e":"code","2463ab3e":"code","03875d36":"code","5676bb25":"code","d1a3495b":"code","2487b3df":"code","c2910b37":"code","08e5a24b":"code","1baa9892":"code","66ccfc81":"code","d53a49f5":"code","218ca3ef":"code","26f961df":"code","38774a6f":"code","ff7bde5a":"code","638d5667":"code","9b848d8f":"code","4311e102":"code","8ed24c15":"code","5c2d4c98":"code","a817bbdf":"code","69e3202d":"code","ecfe2d0f":"code","1b24aeb3":"code","6ca7f538":"code","9e0ef0e7":"code","c8527deb":"code","49641e21":"code","81fba62f":"code","5dd5a796":"code","bb75854e":"code","707bcaac":"code","f1e35d8a":"code","eae63739":"code","3a7373bb":"code","371c46f5":"code","a98fa64d":"code","c0b041d0":"code","e4ac411a":"code","fde81b2d":"code","d28b7068":"code","fc2cf018":"code","d71573b2":"code","868749ca":"code","0bbd8d3c":"code","3cd395bd":"code","ef4d2b60":"code","8ae1d500":"code","9bb7e384":"code","116ee787":"code","88377046":"code","c6ee70f3":"code","62bdcc63":"code","466dfcbe":"code","6a232dfe":"code","3c304a79":"code","d80d3fad":"code","f35f60ac":"code","8881e4d9":"code","4afc7ef2":"code","438a8c58":"code","33fed4a0":"code","5ce0621c":"code","95d68fd4":"code","73ba116f":"code","82d57e63":"code","19cdef2a":"code","d46852cf":"code","f4fd8d9b":"code","446b56ef":"code","6bc97365":"code","434ac654":"code","13c62795":"code","42d4267b":"code","eb286400":"code","0fb0a06e":"code","176757b4":"code","ad800a40":"code","a1e546f7":"code","6e2e128a":"code","e101a2b2":"code","3a849521":"code","47b3761f":"code","fc333069":"code","77b5644d":"code","8e267417":"code","409f2105":"code","9277c89a":"code","fdc37a29":"code","a8544d52":"code","3c5803a8":"code","c92c3f81":"code","737ff07b":"code","44afda1a":"code","c23fae03":"code","9d778d8b":"code","508a16fe":"code","dec6e676":"code","1db375e9":"markdown","7b344ad6":"markdown","30dcd755":"markdown","86a11a81":"markdown","b5e50b96":"markdown","e856f9c6":"markdown","2e9ed4c1":"markdown","174d18f2":"markdown","7b1e57b6":"markdown","ff1c9698":"markdown","ef20eb72":"markdown","25dd8cff":"markdown","5219786f":"markdown","2467a7e1":"markdown","1fb9fa6e":"markdown","30d3767b":"markdown","adbf56ce":"markdown","c75e22c0":"markdown","584aaf62":"markdown","531a688a":"markdown","3dc64568":"markdown","c18b1d0b":"markdown","3eaba50e":"markdown","486373df":"markdown","69d5278e":"markdown","69d8484f":"markdown","ece264d8":"markdown","75ba8225":"markdown","005c1537":"markdown","eb0108f5":"markdown","9e1ea5dc":"markdown","c471b4c9":"markdown","2d77da67":"markdown"},"source":{"1759c955":"import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom tqdm import tqdm\n\nfrom collections import Counter\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.externals import joblib \nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom keras import Sequential\nfrom keras.callbacks import Callback,ModelCheckpoint\nfrom keras.models import Sequential,load_model\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nimport keras.backend as K\nfrom keras.utils import to_categorical #Used for multi-class setting\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD","ca03c8f6":"train_data = pd.read_csv(\"..\/input\/airplane-accidents-severity-dataset\/train.csv\")","642e51ce":"train_data.shape","2f5d9d5b":"train_data.head()","2f47a7f8":"#These are our label columns.\ntrain_data['Severity'].unique()","3cf8eb28":"train_data.columns","01f481a4":"train_data.head()","d17a29e3":"train_data_for_pair_plot = train_data[[\"Severity\", \"Safety_Score\", \"Days_Since_Inspection\",\\\n                                       \"Total_Safety_Complaints\", \"Control_Metric\", \"Turbulence_In_gforces\",\\\n                                      \"Cabin_Temperature\"]]\nsns.set_style(\"whitegrid\")\nsns.pairplot(train_data_for_pair_plot, hue=\"Severity\", height=3, diag_kind = \"kde\")\nplt.show()","24621377":"def draw_boxplot(feature_under_observation, dataset):\n    \"\"\"Remember that to visuaslize median,percentile,IQR(Inter Quartile Range) box-plots are best.\"\"\"\n    ax = sns.boxplot(x=\"Severity\", y=feature_under_observation, data=dataset)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=30)\n    plt.show()\n    \n    \ndef draw_violinplot(feature_under_observation, dataset):\n    \"\"\"Remember that to visuaslize median,percentile,IQR(Inter Quartile Range) box-plots are best.\"\"\"\n    ax = sns.violinplot(x=\"Severity\", y=feature_under_observation, data=dataset)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=30)\n    plt.show()\n\n    \ndef normalize(dataframe):\n    #print(\"Here\")\n    test = dataframe.copy()\n    for col in test.columns:\n        if(col != \"Accident_ID\" and col !=\"Severity\"):\n            max_val = max(dataframe[col])\n            min_val = min(dataframe[col])\n            test[col] = (dataframe[col] - min_val) \/ (max_val-min_val)\n    return test","cd42fb82":"train_data[\"Severity\"].unique()","fdb36747":"severity_1 = train_data.\\\nloc[train_data[\"Severity\"] == \"Minor_Damage_And_Injuries\"]\n\nseverity_2 = train_data.\\\nloc[train_data[\"Severity\"] == \"Significant_Damage_And_Fatalities\"]\n\nseverity_3 = train_data.\\\nloc[train_data[\"Severity\"] == \"Significant_Damage_And_Serious_Injuries\"]\n\nseverity_4 = train_data.\\\nloc[train_data[\"Severity\"] == \"Highly_Fatal_And_Damaging\"]","99c82fa9":"#Severity is our target label.\ntrain_data['Severity'].value_counts().values","4848cfc7":"total = len(train_data)*1\nplt.figure(figsize=(8, 5))\nax = sns.barplot(x=train_data['Severity'].value_counts().index,\\\n            y=train_data['Severity'].value_counts().values)\nax.set_xticklabels(ax.get_xticklabels(), rotation=30)\nfor p in ax.patches:\n    \"\"\"ax.patches gives a list of rectangle object. Each element represent a rectangle in above histogram.\n    Example: Rectangle(xy=(-0.4, 0), width=0.8, height=1541, angle=0)\"\"\"\n    ax.annotate('{:.1f}%'.format(100*p.get_height()\/total), (p.get_x()+0.1, p.get_height()+5))\nplt.title(\"Number of favourite dishes\")\nplt.xlabel(\"Count\")\nplt.ylabel(\"Name\")","e203a0d8":"#A measure of how safe the plane was deemed to be\nsafety_score_data = train_data[\"Safety_Score\"]","1fc8a627":"safety_score_data.head()","65b035c6":"safety_score_data.describe()","71a96ab1":"sns.distplot(safety_score_data)","1c28b2a6":"sns.boxplot(x='Safety_Score', data=train_data)","0d50927c":"up = train_data[\"Safety_Score\"].mean()+3*train_data[\"Safety_Score\"].std()\nlow = train_data[\"Safety_Score\"].mean()-3*train_data[\"Safety_Score\"].std()\nprint(len(train_data[(train_data[\"Safety_Score\"]>up)]))\nprint(len(train_data[(train_data[\"Safety_Score\"]<low)]))","fd72b5c3":"draw_boxplot(\"Safety_Score\", train_data)","86de29af":"draw_violinplot(\"Safety_Score\", train_data)","0caae61e":"#how long the plane went without inspection before the incident\ndays_since_inspection_data = train_data['Days_Since_Inspection']","c9325d66":"days_since_inspection_data.head()","98de498e":"days_since_inspection_data.describe()","2463ab3e":"sns.distplot(days_since_inspection_data)","03875d36":"sns.boxplot(x='Days_Since_Inspection', data=train_data)","5676bb25":"up = train_data[\"Days_Since_Inspection\"].mean()+3*train_data[\"Days_Since_Inspection\"].std()\nlow = train_data[\"Days_Since_Inspection\"].mean()-3*train_data[\"Days_Since_Inspection\"].std()\nprint(len(train_data[(train_data[\"Days_Since_Inspection\"]>up)]))\nprint(len(train_data[(train_data[\"Days_Since_Inspection\"]<low)]))","d1a3495b":"draw_boxplot(\"Days_Since_Inspection\", train_data)","2487b3df":"draw_violinplot(\"Days_Since_Inspection\", train_data)","c2910b37":"#number of complaints from mechanics prior to the accident\ntotal_safety_complaints = train_data['Total_Safety_Complaints']","08e5a24b":"total_safety_complaints.head()","1baa9892":"total_safety_complaints.describe()","66ccfc81":"sns.distplot(total_safety_complaints)","d53a49f5":"sns.boxplot(x=\"Total_Safety_Complaints\", data=train_data)","218ca3ef":"up = train_data[\"Total_Safety_Complaints\"].mean()+3*train_data[\"Total_Safety_Complaints\"].std()\nlow = train_data[\"Total_Safety_Complaints\"].mean()-3*train_data[\"Total_Safety_Complaints\"].std()\nprint(len(train_data[(train_data[\"Total_Safety_Complaints\"]>up)]))\nprint(len(train_data[(train_data[\"Total_Safety_Complaints\"]<low)]))","26f961df":"draw_boxplot(\"Total_Safety_Complaints\", train_data)","38774a6f":"draw_violinplot(\"Total_Safety_Complaints\", train_data)","ff7bde5a":"# an estimation of how much control the pilot had during the incident given the factors at play\ncontrol_metric_data = train_data['Control_Metric']","638d5667":"control_metric_data.head()","9b848d8f":"control_metric_data.describe()","4311e102":"sns.distplot(control_metric_data)","8ed24c15":"sns.boxplot(x=\"Control_Metric\", data=train_data)","5c2d4c98":"up = train_data[\"Control_Metric\"].mean()+3*train_data[\"Control_Metric\"].std()\nlow = train_data[\"Control_Metric\"].mean()-3*train_data[\"Control_Metric\"].std()\nprint(len(train_data[(train_data[\"Control_Metric\"]>up)]))\nprint(len(train_data[(train_data[\"Control_Metric\"]<low)]))","a817bbdf":"draw_boxplot(\"Control_Metric\", train_data)","69e3202d":"draw_violinplot(\"Control_Metric\", train_data)","ecfe2d0f":"# the recorded\/estimated turbulence experienced during the accident\nturbulence_in_gforces_data =train_data['Turbulence_In_gforces']","1b24aeb3":"turbulence_in_gforces_data.head()","6ca7f538":"turbulence_in_gforces_data.describe()","9e0ef0e7":"sns.distplot(turbulence_in_gforces_data)","c8527deb":"sns.boxplot(x=\"Turbulence_In_gforces\", data=train_data)","49641e21":"up = train_data[\"Turbulence_In_gforces\"].mean()+3*train_data[\"Turbulence_In_gforces\"].std()\nlow = train_data[\"Turbulence_In_gforces\"].mean()-3*train_data[\"Turbulence_In_gforces\"].std()\nprint(len(train_data[(train_data[\"Turbulence_In_gforces\"]>up)]))\nprint(len(train_data[(train_data[\"Turbulence_In_gforces\"]<low)]))","81fba62f":"draw_boxplot(\"Turbulence_In_gforces\", train_data)","5dd5a796":"draw_violinplot(\"Turbulence_In_gforces\", train_data)","bb75854e":"#the last recorded temperature before the incident, measured in degrees fahrenheit\ncabin_temperature_data = train_data['Cabin_Temperature']","707bcaac":"cabin_temperature_data.head()","f1e35d8a":"cabin_temperature_data.describe()","eae63739":"sns.distplot(cabin_temperature_data)","3a7373bb":"sns.boxplot(x=\"Cabin_Temperature\", data=train_data)","371c46f5":"up = train_data[\"Cabin_Temperature\"].mean()+3*train_data[\"Cabin_Temperature\"].std()\nlow = train_data[\"Cabin_Temperature\"].mean()-3*train_data[\"Cabin_Temperature\"].std()\nprint(len(train_data[(train_data[\"Cabin_Temperature\"]>up)]))\nprint(len(train_data[(train_data[\"Cabin_Temperature\"]<low)]))","a98fa64d":"draw_boxplot(\"Cabin_Temperature\", train_data)","c0b041d0":"draw_violinplot(\"Cabin_Temperature\", train_data)","e4ac411a":"#the type of accident (factor, not numeric)\naccident_type_code_data = train_data['Accident_Type_Code']","fde81b2d":"accident_type_code_data.head()","d28b7068":"accident_type_code_data.value_counts().apply(lambda x: x\/sum(accident_type_code_data.value_counts()) * 100)","fc2cf018":"sns.countplot(x=\"Accident_Type_Code\", data=train_data)","d71573b2":"max_elevation_data = train_data['Max_Elevation']","868749ca":"max_elevation_data.head()","0bbd8d3c":"max_elevation_data.describe()","3cd395bd":"sns.distplot(max_elevation_data)","ef4d2b60":"sns.boxplot(x=\"Max_Elevation\", data=train_data)","8ae1d500":"up = train_data[\"Max_Elevation\"].mean()+3*train_data[\"Max_Elevation\"].std()\nlow = train_data[\"Max_Elevation\"].mean()-3*train_data[\"Max_Elevation\"].std()\nprint(len(train_data[(train_data[\"Max_Elevation\"]>up)]))\nprint(len(train_data[(train_data[\"Max_Elevation\"]<low)]))","9bb7e384":"draw_boxplot(\"Max_Elevation\", train_data)","116ee787":"draw_violinplot(\"Max_Elevation\", train_data)","88377046":"violations_data = train_data['Violations']","c6ee70f3":"violations_data.unique()","62bdcc63":"violations_data.value_counts().apply(lambda x: x\/sum(violations_data.value_counts()) * 100)","466dfcbe":"violations_data.head()","6a232dfe":"violations_data.describe()","3c304a79":"sns.countplot(x=\"Violations\", data=train_data)","d80d3fad":"adverse_weather_metric_data = train_data['Adverse_Weather_Metric']","f35f60ac":"adverse_weather_metric_data.head()","8881e4d9":"adverse_weather_metric_data.describe()","4afc7ef2":"sns.distplot(adverse_weather_metric_data)","438a8c58":"sns.boxplot(x=\"Adverse_Weather_Metric\", data=train_data)","33fed4a0":"up = train_data[\"Adverse_Weather_Metric\"].mean()+3*train_data[\"Adverse_Weather_Metric\"].std()\nlow = train_data[\"Adverse_Weather_Metric\"].mean()-3*train_data[\"Adverse_Weather_Metric\"].std()\nprint(len(train_data[(train_data[\"Adverse_Weather_Metric\"]>up)]))\nprint(len(train_data[(train_data[\"Adverse_Weather_Metric\"]<low)]))","5ce0621c":"draw_boxplot(\"Adverse_Weather_Metric\", train_data)","95d68fd4":"severity_1.head()","73ba116f":"draw_violinplot(\"Adverse_Weather_Metric\", train_data)","82d57e63":"accident_id_data = train_data['Accident_ID']","19cdef2a":"accident_id_data.head()","d46852cf":"accident_id_data.duplicated().value_counts()\n#Every ID is unique","f4fd8d9b":"sns.distplot(accident_id_data)","446b56ef":"corr_matrix = train_data.corr()","6bc97365":"plt.figure(figsize=(20,20))\nsns.heatmap(corr_matrix,annot=True,cmap=\"RdYlGn\")","434ac654":"sns.pairplot(train_data.drop(['Accident_Type_Code', 'Violations'], axis=1), hue='Severity')","13c62795":"#Earlier you have created box-plot for every severity class for each variable","42d4267b":"sns.catplot(x='Severity', y='Adverse_Weather_Metric', col='Violations',\n               data=train_data, kind=\"box\");","eb286400":"sns.countplot(x=\"Accident_Type_Code\", hue=\"Severity\", data=train_data)","0fb0a06e":"sns.countplot(x=\"Violations\", hue=\"Severity\", data=train_data)","176757b4":"normalized_data = normalize(train_data)","ad800a40":"normalized_data","a1e546f7":"model = TSNE(perplexity=50)\ntrain_tsne_data = model.fit_transform(normalized_data.\\\n                                      drop([\"Accident_ID\",\"Severity\"], axis=1))","6e2e128a":"data_y = train_data[\"Severity\"]","e101a2b2":"#Byte tsne data will return 2-dimesnions.\nx_ax = train_tsne_data[:,0]\ny_ax = train_tsne_data[:,1]","3a849521":"#Plot on the basis of severity\nplt.figure(figsize=(16,10))\nsns.scatterplot(x=x_ax, y=y_ax, hue=data_y, palette=sns.color_palette(\"hls\", 4), legend=\"full\")\nplt.show()","47b3761f":"#Plot on the basis of Accident_Type_Code\nplt.figure(figsize=(16,10))\nsns.scatterplot(x=x_ax, y=y_ax, hue=train_data['Accident_Type_Code'].map({1: 'orange', \n                                                                2: 'blue',\n                                                                3: 'red',\n                                                                4: 'yellow',\n                                                                5: 'green',\n                                                                6: 'black',\n                                                                7: 'purple'}), legend=\"full\")\nplt.show()","fc333069":"#Plot on the basis of Violations\nplt.figure(figsize=(16,10))\nsns.scatterplot(x=x_ax, y=y_ax, hue=train_data['Violations'].map({0: 'orange', \n                                                                1: 'blue',\n                                                                2: 'red',\n                                                                3: 'yellow',\n                                                                4: 'green',\n                                                                5: 'black'}), legend=\"full\")\nplt.show()","77b5644d":"train_data[['Accident_Type_Code', 'Violations','Severity']].groupby('Severity').mean().plot()","8e267417":"#Here we will create new columns for Accident_Type_Code and Violation\nAccident_Type_Code_Dummies = pd.get_dummies(train_data[\"Accident_Type_Code\"], prefix=\"Accident_Type_Code\")\ntrain_data = train_data.join(Accident_Type_Code_Dummies)\nViolations_Dummies = pd.get_dummies(train_data[\"Violations\"], prefix=\"Violations\")\ntrain_data = train_data.join(Violations_Dummies)\nnew_train_data = train_data.drop([\"Accident_Type_Code\"], axis=1)\nnew_train_data = new_train_data.drop([\"Violations\"], axis=1)","409f2105":"new_train_data.shape","9277c89a":"#Now we have to see EDA of these new features","fdc37a29":"new_train_data['Violations_0'].value_counts()","a8544d52":"corr_matrix = train_data.corr()","3c5803a8":"plt.figure(figsize=(20,20))\nsns.heatmap(corr_matrix,annot=True,cmap=\"RdYlGn\")","c92c3f81":"corr_matrix.index","737ff07b":"corr_matrix[\"Severity\"].sort_values(ascending=False)","44afda1a":"for col in train_data.columns:\n    if(col!='Severity'):\n        sns.jointplot(x=train_data[col], y=train_data[\"Severity\"])\n        plt.show()","c23fae03":"for col in train_data.columns:\n    if(col!='Severity'):\n        sns.distplot(train_data[col])\n        plt.show()","9d778d8b":"print(train_data['Safety_Score'].skew())\nprint(train_data['Days_Since_Inspection'].skew())\nprint(train_data['Total_Safety_Complaints'].skew())\nprint(train_data['Control_Metric'].skew())\nprint(train_data['Turbulence_In_gforces'].skew())\nprint(train_data['Cabin_Temperature'].skew())\nprint(train_data['Max_Elevation'].skew())\nprint(train_data['Adverse_Weather_Metric'].skew())","508a16fe":"corr_matrix = train_data.corr()","dec6e676":"corr_matrix[\"Severity\"].sort_values(ascending=False)","1db375e9":"## 'Cabin_Temperature' Column","7b344ad6":"### Quantitative vs Categorical","30dcd755":"## 'Max_Elevation' Column","86a11a81":"## 'Accident_Type_Code' Column","b5e50b96":"# Load the Data","e856f9c6":"<ol>\n<li>Total_Safety_Complaints<\/li>\n<li>Control_Metric<\/li>\n<li>Cabin_Temperature<\/li>\n<li>Adverse_Weather_metric<\/li>\n<\/ol>\nThey are showing few outliers","2e9ed4c1":"<h>Description of columns<\/h>\n<ol>\n    <li>Severity : \ta description (4 level factor) on the severity of the crash [Target]<\/li>\n    <li>Safety_Score : a measure of how safe the plane was deemed to be<\/li>\n    <li>Days_Since_Inspection : how long the plane went without inspection before the incident<\/li>\n    <li>Total_Safety_Complaints : number of complaints from mechanics prior to the accident<\/li>\n    <li>Control_Metric : an estimation of how much control the pilot had during the incident given the factors at play<\/li>\n    <li>Turbulence_In_gforces : the recorded\/estimated turbulence experienced during the accident<\/li>\n    <li>Cabin_Temperature : the last recorded temperature before the incident, measured in degrees fahrenheit<\/li>\n    <li>Accident_Type_Code : the type of accident (factor, not numeric)<\/li>\n    <li>Max_Elevation : Description not provided<\/li>\n    <li>Violations : Number of violations that the aircraft received during inspections<\/li>\n    <li>Adverse_Weather_Metric : Description not provided<\/li>\n    <li>Accident_ID : unique id assigned to each row<\/li>\n<\/ol>\n","174d18f2":"<h>We can see that dataset is not skewed.<br>\nSince class distribution is not imbalanced.<\/h>","7b1e57b6":"# EDA","ff1c9698":"Nothing is too strongly correlated with our target variable.","ef20eb72":"## 'Severity' Column","25dd8cff":"## 'Control_Metric' Column","5219786f":"<b>More then 25% of highly fatal accident have a safety score in range 20-30. One interersting thing to notice is the outliers on the basis of severity<\/b>","2467a7e1":"## 'Days_Since_Inspection' Column","1fb9fa6e":"# Import the Libraries","30d3767b":"### Categorical vs Categorical","adbf56ce":"<ol>\n<li>Total_Safety_Complaints<\/li>\n<li>Adverse_Weather_metric<\/li>\n<\/ol>\nThey are showing right skewness","c75e22c0":"## 'Violations' Column","584aaf62":"<b> Here the problem with pairplot is that it is creating scatter plot for 2 continuous features hence it is impossible to understand much from it<\/b>","531a688a":"# Custom Functions","3dc64568":"<b>The median of Highly_Fatal severity has lowest Safety_Score<\/b>","c18b1d0b":"<b>When we want to analyze a quantitative variable in two categorical dimensions at once, there is a suitable function for this in the seaborn library called catplot() <b>","3eaba50e":"#### T-SNE","486373df":"## 'Accident_ID' Column","69d5278e":"<b>It shows outliers. Maybe with safety score > 83 <\/b> ","69d8484f":"## Distribute different class data for EDA ","ece264d8":"## 'Adverse_Weather_Metric' Columns","75ba8225":"## 'Safety_Score' Column","005c1537":"# New Features","eb0108f5":"## Multivariate Analysis","9e1ea5dc":"## 'Total_Safety_Complaints' Column","c471b4c9":"## 'Turbulence_In_gforces' Column","2d77da67":"### Quantitative vs Quantitaive"}}