{"cell_type":{"a0b6f4d2":"code","2295e41a":"code","a1bd024f":"code","6423eed5":"code","04fd6763":"code","9a5a7034":"code","d0022a0e":"code","54a0dffa":"code","315f1c93":"code","aca4f66b":"code","2863458c":"code","1be98daa":"code","9be11cb0":"code","12dede2b":"code","459463c7":"code","24c1d190":"code","02e06ee6":"code","d1ed6f23":"code","08ddc9c3":"code","a11dbcdc":"code","27971a1d":"code","5d5f32c0":"code","62939012":"code","43375d3c":"code","05e6dc78":"code","e6ca35f4":"code","6b26b16f":"code","5dafb7f1":"code","ed44b749":"code","08245d67":"markdown","682e2c41":"markdown","2461627b":"markdown","c8dc32bc":"markdown"},"source":{"a0b6f4d2":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML\nimport random\nimport warnings\nwarnings.filterwarnings('ignore')","2295e41a":"case = pd.read_csv('..\/input\/coronavirusdataset\/Case.csv')","a1bd024f":"print(case.shape)\ncase.head()","6423eed5":"patientinfo = pd.read_csv('..\/input\/coronavirusdataset\/PatientInfo.csv')\nprint(patientinfo.shape)\npatientinfo.head()","04fd6763":"patientroute = pd.read_csv('..\/input\/coronavirusdataset\/PatientRoute.csv')","9a5a7034":"print(patientroute.shape)\npatientroute.head()","d0022a0e":"timeprovince = pd.read_csv('..\/input\/coronavirusdataset\/TimeProvince.csv')\ntimeprovince","54a0dffa":"df = timeprovince[['date', 'province', 'confirmed']]","315f1c93":"df.shape","aca4f66b":"import numpy as np","2863458c":"#df = df.pivot(index='province', columns='date', values='confirmed')\n#df = df.reset_index()\n\n#for p in range(2):\n#    i = 0\n#    while i < len(df.columns):\n#        try:\n#            a = np.array(df.iloc[:, i + 1])\n#            b = np.array(df.iloc[:, i + 2])\n#            c = (a + b) \/ 2\n#            df.insert(i+2, str(df.iloc[:, i + 1].name) + '^' + str(len(df.columns)), c)\n#        except:\n#            print(f\"\\n  Interpolation No. {p + 1} done...\")\n#        i += 2","1be98daa":"df = timeprovince[['date', 'province', 'confirmed']]","9be11cb0":"df.head()","12dede2b":"df.columns = ['date', 'province', 'value']","459463c7":"#df = pd.melt(df, id_vars = 'province', var_name = 'date')","24c1d190":"fnames_list = df['date'].unique().tolist()","02e06ee6":"def random_color_generator(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","d1ed6f23":"province_list = df['province'].unique().tolist()","08ddc9c3":"province_to_kor = {'Seoul': '\uc11c\uc6b8',\n 'Busan' : '\ubd80\uc0b0',\n 'Daegu': '\ub300\uad6c',\n 'Incheon': '\uc778\ucc9c',\n 'Gwangju': '\uad11\uc8fc',\n 'Daejeon': '\ub300\uc804',\n 'Ulsan': '\uc6b8\uc0b0',\n 'Sejong': '\uc138\uc885',\n 'Gyeonggi-do': '\uacbd\uae30\ub3c4',\n 'Gangwon-do': '\uac15\uc6d0\ub3c4',\n 'Chungcheongbuk-do': '\ucda9\uccad\ubd81\ub3c4',\n 'Chungcheongnam-do': '\ucda9\uccad\ub0a8\ub3c4',\n 'Jeollabuk-do': '\uc804\ub77c\ubd81\ub3c4',\n 'Jeollanam-do': '\uc804\ub77c\ub0a8\ub3c4',\n 'Gyeongsangbuk-do': '\uacbd\uc0c1\ubd81\ub3c4',\n 'Gyeongsangnam-do': '\uacbd\uc0c1\ub0a8\ub3c4',\n 'Jeju-do':'\uc81c\uc8fc\ub3c4'}","a11dbcdc":"df['province_kr'] = df['province'].map(province_to_kor)","27971a1d":"colors = dict(zip(province_list, random_color_generator(len(province_list))))","5d5f32c0":"num_of_elements = 10","62939012":"import matplotlib.colors as mc\nimport colorsys\nfrom random import randint","43375d3c":"def transform_color(color, amount = 0.5):\n\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n        c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])\n\nrandom_hex_colors = []\nfor i in range(len(province_list)):\n    random_hex_colors.append('#' + '%06X' % randint(0, 0xFFFFFF))\n\nrgb_colors = [transform_color(i, 1) for i in random_hex_colors]\nrgb_colors_opacity = [rgb_colors[x] + (0.825,) for x in range(len(rgb_colors))]\nrgb_colors_dark = [transform_color(i, 1.12) for i in random_hex_colors]","05e6dc78":"normal_colors = dict(zip(province_list, rgb_colors_opacity))\ndark_colors = dict(zip(province_list, rgb_colors_dark))","e6ca35f4":"import re","6b26b16f":"fig, ax = plt.subplots(figsize = (36, 20))\n\ndef draw_barchart(current_date):\n    dff = df[df['date'].eq(current_date)].sort_values(by='value', ascending=True).tail(num_of_elements)\n    ax.clear()\n    \n    ax.barh(dff['province'], dff['value'], color=[normal_colors[p] for p in dff['province']],\n                edgecolor =([dark_colors[x] for x in dff['province']]), linewidth = '6')\n    dx = dff['value'].max() \/ 200\n\n\n    for i, (value, name) in enumerate(zip(dff['value'], dff['province'])):\n        ax.text(value + dx, \n                i + (num_of_elements \/ 50), '    ' + name,\n                size = 32,\n                ha = 'left',\n                va = 'center',\n                fontdict = {'fontname': 'Trebuchet MS'})\n\n        ax.text(value + dx,\n                i - (num_of_elements \/ 50), \n                f'    {value:,.0f}', \n                size = 32, \n                ha = 'left', \n                va = 'center')\n\n    time_unit_displayed = re.sub(r'\\^(.*)', r'', str(current_date))\n    ax.text(1.0, \n            1.1, \n            time_unit_displayed,\n            transform = ax.transAxes, \n            color = '#666666',\n            size = 32,\n            ha = 'right', \n            weight = 'bold', \n            fontdict = {'fontname': 'Trebuchet MS'})\n\n    ax.text(-0.005, \n            1.05, \n            'Confirmed', \n            transform = ax.transAxes, \n            size = 32, \n            color = '#666666')\n\n    ax.text(-0.005, \n            1.1, \n            'Confirmed from 2020-01-20 to 2020-03-22', \n            transform = ax.transAxes,\n            size = 32, \n            weight = 'bold', \n            ha = 'left')\n\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis = 'x', colors = '#666666', labelsize = 28)\n    ax.set_yticks([])\n    ax.set_axisbelow(True)\n    ax.margins(0, 0.01)\n    ax.grid(which = 'major', axis = 'x', linestyle = '-')\n\n    plt.locator_params(axis = 'x', nbins = 4)\n    plt.box(False)\n    plt.subplots_adjust(left = 0.075, right = 0.75, top = 0.825, bottom = 0.05, wspace = 0.2, hspace = 0.2)\n    \n    ax.text(1, \n            0, \n            'by @youhanlee; credit @Korea Centers for Disease Control and Prevention @jihookim', \n            transform=ax.transAxes, \n            color='#777777', \n            ha='right', \n            size=32,\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)    \ndraw_barchart('2020-03-20')","5dafb7f1":"fig, ax = plt.subplots(figsize = (36, 20))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=fnames_list)\nHTML(animator.to_jshtml())","ed44b749":"#Writer = animation.writers['ffmpeg']\n#writer = Writer(fps=8, metadata=dict(artist='Me'), bitrate=1600)\n#animator.save(\"corona_province_kr_new.mp4\", writer=writer)","08245d67":"# To save this as movie, use below code. (You need to install ffmpeg in your pc)","682e2c41":"# If you add this, you can obtain smooted plots.","2461627b":"# Reference","c8dc32bc":"- https:\/\/towardsdatascience.com\/bar-chart-race-in-python-with-matplotlib-8e687a5c8a41\n- https:\/\/medium.com\/@6berardi\/how-to-create-a-smooth-bar-chart-race-with-python-ad2daf6510dc"}}