{"cell_type":{"e0ff9e26":"code","8418b027":"code","9325c481":"code","e49fc91d":"code","5d6581a9":"code","dfc9da1a":"code","6ebd8219":"code","47afae82":"code","129a25cc":"code","ab8a78c9":"code","70e3d362":"code","f13a2e59":"code","95f4428a":"code","c3069ac8":"code","635c75df":"code","8c3d7947":"code","6aca1b84":"code","5a67f354":"code","a37253db":"code","866d069e":"code","35c74861":"code","2dfcc556":"code","52cb9529":"code","fdd572ac":"code","144c837f":"code","e8b4a3a3":"code","6f370a07":"code","06d597fa":"code","9a46df07":"code","68367ac0":"code","3dcc158a":"code","c5370819":"code","4524fae5":"code","8abfc299":"code","5e33cb05":"code","daeed451":"code","2af3c6b4":"code","4591ef8a":"markdown","eb40775e":"markdown","fad33c8a":"markdown","cc46d55c":"markdown","68131726":"markdown","32cdc851":"markdown","cbd388c5":"markdown","7c6734f5":"markdown","d3608fe7":"markdown","51ec2f18":"markdown","a0bd1edd":"markdown","77262566":"markdown","ace0f6b1":"markdown","88174a11":"markdown","d281f504":"markdown","e32aff2e":"markdown","b0e9d945":"markdown","040efaff":"markdown","f9600d54":"markdown","7e25758f":"markdown","e7703785":"markdown"},"source":{"e0ff9e26":"# LIBRARY IMPORTS\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport seaborn as sns\nimport os\n\n%matplotlib inline\n\nfrom scipy.stats import norm","8418b027":"def qry(q, connection = sqlite3.connect(\"..\/input\/8anu-climbing-logbook\/database.sqlite\")):\n    df = pd.read_sql_query(q, connection)\n    connection.close\n    return df\n\n# prepare the dataframes\ndf_user = qry(\"SELECT * FROM user\")\ndf_grade = qry(\"SELECT * FROM grade\")\ndf_method = qry(\"SELECT * FROM method\")\ndf_ascent = qry(\"SELECT * FROM ascent\")\n\n#df_user.to_csv('user.csv', index='False')\n#df_grade.to_csv('grade.csv', index='False')\n#df_method.to_csv('method.csv', index='False')\n#df_ascent.to_csv('ascent.csv', index='False')\n\n# uncomment when the csv are prepared for direct read-in\n#df_user = pd.read_csv('\/kaggle\/working\/user.csv')\n#df_grade = pd.read_csv('\/kaggle\/working\/grade.csv')\n#df_method = pd.read_csv('\/kaggle\/working\/method.csv')\n#df_ascent = pd.read_csv('\/kaggle\/working\/ascent.csv')","9325c481":"# Merge and filter data to create interim dataset\ndf_interim = (\n    df_ascent\n    .merge(df_grade, how='inner', left_on='grade_id', right_on='id', suffixes=('_ascent', '_grade'))\n    .loc[:, ['id_ascent', 'user_id', 'grade_id', 'fra_routes', 'date', 'name', 'climb_type']]  # select relevant columns for project\n    .sort_values(by=['user_id', 'date'])\n    .reset_index(drop=True)   \n)\n\ndisplay(df_interim)","e49fc91d":"# Process the grading system by merging some +\/- and lower grades\nsorted(set(df_interim['fra_routes'].tolist()), reverse=False)","5d6581a9":"# Merged grades\ndf_interim['grade_fra'] = df_interim.fra_routes.apply(lambda x: x.replace('+',''))\ndf_interim['grade_fra'] = df_interim.grade_fra.replace({'8a':'8', '8b':'8', '8c':'8', '8c\/9a':'8', '8c\/':'8', '9a':'8', '9b':'8', '9c':'8', \n                                                        '-':'4', '2':'4', '3a':'4', '3b':'4', '3c':'4', \n                                                        '4a':'4', '4b':'4','4c':'4'})\ndf_interim.grade_fra.value_counts()","dfc9da1a":"# Begain to devide into several categories: RopeClimbing and Boulderin\ndef df_clean(df, climb_type):\n    df_pivot = (\n        df\n        .loc[df['climb_type']==climb_type]\n        .groupby(['user_id', 'grade_fra'])\n        .nth(0, dropna=None) #select first ascent at each level for each climber\n        # Because what we care about is the climb log that reach to the next level for the first time\n        .reset_index()\n        .pivot_table(index='user_id', columns='grade_fra', values='date')\n        .reset_index()\n    )\n    \n    df_clean = (\n        df_pivot\n        .merge(df_user.loc[:, ['id','sex','height']], how='inner', left_on='user_id', right_on='id')\n        .drop(['id', 'user_id'], axis=1)\n    )\n    \n    return df_clean\n\n\ndf_clean_rope = df_clean(df_interim, 0) #0 is rope climbing \ndf_clean_bouldering = df_clean(df_interim, 1) #1 is bouldering","6ebd8219":"df_clean_rope_male = df_clean_rope[df_clean_rope['sex']==0].drop('sex', axis=1)\ndf_clean_rope_female = df_clean_rope[df_clean_rope['sex']==1].drop('sex', axis=1)\n\ndf_clean_bouldering_male = df_clean_bouldering[df_clean_bouldering['sex']==0].drop('sex', axis=1)\ndf_clean_bouldering_female = df_clean_bouldering[df_clean_bouldering['sex']==1].drop('sex', axis=1)","47afae82":"# Visualize avaialble data\nplt.figure(figsize=(10, 5))\nsns.heatmap(df_clean_rope_male\n            .loc[:, ~df_clean_rope_male.columns.isin(['height'])]\n            .notnull().applymap(lambda x: int(x)), cbar=False, cmap='Blues')\nplt.title(\"Rope Climbing Heatmap - Male Ascents\", fontsize=15)\nplt.xlabel(\"Grade\", fontsize=15)\nplt.ylabel(\"Climber Id\", fontsize=15)\nplt.show()\n\nprint(\"Blue indicates available data\")\nprint(\"Number of Climbs: {}\".format(df_clean_rope_male.notnull().sum().sum()))\nprint(\"Number Climbers: {}\".format(len(df_clean_rope_male)))\nprint(\"Average Climbs per Climber:\", round(df_clean_rope_male.notnull().sum().sum()\/len(df_clean_rope_male), 2))","129a25cc":"# Visualize avaialble data\nplt.figure(figsize=(10, 5))\nsns.heatmap(df_clean_rope_female\n            .loc[:, ~df_clean_rope_female.columns.isin(['height'])]\n            .notnull().applymap(lambda x: int(x)), cbar=False, cmap='OrRd')\nplt.title(\"Rope Climbing Heatmap - Female Ascents\", fontsize=15)\nplt.xlabel(\"Grade\", fontsize=15)\nplt.ylabel(\"Climber Id\", fontsize=15)\nplt.show()\n\nprint(\"Red indicates available data\")\nprint(\"Number of Climbs: {}\".format(df_clean_rope_female.notnull().sum().sum()))\nprint(\"Number Climbers: {}\".format(len(df_clean_rope_female)))\nprint(\"Average Climbs per Climber:\", round(df_clean_rope_female.notnull().sum().sum()\/len(df_clean_rope_female), 2))","ab8a78c9":"# Visualize avaialble data\nplt.figure(figsize=(10, 5))\nsns.heatmap(df_clean_bouldering_male\n            .loc[:, ~df_clean_bouldering_male.columns.isin(['height'])]\n            .notnull().applymap(lambda x: int(x)), cbar=False, cmap='Blues')\nplt.title(\"Bouldering Heatmap - Male Ascents\", fontsize=15)\nplt.xlabel(\"Grade\", fontsize=15)\nplt.ylabel(\"Climber Id\", fontsize=15)\nplt.show()\n\nprint(\"Blue indicates available data\")\nprint(\"Number of Climbs: {}\".format(df_clean_bouldering_male.notnull().sum().sum()))\nprint(\"Number Climbers: {}\".format(len(df_clean_bouldering_male)))\nprint(\"Average Climbs per Climber:\", round(df_clean_bouldering_male.notnull().sum().sum()\/len(df_clean_bouldering_male), 2))","70e3d362":"# Visualize avaialble data\nplt.figure(figsize=(10, 5))\nsns.heatmap(df_clean_bouldering_female\n            .loc[:, ~df_clean_bouldering_female.columns.isin(['height'])]\n            .notnull().applymap(lambda x: int(x)), cbar=False, cmap='OrRd')\nplt.title(\"Bouldering Heatmap - Female Ascents\", fontsize=15)\nplt.xlabel(\"Grade\", fontsize=15)\nplt.ylabel(\"Climber Id\", fontsize=15)\nplt.show()\n\nprint(\"Red indicates available data\")\nprint(\"Number of Climbs: {}\".format(df_clean_bouldering_female.notnull().sum().sum()))\nprint(\"Number Climbers: {}\".format(len(df_clean_bouldering_female)))\nprint(\"Average Climbs per Climber:\", round(df_clean_bouldering_female.notnull().sum().sum()\/len(df_clean_bouldering_female), 2))","f13a2e59":"fig, axes = plt.subplots(1, 2, figsize =(10, 5)) \n\ndata_rope = [26155, 4726] \ndata_bouldering = [16850, 2402] \ncolors = ['#9FE2BF', '#FA8072'] \nsubjects = ['Male', 'Female'] \n\naxes[0].pie(data_rope, labels=subjects, colors=colors, autopct='%1.0f%%', startangle=90) \naxes[1].pie(data_bouldering, labels=subjects, colors=colors, autopct='%1.0f%%', startangle=90) \naxes[0].set_title('Rope Climber Composition', fontsize=20)\naxes[1].set_title('Boulderer Composition', fontsize=20)\n\nplt.show()","95f4428a":"def df_diff_thresh(df_clean):\n    df_diff = (\n        df_clean\n        .diff(axis=1)\n        .applymap(lambda x: np.nan if x<0 else x) #remove negative time intervals\n        .applymap(lambda x: x \/ (60*60*24)) #convert timestamps to days\n        .drop('4', axis=1)\n    )\n    \n    # Remove outliers\n    thresh = df_diff.quantile(q=0.99, axis='index')\n    mask = df_diff.apply(lambda row: row < thresh.values, axis=1)\n    df_diff_thresh = df_diff[mask]\n    return df_diff_thresh\n\n\ndf_diff_thresh_rope_male = df_diff_thresh(df_clean_rope_male.drop('height', axis=1))\ndf_diff_thresh_rope_female = df_diff_thresh(df_clean_rope_female.drop('height', axis=1))\n\ndf_diff_thresh_bouldering_male = df_diff_thresh(df_clean_bouldering_male.drop('height', axis=1))\ndf_diff_thresh_bouldering_female = df_diff_thresh(df_clean_bouldering_female.drop('height', axis=1))","c3069ac8":"vals_rope_male = (\n    df_diff_thresh_rope_male\n    .mean()\n    .cumsum()\n)\nerrs_rope_male = (\n    df_diff_thresh_rope_male\n    .std()\n)\n\nvals_rope_female = (\n    df_diff_thresh_rope_female\n    .mean()\n    .cumsum()\n)\nerrs_rope_female = (\n    df_diff_thresh_rope_female\n    .std()\n)","635c75df":"vals_bouldering_male = (\n    df_diff_thresh_bouldering_male\n    .mean()\n    .cumsum()\n)\nerrs_bouldering_male = (\n    df_diff_thresh_bouldering_male\n    .std()\n)\n\nvals_bouldering_female = (\n    df_diff_thresh_bouldering_female\n    .mean()\n    .cumsum()\n)\nerrs_bouldering_female = (\n    df_diff_thresh_bouldering_female\n    .std()\n)","8c3d7947":"def drawer(df1, df2, err1, err2, label1, label2, xtitle):\n    # Define colors for plot\n    cmap = cm.Set2\n    colors1 = []\n    colors1.extend(cmap(np.linspace(0, 0.1, 3)))\n    colors1.extend(cmap(np.linspace(0.25, 0.3, 3)))\n    colors1.extend(cmap(np.linspace(0.15, 0.2, 3)))\n    colors1.extend(cmap(np.linspace(0.95, 0.95, 1)))\n    \n    cmap = cm.Pastel2\n    colors2 = []\n    colors2.extend(cmap(np.linspace(0, 0.1, 3)))\n    colors2.extend(cmap(np.linspace(0.25, 0.3, 3)))\n    colors2.extend(cmap(np.linspace(0.15, 0.2, 3)))\n    colors2.extend(cmap(np.linspace(0.95, 0.95, 1)))\n\n    # Create figure\n    fig, ax = plt.subplots(1, 1, figsize=(12.5, 7))\n\n    # Creat Plots\n    ax.set_facecolor('white')\n    for i, c in enumerate(colors1):    \n        ax.errorbar(\n            df1[i], \n            i-0.075, \n            xerr=err1[i], \n            label=label1,\n            color=c,\n            fmt='s', \n            markersize=10,\n            markeredgecolor='black',\n            markeredgewidth=2.0,\n            linewidth=4,\n            ecolor=c,\n            capsize=6\n        )\n\n    for i, c in enumerate(colors2):    \n        ax.errorbar(\n            df2[i], \n            i+0.085, \n            xerr=err2[i], \n            label=label2,\n            color=c,\n            fmt='o', \n            markersize=10,\n            markeredgecolor='black',\n            markeredgewidth=2.0,\n            linewidth=4,\n            ecolor=c,\n            capsize=6\n        )\n\n    # Alter y-axis\n    plt.yticks(\n        np.arange(10),\n        vals_rope_male.index\n    )\n    \n    # Alter x-axis\n    plt.xticks(\n        np.arange(0, 10*365, 365\/2.),\n        ['Start','','1yr','','2yrs','','3yrs','','4yrs','','5yrs','','6yrs','','7yrs','','8yrs','','9yrs','']\n    )\n    plt.xlim((-0.1, 8.05*365))\n\n    # Grid\n    plt.grid(False, axis='y', which='both')\n    plt.grid(True, axis='x', which='both', linestyle='--', linewidth=1)\n\n    # Titles\n    plt.ylabel(\"Grade\", fontsize=20)\n    plt.xlabel(xtitle, fontsize=20)\n\n    # Font size\n    plt.rc('xtick', labelsize=15)\n    plt.rc('ytick', labelsize=15)\n\n    handles, labels = plt.gca().get_legend_handles_labels()\n    i =1\n    while i<len(labels):\n        if labels[i] in labels[:i]:\n            del(labels[i])\n            del(handles[i])\n        else:\n            i +=1\n    plt.legend(handles, labels)\n\n    plt.show()\n\n    fig.tight_layout()","6aca1b84":"drawer(vals_rope_male, vals_rope_female, errs_rope_male, errs_rope_female,\n       'Male','Female',\"Outdoor Rope Climbing Years\")","5a67f354":"drawer(vals_bouldering_male, vals_bouldering_female, errs_bouldering_male, errs_bouldering_female,\n       'Male','Female',\"Outdoor Bouldering Years\")","a37253db":"# Print out the data points of the above figures:\nprint(\"Rope Climbing Plot Values:\")\nprint(\"Male\")\ndisplay(vals_rope_male\/365)\ndisplay(errs_rope_male\/365)\nprint(\"Female\")\ndisplay(vals_rope_female\/365)\ndisplay(errs_rope_female\/365)\n\nprint(\"Bouldering Plot Values\")\nprint(\"Male\")\ndisplay(vals_bouldering_male\/365)\ndisplay(errs_bouldering_male\/365)\nprint(\"Female\")\ndisplay(vals_bouldering_female\/365)\ndisplay(errs_bouldering_female\/365)","866d069e":"# To remove that height information didn't fill\ndf_subset = df_user.loc[:, ['height', 'sex']]\ndf_subset = df_subset[(df_subset['height']>=120)&(df_subset['height']<=220)]\n\n# getting data of the histogram\ny_male, x_male = np.histogram(df_subset[df_subset['sex']==0][\"height\"], bins=100)\ny_female, x_female = np.histogram(df_subset[df_subset['sex']==1][\"height\"], bins=100)\n\n\n# finding the PDF of the histogram using count values\npdf_male = y_male \/ sum(y_male)\npdf_female = y_female \/ sum(y_female)\n  \n# using numpy np.cumsum to calculate the CDF\n# We can also find using the PDF values by looping and adding\ncdf_male = np.cumsum(pdf_male)\ncdf_female = np.cumsum(pdf_female)","35c74861":"print(df_subset[df_subset['sex']==0].shape[0], \" male climbers\",\n      df_subset[df_subset['sex']==1].shape[0], \" female climbers\")","2dfcc556":"print(\"Male median\", df_subset[df_subset['sex']==0]['height'].median(axis=0), \n      \"Female median\", df_subset[df_subset['sex']==1]['height'].median(axis=0))","52cb9529":"fig, ax = plt.subplots(figsize=(7,4))\nplt.style.use('seaborn-whitegrid')\n\nax = sns.distplot(df_subset[df_subset['sex']==0][\"height\"], bins=25, fit=norm, kde=False, label='Male')\nax = sns.distplot(df_subset[df_subset['sex']==1][\"height\"], bins=25, fit=norm, kde=False, label='Female')\nplt.legend()\nax.set(xlim=(130, 210))\n\nprint(\"Male Climbers: mean=\",\n      round(df_subset[df_subset['sex']==0].height.mean(), 2), \"+\/-\", \\\n      round(df_subset[df_subset['sex']==0].height.std(), 2), \"(cm)\")\n\nprint(\"Female Climbers: mean=\",\n      round(df_subset[df_subset['sex']==1].height.mean(), 2), \"+\/-\", \\\n      round(df_subset[df_subset['sex']==1].height.std(), 2), \"(cm)\")\n","fdd572ac":"# plotting CDF\nfig, ax = plt.subplots(figsize=(8,7))\nplt.style.use('seaborn-whitegrid')\n\nplt.plot(x_male[1:], cdf_male, label=\"CDF\", linewidth=4)\n\n\n# Mark where some elite atheletes are in the diagram, including:\n# Colin Duffy 168cm\nxval = 168\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Colin Duffy 168\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.08), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Tomoa Narasaki 179cm\nxval = 170\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Tomoa Narasaki 170\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-8, yval+0.095), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Jakob Schubert 176cm\nxval = 176\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Jakob Schubert 176\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Albert Gines Lopez 178cm\nxval = 178\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Albert Gines Lopez 178\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n\n# Nathaiel Coleman 182cm\nxval = 182\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Nathaiel Coleman 182\",\n                  xy=(xval, yval), \n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-11, 0.8), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Adam Ondra 186cm\nxval = 186\nyval = cdf_male[x_male.tolist().index(xval)]\nann = ax.annotate(\"Adam Ondra 186\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.05), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nax.set(xlim=(145, 200), ylim=(-0.001, 1.001))\nax.set_title('Male Climber Height CDF Distribution', fontsize=20)\nax.set_xlabel('Height (cm)', fontsize=15)\nax.set_ylabel('Fraction', fontsize=15)\n\nplt.show()","144c837f":"# plotting CDF\nfig, ax = plt.subplots(figsize=(8,7))\nplt.style.use('seaborn-whitegrid')\n\nplt.plot(x_female[1:], cdf_female, label=\"CDF\", color='salmon', linewidth=4)\n\n\n# Mark where some elite atheletes are in the diagram, including:\n# Laura Rogora 152cm\nxval = 152\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Laura Rogora 152\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-8, yval+0.08), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Brooke Raboutou 158cm\nxval = 158\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Brooke Raboutou 158\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.08), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Miho Nonaka 163cm\nxval = 163\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Miho Nonaka 163\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Janja Garnbret 164cm\nxval = 164\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Janja Garnbret 164\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-10, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n\n# Akiyo Noguchi 167cm\nxval = 167\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Akiyo Noguchi 167\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-8, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n# Lucka Rakovec 170cm\nxval = 170\nyval = cdf_female[x_female.tolist().index(xval)]\nann = ax.annotate(\"Lucka Rakovec 170\",\n                  xy=(xval, yval),\n                  arrowprops=dict(facecolor='grey', shrink=0.03),\n                  xytext=(xval-7, yval+0.1), xycoords='data', textcoords='data',\n                  size=13, va=\"center\", ha=\"center\",\n                  bbox=dict(boxstyle=\"round4\", fc=\"w\")\n                  )\n\n\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nax.set(xlim=(135, 190), ylim=(-0.001, 1.001))\nax.set_title('Female Climber Height CDF Distribution', fontsize=20)\nax.set_xlabel('Height (cm)', fontsize=15)\nax.set_ylabel('Fraction', fontsize=15)\n\nplt.show()\n","e8b4a3a3":"num_ascent_rope = df_ascent[df_ascent['climb_type']==0].shape[0]\nnum_ascent_bouldering = df_ascent[df_ascent['climb_type']==1].shape[0]\nprint(\"total rope ascents:\", num_ascent_rope)\nprint(\"total boudlering ascents:\", num_ascent_bouldering)","6f370a07":"def codeAscentInfo(code, climb_type, tops):\n    '''\n    INPUT: \n        code: Country code\n        climb_type: 0 or 1, it represents rope climbing or bouldering\n        tops: The amount of crags want to be shown\n    OUTPUT:\n        num_crag: How many cargs the country has in the climbing log\n        compose_ascent: A dataframe, with columns of 'country', 'crag_name', 'frac_inCountry', 'frac_inAll'\n                        'frac_inCountry'- the climbs here accounts for the proportion of all climbs in this country\n                        'frac_inAll'- the climbs here accounts for the proportion of all climbs in the data\n                        \n    '''\n    df = df_ascent[(df_ascent['climb_type']==climb_type)&(df_ascent['country']==code)]\n    num_crag = df.crag.nunique()\n    compose_ascent = round((df.crag.value_counts()\/df.crag.value_counts().sum()), 3)[:tops] \\\n                          .rename_axis('crag_name').reset_index(name='frac_inCountry')\n    frac_type = round((df.crag.value_counts()\/df_ascent[df_ascent['climb_type']==climb_type].shape[0]), 3)[:tops].tolist()\n    compose_ascent['frac_inAll'] = frac_type\n    compose_ascent.insert(loc=0, column='country', value=code)\n                            \n    return num_crag, compose_ascent","06d597fa":"df_ascent_rope = (df_ascent[df_ascent['climb_type']==0].country.value_counts()\/num_ascent_rope)[:12].rename_axis('where').reset_index(name='frac')\ndf_ascent_rope = df_ascent_rope.append({'where':'Others','frac':1-df_ascent_rope.frac.sum()}, ignore_index=True)\n\n# Draw where ascents were sent:\nplt.figure(figsize=(10, 5))\nax = sns.barplot(x=\"where\", y=\"frac\", data=df_ascent_rope,\n                 color=\"teal\", saturation=.5)\nax.set_title('Rope climbs sent in which countries', fontsize=20)\nax.set_xlabel('Country', fontsize=15)\nax.set_ylabel('Fraction of all climbs', fontsize=15)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.show()","9a46df07":"# The top 3 coutries where they have the most rope climbing logs\ndf_ascent_rope[:3]","68367ac0":"num_crag1, compose_ascent1 = codeAscentInfo('ESP', 0, 5)\ncompose_ascent1","3dcc158a":"num_crag2, compose_ascent2 = codeAscentInfo('USA', 0, 5)\ncompose_ascent2","c5370819":"num_crag3, compose_ascent3 = codeAscentInfo('FRA', 0, 5)\ncompose_ascent3","4524fae5":"df_ascent_bouldering = (df_ascent[df_ascent['climb_type']==1].country.value_counts()\/num_ascent_bouldering)[:12].rename_axis('where').reset_index(name='frac')\ndf_ascent_bouldering = df_ascent_bouldering.append({'where':'Others','frac':1-df_ascent_bouldering.frac.sum()}, ignore_index=True)\n\n# Draw where ascents were sent:\nplt.figure(figsize=(10, 5))\nax = sns.barplot(x=\"where\", y=\"frac\", data=df_ascent_bouldering,\n                 color=\"steelblue\", saturation=.5)\nax.set_title('Bouldering climbs sent in which countries', fontsize=20)\nax.set_xlabel('Country', fontsize=15)\nax.set_ylabel('Fraction of all climbs', fontsize=15)\nplt.xticks(fontsize=13)\nplt.yticks(fontsize=13)\nplt.show()","8abfc299":"# The top 3 coutries where they have the most bouldering logs\ndf_ascent_bouldering[:3]","5e33cb05":"num_crag1, compose_ascent1 = codeAscentInfo('USA', 1, 5)\ncompose_ascent1","daeed451":"num_crag2, compose_ascent2 = codeAscentInfo('FRA', 1, 5)\ncompose_ascent2","2af3c6b4":"num_crag3, compose_ascent3 = codeAscentInfo('ESP', 1, 5)\ncompose_ascent3","4591ef8a":"# [Q2. How is my height compared with most climbers?]","eb40775e":"### Simple Gaussian fit","fad33c8a":"## Process time intervals between grades","cc46d55c":"### Bouldering log done in countries of:","68131726":"# Introduction\nThe analysis is used to make the plots seen in my Medium Article [\"How long could it take to climb my first 8a?\"](https:\/\/kate-d.medium.com\/how-long-could-it-take-to-climb-my-first-8a-d841f2573518)\n\nWith the dataset, I put forward three questions that I want to know most as a climber.\n1. How long could it take to climb my first 6a, 7a or 8+?\n2. How is my height compared with most climbers?\n3. Where are the popular climbing places?\n\nSo, this notebook will be divided into three parts accordingly. They are all about climber statistics.\n\n## Reference\nSpecial thanks for the following efforts, so I can make this notebook. \n- How long before you get \"Good\" as bouldering, [kaggle kernel](https:\/\/www.kaggle.com\/aarontrefler\/how-long-before-you-get-good-at-bouldering), by Aaron Trefler\n- Plotting progression times per grade, [kaggle kernel](https:\/\/www.kaggle.com\/durand1\/plotting-progression-times-per-grade), by Durand D'souza\n- Climber-characteristic-analysis, [gitHub repo](https:\/\/github.com\/stevebachmeier\/climber-characteristic-analysis), by stevebachmeier","32cdc851":"For example, as an average climber who starts to climb outdoors, it takes about 1 year 3 months for men and 1 year 5 months for women to send their first outdoor 6a. From here to the first 7a, it will take an extra 1 year 1 month for men and 1 year 3 months for women of bouldering outdoor.","cbd388c5":"## Summary Q3:\nThe top 3 countries where the most rope climbing routes had been sent are in Spain (22%), USA (10%), and France (9%). Same ranking for bouldering, are USA (30%), France (11%), and Spain (7%). The numbers only indicate which countries have most climbing logs have been recorded in the data. Some countries may have many crags, so there accumulate many climbs. Or it is just that most climbers in this community come from these countries and they climb nearby. So the crags I list below are the most popular within these countries, while it can not guarantee also be the most popular in the world. Moreover, the exact numbers change time by time when we have more climbs.\n\nNevertheless, when you happen to be in the US or in the East Europe, consider the following places to go:\n\n- Rope climbing: Rodellar in Spain, Red River Gorge in the US, C\u00e9\u00fcse in France, and Kalymnos in Greece.\n- Bouldering: Bishop in the US, Fontainbleau in France, and Albarrac\u00edn in Spain.","7c6734f5":"#### List 5 of the most popular crags in Spain, USA, France","d3608fe7":"## Make plots for results","51ec2f18":"# [Q3: Where are the popular cimbing places?]","a0bd1edd":"#### List 5 of the most popular crags in USA, France, Spain","77262566":"### Bouldering","ace0f6b1":"### Rope climbing log done in countries of:","88174a11":"# [Q1: How long could it take to climb my first 6a, 7a or 8+?]","d281f504":"### Median Value","e32aff2e":"## Available data distributions\n\n#### Rope Climbing","b0e9d945":"### Climber Composition","040efaff":"## Summary Q1:\n1. Like many skills, it will improve rapidly at first, and then the time required to improve will increase. Or instead, I like to see the level up of each grade as a non-linear growth.\n2. The two climbing principles may not be completely equivalent in concept, but their curves are highly similar on a growth trend.\n3. As you can imagine, the higher the level, the fewer people can climb, so does the error increases. Similarly, we have a smaller group of female climbers, and it makes the overall female prediction errors larger.\n4. The difference on progress rate between men and women may exist or may be negligible, however, given the statistical error it has, it would be hard to say. In fact, it actually shows that the individual differences are greater than the gender differences.\n\n- Caveat: Climbers who actively log their ascent activities on 8a.nu are probably going to be pretty good. This may be a high standard.","f9600d54":"### CDF distributions\n\nI will also project several elite atheletes with different heights in the plots.\n\nI deliberately selected one or two Olympic athletes from different height ranges and marked where they are on the plot. This does not mean that the height distribution of athletes is even. Only some athletes' heights were put on the official website, so we can not know the height distribution as a whole. On the other hand, the 8a.nu data contains many excellent climbers, so it is still referenced.","7e25758f":"## Summary Q2:\n1. Cumulative distribution function (CDF) helps to quickly identify which height range you belong to among climbers, but it is not relevant to which height will be beneficial to climbing. It is more to help distinguishing a style or beta version that might be usful to you from others.\n2. The medium height of male climbers is 178 cm and that of female is 165 cm. If the distribution fits in a simple Gaussian, the results are 177.8 \u00b18.0 cm and 164.8 \u00b17.9 cm respectively. It is also interesting to compare it with [contemporary national average](https:\/\/en.wikipedia.org\/wiki\/Average_human_height_by_country). For example, the height ratio of male to female is about 1.08 in the climbing community, consistent with many countries.","e7703785":"Acatually, the distributions would be better described by asymmetric Gussian (skewed on the left). So I will seek Cumulative Distribution Functions to tell me more."}}