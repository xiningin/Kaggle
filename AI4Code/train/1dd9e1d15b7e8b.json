{"cell_type":{"dfb301d9":"code","233f1a6e":"code","4fd4ecee":"code","dc4b9916":"code","19a3cb5f":"code","71d8d117":"code","1c2560c8":"code","af599aa9":"code","f905bb01":"code","b5aefe01":"code","79e839f3":"code","58e07855":"code","104a695d":"code","39190ee5":"code","d21836c9":"code","9dafec89":"code","3fa665cc":"code","4c34cbb9":"code","ece2d285":"code","80f7bd87":"code","bfd1719c":"code","a1e12d1c":"code","51d22ecd":"code","211f4c8f":"code","e185a73c":"code","87314b63":"code","dfdfca02":"code","902eedfc":"code","2a0a18b9":"code","af760c31":"code","1e59db22":"code","8bd489a5":"code","4a555a27":"code","36fe9a7e":"code","0a05a76e":"code","a38acf27":"code","a1c5ee96":"code","97a69be8":"code","7e58b2f8":"code","c4bc1e40":"code","484a551a":"code","88741c93":"code","786be393":"code","2e3a7a3f":"code","8f1bb204":"code","ecafdd05":"code","36fd3d30":"code","bfdbc2e0":"code","b5a687f8":"code","8e545422":"code","20acc6fc":"code","70043dee":"code","b8469f08":"code","fa1a3921":"code","e4e931bb":"code","105f22ba":"code","4bae8722":"code","634c7bad":"code","a5527b3a":"code","93050407":"code","17eb1841":"code","f5e7ae9a":"code","92314a33":"code","0c027af4":"code","ef133370":"code","1a78d677":"code","5c8e7b0e":"code","c56bc238":"code","570ce267":"code","3a800787":"code","557380fb":"code","c88ce2e8":"code","205ed1bb":"code","bcbc044e":"code","c61803a1":"code","cdcd845b":"markdown","9a102193":"markdown","d72cae91":"markdown","91e075c1":"markdown","4453bb89":"markdown","6b59c8c2":"markdown","6dc2139f":"markdown","5cf39390":"markdown","a5e99346":"markdown","538a3af3":"markdown","348bb5ef":"markdown","72b05d65":"markdown","f9b5e946":"markdown","e712eb16":"markdown","662b47ad":"markdown","7c9a3cd7":"markdown","f84e77fb":"markdown","f749f215":"markdown","a2e03227":"markdown","49852dc7":"markdown","ac1221ff":"markdown","61e16309":"markdown","187c848d":"markdown","9c2a3a88":"markdown","2450b9a7":"markdown","6ac92f4e":"markdown","2f8c1473":"markdown","6a7cc77e":"markdown","ee53955d":"markdown","27b3df20":"markdown","3c528100":"markdown","899e09ff":"markdown","47dceec7":"markdown","173bdd7f":"markdown","5a250898":"markdown","0041a28a":"markdown","c96fcf90":"markdown","7bbdc1cd":"markdown","b259f1a2":"markdown","c9b7aeb1":"markdown","e8b0b2ca":"markdown","747d9b21":"markdown","a049a153":"markdown","1d89b0b0":"markdown","a159d2e3":"markdown","2047391f":"markdown","91bf0542":"markdown","dba5ec3a":"markdown","91031d54":"markdown","8d5083ac":"markdown","2c4c65fd":"markdown","af06ad97":"markdown","ea2c043e":"markdown","7d0d0a82":"markdown","b9a69736":"markdown","dde1ca5c":"markdown","317f44f6":"markdown","f0df7538":"markdown","ed9bd517":"markdown","db9c29d8":"markdown","50f0cbe3":"markdown"},"source":{"dfb301d9":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom ast import literal_eval \nplt.style.use('ggplot')\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\nsns.color_palette(\"crest\", as_cmap=True)\n\n#Lecture du dossier data Kaggle\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","233f1a6e":"def compare_colums(df1,df2):\n    columns_1 = list(df1.columns) \n    columns_2 = list(df2.columns)\n    same_columns=[]\n    diff_columns_2=[]\n    diff_columns_1=[]\n\n    for col in columns_2:\n        if col in columns_1:\n            same_columns.append(col)\n        else:\n            diff_columns_2.append(col)\n    for col in columns_1:\n        if col not in columns_2:\n            diff_columns_1.append(col)\n    return diff_columns_1, diff_columns_2","4fd4ecee":"data_2015 = pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2015-building-energy-benchmarking.csv\")\ndata_2016 = pd.read_csv(\"..\/input\/sea-building-energy-benchmarking\/2016-building-energy-benchmarking.csv\")","dc4b9916":"data_2015.head()","19a3cb5f":"data_2016.head()","71d8d117":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\ndiff_columns_2015","1c2560c8":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\ndiff_columns_2016","af599aa9":"data_2015['Location'][0]","f905bb01":"# Import ast\nprint(data_2015.shape)\ndata_2015= pd.concat([data_2015.drop(['Location'], axis=1),data_2015['Location']\n                               .map(literal_eval).apply(pd.Series)],axis=1)\ndata_2015 = pd.concat([data_2015.drop(['human_address'], axis=1), data_2015['human_address']\n                               .map(literal_eval).apply(pd.Series)], axis=1)\nprint(data_2015.shape)\n                               \n\n    ","b5aefe01":"data_2015[\"zip\"] = pd.to_numeric(data_2015[\"zip\"])\ndata_2015[\"latitude\"] = pd.to_numeric(data_2015[\"latitude\"])\ndata_2015[\"longitude\"] = pd.to_numeric(data_2015[\"longitude\"])\n\n","79e839f3":"data_2015 = data_2015.rename(columns={\"latitude\":\"Latitude\", \"longitude\":\"Longitude\",\n                                      \"address\":\"Address\", \"city\":\"City\", \n                                      \"state\":\"State\", \"zip\":\"ZipCode\"})","58e07855":"data_2015=data_2015.drop(['OtherFuelUse(kBtu)','2010 Census Tracts',\n                'Seattle Police Department Micro Community Policing Plan Areas',\n                'City Council Districts','SPD Beats', 'Zip Codes'], axis=1)","104a695d":"data_2015 = data_2015.rename(columns={'GHGEmissions(MetricTonsCO2e)':'TotalGHGEmissions',\n                                     'GHGEmissionsIntensity(kgCO2e\/ft2)':'GHGEmissionsIntensity',\n                                     'Comment':'Comments'})","39190ee5":"data_2015 = data_2015.drop(['Comments'], axis=1)\ndata_2016 = data_2016.drop(['Comments'], axis=1)","d21836c9":"diff_columns_2015, diff_columns_2016 = compare_colums(data_2015,data_2016)\nprint(diff_columns_2015,diff_columns_2016)","9dafec89":"data = pd.concat([data_2015[data_2016.columns],data_2016], axis = 0).sort_values([\"DataYear\", \"OSEBuildingID\"])\ndata.shape","3fa665cc":"# check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data.keys():\n    nan_count = data[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","4c34cbb9":"data = data[data['Outlier'].isnull()] \ndata = data.drop(['Outlier', 'YearsENERGYSTARCertified'], axis=1)\ndisplay(data.shape)","ece2d285":"lines_nan_info=[]\nfor index,row in data.iterrows(): \n    lines_nan_info.append( (1- row.isna().sum().sum()\/data.shape[1])*100)\ndata_lines_nan_info = pd.DataFrame(np.array(lines_nan_info),columns=['nan %'])\nprint(data_lines_nan_info.sort_values(by=['nan %']))","80f7bd87":"data_lines_nan_info['nan %'].hist(bins=20)\nplt.show()\n\n# calcul du pourcentage de donn\u00e9es qu'on garde en filtrant les lignes par un certains pourcentage de valeurs nan\ndata_filtered_lines_nan_score =data_lines_nan_info[data_lines_nan_info['nan %']>86]\nprint(data_filtered_lines_nan_score.shape)\nprint(100*data_filtered_lines_nan_score.shape[0]\/data.shape[0])\ndata_filtered_lines_nan_score['nan %'].hist(bins=20)\nplt.show()","bfd1719c":"filled_rate = 86\/100\nfiltered_rows=[]\ndata = data[data.count(axis='columns')\/data.shape[1]>filled_rate].reset_index(drop=True)\nprint(data.shape)\ndisplay(data)","a1e12d1c":"# contr\u00f4le des valeurs negatives\nquantitative_columns = ['PropertyGFATotal', 'SourceEUI(kBtu\/sf)', 'SiteEnergyUse(kBtu)',\n                        'SiteEUI(kBtu\/sf)', 'TotalGHGEmissions', 'GHGEmissionsIntensity']\nfor column in quantitative_columns:\n    incoherent_values = data[data[column] <=0]\n    if(incoherent_values.shape[0]>0):\n        print(column)\n        display(incoherent_values)\n        data.drop(incoherent_values.index)","51d22ecd":"data['BuildingType'].unique()","211f4c8f":"building_types = sorted(data['BuildingType'].unique())\nprimary_property_types = sorted(data['PrimaryPropertyType'].unique())\ndisplay(building_types)\ndisplay(len(building_types))\ndisplay(primary_property_types)\ndisplay(len(primary_property_types))","e185a73c":"import re\ndata['PrimaryPropertyType'] = [re.compile(r'[\\n\\r\\t]').sub(\"\", item) for index, item in data.PrimaryPropertyType.iteritems()]\ndata['PrimaryPropertyType'] = [re.compile(r' \/ ').sub(\"\/\", item) for index, item in data.PrimaryPropertyType.iteritems()]","87314b63":"building_types = sorted(data['BuildingType'].unique())\nprimary_property_types = sorted(data['PrimaryPropertyType'].unique())\ndisplay(building_types)\ndisplay(len(building_types))\ndisplay(primary_property_types)\ndisplay(len(primary_property_types))","dfdfca02":"from IPython.core.display import HTML\nbuilding_types_and_usages = {}\nfor building_type in building_types:\n    temp = data[data['BuildingType']==building_type]['PrimaryPropertyType'].unique()\n    building_types_and_usages[building_type]=temp.tolist()\n\ndisplay(HTML('<br \/>'))\n\ni=0\nfor group,subgroups in building_types_and_usages.items():\n    text = \"<strong>\" + group + \": <\/strong>\"\n    for subgroup in subgroups:\n        text += subgroup + \", \"\n        i = i +1\n    display(HTML(text+'<br \/>'))\n    \ndisplay(HTML('<br \/>'))\n\nprint('Il y a {} groupe\/sous-cat\u00e9gories et {} cat\u00e9gories uniques'.format(i,len(primary_property_types))) ","902eedfc":"data_anomalies = data[~data['BuildingType'].str.contains(\"Multifamily\") & data['PrimaryPropertyType'].str.contains(\"Multifamily\")]\ndisplay(data_anomalies)","2a0a18b9":"data= data[~data['BuildingType'].str.contains(\"Multifamily\") & ~data['PrimaryPropertyType'].str.contains(\"Multifamily\")]\ndisplay(data.shape)","af760c31":"data['BuildingType'].unique()","1e59db22":"building_type = data.groupby(by='BuildingType')['OSEBuildingID'].nunique()\n\nfont_title = {'family': 'serif',\n              'color':  '#1d479b',\n              'weight': 'bold',\n              'size': 18,\n             }\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.pie(building_type.values, labels=building_type.index, \n       autopct='%1.1f%%', shadow=True, startangle=30,\n       textprops=dict(color=\"black\",size=12, weight=\"bold\"))\nax.axis('equal')\nax.set_title(\"R\u00e9partition des types de b\u00e2timents du Dataset\", fontdict=font_title)\nplt.show()","8bd489a5":"data.loc[(data['BuildingType']==\"NonResidential\"),'PrimaryPropertyType'].value_counts()","4a555a27":"fig = plt.figure(figsize=(12,8))\nax = sns.histplot(data=data, x='YearBuilt', bins=int((data.YearBuilt.max() - data.YearBuilt.min())\/5))\nax.set_xlabel(\"Ann\u00e9e de construction\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution des ann\u00e9es de construction des b\u00e2timents\\n\", fontdict=font_title)","36fe9a7e":"data['BuildingAge'] = data['DataYear'] - data['YearBuilt']\nfig = plt.figure(figsize=(12,8))\nax = sns.histplot(data=data, x='BuildingAge', bins=int((data.BuildingAge.max() - data.BuildingAge.min())\/5))\nax.set_xlabel(\"Age du b\u00e2timent\")\nax.set_ylabel(\"Nombre de b\u00e2timents\")\nplt.title(f\"Distribution de l'\u00e2ge des b\u00e2timents\\n\", fontdict=font_title)\nplt.show()","0a05a76e":"# on check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data.keys():\n    nan_count = data[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","a38acf27":"data = data.dropna(subset = ['SiteEnergyUseWN(kBtu)', 'SiteEUIWN(kBtu\/sf)', 'SiteEUI(kBtu\/sf)', 'NumberofFloors', 'ZipCode' ,\n                             'LargestPropertyUseTypeGFA','LargestPropertyUseType'])\nprint(data.shape)","a1c5ee96":"data = data.drop(['Electricity(kWh)', 'NaturalGas(therms)'], axis=1)\ndata.shape\n","97a69be8":"data = data.drop(['SiteEUIWN(kBtu\/sf)', 'SourceEUIWN(kBtu\/sf)', 'SiteEnergyUseWN(kBtu)'], axis=1)","7e58b2f8":"# on check le pourcentage de remplissage des colonnes\ncolumns_nan_info ={}\nfor column in data.keys():\n    nan_count = data[column].isnull().sum()\n    columns_nan_info[column] = nan_count \/ data.shape[0] * 100\n\ndf_columns_nan_info = pd.DataFrame(data=np.array(list(columns_nan_info.items())),columns=['column','nan %'])\ndf_columns_nan_info['nan %'] = pd.to_numeric(df_columns_nan_info['nan %'])\ndf_columns_nan_info = df_columns_nan_info.sort_values(by=['nan %'])\n\nprint(df_columns_nan_info.shape)\n\nwith pd.option_context('display.max_rows', None, 'display.max_columns', None):  \n    print(df_columns_nan_info)","c4bc1e40":"data['BuildingAge'] = data['DataYear'] - data['YearBuilt']\nprint(data[['BuildingAge','DataYear','YearBuilt']])","484a551a":"data = data.drop(['DataYear','YearBuilt'] ,axis=1 )","88741c93":"data = data[data.TaxParcelIdentificationNumber.str.isnumeric()]\nprint(data.shape)","786be393":"data[\"TaxParcelIdentificationNumber\"] = pd.to_numeric(data[\"TaxParcelIdentificationNumber\"])","2e3a7a3f":"data= data.drop_duplicates(subset=['OSEBuildingID'], keep='last')\n","8f1bb204":"qualitative_columns = ['BuildingType', 'LargestPropertyUseType', 'PrimaryPropertyType', 'NumberofFloors','BuildingAge', \n                       'Neighborhood', 'CouncilDistrictCode']\n\nfor column in qualitative_columns:\n    fig = plt.figure(figsize=(15,12))\n    data[column].value_counts().sort_index(axis=0).plot(kind='bar')\n    plt.title(column)\n    plt.show()","ecafdd05":"quantitative_columns = ['PropertyGFATotal', 'SourceEUI(kBtu\/sf)', 'SiteEnergyUse(kBtu)', 'SteamUse(kBtu)', 'Electricity(kBtu)', \n                        'SiteEUI(kBtu\/sf)', 'TotalGHGEmissions', 'GHGEmissionsIntensity', 'NaturalGas(kBtu)', 'ENERGYSTARScore']\nfor column in quantitative_columns:\n    fig = plt.figure(figsize=(5,5))\n    sns.histplot(data[column])\n    plt.title(column)\n    plt.show()","36fd3d30":"corr_methods=  ['pearson','kendall', 'spearman']\n\n'''\npearson : standard correlation coefficient\nkendall : Kendall Tau correlation coefficient\nspearman :  Spearman rank correlation\n'''\n\nfor corr_method in corr_methods:\n    corr = data.corr(method=corr_method)\n    mask = np.zeros_like(corr)\n    mask[np.triu_indices_from(mask)] = True\n    fig, ax = plt.subplots(figsize=(15,15))\n    ax = sns.heatmap(corr, annot=True, mask=mask, center=0, cmap=\"coolwarm\")\n    plt.title('Heatmap des corr\u00e9lations, method={}'.format(corr_method))\n    plt.show()","bfdbc2e0":"threshold = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","b5a687f8":"corr = data.corr()\ncorr_columns = corr.columns[((corr < 1) & (corr > 0.7)).any(axis=0)]\ndisplay(corr_columns)","8e545422":"sns.pairplot(data[corr_columns], height = 2)","20acc6fc":"data['TotalUseTypeNumber'] = [str(word).count(\",\") + 1 for word in data['ListOfAllPropertyUseTypes'].str.split(',')]\ndata.drop('ListOfAllPropertyUseTypes', axis=1)","70043dee":"gfa_features = ['PropertyGFATotal', 'PropertyGFABuilding(s)',\n       'LargestPropertyUseTypeGFA', 'SecondLargestPropertyUseTypeGFA','PropertyGFAParking',\n       'ThirdLargestPropertyUseTypeGFA']\ndata[['TotalUseTypeNumber'] + gfa_features].head(10)","b8469f08":"#On calcule les ratios\ndata['GFABuildingRate'] = (round((data['PropertyGFABuilding(s)'].fillna(0)\n                                  \/data['PropertyGFATotal'].fillna(0)),5))\ndata['GFAParkingRate'] = (round((data['PropertyGFAParking'].fillna(0)\n                                 \/data['PropertyGFATotal'].fillna(0)),5))\n\n#On supprime les variables inutiles\ndata = data.drop(['LargestPropertyUseTypeGFA', \n           'SecondLargestPropertyUseTypeGFA',\n           'SecondLargestPropertyUseType',\n           'ThirdLargestPropertyUseTypeGFA',\n           'ThirdLargestPropertyUseType',\n           'PropertyGFAParking',\n           'PropertyGFABuilding(s)'],\n         axis=1)\n\n#On compl\u00e8te les usages de la partie la plus large\ndata['LargestPropertyUseType'] = data['LargestPropertyUseType'].fillna(\"Unknown\")\ndata['NumberofFloors'] = data['NumberofFloors'].fillna(1)","fa1a3921":"data['GFAPerBuilding'] = round((data['PropertyGFATotal'] \/ data['NumberofBuildings']),3)\ndata['GFAPerFloor'] = round((data['PropertyGFATotal'] \/ data['NumberofFloors']),3)","e4e931bb":"corr = data.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nfig, ax = plt.subplots(figsize=(15,15))\nax = sns.heatmap(corr, annot=True, fmt=\".2f\", annot_kws={'size':8}, \n                 mask=mask, center=0, cmap=\"coolwarm\")\nplt.title(f\"Heatmap des corr\u00e9lations lin\u00e9aires\\n\", \n          fontdict=font_title)\nplt.show()","105f22ba":"threshold = 0.7\ncorr_pairs = corr.unstack().sort_values(kind=\"quicksort\")\nstrong_corr = (pd.DataFrame(corr_pairs[(abs(corr_pairs) > threshold)])\n               .reset_index().rename(columns={0:'corr_coeff'}))\nstrong_corr = strong_corr[(strong_corr.index%2 == 0) & (strong_corr['level_0'] != strong_corr['level_1'])]\nstrong_corr.sort_values('corr_coeff', ascending=False)","4bae8722":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nstrong_corr_features = list(set(list(strong_corr['level_0'].values) + list(strong_corr['level_1'].values)))\nX = data[strong_corr_features].replace([np.inf, -np.inf], np.nan)\nX = X.dropna()\n\nvif_data = pd.DataFrame()\nvif_data[\"feature\"] = X.columns\nvif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) \n                   for i in range(len(X.columns))]\nvif_data[vif_data['VIF'] > 5]","634c7bad":"data=data.drop(['GHGEmissionsIntensity','SiteEUI(kBtu\/sf)', 'SourceEUI(kBtu\/sf)'],axis =1)","a5527b3a":"import scipy.stats as stats\n\nfig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nleft, width = 0, 1\nbottom, height = 0, 1\nright = left + width\ntop = bottom + height\n\nsns.histplot(data=data, x=\"TotalGHGEmissions\", kde=True, ax=axes[0], color=\"#9C3E2D\", alpha=0.6)\naxes[0].set_title(\"Donn\u00e9es d'emission de CO2 globales\", color='#2cb7b0')\n\n#Test de Kolmogorov-Smirnov\nkstest = stats.kstest(data['TotalGHGEmissions'].notnull(),'norm')\naxes[0].text(right, top, 'Test Kolmogorov-Smirnov \\n Pvalue: {:.2} \\n Stat: {:.2}'.format(kstest.pvalue, kstest.statistic),\n            horizontalalignment='right',\n            verticalalignment='top',\n            style='italic', transform=axes[0].transAxes, fontsize = 12,\n            bbox={'facecolor':'#00afe6', 'alpha':0.5, 'pad':0})\n\nsns.histplot(data=data[(data['TotalGHGEmissions']< 1000)], x=\"TotalGHGEmissions\", kde=True, ax=axes[1], color=\"#9C3E2D\", alpha=0.6)\naxes[1].set_title(\"Donn\u00e9es d'emission de CO2 zoom\u00e9es\", color='#2cb7b0')\n\nplt.suptitle(\"Distribution des emissions de CO2 relev\u00e9es (2015-2016)\", \n             fontdict=font_title, fontsize=22)\nplt.show()\n","93050407":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\n\nsns.histplot(data=data, x=\"SiteEnergyUse(kBtu)\", kde=True, ax=axes[0], color=\"#6D9C0E\", alpha=0.6)\naxes[0].set_title(\"Donn\u00e9es de consommation d'\u00e9nergie globales\", color='#2cb7b0')\n\n#Test de Kolmogorov-Smirnov\nkstest = stats.kstest(data['SiteEnergyUse(kBtu)'].notnull(),'norm')\naxes[0].text(right, top, 'Test Kolmogorov-Smirnov \\n Pvalue: {:.2} \\n Stat: {:.2}'.format(kstest.pvalue, kstest.statistic),\n            horizontalalignment='right',\n            verticalalignment='top',\n            style='italic', transform=axes[0].transAxes, fontsize = 12,\n            bbox={'facecolor':'#00afe6', 'alpha':0.5, 'pad':0})\n\nsns.histplot(data=data[(data['SiteEnergyUse(kBtu)']< 0.3*10**8)], x=\"SiteEnergyUse(kBtu)\", kde=True, ax=axes[1], color=\"#6D9C0E\", alpha=0.6)\naxes[1].set_title(\"Donn\u00e9es de consommation d'\u00e9nergie zoom\u00e9es\", color='#2cb7b0')\n\nplt.suptitle(\"Distribution des consommation d'\u00e9nergie relev\u00e9es (2015-2016)\", \n             fontdict=font_title, fontsize=22)\nplt.show()","17eb1841":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, x=\"TotalGHGEmissions\", y=\"SiteEnergyUse(kBtu)\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.scatterplot(data=data[(data['TotalGHGEmissions'] < 5000)], x=\"TotalGHGEmissions\", y=\"SiteEnergyUse(kBtu)\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es de consommation d'\u00e9nergie vs emissions de CO2\", fontdict=font_title, fontsize=22)\nplt.show()","f5e7ae9a":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.barplot(x='BuildingType',y='TotalGHGEmissions',data=data, ax=axes[0])\nsns.barplot(x='BuildingType',y='SiteEnergyUse(kBtu)',data=data, ax=axes[1])\nplt.suptitle(\"R\u00e9partition de la consommation d'\u00e9nergie et emissions de CO2 en fonction du type de b\u00e2timent\", \n             fontdict=font_title, fontsize=18)\nplt.show()","92314a33":"fig, axes = plt.subplots( figsize=(20,8))\nsns.barplot(data=data,x=data['BuildingAge'], y=\"SiteEnergyUse(kBtu)\", color = \"red\" )\nplt.title(\"Influence de l'\u00e2ge des b\u00e2timents sur les consommations d'\u00e9nergie\", fontdict=font_title)\n\nplt.show()","0c027af4":"fig, axes = plt.subplots( figsize=(20,8))\nsns.barplot(data=data,x=data['BuildingAge'], y=\"TotalGHGEmissions\", color = \"purple\" )\nplt.title(\"Influence de l'\u00e2ge des b\u00e2timents sur les \u00e9missions de CO2\", fontdict=font_title)\nplt.show()","ef133370":"from math import radians, cos, sin, asin, sqrt\n\n#Coordonn\u00e9es du centre de Seattle\nseattle_lat = 47.6062\nseattle_lon = -122.3321\n\ndef haversine_distance(lat1, lng1, lat2, lng2, degrees=True):\n    r = 3956 # rayon de la Terre en miles\n    \n    if degrees:\n        lat1, lng1, lat2, lng2 = map(radians, [lat1, lng1, lat2, lng2])\n    \n    # Formule Haversine\n    dlng = lng2 - lng1 \n    dlat = lat2 - lat1 \n    a = sin(dlat\/2)**2 + cos(lat1) * cos(lat2) * sin(dlng\/2)**2\n    d = 2 * r * asin(sqrt(a))  \n\n    return d","1a78d677":"#Calcul des distance au centre de Seattle pour chaque point\ndata['harvesine_distance'] = [haversine_distance(seattle_lat, seattle_lon, x, y) \n                              for x, y in zip(data.Latitude.astype(float), data.Longitude.astype(float))]","5c8e7b0e":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, y=\"TotalGHGEmissions\", x=\"harvesine_distance\", color=\"#9C3E2D\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.scatterplot(data=data[(data['TotalGHGEmissions'] < 2500)], y=\"TotalGHGEmissions\", \n                x=\"harvesine_distance\", color=\"#9C3E2D\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es d'emissions de CO2 en fonction des coordonn\u00e9es g\u00e9ographiques\", \n             fontdict=font_title, fontsize=22)","c56bc238":"fig, axes = plt.subplots(nrows=1, ncols=2, sharex=False, sharey=False, figsize=(20,8))\nsns.scatterplot(data=data, y=\"SiteEnergyUse(kBtu)\", x=\"harvesine_distance\", color=\"#6D9C0E\", ax=axes[0])\naxes[0].set_title(\"Donn\u00e9es globales\", color='#2cb7b0')\nsns.histplot(data=data[(data['SiteEnergyUse(kBtu)'] < 2*10**8)], y=\"SiteEnergyUse(kBtu)\", \n                x=\"harvesine_distance\", color=\"#6D9C0E\", ax=axes[1])\naxes[1].set_title(\"Donn\u00e9es zoom\u00e9es\", color='#2cb7b0')\nplt.suptitle(\"R\u00e9partition des donn\u00e9es d'emissions de CO2 en fonction des coordonn\u00e9es g\u00e9ographiques\", \n             fontdict=font_title, fontsize=22)\nplt.show()","570ce267":"data['ComplianceStatus'].unique()","3a800787":"print(\"Nombre de ligne identifi\u00e9es comme non conforme : {}.\".format(data[data['ComplianceStatus'] != \"Compliant\"].shape[0]))","557380fb":"data = data[data['ComplianceStatus'] == \"Compliant\"]","c88ce2e8":"data = data.drop(['DefaultData','ComplianceStatus', 'City',\n                  'TaxParcelIdentificationNumber','CouncilDistrictCode'], axis=1)","205ed1bb":"import folium\nimport folium.plugins\n\nseattle_map = folium.Map(location=[seattle_lat, seattle_lon], zoom_start=11)\n\n#Clusters\nmarker_cluster = folium.plugins.MarkerCluster().add_to(seattle_map)\nfor lat, lng, in zip(data.Latitude, data.Longitude):\n    folium.Marker(location=[lat, lng]).add_to(marker_cluster)\n\nseattle_map","bcbc044e":"data.info()","c61803a1":"data = data.drop(['Latitude','Longitude'], axis=1)\ndata.set_index(\"OSEBuildingID\").to_csv(\"building-energy-cleaned.csv\")","cdcd845b":"### V\u00e9rification de multicolin\u00e9arit\u00e9 avec le VIF (Variance Inflation Factor) :  \n### VIF=1\/1-R*R\n","9a102193":"#### Il y a des doublons avec des sauts de lignes et des espaces, on va les supprimer:","d72cae91":"### Fonctions usuelles","91e075c1":"### Les donn\u00e9es sont \u00e0 pr\u00e9sent bien compl\u00e9t\u00e9es. Nous allons v\u00e9rifier l'impact de ce feature engineering sur la matrice des corr\u00e9lations lin\u00e9aires :","4453bb89":"### Nous allons \u00e0 pr\u00e9sent convertir les diff\u00e9rentes surfaces (Buildings et Parking) en pourcentage de la surface totale et nous conserverons uniquement ces 2 variables en supprimant les variables LargestPropertyUseTypeGFA, SecondLargestPropertyUseTypeGFA, ThirdLargestPropertyUseTypeGFA :","6b59c8c2":"# 2. Analyse exploratoire & Feature Engineering","6dc2139f":"### 1.5. Les ann\u00e9es de construction","5cf39390":"### pour les  colonnes:\n\n### 2015:\n\nOtherFuelUse(kBtu): peu de donn\u00e9es (17) dans la colonne => on la supprime\n\nGHGEmissions(MetricTonsCO2e): correspond \u00e0 la colonne TotalGHGEmissions du fichier 2016 => on renomme la colonne\n\nGHGEmissionsIntensity(kgCO2e\/ft2): correspond \u00e0 la colonne GHGEmissionsIntensity du fichier 2016 => on renomme la colonne\n\nComment: colonne quasi vide, correspond \u00e0 la colonne Comments du fichier 2016 mais inutile pour l'analyse => on la supprime\n2010 Census Tracts: peu de don\u00e9nes (17) dans la colonne => on la supprime\n\nSeattle Police Department Micro Community Policing Plan Areas: colonne int\u00e9ressantes qui pourraient \u00eatre plus pr\u00e9cise que le quartier pour le remplissage de nan par une moyenne pond\u00e9r\u00e9e sur la cat\u00e9gorie (exemple: secteur industriel) mais pas pr\u00e9sente dans le fichier 2016, on la supprime mais on pourrait extrapoler les valeurs par l'adresse ou le num\u00e9ro de building pour le fichier 2016\n\nCity Council Districts: peu de donn\u00e9es (17) dans la colonne => on la supprime\n\nSPD Beats: idem que le Seattle Police Department Micro Community Policing Plan Areas en moins pr\u00e9cis, on supprime\n\nZip Codes: cette colonne contient des valeurs qui ne sont pas coh\u00e9rentes => suppression\n\n### 2016:\n\nComments: colonne vide, correspond \u00e0 la colonne Comment du fichier 2015 inutile pour l'analyse => on la supprime\n\nTotalGHGEmissions : correspond \u00e0 la colonne TotalGHGEmissions du fichier 2015 qu'on va renommer\n\nGHGEmissionsIntensity: correspond \u00e0 la colonne GHGEmissionsIntensity du fichier 2015 qu'on va renommer\n\nto_drop = ['OtherFuelUse(kBtu)','Comment','2010 Census Tracts','Seattle Police Department Micro Community Policing Plan Areas','City Council Districts', 'SPD Beats', 'Zip Codes']\n","a5e99346":"### Les b\u00e2timents de moins de 30 ans semblent avoir des consommations d'\u00e9nergie et rejets de CO2 plus important que les buildings anciens, alors m\u00eame que la variable BuildingAge n'est pas fortement corr\u00e9l\u00e9e \u00e0 d'autres features (comme la taille des b\u00e2timents par exemple).","538a3af3":"# INTRODUCTION\n\n\nPour atteindre l'objectif de ville neutre en \u00e9missions de carbone en 2050, la ville de Seattle s\u2019int\u00e9resse de pr\u00e8s aux \u00e9missions des b\u00e2timents non destin\u00e9s \u00e0 l\u2019habitation.\n\nDes relev\u00e9s minutieux ont \u00e9t\u00e9 effectu\u00e9s en 2015 et en 2016. Cependant, ces relev\u00e9s sont co\u00fbteux \u00e0 obtenir, et \u00e0 partir de ceux d\u00e9j\u00e0 r\u00e9alis\u00e9s, nous devons tenter de pr\u00e9dire les \u00e9missions de CO2 et la consommation totale d\u2019\u00e9nergie de b\u00e2timents pour lesquels elles n\u2019ont pas encore \u00e9t\u00e9 mesur\u00e9es.\n\nDans cette premi\u00e8re partie, nous allons r\u00e9aliser une courte analyse exploratoire apr\u00e8s avoir nettoy\u00e9 les donn\u00e9es si besoin. Le but sera de d\u00e9terminer les variables pertinentes ou d'en cr\u00e9er de nouvelles (feature engineering).","348bb5ef":"### 2.2. Analyse multivari\u00e9e","72b05d65":"#### Eliminons maintenant les colonnes de 2015 n'ayant pas d'equivalents en 2016","f9b5e946":"# SOMMAIRE\n\n1. Environnement Python et Chargement des donn\u00e9es \n  \n  1.1. Comparaison des colonnes des datasets\n \n  1.2. Uniformisation des donn\u00e9es de localisation de 2015\n \n  1.3. Description et nettoyage des donn\u00e9es\n\n  1.4. Les types de b\u00e2timents\n \n  1.5. Les ann\u00e9es de construction\n \n  2.Analyse exploratoire & Feature Engineering\n  \n  2.3. Les corr\u00e9lations lin\u00e9aires\n \n  2.4. Analyse des variables \u00e0 pr\u00e9dire\n\n3.Derni\u00e8res \u00e9tapes de nettoyage\n\n4.Projection des \u00e9tablissements sur la carte de Seattle","e712eb16":"#### L'\u00e9mission de gaz \u00e0 effet de serre est li\u00e9e de fa\u00e7on directe \u00e0 la consommation d'\u00e9nergie, les donn\u00e9es normalis\u00e9e en fonction des conditions climatiques ne nous int\u00e9resserons donc pas dans l'analyse. Nous pouvons donc supprime\u00e9s les colonnes avec le suffixe WN.","662b47ad":"#### Plus que l'ann\u00e9e de construction, il serait int\u00e9ressant de traiter l'age des b\u00e2timents pour r\u00e9duire la dispersion des donn\u00e9es et lier l'ann\u00e9e des relev\u00e9s. Nous allons donc cr\u00e9er cette nouvelle variable et supprimer l'ann\u00e9e de construction :","7c9a3cd7":"### Pour l'analyse li\u00e9e \u00e0 l'\u00e9nergie star score et la consommation \u00e9nerg\u00e9tique, l'\u00e2ge des batiments me parait plus pertinente que l'ann\u00e9e de construction ajoutons une colonne avec cette variable et supprimons l'anciennne ainsi que l'ann\u00e9e des relev\u00e9s","f84e77fb":"# 3. Derni\u00e8res \u00e9tapes de nettoyage","f749f215":"# 4. Projection des \u00e9tablissements sur la carte de Seattle","a2e03227":"#### Verifions maintenant le remplissge des colonnes","49852dc7":"### Regardons \u00e0 pr\u00e9sent si les coordonn\u00e9es g\u00e9ographiques ont un impact sur les rejets et consommations. Pour cela, afin d'\u00e9viter les corr\u00e9lations fortes entre Latitude et Longitude, nous allons calculer la distance Harversine entre chaque point de coordonn\u00e9es et le centre de Seattle :","ac1221ff":"### La TaxParceliIntificationNumber est de type object alors qu'elle doit etre numerique.eliminons les lignes non numeriques de cette variable","61e16309":"#### Comparons de nouveau","187c848d":"#### On peut commencer par supprimer les lignes r\u00e9pertori\u00e9es comme des outliers avant de supprimer la colonne. On peut aussi supprimer la colonne YearsENERGYSTARCertified qui est tr\u00e8s peu remplie et qui ne parait pas d'une grande utilit\u00e9. Pour les usages secondaires et tertiaires des batiments les codes non renseign\u00e9es doivent correspondre \u00e0 aucun usage, on conservera donc ces donn\u00e9es qui pourraient fortement influer les analyses sur la consommation \u00e9nerg\u00e9tique.","9c2a3a88":"### 1.4. Le type de batiments \u00e0 choisir(public)","2450b9a7":"### 1.3. Description et nettoyage des donn\u00e9es","6ac92f4e":"#### A part pour les colonnes ENERGYSTARScore, SecondLargestPropertyUseType, SecondLargestPropertyUseTypeGFA, ThirdLargestPropertyUseTypeGFA toutes les donn\u00e9es sont maintenant compl\u00e8tes.","2f8c1473":"#### Les types d'usages des b\u00e2timents ne sont donc pas sous-cat\u00e9gories uniqes des types de b\u00e2timents. De plus on retrouve un usage de type \"Low-Rise Multifamily\" dans le type \"NonResidential\", analysons en d\u00e9tail ce type d'anomalie.","6a7cc77e":"### 2.4. Analyse des variables \u00e0 pr\u00e9dire\n\n#### Pour rappel, les 2 variables \u00e0 pr\u00e9dire dans le cadre de notre mission sont :\n\n### TotalGHGEmissions\n### SiteEnergyUse(kBtu)\n#### Nous allons donc r\u00e9aliser quelques analyses exploratoires sur ces features ","ee53955d":"### Nous allons \u00e9galement regarder s'il existe des doublons sur l'identifiant OSEBuildingID. On effet, nos mod\u00e9lisations devront porter sur un b\u00e2tiement unique (ce n'est pas une mod\u00e9lisation temporelle). Nous prendrons donc la derni\u00e9re valeur sur les 2 ann\u00e9es :","27b3df20":"### On corrige le type de la latitude, longitude et le zipcode ainsi que la TaxParcelIdentificationNumber","3c528100":"### Nous allons ensuite supprimer les variables DefaultData, ComplianceStatus, TaxParcelIdentificationNumber, CouncilDistrictCode, City","899e09ff":"#### Vocabulaire","47dceec7":"#### Il est pr\u00e9cisi\u00e9 dans le projet que seuls les b\u00e2timents non destin\u00e9s \u00e0 l'habitation seront \u00e9tudi\u00e9s. Nous allons donc supprimer toutes les lignes correspondant \u00e0 des habitations en nous basant sur la variable BuildingType","173bdd7f":"#### V\u00e9rifions la variable ComplianceStatus qui repr\u00e9sente la conformit\u00e9 des donn\u00e9es relev\u00e9es :","5a250898":"### Nous pouvons \u00e9galement calculer la surface moyenne par b\u00e2timent et par \u00e9tage :","0041a28a":"la majeur partie des b\u00e2timents sont typ\u00e9s \"NonResidential\". Nous pouvons visualiser les diverses cat\u00e9gories repr\u00e9sent\u00e9es dans ce type de b\u00e2timents :","c96fcf90":"### 1.2 Uniformisation des donn\u00e9es de localisation de 2015","7bbdc1cd":"### En regardant ces projections, il semble que les coordonn\u00e9es g\u00e9ographiques (donc les adresses des b\u00e2timents) puissent avoir un impact sur les consommations d'\u00e9gergie et rejets de CO2.\n\n### D'autre part, la latitude et la longitude \u00e9tant 2 variables fortement corr\u00e9l\u00e9es dans notre jeu de donn\u00e9es, nous allons supprimer ces 2 colonnes pour conserver uniquement ce point de coordonn\u00e9e unique Harvesine .","b259f1a2":"#### Nous pouvons supprimer la colonne en kWh qui est redondante et ainsi rester en unit\u00e9 anglaise, uniform\u00e9ment avec le reste des colonnes. Nous garderons aussi cette unit\u00e9 pour le gaz. ","c9b7aeb1":"### On peut constater plusieurs faits;\n\n### les types de batiments sont in\u00e9galement repr\u00e9sent\u00e9s, on a surtout des batiments de types non r\u00e9sidentiels qui sont essentiellement des bureaux\n### certains quartiers sont tr\u00e8s peu repr\u00e9sent\u00e9s (probablement les quartiers r\u00e9sidentiels avec les donn\u00e9es qu'on a supprim\u00e9 de l'analyse) mais cette in\u00e9galit\u00e9 est peu visible au niveau des districts\n### on a peu de construction b\u00e2tie entre 1930 et 1947 ce qui est expliqu\u00e9 par la crise de 29 et la 2nde guerre mondiale.\n### on a peu de construction r\u00e9centes (ce qui semble normal les terrains ne sont plus \u00e0 batir)\n### plus les constructions sont \u00e9lev\u00e9es, moins elles sont nombreuses.","e8b0b2ca":"#### Nous avons \u00e0 pr\u00e9sent les colonnes correspondant \u00e0 celles de 2016 : latitude, longitude, address, city, state et zip. Renommons les de la m\u00eame fa\u00e7on :","747d9b21":"### 2.3.Corr\u00e9lations","a049a153":"#### En gardant les lignes remplies \u00e0 au moins 86%, on conserverait un plus de 97% des donn\u00e9es totales et ce serait les donn\u00e9es les plus qualitatives, je vais donc faire ce choix.","1d89b0b0":"### Pour les varaibles \u00e0 pr\u00e9dire TotalGHGEmissions et SiteEnergyUse(kBtu), on remarque des corr\u00e9lations lin\u00e9aires quasi similaires avec les variables de relev\u00e9s (les consommations) mais \u00e9galement avec le nombre de batiments ou d'\u00e9tages ains que les surfaces au sol.\n\n### On remarque sur ce Heatmap de fortes corr\u00e9lations lin\u00e9aires entre variables. Ces corr\u00e9lations peuvent amener des probl\u00e8mes de colin\u00e9arit\u00e9 dans nos futurs mod\u00e8les. Isolons donc les paires de variables avec des corr\u00e9lations de Pearson sup\u00e9rieurs \u00e0 0.7 :","a159d2e3":"#### Eliminons aussi les valeurs negatives des valeurs quatitatives","2047391f":"### On remarque que les variables suffix\u00e9es GFA pr\u00e9sentent de fortes corr\u00e9lations avec plusieurs autres variables. Nous allons donc cr\u00e9er de nouvelles variables pour tenter de gommer ces corr\u00e9lations lin\u00e9aires :  Nous allons donc cr\u00e9er une variable nous donnant le nombre total d'usage du b\u00e2timent, puis supprimer la liste compl\u00e8te des usages :","91bf0542":"### Et pour finir, nous supprimons les variables Latitude et Longitude puis nous exportons le fichier clean\u00e9 pour les mod\u00e9lisations qui seront effectu\u00e9es dans un second Notebook","dba5ec3a":"## 2.1. Analyse univari\u00e9e","91031d54":"### Des scores VIF sup\u00e9rieur \u00e0 5 indiquent g\u00e9n\u00e9ralement une forte multicolin\u00e9arit\u00e9. Ces variables fortement corr\u00e9l\u00e9es risquent d'impacter nos mod\u00e8les.\n### Les features suffix\u00e9es EUI(kBtu\/sf), sont des variables dont les valeurs sont ramen\u00e9es \u00e0 la surface par \u00e9tage. Nous allons les supprimer car nous avons cr\u00e9er des variables pouvant permettre de ramener nos donn\u00e9es \u00e0 l'\u00e9tage ou au building. Idem pour la variable GHGEmissionsIntensity","8d5083ac":"#### Renommons les trois colonnes de 2015 qui restent ainsi que de 2016 a l'identique","2c4c65fd":"### on remarque ici que la r\u00e9partion des donn\u00e9es d'emission de CO2 en fonction de la consommation d'\u00e9nergie ne suivent pas uniquement 1 seule droite de r\u00e9gression lin\u00e9aire si l'on zoom sur les donn\u00e9es les plus repr\u00e9sent\u00e9es.","af06ad97":"#### On remarque que les donn\u00e9es de localisation pour le jeu de donn\u00e9es de 2015 sont \"compact\u00e9es\" dans une sorte de double dictionnaire. Nous allons donc travailler cette variable pour extraire chacune des variables imbriqu\u00e9es :","ea2c043e":"#### Les variables des 2 datasets \u00e9tant \u00e0 pr\u00e9sent identiques, nous allons pouvoir les regrouper en un unique jeu de donn\u00e9es :","7d0d0a82":"#### Vu le nombre de lignes concern\u00e9es il s'agit bien d'anomalies dont on ne tiendra pas compte. Pour supprimer les lignes concernant les usages r\u00e9sidentielles nous supprimerons donc les lignes contenant le terme \"Multifamily\" dans le type de b\u00e2timent ou dans son type d'usage.","b9a69736":"#### On perdra tr\u00e8s peu de donn\u00e9es en supprimant les lignes contenant des valeurs inconnues pour les colonnes SiteEnergyUseWN(kBtu), SiteEUIWN(kBtu\/sf), SiteEUI(kBtu\/sf), NumberofFloors, ZipCode donc faisons le.","dde1ca5c":"### Nous allons \u00e0 pr\u00e9sent regarder la r\u00e9partition de ces 2 variables en fonction du type de b\u00e2tiement.","317f44f6":"### Sur ces diagrammes en barre, les campus se d\u00e9marquent largement en terme de consommation et de rejets de CO2. Regardons \u00e0 pr\u00e9sent si l'\u00e2ge des b\u00e2timents a un impact sur les \u00e9missions de CO2 :","f0df7538":"# 1. Environnement Python et Chargement des donn\u00e9es","ed9bd517":"### En se basant sur les projections obtenus et les r\u00e9sultats des tests de Kolmogorov-Smirnov (Pvalue < au niveau de test de 5%) on rejette donc l'hypoth\u00e8se de normalit\u00e9 des distributions de ces variables.\n\n### Projettons \u00e0 pr\u00e9sent les scatterplots des distribition de ces 2 variables entre elles :","db9c29d8":"### On peut constater plusieurs faits:\n\n### il y a beaucoup de b\u00e2timents avec une faible surface de plancher brut (comme le nombre d'\u00e9tage) mais \u00e0 eux tous il repr\u00e9sente la plupart de la surface de plancher.\n### beaucoup de batiment consomment peu d'\u00e9nergie mais qu'\u00e0 eux tous ce sont eux qui consomment le plus\n### il y a peu de batiments qui consomment une tr\u00e8s grande quantit\u00e9 d'\u00e9nergie et \u00e0 eux tous ils consomment finalement assez peu.\n### ce constat est assez similaire avec l'\u00e9mission de gazs \u00e0 effet de serre.\n### Cela laisse \u00e0 pr\u00e9sager que:\n\n### la consommation \u00e9nerg\u00e9tique pourrait \u00eatre corr\u00e9l\u00e9 \u00e0 l'\u00e9mission de gazs \u00e0 effet de serre.\n### la consommation \u00e9nerg\u00e9tique et donc les \u00e9missions de gazs \u00e0 effet de serre pourraient \u00eatre corr\u00e9l\u00e9s au nombre d'\u00e9tage des buildings.\n","50f0cbe3":"\nMaintenant que nous avons d\u00e9grossis et affiner le jeu de donn\u00e9es, d\u00e9taillons un peu les acronymes utilis\u00e9s dans les colonnes:\n\nGHG: greenhouse gas emissions, correspond aux \u00e9missions des gazs \u00e0 effet de serre.\n\nOSE: Seattle Office of Sustainability and Environment.\n\nEUI: Energy Use Intensity.\n\nkBtu: kilo-British thermal unit, 1 kWh = 3.412 kBtu.\n\nsf: square feet, 1m\u00b2 = 10,7639sf.\n\nWN: weather-normalized, normalis\u00e9 vis \u00e0 vis des conditions climatiques.\n\nGFA: Gross floor area, Surface de plancher brute - La surface de plancher couverte (par un toit, m\u00eame sans mur) \n    totale contenue dans le b\u00e2timent.\n\ntherm: mesure \u00e9nerg\u00e9tique 1thm =100000Btu.\n\n#### Fort de ces informations nous sommes en droit de nous demander si les valeurs don\u00e9es pour\n#### l'\u00e9lectricit\u00e9: Electricity(kWh), Electricity(kBtu) ne sont pas les m\u00eames \u00e0 l'untit\u00e9 pr\u00e8s. Idem pour NaturalGas(kBtu) \n#### et NaturalGas(therms) V\u00e9rifions le."}}