{"cell_type":{"798318ee":"code","f0e46106":"code","ec5bd36b":"code","9ad02b42":"code","917fed25":"code","0c7a2510":"code","9e9b984e":"code","4c90703e":"code","c59899c4":"code","a6557bf2":"code","858540ea":"code","fc0efa9d":"code","a23e5af9":"code","97b05ab4":"code","1439c6dd":"code","d01e459c":"code","db5a9bad":"code","93335a22":"code","4102c4ca":"code","b3c05b75":"code","8cf88a25":"code","c7c59173":"code","99a97ddc":"code","d9a6bfce":"code","991e6406":"code","08f9352b":"code","cd6f56ee":"code","4999d9d3":"code","b19d4b23":"code","d678a10f":"code","695973e5":"code","e811a2fb":"code","9e90d5eb":"code","a113175d":"code","45c35d18":"code","9bfe24a8":"code","d7ccf5d2":"code","8ffea410":"code","1ba96bdf":"code","ac727a5c":"code","47ee9f0c":"code","fc0dcfa3":"code","3e3c3e6f":"code","d9d4dc6f":"code","46a537a4":"code","fa76ee80":"code","df70af9a":"code","03fa0d36":"markdown","282424d5":"markdown","0a2b9d7a":"markdown","c9b74eec":"markdown","b4276c45":"markdown","113cb49c":"markdown","df9e2e7e":"markdown","3b58a4c2":"markdown","2711bed0":"markdown","873d9fec":"markdown","43989d36":"markdown","b697584e":"markdown","bc3a2138":"markdown","f07ecc83":"markdown","c99ea315":"markdown"},"source":{"798318ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f0e46106":"import pandas as pd\nsample_submission = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/nlp-getting-started\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/nlp-getting-started\/train.csv\")","ec5bd36b":"train.head()","9ad02b42":"import string\nimport re\ndef clean_text(text):\n    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\n\n","917fed25":"train['text'] = train['text'].apply(lambda x: clean_text(x))\ntest['text'] = test['text'].apply(lambda x: clean_text(x))\n\n# Let's take a look at the updated text\ntrain['text'].head()","0c7a2510":"from gensim.models import Word2Vec, KeyedVectors\nimport nltk","9e9b984e":"# Tokenizing the training and the test set\ntokenizer = nltk.tokenize.RegexpTokenizer(r'\\w+')\ntrain['text'] = train['text'].apply(lambda x: tokenizer.tokenize(x))\ntest['text'] = test['text'].apply(lambda x: tokenizer.tokenize(x))\ntrain['text'].head()","4c90703e":"# Lets remove the stopwords as it does not seems of any meaning","c59899c4":"from nltk.corpus import stopwords \ndef remove_stopwords(text):\n    \"\"\"\n    Removing stopwords belonging to english language\n    \n    \"\"\"\n    words = [w for w in text if w not in stopwords.words('english')]\n    return words","a6557bf2":"train['text'] = train['text'].apply(lambda x : remove_stopwords(x))\ntest['text'] = test['text'].apply(lambda x : remove_stopwords(x))\ntrain.head(10)","858540ea":"test['target'] = 0","fc0efa9d":"def combine_text(list_of_text):\n    '''Takes a list of text and combines them into one large chunk of text.'''\n    combined_text = ' '.join(list_of_text)\n    return combined_text\n\ntrain['text'] = train['text'].apply(lambda x : combine_text(x))\ntest['text'] = test['text'].apply(lambda x : combine_text(x))\ntrain.head()","a23e5af9":"# Now we will make a corpus of words to start word2vec training.","97b05ab4":"df = pd.concat([train,test])","1439c6dd":"corpus = df['text'].values","d01e459c":"corpus","db5a9bad":"Corpus_list = [nltk.word_tokenize(title) for title in corpus]","93335a22":"Corpus_list","4102c4ca":"model = Word2Vec(Corpus_list,min_count=1,size = 100)","b3c05b75":"model.most_similar('death')","8cf88a25":"!pwd","c7c59173":"path = \"..\/input\/googles-trained-word2vec-model-in-python\/GoogleNews-vectors-negative300.bin\"","99a97ddc":"import gensim\nmodel = gensim.models.KeyedVectors.load_word2vec_format(path,binary=True)","d9a6bfce":"w = model[\"hello\"]\nprint(len(w))","991e6406":"print(w)","08f9352b":"class MeanEmbeddingVectorizer(object):\n\n    def __init__(self, word_model):\n        self.word_model = word_model\n        self.vector_size = word_model.wv.vector_size\n\n    def fit(self):  # comply with scikit-learn transformer requirement\n        return self\n\n    def transform(self, docs):  # comply with scikit-learn transformer requirement\n        doc_word_vector = self.word_average_list(docs)\n        return doc_word_vector\n\n    def word_average(self, sent):\n        \"\"\"\n        Compute average word vector for a single doc\/sentence.\n\n\n        :param sent: list of sentence tokens\n        :return:\n            mean: float of averaging word vectors\n        \"\"\"\n        mean = []\n        for word in sent:\n            if word in self.word_model.wv.vocab:\n                mean.append(self.word_model.wv.get_vector(word))\n\n        if not mean:  # empty words\n            # If a text is empty, return a vector of zeros.\n            #logging.warning(\"cannot compute average owing to no vector for {}\".format(sent))\n            return np.zeros(self.vector_size)\n        else:\n            mean = np.array(mean).mean(axis=0)\n            return mean\n\n\n    def word_average_list(self, docs):\n        \"\"\"\n        Compute average word vector for multiple docs, where docs had been tokenized.\n\n        :param docs: list of sentence in list of separated tokens\n        :return:\n            array of average word vector in shape (len(docs),)\n        \"\"\"\n        return np.vstack([self.word_average(sent) for sent in docs])","cd6f56ee":"class TfidfEmbeddingVectorizer(object):\n    def __init__(self, word2vec):\n        self.word2vec = word2vec\n        self.word2weight = None\n        self.dim = len(word2vec.itervalues().next())\n\n    def fit(self, X, y):\n        tfidf = TfidfVectorizer(analyzer=lambda x: x)\n        tfidf.fit(X)\n        # if a word was never seen - it must be at least as infrequent\n        # as any of the known words - so the default idf is the max of \n        # known idf's\n        max_idf = max(tfidf.idf_)\n        self.word2weight = defaultdict(\n            lambda: max_idf,\n            [(w, tfidf.idf_[i]) for w, i in tfidf.vocabulary_.items()])\n\n        return self\n\n    def transform(self, X):\n        return np.array([\n                np.mean([self.word2vec[w] * self.word2weight[w]\n                         for w in words if w in self.word2vec] or\n                        [np.zeros(self.dim)], axis=0)\n                for words in X\n            ])\n","4999d9d3":"mean_vec_tr = MeanEmbeddingVectorizer(model)\ndoc_vec = mean_vec_tr.transform(Corpus_list)","b19d4b23":"print('Shape of word-mean doc2vec...')\ndisplay(doc_vec.shape)","d678a10f":"Corpus_train = train['text'].values","695973e5":"train_corpus = [nltk.word_tokenize(title) for title in Corpus_train]\ndoc_vec_1 = mean_vec_tr.transform(train_corpus)","e811a2fb":"len(train_corpus)\n","9e90d5eb":"print('Shape of word-mean doc2vec...')\ndisplay(doc_vec_1.shape)","a113175d":"Corpus_test = test['text'].values\ntest_corpus = [nltk.word_tokenize(title) for title in Corpus_test]\ndoc_vec_2 = mean_vec_tr.transform(test_corpus)\nprint('Shape of word-mean doc2vec...')\ndisplay(doc_vec_2.shape)","45c35d18":"X = doc_vec_1\ny = train['target']","9bfe24a8":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection\nclf = LogisticRegression(C=1.0)\nscores = model_selection.cross_val_score(clf,X,y, cv=5, scoring=\"f1\")\nscores","d7ccf5d2":"clf.fit(X,y)","8ffea410":"X_vec_test = doc_vec_2","1ba96bdf":"sample_submission_1 = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\nsample_submission_1[\"target\"] = clf.predict(X_vec_test)\nsample_submission_1.to_csv(\"submission.csv\", index=False)","ac727a5c":"# Using Advance Algorithms","47ee9f0c":"from xgboost import XGBClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import f1_score\nfrom sklearn import preprocessing, decomposition, model_selection, metrics, pipeline","fc0dcfa3":"from sklearn.model_selection import StratifiedKFold","3e3c3e6f":"# xgb_model = XGBClassifier()\n\n# #brute force scan for all parameters, here are the tricks\n# #usually max_depth is 6,7,8\n# #learning rate is around 0.05, but small changes may make big diff\n# #tuning min_child_weight subsample colsample_bytree can have \n# #much fun of fighting against overfit \n# #n_estimators is how many round of boosting\n# #finally, ensemble xgboost with multiple seeds may reduce variance\n# parameters = {'nthread':[4], #when use hyperthread, xgboost may become slower\n#               'objective':['binary:logistic'],\n#               'learning_rate': [0.05,0.01,0.1], #so called `eta` value\n#               'max_depth': [6,7,8,10],\n#               'min_child_weight': [11],\n#               'silent': [1],\n#               'subsample': [0.8],\n#               'colsample_bytree': [0.7,0.6,.5],\n#               'n_estimators': [100,1000], #number of trees, change it to 1000 for better results\n#               'missing':[-999],\n#               'seed': [1337]}\n\n\n# clf = GridSearchCV(xgb_model, parameters, n_jobs=5,  \n#                    scoring='roc_auc',\n#                    verbose=2, refit=True)\n\n# clf.fit(X,y)\n\n# #trust your CV!\n","d9d4dc6f":"# print(\"Best parameters set found on development set:\")\n# print()\n# print(clf.best_params_)","46a537a4":"clf = XGBClassifier(colsample_bytree=0.7, learning_rate= 0.05, max_depth= 8,\n                    min_child_weight=11, missing= -999, n_estimators= 1000,\n                    nthread= 4, objective='binary:logistic', seed=1337, silent=1, subsample=0.8)\nscores = model_selection.cross_val_score(clf,X,y, cv=5, scoring=\"f1\")\nscores\n","fa76ee80":"clf.fit(X,y)","df70af9a":"sample_submission_1 = pd.read_csv(\"..\/input\/nlp-getting-started\/sample_submission.csv\")\nsample_submission_1[\"target\"] = clf.predict(X_vec_test)\nsample_submission_1.to_csv(\"submission_3.csv\", index=False)","03fa0d36":"let us concatenate both test and train column to get a larger corpus containing larger no of words.","282424d5":"# Step 1\nText Preprocessing","0a2b9d7a":"# Step 2 : Training Word2Vec on our dataset from scratch.","c9b74eec":"Well there are two methods of implementation for Word2Vec on a given dataset.\n* Either train from scratch.\n* Or use google pretrained word2vec model.\n","b4276c45":"Now to represent the word we must convert the whole word to something small value of single numerical.So right now covert the 300 vector word to a single value by simple averaging defined by the class below.\nAlso it seems that the pretrained vector is much better than the that trained on our small dataset.So we will carry on with this only.","113cb49c":"Importing the pretrained vectors using this link\n\nhttps:\/\/www.kaggle.com\/umbertogriffo\/googles-trained-word2vec-model-in-python","df9e2e7e":"# Step 3 : Training the model and predicting test set.","3b58a4c2":"Importing Dataset","2711bed0":"If you are very much intrested in this than follow this link\n\nhttps:\/\/code.google.com\/archive\/p\/word2vec\/","873d9fec":"Importing Libraries","43989d36":"# Steps\nThe problems seems to be of three steps:\n* Preprocessing of words\n* Word2Vec training on our dataset\n* Prediction using vector outputted by Word2Vec.","b697584e":"In case you want to use different technique than averaging we can use tfidf using this technique.","bc3a2138":"Lets play around with this 300 sized vector space for all words.","f07ecc83":"We can also used google pretrained saved model on newspaper as no of trained words much larger corpus and would give more accurate results then this small dataset","c99ea315":"So we can see their quite some diffrences between the pretrained vector on our dataset and that on google newspaper dataset."}}