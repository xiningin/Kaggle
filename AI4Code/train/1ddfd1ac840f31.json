{"cell_type":{"8f7b74b8":"code","f53fd433":"code","7c4df85f":"code","1f91492e":"code","5dd51c42":"code","52600358":"code","3bb6129b":"code","b45ceb96":"code","19ea6c53":"code","77501056":"code","9d9e6579":"code","d1b7e759":"code","fbac9473":"code","c846f90a":"code","4b89cf36":"code","1b457cf6":"code","04132d0e":"code","ff54c096":"code","f65c7a94":"code","c74bbad5":"code","2adbfc4d":"code","63aca86f":"code","3eb01e77":"code","c66b31ff":"markdown","28be875d":"markdown","83262531":"markdown","2c5f7ef8":"markdown","f93007e9":"markdown","5a4a6cea":"markdown","60739e5a":"markdown"},"source":{"8f7b74b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f53fd433":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport squarify\nwarnings.filterwarnings(\"ignore\")","7c4df85f":"df = pd.read_csv('\/kaggle\/input\/avocado-prices\/avocado.csv')\ndf.head()","1f91492e":"# converting proper data type\ndf['Date'] = pd.to_datetime(df.Date, format = \"%Y\/%m\/%d\")\ndf['month'] = df.Date.dt.month\ndf['day'] = df.Date.dt.day\ndf.info()","5dd51c42":"# inspecting categorical variables\ndf = df.drop('Unnamed: 0', axis = 1)\nprint('Avocado Region List\\n', df.region.unique())\nprint('-' * 40)\nprint('Avocado Type List\\n', df.type.unique())","52600358":"# manipulating data (seperate into three datasets according to region)\ndf_US = df[df.region == 'TotalUS']\ndf = df.drop(df_US.index, axis = 0)\n\nregion = ['West', 'Midsouth', 'Northeast', 'Southcentral', 'Southeast']\ndf_region = df[(df.region == 'Midsouth') | (df.region == 'Northeast') |\n               (df.region == 'SouthCentral') | (df.region == 'Southeast') |\n               (df.region == 'West')]\n\ndf = df.drop(df_region.index, axis = 0)\n\n# checking regions in datasets \nprint('US Dataset Region:\\n', df_US.region.unique())\nprint('-'*40, '\\nRegion Dataset Region:\\n', df_region.region.unique())\nprint('-'*40, '\\nOriginal Dataset Region:\\n', df.region.unique())","3bb6129b":"print('---- US Avocado Statistics ----\\n'), display(df_US.describe().T)\nprint('---- Regional Avocado Statistics ----\\n'), display(df_US.describe().T)\nprint('---- Avocado Statistics ----\\n'), display(df_US.describe().T)","b45ceb96":"# Price Overview by Categorical Variables\nregion5 = df_region[['region', 'AveragePrice']].groupby('region').agg('mean').sort_values(\n                        by = 'AveragePrice', ascending = False).reset_index()\n\nprint('Top 5 Avg.Price Overview by Big Region')\ndisplay(region5.head(5))\nprint('-' * 35)\n\ncheck_list = ['type', 'year', 'month', 'day', 'region']\nfor cat in check_list:\n    top5 = df[[cat, 'AveragePrice']].groupby(cat).agg('mean').sort_values(\n                        by = 'AveragePrice', ascending = False).reset_index().head(5)\n    print('Top {} Avg.Price Overview by {}'.format(top5.shape[0], str.capitalize(cat)))\n    display(top5)\n    print('-' * 35)","19ea6c53":"# overview on the dataset\nsns.pairplot(df.drop(['region', 'type'], axis = 1))\nplt.show()","77501056":"# correlation overview on the dataset\nplt.figure(figsize = (10, 8))\nsns.heatmap(df.corr(), annot = True, fmt = '.2f', cmap = 'Blues')\nplt.title('Correlation among All Variables\\n', fontsize = 14)\nplt.show()","9d9e6579":"sns.set_style('darkgrid')\nplt.figure(figsize = (15, 8))\nsns.lineplot('Date', 'AveragePrice', data = df_US, hue = 'type', alpha = .8)\nplt.title('US Price Overview', fontsize = 14)\nplt.show()","d1b7e759":"g = sns.FacetGrid(df_region, col = 'type', row = 'year', hue = 'region', \n                  height = 3, aspect = 2, palette = 'RdBu_r')\ng.map(sns.lineplot, 'month', 'AveragePrice')\ng.add_legend()\nplt.show()","fbac9473":"sns.factorplot(x = 'AveragePrice', y = 'region', data = df,\n              hue = 'year', size = 15, aspect = 0.7, palette = 'RdBu_r', join = False)\nplt.title('Yearly Average Price Overview on City', fontsize = 12)\nplt.ylabel('')\nplt.show()","c846f90a":"plt.figure(figsize = (18, 8))\nax = sns.lineplot('Date', 'Total Volume', data = df, label = 'Volume', legend = False)\nax2 = plt.twinx()\nsns.lineplot('Date', 'Total Bags', data = df, \n             color = 'orange', label = 'Bags', legend = False, ax = ax2)\nax.figure.legend()\nplt.show()","4b89cf36":"fig, axes = plt.subplots(1, 2, figsize = (15, 5))\ng = sns.boxplot(x = 'Total Volume', y = 'region', data = df_region, \n                hue = 'type', ax = axes[0])\ng.set(title = 'Total Volume by Region', ylabel = ' ')\n\ng = sns.boxplot(x = 'Total Bags', y = 'region', data = df_region, \n                hue = 'type', ax = axes[1])\ng.set(title = 'Total Bags by Region', ylabel = '')\nplt.show()","1b457cf6":"# grouping the data by region with desc order by total volume\nvolume_order = df.groupby('region')['Total Volume'].sum(\n                        ).sort_values(ascending = False).reset_index()\n\n# setting the tree map\ncmap = matplotlib.cm.Blues\nvolume_values = [i for i in range(volume_order.shape[0])]\nnorm = matplotlib.colors.Normalize(vmin = min(volume_values), vmax = max(volume_values))\ncolors = [cmap(norm(value)) for value in volume_values][::-1]\n\n# plotting the map\nplt.figure(figsize = (20, 12))\nsquarify.plot(sizes = volume_order['Total Volume'], alpha = 0.8,\n              label = volume_order.region, color = colors)\nplt.title('Region Total Volume Tree Map', fontsize = 20)\nplt.axis('off')\nplt.show()","04132d0e":"# grouping the data by region with desc order by total bags\nbag_order = df.groupby('region')['Total Bags'].sum(\n                        ).sort_values(ascending = False).reset_index()\n\ncmap = matplotlib.cm.Reds\nbag_values = [i for i in range(bag_order.shape[0])]\nnorm = matplotlib.colors.Normalize(vmin = min(bag_values), vmax = max(bag_values))\ncolors = [cmap(norm(value)) for value in bag_values][::-1]\n\nplt.figure(figsize = (20, 12))\nsquarify.plot(sizes = bag_order['Total Bags'], alpha = 0.8,\n              label = bag_order.region, color = colors)\nplt.title('Region Total Bag Tree Map', fontsize = 20)\nplt.axis('off')\nplt.show()","ff54c096":"# yearly total bags VS total volume overview\ng = sns.FacetGrid(df_region, col = 'type', row = 'year', palette = 'RdBu_r',\n                      hue = 'region',  height = 3.5, aspect = 2)\ng.map(sns.scatterplot, 'Total Volume', 'Total Bags')\ng.add_legend()\nplt.show()","f65c7a94":"plt.style.use('seaborn')\n\n# grouping & summing the data by date \/ plotting the area based on types\nfig, axes = plt.subplots(2, 1, figsize = (15, 10))\ndf[['4046', '4225', '4770', 'Date']].groupby('Date').sum().plot(kind = 'area', \n                        title = 'Volume Type Overview', ax = axes[0])\ndf[['Small Bags', 'Large Bags', 'XLarge Bags', 'Date']].groupby('Date').sum().plot(\n                        kind = 'area',title = 'Bag Type Overview', ax = axes[1])\nplt.tight_layout()\nplt.show()","c74bbad5":"# grouping volume types by big region sorted with desc order by total volume \nvol_region = df_region[['4046', '4225', '4770', 'Total Volume', 'year', 'region']].groupby(\n                ['year','region']).sum().sort_values(\n                ['year', 'Total Volume'], ascending = False).reset_index().drop(\n                'Total Volume', axis = 1)\n\nfig, axes = plt.subplots(2, 2, figsize = (12, 8))\n\nfor ax, year in zip(axes.flatten(), vol_region.year.unique()[::-1]):\n    vol_region.loc[vol_region.year == year][['region', '4046', '4225', '4770']].plot(\n                                        x = 'region', kind = 'bar', stacked = True, ax = ax,\n                                        title = 'Regional Volume Details in {}'.format(year))\n    ax.set(xlabel = '')\n    ax.tick_params(axis = 'x', labelrotation = 45)\n\nplt.tight_layout()\nplt.show()","2adbfc4d":"# grouping bag types by big region sorted with desc order by total bags\nbag_region = df_region[['Small Bags', 'Large Bags', 'XLarge Bags', \\\n                        'Total Bags', 'year', 'region']].groupby(\n                        ['year','region']).sum().sort_values(\n                        ['year', 'Total Bags'], ascending = False).reset_index().drop(\n                        'Total Bags', axis = 1)\n\nfig, axes = plt.subplots(2, 2, figsize = (12, 8))\n\nfor ax, year in zip(axes.flatten(), bag_region.year.unique()[::-1]):\n    bag_region.loc[bag_region.year == year][['region', \\\n                        'Small Bags', 'Large Bags', 'XLarge Bags']].plot(\n                        x = 'region', kind = 'bar', stacked = True, ax = ax,\n                        title = 'Regional Bags Details in {}'.format(year))\n    ax.set(xlabel = '')\n    ax.tick_params(axis = 'x', labelrotation = 45)\n\nplt.tight_layout()\nplt.show()","63aca86f":"# grouping volume types by region sorted with desc order by total volume \nvol_all = df[['4046', '4225', '4770', 'Total Volume', \\\n            'year', 'region']].groupby('region').sum().sort_values(\n            'Total Volume').reset_index().drop('Total Volume', axis = 1)\n\nvol_all.plot(x = 'region', kind = 'barh', stacked = True,\n                 title = 'City Volume Details', figsize = (12, 15))\nplt.ylabel('')\nplt.show()","3eb01e77":"# grouping bag types by region sorted with desc order by total bags\nbag_all = df[['Small Bags', 'Large Bags', 'XLarge Bags','Total Bags', \\\n            'region']].groupby('region').sum().sort_values(\n            'Total Bags').reset_index().drop('Total Bags', axis = 1)\n\nbag_all.plot(x = 'region', kind = 'barh', stacked = True,\n                 title = 'City Bags Details', figsize = (12, 15))\nplt.ylabel('')\nplt.show()","c66b31ff":"#### Summary\n- Prices are differnt among big five regions\n- Organic Avocado has higher price \n- Price in 2017 is much higher than other years\n- HatfordSpringfield got the highest Avg.Price ","28be875d":"#### - Volume Category & Bag Category","83262531":"#### Summary\n- Almost no correlationship bewteen Avg.Price & [all variables]\n- Bags & Volumes have pretty high correlationship","2c5f7ef8":"### Data Import & Manipulation","f93007e9":"#### - Total Volume & Total Bags","5a4a6cea":"#### - Time Series - Price","60739e5a":"### Visualization Overview\n#### - Distribution & Correlation"}}