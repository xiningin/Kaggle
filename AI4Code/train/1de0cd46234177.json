{"cell_type":{"be8b708c":"code","1d0405a8":"code","ed24ef43":"code","6728edf3":"code","46079a98":"code","1b6c9479":"code","ee94734c":"code","9a41f043":"code","b9fb3f21":"code","46a0d6ad":"code","b9b4a031":"markdown","8dc8fb9a":"markdown","ef51a1fc":"markdown","32ac53b1":"markdown","b55dd6c0":"markdown","9931f860":"markdown"},"source":{"be8b708c":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport cv2","1d0405a8":"train=pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntrain.head()","ed24ef43":"sns.countplot(train['label'])","6728edf3":"plt.figure(figsize=(15,15))\nfor n in range(1,11):\n    for data in train.values:\n        label=data[0]\n        if(label==n-1):\n            img=np.array(data[1:]).reshape(28,28)\n            plt.subplot(5,2,n)\n            plt.title(n-1)\n            plt.axis('off')\n            plt.imshow(img,cmap='gray')\n            break","46079a98":"from sklearn.preprocessing import OneHotEncoder\n\nX=((train.drop(columns=['label'])).values\/255).reshape(-1,28,28,1)\ny=train['label']\n\nohe=OneHotEncoder()\ny=ohe.fit_transform(y.values.reshape(-1,1))\ny=y.todense()","1b6c9479":"from sklearn.model_selection import train_test_split\n\nxtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=0.2)","ee94734c":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, BatchNormalization\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28,28,1)))\nmodel.add(BatchNormalization())\n\nmodel.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n    \nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\n\nmodel.add(Dense(10, activation='softmax'))\n\nmodel.summary()","9a41f043":"model.compile(optimizer='adam',\n             loss='categorical_crossentropy',\n             metrics=['accuracy'])\n\nearlystop=keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5)\n\nhistory=model.fit(xtrain, ytrain, validation_split=0.2, epochs=50,batch_size=100, callbacks=[earlystop])","b9fb3f21":"# Accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title(\"Training accuracy vs Validation accuracy\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.show()\n\n# Loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"Training loss vs Validation loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.show()","46a0d6ad":"score=model.evaluate(xtest,ytest)","b9b4a031":"## Take a look at the distribution of categories","8dc8fb9a":"# Explaratory Data Analysis","ef51a1fc":"# Split the dataset into training and testing sets","32ac53b1":"# Organize the training images and label\n\n* Normalize the training image pixel value to [0,1]\n* One hot encode labels","b55dd6c0":"# Take a look at an image from each category","9931f860":"# Building a Convolutional Neural Network"}}