{"cell_type":{"22299cce":"code","a53cc539":"code","2c72b575":"code","d3ee5a24":"code","fbe80077":"code","17190f7e":"code","8a90e051":"code","48db31d1":"code","d1ca84a6":"code","0dbadf4c":"code","f6bfadd8":"code","34471961":"code","79196c6f":"code","9c290023":"code","53d9e8c0":"code","18cdf629":"code","7ec05a84":"code","a5bec428":"code","e66aaf14":"code","5e646336":"code","e94dc0d7":"code","f3ab5ae4":"code","2a28e154":"code","ce8d97bf":"markdown","d955ff69":"markdown","e65b7543":"markdown","506b299a":"markdown","67b51b9a":"markdown","ec1177a3":"markdown","b09c1716":"markdown"},"source":{"22299cce":"! pip install -Uqq fastai\n! pip install -qq torchaudio==0.7.0\n! pip install -qq librosa","a53cc539":"from fastai.vision.all import *\nimport torchaudio\nimport pathlib\nimport librosa\nfrom IPython.display import Audio\nimport librosa.display\nimport numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nwarnings.filterwarnings(\"ignore\")\n%config Completer.use_jedi = False","2c72b575":"mypath = \"..\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/audio_and_txt_files\/\"\nfilenames = get_files(mypath, extensions='.wav')\nfilenames","d3ee5a24":"p_diag = pd.read_csv(\"..\/input\/respiratory-sound-database\/Respiratory_Sound_Database\/Respiratory_Sound_Database\/patient_diagnosis.csv\",header=None) # patient diagnosis file\np_diag.head()","fbe80077":"# configuration for audio processing\nn_fft=1024\nhop_length=256\ntarget_rate=44100\nnum_samples=int(target_rate)","17190f7e":"## Method for labelling sample (Healthy\/Unhealthy)\ndef get_y(path): \n    desease = p_diag[p_diag[0] == int(path.stem[:3])][1].values[0]\n    if desease == \"Healthy\":\n        return \"Healthy\"\n    else : \n        return \"Unhealthy\"","8a90e051":"## Method for getting all audio files, I get file withc rate 44100 Hz only because resampling take so much time :( \ndef get_items(path): \n    fns = [fn for fn in get_files(path, extensions='.wav') if torchaudio.load_wav(fn)[1] == target_rate]\n    return fns","48db31d1":"## Helper method to tranform audio array to Spectrogram\nau2spec = torchaudio.transforms.MelSpectrogram(sample_rate=target_rate,n_fft=n_fft, hop_length=hop_length, n_mels=256)\nampli2db = torchaudio.transforms.AmplitudeToDB()","d1ca84a6":"def get_x(path, target_rate=target_rate, num_samples=num_samples*2):\n    x, rate = torchaudio.load_wav(path)\n    if rate != target_rate: \n        x = torchaudio.transforms.Resample(orig_freq=rate, new_freq=target_rate, resampling_method='sinc_interpolation')(x)\n    x = x[0] \/ 32768\n    x = x.numpy()\n    sample_total = x.shape[0]\n    randstart = random.randint(target_rate, sample_total-target_rate*3)\n    x = x[randstart:num_samples+randstart]\n    x = librosa.util.fix_length(x, num_samples)\n    torch_x = torch.tensor(x)\n    spec = au2spec(torch_x)\n    spec_db = ampli2db(spec)\n    spec_db = spec_db.data.squeeze(0).numpy()\n    spec_db = spec_db - spec_db.min()\n    spec_db = spec_db\/spec_db.max()*255\n    return spec_db","0dbadf4c":"## Getting all files and labels\nitems = get_items(mypath)\nlabels = [get_y(item) for item in items]\nCounter(labels)","f6bfadd8":"test_size=0.3\nsplitter = TrainTestSplitter(test_size=test_size, random_state=42, stratify=labels)","34471961":"db = DataBlock(\n    blocks=(ImageBlock, CategoryBlock),\n    get_x=get_x,\n    get_y=get_y,\n    splitter=splitter,\n    item_tfms=[Resize(256)])","79196c6f":"dsets = db.datasets(items)","9c290023":"dsets","53d9e8c0":"count = Counter(labels)\nwgts = [1\/count[dsets.vocab[label]] for img, label in dsets.train]\nwgts[:10]","18cdf629":"dls = db.dataloaders(items, num_workers=2, dl_type=WeightedDL, wgts=wgts)","7ec05a84":"x, y = dls.one_batch()","a5bec428":"sum(y)\/len(y)\n## ~50% => we are fine here","e66aaf14":"dls.show_batch()","5e646336":"## We use xresnet18 as model\nlearn = cnn_learner(dls, xresnet18, metrics=error_rate)","e94dc0d7":"## model learning\nlearn.fine_tune(10)","f3ab5ae4":"learn.show_results()","2a28e154":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(12,12), dpi=60)","ce8d97bf":"To reconfirm we have balance classes in each batch. We try to get one batch and see if the distribution of each class is equal","d955ff69":"## Introduction\n\nIn general, stethoscope is an acoustic medical instrument that be used by the doctor to diagnose the problem in the heart or lungs.\n\nHowever, with the rise of deep learning in the field of Image Processing and Audio Processing, I believe deep learning model can achieved the acceptable level of disease diagnosis. If we can get to that state, stethoscope can help the patient or anyone who want to monitor their health, and inform the doctor if they find something anormaly. It might also be very helpful in this period of pandemic where we need to limit the contact as much as possible \n\n## Technical Disscussion\n\nI've played with this dataset and found it is very unbalance. We have so many subjects with COPD and very small sample of others classes. I've tried to classify the disease. Even though reaching quite high accuracy in total (~ 95%), there are some classes which has very low accuracy. That make me change idea to classify healthy\/unhealthy first.\n\nI use Xresnet18 to classify spectrogram image with carefully splitting classes in train\/valid dataset and use oversampling for handling unbalance dataset. The code is quite neat thanks to fast.ai","e65b7543":" Helper method for getting audio files, getting label and configuration for audio processing","506b299a":"Each weight in the list above is the probability of each file will appear in a batch. ","67b51b9a":"the train_test_split method below here is to guarantee the classes is spllited equally in train and validation set, too avoid the problem that we just have Unhealthy samples in validations set. Details can be found here: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html\n","ec1177a3":"To overcome the problem of unbalance dataset, we try to weight the probability of classes's apperance using WeightDataLoader","b09c1716":"From the labels's counter above, we reconfirm that the dataset is very unbalance"}}