{"cell_type":{"f911620d":"code","ce3bda03":"code","702555e2":"code","75564d1d":"code","51845ec7":"code","feb8b5db":"code","010e54c8":"markdown"},"source":{"f911620d":"import numpy as np\nimport pandas as pd\n\n\narquivo = pd.read_csv(\"..\/input\/ex1_train_data.csv\", sep=\";\")\narquivo\n\na = 1\n\nfor i in range(0, len(arquivo.index)):\n    b = 0\n    \n    x = arquivo['x'][i]\n    y = arquivo['y'][i]\n    \n    result = a * x + b\n#     while result < y:\n#         b = b + 1\n#         result = a * x + b\n        \n    print('b', b)\n    print('result', result)\n    print('y', y)\n    print('\\n\\n\\n')\n    ","ce3bda03":"import pandas as pd\nimport numpy as np\nimport os\nimport statistics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nR = 10\n\nX = pd.DataFrame(arquivo[[\"x\"]])\ny = pd.DataFrame(arquivo[[\"y\"]])\n\nlinearRegressor = LinearRegression()\n\nmodel = []\n\nfor i in range(1,R):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1\/3)\n    \n    #Regress\u00e3o Linear\n    model.append(linearRegressor.fit(X_train, y_train))\n    y_pred = linearRegressor.predict(X_test)\n    \n    print('y_pred', y_pred)","702555e2":"X = pd.DataFrame(arquivo[[\"x\"]])\ny = pd.DataFrame(arquivo[[\"y\"]])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\nlinearRegressor = LinearRegression()\nlinearRegressor.fit(X_train, y_train)\n\n\n#Intercepto ou Coeficiente Linear\n# print(linearRegressor.intercept_)\n#Coeficiente Angular (slope)\n# print(linearRegressor.coef_)\n\n#Previs\u00e3o\ny_pred = linearRegressor.predict(X_test)\nprint(y_pred)\ndf = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf\n","75564d1d":"from matplotlib import pyplot as plt\n\nplt.scatter(x=arquivo['x'], y=arquivo['y'])\nplt.show","51845ec7":"from matplotlib import pyplot as plt\n\nplt.scatter(x=arquivo['x'], y=y_pred)\nplt.show","feb8b5db":"import pandas as pd\n\ntrain_data = pd.read_csv('..\/input\/ex1_train_data.csv', delimiter=';')\n\ndef mse(Y, Y_pred):    \n    result = 1\/len(Y) * sum((Y - Y_pred) ** 2)\n    return result\n\nbest_a = None\nbest_b = None\nbest_mse = None\n\na = 0\nb = 0\n\nL = 0.00001\n\nX = train_data['x']\nY = train_data['y']\n\nn = len(train_data['y'])\n\nepochs = 10000 #epocas\n\nfor i in range(1, epochs):\n    Y_pred = train_data['x'] * a + b\n\n#     new_mse = mse(train_data['y'], Y_pred)\n\n#     if best_mse is None or new_mse < best_mse:            \n#         best_mse = new_mse\n#         best_a = a\n#         best_b = b\n\n    a = a - L * ((-2\/n) * sum(X * (Y - Y_pred))) #derivado do erro (proprio mse)\n    b = b - L * ((-2\/n) * sum(Y - Y_pred))\n        \n\n# print('best_mse = %.3f, best_a = %f, best_b = %f' % (best_mse, best_a, best_b))\n\nY_pred = train_data['x'] * a + b\nnew_mse = mse(Y, Y_pred)\nprint('mse', new_mse)\nprint('a', a)\nprint('b', b)","010e54c8":"## Com o c\u00f3digo certo do professor"}}