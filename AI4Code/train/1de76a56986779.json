{"cell_type":{"fe114101":"code","c45b3867":"code","e036dd47":"code","8e1f4399":"code","74c0a828":"code","9c6b4d3f":"code","607e0077":"code","109aa5b5":"code","6c3d44c6":"code","32d37fc7":"code","8494c3f7":"code","fb2aefc2":"code","d1312020":"code","5ee6bec6":"code","3daa8a31":"code","f3142169":"code","24a9d7b7":"code","95bcedcf":"code","de754299":"code","bb978fa1":"code","0ceef3e7":"code","8547aa6e":"code","4c46f0e7":"code","bb3c751e":"code","1a1f94d8":"code","95234b08":"code","d2207b09":"code","7722b746":"code","f9a78846":"code","15af7ea5":"code","711ee325":"code","987c74f1":"code","5aaea64b":"code","dc766819":"code","4c095737":"code","ecc9c3c5":"code","36f96e0e":"code","d534bac0":"code","b780225f":"code","76535aeb":"code","d10a3fde":"code","00a32123":"code","f4f7fe0d":"code","ab5743d9":"code","e606e554":"code","072fc510":"code","f23dec70":"code","40596aaf":"code","0d015644":"code","60d1035f":"code","5498e085":"code","c492ee01":"code","8ab7698c":"code","1b7e6755":"code","303199c6":"code","40404c14":"code","8787a159":"code","8d8ddf07":"code","253fd289":"code","07abcdd7":"code","fd5d50ef":"code","e14ce278":"code","14bc1c4d":"code","c0c0ce37":"code","9326cded":"code","56236f93":"code","76d4e616":"code","b67a0720":"code","3850b3a5":"code","5a99f2d3":"code","f3087ff1":"code","51673a07":"code","a6e23f47":"code","bc32db18":"code","b44b2adf":"code","ce2bd012":"markdown","a0ae2069":"markdown","0b61ff9d":"markdown","13451647":"markdown","4e3c40fc":"markdown","14aaed78":"markdown","b6d17534":"markdown","2e38f846":"markdown","a6032e9a":"markdown","49a01552":"markdown","4660e3be":"markdown","f1bc47fb":"markdown","8f12a09f":"markdown","78cbfc9e":"markdown"},"source":{"fe114101":"import numpy as np # linear algebra\nimport pandas as pd\nimport seaborn as sns\nimport plotly.figure_factory as ff\nfrom plotly.offline import iplot\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom pandas_profiling import ProfileReport\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport sys\n\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")\n    \nwarnings.filterwarnings(\"ignore\")\nimport plotly.figure_factory as ff","c45b3867":"df=pd.read_csv(\"..\/input\/heart-failure-prediction\/heart.csv\")","e036dd47":"df.head()","8e1f4399":"report = ProfileReport(df)\nreport","74c0a828":"df.info()\n","9c6b4d3f":"categorical_cols= df.select_dtypes(include=['object'])\nprint(f'The dataset contains {len(categorical_cols.columns.tolist())} categorical columns')\nfor cols in categorical_cols.columns:\n    print(cols,':', len(categorical_cols[cols].unique()),'labels')","607e0077":"ax=sns.countplot(x= df[\"HeartDisease\"], palette= \"viridis\")\nplt.show()","109aa5b5":"plt.figure(figsize=(15,15))\n\ncorr_matrix=df.corr()\nmask = np.zeros_like(corr_matrix)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr_matrix, mask=mask, square=True, cmap=\"RdBu\" ,vmin=1,vmax=-1,annot=True,linewidth=1)\n\nplt.title(\"KORELASYON GRAF\u0130\u011e\u0130\")\n\nplt.show()","6c3d44c6":"df[df['HeartDisease']==0].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdPu')\n","32d37fc7":"df[df['HeartDisease']==1].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdPu')\n","8494c3f7":"fig = ff.create_distplot([df.Age],['Age'],bin_size=1)\niplot(fig)","fb2aefc2":"histogram=px.histogram(data_frame=df,x=\"Age\",nbins=60,title=\"age for HeartDisease\",color=\"HeartDisease\")\n\n\nhistogram.show()","d1312020":"histogram=px.histogram(data_frame=df,x=\"Cholesterol\",nbins=90,color=\"HeartDisease\")\n\n\nhistogram.show()","5ee6bec6":"histogram=px.histogram(data_frame=df,x=\"RestingBP\",nbins=90,color=\"HeartDisease\",marginal=\"violin\")\n\n\nhistogram.show()","3daa8a31":"histogram=px.histogram(data_frame=df,x=\"MaxHR\",nbins=90,color=\"HeartDisease\",marginal=\"violin\")\n\n\nhistogram.show()","f3142169":"df[\"HeartDisease\"].unique()","24a9d7b7":"healthy=df[df[\"HeartDisease\"]==0][\"Age\"]\ndisease=df[df[\"HeartDisease\"]==1][\"Age\"]\n\n\nhist_data = [healthy,disease]\ngroup_labels = ['healthy', 'disease']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in Age on disease Status\")\nfig.show()\n","95bcedcf":"healthy=df[df[\"HeartDisease\"]==0][\"MaxHR\"]\ndisease=df[df[\"HeartDisease\"]==1][\"MaxHR\"]\n\n\nhist_data = [healthy,disease]\ngroup_labels = ['healthy', 'disease']\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=0.5)\nfig.update_layout(\n    title_text=\"Analysis in MaxHR on disease Status\")\nfig.show()\n","de754299":"x1 = df[\"RestingBP\"]\nx2 = df[\"Cholesterol\"]\nx3 = df[\"MaxHR\"]\n\n# Group data together\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['RestingBP', 'Cholesterol', 'MaxHR']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=10)\nfig.show()","bb978fa1":"df","0ceef3e7":"px.bar(df, x='ChestPainType', y='HeartDisease', color='Sex')","8547aa6e":"pie_chart=px.pie(data_frame=df, values=\"HeartDisease\",names=\"ExerciseAngina\",width=500,height=500,hole=.3)\n\npie_chart.show()","4c46f0e7":"fig = px.pie(df, values='HeartDisease', names='Age')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","bb3c751e":"fig = px.pie(df, values='HeartDisease', names='Sex')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","1a1f94d8":"fig = px.pie(df, values='HeartDisease', names='RestingECG')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","95234b08":"fig = px.pie(df, values='HeartDisease', names='ChestPainType')\nfig.update_traces( textinfo='percent+label')\nfig.show()","d2207b09":"fig = px.pie(df, values='HeartDisease', names='ST_Slope')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","7722b746":"fig = px.pie(df, values='HeartDisease', names='FastingBS')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","f9a78846":"df_tips = px.data.tips()\npx.bar(df, x='HeartDisease', y='ChestPainType', color='Sex')","15af7ea5":"df_tips = px.data.tips()\npx.bar(df, x='HeartDisease', y='RestingECG', color='Sex')","711ee325":"sns.pairplot(df)\n","987c74f1":"df","5aaea64b":"df.duplicated().sum()\n","dc766819":"df.isnull().sum()","4c095737":"from sklearn.preprocessing import LabelEncoder\n\nle=LabelEncoder()\n\ndf['Sex']=le.fit_transform(df['Sex'])\ndf['RestingECG']=le.fit_transform(df['RestingECG'])\ndf['ChestPainType']=le.fit_transform(df['ChestPainType'])\ndf['ExerciseAngina']=le.fit_transform(df['ExerciseAngina'])\ndf['ST_Slope']=le.fit_transform(df['ST_Slope'])\n\ndf.head()","ecc9c3c5":"X = df.drop('HeartDisease', axis=1)\ny = df['HeartDisease']","36f96e0e":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4)\n\nprint(\"X_train: \", X_train.shape)\nprint(\"X_test: \", X_test.shape)\nprint(\"y_train: \", y_train.shape)\nprint(\"y_test: \", y_test.shape)","d534bac0":"import statsmodels.api as sm\n\nloj = sm.Logit(y, X)\nloj_model= loj.fit()\nloj_model.summary()","b780225f":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X,y)\nloj_model","76535aeb":"loj_model.intercept_","d10a3fde":"loj_model.coef_","00a32123":"y_pred = loj_model.predict(X)","f4f7fe0d":"confusion_matrix(y, y_pred)","ab5743d9":"accuracy_score(y, y_pred)","e606e554":"print(classification_report(y, y_pred))","072fc510":"loj_model.predict(X)[0:10]","f23dec70":"y.head(10)","40596aaf":"loj_model.predict_proba(X)[0:10]","0d015644":"y[0:10]","60d1035f":"y_probs = loj_model.predict_proba(X)\ny_probs = y_probs[:,1]","5498e085":"logit_roc_auc = roc_auc_score(y, loj_model.predict(X))\n\nfpr, tpr, thresholds = roc_curve(y, loj_model.predict_proba(X)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='AUC (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Oran\u0131')\nplt.ylabel('True Positive Oran\u0131')\nplt.title('ROC')\nplt.show()","c492ee01":"nb = GaussianNB()\nnb_model = nb.fit(X_train, y_train)\nnb_model","8ab7698c":"y_pred = nb_model.predict(X_test)","1b7e6755":"accuracy_score(y_test, y_pred)","303199c6":"cross_val_score(nb_model, X_test, y_test, cv = 10).mean()","40404c14":"from sklearn.preprocessing import StandardScaler\n\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","8787a159":"knn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\nknn_model","8d8ddf07":"y_pred = knn_model.predict(X_test)\n\naccuracy_score(y_test, y_pred)","253fd289":"print(classification_report(y_test, y_pred))","07abcdd7":"svm_model = SVC(kernel = \"linear\").fit(X_train, y_train)\n\nsvm_model\n\ny_pred = svm_model.predict(X_test)\n\naccuracy_score(y_test, y_pred)","fd5d50ef":"svc_model = SVC(kernel = \"rbf\").fit(X_train, y_train)\n\nsvc_model\n\ny_pred = svc_model.predict(X_test)\naccuracy_score(y_test, y_pred)","e14ce278":"from sklearn.tree import DecisionTreeClassifier\n\ncart = DecisionTreeClassifier()\ncart_model = cart.fit(X_train, y_train)\n\n\n\ny_pred = cart_model.predict(X_test)\naccuracy_score(y_test, y_pred)","14bc1c4d":"rf_model = RandomForestClassifier().fit(X_train, y_train)\n\nrf_model\n\ny_pred = rf_model.predict(X_test)\naccuracy_score(y_test, y_pred)","c0c0ce37":"gbm_model = GradientBoostingClassifier().fit(X_train, y_train)\n\ny_pred = gbm_model.predict(X_test)\naccuracy_score(y_test, y_pred)","9326cded":"xgb_model = XGBClassifier().fit(X_train, y_train)\n\nxgb_model\n\ny_pred = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred)","56236f93":"lgbm_model = LGBMClassifier().fit(X_train, y_train)\n\ny_pred = lgbm_model.predict(X_test)\naccuracy_score(y_test, y_pred)","76d4e616":"cat_model = CatBoostClassifier().fit(X_train, y_train)\n\ny_pred = cat_model.predict(X_test)\n\naccuracy_score(y_test, y_pred)","b67a0720":"modeller = [\n    knn_model,\n    loj_model,\n    svc_model,\n    nb_model,\n    cart_model,\n    rf_model,\n    gbm_model,\n    cat_model,\n    lgbm_model,\n    xgb_model,\n    \n]\n\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    dogruluk = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(isimler + \":\" )\n    print(\"Accuracy: {:.4%}\".format(dogruluk))","3850b3a5":"sonuc = []\n\nsonuclar = pd.DataFrame(columns= [\"Modeller\",\"Accuracy\"])\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    dogruluk = accuracy_score(y_test, y_pred)    \n    sonuc = pd.DataFrame([[isimler, dogruluk*100]], columns= [\"Modeller\",\"Accuracy\"])\n    sonuclar = sonuclar.append(sonuc)\n    \n    \nsns.barplot(x= 'Accuracy', y = 'Modeller', data=sonuclar, color=\"r\")\nplt.xlabel('Accuracy %')\nplt.title('Accuracy Rates of Models');   ","5a99f2d3":"svc_model = SVC(kernel = \"rbf\").fit(X_train, y_train)","f3087ff1":"y_pred = svc_model.predict(X_test)\naccuracy_score(y_test, y_pred)","51673a07":"svc_params = {\"C\": [0.0001, 0.001, 0.1, 1, 5, 10 ,50 ,100],\n             \"gamma\": [0.0001, 0.001, 0.1, 1, 5, 10 ,50 ,100,200]}","a6e23f47":"svc = SVC()\nsvc_cv_model = GridSearchCV(svc, svc_params, \n                         cv = 10, \n                         n_jobs = -1,\n                         verbose = 2)\n\nsvc_cv_model.fit(X_train, y_train)\n\nsvc_cv_model.best_params_","bc32db18":"svc_tuned = SVC(C = 1, gamma = 0.1).fit(X_train, y_train)","b44b2adf":"y_pred = svc_tuned.predict(X_test)\naccuracy_score(y_test, y_pred)","ce2bd012":"# XGBoost","a0ae2069":"# final model","0b61ff9d":"# Random Forests","13451647":"# KNN","4e3c40fc":"# # RBF SVC","14aaed78":"# Lojistik Regresyon ","b6d17534":"# CatBoost","2e38f846":"# prediction & Model Tuning","a6032e9a":"# LightGBM","49a01552":"# SVC","4660e3be":"# Model Tuning","f1bc47fb":"# Cart","8f12a09f":"# Gradient Boosting Machines","78cbfc9e":"# Gaussian Naive Bayes"}}