{"cell_type":{"9d48d842":"code","1c484903":"code","7f04a4ca":"code","a4dffb42":"code","a9d731a4":"code","85bd5731":"code","f9a5464c":"code","5fcd48c7":"code","7243d975":"code","b84e73c1":"code","01f0f796":"code","f9121b0e":"markdown","8fce3c56":"markdown"},"source":{"9d48d842":"import numpy as np\nimport pandas as pd\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import LearningRateScheduler\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\n\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.preprocessing import RobustScaler, normalize, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, GroupKFold, KFold\n\nfrom IPython.display import display","1c484903":"DEBUG = False\nDATA_DIR = '..\/input\/ventilator-pressure-prediction\/'\n\ntrain = pd.read_csv(DATA_DIR+'train.csv')\ntest = pd.read_csv(DATA_DIR+'test.csv')\nsubmission = pd.read_csv(DATA_DIR+'sample_submission.csv')\n\nif DEBUG:\n    train = train[:80*10000]","7f04a4ca":"def add_features(df):\n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    \n    df['u_in_lag'] = df['u_in'].shift(2).fillna(0)\n    df['u_in_neg_lag'] = df['u_in'].shift(-2).fillna(0)\n    \n    df['R'] = df['R'].astype(str)\n    df['C'] = df['C'].astype(str)\n    df = pd.get_dummies(df)\n    return df\n\ntrain = add_features(train)\ntest = add_features(test)","a4dffb42":"targets = train[['pressure']].to_numpy().reshape(-1, 80)\ntrain.drop(['pressure', 'id', 'breath_id'], axis=1, inplace=True)\ntest = test.drop(['id', 'breath_id'], axis=1)","a9d731a4":"sc = RobustScaler()\n# sc = MinMaxScaler()\ntrain = sc.fit_transform(train)\ntest = sc.transform(test)","85bd5731":"train = train.reshape(-1, 80, train.shape[-1])\ntest = test.reshape(-1, 80, train.shape[-1])","f9a5464c":"def get_model():\n    model = keras.models.Sequential([\n        keras.layers.Input(shape=train.shape[-2:]),\n        keras.layers.Bidirectional(keras.layers.LSTM(300, return_sequences=True)),\n        keras.layers.Bidirectional(keras.layers.LSTM(250, return_sequences=True)),\n        keras.layers.Bidirectional(keras.layers.LSTM(150, return_sequences=True)),\n        keras.layers.Bidirectional(keras.layers.LSTM(100, return_sequences=True)),\n        keras.layers.Dense(50, activation='selu'),\n        keras.layers.Dense(1),\n    ])\n    model.compile(optimizer=\"adam\", loss=\"mae\", steps_per_execution=32)\n    \n    return model","5fcd48c7":"# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nwith tpu_strategy.scope():\n    model = get_model()","7243d975":"EPOCH = 500\nBATCH_SIZE = 1024\n\nscheduler = ExponentialDecay(1e-3, 400*((len(train)*0.8)\/BATCH_SIZE), 1e-5)\nlr = LearningRateScheduler(scheduler, verbose=0)\nes = EarlyStopping(monitor=\"val_loss\", patience=15, verbose=1, mode=\"min\", restore_best_weights=True)\n\nkf = KFold(n_splits=10, shuffle=True, random_state=2021)\ntest_preds = []\nfold_mae = []\nfor fold, (train_idx, test_idx) in enumerate(kf.split(train, targets)):\n    print('-'*50, '>', f'Fold {fold+1}', '<', '-'*50)\n    X_train, X_valid = train[train_idx], train[test_idx]\n    y_train, y_valid = targets[train_idx], targets[test_idx]\n    \n#     sc = MinMaxScaler()\n#     X_train = sc.fit_transform(X_train)\n#     X_valid = sc.transform(X_valid)\n#     test_fold = sc.transform(test)\n    \n    model.fit(\n        X_train, y_train,\n        validation_data=(X_valid, y_valid),\n        epochs=EPOCH,\n        batch_size=BATCH_SIZE,\n        callbacks=[lr, es],\n        verbose=0\n    )\n    \n    y_pred = model.predict(X_valid)\n    loss = mae(np.ravel(y_valid), np.ravel(y_pred))\n    fold_mae.append(loss)\n    print(f\"Fold {fold+1} MAE: {loss}\")\n    #model.save(f'Fold{fold+1} RNN Weights')\n    test_preds.append(model.predict(test).squeeze().reshape(-1, 1).squeeze())","b84e73c1":"import matplotlib.pyplot as plt\nplt.plot(fold_mae)\nplt.title(\"Fold MAE\")\nplt.xlabel(\"Fold\")\nplt.ylabel(\"MAE\")\nprint(f\"Mean MAE: {np.mean(fold_mae)}\")","01f0f796":"submission[\"pressure\"] = sum(test_preds)\/10\nsubmission.to_csv('submission.csv', index=False)","f9121b0e":"# Preprocessing","8fce3c56":"# Imports"}}