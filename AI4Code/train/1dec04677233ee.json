{"cell_type":{"e4971713":"code","420778e4":"code","21470a52":"code","908050f7":"code","e6e1044e":"code","10b24bb9":"code","d436b928":"code","98e620e3":"code","c233e380":"code","ca50c71f":"markdown","82c2d0cc":"markdown","5db83310":"markdown","dc72ad82":"markdown","afd1af82":"markdown","4dbbed8c":"markdown","c2ea9821":"markdown","3d16a307":"markdown","f190266a":"markdown"},"source":{"e4971713":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport copy\nimport time\nimport torch\nimport torchvision\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import models\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader, random_split\nfrom torchvision import transforms\nfrom skimage import io\nfrom sklearn.preprocessing import LabelEncoder\nfrom mpl_toolkits.axes_grid1 import ImageGrid","420778e4":"os.listdir('..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset')","21470a52":"img_class = ['Hourse Mackerel', 'Black Sea Sprat', 'Sea Bass', 'Red Mullet', 'Trout', 'Striped Red Mullet',\n             'Shrimp', 'Gilt-Head Bream', 'Red Sea Bream']\n\nlist_dir = []\nlist_class = []\nmain_dir = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset'\n\nfor i in img_class:\n    dirs = main_dir + '\/' + i + '\/' + i\n    the_files = []\n    for _, __, f in os.walk(dirs):\n        the_files.append(f)\n        for ff in the_files[0]:\n            add = i + '\/' + i + '\/' + ff\n            list_dir.append(add)\n            list_class.append(i)\n            \ndf_img = pd.DataFrame({'dir':list_dir, 'class':list_class})","908050f7":"class fish_dataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.annotations = df\n        self.root_dir = root_dir\n        self.transform = transform\n    def __len__(self):\n        return len(self.annotations)\n    def __getitem__(self, index):\n        img_path = os.path.join(self.root_dir, self.annotations.iloc[index, 0])\n        image = io.imread(img_path)\n        y_label = self.annotations.iloc[index, 1]\n        if self.transform != None:\n            image = self.transform(image)\n        return (image, y_label)\n    \nimg_transformer = transforms.ToTensor()\n    \nscaled_fish_dataset = fish_dataset(df_img, main_dir, img_transformer)","e6e1044e":"train_set, valid_set = random_split(scaled_fish_dataset, [5000, 4000])\nvalid_set, test_set = random_split(valid_set, [2000, 2000])\n\ntrain_dataloader = DataLoader(train_set, shuffle=True, batch_size=10, num_workers=4)\nvalid_dataloader = DataLoader(valid_set, shuffle=True, batch_size=10, num_workers=4)\ntest_dataloader = DataLoader(test_set, shuffle=True, batch_size=10, num_workers=4)\n\ndataloader = {'train':train_dataloader, 'valid':valid_dataloader}\ndataset_size = {'train': len(train_set), 'valid': len(valid_set)}","10b24bb9":"def transform_to_numpy(inp):\n    inp = inp.numpy()\n    i, x, y, z = inp.shape\n    inp_new = inp[0].transpose((1, 2, 0)).reshape(1, y, z, x)\n    for inp_add in inp[1:]:\n        inp_add = inp_add.transpose((1, 2, 0)).reshape(1, y, z, x)\n        inp_new = np.vstack([inp_new, inp_add])\n    return inp_new\n\ninputs, labels = next(iter(test_dataloader))\ninputs = transform_to_numpy(inputs)    \n\nfig = plt.figure(figsize=(14, 7))\ngrid = ImageGrid(fig, 111, nrows_ncols=(2, 5), axes_pad=0.1)\n\nfor pic, g in zip(inputs, grid):\n    g.imshow(pic)\n    \nprint('{}\\t{}\\t{}\\t{}\\t{}'.format(labels[0], labels[1], labels[2], labels[3], labels[4]))\nprint('{}\\t{}\\t{}\\t{}\\t{}'.format(labels[5], labels[6], labels[7], labels[8], labels[9]))\nplt.show()","d436b928":"def develop_model(model, encoder, criterion, optimizer, scheduler, num_epochs):\n    since = time.time()\n    best_acc = 0.0\n    best_model_wts = copy.deepcopy(model.state_dict())\n    \n    for epoch in range(num_epochs):\n        print('Epoch : {}\/{}'.format(epoch + 1, num_epochs))\n        print('-' * 10)\n        \n        for phase in ['train', 'valid']:\n            if phase == 'train':\n                model.train()\n            elif phase == 'valid':\n                model.eval()\n            running_loss = 0.0\n            running_corrects = 0.0\n            \n            for inputs, labels in dataloader[phase]:\n                inputs = inputs.to(device)\n                labels = torch.Tensor(encoder.transform(labels)).to(device)\n                labels = labels.long()\n                \n                optimizer.zero_grad()\n                \n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, predictions = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n                    \n                if phase == 'train':\n                    loss.backward()\n                    optimizer.step()\n                    \n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(predictions == labels.data)\n            if phase == 'train':\n                scheduler.step()\n                \n            epoch_loss = running_loss \/ dataset_size[phase]\n            epoch_acc = running_corrects.double() \/ dataset_size[phase]\n            \n            if (phase == 'valid') and (epoch_acc > best_acc):\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n                \n            print('{} Loss : {:.3f} Accuracy {:.3f}'.format(phase, epoch_loss, epoch_acc))\n        print()\n        \n    time_elapsed = time.time() - since\n    \n    print('The elapsed time is {} minutes {:.1f} seconds'.format(int(time_elapsed \/\/ 60), time_elapsed % 60))\n    print('The best accuracy is {:.2f}%'.format(best_acc * 100))\n    \n    model.load_state_dict(best_model_wts)\n    \n    return model","98e620e3":"le_process = LabelEncoder().fit(img_class)\ndevice = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\n\nmodel = models.resnet18(pretrained=True)\nfor parameter in model.parameters():\n    parameter.requires_grad = False\nmodel_ftrs = model.fc.in_features\nmodel.fc = nn.Linear(model_ftrs, len(img_class))\nmodel = model.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(model.fc.parameters(), lr=5e-3, momentum=0.9)\nscheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)\n\nmodel = develop_model(model, le_process, criterion, optimizer, scheduler, num_epochs=8)","c233e380":"from sklearn.metrics import accuracy_score\nfrom tqdm.auto import tqdm\n\npreds = []\ntargs = []\n\nprogress_bar = tqdm(range(len(test_dataloader)))\n\nfor inputs, labels in test_dataloader:\n    inputs = inputs.to(device)\n    labels = le_process.transform(labels)\n    with torch.no_grad():\n        outputs = model(inputs)\n    _, predictions = torch.max(outputs, 1)\n    predictions = predictions.cpu().numpy()\n    for pred, targ in zip(predictions, labels):\n        preds.append(pred)\n        targs.append(targ)\n    progress_bar.update(1)\n        \ntest_score = accuracy_score(preds, targs)\nprint('The accuracy of the test is {:.2f}%'.format(test_score * 100))","ca50c71f":"The last step is Testing. Let's see how it goes.","82c2d0cc":"Here, we have 9 kinds of fish that we will try to classify. These are :\n1. Hourse Mackerel\n2. Black Sea Sprat\n3. Sea Bass\n4. Red Mullet\n5. Trout\n6. Striped Red Mullet\n7. Shrimp\n8. Gilt-Head Bream\n9. Red Sea Bream","5db83310":"# IV. Training the Model","dc72ad82":"Because we will be using transfer learning here, we only need to train the last layer. We will use this pre-trained model as the feature extractor, which has a function to extract the feature from each picture that it process. The last layer is our classifier which we build specific for this particular problem.","afd1af82":"The accuracy of the test is 99.80%. Well it's high, but it depends on you to decide is it a good thing or not. It can be an indication of overfitting as we all know that the data that we have here doesn't have much varieties. ","4dbbed8c":"# II. Import Necessary Data For Training, Validation & Testing","c2ea9821":"# V. Testing","3d16a307":"# III. Showing Some Examples of the Data","f190266a":"# I. Import Libraries\nHere we will be focusing on Torchvision since it has Transfer Learning feature and quiet comfortable to use."}}