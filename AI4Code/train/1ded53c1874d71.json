{"cell_type":{"fcc427c2":"code","2fe627ad":"code","910c96f0":"code","890fce1c":"code","43653722":"code","bd6df1e3":"code","9661e8dd":"code","f5d64e70":"code","76a26dc4":"code","e69cd90a":"code","469365aa":"code","f04a56f0":"code","492f9089":"code","bd792576":"code","431a6f03":"code","8b6fdd5a":"code","8a75799a":"code","39f42e8d":"code","b7044d5d":"code","863dd0e8":"code","6abfe450":"code","3ae55ab8":"code","59387207":"code","df824f43":"code","73563aa5":"code","dcef2cd4":"code","9b1bbf64":"code","45158e68":"code","015d7cab":"code","585f992a":"code","b7633464":"code","a33bcbe0":"markdown","1cf65bcd":"markdown","abe9c297":"markdown","c6b3c688":"markdown","8f77317a":"markdown","773faae5":"markdown","d599a72f":"markdown","82cce85a":"markdown"},"source":{"fcc427c2":"# As a first step towards your solution, we need to understand the data and hence we load the same and the libbraries required","2fe627ad":"import pandas as pd               # for Data Manipulation\nimport matplotlib.pyplot as plt   # for Visualization\nimport numpy as np                #for Mathematical calculations\nimport seaborn as sns             #for Advanced visualizations\n\nair = pd.read_csv(\"..\/input\/eastwestairlines-heirarchical-clustering\/EastWestAirlines.csv\")","910c96f0":"air","890fce1c":"# We see the columns in the dataset\nair.columns","43653722":"# As a part of the Data cleansing we check the data for any missing\/ na values\nair.isna().sum()","bd6df1e3":"# Additionally we check the data for any duplicate values, now this can be an optional check depending on the data being used\nair1 = air.duplicated()\nsum(air1)","9661e8dd":"# We now plot the boxplot for the data using each feature independently and check for Outliers\nplt.boxplot(air.Balance);plt.title('Boxplot');plt.show()\n\n# We see that there are Outliers present for \"Balance\" Feature","f5d64e70":"plt.boxplot(air.Qual_miles);plt.title('Boxplot');plt.show()  # outliers present","76a26dc4":"plt.boxplot(air.cc1_miles);plt.title('Boxplot');plt.show()  # No outliers ","e69cd90a":"plt.boxplot(air.cc2_miles);plt.title('Boxplot');plt.show()  # outliers present","469365aa":"plt.boxplot(air.cc3_miles);plt.title('Boxplot');plt.show()  # outliers present","f04a56f0":"plt.boxplot(air.Bonus_miles);plt.title('Boxplot');plt.show()  # outliers present","492f9089":"plt.boxplot(air.Bonus_trans);plt.title('Boxplot');plt.show()  # outliers present","bd792576":"plt.boxplot(air.Flight_miles_12mo);plt.title('Boxplot');plt.show()  # outliers present","431a6f03":"plt.boxplot(air.Flight_trans_12);plt.title('Boxplot');plt.show()  # outliers present","8b6fdd5a":"from scipy.stats.mstats import winsorize\n\nair['Balance']=winsorize(air.Balance,limits=[0.07, 0.093])   \nplt.boxplot(air['Balance']);plt.title('Boxplot');plt.show()\n\nair['Qual_miles']=winsorize(air.Qual_miles,limits=[0.06, 0.094])   \nplt.boxplot(air['Qual_miles']);plt.title('Boxplot');plt.show()\n\nair['cc2_miles']=winsorize(air.cc2_miles,limits=[0.02, 0.098])   \nplt.boxplot(air['cc2_miles']);plt.title('Boxplot');plt.show()\n\nair['cc3_miles']=winsorize(air.cc3_miles,limits=[0.01, 0.099])   \nplt.boxplot(air['cc3_miles']);plt.title('Boxplot');plt.show()\n\nair['Bonus_miles']=winsorize(air.Bonus_miles,limits=[0.08, 0.092])   \nplt.boxplot(air['Bonus_miles']);plt.title('Boxplot');plt.show()\n\nair['Bonus_trans']=winsorize(air.Bonus_trans,limits=[0.01, 0.099])   \nplt.boxplot(air['Bonus_trans']);plt.title('Boxplot');plt.show()\n\nair['Flight_miles_12mo']=winsorize(air.Flight_miles_12mo,limits=[0.15, 0.85])   \nplt.boxplot(air['Flight_miles_12mo']);plt.title('Boxplot');plt.show()\n\nair['Flight_trans_12']=winsorize(air.Flight_trans_12,limits=[0.15, 0.85])   \nplt.boxplot(air['Flight_trans_12']);plt.title('Boxplot');plt.show()","8a75799a":"# Now we check the data for zero variance values\n(air == 0).all()","39f42e8d":"# We drop the features that have zero variance values\nair1 = air\nair1.drop([\"Qual_miles\",\"Flight_miles_12mo\",\"Flight_trans_12\"], axis=1,inplace = True)\nair1.columns","b7044d5d":"# We see the data again now to check whether the data is in scale\nair1.describe\n\n# we notice that the data needs to be normalise, using normalization","863dd0e8":"from sklearn import preprocessing   #package for normalize\nair_normalized = preprocessing.normalize(air1)\nprint(air_normalized)","6abfe450":"##########################Univariate, Bivariate################\nplt.hist(air1[\"Balance\"])   #Univariate\n\nplt.hist(air1[\"Days_since_enroll\"])\n\nplt.scatter(air1[\"Balance\"], air[\"Days_since_enroll\"]);plt.xlabel('Days_since_enroll');plt.ylabel('Balance')   #Bivariate\n\nair1.skew(axis = 0, skipna = True) \n\nair1.kurtosis(axis = 0, skipna = True)","3ae55ab8":"# in order to create a dendogram we need to define the linkage and create a linkage matrix\n# we would need the appropriate library for the same\nfrom scipy.cluster.hierarchy import linkage\nimport scipy.cluster.hierarchy as sch ","59387207":"###Finding the Distance using Euclidean Distance with \n# Complete (maximum) linkage: Maximum distance among all data points in two clusters\nz = linkage(air_normalized, method = \"complete\", metric = \"euclidean\")\n","df824f43":"# Now we plot the dendogram\nplt.figure(figsize=(15, 8));plt.title('Hierarchical Clustering Dendrogram');plt.xlabel('Index');plt.ylabel('Distance')\nsch.dendrogram(z, leaf_rotation = 0,  leaf_font_size = 5 )  \nplt.show()","73563aa5":"# We select the number of clusters from the dendogram as \"4\"","dcef2cd4":"from sklearn.cluster import AgglomerativeClustering\nh_complete = AgglomerativeClustering(n_clusters = 4, linkage = 'complete', affinity = \"euclidean\").fit(air_normalized) \nh_complete.labels_","9b1bbf64":"# These labels for the clusters so formed are in the array form, which needs to be changed to incorporate into the dataset\n# In order to do so, we use the type casting and change the array to a series which will be easier to incorporate\ncluster_labels = pd.Series(h_complete.labels_)","45158e68":"# We now incorporate the labels into the dataset as a new feature that will fit as per the records\nair['clust'] = cluster_labels","015d7cab":"# In order to check the same we use head function\nair.head()","585f992a":"# We can clearly see that we have the labels in the dataset in the form of a column called \"clust\", symbolizing the clusters","b7633464":"# In order to see the clusters we aggregate the records within the clusters and group them by the clusters to visualize the \n# 4 nos of clear cluster formed\nair.iloc[:, 0:].groupby(air.clust).mean()","a33bcbe0":"After all the analyses we now start with the Heirarchical Clustering procedure which would require us with \nbuilding the dendogram\n\nNow, one of the advantages of hierarchical clustering is that we do not have to specify the number of clusters. \nIn order to determine the optimal number of clusters we plot the dendogram, which is a diagram representation \nof the tree based approach.","1cf65bcd":"Now in order to deal with the outliers we can use one of \"3R Techniques\" viz:\n   1. Rectify\n   2. Retain\n   3. Remove\n\nIn our example we choose let say to keep or retain the data, but how should we keep outliers in the data and work forward?\nWe use the Winsorization techniue!!! This technique helps modify the sample distribution of random variables by \nremoving the outliers and replacing them with the values that constitute the 5th percentile and 95th percentile values,\ni.e, all data below 5th percentile gets replaced with the value of the 5th percentile and all the values above \n95th percentile, with the 95th percentile value.","abe9c297":"Clustering problem 1:\n  Perform clustering for the airlines data to obtain optimum number of clusters. Draw the inferences from the clusters \n  obtained. Refer to EastWestAirlines.xlsx dataset.","c6b3c688":"**We can now clearly see the 4 number of clusters formed, which can be described as under\n\n        1. Cluster1 = \"0\" = Defines the group of fliers that earn the most out of the card and are frequent fliers\n        2. Cluster2 = \"1\" = Defines the group of fliers that earn but are the third most frequent fliers\n        3. Cluster3 = \"2\" = Defines the group of fliers that earn the least and are the least frequent fliers\n        4. Cluster4 = \"3\" = Defines the group of fliers that earn but and are the second most frequent fliers**","8f77317a":"Heirarchical clustering means creating a tree of clusters by iteratively grouping or separating data points. \n  There are two types of hierarchical clustering:\n      Agglomerative clustering\n      Divisive clustering\nWe now apply the Agglomerative clustering technique:Agglomerative clustering is kind of a bottom-up approach. \nEach data point is assumed to be a separate cluster at first. Then the similar clusters are iteratively combined","773faae5":"**HIERARCHICAL CLUSTERING!!**\n\nClustering algorithms are unsupervised machine learning algorithms so there is no label associated with data points.\nClustering algorithms look for similarities or dissimilarities among data points so that similar ones can be grouped together.\n\nHierarchical clustering (also called hierarchical cluster analysis or HCA) is a method of cluster analysis which seeks to\nbuild a hierarchy of clusters. Strategies for hierarchical clustering generally fall into two types:\n\nAgglomerative : This is a \"bottom-up\" approach: each observation starts in its own cluster, and pairs of clusters are merged \n                as one moves up the hierarchy.\nDivisive :      This is a \"top-down\" approach: all observations start in one cluster, and splits are performed recursively as \n                one moves down the hierarchy.","d599a72f":"**Outlier Treatment!!!**\nNow we all know that data can have outliers which are the values that may effect the analysis in a big way. \nIn other words Outliers are the values that differ from the rest of the data.In order to do so we use the Boxplots, wherein \nwe can see the outliers being outshined out of the plot.","82cce85a":"**Data Description:**\nThe file EastWestAirlines contains information on passengers who belong to an airline\u2019s frequent flier program. \nFor each passenger the data include information on their mileage history and on different ways they accrued or \nspent miles in the last year. The goal is to try to identify clusters of passengers that have similar characteristics \nfor the purpose of targeting different segments for different types of mileage offers.\n\nID# --Unique ID\n\nBalance--Number of miles eligible for award travel\n\nQual_mile--Number of miles counted as qualifying for Topflight status\n\ncc1_miles -- Number of miles earned with freq. flyer credit card in the past 12 months:\n\ncc2_miles -- Number of miles earned with Rewards credit card in the past 12 months:\n\ncc3_miles -- Number of miles earned with Small Business credit card in the past 12 months:\n\n1 = under 5,000\n\n2 = 5,000 - 10,000\n\n3 = 10,001 - 25,000\n\n4 = 25,001 - 50,000\n\n5 = over 50,000\n\nBonus_miles--Number of miles earned from non-flight bonus transactions in the past 12 months\n\nBonus_trans--Number of non-flight bonus transactions in the past 12 months\n\nFlight_miles_12mo--Number of flight miles in the past 12 months\n\nFlight_trans_12--Number of flight transactions in the past 12 months\n\nDays_since_enrolled--Number of days since enrolled in flier program\n\nAward?--whether that person had award flight (free flight) or not"}}