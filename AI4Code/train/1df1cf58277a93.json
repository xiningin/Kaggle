{"cell_type":{"e158e40c":"code","15635e52":"code","c46ce2a6":"code","01cc314f":"code","6ebc1675":"code","ce0ebcdb":"code","9b7fc1e6":"markdown","906404be":"markdown","7b270f0c":"markdown"},"source":{"e158e40c":"# Installing dependencies\n!conda install -c conda-forge postal -y","15635e52":"# Address parser using Libpostal\n\nfrom postal.parser import parse_address\nfrom postal.expand import expand_address","c46ce2a6":"import json","01cc314f":"def convert_json(address):\n    new_address = {k: v for (v, k) in address}\n    json_address = json.dumps(new_address, sort_keys=True,ensure_ascii = False, indent=1)\n    return json_address","6ebc1675":"def address_parser(address):\n    \n    # I use first position as default even though sometimes expand address returns more than one\n    # Expand address tries to expand some \n    expanded_address = expand_address( address )[0]\n    parsed_address = parse_address( expanded_address )\n    json_address = convert_json(  parsed_address )\n    \n    return json_address\n    \n#     return convert_json(\n#         parse_address( \n#             expand_address(address)[0] \n#             )\n#         )","ce0ebcdb":"print(address_parser(\"10600 N Tantau Ave\")) # Apple Address","9b7fc1e6":"LibPostal (Pypostal for python) give us as a response a dictionary so. As I want it as a json, I'll convert it with the following function (I prefere with identation).","906404be":"Now, I use parse_address and expand address and return in json format.","7b270f0c":"**LibPostal** is A C library for parsing\/normalizing street addresses around the world. Powered by statistical NLP and open geo data."}}