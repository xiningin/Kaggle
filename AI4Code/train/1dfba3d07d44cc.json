{"cell_type":{"3b7c40d9":"code","e4bebef3":"code","dfc082d4":"code","f7a82cda":"code","f4d5bcc8":"code","8245acf1":"code","637c7db5":"code","41d9bf55":"code","31c98f4b":"code","7942883a":"code","a6f2a66a":"code","3a07b383":"code","5150b47a":"code","de3ba0c1":"code","ede95299":"code","21c451e8":"code","c53f6a94":"code","a481fd0f":"code","9f815b5f":"code","67391985":"code","5c605998":"code","20cb2416":"code","8019b41b":"code","a3a89c5a":"code","7f2bc3f0":"code","fe6d9c21":"code","1b3874cb":"code","beb95364":"code","9e630625":"code","7fa9f4f5":"code","67fd633c":"code","6ab3634f":"code","eca2ca00":"code","b579133b":"code","4b9deb18":"code","651e7419":"code","45bc496b":"code","c688f7ea":"code","53e0cac2":"code","110c73e5":"code","bfb0f77f":"code","9a8db7fc":"code","a8d6c09a":"code","5ac15259":"code","60bce3eb":"code","0159ef05":"code","2f4348d9":"code","a712f4d4":"code","8b16a8ae":"code","5a184b9e":"code","7ca8c7f5":"code","3c1080cb":"code","01292851":"code","ea6b474e":"code","571361a0":"code","e6e51112":"code","ee50ecb8":"code","2b47b7aa":"code","5daa0234":"code","94a9184d":"code","c6235e10":"code","d8c10732":"code","486f9ac1":"code","bb2ef966":"code","a6d98dd3":"code","b34a3d74":"code","710a4f9a":"code","c6dc0eb5":"code","a07d5492":"code","2363cfb3":"code","f203682a":"code","42c07c51":"code","369fcaaa":"code","d2856d90":"code","7046feaf":"code","28581f52":"code","b41427f6":"code","62bbfec9":"code","5bdca832":"code","84c470d2":"code","f61ae030":"code","3294508f":"code","fa93eaf5":"code","e13c5910":"code","64e69c6a":"code","2121c981":"code","2aa48c49":"code","644bce05":"code","cda07a4c":"code","a1dcee0f":"code","edc82522":"code","20919301":"code","82ec786f":"code","6166dd2e":"code","463203d0":"code","40865b55":"code","85094482":"code","449f0bda":"code","7deb334c":"markdown","d35beb94":"markdown","dc25b223":"markdown","99c2647e":"markdown","f5166452":"markdown","7fa616ba":"markdown","3396b0ba":"markdown","5db3b17c":"markdown","587c9609":"markdown","da63c148":"markdown","54bcdcd1":"markdown","5561780a":"markdown","176b1552":"markdown","1aa0504a":"markdown","bfeab41a":"markdown","57eeb24d":"markdown","1e9053d5":"markdown","191337e3":"markdown","bbec64c2":"markdown","e9671f56":"markdown","0af8bf89":"markdown","a790f18c":"markdown","5165c4cf":"markdown","0909aacf":"markdown","86ac8f22":"markdown","b7f64750":"markdown","4e5850ce":"markdown","80821b76":"markdown","0283af10":"markdown","0ae85246":"markdown","80913403":"markdown","52fcf586":"markdown","86f4ee1d":"markdown","34077dae":"markdown","ba0ac135":"markdown","4478491d":"markdown","fb323900":"markdown","47312397":"markdown","cd3d479c":"markdown","0a964c04":"markdown","5c73d00e":"markdown","9a4fcb17":"markdown","2aa47f0c":"markdown"},"source":{"3b7c40d9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\n\nplt.style.use('bmh')","e4bebef3":"import plotly.graph_objs as go\nimport plotly.plotly as py\n\nfrom plotly.offline import init_notebook_mode, iplot\nfrom plotly import tools\ninit_notebook_mode()","dfc082d4":"def annt_bar(ax, ort, fmt='%d'):\n    if ort == 'h':\n        for p in ax.patches:\n            ax.annotate(fmt%p.get_width(), (p.get_width()+ax.get_xlim()[1]*0.02, p.get_y()))\n    elif ort == 'v':\n        for p in ax.patches:\n            ax.annotate(fmt%p.get_height(), (p.get_x(), p.get_height()+ax.get_ylim()[1]*0.02))","f7a82cda":"path = '..\/input\/lending-club-loan-data\/loan.csv'","f4d5bcc8":"with open(path) as handle:\n    lines = sum(1 for l in handle)","8245acf1":"skips = np.sort(np.random.choice((1, lines), size=lines-1-100000))\ndf = pd.read_csv(path, skiprows=skips, low_memory=False)","637c7db5":"df['loan_status'].value_counts().plot(kind='barh')","41d9bf55":"## for convenience, I will just pay attention to the ended loan\ndf = df[~df.loan_status.isin(['Current', 'Issued'])] \ndf.info()","31c98f4b":"df['loan_status'].value_counts().plot(kind='barh')","7942883a":"ok_loan_status = [#\"Current\", \n                  \"Fully Paid\",\n                  #\"In Grace Period\", \n                  \"Does not meet the credit policy. Status:Fully Paid\"]\n\n# NOTE: https:\/\/www.collinsdictionary.com\/dictionary\/english\/grace-period","a6f2a66a":"df['ok_loan'] = (df.loan_status.isin(ok_loan_status)).astype(int)","3a07b383":"loan_year = df.groupby(pd.to_datetime(df.issue_d).dt.year)['ok_loan'].value_counts().unstack()","5150b47a":"data = []\n\n\n# Pie\nasp = 0.3\ncr = 0.038\ndm_a, dm_b = 0.5-cr, 0.5+cr\nstep = dm_a \/ loan_year.shape[0]\n\nfor i, row in enumerate(loan_year.iterrows()):\n    dm = np.array([dm_a-i*step, dm_b+i*step])\n    trace = go.Pie(\n            values = row[1].values,\n            domain = {\"x\": dm*asp, \"y\": dm},\n            labels = [\"Risk Loan\", \"OK Loan\"],\n            hole = 1 - 0.96\/(cr\/step+i),\n            name = str(row[0]),\n            hoverinfo = \"label+percent+name+text\",\n            rotation = 90, \n            textposition = \"inside\",\n            opacity = min(3*row[1].values[0]\/sum(row[1].values), 1.0),\n            marker = dict(colors=['red','lightblue']),\n            showlegend=False\n        )\n    data.append(trace)\n\n    \n# Bar   \ndata.append(go.Bar(x=loan_year.index, \n                   y=loan_year.iloc[:,0], \n                   name='OK Loan', \n                   marker=dict(color='lightblue')))\ndata.append(go.Bar(x=loan_year.index, \n                   y=loan_year.iloc[:,1], \n                   name='Risk Loan', \n                   marker=dict(color='red')))\n\n    \nfig = dict(\n   data=data,\n   layout=dict(title=\"Risk Loan Rate 2007~2018\", \n               xaxis=dict(title='Amount', \n                          domain=[0.35, 1]),\n               yaxis=dict(title='Count'),\n               width=1000, \n               height=400)\n)\n\niplot(fig)","de3ba0c1":"lo = {}\npprm = {}\nlo['hist'] = dict(bargap=0.2, bargroupgap=0.1)\npprm['hist'] = dict(nbinsx=20, opacity=0.85)","ede95299":"tr1 = go.Histogram(x=df[df.ok_loan==1]['loan_amnt'], \n                   name='OK Loan',   \n                   marker=dict(color='lightblue'), \n                   **pprm['hist'])\n\ntr2 = go.Histogram(x=df[df.ok_loan==0]['loan_amnt'], \n                   name='Risk Loan', \n                   marker=dict(color='red'), \n                   **pprm['hist'])\n\nfig = dict(data=[tr1, tr2], layout=dict(title='Loan Amount Loan Status',\n                                        xaxis=dict(title='Amount'),\n                                        yaxis=dict(title='Count'), \n                                        height=300))\niplot(fig)","21c451e8":"tr1 = go.Histogram(x=df[df.ok_loan==1]['loan_amnt'], histnorm='percent', name='OK Loan',   marker=dict(color='lightblue'), **pprm['hist'])\ntr2 = go.Histogram(x=df[df.ok_loan==0]['loan_amnt'], histnorm='percent', name='Risk Loan', marker=dict(color='red'), **pprm['hist'])\n\nfig = dict(data=[tr1, tr2], layout=dict(title='Loan Amount Loan Status (Percent)',\n                                        xaxis=dict(title='Amount'),\n                                        yaxis=dict(title='Count'), \n                                        height=300))\niplot(fig)","c53f6a94":"mths_cols = df.columns[df.columns.str.contains('mths')]\ndf[mths_cols].info()","a481fd0f":"since_cols = ['mths_since_last_delinq', 'mths_since_last_record', 'mths_since_last_major_derog']\ndf[since_cols].plot.kde(xlim=(0, 130), figsize=(15, 3)) # manual xlim ;P","9f815b5f":"fig = tools.make_subplots(rows=3, cols=1, subplot_titles=since_cols)\nfig.layout.update(title='Inspect Months')\n                  \n\nfor i, col in enumerate(since_cols):\n    tr1 = go.Histogram(x=df[df.ok_loan==1][col], name='OK Loan', histnorm='percent', \n                       marker=dict(color='lightblue'), **pprm['hist'])\n    tr2 = go.Histogram(x=df[df.ok_loan==0][col], name='Risk Loan', histnorm='percent', \n                       marker=dict(color='red'), **pprm['hist'])\n    fig.append_trace(tr1, i+1, 1)\n    fig.append_trace(tr2, i+1, 1)\n\niplot(fig)","67391985":"df['last_pymnt_d_from_issue'] = (pd.to_datetime(df.last_pymnt_d) - pd.to_datetime(df.issue_d)).dt.days\ndf['last_credit_pull_d_from_issue'] = (pd.to_datetime(df.last_credit_pull_d) - pd.to_datetime(df.issue_d)).dt.days\ndf['earliest_cr_line_from_issue'] = (pd.to_datetime(df.issue_d) - pd.to_datetime(df.earliest_cr_line)).dt.days ","5c605998":"df.loc[:,df.columns.str.contains('from_issue')].hist(bins=60, figsize=(20, 5));","20cb2416":"def two_fac_sct(x1, x2, t1, t2):\n    trans = [dict(type='groupby', groups=df.ok_loan, text=['Risk Loan', 'OK Loan'],\n              styles=[dict(target=0, value=dict(marker=dict(color='red'))),\n                      dict(target=1, value=dict(marker=dict(color='lightblue')))] )]\n    data = [dict(type='scattergl', mode='markers', x=x1, y=x2,\n             marker=dict(line=dict(width=1), size=6, opacity=0.5),\n             transforms=trans)]\n\n    fig = dict(data=data, layout=dict(xaxis=dict(title=t1), yaxis=dict(title=t2), \n                                      width=800, height=400))\n    iplot(fig, validate=False)","8019b41b":"two_fac_sct(df.last_pymnt_d_from_issue, df.last_pymnt_amnt, \n            'Last Payment from Issue Day (Days)', \n            'Last Payment Amount')\n","a3a89c5a":"fund_col = df.columns[df.columns.str.contains('funded')]","7f2bc3f0":"tr1 = go.Histogram(x=df[fund_col[0]], name=fund_col[0], marker=dict(color='gold'), **pprm['hist'])\ntr2 = go.Histogram(x=df[fund_col[1]], name=fund_col[1], marker=dict(color='purple'), **pprm['hist'])\n\nfig = dict(data=[tr1, tr2], layout=dict(title='Fund Distribution',\n                                        xaxis=dict(title='Amount'),\n                                        yaxis=dict(title='Count'),\n                                        width=600, height=300))\niplot(fig)","fe6d9c21":"two_fac_sct(df.loan_amnt,df.funded_amnt, \n            'Loan Amount', \n            'Funded Amount')","1b3874cb":"part_fund = (df.loan_amnt != df.funded_amnt)\nok_target = df[(df.ok_loan==1)&part_fund]\nrisk_target = df[(df.ok_loan==0)&part_fund]\n\ntr1 = go.Scatter(x=ok_target['loan_amnt'], y=ok_target['funded_amnt'], \n                   mode='markers',\n                   name='OK Loan',\n                   marker=dict(color='lightblue', line=dict(width=1)))\ntr2 = go.Scattergl(x=risk_target['loan_amnt'], y=risk_target['funded_amnt'], \n                   mode='markers',\n                   name='Risk Loan',\n                   marker=dict(color='red', line=dict(width=1)))\n\n\n\nfig = dict(data=[tr1, tr2], layout=dict(xaxis=dict(title='Loan Amount'), yaxis=dict(title='Funded Amount'), \n                                        width=500, height=400))\niplot(fig)","beb95364":"df['zip_code'] = df['zip_code'].apply(lambda x : str(x)[:3]+\"01\") # fuzzy replacement","9e630625":"uszip = pd.read_csv('..\/input\/simplemaps\/uszips.csv', usecols=['zip', 'lat', 'lng', 'city'], dtype={'zip':np.object})\nuszip.rename(columns={'zip':'zip_code'}, inplace=True)","7fa9f4f5":"df = df.merge(uszip, on='zip_code') # Data Loss","67fd633c":"df.info()\ndf['loan_status'].value_counts().plot(kind='barh')","6ab3634f":"\ntarget = df.groupby('city')['lat', 'lng'].mean() \\\n           .join(df.groupby('city')['ok_loan'].value_counts().unstack().fillna(0).astype(int))\n \n\n\ndata = []\nlayout = dict(title='State', width=800, height=800, legend=dict(bgcolor='rgba(0,0,0,0)'))\n\n\n## Left Side\ndata.extend([\n# Risk Loan\n             go.Scattergeo(\n                locationmode = 'USA-states',\n                lon = target.lng+0.1, \n                lat = target.lat, \n                name = 'Risk Loan',\n                mode = 'markers',\n                text = target.index +' '+ target[0].astype(str),\n                marker = dict(size=(target[0]\/80.).apply(lambda x: min(50, max(x, 5))), color='red', symbol='x'),\n                geo = 'geo1'),\n# OK Loan\n             go.Scattergeo(\n                locationmode = 'USA-states', \n                lon = target.lng-0.1, \n                lat = target.lat, \n                name = 'OK Loan',\n                mode = 'markers',\n                text = target.index + ' ' + target[1].astype(str),\n                marker = dict(size=(target[1]\/80.).apply(lambda x: min(50, max(x, 5))), opacity = 0.3, color='skyblue'),\n                geo = 'geo1')\n\n             ])\nlayout['geo1'] = dict(scope='usa', projection=dict(type='albers usa'))\n\n              \n              \n## Right Side\nstate_count = df['addr_state'].value_counts()\nstate_risk_rate = df.groupby('addr_state')[['ok_loan', 'lat', 'lng']].mean()\n    \ndata.extend([go.Choropleth(\n                locations = state_count.index, \n                z = state_count.values.astype(float), \n                name = 'Count',\n                locationmode = 'USA-states',\n                colorscale='Bluered',\n                colorbar = dict(title = \"Loan Issued by State\", len=0.5, y=0.25),\n                geo = 'geo2'),\n             go.Scattergeo(\n                lat = state_risk_rate.lat, \n                lon = state_risk_rate.lng, name='Risk Rate',\n                text = state_risk_rate.ok_loan.apply(lambda x: '{0:.2f}%'.format(x*100)) + state_risk_rate.index,\n                marker = dict(size=np.exp(state_risk_rate.ok_loan*3.5), color='lightgrey'),\n                geo = 'geo2')\n             ])\n\nlayout['geo2'] = dict(scope='usa', projection=dict(type='albers usa'))\n\nlayout['geo1']['domain'] = dict(x=[0, 1], y=[0.5, 1])\nlayout['geo2']['domain'] = dict(x=[0, 1], y=[0, 0.5])           \n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","eca2ca00":"issue_y = pd.to_datetime(df.issue_d).dt.year.rename('issue_y')","b579133b":"df.emp_length.replace({'< 1 year': '0 year', '10+ years': '10 years'}, inplace=True)\ndf.emp_length.fillna('0 year', inplace=True) # !!!\n\ndf.emp_length = df.emp_length.apply(lambda x: x.split()[0]).astype(int)","4b9deb18":"# g = sns.boxplot(data=df, x='emp_length', y='annual_inc', hue='home_ownership', ax=ax1)\nplt.figure(figsize=(20, 3))\nsns.boxplot(data=df, x='emp_length', y='annual_inc', hue='home_ownership');\nplt.gca().set_yscale('log')\nplt.legend(loc=8, ncol=4)","651e7419":"plt.figure(figsize=(20, 4))\nsns.boxplot(data=df, x='emp_length', y='loan_amnt', hue='home_ownership');\nplt.legend(loc=8, ncol=4)","45bc496b":"def stack_show(x_col, val_col, hue_col, r=3, ax=None, bl='zero'):\n    \n    data = df.pivot_table(index=x_col, \n                          values=val_col, \n                          columns=hue_col, \n                          aggfunc=np.mean, \n                          fill_value=0)\n\n    data_r = data.rolling(r).mean()\n    _ax = ax\n    if _ax == None:\n        _, _ax = plt.subplots(1, 1, figsize=(8, 3))\n    _ax.stackplot(data_r.index, data_r.values.T, labels=data_r.columns, alpha=0.6, baseline=bl, colors=sns.color_palette(\"tab20\"));\n    _ax.legend(loc=2)\n    return _ax","c688f7ea":"ax = stack_show(pd.to_datetime(df.issue_d), 'loan_amnt', 'home_ownership')\nax.set_ylabel('Loan Amount');\nax.set_xlabel('Issue Date');","53e0cac2":"_, ax = plt.subplots(1,1, figsize=(10, 3))\nstack_show(pd.to_datetime(df.issue_d), 'loan_amnt', 'purpose', ax=ax, r=3, bl='wiggle')\nax.legend(bbox_to_anchor=(1, 1), loc=2, ncol=1, fontsize=7)\nax.set_ylabel('Loan Amount')","110c73e5":"import matplotlib.gridspec as gridspec\nplt.figure(figsize=(20, 10))\ngs = gridspec.GridSpec(2, 3)\nax1 = plt.subplot(gs[1:,0:])\nax4 = plt.subplot(gs[0, 0])\nax3 = plt.subplot(gs[0, 1])\nax2 = plt.subplot(gs[0, 2])\n\n\ndf.groupby('purpose')['ok_loan'].value_counts().unstack().plot.bar(ax=ax1, width=0.8)\nannt_bar(ax1, 'v')\n    \ndf.groupby('purpose')['ok_loan'].mean().plot.barh(ax=ax2, xlim=(0.5, 1), color='purple', alpha=0.8)\nannt_bar(ax2, 'h', '%.2f')\n    \ndf.groupby('purpose')['loan_amnt'].mean().plot.barh(ax=ax3, color='green', alpha=0.3)\nannt_bar(ax3, 'h', '%.2f')\n\ndf.groupby('purpose').count().id.plot.barh(color='gold', ax=ax4)\nannt_bar(ax4, 'h', '%.2f')\n\n    \nax1.set_title('Count VS Purpose')\nax2.set_title('OK Loan Rate by Purpose ')\nax3.set_title('Loan Amount by Purpose')\nax4.set_title('Count by Purpose')\nplt.tight_layout()","bfb0f77f":"df.initial_list_status.value_counts()","9a8db7fc":"df.groupby('initial_list_status')['ok_loan'].value_counts().unstack().plot.bar(figsize=(5, 2))\n","a8d6c09a":"df.term.value_counts()","5ac15259":"df[df.application_type=='JOINT']['ok_loan'].value_counts()","60bce3eb":"df.grade.value_counts().sort_index().plot('bar', figsize=(5, 2));","0159ef05":"ax = stack_show(pd.to_datetime(df.issue_d), 'loan_amnt', 'grade', r=3)\nax.set_ylabel('Loan Amount');\nax.set_xlabel('Issue Date');","2f4348d9":"ax = stack_show(pd.to_datetime(df.issue_d), 'int_rate', 'grade')\nax.set_ylabel('Interest_Rate');\nax.set_xlabel('Issue Date');","a712f4d4":"sns.lineplot(x=pd.to_datetime(df.issue_d), y='int_rate', hue='grade', data=df)","8b16a8ae":"df[['installment', 'int_rate']].hist(bins=100, figsize=(10, 2));","5a184b9e":"from matplotlib import gridspec\nplt.figure(figsize=(15, 5))\ngs = gridspec.GridSpec(2, 3)\nax1 = plt.subplot(gs[0, 0])\nax2 = plt.subplot(gs[0, 1:])\nax3 = plt.subplot(gs[1, 0:])\n\ncols = ['term', 'grade', 'sub_grade']\nfor col, ax in zip(cols, [ax1, ax2, ax3]):\n    df.groupby(col)['ok_loan'].value_counts().unstack().plot.bar(ax=ax, width=0.9)\n    for p in ax.patches:\n        ax.annotate('%d'%p.get_height(), (p.get_x(), p.get_height()+ax.get_ylim()[1]*0.02), size=7)\n    ax.set_ylabel('count')\nplt.tight_layout()","7ca8c7f5":"df.groupby('ok_loan')['installment'].plot.kde(xlim=(0, df.installment.max()), figsize=(8, 3), legend=True)\nplt.legend(title='OK Loan')\nplt.ylabel('Installment')","3c1080cb":"df.groupby('ok_loan')['int_rate'].plot.kde(figsize=(8, 3), legend=True, xlim=(0, df.int_rate.max()))\nplt.legend(title='OK Loan')\nplt.ylabel('Interest Rate')","01292851":"issue_d = pd.to_datetime(df.issue_d)\n\ndf.groupby([issue_d, df.ok_loan])['int_rate'].mean().unstack().fillna(method='bfill').plot(figsize=(8, 3))\nplt.ylabel('Interest Rate %')","ea6b474e":"issue_y = pd.to_datetime(df.issue_d).dt.year\ndf.groupby([issue_y, df.ok_loan])['int_rate'].mean().unstack().fillna(method='bfill').plot(figsize=(8, 3))\nplt.ylabel('Interest Rate %')","571361a0":"df.groupby([issue_d, df.ok_loan])['installment'].mean().unstack().fillna(method='bfill').plot(figsize=(8, 3))\nplt.ylabel('Installment')","e6e51112":"df.groupby([issue_y, df.ok_loan])['installment'].mean().unstack().fillna(method='bfill').plot(figsize=(8, 3))\nplt.ylabel('Installment')","ee50ecb8":"cols = ['open_acc',\n        'pub_rec', \n        'total_acc']\n\nfig, axes = plt.subplots(3, 1, figsize=(8, 6))\nfor col, ax in zip(cols, axes):\n    df.groupby('ok_loan')[col].plot(kind='kde', ax=ax, xlim=(df[col].min(), df[col].max()))\n    ax.set_title(col)\nplt.tight_layout()","2b47b7aa":"cols = ['revol_bal', 'revol_util']\nfig, axes = plt.subplots(2, 1, figsize=(20, 5))\nfor col, ax in zip(cols, axes):\n    df.groupby('ok_loan')[col].plot(kind='kde', ax=ax, xlim=(df[col].min(), df[col].max()))\n    ax.set_title(col)","5daa0234":"\ndf.groupby('ok_loan')['mths_since_last_delinq'].plot(kind='kde', xlim=(0, 120), alpha=0.4, legend=True)\nplt.title('mths_since_last_delinq')\nplt.legend(title='OK loan')","94a9184d":"display(df.acc_now_delinq.value_counts())\ndf.groupby('acc_now_delinq')['ok_loan'].mean().plot.bar()","c6235e10":"display(df.delinq_2yrs.value_counts())\ndf.groupby('delinq_2yrs')['ok_loan'].mean().plot.bar()","d8c10732":"numr_feat = [\n'loan_amnt',   \n'funded_amnt', \n'funded_amnt_inv',      \n'out_prncp',             \n'out_prncp_inv',   \n'total_pymnt',              \n'total_pymnt_inv',     \n'last_pymnt_amnt',    \n'total_rec_prncp',  \n'total_rec_int',        \n'total_rec_late_fee', \n'recoveries',          \n'collection_recovery_fee',  \n'tot_coll_amt',           \n'tot_cur_bal',         \n'collections_12_mths_ex_med',  \n'total_rev_hi_lim',\n'open_acc',\n'pub_rec', \n'total_acc',\n'int_rate',\n'installment',\n'dti',\n'revol_bal',\n'revol_util',\n'annual_inc',\n'delinq_2yrs',\n'inq_last_6mths',\n'mths_since_last_delinq',\n'acc_now_delinq',\n'lat', # !!!\n'lng'  # !!!\n]","486f9ac1":"plt.figure(figsize=(20, 8))\nsns.heatmap(df[numr_feat].corr(), annot=True, annot_kws=dict(fontsize=8), fmt='.2f')\n","bb2ef966":"missing_count = df.loc[:,df.isna().any()].isna().sum(axis=0)\n\ntr = go.Bar(x = missing_count.index, y = missing_count.values,\n            marker = dict(color = '#02b3e4'))\n\nlayout = go.Layout(title='Missing Data (Not Null Count)', height=300)\n\nfig = go.Figure([tr], layout=layout)\niplot(fig)","a6d98dd3":"data = df.copy()","b34a3d74":"big_miss = [\n'open_acc_6m',                    \n'open_il_12m',                    \n'open_il_24m',                    \n'mths_since_rcnt_il',             \n'total_bal_il',                   \n'il_util',                       \n'open_rv_12m',                    \n'open_rv_24m',                   \n'max_bal_bc',                    \n'all_util',                       \n'annual_inc_joint',               \n'dti_joint',                      \n'verification_status_joint',\n'inq_fi',\n'total_cu_tl',\n'inq_last_12m'\n]\n\nto_drop = ['id', 'member_id', 'url', 'desc', 'pymnt_plan', 'policy_code'] + big_miss","710a4f9a":"data = data.drop(to_drop, axis=1)","c6dc0eb5":"data = data.drop('loan_status', axis=1)","a07d5492":"to_do = ['emp_title', 'title']","2363cfb3":"data = data.drop(to_do, axis=1)","f203682a":"data.info()","42c07c51":"null_d = data.isnull().sum(axis=0)\nnull_d[null_d>0]\/data.shape[0]","369fcaaa":"cols = ['mths_since_last_delinq',           \n        'mths_since_last_record',\n        'mths_since_last_major_derog',\n        'next_pymnt_d',\n        'tot_coll_amt',                     \n        'tot_cur_bal',      \n        'total_rev_hi_lim']\n\n\nfor col in cols:\n    display(data.groupby(data[col].isna())['ok_loan'].mean())\n    \n    \nfig, axes=plt.subplots(3, 1, figsize=(10, 6))\nfor ax, col in zip(axes, ['tot_coll_amt', 'tot_cur_bal', 'total_rev_hi_lim']):\n    data.groupby(data.ok_loan)[col].hist(bins=100, alpha=0.3, ax=ax)","d2856d90":"data['issue_y'] = pd.to_datetime(data.issue_d).dt.year\ndata['issue_m'] = pd.to_datetime(data.issue_d).dt.month\ndata.drop(['issue_d', 'earliest_cr_line', 'last_pymnt_d', 'last_credit_pull_d'], inplace=True, axis=1)","7046feaf":"null_d = data.isnull().sum(axis=0)\nnull_d[null_d>0]\/data.shape[0]","28581f52":"mean_vals = data.select_dtypes('number').mean(axis=0)\ndata[mean_vals.index.values] = data[mean_vals.index.values].fillna(mean_vals)","b41427f6":"data['has_last_pymnt_d'] = data.next_pymnt_d.isna()\ndata.drop(['city', 'next_pymnt_d', 'sub_grade'], axis=1, inplace=True)","62bbfec9":"null_d = data.isnull().sum(axis=0)\nnull_d[null_d>0]\/data.shape[0]","5bdca832":"from sklearn.preprocessing import LabelEncoder\ncols = data.select_dtypes('object').columns\nfor col in cols:\n    data[col] = LabelEncoder().fit_transform(data[col])","84c470d2":"data.info()","f61ae030":"from sklearn.model_selection import train_test_split\ny = data.ok_loan\nX = data.drop('ok_loan', axis=1)\n\nX_tr, X_t, y_tr, y_t = train_test_split(X, y, test_size=0.3)\n","3294508f":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nimport lightgbm as lgb\nfrom sklearn.linear_model import LogisticRegression","fa93eaf5":"from sklearn.metrics import precision_recall_fscore_support, roc_curve, roc_auc_score, confusion_matrix, accuracy_score","e13c5910":"def performance_summary(y_true, y_pred, y_score=None):\n    # compute all the metrics\n    numerics = {}\n    numerics['auc'] = roc_auc_score(y_true, y_pred)\n    numerics['precision'], numerics['recall'], numerics['f1'], _ = precision_recall_fscore_support(y_true, y_pred, average='binary')\n    numerics['acc'] = accuracy_score(y_true, y_pred)\n    \n    basic = pd.DataFrame(numerics, index=[0])\n    cm = confusion_matrix(y_true, y_pred)\n    \n    \n    # vis\n    _, axes = plt.subplots(1, 3, figsize=(12, 3))\n\n    # 1. basic\n    basic.T.plot.barh(xlim=(0, 1), legend=False, ax=axes[0], color=sns.color_palette(palette='plasma'), alpha=0.6)\n    for p in axes[0].patches:\n        axes[0].annotate('%.4f'%p.get_width(), (p.get_width()-0.2, p.get_y()+0.2), color='w')\n    axes[0].set_title('Basic')   \n        \n    # 2.confusion matrix\n    sns.heatmap(cm, annot=cm\/cm.sum(), ax=axes[1], cmap=\"plasma\", square=True, alpha=0.6)\n    axes[1].set_title('Confusion Matrix')\n    \n    \n    # 3. roc\n    try:\n        rc = roc_curve(y_true, y_score, pos_label=1)\n        axes[2].plot(rc[0], rc[1])\n        axes[2].fill_between(rc[0], rc[1], 0, alpha=0.3, color=sns.color_palette(palette='plasma'))\n        axes[2].set_title('AUC = %.2f'%numerics['auc'])\n    except:\n        return\n    ","64e69c6a":"gbc = GradientBoostingClassifier().fit(X_tr, y_tr)\n\ny_p = gbc.predict(X_t)\ny_s = gbc.decision_function(X_t)","2121c981":"performance_summary(y_t, y_p, y_s)","2aa48c49":"impt = pd.Series(gbc.feature_importances_, index=X_tr.columns)\nimpt[impt>0].sort_values(ascending=False)","644bce05":"lgbc = lgb.LGBMClassifier(learning_rate=0.05, n_estimators=20, n_jobs=2)\n","cda07a4c":"lgbc.fit(X_tr, y_tr)\ny_p = lgbc.predict(X_t)","a1dcee0f":"performance_summary(y_t, y_p)","edc82522":"impt = pd.Series(lgbc.feature_importances_, index=X_tr.columns)\nimpt.sort_values(ascending=False)","20919301":"reduced_cols = impt[impt>0].index","82ec786f":"X_tr_rd = X_tr[reduced_cols]\nX_t_rd = X_t[reduced_cols]\n\nX_tr_rd = X_tr_rd.drop('total_rec_prncp', axis=1)\nX_t_rd = X_t_rd.drop('total_rec_prncp', axis=1)","6166dd2e":"gbc = GradientBoostingClassifier().fit(X_tr_rd, y_tr)\n\ny_p = gbc.predict(X_t_rd)\ny_s = gbc.decision_function(X_t_rd)","463203d0":"performance_summary(y_t, y_p, y_s)","40865b55":"lr = LogisticRegression()\nlr.fit(X_tr, y_tr)\ny_p = gbc.predict(X_t)\ny_s = gbc.decision_function(X_t)\nperformance_summary(y_t, y_p, y_s)","85094482":"impt = pd.Series(lr.coef_[0], index=X_tr.columns)\nimpt.sort_values()","449f0bda":"for i in range(5, 0, -1):\n    mini_cols = impt.abs().sort_values(ascending=False).head(i).index\n    X_tr_mini = X_tr[mini_cols]\n    X_t_mini = X_t[mini_cols]\n\n\n    lr.fit(X_tr_mini, y_tr)\n    y_p = lr.predict(X_t_mini)\n    y_s = lr.decision_function(X_t_mini)\n\n    performance_summary(y_t, y_p, y_s)","7deb334c":"### Label Encoder or Get Dummies","d35beb94":"## Sanity Check","dc25b223":"## 3. Loan Info","99c2647e":"### 4.1 open_acc\u2705, pub_rec\u2705, total_acc\u2705","f5166452":"<font color=#02b302>\n    \n## \ud83d\udcd2Note: The lower the last payment amount, the higher the risk","7fa616ba":"### LR","3396b0ba":"<font color=#02b3e4>\n<h1 align=\"center\">  \ud83d\udce6V. Learner <\/h1>","5db3b17c":"<font color=#02b3e4>\n\n<h1 align=\"center\">  \ud83d\udce6III. \u81ea\u7531EDA <\/h1>\n\n---","587c9609":"###  1. 2 Fund \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","da63c148":"<font color=#02b302>\n    \n## \ud83d\udcd2Note: \u5728\u76f4\u65b9\u56fe\u4e0a, \u98ce\u9669\u8d37\u6b3e\u4e2d, \u9ad8\u989d\u8d37\u6b3e\u7684\u6bd4\u4f8b\u4f1a\u7a0d\u9ad8\u4e00\u4e9b\u4e9b","54bcdcd1":"### >>> Result: Now we add three columns : `city`, `lat`, `lng`, But some data loss because intersection is applied to merge the two dataset","5561780a":"### 2.2 purpose \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","176b1552":"####  Interest Rate & Installment by years\n","1aa0504a":"<h1 align=center>\ud83c\udf0f...<\/h1>\n\n### 1.3 State, Zip_Code \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\n\n> fuzzy imply city and lat lon from zipcode","bfeab41a":"### loan amount, employment length, home ownership \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","57eeb24d":"### 3.2 int_rate\u2705, installment\u2705 \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","1e9053d5":"### resampling ...","191337e3":"### next_pymnt_d","bbec64c2":"### 4.3 delinq\n* mths_since_last_delinq\u2705","e9671f56":"## 2. \u7528\u6237\u63cf\u8ff0\u7c7b\u7279\u5f81\n> * verification_status\n* home_ownership \u2705\n* annual_inc \u2705\n* purpose \u2705\n* emp_length \u2705\n* emp_title \n","0af8bf89":"### 1. fill with means","a790f18c":"## 1. \u65f6\u95f4, \u7a7a\u95f4 \ud83d\udcca","5165c4cf":"<h3 align=center> - Issued Year vs. Loan Status -<\/h3>","0909aacf":"<font color=#b30202>\n    \n## \u26a0\ufe0fPurge some greatly missing columns:","86ac8f22":"### Lightgbm","b7f64750":"### 1.1 \"mths\", \"d\"","4e5850ce":"\n<font color=#02b3e4>\n<h1 align=\"center\">  \ud83d\udce6IV. Wraggling <\/h1>\n\n---\n","80821b76":"### scikit learn GBC","0283af10":"<font color=#02b302> \n    \n## Note: \n\n>* \u9664\u4e86\u5730\u57df\u6570\u91cf\u5206\u5e03\u4ee5\u5916, \u6ca1\u6709\u5f88\u663e\u8457\u7684\u5206\u5e03\u7279\u5f81\n* \u7528\u6237\u5c11\u7684\u5730\u65b9, Risk Rate\u4f1a\u9ad8\u4e00\u4e9b\n* \u4eba\u6570\u591a\u8d77\u6765\u540e, Risk Rate \u6709\u4e00\u5b9a\u6536\u655b\u7684\u8d8b\u52bf","0ae85246":"## 5. Other untouched","80913403":"* last_pymnt_amnt \u2705\n* last_pymnt_d \u2705\n* last_credit_pull_d \u2705\n* earliest_cr_line \u2705","52fcf586":"### 2. if has last payment day","86f4ee1d":"## 4. Numerical","34077dae":"### 3.1 Grade, Interest Rate \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","ba0ac135":"### 4.2 revol_bal\u2705, revol_util \u2705","4478491d":"<font color=#02b3e4>\n<h1 align=center> II.  Loan Status <\/h1>","fb323900":"<h3 align=center> - Loan Status & Loan Amount -<\/h3>","47312397":"* term \u2705(36 months, 60 months)\n* grade \u2705, sub_grade <font color=#02b302>  <\/font>\n* interest rate \u2705\n* installment \u2705\n* pymnt_plan \u274c\n* title  <font color=#02b302> TODO: see if there're some interesting title keywords<\/font>\n* initial_list_status \n* policy_code \u274c\n* application_type <font color=#02b302> \u6781\u5c11\u91cf\u8054\u5408\u7533\u8bf7\u4eba, \u5927\u90e8\u5206\u4e3aOK LOAN <\/font>","cd3d479c":"### employment length, home ownership \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","0a964c04":"<font color=#02b302>\n    \n## \ud83d\udcd2Note: Interest Rate seems to be very useful\n> * \u6309\u8d37\u6b3e\u72b6\u6001\u6765\u8bf4, \u98ce\u9669\u72b6\u6001\u7684Interest Rate\u4f1a\u6bd4\u8f83\u9ad8\n> * \u4e0eInterest Rate \u76f8\u5173\u7684\u6709\u8bc4\u7ea7 Grade. \u8bc4\u7ea7\u9ad8\u7684, Interest Rate\u4f1a\u9ad8\u4e00\u4e9b\n> * ","5c73d00e":"### 2.1  issue_y, loan_amnt, home_ownership \ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6\ud83d\udce6","9a4fcb17":"<font color=#10bbff>\n<h1 align=center> I. Overview <\/h1>","2aa47f0c":"* acc_now_delinq\n* delinq_2yrs"}}