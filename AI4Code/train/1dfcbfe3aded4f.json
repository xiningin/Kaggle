{"cell_type":{"25c5c41c":"code","3a8321e3":"code","5a4c8598":"code","9383bef9":"code","2dece157":"code","9a804328":"code","4b8b4664":"code","0b9678b0":"code","aadc4e56":"code","4f20f0f1":"code","159b41f8":"code","06b0d803":"code","0bec9b41":"code","386cae70":"code","6e7cb011":"code","05eace08":"code","8d3f2d65":"code","582a51ec":"code","2a7aaf26":"code","307406f3":"code","9c1a11f0":"code","4af6cffd":"code","245e6554":"code","e8ce3111":"code","9fdc2ee7":"code","fada5fed":"code","37447c6e":"code","6f109640":"code","53c24fd1":"code","f68c4bc3":"code","02cb2f34":"code","524f2606":"code","9e7335d8":"code","d160cc56":"markdown","b7e7a8a5":"markdown","dfa1dff3":"markdown","707ec8f4":"markdown","3222c8c6":"markdown","b6c87e09":"markdown","35d18c66":"markdown","18637347":"markdown","a3805cbc":"markdown","4681bff3":"markdown","30f17605":"markdown","bec0a2b9":"markdown","e9fbc83c":"markdown","9a01b31b":"markdown","a7952f16":"markdown","5d2a0934":"markdown","d37e8c40":"markdown","66e6e6bd":"markdown","3c09c41f":"markdown","346ce286":"markdown","0afb4e4c":"markdown","1ce487ce":"markdown","72e4d3a5":"markdown","5d272e08":"markdown","eec81029":"markdown","66b5c709":"markdown","02c5b264":"markdown","8f566f45":"markdown","15167e50":"markdown","88ff8c3b":"markdown","011777ff":"markdown","f9984608":"markdown","0cd1830e":"markdown","92d891d3":"markdown","7f03c95f":"markdown"},"source":{"25c5c41c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a8321e3":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n","5a4c8598":"heartdf = pd.read_csv('..\/input\/heart-disease-dataset\/Heart Disease Dataset.csv')\nheartdf.head()","9383bef9":"heartdf.shape","2dece157":"heartdf.info()","9a804328":"heartdf.isnull().sum()","4b8b4664":"heartdf.describe()","0b9678b0":"heartdf.columns","aadc4e56":"num_cols = list(heartdf.columns[0:len(heartdf.columns)-1])\nnum_cols.remove('sex')","4f20f0f1":"plt.figure(figsize=(30,15))\nfor i in enumerate(num_cols):\n    plt.subplot(3,4,i[0]+1)\n    ax = sns.boxplot(heartdf[i[1]])\n    ax.set_xlabel(i[1],fontsize=20)\n\nplt.tight_layout()\nplt.show()","159b41f8":"heartdf.nunique(axis=0)","06b0d803":"fig = plt.figure(figsize = (25, 8))\n\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor i in heartdf[\"target\"].unique():\n    # extract the data\n    x = heartdf[heartdf[\"target\"] == i][\"chol\"]\n    # plot the data using seaborn\n    plt.subplot(1,4,1)\n    sns.kdeplot(x, shade=True, label = \"{} target\".format(i))\n\n# set the title of the plot\nplt.title(\"Density Plot of chol by target\")\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor i in heartdf[\"target\"].unique():\n    # extract the data\n    x = heartdf[heartdf[\"target\"] == i][\"trestbps\"]\n    # plot the data using seaborn\n    plt.subplot(1,4,2)\n    sns.kdeplot(x, shade=True, label = \"{} target\".format(i))\n\n# set the title of the plot\nplt.title(\"Density Plot of trestbps by target\")\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor i in heartdf[\"target\"].unique():\n    # extract the data\n    x = heartdf[heartdf[\"target\"] == i][\"thalach\"]\n    # plot the data using seaborn\n    plt.subplot(1,4,3)\n    sns.kdeplot(x, shade=True, label = \"{} target\".format(i))\n\n# set the title of the plot\nplt.title(\"Density Plot of thalach by target\")\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data\n# the idea is to iterate over each class\n# extract their data ad plot a sepate density plot\nfor i in heartdf[\"target\"].unique():\n    # extract the data\n    x = heartdf[heartdf[\"target\"] == i][\"oldpeak\"]\n    # plot the data using seaborn\n    plt.subplot(1,4,4)\n    sns.kdeplot(x, shade=True, label = \"{} target\".format(i))\n\n# set the title of the plot\nplt.title(\"Density Plot of oldpeak by target\")\n\nplt.tight_layout()\nplt.show()","0bec9b41":"## plot the data based on different target to show the ditribution of chol and trestbps as per different sex\n\nplt.figure(figsize=(25,8),dpi=80)\nplt.subplot(1,2,1)\nax = sns.violinplot(x = \"sex\", y = \"chol\", hue = \"target\", split = True, data = heartdf)\nax.set_title('Distribution of chol for different target by sex', fontsize = 15)\n\nplt.subplot(1,2,2)\nay = sns.violinplot(x = \"sex\", y = \"trestbps\", hue = \"target\", split = True, data = heartdf)\nay.set_title('Distribution of trestbps for different target by sex', fontsize = 15)\n\nplt.tight_layout()\nplt.show()","386cae70":"## plot the data based on different target to show the ditribution of thalach and oldpeak as per different sex\n\n\nplt.figure(figsize=(25,8),dpi=80)\nplt.subplot(1,2,1)\nax = sns.violinplot(x = \"sex\", y = \"thalach\", hue = \"target\", split = True, data = heartdf)\nax.set_title('Distribution of thalach for different target by sex', fontsize = 15)\n\nplt.subplot(1,2,2)\nay = sns.violinplot(x = \"sex\", y = \"oldpeak\", hue = \"target\", split = True, data = heartdf)\nay.set_title('Distribution of oldpeak for different target by sex', fontsize = 15)\n\nplt.tight_layout()\nplt.show()","6e7cb011":"cat_cols = ['sex','cp','fbs','restecg','exang','slope','ca','thal']","05eace08":"heart_des = heartdf[heartdf['target']==1]\nheart_notdes = heartdf[heartdf['target']==0]","8d3f2d65":"plt.figure(figsize=(30,15))\nfor i in enumerate(cat_cols):\n    plt.subplot(2,4,i[0]+1)\n    ax = heart_des[i[1]].value_counts(normalize=True).plot.barh()\n    ax.set_title(\"Deceased showing by \"+i[1],fontsize=15)\nplt.show()","582a51ec":"plt.figure(figsize=(30,15))\nfor i in enumerate(cat_cols):\n    plt.subplot(2,4,i[0]+1)\n    ax = heart_notdes[i[1]].value_counts(normalize=True).plot.barh()\n    ax.set_title(\"Not deceased showing by \"+i[1],fontsize=15)\nplt.show()","2a7aaf26":"df_train,df_test = train_test_split(heartdf,train_size=0.7,random_state=50)","307406f3":"y_train = df_train.pop('target')\nX_train = df_train","9c1a11f0":"y_test = df_test.pop('target')\nX_test = df_test","4af6cffd":"## creat function for check train and test set\ndef check_model(dt):\n    print(\"train confusion matrix : \",confusion_matrix(y_train,dt.predict(X_train)))\n    print(\"train accuracy score : \",accuracy_score(y_train,dt.predict(X_train)))\n    print(\"__\"*50)\n    print(\"test confusion matrix : \",confusion_matrix(y_test,dt.predict(X_test)))\n    print(\"test accuracy score : \",accuracy_score(y_test,dt.predict(X_test)))    \n    ","245e6554":"dt_default = DecisionTreeClassifier(random_state=0)\ndt_res = dt_default.fit(X_train,y_train)","e8ce3111":"check_model(dt_res)","9fdc2ee7":"## create function to visualize graphs\n\ndef tree_graph(dt):\n\n    fig = plt.figure(figsize=(25,20))\n\n    dt_plot = tree.plot_tree(dt,feature_names=X_train.columns,class_names=['Not Deceased','Deceased'],filled=True)","fada5fed":"tree_graph(dt_res)","37447c6e":"params = {'max_depth':[2,3,4,5,6,7,8,9,10],\n          'min_samples_split':[5,10,25,50,75,100,150]}","6f109640":"grid_search = GridSearchCV(estimator=dt_default,param_grid=params,scoring='accuracy',n_jobs=-1,verbose=1) ## create grid search object","53c24fd1":"grid_search.fit(X_train,y_train)","f68c4bc3":"grid_search.best_estimator_","02cb2f34":"best_dt = grid_search.best_estimator_","524f2606":"check_model(best_dt)","9e7335d8":"tree_graph(best_dt)","d160cc56":"check statistical description of data","b7e7a8a5":"choseing the best estimator from our estimators","dfa1dff3":"Import libraries","707ec8f4":"# Data Inspection","3222c8c6":"# Model Building","b6c87e09":"# Context and Variable Details","35d18c66":"# Hyper parameter Tuning using Grid Search ","18637347":"check our default model","a3805cbc":"divided x an y of test data","4681bff3":"check for unique values in every variable","30f17605":"check graph of our default model","bec0a2b9":"plot distribution of every unique value of categorical columns for those who have deceased","e9fbc83c":"divided x and y of train data","9a01b31b":"**comments:**\n* Males are more deceased than females\n* Deceased having higher cp\n* Deceased having lower fbs\n* Maximum deceased having restecg as 1\n* Deceased having lower exang\n* Deceased having higher slope\n* Deceased having lower ca\n* Deceased having higher thal","a7952f16":"plot numerical variables","5d2a0934":"created list of numerical variables","d37e8c40":"**GRID SEARCH**\n\nGrid search is the process of performing hyper parameter tuning in order to determine the optimal values for a given model. This is significant as the performance of the entire model is based on the hyper parameter values specified.\n\nFor more information check the following link : https:\/\/medium.com\/datadriveninvestor\/an-introduction-to-grid-search-ff57adcc0998","66e6e6bd":"check info","3c09c41f":"# Final Model","346ce286":"# EDA","0afb4e4c":"Null value check","1ce487ce":"plot distribution of numerical variables divided by targets","72e4d3a5":"Read data","5d272e08":"No null values in the dataframe","eec81029":"plotting of our best model","66b5c709":"check name of all variables","02c5b264":"**comments:**\n* Males are more not deceased than males\n* not Deceased having lower cp\n* not Deceased having lower fbs\n* not deceased having lower restecg \n* not Deceased having higher exang\n* not Deceased having higher slope\n* maximum not Deceased having ca as 1\n* not Deceased having higher thal","8f566f45":"created different dataframe for deceased and not deceased","15167e50":"check shape of data","88ff8c3b":"divided train and test set","011777ff":"created list of categorical variables","f9984608":"This data set dates from 1988 and consists of four databases: Cleveland, Hungary, Switzerland, and Long Beach V. It contains 76 attributes, including the predicted attribute, but all published experiments refer to using a subset of 14 of them. The \"target\" field refers to the presence of heart disease in the patient. It is integer valued 0 = no disease and 1 = disease.\n\n* age\n* sex\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by flourosopy\n* thal: 0 = normal; 1 = fixed defect; 2 = reversable defect\n* The names and social security numbers of the patients were recently removed from the database, replaced with dummy values.\n\n**Our Goal is to predict wheather a person is diseased or not**","0cd1830e":"**comments**\n\n* Maximum number of patience those who have heart disease have chol around 200-300\n* Maximum number of patience those who don't have heart disease have chol kind of same\n* Maximum number of patience those who have heart disease have trestbps around 120-140\n* Maximum number of patience those who don't have heart disease have trestbps kind of same\n* Those who have heart disease have more thalach\n* Those who don't have heart disease have more oldpeak\n* Diseased females have more chol\n* Maximum diseased male have lower chol\n* Not diseased females have more trestbps rather than male\n* Diseased males have slightly more thalach than females\n* Diseased males and females have less oldpeak rather than females\n","92d891d3":"plot distribution of every unique value of categorical columns for those who have deceased","7f03c95f":"check the best model with test data"}}