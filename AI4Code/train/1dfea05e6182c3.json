{"cell_type":{"0c99e092":"code","aa4412f7":"code","337bf76e":"code","70b0c336":"code","7437c463":"code","f9571b4b":"code","f5a97619":"code","09b70531":"code","dae6ff07":"code","62f92d24":"code","bc55516d":"code","28b32a89":"code","1f537ec9":"code","d212bf66":"code","8393a009":"code","5aaae8b8":"markdown","68440809":"markdown","c1c692c8":"markdown","06e33b24":"markdown","c38a94e2":"markdown","10bba48b":"markdown","e6d32043":"markdown","8d8911dd":"markdown","ee554fa4":"markdown","69cfaf14":"markdown","6abe3a59":"markdown","b5df27c2":"markdown","bc8e65ba":"markdown","fb843c81":"markdown","b59bda49":"markdown","38770ca7":"markdown"},"source":{"0c99e092":"import numpy as np\nimport pandas as pd\nfrom math import pi\nimport gc\n\nfrom IPython.core.display import HTML\n\nfrom bokeh.plotting import figure, output_notebook, show\nfrom bokeh.models import ColumnDataSource, CDSView, GroupFilter, BooleanFilter, CustomJS, Slider, Select, Panel, Tabs, HoverTool, Legend, FactorRange\nfrom bokeh.layouts import row, column, grid, gridplot, layout\nfrom bokeh.io import curdoc\nfrom bokeh.themes import Theme\nfrom bokeh.palettes import Category10, Bokeh\nfrom bokeh.transform import factor_cmap\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', 300)\npd.set_option(\"display.max_rows\", 20)","aa4412f7":"output_notebook()","337bf76e":"# Let's define some common style settings for bokeh graphs\ntools = ['pan', 'box_select', 'lasso_select', 'box_zoom',  'reset']\n\ncurdoc().theme = Theme(json={'attrs': {\n\n    # Figure properties\n    'Figure': {\n        'min_border_left': 20,\n        'min_border_right': 20,\n        'background_fill_color': '#E6F1FC'\n    },\n    # Axis properties\n    'Axis': {\n        'minor_tick_out': None,\n        'minor_tick_in': None,\n        'major_tick_out': None,\n        'major_tick_in': None,\n        'axis_line_color':None\n    },\n    # Grid properties\n    'Grid': {\n        'grid_line_color': '#FFFFFF'       \n    },\n    # Title properties\n    'Title': {\n        'text_font_size' : '16px',\n        'text_font_style' : 'normal',\n        'align' : 'center'\n    },\n    # Legend properties\n    'Legend': {\n        'background_fill_alpha': 0.8,\n        'location': 'top_left',\n        'label_text_font_size' : '10px'\n    }\n}})","70b0c336":"df = pd.read_csv('..\/input\/daily-temperature-of-major-cities\/city_temperature.csv')\nprint(df.shape)\ndf.head()","7437c463":"#\u0421ommon functions for exploratory data analysis\ndef get_stats(df):\n    \"\"\"\n    Function returns a dataframe with the following stats for each column of df dataframe:\n    - Unique_values\n    - Percentage of missing values\n    - Percentage of zero values\n    - Percentage of values in the biggest category\n    - data type\n    \"\"\"\n    stats = []\n    for col in df.columns:\n        if df[col].dtype not in ['object', 'str', 'datetime64[ns]']:\n            zero_cnt = df[df[col] == 0][col].count() * 100 \/ df.shape[0]\n        else:\n            zero_cnt = 0\n\n        stats.append((col, df[col].nunique(),\n                      df[col].isnull().sum() * 100 \/ df.shape[0],\n                      zero_cnt,\n                      df[col].value_counts(normalize=True, dropna=False).values[0] * 100,\n                      df[col].dtype))\n\n    df_stats = pd.DataFrame(stats, columns=['Feature', 'Unique_values',\n                                            'Percentage of missing values',\n                                            'Percentage of zero values',\n                                            'Percentage of values in the biggest category',\n                                            'type'])\n\n    del stats\n    gc.collect()\n\n    return df_stats","f9571b4b":"get_stats(df)","f5a97619":"# First of all, we drop State column which is irrelevant for our analysis.\ndel df['State']\n\n# We also change data types of several columns to optimize memory storage.\ndf['Month'] = df['Month'].astype('int8')\ndf['Day'] = df['Day'].astype('int8')\ndf['Year'] = df['Year'].astype('int16')\ndf['AvgTemperature'] = df['AvgTemperature'].astype('float16')\n\n# There are several rows with Day=0. We are going to drop such rows.\nprint(f\"There are {df[df['Day']==0].Day.count()} rows with Day=0\")\ndf[df['Day']==0].head()\n\n# Looking at data distribution across years, there are several obvious outliers: years 200,201 and 2020.\n# Years 200 and 201 must be typos whereas year 2020 does not keep data for the whole year.\n# We will drop all rows, belonging to these years. Also we will drop more than 20 thousand duplicate rows.\ndf = df[df['Day']!=0]\ndf = df[~df['Year'].isin([200,201,2020])]\ndf = df.drop_duplicates()\n\n# 2.7% rows in the dataset have AvgTemperature value of -99. Let's look at distibution of AvgTemperature=-99 across regions.\n# Most likely, value of -99 was used used to fill missing temperature values. We are going to drop all such rows.\n# Also, for the sake of simplicity, we will drop all \"incomplete years\" - in case number of observations per country & year is less than 270 days, we eliminate this year as an incomplete yearly snapshot.\ndf = df[df['AvgTemperature']!=-99]\ndf['days_in_year']=df.groupby(['Country','Year'])['Day'].transform('size')\ndf=df[df['days_in_year']>270]\n\n# Here we create column Date and convert AvgTemperature to Celsius scale.\ndf['Date'] = pd.to_datetime(df[['Year','Month', 'Day']])\ndf['AvgTemperature'] = (df['AvgTemperature'] -32)*(5\/9)\n\n# Also we need to fix some discrepancies in country names\ncode_dict = {'Czech Republic':'Czechia','Equador':'Ecuador', 'Ivory Coast':\"C\u00f4te d'Ivoire\",'Myanmar (Burma)':'Myanmar','Serbia-Montenegro':'Serbia', 'The Netherlands':'Netherlands'}\ndf['Country'].replace(code_dict, inplace=True)","09b70531":"print(f\"Final data set shape: {df.shape}\")","dae6ff07":"# several mappings for seasonality charts\nmonth_dict = {1:\"January\", 2:\"February\", 3:\"March\", 4:\"April\", 5:\"May\", 6:\"June\" ,7:\"July\", 8:\"August\", 9:\"September\", 10:\"October\", 11:\"November\", 12:\"December\"}\nseason_dict = {1:\"Winter\", 2:\"Spring\", 3:\"Summer\", 4:\"Autumn\"}\nseason_month_map = {1:1, 2:1, 3:2, 4:2, 5:2, 6:3, 7:3, 8:3, 9:4, 10:4, 11:4, 12:1}\nseasons = [\"Winter\", \"Spring\", \"Summer\", \"Autumn\"]\n\n\n# temperature stats, grouped by region and year \ndfr = (\n       df.groupby(['Year','Region'])['AvgTemperature'].agg(['mean','min','idxmin','max','idxmax']).reset_index()\n      .merge(df[['Country','City','Date']], left_on='idxmin',right_index=True)\n      .merge(df[['Country','City','Date']], left_on='idxmax',right_index=True,suffixes=('_min','_max'))\n      )\n\n# average temperature, smoothed with exponential weighted average.\ndfr['mean_smoothed'] = dfr.groupby(['Region'])['mean'].transform(lambda x: x.ewm(span=3).mean()).fillna(dfr['mean'])\n\nregions = dfr['Region'].sort_values().unique().tolist()\nregions_reverse = dfr['Region'].sort_values(ascending=False).unique().tolist()\n\n# Temperature rise per region through the entire period, using exponentially smoothed average temperature\ndfrs = dfr.groupby('Region')['mean_smoothed'].agg(['first','last']).reset_index()\ndfrs['Temp_delta'] = dfrs['last'] - dfrs['first']\ndfrs.columns=['Region','Start year temp','End year temp', 'Delta_temp']\n\n\n# temperature stats, grouped by year, month, region and country \ndfmc = (\n       df.groupby(['Year','Month','Region','Country'])['AvgTemperature'].agg(['mean'])\n      .reset_index()\n      .rename(columns={'mean': 'AvgTemperature','Month': 'Month_num'})\n      .sort_values(by=['Year','Month_num','Region','Country'])\n      )\n\ndfmc['Season_num'] = dfmc['Month_num'].map(season_month_map)\ndfmc['Season'] = dfmc['Season_num'].map(season_dict)\ndfmc['Month'] = dfmc['Month_num'].map(month_dict)\n\n# temperature stats, grouped by year, season, month and region \ndfmr = (\n       dfmc.groupby(['Year','Season_num','Season','Month_num','Month','Region'])['AvgTemperature'].agg(['mean'])\n      .reset_index()\n      .rename(columns={'mean': 'AvgTemperature'})\n      .sort_values(by=['Year','Month_num','Region'])\n      )\n\n# temperature stats, grouped by month and region \ndfmr_g = (\n       dfmr.groupby(['Region','Month_num','Month'])['AvgTemperature'].agg(['mean'])\n      .reset_index()\n      .rename(columns={'mean': 'AvgTemperature'})\n      .sort_values(by=['Region','Month_num'])\n      )\n\nmonths = dfmr_g[['Month','Month_num']].sort_values(by='Month_num')['Month'].unique().tolist()\n\n# temperature stats, grouped by year, season and region \ndfsr = (\n       dfmc.groupby(['Year','Season_num','Season','Region'])['AvgTemperature'].agg(['mean'])\n      .reset_index()\n      .rename(columns={'mean': 'AvgTemperature'})\n      .sort_values(by=['Year','Season_num','Region'])\n      )","62f92d24":"plot_height = 420\nplot_width = 400\n\n#General tab\npalette = Bokeh[len(dfr['Region'].unique())]\n\nsource_dfrs = ColumnDataSource(data=dfrs)\n\n# Temperature rise per region\np_rise = figure(\n                 plot_width=plot_width\n                ,plot_height=plot_height\n                ,tools=tools\n                ,y_range=FactorRange(factors=regions_reverse)\n                ,title='Temperature rise per region, \u00b0C'\n                ,tooltips = [('Region','@Region'), ('Temperature rise', '@Delta_temp')])\np_rise.hbar(\n             y='Region'\n            ,height=0.5\n            ,left=0\n            ,right='Delta_temp'\n            ,line_color=None\n            ,fill_color=factor_cmap('Region', palette=Bokeh[len(regions)], factors=regions)\n            ,source=source_dfrs)\n\n# Temperature trend per region\np_trend = figure(\n                  plot_width=plot_width\n                 ,plot_height=plot_height\n                 ,tools=tools\n                 ,title='Temperature trend per region, \u00b0C')\np_trend.add_layout(Legend(), 'right')\n\nfor region, color in zip(regions,palette):\n    source_dfr_line = ColumnDataSource(data=dfr[dfr['Region']==region])\n    p_trend.line(\n                  x='Year'\n                 ,y='mean_smoothed'\n                 ,line_width=2\n                 ,line_color=color\n                 ,source=source_dfr_line)\n    \np_trend.legend.click_policy='hide'\nhover = HoverTool(tooltips = [('Region','@Region'), ('Year','@Year'), ('AvgTemperature', '@mean_smoothed')])\np_trend.add_tools(hover)\n\ntab_general = Panel(child=row(p_rise, p_trend), title='General')","bc55516d":"# Regional and seasonal tabs\nsource_dfmr = ColumnDataSource(data=dfmr_g)\nsource_dfsr = ColumnDataSource(data=dfsr)\n\ntabs = []\n\n# create a tab for each region\nfor region in regions:\n    \n    # Average temperature per month\n    region_view = CDSView(source=source_dfmr, filters=[GroupFilter(column_name='Region', group=region)])\n    p_region_month = figure(\n                             plot_width=plot_width\n                            ,plot_height=plot_height\n                            ,tools=tools\n                            ,x_range=FactorRange(factors=months)\n                            ,title='Average temperature per month, \u00b0C'\n                            ,tooltips = [('Region','@Region'), ('Month','@Month'), ('AvgTemperature', '@AvgTemperature')])\n    p_region_month.vbar(\n                         x='Month'\n                        ,bottom=0\n                        ,top='AvgTemperature'\n                        ,width = 0.8\n                        ,line_color=None\n                        ,fill_color=factor_cmap('Region', palette=Bokeh[len(regions)], factors=regions)\n                        ,source=source_dfmr\n                        ,view=region_view)\n    p_region_month.xaxis.major_label_orientation = -pi\/4\n    \n    # in each regional tab create 4 seasonal tabs (winter, spring, summer, autumn)\n    season_tabs = []\n    for season in seasons:\n            season_view = CDSView(source=source_dfsr, filters=[GroupFilter(column_name='Region', group=region), GroupFilter(column_name='Season', group=season)])\n            p_season = figure(\n                             plot_width=plot_width\n                            ,plot_height=plot_height-70\n                            ,y_range=p_region_month.y_range\n                            ,tools=tools\n                            ,title='Seasonal temperature dynamics, \u00b0C'\n                            ,tooltips = [('Region','@Region'), ('Season','@Season'), ('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\n            p_season.vbar(\n                                 x='Year'\n                                ,bottom=0\n                                ,top='AvgTemperature'\n                                ,width = 1.0\n                                ,line_color='#FFFFFF'\n                                ,fill_color=factor_cmap('Season', palette=['#40E0D0','#00FF7F','#FF6347','#FFA500'], factors=seasons)\n                                ,fill_alpha=0.6\n                                ,source=source_dfsr\n                                ,view=season_view)\n            season_tabs.append(Panel(child=p_season, title=season))\n\n    tabs.append(Panel(child=row(p_region_month, Tabs(tabs=season_tabs)), title=region))","28b32a89":"# Final dashboard that combines General and all regional tabs\ng = gridplot([[Tabs(tabs=[tab_general]+tabs)]])\nshow(g)","1f537ec9":"# add new \"period\" dimension: 1995-2014 (first 15 years) and 2015-2019 (last 5 years) \ndfmc['Period'] = '1995-2014'\ndfmc['Period'].loc[dfmc['Year']>2014] = '2015-2019'\n\ndfyc = dfmc.groupby(['Country','Year'])['AvgTemperature'].mean().reset_index()\ndfycs = dfmc.groupby(['Country','Year','Season_num','Season'])['AvgTemperature'].mean().reset_index()","d212bf66":"def f(x, period):\n    array_hist, edges = np.histogram(x,density=True, bins=25)\n    return pd.DataFrame({'period':period, 'array_hist':array_hist,'left':edges[:-1], 'right':edges[1:]})\n\ndfyc_bk = dfyc.groupby('Country', sort = False)['Year', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\n\ndfyc_winter_bk = dfycs[dfycs['Season']=='Winter'].groupby('Country', sort = False)['Year', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\ndfyc_spring_bk = dfycs[dfycs['Season']=='Spring'].groupby('Country', sort = False)['Year', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\ndfyc_summer_bk = dfycs[dfycs['Season']=='Summer'].groupby('Country', sort = False)['Year', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\ndfyc_autumn_bk = dfycs[dfycs['Season']=='Autumn'].groupby('Country', sort = False)['Year', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\n\ndfmc_bk = dfmc.groupby('Country', sort = False)['Period', 'AvgTemperature'].apply(lambda x: x.to_dict(orient = 'list'))\n\ndfmc_period1_bk = dfmc[dfmc['Period']=='1995-2014'].groupby('Country', sort = False)['AvgTemperature'].apply(lambda x: f(x,'1995-2014')).groupby(level=0).apply(lambda x: x.to_dict(orient = 'list'))\ndfmc_period2_bk = dfmc[dfmc['Period']=='2015-2019'].groupby('Country', sort = False)['AvgTemperature'].apply(lambda x: f(x,'2015-2019')).groupby(level=0).apply(lambda x: x.to_dict(orient = 'list'))\n\ncountries = dfmc['Country'].sort_values().unique().tolist()  ","8393a009":"source_gen = ColumnDataSource(data=dfyc_bk[countries[0]])\nsource_winter = ColumnDataSource(data=dfyc_winter_bk[countries[0]])\nsource_spring = ColumnDataSource(data=dfyc_spring_bk[countries[0]])\nsource_summer = ColumnDataSource(data=dfyc_summer_bk[countries[0]])\nsource_autumn = ColumnDataSource(data=dfyc_autumn_bk[countries[0]])\nsource_period1 = ColumnDataSource(data=dfmc_period1_bk[countries[0]])\nsource_period2 = ColumnDataSource(data=dfmc_period2_bk[countries[0]])\n\nselect = Select(value=countries[0], options=countries, width=200)\ncallback = CustomJS(\n             args=dict(source_gen=source_gen, s_gen=dfyc_bk.to_dict(),\n                              source_winter=source_winter, s_winter=dfyc_winter_bk.to_dict(),\n                              source_spring=source_spring, s_spring=dfyc_spring_bk.to_dict(),\n                              source_summer=source_summer, s_summer=dfyc_summer_bk.to_dict(),\n                              source_autumn=source_autumn, s_autumn=dfyc_autumn_bk.to_dict(),\n                              source_period1=source_period1, s_period1=dfmc_period1_bk.to_dict(),\n                              source_period2=source_period2, s_period2=dfmc_period2_bk.to_dict()),\n            code=\"\"\"\n                 source_gen.data = s_gen[cb_obj.value];\n                 source_winter.data = s_winter[cb_obj.value];\n                 source_spring.data = s_spring[cb_obj.value];\n                 source_summer.data = s_summer[cb_obj.value];\n                 source_autumn.data = s_autumn[cb_obj.value];\n                 source_period1.data = s_period1[cb_obj.value];\n                 source_period2.data = s_period2[cb_obj.value];\n                 source_gen.change.emit();\n                 source_winter.change.emit();\n                 source_spring.change.emit();\n                 source_summer.change.emit();\n                 source_autumn.change.emit();\n                 source_period1.change.emit();\n                 source_period2.change.emit();\n\"\"\")\n\nselect.js_on_change('value', callback)\n\nplot_width = 800\n\n# Average temperature dynamics on country level\np_gen = figure(plot_width=plot_width, plot_height=150, tools=tools, title='Average temperature dynamics on country level (1995-2019)')\np_gen.line(x='Year', y='AvgTemperature', line_width=4, source=source_gen, line_dash='dashdot', line_color='#00CC96')\nhover = HoverTool(tooltips = [('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\np_gen.add_tools(hover)\n\n# Seasonal tabs\np_winter = figure(tools=tools, plot_width=plot_width, plot_height=150, x_range=p_gen.x_range)\np_winter.line(x='Year', y='AvgTemperature', line_width=2, source=source_winter, line_color='blue')\nhover = HoverTool(tooltips = [('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\np_winter.add_tools(hover)\ntab_winter = Panel(child=p_winter, title='Winter')\n\np_spring = figure(tools=tools, plot_width=plot_width, plot_height=150, x_range=p_gen.x_range)\np_spring.line(x='Year', y='AvgTemperature', line_width=2, source=source_spring, line_color='green')\nhover = HoverTool(tooltips = [('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\np_spring.add_tools(hover)\ntab_spring = Panel(child=p_spring, title='Spring')\n\np_summer = figure(tools=tools, plot_width=plot_width, plot_height=150, x_range=p_gen.x_range)\np_summer.line(x='Year', y='AvgTemperature', line_width=2, source=source_summer, line_color='red')\nhover = HoverTool(tooltips = [('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\np_summer.add_tools(hover)\ntab_summer = Panel(child=p_summer, title='Summer')\n\np_autumn = figure(tools=tools, plot_width=plot_width, plot_height=150, x_range=p_gen.x_range)\np_autumn.line(x='Year', y='AvgTemperature', line_width=2, source=source_autumn, line_color='orange')\nhover = HoverTool(tooltips = [('Year','@Year'), ('AvgTemperature', '@AvgTemperature')])\np_autumn.add_tools(hover)\ntab_autumn = Panel(child=p_autumn, title='Autumn')\n\n# Temperature distribution dynamics\np_dist = figure(plot_width=plot_width, plot_height=200, tools=tools, title='Temperature distribution dynamics: (1995-2014) vs (2015-2019)')\np_dist.quad(bottom=0, top='array_hist', left='left', right='right', source=source_period1,\n            fill_color='blue', fill_alpha = 0.4, line_alpha=0, hover_fill_alpha = 1.0, hover_fill_color = 'blue', legend_label='1995-2014')\np_dist.quad(bottom=0, top='array_hist', left='left', right='right', source=source_period2,\n            fill_color='red', fill_alpha = 0.4, line_alpha=0, hover_fill_alpha = 1.0, hover_fill_color = 'red', legend_label='2015-2019')\nhover = HoverTool(tooltips = [('Period','@period'), ('AvgTemperature', '@left-@right'), ('count', '@array_hist{0.000}')])\np_dist.add_tools(hover)\n\ng = gridplot([[select],[p_gen],[Tabs(tabs=[tab_winter, tab_spring, tab_summer, tab_autumn])],[p_dist]])\nshow(g)","5aaae8b8":"*Climate change includes both the global warming driven by human emissions of greenhouse gases, and the resulting large-scale shifts in weather patterns. Though there have been previous periods of climatic change, since the mid-20th century the rate of human impact on Earth's climate system and the global scale of that impact have been unprecedented.* [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Climate_change)\n\n\nThe goal of this research is to analyze the rise of temperature over time in different parts of the world, using the dataset on the temperature of major cities of the world. The dataset was provided by University of Dayton ([licence](https:\/\/academic.udayton.edu\/kissock\/http\/Weather\/default.htm)).\n\n- How much is the temperature increase in different parts of the world over time?\n- Which countries are seeing a rapid increase in temperature over time?\n- What seasonality patterns do we have in different parts of the world? And how did those patterns change over time?\n\nThe notebook illustrates answers to these questions, using Bokeh graphs and interactive dashboards.\nActually, this notebook is a concise Bokeh interpretation of its [elder Plotly brother](https:\/\/www.kaggle.com\/dunklerwald\/what-s-going-on-in-ecuador-splash-of-plotly) that I published a while back. The Plotly version is a more elaborate work whereas here I just experiment with some special Bokeh features, such as tabs and shared data sources. So if you really want to know what's going on in Ecuador, you might want to check the Plotly version.\n\nWhat I disliked about Bokeh is its poor documentation. Limited search, missing crosslinks, unclear and confusing structure.<br>\nWhat I really liked about Bokeh:\n- **tabs**(!) and therefore more compact output\n- advanced pan tool when you can connect and pan several plots by left-dragging a mouse simultaneously (I guess Plotly also can provide such features but I didn't check it)\n- simple and fast ways to create different grids\n- easier ways to manage interactions based on user input (e.g. update all graphs in a grid according to the selected value in Select widget).\n\n\nPerformance and internals of both frameworks is still an unexplored territory for me. Especially when it comes to building powerful web apps. If you have some working experience or research articles, analyzing both Plotly and Bokeh, please, don't hesitate to share info here in comments. All in all, based on what I tested so far, Plotly is my tool of choice when it comes to EDA. No brainer.\n\nPart 1: [What's going on in Ecuador? - splash of Plotly](https:\/\/www.kaggle.com\/dunklerwald\/what-s-going-on-in-ecuador-splash-of-plotly)<br>\nPart 2: [What's going on in Ecuador? - breeze of Bokeh](https:\/\/www.kaggle.com\/dunklerwald\/what-s-going-on-in-ecuador-breeze-of-bokeh)","68440809":"# Summary  <a id=\"7\"><\/a>","c1c692c8":"# Table of contents\n1. [Loading necessary libraries](#1)\n1. [Loading city temperatures dataset](#2)\n1. [Basic stats](#3)\n1. [Data cleaning and feature engineering](#4)\n1. [Regional temperature dynamics: dashboard](#5)     \n1. [Country temperature dynamics: dashboard](#6)     \n1. [Summary](#7)    ","06e33b24":"## Loading city temperatures datasets <a id=\"2\"><\/a>","c38a94e2":"## Country temperature dynamics: dashboard  <a id=\"6\"><\/a>","10bba48b":"Just select a country from the list to get 3 different visualisations the dashboard provides:\n\n- first charts shows average country temperature trend through all the years;\n- second chart illustrates how seasonal temperature has been changing over years;\n- third chart compares 2 distributions for this country: temperature distribution in 1995-2014 vs temperature distribution in 2015-2019.\n\nYou can check yourself that in many countries temperature distribution has shifted to the right (e.g. Australia) whereas some countries shifted back to the left (e.g. Canada).","e6d32043":"## Loading necessary libraries <a id=\"1\"><\/a>","8d8911dd":"Now we are ready to go with our final data set.","ee554fa4":"## Basic stats  <a id=\"3\"><\/a>","69cfaf14":"## Data cleaning and feature engineering  <a id=\"4\"><\/a>","6abe3a59":"## Regional temperature dynamics: dashboard  <a id=\"5\"><\/a>","b5df27c2":"Based on all information above, now we know for certain that global world temperature has been growing. We also observe that average temperature has been changing differently in different regions. Having said that, missing values (AvgTemperature=-99), data gaps of various nature and smoothing effect of aggregation (Ecuador case is a good example) could affect analysis in the misleading way. So we should be careful of making wrong judgements and be attentive to data we have under the hood.","bc8e65ba":"Let's look at how temperature has been changing in different regions through all the years.<br><br>\n*Tab General*<br>\nThe left chart demostrates temperature rise for each region over the entire period. I calculate the rise as the exponentially smoothed temperatures difference of the first and the last year of observations for each region. The chart on the right shows regional dynamics over the years.\nYou can see it with the naked eye - temperature has been growing across all regions. What's more, in some regions temperature has been growing faster.<br><br>\n*Regional tabs* (Africa, Asia etc.)<br>\nThe chart on the left shows a monthly temperature profile for this region. The tabbed charts on the right illustrate how seasonal temperature has been changing in this region.","fb843c81":"In this section we will clean our dataset and generate some new features.","b59bda49":"Let's load the dataset on the temperature of major cities of the world, provided by University of Dayton.","38770ca7":"Now we can get basic stats about columns and data demographics, such as uniqueness, missing values and zero values."}}