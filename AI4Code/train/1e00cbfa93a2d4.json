{"cell_type":{"97348dd1":"code","8bd0a7f3":"code","5cbb2d29":"code","9641e9eb":"code","758e918a":"code","f3c20eba":"code","9877a8b8":"code","ea50c24a":"markdown","3da8ce08":"markdown"},"source":{"97348dd1":"import matplotlib.patches as patches\nfrom  matplotlib.patches import Arc\nfrom matplotlib import pyplot as plt\nfrom matplotlib import animation\nimport matplotlib.patches as mpatches\n\n# Change size of figure\nplt.rcParams['figure.figsize'] = [20, 16]\ndef drawPitch(width, height, color=\"w\"):\n\n  fig = plt.figure()\n  ax = plt.axes(xlim=(-10, width + 10), ylim=(-15, height + 5))\n  plt.axis('off')\n\n  # Grass around pitch\n  rect = patches.Rectangle((-5,-5), width + 10, height + 10, linewidth=1, edgecolor='gray',facecolor='#3f995b', capstyle='round')\n  ax.add_patch(rect)\n\n  # Pitch boundaries\n  rect = plt.Rectangle((0, 0), width, height, ec=color, fc=\"None\", lw=2)\n  ax.add_patch(rect)\n\n  # Middle line\n  plt.plot([width\/2, width\/2], [0, height], color=color, linewidth=2)\n  \n  # Dots\n  dots_x = [11, width\/2, width-11]\n  for x in dots_x:\n    plt.plot(x, height\/2, 'o', color=color, linewidth=2)\n\n  # Penalty box  \n  penalty_box_dim = [16.5, 40.3]\n  penalty_box_pos_y = (height - penalty_box_dim[1]) \/ 2\n\n  rect = plt.Rectangle((0, penalty_box_pos_y), penalty_box_dim[0], penalty_box_dim[1], ec=color, fc=\"None\", lw=2)\n  ax.add_patch(rect)\n  rect = plt.Rectangle((width, penalty_box_pos_y), -penalty_box_dim[0], penalty_box_dim[1], ec=color, fc=\"None\", lw=2)\n  ax.add_patch(rect)\n\n  #Goal box\n  goal_box_dim = [5.5, penalty_box_dim[1] - 11 * 2]\n  goal_box_pos_y = (penalty_box_pos_y + 11)\n\n  rect = plt.Rectangle((0, goal_box_pos_y), goal_box_dim[0], goal_box_dim[1], ec=color, fc=\"None\", lw=2)\n  ax.add_patch(rect)\n  rect = plt.Rectangle((width, goal_box_pos_y), -goal_box_dim[0], goal_box_dim[1], ec=color, fc=\"None\", lw=2)\n  ax.add_patch(rect)\n\n  #Goals\n  rect = plt.Rectangle((0, penalty_box_pos_y + 16.5), -3, 7.5, ec=color, fc=color, lw=2, alpha=0.3)\n  ax.add_patch(rect)\n  rect = plt.Rectangle((width, penalty_box_pos_y + 16.5), 3, 7.5, ec=color, fc=color, lw=2, alpha=0.3)\n  ax.add_patch(rect)\n    \n  # Middle circle\n  mid_circle = plt.Circle([width\/2, height\/2], 9.15, color=color, fc=\"None\", lw=2)\n  ax.add_artist(mid_circle)\n\n\n  # Penalty box arcs\n  left  = patches.Arc([11, height\/2], 2*9.15, 2*9.15, color=color, fc=\"None\", lw=2, angle=0, theta1=308, theta2=52)\n  ax.add_patch(left)\n  right = patches.Arc([width - 11, height\/2], 2*9.15, 2*9.15, color=color, fc=\"None\", lw=2, angle=180, theta1=308, theta2=52)\n  ax.add_patch(right)\n\n  # Arcs on corners\n  corners = [[0, 0], [width, 0], [width, height], [0, height]]\n  angle = 0\n  for x,y in corners:\n    c = patches.Arc([x, y], 2, 2, color=color, fc=\"None\", lw=2, angle=angle,theta1=0, theta2=90)\n    ax.add_patch(c)\n    angle += 90\n  return fig, ax","8bd0a7f3":"WIDTH = 105\nHEIGHT = 68\n\ndrawPitch(WIDTH, HEIGHT)","5cbb2d29":"from enum import Enum\n\nX_RESIZE = WIDTH\nY_RESIZE = HEIGHT \/ 0.42\n\nclass GameMode(Enum):\n    Normal = 0\n    KickOff = 1\n    GoalKick = 2\n    FreeKick = 3\n    Corner = 4\n    ThrowIn = 5\n    Penalty = 6\n\ndef scale_x(x):\n  return (x + 1) * (X_RESIZE\/2)\n\ndef scale_y(y):\n  return (y + 0.42) * (Y_RESIZE\/2)\n\n\ndef extract_data(frame):\n  res = {}\n  obs = frame[0]['observation']['players_raw'][0]\n  res[\"left_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"left_team\"]]\n  res[\"right_team\"] = [(scale_x(x), scale_y(y)) for x, y in obs[\"right_team\"]]\n\n  ball_x, ball_y, ball_z = obs[\"ball\"]\n  res[\"ball\"] = [scale_x(ball_x),  scale_y(ball_y), ball_z]\n  res[\"score\"] = obs[\"score\"]\n  res[\"steps_left\"] = obs[\"steps_left\"]\n  res[\"ball_owned_team\"] = obs[\"ball_owned_team\"]\n  res[\"ball_owned_player\"] = obs[\"ball_owned_player\"]\n  res[\"right_team_roles\"] = obs[\"right_team_roles\"]\n  res[\"left_team_roles\"] = obs[\"left_team_roles\"]\n  res[\"left_team_direction\"] = obs[\"left_team_direction\"]\n  res[\"right_team_direction\"] = obs[\"right_team_direction\"]\n  res[\"game_mode\"] = GameMode(obs[\"game_mode\"]).name\n  return res","9641e9eb":"import math\n\n\ndef draw_team(obs, team, side):\n  X = []\n  Y = []\n  for x, y in obs[side]:\n    X.append(x)\n    Y.append(y)\n  team.set_data(X, Y)\n\ndef draw_ball(obs, ball):\n  ball.set_markersize(10 + 5 * obs[\"ball\"][2]) # Scale size of ball based on height\n  ball.set_data(obs[\"ball\"][:2])\n\ndef draw_ball_owner(obs, ball_owner, team_active):\n  if obs[\"ball_owned_team\"] == 0:\n    x, y = obs[\"left_team\"][obs[\"ball_owned_player\"]]\n    ball_owner.set_data(x, y)\n    team_active.set_data(WIDTH \/ 4 + 7, -7)\n    team_active.set_markerfacecolor(\"red\")\n  elif obs[\"ball_owned_team\"] == 1:\n    x, y = obs[\"right_team\"][obs[\"ball_owned_player\"]]\n    ball_owner.set_data(x, y)\n    team_active.set_data(WIDTH \/ 4 + 50, -7)\n    team_active.set_markerfacecolor(\"blue\")\n  else:\n    ball_owner.set_data([], [])\n    team_active.set_data([], [])\n    \ndef draw_players_directions(obs, directions, side):\n  index = 0\n  if \"right\" in side:\n    index = 11\n  for i, player_dir in enumerate(obs[f\"{side}_direction\"]):\n    x_dir, y_dir = player_dir\n    dist = math.sqrt(x_dir ** 2 + y_dir ** 2) + 0.00001 # to prevent division by 0\n    x = obs[side][i][0]\n    y = obs[side][i][1] \n    directions[i + index].set_data([x, x + x_dir \/ dist ], [y, y + y_dir \/ dist])","758e918a":"import numpy as np\nfrom IPython.display import HTML\n\nfig, ax = drawPitch(WIDTH, HEIGHT)\nax.invert_yaxis()\n\nball_owner, = ax.plot([], [], 'o', markersize=30,  markerfacecolor=\"yellow\", alpha=0.5)\nteam_active, = ax.plot([], [], 'o', markersize=30,  markerfacecolor=\"blue\", markeredgecolor=\"None\")\n\nteam_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\")\nteam_right, = ax.plot([], [], 'o', markersize=20,  markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\")\n\nball, = ax.plot([], [], 'o', markersize=10,  markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\")\ntext_frame = ax.text(-5, -5, '', fontsize=25)\nmatch_info = ax.text(105 \/ 4 + 10, -5, '', fontsize=25)\ngame_mode = ax.text(105 - 25, -5, '', fontsize=25)\ngoal_notification = ax.text(105 \/ 4 + 10, 0, '', fontsize=25)\n\n# Drawing of directions definitely can be done in a better way\ndirections = []\nfor i in range(22):\n  direction, = ax.plot([], [], color='yellow', lw=3)\n  directions.append(direction)\n\n  \ndrawings = [team_active, ball_owner, team_left, team_right, ball, text_frame, match_info, game_mode, goal_notification]\n\ndef init():\n    team_left.set_data([], [])\n    team_right.set_data([], [])\n    ball_owner.set_data([], [])\n    team_active.set_data([], [])\n    ball.set_data([], [])\n    return drawings \n\ndef animate(i):\n  global prev_score_a, prev_score_b\n  obs = extract_data(output[i])\n\n  # Draw info about ball possesion\n  draw_ball_owner(obs, ball_owner, team_active)\n\n  # Draw players\n  draw_team(obs, team_left, \"left_team\")\n  draw_team(obs, team_right, \"right_team\")\n\n  draw_players_directions(obs, directions, \"left_team\")\n  draw_players_directions(obs, directions, \"right_team\")\n    \n  draw_ball(obs, ball)\n\n  # Draw textual informations\n  text_frame.set_text(f\"Frame: {i}\/{obs['steps_left'] + i - 1}\")\n  game_mode.set_text(f\"Game mode: {obs['game_mode']}\")\n  \n  score_a, score_b = obs[\"score\"]\n  match_info.set_text(f\"{name_left} {score_a} : {score_b} {name_right}\")\n\n  return drawings  \n\n","f3c20eba":"%%time\nimport json\n\nepisode = '6377022'\nsave = False\n#frames = 3000\nframes = 500\n\n!wget https:\/\/www.kaggleusercontent.com\/episodes\/{episode}.json\n\nfile = episode + '.json'\nwith open(file, 'r') as g:\n    data_json = g.read()\ngame = json.loads(data_json)\noutput = game['steps']\nname_left = game['info']['TeamNames'][0]\nname_right = game['info']['TeamNames'][1]\nanim = animation.FuncAnimation(fig, animate, init_func=init,\n                               frames=frames, interval=100, blit=True)\nif save:\n    fname = f'{episode}.mp4'\n    print(fname)\n    anim.save(fname)","9877a8b8":"HTML(anim.to_html5_video())","ea50c24a":"I'm using @jaron_michal superb visualization code:\nhttps:\/\/www.kaggle.com\/jaronmichal\/human-readable-visualization","3da8ce08":"My humble code:"}}