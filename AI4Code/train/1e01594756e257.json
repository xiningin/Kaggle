{"cell_type":{"4d2f3050":"code","cc8bccde":"code","35382373":"code","f82695c3":"code","400b05d6":"code","20860173":"code","3fd9a46e":"code","85f4f6f4":"code","a9b9c38e":"code","74e9d2f7":"code","8d19dc77":"code","62a81867":"code","113d5a7c":"code","be51de1e":"code","5570b178":"code","a4040ea4":"code","156e8982":"code","c0f668a3":"code","967a5478":"code","e4ddd380":"code","3893fbbf":"code","a7a6323c":"code","81097632":"code","c4f04c4f":"code","4336876e":"code","e584904b":"code","f5af2d9d":"code","603b328d":"code","fc2d0f2d":"code","5d217ba1":"code","908c815e":"code","d638efae":"code","712b3c85":"code","2934aa79":"code","32d9cd4f":"code","ca4ae992":"code","99718766":"code","5e5a7551":"code","a911499c":"code","53800c76":"code","d7ad99c2":"code","abc3b7da":"code","213717fb":"code","35c07f59":"code","8a16230c":"code","f72d6a80":"code","80e7db1c":"code","9205ab1e":"code","b9a53c4f":"code","9329f588":"markdown","eb10d677":"markdown","86fc7a38":"markdown","d667249b":"markdown"},"source":{"4d2f3050":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc8bccde":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport sklearn\nimport seaborn as sns","35382373":"df=pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","f82695c3":"df.head()","400b05d6":"df.shape","20860173":"sns.heatmap(df.isnull(), cbar=False)\ndf.isnull().sum()","3fd9a46e":"df.info()","85f4f6f4":"df[\"TotalCharges\"]=pd.to_numeric(df[\"TotalCharges\"],errors='coerce')","a9b9c38e":"df.info()","74e9d2f7":"sns.heatmap(df.isnull(), cbar=False)\ndf.isnull().sum()","8d19dc77":"df.dropna(subset=[\"TotalCharges\"], inplace=True)","62a81867":"df.drop('customerID',axis=1,inplace=True)","113d5a7c":"df.head()","be51de1e":"df.shape","5570b178":"df_num=df.select_dtypes(exclude=[\"object_\"])\ndf_num.head()","a4040ea4":"df_cat=df.select_dtypes(include=[\"object_\"])\ndf_cat.head()\n","156e8982":"corr_df=df.corr()\ncorr_df","c0f668a3":"Charges_Per_Month=np.divide(df[\"TotalCharges\"],df[\"tenure\"])\ndf_num[\"Charges_Per_Month\"]=Charges_Per_Month","967a5478":"corr_df=df_num.corr()\ncorr_df","e4ddd380":"df_num.head()","3893fbbf":"df_num.hist()","a7a6323c":"sns.countplot(x='Churn', hue='SeniorCitizen', data=df)","81097632":"f=pd.melt(df,value_vars=sorted(df_cat))\ng=sns.FacetGrid(f,col='variable', col_wrap=4, sharex=False, sharey=False)\nplt.xticks(rotation=\"vertical\")\ng=g.map(sns.countplot,'value')\n[plt.setp(ax.get_xticklabels(), rotation=60) for ax in g.axes.flat]\ng.fig.tight_layout()\nplt.show()","c4f04c4f":"#To mix no service with no\n\ndf[\"MultipleLines\"].replace(to_replace=\"No phone service\", value=\"No\", inplace=True)\n\ndf[\"OnlineSecurity\"].replace(to_replace=\"No internet service\", value=\"No\", inplace=True)\n\ndf[\"OnlineBackup\"].replace(to_replace=\"No internet service\", value=\"No\", inplace=True)\n\ndf[\"DeviceProtection\"].replace(to_replace=\"No internet service\", value=\"No\", inplace=True)","4336876e":"for a in df_cat.columns:\n    sns.countplot(x='Churn', hue=a, data=df_cat)\n    plt.show(block='False')  ","e584904b":"f=pd.melt(df,value_vars=sorted(df_cat))\ng=sns.FacetGrid(f,col='variable', col_wrap=4, sharex=False, sharey=False)\nplt.xticks(rotation=\"vertical\")\ng=g.map(sns.countplot,'value')\n[plt.setp(ax.get_xticklabels(), rotation=60) for ax in g.axes.flat]\ng.fig.tight_layout()\nplt.show()","f5af2d9d":"from sklearn import preprocessing\nlabel_encoder=preprocessing.LabelEncoder()\n\ndf['Partner']=label_encoder.fit_transform(df['Partner'])\ndf['MultipleLines']=label_encoder.fit_transform(df['MultipleLines'])\ndf['InternetService']=label_encoder.fit_transform(df['InternetService'])\ndf['OnlineSecurity']=label_encoder.fit_transform(df['OnlineSecurity'])\ndf['OnlineBackup']=label_encoder.fit_transform(df['OnlineBackup'])\ndf['DeviceProtection']=label_encoder.fit_transform(df['DeviceProtection'])\ndf['Contract']=label_encoder.fit_transform(df['Contract'])\ndf['PaperlessBilling']=label_encoder.fit_transform(df['PaperlessBilling'])\ndf['PaymentMethod']=label_encoder.fit_transform(df['PaymentMethod'])\ndf['Churn']=label_encoder.fit_transform(df['Churn'])\nprint(df.dtypes)","603b328d":"df.drop('PhoneService',axis=1,inplace=True)\ndf.drop('gender',axis=1,inplace=True)\ndf.drop('Dependents',axis=1,inplace=True)\ndf.drop('TechSupport',axis=1,inplace=True)\ndf.drop('StreamingTV',axis=1,inplace=True)\ndf.drop('StreamingMovies',axis=1,inplace=True)\nprint(df.dtypes)","fc2d0f2d":"df.head()","5d217ba1":"y=df[\"Churn\"]\ny.shape","908c815e":"#no=0, tes=1\ny.head()","d638efae":"x=df.loc[:, df.columns!='Churn']\nx.head()","712b3c85":"from sklearn.model_selection import train_test_split\n\nxTrain, xTest, yTrain, yTest = train_test_split(x, y, test_size = 0.2, random_state = 0)","2934aa79":"sns.countplot(yTrain)","32d9cd4f":"sns.countplot(yTest)","ca4ae992":"#Standardising the data\n\nscaler=preprocessing.StandardScaler()\nx=scaler.fit_transform(x)\nx","99718766":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.base import clone\n\nskfolds=StratifiedKFold(n_splits=10, random_state=42)\n\n#Gradient Boost Classifier\n\nfrom sklearn.ensemble import GradientBoostingClassifier\ngb_clf=GradientBoostingClassifier(random_state=41)\n\nclone_clf=clone(gb_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for GBC\", n_correct\/len(y_pred))\n    ","5e5a7551":"from sklearn.svm import SVC\nsvc_clf=SVC(random_state=42)\n\nclone_clf=clone(svc_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for SVM\", n_correct\/len(y_pred))\n    ","a911499c":"from sklearn.ensemble import RandomForestClassifier\nrfc_clf=RandomForestClassifier(random_state=42)\n\nclone_clf=clone(rfc_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for RandomForestClassifier\", n_correct\/len(y_pred))\n","53800c76":"from sklearn.neighbors import KNeighborsClassifier\n\nknn_clf=KNeighborsClassifier()\n\nclone_clf=clone(knn_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for KNeighborsClassifierr\", n_correct\/len(y_pred))","d7ad99c2":"from sklearn.tree import DecisionTreeClassifier\n\ndtc_clf=DecisionTreeClassifier(random_state=42)\n\nclone_clf=clone(dtc_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for DecisionTreeClassifier\", n_correct\/len(y_pred))","abc3b7da":"from sklearn.linear_model import LogisticRegression\n\nlr_clf=LogisticRegression(random_state=42)\n\nclone_clf=clone(lr_clf)\n\nclone_clf.fit(xTrain,yTrain)\ny_pred=clone_clf.predict(xTest)\nn_correct=sum(y_pred==yTest)\nprint(\"Result for LogisticRegression\", n_correct\/len(y_pred))","213717fb":"from sklearn.model_selection import cross_val_predict\ny_pred=cross_val_predict(gb_clf,x,y,cv=10)\n\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y,y_pred)\n\n","35c07f59":"from sklearn.metrics import precision_score, recall_score\n\nprint(\"Precision\",precision_score(y,y_pred))\nprint(\"recall\",recall_score(y,y_pred))","8a16230c":"y_scores=cross_val_predict(gb_clf,x,y,cv=10, method=\"decision_function\")\n\nfrom sklearn.metrics import precision_recall_curve\nprecisions, recalls, thresholds=precision_recall_curve(y,y_scores)","f72d6a80":"#Precision recall curve\n\ndef plot_curve(precisions, recalls, thresholds):\n    plt.plot(thresholds,precisions[:-1], \"b--\", label=\"Precision\")\n    plt.plot(thresholds,recalls[:-1], \"b--\", label=\"Recall\")\n    plt.xlabel(\"Threshold\")\n    plt.legend(loc=\"upper left\")\n    plot.ylim([0,1])\n\nplot_curve(precisions, recalls, thresholds)\nplt.show()\n\n\n","80e7db1c":"plt.plot(precisions, recalls)\nplt.xlabel(\"Recall\")\nplt.ylabel(\"Precision\")","9205ab1e":"y_new_scores=(y_scores>-0.5)\nprint(\"New Precision:\", precision_score(y,y_new_scores))\nprint(\"New Recall:\", recall_score(y,y_new_scores))","b9a53c4f":"from sklearn.metrics import roc_curve\nfpr,tpr, thresholds=roc_curve(y,y_scores)\n\ndef plot_roc(fpr,tpr, label=None):\n    plt.plot(fpr,tpr, linewidth=2, label=label)\n    plt.plot([0,1],[0,1],\"k--\")\n    plt.axis([0,1,0,1])\n    plt.xlabel(\"False Positive rate\")\n    plt.ylabel(\"true Positive rate\")\n\nplot_roc(fpr,tpr, label=None)\nplt.show()","9329f588":"**EDA**","eb10d677":"DATA CLEANING","86fc7a38":"AS the totalchaeges column is in object form converting it to float form, the errors part, gives NaN to non interger value","d667249b":"This shows that direct correlation is between the tenure and total charges and it is logical. Also the monthly and total charge are correlated.\n\nTo check whether the totalcharges per tenure and the monthly charges are corelated more than this, then it would give a better understanding."}}