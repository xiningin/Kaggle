{"cell_type":{"faf5aadc":"code","d5f437cb":"code","07e75fef":"code","ccaaf404":"code","e3909c4d":"code","de6b5b8f":"code","c0bf00ca":"code","c45eeb82":"code","a76f5471":"code","72dfbb3a":"code","80a6be2f":"code","ff0c1da0":"code","f48ce9c9":"code","e16bd0b1":"code","cdfc7886":"code","f6826a7f":"code","06e910f1":"code","9820ec95":"code","0d5b45be":"code","3988566f":"code","4f211325":"code","f0c592bb":"code","409f4ddd":"code","740e0d1a":"code","b5bb469a":"code","2dcbe302":"code","74039775":"code","4a04840a":"code","b9066f97":"code","5c72199d":"code","7c6f3734":"code","b26f887b":"code","d30614a6":"code","68c8b45b":"code","71c2ff3c":"code","37f2985c":"code","b8aaf994":"markdown","f5b6493b":"markdown","cee012e8":"markdown","0fee54dc":"markdown","69fd258b":"markdown","cb7dc70d":"markdown","09b8e560":"markdown","7151442e":"markdown","71680d2f":"markdown","8a285b3f":"markdown","a4ad4019":"markdown","f8bf0c3c":"markdown","bc21968d":"markdown","a6ced69c":"markdown","803ffade":"markdown","78e84215":"markdown","68f87409":"markdown","800c5b20":"markdown","f4a6a694":"markdown","64464b57":"markdown","1cea29ec":"markdown","32e97824":"markdown","3e97726d":"markdown","e10d8582":"markdown","1d8b511f":"markdown","43860893":"markdown","5a6eb307":"markdown"},"source":{"faf5aadc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5f437cb":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)\n","07e75fef":"df = pd.read_csv('..\/input\/spotify-dataset-19212020-160k-tracks\/data.csv')\ndf.head()","ccaaf404":"df.tail()","e3909c4d":"df.shape","de6b5b8f":"df.isnull().sum()","c0bf00ca":"df.drop(['id'], axis = 1, inplace = True)\ndf.head()","c45eeb82":"sns.countplot(df['explicit'])","a76f5471":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['valence'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median valence')\n\n","72dfbb3a":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['energy'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median energy')\n\n","80a6be2f":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['popularity'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median popularity')\n\n","ff0c1da0":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['loudness'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median loudness')\n\n","f48ce9c9":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['speechiness'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median speechiness')\n\n","e16bd0b1":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['tempo'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median tempo')\n\n","cdfc7886":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['liveness'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median liveness')\n\n","f6826a7f":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['instrumentalness'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median instrumentalness')\n\n","06e910f1":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['duration_ms'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median duration_ms')\n\n","9820ec95":"\nplt.figure(figsize = (10,10))\ndf.groupby('year')['acousticness'].median().plot()\nplt.xlabel('year')\nplt.ylabel('Median acousticness')\n\n","0d5b45be":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'valence').add_legend()\n","3988566f":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'energy').add_legend()\n","4f211325":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'popularity').add_legend()\n","f0c592bb":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'duration_ms').add_legend()\n","409f4ddd":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'danceability').add_legend()\n","740e0d1a":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'loudness').add_legend()\n","b5bb469a":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'tempo').add_legend()\n","2dcbe302":"\nsns.FacetGrid(df, hue = 'explicit', size = 10).map(plt.scatter, 'year', 'speechiness').add_legend()\n","74039775":"# To plot the correlation chart\n\ncorrelations = df.corr()\nf,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(correlations, annot = True)\n","4a04840a":"df.head()","b9066f97":"df.drop(['artists', 'name', 'release_date'], axis = 1, inplace = True)\ndf.head()","5c72199d":"df.info()","7c6f3734":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ndf_scaled = sc.fit_transform(df)\npd.DataFrame(df_scaled)\n","b26f887b":"from sklearn.cluster import KMeans\n\nwcss = []\nfor i in range(1, 50):\n    kmeans = KMeans(n_clusters = i)\n    kmeans.fit(df_scaled)\n    wcss.append(kmeans.inertia_)\n\nplt.plot(wcss, 'bx-')\nplt.xlabel('Clusters')\nplt.ylabel('Scores WCSS')\n","d30614a6":"kmeans = KMeans(12)\nkmeans.fit(df_scaled)\nlabels = kmeans.labels_\nlabels\n","68c8b45b":"\ndf_cluster = pd.concat([df, pd.DataFrame({'cluster': labels})], axis = 1)\ndf_cluster.head()\n","71c2ff3c":"for i in df.columns:\n    plt.figure(figsize = (35, 5))\n    for j in range(12):\n        plt.subplot(1, 12, j+1)\n        cluster = df_cluster[df_cluster['cluster'] == j]\n        cluster[i].hist(bins = 20)\n        plt.title('{} \\nCluster {}'.format(i, j))\n\nplt.show()\n","37f2985c":"\ndf0 = df_cluster[df_cluster['cluster'] == 0]\ndf1 = df_cluster[df_cluster['cluster'] == 1]\ndf2 = df_cluster[df_cluster['cluster'] == 2]\ndf3 = df_cluster[df_cluster['cluster'] == 3]\ndf4 = df_cluster[df_cluster['cluster'] == 4]\ndf5 = df_cluster[df_cluster['cluster'] == 5]\ndf6 = df_cluster[df_cluster['cluster'] == 6]\ndf7 = df_cluster[df_cluster['cluster'] == 7]\ndf8 = df_cluster[df_cluster['cluster'] == 8]\ndf9 = df_cluster[df_cluster['cluster'] == 9]\ndf10 = df_cluster[df_cluster['cluster'] == 10]\ndf11 = df_cluster[df_cluster['cluster'] == 11]\n","b8aaf994":"# Tempo vs Year, explicit in colors","f5b6493b":"# Speechiness vs Year","cee012e8":"# Elbow to find optimal no. of clusters for K-Means","0fee54dc":"# Correlation Chart","69fd258b":"# Explicit vs Non Explicit","cb7dc70d":"# Instrumentalness vs Year","09b8e560":"# Liveness vs Year","7151442e":"**Primary**:\n- id (Id of track generated by Spotify)\n\n**Numerical**:\n- acousticness (Ranges from 0 to 1)\n- danceability (Ranges from 0 to 1)\n- energy (Ranges from 0 to 1)\n- duration_ms (Integer typically ranging from 200k to 300k)\n- instrumentalness (Ranges from 0 to 1)\n- valence (Ranges from 0 to 1)\n- popularity (Ranges from 0 to 100)\n- tempo (Float typically ranging from 50 to 150)\n- liveness (Ranges from 0 to 1)\n- loudness (Float typically ranging from -60 to 0)\n- speechiness (Ranges from 0 to 1)\n- year (Ranges from 1921 to 2020)\n","71680d2f":"# Segregating the clusters in different dataframes","8a285b3f":"# Energy w.r.t Year, explicit or not determined by colors","a4ad4019":"# Acousticness vs Year","f8bf0c3c":"# Tempo vs Year","bc21968d":"# Loudness w.r.t Year, explicit in colors","a6ced69c":"# Energy vs Year","803ffade":"# Valence w.r.t Year, explicit or not determined by colors","78e84215":"# Valence vs Year","68f87409":"# Popularity w.r.t Year, explicit in colors","800c5b20":"**Dummy**:\n- mode (0 = Minor, 1 = Major)\n- explicit (0 = No explicit content, 1 = Explicit content)\n\n**Categorical**:\n- key (All keys on octave encoded as values ranging from 0 to 11, starting on C as 0, C# as 1 and so on\u2026)\n- artists (List of artists mentioned)\n- release_date (Date of release mostly in yyyy-mm-dd format, however precision of date may vary)\n- name (Name of the song)","f4a6a694":"# Applying K-Means","64464b57":"# Plot hist of each column for each cluster","1cea29ec":"# Popularity vs Year","32e97824":"# Std Scaling of data","3e97726d":"# Loudness vs Year","e10d8582":"# Duration w.r.t Years, explicit in colors","1d8b511f":"# Duration of song vs Year","43860893":"# Speechiness vs Year, explicit in colors","5a6eb307":"# Danceability w.r.t Year, explicit in colors"}}