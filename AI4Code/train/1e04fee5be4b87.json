{"cell_type":{"4d6479a1":"code","16b53b07":"code","54734284":"code","105c18d7":"code","3f15f502":"code","585280c5":"code","e435acd0":"code","b17ee6d5":"code","cd878ea1":"code","8ec763b3":"code","537c72ba":"code","958afb12":"code","68c8b891":"code","731e50f7":"code","78835fa0":"code","200bccb1":"code","6ccfc139":"code","b6b590d4":"code","37f029f9":"code","2fa990e1":"code","c633402a":"code","520ece63":"code","4dd6c6e1":"code","a15d6971":"code","04607df6":"code","18278bed":"code","9c5eb24a":"code","75a57917":"code","f9ff5b5e":"markdown","131dc5f7":"markdown","451ea8e8":"markdown","9f49c604":"markdown","1c35e34a":"markdown"},"source":{"4d6479a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport altair as alt # graphical representation tool\nimport datetime as dt\nalt.renderers.enable('kaggle')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16b53b07":"netflix_movies = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\nnetflix_stocks = pd.read_csv('..\/input\/netflix-stock-data\/NFLX.csv')","54734284":"netflix_movies = netflix_movies[netflix_movies['type']=='Movie'].dropna()\nnetflix_movies.head()","105c18d7":"netflix_stocks.head()","3f15f502":"netflix_movies.date_added = pd.to_datetime(netflix_movies.date_added)\nmovies_over_time = netflix_movies.copy().groupby('release_year')['title'].count().reset_index()\nmovies_over_time = movies_over_time.rename(columns={0:'count'})\n\nmedian_year = int(netflix_movies ['release_year'].median()) #2016\nmode_year = int(netflix_movies ['release_year'].mode())\nprint(\"this is the median:\", median_year, \", this is the mode:\", mode_year)\nmovies_over_time.describe()","585280c5":"netflix_stocks['Date'] = pd.to_datetime(netflix_stocks['Date'])\n\nnetflix_stocks.describe()","e435acd0":"# Assuming the first movie listed is where this movie was filmed the most, we will replace the lists of movies\n# with the first country and use that to find the top 10 countries that have movies are currently on Netflix \n\nmovies_with_countries = netflix_movies.copy()\nnew=movies_with_countries['country'].str.split(',', n=5, expand=True)\ncountries = [('1st',0), ('2nd',1),('3rd',2),('4th',3),('5th',4),('6th',5)]\nfor i in countries:\n    movies_with_countries[i[0]+\" country\"] = new[i[1]]\nnew_mwc = movies_with_countries.drop(columns=['show_id','type','director','cast'])\ndistribution_df = new_mwc[['1st country',\n                                         'title']].groupby(\n    '1st country'\n).count().reset_index()\ndistribution_df.head()","b17ee6d5":"directors = movies_with_countries.copy()\ndirectors = directors[directors['country']=='United States'][['director','title','rating','listed_in']]\ndirectors.head()\n\n\nnew_dir = directors['director'].str.split(',', expand=True)\nsplit = [('1st',0), ('2nd',1)]\n\n# does genre matter?\nfor i in split:\n    directors[i[0]+\" Named Director\"] = new_dir[i[1]]\ntop_directors = directors[['1st Named Director','title','rating','listed_in']].groupby(\n    '1st Named Director'\n)['title'].count().reset_index()\n\n\ntop_directors[top_directors['title']==top_directors.title.max()]","cd878ea1":"# # does genre matter?\n# genre = []\n# for i in genre:\n#     directors[i[0]+\" genre\"] = genre[i[1]]\n# top_directors = directors[['director','title','rating','listed_in']].groupby(\n#     'director'\n# )['title'].count().reset_index()\n# top_directors['director'] = top_directors['director'].str.split(',')[0]","8ec763b3":"titles_per_country = alt.Chart(distribution_df,\n                              height=300,\n                              width=500,\n                              title='Number of Titles per Country').transform_window(\n    rank='rank(title)',\n    sort=[alt.SortField('title', order='descending')]\n).transform_filter(\n    alt.datum.rank <=10\n).mark_bar(color='red').encode(\n    y=alt.Y('title:Q',\n           axis=alt.Axis(title='Number of Movies',\n                         tickCount=4,\n                         labelPadding=10,\n                        titlePadding=10)),\n    x=alt.X('1st country:N',\n           sort=alt.EncodingSortField('title',order='descending'),\n           title=None,\n           axis=alt.Axis(\n                        labelAngle=-45,\n               labelFontSize=15\n           )),\n    color=alt.condition(\n        alt.datum.rank == 1,\n        alt.value('red'),\n        alt.value('black')\n    ),\n    tooltip=['1st country:N', 'title']\n)\n\ntitles_by_director = alt.Chart(top_directors,\n                              height=300,\n                              width=500,\n                              title='Number of Titles by Director').transform_window(\n    rank='rank(title)',\n    sort=[alt.SortField('title', order='descending')]\n).transform_filter(\n    alt.datum.rank <=10\n).mark_bar(color='red').encode(\n    x=alt.X('1st Named Director:N',\n           sort=alt.EncodingSortField('title',order='descending'),\n           title=None,\n           axis=alt.Axis(\n                        labelAngle=-45,\n               labelFontSize=15\n           )),\n    y=alt.Y('title:Q',\n           axis=alt.Axis(title='Number of Movies',\n                         tickCount=4,\n                         labelPadding=10,\n                        titlePadding=10)),\n    color=alt.condition(\n        alt.datum.rank == 1,\n        alt.value('red'),\n        alt.value('black')\n    ),\n    tooltip=['1st Named Director:N', 'title']\n)\n\ntitles_by_year = alt.Chart(movies_over_time,\n                              height=300,\n                              width=500,\n                              title='Number of Titles by Year').transform_window(\n    rank='rank(title)',\n    sort=[alt.SortField('title', order='descending')]\n).transform_filter(\n    alt.datum.rank <=10\n).mark_bar(color='red').encode(\n    y=alt.Y('title:Q',\n           axis=alt.Axis(title='Number of Movies',\n                         tickCount=4,\n                         labelPadding=10,\n                        titlePadding=10)),\n    x=alt.X('release_year:N',\n           sort=alt.EncodingSortField('title',order='descending'),\n           title=None,\n           axis=alt.Axis(\n                        labelAngle=-45,\n               labelFontSize=15\n           )),\n    color=alt.condition(\n        alt.datum.rank == 1,\n        alt.value('red'),\n        alt.value('black')\n    ),\n    tooltip=['release_year:N', 'title']\n)","537c72ba":"# Coding the graphs done in hidden cell. Data used in the graphs are visible in the cells above.\n# Remake the year chart into something pertaining to actors, then continue with the genre scripting aboved\nalt.vconcat((titles_per_country | titles_by_director),(titles_by_year))","958afb12":"high_stock_price = alt.Chart(netflix_stocks,\n                              height=300,\n                              width=500,\n                              title='Netflix Stock Price and Trading Volume over Time').mark_line(color='black').encode(\n    y=alt.Y('High:Q',\n           axis=alt.Axis(title='High Price',\n                         # tickCount=4,\n                         labelPadding=10,\n                        titlePadding=10)),\n    x=alt.X('Date:T',\n           title='Date',\n           axis=alt.Axis(\n               labelAngle=-45,\n               labelFontSize=15\n           )),\n    tooltip=[alt.Tooltip('Date:T'),alt.Tooltip('High:Q', format='2r')]\n)\n\nvolume_of_stocks = alt.Chart(netflix_stocks,\n                              height=300,\n                              width=500,\n                              title='Netflix Stock Price and Trading Volume over Time').mark_bar(color='red').encode(\n    y=alt.Y('Volume:Q',\n           axis=alt.Axis(title='Trading Volume',\n                         # tickCount=4,\n                         labelPadding=10,\n                        titlePadding=10)),\n    x=alt.X('Date:T',\n           title='Date',\n           axis=alt.Axis(\n               labelAngle=-45,\n               labelFontSize=15\n           )),\n    tooltip=[alt.Tooltip('Date:T'),alt.Tooltip('Volume:Q', format=',')])\n\n\n# high_stock_price + volume_of_stocks\nalt.layer(volume_of_stocks,high_stock_price).resolve_scale(y='independent')","68c8b891":"netflix_movies[netflix_movies['release_year']==2017].groupby('rating').count()['title']","731e50f7":"movies_in_2017 = netflix_movies[netflix_movies['release_year']==2017][(netflix_movies['rating'].str.contains('TV-MA')) | (netflix_movies['rating'].str.contains('TV-14'))]\nmovies_in_2017['listed_in'] = movies_in_2017['listed_in'].str.split(',', expand=True)\nmovies_in_2017['country'] = movies_in_2017['country'].str.split(',', n=5, expand=True)\nmovies_in_2017","78835fa0":"movies_in_2017['duration'] = movies_in_2017['duration'].str.split(' ',expand=True)\nmovies_in_2017['duration'] = movies_in_2017['duration'].astype('int')\nmovies_in_2017 = movies_in_2017.rename(columns={'duration':'duration_min'})\nm17_mean = movies_in_2017['duration_min'].mean()\ntop6_genres = movies_in_2017.groupby('listed_in').count()['title'].sort_values()[-6:].index.to_list()\nmovies_in_2017","200bccb1":"def agg_func(group):\n    return group['description']\n\naggregate = pd.DataFrame(movies_in_2017[['listed_in','title','description']].groupby(['listed_in','title']).apply(agg_func))\naggregate.index = aggregate.index.droplevel(level=2)","6ccfc139":"new_df=aggregate.groupby('listed_in').agg('count')","b6b590d4":"aggregate.index.get_level_values(0).unique()","37f029f9":"aggregate ","2fa990e1":"new_df.drop(columns=['count']).sort_values(by='description',ascending=False)","c633402a":"import matplotlib.pyplot as plt\nfrom wordcloud import WordCloud","520ece63":"text = aggregate['description'].values \n\nwordcloud = WordCloud().generate(str(text))\nplt.imshow(wordcloud)\nplt.axis(\"off\")\nplt.show()","4dd6c6e1":"import nltk\n# Import packages and modules\nimport pandas as pd\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import RegexpTokenizer\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nnltk.download('stopwords') \nnltk.download('wordnet')","a15d6971":"def preprocess_text(text):\n    # Tokenise words while ignoring punctuation\n    tokeniser = RegexpTokenizer(r'\\w+')\n    tokens = tokeniser.tokenize(text)\n    \n    # Lowercase and lemmatise \n    lemmatiser = WordNetLemmatizer()\n    lemmas = [lemmatiser.lemmatize(token.lower(), pos='v') for token in tokens]\n    \n    # Remove stopwords\n    keywords= [lemma for lemma in lemmas if lemma not in stopwords.words('english')]\n    return keywords\n","04607df6":"# Create an instance of TfidfVectorizer\nvectoriser = TfidfVectorizer(analyzer=preprocess_text)\n\n# Fit to the data and transform to feature matrix\nX_train = vectoriser.fit_transform(aggregate['description'])\n\n# Convert sparse matrix to dataframe\nX_train = pd.DataFrame.sparse.from_spmatrix(X_train)\n\n# Save mapping on which index refers to which words\ncol_map = {v:k for k, v in vectoriser.vocabulary_.items()}\n# Rename each column using the mapping\nfor col in X_train.columns:\n    X_train.rename(columns={col: col_map[col]}, inplace=True)\nX_train=X_train[X_train.columns[40:]]","18278bed":"# Create an instance of RegexpTokenizer for alphanumeric tokens\ntokeniser = RegexpTokenizer(r'\\w+')\n\n# Tokenise 'part1' string\ntokens = tokeniser.tokenize(part1)\nprint(tokens)","9c5eb24a":"\nopen_close_color = alt.condition(\"datum.Open <= datum.Close\",\n                                 alt.value(\"#06982d\"),\n                                 alt.value(\"#ae1325\"))\n\nstocks = netflix_stocks[netflix_stocks.Date > '2017-01-01'][netflix_stocks.Date < '2017-12-31']\nstocks['month'] = stocks['Date'].dt.strftime('%m')\n\nbase = alt.Chart(stocks,\n                 height=400,\n                 width=800,\n                 title='Netflix Stock Price and Trading Volume over Time').encode(\n    x=alt.X('Date:T', \n            timeUnit='yearmonthdate', \n            #scale=alt.Scale(domain=domain),\n            title='Dates of 2017',\n            axis=alt.Axis(\n                labelAngle=-45,\n                labelFontSize=15\n           ))\n)\n\nrule = base.mark_rule(x2Offset=10,\n    xOffset=10).encode(\n    alt.Y(\n        'Low:Q',\n        title='Price',\n        scale=alt.Scale(zero=False)\n    ),\n    alt.Y2('High:Q'),\n)\n\nbar = base.mark_bar().encode(\n    alt.Y('Open:Q'),\n    alt.Y2('Close:Q'),\n    color=open_close_color\n)\n\nchart =alt.layer(rule,bar).interactive()","75a57917":"chart","f9ff5b5e":"As we can see, the stock price rose tremendously after 2016. Even though there was far less shares being traded at the time, the stock price kept driving higher. From the Number of Titles by Year and the Netflix Stock Price and Trading Volume over Time, we can see that 2017 was a pivotal year for the company. Let's take a look at just that segment of time for the movies release by date.","131dc5f7":"Let's be honest, Jay Karas is taking the market by storm with his work in comedy, so this one isn't too much of a surprise! Let's look for other trends that are in the data. Later, we will investigate if there is a correlation between the movies released and the stock price. We can't say conclusively that there is a direct cause and effect relationship; it's interested to find patterns in data, just for fun!\n\nNow, we have to ask, *does the year a movie was released matter?* I can imagine that there have been times that the film industry took a hit and not too many movies reached production. We can only speculate about the greater implications. It could just mean that the most popular year had the best movies. We decide what this metric becomes in the end! ","451ea8e8":"We could say Hollywood knows how to make a good movie? Or should we say that one director is taking center stage and we just can't get enough?","9f49c604":"Now, that we have our DataFrames ready; we can continue to doing some investigative work. Let's check the descriptive statistics for both stocks and a couple different segmentations for movies with pd.DataFrame.describe().","1c35e34a":"We get to see our maxes and mins & highs and lows. We have a pretty good idea of the distribution for the movies and the average closing dollar amount. Could Netflix releases over the years correlated with the stock price? Can we tell if our answer is statistically significant?\n\nIf you think about releases, there are four elements of releases that might catch a movie lover's attention. You have:\n1. Main film location:  language matters but relativity to the elements in the movie and being familiar with the references is quentissential in most instances. \n2. Director: we all have our favorite director. It's the movie that was most memorable or the one that made you laugh the most. You loved the cinamatic touches they added. You strap in for a good movie when you hear what's on for movie night.\n3. Actor: Leonardo DiCaprio gets my buy in on any movie. We all have that person or a few! Is their a primary actor driving the market?\n4. Genre: I love a good horror movie, don't you? Not your forte? Let's see if the genres of the movie releases and the stock price have a relationship.\n\nThese ideas are all speculative, but I invite my readers to stay the course. The insights and graphs are at the bottom. Continue reading if you'd like."}}