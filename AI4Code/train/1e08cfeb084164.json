{"cell_type":{"2be2e3a3":"code","9a16ee8c":"code","d7a524bb":"code","6fd2aa27":"code","96a416a9":"code","8027189d":"code","0e3d664d":"code","d310595a":"code","6729b8bb":"markdown","44b0f0ab":"markdown","92f5249f":"markdown","39a4c6d7":"markdown","16e5d893":"markdown","876da2ec":"markdown"},"source":{"2be2e3a3":"import os\nimport shutil\nfrom tqdm import tqdm\nimport librosa\nfrom librosa import feature\nimport numpy as np\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")","9a16ee8c":"fn_list_i = [\n    feature.chroma_stft,\n    feature.spectral_centroid,\n    feature.spectral_bandwidth,\n    feature.spectral_rolloff,\n    feature.mfcc,\n    feature.chroma_cqt,\n    feature.chroma_cens,\n    feature.melspectrogram,\n    feature.spectral_contrast,\n    feature.poly_features,\n    feature.tonnetz,\n    feature.tempogram,\n    feature.fourier_tempogram,\n]\n \nfn_list_ii = [\n    feature.rms,\n    feature.zero_crossing_rate,\n    feature.spectral_flatness,\n]\n\n\ndef get_feature_vector(y,sr): \n   feat_vect_i = [ np.mean(funct(y,sr)) for funct in fn_list_i]\n   feat_vect_ii = [ np.mean(funct(y)) for funct in fn_list_ii] \n   feature_vector = feat_vect_i + feat_vect_ii \n   return feature_vector","d7a524bb":"PATHS = [\n    \"..\/input\/birdsong-resampled-train-audio-00\",\n    \"..\/input\/birdsong-resampled-train-audio-01\",\n    \"..\/input\/birdsong-resampled-train-audio-02\",\n    \"..\/input\/birdsong-resampled-train-audio-03\",\n    \"..\/input\/birdsong-resampled-train-audio-04\",\n]","6fd2aa27":"norm_audios_feat = []","96a416a9":"for path in paths:\n    for root1, dirs, files in os.walk(path):\n        for d in tqdm(dirs):\n            for root2, dirs, files in os.walk(os.path.join(root1, d)):\n                for file in files:\n                    y , sr = librosa.load(os.path.join(root2, file),sr=None)\n                    feature_vector = get_feature_vector(y, sr)\n                    norm_audios_feat.append(feature_vector)","8027189d":"print(len(norm_audios_feat))\nprint(len(norm_audios_feat[0]))\nprint(norm_audios_feat[1:10])","0e3d664d":"import csv\n\noutput = \"featcsv.csv\"\nheader =[\n    \"chroma_stft\",\n    \"spectral_centroid\",\n    \"spectral_bandwidth\",\n    \"spectral_rolloff\",\n    \"mfcc\",\n    \"chroma_cqt\",\n    \"chroma_cens\",\n    \"melspectrogram\",\n    \"spectral_contrast\",\n    \"poly_features\",\n    \"tonnetz\",\n    \"tempogram\",\n    \"fourier_tempogram\",\n    \"rms\",\n    \"zero_crossing_rate\",\n    \"spectral_flatness\",\n]\n\nwith open(norm_output, \"+w\") as f:\n   csv_writer = csv.writer(f, delimiter = \",\")\n   csv_writer.writerow(header)\n   csv_writer.writerows(norm_audios_feat)","d310595a":"import pickle\n\nwith open(\"features.pickle\", \"wb\") as file:\n    pickle.dump(norm_audios_feat, file)","6729b8bb":"### Initializing","44b0f0ab":"### Saving the features as csv-file and as pickle-file.","92f5249f":"# Librosa Feature Generation\n\nIn this notebook I share my code for generation audio features with [librosa library](https:\/\/librosa.org\/). There are 16 features in total including rhythm features. I use resampled data for this task.","39a4c6d7":"### Set up the features","16e5d893":"### Generation","876da2ec":"### Import  "}}