{"cell_type":{"2e09c95d":"code","b68c0b53":"code","c2fcfaf4":"code","6b6c85ae":"code","aa1ebb1d":"code","e5932cb1":"code","03f244bf":"code","94f86a44":"code","bcf93a98":"code","0870ecda":"code","97e23afd":"code","d04da43b":"code","886a5aa1":"code","45034fef":"code","f223182a":"code","be89aa40":"code","b3d60b2a":"code","94fd7c62":"code","260ea7e7":"code","9686e36f":"code","3d4ddf62":"code","7bdb4660":"code","b1c80347":"markdown"},"source":{"2e09c95d":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport random\nimport keras\nfrom keras.models import Sequential\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.layers import Dense,Flatten,Dropout,Conv2D,MaxPooling2D,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\nimport cv2","b68c0b53":"train_dir = '..\/input\/landmark-recognition-2021\/train'\ntest_dir = '..\/input\/landmark-recognition-2021\/test'","c2fcfaf4":"train=pd.read_csv('..\/input\/landmark-recognition-2021\/train.csv')\ntrain","6b6c85ae":"sample=pd.read_csv('..\/input\/landmark-recognition-2021\/sample_submission.csv')\nsample","aa1ebb1d":"Name=[]\nfor landmark in train['landmark_id'].unique():\n    Name+=[landmark]\nprint(len(Name))\nn=len(Name)","e5932cb1":"N=list(range(n))\nprint(n)\nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","03f244bf":"trainX0=[]\ntrainY0=[]\n#len(train)\nfor i in tqdm(range(10000)):\n    idt=train.loc[i,'id']+'.jpg'\n    landt=train.loc[i,'landmark_id']\n    path=os.path.join(train_dir,idt[0],idt[1],idt[2])\n    image=cv2.imread(os.path.join(path,idt))\n    image2=cv2.resize(image,dsize=(16,16),interpolation=cv2.INTER_CUBIC)\n    trainX0+=[image2]\n    trainY0+=[landt]    ","94f86a44":"trainX=np.array(trainX0)\ntrainY1=pd.Series(trainY0).map(normal_mapping)\ntrainY2=np.array(trainY1)","bcf93a98":"trainY3=to_categorical(trainY2)\nX_train=np.array(trainX0).reshape(-1,16,16,3)\ny_train=np.array(trainY3)","0870ecda":"trainx,testx,trainy,testy=train_test_split(X_train,y_train,test_size=0.2,random_state=44)","97e23afd":"print(trainx.shape)\nprint(testx.shape)\nprint(trainy.shape)\nprint(testy.shape)\nprint(trainy.shape[1])","d04da43b":"model = Sequential()\nmodel.add(Conv2D(32,(2,2),input_shape = (16,16,3),activation = 'relu'))\nmodel.add(Conv2D(32,(2,2),activation = 'relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(trainy.shape[1], activation='softmax'))","886a5aa1":"model.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])","45034fef":"model.summary()","f223182a":"his = model.fit(X_train, y_train, validation_split=0.2, epochs=50, batch_size=64, verbose=2)","be89aa40":"y_pred=model.predict(testx)\npred=np.argmax(y_pred,axis=1)\nground = np.argmax(testy,axis=1)\nprint(classification_report(ground,pred))","b3d60b2a":"get_acc = his.history['accuracy']\nvalue_acc = his.history['val_accuracy']\nget_loss = his.history['loss']\nvalidation_loss = his.history['val_loss']\n\nepochs = range(len(get_acc))\nplt.plot(epochs, get_acc, 'r', label='Accuracy of Training data')\nplt.plot(epochs, value_acc, 'b', label='Accuracy of Validation data')\nplt.title('Training vs validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","94fd7c62":"epochs = range(len(get_loss))\nplt.plot(epochs, get_loss, 'r', label='Loss of Training data')\nplt.plot(epochs, validation_loss, 'b', label='Loss of Validation data')\nplt.title('Training vs validation loss')\nplt.legend(loc=0)\nplt.figure()\nplt.show()","260ea7e7":"testX0=[]\nfor i in tqdm(range(len(sample))):\n    idt=sample.loc[i,'id']+'.jpg'\n    path=os.path.join(test_dir,idt[0],idt[1],idt[2])\n    image=cv2.imread(os.path.join(path,idt))\n    image2=cv2.resize(image,dsize=(16,16),interpolation=cv2.INTER_CUBIC)\n    testX0+=[image2]","9686e36f":"X_test=np.array(testX0).reshape(-1,16,16,3)","3d4ddf62":"pred2=model.predict(X_test)\nprint(pred2[0:10])\n\nPRED=[]\nfor item in pred2:\n    value=np.argmax(item)\n    score=item[value]\n    value2=reverse_mapping[value]\n    PRED+=[str(value2)+' '+str(score)]\nprint(PRED[0:10])","7bdb4660":"submt=sample\nsubmt['landmarks']=PRED\nsubmt.to_csv('submission.csv',index=False)\nsubmt","b1c80347":"#### "}}