{"cell_type":{"01a9e22f":"code","0dac1e57":"code","818f8560":"code","37359c24":"code","18b9a54b":"code","361db19d":"code","8d87001b":"code","76ed662d":"code","f76d4670":"code","4a1dca77":"code","1f04e9d1":"code","ca7eb5c9":"code","77214171":"code","2c878d89":"code","1dec37e5":"code","bcd9fcab":"code","6e69b68f":"code","c7f54d97":"code","9572838f":"code","579c5159":"code","49bc2e18":"code","ca9f617d":"code","e27613a2":"code","d5a6906f":"code","9471b962":"code","c8b2cd8d":"code","b6ed191e":"code","a868548a":"code","9d472f2d":"code","a682fef8":"code","3d9f3057":"code","5d833a15":"code","0d8bc1cb":"code","e28e1c52":"code","ffc6f2f6":"code","f70579e2":"code","97c73f21":"code","1e718360":"code","501d14ac":"markdown","1e03e5ae":"markdown","dac6b668":"markdown","a7712a0d":"markdown","ce88ed47":"markdown","7050ef55":"markdown","00091991":"markdown","9b0992fd":"markdown","635b591c":"markdown","20676ac3":"markdown","c9eeefac":"markdown","67e46ed1":"markdown","854c4c61":"markdown","845dcd95":"markdown","673e8f3f":"markdown","112b5434":"markdown","72f3f2b9":"markdown","21cdbf7c":"markdown","8c7a298c":"markdown","2ad89f9b":"markdown","37c37f16":"markdown","3233890a":"markdown","a2eb86c3":"markdown","9c59d843":"markdown","a4a7af4a":"markdown","8331d119":"markdown","1bebad9e":"markdown","b850079a":"markdown","fc5ebe8e":"markdown","049b4703":"markdown","6335a74e":"markdown","a791823f":"markdown","576d07b0":"markdown"},"source":{"01a9e22f":"# Use this cell to set up import statements for all of the packages that you\n#   plan to use.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n# Remember to include a 'magic word' so that your visualizations are plotted\n#   inline with the notebook. See this page for more:\n#   http:\/\/ipython.readthedocs.io\/en\/stable\/interactive\/magics.html\n","0dac1e57":"# Load Data and display first few records\ndf = pd.read_csv('..\/input\/tmdb-movies-dand\/tmdb-movies.csv')\ndf.head(5)","818f8560":"df.shape","37359c24":"df.info()","18b9a54b":"df.describe()","361db19d":"df.columns","8d87001b":"# Columns we do not need\n# Drop Columns\nto_drop = ['id','imdb_id','cast','homepage','overview','tagline','keywords', 'budget','revenue']\n\ndf.drop(to_drop,inplace=True,axis=1)","76ed662d":"# Display first five records dataset after dropping columns\ndf.head(5)","f76d4670":"df.info()","4a1dca77":"# Check duplicates\nsum(df.duplicated())\n\n#Drop any Duplicates\ndf= df.drop_duplicates()\n\n# Recheck duplicates\nsum(df.duplicated())","1f04e9d1":"# Convert release_date to datetime\ndf['release_date'] = pd.to_datetime(df['release_date'])","ca7eb5c9":"df['budget_adj_in_millions'] = (df['budget_adj']\/1000000).round(2)\ndf['revenue_adj_in_millions'] = (df['revenue_adj']\/1000000).round(2)","77214171":"#Drop original budget_adj and revenue_adj columns\ndf.drop(['budget_adj','revenue_adj'],axis=1,inplace=True)","2c878d89":"df.head()","1dec37e5":"df.info()","bcd9fcab":"df.describe()","6e69b68f":"# Drop budget_adj_in_millions and revenue_adj_in_millions\ndf.drop(['budget_adj_in_millions','revenue_adj_in_millions'],axis=1,inplace=True)\ndf.head(2)","c7f54d97":"# Check how many values have 0 listed as the runtime\ndf.query('runtime == 0')['runtime'].count()","9572838f":"# Replace all zero values with median runtime\ndf['runtime'].replace(0,df['runtime'].median(),inplace=True)","579c5159":"# Re-check how many values have 0 listed as the runtime\ndf.query('runtime == 0')['runtime'].count()","49bc2e18":"df.describe()","ca9f617d":"df.info()","e27613a2":"# Plot Scatter matrix of entire frame\npd.plotting.scatter_matrix(df,figsize=(20,10));","d5a6906f":"# Count top 25 directors\ntop_25_dirs = df['director'].value_counts().nlargest(25)\ntop_25_dirs","9471b962":"# Bar Chart for top 25 directors by number of movies produced\ntop_25_dirs.sort_values(ascending=True).plot(kind='barh',figsize=(10,10))\nplt.title('Top 25 Directors by Movie Count')\nplt.xlabel('Number of Movies Directed')\nplt.ylabel('Name');","c8b2cd8d":"# Merge top 25 director series with Dataframe to get movies directed by only by top 25 directors\ntop_dir_df = pd.DataFrame({'director':top_25_dirs.index}).merge(df, how='left')\n\n# Check that new df director value counts matches top 25 director series value counts\ntop_dir_df['director'].value_counts()","b6ed191e":"top_dir_df.groupby('director')['vote_average'].mean().sort_values(ascending=False)","a868548a":"# Plot directors based on average movie rating\ntop_dir_df.groupby('director')['vote_average'].mean().sort_values(ascending=True).plot(kind='barh',figsize=(10,10));\nplt.xticks([5, 5.5, 6, 6.5, 7])\nplt.xlim(left=5)\nplt.title('Top 25 Directors by Average Movie Rating')\nplt.xlabel('Average Rating for All Movies')\nplt.ylabel('Name');","9d472f2d":"top_dir_df.groupby('director')['vote_average'].max().sort_values(ascending=False)","a682fef8":"# Create new df for movies from 2000 to recent\ndf_since_2000 = df.query('release_year >= 2000')\n\n# Verify and plot number of movies released per year from 2000 to most recent\ndf_since_2000['release_year'].value_counts().sort_index().plot(kind='bar',figsize=(15,5))\nplt.title('Movies Released pre Year, 2000-2015',size=18)\nplt.xlabel('Year',size=14)\nplt.xticks(rotation=300)\nplt.ylabel('Count');","3d9f3057":"# Get movie counts of individual genres\ngenre_series = df_since_2000.groupby(df['genres'].str.split('|').str[0]).size().sort_values(ascending=False)\ngenre_series","5d833a15":"# Bar chart of number of movies per genre\ngenre_series.plot(kind='bar',figsize=(25,5))\nplt.title('Movies Produced by Genre, 2000-2015',size=20)\nplt.ylabel('Count',size=14)\nplt.xlabel('Genre',size=14)\nplt.xticks(rotation=315);","0d8bc1cb":"# Pie chart of movies produced by genre as a percentage\ngenre_series.plot.pie(autopct=\"%.1f%%\",explode=[0.03]*len(genre_series),figsize=(14,14),pctdistance=0.75);\nplt.title('Percentage of Movies Produced By Genre, 2000-2015',size=20)\nplt.ylabel('');","e28e1c52":"# Create Heatmap of movies count by year per genre\n# Group By Genre and Release Year\ntmp_df = df_since_2000.groupby([df['genres'].str.split('|').str[0],'release_year'],sort=False)['release_year'].agg(['count'])\ntmp_df.head()\n\nheatmap_df = pd.pivot_table(tmp_df, values ='count',index=['genres'],columns=['release_year'])\n\nfig, ax = plt.subplots(figsize=(15,12.5))\nsns.heatmap(heatmap_df, ax=ax)\nplt.xlabel('Year', size=14)\nplt.ylabel('Genre',size=14)\nplt.title('Movies Released Per Year By Genre',size=18);","ffc6f2f6":"# Get Average Movie rating per genre over entire timespan\ngenre_ratings_series = df_since_2000.groupby(df['genres'].str.split('|').str[0])['vote_average'].mean().sort_values(ascending=False)\ngenre_ratings_series.plot(kind='bar',figsize=(25,5));\nplt.title('Average Movie Rating By Genre, 2000-2015',size=18)\nplt.xlabel('Genre',size=14)\nplt.xticks(rotation=315)\nplt.ylabel('Rating',size=14)\nplt.ylim(bottom=5);","f70579e2":"# Create Heatmap of movies count by year per genre\n# Group By Genre and Release Year\ntmp_df = df_since_2000.groupby([df['genres'].str.split('|').str[0],'release_year'],sort=False)['vote_average'].agg(['mean'])\ntmp_df.head()\n\nheatmap_df = pd.pivot_table(tmp_df, values ='mean',index=['genres'],columns=['release_year'])\n\nfig, ax = plt.subplots(figsize=(15,12.5))\nsns.heatmap(heatmap_df, annot=True, ax=ax)\nplt.xlabel('Year', size=14)\nplt.ylabel('Genre',size=14)\nplt.title('Average Movie Rating Per Year By Genre',size=18);","97c73f21":"# plot average runtime per genre\navg_runtime_series = df_since_2000.groupby(df_since_2000['genres'].str.split('|').str[0])['runtime'].mean().sort_values(ascending=False)\navg_runtime_series.plot(kind='bar',figsize=(15,5));\nplt.title('Average Runtime by Genre, 2000-2015', size=18)\nplt.xlabel('Genre',size=14)\nplt.xticks(rotation=315)\nplt.ylim(bottom=5)\nplt.ylabel('Runtime (in minutes)',size=14);","1e718360":"# Create Heatmap of movies count by year per genre\n# Group By Genre and Release Year\ntmp_df = df_since_2000.groupby([df['genres'].str.split('|').str[0],'release_year'],sort=False)['runtime'].agg(['mean'])\ntmp_df.head()\n\nheatmap_df = pd.pivot_table(tmp_df, values ='mean',index=['genres'],columns=['release_year'])\n\nfig, ax = plt.subplots(figsize=(20,12.5))\nsns.heatmap(heatmap_df, annot=True, fmt='.1f',ax=ax)\nplt.xlabel('Year', size=14)\nplt.ylabel('Genre',size=14)\nplt.title('Average Runtime Per Year By Genre',size=18);","501d14ac":"#### Removing Unneeded Columns\nThe first step we will take to clean our data is to drop unneeded columns. In our analysis, we will not need the following:\n* id\n* imdb_id\n* cast\n* homepage\n* tagline\n* keywords\n* overview\n* budget\n* revenue\n\nThe reason why the budget and revenue columns are being dropped is due to the presence of the adjusted values that are included with the dataset. The *budget_adj* and *revenue_adj* columns reflect the orginal columns but account for inflation overtime. They are displayed in terms of 2010 dollars. link: https:\/\/www.kaggle.com\/tmdb\/tmdb-movie-metadata\/discussion\/45990\n","1e03e5ae":"#### Note\n* It appears that more votes are cast for newer movies than they are for older ones. This impacts vote averages\n    * With that said, more movies have been produced from 2000 to most recently than they have pre-2000 (dating back to 1960)\n\n","dac6b668":"### How Do Movie Genres Since 2000 Compare with Each Other?\nFor this research question, we will look at movies with respect to their genre. This notebook will examine the following qualities from movies by genre dating back to 2000:\n\n* Number of movies released per year\n* Average ratings\n* Average runtimes\n\nThe first thing we will do is create a new dataframe with movies produced in the year 2000 and on.","a7712a0d":"#### Dividing Movies Into Genres\nNext, we will split the new dataframe by genre. Through initial investigation of the dataset, movies may be listed having multiple genres in the *genres* column. Movies with multiple genres have them separated with the \"|\" delimiter in the dataframe. We need to separate these genres by grouping movies based on individual categories.\n\nFor the sake of this research question, movies with multiple genres are included in multiple categories. \n\nHelpful link: https:\/\/stackoverflow.com\/questions\/61601350\/pandas-groubpy-on-substring-or-regex","ce88ed47":"### Cleaning TMDb for Analysis","7050ef55":"Now that we have the entire dataset where we want it, we should be able to answer our question: which one of these directors makes the best movies? ","00091991":"The summary statistics above indicate that over half of the adjusted budget and revenue data has been omitted from this dataset. Since this is the case, we cannot use these columns for the purpose of our analysis.","9b0992fd":"The data above indicates the following information:\n* Woody Allen is the most established director with 45 movies directed \n* Martin Scorsese produces the best movies with an overall average movie rating of approximately 7.0, with Steven Spielberg following closely behind with an all-time average movie rating of 6.8\n* Francis Ford Coppola directed the best movie out of the top 25 established directors which holds an average rating of 8.3","635b591c":"#### Fix Release Date column\nThe cell below will modify the data type of the *release_date* field from string to datetime","20676ac3":"The goal of this analysis is to examine some key characteristics among movies to help address questions posed in this notebook. For the purpose of this project, we seek to address the following questions:\n* Which established directors make the most, and best, movies?\n* How do movies genres compare with each from 2000 to 2015?\n\nBefore we go into addressing these questions, we will plot this dataframe to identify variable distributions and possible correlations for future investigation.","c9eeefac":"<a id='conclusions'><\/a>\n## Conclusions","67e46ed1":"Now we will be cleaning the dataset to fit our needs\n\n#### We will conduct the following steps to achieve this goal:\n* Drop unneeded columns\n* Remove duplicate columns\n* Make release date a datetime field\n* Make budget_adj, revenue_adj floats and use million as unit of measurement\n* Address empty cells \n\n","854c4c61":"# Project: Movie Data Analysis\nAuthor: Brian McAbee\n\n## Table of Contents\n<ul>\n<li><a href=\"#intro\">Introduction<\/a><\/li>\n<li><a href=\"#wrangling\">Data Wrangling<\/a><\/li>\n<li><a href=\"#eda\">Exploratory Data Analysis<\/a><\/li>\n<li><a href=\"#conclusions\">Conclusions<\/a><\/li>\n<\/ul>","845dcd95":"With the initial view of the dataset, we can see that there are definitely columns that we will not use as they likely will not have much use for our analysis. We will be removing these columns shortly.\n\n","673e8f3f":"Now let's take a look at the runtime column. As it stands, the runtime column has enough data to impute values where its respective cells contain zero. With the presence of existential outliers in the dataset, we will impute these zero values with the median runtime.","112b5434":"<a id='eda'><\/a>\n## Exploratory Data Analysis","72f3f2b9":"We can see that movies falling under the drama category have been the most popular by a wide margin and movies considered as dramas and\/or comedies account for almost half of all movies produced from 2000 to 2015.\n","21cdbf7c":"<a id='wrangling'><\/a>\n## Data Wrangling\n\n### General Properties\nBelow we are going to read in the data file we are using as well as display some summary statistics before we get into cleaning it. This section will provide a bit more insight on the data we plan to analyze.","8c7a298c":"\n### Which Established Director Makes the Best Movies?\nFor this question, we will look at the 25 directors who've generated the most movies. We will be evaluating a director's success based on the average rating their movies get. Voting averages for movies are based on a scale of 1-10 and are dictated by the number of votes input by its viewerbase.\n\nFirst, let's identify the 25 directors who have made the most movies. To start, we will get a list of these directors and then plot the information on a horizontal bar chart.","2ad89f9b":"#### Remove Duplicate Rows\nThe code cell below will first check the dataset for any duplicates then drop them if any are present.","37c37f16":"Interesting to note that horror movies seem to continuously get voted as the worst category every year. Also, aside from a couple of bad years, science fiction movies are not as bad as they initially appear.","3233890a":"Lastly, we will average plot runtimes for each genre.","a2eb86c3":"Action, Drama, Comedy, Thriller, Horror, and Documentary genres all stand out here. The heatmap shows positive trends for all of these categories, as more movies are typically being produced year-over-year. Also notable in the opposite light are Western and Foreign movies. These two categories have multiple years where not a single movies was produced.\n\nRecall the earlier bar chart of movies produced by year. It is interesting to see that the best year for movie production appears to be 2014. This is also where dramas, comedies, and thriller movies see their peak in the heatmap above.","9c59d843":"Next, we will look at how movie genres have been rated over time. Let's begin with a plot to show the average rating for all movies each year.","a4a7af4a":"A filter must be applied to the dataset now to include only the directors listed above. To perform this function, a merge will be used to ensure only the directors listed above will be inlcuded in the new dataset. \n\nHelpful link: https:\/\/stackoverflow.com\/questions\/45615306\/get-top-rows-from-column-value-count-with-pandas","8331d119":"We have cleaned our dataset so that it is ready for our analysis! After it is all said and done, we have 10 actionable columns to work with.","1bebad9e":"#### Addressing Empty, or Zeroed, Cells\nLooking back over the summary statistics of the current dataframe (see code output from cell below), there are many cells that have \"0\" in place of a numerical value or NaN. These are found in the *runtime*, *budget_adj_in_millions*, and *revenue_adj_in_millions* fields. To address whether or not to impute values or drop the column(s) entirely, lets identify how much of the data is actually \"missing.\"","b850079a":"More movies are being produced year after year. The graph above that plots the new dataframe shows a steady increase in movies being made over the years.","fc5ebe8e":"<a id='intro'><\/a>\n## Introduction\nThis project conducts a data analysis on the The Movie Database (TMDb) with an aim to address the following questions: \n* Which established directors make the most, and best, movies?\n* How do movies genres compare with each from 2000 to 2015?\n\nTMDb is an online, open-source database that houses over 10,000 dating back to the 1960s. The originating dataset houses information about movies such as titles, runtimes, and ratings. This data exploration examines movie details as they regard to the aforementioned research questions above.\n","049b4703":"The next plot is a heatmap of how individual genres fared over time.","6335a74e":"Our analysis has now addressed the questions posed at the start of this notebook. Multiple charts and functions were used generate insight on the topics at hand. Charts and numbers show that Woody Allen is the director with the most movies produced, Martin Scorsese is the director with typically the best movies produced, and Francis Ford Coppola is the director who falls in the most-established bunch with the best movie produced. Examining only 25 directors who've made the most movies was a trivial decision, but the number was decided on to not convolute the data.\n\nWith regards to movies that have been produced at the start of this millennium, dramas and comedies can be considered as the most popular over other genres. With the steady increased of movies being produced as the years go on, dramas and comedies appear at a higher rate than every other genre. Foreign and western movies are not as mass produced, and horror films are typically seen as the worst movies in terms of voter ratings. History-style films average out to be the longest movies (no surprise) where animation-based movies are typically the shortest.","a791823f":"#### Visualizing Movies Over Time\nThis section will analyze trends on a year-by-year basis. We will look at how movies trended positively or negatively overtime.\n\nWe will first plot what types of movies were produced over time via seaborn's heatmap capability.\n\nHelpful links: \n* https:\/\/datavizpyr.com\/heatmaps-with-seaborn-in-python\/\n* https:\/\/matplotlib.org\/3.3.1\/gallery\/images_contours_and_fields\/image_annotated_heatmap.html","576d07b0":"#### Shortening budget and revenue fields\nThe cells below shorten the values in the adjusted budget and revenue columns. New columns are added to replace these columns to depict that that value is represented in millions."}}