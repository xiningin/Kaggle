{"cell_type":{"a98569a5":"code","4fd443e5":"code","54d28b06":"code","96938d61":"code","6424dafd":"code","e7a62390":"code","c4b0ceb8":"code","630757e8":"code","d03798ba":"code","b5420bd2":"code","be445b3f":"code","495edcdb":"code","4f55cedd":"code","6cb3d4f7":"code","4621ba76":"code","819c4596":"code","edea0552":"code","739b0861":"code","37cc6ad9":"code","e128ce70":"code","d0d8e142":"code","9d2bb6f6":"code","404d7a33":"markdown","389393ba":"markdown"},"source":{"a98569a5":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","4fd443e5":"data0 = pd.read_csv(\"..\/input\/parkinsons-disease-classification\/pd_speech_features.csv\")\nprint(data0.columns.tolist())\ndata0","54d28b06":"data0.info()","96938d61":"data1=data0","6424dafd":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ndataX=data1.drop(['class','id'],axis=1)\ndataY0=data1['class']","e7a62390":"columns=dataX.columns.to_list()","c4b0ceb8":"trainX=dataX.iloc[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\n\ntestX=dataX.iloc[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","630757e8":"def objective(trial,data=trainX,target=trainY0):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 200),\n        'objective': trial.suggest_categorical('objective',['regression','rmse']),  \n        'max_depth': trial.suggest_int('max_depth', 3, 10),\n        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-3, 0.1),\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 1e-3),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-3, 10.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 3, 10),\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": trial.suggest_int(\"verbosity\", 1, 10),\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","d03798ba":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=64)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","b5420bd2":"study.trials_dataframe()","be445b3f":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","495edcdb":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","4f55cedd":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","6cb3d4f7":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","4621ba76":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","819c4596":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","edea0552":"Best_trial=study.best_trial.params\nprint(Best_trial)","739b0861":"preds = np.zeros((len(testX)))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(trainX[columns],trainY0):\n    X_tr,X_val=trainX[columns].iloc[trn_idx],trainX[columns].iloc[test_idx]\n    y_tr,y_val=trainY0.iloc[trn_idx],trainY0.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict(testX[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","37cc6ad9":"model","e128ce70":"from sklearn.metrics import classification_report\ny_pred=model.predict(testX)\ny_pred","d0d8e142":"ground = np.array(testY0)\nground","9d2bb6f6":"print(classification_report(ground,y_pred))","404d7a33":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)\ndata1=df","389393ba":"# Parkinson's Disease LightGBM"}}