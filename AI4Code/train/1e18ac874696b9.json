{"cell_type":{"03a70a9c":"code","d2bac1a8":"code","0e70033f":"code","bd84c108":"code","20d8f64f":"code","db98e64d":"code","4fa7bf6a":"code","9788ab3f":"code","a6280462":"code","39fb370d":"code","5ce9abcf":"code","b6748186":"code","e4d5a042":"code","27bc8050":"code","852b0347":"code","da1ccc79":"code","a84b6332":"code","f0a1710b":"code","22c61154":"code","b189c049":"code","2e6a0bcb":"code","5e967d04":"code","832d8d6b":"code","64d61925":"code","3a8ba432":"code","4715679c":"code","b09ceafe":"code","936b2d35":"code","93b81f37":"code","1153d29a":"code","a9d3c62e":"code","fec9139e":"code","db6d314f":"code","77fb2083":"code","d4bb573f":"code","5066bd02":"code","2b24f6f1":"code","90c35bcf":"code","67dcb186":"code","f7a9f44d":"code","b8e170ef":"code","c32226c3":"code","4f7ef2f8":"code","dc0b30d9":"code","848dc337":"code","86ecdcd0":"code","8fd8c29b":"code","7a5b60ab":"code","249ca824":"code","77f00d46":"code","3e645111":"code","6e028311":"code","6166be76":"code","64b9fe93":"code","7c460c4b":"code","ec3e6da9":"code","4dd14c81":"code","7ced0417":"code","d4eda330":"code","bd919230":"code","0522242b":"code","2a081d07":"code","de1b3e44":"code","70153935":"code","ebd85c8b":"code","b198addb":"code","59c08f8d":"code","90e76121":"code","6482d4d5":"code","40c994e7":"code","dcdda11a":"code","5366ed35":"code","bc01daea":"code","4e3294ad":"code","bd2ea9d6":"code","db8e140d":"code","23238c6e":"code","e7ee287c":"code","1c7947a2":"code","781e35c5":"markdown","66b63218":"markdown","f09cd4b4":"markdown","e7e36256":"markdown","9d00fa30":"markdown","79477b11":"markdown","1179677c":"markdown","7573c7c2":"markdown","02d8c1a3":"markdown"},"source":{"03a70a9c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import SelectFromModel\n%matplotlib inline","d2bac1a8":"test = pd.read_csv('..\/input\/janatahack\/test_Yix80N0.csv')\ntrain = pd.read_csv('..\/input\/janatahack\/train_8wry4cB.csv')","0e70033f":"test.head()","bd84c108":"train.shape","20d8f64f":"train.nunique()","db98e64d":"sns.heatmap(train.isnull())\nplt.show()","4fa7bf6a":"df=train.append(test,ignore_index=True)\ndf['n_product']  = df['ProductList'].apply(lambda s : s.count(';')+1)","9788ab3f":"df['n_product'].unique()","a6280462":"sns.countplot(df['n_product'])","39fb370d":"new = df['ProductList'].str.split(\";\",expand = True)\nnew.fillna(value=0, inplace=True)","5ce9abcf":"new.head(15)","b6748186":"new1 = new[0].str.split(\"\/\",expand=True)","e4d5a042":"new1.drop(labels = 4, axis = 1, inplace = True)","27bc8050":"new1= new1.rename(columns={0: \"cat\", 1:\"scat\",2:\"sscat\", 3:\"prod\"})","852b0347":"df1 = pd.concat([df,new1],axis=1)","da1ccc79":"df1.info()","a84b6332":"dateparser = lambda x : pd.datetime.strptime(x,\"%d\/%m\/%y %H:%M\")\ndf1['startTime'] = df1['startTime'].apply(dateparser)\ndf1['endTime'] = df1['endTime'].apply(dateparser)","f0a1710b":"df1['time_difference'] = (pd.to_datetime(df1['endTime']) - pd.to_datetime(df1['startTime'])).dt.total_seconds()\/60\ndf1['st_month'] = pd.to_datetime(df1['startTime']).dt.month\ndf1['st_day'] = pd.to_datetime(df1['startTime']).dt.day\ndf1['st_hour'] = pd.to_datetime(df1['startTime']).dt.hour\n","22c61154":"def prodperhour(df):\n\n    if (df['time_difference'] == 0):\n        return 0.0\n    else:\n        return df['n_product']\/df['time_difference']\n\ndf1['prodperhour'] = df1.apply(prodperhour, axis = 1)\n                         \n                        # ['red' if x == 'Z' else 'green' for x in df['Set']]","b189c049":"df1.head(10)","2e6a0bcb":"df1['cat'].unique()","5e967d04":"df2=df1\na=0\ndf2['n_cat']=0\ncols = []\n\nfor i in df1['cat'].unique() :\n    #print(i)\n    #df2.head()\n    \n    col = 'n_'+i\n    cols.append(col)\n    df2[col] = df2.ProductList.str.contains(i)\n    df2[col] = df2[col].apply(lambda x : 1 if x else 0)\n    df2['n_cat'] = df2[col] + df2['n_cat']\n\n#df2.drop(columns = cols,inplace=True)\n\nprint(df2.columns)\n","832d8d6b":"df3=df2\n\ndf3['n_scat']=0\ncols = []\n\nfor i in df1['scat'].unique() :\n    #print(i)\n    #df2.head()\n    col = 'n_'+i\n    cols.append(col)\n    df3[col] = df3.ProductList.str.contains(i)\n    df3[col] = df3[col].apply(lambda x : 1 if x else 0)\n    df3['n_scat'] = df3[col] + df3['n_scat']\n\n#df3.drop(columns = cols,inplace=True)\n\n\nprint(df3.columns)\ndf1=df3","64d61925":"df4=df3\n\ndf4['n_sscat']=0\ncols = []\n\nfor i in df1['sscat'].unique() :\n    #print(i)\n    #df2.head()\n    col = 'n_'+i\n    cols.append(col)\n    df4[col] = df4.ProductList.str.contains(i)\n    df4[col] = df4[col].apply(lambda x : 1 if x else 0)\n    df4['n_sscat'] = df4[col] + df4['n_scat']\n\n#df3.drop(columns = cols,inplace=True)\n\n\nprint(df4.columns)\ndf1=df4","3a8ba432":"# df4=df1\n\n# cols = []\n\n# for i in df1['prod'].unique() :\n#     #print(i)\n#     #df2.head()\n#     col = 'n_'+i\n#     cols.append(col)\n#     df4[col] = df4.ProductList.str.contains(i)\n#     df4[col] = df4[col].apply(lambda x : 1 if x else 0)\n#     #df4['n_sscat'] = df4[col] + df4['n_scat']\n\n# #df3.drop(columns = cols,inplace=True)\n\n\n# print(df4.columns)\n# df1=df4","4715679c":"df1.drop(columns=['endTime','startTime','ProductList'],inplace=True)","b09ceafe":"df1.head()\n","936b2d35":"df1['n_cat'].value_counts()","93b81f37":"\n# from sklearn.preprocessing import LabelEncoder\n# le = LabelEncoder()\n#cols = ['prod']\n\ndf1 = pd.get_dummies(data = df1, columns = ['prod'])\n#df2.drop(columns='st_month',axis=1,inplace=True)\n\n#df1 = df1.drop(col['sex','region','smoker'],axis=1)\n\n#  for a in cols :\n#     df1[a] = le.fit_transform(df1[a])\ndf1.head()\n#df1 = pd.concat([df1,df2],axis=1)\n\ndf1.drop(columns=['cat','scat','sscat'],axis=1,inplace=True)","1153d29a":" df1.columns[df1.columns.duplicated()]","a9d3c62e":"df_train=df1[df1['gender'].isnull()==False].copy()\ndf_test=df1[df1['gender'].isnull()==True].copy()\n\nprint(df_train.shape,df_test.shape)","fec9139e":"test_ids = df_test['session_id'] ","db6d314f":"df_train.head()","77fb2083":"df_train['gender']=df_train['gender'].apply(lambda x : 1 if x == 'male' else 0)\ndf_train.drop(columns='session_id',axis=1, inplace=True)\ndf_test.drop(columns=['gender','session_id'],axis=1, inplace=True)","d4bb573f":"df_train.head()","5066bd02":"df_test.head()","2b24f6f1":"x = df_train.drop('gender',axis=1)\ny = df_train['gender']","90c35bcf":"\nfrom sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.25,random_state=42)","67dcb186":"from sklearn.model_selection import cross_val_score, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, roc_curve,roc_auc_score\n\ndef disp_confusion_matrix(model, x, y):\n    ypred = model.predict(x)\n    cm = confusion_matrix(y,ypred)\n    ax = sns.heatmap(cm,annot=True,fmt='d')\n\n    ax.set_xlabel('Predicted labels')\n    ax.set_ylabel('True Labels')\n    ax.set_title('Confusion Matrix')\n    plt.show()\n    \n    tp = cm[1,1]\n    fn = cm[1,0]\n    fp = cm[0,1]\n    tn = cm[0,0]\n    accuracy = (tp+tn)\/(tp+fn+fp+tn)\n    precision = tp\/(tp+fp)\n    recall = tp\/(tp+fn)\n    f1 = (2*precision*recall)\/(precision+recall)\n    print('Accuracy =',accuracy)\n    print('Precision =',precision)\n    print('Recall =',recall)\n    print('F1 Score =',f1)\n\ndef disp_roc_curve(model, xtest, ytest):\n    yprob = model.predict_proba(xtest)\n    fpr,tpr,threshold = roc_curve(ytest,yprob[:,1])\n    roc_auc = roc_auc_score(ytest,yprob[:,1])\n\n    print('ROC AUC =', roc_auc)\n    plt.figure()\n    lw = 2\n    plt.plot(fpr,tpr,color='darkorange',lw=lw,label='ROC Curve (area = %0.2f)'%roc_auc)\n    plt.plot([0,1],[0,1],color='navy',lw=lw,linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('FPR')\n    plt.ylabel('TPR')\n    plt.title('ROC Curve')\n    plt.legend(loc='lower right')\n    plt.show()","f7a9f44d":"sel = SelectFromModel(RandomForestClassifier(n_estimators = 100))\nsel.fit(xtrain, ytrain)\n","b8e170ef":"selected_feat= xtrain.columns[(sel.get_support())]\nlen(selected_feat)","c32226c3":"df1[selected_feat].head()","4f7ef2f8":"df_train=df1[df1['gender'].isnull()==False].copy()\ndf_test=df1[df1['gender'].isnull()==True].copy()\n\nprint(df_train.shape,df_test.shape)","dc0b30d9":"df_train['gender']=df_train['gender'].apply(lambda x : 1 if x == 'male' else 0)\ndf_train.drop(columns='session_id',axis=1, inplace=True)\ndf_test.drop(columns=['gender','session_id'],axis=1, inplace=True)","848dc337":"x = df_train.drop('gender',axis=1)\ny = df_train['gender']\nxtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.25,random_state=42)","86ecdcd0":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\n\nrf = RandomForestClassifier()\nrf.fit(xtrain, ytrain)\nprint('Training set score = {:.3f}'.format(rf.score(xtrain,ytrain)))\nprint('Test set score = {:.3f}'.format(rf.score(xtest,ytest)))","8fd8c29b":"\n\ndisp_confusion_matrix(rf, xtest, ytest)\ndisp_roc_curve(rf, xtest, ytest)","7a5b60ab":"\nrf.fit(x,y)\ntest_prob = rf.predict_proba(df_test)[:,1]\ndf_rf = pd.DataFrame({'session_id':test_ids,'gender':test_prob})\n","249ca824":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\n\nth = 0.5\n\ndf_rf['gender'] = df_rf['gender'].apply(lambda x : 'male' if x>th else 'female')","77f00d46":"df_rf['gender'].value_counts()\n","3e645111":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_rf.to_csv('submission-rf_'+times+'.csv',index=False)","6e028311":"pd.DataFrame({'Features':x.columns, 'Importance':rf.feature_importances_}).sort_values(by='Importance',ascending=False)","6166be76":"from xgboost import XGBClassifier\nxgb = XGBClassifier(objective='binary:logistic')\nxgb.fit(xtrain,ytrain)\nprint('Training set score = {:.3f}'.format(xgb.score(xtrain,ytrain)))\nprint('Test set score = {:.3f}'.format(xgb.score(xtest,ytest)))","64b9fe93":"\ndisp_confusion_matrix(xgb, xtest, ytest)\ndisp_roc_curve(xgb, xtest, ytest)","7c460c4b":"xgb.fit(x,y)\ntest_prob = xgb.predict_proba(df_test)[:,1]\ndf_xgb = pd.DataFrame({'session_id':test_ids,'gender':test_prob})\ndf_xgb.head()","ec3e6da9":"df_xgb['gender'] = df_xgb['gender'].apply(lambda x : 'male' if x>0.5 else 'female')\n\n","4dd14c81":"df_xgb['gender'].value_counts()","7ced0417":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_xgb.to_csv('submission-xgb'+times+'.csv',index=False)","d4eda330":"arr=[100,150,200,250]\ncv_scores = []\nfor a in arr:\n    model = XGBClassifier(objective='binary:logistic', n_jobs=4, n_estimators=a)\n    cv_score = cross_val_score(model, x, y, cv=5, scoring='roc_auc')\n    print(a, ':', cv_score)\n    cv_scores.append(cv_score)\n    \nfig, ax = plt.subplots(figsize=(14,6))\nplt.boxplot(cv_scores)\nax.set_xticklabels(arr)\nplt.xlabel('n')\nplt.ylabel('roc_auc')\nplt.show()","bd919230":"param_grid = {\n    'max_depth':[5,6],\n    'subsample':[0.8,0.9,1],\n    'colsample_bytree': [0.6,0.8,1],\n    'min_child_weight': [0.5,1],\n    'gamma': [0,0.5,1]\n}\nxgb = XGBClassifier(objective='binary:logistic', n_jobs=4, n_estimators=100)\nxgb_grid = GridSearchCV(xgb, param_grid, cv=5, scoring='roc_auc', verbose=1, n_jobs=4)\nxgb_grid.fit(x, y)","0522242b":"\nxgb_best = xgb_grid.best_estimator_\ndisp_confusion_matrix(xgb_best, xtest, ytest)\ndisp_roc_curve(xgb_best, xtest, ytest)","2a081d07":"\nxgb_best.fit(x,y)\ntest_prob = xgb_best.predict_proba(df_test)[:,1]\ndf_xgbgs = pd.DataFrame({'session_id':test_ids,'gender':test_prob})\ndf_xgbgs.head()","de1b3e44":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_xgbgs['gender'] = df_xgbgs['gender'].apply(lambda x : 'male' if x>0.5 else 'female')\ndf_xgbgs.to_csv('submission-xgbgs'+times+'.csv',index=False)","70153935":"\ndf_rfxgb=df_rf\ndf_rfxgb['gender']=0.8*df_rf['gender']+0.2*df_xgb['gender']","ebd85c8b":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_rfxgb['gender'] = df_rfxgb['gender'].apply(lambda x : 'male' if x>0.5 else 'female')\ndf_rfxgb.to_csv('submission-rfxgb_'+times+'.csv',index=False)","b198addb":"from lightgbm import LGBMClassifier\nlgb = LGBMClassifier()\nlgb.fit(xtrain,ytrain)\nprint('Training set score = {:.3f}'.format(lgb.score(xtrain,ytrain)))\nprint('Test set score = {:.3f}'.format(lgb.score(xtest,ytest)))","59c08f8d":"disp_confusion_matrix(lgb, xtest, ytest)\ndisp_roc_curve(lgb, xtest, ytest)","90e76121":"arr=[-1,10,20,30,50]\ncv_scores = []\nfor a in arr:\n    model = LGBMClassifier(objective='binary', n_jobs=4, boosting_type='gbdt', n_estimators=100, max_depth=a)\n    cv_score = cross_val_score(model, x, y, cv=5, scoring='roc_auc')\n    print(a, ':', cv_score)\n    cv_scores.append(cv_score)\n    \nfig, ax = plt.subplots(figsize=(14,6))\nplt.boxplot(cv_scores)\nax.set_xticklabels(arr)\nplt.xlabel('n')\nplt.ylabel('roc_auc')\nplt.show()","6482d4d5":"param_grid = {\n    'num_leaves':[40,60],\n    'max_depth':[-1,10],\n    'subsample':[0.8,0.9,1],\n    'colsample_bytree': [0.6,0.8,1],\n    'min_child_samples': [20,10,30],\n    'min_split_gain':[0,0.5,1]\n}\nlgb = LGBMClassifier(objective='binary', n_jobs=4, boosting_type='gbdt', learning_rate=0.01, n_estimators=100, silent=False)\nlgb_grid = GridSearchCV(lgb, param_grid, cv=5, scoring='roc_auc', verbose=1, n_jobs=4)\nlgb_grid.fit(x, y)","40c994e7":"lgb_best = lgb_grid.best_estimator_\ndisp_confusion_matrix(lgb_best, xtest, ytest)\ndisp_roc_curve(lgb_best, xtest, ytest)","dcdda11a":"lgb_best.fit(x,y)\ntest_prob = lgb_best.predict_proba(df_test)[:,1]\ndf_lgbgs = pd.DataFrame({'session_id':test_ids,'gender':test_prob})\ndf_lgbgs.head()","5366ed35":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_lgbgs['gender'] = df_lgbgs['gender'].apply(lambda x : 'male' if x>0.5 else 'female')\ndf_lgbgs.to_csv('submission-lgbgs'+times+'.csv',index=False)","bc01daea":"from catboost import CatBoostClassifier","4e3294ad":"cb = CatBoostClassifier()\ncb.fit(xtrain,ytrain)\nprint('Training set score = {:.3f}'.format(cb.score(xtrain,ytrain)))\nprint('Test set score = {:.3f}'.format(cb.score(xtest,ytest)))","bd2ea9d6":"disp_confusion_matrix(cb, xtest, ytest)\ndisp_roc_curve(cb, xtest, ytest)","db8e140d":"param_grid = {\n    'depth':[2, 3, 4],\n    'learning_rate' : [0.01, 0.05, 0.1],\n    'loss_function': ['Logloss', 'CrossEntropy'],\n    'l2_leaf_reg':np.logspace(-20, -19, 3)\n}\n\ncb = CatBoostClassifier(iterations=2500,\n                            eval_metric = 'Accuracy',\n                            leaf_estimation_iterations = 10)\n\ncb_grid = GridSearchCV(cb, param_grid, cv=5, scoring='roc_auc', verbose=1, n_jobs=4) \ncb_grid.fit(x, y)","23238c6e":"cb_best = cb_grid.best_estimator_\ndisp_confusion_matrix(cb_best, xtest, ytest)\ndisp_roc_curve(cb_best, xtest, ytest)","e7ee287c":"\ncb_best.fit(x,y)\ntest_prob = cb_best.predict_proba(df_test)[:,1]\ndf_cbgs = pd.DataFrame({'session_id':test_ids,'gender':test_prob})\ndf_cbgs.head()","1c7947a2":"import time\ntimes = time.strftime(\"%Y%m%d-%H%M%S\")\ndf_cbgs['gender'] = df_cbgs['gender'].apply(lambda x : 'male' if x>0.5 else 'female')\ndf_Cbgs.to_csv('submission-lgbgs'+times+'.csv',index=False)","781e35c5":"Awesome! No missing data :)","66b63218":"Random Forest","f09cd4b4":"Modeling","e7e36256":"CatBoost","9d00fa30":"# Janata Hack eCommerce Analytics\n\nDetermine the gender of shopper from ecommerce website data\n\nhttps:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-e-commerce-analytics-ml-hackathon","79477b11":"Gradient Boosting","1179677c":"Feature Selection","7573c7c2":"It seems there is lot of information hidden in the ProductList variable. We need to extract as much information as possible. Here are the new features I can think which we can come up from this data :\n    - Time spent in a session and other date time features\n    - category, sub-category, sub-sub category and the product\n    - number of products browsed per session\n    - number of categories browsed per session\n    - number of products per hour","02d8c1a3":"LGB"}}