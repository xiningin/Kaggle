{"cell_type":{"bcc755f5":"code","0562c639":"code","bf06ea56":"code","4e523656":"code","a361c798":"code","1fbf366a":"code","4296d7e6":"code","4ccc5964":"code","038a1c0f":"code","86aaaaae":"code","730d6e21":"code","ec06869e":"code","91bb091b":"code","044488b6":"code","8084b518":"code","24319231":"code","af8244b6":"code","accacea2":"code","f8bfe1de":"code","bd7bfbfc":"code","8572b295":"code","7222b21f":"code","4530ea6b":"code","9311de2b":"code","97d79cbf":"code","28c9de73":"code","38166df8":"code","87354660":"code","45d0a4f8":"code","ea99715a":"code","8fb5ae19":"code","06472014":"code","e5355e61":"code","46651a35":"code","98dd6f6e":"code","8e21b86e":"code","65ec2e08":"code","9c644057":"code","ff87456c":"markdown","f477bc4d":"markdown","c83a3ea8":"markdown","bacc6dac":"markdown","c0a7150f":"markdown","4d03380e":"markdown","50e704e6":"markdown","f84a5ce9":"markdown","1c0cb994":"markdown","f885152f":"markdown","708998d5":"markdown","cd402308":"markdown","08c2ab8e":"markdown","219c8bb8":"markdown"},"source":{"bcc755f5":"import pandas as pd\nimport matplotlib.pyplot as plt\n\nimport numpy as np\nimport os\nfrom sklearn.metrics import f1_score\n\nfrom fastai import *\nfrom fastai.vision import *\n\nimport torch\nimport torch.nn as nn\nimport torchvision\nimport cv2\n\nfrom tqdm import tqdm\nfrom skmultilearn.model_selection import iterative_train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MultiLabelBinarizer\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.metrics import roc_auc_score\n%load_ext autoreload\n%autoreload","0562c639":"from torchvision.models import *","bf06ea56":"model_path='.'\npath='..\/input\/histopathologic-cancer-detection\/'\ntrain_folder=f'{path}train'\ntest_folder=f'{path}test'\ntrain_lbl=f'{path}train_labels.csv'\nORG_SIZE=96\n\nbs=64\nnum_workers=None # Apprently 2 cpus per kaggle node, so 4 threads I think\nsz=96","4e523656":"from pathlib import Path\ntest_fnames=[str(file) for file in Path(test_folder).iterdir()]\n","a361c798":"df_trn=pd.read_csv(train_lbl)","1fbf366a":"df_WSI=pd.read_csv('..\/input\/histopathologiccancerwsi\/patch_id_wsi.csv')","4296d7e6":"tfms = get_transforms(do_flip=True, flip_vert=True, max_rotate=0.0, max_zoom=.15,\n                      max_lighting=0.1, max_warp=0.15)","4ccc5964":"df_notinWSI=df_trn.set_index('id').drop(df_WSI.id)","038a1c0f":"valWSI=df_WSI.groupby(by='wsi')['id'].count().sample(frac=0.23).index","86aaaaae":"trnWSI=[i[0] for i in df_WSI.groupby(by='wsi')['id'] if i[0] not in valWSI]","730d6e21":"len(trnWSI),len(valWSI)","ec06869e":"val_idx=np.hstack([df_WSI.groupby(by='wsi')['id'].indices[WSI] for WSI in valWSI])","91bb091b":"val_idx=np.append(df_notinWSI.index.values,df_WSI.id[val_idx])\n","044488b6":"trn_idx=np.hstack([df_WSI.groupby(by='wsi')['id'].indices[WSI] for WSI in trnWSI])\ntrn_idx=df_WSI.id[trn_idx]","8084b518":"val_idx=df_trn.reset_index().set_index('id').loc[val_idx,'index'].values\ntrn_idx=df_trn.reset_index().set_index('id').loc[trn_idx,'index'].values","24319231":"np.random.shuffle(val_idx)\nnp.random.shuffle(trn_idx)","af8244b6":"src = (ImageList.from_df(df_trn, path=path, suffix='.tif',folder='train')                \n                .split_by_idxs(trn_idx,val_idx)\n                .label_from_df(label_delim=' '))\nsrc.add_test(test_fnames);","accacea2":"data=ImageDataBunch.create_from_ll(src, ds_tfms=tfms, size=sz,bs=bs)\nstats=data.batch_stats()        \ndata.normalize(stats);","f8bfe1de":"def auc_score(y_pred,y_true,tens=True):\n    score=roc_auc_score(y_true[:,1],torch.sigmoid(y_pred)[:,1])\n    if tens:\n        score=tensor(score)\n    else:\n        score=score\n    return score\n\n\n\nclass FocalLoss(nn.Module):\n    def __init__(self, alpha=1, gamma=2, logits=False, reduce=True):\n        super(FocalLoss, self).__init__()\n        self.alpha = alpha\n        self.gamma = gamma\n        self.logits = logits\n        self.reduce = reduce\n    def forward(self, inputs, targets):\n        if self.logits:\n            BCE_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduce=False)\n        else:\n            BCE_loss = F.binary_cross_entropy(inputs, targets, reduce=False)\n        pt = torch.exp(-BCE_loss)\n        F_loss = self.alpha * (1-pt)**self.gamma * BCE_loss\n\n        if self.reduce:\n            return torch.mean(F_loss)\n        else:\n            return F_loss\n        \n\n","bd7bfbfc":"learn = create_cnn(\n    data,\n    densenet169,\n    path='.',    \n    metrics=[auc_score], \n    #loss_func=FocalLoss(logits=True,gamma=1),\n    ps=0.5\n)","8572b295":"x,y=learn.get_preds()","7222b21f":"auc_score(x,y)","4530ea6b":"learn.lr_find()\nlearn.recorder.plot()","9311de2b":"learn.fit_one_cycle(1,1e-2)\nlearn.recorder.plot()\nlearn.recorder.plot_losses()","97d79cbf":"learn.unfreeze()\nlearn.lr_find()","28c9de73":"learn.recorder.plot()","38166df8":"learn.fit_one_cycle(10,slice(1e-4,1e-3))","87354660":"learn.recorder.plot()","45d0a4f8":"learn.recorder.plot_losses()","ea99715a":"preds,y,losses = learn.get_preds(with_loss=True)\ninterp = ClassificationInterpretation(learn, preds, y.long(), losses)","8fb5ae19":"preds,y=learn.get_preds()\npred_score=auc_score(preds,y)\npred_score","06472014":"preds,y=learn.TTA()\npred_score_tta=auc_score(preds,y)\npred_score_tta","e5355e61":"preds_test,y_test=learn.get_preds(ds_type=DatasetType.Test)","46651a35":"preds_test_tta,y_test_tta=learn.TTA(ds_type=DatasetType.Test)","98dd6f6e":"sub=pd.read_csv(f'{path}\/sample_submission.csv').set_index('id')\nsub.head()","8e21b86e":"clean_fname=np.vectorize(lambda fname: str(fname).split('\/')[-1].split('.')[0])\nfname_cleaned=clean_fname(data.test_ds.items)\nfname_cleaned=fname_cleaned.astype(str)","65ec2e08":"sub.loc[fname_cleaned,'label']=to_np(preds_test[:,1])\nsub.to_csv(f'submission_{pred_score}.csv')","9c644057":"sub.loc[fname_cleaned,'label']=to_np(preds_test_tta[:,1])\nsub.to_csv(f'submission_{pred_score_tta}.csv')","ff87456c":"# Count per WSI id","f477bc4d":"## Get 20% of the WSIs as validation set (maybe later make sure its stratified)","c83a3ea8":"In Case I want to run quick tests use a subsample:","bacc6dac":"Defining a metric so after epoch I get the validation ROC-AUC score","c0a7150f":"### prepare submission\nI now load in the sample submission and put my predictions in the label column and save to a new file.","4d03380e":"## I add the score to the name of the file so I can later plot the leaderboard score versus my validation score\nIn the fastai course Jeremy mentions that if you have a monotonic relation between validation and LB score the way you set up your validation set matches what the test set consists of.","50e704e6":"\n## get the integer index for all the images with WSIs of the validation set","f84a5ce9":"## extract all images we dont know the WSI id of (will go into validation set)","1c0cb994":"This is a Fork of my [Densenet169](https:\/\/www.kaggle.com\/guntherthepenguin\/fastai-v1-densenet169\/) kernel. The only thing new is I included the [WSI ids](https:\/\/www.kaggle.com\/tywangty\/histopathologiccancerwsi) from this [discussion](https:\/\/www.kaggle.com\/c\/histopathologic-cancer-detection\/discussion\/83760) to reduce overfitting and correlations between validation and training set.\nThanks to [SM](https:\/\/www.kaggle.com\/sermakarevich) for the WSI set and Idea and [Taylor](https:\/\/www.kaggle.com\/tywangty) for uploading it on kaggle","f885152f":"### Predit the validation data using TTA\nHere for every image we want to predict on, n_augs images are augmented form the original image.\nWe can then compare the predictions on for example the image and the image flipped \/ roated \/ slightly different crop\/ lighting\/stretched etc. \nFor now only the diherdral and rotations are used. THis gives a nice extra percent or two when compared to the auc above after training where not TTA is used. \nI also test if mean or max is better to use on the image and its augments but it can't conclude anything yet.","708998d5":"Sometimes its important in which order the ids in the submissions are so to make sure I don't mess up I put them in the same order. My first submission had a 50% score so I somewhere messed up the order oder the matching of id to label.\nsince fname_clean is the id we can just use that as index when adding the correct label in our dataframe. ","cd402308":"## Take only Ids of which we know the WSI","08c2ab8e":"### Now predict on test set","219c8bb8":"### Warm up with frozen weight is done on a subset so we dont have to waste an entire epoch"}}