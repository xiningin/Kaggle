{"cell_type":{"cdd944e3":"code","064195b6":"code","2925ac8b":"code","c613dca0":"code","942c428a":"code","36b46c0a":"code","9c0ab2fa":"code","4b043d4e":"code","4c74c021":"code","1a67142f":"code","d8ca5ffe":"code","3ac4f876":"code","7016348e":"code","306eea8a":"code","78a60c7b":"code","5a496486":"code","37b59c26":"code","cf768646":"code","49e4be28":"code","cb8dacfa":"code","77ecf1b6":"code","d5991abe":"code","cd237ee2":"code","e676aeb2":"code","f358e47c":"code","ec4cb2af":"markdown","1fe48049":"markdown","39001c27":"markdown"},"source":{"cdd944e3":"import pandas as pd\ntrain = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/train.zip')\ntest = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/test.zip')\nsubmission = pd.read_csv('..\/input\/nyc-taxi-trip-duration\/sample_submission.zip')","064195b6":"train['pickup_datetime'] = pd.to_datetime(train['pickup_datetime'])\ntrain['dropoff_datetime'] = pd.to_datetime(train['dropoff_datetime'])\ntest['pickup_datetime'] = pd.to_datetime(test['pickup_datetime'])","2925ac8b":"train['pickup_hour'] = train['pickup_datetime'].dt.hour\ntest['pickup_hour'] = test['pickup_datetime'].dt.hour","c613dca0":"columns = ['passenger_count', 'pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 'pickup_hour']\nX_train = train[columns]\nY_train = train['trip_duration']\nX_test = test[columns]","942c428a":"X_train.shape, Y_train.shape, X_test.shape","36b46c0a":"X_train_norm = (X_train - X_train.mean()) \/ X_train.std()\nY_train_norm = (Y_train - Y_train.mean()) \/ Y_train.std()\nX_test_norm = (X_test - X_test.mean()) \/ X_test.std()","9c0ab2fa":"X_train_norm.mean()","4b043d4e":"X_train_norm.std()","4c74c021":"Y_train_norm.mean()","1a67142f":"Y_train_norm.std()","d8ca5ffe":"X_test_norm.mean()","3ac4f876":"X_test_norm.std()","7016348e":"import tensorflow as tf","306eea8a":"model = tf.keras.models.Sequential() \nmodel.add(tf.keras.layers.Dense(128, activation = 'relu', input_shape = (6,) ))\nmodel.add(tf.keras.layers.Dense(128, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(128, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(64, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(64, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(64, activation = 'relu'))\nmodel.add(tf.keras.layers.Dense(1))","78a60c7b":"model.summary()","5a496486":"model.compile(loss = tf.keras.losses.mse, #\uc2e4\uc81c\uac12\uacfc \uc608\uce21\uac12\uc758 \ucc28\uc774\ub97c \uc218\uce58\ud654\ud558\ub294 \ud568\uc218\n             optimizer = tf.keras.optimizers.Adam(lr = 0.0001), #\uc190\uc2e4 \ud568\uc218\uc758 \uac12\uc744 \uc904\uc5ec\ub098\uac00\uba74\uc11c \ud559\uc2b5\ud558\ub294 \ubc29\ubc95\uc740 \uc5b4\ub5a4 \uc635\ud2f0\ub9c8\uc774\uc800\ub97c \uc0ac\uc6a9\ud558\ub290\ub0d0\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9d0. lr(Learning Rate) \ud559\uc2b5\uc728 \n             metrics = ['mse'])","37b59c26":"history = model.fit(X_train_norm, Y_train_norm, batch_size = 300, epochs = 30, validation_split = 0.2) #batch_size=300","cf768646":"pd.DataFrame(history.history)","49e4be28":"pd.DataFrame(history.history).reset_index()","cb8dacfa":"pd.DataFrame(history.history).reset_index().plot('index','loss')","77ecf1b6":"pd.DataFrame(history.history).reset_index().plot('index','val_loss')","d5991abe":"Y_train_norm","cd237ee2":"submission['trip_duration'] = model.predict(X_test_norm) * Y_train.std() + Y_train.mean()","e676aeb2":"submission['trip_duration']","f358e47c":"submission.to_csv('NYTaxi_NeuralNetwork_batchsize300.csv', index=False)","ec4cb2af":"# \uc21c\uc804\ud30c(Foward Propagation) : \uc785\ub825\uce35\uc5d0\uc11c \ucd9c\ub825\uce35 \ubc29\ud5a5\uc73c\ub85c \uc608\uce21\uac12\uc758 \uc5f0\uc0b0\uc774 \uc9c4\ud589\ub418\ub294 \uacfc\uc815","1fe48049":"# Optimizer\n\ubc30\uce58 \uacbd\uc0ac \ud558\uac15\ubc95(Batch Gradient Descent) : \uc624\ucc28(loss)\ub97c \uad6c\ud560 \ub54c \uc804\uccb4 \ub370\uc774\ud130\ub97c \uace0\ub824\ud568. \ud55c \ubc88\uc758 \uc5d0\ud3ec\ud06c\uc5d0 \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218 \uc5c5\ub370\uc774\ud2b8\ub97c \ub2e8 \ud55c \ubc88 \uc218\ud589\ud568.\n\n\ud655\ub960\uc801 \uacbd\uc0ac \ud558\uac15\ubc95(Stochastic Gradient Descent, SGD) : \ub79c\ub364\uc73c\ub85c \uc120\ud0dd\ud55c \ud558\ub098\uc758 \ub370\uc774\ud130\ub9cc \uace0\ub824\ud568. \ub9e4\uac1c\ubcc0\uc218 \ubcc0\uacbd\ud3ed\uc774 \ubd88\uaddc\uce59\ud558\uc9c0\ub9cc, \uc18d\ub3c4\ub294 \ubc30\uce58 \uacbd\uc0ac \ud558\uac15\ubc95\ubcf4\ub2e4 \ube60\ub984.\n\n\ubbf8\ub2c8 \ubc30\uce58 \uacbd\uc0ac \ud558\uac15\ubc95(Mini-Batch Gradient Descent): \uc815\ud574\uc9c4 \uc591\uc5d0 \ub300\ud574\uc11c\ub9cc \uacc4\uc0b0\ud558\uc5ec \ub9e4\uac1c \ubcc0\uc218\uc758 \uac12\uc744 \uc870\uc815\ud558\ub294 \uacbd\uc0ac \ud558\uac15\ubc95. \uc804\uccb4 \ub370\uc774\ud130\ub97c \uacc4\uc0b0\ud558\ub294 \uac83\ubcf4\ub2e4 \ube60\ub974\uace0, SGD\ubcf4\ub2e4 \uc548\uc815\uc801\uc784.\n\n\ubaa8\uba58\ud140(Momentum) SGD : \ubaa8\uba58\ud140 SGD\ub294 \uacbd\uc0ac \ud558\uac15\ubc95\uc5d0 \uad00\uc131\uc744 \ub354 \ud574\uc90c. \uae30\uc874\uc758 \uacbd\uc0ac \ud558\uac15\ubc95\uc740 \ub85c\uceec \ubbf8\ub2c8\uba48\uc5d0 \ub3c4\ub2ec\ud558\uc600\uc744 \ub54c\uc5d0 \uae30\uc6b8\uae30\uac00 0\uc774\ub77c\uc11c \uacc4\uc0b0\uc774 \ub05d\ub098\uc9c0\ub9cc, \ubaa8\uba58\ud140 \ubc29\ubc95\uc740 \uad00\uc131\uc758 \ud798\uc744 \ube4c\ub824 \ub85c\uceec \ubbf8\ub2c8\uba48\uc5d0\uc11c \ud0c8\ucd9c\ud568.\n\n\uc544\ub2e4\uadf8\ub77c\ub4dc(Adagrad): \uac01 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc11c\ub85c \ub2e4\ub978 \ud559\uc2b5\ub960\uc744 \uc801\uc6a9\uc2dc\ud0b4. \ubcc0\ud654\uac00 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud559\uc2b5\ub960\uc774 \uc791\uac8c \uc124\uc815\ub418\uace0, \ubcc0\ud654\uac00 \uc801\uc740 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud559\uc2b5\ub960\uc744 \ub192\uac8c \uc124\uc815\uc2dc\ud0b4.\n\n\uc54c\uc5e0\uc5d0\uc2a4\ud504\ub86d(RMSprop) : \uc544\ub2e4\uadf8\ub77c\ub4dc\ub294 \ud559\uc2b5\uc744 \uacc4\uc18d \uc9c4\ud589\ud55c \uacbd\uc6b0, \ud559\uc2b5\ub960\uc774 \uc9c0\ub098\uce58\uac8c \ub5a8\uc5b4\uc9c4\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\uc74c. \uc774\ub97c \ub2e4\ub978 \uc218\uc2dd\uc73c\ub85c \ub300\uccb4\ud568.\n\n\uc544\ub2f4(Adam) : \uc54c\uc5e0\uc5d0\uc2a4\ud504\ub86d\uacfc \ubaa8\uba58\ud140 \ub450 \uac00\uc9c0\ub97c \ud569\uce5c \ub4ef\ud55c \ubc29\ubc95, \ubc29\ud5a5\uacfc \ud559\uc2b5\ub960(\uc2a4\ud15d\uc0ac\uc774\uc988) \ub450 \uac00\uc9c0\ub97c \ubaa8\ub450 \uc7a1\uae30 \uc704\ud55c \ubc29\ubc95","39001c27":"# loss\nclassifier\ubb38\uc81c\ub294 CrossEntropy, \nregression\ubb38\uc81c\ub294 MSE(Mean Squared Error)\n\nBinary classifier\ub294 binary_crossentropy \uc0ac\uc6a9,\nMulti-Class Classifier\ub294 categorical_crossentropy \uc0ac\uc6a9"}}