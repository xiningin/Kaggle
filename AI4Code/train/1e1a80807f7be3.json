{"cell_type":{"e01990c7":"code","51452d05":"code","f3384365":"code","9fa07823":"code","6a12c046":"code","20aac6df":"code","09b40cfd":"code","6a713444":"code","d9be392b":"code","c4cf2aea":"code","f4313637":"code","cf89d326":"code","4d6f5150":"code","f3db3ff9":"code","a0416c36":"code","a49f3101":"code","06d36a7c":"code","d17e50d7":"markdown","b553d0e2":"markdown","837ad353":"markdown","7eb28915":"markdown","0ace6a7a":"markdown","ef07df89":"markdown","00d41840":"markdown","dc3621df":"markdown","8bd4e108":"markdown","88bac75a":"markdown"},"source":{"e01990c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","51452d05":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","f3384365":"# read in data file \ncsv_file = '\/kaggle\/input\/drug200.csv'\n\ndf = pd.read_csv(csv_file)\ndf.head()","9fa07823":"df.info()","6a12c046":"df.shape","20aac6df":"df.dtypes","09b40cfd":"df.isnull().sum()","6a713444":"counts = df['Drug'].value_counts().sort_values().plot(kind='bar')\nplt.title('Drugs to Administer')\nplt.xlabel('Drug Type')\nplt.ylabel('Total Administered')\nplt.show()","d9be392b":"# features\/indepenedent variable\nX = df.drop(columns='Drug').values\nprint(X[:5])\n\n# target variable\nY = df['Drug'].values\nprint(Y[:5])","c4cf2aea":"# 'Sex' feature\nle_sex = LabelEncoder()\n# fit object with values of features\nle_sex.fit(['M', 'F'])\n# transfrom values\nX[:,1] = le_sex.transform(X[:,1])\n\n# 'BP' features\nle_bp = LabelEncoder()\n# fit object with values of features\nle_bp.fit(['HIGH', 'NORMAL', 'LOW'])\n# transfrom values\nX[:,2] = le_bp.transform(X[:,2])\n\n# 'Cholesterol'\nle_chol = LabelEncoder()\n# fit object with values of features\nle_chol.fit(['HIGH', 'NORMAL'])\n# transfrom values\nX[:,3] = le_chol.transform(X[:,3])\n\nX[:5]","f4313637":"x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=4)\nprint(x_train.shape, y_train.shape)\nprint(x_test.shape, y_test.shape)","cf89d326":"# tree object\nTree = DecisionTreeClassifier()\n# fit Tree object with training values\nTree.fit(x_train, y_train)","4d6f5150":"# estimates of testing set\nyhat = Tree.predict(x_test)\nyhat[:5]","f3db3ff9":"# create new dataframe showing differences in estimated and actual\npred_act = pd.DataFrame({'Actual': y_test, 'Estimated':yhat})\npred_act.head(10)","a0416c36":"from sklearn.metrics import classification_report\n\nreport = classification_report(y_test, yhat)\nprint(report)\n# Score of the model ie accuracy\naccuracy = Tree.score(x_test, y_test)\nprint('Model has an accuracy score of: ', str(round(accuracy*100, 2)), '%')","a49f3101":"from sklearn.tree import export_graphviz\nimport graphviz","06d36a7c":"# feature and target columns\nfeatures = df.columns[:5]\ntarget = df['Drug'].unique().tolist()\n\ndata = export_graphviz(Tree, out_file=None,\n                      feature_names=features,\n                      class_names=target, filled=True,\n                      rounded=True, special_characters=True)\n\n# create and show graph\ngraph = graphviz.Source(data)\ngraph","d17e50d7":"## Visualize Decision Tree","b553d0e2":"## Import necessary libraries","837ad353":"**Create Tree object and Fit it with training set**","7eb28915":"## Model Evaluation","0ace6a7a":"### Use LabelEncoder() to convert categorical variables to numeric. (Alternatively, use pd.get_dummies()).","ef07df89":"**Import Necessary Libraries**","00d41840":"**Train the Model**","dc3621df":"### The Model has:  \n\n1) An F1 accuracy score of 95%  \n2) A Precision score of 96%  \n3) A recall score of 95%  ","8bd4e108":"## Explore Dataset","88bac75a":"## Build Model"}}