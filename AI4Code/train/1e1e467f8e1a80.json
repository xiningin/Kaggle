{"cell_type":{"08ac4257":"code","e054416f":"code","aaa7c3e4":"code","cfecef89":"code","b87e170e":"code","0b1dc735":"code","46a63864":"code","42c64a9d":"code","ca32dbce":"code","89147c25":"code","f43a5ed4":"code","16aec0b6":"code","9d0a01dd":"code","b9f593e5":"markdown","c85e534d":"markdown","4dbbc17d":"markdown","473e4dd7":"markdown","45fa2068":"markdown","b1cb064f":"markdown"},"source":{"08ac4257":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e054416f":"#load data into a csv\ndf =  pd.read_csv('\/kaggle\/input\/insurance.txt', sep='\\t', header=0)\ndf.head(10)\n","aaa7c3e4":"#changing y so that it it float instead of str\ndf['Y'] = df['Y'].str.replace(',','.')\ndf[\"Y\"] = pd.to_numeric(df[\"Y\"])","cfecef89":"#store the columns as separate lists\nx = list(df[\"X\"])\ny = list(df[\"Y\"])\n\npd.to_numeric(y)\n\ntype(y[0])","b87e170e":"len(x),len(y),type(x),type(y)","0b1dc735":"a = 5\ntype(1.0*a)","46a63864":"#method for calculating mean\n#this method takes a list X and provides the mean\ndef mean(X):\n    return sum(X)\/(1.00*len(X))\n\n\n# B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) \/ sum( (x(i) - mean(x))^2 )\n# variance  =  sum( (x(i) - mean(x))^2\n\n#method for calculating variance \n#this method accepts a list X and its mean m and returns a variance value\ndef variance(X,m) : \n    return sum(list((i-m)**2 for i in X))","42c64a9d":"variance(x,mean(x))","ca32dbce":"# B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) \/ sum( (x(i) - mean(x))^2 )\n\n# covariance  = sum((x(i) - mean(x)) * (y(i) - mean(y)))   \n\n# method for calculating covariance \ndef covariance(X,Y ,m_x,m_y):\n\tC = 0\n\tfor i in range(len(x)):\n\t\tC = C+ (X[i] - m_x) * (Y[i] - m_y)\n\treturn C","89147c25":"def coeffcients (X,Y):\n    X_mean = mean(X)\n    Y_mean = mean(Y)\n    \n    B1 = covariance(X,Y,X_mean,Y_mean) \/ variance(X,X_mean)\n    B0 = Y_mean - (B1 * X_mean)\n    \n    return [B0,B1]","f43a5ed4":"b0, b1 = coeffcients(x,y)\nb0, b1\n\npred_for = [i for i in range(0,130,3)]\nprediction =[]\nfor yhat in pred_for:\n    prediction.append(b0 + b1 * yhat)\nprediction","16aec0b6":"#visualising our system\nimport numpy as np \nimport seaborn as sns; sns.set()\nimport matplotlib.pyplot as plt\nimport matplotlib.lines as mlines\n\nplt.figure(figsize=(26, 15))\nax = sns.scatterplot(x='X', y='Y', data=df,s=444,color=\"y\")\n\nkk=150\nii = [i for i in range(22+kk,3205+kk)]\n\nSS = abs(np.sin(ii)*500)\n\nplt.scatter(x=pred_for, y=prediction, color='r',s=SS)\n\nXX = 79.2\nYY = b0 + b1 * XX\nYY,ax.scatter(x=XX, y=YY, color='#ffcc5f',s = 16000)\n","9d0a01dd":"import numpy as np \n\n# B1 = covariance(X,Y,X_mean,Y_mean) \/ variance(X,X_mean)\n# B0 = Y_mean - (B1 * X_mean)\n\n\nb1,b0 =0,0\nprint(b1,b0)\n\n\nb1 = np.cov(x, y)[0][1]\/ np.var(x)\nb0 = np.mean(y) - (b1 * np.mean(x))\n\n\nXX = 79.2\nYY = b0 + b1 * XX\n\nYY","b9f593e5":"# step 1 : calculate mean and variance\n\n##  mean = sum (values_in_list)\/ values_count\n\n## variance = sum(values_in_list-mean)**2","c85e534d":"# Calculate the coefficients(B1,B0)\n\n# B1 = covariance(x, y) \/ variance(x)\n##B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) \/ sum( (x(i) - mean(x))^2 )\n\n# B0 = mean(y) - B1 * mean(x)","4dbbc17d":"# Loading the data","473e4dd7":"# Step 2 : Calculate Covariance \n\n## covariace = sum( (values in x ) - x_mean  * ((values in y ) - x_mean) )","45fa2068":"# implementing the same operation using numpy.","b1cb064f":"# in simple linear regression we can use statistics to find out the coefficients to make predictions for given input data. \n\n# y = (b0 + b1)* x\n\n# (b0 & b1) are the coefficients (weights) that must be estimated using the training data\n\n# then they can be used to predict output y given any x.\n\n# following is the formula to calculate the coefficient \n\n# B1 = sum((x(i) - mean(x)) * (y(i) - mean(y))) \/ sum( (x(i) - mean(x))^2 )\n### B1 = covariance(x, y) \/ variance(x)\n# B0 = mean(y) - B1 * mean(x)\n\n# this is a very simple way to calculate the weights therefore the accuracy will be low\n"}}