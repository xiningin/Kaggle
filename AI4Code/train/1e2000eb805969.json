{"cell_type":{"e178a0a5":"code","a0b862c8":"code","ea528a90":"code","ed9dc33b":"code","489169a6":"code","1816daae":"code","aa40ad77":"code","e63ae562":"code","901aea8f":"code","07f1c5f6":"code","5fdddff3":"code","9e516037":"code","de735c1d":"code","7992d08a":"code","47708c2c":"code","c0cc6cd6":"code","a08766c4":"code","613e7e0d":"code","1a876a0d":"code","e5b45e18":"code","1ed3002c":"code","01c33070":"code","2912d373":"code","5ce72740":"code","3af69fa8":"code","f1af5ddd":"code","9b0c9be6":"code","057d5109":"code","643570fd":"code","32e94733":"code","15d5b4b6":"markdown","3cb13629":"markdown","43dec68a":"markdown","13586eef":"markdown","53fb60ff":"markdown","e5e56ecb":"markdown","27e0d0c8":"markdown","0ac535a7":"markdown","59471a57":"markdown","e95fe192":"markdown","4d2c4405":"markdown","875d1414":"markdown","a14e97e6":"markdown","eaa3c21d":"markdown"},"source":{"e178a0a5":"!python3 -m pip install -U pip\n!python3 -m pip install -U datatable","a0b862c8":"## edit the paths to the downloaded datasets of Avazu\nPATH_TRAIN = '..\/input\/avazu-ctr-prediction\/train.gz'\nPATH_TEST = '..\/input\/avazu-ctr-prediction\/test.gz'\n\nimport datatable as dt","ea528a90":"train = dt.fread(PATH_TRAIN)\ntrain","ed9dc33b":"test = dt.fread(PATH_TEST)\ntest","489169a6":"train[:, dt.update(hour=dt.as_type(dt.str.slice(dt.as_type(dt.f.hour, str), 6, 8), int))]\ndel train['id']\ntrain.head()","1816daae":"test_ids = test['id']\ntest_ids.head()","aa40ad77":"test[:, dt.update(hour=dt.as_type(dt.str.slice(dt.as_type(dt.f.hour, str), 6, 8), int))]\ndel test['id']\ntest.head()","e63ae562":"valid_data = train[dt.f.hour == 23, [col for col in train.names if col != 'click']]\nvalid_data.head()","901aea8f":"valid_target = train[dt.f.hour == 23, 'click']\nvalid_target.head()","07f1c5f6":"train_data = train[dt.f.hour != 23, [col for col in train.names if col != 'click']]\ntrain_data.head()","5fdddff3":"train_target = train[dt.f.hour != 23, 'click']\ntrain_target.head()","9e516037":"from datatable.models import Ftrl\n\nmodel_ftrl_1 = Ftrl()\nmodel_ftrl_1.fit(train_data, train_target)\nmodel_ftrl_1","de735c1d":"preds_valid_1 = model_ftrl_1.predict(valid_data)\npreds_valid_1.head()","7992d08a":"preds_test_1 = model_ftrl_1.predict(test)\npreds_test_1.head()","47708c2c":"model_ftrl_1.feature_importances[:, :, dt.sort(-dt.f.feature_importance)]","c0cc6cd6":"preds = dt.cbind(valid_target, preds_valid_1)\npreds[:, -dt.mean(dt.f.click * dt.math.log(dt.f['True']) + (1-dt.f.click) * dt.math.log(dt.f['False']))][0, 0]","a08766c4":"submission_1 = dt.Frame(id=test_ids, click=preds_test_1['True'])\nsubmission_1.to_csv('submission_1.csv')\nsubmission_1.head()","613e7e0d":"model_ftrl_2 = Ftrl(nepochs=3, nbins=10**8)\nmodel_ftrl_2.fit(train_data, train_target)\nmodel_ftrl_2","1a876a0d":"model_ftrl_2.feature_importances[:, :, dt.sort(-dt.f.feature_importance)]","e5b45e18":"preds_valid_2 = model_ftrl_2.predict(valid_data)\npreds_valid_2.head()","1ed3002c":"preds_test_2 = model_ftrl_2.predict(test)\npreds_test_2.head()","01c33070":"preds = dt.cbind(valid_target, preds_valid_2)\npreds[:, -dt.mean(dt.f.click * dt.math.log(dt.f['True']) + (1-dt.f.click) * dt.math.log(dt.f['False']))][0, 0]","2912d373":"submission_2 = dt.Frame(id=test_ids, click=preds_test_2['True'])\nsubmission_2.to_csv('submission_2.csv')\nsubmission_2.head()","5ce72740":"submission_ensemble = dt.cbind(submission_1, submission_2)\nsubmission_ensemble[:, dt.update(click = 0.5 * dt.f.click + 0.5 * dt.f['click.0'])]\ndel submission_ensemble[:, ['id.0', 'click.0']]\nsubmission_ensemble.to_csv('submission_ensemble.csv')\nsubmission_ensemble.head()","3af69fa8":"import datatable as dt\nfrom datatable.models import Ftrl","f1af5ddd":"train = dt.fread('..\/input\/tradeshift-text-classification\/train.csv.gz')\ntrain.head()","9b0c9be6":"test = dt.fread('..\/input\/tradeshift-text-classification\/test.csv.gz')\ntest.head()","057d5109":"train_labels = dt.fread('..\/input\/tradeshift-text-classification\/trainLabels.csv.gz')\ntrain_labels.head()","643570fd":"test_ids = test['id']\n\ndel train['id']\ndel test['id']\n\nsubmission = dt.Frame()\n\nfor target in train_labels.names[1:]:\n    print(f'Model for target {target}')\n\n    model_ftrl = Ftrl(nepochs=5, nbins=10**8, lambda1=0.1)\n    model_ftrl.fit(train, train_labels[target])\n\n    preds_test = model_ftrl.predict(test)\n    submission_target = dt.Frame(id_label=test_ids[:, dt.as_type(dt.f.id, str) + f'_{target}'],\n                                 pred=preds_test['True'])\n    submission.rbind(submission_target)","32e94733":"submission.to_csv('submission.csv')\nsubmission.head()","15d5b4b6":"**Exercise 97: Create `submission_1` in the submission format of the competition, write it as `submission_1.csv` and submit it on Kaggle**","3cb13629":"**Exercise 96: Display the feature importances of `model_ftrl_1` in descending order and calculate the logloss of `valid_target` and `preds_valid_1`**","43dec68a":"**Exercise 94: Split `train` into `valid_data`, `valid_target` for rows where `hour=23` and rest as `train_data`, `train_target`**","13586eef":"<center>\n    This is Set 10: Capstone Projects (Exercises 91-100) of <b>DatatableTon<\/b>: <i>\ud83d\udcaf datatable exercises<\/i>\n    <br>\n    You can find all the exercises and solutions on <a href=\"https:\/\/github.com\/vopani\/datatableton#exercises-\">GitHub<\/a>\n<\/center>","53fb60ff":"**Exercise 91: Read `train.gz` and `test.gz` and assign it to `train` and `test` respectively**","e5e56ecb":"**Exercise 93: Assign the column `id` to `test_ids`, drop it from `test` and update the `hour` column with the hour as an integer in `test`**","27e0d0c8":"\u2705 This completes Set 10: Capstone Projects (Exercises 91-100) and concludes **DatatableTon**: *\ud83d\udcaf datatable exercises*\n\nHope these exercises enabled you to learn more about the Python datatable library. If this project made you go from an amateur to a datatable ninja or helped you get a deeper understanding of datatable or was useful in teaching datatable to others, please share your thoughts and any other feedback or suggestions on our [GitHub Repository](https:\/\/github.com\/vopani\/datatableton) where you can also find all the exercises and solutions along with future updates.","0ac535a7":"**Exercise 95: Train a FTRL model `model_ftrl_1` using `train_data` and `train_target` and assign the predictions of `valid_data` to `preds_valid_1` and of `test` to `preds_test_1`**","59471a57":"**Prerequisites**\n* The `datatable` package should be upgraded to the latest version (or v1.0.0+).\n* The datasets from the [Avazu](https:\/\/www.kaggle.com\/c\/avazu-ctr-prediction\/data) competition on kaggle will be used for the exercises and needs to be downloaded manually.\n* It is encouraged to use your own datasets for the last exercise but you can use the datasets from the [Tradeshift](https:\/\/www.kaggle.com\/c\/tradeshift-text-classification) competition on kaggle for practise.","e95fe192":"**Exercise 99: Submit a ensemble of `model_ftrl_1` and `model_ftrl_2` by averaging the predictions as `submission_ensemble`**","4d2c4405":"**Exercise 92: Drop the `id` column and update the `hour` column with the hour as an integer in `train`**","875d1414":"**Exercise 98: Train another FTRL model `model_ftrl_2` with `nepochs=3`, `nbins=10 ** 8`, display it's feature importances, score & evaluate it's logloss on `valid_data` and submit the predictions `preds_test_2` of `test` as `submission_2`**","a14e97e6":"<center>\n    <h1>DatatableTon<\/h1>\n    \ud83d\udcaf datatable exercises\n    <br>\n    <br>\n    <a href='https:\/\/github.com\/vopani\/datatableton\/blob\/master\/LICENSE'>\n        <img src='https:\/\/img.shields.io\/badge\/license-Apache%202.0-blue.svg?logo=apache'>\n    <\/a>\n    <a href='https:\/\/github.com\/vopani\/datatableton'>\n        <img src='https:\/\/img.shields.io\/github\/stars\/vopani\/datatableton?color=yellowgreen&logo=github'>\n    <\/a>\n    <a href='https:\/\/twitter.com\/vopani'>\n        <img src='https:\/\/img.shields.io\/twitter\/follow\/vopani'>\n    <\/a>\n<\/center>","eaa3c21d":"**Exercise 100: Use datatable on your own datasets and projects**"}}