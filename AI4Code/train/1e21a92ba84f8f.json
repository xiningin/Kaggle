{"cell_type":{"df60d0e1":"code","cfa669b8":"code","185bc5fe":"code","3d388295":"code","a9f1a62f":"code","013b0c41":"code","74304242":"code","f6fde054":"code","923a6867":"code","13c8c5e8":"code","0ff4997e":"code","6689c50f":"code","1d47a1d4":"code","a030193f":"code","871a4dce":"code","6a44b9ab":"code","1c180692":"code","e898bfd8":"code","39e1e432":"code","445bd230":"code","0f1382bf":"code","b6f17961":"code","1ad7001a":"code","66af2d63":"code","c7b422ea":"code","982169a4":"code","09a1cdf6":"code","495336d4":"markdown","1249a898":"markdown","dc3d1a9a":"markdown","91af51e9":"markdown","5f27cc4d":"markdown","f609832e":"markdown","2d160e3e":"markdown","b131e609":"markdown","4ec86ff7":"markdown","c2fea4c2":"markdown","4029238e":"markdown","d4939e8c":"markdown","c1663ebb":"markdown","89eaeae7":"markdown","d736b457":"markdown","50083b7e":"markdown"},"source":{"df60d0e1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import datasets, linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n\nlabelencoder = LabelEncoder()\n%matplotlib inline\n\nfrom sklearn.datasets import load_boston\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","cfa669b8":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()\n","185bc5fe":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","3d388295":"cols = train_data.columns[:30] # first 30 columns\ncolours = ['#000099', '#ffff00'] # specify the colours - yellow is missing. blue is not missing.\nsns.heatmap(train_data[cols].isnull(), cmap=sns.color_palette(colours))","a9f1a62f":"train_data['Title'] = train_data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntest_data['Title'] = test_data['Name'].str.split(\", \", expand=True)[1].str.split(\".\", expand=True)[0]\ntrain_data.head()\ntest_data.head()","013b0c41":"train_data.drop('Cabin', axis=1, inplace=True)\ntrain_data.drop('Name', axis=1, inplace=True)\n#train_data.drop('Embarked', axis=1, inplace=True)\n\nmed = train_data['Age'].median()\nprint(med)\ntrain_data['Age'] = train_data['Age'].fillna(med)\ntrain_data.head()","74304242":"test_data.drop('Cabin', axis=1, inplace=True)\ntest_data.drop('Name', axis=1, inplace=True)\n#test_data.drop('Embarked', axis=1, inplace=True)\n\nmed = test_data['Age'].median()\nprint(med)\ntest_data['Age'] = test_data['Age'].fillna(med)\ntest_data.head()","f6fde054":"test_data['Embarked'] = test_data['Embarked'].fillna('S')\ntest_data.isnull().sum()","923a6867":"def dummyEncode(df):\n    columnsToEncode = list(df.select_dtypes(include=['category','object']))\n    le = LabelEncoder()\n    for feature in columnsToEncode:\n        try:\n            df[feature] = le.fit_transform(df[feature])\n        except:\n            print('Error encoding '+feature)\n    return df\n","13c8c5e8":"train_data = dummyEncode(train_data)\ntrain_data.Embarked.head()","0ff4997e":"test_data = dummyEncode(test_data)\ntest_data.head()","6689c50f":"sns.boxplot(x=\"Survived\", y=\"Fare\", data=train_data)","1d47a1d4":"sns.boxplot(x=\"Title\", y=\"Fare\", data=train_data)","a030193f":"sns.boxplot(x=\"Title\", y=\"Embarked\", data=train_data)","871a4dce":"plt.figure(figsize=(5,5))\nbarSvS = sns.countplot(x = 'Survived', hue = 'Sex', data = train_data)\nplt.title(\"SURVIVED AND SEX\",size=15)\nbarSvS.legend([\"Male\", \"Female\"])","6a44b9ab":"plt.figure(figsize=(5,5))\nbarSvP =sns.countplot(x = 'Survived', hue = 'Pclass', data = train_data)\nplt.title(\"SURVIVED AND PCLASS\",size=15)\nbarSvP.legend([\"First Class\", \"Second Class\", \"Third Class\"])","1c180692":"plt.figure(figsize=(5,5))\nbarSvP =sns.countplot(x = 'Survived', hue = 'Embarked', data = train_data)\nplt.title(\"SURVIVED AND EMBARKED\",size=15)","e898bfd8":"sns.relplot(x=\"Embarked\", y=\"Sex\", hue=\"Survived\", data=train_data)","39e1e432":"sns.relplot(x=\"Embarked\", y=\"Title\", hue=\"Survived\", data=train_data)","445bd230":"dataset = pd.get_dummies(train_data, columns = [\"Title\", \"Embarked\"])\ntrain_data.Survived = train_data.Survived.astype('int')\n\ntrain = dataset[:len(train_data)]\ntest = dataset[len(test_data):]\n\ntest.drop(labels=['Survived'], axis=1, inplace=True)\ny=train.Survived\nX=train.drop('Survived', axis=1)\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 473, random_state = 2)","0f1382bf":"model_1 = RandomForestClassifier(n_estimators=100)\nmodel_1.fit(X_train, y_train)\n\npredict1 = model_1.predict(X_val)\nacuracy1 = accuracy_score(predict1, y_val)\nprint('Accuracy: ', acuracy1)","b6f17961":"model_2 = GradientBoostingClassifier(n_estimators=200, max_depth=3, learning_rate=0.05)\nmodel_2.fit(X_train, y_train)\n\npredict2 = model_2.predict(X_val)\nacuracy2 = accuracy_score(predict2, y_val)\nprint('Accuracy: ', acuracy2)","1ad7001a":"model_3 = LogisticRegression(random_state=0)\nmodel_3.fit(X_train, y_train)\n\npredict3 = model_3.predict(X_val)\nacuracy3 = accuracy_score(predict3, y_val)\nprint('Accuracy: ', acuracy3)","66af2d63":"model_4 =  DecisionTreeClassifier()\nmodel_4.fit(X_train, y_train)\n\npredict4 = model_4.predict(X_val)\nacuracy4 = accuracy_score(predict4, y_val)\nprint('Accuracy: ', acuracy4)","c7b422ea":"df = pd.DataFrame({'Random Forest': acuracy1, 'Gradient': acuracy2, 'Logistic': acuracy3, ' Decision Tree': acuracy4} , index=[0])\ndf.rename(index={0:'Accuracy'}, inplace=True)\ndf","982169a4":"y_train = train_data['Survived']\nX_train = train_data[['Title','Embarked', 'Pclass', 'Age', 'Sex']]\n\nX_test = test_data[['Title','Embarked', 'Pclass', 'Age', 'Sex']]\nselected_columns = X_train[['Title', 'Pclass', 'Age', 'Sex']]\ndf1 = selected_columns.copy()\ndf2 = []\nX_train['Embarked'] = X_train['Embarked'].fillna('S')\nfor dataset in X_train['Embarked']:\n    if dataset == 'S':\n        df2.append(0)\n    if dataset == 'C':\n        df2.append(1)\n    if dataset == 'Q':\n        df2.append(2)\n\ndf1['Embarked'] = df2\ny_train = y_train.reindex(X_test.index)\nX_train = X_train.reindex(X_test.index)\ndf1 = X_test.reindex(X_test.index)","09a1cdf6":"final_model = GradientBoostingClassifier(n_estimators=419, max_depth=7, learning_rate=0.1)\nfinal_model.fit(df1, y_train)\n\nfinal_predictions = final_model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': final_predictions})\nfinal_accuracy = accuracy_score(final_predictions, y_train)\nprint('Accuracy: ', final_accuracy)\n\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\noutput.head()","495336d4":"<a id = \"decision\"><\/a>\n### Decision Tree","1249a898":"<a id = \"final\"><\/a>\n## Final Accuracies ","dc3d1a9a":"# Titanic Data Competiton","91af51e9":"<a id = \"models\"><\/a>\n## Models","5f27cc4d":"<a id = \"logistic\"><\/a>\n### Logistic Regression ","f609832e":"<a id = \"going_data\"><\/a>\n# Going through the Data","2d160e3e":"<a id = \"analysis\"><\/a>\n# Analysis","b131e609":"<a id=\"import\"><\/a>\n# Import Libraries","4ec86ff7":"<a id = \"visual\"><\/a>\n## Visualizations","c2fea4c2":"<a id = \"feature\"><\/a>\n# Feature Engineering","4029238e":"Droping Missing Data of cabin and replaceing missing age with median","d4939e8c":"<a id = \"random\"><\/a>\n### Random Forest","c1663ebb":"<a id = \"submission\"><\/a>\n# Submission","89eaeae7":"<a id = \"cleaning\"><\/a>\n# Data Cleaning","d736b457":"## Table of Contents\n\n\n* [Import Libraries](#import)\n* [Going through the Data](#going_data)\n* [Data Cleaning](#cleaning)\n* [Feature Engineering](#feature)\n* [Analysis](#analysis)\n    - [Visualizations](#visual)\n    - [Models](#models)\n        - [Random Forest](#random)\n        - [Gradient](#gradient)\n        - [Logistic](#logistic)\n        - [Decision Tree](#decision)\n    - [Final Accuracies](#final)\n* [Submisson](#submission)    \n    ","50083b7e":"<a id = \"gradient\"><\/a>\n### Gradient Regression"}}