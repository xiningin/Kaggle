{"cell_type":{"2f425c41":"code","112c9061":"code","a4e75973":"code","b1d90f43":"code","997996cb":"code","475fc6ec":"code","f6581637":"code","d4270b95":"code","0d8c164a":"code","a7be9c56":"code","cf8b4a62":"code","156f1cc8":"code","82d90009":"code","07251d1b":"code","9c7cc558":"code","8f9e38d2":"code","54d147f8":"code","703541e4":"code","44f910cd":"code","bc63061c":"code","3dc92b42":"markdown"},"source":{"2f425c41":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport os\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport cv2\nimport random","112c9061":"data_path = \"..\/input\/aerial-cactus-identification\/\"","a4e75973":"test_folder = data_path + \"test.zip\"\ntrain_folder = data_path + \"train.zip\"","b1d90f43":"import os\nimport zipfile\nunziped_data = '\/kaggle\/working\/train'\nos.mkdir(unziped_data)\nwith zipfile.ZipFile(train_folder,\"r\") as z:\n    z.extractall(unziped_data)","997996cb":"train_names = pd.read_csv(data_path + \"train.csv\")\ntrain_names","475fc6ec":"IMG_SIZE = 248\nEPOCHS = 3\nBATCH_SIZE = 32","f6581637":"# take in an image filename and label and return a 3d numpy array of size IMG_SIZE with all the rgb values scaled from 0 to 1 and the label\ndef load_img(fname, label):\n    img = cv2.imread(\"\/kaggle\/working\/train\/train\/\" + fname)\n    img_pil = Image.fromarray(img)\n    arr = np.array(img_pil.resize((IMG_SIZE, IMG_SIZE), Image.ANTIALIAS))\n    return arr, np.array(label)","d4270b95":"# load a number of images with the load_img file\ndef load_batch(arr):\n  # each item in array will be [2d array, label]\n    img_array = []\n    labels = []\n    for i in range(len(arr)-1):\n        temp = load_img(train_names[\"id\"][i], train_names['has_cactus'][i])\n        img_array.append(temp[0])\n        if temp[1] == 0:\n            labels.append([1,0])\n        else:\n            labels.append([0,1])\n    return np.array(img_array), np.array(labels) ","0d8c164a":"def batch(arr, n=32):\n    l = len(arr)\n    for ndx in range(0, l, n):\n        yield arr[ndx:min(ndx + n, l)]","a7be9c56":"class ANN():\n    def __init__(self, n, m):\n        self.name = n\n        self.model = m\n\n    def train_model(self, paths, epochs=EPOCHS, batch_size=BATCH_SIZE):\n        for i in range(epochs):\n            random.shuffle(paths)\n\n            batches = batch(paths, batch_size)\n      \n            print(\"Epoch: \" + str(i+1))\n            print()\n            for j, b in enumerate(batches):\n                print(\"\\nBatch: \" + str(j+1))\n\n                x, y = load_batch(b)\n\n                self.model.fit(x, y, verbose=1)\n\n                #no data leaks\n\n                del x, y\n                print()\n\n    def eval(self, paths):\n        x, y = load_batch(paths)\n\n        preds = self.model.predict(x)\n\n        return preds, y    \n        print()\n\n    def eval_model(self, paths):\n        x, y = load_batch(paths)\n        preds = self.model.predict(x)\n        for index, pred in enumerate(preds):\n            for i, item in enumerate(pred):\n                if item < .5:\n                    preds[index][i] = [1, 0]\n                else:\n                    preds[index][i] = [0, 1]\n        sum = 0\n        for i in range(len(y)):\n            if preds[i][0] == y[i][0] and preds[i][1] == y[i][1]:\n                sum += 1\n        return sum, len(y)\n\n    def save_model(self, path):\n        model.save(\"..\/content\/drive\/My Drive\/Kaggle Team\/2021\/Face Tracking with Masks\/our_models\/\" + this.name + \".h5\")","cf8b4a62":"input_t = tf.keras.Input(shape=(IMG_SIZE, IMG_SIZE, 3))\nxception = tf.keras.applications.Xception(include_top=False, weights=\"imagenet\", input_tensor=input_t,\n    pooling=None,\n    classes=2,\n    classifier_activation=\"softmax\",\n)\n\nfor layer in xception.layers[:102]: layer.trainable = False\n\n\nxcept = ANN(\"xception\", tf.keras.models.Sequential())\n\nxcept.model.add(xception)\nxcept.model.add(tf.keras.layers.Flatten())\nxcept.model.add(tf.keras.layers.Dense(2, activation=\"softmax\"))\nxcept.model.summary()","156f1cc8":"for i, l in enumerate(xception.layers):\n    print(str(i) + \" \" + str(l))","82d90009":"xcept.model.compile(loss='categorical_crossentropy', optimizer=\"Adam\")","07251d1b":"train_paths = train_names.to_numpy()","9c7cc558":"xcept.train_model(train_paths[:16000], epochs=1)","8f9e38d2":"preds, y = xcept.eval(train_names[16000:])","54d147f8":"for i in range(len(preds)):\n    for j in range(2):\n        if preds[i][j] < .5:\n            preds[i][j] = 0\n        else:\n            preds[i][j] = 1","703541e4":"sum = 0\nfor i in range(len(preds)):\n    if preds[i][0] == y[i][0] and preds[i][1] == y[i][1]:\n        sum += 1","44f910cd":"sum, len(preds)","bc63061c":"accuracy = sum\/len(preds)\nsum\/len(preds), accuracy","3dc92b42":"# Preprocessing\n"}}