{"cell_type":{"5c0faee5":"code","7f0d540b":"code","2f93100c":"code","1abd670b":"code","9636efca":"code","f2514f39":"code","599a7ff7":"code","daeab5c1":"code","a6ffc0f6":"code","f6c9df82":"code","302b1270":"code","67f525bd":"code","80f61b4a":"code","72decc8c":"code","18b4ffbe":"code","06d9cfc1":"code","a4cbf443":"code","21530f55":"code","64ab7397":"code","4ced9411":"code","99f4bbf7":"code","9cac4549":"code","33336300":"code","4b8dda5a":"code","7ed27150":"code","66f5165b":"code","b9871127":"code","95a093da":"code","63ec60a5":"code","49282cfb":"code","98b07cdd":"code","daa510a8":"code","bc98418b":"code","49dba8fe":"code","ba810cb6":"code","f15a8165":"code","ade82b5e":"code","e5d3d677":"markdown","21df9932":"markdown","051b591b":"markdown","ea994ca4":"markdown","27e02e91":"markdown","c48b76f7":"markdown","bd8d1e95":"markdown","002fd9f6":"markdown","7a3dfcff":"markdown","f0aaca03":"markdown","0bfd23d0":"markdown","216d5012":"markdown","c58cc303":"markdown","5d318323":"markdown","6e0b99a4":"markdown","0a0e8e37":"markdown","92307ca1":"markdown","7479b6ad":"markdown","2fa11161":"markdown","9431860c":"markdown","dca2bc5b":"markdown","54bcecfd":"markdown","ce7adb14":"markdown","639f0241":"markdown","e3a237b7":"markdown","feaa01c6":"markdown","5445b92d":"markdown","f19a62aa":"markdown","37b66f39":"markdown","beacc413":"markdown","f06cb625":"markdown","95e687db":"markdown","8cdab91e":"markdown"},"source":{"5c0faee5":"import pandas as pd\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport lightgbm as lgb\nfrom tqdm import tqdm\nfrom itertools import product\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nimport gc","7f0d540b":"PATH = '..\/input\/competitive-data-science-predict-future-sales\/'\n\ndf = pd.read_csv(PATH + 'sales_train.csv')\ndf_test = pd.read_csv(PATH + 'test.csv')\nsample = pd.read_csv(PATH + 'sample_submission.csv')\nitems = pd.read_csv(PATH + 'items.csv')\nshops = pd.read_csv(PATH + 'shops.csv')\nitem_cats = pd.read_csv(PATH + 'item_categories.csv')","2f93100c":"print('Record num of each tables')\nprint()\nprint(f'train: {len(df)}')\nprint(f'test: {len(df_test)}')\nprint(f'items: {len(items)}')\nprint(f'item_categories: {len(item_cats)}')\nprint(f'shops: {len(shops)}')","1abd670b":"#\u30ec\u30b3\u30fc\u30c9\u306f\u30b7\u30e7\u30c3\u30d7\u00d7\u5546\u54c1\u00d7\u65e5\u6bce\n#'date_block_num'\u304c\u6708\u6bce\u306e\u30bf\u30a4\u30e0\u30b9\u30c6\u30c3\u30d7\u300234\u30f6\u6708\u5206\uff08\u5024:0\u301c33)\u5b58\u5728\ndisplay(df.head())\nprint(f'train num: {len(df)}')","9636efca":"#\u30ec\u30b3\u30fc\u30c9\u306f\u30b7\u30e7\u30c3\u30d7\u00d7\u5546\u54c1\u00d7\u6708\u6bce\n#'date_block_num'\u304c35\u30f6\u6708\u76ee\uff08\u5024:34\uff09\u306e\u969b\u306e'item_cnt_day'\u3092\u4e88\u6e2c\u3059\u308b\ndisplay(df_test.head())\nprint(f'test num: {len(df_test)}')","f2514f39":"display(items.head())\nprint(f'items num: {items.item_id.nunique()}')\nprint(f'item categories num: {items.item_category_id.nunique()}')","599a7ff7":"display(shops.head())\nprint(f'shop num: {shops.shop_id.nunique()}')","daeab5c1":"item_cats.head()","a6ffc0f6":"print('\u3010item_id\u3011')\nprint(f'total item num: {len(items)}')\nprint(f'item num in train: {len(set(df.item_id))}')\nprint(f'item num in test: {len(set(df_test.item_id))}')\nprint(f\"train have, test doesn't have: {len(set(df.item_id) - set(df_test.item_id))}\")\nprint(f\"test have, train doesn't have: {len(set(df_test.item_id) - set(df.item_id))}\")\nprint()\nprint('\u3010shop_id\u3011')\nprint(f'total shop num: {len(shops)}')\nprint(f'shop num in train: {len(set(df.shop_id))}')\nprint(f'shop num in test: {len(set(df_test.shop_id))}')\nprint(f\"train have, test doesn't have: {len(set(df.shop_id) - set(df_test.shop_id))}\")\nprint(f\"test have, train doesn't have: {len(set(df_test.shop_id) - set(df.shop_id))}\")","f6c9df82":"fig = plt.figure()\nax1 = fig.add_subplot(2, 1, 1)\nplt.subplots_adjust(wspace=0.4, hspace=0.6)\nplt.title(\"count of item sales(per shop per day)\")\nax1.boxplot(df['item_cnt_day'], labels=['item_cnt_day'], vert=False)\nax1.set_xlabel('count')\n\nax2 = fig.add_subplot(2, 1, 2)\nplt.title(\"item_price\")\n\nax2.boxplot(df['item_price'], labels=['item_price'], vert=False)\nax2.set_xlabel('price')\nplt.show()","302b1270":"tmp = df.copy()\ntmp['revenue'] = tmp['item_price']*tmp['item_cnt_day']\ntmp = tmp.groupby(['shop_id','date_block_num']).sum().reset_index()\n\nmonth = []\ntmp_month = []\nfor i in range(tmp['date_block_num'].max()+1):\n    if i == 0 or (i+1) % 6 == 0:\n        tmp_month.append(i)\n        if 1 > i\/12:\n            month.append(f'2013\/{i+1}')\n        elif 2 > i\/12:\n            month.append(f'2014\/{i+1-12}')\n        else:\n            month.append(f'2015\/{i+1-24}')\n\ncolors = list(matplotlib.colors.CSS4_COLORS.values())\nplt.figure(figsize=(20, 8))\nplt.title('Shop Sales Trend')\nplt.xlabel('month')\nplt.xticks(tmp_month,month)\nplt.ylabel('Shop Sales')\n\nfor shop_id in tmp['shop_id'].unique():\n    x = tmp[tmp['shop_id']==shop_id]['date_block_num']\n    y = tmp[tmp['shop_id']==shop_id]['revenue']\n    plt.plot(x, y,color=colors[shop_id], marker='o')\nplt.show()","67f525bd":"df.loc[df.shop_id == 0, 'shop_id'] = 57\ndf_test.loc[df_test.shop_id == 0, 'shop_id'] = 57\n\ndf.loc[df.shop_id == 1, 'shop_id'] = 58\ndf_test.loc[df_test.shop_id == 1, 'shop_id'] = 58\n\ndf.loc[df.shop_id == 40, 'shop_id'] = 39\ndf_test.loc[df_test.shop_id == 40, 'shop_id'] = 39\n\nshops.drop(index=[0,1,40], inplace=True)","80f61b4a":"df = df[df['item_price'] < 100000]\ndf = df[df['item_cnt_day'] < 999]","72decc8c":"df['date'] = pd.to_datetime(df.date,format='%d.%m.%Y')","18b4ffbe":"item_prices = df.groupby(['shop_id','item_id'], as_index=False\n                           ).agg({'item_price': ['max','mean','min']}\n                            ).set_axis(['shop_id','item_id','max_price','avg_price','min_price'], axis=1).astype('int16')","06d9cfc1":"tmp = df[['date', 'date_block_num', 'shop_id', 'item_id']].copy()\ntmp['first_sale'] = tmp.date.dt.dayofyear\ntmp['first_sale'] += 365 * (tmp.date.dt.year-2013)\n\n#\u30a2\u30a4\u30c6\u30e0\u3054\u3068\u306e\u521d\u56de\u8cfc\u5165\u65e5\uff08items\u30c6\u30fc\u30d6\u30eb\u3078\u8ffd\u52a0\uff09\ntmp_for_item_first_sale = tmp[['item_id', 'first_sale']].groupby('item_id', as_index=False).agg({'first_sale':'min'}).astype('int16')\nitems = pd.merge(items, tmp_for_item_first_sale, on='item_id', how='left')\ndel tmp_for_item_first_sale\n\n#\u30b7\u30e7\u30c3\u30d7\u3054\u3068\u306e\u30a2\u30a4\u30c6\u30e0\u521d\u56de\u8cfc\u5165\u65e5\uff08\u72ec\u81ea\u30c6\u30fc\u30d6\u30eb\u65b0\u898f\u4f5c\u6210\uff09\nshop_item_first_sale = tmp[['item_id', 'shop_id','first_sale']].groupby(['item_id', 'shop_id'], as_index=False).agg({'first_sale':'min'}).astype('int16')\nshop_item_first_sale = shop_item_first_sale.sort_values('first_sale').drop_duplicates(subset=['item_id','shop_id']\n                        )[['shop_id', 'item_id','first_sale']].rename(columns={'first_sale': 'shop_first_sale'})","a4cbf443":"#\u58f2\u4e0a\u6bce\u2192\u6708\u6bce\u306e\u30c7\u30fc\u30bf\u3078\u5909\u63db\ndf = df.groupby(['date_block_num', 'shop_id', 'item_id'], as_index=False\n        ).agg({'item_cnt_day':'sum'}\n        ).rename(columns={'item_cnt_day':'mon_shop_item_cnt'})\n\n\ndf_test['date_block_num'] = 34\ndf_test['mon_shop_item_cnt'] = np.nan\ndel df_test['ID']\n\ndf = df.append(df_test)\ndf","21530f55":"df.mon_shop_item_cnt = df.mon_shop_item_cnt.clip(0, 20)","64ab7397":"tmp = df[['shop_id', 'item_id', 'mon_shop_item_cnt']].groupby(['shop_id', 'item_id'],as_index=False\n        ).agg({'mon_shop_item_cnt':['mean', 'median']}\n        ).set_axis(['shop_id', 'item_id','mean_sales_cnt', 'median_sales_cnt'], axis=1)\n\ndf = pd.merge(df, tmp, on=['shop_id', 'item_id'], how='left')","4ced9411":"items['sum_item_sales_ctn'] = 0\nitems['mean_item_sales_ctn'] = 0\nitems['median_item_sales_ctn'] = 0\n\nfor item_id in items.item_id.unique():\n    tmp = df[df.item_id==item_id]['mon_shop_item_cnt']\n    items.loc[item_id, 'sum_item_sales_ctn'] = tmp.sum().astype('int8')\n    items.loc[item_id, 'mean_item_sales_ctn'] = tmp.mean()\n    items.loc[item_id, 'median_item_sales_ctn'] = tmp.median()","99f4bbf7":"df_tmp = []\nfor num in df.date_block_num.unique(): \n    tmp = df[df.date_block_num==num]\n    df_tmp.append(np.array(list(product([num], tmp.shop_id.unique(), tmp.item_id.unique())), dtype='int16'))\n\n# # Turn the grid into a dataframe\ndf_tmp = pd.DataFrame(np.vstack(df_tmp), columns=['date_block_num', 'shop_id', 'item_id'], dtype=np.int16)\n\n# # Add the features from sales data to the matrix\ndf_tmp = df_tmp.merge(df, how='left', on=['date_block_num', 'shop_id', 'item_id'])","9cac4549":"df = df_tmp.copy()\ndel df_tmp\ndel tmp\ngc.collect()","33336300":"df['month'] = ( (df['date_block_num'] + 1) % 12 ).astype('int8')","4b8dda5a":"def lag_feature_item_cnt(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        \n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n        df[col+'_lag_'+str(i)] = df[col+'_lag_'+str(i)].astype('float16')\n    return df\n\ndf = lag_feature_item_cnt(df, [1,2,3,4,5,6,7,8,9,10,11,12], 'mon_shop_item_cnt')","7ed27150":"def calc_moving_ave(df):\n    moving_ave = pd.DataFrame(columns=['date_block_num', 'shop_id', 'item_id', 'moving_average', 'expanding_mean', 'rolling_6month_mean', 'rolling_12month_mean'])\n    \n    for shop_id in tqdm(df.shop_id.unique()):\n        moving_ave_tmp = _calc(df[df['shop_id']==shop_id][['date_block_num', 'shop_id', 'item_id', 'mon_shop_item_cnt']])\n        moving_ave = pd.concat([moving_ave, moving_ave_tmp], axis=0)\n        \n    df = pd.merge(df, moving_ave, on=['date_block_num', 'shop_id', 'item_id'], how='left')\n    \n    return df\n\ndef _calc(df):\n    base_tmp = make_base_tmp()\n    moving_ave_tmp = pd.DataFrame(columns=['date_block_num', 'shop_id', 'item_id', 'moving_average', \n                                           'expanding_mean', 'rolling_6month_mean', 'rolling_12month_mean'], dtype='float16')\n    \n    for item_id in df.item_id.unique():\n        exist_tmp = df[df['item_id']==item_id][['date_block_num', 'shop_id', 'item_id', 'mon_shop_item_cnt']]\n        \n        tmp = base_tmp[~base_tmp['date_block_num'].isin(exist_tmp['date_block_num'].to_list())].copy()\n        tmp = pd.concat((tmp, exist_tmp), axis=0).sort_values('date_block_num')\n        tmp['moving_average'] = tmp['mon_shop_item_cnt'].ewm(halflife=1).mean().astype('float16')\n        tmp['expanding_mean'] = tmp['mon_shop_item_cnt'].expanding().mean().astype('float16')\n        tmp['rolling_6month_mean'] = tmp['mon_shop_item_cnt'].rolling(window=6, min_periods=1).mean().astype('float16')\n        tmp['rolling_12month_mean'] = tmp['mon_shop_item_cnt'].rolling(window=12, min_periods=1).mean().astype('float16')\n        \n        tmp = tmp[tmp['date_block_num'].isin(exist_tmp['date_block_num'].to_list())].drop('mon_shop_item_cnt', axis=1)\n        \n        moving_ave_tmp = pd.concat([moving_ave_tmp, tmp], axis=0)\n\n    return moving_ave_tmp\n\ndef make_base_tmp():\n    df = np.concatenate((np.arange(0,35).reshape(-1,1), np.zeros((35,3))), axis=1)\n    df = pd.DataFrame(df, columns=['date_block_num', 'shop_id', 'item_id', 'mon_shop_item_cnt'], dtype='float16')\n#     df.date_block_num = df.date_block_num.astype('int16')\n    return df\n\ndf = calc_moving_ave(df)","66f5165b":"item_cats['item_category_name'] = ['blank - ' + x if '-' not in x else x for x in item_cats['item_category_name']]\nitem_cats['split'] = item_cats['item_category_name'].str.split('-')\nitem_cats['new_cat'] = [x[-1].split() for x in item_cats['split']]\nitem_cats['new_cat'] = [x[0] for x in item_cats['new_cat'] if len(item_cats['new_cat']) > 1]\nitem_cats['new_cat_code'], _ = pd.factorize(item_cats['new_cat'])\n\n#item\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30c6\u30b4\u30eaID\u5909\u66f4\u7528\u8f9e\u66f8\ncat_dict = {}\nfor i, cat in enumerate(item_cats['item_category_id']):\n    cat_dict[cat] = item_cats.loc[i, 'new_cat_code']\n\nitem_cats = pd.DataFrame(data=item_cats['new_cat_code'].unique(), columns=['item_category_id'])\nprint(f'new category id num: {len(item_cats)}')","b9871127":"#items\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30c6\u30b4\u30ea\u30fcID\u3092\u65b0\u305f\u306aID\u3078\u7f6e\u63db\nitems.item_category_id = items.item_category_id.map(cat_dict)","95a093da":"shops['split'] = shops['shop_name'].str.split(' ')\nshops['city'] = [x[0] for x in shops['split']]\nshops['city_code'], _ = pd.factorize(shops['city'])\n\nprint(f'city num: {shops.city_code.nunique()}')","63ec60a5":"df = pd.merge(df, item_prices, on=['shop_id', 'item_id'], how='left')\ndf = pd.merge(df, shop_item_first_sale, on=['shop_id', 'item_id'], how='left')\ndf = pd.merge(df, items.drop('item_name', axis=1), on='item_id', how='left')\ndf = pd.merge(df, item_cats, on='item_category_id', how='left')\ndf = pd.merge(df, shops[['shop_id', 'city_code']], on='shop_id', how='left')","49282cfb":"df.info()","98b07cdd":"# change order of columns to see easy\ncol_y = 'mon_shop_item_cnt'\ncol = df.columns.tolist()\ncol.remove(col_y)\ncol.append(col_y)\n\ndf = df.reindex(columns=col)\n\ncor = df.corr()\nsns.set(rc = {'figure.figsize':(20,10)})\nsns.heatmap(cor, cmap= sns.color_palette('coolwarm', 10), annot=True,fmt='.2f', vmin=-1, vmax=1)","daa510a8":"categorical_features = ['shop_id', 'item_id', 'month', 'item_category_id', 'city_code']\ndf[categorical_features] = df[categorical_features].astype('category')","bc98418b":"X_test = df[df['date_block_num']==34].drop(['mon_shop_item_cnt', 'date_block_num'], axis=1)\n\nX = df[df.date_block_num <= 33].drop('date_block_num', axis=1)\ny = X.mon_shop_item_cnt\nX = X.drop('mon_shop_item_cnt', axis=1).copy()\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)","49dba8fe":"lgb_train = lgb.Dataset(X_train, y_train, categorical_feature=categorical_features, free_raw_data=False)\nlgb_val = lgb.Dataset(X_val, y_val, categorical_feature=categorical_features, reference=lgb_train, free_raw_data=False)\n\n# optimized by oputuna\nlgbm_params = {\n    'objective': 'mse',\n    'metric' : 'rmse',\n    \"num_leaves\": 966,\n    \"cat_smooth\": 45.01680827234465,\n    \"min_child_samples\": 27,\n    \"min_child_weight\": 0.021144950289224463,\n    \"max_bin\": 214,\n    \"learning_rate\": 0.01,\n    \"subsample_for_bin\": 300000,\n    \"min_data_in_bin\": 7,\n    \"colsample_bytree\": 0.8,\n    \"subsample\": 0.6,\n    \"subsample_freq\": 5,\n    \"n_estimators\": 3000,\n}","ba810cb6":"model = lgb.train(lgbm_params,\n                  lgb_train,\n                  valid_names=['train', 'valid'],\n                  valid_sets=[lgb_train, lgb_val],\n                  categorical_feature=categorical_features, \n                  early_stopping_rounds=20,\n                  verbose_eval=100)\n\nY_pred = model.predict(X_test, num_iteration=model.best_iteration)","f15a8165":"_ = lgb.plot_importance(model, figsize=(10,10), height=0.7, importance_type=\"gain\")","ade82b5e":"#as written in the Overview (https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/overview\/evaluation)\nsample['item_cnt_month'] = Y_pred.clip(0,20)\n\nsample.to_csv('submission.csv', index=False)","e5d3d677":"# DataLoad","21df9932":"# Feature engineering","051b591b":"## Create new item category id instead of original one\n\u65e2\u5b58\u306e\u5546\u54c1\u30ab\u30c6\u30b4\u30ea\u3092\u65b0\u305f\u306b\u4f5c\u6210\u3057\u305f\u3082\u306e\u3078\u5909\u66f4  \n\u203b\u5b66\u7fd2\u306e\u7d50\u679c\u3001\u65e2\u5b58\u30ab\u30c6\u30b4\u30ea\u304c\u7d50\u679c\u306b\u597d\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044\u70ba","ea994ca4":"## Correct shop_id\n\u30b7\u30e7\u30c3\u30d7\u540d\u306e\u8868\u8a18\u63fa\u308c\u306b\u3066\u5225\u3005\u306b\u6271\u308f\u308c\u3066\u3044\u305fshop\u306eid\u3092\u4fee\u6b63","27e02e91":"## Create 'moving_average' feature\n\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u7dda\u3001\u6307\u6570\u5e73\u6ed1\u79fb\u52d5\u5e73\u5747","c48b76f7":"## Merge tables\n\u5404\u30c6\u30fc\u30d6\u30eb\u3092\u30e1\u30a4\u30f3\u30c6\u30fc\u30d6\u30eb\u3078\u7d50\u5408","bd8d1e95":"## Create submit data\n\u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u4f5c\u6210 \u203b\u63a8\u8ad6\u30c7\u30fc\u30bf\u30920-20\u3078\u518d\u5ea6\u30af\u30ea\u30c3\u30d7\u3059\u308b","002fd9f6":"## Merge train and test\n\u7c92\u5ea6\u3092\u63c3\u3048\u3066\u3001train\u30c7\u30fc\u30bf\u3068test\u30c7\u30fc\u30bf\u3092\u7d50\u5408","7a3dfcff":"## Create month feature\n\u6708\u3092\u8ffd\u52a0","f0aaca03":"## Split train, val and test\n\u8a13\u7df4\u30c7\u30fc\u30bf\u3001\u691c\u8a3c\u30c7\u30fc\u30bf\u3001\u63a8\u8ad6\u30c7\u30fc\u30bf\u306b\u5206\u5272\u3059\u308b\uff08date_block_num\u3092\u30c9\u30ed\u30c3\u30d7\u3055\u305b\u308b\uff09","0bfd23d0":"## Convert dtype of 'date' column\n'date'\u30ab\u30e9\u30e0\u3092date\u578b\u3078\u5909\u63db","216d5012":"## Create 'first_sale_day' feature\n'\u5546\u54c1\u3054\u3068\u306b\u521d\u3081\u3066\u58f2\u308c\u308b\u307e\u3067\u306e\u65e5\u6570'\u3068'\u30b7\u30e7\u30c3\u30d7\u3054\u3068\u306e\u5404\u5546\u54c1\u304c\u521d\u3081\u3066\u58f2\u308c\u308b\u307e\u3067\u306e\u65e5\u6570'\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","c58cc303":"## Check data\n\u5404\u30c6\u30fc\u30d6\u30eb\u306e\u5185\u5bb9\u3092\u78ba\u8a8d","5d318323":"# PreProcessing","6e0b99a4":"## Check feature importance\n\u91cd\u8981\u5ea6\u306e\u9ad8\u3044\u5909\u6570\u3092\u78ba\u8a8d","0a0e8e37":"## Set Category columns\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u306e\u30ab\u30e9\u30e0\u306e\u30c7\u30fc\u30bf\u578b\u3092\u5909\u63db","92307ca1":"## Create lag features\n\u30b7\u30e7\u30c3\u30d7\u00d7\u5546\u54c1\u00d7\u6708\u3054\u3068\u306e1\u301c12\u30f6\u6708\u524d\u306b\u58f2\u308c\u305f\u5546\u54c1\u306e\u500b\u6570\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","7479b6ad":"# Modeling","2fa11161":"## Training with LightGBM\nLightGBM\u3092\u7528\u3044\u3066\u3001\u5b66\u7fd2\u5b9f\u884c","9431860c":"## Differance between train and test","dca2bc5b":"## check correlation\n\u5909\u6570\u9593\u306e\u76f8\u95a2\u95a2\u4fc2\u3092\u78ba\u8a8d","54bcecfd":"## Create mean and median of monthly shop item cnt\n\u30b7\u30e7\u30c3\u30d7\u00d7\u5546\u54c1\u3054\u3068\u306e\u5e73\u5747\uff08\u4e2d\u592e\u5024\u3082\uff09\u58f2\u4e0a\u500b\u6570\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","ce7adb14":"## Create sum and mean, median of item sales cnt\n\u5546\u54c1\u306e\u58f2\u4e0a\u500b\u6570\u306b\u95a2\u3059\u308b\u5408\u8a08\u3001\u5e73\u5747\u3001\u4e2d\u592e\u5024\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","639f0241":"## Delete Outliers of item_price & item_cnt_day\n'item_price'\u3068'item_cnt_day'\u306e\u5916\u308c\u5024\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664","e3a237b7":"# Submit","feaa01c6":"## Set learning parameters\n\u5b66\u7fd2\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a","5445b92d":"## Create matrix","f19a62aa":"## Check 'item_cnt_day' and 'item_price' columns\n\u305d\u308c\u305e\u308c\u306e\u30ab\u30e9\u30e0\u3092\u5916\u308c\u5024\u3092\u78ba\u8a8d","37b66f39":"## Create 'city_code' feature\n\u30b7\u30e7\u30c3\u30d7\u540d\u3092\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u308a\u3001\u4e00\u8981\u7d20\u76ee\u3092\u90fd\u5e02\u540d\u3068\u3059\u308b","beacc413":"## Create MinMaxAvg 'item_price' features\n\u30b7\u30e7\u30c3\u30d7\u00d7\u5546\u54c1\u3054\u3068\u306e\u5546\u54c1\u4fa1\u683c\u306e\u6700\u5927\u5024\u30fb\u6700\u5c0f\u5024\u30fb\u5e73\u5747\u5024\u306e\u7279\u5fb4\u91cf\u3092\u4f5c\u6210","f06cb625":"## Check shop sales each month\n\u30b7\u30e7\u30c3\u30d7\u3054\u3068\u306e\u58f2\u4e0a\u63a8\u79fb\uff08\u5468\u671f\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\uff09","95e687db":"# EDA","8cdab91e":"## Clip Monthly item cnt \u203bas written in the [Overview](https:\/\/www.kaggle.com\/c\/competitive-data-science-predict-future-sales\/overview\/evaluation)\n\n\u6708\u3005\u306e\u58f2\u4e0a\u500b\u6570\u304c0\u3092\u4e0b\u56de\u308b\u5834\u54080\u3078\u5909\u63db\u300220\u3092\u4e0a\u56de\u308b\u5834\u5408\u306f20\u3078\u5909\u63db"}}