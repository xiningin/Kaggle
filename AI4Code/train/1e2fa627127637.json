{"cell_type":{"09e6c988":"code","6882f68f":"code","eb7d5af7":"code","7c0ab308":"code","50458f1e":"code","e8cc922a":"code","301b60d8":"code","5e6cce40":"code","38e15d1f":"code","68a0a4cf":"code","7eab16c6":"code","1cff39eb":"code","d4389e86":"code","089af9ea":"code","9527afac":"code","bb5cd563":"code","59529dad":"code","8fc3277c":"code","b8c7ee51":"code","53c12884":"code","6f1d4e0a":"code","d27c0d0a":"code","d55c59d8":"code","3051d420":"code","34b98160":"code","2cc2afe1":"code","14b9d896":"code","6e6ba343":"code","a34959b8":"code","f2a7d930":"code","c481cb9c":"code","0a5f4f42":"code","1642d441":"code","be2f40da":"code","7fe2b5ae":"code","f574a76d":"code","e078a9d8":"code","ef736ef2":"code","36ba75b0":"code","a1427e6b":"code","f4b80efd":"code","4c7ab1b6":"code","613fc07c":"code","b1bfc6c5":"code","70c5590b":"code","42cdf0dd":"code","98db56ef":"code","fd09f9a5":"code","3f37644f":"code","3bf60ff1":"code","89807036":"code","5ca949ee":"code","8970caed":"code","1f24e0a7":"code","8ce4925f":"code","b04ee04a":"code","40ecce84":"markdown","0fa367f5":"markdown","9e7d6dd4":"markdown","0451e05e":"markdown","df3e504a":"markdown","b679a734":"markdown","83d5c67e":"markdown","9e9461fc":"markdown","962a59fe":"markdown","de4ac1e9":"markdown","a0c2c78d":"markdown","063ac215":"markdown"},"source":{"09e6c988":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets import ImageFolder\nfrom torchvision import transforms\nfrom torchvision.utils import make_grid\nimport torchvision.models as models\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport librosa\nimport librosa.feature\nimport librosa.display\nimport glob\nfrom matplotlib import pyplot as plt","6882f68f":"!pip install jovian --upgrade --quiet\n\nimport jovian\njovian.reset()","eb7d5af7":"DATA_DIR = '..\/input\/gtzan-dataset-music-genre-classification\/Data\/'\ngenres_path = DATA_DIR + 'genres_original\/'\nimages_path = DATA_DIR + 'images_original\/'","7c0ab308":"def display_mfcc(song):\n   y, _ = librosa.load(song)\n   mfcc = librosa.feature.mfcc(y)\n\n   plt.figure(figsize=(10, 4))\n   librosa.display.specshow(mfcc, x_axis='time', y_axis='mel')\n   plt.colorbar()\n   plt.title(song)\n   plt.tight_layout()\n   plt.show()","50458f1e":"display_mfcc(genres_path + 'blues\/blues.00000.wav')","e8cc922a":"display_mfcc(genres_path + 'metal\/metal.00000.wav')","301b60d8":"def extract_features_song(song):\n    y, _ = librosa.load(song)\n\n    # get Mel-frequency cepstral coefficients\n    mfcc = librosa.feature.mfcc(y)\n    # normalize values between -1,1 (divide by max)\n    mfcc \/= np.amax(np.absolute(mfcc))\n\n    return np.ndarray.flatten(mfcc)[:25000]","5e6cce40":"def generate_features_and_labels():\n    '''\n    Produce MFCC values and genre names \n    from all the songs in the dataset\n    '''\n    \n    # Prepare a list for all the features and all the labels\n    all_features = []\n    all_labels = []\n\n    genres = ['blues', 'classical', 'country', 'disco', 'hiphop', 'jazz', 'metal', 'pop', 'reggae', 'rock']\n    \n    # Extract features and genre names from each song\n    for genre in genres:\n        sound_files = glob.glob(genres_path + genre + '\/*.wav')\n        print('Processing %d songs in %s genre...' % (len(sound_files), genre))\n        for i, song in enumerate(sound_files):\n        \n            # Handle corrupt song \n            if 'jazz.00054.wav' in song:\n                features = extract_features_song(sound_files[i - 1])\n            else:\n                features = extract_features_song(song)\n                \n            all_features.append(features)\n\n    return np.stack(all_features)","38e15d1f":"features = generate_features_and_labels()","68a0a4cf":"labels = np.zeros(1000)\nindex = 0\nfor i in range(1000):\n    if i % 100 == 0:\n        index += 1\n    labels[i] = index\nlabels -= 1","7eab16c6":"features = features.astype('float32')\nlabels = labels.astype('int64')","1cff39eb":"from torch.utils.data import TensorDataset, DataLoader\n\nfeatures_tensor = torch.from_numpy(features)\nlabels_tensor = torch.from_numpy(labels)\ndataset = TensorDataset(features_tensor, labels_tensor)","d4389e86":"from torch.utils.data import random_split\n\ntrain_ds, val_ds = random_split(dataset, [800, 200])\n\nlen(train_ds), len(val_ds)","089af9ea":"batch_size = 32\n\ntrain_dl = DataLoader(train_ds, batch_size = batch_size, shuffle = True, num_workers = 2, pin_memory = True)\nval_dl = DataLoader(val_ds, batch_size = batch_size, num_workers = 2, pin_memory = True)","9527afac":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)\n    \ndevice = get_default_device()    \ntrain_loader = DeviceDataLoader(train_dl, device)\nval_loader = DeviceDataLoader(val_dl, device)","bb5cd563":"for xb, yb in train_loader:\n    print(xb.shape)\n    print(yb.shape)\n    break","59529dad":"img_data = ImageFolder(root = images_path, transform=transforms.Compose([\n                               transforms.Resize(64),\n                               transforms.CenterCrop(64),\n                               transforms.RandomHorizontalFlip(),\n                               transforms.ToTensor(),\n                               #transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n                           ]))","8fc3277c":"img_train_ds, img_val_ds = random_split(img_data, [800, 199])","b8c7ee51":"batch_size = 32\n\nimg_train_dl = DataLoader(img_train_ds, batch_size = batch_size, shuffle = True, num_workers = 2, pin_memory = True)\nimg_val_dl = DataLoader(img_val_ds, batch_size = batch_size, num_workers = 2, pin_memory = True)","53c12884":"def show_batch(dl):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(12, 12))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=8).permute(1, 2, 0))\n        break\nshow_batch(img_train_dl)","6f1d4e0a":"img_train_loader = DeviceDataLoader(img_train_dl, device)\nimg_val_loader = DeviceDataLoader(img_val_dl, device)","d27c0d0a":"for xb, yb in img_train_loader:\n    print(xb.shape)\n    print(yb.shape)\n    break","d55c59d8":"def accuracy(outputs, labels):\n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\nclass SongClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        songs, labels = batch \n        out = self(songs)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    def validation_step(self, batch):\n        songs, labels = batch \n        out = self(songs)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_acc']))","3051d420":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.Adam):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in train_loader:\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","34b98160":"class LogReg(SongClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.linear = nn.Linear(25000, 10)\n        \n    def forward(self, xb):\n        out = self.linear(xb)\n        return out","2cc2afe1":"model0 = to_device(LogReg(), device)","14b9d896":"epochs = 15\nmax_lr = 3e-4\nopt_func = torch.optim.Adam\ngrad_clip = 1e-2\nweight_decay = 1e-4","6e6ba343":"%%time\nhistory0 = fit_one_cycle(epochs, max_lr, model0, train_loader, val_loader, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","a34959b8":"accuracies = [result['val_acc'] for result in history0]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs')","f2a7d930":"torch.save(model0.state_dict(), 'project-LogReg.pth')\n\njovian.log_hyperparams(arch='LogReg', \n                       epochs=epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)\n\njovian.log_metrics(val_loss=history0[-1]['val_loss'], \n                   val_acc=history0[-1]['val_acc'],\n                   train_loss=history0[-1]['train_loss'])","c481cb9c":"class FNN(SongClassificationBase):\n    \n    def __init__(self):\n        super().__init__()\n        self.model = nn.Sequential(\n                        nn.Linear(25000, 1024),\n                        nn.ReLU(inplace = True),\n                        nn.Linear(1024, 512),\n                        nn.ReLU(inplace = True),\n                        nn.Linear(512, 256),\n                        nn.ReLU(inplace = True),\n                        nn.Linear(256, 128),\n                        nn.ReLU(inplace = True),\n                        nn.Linear(128, 64),\n                        nn.ReLU(inplace = True),\n                        nn.Linear(64, 10)\n        )\n    \n    def forward(self, xb):\n        out = self.model(xb)\n        return out","0a5f4f42":"model1 = to_device(FNN(), device)","1642d441":"history1 = [evaluate(model1, val_loader)]\nhistory1","be2f40da":"epochs = 15\nmax_lr = 3e-4\nopt_func = torch.optim.Adam\ngrad_clip = 1e-2\nweight_decay = 1e-4","7fe2b5ae":"%%time\nhistory1 += fit_one_cycle(epochs, max_lr, model1, train_loader, val_loader, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","f574a76d":"accuracies = [result['val_acc'] for result in history1]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs')","e078a9d8":"torch.save(model1.state_dict(), 'project-6lFNN.pth')","ef736ef2":"jovian.log_hyperparams(arch='6l FNN', \n                       epochs=epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)","36ba75b0":"jovian.log_metrics(val_loss=history1[-1]['val_loss'], \n                   val_acc=history1[-1]['val_acc'],\n                   train_loss=history1[-1]['train_loss'])","a1427e6b":"# custom weights initialization\ndef weights_init(m):\n    classname = m.__class__.__name__\n    if classname.find('Conv') != -1:\n        nn.init.normal_(m.weight.data, 0.0, 0.02)\n    elif classname.find('BatchNorm') != -1:\n        nn.init.normal_(m.weight.data, 1.0, 0.02)\n        nn.init.constant_(m.bias.data, 0)","f4b80efd":"class CNN(SongClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = nn.Sequential(\n            nn.Conv2d(3, 32, kernel_size=3, padding=1),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 64 x 32 x 32\n\n            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(256),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 256 x 16 x 16\n\n            nn.Conv2d(256, 512, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(512),\n            nn.ReLU(),\n            nn.Conv2d(512, 1024, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(1024),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 1024 x 8 x 8\n            \n            nn.Conv2d(1024, 2048, kernel_size=3, stride=1, padding=1),\n            nn.BatchNorm2d(2048),\n            nn.ReLU(),\n            nn.Conv2d(2048, 4096, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2, 2), # output: 4096 x 4 x 4\n\n            nn.Flatten(), \n            nn.Linear(4096 * 4 * 4, 1024),\n            nn.ReLU(inplace = True),\n            nn.Dropout(0.2),\n            nn.Linear(1024, 512),\n            nn.ReLU(inplace = True),\n            nn.Dropout(0.2),\n            nn.Linear(512, 256),\n            nn.ReLU(inplace = True),\n            nn.Dropout(0.2),\n            nn.Linear(256, 128),\n            nn.ReLU(inplace = True),\n            nn.Dropout(0.2),\n            nn.Linear(128, 64),\n            nn.ReLU(inplace = True),\n            nn.Linear(64, 10)\n        )\n        \n    def forward(self, xb):\n        return self.network(xb)","4c7ab1b6":"model2 = to_device(CNN(), device)\nmodel2.apply(weights_init)","613fc07c":"history2 = [evaluate(model2, img_val_loader)]\nhistory2","b1bfc6c5":"epochs = 30\nmax_lr = 3e-4\nopt_func = torch.optim.Adam\ngrad_clip = 1e-2\nweight_decay = 1e-4","70c5590b":"%%time\nhistory2 += fit_one_cycle(epochs, max_lr, model2, img_train_loader, img_val_loader, \n                             grad_clip=grad_clip, \n                             weight_decay=weight_decay, \n                             opt_func=opt_func)","42cdf0dd":"accuracies = [result['val_acc'] for result in history2]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy vs. No. of epochs')","98db56ef":"torch.save(model2.state_dict(), 'project-CNN.pth')\n\njovian.log_hyperparams(arch='CNN', \n                       epochs=epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)\n\njovian.log_metrics(val_loss=history2[-1]['val_loss'], \n                   val_acc=history2[-1]['val_acc'],\n                   train_loss=history2[-1]['train_loss'])","fd09f9a5":"class ResNet(SongClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","3f37644f":"model3 = to_device(ResNet(), device)\nmodel3.apply(weights_init)","3bf60ff1":"history3 = [evaluate(model3, img_val_loader)]\nhistory3","89807036":"model3.freeze()","5ca949ee":"%%time\nepochs = 10\nhistory3 += fit_one_cycle(epochs, max_lr, model3, img_train_loader, img_val_loader, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","8970caed":"model3.unfreeze()","1f24e0a7":"%%time\nhistory3 += fit_one_cycle(15, max_lr, model3, img_train_loader, img_val_loader, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","8ce4925f":"torch.save(model2.state_dict(), 'project-Resnet.pth')\n\njovian.log_hyperparams(arch='Resnet34', \n                       epochs=epochs, \n                       lr=max_lr, \n                       scheduler='one-cycle', \n                       weight_decay=weight_decay, \n                       grad_clip=grad_clip,\n                       opt=opt_func.__name__)\n\njovian.log_metrics(val_loss=history3[-1]['val_loss'], \n                   val_acc=history3[-1]['val_acc'],\n                   train_loss=history3[-1]['train_loss'])","b04ee04a":"jovian.commit(project='genre-classify', environment=None, \n              outputs=['project-LogReg.pth','project-6lFNN.pth','project-CNN.pth','project-Resnet.pth'])","40ecce84":"## Simple Feedforward Neural Network\nFeedforward neural network with 6 layers.","0fa367f5":"> ## Environment Creation","9e7d6dd4":"### Using Image Files","0451e05e":"## Base Class and Fit Function","df3e504a":"### Using Audio Files","b679a734":"## Exploratory Data Analysis","83d5c67e":"## Resnet 34","9e9461fc":"## Data and Model Preparation","962a59fe":"In this project, I have used the [GTZAN](http:\/\/marsyas.info\/downloads\/datasets.html) dataset, which contains audio files and image representations of these audio files, to perform music genre classification.","de4ac1e9":"# Music Genre Classification","a0c2c78d":"## Logistic Regression","063ac215":"## Convolutional Neural Network"}}