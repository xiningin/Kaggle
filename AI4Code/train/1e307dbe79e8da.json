{"cell_type":{"d6f9d5a7":"code","a518f6c1":"code","1b5b4185":"code","60754482":"code","833bd478":"code","1817e1ed":"code","2bea874a":"code","cfcadf92":"code","2732d147":"code","4d57ca15":"code","cd41416c":"code","24e40780":"code","13df4fa7":"code","d6b6a6d9":"code","aa5948d4":"code","44a5b272":"code","ccdf1b6a":"code","6c53730f":"code","2eba72b1":"code","14754277":"code","c17603cc":"code","db8d71dc":"code","a36ce2cd":"code","5e1a7ae5":"code","c4c6d58c":"code","31fc1416":"code","f544d059":"code","9f1e98a0":"code","9c3cf37e":"code","269b7b76":"code","8ceded25":"code","56b0d26e":"code","152f5c32":"code","10bf0295":"code","98de1c3d":"markdown","4a33ea0c":"markdown","98c51f31":"markdown","a580e497":"markdown","5580d74e":"markdown","098dd877":"markdown","c7e6f387":"markdown","21a65ffc":"markdown","901c2a04":"markdown","99de7408":"markdown","4ae34f51":"markdown","231cf573":"markdown","c266d0d0":"markdown"},"source":{"d6f9d5a7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a518f6c1":"import cv2\nimport os\nimport sys\nimport glob\nfrom tqdm import tqdm","1b5b4185":"PATH_violence = \"ENTER_PATH_OF_VIOLENT_VIDEOS\"","60754482":"os.makedirs('.\/data\/Violence',exist_ok=True)\nfor path in tqdm(glob.glob(PATH_violence+'\/*')):\n    fname = os.path.basename(path).split('.')[0]\n    vidcap = cv2.VideoCapture(path)\n    success,image = vidcap.read()\n    count = 0\n    while success:\n        if count % 5 == 0:\n            cv2.imwrite(\".\/data\/Violence\/{}-{}.jpg\".format(fname,str(count).zfill(4)),image)     # save frame as JPEG file      \n        success,image = vidcap.read()\n        count += 1","833bd478":"PATH_nonviolence = 'ENTER_PATH_OF_NON_VIOLENT_VIDEOS'","1817e1ed":"os.makedirs('.\/data\/NonViolence',exist_ok=True)\nfor path in tqdm(glob.glob(PATH_nonviolence+'\/*')):\n    fname = os.path.basename(path).split('.')[0]\n    vidcap = cv2.VideoCapture(path)\n    success,image = vidcap.read()\n    count = 0\n    while success:\n        if count % 5 == 0:\n            cv2.imwrite(\".\/data\/NonViolence\/{}-{}.jpg\".format(fname,str(count).zfill(4)),image)     # save frame as JPEG file      \n        success,image = vidcap.read()\n        count += 1","2bea874a":"import matplotlib\nmatplotlib.use(\"Agg\")\n\n# import the necessary packages\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers.pooling import AveragePooling2D\nfrom keras.applications import ResNet50,MobileNetV2,MobileNet,InceptionV3\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dense\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.utils import to_categorical\nfrom keras.optimizers import SGD\nfrom keras.utils import to_categorical \nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom imutils import paths\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport warnings\nimport argparse\nimport pickle\nimport cv2\nimport os","cfcadf92":"warnings.filterwarnings('ignore',category=FutureWarning)\nwarnings.filterwarnings('ignore',category=DeprecationWarning)","2732d147":"args = {\n    \"dataset\": \"data\",\n    \"model\": \"model\/violence_model.h5\",\n    \"label-bin\": \"model\/lb.pickle\",\n    \"epochs\": 10,\n    \"plot\": \"plot.png\"\n    \n}\n","4d57ca15":"# initialize the set of labels from the spots activity dataset we are\n# going to train our network on\nLABELS = set([\"Violence\", \"NonViolence\"])","cd41416c":"# grab the list of images in our dataset directory, then initialize\n# the list of data (i.e., images) and class images\nprint('-'*100)\nprint(\"[INFO] loading images...\")\nprint('-'*100)\nimagePaths = list(paths.list_images(args[\"dataset\"]))\ndata = []\nlabels = []","24e40780":"# loop over the image paths\nfor imagePath in tqdm(imagePaths[::]):\n    # imagePath : file name ex) V_123\n    # extract the class label from the filename\n    label = imagePath.split(os.path.sep)[-2] # Violence \/ NonViolence\n\n    # if the label of the current image is not part of of the labels\n    # are interested in, then ignore the image\n    if label not in LABELS:\n        continue\n\n    # load the image, convert it to RGB channel ordering, and resize\n    # it to be a fixed 224x224 pixels, ignoring aspect ratio\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (224, 224))\n\n    # update the data and labels lists, respectively\n    data.append(image)\n    labels.append(label)","13df4fa7":"# convert the data and labels to NumPy arrays\ndata = np.array(data)\nlabels = np.array(labels)","d6b6a6d9":"# perform one-hot encoding on the labels\nlb = LabelBinarizer()\nlabels = lb.fit_transform(labels)\nlabels = to_categorical(labels)","aa5948d4":"# partition the data into training and testing splits using 75% of\n# the data for training and the remaining 25% for testing\n(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.25, stratify=labels, random_state=42)","44a5b272":"# initialize the training data augmentation object\ntrainAug = ImageDataGenerator(\n    rotation_range=30,\n    zoom_range=0.15,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.15,\n    horizontal_flip=True,\n    fill_mode=\"nearest\")","ccdf1b6a":"# initialize the validation\/testing data augmentation object (which\n# we'll be adding mean subtraction to)\nvalAug = ImageDataGenerator()","6c53730f":"# define the ImageNet mean subtraction (in RGB order) and set the\n# the mean subtraction value for each of the data augmentation\n# objects\nmean = np.array([123.68, 116.779, 103.939], dtype=\"float32\")\ntrainAug.mean = mean\nvalAug.mean = mean","2eba72b1":"# load the InceptionV3 network, ensuring the head FC layer sets are left\n# off\nbaseModel = InceptionV3(weights=\"imagenet\", include_top=False,input_tensor=Input(shape=(224, 224, 3)))","14754277":"# construct the head of the model that will be placed on top of the\n# the base model\nheadModel = baseModel.output\nheadModel = AveragePooling2D(pool_size=(5, 5))(headModel)\nheadModel = Flatten(name=\"flatten\")(headModel)\nheadModel = Dense(512, activation=\"relu\")(headModel)\nheadModel = Dropout(0.5)(headModel)\nheadModel = Dense(len(lb.classes_), activation=\"softmax\")(headModel)","c17603cc":"# place the head FC model on top of the base model (this will become\n# the actual model we will train)\nmodel = Model(inputs=baseModel.input, outputs=headModel)","db8d71dc":"# loop over all layers in the base model and freeze them so they will\n# *not* be updated during the training process\nmodel.trainable = True","a36ce2cd":"# compile our model (this needs to be done after our setting our\n# layers to being non-trainable)\nprint('-'*100)\nprint(\"[INFO] compiling model...\")\nprint('-'*100)\nopt = SGD(lr=1e-4, momentum=0.9, decay=1e-4 \/ args[\"epochs\"])\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\nprint(model.summary())","5e1a7ae5":"# train the head of the network for a few epochs (all other layers\n# are frozen) -- this will allow the new FC layers to start to become\n# initialized with actual \"learned\" values versus pure random\nprint('-'*100)\nprint(\"[INFO] training head...\")\nprint('-'*100)\nH = model.fit_generator(\n    trainAug.flow(trainX, trainY, batch_size=32),\n    steps_per_epoch=len(trainX) \/\/ 32,\n    validation_data=valAug.flow(testX, testY),\n    validation_steps=len(testX) \/\/ 32,\n    epochs=args[\"epochs\"])","c4c6d58c":"# evaluate the network\nprint('-'*100)\nprint(\"[INFO] evaluating network...\")\nprint('-'*100)\npredictions = model.predict(testX, batch_size=32)\nprint(classification_report(testY.argmax(axis=1),\n\tpredictions.argmax(axis=1), target_names=lb.classes_))","31fc1416":"# plot the training loss and accuracy\nprint('-'*100)\nprint(\"[INFO] plot the training loss and accuracy...\")\nprint('-'*100)\nN = args[\"epochs\"]\nplt.style.use(\"ggplot\")\nplt.figure()\nplt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\nplt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\nplt.plot(np.arange(0, N), H.history[\"accuracy\"], label=\"train_accuracy\")\nplt.plot(np.arange(0, N), H.history[\"val_accuracy\"], label=\"val_accuracy\")\nplt.title(\"Training Loss and Accuracy on Dataset\")\nplt.xlabel(\"Epoch #\")\nplt.ylabel(\"Loss\/Accuracy\")\nplt.legend(loc=\"lower left\")\nplt.savefig(args[\"plot\"])","f544d059":"# serialize the model to disk\nprint('-'*100)\nprint(\"[INFO] serializing network...\")\nprint('-'*100)\nmodel.save(args[\"model\"])","9f1e98a0":"# serialize the label binarizer to disk\nf = open(args[\"label-bin\"], \"wb\")\nf.write(pickle.dumps(lb))\nf.close()","9c3cf37e":"from keras.models import load_model\nfrom collections import deque\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport argparse\nimport pickle\nimport cv2","269b7b76":"args = {\n\n    \"model\": \"model\/violence_model.h5\",\n    \"label-bin\": \"model\/lb.pickle\",\n    \"input\": \"video\/street-fight.mp4\",\n    \"output\": \"output\/streetfight_64avg.avi\",\n    \"size\": 64\n    \n}\n","8ceded25":"# load the trained model and label binarizer from disk\nprint(\"[INFO] loading model and label binarizer...\")\nmodel = load_model(args[\"model\"])\nlb = pickle.loads(open(args[\"label-bin\"], \"rb\").read())","56b0d26e":"# initialize the image mean for mean subtraction along with the\n# predictions queue\nmean = np.array([123.68, 116.779, 103.939][::1], dtype=\"float32\")\nQ = deque(maxlen=args[\"size\"])","152f5c32":"# initialize the video stream, pointer to output video file, and\n# frame dimensions\nvpath = args[\"input\"]\nif args[\"input\"] == 'camera':\n\tvpath = 0\nvs = cv2.VideoCapture(vpath)\nwriter = None\n(W, H) = (None, None)","10bf0295":"# loop over frames from the video file stream\nwhile True:\n    # read the next frame from the file\n    (grabbed, frame) = vs.read()\n\n    # if the frame was not grabbed, then we have reached the end\n    # of the stream\n    if not grabbed:\n        break\n\n    # if the frame dimensions are empty, grab them\n    if W is None or H is None:\n        (H, W) = frame.shape[:2]\n\n    # clone the output frame, then convert it from BGR to RGB\n    # ordering, resize the frame to a fixed 224x224, and then\n    # perform mean subtraction\n    output = frame.copy()\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    frame = cv2.resize(frame, (224, 224)).astype(\"float32\")\n    frame -= mean\n\n    # make predictions on the frame and then update the predictions\n    # queue\n    preds = model.predict(np.expand_dims(frame, axis=0))[0]\n    Q.append(preds)\n\n    # perform prediction averaging over the current history of\n    # previous predictions\n    results = np.array(Q).mean(axis=0)\n    # i = np.argmax(results)\n    i = 1\n    label = lb.classes_[i]\n    \n\n    # draw the activity on the output frame\n    # prob = model.predict_proba(np.expand_dims(frame, axis=0))[0] # to show probability of frame\n    prob = results[i]*100\n\n    text_color = (0, 255, 0) # default : green\n\n    if prob > 70 : # Violence prob\n        text_color = (0, 0, 255) # red\n        \n    else:\n        label = 'Normal'\n\n    text = \"State : {:8} ({:3.2f}%)\".format(label,prob)\n    FONT = cv2.FONT_HERSHEY_SIMPLEX \n\n    cv2.putText(output, text, (35, 50), FONT,1.25, text_color, 3) \n\n    # plot graph over background image\n    output = cv2.rectangle(output, (35, 80), (35+int(prob)*5,80+20), text_color,-1)\n\n    # check if the video writer is None\n    if writer is None:\n        # initialize our video writer\n        fourcc = cv2.VideoWriter_fourcc(*\"MJPG\")\n        writer = cv2.VideoWriter(args[\"output\"], fourcc, 30,(W, H), True)\n\n    # write the output frame to disk\n    writer.write(output)\n\n    # show the output image\n    cv2.imshow(\"Output\", output)\n    key = cv2.waitKey(1) & 0xFF\n\n    # if the `q` key was pressed, break from the loop\n    if key == ord(\"q\"):\n        break\n# release the file pointersq\nprint(\"[INFO] cleaning up...\")\nwriter.release()\nvs.release()","98de1c3d":"# Extract frames from video","4a33ea0c":"## Evaluate the network","98c51f31":"# Creating the video classification model","a580e497":"If you want to checkout the run scripts version, you can refer to this github link.\nGihub repo - [Real Life Violence Detection model](https:\/\/github.com\/NANDINI-star\/Real-life-violence-detection)","5580d74e":"![image.png](attachment:f5ec46d1-9dda-4b5d-8230-a55e26f68d31.png)","098dd877":"# Predict the video for violence\/ non-violence","c7e6f387":"LabelBinarizer returns output as numpy array. LabelBinarizer is used for one-hot encoding of categorical variables.","21a65ffc":"## Resizing the images","901c2a04":"# Real Life Violence Detection model","99de7408":"## Load InceptionV3 model","4ae34f51":"## Training Data Augmentation","231cf573":"## Train the model","c266d0d0":"## Compile the model"}}