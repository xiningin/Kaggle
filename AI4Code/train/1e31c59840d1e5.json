{"cell_type":{"f2c963e0":"code","5b5c508c":"code","73dc0969":"code","60854572":"code","19d4d0fe":"code","5435d4cf":"code","cf5b0234":"code","79349bd7":"code","438a191f":"code","8fcbb13f":"code","746ac819":"code","230273ee":"code","7fa95e07":"code","3911af46":"code","e7bc1276":"code","20a7ac42":"code","6c8c908a":"code","b8a5e5d6":"code","3cb1d3c1":"markdown","56615235":"markdown","12067baf":"markdown","0c6e8e83":"markdown","1ab879df":"markdown","692c0258":"markdown","f668ce7e":"markdown","ea426534":"markdown","13a1850f":"markdown","af3f3133":"markdown"},"source":{"f2c963e0":"import json\nfrom pathlib import Path\nfrom tqdm.notebook import tqdm\nimport pandas as pd\nfrom pprint import pprint","5b5c508c":"fname = '..\/input\/covid19-articles-by-elsevier\/meta\/meta\/0022510X79902181_meta.json'","73dc0969":"with open(fname) as f:\n    json_data = json.load(f)","60854572":"json_data['full-text-retrieval-response']['coredata'].keys()","19d4d0fe":"json_data['full-text-retrieval-response']['coredata']['dc:title']","5435d4cf":"json_data['full-text-retrieval-response']['coredata']['dc:description']","cf5b0234":"pprint(json_data['full-text-retrieval-response'])","79349bd7":"json_data['full-text-retrieval-response']['coredata']['link']","438a191f":"def process_abstract(text):\n    return \" \".join(text.replace('\\n', '').replace('\\t', '').replace('Abstract', '').strip().split())","8fcbb13f":"process_abstract(json_data['full-text-retrieval-response']['coredata']['dc:description'])","746ac819":"def extract_fields_from_json(fname):\n    with open(fname) as f:\n        json_data = json.load(f)\n        \n    core_data = json_data['full-text-retrieval-response']['coredata']\n    \n    title = core_data.get('dc:title', None)\n    abstract = core_data.get('dc:description', None)\n    doi = core_data.get('prism:doi', None)\n    date = core_data.get('prism:coverDate', None)   \n    xml_url = core_data.get('prism:url', None)\n    url = core_data['link'][1]['@href']\n    \n    proc_abstract = None\n    if abstract:\n        proc_abstract = process_abstract(abstract)\n    \n    return title, proc_abstract, doi, date, xml_url, url","230273ee":"def jsons_to_dataframe(path_to_data='meta',\n                       file_mask = '*.json',\n                       min_abstract_len_words=40,\n                       columns=('title', 'abstract', 'doi', 'date', 'xml_url', 'url')):\n    \n    all_data = []\n    for fname in tqdm(Path(path_to_data).glob(file_mask)):\n        try:\n            title, proc_abstract, doi, date, xml_url, url = extract_fields_from_json(fname)\n        except json.JSONDecodeError:\n            continue\n\n        if title and proc_abstract and len(proc_abstract.split()) >= min_abstract_len_words:\n            all_data.append([title, proc_abstract, doi, date, xml_url, url])\n            \n    df = pd.DataFrame(all_data, columns=columns)\n    df['date'] = pd.to_datetime(df['date'])\n    df = df.sort_values(by='date').reset_index(drop=True)\n    \n    return df   ","7fa95e07":"df = jsons_to_dataframe(path_to_data='..\/input\/covid19-articles-by-elsevier\/meta\/meta\/')","3911af46":"df.head()","e7bc1276":"df.info()","20a7ac42":"df.tail()","6c8c908a":"train_df, valid_df = df.head(10000), df.tail(2967).reset_index(drop=True)","b8a5e5d6":"train_df.to_csv('covid_artilces_elsevier_train.csv')\nvalid_df.to_csv('covid_artilces_elsevier_validation.csv')","3cb1d3c1":"Performing train\/validation split, just in case we want to do some Machine Learning with this data, eg. title generation from abstracts.","56615235":"Article abstract","12067baf":"URLs","0c6e8e83":"Other fields","1ab879df":"All main fields are here","692c0258":"Let's read one of JSON files with metadata about an article.","f668ce7e":"With this fuction we extract title, processed abstract, doi, publication date, xml url, and ScienceDirect url","ea426534":"Artcile title","13a1850f":"Forming a DataFrame from all available JSONs.","af3f3133":"Simple text processing"}}