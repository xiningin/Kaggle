{"cell_type":{"e446f751":"code","39199447":"code","8b19851d":"code","252eced3":"code","c0d3d2e0":"code","fd8449d4":"code","2ba35c67":"code","cb14630a":"code","c07af6a9":"code","b4a81318":"code","c9ca55f8":"code","8a8569af":"code","62f84ff7":"code","eaff4a93":"code","222b80a6":"code","e31305cf":"code","1d7ac782":"code","e01706ea":"code","504331bb":"code","444a1554":"code","18f6a154":"code","53d9cbed":"code","88d5a7fa":"code","0fd10a95":"markdown","8a7c788b":"markdown","0eeeb67f":"markdown","dea28aef":"markdown","c2f7b448":"markdown","1721aa10":"markdown","49094af7":"markdown","509f76bb":"markdown"},"source":{"e446f751":"import os\nimport pandas as pd\n","39199447":"import json\n\npath = '\/kaggle\/input\/fungi-annotations\/'\ntr_annot_path = os.path.join(path+'train.json')\n# # Opening JSON file\nf = open(tr_annot_path, )\n\n# returns JSON object as\n# a dictionary\ndata = json.load(f)\n\n# Create different lists from the data dictionary\n\nannotations = pd.DataFrame(data[\"annotations\"])\ncategory = pd.DataFrame(data[\"categories\"])\ninfo = pd.DataFrame.from_dict(data[\"info\"], orient='index')\nimages = pd.DataFrame(data['images'])\nlicenses = pd.DataFrame(data['licenses'])\n# Closing file\nf.close()","8b19851d":"train_data = images.copy()","252eced3":"## to the images dataframe, we add the category_id \ntrain_data['category_id'] = annotations[annotations['image_id'] == train_data['id']]['category_id']\ntrain_data","c0d3d2e0":"category.set_index('id')\n","fd8449d4":"train_data = pd.merge(left=train_data, right=category, how='left', left_on='category_id', right_on='id')\ntrain_data\n","2ba35c67":"train_data.drop(columns = ['id_y'], inplace=True)\ntrain_data","cb14630a":"val_annot_path = os.path.join(path+'val.json')\n\n# # Opening JSON file\nf_val = open(val_annot_path, )\n\n# returns JSON object as\n# a dictionary\nval_dict= json.load(f_val)\n\n# Create different lists from the data dictionary\n\nval_annotations = pd.DataFrame(val_dict[\"annotations\"])\nval_category = pd.DataFrame(val_dict[\"categories\"])\nval_info = pd.DataFrame.from_dict(val_dict[\"info\"], orient='index')\nval_images = pd.DataFrame(val_dict['images'])\nval_licenses = pd.DataFrame(val_dict['licenses'])\n# Closing file\nf_val.close()","c07af6a9":"val_data = val_images.copy()\n## to the images dataframe, we add the category_id \nval_data['category_id'] = val_annotations[val_annotations['image_id'] == val_data['id']]['category_id']\nval_category.set_index('id')\nval_data = pd.merge(left=val_data, right=val_category, how='left', left_on='category_id', right_on='id')\nval_data.drop(columns = ['id_y'], inplace=True)\nval_data","b4a81318":"pip install sweetviz","c9ca55f8":"# importing sweetviz\nimport sweetviz as sv\n#analyzing the dataset\nimages_report = sv.analyze(images)\n#display the report\nimages_report.show_html('sweetviz_train_images.html')","8a8569af":"#analyzing the dataset\nannotations_report = sv.analyze(annotations)\n#display the report\nannotations_report.show_html('sweetviz_train_annotations.html')","62f84ff7":"#analyzing the dataset\ncategory_report = sv.analyze(category)\n#display the report\ncategory_report.show_html('sweetviz_train_category.html')","eaff4a93":"train_data_report = sv.analyze(train_data)\n#display the report\ntrain_data_report.show_html('sweetviz_train_data.html')","222b80a6":"val_data = val_images.copy()\n## to the images dataframe, we add the category_id \nval_data['category_id'] = val_annotations[val_annotations['image_id'] == val_data['id']]['category_id']\nval_category.set_index('id')\nval_data = pd.merge(left=val_data, right=val_category, how='left', left_on='category_id', right_on='id')\nval_data.drop(columns = ['id_y'], inplace=True)\nval_data","e31305cf":"# Analyze the data \nval_data_report = sv.analyze(val_data)\n#display the report\nval_data_report.show_html('sweetviz_val_data.html')","1d7ac782":"## Let's compare the train and validation data\ncompare_report = sv.compare(train_data, val_data)\ncompare_report.show_html(\"Comparison_Report.html\")\n","e01706ea":"from pandas_profiling import ProfileReport","504331bb":"profile = ProfileReport(images, title='images Pandas Profiling Report')\nprofile","444a1554":"profile.to_widgets()","18f6a154":"profile_train = ProfileReport(train_data, title='Train Pandas Profiling Report')\nprofile_train","53d9cbed":"profile_train.to_widgets()","88d5a7fa":"profile_val = ProfileReport(val_data, title='Val Pandas Profiling Report')\nprofile_val.to_widgets()","0fd10a95":"# 1\/ sweetviz library","8a7c788b":"This notebook is a quick EDA with the amazing library Sweetviz. I used the json files to build two dataframes for train and validation data. The html reports are availble in the output of this notebook.\n\nI updated the notebook with other EDA libraries to compare them. So you will find in the second section pandas_profiling EDA. ","0eeeb67f":"At first, let's make a report for each important dataframes: images, categoy and annotations","dea28aef":"Now let's make a merged dataframe with information from images, annotations and category","c2f7b448":"Let's compare the train and validation data.","1721aa10":"This was a simple but efficient and amazing EDA with sweetviz. I hope you enjoy it!\nLet's try pandas_profiling\n","49094af7":"# 2\/ pandas_profiling library","509f76bb":"Let's do the same for validation data by creating a merged dataframe"}}