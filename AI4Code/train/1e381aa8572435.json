{"cell_type":{"a090ac8f":"code","17c58da8":"code","32062859":"code","1182daaa":"code","17340279":"code","74ab5803":"code","e920b2e9":"code","3f85e275":"code","a9df05ca":"code","115896e7":"code","51bc6690":"code","23cb6738":"code","69742cf0":"code","94df5d6e":"code","35c9cdea":"code","86d96245":"code","7e653697":"code","95556d93":"code","b944aa1d":"markdown","ece4371d":"markdown","3546f6da":"markdown","c4add14f":"markdown","52f1c86e":"markdown","db4c773b":"markdown"},"source":{"a090ac8f":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os","17c58da8":"deaths = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv').groupby(['Country\/Region', 'ObservationDate']).agg({'Deaths':'sum'})['Deaths']\ndeaths","32062859":"l0 = list(deaths.index.get_level_values(0))\nl1 = deaths.index.get_level_values(1)\n# cond = (l0 == \"foo\") | ((l0==\"bar\") & (l1==\"two\"))\n# df[cond]\nl0[0], l0[1] = 'Azerbaijan', 'St. Martin'\nidx = pd.MultiIndex.from_tuples(list(zip(l0, pd.to_datetime(l1, format=\"%m\/%d\/%Y\"))), names=['Country\/Region', 'ObservationDate'])\ndeaths.index = idx\ndeaths = deaths.groupby(['Country\/Region', 'ObservationDate']).sum()\ndeaths = deaths[deaths.index.get_level_values(1)>='2020-03-01']\ndeaths","1182daaa":"coeff_us_france = 328 \/ 67\nprint(f'We need to multiply French figures by {round(coeff_us_france, 1)} to adjust them to US scale')\ndeaths.loc['France'] = (coeff_us_france * deaths.loc['France'].values).astype(int)","17340279":"coeff_us_uk = 328 \/ 67\nprint(f'We need to multiply UK figures by {round(coeff_us_uk, 1)} to adjust them to US scale')\ndeaths.loc['UK'] = (coeff_us_uk * deaths.loc['UK'].values).astype(int)","74ab5803":"# coeff_us_spain = 328 \/ 47\n# print(f'We need to multiply Spanish figures by {round(coeff_us_spain, 1)} to adjust them to US scale')\n# deaths.loc['Spain'] = (coeff_us_spain * deaths.loc['Spain'].values).astype(int)","e920b2e9":"fig=plt.figure(figsize=(25,5))\nfig.show()\nax=fig.add_subplot(111)\nax.plot(deaths.loc['US'], label='US', c='r')\nax.plot(deaths.loc['France'], label='France adjusted for size',c='b', ls='--')\nax.plot(deaths.loc['UK'], label='UK adjusted for size',c='green', ls='--')\n# ax.axhline(y=150000, label='150,000 deaths', ls=':', c='grey')\nax.set_title('Total deaths')\nax.legend(loc=2)\n# ax.set_xticks(ax.get_xticks()[::10])\nplt.draw()","3f85e275":"from sklearn.linear_model import LinearRegression\ndic = {}\nfor country in ['US', 'UK', 'France']:\n    y = deaths.loc[country]\n    y = y.loc[y.index>'07\/01\/2020']\n    l = LinearRegression().fit(np.arange(len(y)).reshape(-1, 1), y)#.reshape(1, -1)\n    dic[country] = [l.coef_, l.intercept_]","a9df05ca":"dic","115896e7":"from datetime import date\nd0 = date(2020, 7, 1)\nd1 = date(2020, 11, 3)\ndelta = d1 - d0\nprint(f\"Regression over {delta.days} days\")\nfor country, coeff in zip(['US', 'UK', 'France'], [1, coeff_us_uk, coeff_us_france]):\n    print(f\"By {d1} there could be {round((dic[country][0][0] * delta.days + dic[country][1])\/coeff)} deaths in {country}\")","51bc6690":"coeff_pop = (100.\/328)*(10**-6)\nFrance_pct = pd.Series(coeff_pop * deaths.loc['France'].values, index = deaths.loc['France'].index)\n# Spain_pct = pd.Series(coeff_pop * deaths.loc['Spain'].values, index = deaths.loc['Spain'].index)\nUK_pct = pd.Series(coeff_pop * deaths.loc['UK'].values, index = deaths.loc['UK'].index)\nUS_pct = pd.Series(coeff_pop * deaths.loc['US'].values, index = deaths.loc['US'].index)\n# US_pct","23cb6738":"fig=plt.figure(figsize=(25,5))\nfig.show()\nax=fig.add_subplot(111)\nax.plot(US_pct, label='US', c='r')\nax.plot(France_pct, label='France adjusted for size',c='b', ls='--')\nax.plot(UK_pct, label='UK adjusted for size',c='green', ls='--')\nax.set_title('Total deaths as pct of population')\nax.legend(loc=2)\n# ax.set_xticks(ax.get_xticks()[::10])\nplt.draw()","69742cf0":"smooth_days = 7","94df5d6e":"france_smoothed = pd.Series(data = np.convolve((deaths.loc['France']-deaths.loc['France'].shift(1)).dropna(), np.ones(smooth_days)\/smooth_days, mode='valid').astype(int), index=deaths.loc['France'].index[smooth_days::])\n# france_smoothed","35c9cdea":"# spain_smoothed = pd.Series(data = np.convolve((deaths.loc['Spain']-deaths.loc['Spain'].shift(1)).dropna(), np.ones(smooth_days)\/smooth_days, mode='valid').astype(int), index=deaths.loc['Spain'].index[smooth_days::])\n# spain_smoothed","86d96245":"uk_smoothed = pd.Series(data = np.convolve((deaths.loc['UK']-deaths.loc['UK'].shift(1)).dropna(), np.ones(smooth_days)\/smooth_days, mode='valid').astype(int), index=deaths.loc['UK'].index[smooth_days::])\n# uk_smoothed","7e653697":"us_smoothed = pd.Series(data = np.convolve((deaths.loc['US']-deaths.loc['US'].shift(1)).dropna(), np.ones(smooth_days)\/smooth_days, mode='valid').astype(int), index=deaths.loc['US'].index[smooth_days::])\n# us_smoothed","95556d93":"fig=plt.figure(figsize=(25,5))\nfig.show()\nax=fig.add_subplot(111)\nax.plot(us_smoothed, label='US', c='r')\nax.plot(france_smoothed, label='France adjusted for size',c='b', ls='--')\nax.plot(uk_smoothed, label='UK adjusted for size',c='green', ls='--')\n# ax.axhline(y=2000, label='2,000 deaths', ls=':', c='grey')\nax.set_title(f'Daily new deaths, smoothed over last {smooth_days} days')\nax.legend(loc=2)\nax.set_ylim(bottom=0)\n# ax.set_xticks(ax.get_xticks()[::10])\nplt.draw()","b944aa1d":"How many deaths will there be in each country by the 3rd November, if trends remain the same ?","ece4371d":"Comparison US \/ Spain : adjust for population size","3546f6da":"Comparison US \/ UK : adjust for population size","c4add14f":"In percent of population :","52f1c86e":"Pronostic for future deaths, if trend doesn't change :","db4c773b":"Comparison US \/ France : adjust for population size"}}