{"cell_type":{"9f3a9242":"code","daccc227":"code","8d1abcf5":"code","ed2121e6":"code","20fc1b04":"code","74d9c464":"code","b9371b1e":"code","27fc9361":"code","0b1902ef":"code","bd7b9fa5":"code","63db06fd":"code","b338c824":"code","d142d55c":"code","f8eb8448":"code","145a7bf4":"code","7e53ea0d":"code","7b48fd7e":"code","a319d0c6":"code","2a6ae324":"code","019d4b05":"code","38af37cd":"code","cacfa3de":"code","babdb73e":"code","2f12b44f":"code","6ec52a84":"code","73f6cb38":"code","45d45ca7":"code","c8f19268":"code","66bf6b8d":"code","407a8b43":"code","fa6337f7":"code","c445b5f9":"code","083c4f32":"code","63767027":"code","92997ef1":"code","f33a773a":"code","4981dc75":"code","9c710896":"code","21bdae9f":"code","d4654a54":"code","ff74b6d3":"code","d0bd6f72":"code","251d143c":"code","95ff5ada":"code","fe91ad85":"markdown","0f77ff4f":"markdown","b7940d04":"markdown","fa5d00cb":"markdown","9280569d":"markdown","ed997476":"markdown","fce082e4":"markdown","b9596f23":"markdown","fd29ddf0":"markdown","e01f9474":"markdown","38f9ed43":"markdown","65db55fb":"markdown","2d4a1f7e":"markdown","6f517727":"markdown","9ae041da":"markdown","3ca57ae0":"markdown","110cdf32":"markdown","a877689c":"markdown","771a9570":"markdown","33f0f186":"markdown","3295c0ff":"markdown","0c72b0d5":"markdown","13e5bd99":"markdown","d1490077":"markdown","f1dd8b30":"markdown","1938b2fb":"markdown","a3cd8c18":"markdown","c951015e":"markdown","f641251c":"markdown","7648bfc6":"markdown","8f1403f9":"markdown","3401cfc4":"markdown","c9ca08d9":"markdown"},"source":{"9f3a9242":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","daccc227":"import matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.impute import SimpleImputer","8d1abcf5":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf_train.head(20)","ed2121e6":"df_train.info()","20fc1b04":"df_test.info()","74d9c464":"df_train.describe()\n# with numerical feature ","b9371b1e":"df_train.describe(include=['O'])\n#'O' mean [Object]","27fc9361":"\nsurvived_graph = sns.FacetGrid(df_train, col='Survived')\nsurvived_graph.map (sns.histplot, 'Age')\n","0b1902ef":"df_train[['Survived', 'Pclass']].groupby(['Pclass'], as_index = False ).mean().sort_values(by='Pclass')","bd7b9fa5":"df_train[['PassengerId','Pclass']].groupby(['Pclass']).count()","63db06fd":"pclass_graph = sns.FacetGrid(df_train, col='Survived')\npclass_graph.map (sns.histplot,'Pclass')","b338c824":"general_graph = sns.FacetGrid(df_train, col='Survived', row='Pclass')\ngeneral_graph.map (sns.histplot,'Age')","d142d55c":"df_train[['PassengerId', 'Embarked']].where(df_train['Survived']==0).count()","f8eb8448":"df_train[['PassengerId', 'Embarked']].where(df_train['Survived']==0).groupby(['Embarked']).count()","145a7bf4":"df_train[['PassengerId']].where(df_train['Survived']==1).count()","7e53ea0d":"df_train[['PassengerId', 'Embarked']].where(df_train['Survived']==1\n                                           ).groupby(['Embarked']).count()","7b48fd7e":"general_graph = sns.FacetGrid(df_train, col='Survived', row='Embarked')\ngeneral_graph.map (sns.histplot,'Age')","a319d0c6":"df_train [['PassengerId', 'Sex']].groupby(['Sex']).count()","2a6ae324":"df_train [['PassengerId', 'Sex']].where(df_train['Survived']==0).groupby(['Sex']).count()","019d4b05":"df_train [['PassengerId', 'Sex']].where(df_train['Survived']==1).groupby(['Sex']).count()","38af37cd":"general_graph = sns.FacetGrid(df_train, col='Survived', row='Sex')\ngeneral_graph.map (sns.histplot,'Age')","cacfa3de":"grid = sns.FacetGrid(df_train, row ='Embarked')\ngrid.map(sns.pointplot, 'Pclass' , 'Survived', 'Sex')\ngrid.add_legend()","babdb73e":"df_train[['Fare', 'Survived']].groupby(['Survived']).mean()\n","2f12b44f":"general_graph = sns.FacetGrid(df_train, col='Survived', row='Embarked')\ngeneral_graph.map (sns.barplot,'Sex', 'Fare')","6ec52a84":"df_train.head()","73f6cb38":"df_train = df_train.drop (['Cabin', 'Ticket','PassengerId', 'Name'], axis=1)\ndf_test = df_test.drop (['Cabin', 'Ticket','Name'], axis=1)\ndf_train.head()","45d45ca7":"new_column = {\"Sex\":   {\"male\": 1, \"female\":0 },\n             \"Embarked\": {\"C\": 0, \"Q\":1, \"S\":2}}\n","c8f19268":"df_train = df_train.replace(new_column)\ndf_train.head()","66bf6b8d":"df_test = df_test.replace(new_column)\ndf_test.head()","407a8b43":"fi = SimpleImputer(strategy=\"most_frequent\")\ndf = df_test.Fare.to_numpy().reshape(-1,1)\nf = fi.fit_transform(df)\ndf_test.Fare = f","fa6337f7":"imput= SimpleImputer(strategy=\"most_frequent\")\nd = df_train.Age.to_numpy().reshape(-1,1)\nd_test = df_test.Age.to_numpy().reshape(-1,1)\ni_test = imput.fit_transform(d_test)\ni = imput.fit_transform(d)\nprint(len(i))\nprint(len(i_test))\n","c445b5f9":"df_train.Age = i \ndf_test.Age = i_test","083c4f32":"imputer = SimpleImputer(strategy=\"most_frequent\")\ndata = df_train.Embarked.to_numpy().reshape(-1,1)\nimputed = imputer.fit_transform(data)\nimputed\n","63767027":"df_train.Embarked = imputed \ndf_train.info()","92997ef1":"df_train.columns","f33a773a":"df_test.columns","4981dc75":"y_train = df_train['Survived']\nx_train = df_train.drop(['Survived'],axis = 1 )\nx_test = df_test.drop(['PassengerId'],axis = 1)","9c710896":"x_train.head()","21bdae9f":"from sklearn.linear_model import LogisticRegression","d4654a54":"x_test.info()","ff74b6d3":"model1= LogisticRegression()\nmodel1.fit(x_train, y_train)","d0bd6f72":"pred1 = model1.predict(x_test)\nscore = model1.score(x_train, y_train)\nprint(score)","251d143c":"from sklearn.ensemble import RandomForestClassifier\nmodel2 = RandomForestClassifier(n_estimators = 100 , max_depth = 5, random_state = 1)\nmodel2.fit(x_train, y_train)\npred2 = model2.predict(x_test)\nscore2= model2.score(x_train, y_train)\nprint(score2)","95ff5ada":"output = pd.DataFrame({'PassengerId' : df_test.PassengerId, 'Survived' : pred2})\noutput.to_csv('Submission.csv', index = False )","fe91ad85":"* feature of this model is [ 'Age', 'Pclass' , 'Embarked' , 'Parch' , 'SibSp', 'Fare']\n","0f77ff4f":"> ## Age feature : ","b7940d04":"==> Fare in model feature ","fa5d00cb":"1. ### LogisticRegression","9280569d":"* Survived is a categorical feature with 0 or 1\n* Pclass is is categorical feature with 1 , 2 or 3 \n    Pclass : A proxy for socio-economic status (SES) \n    1st = Upper \n    2nd = Middle \n    3rd = Lower \n* More than 75% of passengers did not travel with parents \/ children ","ed997476":"# Sex Feature : ","fce082e4":"* Embarked = C or Q higher paying passengers had better survival \n  so we have correlation between 'Survive' feature and 'Fare' feature . ","b9596f23":"### correlating between (Survive , Pclass , Sex ): ","fd29ddf0":"* feature of this model : Age , Sex , Embarked , Fare , Pclass ","e01f9474":"* 65% of passengers is male . ","38f9ed43":"==> Sex feature in model training ","65db55fb":"# Model :","2d4a1f7e":"* Most passengers in Pclass = 3 did not survive.\n* In Pclass = 2 passengers who have aged between 1 and 20 survived. \n* Most Passengers in pclass = 1 survived.\n","6f517727":"* Name is a unique feature (each name has frequence equal=1) .\n* top sex is 'male' (freq = 577) \n* top cabin is *B96 B98* (freq = 4) \n* top embarqued is *S (Southampthon)* (freq = 644)","9ae041da":"* Most passngers who have sex = male did not survive . \n* Female passengers had much better survival rate than males .\n* 82% of male did not survive but 75% of female survived . ","3ca57ae0":"* Large number of passesnger betwen 15 and 30 did not survive . \n* Passenger with (Age = 80 ) survived . \n* Most passengers are in 15-40 age range . ","110cdf32":"# Cleaning training data : ","a877689c":"### Fare feature : ","771a9570":"* Most passengers in Pclass = 3 most did not survived but in pclass = 1 and 2 mostly survived ","33f0f186":"* score of LogisticRegression > score RandomForestClassifier \n  so we choose the RandomForestClassifier model . ","3295c0ff":"*  'Age' , 'Cabin' and 'Embarked' features contain a null values in train dataset \n* 'Age' and 'Cabin' features contain a null values in test dataset \n\n","0c72b0d5":"> ## Embarked : ","13e5bd99":"# Create new dataset : \n","d1490077":"* Pclass = 3 had most passengers ","f1dd8b30":"> ## Pclass feature : ","1938b2fb":"2. ### RandomForestClassifier : ","a3cd8c18":"* Most passenger in Embarked = s did not survive ","c951015e":"# transform from categorical to numeric : ","f641251c":" ==>Embarked Feature in model Training ","7648bfc6":"### ==> Age feature in model training ","8f1403f9":"* In Embarked = C males had higher survival rate . ==> correlation between Pclass and Embarked ","3401cfc4":" ==>Pclass feature in model training ","c9ca08d9":"# Aanlyze Feature : "}}