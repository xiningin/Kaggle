{"cell_type":{"e06ea08f":"code","685c91ab":"code","bf252f95":"code","56d9a8c4":"code","d805dd1f":"code","7581e3a7":"code","9da7ae4f":"code","0d4c137e":"code","211513c4":"code","9fef55a5":"code","5a8b5f62":"code","adf85e60":"code","29b3d1c1":"code","badf95ce":"code","a36aab85":"code","1529cf3c":"code","9dd03004":"code","050fdb93":"code","2997bc8e":"code","afb31c46":"code","ee440359":"code","70681660":"code","f861def3":"code","35a7d274":"code","3a9b08df":"code","921a4c6d":"code","5e1cf2c0":"code","87125edf":"code","0bc7b119":"code","9b6d3126":"code","cd891d8c":"code","0a4e1215":"code","eb3716cf":"markdown","f2459311":"markdown","77eea9e6":"markdown","51dc1e1d":"markdown","ffd34da9":"markdown","fcb983cc":"markdown","c5e8b286":"markdown","fe2ca26c":"markdown","c706617b":"markdown","8a0d052b":"markdown","974cff11":"markdown","e9f1d886":"markdown","1638cf80":"markdown","96904df2":"markdown","f22a7b11":"markdown","8f4938f2":"markdown","b1e32ca1":"markdown","7e5d008b":"markdown","4a3b94c2":"markdown","cb4c69a1":"markdown","f725107d":"markdown","ecfce604":"markdown","22232c19":"markdown","70246aca":"markdown","8a3da119":"markdown","553b761f":"markdown","fba4f94f":"markdown","d0b0ec4a":"markdown","b9bd0ff0":"markdown"},"source":{"e06ea08f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","685c91ab":"TRAIN_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/real-estate-price-prediction-moscow\/test.csv'\ntrain_dataframe = pd.read_csv(TRAIN_DATASET_PATH)\n","bf252f95":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","56d9a8c4":"train_dataframe['Id'] = train_dataframe['Id'].astype(str)\ntrain_dataframe['DistrictId'] = train_dataframe['DistrictId'].astype(str)\n\nreduce_mem_usage(train_dataframe)","d805dd1f":"train_dataframe.info()","7581e3a7":"# condition_ls = (train_dataframe['LifeSquare'].isna()) \\\n# | \n\ncondition_healthcare = train_dataframe['Healthcare_1'].isna()\ntrain_dataframe.loc[condition_healthcare, 'Healthcare_1'] = train_dataframe['Healthcare_1'].median()","9da7ae4f":"lifesq_share = train_dataframe['LifeSquare']\/train_dataframe['Square']\navg_lifesq_share = lifesq_share.mean()","0d4c137e":"condition_ls_na = train_dataframe['LifeSquare'].isna()\ntrain_dataframe.loc[condition_ls_na, 'LifeSquare'] = train_dataframe['Square'] * avg_lifesq_share","211513c4":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\n# \u043c\u0430\u0441\u0441\u0438\u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nquantitative = \\\n[i for i in train_dataframe.columns.values if train_dataframe[i].dtype.name != 'category' and i != 'Price' ]\n\nquantitative\ndef show_partly(variables, N1, N2):\n    fig,axes = plt.subplots(N1,N2)\n    fig.set_size_inches(10, 10)\n    for i, elem in enumerate(variables):\n         sns.histplot(train_dataframe[elem], ax=axes[i \/\/ N1, i % N2])\n        \nshow_partly(quantitative[:4], 2, 2)","9fef55a5":"condition_rooms = (train_dataframe['Rooms'] > 5) | (train_dataframe['Rooms'] <= 0)\ntrain_dataframe.loc[condition_rooms, 'Rooms'] = train_dataframe['Rooms'].median()\n","5a8b5f62":"for square in ['LifeSquare', 'Square', 'KitchenSquare']:\n    condition = (train_dataframe[square] > train_dataframe[square].quantile(0.99))\n    train_dataframe.loc[condition, square] = train_dataframe[square].median()","adf85e60":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0449\u0451 \u0440\u0430\u0437\nshow_partly(quantitative[:4], 2, 2)","29b3d1c1":"conditions = {\n    'Square' : train_dataframe['Square'] <= 20,\n    'KitchenSquare' : train_dataframe['KitchenSquare'] <= 5,\n    'LifeSquare' : train_dataframe['LifeSquare'] <= 13.2\n}\n\nfor square in ['LifeSquare', 'Square', 'KitchenSquare']:\n    train_dataframe.loc[conditions[square], square] = train_dataframe[square].median()\n    \nshow_partly(quantitative[:4], 2, 2)","badf95ce":"max, min = train_dataframe['HouseYear'].max(), train_dataframe['HouseYear'].min()\nprint(max, min)","a36aab85":"train_dataframe.loc[train_dataframe['HouseYear'] > 2021, 'HouseYear'] = train_dataframe['HouseYear'].median()","1529cf3c":"show_partly(quantitative[4:8], 2, 2)","9dd03004":"train_dataframe.loc[train_dataframe['Floor'] > 30, 'Floor'] = train_dataframe['Floor'].median()\ntrain_dataframe.loc[train_dataframe['HouseFloor'] > 30, 'HouseFloor'] = train_dataframe['HouseFloor'].median()","050fdb93":"show_partly(quantitative[4:8], 2, 2)","2997bc8e":"def show_partly_social(variables):\n    fig,axes = plt.subplots(1,3)\n    fig.set_size_inches(10, 4)\n    for i, elem in enumerate(variables):\n         sns.histplot(train_dataframe[elem], ax=axes[i])\n        \nshow_partly_social(quantitative[8:11])","afb31c46":"show_partly_social(quantitative[11:14])","ee440359":"conditions2 = {\n    'Social_1' : train_dataframe['Social_1'] > 60,\n    'Social_2' : train_dataframe['Social_2'] > 16000,\n    'Social_3' : train_dataframe['Social_3'] > 20,\n#     'Healthcare_1': (train_dataframe['Healthcare_1'] > 2000) | (train_dataframe['Healthcare_1'] < 700),\n    'Shops_1': train_dataframe['Shops_1'] > 20\n}\n\nfor col in conditions2.keys():\n    train_dataframe.loc[conditions2[col], col] = train_dataframe[col].median()","70681660":"show_partly_social(quantitative[8:11])","f861def3":"show_partly_social(quantitative[11:14])","35a7d274":"train_dataframe.to_pickle('data_backup_1.pkl')","3a9b08df":"# new_df  = pd.read_pickle('data_backup_1.pkl')\n# district_size = new_df['DistrictId'].value_counts().reset_index().rename(columns = {'index': 'DistrictId', 'DistrictId':'DistrictSize'})","921a4c6d":"class DataPreprocessing:\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.kitchen_square_quantile = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.99)\n        self.square_quantile = X['Square'].quantile(.99)\n        self.life_square_quantile = X['LifeSquare'].quantile(.99)\n    \n    def transform(self, X):\n        \n        X['Id'] = X['Id'].astype(str)\n        X['DistrictId'] = X['DistrictId'].astype(str)\n#         reduce_mem_usage(X)\n        \n        AVG_LIFESQ_SHARE = 0.6658\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n#       \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0440\u043e\u0433\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0433\u0440\u0443\u0431\u043e \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043d\u044b \u0432 \u0445\u043e\u0434\u0435 EDA\n        conditions = {\n\n            'Rooms' : (X['Rooms'] > 5) | (X['Rooms'] <= 0),\n            'Healthcare_1' : X['Healthcare_1'].isna(),\n            'Square' : (X['Square'] <= 20) | (X['Square'] > self.square_quantile),\n            'KitchenSquare' : (X['KitchenSquare'] <= 5) | (X['KitchenSquare'] > self.kitchen_square_quantile),\n            'LifeSquare' : (X['LifeSquare'] <= 13.2) | (X['LifeSquare'] > self.life_square_quantile) \\\n            | (X['LifeSquare'].isna()),\n            'HouseYear' : X['HouseYear'] > 2021,\n            'Social_1' : X['Social_1'] > 60,\n            'Social_2' : X['Social_2'] > 16000,\n            'Social_3' : X['Social_3'] > 20,\n            'Shops_1': X['Shops_1'] > 20\n        }\n        # Rooms\n        for col in conditions.keys():\n            if col != 'LifeSquare':\n                X.loc[conditions[col], col] = self.medians[col]\n            else:\n                X.loc[conditions[col], col] = X['Square'] * AVG_LIFESQ_SHARE   \n        \n        return X","5e1cf2c0":"class FeatureGenerator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n#         self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.district_size = None\n        self.house_year_min = None\n        self.house_year_max = None\n        self.avg_kitchen_square = None\n        \n        \n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n\n        \n    def fit(self, X):\n        X = X.copy()\n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n        \n        self.house_year_min = X['HouseYear'].min()\n        self.house_year_max = X['HouseYear'].max()\n        \n        # AvgKitchenSize        \n        self.avg_kitchen_square = X.groupby(['DistrictId']).mean(['KitchenSquare'])['KitchenSquare'].reset_index()\\\n        .rename(columns={'index':'DistrictId', 'KitchenSquare' : 'AvgKitchenSquare'})\n\n    def transform(self, X):\n        \n        X = X.copy()\n\n        # DistrictId, IsDistrictLarge, AvgKitchenSize - \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        X = X.merge(self.avg_kitchen_square, on = 'DistrictId', how = 'left')\n        \n        # \u0430\u043d\u0430\u043b\u0438\u0437 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0440\u0430\u0439\u043e\u043d\u0430 \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        # Binary features - \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043a\u0430\u043a \u0435\u0441\u0442\u044c\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        X = self.year_to_cat(X)\n        \n        return X\n    \n    def year_to_cat(self,X):\n\n        bins = [self.house_year_min, 1920, 1940, 1960, 1980, 2000, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n        X['year_cat'].fillna(-1, inplace=True)\n    \n        return X","87125edf":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\n\npreprocessor = DataPreprocessing()\n\ntrain_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nreduce_mem_usage(train_df)\nreduce_mem_usage(test_df)\n\npreprocessor.fit(train_df)\ntrain_df = preprocessor.transform(train_df)\ntest_df = preprocessor.transform(test_df)\n\nfeatures_gen = FeatureGenerator()\nfeatures_gen.fit(train_df)\ntrain_df = features_gen.transform(train_df)\ntest_df = features_gen.transform(test_df)\n\nTARGET_NAME = 'Price'\nX = train_df.drop(columns = TARGET_NAME)\ny = train_df[TARGET_NAME]\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.30, shuffle = True, random_state = 74)\n\n# preprocessor.fit(X_train)\n# X_train = preprocessor.transform(X_train)\n# X_valid = preprocessor.transform(X_valid)\n\nX_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()\n# X_train.shape, X_valid.shape, test_df.shape\n\n# features_gen = FeatureGenerator()\n# features_gen.fit(X_train)\n\n# test_df.shape\ntest_df.fillna(0, inplace = True)\nX_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","0bc7b119":"# parameters = {\n#     'max_features': np.arange(15, 20),\n#     'max_depth': np.arange(3, 7),\n# }\n\n# clf = GridSearchCV(\n#     estimator=RandomForestRegressor(),\n#     param_grid=parameters,\n#     scoring='r2',\n#     cv=7,\n# )\n\n# clf.fit(X_train, y_train)\n# clf.best_params_\n# {'max_depth': 6, 'max_features': 17}\n\n","9b6d3126":"regr = RandomForestRegressor(max_depth=7, max_features = 19, random_state=74)\nregr.fit(X_train, y_train)\n\n# cv_results = pd.DataFrame(clf.cv_results_)\n# cv_results.columns.params\n\nprint(regr.score(X_train, y_train))\nprint(regr.score(X_valid, y_valid))","cd891d8c":"# test_df\n# y_test_preds\ny_test_preds = regr.predict(test_df)\n# y_test_preds\nsubmit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()\nsubmit['Price'] = y_test_preds\n\nsubmit.to_csv('rf2_submit.csv', index=False)\n\n# submit.head()","0a4e1215":"!pip freeze >> requirements.txt","eb3716cf":"#### \u041f\u043e\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0432 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435:","f2459311":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438","77eea9e6":"# 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","51dc1e1d":"##### \u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u043e \u043d\u0435\u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f > 2021 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435.","ffd34da9":"##### \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f LifeSquare \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 Square. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0439\u0434\u0435\u043c \u0434\u043e\u043b\u044e \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0441\u0440\u0435\u0434\u0438 \u043e\u0431\u0449\u0435\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438.","fcb983cc":"##### \u0412\u0437\u044f\u043b \u0437\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u0432\u0430\u0448 \u043a\u043b\u0430\u0441\u0441 FeatureGenetator \u0438 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043b \u0435\u0433\u043e \u043f\u043e\u0434 \u0441\u0432\u043e\u0438 \u043d\u0443\u0436\u0434\u044b:","c5e8b286":"<!-- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438  -->","fe2ca26c":"##### \u041f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u044f\u0432\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 HouseFloor, Floor. \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c \u0438\u0445 \u043e\u0431\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 30, \u0432\u044b\u043f\u0430\u0432\u0448\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0440\u0430\u0432\u043d\u044f\u0435\u043c \u043a \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c.  \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0432 \u043e\u043a\u043e\u0448\u043a\u0435 HouseYear, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0441\u0432\u044f\u0437\u0430\u0442\u044c \u0441\u043e \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0431\u0443\u043c\u043e\u043c \u0432 70-\u0445 - 80-\u0445 \u0433\u0433, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u0441\u043b\u0435 \u0445\u0440\u0443\u0449\u0451\u0432\u043e\u043a \u043d\u0430\u0447\u0430\u043b\u0438 \u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0437\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c \u043f\u0430\u043d\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u043e\u043c\u0430. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0438\u043a \u043f\u0440\u043e\u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043a\u0430\u043a \u0435\u0441\u0442\u044c.","c706617b":"##### \u0417\u0434\u0435\u0441\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0438\u0433\u0440\u0430\u043b\u0441\u044f \u0441 GridSearchCV, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0443\u0447\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c.","8a0d052b":"* \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 district id \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 district_id \u0443\u043a\u0430\u0437\u0430\u0442\u044c, \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0439\u043e\u043d \u0438\u043b\u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439\n* \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u0443\u0445\u043d\u0438\n* \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043a\u043b\u0430\u0441\u0441\u044b \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0438 \u0438 \u0442\u043e\u043c\u0443 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435 \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u044b \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, {'A' : 0, 'B' : 1})\n* \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u044d\u043f\u043e\u0445\u0443 \u0434\u043e\u043c\u0430 (\u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043e\u043c\u0430)","974cff11":"#### \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u0441\u043e\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u044f\u043c:\n##### 1. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 20 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432 (\u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0442\u0443\u0434\u0438\u0438), \u0442\u043e \u0435\u0441\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0440\u043e\u0433 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 = 20 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432;\n##### 2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043f\u043e\u0440\u043e\u0433 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0443\u0445\u043d\u0438 \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 5 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u043e\u0432;\n##### 3. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u043f\u043e\u0440\u043e\u0433 \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0430\u043a 20 * 0.66 = 13.2 \u043c","e9f1d886":"##### \u041f\u043e \u0440\u044f\u0434\u0430\u043c Rooms, Square, LifeSquare, KitchenSquare \u0435\u0441\u0442\u044c \u0430\u043d\u043e\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0417\u0430\u043c\u0435\u0442\u0438\u043c, \u0447\u0442\u043e, \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442 > 5 \u0438\u043b\u0438 == 0 \u043c\u0430\u043b\u043e, \u0442\u043e \u0435\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043e\u0442 1 \u0434\u043e 5 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b (\u043d\u0435 \u043f\u0443\u0442\u0430\u0442\u044c \u0441 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438) \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","1638cf80":"##### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e. \u041f\u043e\u043b\u0443\u0447\u0438\u043b\u0430\u0441\u044c \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u0430\u044f \u043a\u0430\u0440\u0442\u0438\u043d\u0430.","96904df2":"##### \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443 TRAIN_DATASET_PATH, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0440\u0430\u0432\u043d\u0430 \u043f\u0443\u0442\u0438 \u0434\u043e \u0444\u0430\u0439\u043b\u0430 train.csv. \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0444\u0430\u0439\u043b\u0430 train.csv \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c train_dataframe:","f22a7b11":"* \u041f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e Healthcare_1, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 > 2000\n* \u041f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e Shops_1 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0440\u043e\u0433 ~ > 20","8f4938f2":"# 3. \u041e\u0444\u043e\u0440\u043c\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043a\u0430\u043a \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043e. \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0440\u0430\u043d\u0435\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0443\u0435\u043c \u0445\u043e\u0440\u043e\u0448\u0443\u044e \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445:","b1e32ca1":"* \u041f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e Social_1 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041f\u043e\u0440\u043e\u0433 > 60\n* \u041f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e Social_2 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0440\u043e\u0433 ~ > 16000\n* \u041f\u043e \u043a\u0440\u0438\u0442\u0435\u0440\u0438\u044e Social_3 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0440\u043e\u0433 ~ > 20","7e5d008b":"##### \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 (LifeSquare, Square, KitchenSquare), \u0432\u044b\u0448\u0435 99%-\u0433\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u043b\u044f, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435.","4a3b94c2":"# 2. EDA \u0430\u043d\u0430\u043b\u0438\u0437.","cb4c69a1":"##### \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0434\u043b\u044f \u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 66.6 %. \u0422\u043e\u0433\u0434\u0430 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f LifeSquare \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445 Square \u043f\u0443\u0442\u0451\u043c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 avg_lifesq_share:","f725107d":"#### \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 Healthcare_1 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u043d\u0435\u0442\u0440\u043e\u043d\u0443\u0442\u044b\u043c. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.","ecfce604":"# 4. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e \u0444\u0438\u0447:","22232c19":"##### \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445: ","70246aca":"# 5. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","8a3da119":"##### \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f: \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441, \u0433\u043b\u0443\u0431\u0438\u043d\u0430 7, 19 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.","553b761f":"##### \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e DistrictId - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0435\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0442\u0438\u043f (str). \u041f\u043e\u043b\u0435 Id \u0442\u0430\u043a\u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0439 \u0442\u0438\u043f, \u0442\u0430\u043a \u043a\u0430\u043a \u0434\u0430\u043d\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044f \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c.","fba4f94f":"#### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0442\u0440\u0435\u0431\u043b\u0435\u043d\u0438\u044f \u043f\u0430\u043c\u044f\u0442\u0438","d0b0ec4a":"##### \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0434\u043e\u043c\u043e\u0432:","b9bd0ff0":"##### \u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 LifeSquare \u0438 Healthcare_1 \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u0421\u0442\u043e\u043b\u0431\u0435\u0446 Healthcare_1 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0435. "}}