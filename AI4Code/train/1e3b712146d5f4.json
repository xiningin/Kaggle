{"cell_type":{"00e9b78c":"code","458c6ed7":"code","bdd0974e":"code","22b5e5d5":"code","6dd34b95":"code","8b50fe42":"code","160ecc71":"code","b97094ab":"code","6a51ab55":"code","f47e2109":"code","7c22cb17":"code","8aa224b8":"code","ffc4f1d5":"code","5bc9f0ea":"code","b948d67e":"code","ee82b46a":"code","681a4dcc":"code","ebd5129a":"code","fdf9e701":"code","29ad4266":"code","36cda261":"code","b6c1c287":"code","d851b544":"code","1a3b1eae":"code","47af760d":"code","86268b5c":"code","bd2effaf":"code","0aaaa9d4":"code","6aa84a7f":"code","67e54c86":"code","d04b56e0":"code","b543470f":"code","1c44a739":"code","b04f5bd3":"code","638d7298":"code","2a75dd07":"code","3acb1b9f":"markdown","b86983b5":"markdown","f279818e":"markdown","ba0c3e2f":"markdown","28480c4a":"markdown","13af09db":"markdown","e6e1de2c":"markdown","728b9aab":"markdown","390a3496":"markdown","a7bbbe04":"markdown","f1446b12":"markdown","4103e60d":"markdown","fe7d214b":"markdown","1a82353c":"markdown","5b8c5b95":"markdown","280e5075":"markdown","77fedb14":"markdown","391a0f84":"markdown"},"source":{"00e9b78c":"mytupla0=('abc',4,True,5,False,2.5,4,True,\"abc\",4,True,\"abc\")\nmytupla=(1,0.7,mytupla0,\"Hola\",4) \n#(\"mario\",(55,7867,2))\nprint(mytupla0)\nmytupla","458c6ed7":"mytupla[0] # primer elemento de la tupla. Note que inicia en cero ","bdd0974e":"mytupla[2] # tercer  elemento ","22b5e5d5":"mytupla[3] # cuarto elemento  ","6dd34b95":"# Cuidado!!! \n#mytupla[5] # IndexError: tuple index out of range\n# no corre, a eso se refiere con inmutable \n#mytupla[2]=0 #TypeError: 'tuple' object does not support item assignment\n#mytupla[2]='xyz'","8b50fe42":"type(mytupla) \ntype(4)\ntype(3.5)\ntype(True)\ntype(\"xyx\")\n#str.digit\n#str.isdigit(\"2n120123\")\n#?str.isdigit","160ecc71":"point = 10, 20\nprint(point,type(point))","b97094ab":"x,y=point\nprint(\"x= \",x)\nprint(\"y= \",y)","6a51ab55":"print(mytupla)\nprint(\"abc\" in  mytupla) ### porqu\u00e9 False ? \nprint(\"abc\" in  mytupla0) \nprint(\"abc\" in  mytupla[2])","f47e2109":"4 in mytupla","7c22cb17":"print(mytupla0)\nprint(mytupla0.count(\"abc\") ) ### m\u00e9todo count \nprint(mytupla0.count(5) )\nprint(mytupla0.count(True) )","8aa224b8":"print( len(mytupla) )\nlen(mytupla0)","ffc4f1d5":"tunit=(4,)\nprint(tunit,type(tunit))","5bc9f0ea":"tunit=(4)\nprint(tunit,type(tunit))","b948d67e":"mytupla0.index(True)  ### indice de la primera aparici\u00f3n de True en ","ee82b46a":"#list(range(0, 7))\nfor i in range(0, len(mytupla0)):\n    print(i, mytupla0[i],type(mytupla0[i]) ) \nprint(mytupla)","681a4dcc":"#list(range(0, 7))\nfor i in range(0, len(mytupla0)):\n    print(i, mytupla0[i])\nprint(mytupla)","ebd5129a":"import scipy.stats as s \nn = s.norm(0,10) # crea una normal de media 0 y desviaci\u00f3n estandar 10\nres=s.shapiro(n.rvs(100)) # el segundo es  el pvalor \nprint(res,type(res))","fdf9e701":"W,p=res # el primer elemento en W el segundo en p ","29ad4266":"print(\"W= \",W,\"P-valor= \",p)\n# recuerda la otra frma de formatear la respuestra \nprint(\"El estad\u00edstico de Shapiro - Wilks es %0.3f, con p_valor igual a %0.4f\" %res)\nprint(\"El p-valor de la pruba de Shapiro Wilks es %0.5f\" %res[1])\nprint(\"P-valor es = \",res[1])","36cda261":"a=(3,2,4,1,6,4) # tupla original \nb=a[1:4] # tupla creada a partir de a \nprint(b,type(b))","b6c1c287":"a[:4] # los tres primeros, \u00edndices 0, 1 y 2 ","d851b544":"a[2:] # desde el tercero (recuerde que inicia en cero) hasta el final ","1a3b1eae":"a[::-1] # reversa la tupla \n#b=(1,3) ","47af760d":"len(a) # N\u00famero de elementos de la tupla \nprint(len(mytupla))\nprint(mytupla)\na[len(a)-1] ## \u00faltimo elemento de la tupla a ","86268b5c":"a.index(4)   # \u00bfen qu\u00e9 posici\u00f3n de la tupla est\u00e1 el primer valor 4? ","bd2effaf":"a.count(4) # \u00bfcu\u00e1ntas veces est\u00e1 4?\nmytupla0.count(\"abc\") ","0aaaa9d4":"print(4 in a) # s\u00ed est\u00e1 (True)\nprint(\"x\" in a ) # no est\u00e1 (False) \n\"abc\" in mytupla0 ","6aa84a7f":"tupla1=(10,13,15,12)\ntupla2=(\"Jose\",\"Mar\u00eda\",\"Pedro\",\"Juan\")\ntupla3=(31,tupla1,14,tupla2,20) \nprint(tupla3) ","67e54c86":"tuplaS=tupla1+tupla2 \nprint(tuplaS) ","d04b56e0":"print( (3,2,4)*3 )\nTrats=(\"T1\",\"T2\",\"T3\")*4\nTrats","b543470f":"Tupla3=(2,\"xyz\",[3,5,7],True) \nprint(Tupla3[2]) # recupera el tercer elemento de la tupla \nTupla3[2].append(10)  \n# \u00bfSe ha modificado la tupla? no que no se pod\u00eda  \nTupla3 ","1c44a739":"print(dir(mytupla))\n#mytupla0.__doc__\n#mytupla0.__add__ # m\u00e9todo que se aplica cuando adicionas dos tuplas \nprint(mytupla0.__class__) \n#mytupla0.__contains__\n#mytupla0.__delattr__\n#mytupla0.__iter__\nmytupla0.__len__ \n#type(mytupla0) \n","b04f5bd3":"(\"Jose\",\"Juan\")+(\"Miguel\",\"Andr\u00e9s\") ","638d7298":"(3,2,4)*2","2a75dd07":"print( sum( (3,2,4) ) ) \n#mean((3,2,4))\nlen((3,2,4))  \n#(3,2,4).mean\nsum( (3,2,4) )\/len((3,2,4))\n\n### programar un m\u00e9todo o una funci\u00f3n en python que tome una tupla numerica o logica \n### y regrese el promedio \nsum( (2,4,True,\"x\") )\n### verificar que la tupla tenga solo n\u00fameros  \nsum(tupla)\/len(tupla)\n\n","3acb1b9f":"### \u00bfQu\u00e9 ventaja tiene esta caracter\u00edstica de las tuplas? \n\n* Te proteje contra cambios accidentales en el contenido.  \n* M\u00e1s eficiencia en cuanto al uso de memoria de la m\u00e1quina. \n\n#### \u00bfC\u00f3mo averiguar el tipo de objeto? ","b86983b5":"#### Contar cu\u00e1ntas veces est\u00e1 un elemento en una tupla. ","f279818e":"## Tuplas anidadas \n\nLas tuplas pueden contener distintos tipos de objetos, entre ellos otras tuplas, esto se conoce como anidamiento. Esta caractier\u00edsticas de las tuplas permite la construcci\u00f3n de estructuras complejas de datos, cuando se requiera. Veamos un ejemplo","ba0c3e2f":"### Iterar sobre una tupla","28480c4a":"### Otra forma de acceder a los elementos de una tupla \n\nDesempaquetado de tupla ","13af09db":"### Indexamiento, sub-tupla o *slice* (porcionar, tomar una parte) de una tupla \nSe puede crear una tupla a partir de otra previamente creada","e6e1de2c":"### Otra forma de definir tuplas \n\nEsta forma se conoce como *empaquetado* de tuplas (tupla sin par\u00e9ntesis) ","728b9aab":"### \u00bfC\u00f3mo saber si un elemento est\u00e1 en una tupla? ","390a3496":"#### Longitud de una tupla ","a7bbbe04":"# Estructuras de datos en python\n\n## Contenedores de datos en python\n\nPython ofrece varias estructuras para el almacenamiento de datos, entre ellas tenemos \n* **Tuplas** *(tuple)*\n* Listas *(list)*\n* Arreglos *(array)*\n* Diccionarios *(dictionaries)* \n* Marcos de datos *(DataFrames)*\n\n### Tuplas \n\nLas tuplas sirven para agrupar objetos de diferente tipo, ellas estan indexadas y son **inmutables**, es decir, no se pueden modificar (agregar, quitar, cambiar entradas) una vez creadas.  \n","f1446b12":"Ventajas al usar tuplas\n* Las tuplas te protegen contra cambios accidentales en su contenido.  \n* Se usan con mucha frecuencia en programas python, y por tanto debes aprender a usarlas.\n* Si usas tuplas en programas, la ejecuci\u00f3n del c\u00f3digo es mucho mas r\u00e1pida.\n* Las tuplas se pueden usar como claves *(keys)* en los diccionarios, mientras que otro tipo de estructuras como los arreglos no.\n\n\n","4103e60d":"Note que una tupla puede contener distintos tipos de datos (string, enteros, l\u00f3gicos y floats), incluso otras tuplas y otros tipos de contenedores, por ejemplo arreglos que estudiaremos en el siguiente tema.   \n\nPara acceder a los elementos de una tupla se usa `tupla[indice]` donde `indice` es un n\u00famero entero de cero (0) hasta la longitud de la tupla menos uno $(n-1)$ ","fe7d214b":"## Funciones relacionadas a tuplas ","1a82353c":"Multiplicar una tupla por un escalar (replicar la tupla) ","5b8c5b95":"Como se observa en el primer ejemplo, las tuplas no solo pueden contener otras tuplas, sino que tambi\u00e9n pueden anidar otros contenedores.  \n\nTambi\u00e9n se pueden **adicionar** dos tuplas (en realidad es una *concatenaci\u00f3n*) ","280e5075":"### Ejemplo de aplicaci\u00f3n  \nEjemplo de una funci\u00f3n que regresa una **tupla** ","77fedb14":"### Tupla unitaria \n\nUna tupla unitaria es una tupla con una componente. Para distinguir la tupla unitaria de la componente que contiene, Python exige que a la componente no s\u00f3lo se la encierre entre par\u00e9ntesis sino que se le ponga una coma a continuaci\u00f3n del valor de la componente","391a0f84":"### Observaci\u00f3n \n`index()` y `count()` son m\u00e9todos definidos sobre la clase *tuple*, mientras que `len()` es una funci\u00f3n gen\u00e9rica a la cual se le entrega una tupla y regresa su longitud, esta funci\u00f3n se puede usar con otros tipos de contenedores, incluso con *strings*\n\n## Verificar si un elemento est\u00e1 o no en una tupla"}}