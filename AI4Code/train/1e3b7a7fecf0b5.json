{"cell_type":{"74da0fc3":"code","e972366f":"code","7432fa7b":"code","996b9598":"code","bc8bd890":"code","c582dd65":"code","798890f8":"code","90ecf6e8":"code","9d8dfb68":"code","0537033a":"code","2de1790a":"code","f4321c84":"code","1783cd43":"code","e90938bb":"code","f27abe6d":"markdown","1f31596d":"markdown","62c73129":"markdown","b612af1f":"markdown","c34526a7":"markdown"},"source":{"74da0fc3":"\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sb \n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e972366f":"#get the trainset\ntrain=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n# show the head\ntrain.head()","7432fa7b":"#for men \nmen=train['Survived'][train.Sex=='male']\npercentage =sum(men)\/len(men)*100\nprint('the rate of survived men is {} %'.format(round(percentage,2)))\n","996b9598":"#for women \nwomen=train['Survived'][train.Sex=='female']\npercentage = sum(women)\/len(women)*100\nprint('the rate of survived women is {} %'.format(round(percentage,2)))","bc8bd890":"# Visualize percenteges by sex\nsb.set_context('poster')\nsb.set_style('ticks')\nsb.barplot(x='Sex',y='Survived',data=train)     \nsb.despine()     \n","c582dd65":"#  Count by Gender \n\nsb.set_context('poster')\nsb.set_style('ticks')\nsb.countplot(x='Survived',hue='Sex',data=train)  \nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n","798890f8":"# Visulise how many survived by Class (High, Middle ,Low )\nsb.barplot(x='Pclass',y='Survived',hue='Sex',data=train)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","90ecf6e8":"#Visulize by Age \nsb.barplot(x='Survived',y='Age',hue='Sex',data=train)\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","9d8dfb68":"from sklearn.model_selection import train_test_split\n#get target column\ny = train[\"Survived\"]\n#get the features .. only  features that matter\nfeatures = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX = pd.get_dummies(train[features])\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)\n\n","0537033a":"# train the model \nfrom sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier(n_estimators=600, max_depth=5, random_state=1)\nrfc.fit(X_train,y_train)\n","2de1790a":"# make predicttions on the model\npredictions=rfc.predict(X_test)","f4321c84":"#Let's run some metrics \nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nprint('Confusion Matrix :\\n',confusion_matrix(y_test,predictions))\nprint('\\n')\nprint('Classification report :\\n',classification_report(y_test,predictions))\nprint('\\n')\nprint('Accuracy score is : {}'.format(round(accuracy_score(y_test,predictions),2)))","1783cd43":"#grab the test set\ntest=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n#show the head of the df \ntest.head()","e90938bb":"features = [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"]\nX_test = pd.get_dummies(test[features])\ntest_predictions=rfc.predict(X_test)\n#save my submission \nsubmission= pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission['Survived']=test_predictions\n#save the submission\nsubmission.to_csv('submission.csv', index=False)\nprint(\" Submission  successfully saved!\")","f27abe6d":"Train Test Split","1f31596d":"Get the percentage of survivors by Gender","62c73129":"#### Make the submission on the testset","b612af1f":"As we can see the gender matters here !","c34526a7":"##### Testing the model on the testset "}}