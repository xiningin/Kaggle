{"cell_type":{"e47bf57f":"code","49f09d9b":"code","577cd7c3":"code","f7c2fc0b":"code","c97021b8":"code","e7dd02f6":"code","b4df02f9":"code","8635a367":"code","07e20f55":"code","39454879":"code","ad1ba163":"markdown","df4d1abd":"markdown"},"source":{"e47bf57f":"from  numpy import *\nimport cv2\nimport numpy\nfrom scipy.cluster.vq import *\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import ndimage as ndi\n\nfrom skimage import data\nfrom skimage.metrics import (adapted_rand_error,\n                              variation_of_information)\nfrom skimage.filters import sobel\nfrom skimage.measure import label\nfrom skimage.util import img_as_float\nfrom skimage.feature import canny\nfrom skimage.morphology import remove_small_objects\nfrom skimage.segmentation import (morphological_geodesic_active_contour,\n                                  inverse_gaussian_gradient,\n                                  watershed,\n                                  mark_boundaries)\n \nimport matplotlib.pyplot as plt\nfrom skimage import data, img_as_float\nfrom skimage.segmentation import chan_vese","49f09d9b":"image = cv2.imread('..\/input\/defected-brain-image\/meningioma-care-scan.jpg',0)\nplt.imshow(image, cmap='gray')","577cd7c3":"\n\n#image = img_as_float(data.camera())\n# Feel free to play around with the parameters to see how they impact the result\ncv = chan_vese(image, mu=0.25, lambda1=1, lambda2=1, tol=1e-3, max_iter=50,\n               dt=0.5, init_level_set=\"checkerboard\", extended_output=True)\n\nfig, axes = plt.subplots(2, 2, figsize=(8, 8))\nax = axes.flatten()\n\nax[0].imshow(image, cmap=\"gray\")\nax[0].set_axis_off()\nax[0].set_title(\"Original Image\", fontsize=12)\n\nax[1].imshow(cv[0], cmap=\"gray\")\nax[1].set_axis_off()\ntitle = \"Chan-Vese segmentation - {} iterations\".format(len(cv[2]))\nax[1].set_title(title, fontsize=12)\n\nax[2].imshow(cv[1], cmap=\"gray\")\nax[2].set_axis_off()\nax[2].set_title(\"Final Level Set\", fontsize=12)\n\nax[3].plot(cv[2])\nax[3].set_title(\"Evolution of energy over iterations\", fontsize=12)\n\nfig.tight_layout()\nplt.show()","f7c2fc0b":"img_cv = cv[1]\nplt.imshow(img_cv, cmap='gray')","c97021b8":"elevation_map = sobel(img_cv)\nmarkers = np.zeros_like(img_cv)\nmarkers[image < 30] = 1\nmarkers[image > 150] = 2\nim_true = watershed(elevation_map, markers)\nim_true = ndi.label(ndi.binary_fill_holes(im_true - 1))[0]","e7dd02f6":"edges = sobel(img_cv)\nim_test1 = watershed(edges, markers=468, compactness=0.001)","b4df02f9":"edges = canny(img_cv)\nfill_coins = ndi.binary_fill_holes(edges)\nim_test2 = ndi.label(remove_small_objects(fill_coins, 21))[0]","8635a367":"image = img_as_float(img_cv)\ngradient = inverse_gaussian_gradient(image)\ninit_ls = np.zeros(image.shape, dtype=np.int8)\ninit_ls[10:-10, 10:-10] = 1\nim_test3 = morphological_geodesic_active_contour(gradient, iterations=500,\n                                                 init_level_set=init_ls,\n                                                 smoothing=1, balloon=-1,\n                                                 threshold=0.69)\nim_test3 = label(im_test3)\n\nmethod_names = ['Compact watershed', 'Canny filter',\n                'Morphological Geodesic Active Contours']\nshort_method_names = ['Compact WS', 'Canny', 'GAC']\n\nprecision_list = []\nrecall_list = []\nsplit_list = []\nmerge_list = []\nfor name, im_test in zip(method_names, [im_test1, im_test2, im_test3]):\n    error, precision, recall = adapted_rand_error(im_true, im_test)\n    splits, merges = variation_of_information(im_true, im_test)\n    split_list.append(splits)\n    merge_list.append(merges)\n    precision_list.append(precision)\n    recall_list.append(recall)\n    print(f\"\\n## Method: {name}\")\n    print(f\"Adapted Rand error: {error}\")\n    print(f\"Adapted Rand precision: {precision}\")\n    print(f\"Adapted Rand recall: {recall}\")\n    print(f\"False Splits: {splits}\")\n    print(f\"False Merges: {merges}\")\n\nfig, axes = plt.subplots(2, 3, figsize=(9, 6), constrained_layout=True)\nax = axes.ravel()\n\nax[0].scatter(merge_list, split_list)\nfor i, txt in enumerate(short_method_names):\n    ax[0].annotate(txt, (merge_list[i], split_list[i]),\n                   verticalalignment='center')\nax[0].set_xlabel('False Merges (bits)')\nax[0].set_ylabel('False Splits (bits)')\nax[0].set_title('Split Variation of Information')\n\nax[1].scatter(precision_list, recall_list)\nfor i, txt in enumerate(short_method_names):\n    ax[1].annotate(txt, (precision_list[i], recall_list[i]),\n                   verticalalignment='center')\nax[1].set_xlabel('Precision')\nax[1].set_ylabel('Recall')\nax[1].set_title('Adapted Rand precision vs. recall')\nax[1].set_xlim(0, 1)\nax[1].set_ylim(0, 1)\n\nax[2].imshow(mark_boundaries(image, im_true))\nax[2].set_title('True Segmentation')\nax[2].set_axis_off()\n\nax[3].imshow(mark_boundaries(image, im_test1))\nax[3].set_title('Compact Watershed')\nax[3].set_axis_off()\n\nax[4].imshow(mark_boundaries(image, im_test2))\nax[4].set_title('Edge Detection')\nax[4].set_axis_off()\n\nax[5].imshow(mark_boundaries(image, im_test3))\nax[5].set_title('Morphological GAC')\nax[5].set_axis_off()\n\nplt.show()","07e20f55":"plt.imshow(mark_boundaries(image, im_true))","39454879":"plt.imshow(mark_boundaries(image, im_test3))","ad1ba163":"For the segmented image using **chan vese****","df4d1abd":"credits to : https:\/\/scikit-image.org\/docs\/dev\/api\/skimage.metrics.html?highlight=metric#module-skimage.metrics "}}