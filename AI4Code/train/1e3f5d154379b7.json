{"cell_type":{"008a4aec":"code","11e0a7ef":"code","cd8b1b6f":"code","521e5956":"code","1fd8ab69":"code","596acfbd":"code","61264388":"code","5cc3c7ce":"code","a72f0233":"code","c993267a":"code","586c3c7d":"code","b6819372":"code","d3d09f54":"code","5fb89c05":"code","a38a44ba":"code","096970a6":"code","0893800f":"code","ef5ce8da":"code","ab3dfe45":"code","310b2f21":"code","98aebee5":"code","02f3a6af":"code","36db1717":"code","2afb31c6":"code","aeb22741":"code","3ceb757a":"code","8bdaff9c":"code","ed862c45":"code","6eb7244d":"code","4261b83f":"markdown","69c79ba6":"markdown","1a0ba7d8":"markdown","4dddb674":"markdown","ea363517":"markdown","613566f0":"markdown","6be9a0e0":"markdown","9866a797":"markdown","f647866b":"markdown","a44d5e42":"markdown","9735c3f0":"markdown","bea943d0":"markdown","a16d1f1a":"markdown","9fe6eb32":"markdown","c7d5163f":"markdown","83b9d2c0":"markdown","34074481":"markdown","35365b59":"markdown","97641b4a":"markdown"},"source":{"008a4aec":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn import ensemble, tree, linear_model\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom scipy.stats import skew\nimport math\nfrom sklearn.metrics import mean_squared_error\nimport sklearn.metrics as sklm\nimport warnings\nwarnings.filterwarnings('ignore')","11e0a7ef":"df_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","cd8b1b6f":"df_train.shape","521e5956":"df_train.head()","1fd8ab69":"df_train.describe()","596acfbd":"df_train.columns","61264388":"#merging the test and train data\nframes = [df_train,df_test]\ndf = pd.concat(frames, keys=['x', 'y'])\n\ndf","5cc3c7ce":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","a72f0233":"for column in ['Electrical', 'SaleType', 'KitchenQual', 'Exterior1st','Exterior2nd','Functional','Utilities','MSZoning']:\n    df[column].fillna(method='ffill',inplace=True)","c993267a":"num_features = df.select_dtypes(include=np.number).columns.tolist()\ncat_features = df.select_dtypes(exclude=np.number).columns.tolist()\nnum_features.remove('SalePrice')","586c3c7d":"df['LotFrontage'].fillna(df['LotFrontage'].mean(), inplace = True)\ndf[cat_features] = df[cat_features].fillna(\"none\")\ndf[num_features] = df[num_features].fillna(0)","b6819372":"total = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(25)","d3d09f54":"df['TotalArea'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF'] + df['GrLivArea'] +df['GarageArea']\n\ndf['Bathrooms'] = df['FullBath'] + df['HalfBath']*0.5 \n\ndf['Year average']= (df['YearRemodAdd'] + df['YearBuilt'])\/2","5fb89c05":"corrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True,cmap=\"RdYlGn\");","a38a44ba":"corrmat = df_train.corr()\ntop_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(df_train[top_features].corr(),annot=True,cmap=\"RdYlGn\")","096970a6":"#scatterplot\nsns.set()\ncolumns = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', '1stFlrSF']\nsns.pairplot(df_train[columns], size = 3)\nplt.show();","0893800f":"plt.scatter(df_train.GrLivArea, df_train.SalePrice, c = 'b')\nplt.scatter(df_train.TotalBsmtSF, df_train.SalePrice, c = 'g')","ef5ce8da":"df.shape","ab3dfe45":"#df_train.sort_values(by = 'GrLivArea', ascending = False)[:2]\ndf.drop(df[df['Id'] == 1299].index, inplace = True)\ndf.drop(df[df['Id'] == 524].index, inplace = True)","310b2f21":"sns.distplot(df['SalePrice']);\nfig = plt.figure()\nres = stats.probplot(df['SalePrice'], plot=plt)","98aebee5":"df_train['SalePrice'] = np.log1p(df_train['SalePrice'])\nsns.distplot(df_train['SalePrice']);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","02f3a6af":"df['MSSubClass'] = df['MSSubClass'].apply(str)\ndf['YrSold'] = df['YrSold'].astype(str)","36db1717":"df.skew(axis=0).sort_values(ascending= False).head(10)\n","2afb31c6":"num_features = df.select_dtypes(include=np.number).columns.tolist()\ndf[num_features] = np.log1p(df[num_features])","aeb22741":"df1 = pd.get_dummies(df.drop('SalePrice', axis=1))\nX_train = df1.xs('x')\nX_test = df1.xs('y')","3ceb757a":"df_train = df_train.drop(df_train[df_train['Id'] == 1299].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 524].index)\ny_train = df_train.iloc[:,80]","8bdaff9c":"y_train.shape","ed862c45":"from sklearn.linear_model import Lasso\nimport sklearn.model_selection as ms\nparameters= {'alpha':[0.0001,0.0009,0.001,0.01,0.1,1,10],\n            'max_iter':[100,500,1000]}\n\n\nlasso = Lasso()\nlasso_model = ms.GridSearchCV(lasso, param_grid=parameters, scoring='neg_mean_squared_error', cv=10)\nlasso_model.fit(X_train,y_train)\n\nprint('The best value of Alpha is: ',lasso_model.best_params_)","6eb7244d":"lasso_mod=Lasso(alpha=0.0009,max_iter = 500)\nlasso_mod.fit(X_train,y_train)\ny_lasso_train=lasso_mod.predict(X_train)\ny_lasso_test=lasso_mod.predict(X_test)\nmath.sqrt(sklm.mean_squared_error(y_train, y_lasso_train))","4261b83f":"Zooming up the map to list the top correlations with SalePrice","69c79ba6":"Converting the categorical columns into numerical","1a0ba7d8":"Taking a look at the target variable. It looks skewed so we transform it to fit normal distribution","4dddb674":"# Importing libraries and reading the data","ea363517":"Filling certain categorical columns about which we have an intuition using the forward fill method ","613566f0":"# Fitting the Model","6be9a0e0":"Getting the basic information about the data\n","9866a797":"# Transforming the data","f647866b":"Getting the scatterplot for the top correlated features","a44d5e42":"# Missing values","9735c3f0":"Checking the correlation of the numerical features","bea943d0":"# Data Visualization","a16d1f1a":"Checking the skewness of other variables and treating it.","9fe6eb32":"Making sure the no other values are missed. ","c7d5163f":"Checking for the number and percentage of missing values","83b9d2c0":"checking for the outliers and dropping them","34074481":"Extracting the column names of the numerical and categorical features separately and filling the rest of the missing values.","35365b59":"Creating new features as per our intuition and dropping the other columns.","97641b4a":"Hi everyone. Below is my first submission to the ever famous housing regression. The apt dataset for beginners into kaggle, I realized a lot of kernels to be full of long codes that intimidated me as a beginner.\n\nHere I've tried to optimize my code and still providing the best results which I believe will not be intimidating for beginners and learners who are trying to get their first submission. \n\nTo anyone who views the code - an upvote will be appreciated. You know how motivating it is to keep you going. Feel free to comment out any errors or suggestions without any hesitation."}}