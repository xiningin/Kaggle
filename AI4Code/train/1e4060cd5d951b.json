{"cell_type":{"0b2954ce":"code","db68a322":"code","66bad711":"code","949c3c37":"code","3d1804a0":"code","582caa5a":"code","57cdc3ed":"code","935d0d40":"code","c3926507":"code","4c70b731":"code","6c24b9b3":"code","c480e826":"code","7f3b4fe4":"code","61919c41":"code","acf8ba0b":"code","4db9ad86":"code","e0e6d6ee":"code","816ddcbf":"code","08af50b8":"code","a97ddd4e":"code","0fd7f910":"code","86aa2ad3":"code","9567c42d":"code","b00e7e57":"code","23039fdc":"code","4ae613ba":"code","58a99bf1":"code","1182fb02":"code","810df3f5":"code","e3fabc6d":"code","d966f95b":"code","f3b3adbf":"code","2c79b0d6":"code","8216be95":"markdown","cbd332cc":"markdown","f1783074":"markdown","80897cd3":"markdown","ef602741":"markdown","f455a540":"markdown","15ed3ad9":"markdown","5da057ae":"markdown","4da83301":"markdown","4a2c1eaa":"markdown","dcef0b1b":"markdown","ed96d871":"markdown","a198a7a5":"markdown","9670c76d":"markdown","f83d0a4d":"markdown","0ef5928e":"markdown","3684d96f":"markdown","e2443ca3":"markdown","4887a66f":"markdown","6b1aee6b":"markdown","534b60b4":"markdown","b30f80d5":"markdown","a1aefa32":"markdown","5d3f67f2":"markdown","c36d5a02":"markdown","55de3735":"markdown","61482374":"markdown","e7e76fb0":"markdown","6477390d":"markdown","360a9a93":"markdown","dfb56af8":"markdown","1065f84b":"markdown","042cba5f":"markdown","83e1432a":"markdown","b09e2def":"markdown","d2d62537":"markdown"},"source":{"0b2954ce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling \nimport seaborn as sns # visualization\nimport matplotlib.pyplot as plt # visualization\nfrom sklearn.preprocessing import LabelEncoder # label encoding\nfrom sklearn.model_selection import train_test_split # train, test split\nfrom sklearn.preprocessing import StandardScaler # normalization\nfrom sklearn.neighbors import KNeighborsClassifier # KNN model\nfrom sklearn.svm import SVC # SVC model\nfrom xgboost import XGBClassifier # XGBoost model\nfrom sklearn.model_selection import GridSearchCV, cross_val_score # Gridsearch \nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve# results\n\nimport warnings # ignore warning\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","db68a322":"# reading and copying data\ndata = pd.read_csv(\"\/kaggle\/input\/german-credit-data-with-risk\/german_credit_data.csv\", index_col = \"Unnamed: 0\")\ndf = data.copy()","66bad711":"# overview of data\ndf.head()","949c3c37":"df.info()","3d1804a0":"df.describe().T","582caa5a":"columns = [\"Age\",\"Sex\",\"Job\",\"Housing\",\"Saving accounts\",\"Checking account\",\"Credit amount\",\"Duration\",\"Purpose\",\"Risk\"]\n\ndef unique_value(data_set, column_name):\n    return data_set[column_name].nunique()\n\nprint(\"Number of the Unique Values:\\n\",unique_value(df, columns))    ","57cdc3ed":"# Missing Value Table\ndef missing_value_table(df):\n    missing_value = df.isna().sum().sort_values(ascending=False)\n    missing_value_percent = 100 * df.isna().sum()\/\/len(df)\n    missing_value_table = pd.concat([missing_value, missing_value_percent], axis=1)\n    missing_value_table_return = missing_value_table.rename(columns = {0 : 'Missing Values', 1 : '% Value'})\n    cm = sns.light_palette(\"lightgreen\", as_cmap=True)\n    missing_value_table_return = missing_value_table_return.style.background_gradient(cmap=cm)\n    return missing_value_table_return\n  \nmissing_value_table(df)","935d0d40":"date_int = [\"Purpose\", 'Sex']\ncm = sns.light_palette(\"lightgreen\", as_cmap=True)\npd.crosstab(df[date_int[0]], df[date_int[1]]).style.background_gradient(cmap = cm)","c3926507":"fig, ax = plt.subplots(1,2,figsize=(15,5))\n\nsns.countplot(df['Sex'], ax=ax[0]).set_title('Male - Female Ratio');\nsns.countplot(df.Risk, ax=ax[1]).set_title('Good - Bad Risk Ratio');","4c70b731":"fig, ax = plt.subplots(2,1,figsize=(15,5))\nplt.tight_layout(2)\nsns.lineplot(data=df, x='Age', y='Credit amount', hue='Sex', lw=2, ax=ax[0]).set_title(\"Credit Amount Graph Depending on Age and Duration by Sex\", fontsize=15);\nsns.lineplot(data=df, x='Duration', y='Credit amount', hue='Sex', lw=2, ax=ax[1]);","6c24b9b3":"sns.countplot(x=\"Housing\", hue=\"Risk\", data=df).set_title(\"Housing and Frequency Graph by Risk\", fontsize=15);\nplt.show()","c480e826":"fig, (ax1, ax2) = plt.subplots(1,2, figsize=(10,6))\nsns.countplot(x=\"Saving accounts\", hue=\"Risk\", data=df, ax=ax1);\nsns.countplot(x=\"Checking account\", hue=\"Risk\", data=df, ax=ax2);\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=45)\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=45)\nfig.show()","7f3b4fe4":"fig, ax = plt.subplots(1,3,figsize=(20,5))\nplt.suptitle('Box Plots of Age, Duration and Credit amount.',fontsize = 15)\nsns.boxplot(df['Credit amount'], ax=ax[0]);\nsns.boxplot(df['Duration'], ax=ax[1]);\nsns.boxplot(df['Age'], ax=ax[2]);\nplt.show()","61919c41":"cor = df.corr()\nsns.heatmap(cor, annot=True).set_title(\"Correlation Graph of Data Set\",fontsize=15);\nplt.show()","acf8ba0b":"# Label Encoding\ncolumns_label = [\"Sex\",\"Risk\"]\nlabelencoder = LabelEncoder()\nfor i in columns_label:\n    df[i] = labelencoder.fit_transform(df[i])","4db9ad86":"Cat_Age = []\nfor i in df[\"Age\"]:\n    if i<25:\n        Cat_Age.append(\"0-25\")\n    elif (i>=25) and (i<30):\n        Cat_Age.append(\"25-30\")\n    elif (i>=30) and (i<35):\n        Cat_Age.append(\"30-35\")\n    elif (i>=35) and (i<40):\n        Cat_Age.append(\"35-40\")\n    elif (i>=40) and (i<50):\n        Cat_Age.append(\"40-50\")\n    elif (i>=50) and (i<76):\n        Cat_Age.append(\"50-75\")\n        \ndf[\"Cat Age\"] = Cat_Age        ","e0e6d6ee":"# Get Dummies\ncolumns_dummy = ['Housing','Saving accounts','Checking account',\"Purpose\",\"Cat Age\"]\nfor i in columns_dummy:\n    df = pd.concat([df, pd.get_dummies(df[i])], axis=1)","816ddcbf":"df.drop(['Housing','Saving accounts','Checking account',\"Purpose\",\"Age\",\"Cat Age\"], axis = 1, inplace=True)","08af50b8":"y = df.Risk\nX = df.drop(\"Risk\", axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)","a97ddd4e":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","0fd7f910":"knn_model = KNeighborsClassifier(n_neighbors = 3)\nknn_model.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test) \nprint('With KNN (K=3) accuracy is: ',knn_model.score(X_test,y_test))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","86aa2ad3":"neig = np.arange(1, 25)\ntrain_accuracy = []\ntest_accuracy = []\n# Loop over different values of k\nfor i, k in enumerate(neig):\n    # k from 1 to 25(exclude)\n    knn_model = KNeighborsClassifier(n_neighbors=k)\n    # Fit with knn\n    knn_model.fit(X_train,y_train)\n    #train accuracy\n    train_accuracy.append(knn_model.score(X_train, y_train))\n    # test accuracy\n    test_accuracy.append(knn_model.score(X_test, y_test))\n\n# Plot\nplt.figure(figsize=[12,6])\nplt.plot(neig, test_accuracy, label = 'Testing Accuracy')\nplt.plot(neig, train_accuracy, label = 'Training Accuracy')\nplt.legend()\nplt.title('-value VS Accuracy')\nplt.xlabel('Number of Neighbors')\nplt.ylabel('Accuracy')\nplt.xticks(neig)\nplt.savefig('graph.png')\nplt.show()\nprint(\"Best accuracy is {} with K = {}\".format(np.max(test_accuracy),1+test_accuracy.index(np.max(test_accuracy))))","9567c42d":"knn_model = KNeighborsClassifier(n_neighbors = 23)\nknn_model.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test) \nprint('With KNN (K=23) accuracy is: ',knn_model.score(X_test,y_test))\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","b00e7e57":"#Predicting proba\ny_pred_prob = knn_model.predict_proba(X_test)[:,1]\n\n# Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","23039fdc":"#Predicting proba\ny_pred_prob = model.predict_proba(X_test)[:,1]\n\n# Generate ROC curve values: fpr, tpr, thresholds\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)\n\n# Plot ROC curve\nplt.plot([0, 1], [0, 1], 'k--')\nplt.plot(fpr, tpr)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.show()","4ae613ba":"svc_model = SVC(kernel = \"rbf\").fit(X_train, y_train)\ny_pred = svc_model.predict(X_test)\nprint(\"Accuracy Score:\", accuracy_score(y_test, y_pred))","58a99bf1":"svc_params ={\"C\": [0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 50, 100]\n             ,\"gamma\": [0.0001, 0.001, 0.01, 0.1, 1, 5, 10, 50, 100]}\nsvc = SVC()\nsvc_cv_model = GridSearchCV(svc, svc_params, cv = 10, n_jobs = -1, verbose = 2)\nsvc_cv_model.fit(X_train, y_train)","1182fb02":"print(\"Best Parameters: \"+ str(svc_cv_model.best_params_))","810df3f5":"svc_tuned = SVC(C = 10, gamma = 0.01).fit(X_train, y_train)\ny_pred = svc_model.predict(X_test)\nprint(\"Accuracy Score:\", accuracy_score(y_test, y_pred))","e3fabc6d":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)\ny_pred_xgb = xgb.predict(X_test)\nprint(accuracy_score(y_pred_xgb, y_test))","d966f95b":"xgb_params = {\"n_estimators\": [100, 500, 1000, 2000],\n             \"subsample\": [0.6, 0.8, 1.0],\n             \"max_depth\": [3, 4, 5, 6],\n             \"learning_rate\": [0.1, 0.01, 0.02, 0.05],\n             \"min_samples_split\": [2,5,10]}\nxgb = XGBClassifier()\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 10, n_jobs = -1, verbose = 2)\nxgb_cv_model.fit(X_train, y_train)","f3b3adbf":"print(\"Best Parameters: \"+ str(xgb_cv_model.best_params_))","2c79b0d6":"xgb = XGBClassifier(learning_rate = 0.05, max_depth = 5, min_samples_split=2,n_estimators=100,subsample=0.8 )\nxgb_tuned = xgb.fit(X_train,y_train)\ny_pred = xgb_tuned.predict(X_test)\nprint(\"Accuracy Score:\", accuracy_score(y_test, y_pred))","8216be95":"<a id=\"4\"><\/a>\n## Data Visualization","cbd332cc":"* Used get dummies method for some columns.","f1783074":"* At first scan, it is thought that the rich people will get more credit, but it does not seem to be clearly on the graphics.","80897cd3":"<a id=\"1\"><\/a>\n# 1) Data Understanding","ef602741":"* Accuracy is 0.69 (K = 3) ","f455a540":"<a id=\"2\"><\/a>\n## Load and Check Data","15ed3ad9":"Summary of Statistics of Numerical Values:\n\n* Age: max 75.0, min 19.0, mean 35.546\n* Job: max 3.0, min 0.0, mean 1.904\n* Credit amount: max 18424.0, min 250.0, mean 3271.258\n* Duration: max 72.0, min 4.0, mean 20.903","5da057ae":"* Looking at the graphics, the rate of males in this data set is higher than the rate of females.\n* Looking at the graphics, the rate of good risk in this data set is higher than the rate of bad risk.","4da83301":"* Label encoding","4a2c1eaa":"<a id=\"8\"><\/a>\n## SVC(Support Vector Classification) Model","dcef0b1b":"Number of Missing Values:\n\n* Checking account: number of missing value 394, percent of missing value 39\n* Saving accounts: number of missing value 183, percent of missing value18","ed96d871":"Sex and Purpose:\n\n* Women(94) and Men(243) applied for credit mostly for cars.\n* Women(3) applied for credit least for vacation\/others.\n* Men(6) applied for credit least for domestic appliances.","a198a7a5":"!!! missing values were not filled or droped because when filled or droped, the accuracy value was decreasing. ","9670c76d":"* drop unnecessary columns.","f83d0a4d":"# Introduction\n![](https:\/\/zeynepstefan.com\/wp-content\/uploads\/2018\/04\/creditrisk.jpg)\n\n## Aim:\n\nMaking risk prediction based on given features.\n\n## Context:\n\nThe original dataset contains 1000 entries with 20 categorial\/symbolic attributes prepared by Prof. Hofmann. In this dataset, each entry represents a person who takes a credit by a bank. Each person is classified as good or bad credit risks according to the set of attributes. The link to the original dataset can be found below.\n\n## Content:\n1. [Data Understanding](#1)\n    * [Load and Check Data](#2)\n    * [Variable Description](#3)\n    * [Data Visualization](#4)\n1. [Data Preprocessing](#5)                          \n1. [Modeling](#6)\n    * [KNN Model](#7)\n    * [SVC Model](#8)\n    * [XGBoost Model](#9)","0ef5928e":"Number of the Unique Values:\n\n* Age(53):\n* Sex(2): (male, female)\n* Job(4): (0, 1, 2, 3)\n* Housing(3): (own, free, rent)\n* Saving accounts(4): (little, moderate, quite rich, rich)\n* Checking account(3): (little, moderate, rich)\n* Credit amount(921):\n* Duration(33):\n* Purpose(8): (radio\/TV, education, furniture\/equipment, car, business, domestic appliances, repairs, vacation\/others)\n* Risk(2): (bad, good)","3684d96f":"<a id=\"7\"><\/a>\n## KNN(K-Nearest Neighbors) Model","e2443ca3":"<a id=\"3\"><\/a>\n## Variable Description","4887a66f":"<a id=\"6\"><\/a>\n# 3) Modeling","6b1aee6b":"* There is a correlation between Credit amount and Duration(0.62).","534b60b4":"* The risk rates are higher in the own, free and rent categories then bad risk.\n* Owners of their own homes are the people who apply for a loan the most.","b30f80d5":"* After tuning accuracy score is 0.79.","a1aefa32":"Meaning of the Values:\n\n1. Age: Age of the person applying for the credit.\n1. Sex: Gender of the person applying for the credit.\n1. Job: 0,1,2,3 The values specified for the job in the form of 0,1,2,3.\n1. Housing: own, rent or free.\n1. Saving accounts: the amount of money in the person's bank account.\n1. Checking account: cheque account.\n1. Credit amount: Credit amount.\n1. Duration: Time given for credit payment.\n1. Purpose: Goal of credit application.\n1. Risk: Credit application positive or negative.","5d3f67f2":"* Max accuracy is 0.725(K=23)","c36d5a02":"* converting age to category.","55de3735":"* Before Tuning accuracy score is 0.745.  ","61482374":"* After Tuning accuracy score same with before tuning so, 0.745.","e7e76fb0":"Summary of the Columns and Rows:\n\n* int64(4): Age, Job, Credit amount, Duration\n* object(6): Sex, Housing, Saving accounts, Checking account, Purpose, Risk\n* row number: 1000\n* column number: 10","6477390d":"* Checking max. accuracy with graph.","360a9a93":"<a id=\"9\"><\/a>\n## XGBoost Model","dfb56af8":"* overview of data","1065f84b":"<a id=\"5\"><\/a>\n# 2) Data Preprocessing","042cba5f":"* Before tuning accuracy score is 0.735.","83e1432a":"* Looking at the chart, the highest credit amount was reached at the age of 60 and around.\n* Looking at the graph, the highest loan amounts between 50-60 duration have been reached.","b09e2def":"* Separated data as train and test.","d2d62537":"* Applied standart scaling."}}