{"cell_type":{"41d07cde":"code","0bb6f1fb":"code","7269f22a":"code","6b36ae78":"code","66c1712d":"code","63695a83":"code","09246900":"code","fffce31a":"code","03a885ac":"code","d038da13":"code","3b984b4a":"code","f84a7172":"code","f1270416":"code","1264706e":"code","d0c1bd04":"code","c779e1da":"code","4a2bda36":"code","ada310b6":"code","32142ea4":"code","a834a508":"code","210ddb25":"code","b5f7beca":"code","38b0822a":"code","adf2d1a9":"code","fba67825":"code","f7f214e8":"code","89409153":"code","51813625":"code","21b162fd":"code","9888d1ac":"code","a53c7d5d":"code","78196dc6":"code","1881b8a2":"code","72db7b97":"code","6732134c":"code","ac25a552":"code","82c12a0f":"code","e53964cb":"code","c38bb2bf":"code","7207007d":"code","9c0a4ad0":"code","3842903f":"code","a277e5b5":"code","db4d7fb2":"code","71d0517a":"code","89c283fd":"code","98bed6d8":"code","434f96af":"code","03e7497b":"code","a5297e5c":"code","10b64234":"code","87b06ae5":"code","27330d30":"code","81b0b3f7":"code","5dc17237":"markdown","d02dffba":"markdown","09e25dfb":"markdown","44b61647":"markdown","9bbe755e":"markdown"},"source":{"41d07cde":"# packages used\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')","0bb6f1fb":"# creating a dataframe\ndf = pd.read_csv('\/kaggle\/input\/wine-reviews\/winemag-data_first150k.csv')","7269f22a":"# checking the shape\ndf.shape","6b36ae78":"# examining the top 5 rows\ndf.head()","66c1712d":"# examining the bottom 5 rows\ndf.tail()","63695a83":"# inspecting other dataframe information\ndf.info()","09246900":"# dataframe stats\ndf.describe()","fffce31a":"# checking for missing data\nplt.figure(figsize=(18,6))\nsns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)\nplt.title('Missing Data')","03a885ac":"# dropping a few columns\ndf.drop(['Unnamed: 0', \n         'description', \n         'designation', \n         'region_1', \n         'region_2'], axis=1, inplace=True)\ndf","d038da13":"# checking for missing data\nplt.figure(figsize=(18,6))\nsns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)\nplt.title('Missing Data')","3b984b4a":"# missing data info\nmissing_data = len([x for x in df['price'].isnull() if x==True])\ntotal_data = len([x for x in df['price']])\nprint(df[df['price'].isnull()])\nprint()\nprint(f'Approximatly {round(missing_data \/ total_data * 100, 2)}% of the column contains missing data.')\nprint(f'{missing_data} is missing out of {total_data} total')","f84a7172":"# analyzing missing price values\ndf['price'].value_counts()","f1270416":"# dropping missing values\ndf.dropna(inplace=True)","1264706e":"# one last check for missing data\nplt.figure(figsize=(18,6))\nsns.heatmap(df.isnull(), cbar=False, cmap='viridis', yticklabels=False)\nplt.title('Missing Data')","d0c1bd04":"# sorting by \"points\"\ndf.sort_values('points', ascending=False)","c779e1da":"# analyzing value counts of each column\ndef column_counts():\n    for each in df.columns:\n        plt.figure(figsize=(18,6))\n        chart = sns.countplot(df[each])\n        chart.set_xticklabels(chart.get_xticklabels(), rotation=90, horizontalalignment='center')\n        plt.title(f'{each}')\n        yield\ncc_viz = column_counts()","4a2bda36":"next(cc_viz)","ada310b6":"next(cc_viz)","32142ea4":"# getting highly rated wine by Country\ntop_wines = df[df['points']>=95]\nplt.figure(figsize=(18,6))\nchart = sns.countplot(top_wines['country'])\nchart.set_xticklabels(chart.get_xticklabels(), rotation=90, horizontalalignment='center')\nplt.title('Country')\n","a834a508":"# getting inexpensive wine\nmin_price = df[df['price']==df['price'].min()]\nmin_price","210ddb25":"# getting expensive wine\nmax_price = df[df['price']==df['price'].max()]\nmax_price","b5f7beca":"# average wine price\navg_price = df['price'].median()\navg_price","38b0822a":"# inspecting data in a bar chart\nx=df['points']\ny=df['price']\nsns.barplot(x,y, ci=None)","adf2d1a9":"# inspecting data on line graph\nx=df['points']\ny=df['price']\nsns.lineplot(x,y)","fba67825":"# analyzing correlation of price & points\nsns.heatmap(df.corr(),cmap='plasma',annot=True)","f7f214e8":"# visualizing distribution of points\nsns.distplot(df['points'])","89409153":"# visualizing distribution of price\nsns.distplot(df['price'], bins=15)","51813625":"# inspecting pairplots\nsns.pairplot(data=df)","21b162fd":"# examaning data with a boxplot\nx=df['points']\ny=df['price']\nsns.boxplot(x,y)","9888d1ac":"# dropping some outliers\nsns.boxplot(x,y,showfliers = False)","a53c7d5d":"# looking at a quick regression plot\nsns.regplot(x,y,line_kws={\"color\": \"green\"})","78196dc6":"# setting a max price per bottle\nmin_bottle_price = 10\nto_drop = df[df['price']<min_bottle_price].index\nmax_bottle_price = 100\nto_drop = df[df['price']>max_bottle_price].index\nto_drop","1881b8a2":"# dropping samples above \"bottle_price\"\ndf.drop(to_drop, inplace=True)","72db7b97":"# checking dataframe shape\ndf.shape","6732134c":"# analyzing correlation of price & points again\nsns.heatmap(df.corr(),cmap='plasma',annot=True)","ac25a552":"# another quick regression check\nx=df['points']\ny=df['price']\nsns.regplot(x,y,line_kws={\"color\": \"green\"})","82c12a0f":"# another quick line plot\nsns.lineplot(x,y)","e53964cb":"# splitting the data into train test\nmsk = np.random.rand(len(df)) < 0.8\ntrain = df[msk]\ntest = df[~msk]","c38bb2bf":"sns.scatterplot(train.points, train.price)","7207007d":"# linear regression fitting\nfrom sklearn import linear_model\n\nregr = linear_model.LinearRegression()\ntrain_x = np.asanyarray(train[['points']])\ntrain_y = np.asanyarray(train[['price']])\nregr.fit(train_x, train_y)","9c0a4ad0":"# checking coeffecient\nregr.coef_","3842903f":"# checking intercept\nregr.intercept_","a277e5b5":"# training data, coef & intercept plot\nsns.scatterplot(train['points'], train['price'])\nplt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-g')","db4d7fb2":"from sklearn.metrics import r2_score\n\ntest_x = np.asanyarray(test[['points']])\ntest_y = np.asanyarray(test[['price']])\ny_pred = regr.predict(test_x)\n\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_pred - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - test_y) ** 2))\nprint(\"R2-score: %.2f\" % r2_score(test_y , y_pred) )","71d0517a":"sns.lineplot(x,y)\nplt.plot(test_x,y_pred)","89c283fd":"x_data, y_data = (df[\"points\"].values, df[\"price\"].values)","98bed6d8":"# Lets normalize our data\nxdata =x_data\/max(x_data)\nydata =y_data\/max(y_data)","434f96af":"# exploring exponential relationship\nY= np.exp(xdata)\n\nsns.lineplot(xdata,ydata)\nsns.lineplot(xdata,Y)","03e7497b":"def sigmoid(x, Beta_1, Beta_2):\n    '''\n    input 3 variables\n        x:list\n        Beta_1:curve steepness\n        Beta_2:curve position on x-axis\n    returns an array of predictions\n    '''\n    y = 1 \/ (1 + np.exp(-Beta_1*(x-Beta_2)))\n    return y","a5297e5c":"# analyzing sigmoid relationship\nfrom scipy.optimize import curve_fit\n\npopt, pcov = curve_fit(sigmoid, xdata, ydata)\n\nprint(\"beta_1 = %f, beta_2 = %f\" % (popt[0], popt[1]))","10b64234":"# visualizaing actual data with sigmoid prediction\nx = np.linspace(80, 100, 20)\nx = x\/max(x)\nplt.figure(figsize=(8,5))\ny = sigmoid(x, *popt)\nsns.lineplot(xdata, ydata, label='data')\nplt.plot(x,y, linewidth=3.0, label='fit')\nplt.legend(loc='best')\nplt.ylabel('Price')\nplt.xlabel('Points')\nplt.show()","87b06ae5":"# split data into train\/test\nmsk = np.random.rand(len(df)) < 0.8\ntrain_x = xdata[msk]\ntest_x = xdata[~msk]\ntrain_y = ydata[msk]\ntest_y = ydata[~msk]\n\n# build the model using train set\npopt, pcov = curve_fit(sigmoid, train_x, train_y)\n\n# predict using test set\ny_hat = sigmoid(test_x, *popt)\n\n","27330d30":"sns.scatterplot(xdata, ydata, label='actual', alpha=0.1)\nsns.scatterplot(test_x,y_hat, label='predict')","81b0b3f7":"# evaluation\nprint(\"Mean absolute error: %.2f\" % np.mean(np.absolute(y_hat - test_y)))\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_hat - test_y) ** 2))\nfrom sklearn.metrics import r2_score\nprint(\"R2-score: %.2f\" % r2_score(test_y, y_hat) )","5dc17237":"## Conclusion...\nSo far the sigmoid function provides the best results and helps prove some of my initial assumptions around the price of wine and its rating. I honestly learned that the United States produces the most wine, France produces the most expensive wine, and there are some really **great** \"cheap\" wines, at least with regards to this dataset.\nI believe next steps would be to further refine. I am thinking about isolating the dataset to one country, maybe the United States, and then test some other algorithms like k-Nearest Neighbor, see how it responds to a Neural Network and maybe use NLP on the wine descriptions.","d02dffba":"## Linear Regression Evaluation","09e25dfb":"## World of Winecraft\nI began this journey not knowing much about the world of wine, I had a few ideas, but nothing concrete. I imagine maybe France or Italy would have the most wines and possibly the highest rated wines too. I assume the higher rated wines to have a higher price as well.","44b61647":"## Exploratory Data Analysis","9bbe755e":"## Modeling & Reporting"}}