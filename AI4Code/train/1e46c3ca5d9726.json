{"cell_type":{"8832a601":"code","a69e44ef":"code","27128a36":"code","82aa962a":"code","5d184bcd":"code","932d1698":"code","e5c9190d":"code","92e2e412":"code","fb39587a":"code","2701a1b9":"code","e0f21461":"code","7ea8f9ab":"code","1b9d9689":"code","7b0e2a49":"code","827e18a3":"code","1fcb510a":"code","c531aaf3":"code","4359505f":"code","5220b5ed":"code","2706f642":"code","74202463":"code","5fd10e7d":"code","742f2b1a":"code","2b038acc":"code","96fe7f70":"code","e9f8f538":"code","f72251d6":"code","93852178":"code","9ae31bca":"code","c0380520":"code","d756b71c":"code","1b95af8c":"code","671d8241":"code","63e817af":"code","850c4be9":"code","7164395a":"code","aba2bcef":"markdown","8005e92c":"markdown","efe18822":"markdown","afab8dbb":"markdown","b1ca52f8":"markdown","2d1e2e5a":"markdown","7a4d3a8b":"markdown","494ebb92":"markdown","7c400491":"markdown","c34f09f7":"markdown","63117dc5":"markdown","2be23f66":"markdown","a6809060":"markdown"},"source":{"8832a601":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a69e44ef":"median_house = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\nhigh_school= pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\npoverty_level = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\nshare_race = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('\/kaggle\/input\/fatal-police-shootings-in-the-us\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","27128a36":"poverty_level.head()","82aa962a":"poverty_level.info()","5d184bcd":"poverty_level.poverty_rate","932d1698":"poverty_level.poverty_rate.value_counts()","e5c9190d":"poverty_level[\"Geographic Area\"].unique()","92e2e412":"print(area_poverty_rate)\ndata\nnew_index","fb39587a":"# Poverty rate of each state\n\npoverty_level.poverty_rate.replace(['-'],0.0,inplace=True)\npoverty_level.poverty_rate = poverty_level.poverty_rate.astype(float)\narea_list = list(poverty_level['Geographic Area'].unique())\narea_poverty_ratio = []\nfor i in area_list:\n    x = poverty_level[poverty_level['Geographic Area']==i]\n    area_poverty_rate = sum(x.poverty_rate)\/len(x)\n    area_poverty_ratio.append(area_poverty_rate)\ndata = pd.DataFrame({'area_list':area_list, 'area_poverty_ratio':area_poverty_ratio})\nnew_index = (data['area_poverty_ratio'].sort_values(ascending = False)).index.values\nsorted_data = data.reindex(new_index)\n#visualization\n\nplt.figure(figsize = (15,10))\nsns.barplot(x = sorted_data['area_list'], y=sorted_data['area_poverty_ratio'])\nplt.xticks(rotation = 90)\nplt.xlabel('States')\nplt.ylabel('Poverty Rate')\nplt.title('Poverty Rate Given States')","2701a1b9":"kill","e0f21461":"kill.tail()","7ea8f9ab":"# Most common 15 Name or Surname of killed people\nseparate = kill.name[kill.name != 'TK TK'].str.split()\na,b = zip(*separate)\nname_list = a+b\nname_count = Counter(name_list)\nmost_common_names = name_count.most_common(15)\nx,y = zip(*most_common_names)\nx,y = list(x),list(y)\n\n#visualization\nplt.figure(figsize=(15,10))\nsns.barplot(x=x,y=y,palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Name or Surname of killed people')\nplt.ylabel('frequency')\nplt.title('Most common 15 Name or Surname of killed people')\n","1b9d9689":"high_school.percent_completed_hs.value_counts()","7b0e2a49":"high_school","827e18a3":"# High school graduation rate of the population that is older than 25 in states\nhigh_school.percent_completed_hs.replace(['-'],0.0,inplace = True)\nhigh_school.percent_completed_hs = high_school.percent_completed_hs.astype(float)\narea_list = list(high_school['Geographic Area'].unique())\narea_school = []\nfor i in area_list:\n    x = high_school[high_school['Geographic Area'] ==i]\n    area_hs_rate = sum(x.percent_completed_hs)\/len(x)\n    area_school.append(area_hs_rate)\n\n#sorting\ndata = pd.DataFrame({'area_list':area_list, 'area_hs_ratio':area_school})\nnew_index = (data['area_hs_ratio'].sort_values(ascending=True)).index.values\nsorted_data2 = data.reindex(new_index)\n\n#visualization\nplt.figure(figsize = (15,5))\nsns.barplot(x=sorted_data2['area_list'], y=sorted_data2['area_hs_ratio'])\nplt.xticks(rotation=45)\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated High School\")\n","1fcb510a":"share_race\n","c531aaf3":"share_race.info()\n","4359505f":"# Percentage of state's population according to races that are black,white,native american, asian and hispanic\n\nshare_race.replace(['-'],0.0,inplace =True)\nshare_race.replace(['(X)'],0.0,inplace=True)\nshare_race.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']] = share_race.loc[:,['share_white','share_black','share_native_american','share_asian','share_hispanic']].astype(float)\narea_list = list(share_race['Geographic area'].unique())\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\nfor i in area_list:\n    x = share_race[share_race['Geographic area'] == i]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black)\/len(x))\n    share_native_american.append(sum(x.share_native_american)\/len(x))\n    share_asian.append(sum(x.share_asian)\/len(x))\n    share_hispanic.append(sum(x.share_hispanic)\/len(x))\n\n#visualization\nf,ax = plt.subplots(figsize = (9,15))\nsns.barplot(x=share_white, y=area_list,color='green',alpha =0.5,label='White')\nsns.barplot(x=share_black, y=area_list,color='blue',alpha =0.6,label = 'African American')\nsns.barplot(x=share_native_american, y=area_list,color='cyan',alpha=0.7,label='Native American')\nsns.barplot(x=share_asian, y=area_list,color='yellow',alpha=0.6,label='Asian')\nsns.barplot(x=share_hispanic,y=area_list,color='magenta',alpha=0.8,label ='Hispanic')\n\nax.legend(loc='lower right',frameon = True)\nax.set(xlabel='Percentage of Races', ylabel='States',title=\"Percentage of State's Population According to Races\")\n \n\n\n","5220b5ed":"sorted_data2\n","2706f642":"# High school graduation rate vs Poverty rate of each state\nsorted_data['area_poverty_ratio'] = sorted_data['area_poverty_ratio']\/max(sorted_data['area_poverty_ratio'])\nsorted_data2['area_hs_ratio'] = sorted_data2['area_hs_ratio']\/max(sorted_data2['area_hs_ratio'])\ndata = pd.concat([sorted_data,sorted_data2['area_hs_ratio']],axis=1)\ndata.sort_values('area_poverty_ratio',inplace=True)\n\n# visualization\nf,ax1 = plt.subplots(figsize = (20,10))\nsns.pointplot(x='area_list', y='area_poverty_ratio',data=data,color='pink',alpha=0.5)\nsns.pointplot(x='area_list', y='area_hs_ratio', data=data,color='green',alpha=0.8)\nplt.text(40,0.6,'high school graduate ratio', color='green', fontsize=17, style='italic')\nplt.text(40,0.55,'poverty ratio', color='pink', fontsize=18, style='italic')\nplt.xlabel('States', fontsize=15,color='blue')\nplt.ylabel('Values',fontsize=15,color='blue')\nplt.title('High School Graduate vs Poverty Ratio', fontsize=20,color='blue')\nplt.grid()\n","74202463":"g= sns.jointplot(data.area_poverty_ratio, data.area_hs_ratio,kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()","5fd10e7d":"data.head()","742f2b1a":"kill.race.dropna(inplace=True)\nlabels = kill.race.value_counts().index\ncolors = ['grey', 'blue', 'red', 'yellow', 'green','brown']\nexplode = [0,0,0,0,0,0]\nsizes = kill.race.value_counts().values\n\n#visualization\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode = explode,labels=labels,colors=colors, autopct = '%1.1f%%')\nplt.title('Killed People According to Races', color='blue',fontsize=15)","2b038acc":"kill.race.value_counts()","96fe7f70":"data.head()","e9f8f538":"sns.lmplot(x=\"area_poverty_ratio\", y=\"area_hs_ratio\", data=data)\nplt.show()","f72251d6":"sns.kdeplot(data.area_poverty_ratio, data.area_hs_ratio, shade=True,cut=5)\nplt.show()","93852178":"pal = sns.cubehelix_palette(2, rot=-.5, dark =.3)\nsns.violinplot(data=data, palette=pal, inner=\"points\")\nplt.show()","9ae31bca":"data.corr()","c0380520":"f,ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5, linecolor=\"red\", fmt= '.1f', ax=ax)\nplt.show()","d756b71c":"kill.manner_of_death.unique()","1b95af8c":"sns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\",data=kill, palette=\"PRGn\")\nplt.show()","671d8241":"sns.pairplot(data)\nplt.show()","63e817af":"kill.gender.value_counts()\nkill.head()","850c4be9":"sns.countplot(kill.gender)\nplt.title(\"gende\",color='blue',fontsize=15)","7164395a":"# Having mental ilness or not for killed people\nsns.countplot(kill.signs_of_mental_illness)\nplt.xlabel('Mental illness')\nplt.ylabel('Number of Mental illness')\nplt.title('Having mental illness or not',color = 'blue', fontsize = 15)","aba2bcef":"# Violin Plot","8005e92c":"## Bar Plot","efe18822":"# Lm Plot","afab8dbb":"# Pie Chart","b1ca52f8":"# BoxPlot","2d1e2e5a":"# Count Plot","7a4d3a8b":"# Point Plot","494ebb92":"# Heatmap","7c400491":"# Swarm Plot","c34f09f7":"g= sns.jointplot(\"area_poverty_ratio\", \"area_hs_ratio\", data=data, size=5, ratio=3, color='r')\nplt.savefig('graph.png')\nplt.show()","63117dc5":"# Kde Plot","2be23f66":"# Pair Plot","a6809060":"# Joint Plot"}}