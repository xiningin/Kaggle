{"cell_type":{"d0fb791f":"code","eef1be69":"code","2eb0d1b9":"code","aa4ac916":"code","334d68f0":"code","c0140ddc":"code","9b733fff":"code","f593ebc0":"code","4bb47867":"markdown","496ee612":"markdown","76db5ff1":"markdown","d56c47c8":"markdown","3c576899":"markdown","01a66c85":"markdown","5b59b82b":"markdown","db4b2a29":"markdown","f54255de":"markdown","41f47ebc":"markdown","1dbb5744":"markdown","41c79304":"markdown"},"source":{"d0fb791f":"import pandas as pd\nfrom learntools.advanced_pandas.grouping_and_sorting import *\n\nreviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\", index_col=0)\npd.set_option(\"display.max_rows\", 5)","eef1be69":"check_q1(pd.DataFrame())","2eb0d1b9":"common_wine_reviewers = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()","aa4ac916":"best_wine = reviews.groupby('price').points.max().sort_index()","334d68f0":"wine_price_extremes = reviews.groupby('variety').price.agg([min, max])","c0140ddc":"reviewer_mean_ratings = reviews.groupby('taster_name').points.mean()\ncheck_q4(reviewer_mean_ratings)","9b733fff":"wine_price_range = reviews.groupby('variety').price.agg([min, max]).sort_values(by=['min', 'max'], ascending=False)\ncheck_q5(wine_price_range)","f593ebc0":"reviews['n'] = 0\ncheck_q6(reviews.groupby(['country', 'variety']).n.count().sort_values(ascending=False))","4bb47867":"# Introduction\nMaps allow us to transform data in a `DataFrame` or `Series` one value at a time for an entire column. However, often we want to group our data, and then do something specific to the group the data is in. We do this with the `groupby` operation.\n\nIn these exercises we'll apply groupwise analysis to our dataset.\n\n# Relevant Resources\n- [**Grouping Reference and Examples**](https:\/\/www.kaggle.com\/residentmario\/grouping-and-sorting-reference).  \n- [Pandas cheat sheet](https:\/\/github.com\/pandas-dev\/pandas\/blob\/master\/doc\/cheatsheet\/Pandas_Cheat_Sheet.pdf)","496ee612":"**Exercise 6**: What combination of countries and varieties are most common? Create a `Series` whose index is a `MultiIndex`of `{country, variety}` pairs. For example, a pinot noir produced in the US should map to `{\"US\", \"Pinot Noir\"}`. Sort the values in the `Series` in descending order based on wine count.\n\nHint: first run `reviews['n'] = 0`. Then `groupby` the dataset and run something on the column `n`. You won't need `reset_index`.","76db5ff1":"# Set Up\nRun the code cell below to load the data before running the exercises.","d56c47c8":"**Exercise 2**: What is the best wine I can buy for a given amount of money? Create a `Series` whose index is wine prices and whose values is the maximum number of points a wine costing that much was given in a review. Sort the valeus by price, ascending (so that `4.0` dollars is at the top and `3300.0` dollars is at the bottom).","3c576899":"The rest of the exercises are visual.\n\n**Exercise 4**: Are there significant differences in the average scores assigned by the various reviewers? Create a `Series` whose index is reviewers and whose values is the average review score given out by that reviewer. Hint: you will need the `taster_name` and `points` columns.","01a66c85":"**Exercise 5**: What are the most expensive wine varieties? Create a `DataFrame` whose index is wine varieties and whose values are columns with the `min` and the `max` price of wines of this variety. Sort in descending order based on `min` first, `max` second.","5b59b82b":"If you get stuck, **use the `answer_qN` function to see the code with the correct answer.**\n\nFor the first set of questions, running the `check_qN` on the correct answer returns `True`.\nFor the second set of questions, using this function to check a correct answer will present an informative graph!","db4b2a29":"**Exercise 3**: What are the minimum and maximum prices for each `variety` of wine? Create a `DataFrame` whose index is the `variety` category from the dataset and whose values are the `min` and `max` values thereof.","f54255de":"# Checking Your Answers\n\n**Check your answers in each exercise using the  `check_qN` function** (replacing `N` with the number of the exercise). For example here's how you would check an incorrect answer to exercise 1:","41f47ebc":"**Exercise 1**: Who are the most common wine reviewers in the dataset? Create a `Series` whose index is the `taster_twitter_handle` category from the dataset, and whose values count how many reviews each person wrote.","1dbb5744":"# Keep Going\n\nMove on to [**Data types and missing data workbook**](https:\/\/www.kaggle.com\/kernels\/fork\/598826).\n\n___\nThis is part of the [*Learn Pandas*](https:\/\/www.kaggle.com\/learn\/pandas) series.","41c79304":"# Exercises"}}