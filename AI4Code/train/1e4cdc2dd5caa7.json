{"cell_type":{"154a4b2d":"code","479d0517":"code","55c6eb40":"code","b7fad153":"code","76b6d8ae":"code","2b7a1f2c":"code","22277b66":"code","5c875405":"code","d8cdc310":"code","bc276d57":"code","d2ed3720":"code","b96e9fda":"code","7ef53a69":"code","514185ee":"code","7773ff3b":"code","5e27f6b8":"code","0033ded4":"code","ef48a4ce":"code","a46f1653":"code","9301dce2":"code","f3b57e82":"code","5ef64c7c":"code","9193e640":"code","4e2f5b35":"code","c3bfc59d":"code","e1e42821":"code","69dc1b8d":"code","db628904":"code","0242b8bd":"code","df8824c3":"code","11cb5de6":"code","f126c846":"code","452382a3":"code","a7455c9a":"code","6ca8dffa":"code","a6d2ca4e":"code","1e976d01":"code","1a8dc969":"code","66961026":"code","b396f842":"code","6bfceeca":"code","954e791c":"code","faed02f5":"code","1ca4d5d9":"code","ada622dc":"code","503da103":"code","81d290c9":"code","54459c16":"code","8ec69da7":"code","42d19240":"code","640f3b53":"code","b6a4005c":"code","d1c2fb40":"code","cbb46db8":"markdown","7033face":"markdown","ab781fa8":"markdown","243cc90a":"markdown","c62d687c":"markdown","41e2a579":"markdown","5c8e7905":"markdown","52a916af":"markdown","83029be1":"markdown","a51fbd48":"markdown","cfe5bf1a":"markdown","62391873":"markdown","062376f7":"markdown","9119d0a9":"markdown","e89f8773":"markdown","c174ecf7":"markdown","b4a7eb9f":"markdown","10898405":"markdown","09216369":"markdown","16d835b3":"markdown","e444054e":"markdown","c7887d80":"markdown","d4879d48":"markdown","72f8f458":"markdown","b586c5eb":"markdown","7b7ada4e":"markdown","6fce6cb1":"markdown"},"source":{"154a4b2d":"import os\nimport random\nfrom typing import Tuple\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nsns.set_style(\"darkgrid\")\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nplt.rcParams[\"figure.figsize\"] = 8, 5\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error, mean_squared_log_error\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import KFold\n\nfrom xgboost import XGBRegressor, XGBRFRegressor\n\nimport eli5\nfrom eli5.sklearn import PermutationImportance\n\nimport warnings\nwarnings.filterwarnings(action='ignore', category=UserWarning)","479d0517":"RANDOM_STATE = 42\nnp.random.seed(RANDOM_STATE)\nrandom.seed(RANDOM_STATE)","55c6eb40":"DATASET_DIR = '\/kaggle\/input\/tabular-playground-series-jul-2021\/'\nTRAIN_CSV = os.path.join(DATASET_DIR, 'train.csv')\nTEST_CSV = os.path.join(DATASET_DIR, 'test.csv')\nSAMPLE_SUBMISSION_CSV = os.path.join(DATASET_DIR, 'sample_submission.csv')","b7fad153":"dataset = pd.read_csv(TRAIN_CSV)\ndataset.head()","76b6d8ae":"dataset.info()","2b7a1f2c":"dataset.head()","22277b66":"dataset.info()","5c875405":"p = sns.displot(dataset, x=\"deg_C\", kind=\"kde\");","d8cdc310":"sns.displot(dataset, x=\"relative_humidity\", kind=\"kde\");","bc276d57":"sns.displot(dataset, x=\"absolute_humidity\", kind=\"kde\");","d2ed3720":"sensors = [\"sensor_1\", \"sensor_2\", \"sensor_3\", \"sensor_4\", \"sensor_5\"]\n\nsns.pairplot(dataset[sensors]);","b96e9fda":"other_feature = [\"deg_C\", \"relative_humidity\", \"absolute_humidity\"]\n\nsns.pairplot(dataset[other_feature]);","7ef53a69":"target_columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\n\nsns.pairplot(dataset[target_columns]);","514185ee":"def get_processed_dataset(dataset: pd.DataFrame) -> pd.DataFrame:\n    dataset_copy = dataset.copy()\n    dataset_copy['date_time'] = pd.to_datetime(dataset_copy['date_time'])\n    dataset_copy['month'] = dataset_copy['date_time'].dt.month\n    dataset_copy['day'] = dataset_copy['date_time'].dt.day\n    dataset_copy['day_of_week'] = dataset_copy['date_time'].dt.dayofweek    \n    \n    # Winter \u2013 December, January and February. \n    # Spring \u2013 March, April and May. \n    # Summer \u2013 June, July and August.\n    # Autumn \u2013 September, October and November.\n    dataset_copy['winter_season'] = dataset_copy['month'].apply(lambda x: 1 if x in [12, 1, 2] else 0)\n    dataset_copy['spring_season'] = dataset_copy['month'].apply(lambda x: 1 if x in [3, 4, 5] else 0)\n    dataset_copy['summer_season'] = dataset_copy['month'].apply(lambda x: 1 if x in [6, 7, 8] else 0)\n    dataset_copy['autumn_season'] = dataset_copy['month'].apply(lambda x: 1 if x in [9, 10, 11] else 0)\n        \n    dataset_copy = dataset_copy.drop('month', axis=1)    \n    \n    return dataset_copy","7773ff3b":"dataset_copy = get_processed_dataset(dataset)\ndataset_copy.head()","5e27f6b8":"dataset_copy.columns","0033ded4":"excluded_feature_columns = ['date_time', 'target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\n\nfeature_columns = [column_name for column_name in dataset_copy.columns if column_name not in excluded_feature_columns]\n\ntarget_columns = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']","ef48a4ce":"shuffled_dataset = dataset_copy.sample(frac=1).reset_index(drop=True)","a46f1653":"X_train, X_test, y_train, y_test = train_test_split(dataset_copy[feature_columns], \n                                                    dataset_copy[target_columns], \n                                                    test_size=0.20, \n                                                    random_state=RANDOM_STATE)\n\nprint(\"Training InputSet Shape: \", X_train.shape)\nprint(\"Training Target Shape: \", y_train.shape)\nprint(\"Testing InputSet Shape: \", X_test.shape)\nprint(\"Testing Target Shape: \", y_test.shape)","9301dce2":"import enum\n\nclass ModelName(enum.Enum):\n    LinearRegression = \"LinearRegression\"\n    Ridge = \"Ridge\"\n    DecisionTreeRegressor = \"DecisionTreeRegressor\"\n    RandomForestRegressor = \"RandomForestRegressor\"\n    XGBRegressor = \"XGBRegressor\"\n    XGBRFRegressor = \"XGBRFRegressor\"","f3b57e82":"def get_trained_model(model,\n                      X_train: pd.DataFrame,\n                      y_true: pd.Series,\n                      target_name: str):\n    model.fit(X_train, y_true)\n    \n    y_pred = model.predict(X_train)\n    \n    mse = mean_squared_error(y_true, y_pred)\n    \n    rmsle = np.sqrt(mean_squared_log_error(y_true, np.clip(y_pred, 0, None)))\n    \n    score = model.score(X_train, y_true)\n    \n    print(\"Model Score: {0} || MSE: {1:.4f} || RMSLE: {2:.4f}\".format(score, mse, rmsle))        \n    return model, rmsle","5ef64c7c":"def validate_trained_model(model,\n                          X_test: pd.DataFrame,\n                          y_true: pd.Series,\n                          target_name: str) -> float:\n    y_pred = model.predict(X_test)\n    \n    mse = mean_squared_error(y_true, y_pred)\n    \n    rmsle = np.sqrt(mean_squared_log_error(y_true, np.clip(y_pred, 0, None)))\n    \n    print(\"Model for {0},  MSE: {1:.4f} || RMSLE: {2:.4f}\".format(target_name, mse, rmsle))\n    return rmsle","9193e640":"def get_model_from_factory(model_name: ModelName):\n    if model_name == ModelName.LinearRegression:\n        return LinearRegression(normalize=True)\n    elif model_name == ModelName.Ridge:\n        return Ridge(normalize=True)\n    elif model_name == ModelName.DecisionTreeRegressor:\n        return DecisionTreeRegressor(random_state=RANDOM_STATE)            \n    elif model_name == ModelName.RandomForestRegressor:\n        MAX_SAMPLES = None\n        MAX_DEPTH = 12\n        return RandomForestRegressor(max_samples=MAX_SAMPLES,\n                                     max_depth=MAX_DEPTH,\n                                     random_state=RANDOM_STATE)\n    elif model_name == ModelName.XGBRegressor:\n        return XGBRegressor(random_state=RANDOM_STATE, eval_metric=\"rmsle\")\n    elif model_name == ModelName.XGBRFRegressor:\n        MAX_SAMPLES = None\n        MAX_DEPTH = 24\n        LEARNING_RATE = 1.0\n        return XGBRFRegressor(learning_rate=LEARNING_RATE,\n                              max_samples=MAX_SAMPLES,\n                              max_depth=MAX_DEPTH,\n                              random_state=RANDOM_STATE,\n                              eval_metric=\"rmsle\")\n    else:\n        raise ValueError(\"Not a valid model name.\")","4e2f5b35":"k_fold = KFold(n_splits=10)\n\ndef k_fold_cross_validation(model_name: ModelName,\n                           X: pd.DataFrame,\n                           y: pd.Series,\n                           target_column_name: str) -> None:    \n    print(\"#\"*20 + f\"\\033[1mTraining for Target - {target_column_name}\\033[0m\" + \"#\"*20)\n    fold_num = 1\n    trained_rmsles = []\n    validation_rmsles = []\n    for train_index, test_index in k_fold.split(X):\n        print(\"-\"*15 + f\"Fold Number: {fold_num}\" + \"-\"*15)\n        # training dataset\n        X_train = X.iloc[train_index]\n        y_train = y.iloc[train_index]\n        \n        # testing dataset\n        X_test = X.iloc[test_index]\n        y_test = y.iloc[test_index]\n        \n        model = get_model_from_factory(model_name)\n        \n        print(\"*\"*10 + f\"Training\" + \"*\"*10)\n        trained_model, train_rmsle = get_trained_model(model, X_train, y_train, target_column_name)        \n        trained_rmsles.append(train_rmsle)\n        print(\"*\"*10 + f\"Validating\" + \"*\"*10)\n        validation_rmsle = validate_trained_model(trained_model, X_test, y_test, target_column_name)\n        validation_rmsles.append(validation_rmsle)        \n        \n        fold_num += 1\n        \n    avg_trained_rmsle = sum(trained_rmsles)\/len(trained_rmsles)\n    avg_validation_rmsle = sum(validation_rmsles)\/len(validation_rmsles)\n    \n    print(\"##\"*20)\n    print(f\"## \\033[1mTraining Average RMSLE: {avg_trained_rmsle:.4f}\\033[0m ##\")\n    print(f\"## \\033[1mValidation Average RMSLE: {avg_validation_rmsle:.4f}\\033[0m ##\")\n    print(\"##\"*20)","c3bfc59d":"k_fold_cross_validation(ModelName.LinearRegression,\n                           shuffled_dataset[feature_columns],\n                           shuffled_dataset[\"target_carbon_monoxide\"],\n                           \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.LinearRegression,\n                           shuffled_dataset[feature_columns],\n                           shuffled_dataset[\"target_benzene\"],\n                           \"target_benzene\")\n\nk_fold_cross_validation(ModelName.LinearRegression,\n                           shuffled_dataset[feature_columns],\n                           shuffled_dataset[\"target_nitrogen_oxides\"],\n                           \"target_nitrogen_oxides\")","e1e42821":"k_fold_cross_validation(ModelName.Ridge,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_carbon_monoxide\"],\n                        \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.Ridge,\n                           shuffled_dataset[feature_columns],\n                           shuffled_dataset[\"target_benzene\"],\n                           \"target_benzene\")\n\nk_fold_cross_validation(ModelName.Ridge,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_nitrogen_oxides\"],\n                        \"target_nitrogen_oxides\")","69dc1b8d":"print(\"*****Starting to train DecisionTreeRegressor models*****\")\n\ndecision_tree_regressors = {}\n\ndecision_tree_regressors['carbon_monoxide_predictor'], _ = get_trained_model(DecisionTreeRegressor(random_state=RANDOM_STATE), \n                                                                          X_train, \n                                                                          y_train['target_carbon_monoxide'],\n                                                                          'carbon_monoxide')\ndecision_tree_regressors['benzene_predictor'], _ = get_trained_model(DecisionTreeRegressor(random_state=RANDOM_STATE), \n                                                                  X_train,\n                                                                  y_train['target_benzene'],\n                                                                  'benzene')\ndecision_tree_regressors['nitrogen_oxides_predictor'], _ = get_trained_model(DecisionTreeRegressor(random_state=RANDOM_STATE),\n                                                                          X_train,\n                                                                          y_train['target_nitrogen_oxides'],\n                                                                          'nitrogen_oxides')","db628904":"print(\"*****Starting to validate DecisionTreeRegressor models.*****\")\n\n_ = validate_trained_model(decision_tree_regressors['carbon_monoxide_predictor'],\n                          X_test,\n                          y_test['target_carbon_monoxide'],\n                          'carbon_monoxide')\n\n_ = validate_trained_model(decision_tree_regressors['benzene_predictor'],\n                          X_test,\n                          y_test['target_benzene'],\n                          'benzene')\n\n_ = validate_trained_model(decision_tree_regressors['nitrogen_oxides_predictor'],\n                          X_test,\n                          y_test['target_nitrogen_oxides'],\n                          'nitrogen_oxides')","0242b8bd":"perm = PermutationImportance(decision_tree_regressors['carbon_monoxide_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_carbon_monoxide'])\neli5.show_weights(perm, feature_names = X_test.columns.tolist())","df8824c3":"perm = PermutationImportance(decision_tree_regressors['benzene_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_benzene'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","11cb5de6":"perm = PermutationImportance(decision_tree_regressors['nitrogen_oxides_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_nitrogen_oxides'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","f126c846":"k_fold_cross_validation(ModelName.DecisionTreeRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_carbon_monoxide\"],\n                        \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.DecisionTreeRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_benzene\"],\n                        \"target_benzene\")\n\nk_fold_cross_validation(ModelName.DecisionTreeRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_nitrogen_oxides\"],\n                        \"target_nitrogen_oxides\")","452382a3":"print(\"*****Starting to train RandomForestRegressor models*****\")\n\nrandom_forest_regressors = {}\nMAX_SAMPLES = None\nMAX_DEPTH = 12\n\nrandom_forest_regressors['carbon_monoxide_predictor'], _ = get_trained_model(RandomForestRegressor(max_samples=MAX_SAMPLES, \n                                                                                                max_depth=MAX_DEPTH,\n                                                                                                random_state=RANDOM_STATE), \n                                                                          X_train, \n                                                                          y_train['target_carbon_monoxide'],\n                                                                          'carbon_monoxide')\nrandom_forest_regressors['benzene_predictor'], _ = get_trained_model(RandomForestRegressor(max_samples=MAX_SAMPLES,\n                                                                                        max_depth=MAX_DEPTH,\n                                                                                        random_state=RANDOM_STATE), \n                                                                  X_train,\n                                                                  y_train['target_benzene'],\n                                                                  'benzene')\nrandom_forest_regressors['nitrogen_oxides_predictor'], _ = get_trained_model(RandomForestRegressor(max_samples=MAX_SAMPLES,\n                                                                                                max_depth=MAX_DEPTH,\n                                                                                                random_state=RANDOM_STATE),\n                                                                          X_train,\n                                                                          y_train['target_nitrogen_oxides'],\n                                                                          'nitrogen_oxides')","a7455c9a":"print(\"*****Starting to validate RandomForestRegressor models.*****\")\n\n_ = validate_trained_model(random_forest_regressors['carbon_monoxide_predictor'],\n                          X_test,\n                          y_test['target_carbon_monoxide'],\n                          'carbon_monoxide')\n\n_ = validate_trained_model(random_forest_regressors['benzene_predictor'],\n                          X_test,\n                          y_test['target_benzene'],\n                          'benzene')\n\n_ = validate_trained_model(random_forest_regressors['nitrogen_oxides_predictor'],\n                          X_test,\n                          y_test['target_nitrogen_oxides'],\n                          'nitrogen_oxides')","6ca8dffa":"perm = PermutationImportance(random_forest_regressors['carbon_monoxide_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_carbon_monoxide'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","a6d2ca4e":"perm = PermutationImportance(random_forest_regressors['benzene_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_benzene'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","1e976d01":"perm = PermutationImportance(random_forest_regressors['nitrogen_oxides_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_nitrogen_oxides'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","1a8dc969":"k_fold_cross_validation(ModelName.RandomForestRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_carbon_monoxide\"],\n                        \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.RandomForestRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_benzene\"],\n                        \"target_benzene\")\n\nk_fold_cross_validation(ModelName.RandomForestRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_nitrogen_oxides\"],\n                        \"target_nitrogen_oxides\")","66961026":"print(\"*****Starting to train XGBRegressor models*****\")\n\nxgb_regressors = {}\n\nxgb_regressors['carbon_monoxide_predictor'], _ = get_trained_model(XGBRegressor(random_state=RANDOM_STATE,\n                                                                               eval_metric=\"rmsle\"), \n                                                                          X_train, \n                                                                          y_train['target_carbon_monoxide'],\n                                                                          'carbon_monoxide')\nxgb_regressors['benzene_predictor'], _ = get_trained_model(XGBRegressor(random_state=RANDOM_STATE,\n                                                                       eval_metric=\"rmsle\"), \n                                                                  X_train,\n                                                                  y_train['target_benzene'],\n                                                                  'benzene')\nxgb_regressors['nitrogen_oxides_predictor'], _ = get_trained_model(XGBRegressor(random_state=RANDOM_STATE,\n                                                                               eval_metric=\"rmsle\"),\n                                                                          X_train,\n                                                                          y_train['target_nitrogen_oxides'],\n                                                                          'nitrogen_oxides')","b396f842":"print(\"*****Starting to validate XGBRegressor models.*****\")\n\n_ = validate_trained_model(xgb_regressors['carbon_monoxide_predictor'],\n                          X_test,\n                          y_test['target_carbon_monoxide'],\n                          'carbon_monoxide')\n\n_ = validate_trained_model(xgb_regressors['benzene_predictor'],\n                          X_test,\n                          y_test['target_benzene'],\n                          'benzene')\n\n_ = validate_trained_model(xgb_regressors['nitrogen_oxides_predictor'],\n                          X_test,\n                          y_test['target_nitrogen_oxides'],\n                          'nitrogen_oxides')","6bfceeca":"perm = PermutationImportance(xgb_regressors['carbon_monoxide_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_carbon_monoxide'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","954e791c":"perm = PermutationImportance(xgb_regressors['benzene_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_benzene'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","faed02f5":"perm = PermutationImportance(xgb_regressors['nitrogen_oxides_predictor'],\n                             random_state=RANDOM_STATE).fit(X_test, y_test['target_nitrogen_oxides'])\neli5.show_weights(perm, feature_names=X_test.columns.tolist())","1ca4d5d9":"k_fold_cross_validation(ModelName.XGBRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_carbon_monoxide\"],\n                        \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.XGBRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_benzene\"],\n                        \"target_benzene\")\n\nk_fold_cross_validation(ModelName.XGBRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_nitrogen_oxides\"],\n                        \"target_nitrogen_oxides\")","ada622dc":"print(\"*****Starting to train XGBRFRegressor models*****\")\n\nxgbrf_regressors = {}\nMAX_SAMPLES = None\nMAX_DEPTH = 24\nLEARNING_RATE = 1.0\n\nxgbrf_regressors['carbon_monoxide_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                          max_samples=MAX_SAMPLES, \n                                                                          max_depth=MAX_DEPTH,\n                                                                          random_state=RANDOM_STATE,\n                                                                          eval_metric=\"rmsle\"), \n                                                                          X_train, \n                                                                          y_train['target_carbon_monoxide'],\n                                                                          'carbon_monoxide')\nxgbrf_regressors['benzene_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                  max_samples=MAX_SAMPLES, \n                                                                  max_depth=MAX_DEPTH,\n                                                                  random_state=RANDOM_STATE,\n                                                                  eval_metric=\"rmsle\"), \n                                                                  X_train,\n                                                                  y_train['target_benzene'],\n                                                                  'benzene')\nxgbrf_regressors['nitrogen_oxides_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                          max_samples=MAX_SAMPLES,                                                                          \n                                                                          max_depth=MAX_DEPTH,\n                                                                          random_state=RANDOM_STATE,\n                                                                          eval_metric=\"rmsle\"),\n                                                                          X_train,\n                                                                          y_train['target_nitrogen_oxides'],\n                                                                          'nitrogen_oxides')","503da103":"print(\"*****Starting to validate XGBRFRegressor models.*****\")\n\nvalidate_trained_model(xgbrf_regressors['carbon_monoxide_predictor'],\n                      X_test,\n                      y_test['target_carbon_monoxide'],\n                      'carbon_monoxide')\n\nvalidate_trained_model(xgbrf_regressors['benzene_predictor'],\n                      X_test,\n                      y_test['target_benzene'],\n                      'benzene')\n\nvalidate_trained_model(xgbrf_regressors['nitrogen_oxides_predictor'],\n                      X_test,\n                      y_test['target_nitrogen_oxides'],\n                      'nitrogen_oxides')","81d290c9":"k_fold_cross_validation(ModelName.XGBRFRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_carbon_monoxide\"],\n                        \"target_carbon_monoxide\")\n\nk_fold_cross_validation(ModelName.XGBRFRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_benzene\"],\n                        \"target_benzene\")\n\nk_fold_cross_validation(ModelName.XGBRFRegressor,\n                        shuffled_dataset[feature_columns],\n                        shuffled_dataset[\"target_nitrogen_oxides\"],\n                        \"target_nitrogen_oxides\")","54459c16":"xgbrf_regressors['carbon_monoxide_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                                    max_samples=MAX_SAMPLES, \n                                                                                    max_depth=MAX_DEPTH,\n                                                                                    random_state=RANDOM_STATE,\n                                                                                    eval_metric=\"rmsle\"), \n                                                                          dataset_copy[feature_columns], \n                                                                          dataset_copy['target_carbon_monoxide'],\n                                                                          'carbon_monoxide')\n\nxgbrf_regressors['benzene_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                            max_samples=MAX_SAMPLES, \n                                                                            max_depth=MAX_DEPTH,\n                                                                            random_state=RANDOM_STATE,\n                                                                            eval_metric=\"rmsle\"), \n                                                                  dataset_copy[feature_columns],\n                                                                  dataset_copy['target_benzene'],\n                                                                  'benzene')\n\nxgbrf_regressors['nitrogen_oxides_predictor'], _ = get_trained_model(XGBRFRegressor(learning_rate=LEARNING_RATE,\n                                                                                    max_samples=MAX_SAMPLES,                                                                          \n                                                                                    max_depth=MAX_DEPTH,\n                                                                                    random_state=RANDOM_STATE,\n                                                                                    eval_metric=\"rmsle\"),\n                                                                      dataset_copy[feature_columns], \n                                                                      dataset_copy['target_nitrogen_oxides'],\n                                                                      'nitrogen_oxides')","8ec69da7":"test_dataset = pd.read_csv(TEST_CSV)\ntest_dataset.head()","42d19240":"test_dataset = get_processed_dataset(test_dataset)\ntest_dataset.head()","640f3b53":"carbon_monoxide_pred = xgbrf_regressors['carbon_monoxide_predictor'].predict(test_dataset[feature_columns])\nbenzene_pred = xgbrf_regressors['benzene_predictor'].predict(test_dataset[feature_columns])\nnitrogen_oxides_pred = xgbrf_regressors['nitrogen_oxides_predictor'].predict(test_dataset[feature_columns])","b6a4005c":"submission_df = pd.DataFrame({\"date_time\": test_dataset['date_time'],\n                             \"target_carbon_monoxide\": carbon_monoxide_pred,\n                             \"target_benzene\": benzene_pred,\n                             \"target_nitrogen_oxides\": nitrogen_oxides_pred})\nsubmission_df.head()","d1c2fb40":"submission_df.to_csv(\"submission.csv\",index=False)","cbb46db8":"#### K-Fold Cross Validation","7033face":"## Data Processing","ab781fa8":"## Preparing Dataset","243cc90a":"#### Permutation Importance","c62d687c":"## Importing Packages","41e2a579":"## XGBRegressor Model Training & Validating","5c8e7905":"### DecisionTreeRegressor Model Training & Validating","52a916af":"## Model Training","83029be1":"#### K-Fold Cross Validation","a51fbd48":"## RandomForestRegressor Model Training & Validating","cfe5bf1a":"#### K-Fold Validation","62391873":"## Train Best Model on Full Dataset\n\n> This is a manul task. After going through the results of different models, I am picking one and re-training the model with full train dataset.","062376f7":"#### Permutation Importance","9119d0a9":"## Exploring Dataset","e89f8773":"## Setting Random seed","c174ecf7":"## Defining File Paths","b4a7eb9f":"> Extracting Day, Month, DayOfWeek feature from `date_time` column","10898405":"**MUST READ**\n\nI Triend to folllow the advices given by the Kaggle grandmaster. A great blog post -\n[Progressively approaching Kaggle](https:\/\/towardsdatascience.com\/progressively-approaching-kaggle-f58db71a42a9?gi=8278e4053c97)","09216369":"#### Permutation Importance","16d835b3":"#### K-Fold Validation","e444054e":"## Resources:\n\n- [Understanding Random Forest\n](https:\/\/towardsdatascience.com\/understanding-random-forest-58381e0602d2)\n- [Using XGBoost in Python\n](https:\/\/www.datacamp.com\/community\/tutorials\/xgboost-in-python)\n- [XGBRegressor](https:\/\/xgboost.readthedocs.io\/en\/latest\/python\/python_api.html#xgboost.XGBRegressor)\n- [Permutation Importance](https:\/\/www.kaggle.com\/dansbecker\/permutation-importance)","c7887d80":"### Ridge Model Training & Validating","d4879d48":"## XGBRFRegressor Model Training & Validating","72f8f458":"#### K-Fold Cross Validation","b586c5eb":"### LinearRegression Model Training & Validating","7b7ada4e":"#### K-Fold Validation","6fce6cb1":"## Preparing Submission File"}}