{"cell_type":{"c14be074":"code","69def635":"code","8d669e39":"code","2dd5f621":"code","d4470572":"code","894fb595":"code","7bacf832":"code","99ee2dd5":"code","f1356721":"code","a7f47415":"code","87ea4060":"code","41e52a92":"code","81b8d015":"code","68093304":"code","05e0d502":"code","591c3a1a":"code","5fb2a8dd":"code","bd0d033f":"code","50169b90":"code","755b46fd":"code","e433e013":"code","b791744f":"code","c8dbdabb":"code","d4cd1dfc":"code","a4d790a8":"code","79e6af69":"code","6d1e153d":"code","70212d25":"code","624821ee":"code","9155feca":"code","c5f401c3":"code","497aef70":"code","cdee31db":"code","834c88c6":"code","ef43e22f":"code","5562ce6b":"code","ed08653d":"code","f959f322":"code","451de4e9":"code","30fd68a7":"code","2be564ae":"code","0b1cda7e":"code","0c2331c8":"code","e604c031":"code","4ca8c757":"code","2c1578ec":"code","60f1297f":"code","38452e56":"code","5a8ff7c2":"code","08404b02":"code","577764f3":"code","7c9415d3":"code","93ae78fb":"code","ed6004e8":"code","0f33aee6":"code","4a02cd18":"code","bd63f188":"markdown","fa8abbc0":"markdown","7c5b983c":"markdown","294b9e99":"markdown","74373030":"markdown","3f1292fc":"markdown","e5918597":"markdown","39dc454f":"markdown","aa1c0c85":"markdown","89e1dd58":"markdown","6cbf9f74":"markdown"},"source":{"c14be074":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","69def635":"dff  = pd.read_csv(\"..\/input\/ecommerce-data\/data.csv\", encoding=\"ISO-8859-1\", dtype={'CustomerID': str,'InvoiceID': str})\ndff","8d669e39":"dff.info()","2dd5f621":"dff.shape","d4470572":"duplicated = dff.duplicated().sum()\nprint(duplicated)\ndff.drop_duplicates(inplace= True)","894fb595":"#transfore the data type\ndff['InvoiceDate']= pd.to_datetime(dff['InvoiceDate'])\n","7bacf832":"dff.describe()","99ee2dd5":"#we have negtive value for quantity and price\ndf = dff[(dff['Quantity']>0) & (dff['UnitPrice']>0)]","f1356721":"df[['Quantity', 'UnitPrice']].describe()","a7f47415":"fig, ax = plt.subplots(figsize=(10,8))\nax.scatter(df['Quantity'], df['UnitPrice'])\nax.set_xlabel('Quantity')\nax.set_ylabel('UnitPrice')\nplt.show()","87ea4060":"from scipy import stats\nimport numpy as np\nz = np.abs(stats.zscore(df[['Quantity','UnitPrice']]))\ndf = df[(z < 3).all(axis=1)]","41e52a92":"df.describe()","81b8d015":"df = df[(df['Quantity']>=0) | (df['UnitPrice']>=0)]","68093304":"sns.boxplot(df['Quantity'])","05e0d502":"sns.boxplot(df['UnitPrice'])","591c3a1a":"dff.shape","5fb2a8dd":"df.isna().sum()","bd0d033f":"df['TotalAmount'] = df['Quantity'] * df['UnitPrice']","50169b90":"df['Hour']=df['InvoiceDate'].dt.hour\ndf['Month']=df['InvoiceDate'].dt.month\ndf['Weekdays']= df['InvoiceDate'].dt.weekday","755b46fd":"df['Hour'].unique()","e433e013":"rfm = df.copy()","b791744f":"rfm","c8dbdabb":"#because we are looking at the customer and not the product we drop InvoiceNo and Stcokcode\nab = df.groupby('CustomerID').agg({'InvoiceDate': 'min','TotalAmount': 'sum'})\nab.rename(columns={'InvoiceDate': \"Recency\",('InvoiceDate', 'nunique'): \"Frequency\",\"TotalAmount\": 'Monetization'},  inplace = True)\nfrequency = df.groupby('CustomerID').agg({'InvoiceDate':'nunique'})\nfrequency.rename(columns={'InvoiceDate': \"Frequency\"}, inplace = True)\n\nrfm = pd.merge(ab,frequency, on='CustomerID')\n\n#rfm.rename(columns={('InvoiceDate',     'min'): \"Recency\",('InvoiceDate', 'nunique'): \"Frequency\",\"TotalAmount\": 'Monetization'})","d4cd1dfc":"a = rfm.reset_index()\n","a4d790a8":"rfm.rename(columns={'InvoiceDate': \"Recency\",'InvoiceDate': \"Frequency\",\"TotalAmount\": 'Monetization'})","79e6af69":"rfm.describe()","6d1e153d":"#We save the most recent date to, then , calulate the recency\ne = df['InvoiceDate'].min()\nprint('minimun :'+ str(e))\n","70212d25":"rfm.info()","624821ee":"###create receny, cad calculate the last time he bought something compare to e\nrfm['Recency'] = rfm['Recency'].apply(lambda x : (x - e).days)","9155feca":"#why do we rank it and how?\nrfm['Rank_Recency'] = pd.qcut( rfm['Recency'],q=5, labels = range(6, 1, -1))\nrfm['Rank_Recency'] = pd.to_numeric(rfm['Rank_Recency'])","c5f401c3":"def freq(x):\n    if x ==1:\n        return 1\n    elif x == 2:\n        return 2\n    elif x == 3:\n        return 3\n    elif x == 4:\n        return 4\n    else: \n        return 5\n\nrfm['Rank_Frequency'] =rfm['Frequency'].apply(freq)\n\n#rfm['Rank_Frequency'] = pd.qcut( rfm['Frequency'],q=5, labels = range(1, 6, 1))\n#rfm['Rank_Frequency'] = pd.to_numeric(rfm['Rank_Frequency'])","497aef70":"rfm['Rank_Monetization'] = pd.qcut( rfm['Monetization'],q=5, labels = range(1, 6, 1))\nrfm['Rank_Monetization'] = pd.to_numeric(rfm['Rank_Monetization'])","cdee31db":"rfm['RFM_Score'] = rfm['Rank_Recency'].astype(str)+ rfm['Rank_Frequency'].astype(str) + rfm['Rank_Monetization'].astype(str)\nrfm['Score'] = rfm['Rank_Recency']+ rfm['Rank_Frequency']+ rfm['Rank_Monetization']","834c88c6":"rfm.describe()","ef43e22f":"rfm.info()","5562ce6b":"def client_segment(x):\n    if x == 15:\n        return 'Champions'\n    elif  x >= 14:\n        return 'Loyal Customers'\n    elif  x >= 11:\n        return 'Can\u2019t Lose Them'\n    elif  x >= 9:\n        return 'Potential Loyalist'\n    elif  x >= 7:\n        return 'Promising'\n    elif  x >= 6:\n        return 'Needs Attention'\n    elif  x >= 5:\n        return 'At Risk'\n    else:\n        return 'Lost'","ed08653d":"rfm['Clients'] = rfm['Score'].apply(client_segment)\n","f959f322":"rfm\n","451de4e9":"clients = rfm[['Clients', 'Frequency', 'Monetization', 'Recency']].groupby('Clients').median()\nclients.reset_index(inplace = True)","30fd68a7":"ax = sns.barplot(x=\"Frequency\", y=\"Clients\", data=clients)\nax.set_ylabel('Clients')\nax.set_title('Median Visits')","2be564ae":"ax = sns.barplot(x=\"Monetization\", y=\"Clients\", data=clients)\nax.set_ylabel('Clients')\nax.set_title('Median Expenditure')","0b1cda7e":"ax = sns.barplot(x=\"Recency\", y=\"Clients\", data=clients)\nax.set_ylabel('Clients')\nax.set_title('Median time from last shop ')","0c2331c8":"rfm['Clients'].unique()","e604c031":"import squarify\n\nsquarity =rfm['Clients'] .value_counts()\ncolor=['grey','orange','pink','purple', 'brown', 'blue', 'green', 'red']\n\n\nfig = plt.gcf()\nax = fig.add_subplot()\nfig.set_size_inches(12, 8)\nsquarify.plot(sizes= squarity , \n              label=['Promising',\n                     'Can\u2019t Lose Them',\n                     'Potential Loyalist',\n                     'Loyal Customer',\n                     'Promising', \n                     'Needs Attention',\n                     'At Risk',\n                     'Champions',\n                     'Lost',] ,color = color, alpha=0.5,)\nplt.title(\"RFM Segments\",fontsize=18,fontweight=\"bold\")\nplt.axis('off')\nplt.show()","4ca8c757":"squarity\n","2c1578ec":"clients","60f1297f":"rfm['Clients'].value_counts()","38452e56":"cluster = rfm.drop(['Rank_Recency','Rank_Frequency','Rank_Monetization','RFM_Score','Score','Clients'], axis = 1)\n","5a8ff7c2":"from sklearn.preprocessing import StandardScaler,  MinMaxScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom sklearn.cluster import AgglomerativeClustering","08404b02":"X= MinMaxScaler().fit_transform(cluster)\n#x = StandardScaler().fit_transform(X)","577764f3":"sum_of_squared_distances = []\nK = range(1,15)\nfor k in K:\n    k_means = KMeans(n_clusters=k)\n    model = k_means.fit(X)\n    sum_of_squared_distances.append(k_means.inertia_)","7c9415d3":"plt.plot(K, sum_of_squared_distances, 'bx-')\nplt.xlabel('k')\nplt.ylabel('sum_of_squared_distances')\nplt.title('Elbow Method')\nplt.show()","93ae78fb":"from sklearn.metrics import silhouette_score\n\nsilhouette_scores = [] \n\nfor n_cluster in range(2, 8):\n    silhouette_scores.append( \n        silhouette_score(X, KMeans(n_clusters = n_cluster).fit_predict(X))) \n    \n# Plotting a bar graph to compare the results \nk = [2, 3, 4, 5, 6,7] \nplt.bar(k, silhouette_scores) \nplt.xlabel('Number of clusters', fontsize = 10) \nplt.ylabel('Silhouette Score', fontsize = 10) \nplt.show() ","ed6004e8":"k_means_5 = KMeans(n_clusters=6)\nmodel = k_means_5.fit(X)\ny_hat_5 = k_means_5.predict(X)\nlabels_5 = k_means_5.labels_\nmetrics.silhouette_score(X, labels_5, metric = 'euclidean')\n#metrics.calinski_harabasz_score(X, labels_5)","0f33aee6":"cluster['Cluster'] = labels_5","4a02cd18":"table = cluster.groupby('Cluster').agg({'Recency': 'mean', 'Frequency':'mean', 'Monetization': 'mean'})\ntable['Number of user'] = cluster['Cluster'].value_counts()\ntable","bd63f188":"Amazon is the biggest retailer in the world without having any store. It only sells products over the internet; we called it **e-commerce**. In the last years, the 'online-store' has been rising because it increases the revenue, 24\/7 income, reduces the cost of store's facility, cashiers, and the massive amount of data it collects.\nWhen a website tracks and records its users' actions (i.e. times spend on the page, research, transaction), companies learn more about their customers and then offer them better products and services. This notebook will see some tools and statistical techniques to analyze customers' data and how companies may benefit from this analysis to improve marketing campaigns, personalizing the customer experience, predicting trends, and forecast demand.\n\nThis is a transnational **data set** that contains all the transactions occurring between 01\/12\/2010 and 09\/12\/2011 for a UK-based and registered non-store online retail. The company mainly sells unique all-occasion gifts. Many customers of the company are wholesalers.\n\nThe dataset is composed of:\n\n- INvoiceNo\n- StockCode\n- Description\n- Quantity\n- InvoiceDate\n- UnitPrice\n- CustomerID\n- Country\n","fa8abbc0":"**Interpretation**\n\nIn our case, from the K-means model, as a result, we segment our clients into six groups. They are distributed from the smallest cluster 4, with 558 people, and the most prominent cluster 5 with  888\n\nIn the summary table, we see the **Cluster 5** tends to gather the most profitable and regular clients with an average amount of $4900. On the contrary, **Cluster 1** does not contribute to the company's market, translated with low expenditure, and rarely comes.","7c5b983c":"\nnow we re going to create the rank with 5class","294b9e99":"CLUSTER","74373030":"# K-means clustering algorithm \n\nK-means is one of the most straightforward clustering analysis to implement. It attempts to divide the dataset into a fixed number k of a group.  The **k** refers to the number of centroids you want in your model. A centroid is a point at the center of each cluster. The algorithm then allocates every data point to the nearest cluster while keeping it as small as possible.\n\nThe appropriate number of clusters is essential for an optimal score. In marketing, a wrong evaluation of it can result in a poor marketing campaign. For example,  If you have five kinds of customers, but you only allow them to be segmented into two groups. Your campaign will not target the right audience, which is translated into a low return on investment (ROI)\n\n# How do you determine the optimal number?\n\nThe **elbow method** is one of the best approaches. It runs the model x times with a different value of k. Then, it computes the sum of square error for each iteration and illustrates the outcome with a line chart, which looks like an arm(see elbow method graph). Finally, the value of k is the elbow on the arm. Sometimes, it might be difficult to assess your k with a small range of possibilities.\n\nAn additional metric is the silhouette score. The range of the score is between -1(bad) to 1(good). It computes *(b-a)\/max(a,b)* where:\n\n* A is the average distance among data points from the same cluster.\n* B is the average distance among the cluster.\n\n\n","3f1292fc":"From the graph above, it is difficult to interpret the relation between Quantity and UnitPrice because of outliers.","e5918597":"# WHAT IS RFM ?\n\n**Recency, Frequency, Monetary** (RFM) is a marketing tool that uses historical transactions to group your clients into meaningful categories.  It uses three factors:\n\n* Recency: How many days ago was their last purchase?\n* Frequency: How many times has the customer purchased from our store?\n* Monetary: How much the customer spent?\n\nInterpreting one of these three variables separately does not tell you too much. For instance, a client who made a significant purchase six months ago cannot be identified as an essential customer. However, with a combination of the RFM, called **RFM score**, it is easier to segment it. \n\nTo conduct you **RFM analysis**, the first step is to rank the three variables with a score of 1 (low) to 5(important). With the variable frequency, score 1 will gather 20% of people who come less, whereas 5 means the customers who shop the most frequently. Once you assess all the rank, you concatenate them. It assigns a three-digit RFM score (from 111 to 555) to each customer.  A 555 indicates that a customer has purchased a product or service very recently, most frequently, and at the highest monetary value.\n\nRFM is a powerful tool during your marketing campaign. It tells you which segmented group is more likely to respond to your current campaign, which client they should pay more attention to. Therefore, companies decrease the churn rate, focus on the potential and profitable customers.\n\n\n\n**TABLE OF CLIENTS:**\n\n![RFM%20Score.PNG](attachment:RFM%20Score.PNG)","39dc454f":"**Unsupervised** is a type of machine learning that concludes from a data set without a target variable. We usually implement this method to find a hidden pattern or understand the structure of the data. It discovers information that may not be visible to the human eye. The most popular method is clustering.\n\n**Clustering** split your data set into several groups. The group are formed of similar data point compared to the other group. We can use this approach for marketing segmentation, medical imaging, and anomaly detection. They are different types of clustering methods, including:\n\n\n* Partitioning methods\n* Hierarchical clustering\n* Fuzzy clustering\n* Density-based clustering\n* Model-based clustering\n\n**Analogy:**\n\nYou had a box of apples of different colors; red, green, and mixed colors. Individually picking each color would not only consume time but is likely to entail manifestations of human error. However, with cluster analysis, we can segment these different apples according to color. With such information, one can harvest information such as how many apples belong to which color, which color is of the best quality, or which color has the least quality.","aa1c0c85":"**Interpretation**\n\nWe have a deeper understanding of our segmentations from the graphs above, from the median expenditure to each group's number. Among the visualization, we observe three horizontal histograms (median frequency, median monetization and median recency for every group of clients) and one squarity.\n\nAs we can see in the Median Expenditure graph, our two best categories of clients are champions (in green) and loyal customer(in purple). As we can see, both clients provide almost 80% of our revenue and only represent 22% of our total clients! This follows the 80\/20 rule, also known as the Pareto Principle, attributed to the Italian economist Vilfredo Pareto. In one of his papers, Pareto noted that about 80% of Italy's land belonged to approximately 20% of its total population.\n\nThis is a presentation of the three different users:\n\n**Champions** gather 300 customer who has a median expenditure of $2446 and comes almost every month. For marketers, they should be the most critical clients because they make your market sustainable. In this case, you must regularly reward with the promotion or provide to them privilege access.\n\n**Potential Loyalist** represents 15% of our customers.  They play an essential role in the growth of the market.  They already show interest in the brand. The next step is to acquire them by building a relationship.\n\n**Customers that need attention** constitutes 10% of our market. They spend and come below the average. We translated this with a potential loss, increased churn. It is vital to reactive interest with discounts and recommendations. Moreover, you may also receive feedback to improve your process.","89e1dd58":"# DO UPVOTE AND COMMENT IF YOU FIND THIS NOTEBOOK HELPFUL\n# PLEASE COMMENT ANY SUGGESTION","6cbf9f74":"The **MinMaxScaler** scales and translates each feature individually such that it is in the given range on the training set (e.g. between zero and one)"}}