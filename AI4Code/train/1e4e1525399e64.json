{"cell_type":{"ee872190":"code","593ad12c":"code","f0622ce9":"code","ba2fc3dc":"code","ce1bbfa0":"code","ba03c909":"code","8cc9db64":"code","be253201":"code","585ccdef":"code","0076c43d":"markdown","7c47f485":"markdown","2e393d99":"markdown","bdf2a4dd":"markdown"},"source":{"ee872190":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read data\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")\n\n# Separate images and labels\nshape = (28, 28, 1)\nimage = lambda data: np.array(data.drop(columns=['label'], errors='ignore')).reshape(-1, *shape)\nlabel = lambda data: data['label']\n\n# Plot representative images\nplt.figure()\nfor i, digit in enumerate(set(train.label)):\n    idx = label(train).eq(digit).idxmax()\n    plt.subplot(2, 5, i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(image(train)[idx])\n    plt.xlabel(digit)","593ad12c":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models, regularizers\n\n# Hyperparameters\nepochs = 50\ndrop = 0.1\n\n# Create a new model\ndef CNN():\n    reg = regularizers.l2(1e-3)\n\n    # Convolutional layers\n    model = models.Sequential()\n    model.add(layers.Conv2D(64, (5, 5), activation='relu', kernel_regularizer=reg, bias_regularizer=reg, input_shape=shape))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Dropout(drop))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=reg, bias_regularizer=reg))\n    model.add(layers.MaxPooling2D((2, 2)))\n    model.add(layers.Dropout(drop))\n    model.add(layers.Conv2D(64, (3, 3), activation='relu', kernel_regularizer=reg, bias_regularizer=reg))\n\n    # Dense layers\n    model.add(layers.Flatten())\n    model.add(layers.Dropout(drop))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(10))\n\n    model.compile(optimizer='adam',\n                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n                  metrics=['accuracy'])\n    return model\n\nCNN().summary()","f0622ce9":"case1 = CNN()\nhistory = case1.fit(image(train), label(train), epochs=epochs)","ba2fc3dc":"# Submit predictions on the testing set\nsubmission.Label = np.argmax(case1.predict(image(test)), axis=1)\nsubmission.to_csv('submission.csv', index=False)\n\n# Visually confirm the results\nplt.figure()\nfor i in range(10):\n    plt.subplot(2, 5, i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(image(test)[i])\n    plt.xlabel(submission.Label[i])","ce1bbfa0":"# Image count by class (before)\ncounts = lambda data: data.groupby('label').size().to_frame().T\ncounts(train)","ba03c909":"# Image count after split\ntrain_halfImages = train.groupby('label').apply(lambda x: x.iloc[:x.label.size\/\/2]).reset_index(drop=True)\ntest_halfImages = train.groupby('label').apply(lambda x: x.iloc[x.label.size\/\/2:]).reset_index(level=0, drop=True)\npd.concat([counts(train_halfImages), counts(test_halfImages)])","8cc9db64":"case2 = CNN()\nhistory = case2.fit(image(train_halfImages), label(train_halfImages), epochs=epochs,\n                   validation_data = (image(test_halfImages), label(test_halfImages)))","be253201":"train_halfDigits = pd.concat(data for digit, data in train.groupby('label') if digit <= 4)\ntest_halfDigits = pd.concat(data for digit, data in train.groupby('label') if digit >= 5)\npd.concat([counts(train_halfDigits), counts(test_halfDigits)]).fillna(0).astype(int)","585ccdef":"case3 = CNN()\nhistory = case3.fit(image(train_halfDigits), label(train_halfDigits), epochs=epochs,\n                   validation_data = (image(test_halfDigits), label(test_halfDigits)))","0076c43d":"## Case 3:\nTraining using only half the training set such that only keep images for digits 0,1,2,3, and 4.\nName this `train_halfDigits`.\nTest on the other half of the images.\nName that `test_halfDigits`.","7c47f485":"## Sources:\n* TensorFlow Tutorials:\n * [CNN](https:\/\/www.tensorflow.org\/tutorials\/images\/cnn)\n * [Regularizers](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/regularizers\/Regularizer)\n * [Dropout](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/Dropout)","2e393d99":"## Case 1:\nUsing the full training set `train` and testing on `test`.","bdf2a4dd":"## Case 2:\nTraining using only half the training set such that for each label, remove half of the training images.\nName this `train_halfImages`.\nTest on the other half of the images.\nName that `test_halfImages`."}}