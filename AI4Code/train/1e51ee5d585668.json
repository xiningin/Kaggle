{"cell_type":{"bda2c9d9":"code","9076a41c":"code","dce1bb8a":"code","0d16170c":"code","33b20015":"code","6f136c55":"code","0b5c868c":"code","5ae48acb":"markdown","2224d8e6":"markdown","9406d37f":"markdown","1dd54a73":"markdown"},"source":{"bda2c9d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom matplotlib import pyplot as plt\nfrom wordcloud import WordCloud\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.preprocessing import LabelEncoder\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9076a41c":"data = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","dce1bb8a":"print(\"Colums: \", data.columns.values)\nprint(\"Shape: \", data.shape)","0d16170c":"print(\"Missing values:\")\nprint(data.isnull().sum())","33b20015":"from sklearn.preprocessing import StandardScaler\n\nX = data.drop(['Id', 'Species'], axis=1)\ny = data['Species']\nsc = StandardScaler()\nx_train = sc.fit_transform(X)","6f136c55":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)","0b5c868c":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(criterion='entropy',\n                             n_estimators=700,\n                             min_samples_split=5,\n                             min_samples_leaf=1,\n                             max_features = \"auto\",\n                             oob_score=True,\n                             random_state=0,\n                             n_jobs=-1)\n\nclf.fit(X_train, y_train)\nprint(\"RF Accuracy: \" + repr(round(clf.score(X_test, y_test) * 100, 2)) + \"%\")","5ae48acb":"**Cool, there are no missing values =)**","2224d8e6":"# Creating model","9406d37f":"# Analyze data\n\n**Let's describe data**\n\n* look at columns\n* check shape\n* check null columns","1dd54a73":"# Load data"}}