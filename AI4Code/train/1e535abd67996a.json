{"cell_type":{"1a21bcbb":"code","554c6fb7":"code","76e0edc2":"code","88a19b37":"code","96d73a58":"code","6d2ae398":"code","952edf28":"code","2241f231":"code","822137d4":"code","417875a0":"code","08ea8f77":"code","9de223ca":"code","81071a5a":"code","2e78a01d":"code","37943536":"code","a1ee2dea":"code","5b545566":"code","dc0783ef":"code","4a820aaf":"code","d30615c3":"code","06be696a":"code","0aac6927":"code","b729081c":"code","016842ae":"code","c8178ada":"code","435b64ce":"code","0dc10319":"code","acc54030":"code","cdad4b87":"code","ae3c6af3":"markdown","401b0aab":"markdown","b1b9fbc3":"markdown","ebf61b58":"markdown","522ea7cc":"markdown","52102aa7":"markdown","e52460e7":"markdown","33dd2fd8":"markdown","e1390b20":"markdown","ba2258a8":"markdown","6c2f8b53":"markdown","b1a669b2":"markdown","49ca2856":"markdown","37016985":"markdown","51e94154":"markdown","9d1831da":"markdown","e3e0dced":"markdown","f928e171":"markdown"},"source":{"1a21bcbb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\n\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os, logging\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nlogging.getLogger(\"tensorflow\").setLevel(logging.CRITICAL)\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","554c6fb7":"data = pd.read_csv(\"..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv\")\nprint(data.shape)\ndata.head()","76e0edc2":"data = data.drop(\"img_name\", axis=1)","88a19b37":"data.isnull().sum()","96d73a58":"columns = [\"age\",\"gender\",\"ethnicity\"]\ny = data.drop(\"pixels\", axis = 1)\nx = data.drop(columns, axis = 1)","6d2ae398":"x.head()","952edf28":"y.head()","2241f231":"y.nunique()","822137d4":"for i in y.columns :\n    plt.figure(figsize=(15,7))\n    g = sns.countplot(y[i], palette=\"icefire\")\n    plt.title(\"Number of {}\".format(i))\n    ","417875a0":"y[\"age\"] = pd.cut(y[\"age\"],bins=[0,3,18,45,64,116],labels=[\"0\",\"1\",\"2\",\"3\",\"4\"])\nplt.figure(figsize=(15,7))\ng = sns.countplot(y[\"age\"], palette=\"icefire\")\nplt.title(\"Number of age\")","08ea8f77":"num_pixels = len(x['pixels'][0].split(\" \"))\nimg_height = int(np.sqrt(len(x['pixels'][0].split(\" \"))))\nimg_width = int(np.sqrt(len(x['pixels'][0].split(\" \"))))\nprint(num_pixels, img_height, img_width)","9de223ca":"x = pd.Series(x[\"pixels\"])\nx = x.apply(lambda x: x.split(' '))\nx = x.apply(lambda x: np.array(list(map(lambda z: np.int(z), x))))\nx = np.array(x)\nx = np.stack(np.array(x), axis=0)\nx = np.reshape(x, (-1, 48, 48))\n\n# reshape data\nx = x.reshape(-1,48,48,1)\nprint(\"x shape: \",x.shape)","81071a5a":"plt.figure(figsize=(16,16))\nfor i,a in zip(np.random.randint(0, 23705, 25),range(1,26)):\n    plt.subplot(5,5,a)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(x[i])\n    plt.xlabel(\n        \"Age:\"+str(y['age'].iloc[i])+\n        \"  Ethnicity:\"+str(y['ethnicity'].iloc[i])+\n        \"  Gender:\"+ str(y['gender'].iloc[i])\n    )\nplt.show()","2e78a01d":"from sklearn.metrics import confusion_matrix\nimport itertools\nimport tensorflow as tf\nimport plotly.express as px\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.utils import to_categorical # convert to one-hot-encoding\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, InputLayer\nfrom tensorflow.keras.optimizers import RMSprop,Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\nfrom tensorflow.keras.losses import BinaryCrossentropy, SparseCategoricalCrossentropy","37943536":"age_matrix = np.array(y[\"age\"]) \ngender_matrix = np.array(y[\"gender\"])\nethnicity_matrix = np.array(y[\"ethnicity\"])\nage = to_categorical(age_matrix, num_classes = 5)\ngender = to_categorical(y[\"gender\"], num_classes = 2)\nethnicity = to_categorical(ethnicity_matrix, num_classes = 5)\nprint(age, gender, ethnicity)","a1ee2dea":"# Normalize the data\nx = x \/ 255.0\nx = x \/ 255.0","5b545566":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.1, # Randomly zoom image 10%\n        width_shift_range=0.1,  # randomly shift images horizontally 10%\n        height_shift_range=0.1,  # randomly shift images vertically 10%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(x)","dc0783ef":"from sklearn.model_selection import train_test_split\nX_train_ethnicity, X_test_ethnicity, y_train_ethnicity, y_test_ethnicity = train_test_split(x, ethnicity, test_size= 0.3)\nX_train_gender, X_test_gender, y_train_gender, y_test_gender = train_test_split(x, gender, test_size= 0.3)\nX_train_age, X_test_age, y_train_age, y_test_age = train_test_split(x, age, test_size= 0.3)","4a820aaf":"def my_model(num_classes, activation, loss):\n    model = Sequential() \n    model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', padding = \"same\", input_shape=(48,48,1)))\n    model.add(BatchNormalization())\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding = \"same\"))\n    model.add(BatchNormalization())\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, kernel_size=(3, 3), activation='relu', padding = \"same\"))\n    model.add(MaxPool2D(pool_size=(2, 2)))\n    model.add(Flatten())\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes, activation= activation))\n    model.compile(optimizer='Adam',\n              loss= loss,\n              metrics=['accuracy'])\n    return model","d30615c3":"early_stopping = EarlyStopping(patience=10, min_delta=0.001,restore_best_weights=True)\n\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=3, verbose=1, \n                                            factor=0.5, min_lr=0.00001)","06be696a":"epochs = 200  # for better result increase the epochs\nbatch_size = 64\nmodel_ethnicity = my_model(5,\"softmax\",'categorical_crossentropy')\nhistory_ethnicity = model_ethnicity.fit(X_train_ethnicity, y_train_ethnicity, batch_size=batch_size,\n                              epochs = epochs, validation_data = (X_test_ethnicity,y_test_ethnicity), steps_per_epoch= X_train_ethnicity.shape[0] \/\/ batch_size, callbacks= [early_stopping, learning_rate_reduction])","0aac6927":"fig = px.line(\n    history_ethnicity.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","b729081c":"loss, acc = model_ethnicity.evaluate(X_test_ethnicity, y_test_ethnicity, verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","016842ae":"model_age = my_model(5,\"softmax\",'categorical_crossentropy')\nhistory_age = model_age.fit(X_train_age, y_train_age, batch_size=batch_size,\n                              epochs = epochs, validation_data = (X_test_age,y_test_age), steps_per_epoch= X_train_age.shape[0] \/\/ batch_size, callbacks= [early_stopping, learning_rate_reduction])","c8178ada":"fig = px.line(\n    history_age.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","435b64ce":"loss, acc = model_age.evaluate(X_test_age, y_test_age, verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","0dc10319":"model_gender = my_model(2, \"sigmoid\", \"binary_crossentropy\")\nhistory_gender = model_gender.fit(X_train_gender, y_train_gender, batch_size=batch_size,\n                              epochs = epochs, validation_data = (X_test_gender,y_test_gender), steps_per_epoch= X_train_gender.shape[0] \/\/ batch_size, callbacks= [early_stopping, learning_rate_reduction])","acc54030":"fig = px.line(\n    history_gender.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}, \n    title='Training History')\nfig.show()","cdad4b87":"loss, acc = model_gender.evaluate(X_test_gender, y_test_gender, verbose=0)\nprint('Test loss: {}'.format(loss))\nprint('Test Accuracy: {}'.format(acc))","ae3c6af3":" If you like my notebok, please don't forget to upvote. I would be happy to see your thoughts and suggestions about my notebook in the comments section. I hope everything goes the way you want. Have a nice work!!","401b0aab":"<a id=\"11\"><\/a><br>\n## Train Test Split","b1b9fbc3":"<a id=\"9\"><\/a><br>\n## Normalize Data","ebf61b58":"<a id=\"2\"><\/a><br>\n## Data Overview","522ea7cc":"<a id=\"7\"><\/a><br>\n## Importing DL Libraries","52102aa7":"<a id=\"13\"><\/a><br>\n## Callbacks","e52460e7":"<a id=\"15\"><\/a><br>\n## Age Prediction","33dd2fd8":"# Face Prediction with CNN(Keras)\n\nContent:\n* [Importing Analysis Libraries](#1)\n* [Data Overview](#2)\n* [Data Distribution](#3)\n* [Image Shape](#4)\n* [Reshape Data](#5)\n* [Images Overview](#6)\n* [Importing DL Libraries](#7)\n* [Categorizing Target Values](#8)\n* [Normalize Data](#9)\n* [Image Data Generate](#10)\n* [Train Test Split](#11)\n* [Build Model](#12)\n* [Callbacks](#13)\n* [Ethnicity Prediction](#14)\n* [Age Prediction](#15)\n* [Gender Prediction](#16)","e1390b20":"<a id=\"14\"><\/a><br>\n## Ethnicity Prediction","ba2258a8":"<a id=\"16\"><\/a><br>\n## Gender Prediction","6c2f8b53":"<a id=\"3\"><\/a><br>\n## Data Distribution","b1a669b2":"<a id=\"10\"><\/a><br>\n## Image Data Generate","49ca2856":"<a id=\"5\"><\/a><br>\n## Reshape Data","37016985":"<a id=\"8\"><\/a><br>\n## Categorizing Target Values","51e94154":"<a id=\"1\"><\/a><br>\n## Importing Analysis Libraries ","9d1831da":"<a id=\"4\"><\/a><br>\n## Image Shape","e3e0dced":"<a id=\"12\"><\/a><br>\n## Build Model","f928e171":"<a id=\"6\"><\/a><br>\n## Images Overview"}}