{"cell_type":{"5356eda6":"code","65621733":"code","44638707":"code","55aaab7d":"code","a615335d":"code","9d188d15":"code","d471b3a6":"code","311c783d":"code","b7abd787":"code","af56d573":"code","7118daca":"code","47dfd85e":"code","9d1ba93c":"code","64b76914":"code","4c5f1b75":"code","6fd053e5":"code","010590a8":"code","afba925b":"code","b8e3d601":"code","7b346051":"code","449de394":"code","584230e7":"code","8c2ba821":"code","192ef80d":"code","b1cb1d54":"code","277c5eea":"code","12425eb8":"code","86b763c2":"code","b4ef6767":"code","865e0064":"code","147ba98b":"code","322a4756":"code","0a5a5c80":"code","005158f0":"code","8c1332e6":"code","462aad64":"code","bb9814d3":"code","fdd0b8c0":"code","c193570b":"markdown","a10679ee":"markdown","e66a10f7":"markdown","64dc70f4":"markdown","380eda84":"markdown","b5f76c3e":"markdown","6b00e00d":"markdown","ce74968a":"markdown","6772eec2":"markdown","2896900a":"markdown","42ea2318":"markdown","5ab1fb92":"markdown","647b9a64":"markdown","33091734":"markdown","271d712d":"markdown"},"source":{"5356eda6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nfrom glob import glob\nimport cv2\n\nfrom keras.models import Sequential \nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65621733":"train_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\ntest_dir =  '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\nval_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'","44638707":"\ndef picture_separation(folder):\n    y = []\n    x = []\n    image_list = []\n\n    for foldername in os.listdir(folder):\n        if not foldername.startswith('.'):\n            if foldername == \"NORMAL\":\n                label = 0\n            elif foldername == \"PNEUMONIA\":\n                label = 1\n            elif foldername == \"PNEUMONIA COVID\":\n                label = 2\n                \n            for image_filename in os.listdir(folder + \"\/\"+ foldername):\n                img_file = cv2.imread(folder + \"\/\" + foldername + '\/' + image_filename,0)               \n                \n\n                if img_file is not None:\n                    img = cv2.resize(img_file,(64,64))\n                    img_arr = img_to_array(img) \/ 255\n                    x.append(img_arr)\n                    y.append(label)\n                    image_list.append(foldername + '\/' + image_filename)\n                                        \n    X = np.asarray(x)\n    y = np.asarray(y)\n    \n    \n\n    return X,y,image_list\n\n          \n        ","55aaab7d":"X_train, y_train, img_train = picture_separation(train_dir)\n\ntrain_df = pd.DataFrame(img_train, columns=[\"images\"])\ntrain_df[\"target\"] = y_train\n","a615335d":"train_df.head()","9d188d15":"train_df.info()","d471b3a6":"sns.countplot(train_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\/PNOMONIA COVID\")\nplt.show()\nprint(train_df[\"target\"].value_counts())","311c783d":"X_val, y_val, img_val = picture_separation(val_dir)\n\nval_df = pd.DataFrame(img_val, columns=[\"images\"])\nval_df[\"target\"] = y_val","b7abd787":"val_df.head()","af56d573":"sns.countplot(val_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\/PNOMONIA COVID\")\nplt.show()\nprint(val_df[\"target\"].value_counts())","7118daca":"X_test, y_test, img_test = picture_separation(test_dir)\n\ntest_df = pd.DataFrame(img_test, columns=[\"images\"])\ntest_df[\"target\"] = y_test","47dfd85e":"test_df.tail()","9d1ba93c":"sns.countplot(test_df[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\/PNOMONIA COVID\")\nplt.show()\nprint(test_df[\"target\"].value_counts())","64b76914":" full_data = pd.concat([train_df, test_df, val_df], axis=0, ignore_index=True)","4c5f1b75":"print(full_data.head())\nprint(full_data.tail())","6fd053e5":"plt.figure(figsize=(12,8))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.grid(color='#CCCCCC', linestyle='--')\nplt.show()","010590a8":"plt.figure(figsize=(10,7))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"green\", size = 14)\nplt.grid(color='#CCCCCC', linestyle='--')\nplt.show()","afba925b":"plt.figure(figsize=(10,7))\n\nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][2081])\nplt.imshow(img)\nplt.title(\"PNEUMONIA COVID\", color = \"green\", size = 14)\nplt.grid(color='#CCCCCC', linestyle='--')\nplt.show()","b8e3d601":"sns.countplot(full_data[\"target\"])\nplt.title(\"NORMAL\/PNOMON\u0130A\/PNOMONIA COVID\")\nplt.show()\nprint(full_data[\"target\"].value_counts())\n","7b346051":"plt.figure(figsize=(15,8))\n\nplt.subplot(2,3,1) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][0])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\n\nplt.subplot(2,3,2) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][1])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,3) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][10])\nplt.imshow(img)\nplt.title(\"PNEUMONIA\", color = \"blue\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,4) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3875])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,5) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3876])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.subplot(2,3,6) \nimg = load_img(train_dir + \"\/\" + full_data[\"images\"][3877])\nplt.imshow(img)\nplt.title(\"NORMAL\", color = \"green\", size = 14)\nplt.axis(\"off\")\n\nplt.suptitle(\"NORMAL or PNEUMONIA\", size = 16, color = \"darkred\")\nplt.show()","449de394":"# the shape\nX_train.shape","584230e7":"className = glob(train_dir + '\/*' )\nnumberOfClass = len(className)\nprint(\"NumberOfClass: \",numberOfClass)","8c2ba821":"batch_size = 32","192ef80d":"train_datagen = ImageDataGenerator(rescale= 1.\/255,\n                   shear_range = 0.3,\n                   horizontal_flip=True,\n                   zoom_range = 0.3)","b1cb1d54":"test_datagen = ImageDataGenerator(rescale= 1.\/255)","277c5eea":"val_datagen = ImageDataGenerator(rescale= 1.\/255)","12425eb8":"train_generator = train_datagen.flow_from_directory(\n        train_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")\n\n","86b763c2":"test_generator = test_datagen.flow_from_directory(\n        test_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","b4ef6767":"val_generator = test_datagen.flow_from_directory(\n        val_dir, \n        target_size=(64, 64),\n        batch_size = batch_size,\n        color_mode = \"grayscale\",\n        class_mode= \"binary\")","865e0064":"X_train.shape[1:]","147ba98b":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),input_shape = X_train.shape[1:]))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D())\n\nmodel.add(Flatten())\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1)) # output\nmodel.add(Activation(\"sigmoid\"))\n\nmodel.compile(loss = \"binary_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])\n","322a4756":"from tensorflow.keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping(monitor='val_loss', mode='min', verbose=1,patience=2)","0a5a5c80":"history = model.fit_generator(\n                    train_generator,\n                    steps_per_epoch=5216\/\/32,\n                    epochs=20,\n                    validation_data=test_generator,\n                    validation_steps=624\/\/32,\n                    callbacks=[early_stopping])","005158f0":"print(\"Accuracy of the model\n      is - \" , model.evaluate_generator(test_generator)[1]*100 , \"%\")\nprint(\"Loss of the model is - \" , model.evaluate_generator(test_generator)[0])","8c1332e6":"#predictions = model.predict_generator(test_generator)","462aad64":"history.history.keys()","bb9814d3":"plt.figure()\nplt.plot(history.history[\"loss\"],label = \"Train Loss\")\nplt.plot(history.history[\"val_loss\"],label = \"Validation Loss\")\nplt.legend()\nplt.show()","fdd0b8c0":"plt.figure()\nplt.plot(history.history[\"accuracy\"],label = \"Train Accuracy\")\nplt.plot(history.history[\"val_accuracy\"],label = \"Validation Accuracy\")\nplt.legend()\nplt.show()","c193570b":"![normalPneumoia.PNG](attachment:3ab8e6a0-ad09-4106-8edf-cc6fc2f389f9.PNG)","a10679ee":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the test path we specified to the function.<\/p> <\/li>\n<\/ul>","e66a10f7":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >When our model reaches the desired level, we use early stopping to stop it.<\/p> <\/li>\n<\/ul>","64dc70f4":"<a id ='4' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Data Augmentation<\/h2>","380eda84":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe train our model that we created.<\/p> <\/li>\n<\/ul>","b5f76c3e":"<a id ='3' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Pneumonia, Pneumonia covid, Normal Pictures<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We examine our normal and pneumonia and pneumonia covid pictures.<\/p> <\/li>\n<\/ul>","6b00e00d":"<a id ='6' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Visualization<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe examine the accuracy and loss value of the model we created.<\/p> <\/li>\n<\/ul>","ce74968a":"<a id ='2' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Reading pictures and Train - Test Split<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >\nWe divide the mixed pictures into NORMAL and PNEUMONIA and PNEUMONIA COVID. We add labels to these. Finally, we define a list of pictures.\n\n<\/p> <\/li>\n<\/ul>","6772eec2":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the train path we specified to the function.<\/p> <\/li>\n<\/ul>","2896900a":"<a id ='1' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">File paths<\/h2>\n\n<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We determine the file paths.<\/p> <\/li>\n<\/ul>","42ea2318":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >we created We send the val path we specified to the function.<\/p> <\/li>\n<\/ul>","5ab1fb92":"<center><h1 style = \"background:lightgreen;border:0\">Introduction<\/h1><\/center>\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">The dataset is organized into 3 folders (train, test, val) and contains subfolders for each image category (Pneumonia\/Pneumonia covid\/Normal). There are 5,863 X-Ray images (JPEG) and 3 categories (Pneumonia\/Pneumonia covid\/Normal).<\/p>\n\n<p style = \"color:black;font-weight:500;text-indent:20px;font-size:16px\">Chest X-ray images (anterior-posterior) were selected from retrospective cohorts of pediatric patients of one to five years old from Guangzhou Women and Children\u2019s Medical Center, Guangzhou. All chest X-ray imaging was performed as part of patients\u2019 routine clinical care. We will try to create your CNN model using the images here. <\/p>\n    \n\n<h2 style = \"background:lightgreen;border:0\">Content :<\/h2>\n\n<ul>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#1\" style = \"color:black;font-weight:bold\"> File paths <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#2\" style = \"color:black;font-weight:bold\"> Reading pictures and Train - Test Split <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#3\" style = \"color:black;font-weight:bold\"> Pneumonia, Normal Pictures <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#4\" style = \"color:black;font-weight:bold\"> Data Augmentation <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#5\" style = \"color:black;font-weight:bold\"> Model Building (CNN) <\/a> <\/li>\n    <li style = \"color:green;font-size:15px\"> <a href = \"#6\" style = \"color:black;font-weight:bold\"> Visualization <\/a> <\/li>\n    \n  \n    \n<\/ul>\n    \n","647b9a64":"<h2 style = \"background:lightgreen;border:0\">Import Libraries<\/h2>","33091734":"<ul>\n    <li style = \"color:green\" > <p style = \"color:black\" >We see how many targets there are.<\/p> <\/li>\n<\/ul>","271d712d":"<a id ='5' ><\/a>\n<h2 style = \"background:lightgreen;border:0\">Model Building (CNN)<\/h2>"}}