{"cell_type":{"cb578802":"code","95066171":"code","202efdd6":"code","2c0f8d9f":"code","b2f8f82c":"code","e1d84b98":"code","e017d97c":"code","c799e458":"code","3c2fb7a3":"code","4d798eda":"code","f4f17995":"code","e599cae9":"code","ae9db97f":"code","c8b0a17c":"code","ab0b17a8":"code","4476a5c1":"code","3ced3d46":"code","ccc2fe18":"code","db4d5a6b":"code","0983f6f0":"code","147973d6":"code","8b4073e4":"code","d16c71a3":"code","a7253dae":"code","65cff1ab":"code","7489e48c":"code","f714ccdb":"code","7a5ddc02":"code","aded56ed":"code","df9e7c7b":"code","b77ba4ca":"code","37fe371e":"code","5458feca":"code","6fba49c8":"code","b4813167":"code","24279e7d":"code","c9843fbf":"code","1a1e9837":"code","0113f1bb":"code","60707968":"code","a7070ac8":"code","e1ddd3ef":"code","ce80b9bc":"code","2bf1676f":"code","e5427fae":"code","a3261433":"code","2a411e74":"code","9b50c567":"code","a59b1dbb":"code","8a26ca47":"code","694d80e0":"code","24ee9bea":"code","5b94f918":"code","4f397320":"code","f8ace602":"code","f4378787":"code","c8a1729e":"code","ae275d4a":"code","96dd0e1c":"code","810bda62":"code","181671e3":"code","9f37795a":"code","84a3f0b4":"code","b12e130c":"code","399b3102":"code","0341d5a4":"code","b76d096b":"code","f742fcc7":"code","cecdfc2d":"code","4d9e4886":"code","753a78e4":"code","f97b026a":"code","9d93d274":"code","adf0989f":"code","e9a7104a":"code","0c144b8e":"code","1c374937":"code","d27de943":"code","1a99b55d":"code","b4babc4a":"code","be4a5f00":"code","1572ed2e":"code","79ec3b70":"code","4d366fbe":"code","f3c1b22f":"code","f4443faa":"code","6bf28341":"code","70004133":"code","8c4de211":"code","591e3c8c":"code","5b653583":"code","41e8b4e3":"code","78864091":"code","786d31f9":"markdown","d67e41e0":"markdown","d4ee5095":"markdown","98abc170":"markdown","4826f917":"markdown","a26fe0a5":"markdown","e12bf1af":"markdown","5d19c71e":"markdown","af940a80":"markdown","7dc8f736":"markdown","473c2940":"markdown","9ee0755a":"markdown","9add0941":"markdown","6b549e25":"markdown","674ea633":"markdown","b1804673":"markdown","e6456d35":"markdown","ff5c8ff0":"markdown","4fc75bb2":"markdown","b3b8b952":"markdown","866d5d88":"markdown","5b3a379d":"markdown","e2972091":"markdown","7136b3a3":"markdown","fa5ffe24":"markdown","199513d0":"markdown","70a53d76":"markdown","f5bb311b":"markdown","200417c8":"markdown","6ea50bba":"markdown","7cd4fa7f":"markdown","4047787e":"markdown","e7f960d8":"markdown","84cf7879":"markdown","819f4051":"markdown","99b88904":"markdown","759d3d58":"markdown","ddae4cce":"markdown","fc70c351":"markdown","c96185f8":"markdown","2caac7fd":"markdown","0d29c38f":"markdown","466e8350":"markdown","003e4350":"markdown","16960b9d":"markdown","eedf9331":"markdown","919940d0":"markdown","562bbe81":"markdown"},"source":{"cb578802":"# importing the relevant libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler","95066171":"# importing the kaggle dataset\ndf = pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv', header = 1)","202efdd6":"df.head()","2c0f8d9f":"print('The Kaggle 2021 survey dataset has {} rows and {} columns. Each row consists of information from a single Kaggle user.'.format(df.shape[0], df.shape[1]))","b2f8f82c":"# isolate the required columns into a separate dataset\nlangpopRaw = df.iloc[:, 7:20]\n\n# get the name of the language from the question \nlanguageList = [x.split(' ')[-1] for x in list(langpopRaw.columns)]\nlangpopRaw.columns = languageList","e1d84b98":"# sum up the number of language users\nlangpop = langpopRaw.notnull().sum().sort_values(ascending = False).reset_index()\nlangpop.columns = ['Language', 'No. of users']","e017d97c":"langpop.head(6)","c799e458":"# finally, plot out the popularity of each language on a bar chart\nplt.figure(figsize = (15,10))\npopbar = plt.bar(langpop['Language'], langpop['No. of users'], color = 'olive', edgecolor = 'black')\nplt.xlabel('Language', fontsize = 15)\nplt.ylabel('No. of users', fontsize = 15)\nplt.bar_label(popbar)\nplt.title('Figure 1: Most used programming languages among Kagglers', fontsize = 20)\nplt.show()","3c2fb7a3":"# we get subsets of the main dataset in order to gather this data\npythondf = df.dropna(subset = [df.columns[7]])\nrdf = df.dropna(subset = [df.columns[8]])\nsqldf = df.dropna(subset = [df.columns[9]])\ncdf = df.dropna(subset = [df.columns[10]])\ncplusdf = df.dropna(subset = [df.columns[11]])\njavadf = df.dropna(subset = [df.columns[12]])\njsdf = df.dropna(subset = [df.columns[13]])\njuliadf = df.dropna(subset = [df.columns[14]])\nswiftdf = df.dropna(subset = [df.columns[15]])\nbashdf = df.dropna(subset = [df.columns[16]])\nmtlbdf = df.dropna(subset = [df.columns[17]])\nnonedf = df.dropna(subset = [df.columns[18]])\notherdf = df.dropna(subset = [df.columns[19]])","4d798eda":"pytlang = pythondf.groupby(pythondf.columns[7], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\npytlang = pytlang.iloc[1:,:].reset_index()\npytlang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\npytlang['Other languages'] = [x.split(' ')[-1] for x in pytlang['Other languages']]\npytlang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\npytlang = pytlang.iloc[:-1,:]","f4f17995":"rlang = rdf.groupby(rdf.columns[8], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nrlang = rlang.iloc[1:,:].reset_index()\nrlang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nrlang['Other languages'] = [x.split(' ')[-1] for x in rlang['Other languages']]\nrlang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nrlang = rlang.iloc[:-1,:]\n","e599cae9":"sqllang = sqldf.groupby(sqldf.columns[9], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nsqllang = sqllang.iloc[1:,:].reset_index()\nsqllang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nsqllang['Other languages'] = [x.split(' ')[-1] for x in sqllang['Other languages']]\nsqllang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nsqllang = sqllang.iloc[:-1,:]","ae9db97f":"clang = cdf.groupby(cdf.columns[10], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nclang = clang.iloc[1:,:].reset_index()\nclang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nclang['Other languages'] = [x.split(' ')[-1] for x in clang['Other languages']]\nclang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nclang = clang.iloc[:-1,:]","c8b0a17c":"cpluslang = cplusdf.groupby(cplusdf.columns[11], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\ncpluslang = cpluslang.iloc[1:,:].reset_index()\ncpluslang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\ncpluslang['Other languages'] = [x.split(' ')[-1] for x in cpluslang['Other languages']]\ncpluslang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\ncpluslang = cpluslang.iloc[:-1,:]","ab0b17a8":"javalang = javadf.groupby(javadf.columns[12], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\njavalang = javalang.iloc[1:,:].reset_index()\njavalang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\njavalang['Other languages'] = [x.split(' ')[-1] for x in javalang['Other languages']]\njavalang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\njavalang = javalang.iloc[:-1,:]","4476a5c1":"jslang = jsdf.groupby(jsdf.columns[13], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\njslang = jslang.iloc[1:,:].reset_index()\njslang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\njslang['Other languages'] = [x.split(' ')[-1] for x in jslang['Other languages']]\njslang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\njslang = jslang.iloc[:-1,:]","3ced3d46":"julialang = juliadf.groupby(juliadf.columns[14], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\njulialang = julialang.iloc[1:,:].reset_index()\njulialang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\njulialang['Other languages'] = [x.split(' ')[-1] for x in julialang['Other languages']]\njulialang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\njulialang = julialang.iloc[:-1,:]","ccc2fe18":"swiftlang = swiftdf.groupby(swiftdf.columns[15], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nswiftlang = swiftlang.iloc[1:,:].reset_index()\nswiftlang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nswiftlang['Other languages'] = [x.split(' ')[-1] for x in swiftlang['Other languages']]\nswiftlang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nswiftlang = swiftlang.iloc[:-1,:]","db4d5a6b":"bashlang = bashdf.groupby(bashdf.columns[16], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nbashlang = bashlang.iloc[1:,:].reset_index()\nbashlang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nbashlang['Other languages'] = [x.split(' ')[-1] for x in bashlang['Other languages']]\nbashlang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nbashlang = bashlang.iloc[:-1,:]","0983f6f0":"mtlblang = mtlbdf.groupby(mtlbdf.columns[17], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nmtlblang = mtlblang.iloc[1:,:].reset_index()\nmtlblang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nmtlblang['Other languages'] = [x.split(' ')[-1] for x in mtlblang['Other languages']]\nmtlblang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nmtlblang = mtlblang.iloc[:-1,:]","147973d6":"nonelang = nonedf.groupby(nonedf.columns[18], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\nnonelang = nonelang.iloc[1:,:].reset_index()\nnonelang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\nnonelang['Other languages'] = [x.split(' ')[-1] for x in nonelang['Other languages']]\nnonelang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\nnonelang = nonelang.iloc[:-1,:]","8b4073e4":"otherlang = otherdf.groupby(otherdf.columns[19], as_index = False).count().iloc[:,np.r_[0:1,8:20]].T\notherlang = otherlang.iloc[1:,:].reset_index()\notherlang.rename(columns = {'index': 'Other languages', 0: 'No. of users'}, inplace = True)\notherlang['Other languages'] = [x.split(' ')[-1] for x in otherlang['Other languages']]\notherlang.sort_values(by = 'No. of users', ascending = False, inplace = True, ignore_index = True)\notherlang = otherlang.iloc[:-1,:]","d16c71a3":"# first we create the four subplots\nfig,((ax1,ax2), (ax3,ax4)) = plt.subplots(2,2, sharex=True, sharey=True, figsize = (18, 18))\n\n\n# we add data for the python pie chart\nax1.pie(pytlang['No. of users'], labels = pytlang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax1.set_title('Python', fontdict = {'fontsize': 20})\n\n\n# we add data for the R pie chart\nax2.pie(rlang['No. of users'], labels = rlang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax2.set_title('R Language', fontdict = {'fontsize': 20})\n\n\n# we add data for the SQL pie chart\nax3.pie(sqllang['No. of users'], labels = sqllang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax3.set_title('SQL', fontdict = {'fontsize': 20})\n\n\n# we add data for the C++ pie chart\nax4.pie(cpluslang['No. of users'], labels = cpluslang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax4.set_title('C++', fontdict = {'fontsize': 20})\nfig.suptitle('Figure 2: 2nd most used languages amongst users of the four most popular languages', fontsize = 22)\nplt.show()","a7253dae":"# the second figure showing the four least popular languages\nfig,((ax1,ax2), (ax3,ax4)) = plt.subplots(2,2, sharex=True, sharey=True, figsize = (18, 18))\n\n\n# we add data for the matlab pie chart\nax1.pie(mtlblang['No. of users'], labels = mtlblang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax1.set_title('Matlab', fontdict = {'fontsize': 20})\n\n\n# we add data for the bash pie chart\nax2.pie(bashlang['No. of users'], labels = bashlang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax2.set_title('Bash', fontdict = {'fontsize': 20})\n\n\n# we add data for the swift pie chart\nax3.pie(swiftlang['No. of users'], labels = swiftlang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax3.set_title('Swift', fontdict = {'fontsize': 20})\n\n\n# we add data for the julia pie chart\nax4.pie(julialang['No. of users'], labels = julialang['Other languages'], autopct='%1.1f%%',\n        explode = [0,0,0,0,0,0,0,0,0,0.2,0.2],  wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'}, colors = sns.color_palette('colorblind'))\nax4.set_title('Julia', fontdict = {'fontsize': 20})\nfig.suptitle('Figure 3: 2nd most used language amongst users of the four least popular languages', fontsize = 22)\nplt.show()","65cff1ab":"htmpdf = pd.DataFrame(columns = languageList, index = languageList)","7489e48c":"for lang in languageList:\n    htmpdf.at[lang, lang] = int(langpop.loc[langpop['Language'] == lang]['No. of users'])","f714ccdb":"htmpdf.head(3)","7a5ddc02":"langtodf = {'Python':pytlang,'R':rlang,'SQL':sqllang,'C':clang,'C++':cpluslang,'Java':javalang,'Javascript':jslang,'Julia':julialang,'Swift':swiftlang,'Bash':bashlang,'MATLAB':mtlblang,'None':nonelang,'Other':otherlang}","aded56ed":"for lang in languageList:\n    for i in range(11):\n        curdf = langtodf[lang]\n        htmpdf.at[curdf.at[i, 'Other languages'], lang] = curdf.at[i, 'No. of users']","df9e7c7b":"htmpdf.fillna(0, inplace = True)","b77ba4ca":"htmpdf.head(3)","37fe371e":"# we use scaling to bring the measurements to a heatmap-compatible scale\nscaler = MinMaxScaler()\nheatMatrixRaw = scaler.fit_transform(htmpdf)","5458feca":"heatmatrix = pd.DataFrame(heatMatrixRaw)\nheatmatrix.columns = htmpdf.columns\nheatmatrix.index = htmpdf.index","6fba49c8":"heatmatrix.head(3)","b4813167":"plt.figure(figsize = (12,8))\nsns.heatmap(heatmatrix, vmin = 0, vmax = 1, cmap = 'viridis')\nplt.title('Figure 4: Heatmap showing language combinations that Kagglers use regularly')\nplt.show()","24279e7d":"# first we get list of the different roles for the users of each language\npytroles = pythondf.groupby(pythondf.iloc[:,5]).count().iloc[:,1].sort_values()\nrroles = rdf.groupby(rdf.iloc[:,5]).count().iloc[:,1].sort_values()\nsqlroles = sqldf.groupby(sqldf.iloc[:,5]).count().iloc[:,1].sort_values()\ncroles = cdf.groupby(cdf.iloc[:,5]).count().iloc[:,1].sort_values()\ncplusroles = cplusdf.groupby(cplusdf.iloc[:,5]).count().iloc[:,1].sort_values()\njavaroles = javadf.groupby(javadf.iloc[:,5]).count().iloc[:,1].sort_values()\njsroles = jsdf.groupby(jsdf.iloc[:,5]).count().iloc[:,1].sort_values()\njuliaroles = juliadf.groupby(juliadf.iloc[:,5]).count().iloc[:,1].sort_values()\nswiftroles = swiftdf.groupby(swiftdf.iloc[:,5]).count().iloc[:,1].sort_values()\nbashroles = bashdf.groupby(bashdf.iloc[:,5]).count().iloc[:,1].sort_values()\nmtlbroles = mtlbdf.groupby(mtlbdf.iloc[:,5]).count().iloc[:,1].sort_values()\nnoneroles = nonedf.groupby(nonedf.iloc[:,5]).count().iloc[:,1].sort_values()\notherroles = otherdf.groupby(otherdf.iloc[:,5]).count().iloc[:,1].sort_values()","c9843fbf":"# we concatenate the resulting series into one dataframe\nroles = pd.concat([pytroles, rroles, sqlroles, croles, cplusroles, javaroles, jsroles, juliaroles, swiftroles, bashroles, mtlbroles, noneroles, otherroles], axis = 1)\n\n# rename the columns by which language we are using\nroles.columns = languageList","1a1e9837":"# we need to rename the index from the question asked to 'None'\nroles.index.name = None","0113f1bb":"# transpose the dataframe and reset the index. This allows us to get all the languages in one column\nroles = roles.T.reset_index()\n\n# then rename the first column to 'languages'\nroles.rename(columns = {roles.columns[0] : 'Languages'}, inplace = True)","60707968":"# also, we change all NaNs to 0\nroles.replace(np.nan, 0, inplace = True)","a7070ac8":"# finally, we change all values to percentages for easy visualization\nfor i in range(13):\n    roles.iloc[i,1:] = [(x\/np.sum(roles.iloc[i,1:])) * 100 for x in roles.iloc[i,1:]]","e1ddd3ef":"roles.head(3)","ce80b9bc":"colors = ['#ea0755', '#f717a9', '#ff71ce', '#0b5394', '#3ea0f8', '#01fef6', '#4fa282', '#00ad89' ,'#01e38c' , '#741b47','#6d00ca' , '#c569e7','#f4f796', '#ffea35', '#f87000']","2bf1676f":"plt.figure(figsize = (22, 10))\nb = 0\nfor val in range(1, 16):\n    if val == 1:\n        plt.barh(roles.iloc[:, 0], roles.iloc[:, val], data = roles, edgecolor = 'black', color = colors[val - 1])\n        b = roles.iloc[:, val]\n    else:\n        plt.barh(roles.iloc[:, 0], roles.iloc[:, val], data = roles, left = b, edgecolor = 'black', color = colors[val - 1])\n        b = b + roles.iloc[:, val]\n        \n        \nplt.ylabel('Programming languages', fontsize = 12)\nplt.xlabel('Percentage of Kagglers in role\/job position', fontsize = 12)\nplt. title('Figure 5: Role\/Job position of Kagglers using each programming language', fontsize = 20)\nplt.legend(roles.columns[1:], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 3, fontsize = 12)\nplt.show()","e5427fae":"# we get the industries by different languages\nindusdf = df.groupby(df.iloc[:, 115]).count().iloc[:,7:20].reset_index()","a3261433":"result = [x.split(' ')[-1] for x in indusdf.columns[1:]]","2a411e74":"indusdf.rename(columns=dict(zip(indusdf.columns[1:], result)), inplace=True)","9b50c567":"indusdf.head(3)","a59b1dbb":"# convert values to percentages for easier visualization\nfor val in range(1, 14):\n    indusdf.iloc[:, val] = [(x\/np.sum(indusdf.iloc[:, val])) * 100 for x in indusdf.iloc[:, val]]","8a26ca47":"colors2 = ['grey', 'lightcoral', 'maroon', 'red', 'indigo', 'chocolate', 'goldenrod', 'darkorange', 'yellow', 'limegreen', 'lightgreen', 'azure', 'powderblue', 'steelblue' ,'purple', 'darkviolet', 'pink', 'crimson']","694d80e0":"# finally, plot the figure\nplt.figure(figsize = (22, 12))\nc = 0\n\nfor val in range(0, 18):\n    if val == 0:\n        plt.barh(indusdf.columns[1:], indusdf.iloc[val, 1:], edgecolor = 'black', color = colors2[val])\n        c = indusdf.iloc[val,1:]\n    else:\n        plt.barh(indusdf.columns[1:], indusdf.iloc[val,1:], left = c, edgecolor = 'black', color = colors2[val])\n        c = c + indusdf.iloc[val, 1:]\n        \nplt.ylabel('Programming languages', fontsize = 12)\nplt.xlabel('Percentage of language users', fontsize = 12)\nplt. title('Figure 6: Industries of Kagglers divided by programming language', fontsize = 20)\nplt.legend(labels = indusdf.iloc[:,0], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 3, fontsize = 12)\nplt.show()","24ee9bea":"# first we sum all the activities for each language using grouping\n\npytact = pythondf.iloc[:, 119: 127].notna().sum()\nract = rdf.iloc[:, 119: 127].notna().sum()\nsqlact = sqldf.iloc[:, 119: 127].notna().sum()\ncact = cdf.iloc[:, 119: 127].notna().sum()\ncplusact = cplusdf.iloc[:, 119: 127].notna().sum()\njavaact = javadf.iloc[:, 119: 127].notna().sum()\njsact = jsdf.iloc[:, 119: 127].notna().sum()\njuliaact = juliadf.iloc[:, 119: 127].notna().sum()\nswiftact = swiftdf.iloc[:, 119: 127].notna().sum()\nbashact = bashdf.iloc[:, 119: 127].notna().sum()\nmtlbact = mtlbdf.iloc[:, 119: 127].notna().sum()\nnoneact = nonedf.iloc[:, 119: 127].notna().sum()\notheract = otherdf.iloc[:, 119: 127].notna().sum()","5b94f918":"# we concatenate the series of activities into a single dataframe\nactivities = pd.concat([pytact,ract,sqlact,cact,cplusact,javaact,jsact,juliaact,swiftact,bashact,mtlbact,noneact,otheract], axis = 1)","4f397320":"# we rename the columns\nactivities.columns = languageList","f8ace602":"# reset index so that the activities are in a separate column\nactivities = activities.reset_index()\n\n# rename the activities column\nactivities.rename(columns = {'index': 'Activities'}, inplace = True)\n\n#get the activities\nactivities['Activities'] = [x.split('-')[-1].strip() for x in activities.iloc[:,0]]","f4378787":"# remove the question part of each column name and put the results in a list\nrolesnames = [x.split('-')[-1].strip() for x in activities.columns[1:]]","c8a1729e":"# rename the rest of the columns by activity\nactivities.rename(columns=dict(zip(activities.columns[1:], rolesnames)), inplace=True)","ae275d4a":"# transform the raw numbers into percentages for uniformity\nfor i in range(1,14):\n    activities.iloc[:,i] = [(x \/np.sum(activities.iloc[:,i])) * 100 for x in activities.iloc[:,i]]","96dd0e1c":"activities.head(3)","810bda62":"plt.figure(figsize = (22,10))\n\nd = 0\n\nfor i in range(8):\n    if i == 0:\n        plt.bar(activities.columns[1:], activities.iloc[i,1:], edgecolor = 'black')\n        d = activities.iloc[i,1:]\n    else:\n        plt.bar(activities.columns[1:], activities.iloc[i,1:], bottom = d, edgecolor = 'black')\n        d = d + activities.iloc[i,1:]\n        \nplt.xlabel('Programming languages', fontsize = 12)\nplt.ylabel('Percentage of language users', fontsize = 12)\nplt. title('Figure 7: Activities that make up an important part of users\\' role at work', fontsize = 20)\nplt.legend(labels = activities.iloc[:,0], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 2, fontsize = 12)\nplt.show()","181671e3":"mldf = df.groupby(df.iloc[:, 118]).count().iloc[:,7:20].reset_index()\ncolnames = [x.split(' ')[-1] for x in mldf.columns[1:]]\nmldf.rename(columns=dict(zip(mldf.columns[1:], colnames)), inplace=True)","9f37795a":"for val in range(1, 14):\n    mldf.iloc[:, val] = [(x\/np.sum(mldf.iloc[:, val])) * 100 for x in mldf.iloc[:, val]]","84a3f0b4":"mldf = mldf.reindex([0,1,2,5,4,3])","b12e130c":"mldf.head(3)","399b3102":"plt.figure(figsize = (22, 12))\nc = 0\n\nfor val in range(0, 6):\n    if val == 0:\n        plt.barh(mldf.columns[1:], mldf.iloc[val, 1:], edgecolor = 'black')\n        c = mldf.iloc[val,1:]\n    else:\n        plt.barh(mldf.columns[1:], mldf.iloc[val,1:], left = c, edgecolor = 'black')\n        c = c + mldf.iloc[val, 1:]\n        \nplt.ylabel('Programming languages', fontsize = 12)\nplt.xlabel('Percentage of language users', fontsize = 12)\nplt. title('Figure 8: Does your current employer incorporate machine learning methods into their business?', fontsize = 20)\nplt.legend(labels = mldf.iloc[:,0], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 2, fontsize = 12)\nplt.show()","0341d5a4":"usrmldf = df.groupby(df.iloc[:, 71]).count().iloc[:,7:20].reset_index()\nloc2colnames = [x.split(' ')[-1] for x in usrmldf.columns[1:]]\nusrmldf.rename(columns=dict(zip(usrmldf.columns[1:], loc2colnames)), inplace=True)","b76d096b":"for val in range(1, 14):\n    usrmldf.iloc[:, val] = [(x\/np.sum(usrmldf.iloc[:, val])) * 100 for x in usrmldf.iloc[:, val]]","f742fcc7":"usrmldf = usrmldf.reindex([7,8,0,2,4,5,6,1,3])","cecdfc2d":"usrmldf.head(3)","4d9e4886":"plt.figure(figsize = (22, 12))\nc = 0\n\nfor val in range(0, 9):\n    if val == 0:\n        plt.barh(usrmldf.columns[1:], usrmldf.iloc[val, 1:], edgecolor = 'black')\n        c = usrmldf.iloc[val,1:]\n    else:\n        plt.barh(usrmldf.columns[1:], usrmldf.iloc[val,1:], left = c, edgecolor = 'black')\n        c = c + usrmldf.iloc[val, 1:]\n        \nplt.ylabel('Programming languages', fontsize = 12)\nplt.xlabel('Percentage of language users', fontsize = 12)\nplt. title('Figure 9: {}'.format(usrmldf.columns[0]), fontsize = 20)\nplt.legend(labels = usrmldf.iloc[:,0], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 2, fontsize = 12)\nplt.show()","753a78e4":"# for each, we first isolate the column which gives duration of years working, and group the years\n# we rename the resulting series by language name\n\npytdur = pythondf.groupby(pythondf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\npytdur.name = 'Python'\nrdur = rdf.groupby(rdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nrdur.name = 'R'\nsqldur = sqldf.groupby(sqldf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nsqldur.name = 'SQL'\ncdur = cdf.groupby(cdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\ncdur.name = 'C'\ncplusdur = cplusdf.groupby(cplusdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\ncplusdur.name = 'C++'\njavadur = javadf.groupby(javadf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\njavadur.name = 'Java'\njsdur = jsdf.groupby(jsdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\njsdur.name = 'Javascript'\njuliadur = juliadf.groupby(juliadf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\njuliadur.name = 'Julia'\nswiftdur = swiftdf.groupby(swiftdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nswiftdur.name = 'Swift'\nbashdur = bashdf.groupby(bashdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nbashdur.name = 'Bash'\nmtlbdur = mtlbdf.groupby(mtlbdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nmtlbdur.name = 'Matlab'\nnonedur = nonedf.groupby(nonedf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\nnonedur.name = 'None'\notherdur = otherdf.groupby(otherdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,1]\notherdur.name = 'Other'\n\n# finally, we get the groups of years working\ndurations = otherdf.groupby(otherdf.iloc[:,6]).count().iloc[:,0].reset_index().iloc[:,0]\ndurations.name = 'Years spent writing code and\/or programming'","f97b026a":"# we concatenate the years worked for each language into one dataframe\nyrsworked = pd.concat([durations, pytdur, rdur, sqldur, cdur, cplusdur, javadur, jsdur, juliadur, swiftdur, bashdur, mtlbdur, nonedur, otherdur], axis = 1)","9d93d274":"# transpose and transform the dataframe to get the age ranges and the names\nyrsworked = yrsworked.T.reset_index()\nyrsworked.columns = yrsworked.iloc[0,:]\nyrsworked = yrsworked.iloc[1:,:]","adf0989f":"# we get the headers to rearrange the columns\nheaders = list(yrsworked.columns)","e9a7104a":"yrsworked = yrsworked[[headers[0],headers[6],headers[1],headers[4],headers[5],headers[2],headers[3]]]","0c144b8e":"# now for each value we take its percentage so that the values are normalized\nfor i in range(0, 13):\n    total = np.sum(yrsworked.iloc[i,1:])\n    yrsworked.iloc[i,1:] = [(x\/total) * 100 for x in yrsworked.iloc[i,1:]]","1c374937":"yrsworked.head(3)","d27de943":"# we get age ranges for the legend of the bar chart\nlabels = list(yrsworked.columns[1:])\ncolors = ['#fe2c49', '#ff7d02', '#fad819','skyblue','coral', 'tan']","1a99b55d":"# finalyl we construct the bar chart\nplt.figure(figsize = (12,6))\na = 0\n\nfor val in range(1,7):\n    if val == 1:\n        plt.bar(yrsworked.iloc[:,0], yrsworked.iloc[:,val], data = yrsworked, color = colors[val - 1])\n        a = yrsworked.iloc[:,val]\n    else:\n        plt.bar(yrsworked.iloc[:,0], yrsworked.iloc[:,val], data = yrsworked, bottom = a, color = colors[val - 1])\n        a = a + yrsworked.iloc[:,val]\n        \nplt.yticks(np.arange(0, 120, 10))\nplt.xlabel('Programming languages', fontsize = 12)\nplt.ylabel('Percentage of Kagglers in year bracket', fontsize = 12)\nplt. title('Figure 10: Programming experience by programming language', fontsize = 20)\nplt.legend(labels, bbox_to_anchor = (1, 1), loc = 'upper left')\nplt.show()","b4babc4a":"langrec = (\n    df\n    .groupby(df.iloc[:,20])\n    .agg(Total = ('Duration (in seconds)', 'count'))\n    .sort_values(by = 'Total', ascending = False)\n)\nlangrec.reset_index(inplace = True)\nlangrec.rename(columns = {langrec.columns[0]: 'Recommended Lang.'}, inplace = True)","be4a5f00":"langrec['Percentage'] = [(x\/np.sum(langrec['Total'])) * 100 for x in langrec['Total']]","1572ed2e":"langrec.head()","79ec3b70":"plt.figure(figsize = (10, 10))\nplt.pie(langrec.iloc[:,2], labels = langrec.iloc[:,0], explode = [0,0,0,0,0,0.3,0.3,0.3,0.3,0.3,0.3,0.5,0.5], autopct = '%1.1f%%')\nplt.title('Figure 11: Language recommendations for aspiring data scientists', fontsize = 20)\nplt.show()","4d366fbe":"pytlrn = pythondf.iloc[:, 243: 255].notna().sum()\nrlrn = rdf.iloc[:, 243: 255].notna().sum()\nsqllrn = sqldf.iloc[:, 243: 255].notna().sum()\nclrn = cdf.iloc[:, 243: 255].notna().sum()\ncpluslrn = cplusdf.iloc[:, 243: 255].notna().sum()\njavalrn = javadf.iloc[:, 243: 255].notna().sum()\njslrn = jsdf.iloc[:, 243: 255].notna().sum()\njulialrn = juliadf.iloc[:, 243: 255].notna().sum()\nswiftlrn = swiftdf.iloc[:, 243: 255].notna().sum()\nbashlrn = bashdf.iloc[:, 243: 255].notna().sum()\nmtlblrn = mtlbdf.iloc[:, 243: 255].notna().sum()\nnonelrn = nonedf.iloc[:, 243: 255].notna().sum()\notherlrn = otherdf.iloc[:, 243: 255].notna().sum()","f3c1b22f":"lrnplat = pd.concat([pytlrn,rlrn,sqllrn,clrn,cpluslrn,javalrn,jslrn,julialrn,swiftlrn,bashlrn,mtlblrn,nonelrn,otherlrn], axis = 1)","f4443faa":"# we rename the columns\nlrnplat.columns = languageList","6bf28341":"# reset index so that the activities are in a separate column\nlrnplat = lrnplat.reset_index()\n\n# rename the activities column\nlrnplat.rename(columns = {'index': 'Learning Platforms'}, inplace = True)\n\n#get the activities\nlrnplat['Learning Platforms'] = [x.split('-')[-1].strip() for x in lrnplat.iloc[:,0]]","70004133":"platforms = [x.split('-')[-1].strip() for x in lrnplat.columns[1:]]","8c4de211":"# rename the rest of the columns by activity\nlrnplat.rename(columns=dict(zip(lrnplat.columns[1:], platforms)), inplace=True)","591e3c8c":"# transform the raw numbers into percentages for uniformity\nfor i in range(1,14):\n    lrnplat.iloc[:,i] = [(x \/np.sum(lrnplat.iloc[:,i])) * 100 for x in lrnplat.iloc[:,i]]","5b653583":"lrnplat.head(3)","41e8b4e3":"lrnplat.shape","78864091":"plt.figure(figsize = (22,10))\n\nd = 0\n\nfor i in range(12):\n    if i == 0:\n        plt.bar(lrnplat.columns[1:], lrnplat.iloc[i,1:], edgecolor = 'black')\n        d = lrnplat.iloc[i,1:]\n    else:\n        plt.bar(lrnplat.columns[1:], lrnplat.iloc[i,1:], bottom = d, edgecolor = 'black')\n        d = d + lrnplat.iloc[i,1:]\n        \nplt.xlabel('Programming languages', fontsize = 12)\nplt.ylabel('Percentage of language users', fontsize = 12)\nplt. title('Figure 12: Learning platforms on which users began\/completed data science courses', fontsize = 20)\nplt.legend(labels = lrnplat.iloc[:,0], bbox_to_anchor = (0, 1.05, 1, 0), loc = 'lower left', mode = 'expand', ncol = 2, fontsize = 12)\nplt.show()","786d31f9":"Data science is a complex field to say the least. It takes its roots from statistics, mathematics and computer science; its branches spread towards nearly every field. Whichever way you look at it, data science is a juggernaut indeed.\n\nBut everything begins with a base, a foundation, a first step. One of the most important bases of data science is computer programming, that critical skill which allows us to work with massive amounts of data. Programming, in turn, begins with languages\u2013 programming languages, that is. There are countless programming languages around; some are ubiquitous, others obsolete. Aspiring data scientists are often daunted by the thought of where to begin. A popular language choice is Python, but is it the only one? Is R a better choice? How many languages does a data scientist need anyway? \n\nIn this notebook, I will look at the languages that Kagglers use. Though Kagglers are a wide and varied bunch, they represent a vibrant community of current and aspiring data scientists. Taking a look at their language choices would give a good idea of the languages in vogue today. Also, I will be using Python, as *my* language of choice.","d67e41e0":"### Kagglers own usage of machine learning methods","d4ee5095":"The first thing we do is look at what the dataframe has to present to us.","98abc170":"## Table of Contents\n\n- [Introduction](#Introduction)\n- [The size of the dataset](#The-size-of-the-dataset)\n- [Language usage](#Language-usage)\n    - [Secondary language usage](#Secondary-language-usage)\n    - [Heatmap of language usage](#Heatmap-of-language-usage)\n- [Job distribution across languages](#Job-distribution-across-languages)\n- [The activities of a job](#The-activities-of-a-job)\n- [The intricacies of machine learning across languages](#The-intricacies-of-machine-learning-across-languages)\n    - [Employers use of machine learning](#Employers'-use-of-machine-learning)\n    - [Kagglers own usage of machine learning methods](#Kagglers-own-usage-of-machine-learning-methods)\n- [Overall programming experience](#Overall-programming-experience)\n- [Language recommendations](#Language-recommendations)\n- [Learning platforms](#Learning-platforms)\n- [Results](#Results)\n- [Conclusion](#Conclusion)","4826f917":"## The activities of a job","a26fe0a5":"A more comprehensive yet somewhat more complicated way of visualizing language usage is by a heatmap.","e12bf1af":"### Heatmap of language usage","5d19c71e":"Out of the languages most commonly used, **Python** is overwhelmingly the most recommended for newbies as well. However, while **SQL** is the second most common language used by Kagglers by far, in recommendations it is behind **R**, though only by 0.4%. And while **C++** is the third most common language used by Kagglers, in recommendations it is in fifth place. \n\nThe other languages are recommended only sparingly. This can be due to the steepness of their learning curves as well as the experience required by their users; as seen in the Figure 10, Kagglers that normally use Bash, Swift and Julia have been programming for larger periods of time. It could be that jobs require more years of experience.\n\nHowever, it could be due to a vicious loop as well: due to the ease and versatility of languages like Python and SQL, languages like Julia and Bash aren't learned. This in turn requires older, more experienced programmers to learn these languages, which results in the results seen in the survey.","af940a80":"Now we take a look at the languages themselves. The first thing we would want to see is which languages are used most often. From a prelimary look at our data, we see that columns 7 - 19 contain this information.","7dc8f736":"### Secondary language usage","473c2940":"**Figure 12** shows us where Kagglers completed programming courses. However, the spread of users across languages and learning platforms is more or less the same; there don\u2019t appear to be any languages whose representation is higher or lower on any particular platform, be it university courses, certification programs, or online learning websites like Coursera or Kaggle.","9ee0755a":"We see a fairly even distribution of activities. Regardless of language, most Kagglers spend their time analysing and understanding data; understandably, users of **R** and **SQL**, and to a lesser extent **Python** are in greater numbers here. Those Kagglers who do not regularly use any language are actually the likeliest to be performing analyses, possibly through means of programs such as Tableau. Users of other language spend more time in machine learning activities: by building prototypes to explore machine learning in new areas, running machine learning services, or even experimenting and researching machine learning models.\nOverall, **Julia users** spend the greatest amount of time in data science activities; only ~2% have activities that have nothing to do with the given options, and 0.8% have \u2018other\u2019 activities. In contrast, users that do not regularly use any programming language have the least to do with any machine learning activities- again an understandable phenomenon. ","9add0941":"## Language usage","6b549e25":"## Results","674ea633":"## The intricacies of machine learning across languages","b1804673":"For the least used languages, Python and SQL still reign supreme as the 2nd and 3rd most used languages respectively, proving that they most data scientists are likely to be using them regardless of which other language they use. Users of Matlab and, Bash and Swift are more likely to use C++ as compared to R, which is relegated to the middle of the pack along with Java and C. Users of Julia show differences in their language preferences; for them R is the 4th most popular language, and they are much more likely to use Bash. Unfortunately, users of Bash are not likely to use Julia any more than others.\n","e6456d35":"Here we divide the data by two metrics: **Figure 8** shows how much the Kagglers\u2019 current employers employ machine learning in their business, while **Figure 9** shows how many years the users themselves have been using machine learning methods. ","ff5c8ff0":"We are starting, by now, to see something of the individualities of the different languages. Progressing further, we elaborate further on the machine learning aspect of the data, trying to get a better idea of how much each languages\u2019 users are involved in it. ","4fc75bb2":"## Introduction","b3b8b952":"Of course, experience depends on which language one begins one\u2019s programming journey with, and also which platform is used for the learning. An aspiring data scientist's first programming language usually depends on many things: what interested them in data science, their previous education\/career, and where they began to learn. While the question of which language a Kaggler learned first wasn\u2019t present in the survey (perhaps rightly, since its likely that some might not remember the answer), the question of which one they would recommend to an aspiring data scientist was asked. ","866d5d88":"## The size of the dataset","5b3a379d":"# The languages of Data Science","e2972091":"The first thing to do is to import the relevant libraries, and the dataset.","7136b3a3":"The bar chart above shows that a majority of Kagglers are students, followed by data scientists, analysts and software engineers \u2013 not very unusual choices. However, users of C and C++ have the largest number of students (>40%) while Bash and Swift have the least (~15%). Around 25% of Python users and ~20% of R and SQL users are students. A detailed breakdown is as follows:\n\n**Python users**, ~28% are students, ~15% are data scientists, followed by ~8% of both software engineers and data analysts. Occupations such as business analyst, product manager and research scientist make up <10% of Python users\u2019 occupations. \n\n**R users**, 22% are students, 21% data scientists, and 13% data analysts. Only ~3% are software engineers, a remarkably low number compared to Python users. This, coupled with the differences in the numbers of data scientists and analysts between the two languages, highlights the fact that R is possibly \u2018the\u2019 language for data science. Other occupations make up <10% of R users.\n\n**SQL users**, the percentages are more evenly spread amongst students, data scientists, data analysts and software engineers (~13-19%).\n\n**C, C++, Java and Javascript users**: A good look at the table tells us that data scientists and data analysts make up <10% of their users; the largest numbers of Kagglers who use them regularly are students (>40% for C and C++, to 26% for Javascript), followed by software engineers (ranging from 11% to 23%). This lends credence to the position that these are more software languages than data ones.\n\n**Julia users**: Students make 20% of its users. Of the rest, ~18% are data scientists, and 16% research scientists, implying that Julia might be used more in research-work. Other occupations, including data analysts, software engineers, data engineers etc, make up only handfuls, with each occupation contributing to <10% of the total.\n\n**Swift users**: Software engineers make up the highest percentage of Swift users, at 26%. 14% are students, and ~10% are in \u2018other\u2019 industries. Of the named occupations, however, none make more than 10% of the total, though data scientists are at the higher side of the scale at 9.9%.\n\n**Bash users**: 19% are data scientists, 16% software engineers, and 13% students. An interesting thing to note is that research scientist and machine learning engineer rank relatively highly (at 9.7% and 9.1% respectively).\n\n**MATLAB users**: After students (33%), research scientists make up the greatest proportion of its users at ~13%. Data scientists make 11% of its users, while the other named occupations are <10%.\n\n**None**: People who use no programming language regularly are either students (18%) or do \u2018other\u2019 jobs (27%). Of the rest, 16.9% are unemployed and 10% are data analysts. The other occupations make <10% of the total number of users; data scientists and software engineers make, respectively, 1.5% and 2% of the total.\n\n**Others**: Kagglers who use other languages regularly are mostly either software engineers (23%), students (~12%), in \u2018other\u2019 jobs (12%) or data analysts (~10%). ","fa5ffe24":"We have seen all the languages used by Kagglers. We have also seen which are more commonly used and which are less common. However, this begs another question, namely: who uses which language to do what? SQL cannot be used for machine learning; Python, for all its versatility, is not the ideal language to design websites. Of course, in our modern-day world there is no field or industry of which programming doesn\u2019t take a little part. For the purposes of this notebook, we shall run more code to see what jobs Kagglers usually do.","199513d0":"Now we check the least popular programming languages: Matlab, Bash, Swift and Julia.","70a53d76":"Right away we can see that as we move across the figure\u2013 from \u2018popular\u2019 programming languages like **Python, R and SQL**, to languages geared towards software engineering like **C, C++, Java and Javascript**, towards the harder, less popular languages like **Julia and Bash**, the users\u2019 programming experience increases, with ~20% **Julia and Swift users** having greater than twenty years\u2019 experience. This trend is broken by **MATLAB** which, from what we\u2019ve seen by its popularity amongst students, has a higher percentage of users with lesser number of years worth of experience. It is understandable that Kagglers not using any programming language regularly have little programming experience.","f5bb311b":"Taken in conjunction with the data on jobs, we can assume that a large majority of the users in Academics\/Education are students. Languages such **C** and **C++** and even **MATLAB** are often taught in universities and programming courses, so it is understandable that they would be used regularly by students. **R**, **Java** and **Julia** are the next most popular in Academics, followed by **Python, Javascript and SQL**.  \n32% of **Swift users** and 31.5% of **Bash users** are in Computer\/Technology, comparable to ~32% of **users of C++**, 35% of **Java users**, and 33% of **Javascript users**. Of course, by the very nature of the field, all languages have a higher percentage of users here; computers and technology are where programming languages are in their natural habitat! We can assume that this is where all the data engineers, database engineers and machine learning engineers are pooled here. \nIn the next industry, Finance and Accounting, we see that **SQL** has the greatest number of users; between 5-10% of users of the other languages are in the Finance\/Accounting industries.","200417c8":"As stated in the introduction, there are countless programming languages. Through our analysis, we have seen the ones Kagglers use, and where and how they are likely to use them. We have seen which languages are used by experience, and taken a look at which ones to choose depending on potential career. While it is clear that some languages are preferred over others, it depends, in the end, on the nature of the work being done; there is no 'best' programming language after all!","6ea50bba":"We can shift the kaleidoscope a little to see which languages are used in which **industry**. ","7cd4fa7f":"### Employers use of machine learning","4047787e":"From the above we can see that Python is the language most regularly used amongst Kagglers by a large majority. However, there are a greater number of SQL users, and slightly more C++ users than R. Java is the fifth most used language, though by looking at the chart we can see that C has about the same number of users. ","e7f960d8":"We see from the above that there are 25,000+ data entries, a good sample size. We also see that there are 369 columns with different aspects of the data scientists. A cursory look at the dataset shows that the questions covre personal details as well as the respondent's knowledge and level of skill. ","84cf7879":"So we have seen what the users\u2019 of different languages do. One thing to note is that usage of the language in a particular field does not imply that the language is being used to perform that job. Many programmers know a multitude of languages; Figure 6 has shown us this as well. What this tells us is the degree of overlap between languages and jobs: while users of R, for instance may be software engineers, it is less likely that they are actively using R to design any software.\nThis brings us to our next question: What activities make up an important role in the Kagglers\u2019 work? ","819f4051":"After our analysis, the following differences can be observed in the usage of different programming languages:\n\n- Python, R and SQL are popular but 'easy' programming languages, used equally in analytics as well as machine learning. They are more likely to be learned early and used by novice data scientists. Amongst them, SQL users are more likely to be in data analytics; they are also more likely to be in field of Accounting or Finance. Python users  are by contrast more likely to be working in computers\/technology, with their work geared more towards data science and data engineering. R users are more likely to be in \u2018hard\u2019 data analytics, with equal numbers in academics, finance and technology.\n- C, C++, Java and Javascript are languages whose users are more likely to be in software engineering and related disciplines; they are also more likely to be students and those learning programming and data science. While their users work in businesses\/jobs that employ machine learning methods, it could be that they use other languages in addition to these four in their work.\n- Swift's users tend to be into software engineering as well. However, the users of Swift are more likely to be older and more experienced, and much less likely to be students. They are also more likely to be using or employed in businesses using machine learning.\n- Julia and Bash appear to be languages for more experienced programmers, and those deeply into data science. Very few of their users do not use machine learning; they are the least likely to be students. Users of Julia are more likely to be in research.\n- MATLAB are also likely to be more into machine learning than analytics. However, a higher percentage of them tend to be students, meaning that the language is more likely to be taught earlier in aspiring data scientists.\n- The recommended language for new data scientists to learn is overwhelmingly Python, with fewer suggestions for SQL and R. Languages like Bash and Swift are not recommended at all.","99b88904":"The question now becomes: what activities are there that we could look at? Programming encompasses a world of activities, to say nothing of things like meetings and paperwork that are common to all jobs. Our question is mostly concerned with data science; data analysis, infrastructure and experimentation using machine learning are more along the line of what we want to know about. For this we look at **Figure 7**, which shows eight different options that were asked for on the survey.","759d3d58":"Finally, we see where Kagglers have obtained their education, to see whether that has any influence on the language learned.","ddae4cce":"The heatmap tells us a more generalized story of what the pie charts show us separately. The top half of the heatmap is lighter, showing that languages like python and SQL are commonly used alongside other data science languages. The lighter portion in the right-center of the map shows that languages like C, C++ and Javascript are more commonly used by Swift, Bash and Julia users than R or C. The darker part at the bottom portion of the map tells us that languages like Bash, MATLAB, etc are less used; people using 'Other' languages however use Javascript and SQL more than others. ","fc70c351":"## Learning platforms","c96185f8":"## Job distribution across languages","2caac7fd":"## Conclusion","0d29c38f":"## Overall programming experience","466e8350":"From **Figure 8** little less than 40% (exact percentages range from 32-36%) of **Python, SQL, R, C, C++, Java, Javascript and MATLAB** users either do not know or have not had machine learning methods employed in their place of work; taken in conjunction with **Figure 7** above, we can assume that these are either those working in data analysis, or the very  few whose activities are not represented in the data. Users of **Julia** and **Bash** are least likely to not use machine learning methods, with only ~20% of **Julia users** and ~21% of **Bash users** saying that they do not know or use them. More than 60% of Kagglers who do not use any language do not know\/use any machine learning methods, in comparison to 40% of those who use other languages.\n\nAround a quarter (~25%) of **C, C++, Java, Javascript and MATLAB** users work in businesses which are exploring machine learning methods; 22% of **Python users, 21% R users, 20% SQL users and 19.5% Julia users**  work in similar businesses. Percentages are similar across the board for businesses that have recently started using machine learning methods; in contrast, 26% of **Julia users** and 28% of **Bash users** work in businesses that have already established machine learning methods. \n\nThis trend is reflected in the users\u2019 machine learning experiences as well. Going by **Figure 9** and the associated data, we can see that only around 5% of Julia users do not use ML methods, and 19% have used them for less than a year;  taken together, only \\~23% of Julia users are \u2018new\u2019 to machine learning. A greater number of **Bash** users (~9%) do not use ML, a little less than the 10.9% of **MATLAB**, 12.8% of **Python**, 11.9% of **R**, and 12.3% of **Swift** users. Users of **C, C++, Java and Javascript** who do not use ML hover in the same range - ~16%. 41.5% of **C users**, ~39% of **Python, C++ and Java users**, ~36% of **SQL and Javascript users** and 31% of **R users** have been using machine learning methods for <1 year. \n\nAfter this, the percentages spread out somewhat evenly again across the different languages; beyond the one year mark, **C, C++, Java, Javascript** and, surprisingly, **Python** users are in the 40-50% range, **R and MATLAB** users are in the 50-60% range, and **Julia** users make 76.5% of users who use machine learning methods.\n\nIn short, it seems that Kagglers who use **Julia, and to a lesser extent MATLAB and Bash users** are the ones who have the greatest experience using machine learning methods.","003e4350":"## Importing the data","16960b9d":"For the four most used languages, we see that the trends are generally the same as that found in overall popularity, with the second most used programming language being Python by a large margin. After that, users of R and SQL are more likely to use the complementary language (i.e., users of R are likely to use SQL and vice versa). For users of C++, the second most used language is C, which is understandable considering C++'s relationship to C language. However, while SQL is the third most popular language for these users, R's relative unpopularity is surprising - it is at 7th place, with only 5.2% of C++ users also knowing R.","eedf9331":"But programmers often know and use more than one language. In the given dataset this is true as well, as a large number of respondents have selected multiple languages they use regularly. We delve further into this to see which languages are used with other languages- in a way, which languages 'go' together.  ","919940d0":"But machine learning experience isn\u2019t the only kind of experience a data scientist have; first, they must haveexperience in coding **Figure 10** shows us the years of experience the users of different languages have. ","562bbe81":"## Language recommendations"}}