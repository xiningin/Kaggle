{"cell_type":{"7e799940":"code","d60434a9":"code","54b654ee":"code","46d14bc8":"code","52403846":"code","4eefd597":"code","5668d88a":"code","90a2e2be":"code","b507c451":"code","9f25bc97":"code","ba950e57":"code","e8a16ffe":"code","b6c4bd64":"code","cdfe58db":"code","60eaa09a":"code","11e9b77d":"code","eb28186f":"code","9ebbbb34":"code","88c951c9":"code","2d13b4aa":"code","8f675070":"code","9addfe57":"code","a426554e":"code","0d033c32":"code","14132f93":"markdown","ae03c02d":"markdown","18f6af40":"markdown","8d6f20ad":"markdown","aa8bd98a":"markdown"},"source":{"7e799940":"import pandas as pd\nimport re\nimport gc","d60434a9":"def keep_matching_cols(df1, df2):\n    keep_cols = list(set(df1.columns).intersection(set(df2.columns)))\n    df1 = df1[keep_cols]\n    df2 = df2[keep_cols]\n    print(len(set(df1.columns) - set(df2.columns)) , len(set(df2.columns) - set(df1.columns)))\n    return df1, df2","54b654ee":"rcc_train = pd.read_csv(\"\/kaggle\/input\/interbank20\/rcc_train.csv\")\nrcc_test = pd.read_csv(\"\/kaggle\/input\/interbank20\/rcc_test.csv\")","46d14bc8":"bins = [-1, 0, 10, 20, 30, 60, 90, 180, 360, 720, float(\"inf\")]\nrcc_train[\"condicion_bins\"] = pd.cut(rcc_train.condicion, bins)\nrcc_test[\"condicion_bins\"] = pd.cut(rcc_test.condicion, bins)","52403846":"def makeCt(df, c, aggfunc=sum):\n    try:\n        ct = pd.crosstab(df.key_value, df[c].fillna(\"N\/A\"), values=df.saldo, aggfunc=aggfunc)\n    except:\n        ct = pd.crosstab(df.key_value, df[c], values=df.saldo, aggfunc=aggfunc)\n    ct.columns = [f\"{c}_{aggfunc.__name__}_{v}\" for v in ct.columns]\n    return ct","4eefd597":"train = []\ntest = []\naggfuncs = [len, sum, min, max]\nfor c in rcc_train.drop([\"codmes\", \"key_value\", \"saldo\", \"condicion\"], axis=1):\n    print(\"haciendo\", c)\n    train.extend([makeCt(rcc_train, c, aggfunc) for aggfunc in aggfuncs])\n    test.extend([makeCt(rcc_test, c, aggfunc) for aggfunc in aggfuncs])","5668d88a":"train = pd.concat(train, axis=1)\ntest = pd.concat(test, axis=1)","90a2e2be":"gc.collect()","b507c451":"train, test = keep_matching_cols(train, test)","9f25bc97":"test = test.rename(columns = lambda x:re.sub('[^A-Za-z0-9_-]+', '', x))\ntrain = train.rename(columns = lambda x:re.sub('[^A-Za-z0-9_-]+', '', x))","ba950e57":"def pre_rcc(df):\n    agg_key_mes = {\n        'condicion_max'     : ('condicion', 'max'),\n        'condicion_menos30' : ('condicion', lambda x: int(x.max() <= 30)),\n        'condicion_menos60' : ('condicion', lambda x: int(x.max() <= 60 & x.max() > 30)),\n        'condicion_menos90' : ('condicion', lambda x: int(x.max() <= 90 & x.max() > 60)),\n        'condicion_mas90'   : ('condicion', lambda x: int(x.max() > 90)),\n        'ifinan_count'      : ('cod_instit_financiera', 'count'),\n        'rdirecto_max'      : ('RIESGO_DIRECTO', 'max'),\n        'cdeudor_max'       : ('COD_CLASIFICACION_DEUDOR', 'max'),\n        'saldo_sum'         : ('saldo', lambda x: x.abs().sum()),\n    }\n\n    agg_key = {\n        'condicion_max_count'     : ('condicion_max', 'cumsum'),\n        'condicion_menos30_count' : ('condicion_menos30', 'cumsum'),\n        'condicion_menos60_count' : ('condicion_menos60', 'cumsum'),\n        'condicion_menos90_count' : ('condicion_menos90', 'cumsum'),\n        'condicion_mas90_count'   : ('condicion_mas90', 'cumsum'), \n        'ifinan_count_sum'        : ('ifinan_count_diff', 'cumsum'), \n    }\n    \n    df.drop(columns=['tipo_credito', 'PRODUCTO'], inplace=True)\n    df['codmes'].replace(sorted(df.codmes.unique()), list(range(1,13)), inplace=True)\n\n    df = df.groupby(['key_value', 'codmes']).agg(**agg_key_mes).reset_index()\n\n    df['riesgo_diff']        = df.rdirecto_max ** 2 - df.cdeudor_max ** 2\n    df['condicion_max_diff'] = df.groupby(['key_value']).condicion_max.diff().fillna(df['condicion_max'])\n    df['ifinan_count_diff']  = df.groupby(['key_value']).ifinan_count.diff().abs().fillna(df['ifinan_count'])\n\n    df2 = df.groupby(['key_value']).agg(**agg_key)\n\n    df = pd.concat([df, df2], axis = 1).pivot(index = 'key_value', columns = 'codmes').reset_index().set_index('key_value')\n    \n    df.columns = [f'{f}_{s}' if s != '' else f'{f}'  for f, s in df.columns]    \n    \n    return df","e8a16ffe":"train = pre_rcc(rcc_train).join(train)\ntest = pre_rcc(rcc_test).join(test)","b6c4bd64":"del rcc_train, rcc_test\ngc.collect()","cdfe58db":"sunat_train = pd.read_csv(\"\/kaggle\/input\/interbank20\/sunat_train.csv\")\nsunat_test= pd.read_csv(\"\/kaggle\/input\/interbank20\/sunat_test.csv\")","60eaa09a":"def pre_sunat(df):\n    agg_key = {\n        'tipcontribuyente_count'    : ('tipcontribuyente', 'nunique'),\n        'tippersona_count'          : ('tippersona', 'nunique'),\n        'ciiu_count'                : ('ciiu', 'nunique'),\n        'ubigeo_count'              : ('ubigeo', 'nunique'),\n        'condiciondomicilio_count'  : ('condiciondomicilio', 'nunique'),       \n        'estadocontribuyente_count' : ('estadocontribuyente', 'nunique'),\n        'codvia_count'              : ('codvia', 'nunique'),\n        'codzona_count'             : ('codzona', 'nunique'),       \n        'contabilidad_count'        : ('contabilidad', 'nunique'),  \n        'facturacion_count'         : ('facturacion', 'nunique'),       \n        'domiciliado_count'         : ('domiciliado', 'nunique'),  \n        'comercioexterior_count'    : ('comercioexterior', 'nunique'),       \n        'cargorele_count'           : ('cargorele', 'nunique'),          \n        'codentidadtributo_count'   : ('codentidadtributo', 'nunique'),\n        'fecalta_min'               : ('fecalta', 'min'),\n        'actividad_vigente_flag'    : ('fecbaja', lambda x: int(x.isna().count() > 0)),        \n        'actividad_finalizada_flag' : ('fecbaja', lambda x: int(x.count() > 0)),       \n     }\n    \n    df1 = df.groupby(['key_value']).agg(**agg_key)\n    df1['actividad_count'] = df1.iloc[:, 6:14].sum(axis=1)\n    \n#     df2 = pd.crosstab(df.key_value, df.estadotributo).add_prefix('estadotributo_')\n#     df3 = pd.crosstab(df.key_value, df.ciiu).add_prefix('ciiu_')\n\n#     df = df1.join(df2).join(df3)\n    return df1","11e9b77d":"train = train.join(pre_sunat(sunat_train))\ntest = test.join(pre_sunat(sunat_test))","eb28186f":"del sunat_train, sunat_test\ngc.collect()","9ebbbb34":"train, test = keep_matching_cols(train, test)","88c951c9":"se_train = pd.read_csv(\"\/kaggle\/input\/interbank20\/se_train.csv\", index_col=\"key_value\")\nse_test = pd.read_csv(\"\/kaggle\/input\/interbank20\/se_test.csv\", index_col=\"key_value\")\ncenso_train = pd.read_csv(\"\/kaggle\/input\/interbank20\/censo_train.csv\", index_col=\"key_value\")\ncenso_test = pd.read_csv(\"\/kaggle\/input\/interbank20\/censo_test.csv\", index_col=\"key_value\")","2d13b4aa":"se_train.drop(columns=['cod_ubi'], inplace=True)\nse_test.drop(columns=['cod_ubi'], inplace=True)","8f675070":"train = train.join(se_train).join(censo_train)\ntest = test.join(se_test).join(censo_test)","9addfe57":"del se_train, se_test, censo_train, censo_test\ngc.collect()","a426554e":"print('Train Columns:', len(set(train.columns)), '- Test Columns:', len(set(test.columns)))","0d033c32":"train.to_csv('train-v20.gz', compression = 'gzip')\ntest.to_csv('test-v20.gz', compression = 'gzip')","14132f93":"### Genero Output","ae03c02d":"### Incluir SE & Censo","18f6af40":"### Pre-Procesamiento SUNAT","8d6f20ad":"### V19: RCC (team + rafa) + SE + CENSO (team v2)","aa8bd98a":"### Pre-Procesamiento RCC"}}