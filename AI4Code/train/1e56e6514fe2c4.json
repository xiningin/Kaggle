{"cell_type":{"f73527a6":"code","0224e419":"code","bc8e9900":"code","f070cb53":"code","34372d29":"code","f5d615c3":"code","025b1928":"code","84fac8f2":"code","88f410de":"code","a06bb53a":"code","bcea53e9":"markdown","e8904281":"markdown","85ef2e2f":"markdown","379f8c70":"markdown"},"source":{"f73527a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0224e419":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\nX_full = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv', index_col='Id')\nX_test_full = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv', index_col='Id')\n\n# Remove rows with missing target, separate target from predictors\nX_full.dropna(axis=0, subset=['SalePrice'], inplace=True)\ny = X_full.SalePrice\nX_full.drop(['SalePrice'], axis=1, inplace=True)\n\n# Break off validation set from training data\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X_full, y, \n                                                                train_size=0.8, test_size=0.2,\n                                                                random_state=0)\n\n# \"Cardinality\" means the number of unique values in a column\n# Select categorical columns with relatively low cardinality (convenient but arbitrary)\ncategorical_cols = [cname for cname in X_train_full.columns if\n                    X_train_full[cname].nunique() < 10 and \n                    X_train_full[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in X_train_full.columns if \n                X_train_full[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","bc8e9900":"X_train.head()","f070cb53":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom xgboost import XGBRegressor\n\n# Preprocessing for numerical data\nnumerical_transformer = SimpleImputer(strategy='constant')\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])","34372d29":"from sklearn.model_selection import cross_val_score\ndef get_score(n_estimators):\n    \"\"\"Return the average MAE over 3 CV folds of random forest model.\n    \n    Keyword argument:\n    n_estimators -- the number of trees in the forest\n    \"\"\"\n    my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', XGBRegressor(random_state=0, learning_rate = 0.05, n_estimators = n_estimators))\n                             ])\n    scores = -1 * cross_val_score(my_pipeline, X_train, y_train,\n                              cv=3,\n                              scoring='neg_mean_absolute_error')\n    #print(n_estimators, ' : ',scores.mean())\n    return scores.mean()\n","f5d615c3":"results = dict()\nfor est in range(500,600,10):\n    results[est] = get_score(est)","025b1928":"best_estimator = min(results, key=results.get)\nprint('Best estimator is', best_estimator, 'with MAE =', results[min(results, key=results.get)])","84fac8f2":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.plot(results.keys(), results.values())\nplt.show()","88f410de":"# Bundle preprocessing and modeling code in a pipeline\nmy_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n                              ('model', XGBRegressor(random_state=0, learning_rate = 0.05, n_estimators = best_estimator))\n                             ])\n\n# Preprocessing of training data, fit model \nmy_pipeline.fit(X_train, y_train)\n\n# Preprocessing of validation data, get predictions\npreds = my_pipeline.predict(X_valid)\n\nfrom sklearn.metrics import mean_absolute_error\n# Evaluate the model\nscore = mean_absolute_error(y_valid, preds)\nprint('MAE:', score)","a06bb53a":"preds_test = my_pipeline.predict(X_test)\n\noutput = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","bcea53e9":"2. **Define Pipeline**","e8904281":"1. **Define preprocessors**","85ef2e2f":"3. **Iterate and find the tree size that gives least MAE**","379f8c70":"4. **Build final pipeline based on best fit parameters identified above**"}}