{"cell_type":{"29722850":"code","c2da656b":"code","9b763d49":"code","791fd718":"code","5e6dd274":"code","32c2111c":"code","3b092a16":"code","2437f54e":"code","3230d6e4":"code","3ecb0f56":"code","dafe79e5":"code","03381bb8":"markdown","1cfcf16b":"markdown","8b563743":"markdown","51660fa3":"markdown","52b12a61":"markdown","f0842327":"markdown","3d620b27":"markdown","c0381245":"markdown","e41f870f":"markdown"},"source":{"29722850":"import numpy as np\nimport pandas as pd\n\ndata = {'units': [1,2,3,4,5,6,7,8,9],\n        'tens':['10','20','30','40','50','60','70','80','90'],\n        'hundreds': [100.0,200.0,300.0,400.0,500.0,600.0,700.0,800.0,900.0]\n       }\ndict = {1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine'}\n\ndf = pd.DataFrame(data)\ndf","c2da656b":"# Add a new column for the units in words and use the dict to map it from the units columns\n# Here we use a dictionary to may the 'units' column to its value in words and create the \n# 'units_in_words' column\ndf['units_in_words']=df['units'].map(dict)\ndf","9b763d49":"# Use a function in map to get the length of the 'units_in_words'\n# Here we are using the in-built function len, but user defined functsions can also be used\ndf['len_units_in_words']=df['units_in_words'].map(len)\ndf","791fd718":"# Can we use a dictionary to map a column?\n# Below line of code throws as error\n# df['words'] = df['units'].apply(dict) ","5e6dd274":"# Apply can only use a function\n# We use a lambda function and apply it to the 'units' columns to create the 'squares' column\ndf['squares']=df['units'].apply(lambda x: x**2)\ndf","32c2111c":"# Let's use this to add the units and hundres columns\n\ndef sum_up(x): # Note only one elemnt is passed. This may be list\/array\n    return (x[0] + x[1])\n\ndef add_up(x1, x2): # Try to pass two elments and add them\n    return (x1 + x2)\n\n# Here we apply the sum_up function on the two columns 'units' and 'hundreds' \n# and since the action if column wise axis passed as 1\ndf['units_plus_hundreds']=df[['units','hundreds']].apply(sum_up,axis=1)\nprint(df)\n\n# This throws an error\n# df['units_plus_hundreds']=df[['units','hundreds']].apply(add_up,axis=1)\n# print(df)\n","3b092a16":"# Here we use axis=0 and apply the function sum to the columns 'units' and 'hundreds'\ndf[['units','hundreds']].apply(sum, axis=0)","2437f54e":"# Check the data types before using applymap\ndf.dtypes","3230d6e4":"# Now let's convert the hundreds and unit_plus_hyndreds fields from float to int\ndf[['hundreds','units_plus_hundreds']] = df[['hundreds','units_plus_hundreds']].applymap(int)\ndf.dtypes","3ecb0f56":"# This will throw an error\n# df['words'] = df[['len_units_in_words']].applymap(dict)\n# df","dafe79e5":"# Take sqrt of the squares columns\ndf['sqrt'] = df[['squares']].applymap(np.sqrt)\ndf","03381bb8":"#### Hope these examples have helped in understanding Apply, Map and Applymap and their differences","1cfcf16b":"#### Apply can also be used with a DataFrame. \n#### In such a case it takes either the whole row or the columns as an unit. Hence, axis parameter needs to be passed to it to indicate whether apply needs to work on rows or columns\n\n","8b563743":"### <i><b>Apply<\/b><\/i> : works on both - Series as well as DataFrames\n***Note: Only a function can be used with Apply; Dictionary cannot be used***","51660fa3":"#### Applymap cannot be used to do a mapping using dictionary","52b12a61":"#### Let' use apply on a Series","f0842327":"> ### <b><i>Map<\/i><\/b>: Works only on Series and can be used to map every elemnt of the series by a <i>function<\/i> or by a <i>dictionary<\/i>","3d620b27":"# Apply, Map and Applymap\n### A simple explanation with examples to illustrate the use and differences","c0381245":"### <i><b>Applymap<\/b><\/i> : works only on DataFrame, but unlike Apply it works on each element and hence does not need axis as a parameter","e41f870f":"#### Load libraries and create data to be used"}}