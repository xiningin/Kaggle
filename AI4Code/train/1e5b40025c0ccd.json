{"cell_type":{"04eca478":"code","392d4960":"code","c5a780c3":"code","50eb4544":"code","8895f68e":"code","fc3c82f7":"code","dd0ded77":"code","868786ef":"code","d0749925":"code","6073dfd1":"code","f715431c":"code","d24af3c4":"code","0e645233":"code","39db544b":"code","5732863e":"code","b3f8bda2":"code","a4e966ea":"code","bf9146e3":"code","ee18941a":"code","4a748771":"code","21320103":"code","f38d4fa6":"code","68efa90d":"code","4c71aa0a":"code","40c05a2e":"code","724db4ee":"code","54bacaed":"code","a5b1003f":"code","05c300c9":"code","551093d0":"code","bc499d55":"code","48981a6a":"code","659362f3":"code","d1a40f1b":"code","71f71f87":"code","1186c2b3":"code","15beed54":"code","dd9fd4d7":"code","c59044ca":"code","a8a91d3e":"code","13c3081d":"code","4ff3b2d3":"code","fbd33e3d":"code","13097745":"code","4cdbf657":"code","781c3f68":"code","ac424b42":"markdown","f22ea22b":"markdown","c0e020ae":"markdown"},"source":{"04eca478":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","392d4960":"# train = pd.read_csv(\"\/kaggle\/input\/omletcomments\/train.csv\")\n# train = pd.read_csv(\"\/kaggle\/input\/omletcomments1\/train.csv\")\ntrain = pd.read_json('\/kaggle\/input\/jwtdfiles\/train.jsonl', orient='records', lines=True)","c5a780c3":"train.shape","50eb4544":"# !pip install transformers\n!pip install pytorch_lightning==0.8.1","8895f68e":"import argparse\nimport glob\nimport os\nimport json\nimport time\nimport logging\nimport random\nimport re\nfrom itertools import chain\nfrom string import punctuation\n\nimport nltk\nnltk.download('punkt')\nfrom nltk.tokenize import sent_tokenize\n\nimport pandas as pd\nimport numpy as np\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nimport pytorch_lightning as pl\n","fc3c82f7":"train.head()","dd0ded77":"train.shape","868786ef":"pl.__version__","d0749925":"pip install transformers==4.0.0rc1 --use-feature=2020-resolver","6073dfd1":"from transformers import (\n    AdamW,\n    MT5ForConditionalGeneration,\n    AutoTokenizer,\n    get_linear_schedule_with_warmup\n)","f715431c":"def set_seed(seed):\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    if torch.cuda.is_available():\n        torch.cuda.manual_seed_all(seed)\n\nset_seed(42)","d24af3c4":"import pytorch_lightning as pl\n","0e645233":"class T5FineTuner(pl.LightningModule):\n    def __init__(self, hparams):\n        super(T5FineTuner, self).__init__()\n        self.hparams = hparams\n\n        self.model = MT5ForConditionalGeneration.from_pretrained(hparams.model_name_or_path)\n        self.tokenizer = AutoTokenizer.from_pretrained(hparams.tokenizer_name_or_path)\n\n    def is_logger(self):\n        return True\n\n    def forward(\n            self, input_ids, attention_mask=None, decoder_input_ids=None, decoder_attention_mask=None, labels=None\n    ):\n        return self.model(\n            input_ids,\n            attention_mask=attention_mask,\n            decoder_input_ids=decoder_input_ids,\n            decoder_attention_mask=decoder_attention_mask,\n            labels=labels,\n        )\n\n    def _step(self, batch):\n        labels = batch[\"target_ids\"]\n        labels[labels[:, :] == self.tokenizer.pad_token_id] = -100\n\n        outputs = self(\n            input_ids=batch[\"source_ids\"],\n            attention_mask=batch[\"source_mask\"],\n            labels=labels,\n            decoder_attention_mask=batch['target_mask']\n        )\n\n        loss = outputs[0]\n\n        return loss\n\n    def training_step(self, batch, batch_idx):\n        loss = self._step(batch)\n\n        tensorboard_logs = {\"train_loss\": loss}\n        return {\"loss\": loss, \"log\": tensorboard_logs}\n\n    def training_epoch_end(self, outputs):\n        avg_train_loss = torch.stack([x[\"loss\"] for x in outputs]).mean()\n        tensorboard_logs = {\"avg_train_loss\": avg_train_loss}\n        return {\"avg_train_loss\": avg_train_loss, \"log\": tensorboard_logs, 'progress_bar': tensorboard_logs}\n\n    def validation_step(self, batch, batch_idx):\n        loss = self._step(batch)\n        return {\"val_loss\": loss}\n\n    def validation_epoch_end(self, outputs):\n        avg_loss = torch.stack([x[\"val_loss\"] for x in outputs]).mean()\n        tensorboard_logs = {\"val_loss\": avg_loss}\n        return {\"avg_val_loss\": avg_loss, \"log\": tensorboard_logs, 'progress_bar': tensorboard_logs}\n\n    \n    \n    \n    def test_step(self, batch, batch_idx):\n        loss = self._step(batch)\n        return {\"test_loss\": loss}\n\n    def test_epoch_end(self, outputs):\n        avg_loss = torch.stack([x[\"test_loss\"] for x in outputs]).mean()\n        tensorboard_logs = {\"test_loss\": avg_loss}\n        return {\"avg_test_loss\": avg_loss, \"log\": tensorboard_logs, 'progress_bar': tensorboard_logs}\n\n    \n    \n    \n    def configure_optimizers(self):\n        \"Prepare optimizer and schedule (linear warmup and decay)\"\n\n        model = self.model\n        no_decay = [\"bias\", \"LayerNorm.weight\"]\n        optimizer_grouped_parameters = [\n            {\n                \"params\": [p for n, p in model.named_parameters() if not any(nd in n for nd in no_decay)],\n                \"weight_decay\": self.hparams.weight_decay,\n            },\n            {\n                \"params\": [p for n, p in model.named_parameters() if any(nd in n for nd in no_decay)],\n                \"weight_decay\": 0.0,\n            },\n        ]\n        optimizer = AdamW(optimizer_grouped_parameters, lr=self.hparams.learning_rate, eps=self.hparams.adam_epsilon)\n        self.opt = optimizer\n        return [optimizer]\n\n    def optimizer_step(self, epoch, batch_idx, optimizer, optimizer_idx, second_order_closure=None):\n        if self.trainer.use_tpu:\n            xm.optimizer_step(optimizer)\n        else:\n            optimizer.step()\n        optimizer.zero_grad()\n        self.lr_scheduler.step()\n\n    def get_tqdm_dict(self):\n        tqdm_dict = {\"loss\": \"{:.3f}\".format(self.trainer.avg_loss), \"lr\": self.lr_scheduler.get_last_lr()[-1]}\n\n        return tqdm_dict\n\n    def train_dataloader(self):\n        train_dataset = get_dataset(tokenizer=self.tokenizer, type_path=\"train\", args=self.hparams)\n        dataloader = DataLoader(train_dataset, batch_size=self.hparams.train_batch_size, drop_last=True, shuffle=True,\n                                num_workers=4)\n        t_total = (\n                (len(dataloader.dataset) \/\/ (self.hparams.train_batch_size * max(1, self.hparams.n_gpu)))\n                \/\/ self.hparams.gradient_accumulation_steps\n                * float(self.hparams.num_train_epochs)\n        )\n        scheduler = get_linear_schedule_with_warmup(\n            self.opt, num_warmup_steps=self.hparams.warmup_steps, num_training_steps=t_total\n        )\n        self.lr_scheduler = scheduler\n        return dataloader\n\n    def val_dataloader(self):\n#         val_dataset = get_dataset(tokenizer=self.tokenizer, type_path=\"valid\", args=self.hparams)\n        val_dataset = get_dataset(tokenizer=self.tokenizer, type_path=\"test\", args=self.hparams)\n        return DataLoader(val_dataset, batch_size=self.hparams.eval_batch_size, num_workers=4)\n\n    def test_dataloader(self):\n#         test_dataset = get_dataset(tokenizer=self.tokenizer, type_path=\"valid\", args=self.hparams)\n        test_dataset = get_dataset(tokenizer=self.tokenizer, type_path=\"test\", args=self.hparams)\n        return DataLoader(test_dataset, batch_size=self.hparams.eval_batch_size, num_workers=4)\n","39db544b":"logger = logging.getLogger(__name__)\n\nclass LoggingCallback(pl.Callback):\n        def on_validation_end(self, trainer, pl_module):\n            logger.info(\"***** Validation results *****\")\n            if pl_module.is_logger():\n                  metrics = trainer.callback_metrics\n                  # Log results\n                  for key in sorted(metrics):\n                    if key not in [\"log\", \"progress_bar\"]:\n                      logger.info(\"{} = {}\\n\".format(key, str(metrics[key])))\n\n        def on_test_end(self, trainer, pl_module):\n            logger.info(\"***** Test results *****\")\n\n            if pl_module.is_logger():\n                metrics = trainer.callback_metrics\n\n                  # Log and save results to file\n                output_test_results_file = os.path.join(pl_module.hparams.output_dir, \"test_results.txt\")\n                with open(output_test_results_file, \"w\") as writer:\n                    for key in sorted(metrics):\n                          if key not in [\"log\", \"progress_bar\"]:\n                            logger.info(\"{} = {}\\n\".format(key, str(metrics[key])))\n                            writer.write(\"{} = {}\\n\".format(key, str(metrics[key])))","5732863e":"args_dict = dict(\n    data_dir=\"\", # path for data files\n    output_dir=\"\", # path to save the checkpoints\n#     model_name_or_path='google\/mt5-small',\n#     tokenizer_name_or_path='google\/mt5-small',\n    model_name_or_path='google\/mt5-base',\n    tokenizer_name_or_path='google\/mt5-base',\n    max_seq_length=512,\n    learning_rate=3e-4,\n    weight_decay=0.0,\n    adam_epsilon=1e-8,\n    warmup_steps=0,\n#     train_batch_size=32,\n#     eval_batch_size=32,\n    train_batch_size=4,\n    eval_batch_size=4,\n    num_train_epochs=2,\n    gradient_accumulation_steps=64,\n    n_gpu=1,\n    early_stop_callback=False,\n    fp_16=False, # if you want to enable 16-bit training then install apex and set this to true\n    opt_level='O1', # you can find out more on optimisation levels here https:\/\/nvidia.github.io\/apex\/amp.html#opt-levels-and-properties\n    max_grad_norm=1.0, # if you enable 16-bit training then set this to a sensible value, 0.5 is a good default\n    seed=42,\n)","b3f8bda2":"!ls","a4e966ea":"!ls ..\/input\/","bf9146e3":"# train_path = \"..\/input\/omletcomments\/train.csv\"\n# val_path = \"..\/input\/omletcomments\/valid.csv\"\ntrain_path = \"..\/input\/jwtdfiles\/train.jsonl\"\nval_path = \"..\/input\/jwtdfiles\/test.jsonl\"\n\n# train = pd.read_csv(train_path)\ntrain = pd.read_json(train_path, orient='records', lines=True)\nprint (train.head())\n\n# tokenizer = AutoTokenizer.from_pretrained('google\/mt5-small')","ee18941a":"# df = pd.read_csv(train_path)\ndf = pd.read_json(train_path, orient='records', lines=True)\n\ndf.columns","4a748771":"df.head()","21320103":"class CommentDataset(Dataset):\n    def __init__(self, tokenizer, data_dir, type_path, max_len=30):\n#         self.path = os.path.join(data_dir, type_path + '.csv')\n        self.path = os.path.join(data_dir, type_path + '.jsonl')\n\n#         self.title = 'Title'\n#         self.comment = 'Comment'\n#         self.category = 'Category'\n#         self.data = pd.read_csv(self.path)\n        self.category = 'category'\n        self.pre_text = 'pre_text'\n        self.post_text = 'post_text'\n        self.data = pd.read_json(self.path, orient='record', lines=True)\n        self.max_len = max_len\n        self.tokenizer = tokenizer\n        self.inputs = []\n        self.targets = []\n\n        self._build()\n\n    def __len__(self):\n        return len(self.inputs)\n\n    def __getitem__(self, index):\n        source_ids = self.inputs[index][\"input_ids\"].squeeze()\n        target_ids = self.targets[index][\"input_ids\"].squeeze()\n\n        src_mask = self.inputs[index][\"attention_mask\"].squeeze()  # might need to squeeze\n        target_mask = self.targets[index][\"attention_mask\"].squeeze()  # might need to squeeze\n\n        return {\"source_ids\": source_ids, \"source_mask\": src_mask, \"target_ids\": target_ids, \"target_mask\": target_mask}\n\n    def _build(self):\n        for idx in range(len(self.data)):\n#             input_text_1,input_text_2,output_text= self.data.loc[idx, self.title],self.data.loc[idx, self.category],self.data.loc[idx, self.comment]\n            input_text_1,input_text_2,output_text= self.data.loc[idx, self.pre_text],self.data.loc[idx, self.category],self.data.loc[idx, self.post_text]\n   \n#             input_ = \"Title: %s Category: %s\" % (input_text_1,input_text_2)\n            input_ = \"pre_text: %s Category: %s\" % (input_text_1,input_text_2)\n            target = \"%s\" %(output_text)\n\n            # tokenize inputs\n            tokenized_inputs = self.tokenizer.batch_encode_plus(\n                [input_], max_length=30, pad_to_max_length=True, return_tensors=\"pt\"\n            )\n            # tokenize targets\n            tokenized_targets = self.tokenizer.batch_encode_plus(\n                [target], max_length=30, pad_to_max_length=True, return_tensors=\"pt\"\n            )\n\n            self.inputs.append(tokenized_inputs)\n            self.targets.append(tokenized_targets)","f38d4fa6":"# tokenizer = AutoTokenizer.from_pretrained('google\/mt5-large')\ntokenizer = AutoTokenizer.from_pretrained('google\/mt5-base')","68efa90d":"# dataset = CommentDataset(tokenizer, '..\/input\/omletcomments', 'valid', 30)\ndataset = CommentDataset(tokenizer, '..\/input\/jwtdfiles', 'test', 30)\n\nprint(\"Val dataset: \",len(dataset))","4c71aa0a":"data = dataset[20]\nprint(tokenizer.decode(data['source_ids']))\nprint(tokenizer.decode(data['target_ids']))","40c05a2e":"# args_dict.update({'data_dir': '..\/input\/omletcomments', 'output_dir': '\/kaggle\/working\/result', 'num_train_epochs':1,'max_seq_length':30})\nargs_dict.update({'data_dir': '..\/input\/jwtdfiles', 'output_dir': '\/kaggle\/working\/result', 'num_train_epochs':10,'max_seq_length':30})\nargs = argparse.Namespace(**args_dict)\nprint(args_dict)","724db4ee":"!mkdir result\n!ls\n!pwd","54bacaed":"checkpoint_callback = pl.callbacks.ModelCheckpoint(\n    \n    period =1,filepath=args.output_dir, prefix=\"checkpoint\", monitor=\"val_loss\", mode=\"min\", save_top_k=1\n)\ntrain_params = dict(\n    accumulate_grad_batches=args.gradient_accumulation_steps,\n    gpus=args.n_gpu,\n    max_epochs=args.num_train_epochs,\n    early_stop_callback=False,\n    precision= 16 if args.fp_16 else 32,\n    amp_level=args.opt_level,\n    gradient_clip_val=args.max_grad_norm,\n    checkpoint_callback=checkpoint_callback,\n    callbacks=[LoggingCallback()],\n)\n\n","a5b1003f":"def get_dataset(tokenizer, type_path, args):\n    return CommentDataset(tokenizer=tokenizer, data_dir=args.data_dir, type_path=type_path,  max_len=args.max_seq_length)","05c300c9":"print (\"Initialize model\")\nmodel = T5FineTuner(args)\n\ntrainer = pl.Trainer(**train_params)","551093d0":"print (\" Training model\")\ntrainer.fit(model)\n\nprint (\"training finished\")\n\nprint (\"Saving model\")\nmodel.model.save_pretrained(\"\/kaggle\/working\/result\")\ntokenizer.save_pretrained(\"\/kaggle\/working\/result\")\n\nprint (\"Saved model\")","bc499d55":"!ls ","48981a6a":"1+1","659362f3":"!pwd","d1a40f1b":"# run test set\nresult = trainer.test(model)\nprint(result)\n","71f71f87":"!cp -r \/kaggle\/working\/result\/pytorch_model.bin \/kaggle\/working\/\n# !cp -r \/kaggle\/working\/result\/config.json \/kaggle\/working\/\n!cp -r \/kaggle\/working\/result\/*.json \/kaggle\/working\/","1186c2b3":"!ls\n","15beed54":"# !rm -rf result","dd9fd4d7":"!ls","c59044ca":"!pwd","a8a91d3e":"from transformers import MT5ForConditionalGeneration, AutoTokenizer\nmodel = MT5ForConditionalGeneration.from_pretrained(\"\/kaggle\/working\")\n","13c3081d":"# \u4fdd\u5b58\u3057\u305ftokenizer\u3092\u30ed\u30fc\u30c9\nfrom transformers import T5Tokenizer\ntokenizer = T5Tokenizer.from_pretrained(\"\/kaggle\/working\/result\")","4ff3b2d3":"# article = '''Hindi Title:10 Best Places to Visit in India - Travel Video'''\n# article = '''\u30ad\u30e7\u30a6\u30ea\u30e5\u30a6\u30b8\u30e3\u30fc\u521d\u671f\u30e1\u30f3\u30d0\u30fc\u306e\u6301\u30641\u301c5\u756a\uff08\u30ac\u30d6\u30c6\u30a3\u30e9\u30fb\u30d1\u30e9\u30b5\u30ac\u30f3\u30fb\u30b9\u30c6\u30b4\u30c3\u30c1\u30fb\u30b6\u30af\u30c8\u30eb\u30fb\u30c9\u30ea\u30b1\u30e9\uff09\u306e\u7363\u96fb\u6c60\u304c\u878d\u5408\u3057\u305f\u751f\u307e\u308c\u305f\u7279\u6b8a\u7363\u96fb\u6c60\u3002'''\narticle = '''\u5927\u67c4\u3067\u7b4b\u9aa8\u9686\u3005\u3068\u3057\u305f\u8001\u4eba\u96e2\u308c\u3057\u305f\u8089\u4f53\u306e\u6301\u3061\u4e3b\u3067\u3042\u308a\u30015kg\u306e\u7c73\u888b\u3092\u4e21\u80a9\u306b6\u888b\u3065\u3064\u3001\u5408\u8a0860kg\u3092\u62c5\u3044\u3067\u904b\u3076\u4f53\u529b\u3092\u6301\u3063\u3066\u3044\u308b\u3002'''\n# article = '''\u826f\u8cea\u306a\u8a18\u4e8b\u306b\u9078\u51fa\u6e08\u307f\u306e\u4ed6\u306e\u795e\u793e\u8a18\u4e8b\u3068\u540c\u69d8\u306e\u69cb\u6210\u30fb\u8a18\u8ff0\u91cf\u3067\u4e00\u5b9a\u306e\u7db2\u7f85\u6027\u304c\u3042\u308a\u3001\u8af8\u8aac\u3042\u308b\u70b9\u306b\u3064\u3044\u3066\u3082\u51fa\u5178\u306e\u5448\u793a\u3057\u3066\u89e3\u8aac\u3055\u308c\u3066\u304a\u308a\u3001\u826f\u8cea\u306a\u8a18\u4e8b\u306e\u76ee\u5b89\u3092\u6e80\u305f\u3059\u3082\u306e\u3068\u8003\u3048\u307e\u3059\u3002'''","fbd33e3d":"def top_kp(inp_ids, attn_mask):\n# def top_kp(inp_ids):\n    \n    ''' To generate multiple output for same input we are using top-k encoding\n    '''\n    topkp_output = model.generate(input_ids=inp_ids,\n                                       attention_mask=attn_mask,\n                                       do_sample=True,\n#                                        max_length=30,\n                                       max_length=100,\n                                       top_p=0.84,\n                                       top_k=80,\n#                                        num_return_sequences=10,\n                                       num_return_sequences=1,\n                                       min_length=3,\n                                       temperature=0.9,\n                                       repetition_penalty=1.2,\n                                       length_penalty=1.5,\n                                       no_repeat_ngram_size=2,\n                                       )\n    Questions = [tokenizer.decode(out, skip_special_tokens=True, clean_up_tokenization_spaces=True) for out in\n                 topkp_output]\n    return [Question.strip().capitalize() for Question in Questions]\n\ndef t5_topkp(input_text):\n    '''\n    \n    '''\n#     con = \"Hindi Title: %s\" % (input_text)\n    con = \"pre_text: %s\" % (input_text)\n    encoding = tokenizer.encode_plus(con, return_tensors=\"pt\")\n    input_ids, attention_masks = encoding[\"input_ids\"].to(device), encoding[\"attention_mask\"].to(device)\n    output = top_kp(input_ids, attention_masks)\n#     output = top_kp(input_ids)\n    return output\n","13097745":"import torch\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n# print (\"device \",device)\nmodel = model.to(device)","4cdbf657":"start = time.time()\n\nprint(article)\noutput = t5_topkp(article)\n# print (\"Topkp decoding:: \\n \",output)\nprint (\"Topkp decoding:: \\n \",output[0])\nend = time.time()\nprint (\"\\nTime elapsed \", end-start)\nprint (\"\\n\")","781c3f68":"!ls","ac424b42":"We'll be pytorch-lightning library for training. Most of the below code is adapted from here https:\/\/github.com\/huggingface\/transformers\/blob\/master\/examples\/lightning_base.py\n\nThe trainer is generic and can be used for any text-2-text task. You'll just need to change the dataset. Rest of the code will stay unchanged for all the tasks.\n\nThis is the most intresting and powrfull thing about the text-2-text format. You can fine-tune the model on variety of NLP tasks by just formulating the problem in text-2-text setting. No need to change hyperparameters, learning rate, optimizer or loss function. Just plug in your dataset and you are ready to go!","f22ea22b":"This notebook is an example on how to fine tune mT5 model with Higgingface Transformers to solve multilingual task in 101 lanaguges. This notebook especially takes the problem of question generation in hindi lanagues","c0e020ae":"Let's define the hyperparameters and other arguments. You can overide this dict for specific task as needed. While in most of cases you'll only need to change the data_dirand output_dir.\n\nHere the batch size is 8 and gradient_accumulation_steps are 8 so the effective batch size is 64"}}