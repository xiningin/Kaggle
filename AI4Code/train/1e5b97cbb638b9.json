{"cell_type":{"7a2e8ea8":"code","4a9222ba":"code","65745efc":"code","88deab55":"code","565287ac":"code","f3531be4":"code","501b89a2":"code","11ffa50b":"markdown"},"source":{"7a2e8ea8":"import os\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom tensorflow.keras.preprocessing.image import load_img","4a9222ba":"postive_fire_path = '\/kaggle\/input\/fire-dataset\/fire_dataset\/fire_images'\nnegative_fire_path = '\/kaggle\/input\/fire-dataset\/fire_dataset\/non_fire_images'","65745efc":"def images_to_array(data_dir, img_size=(480,640, 3)):\n    '''\n    1- Read image samples from certain directory.\n    2- Resize and Stack them into one big numpy array.\n    3- shuffle the data.\n    '''\n    image_names = os.listdir(data_dir)\n    data_size = len(image_names)\n    #initailize data arrays.\n    X = np.zeros([data_size, img_size[0], img_size[1], img_size[2]], dtype=np.uint8)\n    #read data.\n    for i in tqdm(range(data_size)):\n        image_name = image_names[i]\n        img_dir = os.path.join(data_dir, image_name)\n        img_pixels = load_img(img_dir, color_mode='rgb', target_size=img_size)\n        X[i] = img_pixels\n        \n    #shuffle    \n    ind = np.random.permutation(data_size)\n    X = X[ind]\n    \n    print('Ouptut Data Size: ', X.shape)\n    return X","88deab55":"postive_fire_imgs = images_to_array(postive_fire_path)\nnegative_fire_imgs = images_to_array(negative_fire_path)","565287ac":"samples = np.concatenate((postive_fire_imgs[:3], negative_fire_imgs[:3]), axis=0) \n\nf, ax = plt.subplots(2, 3, figsize=(20,11))\nf.subplots_adjust(hspace = .05, wspace=.05)\nfor i, img in enumerate(samples):\n    ax[i\/\/3, i%3].imshow(img)\n    ax[i\/\/3, i%3].axis('off')\n    if i<3:\n        ax[i\/\/3, i%3].title.set_text('Postive')\n    else:\n        ax[i\/\/3, i%3].title.set_text('Negative')\nplt.show() ","f3531be4":"postive_labels = np.ones((len(postive_fire_imgs), 1))\nnegative_labels = np.zeros((len(negative_fire_imgs), 1))\nX = np.concatenate((postive_fire_imgs, negative_fire_imgs))\ny = np.concatenate((postive_labels, negative_labels))\n#shuffle\nind = np.random.permutation(999)\nX = X[ind]\ny = y[ind]\nprint('X Shape: ', X.shape)\nprint('y Shape: ', y.shape)","501b89a2":"samples = X[:6]\nf, ax = plt.subplots(2, 3, figsize=(20,11))\nf.subplots_adjust(hspace = .05, wspace=.05)\nfor i, img in enumerate(samples):\n    ax[i\/\/3, i%3].imshow(img)\n    ax[i\/\/3, i%3].axis('off')\n    if y[i]:\n        ax[i\/\/3, i%3].title.set_text('Postive')\n    else:\n        ax[i\/\/3, i%3].title.set_text('Negative')\nplt.show() ","11ffa50b":"* Consider evaluating by confusion matrix."}}