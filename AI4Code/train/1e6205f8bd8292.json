{"cell_type":{"797f2a75":"code","8ab269bd":"code","2d3cbb39":"code","17de5855":"code","f99c4ddc":"code","96d6ead2":"code","1ed1a200":"code","c295a766":"code","fa346a8d":"code","d55b0c4c":"code","5c16a53e":"code","7047c717":"code","328df78f":"code","767ec9f4":"code","c7fc7ede":"code","b29b28d7":"code","f7289225":"markdown"},"source":{"797f2a75":"#IMPORT REQUIRED LIBRARIES:\n\nimport numpy as np\nimport pandas as pd\nimport os\nfrom re import search\nimport shutil\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nimport cv2\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense,Activation,Flatten, Conv2D, MaxPooling2D","8ab269bd":"#IMAGE PATH & DATAFRAME:\n\nTRAIN_PATH = \"..\/input\/plant-pathology-2021-fgvc8\/train_images\"\ntrain_df = pd.read_csv(\"..\/input\/plant-pathology-2021-fgvc8\/train.csv\")","2d3cbb39":"count_dict = train_df.labels.value_counts()\nclasses = list(count_dict.index)\nclasses_count = list(count_dict.values)\nprint(\"Number of unique labels: \",len(classes))\nprint(\"-------------------------------------------\")\ntrain_df.head()","17de5855":"plt.figure(figsize=(35,15))\nplt.bar(classes,classes_count)\nplt.title(\"Number of instances per class\",fontweight=\"bold\",fontsize=40)\nplt.xlabel(\"Classes\",fontsize = 30)\nplt.xticks(rotation=20,fontsize = 20,fontweight = \"bold\")\nplt.xticks(fontsize = 20,fontweight = \"bold\")\nplt.ylabel(\"Count\",fontsize=30)\nplt.show()","f99c4ddc":"# Use the Image Data Generator to import the images from the dataset\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale = 1\/255.,\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    validation_split = 0.2,\n    zoom_range = 0.2,\n    shear_range = 0.2,\n    vertical_flip = False)\n\n\nHEIGHT = 124\nWIDTH=124\nSEED = 143\nBATCH_SIZE=32\ntrain_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = TRAIN_PATH,\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (HEIGHT,WIDTH),\n    class_mode='categorical',\n    batch_size = BATCH_SIZE,\n    subset = \"training\",\n    shuffle = True,\n    seed = SEED,\n    validate_filenames = False\n)\n\n\nval_ds = train_datagen.flow_from_dataframe(\n    train_df,\n    directory = TRAIN_PATH,\n    x_col = \"image\",\n    y_col = \"labels\",\n    target_size = (HEIGHT,WIDTH),\n    class_mode='categorical',\n    batch_size = BATCH_SIZE,\n    subset = \"validation\",\n    shuffle = True,\n    seed = SEED,\n    validate_filenames = False\n)","96d6ead2":"model=Sequential()\nmodel.add(Conv2D(64,(3,3),activation='relu',padding='same',input_shape=(HEIGHT,WIDTH,3)))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Conv2D(64,(3,3),activation='relu',padding='same'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Conv2D(64,(3,3),activation='relu',padding='same'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Conv2D(128,(3,3),activation='relu',padding='same'))\nmodel.add(MaxPooling2D(2,2))\nmodel.add(Flatten())\nmodel.add(Dense(12,activation='softmax'))\n\n# Compile the Model\nmodel.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n    loss='categorical_crossentropy',\n    metrics=['accuracy'])\nmodel.summary()","1ed1a200":"\ncheckpoint=ModelCheckpoint(r'D:\\Python37\\Projects\\Foliar diseases in apple trees\\models\\apple2.h5',\n                          monitor='val_loss',\n                          mode='min',\n                          save_best_only=True,\n                          verbose=1)\nearlystop=EarlyStopping(monitor='val_loss',\n                       min_delta=0,\n                       patience=10,\n                       verbose=1,\n                       restore_best_weights=True)\n\ncallbacks=[checkpoint,earlystop]","c295a766":"model_history=model.fit_generator(train_ds,validation_data=val_ds,\n                                 epochs=10,\n                                 steps_per_epoch=train_ds.samples\/\/128,\n                                 validation_steps=val_ds.samples\/\/128,\n                                 callbacks=callbacks)","fa346a8d":"submission = pd.read_csv('\/kaggle\/input\/plant-pathology-2021-fgvc8\/sample_submission.csv')\nsubmission.head()","d55b0c4c":"test_datagen = ImageDataGenerator(\n    rescale = 1.\/255\n)\nINPUT_SIZE = (124,124,3)\ntest_generator =  test_datagen.flow_from_dataframe(\n    submission,\n    directory=\"..\/input\/plant-pathology-2021-fgvc8\/test_images\",\n    x_col='image',\n    y_col=None,\n    class_mode=None,\n    target_size=INPUT_SIZE[:2]\n)","5c16a53e":"def get_key(val):\n    for key, value in train_ds.class_indices.items():\n        if val == value:\n            return key","7047c717":"preds = model.predict(test_generator)\nprint(preds)","328df78f":"def get_preds_to_labels(preds):\n    pred_lists = []\n    for pred in preds:\n        pred_list = []\n        health = (pred>=0.4)\n        \n        # get healthy\n        if health.sum()==0:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        elif pred[2]>=0.5:\n            label = 'healthy'\n            pred_list.append(label)\n            \n        # get eles label\n        else:\n            for j, sub in enumerate(pred):\n                if sub>=0.28:\n                    label = get_key(j)\n                    pred_list.append(label)\n                               \n        pred_lists.append(' '.join(pred_list))\n    return pred_lists","767ec9f4":"preds_list = get_preds_to_labels(preds)","c7fc7ede":"submission['labels'] = preds_list\nsubmission.head()","b29b28d7":"submission.to_csv('submission.csv', index=False)","f7289225":"<span style=\"font-size:45px;\">PLANT PATHOLOGY USING CNN MODEL"}}