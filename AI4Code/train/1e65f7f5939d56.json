{"cell_type":{"b8dc9d55":"code","95ec7f32":"code","0585ebc2":"code","0958c3b8":"code","6101839d":"code","306a938f":"code","ad979bf5":"code","5f19d3c3":"code","ed87d8cc":"code","0e89d2dc":"code","36d6f966":"markdown","dfa3eb03":"markdown","f629f878":"markdown","4e9c8b30":"markdown","d8f317c3":"markdown","6fa339a4":"markdown","67015e1f":"markdown"},"source":{"b8dc9d55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95ec7f32":"# \uc804\ucc98\ub9ac & EDA\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder\n\n# \uad50\ucc28\uac80\uc99d\nfrom sklearn.model_selection import cross_val_score\n\n# \ubaa8\ub378\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom xgboost import XGBRegressor, plot_importance\n\n# \ud3c9\uac00\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score","0585ebc2":"# \ub370\uc774\ud130 \ub85c\ub4dc\nX_train = pd.read_csv(\"..\/input\/used-car-price-dataset-competition-format\/X_train.csv\", index_col=0)\nX_test = pd.read_csv(\"..\/input\/used-car-price-dataset-competition-format\/X_test.csv\", index_col=0)\ny_train = pd.read_csv(\"..\/input\/used-car-price-dataset-competition-format\/y_train.csv\", index_col=0)\ny_test = pd.read_csv(\"..\/input\/used-car-price-dataset-competition-format\/test_label\/y_test.csv\", index_col=0)\nprint(\"\ub370\uc774\ud130 \ud615\ud0dc:\",X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nX_train.head(3)","0958c3b8":"# \uacb0\uce21\uac12 \ud655\uc778\npd.concat([X_train.isna().sum().to_frame(\"train\"),X_test.isna().sum().to_frame(\"test\")],axis=1)","6101839d":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778\nfor col in X_train.select_dtypes(\"object\"):\n    print(f\"{col}: \", X_train[col].unique())","306a938f":"# \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \ub808\uc774\ube14 \uc778\ucf54\ub529\nle = LabelEncoder()\nfor col in X_train.select_dtypes(\"object\"):\n    le.fit(X_train[col].unique())\n    X_train[col] = le.transform(X_train[col])\n    X_test[col] = le.transform(X_test[col])","ad979bf5":"# \uc0c1\uad00\uad00\uacc4 (\ubc94\uc8fc\ud615 \ube7c\uae30 \uadc0\ucc2e\uc544\uc11c \ud55c\uaebc\ubc88\uc5d0 \ub123\uc74c)\nX = pd.concat([X_train, y_train], axis=1)\ncorr = X.corr()\n\n# \uc0c1\uad00\uad00\uacc4\ub97c \uc774\uc6a9\ud55c \ud788\ud2b8\ub9f5\nplt.figure(figsize=(7,7), facecolor=\"#eee\")\nplt.pcolor(corr, cmap=\"Reds\")\nplt.xticks(np.arange(len(corr))+0.5,corr.columns)\nplt.yticks(np.arange(len(corr))+0.5,corr.columns)\nplt.colorbar()\nplt.show()","5f19d3c3":"model = XGBRegressor(\n    n_estimators= 200,\n    max_depth = 4,\n    reg_alpha = 20,    # \ub77c\uc3d8\n    reg_lambda = 10,   # \ub9bf\uc9c0\n    seed = 100,\n)\nscores = cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\")\nprint(f\"5-fold \uad50\ucc28\uac80\uc99d RMSE : {np.sqrt(-np.mean(scores)):.0f}\")","ed87d8cc":"model.fit(X_train, y_train)\nplot_importance(model, importance_type=\"weight\")\nplt.show()","0e89d2dc":"pred_test = np.round(model.predict(X_test),0)\nprint(f\"\ud14c\uc2a4\ud2b8\uc14b RMSE = {np.sqrt(mean_squared_error(y_test, pred_test)):.0f}\")\nprint(f\"\ud14c\uc2a4\ud2b8\uc14b MAE = {mean_absolute_error(y_test, pred_test):.0f}\")\nr2 = r2_score(y_test,pred_test)\nprint(f\"\ud14c\uc2a4\ud2b8\uc14b R^2 = {r2:.2f}\")\nprint(f\"\ud14c\uc2a4\ud2b8\uc14b Adj R^2 : {np.mean(1-(1-r2)*(2672-1)\/(2672-9-1)):.2f}\")\nresult = pd.DataFrame(pred_test, index=X_test.index, columns=[\"price\"])\nresult.to_csv(\"result.csv\")","36d6f966":"# **XGBoosting \ud68c\uadc0\ub97c \uc774\uc6a9\ud55c \uc911\uace0\ucc28 \uac00\uaca9 \uc608\uce21\ud558\uae30**","dfa3eb03":"\uc815\ub9ac\n\n1. \uacb0\uce21\uac12 \uc5c6\uc74c\n5. \ud2b8\ub9ac\uae30\ubc18 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ub808\uc774\ube14 \uc778\ucf54\ub529\uc744 \uc9c4\ud589 \ubc0f \uc774\uc0c1\uac12 \ucc98\ub9ac \ubd88\ud544\uc694","f629f878":"# **EDA**","4e9c8b30":"# **\uc804\ucc98\ub9ac**","d8f317c3":"# **\ubaa8\ub378\ub9c1**","6fa339a4":"# **\uacb0\uacfc**","67015e1f":"# **\ub77c\uc774\ube0c\ub7ec\ub9ac**"}}