{"cell_type":{"707a2385":"code","d882b20a":"code","12f760a0":"code","c23c1bcb":"code","70ff4b4d":"code","05b9a387":"code","41b54761":"code","3caa0b2e":"code","9f383879":"code","f4c9d728":"code","966f10b4":"code","4b56733e":"code","043cc74f":"code","533fd0e0":"code","13745cc4":"code","e4dff9f1":"code","f2d303f2":"code","064cce70":"code","9eb4a719":"code","13a40c09":"code","d59b4eb4":"code","07026240":"markdown","92c48c77":"markdown","9beae757":"markdown","756a2093":"markdown"},"source":{"707a2385":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LinearRegression\nfrom scipy.stats import skew\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as st\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nfrom IPython.display import display, HTML\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\ntrain = pd.read_csv(\"..\/input\/comp_train.csv\")\ntest = pd.read_csv(\"..\/input\/comp_test.csv\")\nprint(train.shape)\ndisplay(train.head())\nprint(test.shape)\ndisplay(test.head())\n\n# Any results you write to the current directory are saved as output.","d882b20a":"numeric_features_train = list(train.select_dtypes(exclude = \n                                                  ['object', 'category']).columns)\nnumeric_features_test = list(test.select_dtypes(exclude = \n                                               ['object', 'category']).columns)\nprint(\"numeric_features_train = \", numeric_features_train)\nprint(\"Len = \", len(numeric_features_train))\nprint(\"\\nnumeric_features_test = \", numeric_features_test)\nprint(\"Len = \", len(numeric_features_test))","12f760a0":"print(train['SalePrice'].describe())\nsns.distplot(train['SalePrice'], kde = True, fit = st.norm)","c23c1bcb":"f = pd.melt(train, id_vars=[\"SalePrice\"], value_vars=numeric_features_train[1:-1])\ng = sns.FacetGrid(f, col = \"variable\", \n                  col_wrap= 2, sharex= False, sharey = False, size = 4)\ng.map(sns.distplot, \"value\", kde = True, fit = st.norm)","70ff4b4d":"train.skew()","05b9a387":"print(train.isnull().any())\nprint(test.isnull().any())","41b54761":"g = sns.FacetGrid(f, col = \"variable\", col_wrap=2, sharex=False, sharey=False,size=5)\ng.map(plt.scatter, \"value\", \"SalePrice\")","3caa0b2e":"#POP SalePrice Column\nSP = train.pop('SalePrice')","9f383879":"train.head()","f4c9d728":"#Find theta \nprint(train.iloc[:,1:].shape, np.ones((len(train), 1)).shape)\ntrain_X = np.hstack((train.iloc[:,1:],\n                       np.ones((len(train), 1))))\nSP = SP.values\nprint(train_X.shape, SP.shape)\n\n#                        train['OverallQual']**2,\n#                        train['GrLivArea']**2,\n#                        train['GarageArea']**2,\n#                        train['YearBuilt']**2,\n#                        train['1stFlrSF']**2,\n#                        train['TotRmsAbvGrd']**2,","966f10b4":"#Split Training and validation data(validation data)\nfrom sklearn.model_selection import train_test_split\ndef getTheta(r):\n    X_train, X_test , y_train, y_test = train_test_split(train_X, SP,\n                                                         test_size = 0.2,\n                                                        random_state = r)\n    #Get theta using normal equation\n    theta = np.dot(np.linalg.pinv(X_train), y_train)\n\n    #Error on train and validation data\n    print(\"Training Error =\",rmse(predictTarget(X_train, theta), y_train))\n    print(\"Validation Error = \", rmse(predictTarget(X_test, theta), y_test))\n    \n    return theta","4b56733e":"#Predict function which takes theta and X(with 1)\ndef predictTarget(x, theta):\n    return np.dot(x, theta)\n\n#Define RMSE\ndef rmse(pred, actual):\n    assert(len(pred) == len(actual))\n    return np.sqrt((((pred - actual)**2).sum())\/len(pred))","043cc74f":"#Error on train and validation data\n# print(\"Training Error =\",rmse(predictTarget(X_train, theta), y_train))\n# print(\"Validation Error = \", rmse(predictTarget(X_test, theta), y_test))","533fd0e0":"test.head()","13745cc4":"#Predict the SALEPRICE\ntest_X = np.hstack((test.iloc[:,1:],\n                       np.ones((len(test), 1))\n                   ))\n\n#                        test['OverallQual']**2,\n#                        test['GrLivArea']**2,\n#                        test['GarageArea']**2,\n#                        test['YearBuilt']**2,\n#                        test['1stFlrSF']**2,\n#                        test['TotRmsAbvGrd']**2,","e4dff9f1":"prediction = np.zeros((test_X.shape[0], 1))\nrList = [42, 3, 468, 12, 120, 130, 234, 1000, 100, 200, 1200, 5, 45, \n        49, 300, 320,980, 81, 2100, 1420, 768]\nfor r in rList:\n    y1 = predictTarget(test_X, getTheta(r))\n    print(prediction.shape)\n    prediction = np.hstack((prediction,y1.reshape(y1.shape[0], 1)))","f2d303f2":"prediction = np.sum(prediction, axis = 1)\/len(rList)","064cce70":"print(test.shape, prediction.shape)","9eb4a719":"#See characteristics of Predicted Saleprice\npd.DataFrame({'SalePrice': prediction}).describe()","13a40c09":"#Save the prediction for submission\nsub = pd.DataFrame()\nsub['Id'] = test['Id']\nsub['SalePrice'] = prediction\nsub.to_csv(\"prediction.csv\", index = False)","d59b4eb4":"sub.head()","07026240":"### If You are getting RMSE less than 42000, there is somethig wrong in your model. In other way your model in generalized.\n","92c48c77":"**TARGET VARIABLE: SALEPRICE**","9beae757":"**Numerical Features**","756a2093":"**SCATTER PLOT**"}}