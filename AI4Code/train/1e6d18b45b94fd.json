{"cell_type":{"a24148ba":"code","e4a7457e":"code","3b7bfeca":"code","871c016f":"code","d46391c5":"code","f3a74b15":"code","43ffc032":"code","001d89e3":"code","33baf480":"code","1ea71692":"code","ae16449c":"code","d2bd37a7":"code","ed5eeb4e":"code","cce628fc":"code","82a6b98a":"code","83512b9d":"code","d6430179":"code","91628bfa":"code","fad9fab1":"code","200f9478":"code","42c830a5":"code","a45d9c1c":"code","c6fea7c3":"code","f23af388":"code","082d5eb7":"code","c3d2f04a":"code","af6f36e6":"code","cdcc2c35":"code","535971af":"code","f59cbf8e":"code","5613cfff":"code","bcbdf3d7":"code","517513a6":"code","8f8196d0":"code","a7d43cbc":"code","019e9c1d":"code","088928b2":"code","c9255ed7":"code","43ca31e5":"code","be47c9e7":"code","df7c9d55":"code","8751e9d2":"code","042e63c6":"code","2432133a":"code","36dffdb1":"code","3b8a8b17":"code","121e2271":"code","230861dc":"code","b3ff8b99":"code","18bde300":"code","e58003c6":"code","0d88e6b2":"code","1b0df8ae":"code","bf048a85":"code","1ff11080":"code","50ab80f9":"code","21265c2a":"code","ea6b8972":"code","8fd9286c":"code","f51b5963":"code","a591e35e":"code","f2446ce0":"code","9ccb207c":"code","9e45b657":"code","aa866c89":"code","3970fd60":"markdown","21c9675c":"markdown","4495e99b":"markdown","4b6db6e7":"markdown","473fa917":"markdown","ef833aee":"markdown","4037afc1":"markdown","8be97c51":"markdown","795f0834":"markdown","789bdf1c":"markdown","7c224f94":"markdown","fd26b601":"markdown","416f5b7f":"markdown","0e4b579c":"markdown","b6b0b139":"markdown","016d2a72":"markdown","dc601b04":"markdown","8f71212e":"markdown","8f17e4a7":"markdown","bc58ac86":"markdown","5280c818":"markdown","d13921a7":"markdown","cc3bbc7e":"markdown","4832b43e":"markdown"},"source":{"a24148ba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4a7457e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\n\nimport warnings\nwarnings.filterwarnings('ignore')","3b7bfeca":"df_income_train = pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/train.csv\")\ndf_income_test =  pd.read_csv(\"..\/input\/costa-rican-household-poverty-prediction\/test.csv\")","871c016f":"df_income_train.head()","d46391c5":"df_income_train.info()","f3a74b15":"df_income_test.head()","43ffc032":"### List the columns for different datatypes:\nprint('Integer Type: ')\nprint(df_income_train.select_dtypes(np.int64).columns)\nprint('\\n')\nprint('Float Type: ')\nprint(df_income_train.select_dtypes(np.float64).columns)\nprint('\\n')\nprint('Object Type: ')\nprint(df_income_train.select_dtypes(np.object).columns)","001d89e3":"df_income_train.select_dtypes('int64').head()","33baf480":"#Find columns with null values\nnull_counts=df_income_train.select_dtypes('int64').isnull().sum()\nnull_counts[null_counts > 0]","1ea71692":"df_income_train.select_dtypes('float64').head()","ae16449c":"#Find columns with null values\nnull_counts=df_income_train.select_dtypes('float64').isnull().sum()\nnull_counts[null_counts > 0]","d2bd37a7":"df_income_train.select_dtypes('object').head()","ed5eeb4e":"#Find columns with null values\nnull_counts=df_income_train.select_dtypes('object').isnull().sum()\nnull_counts[null_counts > 0]","cce628fc":"mapping={'yes':1,'no':0}\n\nfor df in [df_income_train, df_income_test]:\n    df['dependency'] =df['dependency'].replace(mapping).astype(np.float64)\n    df['edjefe'] =df['edjefe'].replace(mapping).astype(np.float64)\n    df['edjefa'] =df['edjefa'].replace(mapping).astype(np.float64)\n    \ndf_income_train[['dependency','edjefe','edjefa']].describe()","82a6b98a":"data = df_income_train[df_income_train['v2a1'].isnull()].head()\n\ncolumns=['tipovivi1','tipovivi2','tipovivi3','tipovivi4','tipovivi5']\ndata[columns]","83512b9d":"# Variables indicating home ownership\nown_variables = [x for x in df_income_train if x.startswith('tipo')]\n\n\n# Plot of the home ownership variables for home missing rent payments\ndf_income_train.loc[df_income_train['v2a1'].isnull(), own_variables].sum().plot.bar(figsize = (10, 8),\n                                                                        color = 'green',\n                                                              edgecolor = 'k', linewidth = 2);\nplt.xticks([0, 1, 2, 3, 4],\n           ['Owns and Paid Off', 'Owns and Paying', 'Rented', 'Precarious', 'Other'],\n          rotation = 20)\nplt.title('Home Ownership Status for Households Missing Rent Payments', size = 18);","d6430179":"#Looking at the above data it makes sense that when the house is fully paid, there will be no monthly rent payment.\n#Lets add 0 for all the null values.\nfor df in [df_income_train, df_income_test]:\n    df['v2a1'].fillna(value=0, inplace=True)\n\ndf_income_train[['v2a1']].isnull().sum()","91628bfa":"# Heads of household### NOTE\nheads = df_income_train.loc[df_income_train['parentesco1'] == 1].copy()\nheads.groupby('v18q')['v18q1'].apply(lambda x: x.isnull().sum())","fad9fab1":"plt.figure(figsize = (8, 6))\ncol='v18q1'\ndf_income_train[col].value_counts().sort_index().plot.bar(color = 'blue',\n                                             edgecolor = 'k',\n                                             linewidth = 2)\nplt.xlabel(f'{col}'); plt.title(f'{col} Value Counts'); plt.ylabel('Count')\nplt.show();","200f9478":"for df in [df_income_train, df_income_test]:\n    df['v18q1'].fillna(value=0, inplace=True)\n\ndf_income_train[['v18q1']].isnull().sum()","42c830a5":"# Lets look at the data with not null values first.\ndf_income_train[df_income_train['rez_esc'].notnull()]['age'].describe()","a45d9c1c":"df_income_train.loc[df_income_train['rez_esc'].isnull()]['age'].describe()","c6fea7c3":"df_income_train.loc[(df_income_train['rez_esc'].isnull() & \n                     ((df_income_train['age'] > 7) & (df_income_train['age'] < 17)))]['age'].describe()\n#There is one value that has Null for the 'behind in school' column with age between 7 and 17 ","f23af388":"df_income_train[(df_income_train['age'] ==10) & df_income_train['rez_esc'].isnull()].head()\ndf_income_train[(df_income_train['Id'] =='ID_f012e4242')].head()\n#there is only one member in household for the member with age 10 and who is 'behind in school'. This explains why the member is \n#behind in school.","082d5eb7":"#from above we see that  the 'behind in school' column has null values \n# Lets use the above to fix the data\nfor df in [df_income_train, df_income_test]:\n    df['rez_esc'].fillna(value=0, inplace=True)\ndf_income_train[['rez_esc']].isnull().sum()","c3d2f04a":"data = df_income_train[df_income_train['meaneduc'].isnull()].head()\n\ncolumns=['edjefe','edjefa','instlevel1','instlevel2']\ndata[columns][data[columns]['instlevel1']>0].describe()","af6f36e6":"#from the above, we find that meaneduc is null when no level of education is 0\n#Lets fix the data\nfor df in [df_income_train, df_income_test]:\n    df['meaneduc'].fillna(value=0, inplace=True)\ndf_income_train[['meaneduc']].isnull().sum()","cdcc2c35":"data = df_income_train[df_income_train['SQBmeaned'].isnull()].head()\n\ncolumns=['edjefe','edjefa','instlevel1','instlevel2']\ndata[columns][data[columns]['instlevel1']>0].describe()","535971af":"#from the above, we find that SQBmeaned is null when no level of education is 0\n#Lets fix the data\nfor df in [df_income_train, df_income_test]:\n    df['SQBmeaned'].fillna(value=0, inplace=True)\ndf_income_train[['SQBmeaned']].isnull().sum()","f59cbf8e":"#Lets look at the overall data\nnull_counts = df_income_train.isnull().sum()\nnull_counts[null_counts > 0].sort_values(ascending=False)","5613cfff":"# Groupby the household and figure out the number of unique values\nall_equal = df_income_train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Households where targets are not all equal\nnot_equal = all_equal[all_equal != True]\nprint('There are {} households where the family members do not all have the same target.'.format(len(not_equal)))","bcbdf3d7":"#Lets check one household\ndf_income_train[df_income_train['idhogar'] == not_equal.index[0]][['idhogar', 'parentesco1', 'Target']]","517513a6":"#Lets use Target value of the parent record (head of the household) and update rest. But before that lets check\n# if all families has a head. \n\nhouseholds_head = df_income_train.groupby('idhogar')['parentesco1'].sum()\n\n# Find households without a head\nhouseholds_no_head = df_income_train.loc[df_income_train['idhogar'].isin(households_head[households_head == 0].index), :]\n\nprint('There are {} households without a head.'.format(households_no_head['idhogar'].nunique()))","8f8196d0":"# Find households without a head and where Target value are different\nhouseholds_no_head_equal = households_no_head.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\nprint('{} Households with no head have different Target value.'.format(sum(households_no_head_equal == False)))","a7d43cbc":"#Lets fix the data\n#Set poverty level of the members and the head of the house within a family.\n# Iterate through each household\nfor household in not_equal.index:\n    # Find the correct label (for the head of household)\n    true_target = int(df_income_train[(df_income_train['idhogar'] == household) & (df_income_train['parentesco1'] == 1.0)]['Target'])\n    \n    # Set the correct label for all members in the household\n    df_income_train.loc[df_income_train['idhogar'] == household, 'Target'] = true_target\n    \n    \n# Groupby the household and figure out the number of unique values\nall_equal = df_income_train.groupby('idhogar')['Target'].apply(lambda x: x.nunique() == 1)\n\n# Households where targets are not all equal\nnot_equal = all_equal[all_equal != True]\nprint('There are {} households where the family members do not all have the same target.'.format(len(not_equal)))","019e9c1d":"# 1 = extreme poverty 2 = moderate poverty 3 = vulnerable households 4 = non vulnerable households \ntarget_counts = heads['Target'].value_counts().sort_index()\ntarget_counts","088928b2":"target_counts.plot.bar(figsize = (8, 6),linewidth = 2,edgecolor = 'k',title=\"Target vs Total_Count\")","c9255ed7":"#Lets remove them\nprint(df_income_train.shape)\ncols=['SQBescolari', 'SQBage', 'SQBhogar_total', 'SQBedjefe', \n        'SQBhogar_nin', 'SQBovercrowding', 'SQBdependency', 'SQBmeaned', 'agesq']\n\n\nfor df in [df_income_train, df_income_test]:\n    df.drop(columns = cols,inplace=True)\n\nprint(df_income_train.shape)","43ca31e5":"id_ = ['Id', 'idhogar', 'Target']\n\nind_bool = ['v18q', 'dis', 'male', 'female', 'estadocivil1', 'estadocivil2', 'estadocivil3', \n            'estadocivil4', 'estadocivil5', 'estadocivil6', 'estadocivil7', \n            'parentesco1', 'parentesco2',  'parentesco3', 'parentesco4', 'parentesco5', \n            'parentesco6', 'parentesco7', 'parentesco8',  'parentesco9', 'parentesco10', \n            'parentesco11', 'parentesco12', 'instlevel1', 'instlevel2', 'instlevel3', \n            'instlevel4', 'instlevel5', 'instlevel6', 'instlevel7', 'instlevel8', \n            'instlevel9', 'mobilephone']\n\nind_ordered = ['rez_esc', 'escolari', 'age']\n\nhh_bool = ['hacdor', 'hacapo', 'v14a', 'refrig', 'paredblolad', 'paredzocalo', \n           'paredpreb','pisocemento', 'pareddes', 'paredmad',\n           'paredzinc', 'paredfibras', 'paredother', 'pisomoscer', 'pisoother', \n           'pisonatur', 'pisonotiene', 'pisomadera',\n           'techozinc', 'techoentrepiso', 'techocane', 'techootro', 'cielorazo', \n           'abastaguadentro', 'abastaguafuera', 'abastaguano',\n            'public', 'planpri', 'noelec', 'coopele', 'sanitario1', \n           'sanitario2', 'sanitario3', 'sanitario5',   'sanitario6',\n           'energcocinar1', 'energcocinar2', 'energcocinar3', 'energcocinar4', \n           'elimbasu1', 'elimbasu2', 'elimbasu3', 'elimbasu4', \n           'elimbasu5', 'elimbasu6', 'epared1', 'epared2', 'epared3',\n           'etecho1', 'etecho2', 'etecho3', 'eviv1', 'eviv2', 'eviv3', \n           'tipovivi1', 'tipovivi2', 'tipovivi3', 'tipovivi4', 'tipovivi5', \n           'computer', 'television', 'lugar1', 'lugar2', 'lugar3',\n           'lugar4', 'lugar5', 'lugar6', 'area1', 'area2']\n\nhh_ordered = [ 'rooms', 'r4h1', 'r4h2', 'r4h3', 'r4m1','r4m2','r4m3', 'r4t1',  'r4t2', \n              'r4t3', 'v18q1', 'tamhog','tamviv','hhsize','hogar_nin',\n              'hogar_adul','hogar_mayor','hogar_total',  'bedrooms', 'qmobilephone']\n\nhh_cont = ['v2a1', 'dependency', 'edjefe', 'edjefa', 'meaneduc', 'overcrowding']","be47c9e7":"#Check for redundant household variables\nheads = df_income_train.loc[df_income_train['parentesco1'] == 1, :]\nheads = heads[id_ + hh_bool + hh_cont + hh_ordered]\nheads.shape","df7c9d55":"# Create correlation matrix\ncorr_matrix = heads.corr()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find index of feature columns with correlation greater than 0.95\nto_drop = [column for column in upper.columns if any(abs(upper[column]) > 0.95)]\n\nto_drop","8751e9d2":"['coopele', 'area2', 'tamhog', 'hhsize', 'hogar_total']","042e63c6":"corr_matrix.loc[corr_matrix['tamhog'].abs() > 0.9, corr_matrix['tamhog'].abs() > 0.9]","2432133a":"sns.heatmap(corr_matrix.loc[corr_matrix['tamhog'].abs() > 0.9, corr_matrix['tamhog'].abs() > 0.9],\n            annot=True, cmap = plt.cm.Accent_r, fmt='.3f');","36dffdb1":"cols=['tamhog', 'hogar_total', 'r4t3']\nfor df in [df_income_train, df_income_test]:\n    df.drop(columns = cols,inplace=True)\n\ndf_income_train.shape","3b8a8b17":"#Check for redundant Individual variables\nind = df_income_train[id_ + ind_bool + ind_ordered]\nind.shape","121e2271":"# Create correlation matrix\ncorr_matrix = ind.corr()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find index of feature columns with correlation greater than 0.95\nto_drop = [column for column in upper.columns if any(abs(upper[column]) > 0.95)]\n\nto_drop","230861dc":"# This is simply the opposite of male! We can remove the male flag.\nfor df in [df_income_train, df_income_test]:\n    df.drop(columns = 'male',inplace=True)\n\ndf_income_train.shape","b3ff8b99":"#lets check area1 and area2 also\n# area1, =1 zona urbana \n# area2, =2 zona rural \n#area2 redundant because we have a column indicating if the house is in a urban zone\n\nfor df in [df_income_train, df_income_test]:\n    df.drop(columns = 'area2',inplace=True)\n\ndf_income_train.shape","18bde300":"#Finally lets delete 'Id', 'idhogar'\ncols=['Id','idhogar']\nfor df in [df_income_train, df_income_test]:\n    df.drop(columns = cols,inplace=True)\n\ndf_income_train.shape","e58003c6":"df_income_train.iloc[:,0:-1]","0d88e6b2":"df_income_train.iloc[:,-1]","1b0df8ae":"x_features=df_income_train.iloc[:,0:-1] # feature without target\ny_features=df_income_train.iloc[:,-1] # only target\nprint(x_features.shape)\nprint(y_features.shape)","bf048a85":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix,f1_score,classification_report\n\nx_train,x_test,y_train,y_test=train_test_split(x_features,y_features,test_size=0.2,random_state=1)\nrmclassifier = RandomForestClassifier()","1ff11080":"rmclassifier.fit(x_train,y_train)","50ab80f9":"y_predict = rmclassifier.predict(x_test)","21265c2a":"print(accuracy_score(y_test,y_predict))\nprint(confusion_matrix(y_test,y_predict))\nprint(classification_report(y_test,y_predict))","ea6b8972":"y_predict_testdata = rmclassifier.predict(df_income_test)","8fd9286c":"y_predict_testdata","f51b5963":"from sklearn.model_selection import KFold,cross_val_score","a591e35e":"seed=7\nkfold=KFold(n_splits=5,random_state=seed,shuffle=True)\n\nrmclassifier=RandomForestClassifier(random_state=10,n_jobs = -1)\nprint(cross_val_score(rmclassifier,x_features,y_features,cv=kfold,scoring='accuracy'))\nresults=cross_val_score(rmclassifier,x_features,y_features,cv=kfold,scoring='accuracy')\nprint(results.mean()*100)","f2446ce0":"num_trees= 100\n\nrmclassifier=RandomForestClassifier(n_estimators=100, random_state=10,n_jobs = -1)\nprint(cross_val_score(rmclassifier,x_features,y_features,cv=kfold,scoring='accuracy'))\nresults=cross_val_score(rmclassifier,x_features,y_features,cv=kfold,scoring='accuracy')\nprint(results.mean()*100)","9ccb207c":"rmclassifier.fit(x_features,y_features)\nlabels = list(x_features)\nfeature_importances = pd.DataFrame({'feature': labels, 'importance': rmclassifier.feature_importances_})\nfeature_importances=feature_importances[feature_importances.importance>0.015]\nfeature_importances.head()","9e45b657":"y_predict_testdata = rmclassifier.predict(df_income_test)\ny_predict_testdata","aa866c89":"feature_importances.sort_values(by=['importance'], ascending=True, inplace=True)\nfeature_importances['positive'] = feature_importances['importance'] > 0\nfeature_importances.set_index('feature',inplace=True)\nfeature_importances.head()\n\nfeature_importances.importance.plot(kind='barh', figsize=(11, 6),color = feature_importances.positive.map({True: 'blue', False: 'red'}))\nplt.xlabel('Importance')","3970fd60":"### NOTE\nLets look at meaneduc   (total nulls: 5) : average years of education for adults (18+)  <br>\nwhy the null values, Lets look at few rows with nulls in meaneduc  <br>\nColumns related to average years of education for adults (18+)    <br>\nedjefe, years of education of male head of household, based on the interaction of escolari (years of education),  <br>\nhead of household and gender, yes=1 and no=0  <br>\nedjefa, years of education of female head of household, based on the interaction of escolari (years of education),   <br>\nhead of household and gender, yes=1 and no=0   <br>\ninstlevel1, =1 no level of education  <br>\ninstlevel2, =1 incomplete primary   <br>","21c9675c":"### NOTE\nThe important piece of information here is that we don\u2019t have \u2018Target\u2019 feature in Test Dataset. There are 3 Types of the features:\n    <ul>\n    <li>5 object type<\/li>\n    <li>130(Train set)\/ 129 (test set) integer type<\/li>\n    <li>8 float type <\/li>\n    <\/ul>\n\n\nLets analyze features:","4495e99b":"From the above figure, meaneduc,dependency,overcrowding has significant influence on the model.\n<br>----THE END ---","4b6db6e7":"Lets look at the Squared Variables<br>\n\u2018SQBescolari\u2019<br>\n\u2018SQBage\u2019<br>\n\u2018SQBhogar_total\u2019<br>\n\u2018SQBedjefe\u2019<br>\n\u2018SQBhogar_nin\u2019<br>\n\u2018SQBovercrowding\u2019<br>\n\u2018SQBdependency\u2019<br>\n\u2018SQBmeaned\u2019<br>\n\u2018agesq\u2019<br>","473fa917":"### NOTE\nLets look at v18q1 (total nulls: 7342) : number of tablets household owns<br>\nwhy the null values, Lets look at few rows with nulls in v18q1<br>\nColumns related to  number of tablets household owns <br>\nv18q, owns a tablet<br>\n\nSince this is a household variable, it only makes sense to look at it on a household level, so we'll only select the rows for the head of household.","ef833aee":"We also noticed that object type features dependency, edjefe, edjefa have mixed values.<br>\nLets fix the data for features with null values and features with mixed values","4037afc1":"### NOTE\nLooking at the above data it makes sense that when owns a tablet column is 0, there will be no number of tablets household owns. Lets add 0 for all the null values.","8be97c51":"### NOTE\nLets look at SQBmeaned  (total nulls: 5) : square of the mean years of education of adults (>=18) in the household 142  <br>\nwhy the null values, Lets look at few rows with nulls in SQBmeaned<br>\nColumns related to average years of education for adults (18+)  <br>\nedjefe, years of education of male head of household, based on the interaction of escolari (years of education),<br>\nhead of household and gender, yes=1 and no=0<br>\nedjefa, years of education of female head of household, based on the interaction of escolari (years of education), <br>\nhead of household and gender, yes=1 and no=0 <br>\ninstlevel1, =1 no level of education<br>\ninstlevel2, =1 incomplete primary <br>","795f0834":"### NOTE\nLets look at the dataset and plot head of household and Target","789bdf1c":"### NOTE\nFrom the above , we see that when min age is 7 and max age is 17 for Years, then the 'behind in school' column has a value.<br>\nLets confirm","7c224f94":"# Income Qualification\n### DESCRIPTION\nIdentify the level of income qualification needed for the families in Latin America.\n\nProblem Statement Scenario:\nMany social programs have a hard time ensuring that the right people are given enough aid. It\u2019s tricky when a program focuses on the poorest segment of the population. This segment of the population can\u2019t provide the necessary income and expense records to prove that they qualify.\n\nIn Latin America, a popular method called Proxy Means Test (PMT) uses an algorithm to verify income qualification. With PMT, agencies use a model that considers a family\u2019s observable household attributes like the material of their walls and ceiling or the assets found in their homes to\nclassify them and predict their level of need.\n\nWhile this is an improvement, accuracy remains a problem as the region\u2019s population grows and poverty declines.\n\nThe Inter-American Development Bank (IDB)believes that new methods beyond traditional econometrics, based on a dataset of Costa Rican household characteristics, might help improve PMT\u2019s performance.<br>\n\n### <b>Following actions should be performed:<b>\n<ol>\n<li>Identify the output variable.<\/li>\n<li>Understand the type of data.<\/li>\n<li>Check if there are any biases in your dataset.<\/li>\n<li>Check whether all members of the house have the same poverty level.<\/li>\n<li>Check if there is a house without a family head.<\/li>\n<li>Set poverty level of the members and the head of the house within a family.<\/li>\n<li>Count how many null values are existing in columns.<\/li>\n<li>Remove null value rows of the target variable.<\/li>\n<li>Predict the accuracy using random forest classifier.<\/li>\n<li>Check the accuracy using random forest with cross validation.<\/li>\n<ol>","fd26b601":"# <span style='background:blue;color:white'> Check the accuracy using random forest with cross validation. <\/span>","416f5b7f":"# Note\nThere are several variables here having to do with the size of the house:<br>\n r4t3, Total persons in the household<br>\n tamhog, size of the household<br>\n tamviv, number of persons living in the household<br>\n hhsize, household size<br>\n hogar_total, # of total individuals in the household<br>\n These variables are all highly correlated with one another.<br>","0e4b579c":"### Core Data fields\nId - a unique identifier for each row.<br>\nTarget - the target is an ordinal variable indicating groups of income levels.<br>\n<ul>\n    <li>1 = extreme poverty <\/li>\n    <li>2 = moderate poverty <\/li>\n    <li>3 = vulnerable households <\/li>\n    <li>4 = non vulnerable households<\/li>\n<\/ul><br>\nidhogar - this is a unique identifier for each household. This can be used to create household-wide features, etc. All rows in a given household will have a matching value for this identifier.<br>\nparentesco1 - indicates if this person is the head of the household.<br>","b6b0b139":"### NOTE\nLets look at rez_esc    (total nulls: 7928) : Years behind in school <br> \n why the null values, Lets look at few rows with nulls in rez_esc <br> \n Columns related to Years behind in school  <br> \n Age in years","016d2a72":"Let's fix first the column with mixed value:\n\nddependency, Dependency rate, calculated = \n(number of members of the household younger than 19 or older than 64)\/(number of member of household between 19 and 64)\n\nedjefe=\nyears of education of male head of household, based on the interaction of\nescolari (years of education), head of household and gender, yes=1 and no=0\n\nedjefa: years of education of female head of household, based on the interaction of escolari (years of education), head of household and gender, yes=1 and no=0\n\n<font color='red'>For these three variables, it seems \u201cyes\u201d = 1 and \u201cno\u201d = 0. We can correct the variables using a mapping and convert to floats.<\/font>\n","dc601b04":"### NOTE\n\nLets fix the column with null values<br>\nAccording to the documentation for these columns:<br>\n\nv2a1 (total nulls: 6860) : Monthly rent payment<br>\nv18q1 (total nulls: 7342) : number of tablets household owns<br>\nrez_esc (total nulls: 7928) : Years behind in school<br>\nmeaneduc (total nulls: 5) : average years of education for adults (18+)<br>\nSQBmeaned (total nulls: 5) : square of the mean years of education of adults (>=18) in the household 142<br>","8f71212e":"### NOTE\nLooking at the different types of data and null values for each feature. We found the following: \n1. No null values for Integer type features. \n2. No null values for object type features. \n3. For float64 types below featufres has null value\n   1. v2a1 6860 \n   2. v18q1 7342 \n   3. rez_esc 7928 \n   4. meaneduc 5 \n   5. SQBmeaned 5","8f17e4a7":"# <span style='background:blue;color:white'> Understand the Data <\/span>","bc58ac86":"# Note\nextreme poverty is the smallest count in the train dataset. The dataset is biased.","5280c818":"# <span style='background:blue;color:white'> Predict the accuracy using random forest classifier. <\/span>","d13921a7":"# <span style='background:blue;color:white'> Data Cleaning <\/span>","cc3bbc7e":"Lets look at v2a1 (total nulls: 6860) : Monthly rent payment \n\nwhy the null values, Lets look at few rows with nulls in v2a1:\n\n1. Columns related to  Monthly rent payment\n2. tipovivi1, =1 own and fully paid house\n3. tipovivi2, \"=1 own,  paying in installments\"\n4. tipovivi3, =1 rented\n5. tipovivi4, =1 precarious \n6. tipovivi5, \"=1 other(assigned,  borrowed)\"","4832b43e":"<b>x_features, y_features:<\/b> The first parameter is the dataset you're selecting to use.<br>\n<b>train_size<\/b>: This parameter sets the size of the training dataset. There are three options: None, which is the default, Int, which requires the exact number of samples, and float, which ranges from 0.1 to 1.0.<br>\n<b>test_size<\/b>: This parameter specifies the size of the testing dataset. The default state suits the training size. It will be set to 0.25 if the training size is set to default.<br>\n<b>random_state<\/b>: The default mode performs a random split using np.random. Alternatively, you can add an integer using an exact number."}}