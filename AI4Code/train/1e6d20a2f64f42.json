{"cell_type":{"e93e25d5":"code","ff853193":"code","cab66c3e":"code","1bacee0d":"code","e29a5e94":"code","1ad8e1b4":"code","eda50c10":"code","2493fe5d":"code","9fbeefc4":"code","018318ef":"code","d4155a54":"code","7f88965a":"code","f64bc4b6":"code","15dceade":"code","d10325f9":"markdown"},"source":{"e93e25d5":"import sys\nsys.path.append('..\/input\/tabnetdevelop\/tabnet-develop (1)\/tabnet-develop')\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.optim.lr_scheduler import ReduceLROnPlateau\nfrom sklearn.model_selection import StratifiedKFold\nfrom pytorch_tabnet.tab_model import TabNetRegressor\nimport numpy as np\nimport pandas as pd \nimport json\n\nimport os\nimport random\nimport sys\nos.environ[\"CUDA_LAUNCH_BLOCKING\"] = \"1\"\nfrom tqdm import tqdm\nfrom sklearn.metrics import log_loss","ff853193":"data_path = \"..\/input\/lish-moa\/\"\ntest = pd.read_csv(data_path+'test_features.csv')\ntest.drop(columns=[\"sig_id\"], inplace=True)\ntest[\"cp_type\"] = (test[\"cp_type\"]==\"trt_cp\") + 0\ntest[\"cp_dose\"] = (test[\"cp_dose\"]==\"D1\") + 0\nX_test = test.values\n\nsubmission = pd.read_csv(data_path+'sample_submission.csv')","cab66c3e":"mask_type = 'entmax'\nn_da = 60\nn_steps = 1\ngamma = 1.0\nlambda_sparse = 2.6743669818463933e-05\nn_shared = 1\n\ntabnet_params = dict(n_d=n_da, n_a=n_da, n_steps=n_steps, gamma=gamma,\n                     lambda_sparse=lambda_sparse, optimizer_fn=torch.optim.Adam,\n                     optimizer_params=dict(lr=2e-2, weight_decay=1e-5),\n                     mask_type=mask_type, n_shared=n_shared,\n                     scheduler_params=dict(mode=\"min\",\n                                           patience=5,\n                                           min_lr=1e-5,\n                                           factor=0.9,),\n                     scheduler_fn=torch.optim.lr_scheduler.ReduceLROnPlateau,\n                     verbose=1,\n                     )","1bacee0d":"# def load_model(model, filepath):\n#     \"\"\"Load TabNet model.\n#     Parameters\n#     ----------\n#     filepath : str\n#         Path of the model.\n#     \"\"\"\n#     parameterFile = open(f\"{filepath}\/model_params.json\", \"r\")\n#     loaded_params = json.load(parameterFile)\n#     saved_state_dict = torch.load(f\"{filepath}\/network.pt\", map_location=torch.device('cuda'))\n\n#     model.__init__(**loaded_params)\n\n#     model._set_network()\n#     model.network.load_state_dict(saved_state_dict)\n#     model.network.eval()\n#     return model","e29a5e94":"test_cv_preds = []\nmodel = TabNetRegressor(**tabnet_params)","1ad8e1b4":"dirs = os.listdir(  '..\/input\/tabnetregressor-2-0-3-seed-7-fold' )\ndirs.remove('__results__.html') \ndirs.remove('__notebook__.ipynb') \ndirs.remove('custom.css') \ndirs.remove('__output__.json')\ndirs.remove('submission.csv')","eda50c10":"dirs","2493fe5d":"for x in dirs:\n    model.load_model( f\"..\/input\/tabnetregressor-2-0-3-seed-7-fold\/{x}\")\n    preds_test = model.predict(X_test)\n    test_cv_preds.append(1 \/ (1 + np.exp(-preds_test)))","9fbeefc4":"mean = np.mean(X_test, axis=0)\nstd = np.std(X_test, axis=0)","018318ef":"# gauss = np.random.normal(0, std, 875)\n# X_test1 = X_test + gauss\n# for x in dirs:\n#     model.load_model( f\"..\/input\/tabnetregressor-2-0-3-seed-7-fold\/{x}\")\n#     preds_test = model.predict(X_test1)\n#     test_cv_preds.append(1 \/ (1 + np.exp(-preds_test)))","d4155a54":"# gauss = np.random.normal(0, std, 875)\n# X_test2 = X_test + gauss\n# for x in dirs:\n#     model.load_model( f\"..\/input\/tabnetregressor-2-0-3-seed-7-fold\/{x}\")\n#     preds_test = model.predict(X_test2)\n#     test_cv_preds.append(1 \/ (1 + np.exp(-preds_test)))","7f88965a":"# gauss = np.random.normal(0, std, 875)\n# X_test3 = X_test + gauss\n# for x in dirs:\n#     model.load_model( f\"..\/input\/tabnetregressor-2-0-3-seed-7-fold\/{x}\")\n#     preds_test = model.predict(X_test3)\n#     test_cv_preds.append(1 \/ (1 + np.exp(-preds_test)))","f64bc4b6":"test_preds_all = np.stack(test_cv_preds)\nall_feat = [col for col in submission.columns if col not in [\"sig_id\"]]\nsubmission[all_feat] = test_preds_all.mean(axis=0)\n# set control to 0\nsubmission.loc[test['cp_type']==0, submission.columns[1:]] = 0\nsubmission.to_csv('submission.csv', index=None)","15dceade":"submission","d10325f9":"### TTA"}}