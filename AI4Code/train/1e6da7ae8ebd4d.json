{"cell_type":{"fc1a651b":"code","c4f406d4":"code","78324547":"code","a2e02d8e":"code","f3e90d2d":"code","190ec76f":"code","9b6ba018":"code","4c0246f7":"code","ec6a0cb9":"code","1e63697d":"code","6538d6e3":"code","39be616e":"code","eb918618":"code","0d03fa87":"code","896f3417":"code","29782288":"code","cee35315":"markdown","00735675":"markdown","118a3e3e":"markdown","d8e4431f":"markdown"},"source":{"fc1a651b":"import numpy as np\nimport pandas as pd","c4f406d4":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","78324547":"train_data[:10]","a2e02d8e":"train_data.describe(include='all')","f3e90d2d":"women = train_data[train_data['Sex'] == 'female']['Survived']\nrate_women = sum(women)\/len(women)\nprint('% of women who survived:', rate_women)","190ec76f":"men = train_data[train_data.Sex == 'male']['Survived']\nrate_men = sum(men)\/len(men)\nprint('% of men who survived:', rate_men)","9b6ba018":"# alternative way of computing the above\ntrain_data[['Sex', 'Survived']].groupby(['Sex']).mean()","4c0246f7":"train_data[['Pclass', 'Survived']].groupby(['Pclass']).mean()\n\n","ec6a0cb9":"# generate correlation data (larger values signify a clear positive\/negative correlation between row\/column labels)\ntrain_data.corr()","1e63697d":"women_count = 0\nwomen_survived_count = 0\nfor idx, row in train_data.iterrows():\n    if row['Sex'] == 'female':\n        women_count += 1\n        if row['Survived'] == 1:\n            women_survived_count += 1\nwomen_survived_count \/ women_count","6538d6e3":"men_count = 0 \nmen_survived_count = 0 \nfor idx, row in train_data.iterrows(): \n    if row ['Sex'] == 'male': \n        men_count += 1 \n        if row ['Survived']== 1:\n            men_survived_count += 1\nmen_survived_count \/ men_count","39be616e":"predictions = []\nfor idx, row in test_data.iterrows():\n    # make your changes in this cell!\n    if row['Sex'] == 'female':\n        if row['SibSp'] > 3:\n            predictions.append(0)\n        elif row ['Pclass'] < 3:\n            predictions.append(1)\n        elif row ['Fare'] > 200:\n            predictions.append(1)\n        elif row ['Parch'] < 4 or row ['Parch'] == 5:\n            predictions.append(1)\n        else: \n            predictions.append(0)\n\n    else: \n        if row ['Age'] <= 6 and row ['Pclass'] != 3:\n            predictions.append(1)\n        elif row ['Age'] <= 25 and row ['Pclass'] == 1 and row['Parch'] == 2:\n            predictions.append(1)\n        else: \n            predictions.append(0)\n     \n        \n\n    \n        \n\n","eb918618":"assert len(predictions) == len(test_data), 'Number of predictions must match number of test data rows!'","0d03fa87":"test_data['Survived'] = predictions\n","896f3417":"test_data[['PassengerId', 'Survived']].to_csv('submission.csv', index=False)\n\n","29782288":"pd.set_option(\"display.max_rows\",None, \"display.max_columns\", None)","cee35315":"# Making predictions","00735675":"# Working with rows manually","118a3e3e":"# Loading and examining data","d8e4431f":"# Basic analysis"}}