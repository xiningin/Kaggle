{"cell_type":{"ef18f615":"code","2373ef86":"code","c32a9017":"code","272bd470":"code","e60b2490":"code","5500df23":"code","5a799f90":"code","c8531d05":"code","5c92acb0":"code","a1ce7fa7":"code","722f2ff3":"code","18460c20":"code","30e0a897":"code","574f5a23":"code","18c4fd8b":"code","8847f3fa":"code","9a13cd4e":"code","a0b63b0f":"code","23d5666f":"code","bbb77f0e":"code","b945a3d9":"code","2875436e":"code","a6908346":"code","c04a5067":"code","a91d8475":"markdown"},"source":{"ef18f615":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2373ef86":"# read the data \ndf = pd.read_csv('\/kaggle\/input\/iris-flower-dataset\/IRIS.csv')","c32a9017":"#top 5 record of the data \ndf.head()","272bd470":"# columns\ndf.columns","e60b2490":"# describe  the data \n\ndf.describe()\n\n# only works on numerical cols\n# statistics about data \n# data distributions","5500df23":"# Information about the data in a glance\n\ndf.info()","5a799f90":"# Dimension  i.e. rows and columns\n\ndf.shape","c8531d05":"#Unique values is Species \ndf['species'].unique()","5c92acb0":"# count of the different species\n\ndf['species'].value_counts()","a1ce7fa7":"# Features V\/s Target \n\nfeatures  = list(df.columns)[:-1]\nprint(features)\ntarget = list(df.columns)[-1:][0]\nprint(target)\n\n# Features  --- > Predictor \n# Target  --> Predicted ","722f2ff3":"# Data Visualisation Step\n\n\nimport seaborn as sns\nsns.pairplot(df,hue ='species')\n\n# hue - color based on a column name  - in most case it will be Target Columns\n","18460c20":"# Separates features and corresponding labels\/target \n# by dropping Species - we get data frame with all features \n\nX = df.drop(['species'], axis=1)  #  X will hold all features\ny = df['species'] # y will hold target\/labels\n\nprint(X.shape) #dimensions of input data\nprint(y.shape) #dimensions of output data\n\n\n# is this binary classification or not  ?","30e0a897":"\nfrom sklearn.model_selection import train_test_split \nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size = 0.5, random_state = 0) \nprint(X_train.shape)\nprint(X_test.shape)","574f5a23":"# Training using Decision Tree Classifier \n\nfrom sklearn.tree import DecisionTreeClassifier  \nclassifier1 = DecisionTreeClassifier(criterion='gini')  \nclassifier1.fit(X_train, y_train) \n\n# Check Criteria  ?\nprint(classifier1)","18c4fd8b":"# Using information gain \n\nclassifier2 = DecisionTreeClassifier(criterion='entropy')  \nclassifier2.fit(X_train, y_train) ","8847f3fa":"# predict using both the classifier \n\n\n\ny_pred_1 = classifier1.predict(X_test)  \nprint(y_pred_1)\n\ny_pred_2 = classifier2.predict(X_test)  \nprint(y_pred_2)","9a13cd4e":"# compute accuracy \n\nfrom sklearn.metrics import accuracy_score #importing accuracy_score function from sklearn.metrics package\nacc_1 = accuracy_score(y_test,y_pred_1)\nprint(\"Accuracy for Gini model {} %\".format(acc_1*100))\n\n\nacc_2 = accuracy_score(y_test,y_pred_2)\nprint(\"Accuracy for Entropy model {} %\".format(acc_2*100))","a0b63b0f":"# confusion matrix for Gini Model \n\n\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test, y_pred_1))\nprint(classification_report(y_test, y_pred_1)) ","23d5666f":"# important features \n\nprint(classifier1.feature_importances_)\n\n#SepalLenCm   SepalWidCm    PetalLenCm     PetalWidCm\n","bbb77f0e":"# Plot a tree \n\n\nfrom sklearn import tree\nfrom sklearn.tree import export_graphviz\n\ntree.export_graphviz(classifier2,out_file='tree.dot',feature_names = ['SepalLenCm','SepalWidCm','PetalLenCm', 'PetalWidCm'],\nclass_names = 'Species',rounded = True, proportion = False, precision = 2, filled = True)  \n\n!dot -Tpng tree.dot -o tree.png\nfrom IPython.display import Image\nImage(filename = 'tree.png')","b945a3d9":"from sklearn.neighbors import KNeighborsClassifier\n\n\nclassifier3 = KNeighborsClassifier(n_neighbors= 7)  \nclassifier3.fit(X_train, y_train) ","2875436e":"y_pred_3 = classifier3.predict(X_test)  \nprint(y_pred_3)\n","a6908346":"acc_3 = accuracy_score(y_test,y_pred_3)\nprint(\"Accuracy for Entropy model {} %\".format(acc_3*100))\n","c04a5067":"# confusion matrix for Gini Model \n\n\nfrom sklearn.metrics import classification_report, confusion_matrix  \nprint(confusion_matrix(y_test, y_pred_3))\nprint(classification_report(y_test, y_pred_3)) ","a91d8475":"# Distance based model #"}}