{"cell_type":{"856ff2b3":"code","c426ecd7":"code","ddef8e2e":"code","6b843513":"code","57fc774c":"code","1f1dca14":"code","1cd4e6c6":"code","2dd46310":"code","1b44b026":"code","4218428c":"code","7f216534":"code","20fbb308":"code","c4718727":"code","c8ca37ac":"code","4023303c":"code","e5ccf1c4":"code","435f79ea":"code","815842cc":"code","15fa9479":"code","e305e7e8":"markdown","fd7469f0":"markdown","370a46a9":"markdown","6feaa98e":"markdown","fa649399":"markdown","5d68c0e7":"markdown","72e81697":"markdown","384efa39":"markdown","4ac4853b":"markdown","2cd4c605":"markdown","6f2f291b":"markdown","aea6cab3":"markdown"},"source":{"856ff2b3":"import math\nfrom IPython import display\nfrom matplotlib import cm\nfrom matplotlib import gridspec\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import metrics\nimport tensorflow as tf\nfrom tensorflow.python.data import Dataset\nimport urllib\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nimport graphviz\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, recall_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.cluster import KMeans\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\n\ntf.logging.set_verbosity(tf.logging.ERROR)\npd.options.display.max_rows = 100\npd.options.display.float_format = '{:.1f}'.format","c426ecd7":"header_list = [ \"id\",\"ccf\",\"age\",\"sex\",\"painloc\",\"painexer\",\"relrest\",\"pncaden\",\"cp\",\"trestbps\",\n\"htn\",\"chol\",\"smoke\",\"cigs\",\"years\",\"fbs\",\"dm\",\"famhist\",\"restecg\",\"ekgmo\",\n\"ekgday\",\"ekgyr\",\"dig\",\"prop\",\"nitr\",\"pro\",\"diuretic\",\"proto\",\"thaldur\",\"thaltime\",\n\"met\",\"thalach\",\"thalrest\",\"tpeakbps\",\"tpeakbpd\",\"dummy\",\"trestbpd\",\"exang\",\"xhypo\",\"oldpeak\",\n\"slope\",\"rldv5\",\"rldv5e\",\"ca\",\"restckm\",\"exerckm\",\"restef\",\"restwm\",\"exeref\",\"exerwm\",\n\"thal\",\"thalsev\",\"thalpul\",\"earlobe\",\"cmo\",\"cday\",\"cyr\",\"num\",\"lmt\",\"ladprox\",\n\"laddist\",\"diag\",\"cxmain\",\"ramus\",\"om1\",\"om2\",\"rcaprox\",\"rcadist\",\"lvx1\",\"lvx2\",\n\"lvx3\",\"lvx4\",\"lvf\",\"cathef\",\"junk\",\"name\" ]\n\ndf_raw = pd.read_csv(\"..\/input\/data regex cleaned.csv\", names=header_list, header=None)","ddef8e2e":"df = df_raw.replace(-9, np.NaN)","6b843513":"print(\"Num cols 0 = %d\" % len(df.columns))\nauthor_specified_unused_cols = ['dummy', 'restckm', 'exerckm', 'thalsev', 'thalpul', 'earlobe', 'lvx1', 'lvx2', 'lvx3', 'lvx4', 'lvf', 'cathef', 'junk']\nmy_specified_useless_cols = ['id', 'ccf', 'pncaden', 'thaldur', 'name']\nsuspicious_cols = ['lmt', 'ladprox', 'laddist', 'diag', 'cxmain', 'ramus', 'om1', 'om2', 'rcaprox', 'rcadist']\ncols_to_drop = author_specified_unused_cols + my_specified_useless_cols + suspicious_cols\ndf.drop(columns=cols_to_drop, inplace=True)\nprint(\"Num cols 1 = %d\" % len(df.columns))\ndf.dropna(axis='columns', thresh=0.6*len(df.index), inplace=True)\nprint(\"Num cols 2 = %d\" % len(df.columns))","57fc774c":"df_raw.describe(include='all').head(10)","1f1dca14":"df.describe(include='all')","1cd4e6c6":"df[df.drop(columns=['thaltime']).isnull().any(axis='columns')].head(10)","2dd46310":"df.describe(include='all')","1b44b026":"df.loc[df.cigs.isnull() & df.years > 0, ['cigs']] = df.loc[df.cigs.isnull() & df.years > 0, ['cigs']].fillna({'cigs': df.cigs.mean()})\ndf.loc[df.years.isnull() & df.cigs > 0, ['years']] = df.loc[df.years.isnull() & df.cigs > 0, ['years']].fillna({'years': df.years.mean()})\ndf.loc[df.cigs.isnull() & df.years == 0, ['cigs']] = df.loc[df.cigs.isnull() & df.years == 0, ['cigs']].fillna({'cigs': 0})\ndf.loc[df.years.isnull() & df.cigs == 0, ['years']] = df.loc[df.years.isnull() & df.cigs == 0, ['years']].fillna({'years': 0})\n# cigs = nan, years = nan are still left\ndf[['cigs', 'years', 'thaltime']] = df[['cigs', 'years', 'thaltime']].fillna(df[['cigs', 'years', 'thaltime']].mean())\n\ndf[['cigs']].plot.hist()\ndf[['years']].plot.hist()","4218428c":"df2 = df[:]\n\ndf2['dig'] = df['dig'].fillna(df['dig'].value_counts().idxmax())\ndf2['prop'] = df['prop'].fillna(df['prop'].value_counts().idxmax())\ndf2['nitr'] = df['nitr'].fillna(df['nitr'].value_counts().idxmax())\ndf2['pro'] = df['pro'].fillna(df['pro'].value_counts().idxmax())\ndf2['diuretic'] = df['diuretic'].fillna(df['diuretic'].value_counts().idxmax())\n\ndf2[df2.drop(columns=['thaltime']).isnull().any(axis='columns')]","7f216534":"df3 = df2[:]\n\ndf3.dropna(subset=['thal', 'ca'], axis='rows', inplace=True)\n\ndf3[df3.isnull().any(axis='columns')]\n","20fbb308":"df3.describe()\ndf3.num.plot.hist()\ndf3.num = df3.num.apply(lambda x: 1 if x > 0 else 0)\ndf3.num.plot.hist()\n\nX_train, X_test, y_train, y_test = train_test_split(\n    df3.drop(columns=['num']), df3.num, test_size=0.25, random_state=1234)","c4718727":"def draw_roc(y_test, y_score):\n    fpr, tpr, thresholds = metrics.roc_curve(y_test, y_score)\n    roc_auc = metrics.auc(fpr, tpr)\n    plt.figure()\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange',\n             lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()","c8ca37ac":"acc_dict = {}\ndef evaluate(classifier, drawTree = False):\n    print(\"Evaluating {}\".format(type(classifier).__name__))\n    cl = classifier\n    cl.fit(X_train, y_train)\n    cl_pred = cl.predict(X_test)\n    cl_confusion_matrix = confusion_matrix(y_test, cl_pred)\n    tn, fp, fn, tp = cl_confusion_matrix.ravel()\n    acc = accuracy_score(y_test, cl_pred)\n    acc_dict[type(classifier).__name__] = acc\n    \n    print(\"Confusion matrix\")\n    print(cl_confusion_matrix)\n    print(\"Accuracy %f\" % acc)\n    print(\"Recall %f\" % recall_score(y_test, cl_pred))\n    print(\"False alarm %f\\n\" % (fp \/ (fp+tn)))\n    print(\"ROC curve\")\n    draw_roc(y_test, cl_pred)\n    \n    if drawTree and isinstance(classifier, tree.DecisionTreeClassifier):\n        dot_data = tree.export_graphviz(clf, out_file=None,\n                                        feature_names=list(X_train),\n                                        class_names=[\"healthy\", \"ill\"],\n                                        filled=True,\n                                        special_characters=True) \n        graph = graphviz.Source(dot_data)\n        display.display(graph)","4023303c":"models = [tree.DecisionTreeClassifier(), GaussianNB(), KNeighborsClassifier(n_neighbors=3), LogisticRegression()]\nfor m in models:\n    evaluate(m)\n\nplt.bar(range(len(acc_dict)), list(acc_dict.values()), tick_label=list(acc_dict.keys()))\nplt.show()\n","e5ccf1c4":"y_pred = KMeans(n_clusters=2, random_state=1234).fit_predict(X_train)\ny_pred = 1 - y_pred\ntmpdf = pd.DataFrame({'real': y_train, 'clust': y_pred})\ntmpdf['eq'] = np.where(tmpdf['real'] == tmpdf['clust'], 1, 0)\ntmpdf['eq'].value_counts()","435f79ea":"df3.describe()\n#asoc = apriori(df3, min_support=0.1, use_colnames=True)","815842cc":"df_aso = df3.copy()\n\ndf_aso = df_aso.drop(columns=['cp', 'trestbps', 'restecg', 'ekgday', 'ekgmo', 'ekgyr', 'thaltime', 'met', 'thalach',\n                     'thalrest', 'tpeakbps', 'tpeakbpd', 'trestbpd', 'oldpeak', 'rldv5e', 'ca', 'cmo',\n                    'cday', 'cyr', 'trestbps', 'thal', 'years'])\n\ndf_aso.loc[:, 'age'] = df_aso['age'].apply(lambda x: 1 if x > 54.0 else 0)\ndf_aso.loc[:,'chol'] = df_aso['chol'].apply(lambda x: 1 if x > 277.0 else 0)\ndf_aso.loc[:,'cigs'] = df_aso['cigs'].apply(lambda x: 1 if x > 1.0 else 0)\ndf_aso.loc[:,'slope'] = df_aso['slope'].apply(lambda x: 1 if x > 0.0 else 0)\ndf_aso.describe()","15fa9479":"aso_rules_apriori = apriori(df_aso, min_support=0.3, use_colnames=True)\nrules = association_rules(aso_rules_apriori, metric='lift', min_threshold=1)\nrules.loc[(rules.consequents.str.contains('num', regex=False))]","e305e7e8":"Poni\u017cej znajduj\u0105 si\u0119 wst\u0119pnie oczyszczone i spreparowene za pomoc\u0105 wyra\u017cen regularnych dane.  \nOstatnie wiersze zawiera\u0142y niepoprawne dane \u2013 zosta\u0142y odrzucone. Na podstawie brakuj\u0105cych indeks\u00f3w (16 na 299 rekord\u00f3w) wida\u0107, \u017ce cz\u0119\u015b\u0107 danych zosta\u0142a wcze\u015bniej odrzucona.","fd7469f0":"## Kt\u00f3ry z b\u0142\u0119d\u00f3w w Pa\u0144stwa bazie jest gorszy do pope\u0142nienia: pierwszego czy drugiego rodzaju?\nGeneralnie rzecz bior\u0105c, lepiej dok\u0142adniej przebada\u0107 zdrowego pacjenta ni\u017c zaniecha\u0107 dzia\u0142ania w sprawie chorego - st\u0105d gorszym wydaje si\u0119 b\u0142\u0105d II rodzaju.  \nNale\u017cy jednak r\u00f3wnie\u017c uwa\u017ca\u0107, \u017ceby nie pokazywa\u0107 pacjentowi czerwonego pola \"Potencjalnie \u015bmiertelnie chory\" przy jego danych, je\u017celi w rzeczywisto\u015bci jest on zdrowy.","370a46a9":"Zosta\u0142a przygowtowana funkcja oceniaj\u0105ca klasyfikatory.","6feaa98e":"## Wst\u0119p\nBaza danych zawiera informacje na temat chorob\u00f3w serca dostarczone przez Cleveland Clinic Foundation.  \n  \nJest w niej 76 (75 trybut\u00f3w i jedna klasa) kolumn o nazwach i opisach zawarto\u015bci dostarczonych przez osoby j\u0105 przygotowyj\u0105ce:  \n  \n1 id: patient identification number  \n2 ccf: social security number (I replaced this with a dummy value of 0)  \n3 age: age in years  \n4 sex: sex (1 = male; 0 = female)  \n5 painloc: chest pain location (1 = substernal; 0 = otherwise)  \n6 painexer (1 = provoked by exertion; 0 = otherwise)  \n7 relrest (1 = relieved after rest; 0 = otherwise)  \n8 pncaden (sum of 5, 6, and 7)  \n9 cp: chest pain type  \n    -- Value 1: typical angina  \n    -- Value 2: atypical angina  \n    -- Value 3: non-anginal pain  \n    -- Value 4: asymptomatic  \n10 trestbps: resting blood pressure (in mm Hg on admission to the hospital)  \n11 htn  \n12 chol: serum cholestoral in mg\/dl  \n13 smoke: I believe this is 1 = yes; 0 = no (is or is not a smoker)  \n14 cigs (cigarettes per day)  \n15 years (number of years as a smoker)  \n16 fbs: (fasting blood sugar > 120 mg\/dl)  (1 = true; 0 = false)  \n17 dm (1 = history of diabetes; 0 = no such history)  \n18 famhist: family history of coronary artery disease (1 = yes; 0 = no)  \n19 restecg: resting electrocardiographic results  \n    -- Value 0: normal  \n    -- Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)  \n    -- Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria  \n20 ekgmo (month of exercise ECG reading)  \n21 ekgday(day of exercise ECG reading)  \n22 ekgyr (year of exercise ECG reading)  \n23 dig (digitalis used furing exercise ECG: 1 = yes; 0 = no)  \n24 prop (Beta blocker used during exercise ECG: 1 = yes; 0 = no)  \n25 nitr (nitrates used during exercise ECG: 1 = yes; 0 = no)  \n26 pro (calcium channel blocker used during exercise ECG: 1 = yes; 0 = no)  \n27 diuretic (diuretic used used during exercise ECG: 1 = yes; 0 = no)  \n28 proto: exercise protocol  \n      1 = Bruce       \n      2 = Kottus  \n      3 = McHenry  \n      4 = fast Balke  \n      5 = Balke  \n      6 = Noughton   \n      7 = bike 150 kpa min\/min  (Not sure if \"kpa min\/min\" is what was written!)  \n      8 = bike 125 kpa min\/min    \n      9 = bike 100 kpa min\/min  \n     10 = bike 75 kpa min\/min  \n     11 = bike 50 kpa min\/min  \n     12 = arm ergometer  \n29 thaldur: duration of exercise test in minutes  \n30 thaltime: time when ST measure depression was noted  \n31 met: mets achieved  \n32 thalach: maximum heart rate achieved  \n33 thalrest: resting heart rate  \n34 tpeakbps: peak exercise blood pressure (first of 2 parts)  \n35 tpeakbpd: peak exercise blood pressure (second of 2 parts)  \n36 dummy  \n37 trestbpd: resting blood pressure  \n38 exang: exercise induced angina (1 = yes; 0 = no)  \n39 xhypo: (1 = yes; 0 = no)  \n40 oldpeak = ST depression induced by exercise relative to rest  \n41 slope: the slope of the peak exercise ST segment  \n    -- Value 1: upsloping  \n    -- Value 2: flat  \n    -- Value 3: downsloping  \n42 rldv5: height at rest  \n43 rldv5e: height at peak exercise  \n44 ca: number of major vessels (0-3) colored by flourosopy  \n45 restckm: irrelevant  \n46 exerckm: irrelevant  \n47 restef: rest raidonuclid (sp?) ejection fraction  \n48 restwm: rest wall (sp?) motion abnormality  \n    0 = none  \n    1 = mild or moderate  \n    2 = moderate or severe  \n    3 = akinesis or dyskmem (sp?)  \n49 exeref: exercise radinalid (sp?) ejection fraction  \n50 exerwm: exercise wall (sp?) motion   \n51 thal: 3 = normal; 6 = fixed defect; 7 = reversable defect  \n52 thalsev: not used  \n53 thalpul: not used  \n54 earlobe: not used  \n55 cmo: month of cardiac cath (sp?)  (perhaps \"call\")  \n56 cday: day of cardiac cath (sp?)  \n57 cyr: year of cardiac cath (sp?)  \n58 num: diagnosis of heart disease (angiographic disease status)  \n    -- Value 0: < 50% diameter narrowing  \n    -- Value 1: > 50% diameter narrowing (in any major vessel: attributes 59 through 68 are vessels)  \n59 lmt  \n60 ladprox  \n61 laddist  \n62 diag  \n63 cxmain  \n64 ramus  \n65 om1  \n66 om2  \n67 rcaprox  \n68 rcadist  \n69 lvx1: not used  \n70 lvx2: not used  \n71 lvx3: not used  \n72 lvx4: not used  \n73 lvf: not used  \n74 cathef: not used  \n75 junk: not used  \n76 name: last name of patient (I replaced this with the dummy string \"name\")\n\nKlas\u0105 jest kolmna num - posiada ona warto\u015bci od 0 do 4, gdzie 0 oznacza pacjeta zdrowego, natomiast warto\u015bci 1, 2, 3, 4 oznaczaj\u0105 r\u00f3\u017cne choroby.","fa649399":"Brakuj\u0105ce dane zosta\u0142y uzupe\u0142nione lub odrzucone na kilka sposob\u00f3w.","5d68c0e7":"## Podsumowanie\nDo pewnego stopnia uda\u0142o si\u0119 przewidzie\u0107 wyst\u0119powanie choroby na bazie danych atrybut\u00f3w.  \nBardzo wa\u017cna okaza\u0142a si\u0119 prawid\u0142owa obr\u00f3bka bazy danych, w\u0142\u0105czaj\u0105c w to operacje na surowych danych, niezaware w tym kernelu.  \nW celu pe\u0142nej analizy pliku warto by\u0142oby sprawdzi\u0107 jak zachowuj\u0105 si\u0119 dane po normalizacji i standaryzacji.","72e81697":"**Co oznaczaj\u0105 u mnie warto\u015bci TP, FP, TN, FN?**  \nTP - true positive, prawid\u0142owo przewidziana warto\u015b\u0107 true, rzeczywi\u015bcie chory pacjent sklasyfikowany jako chory  \nFP - false positive, nieprawid\u0142owo przewidziana warto\u015b\u0107 true, rzeczywi\u015bcie zdrowy pacjent sklasyfikowany jako chory  \nTN - true negative prawid\u0142owo przewidziana warto\u015b\u0107 false, rzeczywi\u015bcie zdrowy pacjent sklasyfkowany jako zdrowy  \nFN - nieprawid\u0142owo przewidziana warto\u015b\u0107 false, rzeczywi\u015bcie chory pacjent sklasyfikowany jako zdrowy\n**Rozszyfrowa\u0107 w jakiej zale\u017cno\u015bci od TPR i FPR s\u0105 miary FNR i TNR**  \nTPR = 1 - FNR  \nTNR = 1 - FPR  \n**Udzieli\u0107 odpowiedzi czym jest u Pa\u0144stwa b\u0142\u0105d pierwszego i drugiego  rodzaju. Jak maj\u0105 si\u0119 oba rodzaje b\u0142\u0119d\u00f3w do TPR, FPR, TNR, FNR. Im wi\u0119cej b\u0142\u0119d\u00f3w pierwszego rodzaju tym wi\u0119ksze jest co? Co z b\u0142\u0119dami drugiego rodzaju?**  \nB\u0142\u0105d pierwszego rodzaju to sklasyfikowanie zdrowego pacjenta jako chorego - FP  \nB\u0142\u0105d drugiego rodzaju to sklasyfikowanie chorego pacjenta jako zdrowego - FN  \n","384efa39":"Klasa zosta\u0142a ograniczona z 4 do dwu warto\u015bci: chory (1), zdrowy (0).  \nZosta\u0142 przygotowany podzia\u0142 na zestaw treningowy i testowy.","4ac4853b":"## Gdzie le\u017ca\u0142by punkt dla idealnego klasyfikatora? \nPunkt indealnego klasyfikatora znajdowa\u0142by si\u0119 w x = 0, y = 1  \n## Kt\u00f3ry z klasyfikator jest najbli\u017cej idealnego?\nNaive Bayes\n## Kt\u00f3ry klasyfikator pope\u0142nia najmniej b\u0142\u0119d\u00f3w gorszego, wg Pa\u0144stwa, rodzaju (patrz poprzedni punkt) i jak to si\u0119 ma do jego pozycji na wykresie?\nDecision Tree, ma punkt przesuni\u0119ty w prawo\n","2cd4c605":"Kolumny z danymi niewykorzystywanymi w procesie zosta\u0142y odrzucone.","6f2f291b":"Zosta\u0142a przygotowana funckcja rysuj\u0105ca wykres ROC","aea6cab3":"Autor wskazuje, \u017ce brakuj\u0105ce warto\u015bci oznaczy\u0142 warto\u015bci\u0105 -9."}}