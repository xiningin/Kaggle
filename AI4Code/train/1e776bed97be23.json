{"cell_type":{"84f7b719":"code","c6d99270":"code","7cc8b23c":"code","eaff9edb":"code","338d9541":"code","224be1df":"code","fe4e54ba":"code","c6fccace":"code","bb6dd514":"code","29af307f":"code","dcf148d1":"code","ad08d140":"code","73e0e406":"code","56a2b74c":"code","217a6e4e":"code","d86719c7":"code","1bcd64cb":"code","6754366a":"code","1c42481b":"code","dd423433":"code","5fdc38b1":"code","ac7c16b8":"code","410411dc":"code","ca912969":"code","9834d324":"code","0b1db4c6":"code","a89416d3":"code","e88698e9":"code","223a5a27":"markdown","75f50f1e":"markdown","1ee994f1":"markdown","3f6b7239":"markdown","258f8e19":"markdown","da18f1fe":"markdown","d7f8a686":"markdown","2d687a82":"markdown","b6cc6103":"markdown","97a00408":"markdown","5d5bdec1":"markdown","4544afc1":"markdown","6f08efe1":"markdown"},"source":{"84f7b719":"# Importing packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams.update({'font.size': 14})\n\n# Load data\ndata = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv', parse_dates = ['ObservationDate','Last Update'])\n\nprint (data.shape)\nprint ('Last update: ' + str(data.ObservationDate.max()))","c6d99270":"# To check every place has only one observation per day\ncheckdup = data.groupby(['Country\/Region','Province\/State','ObservationDate']).count().iloc[:,0]\ncheckdup[checkdup>1]","7cc8b23c":"# Checking where the duplicates come from\ndata[data['Province\/State'].isin(['Hebei','Gansu']) & (data['ObservationDate'].isin(['2020-03-11','2020-03-12']))]","eaff9edb":"# Clean data\ndata = data.drop([4926, 4927, 5147, 5148]) # March 14 - remove duplicates\ndata.loc[data['Province\/State']=='Macau', 'Country\/Region'] = 'Macau' # March 14 - clean data for Macau and HK\ndata.loc[data['Province\/State']=='Hong Kong', 'Country\/Region'] = 'Hong Kong'\ndata = data.drop(['SNo', 'Last Update'], axis=1)\ndata = data.rename(columns={'Country\/Region': 'Country', 'ObservationDate':'Date'})\n# To check null values\ndata.isnull().sum()","338d9541":"daily = data.sort_values(['Date','Country','Province\/State'])","224be1df":"def get_place(row):\n    if row['Province\/State'] == 'Hubei':\n        return 'Hubei PRC'\n    elif row['Country'] == 'Mainland China': \n        return 'Others PRC'\n    elif row['Country'] == 'US':\n        return 'US'\n    elif row['Country'] in ['Italy','Spain','Germany','France','Switzerland','Norway','UK','Netherlands','Sweden','Belgium','Denmark']:\n        return 'Europe'\n    elif row['Country'] == 'Iran':\n        return 'Iran'\n    elif row['Country'] == 'South Korea':\n        return 'South Korea'\n    else: return 'Rest of World'\n\ndaily['segment'] = daily.apply(lambda row: get_place(row), axis=1)","fe4e54ba":"latest = daily[daily.Date == daily.Date.max()]","c6fccace":"print ('Total confirmed cases: %.d' %np.sum(latest['Confirmed']))\nprint ('Total death cases: %.d' %np.sum(latest['Deaths']))\nprint ('Total recovered cases: %.d' %np.sum(latest['Recovered']))","bb6dd514":"segment1 = latest.groupby('segment').sum()\nsegment1['Death Rate'] = segment1['Deaths'] \/ segment1['Confirmed'] * 100\nsegment1['Recovery Rate'] = segment1['Recovered'] \/ segment1['Confirmed'] * 100\nsegment1","29af307f":"# Confirmed Cases World ex-China\nworldstat = latest.groupby('Country').sum()\n_ = worldstat.sort_values('Confirmed', ascending=False).head(15)\nplt.figure(figsize=(9,6))\nsns.barplot(_.Confirmed, _.index)\nplt.title('Top 15 Confirmed cases World')\nplt.yticks(fontsize=12)\nplt.grid(axis='x')\nplt.show()","dcf148d1":"# Death Cases World ex-China\n_ = worldstat.sort_values('Deaths', ascending=False)\n_ = _[_.Deaths>=10]\nplt.figure(figsize=(9,6))\nsns.barplot(_.Deaths, _.index)\nplt.title('Top Deaths cases World (10 or above)')\nplt.yticks(fontsize=12)\nplt.grid(axis='x')\nplt.show()","ad08d140":"# Compare death rate across countries\n_ = latest.groupby('Country')['Confirmed','Deaths'].sum().reset_index()\n_['Death rate'] = _['Deaths'] \/ _['Confirmed'] * 100\n_ = _.sort_values('Death rate', ascending=False)\ndeath_cty = _[_['Deaths']>=10]\nplt.figure(figsize=(9,6))\nsns.barplot(death_cty['Death rate'], death_cty['Country'])\nplt.title('Death Rate Comparison (>=10 Deaths)')\nplt.yticks(fontsize=12)\nplt.grid(axis='x')\nplt.show()","73e0e406":"import matplotlib.dates as mdates\nmonths = mdates.MonthLocator()\nmonths_fmt = mdates.DateFormatter('%b-%e')\n\nconfirm = pd.pivot_table(daily.dropna(subset=['Confirmed']), \n                         index='Date', columns='segment', values='Confirmed', aggfunc=np.sum).fillna(method = 'ffill')\nfig, ax = plt.subplots(figsize=(11,6))\nax.plot(confirm, marker='o')\nplt.title('Confirmed Cases')\nax.legend(confirm.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nax.grid(True)\nplt.show()","56a2b74c":"death = pd.pivot_table(daily.dropna(subset=['Deaths']), \n                         index='Date', columns='segment', values='Deaths', aggfunc=np.sum).fillna(method = 'ffill')\nfig, ax = plt.subplots(figsize=(11,6))\nax.plot(death, marker='o')\nplt.title('Death Cases')\nax.legend(death.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nax.grid(True)\nplt.show()","217a6e4e":"good = pd.pivot_table(daily.dropna(subset=['Recovered']), \n                         index='Date', columns='segment', values='Recovered', aggfunc=np.sum).fillna(method = 'ffill')\nfig, ax = plt.subplots(figsize=(11,6))\nax.plot(good, marker='o')\nplt.title('Recovered Cases')\nax.legend(good.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nax.grid(True)\nplt.show()","d86719c7":"# Active case - confirmed minus deaths and recovered\ndaily['Active'] = daily['Confirmed'] - daily['Deaths'] - daily['Recovered']\nactive = pd.pivot_table(daily.dropna(subset=['Active']), \n                         index='Date', columns='segment', values='Active', aggfunc=np.sum).fillna(method = 'ffill')\nfig, ax = plt.subplots(figsize=(11,6))\nplt.plot(active, marker='o')\nplt.title('Active Cases')\nax.legend(active.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nax.grid(True)\nplt.show()","1bcd64cb":"# Active case - confirmed minus deaths and recovered\ndaily['Active'] = daily['Confirmed'] - daily['Deaths'] - daily['Recovered']\nactive = pd.pivot_table(daily.dropna(subset=['Active']), \n                         index='Date', columns='segment', values='Active', aggfunc=np.sum).fillna(method = 'ffill')\nfig, ax = plt.subplots(figsize=(11,6))\nplt.plot(active, marker='o')\nplt.title('ln(x) scale of active cases')\nax.legend(active.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nax.set_yscale('log', basey=2.718) # LOG\nplt.xticks(rotation=45, fontsize=12)\nax.grid(True)\n# plt.ylim((0, 10000)) # SHOW US\nplt.show()","6754366a":"n_future = 5\nn_poly = 4\n\n_ = list(active['US'])[30:]\n_ = [x \/ 327200000*1000000 for x in _]\n_ = _[3:]\np = np.polyfit(range(len(_)), _, n_poly)\nf = np.polyval(p,range(len(_)+n_future))\nplt.title(\"Percent Active per Million in US\")\nplt.xlabel(\"days after 1\/million people infected\")\nplt.ylabel(\"active cases per million people\")\nplt.plot(range(len(_)),_,'o')\nplt.plot(range(len(_)+n_future),f,'-')","1c42481b":"_ = list(active['Rest of World'])\n_ = [x \/ (7700000000-1386000000-58500000-741400000)*1000000 for x in _]\n_ = _[25:]\np = np.polyfit(range(len(_)), _, n_poly)\nf = np.polyval(p,range(len(_)+n_future))\nplt.title(\"Percent Active per Million in Rest of World\")\nplt.xlabel(\"days after 1\/million people infected\")\nplt.ylabel(\"active cases per million people\")\nplt.plot(range(len(_)),_,'o')\nplt.plot(range(len(_)+n_future),f,'-')","dd423433":"_ = list(active['Europe'])\n_ = [x \/ 741400000*1000000 for x in _]\n_ = _[32:]\np = np.polyfit(range(len(_)), _, n_poly)\nf = np.polyval(p,range(len(_)+n_future))\nplt.title(\"Percent Active per Million in Europe\")\nplt.xlabel(\"days after 1\/million people infected\")\nplt.ylabel(\"active cases per million people\")\nplt.plot(range(len(_)),_,'o')\nplt.plot(range(len(_)+n_future),f,'-')","5fdc38b1":"_ = list(active['Others PRC'])\n_ = [x \/ (1386000000-58500000)*1000000 for x in _]\n_ = _[6:]\np = np.polyfit(range(len(_)), _, n_poly)\nf = np.polyval(p,range(len(_)+n_future))\nplt.title(\"Percent Active per Million in China\")\nplt.xlabel(\"days after 1\/million people infected\")\nplt.ylabel(\"active cases per million people\")\nplt.plot(range(len(_)),_,'o')\nplt.plot(range(len(_)+n_future),f,'-')","ac7c16b8":"_ = list(active['Hubei PRC'])\n_ = [x \/ 58500000*1000000 for x in _]\n_ = _[:]\np = np.polyfit(range(len(_)), _, n_poly)\nf = np.polyval(p,range(len(_)+n_future))\nplt.title(\"Percent Active per Million in Hubei\")\nplt.xlabel(\"days after 1\/million people infected\")\nplt.ylabel(\"active cases per million people\")\nplt.plot(range(len(_)),_,'o')\nplt.plot(range(len(_)+n_future),f,'-')","410411dc":"# Global ex-China - Top 10 countries\nc10 = worldstat.sort_values('Confirmed', ascending=False).head(10).index.tolist()\n# Confirmed cases\nc10cases = daily[daily['Country'].isin(c10)]\nconfirm_w = pd.pivot_table(c10cases.dropna(subset=['Confirmed']), index='Date', \n                         columns='Country', values='Confirmed', aggfunc=np.sum).fillna(method='ffill')\nfig, ax = plt.subplots(figsize=(12,7))\nplt.plot(confirm_w[confirm_w.index>'2020-02-01'], marker='o')\nplt.title('Confirmed Cases - Top 10 Countries Outside China')\nax.legend(confirm_w.columns, loc=2)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nplt.grid(True)\nplt.show()","ca912969":"# Death cases\ndeath_w = pd.pivot_table(c10cases.dropna(subset=['Deaths']), index='Date', \n                         columns='Country', values='Deaths', aggfunc=np.sum).fillna(method='ffill')\nfig, ax = plt.subplots(figsize=(12,7))\nplt.plot(death_w[death_w.index>'2020-02-01'], marker='o')\nplt.title('Death Cases - Top 10 Countries Outside China')\nplt.legend(death_w.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nplt.grid(True)\nplt.show()","9834d324":"# Calculate death and recovery rate\n\ndf = confirm.join(death, lsuffix='_confirm', rsuffix='_death')\ndf = df.join(good.add_suffix('_recover'))\ndf['Hubei PRC_death_rate'] = df['Hubei PRC_death']\/df['Hubei PRC_confirm']\ndf['Others PRC_death_rate'] = df['Others PRC_death']\/df['Others PRC_confirm']\ndf['Rest of World_death_rate'] = df['Rest of World_death']\/df['Rest of World_confirm']\ndf['US_death_rate'] = df['US_death']\/df['US_confirm']\ndf['Europe_death_rate'] = df['Europe_death']\/df['Europe_confirm']\ndf['Iran_death_rate'] = df['Iran_death']\/df['Iran_confirm']\ndf['South Korea_death_rate'] = df['South Korea_death']\/df['South Korea_confirm']\n\ndf['Hubei PRC_recover_rate'] = df['Hubei PRC_recover']\/df['Hubei PRC_confirm']\ndf['Others PRC_recover_rate'] = df['Others PRC_recover']\/df['Others PRC_confirm']\ndf['Rest of World_recover_rate'] = df['Rest of World_recover']\/df['Rest of World_confirm']\ndf['US_recover_rate'] = df['US_recover']\/df['US_confirm']\ndf['Europe_recover_rate'] = df['Europe_recover']\/df['Europe_confirm']\ndf['Iran_recover_rate'] = df['Iran_recover']\/df['Iran_confirm']\ndf['South Korea_recover_rate'] = df['South Korea_recover']\/df['South Korea_confirm']","0b1db4c6":"death_rate = df[['Hubei PRC_death_rate','Others PRC_death_rate','Rest of World_death_rate', 'US_death_rate', 'Europe_death_rate', 'Iran_death_rate', 'South Korea_death_rate']]*100\nfig, ax = plt.subplots(figsize=(11,6))\nplt.plot(death_rate, marker='o')\nplt.title('Death Rate %')\nplt.legend(death.columns)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nplt.grid(True)\nplt.ylim((0, 10)) # SHOW US\nplt.show()","a89416d3":"recover_rate = df[['Hubei PRC_recover_rate','Others PRC_recover_rate','Rest of World_recover_rate', 'US_recover_rate', 'Europe_recover_rate', 'Iran_recover_rate', 'South Korea_recover_rate']]*100\nfig, ax = plt.subplots(figsize=(11,6))\nplt.plot(recover_rate, marker='o')\nplt.title('Recovery Rate %')\nplt.legend(good.columns, loc=2, fontsize=12)\nax.xaxis.set_major_locator(plt.MaxNLocator(7))\nax.xaxis.set_major_formatter(months_fmt)\nplt.xticks(rotation=45, fontsize=12)\nplt.grid(True)\nplt.show()","e88698e9":"import datetime\n\n# data from: https:\/\/www.immd.gov.hk\/hkt\/message_from_us\/stat.html\nplt.plot([339143, 229589, 174474, 144110, 127967, 124574, 107977, 97452, 94202, 81669, 86081, 52016, 52220, 63124, 57988, 29089, 27507, 24429, 19181, 20024, 21541, 22339, 20410, 19458, 17649, 15481, 16059, 19470, 20897, 18630, 18055, 17785, 15329, 15866, 17555, 20644, 20601], marker='o')\nplt.title(\"HK Customer Data\")\nplt.xlabel(\"days after Jan.23\")\nplt.ylabel(\"number of people going out of HK\")\nplt.show()","223a5a27":"# Further Readings\n\n***1. [Paper - by JHU - HIGHLY RECOMMAND]*** ALL YOU NEED TO KNOW: https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf\n - The paper contains almost all statistical info you need to know about COVID-19.\n - I recommand you take a look at the paper's images by yourself.\n\n***2. [Paper - Risk Assessment & Policy Making - HIGHLY RECOMMAND]*** US and UK risk: https:\/\/www.imperial.ac.uk\/media\/imperial-college\/medicine\/sph\/ide\/gida-fellowships\/Imperial-College-COVID19-NPI-modelling-16-03-2020.pdf\n - Herd Immunity is the solution if the vaccine cannot be implemented. (my interpretation)\n - They proposed a strategy to control the monthly infection rate as the graph shows below\n - ![Strategy](https:\/\/i.postimg.cc\/28ZZLBM4\/strategy.png)\n - The graph shows an optimal way to build herd immunity by switching social distancing policy on and off (page 12)\n - Since the vaccine will take about 18 months to develop, the paper suggests that the \"switching method\" (I named it) is more robust to uncertainty than a complete shutdown of schools and works for a long duration of time. (page 14)\n - If a country implemented a \"complete shutdown\" (I named it) as China did, a rebound would likely happen and therefore start the transmissions with a scale no less than the first time. (page 15)\n - Social distancing would protect the older people, but will not greatly reduce the overall transmission rate (page 15)\n - The assumption of children do transmit as adults is plausible (page 15) - (This is my own interpretation of the sentence)\n - The delay between infection and hospitalization is 2~3 weeks (page 16)\n\n3. [Medium - Argument] Delay in diagnosis: https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca \n\n4. [Medium - Interactive] Computer Simulation: https:\/\/www.washingtonpost.com\/graphics\/2020\/world\/corona-simulator\/ \n\n5. [Medium - Statistics] Importance of Social Distancing and More Modelings: https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca \n","75f50f1e":"# | Latitude Factor ---------------------------------------------\n[![Humidity](https:\/\/i.postimg.cc\/Y9S8XsNc\/latitude.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)\n[![Map](https:\/\/i.postimg.cc\/J4gNmhb2\/map.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)","1ee994f1":"# | Medical Avaliability ---------------------------------------------\n[![Medical Avaliability](https:\/\/miro.medium.com\/max\/2746\/1*aGrccKPJ19wtKKDRtTNL_A.png)](https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca)\n[![Bed](https:\/\/i.postimg.cc\/4NbrYr3Z\/bed.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)\n[![Bed-Req](https:\/\/i.postimg.cc\/d02SFh4m\/bed-req.png)](https:\/\/www.imperial.ac.uk\/media\/imperial-college\/medicine\/sph\/ide\/gida-fellowships\/Imperial-College-COVID19-NPI-modelling-16-03-2020.pdf)\n","3f6b7239":"[![](http:\/\/img.youtube.com\/vi\/mCa0JXEwDEk\/0.jpg)](http:\/\/www.youtube.com\/watch?v=mCa0JXEwDEk \"\")","258f8e19":"# | Humidity Factor ---------------------------------------------\n[![Humidity](https:\/\/i.postimg.cc\/L8XX8kV9\/humidity.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)","da18f1fe":"# | How many people are running back to China or Korea? 5~20x more than normal.","d7f8a686":"# IMPORTANT: Before you read the graphs, be sure to know:\n\n1. Testing Bias: different areas have different testing availability.\n2. Age\/Health Bias: for some countries (the U.S. included) only certain age groups with a certain travel history and health issues get tested.\n4. Asymptomatic Bias: Asymptomatic people don't get tested.\n5. Delay Bias: on average (according to Chinese dataset), people get tested 4~10 days after symptom discovery.\n6. Death Bias: people who die before testing don't get count into COVID-19 deaths.\n7. Population Density Bias: the absolute count of COVID-19 infection is meaningless considering different area have different population density.\n8. Area Generalization \/ Political \/ Research Situation: politics, medicine development can affect human behavior and thus the spread of the virus.\n","2d687a82":"Sharp rise in number of deaths in Italy and Iran.","b6cc6103":"## Rate of Death and Recovery","97a00408":"# | Delay Bias ---------------------------------------------\n[![Delay Bias](https:\/\/miro.medium.com\/max\/3584\/1*r-ddYhoUtP_se6x-NOEinA.png)](https:\/\/medium.com\/@tomaspueyo\/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca)\n","5d5bdec1":"# So, If NONE of the data is reliable, what can we LEARN from this kernel?\n1. The change of slope (2nd derivative) of the `ln(active_cases)` is a good predictor of the future trend.\n2. South Korea is a good benchmark for countries like the U.S.\n3. `death_rate` is a good indicator of either Age Bias or Healthcare System.","4544afc1":"# | What Material COVID-19 Stays On? ---------------------------------------------\n[![Material](https:\/\/i.postimg.cc\/NGKVxKfN\/material.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)","6f08efe1":"# | Drug Progression ---------------------------------------------\n[![Drug](https:\/\/i.postimg.cc\/jqPvMPPS\/drug.png)](https:\/\/www.jpmorgan.com\/jpmpdf\/1320748286395.pdf)"}}