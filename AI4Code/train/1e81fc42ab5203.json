{"cell_type":{"6d65ad76":"code","af4de057":"code","257f4a8b":"code","c5d4f151":"code","c1c4ad87":"code","3157f1cc":"code","e11c3f5f":"code","209ec884":"code","b69e5384":"code","adeb7d55":"code","134a8fd3":"code","0052c790":"code","306c7f18":"code","d6e7c06d":"code","df1941cd":"markdown","eb3b20b1":"markdown","92cf60a6":"markdown","ebb286bb":"markdown","96d1d918":"markdown","422e463e":"markdown","17634bd4":"markdown","87f50555":"markdown"},"source":{"6d65ad76":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af4de057":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n\ndata = pd.concat([train, test], sort=False)","257f4a8b":"from sklearn.preprocessing import LabelEncoder\n\ndata = pd.concat([train, test], sort=False)\n\ndata['Sex'].replace(['male','female'], [0, 1], inplace=True)\ndata['Embarked'].fillna(('S'), inplace=True)\ndata['Embarked'] = data['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ndata['Fare'].fillna(np.mean(data['Fare']), inplace=True)\ndata['Age'].fillna(data['Age'].median(), inplace=True)\ndata['FamilySize'] = data['Parch'] + data['SibSp'] + 1\ndata['IsAlone'] = 0\ndata.loc[data['FamilySize'] == 1, 'IsAlone'] = 1","c5d4f151":"data.head()","c1c4ad87":"delete_columns = ['Name', 'PassengerId', 'Ticket', 'Cabin']\ndata.drop(delete_columns, axis=1, inplace=True)\n\ntrain = data[:len(train)]\ntest = data[len(train):]\n\ny_train = train['Survived']\nX_train = train.drop('Survived', axis=1)\nX_test = test.drop('Survived', axis=1)","3157f1cc":"X_train.head()","e11c3f5f":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.3, random_state=0, stratify=y_train)","209ec884":"import optuna\nfrom sklearn.metrics import log_loss\nimport lightgbm as lgb\n\ndef objective(trial):\n    #\u63a2\u7d22\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n    params = {\n        'objective': 'binary',\n        'max_bin': trial.suggest_int('max_bin', 255, 500),\n        'learning_rate': 0.01,\n        'num_leaves': trial.suggest_int('num_leaves', 32, 128),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),\n        'verbosity': -1,\n        'random_state':0\n    }\n\n    #lightGBM\u7528\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n    lgb_train = lgb.Dataset(X_train, y_train)\n    lgb_eval = lgb.Dataset(X_valid, y_valid)\n    \n    #LightGBM\u306e\u30e2\u30c7\u30eb\u69cb\u7bc9\n    model = lgb.train(\n        params, lgb_train,\n        valid_sets=[lgb_train, lgb_eval],\n        verbose_eval=10,\n        num_boost_round=1000,\n        early_stopping_rounds=10\n    )\n    #\u4e88\u6e2c\u3057\u3066\u30b9\u30b3\u30a2\u51fa\u3059\n    y_pred_valid = model.predict(X_valid, num_iteration=model.best_iteration)\n    score = log_loss(y_valid, y_pred_valid)\n    return score","b69e5384":"#\u6307\u5b9a\u65b9\u6cd5\nstudy = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0),\n                             study_name='foo',\n                             storage='sqlite:\/\/\/example.db',\n                             direction='minimize')\nstudy.optimize(objective, n_trials=40)","adeb7d55":"study = optuna.load_study(study_name='foo',storage='sqlite:\/\/\/example.db')\nstudy.trials_dataframe()","134a8fd3":"optuna.visualization.plot_contour(study)","0052c790":"optuna.visualization.plot_edf(study)","306c7f18":"optuna.visualization.plot_slice(study)","d6e7c06d":"optuna.visualization.plot_param_importances(study)","df1941cd":"> \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3088\u308b\u53ef\u8996\u5316","eb3b20b1":"# \u672c\u7de8","92cf60a6":"> \u7b49\u9ad8\u7dda\u30b0\u30e9\u30d5\u306e\u30d7\u30ed\u30c3\u30c8\n\n\u5404\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u95a2\u4fc2\u304c\u898b\u3089\u308c\u308b","ebb286bb":"# \u5b66\u7fd2","96d1d918":"# \u524d\u51e6\u7406","422e463e":"> \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u91cd\u8981\u5ea6\n\n\u5404\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u3069\u308c\u307b\u3069\u7d50\u679c\u306b\u304b\u304b\u308f\u3063\u3066\u304f\u308b\u304b\u3092\u793a\u3059","17634bd4":"> \u30b9\u30e9\u30a4\u30b9\u30d7\u30ed\u30c3\u30c8\uff1f\n\n\u5404\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306b\u304a\u3051\u308b\u95a2\u4fc2\u304c\u308f\u304b\u308b","87f50555":"> \u7d4c\u9a13\u5206\u5e03\u95a2\u6570\u306e\u30d7\u30ed\u30c3\u30c8\n\n\u7d4c\u9a13\u5206\u5e03\u95a2\u6570\u3068\u306f\u3001\u672a\u77e5\u306e\u78ba\u7387\u5206\u5e03\u306b\u5f93\u3063\u3066\u751f\u6210\u3055\u308c\u305fn\u500b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u672a\u77e5\u306e\u78ba\u7387\u5206\u5e03\u306e\u7d2f\u7a4d\u5206\u5e03\u95a2\u6570\u3092\u63a8\u5b9a\u3057\u305f\u3082\u306e(\u7c21\u5358\u3067\u3059\u307f\u307e\u305b\u3093)"}}