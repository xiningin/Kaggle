{"cell_type":{"222dc3ff":"code","7da22c96":"code","5c6f0344":"code","660a01d7":"code","99d9635f":"code","e8583da2":"code","6aca00ec":"code","b479b0ff":"code","43cc0040":"code","873f0737":"code","a41e8acd":"code","a269e7f8":"code","c07bc237":"code","9eb9f7b6":"markdown","05754b4e":"markdown","ce7ffa43":"markdown","533a8250":"markdown","ce5d9297":"markdown","356f9c13":"markdown","3a4e035a":"markdown","c681ad96":"markdown","01aa72a2":"markdown","190192af":"markdown","e30c3241":"markdown","b891885f":"markdown","e8d057f8":"markdown","3a042630":"markdown"},"source":{"222dc3ff":"\n%matplotlib inline\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()\nfrom sklearn.preprocessing import LabelEncoder\n\nks = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv',\n                 parse_dates=['deadline', 'launched'])\n\n# Drop live projects\nks = ks.query('state != \"live\"')\n\n# Add outcome column, \"successful\" == 1, others are 0\nks = ks.assign(outcome=(ks['state'] == 'successful').astype(int))\n\n# Timestamp features\nks = ks.assign(hour=ks.launched.dt.hour,\n               day=ks.launched.dt.day,\n               month=ks.launched.dt.month,\n               year=ks.launched.dt.year)\n\n# Label encoding\ncat_features = ['category', 'currency', 'country']\nencoder = LabelEncoder()\nencoded = ks[cat_features].apply(encoder.fit_transform)\n\ndata_cols = ['goal', 'hour', 'day', 'month', 'year', 'outcome']\nbaseline_data = ks[data_cols].join(encoded)","7da22c96":"interactions = ks['category'] + \"_\" + ks['country']\nprint(interactions.head(5))","5c6f0344":"label_enc = LabelEncoder()\ndata_interaction = baseline_data.assign(category_country=label_enc.fit_transform(interactions))\ndata_interaction.head()","660a01d7":"# First, create a Series with a timestamp index\nlaunched = pd.Series(ks.index, index=ks.launched, name=\"count_7_days\").sort_index()\nlaunched.head(20)","99d9635f":"count_7_days = launched.rolling('7d').count() - 1\nprint(count_7_days.head(20))\n\n# Ignore records with broken launch dates\nplt.plot(count_7_days[7:]);\nplt.title(\"Number of projects launched over periods of 7 days\");","e8583da2":"count_7_days.index = launched.values\ncount_7_days = count_7_days.reindex(ks.index)","6aca00ec":"count_7_days.head(10)","b479b0ff":"baseline_data.join(count_7_days).head(10)","43cc0040":"def time_since_last_project(series):\n    # Return the time in hours\n    return series.diff().dt.total_seconds() \/ 3600.\n\ndf = ks[['category', 'launched']].sort_values('launched')\ntimedeltas = df.groupby('category').transform(time_since_last_project)\ntimedeltas.head(20)","873f0737":"# Final time since last project\ntimedeltas = timedeltas.fillna(timedeltas.median()).reindex(baseline_data.index)\ntimedeltas.head(20)","a41e8acd":"plt.hist(ks.goal, range=(0, 100000), bins=50);\nplt.title('Goal');","a269e7f8":"plt.hist(np.sqrt(ks.goal), range=(0, 400), bins=50);\nplt.title('Sqrt(Goal)');","c07bc237":"plt.hist(np.log(ks.goal), range=(0, 25), bins=50);\nplt.title('Log(Goal)');","9eb9f7b6":"# Interactions\n\nOne of the easiest ways to create new features is by combining categorical variables. For example, if one record has the country `\"CA\"` and category `\"Music\"`, you can create a new value `\"CA_Music\"`. This is a new categorical feature that can provide information about correlations between categorical variables. This type of feature is typically called an **interaction**. \n\nIn general, you would build interaction features from all pairs of categorical features. You can make interactions from three or more features as well, but you'll tend to get diminishing returns.\n\nPandas lets us simply add string columns together like normal Python strings.","05754b4e":"The distribution of the values in `\"goal\"` shows that most projects have goals less than 5000 USD. However, there is a long tail of goals going up to $100,000. Some models work better when the features are normally distributed, so it might help to transform the goal values. Common choices for this are the square root and natural logarithm. These transformations can also help constrain outliers.\n\nHere I'll transform the goal feature using the square root and log functions as examples.","ce7ffa43":"Now that we have the counts, we need to adjust the index so we can join it with the other training data. ","533a8250":"# Transforming numerical features","ce5d9297":"Now join the new feature with the other data again using `.join` since we've matched the index.","356f9c13":"There are seven projects that have obviously wrong launch dates, but we'll just ignore them. Again, this is something you'd handle when cleaning the data, but it's not the focus of this mini-course.\n\nWith a timeseries index, you can use `.rolling` to select time periods as the window. For example `launched.rolling('7d')` creates a rolling window that contains all the data in the previous 7 days. The window contains the current record, so if we want to count all the *previous* projects but not the current one, we'll need to subtract 1. We'll plot the results to make sure it looks right.","3a4e035a":"# Time since the last project in the same category\n\nDo projects in the same category compete for donors? If you're trying to fund a video game and another game project was just launched, you might not get as much money. We can capture this by calculating the time since the last launch project in the same category.\n\nA handy method for performing operations within groups is to use `.groupby` then `.transform`. The `.transform` method takes a function then passes a series or dataframe to that function for each group. This returns a dataframe with the same indices as the original dataframe. In our case, we'll perform a groupby on `\"category\"` and use transform to calculate the time differences for each category.","c681ad96":"We get `NaN`s here for projects that are the first in their category. We'll need to fill those in with something like the mean or median. We'll also need to reset the index so we can join it with the other data.","01aa72a2":"# Number of projects in the last week\n\nNext, we'll count the number of projects launched in the preceeding week for each record. I'll use the `.rolling` method on a series with the `\"launched\"` column as the index. I'll create the series, using `ks.launched` as the index and `ks.index` as the values, then sort the times. Using a time series as the index allows us to define the rolling window size in terms of hours, days, weeks, etc.","190192af":"# Introduction\n\nCreating new features from the raw data is one of the best ways to improve your model. For example, when working with Kickstarter data, you can calculate the number of total projects in the last week and the duration of the fundraising period. The features you create are different for every dataset, so it takes a bit of creativity and experimentation. We're a bit limited here, since we're working with only one table. Typically you'll have access to multiple tables with relevant data that you can use to create new features.\n\nBut you can still see how to make new features using categorical features, and then a few examples of generated numerical features. ","e30c3241":"Then, we can label encode the interaction feature and add it to our data.","b891885f":"In the exercise, you'll build interaction terms for all pairs of categorical features.","e8d057f8":"The log transformation won't help our model since tree-based models are scale invariant. However, this should help if we had a linear model or neural network.\n\nOther transformations include squares and other powers, exponentials, etc. These might help the model discriminate, like the kernel trick for SVMs. Again, it takes a bit of experimentation to see what works. One method is to create a bunch of new features and later choose the best ones with feature selection algorithms.\n\n# Your Turn\n**[Try your hand at generating features](https:\/\/www.kaggle.com\/kernels\/fork\/5407501)** to improve performance on your model from the previous exercise.","3a042630":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https:\/\/www.kaggle.com\/learn\/feature-engineering\/discussion) to chat with other learners.*"}}