{"cell_type":{"aa339b35":"code","9ae1fddd":"code","33bc5d71":"code","f39b66d1":"code","9771d5d2":"code","dc4c0fc8":"code","c3ee0620":"code","32267ee8":"code","bb78c912":"code","e60bed0e":"code","0eaf05bf":"code","b3183353":"code","f5a19ce7":"code","14642195":"code","a236c023":"code","f315633c":"code","18af2e5e":"code","fde202a0":"code","69c9bf99":"code","1e58e3d4":"code","b5eece96":"code","0144b24c":"code","453a762a":"code","f4b75a0a":"code","a17c52d3":"code","7ca432de":"code","9333e214":"code","627d4fa9":"code","72151922":"code","9d8e4710":"code","6e1b0a9b":"code","4b6a8e43":"code","f4206215":"code","8ebe187e":"code","3091a116":"code","ad8bba03":"code","1a979e29":"code","7eebd750":"code","f14457de":"code","388b65cc":"code","ded056f1":"code","e234c074":"code","5b2bb7d3":"code","bc13d126":"code","a156636a":"markdown","8bfa123b":"markdown","9c7347f7":"markdown","cb691206":"markdown","a632135b":"markdown"},"source":{"aa339b35":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import explained_variance_score,mean_absolute_error,r2_score\nfrom time import time\n\nfrom sklearn.linear_model import LinearRegression, Ridge,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import ExtraTreesRegressor, RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline","9ae1fddd":"df = pd.read_csv('\/kaggle\/input\/diamonds\/diamonds.csv')","33bc5d71":"df.head()","f39b66d1":"plt.figure(figsize=(30,10))\nsns.relplot(x='carat',y='price',hue='clarity',alpha=.5,data=df)\nplt.xlabel('Weight')\nplt.ylabel('Price')","9771d5d2":"sns.displot(data=df,\n            x=\"carat\",\n            hue=\"cut\",\n            kind=\"kde\",\n            height=6,\n            multiple=\"fill\",\n            clip=(0, None),\n            palette=\"ch:start=.1,rot=-.1\")\nplt.xlabel('Weight')","dc4c0fc8":"plt.figure(figsize=(10,5))\nsns.histplot(x='price',hue='color',multiple=\"stack\",edgecolor=\".3\",linewidth=.5,\n    log_scale=True,palette='mako',data=df)\nplt.xlabel('Price')","c3ee0620":"plt.figure(figsize=(10,6))\nsns.barplot(x='clarity',y='price',palette='coolwarm',data=df)\nplt.xlabel('Clarity')\nplt.ylabel('Price')","32267ee8":"plt.figure(figsize=(20,10))\nplt.figure(figsize=(10,5))\nsns.histplot(x='depth',hue='color',multiple=\"stack\",edgecolor=\".3\",linewidth=.5,\n    log_scale=False,palette='cubehelix',data=df)\nplt.xlim(55,70)\nplt.xlabel('Depth')","bb78c912":"df.corr()","e60bed0e":"plt.figure(figsize=(10,6))\nsns.histplot(x='table',hue='color',multiple=\"stack\",edgecolor=\".3\",linewidth=.5,\n    log_scale=False,palette='cubehelix',data=df)\nplt.xlim(50,70)\nplt.xlabel('width of top of diamond relative to widest point')","0eaf05bf":"# NAs\nmissing_data = df.isnull() # Obtenemos los valores nulos dentro del dataset\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")","b3183353":"X = df[['carat','cut','color','clarity','table','x','y','z']]\ny = df['price']","f5a19ce7":"X = pd.get_dummies(X, columns=['cut','color','clarity'],drop_first=True, prefix='')","14642195":"X_train, X_test, y_train, y_test = train_test_split(X, y,test_size = 0.2)","a236c023":"sc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","f315633c":"regressors = [\n    KNeighborsRegressor(),\n    GradientBoostingRegressor(),\n    ExtraTreesRegressor(),\n    RandomForestRegressor(),\n    DecisionTreeRegressor(),\n    LinearRegression(),\n    Lasso(),\n    Ridge(),\n    LGBMRegressor(),\n    SVR()\n]","18af2e5e":"head = 10\nfor model in regressors[:head]:\n    start = time()\n    model.fit(X_train, y_train)\n    train_time = time() - start\n    start = time()\n    y_pred = model.predict(X_test)\n    predict_time = time()-start    \n    print(model)\n    print(\"\\tTraining time: %0.3fs\" % train_time)\n    print(\"\\tPrediction time: %0.3fs\" % predict_time)\n    print(\"\\tExplained variance:\", explained_variance_score(y_test, y_pred))\n    print(\"\\tMean absolute error:\", mean_absolute_error(y_test, y_pred))\n    print(\"\\tR2 score:\", r2_score(y_test, y_pred))\n    print()","fde202a0":"RandomForestRegressor().get_params().keys()","69c9bf99":"ExtraTreesRegressor().get_params().keys()","1e58e3d4":"LGBMRegressor().get_params().keys()","b5eece96":"param_grid_rf = [{\n    'max_depth':[2, 3, 4],\n    'max_features':[2, 3, 4, 5, 6],\n    'min_samples_split': [2,5,10,30],\n    'n_estimators' :[100,200,500,1000], \n}]","0144b24c":"gridRF = GridSearchCV(RandomForestRegressor(),\n                     param_grid_rf,\n                     cv=10,\n                     refit=True,\n                     n_jobs=-1).fit(X_train,y_train)","453a762a":"print(gridRF.best_params_,'\\n')\nprint(gridRF.best_estimator_,'\\n')","f4b75a0a":"FinalModelRF = RandomForestRegressor(**gridRF.best_params_)","a17c52d3":"FinalModelRF.fit(X_train,y_train)","7ca432de":"y_predRF = FinalModelRF.predict(X_test)","9333e214":"# Print the model score on the test data using GridSearchCV score method\nprint(explained_variance_score(y_test, y_predRF))\nprint(mean_absolute_error(y_test, y_predRF))\nprint(r2_score(y_test, y_predRF))","627d4fa9":"sns.distplot(y_predRF-y_test)","72151922":"param_grid_etr = [{\n    'max_depth':[2, 3, 4],\n    'max_features':[2, 3, 4, 5, 6],\n    'min_samples_split': [2,5,10,30],\n    'n_estimators' :[100,200,500,1000], \n}]","9d8e4710":"gridETR = GridSearchCV(ExtraTreesRegressor(),\n                       param_grid_etr,\n                       cv=10,\n                       refit=True,\n                       n_jobs=-1).fit(X_train,y_train)","6e1b0a9b":"print(gridETR.best_params_,'\\n')\nprint(gridETR.best_estimator_,'\\n')","4b6a8e43":"FinalModelETR = ExtraTreesRegressor(**gridETR.best_params_)","f4206215":"FinalModelETR.fit(X_train,y_train)","8ebe187e":"y_predETR = FinalModelETR.predict(X_test)","3091a116":"# Print the model score on the test data using GridSearchCV score method\nprint(explained_variance_score(y_test, y_predETR))\nprint(mean_absolute_error(y_test, y_predETR))\nprint(r2_score(y_test, y_predETR))","ad8bba03":"sns.distplot(y_predETR-y_test)","1a979e29":"lgbm_params = {\"learning_rate\": [0.01, 0.03, 0.05, 0.1, 0.5],\n               \"n_estimators\": [500, 1000, 1500],\n               \"max_depth\":[3,5,8]}","7eebd750":"gridLGBM = GridSearchCV(LGBMRegressor(),\n                        lgbm_params,\n                        cv=10,\n                        refit=True,\n                        n_jobs=-1).fit(X_train,y_train)","f14457de":"print(gridLGBM.best_params_,'\\n')\nprint(gridLGBM.best_estimator_,'\\n')","388b65cc":"FinalModelLGBM = LGBMRegressor(**gridLGBM.best_params_)","ded056f1":"FinalModelLGBM.fit(X_train,y_train)","e234c074":"y_predLGBM = FinalModelLGBM.predict(X_test)","5b2bb7d3":"# Print the model score on the test data using GridSearchCV score method\nprint(explained_variance_score(y_test, y_predLGBM))\nprint(mean_absolute_error(y_test, y_predLGBM))\nprint(r2_score(y_test, y_predLGBM))","bc13d126":"sns.distplot(y_predLGBM-y_test)","a156636a":"## ExtraTreesRegression","8bfa123b":"## Random Forest","9c7347f7":"## Tuning the three best models","cb691206":"price price in US dollars (\\$326--\\$18,823)\n\ncarat weight of the diamond (0.2--5.01)\n\ncut quality of the cut (Fair, Good, Very Good, Premium, Ideal)\n\ncolor diamond colour, from J (worst) to D (best)\n\nclarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best))\n\nx length in mm (0--10.74)\n\ny width in mm (0--58.9)\n\nz depth in mm (0--31.8)\n\ndepth total depth percentage = z \/ mean(x, y) = 2 * z \/ (x + y) (43--79)\n\ntable width of top of diamond relative to widest point (43--95)","a632135b":"## LGBM Regression"}}