{"cell_type":{"81a3fbb9":"code","f39f3a48":"code","fbbe96fd":"code","e98a7b54":"code","55e21128":"code","4052e7a2":"code","76e11e89":"code","4b970f09":"code","aa7284c7":"code","64814328":"code","f340b603":"code","17fd3c05":"code","5a0248f4":"code","d3814a7e":"code","ebd94bbe":"code","09bdd4b7":"markdown","b7716e89":"markdown","1fd6585e":"markdown","01a1ee73":"markdown","53938e55":"markdown","c9250214":"markdown","3b353162":"markdown","61df2226":"markdown"},"source":{"81a3fbb9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f39f3a48":"#user defined function\ndef return_tuple():\n    t = (1,2,3)\n    return t #returning t tuple\na,s,d = return_tuple() #a defined as 1,b 2, c 3\nprint(a,s,d)","fbbe96fd":"#scope (global,local,builtins)\nx = 5\ndef func():\n    x = 10       \n    return x\nprint(x) \nprint(func())","e98a7b54":"x = 5\ndef func1():\n    return x\nprint(x)\nprint(func1())","55e21128":"import builtins\ndir(builtins)","4052e7a2":"##nested functions are unified(func inside func) functions   example:\ndef f():\n    e=a+2\n    def f2():\n        e=3\n        return e\n    return a\nprint(f())","76e11e89":"##default and flexible arguments \ndef k(a,b,c=4):\n    a = b + c\n    print(a)\nk(1,2,3)    ","4b970f09":"#flexible *args\ndef k2(*a):\n    for i in a:\n        print(i)\nk2(6,5,6,7)\nprint(\"\")\nk2(2)\nprint(\"\")\nk2()","aa7284c7":"#flexible *kwargs\ndef f_dict(**a):\n    for key,value in a.items(): #-> provides to see dictionaries' key and value\n        print(key,value)\nf_dict(kind = \"cake\",flavour = \"banana\",piece = 12)\nprint(f_dict)","64814328":"#making lambda function\ndef sqrt(a):\n    return a**0.5 #this is common way when write funcs\nprint(sqrt(16))\nsqrt2 = lambda a: a**0.5 # this is lambda way\nprint(sqrt2(16))\n\n    ","f340b603":"#anonymous func. -> map()\nl = [1,2,3,4,5]\na = map(lambda a: a**0.5,l)  #this will apply function for all items in the list\nprint(list(a))","17fd3c05":"#zipping -- zip()  ->it is just like cartesian product in the maths, but a bit different\nl1 = [1,2,3,4]\nl2 = [5,6,7,8] \nnew = list(zip(l1,l2))\nprint(new)\n#unzipping\nunzipped = zip(*new)\nunlist1,unlist2=list(unzipped) #unzip returned tuple\nprint(type(unlist1))\n","5a0248f4":"##LIST COMPREHENSION\nliste = [1,2,3,4,5]\nliste2 = [i+2 for i in liste] \nprint(liste2)","d3814a7e":"#another example\nliste3 = [i+5 if i>3 else i-2 if i <= 3 else i+3 for i in liste]\nprint(liste3)         #else i-2 if i <= 3 -> replace elif\n                     # elif i<=3:\n                    #     i = i-2  ","ebd94bbe":"data = pd.read_csv(\"..\/input\/metal_bands_2017.csv\", encoding = \"ISO-8859-1\")\navrg = sum(data.fans)\/len(data.fans)\ndata[\"admiration\"] = [\"high\" if i > avrg else \"low\" for i in data.fans]\nprint(data.admiration,data.fans)","09bdd4b7":"Now there are two multiplication sign. It means you can make dictionary.As you can see at line 5.","b7716e89":"We see a multiplication sign near the  **a** . It means you can enter values as much as you want. Or you don't enter.","1fd6585e":"That's all for now,\n**Thanks for checking out!**","01a1ee73":"I'll try it with a dataset ","53938e55":"In here we write for loop in a line. but this time we fristly write result, then loop","c9250214":"In this case there are 2 xs, global x and local x,\nglobal x is in the top, local is under the function.\nWhen you write \"return x * without giving an x value under function(local), python looks at global space. if there is an x value at local space, x's value is in local\n","3b353162":"In here, **c** has a default value, 4. It means if you do not enter a value for **c** , it automatically make it 4. a and b don't have a default so you should enter a value for 'em.","61df2226":"when there is no x value in local and global, last choice, python will look at **builtins** "}}