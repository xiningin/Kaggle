{"cell_type":{"ae836697":"code","6ff3ab07":"code","6abe7603":"code","ef822fd8":"code","ff2fc1ab":"code","f7182a95":"code","40fc29e9":"code","937d3166":"code","8c448a62":"code","7cfc03f5":"code","64f8b7b2":"code","05933378":"code","3776b93c":"markdown","21507742":"markdown","9a2b5123":"markdown","3f257f71":"markdown","ae5939fa":"markdown","377d187d":"markdown","8fad9733":"markdown","0dce91a6":"markdown","66cb3f4a":"markdown","2df4d65d":"markdown"},"source":{"ae836697":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6ff3ab07":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_log_error","6abe7603":"df=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv', index_col='Id')\ndtest=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv', index_col='ForecastId')","ef822fd8":"y1=df['ConfirmedCases']\ny2=df['Fatalities']\ndf.drop('ConfirmedCases', axis=1, inplace=True)\ndf.drop('Fatalities', axis=1, inplace=True)","ff2fc1ab":"df['check']=1\ndtest['check']=2\ncombo=pd.concat([df,dtest])\n\ndef date_split(date):\n    d=date.str.split('-', n=1, expand=True)\n    return d[1]\n\ncombo['MM_DD']= date_split(combo['Date'])\n\ncombo['Province_State']=combo['Province_State'].fillna(0)","f7182a95":"le=LabelEncoder()\ncombo['MM_DD']=le.fit_transform(combo['MM_DD'])\ncombo=pd.get_dummies(combo)\n\ndf1=combo[combo['check']==1]\ndtest1=combo[combo['check']==2]","40fc29e9":"df1.drop('check', axis=1, inplace=True)\ndtest1.drop('check', axis=1, inplace=True)","937d3166":"X_train1, X_valid1, y_train1, y_valid1 = train_test_split(df1, y1, train_size=0.8, test_size=0.2, random_state=0)\nX_train2, X_valid2, y_train2, y_valid2 = train_test_split(df1, y2, train_size=0.8, test_size=0.2, random_state=0)","8c448a62":"ef= ExtraTreesRegressor(n_estimators=15, random_state=3 )\np2=ef.fit(X_train1, y_train1).predict(X_valid1)\nrmsle2=np.sqrt(mean_squared_log_error(y_valid1 , p2))\nprint(rmsle2)","7cfc03f5":"ef2= ExtraTreesRegressor(n_estimators=29,criterion='friedman_mse', random_state=7)\np3=ef2.fit(X_train2, y_train2).predict(X_valid2)\nrmsle3=np.sqrt(mean_squared_log_error(y_valid2 , p3))\nprint(rmsle3)","64f8b7b2":"pre1=ef.fit(df1,y1).predict(dtest1)\npre2=ef2.fit(df1,y2).predict(dtest1)","05933378":"output=pd.DataFrame({'ForecastId': dtest.index, 'ConfirmedCases':pre1, 'Fatalities':pre2})\noutput.to_csv('submission.csv', index=False)","3776b93c":"Output csv file generation","21507742":"Importing libraries","9a2b5123":"Train, predict and evaluate by using ExtraTreesRegressor and RMSLE - For Fatalities","3f257f71":"Import datasets","ae5939fa":"Combine datasets and apply similar preprocessing techniques","377d187d":"Train, predict and evaluate by using ExtraTreesRegressor and RMSLE - For ConfirmedCase","8fad9733":"Final fit and prediction","0dce91a6":"Remove signal columns from the preprocessed datasets","66cb3f4a":"Separate target columns and remove them from training set","2df4d65d":"Train-Test-Split"}}