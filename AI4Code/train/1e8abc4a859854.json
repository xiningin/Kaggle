{"cell_type":{"65235aab":"code","8872b06e":"code","d5ca776a":"code","50ae0ce6":"code","d28ef41f":"code","b2c6ab34":"code","b1d075f7":"code","7c07a37e":"code","aa2f1f30":"code","33034d4c":"code","ebc81956":"code","b3a9ad9d":"code","f981e6c8":"code","8f4944ed":"code","252df31f":"code","3f3bff8c":"code","4e762bb9":"code","cddf9550":"code","3604c602":"code","276019ef":"code","819fb323":"code","1800ca7c":"code","5596ebb6":"code","51f37fbb":"code","cb7a7952":"code","3031ef82":"code","46cb6947":"code","bb4aaaa8":"code","e1fd2b4a":"code","1c95e9e9":"code","6a64733d":"code","4f338804":"code","c528ff40":"code","bfa75498":"markdown","ec3afbe1":"markdown","eded7779":"markdown","e7691a2a":"markdown","9564d715":"markdown","b7be9ef5":"markdown","5a529974":"markdown","0db6f956":"markdown","ce98be3d":"markdown","e7d75c0d":"markdown","ee432f57":"markdown","de7c80a0":"markdown","53eca073":"markdown","e083004f":"markdown"},"source":{"65235aab":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8872b06e":"df = pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","d5ca776a":"df","50ae0ce6":"df.shape","d28ef41f":"df.drop('No', axis = 1, inplace=True)","b2c6ab34":"df.info()","b1d075f7":"df.isnull().sum()","7c07a37e":"df.describe()","aa2f1f30":"plt.figure(figsize=(20, 17))\nmatrix = np.triu(df.corr())\nsns.heatmap(df.corr(), annot=True, linewidth=0.8, mask=matrix, cmap=\"rocket\")\n\nplt.title('Features Correlation Heatmap', fontsize = 25)","33034d4c":"fig, axes = plt.subplots(2,2, figsize = (15,15))\nfig.suptitle('useful histograms', fontsize = 18, y = 0.93)\n\nsns.histplot(df['X2 house age'],ax = axes[0,0], kde = True, bins = 20)\nsns.histplot(df['Y house price of unit area'],ax = axes[0,1], kde = True, bins = 20)\nsns.histplot(df['X5 latitude'],ax = axes[1,0],  kde = True, bins = 20)\nsns.histplot(df['X6 longitude'],ax = axes[1,1],  kde = True, bins = 20)","ebc81956":"fig, axes = plt.subplots(1,3, figsize = (21,7))\nfig.suptitle('useful features scatter plots', fontsize = 18)\n\nsns.scatterplot(data = df, x = 'Y house price of unit area', y ='X2 house age', ax = axes[0])\nsns.scatterplot(data = df, x = 'Y house price of unit area', y ='X5 latitude', ax = axes[1])\nsns.scatterplot(data = df, x = 'Y house price of unit area', y ='X6 longitude', ax = axes[2])","b3a9ad9d":"fig, axes = plt.subplots(2,2, figsize = (10,10))\nfig.suptitle('useful features boxplot', fontsize= 18)\n\nsns.boxplot(data = df, y = 'Y house price of unit area', ax = axes[0,0])\nsns.boxplot(data = df, y = 'X2 house age', ax = axes[0,1])\nsns.boxplot(data = df, y = 'X5 latitude', ax = axes[1,0])\nsns.boxplot(data = df, y = 'X6 longitude', ax = axes[1,1])\n\nfig.tight_layout()","f981e6c8":"import pandas_profiling as pp\n\npp.ProfileReport(df)","8f4944ed":"X = df.drop('Y house price of unit area', axis = 1)\ny = df['Y house price of unit area']","252df31f":"# polynomial features\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly_converter = PolynomialFeatures(degree = 2, include_bias=False)\npoly_features = poly_converter.fit_transform(X)","3f3bff8c":"poly_features.shape","4e762bb9":"# split data to test and train\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","cddf9550":"# standardization\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","3604c602":"# ridgcv model\nfrom sklearn.linear_model import RidgeCV\n\nridge_cv_model = RidgeCV(alphas=(0.1, 1, 10), scoring = 'neg_mean_absolute_error')\nridge_cv_model.fit(X_train, y_train)","276019ef":"ridge_cv_model.alpha_","819fb323":"y_pred_ridge = ridge_cv_model.predict(X_test)","1800ca7c":"# model evaluation\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nMAE_ridge = mean_absolute_error(y_test, y_pred_ridge)\nMSE_ridge = mean_squared_error(y_test, y_pred_ridge)\nRMSE_ridge = np.sqrt(MSE_ridge)\n\nprint(\"MAE_ridge : \", MAE_ridge)\nprint(\"MSE_ridge : \", MSE_ridge)\nprint(\"RMSE_ridge : \", RMSE_ridge)\nprint(\"Mean : \", y.mean())","5596ebb6":"# lassocv model\nfrom sklearn.linear_model import LassoCV\n\nlasso_model_cv = LassoCV(eps = 0.01, n_alphas = 100, cv = 5, max_iter=10000)\nlasso_model_cv.fit(X_train,y_train)","51f37fbb":"lasso_model_cv.alpha_","cb7a7952":"y_pred_lasso = lasso_model_cv.predict(X_test)","3031ef82":"# model evaluation\n\nMAE_lasso = mean_absolute_error(y_test, y_pred_lasso)\nMSE_lasso = mean_squared_error(y_test, y_pred_lasso)\nRMSE_lasso = np.sqrt(MSE_lasso)\n\nprint(\"MAE_lasso : \", MAE_lasso)\nprint(\"MSE_lasso : \", MSE_lasso)\nprint(\"RMSE_lasso : \", RMSE_lasso)\nprint(\"Mean : \", y.mean())","46cb6947":"lasso_model_cv.coef_","bb4aaaa8":"# elasticnetcv model\nfrom sklearn.linear_model import ElasticNetCV\n\nelastic_model = ElasticNetCV(l1_ratio=[.1, .5, .7,.9, .95, .99, 1], cv = 5, max_iter=100000)\nelastic_model.fit(X_train, y_train)","e1fd2b4a":"elastic_model.l1_ratio_","1c95e9e9":"y_pred_elastic = elastic_model.predict(X_test)","6a64733d":"# model evaluation\n\nMAE_elas = mean_absolute_error(y_test, y_pred_elastic)\nMSE_elas = mean_squared_error(y_test, y_pred_elastic)\nRMSE_elas = np.sqrt(MSE_elas)\n\nprint(\"MAE_elas : \", MAE_elas)\nprint(\"MSE_elas : \", MSE_elas)\nprint(\"RMSE_elas : \", RMSE_elas)\nprint(\"Mean : \", y.mean())","4f338804":"plt.figure(figsize=(8,6))\n\nmodel_names = ['RidgeCV', 'LassoCV', 'ElasticNetCV']\nmodel_errors = [RMSE_ridge, RMSE_lasso, RMSE_elas]\n\n# plot\nsns.barplot(x = model_names, y = model_errors, palette='cool')\n\n# titles and styling\nplt.xlabel('Models', fontsize = 15)\nplt.ylabel('RMSE', fontsize = 15)\nplt.title('Comparing Model RMSE errors', fontsize = 18, y=1.05)\nplt.ylim(5,6)\nplt.axhline(RMSE_ridge, color = '#ff5e5e', ls = '-.')","c528ff40":"pd.DataFrame(model_errors, index=model_names, columns = ['Model Errors'])","bfa75498":"# Read the Dataset","ec3afbe1":"# EDA (Exploratory Data Analysis)","eded7779":"# 1) RidgCV","e7691a2a":"# Data Preprocessing","9564d715":"# Import Necessary Libraries","b7be9ef5":"# 3) ElasticNetCV","5a529974":"# Conclusion","0db6f956":"### some important plots","ce98be3d":"# Model Building","e7d75c0d":"in this example ridge regression is the best and lasso regression is the worst model.","ee432f57":"no missing data","de7c80a0":"# 2) Pandas Profiling","53eca073":"# 1) Manual","e083004f":"# 2) LassoCV"}}