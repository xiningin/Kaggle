{"cell_type":{"a66781e1":"code","b69f1eaf":"code","1dde052f":"code","c74143c6":"code","ca28b377":"code","88745fef":"code","e071165b":"code","4c1f7e49":"code","9c873aa1":"code","acc6ab86":"code","4f7a83d4":"code","a6338c93":"code","336f8ff9":"code","1c041a3f":"code","da0e78a8":"code","bbab5595":"code","24e13d0f":"code","18e4e0fd":"code","763ab03b":"code","239f9e66":"code","f4a8215f":"code","cdbc7cb9":"code","86fc9e6b":"code","3410ddb2":"code","925d8c38":"code","1377a575":"code","7fc1d4bc":"code","b17dde19":"code","8b46904e":"markdown","42bb572e":"markdown","3400efb6":"markdown","392ff03f":"markdown"},"source":{"a66781e1":"# the following three lines are suggested by the fast.ai course\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","b69f1eaf":"# hide warnings\nimport warnings\nwarnings.simplefilter('ignore')","1dde052f":"# the fast.ai library, used to easily build neural networks and train them\nfrom fastai import *\nfrom fastai.vision import *\nimport torchvision.models","c74143c6":"# to get all files from a directory\nimport os\n\n# to easier work with paths\nfrom pathlib import Path\n\n# to read and manipulate .csv-files\nimport pandas as pd","ca28b377":"INPUT = Path(\"..\/input\/digit-recognizer\")\nos.listdir(INPUT)","88745fef":"train_df = pd.read_csv(INPUT\/\"train.csv\")\ntrain_df.head(3)","e071165b":"test_df = pd.read_csv(INPUT\/\"test.csv\")\ntest_df.head(3)","4c1f7e49":"TRAIN = Path(\"..\/train\")\nTEST = Path(\"..\/test\")","9c873aa1":"# Create training directory\nfor index in range(10):\n    try:\n        os.makedirs(TRAIN\/str(index))\n    except:\n        pass","acc6ab86":"#Create test directory\ntry:\n    os.makedirs(TEST)\nexcept:\n    pass","4f7a83d4":"# import numpy to reshape array from flat (1x784) to square (28x28)\nimport numpy as np\n\n# import PIL to display images and to create images from arrays\nfrom PIL import Image\n\ndef saveDigit(digit, filepath):\n    digit = digit.reshape(28,28)\n    digit = digit.astype(np.uint8)\n\n    img = Image.fromarray(digit)\n    img.save(filepath)","a6338c93":"# save training images\nfor index, row in train_df.iterrows():\n    \n    label,digit = row[0], row[1:]\n    \n    folder = TRAIN\/str(label)\n    filename = f\"{index}.jpg\"\n    filepath = folder\/filename\n    \n    digit = digit.values\n    \n    saveDigit(digit, filepath)","336f8ff9":"# save testing images\nfor index, digit in test_df.iterrows():\n\n    folder = TEST\n    filename = f\"{index}.jpg\"\n    filepath = folder\/filename\n    \n    digit = digit.values\n    \n    saveDigit(digit, filepath)","1c041a3f":"# transforms\ntfms = get_transforms(do_flip=False)","da0e78a8":"data = ImageDataBunch.from_folder(\n    path = TRAIN,\n    test = TEST,\n    valid_pct = 0.2,\n    bs = 256,\n    size = 28,\n    num_workers = 5,\n    ds_tfms = tfms\n).normalize(mnist_stats)","bbab5595":"# all the classes in data\nprint(data.classes)","24e13d0f":"resnet34_learn = Learner(data, torchvision.models.resnet34(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nresnet_learn = Learner(data, torchvision.models.resnet50(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\ngooglenet_learn = Learner(data, torchvision.models.googlenet(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nresnext_learn = Learner(data, torchvision.models.resnext50_32x4d(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nwideres_learn = Learner(data, torchvision.models.wide_resnet50_2(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)\nmobilenet_learn = Learner(data, torchvision.models.mobilenet_v2(pretrained=True), metrics=[error_rate, accuracy, top_k_accuracy], model_dir=\"\/tmp\/models\", callback_fns=ShowGraph)","18e4e0fd":"# for learn in model:\n#     learn.lr_find()\n#     learn.recorder.plot(suggestion=True)","763ab03b":"%%time\nresnet34_learn.fit_one_cycle(10)","239f9e66":"%%time\nresnet_learn.fit_one_cycle(10)","f4a8215f":"%%time\ngooglenet_learn.fit_one_cycle(10)","cdbc7cb9":"%%time\nresnext_learn.fit_one_cycle(10)","86fc9e6b":"%%time\nwideres_learn.fit_one_cycle(10)","3410ddb2":"%%time\nmobilenet_learn.fit_one_cycle(10)","925d8c38":"model = [resnet_learn, googlenet_learn, resnext_learn, wideres_learn, mobilenet_learn]","1377a575":"for learn in model:\n    interp = ClassificationInterpretation.from_learner(learn)\n    interp.plot_top_losses(9, figsize=(7, 7))\n    interp.plot_confusion_matrix()","7fc1d4bc":"ImageId = [int(os.path.splitext(path)[0])+1 for path in os.listdir(TEST)]","b17dde19":"model_name = ['resnet', 'googlenet', 'resnext', 'wideres', 'mobilenet']\ni = 0\nfor learn in model:\n    class_score, y = learn.get_preds(DatasetType.Test)\n    class_score = np.argmax(class_score, axis=1)\n    submission  = pd.DataFrame({\"ImageId\": ImageId,\"Label\": class_score})\n    submission.to_csv(\"submission_\"+str(model_name[i])+\".csv\", index=False)\n    i += 1","8b46904e":"# Prediction","42bb572e":"## Explore Data","3400efb6":"# Training","392ff03f":"## Set up environment"}}