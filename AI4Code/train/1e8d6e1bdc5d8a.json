{"cell_type":{"aa0f5489":"code","55c2db7e":"code","266c4bbf":"code","0f57d68f":"code","72ee3865":"code","9819157a":"code","c0394918":"code","8fd1a172":"code","23a6f295":"code","4539258f":"code","12bb09a3":"code","2ca4142a":"code","a201bb31":"code","432fdcf4":"markdown","450a5645":"markdown","1ee8afac":"markdown","0ae51fbc":"markdown"},"source":{"aa0f5489":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas\n%matplotlib inline\n\nfrom numpy import genfromtxt\nfrom scipy.stats import multivariate_normal\nfrom sklearn.metrics import f1_score","55c2db7e":"from sklearn.metrics import f1_score\ny_true = [0, 0, 1, 0, 1, 1]\ny_pred = [0, 1, 1, 1, 1, 0]\n#f1_score(y_true, y_pred, average='binary')  \n \n\nf1_score(y_true, y_pred, average=None)\n","266c4bbf":"#tr_data = read_dataset('tr_server_data.csv') \n#cv_data = read_dataset('cv_server_data.csv') \n#gt_data = read_dataset('gt_server_data.csv')\n\nimport csv\nimport numpy\nfilename = '..\/input\/anomaly-detection-sample-dataset\/tr_server_data.csv'\na2 ='..\/input\/anomaly-detection-sample-dataset\/cv_server_data.csv'\na3 = '..\/input\/anomaly-detection-sample-dataset\/gt_server_data.csv'\n\n\nraw_data = open(filename, 'rt')\nreader = csv.reader(raw_data, delimiter=',', quoting=csv.QUOTE_NONE)\nx = list(reader)\ntr_data = numpy.array(x).astype('float')\n\nraw_data = open(a2, 'rt')\nreader = csv.reader(raw_data, delimiter=',', quoting=csv.QUOTE_NONE)\nx = list(reader)\ncv_data = numpy.array(x).astype('float')\n\nraw_data = open(a3, 'rt')\nreader = csv.reader(raw_data, delimiter=',', quoting=csv.QUOTE_NONE)\nx = list(reader)\ngt_data = numpy.array(x).astype('float')\n\n\nn_training_samples = tr_data.shape[0]\nn_dim = tr_data.shape[1]\n\nprint('Number of datapoints in training set: %d' % n_training_samples)\nprint('Number of dimensions\/features: %d' % n_dim)\n\n\nprint(tr_data[1:5,:])\n\nplt.xlabel('Latency (ms)')\nplt.ylabel('Throughput (mb\/s)')\nplt.plot(tr_data[:,0],tr_data[:,1],'bx')\nplt.show()","0f57d68f":"def read_dataset(filePath,delimiter=','):\n    return genfromtxt(filePath, delimiter=delimiter)\n\ndef estimateGaussian(dataset):\n    mu = np.mean(dataset, axis=0)\n    sigma = np.cov(dataset.T)\n    return mu, sigma\n    \ndef multivariateGaussian(dataset,mu,sigma):\n    p = multivariate_normal(mean=mu, cov=sigma)\n    return p.pdf(dataset)\n\ndef selectThresholdByCV(probs,gt):\n    best_epsilon = 0\n    best_f1 = 0\n    f = 0\n    stepsize = (max(probs) - min(probs)) \/ 1000\n    epsilons = np.arange(min(probs),max(probs),stepsize)\n    for epsilon in np.nditer(epsilons):\n\n        predictions = (probs < epsilon) \n        #print(predictions)\n        f = f1_score(gt, predictions,average='binary')\n        #print(f)\n        #print('------')\n        if f > best_f1:\n            #print('----')\n            best_f1 = f\n            best_epsilon = epsilon\n    \n    return best_f1, best_epsilon","72ee3865":"mu, sigma = estimateGaussian(tr_data)\np = multivariateGaussian(tr_data,mu,sigma)","9819157a":"#selecting optimal value of epsilon using cross validation\np_cv = multivariateGaussian(cv_data,mu,sigma)\nfscore, ep = selectThresholdByCV(p_cv,gt_data)\nprint(ep)","c0394918":"#selecting outlier datapoints \n\noutliers = np.asarray(np.where(p < ep))","8fd1a172":"plt.figure()\nplt.xlabel('Latency (ms)')\nplt.ylabel('Throughput (mb\/s)')\nplt.plot(tr_data[:,0],tr_data[:,1],'bx')\nplt.plot(tr_data[outliers,0],tr_data[outliers,1],'ro')\nplt.show()","23a6f295":"from sklearn import svm","4539258f":"# use the same dataset\ntr_data = read_dataset('..\/input\/anomaly-detection-sample-dataset\/tr_server_data.csv')\ncv_data = read_dataset('..\/input\/anomaly-detection-sample-dataset\/cv_server_data.csv') \ngt_data = read_dataset('..\/input\/anomaly-detection-sample-dataset\/gt_server_data.csv')","12bb09a3":"clf = svm.OneClassSVM(nu=0.05, kernel=\"rbf\", gamma=0.02)\nclf.fit(tr_data)","2ca4142a":"pred = clf.predict(tr_data)\n\n# inliers are labeled 1, outliers are labeled -1\nnormal = tr_data[pred == 1]\nabnormal = tr_data[pred == -1]","a201bb31":"plt.figure()\nplt.plot(normal[:,0],normal[:,1],'bx')\nplt.plot(abnormal[:,0],abnormal[:,1],'ro')\nplt.xlabel('Latency (ms)')\nplt.ylabel('Throughput (mb\/s)')\nplt.show()","432fdcf4":"## Anomaly Detection Using One-Class SVM","450a5645":"So now you can easily use the predict function to make predictions using a `2d` array input","1ee8afac":"Gather a little more data and create a test set (another group of values) with labeled data. Labeled data means that you know if they were anomalies or not for each example in the set. Find at least a few examples which are anomalies. Make the predictions using a value of epsilon value (start with a low value). Calculate the F1 score for that epsilon (the F1 score of an epsilon is a value that tells you how accurate your predictions are with that epsilon ). The bigger the F1 , the better. Increment epsilon by a small value, calculate F1 for the new epsilon. Do this a couple of times and keep the epsilon with the best F1 score. Let\u2019s see the math and an example:\n\n\n\n\n\n","0ae51fbc":"If you learned or had afun playing with the notebook please upvote it, this will keep me motivated too :)"}}