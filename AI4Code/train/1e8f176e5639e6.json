{"cell_type":{"78874534":"code","e2e03c81":"code","a1d2e3a1":"code","64f03f87":"code","787f6dee":"code","88436c2f":"code","a3b6a1d2":"code","ed3e5417":"code","f7559339":"code","0347f186":"code","cbd0e5a6":"code","a781c344":"code","68852058":"code","263cbf01":"code","e0af670a":"code","b020b89a":"code","550f074c":"code","cf8ef6ae":"markdown","4da94a3d":"markdown","5c886e84":"markdown","199a30c6":"markdown","61f872bf":"markdown","2e680a83":"markdown","4e43a1dd":"markdown"},"source":{"78874534":"# import required packages\n\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nAUTO = tf.data.experimental.AUTOTUNE","e2e03c81":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","a1d2e3a1":"IMAGE_SIZE = [192, 192] # the size of the images\nEPOCS = 12\nBATCH_SIZE = 16\nDATASET_PATH = '\/kaggle\/input\/flower-classification-with-tpus\/tfrecords-jpeg-192x192'\nCLASSES = ['pink primrose',    'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea',     'wild geranium',     'tiger lily',           'moon orchid',              'bird of paradise', 'monkshood',        'globe thistle',         # 00 - 09\n           'snapdragon',       \"colt's foot\",               'king protea',      'spear thistle', 'yellow iris',       'globe-flower',         'purple coneflower',        'peruvian lily',    'balloon flower',   'giant white arum lily', # 10 - 19\n           'fire lily',        'pincushion flower',         'fritillary',       'red ginger',    'grape hyacinth',    'corn poppy',           'prince of wales feathers', 'stemless gentian', 'artichoke',        'sweet william',         # 20 - 29\n           'carnation',        'garden phlox',              'love in the mist', 'cosmos',        'alpine sea holly',  'ruby-lipped cattleya', 'cape flower',              'great masterwort', 'siam tulip',       'lenten rose',           # 30 - 39\n           'barberton daisy',  'daffodil',                  'sword lily',       'poinsettia',    'bolero deep blue',  'wallflower',           'marigold',                 'buttercup',        'daisy',            'common dandelion',      # 40 - 49\n           'petunia',          'wild pansy',                'primula',          'sunflower',     'lilac hibiscus',    'bishop of llandaff',   'gaura',                    'geranium',         'orange dahlia',    'pink-yellow dahlia',    # 50 - 59\n           'cautleya spicata', 'japanese anemone',          'black-eyed susan', 'silverbush',    'californian poppy', 'osteospermum',         'spring crocus',            'iris',             'windflower',       'tree poppy',            # 60 - 69\n           'gazania',          'azalea',                    'water lily',       'rose',          'thorn apple',       'morning glory',        'passion flower',           'lotus',            'toad lily',        'anthurium',             # 70 - 79\n           'frangipani',       'clematis',                  'hibiscus',         'columbine',     'desert-rose',       'tree mallow',          'magnolia',                 'cyclamen ',        'watercress',       'canna lily',            # 80 - 89\n           'hippeastrum ',     'bee balm',                  'pink quill',       'foxglove',      'bougainvillea',     'camellia',             'mallow',                   'mexican petunia',  'bromelia',         'blanket flower',        # 90 - 99\n           'trumpet creeper',  'blackberry lily',           'common tulip',     'wild rose']","64f03f87":"# Splitting the data to train val and test set. Please note the dataset is in tfrec for serial processing.\n\ntrain_set = tf.io.gfile.glob(DATASET_PATH + '\/train\/*.tfrec')\nval_set = tf.io.gfile.glob(DATASET_PATH + '\/val\/*.tfrec')\ntest_set = tf.io.gfile.glob(DATASET_PATH + '\/test\/*.tfrec')\n\n\n# List of all the tfrec files in the train set.\nprint('List of records for trainset')\ntrain_set","787f6dee":"# Function to parse the tf record and give us image, label combination.\ndef read_labeled_tfrecord(example):\n    feature_description = {\n        'image': tf.io.FixedLenFeature([], tf.string),\n        'class': tf.io.FixedLenFeature([], tf.int64)\n    }\n    example = tf.io.parse_single_example(example, feature_description)\n    \n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    \n    return image, label\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    \n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)","88436c2f":"# Load the dataset\ndef load_dataset(filesnames, labeled=True):\n    dataset = tf.data.TFRecordDataset(filesnames, num_parallel_reads=AUTO)\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    return dataset","a3b6a1d2":"# Training Dataset\ndef get_training_dataset():\n    dataset = load_dataset(train_set)\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Validation Dataset\ndef get_val_dataset():\n    dataset = load_dataset(val_set)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Test dataset\ndef get_test_dataset():\n    dataset = load_dataset(test_set, labeled=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO)\n    return dataset\n\n# Convert images to numpy\ndef batch_to_numpy(data):\n    images, labels = data;\n    \n    numpy_images = images.numpy()\n    numpy_labels = labels.numpy()\n    \n    return numpy_images, numpy_labels\n\ndef display_batch_of_images(databatch):\n    images, labels = batch_to_numpy(databatch)\n    \n    plt.figure(figsize=(50, 50))\n    for i, (image, label) in enumerate(zip(images, labels), start=1):\n        plt.subplot(10, 10, i)\n        fig = plt.imshow(image)\n        fig.axes.get_xaxis().set_visible(False)\n        fig.axes.get_yaxis().set_visible(False)\n        plt.title(label, fontsize=28)\n    plt.show()\n    \ndef decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image","ed3e5417":"#Load Train, Val and Test dataset from TFRec\n\ntraining_dataset = get_training_dataset()\nvalidation_datset = get_val_dataset()\ntest_dataset = get_test_dataset()","f7559339":"# Fetch 20 images for the training set\ntraining_dataset = training_dataset.unbatch().batch(20)\ntrain_batch = iter(training_dataset)\n\n# Plotting single image\nimages, labels = batch_to_numpy(next(train_batch));\n\n# get the first image\nimage = images[0].squeeze()\nplt.imshow(image)","0347f186":"# display multiple images\ndisplay_batch_of_images(next(train_batch))","cbd0e5a6":"import re\ndef count_data_items(filenames):\n    # the number of data items is written in the name of the .tfrec files, i.e. flowers00-230.tfrec = 230 data items\n    n = [int(re.compile(r\"-([0-9]*)\\.\").search(filename).group(1)) for filename in filenames]\n    return np.sum(n)\n\nNUM_TRAINING_IMAGES = count_data_items(train_set)\nNUM_VALIDATION_IMAGES = count_data_items(val_set)\nNUM_TEST_IMAGES = count_data_items(test_set)\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nprint('Dataset: {} training images, {} validation images, {} unlabeled test images'.format(NUM_TRAINING_IMAGES, NUM_VALIDATION_IMAGES, NUM_TEST_IMAGES))","a781c344":"with strategy.scope():\n    \n    pretrained_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False ,input_shape=[*IMAGE_SIZE, 3])\n    pretrained_model.trainable = False\n    \n    model = tf.keras.Sequential([\n        pretrained_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.Dense(len(CLASSES), activation='softmax')\n    ])","68852058":"model.compile(\n    optimizer='adam',\n    loss = 'sparse_categorical_crossentropy',\n    metrics=['sparse_categorical_accuracy']\n )\n\nmodel.summary()","263cbf01":"history = model.fit(\n    get_training_dataset(),\n    steps_per_epoch=STEPS_PER_EPOCH,\n    epochs=EPOCS,\n    validation_data=get_val_dataset()\n)","e0af670a":"acc = history.history['sparse_categorical_accuracy']\nval_acc = history.history['val_sparse_categorical_accuracy']\n\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(EPOCS)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","b020b89a":"test_ds = get_test_dataset() # since we are splitting the dataset and iterating separately on images and ids, order matters.\n\ntest_images_ds = test_ds.map(lambda image, idnum: image)\nprobabilities = model.predict(test_images_ds)\npredictions = np.argmax(probabilities, axis=-1)\nprint(predictions)\n","550f074c":"print('Generating submission.csv file...')\ntest_ids_ds = test_ds.map(lambda image, idnum: idnum).unbatch()\ntest_ids = next(iter(test_ids_ds.batch(NUM_TEST_IMAGES))).numpy().astype('U') # all in one batch\nnp.savetxt('submission.csv', np.rec.fromarrays([test_ids, predictions]), fmt=['%s', '%d'], delimiter=',', header='id,label', comments='')\n!head submission.csv","cf8ef6ae":"# Plot my dataset","4da94a3d":"Credits: https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu","5c886e84":"# Load Train, Val and Test dataset from TFRec","199a30c6":"# Extracting data from tfRecord\n(https:\/\/www.tensorflow.org\/tutorials\/load_data\/tfrecord)\n\nAs the dataset is in tfRec, we have to extract the features from the record.\nSo in our tfRecord, we have combination of image and class.","61f872bf":"# STEP 2\n\n1. TPU SUPPORT\n2. Loading higer resolution images (512x512)\n3. Data Augmentation","2e680a83":"# Flowers Classification Step 1 with CPU or GPU\n\nLets first build the basic model, and then incrementely we will add TPU support and Augmentations\n\n1. Reading the Data\n2. Splitting data to train, val and test test\n3. Displaying some of the sample images\n4. Get the pretrained model VGG\n5. Put the data in the model\n6. Get the prediction","4e43a1dd":"# Constant\nAdding some of the constants so that can be used later in the jupyter notebook.\nPlease note I am using low resolution images as I will be creating the entire pipeline on CPU and then train it on TPU."}}