{"cell_type":{"d7fd268f":"code","13000d2b":"code","86990e1e":"code","bbdfed85":"code","baadde58":"code","681a6705":"code","2100d832":"code","fbf19c60":"code","9cba59b0":"code","6054d97c":"code","b33fc519":"code","864c438e":"code","82c2ebc3":"code","7c08114f":"markdown","097e0878":"markdown","fd9761c3":"markdown"},"source":{"d7fd268f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13000d2b":"import matplotlib.pyplot as plt\n%matplotlib inline","86990e1e":"# Reading data from CSV\ndataset = pd.read_csv('\/kaggle\/input\/salary\/Salary.csv')\ndataset.head(5)","bbdfed85":"x=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1].values","baadde58":"plt.scatter(x,y)\nplt.plot(x,y)\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')","681a6705":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)","2100d832":"x_train_mean=x_train.mean()\ny_train_mean=y_train.mean()\nprint(x_train_mean,y_train_mean)","fbf19c60":"## Getting Coefficient values\nnum=0\nden=0\nfor r in range(len(x_train)):\n    num+=(x_train[r]-x_train_mean)*(y_train[r]-y_train_mean)\n    den+=(x_train[r]-x_train_mean)**2\nb1=num\/den\nb0=y_train_mean-b1*x_train_mean\nprint('Coefficients are:',float(b1),float(b0))","9cba59b0":"## function to Predict values\ndef prediction(data):\n    return b0+b1*data","6054d97c":"plt.scatter(x_train,y_train,color='green')\nplt.plot(x_train, prediction(x_train),color = 'blue')\nplt.title('training data vs predicted data on the training data')\nplt.xlabel('Exp')\nplt.ylabel('Salary')\nplt.show()","b33fc519":"plt.scatter(x_test,y_test,color='green')\nplt.plot(x_test, prediction(x_test),color = 'blue')\nplt.title('Test data vs predicted data on the training data')\nplt.xlabel('Exp')\nplt.ylabel('Salary')\nplt.show()","864c438e":"from sklearn import metrics","82c2ebc3":"print(metrics.mean_absolute_error(y_test, prediction(x_test)))\nprint(metrics.mean_squared_error(y_test, prediction(x_test)))\nprint(np.sqrt(metrics.mean_squared_error(y_test, prediction(x_test))))","7c08114f":"### Calculating Mean\n","097e0878":"### Model Evaluation Metrics for Regression","fd9761c3":"### Separating Training Data and the test Data"}}