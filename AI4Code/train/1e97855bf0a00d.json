{"cell_type":{"37a013c0":"code","1edcb906":"code","0396f460":"code","80b5c6a8":"code","6a3e463a":"code","6eb93117":"code","2bd3927a":"code","40b69ec8":"code","7c6045e0":"code","cc60b02f":"code","24d06ac9":"code","d73373ba":"code","0e6f9786":"code","7d67e07b":"code","ae148744":"code","4636e463":"code","1e3ba934":"code","9952de3f":"markdown","3971af87":"markdown","616da39e":"markdown","9a4d39ca":"markdown","bcfffadf":"markdown","56d80efa":"markdown","8263d947":"markdown","2dbf7ad9":"markdown","7a012a42":"markdown","80df11b6":"markdown","1f6f8366":"markdown","db086e1d":"markdown","606e4f80":"markdown","e6475fd8":"markdown","2311401b":"markdown","32d7b4a3":"markdown"},"source":{"37a013c0":"!pip freeze > '..\/working\/requirements.txt'","1edcb906":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport csv\nfrom tqdm import tqdm\nfrom glob import glob\nimport random\nimport cv2\nimport matplotlib.gridspec as gridspec\nimport seaborn as sns\nimport zlib\nimport itertools\nimport scipy\nimport skimage\nfrom skimage.transform import resize\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom tqdm import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline","0396f460":"imageSize=75\npath = \"..\/input\/nematode cells\/nematode cells\/\"\ndef get_data(folder):\n    X = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith('.'):\n            if folderName in ['interphase']:\n                label = 0\n            elif folderName in ['mitosis']:\n                label = 1             \n            else:\n                label = 2\n            for image_filename in tqdm(os.listdir(folder + folderName)):\n                img_file = cv2.imread(folder + folderName + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    return X,y\nX2, y2= get_data(path)\n\nX_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, test_size=0.2) \ny_trainHot2 = to_categorical(y_train2, num_classes = 2)\ny_testHot2 = to_categorical(y_test2, num_classes = 2)","80b5c6a8":"def plotHistogram(a):\n    \"\"\"\n    Plot histogram of RGB Pixel Intensities\n    \"\"\"\n    plt.figure(figsize=(10,5))\n    plt.subplot(1,2,1)\n    plt.imshow(a)\n    plt.axis('off')\n    histo = plt.subplot(1,2,2)\n    histo.set_ylabel('Count')\n    histo.set_xlabel('Pixel Intensity')\n    n_bins = 30\n    plt.hist(a[:,:,0].flatten(), bins= n_bins, lw = 0, color='r', alpha=0.5);\n    plt.hist(a[:,:,1].flatten(), bins= n_bins, lw = 0, color='g', alpha=0.5);\n    plt.hist(a[:,:,2].flatten(), bins= n_bins, lw = 0, color='b', alpha=0.5);\nplotHistogram(X_train2[1])","6a3e463a":"print(\"Interphase\")\nmultipleImages = glob(\"..\/input\/nematode cells\/nematode cells\/interphase\/**\")\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","6eb93117":"print(\"Mitosis\")\nmultipleImages = glob(\"..\/input\/nematode cells\/nematode cells\/mitosis\/**\")\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","2bd3927a":"map_characters = {0: 'Interphase', 1: 'Mitosis'}\ndict_characters=map_characters\ndf = pd.DataFrame()\ndf[\"labels\"]=y_train2\nlab = df['labels']\ndist = lab.value_counts()\nsns.countplot(lab)\nprint(dict_characters)","40b69ec8":"imageSize=75\npath = \"..\/input\/jurkat cells (merged only)\/jurkat cells (merged only)\/\"\ndef get_data(folder):\n    X = []\n    y = []\n    for folderName in os.listdir(folder):\n        if not folderName.startswith('.'):\n            if folderName in ['G1-G2-S']:\n                label = 0\n            elif folderName in ['Anaphase']:\n                label = 1\n            elif folderName in ['Metaphase']:\n                label = 2\n            elif folderName in ['Prophase']:\n                label = 3                                \n            elif folderName in ['Telophase']:\n                label = 4                \n            else:\n                label = 5\n            for image_filename in tqdm(os.listdir(folder + folderName)):\n                img_file = cv2.imread(folder + folderName + '\/' + image_filename)\n                if img_file is not None:\n                    img_file = skimage.transform.resize(img_file, (imageSize, imageSize, 3))\n                    img_arr = np.asarray(img_file)\n                    X.append(img_arr)\n                    y.append(label)\n    X = np.asarray(X)\n    y = np.asarray(y)\n    return X,y\nX, y= get_data(path)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\ny_trainHot = to_categorical(y_train, num_classes = 5)\ny_testHot = to_categorical(y_test, num_classes = 5)","7c6045e0":"plotHistogram(X_train[1])","cc60b02f":"print(\"Interphase\")\nmultipleImages = glob(\"..\/input\/jurkat cells (merged only)\/jurkat cells (merged only)\/G1-G2-S\/**\")\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","24d06ac9":"print(\"Mitosis\")\nmultipleImages = glob('..\/input\/jurkat cells (merged only)\/jurkat cells (merged only)\/Metaphase\/**')\ni_ = 0\nplt.rcParams['figure.figsize'] = (10.0, 10.0)\nplt.subplots_adjust(wspace=0, hspace=0)\nfor l in multipleImages[:25]:\n    im = cv2.imread(l)\n    im = cv2.resize(im, (128, 128)) \n    plt.subplot(5, 5, i_+1) #.set_title(l)\n    plt.imshow(cv2.cvtColor(im, cv2.COLOR_BGR2RGB)); plt.axis('off')\n    i_ += 1","d73373ba":"map_characters = {0: 'G1\/G2\/S', 1: 'Anaphase', 2: 'Metaphase',3:'Prophase',4:'Telophase'}\ndict_characters=map_characters\ndf = pd.DataFrame()\ndf[\"labels\"]=y_train\nlab = df['labels']\ndist = lab.value_counts()\nsns.countplot(lab)\nprint(dict_characters)","0e6f9786":"# dependencies for the fastai part of this kernel\n# note that this half of the kernel is independent of the analysis performed above\n# !pip install numpy==1.16.0\n# !pip install pandas==0.23.4\n# !pip install matplotlib==2.2.3\n# !pip install torch==1.0.0\n# !pip install fastai==1.0.39\nX=[];y=[];X_train=[];y_train=[];X_test=[];y_test=[]","7d67e07b":"# adapted from lesson 1 of the fastai v1 course (see forums.fast.ai for more detail)\n# turn on GPU and enable internet\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch\nimport fastai\nfrom fastai import *\nfrom fastai.vision import *\nfrom fastai.callbacks.hooks import *\n\nprint('numpy version: ',np.__version__)\nprint('pandas version: ',pd.__version__)\nprint('matplotlib version: ',matplotlib.__version__)\nprint('pytorch version: ',torch.__version__)\nprint('fastai version: ',fastai.__version__)\n\n%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","ae148744":"img_dir='..\/input\/jurkat cells (merged only)\/jurkat cells (merged only)\/'\npath=Path(img_dir)\ndata = ImageDataBunch.from_folder(path, train=\".\", \n                                  valid_pct=0.3,\n                                  ds_tfms=get_transforms(do_flip=True,flip_vert=True, max_rotate=90,max_lighting=0.3),\n                                  size=224,bs=64, \n                                  num_workers=0).normalize(imagenet_stats)\nprint(f'Classes: \\n {data.classes}')\ndata.show_batch(rows=4, figsize=(10,10))","4636e463":"learn = create_cnn(data, models.resnet34, metrics=accuracy, model_dir=\"\/tmp\/model\/\")\nlearn.fit_one_cycle(10)","1e3ba934":"interp = ClassificationInterpretation.from_learner(learn)\ninterp.plot_confusion_matrix(figsize=(4,4), dpi=60)","9952de3f":"Note class size imbalance","3971af87":"The min\/max pixel values are already scaled between 0 and 1","616da39e":"20 images from category \"G1\/G2\/S\"","9a4d39ca":"20 images from category \"Mitosis\"","bcfffadf":"*Step 3: Explore Jurkat Cell Data*","56d80efa":"20 images from category \"Interphase\"","8263d947":"The min\/max pixel values are already scaled between 0 and 1","2dbf7ad9":"Note class size imbalance","7a012a42":"*Step 4: Build and Evaluate an ML Model using Fastai and the Jurkat Cell Data*","80df11b6":"Differences in the rates of cellular division and differences in the amount of time spent in each stage of cellular division are important differentiators between healthy cells and cancer cells (Sherr 1996, Visconti 2016). Likewise, cancer cells often form erroneous mitotic structures during cellular division and these erroneous structures can contribute to further disease progression (Milunovi\u0107-Jevti\u0107 2016, Bakhoum 2018). As such, the study of cellular division and and its machinery has led to the development of numerous anti-cancer drugs (Florian 2016, Steinmetz 2018).  \n\nDeep learning algorithms can be used to automate the time-consuming process of manually counting mitotic structures in breast histopathology images (Li 2018, Saha 2018).  Likewise, deep learning algorithms have been demonstrated as capable of identifying cell cycle stages during cellular division (Eulenberg 2017).","1f6f8366":"*Step 2: Explore Nematode Cell Data*","db086e1d":"**Interphase vs Mitosis Classification**\n\n90 Nematode cells and 32,000 Jurkat cells","606e4f80":"*Step 1: Import Modules*","e6475fd8":"**Works Cited:**\n\nBakhoum SF, Cantley LC. The Multifaceted Role of Chromosomal Instability in Cancer and Its Microenvironment.  Cell. 2018 Vol 174(6): p1347-1360. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/30193109\n\nEulenberg P, K\u00f6hler N, et al. Reconstructing cell cycle and disease progression using deep learning. Nature Communications. 2017. Vol 8(1): p463. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/28878212.\n\nFlorian S, Mitchison TJ.  Anti-Microtubule Drugs.  Methods in Molecular Biology. 2016 Vol 1413: p403-411.  https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/27193863\n\nLi C, Wang X, Liu W, Latecki LJ.  DeepMitosis: Mitosis detection via deep detection, verification and segmentation networks.  Medical Image Analysis. 2018. Vol 45:\nhttps:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29455111\n\nMilunovi\u0107-Jevti\u0107 A, Mooney P, et al.  Centrosomal clustering contributes to chromosomal instability and cancer.  Current Opinion in Biotechnology. 2016 Vol 40: p113-118. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/27046071\n\nSaha M, Chakraborty C, Racoceanu D.  Efficient deep learning model for mitosis detection using breast histopathology images.  Computational Medical Imaging and Graphics. 2018. Vol 64: p29-40. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29409716\n\nSherr CJ.  Cancer cell cycles. Science. 1996. Vol 274(5293): p1672-7. https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/8939849\n\nSteinmetz MO, Prota AE.  Microtubule-Targeting Agents: Strategies To Hijack the Cytoskeleton. Trends in Cell Biology.  2018 Vol 28(10): p776-792 https:\/\/www.ncbi.nlm.nih.gov\/pubmed\/29871823\n\nVisconti R, Monica RD, Grieco D. Cell cycle checkpoint in cancer: a therapeutically targetable double-edged sword. J Exp Clin Cancer Res. 2016. Vol 35: p153. https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC5037895\/\n","2311401b":"20 images from category \"Metaphase\"","32d7b4a3":"**~97% accuracy using the default Fastai image classifier.**  Although the accuracy is very high it should also be noted that the dataset was highly imbalanced and there is room for improvement in terms of reducing bias and improving the precision and recall scores."}}