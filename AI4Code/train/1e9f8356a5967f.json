{"cell_type":{"607d4ec5":"code","2d6b1139":"code","9770438a":"code","89e32386":"code","8718cc38":"code","439a5a97":"code","35ec87e1":"code","ad578f5c":"code","f6353249":"code","99813d86":"code","4a7eee8b":"code","f75a6cea":"code","9f14a0c2":"code","6690a322":"code","a01f4ce5":"code","86be3bf5":"code","29039f59":"code","8155e2fd":"code","43383728":"code","b07301b5":"markdown","d57729da":"markdown","ef0a16c9":"markdown","357491c0":"markdown","cd2b5c49":"markdown","d6f4b0b8":"markdown","b82e3e56":"markdown","4e8aacf5":"markdown","76afd957":"markdown","d8547f42":"markdown","4a72e3b2":"markdown","752d8f07":"markdown","b1b04e61":"markdown","4ec08c5e":"markdown","aabe08f8":"markdown","d137e1bb":"markdown","e01b39f7":"markdown","a7fa2d4b":"markdown","f3b59c14":"markdown"},"source":{"607d4ec5":"import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport numpy as np","2d6b1139":"poke = pd.read_csv(\"..\/input\/pokemon\/pokemon.csv\", header=0, index_col=0, encoding='utf-8')","9770438a":"poke.head(10)","89e32386":"poke = poke.set_index('name')","8718cc38":"legendary = poke.groupby(\"is_legendary\").aggregate({\"is_legendary\": \"count\"}).rename(columns={'is_legendary': 'count', 'index': 'is_legendary'})\nexplode = [0.15, 0]\nprint(legendary.reset_index())\n\nplt.figure(figsize=(9, 10))\ncolors = ['skyblue', 'deepskyblue']\nplt.title(label=\" Legendary Pokemon in %\", loc=\"center\", fontsize=25)\npatches, l_text, p_text = plt.pie(legendary[\"count\"],\n        labels=['not legendary', 'legendary'], autopct='%1.1f%%', colors=colors, explode=explode, startangle=60)\n\nfor t in p_text:  # set text size\n    t.set_size(20)\nfor t in l_text:\n    t.set_size(20)\n\nplt.show()","439a5a97":"base = poke[[\"base_total\"]].sort_values('base_total', ascending=False).reset_index()\nplt.figure(figsize=(10, 8))\nplt.hist(base[\"base_total\"], color='powderblue', bins=50)\nplt.title(label=\" Total_Points_Density\", loc=\"center\", fontsize=22)\n\nplt.show()","35ec87e1":"plt.figure(figsize=(10, 8))\ntotal = poke[[\"base_total\"]].sort_values('base_total', ascending=False).reset_index()\ncolors = cm.Paired(np.linspace(0, 1, 10))\nplt.bar(total[\"name\"].head(10), total[\"base_total\"].head(10), color=colors, width=0.6)\n\nfor a, b in zip(total[\"name\"].head(10), total[\"base_total\"].head(10)):  # display number\n    plt.text(a, b+0.05, '%.0f' % b, ha='center', va='bottom', fontsize=11)\nplt.ylim(0, 1200)\nplt.title(label=\" Top10_Total_Points\", loc=\"center\", fontsize=22)\n\nplt.show()","ad578f5c":"plt.figure(figsize=(14, 8))\nad = poke[[\"attack\", \"defense\"]].reset_index()\n\nplt.subplot2grid((1,2), (0,0))\nplt.hist(ad[\"attack\"], color='powderblue', bins=30)\nplt.title(label=\" Attack_value_Density\", loc=\"center\", fontsize=20)\n\nplt.subplot2grid((1,2), (0,1))\nplt.hist(ad[\"defense\"], color='powderblue', bins=30)\nplt.title(label=\" Defense_value_Density\", loc=\"center\", fontsize=20)\n\nplt.show()","f6353249":"ad = poke[[\"attack\", \"defense\"]].reset_index()\n\nplt.figure(figsize=(15, 8))\nplt.subplot2grid((1, 2), (0, 0))\nplt.scatter(ad[\"attack\"], ad[\"defense\"], color='powderblue')\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")\nplt.title(label=\" Attack & Defense\", loc=\"center\", fontsize=20)\n\nplt.subplot2grid((1,2), (0,1))\nplt.hexbin(ad[\"attack\"], ad[\"defense\"], cmap='PuBu', gridsize=20)\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")\nplt.title(label=\" Attack & Defense\", loc=\"center\", fontsize=20)\n\nplt.show()","99813d86":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nad = poke[[\"attack\", \"defense\"]].reset_index()\n\nX = ad[['attack']]\nY = ad[[\"defense\"]]\n\nmodel.fit(X, Y)\nY_pred = model.predict(X)\n\nplt.figure(figsize=(10, 8))\nplt.scatter(X, Y, color='powderblue')\nplt.plot(X, Y_pred, color = 'red')\n\nplt.xlabel(\"Attack\")\nplt.ylabel(\"Defense\")\nplt.title(label=\" Attack & Defense\", loc=\"center\", fontsize=20)\n\nplt.show()\n\nprint(\"R^2: \", model.score(X, Y))","4a7eee8b":"att = ad.loc[ad['attack'].idxmax()]\ndeff = ad.loc[ad['defense'].idxmax()]\n\nprint(att)\nprint(deff)","f75a6cea":"wh = poke[[\"weight_kg\", \"height_m\", \"hp\", \"speed\"]].dropna().reset_index()\n\nplt.figure(figsize=(16, 8))\nplt.subplot2grid((1, 2), (0, 0))\nplt.hist(wh[\"weight_kg\"], color='powderblue', bins=30)\nplt.ylabel(\"Frequency\")\nplt.title(label=\"Weight\", loc=\"center\", fontsize=20)\n\nplt.subplot2grid((1,2), (0,1))\nplt.hist(wh[\"height_m\"], color='powderblue', bins=30)\nplt.ylabel(\"Frequency\")\nplt.title(label=\"Height\", loc=\"center\", fontsize=20)\n\nplt.show()","9f14a0c2":"weight_max = wh.loc[wh['weight_kg'].idxmax()]\nprint(weight_max)\n\nheight_max =wh.loc[wh['height_m'].idxmax()]\nprint(height_max)\n\nweight_min = wh.loc[wh['weight_kg'].idxmin()]\nprint(weight_min)\n\nheight_min =wh.loc[wh['height_m'].idxmin()]\nprint(height_min)","6690a322":"plt.figure(figsize=(16, 8))\nplt.subplot2grid((1,2), (0,0))\nplt.hist(wh[\"hp\"], color='powderblue', bins=30)\nplt.ylabel(\"Frequency\")\nplt.title(label=\"Hp\", loc=\"center\", fontsize=20)\n\nplt.subplot2grid((1,2), (0,1))\nplt.hist(wh[\"speed\"], color='powderblue', bins=30)\nplt.ylabel(\"Frequency\")\nplt.title(label=\"Speed\", loc=\"center\", fontsize=20)\n\nplt.show()","a01f4ce5":"hp_max = wh.loc[wh['hp'].idxmax()]\nprint(hp_max)\n\nspeed_max =wh.loc[wh['speed'].idxmax()]\nprint(speed_max)\n\nhp_min = wh.loc[wh['hp'].idxmin()]\nprint(hp_min)\n\nspeed_min =wh.loc[wh['speed'].idxmin()]\nprint(speed_min)","86be3bf5":"type = poke[[\"type1\"]].reset_index().groupby(\"type1\").aggregate({\"name\": \"count\"})\ntype = type.sort_values('name', ascending=False).reset_index().rename(columns={'name': 'count'})\nprint(type)\n\nplt.figure(figsize=(12, 8))\ncolors = cm.Paired(np.linspace(0, 1, 17))\nplt.bar(type[\"type1\"], type[\"count\"], color=colors, width=0.6)\nplt.ylabel(\"count\")\nfor a, b in zip(type[\"type1\"], type[\"count\"]):  # display number\n    plt.text(a, b+0.05, '%.0f' % b, ha='center', va='bottom', fontsize=11)\nplt.title(label=\" Primary Type\", loc=\"center\", fontsize=22)\n\nplt.tight_layout()\nplt.show()","29039f59":"type2 = poke[[\"type2\"]].reset_index().dropna().groupby(\"type2\").aggregate({\"name\": \"count\"})\ntype2 = type2.sort_values('name', ascending=False).reset_index().rename(columns={'name': 'count'})\n\nplt.figure(figsize=(12, 8))\ncolors = cm.Paired(np.linspace(0, 1, 19))\nplt.bar(type2[\"type2\"], type2[\"count\"], color=colors, width=0.6)\nplt.ylabel(\"count\")\nfor a, b in zip(type2[\"type2\"], type2[\"count\"]):  # display number\n    plt.text(a, b+0.05, '%.0f' % b, ha='center', va='bottom', fontsize=11)\nplt.title(label=\" Secondary Type\", loc=\"center\", fontsize=22)\n\nplt.tight_layout()\nplt.show()","8155e2fd":"gen = poke.reset_index().groupby(\"generation\").aggregate({\"name\": \"count\"})\ngen = gen.reset_index().rename(columns={'name': 'count'})\n\nplt.figure(figsize=(10, 8))\ncolors = cm.Paired(np.linspace(0, 0.8, 7))\nplt.bar(gen[\"generation\"], gen[\"count\"], color=colors, width=0.6)\nplt.ylabel(\"count\")\nplt.xlabel(\"generation\")\nfor a, b in zip(gen[\"generation\"], gen[\"count\"]):  # display number\n    plt.text(a, b+0.05, '%.0f' % b, ha='center', va='bottom', fontsize=11)\nplt.title(label=\" Number of Pokemons per Generation\", loc=\"center\", fontsize=22)\n\nplt.show()","43383728":"genl = poke.reset_index().groupby([\"generation\", \"is_legendary\"]).aggregate({\"name\": \"count\"})\ngenl = genl.reset_index().rename(columns={'name': 'count'})\n\nplt.figure(figsize=(10, 8))\ncolors = ['lightblue', 'khaki']\nplt.bar(genl[\"generation\"], genl[\"count\"], color=colors, width=0.6)\nplt.ylabel(\"count\")\nplt.xlabel(\"generation\")\nfor a, b in zip(genl[\"generation\"], genl[\"count\"]):  # display number\n    plt.text(a, b+0.05, '%.0f' % b, ha='center', va='bottom', fontsize=11)\nplt.title(label=\" Legendary and Non-legendary per Generation\", loc=\"center\", fontsize=20)\n\nplt.show()","b07301b5":"## 2. Base_total Distribution","d57729da":"A simple data visualization with Pokemon dataset. And planing to utilize linear regression to treat Attack & Defense properties among Pokemons, and display its R square value.","ef0a16c9":"## 10. Popular Secondary Type","357491c0":"## 9. Popular Primary Type","cd2b5c49":"Note that parts in 'khaki' color represent the legendary in each genertation. Dont know how to add two labels in one plt.bar().","d6f4b0b8":"## 4. Attack & Defense Density","b82e3e56":"## 3. Base_total Top10","4e8aacf5":"## Content\n\n1. Legendary Pokemon in %\n2. Base_total Distribution\n3. Base_total Top10\n4. Attack & Defense Density\n5. Attack & Defense Relationship\n6. Attack & Defense with Linear Regression\n7. Weight & Height Density\n8. Hp & Speed Density\n9. Popular Primary Type\n10. Popular Secondary Type\n\n#### Updated\n11. Number of Pokemons per Generation\n12. Generation & Legendary","76afd957":"## 7. Weight & Height Density","d8547f42":"## 1. Legendary Pokemon in % ","4a72e3b2":"## 5. Attack & Defense Relationship","752d8f07":"# Basic Visualization and Simple Linear Regression","b1b04e61":"This is showing the Pokemon with critical hp & speed.","4ec08c5e":"The pokemon with maximum attack or defense.","aabe08f8":"## 8. Hp & Speed Density","d137e1bb":"This is showing the Pokemon with critical weight & height. Just for fun~","e01b39f7":"## 11. Number of Pokemons per Generation","a7fa2d4b":"## 6. Attack & Defense with Linear Regression","f3b59c14":"## 12. Generation & Legendary "}}