{"cell_type":{"c501ebbb":"code","1c61886a":"code","e63c28c1":"code","8730401f":"code","e5b0f36f":"code","604d52f0":"markdown","943ff131":"markdown","e84c29ba":"markdown","6b7a0e78":"markdown","df57f5b2":"markdown","40b07e36":"markdown","3f0c6acf":"markdown","0b6a3581":"markdown"},"source":{"c501ebbb":"\nimport numpy as np\nfrom itertools import product\nfrom skimage import draw, transform\n\ndef circle(size, val=None, r_shrink=0):\n    circle = np.zeros([size[0]+1, size[1]+1])\n    rr, cc = draw.circle_perimeter(\n        size[0]\/\/2, size[1]\/\/2,\n        radius=size[0]\/\/2 - r_shrink,\n        shape=[size[0]+1, size[1]+1],\n    )\n    if val is None:\n        circle[rr, cc] = np.random.uniform(size=circle.shape)[rr, cc]\n    else:\n        circle[rr, cc] = val\n    circle = transform.resize(circle, size, order=0)\n    return circle\n\ndef show_kernel(kernel, label=True, digits=None, text_size=28):\n    # \ud615\uc2dd \ucee4\ub110\n    kernel = np.array(kernel)\n    if digits is not None:\n        kernel = kernel.round(digits)\n\n    # \ub3c4\uc2dd\ud654 \ucee4\ub110\n    cmap = plt.get_cmap('Blues_r')\n    plt.imshow(kernel, cmap=cmap)\n    rows, cols = kernel.shape\n    thresh = (kernel.max()+kernel.min())\/2\n    \n    if label:\n        for i, j in product(range(rows), range(cols)):\n            val = kernel[i, j]\n            color = cmap(0) if val > thresh else cmap(255)\n            plt.text(j, i, val, \n                     color=color, size=text_size,\n                     horizontalalignment='center', verticalalignment='center')\n    plt.xticks([])\n    plt.yticks([])\n\ndef show_extraction(image,\n                    kernel,\n                    conv_stride=1,\n                    conv_padding='valid',\n                    activation='relu',\n                    pool_size=2,\n                    pool_stride=2,\n                    pool_padding='same',\n                    figsize=(10, 10),\n                    subplot_shape=(2, 2),\n                    ops=['Input', 'Filter', 'Detect', 'Condense'],\n                    gamma=1.0):\n    # \ub808\uc774\uc5b4 \ub9cc\ub4e4\uae30\n    model = tf.keras.Sequential([\n                    tf.keras.layers.Conv2D(\n                        filters=1,\n                        kernel_size=kernel.shape,\n                        strides=conv_stride,\n                        padding=conv_padding,\n                        use_bias=False,\n                        input_shape=image.shape,\n                    ),\n                    tf.keras.layers.Activation(activation),\n                    tf.keras.layers.MaxPool2D(\n                        pool_size=pool_size,\n                        strides=pool_stride,\n                        padding=pool_padding,\n                    ),\n                   ])\n\n    layer_filter, layer_detect, layer_condense = model.layers\n    kernel = tf.reshape(kernel, [*kernel.shape, 1, 1])\n    layer_filter.set_weights([kernel])\n\n    # \ud150\uc11c\ud50c\ub85c\uc6b0\ub97c \uc704\ud55c \ud615\uc2dd \ubcc0\ud658\n    image = tf.expand_dims(image, axis=0)\n    image = tf.image.convert_image_dtype(image, dtype=tf.float32) \n    \n    # \ud2b9\uc131 \ucd94\ucd9c\n    image_filter = layer_filter(image)\n    image_detect = layer_detect(image_filter)\n    image_condense = layer_condense(image_detect)\n    \n    images = {}\n    if 'Input' in ops:\n        images.update({'Input': (image, 1.0)})\n    if 'Filter' in ops:\n        images.update({'Filter': (image_filter, 1.0)})\n    if 'Detect' in ops:\n        images.update({'Detect': (image_detect, gamma)})\n    if 'Condense' in ops:\n        images.update({'Condense': (image_condense, gamma)})\n    \n    # \ub3c4\uc2dd\ud654\n    plt.figure(figsize=figsize)\n    for i, title in enumerate(ops):\n        image, gamma = images[title]\n        plt.subplot(*subplot_shape, i+1)\n        plt.imshow(tf.image.adjust_gamma(tf.squeeze(image), gamma))\n        plt.axis('off')\n        plt.title(title)","1c61886a":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    layers.Conv2D(\n        filters = 64,\n        kernel_size = 3,\n        strides = 1,\n        padding = 'same',\n        activation = 'relu'),\n    layers.MaxPool2D(\n        pool_size = 2,\n        strides = 1,\n        padding = 'same'\n    )\n    # \ub354 \ub9ce\uc740 \ub808\uc774\uc5b4\uac00 \ucd94\uac00\ub420 \uc218 \uc788\ub2e4.\n])","e63c28c1":"import tensorflow as tf\nimport matplotlib.pyplot as plt\n\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n      titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('image', cmap='magma')\n\nimage = circle([64,64], val=1.0, r_shrink=3)\nimage = tf.reshape(image, [*image.shape, 1])\n\nkernel = tf.constant([\n    [-1,-2,-1],\n    [0,0,0],\n    [1,2,1]\n])\nshow_kernel(kernel)","8730401f":"show_extraction(\n    image, kernel,\n    \n    # \ucc3d \ud30c\ub77c\ubbf8\ud130\n    conv_stride = 1,\n    pool_size = 2,\n    pool_stride = 2,\n    \n    subplot_shape = (1,4),\n    figsize = (14,6),\n)","e5b0f36f":"show_extraction(\n    image, kernel,\n    \n    # \ucc3d \ud30c\ub77c\ubbf8\ud130\n    conv_stride = 3,\n    pool_size = 2,\n    pool_stride = 2,\n    \n    subplot_shape = (1,4),\n    figsize = (14,6)\n)","604d52f0":"VGG \uad6c\uc870\ub294 \uaf64\ub098 \uac04\ub2e8\ud558\ub2e4. \ud569\uc131\uacf1\uc758 \ubcf4\ud3ed\uc774 1, \ucc3d \ud06c\uae30\uac00 2X2\uc774\uace0 \ubcf4\ud3ed\uc774 2\uc778 \ucd5c\ub300 \ud480\ub9c1\uc744 \uc0ac\uc6a9\ud55c\ub2e4. visiontools\uc758 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac01 \ub2e8\uacc4\ub97c \uc2dc\uac01\ud654\ud560 \uac83\uc774\ub2e4.","943ff131":"\uc774\ub294 \ucd94\ucd9c\ub418\ub294 \ud2b9\uc131\uc758 \uc9c8\uc744 \ub0ae\ucd94\ub294 \uac83\uc73c\ub85c \ubcf4\uc778\ub2e4. \uc785\ub825\ub418\ub294 \uc6d0\uc740 1 \ud53d\uc140 \uc815\ub3c4\uc758 \ub450\uaed8\uc774\ubbc0\ub85c \uaf64\ub098 '\ub514\ud14c\uc77c\ud558\ub2e4'\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub2c8 \ubcf4\ud3ed 3\uc758 \ud569\uc131\uacf1\uc740 \uc88b\uc740 \ud2b9\uc131 \ub9f5\uc744 \ucd94\ucd9c\ud558\uae30\uc5d4 \ubd80\uc871\ud558\uc600\uc744 \uac83\uc774\ub2e4.  \n  \n  \uac00\ub054, \ubaa8\ub378\uc740 \uc785\ub825 \ub808\uc774\uc5b4\uc5d0\uc11c \ud070 \ubcf4\ud3ed\uc73c\ub85c \ud569\uc131\uacf1\uc744 \uc801\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. \ub300\ubd80\ubd84 \uc774\ub7f0 \uacbd\uc6b0\uc5d4 \ucee4\ub110\uc758 \ud06c\uae30\ub3c4 \ud06c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 ResNet50 \ubaa8\ub378\uc740 \uccab \ubc88\uc9f8 \ub808\uc774\uc5b4\uc5d0\uc11c \ubcf4\ud3ed 2\uc758 7X7 \ud06c\uae30\uc758 \ucee4\ub110\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub294 \ud070 \uaddc\ubaa8\uc758 \ud2b9\uc9d5\uc744 \ub108\ubb34 \ub9ce\uc740 \uc785\ub825\uac12 \uc815\ubcf4\ub97c \uc783\uc9c0 \uc54a\uc73c\uba74\uc11c\ub3c4 \ube60\ub974\uac8c \ucd94\ucd9c\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4.","e84c29ba":"## \ud328\ub529  \n\uc2ac\ub77c\uc774\ub4dc \ucc3d\uc744 \uc801\uc6a9\ud560 \ub54c\uc5d0 \uc785\ub825 \uc774\ubbf8\uc9c0\uc758 \uac00\uc7a5\uc790\ub9ac\ub97c \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560\uc9c0\uc5d0 \ub300\ud55c \uc758\ubb38\uc774 \uc0dd\uae34\ub2e4. \uc785\ub825 \uc774\ubbf8\uc9c0\uc758 \uc548\uc5d0\ub9cc \uba38\ubb34\ub978\ub2e4\uba74 \ucc3d\uc774 \uc808\ub300 \uac00\uc7a5\uc790\ub9ac \ud53d\uc140\uc5d0 \ub300\ud574 \ud480\ub9c1 \ub4f1\uc758 \uc791\uc6a9\uc744 \ud560 \uc218 \uc5c6\ub2e4. \ubaa8\ub4e0 \ud53d\uc140\uc744 \ub3d9\uc77c\ud558\uac8c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc73c\ub2c8 \ubb38\uc81c\uac00 \uc0dd\uae30\uc9c0 \uc54a\uc744\uae4c?  \n  \n  \ud569\uc131\uacf1\uc774 \uc774 '\uac00\uc7a5\uc790\ub9ac \ud53d\uc140'\ub4e4\uc5d0 \ub300\ud574 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud558\ub294\uc9c0\ub294 'padding' \ud30c\ub77c\ubbf8\ud130\ub85c \uc815\uc758\ud55c\ub2e4. \ud150\uc11c\ud50c\ub85c\uc6b0\uc5d0\uc11c\ub294 \ub450 \uac00\uc9c0 \uc120\ud0dd\uc9c0\uac00 \uc788\ub2e4 : 'padding ='same'' \ub610\ub294 'padding = 'valid''. \ub458\uc740 \uc11c\ub85c \uc0c1\ucda9 \uad00\uacc4\uc5d0 \ub193\uc5ec\uc788\ub2e4.  \n    \n  padding = 'valid'\uc73c\ub85c \uc124\uc815\ud558\uba74, \ud569\uc131\uacf1 \ucc3d\uc740 \uc628\uc804\ud788 \uc774\ubbf8\uc9c0 \uc785\ub825\uac12 \ub0b4\ubd80\uc5d0 \uba38\ubb34\ub978\ub2e4. \ub2e8\uc810\uc740 \uac00\uc7a5\uc790\ub9ac \ud53d\uc140\uc744 \uc77d\uc9c0 \ubabb\ud558\uc5ec \ucd9c\ub825\uac12\uc758 \ud06c\uae30\uac00 \uc904\uc5b4\ub4e4\uace0, \ucee4\ub110\uc774 \ud074\uc218\ub85d \ub354 \uc904\uc5b4\ub4e0\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774\ub294 \ud2b9\ud788 \uc785\ub825\uac12\uc758 \ud06c\uae30\uac00 \uc791\uc744 \ub54c \uc2e0\uacbd\ub9dd\uc5d0\uc11c \ub808\uc774\uc5b4\uc758 \uac1c\uc218\ub97c \uc81c\ud55c\ud560 \uac83\uc774\ub2e4.  \n  \ubc18\ub300\ub294 padding = 'same'\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc785\ub825\uac12\uc758 \uac00\uc7a5\uc790\ub9ac \uc8fc\ubcc0\uc744 0\uac12\uc758 \ud53d\uc140\ub85c '\ud328\ub529'\uc744 \ud55c\ub2e4. \uc989, 0\uac12\uc758 \ud53d\uc140\ub9cc \uc0ac\uc6a9\ud558\uc5ec \ucd9c\ub825\uac12\uc774 \uc785\ub825\uac12\uacfc \ud06c\uae30\uac00 \ub3d9\uc77c\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \uc774\ub294 \uac00\uc7a5\uc790\ub9ac \ud53d\uc140\uc758 \uc601\ud5a5\uc744 \ud76c\uc11d\uc2dc\ud0a4\ub294 \ud6a8\uacfc\uac00 \uc788\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc740 'same' \ud328\ub529\uc744 \uc0ac\uc6a9\ud55c \uc2ac\ub77c\uc774\ub4dc \ucc3d\uc758 \ubaa8\uc2b5\uc744 \ubcf4\uc778\ub2e4.  \n  <figure>\n<img src=\"https:\/\/i.imgur.com\/RvGM2xb.gif\" width=400 alt=\"Illustration of zero (same) padding.\">\n<\/figure>  \n\uc6b0\ub9ac\uac00 \ubcf4\uace0 \uc788\ub358 VGG \ubaa8\ub378\uc740 \ubaa8\ub4e0 \ud569\uc131\uacf1 \ub808\uc774\uc5b4\uc5d0 'same' \ud328\ub529\uc744 \uc801\uc6a9\ud55c\ub2e4. \ub300\ubd80\ubd84 \ud604\ub300\uc758 \ud569\uc131\uacf1 \ub808\uc774\uc5b4\ub294 'same'\uacfc 'valid' \ud328\ub529\uc744 \uc801\uc808\ud788 \ud63c\ud569\ud558\uc5ec \uc0ac\uc6a9\ud55c\ub2e4. (\uadf8\ub9ac\uace0 \ub2e4\ub978 \ud30c\ub77c\ubbf8\ud130\ub85c \ud29c\ub2dd\ud55c\ub2e4)","6b7a0e78":"## \ubcf4\ud3ed(Stride)  \n\uac01 \ub2e8\uacc4\ubcc4\ub85c \ucc3d\uc774 \uc6c0\uc9c1\uc774\ub294 \uc815\ub3c4\ub97c '\ubcf4\ud3ed'\uc774\ub77c\uace0 \ud55c\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ubbf8\uc9c0\uc758 \ubaa8\ub4e0 \ucc28\uc6d0\uc5d0 \ub300\ud574 \ubcf4\ud3ed\uc744 \uc815\uc758\ud574\uc57c \ud55c\ub2e4 : \ud558\ub098\ub294 \uc88c\uc5d0\uc11c \uc6b0\ub85c, \ud558\ub098\ub294 \uc704\uc5d0\uc11c \uc544\ub798\ub85c \uc6c0\uc9c1\uc774\ub294 \ucc28\uc6d0\uc774\ub2e4. \uc544\ub798 \uadf8\ub9bc\uc744 \ud1b5\ud574 \ubcf4\ud3ed\uc774 2\uc778 strides = (2,2)\uc758 \uacbd\uc6b0\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.  \n<figure>\n<img src=\"https:\/\/i.imgur.com\/Tlptsvt.gif\" width=400 alt=\"Sliding window with a stride of (2, 2).\">\n<\/figure>  \n\ubcf4\ud3ed\uc740 \uc5b4\ub5a4 \ud6a8\uacfc\ub97c \uac00\uc9c0\uace0 \uc788\uc744\uae4c? \ubaa8\ub4e0 \ubc29\ud5a5\uc73c\ub85c\uc758 \ubcf4\ud3ed\uc774 1\ubcf4\ub2e4 \ud070 \uacbd\uc6b0, \uc2ac\ub77c\uc774\ub4dc \ucc3d\uc740 \uc785\ub825 \uc774\ubbf8\uc9c0\uc5d0\uc11c\uc758 \uc77c\ubd80 \ud53d\uc140\uc744 \uac74\ub108\ub6f0\uac8c \ub41c\ub2e4.   \n\uc6b0\ub9ac\ub294 \ubd84\ub958\ub97c \uc704\ud55c \ucd5c\uc801\uc758 \ud2b9\uc9d5\uc744 \uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \ud569\uc131\uacf1 \ub808\uc774\uc5b4\ub294 \ub300\ubd80\ubd84 stride = (1,1)\uc774\ub2e4. \ubcf4\ud3ed\uc744 \ub298\uc774\ub294 \uac83\uc740 \uace7 \ud480\ub9c1 \uacfc\uc815\uc5d0\uc11c \uc911\uc694\ud560\uc218\ub3c4 \uc788\ub294 \uc815\ubcf4\ub97c \uc783\uc744 \uc218 \uc788\uc74c\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7ec\ub098 \ucd5c\ub300 \ud480\ub9c1 \ub808\uc774\uc5b4\ub294 \uac70\uc758 \ud56d\uc0c1 (2,2) \ub610\ub294 (3,3)\ucc98\ub7fc 1\ubcf4\ub2e4 \ud070 \ubcf4\ud3ed\uc744 \uac00\uc9c4\ub2e4. \ub2f9\uc5f0\ud788 \uc2ac\ub77c\uc774\ub4dc \ucc3d \uadf8 \uc790\uccb4\ubcf4\ub2e4 \ud070 \ud06c\uae30\uc758 \ubcf4\ud3ed\uc744 \uac00\uc9c0\uc9c0\ub294 \uc54a\ub294\ub2e4.  \n  \n  \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ubcf4\ud3ed\uc758 \ud06c\uae30\uac00 \uc591\ucabd \ubc29\ud5a5\uc73c\ub85c \ub3d9\uc77c\ud558\ub2e4\uba74, strides = (2,2) \ub300\uc2e0 strides = 2\ub77c\uace0 \uc801\ub294 \uac83\ucc98\ub7fc \ud29c\ud50c\uc774 \uc544\ub2cc \uc22b\uc790 \ud558\ub098\ub85c\ub9cc \ubcf4\ud3ed\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub2e4.","df57f5b2":"# \uc18c\uac1c  \n\uc774\uc804\uc758 \ud3ec\uc2a4\ud2b8\ub4e4\uc744 \ud1b5\ud574 \uc774\ubbf8\uc9c0\uc5d0\uc11c \ud2b9\uc131\uc744 \ucd94\ucd9c\ud558\ub294 \uc138 \uac00\uc9c0 \uc791\uc6a9\uc744 \uc0b4\ud3b4\ubcf4\uc558\ub2e4.  \n1. \ud569\uc131\uacf1 \ub808\uc774\uc5b4\ub85c '\ud544\ud130\ub9c1'\ud558\uae30\n2. ReLU \ud65c\uc131\ud654\ub85c '\uac10\uc9c0'\ud558\uae30\n3. \ucd5c\ub300 \ud480\ub9c1 \ub808\uc774\uc5b4\ub85c '\uc555\ucd95'\ud558\uae30  \n\n\ud569\uc131\uacf1\uacfc \ud480\ub9c1\uc740 '\uc2ac\ub77c\uc774\ub529 \ucc3d'\uc744 \ud1b5\ud574 \uc774\ub8e8\uc5b4\uc9c4\ub2e4\ub294 \uacf5\ud1b5\uc810\uc744 \uac00\uc9c4\ub2e4. \ud569\uc131\uacf1\uc5d0\uc11c \uc774 '\ucc3d'\uc740 \ucee4\ub110\uc758 \ucc28\uc6d0(dimension) \ud30c\ub77c\ubbf8\ud130\uc778 kernel_size\ub85c \uc8fc\uc5b4\uc9c4\ub2e4. \ud480\ub9c1\uc5d0\uc11c\ub294 pool_size\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.  \n<figure>\n<img src=\"https:\/\/i.imgur.com\/LueNK6b.gif\" width=400 alt=\"A 2D sliding window.\">\n<\/figure>  \n\ud569\uc131\uacf1\uacfc \ud480\ub9c1 \ub808\uc774\uc5b4 \ub458 \ub2e4 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \ub450 \uac1c\uc758 \ucd94\uac00\uc801\uc778 \ud30c\ub77c\ubbf8\ud130\uac00 \uc788\ub2e4. \uc774\ub294 \ucc3d\uc758 '\ubcf4\ud3ed(stride)'\uacfc \uc774\ubbf8\uc9c0\uc758 \uac00\uc7a5\uc790\ub9ac\uc5d0 '\ud328\ub529(padding)'\uc744 \uc0ac\uc6a9\ud560\uac74\uc9c0\uc758 \uc5ec\ubd80\uc774\ub2e4. strides \ud30c\ub77c\ubbf8\ud130\ub294 \ud55c \ubc88\uc758 \uc791\uc6a9\uc5d0 \uc2ac\ub77c\uc774\ub4dc \ucc3d\uc774 \uc5bc\ub9c8\ub098 \uc6c0\uc9c1\uc77c\uc9c0\ub97c \ub73b\ud558\uba70, padding \ud30c\ub77c\ubbf8\ud130\ub294 \uc785\ub825 \uc774\ubbf8\uc9c0\uc758 \uac00\uc7a5\uc790\ub9ac \ud53d\uc140\uc744 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud560\uc9c0\ub97c \uc758\ubbf8\ud55c\ub2e4.  \n  \n\uc774 \ub450 \uac00\uc9c0 \ud30c\ub77c\ubbf8\ud130\ub85c \ub808\uc774\uc5b4\ub97c \uad6c\uc131\ud558\uba74 \uc544\ub798\uc640 \uac19\ub2e4.","40b07e36":"\uc704 \ucf54\ub4dc\ub294 \uc798 \uc791\ub3d9\ud55c\ub2e4! \ud574\ub2f9 \ucee4\ub110\uc740 \uc218\ud3c9\uc120\uc744 \uac10\uc9c0\ud558\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uace0, \ucd9c\ub825\ub418\ub294 \ud2b9\uc9d5 \ub9f5\uc5d0\uc11c \uc785\ub825\uac12\uc758 \uc218\ud3c9 \uc694\uc18c\uac00 '\uac00\uc7a5 \ub9ce\uc740' \ud65c\uc131\ud654\ub97c \ubd88\ub7ec\uc77c\uc73c\ud0a8\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.  \n  \n  \ud569\uc131\uacf1\uc758 \ubcf4\ud3ed\uc744 3\uc73c\ub85c \ubc14\uafb8\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c?","3f0c6acf":"# \uc608\uc2dc - \uc2ac\ub77c\uc774\ub4dc \ucc3d  \n\uc2ac\ub77c\uc774\ub4dc \ucc3d \ud30c\ub77c\ubbf8\ud130\uc758 \ud6a8\uacfc\ub97c \ub354 \uc54c\uc544\ubcf4\uae30 \uc704\ud574\uc120, \uac01 \ud53d\uc140\uc774 \ubcf4\uc774\ub294 \uc800\ud574\uc0c1\ub3c4 \uc774\ubbf8\uc9c0\ub85c \ud2b9\uc131 \ucd94\ucd9c \uacfc\uc815\uc744 \ub530\ub77c\uac00\ubcf4\ub294 \uac83\uc774 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uac04\ub2e8\ud55c \uc6d0\uc744 \uc0b4\ud3b4\ubcf4\uc790.  \n  \n  \uc544\ub798\uc758 \uc140\uc774 \uc774\ubbf8\uc9c0\uc640 \ucee4\ub110\uc744 \uc815\uc758\ud560 \uac83\uc774\ub2e4.","0b6a3581":"# \uacb0\ub860  \n\uc5ec\uae30\uc120 \ud569\uc131\uacf1\uacfc \ud480\ub9c1 \ubaa8\ub450\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \uacc4\uc0b0 \uae30\ubc95\uc778 '\uc2ac\ub77c\uc774\ub4dc \ucc3d'\uacfc \uadf8\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \ud30c\ub77c\ubbf8\ud130\ub97c \uc0b4\ud3b4\ubcf4\uc558\ub2e4. \uc774\ub7f0 \ubc29\uc2dd\uc758 \uacc4\uc0b0\uc740 \ud569\uc131\uacf1 \uc2e0\uacbd\ub9dd\uc758 \uac00\uc7a5 \ud070 \ud2b9\uc9d5 \uc911 \ud558\ub098\uc774\ub2e4."}}