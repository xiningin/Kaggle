{"cell_type":{"73ff9a50":"code","85f683ba":"code","c66fd083":"code","446cae77":"code","b8d8b820":"code","98664b09":"code","17eefd3a":"code","70df682a":"code","9ed48b64":"code","11682115":"markdown","7f369b0d":"markdown"},"source":{"73ff9a50":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom sklearn.metrics import make_scorer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import ShuffleSplit\n\nfrom scipy.stats import skew","85f683ba":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head()","c66fd083":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition'],\n                      test.loc[:,'MSSubClass':'SaleCondition']))","446cae77":"matplotlib.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","b8d8b820":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])\n\nall_data = pd.get_dummies(all_data)\n\n#filling NA's with the mean of the column:\nall_data = all_data.fillna(all_data.mean())","98664b09":"#creating matrices for sklearn:\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","17eefd3a":"reg = DecisionTreeRegressor()\nreg.fit(X_train, y)","70df682a":"# Produce the value for 'max_depth'\nprint(\"Parameter 'max_depth' is {} for the optimal model.\".format(reg.get_params()['max_depth']))","9ed48b64":"Y_pred = reg.predict(X_test)\n\n#9.45312 Score\nsubmission = pd.DataFrame({'Id':test.Id, 'SalePrice':Y_pred})\nsubmission.to_csv('submission2.csv', index=False)","11682115":"## Reference\n- https:\/\/www.kaggle.com\/apapiu\/regularized-linear-models","7f369b0d":"# House Prices Predictions"}}