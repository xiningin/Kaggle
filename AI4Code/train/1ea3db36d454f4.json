{"cell_type":{"ff6a4260":"code","38a5c9a6":"code","a1d99b37":"code","02d94d01":"code","7c7b20ac":"code","f56829ef":"code","bec5d618":"code","305ffefe":"code","8675ae67":"code","53c6d267":"code","beb20cda":"code","70043487":"code","ee3022dd":"code","faa973e1":"code","dd30f9b5":"code","5c62d080":"code","1c04ed2b":"code","3998a9b7":"code","241edeed":"code","d6c829e0":"code","6fedf2f4":"code","dc94db05":"code","ff62f0eb":"code","2c500c78":"code","12c0cb35":"code","bf3ad9c1":"code","67fee9e4":"code","63c5633d":"code","7f00b775":"code","77324f0b":"code","72efbc71":"code","cebba5f8":"code","7599a680":"code","61fafb74":"code","0f75abc2":"code","915f3157":"code","d2793b10":"code","0f2ceac7":"code","1a7c5109":"code","6dcad10c":"code","742d26de":"markdown","968c2e8e":"markdown","d33b239d":"markdown","394fef46":"markdown","bd37ef4d":"markdown","4c7e96b0":"markdown","60e29f8c":"markdown","badf0e2c":"markdown","616400b6":"markdown","196b7c0c":"markdown","cb9a90b9":"markdown","da6a6b1e":"markdown","f0797a3e":"markdown","05681d7f":"markdown","1d728aa3":"markdown","04729b83":"markdown","5a8f08e6":"markdown","2b76d9db":"markdown","a6ed72dd":"markdown","5b0c19fd":"markdown","ed9867bd":"markdown","139dafa6":"markdown","bc4662e2":"markdown","c8c487f1":"markdown","48dbd3bc":"markdown","b85e5009":"markdown","ebecdd68":"markdown","7e2fe3b4":"markdown","e121d134":"markdown","ce399cf8":"markdown","0e893602":"markdown","ce6f5d32":"markdown","e40a781c":"markdown","d0c0086b":"markdown","3a9f997a":"markdown","93162043":"markdown","d34bb3b8":"markdown","6a03c09c":"markdown","c8b1b241":"markdown","8283f740":"markdown","5f840b79":"markdown","4b4c1beb":"markdown","6ed5c7c1":"markdown","ff5dedbb":"markdown","f8e013f3":"markdown"},"source":{"ff6a4260":"##Importing necessary Libraries\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\n#pd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n","38a5c9a6":"##Loading Data\ntrain_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\ntrain_df.head()","a1d99b37":"# Describe the Datasets\n#train_df.shape, test_df.shape\n#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train_df.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test_df.shape))\n\n#Save the 'Id' column\ntrain_ID = train_df['Id']\ntest_ID = test_df['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain_df.drop(\"Id\", axis = 1, inplace = True)\ntest_df.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train_df.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test_df.shape))","02d94d01":"train_df.head()","7c7b20ac":"test_df.head()","f56829ef":"fig, ax = plt.subplots()\nax.scatter(x = train_df['GrLivArea'], y = train_df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","bec5d618":"#Deleting outliers\ntrain_df= train_df.drop(train_df[(train_df['GrLivArea']>4000) & (train_df['SalePrice']<300000)].index)\n\n#Check the graphic again\nfig, ax = plt.subplots()\nax.scatter(train_df['GrLivArea'], train_df['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","305ffefe":"#Descriptive statistics summary\ntrain_df['SalePrice'].describe()","8675ae67":"#histogram\nsns.distplot(train_df['SalePrice'] , fit=norm);\n\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train_df['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt)\nplt.show()\n\n#skewness and kurtosis\nprint(\"Skewness: %f\" % train_df['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train_df['SalePrice'].kurt())\n\n","53c6d267":"\n#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain_df[\"SalePrice\"] = np.log1p(train_df[\"SalePrice\"])\n\n#Check the new distribution \nsns.distplot(train_df['SalePrice'] , fit=norm);\n\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train_df['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\n\n#Now plot the distribution\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\n\n#Get also the QQ-plot\nfig = plt.figure()\nres = stats.probplot(train_df['SalePrice'], plot=plt)\nplt.show()\n","beb20cda":"# most correlated features \ncorrmat = train_df.corr()\ntop_corr_features = corrmat.index[abs(corrmat['SalePrice'])>0.5]\nplt.figure(figsize=(10,10))\nsns.heatmap(train_df[top_corr_features].corr(),annot = True);\ntop_corr_features","70043487":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(train_df[cols], size = 3)\nplt.show();\n","ee3022dd":"ntrain = train_df.shape[0]\nntest = test_df.shape[0]\ny_train = train_df.SalePrice.values\nprint(\"y_train shape is : {}\".format(y_train.shape))\nall_data = pd.concat((train_df, test_df)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","faa973e1":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head(22)","dd30f9b5":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=all_data_na.index, y=all_data_na)\nplt.xlabel('Features', fontsize=15)\nplt.ylabel('Percent of missing values', fontsize=15)\nplt.title('Percent missing data by feature', fontsize=15)","5c62d080":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\nall_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\nall_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\nall_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\nall_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\nall_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))\n\nfor col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')\n    \nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)\nfor col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')\nall_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data = all_data.drop(['Utilities'], axis=1)\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")\n","1c04ed2b":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","3998a9b7":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)","241edeed":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))","d6c829e0":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']","6fedf2f4":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)","dc94db05":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","ff62f0eb":"all_data = pd.get_dummies(all_data)\nprint(all_data.shape)","2c500c78":"x_train = all_data[:ntrain]\nx_test = all_data[ntrain:]\nprint(\"x_train shape is : {}\".format(x_train.shape))\nprint(\"x_test shape is : {}\".format(x_test.shape))\nprint(\"y_train shape is: {}\".format(y_train.shape))","12c0cb35":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(x_train, y_train,test_size = .3, random_state=0)\nprint(\"x_train shape is : {}\".format(X_train.shape))\nprint(\"x_test shape is : {}\".format(X_test.shape))\nprint(\"y_train shape is: {}\".format(Y_train.shape))\nprint(\"y_test shape is: {}\".format(Y_test.shape))","bf3ad9c1":"# importing all the required library for modeling here we are going to use statsmodels \nimport statsmodels.api as sm\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.linear_model import LinearRegression, ElasticNet, Lasso, Ridge,  BayesianRidge, LassoLarsIC\nfrom sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split, GridSearchCV\n\nimport xgboost as xgb\nimport lightgbm as lgb","67fee9e4":"## Call in the LinearRegression object\nlin_reg = LinearRegression(normalize=True, n_jobs=-1)\n## fit train and test data. \nlin_reg.fit(x_train, y_train)\n## Predict test data. \ny_train_pred = lin_reg.predict(X_train)\ny_test_pred = lin_reg.predict(X_test)\nprint(\"y_train shape is : {}\".format(y_train.shape))\nprint(\"x_train shape is : {}\".format(x_train.shape))\n\n## get average squared error(MSE) by comparing predicted values with real values. \nprint ('RMSE for Train data %.4f'%np.sqrt(mean_squared_error(Y_train, y_train_pred)))\nprint ('RMSE for Test data %.4f'%np.sqrt(mean_squared_error(Y_test, y_test_pred)))","63c5633d":"# parity plot  \nplt.scatter(y_train_pred,Y_train,color='blue')\nplt.title('Linear Regression')\nplt.xlabel('Predicted Values')\nplt.ylabel('Actual Values')\nplt.plot([10.5,13.5],[10.5,13.5],c='red')\nplt.show()","7f00b775":"#Validation function\nn_folds = 10\nkfolds = KFold(n_splits=10, shuffle=True, random_state=42)\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(x_train.values)\n    rmse= np.sqrt(-cross_val_score(model, X_train.values, Y_train, scoring=\"neg_mean_squared_error\", cv = 5))\n    #scores = cross_val_score(model, x_train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf)\n    return(rmse)\n# rmsle\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n","77324f0b":"alphas_alt = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75]\nalphas2 = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","72efbc71":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Ridge\nfrom sklearn.metrics import mean_squared_error\n\nridge=Ridge()\nparameters= {'alpha':[x for x in alphas_alt]}\n\nridge_reg=GridSearchCV(ridge, param_grid=parameters)\nridge_reg.fit(X_train,Y_train)\nprint(\"The best value of Alpha is: \",ridge_reg.best_params_,ridge_reg.best_score_)\n\ncv_ridge_mean_list =[]\ncv_ridge_std_list =[]\nfor alpha in alphas_alt:\n    ridge_reg = rmsle_cv(Ridge(alpha = alpha))\n    print(\"The alphas is : {}\".format(alpha))\n    print(\"Lasso Score mean is {:.4f}\\n\".format(ridge_reg.mean()))\n    print(\"Lasso Score std is {:.4f}\\n\".format(ridge_reg.std()))\n    cv_ridge_mean_list.append(ridge_reg.mean())\n    cv_ridge_std_list.append(ridge_reg.std())\n\n\ncv_ridge_mean = pd.Series(cv_ridge_mean_list, index = alphas_alt)\ncv_ridge_std = pd.Series(cv_ridge_std_list, index = alphas_alt)\ncv_ridge_mean.plot(title = \"Validation\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmsle\")\nprint(\"\\nRdige score: {:.4f} ({:.4f})\\n\".format(cv_ridge_mean.min(), cv_ridge_std.min()))","cebba5f8":"lasso=Lasso()\nparameters= {'alpha':[x for x in alphas2]}\n\nlasso_reg=GridSearchCV(lasso, param_grid=parameters)\nlasso_reg.fit(X_train,Y_train)\nprint(\"The best value of Alpha is: \",lasso_reg.best_params_,lasso_reg.best_score_)\n\ncv_lasso_mean_list =[]\ncv_lasso_std_list =[]\nfor alpha in alphas2:\n    lasso_reg = rmsle_cv(Lasso(alpha = alpha))\n    print(\"The alphas is : {}\".format(alpha))\n    print(\"Lasso Score mean is {:.4f}\\n\".format(lasso_reg.mean()))\n    print(\"Lasso Score std is {:.4f}\\n\".format(lasso_reg.std()))\n    cv_lasso_mean_list.append(lasso_reg.mean())\n    cv_lasso_std_list.append(lasso_reg.std())\n\ncv_lasso_mean = pd.Series(cv_lasso_mean_list, index = alphas2)\ncv_lasso_std = pd.Series(cv_lasso_std_list, index = alphas2)\ncv_lasso_mean.plot(title = \"Validation\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmsle\")\n\nprint(\"\\nLassoscore: {:.4f} ({:.4f})\\n\".format(cv_lasso_mean.min(), cv_ridge_std.min()))","7599a680":"Lasso_model =Lasso(alpha=0.0005)\nLasso_model.fit(x_train,y_train)\ny_pred_train=Lasso_model.predict(X_train)\ny_pred_test=Lasso_model.predict(X_test)\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train, y_pred_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test, y_pred_test))))\n","61fafb74":"coef = pd.Series(Lasso_model.coef_, index = X_train.columns)\nprint(\"Lasso picked \" + str(sum(coef != 0)) + \" variables and eliminated the other \" +  str(sum(coef == 0)) + \" variables\")","0f75abc2":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])\nplt.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","915f3157":"#let's look at the residuals as well:\nplt.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":Lasso_model.predict(X_train), \"true\":Y_train})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","d2793b10":"\nlasso_preds = np.expm1(Lasso_model.predict(X_test))\nlasso_train = np.expm1(Lasso_model.predict(X_train))\nprint(rmsle(lasso_preds, Y_test))\n\nprint('Root Mean Square Error train = ' + str(np.sqrt(mean_squared_error(Y_train, lasso_train))))\nprint('Root Mean Square Error test = ' + str(np.sqrt(mean_squared_error(Y_test, lasso_preds)))) ","0f2ceac7":"y_test=Lasso_model.predict(x_test)\npredictions=np.expm1(y_test)","1a7c5109":"submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\nprediction = pd.DataFrame(predictions)\nfinal_submission = pd.DataFrame({'Id':submission['Id'],'SalePrice':predictions})\n\nfinal_submission.dropna(inplace=True)\n\nfinal_submission['Id']=final_submission['Id'].astype(int)\n\nfinal_submission.to_csv('submission1.csv', index=False)","6dcad10c":"final_submission.head()","742d26de":"Let us use the lasso model for the predcitions and look at the RMSE for train and test data and submit the predcitions","968c2e8e":"Good job Lasso. One thing to note here however is that the features selected are not necessarily the \"correct\" ones - especially since there are a lot of collinear features in this dataset. One idea to try here is run Lasso a few times on boostrapped samples and see how stable the feature selection is.","d33b239d":"Note the U-ish shaped curve above. When alpha is too large the regularization is too strong and the model cannot capture all the complexities in the data. If however we let the model be too flexible (alpha small) the model begins to overfit. A value of alpha = 10 is about right based on the plot above.\n\nSo for the Ridge regression we get a rmsle of about 0.1174\n\nLet' try out the Lasso model. We will do a slightly different approach here and use the built in Lasso CV to figure out the best alpha for us. For some reason the alphas in Lasso CV are really the inverse or the alphas in Ridge.\n\n","394fef46":"The most important positive feature is GrLivArea - the above ground area by area square feet. This definitely sense. Then a few other location and quality features contributed positively. Some of the negative features make less sense and would be worth looking into more - it seems like they might come from unbalanced categorical variables.\n\nAlso note that unlike the feature importance you'd get from a random forest these are actual coefficients in your model - so you can say precisely why the predicted price is what it is. The only issue here is that we log_transformed both the target and the numeric features so the actual magnitudes are a bit hard to interpret.","bd37ef4d":"# Coeficients","4c7e96b0":"# Fixing Skewness","60e29f8c":"The skew seems now corrected and the data appears more normally distributed.","badf0e2c":"# Lasso","616400b6":"Getting the new train and test sets.","196b7c0c":"# Feature Engineering","cb9a90b9":"Set up Alpha values","da6a6b1e":"Train has 1460 rows and 81 columns\nTest has 1459 rows and 80 columns","f0797a3e":"# Log-transformation of the target variable","05681d7f":"Let us concatenate the train and test data in the same dataframe","1d728aa3":"# Imputing the missing values","04729b83":"The residual plot looks pretty good.","5a8f08e6":"# Ridge","2b76d9db":"# Calculate the percentage of missing values by each feature","a6ed72dd":"Since area related features are very important to determine house prices, we add one more feature which is the total area of basement, first and second floor areas of each house","5b0c19fd":"# Final Prediction","ed9867bd":"We used heatmap here, so we can get the overview of all the features relationship:\n\nIn summary, we can conclude that:\n\n'GrLivArea' and 'TotalBsmtSF' seem to be linearly related with 'SalePrice'. Both relationships are positive, which means that as one variable increases, the other also increases. \n'OverallQual' and 'YearBuilt' also seem to be related with 'SalePrice'. The relationship seems to be stronger in the case of 'OverallQual', where the heat map shows how sales prices increase with the overall quality.\nWe just analysed four variables, but there are many other that we should analyse. \n\nGarageCars and GarageArea are also some of the most strongly correlated variables.\n\nSame goes for TotalBsmtSF and 1stFloor.\n\n* Top correlated features are the ones which have more than 50% correlation with SalePrice","139dafa6":"Importing the Required Libraries","bc4662e2":"# Transforming some numerical variables that are really categorical","c8c487f1":"Label Encoding some categorical variables that may contain information in their ordering set","48dbd3bc":"The lasso performs even better at aplha = 0.0005, so we'll just use this one to predict on the test set. Another neat thing about the Lasso is that it does feature selection for you - setting coefficients of features it deems unimportant to zero. Let's take a look at the coefficients:","b85e5009":"# Outliers","ebecdd68":"Checking for remaining missing values","7e2fe3b4":"# Regularization Models\n\nWhat makes regression model more effective is its ability of regularizing. The term \"regularizing\" stands for models ability to structurally prevent overfitting by imposing a penalty on the coefficients.  We will also define a function that returns the cross-validation rmse error so we can evaluate our models and pick the best tuning parametr. The main tuning parameter for the regularization model is alpha - a regularization parameter that measures how flexible our model is. The higher the regularization the less prone our model will be to overfit. However it will also lose flexibility and might not capture all of the signal in the data.\n\nWe are going to look at the below two regularization techniques\n\n* Ridge\n* Lasso","e121d134":"Cross Validation Strategy\n\nWe use the cross_val_score function of Sklearn. However this function has not a shuffle attribute, we add then one line of code, in order to shuffle the dataset prior to cross-validation","ce399cf8":"# Modelling","0e893602":"# Getting dummy categorical features","ce6f5d32":"# Assumptions of Linear Regression Model:\n\nLinear regression is an analysis that assesses whether one or more predictor variables explain the dependent (criterion) variable.  \nThe regression has five key assumptions:\n\n* Linear relationship\n* Multivariate normality\n* No or little multicollinearity\n* No auto-correlation\n* Homoscedasticity","e40a781c":"# Scatter plot between 'SalePrice' and its correlated Variables","d0c0086b":"We impute them by proceeding sequentially through features with missing values","3a9f997a":"We use the scipy function boxcox1p which computes the Box-Cox transformation of  1+x .\n\nNote that setting  \u03bb=0  is equivalent to log1p used above for the target variable","93162043":"* PoolQC : data description says NA means \"No Pool\". That make sense, given the huge ratio of missing value (+99%) and majority of houses have no Pool at all in general.\n* MiscFeature : data description says NA means \"no misc feature\"\n* Alley : data description says NA means \"no alley access\"\n* Fence : data description says NA means \"no fence\"\n* FireplaceQu : data description says NA means \"no fireplace\"\n* LotFrontage : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can fill in missing values by the median LotFrontage of the neighborhood.\n* GarageType, GarageFinish, GarageQual and GarageCond : Replacing missing data with None\n* GarageYrBlt, GarageArea and GarageCars : Replacing missing data with 0 (Since No garage = no cars in such garage.)\n* BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath : missing values are likely zero for having no basement\n* BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2 : For all these categorical basement-related features, NaN means that there is no basement.\n* MasVnrArea and MasVnrType : NA most likely means no masonry veneer for these houses. We can fill 0 for the area and None for the type.\n* MSZoning (The general zoning classification) : 'RL' is by far the most common value. So we can fill in missing values with 'RL'\n* Utilities : For this categorical feature all records are \"AllPub\", except for one \"NoSeWa\" and 2 NA . Since the house with 'NoSewa' is in the training set, this feature won't help in predictive modelling. We can then safely remove it.\n* Functional : data description says NA means typical\n* Electrical : It has one NA value. Since this feature has mostly 'SBrkr', we can set that for the missing value.\n* KitchenQual: Only one NA value, and same as Electrical, we set 'TA' (which is the most frequent) for the missing value in KitchenQual.\n* Exterior1st and Exterior2nd : Again Both Exterior 1 & 2 have only one missing value. We will just substitute in the most common string\n* SaleType : Fill in again with most frequent which is \"WD\"\n* MSSubClass : Na most likely means No building class. We can replace missing values with None    ","d34bb3b8":"# Building Simple Linear Model ","6a03c09c":"We can see at the rightmost two with extremely large GrLivArea that are of a low price. These values are huge oultliers. Therefore, we can safely delete them.","c8b1b241":"Let's create a histogram to see if the target variable is Normally distributed. If we want to create any linear model, it is essential that the features are normally distributed.","8283f740":"# First things first: Lets Analyse Saleprice which is our dependent variable","5f840b79":"\nAccording to the table, the below variables have more than 15% of the data missing:\n('PoolQC','MiscFeature','Alley','Fence','FireplaceQu','LotFrontage')\n\n\nWe can see that \"GarageX\" variables have he same number of missing data. \n\nThe same logic applies to 'BsmtX' variables. The variables 'BsmtExposure', 'BsmtFinType1','BsmtQual','BsmtCond','BsmtFinType2' have similar percentages of missing data. 'MasVnrArea' and 'MasVnrType' have strong corelation with 'YearBuilt' and 'OverallQual'.\n\nFinally 'Electrical' have only one null value.","4b4c1beb":"# Box Cox Transformation of (highly) skewed features","6ed5c7c1":"# Splitting the data into training and test datasets","ff5dedbb":"# From the above graph, we can observe that the distribution:\n\n* Deviate from the normal distribution\n* Have positive skewness\n* Show peakedness\n\nThe target variable is right skewed. As (linear) models love normally distributed data , we need to transform this variable and make it more normally distributed.\n","f8e013f3":"Visualize the missing values by histogram"}}