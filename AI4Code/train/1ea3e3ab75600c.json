{"cell_type":{"f9d2b073":"code","bcf87279":"code","2ae458db":"code","121f99d4":"code","4642328c":"code","ca03da98":"code","24eda5d6":"code","b9bdbf46":"code","d308ddae":"code","f685c928":"code","a823f4d1":"code","146645c6":"code","ae4b5e70":"code","e67ee8d9":"code","c19efab5":"markdown"},"source":{"f9d2b073":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","bcf87279":"!pip install iminizinc","2ae458db":"%%bash\nrm MiniZincIDE-2.3.2-bundle-linux-x86_64.tgz\nrm -r MiniZincIDE-2.3.2-bundle-linux\nwget https:\/\/github.com\/MiniZinc\/MiniZincIDE\/releases\/download\/2.3.2\/MiniZincIDE-2.3.2-bundle-linux-x86_64.tgz","121f99d4":"%%bash\n\ntar xf MiniZincIDE-2.3.2-bundle-linux-x86_64.tgz","4642328c":"%set_env PATH=\/opt\/conda\/bin:\/usr\/local\/sbin:\/usr\/local\/bin:\/usr\/sbin:\/usr\/bin:\/sbin:\/bin:MiniZincIDE-2.3.2-bundle-linux\/bin\n%set_env LD_LIBRARY_PATH=\/opt\/conda\/lib:MiniZincIDE-2.3.2-bundle-linux\/lib\n%set_env QT_PLUGIN_PATH=MiniZincIDE-2.3.2-bundle-linux\/plugins","ca03da98":"%load_ext iminizinc","24eda5d6":"n=8","b9bdbf46":"%%minizinc -m bind\n%-m bind, mapea las variables de minizinc a variables de python (ejemplo, queens)   \n\ninclude \"globals.mzn\";\nint: n=6;\narray[1..n] of var 1..n: queens;\nvar 1..4: prueba;\nconstraint all_different(queens);\nconstraint all_different([queens[i]+i | i in 1..n]);\nconstraint all_different([queens[i]-i | i in 1..n]);\nsolve satisfy;","d308ddae":"np_queens = np.asarray(queens, dtype=np.int)\nnp_queens","f685c928":"np_prueba = np.asarray(prueba, dtype=np.int)\nnp_prueba","a823f4d1":"%%minizinc?","146645c6":"n=6","ae4b5e70":"%%capture out\n%%minizinc -a\n%-a devuelve todas las soluciones, el bind solo asigna una solucion, para obtenerlas todas hay que hacer un %%capture\n\ninclude \"globals.mzn\";\nint: n;\narray[1..n] of var 1..n: queens2;\nvar 0..1: prueba;\nconstraint all_different(queens2);\nconstraint all_different([queens2[i]+i | i in 1..n]);\nconstraint all_different([queens2[i]-i | i in 1..n]);\nsolve satisfy;","e67ee8d9":"import re\n\noutput = out.outputs[0].data['text\/plain']\nprint(output)\n\nsubstring = re.findall(r\"\\{.*\\[(.*)\\].*\\}\", output)\n\nmat_queens = np.array(substring)\nprint(mat_queens[0])\nprint(mat_queens[1])","c19efab5":"https:\/\/www.minizinc.org\/doc-2.3.1\/en\/jupyter.html"}}