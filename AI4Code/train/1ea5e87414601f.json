{"cell_type":{"5107b1a2":"code","9c9e92a4":"code","fae67c12":"code","624adfcf":"code","d17738e7":"code","622e6c09":"code","ae58a92d":"code","c1a1e677":"code","64ae30e4":"code","b66e0bc8":"code","6bb3ef61":"code","77e774b2":"code","f374835d":"code","a206b49d":"code","63104456":"code","f0b12933":"code","2a02b62c":"code","5476f5b5":"code","4c031b91":"code","20529453":"code","054410b9":"code","20a6389e":"code","a9c81112":"code","9de93037":"code","06e31497":"code","e6d8a27b":"code","85833861":"code","b7d85478":"code","4c2933c3":"code","29d74d9b":"code","ba9822c9":"code","8848e8a3":"code","9a1b617f":"code","29fcfbf8":"code","6f938691":"code","573ea04c":"code","f5c41b36":"code","e5b0f330":"code","e097a5a7":"code","f855b6d7":"code","a23be3e8":"code","79b89ad3":"code","d5ab3d85":"code","f8343a52":"code","77111180":"code","6ee02b23":"code","cf59f655":"code","2a8e6921":"code","fd85917b":"code","8bfaf20d":"code","2ced611a":"code","2d058661":"code","59d63bf5":"code","a475c6b5":"code","7fb829af":"code","c3c80beb":"code","bff5a334":"code","d8a735e8":"code","a4092863":"code","f68cb831":"code","5d3a8ec3":"code","28f849e8":"code","554bf5e9":"code","014fed65":"code","917bbe9c":"code","84446ce3":"code","66cc5c91":"code","d03f689b":"code","27d2f4f7":"code","dd0471b8":"code","31775784":"code","118265b7":"code","2e6ccc4a":"code","0c35aec6":"code","4c19a691":"code","b0f3b32e":"code","0c7dbd8d":"code","593a8ea4":"code","9d88d4b8":"code","da53f325":"code","66c5dfcb":"markdown","05db67f7":"markdown","2d1524a2":"markdown","0aa0352b":"markdown","f2509571":"markdown","47aaba34":"markdown","b1525237":"markdown","4c26c6ec":"markdown","c8161b89":"markdown","4c9af25f":"markdown","a74802c9":"markdown","599f83ce":"markdown","5406ff90":"markdown","3940b953":"markdown","f0419d43":"markdown","7cb6a14d":"markdown","a5d54160":"markdown","9050d381":"markdown","e5620a6e":"markdown","988613e7":"markdown","059fefe6":"markdown","5e4a236b":"markdown","371debfe":"markdown","88aea92b":"markdown","ef32ba39":"markdown","9aa4ef6b":"markdown","c01dcdcf":"markdown","29fdcbcc":"markdown","2bc604ed":"markdown","9018b2a7":"markdown","8e365bcb":"markdown","7866c0f6":"markdown","3ceb6111":"markdown","29959c4d":"markdown","420b3629":"markdown","5f2755e6":"markdown","f7d25a71":"markdown","98e4ad7a":"markdown","f1509d17":"markdown","b7ce5a83":"markdown","7c6d6826":"markdown","3d73e017":"markdown","97b79c02":"markdown","4edcd02e":"markdown","36fc4603":"markdown"},"source":{"5107b1a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","9c9e92a4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('bmh') # matplotlib style gallery \nsns.set(font_scale=2.5)\n\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline \n#\uc0c8\ub85c\uc6b4 \uc708\ub3c4\uc6b0 \ucc3d\uc73c\ub85c \ubcf4\uc5ec\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc90c.","fae67c12":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","624adfcf":"df_train.head()","d17738e7":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","622e6c09":"df_train.head()\n# feature\uc5d0 \ub300\ud55c \ud2b9\uc9d5 \ud30c\uc545","ae58a92d":"df_train.describe()\n# numerical\ud55c \ubcc0\uc218\ub4e4\uc758 \ud1b5\uacc4\uc801 \uae30\ubcf8 \ud2b9\uc9d5","c1a1e677":"df_test.describe()\n# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc124\uba85 \n# \uc774 \ub370\uc774\ud130\ud504\ub808\uc784\uc740 Survived\ub97c \uc608\uce21\ud574\uc57c \ub418\uae30 \ub54c\ubb38\uc5d0 \ud558\ub098\uc758 feature\uac00 \uc801\uac8c \ubcf4\uc778\ub2e4.","64ae30e4":"df_train.columns\n# df_train\uc5d0 \uc788\ub294 \uceec\ub7fc\ub4e4\uc744 \ubaa8\ub450 \ub098\ud0c0\ub0b8\ub2e4.\n# \uc774\uac83\uc744 for\ubb38\uc744 \uc801\uc6a9","b66e0bc8":"for col in df_train.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0]))\n    print(msg)\n# null \ub370\uc774\ud130\uac00 \uc5bc\ub9c8\ub098 \uc788\ub294\uc9c0\n# \uc140\uc5d0\uc11c F \ud0a4\ub97c \ub204\ub978 \uc0c1\ud0dc\ub85c df_train\uacfc df_train\ub97c \ubc14\uafd4\uc904 \uc218 \uc788\ub2e4.","6bb3ef61":"for col in df_test.columns:\n    msg = 'column: {:>10}\\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0]))\n    print(msg)","77e774b2":"msno.matrix(df=df_train.iloc[:, :], figsize=(8,8),color=(0.5,0.8,0.1))\n# color\ub294 RGB \uc22b\uc790\ub97c \uc758\ubbf8\ud55c\ub2e4.\n# \uadf8\ub798\ud504\uc0c1 \ube48\uce78\uc740 null\uac12\uc744 \uc758\ubbf8\ud55c\ub2e4.","f374835d":"msno.bar(df=df_train.iloc[:, :], figsize=(8,8),color=(0.5,0.8,0.1))\n# \uc704\uc640 \uac19\uc774 null data\ub97c \ud30c\uc545\ud558\ub294 \uac83\uc778\ub370, \uc2dc\uac01\ud654 \ub9c9\ub300\uadf8\ub798\ud504 \ud615\ud0dc","a206b49d":"f, ax = plt.subplots(1,2,figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%', ax=ax[0], shadow=True)\n# ax\ub294 0 \uc8fd\uc740\uc0ac\ub78c\uacfc 1 \uc0b0\uc0ac\ub78c\uc744 \ub098\ud0c0\ub0b8\ub2e4.\nax[0].set_title('Pie plot - Survived') # \uc81c\ubaa9 \ub2ec\uc544\uc8fc\uae30\nax[0].set_ylabel('') # y\ucd95\uc758 \ub77c\ubca8 - \ud30c\uc774\uadf8\ub798\ud504 \uc67c\ucabd\uc5d0 \ub098\ud0c0\ub09c\ub2e4.\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()\n# \uc0dd\uc874\uacfc \uc8fd\uc74c\uc744 \ube44\uc728\ub85c \ub098\ud0c0\ub0b8 \ud30c\uc774\uadf8\ub798\ud504\n# \uce74\uc6b4\ud2b8\ud55c \ub9c9\ub300\uadf8\ub798\ud504 \ub450\uac00\uc9c0\ub85c \ub098\ud0c0\ub0b4\ubcf4\uae30","63104456":"df_train.shape\n# \uc778\ub371\uc2a4 \uc81c\uc678\ud558\uace0 \ucd1d 11\uac1c\uc758 feature\uac00 \uc788\ub2e4.\n# \uc5b4\ub5a4 feature\uc774 \uc911\uc694\ud560\uae4c?","f0b12933":"df_train[['Pclass', 'Survived']].groupby(['Pclass'],as_index=True).count()","2a02b62c":"df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).sum()","5476f5b5":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')\n# margins\ub294 'All'\uac12\uc744 \uc758\ubbf8\ud55c\ub2e4.\n# cmap\uc740 \uac80\uc0c9\uc5d0 'color example code' \uac80\uc0c9","4c031b91":"df_train[['Pclass','Survived']].groupby(['Pclass'],as_index=True).mean().sort_values(by='Survived',ascending=False).plot.bar()\n# \uc0dd\uc874\uc728\uc744 \ub098\ud0c0\ub0b4\ub294 \uac83. 0\uc740 \uc8fd\uc74c, 1\uc740 \uc0dd\uc874\uc774\ub77c\uba74 \uc774\uac83\ub4e4\uc758 (0 * x + 1 * y) \/ N\ub97c \ub098\ud0c0\ub0c4","20529453":"y_position = 1.02\nf, ax = plt.subplots(1,2,figsize=(18,8))\ndf_train['Pclass'].value_counts().plot.bar(color=['#CD7F32','#FFDF00','#D3D3D3'],ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass',hue='Survived',data=df_train,ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","054410b9":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index=True).mean().plot.bar(ax=ax[0]) \n# as_index\ub294 \uceec\ub7fc\uc744 'Sex'\ub85c \ub9cc\ub4dc\ub294 \uac83 ??\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","20a6389e":"df_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","a9c81112":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins=True).style.background_gradient(cmap='summer_r')","9de93037":"sns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, size=6, aspect=1.5)","06e31497":"# \uc544\ub798 \ub450\uac00\uc9c0 \uc911 \uc704\uc758 \uac83\uc774 \ucc38\uace0\uc6a9\n# \uc544\ub798 \uc911 \uc717\ucabd\uc740 \uc5b4\ub290 \ud074\ub798\uc2a4\ub4e0 \uc5ec\uc131\uc774 \uc0dd\uc874\uc728\uc774 \ub192\ub2e4. \ud2b9\ud788 Pclass\uc758 \uae30\uc6b8\uae30\uac00 \ub354 \ud06c\ubbc0\ub85c.\n# \uc544\ub798 \uc911 \uc544\ub798\ucabd\uc740 \ud074\ub798\uc2a4\ubcc4\uc758 \ucc28\uc774\ub97c \ubcf4\uc5ec\uc8fc\uae30\uc5d0 \uc6a9\uc774\ud55c\ub4ef \nsns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","e6d8a27b":"sns.factorplot(x='Pclass', y='Survived', col='Sex',\n              data=df_train, satureation=.5,\n               size=9, aspect=1\n              )","85833861":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","b7d85478":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc5d0 \ub300\ud55c \uc124\uba85\ndf_train[df_train['Survived'] == 1]['Age'].hist()","4c2933c3":"# \uc0dd\uc874, \uc0ac\ub9dd\ubcc4 Age\uc758 \ubd84\ud3ec(Kde plot)\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\n# boolean\uc744 indexing\ud558\ub294 \ubc29\ubc95\uc744 \uc798 \uc219\uc9c0\ud574\uc57c \ud55c\ub2e4.\n# df_train['Survived'] == 1 \uc774\ub77c\ub294 \uac83 \uc911 True\uc778 row\ub9cc \ubc18\ud658\ud574\uc11c 'Age'\uceec\ub7fc\uc744 \ubf51\uc544\ub0b4\ub294 \uac83\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","29d74d9b":"# Age distribution withing classes\nplt.figure(figsize=(8, 6)) # figsize\ub294 \ub3c4\ud654\uc9c0\ub97c \uc758\ubbf8\ud55c\ub2e4.\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n# kind\ub97c hist\ub85c \ud558\uba74 \uadf8\ub798\ud504\uac00 \uacb9\uccd0\uc11c \uc548\ubcf4\uc778\ub2e4.\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","ba9822c9":"# \uc124\uba85\uc5d4 \ub098\ud0c0\ub098\uc788\uc9c0 \uc54a\uc740 \uac83\n# \uc704\uc5d0\uc120 \uc0dd\uc874\uc5d0 \uad00\ud55c kde\ub97c \ubcfc \uc218 \uc5c6\uc73c\ubbc0\ub85c, boolean\uc744 \uc774\uc6a9\ud574\uc11c \uc0dd\uc874\uc790\ubcc4 \ub098\uc774\ub300\uc758 \ubd84\ud3ec\ub97c \uc54c\uc544\ubcf8\ub2e4.\n# Class\ubcc4\ub85c \uc0dd\uc874\uc790 \ub098\uc774\ub300\uc758 \ubd84\ud3ec\ub97c \uc0b4\ud3b4\ubcf4\uc790.\nfig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 1 )]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 1 )]['Age'], ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('1st Class')\nplt.show()","8848e8a3":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 2 )]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 2 )]['Age'], ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('2st Class')\nplt.show()","9a1b617f":"fig, ax = plt.subplots(1,1,figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] == 0) & (df_train['Pclass'] == 3 )]['Age'], ax=ax)\nsns.kdeplot(df_train[(df_train['Survived'] == 1) & (df_train['Pclass'] == 3 )]['Age'], ax=ax)\nplt.legend(['Survived == 0', 'Survived == 1'])\nplt.title('3st Class')\nplt.show()","29fcfbf8":"cummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(df_train[df_train['Age'] < i]['Survived'].sum() \/ len(df_train[df_train['Age'] < i]['Survived']))\n# \uc804\uccb4 \uc778\uc6d0 \uc218 \uc911\uc5d0\uc11c(len) survived\ud55c \uc0ac\ub78c\ub4e4\uc744 (1) sum\ud55c \uac83\ub4e4\uc758 \ube44\uc728\uc744 \ubc18\ud658\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","6f938691":"f,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[0])\n# scale\uc744 count\ub85c \ud558\uba74, 0\uacfc 1\uc5d0\uc11c \uc0c1\ub300\uc801\uc73c\ub85c \ub354 \ub9ce\uc740 \uacf3\uc758 \ub113\uc774\uac00 \ucee4 \ubcf4\uc778\ub2e4.(\ubd84\ud3ec + \uc2e4\uc81c \ube44\uc728)\n# scale\uc744 area\ub85c \ud558\uba74, \uade0\ub4f1\ud55c \ub113\uc774\ub85c \ube44\uad50\ud558\uac8c \ud574\uc900\ub2e4.(\ub3d9\uc77c\ud55c \uc870\uac74\uc5d0\uc11c \ube44\uc728\ub9cc \ubcf4\uae30 \uc704\ud568)\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","573ea04c":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax)","f5c41b36":"f,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","e5b0f330":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 # \uc790\uc2e0\uc744 \ud3ec\ud568\ud574\uc57c\ud558\ub2c8 1\uc744 \ub354\ud569\ub2c8\ub2e4\n# pandas \uc2dc\ub9ac\uc988\ub07c\ub9ac\ub294 \uc5f0\uc0b0\uc774 \uac00\ub2a5\ud558\ub2e4","e097a5a7":"print(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","f855b6d7":"f,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","a23be3e8":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","79b89ad3":"df_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean() # testset \uc5d0 \uc788\ub294 nan value \ub97c \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud569\ub2c8\ub2e4.\n# \ud3c9\uade0\ub300\uce58\ubc95\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i > 0 else 0)\n# \ud6c8\ub828\uc6a9 \ub370\uc774\ud130\uc640 \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc758 \ubcc0\uacbd\ub41c \uac12\uc744 \ub2e4\uc2dc \ubc30\uc815","d5ab3d85":"fig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","f8343a52":"df_train['Ticket'].value_counts()","77111180":"df_train['Initial'] = df_train.Name.str.extract('([A-Za-z]+)\\.')\ndf_test['Initial'] = df_test.Name.str.extract('([A-Za-z]+)\\.')","6ee02b23":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')\n# \ucd94\ucd9c\ud55c Initial\uacfc Sex\uac04\uc758 count \ud655\uc778","cf59f655":"# \ub0a8\uc790 \uc131, \uc5ec\uc790 \uc131\uc744 \uc704\uc758 \uce74\uc6b4\ud2b8\ub97c \ucc38\uace0\ud558\uc5ec \uc801\uc6a9\uc2dc\ud0a4\uace0 replace \uba54\uc18c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \uce58\ud658\n\ndf_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","2a8e6921":"df_train.groupby('Initial').mean()","fd85917b":"# Miss\uc640 Mrs\uac00 \uc0dd\uc874\ub960\uc774 \ub192\uc74c\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uadf8\ub798\ud504\ndf_train.groupby('Initial')['Survived'].mean().plot.bar()","8bfaf20d":"df_train.groupby('Initial').mean()","2ced611a":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","2d058661":"print('Embarked has', sum(df_train['Embarked'].isnull()), 'Null values')","59d63bf5":"df_train['Embarked'].fillna('S', inplace=True)\n# fillna\ub294 NA\uac12\uc744 \ucc44\uc6b0\ub294 \uba54\uc18c\ub4dc\uc774\ub2e4.","a475c6b5":"# \uccab\ubc88\uc9f8 \ubc29\ubc95\uc778 loc\ub97c \uc0ac\uc6a9\ud574\ubcf4\uc790.\ndf_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","7fb829af":"# \ub450\ubc88\uc9f8 \ubc29\ubc95\uc778 apply\ub97c \uc0ac\uc6a9\ud574\ubcf4\uc790. \ud6e8\uc52c \uac04\ub2e8\ud558\ub2e4.\ndef category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)\n# \uc55e\uc758 \ubc29\ubc95\uacfc \ub3d9\uc77c\ud55c \uacb0\uacfc\ub97c \ub0c8\ub294\uc9c0 \ube44\uad50\ud558\uae30 \uc704\ud574\uc11c \ub2e4\ub978 \uceec\ub7fc\uc744 \uc0dd\uc131","c3c80beb":"# all \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574\uc11c \ub450 Series\uac00 \ub3d9\uc77c\ud55c Boolean\uc744 \uac16\ub294\uc9c0 \ube44\uad50\ud574\uc900\ub2e4. \ub2e8 \ud558\ub098\ub77c\ub3c4 \ub3d9\uc77c\ud558\uc9c0 \uc54a\uc73c\uba74 False\ub97c \ubc18\uc601\ud55c\ub2e4.\nprint('1\ubc88 \ubc29\ubc95, 2\ubc88 \ubc29\ubc95 \ub458\ub2e4 \uac19\uc740 \uacb0\uacfc\ub97c \ub0b4\uba74 True \uc918\uc57c\ud568 -> ', (df_train['Age_cat'] == df_train['Age_cat_2']).all())","bff5a334":"# \ub3d9\uc77c\ud55c \uac12\uc744 \uac16\ub294\uac83\uc744 \ud655\uc778 \ud55c \ud6c4, \ubd84\uc11d\uc744 \uc704\ud574 Age\uc640 Age_cat_2\ub97c \uc81c\uac70\ud55c\ub2e4.\ndf_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","d8a735e8":"# Initial \ubcc0\uc218 \ubcc0\uacbd\ndf_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","a4092863":"# Embarked \ubcc0\uc218 \ubcc0\uacbd \uc804 \ub370\uc774\ud130 \ud655\uc778\ndf_train['Embarked'].unique() # \ud639\uc740 .value_counts()","f68cb831":"# \ub370\uc774\ud130\uac00 \uc138\uac00\uc9c0\uc778\uac83\uc744 \ud655\uc778 \ud55c \ud6c4 \ubcc0\uacbd\ndf_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","5d3a8ec3":"# \ubcc0\uacbd\uc774 \uc62c\ubc14\ub974\uac8c \ub418\uc5c8\ub294\uc9c0 \ud655\uc778\n# isnull() \uba54\uc18c\ub4dc\ub294 \ud558\ub098\ub77c\ub3c4 null\uc774 \uc788\uc73c\uba74 True\ub97c \ubc18\uc601\ud55c\ub2e4.\n# any() \uba54\uc18c\ub4dc\ub294 \ud558\ub098\ub77c\ub3c4 True\uac00 \uc788\uc73c\uba74 True\ub97c \ubc18\uc601\ud55c\ub2e4.\n# \uc989, \ud558\ub098\ub77c\ub3c4 null\uc774 \uc788\uc73c\uba74 True\ub97c \ubc18\uc601\ud558\uae30 \ub54c\ubb38\uc5d0  null\uc774 \uc5c6\ub2e4\uba74 False\ub97c \ubc18\uc601\ud574\uc57c \uc815\uc0c1\uc774\ub2e4.\ndf_train['Embarked'].isnull().any()","28f849e8":"# Sex\ub3c4 \uc774\uc0b0\ud615\uc73c\ub85c \ubcc0\uacbd \ndf_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","554bf5e9":"# heatmap plot\uc73c\ub85c \uc0c1\uad00\uad00\uacc4\ub97c \uc2dc\uac01\ud654\n\nheatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']]\n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={'size':16})\n\ndel heatmap_data","014fed65":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')","917bbe9c":"df_train.head() # \uc62c\ubc14\ub974\uac8c \ub418\uc5c8\ub294\uc9c0 \ud655\uc778","84446ce3":"# Embarked\uc5d0\ub3c4 \uc801\uc6a9\ndf_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","66cc5c91":"df_train.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId','Name','SibSp','Parch','Ticket','Cabin'], axis=1, inplace=True)","d03f689b":"df_train.head()","27d2f4f7":"df_test.head()","dd0471b8":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics # \ubaa8\ub378 \ud3c9\uac00\nfrom sklearn.model_selection import train_test_split # training set\uc744 \ub098\ub220\uc8fc\ub294 \ud568\uc218 ","31775784":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","118265b7":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","2e6ccc4a":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","0c35aec6":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100*metrics.accuracy_score(prediction, y_vld)))","4c19a691":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","b0f3b32e":"plt.figure(figsize=(8,8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","0c7dbd8d":"submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","593a8ea4":"submission.head()","9d88d4b8":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","da53f325":"submission.to_csv(\".\/my_first_submission.csv\", index=False)","66c5dfcb":"## 4.2 Model generation and prediction","05db67f7":"## 2.7 Family - SibSp + Parch","2d1524a2":"Class\uac00 \ub192\uc744\uc218\ub85d \ub098\uc774\uc758 \ud3c9\uade0\uce58\uac00 \uc62c\ub77c\uac04\ub2e4.\n\n\uc5ec\uae30\uc5d0\ub294 Age\ubcc4\ub85c Class\uc758 \ubd84\ud3ec\ub9cc \ubcf4\uc5ec\uc8fc\ub294 \uac83\uc774\uace0, \uc0dd\uc874\uacfc\ub294 \uc5f0\uad00\uc774 \uc5c6\ub2e4.","0aa0352b":"### \ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ud655\ub960\uc774 \ub192\ub2e4","f2509571":"- Age\uc758 \ud3c9\uade0\uc744 \uc774\uc6a9\ud574 \ucc44\uc6b0\uae30(\ud3c9\uade0\ub300\uce58\ubc95)","47aaba34":"- feature\uc740 column\uacfc \ub3d9\uc77c\ud558\ub2e4.\n1. column engineering\uc744 \ud55c\ub2e4(\uc804\ucc98\ub9ac \ud558\uba74\uc11c \uc720\uc758\ubbf8\ud55c \ubcc0\uc218)\n2. \uadf8 \ub2e4\uc74c model\uc744 \ub9cc\ub4e0\ub2e4.","b1525237":"## 3.1 Fill Null","4c26c6ec":"Embarked\ub294 Null\uac12\uc774 2\uac1c\uc774\ubbc0\ub85c \uac04\ub2e8\ud788 \uac00\uc7a5 \ub9ce\uc740 S Class\ub85c \ucc44\uc6b0\uaca0\ub2e4.","c8161b89":"\ub098\uc774\ub300\ubcc4\ub85c \uc0dd\uc874\ub960\uc774 \uc5b4\ub5bb\uac8c \ub418\ub294\uac00?","4c9af25f":"test set\uc5d0 \ub300\ud558\uc5ec \uc608\uce21\ud558\uace0 \uacb0\uacfc\ub97c csv \ud30c\uc77c\ub85c \uc800\uc7a5","a74802c9":"test \ub370\uc774\ud130\uac00 'Survived'\ub9cc \uc5c6\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \ub3d9\uc77c\ud55c column\ub4e4\ub9cc \ub0a8\uc74c\uc744 \uc54c \uc218 \uc788\ub2e4.","599f83ce":"# 2. Exploratory data analysis","5406ff90":"### 3.1.1 Fill Null in Age using title\n\ud0d1\uc2b9\uac1d \uc774\ub984 Title\uc744 \ucd94\ucd9c\ud558\uc5ec \uc0ac\uc6a9","3940b953":"\uc5ec\uc131\uacfc \uad00\uacc4\uc788\ub294 Miss, Mrs\uac00 Survived(\uc0dd\uc874\ub960)\uc774 \ub192\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","f0419d43":"\ube44\ub300\uce6d\uc740 \ubaa8\ub378\uc774 \uc798\ubabb \ud559\uc2b5\ub420 \uc218 \uc788\ub2e4. \n\noutlier\uc758 \uc601\ud5a5\uc744 \uc904\uc774\uae30 \uc704\ud574 log\ub97c \ud574\uc918\uc57c \ud55c\ub2e4.","7cb6a14d":"# 3. Feature engineering\n- null data\ub97c \ucc44\uc6b4\ub2e4. \ud1b5\uacc4\uce58\ub97c \ucc38\uace0\ud558\uac70\ub098 \uac1c\uc778\uc758 \uc544\uc774\ub514\uc5b4\ub97c \ud65c\uc6a9\ud574\uc11c. \uc774 \ubd80\ubd84\uc774 \ubaa8\ub378\uc758 \uc131\ub2a5\uc5d0 \uc911\uc694\ud560 \uc218\ub3c4 \uc788\ub294 \ubd80\ubd84\uc774\uae30 \ub54c\ubb38\uc5d0 \uc2e0\uc911\ud558\uac8c \ucc44\uc6cc\uc57c \ud560 \uac83.\n- Feature engineer\uc740 \uc2e4\uc81c \ubaa8\ub378\uc5d0 \ud559\uc2b5\uc5d0 \uc368\uc57c\ud558\ubbc0\ub85c \ud6c8\ub828 \ub370\uc774\ud130 + \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ubaa8\ub450 \uc801\uc6a9\ud574\uc918\uc57c \ud55c\ub2e4.","a5d54160":"\uac00\uc871\uc774 \ub108\ubb34 \uc5c6\uc5b4\ub3c4 \ub3c4\uc640\uc904 \uc0ac\ub78c\uc774 \uc5c6\uac70\ub098, \ub108\ubb34 \ub9ce\uc73c\uba74 \ubaa8\ub450 \uc0b4\ub9b4 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ud655\ub960\uc0c1 \uc0dd\uc874\ub960\uc774 \uc801\uc5b4\uc9c4\ub2e4.","9050d381":"## 3.4 One-hot encoding on Initial and Embarked\n- \uc804\ucc98\ub9ac \uc791\uc5c5\n- \uc218\uce58\ud654\uc2dc\ud0a8 \uce74\ud14c\uace0\ub9ac\uc5d0 one-hot encoding\uc744 \ud574\uc900\ub2e4.\n- \uc774\ub294 0\uacfc 1\ub85c \uad6c\uc131\ub41c 5\ucc28\uc6d0\uc758 \ubca1\ud130\ub85c \ub098\ud0c0\ub0b4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\n- \uc704\uc758 \ubc29\ubc95\uc740 pandas\uc758 get_dummies\ub97c \uc0ac\uc6a9\ud55c\ub2e4.","e5620a6e":"# 1. \ub370\uc774\ud130\uc14b \ud655\uc778","988613e7":"## 2.4 Age","059fefe6":"train, test \ubfd0\ub9cc\uc544\ub2c8\ub77c Valid Set\uc744 \ub9cc\ub4e4\uc5b4\uc11c \uac80\ud1a0\ud560 \ud544\uc694\uc131.","5e4a236b":"# 4. Building machine learning model and prediction using the trained model\n- sklearn\uc744 \uc0ac\uc6a9\ud558\uc5ec \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \ub9cc\ub4e4\uae30","371debfe":"**Ticket**\uc740 \uc5b4\ub5a4\uc2dd\uc73c\ub85c \uc4f0\uc77c \uc218 \uc788\uc744\uae4c....?","88aea92b":"## 2.2 Sex\np.s \uc140\uc5d0\uc11c M\uc744 \ub204\ub974\uba74 \ub9c8\ud06c\ub2e4\uc6b4\uc73c\ub85c \ub418\uace0, Y\ub97c \ub204\ub974\uba74 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \ub41c\ub2e4.","ef32ba39":"## 3.5 Drop columns\n- \ud544\uc694\ud55c Column\uc744 \uc81c\uc678\ud558\uace0 \ubaa8\ub450 \uc9c0\uc6b0\uae30","9aa4ef6b":"## 2.8 Fare","c01dcdcf":"\ube44\ub300\uce6d\uc131\uc744 \ub9ce\uc774 \uc904\uc784\n\n\uc774 \ubd80\ubd84\uc740 \uc0ac\uc2e4 feature engineering \ud30c\ud2b8","29fdcbcc":"## 4.4 Prediction on Test set\n- Test set\uc73c\ub85c \uc608\uce21","2bc604ed":"- Null \ucc44\uc6b0\uae30","9018b2a7":"- Feature\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud30c\uc545","8e365bcb":"## 1.2 Target label \ud655\uc778","7866c0f6":"## 2.1 Pclass","3ceb6111":"## 4.1 Preparation - Split dataset into train, valid, test set","29959c4d":"## 2.9 Cabin\nNaN \uac12\uc774 \ub108\ubb34 \ub9ce\uc544\uc11c \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc74c","420b3629":"## 2.10 Ticket","5f2755e6":"## 3.2 Change Age(continuous to categorical)\n- Age\ub97c \uad6c\uac04\ubcc4\ub85c \ubc94\uc8fc\ud615\uc73c\ub85c \ubc14\uafd4\uc8fc\uae30, \ubc94\uc8fc \uc548\uc5d0 \ub370\uc774\ud130\uac00 \ubd80\uc871\ud558\uba74 information loss\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\ub2e4.\n- \uccab\ubc88\uc9f8 \ubc29\ubc95\uc740 loc\ub97c \uc368\uc8fc\uae30, \ub450\ubc88\uc9f8 \ubc29\ubc95\uc740 apply \uc368\uc8fc\uae30","f7d25a71":"\uc80a\uc740 \uc0ac\ub78c\uc77c\uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\ub2e4 (1st Class\uc5d0\uc11c)","98e4ad7a":"- Sex\uc640 Pclass, Fare\uac00 Survived\uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub2e4.\n- '\uac15\ud55c \uc0c1\uad00\uad00\uacc4'\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub294 \ubd88\ud544\uc694\ud55c \uc815\ubcf4\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc5b4\ub5a4 \ubcc0\uc218\ub07c\ub9ac\uc758 \uc0c1\uad00\uad00\uacc4\uac00 1\uc774\uac70\ub098 -1\uc778 \uacbd\uc6b0\ub294 \ubb34\uc5b8\uac00\uac00 \uc798\ubabb\ub41c \ub370\uc774\ud130\uc774\uae30 \ub54c\ubb38\uc774\ub2e4.","f1509d17":"## 4.3 Feature importance\n\ud559\uc2b5\ub41c \ubaa8\ub378\uc740 feature importance\ub97c \uac16\ub294\ub2e4. \n\n\ubaa8\ub378\uc774 \uc5b4\ub5a4 feature\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\uc558\ub294\uc9c0 \ud655\uc778(\uac00\uc911\uce58\uac00 \uac00\uc7a5 \ud070 feature \ucc3e\uae30)","b7ce5a83":"## 3.3 Change Initial, Embarked and Sex(string to numerical)","7c6d6826":"## 2.3 Both Sex and Pclass","3d73e017":"### 3.1.2 Fill Null in Embarked","97b79c02":"## 1.1 Null data check","4edcd02e":"- \uba85\ubaa9\ud615 \ubcc0\uc218\ub97c \uc774\uc0b0\ud615 \ubcc0\uc218\ub85c \uc218\uce58\ud654\uc2dc\ucf1c\uc918\uc57c\ud55c\ub2e4. \n- map method \uc0ac\uc6a9","36fc4603":"\uacb0\uad6d \uc544\uae4c\uc758 \ube44\uc728\ucc98\ub7fc 38.4%\uac00 \uc8fd\uc5c8\uc73c\ubbc0\ub85c, max\uac12\uc778 80\uc0b4\uc5d0\uc11c \uadf8 \ube44\uc728\uc774 \uc218\ub834\ud55c\ub2e4.\n\n\ub098\uc774\uac00 \uc5b4\ub9b4\uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\ub2e4"}}