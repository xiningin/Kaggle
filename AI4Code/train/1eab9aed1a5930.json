{"cell_type":{"94c0d7c8":"code","aab1dcb6":"code","8b387491":"code","8263fa85":"code","ae953cf9":"code","9bc073bc":"code","d6a83417":"code","c2aefa4a":"code","a64fc67c":"code","38b2d620":"code","b96b9d4c":"code","4085cdf5":"code","8c26eac8":"code","c8f5c00b":"code","73de16eb":"code","0257fa6d":"code","1c901f22":"code","5469ae47":"code","0f99bad8":"code","53db2c8e":"code","eacfd040":"code","142aee91":"code","fea51aca":"code","cae751f3":"code","6fe854d0":"code","45e68f48":"code","2acc089d":"code","f6eb269e":"code","274a5f4f":"code","ff166d66":"code","515344a5":"code","af8bec03":"code","be5b3327":"code","8a1bfbf1":"code","8733ffe3":"code","ea5d4c2d":"code","8a53d885":"code","cf2d18cb":"code","355f654e":"code","af0d28e4":"code","69243c41":"code","a081fbf6":"code","e6acbad7":"code","f563974a":"code","e062dd00":"code","f39161de":"code","ed5a2cae":"markdown","8e31fcad":"markdown","1dfce687":"markdown","b3043a15":"markdown","bf498bfb":"markdown","e66457f7":"markdown"},"source":{"94c0d7c8":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom surprise import SVD\nfrom surprise import Dataset\nfrom surprise.model_selection import cross_validate\npd.set_option('mode.chained_assignment', None)","aab1dcb6":"df=pd.read_csv(\"..\/input\/wine-reviews\/winemag-data-130k-v2.csv\")\ndf.shape","8b387491":"df.head()","8263fa85":"df.drop(['Unnamed: 0'],axis=1,inplace=True)","ae953cf9":"L=((df.isnull().sum()\/df.isnull().count()*100).sort_values()).to_dict()\nfor i in L:\n    print(i,\"--->\",L[i])  ","9bc073bc":"df.drop(['region_2'],axis=1,inplace=True)","d6a83417":"df['price'].fillna(np.mean(df['price']),inplace=True)","c2aefa4a":"cat=['country','description','designation','province','region_1','taster_name','taster_twitter_handle','title','variety','winery']","a64fc67c":"for i in cat:\n    print(i,'->',df[i].isnull().sum())","38b2d620":"df.drop(['taster_twitter_handle','designation'],axis=1,inplace=True)\ndf= df.dropna()\ndf","b96b9d4c":"duplicateRowsDF = df[df.duplicated()]\nindex_names = duplicateRowsDF.index \ndf.drop(index_names, inplace = True) \ndf.reset_index(inplace=True)\ndf.shape","4085cdf5":"df.describe()","8c26eac8":"sns.distplot(np.log(df['price']))","c8f5c00b":"np.log(df.price).skew()","73de16eb":"sns.boxplot(y=df[\"points\"],color='yellow')","0257fa6d":"sns.scatterplot(x=df['points'], y=df['price'],data=df,color='cyan')","1c901f22":"fig=plt.figure(figsize=(10,5))\nsns.countplot(df['points'], palette= ['yellow', 'pink', 'cyan','salmon'])\nplt.ylabel('No. of Wines', fontsize=16)\nplt.xlabel('Points ', fontsize=16)\nplt.title('No of wines with points')\nplt.show()","5469ae47":"fig=plt.figure(figsize=(10,5))\nax=sns.countplot(df['taster_name'], palette= ['yellow', 'pink', 'cyan','salmon'])\nplt.title(\"Number of Wines Rated By Different Tasters\", fontsize=18)\nplt.ylabel('No. of Wines', fontsize=16)\nplt.xlabel('Taster Name ', fontsize=16)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, horizontalalignment='center')\nplt.show()","0f99bad8":"grouped = df.groupby(['taster_name'])\navg=pd.DataFrame(grouped['points'].agg(np.mean))\nfig=plt.figure(figsize=(8,7))\nax=sns.barplot(x = avg['points'], y =avg.index)\nplt.xlabel(\"Average points\", size=14)\nplt.ylabel(\"Taster Name\", size=14)\nplt.title(\"Average points given by tasters\", size=18)\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" % p.get_width(), xy=(p.get_width(), p.get_y()+p.get_height()\/2),\n            xytext=(5, 0), textcoords='offset points', ha=\"left\", va=\"center\")","53db2c8e":"grouped = df.groupby('taster_name')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['variety'].unique()\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.reset_index(inplace=True)\ndata.columns=['count','name']\na=data.sort_values(['count'],ascending=False)\nfig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a['name'],y=a['count'], palette= ['yellow', 'pink', 'cyan','salmon'])\nplt.title(\"Number of Varieties Rated By Different Tasters\", fontsize=18)\nplt.ylabel('No. of Varieties', fontsize=16)\nplt.xlabel('Taster Name ', fontsize=16)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, horizontalalignment='center')\nplt.show()","eacfd040":"grouped = df.groupby('taster_name')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['winery'].unique()\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.reset_index(inplace=True)\ndata.columns=['count','name']\na=data.sort_values(['count'])\nfig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a['name'],y=a['count'], palette= ['pink', 'cyan','salmon', 'yellow', 'lightskyblue', 'lightcoral'])\nplt.title(\"Number of Wineries Rated By Different Tasters\", fontsize=18)\nplt.ylabel('No. of Wineries', fontsize=16)\nplt.xlabel('Taster Name ', fontsize=16)\n\nax.set_xticklabels(ax.get_xticklabels(), rotation=90, horizontalalignment='center')\nplt.show()","142aee91":"df.country.unique()","fea51aca":"import pycountry\ndef do_fuzzy_search(country):\n    result = pycountry.countries.search_fuzzy(country)\n    return result[0].alpha_3\niso_map = {country: do_fuzzy_search(country) for country in df[\"country\"].unique()}\ndf[\"country_code\"] = df[\"country\"].map(iso_map)\ngrouped = df.groupby(['country_code','country'])\navg=pd.DataFrame(grouped['points'].agg(np.mean))\navg.reset_index(inplace=True)\navg.columns=['Country Code','Country','Average Points']\nimport plotly.express as px\nfig = px.choropleth(avg, locations=avg['Country Code'],color=avg['Average Points'],hover_name=avg['Country'],\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","cae751f3":"# Pie chart showing countries with most number of wines  \nmy_dict=(df['country'].value_counts()).to_dict()\ncount= pd.DataFrame(list(my_dict.items()),columns = ['c','count'])\nlabels ='Italy','Australia','US', 'Spain','Canada', 'France', 'Argentina'\nsizes = [count['count'].iloc[2],count['count'].iloc[5],count['count'].iloc[0],count['count'].iloc[3],count['count'].iloc[6],\n         count['count'].iloc[1],count['count'].iloc[4]]\nexplode = (0.1, 0.1, 0.1, 0.1,0.1, 0.1,0.1 )\n\nfig1 , ax1 = plt.subplots(figsize=(7,7))\n\nax1.pie(sizes,\n        explode = explode,\n        labels = labels,\n        autopct = '%1.1f%%',\n        shadow = True,\n        startangle = 80)\nplt.title(\"No. of wines rated from different countries\")\nax1.axis ('equal')\n\nplt.show()","6fe854d0":"grouped = df.groupby('country')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['taster_name'].unique()\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.columns=['name']\nlabels=[]\nfor i in data['name']:\n    labels.append(i)\nsizes=data.index\ncolors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']\n # explode a slice if required\nfig=plt.figure(figsize=(8,7))\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True)\n        \n#draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.75,color='black', fc='white',linewidth=1.25)\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.title(\"No of different tasters that have rated wines from different countries\")\n# Set aspect ratio to be equal so that pie is drawn as a circle.\nplt.axis('equal')\nplt.show()  ","45e68f48":"grouped = df.groupby('country')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['variety'].unique()\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.reset_index(inplace=True)\ndata.columns=['count','name']\na=data.sort_values(['count'],ascending=False)\nfig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a['name'],y=a['count'], palette= ['pink', 'cyan','salmon', 'yellow', 'lightskyblue', 'lightcoral'])\nplt.title(\"Number of Varieties from Different Countries\", fontsize=18)\nplt.ylabel('No. of Varieties', fontsize=16)\nplt.xlabel('Country ', fontsize=16)\n\nax.set_xticklabels(ax.get_xticklabels(), horizontalalignment='center')\nplt.show()","2acc089d":"grouped = df.groupby('country')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['winery'].unique()\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.reset_index(inplace=True)\ndata.columns=['count','name']\na=data.sort_values(['count'])\nfig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a['name'],y=a['count'], palette= ['pink', 'cyan','salmon', 'yellow', 'lightskyblue', 'lightcoral'])\nplt.title(\"Number of Wineries in Different Countries\", fontsize=18)\nplt.ylabel('No. of Wineries', fontsize=16)\nplt.xlabel('Country ', fontsize=16)\n\nax.set_xticklabels(ax.get_xticklabels(), horizontalalignment='center')\nplt.show()","f6eb269e":"grouped = df.groupby('title')\npopular_wine = pd.DataFrame(grouped['points'].agg([np.size, np.mean]))\nmost_popular = popular_wine.sort_values(['size'], ascending=False)\na=most_popular.head(10)\nobj=['size','mean']\nfig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a.index,y=a['size'], palette= ['pink', 'cyan','salmon', 'yellow', 'lightskyblue', 'lightcoral'])\nplt.title(\"Top Rated Wines\", fontsize=18)\nplt.ylabel('No of Ratings', fontsize=16)\nplt.xlabel('Name of the Wine', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=90,horizontalalignment='center')\nplt.show()","274a5f4f":"fig=plt.figure(figsize=(10,5))\nax=sns.barplot(x=a.index,y=a['mean'], palette= ['pink', 'cyan','salmon', 'yellow', 'lightskyblue', 'lightcoral'])\nplt.title(\"Avergae Points of Top Rated Wines\", fontsize=18)\nplt.ylabel('Average Points', fontsize=16)\nplt.xlabel('Name of the Wine', fontsize=16)\nax.set_xticklabels(ax.get_xticklabels(), rotation=90,horizontalalignment='center')\nplt.show()","ff166d66":"df['len']=df['description'].apply(lambda x:len(x.split(' ')))\nwinedf=df[df['len']>=50]\nwinedf.shape","515344a5":"import spacy as sp\nsp.prefer_gpu()\nimport en_core_web_sm\nnlp = en_core_web_sm.load()\nimport re\ndef clean_text(doc):\n    #Clean the document. Remove pronouns, stopwords, lemmatize the words and lowercase them\n    doc = nlp(doc)\n    tokens = []\n    exclusion_list = [\"nan\"]\n    for token in doc:\n        if token.is_stop or token.is_punct or token.text.isnumeric() or (token.text.isalnum()==False) or token.text in exclusion_list :\n            continue\n        token = str(token.lemma_.lower().strip())\n        tokens.append(token)\n    return \" \".join(tokens) \nwinedf['cleaned_description']=winedf.apply(lambda row: clean_text(row[\"description\"]) ,axis=1)\nwinedf.reset_index(inplace=True)\nwinedf","af8bec03":"name=list(winedf['taster_name'].unique())\nname.sort()\nfrom wordcloud import WordCloud,STOPWORDS\nplt.figure(figsize=(40,25))\nsubset = winedf[winedf['taster_name']==name[0]]\ntext = subset.cleaned_description.values\ncloud1=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                ).generate(\" \".join(text))\nplt.subplot(4,4,1)\nplt.axis('off')\nplt.title(name[0],fontsize=40)\nplt.imshow(cloud1)\nsubset = winedf[winedf['taster_name']==name[1]]\ntext = subset.cleaned_description.values\ncloud2=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,2)\nplt.axis('off')\nplt.title(name[1],fontsize=40)\nplt.imshow(cloud2)\nsubset = winedf[winedf['taster_name']==name[2]]\ntext = subset.cleaned_description.values\ncloud3=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,3)\nplt.axis('off')\nplt.title(name[2],fontsize=40)\nplt.imshow(cloud3)\n\nsubset = winedf[winedf['taster_name']==name[3]]\ntext = subset.cleaned_description.values\ncloud4=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,4)\nplt.axis('off')\nplt.title(name[3],fontsize=40)\nplt.imshow(cloud4)\n\nsubset = winedf[winedf['taster_name']==name[4]]\ntext = subset.cleaned_description.values\ncloud5=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,5)\nplt.axis('off')\nplt.title(name[4],fontsize=40)\nplt.imshow(cloud5)\n\nsubset = winedf[winedf['taster_name']==name[5]]\ntext = subset.cleaned_description.values\ncloud6=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,6)\nplt.axis('off')\nplt.title(name[5],fontsize=40)\nplt.imshow(cloud6)\n\nsubset = winedf[winedf['taster_name']==name[6]]\ntext = subset.cleaned_description.values\ncloud7=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,7)\nplt.axis('off')\nplt.title(name[6],fontsize=40)\nplt.imshow(cloud7)\n\nsubset = winedf[winedf['taster_name']==name[7]]\ntext = subset.cleaned_description.values\ncloud8=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,8)\nplt.axis('off')\nplt.title(name[7],fontsize=40)\nplt.imshow(cloud8)\n\nsubset = winedf[winedf['taster_name']==name[8]]\ntext = subset.cleaned_description.values\ncloud9=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,9)\nplt.axis('off')\nplt.title(name[8],fontsize=40)\nplt.imshow(cloud9)\n\nsubset = winedf[winedf['taster_name']==name[9]]\ntext = subset.cleaned_description.values\ncloud10=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,10)\nplt.axis('off')\nplt.title(name[9],fontsize=40)\nplt.imshow(cloud10)\n\nsubset = winedf[winedf['taster_name']==name[10]]\ntext = subset.cleaned_description.values\ncloud11=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,11)\nplt.axis('off')\nplt.title(name[10],fontsize=40)\nplt.imshow(cloud11)\n\nsubset = winedf[winedf['taster_name']==name[11]]\ntext = subset.cleaned_description.values\ncloud12=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,12)\nplt.axis('off')\nplt.title(name[11],fontsize=40)\nplt.imshow(cloud12)\n\nsubset = winedf[winedf['taster_name']==name[12]]\ntext = subset.cleaned_description.values\ncloud13=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,13)\nplt.axis('off')\nplt.title(name[12],fontsize=40)\nplt.imshow(cloud13)\n\nsubset =winedf[winedf['taster_name']==name[13]]\ntext = subset.cleaned_description.values\ncloud14=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,14)\nplt.axis('off')\nplt.title(name[13],fontsize=40)\nplt.imshow(cloud14)\n\nsubset = winedf[winedf['taster_name']==name[14]]\ntext = subset.cleaned_description.values\ncloud15=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,15)\nplt.axis('off')\nplt.title(name[14],fontsize=40)\nplt.imshow(cloud15)\n\nsubset = winedf[winedf['taster_name']==name[15]]\ntext = subset.cleaned_description.values\ncloud16=WordCloud(stopwords=STOPWORDS,background_color='black',collocations=False,width=2500,height=1800\n                       ).generate(\" \".join(text))\nplt.subplot(4,4,16)\nplt.axis('off')\nplt.title(name[15],fontsize=40)\nplt.imshow(cloud16)\nplt.show()","be5b3327":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\nwinedf['title_id']=le.fit_transform(winedf['title'])\ncontentdf=winedf[['title_id','title','description','cleaned_description']]\ncontentdf=contentdf.set_index('title_id')\ncontentdf.reset_index(inplace=True)\n#contentdf.drop(['index'],axis=1,inplace=True)\ncontentdf","8a1bfbf1":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\ntfidf = TfidfVectorizer(sublinear_tf=True, min_df=3,ngram_range=(1, 3), stop_words='english')\ntfidf_description = tfidf.fit_transform((contentdf[\"cleaned_description\"])) \nprint(\"Each of the %d text is represented by %d features (TF-IDF score of unigrams and bigrams)\" %(tfidf_description.shape))\n# Finding cosine similarity between vectors \nfrom sklearn.metrics.pairwise import cosine_similarity \ncos_sim = linear_kernel(tfidf_description, tfidf_description) ","8733ffe3":"indices = pd.Series(contentdf.index) \ndef recommendations(title, cosine_sim = cos_sim): \n    recommended_wine = [] \n    index = indices[indices == title].index[0]\n    similarity_scores = pd.Series(cosine_sim[index]).sort_values(ascending = False) \n    top_10_wines = list(similarity_scores.iloc[1:11].index)\n    for i in top_10_wines: \n        recommended_wine.append(list(contentdf.index)[i]) \n    top_5_wines=[]\n    for i in recommended_wine:\n        if i not in top_5_wines and i!=title:\n            top_5_wines.append(i)\n    recommendwine=[]\n    for i in top_5_wines:\n        recommendwine.append(contentdf['title'][i])\n    return recommendwine","ea5d4c2d":"recommendations(14072) ","8a53d885":"wine=\"La Bioca 2013  Barbaresco\"\nprint(\"a wine you liked: \",wine)\na=contentdf.loc[contentdf['title']==wine]\nid=a.index[0]\nr=recommendations(id)\nprint(\"*****Here are a few recommendations for you*****\")\nfor i,j in zip(r,range(1,len(r)+1)):\n    print(j,\".\",i)","cf2d18cb":"grouped = df.groupby('title')\npopular_wine = pd.DataFrame(grouped['points'].agg([np.size, np.mean]))\nmost_popular = popular_wine.sort_values(['size'], ascending=False)\nmost_popular.head(10)\npop_title=list(most_popular[:11].index)\nprint(\"\\n********************************************TRY THE MOST POPULAR WINES********************************************************\")\nfor i,j in zip(pop_title,range(len(pop_title)+1)):\n    print(j,'.',i)","355f654e":"grouped = df.groupby('taster_name')\nn=[]\nc=[]\nfor name,group in grouped:\n    n.append(name)\n    a=group['points']\n    c.append(len(a))\ndata=pd.DataFrame(n,c)\ndata.reset_index(inplace=True)\ndata.columns=['count','name']\na=data.sort_values(['count'])\na","af0d28e4":"index=df.loc[df['taster_name']=='Christina Pickard']\ndf.drop(index.index,inplace=True)\ndf\n","69243c41":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['taster_id']=le.fit_transform(df['taster_name'])\ndf['title_id']=le.fit_transform(df['title'])\ncdf=df[['taster_id','title_id','taster_name','country','province','region_1','price','title','variety','winery','points']]\ncdf.reset_index(inplace=True)\ncdf.drop(['index'],axis=1,inplace=True)","a081fbf6":"cdf","e6acbad7":"from surprise import Reader\nreader = Reader(rating_scale=(80, 100))\ndata = Dataset.load_from_df(cdf[['taster_id', 'title_id', 'points']], reader)\nsvd = SVD()\ncross_validate(svd, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)\n","f563974a":"cdf.loc[cdf['taster_name']=='Fiona Adams']","e062dd00":"def user_rec(id):\n    taster= df[['title_id','country','province','region_1','price','title','variety','winery']].copy()\n    taster = taster.reset_index()\n# getting full dataset\n    data = Dataset.load_from_df(cdf[['taster_id', 'title_id', 'points']], reader)\n    trainset = data.build_full_trainset()\n    svd.fit(trainset)\n    taster['Estimate_Score'] = taster['title_id'].apply(lambda x: svd.predict(id, x).est)\n    taster = taster.drop(['index','title_id'], axis = 1)\n    taster= taster.sort_values('Estimate_Score', ascending=False)\n    return taster.head(10)","f39161de":"name='Fiona Adams'\nprint(\"THE NAME OF THE TASTER: \",name)\ndetails=cdf.loc[cdf['taster_name']==name]\nid=details['taster_id'].iloc[0]\na=user_rec(id)\na.reset_index(inplace=True)\na.drop(['index'],axis=1,inplace=True)\ndetails.reset_index(inplace=True)\ndetails.drop(['index','taster_id','title_id','taster_name'],axis=1,inplace=True)\nprint(\"\\n********************************************TASTER HAS RATED THESE WINES******************************************************\")\ndisplay(details)\nprint(\"\\n****************HERE ARE A FEW RECOMMENDATIONS FOR THE TASTER WITH THE ESTIMATED POINTS THE TASTER WILL GIVE******************\")\ndisplay(a)\n","ed5a2cae":"multple rows have been repeated so we drop those","8e31fcad":"<h2>collabrative filter recommendations<\/h2>","1dfce687":"<h2>popularity based recommendation<\/h2>","b3043a15":"as 60% of the data for region2 is missing we drop that column","bf498bfb":"<h2>content based recommendation<\/h2>","e66457f7":"we cansee that the points range from 80 to 100"}}