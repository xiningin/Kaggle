{"cell_type":{"84a6c691":"code","5c7c1532":"code","34eda4c9":"code","0a69d757":"code","890dac62":"code","2721d8b5":"code","5523c7d7":"code","cca817a9":"code","bbe8e228":"code","c7eee32c":"code","fbe03950":"code","a92bec2c":"code","e4007586":"code","11638ab1":"code","92da47c2":"code","a59cd633":"code","65e9c798":"code","469537cc":"code","3702a8a0":"code","452b337c":"markdown"},"source":{"84a6c691":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c7c1532":"import pandas as ps\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nfrom pandas_profiling import ProfileReport\n\n# reading the dataset(csv file)\n\n\nwinners_raw = ps.read_csv('\/kaggle\/input\/nobel-prize-winners-19002020\/nobel_prize_by_winner.csv')\nwinners_raw.head(10)","34eda4c9":"# Primary checks\nwinners_raw.describe() #Less numeric description as string leads as datatypes","0a69d757":"# Data types\nwinners_raw.dtypes","890dac62":"# Data types\nwinners_raw.shape","2721d8b5":"# Null values check\nwinners_raw.isnull().sum()","5523c7d7":"# dropping columns that are not needed for quants.\n\nwinners = winners_raw.drop(columns=['id','died','bornCity','bornCountry','diedCountry','diedCountryCode','diedCity','motivation','overallMotivation','name','city','country'],axis=1)\nwinners.head(10)","cca817a9":"winners1 = winners.dropna(subset=['year','share','category'])\nwinners1.shape #head(10)","bbe8e228":"# Converting datatypes into relative ones.\ndtype_converter = {'firstname': str,\n                    'surname':str,\n                    'share':int,\n                    'year':int,\n                    'gender':str }\nwinners1 = winners1.astype(dtype_converter)\n\n# Let's do something about dates and convert to 'age'\nprint(winners1.dtypes)","c7eee32c":"# Seperating the winners who are alive.\n\nalive = winners1.loc[winners_raw['died'] == \"0000-00-00\" ]\n\ncategory_dummies = ps.get_dummies(alive['category'])\ncategory_dummies\n\ngender_dummies = ps.get_dummies(alive['gender'])\ngender_dummies","fbe03950":"alive2 = ps.concat([alive,category_dummies,gender_dummies],axis=1)\nalive2.head(10)","a92bec2c":"# Time to plot graphs\n# Category: peace\n\n\nCountryVsCat = alive2.groupby('bornCountryCode')['peace'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\")\n","e4007586":"# Category: chemistry\n\n\nCountryVsCat = alive2.groupby('bornCountryCode')['chemistry'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\").set_title(\"Chemistry - Counts\")\n","11638ab1":"CountryVsCat = alive2.groupby('bornCountryCode')['literature'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\").set_title(\"literature - Counts\")","92da47c2":"CountryVsCat = alive2.groupby('bornCountryCode')['economics'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\").set_title(\"economics - Counts\")","a59cd633":"CountryVsCat = alive2.groupby('bornCountryCode')['medicine'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\").set_title(\"medicine - Counts\")","65e9c798":"CountryVsCat = alive2.groupby('bornCountryCode')['physics'].sum()\nplt.figure(figsize=(28,11))\nsn.barplot(x=CountryVsCat.index,y=CountryVsCat.values,palette = \"rainbow\").set_title(\"physics - Counts\")","469537cc":"male_count = alive2['male'].value_counts().values[0]\nfemale_count = alive2['female'].value_counts().values[1]\ntotal = male_count+female_count\nfig , ax = plt.subplots()\nplt.figure(figsize=(25,11))\n\nlabels = ['males','females']\nvalues1 = [((male_count\/total)*100),((female_count\/total)*100)]\n\n\nax.pie(values1,labels=labels)\nax.set_title(\"Male Vs Female winner counts\")\n","3702a8a0":"# Onto plotting the rest for remaining winners' set...","452b337c":"# Step 1 : Data cleanup and processing.( columns such as Motivation, City, diedCity have NaNs, raw text, special chars)"}}