{"cell_type":{"ac59aa44":"code","f1b71e22":"code","98896266":"code","90eca723":"code","b1dc3a62":"code","38e6db55":"code","4dbbade6":"code","1e53bba3":"code","c01fe431":"code","347f31a1":"code","efb8102a":"code","988c2b5a":"markdown","2e4c97c1":"markdown","b1ba761c":"markdown","93c5807a":"markdown","1d600a30":"markdown"},"source":{"ac59aa44":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","f1b71e22":"!kaggle competitions download -c 18011765watermelon-price\n!unzip 18011765watermelon-price.zip\nimport pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","98896266":"\nlearning_rate = 0.001\ntraining_epochs = 1000\nbatch_size = 80","90eca723":"train_data=pd.read_csv('train_water_melon_price.csv',header=None,skiprows=[0], usecols=range(1,9))\ntest_data=pd.read_csv('test_watermelon_price.csv',header=None,skiprows=[0], usecols=range(1,8))\nx_train_data=train_data.loc[:,0:7]\ny_train_data=train_data[[8]]\n\nx_train_data=np.array(x_train_data)\ny_train_data=np.array(y_train_data)\n\n\nx_train_data=torch.FloatTensor(x_train_data)\ny_train_data=torch.FloatTensor(y_train_data)\n\ntrain_dataset = torch.utils.data.TensorDataset(x_train_data, y_train_data)\ndata_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","b1dc3a62":"layer 5\uac1c \uc313\uace0 output\uac1c\uc218 7->2048->1024->512->256->1","38e6db55":"linear1 = torch.nn.Linear(7,2048,bias=True)\nlinear2 = torch.nn.Linear(2048,1024,bias=True)\nlinear3= torch.nn.Linear(1024,512,bias=True)\nlinear4= torch.nn.Linear(512,256,bias=True)\nlinear5= torch.nn.Linear(256,1,bias=True)\nrelu= torch.nn.ReLU()","4dbbade6":"torch.nn.init.xavier_uniform_(linear1.weight)\n\ntorch.nn.init.xavier_uniform_(linear2.weight)\n\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_uniform_(linear4.weight)\ntorch.nn.init.xavier_uniform_(linear5.weight)\n# ======================================\n# relu\ub294 \ub9e8 \ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\uc5d0\uc11c \ube7c\ub294 \uac83\uc774 \uc88b\ub2e4.\n# ======================================\nmodel = torch.nn.Sequential(linear1,relu,\n                            linear2,relu,\n                            linear3,relu,\n                            linear4,relu,\n                            linear5\n                            ).to(device)","1e53bba3":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) \ntotal_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n    \n\nprint('Learning finished')","c01fe431":"with torch.no_grad():\n\n  x_test_data=test_data.loc[:,:]\n  x_test_data=np.array(x_test_data)\n\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)\ncorrect_prediction = prediction.cpu().numpy().reshape(-1,1)\nsubmit=pd.read_csv('submit_sample.csv')\nsubmit","347f31a1":"for i in range(len(correct_prediction)):\n \n  submit['Expected'][i]=correct_prediction[i].item()\n\nsubmit","efb8102a":"submit.to_csv('submit.csv',index=False,header=True)\n!kaggle competitions submit -c 18011765watermelon-price -f submit.csv -m \"Message\"","988c2b5a":"\ubaa8\ub378\ud559\uc2b5","2e4c97c1":"\ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815","b1ba761c":"\ub370\uc774\ud130 \ud30c\uc2f1","93c5807a":"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ud30c\uc2f1","1d600a30":"\uacb0\uacfc \uc608\uce21"}}