{"cell_type":{"c820cffd":"code","a49f45e6":"code","49fc41fa":"code","e0cc6cca":"code","2fd7212a":"code","a49d4823":"code","0e89d8da":"code","ab4e622c":"code","1ddcb7f6":"code","d3d22972":"code","e037392a":"code","d1a77f37":"code","8b627588":"code","33ae7247":"code","c36598fd":"code","2a765600":"code","23568864":"code","bc84fcaf":"code","83c01b70":"code","da4e72c1":"code","95db4f7f":"code","ea171ec7":"code","35bc2acb":"code","25f851d3":"code","e40985bb":"code","92951cf9":"code","e831a099":"code","a2128c60":"code","909885cb":"code","2fee18e8":"code","7448280f":"code","eba61cbe":"code","b81f947f":"code","6271359c":"code","cb57b142":"code","ad084c4e":"code","85aa0a0a":"code","1ce3cc33":"code","777a77ec":"code","1ec946a7":"code","0840bc41":"code","1e7e040e":"code","7e7d17ed":"code","c9d20846":"code","c102fa70":"code","2d7ef2df":"code","b0c0eaf1":"code","020b0132":"code","9e721ff4":"code","a7971943":"code","4f4d550d":"code","16870fb4":"code","9cadbbf4":"code","6efb97b9":"code","1668f665":"code","484bd120":"code","1fd31921":"code","a258ffa2":"code","5991b7c0":"code","0a996d0c":"code","5b7625db":"code","302c32c2":"code","c504530f":"code","bf9ccfcc":"code","5f305793":"code","8b2f089b":"code","c1304607":"code","2683c9db":"code","ec607938":"code","a2416394":"code","6abc4ff0":"code","5952a8f6":"code","741db7c4":"code","ef6e6cbe":"code","a9a39325":"code","ab2f762d":"code","689c6f4d":"code","0b79dc72":"code","9d3a54f5":"code","787be6a6":"code","639ed8f1":"code","e1ee88db":"code","36231f57":"code","637f4ecf":"code","7efe6a23":"code","1ab7c85a":"code","6c471aae":"code","bd618196":"code","671a2f65":"code","2587660d":"code","a47a3de4":"code","be33de35":"code","e78334ac":"code","bc4f2e74":"code","a9854a5b":"code","a5c76fb5":"code","54bde570":"code","fa7ac941":"code","02a359cb":"code","4a0a1b8b":"code","8fde312e":"code","12021d02":"code","e6b26814":"code","0f32c530":"code","1eb77e30":"code","f43f9bf0":"code","98413e9a":"code","c50fac2e":"code","c49219b2":"code","d3ff7458":"code","47ec335e":"markdown","c3751836":"markdown","f76e5eec":"markdown","72d24dcc":"markdown","b2eecb93":"markdown","4e2a231e":"markdown"},"source":{"c820cffd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a49f45e6":"dataset = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/train.csv')\ndataset.sample(5)","49fc41fa":"dataset.info()","e0cc6cca":"dataset.isna().sum()","2fd7212a":"X = dataset.iloc[:, 2:].values\nY = dataset.iloc[:, 1].values","a49d4823":"X","0e89d8da":"Y","ab4e622c":"from sklearn.model_selection import train_test_split","1ddcb7f6":"X_train, X_test, y_train, y_test = train_test_split(X,Y, test_size=0.99, random_state = 1,stratify =Y)","d3d22972":"from sklearn.neighbors import KNeighborsClassifier","e037392a":"knn = KNeighborsClassifier(21)","d1a77f37":"X_test[1:2]","8b627588":"knn.fit(X_train, y_train)","33ae7247":"y_preds = knn.predict(X_test)","c36598fd":"from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score, classification_report, confusion_matrix","2a765600":"accuracy_score(y_test, y_preds)","23568864":"target_names = ['good rate', 'Not bad rate']","bc84fcaf":"print(classification_report(y_test, y_preds, target_names=target_names))","83c01b70":"test_ds = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')","da4e72c1":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename.csv')","95db4f7f":"cm = confusion_matrix(y_test, y_preds)","ea171ec7":"cm","35bc2acb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics","25f851d3":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","e40985bb":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","92951cf9":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","e831a099":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","a2128c60":"from sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","909885cb":"test_ds = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')","2fee18e8":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename1.csv')","7448280f":"from sklearn.svm import SVC","eba61cbe":"svclassifier = SVC()","b81f947f":"plt.scatter(X_train[:, 0], X_train[:, 4], c=y_train, cmap = 'spring')","6271359c":"svclassifier.fit(X_train, y_train)","cb57b142":"y_pred = svclassifier.predict(X_test)","ad084c4e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","85aa0a0a":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test,y_pred))\n","1ce3cc33":"print(classification_report(y_test,y_pred))","777a77ec":"svclassifier1 = SVC(kernel='sigmoid')","1ec946a7":"svclassifier1.fit(X_train, y_train)","0840bc41":"y_pred = svclassifier1.predict(X_test)","1e7e040e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","7e7d17ed":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","c9d20846":"print(classification_report(y_test, y_pred))","c102fa70":"test_ds = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')\n","2d7ef2df":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename2.csv')","b0c0eaf1":"from sklearn.naive_bayes import GaussianNB","020b0132":"gnb = GaussianNB()","9e721ff4":"gnb.fit(X_train, y_train)","a7971943":"y_pred = gnb.predict(X_test)","4f4d550d":"from sklearn import metrics","16870fb4":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","9cadbbf4":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","6efb97b9":"print(\"Accuracy:\",metrics.classification_report(y_test, y_pred))","1668f665":"test_ds = pd.read_csv('\/kaggle\/input\/santander-customer-transaction-prediction\/test.csv')\n","484bd120":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename3.csv')","1fd31921":"from sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import train_test_split","a258ffa2":"bnb = BernoulliNB(binarize=0.0)","5991b7c0":" bnb.fit(X_train, y_train)","0a996d0c":" bnb.score(X_test, y_test)","5b7625db":"y_pred = bnb.predict(X_test)","302c32c2":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","c504530f":"from sklearn.metrics import classification_report, confusion_matrix\nprint(confusion_matrix(y_test, y_pred))","bf9ccfcc":"print(\"Accuracy:\",metrics.classification_report(y_test, y_pred))","5f305793":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename4.csv')","8b2f089b":"from sklearn.naive_bayes import MultinomialNB","c1304607":"from sklearn.model_selection import train_test_split","2683c9db":"mnb = MultinomialNB(alpha=0.01)","ec607938":"from sklearn.preprocessing import Normalizer","a2416394":"normalizer = Normalizer(norm='l2', copy=True)\n","6abc4ff0":"X_train = Normalizer(copy=False).fit_transform(X_train)\n","5952a8f6":"X_train","741db7c4":"from sklearn.tree import DecisionTreeClassifier","ef6e6cbe":"from sklearn import metrics ","a9a39325":"from sklearn.tree import export_graphviz ","ab2f762d":"clf = DecisionTreeClassifier()","689c6f4d":"clf = clf.fit(X_train,y_train)","0b79dc72":"y_pred = clf.predict(X_test)","9d3a54f5":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","787be6a6":"pip install pydotplus","639ed8f1":"from sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \n","e1ee88db":"clf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)","36231f57":"clf = clf.fit(X_train,y_train)","637f4ecf":"y_pred = clf.predict(X_test)","7efe6a23":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","1ab7c85a":"from sklearn.ensemble import RandomForestRegressor","6c471aae":"regressor = RandomForestRegressor(n_estimators=20, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","bd618196":"from sklearn import metrics\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","671a2f65":"from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","2587660d":"from sklearn.ensemble import RandomForestClassifier","a47a3de4":"clf=RandomForestClassifier(n_estimators=100)","be33de35":"clf.fit(X_train,y_train)","e78334ac":"y_pred=clf.predict(X_test)","bc4f2e74":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","a9854a5b":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename4.csv')","a5c76fb5":"import os\nos.environ['KMP_DUPLICATE_LIB_OK']='True'","54bde570":"import xgboost as xgb\nimport pandas as pd","fa7ac941":"xg_cl = xgb.XGBClassifier(objective = 'binary:logistic', n_estimators = 10, seed=123 )","02a359cb":"xg_cl.fit(X_train, y_train)","4a0a1b8b":"y_pred = xg_cl.predict(X_test)","8fde312e":"import numpy as np\naccuracy = float(np.sum(y_pred==y_test))\/y_test.shape[0]\nprint(\"accuracy: %f\" % (accuracy))","12021d02":"dataset_dmatrix = xgb.DMatrix(data = X,label = Y)\ndataset_dmatrix","e6b26814":"params = {\"objective\":\"reg:logistic\", \"max_depth\":3}\nparams","0f32c530":"# Perform cross-validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"rmse\", as_pandas = True, seed = 123)","1eb77e30":"print(cv_results)","f43f9bf0":"print(1-cv_results[\"test-rmse-mean\"].tail(1))","98413e9a":"# Perform cross_validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"auc\", as_pandas = True, seed = 123)# Perform cross_validation: cv_results\ncv_results = xgb.cv(dtrain = dataset_dmatrix, params = params, num_boost_round = 5, nfold = 3, metrics = \"auc\", as_pandas = True, seed = 123)","c50fac2e":"print(cv_results)","c49219b2":"print(cv_results[\"test-auc-mean\"].tail(1))","d3ff7458":"result = pd.DataFrame({\"target\" : np.array(y_pred).T})\npd.concat([test_ds['ID_code'],result], axis=1).to_csv('filename5.csv')","47ec335e":"### KNN FINISHED","c3751836":"### SVM","f76e5eec":"### Naive Bayes","72d24dcc":"### XGboost","b2eecb93":"### Logistic Regression","4e2a231e":"### DTress and RF"}}