{"cell_type":{"721fcf1e":"code","14e74eda":"code","a1484c9a":"code","2cfe64c4":"code","81c13061":"code","a0056ac6":"code","cdf78c01":"code","ff7fce96":"code","6fb082b9":"code","fae4c7aa":"code","33dd5b5b":"code","4a691e64":"markdown","640658be":"markdown","c0529400":"markdown","29e4fd7b":"markdown","52a8f9f7":"markdown","a8d4829e":"markdown","8d765c18":"markdown","7f190766":"markdown"},"source":{"721fcf1e":"import pandas as pd\nimport os","14e74eda":"data_df = pd.read_csv(\"\/kaggle\/input\/population-by-education-level-in-europe\/population_by_education_level.csv\")","a1484c9a":"data_df.info()","2cfe64c4":"data_df.head()","81c13061":"import plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ndef genSankey(df,cat_cols=[],value_cols='',title='Sankey Diagram',param={\"height\":1000}):\n    # maximum of 6 value cols -> 6 colors\n    colorPalette = ['#4B8BBE', '#AF2346','#32CD32','#8B008B','#FFD43B','#646464']\n    labelList = []\n    colorNumList = []\n    for catCol in cat_cols:\n        labelListTemp =  list(set(df[catCol].values))\n        colorNumList.append(len(labelListTemp))\n        labelList = labelList + labelListTemp\n        \n    # remove duplicates from labelList\n    labelList = list(dict.fromkeys(labelList))\n    \n    # define colors based on number of levels\n    colorList = []\n    for idx, colorNum in enumerate(colorNumList):\n        colorList = colorList + [colorPalette[idx]]*colorNum\n       \n    # transform df into a source-target pair\n    for i in range(len(cat_cols)-1):\n        if i==0:\n            sourceTargetDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            sourceTargetDf.columns = ['source','target','count']\n        else:\n            tempDf = df[[cat_cols[i],cat_cols[i+1],value_cols]]\n            tempDf.columns = ['source','target','count']\n            sourceTargetDf = pd.concat([sourceTargetDf,tempDf])\n        sourceTargetDf = sourceTargetDf.groupby(['source','target']).agg({'count':'sum'}).reset_index()\n        \n    # add index for source-target pair\n    sourceTargetDf['sourceID'] = sourceTargetDf['source'].apply(lambda x: labelList.index(x))\n    sourceTargetDf['targetID'] = sourceTargetDf['target'].apply(lambda x: labelList.index(x))\n    \n    # creating the sankey diagram\n    data = dict(\n        type='sankey',\n        node = dict(\n          pad = 15,\n          thickness = 20,\n          line = dict(\n            color = \"black\",\n            width = 0.25\n          ),\n          label = labelList,\n          color = colorList\n        ),\n        link = dict(\n          source = sourceTargetDf['sourceID'],\n          target = sourceTargetDf['targetID'],\n          value = sourceTargetDf['count'],\n        )\n      )\n    \n    layout =  dict(\n        title = title,\n        font = dict(\n          size = 10\n        ),\n        height=param[\"height\"]\n    )\n       \n    fig = dict(data=[data], layout=layout)\n    return fig","a0056ac6":"data_df.head()","cdf78c01":"agg_df = data_df.groupby(['isced11', 'age', 'geography'])['value'].sum().reset_index()\nagg_df.sort_values([\"value\"], inplace=True, ascending=False)\nprint(f\"All combinations: {agg_df.shape[0]}\")\nagg_df.head(5)","ff7fce96":"data_agg = agg_df.loc[agg_df.isced11 != \"TOTAL\"]\ndata_agg = data_agg.loc[data_agg.age != \"TOTAL\"]\ndata_agg = data_agg.loc[~data_agg.geography.isin([\"EU15\", \"EU28\", \"EA19\", \"EU27_2020\"])]","6fb082b9":"fig = genSankey(data_agg,cat_cols=['age', 'isced11', 'geography'],\\\n                value_cols='value',\n                title='Access to education of European people: {Age Group -> Education Level -> Country}')\niplot(fig, validate=False)","fae4c7aa":"agg_df = data_df.groupby(['isced11', 'age', 'date', 'geography'])['value'].sum().reset_index()\nagg_df.sort_values([\"value\"], inplace=True, ascending=False)\ndata_agg = agg_df.loc[agg_df.isced11 != \"TOTAL\"]\ndata_agg = data_agg.loc[data_agg.age != \"TOTAL\"]\ndata_agg = data_agg.loc[~data_agg.geography.isin([\"EU15\", \"EU28\", \"EA19\", \"EU27_2020\"])]\nprint(f\"All combinations: {agg_df.shape[0]}\")\nagg_df.head(5)","33dd5b5b":"fig = genSankey(data_agg,cat_cols=['geography', 'age', 'isced11', 'date'],\\\n                value_cols='value',\n                title='Access to education of European people: { Country -> Age Group -> Education Level -> Years }')\niplot(fig, validate=False)","4a691e64":"# Analysis preparation\n\n## Load packages","640658be":"## Load data","c0529400":"# Introduction\n\nWe analyze the data about access to education for European people. \nWe load also the ISO country codes data, as auxiliary data.  \nUse of Sankey diagrams allows us to show in a single graph the distribution of access to education level per type of disability, age, sex and countries.","29e4fd7b":"### Visualization function using Sankey diagram","52a8f9f7":"Let's remove TOTAL as well as aggregated EU countries groups.","a8d4829e":"## Sankey diagram\n","8d765c18":"# Data exploration\n\n## Glimpse the data","7f190766":"Let's include also time in the diagram."}}