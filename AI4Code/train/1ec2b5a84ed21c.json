{"cell_type":{"a43c7b2d":"code","7bb450bd":"code","4befd6b2":"code","345718a6":"code","1d1aab6b":"code","50240333":"code","3d3cc4ab":"code","459f2c6a":"code","23d40dc0":"code","7a279d54":"code","d3f60eca":"code","94b196c2":"code","87e09663":"markdown","9cf12880":"markdown","e06decd1":"markdown","55db936c":"markdown"},"source":{"a43c7b2d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nimport os\nimport datetime as dt\nimport seaborn as sns\nimport requests","7bb450bd":"ddf = pd.read_csv('..\/input\/sp500-11year-history\/SP500_11year.csv')\nddf.head()","4befd6b2":"ddf['B1S10'] = ddf['ND10']\/ddf['ND1']             # Buy on day 1 Sell on Day 10\nddf['B2S10'] = ddf['ND10']\/ddf['ND2']\nddf['B3S10'] = ddf['ND10']\/ddf['ND3']\n\nddf['B1S15'] = ddf['ND15']\/ddf['ND1']             # Buy on day 1 Sell on Day 15\nddf['B2S15'] = ddf['ND15']\/ddf['ND2']\nddf['B3S15'] = ddf['ND15']\/ddf['ND3']\n\nddf['B1S20'] = ddf['ND10']\/ddf['ND1']             # Buy on day 1 Sell on Day 20\nddf['B2S20'] = ddf['ND10']\/ddf['ND2']\nddf['B3S20'] = ddf['ND10']\/ddf['ND3']","345718a6":"# ddf.reset_index(inplace = True)\nddfg = ddf.groupby(['Date', 'Ticker']).agg({'P1':sum})                    # sort by date, P1 is performance over the prior day, ascending\ndives = ddfg['P1'].groupby(['Date'], group_keys = False).nsmallest(1)     # take the worst performer for each day\ndives = dives.to_frame()                                                  # make it a df\n\ndd = dives.merge(ddf, how = 'left', on = ['Date', 'Ticker', 'P1'])        # do a merge with ddf to get all the data\ndd['Percentage1'] = (dd['D1']-dd['Close'])\/dd['Spread']                   # to find a Unicorn, we need to compare the day's dip against the month's volatility\n\n\nUnicorn = dd[dd['Percentage1'] < 0.1].filter(['B1S10', 'B2S10', 'B3S10', 'B1S15', 'B2S15', 'B3S15', 'B1S20', 'B2S20', 'B3S20']).describe()   # filter the Percentage1 to under 10%\nUnicorn       # Unicorns get flagged as the worst performer of the day.  But their flagged dip represents less than 10% of the prior month's volatility","1d1aab6b":"av_stock = ddf.filter(['B1S10', 'B2S10', 'B3S10', 'B1S15', 'B2S15', 'B3S15', 'B1S20', 'B2S20', 'B3S20']).describe()\nav_stock  # Pay attention to the mean value of an average stock over 11 years","50240333":"# This multiplier represents the performance of the group Unicorns over average stocks\nmultiplier = round(((Unicorn.iloc[1]-1)\/(av_stock.iloc[1]-1)), 2)\nmultiplier","3d3cc4ab":"# Now that we have established that these stocks perform 10X the market, let's look at them.\nUnicorn_stocks = dd[dd['Percentage1'] < 0.1]\nUnicorn_stocks['Date'] = Unicorn_stocks['Date'].astype('datetime64')\n# Unicorn_stocks  # Uncomment to view the stocks","459f2c6a":"date = '2011-08-23'           # Define the date\nstock = 'PHM'                 # Define the stock, or ticker\nclose = ddf[(ddf['Date']==date) & \n            (ddf['Ticker'] == stock)]['Close'].values[0] # Set the Closing value\ni = ddf[(ddf['Date']==date) & \n        (ddf['Ticker'] == stock)].index.values.astype(int)[0] # Set the Closing index value\ngraph_start = i-30               # Set the index value for the graph start, end, holding period\ngraph_end =  i+20\nholding = i+10\nX = ddf.filter(['Date']).iloc[graph_start:graph_end].astype('datetime64')  # Define the X axis\ny = ddf.filter(['Close']).iloc[graph_start:graph_end]   # Define the y axis\ns = ddf.filter(['Close']).iloc[holding].values[0]       # We'll make a horizontal line at value s","23d40dc0":"\nplt.plot(X, y)\nplt.xlabel('Dates before and after Unicorn Performance')\nplt.ylabel('Close Value')\nplt.title(f'{stock} performing as a Unicorn\\nBuy on Red, Sell on Green')\nplt.xticks(rotation = 30)\nplt.axvline(x=(ddf.filter(['Date']).iloc[i+5]), color = 'y', alpha = 0.5, \n            linewidth = 65, ymax = 0.3)  # This linewidtch trick shows when we buy and sell in time\nplt.axvline(x = (ddf.filter(['Date']).iloc[i]), color = 'y', alpha = 0.5)\nplt.axhline(y=close, color ='r', alpha = 0.2)\nplt.axhline(y = s, color = 'g', alpha = 0.3)\nplt.show()","7a279d54":"for i, r in Unicorn_stocks.iterrows():\n    try:\n        date = r['Date']\n        stock = r['Ticker']\n        close = r['Close']\n        g_start = date - pd.Timedelta(days=35)\n        g_end = date + pd.Timedelta(days=21)\n        holding = date + pd.Timedelta(days = 14)\n\n        df = web.DataReader(stock, 'yahoo', g_start, g_end)\n        plt.xlabel('Dates before and after Unicorn Performance')\n        plt.ylabel('Close Value')\n        plt.title(f'{stock} performing as a Unicorn\\nBuy on Red, Sell on Green')\n        plt.axvline(x=date, color = 'y', alpha = 0.5)\n        plt.axhline(y=close, color ='r', alpha = 0.2)\n        plt.axhline(y = df.loc[holding]['Close'], color = 'g', alpha = 0.3)\n        plt.xticks(rotation = 90)\n        plt.plot(df['Close'])\n        #plt.savefig(f'..\/output\/Unicorn_images\/{stock}on{date.year}_{date.month}_{date.day}.png')\n        print(r['Ticker'])\n        plt.show()\n        plt.close()\n        continue\n    except KeyError:\n        print(\"Problems with \"+ r['Ticker'])\n        continue","d3f60eca":"Us = Unicorn_stocks.copy()\nfrom scipy import stats\nimport pylab as pl\nh = Us['B1S10'].sort_values()\nxran = range(-30,130)\nfit = stats.norm.pdf(h, np.mean(h), np.std(h))\nplt.title('Distribution of Unicorn Stocks\\nAs Percentage Growth')\npl.plot(h, fit, '-o')\npl.show()","94b196c2":"g = ddf['B1S10'].sort_values()\nt, p = stats.ttest_ind(h, g, equal_var=False)\nfit = stats.norm.pdf(h, np.mean(h), np.std(h))\ngfit = stats.norm.pdf(g, np.mean(g), np.std(g))\npl.title('Distribution of Unicorns\\nAgainst All Stocks')\npl.plot(h, fit, '-o')\npl.plot(g, gfit, 'r')\npl.axvline(x = 1, c = 'y', alpha = 0.8)\npl.show()","87e09663":"Now let's graph one of the stocks to see how it performs as a Unicorn","9cf12880":"Just to recap, we isolated a buying pattern that shows a history of 10X typical market performance.  Because there were only 45 out of 1.3M records, we called them Unicorns.  To define a Unicorn, we filtered the worst performance of the day for each trading day, and then qualified those worst performers by a ratio of the dip compared to the month's volatility.  We followed up identifying the Unicorns by graphing each of their performances over about two months.  Finally, we used some stats graphing to show how the distribution of Unicorns differs from all stocks.  It can be seen that while some Unicorns perform under market value, most of them have a positive ROI and a special few outliers help drive up the multiplier. \n\nIf you stumble upon this data set and want to carry it forward, choose a different buying pattern for the same stocks, expand the threshold for the volatility (to get more stocks), filter the worst five or ten performers of the day (to get more stocks), look for a different historical event (here I chose the worst performer of the day, but you might try the highest performer of the day, or those with four declining days in a row).  Make sure that you assess your subset's performance and compare it to typical market performance.  \n\nDisclosure:  I'm not advocating that you buy any particular stock, or providing assurance as to the performance of any particular stock.  ","e06decd1":"# Finding Unicorns\nI found a subset of stocks that perform at 10X the rest of the market.  \nWhen I isolated these stocks, I simulated a buying pattern and I want to show that pattern here. ","55db936c":"Now that we have one Unicorn graphed, let's graph them all.  \nWe used the ddf indexing to make the x axis in the prior example, but it doesn't always work.\n\nIn this next piece of code, we'll pull the data directly from yahoo"}}