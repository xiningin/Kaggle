{"cell_type":{"5d1f691e":"code","b745515d":"code","97eae494":"code","609d88d8":"code","1c52bdab":"code","ca1045c9":"code","59fba5a0":"code","99cf4699":"code","74d1b180":"markdown"},"source":{"5d1f691e":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom tqdm import tqdm_notebook\nimport warnings\nimport multiprocessing\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.svm import NuSVC\nfrom scipy.optimize import minimize  \nwarnings.filterwarnings('ignore')","b745515d":"train1 = pd.read_csv('..\/input\/train.csv')\ntest1 = pd.read_csv('..\/input\/test.csv')\ncols = [c for c in train1.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]","97eae494":"def instant_model(train, test, col, clf = QuadraticDiscriminantAnalysis(0.5)):\n    oof = np.zeros(len(train))\n    preds = np.zeros(len(test))\n    \n    for i in tqdm_notebook(range(512)):\n\n        train2 = train[train['wheezy-copper-turtle-magic'] == i]\n        test2 = test[test['wheezy-copper-turtle-magic'] == i]\n        idx1 = train2.index\n        idx2 = test2.index\n\n        data = pd.concat([pd.DataFrame(train2[cols]), pd.DataFrame(test2[cols])])\n        # feature selection\n        data2 = VarianceThreshold(threshold = 2).fit_transform(data[cols])\n\n        train3 = pd.DataFrame(data2[:train2.shape[0]], index = idx1)\n        train3['target'] = train2['target']\n        test3 = pd.DataFrame(data2[train2.shape[0]:], index = idx2)\n\n        # Kfold\n        skf = StratifiedKFold(n_splits=11, random_state=42)\n        for train_index, test_index in skf.split(train3, train3['target']):\n            # clf\n            clf = clf\n            X_train = train3.iloc[train_index, :].drop([\"target\"], axis = 1)\n            X_test = train3.iloc[test_index, :].drop([\"target\"], axis = 1)\n            y_train = train3.iloc[train_index, :]['target']\n            y_test = train3.iloc[test_index, :]['target']\n            clf.fit(X_train, y_train)\n\n            # output\n            train_prob = clf.predict_proba(X_train)[:,1]\n            test_prob = clf.predict_proba(X_test)[:,1]\n            oof[idx1[test_index]] = test_prob\n\n            # bagging\n            preds[idx2] += clf.predict_proba(test3)[:,1] \/ skf.n_splits\n            # print(\"Chunk {0} Fold {1}\".format(i, roc_auc_score(y_test, test_prob)))\n\n    auc = roc_auc_score(train['target'], oof)\n    print(f'AUC: {auc:.5}')\n    \n    return oof, preds","609d88d8":"def get_newtrain(train, test, preds, oof):\n    # get useful train set from train and test data\n    # get useful test \n    test['target'] = preds\n    test.loc[test['target'] > 0.985, 'target'] = 1\n    test.loc[test['target'] < 0.015, 'target'] = 0\n    usefull_test = test[(test['target'] == 1) | (test['target'] == 0)]\n\n    # get useful train \n    new_train = pd.concat([train, usefull_test]).reset_index(drop=True)\n    new_train.loc[oof > 0.985, 'target'] = 1\n    new_train.loc[oof < 0.015, 'target'] = 0\n    return new_train","1c52bdab":"oof_temp, preds_temp = instant_model(train1, test1, cols, clf = QuadraticDiscriminantAnalysis(0.5))","ca1045c9":"newtrain1 = get_newtrain(train1, test1, preds_temp, oof_temp)\ncols1 = [c for c in newtrain1.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\n\n\noof_qda, preds_qda = instant_model(newtrain1, test1,cols1)\noof_knn, preds_knn = instant_model(newtrain1, test1,cols1, clf = KNeighborsClassifier(n_neighbors = 7, p = 2, weights = 'distance'))\n","59fba5a0":"log = LogisticRegression()\n\nfinal_feature = pd.DataFrame({'QDA':oof_qda, 'KNN':oof_knn})\nfinal_feature_test = pd.DataFrame({'QDA':preds_qda, 'KNN':preds_knn})\n\ny = newtrain1.target\nlog.fit(final_feature, y)\nprint(roc_auc_score(newtrain1['target'], log.predict_proba(final_feature)[:,1]))\n\npreds = log.predict_proba(final_feature_test)[:,1]","99cf4699":"sub = pd.read_csv('..\/input\/sample_submission.csv')\nsub['target'] = preds\nsub.to_csv('submission_stack.csv',index=False)","74d1b180":"Stacking QDA and KNN"}}