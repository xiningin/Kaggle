{"cell_type":{"c3712a6c":"code","9692eb6a":"code","af56f598":"code","8b6d9ab1":"code","9d63ee20":"code","deef4e70":"code","c732adfa":"code","44db28ce":"code","141292e6":"code","3292cea4":"code","5bde6ebc":"code","a854ff79":"code","f52fa863":"code","2c0ee877":"code","ea598a45":"code","370d41bb":"code","a243ad96":"code","80830ade":"code","70770ecf":"code","8801d5e5":"code","62c8cbbb":"code","1311239b":"code","e9fcf3b2":"code","a3618375":"markdown","081980b9":"markdown","3fad376f":"markdown","c738cf5b":"markdown","55fb1f7d":"markdown","c2cd277d":"markdown","049c2e37":"markdown","d0e94252":"markdown","7cbf02d5":"markdown","cad83fd0":"markdown","f394f545":"markdown","06c0a26b":"markdown","b01e6667":"markdown","3a6bad8b":"markdown","6888c482":"markdown","9edde9dc":"markdown","19e9130f":"markdown","cdd6393c":"markdown"},"source":{"c3712a6c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# for the model\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9692eb6a":"# install feature_engine for feature engineering\n!pip install feature_engine","af56f598":"# for feature engineering\nfrom feature_engine import encoding as ce","8b6d9ab1":"data = pd.read_csv('\/kaggle\/input\/early-diabetes-classification\/diabetes_data.csv',\n                  delimiter=';')\ndata.head()","9d63ee20":"data.shape","deef4e70":"# Let's see dtypes for dataset\ndata.dtypes","c732adfa":"# Let's find out the number of distinct values in the numerical variables (int64)\nfor var in data.columns:\n    print(var, ' values: ', data[var].nunique())","44db28ce":"# let's create binary list\nbinary = [var for var in data.columns \n         if var != 'class' and var != 'age']\n\nbinary","141292e6":"# change binary variables' dtype to object\ndata[binary] = data[binary].astype('O')","3292cea4":"# show variables if they have missing values\n[var for var in data.columns if data[var].isnull().mean() > 0]","5bde6ebc":"plt.figure(figsize=(8, 3))\nplt.subplot(1,2,1)\nfig = data.boxplot(column='age')\nfig.set_title('')\nfig.set_ylabel('age')\n\nplt.subplot(1,2,2)\nfig = data['age'].hist(bins=20)\nfig.set_ylabel('Number of patients')\nfig.set_xlabel('age')\n\nplt.show()","a854ff79":"# 1. let's make groups diabete and non_diabete \ndiabete = data[data['class']==1]\nnon_diabete = data[data['class']==0]\n\n# 2. Let's see how many people are in each group?\nprint('There are {} people in diabete'.format(len(diabete)))\nprint('There are {} people in non_diabete'.format(len(non_diabete)))","f52fa863":"# 3. Let's create histogram for both group and compare them\nplt.figure(figsize=(8,3))\nfig = diabete['age'].hist(bins=20)\n\nfig = non_diabete['age'].hist(bins=20, color='orange')\nfig.set_xlabel('Age')\nfig.set_title('Diabetes vs. Non-diabetes');","2c0ee877":"for var in binary:\n    plt.figure(figsize=(8,3))\n    plt.subplot(1,2,1)\n    fig = diabete[var].hist()\n    fig.set_title('diabete')\n    fig.set_xlabel(var)\n    \n    plt.subplot(1,2,2)\n    fig = non_diabete[var].hist(color='orange')\n    fig.set_title('non_diabete')\n    fig.set_xlabel(var)\n    \n    plt.show()","ea598a45":"age_boundaries = [0, 18, 30, 40, 60, 70, 100]\n\nlabels = ['0-18', '19-30', '30-40', '41-60', '61-70', '>70']\n\n# create age_cat variable\ndata['age_cat'] = pd.cut(\n    data['age'], bins=age_boundaries, labels=labels, include_lowest=True)\n\ndata.head(2)","370d41bb":"data.groupby('age_cat')['age'].count().plot.bar();","a243ad96":"# drop age column\ndata.drop('age', axis=1, inplace=True)","80830ade":"# Let's separate into train and test set\nX_train, X_test, y_train, y_test = train_test_split(data.drop(['class'], axis=1),\n                                                   data['class'],\n                                                   test_size=0.1,\n                                                   random_state=42)\n\nX_train.shape, X_test.shape","70770ecf":"pipe = Pipeline([\n    # categorical encoding\n    ('categorical_encoder',\n    ce.OrdinalEncoder(encoding_method='ordered',\n                     variables=['age_cat'])),\n    \n    ('categorical_ohe', \n     ce.OneHotEncoder(top_categories=None,\n                    variables=binary,\n                    drop_last=True)),\n    \n    # Gradient Boosted machine\n    ('gbm', GradientBoostingClassifier(random_state=0))\n])","8801d5e5":"pipe.fit(X_train, y_train)","62c8cbbb":"X_train_preds = pipe.predict_proba(X_train)[:,1]\nX_test_preds = pipe.predict_proba(X_test)[:,1]","1311239b":"print('Train set')\nprint('GBM roc-auc: {}'.format(roc_auc_score(y_train, X_train_preds)))\n\nprint()\nprint('Test set')\nprint('GBM roc-auc: {}'.format(roc_auc_score(y_test, X_test_preds)))","e9fcf3b2":"# let's explore the importance of the features\n\nimpt = pd.Series(pipe.named_steps['gbm'].feature_importances_)\nimpt.index = X_train.columns\nimpt.sort_values(inplace=True, ascending=False)\nimpt.plot.bar(figsize=(12,6))","a3618375":"## What can we see the differences between diabete and non-diabete patients?","081980b9":"We can see that people who have diabetes are heavily distributed between 40 to 60-year-old and are distributed over 80-year-old. However, those who don't have diabetes are distributed between 25 to 70-year-old.","3fad376f":"We can see the model roc-auc score is 0.99 in both train and test set. Also, polydipsia is the most important variable to build this model. ","c738cf5b":"We can create age_cat variable (categorical variable) by extracting age variable. \n\n- 0-18: for under-aged\n- 19-30: for young adults\n- 30-40\n- 40-60\n- 60-70\n- more than 70","55fb1f7d":"We don't have missing data in data set","c2cd277d":"In this section, I will create machine learning pipeline. \n\nFor categorical encoding, I will use ordinal encoder for age_cat and one hoe encoder for binary variables. Lastly, I create a model by using Gradient Boosting Classifier","049c2e37":"# EDA\n\nIn this section, I will create lists for binary variables and numerical variables for later, and explore if there is missing data in data set. Also, I will explore outliers and distributions for continuous variables. Finally, I investigate whether there is a difference between diabete and non-diabete people depending on feature variables.","d0e94252":"There are differences between diabete and non_diabete in polyuria, polydipsia, sudden_weight_loss, weakness, polyphagia, visual_blurring, partial_paresis, alopecia, gender","7cbf02d5":"## Separate train and test data","cad83fd0":"## Create variable lists","f394f545":"## Pipeline","06c0a26b":"## Outliers and distributions (age)","b01e6667":"# Feature Engineering","3a6bad8b":"We have small dataset","6888c482":"## Missing data","9edde9dc":"# Model","19e9130f":"We have one continous variable (age). Age has a Gaussian distribution, but it has outliers (age > 80). Even though I will use logistic regression to compare other tree models, I will keep the outliers because we have small amount of data, and every data is precious.","cdd6393c":"Even though gender variable is object, it has 2 variable, which is binary. Also, expert for age variable, we have all binary variables. "}}