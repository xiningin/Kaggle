{"cell_type":{"8856d40d":"code","5ad5b70c":"code","4baaeaf9":"code","fabf14d7":"code","5908be86":"code","0931342d":"code","00776d6d":"code","a911fe5b":"code","2679d1e6":"code","079d5ebc":"code","b7254850":"code","7a4850fa":"code","3a229e8a":"code","946930cd":"code","6a1c4ff0":"code","1120eb0b":"code","342e7a49":"code","73c40c0b":"code","4eda98ad":"code","ffc84d17":"code","5d42e0f3":"code","9cd2dbc7":"code","03cb91aa":"code","0b665002":"code","ee1776d3":"code","1a78e59e":"code","53911958":"code","61c4186b":"code","ea5cd47e":"code","843dd576":"code","583ae03b":"code","a0e46820":"code","4d43e66f":"code","19513897":"code","2aaf6a36":"code","72205c53":"code","14b23136":"code","cc1fb40d":"code","0ff3d671":"code","7d78b78a":"code","75fe542b":"code","f0339de1":"code","9f0db3ea":"code","0ad9c67b":"code","0c66531e":"code","54b75b04":"code","82a23f92":"code","27314b02":"code","208d8663":"code","b530a91e":"code","3eaa10f8":"code","3d588185":"code","d07974f0":"code","5486989e":"code","a0134313":"code","a68875d7":"code","c9137dee":"code","07e9d678":"code","5ad626e7":"code","c3f8423d":"code","81f57819":"code","273ae5d1":"code","bd7f2ab6":"code","ab122bc0":"code","944a1b2f":"code","465b964b":"code","586bb0e8":"code","6de6d62b":"code","4dc4a6ab":"code","719f947b":"code","f5a1ef6b":"code","86db9f05":"code","966c49fd":"code","f75be36b":"code","703447e0":"code","67efc8d6":"code","b76d2921":"code","679e1e7c":"markdown","ba3c9deb":"markdown","c4a0fdda":"markdown","4510c60f":"markdown","7f2f6e3b":"markdown","223192b9":"markdown","47e28e4b":"markdown","7183b730":"markdown","d6da1e4c":"markdown","9a0afd24":"markdown","926f1e91":"markdown","effb5a5e":"markdown","6fcab427":"markdown","590e32f3":"markdown","cfa1b464":"markdown","37eb0304":"markdown","f6e36879":"markdown","f08d6a74":"markdown","a3bb0540":"markdown","b39d5b1c":"markdown","7b8815e1":"markdown","f02af5e9":"markdown","595be672":"markdown","5430f94a":"markdown","03f7bede":"markdown","a32b500f":"markdown"},"source":{"8856d40d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score,KFold\nfrom sklearn import datasets\nfrom sklearn.neighbors import KNeighborsClassifier","5ad5b70c":"df=pd.read_csv('..\/input\/iris\/Iris.csv')\ndf.head()","4baaeaf9":"df.shape","fabf14d7":"df.describe()","5908be86":"df.info()","0931342d":"for i in df.columns[1:5]:\n    sns.kdeplot(df[i],color='b')\n    plt.show()\n    ","00776d6d":"sns.countplot(df['Species'])\nplt.show()","a911fe5b":"### we can see that all the species are equally distributed","2679d1e6":"plt.figure(figsize=(8,8))\nsns.boxplot(y=df['PetalLengthCm'],x=df['Species'])#Iris virginca has the largest petal length followed by versicolor and setosa\nplt.show()","079d5ebc":"df.drop('Id',axis=1).boxplot(by='Species',figsize=(12,6))","b7254850":"heat=df.drop('Id',axis=1).corr()","7a4850fa":"sns.heatmap(heat,annot=True,cmap='PuBu')\nplt.show()","3a229e8a":"x=df.drop(['Id','Species'],axis=1)\nx.head()","946930cd":"sc=StandardScaler()\nnum_sc=sc.fit_transform(x)\nnum_sc=pd.DataFrame(num_sc,columns=x.columns)\nnum_sc.head()","6a1c4ff0":"from sklearn.model_selection import train_test_split","1120eb0b":"y=df['Species']","342e7a49":"xtrain,xtest,ytrain,ytest=train_test_split(num_sc,y,test_size=0.3,random_state=0,)","73c40c0b":"lr=LogisticRegression(solver='saga',multi_class='multinomial')\nlr.fit(xtrain,ytrain)","4eda98ad":"ypred=lr.predict(xtest)","ffc84d17":"from sklearn import metrics","5d42e0f3":"metrics.accuracy_score(ytest,ypred)","9cd2dbc7":"metrics.confusion_matrix(ytest,ypred)","03cb91aa":"metrics.classification_report(ytest,ypred)","0b665002":"from sklearn.metrics import roc_curve,auc","ee1776d3":"ypred_prob=lr.predict_proba(xtest)[:,1]\nypred_prob","1a78e59e":"lr=LogisticRegression()\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\nres=cross_val_score(lr,num_sc,y,cv=kf,scoring='f1_weighted')\nprint('Bias error is ',np.mean(1-res))\nprint('variance error is',np.std(res))","53911958":"from sklearn.model_selection import GridSearchCV","61c4186b":"knn=KNeighborsClassifier()\nparam={'n_neighbors':np.arange(1,100),'weights':['uniform','distance']}\nKf=KFold(shuffle=True,n_splits=5,random_state=0)\nGs=GridSearchCV(knn,param,cv=kf,scoring='f1_weighted')\nGs.fit(num_sc,y)","ea5cd47e":"Gs.best_params_","843dd576":"knn=KNeighborsClassifier(n_neighbors=26,weights='distance')\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\nres_knn=cross_val_score(knn,num_sc,y,cv=kf,scoring='f1_weighted')\nprint('bias error is',np.mean(1-res_knn))\nprint('variance error is',np.std(res_knn))","583ae03b":"from sklearn.naive_bayes import GaussianNB","a0e46820":"nb=GaussianNB()\nnb.fit(xtrain,ytrain)","4d43e66f":"ypred=nb.predict(xtest)","19513897":"metrics.accuracy_score(ytest,ypred)","2aaf6a36":"## cross validating","72205c53":"kf=KFold(shuffle=True,n_splits=5,random_state=0)\nnb_res=cross_val_score(nb,num_sc,y,cv=kf,scoring='f1_weighted')\nprint('bias error is ',np.mean(1-nb_res))\nprint('variance error is ',np.std(nb_res))","14b23136":"1-0.04666971190235871  # mean score accross the folds","cc1fb40d":"from sklearn.tree import DecisionTreeClassifier","0ff3d671":"dt_model=DecisionTreeClassifier()","7d78b78a":"param={'max_depth':np.arange(1,100),'criterion':['gini','entropy']}\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\ngs=GridSearchCV(dt_model,param,cv=kf,scoring='f1_weighted')\ngs.fit(num_sc,y)","75fe542b":"gs.best_params_","f0339de1":"dt_reg=DecisionTreeClassifier(max_depth=6,criterion='gini')\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\ndt_reg_res=cross_val_score(dt_reg,num_sc,y,cv=kf,scoring='f1_weighted')\nprint('Bias error is',np.mean(1-dt_reg_res))\nprint('varaince error is ',np.std(dt_reg_res))","9f0db3ea":"from sklearn.ensemble import RandomForestClassifier,BaggingClassifier","0ad9c67b":"rf=RandomForestClassifier()\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\nrf_res=cross_val_score(rf,num_sc,y,cv=kf,scoring='f1_weighted')\nprint('bias error is ',np.mean(1-rf_res))\nprint('variance error is ',np.std(rf_res))","0c66531e":"rf_be=[]\nrf_ve=[]\nfor n in np.arange(1,100):\n    rf=RandomForestClassifier(n_estimators=n,criterion='entropy',random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    roc_auc=cross_val_score(rf,num_sc,y,cv=kf,scoring='f1_weighted')\n    rf_be.append(np.mean(1-roc_auc))\n    rf_ve.append(np.std(roc_auc))","54b75b04":"np.min(rf_ve),np.argmin(rf_ve),rf_be[43]  #n_estimators=44","82a23f92":"x_axis=np.arange(len(rf_ve))\nplt.plot(x_axis,rf_ve)\nplt.xlabel('range of rf_ve')\nplt.ylabel('Rf_ve')\nplt.show()","27314b02":"rf=RandomForestClassifier(n_estimators=44,criterion='entropy',random_state=0)\nkf=KFold(shuffle=True,n_splits=5,random_state=0)\nauc=cross_val_score(rf,num_sc,y,cv=kf,scoring='f1_weighted')\nrf_be=np.mean(1-auc)\nrf_ve=np.std(auc)\nprint(rf_be,rf_ve)","208d8663":"LR=LogisticRegression(solver='saga',multi_class='multinomial')\nNB=GaussianNB()\nKNN=KNeighborsClassifier(n_neighbors=26,weights='distance')","b530a91e":"LR_ve=[]\nLR_be=[]\nfor n in np.arange(1,100):\n    Lr_bag=BaggingClassifier(base_estimator=LR,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(Lr_bag,num_sc,y,cv=kf,scoring='f1_weighted')\n    LR_ve.append(np.mean(1-auc))\n    LR_be.append(np.std(auc))","3eaa10f8":"np.min(LR_ve),np.argmin(LR_ve),LR_be[14]          # n_estimator=15","3d588185":"x_axis=np.arange(len(LR_ve))\nplt.plot(x_axis,LR_ve)\nplt.show()","d07974f0":"NB_ve=[]\nNB_be=[]\nfor n in np.arange(1,100):\n    NB_bag=BaggingClassifier(base_estimator=NB,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(NB_bag,num_sc,y,cv=kf,scoring='f1_weighted')\n    NB_be.append(np.mean(1-auc))\n    NB_ve.append(np.std(auc))","5486989e":"np.min(NB_ve),np.argmin(NB_ve),NB_be[46]","a0134313":"x_axis=np.arange(len(NB_ve))\nplt.plot(x_axis,NB_ve)\nplt.show()","a68875d7":"# nestimators=47","c9137dee":"KNN_ve=[]\nKNN_be=[]\nfor n in np.arange(1,100):\n    KNN_bag=BaggingClassifier(base_estimator=KNN,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(KNN_bag,num_sc,y,cv=kf,scoring='f1_weighted')\n    KNN_be.append(np.mean(1-auc))\n    KNN_ve.append(np.std(auc))","07e9d678":"np.min(KNN_ve),np.argmin(KNN_ve)","5ad626e7":"x_axis=np.arange(len(KNN_ve))\nplt.plot(x_axis,KNN_ve)","c3f8423d":"## n_estimators=7","81f57819":"LR=LogisticRegression(solver='saga',multi_class='multinomial')\nLR_bag=BaggingClassifier(base_estimator=LR,n_estimators=15,random_state=0)\nknn=KNeighborsClassifier(n_neighbors=26,weights='distance')\nknn_bag=BaggingClassifier(base_estimator=KNN,n_estimators=7)\nNB=GaussianNB()\nNB_bag=BaggingClassifier(base_estimator=NB,n_estimators=47)\ndt_reg=DecisionTreeClassifier(max_depth=9,criterion='gini')\nrf=RandomForestClassifier(n_estimators=44,criterion='entropy',random_state=0)","273ae5d1":"models=[]\nmodels.append(('LR',LR))\nmodels.append(('LR_bag',LR_bag))\nmodels.append(('knn',knn))\nmodels.append(('knn_bag',knn_bag))\nmodels.append((\"NB\",NB))\nmodels.append(('nb_bag',NB_bag))\nmodels.append(('decisiontree_reg',dt_reg))\nmodels.append(('rf',rf))","bd7f2ab6":"results=[]\nnames=[]\nfor name,model in models:\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(model,num_sc,y,cv=kf,scoring='f1_weighted')\n    results.append(auc)\n    names.append(name)\n    print('%s:%f(%f)' %(name,np.mean(1-auc),np.std(auc,ddof=1)))\nfig=plt.figure()\nfig.suptitle('Alogrith,m comaparison')\nax=fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names,rotation=90)\nplt.show()","ab122bc0":"from sklearn.ensemble import AdaBoostClassifier,GradientBoostingClassifier","944a1b2f":"GB_ve=[]\nGB_be=[]\nfor n in np.arange(1,100):\n    gb=GradientBoostingClassifier(n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(gb,num_sc,y,cv=kf,scoring='f1_weighted')\n    GB_be.append(np.mean(1-auc))\n    GB_ve.append(np.std(auc))","465b964b":"np.min(GB_be),np.argmin(GB_be),GB_ve[54]","586bb0e8":"x_axis=np.arange(len(GB_be))\nplt.plot(x_axis,GB_be)\nplt.show()","6de6d62b":"LR=LogisticRegression(solver='saga',multi_class='multinomial')\nAB_ve=[]\nAB_be=[]\nfor n in np.arange(1,100):\n    Ab=AdaBoostClassifier(base_estimator=LR,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(LR,num_sc,y,cv=kf,scoring='f1_weighted')\n    AB_be.append(np.mean(1-auc))\n    AB_ve.append(np.std(auc))","4dc4a6ab":"np.min(AB_be),np.argmin(AB_be)","719f947b":"## therefore no scope of boosting as n estimators is 1","f5a1ef6b":"NB=GaussianNB()\ngb_be=[]\ngb_ve=[]\nfor n in np.arange(1,100):\n    ada=AdaBoostClassifier(base_estimator=NB,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(NB,num_sc,y,cv=kf,scoring='f1_weighted')\n    gb_be.append(np.mean(1-auc))\n    gb_ve.append(np.std(auc))","86db9f05":"np.min(gb_be),np.argmin(gb_be)","966c49fd":"RF=RandomForestClassifier()\nrf_ve=[]\nrf_be=[]\nfor n in np.arange(1,100):\n    ad=AdaBoostClassifier(base_estimator=RF,n_estimators=n,random_state=0)\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(RF,num_sc,y,cv=kf,scoring='f1_weighted')\n    rf_be.append(np.mean(1-auc))\n    rf_ve.append(np.std(auc))","f75be36b":"np.min(rf_be),np.argmin(rf_be)  # nestimators=23","703447e0":"LR=LogisticRegression(solver='saga',multi_class='multinomial')\nLR_bag=BaggingClassifier(base_estimator=LR,n_estimators=23,random_state=0)\nknn=KNeighborsClassifier(n_neighbors=26,weights='distance')\nknn_bag=BaggingClassifier(base_estimator=KNN,n_estimators=7)\nNB=GaussianNB()\nNB_bag=BaggingClassifier(base_estimator=NB,n_estimators=47)\ndt_reg=DecisionTreeClassifier(max_depth=9,criterion='gini')\nrf=RandomForestClassifier(n_estimators=44,criterion='entropy',random_state=0)\nRF_BOOST=RandomForestClassifier(n_estimators=23,criterion='entropy',random_state=0)","67efc8d6":"models=[]\nmodels.append(('LR',LR))\nmodels.append(('LR_bag',LR_bag))\nmodels.append(('knn',knn))\nmodels.append(('knn_bag',knn_bag))\nmodels.append((\"NB\",NB))\nmodels.append(('nb_bag',NB_bag))\nmodels.append(('decisiontree_reg',dt_reg))\nmodels.append(('rf',rf))\nmodels.append(('RF_BOOST',RF_BOOST))","b76d2921":"results=[]\nnames=[]\nfor name,model in models:\n    kf=KFold(shuffle=True,n_splits=5,random_state=0)\n    auc=cross_val_score(model,num_sc,y,cv=kf,scoring='f1_weighted')\n    results.append(auc)\n    names.append(name)\n    print('%s:%f(%f)' %(name,np.mean(1-auc),np.std(auc,ddof=1)))\nfig=plt.figure()\nfig.suptitle('Alogrith,m comaparison')\nax=fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names,rotation=90)\nplt.show()","679e1e7c":"## cross validating the model","ba3c9deb":"### Naive Bayes Bagging","c4a0fdda":"## Roc_auc curve(receiver operating characteristics)","4510c60f":"## cross validating the logistic regression model","7f2f6e3b":"### Splitting the data into train test split","223192b9":"## boosting Logistic regression","47e28e4b":"# Decision Tree","7183b730":"### Boosting a random_forest","d6da1e4c":"# Random Forest","9a0afd24":"## boosting a gaussian NB","926f1e91":"## checking the shape:","effb5a5e":"## Alogrithm comparison:","6fcab427":"## Univariate Analysis","590e32f3":"## Checking the correlation:","cfa1b464":"# Bagging Classifier:","37eb0304":"## ALOGRITHM COMAPARISON","f6e36879":"## therefore no scope of boosting a naive bayes","f08d6a74":"## Knn bagging:","a3bb0540":"## Naive Bayes","b39d5b1c":"## Scaling:","7b8815e1":"## customized Grid search for random_forest","f02af5e9":"## KNN model","595be672":"### As metrics.accuracy is not a reliable parameter for classification we will be seeing confusion matrix and classification report for correct judgement.","5430f94a":"### Regualarized Dt","03f7bede":"## confusion matrix","a32b500f":"# Boosting checking for least bias:"}}