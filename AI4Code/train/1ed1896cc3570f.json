{"cell_type":{"8938e2d9":"code","1757d061":"code","cc44327a":"code","5ffe068c":"code","561070cd":"code","6a3ca234":"code","a153ede2":"code","5e45eb31":"code","37c378fc":"code","9c22a422":"code","5ca90223":"code","308d4f11":"code","7cb9373b":"code","c13289ba":"code","31159e53":"code","af9adab9":"code","267ad0f2":"code","59a3f76d":"code","abf4c591":"code","87e022e1":"code","6a7a92e7":"code","68684d98":"code","3da05263":"code","3a76061c":"code","47aa6fa8":"code","2d2bae39":"code","009a39f3":"code","0262f5ed":"code","4af88d22":"code","05bd5c4f":"code","24c8765f":"code","83fc34a5":"code","9361834c":"code","4823b61b":"code","e67d5b2e":"markdown","1e4c92ac":"markdown","84d18e82":"markdown","e9ef8a2b":"markdown","12d3527a":"markdown","01eb17b4":"markdown","8db5ec84":"markdown","b5548323":"markdown","2c58c6cb":"markdown","63d0c4a3":"markdown","227c64d6":"markdown","d4f4ede2":"markdown","d1c3b346":"markdown","ae4770ed":"markdown","6272575b":"markdown","d3306de0":"markdown","3836b226":"markdown","854eb3b4":"markdown"},"source":{"8938e2d9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","1757d061":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")","cc44327a":"train_data.head()","5ffe068c":"test_data.head()","561070cd":"train_data.isna().sum()","6a3ca234":"test_data.isna().sum()","a153ede2":"train_data = train_data.fillna({'Embarked': 'S','Age': train_data['Age'].median()})\ntest_data = test_data.fillna({'Fare': test_data['Fare'].mean(),'Age': test_data['Age'].median()})","5e45eb31":"print(\"Total records - \",len(train_data.PassengerId))\nprint(\"Unique values in PassengerId col - \",len(train_data.PassengerId.unique()))\nprint(\"Unique values in Name col - \",len(train_data.Name.unique()))","37c378fc":"possible_drops = ['PassengerId','Name']\ndfs = [train_data, test_data]","9c22a422":"fig, (ax1, ax2, ax3) = plt.subplots(ncols=3)\nfig.set_size_inches(15, 5)\n\nsns.barplot(x=\"Sex\", y=\"Survived\", data=train_data, ax=ax1)\nax1.set(title=\"Survived - Male, Female\")\n\nsns.barplot(x=\"Pclass\", y=\"Survived\", data=train_data, ax=ax2)\nax2.set(title=\"Survived - Pclass\")\n\nsns.barplot(x=\"Sex\", y=\"Survived\", hue=\"Pclass\", data=train_data, ax=ax3)\nax3.set(title=\"Survived - Male, Female per each Pclass\")\n\nplt.show()","5ca90223":"# Add new feature 'FamilyMembers' using SibSp and Parch. Adding 1 to count the person itself.\nfor df in dfs:\n    df['FamilyMembers'] = df.SibSp + df.Parch + 1\npossible_drops.extend(['SibSp'])","308d4f11":"for df in dfs:\n    df['Alone'] = df['FamilyMembers'].apply(lambda x: 1 if x==1 else 0)","7cb9373b":"fig, (ax1) = plt.subplots(ncols=1)\nfig.set_size_inches(10, 5)\n\nsns.barplot(x=\"Alone\", y=\"Survived\", data=train_data, ax=ax1)\nax1.set(title=\"Survived - Alone or Not\")\nax1.set_ylim(0, 1)\n\nplt.show()","c13289ba":"fig, (ax1) = plt.subplots(ncols=1)\nfig.set_size_inches(10, 5)\n\nsns.barplot(x=\"FamilyMembers\", y=\"Survived\", data=train_data, ax=ax1)\nax1.set(title=\"Survived - FamilyMembers\")\nax1.set_ylim(0, 1)\n\nplt.show()","31159e53":"def getFamilyType(familySize):\n    if familySize == 1:\n        return \"Small\"\n    if 2 <= familySize <= 4:\n        return \"Medium\"\n    return \"Large\"\n\nfor df in dfs:\n    df['FamilyType'] = df.FamilyMembers.apply(getFamilyType)","af9adab9":"# Converting cabin feature in to has cabin, depending on whether the cabin data is available or not.\nfor df in dfs:    \n    df['HasCabin'] = df['Cabin'].apply(lambda x: 0 if type(x) == float else 1)\npossible_drops.append('Cabin')","267ad0f2":"fig, (ax1) = plt.subplots(ncols=1)\nfig.set_size_inches(10, 5)\n\nsns.barplot(x=\"HasCabin\", y=\"Survived\", data=train_data, ax=ax1)\nax1.set(title=\"Survived - Cabin\")\nax1.set_ylim(0, 1)\n\nplt.show()","59a3f76d":"# Convert fare into ranges. (Or Clusters)\nfrom sklearn.cluster import KMeans\n\nkmeans = KMeans(n_clusters=4)\ntrain_data[\"FareCluster\"] = kmeans.fit_predict(train_data.loc[:,['Fare']])\ntrain_data[\"FareCluster\"] = train_data[\"FareCluster\"].astype(\"category\")\n\ntest_data[\"FareCluster\"] = kmeans.predict(test_data.loc[:,[\"Fare\"]])\ntest_data[\"FareCluster\"] = test_data[\"FareCluster\"].astype(\"category\")\n\n","abf4c591":"# Converting fares in to their log\nfor df in dfs:\n    df['FareLog'] = df.Fare.apply(np.log1p)\n    \npossible_drops.append('Fare')","87e022e1":"# Getting the prefixes of the tickets\nfor df in dfs:\n    df['TicketPrefix'] = df['Ticket'].apply(lambda x: x[:3])\n    df[\"TicketPrefix\"] = df[\"TicketPrefix\"].astype(\"category\")\n    df['TicketPrefix'] = df['TicketPrefix'].cat.codes\n\npossible_drops.append('Ticket')","6a7a92e7":"## Get Titles from names\nimport re\n\ndef get_Title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    if title_search:\n        return title_search.group(1)\n    return \"\"\nfor df in dfs:\n    df['Title'] = df['Name'].apply(get_Title)\n    # There are several Titles with only 1 or 2 values. Try to replace those with a similar more common one.\n    df['Title'] = df['Title'].replace(['Dr', 'Rev', 'Major', 'Col', 'Mlle', 'Jonkheer', 'Don', 'Ms', 'Countess', 'Capt', 'Sir', 'Lady', 'Mme'], 'Rare')\n    \n    Title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\n    df['Title'] = df['Title'].map(Title_mapping)\n    df['Title'] = df['Title'].fillna(0)","68684d98":"temp_data = train_data.copy()\n# Got the q number by going through numbers from 5-10. 5 seems to be a good value since it captured the survivabilty of children and adults clearly.\ntemp_data['AgeQ'] = pd.cut(train_data['Age'], 5)\ntemp_data[['AgeQ', 'Survived']].groupby(['AgeQ'], as_index=False).mean().sort_values(by='AgeQ', ascending=True)","3da05263":"sns.violinplot(x=\"AgeQ\", y=\"Survived\", data=temp_data)","3a76061c":"def getAgeRange(age):\n    if age <= 16:\n        return 0\n    if age > 16 and age <= 32:\n        return 1\n    if age > 32 and age <= 48:\n        return 2\n    if age > 48 and age <= 64:\n        return 3\n    if age > 64:\n        return 5\n\nfor df in dfs:\n    df[\"AgeRange\"] = df.Age.apply(getAgeRange)\n    \n# possible_drops.append('Age')","47aa6fa8":"# Print the dropping columns\nprint(possible_drops)","2d2bae39":"# Extracting the target column from training data.\ny = train_data.pop('Survived')","009a39f3":"X = train_data.drop(possible_drops, axis=1)\nX_test = test_data.drop(possible_drops, axis=1)","0262f5ed":"features = X.columns\nX = pd.get_dummies(X)\nX_test = pd.get_dummies(X_test)","4af88d22":"X.head()","05bd5c4f":"X_test.head()","24c8765f":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\n\nmodel = RandomForestClassifier(n_estimators=2000, max_depth=6, random_state=0)\n# , min_samples_split=4, criterion='gini',min_samples_leaf=5, max_features='auto',)\n","83fc34a5":"model.fit(X,y)","9361834c":"predictions = model.predict(X_test)\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput['Survived'].value_counts()","4823b61b":"# Save predictions\noutput.to_csv('predictions.csv', index= False)\nprint(\"Your submission was successfully saved!\")","e67d5b2e":"- From the above graph we can see that family size between 2-4 have a higher survivability than others. \n- We can introduce this as a feature to the training set.\n    - Small - 1\n    - Medium - 2-4\n    - large - > 4","1e4c92ac":"## Define the Random Forest Model","84d18e82":"## Feature Engineering","e9ef8a2b":"## Handle missing values","12d3527a":"### Encode categorical data","01eb17b4":"## Predictions","8db5ec84":"## Training","b5548323":"### Drop unnecessary columns","2c58c6cb":"- It seems that there's no significant difference between a person who came with a family and on his own.\n- Might be good to seem how the different family sizes affected the survivability.","63d0c4a3":"- Poeple having a cabin has a higher survivability than others.","227c64d6":"- Dropping the following values since all of these are unique. ","d4f4ede2":"# Titanic - 1st Attempt","d1c3b346":"- It is abundantly clear that Gender affects the survivability most. \n- In the Pclass, class-1 had a higher survivability than other two. This might be due to the people belonging to that class being royalty or simply wealthy and important.\n- When combined, the females in the Pclass 1 and 2 have an almost perfect survivability. Even within the males, Pclass 1 has a significant survivability diffence than other two.","ae4770ed":"## Data Visualization","6272575b":"## Read data","d3306de0":"- Let's plot a graph to visualize the above information.","3836b226":"- It'll be interesting to see how having a family affects the survivability.","854eb3b4":"- Based on above data we can divide age into ranges."}}