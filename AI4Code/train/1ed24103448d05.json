{"cell_type":{"1d60ceca":"code","16d95b43":"code","884a48fd":"code","63a24869":"code","38311ed8":"code","61c0b91a":"code","32da67a3":"code","de797a40":"code","8bc9294e":"code","eeabc7dc":"code","488ffcce":"code","c07ad664":"code","e2e24464":"code","d804c7be":"code","246d2057":"code","e1dbff74":"code","f54d6f41":"code","5ad6dcb5":"code","e182bcfb":"code","be4894d1":"markdown"},"source":{"1d60ceca":"import pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom xgboost import XGBRegressor\nimport gc","16d95b43":"train_db = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest_db = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntrain_db.head()","884a48fd":"train_db = train_db.drop(columns = 'id')\ntest_db = test_db.drop(columns = 'id')","63a24869":"import matplotlib.pyplot as plt\nimport seaborn as sns\ncorrmat= train_db.corr()\nplt.figure(figsize=(15,15))  \n\ncmap = sns.diverging_palette(250, 10, s=80, l=55, n=9, as_cmap=True)\n\nsns.heatmap(corrmat,annot=True, cmap=cmap, center=0)","38311ed8":"shades =[\"#f7b2b0\",\"#c98ea6\",\"#8f7198\",\"#50587f\", \"#003f5c\"]\nplt.figure(figsize=(20,10))\nsns.boxenplot(data = train_db,palette = shades)\nplt.xticks(rotation=90)\nplt.show()","61c0b91a":"data_hist_plot = train_db.hist(figsize = (20,20), color = \"#9F1EA0\")","32da67a3":"fig, axes = plt.subplots(1, 7, figsize=(18, 5))\nsns.boxplot(ax=axes[0], data=train_db, x='breath_id')\nsns.boxplot(ax=axes[1], data=train_db, x='R')\nsns.boxplot(ax=axes[2], data=train_db, x='C')\nsns.boxplot(ax=axes[3], data=train_db, x='time_step')\nsns.boxplot(ax=axes[4], data=train_db, x='u_in')\nsns.boxplot(ax=axes[5], data=train_db, x='u_out')\nsns.boxplot(ax=axes[6], data=train_db, x='pressure')","de797a40":"train_db.groupby(\"breath_id\")[\"time_step\"].count().unique().item()","8bc9294e":"test_db.groupby(\"breath_id\")[\"time_step\"].count().unique().item()   ","eeabc7dc":"train_db.isnull().sum(axis = 0).to_frame()","488ffcce":"train_db.time_step.max()","c07ad664":"train_db.query('u_out == 0').time_step.max()","e2e24464":"breath_one = train_db.query('breath_id == 1').reset_index(drop = True)\nbreath_one","d804c7be":"\nbreath_one.nunique().to_frame()","246d2057":"train_db['u_in_cumsum'] = (train_db['u_in']).groupby(train_db['breath_id']).cumsum()\ntest_db['u_in_cumsum']  = (test_db['u_in']).groupby(test_db['breath_id']).cumsum()","e1dbff74":"import matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 18})\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nimport warnings\nbreath_928 = train_db.query('breath_id == 928').reset_index(drop = True)\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nax.plot(breath_928[\"time_step\"],breath_928[\"u_in\"], lw=2, label='u_in')\nax.plot(breath_928[\"time_step\"],breath_928[\"pressure\"], lw=2, label='pressure')\nax.set(xlim=(0,1))\nax.legend(loc=\"upper right\")\nax.set_xlabel(\"time_id\", fontsize=14)\nplt.show();","f54d6f41":"train_db['u_in_shifted'] = train_db.groupby('breath_id')['u_in'].shift(2).fillna(method=\"backfill\")\ntest_db['u_in_shifted']  = test_db.groupby('breath_id')['u_in'].shift(2).fillna(method=\"backfill\")","5ad6dcb5":"for df in (train_db, test_db):\n    df['u_in_first']  = df.groupby('breath_id')['u_in'].transform('first')\n    df['u_in_min']    = df.groupby('breath_id')['u_in'].transform('min')\n    df['u_in_mean']   = df.groupby('breath_id')['u_in'].transform('mean')\n    df['u_in_median'] = df.groupby('breath_id')['u_in'].transform('median')\n    df['u_in_max']    = df.groupby('breath_id')['u_in'].transform('max')\n    df['u_in_last']   = df.groupby('breath_id')['u_in'].transform('last')","e182bcfb":"sample=pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\nX_train = train_db.drop(['pressure'], axis=1)\ny_train = train_db['pressure']\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble     import HistGradientBoostingRegressor\nregressor  =  HistGradientBoostingRegressor(max_iter=100,\n     loss=\"least_absolute_deviation\",early_stopping=False)\nregressor.fit(X_train, y_train)\nsample[\"pressure\"] = regressor.predict(test_db)\nsample.to_csv('submission.csv',index=False)","be4894d1":"# Please UPVOTE"}}