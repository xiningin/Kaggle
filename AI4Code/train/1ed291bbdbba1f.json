{"cell_type":{"92e77522":"code","b1f542e0":"code","fa94c626":"code","5867c601":"code","83cb25d6":"code","e9c072f0":"code","2b384e9d":"code","64246fba":"code","cf7e816d":"markdown","b3d845dd":"markdown","bfdebbc4":"markdown","d16c5e45":"markdown","be5ea0eb":"markdown"},"source":{"92e77522":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b1f542e0":"df=pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\n#df.isna().sum()","fa94c626":"#drop NAN values of fully vacinated\npeople_fully_vaccinated=df.dropna(subset=['people_fully_vaccinated'])\npeople_vaccinated=df.dropna(subset=['total_vaccinations'])\n#show the change in number of countries\nprint('save % of the countries:', 100*people_fully_vaccinated['country'].nunique()\/df['country'].nunique())\n#get max number of fully vacinated people\npeople_fully_vaccinated_by_countries=people_fully_vaccinated.groupby('country').max('people_fully_vaccinated').sort_values(by='people_fully_vaccinated_per_hundred', ascending=False)","5867c601":"#look on the ratio of fully vaccinated people\npeople_fully_vaccinated_by_countries['people_fully_vaccinated_per_hundred']\npeople_fully_vaccinated_by_countries.reset_index(inplace=True)\n\n#get the list of the countries\n#list_of_these_countries=list(people_fully_vaccinated_by_countries['country'])\n\n#let's include ratio of people who got immunization from sickness in these countries\nreal_time_covid_data=pd.read_csv('\/kaggle\/input\/covid-19\/data\/countries-aggregated.csv')\n#get recent information of recovered\nreal_time_covid_data_recovered=real_time_covid_data.groupby('Country').max('Recovered')\nreal_time_covid_data_recovered.reset_index(inplace=True)\n\n#merge these two tables\nreal_time_covid_data_recovered['country']=real_time_covid_data_recovered['Country']\nresult = pd.merge(people_fully_vaccinated_by_countries, real_time_covid_data_recovered[['country','Recovered']], how=\"left\", on=[\"country\"])\n\n#manually add numbers for US (from worldometer.com) and remove NaN\nresult.set_index('country', inplace=True)\nresult.loc[['United States'],['Recovered']]=15330949\nresult.reset_index(inplace=True)\nresult.dropna(subset=['Recovered'], inplace=True)\n#get the ratio of recovered people to total population\nresult['population']=result['people_fully_vaccinated']*100\/result['people_fully_vaccinated_per_hundred']\nresult['Recovered_per_hundred']=100*result['Recovered']\/result['population']\n#get total ratio of immunized people and remove zero values\nresult['immunized']=result['Recovered_per_hundred']+result['people_fully_vaccinated_per_hundred']\nresult.sort_values(by='immunized', ascending=False,inplace=True)\nresult= result[result['immunized'] != 0]\nresult[['country','immunized']]","83cb25d6":"from geopy.geocoders import Nominatim \ngeolocator = Nominatim(user_agent=\"wsdfb\") \nlatitude=[] \nlongitude=[] \nerrors=[] \nproved_regions=[] \nregions=list(result.country)\nfor i in regions: \n    try: \n        location = geolocator.geocode(str(i)) \n        latitude.append(location.latitude) \n        longitude.append(location.longitude) \n        proved_regions.append(i) \n    except AttributeError: \n        errors.append(i)\ndf1=pd.DataFrame({'country':proved_regions,'latitude':latitude,'longitude':longitude}) \ndf1.to_csv(r'df1.csv') \nresult = pd.merge(result, df1, how=\"left\", on=[\"country\"])","e9c072f0":"#visualize the result\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfig = px.scatter_mapbox(result,                        \n                            lat=\"latitude\",                        lon=\"longitude\",\n                        color=\"Recovered_per_hundred\",\n                        color_continuous_scale='Bluered', \n                        hover_name=\"country\",\n                        height=600,\n                        zoom=1,\n                        size=\"immunized\",\n                        size_max=40,\n                        opacity=0.4,\n                        width=1300)\nfig.update_layout(mapbox_style='open-street-map')\nfig.show()","2b384e9d":"real_time_covid_data.reset_index(inplace=True)\n\n#merge time series data daily recovers and fully_vaccinated \npeople_vaccinated['Date']=people_vaccinated['date']\npeople_vaccinated['Country']=people_vaccinated['country']\nresult_daily_cases = pd.merge(real_time_covid_data, people_vaccinated, how=\"left\", on=[\"Country\",'Date'])\n#get population of the countries and merge with our table\npopulation=pd.read_csv('\/kaggle\/input\/world-population\/WorldPopulation.csv')\npopulation['Country']=population['Country Name']\npopulation=population[['Country','2019','Country Code']]\nresult_daily_cases = pd.merge(result_daily_cases, population, how=\"left\", on=[\"Country\"])\n#get immunized ratio to total population\nresult_daily_cases['Recovered_per_hundred']=100*result_daily_cases['Recovered']\/result_daily_cases['2019']\nresult_daily_cases['total_vaccinations_per_hundred'].fillna(0,inplace=True)\nresult_daily_cases['immunized']=result_daily_cases['Recovered_per_hundred']+result_daily_cases['total_vaccinations_per_hundred']\nresult_daily_cases.sort_values(by=['Country','Date'], ascending=True,inplace=True)","64246fba":"result_daily_cases.dropna(subset=['immunized'],inplace=True)\nresult_daily_cases['Immunization, % of population']=result_daily_cases['immunized']\nfig = px.choropleth(result_daily_cases,                            \n                     locations=\"Country Code\",           \n                     color='Immunization, % of population',                    \n                     hover_name=\"Country\",             \n                     animation_frame=\"Date\",       \n                     projection= 'natural earth',        \n                     color_continuous_scale= 'Reds',  \n                     range_color=[0,10])    \nfig.layout.updatemenus[0].buttons[0].args[1]['frame']['duration'] = 5\nfig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 5\nfig.show()          \nfig.write_html(\"example_map.html\")            ","cf7e816d":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    It is believed that at some point of immunization against coronavirus people get collective immune protection and after that spread of coronavirus is supposed to be rapidly decreasing. Let's make a chart with the most immunized countries.\n    <\/p>","b3d845dd":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Let's explore the progression of immunization with time series data regardless of vaccination. The formula: total vaccinated value + number of recovered.\n    <\/p>","bfdebbc4":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    In this chunk, we will figure out what is the total ratio of people acquired immunity against corona including people who recovered from the sickness.\n    <\/p>","d16c5e45":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    Let's get max value of fully vaccinated people by countries \n    <\/p>","be5ea0eb":"<p style = \"font-family:palatino linotype,serif;font-size:25px;\">\n    As we can see Israel is the most probable country-candidate for the acquisition of collective immunity among countries which introduced vaccination\n    <\/p>"}}