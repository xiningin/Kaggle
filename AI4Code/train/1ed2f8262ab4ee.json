{"cell_type":{"77a86dcf":"code","337e50c0":"code","d206e853":"code","cdbb4876":"code","aa4af7b3":"code","bc87a754":"code","1ccf2496":"code","f10c4bc3":"code","5af22937":"code","639a9714":"code","3e72149f":"code","a91c769d":"code","3f78148e":"code","c136b806":"code","9f2ae13d":"code","ac3b597f":"code","24307a14":"code","9d6bfa5a":"code","93932358":"code","4dae248c":"code","595afed2":"code","f0563a42":"code","37bb8f0b":"code","2ffefe55":"code","6043235a":"code","04a8de7f":"code","a689d50b":"code","7e5251e1":"code","e6e8ae87":"code","40a2f2de":"code","d4f882c0":"code","85aaac16":"code","95da1e26":"code","eb058060":"code","7e402373":"code","dd269026":"code","a539d26d":"code","dfc371ab":"code","c0433e4f":"code","a25846fe":"code","7db05b36":"markdown","30803d81":"markdown","b8808d5d":"markdown","af5ca6e9":"markdown","aef0ab80":"markdown","368e6d11":"markdown","76b42903":"markdown","14d1049a":"markdown","377ab3f4":"markdown","482f6ec1":"markdown","325129a4":"markdown"},"source":{"77a86dcf":"import numpy as np \nimport pandas as pd\npd.set_option('max_columns', None)\npd.set_option('max_rows', None)\nimport seaborn as sns","337e50c0":"train= pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest= pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","d206e853":"print('train Shape:'+ str(train.shape))\nprint('test Shape:'+ str(test.shape))","cdbb4876":"train.isnull().sum()","aa4af7b3":"#drop the colomns have more null values\ntrain0=train.drop(['Alley','PoolQC','Fence','MiscFeature','FireplaceQu'], axis='columns')\ntrain0.shape","bc87a754":"test.isna().sum()","1ccf2496":"#drop the colomns have more null values\ntest0=test.drop(['Alley','PoolQC','Fence','MiscFeature','FireplaceQu'], axis='columns')\ntest0.shape","f10c4bc3":"sns.heatmap(train0.isnull(),yticklabels=False,cbar=False)","5af22937":"sns.heatmap(test0.isnull(),yticklabels=False,cbar=False)","639a9714":"target = train0['SalePrice']\ntest_ids = test0['Id']\n\ntrain1 = train0.drop(['Id', 'SalePrice'], axis=1)\ntest1 = test0.drop('Id', axis=1)\n\ndata1 = pd.concat([train1, test1], axis=0).reset_index(drop=True)\ndata1.head()","3e72149f":"data1.shape","a91c769d":"# Select categorical columns \ncategorical_cols = [cname for cname in data1.columns if data1[cname].dtype == \"object\"]\n\n# Select numerical columns\nnumerical_cols = [cname for cname in data1.columns if data1[cname].dtype in ['int64', 'float64']]\n\n# Keep selected columns only\nmy_cols = categorical_cols + numerical_cols\ndata2 = data1[my_cols].copy()","3f78148e":"from sklearn.impute import SimpleImputer\n\n# Imputation\ncat_imputer = SimpleImputer(strategy='most_frequent')\ndata3 = pd.DataFrame(cat_imputer.fit_transform(data2[categorical_cols]))\n\n# Imputation removed column names; put them back\ndata3.columns = data2[categorical_cols].columns\ndata3.head()","c136b806":"from sklearn.impute import SimpleImputer\n\n# Imputation\nnum_imputer = SimpleImputer(strategy='mean')\ndata4 = pd.DataFrame(num_imputer.fit_transform(data2[numerical_cols]))\n\n# Imputation removed column names; put them back\ndata4.columns = data2[numerical_cols].columns\ndata4.head()","9f2ae13d":"print(data3.shape)\nprint(data4.shape)","ac3b597f":"data5=pd.concat([data3,data4], axis='columns')\ndata5.shape","24307a14":"sns.heatmap(data5.isnull(),yticklabels=False,cbar=False)","9d6bfa5a":"data5.shape","93932358":"data5.head()","4dae248c":"gd_columns = pd.get_dummies(data5[categorical_cols],drop_first=True)\n\n# Remove categorical columns (will replace with one-hot encoding)\ndrop_cat_columns = data5.drop(categorical_cols, axis=1)\n\n# Add one-hot encoded columns to numerical features\ndata6 = pd.concat([drop_cat_columns, gd_columns], axis=1)\n","595afed2":"data6.head()","f0563a42":"data6.shape","37bb8f0b":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndata7 = pd.DataFrame(scaler.fit_transform(data6), index=data6.index, columns=data6.columns)","2ffefe55":"data7.head()","6043235a":"f_train = data7.loc[:train.index.max(), :].copy()\nf_test = data7.loc[train.index.max() + 1:, :].reset_index(drop=True).copy()","04a8de7f":"print(f_train.shape)\nprint(f_test.shape)","a689d50b":"f_train.head()","7e5251e1":"from sklearn.model_selection import train_test_split\nx_train, x_valid, y_train, y_valid= train_test_split(f_train, target, test_size=0.2, random_state=21)","e6e8ae87":"from xgboost import XGBRegressor\nmodel = XGBRegressor(n_estimators=600)\nmodel.fit(x_train, y_train)","40a2f2de":"from sklearn.metrics import mean_absolute_error\n\npredictions = model.predict(x_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","d4f882c0":"## Hyper Parameter Optimization\n\nbooster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","85aaac16":"# Set up the random search with 4-fold cross validation\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=model,\n            param_distributions=hyperparameter_grid,\n            cv=2, n_iter=20,\n            scoring = 'neg_mean_absolute_error',n_jobs = 2,\n            verbose = 3, \n            return_train_score = True,\n            random_state=42)","95da1e26":"random_cv.fit(x_train,y_train)","eb058060":"random_cv.best_estimator_","7e402373":"random_cv.best_score_","dd269026":"random_cv.best_params_","a539d26d":"model = XGBRegressor(n_estimators= 1100,min_child_weight= 4,\n max_dept= 3,\n learning_rate= 0.05,\n booster= 'gbtree',\n base_score= 0.75)\nmodel.fit(x_train, y_train)","dfc371ab":"from sklearn.metrics import mean_absolute_error\n\npredictions = model.predict(x_valid)\nprint(\"Mean Absolute Error: \" + str(mean_absolute_error(predictions, y_valid)))","c0433e4f":"predict_test= model.predict(f_test)","a25846fe":"submission = pd.concat([test_ids, pd.Series(predict_test, name='SalePrice')], axis=1)\nsubmission.to_csv('.\/submission.csv', index=False, header=True)","7db05b36":"# Model","30803d81":"### Encode categorical columns","b8808d5d":"# Data Preprocessing\n### Handling Mising Values","af5ca6e9":"### filling numerical values by most frequent","aef0ab80":"### submission","368e6d11":"### Group numerical and categrical coumns","76b42903":"### filling catagorical values by most frequent","14d1049a":"### Prediction of test data","377ab3f4":"### Scaling","482f6ec1":"### Combine Test and Train data to Hnadle missing values","325129a4":"### Split back the data into trian and test"}}