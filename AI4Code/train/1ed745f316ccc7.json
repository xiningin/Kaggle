{"cell_type":{"9a00b9cb":"code","0a02e0ec":"code","c6e880a8":"code","c8a095ac":"code","3ef40225":"code","e0ae04b1":"code","1f003cb0":"code","34c4c74b":"code","06b48abd":"code","1e8a8e1d":"code","609a1e01":"code","af94f33a":"code","6555ca47":"code","73494195":"code","e4a9f0b6":"code","8aef67a0":"code","e0f028cf":"code","1ebe55aa":"code","91fb4df4":"code","84f1a1be":"code","00b5143e":"code","645dd776":"code","59278234":"code","e89e8282":"code","03488e68":"code","8a8a3c3a":"code","699abc18":"code","0f21eb16":"code","96f984b7":"code","8cb3fd5b":"code","c3661526":"code","88509f8a":"code","23740ba4":"code","d546097c":"code","9f6f1878":"code","fae3acb8":"code","d7277214":"code","dd54aac2":"code","b2c8d3c6":"code","602a39f5":"code","e853f254":"code","312d9ac4":"code","5bd0f5e5":"code","73c07037":"code","4ced6a95":"code","7137b4ad":"code","d3472526":"code","f459d03e":"code","3c53793a":"code","157ff1d1":"code","de70864e":"code","2defe708":"code","102ebad0":"code","4b4e28bf":"code","c162b3e6":"code","9d1a2ad1":"code","eec44569":"code","ad79a78d":"code","77e6edf8":"code","4973d02b":"code","f170d3a1":"code","e4596f55":"code","ec58a47b":"code","d0237f5f":"code","d7fc103b":"code","81208932":"code","3e87dffe":"code","e97805ca":"code","e5ac2a8b":"code","feddd6f1":"code","7f899cb6":"code","a4bd426d":"code","2ab2e00d":"code","da23eccb":"code","358eba2c":"code","c5b55d60":"markdown","a98ba9d6":"markdown","5e26ab34":"markdown","d9c20824":"markdown","d466790a":"markdown","a76e773b":"markdown","74534337":"markdown","ca9f4c4d":"markdown","79f695c9":"markdown","72b7c4a9":"markdown","817db504":"markdown","757c3777":"markdown","cdae5022":"markdown","08179fcc":"markdown","d3bf736b":"markdown","91e210d6":"markdown","bb302a39":"markdown","6bef2b54":"markdown","0ce11447":"markdown","207b8a07":"markdown","9640729c":"markdown","e82f7110":"markdown","5abcdf3f":"markdown","fcc6dfdc":"markdown","d182e070":"markdown","cce1afc8":"markdown","35f95c5a":"markdown","db6f6023":"markdown","5d2f34c3":"markdown","5e5f6470":"markdown","dfb68455":"markdown","f496692d":"markdown","860dedc6":"markdown","3a6c469b":"markdown","b85a8288":"markdown","aa4b9403":"markdown","e41bb9b8":"markdown","109487e5":"markdown","21a28793":"markdown","327a471f":"markdown","504f7465":"markdown"},"source":{"9a00b9cb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\norg_data = pd.read_csv('..\/input\/train.csv').drop(['Id'], axis=1)","0a02e0ec":"org_data.info()","c6e880a8":"org_data.describe()","c8a095ac":"lost = org_data.count().copy(deep=True)\nlost = 1460-lost[lost<1460]\nlost_pd = lost.reset_index(name='count')\n\nplt.figure(figsize=(10, 8))\nax = sns.barplot(x='count', y='index', data=lost_pd)\nax.set(xlabel='Lost')","3ef40225":"data = org_data.copy(deep=True)","e0ae04b1":"corr_mat = data.corr()\ncorr_mat['SalePrice'].sort_values(ascending=False)","1f003cb0":"plt.figure(figsize=(9,9))\nsns.heatmap(corr_mat, cmap='RdBu', center=0, square=True)","34c4c74b":"plt.figure(figsize=(10,10))\ncorr_cols = corr_mat.nlargest(10, 'SalePrice')['SalePrice']\nsns.heatmap(data[corr_cols.index].corr(), annot=True, square=True)","06b48abd":"from scipy import stats\nfrom scipy.stats import norm, skew","1e8a8e1d":"sns.distplot(data['SalePrice'], fit=norm)\nplt.ylabel('Frequency', fontsize=13)\n\nplt.figure()\nres = stats.probplot(data['SalePrice'], plot=plt)","609a1e01":"data['log_SalePrice'] = np.log(data['SalePrice'])\nsns.distplot(data['log_SalePrice'], fit=norm)\n\nplt.figure()\nres = stats.probplot(data['log_SalePrice'], plot=plt)","af94f33a":"data['HouseAge'] = data['YrSold'] - data['YearBuilt']\nplt.figure(figsize=(20, 20))\nsns.jointplot(x='HouseAge' ,y='YearBuilt', data=data)","6555ca47":"var = 'MSSubClass'\nnew_var = 'cate_MSSubClass' \n# data[var].apply(str)\ndata[new_var] = data[var].astype(str)\nprint(data[new_var].value_counts().sort_index())\nplt.figure(figsize=(15, 9))\nsns.boxplot(x=new_var, y='log_SalePrice', data=data)","73494195":"msz = data['MSZoning'].copy()\nmsz.value_counts()\nsns.boxplot(x='MSZoning', y='log_SalePrice', data=data)","e4a9f0b6":"var = 'LotFrontage'\n# sns.jointplot(x='LotFrontage', y='log_SalePrice', data=data)\nax = sns.kdeplot(data[var])\nax.set(xlabel='LotFrontage')\nprint('skew', data[var].skew())\nprint('kurt', data[var].kurt())\nplt.show()\n\nloged = np.log(data[var])\nprint('log_skew', loged.skew())\nprint('log_kurt', loged.kurt())\nprint('median', loged.median())\nlog_ax = sns.kdeplot(loged)\nlog_ax.set(xlabel='log LotFrontage')\nplt.show()\n\nmean = data[var].mean()\nstd = data[var].std()\nz_score = (data[var]-mean)\/std\nprint('std_skew', z_score.skew())\nprint('std_kurt', z_score.kurt())\nprint('median', z_score.median())\nstd_ax = sns.kdeplot(z_score)\nstd_ax.set(xlabel='z score LotFrontage')\n# z_score","8aef67a0":"var = 'Street'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data)","e0f028cf":"var = 'Alley'\ndata[var].value_counts()\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Pave', 'Grvl'])","1ebe55aa":"df = data.copy(deep=True)\n##### type 0 \nprint(df['Street'].value_counts())\nsns.boxplot(x='Street', y='log_SalePrice', data=df)\nplt.show()\n\n\n####################\n\n##### type 1\ndf['Alley_filled'] = df['Alley'].fillna(df['Street'])\nprint(df['Alley'].value_counts())\nprint(df['Alley_filled'].value_counts())\nsns.boxplot(x='Alley_filled', y='log_SalePrice', data=df)\nplt.show()\n\n#### type 2\ndef fn_roadtype1(s, a):\n    if s==a:\n        return s\n    elif s!=a:\n        return s+a\n    \ndf['RoadType1'] = df.apply(lambda row: fn_roadtype1(row['Street'], row['Alley_filled']), axis=1)\nprint(df['RoadType1'].value_counts())\nsns.boxplot(x='RoadType1', y='log_SalePrice', data=df)\nplt.show()\n\n#### type 3\ndef isnan(x):\n    return x!=x\n\ndef fn_roadtype2(s, a):\n    if isnan(a):\n        return s\n    elif a==s:\n        return 'both_'+s\n    elif a!=s:\n        return s+a\n\ndf['RoadType2'] = df.apply(lambda row: fn_roadtype2(row['Street'], row['Alley']), axis=1)\nprint(df['RoadType2'].value_counts())\nsns.boxplot(x='RoadType2', y='log_SalePrice', data=df)","91fb4df4":"var = 'LotShape'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Reg', 'IR1', 'IR2', 'IR3'])","84f1a1be":"var = 'LandContour'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Lvl', 'Bnk', 'HLS', 'Low'])","00b5143e":"var = 'Utilities'\nprint(data[var].value_counts())","645dd776":"var = 'LotConfig'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data)","59278234":"var = 'LandSlope'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Gtl', 'Mod', 'Sev'])","e89e8282":"var = 'Neighborhood'\nprint(data[var].value_counts())\nplt.figure(figsize=(26,12))\nsns.boxplot(x=var, y='log_SalePrice', data=data, )","03488e68":"var = 'Condition1'\nprint(data[var].value_counts())\nplt.figure(figsize=(10,6))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Norm', 'Feedr', 'Artery', 'RRAn', 'PosN', 'RRAe', 'PosA', 'RRNn', 'RRNe'])","8a8a3c3a":"df = data.copy(deep=True)\ndef fn_condition(x):\n    cond = x['Condition1']\n    if cond in ('RRNn', 'RRAn', 'RRNe', 'RRAe'):\n        return 'Near_Railroad'\n    elif cond in ('PosN', 'PosA'):\n        return 'Near_PositiveSite'\n    else:\n        return cond\n\ndf['Condition'] = df.apply(lambda x: fn_condition(x), axis=1)\nprint(df['Condition'].value_counts())\nplt.figure(figsize=(10,6))\nsns.boxplot(x='Condition', y='log_SalePrice', data=df)","699abc18":"var = 'Condition2'\nprint(data[var].value_counts())\nplt.figure(figsize=(10,6))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['Norm', 'Feedr', 'Artery', 'RRAn', 'PosN', 'RRAe', 'PosA', 'RRNn', 'RRNe'])","0f21eb16":"var = 'BldgType'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=['1Fam', '2fmCon', 'Duplex', 'TwnhsE', 'Twnhs'])","96f984b7":"var = 'HouseStyle'\nprint(data[var].value_counts())\nplt.figure(figsize=(10, 12))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=data[var].value_counts().sort_index().index)","8cb3fd5b":"df = data.copy(deep=True)\ndef fn_apply(x):\n    cond = x['HouseStyle']\n    if cond in ('1Story', '1.5Fin'):\n        return '1_fin'\n    elif cond in ('2Story', '2.5Fin'):\n        return '2_fin'\n    elif cond in ('1.5Unf', '2.5Unf'):\n        return 'unf'\n    else:\n        return cond\n\nnew_var = 'comb_HouseStyle'\ndf[new_var] = df.apply(lambda x: fn_apply(x), axis=1)\nprint(df[new_var].value_counts())\nplt.figure(figsize=(6,10))\nsns.boxplot(x=new_var, y='log_SalePrice', data=df)","c3661526":"var = 'OverallQual'\nprint(data[var].value_counts())\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=data[var].value_counts().sort_index().index)","88509f8a":"var = 'OverallCond'\nprint(data[var].value_counts())\nplt.figure(figsize=(12, 6))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=data[var].value_counts().sort_index().index)","23740ba4":"var = 'YearBuilt'\n# print(data[var].value_counts())\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\n# sns.jointplot(x=var, y='log_SalePrice', data=data)\nsns.boxplot(x=var, y='log_SalePrice', data=data)","d546097c":"var = 'YearRemodAdd'\n# print(data[var].value_counts())\nplt.figure(figsize=(12, 6))\nsns.jointplot(x=var, y='log_SalePrice', data=data, kind='reg')","9f6f1878":"var = 'BsmtExposure'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data, \\\n            order=['Gd', 'Av', 'Mn', 'No', 'NA'])","fae3acb8":"var = 'BsmtFinType1'\nprint(data[var].value_counts())\nplt.figure(figsize=(8,12))\nsns.boxplot(x=var, y='log_SalePrice', data=data, \\\n           order=['GLQ', 'ALQ', 'BLQ', 'Rec', 'LwQ', 'Unf', 'NA'])","d7277214":"var = 'BsmtFinSF1'\nprint(data[var].value_counts()[0])\nplt.figure(figsize=(8,12))\nsns.jointplot(x=var, y='log_SalePrice', data=data, kind='reg')","dd54aac2":"# data[['BsmtFinSF1', 'BsmtFinType1']]\ngp = data.groupby('BsmtFinSF1')\ngp.get_group(0)['BsmtFinType1'].value_counts(dropna=False)","b2c8d3c6":"var = 'BsmtFinType2'\nprint(data[var].value_counts(dropna=False))\nplt.figure(figsize=(8,12))\nsns.boxplot(x=var, y='log_SalePrice', data=data, \\\n           order=['GLQ', 'ALQ', 'BLQ', 'Rec', 'LwQ', 'Unf', 'NA'])","602a39f5":"var = 'BsmtFinSF2'\nprint(data[var].value_counts()[0])\nplt.figure(figsize=(8,12))\nsns.jointplot(x=var, y='log_SalePrice', data=data, kind='reg')","e853f254":"# data[['BsmtFinSF2', 'BsmtFinType2']]\ngp = data.groupby('BsmtFinSF1')\ngp.get_group(0)['BsmtFinSF2'].value_counts(dropna=False)","312d9ac4":"var = 'Electrical'\nprint(data[var].value_counts())\nplt.figure(figsize=(8,12))\nsns.boxplot(x=var, y='log_SalePrice', data=data)","5bd0f5e5":"var = 'GarageFinish'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data)","73c07037":"var = 'PavedDrive'\nprint(data[var].value_counts())\nsns.boxplot(x=var, y='log_SalePrice', data=data)","4ced6a95":"var = 'Fence'\nprint(data[var].value_counts(dropna=False))\nsns.boxplot(x=var, y='log_SalePrice', data=data)","7137b4ad":"var = 'MoSold'\n# print(data[var].value_counts().sort_index())\nplt.figure(figsize=(12, 8))\n# sns.barplot(x=var, y='SalePrice', data=data, order=np.sort(data[var].unique()))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=np.sort(data[var].unique()))","d3472526":"var = 'YrSold'\n# print(data[var].value_counts().sort_index())\nplt.figure(figsize=(6, 8))\nsns.boxplot(x=var, y='log_SalePrice', data=data, order=np.sort(data[var].unique()))","f459d03e":"var = 'SaleType'\nprint(data[var].value_counts(dropna=False))\nplt.figure(figsize=(15, 8))\nsns.boxplot(x=var, y='log_SalePrice', data=data)","3c53793a":"var = 'SaleCondition'\nprint(data[var].value_counts(dropna=False))\n# plt.figure(figsize=(15, 8))\nsns.boxplot(x=var, y='log_SalePrice', data=data)","157ff1d1":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler, PowerTransformer, RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.utils import shuffle","de70864e":"def fill_na(X):\n\n    filled_X = X.copy()\n\n    # LotFrontage\n    \"\"\"\n    Fill in missing values by the median LotFrontage of the neighborhood.\n    \n    https:\/\/i.stack.imgur.com\/sgCn1.jpg\n    \n    df.groupby('col_1')['col_2'] -> looks like split section\n    df.groupby('col_1')['col_2'].transform(lambda k: ...) -> k get the split_1, 2, 3\n    \n    \"\"\"\n    filled_X.groupby('Neighborhood')['LotFrontage'].transform(lambda k: k.fillna(k.median()))\n#     filled_X['LotFrontage'].fillna(value=filled_X['LotFrontage'].median(), inplace=True)\n    \n    # Alley\n    filled_X['Alley'].fillna(value='NA', inplace=True)\n    \n    # MasVnrType\n    filled_X['MasVnrType'].fillna(value='NA', inplace=True)\n    # MasVnrArea\n    filled_X['MasVnrArea'].fillna(value=0, inplace=True)\n    \n    # BsmtQual\n    filled_X['BsmtQual'].fillna(value=\"NA\", inplace=True)\n    # BsmtCond\n    filled_X['BsmtCond'].fillna(value=\"NA\", inplace=True)\n    # BsmtExposure\n    filled_X[\"BsmtExposure\"].fillna(value=\"NA\", inplace=True)\n    # BsmtFinType1\n    filled_X[\"BsmtFinType1\"].fillna(value=\"NA\", inplace=True)\n    # BsmtFinType2\n    filled_X[\"BsmtFinType2\"].fillna(value=\"NA\", inplace=True)\n    \n    # Electrical\n    filled_X[\"Electrical\"].fillna(\"SBrkr\", inplace=True)\n    \n    # FireplaceQu\n    filled_X[\"FireplaceQu\"].fillna(value=\"NA\", inplace=True)\n    \n    # GargaeYrBlt\n    filled_index = filled_X[filled_X[\"GarageYrBlt\"].isna()].index\n    YrBlt = filled_X.loc[filled_index, \"YearBuilt\"]\n    filled_X.loc[filled_index, \"GarageYrBlt\"] = YrBlt\n    \n    # GarageType\n    filled_X[\"GarageType\"].fillna(value=\"NA\", inplace=True)\n    # GarageFinish\n    filled_X[\"GarageFinish\"].fillna(value=\"NA\", inplace=True)\n    # GarageQual\n    filled_X[\"GarageQual\"].fillna(value=\"NA\", inplace=True)\n    # GarageCond\n    filled_X[\"GarageCond\"].fillna(value=\"NA\", inplace=True)\n    \n    # PoolQC\n    filled_X[\"PoolQC\"].fillna(value=\"NA\", inplace=True)\n    \n    # Fence\n    filled_X[\"Fence\"].fillna(value=\"NA\", inplace=True)\n    \n    # MiscFeature\n    filled_X[\"MiscFeature\"].fillna(value=\"NA\", inplace=True)\n    \n    return filled_X","2defe708":"def process_data(X, y, num_imputer=None, scaler=None, cat_imputer=None, onehoter=None):\n    \n    # fill missing value\n    X = fill_na(X)\n    \n    ###### Transform\n    \n    # num -> cat\n    X['MSSubClass'] = X['MSSubClass'].astype(str)\n    X['MoSold'] = X['MoSold'].astype(str)\n    X['YrSold'] = X['YrSold'].astype(str)\n#     X['YearBuilt'] = X['YearBuilt'].astype(str)\n    \n    # cat -> ord  \n    cat_to_ord_cols_1 = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', \\\n                         'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']\n    cat_to_ord_dict_1 = {'Ex':5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1, 'NA':0}\n    for col in cat_to_ord_cols_1:\n        X[col] = X[col].map(cat_to_ord_dict_1, )\n    \n    X['BsmtExposure'] = X['BsmtExposure'].map({'Gd':4, 'Av':3, 'Mn':2, 'No':1, 'NA':0})\n    X['CentralAir'] = X['CentralAir'].map({'Y':1, 'N':0})\n    X['GarageFinish'] = X['GarageFinish'].map({'Fin':3, 'RFn':2, 'Unf':1, 'NA':0})\n    X['PavedDrive'] = X['PavedDrive'].map({'Y':1, 'P':0.5, 'N':0})\n    X['BsmtFinType1'] = X['BsmtFinType1'].map({'GLQ':5, 'ALQ':4, 'BLQ':3, 'Rec':2, 'LwQ':1, 'Unf':0})\n    X['BsmtFinType2'] = X['BsmtFinType2'].map({'GLQ':5, 'ALQ':4, 'BLQ':3, 'Rec':2, 'LwQ':1, 'Unf':0})\n    X['Electrical'] = X['Electrical'].map({'SBrkr':4, 'FuseA':3, 'FuseF':2, 'FuseP':1, 'Mix':0})\n    X['Fence'] = X['Fence'].map({'GdPrv':4, 'MnPrv':3, 'FdWo':2, 'MnWw':1, 'NA':0})\n    \n    # add new feature\n    X['TotalSF'] = X['TotalBsmtSF'] + X['1stFlrSF'] + X['2ndFlrSF']\n    \n    ######\n\n    # split num\/cat data\n    num_X = X.select_dtypes(include=np.number)\n    cat_X = X.select_dtypes(exclude=np.number)\n#     print(num_X.columns, cat_X.columns, sep='\\n')\n    \n    # impute num data\n    if num_imputer==None:\n        num_imputer = SimpleImputer(strategy='median')\n        imputed_num_X = num_imputer.fit_transform(num_X)\n        imputed_num_X = pd.DataFrame(imputed_num_X, index=num_X.index, columns=num_X.columns)\n    else:\n        imputed_num_X = num_imputer.transform(num_X)\n        imputed_num_X = pd.DataFrame(imputed_num_X, index=num_X.index, columns=num_X.columns)\n    \n    \n    imputed_num_X += 1\n    # scale num data\n    if scaler==None:\n        scaler = make_pipeline(PowerTransformer(method='box-cox'),  RobustScaler())\n        scaled_num_X = scaler.fit_transform(imputed_num_X)\n        scaled_num_X = pd.DataFrame(scaled_num_X, index=num_X.index, columns=num_X.columns)\n    else:\n        scaled_num_X = scaler.transform(imputed_num_X)\n        scaled_num_X = pd.DataFrame(scaled_num_X, index=num_X.index, columns=num_X.columns)\n    \n    \n    # impute cat data\n    if cat_imputer==None:\n        cat_imputer = SimpleImputer(strategy='most_frequent')\n        imputed_cat_X = cat_imputer.fit_transform(cat_X)\n    else:\n        imputed_cat_X = cat_imputer.transform(cat_X)   \n    \n    # onehotencode cat data\n    if onehoter==None:\n        onehoter = OneHotEncoder(sparse=False, handle_unknown='ignore')\n        onehot_cat_X = pd.DataFrame(onehoter.fit_transform(imputed_cat_X), index=cat_X.index)\n    else:\n        onehot_cat_X = pd.DataFrame(onehoter.transform(imputed_cat_X), index=cat_X.index)\n\n    ######\n    \n    fin_num_X = scaled_num_X\n    fin_cat_X = onehot_cat_X\n    \n    processed_X = pd.concat([fin_num_X, fin_cat_X], axis=1, sort=False)\n    processed_X.info()\n    \n    ######\n    \n    if y is not None:\n        processed_y = np.log(y)\n    else:\n        processed_y = None\n    \n    return processed_X, processed_y, num_imputer, scaler, cat_imputer, onehoter","102ebad0":"data = org_data.copy(deep=True)\ndata = shuffle(data, random_state=1).reset_index(drop=True)","4b4e28bf":"X, y, num_imputer, scaler, cat_imputer, onehoter = process_data( X=data.drop(['SalePrice'], axis=1), y=data['SalePrice'])","c162b3e6":"X.head()","9d1a2ad1":"from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom sklearn.linear_model import Lasso, RidgeCV, ElasticNetCV, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom xgboost import XGBRegressor\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.model_selection import KFold\nimport keras","eec44569":"n_cv = 5\ndef rmse_cv(model, X, y):\n    rmse = np.sqrt(-cross_val_score(model, X, y, cv=n_cv, scoring='neg_mean_squared_error'))\n    return rmse","ad79a78d":"dnn_X = np.array(X)\ndnn_y = np.array(y)\n\ntrain_X, test_X, train_y, test_y = train_test_split(dnn_X, dnn_y)","77e6edf8":"def get_model():\n    dnn = keras.Sequential()\n    dnn.add(keras.layers.Dense(units=100, activation='relu'))\n    dnn.add(keras.layers.Dense(100, activation='relu'))\n    dnn.add(keras.layers.Dense(1))\n    dnn.compile(loss='mean_squared_error', optimizer='adam') #, metrics='mean_squared_error'\n    return dnn","4973d02b":"kf = KFold(n_splits=5, random_state=1)\nscore = np.array([])\n\nbatch_size = 16\nepochs = 20\n\nfold_cnt = 1\nfor train_id, test_id in kf.split(dnn_X, dnn_y):\n    print(\"\\nFold {}\\n\".format(fold_cnt))\n    fold_cnt += 1\n    \n    dnn = get_model()\n    dnn.fit(dnn_X[train_id], dnn_y[train_id], batch_size=batch_size, epochs=epochs, validation_data=(dnn_X[test_id], dnn_y[test_id]))\n    score = np.append(score, (dnn.evaluate(dnn_X[test_id], dnn_y[test_id])))\n\nprint('DNN error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","f170d3a1":"xgb = XGBRegressor(learning_rate=.2, max_depth=3, n_estimators=100 , random_state=1)\n\nscore = rmse_cv(xgb, X, y)\n\nprint('Xgboost error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","e4596f55":"gb = GradientBoostingRegressor(learning_rate=.1, n_estimators=100, random_state=1)\n\nscore = rmse_cv(gb, X, y)\n\nprint('Gradient Boosting error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","ec58a47b":"ridge = RidgeCV()\n\nscore = rmse_cv(ridge, X, y)\n\nprint('Ridge error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","d0237f5f":"lasso = Lasso(alpha=0.0005, random_state=1)\n\nscore = rmse_cv(lasso, X, y)\n\nprint('Lasso error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","d7fc103b":"##### l1_ratio = [0.1, 0.3, 0.5, 0.7, 0.9, 1]\nelastic = ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=1)\n\nscore = rmse_cv(elastic, X, y)\n\nprint('ElasticNet error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","81208932":"svm = SVR()\n\nscore = rmse_cv(svm, X, y)\n\nprint('SVM error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","3e87dffe":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, model_dict):\n        self.model_dict = model_dict\n    \n    def fit(self, X, y):\n        for name, model in self.model_dict.items():\n            if name=='dnn':\n                model.fit(np.array(X), np.array(y), batch_size=16, epochs=20, verbose=0)\n            else:\n                model.fit(X, y)\n            \n        return self\n    \n    def predict(self, X):\n        predictions = np.column_stack([model.predict(X) for name, model in self.model_dict.items()])\n        return np.mean(predictions, axis=1)","e97805ca":"dnn = get_model()\naveraged_models = AveragingModels({'xgb':xgb, 'gb':gb, 'ridge':ridge, 'lasso':lasso, 'elastic':elastic, 'svm':svm, 'dnn':dnn})\n\nscore = rmse_cv(averaged_models, X, y)\n\nprint('averged models error: {:.4f} ({:.4f})'.format(score.mean(), score.std()))","e5ac2a8b":"train_data = org_data.copy()\ntrain_data = shuffle(train_data).reset_index(drop=True)\n\norg_test_data = pd.read_csv('..\/input\/test.csv')\ntest_data = org_test_data.drop(['Id'], axis=1).copy()","feddd6f1":"train_X, train_y, num_imputer, scaler, cat_imputer, onehoter = process_data(train_data.drop(['SalePrice'], axis=1), train_data['SalePrice'])\nprint()\ntest_X, _, _, _, _, _ = process_data(test_data, None, num_imputer, scaler, cat_imputer, onehoter )","7f899cb6":"def rmse_error(y, y_hat):\n    return np.sqrt(mean_squared_error(y, y_hat))","a4bd426d":"dnn = get_model()\nfinal_model = AveragingModels({'xgb':xgb, 'gb':gb, 'ridge':ridge, 'lasso':lasso, 'elastic':elastic, 'svm':svm, 'dnn':dnn})\nfinal_model.fit(train_X, train_y)\npred = final_model.predict(train_X)\nprint(rmse_error(pred, train_y))\n\nfinal_y_hat = final_model.predict(test_X)\ninverse_y_hat = np.exp(final_y_hat)","2ab2e00d":"final_y_hat","da23eccb":"inverse_y_hat","358eba2c":"# The lines below shows how to save predictions in format used for competition scoring\n# Just uncomment them.\n\noutput = pd.DataFrame({'Id': org_test_data.Id,\n                      'SalePrice': inverse_y_hat})\noutput.to_csv('submission.csv', index=False)","c5b55d60":"### LotShape (cat)","a98ba9d6":"### BsmtFinType2","5e26ab34":"### BsmtFinSF1","d9c20824":"### BsmtFinSF2","d466790a":"### Fence","a76e773b":"### GarageFinish","74534337":"### *drop | add RoadType(cat)\nconcern:\ndata unbalance\n\n#### 4 type to try\n0. drop Alley\n1. RoadType = Alley filled with Street\n2. Pave\/ PaveGrvl\/ Grvl\n3. Pave\/ both_Pave\/ PaveGrvl\/ Grvl","ca9f4c4d":"### Condition1 & 2","79f695c9":"# Data Processing","72b7c4a9":"### MSSubClass (num -> cat)\nmeaning: \u92b7\u552e\u7684\u623f\u5c4b\u985e\u578b ex.\u5e7e\u9593\u623f\u3001\u5efa\u7bc9\u6642\u9593\n- convert to **categorical** data","817db504":"# EDA","757c3777":"### SalePrice","cdae5022":"### LandContour(cat)","08179fcc":"### BsmtFinType1","d3bf736b":"### YearRemodAdd","91e210d6":"### *HouseAge (not used)","bb302a39":"### Street & Alley(missed) (cat)\nmeaning: \u8207\u8857\u9053\u9023\u63a5\u6750\u8cea","6bef2b54":"    ### LandSlope(cat)","0ce11447":"### HouseStyle","207b8a07":"# Build Model","9640729c":"### Electrical","e82f7110":"### SaleType","5abcdf3f":"### OverallCond","fcc6dfdc":"### MSZoning (cat)\nmeaning: \u5efa\u7bc9\u5340\u57df ex.\u5546\u696d\u3001\u5bc6\u96c6\/\u4e2d\/\u7a00\u5c11\u4f4f\u5b85\u5340\u3001\u6d6e\u52d5\n","d182e070":"### Neighborhood","cce1afc8":"### Utilities(cat)","35f95c5a":"### BsmtExposure","db6f6023":"### Averaging model","5d2f34c3":"### SaleCondition","5e5f6470":"### BldgType","dfb68455":"### OverallQual","f496692d":"### YearBuilt","860dedc6":"### PavedDrive","3a6c469b":"## Analyze data","b85a8288":"### MoSold","aa4b9403":"### LotConfig(cat)","e41bb9b8":"# Build Final model","109487e5":"### YrSold","21a28793":"### LotFrontage (num)\nmean: \u8207\u9053\u8def\u63a5\u89f8\u8ddd\u96e2\n- missed\n    - median\n- \u504f\u659c (skew = 2.5) \n    - **\u53d6log** (skew = -0.7)","327a471f":"### DNN","504f7465":"### *add log_SalePrice"}}