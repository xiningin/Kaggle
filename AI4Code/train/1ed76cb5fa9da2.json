{"cell_type":{"e1c6d88a":"code","6d85e12f":"code","72dddd18":"code","c751c781":"code","d0429a83":"code","faea70bc":"code","0a830f84":"code","fc34f308":"code","93f6083e":"code","2b1e8b5e":"code","c88f61e7":"code","aad9ad4c":"code","99725bb4":"code","e3479dac":"code","5f0a3620":"code","ceceadad":"code","e45b65ca":"code","4a8d46e4":"code","5d70502e":"code","d369bbd9":"code","d40d3faa":"code","4a80573a":"code","b3e40506":"code","a2945535":"code","ea887a2f":"code","05367740":"code","07f20a81":"code","5501eed3":"code","341f1064":"code","71911c72":"code","8c5bbb82":"code","e6d21bf6":"code","593aeeaf":"code","4ded91d6":"code","8bad3ec7":"code","c4a6d1cd":"code","6f46b4ac":"markdown","cb465a50":"markdown","9e3e2017":"markdown","dbb34f1e":"markdown","1d48c481":"markdown","e944cb52":"markdown","e82110b6":"markdown","1070b222":"markdown","f367a190":"markdown","526847a9":"markdown"},"source":{"e1c6d88a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","6d85e12f":"data = pd.read_csv(\"..\/input\/CC GENERAL.csv\")","72dddd18":"data.head()","c751c781":"data.info()","d0429a83":"data.describe()","faea70bc":"data.isna().sum()","0a830f84":"data = data.fillna(data.mean())\ndata.isna().sum()","fc34f308":"data.drop('CUST_ID', axis=1, inplace=True)","93f6083e":"data.head(2)","2b1e8b5e":"data.dtypes","c88f61e7":"data.nunique()","aad9ad4c":"data[['CASH_ADVANCE_TRX','PURCHASES_TRX','TENURE']].nunique()","99725bb4":"plt.figure(figsize=(12,12))\nsns.heatmap(data.corr(),xticklabels=data.columns, yticklabels=data.columns, annot=True)","e3479dac":"sns.pairplot(data)","5f0a3620":"fig, axes = plt.subplots(ncols=1, nrows=3)\nax0,ax1,ax2 = axes.flatten()\n\nax0.hist(data['CASH_ADVANCE_TRX'],65,histtype='bar', stacked=True)\nax0.set_title('CASH_ADVANCE_TRX')\n\nax1.hist(data['PURCHASES_TRX'], 173, histtype='bar', stacked=True)\nax1.set_title('PURCHASES_TRX')\n\nax2.hist(data['TENURE'],7,histtype='bar', stacked=True)\nax2.set_title('TENURE')\n\nfig.tight_layout()","ceceadad":"features = data.copy()\nlist(features)","e45b65ca":"cols = ['BALANCE',\n        'PURCHASES',\n        'ONEOFF_PURCHASES',\n        'INSTALLMENTS_PURCHASES',\n        'CASH_ADVANCE',\n        'CASH_ADVANCE_TRX',\n        'PURCHASES_TRX',\n        'CREDIT_LIMIT',\n        'PAYMENTS',\n        'MINIMUM_PAYMENTS']\nfeatures[cols] = np.log(1+features[cols])\nfeatures.head()","4a8d46e4":"data.head()","5d70502e":"features.describe()","d369bbd9":"# Determining outliers by boxplot\nfeatures.boxplot(rot=90, figsize=(30,10))","d40d3faa":"from sklearn.cluster import KMeans","4a80573a":"X = np.array(features)\nsumOfSqrdDist = []\nK = range(1,15)\n\nfor k in K:\n    kmeans = KMeans(n_clusters=k, random_state=42)\n    kmeans = kmeans.fit(X)\n    sumOfSqrdDist.append([k, kmeans.inertia_])\n    \nplt.plot(K, sumOfSqrdDist, 'bx-')\nplt.xlabel('k')\nplt.ylabel('Sum of Squared Distances')\nplt.title('Elbow method for optimal k')\nplt.show();","b3e40506":"sumOfSqrdDist","a2945535":"n_cluster = 11\nclustering = KMeans(n_clusters=n_cluster, random_state=42)\ncluster_labels = clustering.fit_predict(X)\n\nplt.hist(cluster_labels, bins=range(n_cluster+1))\nplt.title(\"# Customers per cluster\")\nplt.xlabel(\"Cluster\")\nplt.ylabel(\" # Customers\")\nplt.show()\n\nfeatures['CLUSTER_INDEX'] = cluster_labels\ndata['CLUSTER_INDEX'] = cluster_labels","ea887a2f":"kmeans.cluster_centers_","05367740":"from scipy.cluster.hierarchy import ward,dendrogram,linkage\nnp.set_printoptions(precision=4,suppress=True)","07f20a81":"distance = linkage(X,'ward')","5501eed3":"plt.figure(figsize=(20,10))\nplt.title(\"Hierarchical Clustering Dendogram\")\nplt.xlabel(\"Index\")\nplt.ylabel(\"Ward's Distance\")\ndendrogram(distance, leaf_rotation=90, leaf_font_size=9);\nplt.axhline(98, c='k')","341f1064":"from scipy.cluster.hierarchy import fcluster\n\nmax_d = 97\nclusters = fcluster(distance, max_d, criterion='distance')\nclusters","71911c72":"k = 11 #K=3\nclusters = fcluster(distance, k, criterion='maxclust')\n\nplt.figure(figsize=(10,8))\nplt.scatter(X[:,0], X[:,1], c=clusters);","8c5bbb82":"from sklearn.metrics import silhouette_score\n\nsumOfSquaredErrors = []\nfor k in range(2,30):\n    kmeans = KMeans(n_clusters=k).fit(X)\n    sumOfSquaredErrors.append([k,silhouette_score(X, kmeans.labels_)])","e6d21bf6":"plt.plot(pd.DataFrame(sumOfSquaredErrors)[0],pd.DataFrame(sumOfSquaredErrors)[1])","593aeeaf":"data.head()","4ded91d6":"data['CLUSTER_INDEX'].nunique()","8bad3ec7":"from sklearn.metrics import confusion_matrix,classification_report","c4a6d1cd":"print(classification_report(features['CLUSTER_INDEX'], kmeans.labels_))","6f46b4ac":"# Clustering using Kmeans","cb465a50":"# Data Exploration","9e3e2017":"# Evaluation","dbb34f1e":"# Feature Generation","1d48c481":"# Corelation Plot","e944cb52":"# Silhoutte_score","e82110b6":"### Clusters by distance","1070b222":"### Elbow method to find the appeopreate number of clusters","f367a190":"# Missing Values","526847a9":"### Dendograms"}}