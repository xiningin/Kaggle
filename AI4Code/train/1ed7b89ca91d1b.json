{"cell_type":{"778302b5":"code","ccaf2a32":"code","9422e2bb":"code","e5dd42be":"code","6ca40409":"markdown","bb71b9f8":"markdown","d13fc371":"markdown","20f93575":"markdown"},"source":{"778302b5":"\n# Imports\nimport os, warnings\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\n\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Reproducability\ndef set_seed(seed=31415):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\nset_seed(31415)\n\n# Set Matplotlib defaults\nplt.rc('figure', autolayout=True)\nplt.rc('axes', labelweight='bold', labelsize='large',\n       titleweight='bold', titlesize=18, titlepad=10)\nplt.rc('image', cmap='magma')\nwarnings.filterwarnings(\"ignore\") # to clean up output cells\n\n#Importing data using DataGenerator and flow\n\ndatagen = ImageDataGenerator(\n    horizontal_flip=True,\n    vertical_flip=True,\n    validation_split=0.3,\n    dtype=tf.float32,\n)\n\n\n# Load training and validation sets\nds_train = datagen.flow_from_directory(\n    '..\/input\/brainmriv2\/brain_tumor_dataset',\n    target_size=[128, 128],\n    batch_size=64,\n    color_mode = 'grayscale',\n    shuffle=True,\n    subset = 'training',\n)\nds_valid = datagen.flow_from_directory(\n    '..\/input\/brainmriv2\/brain_tumor_dataset',\n    target_size=[128, 128],\n    batch_size=25,\n    color_mode = 'grayscale',\n    shuffle=True,\n    subset = 'validation',\n)\n","ccaf2a32":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    # Block One\n    layers.Conv2D(filters=32, kernel_size=3, activation='relu', padding='same',\n                  input_shape=[128, 128, 1]),\n    layers.MaxPool2D(),\n\n    # Block Two\n    layers.Conv2D(filters=64, kernel_size=3, activation='relu', padding='same'),\n    layers.MaxPool2D(),\n\n    # Block Three\n    layers.Conv2D(filters=128, kernel_size=3, activation='relu', padding='same'),\n    layers.MaxPool2D(),\n\n    # Head\n    layers.Flatten(),\n    layers.Dense(2048, activation='relu'),\n    layers.Dropout(0.5),\n    layers.Dense(2, activation='softmax'),\n])","9422e2bb":"early_stopping = EarlyStopping(\n    min_delta=0.001,\n    patience=25,\n    restore_best_weights=True,\n)\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['binary_accuracy'],\n)\n\nhistory = model.fit(\n    ds_train,\n    validation_data=ds_valid,\n    callbacks=[early_stopping],\n    epochs=100,\n    verbose=0,\n)","e5dd42be":"import pandas as pd\n\nhistory_frame = pd.DataFrame(history.history)\nhistory_frame.loc[:, ['loss', 'val_loss']].plot()\nhistory_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot();\nprint(history_frame.loc[:, ['binary_accuracy', 'val_binary_accuracy', 'loss', 'val_loss']])","6ca40409":"## Step 2 - CreateCovNet ##\n","bb71b9f8":"## Step 1 - Load Data ##","d13fc371":"# Brain MRI with the \"Learn Computer Vision Approach\" #","20f93575":"## Step 3 - Train ##"}}