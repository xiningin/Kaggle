{"cell_type":{"bf72c79e":"code","4de28bdd":"code","00f37fb3":"code","68cd2a27":"code","0e9d7f2a":"code","920922fa":"code","bd02f729":"code","85c58e2f":"code","9d87edc2":"code","a85dd449":"markdown","b6354980":"markdown","f37564a0":"markdown","02b0fa72":"markdown","ab90d74a":"markdown","96b7b00e":"markdown","14a0e991":"markdown"},"source":{"bf72c79e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport re\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4de28bdd":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf = df.drop(df.index[0], axis = 0)\ndf.head()","00f37fb3":"number_pattern = \"\\d+_\"","68cd2a27":"df = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf = df.drop(df.index[0], axis = 0)\n\ndef clean_df(df):\n    df_cols = df.columns\n    \n    for col in df.columns:\n        \n        #print(col)\n        \n        if \"_Part_\" in col:\n            try:\n                # Check for the unique value of this.\n                col_number = re.findall(number_pattern, col)[0].replace(\"_\", \"\")\n                \n                unique_colval = df[col].dropna().unique()\n                \n                col_value = unique_colval[0]\n                \n                real_col_name = \"Q\" + str(col_number) + \"_\" + str(col_value)\n                \n                #print(real_col_name)\n                \n                df[col] = df[col].notna()\n                \n                df.rename(columns = {col:real_col_name}, inplace = True)\n                \n                \n            except:\n                print(\"couldn't rename\", col)\n            \n        else:\n            pass\n    \n    return df\n\nclean_df(df).head(3)","0e9d7f2a":"def clean_colnames(df):\n    df.columns = map(str.lower, df.columns)\n    df.columns = df.columns.str.replace(' ', '_')\n    df.columns = df.columns.str.replace('(', '')\n    df.columns = df.columns.str.replace(')', '_')\n    df.columns = df.columns.str.replace('+', 'plus')\n    df.columns = df.columns.str.replace('\/', 'or')\n    df.columns = df.columns.str.replace('.', '_')\n    df.columns = df.columns.str.replace('__', '_')\n    df.columns = df.columns.str.replace('___', '_')\n    \n    # BUG TO FIX - None of the other columns are working.\n    # This column wasn't working.  Fix it here.\n    # df[\"q35_b_other\"] = df[\"q35_b_other\"].notna()\n    \n    return df\n\ndf = clean_colnames(df)\ndf.head()","920922fa":"def fix_others(df):\n    \n    for col in df.columns:\n        if \"other\" in col:\n            try:\n                df[col] = df[col].notna()\n            except:\n                print(\"did not convert\")\n\n    return(df)\n\ndf = fix_others(df)","bd02f729":"df.head()","85c58e2f":"df.to_csv(\"cleaned_kaggle_questionere.csv\", index = False)","9d87edc2":"df.mean()","a85dd449":"## Simpler Graphing and processing ##","b6354980":"## Download the CSV here or use the dataset ##","f37564a0":"# Demonstration of Cleaning Function #\n\nThe point of this function is to rename the columns so they are meaningful\nand then binarize each column value so that it can easily be summed for statistical\nanalysis.","02b0fa72":"## Initial Dataframe ##","ab90d74a":"# Clean the colnames #","96b7b00e":"## Cleaning Function ##","14a0e991":"## Fix the \"Other\" Columns, which were not converting"}}