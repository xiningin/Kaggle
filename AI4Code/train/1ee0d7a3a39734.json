{"cell_type":{"39161b99":"code","cdb0e23a":"code","d844e34f":"code","78d94838":"code","391f1d73":"code","b7aa4aef":"code","07cf9449":"code","b5205525":"code","4f446cc2":"code","c525f458":"code","b6fcce2b":"code","fbaf0cd4":"code","c0b58d3f":"code","a00d88d2":"code","9cc8f481":"code","8ca646c2":"code","6ce434fe":"code","a77da644":"code","de179962":"code","c4a4987a":"code","94721f62":"code","85badf87":"markdown","46a03fc4":"markdown","390722de":"markdown","de1f2a3b":"markdown","0620ee0f":"markdown","df24d271":"markdown","ffb4bae1":"markdown","d1bafa42":"markdown","ffcd623d":"markdown","bd06963c":"markdown","202a8f4a":"markdown","f0fafd79":"markdown","4c253b84":"markdown","8f99721f":"markdown","b8c85ff9":"markdown","5b697e05":"markdown","d5084ad1":"markdown","9cb09ffb":"markdown","9fe4004f":"markdown","edf3233a":"markdown","e9b4755d":"markdown","c8a1d682":"markdown","8c2454ae":"markdown","c20039e5":"markdown"},"source":{"39161b99":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\npd.options.mode.chained_assignment = None","cdb0e23a":"calendar = pd.read_csv('..\/input\/seattle\/calendar.csv')\nlistings = pd.read_csv('..\/input\/seattle\/listings.csv')","d844e34f":"calendar.head()","78d94838":"calendar.info()","391f1d73":"listings.head()","b7aa4aef":"print('The listings.csv subset has {} columns and {} rows.'.format(listings.shape[1], listings.shape[0]))","07cf9449":"listings.info()","b5205525":"# listing_id\ncalendar['listing_id'] = calendar['listing_id'].astype(str)\n\n# month & month_year\ncalendar['month'] = pd.DatetimeIndex(calendar['date']).month\ncalendar['year'] = pd.DatetimeIndex(calendar['date']).year\ncalendar['month_year'] = pd.to_datetime(calendar['date']).dt.to_period('M')\n\n# price\ncalendar['price'] = calendar['price'].apply(lambda x: float((x[1:].replace(',',''))) if type(x) != float else x)\n\ncalendar.head()","4f446cc2":"relevant_features = ['price','accommodates','bathrooms','bedrooms','beds','weekly_price','monthly_price','cleaning_fee', 'instant_bookable','reviews_per_month','cancellation_policy']\nq3 = listings[relevant_features]\nq3.head()","c525f458":"def clean_price(col):\n    '''INPUT:\n        col - the price-related column you want to clean.\n    OUTUT:\n        col - a column which has the same column name and is converted with a correct datatype.'''\n        \n    col = col.apply(lambda x: float((x[1:].replace(',',''))) if type(x) != float else x)\n    return col","b6fcce2b":"q3['price'] = clean_price(q3['price'])\nq3['weekly_price'] = clean_price(q3['weekly_price'])\nq3['monthly_price'] = clean_price(q3['monthly_price'])\nq3['cleaning_fee'] = clean_price(q3['cleaning_fee'])\nq3.head()","fbaf0cd4":"num_vars = q3.select_dtypes(include=['int','float']).columns\nfor var in num_vars:\n    q3.loc[:,var] = q3[var].fillna(q3[var].mean())\n# q3[num_vars].info()","c0b58d3f":"cat_bool_vars = q3.select_dtypes(include=['object','bool']).columns\ncat_bool_vars\nfor var in cat_bool_vars:\n    q3 = pd.concat([q3.drop(var, axis=1), pd.get_dummies(q3[var], prefix=var, prefix_sep='_', drop_first=True)],\n                         axis=1)","a00d88d2":"check_f = calendar[(calendar['available'] == 'f') & (calendar['price'].notnull())].shape[0]\nprint('The number of rows where available = f and price is present is: {}  row(s)'.format(check_f))","9cc8f481":"pivot_1 = pd.pivot_table(calendar[calendar['available'] == 't'], index='month', values=['price'], aggfunc={ 'price':np.mean})\npivot_1['month'] = pivot_1.index\n\npivot_2 = pd.pivot_table(calendar[calendar['available'] == 't'], index='month_year', values=['price'], aggfunc={'price':np.mean})\npivot_2['month_year'] = pivot_2.index\npivot_2['month_year'] = [str(x) for x in pivot_2['month_year']]\n\npivot_3 = pd.pivot_table(calendar, index='month', values=['listing_id'], columns=['available'], aggfunc={'listing_id': 'count'})\npivot_3['month'] = pivot_3.index\npivot_3['available_t'] = pivot_3.iloc[:,1]\npivot_3['available_f'] = pivot_3.iloc[:,0]\n\npivot_3['availibility_rate'] = pivot_3['available_t']\/(pivot_3['available_t']+pivot_3['available_f'])\npivot_3 = pivot_3[['month','availibility_rate']].reset_index(drop=True)\npivot_3\n\nplt.figure(figsize=(30, 10))\ng = plt.GridSpec(2, 2) #Grid\n\n\nplt.subplot(g[0,0])\nplt.bar(pivot_3['month'], pivot_3['availibility_rate'])\nplt.xlabel('month')\nplt.xticks(pivot_3['month'])\nplt.ylabel('availibility_rate')\nplt.title('availibility_rate by month')\n\n\nplt.subplot(g[0,1])\nplt.bar(pivot_1['month'], pivot_1['price'])\nplt.xlabel('month')\nplt.xticks(pivot_1['month'])\nplt.ylabel('avg_price')\nplt.title('Avg price by month')\n\nplt.subplot(g[1,:])\nplt.bar(pivot_2['month_year'], pivot_2['price'])\nplt.xlabel('month_year')\nplt.xticks(pivot_2['month_year'])\nplt.ylabel('avg_price')\nplt.title('Avg price by month_year')\n\nplt.show()","8ca646c2":"zip = listings['zipcode'].value_counts()\nzip = zip.to_frame().reset_index()\nzip = zip.rename({'index':'zipcode', 'zipcode':'listingid_count'}, axis=1)\nzip['zipcode'].astype('str')\n\n\nplt.figure(figsize = (20,10))\nplt.bar(zip['zipcode'], zip['listingid_count'])\nplt.xlabel('zipcode')\nplt.xticks(zip['zipcode'])\nplt.ylabel('listingid_count')\nplt.title('listingid_count by zipcode')\nplt.show()","6ce434fe":"print('Top 5 areas which have the highest number of Airbnb properties in Seattle are: ')\nzip.head()","a77da644":"q3.head()","de179962":"print('Correlation among numeric variables: \\n')\n\nplt.figure(figsize=(14,10))\ncorr = q3.corr()\nprint(corr['price'], '\\n')\n\nprint('Present the result in heatmap: ')\nsns.heatmap(corr, annot=True)\nplt.show()","c4a4987a":"y = q3['price']\nX = q3.drop(columns = ['price'], inplace=False)\nX.info(verbose=True)","94721f62":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)\nlm_model = LinearRegression(normalize = True)\nlm_model.fit(X_train, y_train)\ny_test_predict = lm_model.predict(X_test)\ny_train_predict = lm_model.predict(X_train)\ntest_score = r2_score(y_test, y_test_predict)\ntrain_score = r2_score(y_train, y_train_predict)\n\nprint('test_score: ',test_score)\nprint('train_score: ', train_score)\nif abs(test_score\/train_score) > 0.8:\n    print('The model is not overfitted.')\nelse:\n    print('Need to improve the model.')\nprint('The r-squared score for the model is {} on {} values.'.format(test_score, len(y_test)),'\\n')\n\n\ncoef_df = pd.DataFrame()\ncoef_df['feature'] = X_train.columns\ncoef_df['coef'] = lm_model.coef_\ncoef_df['abs_coef'] = np.abs(lm_model.coef_)\ncoef_df = coef_df.sort_values(by=['abs_coef'], ascending=False)\nprint('Rank features by their impact on the price: \\n', coef_df, '\\n')\n\nplt.figure(figsize = (15,5))\nplt.bar(coef_df['feature'], coef_df['abs_coef'])\nplt.xlabel('features')\nplt.xticks(coef_df['feature'], rotation = 90)\nplt.ylabel('abs_coef')\nplt.title('Rank features by their impact on the price')\nplt.show()","85badf87":"4 steps to build a model:\n* Instantiate your linear model using normalized data\n* Fit your model on the training data\n* Predict using the test data\n* Score the model on the test\n\nThe fit method in sklearn breaks due to NAN values. That's why we need to handle the NaN values in #Step 3: Data Cleaning.\nTo assure the model extends well to new data, we must create a train test split.\nTo assure the same train and test split will occur for different users, random_state is set with a fixed number.\n\n","46a03fc4":"Only choose available = t where the price is available for all listing_id.\nThe calendar.csv subset is now ready. Let's pivot and plot some charts accordingly.","390722de":"Having a glance at the **calendar.csv**. \nThere are 4 columns. \n\nThe **listing_id** and **price** columns are currently NOT in the correct datatype. We need to convert the data type of **listing_id** column into string and **price**'s into float.\n\nWe are going to extract **month** and **month_year** from the **date** column also.","de1f2a3b":"An Airbnb host can configure their listing's calendar to only be open for a few days or weeks every year.\nOther listings are available throughout the year (except for when it is already booked).\n\nThe price is available only when available = t.","0620ee0f":"# 1. Business Understanding\nAirbnb has been allowing visitors and hosts to expand their travel options and provide a more distinctive, personalised way of experiencing the world since 2008. Airbnb has evolved into a one-of-a-kind service that is used and recognised all over the world. The company's data analysis of millions of listings offered by Airbnb is a critical aspect. These millions of listings generate a lot of data, which can be analysed and used for a variety of purposes, including security, business decisions, understanding customer and provider (host) behaviour and performance on the platform, guiding marketing initiatives, and implementing innovative additional services, among others.\n\nIn this project, we are going to use **calendar.csv** and **listings.csv** to answer 3 business questions:\n1. Which is the most busiest time in Settle?\n1. Where is the most crowdest in Settle?\n1. Price Prediction.\n\n","df24d271":"#### Missing values in numberic variables\n\nImputing objects into the matrix rather than dropping them is one method to start making predictions on these values.\n\nDrop the rows with missing response (price) values, then use the column's mean to estimate the values for all the other missing values.","ffb4bae1":"Now the data is clean and ready for the next steps.","d1bafa42":"#### Missing values in categorical variables\n\nNaN values are frequently informative, but by leaving them as 0 in every column of your model, you are not capturing them. As a result, utilise **get dummies** to encode **NaN** values as their own dummy coded column using the **dummy na** option for categorical variables.","ffcd623d":"### String into Float for price-related columns","bd06963c":"## Question 3. Price Prediction","202a8f4a":"There are some issues we need to handle in the q3 dataframe:\n* String into Float for price-related columns\n* Missing values in numberic variables\n* Missing values in categorical variables","f0fafd79":"## Question 2. Where in Settle has the most Airbnb properties?","4c253b84":"# 4. Modeling & Evaluation","8f99721f":"# [UDACITY] Seattle Airbnb Analysis\nThe Settle Airbnb Open Dateset is chosen for **UDACITY Project - Write a Data Science Blog Post**.\n\n6 steps of CRISP-DM (Cross-Industry Standard Process for Data Mining):\n1. Business Understanding\n1. Data Understanding\n1. Data Preparation\n1. Modelling\n1. Evaluation\n1. Deployment\n\n","b8c85ff9":"The correlation coefficient is a number that ranges from -1 to 1.\n* A number near 0 indicates a lower association (exact 0 implying no correlation).\n* Closer to 1, the stronger the favourable association.\n* A negative correlation is stronger if the value is closer to -1.","5b697e05":"## Question 1. Airbnb Busiest Times in Settle","d5084ad1":"## Modelling","9cb09ffb":"It seems that life in Seattle is pretty much busy the whole year. The availability rate is always more than 0.5 and above. The busiest time of the year falls into March, November and December (availability rate is more than 0.7). It is easy to understand because in March, public holidays falls into weekend and there are 2 holidays\/ month, people tends to spend more on travelling. The hosts also have a plan to set their availability on Airbnb. It is the same reason for Christmas\u200a-\u200athe biggest event of the year.\n\nHosts on Airbnb also have a strategy for their business. They tends to give a discount when the number of guests reach the peak of the year and set the price a bit higher to cover the cost when the business does not bring much profit (the highest price falls in July)","9fe4004f":"listings - Detailed listings data for each listing, including 92 attributes. For price prediction, only relevant features are chosen:\n**'price','accommodates','bathrooms','bedrooms','beds','weekly_price','monthly_price','cleaning_fee', 'instant_bookable','reviews_per_month','cancellation_policy'** \n\nName the new dataframe as q3 (the dataframe for quesiton 3)","edf3233a":"# 2. Data Understanding\nThe **Seatlle Airbnb Open** Dataset catalogues homestay listings in Seattle, Washington from 01-2016 to 01-2017.\n\n\nThere are 3 subsets in the dataset:\n1. The pricing for each listing id for a certain day is described in **calendar.csv**.\n1. **listings.csv** contains a detailed description of each listing id, as well as review scores.\n1. For each individual listing id, **reviews.csv** gives detailed reviews.\n\nFirst, let's import the data & revelant libraries needed for the analysis.","e9b4755d":"# 3. Prepare Data","c8a1d682":"We are going to use listings.csv to answer the 2nd question. ","8c2454ae":"# Summary\nThe business goes well in the March, November and December in general. Top 5 areas which have the highest number of Airbnb properties in Seattle are: 98122, 98103, 98102, 98105, 98109. Among the chosen features, bathroom has the most impact on the price.","c20039e5":"Top 5 areas which have the highest number of Airbnb properties in Seattle are: 98122, 98103, 98102, 98105, 98109. They all in the center of Seattle and near Lake Washington where has the most convenient transportation."}}