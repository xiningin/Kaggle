{"cell_type":{"bce1bd34":"code","94de4b1c":"code","2a1b4b02":"code","d3e0aefd":"code","d8762dad":"code","e106745f":"code","920bde01":"code","488769c7":"code","007ce80f":"code","5c5e94bd":"code","eba8a335":"code","ed1fa9ba":"code","2ceca7b1":"code","a4f8cb79":"code","701b92ce":"code","c89393fd":"code","8eb987fa":"code","3807e8e8":"code","be4b442f":"code","72815fbf":"code","3f4fe407":"code","c92f1f65":"code","8cac0738":"code","6e530b6f":"code","de4816f8":"code","7cd366c9":"code","00dca6dd":"code","96990c64":"code","5f05b450":"code","f7dfca1e":"code","99b24880":"code","6aebb17f":"code","7546f3fc":"code","ac86abc1":"code","bbd58bc0":"code","127186c2":"code","fe22888d":"code","aab78fb0":"code","3399279a":"code","d84a749b":"code","e16d7f12":"code","77229813":"code","c5a2210e":"code","10734db0":"code","dbe14d9f":"code","fb6ae18c":"code","7740bead":"code","2eded8cd":"code","918a654e":"code","a061c975":"code","be9a76dc":"code","d5980f5a":"code","7fe18736":"code","88a4dc95":"code","ab568445":"code","e8f2be46":"code","2380febe":"code","77156b9b":"code","a3a8cc75":"code","725c1875":"code","44121a41":"code","afeaeac9":"code","b97b3d4c":"code","18a3e436":"code","8fbeb8af":"code","6cde430d":"code","53769ac1":"code","3123e394":"code","d7789ad7":"code","06a0d62f":"code","f30717a6":"code","f7448d64":"code","7c687bf7":"code","003aefd3":"code","f81e81e6":"code","f88c9f99":"code","2194c69f":"code","dbe9e167":"code","a6416b6b":"code","ca658a55":"code","42019cb5":"code","1e9f70f5":"code","ad3ba910":"code","482ef2b4":"code","c5a1ebc9":"code","d223c4b6":"code","dfddbc74":"code","e1bdfae8":"code","5b2ec53f":"code","840825ae":"code","25f8b017":"code","2a992386":"code","442fff88":"code","dc47f531":"code","5377aefd":"code","825e45db":"code","699c1049":"code","521fae81":"code","848716d2":"code","c757d320":"code","9678f96a":"code","69e8bdc5":"code","1056f6c9":"markdown","47df0a01":"markdown","008190e8":"markdown","84a86d34":"markdown","a6b1cc1a":"markdown","5591e9a5":"markdown","dadc2f0f":"markdown","7815db2b":"markdown","67493b8a":"markdown","e65f0e0e":"markdown","1243122b":"markdown","68d2decf":"markdown","7c6ee8f0":"markdown","e2be73f3":"markdown","79cec008":"markdown","6497bc60":"markdown","0cf38a04":"markdown","d7590311":"markdown","87012979":"markdown","a6181d05":"markdown","30a25cdb":"markdown","1b57cc2a":"markdown","76b1ad0e":"markdown","f627d3aa":"markdown","ec3b3ad7":"markdown","fcf53d92":"markdown","36ec78fd":"markdown","cf6f70ad":"markdown","2277ce30":"markdown","4b8a30fa":"markdown","6c4cd84b":"markdown","bfc716c2":"markdown","8f9294f3":"markdown","176fdf37":"markdown","6cae22e1":"markdown","88d75793":"markdown","2b70dad1":"markdown","9df076a4":"markdown","bce80e07":"markdown","80ee5ff6":"markdown","01dd43d9":"markdown","0c6c73cc":"markdown","e8fd3f5f":"markdown","fb3193c9":"markdown","97c51375":"markdown","47a76ed3":"markdown","633042cd":"markdown","e0a3afb3":"markdown","32569792":"markdown","768506a3":"markdown","e8bb1e37":"markdown"},"source":{"bce1bd34":"import os\nos.listdir('..\/input\/pandas-cookbook-data')","94de4b1c":"import pandas as pd\nimport numpy as np","2a1b4b02":"movies = pd.read_csv(\"..\/input\/pandas-cookbook-data\/data\/movie.csv\") # optional attribute: index_col=\"movie_title\"\nmovies","d3e0aefd":"columns = movies.columns # accessing the columns\nindex = movies.index # accessing the index\ndata = movies.values # data stores a numpy.ndarray","d8762dad":"type(movies)","e106745f":"print(type(columns)) # `columns` is of the `Index` type.\ncolumns","920bde01":"print(type(index)) # `index` is of the `RangeIndex` type\nindex\n# the RangeIndex is similar to the python's built-in range()","488769c7":"print(type(data)) # `data` is an numpy.ndarray\ndata","007ce80f":"print(issubclass(pd.RangeIndex, pd.Index))\nprint(issubclass(columns.__class__, pd.Index))","5c5e94bd":"index.to_numpy()","eba8a335":"columns.to_numpy()","ed1fa9ba":"movies.to_numpy()","2ceca7b1":"# The `.dtypes` attribute returns a pandas Series if I need to use the data\nprint(type(movies.dtypes))\nmovies.dtypes # shows the column names along with its data type","a4f8cb79":"movies.dtypes.value_counts()","701b92ce":"movies.info() # provides more information than the previous ones","c89393fd":"type(np.nan) # NaN is float for pandas and NumPy, pandas rely heavily on NumPy...","8eb987fa":"pd.Series([\"1\",np.nan,\"3\"]).dtype # 'O' is relative to `object`, if the comlumns has mixed values, its type is `object`","3807e8e8":"print(type(movies['director_name']))\nmovies['director_name']","be4b442f":"print(type(movies.director_name))\nmovies.director_name","72815fbf":"movies.loc[0:3, \"director_name\"] # if I want to get all the rows I should put just `:` (a Colon)","3f4fe407":"movies.iloc[0:3, 1]","c92f1f65":"# the RangeIndex is similar to the python's built-in range()\nmovies[\"director_name\"].index # returns a 'pandas.core.indexes.range.RangeIndex'","8cac0738":"movies[\"director_name\"].dtype # returns a 'numpy.dtype'","6e530b6f":"movies[\"director_name\"].size # returns a python `int`","de4816f8":"movies[\"director_name\"].name #returns a python `str`","7cd366c9":"print(type(movies[\"director_name\"].index))\nprint(type(movies[\"director_name\"].dtype))\nprint(type(movies[\"director_name\"].size))\nprint(type(movies[\"director_name\"].name))","00dca6dd":"#apply() is used for applying a function on the values of a Series, or applying a function along the axis of a DataFrame.\nprint(type(movies[\"director_name\"].apply(type)))\nmovies[\"director_name\"].apply(type) # this way we are applying the type function along the values of the series...","96990c64":"# .unique() Return unique values of Series object.\nmovies[\"director_name\"].apply(type).unique()","5f05b450":"dir(pd.Series) ## returns a `list` with all the Series attributes and methods\nseries_attributes_and_methods = set(dir(pd.Series)) ## returns a `set` with all the Series attributes and methods\nprint(\"Quantity of Series Attributes and Methods:\", len(series_attributes_and_methods))","f7dfca1e":"dir(pd.DataFrame)\ndataframe_attributes_and_methods = set(dir(pd.DataFrame))\nprint(\"Quantity of DataFrame Attributes and Methods:\", len(dataframe_attributes_and_methods))","99b24880":"s = series_attributes_and_methods\nd = dataframe_attributes_and_methods\nprint(\"How many Attributes and Methods they both have in common:\", len(s & d))","6aebb17f":"director = movies[\"director_name\"]\nfb_likes = movies[\"actor_1_facebook_likes\"]","7546f3fc":"director.dtype","ac86abc1":"fb_likes.dtype","bbd58bc0":"director.head()","127186c2":"director.sample(n=5, random_state=42)","fe22888d":"director.value_counts()","aab78fb0":"director.value_counts(normalize=True)","3399279a":"fb_likes.value_counts()","d84a749b":"director.size","e16d7f12":"director.shape","77229813":"director.unique()","c5a2210e":"director.unique().size","10734db0":"type(director.unique())","dbe14d9f":"director.count()","fb6ae18c":"fb_likes.count()","7740bead":"print(\"Min:\", fb_likes.min())\nprint(\"Max:\", fb_likes.max())\nprint(\"Mean:\", fb_likes.mean())\nprint(\"Median:\", fb_likes.median())\nprint(\"Std:\", fb_likes.std())","2eded8cd":"fb_likes.describe()","918a654e":"director.describe()","a061c975":"fb_likes.quantile(0.5)","be9a76dc":"fb_likes.quantile([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95, 0.99])","d5980f5a":"director.isna()","7fe18736":"fb_likes_filled = director.fillna(0)\nfb_likes_filled","88a4dc95":"print(fb_likes.count())\nprint(fb_likes_filled.count())","ab568445":"fb_likes_dropped = fb_likes.dropna()\nprint(fb_likes.size)\nprint(fb_likes_dropped.size)","e8f2be46":"print(director.hasnans)\nprint(fb_likes.hasnans)\nprint(fb_likes_filled.hasnans)\nprint(fb_likes_dropped.hasnans)","2380febe":"director.notna()","77156b9b":"imdb_score = movies['imdb_score']\nimdb_score","a3a8cc75":"imdb_score + 10","725c1875":"imdb_score > 7","44121a41":"director == \"James Cameron\"","afeaeac9":"(director == \"James Cameron\").to_numpy().sum()","b97b3d4c":"imdb_score.add(10) # plus 1","18a3e436":"imdb_score.gt(7) # greater than 7","8fbeb8af":"director.value_counts().head(3)","6cde430d":"fb_likes.isna().sum()","53769ac1":"fb_likes.fillna(0).astype(int).head(4)","3123e394":"(fb_likes\n .fillna(0)\n .astype(int).head(4))","d7789ad7":"fb_likes\\\n.fillna(0)\\\n.astype(int).head(4)","06a0d62f":"def print_bosta(series):\n    print(\"bosta\") #this is just for me to see that the chain has come to this point\n    print(series)\n    return series\n\nfb_likes.fillna(0).pipe(print_bosta).astype(int).pipe(print_bosta).head(4)","f30717a6":"col_map = {\n    \"director_name\": \"director\",\n    \"num_critic_for_reviews\": \"critic_reviews\",\n}\n\nmovies.rename(columns=col_map).head() # it returns a DataFrame with its columns renamed, but it doesn't change the original DataFrame","f7448d64":"movies.head()","7c687bf7":"idx_map = {\n    \"Avatar\": \"Ratava\",\n    \"Spectre\": \"Ertceps\",\n    \"Pirates of the Caribbean: At World's End\": \"POC\", \n}\ncol_map = {\n    \"aspect_ratio\": \"aspect\",\n    \"movie_facebook_likes\": \"fblikes\",\n    \"director_name\": \"director\",\n    \"num_critic_for_reviews\": \"critic_reviews\",\n    \"director_facebook_likes\": \"director_fblikes\",\n    \"actor_3_facebook_likes\": \"actor_3_fblikes\",\n    \"actor_1_facebook_likes\": \"actor_1_fblikes\",\n}\n\n(\n    movies.set_index(\"movie_title\")\n    .rename(index=idx_map, columns=col_map)\n    .head(7)\n)","003aefd3":"movies_idx = pd.read_csv(\"..\/input\/pandas-cookbook-data\/data\/movie.csv\", index_col=\"movie_title\")\nmovies_idx","f81e81e6":"ids_list = movies_idx.index.to_list()\nids_list[1:5]","f88c9f99":"cols_list = movies_idx.columns.to_list()\ncols_list","2194c69f":"ids_list[0] = \"Ratava\"\nids_list[1] = \"POC\"\nids_list[2] = \"Ertceps\"\n\ncols_list[1] = \"d i r e c t o r\"\ncols_list[-2] = \"aspect\"\ncols_list[-1] = \"fblikes\"\n\nmovies_idx.index = ids_list\nmovies_idx.columns = cols_list\n\nmovies_idx.head(3)","dbe9e167":"def to_clean(string):\n    return string.strip().lower().replace(\" \", \"_\") ## this is a good way to put all the names more in accordance with python attributes requirements..\nmovies_idx.rename(columns=to_clean)","a6416b6b":"cols = [\n    col.strip().lower().replace(\" \", \"_\")\n    for col in movies_idx.columns\n]\ncols\nmovies_idx.columns = cols\nmovies_idx.head()","ca658a55":"movies[\"has_seen\"] = 0\nmovies.head(3)","42019cb5":"movies.assign(bosta=1) ## it does not mutate the original DataFrame...","1e9f70f5":"total = ( # the plus operator does not ignores missing numbers, it will return NaN if it has to sum NaN with some valid number...\n    movies.actor_1_facebook_likes\n    + movies.actor_2_facebook_likes\n    + movies.actor_3_facebook_likes\n    + movies.director_facebook_likes\n)\nprint(type(total))\ntotal.head() ## Has missing numbers: NaN","ad3ba910":"movies.assign(total_likes=total) # this is one way of adding that Series to the DataFrame","482ef2b4":"cols = [\n    \"actor_1_facebook_likes\",\n    \"actor_2_facebook_likes\",\n    \"actor_3_facebook_likes\",\n    \"director_facebook_likes\"\n]\n\ndef print_type(obj):\n    print(type(obj)) # I did this to find out that movies.loc[:, cols] is a DataFrame\n    return obj\n\nsum_col = movies.loc[:, cols].pipe(print_type).sum(axis=\"columns\") # I could have just used movies.[cols] to select.\nsum_col.head()                                                     # the .sum() method ignores the missing number (NaN).\n                                                                   # .sum() converts NaN to 0.","c5a1ebc9":"movies.assign(total_likes=sum_col)","d223c4b6":"def sum_likes(df):\n    return df[\n        [ ## this is a good way of doing filtering ...\n            c\n            for c in df.columns\n            if \"like\" in c\n            and (\"actor\" in c or \"director\" in c)\n        ]\n    ].sum(axis=1)\n\nmovies.assign(total_likes=sum_likes) # passes `movies` as a parameter and returns a Series with the sum quantity, then append that Series to the DataFrame","dfddbc74":"(\n    movies.assign(total_likes=sum_col)[\"total_likes\"]\n    .isna()\n    .sum()\n)","e1bdfae8":"(\n    movies.assign(total_likes=total)[\"total_likes\"]\n    .isna()\n    .sum()\n)","5b2ec53f":"# We could have filled in the missing values as well...\n(\n    movies.assign(total_likes=total.fillna(0))[\"total_likes\"]\n    .isna()\n    .sum()\n)","840825ae":"def cast_like_gt_actor(df):\n    return (\n        df[\"cast_total_facebook_likes\"]\n        >= df[\"total_likes\"]\n    )\n\ndf2 = movies.assign(\n    total_likes = total,\n    is_cast_likes_more=cast_like_gt_actor,\n)\ndf2","25f8b017":"# Checking if all elements of the `is_cast_likes_more` column is True\ndf2[\"is_cast_likes_more\"].all()","2a992386":"df2 = df2.drop(columns=\"total_likes\")\ndf2","442fff88":"# creating a Series of just total actor likes:\nactor_sum = movies[\n    [ ## filtering the columns\n        c\n        for c in movies.columns\n        if \"actor_\" in c and \"_likes\" in c\n    ]\n].sum(axis=\"columns\")\nactor_sum.head()","dc47f531":"print((movies[\"cast_total_facebook_likes\"] >= actor_sum).all())\nmovies[\"cast_total_facebook_likes\"] >= actor_sum","5377aefd":"print(movies[\"cast_total_facebook_likes\"].ge(actor_sum).all())\nmovies[\"cast_total_facebook_likes\"].ge(actor_sum)","825e45db":"pct_like = (\n    actor_sum\n    .div(movies[\"cast_total_facebook_likes\"])\n    .mul(100)\n)\npct_like.describe()","699c1049":"pd.Series(\n    pct_like.to_numpy(), index=movies[\"movie_title\"]\n).head()","521fae81":"gross_index = movies.columns.get_loc(\"gross\")\nprofit_index = gross_index + 1\nprofit_index","848716d2":"movies.insert( # the insert method modifies the original DataFrame, so there wont be a assignment statement.\n    loc=profit_index,\n    column=\"profit\",\n    value=movies[\"gross\"] - movies[\"budget\"]\n)\nmovies","c757d320":"del movies[\"director_name\"]","9678f96a":"# and to see that `director_names` has been deleted\nmovies","69e8bdc5":"print(\"Control: !#!413dsdasdf\")","1056f6c9":"`.min()`, `max()`, `mean()`, `.median()` and `std()`:","47df0a01":"Each operator has an equivalent method(`.add()`, `.sub()`, `.mul()`, `.div()`, `.florrdiv()`, `.mod()`, `.pow()` and `.lt()`, `.gt()`, `.le()`, `.ge()`, `.eq()`, `.ne()`), for example:","008190e8":"... or use the `.assign()` method to create a new column:","84a86d34":"... another way ...","a6b1cc1a":".. We can change the index also..","5591e9a5":"The other basic arithmetic operators, minus (-), multiplication (*), division (\/), and exponentiation (***) work similarly with scalar values.","dadc2f0f":"### 7 - Chaining Series Methods:","7815db2b":"Using `.drop()` method to delete the `total_likes` column:","67493b8a":"An alternative to deleting columns with the `.drop` method is to use the `del` statement. This\nalso does not return a new DataFrame, so favor `.drop` over this:","e65f0e0e":"Using `.insert()` and `.get_loc()`:","1243122b":"### 6 - Series Operations:","68d2decf":"`.count()`","7c6ee8f0":"... alternative way ...","e2be73f3":"We can also index off the `.loc`(by column name) and `.iloc`(by position) attributes to pull out a `Series`:","79cec008":"... or ...","6497bc60":"### 5 - Calling Series Methods:\nWe can use the built-in `dir()` function to uncover all the attributes and methods of a `Series`:","0cf38a04":"`.dropna()`:","d7590311":".... or just use `.describe()`:","87012979":"`.value_counts()`:","a6181d05":"### 9 - Creating and Deleting Columns:","30a25cdb":"\"There is another column in the dataset named `cast_total_facebook_likes`.\nIt would be interesting to see what percentage of this column comes from our newly\ncreated column, `total_likes`. Before we create our percentage column, let's do\nsome basic data validation. We will ensure that `cast_total_facebook_likes`\nis greater than or equal to `total_likes`:\"","1b57cc2a":"... or ...","76b1ad0e":"## Summary of my work on the 1st chapter of the book: \"Pandas 1.x Cookbook\" (Harrison & Petrou).\n### In this notebook I'll cover:\n1. Reading the dataset and storing it in a DataFrame;\n2. Acessing the 3 components of a DataFrame: index, columns and data;\n3. Understanding data types;\n4. Selecting a Column;\n5. Calling Series Methods;\n6. Series Operations;\n7. Chaining Series Methods;\n8. Renaming Column Names;\n9. Creating and Deleting Columns.","f627d3aa":"`.isna()`:","ec3b3ad7":"now chacking again...","fcf53d92":"#### Almost all pandas data types are built from NumPy","36ec78fd":"### 2 - Acessing the 3 components of a DataFrame: `index`, `columns` and `data`:","cf6f70ad":"`.size`, `.shape` and `.unique()`:","2277ce30":"`.quantile()`:","4b8a30fa":"But chaining can make it difficult to debug.. but I can chain like this:","6c4cd84b":"`fillna()`:","bfc716c2":"We can use the `.apply` method with the type function to get back a `Series` that has the type of every member. Rather than looking at the whole `Series` result, we will chain the `.unique` method onto the result, to look at just the unique types that are found in the `director_name` column:","8f9294f3":"`.hasnans`","176fdf37":"\"Finally, let's calculate the percentage of the `cast_total_facebook_likes` that come from `actor_sum`:\"","6cae22e1":"`.dtype`:","88d75793":"### 1 - Reading the dataset and storing it in a DataFrame:","2b70dad1":"... or I can use comprehensions:","9df076a4":"**it is possible to pass a function to the `.rename()` method:**","bce80e07":"adding up all columns that has facebook likes count:","80ee5ff6":"`.notna()`, which is the compliment of `.isna()`:","01dd43d9":"### 8 - Renaming Column Names:","0c6c73cc":"### 4 - Selecting a Column:\nSelecting a column returns a `Series`:","e8fd3f5f":"Checking how many missing values there are in both `total` and `sum_col`: `total` was built using the + operator, and `sum_col` was built using the `.sum()` DataFrame method.","fb3193c9":"... pulling the `index` and `columns` then putting in a `list`:","97c51375":"A common way to count the number of missing values:","47a76ed3":"`.head()` and `sample()`:","633042cd":"Another option for debugging a chain is to use the `.pipe()` method to show an intermediate valuee:","e0a3afb3":"### 3 - Understanding data types:","32569792":"... modifying them and putting them back to the DataFrame:","768506a3":"\"The index and the columns are closely related. Both of them are subclasses of `Index`. This allows me to perform similar operations on both the `index` and the `columns`\":","e8bb1e37":"**it is possible to pass a function to the `.assign()` method also:**"}}