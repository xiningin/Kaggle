{"cell_type":{"c64d0690":"code","f1c52081":"code","42627e1b":"code","25e45c34":"code","4b845256":"code","2f83edb9":"code","8a86c32e":"code","d1793aa7":"code","fc05d9a3":"code","30653db5":"code","319ad8af":"code","01b5897b":"code","e5a8ade7":"code","e929d836":"code","1f485a47":"code","66ef177c":"code","fd5a3564":"code","ebc7dcb0":"code","c3367fd1":"code","cbeb80a2":"code","4c5fd2ef":"code","1bf704f2":"code","f2e2bfec":"code","c184c8f2":"code","aef89a9b":"code","83d25f77":"code","ce3c47b0":"code","f458857e":"code","cdd2359d":"code","56429394":"code","7653f750":"code","e362e5c9":"code","8a2e8ed4":"code","a36d574e":"code","7e182476":"code","c4591453":"code","fc3bfe15":"code","015d51d6":"code","eaa3748f":"code","033909b6":"code","54e27172":"markdown","4f215fd2":"markdown","745640bc":"markdown","b1de2b6d":"markdown","731f43f3":"markdown","b8b7bb2e":"markdown","c85dc7e1":"markdown","128f90ad":"markdown","4b8a0a58":"markdown","153fc3c4":"markdown","e204089d":"markdown","cccf91a8":"markdown","8c64d8b5":"markdown","b07dd472":"markdown","7a429fb3":"markdown","647413c4":"markdown"},"source":{"c64d0690":"\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n\ndirectory = \"\/kaggle\/input\/airline-passenger-satisfaction\/\"\nfeature_tables = ['train.csv', 'test.csv']\n\ndf_train = directory + feature_tables[0]\ndf_test = directory + feature_tables[1]\n\n# Create dataframes\nprint(f'Reading csv from {df_train}...')\ndf = pd.read_csv(df_train)\nprint('...Complete')\n\nprint(f'Reading csv from {df_train}...')\ndf_test = pd.read_csv(df_test)\nprint('...Complete')","f1c52081":"\n\ndf.head(10)","42627e1b":"df=df.drop(columns=[\"Unnamed: 0\",\"id\",\"Arrival Delay in Minutes\"])\ndf_test=df_test.drop(columns=[\"Unnamed: 0\",\"id\",\"Arrival Delay in Minutes\"])","25e45c34":"df.info()\n","4b845256":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr())\n\nplt.show()","2f83edb9":"df.columns","8a86c32e":"for col in ['Gender', 'Customer Type','Type of Travel', 'Class','Inflight wifi service',\n       'Departure\/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness','satisfaction']:\n    df[col] = df[col].astype('category')","d1793aa7":"for col in ['Gender', 'Customer Type','Type of Travel', 'Class','Inflight wifi service',\n       'Departure\/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness','satisfaction']:\n    df_test[col] = df_test[col].astype('category')","fc05d9a3":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr())\n\nplt.show()","30653db5":"plt.hist(df[\"Flight Distance\"])\nplt.show()","319ad8af":"plt.hist(df[\"Departure Delay in Minutes\"])\nplt.show()","01b5897b":"def outlier_treatment(datacolumn):\n sorted(datacolumn)\n \n Q1,Q3 = np.percentile(datacolumn , [25,75])\n IQR = Q3 - Q1\n lower_range = Q1 - (3 * IQR)\n upper_range = Q3 + (3 * IQR)\n return (lower_range,upper_range)","e5a8ade7":"print(outlier_treatment(df['Departure Delay in Minutes']))\ndf[df['Departure Delay in Minutes']>48].count()","e929d836":"df['dep_delay'] = df['Departure Delay in Minutes'].apply(lambda x: 184 if x >184 else x)\ndf_test['dep_delay'] = df_test['Departure Delay in Minutes'].apply(lambda x: 184 if x >184 else x)","1f485a47":"df['Flight_Distance'] = df['Flight Distance'].apply(lambda x: 3888 if x >3888 else x)\ndf_test['Flight_Distance'] = df_test['Flight Distance'].apply(lambda x: 3888 if x >3888 else x)","66ef177c":"df.columns","fd5a3564":"df=df.drop(columns=[\"Flight Distance\"])\ndf_test=df_test.drop(columns=[\"Flight Distance\"])","ebc7dcb0":"data_bs=df[\"Departure Delay in Minutes\"].to_numpy()\ndata_bs","c3367fd1":"def bootstrap_sample(amounts):\n    return np.random.choice(amounts, len(amounts), replace=True)\n\ndef percentile_99(sample):\n     return np.percentile(sample, 99)\n\ndef bootstrap_confidence_interval(data):\n    \"\"\"\n    Creates list of 10000 99th percentile bootstrap replicates. \n    \"\"\"\n    bs_samples = np.empty(10000)\n    \n    for i in range(10000):\n        bs_samples[i] = percentile_99(bootstrap_sample(data_bs))\n\n    return bs_samples\n\ntransactions_ci = bootstrap_confidence_interval(data_bs)","cbeb80a2":"plt.hist(transactions_ci)\nplt.show()","4c5fd2ef":"\nprint(np.percentile(transactions_ci, 95))","1bf704f2":"\ndf=pd.get_dummies(df,columns=[\"Gender\",\"Customer Type\",\"Type of Travel\",\"Class\",\"satisfaction\"],drop_first=True)","f2e2bfec":"\ndf_test=pd.get_dummies(df_test,columns=[\"Gender\",\"Customer Type\",\"Type of Travel\",\"Class\",\"satisfaction\"],drop_first=True)","c184c8f2":"df['Class_Eco Plus'] = df['Class_Eco Plus'].apply(lambda x: 2 if x==1 else x)","aef89a9b":"df_test['Class_Eco Plus'] = df_test['Class_Eco Plus'].apply(lambda x: 2 if x==1 else x)","83d25f77":"df[\"class\"]=df['Class_Eco Plus']  + df['Class_Eco']","ce3c47b0":"df_test[\"class\"]=df_test['Class_Eco Plus']  + df_test['Class_Eco']","f458857e":"df=df.drop(columns=[\"Class_Eco\",\"Class_Eco Plus\",\"Departure Delay in Minutes\"])\ndf_test=df_test.drop(columns=[\"Class_Eco\",\"Class_Eco Plus\",\"Departure Delay in Minutes\"])","cdd2359d":"y=df[\"satisfaction_satisfied\"]\nx=df.drop(columns=[\"satisfaction_satisfied\"])","56429394":"y_test=df_test[\"satisfaction_satisfied\"]\nx_test=df_test.drop(columns=[\"satisfaction_satisfied\"])","7653f750":"from sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\n\ndtc=DecisionTreeClassifier(random_state=0)\ndtc.fit(x,y)\n","e362e5c9":"y_pred=dtc.predict(x_test)","8a2e8ed4":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_test,y_pred)","a36d574e":"feature_imp=pd.Series(dtc.feature_importances_,index=x.columns)\nfeature_imp.sort_values(ascending=False,inplace=True)\nfeature_imp.plot(kind='barh')\n","7e182476":"dtc_reduced=DecisionTreeClassifier(min_samples_leaf = 20)","c4591453":"x_reduced=x[[\"Online boarding\",\"Inflight wifi service\",\"Type of Travel_Personal Travel\"]]\ndtc_reduced.fit(x_reduced,y)\nx_test_reduced=x_test[[\"Online boarding\",\"Inflight wifi service\",\"Type of Travel_Personal Travel\"]]\n\ny_pred_red=dtc_reduced.predict(x_test_reduced)\naccuracy_score(y_test,y_pred_red)","fc3bfe15":"from sklearn.metrics import roc_auc_score , roc_curve\ndtc_proba=dtc.predict_proba(x_test)\ndtc_proba=dtc_proba[:,1]\nauc=roc_auc_score(y_test, dtc_proba)\nprint('Desicion Tree: ROC AUC=%.3f' % (auc))\nlr_fpr, lr_tpr, _ = roc_curve(y_test, dtc_proba)\nplt.plot(lr_fpr, lr_tpr, marker='.', label='Desicion Tree')\n# axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show()","015d51d6":"import warnings\nfrom sklearn import model_selection\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier , GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\n\n\nwarnings.filterwarnings(\"ignore\")\nmodels = []\nmodels.append(('LR', LogisticRegression()))\nmodels.append(('KNN', KNeighborsClassifier()))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('LGB', LGBMClassifier()))\n#XGB doesnt work with categorical variables.\n#models.append(('XGB', XGBClassifier()))","eaa3748f":"# evaluate each model in turn\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = model_selection.KFold(n_splits=10)\n    cv_results = model_selection.cross_val_score(model, x, y, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","033909b6":"from sklearn.metrics import roc_auc_score , roc_curve\n\nfor name, model in models:\n   \n    model.fit(x,y)\n    y_pred=model.predict(x_test)\n    y_proba=model.predict_proba(x_test)\n    y_proba=y_proba[:,1]\n    auc=roc_auc_score(y_test, y_proba)\n    print('%s: ROC AUC=%.3f' % (name,auc))\n    lr_fpr, lr_tpr, _ = roc_curve(y_test, y_proba)\n    plt.plot(lr_fpr, lr_tpr, marker='.', label=name)\n    acc_score=accuracy_score(y_test,y_pred)\n    msg = \"%s:Accuracy: %f \" % (name, acc_score)\n    print(msg)\n# axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# show the legend\nplt.legend()\n# show the plot\nplt.show()    ","54e27172":"## Lets try modeling with other classification algorithms ans see which is best.","4f215fd2":"## We dont have any null values in dataframe.","745640bc":"## Only correlation with non-categorical values shown below.","b1de2b6d":"## The columns below consist of categorical values so we change them into categories.","731f43f3":"## \"Flight Distance\" and \"Departure Delay in Minutes\" are not normal distributed as seen in below figure. \n","b8b7bb2e":"## DATA CLEANING:\n## We dont need id and Unnamed:0 columns. Also, since \"Arrival Delay in Minutes\" is 0.94 correlated with \"Departure Delay in Minutes\" and there are nan values in \"Arrival Delay in Minutes\" we dropped it too.","c85dc7e1":"## If we work with only best three features we still get 0.89 accuracy score. But it works a lot faster.","128f90ad":"## The IQR method says upper range for Dep_delay is 48 and there are 9318 values more than that which is 20 percent of out data.\n## IQR method for outlier detection is used only in normal distributed data.\n## So we will use bootstrapping. Check out this link for more detail about bootstrapping.\n## more detail:\"https:\/\/www.suplari.com\/calculating-outliers-spend-data-bootstrapping\/\"","4b8a0a58":"## Ploting ROC curves for different algorithms.\n## We see that LGB is the best classifier for this data. ROC AUC is 0.995 and accuracy score is 0.9645 for LGB.","153fc3c4":"## DETAILED CODE ABOUT BOOTSTRAPPING","e204089d":"## Using bootstrapping we get upper range of 184 for dep_delay and 3888 for Flight_Distance","cccf91a8":"## Lets draw ROC Curve and check Area Under Curve","8c64d8b5":"## MODELING PART:","b07dd472":"## It seems Online Boarding and Inflight Wifi Service is the most important features.","7a429fb3":"## The machine algorithms that we use works with integers not strings. Thats why we used get_dummies function.","647413c4":"## OUTLIER DETECTION"}}