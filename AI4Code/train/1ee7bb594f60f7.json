{"cell_type":{"b705d0bf":"code","1e5a5c8b":"code","0f82fc7d":"code","73189f92":"code","70abaaf4":"code","df3ceff5":"code","806f56cd":"code","6d51a216":"code","e543a7da":"code","61a88f43":"code","bc296bb0":"code","5b3db218":"code","11a5d962":"code","560531d7":"code","061175a9":"code","fff3bed2":"code","9bd15d75":"code","c0073ddf":"code","0af2c2b6":"code","d34fab61":"code","214fb9d5":"code","cd521fbd":"code","e7fdbf0b":"code","d365d468":"code","abe49a21":"code","54253ae6":"code","a4e13467":"code","ce0fe629":"code","3103cdba":"code","633f2290":"code","c8022281":"code","939d72ac":"code","f0af77f7":"code","cc236f29":"code","4df125d2":"code","be58c1ed":"code","d4b316a4":"code","20549f3c":"code","c5adff90":"code","faf8af58":"code","d2da9b35":"code","11060737":"code","89712f5e":"code","a099f623":"code","d046adf8":"code","442851ab":"code","4e89b9f1":"code","0c619d59":"markdown","4ff8b80a":"markdown","3d4ad83d":"markdown","db49bc62":"markdown","bf0b197a":"markdown","634d0eae":"markdown","b5ab4d08":"markdown"},"source":{"b705d0bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1e5a5c8b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os","0f82fc7d":"data = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv',index_col='Date',parse_dates=True)","73189f92":"#feeling the missing values\ndata = data.fillna(value='empty')","70abaaf4":"data.head()","df3ceff5":"data['state_with_country'] = data['Province_State'] +'_'+ data['Country_Region']","806f56cd":"data= data.drop(labels=['Province_State','Country_Region','Id'],axis=1)","6d51a216":"data.tail()","e543a7da":"state_with_country_name = list(data['state_with_country'].unique())","61a88f43":"state_with_country_name[0:10]\n","bc296bb0":"#just feeling list for further use\nstate_i_data =[]\nfor i in state_with_country_name:\n    state_i_data.append(i)\n","5b3db218":"for i,j in enumerate(state_with_country_name):\n     state_i_data[i] = data[data['state_with_country'] == j ]\n     state_i_data[i] = state_i_data[i].drop(['state_with_country'],axis=1)\n     ","11a5d962":"state_i_data[0].shape","560531d7":"prev_sub = pd.read_csv('\/kaggle\/input\/covid19-forecasting-using-rnn\/submission.csv')\ntest_whole = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv',index_col='Date',parse_dates=True)\ntest_whole = test_whole.fillna(value='empty')\n#adding test set because both test and submission has same shape so we taking test index for prev_sub","061175a9":"test_whole['state_with_country'] = test_whole['Province_State'] +'_'+ test_whole['Country_Region']\ntest_whole.head()","fff3bed2":"prev_sub.index = test_whole.index","9bd15d75":"prev_sub['state_with_country'] = test_whole['state_with_country']","c0073ddf":"prev_sub.tail()","0af2c2b6":"forecast = []\n\nfor i in state_with_country_name:\n    forecast.append(i)","d34fab61":"for i,j in enumerate(state_with_country_name):\n     forecast[i] = prev_sub[prev_sub['state_with_country'] == j ]\n     forecast[i] =  forecast[i].iloc[13:21]\n     forecast[i] = forecast[i].drop(['ForecastId','state_with_country'],axis=1)\n     state_i_data[i] = state_i_data[i].append(forecast[i])","214fb9d5":"forecast[293]","cd521fbd":"state_i_data[0].tail(10)","e7fdbf0b":"test_whole = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv',index_col='Date',parse_dates=True)\ntest_whole = test_whole.fillna(value='empty')","d365d468":"test_whole.head()","abe49a21":"test_whole['state_with_country'] = test_whole['Province_State'] +'_'+ test_whole['Country_Region']\ntest_whole.head()","54253ae6":"state_with_country_name_for_test = list(test_whole['state_with_country'].unique())\nstate_with_country_name_for_test[:10]","a4e13467":"state_i_data_for_test=[]\nfor i in state_with_country_name_for_test:\n\n    state_i_data_for_test.append(i)\n","ce0fe629":"#we already have data till 31th march and previous predicted till 8 april\n\nfor i,j in enumerate(state_with_country_name_for_test):\n     state_i_data_for_test[i] = test_whole[test_whole['state_with_country'] == j ]\n     state_i_data_for_test[i] = state_i_data_for_test[i].iloc[21:]   \n     state_i_data_for_test[i] = state_i_data_for_test[i].drop(['ForecastId','state_with_country','Province_State','Country_Region'],axis=1)\n     state_i_data_for_test.append(state_i_data_for_test[i])","3103cdba":"#state_i_data_for_test[45]","633f2290":"from sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,LSTM\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator","c8022281":"result = []\nfull_scaler = MinMaxScaler()","939d72ac":"len(state_with_country_name)","f0af77f7":"for i in range(len(state_with_country_name_for_test)):\n    scaled_full_data = full_scaler.fit_transform(state_i_data[i])\n    length = 1 # Length of the output sequences (in number of timesteps)\n    batch_size = 1\n    generator = TimeseriesGenerator(scaled_full_data, scaled_full_data, length=length, batch_size=1)\n    \n    # define model\n    model = Sequential()\n\n    # Simple RNN layer\n    model.add(LSTM(96,input_shape=(length,scaled_full_data.shape[1])))\n\n    # Final Prediction (one neuron per feature)\n    model.add(Dense(scaled_full_data.shape[1]))\n\n    model.compile(optimizer='adam', loss='mse')\n    \n    model.fit_generator(generator,epochs=6)\n    \n    \n    n_features = scaled_full_data.shape[1]\n    test_predictions = []\n\n    first_eval_batch = scaled_full_data[-length:]\n    current_batch = first_eval_batch.reshape((1, length, n_features))\n\n    for j in range(len(state_i_data_for_test[i])):\n    \n        # get prediction 1 time stamp ahead ([0] is for grabbing just the number instead of [array])\n        current_pred = model.predict(current_batch)[0]\n    \n        # store prediction\n        test_predictions.append(current_pred) \n    \n        # update batch to now include prediction and drop first value\n        current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)\n    \n    \n    true_predictions = full_scaler.inverse_transform(test_predictions)\n    true_predictions = true_predictions.round()\n    \n    true_predictions = pd.DataFrame(data=true_predictions,columns=state_i_data[1].columns)\n    result.append(true_predictions)\n    \n    print('count:-',i)\n    \n    \n    \n    \n    ","cc236f29":"#you can see prediction goes constant after some days\nprint('Plot of '+str(state_with_country_name[85]))\nresult[85].plot(figsize=(12,8))","4df125d2":"print('Plot of '+str(state_with_country_name[134]))\nresult[134].plot(figsize=(12,8))","be58c1ed":"state_i_data[0].iloc[-21:]","d4b316a4":"prediction = pd.DataFrame(data= state_i_data[0].iloc[-21:] ,columns=['ConfirmedCases','Fatalities'])\nprediction = prediction.append(result[0])","20549f3c":"for i in range(1,len(result)):\n    prediction = prediction.append(state_i_data[i].iloc[-21:])\n    prediction = prediction.append(result[i])","c5adff90":"len(prediction)","faf8af58":"prediction.index = range(0,len(prediction))","d2da9b35":"prediction.head()","11060737":"prediction.tail()","89712f5e":"sub_format = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/submission.csv')","a099f623":"sub_format = sub_format['ForecastId']","d046adf8":"final = pd.concat([sub_format,prediction],axis=1)","442851ab":"final.head()","4e89b9f1":"final.to_csv('submission.csv',index=False)","0c619d59":"# Data preparation for Test","4ff8b80a":"# Data preparation for training","3d4ad83d":"# Description\n\n* This is Version 2 of my Notebook \"covid19_forecasting_using_RNN\".\n* In previous notebook we have facing problem of getting constant prediction after some days.\n* In this notebook we will try to overcome that problem\n* What we will do in this notebook?\n\n    1.  we have submission file of version 1. \n    2.  Includinng previous submission file to our dataset\n    3.  we use the prediction of 1 april to 8 april for training of our model.\n    4.  predict for remaining test data.\n","db49bc62":"# Creating Traing loop for all individual states and Countries","bf0b197a":"# Forecast data adding to Train data","634d0eae":"# Visulization of prediction","b5ab4d08":"# Creating Submission File"}}