{"cell_type":{"bed21371":"code","92019c96":"code","3dba01b1":"code","44e7701e":"code","01edde3d":"code","f2180d67":"code","b0eb5b6d":"code","8f4f81fc":"code","46073a81":"code","3485d3f9":"code","63efc88d":"code","91e4d6b2":"code","d27cf778":"code","9d8f484e":"code","cd3ccbba":"code","a7b8bc33":"code","34d1e187":"code","a25d05c6":"code","5b5faadc":"code","2956850a":"code","4fa86f1c":"code","d35fde4d":"code","5a189b88":"code","638b9039":"code","abea6513":"markdown","fb3e2c32":"markdown","329cccdd":"markdown","7c75c5f9":"markdown","09f9b164":"markdown","3fffd159":"markdown","13bf57dd":"markdown","23b8339c":"markdown","5d9bb64b":"markdown","378bcfe7":"markdown","ed7ea79b":"markdown","64b934c8":"markdown","b84b48b1":"markdown","484c0ee2":"markdown","237bcd93":"markdown"},"source":{"bed21371":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","92019c96":"dataPath = \"\/kaggle\/input\/m5-forecasting-accuracy\/\"\ntimesteps = 14\nstartDay = 350","3dba01b1":"dt = pd.read_csv(dataPath + \"\/sales_train_evaluation.csv\")\ndt.head(3)\n","44e7701e":"print(dt.info())","01edde3d":"#To reduce memory usage\ndef downcast_dtypes(df):\n    float_cols = [c for c in df if df[c].dtype == \"float64\"]\n    int_cols = [c for c in df if df[c].dtype in [\"int64\", \"int32\"]]\n    df[float_cols] = df[float_cols].astype(np.float32)\n    df[int_cols] = df[int_cols].astype(np.int16)\n    return df","f2180d67":"#Reduce memory usage and compare with the previous one to be sure\ndt = downcast_dtypes(dt)","b0eb5b6d":"print(dt.info())","8f4f81fc":"#Take the transpose so that we have one day for each row, and 30490 items' sales as columns\ndt = dt.T    \ndt.head(8)","46073a81":"#Remove id, item_id, dept_id, cat_id, store_id, state_id columns\ndt = dt[6 + startDay:]\ndt.head(5)","3485d3f9":"calendar = pd.read_csv(dataPath + \"\/calendar.csv\")\n","63efc88d":"#Create dataframe with zeros for 1969 days in the calendar\ndaysBeforeEvent = pd.DataFrame(np.zeros((1969,1)))\n","91e4d6b2":"# \"1\" is assigned to the days before the event_name_1. Since \"event_name_2\" is rare, it was not added.\nfor x,y in calendar.iterrows():\n    if((pd.isnull(calendar[\"event_name_1\"][x])) == False):\n           daysBeforeEvent[0][x-1] = 1 \n            #if first day was an event this row will cause an exception because \"x-1\".\n            #Since it is not i did not consider for now.\n\n   ","d27cf778":"#\"daysBeforeEventTest\" will be used as input for predicting (We will forecast the days 1913-1941)\ndaysBeforeEventTest = daysBeforeEvent[1941:1969]\n#\"daysBeforeEvent\" will be used for training as a feature.\ndaysBeforeEvent = daysBeforeEvent[startDay:1941]\n\n","9d8f484e":"#Before concatanation with our main data \"dt\", indexes are made same and column name is changed to \"oneDayBeforeEvent\"\ndaysBeforeEvent.columns = [\"oneDayBeforeEvent\"]\ndaysBeforeEvent.index = dt.index\n\n","cd3ccbba":"dt = pd.concat([dt, daysBeforeEvent], axis = 1)\n\ndt.columns","a7b8bc33":"#Feature Scaling\n#Scale the features using min-max scaler in range 0-1\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ndt_scaled = sc.fit_transform(dt)","34d1e187":"X_train = []\ny_train = []\nfor i in range(timesteps, 1941 - startDay):\n    X_train.append(dt_scaled[i-timesteps:i])\n    y_train.append(dt_scaled[i][0:30490]) \n    #\u0130mportant!! if extra features are added (like oneDayBeforeEvent) \n    #use only sales values for predictions (we only predict sales) \n    #this is why 0:30490 columns are choosen","a25d05c6":"del dt_scaled\n","5b5faadc":"#Convert to np array to be able to feed the LSTM model\nX_train = np.array(X_train)\ny_train = np.array(y_train)\nprint(X_train.shape)\nprint(y_train.shape)","2956850a":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nlayer_1_units=50\nregressor.add(LSTM(units = layer_1_units, return_sequences = False,\n                   input_shape = (X_train.shape[1], X_train.shape[2])))\nregressor.add(Dropout(0.2))\n\n# # Adding a third LSTM layer and some Dropout regularisation\n# layer_3_units=400\n# regressor.add(LSTM(units = layer_3_units, return_sequences = True))\n# regressor.add(Dropout(0.2))\n\n# # Adding a third LSTM layer and some Dropout regularisation\n# layer_3_units=400\n# regressor.add(LSTM(units = layer_3_units))\n# regressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = 30490))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nepoch_no=32\nbatch_size_RNN=44\nregressor.fit(X_train, y_train, epochs = epoch_no, batch_size = batch_size_RNN)\n\n","4fa86f1c":"inputs= dt[-timesteps:]\ninputs = sc.transform(inputs)","d35fde4d":"X_test = []\nX_test.append(inputs[0:timesteps])\nX_test = np.array(X_test)\npredictions = []\n\nfor j in range(timesteps,timesteps + 28):\n#X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n    predicted_stock_price = regressor.predict(X_test[0,j - timesteps:j].reshape(1, timesteps, 30491))\n    testInput = np.column_stack((np.array(predicted_stock_price), daysBeforeEventTest[0][1941 + j - timesteps]))\n    X_test = np.append(X_test, testInput).reshape(1,j + 1,30491)\n    predicted_stock_price = sc.inverse_transform(testInput)[:,0:30490]\n    predictions.append(predicted_stock_price)","5a189b88":"import time\n\nsubmission = pd.DataFrame(data=np.array(predictions).reshape(28,30490))\n\nsubmission = submission.T\n    \nsubmission = pd.concat((submission, submission), ignore_index=True)\n\nsample_submission = pd.read_csv(dataPath + \"\/sample_submission.csv\")\n    \nidColumn = sample_submission[[\"id\"]]\n    \nsubmission[[\"id\"]] = idColumn  \n\ncols = list(submission.columns)\ncols = cols[-1:] + cols[:-1]\nsubmission = submission[cols]\n\ncolsdeneme = [\"id\"] + [f\"F{i}\" for i in range (1,29)]\n\nsubmission.columns = colsdeneme\n\ncurrentDateTime = time.strftime(\"%d%m%Y_%H%M%S\")\n\nsubmission.to_csv(\"submission.csv\", index=False)\n","638b9039":"submission.head()","abea6513":"* The shape of the data is not exactly what we want.\n* We want to have each day as row and 30490 items' sales as columns (features)\n* Therefore take the transpose of \"dt\"","fb3e2c32":"# Submission File Creation\n* Here, the submission file creation is done.","329cccdd":"# LSTM Model with Keras","7c75c5f9":"# Data Prepration for LSTM\n\n* In this notebook LSTM is used for forecasting future sales. \n* The type of the LSTM can be regarded as Multivariate and Multiple Input Series (Multi-step is not used).\n* The model is trained using past sales values for each 30490 item and a feature which represents if there exists an event at the following day.  \n* For this notebook \"sales of past 14 days and event feature\" are used for predicting 15th day sales. Past days is a parameter which can be set to see the effect. ","09f9b164":"* Below timesteps is set to 14 to use past 14 days' sales.\n* Since there are lots of zero values in first days, \"startDay\" parameter can be used ignore unwanted days from the beginning.","3fffd159":"Creation of X_train and y_train\n![resim.png](attachment:resim.png)","13bf57dd":"* Now, \"1\" is assigned the day before an event exist. Other days will remain as \"0\".","23b8339c":"* Take last days, 14 for this notebook (\"timestep\" parameter) in order to predict firts unknown day's sales.\n* Before using values for prediction, again use min-max transformation","5d9bb64b":"* Remove the first six  colums id, item_id, dept_id, cat_id, store_id, state_id columns, to end up only days as rows","378bcfe7":"* Here a dataframe is created to store the knowledge if an event exist in the next day\n* Firstly, fill with zeros the dataframe","ed7ea79b":"* Here is the important part. \"X_train\" and \"y_train\" data is created. For each X_train item, 14 past days' sales and 14 daysBeforeEvent feature are included. So one element of X_train's shape is (14, 30491). For y_train we are predicting one day sales of 30490 items therefore one element of y_train's shape is (1, 30490)","64b934c8":"# Future Improvements\n* Here only sales of past days and oneDayBeforeEvent feature are used for prediction. More feature can be added.\n    * Maybe, lag features, sell prices can be included. But including those features for each item can increase the column size from 30491 to 60981 maybe more. Any ideas for feature addition are very welcome. I could not find a proper way to add those kind of features.\n* Data preprocessing may be applied. There are lots of zero values especially in the first year. But I could not find a way how to deal with them. In addition, outliers can be handled if any, especially if sell prices data is used.\n* Multi-step LSTM can be used for prediction of more than one day (for example 28 days at once or 14 days, 7 days, 2 days etc.)\n* Choosing correct neuron sizes, batch size and layer size can be achieved.\n* Each run can create different results. I did not add seed value but may be this can be added. I have wanted to see how much the result differs\n* You can share any ideas for improvement as a comment, we can discuss more detail","b84b48b1":"* Concatenate \"daysBeforeEvent\" feature with our main dataframe \"dt\"","484c0ee2":"* Here is again an important part. \n* We are using last 14 days in order to predict day 1915 sales.\n* In order to predict 1916th day, 13 days from our input data and 1 day from our prediction are used. After that we slide the window one by one.\n    * 12 days from input data + 2 days from our prediction to predict 1917th day\n    * 11 days from input data + 3 days from our prediction to predict 1918th day\n    * .....\n    * 14 days our prediction to predict last 1941th day sales.","237bcd93":"![resim.png](attachment:resim.png)"}}