{"cell_type":{"c76a2976":"code","12c23c7d":"code","46e7276e":"code","06a1256e":"code","e27c87bd":"code","11fe2848":"code","b79f9eb9":"code","af1badb0":"code","359210e0":"code","35a25261":"code","e2dbf7ce":"code","8cc38389":"code","9c9e5738":"code","b15c4632":"code","d6b16c66":"code","2ad73bf1":"code","02774da0":"code","2c2f553f":"code","5363bba1":"markdown"},"source":{"c76a2976":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12c23c7d":"# Importing the Packages\nimport plotly.express as px\nimport json  # python integrated package\n#import dash\n#import dash_html_components as html\nimport pandas as pd\n#import dash_table\n#import dash_core_components as dcc\n#from dash.dependencies import Input, Output\nfrom collections import OrderedDict \n\n\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport time\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression","46e7276e":"# The first thing read the transformed Data\n# please see my github page https:\/\/github.com\/falcant\/Covid19Peru\/tree\/master\/c19peru2\n# and feel free to use the dl.py file for more details about Data Extraction\/Preparation\n\n# 3 of these 4 files were Prepared using the \"dl.py\" script.\n\n# This one is a breakdown of active cases by Department and date.\n\nActiveDeptdf = pd.read_csv('..\/input\/coviddataset\/ActivebyDept_with_Date.csv')\nActiveDeptdf.head()","06a1256e":"# This next one is a breakdown of deaths by Department and date.\nDeadDeptdf = pd.read_csv('..\/input\/coviddataset\/Deaths_byDept_with_date.csv')\nDeadDeptdf.head()","e27c87bd":"# Active Cases\/Deaths by Department (This dataset will be used in our Choropleth Map)\n\nDeptdf = pd.read_csv('..\/input\/coviddataset\/CasesbyDepartment.csv')\nDeptdf.head()","11fe2848":"# Peru is divided into 3 geographical locations; The Coast (Costa), The Highlands (La Sierra),\n# and The Jungle (La Selva)\n\n# What I did here was to do a breakdown of the Departments by Geographical region.\n# I also added the population for each Department\n\nDept_Popualtion_Geo = pd.read_csv('..\/input\/coviddataset\/Geo_Location_Population.csv')\nDept_Popualtion_Geo.head()","b79f9eb9":"# I want to see the population in the first 2 Datasets, so I am Mergin them with the Geo_LOcation_file\n\n# Notice I am reusing the variables\n\n# for Active\n\nActiveDeptdf = pd.merge(ActiveDeptdf, Dept_Popualtion_Geo, how='inner', on='Department')\n\nActiveDeptdf.head()\n\n","af1badb0":"# For Deaths\nDeadDeptdf = pd.merge(DeadDeptdf, Dept_Popualtion_Geo, how='inner', on='Department')\nDeadDeptdf.head()","359210e0":"# I want to create an animated plot to see how do numbers look in terms of active\/deaths\n# so I will use this as my parameters\n\nimport datetime\ntoday = datetime.date.today()\nlast3Months = today - pd.offsets.MonthBegin(3)\nlast3Months =  last3Months.strftime(\"%Y-%m\")","35a25261":"# creating a subset for the last 3 months and adding a \"cumulative\" for Active and Death\nActiveDeptdfL3 = ActiveDeptdf[ActiveDeptdf['Date']>=last3Months]\nActiveDeptdfL3['Cumulative'] = ActiveDeptdfL3.groupby(['Department'])['Active Cases'].apply(lambda x: x.cumsum())\n\nDeadDeptdfL3 = DeadDeptdf[DeadDeptdf['Date']>=last3Months]\nDeadDeptdfL3['Cumulative'] = DeadDeptdfL3.groupby(['Department'])['Deaths'].apply(lambda x: x.cumsum())","e2dbf7ce":"# Combining LIMA and LIMA REGION into one\n# NOTE : The \"Ministerio de Salud\" (MINSA) in Peru had \"LIMA REGION\" and \"LIMA\"(the capital) in separate rows.\n# I combined these 2 to make sure I have the values of the Department of Lima alone.\n# sum of the 2 values LIMA + LIMA REGION\nLIMA_DEPT = Deptdf[ (Deptdf['Department'] =='LIMA') | (Deptdf['Department'] =='LIMA REGION') ][['Active Cases','Deaths']].sum()\n# Dropping LIMA and LIMA REGION from Deptdf\n\nDeptdf.drop([14,15],axis = 0, inplace = True)\n\n#Adding a the sum of LIMA and LIMA REGION to Dept\nDeptdf.loc[len(Deptdf.index)] = ['LIMA', LIMA_DEPT[0], LIMA_DEPT[1]]\n","8cc38389":"# For presentation purposes, These Bar plots will only show the Department of Lima\n# These 2 bar plots will contain a Linear Regressor model that I added using scikit learn\n\nvariable = \"LIMA\" # this is to filter LIMA\n\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n\n\n# Data prep for Active regressor\nAdf = ActiveDeptdf[ActiveDeptdf['Department']==variable]\nAX = Adf.reset_index(drop=True).index\nAy = Adf['Active Cases']\n\n\n# regression for Active\n\nAreg = LinearRegression().fit(np.vstack(AX), Ay)\nAdf['Best Fit'] = Areg.predict(np.vstack(AX))\n\n\n#################################\n# Data prep for Deaths Regressor\n\nDdf = DeadDeptdf[DeadDeptdf['Department']==variable]\nDX = Ddf.reset_index(drop=True).index\nDy = Ddf['Deaths']\n\n# regression for Deaths\n\nDreg = LinearRegression().fit(np.vstack(DX), Dy)\nDdf['Best Fit'] = Dreg.predict(np.vstack(DX))\n\n\n\n","9c9e5738":"# These are the Colors I used for all the plots\ncolors = {\n    'background': '#111111',\n    'text': '#7FDBFF'\n}","b15c4632":"# BAR PLOT THAT SHOWS THE NUMBER OF ACTIVE CASES \/ DEATHS IN LIMA\n\n# This was done using Plotly graph_objects\n\nActiveDeptChoose = ActiveDeptdf[ActiveDeptdf['Department']==variable]\nDeadDeptChoose= DeadDeptdf[DeadDeptdf[\"Department\"]==variable]\nfig = make_subplots(rows=2, cols=1, subplot_titles=(\"Active Cases\",\"Deaths\"))\n\nfig.add_trace(\n    go.Bar(x=ActiveDeptChoose['Date'], y=ActiveDeptChoose['Active Cases']),\n    row=1, col=1\n)\nfig.add_trace(go.Scatter(name = 'Line of Best Fit', x=ActiveDeptdf[ActiveDeptdf['Department']==variable]['Date'], \n                         y=Adf['Best Fit'], mode='lines'),row=1,col=1\n)\n\nfig.add_trace(\n    go.Bar(x=DeadDeptChoose['Date'], y=DeadDeptChoose['Deaths']),\n    row=2, col=1\n)\n\nfig.add_trace(go.Scatter(name = 'Line of Best Fit', x=DeadDeptdf[DeadDeptdf['Department']==variable]['Date'], \n                         y=Ddf['Best Fit'], mode='lines'),row=2,col=1\n)\n\nfig.update_layout(height=500, width=700,showlegend = False,\n                  plot_bgcolor=colors['background'],\n                     paper_bgcolor=colors['background'],\n                     font_color=colors['text'])\nfig.update_xaxes(\n    dtick=\"M1\",\n    tickformat=\"%b\\n%Y\",\n    showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.show()","d6b16c66":"# Using a Geojson map of Peru to see a number of cases by Department\n# A big Thanks to Juan Eladio S\u00e1nchez Rosas for the file!!\n\n#His  github: \n#https:\/\/github.com\/juaneladio\/peru-geojson\n\nimport json\nwith open('..\/input\/coviddataset\/peru_departamental_simple.geojson') as response:\n    peru_department = json.load(response)","2ad73bf1":"# CREATION OF THE CHOROPLETH MAP\n# USING THE SAME COLORS AS THE PREVIOUS \n\nfig2 = px.choropleth_mapbox(Deptdf, geojson=peru_department, \n                            color=Deptdf[\"Active Cases\"],\n                           locations=Deptdf[\"Department\"], featureidkey=\"properties.NOMBDEP\",\n                           center={\"lat\": -10.151093, \"lon\": -75.311132},range_color= (0,10000),\n                           mapbox_style= \"carto-positron\",\n                           color_continuous_scale=[\"green\",\"yellow\",\"red\"],\n                           opacity= 0.4,\n                           hover_data= [\"Active Cases\",\"Deaths\"]\n                            ,zoom=3.89)\n\n\nfig2.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, title_text = 'COVID-19 en el Peru',\n                  hoverlabel=dict(\n        bgcolor=\"#111111\", \n        font_size=16, \n        font_family=\"ComicSand\",\n        font_color = '#7FDBFF'\n    ),\n                   \n    plot_bgcolor=colors['background'],\n                     paper_bgcolor=colors['background'],\n                     font_color=colors['text']\n            \n                  ) \nfig2.show()","02774da0":"# ANIMATED SCATTER PLOT FOR THE NUMBER OF DEATHS IN EACH DEPARTMENT\n# BY ITS GEOGRAPHICAL REGION IN THE LAST 3 MONTHS\nfig3 = px.scatter(ActiveDeptdfL3, x=\"Cumulative\", y=\"Active Cases\",\n           animation_frame=\"Date\", animation_group=\"Department\",\n            title = 'Active Cases',\n           size=\"Population\", color=\"Geo Region\", hover_name=\"Department\",\n          log_x= True, log_y=True, range_x=[1,1000000], range_y=[1,4000], size_max =45)\n\nfig3.update_layout(  title={'x':0.5,'xanchor':'center','font':{'size':20}},\n                      yaxis={'title':{'text':'Active Cases per Day'}},\n                       xaxis={'title':{'text': 'Total Number of Cases'}},\n                     plot_bgcolor=colors['background'],\n                     paper_bgcolor=colors['background'],\n                     font_color=colors['text'])\nfig3.update_xaxes(showgrid=False)\nfig3.update_yaxes(showgrid=False)\nfig3.show()","2c2f553f":"# ANIMATED SCATTER PLOT FOR THE NUMBER OF DEATHS IN EACH DEPARTMENT\n# BY ITS GEOGRAPHICAL REGION IN THE LAST 3 MONTHS\nfig4 = px.scatter(DeadDeptdfL3, x=\"Cumulative\", y=\"Deaths\",\n           animation_frame=\"Date\", animation_group=\"Department\",\n            title = 'Deaths',\n           size=\"Population\", color=\"Geo Region\", hover_name=\"Department\",\n          log_x= True, log_y=True, range_x=[1,5000], range_y=[1,200], size_max =45)\n\nfig4.update_layout(  title={'x':0.5,'xanchor':'center','font':{'size':20}},\n                      yaxis={'title':{'text':'Deaths per Day'}},\n                       xaxis={'title':{'text': 'Total Deaths'}},\n                     plot_bgcolor=colors['background'],\n                     paper_bgcolor=colors['background'],\n                     font_color=colors['text'])\nfig4.update_xaxes(showgrid=False)\nfig4.update_yaxes(showgrid=False)\nfig4.show()\n","5363bba1":"I used all these components to created a website that I deployed on Heroku:\nhttp:\/\/c19peru.herokuapp.com\/\n\nPlease feel free to message me if you have any questions. Thank you again for taking some time to see these plots and I hope you enjoyed them.\n\nGracias\nFelix"}}