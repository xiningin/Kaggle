{"cell_type":{"f1e79a94":"code","a00d50f2":"code","325ae669":"code","f358434c":"code","ccf6da5d":"code","fb588a5c":"code","9b665553":"code","1b3f9457":"code","93a69e8a":"code","2e7019e2":"code","2779a7e3":"code","317860e2":"code","67d96118":"code","630b477f":"code","d3cbd897":"code","64e018bc":"code","3cdfe7e8":"code","f72dcce9":"code","e3563d64":"code","bec76eab":"code","fede9ffe":"code","77106502":"code","07a3c72b":"code","a915f97a":"code","0a04ae24":"code","2fd33b87":"code","dfbca1ed":"code","103c3d0d":"code","82ed585d":"code","349ce419":"code","3babef6b":"code","cfb9cdf5":"code","96cd2d79":"code","23269c62":"code","13e61b1b":"code","61a66772":"code","b570138e":"code","561e89bc":"code","f631913a":"code","ab426dde":"code","e9256fbd":"code","a455cd9a":"code","0f50bd87":"code","59100705":"markdown","acf6700d":"markdown","2390f131":"markdown"},"source":{"f1e79a94":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","a00d50f2":"train_df_105 = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=10**5, \n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )","325ae669":"#data ordered by uers and timestamp, so we drop last user\ntrain_df_105.drop(train_df_105[train_df_105.user_id == train_df_105.user_id.iloc[-1]].index, inplace=True)","f358434c":"#only questions without lectures\ntrain_df_105_quest = train_df_105[train_df_105.content_type_id ==0]","ccf6da5d":"train_df_105_quest.head()","fb588a5c":"#correct answers percentage by user\nuser_quest_stats = train_df_105_quest.groupby('user_id')['answered_correctly'].agg(correct_answers_percentage='mean')","9b665553":"user_quest_stats.plot.hist(bins=100)\nplt.title(\"Correct ansewrs percentage distribution by users\")\nplt.show()","1b3f9457":"train_df_105_quest[train_df_105_quest.answered_correctly == 1].prior_question_elapsed_time.plot.hist(bins=100, label='correct')\ntrain_df_105_quest[train_df_105_quest.answered_correctly == 0].prior_question_elapsed_time.plot.hist(bins=100, label='incorrect')\nplt.title(\"Correct and incorrect elapsed time\")\nplt.legend()\nplt.show()","93a69e8a":"train_df_105_quest.groupby('prior_question_had_explanation')['answered_correctly'].agg(correct_answers_percentage='mean')","2e7019e2":"train_df_105_quest['answered_correctly'].agg(correct_answers_percentage='mean')","2779a7e3":"questions_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/questions.csv')\nlectures_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv')","317860e2":"questions_df.head()","67d96118":"train_df_105_quest_with_questions = train_df_105_quest.merge(questions_df,left_on='content_id', right_on='question_id')","630b477f":"train_df_105_quest_with_questions['tags_list'] = [x.split() for x in train_df_105_quest_with_questions.tags.values]","d3cbd897":"train_df_105_quest_with_questions.head()","64e018bc":"part_correct_answers=train_df_105_quest_with_questions.groupby('part')['answered_correctly'].agg(correct_answers_percentage='mean')","3cdfe7e8":"part_correct_answers.plot.line()\nplt.title(\"Correct ansewrs in parts\")\nplt.ylim(0,1)\nplt.show()","f72dcce9":"tags_correct_answers = train_df_105_quest_with_questions[['answered_correctly', 'tags_list']]\ntags_correct_answers = tags_correct_answers.explode('tags_list')\ntags_correct_answers = tags_correct_answers.rename(columns={'tags_list':'tag'})","e3563d64":"tags_correct_answers_percentage=tags_correct_answers.groupby('tag')['answered_correctly'].agg(correct_answers_percentage='mean')","bec76eab":"tags_correct_answers_percentage.hist(bins=100)\nplt.title(\"Correct ansewrs percentage distribution by tags\")\nplt.show()","fede9ffe":"import lightgbm as lgb\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import LabelEncoder","77106502":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                         usecols=['row_id', 'user_id', 'answered_correctly', 'content_id', 'prior_question_had_explanation', 'prior_question_elapsed_time'],\n                         dtype={'row_id': 'int64',  'user_id': 'int32', 'content_id': 'int16', 'answered_correctly': 'int8', 'prior_question_had_explanation': 'boolean', 'prior_question_elapsed_time':'float32'}\n                         )\n\ntrain_df.shape","07a3c72b":"user_df = train_df[train_df.answered_correctly != -1].groupby('user_id').agg({'answered_correctly': ['count', 'mean']}).reset_index()\nuser_df.columns = ['user_id', 'user_questions', 'user_mean']\nuser_df.head()","a915f97a":"user_lect = train_df.groupby([\"user_id\", \"answered_correctly\"]).size().unstack()\nuser_lect.columns = ['lecture', 'wrong', 'right']\nuser_lect['lecture'] = user_lect['lecture'].fillna(0)\nuser_lect = user_lect.astype('Int64')\nuser_lect['watches_lecture'] = np.where(user_lect.lecture > 0, 1, 0)\nuser_lect = user_lect.reset_index()\nuser_lect = user_lect[['user_id', 'watches_lecture']]\nuser_lect.head()","0a04ae24":"user_df = user_df.merge(user_lect, on = \"user_id\", how = \"left\")\ndel user_lect\nuser_df.head()","2fd33b87":"content_df = train_df[train_df.answered_correctly != -1].groupby('content_id').agg({'answered_correctly': ['count', 'mean']}).reset_index()\ncontent_df.columns = ['content_id', 'content_questions', 'content_mean']\ncontent_df.head()","dfbca1ed":"train_df.head()","103c3d0d":"cv2_train = pd.read_pickle(\"..\/input\/riidvalidationpickle\/cv2_train.pickle\")['row_id']\ncv2_valid = pd.read_pickle(\"..\/input\/riidvalidationpickle\/cv2_valid.pickle\")['row_id']","82ed585d":"import gc\ntrain_df = train_df[train_df.answered_correctly != -1]\nmean_prior = train_df.prior_question_elapsed_time.astype(\"float64\").mean()\n\nvalidation_df = train_df[train_df.row_id.isin(cv2_valid)]\ntrain_df = train_df[train_df.row_id.isin(cv2_train)]\n\nvalidation_df = validation_df.drop(columns = \"row_id\")\ntrain_df = train_df.drop(columns = \"row_id\")\n\ndel cv2_train, cv2_valid\ngc.collect()","349ce419":"label_enc = LabelEncoder()\n\ntrain_df= train_df.merge(user_df, on = \"user_id\", how = \"left\")\ntrain_df = train_df.merge(content_df, on = \"content_id\", how = \"left\")\n","3babef6b":"train_df.head()","cfb9cdf5":"train_df['content_questions'].fillna(0, inplace = True)\ntrain_df['content_mean'].fillna(0.5, inplace = True)\ntrain_df['watches_lecture'].fillna(0, inplace = True)\ntrain_df['user_questions'].fillna(0, inplace = True)\ntrain_df['user_mean'].fillna(0.5, inplace = True)\ntrain_df['prior_question_elapsed_time'].fillna(mean_prior, inplace = True)\ntrain_df['prior_question_had_explanation'].fillna(False, inplace = True)\ntrain_df['prior_question_had_explanation'] = label_enc.fit_transform(train_df['prior_question_had_explanation'])\ntrain_df[['content_questions', 'user_questions']] = train_df[['content_questions', 'user_questions']].astype(int)\ntrain_df.sample(5)","96cd2d79":"validation_df = validation_df.merge(user_df, on = \"user_id\", how = \"left\")\nvalidation_df = validation_df.merge(content_df, on = \"content_id\", how = \"left\")\n","23269c62":"validation_df['content_questions'].fillna(0, inplace = True)\nvalidation_df['content_mean'].fillna(0.5, inplace = True)\nvalidation_df['watches_lecture'].fillna(0, inplace = True)\nvalidation_df['user_questions'].fillna(0, inplace = True)\nvalidation_df['user_mean'].fillna(0.5, inplace = True)\nvalidation_df['prior_question_had_explanation'].fillna(False, inplace = True)\nvalidation_df['prior_question_elapsed_time'].fillna(mean_prior, inplace = True)\nvalidation_df['prior_question_had_explanation'] = label_enc.fit_transform(validation_df['prior_question_had_explanation'])\nvalidation_df[['content_questions', 'user_questions']] = validation_df[['content_questions', 'user_questions']].astype(int)\nvalidation_df.sample(5)","13e61b1b":"train_df.shape","61a66772":"features = ['user_questions', 'user_mean', 'content_questions', 'content_mean', \n            'prior_question_had_explanation', 'prior_question_elapsed_time', 'watches_lecture']\n\n\ntrain = train_df.sample(n=5000000, random_state = 1)\n\ny_train = train['answered_correctly']\ntrain = train[features]\n\ny_val = validation_df['answered_correctly']\nvalidation = validation_df[features]","b570138e":"params = {'objective': 'binary',\n          'metric': 'auc',\n          'seed': 42,\n          'learning_rate': 0.1, \n          \"boosting_type\": \"gbdt\" \n         }","561e89bc":"lgb_train = lgb.Dataset(train, y_train, categorical_feature = None)\nlgb_eval = lgb.Dataset(validation, y_val, categorical_feature = None)\ndel train, y_train, validation, y_val\ngc.collect()","f631913a":"model = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=50,\n    num_boost_round=10000,\n    early_stopping_rounds=8\n)","ab426dde":"lgb.plot_importance(model)\nplt.show()","e9256fbd":"import riiideducation\nenv = riiideducation.make_env()","a455cd9a":"iter_test = env.iter_test()","0f50bd87":"for (test_df, sample_prediction_df) in iter_test:\n    test_df = test_df.merge(user_df, on = \"user_id\", how = \"left\")\n    test_df = test_df.merge(content_df, on = \"content_id\", how = \"left\")\n    test_df['content_questions'].fillna(0, inplace = True)\n    test_df['content_mean'].fillna(0.5, inplace = True)\n    test_df['watches_lecture'].fillna(0, inplace = True)\n    test_df['user_questions'].fillna(0, inplace = True)\n    test_df['user_mean'].fillna(0.5, inplace = True)\n    test_df['prior_question_elapsed_time'].fillna(mean_prior, inplace = True)\n    test_df['prior_question_had_explanation'].fillna(False, inplace = True)\n    test_df['prior_question_had_explanation'] = label_enc.fit_transform(test_df['prior_question_had_explanation'])\n    test_df[['content_questions', 'user_questions']] = test_df[['content_questions', 'user_questions']].astype(int)\n    test_df['answered_correctly'] =  model.predict(test_df[features])\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","59100705":"Exploring questions stats","acf6700d":"Use first 10**5 rows of train dataset for data exploring. Using more efficient datatypes as shown in introduction notebook.","2390f131":"Exploring questions and lectures"}}