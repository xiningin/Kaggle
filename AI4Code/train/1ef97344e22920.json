{"cell_type":{"dcd5133b":"code","a25e9e17":"code","326a1670":"code","9fb14fe7":"code","233c9fd4":"code","916f4df4":"code","8c23ff1f":"code","571ed075":"code","8e14a044":"code","e19b4d9e":"code","0978f2f5":"code","18b5d1c1":"markdown","87da53e5":"markdown","75aa13db":"markdown","085aa1de":"markdown","e040950b":"markdown","98fbbe4a":"markdown","1330dfef":"markdown"},"source":{"dcd5133b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a25e9e17":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Supress Warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport gc\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nfrom lightgbm import LGBMClassifier","326a1670":"# credits -- https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file)\n    df = reduce_mem_usage(df)\n    return df","9fb14fe7":"train = import_data('..\/input\/tabular-playground-series-oct-2021\/train.csv')","233c9fd4":"print(\"Null values in train data\", train.isnull().sum().sum())","916f4df4":"continous_cols= ['f'+str(i) for i in range(242)]\ncontinous_cols.remove('f22')\ncontinous_cols.remove('f43')\n\ncategorical_cols = ['f'+str(i) for i in range(242,285)]+['f22','f43']\n\ncols = continous_cols + categorical_cols","8c23ff1f":"# Normalizing the features\nscaler = StandardScaler()\n\ntrain[categorical_cols] = scaler.fit_transform(train[categorical_cols])","571ed075":"import optuna\n\ndef objective(trial):\n    # prameter grid \n    # search about suggest_int, suggest_uniform and all.. it is easy to understand\n    param_grid = {\n        \"num_leaves\" : trial.suggest_int(\"num_leaves\", 20, 40),\n        \"n_estimators\" : trial.suggest_int(\"n_estimators\", 200, 450),\n        \"max_depth\" : trial.suggest_int('max_depth', 3, 8),\n        \"min_child_samples\" : trial.suggest_int('min_child_samples', 200, 750),\n        \"learning_rate\" : trial.suggest_uniform('learning_rate', 0.10, 0.30),\n        \"max_depth\": trial.suggest_int(\"max_depth\", 3, 12),\n        \"num_leaves\": trial.suggest_int(\"num_leaves\", 20, 3000, step=20)\n    }\n    \n    # Simple kfold implementation\n    kf = StratifiedKFold(n_splits=5,random_state=48,shuffle=True)\n    auc = np.empty(5)\n    \n    for n, (train_index, test_index) in enumerate(kf.split(train[cols],train['target'])):\n        X_train, X_valid = train[cols].iloc[train_index], train[cols].iloc[test_index]\n        y_train, y_valid = train['target'].iloc[train_index], train['target'].iloc[test_index]\n        \n        model = LGBMClassifier(objective=\"binary\", metric='binary_logloss',device='gpu', **param_grid)\n        model.fit(X_train, y_train, eval_set=[(X_valid,y_valid)], early_stopping_rounds=100, eval_metric=\"auc\", verbose=False)\n        \n        auc[n] = roc_auc_score(y_valid, model.predict_proba(X_valid)[:, 1])\n        gc.collect()\n        \n    return np.mean(auc)","8e14a044":"import optuna\nstudy = optuna.create_study(direction=\"maximize\", study_name=\"LGBM Classifier\")\nstudy.optimize(objective, n_trials=20)","e19b4d9e":"print(f\"\\tBest value (auc): {study.best_value:.5f}\")\nprint(f\"\\tBest params:\")\n\nfor key, value in study.best_params.items():\n    print(f\"\\t\\t{key}: {value}\")","0978f2f5":"study.best_params","18b5d1c1":"# Importing Libraries","87da53e5":"# Introduction\n\n#### In this notebook we are going to tune lgbm hyperparameters using Optuna.","75aa13db":"# Optuna with LGBM","085aa1de":"# Checking for null values","e040950b":"# Preprocessing","98fbbe4a":"# Reading data","1330dfef":"# Reducing memory usage"}}