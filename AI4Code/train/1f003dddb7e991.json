{"cell_type":{"503c4b97":"code","f341104a":"code","576cb1d6":"code","39c8d31e":"code","1e28e6fc":"code","2bff145a":"code","3d137879":"code","868a4999":"code","e78bd148":"markdown","5a54012d":"markdown","542ad930":"markdown","ef91ea26":"markdown","c084ddc2":"markdown","f3f70ec9":"markdown","847875b6":"markdown","086b43f4":"markdown","78483816":"markdown"},"source":{"503c4b97":"import collections\nimport re\n\ndef read_time_machine():\n    with open('..\/input\/timemachine.txt', 'r') as f:\n        lines = [re.sub('[^a-z]+', ' ', line.strip().lower()) for line in f]\n    return lines\n\n\nlines = read_time_machine()\nprint('# sentences %d' % len(lines))","f341104a":"def tokenize(sentences, token='word'):\n    \"\"\"Split sentences into word or char tokens\"\"\"\n    if token == 'word':\n        return [sentence.split(' ') for sentence in sentences]\n    elif token == 'char':\n        return [list(sentence) for sentence in sentences]\n    else:\n        print('ERROR: unkown token type '+token)\n\ntokens = tokenize(lines)\ntokens[0:2]","576cb1d6":"class Vocab(object):\n    def __init__(self, tokens, min_freq=0, use_special_tokens=False):\n        counter = count_corpus(tokens)  # <key, value>: <\u8bcd, \u8bcd\u9891>\n        self.token_freqs = list(counter.items())\n        self.idx_to_token = []\n        if use_special_tokens:\n            # padding, begin of sentence, end of sentence, unknown\n            self.pad, self.bos, self.eos, self.unk = (0, 1, 2, 3)\n            self.idx_to_token += ['<pad>', '<bos>', '<eos>', '<unk>']\n        else:\n            self.unk = 0\n            self.idx_to_token += ['<unk>']\n        self.idx_to_token += [token for token, freq in self.token_freqs\n                        if freq >= min_freq and token not in self.idx_to_token]\n        self.token_to_idx = dict()\n        for idx, token in enumerate(self.idx_to_token):\n            self.token_to_idx[token] = idx\n\n    def __len__(self):\n        return len(self.idx_to_token)\n\n    def __getitem__(self, tokens):\n        if not isinstance(tokens, (list, tuple)):\n            return self.token_to_idx.get(tokens, self.unk)\n        return [self.__getitem__(token) for token in tokens]\n\n    def to_tokens(self, indices):\n        if not isinstance(indices, (list, tuple)):\n            return self.idx_to_token[indices]\n        return [self.idx_to_token[index] for index in indices]\n\ndef count_corpus(sentences):\n    tokens = [tk for st in sentences for tk in st]\n    return collections.Counter(tokens)  # \u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8bcd\u7684\u51fa\u73b0\u6b21\u6570","39c8d31e":"vocab = Vocab(tokens)\nprint(list(vocab.token_to_idx.items())[0:10])","1e28e6fc":"for i in range(8, 10):\n    print('words:', tokens[i])\n    print('indices:', vocab[tokens[i]])","2bff145a":"text = \"Mr. Chen doesn't agree with my suggestion.\"","3d137879":"import spacy\nnlp = spacy.load('en')\ndoc = nlp(text)\nprint([token.text for token in doc])","868a4999":"from nltk.tokenize import word_tokenize\nprint(word_tokenize(text))","e78bd148":"# <span class=\"graffiti-highlight graffiti-id_635azvh-id_3mr9y2v\"><i><\/i>\u6587\u672c\u9884\u5904\u7406<\/span>\n\n\n\u6587\u672c\u662f\u4e00\u7c7b\u5e8f\u5217\u6570\u636e\uff0c\u4e00\u7bc7\u6587\u7ae0\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u7b26\u6216\u5355\u8bcd\u7684\u5e8f\u5217\uff0c\u672c\u8282\u5c06\u4ecb\u7ecd\u6587\u672c\u6570\u636e\u7684\u5e38\u89c1\u9884\u5904\u7406\u6b65\u9aa4\uff0c\u9884\u5904\u7406\u901a\u5e38\u5305\u62ec\u56db\u4e2a\u6b65\u9aa4\uff1a\n\n1. \u8bfb\u5165\u6587\u672c\n2. \u5206\u8bcd\n3. \u5efa\u7acb\u5b57\u5178\uff0c\u5c06\u6bcf\u4e2a\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7d22\u5f15\uff08index\uff09\n4. \u5c06\u6587\u672c\u4ece\u8bcd\u7684\u5e8f\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\uff0c\u65b9\u4fbf\u8f93\u5165\u6a21\u578b","5a54012d":"\u6211\u4eec\u770b\u4e00\u4e2a<span class=\"graffiti-highlight graffiti-id_k17qg7x-id_5iyib8c\"><i><\/i>\u4f8b\u5b50<\/span>\uff0c\u8fd9\u91cc\u6211\u4eec\u5c1d\u8bd5\u7528Time Machine\u4f5c\u4e3a\u8bed\u6599\u6784\u5efa\u5b57\u5178","542ad930":"## \u8bfb\u5165\u6587\u672c\n\n\u6211\u4eec\u7528\u4e00\u90e8\u82f1\u6587\u5c0f\u8bf4\uff0c\u5373H. G. Well\u7684[Time Machine](http:\/\/www.gutenberg.org\/ebooks\/35)\uff0c\u4f5c\u4e3a\u793a\u4f8b\uff0c\u5c55\u793a\u6587\u672c\u9884\u5904\u7406\u7684\u5177\u4f53\u8fc7\u7a0b\u3002\n\n<span class=\"graffiti-highlight graffiti-id_da72pg7-id_bf6p7rg\"><i><\/i>\u4ee3\u7801\u8bb2\u89e3<\/span>","ef91ea26":"<span class=\"graffiti-highlight graffiti-id_6ww6v1j-id_28sf80e\"><i><\/i>NLTK<\/span>:","c084ddc2":"\u4f7f\u7528\u5b57\u5178\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u539f\u6587\u672c\u4e2d\u7684\u53e5\u5b50<span class=\"graffiti-highlight graffiti-id_l6pjfl7-id_bk94fm9\"><i><\/i>\u4ece\u5355\u8bcd\u5e8f\u5217\u8f6c\u6362\u4e3a\u7d22\u5f15\u5e8f\u5217<\/span>","f3f70ec9":"## \u5efa\u7acb\u5b57\u5178\n\n\u4e3a\u4e86\u65b9\u4fbf\u6a21\u578b\u5904\u7406\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u5b57\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u6784\u5efa\u4e00\u4e2a\u5b57\u5178\uff08vocabulary\uff09\uff0c\u5c06\u6bcf\u4e2a\u8bcd\u6620\u5c04\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u7d22\u5f15\u7f16\u53f7\u3002\n\n<span class=\"graffiti-highlight graffiti-id_rap2ka4-id_weycwfh\"><i><\/i>\n\u4ee3\u7801\u8bb2\u89e3<\/span>","847875b6":"## \u5206\u8bcd\n\n\u6211\u4eec\u5bf9\u6bcf\u4e2a\u53e5\u5b50\u8fdb\u884c\u5206\u8bcd\uff0c\u4e5f\u5c31\u662f\u5c06\u4e00\u4e2a\u53e5\u5b50\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u8bcd\uff08token\uff09\uff0c\u8f6c\u6362\u4e3a\u4e00\u4e2a\u8bcd\u7684\u5e8f\u5217\u3002\n\n<span class=\"graffiti-highlight graffiti-id_gy3tram-id_igw273o\"><i><\/i>\u4ee3\u7801\u8bb2\u89e3<\/span>","086b43f4":"<span class=\"graffiti-highlight graffiti-id_ae3i5g2-id_z4hqw4m\"><i><\/i>spaCy<\/span>:","78483816":"## <span class=\"graffiti-highlight graffiti-id_q6fupul-id_t32e1nj\"><i><\/i>\u7528\u73b0\u6709\u5de5\u5177\u8fdb\u884c\u5206\u8bcd<\/span>\n\n\u6211\u4eec\u524d\u9762\u4ecb\u7ecd\u7684\u5206\u8bcd\u65b9\u5f0f\u975e\u5e38\u7b80\u5355\uff0c\u5b83\u81f3\u5c11\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7f3a\u70b9:\n\n1. \u6807\u70b9\u7b26\u53f7\u901a\u5e38\u53ef\u4ee5\u63d0\u4f9b\u8bed\u4e49\u4fe1\u606f\uff0c\u4f46\u662f\u6211\u4eec\u7684\u65b9\u6cd5\u76f4\u63a5\u5c06\u5176\u4e22\u5f03\u4e86\n2. \u7c7b\u4f3c\u201cshouldn't\", \"doesn't\"\u8fd9\u6837\u7684\u8bcd\u4f1a\u88ab\u9519\u8bef\u5730\u5904\u7406\n3. \u7c7b\u4f3c\"Mr.\", \"Dr.\"\u8fd9\u6837\u7684\u8bcd\u4f1a\u88ab\u9519\u8bef\u5730\u5904\u7406\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5f15\u5165\u66f4\u590d\u6742\u7684\u89c4\u5219\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4e00\u4e9b\u73b0\u6709\u7684\u5de5\u5177\u53ef\u4ee5\u5f88\u597d\u5730\u8fdb\u884c\u5206\u8bcd\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u5176\u4e2d\u7684\u4e24\u4e2a\uff1a[spaCy](https:\/\/spacy.io\/)\u548c[NLTK](https:\/\/www.nltk.org\/)\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a"}}