{"cell_type":{"12a913ba":"code","4e7ef2a0":"code","21471bbe":"code","c5a8cf06":"code","cbc5c299":"code","2de31a75":"code","99bbb60c":"code","783c3246":"code","8d13a216":"code","3a10b992":"code","d90c3d85":"code","54f12242":"code","2cfdcf7c":"code","4c8c1451":"code","e78f2681":"code","1dfa2913":"code","965f9524":"code","c942c931":"code","210c5809":"code","145674b6":"code","1e44e19e":"code","f0ff8d70":"code","0c181314":"code","ab63d7da":"code","a24f2b97":"code","325be270":"code","6d49f52b":"code","81538d16":"code","43a4797e":"code","89784258":"code","78a99eac":"code","1e5b622c":"code","02a807b2":"code","f586a420":"code","303e7996":"code","62a9fcdf":"code","cc635657":"code","1c614b04":"code","7e30b7da":"code","e13f4c89":"code","82ded276":"code","2b661ae1":"code","4f4dd263":"code","4272ce88":"code","4aa00584":"code","922c9d56":"code","6444a09b":"code","2cdab5fc":"code","ab883d19":"code","b9e47e3b":"code","39a904e6":"code","26463372":"code","0089f775":"code","25af8ddb":"code","1554ea19":"code","338154ee":"code","986468b1":"code","e4df01ed":"code","0789f0c5":"code","1f4a5112":"code","07a56495":"code","d1f02179":"code","7f998e66":"code","361a73df":"code","8f9440d7":"code","62a16c4e":"code","6532abe0":"code","c2b38f95":"code","8bc50bce":"code","1b7d6fff":"code","cc3ac3a6":"code","cd0fd4b1":"code","76966bc1":"code","78bd7a29":"code","901417e3":"code","0444235c":"code","e8243233":"code","2fe45ffd":"code","faaa57dd":"code","2021dbb9":"code","928d810e":"code","3cc8b2e7":"code","5f2ee182":"code","a933b627":"code","fc232cd3":"code","1ca6da87":"code","7db36271":"code","000ec3bd":"code","284af9a1":"code","ca9bdc0d":"code","86156295":"code","719fa6fb":"code","c44f8253":"code","4be9377e":"code","9b326227":"code","d0cd1da5":"code","af527d7e":"markdown","d1596938":"markdown","c6f0e517":"markdown","5cc069d2":"markdown","bf6c375f":"markdown","b49e87ca":"markdown","f2e519f8":"markdown","cd79ea47":"markdown","5e942c47":"markdown","e6521c98":"markdown","07545882":"markdown","f4e45453":"markdown","c1e71c2c":"markdown","d197bafe":"markdown","276d7997":"markdown","1e632e80":"markdown","f9e72966":"markdown"},"source":{"12a913ba":"# importing the librarys\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\nfrom dateutil.parser import parse # Helps to format strins into date\n\n%matplotlib inline","4e7ef2a0":"# importing each dataset\n\ntrip = pd.read_csv('..\/input\/trip.csv', error_bad_lines=False)\n\n\nstation = pd.read_csv('..\/input\/station.csv',error_bad_lines=False)\n\n\nweather = pd.read_csv('..\/input\/weather.csv',error_bad_lines=False)","21471bbe":"trip.head(10)","c5a8cf06":"trip.info()","cbc5c299":"station.head()","2de31a75":"station.info()","99bbb60c":"weather.head()","783c3246":"weather.info()","8d13a216":"trip.columns","3a10b992":"# lets drop the id columns that that are unnecessary\n\ntrip.drop(['trip_id','bikeid'], axis = 1,   inplace = True) # This command drop off the columns we pass as argument, the axis=1 condition,\n#makes the drop on columns, the inplace = True, save the alteration on the dataset","d90c3d85":"trip.info()","54f12242":"# Tranforming the starttime column\n\ndata = trip['starttime']","2cfdcf7c":"dta = list(trip['starttime']) # transforms each element of the startime column into a string\ndta = pd.to_datetime(dta)  # In the format of string, each element of the list is transformed into date by the pandas\ntrip['starttime'] = dta # Saving column changes","4c8c1451":"# Checking if everything went right\ntrip.info()","e78f2681":"trip.starttime","1dfa2913":"trip.head()","965f9524":"# in fact we just need the starttime column, since we already have the variable duration of the trip\n\ntrip.drop(columns='stoptime', axis = 1, inplace=True)","c942c931":"trip.info()","210c5809":"trip.isnull().sum()","145674b6":"trip.birthyear.describe()","1e44e19e":"# Filling in the missing values with values between 1969 and 1989 (which is the range in which most of the data is).\ntrip.birthyear.fillna(value = np.random.randint(1969,1989), inplace=True)\n    ","f0ff8d70":"trip.info()","0c181314":"trip.birthyear.describe()","ab63d7da":"year = trip.starttime\n\ndef age(year):\n    '''This function extracts the year from each element of the starttime column' '''\n    age = []\n    for i in year.index:  # get each element in the index of the variable 'year'\n        a = str(year[i])  # 'i' represents each element of the index of the variable 'year', so each time 'for' identifies a\n        # number in the index it plays within the variable 'a' that selects an item from the variable 'year' \n        b = a.split('-')[0] # variable 'b', stores the result of the .split () method applied on variable 'a', in\n        # Then I extract the first element of the result from .split (), which is the year\n        c = pd.to_numeric(b)  # converts the string year, to number\n        \n\n        age.append(c.astype(int)) # stores 'c' in the 'age' list, created at the beginning of the function\n    return age","a24f2b97":"# usando a fun\u00e7\u00e3o e armazenando o resultado em uma vari\u00e1vel\naged = age(year)","325be270":"trip['age'] = aged - trip.birthyear\ntrip['age'] = trip['age'].astype(int)","6d49f52b":"trip.columns","81538d16":"trip.head()","43a4797e":"# Populating missing values from the gender column\ntrip.gender.value_counts()","89784258":"trip.gender.isnull().sum()","78a99eac":"# Using the fillna method with the 'ffill' parameter to populate the null values \u200b\u200bwith the next valid observation of the dataset\ngender = trip.gender.fillna(method='ffill')\ntrip.gender = gender\ntrip.gender.isnull().sum()","1e5b622c":"trip.head()","02a807b2":"station.head()","f586a420":"# creating the 'from_station_id' and 'to_station_id' columns in the dataset station\n\nstation['from_station_id'] = station.station_id\nstation['to_station_id'] = station.station_id\nstation.head()\n","303e7996":"# creating another dataset, only with the 'from_station_id' column and the location data\nfrom_station = station[['lat', 'long','from_station_id']]\nfrom_station.head()","62a9fcdf":"# Including the latitude and longitude of the start stations in a new dataset: trip2\n\ntrip2 = pd.merge(trip,from_station, on='from_station_id')","cc635657":"trip2.info()","1c614b04":"# identifying the new columns as the data of the place of departure\ntrip2.columns = ['starttime', 'tripduration', 'from_station_name',\n       'to_station_name', 'from_station_id', 'to_station_id', 'usertype',\n       'gender', 'birthyear', 'idade', 'from_lat', 'from_long']\ntrip2.columns","7e30b7da":"# creating another dataset, only with the column 'to_station_id'\nto_station = station[['lat', 'long','to_station_id']]\nto_station.head()","e13f4c89":"# Including the latitude and longitude of the start stations in a new dataset: trip3\n\ntrip3 = pd.merge(trip2,to_station, on='to_station_id')","82ded276":"trip3.columns","2b661ae1":"# identifying the columns of the arrival data\ntrip3.columns = ['starttime', 'tripduration', 'from_station_name',\n       'to_station_name', 'from_station_id', 'to_station_id', 'usertype',\n       'gender', 'birthyear', 'idade', 'from_lat', 'from_long', 'to_lat', 'to_long']","4f4dd263":"trip3.head()","4272ce88":"trip3.info()","4aa00584":"# Folium is the library that allows plotting with maps, very simple to use\n\nimport folium","922c9d56":"station.columns","6444a09b":"mapa = folium.Map(location=[ 47.608013,  -122.335167], zoom_start=12) # Determining the seattle map using latitude and longitude data\nlat = station['lat'].values # taking the latitude values from the stations of the dataset station\nlong = station['long'].values # taking the values of longitude of the stations of the dataset station\n\nfor la, lo in zip(lat, long): # for each value in lat and long...\n    folium.Marker([la, lo]).add_to(mapa) # create a marker and place in the map variable (which in this case is the map of Seattle)\nmapa # Show the Map","2cdab5fc":"trip3.from_station_name.value_counts().head(10)","ab883d19":"\nestacoes_mais_pop = pd.DataFrame(trip3.from_station_name.value_counts().head(10)) # Counting the 10 plus creating a new df to be able to pass\n# for the folium\nstation_2 = station[['name','lat', 'long' ]]\nstation_2.columns = ['from_station_name','lat', 'long']","b9e47e3b":"estacoes_mais_pop = estacoes_mais_pop.reset_index() # resetting the index to adjust the name of the columns","39a904e6":"estacoes_mais_pop # note that the column with the station name is named 'index'","26463372":"estacoes_mais_pop.columns = ['from_station_name','contagem'] # Correcting the problem by simply renaming the columns","0089f775":"estacoes_mais_pop","25af8ddb":"estacoes_mais_pop = pd.merge(estacoes_mais_pop, station_2, on='from_station_name') # including location data (lat and long) using merge again","1554ea19":"estacoes_mais_pop","338154ee":"mapa2 = folium.Map(location=[47.608013,  -122.335167], zoom_start=13) # Same process as above, but we need to create a new Map\n\nlat = estacoes_mais_pop['lat'] \nlong = estacoes_mais_pop['long'] \n\n# This time I wrote line by line because I wanted to include the name of the station on the map. I could not find a more practical way to do it,\n# for a while...\n\nfolium.Marker([47.614315, -122.354093],popup='Pier 69 \/ Alaskan Way & Clay St').add_to(mapa2)\nfolium.Marker([47.615330 ,-122.311752],popup='E Pine St & 16th Ave').add_to(mapa2)\nfolium.Marker([47.618418 ,-122.350964],popup='3rd Ave & Broad St ').add_to(mapa2)\nfolium.Marker([47.610185 ,-122.339641],popup='2nd Ave & Pine St').add_to(mapa2)\nfolium.Marker([47.613628 ,-122.337341],popup='Westlake Ave & 6th Ave').add_to(mapa2)\nfolium.Marker([47.622063 ,-122.321251],popup='E Harrison St & Broadway Ave E ').add_to(mapa2)\nfolium.Marker([47.615486 ,-122.318245],popup='Cal Anderson Park \/ 11th Ave & Pine St').add_to(mapa2)\nfolium.Marker([47.619859 ,-122.330304],popup='REI \/ Yale Ave N & John St ').add_to(mapa2)\nfolium.Marker([47.615829 ,-122.348564],popup='2nd Ave & Vine St').add_to(mapa2)\nfolium.Marker([47.620712 ,-122.312805],popup='15th Ave E & E Thomas St').add_to(mapa2)\n\nmapa2","986468b1":"# Evaluating the weather dataset\nweather.head(10)","e4df01ed":"# Evaluating the dataset trip3, remembering that this dataset contains the location data\ntrip3.head()","0789f0c5":"data_str = list(trip3.starttime) # Creating a new date column, with the same date format as the weather dataset\n# this will allow you to add the weather data on the trip.","1f4a5112":"data_str","07a56495":"data_str = [datetime.strftime(x, '%Y-%m-%d') for x in data_str] # Formatting the column using datetime","d1f02179":"data_str[:5]","7f998e66":"trip3['Date'] = data_str # Adding the column","361a73df":"type(weather.Date)","8f9440d7":"trip3.head() # Confirming column","62a16c4e":"trip3.Date.dtypes","6532abe0":"weather.Date.dtypes","c2b38f95":"# using the same method used in the starttime column of the dataset trip this is necessary because the Date columns of trip3 and weather\n\n\ndt = list(weather['Date']) # transforms each element of the Date column into a string\ndt = pd.to_datetime(dt)  # In the string format, each list element is transformed into a date by the pandas\n\nweather['Date'] = dt # Saving the changes","8bc50bce":"weather.head()","1b7d6fff":"trip3.Date = pd.to_datetime(trip3.Date)","cc3ac3a6":"trip4 = pd.merge(weather,trip3, on = 'Date')","cd0fd4b1":"trip4.info()","76966bc1":"trip4.head()","78bd7a29":"# We have 110 null values in this colunm\ntrip4.Mean_Temperature_F.isnull().sum()","901417e3":"trip4.Mean_Temperature_F.describe()","0444235c":"# Let us fill in the missing data with the mean value, plus or minus the standard deviation\ntrip4.Mean_Temperature_F = trip4.Mean_Temperature_F.fillna(value = np.random.randint(48,68))","e8243233":"trip4.Mean_Temperature_F.describe()","2fe45ffd":"trip4.Mean_Temperature_F.isnull().sum()","faaa57dd":"trip4.isnull().sum()","2021dbb9":"trip4.Max_Gust_Speed_MPH.describe()","928d810e":"trip4.drop(columns='Max_Gust_Speed_MPH', axis=1, inplace=True)","3cc8b2e7":"trip4.isnull().sum()","5f2ee182":"trip4.Events.describe()","a933b627":"trip4.Events.value_counts()","fc232cd3":"events = trip4.Events","1ca6da87":"events.replace('Rain , Thunderstorm', 'Rain-Thunderstorm', inplace = True)\nevents.replace('Rain , Snow', 'Rain-Snow', inplace = True)\nevents.replace('Fog , Rain', 'Rain-Snow', inplace = True)\nevents.value_counts()","7db36271":"events.fillna(value='No-Event', inplace=True)","000ec3bd":"events.isnull().sum()","284af9a1":"events.value_counts()","ca9bdc0d":"trip4.info()","86156295":"columns_to_drop = ['Max_Temperature_F','Min_TemperatureF', 'Max_Dew_Point_F', 'MeanDew_Point_F', 'Min_Dewpoint_F',\n                   'Max_Humidity', 'Min_Humidity','Max_Sea_Level_Pressure_In', 'Min_Sea_Level_Pressure_In', 'Max_Visibility_Miles',\n                   'Min_Visibility_Miles', 'Max_Wind_Speed_MPH']                 ","719fa6fb":"# converting the trip duration from seconds to minutes\ntrip4.tripduration = trip4.tripduration \/ 60","c44f8253":"trip5 = trip4.drop(columns= columns_to_drop, axis=1)","4be9377e":"trip5.columns","9b326227":"trip5.head()","d0cd1da5":"trip5.describe()","af527d7e":"### And voi la ! \n\n### Theres is our map !","d1596938":"this column should be numeric, but has to many null values and i dont know what it means. sou, we gonna drop it.","c6f0e517":"### Max_Gust_Speed_MPH","5cc069d2":"# Let's see the 10 most popular stations on the map\n","bf6c375f":"### So far, so close \n\nSo lets see the location of the first three stations !","b49e87ca":"# Data Manipulation on Trips Dataset","f2e519f8":"# 1st Pier 69\n\n![Pier 69 - Seattle](http:\/\/www.gonorthwest.com\/Washington\/seattle\/Waterfront\/images\/DSC_2184.jpg)\n\n# 2nd E Pine St \/ 16th Ave\n\n![E Pine St \/ 16th Ave](https:\/\/t-ec.bstatic.com\/images\/hotel\/max1024x768\/539\/53967962.jpg)\n\n# 3rd 3rd Ave & 16th Ave\n![3rd Ave & 16th Ave](https:\/\/cdn.downtownseattle.org\/app\/uploads\/2017\/10\/Metro-on-3rd-high-angle-2-2.jpg)\n","cd79ea47":"Lets choose the columns we are interested in","5e942c47":"### Next steps  \n\nMy goal is:\n * separete the date into new columns: Year, month, day and hour\n * from the hour column create a new feature that identifies the time of the day:Morning, afternoon and evening, so we can understand the time of day when people use the bike most\n * From the month column, extract the season of the year: Summer, spring, winter and autumn. \n * create days of the week\n \nI think this changes can give us a real understanding about the use patterns\n\n***The work continues. So, to finish these transformations, we will begin the exploratory analysis of the data!***\n\n\n\nThank you so much for coming here. Leave your comment and do not forget to follow the end of this work !!\n\nSee you later !","e6521c98":"### Merging data!\n\nThe pandas merge shank, serves to gather data from different bases. Unlike concat mode, this method \"joins\" the data side by side. Think of it as the 'procv' function of Excel. To merge, it is necessary that both dataframes have at least one column with the same name.","07545882":"### Mean_Temperature_F","f4e45453":"### For the dataset to be complete, we need to include the weather data.\n\nBefore that, I need to familiarize myself with the variables in the dataset 'weather'. But first let's take a look at where the bike stations are.","c1e71c2c":"### Now, it would be a good idea to find out the age of the users once we have their date of birth.","d197bafe":"****Lets explore this datasets. I will start with the trips dataset, but before i start the exploration, there are some things i should do first:****\n\n* Transform the time columns in time series (I chalenging myself, thats the first time i do this)\n* Join the lat e long in the trip dataset, this way i can do some geoanalysis","276d7997":"# Data manipulation, transformation and junction. \n\nA startup just started operating in S\u00e3o Paulo. The startup name is [Yellow](https:\/\/www.yellow.app\/?gclid=Cj0KCQjwlqLdBRCKARIsAPxTGaXuc2q-r_SnOuWBHji4ZmSEQ6gqHbGbSFgyyfGwqAJy07vK2la1VbkaAstTEALw_wc). This company offers to his users the possibility to use bikes spread all over the city. All you need to do is donwload their app, put some credit and start using. \n\n![yellow bike](https:\/\/portalbr.akamaized.net\/brasil\/uploads\/2018\/08\/03141321\/yellow-capa.jpg 'One of the bikes you can use in S\u00e3o Paulo')\n\nThis little yellow ones are really increasing and the people are using a lot ! So, with this in mind i started to question my self if there was any data similar to this. Thanks to Kaggle the answer is YES, there are a lot of data about bike sharing out there ! \n\nAfter a quick research a decided to test myself in the quest about some answers about this bussines model. They do got success in another places ? Who uses this ? Why and when ? \n\nTo answer this questions i started my exploration with data about bike sharing in Seattle - USA. This data is divided in three sets, as described below: \n\n* trip dataset: It have the information abou the trips. Data like, trip duration, user gender, user type, trip date and more;\n* station dataset: It have data about the localization of the bike stations spread in seattle;\n* weather: Data about climate\n\nWe can found data since 2014. \n\nTo make a good EDA on this data, i think we should join the most relevant data in only one dataset. Thats my chalenge !\n\nSo i hope you come with me in this journey, with my fellow Pandas and other librarys that well help us all over the way ! \n\nI hope you enjoy the trip and if you like what you see, please, leave you comment and your Upvote would be more than welcome ! \n\nLets do this ! ","1e632e80":"### Events\n\nI think this information is very important, but has too many NaN values, that must be days that dont ocurried any event","f9e72966":"Now we have a huge dataset with 35 columns with data about use, weather and localization. But there are some null values. Lets work on it ! "}}