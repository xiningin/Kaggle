{"cell_type":{"6a8bc5c9":"code","3a5a560c":"code","e15807f3":"code","7a12c52a":"code","7652da5c":"code","0ed71301":"code","1ae81a00":"code","bd24084e":"code","40aff2f5":"code","90aa1ae7":"code","7befa207":"code","bb28db1f":"code","4fcd622a":"code","09fccbd3":"code","a1dca9c6":"code","6889f641":"code","a22b3902":"code","2c9efc77":"code","a5959036":"code","2852ecb5":"code","d22da3af":"code","a6ed86dd":"code","7f02e268":"code","fe4fd2b0":"code","dbd8ae50":"code","d1af2e9e":"code","a3977f6d":"code","2618b36f":"code","88df6b29":"code","e0daa975":"code","4241f966":"code","1e820a30":"code","1c0a1894":"code","ee19f86e":"code","1d2adef7":"code","d324ca25":"code","b0b09551":"code","c4e5f052":"code","1691c089":"code","8ed094c6":"code","5ea66fe3":"code","4e52eb48":"code","5c69084b":"code","0fe1357e":"code","fac97f70":"code","90202b26":"code","8c47dca1":"code","5de21284":"code","47588560":"code","92d946d2":"code","081bf8fd":"code","74a2c2b9":"code","24fe0c9b":"code","26c2f919":"code","7f794799":"code","8cce9202":"code","65ae48ca":"code","0ffdd8d2":"code","eca5b9a6":"code","e76466df":"code","c0b6d91f":"code","9474256b":"code","1820187a":"code","78c4bd8b":"code","2e46ec41":"code","a409557b":"code","04caabcd":"markdown","03ebd0cb":"markdown","c7f54a0b":"markdown","6daf8fc3":"markdown","7a785e7a":"markdown","f8cb2cd7":"markdown","dec700f1":"markdown","03ca4335":"markdown","5a63bac3":"markdown","ee08bbea":"markdown","26362738":"markdown"},"source":{"6a8bc5c9":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import spearmanr\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import f1_score\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nimport tensorflow as tf","3a5a560c":"def corr_metrics_recom(y_true, y_pred):\n    return spearmanr(y_true, y_pred)[0]","e15807f3":"def corr_metrics_rating(y_true, y_pred):\n    y_true = y_true.argmax(axis=1) + 1\n    y_pred = y_pred.argmax(axis=1) + 1\n    return spearmanr(y_true, y_pred)[0]","7a12c52a":"recom_metrics = make_scorer(corr_metrics_recom)","7652da5c":"rating_metrics = make_scorer(corr_metrics_rating)","0ed71301":"submission = pd.read_csv('..\/input\/iba-ml1-final-project\/sample_submission.csv')\nsubmission","1ae81a00":"df_without_text = pd.read_csv('..\/input\/clean-data\/df_without_text.csv', index_col=0).drop('Pos_Feedback_Cnt', axis=1)\ntest_without_text = pd.read_csv('..\/input\/clean-data\/test_without_text.csv', index_col=0).drop('Pos_Feedback_Cnt', axis=1)\nindex_without_text = test_without_text.index\ndf_without_text","bd24084e":"num_cols_without_text=['Age']\ncat_cols_without_text = ['Division', 'Department', 'Product_Category']\n\nnum_transform_without_text = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\n\ncat_transform_without_text = Pipeline(steps=[\n  ('encoder', OneHotEncoder(handle_unknown='ignore'))\n])\n\ncolumn_transformer_without_text = ColumnTransformer(transformers=[\n    ('num_transformer', num_transform_without_text, num_cols_without_text),\n    ('cat_transformer', cat_transform_without_text, cat_cols_without_text)\n])","40aff2f5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC","90aa1ae7":"X_without_text_recom  = df_without_text.iloc[:, :-2]\ny_without_text_recom = df_without_text.iloc[:, -1]","7befa207":"RandomForestClassifier(n_estimators=13, criterion='entropy', max_depth=15, class_weight={0:3, 1:1})","bb28db1f":"pipe_without_text_recom = Pipeline(steps=[\n        ('preprocessing', column_transformer_without_text),\n        ('model', RandomForestClassifier(n_estimators=85, criterion='entropy'))\n    ])","4fcd622a":"scores_without_text_recom = cross_val_score(pipe_without_text_recom, X_without_text_recom, y_without_text_recom, cv=8, scoring=recom_metrics)\nnp.mean(scores_without_text_recom)","09fccbd3":"pipe_without_text_recom.fit(X_without_text_recom, y_without_text_recom)","a1dca9c6":"submission.loc[index_without_text, 'Recommended'] = pipe_without_text_recom.predict(test_without_text)","6889f641":"X_without_text_rating  = df_without_text.iloc[:, :-2]\ny_without_text_rating = df_without_text.iloc[:, -2]","a22b3902":"y_without_text_rating.value_counts()","2c9efc77":"pipe_without_text_rating = Pipeline(steps=[\n        ('preprocessing', column_transformer_without_text),\n        ('model', SVC(class_weight={1:15, 2:5, 3:4, 4:3, 1:1},kernel='poly', degree=3,decision_function_shape='ovo', C=0.95))\n    ])","a5959036":"scores_without_text_rating = cross_val_score(pipe_without_text_rating, X_without_text_rating, y_without_text_rating, cv=8, scoring=recom_metrics)","2852ecb5":"print(np.mean(scores_without_text_rating))\nprint(np.std(scores_without_text_rating))","d22da3af":"pipe_without_text_rating.fit(X_without_text_rating, y_without_text_rating)","a6ed86dd":"submission.loc[index_without_text, 'Rating'] = pipe_without_text_rating.predict(test_without_text)","7f02e268":"submission.loc[index_without_text, 'Rating'].value_counts()","fe4fd2b0":"df_without_review_title = pd.read_csv('..\/input\/clean-data\/df_without_review_title.csv', index_col=0)\ntest_without_review_title = pd.read_csv('..\/input\/clean-data\/test_without_review_title.csv', index_col=0)\nindex_without_review_title = test_without_review_title.index\ndf_without_review_title","dbd8ae50":"from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer","d1af2e9e":"num_cols_without_review_title=['Age', 'Pos_Feedback_Cnt']\ncat_cols_without_review_title = ['Division', 'Department', 'Product_Category']\ntext_cols_without_review_title = ['Review']\n\nnum_transform_without_review_title = Pipeline(steps=[\n    ('scaler', StandardScaler())\n])\n\ncat_transform_without_review_title = Pipeline(steps=[\n  ('imputer', OneHotEncoder(handle_unknown='ignore'))\n])\n\ntext_transform_without_review_title = Pipeline(steps=[\n    ('vectorizer', CountVectorizer()),\n   # ('tfidf', TfidfTransformer())\n])\n\ncolumn_transformer_without_review_title = ColumnTransformer(transformers=[\n    ('num_transformer', num_transform_without_review_title, num_cols_without_review_title),\n    ('cat_transformer', cat_transform_without_review_title, cat_cols_without_review_title),\n    ('text_transformer', text_transform_without_review_title, text_cols_without_review_title)\n])","a3977f6d":"import tensorflow as tf\nfrom tensorflow.keras import backend as K\ndef focal_loss(y_true, y_pred):\n    gamma = 2.0,\n    alpha = 0.33\n    pt_1 = tf.where(tf.equal(y_true, 1), y_pred, tf.ones_like(y_pred))\n    pt_0 = tf.where(tf.equal(y_true, 0), y_pred, tf.zeros_like(y_pred))\n    return -K.sum(alpha * K.pow(1. - pt_1, gamma) * K.log(pt_1))-K.sum((1-alpha) * K.pow( pt_0, gamma) * K.log(1. - pt_0))\n","2618b36f":"X_without_review_title_recom = df_without_review_title.iloc[:, :-2]\ny_without_review_title_recom = df_without_review_title.iloc[:, -1]","88df6b29":"pipe_without_review_title_recom = Pipeline(steps=[\n        ('preprocessing', column_transformer_without_review_title),\n        ('model', RandomForestClassifier(n_estimators=25))\n    ])","e0daa975":"def prepare_without_review_title(X_train, X_test):\n    X_train_num, X_train_cat, X_train_text = X_train.loc[:, ['Age', 'Pos_Feedback_Cnt']], X_train.loc[:, ['Division', 'Department', 'Product_Category']], X_train.loc[:, 'Review']\n    X_test_num, X_test_cat, X_test_text = X_test.loc[:, ['Age', 'Pos_Feedback_Cnt']], X_test.loc[:, ['Division', 'Department', 'Product_Category']], X_test.loc[:, 'Review']\n    \n    # num scaler\n    scaler = StandardScaler()\n    X_train_num = scaler.fit_transform(X_train_num)\n    X_test_num = scaler.transform(X_test_num)\n    \n    # cat encoder\n    ohe = OneHotEncoder(handle_unknown='ignore')\n    X_train_cat = ohe.fit_transform(X_train_cat).toarray()\n    X_test_cat = ohe.transform(X_test_cat).toarray()\n    \n    # text\n    vectorizer = CountVectorizer(min_df=12, max_df=0.68, max_features=3000)\n    X_train_text = vectorizer.fit_transform(X_train_text).toarray()\n    X_test_text = vectorizer.transform(X_test_text).toarray()\n    \n    #tfidf = TfidfTransformer()\n    #X_train_text = tfidf.fit_transform(X_train_text).toarray()\n    #X_test_text = tfidf.transform(X_test_text).toarray()\n    \n    #tfidf_vec = TfidfVectorizer(max_df=0.65, min_df=12, max_features=2500)\n    #X_train_text = tfidf_vec.fit_transform(X_train_text).toarray()\n    #X_test_text = tfidf_vec.transform(X_test_text).toarray()\n    \n    X_train = np.hstack((X_train_num, X_train_cat, X_train_text))\n    X_test = np.hstack((X_test_num, X_test_cat, X_test_text))\n    return X_train_text, X_test_text","4241f966":"lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate=1e-2,\n    decay_steps=10000,\n    decay_rate=0.82)\n","1e820a30":"scores_without_review_title_recom = []\nkfolds = StratifiedKFold(5)\nfor train_idx, test_idx in kfolds.split(X_without_review_title_recom, y_without_review_title_recom):\n    X_without_review_title_recom_train, X_without_review_title_recom_test = X_without_review_title_recom.iloc[train_idx], X_without_review_title_recom.iloc[test_idx]\n    y_without_review_title_recom_train, y_without_review_title_recom_test = y_without_review_title_recom.iloc[train_idx], y_without_review_title_recom.iloc[test_idx]\n    \n    X_without_review_title_recom_train, X_without_review_title_recom_test = prepare_without_review_title(X_without_review_title_recom_train, X_without_review_title_recom_test)\n   \n    model_without_review_title_recom = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(150, activation=tf.keras.layers.PReLU(), input_shape=(X_without_review_title_recom_train.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(26, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dropout(0.15),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n    model_without_review_title_recom.compile(loss=['binary_crossentropy'], optimizer = tf.keras.optimizers.Adamax(learning_rate=lr_schedule))\n    \n    history = model_without_review_title_recom.fit(X_without_review_title_recom_train, y_without_review_title_recom_train, epochs=49, batch_size=98)\n  \n    y_without_review_title_rating_pred = model_without_review_title_recom.predict(X_without_review_title_recom_test) \n    scores_without_review_title_recom.append(corr_metrics_recom(y_without_review_title_recom_test, y_without_review_title_rating_pred))\n    ","1c0a1894":"print(np.mean(scores_without_review_title_recom))\nprint(np.std(scores_without_review_title_recom))","ee19f86e":"X_without_review_title_recom, test_without_review_title_recom = prepare_without_review_title(X_without_review_title_recom, test_without_review_title)","1d2adef7":" model_without_review_title_recom = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(150, activation=tf.keras.layers.PReLU(), input_shape=(X_without_review_title_recom.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(26, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dropout(0.15),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\nmodel_without_review_title_recom.compile(loss=['binary_crossentropy'], optimizer = tf.keras.optimizers.Adamax(learning_rate=lr_schedule))\nmodel_without_review_title_recom.fit(X_without_review_title_recom, y_without_review_title_recom, epochs=49, batch_size=98)","d324ca25":"model_without_review_title_recom.summary()","b0b09551":"tf.keras.utils.plot_model(model_without_review_title_recom)","c4e5f052":"submission.loc[index_without_review_title, 'Recommended'] = (model_without_review_title_recom.predict(test_without_review_title_recom)>=0.5).flatten().astype(np.int64)","1691c089":"X_without_review_title_rating  = df_without_review_title.iloc[:, :-2]\ny_without_review_title_rating_temp = df_without_review_title.iloc[:, -2]\ny_without_review_title_rating = np.zeros((y_without_review_title_rating_temp.shape[0], 5))\ny_without_review_title_rating[np.arange(y_without_review_title_rating_temp.shape[0]), y_without_review_title_rating_temp-1] = 1","8ed094c6":"kfold = StratifiedKFold(n_splits=8)\na=0\nscores_without_review_title_rating = []\nfor train_idx, test_idx in kfold.split(X_without_review_title_rating, y_without_review_title_rating_temp):\n  \n        \n        X_without_review_title_rating_train, X_without_review_title_rating_test = X_without_review_title_rating.iloc[train_idx], X_without_review_title_rating.iloc[test_idx]\n        y_without_review_title_rating_train, y_without_review_title_rating_test = y_without_review_title_rating[train_idx], y_without_review_title_rating[test_idx]\n\n        X_without_review_title_rating_train, X_without_review_title_rating_test = prepare_without_review_title(X_without_review_title_rating_train, X_without_review_title_rating_test)\n        \n        model_without_review_title_rating = tf.keras.models.Sequential([\n        tf.keras.layers.Dense(65, activation=tf.keras.layers.ReLU(), input_shape=(X_without_review_title_rating_train.shape[1], )),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(25, activation=tf.keras.layers.ReLU()),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(5, activation='softmax')\n        ])\n        model_without_review_title_rating.compile(loss=[focal_loss], optimizer = tf.keras.optimizers.Adam())\n        history = model_without_review_title_rating.fit(X_without_review_title_rating_train, y_without_review_title_rating_train, epochs=68, batch_size=95)\n        \n        scores_without_review_title_rating.append(corr_metrics_rating(y_without_review_title_rating_test, model_without_review_title_rating.predict(X_without_review_title_rating_test)))\n","5ea66fe3":"print(np.mean(scores_without_review_title_rating))\nprint(np.std(scores_without_review_title_rating))","4e52eb48":"X_without_review_title_rating, test_without_review_title_rating = prepare_without_review_title(X_without_review_title_rating, test_without_review_title)","5c69084b":" model_without_review_title_rating = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(65, activation=tf.keras.layers.PReLU(), input_shape=(X_without_review_title_rating.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(25, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(5, activation='softmax')\n    ])\nmodel_without_review_title_rating.compile(loss=[focal_loss], optimizer = tf.keras.optimizers.Adam())\n    \nmodel_without_review_title_rating.fit(X_without_review_title_rating, y_without_review_title_rating, epochs=68, batch_size=95)","0fe1357e":"model_without_review_title_rating.summary()","fac97f70":"tf.keras.utils.plot_model(model_without_review_title_rating)","90202b26":"submission.loc[index_without_review_title, 'Rating'] = model_without_review_title_rating.predict(test_without_review_title_rating).argmax(axis=1)+1","8c47dca1":"df_with_text = pd.read_csv('..\/input\/clean-data\/df_with_text.csv', index_col=0)\ntest_with_text = pd.read_csv('..\/input\/clean-data\/test_with_text.csv', index_col=0)\nindex_with_text = test_with_text.index\ndf_with_text","5de21284":"X_with_text_recom = df_with_text.iloc[:, [0, 1, 2, 3, 4, 7]]\ny_with_text_recom = df_with_text.iloc[:, -2]","47588560":"def prepare_with_text(X_train, X_test, vect):\n    X_train_num, X_train_cat, X_train_text = X_train.loc[:, ['Age', 'Pos_Feedback_Cnt']], X_train.loc[:, ['Division', 'Department', 'Product_Category']], X_train.loc[:, 'text']\n    X_test_num, X_test_cat, X_test_text = X_test.loc[:, ['Age', 'Pos_Feedback_Cnt']], X_test.loc[:, ['Division', 'Department', 'Product_Category']], X_test.loc[:, 'text']\n    \n    # num scaler\n    scaler = StandardScaler()\n    X_train_num = scaler.fit_transform(X_train_num)\n    X_test_num = scaler.transform(X_test_num)\n    \n    # cat encoder\n    imputer = SimpleImputer(strategy='most_frequent')\n    X_train_cat = imputer.fit_transform(X_train_cat)\n    X_test_cat = imputer.transform(X_test_cat)\n    \n    ohe = OneHotEncoder(handle_unknown='ignore')\n    X_train_cat = ohe.fit_transform(X_train_cat).toarray()\n    X_test_cat = ohe.transform(X_test_cat).toarray()\n    \n    # text\n    X_train_text = vect.fit_transform(X_train_text).toarray()\n    X_test_text = vect.transform(X_test_text).toarray()\n    \n    X_train = np.hstack((X_train_num, X_train_cat, X_train_text))\n    X_test = np.hstack((X_test_num, X_test_cat, X_test_text))\n    return X_train, X_test","92d946d2":"lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(\n    initial_learning_rate=1e-2,\n    decay_steps=10000,\n    decay_rate=0.9)\n","081bf8fd":"scores_with_text_recom = []\nkfolds = StratifiedKFold(8)\nfor train_idx, test_idx in kfolds.split(X_with_text_recom, y_with_text_recom):\n    X_with_text_recom_train, X_with_text_recom_test = X_with_text_recom.iloc[train_idx], X_with_text_recom.iloc[test_idx]\n    y_with_text_recom_train, y_with_text_recom_test = y_with_text_recom.iloc[train_idx], y_with_text_recom.iloc[test_idx]\n    \n    vectorizer = CountVectorizer(min_df=17, max_df=0.63, max_features=None, analyzer='word')\n    X_with_text_recom_train, X_with_text_recom_test = prepare_with_text(X_with_text_recom_train, X_with_text_recom_test, vect=vectorizer)\n   \n    \n    model_with_text_recom = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(115, activation=tf.keras.layers.ReLU(), input_shape=(X_with_text_recom_train.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(29, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dropout(0.15),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\n    model_with_text_recom.compile(loss=['binary_crossentropy'], optimizer=tf.keras.optimizers.Adamax(learning_rate=lr_schedule))\n    \n    history = model_with_text_recom.fit(X_with_text_recom_train, y_with_text_recom_train, epochs=38, batch_size=55)\n\n    y_with_text_recom_pred = (model_with_text_recom.predict(X_with_text_recom_test)>=0.5).astype(np.int64).flatten()\n    scores_with_text_recom.append(corr_metrics_recom(y_with_text_recom_test, y_with_text_recom_pred))\n    break\n   ","74a2c2b9":"print(np.mean(scores_with_text_recom))\nprint(np.std(scores_with_text_recom))","24fe0c9b":"X_with_text_recom, test_with_text_recom = prepare_with_text(X_with_text_recom, test_with_text, vect=vectorizer)","26c2f919":"model_with_text_recom = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(115, activation=tf.keras.layers.PReLU(), input_shape=(X_with_text_recom.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(29, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dropout(0.15),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n    ])\nmodel_with_text_recom.compile(loss=[focal_loss], optimizer=tf.keras.optimizers.Adam(learning_rate=lr_schedule))\nhistory = model_with_text_recom.fit(X_with_text_recom, y_with_text_recom, epochs=38, batch_size=55)","7f794799":"model_with_text_recom.summary()","8cce9202":"tf.keras.utils.plot_model(model_with_text_recom)","65ae48ca":"submission.loc[index_with_text, 'Recommended'] = (model_with_text_recom.predict(test_with_text_recom) >= 0.5).flatten().astype(np.int64)","0ffdd8d2":"X_with_text_rating  = df_with_text.iloc[:, [0, 1, 2, 3, 4, 7]]\ny_with_text_rating_temp = df_with_text.iloc[:, -3]\ny_with_text_rating = np.zeros((y_with_text_rating_temp.shape[0], 5))\ny_with_text_rating[np.arange(y_with_text_rating_temp.shape[0]), y_with_text_rating_temp-1] = 1","eca5b9a6":"scores_with_text_rating = []\nkfolds = StratifiedKFold(8)\nfor train_idx, test_idx in kfolds.split(X_with_text_rating, y_with_text_rating_temp):\n    X_with_text_rating_train, X_with_text_rating_test = X_with_text_rating.iloc[train_idx], X_with_text_rating.iloc[test_idx]\n    y_with_text_rating_train, y_with_text_rating_test = y_with_text_rating[train_idx], y_with_text_rating[test_idx]\n    \n    vectorizer = CountVectorizer(min_df=12, max_df=0.63, max_features=None, analyzer='word')\n    X_with_text_rating_train, X_with_text_rating_test = prepare_with_text(X_with_text_rating_train, X_with_text_rating_test, vect=vectorizer)\n    \n    model_with_text_rating = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(125, activation=tf.keras.layers.PReLU(), input_shape=(X_with_text_rating_train.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(16, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dense(5, activation='softmax')\n    ])\n\n    model_with_text_rating.compile(loss=[focal_loss], optimizer=tf.keras.optimizers.Adamax())\n    \n    history = model_with_text_rating.fit(X_with_text_rating_train, y_with_text_rating_train, epochs=32, batch_size=125)\n    y_with_text_rating_pred = model_with_text_rating.predict(X_with_text_rating_test) \n    scores_with_text_rating.append(corr_metrics_rating(y_with_text_rating_test, y_with_text_rating_pred))\n    break\n   ","e76466df":"print(np.mean(scores_with_text_rating))\nprint(np.std(scores_with_text_rating))","c0b6d91f":"X_with_text_rating, test_with_text_rating = prepare_with_text(X_with_text_rating, test_with_text, vect=vectorizer)","9474256b":"model_with_text_rating = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(125, activation=tf.keras.layers.PReLU(), input_shape=(X_with_text_rating.shape[1], )),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(16, activation=tf.keras.layers.PReLU()),\n    tf.keras.layers.Dense(5, activation='softmax')\n    ])\n\nmodel_with_text_rating.compile(loss=[focal_loss], optimizer=tf.keras.optimizers.Adamax())\nmodel_with_text_rating.fit(X_with_text_rating, y_with_text_rating, epochs=32, batch_size=125)","1820187a":"model_with_text_rating.summary()","78c4bd8b":"tf.keras.utils.plot_model(model_with_text_rating)","2e46ec41":"submission.loc[index_with_text, 'Rating'] = model_with_text_rating.predict(test_with_text_rating).argmax(axis=1)+1","a409557b":"# submission.to_csv('result.csv', index=False)","04caabcd":"### Train With Text","03ebd0cb":"### Train Without Text","c7f54a0b":"Custom Spearman correlation metrics","6daf8fc3":"### Recommendation Without Review Title","7a785e7a":"### Rating without Review Title","f8cb2cd7":"### Train Without Review Title","dec700f1":"### Rating Without Text","03ca4335":"### Recommendation without text","5a63bac3":"### Begin","ee08bbea":"### Recommendation With Text","26362738":"### Rating With Text"}}