{"cell_type":{"7b411d59":"code","7e885506":"code","1a70e0b5":"code","388f5de5":"code","56cbea34":"code","a2fc820c":"code","cd22cef2":"code","8e78889e":"code","a1dbf437":"code","544f9097":"code","e9049829":"code","aa80cf91":"code","d531b224":"code","7433f7e1":"code","1622e6b9":"code","447f2823":"code","c2c7bcb1":"code","d3e9e7fa":"code","05927bf3":"markdown","148b86f5":"markdown","de4992e3":"markdown","f6bf7eb6":"markdown","ae1edda7":"markdown"},"source":{"7b411d59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7e885506":"pip install geocoder","1a70e0b5":"import folium\nfrom folium import plugins\nimport ipywidgets\nimport geocoder\nimport numpy as np\nimport pandas as pd","388f5de5":"# basic map\nfolium.Map()","56cbea34":"# folium map with some arguments with Bengaluru lat-log\n\nmap1 = folium.Map(location = [12.97, 77.59], zoom_start = 12,\n                 width = 500, height = 300, control_scale = True)\nmap1","a2fc820c":"# show map types using ipywidgets\n\n# widget\nselect_widget=ipywidgets.Select(\n    options=['Open Street Map', 'Terrain', 'Toner', 'Watercolor', 'Positron', 'Dark Matter'],\n    value='Open Street Map',\n    description='Map Type:',\n    disabled=False)\n\n# widget function\ndef select(map_type):\n    if map_type == 'Open Street Map':\n        display(folium.Map(location=[12.9166, 77.6101], zoom_start=12, height=500))\n    if map_type == 'Terrain':\n        display(folium.Map(location=[12.934377, 77.628415], tiles='Stamen Terrain', zoom_start=12, height=400))\n    if map_type == 'Toner':\n        display(folium.Map(location=[18.147500, 41.538889], tiles='Stamen Toner', zoom_start=12, height=400))\n    if map_type == 'Watercolor':\n        display(folium.Map(location=[12.265594, 76.646540], tiles='Stamen Watercolor', zoom_start=12, height=400))\n    if map_type == 'Positron':\n        display(folium.Map(location=[12.973291, 77.640467], tiles='CartoDB Positron', zoom_start=12, height=400))\n    if map_type == 'Dark Matter':\n        display(folium.Map(location=[12.9698, 77.7500], tiles='CartoDB Dark_Matter', zoom_start=12, height=400))\n        \n# interaction between widgets and function    \nipywidgets.interact(select, map_type=select_widget)","cd22cef2":"# map\nmap_with_mini = folium.Map(location=(39, -100), zoom_start=7)\n\n# plugin for mini map\nminimap = plugins.MiniMap(toggle_display=True)\n\n# add minimap to map\nmap_with_mini.add_child(minimap)\n\n# add scroll zoom toggler to map\nplugins.ScrollZoomToggler().add_to(map_with_mini)\n\n# add full screen button to map\nplugins.Fullscreen(position='topright').add_to(map_with_mini)\n\n# display map\nmap_with_mini","8e78889e":"# geocode address and place marker on map\n\n# map\nmap_zoo = folium.Map(location = [12.9716, 77.5946], zoom_start = 10)\n\n# get location information for address\naddress = geocoder.osm('Bengaluru, Karnataka')\n\n# address latitude and longitude\naddress_latlng = [address.lat, address.lng]\n\n# add marker to map\nfolium.Marker(address_latlng, popup = 'Bengaluru', tooltip = 'click').add_to(map_zoo)\n\n# display map\nmap_zoo","a1dbf437":"df = pd.read_csv('\/kaggle\/input\/latitude-and-longitude-for-every-country-and-state\/world_country_and_usa_states_latitude_and_longitude_values.csv')\ndf.head()","544f9097":"data = pd.DataFrame(df.iloc[:, [7, 5, 6]])\ndata = data.head(20)\ndata.head()","e9049829":"map_state = folium.Map(location = [41.8780, -93.0977], zoom_start=3)\n\n# plot locations\nfor (index, row) in data.iterrows():\n    folium.Marker(location=[row.loc['usa_state_latitude'], row.loc['usa_state_longitude']], \n                  popup=row.loc['usa_state'],# + ' ' + row.loc['city'] + ' ' + row.loc['state'], \n                  tooltip='click').add_to(map_state)\n    \n# display map    \nmap_state","aa80cf91":"# By using apply function.\nfor (index, row) in data.iterrows():\n    print(index,row)","d531b224":"map_state2 = folium.Map(location=[41.8780, -93.0977], zoom_start=3)\n\n# plot state locations using apply\ndata.apply(lambda row: folium.Marker(location=[row['usa_state_latitude'], row['usa_state_longitude']],\n                                         popup=row['usa_state']).add_to(map_state2), axis=1)\n\n# display map\nmap_state2","7433f7e1":"# multiple markers using dictionary\n\nmarkers_dict = {'Los Angeles': [34.041008, -118.246653], \n                'Las Vegas': [36.169726, -115.143996], \n                'Denver': [39.739448, -104.992450], \n                'Chicago': [41.878765, -87.643267], \n                'Manhattan': [40.782949, -73.969559]}\n\n# create map\nmap_cities = folium.Map(location=[41, -99], zoom_start=4)\n\n# plot locations\nfor i in markers_dict.items():\n    folium.Marker(location=i[1], popup=i[0]).add_to(map_cities)\n    print(i)\n\n# display map    \nmap_cities","1622e6b9":"map_cm_fa = folium.Map(location=[38, -98], zoom_start=4)\n\n# add custom marker to map\nfolium.Marker(location=[38, -98], \n              popup='popup', \n              icon=folium.Icon(color='green', icon='bolt', prefix='fa')).add_to(map_cm_fa)\n\n# display map\nmap_cm_fa","447f2823":"# dataframe with custom marker names\ncm_df = pd.DataFrame({'city': ['Los Angeles', 'Las Vegas', 'Denver', 'Chicago', 'Manhattan'],\n                      'latitude': [34.041008, 36.169726, 39.739448, 41.878765, 40.782949],\n                      'longitude': [-118.246653, -115.143996, -104.992450, -87.643267, -73.969559],\n                      'icon': ['bicycle', 'car', 'bus', 'truck', 'motorcycle']})\ncm_df","c2c7bcb1":"map_cm_multiple = folium.Map(location=[38, -98], zoom_start=4)\n\n# add markers to map\n# for loop with itertuples (experiment that appears to work well)\n# can also use iterrows or dataframe apply\nfor i in cm_df.itertuples():\n    folium.Marker(location=[i.latitude, i.longitude], \n                  popup=i.city,\n                  icon=folium.Icon(icon=i.icon, prefix='fa')).add_to(map_cm_multiple)\n\n# display map    \nmap_cm_multiple","d3e9e7fa":"# I have shared whatever i learned.","05927bf3":"### Custom Markers","148b86f5":"### Multiple Markers","de4992e3":"### Markers","f6bf7eb6":"#### mini map, scroll zoom toggle button, full screen","ae1edda7":"### Map Types"}}