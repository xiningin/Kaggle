{"cell_type":{"34df2202":"code","a9fc3333":"code","d189652d":"code","9525259f":"code","84b55885":"code","4af95a07":"code","08edf6cf":"code","3b99c875":"code","883ab31e":"code","85872e8e":"code","cc3f18c7":"code","5d335fbb":"code","4e9ee3a4":"code","229ed605":"code","49ee8193":"code","c4ea66a5":"code","32b40629":"code","3d502ccd":"code","af251046":"code","d04a5bf8":"code","b57c26c8":"code","5856634e":"code","5e52e3b5":"code","5b23d17c":"code","fbf7be05":"code","75de6040":"code","dc2cc020":"code","d5cc7ed2":"code","e92cd8e4":"code","e93c975d":"code","1926d0b3":"code","8567f5f7":"code","6f45f543":"code","0fe36d57":"code","c88e498e":"code","dd63bc5e":"code","21936d23":"code","c1921d66":"markdown","599c9245":"markdown","7ac447b1":"markdown","736b9697":"markdown","216d6201":"markdown","34f819a3":"markdown","db95ec92":"markdown","95ca5455":"markdown","6ff15ffd":"markdown","3ca5788a":"markdown"},"source":{"34df2202":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9fc3333":"import pandas as pd","d189652d":"covid_train=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv')\ncovid_train.head()","9525259f":"covid_test=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')\ncovid_test.head()","84b55885":"covid_train.shape","4af95a07":"covid_test.shape","08edf6cf":"covid_train.isnull().sum()","3b99c875":"covid_test.isnull().sum()","883ab31e":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","85872e8e":"sns.heatmap(covid_train.isnull(),yticklabels=False, cbar=False, cmap='viridis')","cc3f18c7":"covid_train.Target.value_counts()","5d335fbb":"sns.set_style('whitegrid')\nsns.countplot(x='Target', data=covid_train)","4e9ee3a4":"sns.distplot(covid_train['Weight'], bins=30)","229ed605":"plt.figure(figsize=(12, 8))\nsns.boxplot(x='Target',y='Population', data=covid_train, palette='winter')","49ee8193":"covid_train.describe()","c4ea66a5":"covid_train.info()","32b40629":"covid_train.corr()","3d502ccd":"sns.heatmap(covid_train.corr(), cmap=\"YlGnBu\", annot=True, linewidths=2)","af251046":"sns.pairplot(covid_train)","d04a5bf8":"covid_train.groupby('Country_Region')['TargetValue'].mean().plot(kind = 'bar', figsize= (40,20), title= \"Countries with COVID-19 MAX\", color='red')","b57c26c8":"df1 = covid_train.Population.groupby(covid_train['Country_Region']).max().sort_values(ascending= False)\ndf1.head(10)","5856634e":"df10 = pd.DataFrame()\ndf20 = pd.DataFrame()\ndf10['population'] = df1.iloc[0:10]\ndf10['country'] = df10.index\ndf20['population'] = df1.iloc[11:20]\ndf20['country'] = df20.index","5e52e3b5":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='population', data=df10, orient ='v')\nplt.xlabel('Country')\nplt.title('Popoulation Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='population', data=df20, orient ='v')\nplt.xlabel('Country')\nplt.title('Population Next 10')","5b23d17c":"Target_df = covid_train.Target.value_counts()\nTarget_df","fbf7be05":"Target = covid_train[covid_train['Target'] =='ConfirmedCases']\nConf_Cases = pd.DataFrame()\nConf_Cases['values'] = Target.TargetValue.groupby(Target['Country_Region']).sum().sort_values(ascending= False)\nConf_Cases['country'] = Conf_Cases.index\nConf_Cases.index = np.arange(0,len(Conf_Cases))\ndata10 = Conf_Cases.iloc[0:10,:]\ndata20 = Conf_Cases.iloc[11:20,:]","75de6040":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Next 10')","dc2cc020":"Target = covid_train[covid_train['Target']!='ConfirmedCases']\nConf_Cases = pd.DataFrame()\nConf_Cases['values'] = Target.TargetValue.groupby(Target['Country_Region']).sum().sort_values(ascending= False)\nConf_Cases['country'] = Conf_Cases.index\nConf_Cases.index = np.arange(0,len(Conf_Cases))\ndata10 = Conf_Cases.iloc[0:10,:]\ndata20 = Conf_Cases.iloc[11:20,:]","d5cc7ed2":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Next 10')","e92cd8e4":"covid_train[covid_train['Country_Region']=='India'].groupby(by='Country_Region').sum()","e93c975d":"d_train = covid_train.drop(['County','Province_State','Country_Region','Target','Date'], axis=1)\nd_test = covid_train.drop(['County','Province_State','Country_Region','Target','Date'], axis=1)","1926d0b3":"X = d_train.iloc[:,1:3]\nY = d_train.iloc[:,3]","8567f5f7":"from sklearn.model_selection import train_test_split\n\npredictors = d_train.drop(['TargetValue', 'Id'], axis=1)\ntarget = d_train['TargetValue']\nX_train, X_test, Y_train, Y_test = train_test_split(predictors,target, test_size=0.2, random_state=0)","6f45f543":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\n \nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0fe36d57":"from sklearn.linear_model import LinearRegression\nregression=LinearRegression()\nregression.fit(X_train,Y_train)","c88e498e":"from sklearn import tree\nmodel = tree.DecisionTreeClassifier()\nmodel.fit(X_train, Y_train)","dd63bc5e":"DTCscore = model.score(X_train,Y_train)\nprint(\"Decision Tree Score: \",DTCscore)","21936d23":"sub=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/submission.csv')\nsub.to_csv('submission.csv',index=False)","c1921d66":"### Data Pre-Processing","599c9245":"### Submission","7ac447b1":"### Missing Data","736b9697":"### Fatalities vs Confirmed cases(India)","216d6201":"<h2 style=\"color:blue\" align=\"center\"> Confirmed Cases : Top 20  <\/h2>","34f819a3":"### EDA","db95ec92":"### Decision Tree","95ca5455":"<h2 style=\"color:blue\" align=\"center\"> Population : Top 20 <\/h2>","6ff15ffd":"<h2 style=\"color:blue\" align=\"center\"> Deaths : Top 20  <\/h2>","3ca5788a":"### Linear Regression"}}