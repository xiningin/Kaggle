{"cell_type":{"7aa8c68e":"code","f8e865b2":"code","7a38dda8":"code","8596d68f":"code","192a8092":"code","776e9688":"code","ffdf2dab":"code","37153bf8":"code","1ee2f243":"code","9c13240f":"code","28992c78":"code","f14bffa6":"code","ac89600f":"code","1b39e4e5":"code","c96f4b04":"code","11571b2a":"code","68b796bf":"code","c756f553":"code","bc201612":"code","c0989aa0":"code","26a2747d":"code","a24ff810":"code","5fb72cbd":"code","b83cd32c":"code","ad8a2780":"code","dcaf0538":"code","17ac95f1":"code","d8f144ba":"code","d12db096":"code","b73348a8":"code","3314b8fb":"code","8beb083e":"code","18c8bcca":"code","5b1cbec9":"code","d8791aae":"markdown","ef2a8322":"markdown","0a00e4e7":"markdown","e2b4df81":"markdown","933a884b":"markdown","544a39f1":"markdown","7f65142d":"markdown","6374351d":"markdown","c0286885":"markdown","837b7de9":"markdown","5bced968":"markdown","6a5f72f0":"markdown"},"source":{"7aa8c68e":"# !pip install scikit-image","f8e865b2":"# read the image\nimport skimage\n\nim = skimage.io.imread('..\/input\/planet-image\/1057916_2016-07-07_RE1_3A_Visual_clip.tif')","7a38dda8":"im = im[:1536,:1536,:]","8596d68f":"#plt.imshow(im[:,:,7],cmap = 'gray')","192a8092":"# reading an sentinel1&sentinel2 image combo extracted from Google Earth Engine\n#im = skimage.io.imread('..\/input\/ls-yakima\/LS_Yakima_20180811.tif')","776e9688":"plt.imshow(im[:,:,3],cmap = 'gray')","ffdf2dab":"from skimage.util.shape import view_as_blocks\nim_blocks = view_as_blocks(im, block_shape=(128, 128, 4))","37153bf8":"# splitting into tiles\nim_blocks.shape\n","1ee2f243":"import os\nimport sys\nimport random\nimport warnings\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\nfrom itertools import chain\nfrom skimage.io import imread, imshow, imread_collection, concatenate_images\nfrom skimage.transform import resize\nfrom skimage.morphology import label\n\nfrom keras.models import Model, load_model\nfrom keras.layers import Input\nfrom keras.layers.core import Dropout, Lambda\nfrom keras.layers.convolutional import Conv2D, Conv2DTranspose\nfrom keras.layers.pooling import MaxPooling2D\nfrom keras.layers.merge import concatenate\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras import backend as K\n\nimport tensorflow as tf\n\n# Set some parameters\nIMG_WIDTH = 128\nIMG_HEIGHT = 128\nIMG_CHANNELS = 3\nTRAIN_PATH = '..\/input\/stage1_train\/'\nTEST_PATH = '..\/input\/stage1_test\/'\n\nwarnings.filterwarnings('ignore', category=UserWarning, module='skimage')\nseed = 42\nrandom.seed = seed\nnp.random.seed = seed","9c13240f":"import matplotlib.pyplot as plt\nplt.imshow(im[:,:,3],cmap = 'gray')\nplt.hist(im[:,:,3].ravel(),2)","28992c78":"imsize = 128","f14bffa6":"plt.imshow(im[:,:,:3])","ac89600f":"im_blocks.squeeze().shape","1b39e4e5":"im_blocks = im_blocks.squeeze().reshape((12*12,128,128,4))\nim_blocks.shape","c96f4b04":"#X_train = im_blocks[:8,:,:,:3] \n#Y_train = im_blocks[:8,:,:,-1]\n#X_test = im_blocks[8:,:,:,:3]\n#Y_test = im_blocks[8:,:,:,-1]","11571b2a":"im_blocks.shape","68b796bf":"from sklearn.model_selection import train_test_split","c756f553":"im_blocks[:,:,:,3].reshape(dim[0],dim[1],dim[2],1).shape","bc201612":"# we will randomly split\nX_train, X_test, Y_train, Y_test = train_test_split(im_blocks[:,:,:,:3], im_blocks[:,:,:,:3].mean(axis=3), test_size=0.33, random_state=42)","c0989aa0":"Y_train.shape","26a2747d":"Y_train = Y_train.reshape(Y_train.shape[0],128,128,1)\nY_test = Y_test.reshape(Y_test.shape[0],128,128,1)","a24ff810":"\n#Y_train = Y_train.reshape(Y_train.shape[0]*Y_train.shape[1],imsize,imsize,1)","5fb72cbd":"#X_train = X_train.reshape((12*12,128,128,3))\n#print(X_train.shape)\n#Y_train = Y_train.reshape((12*12,128,128,1))\n#print(Y_train.shape)","b83cd32c":"Y_test.min()","ad8a2780":"# Check if training data looks all right\nix = random.randint(0, len(im_blocks))\nplt.imshow(X_train[0,:,:,0],)\nplt.imshow(Y_train[0,:,:,0],cmap = 'gray')","dcaf0538":"# Define IoU metric\n# def mean_iou(y_true, y_pred):\n#    prec = []\n#    for t in np.arange(0.5, 1.0, 0.05):\n#        y_pred_ = tf.to_int32(y_pred > t)\n#        score, up_opt = tf.metrics.mean_iou(y_true, y_pred_, 2)\n#        K.get_session().run(tf.local_variables_initializer())\n#        with tf.control_dependencies([up_opt]):\n#            score = tf.identity(score)\n#        prec.append(score)\n#    return K.mean(K.stack(prec), axis=0)","17ac95f1":"# Build U-Net model\ninputs = Input((IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS))\ns = Lambda(lambda x: x \/ 255) (inputs)\n\nc1 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (s)\nc1 = Dropout(0.1) (c1)\nc1 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c1)\np1 = MaxPooling2D((2, 2)) (c1)\n\nc2 = Conv2D(32, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (p1)\nc2 = Dropout(0.1) (c2)\nc2 = Conv2D(32, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c2)\np2 = MaxPooling2D((2, 2)) (c2)\n\nc3 = Conv2D(64, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (p2)\nc3 = Dropout(0.2) (c3)\nc3 = Conv2D(64, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c3)\np3 = MaxPooling2D((2, 2)) (c3)\n\nc4 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (p3)\nc4 = Dropout(0.2) (c4)\nc4 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c4)\np4 = MaxPooling2D(pool_size=(2, 2)) (c4)\n\nc5 = Conv2D(256, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (p4)\nc5 = Dropout(0.3) (c5)\nc5 = Conv2D(256, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c5)\n\nu6 = Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same') (c5)\nu6 = concatenate([u6, c4])\nc6 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (u6)\nc6 = Dropout(0.2) (c6)\nc6 = Conv2D(128, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c6)\n\nu7 = Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same') (c6)\nu7 = concatenate([u7, c3])\nc7 = Conv2D(64, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (u7)\nc7 = Dropout(0.2) (c7)\nc7 = Conv2D(64, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c7)\n\nu8 = Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same') (c7)\nu8 = concatenate([u8, c2])\nc8 = Conv2D(32, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (u8)\nc8 = Dropout(0.1) (c8)\nc8 = Conv2D(32, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c8)\n\nu9 = Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same') (c8)\nu9 = concatenate([u9, c1], axis=3)\nc9 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (u9)\nc9 = Dropout(0.1) (c9)\nc9 = Conv2D(16, (3, 3), activation='elu', kernel_initializer='he_normal', padding='same') (c9)\n\noutputs = Conv2D(1, (1, 1), activation='linear') (c9)\n\nmodel = Model(inputs=[inputs], outputs=[outputs])\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()","d8f144ba":"# Fit model\nearlystopper = EarlyStopping(patience=5, verbose=1)\ncheckpointer = ModelCheckpoint('model-dsbowl2018-1.h5', verbose=1, save_best_only=True)\nresults = model.fit(X_train, Y_train, validation_split=0.1, batch_size=16, epochs=50, \n                    callbacks=[earlystopper, checkpointer])","d12db096":"# Predict on train, val and test\nmodel = load_model('model-dsbowl2018-1.h5')\npreds_train = model.predict(X_train[:int(X_train.shape[0]*0.9)], verbose=1)\npreds_val = model.predict(X_train[int(X_train.shape[0]*0.9):], verbose=1)\npreds_test = model.predict(X_test, verbose=1)\n\n# Threshold predictions\npreds_train_t = (preds_train > 0.5).astype(np.uint8)\npreds_val_t = (preds_val > 0.5).astype(np.uint8)\npreds_test_t = (preds_test > 0.5).astype(np.uint8)\n\n# Create list of upsampled test masks\npreds_test_upsampled = []\nfor i in range(len(preds_test)):\n    preds_test_upsampled.append(resize(np.squeeze(preds_test[i]), \n                                       (sizes_test[i][0], sizes_test[i][1]), \n                                       mode='constant', preserve_range=True))","b73348a8":"# Perform a sanity check on some random training samples\nix = random.randint(0, X_train.shape[0])\nimshow(X_train[ix])\nplt.show()\nimshow(np.squeeze(Y_train[ix]),cmap = 'gray')\nplt.show()\nimshow(np.squeeze(preds_train[ix]),cmap = 'gray')\nplt.show()","3314b8fb":"# Perform a sanity check on some random training samples\nix = random.randint(0, X_train.shape[0])\nimshow(X_train[ix])\nplt.show()\nimshow(np.squeeze(Y_train[ix]),cmap = 'gray')\nplt.show()\nimshow(np.squeeze(preds_train[ix]),cmap = 'gray')\nplt.show()","8beb083e":"preds_train.min()","18c8bcca":"# Perform a sanity check on some random validation samples\nix = random.randint(0, preds_val.shape[0])\nimshow(X_train[int(X_train.shape[0]*0.9):][ix])\nplt.show()\nimshow(np.squeeze(Y_train[int(Y_train.shape[0]*0.9):][ix]),cmap = 'gray')\nplt.show()\nimshow(np.squeeze(preds_val[ix]),cmap = 'gray')\nplt.show()","5b1cbec9":"### Future:\n    ","d8791aae":"Let's see if things look all right by drawing some random images and their associated masks.","ef2a8322":"### Mod2Mod\n\nWe explore using deep learning to learn mappings from one satellite imaging modality to another.\n\n* Some modalitities are expensive to obtain, or not available at the needed time.\n* Some modalitities are more intrerpretable to the untrained eye\n* Some algorithms require having specific bands, or they are trained on specific bands and we would like to achieve a similar performance on new bands\n\nThis technique is called Colorification (used for converting grayscale to RGB images, but here we consider the more general case of mapping). It can be achieved by fitting a function from one modality to the other one and when a lot of data is available can be tackled by deep learning.\n\nhttps:\/\/arxiv.org\/pdf\/1604.02245.pdf\n\nhttps:\/\/richzhang.github.io\/colorization\/\n\n\nWe will explore several modalities: RGB, Infrared, Radar.","0a00e4e7":"The model is at least able to fit to the training data! Certainly a lot of room for improvement even here, but a decent start. How about the validation data?","e2b4df81":"### RGB2IR","933a884b":"We are going to \n\n","544a39f1":"All right, looks good! Loss seems to be a bit erratic, though. I'll leave it to you to improve the model architecture and parameters! \n\n# Make predictions\n\nLet's make predictions both on the test set, the val set and the train set (as a sanity check). Remember to load the best saved model if you've used early stopping and checkpointing.","7f65142d":"*Update: Changed to ELU units, added dropout.*\n\nNext we fit the model on the training data, using a validation split of 0.1. We use a small batch size because we have so little data. I recommend using checkpointing and early stopping when training your model. I won't do it here to make things a bit more reproducible (although it's very likely that your results will be different anyway). I'll just train for 10 epochs, which takes around 10 minutes in the Kaggle kernel with the current parameters. \n\n*Update: Added early stopping and checkpointing and increased to 30 epochs.*","6374351d":"![](http:\/\/)We will use Keras and a deep learning architecture called [U-net](https:\/\/arxiv.org\/abs\/1505.04597) (which has been successful in many imaging domains).","c0286885":"We will use a small image from Planet Labs RGB-IR image to test the pipeline.","837b7de9":"### Future:\n    * test with an model pretrained on satellite imagery\n    * test rural vs urban\n    * ","5bced968":"# Build and train our neural network\nNext we build our U-Net model, loosely based on [U-Net: Convolutional Networks for Biomedical Image Segmentation](https:\/\/arxiv.org\/pdf\/1505.04597.pdf) and very similar to [this repo](https:\/\/github.com\/jocicmarko\/ultrasound-nerve-segmentation) from the Kaggle Ultrasound Nerve Segmentation competition.\n\n![](https:\/\/lmb.informatik.uni-freiburg.de\/people\/ronneber\/u-net\/u-net-architecture.png)","6a5f72f0":"# Get and resize train images and masks\nX_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)\nY_train = np.zeros((len(train_ids), IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)\nprint('Getting and resizing train images and masks ... ')\nsys.stdout.flush()\nfor n, id_ in tqdm(enumerate(train_ids), total=len(train_ids)):\n    path = TRAIN_PATH + id_\n    img = imread(path + '\/images\/' + id_ + '.png')[:,:,:IMG_CHANNELS]\n    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)\n    X_train[n] = img\n    mask = np.zeros((IMG_HEIGHT, IMG_WIDTH, 1), dtype=np.bool)\n    for mask_file in next(os.walk(path + '\/masks\/'))[2]:\n        mask_ = imread(path + '\/masks\/' + mask_file)\n        mask_ = np.expand_dims(resize(mask_, (IMG_HEIGHT, IMG_WIDTH), mode='constant', \n                                      preserve_range=True), axis=-1)\n        mask = np.maximum(mask, mask_)\n    Y_train[n] = mask\n\n# Get and resize test images\nX_test = np.zeros((len(test_ids), IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS), dtype=np.uint8)\nsizes_test = []\nprint('Getting and resizing test images ... ')\nsys.stdout.flush()\nfor n, id_ in tqdm(enumerate(test_ids), total=len(test_ids)):\n    path = TEST_PATH + id_\n    img = imread(path + '\/images\/' + id_ + '.png')[:,:,:IMG_CHANNELS]\n    sizes_test.append([img.shape[0], img.shape[1]])\n    img = resize(img, (IMG_HEIGHT, IMG_WIDTH), mode='constant', preserve_range=True)\n    X_test[n] = img\n\nprint('Done!')"}}