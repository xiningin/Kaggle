{"cell_type":{"44d0b0f0":"code","19d46751":"code","8a57a7c5":"code","0aaa8a12":"code","610dd1b4":"code","0b65327c":"code","e359b641":"code","2358667e":"code","3c44c440":"code","b8df5d8f":"code","9efbae5b":"code","5740e3b4":"code","72639b4e":"code","476aa537":"code","bc4516a2":"code","b5adfe97":"code","c0eecdff":"code","0b308998":"code","398629e0":"code","686dcc54":"code","f3d1b28a":"code","6b9fb16c":"code","19bce352":"code","ee53d17a":"code","064dc522":"code","b15874b0":"code","b105ec64":"code","fd362f24":"code","44a4f28e":"code","13d3c83d":"code","525108f6":"code","60552b03":"code","906f4dd4":"code","d530d3a4":"code","dda664db":"code","cd97007d":"code","6ee9f3c6":"code","14d52c1b":"code","2b014705":"code","fcdbca4f":"code","baf2baf4":"code","a4daffcc":"markdown","fd0008c9":"markdown","a98cf471":"markdown","bbd4caf0":"markdown","a65f05b6":"markdown","71a36f0b":"markdown","eb16fd32":"markdown"},"source":{"44d0b0f0":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom tensorflow import keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split","19d46751":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","8a57a7c5":"train.head()","0aaa8a12":"test.head()","610dd1b4":"# put labels into x and y\ny_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"], axis = 1)","0b65327c":"plt.figure(figsize = (10,7))\nsns.countplot(y_train)\nplt.title(\"Number of digit class\")\nplt.show()\ny_train.value_counts()","e359b641":"# plot a number\nimg = X_train.iloc[3].to_numpy()\nimg = img.reshape(28,28)\nplt.imshow(img, cmap = \"gray\")\nplt.title(train.iloc[3,0])\nplt.axis(\"off\")\nplt.show()","2358667e":"# plot another number\nimg = X_train.iloc[5].to_numpy()\nimg = img.reshape(28,28)\nplt.imshow(img, cmap = \"gray\")\nplt.title(train.iloc[5,0])\nplt.axis(\"off\")\nplt.show()","3c44c440":"X_train = X_train \/ 255.0   # for gray scale images\nprint(X_train.shape)   # we will transform the shape into (42000, 28, 28, 1)","b8df5d8f":"# reshape for keras input shape\nX_train = X_train.values.reshape(-1, 28, 28, 1)\nX_train.shape","9efbae5b":"# Encode the labels to one-hot vectors\n# from tensorflow.keras.utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)","5740e3b4":"# from sklearn library\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.11, random_state = 42)","72639b4e":"print(\"X_train shape: \", X_train.shape)\nprint(\"X_val shape: \", X_val.shape)\nprint(\"y_train shape: \", y_train.shape)\nprint(\"y_val shape: \", y_val.shape)","476aa537":"plt.imshow(X_train[11], cmap = \"gray\")\nplt.show()","bc4516a2":"# initialize model\nmodel = Sequential()","b5adfe97":"input_shape = X_train.shape[1:]\ninput_shape","c0eecdff":"# building model : this is LeNet-5 structure\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential()\nmodel.add(layers.Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape= input_shape))\nmodel.add(layers.AveragePooling2D())\nmodel.add(layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu'))\nmodel.add(layers.AveragePooling2D())\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(units=120, activation='relu'))\nmodel.add(layers.Dense(units=84, activation='relu'))\nmodel.add(layers.Dense(units=10, activation = 'softmax'))","0b308998":"model.summary()","398629e0":"# define optimizer\noptimizer = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)","686dcc54":"# compile model\nmodel.compile(optimizer = optimizer, loss = \"categorical_crossentropy\", metrics = [\"accuracy\"])","f3d1b28a":"datagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False, \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=5,  \n        zoom_range = 0.1, \n        width_shift_range=0.1,  \n        height_shift_range=0.1, \n        horizontal_flip=False,  \n        vertical_flip=False \n        ) ","6b9fb16c":"datagen.fit(X_train)","19bce352":"X_train.shape  # now we have over 37000 sample for training","ee53d17a":"y_val.shape","064dc522":"y_train.shape","b15874b0":"X_val.shape","b105ec64":"epochs = 5\nbatch_size = 180","fd362f24":"history = model.fit_generator(datagen.flow(X_train, y_train, batch_size = batch_size), epochs = epochs, \n                              validation_data = (X_val, y_val), steps_per_epoch = X_train.shape[0] \/\/ batch_size)","44a4f28e":"plt.plot(history.history[\"val_loss\"], color = \"b\")\nplt.title(\"Validation Loss\")\nplt.xlabel(\"Number of epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","13d3c83d":"plt.plot(history.history[\"accuracy\"], color = \"b\")\nplt.title(\"Accuracy\")\nplt.xlabel(\"Number of epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","525108f6":"plt.plot(history.history[\"loss\"], color = \"b\")\nplt.title(\"Loss\")\nplt.xlabel(\"Number of epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","60552b03":"test_array = test \/ 255.0\ntest_array = test_array.values.reshape(-1,28,28,1)\ntest_array.shape","906f4dd4":"# predict the values from the valiadation data\ny_pred = model.predict(X_val)","d530d3a4":"# Convert predictions classes to one hot vectors\ny_pred_classes = np.argmax(y_pred, axis = 1)\ny_pred_classes[:5]","dda664db":"# Convert validation observations to one hot vectors\ny_true = np.argmax(y_val, axis = 1)\ny_true[:5]","cd97007d":"# Confusion Matrix\nimport seaborn as sns\n\nconfusion_mtx = confusion_matrix(y_true, y_pred_classes)\n# plot the confusion matrix\nf, ax = plt.subplots(figsize = (8,8))\nsns.heatmap(confusion_mtx, annot = True, linewidths = 0.01, cmap = \"Greens\", linecolor = \"gray\",\n            fmt = \".1f\", ax = ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion matrix\")\nplt.show()\n","6ee9f3c6":"# Lastly, we have to predict test data for contest\ntest_pred = model.predict(test_array)\ntest_pred_classes = np.argmax(test_pred, axis = 1)","14d52c1b":"test_pred_classes.shape","2b014705":"pred_dict = {\"ImageId\" : np.arange(1,28001).astype(int), \"Label\" : test_pred_classes}\nresults = pd.DataFrame(pred_dict)\nresults.tail()","fcdbca4f":"results.shape","baf2baf4":"results.to_csv(\"results.csv\", index = False)","a4daffcc":"#### Fit the model","fd0008c9":"### Normalization, Reshapes and Encoding","a98cf471":"#### Load Data","bbd4caf0":"### CNN - Implementing  with Keras","a65f05b6":"#### Train - Test Split","71a36f0b":"#### Prediction","eb16fd32":"#### Import Libraries"}}