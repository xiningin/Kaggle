{"cell_type":{"9863a452":"code","af0c251b":"code","58a33633":"code","54f68a76":"code","46151335":"code","7e7b52b9":"code","a8c7ae77":"code","fe8a54f7":"code","16e4c5ab":"code","cf0faf13":"markdown","48acacf8":"markdown","314a552b":"markdown","f46ba166":"markdown","958c78b3":"markdown","6f73a0a3":"markdown","c6778bbc":"markdown","5cb82a58":"markdown","c756b02d":"markdown","bb6f414d":"markdown"},"source":{"9863a452":"import cv2\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nfrom skimage.filters import threshold_otsu","af0c251b":"image = cv2.imread('\/kaggle\/input\/pothole\/pothole.jpeg')\nhaze_road = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\ndehizing = haze_road.copy()","58a33633":"def hist(histimg):\n    abu = cv2.cvtColor(haze_road, cv2.COLOR_RGB2GRAY)\n    channels = cv2.split(abu)\n    cv2.equalizeHist(channels[0], channels[0])\n    cv2.merge(channels, abu)\n    cv2.cvtColor(abu, cv2.COLOR_GRAY2RGB, histimg)\n    return histimg\n\nhistequ = hist(haze_road)","54f68a76":"tepi = cv2.Canny(haze_road,50,130)","46151335":"fig = plt.figure(figsize=(16,16))\nfig.add_subplot(1,2,1).title.set_text('hitogram equalization')\nplt.imshow(histequ)\nfig.add_subplot(1,2,2).title.set_text('edges using canny')\nplt.imshow(tepi)\nplt.show()","7e7b52b9":"for powerlaw in[2]:\n    out = np.array(150*(dehizing\/255)**powerlaw, dtype='uint8')\n    \nimgfilter = np.array([[1, -2, -3], [1, 8, -1], [2, -3, -1]])\n\njadi = cv2.filter2D(out, -1, imgfilter)","a8c7ae77":"fig = plt.figure(figsize=(16,16))\nfig.add_subplot(1,2,1).title.set_text('potholes in hazy road')\nplt.imshow(dehizing)\nfig.add_subplot(1,2,2).title.set_text('after dehazing')\nplt.imshow(jadi)\nplt.show()","fe8a54f7":"totsu = threshold_otsu(tepi)\nedges = tepi > totsu\ndehizing[:, :, 0] = np.clip(dehizing[:, :, 1] + edges * 255, 0, 255)\njadi[:, :, 0] = np.clip(jadi[:, :, 1] + edges * 255, 0, 255)","16e4c5ab":"fig = plt.figure(figsize=(16,16))\nfig.add_subplot(1,2,1).title.set_text('potholes in hazy road with edges')\nplt.imshow(dehizing)\nfig.add_subplot(1,2,2).title.set_text('after dehazing with edges')\nplt.imshow(jadi)\nplt.show()","cf0faf13":"Memisahkan piksel pada gambar tepi dengan threshold metode otsu agar menjadi 2 kelas, depan dan belakang. Sehingga bisa memasukkan garis tepi pada batas warna hijau, yang mana untuk rgb [:. :. 0] = merah, [:. :. 1] = hujau, [:. :. 0] = biru. Kemudian menyisipkannya pada gambar yang diambil.","48acacf8":"Memetakan range nilai input dengan power law untuk memperluas citra output. Kemudian menggunakan filter2D untuk penyaringan elemen yang akan diperluas citranya.","314a552b":"***Mencari garis tepi lubang***","f46ba166":"Untuk meratakan persebaran citra dengan metode perbaikan citra histogram equalization yang dijadikan warna abu","958c78b3":"Menyisipkan gambar dengan fungsi load image yg dimiliki oleh OpenCV yaitu cv2.imread dan mengubah warnanya dari BGR ke RGB agar sesuai aslinya dengan cv2.cvtColor yang mana cv2.COLOR_BGR2RGB. Menyimpan gambar agar tidak terubah-ubah isinya dengan variabel dehizing.","6f73a0a3":"***Memasukkan garis tepi pada gambar***","c6778bbc":"Menampilkan gambar asli dan gambar yang telah diperluas citranya. Dapat dilihat bahwa ketebalan kabut berkurang, maka telah kita dapatkan gambar dengan ketebalan kabut yang lebih tipis.","5cb82a58":"***Membuat gambar tanpa kabut***","c756b02d":"Mengambil garis tepi dengan metode canny","bb6f414d":"Import cv2 untuk operasi gambar dengan OpenCV. Import numpy dan pandas. Import pyplot untuk menampilkan gambar dalam row dan colom. Import threshold otsu agar dapat melakukan thresholding dengan metode otsu."}}